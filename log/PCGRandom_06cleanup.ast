AST dump for PCGRandom after pass cleanup.
Module use list: 

{
  (353175 'use' ChapelStandard)
  (307649 'use'(307646 call . super c"RandomSupport"))
  (307653 'use' Random)
  (307656 'use' PCGRandomLib)
  (307659 'use' ChapelLocks)
  function numGenerators[307665](arg t[307663]:_any[178](?)) param : _unknown[51] "private"
  {
    if(307686 call _cond_test(307670 call isBoolType t))
    {
      (307672 return 1)
    }
    {
      (307684 return(307682 call /(307679 call +(307677 call numBits t) 31) 32))
    }
  }
  function PCGRandomStream[309220](?).init[307717](arg _mt[309224]:_MT[238], arg this[309222]:PCGRandomStream[309220](?), arg eltType[307715]:_any[178](?), arg seed[307729] :
  (307722 call int[13] 64) =
  (307726 call . SeedGenerator c"currentTime"), param arg parSafe[307735] :
  bool[10] =
  1) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (307744 call =(307740 call . this c"eltType") eltType)
    (307755 call =(307751 call . this c"seed") seed)
    (307763 call =(307759 call . this c"parSafe") parSafe)
    (307771 call(307767 call . this c"complete"))
    {
      unknown i[307815] 0
      unknown tmp[307816] "maybe param" "temp"
      (307828 'move' tmp[307816](307826 call chpl_compute_low_param_loop_bound 0(307779 call -(307777 call numGenerators eltType) 1)))
      unknown tmp[307817] "maybe param" "temp"
      (307840 'move' tmp[307817](307838 call chpl_compute_high_param_loop_bound 0(307833 call -(307835 call numGenerators eltType) 1)))
      unknown tmp[307818] "maybe param" "temp"
      (307843 'move' tmp[307818] 1)
      ParamForLoop[307845]
      { i[307815] tmp[307816] tmp[307817] tmp[307818]
        {
          unknown inc[307790] "param"(307789 call pcg_getvalid_inc(307786 call + i 1))
          (307793 'end of statement')
          (307813 call(307801 call .(307798 call PCGRandomStreamPrivate_rngs i) c"srandom")(307809 call _cast(307808 call uint[115] 64) seed) inc)
        }
      }
      label _unused_continueLabel[307820]
      label _breakLabel[307819]
    }
    (307856 call = PCGRandomStreamPrivate_count 1)
  }
  function PCGRandomStream[309220](?).PCGRandomStreamPrivate_getNext_noLock[307865](arg _mt[309228]:_MT[238], arg this[309226]:PCGRandomStream[309220](?), arg resultType[307863]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (307869 call += PCGRandomStreamPrivate_count 1)
    (307878 return(307877 call randlc resultType PCGRandomStreamPrivate_rngs))
  }
  function PCGRandomStream[309220](?).PCGRandomStreamPrivate_getNext_noLock[307886](arg _mt[309232]:_MT[238], arg this[309230]:PCGRandomStream[309220](?), arg resultType[307884]:_any[178](?), arg min[307889] :
  resultType, arg max[307893] :
  resultType) : _unknown[51] "method" "primary method" "no doc"
  {
    (307898 call += PCGRandomStreamPrivate_count 1)
    (307914 return(307913 call randlc_bounded resultType PCGRandomStreamPrivate_rngs seed(307909 call - PCGRandomStreamPrivate_count 1) min max))
  }
  function PCGRandomStream[309220](?).PCGRandomStreamPrivate_skipToNth_noLock[307924](arg _mt[309236]:_MT[238], arg this[309234]:PCGRandomStream[309220](?), in arg n[307921] :
  integral) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (307931 call = PCGRandomStreamPrivate_count(307929 call + n 1))
    (307945 call = PCGRandomStreamPrivate_rngs(307944 call randlc_skipto eltType seed(307942 call + n 1)))
  }
  function PCGRandomStream[309220](?).getNext[307956](arg _mt[309240]:_MT[238], arg this[309238]:PCGRandomStream[309220](?), arg resultType[307953]:_any[178](?) =
  eltType) : _unknown[51] "method" "primary method"
  {
    (307961 call _lock)
    const result[307968] "const"(307967 call PCGRandomStreamPrivate_getNext_noLock resultType)
    (307971 'end of statement')
    (307974 call _unlock)
    (307977 return result)
  }
  { scopeless type
    resultType
  }
  function PCGRandomStream[309220](?).getNext[307988](arg _mt[309244]:_MT[238], arg this[309242]:PCGRandomStream[309220](?), arg min[307985] :
  eltType, arg max[307991] :
  eltType) : _unknown[51] "method" "primary method"
  {
    (307996 'use' HaltWrappers)
    (308001 call _lock)
    if(308052 call _cond_test(308008 call && boundsChecking(308006 call > min max)))
    {
      (308050 call(308011 call . HaltWrappers c"boundsCheckHalt")(308047 call +(308044 call +(308038 call +(308035 call + "Cannot generate random numbers within empty range: ["(308033 call _cast string[26] min)) ", ")(308042 call _cast string[26] max)) "]"))
    }
    const result[308063] "const"(308062 call PCGRandomStreamPrivate_getNext_noLock eltType min max)
    (308066 'end of statement')
    (308069 call _unlock)
    (308072 return result)
  }
  { scopeless type
    eltType
  }
  function PCGRandomStream[309220](?).getNext[308081](arg _mt[309248]:_MT[238], arg this[309246]:PCGRandomStream[309220](?), arg resultType[308079]:_any[178](?), arg min[308084] :
  resultType, arg max[308088] :
  resultType) : _unknown[51] "method" "primary method"
  {
    (308093 'use' HaltWrappers)
    (308098 call _lock)
    if(308133 call _cond_test(308105 call && boundsChecking(308103 call > min max)))
    {
      (308131 call(308108 call . HaltWrappers c"boundsCheckHalt")(308128 call +(308125 call +(308119 call +(308116 call + "Cannot generate random numbers within empty range: ["(308114 call _cast string[26] min)) ", ")(308123 call _cast string[26] max)) "]"))
    }
    const result[308144] "const"(308143 call PCGRandomStreamPrivate_getNext_noLock resultType min max)
    (308147 'end of statement')
    (308150 call _unlock)
    (308153 return result)
  }
  { scopeless type
    resultType
  }
  function PCGRandomStream[309220](?).skipToNth[308164](arg _mt[309252]:_MT[238], arg this[309250]:PCGRandomStream[309220](?), arg n[308161] :
  integral) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    if(308201 call _cond_test(308168 call < n 0))
    {
      (308199 'throw'(308172 'new'(_chpl_manager = _owned[30](?))(308198 call IllegalArgumentError(308195 call + "PCGRandomStream.skipToNth(n) called with negative 'n' value "(308193 call _cast string[26] n)))))
    }
    (308209 call _lock)
    (308214 call PCGRandomStreamPrivate_skipToNth_noLock n)
    (308218 call _unlock)
  }
  function PCGRandomStream[309220](?).getNth[308228](arg _mt[309256]:_MT[238], arg this[309254]:PCGRandomStream[309220](?), arg n[308225] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(308266 call _cond_test(308233 call < n 0))
    {
      (308264 'throw'(308237 'new'(_chpl_manager = _owned[30](?))(308263 call IllegalArgumentError(308260 call + "PCGRandomStream.getNth(n) called with negative 'n' value "(308258 call _cast string[26] n)))))
    }
    (308274 call _lock)
    (308279 call PCGRandomStreamPrivate_skipToNth_noLock n)
    const result[308285] "const"(308284 call PCGRandomStreamPrivate_getNext_noLock eltType)
    (308288 'end of statement')
    (308291 call _unlock)
    (308294 return result)
  }
  { scopeless type
    eltType
  }
  function PCGRandomStream[309220](?).fillRandom[308308](arg _mt[309260]:_MT[238], arg this[309258]:PCGRandomStream[309220](?), arg arr[308305] :
  (308302 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown x[308335] "index var" "insert auto destroy"
        
        unknown r[308337] "index var" "insert auto destroy"
      iterated expressions:
        arr
        (308327 call iterate(308319 call . arr c"_dom")(308324 call . arr c"eltType"))
      shadow variables:
      other variables
        forall body
      {
        (308331 call = x r)
      }
    }
  }
  function PCGRandomStream[309220](?).choice[308354](arg _mt[309264]:_MT[238], arg this[309262]:PCGRandomStream[309220](?), arg x[308351] :
  (308349 call chpl__buildArrayRuntimeType unknown dom[308346]), arg size[308359] :
  unknown sizeType[308356] =
  none[57], arg replace[308364] =
  1, arg prob[308370] :
  unknown probType[308367] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    unknown idx[308385](308384 call _choice this dom(size = size)(replace = replace)(prob = prob))
    (308388 'end of statement')
    (308394 return(308393 call x idx))
  }
  function PCGRandomStream[309220](?).choice[308408](arg _mt[309268]:_MT[238], arg this[309266]:PCGRandomStream[309220](?), arg x[308405] :
  (308404 call range(stridable = ?[260])), arg size[308413] :
  unknown sizeType[308410] =
  none[57], arg replace[308418] =
  1, arg prob[308424] :
  unknown probType[308421] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    unknown dom[308435](308433 call chpl__buildDomainRuntimeType defaultDist 1(stridable = 1))
    (308438 'end of statement')
    if(308492 call _cond_test(308444 call !(308443 call isBoundedRange x)))
    {
      (308469 'throw'(308448 'new'(_chpl_manager = _owned[30](?))(308468 call IllegalArgumentError "input range must be bounded")))
      (308480 call = dom(308478 call chpl__buildDomainExpr(308475 call chpl_build_bounded_range 1 2)))
    }
    {
      (308488 call = dom(308486 call chpl__buildDomainExpr x))
    }
    (308507 return(308506 call _choice this dom(size = size)(replace = replace)(prob = prob)))
  }
  function PCGRandomStream[309220](?).choice[308517](arg _mt[309272]:_MT[238], arg this[309270]:PCGRandomStream[309220](?), arg x[308514] :
  _domain, arg size[308522] :
  unknown sizeType[308519] =
  none[57], arg replace[308527] =
  1, arg prob[308533] :
  unknown probType[308530] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    (308548 return(308547 call _choice this x(size = size)(replace = replace)(prob = prob)))
  }
  function PCGRandomStream[309220](?).shuffle[308565](arg _mt[309276]:_MT[238], arg this[309274]:PCGRandomStream[309220](?), arg arr[308562] :
  (308560 call chpl__buildArrayRuntimeType unknown D[308555] unknown eltType[308558])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(308595 call _cond_test(308572 call !=(308568 call . D c"rank") 1))
    {
      (308593 call compilerError "Shuffle requires 1-D array")
    }
    const low[308605] "const"(308602 call . D c"alignedLow")
    const stride[308615] "const"(308614 call abs(308610 call . D c"stride"))
    (308618 'end of statement')
    (308621 call _lock)
    {
      unknown _indexOfInterest[308700] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[308701] "expr temp" "temp"
      (308710 'move' _iterator[308701](308708 call _getIterator(308636 call chpl_by(308631 call #(308625 call chpl_build_low_bounded_range 0)(308628 call . D c"size"))(308634 call - 1))))
      Defer
      {
        {
          (308738 call _freeIterator _iterator[308701])
        }
      }
      { scopeless type
        (308727 'move' _indexOfInterest[308700](308724 call iteratorIndex _iterator[308701]))
      }
      ForLoop[308702]
      {
        unknown i[308731] "index var" "insert auto destroy"
        (308733 'move' i[308731] _indexOfInterest[308700])
        {
          unknown k[308650](308649 call randlc_bounded(308640 call . D c"idxType") PCGRandomStreamPrivate_rngs seed PCGRandomStreamPrivate_count 0 i)
          (308653 'end of statement')
          unknown j[308656] i
          (308659 'end of statement')
          if(308675 call _cond_test(308662 call > stride 1))
          {
            (308666 call *= k stride)
            (308672 call *= j stride)
          }
          (308681 call += k low)
          (308686 call += j low)
          (308697 call <=>(308692 call arr k)(308696 call arr j))
        }
        label _continueLabel[308705]
        _indexOfInterest[308700]
        _iterator[308701]
      }
      label _breakLabel[308706]
    }
    (308750 call += PCGRandomStreamPrivate_count(308747 call . D c"size"))
    (308755 call _unlock)
  }
  function PCGRandomStream[309220](?).permutation[308768](arg _mt[309280]:_MT[238], arg this[309278]:PCGRandomStream[309220](?), arg arr[308765] :
  (308762 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown low[308783](308780 call .(308779 call(308774 call .(308771 call . arr c"_dom") c"dim") 0) c"low")
    (308786 'end of statement')
    unknown high[308801](308798 call .(308797 call(308792 call .(308789 call . arr c"_dom") c"dim") 0) c"high")
    (308804 'end of statement')
    if(308836 call _cond_test(308813 call !=(308809 call .(308806 call . arr c"_dom") c"rank") 1))
    {
      (308834 call compilerError "Permutation requires 1-D array")
    }
    (308843 call _lock)
    {
      unknown _indexOfInterest[308889] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[308890] "expr temp" "temp"
      (308899 'move' _iterator[308890](308897 call _getIterator(308904 call chpl_direct_range_iter low high 1)))
      Defer
      {
        {
          (308920 call _freeIterator _iterator[308890])
        }
      }
      { scopeless type
        (308909 'move' _indexOfInterest[308889](308906 call iteratorIndex _iterator[308890]))
      }
      ForLoop[308891]
      {
        unknown i[308913] "index var" "insert auto destroy"
        (308915 'move' i[308913] _indexOfInterest[308889])
        {
          unknown j[308865](308864 call randlc_bounded(308855 call .(308852 call . arr c"_dom") c"idxType") PCGRandomStreamPrivate_rngs seed PCGRandomStreamPrivate_count low i)
          (308868 'end of statement')
          (308878 call =(308873 call arr i)(308877 call arr j))
          (308886 call =(308884 call arr j) i)
        }
        label _continueLabel[308894]
        _indexOfInterest[308889]
        _iterator[308890]
      }
      label _breakLabel[308895]
    }
    (308932 call += PCGRandomStreamPrivate_count(308930 call - high low))
    (308937 call _unlock)
  }
  function PCGRandomStream[309220](?).fillRandom[308949](arg _mt[309284]:_MT[238], arg this[309282]:PCGRandomStream[309220](?), arg arr[308946] :
  (308943 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (308995 call compilerError "PCGRandomStream(eltType="(308972 call _cast string[26] eltType) ") can only be used to fill arrays of "(308993 call _cast string[26] eltType))
  }
  function PCGRandomStream[309220](?).iterate[309006](arg _mt[309288]:_MT[238], arg this[309286]:PCGRandomStream[309220](?), arg D[309003] :
  _domain, arg resultType[309009]:_any[178](?) =
  eltType) : _unknown[51] "method" "primary method" "fn returns iterator"
  {
    (309014 call _lock)
    const start[309018] "const" PCGRandomStreamPrivate_count
    (309021 'end of statement')
    (309036 call += PCGRandomStreamPrivate_count(309035 call(309027 call .(309024 call . D c"size") c"safeCast")(309033 call int[13] 64)))
    (309045 call PCGRandomStreamPrivate_skipToNth_noLock(309042 call - PCGRandomStreamPrivate_count 1))
    (309049 call _unlock)
    (309058 return(309057 call PCGRandomPrivate_iterate resultType D seed start))
  }
  function PCGRandomStream[309220](?).iterate[309068](arg _mt[309292]:_MT[238], arg this[309290]:PCGRandomStream[309220](?), arg D[309065] :
  _domain, arg resultType[309071]:_any[178](?) =
  eltType, param arg tag[309074]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  {
    const start[309084] "const" PCGRandomStreamPrivate_count
    (309087 'end of statement')
    (309097 return(309096 call PCGRandomPrivate_iterate resultType D seed start tag))
  }
  where {
    (309081 call == tag(309078 call . iterKind c"leader"))
  }
  function PCGRandomStream[309220](?).writeThis[309106](arg _mt[309296]:_MT[238], arg this[309294]:PCGRandomStream[309220](?), arg f[309104]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides" "no return value for void"
  {
    (309110 call <~> f "PCGRandomStream(eltType=")
    (309119 call <~> f(309117 call _cast string[26] eltType))
    (309124 call <~> f ", parSafe=")
    (309129 call <~> f parSafe)
    (309134 call <~> f ", seed=")
    (309139 call <~> f seed)
    (309144 call <~> f ")")
  }
  function PCGRandomStream[309220](?)._lock[309161](arg _mt[309300]:_MT[238], arg this[309298]:PCGRandomStream[309220](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(309171 call _cond_test parSafe)
    {
      (309169 call(309165 call . _l c"lock"))
    }
  }
  function PCGRandomStream[309220](?)._unlock[309181](arg _mt[309304]:_MT[238], arg this[309302]:PCGRandomStream[309220](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(309191 call _cond_test parSafe)
    {
      (309189 call(309185 call . _l c"unlock"))
    }
  }
  type PCGRandomStream[309220](?) unknown eltType[307696] "type variable" const seed[307703] "const"(307702 call int[13] 64) unknown parSafe[307709] "param" 1 bool[10] unknown _l[309155] "no doc"(309152 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) unknown PCGRandomStreamPrivate_rngs[309206] "no doc"(309204 call *(309202 call numGenerators eltType) pcg_setseq_64_xsh_rr_32_rng) unknown PCGRandomStreamPrivate_count[309215] "no doc" 1(309213 call int[13] 64)
  function randToReal64[309316](arg x[309313] :
  (309312 call uint[115] 64)) : _unknown[51] "inline" "private"
  {
    (309335 return(309334 call ldexp(309328 call _cast(309327 call real[16] 64) x)(309332 call - 64)))
  }
  { scopeless type
    (309321 call real[16] 64)
  }
  function randToReal64[309350](arg x[309347] :
  (309346 call uint[115] 64), arg min[309356] :
  (309355 call real[16] 64), arg max[309363] :
  (309362 call real[16] 64)) : _unknown[51] "inline" "private"
  {
    unknown normalized[309374](309373 call randToReal64 x)
    (309377 'end of statement')
    (309389 return(309387 call +(309384 call *(309381 call - max min) normalized) min))
  }
  { scopeless type
    (309369 call real[16] 64)
  }
  function randToReal32[309403](arg x[309400] :
  (309399 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    (309418 return(309417 call ldexp(309411 call _cast(309410 call real[16] 32) x)(309415 call - 32)))
  }
  function randToReal32[309432](arg x[309429] :
  (309428 call uint[115] 32), arg min[309438] :
  (309437 call real[16] 32), arg max[309445] :
  (309444 call real[16] 32)) : _unknown[51] "inline" "private"
  {
    unknown normalized[309456](309455 call randToReal32 x)
    (309459 'end of statement')
    (309471 return(309469 call +(309466 call *(309463 call - max min) normalized) min))
  }
  { scopeless type
    (309451 call real[16] 32)
  }
  function rand32_1[309480](ref arg states[309478]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (309501 return(309500 call(309492 call .(309489 call states 0) c"random")(309498 call pcg_getvalid_inc 1)))
  }
  { scopeless type
    (309485 call uint[115] 32)
  }
  function rand32_2[309511](ref arg states[309509]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (309530 return(309529 call(309521 call .(309520 call states 1) c"random")(309527 call pcg_getvalid_inc 2)))
  }
  { scopeless type
    (309516 call uint[115] 32)
  }
  function boundedrand32_1[309540](ref arg states[309538]:_any[178](?), arg seed[309546] :
  (309545 call int[13] 64), arg count[309553] :
  (309552 call int[13] 64), arg bound[309560] :
  (309559 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309623 call _cond_test(309575 call == bound(309574 call max(309572 call uint[115] 32))))
    {
      (309581 return(309580 call rand32_1 states))
    }
    {
      (309621 return(309620 call(309589 call .(309586 call states 0) c"bounded_random_vary_inc")(309595 call pcg_getvalid_inc 1)(309599 call + bound 1)(309606 call _cast(309605 call uint[115] 64) seed)(309616 call _cast(309615 call uint[115] 64)(309610 call - count 1)) 101 4))
    }
  }
  { scopeless type
    (309566 call uint[115] 32)
  }
  function boundedrand32_2[309637](ref arg states[309635]:_any[178](?), arg seed[309643] :
  (309642 call int[13] 64), arg count[309650] :
  (309649 call int[13] 64), arg bound[309657] :
  (309656 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309720 call _cond_test(309672 call == bound(309671 call max(309669 call uint[115] 32))))
    {
      (309678 return(309677 call rand32_2 states))
    }
    {
      (309718 return(309717 call(309684 call .(309683 call states 1) c"bounded_random_vary_inc")(309690 call pcg_getvalid_inc 2)(309694 call + bound 1)(309701 call _cast(309700 call uint[115] 64) seed)(309711 call _cast(309710 call uint[115] 64)(309705 call - count 1)) 102 4))
    }
  }
  { scopeless type
    (309663 call uint[115] 32)
  }
  function rand64_1[309734](ref arg states[309732]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[309745] 0(309743 call uint[115] 64)
    (309748 'end of statement')
    (309764 call |= ret(309763 call(309755 call .(309754 call states 0) c"random")(309761 call pcg_getvalid_inc 1)))
    (309769 call <<= ret 32)
    (309786 call |= ret(309785 call(309777 call .(309776 call states 1) c"random")(309783 call pcg_getvalid_inc 2)))
    (309790 return ret)
  }
  { scopeless type
    (309739 call uint[115] 64)
  }
  function rand64_2[309799](ref arg states[309797]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[309810] 0(309808 call uint[115] 64)
    (309813 'end of statement')
    (309829 call |= ret(309828 call(309820 call .(309819 call states 2) c"random")(309826 call pcg_getvalid_inc 3)))
    (309834 call <<= ret 32)
    (309851 call |= ret(309850 call(309842 call .(309841 call states 3) c"random")(309848 call pcg_getvalid_inc 4)))
    (309855 return ret)
  }
  { scopeless type
    (309804 call uint[115] 64)
  }
  function boundedrand64_1[309864](ref arg states[309862]:_any[178](?), arg seed[309870] :
  (309869 call int[13] 64), arg count[309877] :
  (309876 call int[13] 64), arg bound[309881] :
  uint[115]) : _unknown[51] "private"
  {
    if(309991 call _cond_test(309896 call > bound(309894 call _cast uint[115](309892 call max(309890 call uint[115] 32)))))
    {
      unknown toprand[309902](309900 call _cast uint[115] 0)
      (309905 'end of statement')
      unknown botrand[309911](309909 call _cast uint[115] 0)
      (309914 'end of statement')
      (309932 call = toprand(309931 call boundedrand32_1 states seed count(309929 call _cast(309928 call uint[115] 32)(309923 call >> bound 32))))
      (309958 call = botrand(309957 call boundedrand32_2 states seed count(309955 call _cast(309954 call uint[115] 32)(309949 call & bound(309948 call max(309946 call uint[115] 32))))))
      (309968 return(309966 call |(309963 call << toprand 32) botrand))
    }
    {
      (309973 call rand32_1 states)
      (309989 return(309988 call boundedrand32_2 states seed count(309986 call _cast(309985 call uint[115] 32) bound)))
    }
  }
  { scopeless type
    uint[115]
  }
  function checkSufficientBitsAndAdvanceOthers[310003](arg resultType[310001]:_any[178](?), ref arg states[310005]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown numGenForResultType[310011] "param"(310010 call numGenerators resultType)
    (310014 'end of statement')
    unknown numGen[310020] "param"(310017 call . states c"size")
    (310023 'end of statement')
    if(310130 call _cond_test(310026 call > numGenForResultType numGen))
    {
      (310128 call compilerError(310125 call +(310106 call +(310097 call +(310078 call +(310069 call +(310050 call + "PCGRandomStream cannot produce "(310048 call _cast string[26] resultType)) " (requiring ")(310076 call _cast string[26](310073 call * 32 numGenForResultType))) " bits) from a stream configured for ")(310104 call _cast string[26](310101 call * 32 numGen))) " bits of output"))
    }
    {
      unknown _indexOfInterest[310164] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[310165] "expr temp" "temp"
      (310174 'move' _iterator[310165](310172 call _getIterator(310182 call chpl_direct_range_iter(310178 call + numGenForResultType 1) numGen 1)))
      Defer
      {
        {
          (310198 call _freeIterator _iterator[310165])
        }
      }
      { scopeless type
        (310187 'move' _indexOfInterest[310164](310184 call iteratorIndex _iterator[310165]))
      }
      ForLoop[310166]
      {
        unknown i[310191] "index var" "insert auto destroy"
        (310193 'move' i[310191] _indexOfInterest[310164])
        {
          (310161 call(310150 call .(310149 call states(310146 call - i 1)) c"random")(310159 call pcg_getvalid_inc(310156 call _cast uint[115] i)))
        }
        label _continueLabel[310169]
        _indexOfInterest[310164]
        _iterator[310165]
      }
      label _breakLabel[310170]
    }
  }
  function randlc[310211](arg resultType[310209]:_any[178](?), ref arg states[310213]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (310219 call checkSufficientBitsAndAdvanceOthers resultType states)
    if(310538 call _cond_test(310227 call == resultType(310226 call complex[140] 128)))
    {
      (310252 return(310250 call _cast(310249 call complex[140] 128)(310244 call _build_tuple(310235 call randToReal64(310233 call rand64_1 states))(310242 call randToReal64(310240 call rand64_2 states)))))
    }
    {
      if(310533 call _cond_test(310260 call == resultType(310259 call complex[140] 64)))
      {
        (310285 return(310283 call _cast(310282 call complex[140] 64)(310277 call _build_tuple(310268 call randToReal32(310266 call rand32_1 states))(310275 call randToReal32(310273 call rand32_2 states)))))
      }
      {
        if(310528 call _cond_test(310293 call == resultType(310292 call imag[130] 64)))
        {
          (310305 return(310304 call _r2i(310302 call randToReal64(310300 call rand64_1 states))))
        }
        {
          if(310523 call _cond_test(310313 call == resultType(310312 call imag[130] 32)))
          {
            (310325 return(310324 call _r2i(310322 call randToReal32(310320 call rand32_1 states))))
          }
          {
            if(310518 call _cond_test(310333 call == resultType(310332 call real[16] 64)))
            {
              (310342 return(310341 call randToReal64(310339 call rand64_1 states)))
            }
            {
              if(310513 call _cond_test(310350 call == resultType(310349 call real[16] 32)))
              {
                (310359 return(310358 call randToReal32(310356 call rand32_1 states)))
              }
              {
                if(310508 call _cond_test(310376 call ||(310367 call == resultType(310366 call uint[115] 64))(310374 call == resultType(310373 call int[13] 64))))
                {
                  (310385 return(310383 call _cast resultType(310381 call rand64_1 states)))
                }
                {
                  if(310503 call _cond_test(310402 call ||(310393 call == resultType(310392 call uint[115] 32))(310400 call == resultType(310399 call int[13] 32))))
                  {
                    (310411 return(310409 call _cast resultType(310407 call rand32_1 states)))
                  }
                  {
                    if(310498 call _cond_test(310428 call ||(310419 call == resultType(310418 call uint[115] 16))(310426 call == resultType(310425 call int[13] 16))))
                    {
                      (310440 return(310438 call _cast resultType(310435 call >>(310433 call rand32_1 states) 16)))
                    }
                    {
                      if(310493 call _cond_test(310457 call ||(310448 call == resultType(310447 call uint[115] 8))(310455 call == resultType(310454 call int[13] 8))))
                      {
                        (310469 return(310467 call _cast resultType(310464 call >>(310462 call rand32_1 states) 24)))
                      }
                      {
                        if(310489 call _cond_test(310475 call isBoolType resultType))
                        {
                          (310486 return(310484 call !=(310481 call >>(310479 call rand32_1 states) 31) 0))
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function randlc_bounded[310549](arg resultType[310547]:_any[178](?), ref arg states[310551]:_any[178](?), arg seed[310557] :
  (310556 call int[13] 64), arg count[310564] :
  (310563 call int[13] 64), arg min[310567]:_any[178](?), arg max[310569]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (310575 call checkSufficientBitsAndAdvanceOthers resultType states)
    if(311036 call _cond_test(310583 call == resultType(310582 call complex[140] 128)))
    {
      (310624 return(310622 call _cast(310621 call complex[140] 128)(310616 call _build_tuple(310599 call randToReal64(310589 call rand64_1 states)(310592 call . min c"re")(310596 call . max c"re"))(310614 call randToReal64(310604 call rand64_2 states)(310607 call . min c"im")(310611 call . max c"im")))))
    }
    {
      if(311031 call _cond_test(310632 call == resultType(310631 call complex[140] 64)))
      {
        (310673 return(310671 call _cast(310670 call complex[140] 64)(310665 call _build_tuple(310648 call randToReal32(310638 call rand32_1 states)(310641 call . min c"re")(310645 call . max c"re"))(310663 call randToReal32(310653 call rand32_2 states)(310656 call . min c"im")(310660 call . max c"im")))))
      }
      {
        if(311026 call _cond_test(310681 call == resultType(310680 call imag[130] 64)))
        {
          (310701 return(310700 call _r2i(310698 call randToReal64(310688 call rand64_1 states)(310693 call _i2r min)(310697 call _i2r max))))
        }
        {
          if(311021 call _cond_test(310709 call == resultType(310708 call imag[130] 32)))
          {
            (310729 return(310728 call _r2i(310726 call randToReal32(310716 call rand32_1 states)(310721 call _i2r min)(310725 call _i2r max))))
          }
          {
            if(311016 call _cond_test(310737 call == resultType(310736 call real[16] 64)))
            {
              (310748 return(310747 call randToReal64(310743 call rand64_1 states) min max))
            }
            {
              if(311011 call _cond_test(310756 call == resultType(310755 call real[16] 32)))
              {
                (310767 return(310766 call randToReal32(310762 call rand32_1 states) min max))
              }
              {
                if(311006 call _cond_test(310784 call ||(310775 call == resultType(310774 call uint[115] 64))(310782 call == resultType(310781 call int[13] 64))))
                {
                  (310814 return(310812 call _cast resultType(310809 call +(310801 call boundedrand64_1 states seed count(310799 call _cast(310798 call uint[115] 64)(310793 call - max min)))(310807 call _cast(310806 call uint[115] 64) min))))
                }
                {
                  if(311001 call _cond_test(310831 call ||(310822 call == resultType(310821 call uint[115] 32))(310829 call == resultType(310828 call int[13] 32))))
                  {
                    (310861 return(310859 call _cast resultType(310856 call +(310848 call boundedrand32_1 states seed count(310846 call _cast(310845 call uint[115] 32)(310840 call - max min)))(310854 call _cast(310853 call uint[115] 32) min))))
                  }
                  {
                    if(310996 call _cond_test(310878 call ||(310869 call == resultType(310868 call uint[115] 16))(310876 call == resultType(310875 call int[13] 16))))
                    {
                      (310908 return(310906 call _cast resultType(310903 call +(310895 call boundedrand32_1 states seed count(310893 call _cast(310892 call uint[115] 32)(310887 call - max min)))(310901 call _cast(310900 call uint[115] 32) min))))
                    }
                    {
                      if(310991 call _cond_test(310925 call ||(310916 call == resultType(310915 call uint[115] 8))(310923 call == resultType(310922 call int[13] 8))))
                      {
                        (310955 return(310953 call _cast resultType(310950 call +(310942 call boundedrand32_1 states seed count(310940 call _cast(310939 call uint[115] 32)(310934 call - max min)))(310948 call _cast(310947 call uint[115] 32) min))))
                      }
                      {
                        if(310987 call _cond_test(310961 call isBoolType resultType))
                        {
                          (310981 call compilerError "bounded rand with boolean type")
                          (310985 return 0)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function randlc_skipto[311047](arg resultType[311045]:_any[178](?), arg seed[311053] :
  (311052 call int[13] 64), arg n[311057] :
  integral) : _unknown[51] "private"
  {
    unknown states[311067](311065 call *(311063 call numGenerators resultType) pcg_setseq_64_xsh_rr_32_rng)
    (311070 'end of statement')
    {
      unknown i[311133] 0
      unknown tmp[311134] "maybe param" "temp"
      (311146 'move' tmp[311134](311144 call chpl_compute_low_param_loop_bound 0(311078 call -(311074 call . states c"size") 1)))
      unknown tmp[311135] "maybe param" "temp"
      (311159 'move' tmp[311135](311157 call chpl_compute_high_param_loop_bound 0(311151 call -(311153 call . states c"size") 1)))
      unknown tmp[311136] "maybe param" "temp"
      (311162 'move' tmp[311136] 1)
      ParamForLoop[311164]
      { i[311133] tmp[311134] tmp[311135] tmp[311136]
        {
          unknown inc[311089] "param"(311088 call pcg_getvalid_inc(311085 call + i 1))
          (311092 'end of statement')
          (311110 call(311098 call .(311097 call states i) c"srandom")(311106 call _cast(311105 call uint[115] 64) seed) inc)
          (311131 call(311116 call .(311115 call states i) c"advance") inc(311129 call _cast(311128 call uint[115] 64)(311123 call - n 1)))
        }
      }
      label _unused_continueLabel[311138]
      label _breakLabel[311137]
    }
    (311174 return states)
  }
  function outer[311182](arg ranges[311180]:_any[178](?), param arg dim[311186] :
  int[13] =
  0) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(311354 call _cond_test(311198 call ==(311192 call + dim 2)(311195 call . ranges c"size")))
    {
      {
        unknown _indexOfInterest[311210] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[311211] "expr temp" "temp"
        (311220 'move' _iterator[311211](311218 call _getIterator(311204 call ranges dim)))
        Defer
        {
          {
            (311237 call _freeIterator _iterator[311211])
          }
        }
        { scopeless type
          (311226 'move' _indexOfInterest[311210](311223 call iteratorIndex _iterator[311211]))
        }
        ForLoop[311212]
        {
          unknown i[311230] "index var" "insert auto destroy"
          (311232 'move' i[311230] _indexOfInterest[311210])
          (311208 yield(311206 call _build_tuple i))
          label _continueLabel[311215]
          _indexOfInterest[311210]
          _iterator[311211]
        }
        label _breakLabel[311216]
      }
    }
    {
      if(311350 call _cond_test(311253 call <(311247 call + dim 2)(311250 call . ranges c"size")))
      {
        {
          unknown _indexOfInterest[311311] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[311312] "expr temp" "temp"
          (311321 'move' _iterator[311312](311319 call _getIterator(311259 call ranges dim)))
          Defer
          {
            {
              (311338 call _freeIterator _iterator[311312])
            }
          }
          { scopeless type
            (311327 'move' _indexOfInterest[311311](311324 call iteratorIndex _iterator[311312]))
          }
          ForLoop[311313]
          {
            unknown i[311331] "index var" "insert auto destroy"
            (311333 'move' i[311331] _indexOfInterest[311311])
            {
              unknown _indexOfInterest[311277] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[311278] "expr temp" "temp"
              (311287 'move' _iterator[311278](311285 call _getIterator(311268 call outer ranges(311266 call + dim 1))))
              Defer
              {
                {
                  (311304 call _freeIterator _iterator[311278])
                }
              }
              { scopeless type
                (311293 'move' _indexOfInterest[311277](311290 call iteratorIndex _iterator[311278]))
              }
              ForLoop[311279]
              {
                unknown j[311297] "index var" "insert auto destroy"
                (311299 'move' j[311297] _indexOfInterest[311277])
                (311275 yield(311273 call _build_tuple i(311271 'expand_tuple' j)))
                label _continueLabel[311282]
                _indexOfInterest[311277]
                _iterator[311278]
              }
              label _breakLabel[311283]
            }
            label _continueLabel[311316]
            _indexOfInterest[311311]
            _iterator[311312]
          }
          label _breakLabel[311317]
        }
      }
      {
        (311347 yield 0)
      }
    }
  }
  function PCGRandomPrivate_iterate[311366](arg resultType[311364]:_any[178](?), arg D[311369] :
  _domain, arg seed[311376] :
  (311375 call int[13] 64), arg start[311383] :
  (311382 call int[13] 64)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown cursor[311392](311391 call randlc_skipto resultType seed start)
    (311395 'end of statement')
    {
      unknown _indexOfInterest[311406] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311407] "expr temp" "temp"
      (311416 'move' _iterator[311407](311414 call _getIterator D))
      Defer
      {
        {
          (311432 call _freeIterator _iterator[311407])
        }
      }
      { scopeless type
        (311421 'move' _indexOfInterest[311406](311418 call iteratorIndex _iterator[311407]))
      }
      ForLoop[311408]
      {
        unknown i[311425] "index var" "insert auto destroy"
        (311427 'move' i[311425] _indexOfInterest[311406])
        (311404 yield(311403 call randlc resultType cursor))
        label _continueLabel[311411]
        _indexOfInterest[311406]
        _iterator[311407]
      }
      label _breakLabel[311412]
    }
  }
  function PCGRandomPrivate_iterate[311445](arg resultType[311443]:_any[178](?), arg D[311448] :
  _domain, arg seed[311455] :
  (311454 call int[13] 64), arg start[311462] :
  (311461 call int[13] 64), param arg tag[311466] :
  iterKind) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[311491] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311492] "expr temp" "temp"
      (311501 'move' _iterator[311492](311499 call _getIterator(311487 call(311478 call . D c"these")(tag =(311482 call . iterKind c"leader")))))
      Defer
      {
        {
          (311518 call _freeIterator _iterator[311492])
        }
      }
      { scopeless type
        (311507 'move' _indexOfInterest[311491](311504 call iteratorIndex _iterator[311492]))
      }
      ForLoop[311493]
      {
        unknown block[311511] "index var" "insert auto destroy"
        (311513 'move' block[311511] _indexOfInterest[311491])
        (311489 yield block)
        label _continueLabel[311496]
        _indexOfInterest[311491]
        _iterator[311492]
      }
      label _breakLabel[311497]
    }
  }
  where {
    (311474 call == tag(311471 call . iterKind c"leader"))
  }
  function PCGRandomPrivate_iterate[311533](arg resultType[311531]:_any[178](?), arg D[311536] :
  _domain, arg seed[311543] :
  (311542 call int[13] 64), arg start[311550] :
  (311549 call int[13] 64), param arg tag[311554] :
  iterKind, arg followThis[311557]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    (311567 'use' DSIUtil)
    unknown multiplier[311571] "param" 1
    (311574 'end of statement')
    const ZD[311579] "const"(311578 call computeZeroBasedDomain D)
    (311582 'end of statement')
    const innerRange[311593] "const"(311592 call followThis(311589 call -(311585 call . ZD c"rank") 1))
    (311596 'end of statement')
    {
      unknown _indexOfInterest[311827] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311828] "expr temp" "temp"
      (311837 'move' _iterator[311828](311835 call _getIterator(311601 call outer followThis)))
      Defer
      {
        {
          (311854 call _freeIterator _iterator[311828])
        }
      }
      { scopeless type
        (311843 'move' _indexOfInterest[311827](311840 call iteratorIndex _iterator[311828]))
      }
      ForLoop[311829]
      {
        unknown outer[311847] "index var" "insert auto destroy"
        (311849 'move' outer[311847] _indexOfInterest[311827])
        {
          unknown myStart[311603] start
          (311606 'end of statement')
          if(311672 call _cond_test(311613 call >(311609 call . ZD c"rank") 1))
          {
            (311643 call += myStart(311641 call * multiplier(311640 call(311632 call .(311631 call(311618 call . ZD c"indexOrder")(311628 call _build_tuple(311622 'expand_tuple' outer)(311624 call . innerRange c"low"))) c"safeCast")(311638 call int[13] 64))))
          }
          {
            (311669 call += myStart(311667 call * multiplier(311666 call(311658 call .(311657 call(311649 call . ZD c"indexOrder")(311653 call . innerRange c"low")) c"safeCast")(311664 call int[13] 64))))
          }
          if(311823 call _cond_test(311682 call !(311679 call . innerRange c"stridable")))
          {
            unknown cursor[311690](311689 call randlc_skipto resultType seed myStart)
            (311693 'end of statement')
            {
              unknown _indexOfInterest[311704] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[311705] "expr temp" "temp"
              (311714 'move' _iterator[311705](311712 call _getIterator innerRange))
              Defer
              {
                {
                  (311730 call _freeIterator _iterator[311705])
                }
              }
              { scopeless type
                (311719 'move' _indexOfInterest[311704](311716 call iteratorIndex _iterator[311705]))
              }
              ForLoop[311706]
              {
                unknown i[311723] "index var" "insert auto destroy"
                (311725 'move' i[311723] _indexOfInterest[311704])
                (311702 yield(311701 call randlc resultType cursor))
                label _continueLabel[311709]
                _indexOfInterest[311704]
                _iterator[311705]
              }
              label _breakLabel[311710]
            }
          }
          {
            (311751 call -= myStart(311750 call(311742 call .(311739 call . innerRange c"low") c"safeCast")(311748 call int[13] 64)))
            {
              unknown _indexOfInterest[311790] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[311791] "expr temp" "temp"
              (311800 'move' _iterator[311791](311798 call _getIterator innerRange))
              Defer
              {
                {
                  (311816 call _freeIterator _iterator[311791])
                }
              }
              { scopeless type
                (311805 'move' _indexOfInterest[311790](311802 call iteratorIndex _iterator[311791]))
              }
              ForLoop[311792]
              {
                unknown i[311809] "index var" "insert auto destroy"
                (311811 'move' i[311809] _indexOfInterest[311790])
                {
                  unknown cursor[311778](311777 call randlc_skipto resultType seed(311775 call + myStart(311773 call *(311771 call(311763 call . i c"safeCast")(311769 call int[13] 64)) multiplier)))
                  (311781 'end of statement')
                  (311788 yield(311787 call randlc resultType cursor))
                }
                label _continueLabel[311795]
                _indexOfInterest[311790]
                _iterator[311791]
              }
              label _breakLabel[311796]
            }
          }
        }
        label _continueLabel[311832]
        _indexOfInterest[311827]
        _iterator[311828]
      }
      label _breakLabel[311833]
    }
  }
  where {
    (311564 call == tag(311561 call . iterKind c"follower"))
  }
}