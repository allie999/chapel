AST dump for PCGRandom after pass cleanup.
Module use list: 

{
  (352978 'use' ChapelStandard)
  (307465 'use'(307462 call . super c"RandomSupport"))
  (307469 'use' Random)
  (307472 'use' PCGRandomLib)
  (307475 'use' ChapelLocks)
  function numGenerators[307481](arg t[307479]:_any[178](?)) param : _unknown[51] "private"
  {
    if(307502 call _cond_test(307486 call isBoolType t))
    {
      (307488 return 1)
    }
    {
      (307500 return(307498 call /(307495 call +(307493 call numBits t) 31) 32))
    }
  }
  function PCGRandomStream[309035](?).init[307533](arg _mt[309039]:_MT[238], arg this[309037]:PCGRandomStream[309035](?), arg eltType[307531]:_any[178](?), arg seed[307545] :
  (307538 call int[13] 64) =
  (307542 call . SeedGenerator c"currentTime"), param arg parSafe[307551] :
  bool[10] =
  1) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (307560 call =(307556 call . this c"eltType") eltType)
    (307571 call =(307567 call . this c"seed") seed)
    (307579 call =(307575 call . this c"parSafe") parSafe)
    (307587 call(307583 call . this c"complete"))
    {
      unknown i[307631] 0
      unknown tmp[307632] "maybe param" "temp"
      (307644 'move' tmp[307632](307642 call chpl_compute_low_param_loop_bound 0(307595 call -(307593 call numGenerators eltType) 1)))
      unknown tmp[307633] "maybe param" "temp"
      (307656 'move' tmp[307633](307654 call chpl_compute_high_param_loop_bound 0(307649 call -(307651 call numGenerators eltType) 1)))
      unknown tmp[307634] "maybe param" "temp"
      (307659 'move' tmp[307634] 1)
      ParamForLoop[307661]
      { i[307631] tmp[307632] tmp[307633] tmp[307634]
        {
          unknown inc[307606] "param"(307605 call pcg_getvalid_inc(307602 call + i 1))
          (307609 'end of statement')
          (307629 call(307617 call .(307614 call PCGRandomStreamPrivate_rngs i) c"srandom")(307625 call _cast(307624 call uint[115] 64) seed) inc)
        }
      }
      label _unused_continueLabel[307636]
      label _breakLabel[307635]
    }
    (307672 call = PCGRandomStreamPrivate_count 1)
  }
  function PCGRandomStream[309035](?).PCGRandomStreamPrivate_getNext_noLock[307681](arg _mt[309043]:_MT[238], arg this[309041]:PCGRandomStream[309035](?), arg resultType[307679]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (307685 call += PCGRandomStreamPrivate_count 1)
    (307694 return(307693 call randlc resultType PCGRandomStreamPrivate_rngs))
  }
  function PCGRandomStream[309035](?).PCGRandomStreamPrivate_getNext_noLock[307702](arg _mt[309047]:_MT[238], arg this[309045]:PCGRandomStream[309035](?), arg resultType[307700]:_any[178](?), arg min[307705] :
  resultType, arg max[307709] :
  resultType) : _unknown[51] "method" "primary method" "no doc"
  {
    (307714 call += PCGRandomStreamPrivate_count 1)
    (307730 return(307729 call randlc_bounded resultType PCGRandomStreamPrivate_rngs seed(307725 call - PCGRandomStreamPrivate_count 1) min max))
  }
  function PCGRandomStream[309035](?).PCGRandomStreamPrivate_skipToNth_noLock[307740](arg _mt[309051]:_MT[238], arg this[309049]:PCGRandomStream[309035](?), in arg n[307737] :
  integral) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (307747 call = PCGRandomStreamPrivate_count(307745 call + n 1))
    (307761 call = PCGRandomStreamPrivate_rngs(307760 call randlc_skipto eltType seed(307758 call + n 1)))
  }
  function PCGRandomStream[309035](?).getNext[307772](arg _mt[309055]:_MT[238], arg this[309053]:PCGRandomStream[309035](?), arg resultType[307769]:_any[178](?) =
  eltType) : _unknown[51] "method" "primary method"
  {
    (307777 call _lock)
    const result[307784] "const"(307783 call PCGRandomStreamPrivate_getNext_noLock resultType)
    (307787 'end of statement')
    (307790 call _unlock)
    (307793 return result)
  }
  { scopeless type
    resultType
  }
  function PCGRandomStream[309035](?).getNext[307804](arg _mt[309059]:_MT[238], arg this[309057]:PCGRandomStream[309035](?), arg min[307801] :
  eltType, arg max[307807] :
  eltType) : _unknown[51] "method" "primary method"
  {
    (307812 'use' HaltWrappers)
    (307817 call _lock)
    if(307868 call _cond_test(307824 call && boundsChecking(307822 call > min max)))
    {
      (307866 call(307827 call . HaltWrappers c"boundsCheckHalt")(307863 call +(307860 call +(307854 call +(307851 call + "Cannot generate random numbers within empty range: ["(307849 call _cast string[26] min)) ", ")(307858 call _cast string[26] max)) "]"))
    }
    const result[307879] "const"(307878 call PCGRandomStreamPrivate_getNext_noLock eltType min max)
    (307882 'end of statement')
    (307885 call _unlock)
    (307888 return result)
  }
  { scopeless type
    eltType
  }
  function PCGRandomStream[309035](?).getNext[307897](arg _mt[309063]:_MT[238], arg this[309061]:PCGRandomStream[309035](?), arg resultType[307895]:_any[178](?), arg min[307900] :
  resultType, arg max[307904] :
  resultType) : _unknown[51] "method" "primary method"
  {
    (307909 'use' HaltWrappers)
    (307914 call _lock)
    if(307949 call _cond_test(307921 call && boundsChecking(307919 call > min max)))
    {
      (307947 call(307924 call . HaltWrappers c"boundsCheckHalt")(307944 call +(307941 call +(307935 call +(307932 call + "Cannot generate random numbers within empty range: ["(307930 call _cast string[26] min)) ", ")(307939 call _cast string[26] max)) "]"))
    }
    const result[307960] "const"(307959 call PCGRandomStreamPrivate_getNext_noLock resultType min max)
    (307963 'end of statement')
    (307966 call _unlock)
    (307969 return result)
  }
  { scopeless type
    resultType
  }
  function PCGRandomStream[309035](?).skipToNth[307980](arg _mt[309067]:_MT[238], arg this[309065]:PCGRandomStream[309035](?), arg n[307977] :
  integral) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    if(308017 call _cond_test(307984 call < n 0))
    {
      (308015 'throw'(307988 'new'(_chpl_manager = _owned[30](?))(308014 call IllegalArgumentError(308011 call + "PCGRandomStream.skipToNth(n) called with negative 'n' value "(308009 call _cast string[26] n)))))
    }
    (308025 call _lock)
    (308030 call PCGRandomStreamPrivate_skipToNth_noLock n)
    (308034 call _unlock)
  }
  function PCGRandomStream[309035](?).getNth[308044](arg _mt[309071]:_MT[238], arg this[309069]:PCGRandomStream[309035](?), arg n[308041] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(308082 call _cond_test(308049 call < n 0))
    {
      (308080 'throw'(308053 'new'(_chpl_manager = _owned[30](?))(308079 call IllegalArgumentError(308076 call + "PCGRandomStream.getNth(n) called with negative 'n' value "(308074 call _cast string[26] n)))))
    }
    (308090 call _lock)
    (308095 call PCGRandomStreamPrivate_skipToNth_noLock n)
    const result[308101] "const"(308100 call PCGRandomStreamPrivate_getNext_noLock eltType)
    (308104 'end of statement')
    (308107 call _unlock)
    (308110 return result)
  }
  { scopeless type
    eltType
  }
  function PCGRandomStream[309035](?).fillRandom[308124](arg _mt[309075]:_MT[238], arg this[309073]:PCGRandomStream[309035](?), arg arr[308121] :
  (308118 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown x[308151] "index var" "insert auto destroy"
        
        unknown r[308153] "index var" "insert auto destroy"
      iterated expressions:
        arr
        (308143 call iterate(308135 call . arr c"_dom")(308140 call . arr c"eltType"))
      shadow variables:
      other variables
        forall body
      {
        (308147 call = x r)
      }
    }
  }
  function PCGRandomStream[309035](?).choice[308169](arg _mt[309079]:_MT[238], arg this[309077]:PCGRandomStream[309035](?), arg x[308166] :
  (308164 call chpl__buildArrayRuntimeType unknown dom[308161]), arg size[308174] :
  unknown sizeType[308171] =
  none[57], arg replace[308179] =
  1, arg prob[308185] :
  unknown probType[308182] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    unknown idx[308200](308199 call _choice this dom(size = size)(replace = replace)(prob = prob))
    (308203 'end of statement')
    (308209 return(308208 call x idx))
  }
  function PCGRandomStream[309035](?).choice[308223](arg _mt[309083]:_MT[238], arg this[309081]:PCGRandomStream[309035](?), arg x[308220] :
  (308219 call range(stridable = ?[260])), arg size[308228] :
  unknown sizeType[308225] =
  none[57], arg replace[308233] =
  1, arg prob[308239] :
  unknown probType[308236] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    unknown dom[308250](308248 call chpl__buildDomainRuntimeType defaultDist 1(stridable = 1))
    (308253 'end of statement')
    if(308307 call _cond_test(308259 call !(308258 call isBoundedRange x)))
    {
      (308284 'throw'(308263 'new'(_chpl_manager = _owned[30](?))(308283 call IllegalArgumentError "input range must be bounded")))
      (308295 call = dom(308293 call chpl__buildDomainExpr(308290 call chpl_build_bounded_range 1 2)))
    }
    {
      (308303 call = dom(308301 call chpl__buildDomainExpr x))
    }
    (308322 return(308321 call _choice this dom(size = size)(replace = replace)(prob = prob)))
  }
  function PCGRandomStream[309035](?).choice[308332](arg _mt[309087]:_MT[238], arg this[309085]:PCGRandomStream[309035](?), arg x[308329] :
  _domain, arg size[308337] :
  unknown sizeType[308334] =
  none[57], arg replace[308342] =
  1, arg prob[308348] :
  unknown probType[308345] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    (308363 return(308362 call _choice this x(size = size)(replace = replace)(prob = prob)))
  }
  function PCGRandomStream[309035](?).shuffle[308380](arg _mt[309091]:_MT[238], arg this[309089]:PCGRandomStream[309035](?), arg arr[308377] :
  (308375 call chpl__buildArrayRuntimeType unknown D[308370] unknown eltType[308373])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(308410 call _cond_test(308387 call !=(308383 call . D c"rank") 1))
    {
      (308408 call compilerError "Shuffle requires 1-D array")
    }
    const low[308420] "const"(308417 call . D c"alignedLow")
    const stride[308430] "const"(308429 call abs(308425 call . D c"stride"))
    (308433 'end of statement')
    (308436 call _lock)
    {
      unknown _indexOfInterest[308515] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[308516] "expr temp" "temp"
      (308525 'move' _iterator[308516](308523 call _getIterator(308451 call chpl_by(308446 call #(308440 call chpl_build_low_bounded_range 0)(308443 call . D c"size"))(308449 call - 1))))
      Defer
      {
        {
          (308553 call _freeIterator _iterator[308516])
        }
      }
      { scopeless type
        (308542 'move' _indexOfInterest[308515](308539 call iteratorIndex _iterator[308516]))
      }
      ForLoop[308517]
      {
        unknown i[308546] "index var" "insert auto destroy"
        (308548 'move' i[308546] _indexOfInterest[308515])
        {
          unknown k[308465](308464 call randlc_bounded(308455 call . D c"idxType") PCGRandomStreamPrivate_rngs seed PCGRandomStreamPrivate_count 0 i)
          (308468 'end of statement')
          unknown j[308471] i
          (308474 'end of statement')
          if(308490 call _cond_test(308477 call > stride 1))
          {
            (308481 call *= k stride)
            (308487 call *= j stride)
          }
          (308496 call += k low)
          (308501 call += j low)
          (308512 call <=>(308507 call arr k)(308511 call arr j))
        }
        label _continueLabel[308520]
        _indexOfInterest[308515]
        _iterator[308516]
      }
      label _breakLabel[308521]
    }
    (308565 call += PCGRandomStreamPrivate_count(308562 call . D c"size"))
    (308570 call _unlock)
  }
  function PCGRandomStream[309035](?).permutation[308583](arg _mt[309095]:_MT[238], arg this[309093]:PCGRandomStream[309035](?), arg arr[308580] :
  (308577 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown low[308598](308595 call .(308594 call(308589 call .(308586 call . arr c"_dom") c"dim") 0) c"low")
    (308601 'end of statement')
    unknown high[308616](308613 call .(308612 call(308607 call .(308604 call . arr c"_dom") c"dim") 0) c"high")
    (308619 'end of statement')
    if(308651 call _cond_test(308628 call !=(308624 call .(308621 call . arr c"_dom") c"rank") 1))
    {
      (308649 call compilerError "Permutation requires 1-D array")
    }
    (308658 call _lock)
    {
      unknown _indexOfInterest[308704] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[308705] "expr temp" "temp"
      (308714 'move' _iterator[308705](308712 call _getIterator(308719 call chpl_direct_range_iter low high 1)))
      Defer
      {
        {
          (308735 call _freeIterator _iterator[308705])
        }
      }
      { scopeless type
        (308724 'move' _indexOfInterest[308704](308721 call iteratorIndex _iterator[308705]))
      }
      ForLoop[308706]
      {
        unknown i[308728] "index var" "insert auto destroy"
        (308730 'move' i[308728] _indexOfInterest[308704])
        {
          unknown j[308680](308679 call randlc_bounded(308670 call .(308667 call . arr c"_dom") c"idxType") PCGRandomStreamPrivate_rngs seed PCGRandomStreamPrivate_count low i)
          (308683 'end of statement')
          (308693 call =(308688 call arr i)(308692 call arr j))
          (308701 call =(308699 call arr j) i)
        }
        label _continueLabel[308709]
        _indexOfInterest[308704]
        _iterator[308705]
      }
      label _breakLabel[308710]
    }
    (308747 call += PCGRandomStreamPrivate_count(308745 call - high low))
    (308752 call _unlock)
  }
  function PCGRandomStream[309035](?).fillRandom[308764](arg _mt[309099]:_MT[238], arg this[309097]:PCGRandomStream[309035](?), arg arr[308761] :
  (308758 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (308810 call compilerError "PCGRandomStream(eltType="(308787 call _cast string[26] eltType) ") can only be used to fill arrays of "(308808 call _cast string[26] eltType))
  }
  function PCGRandomStream[309035](?).iterate[308821](arg _mt[309103]:_MT[238], arg this[309101]:PCGRandomStream[309035](?), arg D[308818] :
  _domain, arg resultType[308824]:_any[178](?) =
  eltType) : _unknown[51] "method" "primary method" "fn returns iterator"
  {
    (308829 call _lock)
    const start[308833] "const" PCGRandomStreamPrivate_count
    (308836 'end of statement')
    (308851 call += PCGRandomStreamPrivate_count(308850 call(308842 call .(308839 call . D c"size") c"safeCast")(308848 call int[13] 64)))
    (308860 call PCGRandomStreamPrivate_skipToNth_noLock(308857 call - PCGRandomStreamPrivate_count 1))
    (308864 call _unlock)
    (308873 return(308872 call PCGRandomPrivate_iterate resultType D seed start))
  }
  function PCGRandomStream[309035](?).iterate[308883](arg _mt[309107]:_MT[238], arg this[309105]:PCGRandomStream[309035](?), arg D[308880] :
  _domain, arg resultType[308886]:_any[178](?) =
  eltType, param arg tag[308889]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  {
    const start[308899] "const" PCGRandomStreamPrivate_count
    (308902 'end of statement')
    (308912 return(308911 call PCGRandomPrivate_iterate resultType D seed start tag))
  }
  where {
    (308896 call == tag(308893 call . iterKind c"leader"))
  }
  function PCGRandomStream[309035](?).writeThis[308921](arg _mt[309111]:_MT[238], arg this[309109]:PCGRandomStream[309035](?), arg f[308919]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides" "no return value for void"
  {
    (308925 call <~> f "PCGRandomStream(eltType=")
    (308934 call <~> f(308932 call _cast string[26] eltType))
    (308939 call <~> f ", parSafe=")
    (308944 call <~> f parSafe)
    (308949 call <~> f ", seed=")
    (308954 call <~> f seed)
    (308959 call <~> f ")")
  }
  function PCGRandomStream[309035](?)._lock[308976](arg _mt[309115]:_MT[238], arg this[309113]:PCGRandomStream[309035](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(308986 call _cond_test parSafe)
    {
      (308984 call(308980 call . _l c"lock"))
    }
  }
  function PCGRandomStream[309035](?)._unlock[308996](arg _mt[309119]:_MT[238], arg this[309117]:PCGRandomStream[309035](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(309006 call _cond_test parSafe)
    {
      (309004 call(309000 call . _l c"unlock"))
    }
  }
  type PCGRandomStream[309035](?) unknown eltType[307512] "type variable" const seed[307519] "const"(307518 call int[13] 64) unknown parSafe[307525] "param" 1 bool[10] unknown _l[308970] "no doc"(308967 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) unknown PCGRandomStreamPrivate_rngs[309021] "no doc"(309019 call *(309017 call numGenerators eltType) pcg_setseq_64_xsh_rr_32_rng) unknown PCGRandomStreamPrivate_count[309030] "no doc" 1(309028 call int[13] 64)
  function randToReal64[309131](arg x[309128] :
  (309127 call uint[115] 64)) : _unknown[51] "inline" "private"
  {
    (309150 return(309149 call ldexp(309143 call _cast(309142 call real[16] 64) x)(309147 call - 64)))
  }
  { scopeless type
    (309136 call real[16] 64)
  }
  function randToReal64[309165](arg x[309162] :
  (309161 call uint[115] 64), arg min[309171] :
  (309170 call real[16] 64), arg max[309178] :
  (309177 call real[16] 64)) : _unknown[51] "inline" "private"
  {
    unknown normalized[309189](309188 call randToReal64 x)
    (309192 'end of statement')
    (309204 return(309202 call +(309199 call *(309196 call - max min) normalized) min))
  }
  { scopeless type
    (309184 call real[16] 64)
  }
  function randToReal32[309218](arg x[309215] :
  (309214 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    (309233 return(309232 call ldexp(309226 call _cast(309225 call real[16] 32) x)(309230 call - 32)))
  }
  function randToReal32[309247](arg x[309244] :
  (309243 call uint[115] 32), arg min[309253] :
  (309252 call real[16] 32), arg max[309260] :
  (309259 call real[16] 32)) : _unknown[51] "inline" "private"
  {
    unknown normalized[309271](309270 call randToReal32 x)
    (309274 'end of statement')
    (309286 return(309284 call +(309281 call *(309278 call - max min) normalized) min))
  }
  { scopeless type
    (309266 call real[16] 32)
  }
  function rand32_1[309295](ref arg states[309293]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (309316 return(309315 call(309307 call .(309304 call states 0) c"random")(309313 call pcg_getvalid_inc 1)))
  }
  { scopeless type
    (309300 call uint[115] 32)
  }
  function rand32_2[309326](ref arg states[309324]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (309345 return(309344 call(309336 call .(309335 call states 1) c"random")(309342 call pcg_getvalid_inc 2)))
  }
  { scopeless type
    (309331 call uint[115] 32)
  }
  function boundedrand32_1[309355](ref arg states[309353]:_any[178](?), arg seed[309361] :
  (309360 call int[13] 64), arg count[309368] :
  (309367 call int[13] 64), arg bound[309375] :
  (309374 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309438 call _cond_test(309390 call == bound(309389 call max(309387 call uint[115] 32))))
    {
      (309396 return(309395 call rand32_1 states))
    }
    {
      (309436 return(309435 call(309404 call .(309401 call states 0) c"bounded_random_vary_inc")(309410 call pcg_getvalid_inc 1)(309414 call + bound 1)(309421 call _cast(309420 call uint[115] 64) seed)(309431 call _cast(309430 call uint[115] 64)(309425 call - count 1)) 101 4))
    }
  }
  { scopeless type
    (309381 call uint[115] 32)
  }
  function boundedrand32_2[309452](ref arg states[309450]:_any[178](?), arg seed[309458] :
  (309457 call int[13] 64), arg count[309465] :
  (309464 call int[13] 64), arg bound[309472] :
  (309471 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309535 call _cond_test(309487 call == bound(309486 call max(309484 call uint[115] 32))))
    {
      (309493 return(309492 call rand32_2 states))
    }
    {
      (309533 return(309532 call(309499 call .(309498 call states 1) c"bounded_random_vary_inc")(309505 call pcg_getvalid_inc 2)(309509 call + bound 1)(309516 call _cast(309515 call uint[115] 64) seed)(309526 call _cast(309525 call uint[115] 64)(309520 call - count 1)) 102 4))
    }
  }
  { scopeless type
    (309478 call uint[115] 32)
  }
  function rand64_1[309549](ref arg states[309547]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[309560] 0(309558 call uint[115] 64)
    (309563 'end of statement')
    (309579 call |= ret(309578 call(309570 call .(309569 call states 0) c"random")(309576 call pcg_getvalid_inc 1)))
    (309584 call <<= ret 32)
    (309601 call |= ret(309600 call(309592 call .(309591 call states 1) c"random")(309598 call pcg_getvalid_inc 2)))
    (309605 return ret)
  }
  { scopeless type
    (309554 call uint[115] 64)
  }
  function rand64_2[309614](ref arg states[309612]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[309625] 0(309623 call uint[115] 64)
    (309628 'end of statement')
    (309644 call |= ret(309643 call(309635 call .(309634 call states 2) c"random")(309641 call pcg_getvalid_inc 3)))
    (309649 call <<= ret 32)
    (309666 call |= ret(309665 call(309657 call .(309656 call states 3) c"random")(309663 call pcg_getvalid_inc 4)))
    (309670 return ret)
  }
  { scopeless type
    (309619 call uint[115] 64)
  }
  function boundedrand64_1[309679](ref arg states[309677]:_any[178](?), arg seed[309685] :
  (309684 call int[13] 64), arg count[309692] :
  (309691 call int[13] 64), arg bound[309696] :
  uint[115]) : _unknown[51] "private"
  {
    if(309806 call _cond_test(309711 call > bound(309709 call _cast uint[115](309707 call max(309705 call uint[115] 32)))))
    {
      unknown toprand[309717](309715 call _cast uint[115] 0)
      (309720 'end of statement')
      unknown botrand[309726](309724 call _cast uint[115] 0)
      (309729 'end of statement')
      (309747 call = toprand(309746 call boundedrand32_1 states seed count(309744 call _cast(309743 call uint[115] 32)(309738 call >> bound 32))))
      (309773 call = botrand(309772 call boundedrand32_2 states seed count(309770 call _cast(309769 call uint[115] 32)(309764 call & bound(309763 call max(309761 call uint[115] 32))))))
      (309783 return(309781 call |(309778 call << toprand 32) botrand))
    }
    {
      (309788 call rand32_1 states)
      (309804 return(309803 call boundedrand32_2 states seed count(309801 call _cast(309800 call uint[115] 32) bound)))
    }
  }
  { scopeless type
    uint[115]
  }
  function checkSufficientBitsAndAdvanceOthers[309818](arg resultType[309816]:_any[178](?), ref arg states[309820]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown numGenForResultType[309826] "param"(309825 call numGenerators resultType)
    (309829 'end of statement')
    unknown numGen[309835] "param"(309832 call . states c"size")
    (309838 'end of statement')
    if(309945 call _cond_test(309841 call > numGenForResultType numGen))
    {
      (309943 call compilerError(309940 call +(309921 call +(309912 call +(309893 call +(309884 call +(309865 call + "PCGRandomStream cannot produce "(309863 call _cast string[26] resultType)) " (requiring ")(309891 call _cast string[26](309888 call * 32 numGenForResultType))) " bits) from a stream configured for ")(309919 call _cast string[26](309916 call * 32 numGen))) " bits of output"))
    }
    {
      unknown _indexOfInterest[309979] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[309980] "expr temp" "temp"
      (309989 'move' _iterator[309980](309987 call _getIterator(309997 call chpl_direct_range_iter(309993 call + numGenForResultType 1) numGen 1)))
      Defer
      {
        {
          (310013 call _freeIterator _iterator[309980])
        }
      }
      { scopeless type
        (310002 'move' _indexOfInterest[309979](309999 call iteratorIndex _iterator[309980]))
      }
      ForLoop[309981]
      {
        unknown i[310006] "index var" "insert auto destroy"
        (310008 'move' i[310006] _indexOfInterest[309979])
        {
          (309976 call(309965 call .(309964 call states(309961 call - i 1)) c"random")(309974 call pcg_getvalid_inc(309971 call _cast uint[115] i)))
        }
        label _continueLabel[309984]
        _indexOfInterest[309979]
        _iterator[309980]
      }
      label _breakLabel[309985]
    }
  }
  function randlc[310026](arg resultType[310024]:_any[178](?), ref arg states[310028]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (310034 call checkSufficientBitsAndAdvanceOthers resultType states)
    if(310353 call _cond_test(310042 call == resultType(310041 call complex[140] 128)))
    {
      (310067 return(310065 call _cast(310064 call complex[140] 128)(310059 call _build_tuple(310050 call randToReal64(310048 call rand64_1 states))(310057 call randToReal64(310055 call rand64_2 states)))))
    }
    {
      if(310348 call _cond_test(310075 call == resultType(310074 call complex[140] 64)))
      {
        (310100 return(310098 call _cast(310097 call complex[140] 64)(310092 call _build_tuple(310083 call randToReal32(310081 call rand32_1 states))(310090 call randToReal32(310088 call rand32_2 states)))))
      }
      {
        if(310343 call _cond_test(310108 call == resultType(310107 call imag[130] 64)))
        {
          (310120 return(310119 call _r2i(310117 call randToReal64(310115 call rand64_1 states))))
        }
        {
          if(310338 call _cond_test(310128 call == resultType(310127 call imag[130] 32)))
          {
            (310140 return(310139 call _r2i(310137 call randToReal32(310135 call rand32_1 states))))
          }
          {
            if(310333 call _cond_test(310148 call == resultType(310147 call real[16] 64)))
            {
              (310157 return(310156 call randToReal64(310154 call rand64_1 states)))
            }
            {
              if(310328 call _cond_test(310165 call == resultType(310164 call real[16] 32)))
              {
                (310174 return(310173 call randToReal32(310171 call rand32_1 states)))
              }
              {
                if(310323 call _cond_test(310191 call ||(310182 call == resultType(310181 call uint[115] 64))(310189 call == resultType(310188 call int[13] 64))))
                {
                  (310200 return(310198 call _cast resultType(310196 call rand64_1 states)))
                }
                {
                  if(310318 call _cond_test(310217 call ||(310208 call == resultType(310207 call uint[115] 32))(310215 call == resultType(310214 call int[13] 32))))
                  {
                    (310226 return(310224 call _cast resultType(310222 call rand32_1 states)))
                  }
                  {
                    if(310313 call _cond_test(310243 call ||(310234 call == resultType(310233 call uint[115] 16))(310241 call == resultType(310240 call int[13] 16))))
                    {
                      (310255 return(310253 call _cast resultType(310250 call >>(310248 call rand32_1 states) 16)))
                    }
                    {
                      if(310308 call _cond_test(310272 call ||(310263 call == resultType(310262 call uint[115] 8))(310270 call == resultType(310269 call int[13] 8))))
                      {
                        (310284 return(310282 call _cast resultType(310279 call >>(310277 call rand32_1 states) 24)))
                      }
                      {
                        if(310304 call _cond_test(310290 call isBoolType resultType))
                        {
                          (310301 return(310299 call !=(310296 call >>(310294 call rand32_1 states) 31) 0))
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function randlc_bounded[310364](arg resultType[310362]:_any[178](?), ref arg states[310366]:_any[178](?), arg seed[310372] :
  (310371 call int[13] 64), arg count[310379] :
  (310378 call int[13] 64), arg min[310382]:_any[178](?), arg max[310384]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (310390 call checkSufficientBitsAndAdvanceOthers resultType states)
    if(310851 call _cond_test(310398 call == resultType(310397 call complex[140] 128)))
    {
      (310439 return(310437 call _cast(310436 call complex[140] 128)(310431 call _build_tuple(310414 call randToReal64(310404 call rand64_1 states)(310407 call . min c"re")(310411 call . max c"re"))(310429 call randToReal64(310419 call rand64_2 states)(310422 call . min c"im")(310426 call . max c"im")))))
    }
    {
      if(310846 call _cond_test(310447 call == resultType(310446 call complex[140] 64)))
      {
        (310488 return(310486 call _cast(310485 call complex[140] 64)(310480 call _build_tuple(310463 call randToReal32(310453 call rand32_1 states)(310456 call . min c"re")(310460 call . max c"re"))(310478 call randToReal32(310468 call rand32_2 states)(310471 call . min c"im")(310475 call . max c"im")))))
      }
      {
        if(310841 call _cond_test(310496 call == resultType(310495 call imag[130] 64)))
        {
          (310516 return(310515 call _r2i(310513 call randToReal64(310503 call rand64_1 states)(310508 call _i2r min)(310512 call _i2r max))))
        }
        {
          if(310836 call _cond_test(310524 call == resultType(310523 call imag[130] 32)))
          {
            (310544 return(310543 call _r2i(310541 call randToReal32(310531 call rand32_1 states)(310536 call _i2r min)(310540 call _i2r max))))
          }
          {
            if(310831 call _cond_test(310552 call == resultType(310551 call real[16] 64)))
            {
              (310563 return(310562 call randToReal64(310558 call rand64_1 states) min max))
            }
            {
              if(310826 call _cond_test(310571 call == resultType(310570 call real[16] 32)))
              {
                (310582 return(310581 call randToReal32(310577 call rand32_1 states) min max))
              }
              {
                if(310821 call _cond_test(310599 call ||(310590 call == resultType(310589 call uint[115] 64))(310597 call == resultType(310596 call int[13] 64))))
                {
                  (310629 return(310627 call _cast resultType(310624 call +(310616 call boundedrand64_1 states seed count(310614 call _cast(310613 call uint[115] 64)(310608 call - max min)))(310622 call _cast(310621 call uint[115] 64) min))))
                }
                {
                  if(310816 call _cond_test(310646 call ||(310637 call == resultType(310636 call uint[115] 32))(310644 call == resultType(310643 call int[13] 32))))
                  {
                    (310676 return(310674 call _cast resultType(310671 call +(310663 call boundedrand32_1 states seed count(310661 call _cast(310660 call uint[115] 32)(310655 call - max min)))(310669 call _cast(310668 call uint[115] 32) min))))
                  }
                  {
                    if(310811 call _cond_test(310693 call ||(310684 call == resultType(310683 call uint[115] 16))(310691 call == resultType(310690 call int[13] 16))))
                    {
                      (310723 return(310721 call _cast resultType(310718 call +(310710 call boundedrand32_1 states seed count(310708 call _cast(310707 call uint[115] 32)(310702 call - max min)))(310716 call _cast(310715 call uint[115] 32) min))))
                    }
                    {
                      if(310806 call _cond_test(310740 call ||(310731 call == resultType(310730 call uint[115] 8))(310738 call == resultType(310737 call int[13] 8))))
                      {
                        (310770 return(310768 call _cast resultType(310765 call +(310757 call boundedrand32_1 states seed count(310755 call _cast(310754 call uint[115] 32)(310749 call - max min)))(310763 call _cast(310762 call uint[115] 32) min))))
                      }
                      {
                        if(310802 call _cond_test(310776 call isBoolType resultType))
                        {
                          (310796 call compilerError "bounded rand with boolean type")
                          (310800 return 0)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function randlc_skipto[310862](arg resultType[310860]:_any[178](?), arg seed[310868] :
  (310867 call int[13] 64), arg n[310872] :
  integral) : _unknown[51] "private"
  {
    unknown states[310882](310880 call *(310878 call numGenerators resultType) pcg_setseq_64_xsh_rr_32_rng)
    (310885 'end of statement')
    {
      unknown i[310948] 0
      unknown tmp[310949] "maybe param" "temp"
      (310961 'move' tmp[310949](310959 call chpl_compute_low_param_loop_bound 0(310893 call -(310889 call . states c"size") 1)))
      unknown tmp[310950] "maybe param" "temp"
      (310974 'move' tmp[310950](310972 call chpl_compute_high_param_loop_bound 0(310966 call -(310968 call . states c"size") 1)))
      unknown tmp[310951] "maybe param" "temp"
      (310977 'move' tmp[310951] 1)
      ParamForLoop[310979]
      { i[310948] tmp[310949] tmp[310950] tmp[310951]
        {
          unknown inc[310904] "param"(310903 call pcg_getvalid_inc(310900 call + i 1))
          (310907 'end of statement')
          (310925 call(310913 call .(310912 call states i) c"srandom")(310921 call _cast(310920 call uint[115] 64) seed) inc)
          (310946 call(310931 call .(310930 call states i) c"advance") inc(310944 call _cast(310943 call uint[115] 64)(310938 call - n 1)))
        }
      }
      label _unused_continueLabel[310953]
      label _breakLabel[310952]
    }
    (310989 return states)
  }
  function outer[310997](arg ranges[310995]:_any[178](?), param arg dim[311001] :
  int[13] =
  0) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(311169 call _cond_test(311013 call ==(311007 call + dim 2)(311010 call . ranges c"size")))
    {
      {
        unknown _indexOfInterest[311025] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[311026] "expr temp" "temp"
        (311035 'move' _iterator[311026](311033 call _getIterator(311019 call ranges dim)))
        Defer
        {
          {
            (311052 call _freeIterator _iterator[311026])
          }
        }
        { scopeless type
          (311041 'move' _indexOfInterest[311025](311038 call iteratorIndex _iterator[311026]))
        }
        ForLoop[311027]
        {
          unknown i[311045] "index var" "insert auto destroy"
          (311047 'move' i[311045] _indexOfInterest[311025])
          (311023 yield(311021 call _build_tuple i))
          label _continueLabel[311030]
          _indexOfInterest[311025]
          _iterator[311026]
        }
        label _breakLabel[311031]
      }
    }
    {
      if(311165 call _cond_test(311068 call <(311062 call + dim 2)(311065 call . ranges c"size")))
      {
        {
          unknown _indexOfInterest[311126] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[311127] "expr temp" "temp"
          (311136 'move' _iterator[311127](311134 call _getIterator(311074 call ranges dim)))
          Defer
          {
            {
              (311153 call _freeIterator _iterator[311127])
            }
          }
          { scopeless type
            (311142 'move' _indexOfInterest[311126](311139 call iteratorIndex _iterator[311127]))
          }
          ForLoop[311128]
          {
            unknown i[311146] "index var" "insert auto destroy"
            (311148 'move' i[311146] _indexOfInterest[311126])
            {
              unknown _indexOfInterest[311092] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[311093] "expr temp" "temp"
              (311102 'move' _iterator[311093](311100 call _getIterator(311083 call outer ranges(311081 call + dim 1))))
              Defer
              {
                {
                  (311119 call _freeIterator _iterator[311093])
                }
              }
              { scopeless type
                (311108 'move' _indexOfInterest[311092](311105 call iteratorIndex _iterator[311093]))
              }
              ForLoop[311094]
              {
                unknown j[311112] "index var" "insert auto destroy"
                (311114 'move' j[311112] _indexOfInterest[311092])
                (311090 yield(311088 call _build_tuple i(311086 'expand_tuple' j)))
                label _continueLabel[311097]
                _indexOfInterest[311092]
                _iterator[311093]
              }
              label _breakLabel[311098]
            }
            label _continueLabel[311131]
            _indexOfInterest[311126]
            _iterator[311127]
          }
          label _breakLabel[311132]
        }
      }
      {
        (311162 yield 0)
      }
    }
  }
  function PCGRandomPrivate_iterate[311181](arg resultType[311179]:_any[178](?), arg D[311184] :
  _domain, arg seed[311191] :
  (311190 call int[13] 64), arg start[311198] :
  (311197 call int[13] 64)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown cursor[311207](311206 call randlc_skipto resultType seed start)
    (311210 'end of statement')
    {
      unknown _indexOfInterest[311221] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311222] "expr temp" "temp"
      (311231 'move' _iterator[311222](311229 call _getIterator D))
      Defer
      {
        {
          (311247 call _freeIterator _iterator[311222])
        }
      }
      { scopeless type
        (311236 'move' _indexOfInterest[311221](311233 call iteratorIndex _iterator[311222]))
      }
      ForLoop[311223]
      {
        unknown i[311240] "index var" "insert auto destroy"
        (311242 'move' i[311240] _indexOfInterest[311221])
        (311219 yield(311218 call randlc resultType cursor))
        label _continueLabel[311226]
        _indexOfInterest[311221]
        _iterator[311222]
      }
      label _breakLabel[311227]
    }
  }
  function PCGRandomPrivate_iterate[311260](arg resultType[311258]:_any[178](?), arg D[311263] :
  _domain, arg seed[311270] :
  (311269 call int[13] 64), arg start[311277] :
  (311276 call int[13] 64), param arg tag[311281] :
  iterKind) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[311306] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311307] "expr temp" "temp"
      (311316 'move' _iterator[311307](311314 call _getIterator(311302 call(311293 call . D c"these")(tag =(311297 call . iterKind c"leader")))))
      Defer
      {
        {
          (311333 call _freeIterator _iterator[311307])
        }
      }
      { scopeless type
        (311322 'move' _indexOfInterest[311306](311319 call iteratorIndex _iterator[311307]))
      }
      ForLoop[311308]
      {
        unknown block[311326] "index var" "insert auto destroy"
        (311328 'move' block[311326] _indexOfInterest[311306])
        (311304 yield block)
        label _continueLabel[311311]
        _indexOfInterest[311306]
        _iterator[311307]
      }
      label _breakLabel[311312]
    }
  }
  where {
    (311289 call == tag(311286 call . iterKind c"leader"))
  }
  function PCGRandomPrivate_iterate[311348](arg resultType[311346]:_any[178](?), arg D[311351] :
  _domain, arg seed[311358] :
  (311357 call int[13] 64), arg start[311365] :
  (311364 call int[13] 64), param arg tag[311369] :
  iterKind, arg followThis[311372]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    (311382 'use' DSIUtil)
    unknown multiplier[311386] "param" 1
    (311389 'end of statement')
    const ZD[311394] "const"(311393 call computeZeroBasedDomain D)
    (311397 'end of statement')
    const innerRange[311408] "const"(311407 call followThis(311404 call -(311400 call . ZD c"rank") 1))
    (311411 'end of statement')
    {
      unknown _indexOfInterest[311642] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311643] "expr temp" "temp"
      (311652 'move' _iterator[311643](311650 call _getIterator(311416 call outer followThis)))
      Defer
      {
        {
          (311669 call _freeIterator _iterator[311643])
        }
      }
      { scopeless type
        (311658 'move' _indexOfInterest[311642](311655 call iteratorIndex _iterator[311643]))
      }
      ForLoop[311644]
      {
        unknown outer[311662] "index var" "insert auto destroy"
        (311664 'move' outer[311662] _indexOfInterest[311642])
        {
          unknown myStart[311418] start
          (311421 'end of statement')
          if(311487 call _cond_test(311428 call >(311424 call . ZD c"rank") 1))
          {
            (311458 call += myStart(311456 call * multiplier(311455 call(311447 call .(311446 call(311433 call . ZD c"indexOrder")(311443 call _build_tuple(311437 'expand_tuple' outer)(311439 call . innerRange c"low"))) c"safeCast")(311453 call int[13] 64))))
          }
          {
            (311484 call += myStart(311482 call * multiplier(311481 call(311473 call .(311472 call(311464 call . ZD c"indexOrder")(311468 call . innerRange c"low")) c"safeCast")(311479 call int[13] 64))))
          }
          if(311638 call _cond_test(311497 call !(311494 call . innerRange c"stridable")))
          {
            unknown cursor[311505](311504 call randlc_skipto resultType seed myStart)
            (311508 'end of statement')
            {
              unknown _indexOfInterest[311519] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[311520] "expr temp" "temp"
              (311529 'move' _iterator[311520](311527 call _getIterator innerRange))
              Defer
              {
                {
                  (311545 call _freeIterator _iterator[311520])
                }
              }
              { scopeless type
                (311534 'move' _indexOfInterest[311519](311531 call iteratorIndex _iterator[311520]))
              }
              ForLoop[311521]
              {
                unknown i[311538] "index var" "insert auto destroy"
                (311540 'move' i[311538] _indexOfInterest[311519])
                (311517 yield(311516 call randlc resultType cursor))
                label _continueLabel[311524]
                _indexOfInterest[311519]
                _iterator[311520]
              }
              label _breakLabel[311525]
            }
          }
          {
            (311566 call -= myStart(311565 call(311557 call .(311554 call . innerRange c"low") c"safeCast")(311563 call int[13] 64)))
            {
              unknown _indexOfInterest[311605] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[311606] "expr temp" "temp"
              (311615 'move' _iterator[311606](311613 call _getIterator innerRange))
              Defer
              {
                {
                  (311631 call _freeIterator _iterator[311606])
                }
              }
              { scopeless type
                (311620 'move' _indexOfInterest[311605](311617 call iteratorIndex _iterator[311606]))
              }
              ForLoop[311607]
              {
                unknown i[311624] "index var" "insert auto destroy"
                (311626 'move' i[311624] _indexOfInterest[311605])
                {
                  unknown cursor[311593](311592 call randlc_skipto resultType seed(311590 call + myStart(311588 call *(311586 call(311578 call . i c"safeCast")(311584 call int[13] 64)) multiplier)))
                  (311596 'end of statement')
                  (311603 yield(311602 call randlc resultType cursor))
                }
                label _continueLabel[311610]
                _indexOfInterest[311605]
                _iterator[311606]
              }
              label _breakLabel[311611]
            }
          }
        }
        label _continueLabel[311647]
        _indexOfInterest[311642]
        _iterator[311643]
      }
      label _breakLabel[311648]
    }
  }
  where {
    (311379 call == tag(311376 call . iterKind c"follower"))
  }
}