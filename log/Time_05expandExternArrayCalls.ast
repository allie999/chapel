AST dump for Time after pass expandExternArrayCalls.
Module use list: 

{
  (353076 'use' ChapelStandard)
  (334972 'use' SysBasic)
  (334976 'import' HaltWrappers)
  function chpl_now_time[334980]() : _unknown[51] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    real[16]
  }
  type _timevalue[334990]
  function chpl_null_timevalue[334994]() : _unknown[51] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_now_timevalue[335002]() : _unknown[51] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_timevalue_parts[335014](arg t[335011] :
  _timevalue, out arg seconds[335020] :
  (335019 call int[13] 32), out arg minutes[335027] :
  (335026 call int[13] 32), out arg hours[335034] :
  (335033 call int[13] 32), out arg mday[335041] :
  (335040 call int[13] 32), out arg month[335048] :
  (335047 call int[13] 32), out arg year[335055] :
  (335054 call int[13] 32), out arg wday[335062] :
  (335061 call int[13] 32), out arg yday[335069] :
  (335068 call int[13] 32), out arg isdst[335076] :
  (335075 call int[13] 32)) : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  type TimeUnits[335092] def microseconds[335082]:TimeUnits[335092] def milliseconds[335084]:TimeUnits[335092] def seconds[335086]:TimeUnits[335092] def minutes[335088]:TimeUnits[335092] def hours[335090]:TimeUnits[335092]
  type Day[335111] def sunday[335097]:Day[335111] 0 def monday[335099]:Day[335111] def tuesday[335101]:Day[335111] def wednesday[335103]:Day[335111] def thursday[335105]:Day[335111] def friday[335107]:Day[335111] def saturday[335109]:Day[335111]
  function getCurrentTime[335127](arg unit[335123] :
  TimeUnits =
  (335120 call . TimeUnits c"seconds")) : _unknown[51]
  {
    { scopeless
      (335140 return(335139 call _convert_microseconds unit(335138 call chpl_now_time)))
    }
  }
  { scopeless type
    (335132 call real[16] 64)
  }
  function getCurrentDate[335148]() : _unknown[51]
  {
    { scopeless
      unknown now[335153](335152 call chpl_now_timevalue)
      (335156 'end of statement')
    }
    { scopeless
      unknown seconds[335158](335185 call int[13] 32)
      unknown minutes[335161](335204 'typeof' seconds)
      unknown hours[335164](335202 'typeof' minutes)
      unknown mday[335167](335200 'typeof' hours)
      unknown month[335170](335198 'typeof' mday)
      unknown year[335173](335196 'typeof' month)
      unknown wday[335176](335194 'typeof' year)
      unknown yday[335179](335192 'typeof' wday)
      unknown isdst[335186](335190 'typeof' yday)
      (335205 'end of statement')
    }
    (335218 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (335234 return(335232 call _build_tuple(335224 call + year 1900)(335228 call + month 1) mday))
  }
  function getCurrentDayOfWeek[335240]() : _unknown[51]
  {
    { scopeless
      unknown now[335246](335245 call chpl_now_timevalue)
      (335249 'end of statement')
    }
    { scopeless
      unknown seconds[335251](335278 call int[13] 32)
      unknown minutes[335254](335297 'typeof' seconds)
      unknown hours[335257](335295 'typeof' minutes)
      unknown mday[335260](335293 'typeof' hours)
      unknown month[335263](335291 'typeof' mday)
      unknown year[335266](335289 'typeof' month)
      unknown wday[335269](335287 'typeof' year)
      unknown yday[335272](335285 'typeof' wday)
      unknown isdst[335279](335283 'typeof' yday)
      (335298 'end of statement')
    }
    (335311 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (335318 return(335317 'try!-expr'(335315 call _cast Day wday)))
  }
  { scopeless type
    Day
  }
  function sleep[335329](arg t[335326] :
  real[16], arg unit[335336] :
  TimeUnits =
  (335333 call . TimeUnits c"seconds")) : _unknown[51] "inline"
  {
    function chpl_task_sleep[335347](arg s[335344] :
    c_double) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      void[4]
    }
    if(335384 call _cond_test(335356 call < t 0))
    {
      (335379 call warning "sleep() called with negative time parameter: '" t "'")
      (335382 return)
    }
    (335401 call chpl_task_sleep(335398 call _cast c_double(335396 call _convert_to_seconds unit(335394 call _cast real[16] t))))
  }
  { scopeless type
    void[4]
  }
  type Timer[335619] unknown time[335411] "no doc"(335410 call chpl_null_timevalue) _timevalue unknown accumulated[335417] "no doc" 0.0 real[16] unknown running[335423] "no doc" 0 bool[10] function Timer[335619].clear[335429](arg _mt[335623]:_MT[238], arg this[335621]:Timer[335619]) : _unknown[51] "method" "primary method"
  {
    (335434 call = accumulated 0.0)
    if(335447 call _cond_test running)
    {
      (335443 call = time(335442 call chpl_now_timevalue))
    }
  }
  { scopeless type
    void[4]
  } function Timer[335619].start[335456](arg _mt[335627]:_MT[238], arg this[335625]:Timer[335619]) : _unknown[51] "method" "primary method"
  {
    if(335497 call _cond_test(335460 call ! running))
    {
      (335464 call = running 1)
      (335472 call = time(335471 call chpl_now_timevalue))
    }
    {
      (335494 call warning "start called on a timer that has not been stopped")
    }
  }
  { scopeless type
    void[4]
  } function Timer[335619].stop[335507](arg _mt[335631]:_MT[238], arg this[335629]:Timer[335619]) : _unknown[51] "method" "primary method"
  {
    if(335556 call _cond_test running)
    {
      { scopeless
        unknown time2[335515](335514 call chpl_now_timevalue) _timevalue
        (335518 'end of statement')
      }
      (335526 call += accumulated(335525 call _diff_time time2 time))
      (335531 call = running 0)
    }
    {
      (335553 call warning "stop called on a timer that has not been started")
    }
  }
  { scopeless type
    void[4]
  } function Timer[335619].elapsed[335575](arg _mt[335635]:_MT[238], arg this[335633]:Timer[335619], arg unit[335571] :
  TimeUnits =
  (335568 call . TimeUnits c"seconds")) : _unknown[51] "method" "primary method"
  {
    if(335610 call _cond_test running)
    {
      { scopeless
        unknown time2[335583](335582 call chpl_now_timevalue) _timevalue
        (335586 'end of statement')
      }
      (335600 return(335599 call _convert_microseconds unit(335597 call + accumulated(335596 call _diff_time time2 time))))
    }
    {
      (335607 return(335606 call _convert_microseconds unit accumulated))
    }
  }
  { scopeless type
    real[16]
  }
  function _diff_time[335644](arg t1[335641] :
  _timevalue, arg t2[335647] :
  _timevalue) : _unknown[51] "inline" "private"
  {
    function chpl_timevalue_seconds[335656](arg t[335653] :
    _timevalue) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (335661 call int[13] 64)
    }
    function chpl_timevalue_microseconds[335672](arg t[335669] :
    _timevalue) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (335677 call int[13] 64)
    }
    { scopeless
      unknown s1[335685](335684 call chpl_timevalue_seconds t1)
      (335688 'end of statement')
    }
    { scopeless
      unknown us1[335693](335692 call chpl_timevalue_microseconds t1)
      (335696 'end of statement')
    }
    { scopeless
      unknown s2[335701](335700 call chpl_timevalue_seconds t2)
      (335704 'end of statement')
    }
    { scopeless
      unknown us2[335709](335708 call chpl_timevalue_microseconds t2)
      (335712 'end of statement')
    }
    (335731 return(335729 call -(335720 call +(335717 call * s1 1e+06) us1)(335727 call +(335724 call * s2 1e+06) us2)))
  }
  function _convert_to_seconds[335741](arg unit[335738] :
  TimeUnits, arg us[335744] :
  real[16]) : _unknown[51] "private"
  {
    {
      unknown tmp[335831] "expr temp" "maybe param" "maybe type" "temp"
      (335833 'move' tmp[335831] unit)
      if(335838 call _cond_test(335835 call == tmp[335831](335750 call . TimeUnits c"microseconds")))
      {
        { scopeless
          (335760 return(335758 call * us 1e-06))
        }
      }
      {
        if(335844 call _cond_test(335841 call == tmp[335831](335768 call . TimeUnits c"milliseconds")))
        {
          { scopeless
            (335778 return(335776 call * us 0.001))
          }
        }
        {
          if(335851 call _cond_test(335848 call == tmp[335831](335784 call . TimeUnits c"seconds")))
          {
            { scopeless
              (335789 return us)
            }
          }
          {
            if(335858 call _cond_test(335855 call == tmp[335831](335797 call . TimeUnits c"minutes")))
            {
              { scopeless
                (335807 return(335805 call * us 60.0))
              }
            }
            {
              if(335865 call _cond_test(335862 call == tmp[335831](335815 call . TimeUnits c"hours")))
              {
                { scopeless
                  (335825 return(335823 call * us 3600.0))
                }
              }
            }
          }
        }
      }
    }
    (335893 call(335872 call . HaltWrappers c"exhaustiveSelectHalt") "unknown timeunits type")
    (335898 return(335896 call - 1.0))
  }
  function _convert_microseconds[335908](arg unit[335905] :
  TimeUnits, arg us[335911] :
  real[16]) : _unknown[51] "private"
  {
    {
      unknown tmp[335990] "expr temp" "maybe param" "maybe type" "temp"
      (335992 'move' tmp[335990] unit)
      if(335997 call _cond_test(335994 call == tmp[335990](335917 call . TimeUnits c"microseconds")))
      {
        { scopeless
          (335922 return us)
        }
      }
      {
        if(336003 call _cond_test(336000 call == tmp[335990](335928 call . TimeUnits c"milliseconds")))
        {
          { scopeless
            (335938 return(335936 call / us 1000.0))
          }
        }
        {
          if(336010 call _cond_test(336007 call == tmp[335990](335944 call . TimeUnits c"seconds")))
          {
            { scopeless
              (335952 return(335950 call / us 1e+06))
            }
          }
          {
            if(336017 call _cond_test(336014 call == tmp[335990](335958 call . TimeUnits c"minutes")))
            {
              { scopeless
                (335968 return(335966 call / us 6e+07))
              }
            }
            {
              if(336024 call _cond_test(336021 call == tmp[335990](335974 call . TimeUnits c"hours")))
              {
                { scopeless
                  (335984 return(335982 call / us 3.6e+09))
                }
              }
            }
          }
        }
      }
    }
    (336036 call(336031 call . HaltWrappers c"exhaustiveSelectHalt") "unknown timeunits type")
    (336041 return(336039 call - 1.0))
  }
}