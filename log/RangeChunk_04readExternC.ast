AST dump for RangeChunk after pass readExternC.
Module use list: 

{
  (353056 'use' ChapelStandard)
  type RemElems[266485] def Thru[266479]:RemElems[266485] def Pack[266481]:RemElems[266485] def Mod[266483]:RemElems[266485]
  (266490 'use' RemElems)
  (266493 'use' BoundedRangeType)
  function chunks[266508](arg r[266505] :
  (266504 call range unknown RT[266498] bounded unknown S[266502]), arg numChunks[266511] :
  integral, arg remPol[266516] :
  RemElems =
  Thru) : _unknown[51] "iterator fn"
  {
    {
      unknown _indexOfInterest[266580] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266581] "expr temp" "temp"
      (266590 'move' _iterator[266581](266588 call _getIterator(266536 call chunksOrder r numChunks remPol)))
      Defer
      {
        {
          (266621 call _freeIterator _iterator[266581])
        }
      }
      { scopeless type
        (266596 'move' _indexOfInterest[266580](266593 call iteratorIndex _iterator[266581]))
      }
      ForLoop[266582]
      {
        (266601 call _check_tuple_var_decl _indexOfInterest[266580] 2)
        unknown startOrder[266607] "index var" "insert auto destroy"
        (266609 'move' startOrder[266607](266605 call _indexOfInterest[266580] 0))
        unknown endOrder[266614] "index var" "insert auto destroy"
        (266616 'move' endOrder[266614](266612 call _indexOfInterest[266580] 1))
        {
          { scopeless
            const start[266544] "const"(266543 call(266538 call . r c"orderToIndex") startOrder)
            (266547 'end of statement')
          }
          { scopeless
            const end[266556] "const"(266555 call(266550 call . r c"orderToIndex") endOrder)
            (266559 'end of statement')
          }
          (266578 yield(266575 IfExpr  S then
          { scopeless
            (266569 call chpl_by(266563 call chpl_build_bounded_range start end)(266566 call . r c"stride"))
          } else
          { scopeless
            (266573 call chpl_build_bounded_range start end)
          } ))
        }
        label _continueLabel[266585]
        _indexOfInterest[266580]
        _iterator[266581]
      }
      label _breakLabel[266586]
    }
  }
  { scopeless type
    (266525 call range RT bounded S)
  }
  function chunk[266645](arg r[266642] :
  (266641 call range unknown RT[266635] bounded unknown S[266639]), arg numChunks[266648] :
  integral, arg idx[266652] :
  integral, arg remPol[266657] :
  RemElems =
  Thru) : _unknown[51]
  {
    { scopeless
      const tmp[266679] "const" "temp"(266678 call chunkOrder r numChunks idx remPol)
      (266686 call _check_tuple_var_decl tmp[266679] 2)
      const startOrder[266667] "const"(266680 call tmp[266679] 0)
      const endOrder[266669] "const"(266683 call tmp[266679] 1)
      (266691 'end of statement')
    }
    { scopeless
      const start[266700] "const"(266699 call(266694 call . r c"orderToIndex") startOrder)
      (266703 'end of statement')
    }
    { scopeless
      const end[266711] "const"(266710 call(266705 call . r c"orderToIndex") endOrder)
      (266714 'end of statement')
    }
    (266733 return(266730 IfExpr  S then
    { scopeless
      (266724 call chpl_by(266718 call chpl_build_bounded_range start end)(266721 call . r c"stride"))
    } else
    { scopeless
      (266728 call chpl_build_bounded_range start end)
    } ))
  }
  { scopeless type
    (266666 call range RT bounded S)
  }
  function blockCyclicChunks[266755](arg r[266752] :
  (266751 call range unknown t[266741](boundedType =(266745 call . BoundedRangeType c"bounded")) unknown strided[266749]), arg blockSize[266758] :
  integral, arg tid[266762] :
  integral, arg nTasks[266766] :
  integral) : _unknown[51] "iterator fn"
  {
    if(266813 call _cond_test(266771 call >= tid nTasks))
    {
      { scopeless
        (266811 call halt(266808 call + "Parameter tid must be < nTasks " "because blocks are indexed from 0..nTasks-1"))
      }
    }
    if(266844 call _cond_test(266821 call <= blockSize 0))
    {
      { scopeless
        (266842 call halt "blockSize must a positive number")
      }
    }
    if(266874 call _cond_test(266851 call <= nTasks 0))
    {
      { scopeless
        (266872 call halt "nTasks must be a positive number")
      }
    }
    { scopeless
      unknown rangeStride[266883](266880 call . r c"stride")
      (266886 'end of statement')
    }
    { scopeless
      unknown blockStride[266891](266889 call * blockSize rangeStride)
      (266894 'end of statement')
    }
    { scopeless
      unknown low[266899](266896 call . r c"low")
      (266902 'end of statement')
    }
    { scopeless
      unknown high[266907](266904 call . r c"high")
      (266910 'end of statement')
    }
    { scopeless
      unknown firstBlockStart[266932](266930 call +(266923 IfExpr (266913 call > rangeStride 0) then
      { scopeless
        (266916 call . r c"low")
      } else
      { scopeless
        (266920 call . r c"high")
      } )(266928 call * blockStride tid))
      (266935 'end of statement')
    }
    if(266954 call _cond_test(266950 call ||(266941 call > firstBlockStart(266938 call . r c"high"))(266948 call < firstBlockStart(266945 call . r c"low"))))
    {
      { scopeless
        (266952 return)
      }
    }
    { scopeless
      unknown strideToNextBlock[266963](266961 call * blockStride nTasks)
      (266966 'end of statement')
    }
    if(267123 call _cond_test(266969 call > rangeStride 0))
    {
      {
        unknown _indexOfInterest[267004] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267005] "expr temp" "temp"
        (267014 'move' _iterator[267005](267012 call _getIterator(267023 call chpl_direct_range_iter firstBlockStart high strideToNextBlock)))
        Defer
        {
          {
            (267039 call _freeIterator _iterator[267005])
          }
        }
        { scopeless type
          (267028 'move' _indexOfInterest[267004](267025 call iteratorIndex _iterator[267005]))
        }
        ForLoop[267006]
        {
          unknown blockStart[267032] "index var" "insert auto destroy"
          (267034 'move' blockStart[267032] _indexOfInterest[267004])
          {
            { scopeless
              unknown blockEnd[266990](266989 call min high(266987 call -(266984 call + blockStart blockStride) 1))
              (266993 'end of statement')
            }
            (267002 yield(267000 call chpl_by(266997 call chpl_build_bounded_range blockStart blockEnd) rangeStride))
          }
          label _continueLabel[267009]
          _indexOfInterest[267004]
          _iterator[267005]
        }
        label _breakLabel[267010]
      }
    }
    {
      {
        unknown _indexOfInterest[267080] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267081] "expr temp" "temp"
        (267090 'move' _iterator[267081](267088 call _getIterator(267099 call chpl_direct_range_iter low firstBlockStart strideToNextBlock)))
        Defer
        {
          {
            (267115 call _freeIterator _iterator[267081])
          }
        }
        { scopeless type
          (267104 'move' _indexOfInterest[267080](267101 call iteratorIndex _iterator[267081]))
        }
        ForLoop[267082]
        {
          unknown blockEnd[267108] "index var" "insert auto destroy"
          (267110 'move' blockEnd[267108] _indexOfInterest[267080])
          {
            { scopeless
              unknown blockStart[267066](267065 call max low(267063 call +(267060 call + blockEnd blockStride) 1))
              (267069 'end of statement')
            }
            (267078 yield(267076 call chpl_by(267073 call chpl_build_bounded_range blockStart blockEnd) rangeStride))
          }
          label _continueLabel[267085]
          _indexOfInterest[267080]
          _iterator[267081]
        }
        label _breakLabel[267086]
      }
    }
  }
  function chunksOrder[267141](arg r[267138] :
  (267137 call range unknown RT[267132] bounded ?[260]), arg numChunks[267144] :
  integral, arg remPol[267149] :
  RemElems =
  Thru) : _unknown[51] "iterator fn"
  {
    if(267172 call _cond_test(267168 call ||(267162 call ==(267158 call . r c"size") 0)(267166 call <= numChunks 0)))
    {
      { scopeless
        (267170 return)
      }
    }
    { scopeless
      const nElems[267182] "const"(267179 call . r c"size")
      (267185 'end of statement')
    }
    { scopeless
      unknown nChunks[267194](267192 call _cast RT(267190 call min numChunks nElems))
      (267197 'end of statement')
    }
    { scopeless
      unknown chunkSize[267198] RT
      unknown rem[267202](267206 'typeof' chunkSize)
      (267207 'end of statement')
    }
    {
      unknown tmp[267274] "expr temp" "maybe param" "maybe type" "temp"
      (267276 'move' tmp[267274] remPol)
      if(267281 call _cond_test(267278 call == tmp[267274] Pack))
      {
        (267217 call = chunkSize(267215 call / nElems nChunks))
        if(267243 call _cond_test(267226 call !=(267223 call * chunkSize nChunks) nElems))
        {
          (267230 call += chunkSize 1)
          (267240 call = nChunks(267239 call divceil nElems chunkSize))
        }
      }
      {
        if(267287 call _cond_test(267284 call == tmp[267274] Mod))
        {
          (267256 call = chunkSize(267254 call / nElems nChunks))
          (267268 call = rem(267266 call - nElems(267264 call * chunkSize nChunks)))
        }
      }
    }
    {
      unknown _indexOfInterest[267410] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[267411] "expr temp" "temp"
      (267420 'move' _iterator[267411](267418 call _getIterator(267427 call chpl_direct_counted_range_iter 0 nChunks)))
      Defer
      {
        {
          (267443 call _freeIterator _iterator[267411])
        }
      }
      { scopeless type
        (267432 'move' _indexOfInterest[267410](267429 call iteratorIndex _iterator[267411]))
      }
      ForLoop[267412]
      {
        unknown i[267436] "index var" "insert auto destroy"
        (267438 'move' i[267436] _indexOfInterest[267410])
        {
          { scopeless
            unknown chunk[267303](267301 call * 2 RT)
            (267306 'end of statement')
          }
          {
            unknown tmp[267382] "expr temp" "maybe param" "maybe type" "temp"
            (267384 'move' tmp[267382] remPol)
            if(267389 call _cond_test(267386 call == tmp[267382] Thru))
            {
              { scopeless
                (267319 call = chunk(267318 call chunkOrderThru nElems nChunks i))
              }
            }
            {
              if(267395 call _cond_test(267392 call == tmp[267382] Pack))
              {
                { scopeless
                  (267334 call = chunk(267333 call chunkOrderPack chunkSize nElems i))
                }
              }
              {
                if(267402 call _cond_test(267399 call == tmp[267382] Mod))
                {
                  { scopeless
                    (267351 call = chunk(267350 call chunkOrderMod chunkSize rem nElems nChunks i))
                  }
                }
                {
                  { scopeless
                    (267376 call halt "RangeChunk: unknown RemElems in chunksOrder")
                  }
                }
              }
            }
          }
          (267408 yield chunk)
        }
        label _continueLabel[267415]
        _indexOfInterest[267410]
        _iterator[267411]
      }
      label _breakLabel[267416]
    }
  }
  { scopeless type
    (267155 call * 2 RT)
  }
  function chunkOrder[267465](arg r[267462] :
  (267461 call range unknown RT[267456] bounded ?[260]), arg numChunks[267468] :
  integral, arg idx[267472] :
  integral, arg remPol[267477] :
  RemElems =
  Thru) : _unknown[51]
  {
    if(267523 call _cond_test(267508 call ||(267502 call ||(267496 call ||(267490 call ==(267486 call . r c"size") 0)(267494 call <= numChunks 0))(267500 call < idx 0))(267506 call >= idx numChunks)))
    {
      { scopeless
        (267521 return(267519 call _build_tuple(267512 call _cast RT 1)(267516 call _cast RT 0)))
      }
    }
    { scopeless
      const nElems[267533] "const"(267530 call . r c"size")
      (267536 'end of statement')
    }
    { scopeless
      const nChunks[267545] "const"(267543 call _cast RT(267541 call min numChunks nElems))
      (267548 'end of statement')
    }
    { scopeless
      const i[267553] "const"(267551 call _cast RT idx)
      (267556 'end of statement')
    }
    {
      unknown tmp[267669] "expr temp" "maybe param" "maybe type" "temp"
      (267671 'move' tmp[267669] remPol)
      if(267676 call _cond_test(267673 call == tmp[267669] Thru))
      {
        (267567 return(267566 call chunkOrderThru nElems nChunks i))
      }
      {
        if(267682 call _cond_test(267679 call == tmp[267669] Pack))
        {
          { scopeless
            unknown chunkSize[267578](267576 call / nElems nChunks)
            (267581 'end of statement')
          }
          if(267595 call _cond_test(267588 call !=(267585 call * chunkSize nChunks) nElems))
          {
            { scopeless
              (267592 call += chunkSize 1)
            }
          }
          (267606 return(267605 call chunkOrderPack chunkSize nElems i))
        }
        {
          if(267689 call _cond_test(267686 call == tmp[267669] Mod))
          {
            { scopeless
              const chunkSize[267616] "const"(267614 call / nElems nChunks)
              (267619 'end of statement')
            }
            { scopeless
              const rem[267628] "const"(267626 call - nElems(267624 call * chunkSize nChunks))
              (267631 'end of statement')
            }
            (267640 return(267639 call chunkOrderMod chunkSize rem nElems nChunks i))
          }
          {
            (267663 call halt "RangeChunk: unknown RemElems in chunkOrder")
          }
        }
      }
    }
  }
  { scopeless type
    (267483 call * 2 RT)
  }
  function chunkOrderThru[267704](arg nElems[267701] :
  unknown I[267699], arg nChunks[267707] :
  I, arg i[267711] :
  I) : _unknown[51] "no doc" "private"
  {
    { scopeless
      const m[267723] "const"(267721 call * nElems i)
      (267726 'end of statement')
    }
    { scopeless
      const start[267744] "const"(267741 IfExpr (267730 call == i 0) then
      { scopeless
        (267734 call _cast I 0)
      } else
      { scopeless
        (267740 call divceil m nChunks)
      } )
      (267747 'end of statement')
    }
    { scopeless
      const end[267773] "const"(267770 IfExpr (267753 call == i(267751 call - nChunks 1)) then
      { scopeless
        (267757 call - nElems 1)
      } else
      { scopeless
        (267768 call -(267766 call divceil(267762 call + m nElems) nChunks) 1)
      } )
      (267776 'end of statement')
    }
    (267782 return(267780 call _build_tuple start end))
  }
  { scopeless type
    (267717 call _build_tuple I I)
  }
  function chunkOrderPack[267794](arg chunkSize[267791] :
  unknown I[267789], arg nElems[267797] :
  I, arg i[267801] :
  I) : _unknown[51] "no doc" "private"
  {
    { scopeless
      const start[267813] "const"(267811 call * chunkSize i)
      (267816 'end of statement')
    }
    if(267835 call _cond_test(267820 call >= start nElems))
    {
      { scopeless
        (267833 return(267831 call _build_tuple(267824 call _cast I 1)(267828 call _cast I 0)))
      }
    }
    { scopeless
      unknown end[267847](267845 call -(267842 call + start chunkSize) 1)
      (267850 'end of statement')
    }
    if(267863 call _cond_test(267853 call >= end nElems))
    {
      { scopeless
        (267860 call = end(267858 call - nElems 1))
      }
    }
    (267873 return(267871 call _build_tuple start end))
  }
  { scopeless type
    (267807 call _build_tuple I I)
  }
  function chunkOrderMod[267885](arg chunkSize[267882] :
  unknown I[267880], arg rem[267888] :
  I, arg nElems[267892] :
  I, arg nChunks[267896] :
  I, arg i[267900] :
  I) : _unknown[51] "no doc" "private"
  {
    { scopeless
      unknown start[267908] I
      unknown end[267912](267916 'typeof' start)
      (267917 'end of statement')
    }
    if(267969 call _cond_test(267921 call < i rem))
    {
      (267931 call = start(267929 call * i(267927 call + chunkSize 1)))
      (267940 call = end(267938 call + start chunkSize))
    }
    {
      (267954 call = start(267952 call - nElems(267950 call *(267947 call - nChunks i) chunkSize)))
      (267966 call = end(267964 call -(267961 call + start chunkSize) 1))
    }
    (267978 return(267976 call _build_tuple start end))
  }
  { scopeless type
    (267906 call _build_tuple I I)
  }
}