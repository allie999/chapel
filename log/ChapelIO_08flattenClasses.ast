AST dump for ChapelIO after pass flattenClasses.
Module use list: ChapelBase ChapelLocale SysBasic SysError IO 

{
  function _isNilObject[151506](arg val[151504]:_any[178](?)) : _unknown[51] "no doc"
  {
    function helper[151515](arg o[151512] :
    object[22]) : _unknown[51]
    {
      (151521 return(151519 call == o[151512] nil[44]))
    }
    function helper[151531](arg o[151529]:_any[178](?)) : _unknown[51]
    {
      (151534 return 0)
    }
    (151543 return(151542 call helper val[151504]))
  }
  function isIoField[151554](arg x[151552]:_any[178](?), param arg i[151556]:_any[178](?)) param : _unknown[51] "private"
  {
    if(151611 call _cond_test(151601 call ||(151590 call ||(151581 call isType(151579 'field by num' x[151552] i[151556]))(151589 call isParam(151587 'field by num' x[151552] i[151556])))(151599 call ==(151597 'typeof'(151596 'field by num' x[151552] i[151556])) nothing[7])))
    {
      (151604 return 0)
    }
    {
      (151608 return 1)
    }
  }
  function ioFieldNameEqLiteral[151622](arg ch[151620]:_any[178](?), arg t[151624]:_any[178](?), param arg i[151626]:_any[178](?)) : _unknown[51] "private"
  {
    unknown st[151635](151634 call(151629 call . ch[151620] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
    (151638 'end of statement')
    if(151741 call _cond_test(151642 call == st[151635] QIO_AGGREGATE_FORMAT_JSON[19717]))
    {
      (151707 return(151644 'new'(151706 call ioLiteral[238753](151703 call +(151684 call + "\""(151683 'field num to name' t[151624] i[151626])) "\":"))))
    }
    {
      (151738 return(151710 'new'(151737 call ioLiteral[238753](151734 call +(151716 'field num to name' t[151624] i[151626]) " = "))))
    }
  }
  function ioFieldNameLiteral[151751](arg ch[151749]:_any[178](?), arg t[151753]:_any[178](?), param arg i[151755]:_any[178](?)) : _unknown[51] "private"
  {
    unknown st[151764](151763 call(151758 call . ch[151749] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
    (151767 'end of statement')
    if(151803 call _cond_test(151771 call == st[151764] QIO_AGGREGATE_FORMAT_JSON[19717]))
    {
      (151788 return(151773 'new'(151787 call ioLiteral[238753](151784 call +(151781 call + "\""(151780 'field num to name' t[151753] i[151755])) "\""))))
    }
    {
      (151800 return(151791 'new'(151799 call ioLiteral[238753](151797 'field num to name' t[151753] i[151755]))))
    }
  }
  function writeThisFieldsDefaultImpl[151813](arg writer[151811]:_any[178](?), arg x[151817] :
  unknown t[151815], inout arg first[151821] :
  bool[10]) : _unknown[51] throws "no doc" "no return value for void"
  {
    unknown num_fields[151844] "param"(151843 'num fields' t[151815])
    (151847 'end of statement')
    unknown isBinary[151855](151854 call(151850 call . writer[151811] c"binary"))
    (151858 'end of statement')
    if(151889 call _cond_test(151862 call isClassType t[151815]))
    {
      if(151884 call _cond_test(151869 call !=(151866 call _to_borrowed t[151815]) object[22]))
      {
        (151881 call writeThisFieldsDefaultImpl writer[151811](151877 call . x[151817] c"super") first[151821])
      }
    }
    if(152143 call _cond_test(151897 call !(151896 call isUnionType t[151815])))
    {
      {
        unknown i[151985] 0
        unknown tmp[151986] "maybe param" "temp"
        (151998 'move' tmp[151986](151996 call chpl_compute_low_param_loop_bound 1 num_fields[151844]))
        unknown tmp[151987] "maybe param" "temp"
        (152005 'move' tmp[151987](152003 call chpl_compute_high_param_loop_bound 1 num_fields[151844]))
        unknown tmp[151988] "maybe param" "temp"
        (152008 'move' tmp[151988] 1)
        ParamForLoop[152010]
        { i[151985] tmp[151986] tmp[151987] tmp[151988]
          {
            if(151980 call _cond_test(151907 call isIoField x[151817] i[151985]))
            {
              if(151958 call _cond_test(151909 call ! isBinary[151855]))
              {
                unknown comma[151916](151911 'new'(151915 call ioLiteral[238753] ", "))
                (151919 'end of statement')
                if(151934 call _cond_test(151922 call ! first[151821]))
                {
                  (151932 call(151927 call . writer[151811] c"readwrite") comma[151916])
                }
                unknown eq[151946](151945 call ioFieldNameEqLiteral writer[151811] t[151815] i[151985]) ioLiteral[238753]
                (151949 'end of statement')
                (151956 call(151951 call . writer[151811] c"readwrite") eq[151946])
              }
              (151973 call(151964 call . writer[151811] c"readwrite")(151971 'field by num' x[151817] i[151985]))
              (151977 call = first[151821] 0)
            }
          }
        }
        label _unused_continueLabel[151990]
        label _breakLabel[151989]
      }
    }
    {
      unknown id[152040](152039 'get_union_id' x[151817])
      (152043 'end of statement')
      {
        unknown i[152109] 0
        unknown tmp[152110] "maybe param" "temp"
        (152122 'move' tmp[152110](152120 call chpl_compute_low_param_loop_bound 1 num_fields[151844]))
        unknown tmp[152111] "maybe param" "temp"
        (152129 'move' tmp[152111](152127 call chpl_compute_high_param_loop_bound 1 num_fields[151844]))
        unknown tmp[152112] "maybe param" "temp"
        (152132 'move' tmp[152112] 1)
        ParamForLoop[152134]
        { i[152109] tmp[152110] tmp[152111] tmp[152112]
          {
            if(152104 call _cond_test(152058 call &&(152053 call isIoField x[151817] i[152109])(152056 call == i[152109] id[152040])))
            {
              if(152087 call _cond_test isBinary[151855])
              {
                (152064 call write id[152040])
              }
              {
                unknown eq[152074](152073 call ioFieldNameEqLiteral writer[151811] t[151815] i[152109]) ioLiteral[238753]
                (152077 'end of statement')
                (152085 call(152080 call . writer[151811] c"readwrite") eq[152074])
              }
              (152102 call(152093 call . writer[151811] c"readwrite")(152100 'field by num' x[151817] i[152109]))
            }
          }
        }
        label _unused_continueLabel[152114]
        label _breakLabel[152113]
      }
    }
  }
  function writeThisDefaultImpl[152153](arg writer[152151]:_any[178](?), arg x[152157] :
  unknown t[152155]) : _unknown[51] throws "no doc" "no return value for void"
  {
    if(152284 call _cond_test(152166 call !(152165 call(152161 call . writer[152151] c"binary"))))
    {
      unknown st[152175](152174 call(152169 call . writer[152151] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
      (152178 'end of statement')
      unknown start[152181] ioLiteral[238753]
      (152184 'end of statement')
      if(152271 call _cond_test(152187 call == st[152175] QIO_AGGREGATE_FORMAT_JSON[19717]))
      {
        (152195 call = start[152181](152190 'new'(152194 call ioLiteral[238753] "{")))
      }
      {
        if(152267 call _cond_test(152201 call == st[152175] QIO_AGGREGATE_FORMAT_CHPL[19712]))
        {
          (152234 call = start[152181](152204 'new'(152233 call ioLiteral[238753](152230 call +(152227 call + "new "(152225 call _cast string[26] t[152155])) "("))))
        }
        {
          if(152262 call _cond_test(152241 call isClassType t[152155]))
          {
            (152248 call = start[152181](152243 'new'(152247 call ioLiteral[238753] "{")))
          }
          {
            (152258 call = start[152181](152253 'new'(152257 call ioLiteral[238753] "(")))
          }
        }
      }
      (152282 call(152277 call . writer[152151] c"readwrite") start[152181])
    }
    unknown first[152290] 1
    (152293 'end of statement')
    (152299 call writeThisFieldsDefaultImpl writer[152151] x[152157] first[152290])
    if(152400 call _cond_test(152307 call !(152306 call(152302 call . writer[152151] c"binary"))))
    {
      unknown st[152316](152315 call(152310 call . writer[152151] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
      (152319 'end of statement')
      unknown end[152322] ioLiteral[238753]
      (152325 'end of statement')
      if(152387 call _cond_test(152328 call == st[152316] QIO_AGGREGATE_FORMAT_JSON[19717]))
      {
        (152336 call = end[152322](152331 'new'(152335 call ioLiteral[238753] "}")))
      }
      {
        if(152383 call _cond_test(152342 call == st[152316] QIO_AGGREGATE_FORMAT_CHPL[19712]))
        {
          (152350 call = end[152322](152345 'new'(152349 call ioLiteral[238753] ")")))
        }
        {
          if(152378 call _cond_test(152357 call isClassType t[152155]))
          {
            (152364 call = end[152322](152359 'new'(152363 call ioLiteral[238753] "}")))
          }
          {
            (152374 call = end[152322](152369 'new'(152373 call ioLiteral[238753] ")")))
          }
        }
      }
      (152398 call(152393 call . writer[152151] c"readwrite") end[152322])
    }
  }
  function skipFieldsAtEnd[152410](arg reader[152408]:_any[178](?), inout arg needsComma[152413] :
  bool[10]) : _unknown[51] throws "private" "no return value for void"
  {
    const qioFmt[152423] "const"(152422 call(152417 call . reader[152408] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
    (152426 'end of statement')
    const isJson[152432] "const"(152430 call == qioFmt[152423] QIO_AGGREGATE_FORMAT_JSON[19717])
    (152435 'end of statement')
    const qioSkipUnknown[152437] "const" QIO_STYLE_ELEMENT_SKIP_UNKNOWN_FIELDS[19687]
    (152440 'end of statement')
    const isSkipUnknown[152451] "const"(152449 call !=(152447 call(152442 call . reader[152408] c"styleElement") qioSkipUnknown[152437]) 0)
    (152454 'end of statement')
    if(152465 call _cond_test(152461 call ||(152456 call ! isSkipUnknown[152451])(152459 call ! isJson[152432])))
    {
      (152463 return _void[55])
    }
    {
      unknown tmp[152535] "temp"
      (152553 'move' tmp[152535](152551 call _cond_test 1))
      WhileDo[152540]
      {
        {
          if(152508 call _cond_test needsComma[152413])
          {
            unknown comma[152478](152472 'new'(152477 call ioLiteral[238753] "," 1))
            (152481 'end of statement')
            Try
            {
              {
                (152489 call(152484 call . reader[152408] c"readwrite") comma[152478])
                (152494 call = needsComma[152413] 0)
              }
            }
            Catch err : BadFormatError
            {
              unknown tmp[354336] "temp"(354340 'dynamic_cast' unmanaged BadFormatError?[415606](354339 'current error'))
              if(354343 '!=' tmp[354336] nil[44])
              {
                unknown err[354349](354354 'new'(354352 call _owned[30](?)(354350 'to non nilable class' tmp[354336])))
                {
                  break _breakLabel[152539] _breakLabel[152539]
                }
              }
              {
              }
            }
          }
          unknown err[152515](386195 call ENOERR[223654]) syserr[223584]
          (152518 'end of statement')
          Try
          {
            {
              (152526 call(152522 call . reader[152408] c"skipField"))
            }
          }
          (152532 call = needsComma[152413] 1)
        }
        label _continueLabel[152538]
        (152546 'move' tmp[152535](152544 call _cond_test 1))
        tmp[152535]
      }
      label _breakLabel[152539]
    }
  }
  function readThisFieldsDefaultImpl[152562](arg reader[152560]:_any[178](?), arg t[152564]:_any[178](?), ref arg x[152566]:_any[178](?), inout arg needsComma[152569] :
  bool[10]) : _unknown[51] throws "no doc" "no return value for void"
  {
    unknown numFields[152582] "param"(152581 'num fields' t[152564])
    (152585 'end of statement')
    unknown isBinary[152593](152592 call(152588 call . reader[152560] c"binary"))
    (152596 'end of statement')
    if(152646 call _cond_test(152609 call &&(152600 call isClassType t[152564])(152607 call !=(152604 call _to_borrowed t[152564]) object[22])))
    {
      unknown superType[152616] "type variable"(152615 'typeof'(152612 call . x[152566] c"super"))
      unknown castTmp[152622] x[152566] superType[152616]
      (152625 'end of statement')
      Try
      {
        {
          (152632 call readThisFieldsDefaultImpl reader[152560] superType[152616] castTmp[152622] needsComma[152569])
        }
      }
      Catch err : Error
      {
        unknown tmp[354357] "temp"(354360 'current error')
        unknown err[354363](354368 'new'(354366 call _owned[30](?)(354364 'to non nilable class' tmp[354357])))
        {
          (152640 'throw' err[354363])
        }
      }
    }
    if(153325 call _cond_test isBinary[152593])
    {
      {
        unknown i[152679] 0
        unknown tmp[152680] "maybe param" "temp"
        (152692 'move' tmp[152680](152690 call chpl_compute_low_param_loop_bound 1 numFields[152582]))
        unknown tmp[152681] "maybe param" "temp"
        (152699 'move' tmp[152681](152697 call chpl_compute_high_param_loop_bound 1 numFields[152582]))
        unknown tmp[152682] "maybe param" "temp"
        (152702 'move' tmp[152682] 1)
        ParamForLoop[152704]
        { i[152679] tmp[152680] tmp[152681] tmp[152682]
          if(152674 call _cond_test(152659 call isIoField x[152566] i[152679]))
          {
            Try
            {
              {
                (152670 call(152661 call . reader[152560] c"readwrite")(152668 'field by num' x[152566] i[152679]))
              }
            }
          }
        }
        label _unused_continueLabel[152684]
        label _breakLabel[152683]
      }
    }
    {
      if(153321 call _cond_test(152716 call > numFields[152582] 0))
      {
        unknown readField[152722](152720 call * numFields[152582] bool[10])
        (152725 'end of statement')
        unknown numToRead[152728] 0
        (152731 'end of statement')
        unknown numRead[152733] 0
        (152736 'end of statement')
        {
          unknown i[152756] 0
          unknown tmp[152757] "maybe param" "temp"
          (152769 'move' tmp[152757](152767 call chpl_compute_low_param_loop_bound 1 numFields[152582]))
          unknown tmp[152758] "maybe param" "temp"
          (152776 'move' tmp[152758](152774 call chpl_compute_high_param_loop_bound 1 numFields[152582]))
          unknown tmp[152759] "maybe param" "temp"
          (152779 'move' tmp[152759] 1)
          ParamForLoop[152781]
          { i[152756] tmp[152757] tmp[152758] tmp[152759]
            if(152751 call _cond_test(152745 call isIoField x[152566] i[152756]))
            {
              (152748 call += numToRead[152728] 1)
            }
          }
          label _unused_continueLabel[152761]
          label _breakLabel[152760]
        }
        {
          unknown tmp[153147] "temp"
          (153171 'move' tmp[153147](153166 call _cond_test(153168 call < numRead[152733] numToRead[152728])))
          WhileDo[153152]
          {
            {
              if(152830 call _cond_test needsComma[152569])
              {
                Try
                {
                  {
                    unknown comma[152801](152795 'new'(152800 call ioLiteral[238753] "," 1))
                    (152804 'end of statement')
                    (152812 call(152807 call . reader[152560] c"readwrite") comma[152801])
                    (152816 call = needsComma[152569] 0)
                  }
                }
                Catch err : BadFormatError
                {
                  unknown tmp[354371] "temp"(354375 'dynamic_cast' unmanaged BadFormatError?[415606](354374 'current error'))
                  if(354378 '!=' tmp[354371] nil[44])
                  {
                    unknown err[354384](354389 'new'(354387 call _owned[30](?)(354385 'to non nilable class' tmp[354371])))
                    {
                      break _breakLabel[153151] _breakLabel[153151]
                    }
                  }
                  {
                  }
                }
              }
              unknown st[152843](152842 call(152837 call . reader[152560] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
              (152846 'end of statement')
              const qioSkipUnknown[152848] "const" QIO_STYLE_ELEMENT_SKIP_UNKNOWN_FIELDS[19687]
              (152851 'end of statement')
              unknown isSkipUnknown[152862](152860 call !=(152858 call(152853 call . reader[152560] c"styleElement") qioSkipUnknown[152848]) 0)
              (152865 'end of statement')
              unknown hasReadFieldName[152867] 0
              (152870 'end of statement')
              {
                unknown i[153048] 0
                unknown tmp[153049] "maybe param" "temp"
                (153061 'move' tmp[153049](153059 call chpl_compute_low_param_loop_bound 1 numFields[152582]))
                unknown tmp[153050] "maybe param" "temp"
                (153068 'move' tmp[153050](153066 call chpl_compute_high_param_loop_bound 1 numFields[152582]))
                unknown tmp[153051] "maybe param" "temp"
                (153071 'move' tmp[153051] 1)
                ParamForLoop[153073]
                { i[153048] tmp[153049] tmp[153050] tmp[153051]
                  {
                    if(152897 call _cond_test(152892 call ||(152883 call ||(152880 call !(152879 call isIoField x[152566] i[153048])) hasReadFieldName[152867])(152891 call readField[152722](152888 call - i[153048] 1))))
                    {
                      continue _unused_continueLabel[153053] _unused_continueLabel[153053]
                    }
                    unknown fieldName[152909](152908 call ioFieldNameLiteral reader[152560] t[152564] i[153048])
                    (152912 'end of statement')
                    Try
                    {
                      {
                        (152919 call(152914 call . reader[152560] c"readwrite") fieldName[152909])
                      }
                    }
                    Catch err : SystemError
                    {
                      unknown tmp[354392] "temp"(354396 'dynamic_cast' unmanaged SystemError?[415612](354395 'current error'))
                      if(354399 '!=' tmp[354392] nil[44])
                      {
                        unknown err[354405](354410 'new'(354408 call _owned[30](?)(354406 'to non nilable class' tmp[354392])))
                        {
                          if(152947 call _cond_test(152942 call ||(152933 call ==(152929 call . err[354405] c"err")(386244 call EFORMAT[224270]))(152940 call ==(152936 call . err[354405] c"err")(386246 call EEOF[224224]))))
                          {
                            continue _unused_continueLabel[153053] _unused_continueLabel[153053]
                          }
                          (152954 'throw' err[354405])
                        }
                      }
                      {
                      }
                    }
                    (152961 call = hasReadFieldName[152867] 1)
                    (152966 call = needsComma[152569] 1)
                    unknown equalSign[153004](153001 IfExpr (152971 call == st[152843] QIO_AGGREGATE_FORMAT_JSON[19717]) then
                    { scopeless
                      (152973 'new'(152994 call ioLiteral[238753] ":" 1))
                    } else
                    { scopeless
                      (152995 'new'(153000 call ioLiteral[238753] "=" 1))
                    } )
                    (153007 'end of statement')
                    Try
                    {
                      {
                        (153014 call(153009 call . reader[152560] c"readwrite") equalSign[153004])
                      }
                    }
                    Try
                    {
                      {
                        (153028 call(153019 call . reader[152560] c"readwrite")(153026 'field by num' x[152566] i[153048]))
                      }
                    }
                    (153040 call =(153038 call readField[152722](153035 call - i[153048] 1)) 1)
                    (153045 call += numRead[152733] 1)
                  }
                }
                label _unused_continueLabel[153053]
                label _breakLabel[153052]
              }
              const isJson[153086] "const"(153084 call == st[152843] QIO_AGGREGATE_FORMAT_JSON[19717])
              (153089 'end of statement')
              if(153142 call _cond_test(153091 call ! hasReadFieldName[152867]))
              {
                if(153138 call _cond_test(153095 call && isSkipUnknown[152862] isJson[153086]))
                {
                  Try
                  {
                    {
                      (153102 call(153098 call . reader[152560] c"skipField"))
                    }
                  }
                  (153109 call = needsComma[152569] 1)
                }
                {
                  (153135 'throw'(153114 'new'(_chpl_manager = _owned[30](?))(153134 call BadFormatError[381642](?) "Failed to read field, could not skip")))
                }
              }
            }
            label _continueLabel[153150]
            (153161 'move' tmp[153147](153156 call _cond_test(153158 call < numRead[152733] numToRead[152728])))
            tmp[153147]
          }
          label _breakLabel[153151]
        }
        if(153317 call _cond_test(153176 call == numRead[152733] numToRead[152728]))
        {
        }
        {
          unknown tag[153220] "param"(153217 IfExpr (153182 call isClassType t[152564]) then
          { scopeless
            "class"
          } else
          { scopeless
            "record"
          } )
          (153223 'end of statement')
          const msg[153304] "const"(153302 call +(153296 call +(153293 call +(153290 call +(153271 call +(153265 call +(153246 call + "Read only "(153244 call _cast string[26] numRead[152733])) " out of ")(153269 call _cast string[26] numToRead[152728])) " fields of ") tag[153220]) " ")(153300 call _cast string[26] t[152564]))
          (153307 'end of statement')
          (153315 'throw'(153310 'new'(_chpl_manager = _owned[30](?))(153314 call BadFormatError[381642](?) msg[153304])))
        }
      }
    }
  }
  where {
    (152576 call !(152575 call isUnionType t[152564]))
  }
  function readThisFieldsDefaultImpl[153337](arg reader[153335]:_any[178](?), arg t[153339]:_any[178](?), ref arg x[153341]:_any[178](?), inout arg needsComma[153344] :
  bool[10]) : _unknown[51] throws "no doc" "no return value for void"
  {
    unknown numFields[153355] "param"(153354 'num fields' t[153339])
    (153358 'end of statement')
    unknown isBinary[153366](153365 call(153361 call . reader[153335] c"binary"))
    (153369 'end of statement')
    unknown superclassError[153372](386285 call ENOERR[223654]) syserr[223584]
    (153375 'end of statement')
    if(153671 call _cond_test isBinary[153366])
    {
      unknown id[153381](153380 'get_union_id' x[153341])
      (153384 'end of statement')
      Try
      {
        {
          (153392 call(153387 call . reader[153335] c"readwrite") id[153381])
        }
      }
      {
        unknown i[153430] 0
        unknown tmp[153431] "maybe param" "temp"
        (153443 'move' tmp[153431](153441 call chpl_compute_low_param_loop_bound 1 numFields[153355]))
        unknown tmp[153432] "maybe param" "temp"
        (153450 'move' tmp[153432](153448 call chpl_compute_high_param_loop_bound 1 numFields[153355]))
        unknown tmp[153433] "maybe param" "temp"
        (153453 'move' tmp[153433] 1)
        ParamForLoop[153455]
        { i[153430] tmp[153431] tmp[153432] tmp[153433]
          if(153425 call _cond_test(153409 call &&(153404 call isIoField x[153341] i[153430])(153407 call == i[153430] id[153381])))
          {
            Try
            {
              {
                (153421 call(153412 call . reader[153335] c"readwrite")(153419 'field by num' x[153341] i[153430]))
              }
            }
          }
        }
        label _unused_continueLabel[153435]
        label _breakLabel[153434]
      }
    }
    {
      unknown hasFoundAtLeastOneField[153465] 0
      (153468 'end of statement')
      {
        unknown i[153604] 0
        unknown tmp[153605] "maybe param" "temp"
        (153617 'move' tmp[153605](153615 call chpl_compute_low_param_loop_bound 1 numFields[153355]))
        unknown tmp[153606] "maybe param" "temp"
        (153624 'move' tmp[153606](153622 call chpl_compute_high_param_loop_bound 1 numFields[153355]))
        unknown tmp[153607] "maybe param" "temp"
        (153627 'move' tmp[153607] 1)
        ParamForLoop[153629]
        { i[153604] tmp[153605] tmp[153606] tmp[153607]
          {
            if(153484 call _cond_test(153479 call !(153478 call isIoField x[153341] i[153604])))
            {
              continue _unused_continueLabel[153609] _unused_continueLabel[153609]
            }
            unknown st[153497](153496 call(153491 call . reader[153335] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
            (153500 'end of statement')
            unknown fieldName[153507](153506 call ioFieldNameLiteral reader[153335] t[153339] i[153604])
            (153510 'end of statement')
            Try
            {
              {
                (153517 call(153512 call . reader[153335] c"readwrite") fieldName[153507])
              }
            }
            Catch err : SystemError
            {
              unknown tmp[354413] "temp"(354417 'dynamic_cast' unmanaged SystemError?[415612](354416 'current error'))
              if(354420 '!=' tmp[354413] nil[44])
              {
                unknown err[354426](354431 'new'(354429 call _owned[30](?)(354427 'to non nilable class' tmp[354413])))
                {
                  if(153543 call _cond_test(153538 call ||(153529 call ==(153525 call . err[354426] c"err")(386307 call EFORMAT[224270]))(153536 call ==(153532 call . err[354426] c"err")(386309 call EEOF[224224]))))
                  {
                    continue _unused_continueLabel[153609] _unused_continueLabel[153609]
                  }
                  (153550 'throw' err[354426])
                }
              }
              {
              }
            }
            (153557 call = hasFoundAtLeastOneField[153465] 1)
            unknown eq[153579](153576 IfExpr (153562 call == st[153497] QIO_AGGREGATE_FORMAT_JSON[19717]) then
            { scopeless
              (153564 'new'(153569 call ioLiteral[238753] ":" 1))
            } else
            { scopeless
              (153570 'new'(153575 call ioLiteral[238753] "=" 1))
            } )
            (153582 'end of statement')
            Try
            {
              {
                (153586 call readIt eq[153579])
              }
            }
            Try
            {
              {
                (153600 call(153591 call . reader[153335] c"readwrite")(153598 'field by num' x[153341] i[153604]))
              }
            }
          }
        }
        label _unused_continueLabel[153609]
        label _breakLabel[153608]
      }
      if(153666 call _cond_test(153639 call ! hasFoundAtLeastOneField[153465]))
      {
        (153664 'throw'(153643 'new'(_chpl_manager = _owned[30](?))(153663 call BadFormatError[381642](?) "Failed to find any union fields")))
      }
    }
  }
  where {
    (153350 call isUnionType t[153339])
  }
  function readThisDefaultImpl[153682](arg reader[153680]:_any[178](?), arg x[153686] :
  unknown t[153684]) : _unknown[51] throws "no doc" "no return value for void"
  {
    const st[153700] "const"(153699 call(153694 call . reader[153680] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
    (153703 'end of statement')
    if(153754 call _cond_test(153711 call !(153710 call(153706 call . reader[153680] c"binary"))))
    {
      unknown start[153739](153736 IfExpr (153715 call == st[153700] QIO_AGGREGATE_FORMAT_CHPL[19712]) then
      { scopeless
        (153717 'new'(153730 call ioLiteral[238753](153727 call +(153724 call + "new "(153722 call _cast string[26] t[153684])) "(")))
      } else
      { scopeless
        (153731 'new'(153735 call ioLiteral[238753] "{"))
      } )
      (153742 'end of statement')
      Try
      {
        {
          (153750 call(153745 call . reader[153680] c"readwrite") start[153739])
        }
      }
    }
    unknown needsComma[153759] 0
    (153762 'end of statement')
    unknown obj[153764] x[153686]
    (153767 'end of statement')
    Try
    {
      {
        (153774 call readThisFieldsDefaultImpl reader[153680] t[153684] obj[153764] needsComma[153759])
      }
    }
    Try
    {
      {
        (153782 call skipFieldsAtEnd reader[153680] needsComma[153759])
      }
    }
    if(153826 call _cond_test(153792 call !(153791 call(153787 call . reader[153680] c"binary"))))
    {
      unknown end[153811](153808 IfExpr (153796 call == st[153700] QIO_AGGREGATE_FORMAT_CHPL[19712]) then
      { scopeless
        (153798 'new'(153802 call ioLiteral[238753] ")"))
      } else
      { scopeless
        (153803 'new'(153807 call ioLiteral[238753] "}"))
      } )
      (153814 'end of statement')
      Try
      {
        {
          (153822 call(153817 call . reader[153680] c"readwrite") end[153811])
        }
      }
    }
  }
  where {
    (153692 call isClassType t[153684])
  }
  function readThisDefaultImpl[153837](arg reader[153835]:_any[178](?), ref arg x[153841] :
  unknown t[153839]) : _unknown[51] throws "no doc" "no return value for void"
  {
    const st[153857] "const"(153856 call(153851 call . reader[153835] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
    (153860 'end of statement')
    if(153956 call _cond_test(153868 call !(153867 call(153863 call . reader[153835] c"binary"))))
    {
      unknown start[153871] ioLiteral[238753]
      (153874 'end of statement')
      {
        unknown tmp[153928] "expr temp" "maybe param" "maybe type" "temp"
        (153930 'move' tmp[153928] st[153857])
        if(153935 call _cond_test(153932 call == tmp[153928] QIO_AGGREGATE_FORMAT_CHPL[19712]))
        {
          (153895 call = start[153871](153881 'new'(153894 call ioLiteral[238753](153891 call +(153888 call + "new "(153886 call _cast string[26] t[153839])) "("))))
        }
        {
          if(153941 call _cond_test(153938 call == tmp[153928] QIO_AGGREGATE_FORMAT_JSON[19717]))
          {
            (153909 call = start[153871](153904 'new'(153908 call ioLiteral[238753] "{")))
          }
          {
            (153921 call = start[153871](153916 'new'(153920 call ioLiteral[238753] "(")))
          }
        }
      }
      Try
      {
        {
          (153952 call(153947 call . reader[153835] c"readwrite") start[153871])
        }
      }
    }
    unknown needsComma[153961] 0
    (153964 'end of statement')
    Try
    {
      {
        (153971 call readThisFieldsDefaultImpl reader[153835] t[153839] x[153841] needsComma[153961])
      }
    }
    Try
    {
      {
        (153979 call skipFieldsAtEnd reader[153835] needsComma[153961])
      }
    }
    if(154024 call _cond_test(153989 call !(153988 call(153984 call . reader[153835] c"binary"))))
    {
      unknown end[154009](154006 IfExpr (153994 call == st[153857] QIO_AGGREGATE_FORMAT_JSON[19717]) then
      { scopeless
        (153996 'new'(154000 call ioLiteral[238753] "}"))
      } else
      { scopeless
        (154001 'new'(154005 call ioLiteral[238753] ")"))
      } ) ioLiteral[238753]
      (154012 'end of statement')
      Try
      {
        {
          (154020 call(154015 call . reader[153835] c"readwrite") end[154009])
        }
      }
    }
  }
  where {
    (153848 call !(153847 call isClassType t[153839]))
  }
  function halt[154033]() : _unknown[51] "always propagate line file info" "function terminates program" "no return value for void"
  {
    (154056 'chpl_error' c"halt reached")
  }
  function halt[154067](arg s[154064] :
  string[26]) : _unknown[51] "always propagate line file info" "function terminates program" "no return value for void"
  {
    (154082 call halt(154080 call(154076 call .(154075 call(154071 call . s[154064] c"localize")) c"c_str")))
  }
  function halt[154094](arg args[154091]:_any[178](?) ...) : _unknown[51] "always propagate line file info" "function terminates program" "no return value for void"
  {
    unknown tmpstring[154120](154118 call + "halt reached - "(154117 call stringify(154115 'expand_tuple' args[154091])))
    (154123 'end of statement')
    (154133 'chpl_error'(154132 call(154128 call . tmpstring[154120] c"c_str")))
  }
  function warning[154143](arg s[154140] :
  string[26]) : _unknown[51] "always propagate line file info" "no return value for void"
  {
    (154158 'chpl_warning'(154157 call(154153 call .(154152 call(154148 call . s[154140] c"localize")) c"c_str")))
  }
  function warning[154170](arg args[154167]:_any[178](?) ...) : _unknown[51] "always propagate line file info" "no return value for void"
  {
    unknown tmpstring[154177](154176 call stringify(154174 'expand_tuple' args[154167]))
    (154180 'end of statement')
    (154185 call warning tmpstring[154177])
  }
  function locale[28].writeThis[154194](arg _mt[154199]:_MT[238], arg this[154196]:locale[28] :
  locale[28], arg f[154192]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    (154206 call <~> f[154192](154203 call . this[154196] c"_instance"))
  }
  function _ddata[11695](?).writeThis[154217](arg _mt[154222]:_MT[238], arg this[154219]:_ddata[11695](?) :
  _ddata[11695](?), arg f[154215]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    (154243 call compilerWarning "printing _ddata class")
    (154264 call <~> f[154215] "<_ddata class cannot be printed>")
  }
  function chpl_taskID_t[163].writeThis[154274](arg _mt[154279]:_MT[238], arg this[154276]:chpl_taskID_t[163] :
  chpl_taskID_t[163], arg f[154272]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown tmp[154292](154290 call _cast(154289 call uint(64)[115] 64) this[154276])(154284 call uint(64)[115] 64)
    (154295 'end of statement')
    (154299 call <~> f[154272] tmp[154292])
  }
  function chpl_taskID_t[163].readThis[154309](arg _mt[154314]:_MT[238], arg this[154311]:chpl_taskID_t[163] :
  chpl_taskID_t[163], arg f[154307]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown tmp[154320](154319 call uint(64)[115] 64)
    (154323 'end of statement')
    (154327 call <~> f[154307] tmp[154320])
    (154335 call = this[154311](154333 call _cast chpl_taskID_t[163] tmp[154320]))
  }
  function nothing[7].writeThis[154345](arg _mt[154350]:_MT[238], arg this[154347]:nothing[7] :
  nothing[7], arg f[154343]:_any[178](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
  }
  function _tuple[56199](?).readWriteThis[154360](arg _mt[154365]:_MT[238], arg this[154362]:_tuple[56199](?) :
  _tuple[56199](?), arg f[154358]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown st[154374](154373 call(154368 call . f[154358] c"styleElement") QIO_STYLE_ELEMENT_TUPLE[19672])
    (154377 'end of statement')
    unknown start[154380] ioLiteral[238753]
    (154383 'end of statement')
    unknown comma[154385] ioLiteral[238753]
    (154388 'end of statement')
    unknown end[154390] ioLiteral[238753]
    (154393 'end of statement')
    unknown binary[154400](154399 call(154395 call . f[154358] c"binary"))
    (154403 'end of statement')
    if(154532 call _cond_test(154406 call == st[154374] QIO_TUPLE_FORMAT_SPACE[19727]))
    {
      (154430 call = start[154380](154409 'new'(154429 call ioLiteral[238753] "")))
      (154440 call = comma[154385](154435 'new'(154439 call ioLiteral[238753] " ")))
      (154465 call = end[154390](154444 'new'(154464 call ioLiteral[238753] "")))
    }
    {
      if(154528 call _cond_test(154470 call == st[154374] QIO_TUPLE_FORMAT_JSON[19732]))
      {
        (154478 call = start[154380](154473 'new'(154477 call ioLiteral[238753] "[")))
        (154488 call = comma[154385](154483 'new'(154487 call ioLiteral[238753] ", ")))
        (154497 call = end[154390](154492 'new'(154496 call ioLiteral[238753] "]")))
      }
      {
        (154506 call = start[154380](154501 'new'(154505 call ioLiteral[238753] "(")))
        (154516 call = comma[154385](154511 'new'(154515 call ioLiteral[238753] ", ")))
        (154525 call = end[154390](154520 'new'(154524 call ioLiteral[238753] ")")))
      }
    }
    if(154546 call _cond_test(154538 call ! binary[154400]))
    {
      (154542 call <~> f[154358] start[154380])
    }
    if(154629 call _cond_test(154552 call !=(386413 call . this[154362] c"size") 0))
    {
      (154559 call <~> f[154358](154558 call this[154362] 0))
      {
        unknown i[154592] 0
        unknown tmp[154593] "maybe param" "temp"
        (154605 'move' tmp[154593](154603 call chpl_compute_low_param_loop_bound 1(154566 call -(386420 call . this[154362] c"size") 1)))
        unknown tmp[154594] "maybe param" "temp"
        (154615 'move' tmp[154594](154613 call chpl_compute_high_param_loop_bound 1(154610 call -(386431 call . this[154362] c"size") 1)))
        unknown tmp[154595] "maybe param" "temp"
        (154618 'move' tmp[154595] 1)
        ParamForLoop[154620]
        { i[154592] tmp[154593] tmp[154594] tmp[154595]
          {
            if(154579 call _cond_test(154571 call ! binary[154400]))
            {
              (154575 call <~> f[154358] comma[154385])
            }
            (154589 call <~> f[154358](154588 call this[154362] i[154592]))
          }
        }
        label _unused_continueLabel[154597]
        label _breakLabel[154596]
      }
    }
    if(154642 call _cond_test(154634 call ! binary[154400]))
    {
      (154638 call <~> f[154358] end[154390])
    }
  }
  function range[64316](?).writeThis[154653](arg _mt[154658]:_MT[238], arg this[154655]:range[64316](?) :
  range[64316](?), arg f[154651]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown alignCheckRange[154661] this[154655]
    (154664 'end of statement')
    if(154678 call _cond_test(154667 call . f[154651] c"writing"))
    {
      (154675 call(154671 call . alignCheckRange[154661] c"normalizeAlignment"))
    }
    if(154690 call _cond_test(154684 call(386439 call . this[154655] c"hasLowBound")))
    {
      (154687 call <~> f[154651](386444 call . this[154655] c"low"))
    }
    (154701 call <~> f[154651](154696 'new'(154700 call ioLiteral[238753] "..")))
    if(154712 call _cond_test(154706 call(386450 call . this[154655] c"hasHighBound")))
    {
      (154709 call <~> f[154651](386455 call . this[154655] c"high"))
    }
    if(154733 call _cond_test(154719 call !=(386459 call . this[154655] c"stride") 1))
    {
      (154730 call <~>(154727 call <~> f[154651](154722 'new'(154726 call ioLiteral[238753] " by ")))(386465 call . this[154655] c"stride"))
    }
    if(154771 call _cond_test(154747 call &&(154744 call !(154743 call(154739 call . alignCheckRange[154661] c"isNaturallyAligned")))(386469 call . this[154655] c"aligned")))
    {
      (154768 call <~>(154755 call <~> f[154651](154750 'new'(154754 call ioLiteral[238753] " align ")))(154767 call(386475 call . this[154655] c"chpl_intToIdx")(154765 call chpl__mod(154762 call chpl__idxToInt(386479 call . this[154655] c"alignment"))(386483 call . this[154655] c"stride"))))
    }
  }
  function range[64316](?).readThis[154783](arg _mt[154788]:_MT[238], ref arg this[154785]:range[64316](?) :
  range[64316](?), arg f[154781]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    if(154798 call _cond_test(154792 call(386487 call . this[154785] c"hasLowBound")))
    {
      (154795 call <~> f[154781](386493 call . this[154785] c"_low"))
    }
    (154810 call <~> f[154781](154805 'new'(154809 call ioLiteral[238753] "..")))
    if(154821 call _cond_test(154815 call(386499 call . this[154785] c"hasHighBound")))
    {
      (154818 call <~> f[154781](386505 call . this[154785] c"_high"))
    }
    if(154842 call _cond_test(154828 call !=(386509 call . this[154785] c"stride") 1))
    {
      (154839 call <~>(154836 call <~> f[154781](154831 'new'(154835 call ioLiteral[238753] " by ")))(386515 call . this[154785] c"stride"))
    }
    Try
    {
      {
        (154853 call <~> f[154781](154848 'new'(154852 call ioLiteral[238753] " align ")))
        if(154900 call _cond_test(386522 call . this[154785] c"stridable"))
        {
          unknown a[154859](386526 call . this[154785] c"intIdxType")
          (154862 'end of statement')
          (154866 call <~> f[154781] a[154859])
          (154871 call =(386533 call . this[154785] c"_alignment") a[154859])
        }
        {
          (154897 'throw'(154876 'new'(_chpl_manager = _owned[30](?))(154896 call BadFormatError[381642](?) "Range is not stridable, cannot store alignment")))
        }
      }
    }
    Catch err : BadFormatError
    {
      unknown tmp[354434] "temp"(354438 'dynamic_cast' unmanaged BadFormatError?[415606](354437 'current error'))
      if(354441 '!=' tmp[354434] nil[44])
      {
        unknown err[354447](354452 'new'(354450 call _owned[30](?)(354448 'to non nilable class' tmp[354434])))
        {
        }
      }
      {
      }
    }
  }
  function LocaleModel[89192].writeThis[154919](arg _mt[154924]:_MT[238], arg this[154921]:LocaleModel[89192] :
  LocaleModel[89192], arg f[154917]:_any[178](?)) : _unknown[51] throws "method" "no doc" "method overrides" "no return value for void"
  {
    (154953 call <~>(154948 call <~> f[154917](154927 'new'(154947 call ioLiteral[238753] "LOCALE")))(154952 call(386542 call . this[154921] c"chpl_id")))
  }
  function Error[167938].writeThis[154964](arg _mt[154969]:_MT[238], arg this[154966]:Error[167938] :
  Error[167938], arg f[154962]:_any[178](?)) : _unknown[51] throws "method" "no doc" "method overrides" "no return value for void"
  {
    unknown description[154975](154974 call chpl_describe_error this[154966])
    (154978 'end of statement')
    (154982 call <~> f[154962] description[154975])
  }
  function write[154994](const arg args[154991]:_any[178](?) ...) : _unknown[51] "no return value for void"
  {
    Try!
    {
      {
        (155003 call(154997 call . stdout[250235] c"write")(155001 'expand_tuple' args[154991]))
      }
    }
  }
  function writeln[155017](const arg args[155014]:_any[178](?) ...) : _unknown[51] "no return value for void"
  {
    Try!
    {
      {
        (155026 call(155020 call . stdout[250235] c"writeln")(155024 'expand_tuple' args[155014]))
      }
    }
  }
  function writeln[155035]() : _unknown[51] "no doc" "no return value for void"
  {
    Try!
    {
      {
        (155042 call(155038 call . stdout[250235] c"writeln"))
      }
    }
  }
  function writef[155056](arg fmt[155053] :
  unknown t[155051], const arg args[155060]:_any[178](?) ...) : _unknown[51]
  {
    Try!
    {
      {
        (155083 return(155082 call(155075 call . stdout[250235] c"writef") fmt[155053](155081 'expand_tuple' args[155060])))
      }
    }
  }
  where {
    (155072 call ||(155067 call isStringType t[155051])(155071 call isBytesType t[155051]))
  }
  { scopeless type
    bool[10]
  }
  function writef[155101](arg fmt[155098] :
  unknown t[155096]) : _unknown[51] "no doc"
  {
    Try!
    {
      {
        (155121 return(155120 call(155115 call . stdout[250235] c"writef") fmt[155098]))
      }
    }
  }
  where {
    (155112 call ||(155107 call isStringType t[155096])(155111 call isBytesType t[155096]))
  }
  { scopeless type
    bool[10]
  }
  function _cast[155136](arg t[155134]:_any[178](?), arg x[155138]:_any[178](?)) : _unknown[51] "last resort" "no doc"
  {
    (155157 return(155156 call stringify x[155138]))
  }
  where {
    (155151 call &&(155142 call == t[155134] string[26])(155149 call !(155148 call isPrimitiveType(155146 'typeof' x[155138]))))
  }
  (355133 'used modules list'(151490 'use' ChapelBase[307])(151494 'use' ChapelLocale[89844])(151497 'use' SysBasic[223516])(151500 'use' SysError[264231])(151548 'use' IO[230891]))
}