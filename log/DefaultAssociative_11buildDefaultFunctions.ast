AST dump for DefaultAssociative after pass buildDefaultFunctions.
Module use list: DSIUtil ChapelDistribution ChapelRange SysBasic ChapelArray ChapelBase ChapelLocks IO ChapelHashing ChapelHashtable SysError Sort 

{
  function chpl__init_DefaultAssociative[416057]() : void[4] "insert line file info" "module init"
  {
    (544018 'init var' debugDefaultAssoc[156269] 0)
    (156272 'end of statement')
    (544020 'init var' debugAssocDataPar[156274] 0)
    (156277 'end of statement')
    (521413 return _void[55])
  }
  unknown debugDefaultAssoc[156269] "config" "param"
  unknown debugAssocDataPar[156274] "config" "param"
  function DefaultAssociativeDomRehashHelper[156476](?).startRehash[156293](arg _mt[156480]:_MT[238], arg this[156478]:DefaultAssociativeDomRehashHelper[156476](?), arg newSize[156290]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156311] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156312] "expr temp" "temp"
      unknown call_tmp[672909] "expr temp" "maybe param" "maybe type" "temp"
      (672912 'move' call_tmp[672909](360852 call dom _mt[243] this[156478]))
      unknown call_tmp[672916] "expr temp" "maybe param" "maybe type" "temp"
      (672919 'move' call_tmp[672916](156297 call _arrs _mt[243] call_tmp[672909]))
      (156321 'move' _iterator[156312](156319 call _getIterator call_tmp[672916]))
      Defer
      {
        {
          (156338 call _freeIterator _iterator[156312])
        }
      }
      { scopeless type
        (156327 'move' _indexOfInterest[156311](156324 call iteratorIndex _iterator[156312]))
      }
      ForLoop[156313]
      {
        unknown arr[156331] "index var" "insert auto destroy"
        (482133 'end of statement')
        (156333 'move' arr[156331] _indexOfInterest[156311])
        (482134 'end of statement' arr[156331])
        {
          (156308 call(156303 call (partial) _startRehash _mt[243] arr[156331]) newSize[156290])
          (482136 'end of statement' arr[156331])
        }
        label _continueLabel[156316]
        _indexOfInterest[156311]
        _iterator[156312]
      }
      label _breakLabel[156317]
    }
    (520931 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156476](?).moveElementDuringRehash[156354](arg _mt[156484]:_MT[238], arg this[156482]:DefaultAssociativeDomRehashHelper[156476](?), arg oldSlot[156351]:int(64)[13], arg newSlot[156357]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156377] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156378] "expr temp" "temp"
      unknown call_tmp[672925] "expr temp" "maybe param" "maybe type" "temp"
      (672928 'move' call_tmp[672925](360858 call dom _mt[243] this[156482]))
      unknown call_tmp[672932] "expr temp" "maybe param" "maybe type" "temp"
      (672935 'move' call_tmp[672932](156362 call _arrs _mt[243] call_tmp[672925]))
      (156387 'move' _iterator[156378](156385 call _getIterator call_tmp[672932]))
      Defer
      {
        {
          (156404 call _freeIterator _iterator[156378])
        }
      }
      { scopeless type
        (156393 'move' _indexOfInterest[156377](156390 call iteratorIndex _iterator[156378]))
      }
      ForLoop[156379]
      {
        unknown arr[156397] "index var" "insert auto destroy"
        (482139 'end of statement')
        (156399 'move' arr[156397] _indexOfInterest[156377])
        (482140 'end of statement' arr[156397])
        {
          (156374 call(156368 call (partial) _moveElementDuringRehash _mt[243] arr[156397]) oldSlot[156351] newSlot[156357])
          (482142 'end of statement' arr[156397])
        }
        label _continueLabel[156382]
        _indexOfInterest[156377]
        _iterator[156378]
      }
      label _breakLabel[156383]
    }
    (520933 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156476](?).finishRehash[156420](arg _mt[156488]:_MT[238], arg this[156486]:DefaultAssociativeDomRehashHelper[156476](?), arg oldSize[156417]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156438] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156439] "expr temp" "temp"
      unknown call_tmp[672941] "expr temp" "maybe param" "maybe type" "temp"
      (672944 'move' call_tmp[672941](360864 call dom _mt[243] this[156486]))
      unknown call_tmp[672948] "expr temp" "maybe param" "maybe type" "temp"
      (672951 'move' call_tmp[672948](156424 call _arrs _mt[243] call_tmp[672941]))
      (156448 'move' _iterator[156439](156446 call _getIterator call_tmp[672948]))
      Defer
      {
        {
          (156465 call _freeIterator _iterator[156439])
        }
      }
      { scopeless type
        (156454 'move' _indexOfInterest[156438](156451 call iteratorIndex _iterator[156439]))
      }
      ForLoop[156440]
      {
        unknown arr[156458] "index var" "insert auto destroy"
        (482145 'end of statement')
        (156460 'move' arr[156458] _indexOfInterest[156438])
        (482146 'end of statement' arr[156458])
        {
          (156435 call(156430 call (partial) _finishRehash _mt[243] arr[156458]) oldSize[156417])
          (482148 'end of statement' arr[156458])
        }
        label _continueLabel[156443]
        _indexOfInterest[156438]
        _iterator[156439]
      }
      label _breakLabel[156444]
    }
    (520935 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156476](?).super[810236](arg _mt[810238]:_MT[238], arg this[810240]:DefaultAssociativeDomRehashHelper[156476](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810250] "RVV" "temp"
    unknown call_tmp[810257] "expr temp" "maybe param" "maybe type" "temp"
    (810260 'move' call_tmp[810257](810244 '.v' this[810240] c"super"))
    (810255 'move' ret[810250](810254 'deref' call_tmp[810257]))
    (810252 return ret[810250])
  }
  function DefaultAssociativeDomRehashHelper[156476](?).dom[810262](arg _mt[810264]:_MT[238], arg this[810266]:DefaultAssociativeDomRehashHelper[156476](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810276] "RVV" "temp"
    unknown call_tmp[810283] "expr temp" "maybe param" "maybe type" "temp"
    (810286 'move' call_tmp[810283](810270 '.' this[810266] c"dom"))
    (810281 'move' ret[810276](810280 'addr of' call_tmp[810283]))
    (810278 return ret[810276])
  }
  function DefaultAssociativeDomRehashHelper[156476](?).init[810288](arg _mt[810290]:_MT[238], arg this[810291]:DefaultAssociativeDomRehashHelper[156476](?), in arg dom[810366]:unmanaged DefaultAssociativeDom[415529](?) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[810381] "temporary of super field" "temp"
    (810383 'move' super_tmp[810381](810380 '.v' this[810291] c"super"))
    (810301 call(810299 call (partial) init _mt[243] super_tmp[810381]))
    (810407 'end of statement')
    unknown tmp[810386] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[810410] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[810422] "expr temp" "maybe param" "maybe type" "temp"
      (810425 'move' call_tmp[810422](810388 '.v' this[810291] c"super"))
      (810414 'move' call_type_tmp[810410](810391 'typeof' call_tmp[810422]))
    }
    (810392 'move' tmp[810386] call_type_tmp[810410])
    unknown call_tmp[810427] "maybe param" "maybe type" "temp"
    (810430 'move' call_tmp[810427](810397 'cast' tmp[810386] this[810291]))
    unknown chpl__thisAsParent[810394] "dead at end of block" "insert auto destroy" "temp"
    (810418 'init var' chpl__thisAsParent[810394] call_tmp[810427] tmp[810386])
    (810400 'setcid' chpl__thisAsParent[810394])
    (810402 'init field' this[810291] c"dom" dom[810366])
    (810408 'end of statement')
    (810405 'setcid' this[810291])
    (810416 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156476](?).deinit[810432](arg _mt[810434]:_MT[238], arg this[810436]:DefaultAssociativeDomRehashHelper[156476](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (810444 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156476](?).writeThis[810446](arg _mt[810450]:_MT[238], arg this[810448]:DefaultAssociativeDomRehashHelper[156476](?), arg f[810449]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810455 call writeThisDefaultImpl f[810449] this[810448])
    (810460 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156476](?).readThis[810462](arg _mt[810466]:_MT[238], arg this[810464]:DefaultAssociativeDomRehashHelper[156476](?), arg f[810465]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810470 call readThisDefaultImpl f[810465] this[810464])
    (810476 return _void[55])
  }
  type DefaultAssociativeDomRehashHelper[156476](?) val super[355743]:chpl__rehashHelpers[202354] "super class" val dom[156283]:unmanaged DefaultAssociativeDom[415529](?) unmanaged DefaultAssociativeDom[415529](?)
  type DefaultAssociativeDomRehashHelper[386750](?)
  function DefaultAssociativeDom[158860](?).lockTable[156537](arg _mt[158864]:_MT[238], arg this[158862]:DefaultAssociativeDom[158860](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[672957] "expr temp" "maybe param" "maybe type" "temp"
    (672960 'move' call_tmp[672957](386733 call parSafe _mt[243] this[158862]))
    unknown call_tmp[672962] "expr temp" "maybe param" "maybe type" "temp"
    (672965 'move' call_tmp[672962](156547 call _cond_test call_tmp[672957]))
    if call_tmp[672962]
    {
      unknown call_tmp[672969] "expr temp" "maybe param" "maybe type" "temp"
      (672972 'move' call_tmp[672969](360872 call tableLock _mt[243] this[158862]))
      (156545 call(156541 call (partial) lock _mt[243] call_tmp[672969]))
    }
    (520937 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).unlockTable[156557](arg _mt[158868]:_MT[238], arg this[158866]:DefaultAssociativeDom[158860](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[672978] "expr temp" "maybe param" "maybe type" "temp"
    (672981 'move' call_tmp[672978](386738 call parSafe _mt[243] this[158866]))
    unknown call_tmp[672983] "expr temp" "maybe param" "maybe type" "temp"
    (672986 'move' call_tmp[672983](156567 call _cond_test call_tmp[672978]))
    if call_tmp[672983]
    {
      unknown call_tmp[672990] "expr temp" "maybe param" "maybe type" "temp"
      (672993 'move' call_tmp[672990](360877 call tableLock _mt[243] this[158866]))
      (156565 call(156561 call (partial) unlock _mt[243] call_tmp[672990]))
    }
    (520939 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).linksDistribution[156577](arg _mt[158872]:_MT[238], arg this[158870]:DefaultAssociativeDom[158860](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520943] "RVV" "param" "temp"
    (520948 'move' ret[520943](520947 'deref' 0))
    (520945 return ret[520943])
  }
  function DefaultAssociativeDom[158860](?).dsiLinksDistribution[156587](arg _mt[158876]:_MT[238], arg this[158874]:DefaultAssociativeDom[158860](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520952] "RVV" "temp"
    (520957 'move' ret[520952](520956 'deref' 0))
    (520954 return ret[520952])
  }
  function DefaultAssociativeDom[158860](?).init[156599](arg _mt[158880]:_MT[238], arg this[158878]:DefaultAssociativeDom[158860](?), arg idxType[156597]:_any[178](?), param arg parSafe[156602]:bool[10], arg dist[156607]:unmanaged DefaultDist[415502]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462095] "temporary of super field" "temp"
    (462103 'move' super_tmp[462095](462096 '.v' this[158878] c"super"))
    (462099 call init _mt[243] super_tmp[462095])
    (482154 'end of statement')
    unknown tmp[462011] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492415] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[672997] "expr temp" "maybe param" "maybe type" "temp"
      (673000 'move' call_tmp[672997](462013 '.v' this[158878] c"super"))
      (492419 'move' call_type_tmp[492415](462016 'typeof' call_tmp[672997]))
    }
    (462017 'move' tmp[462011] call_type_tmp[492415])
    unknown call_tmp[673002] "maybe param" "maybe type" "temp"
    (673005 'move' call_tmp[673002](462022 'cast' tmp[462011] this[158878]))
    unknown chpl__thisAsParent[462019] "dead at end of block" "insert auto destroy" "temp"
    (544022 'init var' chpl__thisAsParent[462019] call_tmp[673002] tmp[462011])
    (462025 'setcid' chpl__thisAsParent[462019])
    (482155 'end of statement')
    unknown call_tmp[673007] "expr temp" "maybe param" "maybe type" "temp"
    (673010 'move' call_tmp[673007](156613 call chpl__validDefaultAssocDomIdxType idxType[156597]))
    unknown call_tmp[673012] "expr temp" "maybe param" "maybe type" "temp"
    (673015 'move' call_tmp[673012](156614 call ! call_tmp[673007]))
    unknown call_tmp[673017] "expr temp" "maybe param" "maybe type" "temp"
    (673020 'move' call_tmp[673017](156659 call _cond_test call_tmp[673012]))
    if call_tmp[673017]
    {
      unknown call_tmp[673022] "expr temp" "maybe param" "maybe type" "temp"
      (673025 'move' call_tmp[673022](156637 call _cast string[26] idxType[156597]))
      (156657 call compilerError "Default Associative domains with idxType=" call_tmp[673022] " are not allowed" 2)
    }
    unknown tmp[462027] "temp" "type variable"
    (462029 'move' tmp[462027] idxType[156597])
    (462031 'init field' this[158878] c"idxType" tmp[462027])
    unknown call_tmp[673027] "expr temp" "maybe param" "maybe type" "temp"
    (673030 'move' call_tmp[673027](462036 call _cast bool[10] parSafe[156602]))
    (462038 'init field' this[158878] c"parSafe" call_tmp[673027])
    (482157 'end of statement')
    unknown tmp[462041] "temp"
    (462044 'init var' tmp[462041] dist[156607] unmanaged DefaultDist[415502])
    (462046 'init field' this[158878] c"dist" tmp[462041])
    (482158 'end of statement')
    unknown tmp[462050] "temp"
    unknown call_tmp[673032] "expr temp" "maybe param" "maybe type" "temp"
    (673035 'move' call_tmp[673032](462053 call chpl__processorAtomicType int(64)[13]))
    (462055 'default init var' tmp[462050] call_tmp[673032])
    (462057 '.=' this[158878] c"numEntries" tmp[462050])
    (482159 'end of statement')
    unknown tmp[462061] "temp"
    unknown tmp[569873] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569874] "maybe param" "temp"
    unknown call_tmp[673037] "expr temp" "maybe param" "maybe type" "temp"
    (673040 'move' call_tmp[673037](462075 '.v' this[158878] c"parSafe"))
    (569879 'move' tmp[569874](569877 call _cond_test call_tmp[673037]))
    if tmp[569874]
    {
      (569884 'move' tmp[569873](569881 '_paramFoldLogical' tmp[569874] chpl_LocalSpinlock[187398]))
    }
    {
      (569889 'move' tmp[569873](569886 '_paramFoldLogical' tmp[569874] nothing[7]))
    }
    (462069 'default init var' tmp[462061] tmp[569873])
    (462071 '.=' this[158878] c"tableLock" tmp[462061])
    (482160 'end of statement')
    unknown call_tmp[673042] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673045 'move' call_tmp[673042](747988 'new' chpl__hashtable[204521](?) idxType[156597] nothing[7]))
    unknown call_tmp[673047] "expr temp" "maybe param" "maybe type" "temp"
    (673050 'move' call_tmp[673047](462090 '.v' this[158878] c"idxType"))
    unknown call_tmp[673052] "maybe param" "maybe type" "temp"
    (673055 'move' call_tmp[673052](462081 call chpl__hashtable[204521](?) call_tmp[673047] nothing[7]))
    unknown tmp[462078] "temp"
    (462084 'init var' tmp[462078] call_tmp[673042] call_tmp[673052])
    (462086 'init field' this[158878] c"table" tmp[462078])
    (482161 'end of statement')
    (462094 'setcid' this[158878])
    (482162 'end of statement')
    unknown call_tmp[673059] "expr temp" "maybe param" "maybe type" "temp"
    (673062 'move' call_tmp[673059](156712 call table _mt[243] this[158878]))
    unknown call_tmp[673066] "expr temp" "maybe param" "maybe type" "temp"
    (673069 'move' call_tmp[673066](156717 call rehashHelpers _mt[243] call_tmp[673059]))
    unknown call_tmp[673071] "expr temp" "maybe param" "maybe type" "temp"
    (673074 'move' call_tmp[673071](156725 call _cast _unmanagedNonNilable[223](?) this[158878]))
    unknown call_tmp[673076] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673079 'move' call_tmp[673076](747989 'new' DefaultAssociativeDomRehashHelper[386750](?) call_tmp[673071]))
    (156729 call = call_tmp[673066] call_tmp[673076])
    (520959 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).deinit[156736](arg _mt[158884]:_MT[238], arg this[158882]:DefaultAssociativeDom[158860](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520961 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).dsiBuildArray[156745](arg _mt[158888]:_MT[238], arg this[158886]:DefaultAssociativeDom[158860](?), arg eltType[156743]:_any[178](?), param arg initElts[156748]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520965] "RVV" "temp"
    unknown call_tmp[673083] "expr temp" "maybe param" "maybe type" "temp"
    (673086 'move' call_tmp[673083](386761 call idxType _mt[243] this[158886]))
    unknown call_tmp[673090] "expr temp" "maybe param" "maybe type" "temp"
    (673093 'move' call_tmp[673090](386766 call parSafe _mt[243] this[158886]))
    unknown call_tmp[673095] "expr temp" "maybe param" "maybe type" "temp"
    (673098 'move' call_tmp[673095](156765 call _to_unmanaged this[158886]))
    unknown call_tmp[673100] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673103 'move' call_tmp[673100](747990 'new' DefaultAssociativeArr[386755](?)(eltType = eltType[156743])(idxType = call_tmp[673083])(parSafeDom = call_tmp[673090])(dom = call_tmp[673095])(initElts = initElts[156748])(_chpl_manager = unmanaged[220](?))))
    (520970 'move' ret[520965](520969 'deref' call_tmp[673100]))
    (520967 return ret[520965])
  }
  function DefaultAssociativeDom[158860](?).dsiSerialReadWrite[156779](arg _mt[158892]:_MT[238], arg this[158890]:DefaultAssociativeDom[158860](?), arg f[156777]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[673107] "maybe param" "maybe type" "temp"
    (673110 'move' call_tmp[673107](156786 call(156782 call (partial) binary _mt[243] f[156777])))
    unknown binary[156787] "dead at end of block" "insert auto destroy"
    (544024 'init var' binary[156787] call_tmp[673107])
    (156790 'end of statement')
    unknown call_tmp[673114] "expr temp" "maybe param" "maybe type" "temp"
    (673117 'move' call_tmp[673114](156793 call writing _mt[243] f[156777]))
    unknown call_tmp[673119] "expr temp" "maybe param" "maybe type" "temp"
    (673122 'move' call_tmp[673119](157128 call _cond_test call_tmp[673114]))
    if call_tmp[673119]
    {
      unknown call_tmp[673124] "expr temp" "maybe param" "maybe type" "temp"
      (673127 'move' call_tmp[673124](156936 call _cond_test binary[156787]))
      if call_tmp[673124]
      {
        unknown call_tmp[673131] "maybe param" "maybe type" "temp"
        (673134 'move' call_tmp[673131](386773 call dsiNumIndices _mt[243] this[158890]))
        unknown numIndices[156799] "dead at end of block" "insert auto destroy"
        (544026 'init var' numIndices[156799] call_tmp[673131] int(64)[13])
        (156802 'end of statement')
        (156806 call <~> f[156777] numIndices[156799])
        (482165 'end of statement' numIndices[156799])
        {
          unknown _indexOfInterest[156817] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156818] "expr temp" "temp"
          (156827 'move' _iterator[156818](156825 call _getIterator this[158890]))
          Defer
          {
            {
              (156843 call _freeIterator _iterator[156818])
            }
          }
          { scopeless type
            (156832 'move' _indexOfInterest[156817](156829 call iteratorIndex _iterator[156818]))
          }
          ForLoop[156819]
          {
            unknown idx[156836] "index var" "insert auto destroy"
            (482168 'end of statement')
            (156838 'move' idx[156836] _indexOfInterest[156817])
            (482169 'end of statement' idx[156836])
            {
              (156813 call <~> f[156777] idx[156836])
              (482171 'end of statement' idx[156836])
            }
            label _continueLabel[156822]
            _indexOfInterest[156817]
            _iterator[156818]
          }
          label _breakLabel[156823]
        }
      }
      {
        unknown first[156851] "dead at end of block" "insert auto destroy"
        (544028 'init var' first[156851] 1)
        (156854 'end of statement')
        unknown call_tmp[673136] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673139 'move' call_tmp[673136](747991 'new' ioLiteral[238670] "{"))
        (156862 call <~> f[156777] call_tmp[673136])
        (482173 'end of statement')
        {
          unknown _indexOfInterest[156894] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156895] "expr temp" "temp"
          (156904 'move' _iterator[156895](156902 call _getIterator this[158890]))
          Defer
          {
            {
              (156920 call _freeIterator _iterator[156895])
            }
          }
          { scopeless type
            (156909 'move' _indexOfInterest[156894](156906 call iteratorIndex _iterator[156895]))
          }
          ForLoop[156896]
          {
            unknown idx[156913] "index var" "insert auto destroy"
            (482175 'end of statement')
            (156915 'move' idx[156913] _indexOfInterest[156894])
            (482176 'end of statement' idx[156913])
            {
              unknown call_tmp[673141] "expr temp" "maybe param" "maybe type" "temp"
              (673144 'move' call_tmp[673141](156882 call _cond_test first[156851]))
              if call_tmp[673141]
              {
                (156870 call = first[156851] 0)
                (482178 'end of statement' first[156851])
              }
              {
                unknown call_tmp[673146] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (673149 'move' call_tmp[673146](747992 'new' ioLiteral[238670] ", "))
                (156879 call <~> f[156777] call_tmp[673146])
              }
              (156891 call <~> f[156777] idx[156913])
              (482181 'end of statement' idx[156913])
            }
            label _continueLabel[156899]
            _indexOfInterest[156894]
            _iterator[156895]
          }
          label _breakLabel[156900]
        }
        unknown call_tmp[673151] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673154 'move' call_tmp[673151](747993 'new' ioLiteral[238670] "}"))
        (156933 call <~> f[156777] call_tmp[673151])
      }
    }
    {
      (156943 call(386793 call (partial) dsiClear _mt[243] this[158890]))
      (482184 'end of statement')
      unknown call_tmp[673158] "expr temp" "maybe param" "maybe type" "temp"
      (673161 'move' call_tmp[673158](157124 call _cond_test binary[156787]))
      if call_tmp[673158]
      {
        unknown numIndices[156948] "dead at end of block" "insert auto destroy"
        (544030 'default init var' numIndices[156948] int(64)[13])
        (156951 'end of statement')
        (156955 call <~> f[156777] numIndices[156948])
        (482185 'end of statement' numIndices[156948])
        {
          unknown _indexOfInterest[156979] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156980] "expr temp" "temp"
          unknown call_tmp[673163] "expr temp" "maybe param" "maybe type" "temp"
          (673166 'move' call_tmp[673163](156994 call chpl_direct_range_iter 1 numIndices[156948] 1))
          (156989 'move' _iterator[156980](156987 call _getIterator call_tmp[673163]))
          Defer
          {
            {
              (157010 call _freeIterator _iterator[156980])
            }
          }
          { scopeless type
            (156999 'move' _indexOfInterest[156979](156996 call iteratorIndex _iterator[156980]))
          }
          ForLoop[156981]
          {
            unknown i[157003] "index var" "insert auto destroy"
            (482188 'end of statement')
            (157005 'move' i[157003] _indexOfInterest[156979])
            (482189 'end of statement' i[157003])
            {
              unknown idx[156964] "dead at end of block" "insert auto destroy"
              unknown call_tmp[673170] "expr temp" "maybe param" "maybe type" "temp"
              (673173 'move' call_tmp[673170](386801 call idxType _mt[243] this[158890]))
              (544032 'default init var' idx[156964] call_tmp[673170])
              (156967 'end of statement')
              (156971 call <~> f[156777] idx[156964])
              (482191 'end of statement' idx[156964])
              (156977 call(386807 call (partial) dsiAdd _mt[243] this[158890]) idx[156964])
              (482193 'end of statement' idx[156964])
            }
            label _continueLabel[156984]
            _indexOfInterest[156979]
            _iterator[156980]
          }
          label _breakLabel[156985]
        }
      }
      {
        unknown call_tmp[673177] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673180 'move' call_tmp[673177](747994 'new' ioLiteral[238670] "{"))
        (157023 call <~> f[156777] call_tmp[673177])
        (482195 'end of statement')
        unknown first[157028] "dead at end of block" "insert auto destroy"
        (544034 'init var' first[157028] 1)
        (157031 'end of statement')
        unknown call_tmp[673182] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673185 'move' call_tmp[673182](747995 'new' ioLiteral[238670] "," 1))
        unknown comma[157038] "dead at end of block" "insert auto destroy"
        (544036 'init var' comma[157038] call_tmp[673182])
        (157041 'end of statement')
        unknown call_tmp[673187] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673190 'move' call_tmp[673187](747996 'new' ioLiteral[238670] "}"))
        unknown end[157047] "dead at end of block" "insert auto destroy"
        (544038 'init var' end[157047] call_tmp[673187])
        (157050 'end of statement')
        {
          unknown tmp[157103] "temp"
          (157121 'move' tmp[157103](157119 call _cond_test 1))
          WhileDo[157108]
          {
            {
              Try
              {
                {
                  (157054 call <~> f[156777] end[157047])
                  (482196 'end of statement' end[157047])
                  break _breakLabel[157107] _breakLabel[157107]
                }
              }
              Catch err : BadFormatError
              {
                unknown call_tmp[673192] "expr temp" "maybe param" "maybe type" "temp"
                (673195 'move' call_tmp[673192](354515 'current error'))
                unknown call_tmp[673197] "maybe param" "maybe type" "temp"
                (673200 'move' call_tmp[673197](354516 'dynamic_cast' unmanaged BadFormatError?[415664] call_tmp[673192]))
                unknown tmp[354512] "dead at end of block" "insert auto destroy" "temp"
                (544040 'init var' tmp[354512] call_tmp[673197])
                unknown call_tmp[673202] "expr temp" "maybe param" "maybe type" "temp"
                (673205 'move' call_tmp[673202](354519 '!=' tmp[354512] nil[44]))
                if call_tmp[673202]
                {
                  unknown call_tmp[673207] "expr temp" "maybe param" "maybe type" "temp"
                  (673210 'move' call_tmp[673207](354526 'to non nilable class' tmp[354512]))
                  unknown call_tmp[673212] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                  (673215 'move' call_tmp[673212](747997 'new' _owned[30](?) call_tmp[673207]))
                  unknown err[354525] "dead at end of block" "insert auto destroy"
                  (544042 'init var' err[354525] call_tmp[673212])
                  (482198 'end of statement')
                  {
                  }
                }
                {
                }
              }
              unknown call_tmp[673217] "expr temp" "maybe param" "maybe type" "temp"
              (673220 'move' call_tmp[673217](157071 call ! first[157028]))
              unknown call_tmp[673222] "expr temp" "maybe param" "maybe type" "temp"
              (673225 'move' call_tmp[673222](157078 call _cond_test call_tmp[673217]))
              if call_tmp[673222]
              {
                (157075 call <~> f[156777] comma[157038])
                (482199 'end of statement' comma[157038])
              }
              (157085 call = first[157028] 0)
              (482201 'end of statement' first[157028])
              unknown idx[157089] "dead at end of block" "insert auto destroy"
              unknown call_tmp[673229] "expr temp" "maybe param" "maybe type" "temp"
              (673232 'move' call_tmp[673229](386825 call idxType _mt[243] this[158890]))
              (544044 'default init var' idx[157089] call_tmp[673229])
              (157092 'end of statement')
              (157095 call <~> f[156777] idx[157089])
              (482203 'end of statement' idx[157089])
              (157101 call(386831 call (partial) dsiAdd _mt[243] this[158890]) idx[157089])
              (482205 'end of statement' idx[157089])
            }
            label _continueLabel[157106]
            (157114 'move' tmp[157103](157112 call _cond_test 1))
            tmp[157103]
          }
          label _breakLabel[157107]
        }
      }
    }
    (520972 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).dsiSerialWrite[157138](arg _mt[158896]:_MT[238], arg this[158894]:DefaultAssociativeDom[158860](?), arg f[157136]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157146 call(157141 call (partial) dsiSerialReadWrite _mt[243] this[158894]) f[157136])
    (520974 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).dsiSerialRead[157155](arg _mt[158900]:_MT[238], arg this[158898]:DefaultAssociativeDom[158860](?), arg f[157153]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157163 call(157158 call (partial) dsiSerialReadWrite _mt[243] this[158898]) f[157153])
    (520976 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).dsiAssignDomain[157174](arg _mt[158904]:_MT[238], arg this[158902]:DefaultAssociativeDom[158860](?), arg rhs[157171]:_domain[125914](?), arg lhsPrivate[157177]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (157184 call chpl_assignDomainWithIndsIterSafeForRemoving this[158902] rhs[157171])
    (520978 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).dsiNumIndices[157191](arg _mt[158908]:_MT[238], arg this[158906]:DefaultAssociativeDom[158860](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[520982] "RVV" "temp"
    unknown call_tmp[673242] "expr temp" "maybe param" "maybe type" "temp"
    (673245 'move' call_tmp[673242](360894 call numEntries _mt[243] this[158906]))
    unknown call_tmp[673249] "expr temp" "maybe param" "maybe type" "temp"
    (673252 'move' call_tmp[673249](157198 call(157194 call (partial) read _mt[243] call_tmp[673242])))
    (520987 'move' ret[520982](520986 'deref' call_tmp[673249]))
    (520984 return ret[520982])
  }
  function DefaultAssociativeDom[158860](?).dsiIndsIterSafeForRemoving[157206](arg _mt[158912]:_MT[238], arg this[158910]:DefaultAssociativeDom[158860](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520991] "RVV" "temp"
    unknown call_tmp[673256] "expr temp" "maybe param" "maybe type" "temp"
    (673259 'move' call_tmp[673256](360899 call table _mt[243] this[158910]))
    unknown call_tmp[673263] "expr temp" "maybe param" "maybe type" "temp"
    (673266 'move' call_tmp[673263](157211 call postponeResize _mt[243] call_tmp[673256]))
    (157215 call = call_tmp[673263] 1)
    (482211 'end of statement')
    {
      unknown _indexOfInterest[157229] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157230] "expr temp" "temp"
      unknown call_tmp[673270] "expr temp" "maybe param" "maybe type" "temp"
      (673273 'move' call_tmp[673270](157225 call(157221 call (partial) these _mt[243] this[158910])))
      (157239 'move' _iterator[157230](157237 call _getIterator call_tmp[673270]))
      Defer
      {
        {
          (157256 call _freeIterator _iterator[157230])
        }
      }
      { scopeless type
        (157245 'move' _indexOfInterest[157229](157242 call iteratorIndex _iterator[157230]))
      }
      ForLoop[157231]
      {
        unknown i[157249] "index var" "insert auto destroy"
        (482213 'end of statement')
        (157251 'move' i[157249] _indexOfInterest[157229])
        (482214 'end of statement' i[157249])
        unknown yret[520995] "YVV" "temp"
        (520998 'move' yret[520995](520997 'deref' i[157249]))
        (521000 yield yret[520995])
        (482216 'end of statement' i[157249])
        label _continueLabel[157234]
        _indexOfInterest[157229]
        _iterator[157230]
      }
      label _breakLabel[157235]
    }
    {
      const tmp[157296] "const" "temp"
      unknown call_tmp[673275] "expr temp" "maybe param" "maybe type" "temp"
      (673278 'move' call_tmp[673275](157293 '_wide_get_locale' this[158910]))
      (157297 'move' tmp[157296](157294 'deref' call_tmp[673275]))
      {
        unknown call_tmp[673282] "expr temp" "maybe param" "maybe type" "temp"
        (673285 'move' call_tmp[673282](360905 call table _mt[243] this[158910]))
        unknown call_tmp[673289] "expr temp" "maybe param" "maybe type" "temp"
        (673292 'move' call_tmp[673289](157265 call postponeResize _mt[243] call_tmp[673282]))
        (157269 call = call_tmp[673289] 0)
        (482218 'end of statement')
        (157275 call(386845 call (partial) lockTable _mt[243] this[158910]))
        (482219 'end of statement')
        Defer
        {
          {
            (157279 call(386851 call (partial) unlockTable _mt[243] this[158910]))
          }
        }
        unknown call_tmp[673300] "expr temp" "maybe param" "maybe type" "temp"
        (673303 'move' call_tmp[673300](360910 call table _mt[243] this[158910]))
        (157291 call(157287 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673300]))
      }
      (157300 'elided on block' 0 tmp[157296])
    }
    (520993 return ret[520991])
  }
  function DefaultAssociativeDom[158860](?)._isSlotFull[157312](arg _mt[158916]:_MT[238], arg this[158914]:DefaultAssociativeDom[158860](?), arg slot[157309]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521004] "RVV" "temp"
    unknown call_tmp[673309] "expr temp" "maybe param" "maybe type" "temp"
    (673312 'move' call_tmp[673309](360915 call table _mt[243] this[158914]))
    unknown call_tmp[673316] "expr temp" "maybe param" "maybe type" "temp"
    (673319 'move' call_tmp[673316](157321 call(157316 call (partial) table _mt[243] call_tmp[673309]) slot[157309]))
    unknown call_tmp[673323] "expr temp" "maybe param" "maybe type" "temp"
    (673326 'move' call_tmp[673323](157326 call(157322 call (partial) isFull _mt[243] call_tmp[673316])))
    (521010 'move' ret[521004](521009 'coerce' call_tmp[673323] bool[10]))
    (521006 return ret[521004])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158860](?).these[157335](arg _mt[158920]:_MT[238], arg this[158918]:DefaultAssociativeDom[158860](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521014] "RVV" "temp"
    {
      unknown _indexOfInterest[157385] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157386] "expr temp" "temp"
      unknown call_tmp[673330] "expr temp" "maybe param" "maybe type" "temp"
      (673333 'move' call_tmp[673330](360920 call table _mt[243] this[158918]))
      unknown call_tmp[673337] "expr temp" "maybe param" "maybe type" "temp"
      (673340 'move' call_tmp[673337](157345 call(157341 call (partial) allSlots _mt[243] call_tmp[673330])))
      (157395 'move' _iterator[157386](157393 call _getIterator call_tmp[673337]))
      Defer
      {
        {
          (157412 call _freeIterator _iterator[157386])
        }
      }
      { scopeless type
        (157401 'move' _indexOfInterest[157385](157398 call iteratorIndex _iterator[157386]))
      }
      ForLoop[157387]
      {
        unknown slot[157405] "index var" "insert auto destroy"
        (482224 'end of statement')
        (157407 'move' slot[157405] _indexOfInterest[157385])
        (482225 'end of statement' slot[157405])
        {
          unknown aSlot[157353] "dead at end of block" "ref var"
          unknown call_tmp[673344] "expr temp" "maybe param" "maybe type" "temp"
          (673347 'move' call_tmp[673344](360925 call table _mt[243] this[158918]))
          unknown call_tmp[673351] "expr temp" "maybe param" "maybe type" "temp"
          (673354 'move' call_tmp[673351](157352 call(157347 call (partial) table _mt[243] call_tmp[673344]) slot[157405]))
          (544047 'move' aSlot[157353](544046 'addr of' call_tmp[673351]))
          (157356 'end of statement' slot[157405])
          unknown call_tmp[673358] "expr temp" "maybe param" "maybe type" "temp"
          (673361 'move' call_tmp[673358](157361 call status _mt[243] aSlot[157353]))
          unknown call_tmp[673363] "expr temp" "maybe param" "maybe type" "temp"
          (673366 'move' call_tmp[673363](157370 call == call_tmp[673358] full[200416]))
          unknown call_tmp[673368] "expr temp" "maybe param" "maybe type" "temp"
          (673371 'move' call_tmp[673368](157381 call _cond_test call_tmp[673363]))
          if call_tmp[673368]
          {
            unknown yret[521018] "YVV" "temp"
            unknown call_tmp[673375] "expr temp" "maybe param" "maybe type" "temp"
            (673378 'move' call_tmp[673375](157375 call key _mt[243] aSlot[157353]))
            (521021 'move' yret[521018](521020 'deref' call_tmp[673375]))
            (521023 yield yret[521018])
            (482228 'end of statement' aSlot[157353])
          }
        }
        label _continueLabel[157390]
        _indexOfInterest[157385]
        _iterator[157386]
      }
      label _breakLabel[157391]
    }
    (521016 return ret[521014])
  }
  function DefaultAssociativeDom[158860](?).these[157428](arg _mt[158924]:_MT[238], arg this[158922]:DefaultAssociativeDom[158860](?), param arg tag[157425]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521027] "RVV" "temp"
    unknown call_tmp[673380] "expr temp" "maybe param" "maybe type" "temp"
    (673383 'move' call_tmp[673380](157460 call _cond_test debugDefaultAssoc[156269]))
    if call_tmp[673380]
    {
      (157457 call writeln "*** In associative domain standalone iterator")
    }
    {
      unknown _indexOfInterest[157507] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157508] "expr temp" "temp"
      unknown call_tmp[673387] "expr temp" "maybe param" "maybe type" "temp"
      (673390 'move' call_tmp[673387](360934 call table _mt[243] this[158922]))
      unknown call_tmp[673394] "expr temp" "maybe param" "maybe type" "temp"
      (673397 'move' call_tmp[673394](157473 call(157467 call (partial) allSlots _mt[243] call_tmp[673387])(tag = tag[157425])))
      (157517 'move' _iterator[157508](157515 call _getIterator call_tmp[673394]))
      Defer
      {
        {
          (157534 call _freeIterator _iterator[157508])
        }
      }
      { scopeless type
        (157523 'move' _indexOfInterest[157507](157520 call iteratorIndex _iterator[157508]))
      }
      ForLoop[157509]
      {
        unknown slot[157527] "index var" "insert auto destroy"
        (482232 'end of statement')
        (157529 'move' slot[157527] _indexOfInterest[157507])
        (482233 'end of statement' slot[157527])
        {
          unknown aSlot[157481] "dead at end of block" "ref var"
          unknown call_tmp[673401] "expr temp" "maybe param" "maybe type" "temp"
          (673404 'move' call_tmp[673401](360939 call table _mt[243] this[158922]))
          unknown call_tmp[673408] "expr temp" "maybe param" "maybe type" "temp"
          (673411 'move' call_tmp[673408](157480 call(157475 call (partial) table _mt[243] call_tmp[673401]) slot[157527]))
          (544050 'move' aSlot[157481](544049 'addr of' call_tmp[673408]))
          (157484 'end of statement' slot[157527])
          unknown call_tmp[673415] "expr temp" "maybe param" "maybe type" "temp"
          (673418 'move' call_tmp[673415](157487 call status _mt[243] aSlot[157481]))
          unknown call_tmp[673420] "expr temp" "maybe param" "maybe type" "temp"
          (673423 'move' call_tmp[673420](157494 call == call_tmp[673415] full[200416]))
          unknown call_tmp[673425] "expr temp" "maybe param" "maybe type" "temp"
          (673428 'move' call_tmp[673425](157503 call _cond_test call_tmp[673420]))
          if call_tmp[673425]
          {
            unknown yret[521031] "YVV" "temp"
            unknown call_tmp[673432] "expr temp" "maybe param" "maybe type" "temp"
            (673435 'move' call_tmp[673432](157497 call key _mt[243] aSlot[157481]))
            (521034 'move' yret[521031](521033 'deref' call_tmp[673432]))
            (521036 yield yret[521031])
            (482236 'end of statement' aSlot[157481])
          }
        }
        label _continueLabel[157512]
        _indexOfInterest[157507]
        _iterator[157508]
      }
      label _breakLabel[157513]
    }
    (521029 return ret[521027])
  }
  where {
    (157435 call == tag[157425] standalone[451])
  }
  function DefaultAssociativeDom[158860](?).these[157550](arg _mt[158928]:_MT[238], arg this[158926]:DefaultAssociativeDom[158860](?), param arg tag[157547]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521040] "RVV" "temp"
    unknown call_tmp[673437] "expr temp" "maybe param" "maybe type" "temp"
    (673440 'move' call_tmp[673437](157581 call _cond_test debugDefaultAssoc[156269]))
    if call_tmp[673437]
    {
      (157579 call writeln "*** In associative domain leader iterator")
    }
    {
      unknown _indexOfInterest[157603] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157604] "expr temp" "temp"
      unknown call_tmp[673444] "expr temp" "maybe param" "maybe type" "temp"
      (673447 'move' call_tmp[673444](360948 call table _mt[243] this[158926]))
      unknown call_tmp[673451] "expr temp" "maybe param" "maybe type" "temp"
      (673454 'move' call_tmp[673451](157595 call(157589 call (partial) allSlots _mt[243] call_tmp[673444])(tag = tag[157547])))
      (157613 'move' _iterator[157604](157611 call _getIterator call_tmp[673451]))
      Defer
      {
        {
          (157630 call _freeIterator _iterator[157604])
        }
      }
      { scopeless type
        (157619 'move' _indexOfInterest[157603](157616 call iteratorIndex _iterator[157604]))
      }
      ForLoop[157605]
      {
        unknown chunk[157623] "index var" "insert auto destroy"
        (482240 'end of statement')
        (157625 'move' chunk[157623] _indexOfInterest[157603])
        (482241 'end of statement' chunk[157623])
        unknown yret[521044] "YVV" "temp"
        unknown call_tmp[673456] "expr temp" "maybe param" "maybe type" "temp"
        (673459 'move' call_tmp[673456](157599 call _build_tuple chunk[157623] this[158926]))
        (521047 'move' yret[521044](521046 'deref' call_tmp[673456]))
        (521049 yield yret[521044])
        (482243 'end of statement' chunk[157623])
        label _continueLabel[157608]
        _indexOfInterest[157603]
        _iterator[157604]
      }
      label _breakLabel[157609]
    }
    (521042 return ret[521040])
  }
  where {
    (157557 call == tag[157547] leader[447])
  }
  function DefaultAssociativeDom[158860](?).these[157646](arg _mt[158932]:_MT[238], arg this[158930]:DefaultAssociativeDom[158860](?), param arg tag[157643]:iterKind[453], arg followThis[157648]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521053] "RVV" "temp"
    unknown tmp[157663] "dead at end of block" "insert auto destroy" "temp"
    (544052 'init var' tmp[157663] followThis[157648])
    (157670 call _check_tuple_var_decl tmp[157663] 2)
    (482245 'end of statement')
    unknown call_tmp[673461] "maybe param" "maybe type" "temp"
    (673464 'move' call_tmp[673461](157664 call tmp[157663] 0))
    unknown chunk[157657] "dead at end of block" "insert auto destroy"
    (544054 'init var' chunk[157657] call_tmp[673461])
    unknown call_tmp[673466] "maybe param" "maybe type" "temp"
    (673469 'move' call_tmp[673466](157667 call tmp[157663] 1))
    unknown followThisDom[157659] "dead at end of block" "insert auto destroy"
    (544056 'init var' followThisDom[157659] call_tmp[673466])
    (157675 'end of statement')
    unknown call_tmp[673471] "expr temp" "maybe param" "maybe type" "temp"
    (673474 'move' call_tmp[673471](157699 call _cond_test debugDefaultAssoc[156269]))
    if call_tmp[673471]
    {
      (157697 call writeln "In associative domain follower code")
    }
    unknown call_tmp[673476] "maybe param" "maybe type" "temp"
    (673479 'move' call_tmp[673476](157706 call == followThisDom[157659] this[158930]))
    const sameDom[157708] "dead at end of block" "const" "insert auto destroy"
    (544058 'init var' sameDom[157708] call_tmp[673476])
    (157711 'end of statement')
    unknown call_tmp[673481] "expr temp" "maybe param" "maybe type" "temp"
    (673484 'move' call_tmp[673481](157713 call ! sameDom[157708]))
    unknown call_tmp[673486] "expr temp" "maybe param" "maybe type" "temp"
    (673489 'move' call_tmp[673486](157751 call _cond_test call_tmp[673481]))
    if call_tmp[673486]
    {
      unknown call_tmp[673493] "expr temp" "maybe param" "maybe type" "temp"
      (673496 'move' call_tmp[673493](157716 call dsiNumIndices _mt[243] followThisDom[157659]))
      unknown call_tmp[673500] "expr temp" "maybe param" "maybe type" "temp"
      (673503 'move' call_tmp[673500](157720 call dsiNumIndices _mt[243] this[158930]))
      unknown call_tmp[673505] "expr temp" "maybe param" "maybe type" "temp"
      (673508 'move' call_tmp[673505](157723 call != call_tmp[673493] call_tmp[673500]))
      unknown call_tmp[673510] "expr temp" "maybe param" "maybe type" "temp"
      (673513 'move' call_tmp[673510](157746 call _cond_test call_tmp[673505]))
      if call_tmp[673510]
      {
        (157744 call halt "zippered associative domains do not match")
      }
    }
    unknown call_tmp[673517] "expr temp" "maybe param" "maybe type" "temp"
    (673520 'move' call_tmp[673517](157757 call table _mt[243] followThisDom[157659]))
    unknown call_tmp[673524] "maybe param" "maybe type" "temp"
    (673527 'move' call_tmp[673524](157760 call table _mt[243] call_tmp[673517]))
    const otherTable[157763] "dead at end of block" "const" "insert auto destroy"
    (544060 'init var' otherTable[157763] call_tmp[673524])
    (157766 'end of statement' followThisDom[157659] followThisDom[157659])
    {
      unknown _indexOfInterest[157862] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157863] "expr temp" "temp"
      (157872 'move' _iterator[157863](157870 call _getIterator chunk[157657]))
      Defer
      {
        {
          (157888 call _freeIterator _iterator[157863])
        }
      }
      { scopeless type
        (157877 'move' _indexOfInterest[157862](157874 call iteratorIndex _iterator[157863]))
      }
      ForLoop[157864]
      {
        unknown slot[157881] "index var" "insert auto destroy"
        (482251 'end of statement')
        (157883 'move' slot[157881] _indexOfInterest[157862])
        (482252 'end of statement' slot[157881])
        {
          const aSlot[157773] "dead at end of block" "const" "ref var"
          unknown call_tmp[673529] "expr temp" "maybe param" "maybe type" "temp"
          (673532 'move' call_tmp[673529](157772 call otherTable[157763] slot[157881]))
          (544063 'move' aSlot[157773](544062 'addr of' call_tmp[673529]))
          (157776 'end of statement' otherTable[157763] slot[157881])
          unknown call_tmp[673536] "expr temp" "maybe param" "maybe type" "temp"
          (673539 'move' call_tmp[673536](157783 call(157779 call (partial) isFull _mt[243] aSlot[157773])))
          unknown call_tmp[673541] "expr temp" "maybe param" "maybe type" "temp"
          (673544 'move' call_tmp[673541](157858 call _cond_test call_tmp[673536]))
          if call_tmp[673541]
          {
            unknown idx[157785] "dead at end of block" "insert auto destroy"
            (544065 'init var' idx[157785] slot[157881])
            (157788 'end of statement' slot[157881])
            unknown call_tmp[673546] "expr temp" "maybe param" "maybe type" "temp"
            (673549 'move' call_tmp[673546](157791 call ! sameDom[157708]))
            unknown call_tmp[673551] "expr temp" "maybe param" "maybe type" "temp"
            (673554 'move' call_tmp[673551](157842 call _cond_test call_tmp[673546]))
            if call_tmp[673551]
            {
              unknown call_tmp[673558] "expr temp" "maybe param" "maybe type" "temp"
              (673561 'move' call_tmp[673558](360958 call table _mt[243] this[158930]))
              unknown call_tmp[673567] "expr temp" "maybe param" "maybe type" "temp"
              (673570 'move' call_tmp[673567](157805 call key _mt[243] aSlot[157773]))
              unknown call_tmp[673572] "maybe param" "maybe type" "temp"
              (673575 'move' call_tmp[673572](157809 call(157801 call (partial) findFullSlot _mt[243] call_tmp[673558]) call_tmp[673567]))
              const tmp[157810] "dead at end of block" "const" "insert auto destroy" "temp"
              (544067 'init var' tmp[157810] call_tmp[673572])
              (157817 call _check_tuple_var_decl tmp[157810] 2)
              (482257 'end of statement')
              unknown call_tmp[673577] "maybe param" "maybe type" "temp"
              (673580 'move' call_tmp[673577](157811 call tmp[157810] 0))
              const match[157793] "dead at end of block" "const" "insert auto destroy"
              (544069 'init var' match[157793] call_tmp[673577])
              unknown call_tmp[673582] "maybe param" "maybe type" "temp"
              (673585 'move' call_tmp[673582](157814 call tmp[157810] 1))
              const loc[157795] "dead at end of block" "const" "insert auto destroy"
              (544071 'init var' loc[157795] call_tmp[673582])
              (157822 'end of statement')
              unknown call_tmp[673587] "expr temp" "maybe param" "maybe type" "temp"
              (673590 'move' call_tmp[673587](157825 call ! match[157793]))
              unknown call_tmp[673592] "expr temp" "maybe param" "maybe type" "temp"
              (673595 'move' call_tmp[673592](157832 call _cond_test call_tmp[673587]))
              if call_tmp[673592]
              {
                (157830 call halt "zippered associative domains do not match")
              }
              (157839 call = idx[157785] loc[157795])
              (482259 'end of statement' idx[157785] loc[157795])
            }
            unknown yret[521057] "YVV" "temp"
            unknown call_tmp[673599] "expr temp" "maybe param" "maybe type" "temp"
            (673602 'move' call_tmp[673599](360964 call table _mt[243] this[158930]))
            unknown call_tmp[673606] "expr temp" "maybe param" "maybe type" "temp"
            (673609 'move' call_tmp[673606](157852 call(157847 call (partial) table _mt[243] call_tmp[673599]) idx[157785]))
            unknown call_tmp[673613] "expr temp" "maybe param" "maybe type" "temp"
            (673616 'move' call_tmp[673613](157853 call key _mt[243] call_tmp[673606]))
            (521060 'move' yret[521057](521059 'deref' call_tmp[673613]))
            (521062 yield yret[521057])
            (482262 'end of statement' idx[157785])
          }
        }
        label _continueLabel[157867]
        _indexOfInterest[157862]
        _iterator[157863]
      }
      label _breakLabel[157868]
    }
    (521055 return ret[521053])
  }
  where {
    (157655 call == tag[157643] follower[449])
  }
  function DefaultAssociativeDom[158860](?).dsiMyDist[157900](arg _mt[158936]:_MT[238], arg this[158934]:DefaultAssociativeDom[158860](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521066] "RVV" "temp"
    unknown call_tmp[673620] "expr temp" "maybe param" "maybe type" "temp"
    (673623 'move' call_tmp[673620](386886 call dist _mt[243] this[158934]))
    (521072 'move' ret[521066](521071 'coerce' call_tmp[673620] unmanaged BaseDist[415526]))
    (521068 return ret[521066])
  }
  { scopeless type
    unmanaged BaseDist[415526]
  }
  function DefaultAssociativeDom[158860](?).dsiClear[157913](arg _mt[158940]:_MT[238], arg this[158938]:DefaultAssociativeDom[158860](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      const tmp[158092] "const" "temp"
      unknown call_tmp[673625] "expr temp" "maybe param" "maybe type" "temp"
      (673628 'move' call_tmp[673625](158089 '_wide_get_locale' this[158938]))
      (158093 'move' tmp[158092](158090 'deref' call_tmp[673625]))
      {
        (157918 call(386891 call (partial) lockTable _mt[243] this[158938]))
        (482265 'end of statement')
        {
          unknown _indexOfInterest[158036] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[158037] "expr temp" "temp"
          unknown call_tmp[673634] "expr temp" "maybe param" "maybe type" "temp"
          (673637 'move' call_tmp[673634](360969 call table _mt[243] this[158938]))
          unknown call_tmp[673641] "expr temp" "maybe param" "maybe type" "temp"
          (673644 'move' call_tmp[673641](157927 call(157923 call (partial) allSlots _mt[243] call_tmp[673634])))
          (158046 'move' _iterator[158037](158044 call _getIterator call_tmp[673641]))
          Defer
          {
            {
              (158063 call _freeIterator _iterator[158037])
            }
          }
          { scopeless type
            (158052 'move' _indexOfInterest[158036](158049 call iteratorIndex _iterator[158037]))
          }
          ForLoop[158038]
          {
            unknown slot[158056] "index var" "insert auto destroy"
            (482267 'end of statement')
            (158058 'move' slot[158056] _indexOfInterest[158036])
            (482268 'end of statement' slot[158056])
            {
              unknown aSlot[157935] "dead at end of block" "ref var"
              unknown call_tmp[673648] "expr temp" "maybe param" "maybe type" "temp"
              (673651 'move' call_tmp[673648](360974 call table _mt[243] this[158938]))
              unknown call_tmp[673655] "expr temp" "maybe param" "maybe type" "temp"
              (673658 'move' call_tmp[673655](157934 call(157929 call (partial) table _mt[243] call_tmp[673648]) slot[158056]))
              (544074 'move' aSlot[157935](544073 'addr of' call_tmp[673655]))
              (157938 'end of statement' slot[158056])
              unknown call_tmp[673662] "expr temp" "maybe param" "maybe type" "temp"
              (673665 'move' call_tmp[673662](157945 call(157941 call (partial) isFull _mt[243] aSlot[157935])))
              unknown call_tmp[673667] "expr temp" "maybe param" "maybe type" "temp"
              (673670 'move' call_tmp[673667](158015 call _cond_test call_tmp[673662]))
              if call_tmp[673667]
              {
                unknown tmpKey[157947] "dead at end of block" "insert auto destroy"
                unknown call_tmp[673674] "expr temp" "maybe param" "maybe type" "temp"
                (673677 'move' call_tmp[673674](386897 call idxType _mt[243] this[158938]))
                (544076 'default init var' tmpKey[157947] call_tmp[673674])
                (157950 'end of statement')
                unknown tmpVal[157953] "dead at end of block" "insert auto destroy"
                (544078 'default init var' tmpVal[157953] nothing[7])
                (157956 'end of statement')
                unknown call_tmp[673681] "expr temp" "maybe param" "maybe type" "temp"
                (673684 'move' call_tmp[673681](360980 call table _mt[243] this[158938]))
                (157967 call(157960 call (partial) clearSlot _mt[243] call_tmp[673681]) aSlot[157935] tmpKey[157947] tmpVal[157953])
                (482271 'end of statement' aSlot[157935] tmpKey[157947] tmpVal[157953])
                {
                  unknown _indexOfInterest[157982] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[157983] "expr temp" "temp"
                  unknown call_tmp[673690] "expr temp" "maybe param" "maybe type" "temp"
                  (673693 'move' call_tmp[673690](386905 call _arrs _mt[243] this[158938]))
                  (157992 'move' _iterator[157983](157990 call _getIterator call_tmp[673690]))
                  Defer
                  {
                    {
                      (158008 call _freeIterator _iterator[157983])
                    }
                  }
                  { scopeless type
                    (157997 'move' _indexOfInterest[157982](157994 call iteratorIndex _iterator[157983]))
                  }
                  ForLoop[157984]
                  {
                    unknown arr[158001] "index var" "insert auto destroy"
                    (482276 'end of statement')
                    (158003 'move' arr[158001] _indexOfInterest[157982])
                    (482277 'end of statement' arr[158001])
                    {
                      (157979 call(157974 call (partial) _deinitSlot _mt[243] arr[158001]) slot[158056])
                      (482279 'end of statement' arr[158001] slot[158056])
                    }
                    label _continueLabel[157987]
                    _indexOfInterest[157982]
                    _iterator[157983]
                  }
                  label _breakLabel[157988]
                }
              }
              unknown call_tmp[673699] "expr temp" "maybe param" "maybe type" "temp"
              (673702 'move' call_tmp[673699](360986 call table _mt[243] this[158938]))
              unknown call_tmp[673706] "expr temp" "maybe param" "maybe type" "temp"
              (673709 'move' call_tmp[673706](158025 call(158020 call (partial) table _mt[243] call_tmp[673699]) slot[158056]))
              unknown call_tmp[673713] "expr temp" "maybe param" "maybe type" "temp"
              (673716 'move' call_tmp[673713](158026 call status _mt[243] call_tmp[673706]))
              (158033 call = call_tmp[673713] empty[200414])
              (482282 'end of statement' slot[158056])
            }
            label _continueLabel[158041]
            _indexOfInterest[158036]
            _iterator[158037]
          }
          label _breakLabel[158042]
        }
        unknown call_tmp[673720] "expr temp" "maybe param" "maybe type" "temp"
        (673723 'move' call_tmp[673720](360992 call numEntries _mt[243] this[158938]))
        (158076 call(158071 call (partial) write _mt[243] call_tmp[673720]) 0)
        (482284 'end of statement')
        unknown call_tmp[673729] "expr temp" "maybe param" "maybe type" "temp"
        (673732 'move' call_tmp[673729](360997 call table _mt[243] this[158938]))
        (158083 call(158079 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673729]))
        (482285 'end of statement')
        (158087 call(386911 call (partial) unlockTable _mt[243] this[158938]))
      }
      (158096 'elided on block' 0 tmp[158092])
    }
    (521074 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).dsiMember[158109](arg _mt[158944]:_MT[238], arg this[158942]:DefaultAssociativeDom[158860](?), arg idx[158106] :
  (386916 call idxType _mt[243] this[158942])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521078] "RVV" "temp"
    (158114 call(386920 call (partial) lockTable _mt[243] this[158942]))
    (482287 'end of statement')
    Defer
    {
      {
        (158119 call(386924 call (partial) unlockTable _mt[243] this[158942]))
      }
    }
    unknown call_tmp[673746] "expr temp" "maybe param" "maybe type" "temp"
    (673749 'move' call_tmp[673746](361002 call table _mt[243] this[158942]))
    unknown call_tmp[673753] "maybe param" "maybe type" "temp"
    (673756 'move' call_tmp[673753](158135 call(158130 call (partial) findFullSlot _mt[243] call_tmp[673746]) idx[158106]))
    unknown tmp[158136] "dead at end of block" "insert auto destroy" "temp"
    (544080 'init var' tmp[158136] call_tmp[673753])
    (158143 call _check_tuple_var_decl tmp[158136] 2)
    (482289 'end of statement')
    unknown call_tmp[673758] "maybe param" "maybe type" "temp"
    (673761 'move' call_tmp[673758](158137 call tmp[158136] 0))
    unknown foundFullSlot[158124] "dead at end of block" "insert auto destroy"
    (544082 'init var' foundFullSlot[158124] call_tmp[673758])
    unknown call_tmp[673763] "maybe param" "maybe type" "temp"
    (673766 'move' call_tmp[673763](158140 call tmp[158136] 1))
    unknown slotNum[158126] "dead at end of block" "insert auto destroy"
    (544084 'init var' slotNum[158126] call_tmp[673763])
    (158148 'end of statement')
    (521084 'move' ret[521078](521083 'coerce' foundFullSlot[158124] bool[10]))
    gotoReturn _end_dsiMember[521076] _end_dsiMember[521076]
    (482290 'end of statement' foundFullSlot[158124])
    label _end_dsiMember[521076]
    (521080 return ret[521078])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158860](?).dsiAdd[158159](arg _mt[158948]:_MT[238], arg this[158946]:DefaultAssociativeDom[158860](?), in arg idx[158157]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521090] "RVV" "temp"
    unknown call_tmp[673770] "expr temp" "maybe param" "maybe type" "temp"
    (673773 'move' call_tmp[673770](158164 call(386932 call (partial) _addWrapper _mt[243] this[158946]) idx[158157]))
    unknown call_tmp[673775] "maybe param" "maybe type" "temp"
    (673778 'move' call_tmp[673775](158167 call call_tmp[673770] 1))
    const numInds[158168] "dead at end of block" "const" "insert auto destroy"
    (544086 'init var' numInds[158168] call_tmp[673775])
    (158171 'end of statement')
    (521095 'move' ret[521090](521094 'deref' numInds[158168]))
    gotoReturn _end_dsiAdd[521088] _end_dsiAdd[521088]
    (482292 'end of statement' numInds[158168])
    label _end_dsiAdd[521088]
    (521092 return ret[521090])
  }
  function DefaultAssociativeDom[158860](?)._addWrapper[158184](arg _mt[158952]:_MT[238], arg this[158950]:DefaultAssociativeDom[158860](?), in arg idx[158181] :
  (386939 call idxType _mt[243] this[158950])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521101] "RVV" "temp"
    unknown call_tmp[673782] "maybe param" "maybe type" "temp"
    (673785 'move' call_tmp[673782](158187 call - 1))
    unknown slotNum[158189] "dead at end of block" "insert auto destroy"
    (544088 'init var' slotNum[158189] call_tmp[673782])
    (158192 'end of statement')
    unknown retVal[158195] "dead at end of block" "insert auto destroy"
    (544090 'init var' retVal[158195] 0)
    (158198 'end of statement')
    {
      const tmp[158227] "const" "temp"
      unknown call_tmp[673787] "expr temp" "maybe param" "maybe type" "temp"
      (673790 'move' call_tmp[673787](158224 '_wide_get_locale' this[158950]))
      (158228 'move' tmp[158227](158225 'deref' call_tmp[673787]))
      {
        (158202 call(386944 call (partial) lockTable _mt[243] this[158950]))
        (482294 'end of statement')
        Defer
        {
          {
            (158207 call(386948 call (partial) unlockTable _mt[243] this[158950]))
          }
        }
        unknown tmp[492421] "expr temp" "maybe param" "maybe type" "temp"
        unknown tmp[492446] "maybe param" "temp"
        (492449 'move' tmp[492446](492447 'addr of' slotNum[158189]))
        unknown tmp[492457] "maybe param" "temp"
        (492460 'move' tmp[492457](492458 'addr of' retVal[158195]))
        (492422 'move' tmp[492421](158220 call(386956 call (partial) _add _mt[243] this[158950]) idx[158181]))
        { scopeless
          unknown call_tmp[673800] "expr temp" "maybe param" "maybe type" "temp"
          (673803 'move' call_tmp[673800](492428 call size _mt[243] tmp[492421]))
          unknown call_tmp[673805] "expr temp" "maybe param" "maybe type" "temp"
          (673808 'move' call_tmp[673805](492431 call != 2 call_tmp[673800]))
          unknown call_tmp[673810] "expr temp" "maybe param" "maybe type" "temp"
          (673813 'move' call_tmp[673810](492438 call _cond_test call_tmp[673805]))
          if call_tmp[673810]
          {
            (492434 call compilerError "tuple size must match the number of grouped variables" 0)
          }
        }
        unknown call_tmp[673815] "expr temp" "maybe param" "maybe type" "temp"
        (673818 'move' call_tmp[673815](492444 call tmp[492421] 0))
        (492451 call = tmp[492446] call_tmp[673815])
        unknown call_tmp[673820] "expr temp" "maybe param" "maybe type" "temp"
        (673823 'move' call_tmp[673820](492455 call tmp[492421] 1))
        (492462 call = tmp[492457] call_tmp[673820])
        (482296 'end of statement' slotNum[158189] retVal[158195])
      }
      (158231 'elided on block' 0 tmp[158227])
    }
    unknown call_tmp[673825] "expr temp" "maybe param" "maybe type" "temp"
    (673828 'move' call_tmp[673825](158238 call _build_tuple slotNum[158189] retVal[158195]))
    (521106 'move' ret[521101](521105 'deref' call_tmp[673825]))
    gotoReturn _end__addWrapper[521099] _end__addWrapper[521099]
    (482299 'end of statement' slotNum[158189] retVal[158195])
    label _end__addWrapper[521099]
    (521103 return ret[521101])
  }
  function DefaultAssociativeDom[158860](?)._add[158250](arg _mt[158956]:_MT[238], arg this[158954]:DefaultAssociativeDom[158860](?), in arg idx[158247] :
  (386964 call idxType _mt[243] this[158954])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521112] "RVV" "temp"
    unknown foundFullSlot[158253] "dead at end of block" "insert auto destroy"
    (544092 'init var' foundFullSlot[158253] 0)
    (158256 'end of statement')
    unknown call_tmp[673832] "maybe param" "maybe type" "temp"
    (673835 'move' call_tmp[673832](158259 call - 1))
    unknown slotNum[158261] "dead at end of block" "insert auto destroy"
    (544094 'init var' slotNum[158261] call_tmp[673832])
    (158264 'end of statement')
    unknown tmp[492465] "expr temp" "maybe param" "maybe type" "temp"
    unknown tmp[492490] "maybe param" "temp"
    (492493 'move' tmp[492490](492491 'addr of' foundFullSlot[158253]))
    unknown tmp[492501] "maybe param" "temp"
    (492504 'move' tmp[492501](492502 'addr of' slotNum[158261]))
    unknown call_tmp[673839] "expr temp" "maybe param" "maybe type" "temp"
    (673842 'move' call_tmp[673839](361007 call table _mt[243] this[158954]))
    (492466 'move' tmp[492465](158278 call(158273 call (partial) findAvailableSlot _mt[243] call_tmp[673839]) idx[158247]))
    { scopeless
      unknown call_tmp[673848] "expr temp" "maybe param" "maybe type" "temp"
      (673851 'move' call_tmp[673848](492472 call size _mt[243] tmp[492465]))
      unknown call_tmp[673853] "expr temp" "maybe param" "maybe type" "temp"
      (673856 'move' call_tmp[673853](492475 call != 2 call_tmp[673848]))
      unknown call_tmp[673858] "expr temp" "maybe param" "maybe type" "temp"
      (673861 'move' call_tmp[673858](492482 call _cond_test call_tmp[673853]))
      if call_tmp[673858]
      {
        (492478 call compilerError "tuple size must match the number of grouped variables" 0)
      }
    }
    unknown call_tmp[673863] "expr temp" "maybe param" "maybe type" "temp"
    (673866 'move' call_tmp[673863](492488 call tmp[492465] 0))
    (492495 call = tmp[492490] call_tmp[673863])
    unknown call_tmp[673868] "expr temp" "maybe param" "maybe type" "temp"
    (673871 'move' call_tmp[673868](492499 call tmp[492465] 1))
    (492506 call = tmp[492501] call_tmp[673868])
    (482302 'end of statement' foundFullSlot[158253] slotNum[158261])
    unknown call_tmp[673873] "expr temp" "maybe param" "maybe type" "temp"
    (673876 'move' call_tmp[673873](158365 call _cond_test foundFullSlot[158253]))
    if call_tmp[673873]
    {
      unknown call_tmp[673878] "expr temp" "maybe param" "maybe type" "temp"
      (673881 'move' call_tmp[673878](158286 call _build_tuple slotNum[158261] 0))
      (521117 'move' ret[521112](521116 'deref' call_tmp[673878]))
      gotoReturn _end__add[521110] _end__add[521110]
      (482305 'end of statement' slotNum[158261])
    }
    {
      unknown call_tmp[673885] "expr temp" "maybe param" "maybe type" "temp"
      (673888 'move' call_tmp[673885](361012 call table _mt[243] this[158954]))
      (158301 call(158294 call (partial) fillSlot _mt[243] call_tmp[673885]) slotNum[158261] idx[158247] none[57])
      (482307 'end of statement' slotNum[158261])
      unknown call_tmp[673894] "expr temp" "maybe param" "maybe type" "temp"
      (673897 'move' call_tmp[673894](361017 call numEntries _mt[243] this[158954]))
      (158310 call(158305 call (partial) add _mt[243] call_tmp[673894]) 1)
      (482309 'end of statement')
      {
        unknown _indexOfInterest[158325] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[158326] "expr temp" "temp"
        unknown call_tmp[673903] "expr temp" "maybe param" "maybe type" "temp"
        (673906 'move' call_tmp[673903](386976 call _arrs _mt[243] this[158954]))
        (158335 'move' _iterator[158326](158333 call _getIterator call_tmp[673903]))
        Defer
        {
          {
            (158351 call _freeIterator _iterator[158326])
          }
        }
        { scopeless type
          (158340 'move' _indexOfInterest[158325](158337 call iteratorIndex _iterator[158326]))
        }
        ForLoop[158327]
        {
          unknown arr[158344] "index var" "insert auto destroy"
          (482311 'end of statement')
          (158346 'move' arr[158344] _indexOfInterest[158325])
          (482312 'end of statement' arr[158344])
          {
            (158322 call(158317 call (partial) _defaultInitSlot _mt[243] arr[158344]) slotNum[158261])
            (482314 'end of statement' arr[158344] slotNum[158261])
          }
          label _continueLabel[158330]
          _indexOfInterest[158325]
          _iterator[158326]
        }
        label _breakLabel[158331]
      }
      unknown call_tmp[673910] "expr temp" "maybe param" "maybe type" "temp"
      (673913 'move' call_tmp[673910](158361 call _build_tuple slotNum[158261] 1))
      (521122 'move' ret[521112](521121 'deref' call_tmp[673910]))
      gotoReturn _end__add[521110] _end__add[521110]
      (482317 'end of statement' slotNum[158261])
    }
    label _end__add[521110]
    (521114 return ret[521112])
  }
  function DefaultAssociativeDom[158860](?).dsiRemove[158377](arg _mt[158960]:_MT[238], arg this[158958]:DefaultAssociativeDom[158860](?), arg idx[158374] :
  (386983 call idxType _mt[243] this[158958])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521128] "RVV" "temp"
    unknown retval[158380] "dead at end of block" "insert auto destroy"
    (544096 'default init var' retval[158380] int(64)[13])
    (158383 'end of statement')
    {
      const tmp[158522] "const" "temp"
      unknown call_tmp[673917] "expr temp" "maybe param" "maybe type" "temp"
      (673920 'move' call_tmp[673917](158519 '_wide_get_locale' this[158958]))
      (158523 'move' tmp[158522](158520 'deref' call_tmp[673917]))
      {
        (158388 call(386988 call (partial) lockTable _mt[243] this[158958]))
        (482319 'end of statement')
        Defer
        {
          {
            (158393 call(386992 call (partial) unlockTable _mt[243] this[158958]))
          }
        }
        unknown call_tmp[673928] "expr temp" "maybe param" "maybe type" "temp"
        (673931 'move' call_tmp[673928](361023 call table _mt[243] this[158958]))
        unknown call_tmp[673935] "maybe param" "maybe type" "temp"
        (673938 'move' call_tmp[673935](158409 call(158404 call (partial) findFullSlot _mt[243] call_tmp[673928]) idx[158374]))
        const tmp[158410] "dead at end of block" "const" "insert auto destroy" "temp"
        (544098 'init var' tmp[158410] call_tmp[673935])
        (158417 call _check_tuple_var_decl tmp[158410] 2)
        (482321 'end of statement')
        unknown call_tmp[673940] "maybe param" "maybe type" "temp"
        (673943 'move' call_tmp[673940](158411 call tmp[158410] 0))
        const foundSlot[158398] "dead at end of block" "const" "insert auto destroy"
        (544100 'init var' foundSlot[158398] call_tmp[673940])
        unknown call_tmp[673945] "maybe param" "maybe type" "temp"
        (673948 'move' call_tmp[673945](158414 call tmp[158410] 1))
        const slotNum[158400] "dead at end of block" "const" "insert auto destroy"
        (544102 'init var' slotNum[158400] call_tmp[673945])
        (158422 'end of statement')
        unknown call_tmp[673950] "expr temp" "maybe param" "maybe type" "temp"
        (673953 'move' call_tmp[673950](158508 call _cond_test foundSlot[158398]))
        if call_tmp[673950]
        {
          unknown tmpIdx[158425] "dead at end of block" "insert auto destroy"
          unknown call_tmp[673957] "expr temp" "maybe param" "maybe type" "temp"
          (673960 'move' call_tmp[673957](386999 call idxType _mt[243] this[158958]))
          (544104 'default init var' tmpIdx[158425] call_tmp[673957])
          (158428 'end of statement')
          unknown tmpVal[158431] "dead at end of block" "insert auto destroy"
          (544106 'default init var' tmpVal[158431] nothing[7])
          (158434 'end of statement')
          unknown call_tmp[673964] "expr temp" "maybe param" "maybe type" "temp"
          (673967 'move' call_tmp[673964](361028 call table _mt[243] this[158958]))
          (158443 call(158436 call (partial) clearSlot _mt[243] call_tmp[673964]) slotNum[158400] tmpIdx[158425] tmpVal[158431])
          (482322 'end of statement' slotNum[158400] tmpIdx[158425] tmpVal[158431])
          unknown call_tmp[673973] "expr temp" "maybe param" "maybe type" "temp"
          (673976 'move' call_tmp[673973](361033 call numEntries _mt[243] this[158958]))
          (158451 call(158446 call (partial) sub _mt[243] call_tmp[673973]) 1)
          (482326 'end of statement')
          {
            unknown _indexOfInterest[158464] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[158465] "expr temp" "temp"
            unknown call_tmp[673982] "expr temp" "maybe param" "maybe type" "temp"
            (673985 'move' call_tmp[673982](387007 call _arrs _mt[243] this[158958]))
            (158474 'move' _iterator[158465](158472 call _getIterator call_tmp[673982]))
            Defer
            {
              {
                (158490 call _freeIterator _iterator[158465])
              }
            }
            { scopeless type
              (158479 'move' _indexOfInterest[158464](158476 call iteratorIndex _iterator[158465]))
            }
            ForLoop[158466]
            {
              unknown arr[158483] "index var" "insert auto destroy"
              (482328 'end of statement')
              (158485 'move' arr[158483] _indexOfInterest[158464])
              (482329 'end of statement' arr[158483])
              {
                (158461 call(158456 call (partial) _deinitSlot _mt[243] arr[158483]) slotNum[158400])
                (482331 'end of statement' arr[158483] slotNum[158400])
              }
              label _continueLabel[158469]
              _indexOfInterest[158464]
              _iterator[158465]
            }
            label _breakLabel[158470]
          }
          (158499 call = retval[158380] 1)
          (482334 'end of statement' retval[158380])
        }
        {
          (158504 call = retval[158380] 0)
          (482336 'end of statement' retval[158380])
        }
        unknown call_tmp[673991] "expr temp" "maybe param" "maybe type" "temp"
        (673994 'move' call_tmp[673991](361039 call table _mt[243] this[158958]))
        (158517 call(158513 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673991]))
      }
      (158526 'elided on block' 0 tmp[158522])
    }
    (521133 'move' ret[521128](521132 'deref' retval[158380]))
    gotoReturn _end_dsiRemove[521126] _end_dsiRemove[521126]
    (482339 'end of statement' retval[158380])
    label _end_dsiRemove[521126]
    (521130 return ret[521128])
  }
  function DefaultAssociativeDom[158860](?).dsiRequestCapacity[158541](arg _mt[158964]:_MT[238], arg this[158962]:DefaultAssociativeDom[158860](?), arg numKeys[158538]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[158629] "const" "temp"
      unknown call_tmp[673998] "expr temp" "maybe param" "maybe type" "temp"
      (674001 'move' call_tmp[673998](158626 '_wide_get_locale' this[158962]))
      (158630 'move' tmp[158629](158627 'deref' call_tmp[673998]))
      {
        unknown call_tmp[674005] "expr temp" "maybe param" "maybe type" "temp"
        (674008 'move' call_tmp[674005](361044 call numEntries _mt[243] this[158962]))
        unknown call_tmp[674012] "maybe param" "maybe type" "temp"
        (674015 'move' call_tmp[674012](158549 call(158545 call (partial) read _mt[243] call_tmp[674005])))
        unknown entries[158550] "dead at end of block" "insert auto destroy"
        (544108 'init var' entries[158550] call_tmp[674012])
        (158553 'end of statement')
        unknown call_tmp[674017] "expr temp" "maybe param" "maybe type" "temp"
        (674020 'move' call_tmp[674017](158557 call < entries[158550] numKeys[158538]))
        unknown call_tmp[674022] "expr temp" "maybe param" "maybe type" "temp"
        (674025 'move' call_tmp[674022](158622 call _cond_test call_tmp[674017]))
        if call_tmp[674022]
        {
          (158561 call(387018 call (partial) lockTable _mt[243] this[158962]))
          (482341 'end of statement')
          Defer
          {
            {
              (158566 call(387022 call (partial) unlockTable _mt[243] this[158962]))
            }
          }
          unknown call_tmp[674033] "expr temp" "maybe param" "maybe type" "temp"
          (674036 'move' call_tmp[674033](361049 call table _mt[243] this[158962]))
          (158577 call(158572 call (partial) requestCapacity _mt[243] call_tmp[674033]) numKeys[158538])
        }
        {
          (158619 call warning "Requested capacity (" numKeys[158538] ") " "is less than current size (" entries[158550] ")")
          (482344 'end of statement' entries[158550])
        }
      }
      (158633 'elided on block' 0 tmp[158629])
    }
    (521137 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).dsiSorted[158644](arg _mt[158968]:_MT[238], arg this[158966]:DefaultAssociativeDom[158860](?), arg comparator[158642]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521141] "RVV" "temp"
    unknown tableCopy[158685] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter8[583009](arg iterator[583011]:_any[178](?), arg this[583047]:DefaultAssociativeDom[158860](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[583058] "RVV" "temp"
      {
        unknown _indexOfInterest[583016] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[583017] "expr temp" "temp"
        (583026 'move' _iterator[583017](583024 call _getIterator iterator[583011]))
        Defer
        {
          {
            (583040 call _freeIterator _iterator[583017])
          }
        }
        { scopeless type
          (583031 'move' _indexOfInterest[583016](583028 call iteratorIndex _iterator[583017]))
        }
        ForLoop[583018] for-expr
        {
          unknown slot[158683] "index var" "insert auto destroy" "no doc"
          (583051 'end of statement')
          (583035 'move' slot[158683] _indexOfInterest[583016])
          (583052 'end of statement' slot[158683])
          {
            {
              unknown yret[583062] "YVV" "temp"
              unknown call_tmp[583071] "expr temp" "maybe param" "maybe type" "temp"
              (583074 'move' call_tmp[583071](361059 call table _mt[243] this[583047]))
              unknown call_tmp[583078] "expr temp" "maybe param" "maybe type" "temp"
              (583081 'move' call_tmp[583078](158677 call(158672 call (partial) table _mt[243] call_tmp[583071]) slot[158683]))
              unknown call_tmp[583085] "expr temp" "maybe param" "maybe type" "temp"
              (583088 'move' call_tmp[583085](158678 call key _mt[243] call_tmp[583078]))
              (583065 'move' yret[583062](583064 'deref' call_tmp[583085]))
              (583067 yield yret[583062])
              (583054 'end of statement' slot[158683])
            }
          }
          label _continueLabel[583021]
          _indexOfInterest[583016]
          _iterator[583017]
        }
        label _breakLabel[583022]
      }
      (583060 return ret[583058])
    }
    function chpl__forexpr8[582989](arg iterExpr[582992]:_any[178](?), arg this[582996]:DefaultAssociativeDom[158860](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[583093] "RVV" "temp"
      unknown _iterator[582999] "expr temp" "maybe ref" "temp"
      (583001 'move' _iterator[582999] iterExpr[582992])
      unknown call_tmp[583100] "expr temp" "maybe param" "maybe type" "temp"
      (583103 'move' call_tmp[583100](583004 call chpl__loopexpr_iter8 _iterator[582999] this[582996]))
      (583098 'move' ret[583093](583097 'deref' call_tmp[583100]))
      (583095 return ret[583093])
    }
    unknown call_tmp[583107] "expr temp" "maybe param" "maybe type" "temp"
    (583110 'move' call_tmp[583107](158670 call(387035 call (partial) _fullSlots _mt[243] this[158966])))
    unknown call_tmp[583112] "maybe param" "maybe type" "temp"
    (583115 'move' call_tmp[583112](582994 call chpl__forexpr8 call_tmp[583107] this[158966]))
    (583119 'iterator record set shape' call_tmp[583112] call_tmp[583107] 1)
    unknown call_tmp[674040] "expr temp" "maybe param" "maybe type" "temp"
    (674043 'move' call_tmp[674040](158651 call chpl_build_low_bounded_range 0))
    unknown call_tmp[674047] "expr temp" "maybe param" "maybe type" "temp"
    (674050 'move' call_tmp[674047](361054 call numEntries _mt[243] this[158966]))
    unknown call_tmp[674054] "expr temp" "maybe param" "maybe type" "temp"
    (674057 'move' call_tmp[674054](158658 call(158654 call (partial) read _mt[243] call_tmp[674047])))
    unknown call_tmp[674059] "expr temp" "maybe param" "maybe type" "temp"
    (674062 'move' call_tmp[674059](158659 call # call_tmp[674040] call_tmp[674054]))
    unknown call_tmp[674064] "expr temp" "maybe param" "maybe type" "temp"
    (674067 'move' call_tmp[674064](158663 call chpl__ensureDomainExpr call_tmp[674059]))
    unknown call_tmp[674071] "expr temp" "maybe param" "maybe type" "temp"
    (674074 'move' call_tmp[674071](387030 call idxType _mt[243] this[158966]))
    unknown call_tmp[674076] "maybe param" "maybe type" "temp"
    (674079 'move' call_tmp[674076](158665 call chpl__buildArrayRuntimeType call_tmp[674064] call_tmp[674071]))
    (544110 'init var' tableCopy[158685] call_tmp[583112] call_tmp[674076])
    (158688 'end of statement')
    (158694 call sort tableCopy[158685](comparator = comparator[158642]))
    (482346 'end of statement' tableCopy[158685])
    {
      unknown _indexOfInterest[158701] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158702] "expr temp" "temp"
      (158711 'move' _iterator[158702](158709 call _getIterator tableCopy[158685]))
      Defer
      {
        {
          (158727 call _freeIterator _iterator[158702])
        }
      }
      { scopeless type
        (158716 'move' _indexOfInterest[158701](158713 call iteratorIndex _iterator[158702]))
      }
      ForLoop[158703]
      {
        unknown ind[158720] "index var" "insert auto destroy"
        (482349 'end of statement')
        (158722 'move' ind[158720] _indexOfInterest[158701])
        (482350 'end of statement' ind[158720])
        unknown yret[521145] "YVV" "temp"
        (521148 'move' yret[521145](521147 'deref' ind[158720]))
        (521150 yield yret[521145])
        (482352 'end of statement' ind[158720])
        label _continueLabel[158706]
        _indexOfInterest[158701]
        _iterator[158702]
      }
      label _breakLabel[158707]
    }
    (521143 return ret[521141])
    (355214 'used modules list'(158647 'use' Sort[267885]))
  }
  function DefaultAssociativeDom[158860](?)._fullSlots[158738](arg _mt[158972]:_MT[238], arg this[158970]:DefaultAssociativeDom[158860](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521154] "RVV" "temp"
    {
      unknown _indexOfInterest[158765] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158766] "expr temp" "temp"
      unknown call_tmp[674083] "expr temp" "maybe param" "maybe type" "temp"
      (674086 'move' call_tmp[674083](361064 call table _mt[243] this[158970]))
      unknown call_tmp[674090] "expr temp" "maybe param" "maybe type" "temp"
      (674093 'move' call_tmp[674090](158746 call(158742 call (partial) allSlots _mt[243] call_tmp[674083])))
      (158775 'move' _iterator[158766](158773 call _getIterator call_tmp[674090]))
      Defer
      {
        {
          (158792 call _freeIterator _iterator[158766])
        }
      }
      { scopeless type
        (158781 'move' _indexOfInterest[158765](158778 call iteratorIndex _iterator[158766]))
      }
      ForLoop[158767]
      {
        unknown slot[158785] "index var" "insert auto destroy"
        (482355 'end of statement')
        (158787 'move' slot[158785] _indexOfInterest[158765])
        (482356 'end of statement' slot[158785])
        {
          unknown call_tmp[674097] "expr temp" "maybe param" "maybe type" "temp"
          (674100 'move' call_tmp[674097](361069 call table _mt[243] this[158970]))
          unknown call_tmp[674104] "expr temp" "maybe param" "maybe type" "temp"
          (674107 'move' call_tmp[674104](158755 call(158750 call (partial) isSlotFull _mt[243] call_tmp[674097]) slot[158785]))
          unknown call_tmp[674109] "expr temp" "maybe param" "maybe type" "temp"
          (674112 'move' call_tmp[674109](158760 call _cond_test call_tmp[674104]))
          if call_tmp[674109]
          {
            unknown yret[521158] "YVV" "temp"
            (521161 'move' yret[521158](521160 'deref' slot[158785]))
            (521163 yield yret[521158])
            (482358 'end of statement' slot[158785])
          }
        }
        label _continueLabel[158770]
        _indexOfInterest[158765]
        _iterator[158766]
      }
      label _breakLabel[158771]
    }
    (521156 return ret[521154])
  }
  function DefaultAssociativeDom[158860](?).dsiHasSingleLocalSubdomain[158804](arg _mt[158976]:_MT[238], arg this[158974]:DefaultAssociativeDom[158860](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521167] "RVV" "param" "temp"
    (521172 'move' ret[521167](521171 'deref' 1))
    (521169 return ret[521167])
  }
  function DefaultAssociativeDom[158860](?).dsiLocalSubdomain[158818](arg _mt[158980]:_MT[238], arg this[158978]:DefaultAssociativeDom[158860](?), arg loc[158815]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521176] "RVV" "temp"
    unknown call_tmp[674114] "expr temp" "maybe param" "maybe type" "temp"
    (674117 'move' call_tmp[674114](158821 '_wide_get_locale' this[158978]))
    unknown call_tmp[674119] "expr temp" "maybe param" "maybe type" "temp"
    (674122 'move' call_tmp[674119](158822 call chpl_localeID_to_locale call_tmp[674114]))
    unknown call_tmp[674124] "expr temp" "maybe param" "maybe type" "temp"
    (674127 'move' call_tmp[674124](158825 call == call_tmp[674119] loc[158815]))
    unknown call_tmp[674129] "expr temp" "maybe param" "maybe type" "temp"
    (674132 'move' call_tmp[674129](158852 call _cond_test call_tmp[674124]))
    if call_tmp[674129]
    {
      unknown call_tmp[674134] "expr temp" "maybe param" "maybe type" "temp"
      (674137 'move' call_tmp[674134](158831 call _to_unmanaged this[158978]))
      unknown call_tmp[674139] "expr temp" "maybe param" "maybe type" "temp"
      (674142 'move' call_tmp[674139](158833 call _getDomain call_tmp[674134]))
      (521181 'move' ret[521176](521180 'deref' call_tmp[674139]))
      gotoReturn _end_dsiLocalSubdomain[521174] _end_dsiLocalSubdomain[521174]
    }
    {
      unknown a[158844] "dead at end of block" "insert auto destroy"
      unknown call_tmp[674146] "expr temp" "maybe param" "maybe type" "temp"
      (674149 'move' call_tmp[674146](387050 call idxType _mt[243] this[158978]))
      unknown call_tmp[674153] "expr temp" "maybe param" "maybe type" "temp"
      (674156 'move' call_tmp[674153](387055 call parSafe _mt[243] this[158978]))
      unknown call_tmp[674158] "expr temp" "maybe param" "maybe type" "temp"
      (674161 'move' call_tmp[674158](158842 call chpl__buildDomainRuntimeType defaultDist[94058] call_tmp[674146](parSafe = call_tmp[674153])))
      (544112 'default init var' a[158844] call_tmp[674158])
      (158847 'end of statement')
      (521186 'move' ret[521176](521185 'deref' a[158844]))
      gotoReturn _end_dsiLocalSubdomain[521174] _end_dsiLocalSubdomain[521174]
      (482362 'end of statement' a[158844])
    }
    label _end_dsiLocalSubdomain[521174]
    (521178 return ret[521176])
  }
  function DefaultAssociativeDom[158860](?).super[810478](arg _mt[810480]:_MT[238], arg this[810482]:DefaultAssociativeDom[158860](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810492] "RVV" "temp"
    unknown call_tmp[810499] "expr temp" "maybe param" "maybe type" "temp"
    (810502 'move' call_tmp[810499](810486 '.v' this[810482] c"super"))
    (810497 'move' ret[810492](810496 'deref' call_tmp[810499]))
    (810494 return ret[810492])
  }
  function DefaultAssociativeDom[810509](?).idxType[810504](arg _mt[810506]:_MT[238], arg this[810511]:DefaultAssociativeDom[810509](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810546] "RVV" "temp" "type variable"
    unknown borrowOfThis[810513]
    (810538 'end of statement')
    (810515 'move' borrowOfThis[810513](810518 call _cast _borrowedNonNilable[214](?) this[810511]))
    (810539 'end of statement' borrowOfThis[810513])
    unknown call_tmp[810560] "expr temp" "maybe param" "maybe type" "temp"
    (810563 'move' call_tmp[810560](810528 'is bound' borrowOfThis[810513] c"idxType"))
    if call_tmp[810560]
    {
      unknown call_tmp[810565] "expr temp" "maybe param" "maybe type" "temp"
      (810568 'move' call_tmp[810565](810523 '.v' borrowOfThis[810513] c"idxType"))
      unknown call_tmp[810570] "expr temp" "maybe param" "maybe type" "temp"
      (810573 'move' call_tmp[810570](810524 call chpl_checkLegalTypeFieldAccessor this[810511] call_tmp[810565] "idxType"))
      (810551 'move' ret[810546](810550 'deref' call_tmp[810570]))
      gotoReturn _end_idxType[810544] _end_idxType[810544]
      (810541 'end of statement' borrowOfThis[810513])
    }
    {
      (810556 'move' ret[810546](810555 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810544] _end_idxType[810544]
    }
    label _end_idxType[810544]
    (810548 return ret[810546])
  }
  function DefaultAssociativeDom[810509](?).idxType[810575](arg _mt[810577]:_MT[238], arg this[810579]:DefaultAssociativeDom[810509](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810614] "RVV" "temp" "type variable"
    unknown borrowOfThis[810581] "type variable"
    (810606 'end of statement')
    (810583 'move' borrowOfThis[810581](810586 call _cast _borrowedNonNilable[214](?) this[810579]))
    (810607 'end of statement' borrowOfThis[810581])
    unknown call_tmp[810628] "expr temp" "maybe param" "maybe type" "temp"
    (810631 'move' call_tmp[810628](810596 'is bound' borrowOfThis[810581] c"idxType"))
    if call_tmp[810628]
    {
      unknown call_tmp[810633] "expr temp" "maybe param" "maybe type" "temp"
      (810636 'move' call_tmp[810633](810591 '.v' borrowOfThis[810581] c"idxType"))
      unknown call_tmp[810638] "expr temp" "maybe param" "maybe type" "temp"
      (810641 'move' call_tmp[810638](810592 call chpl_checkLegalTypeFieldAccessor this[810579] call_tmp[810633] "idxType"))
      (810619 'move' ret[810614](810618 'deref' call_tmp[810638]))
      gotoReturn _end_idxType[810612] _end_idxType[810612]
      (810609 'end of statement' borrowOfThis[810581])
    }
    {
      (810624 'move' ret[810614](810623 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810612] _end_idxType[810612]
    }
    label _end_idxType[810612]
    (810616 return ret[810614])
  }
  function DefaultAssociativeDom[810509](?).parSafe[810643](arg _mt[810645]:_MT[238], arg this[810647]:DefaultAssociativeDom[810509](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810678] "RVV" "param" "temp"
    unknown borrowOfThis[810649]
    (810670 'end of statement')
    (810651 'move' borrowOfThis[810649](810654 call _cast _borrowedNonNilable[214](?) this[810647]))
    (810671 'end of statement' borrowOfThis[810649])
    unknown call_tmp[810692] "expr temp" "maybe param" "maybe type" "temp"
    (810695 'move' call_tmp[810692](810660 'is bound' borrowOfThis[810649] c"parSafe"))
    if call_tmp[810692]
    {
      unknown call_tmp[810697] "expr temp" "maybe param" "maybe type" "temp"
      (810700 'move' call_tmp[810697](810659 '.' borrowOfThis[810649] c"parSafe"))
      (810683 'move' ret[810678](810682 'deref' call_tmp[810697]))
      gotoReturn _end_parSafe[810676] _end_parSafe[810676]
      (810673 'end of statement' borrowOfThis[810649])
    }
    {
      (810688 'move' ret[810678](810687 'deref' ?[260]))
      gotoReturn _end_parSafe[810676] _end_parSafe[810676]
    }
    label _end_parSafe[810676]
    (810680 return ret[810678])
  }
  function DefaultAssociativeDom[810509](?).parSafe[810702](arg _mt[810704]:_MT[238], arg this[810706]:DefaultAssociativeDom[810509](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810737] "RVV" "param" "temp"
    unknown borrowOfThis[810708] "type variable"
    (810729 'end of statement')
    (810710 'move' borrowOfThis[810708](810713 call _cast _borrowedNonNilable[214](?) this[810706]))
    (810730 'end of statement' borrowOfThis[810708])
    unknown call_tmp[810751] "expr temp" "maybe param" "maybe type" "temp"
    (810754 'move' call_tmp[810751](810719 'is bound' borrowOfThis[810708] c"parSafe"))
    if call_tmp[810751]
    {
      unknown call_tmp[810756] "expr temp" "maybe param" "maybe type" "temp"
      (810759 'move' call_tmp[810756](810718 '.' borrowOfThis[810708] c"parSafe"))
      (810742 'move' ret[810737](810741 'deref' call_tmp[810756]))
      gotoReturn _end_parSafe[810735] _end_parSafe[810735]
      (810732 'end of statement' borrowOfThis[810708])
    }
    {
      (810747 'move' ret[810737](810746 'deref' ?[260]))
      gotoReturn _end_parSafe[810735] _end_parSafe[810735]
    }
    label _end_parSafe[810735]
    (810739 return ret[810737])
  }
  function DefaultAssociativeDom[158860](?).dist[810761](arg _mt[810763]:_MT[238], arg this[810765]:DefaultAssociativeDom[158860](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810775] "RVV" "temp"
    unknown call_tmp[810782] "expr temp" "maybe param" "maybe type" "temp"
    (810785 'move' call_tmp[810782](810769 '.' this[810765] c"dist"))
    (810780 'move' ret[810775](810779 'addr of' call_tmp[810782]))
    (810777 return ret[810775])
  }
  function DefaultAssociativeDom[158860](?).numEntries[810787](arg _mt[810789]:_MT[238], arg this[810791]:DefaultAssociativeDom[158860](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810801] "RVV" "temp"
    unknown call_tmp[810808] "expr temp" "maybe param" "maybe type" "temp"
    (810811 'move' call_tmp[810808](810795 '.' this[810791] c"numEntries"))
    (810806 'move' ret[810801](810805 'addr of' call_tmp[810808]))
    (810803 return ret[810801])
  }
  function DefaultAssociativeDom[158860](?).tableLock[810813](arg _mt[810815]:_MT[238], arg this[810817]:DefaultAssociativeDom[158860](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810827] "RVV" "temp"
    unknown call_tmp[810834] "expr temp" "maybe param" "maybe type" "temp"
    (810837 'move' call_tmp[810834](810821 '.' this[810817] c"tableLock"))
    (810832 'move' ret[810827](810831 'addr of' call_tmp[810834]))
    (810829 return ret[810827])
  }
  function DefaultAssociativeDom[158860](?).table[810839](arg _mt[810841]:_MT[238], arg this[810843]:DefaultAssociativeDom[158860](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810853] "RVV" "temp"
    unknown call_tmp[810860] "expr temp" "maybe param" "maybe type" "temp"
    (810863 'move' call_tmp[810860](810847 '.' this[810843] c"table"))
    (810858 'move' ret[810853](810857 'addr of' call_tmp[810860]))
    (810855 return ret[810853])
  }
  function DefaultAssociativeDom[158860](?).writeThis[810865](arg _mt[810869]:_MT[238], arg this[810867]:DefaultAssociativeDom[158860](?), arg f[810868]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810874 call writeThisDefaultImpl f[810868] this[810867])
    (810879 return _void[55])
  }
  function DefaultAssociativeDom[158860](?).readThis[810881](arg _mt[810885]:_MT[238], arg this[810883]:DefaultAssociativeDom[158860](?), arg f[810884]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810889 call readThisDefaultImpl f[810884] this[810883])
    (810895 return _void[55])
  }
  type DefaultAssociativeDom[158860](?) val super[355745]:BaseAssociativeDom[148816] "super class" unknown idxType[156494] "type variable" unknown parSafe[156498] "param" bool[10] val dist[156504]:unmanaged DefaultDist[415502] unmanaged DefaultDist[415502] unknown numEntries[156512](156511 call chpl__processorAtomicType int(64)[13]) unknown tableLock[156522](156519 IfExpr  parSafe[156498] then
  { scopeless
    chpl_LocalSpinlock[187398]
  } else
  { scopeless
    nothing[7]
  } ) unknown table[156531](156530 call chpl__hashtable[204521](?) idxType[156494] nothing[7])
  type DefaultAssociativeDom[810509](?)
  type unmanaged DefaultAssociativeDom[415529](?)
  type DefaultAssociativeDom[378083](?)
  function DefaultAssociativeArr[161422](?).init[159035](arg _mt[161426]:_MT[238], arg this[161424]:DefaultAssociativeArr[161422](?), arg eltType[159033]:_any[178](?), arg idxType[159037]:_any[178](?), param arg parSafeDom[159039]:_any[178](?), arg dom[159048] :
  (159046 call unmanaged DefaultAssociativeDom[415529](?) idxType[159037](parSafe = parSafeDom[159039])), param arg initElts[159051]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462107] "temporary of super field" "temp"
    (462109 'move' super_tmp[462107](462106 '.v' this[161424] c"super"))
    (159060 call(159054 call (partial) init _mt[243] super_tmp[462107])(eltType = eltType[159033]))
    (482364 'end of statement')
    unknown tmp[462112] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492509] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[674165] "expr temp" "maybe param" "maybe type" "temp"
      (674168 'move' call_tmp[674165](462114 '.v' this[161424] c"super"))
      (492513 'move' call_type_tmp[492509](462117 'typeof' call_tmp[674165]))
    }
    (462118 'move' tmp[462112] call_type_tmp[492509])
    unknown call_tmp[674170] "maybe param" "maybe type" "temp"
    (674173 'move' call_tmp[674170](462123 'cast' tmp[462112] this[161424]))
    unknown chpl__thisAsParent[462120] "dead at end of block" "insert auto destroy" "temp"
    (544114 'init var' chpl__thisAsParent[462120] call_tmp[674170] tmp[462112])
    (462126 'setcid' chpl__thisAsParent[462120])
    (482365 'end of statement')
    unknown tmp[462128] "temp" "type variable"
    (462130 'move' tmp[462128] idxType[159037])
    (462132 'init field' this[161424] c"idxType" tmp[462128])
    unknown call_tmp[674175] "expr temp" "maybe param" "maybe type" "temp"
    (674178 'move' call_tmp[674175](462137 call _cast bool[10] parSafeDom[159039]))
    (462139 'init field' this[161424] c"parSafeDom" call_tmp[674175])
    (482366 'end of statement')
    unknown call_tmp[674180] "expr temp" "maybe param" "maybe type" "temp"
    (674183 'move' call_tmp[674180](462155 '.v' this[161424] c"idxType"))
    unknown call_tmp[674185] "expr temp" "maybe param" "maybe type" "temp"
    (674188 'move' call_tmp[674185](462158 '.v' this[161424] c"parSafeDom"))
    unknown call_tmp[674190] "maybe param" "maybe type" "temp"
    (674193 'move' call_tmp[674190](462145 call unmanaged DefaultAssociativeDom[415529](?) call_tmp[674180](parSafe = call_tmp[674185])))
    unknown tmp[462142] "temp"
    (462149 'init var' tmp[462142] dom[159048] call_tmp[674190])
    (462151 'init field' this[161424] c"dom" tmp[462142])
    (482367 'end of statement')
    unknown call_tmp[674197] "expr temp" "maybe param" "maybe type" "temp"
    (674200 'move' call_tmp[674197](159090 call table _mt[243] dom[159048]))
    unknown call_tmp[674204] "maybe param" "maybe type" "temp"
    (674207 'move' call_tmp[674204](159095 call tableSize _mt[243] call_tmp[674197]))
    unknown tableSize[159098] "dead at end of block" "insert auto destroy"
    (544116 'init var' tableSize[159098] call_tmp[674204])
    (159101 'end of statement')
    val tmp[462161]:int(64)[13] "temp"
    (462164 'default init var' tmp[462161] int(64)[13])
    (462168 '.=' this[161424] c"dataSize" tmp[462161])
    (482368 'end of statement')
    unknown call_tmp[674211] "expr temp" "maybe param" "maybe type" "temp"
    (674214 'move' call_tmp[674211](159107 call table _mt[243] dom[159048]))
    unknown call_tmp[674218] "maybe param" "maybe type" "temp"
    (674221 'move' call_tmp[674218](159118 call(159112 call (partial) allocateData _mt[243] call_tmp[674211]) tableSize[159098] eltType[159033]))
    unknown call_tmp[674223] "expr temp" "maybe param" "maybe type" "temp"
    (674226 'move' call_tmp[674223](462183 '.v' this[161424] c"eltType"))
    unknown call_tmp[674228] "maybe param" "maybe type" "temp"
    (674231 'move' call_tmp[674228](462175 call _ddata[11695](?) call_tmp[674223]))
    unknown tmp[462172] "temp"
    (462177 'init var' tmp[462172] call_tmp[674218] call_tmp[674228])
    (462179 'init field' this[161424] c"data" tmp[462172])
    (482369 'end of statement' tableSize[159098])
    unknown call_tmp[674233] "expr temp" "maybe param" "maybe type" "temp"
    (674236 'move' call_tmp[674233](462197 '.v' this[161424] c"eltType"))
    unknown call_tmp[674238] "maybe param" "maybe type" "temp"
    (674241 'move' call_tmp[674238](462189 call _ddata[11695](?) call_tmp[674233]))
    unknown tmp[462186] "temp"
    (462191 'init var' tmp[462186] nil[44] call_tmp[674238])
    (462193 'init field' this[161424] c"tmpData" tmp[462186])
    (482371 'end of statement')
    unknown tmp[462200] "temp"
    (462202 'init var' tmp[462200] initElts[159051])
    (462204 '.=' this[161424] c"eltsNeedDeinit" tmp[462200])
    (482372 'end of statement')
    (462209 'setcid' this[161424])
    (482373 'end of statement')
    unknown call_tmp[674243] "expr temp" "maybe param" "maybe type" "temp"
    (674246 'move' call_tmp[674243](159286 call _cond_test initElts[159051]))
    if call_tmp[674243]
    {
      unknown call_tmp[674250] "expr temp" "maybe param" "maybe type" "temp"
      (674253 'move' call_tmp[674250](159152 call eltType _mt[243] this[161424]))
      unknown call_tmp[674255] "expr temp" "maybe param" "maybe type" "temp"
      (674258 'move' call_tmp[674255](159156 call isNonNilableClass call_tmp[674250]))
      unknown call_tmp[674260] "expr temp" "maybe param" "maybe type" "temp"
      (674263 'move' call_tmp[674260](159280 call _cond_test call_tmp[674255]))
      if call_tmp[674260]
      {
        unknown call_tmp[674265] "expr temp" "maybe param" "maybe type" "temp"
        (674268 'move' call_tmp[674265](159191 call + "Cannot default initialize associative array because" " element type "))
        unknown call_tmp[674270] "expr temp" "maybe param" "maybe type" "temp"
        (674273 'move' call_tmp[674270](159195 call _cast string[26] eltType[159033]))
        unknown call_tmp[674275] "expr temp" "maybe param" "maybe type" "temp"
        (674278 'move' call_tmp[674275](159197 call + call_tmp[674265] call_tmp[674270]))
        unknown call_tmp[674280] "maybe param" "maybe type" "temp"
        (674283 'move' call_tmp[674280](159216 call + call_tmp[674275] " is a non-nilable class"))
        unknown msg[159218] "dead at end of block" "param"
        (544118 'init var' msg[159218] call_tmp[674280])
        (159221 'end of statement')
        (159226 call compilerError msg[159218])
      }
      {
        unknown call_tmp[674287] "expr temp" "maybe param" "maybe type" "temp"
        (674290 'move' call_tmp[674287](159230 call eltType _mt[243] this[161424]))
        unknown call_tmp[674292] "expr temp" "maybe param" "maybe type" "temp"
        (674295 'move' call_tmp[674292](159234 call isDefaultInitializable call_tmp[674287]))
        unknown call_tmp[674297] "expr temp" "maybe param" "maybe type" "temp"
        (674300 'move' call_tmp[674297](159235 call ! call_tmp[674292]))
        unknown call_tmp[674302] "expr temp" "maybe param" "maybe type" "temp"
        (674305 'move' call_tmp[674302](159276 call _cond_test call_tmp[674297]))
        if call_tmp[674302]
        {
          unknown call_tmp[674307] "expr temp" "maybe param" "maybe type" "temp"
          (674310 'move' call_tmp[674307](159239 call + "Cannot default initialize associative array because" " element type "))
          unknown call_tmp[674312] "expr temp" "maybe param" "maybe type" "temp"
          (674315 'move' call_tmp[674312](159243 call _cast string[26] eltType[159033]))
          unknown call_tmp[674317] "expr temp" "maybe param" "maybe type" "temp"
          (674320 'move' call_tmp[674317](159245 call + call_tmp[674307] call_tmp[674312]))
          unknown call_tmp[674322] "maybe param" "maybe type" "temp"
          (674325 'move' call_tmp[674322](159264 call + call_tmp[674317] " cannot be default initialized"))
          unknown msg[159266] "dead at end of block" "param"
          (544120 'init var' msg[159266] call_tmp[674322])
          (159269 'end of statement')
          (159274 call compilerError msg[159266])
        }
      }
    }
    unknown call_tmp[674327] "expr temp" "maybe param" "maybe type" "temp"
    (674330 'move' call_tmp[674327](159461 call _cond_test initElts[159051]))
    if call_tmp[674327]
    {
      unknown call_tmp[674332] "maybe param" "maybe type" "temp"
      (674335 'move' call_tmp[674332](159295 call init_elts_method tableSize[159098] eltType[159033]))
      unknown initMethod[159296] "dead at end of block" "insert auto destroy"
      (544122 'init var' initMethod[159296] call_tmp[674332])
      (159299 'end of statement' tableSize[159098])
      {
        unknown tmp[159436] "expr temp" "maybe param" "maybe type" "temp"
        (159438 'move' tmp[159436] initMethod[159296])
        unknown call_tmp[674337] "expr temp" "maybe param" "maybe type" "temp"
        (674340 'move' call_tmp[674337](159440 call == tmp[159436] noInit[11146]))
        unknown call_tmp[674342] "expr temp" "maybe param" "maybe type" "temp"
        (674345 'move' call_tmp[674342](159443 call _cond_test call_tmp[674337]))
        if call_tmp[674342]
        {
        }
        {
          unknown call_tmp[674347] "expr temp" "maybe param" "maybe type" "temp"
          (674350 'move' call_tmp[674347](159446 call == tmp[159436] serialInit[11148]))
          unknown call_tmp[674352] "expr temp" "maybe param" "maybe type" "temp"
          (674355 'move' call_tmp[674352](159449 call _cond_test call_tmp[674347]))
          if call_tmp[674352]
          {
            {
              unknown _indexOfInterest[159348] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[159349] "expr temp" "temp"
              unknown call_tmp[674359] "expr temp" "maybe param" "maybe type" "temp"
              (674362 'move' call_tmp[674359](159318 call table _mt[243] dom[159048]))
              unknown call_tmp[674366] "expr temp" "maybe param" "maybe type" "temp"
              (674369 'move' call_tmp[674366](159325 call(159321 call (partial) allSlots _mt[243] call_tmp[674359])))
              (159358 'move' _iterator[159349](159356 call _getIterator call_tmp[674366]))
              Defer
              {
                {
                  (159375 call _freeIterator _iterator[159349])
                }
              }
              { scopeless type
                (159364 'move' _indexOfInterest[159348](159361 call iteratorIndex _iterator[159349]))
              }
              ForLoop[159350]
              {
                unknown slot[159368] "index var" "insert auto destroy"
                (482378 'end of statement')
                (159370 'move' slot[159368] _indexOfInterest[159348])
                (482379 'end of statement' slot[159368])
                {
                  unknown call_tmp[674373] "expr temp" "maybe param" "maybe type" "temp"
                  (674376 'move' call_tmp[674373](159334 call(159329 call (partial) _isSlotFull _mt[243] dom[159048]) slot[159368]))
                  unknown call_tmp[674378] "expr temp" "maybe param" "maybe type" "temp"
                  (674381 'move' call_tmp[674378](159343 call _cond_test call_tmp[674373]))
                  if call_tmp[674378]
                  {
                    (159340 call(387090 call (partial) _doDefaultInitSlot _mt[243] this[161424]) slot[159368](inAdd = 0))
                    (482381 'end of statement' slot[159368])
                  }
                }
                label _continueLabel[159353]
                _indexOfInterest[159348]
                _iterator[159349]
              }
              label _breakLabel[159354]
            }
          }
          {
            unknown call_tmp[674385] "expr temp" "maybe param" "maybe type" "temp"
            (674388 'move' call_tmp[674385](159453 call == tmp[159436] parallelInit[11150]))
            unknown call_tmp[674390] "expr temp" "maybe param" "maybe type" "temp"
            (674393 'move' call_tmp[674390](159456 call _cond_test call_tmp[674385]))
            if call_tmp[674390]
            {
              unknown call_tmp[674397] "expr temp" "maybe param" "maybe type" "temp"
              (674400 'move' call_tmp[674397](159392 call table _mt[243] dom[159048]))
              unknown call_tmp[674404] "expr temp" "maybe param" "maybe type" "temp"
              (674407 'move' call_tmp[674404](159399 call(159395 call (partial) allSlots _mt[243] call_tmp[674397])))
              Forall {
                induction variables:
                  
                  unknown slot[159421] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[674404]
                shadow variables:
                other variables
                  forall body
                {
                  unknown call_tmp[674411] "expr temp" "maybe param" "maybe type" "temp"
                  (674414 'move' call_tmp[674411](159406 call(159401 call (partial) _isSlotFull _mt[243] dom[159048]) slot[159421]))
                  unknown call_tmp[674416] "expr temp" "maybe param" "maybe type" "temp"
                  (674419 'move' call_tmp[674416](159415 call _cond_test call_tmp[674411]))
                  if call_tmp[674416]
                  {
                    (159412 call(387096 call (partial) _doDefaultInitSlot _mt[243] this[161424]) slot[159421](inAdd = 0))
                    (482383 'end of statement' slot[159421])
                  }
                }
              }
            }
            {
              (159430 call halt "ArrayInit.heuristicInit should have been made concrete")
            }
          }
        }
      }
    }
    (521190 return _void[55])
  }
  function DefaultAssociativeArr[161422](?).deinit[159469](arg _mt[161430]:_MT[238], arg this[161428]:DefaultAssociativeArr[161422](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[674425] "expr temp" "maybe param" "maybe type" "temp"
    (674428 'move' call_tmp[674425](387102 call data _mt[243] this[161428]))
    unknown call_tmp[674432] "expr temp" "maybe param" "maybe type" "temp"
    (674435 'move' call_tmp[674432](361097 call dom _mt[243] this[161428]))
    unknown call_tmp[674439] "expr temp" "maybe param" "maybe type" "temp"
    (674442 'move' call_tmp[674439](159475 call table _mt[243] call_tmp[674432]))
    unknown call_tmp[674446] "expr temp" "maybe param" "maybe type" "temp"
    (674449 'move' call_tmp[674446](159478 call tableSize _mt[243] call_tmp[674439]))
    (159481 call _ddata_free call_tmp[674425] call_tmp[674446])
    (521192 return _void[55])
  }
  function DefaultAssociativeArr[161422](?).dsiGetBaseDom[159488](arg _mt[161434]:_MT[238], arg this[161432]:DefaultAssociativeArr[161422](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521196] "RVV" "temp"
    unknown call_tmp[674453] "expr temp" "maybe param" "maybe type" "temp"
    (674456 'move' call_tmp[674453](387107 call dom _mt[243] this[161432]))
    (521201 'move' ret[521196](521200 'deref' call_tmp[674453]))
    (521198 return ret[521196])
  }
  function DefaultAssociativeArr[161422](?).dsiAccess[159502](arg _mt[161438]:_MT[238], arg this[161436]:DefaultAssociativeArr[161422](?), arg idx[159499] :
  (387112 call idxType _mt[243] this[161436])) ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521205] "RVV" "temp"
    unknown call_tmp[674462] "expr temp" "maybe param" "maybe type" "temp"
    (674465 'move' call_tmp[674462](361102 call dom _mt[243] this[161436]))
    unknown call_tmp[674469] "expr temp" "maybe param" "maybe type" "temp"
    (674472 'move' call_tmp[674469](159510 call table _mt[243] call_tmp[674462]))
    unknown call_tmp[674476] "maybe param" "maybe type" "temp"
    (674479 'move' call_tmp[674476](159518 call(159513 call (partial) findFullSlot _mt[243] call_tmp[674469]) idx[159499]))
    unknown tmp[159519] "dead at end of block" "insert auto destroy" "temp"
    (544124 'init var' tmp[159519] call_tmp[674476])
    (159526 call _check_tuple_var_decl tmp[159519] 2)
    (482388 'end of statement')
    unknown call_tmp[674481] "maybe param" "maybe type" "temp"
    (674484 'move' call_tmp[674481](159520 call tmp[159519] 0))
    unknown found[159504] "dead at end of block" "insert auto destroy"
    (544126 'init var' found[159504] call_tmp[674481])
    unknown call_tmp[674486] "maybe param" "maybe type" "temp"
    (674489 'move' call_tmp[674486](159523 call tmp[159519] 1))
    unknown slotNum[159506] "dead at end of block" "insert auto destroy"
    (544128 'init var' slotNum[159506] call_tmp[674486])
    (159531 'end of statement')
    unknown call_tmp[674491] "expr temp" "maybe param" "maybe type" "temp"
    (674494 'move' call_tmp[674491](159564 call _cond_test found[159504]))
    if call_tmp[674491]
    {
      unknown call_tmp[674498] "expr temp" "maybe param" "maybe type" "temp"
      (674501 'move' call_tmp[674498](159537 call(387119 call (partial) data _mt[243] this[161436]) slotNum[159506]))
      (521210 'move' ret[521205](521209 'addr of' call_tmp[674498]))
      gotoReturn _end_dsiAccess[521203] _end_dsiAccess[521203]
      (482389 'end of statement' slotNum[159506])
    }
    {
      (159561 call halt "array index out of bounds: " idx[159499])
    }
    label _end_dsiAccess[521203]
    (521207 return ret[521205])
  }
  function DefaultAssociativeArr[161422](?).dsiAccess[159576](arg _mt[161442]:_MT[238], arg this[161440]:DefaultAssociativeArr[161422](?), arg idx[159573] :
  (387126 call idxType _mt[243] this[161440])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521216] "RVV" "temp"
    unknown call_tmp[674507] "expr temp" "maybe param" "maybe type" "temp"
    (674510 'move' call_tmp[674507](361107 call dom _mt[243] this[161440]))
    unknown call_tmp[674514] "expr temp" "maybe param" "maybe type" "temp"
    (674517 'move' call_tmp[674514](159588 call table _mt[243] call_tmp[674507]))
    unknown call_tmp[674521] "maybe param" "maybe type" "temp"
    (674524 'move' call_tmp[674521](159596 call(159591 call (partial) findFullSlot _mt[243] call_tmp[674514]) idx[159573]))
    unknown tmp[159597] "dead at end of block" "insert auto destroy" "temp"
    (544130 'init var' tmp[159597] call_tmp[674521])
    (159604 call _check_tuple_var_decl tmp[159597] 2)
    (482392 'end of statement')
    unknown call_tmp[674526] "maybe param" "maybe type" "temp"
    (674529 'move' call_tmp[674526](159598 call tmp[159597] 0))
    unknown found[159582] "dead at end of block" "insert auto destroy"
    (544132 'init var' found[159582] call_tmp[674526])
    unknown call_tmp[674531] "maybe param" "maybe type" "temp"
    (674534 'move' call_tmp[674531](159601 call tmp[159597] 1))
    unknown slotNum[159584] "dead at end of block" "insert auto destroy"
    (544134 'init var' slotNum[159584] call_tmp[674531])
    (159609 'end of statement')
    unknown call_tmp[674536] "expr temp" "maybe param" "maybe type" "temp"
    (674539 'move' call_tmp[674536](159632 call _cond_test found[159582]))
    if call_tmp[674536]
    {
      unknown call_tmp[674543] "expr temp" "maybe param" "maybe type" "temp"
      (674546 'move' call_tmp[674543](159615 call(387138 call (partial) data _mt[243] this[161440]) slotNum[159584]))
      (521221 'move' ret[521216](521220 'deref' call_tmp[674543]))
      gotoReturn _end_dsiAccess[521214] _end_dsiAccess[521214]
      (482393 'end of statement' slotNum[159584])
    }
    {
      (159623 call halt "array index out of bounds: " idx[159573])
      (482395 'end of statement')
      unknown call_tmp[674550] "expr temp" "maybe param" "maybe type" "temp"
      (674553 'move' call_tmp[674550](159629 call(387145 call (partial) data _mt[243] this[161440]) 0))
      (521226 'move' ret[521216](521225 'deref' call_tmp[674550]))
      gotoReturn _end_dsiAccess[521214] _end_dsiAccess[521214]
    }
    label _end_dsiAccess[521214]
    (521218 return ret[521216])
  }
  where {
    unknown call_tmp[674557] "expr temp" "maybe param" "maybe type" "temp"
    (674560 'move' call_tmp[674557](387131 call eltType _mt[243] this[161440]))
    (159581 call shouldReturnRvalueByValue call_tmp[674557])
  }
  function DefaultAssociativeArr[161422](?).dsiAccess[159645](arg _mt[161446]:_MT[238], arg this[161444]:DefaultAssociativeArr[161422](?), arg idx[159642] :
  (387150 call idxType _mt[243] this[161444])) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521232] "RVV" "temp"
    unknown call_tmp[674566] "expr temp" "maybe param" "maybe type" "temp"
    (674569 'move' call_tmp[674566](361112 call dom _mt[243] this[161444]))
    unknown call_tmp[674573] "expr temp" "maybe param" "maybe type" "temp"
    (674576 'move' call_tmp[674573](159657 call table _mt[243] call_tmp[674566]))
    unknown call_tmp[674580] "maybe param" "maybe type" "temp"
    (674583 'move' call_tmp[674580](159665 call(159660 call (partial) findFullSlot _mt[243] call_tmp[674573]) idx[159642]))
    unknown tmp[159666] "dead at end of block" "insert auto destroy" "temp"
    (544136 'init var' tmp[159666] call_tmp[674580])
    (159673 call _check_tuple_var_decl tmp[159666] 2)
    (482397 'end of statement')
    unknown call_tmp[674585] "maybe param" "maybe type" "temp"
    (674588 'move' call_tmp[674585](159667 call tmp[159666] 0))
    unknown found[159651] "dead at end of block" "insert auto destroy"
    (544138 'init var' found[159651] call_tmp[674585])
    unknown call_tmp[674590] "maybe param" "maybe type" "temp"
    (674593 'move' call_tmp[674590](159670 call tmp[159666] 1))
    unknown slotNum[159653] "dead at end of block" "insert auto destroy"
    (544140 'init var' slotNum[159653] call_tmp[674590])
    (159678 'end of statement')
    unknown call_tmp[674595] "expr temp" "maybe param" "maybe type" "temp"
    (674598 'move' call_tmp[674595](159701 call _cond_test found[159651]))
    if call_tmp[674595]
    {
      unknown call_tmp[674602] "expr temp" "maybe param" "maybe type" "temp"
      (674605 'move' call_tmp[674602](159684 call(387162 call (partial) data _mt[243] this[161444]) slotNum[159653]))
      (521237 'move' ret[521232](521236 'addr of' call_tmp[674602]))
      gotoReturn _end_dsiAccess[521230] _end_dsiAccess[521230]
      (482398 'end of statement' slotNum[159653])
    }
    {
      (159692 call halt "array index out of bounds: " idx[159642])
      (482400 'end of statement')
      unknown call_tmp[674609] "expr temp" "maybe param" "maybe type" "temp"
      (674612 'move' call_tmp[674609](159698 call(387169 call (partial) data _mt[243] this[161444]) 0))
      (521242 'move' ret[521232](521241 'addr of' call_tmp[674609]))
      gotoReturn _end_dsiAccess[521230] _end_dsiAccess[521230]
    }
    label _end_dsiAccess[521230]
    (521234 return ret[521232])
  }
  where {
    unknown call_tmp[674616] "expr temp" "maybe param" "maybe type" "temp"
    (674619 'move' call_tmp[674616](387155 call eltType _mt[243] this[161444]))
    (159650 call shouldReturnRvalueByConstRef call_tmp[674616])
  }
  function DefaultAssociativeArr[161422](?).dsiLocalAccess[159712](arg _mt[161450]:_MT[238], arg this[161448]:DefaultAssociativeArr[161422](?), arg i[159710]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521248] "RVV" "temp"
    unknown call_tmp[674623] "expr temp" "maybe param" "maybe type" "temp"
    (674626 'move' call_tmp[674623](159717 call(387173 call (partial) dsiAccess _mt[243] this[161448]) i[159710]))
    (521253 'move' ret[521248](521252 'addr of' call_tmp[674623]))
    (521250 return ret[521248])
  }
  function DefaultAssociativeArr[161422](?).dsiLocalAccess[159727](arg _mt[161454]:_MT[238], arg this[161452]:DefaultAssociativeArr[161422](?), arg i[159725]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521257] "RVV" "temp"
    unknown call_tmp[674630] "expr temp" "maybe param" "maybe type" "temp"
    (674633 'move' call_tmp[674630](159736 call(387183 call (partial) dsiAccess _mt[243] this[161452]) i[159725]))
    (521262 'move' ret[521257](521261 'deref' call_tmp[674630]))
    (521259 return ret[521257])
  }
  where {
    unknown call_tmp[674637] "expr temp" "maybe param" "maybe type" "temp"
    (674640 'move' call_tmp[674637](387179 call eltType _mt[243] this[161452]))
    (159732 call shouldReturnRvalueByValue call_tmp[674637])
  }
  function DefaultAssociativeArr[161422](?).dsiLocalAccess[159747](arg _mt[161458]:_MT[238], arg this[161456]:DefaultAssociativeArr[161422](?), arg i[159745]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521266] "RVV" "temp"
    unknown call_tmp[674644] "expr temp" "maybe param" "maybe type" "temp"
    (674647 'move' call_tmp[674644](159756 call(387193 call (partial) dsiAccess _mt[243] this[161456]) i[159745]))
    (521271 'move' ret[521266](521270 'addr of' call_tmp[674644]))
    (521268 return ret[521266])
  }
  where {
    unknown call_tmp[674651] "expr temp" "maybe param" "maybe type" "temp"
    (674654 'move' call_tmp[674651](387189 call eltType _mt[243] this[161456]))
    (159752 call shouldReturnRvalueByConstRef call_tmp[674651])
  }
  function DefaultAssociativeArr[161422](?).these[159765](arg _mt[161462]:_MT[238], arg this[161460]:DefaultAssociativeArr[161422](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521275] "RVV" "temp"
    {
      unknown _indexOfInterest[159796] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159797] "expr temp" "temp"
      unknown call_tmp[674658] "expr temp" "maybe param" "maybe type" "temp"
      (674661 'move' call_tmp[674658](361117 call dom _mt[243] this[161460]))
      unknown call_tmp[674665] "expr temp" "maybe param" "maybe type" "temp"
      (674668 'move' call_tmp[674665](159769 call table _mt[243] call_tmp[674658]))
      unknown call_tmp[674672] "expr temp" "maybe param" "maybe type" "temp"
      (674675 'move' call_tmp[674672](159776 call(159772 call (partial) allSlots _mt[243] call_tmp[674665])))
      (159806 'move' _iterator[159797](159804 call _getIterator call_tmp[674672]))
      Defer
      {
        {
          (159823 call _freeIterator _iterator[159797])
        }
      }
      { scopeless type
        (159812 'move' _indexOfInterest[159796](159809 call iteratorIndex _iterator[159797]))
      }
      ForLoop[159798]
      {
        unknown slot[159816] "index var" "insert auto destroy"
        (482406 'end of statement')
        (159818 'move' slot[159816] _indexOfInterest[159796])
        (482407 'end of statement' slot[159816])
        {
          unknown call_tmp[674679] "expr temp" "maybe param" "maybe type" "temp"
          (674682 'move' call_tmp[674679](361122 call dom _mt[243] this[161460]))
          unknown call_tmp[674686] "expr temp" "maybe param" "maybe type" "temp"
          (674689 'move' call_tmp[674686](159783 call(159778 call (partial) _isSlotFull _mt[243] call_tmp[674679]) slot[159816]))
          unknown call_tmp[674691] "expr temp" "maybe param" "maybe type" "temp"
          (674694 'move' call_tmp[674691](159791 call _cond_test call_tmp[674686]))
          if call_tmp[674691]
          {
            unknown yret[521279] "YVV" "temp"
            unknown call_tmp[674698] "expr temp" "maybe param" "maybe type" "temp"
            (674701 'move' call_tmp[674698](159787 call(387200 call (partial) data _mt[243] this[161460]) slot[159816]))
            (521282 'move' yret[521279](521281 'addr of' call_tmp[674698]))
            (521284 yield yret[521279])
            (482409 'end of statement' slot[159816])
          }
        }
        label _continueLabel[159801]
        _indexOfInterest[159796]
        _iterator[159797]
      }
      label _breakLabel[159802]
    }
    (521277 return ret[521275])
  }
  function DefaultAssociativeArr[161422](?).these[159839](arg _mt[161466]:_MT[238], arg this[161464]:DefaultAssociativeArr[161422](?), param arg tag[159836]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521288] "RVV" "temp"
    unknown call_tmp[674703] "expr temp" "maybe param" "maybe type" "temp"
    (674706 'move' call_tmp[674703](159871 call _cond_test debugDefaultAssoc[156269]))
    if call_tmp[674703]
    {
      (159868 call writeln "*** In associative array standalone iterator")
    }
    {
      unknown _indexOfInterest[159907] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159908] "expr temp" "temp"
      unknown call_tmp[674710] "expr temp" "maybe param" "maybe type" "temp"
      (674713 'move' call_tmp[674710](361128 call dom _mt[243] this[161464]))
      unknown call_tmp[674717] "expr temp" "maybe param" "maybe type" "temp"
      (674720 'move' call_tmp[674717](159878 call table _mt[243] call_tmp[674710]))
      unknown call_tmp[674724] "expr temp" "maybe param" "maybe type" "temp"
      (674727 'move' call_tmp[674724](159887 call(159881 call (partial) allSlots _mt[243] call_tmp[674717])(tag = tag[159836])))
      (159917 'move' _iterator[159908](159915 call _getIterator call_tmp[674724]))
      Defer
      {
        {
          (159934 call _freeIterator _iterator[159908])
        }
      }
      { scopeless type
        (159923 'move' _indexOfInterest[159907](159920 call iteratorIndex _iterator[159908]))
      }
      ForLoop[159909]
      {
        unknown slot[159927] "index var" "insert auto destroy"
        (482413 'end of statement')
        (159929 'move' slot[159927] _indexOfInterest[159907])
        (482414 'end of statement' slot[159927])
        {
          unknown call_tmp[674731] "expr temp" "maybe param" "maybe type" "temp"
          (674734 'move' call_tmp[674731](361133 call dom _mt[243] this[161464]))
          unknown call_tmp[674738] "expr temp" "maybe param" "maybe type" "temp"
          (674741 'move' call_tmp[674738](159894 call(159889 call (partial) _isSlotFull _mt[243] call_tmp[674731]) slot[159927]))
          unknown call_tmp[674743] "expr temp" "maybe param" "maybe type" "temp"
          (674746 'move' call_tmp[674743](159902 call _cond_test call_tmp[674738]))
          if call_tmp[674743]
          {
            unknown yret[521292] "YVV" "temp"
            unknown call_tmp[674750] "expr temp" "maybe param" "maybe type" "temp"
            (674753 'move' call_tmp[674750](159898 call(387211 call (partial) data _mt[243] this[161464]) slot[159927]))
            (521295 'move' yret[521292](521294 'addr of' call_tmp[674750]))
            (521297 yield yret[521292])
            (482416 'end of statement' slot[159927])
          }
        }
        label _continueLabel[159912]
        _indexOfInterest[159907]
        _iterator[159908]
      }
      label _breakLabel[159913]
    }
    (521290 return ret[521288])
  }
  where {
    (159846 call == tag[159836] standalone[451])
  }
  function DefaultAssociativeArr[161422](?).these[159950](arg _mt[161470]:_MT[238], arg this[161468]:DefaultAssociativeArr[161422](?), param arg tag[159947]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521301] "RVV" "temp"
    {
      unknown _indexOfInterest[159970] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159971] "expr temp" "temp"
      unknown call_tmp[674757] "expr temp" "maybe param" "maybe type" "temp"
      (674760 'move' call_tmp[674757](361139 call dom _mt[243] this[161468]))
      unknown call_tmp[674764] "expr temp" "maybe param" "maybe type" "temp"
      (674767 'move' call_tmp[674764](159966 call(159961 call (partial) these _mt[243] call_tmp[674757]) tag[159947]))
      (159980 'move' _iterator[159971](159978 call _getIterator call_tmp[674764]))
      Defer
      {
        {
          (159997 call _freeIterator _iterator[159971])
        }
      }
      { scopeless type
        (159986 'move' _indexOfInterest[159970](159983 call iteratorIndex _iterator[159971]))
      }
      ForLoop[159972]
      {
        unknown followThis[159990] "index var" "insert auto destroy"
        (482419 'end of statement')
        (159992 'move' followThis[159990] _indexOfInterest[159970])
        (482420 'end of statement' followThis[159990])
        unknown yret[521305] "YVV" "temp"
        (521308 'move' yret[521305](521307 'deref' followThis[159990]))
        (521310 yield yret[521305])
        (482422 'end of statement' followThis[159990])
        label _continueLabel[159975]
        _indexOfInterest[159970]
        _iterator[159971]
      }
      label _breakLabel[159976]
    }
    (521303 return ret[521301])
  }
  where {
    (159957 call == tag[159947] leader[447])
  }
  function DefaultAssociativeArr[161422](?).these[160014](arg _mt[161474]:_MT[238], arg this[161472]:DefaultAssociativeArr[161422](?), param arg tag[160011]:iterKind[453], arg followThis[160016]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521314] "RVV" "temp"
    unknown tmp[160031] "dead at end of block" "insert auto destroy" "temp"
    (544142 'init var' tmp[160031] followThis[160016])
    (160038 call _check_tuple_var_decl tmp[160031] 2)
    (482424 'end of statement')
    unknown call_tmp[674769] "maybe param" "maybe type" "temp"
    (674772 'move' call_tmp[674769](160032 call tmp[160031] 0))
    unknown chunk[160025] "dead at end of block" "insert auto destroy"
    (544144 'init var' chunk[160025] call_tmp[674769])
    unknown call_tmp[674774] "maybe param" "maybe type" "temp"
    (674777 'move' call_tmp[674774](160035 call tmp[160031] 1))
    unknown followThisDom[160027] "dead at end of block" "insert auto destroy"
    (544146 'init var' followThisDom[160027] call_tmp[674774])
    (160043 'end of statement')
    unknown call_tmp[674779] "expr temp" "maybe param" "maybe type" "temp"
    (674782 'move' call_tmp[674779](160068 call _cond_test debugDefaultAssoc[156269]))
    if call_tmp[674779]
    {
      (160066 call writeln "In array follower code: Following " chunk[160025])
      (482425 'end of statement' chunk[160025])
    }
    unknown call_tmp[674786] "expr temp" "maybe param" "maybe type" "temp"
    (674789 'move' call_tmp[674786](160075 call dom _mt[243] this[161472]))
    unknown call_tmp[674791] "maybe param" "maybe type" "temp"
    (674794 'move' call_tmp[674791](160078 call == followThisDom[160027] call_tmp[674786]))
    const sameDom[160080] "dead at end of block" "const" "insert auto destroy"
    (544148 'init var' sameDom[160080] call_tmp[674791])
    (160083 'end of statement')
    unknown call_tmp[674796] "expr temp" "maybe param" "maybe type" "temp"
    (674799 'move' call_tmp[674796](160085 call ! sameDom[160080]))
    unknown call_tmp[674801] "expr temp" "maybe param" "maybe type" "temp"
    (674804 'move' call_tmp[674801](160126 call _cond_test call_tmp[674796]))
    if call_tmp[674801]
    {
      unknown call_tmp[674808] "expr temp" "maybe param" "maybe type" "temp"
      (674811 'move' call_tmp[674808](160088 call dsiNumIndices _mt[243] followThisDom[160027]))
      unknown call_tmp[674815] "expr temp" "maybe param" "maybe type" "temp"
      (674818 'move' call_tmp[674815](160092 call dom _mt[243] this[161472]))
      unknown call_tmp[674822] "expr temp" "maybe param" "maybe type" "temp"
      (674825 'move' call_tmp[674822](160095 call dsiNumIndices _mt[243] call_tmp[674815]))
      unknown call_tmp[674827] "expr temp" "maybe param" "maybe type" "temp"
      (674830 'move' call_tmp[674827](160098 call != call_tmp[674808] call_tmp[674822]))
      unknown call_tmp[674832] "expr temp" "maybe param" "maybe type" "temp"
      (674835 'move' call_tmp[674832](160121 call _cond_test call_tmp[674827]))
      if call_tmp[674832]
      {
        (160119 call halt "zippered associative array does not match the iterated domain")
      }
    }
    unknown call_tmp[674839] "expr temp" "maybe param" "maybe type" "temp"
    (674842 'move' call_tmp[674839](160132 call table _mt[243] followThisDom[160027]))
    unknown call_tmp[674846] "maybe param" "maybe type" "temp"
    (674849 'move' call_tmp[674846](160135 call table _mt[243] call_tmp[674839]))
    const otherTable[160138] "dead at end of block" "const" "insert auto destroy"
    (544150 'init var' otherTable[160138] call_tmp[674846])
    (160141 'end of statement' followThisDom[160027] followThisDom[160027])
    {
      unknown _indexOfInterest[160232] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160233] "expr temp" "temp"
      (160242 'move' _iterator[160233](160240 call _getIterator chunk[160025]))
      Defer
      {
        {
          (160258 call _freeIterator _iterator[160233])
        }
      }
      { scopeless type
        (160247 'move' _indexOfInterest[160232](160244 call iteratorIndex _iterator[160233]))
      }
      ForLoop[160234]
      {
        unknown slot[160251] "index var" "insert auto destroy"
        (482431 'end of statement')
        (160253 'move' slot[160251] _indexOfInterest[160232])
        (482432 'end of statement' slot[160251])
        {
          const aSlot[160148] "dead at end of block" "const" "ref var"
          unknown call_tmp[674851] "expr temp" "maybe param" "maybe type" "temp"
          (674854 'move' call_tmp[674851](160147 call otherTable[160138] slot[160251]))
          (544153 'move' aSlot[160148](544152 'addr of' call_tmp[674851]))
          (160151 'end of statement' otherTable[160138] slot[160251])
          unknown call_tmp[674858] "expr temp" "maybe param" "maybe type" "temp"
          (674861 'move' call_tmp[674858](160158 call(160154 call (partial) isFull _mt[243] aSlot[160148])))
          unknown call_tmp[674863] "expr temp" "maybe param" "maybe type" "temp"
          (674866 'move' call_tmp[674863](160228 call _cond_test call_tmp[674858]))
          if call_tmp[674863]
          {
            unknown idx[160160] "dead at end of block" "insert auto destroy"
            (544155 'init var' idx[160160] slot[160251])
            (160163 'end of statement' slot[160251])
            unknown call_tmp[674868] "expr temp" "maybe param" "maybe type" "temp"
            (674871 'move' call_tmp[674868](160166 call ! sameDom[160080]))
            unknown call_tmp[674873] "expr temp" "maybe param" "maybe type" "temp"
            (674876 'move' call_tmp[674873](160218 call _cond_test call_tmp[674868]))
            if call_tmp[674873]
            {
              unknown call_tmp[674880] "expr temp" "maybe param" "maybe type" "temp"
              (674883 'move' call_tmp[674880](361150 call dom _mt[243] this[161472]))
              unknown call_tmp[674887] "expr temp" "maybe param" "maybe type" "temp"
              (674890 'move' call_tmp[674887](160174 call table _mt[243] call_tmp[674880]))
              unknown call_tmp[674896] "expr temp" "maybe param" "maybe type" "temp"
              (674899 'move' call_tmp[674896](160181 call key _mt[243] aSlot[160148]))
              unknown call_tmp[674901] "maybe param" "maybe type" "temp"
              (674904 'move' call_tmp[674901](160185 call(160177 call (partial) findFullSlot _mt[243] call_tmp[674887]) call_tmp[674896]))
              const tmp[160186] "dead at end of block" "const" "insert auto destroy" "temp"
              (544157 'init var' tmp[160186] call_tmp[674901])
              (160193 call _check_tuple_var_decl tmp[160186] 2)
              (482437 'end of statement')
              unknown call_tmp[674906] "maybe param" "maybe type" "temp"
              (674909 'move' call_tmp[674906](160187 call tmp[160186] 0))
              const match[160168] "dead at end of block" "const" "insert auto destroy"
              (544159 'init var' match[160168] call_tmp[674906])
              unknown call_tmp[674911] "maybe param" "maybe type" "temp"
              (674914 'move' call_tmp[674911](160190 call tmp[160186] 1))
              const loc[160170] "dead at end of block" "const" "insert auto destroy"
              (544161 'init var' loc[160170] call_tmp[674911])
              (160198 'end of statement')
              unknown call_tmp[674916] "expr temp" "maybe param" "maybe type" "temp"
              (674919 'move' call_tmp[674916](160201 call ! match[160168]))
              unknown call_tmp[674921] "expr temp" "maybe param" "maybe type" "temp"
              (674924 'move' call_tmp[674921](160208 call _cond_test call_tmp[674916]))
              if call_tmp[674921]
              {
                (160206 call halt "zippered associative array does not match the iterated domain")
              }
              (160215 call = idx[160160] loc[160170])
              (482439 'end of statement' idx[160160] loc[160170])
            }
            unknown yret[521318] "YVV" "temp"
            unknown call_tmp[674928] "expr temp" "maybe param" "maybe type" "temp"
            (674931 'move' call_tmp[674928](160225 call(387236 call (partial) data _mt[243] this[161472]) idx[160160]))
            (521321 'move' yret[521318](521320 'addr of' call_tmp[674928]))
            (521323 yield yret[521318])
            (482442 'end of statement' idx[160160])
          }
        }
        label _continueLabel[160237]
        _indexOfInterest[160232]
        _iterator[160233]
      }
      label _breakLabel[160238]
    }
    (521316 return ret[521314])
  }
  where {
    (160023 call == tag[160011] follower[449])
  }
  function DefaultAssociativeArr[161422](?).dsiSerialReadWrite[160272](arg _mt[161478]:_MT[238], arg this[161476]:DefaultAssociativeArr[161422](?), arg f[160270]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[674935] "maybe param" "maybe type" "temp"
    (674938 'move' call_tmp[674935](160279 call(160275 call (partial) binary _mt[243] f[160270])))
    unknown binary[160280] "dead at end of block" "insert auto destroy"
    (544163 'init var' binary[160280] call_tmp[674935])
    (160283 'end of statement')
    unknown call_tmp[674942] "maybe param" "maybe type" "temp"
    (674945 'move' call_tmp[674942](160291 call(160286 call (partial) styleElement _mt[243] f[160270]) QIO_STYLE_ELEMENT_ARRAY[19662]))
    unknown arrayStyle[160292] "dead at end of block" "insert auto destroy"
    (544165 'init var' arrayStyle[160292] call_tmp[674942])
    (160295 'end of statement')
    unknown tmp[427966] "maybe param" "temp"
    (427977 'move' tmp[427966](160298 call == arrayStyle[160292] QIO_ARRAY_FORMAT_SPACE[19692]))
    unknown call_tmp[674947] "expr temp" "maybe param" "maybe type" "temp"
    (674950 'move' call_tmp[674947](427979 call _cond_invalid tmp[427966]))
    if call_tmp[674947]
    {
      (427982 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isspace[160305] "dead at end of block" "insert auto destroy"
    unknown tmp[569896] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569897] "maybe param" "temp"
    unknown call_tmp[674952] "expr temp" "maybe param" "maybe type" "temp"
    (674955 'move' call_tmp[674952](427967 call isTrue tmp[427966]))
    (569902 'move' tmp[569897](569900 call _cond_test call_tmp[674952]))
    if tmp[569897]
    {
      unknown tmp[569904] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674957] "expr temp" "maybe param" "maybe type" "temp"
      (674960 'move' call_tmp[674957](160301 call ! binary[160280]))
      (569906 'move' tmp[569904](427970 call isTrue call_tmp[674957]))
      (569911 'move' tmp[569896](569908 '_paramFoldLogical' tmp[569897] tmp[569904]))
    }
    {
      (569916 'move' tmp[569896](569913 '_paramFoldLogical' tmp[569897] 0))
    }
    (544167 'init var' isspace[160305] tmp[569896])
    (160308 'end of statement')
    unknown tmp[427987] "maybe param" "temp"
    (427998 'move' tmp[427987](160311 call == arrayStyle[160292] QIO_ARRAY_FORMAT_JSON[19702]))
    unknown call_tmp[674962] "expr temp" "maybe param" "maybe type" "temp"
    (674965 'move' call_tmp[674962](428000 call _cond_invalid tmp[427987]))
    if call_tmp[674962]
    {
      (428003 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isjson[160318] "dead at end of block" "insert auto destroy"
    unknown tmp[569923] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569924] "maybe param" "temp"
    unknown call_tmp[674967] "expr temp" "maybe param" "maybe type" "temp"
    (674970 'move' call_tmp[674967](427988 call isTrue tmp[427987]))
    (569929 'move' tmp[569924](569927 call _cond_test call_tmp[674967]))
    if tmp[569924]
    {
      unknown tmp[569931] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674972] "expr temp" "maybe param" "maybe type" "temp"
      (674975 'move' call_tmp[674972](160314 call ! binary[160280]))
      (569933 'move' tmp[569931](427991 call isTrue call_tmp[674972]))
      (569938 'move' tmp[569923](569935 '_paramFoldLogical' tmp[569924] tmp[569931]))
    }
    {
      (569943 'move' tmp[569923](569940 '_paramFoldLogical' tmp[569924] 0))
    }
    (544169 'init var' isjson[160318] tmp[569923])
    (160321 'end of statement')
    unknown tmp[428008] "maybe param" "temp"
    (428019 'move' tmp[428008](160324 call == arrayStyle[160292] QIO_ARRAY_FORMAT_CHPL[19697]))
    unknown call_tmp[674977] "expr temp" "maybe param" "maybe type" "temp"
    (674980 'move' call_tmp[674977](428021 call _cond_invalid tmp[428008]))
    if call_tmp[674977]
    {
      (428024 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown ischpl[160331] "dead at end of block" "insert auto destroy"
    unknown tmp[569950] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569951] "maybe param" "temp"
    unknown call_tmp[674982] "expr temp" "maybe param" "maybe type" "temp"
    (674985 'move' call_tmp[674982](428009 call isTrue tmp[428008]))
    (569956 'move' tmp[569951](569954 call _cond_test call_tmp[674982]))
    if tmp[569951]
    {
      unknown tmp[569958] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674987] "expr temp" "maybe param" "maybe type" "temp"
      (674990 'move' call_tmp[674987](160327 call ! binary[160280]))
      (569960 'move' tmp[569958](428012 call isTrue call_tmp[674987]))
      (569965 'move' tmp[569950](569962 '_paramFoldLogical' tmp[569951] tmp[569958]))
    }
    {
      (569970 'move' tmp[569950](569967 '_paramFoldLogical' tmp[569951] 0))
    }
    (544171 'init var' ischpl[160331] tmp[569950])
    (160334 'end of statement')
    unknown tmp[428029] "maybe param" "temp"
    unknown call_tmp[674994] "expr temp" "maybe param" "maybe type" "temp"
    (674997 'move' call_tmp[674994](160336 call writing _mt[243] f[160270]))
    (428040 'move' tmp[428029](160339 call ! call_tmp[674994]))
    unknown call_tmp[674999] "expr temp" "maybe param" "maybe type" "temp"
    (675002 'move' call_tmp[674999](428042 call _cond_invalid tmp[428029]))
    if call_tmp[674999]
    {
      (428045 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[569977] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569978] "maybe param" "temp"
    unknown call_tmp[675004] "expr temp" "maybe param" "maybe type" "temp"
    (675007 'move' call_tmp[675004](428030 call isTrue tmp[428029]))
    (569983 'move' tmp[569978](569981 call _cond_test call_tmp[675004]))
    if tmp[569978]
    {
      unknown tmp[569985] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (569987 'move' tmp[569985](428033 call isTrue ischpl[160331]))
      (569992 'move' tmp[569977](569989 '_paramFoldLogical' tmp[569978] tmp[569985]))
    }
    {
      (569997 'move' tmp[569977](569994 '_paramFoldLogical' tmp[569978] 0))
    }
    unknown call_tmp[675009] "expr temp" "maybe param" "maybe type" "temp"
    (675012 'move' call_tmp[675009](160357 call _cond_test tmp[569977]))
    if call_tmp[675009]
    {
      (160352 call(160347 call (partial) readChapelStyleAssocArray _mt[243] this[161476]) f[160270])
      (482451 'end of statement')
      gotoReturn _end_dsiSerialReadWrite[521325] _end_dsiSerialReadWrite[521325]
    }
    unknown tmp[428050] "maybe param" "temp"
    (428061 'move' tmp[428050] isjson[160318])
    unknown call_tmp[675016] "expr temp" "maybe param" "maybe type" "temp"
    (675019 'move' call_tmp[675016](428063 call _cond_invalid tmp[428050]))
    if call_tmp[675016]
    {
      (428066 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[570004] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570005] "maybe param" "temp"
    unknown call_tmp[675021] "expr temp" "maybe param" "maybe type" "temp"
    (675024 'move' call_tmp[675021](428051 call isTrue tmp[428050]))
    (570010 'move' tmp[570005](570008 call _cond_test call_tmp[675021]))
    if tmp[570005]
    {
      (570015 'move' tmp[570004](570012 '_paramFoldLogical' tmp[570005] 1))
    }
    {
      unknown tmp[570017] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (570019 'move' tmp[570017](428055 call isTrue ischpl[160331]))
      (570024 'move' tmp[570004](570021 '_paramFoldLogical' tmp[570005] tmp[570017]))
    }
    unknown call_tmp[675026] "expr temp" "maybe param" "maybe type" "temp"
    (675029 'move' call_tmp[675026](160374 call _cond_test tmp[570004]))
    if call_tmp[675026]
    {
      unknown call_tmp[675031] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (675034 'move' call_tmp[675031](747998 'new' ioLiteral[238670] "["))
      (160371 call <~> f[160270] call_tmp[675031])
    }
    unknown first[160380] "dead at end of block" "insert auto destroy"
    (544173 'init var' first[160380] 1)
    (160383 'end of statement' binary[160280] binary[160280] binary[160280])
    {
      unknown _indexOfInterest[160490] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160491] "expr temp" "temp"
      unknown call_tmp[675038] "expr temp" "maybe param" "maybe type" "temp"
      (675041 'move' call_tmp[675038](160500 call dom _mt[243] this[161476]))
      unknown call_tmp[675043] "expr temp" "maybe param" "maybe type" "temp"
      (675046 'move' call_tmp[675043](160503 call _getIterator call_tmp[675038]))
      unknown call_tmp[675048] "expr temp" "maybe param" "maybe type" "temp"
      (675051 'move' call_tmp[675048](160507 call _getIterator this[161476]))
      (160509 'move' _iterator[160491](160395 call _build_tuple call_tmp[675043] call_tmp[675048]))
      Defer
      {
        {
          (160539 call _freeIterator _iterator[160491])
        }
      }
      { scopeless type
        (160514 'move' _indexOfInterest[160490](160511 call iteratorIndex _iterator[160491]))
      }
      ForLoop[160492]
      {
        (160519 call _check_tuple_var_decl _indexOfInterest[160490] 2)
        (482456 'end of statement')
        unknown key[160525] "index var" "insert auto destroy"
        (482457 'end of statement')
        (160527 'move' key[160525](160523 call _indexOfInterest[160490] 0))
        (482458 'end of statement' key[160525])
        unknown val[160532] "index var" "insert auto destroy"
        (482460 'end of statement')
        (160534 'move' val[160532](160530 call _indexOfInterest[160490] 1))
        (482461 'end of statement' val[160532])
        {
          unknown call_tmp[675053] "expr temp" "maybe param" "maybe type" "temp"
          (675056 'move' call_tmp[675053](160436 call _cond_test first[160380]))
          if call_tmp[675053]
          {
            (160399 call = first[160380] 0)
            (482463 'end of statement' first[160380])
          }
          {
            unknown call_tmp[675058] "expr temp" "maybe param" "maybe type" "temp"
            (675061 'move' call_tmp[675058](160430 call _cond_test isspace[160305]))
            if call_tmp[675058]
            {
              unknown call_tmp[675063] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
              (675066 'move' call_tmp[675063](747999 'new' ioLiteral[238670] " "))
              (160409 call <~> f[160270] call_tmp[675063])
            }
            {
              unknown tmp[428071] "maybe param" "temp"
              (428082 'move' tmp[428071] isjson[160318])
              unknown call_tmp[675068] "expr temp" "maybe param" "maybe type" "temp"
              (675071 'move' call_tmp[675068](428084 call _cond_invalid tmp[428071]))
              if call_tmp[675068]
              {
                (428087 call compilerError "cannot promote short-circuiting || operator")
              }
              unknown tmp[570031] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[570032] "maybe param" "temp"
              unknown call_tmp[675073] "expr temp" "maybe param" "maybe type" "temp"
              (675076 'move' call_tmp[675073](428072 call isTrue tmp[428071]))
              (570037 'move' tmp[570032](570035 call _cond_test call_tmp[675073]))
              if tmp[570032]
              {
                (570042 'move' tmp[570031](570039 '_paramFoldLogical' tmp[570032] 1))
              }
              {
                unknown tmp[570044] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                (570046 'move' tmp[570044](428076 call isTrue ischpl[160331]))
                (570051 'move' tmp[570031](570048 '_paramFoldLogical' tmp[570032] tmp[570044]))
              }
              unknown call_tmp[675078] "expr temp" "maybe param" "maybe type" "temp"
              (675081 'move' call_tmp[675078](160425 call _cond_test tmp[570031]))
              if call_tmp[675078]
              {
                unknown call_tmp[675083] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675086 'move' call_tmp[675083](748000 'new' ioLiteral[238670] ", "))
                (160422 call <~> f[160270] call_tmp[675083])
              }
            }
          }
          unknown tmp[428092] "maybe param" "temp"
          (428103 'move' tmp[428092](160444 call writing _mt[243] f[160270]))
          unknown call_tmp[675090] "expr temp" "maybe param" "maybe type" "temp"
          (675093 'move' call_tmp[675090](428105 call _cond_invalid tmp[428092]))
          if call_tmp[675090]
          {
            (428108 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[570058] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570059] "maybe param" "temp"
          unknown call_tmp[675095] "expr temp" "maybe param" "maybe type" "temp"
          (675098 'move' call_tmp[675095](428093 call isTrue tmp[428092]))
          (570064 'move' tmp[570059](570062 call _cond_test call_tmp[675095]))
          if tmp[570059]
          {
            unknown tmp[570066] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (570068 'move' tmp[570066](428096 call isTrue ischpl[160331]))
            (570073 'move' tmp[570058](570070 '_paramFoldLogical' tmp[570059] tmp[570066]))
          }
          {
            (570078 'move' tmp[570058](570075 '_paramFoldLogical' tmp[570059] 0))
          }
          unknown call_tmp[675100] "expr temp" "maybe param" "maybe type" "temp"
          (675103 'move' call_tmp[675100](160481 call _cond_test tmp[570058]))
          if call_tmp[675100]
          {
            (160452 call <~> f[160270] key[160525])
            (482469 'end of statement' key[160525])
            unknown call_tmp[675105] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
            (675108 'move' call_tmp[675105](748001 'new' ioLiteral[238670] " => "))
            (160478 call <~> f[160270] call_tmp[675105])
          }
          (160487 call <~> f[160270] val[160532])
          (482472 'end of statement' val[160532])
        }
        label _continueLabel[160495]
        _indexOfInterest[160490]
        _iterator[160491]
      }
      label _breakLabel[160496]
    }
    unknown tmp[428113] "maybe param" "temp"
    (428124 'move' tmp[428113] isjson[160318])
    unknown call_tmp[675110] "expr temp" "maybe param" "maybe type" "temp"
    (675113 'move' call_tmp[675110](428126 call _cond_invalid tmp[428113]))
    if call_tmp[675110]
    {
      (428129 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[570085] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570086] "maybe param" "temp"
    unknown call_tmp[675115] "expr temp" "maybe param" "maybe type" "temp"
    (675118 'move' call_tmp[675115](428114 call isTrue tmp[428113]))
    (570091 'move' tmp[570086](570089 call _cond_test call_tmp[675115]))
    if tmp[570086]
    {
      (570096 'move' tmp[570085](570093 '_paramFoldLogical' tmp[570086] 1))
    }
    {
      unknown tmp[570098] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (570100 'move' tmp[570098](428118 call isTrue ischpl[160331]))
      (570105 'move' tmp[570085](570102 '_paramFoldLogical' tmp[570086] tmp[570098]))
    }
    unknown call_tmp[675120] "expr temp" "maybe param" "maybe type" "temp"
    (675123 'move' call_tmp[675120](160559 call _cond_test tmp[570085]))
    if call_tmp[675120]
    {
      unknown call_tmp[675125] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (675128 'move' call_tmp[675125](748002 'new' ioLiteral[238670] "]"))
      (160556 call <~> f[160270] call_tmp[675125])
    }
    label _end_dsiSerialReadWrite[521325]
    (521327 return _void[55])
  }
  function DefaultAssociativeArr[161422](?).readChapelStyleAssocArray[160570](arg _mt[161482]:_MT[238], arg this[161480]:DefaultAssociativeArr[161422](?), arg f[160568]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675130] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675133 'move' call_tmp[675130](748003 'new' ioLiteral[238670] "["))
    const openBracket[160577] "dead at end of block" "const" "insert auto destroy"
    (544175 'init var' openBracket[160577] call_tmp[675130])
    (160580 'end of statement')
    unknown call_tmp[675135] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675138 'move' call_tmp[675135](748004 'new' ioLiteral[238670] "]"))
    const closedBracket[160587] "dead at end of block" "const" "insert auto destroy"
    (544177 'init var' closedBracket[160587] call_tmp[675135])
    (160590 'end of statement')
    unknown first[160592] "dead at end of block" "insert auto destroy"
    (544179 'init var' first[160592] 1)
    (160595 'end of statement')
    unknown readEnd[160597] "dead at end of block" "insert auto destroy"
    (544181 'init var' readEnd[160597] 0)
    (160600 'end of statement')
    (160603 call <~> f[160568] openBracket[160577])
    (482476 'end of statement' openBracket[160577])
    {
      unknown tmp[160706] "temp"
      (160724 'move' tmp[160706](160722 call _cond_test 1))
      WhileDo[160711]
      {
        {
          unknown call_tmp[675140] "expr temp" "maybe param" "maybe type" "temp"
          (675143 'move' call_tmp[675140](160658 call _cond_test first[160592]))
          if call_tmp[675140]
          {
            (160610 call = first[160592] 0)
            (482478 'end of statement' first[160592])
            Try
            {
              {
                (160616 call <~> f[160568] closedBracket[160587])
                (482480 'end of statement' closedBracket[160587])
                (160622 call = readEnd[160597] 1)
                (482482 'end of statement' readEnd[160597])
                break _breakLabel[160710] _breakLabel[160710]
              }
            }
            Catch err : BadFormatError
            {
              unknown call_tmp[675145] "expr temp" "maybe param" "maybe type" "temp"
              (675148 'move' call_tmp[675145](354537 'current error'))
              unknown call_tmp[675150] "maybe param" "maybe type" "temp"
              (675153 'move' call_tmp[675150](354538 'dynamic_cast' unmanaged BadFormatError?[415664] call_tmp[675145]))
              unknown tmp[354534] "dead at end of block" "insert auto destroy" "temp"
              (544183 'init var' tmp[354534] call_tmp[675150])
              unknown call_tmp[675155] "expr temp" "maybe param" "maybe type" "temp"
              (675158 'move' call_tmp[675155](354541 '!=' tmp[354534] nil[44]))
              if call_tmp[675155]
              {
                unknown call_tmp[675160] "expr temp" "maybe param" "maybe type" "temp"
                (675163 'move' call_tmp[675160](354548 'to non nilable class' tmp[354534]))
                unknown call_tmp[675165] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675168 'move' call_tmp[675165](748005 'new' _owned[30](?) call_tmp[675160]))
                unknown err[354547] "dead at end of block" "insert auto destroy"
                (544185 'init var' err[354547] call_tmp[675165])
                (482484 'end of statement')
                {
                }
              }
              {
              }
            }
          }
          {
            Try
            {
              {
                unknown call_tmp[675170] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675173 'move' call_tmp[675170](748006 'new' ioLiteral[238670] ","))
                (160642 call <~> f[160568] call_tmp[675170])
              }
            }
            Catch err : BadFormatError
            {
              unknown call_tmp[675175] "expr temp" "maybe param" "maybe type" "temp"
              (675178 'move' call_tmp[675175](354558 'current error'))
              unknown call_tmp[675180] "maybe param" "maybe type" "temp"
              (675183 'move' call_tmp[675180](354559 'dynamic_cast' unmanaged BadFormatError?[415664] call_tmp[675175]))
              unknown tmp[354555] "dead at end of block" "insert auto destroy" "temp"
              (544187 'init var' tmp[354555] call_tmp[675180])
              unknown call_tmp[675185] "expr temp" "maybe param" "maybe type" "temp"
              (675188 'move' call_tmp[675185](354562 '!=' tmp[354555] nil[44]))
              if call_tmp[675185]
              {
                unknown call_tmp[675190] "expr temp" "maybe param" "maybe type" "temp"
                (675193 'move' call_tmp[675190](354569 'to non nilable class' tmp[354555]))
                unknown call_tmp[675195] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675198 'move' call_tmp[675195](748007 'new' _owned[30](?) call_tmp[675190]))
                unknown err[354568] "dead at end of block" "insert auto destroy"
                (544189 'init var' err[354568] call_tmp[675195])
                (482486 'end of statement')
                {
                  break _breakLabel[160710] _breakLabel[160710]
                }
              }
              {
              }
            }
          }
          unknown key[160664] "dead at end of block" "insert auto destroy"
          unknown call_tmp[675202] "expr temp" "maybe param" "maybe type" "temp"
          (675205 'move' call_tmp[675202](387292 call idxType _mt[243] this[161480]))
          (544191 'default init var' key[160664] call_tmp[675202])
          (160667 'end of statement')
          (160670 call <~> f[160568] key[160664])
          (482487 'end of statement' key[160664])
          unknown call_tmp[675207] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (675210 'move' call_tmp[675207](748008 'new' ioLiteral[238670] "=>"))
          (160695 call <~> f[160568] call_tmp[675207])
          (482489 'end of statement')
          unknown call_tmp[675214] "expr temp" "maybe param" "maybe type" "temp"
          (675217 'move' call_tmp[675214](160702 call(387301 call (partial) dsiAccess _mt[243] this[161480]) key[160664]))
          (160703 call <~> f[160568] call_tmp[675214])
          (482490 'end of statement' key[160664])
        }
        label _continueLabel[160709]
        (160717 'move' tmp[160706](160715 call _cond_test 1))
        tmp[160706]
      }
      label _breakLabel[160710]
    }
    unknown call_tmp[675219] "expr temp" "maybe param" "maybe type" "temp"
    (675222 'move' call_tmp[675219](160728 call ! readEnd[160597]))
    unknown call_tmp[675224] "expr temp" "maybe param" "maybe type" "temp"
    (675227 'move' call_tmp[675224](160735 call _cond_test call_tmp[675219]))
    if call_tmp[675224]
    {
      (160732 call <~> f[160568] closedBracket[160587])
      (482492 'end of statement' closedBracket[160587])
    }
    (521331 return _void[55])
  }
  function DefaultAssociativeArr[161422](?).dsiSerialWrite[160746](arg _mt[161486]:_MT[238], arg this[161484]:DefaultAssociativeArr[161422](?), arg f[160744]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160754 call(160749 call (partial) dsiSerialReadWrite _mt[243] this[161484]) f[160744])
    (521333 return _void[55])
  }
  function DefaultAssociativeArr[161422](?).dsiSerialRead[160763](arg _mt[161490]:_MT[238], arg this[161488]:DefaultAssociativeArr[161422](?), arg f[160761]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160771 call(160766 call (partial) dsiSerialReadWrite _mt[243] this[161488]) f[160761])
    (521335 return _void[55])
  }
  function DefaultAssociativeArr[161422](?).dsiSorted[160780](arg _mt[161494]:_MT[238], arg this[161492]:DefaultAssociativeArr[161422](?), arg comparator[160778]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521339] "RVV" "temp"
    unknown tableCopy[160818] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter9[583141](arg iterator[583143]:_any[178](?), arg this[583179]:DefaultAssociativeArr[161422](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[583190] "RVV" "temp"
      {
        unknown _indexOfInterest[583148] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[583149] "expr temp" "temp"
        (583158 'move' _iterator[583149](583156 call _getIterator iterator[583143]))
        Defer
        {
          {
            (583172 call _freeIterator _iterator[583149])
          }
        }
        { scopeless type
          (583163 'move' _indexOfInterest[583148](583160 call iteratorIndex _iterator[583149]))
        }
        ForLoop[583150] for-expr
        {
          unknown slot[160816] "index var" "insert auto destroy" "no doc"
          (583183 'end of statement')
          (583167 'move' slot[160816] _indexOfInterest[583148])
          (583184 'end of statement' slot[160816])
          {
            {
              unknown yret[583194] "YVV" "temp"
              unknown call_tmp[583203] "expr temp" "maybe param" "maybe type" "temp"
              (583206 'move' call_tmp[583203](160813 call(387318 call (partial) data _mt[243] this[583179]) slot[160816]))
              (583197 'move' yret[583194](583196 'deref' call_tmp[583203]))
              (583199 yield yret[583194])
              (583186 'end of statement' slot[160816])
            }
          }
          label _continueLabel[583153]
          _indexOfInterest[583148]
          _iterator[583149]
        }
        label _breakLabel[583154]
      }
      (583192 return ret[583190])
    }
    function chpl__forexpr9[583121](arg iterExpr[583124]:_any[178](?), arg this[583128]:DefaultAssociativeArr[161422](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[583211] "RVV" "temp"
      unknown _iterator[583131] "expr temp" "maybe ref" "temp"
      (583133 'move' _iterator[583131] iterExpr[583124])
      unknown call_tmp[583218] "expr temp" "maybe param" "maybe type" "temp"
      (583221 'move' call_tmp[583218](583136 call chpl__loopexpr_iter9 _iterator[583131] this[583128]))
      (583216 'move' ret[583211](583215 'deref' call_tmp[583218]))
      (583213 return ret[583211])
    }
    unknown call_tmp[583225] "expr temp" "maybe param" "maybe type" "temp"
    (583228 'move' call_tmp[583225](361169 call dom _mt[243] this[161492]))
    unknown call_tmp[583232] "expr temp" "maybe param" "maybe type" "temp"
    (583235 'move' call_tmp[583232](160809 call(160805 call (partial) _fullSlots _mt[243] call_tmp[583225])))
    unknown call_tmp[583237] "maybe param" "maybe type" "temp"
    (583240 'move' call_tmp[583237](583126 call chpl__forexpr9 call_tmp[583232] this[161492]))
    (583244 'iterator record set shape' call_tmp[583237] call_tmp[583232] 1)
    unknown call_tmp[675233] "expr temp" "maybe param" "maybe type" "temp"
    (675236 'move' call_tmp[675233](160787 call chpl_build_low_bounded_range 0))
    unknown call_tmp[675240] "expr temp" "maybe param" "maybe type" "temp"
    (675243 'move' call_tmp[675240](361164 call dom _mt[243] this[161492]))
    unknown call_tmp[675247] "expr temp" "maybe param" "maybe type" "temp"
    (675250 'move' call_tmp[675247](160790 call dsiNumIndices _mt[243] call_tmp[675240]))
    unknown call_tmp[675252] "expr temp" "maybe param" "maybe type" "temp"
    (675255 'move' call_tmp[675252](160793 call # call_tmp[675233] call_tmp[675247]))
    unknown call_tmp[675257] "expr temp" "maybe param" "maybe type" "temp"
    (675260 'move' call_tmp[675257](160797 call chpl__ensureDomainExpr call_tmp[675252]))
    unknown call_tmp[675264] "expr temp" "maybe param" "maybe type" "temp"
    (675267 'move' call_tmp[675264](387312 call eltType _mt[243] this[161492]))
    unknown call_tmp[675269] "maybe param" "maybe type" "temp"
    (675272 'move' call_tmp[675269](160799 call chpl__buildArrayRuntimeType call_tmp[675257] call_tmp[675264]))
    (544193 'init var' tableCopy[160818] call_tmp[583237] call_tmp[675269])
    (160821 'end of statement')
    (160827 call sort tableCopy[160818](comparator = comparator[160778]))
    (482496 'end of statement' tableCopy[160818])
    {
      unknown _indexOfInterest[160834] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160835] "expr temp" "temp"
      (160844 'move' _iterator[160835](160842 call _getIterator tableCopy[160818]))
      Defer
      {
        {
          (160860 call _freeIterator _iterator[160835])
        }
      }
      { scopeless type
        (160849 'move' _indexOfInterest[160834](160846 call iteratorIndex _iterator[160835]))
      }
      ForLoop[160836]
      {
        unknown elem[160853] "index var" "insert auto destroy"
        (482499 'end of statement')
        (160855 'move' elem[160853] _indexOfInterest[160834])
        (482500 'end of statement' elem[160853])
        unknown yret[521343] "YVV" "temp"
        (521346 'move' yret[521343](521345 'deref' elem[160853]))
        (521348 yield yret[521343])
        (482502 'end of statement' elem[160853])
        label _continueLabel[160839]
        _indexOfInterest[160834]
        _iterator[160835]
      }
      label _breakLabel[160840]
    }
    (521341 return ret[521339])
    (355216 'used modules list'(160783 'use' Sort[267885]))
  }
  function DefaultAssociativeArr[161422](?)._doDefaultInitSlot[160875](arg _mt[161498]:_MT[238], arg this[161496]:DefaultAssociativeArr[161422](?), arg slot[160872]:int(64)[13], arg inAdd[160878]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675276] "expr temp" "maybe param" "maybe type" "temp"
    (675279 'move' call_tmp[675276](387328 call eltType _mt[243] this[161496]))
    unknown call_tmp[675281] "expr temp" "maybe param" "maybe type" "temp"
    (675284 'move' call_tmp[675281](160884 call isDefaultInitializable call_tmp[675276]))
    unknown call_tmp[675286] "expr temp" "maybe param" "maybe type" "temp"
    (675289 'move' call_tmp[675286](160885 call ! call_tmp[675281]))
    unknown call_tmp[675291] "expr temp" "maybe param" "maybe type" "temp"
    (675294 'move' call_tmp[675291](160995 call _cond_test call_tmp[675286]))
    if call_tmp[675291]
    {
      unknown call_tmp[675296] "expr temp" "maybe param" "maybe type" "temp"
      (675299 'move' call_tmp[675296](160970 call _cond_test inAdd[160878]))
      if call_tmp[675296]
      {
        unknown call_tmp[675301] "expr temp" "maybe param" "maybe type" "temp"
        (675304 'move' call_tmp[675301](160923 call + "Can't resize domains whose arrays' elements don't " "have default values"))
        (160926 call halt call_tmp[675301])
      }
      {
        unknown call_tmp[675306] "expr temp" "maybe param" "maybe type" "temp"
        (675309 'move' call_tmp[675306](160964 call + "Can't default initialize associative arrays whose " "elements have no default value"))
        (160967 call halt call_tmp[675306])
      }
    }
    {
      unknown initval[160976] "dead at end of block" "no auto destroy"
      unknown call_tmp[675313] "expr temp" "maybe param" "maybe type" "temp"
      (675316 'move' call_tmp[675313](387334 call eltType _mt[243] this[161496]))
      (544195 'default init var' initval[160976] call_tmp[675313])
      (160979 'end of statement')
      unknown dst[160985] "dead at end of block" "ref var"
      unknown call_tmp[675320] "expr temp" "maybe param" "maybe type" "temp"
      (675323 'move' call_tmp[675320](160984 call(387339 call (partial) data _mt[243] this[161496]) slot[160872]))
      (544198 'move' dst[160985](544197 'addr of' call_tmp[675320]))
      (160988 'end of statement')
      (160993 '=' dst[160985] initval[160976])
      (482506 'end of statement' dst[160985] initval[160976])
    }
    (521350 return _void[55])
  }
  function DefaultAssociativeArr[161422](?)._defaultInitSlot[161008](arg _mt[161502]:_MT[238], arg this[161500]:DefaultAssociativeArr[161422](?), arg slot[161005]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161015 call(387346 call (partial) _doDefaultInitSlot _mt[243] this[161500]) slot[161005](inAdd = 1))
    (521352 return _void[55])
  }
  function DefaultAssociativeArr[161422](?)._deinitSlot[161026](arg _mt[161506]:_MT[238], arg this[161504]:DefaultAssociativeArr[161422](?), arg slot[161023]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675331] "expr temp" "maybe param" "maybe type" "temp"
    (675334 'move' call_tmp[675331](161032 call(387358 call (partial) data _mt[243] this[161504]) slot[161023]))
    (161034 call(387353 call (partial) _deinitElement _mt[243] this[161504]) call_tmp[675331])
    (521354 return _void[55])
  }
  function DefaultAssociativeArr[161422](?)._elementNeedsDeinit[161041](arg _mt[161510]:_MT[238], arg this[161508]:DefaultAssociativeArr[161422](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521358] "RVV" "param" "temp"
    unknown call_tmp[675338] "expr temp" "maybe param" "maybe type" "temp"
    (675341 'move' call_tmp[675338](387364 call eltType _mt[243] this[161508]))
    unknown call_tmp[675343] "expr temp" "maybe param" "maybe type" "temp"
    (675346 'move' call_tmp[675343](161046 'needs auto destroy' call_tmp[675338]))
    (521363 'move' ret[521358](521362 'deref' call_tmp[675343]))
    (521360 return ret[521358])
  }
  function DefaultAssociativeArr[161422](?)._deinitElement[161058](arg _mt[161514]:_MT[238], arg this[161512]:DefaultAssociativeArr[161422](?), ref arg elt[161055] :
  (387369 call eltType _mt[243] this[161512])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675352] "expr temp" "maybe param" "maybe type" "temp"
    (675355 'move' call_tmp[675352](161062 call(387375 call (partial) _elementNeedsDeinit _mt[243] this[161512])))
    unknown call_tmp[675357] "expr temp" "maybe param" "maybe type" "temp"
    (675360 'move' call_tmp[675357](161069 call _cond_test call_tmp[675352]))
    if call_tmp[675357]
    {
      (161066 call chpl__autoDestroy elt[161055])
    }
    (521365 return _void[55])
  }
  function DefaultAssociativeArr[161422](?)._startRehash[161082](arg _mt[161518]:_MT[238], arg this[161516]:DefaultAssociativeArr[161422](?), arg newSize[161079]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675364] "expr temp" "maybe param" "maybe type" "temp"
    (675367 'move' call_tmp[675364](387381 call tmpData _mt[243] this[161516]))
    unknown call_tmp[675371] "expr temp" "maybe param" "maybe type" "temp"
    (675374 'move' call_tmp[675371](387386 call data _mt[243] this[161516]))
    (161086 call = call_tmp[675364] call_tmp[675371])
    (482513 'end of statement')
    unknown call_tmp[675378] "expr temp" "maybe param" "maybe type" "temp"
    (675381 'move' call_tmp[675378](387391 call data _mt[243] this[161516]))
    unknown call_tmp[675385] "expr temp" "maybe param" "maybe type" "temp"
    (675388 'move' call_tmp[675385](361174 call dom _mt[243] this[161516]))
    unknown call_tmp[675392] "expr temp" "maybe param" "maybe type" "temp"
    (675395 'move' call_tmp[675392](161092 call table _mt[243] call_tmp[675385]))
    unknown call_tmp[675401] "expr temp" "maybe param" "maybe type" "temp"
    (675404 'move' call_tmp[675401](387397 call eltType _mt[243] this[161516]))
    unknown call_tmp[675406] "expr temp" "maybe param" "maybe type" "temp"
    (675409 'move' call_tmp[675406](161101 call(161095 call (partial) allocateData _mt[243] call_tmp[675392]) newSize[161079] call_tmp[675401]))
    (161102 call = call_tmp[675378] call_tmp[675406])
    (521367 return _void[55])
  }
  function DefaultAssociativeArr[161422](?)._finishRehash[161113](arg _mt[161522]:_MT[238], arg this[161520]:DefaultAssociativeArr[161422](?), arg oldSize[161110]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675413] "expr temp" "maybe param" "maybe type" "temp"
    (675416 'move' call_tmp[675413](387402 call tmpData _mt[243] this[161520]))
    (161119 call _ddata_free call_tmp[675413] oldSize[161110])
    (482515 'end of statement')
    unknown call_tmp[675420] "expr temp" "maybe param" "maybe type" "temp"
    (675423 'move' call_tmp[675420](387408 call tmpData _mt[243] this[161520]))
    (161124 call = call_tmp[675420] nil[44])
    (521369 return _void[55])
  }
  function DefaultAssociativeArr[161422](?)._moveElementDuringRehash[161135](arg _mt[161526]:_MT[238], arg this[161524]:DefaultAssociativeArr[161422](?), arg oldslot[161132]:int(64)[13], arg newslot[161138]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const src[161145] "dead at end of block" "const" "ref var"
    unknown call_tmp[675427] "expr temp" "maybe param" "maybe type" "temp"
    (675430 'move' call_tmp[675427](161144 call(387413 call (partial) tmpData _mt[243] this[161524]) oldslot[161132]))
    (544201 'move' src[161145](544200 'addr of' call_tmp[675427]))
    (161148 'end of statement')
    unknown dst[161154] "dead at end of block" "ref var"
    unknown call_tmp[675434] "expr temp" "maybe param" "maybe type" "temp"
    (675437 'move' call_tmp[675434](161153 call(387419 call (partial) data _mt[243] this[161524]) newslot[161138]))
    (544204 'move' dst[161154](544203 'addr of' call_tmp[675434]))
    (161157 'end of statement')
    (161162 '=' dst[161154] src[161145])
    (482517 'end of statement' dst[161154] src[161145])
    (521371 return _void[55])
  }
  function DefaultAssociativeArr[161422](?).dsiTargetLocales[161168](arg _mt[161530]:_MT[238], arg this[161528]:DefaultAssociativeArr[161422](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521375] "RVV" "temp"
    unknown call_tmp[675439] "expr temp" "maybe param" "maybe type" "temp"
    (675442 'move' call_tmp[675439](161171 '_wide_get_locale' this[161528]))
    unknown call_tmp[675444] "expr temp" "maybe param" "maybe type" "temp"
    (675447 'move' call_tmp[675444](161172 call chpl_localeID_to_locale call_tmp[675439]))
    unknown call_tmp[675449] "expr temp" "maybe param" "maybe type" "temp"
    (675452 'move' call_tmp[675449](161175 call chpl__buildArrayExpr call_tmp[675444]))
    (521380 'move' ret[521375](521379 'deref' call_tmp[675449]))
    (521377 return ret[521375])
  }
  function DefaultAssociativeArr[161422](?).dsiHasSingleLocalSubdomain[161184](arg _mt[161534]:_MT[238], arg this[161532]:DefaultAssociativeArr[161422](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521384] "RVV" "param" "temp"
    (521389 'move' ret[521384](521388 'deref' 1))
    (521386 return ret[521384])
  }
  function DefaultAssociativeArr[161422](?).dsiLocalSubdomain[161198](arg _mt[161538]:_MT[238], arg this[161536]:DefaultAssociativeArr[161422](?), arg loc[161195]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521393] "RVV" "temp"
    unknown call_tmp[675454] "expr temp" "maybe param" "maybe type" "temp"
    (675457 'move' call_tmp[675454](161201 '_wide_get_locale' this[161536]))
    unknown call_tmp[675459] "expr temp" "maybe param" "maybe type" "temp"
    (675462 'move' call_tmp[675459](161202 call chpl_localeID_to_locale call_tmp[675454]))
    unknown call_tmp[675464] "expr temp" "maybe param" "maybe type" "temp"
    (675467 'move' call_tmp[675464](161205 call == call_tmp[675459] loc[161195]))
    unknown call_tmp[675469] "expr temp" "maybe param" "maybe type" "temp"
    (675472 'move' call_tmp[675469](161235 call _cond_test call_tmp[675464]))
    if call_tmp[675469]
    {
      unknown call_tmp[675476] "expr temp" "maybe param" "maybe type" "temp"
      (675479 'move' call_tmp[675476](387430 call dom _mt[243] this[161536]))
      unknown call_tmp[675481] "expr temp" "maybe param" "maybe type" "temp"
      (675484 'move' call_tmp[675481](161210 call _getDomain call_tmp[675476]))
      (521398 'move' ret[521393](521397 'deref' call_tmp[675481]))
      gotoReturn _end_dsiLocalSubdomain[521391] _end_dsiLocalSubdomain[521391]
    }
    {
      unknown a[161227] "dead at end of block" "insert auto destroy"
      unknown call_tmp[675488] "expr temp" "maybe param" "maybe type" "temp"
      (675491 'move' call_tmp[675488](361179 call dom _mt[243] this[161536]))
      unknown call_tmp[675495] "expr temp" "maybe param" "maybe type" "temp"
      (675498 'move' call_tmp[675495](161215 call idxType _mt[243] call_tmp[675488]))
      unknown call_tmp[675502] "expr temp" "maybe param" "maybe type" "temp"
      (675505 'move' call_tmp[675502](361184 call dom _mt[243] this[161536]))
      unknown call_tmp[675509] "expr temp" "maybe param" "maybe type" "temp"
      (675512 'move' call_tmp[675509](161220 call parSafe _mt[243] call_tmp[675502]))
      unknown call_tmp[675514] "expr temp" "maybe param" "maybe type" "temp"
      (675517 'move' call_tmp[675514](161225 call chpl__buildDomainRuntimeType defaultDist[94058] call_tmp[675495](parSafe = call_tmp[675509])))
      (544206 'default init var' a[161227] call_tmp[675514])
      (161230 'end of statement')
      (521403 'move' ret[521393](521402 'deref' a[161227]))
      gotoReturn _end_dsiLocalSubdomain[521391] _end_dsiLocalSubdomain[521391]
      (482523 'end of statement' a[161227])
    }
    label _end_dsiLocalSubdomain[521391]
    (521395 return ret[521393])
  }
  function DefaultAssociativeArr[161422](?).dsiElementInitializationComplete[161244](arg _mt[161542]:_MT[238], arg this[161540]:DefaultAssociativeArr[161422](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675521] "expr temp" "maybe param" "maybe type" "temp"
    (675524 'move' call_tmp[675521](161247 call eltsNeedDeinit _mt[243] this[161540]))
    (161251 call = call_tmp[675521] 1)
    (521407 return _void[55])
  }
  function DefaultAssociativeArr[161422](?).dsiElementDeinitializationComplete[161259](arg _mt[161546]:_MT[238], arg this[161544]:DefaultAssociativeArr[161422](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675528] "expr temp" "maybe param" "maybe type" "temp"
    (675531 'move' call_tmp[675528](161262 call eltsNeedDeinit _mt[243] this[161544]))
    (161266 call = call_tmp[675528] 0)
    (521409 return _void[55])
  }
  function DefaultAssociativeArr[161422](?).dsiDestroyArr[161278](arg _mt[161550]:_MT[238], arg this[161548]:DefaultAssociativeArr[161422](?), arg deinitElts[161275]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown tmp[428134] "maybe param" "temp"
    (428145 'move' tmp[428134] deinitElts[161275])
    unknown call_tmp[675533] "expr temp" "maybe param" "maybe type" "temp"
    (675536 'move' call_tmp[675533](428147 call _cond_invalid tmp[428134]))
    if call_tmp[675533]
    {
      (428150 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570112] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570113] "maybe param" "temp"
    unknown call_tmp[675538] "expr temp" "maybe param" "maybe type" "temp"
    (675541 'move' call_tmp[675538](428135 call isTrue tmp[428134]))
    (570118 'move' tmp[570113](570116 call _cond_test call_tmp[675538]))
    if tmp[570113]
    {
      unknown tmp[570120] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[675545] "expr temp" "maybe param" "maybe type" "temp"
      (675548 'move' call_tmp[675545](161282 call eltsNeedDeinit _mt[243] this[161548]))
      (570122 'move' tmp[570120](428138 call isTrue call_tmp[675545]))
      (570127 'move' tmp[570112](570124 '_paramFoldLogical' tmp[570113] tmp[570120]))
    }
    {
      (570132 'move' tmp[570112](570129 '_paramFoldLogical' tmp[570113] 0))
    }
    unknown call_tmp[675550] "expr temp" "maybe param" "maybe type" "temp"
    (675553 'move' call_tmp[675550](161406 call _cond_test tmp[570112]))
    if call_tmp[675550]
    {
      unknown call_tmp[675557] "expr temp" "maybe param" "maybe type" "temp"
      (675560 'move' call_tmp[675557](161289 call(387437 call (partial) _elementNeedsDeinit _mt[243] this[161548])))
      unknown call_tmp[675562] "expr temp" "maybe param" "maybe type" "temp"
      (675565 'move' call_tmp[675562](161401 call _cond_test call_tmp[675557]))
      if call_tmp[675562]
      {
        unknown call_tmp[675569] "expr temp" "maybe param" "maybe type" "temp"
        (675572 'move' call_tmp[675569](387442 call eltType _mt[243] this[161548]))
        unknown call_tmp[675574] "expr temp" "maybe param" "maybe type" "temp"
        (675577 'move' call_tmp[675574](161293 call _deinitElementsIsParallel call_tmp[675569]))
        unknown call_tmp[675579] "expr temp" "maybe param" "maybe type" "temp"
        (675582 'move' call_tmp[675579](161396 call _cond_test call_tmp[675574]))
        if call_tmp[675579]
        {
          unknown call_tmp[675586] "expr temp" "maybe param" "maybe type" "temp"
          (675589 'move' call_tmp[675586](361192 call dom _mt[243] this[161548]))
          unknown call_tmp[675593] "expr temp" "maybe param" "maybe type" "temp"
          (675596 'move' call_tmp[675593](161296 call table _mt[243] call_tmp[675586]))
          unknown call_tmp[675600] "expr temp" "maybe param" "maybe type" "temp"
          (675603 'move' call_tmp[675600](161303 call(161299 call (partial) allSlots _mt[243] call_tmp[675593])))
          Forall {
            induction variables:
              
              unknown slot[161326] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[675600]
            shadow variables:
            other variables
              forall body
            {
              unknown call_tmp[675607] "expr temp" "maybe param" "maybe type" "temp"
              (675610 'move' call_tmp[675607](361197 call dom _mt[243] this[161548]))
              unknown call_tmp[675614] "expr temp" "maybe param" "maybe type" "temp"
              (675617 'move' call_tmp[675614](161310 call(161305 call (partial) _isSlotFull _mt[243] call_tmp[675607]) slot[161326]))
              unknown call_tmp[675619] "expr temp" "maybe param" "maybe type" "temp"
              (675622 'move' call_tmp[675619](161320 call _cond_test call_tmp[675614]))
              if call_tmp[675619]
              {
                unknown call_tmp[675628] "expr temp" "maybe param" "maybe type" "temp"
                (675631 'move' call_tmp[675628](161315 call(387452 call (partial) data _mt[243] this[161548]) slot[161326]))
                (161317 call(387447 call (partial) _deinitElement _mt[243] this[161548]) call_tmp[675628])
                (482528 'end of statement' slot[161326])
              }
            }
          }
        }
        {
          {
            unknown _indexOfInterest[161361] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[161362] "expr temp" "temp"
            unknown call_tmp[675635] "expr temp" "maybe param" "maybe type" "temp"
            (675638 'move' call_tmp[675635](361202 call dom _mt[243] this[161548]))
            unknown call_tmp[675642] "expr temp" "maybe param" "maybe type" "temp"
            (675645 'move' call_tmp[675642](161332 call table _mt[243] call_tmp[675635]))
            unknown call_tmp[675649] "expr temp" "maybe param" "maybe type" "temp"
            (675652 'move' call_tmp[675649](161339 call(161335 call (partial) allSlots _mt[243] call_tmp[675642])))
            (161371 'move' _iterator[161362](161369 call _getIterator call_tmp[675649]))
            Defer
            {
              {
                (161388 call _freeIterator _iterator[161362])
              }
            }
            { scopeless type
              (161377 'move' _indexOfInterest[161361](161374 call iteratorIndex _iterator[161362]))
            }
            ForLoop[161363]
            {
              unknown slot[161381] "index var" "insert auto destroy"
              (482531 'end of statement')
              (161383 'move' slot[161381] _indexOfInterest[161361])
              (482532 'end of statement' slot[161381])
              {
                unknown call_tmp[675656] "expr temp" "maybe param" "maybe type" "temp"
                (675659 'move' call_tmp[675656](361207 call dom _mt[243] this[161548]))
                unknown call_tmp[675663] "expr temp" "maybe param" "maybe type" "temp"
                (675666 'move' call_tmp[675663](161346 call(161341 call (partial) _isSlotFull _mt[243] call_tmp[675656]) slot[161381]))
                unknown call_tmp[675668] "expr temp" "maybe param" "maybe type" "temp"
                (675671 'move' call_tmp[675668](161356 call _cond_test call_tmp[675663]))
                if call_tmp[675668]
                {
                  unknown call_tmp[675677] "expr temp" "maybe param" "maybe type" "temp"
                  (675680 'move' call_tmp[675677](161351 call(387463 call (partial) data _mt[243] this[161548]) slot[161381]))
                  (161353 call(387458 call (partial) _deinitElement _mt[243] this[161548]) call_tmp[675677])
                  (482534 'end of statement' slot[161381])
                }
              }
              label _continueLabel[161366]
              _indexOfInterest[161361]
              _iterator[161362]
            }
            label _breakLabel[161367]
          }
        }
      }
    }
    unknown call_tmp[675684] "expr temp" "maybe param" "maybe type" "temp"
    (675687 'move' call_tmp[675684](161412 call eltsNeedDeinit _mt[243] this[161548]))
    (161416 call = call_tmp[675684] 0)
    (521411 return _void[55])
  }
  function DefaultAssociativeArr[161422](?).super[810897](arg _mt[810899]:_MT[238], arg this[810901]:DefaultAssociativeArr[161422](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810911] "RVV" "temp"
    unknown call_tmp[810918] "expr temp" "maybe param" "maybe type" "temp"
    (810921 'move' call_tmp[810918](810905 '.v' this[810901] c"super"))
    (810916 'move' ret[810911](810915 'deref' call_tmp[810918]))
    (810913 return ret[810911])
  }
  function DefaultAssociativeArr[810928](?).idxType[810923](arg _mt[810925]:_MT[238], arg this[810930]:DefaultAssociativeArr[810928](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810965] "RVV" "temp" "type variable"
    unknown borrowOfThis[810932]
    (810957 'end of statement')
    (810934 'move' borrowOfThis[810932](810937 call _cast _borrowedNonNilable[214](?) this[810930]))
    (810958 'end of statement' borrowOfThis[810932])
    unknown call_tmp[810979] "expr temp" "maybe param" "maybe type" "temp"
    (810982 'move' call_tmp[810979](810947 'is bound' borrowOfThis[810932] c"idxType"))
    if call_tmp[810979]
    {
      unknown call_tmp[810984] "expr temp" "maybe param" "maybe type" "temp"
      (810987 'move' call_tmp[810984](810942 '.v' borrowOfThis[810932] c"idxType"))
      unknown call_tmp[810989] "expr temp" "maybe param" "maybe type" "temp"
      (810992 'move' call_tmp[810989](810943 call chpl_checkLegalTypeFieldAccessor this[810930] call_tmp[810984] "idxType"))
      (810970 'move' ret[810965](810969 'deref' call_tmp[810989]))
      gotoReturn _end_idxType[810963] _end_idxType[810963]
      (810960 'end of statement' borrowOfThis[810932])
    }
    {
      (810975 'move' ret[810965](810974 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810963] _end_idxType[810963]
    }
    label _end_idxType[810963]
    (810967 return ret[810965])
  }
  function DefaultAssociativeArr[810928](?).idxType[810994](arg _mt[810996]:_MT[238], arg this[810998]:DefaultAssociativeArr[810928](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811033] "RVV" "temp" "type variable"
    unknown borrowOfThis[811000] "type variable"
    (811025 'end of statement')
    (811002 'move' borrowOfThis[811000](811005 call _cast _borrowedNonNilable[214](?) this[810998]))
    (811026 'end of statement' borrowOfThis[811000])
    unknown call_tmp[811047] "expr temp" "maybe param" "maybe type" "temp"
    (811050 'move' call_tmp[811047](811015 'is bound' borrowOfThis[811000] c"idxType"))
    if call_tmp[811047]
    {
      unknown call_tmp[811052] "expr temp" "maybe param" "maybe type" "temp"
      (811055 'move' call_tmp[811052](811010 '.v' borrowOfThis[811000] c"idxType"))
      unknown call_tmp[811057] "expr temp" "maybe param" "maybe type" "temp"
      (811060 'move' call_tmp[811057](811011 call chpl_checkLegalTypeFieldAccessor this[810998] call_tmp[811052] "idxType"))
      (811038 'move' ret[811033](811037 'deref' call_tmp[811057]))
      gotoReturn _end_idxType[811031] _end_idxType[811031]
      (811028 'end of statement' borrowOfThis[811000])
    }
    {
      (811043 'move' ret[811033](811042 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[811031] _end_idxType[811031]
    }
    label _end_idxType[811031]
    (811035 return ret[811033])
  }
  function DefaultAssociativeArr[810928](?).parSafeDom[811062](arg _mt[811064]:_MT[238], arg this[811066]:DefaultAssociativeArr[810928](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811097] "RVV" "param" "temp"
    unknown borrowOfThis[811068]
    (811089 'end of statement')
    (811070 'move' borrowOfThis[811068](811073 call _cast _borrowedNonNilable[214](?) this[811066]))
    (811090 'end of statement' borrowOfThis[811068])
    unknown call_tmp[811111] "expr temp" "maybe param" "maybe type" "temp"
    (811114 'move' call_tmp[811111](811079 'is bound' borrowOfThis[811068] c"parSafeDom"))
    if call_tmp[811111]
    {
      unknown call_tmp[811116] "expr temp" "maybe param" "maybe type" "temp"
      (811119 'move' call_tmp[811116](811078 '.' borrowOfThis[811068] c"parSafeDom"))
      (811102 'move' ret[811097](811101 'deref' call_tmp[811116]))
      gotoReturn _end_parSafeDom[811095] _end_parSafeDom[811095]
      (811092 'end of statement' borrowOfThis[811068])
    }
    {
      (811107 'move' ret[811097](811106 'deref' ?[260]))
      gotoReturn _end_parSafeDom[811095] _end_parSafeDom[811095]
    }
    label _end_parSafeDom[811095]
    (811099 return ret[811097])
  }
  function DefaultAssociativeArr[810928](?).parSafeDom[811121](arg _mt[811123]:_MT[238], arg this[811125]:DefaultAssociativeArr[810928](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811156] "RVV" "param" "temp"
    unknown borrowOfThis[811127] "type variable"
    (811148 'end of statement')
    (811129 'move' borrowOfThis[811127](811132 call _cast _borrowedNonNilable[214](?) this[811125]))
    (811149 'end of statement' borrowOfThis[811127])
    unknown call_tmp[811170] "expr temp" "maybe param" "maybe type" "temp"
    (811173 'move' call_tmp[811170](811138 'is bound' borrowOfThis[811127] c"parSafeDom"))
    if call_tmp[811170]
    {
      unknown call_tmp[811175] "expr temp" "maybe param" "maybe type" "temp"
      (811178 'move' call_tmp[811175](811137 '.' borrowOfThis[811127] c"parSafeDom"))
      (811161 'move' ret[811156](811160 'deref' call_tmp[811175]))
      gotoReturn _end_parSafeDom[811154] _end_parSafeDom[811154]
      (811151 'end of statement' borrowOfThis[811127])
    }
    {
      (811166 'move' ret[811156](811165 'deref' ?[260]))
      gotoReturn _end_parSafeDom[811154] _end_parSafeDom[811154]
    }
    label _end_parSafeDom[811154]
    (811158 return ret[811156])
  }
  function DefaultAssociativeArr[161422](?).dom[811180](arg _mt[811182]:_MT[238], arg this[811184]:DefaultAssociativeArr[161422](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811194] "RVV" "temp"
    unknown call_tmp[811201] "expr temp" "maybe param" "maybe type" "temp"
    (811204 'move' call_tmp[811201](811188 '.' this[811184] c"dom"))
    (811199 'move' ret[811194](811198 'addr of' call_tmp[811201]))
    (811196 return ret[811194])
  }
  function DefaultAssociativeArr[161422](?).dataSize[811206](arg _mt[811208]:_MT[238], arg this[811210]:DefaultAssociativeArr[161422](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811220] "RVV" "temp"
    unknown call_tmp[811227] "expr temp" "maybe param" "maybe type" "temp"
    (811230 'move' call_tmp[811227](811214 '.' this[811210] c"dataSize"))
    (811225 'move' ret[811220](811224 'addr of' call_tmp[811227]))
    (811222 return ret[811220])
  }
  function DefaultAssociativeArr[161422](?).data[811232](arg _mt[811234]:_MT[238], arg this[811236]:DefaultAssociativeArr[161422](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811246] "RVV" "temp"
    unknown call_tmp[811253] "expr temp" "maybe param" "maybe type" "temp"
    (811256 'move' call_tmp[811253](811240 '.' this[811236] c"data"))
    (811251 'move' ret[811246](811250 'addr of' call_tmp[811253]))
    (811248 return ret[811246])
  }
  function DefaultAssociativeArr[161422](?).tmpData[811258](arg _mt[811260]:_MT[238], arg this[811262]:DefaultAssociativeArr[161422](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811272] "RVV" "temp"
    unknown call_tmp[811279] "expr temp" "maybe param" "maybe type" "temp"
    (811282 'move' call_tmp[811279](811266 '.' this[811262] c"tmpData"))
    (811277 'move' ret[811272](811276 'addr of' call_tmp[811279]))
    (811274 return ret[811272])
  }
  function DefaultAssociativeArr[161422](?).eltsNeedDeinit[811284](arg _mt[811286]:_MT[238], arg this[811288]:DefaultAssociativeArr[161422](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811298] "RVV" "temp"
    unknown call_tmp[811305] "expr temp" "maybe param" "maybe type" "temp"
    (811308 'move' call_tmp[811305](811292 '.' this[811288] c"eltsNeedDeinit"))
    (811303 'move' ret[811298](811302 'addr of' call_tmp[811305]))
    (811300 return ret[811298])
  }
  type DefaultAssociativeArr[161422](?) val super[355747]:AbsBaseArr[149701](?) "delay instantiation" "super class" unknown idxType[158986] "type variable" unknown parSafeDom[158990] "param" bool[10] unknown dom[159001](158999 call unmanaged DefaultAssociativeDom[415529](?) idxType[158986](parSafe = parSafeDom[158990])) val dataSize[159006]:int(64)[13] int(64)[13] unknown data[159014](159013 call _ddata[11695](?) eltType[149675]) unknown tmpData[159022](159021 call _ddata[11695](?) eltType[149675]) val eltsNeedDeinit[159027]:bool[10] 1
  type DefaultAssociativeArr[810928](?)
  type DefaultAssociativeArr[386755](?)
  (355202 'used modules list'(156241 'use' DSIUtil[230805])(156248 'use' ChapelDistribution[145427])(156250 'use' ChapelRange[64180])(156251 'use' SysBasic[223433])(156252 'use' ChapelArray[113684])(156256 'use' ChapelBase[307])(156258 'use' ChapelLocks[187268])(156259 'use' IO[230808])(156262 'use' ChapelHashing[155369])(156264 'use' ChapelHashtable[200405])(156266 'use' SysError[264148]))
}