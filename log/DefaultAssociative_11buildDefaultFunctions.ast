AST dump for DefaultAssociative after pass buildDefaultFunctions.
Module use list: DSIUtil ChapelDistribution ChapelRange SysBasic ChapelArray ChapelBase ChapelLocks IO ChapelHashing ChapelHashtable SysError Sort 

{
  function chpl__init_DefaultAssociative[416115]() : void[4] "insert line file info" "module init"
  {
    (544096 'init var' debugDefaultAssoc[156309] 0)
    (156312 'end of statement')
    (544098 'init var' debugAssocDataPar[156314] 0)
    (156317 'end of statement')
    (521473 return _void[55])
  }
  unknown debugDefaultAssoc[156309] "config" "param"
  unknown debugAssocDataPar[156314] "config" "param"
  function DefaultAssociativeDomRehashHelper[156516](?).startRehash[156333](arg _mt[156520]:_MT[238], arg this[156518]:DefaultAssociativeDomRehashHelper[156516](?), arg newSize[156330]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156351] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156352] "expr temp" "temp"
      unknown call_tmp[672987] "expr temp" "maybe param" "maybe type" "temp"
      (672990 'move' call_tmp[672987](360906 call dom _mt[243] this[156518]))
      unknown call_tmp[672994] "expr temp" "maybe param" "maybe type" "temp"
      (672997 'move' call_tmp[672994](156337 call _arrs _mt[243] call_tmp[672987]))
      (156361 'move' _iterator[156352](156359 call _getIterator call_tmp[672994]))
      Defer
      {
        {
          (156378 call _freeIterator _iterator[156352])
        }
      }
      { scopeless type
        (156367 'move' _indexOfInterest[156351](156364 call iteratorIndex _iterator[156352]))
      }
      ForLoop[156353]
      {
        unknown arr[156371] "index var" "insert auto destroy"
        (482190 'end of statement')
        (156373 'move' arr[156371] _indexOfInterest[156351])
        (482191 'end of statement' arr[156371])
        {
          (156348 call(156343 call (partial) _startRehash _mt[243] arr[156371]) newSize[156330])
          (482193 'end of statement' arr[156371])
        }
        label _continueLabel[156356]
        _indexOfInterest[156351]
        _iterator[156352]
      }
      label _breakLabel[156357]
    }
    (520991 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).moveElementDuringRehash[156394](arg _mt[156524]:_MT[238], arg this[156522]:DefaultAssociativeDomRehashHelper[156516](?), arg oldSlot[156391]:int(64)[13], arg newSlot[156397]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156417] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156418] "expr temp" "temp"
      unknown call_tmp[673003] "expr temp" "maybe param" "maybe type" "temp"
      (673006 'move' call_tmp[673003](360912 call dom _mt[243] this[156522]))
      unknown call_tmp[673010] "expr temp" "maybe param" "maybe type" "temp"
      (673013 'move' call_tmp[673010](156402 call _arrs _mt[243] call_tmp[673003]))
      (156427 'move' _iterator[156418](156425 call _getIterator call_tmp[673010]))
      Defer
      {
        {
          (156444 call _freeIterator _iterator[156418])
        }
      }
      { scopeless type
        (156433 'move' _indexOfInterest[156417](156430 call iteratorIndex _iterator[156418]))
      }
      ForLoop[156419]
      {
        unknown arr[156437] "index var" "insert auto destroy"
        (482196 'end of statement')
        (156439 'move' arr[156437] _indexOfInterest[156417])
        (482197 'end of statement' arr[156437])
        {
          (156414 call(156408 call (partial) _moveElementDuringRehash _mt[243] arr[156437]) oldSlot[156391] newSlot[156397])
          (482199 'end of statement' arr[156437])
        }
        label _continueLabel[156422]
        _indexOfInterest[156417]
        _iterator[156418]
      }
      label _breakLabel[156423]
    }
    (520993 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).finishRehash[156460](arg _mt[156528]:_MT[238], arg this[156526]:DefaultAssociativeDomRehashHelper[156516](?), arg oldSize[156457]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156478] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156479] "expr temp" "temp"
      unknown call_tmp[673019] "expr temp" "maybe param" "maybe type" "temp"
      (673022 'move' call_tmp[673019](360918 call dom _mt[243] this[156526]))
      unknown call_tmp[673026] "expr temp" "maybe param" "maybe type" "temp"
      (673029 'move' call_tmp[673026](156464 call _arrs _mt[243] call_tmp[673019]))
      (156488 'move' _iterator[156479](156486 call _getIterator call_tmp[673026]))
      Defer
      {
        {
          (156505 call _freeIterator _iterator[156479])
        }
      }
      { scopeless type
        (156494 'move' _indexOfInterest[156478](156491 call iteratorIndex _iterator[156479]))
      }
      ForLoop[156480]
      {
        unknown arr[156498] "index var" "insert auto destroy"
        (482202 'end of statement')
        (156500 'move' arr[156498] _indexOfInterest[156478])
        (482203 'end of statement' arr[156498])
        {
          (156475 call(156470 call (partial) _finishRehash _mt[243] arr[156498]) oldSize[156457])
          (482205 'end of statement' arr[156498])
        }
        label _continueLabel[156483]
        _indexOfInterest[156478]
        _iterator[156479]
      }
      label _breakLabel[156484]
    }
    (520995 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).super[810386](arg _mt[810388]:_MT[238], arg this[810390]:DefaultAssociativeDomRehashHelper[156516](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810400] "RVV" "temp"
    unknown call_tmp[810407] "expr temp" "maybe param" "maybe type" "temp"
    (810410 'move' call_tmp[810407](810394 '.v' this[810390] c"super"))
    (810405 'move' ret[810400](810404 'deref' call_tmp[810407]))
    (810402 return ret[810400])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).dom[810412](arg _mt[810414]:_MT[238], arg this[810416]:DefaultAssociativeDomRehashHelper[156516](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810426] "RVV" "temp"
    unknown call_tmp[810433] "expr temp" "maybe param" "maybe type" "temp"
    (810436 'move' call_tmp[810433](810420 '.' this[810416] c"dom"))
    (810431 'move' ret[810426](810430 'addr of' call_tmp[810433]))
    (810428 return ret[810426])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).init[810438](arg _mt[810440]:_MT[238], arg this[810441]:DefaultAssociativeDomRehashHelper[156516](?), in arg dom[810516]:unmanaged DefaultAssociativeDom[415587](?) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[810531] "temporary of super field" "temp"
    (810533 'move' super_tmp[810531](810530 '.v' this[810441] c"super"))
    (810451 call(810449 call (partial) init _mt[243] super_tmp[810531]))
    (810557 'end of statement')
    unknown tmp[810536] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[810560] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[810572] "expr temp" "maybe param" "maybe type" "temp"
      (810575 'move' call_tmp[810572](810538 '.v' this[810441] c"super"))
      (810564 'move' call_type_tmp[810560](810541 'typeof' call_tmp[810572]))
    }
    (810542 'move' tmp[810536] call_type_tmp[810560])
    unknown call_tmp[810577] "maybe param" "maybe type" "temp"
    (810580 'move' call_tmp[810577](810547 'cast' tmp[810536] this[810441]))
    unknown chpl__thisAsParent[810544] "dead at end of block" "insert auto destroy" "temp"
    (810568 'init var' chpl__thisAsParent[810544] call_tmp[810577] tmp[810536])
    (810550 'setcid' chpl__thisAsParent[810544])
    (810552 'init field' this[810441] c"dom" dom[810516])
    (810558 'end of statement')
    (810555 'setcid' this[810441])
    (810566 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).deinit[810582](arg _mt[810584]:_MT[238], arg this[810586]:DefaultAssociativeDomRehashHelper[156516](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (810594 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).writeThis[810596](arg _mt[810600]:_MT[238], arg this[810598]:DefaultAssociativeDomRehashHelper[156516](?), arg f[810599]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810605 call writeThisDefaultImpl f[810599] this[810598])
    (810610 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).readThis[810612](arg _mt[810616]:_MT[238], arg this[810614]:DefaultAssociativeDomRehashHelper[156516](?), arg f[810615]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810620 call readThisDefaultImpl f[810615] this[810614])
    (810626 return _void[55])
  }
  type DefaultAssociativeDomRehashHelper[156516](?) val super[355797]:chpl__rehashHelpers[202396] "super class" val dom[156323]:unmanaged DefaultAssociativeDom[415587](?) unmanaged DefaultAssociativeDom[415587](?)
  type DefaultAssociativeDomRehashHelper[386804](?)
  function DefaultAssociativeDom[158900](?).lockTable[156577](arg _mt[158904]:_MT[238], arg this[158902]:DefaultAssociativeDom[158900](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[673035] "expr temp" "maybe param" "maybe type" "temp"
    (673038 'move' call_tmp[673035](386787 call parSafe _mt[243] this[158902]))
    unknown call_tmp[673040] "expr temp" "maybe param" "maybe type" "temp"
    (673043 'move' call_tmp[673040](156587 call _cond_test call_tmp[673035]))
    if call_tmp[673040]
    {
      unknown call_tmp[673047] "expr temp" "maybe param" "maybe type" "temp"
      (673050 'move' call_tmp[673047](360926 call tableLock _mt[243] this[158902]))
      (156585 call(156581 call (partial) lock _mt[243] call_tmp[673047]))
    }
    (520997 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).unlockTable[156597](arg _mt[158908]:_MT[238], arg this[158906]:DefaultAssociativeDom[158900](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[673056] "expr temp" "maybe param" "maybe type" "temp"
    (673059 'move' call_tmp[673056](386792 call parSafe _mt[243] this[158906]))
    unknown call_tmp[673061] "expr temp" "maybe param" "maybe type" "temp"
    (673064 'move' call_tmp[673061](156607 call _cond_test call_tmp[673056]))
    if call_tmp[673061]
    {
      unknown call_tmp[673068] "expr temp" "maybe param" "maybe type" "temp"
      (673071 'move' call_tmp[673068](360931 call tableLock _mt[243] this[158906]))
      (156605 call(156601 call (partial) unlock _mt[243] call_tmp[673068]))
    }
    (520999 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).linksDistribution[156617](arg _mt[158912]:_MT[238], arg this[158910]:DefaultAssociativeDom[158900](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521003] "RVV" "param" "temp"
    (521008 'move' ret[521003](521007 'deref' 0))
    (521005 return ret[521003])
  }
  function DefaultAssociativeDom[158900](?).dsiLinksDistribution[156627](arg _mt[158916]:_MT[238], arg this[158914]:DefaultAssociativeDom[158900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521012] "RVV" "temp"
    (521017 'move' ret[521012](521016 'deref' 0))
    (521014 return ret[521012])
  }
  function DefaultAssociativeDom[158900](?).init[156639](arg _mt[158920]:_MT[238], arg this[158918]:DefaultAssociativeDom[158900](?), arg idxType[156637]:_any[178](?), param arg parSafe[156642]:bool[10], arg dist[156647]:unmanaged DefaultDist[415560]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462153] "temporary of super field" "temp"
    (462161 'move' super_tmp[462153](462154 '.v' this[158918] c"super"))
    (462157 call init _mt[243] super_tmp[462153])
    (482211 'end of statement')
    unknown tmp[462069] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492475] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[673075] "expr temp" "maybe param" "maybe type" "temp"
      (673078 'move' call_tmp[673075](462071 '.v' this[158918] c"super"))
      (492479 'move' call_type_tmp[492475](462074 'typeof' call_tmp[673075]))
    }
    (462075 'move' tmp[462069] call_type_tmp[492475])
    unknown call_tmp[673080] "maybe param" "maybe type" "temp"
    (673083 'move' call_tmp[673080](462080 'cast' tmp[462069] this[158918]))
    unknown chpl__thisAsParent[462077] "dead at end of block" "insert auto destroy" "temp"
    (544100 'init var' chpl__thisAsParent[462077] call_tmp[673080] tmp[462069])
    (462083 'setcid' chpl__thisAsParent[462077])
    (482212 'end of statement')
    unknown call_tmp[673085] "expr temp" "maybe param" "maybe type" "temp"
    (673088 'move' call_tmp[673085](156653 call chpl__validDefaultAssocDomIdxType idxType[156637]))
    unknown call_tmp[673090] "expr temp" "maybe param" "maybe type" "temp"
    (673093 'move' call_tmp[673090](156654 call ! call_tmp[673085]))
    unknown call_tmp[673095] "expr temp" "maybe param" "maybe type" "temp"
    (673098 'move' call_tmp[673095](156699 call _cond_test call_tmp[673090]))
    if call_tmp[673095]
    {
      unknown call_tmp[673100] "expr temp" "maybe param" "maybe type" "temp"
      (673103 'move' call_tmp[673100](156677 call _cast string[26] idxType[156637]))
      (156697 call compilerError "Default Associative domains with idxType=" call_tmp[673100] " are not allowed" 2)
    }
    unknown tmp[462085] "temp" "type variable"
    (462087 'move' tmp[462085] idxType[156637])
    (462089 'init field' this[158918] c"idxType" tmp[462085])
    unknown call_tmp[673105] "expr temp" "maybe param" "maybe type" "temp"
    (673108 'move' call_tmp[673105](462094 call _cast bool[10] parSafe[156642]))
    (462096 'init field' this[158918] c"parSafe" call_tmp[673105])
    (482214 'end of statement')
    unknown tmp[462099] "temp"
    (462102 'init var' tmp[462099] dist[156647] unmanaged DefaultDist[415560])
    (462104 'init field' this[158918] c"dist" tmp[462099])
    (482215 'end of statement')
    unknown tmp[462108] "temp"
    unknown call_tmp[673110] "expr temp" "maybe param" "maybe type" "temp"
    (673113 'move' call_tmp[673110](462111 call chpl__processorAtomicType int(64)[13]))
    (462113 'default init var' tmp[462108] call_tmp[673110])
    (462115 '.=' this[158918] c"numEntries" tmp[462108])
    (482216 'end of statement')
    unknown tmp[462119] "temp"
    unknown tmp[569951] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569952] "maybe param" "temp"
    unknown call_tmp[673115] "expr temp" "maybe param" "maybe type" "temp"
    (673118 'move' call_tmp[673115](462133 '.v' this[158918] c"parSafe"))
    (569957 'move' tmp[569952](569955 call _cond_test call_tmp[673115]))
    if tmp[569952]
    {
      (569962 'move' tmp[569951](569959 '_paramFoldLogical' tmp[569952] chpl_LocalSpinlock[187432]))
    }
    {
      (569967 'move' tmp[569951](569964 '_paramFoldLogical' tmp[569952] nothing[7]))
    }
    (462127 'default init var' tmp[462119] tmp[569951])
    (462129 '.=' this[158918] c"tableLock" tmp[462119])
    (482217 'end of statement')
    unknown call_tmp[673120] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673123 'move' call_tmp[673120](748136 'new' chpl__hashtable[204564](?) idxType[156637] nothing[7]))
    unknown call_tmp[673125] "expr temp" "maybe param" "maybe type" "temp"
    (673128 'move' call_tmp[673125](462148 '.v' this[158918] c"idxType"))
    unknown call_tmp[673130] "maybe param" "maybe type" "temp"
    (673133 'move' call_tmp[673130](462139 call chpl__hashtable[204564](?) call_tmp[673125] nothing[7]))
    unknown tmp[462136] "temp"
    (462142 'init var' tmp[462136] call_tmp[673120] call_tmp[673130])
    (462144 'init field' this[158918] c"table" tmp[462136])
    (482218 'end of statement')
    (462152 'setcid' this[158918])
    (482219 'end of statement')
    unknown call_tmp[673137] "expr temp" "maybe param" "maybe type" "temp"
    (673140 'move' call_tmp[673137](156752 call table _mt[243] this[158918]))
    unknown call_tmp[673144] "expr temp" "maybe param" "maybe type" "temp"
    (673147 'move' call_tmp[673144](156757 call rehashHelpers _mt[243] call_tmp[673137]))
    unknown call_tmp[673149] "expr temp" "maybe param" "maybe type" "temp"
    (673152 'move' call_tmp[673149](156765 call _cast _unmanagedNonNilable[223](?) this[158918]))
    unknown call_tmp[673154] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673157 'move' call_tmp[673154](748137 'new' DefaultAssociativeDomRehashHelper[386804](?) call_tmp[673149]))
    (156769 call = call_tmp[673144] call_tmp[673154])
    (521019 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).deinit[156776](arg _mt[158924]:_MT[238], arg this[158922]:DefaultAssociativeDom[158900](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (521021 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiBuildArray[156785](arg _mt[158928]:_MT[238], arg this[158926]:DefaultAssociativeDom[158900](?), arg eltType[156783]:_any[178](?), param arg initElts[156788]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521025] "RVV" "temp"
    unknown call_tmp[673161] "expr temp" "maybe param" "maybe type" "temp"
    (673164 'move' call_tmp[673161](386815 call idxType _mt[243] this[158926]))
    unknown call_tmp[673168] "expr temp" "maybe param" "maybe type" "temp"
    (673171 'move' call_tmp[673168](386820 call parSafe _mt[243] this[158926]))
    unknown call_tmp[673173] "expr temp" "maybe param" "maybe type" "temp"
    (673176 'move' call_tmp[673173](156805 call _to_unmanaged this[158926]))
    unknown call_tmp[673178] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673181 'move' call_tmp[673178](748138 'new' DefaultAssociativeArr[386809](?)(eltType = eltType[156783])(idxType = call_tmp[673161])(parSafeDom = call_tmp[673168])(dom = call_tmp[673173])(initElts = initElts[156788])(_chpl_manager = unmanaged[220](?))))
    (521030 'move' ret[521025](521029 'deref' call_tmp[673178]))
    (521027 return ret[521025])
  }
  function DefaultAssociativeDom[158900](?).dsiSerialReadWrite[156819](arg _mt[158932]:_MT[238], arg this[158930]:DefaultAssociativeDom[158900](?), arg f[156817]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[673185] "maybe param" "maybe type" "temp"
    (673188 'move' call_tmp[673185](156826 call(156822 call (partial) binary _mt[243] f[156817])))
    unknown binary[156827] "dead at end of block" "insert auto destroy"
    (544102 'init var' binary[156827] call_tmp[673185])
    (156830 'end of statement')
    unknown call_tmp[673192] "expr temp" "maybe param" "maybe type" "temp"
    (673195 'move' call_tmp[673192](156833 call writing _mt[243] f[156817]))
    unknown call_tmp[673197] "expr temp" "maybe param" "maybe type" "temp"
    (673200 'move' call_tmp[673197](157168 call _cond_test call_tmp[673192]))
    if call_tmp[673197]
    {
      unknown call_tmp[673202] "expr temp" "maybe param" "maybe type" "temp"
      (673205 'move' call_tmp[673202](156976 call _cond_test binary[156827]))
      if call_tmp[673202]
      {
        unknown call_tmp[673209] "maybe param" "maybe type" "temp"
        (673212 'move' call_tmp[673209](386827 call dsiNumIndices _mt[243] this[158930]))
        unknown numIndices[156839] "dead at end of block" "insert auto destroy"
        (544104 'init var' numIndices[156839] call_tmp[673209] int(64)[13])
        (156842 'end of statement')
        (156846 call <~> f[156817] numIndices[156839])
        (482222 'end of statement' numIndices[156839])
        {
          unknown _indexOfInterest[156857] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156858] "expr temp" "temp"
          (156867 'move' _iterator[156858](156865 call _getIterator this[158930]))
          Defer
          {
            {
              (156883 call _freeIterator _iterator[156858])
            }
          }
          { scopeless type
            (156872 'move' _indexOfInterest[156857](156869 call iteratorIndex _iterator[156858]))
          }
          ForLoop[156859]
          {
            unknown idx[156876] "index var" "insert auto destroy"
            (482225 'end of statement')
            (156878 'move' idx[156876] _indexOfInterest[156857])
            (482226 'end of statement' idx[156876])
            {
              (156853 call <~> f[156817] idx[156876])
              (482228 'end of statement' idx[156876])
            }
            label _continueLabel[156862]
            _indexOfInterest[156857]
            _iterator[156858]
          }
          label _breakLabel[156863]
        }
      }
      {
        unknown first[156891] "dead at end of block" "insert auto destroy"
        (544106 'init var' first[156891] 1)
        (156894 'end of statement')
        unknown call_tmp[673214] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673217 'move' call_tmp[673214](748139 'new' ioLiteral[238841] "{"))
        (156902 call <~> f[156817] call_tmp[673214])
        (482230 'end of statement')
        {
          unknown _indexOfInterest[156934] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156935] "expr temp" "temp"
          (156944 'move' _iterator[156935](156942 call _getIterator this[158930]))
          Defer
          {
            {
              (156960 call _freeIterator _iterator[156935])
            }
          }
          { scopeless type
            (156949 'move' _indexOfInterest[156934](156946 call iteratorIndex _iterator[156935]))
          }
          ForLoop[156936]
          {
            unknown idx[156953] "index var" "insert auto destroy"
            (482232 'end of statement')
            (156955 'move' idx[156953] _indexOfInterest[156934])
            (482233 'end of statement' idx[156953])
            {
              unknown call_tmp[673219] "expr temp" "maybe param" "maybe type" "temp"
              (673222 'move' call_tmp[673219](156922 call _cond_test first[156891]))
              if call_tmp[673219]
              {
                (156910 call = first[156891] 0)
                (482235 'end of statement' first[156891])
              }
              {
                unknown call_tmp[673224] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (673227 'move' call_tmp[673224](748140 'new' ioLiteral[238841] ", "))
                (156919 call <~> f[156817] call_tmp[673224])
              }
              (156931 call <~> f[156817] idx[156953])
              (482238 'end of statement' idx[156953])
            }
            label _continueLabel[156939]
            _indexOfInterest[156934]
            _iterator[156935]
          }
          label _breakLabel[156940]
        }
        unknown call_tmp[673229] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673232 'move' call_tmp[673229](748141 'new' ioLiteral[238841] "}"))
        (156973 call <~> f[156817] call_tmp[673229])
      }
    }
    {
      (156983 call(386847 call (partial) dsiClear _mt[243] this[158930]))
      (482241 'end of statement')
      unknown call_tmp[673236] "expr temp" "maybe param" "maybe type" "temp"
      (673239 'move' call_tmp[673236](157164 call _cond_test binary[156827]))
      if call_tmp[673236]
      {
        unknown numIndices[156988] "dead at end of block" "insert auto destroy"
        (544108 'default init var' numIndices[156988] int(64)[13])
        (156991 'end of statement')
        (156995 call <~> f[156817] numIndices[156988])
        (482242 'end of statement' numIndices[156988])
        {
          unknown _indexOfInterest[157019] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[157020] "expr temp" "temp"
          unknown call_tmp[673241] "expr temp" "maybe param" "maybe type" "temp"
          (673244 'move' call_tmp[673241](157034 call chpl_direct_range_iter 1 numIndices[156988] 1))
          (157029 'move' _iterator[157020](157027 call _getIterator call_tmp[673241]))
          Defer
          {
            {
              (157050 call _freeIterator _iterator[157020])
            }
          }
          { scopeless type
            (157039 'move' _indexOfInterest[157019](157036 call iteratorIndex _iterator[157020]))
          }
          ForLoop[157021]
          {
            unknown i[157043] "index var" "insert auto destroy"
            (482245 'end of statement')
            (157045 'move' i[157043] _indexOfInterest[157019])
            (482246 'end of statement' i[157043])
            {
              unknown idx[157004] "dead at end of block" "insert auto destroy"
              unknown call_tmp[673248] "expr temp" "maybe param" "maybe type" "temp"
              (673251 'move' call_tmp[673248](386855 call idxType _mt[243] this[158930]))
              (544110 'default init var' idx[157004] call_tmp[673248])
              (157007 'end of statement')
              (157011 call <~> f[156817] idx[157004])
              (482248 'end of statement' idx[157004])
              (157017 call(386861 call (partial) dsiAdd _mt[243] this[158930]) idx[157004])
              (482250 'end of statement' idx[157004])
            }
            label _continueLabel[157024]
            _indexOfInterest[157019]
            _iterator[157020]
          }
          label _breakLabel[157025]
        }
      }
      {
        unknown call_tmp[673255] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673258 'move' call_tmp[673255](748142 'new' ioLiteral[238841] "{"))
        (157063 call <~> f[156817] call_tmp[673255])
        (482252 'end of statement')
        unknown first[157068] "dead at end of block" "insert auto destroy"
        (544112 'init var' first[157068] 1)
        (157071 'end of statement')
        unknown call_tmp[673260] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673263 'move' call_tmp[673260](748143 'new' ioLiteral[238841] "," 1))
        unknown comma[157078] "dead at end of block" "insert auto destroy"
        (544114 'init var' comma[157078] call_tmp[673260])
        (157081 'end of statement')
        unknown call_tmp[673265] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673268 'move' call_tmp[673265](748144 'new' ioLiteral[238841] "}"))
        unknown end[157087] "dead at end of block" "insert auto destroy"
        (544116 'init var' end[157087] call_tmp[673265])
        (157090 'end of statement')
        {
          unknown tmp[157143] "temp"
          (157161 'move' tmp[157143](157159 call _cond_test 1))
          WhileDo[157148]
          {
            {
              Try
              {
                {
                  (157094 call <~> f[156817] end[157087])
                  (482253 'end of statement' end[157087])
                  break _breakLabel[157147] _breakLabel[157147]
                }
              }
              Catch err : BadFormatError
              {
                unknown call_tmp[673270] "expr temp" "maybe param" "maybe type" "temp"
                (673273 'move' call_tmp[673270](354567 'current error'))
                unknown call_tmp[673275] "maybe param" "maybe type" "temp"
                (673278 'move' call_tmp[673275](354568 'dynamic_cast' unmanaged BadFormatError?[415722] call_tmp[673270]))
                unknown tmp[354564] "dead at end of block" "insert auto destroy" "temp"
                (544118 'init var' tmp[354564] call_tmp[673275])
                unknown call_tmp[673280] "expr temp" "maybe param" "maybe type" "temp"
                (673283 'move' call_tmp[673280](354571 '!=' tmp[354564] nil[44]))
                if call_tmp[673280]
                {
                  unknown call_tmp[673285] "expr temp" "maybe param" "maybe type" "temp"
                  (673288 'move' call_tmp[673285](354578 'to non nilable class' tmp[354564]))
                  unknown call_tmp[673290] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                  (673293 'move' call_tmp[673290](748145 'new' _owned[30](?) call_tmp[673285]))
                  unknown err[354577] "dead at end of block" "insert auto destroy"
                  (544120 'init var' err[354577] call_tmp[673290])
                  (482255 'end of statement')
                  {
                  }
                }
                {
                }
              }
              unknown call_tmp[673295] "expr temp" "maybe param" "maybe type" "temp"
              (673298 'move' call_tmp[673295](157111 call ! first[157068]))
              unknown call_tmp[673300] "expr temp" "maybe param" "maybe type" "temp"
              (673303 'move' call_tmp[673300](157118 call _cond_test call_tmp[673295]))
              if call_tmp[673300]
              {
                (157115 call <~> f[156817] comma[157078])
                (482256 'end of statement' comma[157078])
              }
              (157125 call = first[157068] 0)
              (482258 'end of statement' first[157068])
              unknown idx[157129] "dead at end of block" "insert auto destroy"
              unknown call_tmp[673307] "expr temp" "maybe param" "maybe type" "temp"
              (673310 'move' call_tmp[673307](386879 call idxType _mt[243] this[158930]))
              (544122 'default init var' idx[157129] call_tmp[673307])
              (157132 'end of statement')
              (157135 call <~> f[156817] idx[157129])
              (482260 'end of statement' idx[157129])
              (157141 call(386885 call (partial) dsiAdd _mt[243] this[158930]) idx[157129])
              (482262 'end of statement' idx[157129])
            }
            label _continueLabel[157146]
            (157154 'move' tmp[157143](157152 call _cond_test 1))
            tmp[157143]
          }
          label _breakLabel[157147]
        }
      }
    }
    (521032 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiSerialWrite[157178](arg _mt[158936]:_MT[238], arg this[158934]:DefaultAssociativeDom[158900](?), arg f[157176]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157186 call(157181 call (partial) dsiSerialReadWrite _mt[243] this[158934]) f[157176])
    (521034 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiSerialRead[157195](arg _mt[158940]:_MT[238], arg this[158938]:DefaultAssociativeDom[158900](?), arg f[157193]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157203 call(157198 call (partial) dsiSerialReadWrite _mt[243] this[158938]) f[157193])
    (521036 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiAssignDomain[157214](arg _mt[158944]:_MT[238], arg this[158942]:DefaultAssociativeDom[158900](?), arg rhs[157211]:_domain[125908](?), arg lhsPrivate[157217]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (157224 call chpl_assignDomainWithIndsIterSafeForRemoving this[158942] rhs[157211])
    (521038 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiNumIndices[157231](arg _mt[158948]:_MT[238], arg this[158946]:DefaultAssociativeDom[158900](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[521042] "RVV" "temp"
    unknown call_tmp[673320] "expr temp" "maybe param" "maybe type" "temp"
    (673323 'move' call_tmp[673320](360948 call numEntries _mt[243] this[158946]))
    unknown call_tmp[673327] "expr temp" "maybe param" "maybe type" "temp"
    (673330 'move' call_tmp[673327](157238 call(157234 call (partial) read _mt[243] call_tmp[673320])))
    (521047 'move' ret[521042](521046 'deref' call_tmp[673327]))
    (521044 return ret[521042])
  }
  function DefaultAssociativeDom[158900](?).dsiIndsIterSafeForRemoving[157246](arg _mt[158952]:_MT[238], arg this[158950]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521051] "RVV" "temp"
    unknown call_tmp[673334] "expr temp" "maybe param" "maybe type" "temp"
    (673337 'move' call_tmp[673334](360953 call table _mt[243] this[158950]))
    unknown call_tmp[673341] "expr temp" "maybe param" "maybe type" "temp"
    (673344 'move' call_tmp[673341](157251 call postponeResize _mt[243] call_tmp[673334]))
    (157255 call = call_tmp[673341] 1)
    (482268 'end of statement')
    {
      unknown _indexOfInterest[157269] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157270] "expr temp" "temp"
      unknown call_tmp[673348] "expr temp" "maybe param" "maybe type" "temp"
      (673351 'move' call_tmp[673348](157265 call(157261 call (partial) these _mt[243] this[158950])))
      (157279 'move' _iterator[157270](157277 call _getIterator call_tmp[673348]))
      Defer
      {
        {
          (157296 call _freeIterator _iterator[157270])
        }
      }
      { scopeless type
        (157285 'move' _indexOfInterest[157269](157282 call iteratorIndex _iterator[157270]))
      }
      ForLoop[157271]
      {
        unknown i[157289] "index var" "insert auto destroy"
        (482270 'end of statement')
        (157291 'move' i[157289] _indexOfInterest[157269])
        (482271 'end of statement' i[157289])
        unknown yret[521055] "YVV" "temp"
        (521058 'move' yret[521055](521057 'deref' i[157289]))
        (521060 yield yret[521055])
        (482273 'end of statement' i[157289])
        label _continueLabel[157274]
        _indexOfInterest[157269]
        _iterator[157270]
      }
      label _breakLabel[157275]
    }
    const tmp[157336] "const" "temp"
    unknown call_tmp[673353] "expr temp" "maybe param" "maybe type" "temp"
    (673356 'move' call_tmp[673353](157333 '_wide_get_locale' this[158950]))
    (157338 'move' tmp[157336](157334 'deref' call_tmp[673353]))
    {
      {
        unknown call_tmp[673360] "expr temp" "maybe param" "maybe type" "temp"
        (673363 'move' call_tmp[673360](360959 call table _mt[243] this[158950]))
        unknown call_tmp[673367] "expr temp" "maybe param" "maybe type" "temp"
        (673370 'move' call_tmp[673367](157305 call postponeResize _mt[243] call_tmp[673360]))
        (157309 call = call_tmp[673367] 0)
        (482275 'end of statement')
        (157315 call(386899 call (partial) lockTable _mt[243] this[158950]))
        (482276 'end of statement')
        Defer
        {
          {
            (157319 call(386905 call (partial) unlockTable _mt[243] this[158950]))
          }
        }
        unknown call_tmp[673378] "expr temp" "maybe param" "maybe type" "temp"
        (673381 'move' call_tmp[673378](360964 call table _mt[243] this[158950]))
        (157331 call(157327 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673378]))
      }
      (157341 'on block' 0 tmp[157336])
    }
    (521053 return ret[521051])
  }
  function DefaultAssociativeDom[158900](?)._isSlotFull[157352](arg _mt[158956]:_MT[238], arg this[158954]:DefaultAssociativeDom[158900](?), arg slot[157349]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521064] "RVV" "temp"
    unknown call_tmp[673387] "expr temp" "maybe param" "maybe type" "temp"
    (673390 'move' call_tmp[673387](360969 call table _mt[243] this[158954]))
    unknown call_tmp[673394] "expr temp" "maybe param" "maybe type" "temp"
    (673397 'move' call_tmp[673394](157361 call(157356 call (partial) table _mt[243] call_tmp[673387]) slot[157349]))
    unknown call_tmp[673401] "expr temp" "maybe param" "maybe type" "temp"
    (673404 'move' call_tmp[673401](157366 call(157362 call (partial) isFull _mt[243] call_tmp[673394])))
    (521070 'move' ret[521064](521069 'coerce' call_tmp[673401] bool[10]))
    (521066 return ret[521064])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158900](?).these[157375](arg _mt[158960]:_MT[238], arg this[158958]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521074] "RVV" "temp"
    {
      unknown _indexOfInterest[157425] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157426] "expr temp" "temp"
      unknown call_tmp[673408] "expr temp" "maybe param" "maybe type" "temp"
      (673411 'move' call_tmp[673408](360974 call table _mt[243] this[158958]))
      unknown call_tmp[673415] "expr temp" "maybe param" "maybe type" "temp"
      (673418 'move' call_tmp[673415](157385 call(157381 call (partial) allSlots _mt[243] call_tmp[673408])))
      (157435 'move' _iterator[157426](157433 call _getIterator call_tmp[673415]))
      Defer
      {
        {
          (157452 call _freeIterator _iterator[157426])
        }
      }
      { scopeless type
        (157441 'move' _indexOfInterest[157425](157438 call iteratorIndex _iterator[157426]))
      }
      ForLoop[157427]
      {
        unknown slot[157445] "index var" "insert auto destroy"
        (482281 'end of statement')
        (157447 'move' slot[157445] _indexOfInterest[157425])
        (482282 'end of statement' slot[157445])
        {
          unknown aSlot[157393] "dead at end of block" "ref var"
          unknown call_tmp[673422] "expr temp" "maybe param" "maybe type" "temp"
          (673425 'move' call_tmp[673422](360979 call table _mt[243] this[158958]))
          unknown call_tmp[673429] "expr temp" "maybe param" "maybe type" "temp"
          (673432 'move' call_tmp[673429](157392 call(157387 call (partial) table _mt[243] call_tmp[673422]) slot[157445]))
          (544125 'move' aSlot[157393](544124 'addr of' call_tmp[673429]))
          (157396 'end of statement' slot[157445])
          unknown call_tmp[673436] "expr temp" "maybe param" "maybe type" "temp"
          (673439 'move' call_tmp[673436](157401 call status _mt[243] aSlot[157393]))
          unknown call_tmp[673441] "expr temp" "maybe param" "maybe type" "temp"
          (673444 'move' call_tmp[673441](157410 call == call_tmp[673436] full[200457]))
          unknown call_tmp[673446] "expr temp" "maybe param" "maybe type" "temp"
          (673449 'move' call_tmp[673446](157421 call _cond_test call_tmp[673441]))
          if call_tmp[673446]
          {
            unknown yret[521078] "YVV" "temp"
            unknown call_tmp[673453] "expr temp" "maybe param" "maybe type" "temp"
            (673456 'move' call_tmp[673453](157415 call key _mt[243] aSlot[157393]))
            (521081 'move' yret[521078](521080 'deref' call_tmp[673453]))
            (521083 yield yret[521078])
            (482285 'end of statement' aSlot[157393])
          }
        }
        label _continueLabel[157430]
        _indexOfInterest[157425]
        _iterator[157426]
      }
      label _breakLabel[157431]
    }
    (521076 return ret[521074])
  }
  function DefaultAssociativeDom[158900](?).these[157468](arg _mt[158964]:_MT[238], arg this[158962]:DefaultAssociativeDom[158900](?), param arg tag[157465]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521087] "RVV" "temp"
    unknown call_tmp[673458] "expr temp" "maybe param" "maybe type" "temp"
    (673461 'move' call_tmp[673458](157500 call _cond_test debugDefaultAssoc[156309]))
    if call_tmp[673458]
    {
      (157497 call writeln "*** In associative domain standalone iterator")
    }
    {
      unknown _indexOfInterest[157547] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157548] "expr temp" "temp"
      unknown call_tmp[673465] "expr temp" "maybe param" "maybe type" "temp"
      (673468 'move' call_tmp[673465](360988 call table _mt[243] this[158962]))
      unknown call_tmp[673472] "expr temp" "maybe param" "maybe type" "temp"
      (673475 'move' call_tmp[673472](157513 call(157507 call (partial) allSlots _mt[243] call_tmp[673465])(tag = tag[157465])))
      (157557 'move' _iterator[157548](157555 call _getIterator call_tmp[673472]))
      Defer
      {
        {
          (157574 call _freeIterator _iterator[157548])
        }
      }
      { scopeless type
        (157563 'move' _indexOfInterest[157547](157560 call iteratorIndex _iterator[157548]))
      }
      ForLoop[157549]
      {
        unknown slot[157567] "index var" "insert auto destroy"
        (482289 'end of statement')
        (157569 'move' slot[157567] _indexOfInterest[157547])
        (482290 'end of statement' slot[157567])
        {
          unknown aSlot[157521] "dead at end of block" "ref var"
          unknown call_tmp[673479] "expr temp" "maybe param" "maybe type" "temp"
          (673482 'move' call_tmp[673479](360993 call table _mt[243] this[158962]))
          unknown call_tmp[673486] "expr temp" "maybe param" "maybe type" "temp"
          (673489 'move' call_tmp[673486](157520 call(157515 call (partial) table _mt[243] call_tmp[673479]) slot[157567]))
          (544128 'move' aSlot[157521](544127 'addr of' call_tmp[673486]))
          (157524 'end of statement' slot[157567])
          unknown call_tmp[673493] "expr temp" "maybe param" "maybe type" "temp"
          (673496 'move' call_tmp[673493](157527 call status _mt[243] aSlot[157521]))
          unknown call_tmp[673498] "expr temp" "maybe param" "maybe type" "temp"
          (673501 'move' call_tmp[673498](157534 call == call_tmp[673493] full[200457]))
          unknown call_tmp[673503] "expr temp" "maybe param" "maybe type" "temp"
          (673506 'move' call_tmp[673503](157543 call _cond_test call_tmp[673498]))
          if call_tmp[673503]
          {
            unknown yret[521091] "YVV" "temp"
            unknown call_tmp[673510] "expr temp" "maybe param" "maybe type" "temp"
            (673513 'move' call_tmp[673510](157537 call key _mt[243] aSlot[157521]))
            (521094 'move' yret[521091](521093 'deref' call_tmp[673510]))
            (521096 yield yret[521091])
            (482293 'end of statement' aSlot[157521])
          }
        }
        label _continueLabel[157552]
        _indexOfInterest[157547]
        _iterator[157548]
      }
      label _breakLabel[157553]
    }
    (521089 return ret[521087])
  }
  where {
    (157475 call == tag[157465] standalone[451])
  }
  function DefaultAssociativeDom[158900](?).these[157590](arg _mt[158968]:_MT[238], arg this[158966]:DefaultAssociativeDom[158900](?), param arg tag[157587]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521100] "RVV" "temp"
    unknown call_tmp[673515] "expr temp" "maybe param" "maybe type" "temp"
    (673518 'move' call_tmp[673515](157621 call _cond_test debugDefaultAssoc[156309]))
    if call_tmp[673515]
    {
      (157619 call writeln "*** In associative domain leader iterator")
    }
    {
      unknown _indexOfInterest[157643] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157644] "expr temp" "temp"
      unknown call_tmp[673522] "expr temp" "maybe param" "maybe type" "temp"
      (673525 'move' call_tmp[673522](361002 call table _mt[243] this[158966]))
      unknown call_tmp[673529] "expr temp" "maybe param" "maybe type" "temp"
      (673532 'move' call_tmp[673529](157635 call(157629 call (partial) allSlots _mt[243] call_tmp[673522])(tag = tag[157587])))
      (157653 'move' _iterator[157644](157651 call _getIterator call_tmp[673529]))
      Defer
      {
        {
          (157670 call _freeIterator _iterator[157644])
        }
      }
      { scopeless type
        (157659 'move' _indexOfInterest[157643](157656 call iteratorIndex _iterator[157644]))
      }
      ForLoop[157645]
      {
        unknown chunk[157663] "index var" "insert auto destroy"
        (482297 'end of statement')
        (157665 'move' chunk[157663] _indexOfInterest[157643])
        (482298 'end of statement' chunk[157663])
        unknown yret[521104] "YVV" "temp"
        unknown call_tmp[673534] "expr temp" "maybe param" "maybe type" "temp"
        (673537 'move' call_tmp[673534](157639 call _build_tuple chunk[157663] this[158966]))
        (521107 'move' yret[521104](521106 'deref' call_tmp[673534]))
        (521109 yield yret[521104])
        (482300 'end of statement' chunk[157663])
        label _continueLabel[157648]
        _indexOfInterest[157643]
        _iterator[157644]
      }
      label _breakLabel[157649]
    }
    (521102 return ret[521100])
  }
  where {
    (157597 call == tag[157587] leader[447])
  }
  function DefaultAssociativeDom[158900](?).these[157686](arg _mt[158972]:_MT[238], arg this[158970]:DefaultAssociativeDom[158900](?), param arg tag[157683]:iterKind[453], arg followThis[157688]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521113] "RVV" "temp"
    unknown tmp[157703] "dead at end of block" "insert auto destroy" "temp"
    (544130 'init var' tmp[157703] followThis[157688])
    (157710 call _check_tuple_var_decl tmp[157703] 2)
    (482302 'end of statement')
    unknown call_tmp[673539] "maybe param" "maybe type" "temp"
    (673542 'move' call_tmp[673539](157704 call tmp[157703] 0))
    unknown chunk[157697] "dead at end of block" "insert auto destroy"
    (544132 'init var' chunk[157697] call_tmp[673539])
    unknown call_tmp[673544] "maybe param" "maybe type" "temp"
    (673547 'move' call_tmp[673544](157707 call tmp[157703] 1))
    unknown followThisDom[157699] "dead at end of block" "insert auto destroy"
    (544134 'init var' followThisDom[157699] call_tmp[673544])
    (157715 'end of statement')
    unknown call_tmp[673549] "expr temp" "maybe param" "maybe type" "temp"
    (673552 'move' call_tmp[673549](157739 call _cond_test debugDefaultAssoc[156309]))
    if call_tmp[673549]
    {
      (157737 call writeln "In associative domain follower code")
    }
    unknown call_tmp[673554] "maybe param" "maybe type" "temp"
    (673557 'move' call_tmp[673554](157746 call == followThisDom[157699] this[158970]))
    const sameDom[157748] "dead at end of block" "const" "insert auto destroy"
    (544136 'init var' sameDom[157748] call_tmp[673554])
    (157751 'end of statement')
    unknown call_tmp[673559] "expr temp" "maybe param" "maybe type" "temp"
    (673562 'move' call_tmp[673559](157753 call ! sameDom[157748]))
    unknown call_tmp[673564] "expr temp" "maybe param" "maybe type" "temp"
    (673567 'move' call_tmp[673564](157791 call _cond_test call_tmp[673559]))
    if call_tmp[673564]
    {
      unknown call_tmp[673571] "expr temp" "maybe param" "maybe type" "temp"
      (673574 'move' call_tmp[673571](157756 call dsiNumIndices _mt[243] followThisDom[157699]))
      unknown call_tmp[673578] "expr temp" "maybe param" "maybe type" "temp"
      (673581 'move' call_tmp[673578](157760 call dsiNumIndices _mt[243] this[158970]))
      unknown call_tmp[673583] "expr temp" "maybe param" "maybe type" "temp"
      (673586 'move' call_tmp[673583](157763 call != call_tmp[673571] call_tmp[673578]))
      unknown call_tmp[673588] "expr temp" "maybe param" "maybe type" "temp"
      (673591 'move' call_tmp[673588](157786 call _cond_test call_tmp[673583]))
      if call_tmp[673588]
      {
        (157784 call halt "zippered associative domains do not match")
      }
    }
    unknown call_tmp[673595] "expr temp" "maybe param" "maybe type" "temp"
    (673598 'move' call_tmp[673595](157797 call table _mt[243] followThisDom[157699]))
    unknown call_tmp[673602] "maybe param" "maybe type" "temp"
    (673605 'move' call_tmp[673602](157800 call table _mt[243] call_tmp[673595]))
    const otherTable[157803] "dead at end of block" "const" "insert auto destroy"
    (544138 'init var' otherTable[157803] call_tmp[673602])
    (157806 'end of statement' followThisDom[157699] followThisDom[157699])
    {
      unknown _indexOfInterest[157902] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157903] "expr temp" "temp"
      (157912 'move' _iterator[157903](157910 call _getIterator chunk[157697]))
      Defer
      {
        {
          (157928 call _freeIterator _iterator[157903])
        }
      }
      { scopeless type
        (157917 'move' _indexOfInterest[157902](157914 call iteratorIndex _iterator[157903]))
      }
      ForLoop[157904]
      {
        unknown slot[157921] "index var" "insert auto destroy"
        (482308 'end of statement')
        (157923 'move' slot[157921] _indexOfInterest[157902])
        (482309 'end of statement' slot[157921])
        {
          const aSlot[157813] "dead at end of block" "const" "ref var"
          unknown call_tmp[673607] "expr temp" "maybe param" "maybe type" "temp"
          (673610 'move' call_tmp[673607](157812 call otherTable[157803] slot[157921]))
          (544141 'move' aSlot[157813](544140 'addr of' call_tmp[673607]))
          (157816 'end of statement' otherTable[157803] slot[157921])
          unknown call_tmp[673614] "expr temp" "maybe param" "maybe type" "temp"
          (673617 'move' call_tmp[673614](157823 call(157819 call (partial) isFull _mt[243] aSlot[157813])))
          unknown call_tmp[673619] "expr temp" "maybe param" "maybe type" "temp"
          (673622 'move' call_tmp[673619](157898 call _cond_test call_tmp[673614]))
          if call_tmp[673619]
          {
            unknown idx[157825] "dead at end of block" "insert auto destroy"
            (544143 'init var' idx[157825] slot[157921])
            (157828 'end of statement' slot[157921])
            unknown call_tmp[673624] "expr temp" "maybe param" "maybe type" "temp"
            (673627 'move' call_tmp[673624](157831 call ! sameDom[157748]))
            unknown call_tmp[673629] "expr temp" "maybe param" "maybe type" "temp"
            (673632 'move' call_tmp[673629](157882 call _cond_test call_tmp[673624]))
            if call_tmp[673629]
            {
              unknown call_tmp[673636] "expr temp" "maybe param" "maybe type" "temp"
              (673639 'move' call_tmp[673636](361012 call table _mt[243] this[158970]))
              unknown call_tmp[673645] "expr temp" "maybe param" "maybe type" "temp"
              (673648 'move' call_tmp[673645](157845 call key _mt[243] aSlot[157813]))
              unknown call_tmp[673650] "maybe param" "maybe type" "temp"
              (673653 'move' call_tmp[673650](157849 call(157841 call (partial) findFullSlot _mt[243] call_tmp[673636]) call_tmp[673645]))
              const tmp[157850] "dead at end of block" "const" "insert auto destroy" "temp"
              (544145 'init var' tmp[157850] call_tmp[673650])
              (157857 call _check_tuple_var_decl tmp[157850] 2)
              (482314 'end of statement')
              unknown call_tmp[673655] "maybe param" "maybe type" "temp"
              (673658 'move' call_tmp[673655](157851 call tmp[157850] 0))
              const match[157833] "dead at end of block" "const" "insert auto destroy"
              (544147 'init var' match[157833] call_tmp[673655])
              unknown call_tmp[673660] "maybe param" "maybe type" "temp"
              (673663 'move' call_tmp[673660](157854 call tmp[157850] 1))
              const loc[157835] "dead at end of block" "const" "insert auto destroy"
              (544149 'init var' loc[157835] call_tmp[673660])
              (157862 'end of statement')
              unknown call_tmp[673665] "expr temp" "maybe param" "maybe type" "temp"
              (673668 'move' call_tmp[673665](157865 call ! match[157833]))
              unknown call_tmp[673670] "expr temp" "maybe param" "maybe type" "temp"
              (673673 'move' call_tmp[673670](157872 call _cond_test call_tmp[673665]))
              if call_tmp[673670]
              {
                (157870 call halt "zippered associative domains do not match")
              }
              (157879 call = idx[157825] loc[157835])
              (482316 'end of statement' idx[157825] loc[157835])
            }
            unknown yret[521117] "YVV" "temp"
            unknown call_tmp[673677] "expr temp" "maybe param" "maybe type" "temp"
            (673680 'move' call_tmp[673677](361018 call table _mt[243] this[158970]))
            unknown call_tmp[673684] "expr temp" "maybe param" "maybe type" "temp"
            (673687 'move' call_tmp[673684](157892 call(157887 call (partial) table _mt[243] call_tmp[673677]) idx[157825]))
            unknown call_tmp[673691] "expr temp" "maybe param" "maybe type" "temp"
            (673694 'move' call_tmp[673691](157893 call key _mt[243] call_tmp[673684]))
            (521120 'move' yret[521117](521119 'deref' call_tmp[673691]))
            (521122 yield yret[521117])
            (482319 'end of statement' idx[157825])
          }
        }
        label _continueLabel[157907]
        _indexOfInterest[157902]
        _iterator[157903]
      }
      label _breakLabel[157908]
    }
    (521115 return ret[521113])
  }
  where {
    (157695 call == tag[157683] follower[449])
  }
  function DefaultAssociativeDom[158900](?).dsiMyDist[157940](arg _mt[158976]:_MT[238], arg this[158974]:DefaultAssociativeDom[158900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521126] "RVV" "temp"
    unknown call_tmp[673698] "expr temp" "maybe param" "maybe type" "temp"
    (673701 'move' call_tmp[673698](386940 call dist _mt[243] this[158974]))
    (521132 'move' ret[521126](521131 'coerce' call_tmp[673698] unmanaged BaseDist[415584]))
    (521128 return ret[521126])
  }
  { scopeless type
    unmanaged BaseDist[415584]
  }
  function DefaultAssociativeDom[158900](?).dsiClear[157953](arg _mt[158980]:_MT[238], arg this[158978]:DefaultAssociativeDom[158900](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const tmp[158132] "const" "temp"
    unknown call_tmp[673703] "expr temp" "maybe param" "maybe type" "temp"
    (673706 'move' call_tmp[673703](158129 '_wide_get_locale' this[158978]))
    (158134 'move' tmp[158132](158130 'deref' call_tmp[673703]))
    {
      {
        (157958 call(386945 call (partial) lockTable _mt[243] this[158978]))
        (482322 'end of statement')
        {
          unknown _indexOfInterest[158076] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[158077] "expr temp" "temp"
          unknown call_tmp[673712] "expr temp" "maybe param" "maybe type" "temp"
          (673715 'move' call_tmp[673712](361023 call table _mt[243] this[158978]))
          unknown call_tmp[673719] "expr temp" "maybe param" "maybe type" "temp"
          (673722 'move' call_tmp[673719](157967 call(157963 call (partial) allSlots _mt[243] call_tmp[673712])))
          (158086 'move' _iterator[158077](158084 call _getIterator call_tmp[673719]))
          Defer
          {
            {
              (158103 call _freeIterator _iterator[158077])
            }
          }
          { scopeless type
            (158092 'move' _indexOfInterest[158076](158089 call iteratorIndex _iterator[158077]))
          }
          ForLoop[158078]
          {
            unknown slot[158096] "index var" "insert auto destroy"
            (482324 'end of statement')
            (158098 'move' slot[158096] _indexOfInterest[158076])
            (482325 'end of statement' slot[158096])
            {
              unknown aSlot[157975] "dead at end of block" "ref var"
              unknown call_tmp[673726] "expr temp" "maybe param" "maybe type" "temp"
              (673729 'move' call_tmp[673726](361028 call table _mt[243] this[158978]))
              unknown call_tmp[673733] "expr temp" "maybe param" "maybe type" "temp"
              (673736 'move' call_tmp[673733](157974 call(157969 call (partial) table _mt[243] call_tmp[673726]) slot[158096]))
              (544152 'move' aSlot[157975](544151 'addr of' call_tmp[673733]))
              (157978 'end of statement' slot[158096])
              unknown call_tmp[673740] "expr temp" "maybe param" "maybe type" "temp"
              (673743 'move' call_tmp[673740](157985 call(157981 call (partial) isFull _mt[243] aSlot[157975])))
              unknown call_tmp[673745] "expr temp" "maybe param" "maybe type" "temp"
              (673748 'move' call_tmp[673745](158055 call _cond_test call_tmp[673740]))
              if call_tmp[673745]
              {
                unknown tmpKey[157987] "dead at end of block" "insert auto destroy"
                unknown call_tmp[673752] "expr temp" "maybe param" "maybe type" "temp"
                (673755 'move' call_tmp[673752](386951 call idxType _mt[243] this[158978]))
                (544154 'default init var' tmpKey[157987] call_tmp[673752])
                (157990 'end of statement')
                unknown tmpVal[157993] "dead at end of block" "insert auto destroy"
                (544156 'default init var' tmpVal[157993] nothing[7])
                (157996 'end of statement')
                unknown call_tmp[673759] "expr temp" "maybe param" "maybe type" "temp"
                (673762 'move' call_tmp[673759](361034 call table _mt[243] this[158978]))
                (158007 call(158000 call (partial) clearSlot _mt[243] call_tmp[673759]) aSlot[157975] tmpKey[157987] tmpVal[157993])
                (482328 'end of statement' aSlot[157975] tmpKey[157987] tmpVal[157993])
                {
                  unknown _indexOfInterest[158022] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[158023] "expr temp" "temp"
                  unknown call_tmp[673768] "expr temp" "maybe param" "maybe type" "temp"
                  (673771 'move' call_tmp[673768](386959 call _arrs _mt[243] this[158978]))
                  (158032 'move' _iterator[158023](158030 call _getIterator call_tmp[673768]))
                  Defer
                  {
                    {
                      (158048 call _freeIterator _iterator[158023])
                    }
                  }
                  { scopeless type
                    (158037 'move' _indexOfInterest[158022](158034 call iteratorIndex _iterator[158023]))
                  }
                  ForLoop[158024]
                  {
                    unknown arr[158041] "index var" "insert auto destroy"
                    (482333 'end of statement')
                    (158043 'move' arr[158041] _indexOfInterest[158022])
                    (482334 'end of statement' arr[158041])
                    {
                      (158019 call(158014 call (partial) _deinitSlot _mt[243] arr[158041]) slot[158096])
                      (482336 'end of statement' arr[158041] slot[158096])
                    }
                    label _continueLabel[158027]
                    _indexOfInterest[158022]
                    _iterator[158023]
                  }
                  label _breakLabel[158028]
                }
              }
              unknown call_tmp[673777] "expr temp" "maybe param" "maybe type" "temp"
              (673780 'move' call_tmp[673777](361040 call table _mt[243] this[158978]))
              unknown call_tmp[673784] "expr temp" "maybe param" "maybe type" "temp"
              (673787 'move' call_tmp[673784](158065 call(158060 call (partial) table _mt[243] call_tmp[673777]) slot[158096]))
              unknown call_tmp[673791] "expr temp" "maybe param" "maybe type" "temp"
              (673794 'move' call_tmp[673791](158066 call status _mt[243] call_tmp[673784]))
              (158073 call = call_tmp[673791] empty[200455])
              (482339 'end of statement' slot[158096])
            }
            label _continueLabel[158081]
            _indexOfInterest[158076]
            _iterator[158077]
          }
          label _breakLabel[158082]
        }
        unknown call_tmp[673798] "expr temp" "maybe param" "maybe type" "temp"
        (673801 'move' call_tmp[673798](361046 call numEntries _mt[243] this[158978]))
        (158116 call(158111 call (partial) write _mt[243] call_tmp[673798]) 0)
        (482341 'end of statement')
        unknown call_tmp[673807] "expr temp" "maybe param" "maybe type" "temp"
        (673810 'move' call_tmp[673807](361051 call table _mt[243] this[158978]))
        (158123 call(158119 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673807]))
        (482342 'end of statement')
        (158127 call(386965 call (partial) unlockTable _mt[243] this[158978]))
      }
      (158137 'on block' 0 tmp[158132])
    }
    (521134 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiMember[158149](arg _mt[158984]:_MT[238], arg this[158982]:DefaultAssociativeDom[158900](?), arg idx[158146] :
  (386970 call idxType _mt[243] this[158982])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521138] "RVV" "temp"
    (158154 call(386974 call (partial) lockTable _mt[243] this[158982]))
    (482344 'end of statement')
    Defer
    {
      {
        (158159 call(386978 call (partial) unlockTable _mt[243] this[158982]))
      }
    }
    unknown call_tmp[673824] "expr temp" "maybe param" "maybe type" "temp"
    (673827 'move' call_tmp[673824](361056 call table _mt[243] this[158982]))
    unknown call_tmp[673831] "maybe param" "maybe type" "temp"
    (673834 'move' call_tmp[673831](158175 call(158170 call (partial) findFullSlot _mt[243] call_tmp[673824]) idx[158146]))
    unknown tmp[158176] "dead at end of block" "insert auto destroy" "temp"
    (544158 'init var' tmp[158176] call_tmp[673831])
    (158183 call _check_tuple_var_decl tmp[158176] 2)
    (482346 'end of statement')
    unknown call_tmp[673836] "maybe param" "maybe type" "temp"
    (673839 'move' call_tmp[673836](158177 call tmp[158176] 0))
    unknown foundFullSlot[158164] "dead at end of block" "insert auto destroy"
    (544160 'init var' foundFullSlot[158164] call_tmp[673836])
    unknown call_tmp[673841] "maybe param" "maybe type" "temp"
    (673844 'move' call_tmp[673841](158180 call tmp[158176] 1))
    unknown slotNum[158166] "dead at end of block" "insert auto destroy"
    (544162 'init var' slotNum[158166] call_tmp[673841])
    (158188 'end of statement')
    (521144 'move' ret[521138](521143 'coerce' foundFullSlot[158164] bool[10]))
    gotoReturn _end_dsiMember[521136] _end_dsiMember[521136]
    (482347 'end of statement' foundFullSlot[158164])
    label _end_dsiMember[521136]
    (521140 return ret[521138])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158900](?).dsiAdd[158199](arg _mt[158988]:_MT[238], arg this[158986]:DefaultAssociativeDom[158900](?), in arg idx[158197]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521150] "RVV" "temp"
    unknown call_tmp[673848] "expr temp" "maybe param" "maybe type" "temp"
    (673851 'move' call_tmp[673848](158204 call(386986 call (partial) _addWrapper _mt[243] this[158986]) idx[158197]))
    unknown call_tmp[673853] "maybe param" "maybe type" "temp"
    (673856 'move' call_tmp[673853](158207 call call_tmp[673848] 1))
    const numInds[158208] "dead at end of block" "const" "insert auto destroy"
    (544164 'init var' numInds[158208] call_tmp[673853])
    (158211 'end of statement')
    (521155 'move' ret[521150](521154 'deref' numInds[158208]))
    gotoReturn _end_dsiAdd[521148] _end_dsiAdd[521148]
    (482349 'end of statement' numInds[158208])
    label _end_dsiAdd[521148]
    (521152 return ret[521150])
  }
  function DefaultAssociativeDom[158900](?)._addWrapper[158224](arg _mt[158992]:_MT[238], arg this[158990]:DefaultAssociativeDom[158900](?), in arg idx[158221] :
  (386993 call idxType _mt[243] this[158990])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521161] "RVV" "temp"
    unknown call_tmp[673860] "maybe param" "maybe type" "temp"
    (673863 'move' call_tmp[673860](158227 call - 1))
    unknown slotNum[158229] "dead at end of block" "insert auto destroy"
    (544166 'init var' slotNum[158229] call_tmp[673860])
    (158232 'end of statement')
    unknown retVal[158235] "dead at end of block" "insert auto destroy"
    (544168 'init var' retVal[158235] 0)
    (158238 'end of statement')
    const tmp[158267] "const" "temp"
    unknown call_tmp[673865] "expr temp" "maybe param" "maybe type" "temp"
    (673868 'move' call_tmp[673865](158264 '_wide_get_locale' this[158990]))
    (158269 'move' tmp[158267](158265 'deref' call_tmp[673865]))
    {
      {
        (158242 call(386998 call (partial) lockTable _mt[243] this[158990]))
        (482351 'end of statement')
        Defer
        {
          {
            (158247 call(387002 call (partial) unlockTable _mt[243] this[158990]))
          }
        }
        unknown tmp[492481] "expr temp" "maybe param" "maybe type" "temp"
        unknown tmp[492506] "maybe param" "temp"
        (492509 'move' tmp[492506](492507 'addr of' slotNum[158229]))
        unknown tmp[492517] "maybe param" "temp"
        (492520 'move' tmp[492517](492518 'addr of' retVal[158235]))
        (492482 'move' tmp[492481](158260 call(387010 call (partial) _add _mt[243] this[158990]) idx[158221]))
        { scopeless
          unknown call_tmp[673878] "expr temp" "maybe param" "maybe type" "temp"
          (673881 'move' call_tmp[673878](492488 call size _mt[243] tmp[492481]))
          unknown call_tmp[673883] "expr temp" "maybe param" "maybe type" "temp"
          (673886 'move' call_tmp[673883](492491 call != 2 call_tmp[673878]))
          unknown call_tmp[673888] "expr temp" "maybe param" "maybe type" "temp"
          (673891 'move' call_tmp[673888](492498 call _cond_test call_tmp[673883]))
          if call_tmp[673888]
          {
            (492494 call compilerError "tuple size must match the number of grouped variables" 0)
          }
        }
        unknown call_tmp[673893] "expr temp" "maybe param" "maybe type" "temp"
        (673896 'move' call_tmp[673893](492504 call tmp[492481] 0))
        (492511 call = tmp[492506] call_tmp[673893])
        unknown call_tmp[673898] "expr temp" "maybe param" "maybe type" "temp"
        (673901 'move' call_tmp[673898](492515 call tmp[492481] 1))
        (492522 call = tmp[492517] call_tmp[673898])
        (482353 'end of statement' slotNum[158229] retVal[158235])
      }
      (158272 'on block' 0 tmp[158267])
    }
    unknown call_tmp[673903] "expr temp" "maybe param" "maybe type" "temp"
    (673906 'move' call_tmp[673903](158278 call _build_tuple slotNum[158229] retVal[158235]))
    (521166 'move' ret[521161](521165 'deref' call_tmp[673903]))
    gotoReturn _end__addWrapper[521159] _end__addWrapper[521159]
    (482356 'end of statement' slotNum[158229] retVal[158235])
    label _end__addWrapper[521159]
    (521163 return ret[521161])
  }
  function DefaultAssociativeDom[158900](?)._add[158290](arg _mt[158996]:_MT[238], arg this[158994]:DefaultAssociativeDom[158900](?), in arg idx[158287] :
  (387018 call idxType _mt[243] this[158994])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521172] "RVV" "temp"
    unknown foundFullSlot[158293] "dead at end of block" "insert auto destroy"
    (544170 'init var' foundFullSlot[158293] 0)
    (158296 'end of statement')
    unknown call_tmp[673910] "maybe param" "maybe type" "temp"
    (673913 'move' call_tmp[673910](158299 call - 1))
    unknown slotNum[158301] "dead at end of block" "insert auto destroy"
    (544172 'init var' slotNum[158301] call_tmp[673910])
    (158304 'end of statement')
    unknown tmp[492525] "expr temp" "maybe param" "maybe type" "temp"
    unknown tmp[492550] "maybe param" "temp"
    (492553 'move' tmp[492550](492551 'addr of' foundFullSlot[158293]))
    unknown tmp[492561] "maybe param" "temp"
    (492564 'move' tmp[492561](492562 'addr of' slotNum[158301]))
    unknown call_tmp[673917] "expr temp" "maybe param" "maybe type" "temp"
    (673920 'move' call_tmp[673917](361061 call table _mt[243] this[158994]))
    (492526 'move' tmp[492525](158318 call(158313 call (partial) findAvailableSlot _mt[243] call_tmp[673917]) idx[158287]))
    { scopeless
      unknown call_tmp[673926] "expr temp" "maybe param" "maybe type" "temp"
      (673929 'move' call_tmp[673926](492532 call size _mt[243] tmp[492525]))
      unknown call_tmp[673931] "expr temp" "maybe param" "maybe type" "temp"
      (673934 'move' call_tmp[673931](492535 call != 2 call_tmp[673926]))
      unknown call_tmp[673936] "expr temp" "maybe param" "maybe type" "temp"
      (673939 'move' call_tmp[673936](492542 call _cond_test call_tmp[673931]))
      if call_tmp[673936]
      {
        (492538 call compilerError "tuple size must match the number of grouped variables" 0)
      }
    }
    unknown call_tmp[673941] "expr temp" "maybe param" "maybe type" "temp"
    (673944 'move' call_tmp[673941](492548 call tmp[492525] 0))
    (492555 call = tmp[492550] call_tmp[673941])
    unknown call_tmp[673946] "expr temp" "maybe param" "maybe type" "temp"
    (673949 'move' call_tmp[673946](492559 call tmp[492525] 1))
    (492566 call = tmp[492561] call_tmp[673946])
    (482359 'end of statement' foundFullSlot[158293] slotNum[158301])
    unknown call_tmp[673951] "expr temp" "maybe param" "maybe type" "temp"
    (673954 'move' call_tmp[673951](158405 call _cond_test foundFullSlot[158293]))
    if call_tmp[673951]
    {
      unknown call_tmp[673956] "expr temp" "maybe param" "maybe type" "temp"
      (673959 'move' call_tmp[673956](158326 call _build_tuple slotNum[158301] 0))
      (521177 'move' ret[521172](521176 'deref' call_tmp[673956]))
      gotoReturn _end__add[521170] _end__add[521170]
      (482362 'end of statement' slotNum[158301])
    }
    {
      unknown call_tmp[673963] "expr temp" "maybe param" "maybe type" "temp"
      (673966 'move' call_tmp[673963](361066 call table _mt[243] this[158994]))
      (158341 call(158334 call (partial) fillSlot _mt[243] call_tmp[673963]) slotNum[158301] idx[158287] none[57])
      (482364 'end of statement' slotNum[158301])
      unknown call_tmp[673972] "expr temp" "maybe param" "maybe type" "temp"
      (673975 'move' call_tmp[673972](361071 call numEntries _mt[243] this[158994]))
      (158350 call(158345 call (partial) add _mt[243] call_tmp[673972]) 1)
      (482366 'end of statement')
      {
        unknown _indexOfInterest[158365] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[158366] "expr temp" "temp"
        unknown call_tmp[673981] "expr temp" "maybe param" "maybe type" "temp"
        (673984 'move' call_tmp[673981](387030 call _arrs _mt[243] this[158994]))
        (158375 'move' _iterator[158366](158373 call _getIterator call_tmp[673981]))
        Defer
        {
          {
            (158391 call _freeIterator _iterator[158366])
          }
        }
        { scopeless type
          (158380 'move' _indexOfInterest[158365](158377 call iteratorIndex _iterator[158366]))
        }
        ForLoop[158367]
        {
          unknown arr[158384] "index var" "insert auto destroy"
          (482368 'end of statement')
          (158386 'move' arr[158384] _indexOfInterest[158365])
          (482369 'end of statement' arr[158384])
          {
            (158362 call(158357 call (partial) _defaultInitSlot _mt[243] arr[158384]) slotNum[158301])
            (482371 'end of statement' arr[158384] slotNum[158301])
          }
          label _continueLabel[158370]
          _indexOfInterest[158365]
          _iterator[158366]
        }
        label _breakLabel[158371]
      }
      unknown call_tmp[673988] "expr temp" "maybe param" "maybe type" "temp"
      (673991 'move' call_tmp[673988](158401 call _build_tuple slotNum[158301] 1))
      (521182 'move' ret[521172](521181 'deref' call_tmp[673988]))
      gotoReturn _end__add[521170] _end__add[521170]
      (482374 'end of statement' slotNum[158301])
    }
    label _end__add[521170]
    (521174 return ret[521172])
  }
  function DefaultAssociativeDom[158900](?).dsiRemove[158417](arg _mt[159000]:_MT[238], arg this[158998]:DefaultAssociativeDom[158900](?), arg idx[158414] :
  (387037 call idxType _mt[243] this[158998])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521188] "RVV" "temp"
    unknown retval[158420] "dead at end of block" "insert auto destroy"
    (544174 'default init var' retval[158420] int(64)[13])
    (158423 'end of statement')
    const tmp[158562] "const" "temp"
    unknown call_tmp[673995] "expr temp" "maybe param" "maybe type" "temp"
    (673998 'move' call_tmp[673995](158559 '_wide_get_locale' this[158998]))
    (158564 'move' tmp[158562](158560 'deref' call_tmp[673995]))
    {
      {
        (158428 call(387042 call (partial) lockTable _mt[243] this[158998]))
        (482376 'end of statement')
        Defer
        {
          {
            (158433 call(387046 call (partial) unlockTable _mt[243] this[158998]))
          }
        }
        unknown call_tmp[674006] "expr temp" "maybe param" "maybe type" "temp"
        (674009 'move' call_tmp[674006](361077 call table _mt[243] this[158998]))
        unknown call_tmp[674013] "maybe param" "maybe type" "temp"
        (674016 'move' call_tmp[674013](158449 call(158444 call (partial) findFullSlot _mt[243] call_tmp[674006]) idx[158414]))
        const tmp[158450] "dead at end of block" "const" "insert auto destroy" "temp"
        (544176 'init var' tmp[158450] call_tmp[674013])
        (158457 call _check_tuple_var_decl tmp[158450] 2)
        (482378 'end of statement')
        unknown call_tmp[674018] "maybe param" "maybe type" "temp"
        (674021 'move' call_tmp[674018](158451 call tmp[158450] 0))
        const foundSlot[158438] "dead at end of block" "const" "insert auto destroy"
        (544178 'init var' foundSlot[158438] call_tmp[674018])
        unknown call_tmp[674023] "maybe param" "maybe type" "temp"
        (674026 'move' call_tmp[674023](158454 call tmp[158450] 1))
        const slotNum[158440] "dead at end of block" "const" "insert auto destroy"
        (544180 'init var' slotNum[158440] call_tmp[674023])
        (158462 'end of statement')
        unknown call_tmp[674028] "expr temp" "maybe param" "maybe type" "temp"
        (674031 'move' call_tmp[674028](158548 call _cond_test foundSlot[158438]))
        if call_tmp[674028]
        {
          unknown tmpIdx[158465] "dead at end of block" "insert auto destroy"
          unknown call_tmp[674035] "expr temp" "maybe param" "maybe type" "temp"
          (674038 'move' call_tmp[674035](387053 call idxType _mt[243] this[158998]))
          (544182 'default init var' tmpIdx[158465] call_tmp[674035])
          (158468 'end of statement')
          unknown tmpVal[158471] "dead at end of block" "insert auto destroy"
          (544184 'default init var' tmpVal[158471] nothing[7])
          (158474 'end of statement')
          unknown call_tmp[674042] "expr temp" "maybe param" "maybe type" "temp"
          (674045 'move' call_tmp[674042](361082 call table _mt[243] this[158998]))
          (158483 call(158476 call (partial) clearSlot _mt[243] call_tmp[674042]) slotNum[158440] tmpIdx[158465] tmpVal[158471])
          (482379 'end of statement' slotNum[158440] tmpIdx[158465] tmpVal[158471])
          unknown call_tmp[674051] "expr temp" "maybe param" "maybe type" "temp"
          (674054 'move' call_tmp[674051](361087 call numEntries _mt[243] this[158998]))
          (158491 call(158486 call (partial) sub _mt[243] call_tmp[674051]) 1)
          (482383 'end of statement')
          {
            unknown _indexOfInterest[158504] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[158505] "expr temp" "temp"
            unknown call_tmp[674060] "expr temp" "maybe param" "maybe type" "temp"
            (674063 'move' call_tmp[674060](387061 call _arrs _mt[243] this[158998]))
            (158514 'move' _iterator[158505](158512 call _getIterator call_tmp[674060]))
            Defer
            {
              {
                (158530 call _freeIterator _iterator[158505])
              }
            }
            { scopeless type
              (158519 'move' _indexOfInterest[158504](158516 call iteratorIndex _iterator[158505]))
            }
            ForLoop[158506]
            {
              unknown arr[158523] "index var" "insert auto destroy"
              (482385 'end of statement')
              (158525 'move' arr[158523] _indexOfInterest[158504])
              (482386 'end of statement' arr[158523])
              {
                (158501 call(158496 call (partial) _deinitSlot _mt[243] arr[158523]) slotNum[158440])
                (482388 'end of statement' arr[158523] slotNum[158440])
              }
              label _continueLabel[158509]
              _indexOfInterest[158504]
              _iterator[158505]
            }
            label _breakLabel[158510]
          }
          (158539 call = retval[158420] 1)
          (482391 'end of statement' retval[158420])
        }
        {
          (158544 call = retval[158420] 0)
          (482393 'end of statement' retval[158420])
        }
        unknown call_tmp[674069] "expr temp" "maybe param" "maybe type" "temp"
        (674072 'move' call_tmp[674069](361093 call table _mt[243] this[158998]))
        (158557 call(158553 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[674069]))
      }
      (158567 'on block' 0 tmp[158562])
    }
    (521193 'move' ret[521188](521192 'deref' retval[158420]))
    gotoReturn _end_dsiRemove[521186] _end_dsiRemove[521186]
    (482396 'end of statement' retval[158420])
    label _end_dsiRemove[521186]
    (521190 return ret[521188])
  }
  function DefaultAssociativeDom[158900](?).dsiRequestCapacity[158581](arg _mt[159004]:_MT[238], arg this[159002]:DefaultAssociativeDom[158900](?), arg numKeys[158578]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[158669] "const" "temp"
    unknown call_tmp[674076] "expr temp" "maybe param" "maybe type" "temp"
    (674079 'move' call_tmp[674076](158666 '_wide_get_locale' this[159002]))
    (158671 'move' tmp[158669](158667 'deref' call_tmp[674076]))
    {
      {
        unknown call_tmp[674083] "expr temp" "maybe param" "maybe type" "temp"
        (674086 'move' call_tmp[674083](361098 call numEntries _mt[243] this[159002]))
        unknown call_tmp[674090] "maybe param" "maybe type" "temp"
        (674093 'move' call_tmp[674090](158589 call(158585 call (partial) read _mt[243] call_tmp[674083])))
        unknown entries[158590] "dead at end of block" "insert auto destroy"
        (544186 'init var' entries[158590] call_tmp[674090])
        (158593 'end of statement')
        unknown call_tmp[674095] "expr temp" "maybe param" "maybe type" "temp"
        (674098 'move' call_tmp[674095](158597 call < entries[158590] numKeys[158578]))
        unknown call_tmp[674100] "expr temp" "maybe param" "maybe type" "temp"
        (674103 'move' call_tmp[674100](158662 call _cond_test call_tmp[674095]))
        if call_tmp[674100]
        {
          (158601 call(387072 call (partial) lockTable _mt[243] this[159002]))
          (482398 'end of statement')
          Defer
          {
            {
              (158606 call(387076 call (partial) unlockTable _mt[243] this[159002]))
            }
          }
          unknown call_tmp[674111] "expr temp" "maybe param" "maybe type" "temp"
          (674114 'move' call_tmp[674111](361103 call table _mt[243] this[159002]))
          (158617 call(158612 call (partial) requestCapacity _mt[243] call_tmp[674111]) numKeys[158578])
        }
        {
          (158659 call warning "Requested capacity (" numKeys[158578] ") " "is less than current size (" entries[158590] ")")
          (482401 'end of statement' entries[158590])
        }
      }
      (158674 'on block' 0 tmp[158669])
    }
    (521197 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiSorted[158684](arg _mt[159008]:_MT[238], arg this[159006]:DefaultAssociativeDom[158900](?), arg comparator[158682]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521201] "RVV" "temp"
    unknown tableCopy[158725] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter8[583087](arg iterator[583089]:_any[178](?), arg this[583125]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[583136] "RVV" "temp"
      {
        unknown _indexOfInterest[583094] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[583095] "expr temp" "temp"
        (583104 'move' _iterator[583095](583102 call _getIterator iterator[583089]))
        Defer
        {
          {
            (583118 call _freeIterator _iterator[583095])
          }
        }
        { scopeless type
          (583109 'move' _indexOfInterest[583094](583106 call iteratorIndex _iterator[583095]))
        }
        ForLoop[583096] for-expr
        {
          unknown slot[158723] "index var" "insert auto destroy" "no doc"
          (583129 'end of statement')
          (583113 'move' slot[158723] _indexOfInterest[583094])
          (583130 'end of statement' slot[158723])
          {
            {
              unknown yret[583140] "YVV" "temp"
              unknown call_tmp[583149] "expr temp" "maybe param" "maybe type" "temp"
              (583152 'move' call_tmp[583149](361113 call table _mt[243] this[583125]))
              unknown call_tmp[583156] "expr temp" "maybe param" "maybe type" "temp"
              (583159 'move' call_tmp[583156](158717 call(158712 call (partial) table _mt[243] call_tmp[583149]) slot[158723]))
              unknown call_tmp[583163] "expr temp" "maybe param" "maybe type" "temp"
              (583166 'move' call_tmp[583163](158718 call key _mt[243] call_tmp[583156]))
              (583143 'move' yret[583140](583142 'deref' call_tmp[583163]))
              (583145 yield yret[583140])
              (583132 'end of statement' slot[158723])
            }
          }
          label _continueLabel[583099]
          _indexOfInterest[583094]
          _iterator[583095]
        }
        label _breakLabel[583100]
      }
      (583138 return ret[583136])
    }
    function chpl__forexpr8[583067](arg iterExpr[583070]:_any[178](?), arg this[583074]:DefaultAssociativeDom[158900](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[583171] "RVV" "temp"
      unknown _iterator[583077] "expr temp" "maybe ref" "temp"
      (583079 'move' _iterator[583077] iterExpr[583070])
      unknown call_tmp[583178] "expr temp" "maybe param" "maybe type" "temp"
      (583181 'move' call_tmp[583178](583082 call chpl__loopexpr_iter8 _iterator[583077] this[583074]))
      (583176 'move' ret[583171](583175 'deref' call_tmp[583178]))
      (583173 return ret[583171])
    }
    unknown call_tmp[583185] "expr temp" "maybe param" "maybe type" "temp"
    (583188 'move' call_tmp[583185](158710 call(387089 call (partial) _fullSlots _mt[243] this[159006])))
    unknown call_tmp[583190] "maybe param" "maybe type" "temp"
    (583193 'move' call_tmp[583190](583072 call chpl__forexpr8 call_tmp[583185] this[159006]))
    (583197 'iterator record set shape' call_tmp[583190] call_tmp[583185] 1)
    unknown call_tmp[674118] "expr temp" "maybe param" "maybe type" "temp"
    (674121 'move' call_tmp[674118](158691 call chpl_build_low_bounded_range 0))
    unknown call_tmp[674125] "expr temp" "maybe param" "maybe type" "temp"
    (674128 'move' call_tmp[674125](361108 call numEntries _mt[243] this[159006]))
    unknown call_tmp[674132] "expr temp" "maybe param" "maybe type" "temp"
    (674135 'move' call_tmp[674132](158698 call(158694 call (partial) read _mt[243] call_tmp[674125])))
    unknown call_tmp[674137] "expr temp" "maybe param" "maybe type" "temp"
    (674140 'move' call_tmp[674137](158699 call # call_tmp[674118] call_tmp[674132]))
    unknown call_tmp[674142] "expr temp" "maybe param" "maybe type" "temp"
    (674145 'move' call_tmp[674142](158703 call chpl__ensureDomainExpr call_tmp[674137]))
    unknown call_tmp[674149] "expr temp" "maybe param" "maybe type" "temp"
    (674152 'move' call_tmp[674149](387084 call idxType _mt[243] this[159006]))
    unknown call_tmp[674154] "maybe param" "maybe type" "temp"
    (674157 'move' call_tmp[674154](158705 call chpl__buildArrayRuntimeType call_tmp[674142] call_tmp[674149]))
    (544188 'init var' tableCopy[158725] call_tmp[583190] call_tmp[674154])
    (158728 'end of statement')
    (158734 call sort tableCopy[158725](comparator = comparator[158682]))
    (482403 'end of statement' tableCopy[158725])
    {
      unknown _indexOfInterest[158741] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158742] "expr temp" "temp"
      (158751 'move' _iterator[158742](158749 call _getIterator tableCopy[158725]))
      Defer
      {
        {
          (158767 call _freeIterator _iterator[158742])
        }
      }
      { scopeless type
        (158756 'move' _indexOfInterest[158741](158753 call iteratorIndex _iterator[158742]))
      }
      ForLoop[158743]
      {
        unknown ind[158760] "index var" "insert auto destroy"
        (482406 'end of statement')
        (158762 'move' ind[158760] _indexOfInterest[158741])
        (482407 'end of statement' ind[158760])
        unknown yret[521205] "YVV" "temp"
        (521208 'move' yret[521205](521207 'deref' ind[158760]))
        (521210 yield yret[521205])
        (482409 'end of statement' ind[158760])
        label _continueLabel[158746]
        _indexOfInterest[158741]
        _iterator[158742]
      }
      label _breakLabel[158747]
    }
    (521203 return ret[521201])
    (355268 'used modules list'(158687 'use' Sort[268056]))
  }
  function DefaultAssociativeDom[158900](?)._fullSlots[158778](arg _mt[159012]:_MT[238], arg this[159010]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521214] "RVV" "temp"
    {
      unknown _indexOfInterest[158805] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158806] "expr temp" "temp"
      unknown call_tmp[674161] "expr temp" "maybe param" "maybe type" "temp"
      (674164 'move' call_tmp[674161](361118 call table _mt[243] this[159010]))
      unknown call_tmp[674168] "expr temp" "maybe param" "maybe type" "temp"
      (674171 'move' call_tmp[674168](158786 call(158782 call (partial) allSlots _mt[243] call_tmp[674161])))
      (158815 'move' _iterator[158806](158813 call _getIterator call_tmp[674168]))
      Defer
      {
        {
          (158832 call _freeIterator _iterator[158806])
        }
      }
      { scopeless type
        (158821 'move' _indexOfInterest[158805](158818 call iteratorIndex _iterator[158806]))
      }
      ForLoop[158807]
      {
        unknown slot[158825] "index var" "insert auto destroy"
        (482412 'end of statement')
        (158827 'move' slot[158825] _indexOfInterest[158805])
        (482413 'end of statement' slot[158825])
        {
          unknown call_tmp[674175] "expr temp" "maybe param" "maybe type" "temp"
          (674178 'move' call_tmp[674175](361123 call table _mt[243] this[159010]))
          unknown call_tmp[674182] "expr temp" "maybe param" "maybe type" "temp"
          (674185 'move' call_tmp[674182](158795 call(158790 call (partial) isSlotFull _mt[243] call_tmp[674175]) slot[158825]))
          unknown call_tmp[674187] "expr temp" "maybe param" "maybe type" "temp"
          (674190 'move' call_tmp[674187](158800 call _cond_test call_tmp[674182]))
          if call_tmp[674187]
          {
            unknown yret[521218] "YVV" "temp"
            (521221 'move' yret[521218](521220 'deref' slot[158825]))
            (521223 yield yret[521218])
            (482415 'end of statement' slot[158825])
          }
        }
        label _continueLabel[158810]
        _indexOfInterest[158805]
        _iterator[158806]
      }
      label _breakLabel[158811]
    }
    (521216 return ret[521214])
  }
  function DefaultAssociativeDom[158900](?).dsiHasSingleLocalSubdomain[158844](arg _mt[159016]:_MT[238], arg this[159014]:DefaultAssociativeDom[158900](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521227] "RVV" "param" "temp"
    (521232 'move' ret[521227](521231 'deref' 1))
    (521229 return ret[521227])
  }
  function DefaultAssociativeDom[158900](?).dsiLocalSubdomain[158858](arg _mt[159020]:_MT[238], arg this[159018]:DefaultAssociativeDom[158900](?), arg loc[158855]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521236] "RVV" "temp"
    unknown call_tmp[674192] "expr temp" "maybe param" "maybe type" "temp"
    (674195 'move' call_tmp[674192](158861 '_wide_get_locale' this[159018]))
    unknown call_tmp[674197] "expr temp" "maybe param" "maybe type" "temp"
    (674200 'move' call_tmp[674197](158862 call chpl_localeID_to_locale call_tmp[674192]))
    unknown call_tmp[674202] "expr temp" "maybe param" "maybe type" "temp"
    (674205 'move' call_tmp[674202](158865 call == call_tmp[674197] loc[158855]))
    unknown call_tmp[674207] "expr temp" "maybe param" "maybe type" "temp"
    (674210 'move' call_tmp[674207](158892 call _cond_test call_tmp[674202]))
    if call_tmp[674207]
    {
      unknown call_tmp[674212] "expr temp" "maybe param" "maybe type" "temp"
      (674215 'move' call_tmp[674212](158871 call _to_unmanaged this[159018]))
      unknown call_tmp[674217] "expr temp" "maybe param" "maybe type" "temp"
      (674220 'move' call_tmp[674217](158873 call _getDomain call_tmp[674212]))
      (521241 'move' ret[521236](521240 'deref' call_tmp[674217]))
      gotoReturn _end_dsiLocalSubdomain[521234] _end_dsiLocalSubdomain[521234]
    }
    {
      unknown a[158884] "dead at end of block" "insert auto destroy"
      unknown call_tmp[674224] "expr temp" "maybe param" "maybe type" "temp"
      (674227 'move' call_tmp[674224](387104 call idxType _mt[243] this[159018]))
      unknown call_tmp[674231] "expr temp" "maybe param" "maybe type" "temp"
      (674234 'move' call_tmp[674231](387109 call parSafe _mt[243] this[159018]))
      unknown call_tmp[674236] "expr temp" "maybe param" "maybe type" "temp"
      (674239 'move' call_tmp[674236](158882 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[674224](parSafe = call_tmp[674231])))
      (544190 'default init var' a[158884] call_tmp[674236])
      (158887 'end of statement')
      (521246 'move' ret[521236](521245 'deref' a[158884]))
      gotoReturn _end_dsiLocalSubdomain[521234] _end_dsiLocalSubdomain[521234]
      (482419 'end of statement' a[158884])
    }
    label _end_dsiLocalSubdomain[521234]
    (521238 return ret[521236])
  }
  function DefaultAssociativeDom[158900](?).super[810628](arg _mt[810630]:_MT[238], arg this[810632]:DefaultAssociativeDom[158900](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810642] "RVV" "temp"
    unknown call_tmp[810649] "expr temp" "maybe param" "maybe type" "temp"
    (810652 'move' call_tmp[810649](810636 '.v' this[810632] c"super"))
    (810647 'move' ret[810642](810646 'deref' call_tmp[810649]))
    (810644 return ret[810642])
  }
  function DefaultAssociativeDom[810659](?).idxType[810654](arg _mt[810656]:_MT[238], arg this[810661]:DefaultAssociativeDom[810659](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810696] "RVV" "temp" "type variable"
    unknown borrowOfThis[810663]
    (810688 'end of statement')
    (810665 'move' borrowOfThis[810663](810668 call _cast _borrowedNonNilable[214](?) this[810661]))
    (810689 'end of statement' borrowOfThis[810663])
    unknown call_tmp[810710] "expr temp" "maybe param" "maybe type" "temp"
    (810713 'move' call_tmp[810710](810678 'is bound' borrowOfThis[810663] c"idxType"))
    if call_tmp[810710]
    {
      unknown call_tmp[810715] "expr temp" "maybe param" "maybe type" "temp"
      (810718 'move' call_tmp[810715](810673 '.v' borrowOfThis[810663] c"idxType"))
      unknown call_tmp[810720] "expr temp" "maybe param" "maybe type" "temp"
      (810723 'move' call_tmp[810720](810674 call chpl_checkLegalTypeFieldAccessor this[810661] call_tmp[810715] "idxType"))
      (810701 'move' ret[810696](810700 'deref' call_tmp[810720]))
      gotoReturn _end_idxType[810694] _end_idxType[810694]
      (810691 'end of statement' borrowOfThis[810663])
    }
    {
      (810706 'move' ret[810696](810705 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810694] _end_idxType[810694]
    }
    label _end_idxType[810694]
    (810698 return ret[810696])
  }
  function DefaultAssociativeDom[810659](?).idxType[810725](arg _mt[810727]:_MT[238], arg this[810729]:DefaultAssociativeDom[810659](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810764] "RVV" "temp" "type variable"
    unknown borrowOfThis[810731] "type variable"
    (810756 'end of statement')
    (810733 'move' borrowOfThis[810731](810736 call _cast _borrowedNonNilable[214](?) this[810729]))
    (810757 'end of statement' borrowOfThis[810731])
    unknown call_tmp[810778] "expr temp" "maybe param" "maybe type" "temp"
    (810781 'move' call_tmp[810778](810746 'is bound' borrowOfThis[810731] c"idxType"))
    if call_tmp[810778]
    {
      unknown call_tmp[810783] "expr temp" "maybe param" "maybe type" "temp"
      (810786 'move' call_tmp[810783](810741 '.v' borrowOfThis[810731] c"idxType"))
      unknown call_tmp[810788] "expr temp" "maybe param" "maybe type" "temp"
      (810791 'move' call_tmp[810788](810742 call chpl_checkLegalTypeFieldAccessor this[810729] call_tmp[810783] "idxType"))
      (810769 'move' ret[810764](810768 'deref' call_tmp[810788]))
      gotoReturn _end_idxType[810762] _end_idxType[810762]
      (810759 'end of statement' borrowOfThis[810731])
    }
    {
      (810774 'move' ret[810764](810773 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810762] _end_idxType[810762]
    }
    label _end_idxType[810762]
    (810766 return ret[810764])
  }
  function DefaultAssociativeDom[810659](?).parSafe[810793](arg _mt[810795]:_MT[238], arg this[810797]:DefaultAssociativeDom[810659](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810828] "RVV" "param" "temp"
    unknown borrowOfThis[810799]
    (810820 'end of statement')
    (810801 'move' borrowOfThis[810799](810804 call _cast _borrowedNonNilable[214](?) this[810797]))
    (810821 'end of statement' borrowOfThis[810799])
    unknown call_tmp[810842] "expr temp" "maybe param" "maybe type" "temp"
    (810845 'move' call_tmp[810842](810810 'is bound' borrowOfThis[810799] c"parSafe"))
    if call_tmp[810842]
    {
      unknown call_tmp[810847] "expr temp" "maybe param" "maybe type" "temp"
      (810850 'move' call_tmp[810847](810809 '.' borrowOfThis[810799] c"parSafe"))
      (810833 'move' ret[810828](810832 'deref' call_tmp[810847]))
      gotoReturn _end_parSafe[810826] _end_parSafe[810826]
      (810823 'end of statement' borrowOfThis[810799])
    }
    {
      (810838 'move' ret[810828](810837 'deref' ?[260]))
      gotoReturn _end_parSafe[810826] _end_parSafe[810826]
    }
    label _end_parSafe[810826]
    (810830 return ret[810828])
  }
  function DefaultAssociativeDom[810659](?).parSafe[810852](arg _mt[810854]:_MT[238], arg this[810856]:DefaultAssociativeDom[810659](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810887] "RVV" "param" "temp"
    unknown borrowOfThis[810858] "type variable"
    (810879 'end of statement')
    (810860 'move' borrowOfThis[810858](810863 call _cast _borrowedNonNilable[214](?) this[810856]))
    (810880 'end of statement' borrowOfThis[810858])
    unknown call_tmp[810901] "expr temp" "maybe param" "maybe type" "temp"
    (810904 'move' call_tmp[810901](810869 'is bound' borrowOfThis[810858] c"parSafe"))
    if call_tmp[810901]
    {
      unknown call_tmp[810906] "expr temp" "maybe param" "maybe type" "temp"
      (810909 'move' call_tmp[810906](810868 '.' borrowOfThis[810858] c"parSafe"))
      (810892 'move' ret[810887](810891 'deref' call_tmp[810906]))
      gotoReturn _end_parSafe[810885] _end_parSafe[810885]
      (810882 'end of statement' borrowOfThis[810858])
    }
    {
      (810897 'move' ret[810887](810896 'deref' ?[260]))
      gotoReturn _end_parSafe[810885] _end_parSafe[810885]
    }
    label _end_parSafe[810885]
    (810889 return ret[810887])
  }
  function DefaultAssociativeDom[158900](?).dist[810911](arg _mt[810913]:_MT[238], arg this[810915]:DefaultAssociativeDom[158900](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810925] "RVV" "temp"
    unknown call_tmp[810932] "expr temp" "maybe param" "maybe type" "temp"
    (810935 'move' call_tmp[810932](810919 '.' this[810915] c"dist"))
    (810930 'move' ret[810925](810929 'addr of' call_tmp[810932]))
    (810927 return ret[810925])
  }
  function DefaultAssociativeDom[158900](?).numEntries[810937](arg _mt[810939]:_MT[238], arg this[810941]:DefaultAssociativeDom[158900](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810951] "RVV" "temp"
    unknown call_tmp[810958] "expr temp" "maybe param" "maybe type" "temp"
    (810961 'move' call_tmp[810958](810945 '.' this[810941] c"numEntries"))
    (810956 'move' ret[810951](810955 'addr of' call_tmp[810958]))
    (810953 return ret[810951])
  }
  function DefaultAssociativeDom[158900](?).tableLock[810963](arg _mt[810965]:_MT[238], arg this[810967]:DefaultAssociativeDom[158900](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810977] "RVV" "temp"
    unknown call_tmp[810984] "expr temp" "maybe param" "maybe type" "temp"
    (810987 'move' call_tmp[810984](810971 '.' this[810967] c"tableLock"))
    (810982 'move' ret[810977](810981 'addr of' call_tmp[810984]))
    (810979 return ret[810977])
  }
  function DefaultAssociativeDom[158900](?).table[810989](arg _mt[810991]:_MT[238], arg this[810993]:DefaultAssociativeDom[158900](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811003] "RVV" "temp"
    unknown call_tmp[811010] "expr temp" "maybe param" "maybe type" "temp"
    (811013 'move' call_tmp[811010](810997 '.' this[810993] c"table"))
    (811008 'move' ret[811003](811007 'addr of' call_tmp[811010]))
    (811005 return ret[811003])
  }
  function DefaultAssociativeDom[158900](?).writeThis[811015](arg _mt[811019]:_MT[238], arg this[811017]:DefaultAssociativeDom[158900](?), arg f[811018]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (811024 call writeThisDefaultImpl f[811018] this[811017])
    (811029 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).readThis[811031](arg _mt[811035]:_MT[238], arg this[811033]:DefaultAssociativeDom[158900](?), arg f[811034]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (811039 call readThisDefaultImpl f[811034] this[811033])
    (811045 return _void[55])
  }
  type DefaultAssociativeDom[158900](?) val super[355799]:BaseAssociativeDom[148855] "super class" unknown idxType[156534] "type variable" unknown parSafe[156538] "param" bool[10] val dist[156544]:unmanaged DefaultDist[415560] unmanaged DefaultDist[415560] unknown numEntries[156552](156551 call chpl__processorAtomicType int(64)[13]) unknown tableLock[156562](156559 IfExpr  parSafe[156538] then
  { scopeless
    chpl_LocalSpinlock[187432]
  } else
  { scopeless
    nothing[7]
  } ) unknown table[156571](156570 call chpl__hashtable[204564](?) idxType[156534] nothing[7])
  type DefaultAssociativeDom[810659](?)
  type unmanaged DefaultAssociativeDom[415587](?)
  type DefaultAssociativeDom[378137](?)
  function DefaultAssociativeArr[161464](?).init[159075](arg _mt[161468]:_MT[238], arg this[161466]:DefaultAssociativeArr[161464](?), arg eltType[159073]:_any[178](?), arg idxType[159077]:_any[178](?), param arg parSafeDom[159079]:_any[178](?), arg dom[159088] :
  (159086 call unmanaged DefaultAssociativeDom[415587](?) idxType[159077](parSafe = parSafeDom[159079])), param arg initElts[159091]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462165] "temporary of super field" "temp"
    (462167 'move' super_tmp[462165](462164 '.v' this[161466] c"super"))
    (159100 call(159094 call (partial) init _mt[243] super_tmp[462165])(eltType = eltType[159073]))
    (482421 'end of statement')
    unknown tmp[462170] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492569] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[674243] "expr temp" "maybe param" "maybe type" "temp"
      (674246 'move' call_tmp[674243](462172 '.v' this[161466] c"super"))
      (492573 'move' call_type_tmp[492569](462175 'typeof' call_tmp[674243]))
    }
    (462176 'move' tmp[462170] call_type_tmp[492569])
    unknown call_tmp[674248] "maybe param" "maybe type" "temp"
    (674251 'move' call_tmp[674248](462181 'cast' tmp[462170] this[161466]))
    unknown chpl__thisAsParent[462178] "dead at end of block" "insert auto destroy" "temp"
    (544192 'init var' chpl__thisAsParent[462178] call_tmp[674248] tmp[462170])
    (462184 'setcid' chpl__thisAsParent[462178])
    (482422 'end of statement')
    unknown tmp[462186] "temp" "type variable"
    (462188 'move' tmp[462186] idxType[159077])
    (462190 'init field' this[161466] c"idxType" tmp[462186])
    unknown call_tmp[674253] "expr temp" "maybe param" "maybe type" "temp"
    (674256 'move' call_tmp[674253](462195 call _cast bool[10] parSafeDom[159079]))
    (462197 'init field' this[161466] c"parSafeDom" call_tmp[674253])
    (482423 'end of statement')
    unknown call_tmp[674258] "expr temp" "maybe param" "maybe type" "temp"
    (674261 'move' call_tmp[674258](462213 '.v' this[161466] c"idxType"))
    unknown call_tmp[674263] "expr temp" "maybe param" "maybe type" "temp"
    (674266 'move' call_tmp[674263](462216 '.v' this[161466] c"parSafeDom"))
    unknown call_tmp[674268] "maybe param" "maybe type" "temp"
    (674271 'move' call_tmp[674268](462203 call unmanaged DefaultAssociativeDom[415587](?) call_tmp[674258](parSafe = call_tmp[674263])))
    unknown tmp[462200] "temp"
    (462207 'init var' tmp[462200] dom[159088] call_tmp[674268])
    (462209 'init field' this[161466] c"dom" tmp[462200])
    (482424 'end of statement')
    unknown call_tmp[674275] "expr temp" "maybe param" "maybe type" "temp"
    (674278 'move' call_tmp[674275](159130 call table _mt[243] dom[159088]))
    unknown call_tmp[674282] "maybe param" "maybe type" "temp"
    (674285 'move' call_tmp[674282](159135 call tableSize _mt[243] call_tmp[674275]))
    unknown tableSize[159138] "dead at end of block" "insert auto destroy"
    (544194 'init var' tableSize[159138] call_tmp[674282])
    (159141 'end of statement')
    val tmp[462219]:int(64)[13] "temp"
    (462222 'default init var' tmp[462219] int(64)[13])
    (462226 '.=' this[161466] c"dataSize" tmp[462219])
    (482425 'end of statement')
    unknown call_tmp[674289] "expr temp" "maybe param" "maybe type" "temp"
    (674292 'move' call_tmp[674289](159147 call table _mt[243] dom[159088]))
    unknown call_tmp[674296] "maybe param" "maybe type" "temp"
    (674299 'move' call_tmp[674296](159158 call(159152 call (partial) allocateData _mt[243] call_tmp[674289]) tableSize[159138] eltType[159073]))
    unknown call_tmp[674301] "expr temp" "maybe param" "maybe type" "temp"
    (674304 'move' call_tmp[674301](462241 '.v' this[161466] c"eltType"))
    unknown call_tmp[674306] "maybe param" "maybe type" "temp"
    (674309 'move' call_tmp[674306](462233 call _ddata[11696](?) call_tmp[674301]))
    unknown tmp[462230] "temp"
    (462235 'init var' tmp[462230] call_tmp[674296] call_tmp[674306])
    (462237 'init field' this[161466] c"data" tmp[462230])
    (482426 'end of statement' tableSize[159138])
    unknown call_tmp[674311] "expr temp" "maybe param" "maybe type" "temp"
    (674314 'move' call_tmp[674311](462255 '.v' this[161466] c"eltType"))
    unknown call_tmp[674316] "maybe param" "maybe type" "temp"
    (674319 'move' call_tmp[674316](462247 call _ddata[11696](?) call_tmp[674311]))
    unknown tmp[462244] "temp"
    (462249 'init var' tmp[462244] nil[44] call_tmp[674316])
    (462251 'init field' this[161466] c"tmpData" tmp[462244])
    (482428 'end of statement')
    unknown tmp[462258] "temp"
    (462260 'init var' tmp[462258] initElts[159091])
    (462262 '.=' this[161466] c"eltsNeedDeinit" tmp[462258])
    (482429 'end of statement')
    (462267 'setcid' this[161466])
    (482430 'end of statement')
    unknown call_tmp[674321] "expr temp" "maybe param" "maybe type" "temp"
    (674324 'move' call_tmp[674321](159326 call _cond_test initElts[159091]))
    if call_tmp[674321]
    {
      unknown call_tmp[674328] "expr temp" "maybe param" "maybe type" "temp"
      (674331 'move' call_tmp[674328](159192 call eltType _mt[243] this[161466]))
      unknown call_tmp[674333] "expr temp" "maybe param" "maybe type" "temp"
      (674336 'move' call_tmp[674333](159196 call isNonNilableClass call_tmp[674328]))
      unknown call_tmp[674338] "expr temp" "maybe param" "maybe type" "temp"
      (674341 'move' call_tmp[674338](159320 call _cond_test call_tmp[674333]))
      if call_tmp[674338]
      {
        unknown call_tmp[674343] "expr temp" "maybe param" "maybe type" "temp"
        (674346 'move' call_tmp[674343](159231 call + "Cannot default initialize associative array because" " element type "))
        unknown call_tmp[674348] "expr temp" "maybe param" "maybe type" "temp"
        (674351 'move' call_tmp[674348](159235 call _cast string[26] eltType[159073]))
        unknown call_tmp[674353] "expr temp" "maybe param" "maybe type" "temp"
        (674356 'move' call_tmp[674353](159237 call + call_tmp[674343] call_tmp[674348]))
        unknown call_tmp[674358] "maybe param" "maybe type" "temp"
        (674361 'move' call_tmp[674358](159256 call + call_tmp[674353] " is a non-nilable class"))
        unknown msg[159258] "dead at end of block" "param"
        (544196 'init var' msg[159258] call_tmp[674358])
        (159261 'end of statement')
        (159266 call compilerError msg[159258])
      }
      {
        unknown call_tmp[674365] "expr temp" "maybe param" "maybe type" "temp"
        (674368 'move' call_tmp[674365](159270 call eltType _mt[243] this[161466]))
        unknown call_tmp[674370] "expr temp" "maybe param" "maybe type" "temp"
        (674373 'move' call_tmp[674370](159274 call isDefaultInitializable call_tmp[674365]))
        unknown call_tmp[674375] "expr temp" "maybe param" "maybe type" "temp"
        (674378 'move' call_tmp[674375](159275 call ! call_tmp[674370]))
        unknown call_tmp[674380] "expr temp" "maybe param" "maybe type" "temp"
        (674383 'move' call_tmp[674380](159316 call _cond_test call_tmp[674375]))
        if call_tmp[674380]
        {
          unknown call_tmp[674385] "expr temp" "maybe param" "maybe type" "temp"
          (674388 'move' call_tmp[674385](159279 call + "Cannot default initialize associative array because" " element type "))
          unknown call_tmp[674390] "expr temp" "maybe param" "maybe type" "temp"
          (674393 'move' call_tmp[674390](159283 call _cast string[26] eltType[159073]))
          unknown call_tmp[674395] "expr temp" "maybe param" "maybe type" "temp"
          (674398 'move' call_tmp[674395](159285 call + call_tmp[674385] call_tmp[674390]))
          unknown call_tmp[674400] "maybe param" "maybe type" "temp"
          (674403 'move' call_tmp[674400](159304 call + call_tmp[674395] " cannot be default initialized"))
          unknown msg[159306] "dead at end of block" "param"
          (544198 'init var' msg[159306] call_tmp[674400])
          (159309 'end of statement')
          (159314 call compilerError msg[159306])
        }
      }
    }
    unknown call_tmp[674405] "expr temp" "maybe param" "maybe type" "temp"
    (674408 'move' call_tmp[674405](159502 call _cond_test initElts[159091]))
    if call_tmp[674405]
    {
      unknown call_tmp[674410] "maybe param" "maybe type" "temp"
      (674413 'move' call_tmp[674410](159335 call init_elts_method tableSize[159138] eltType[159073]))
      unknown initMethod[159336] "dead at end of block" "insert auto destroy"
      (544200 'init var' initMethod[159336] call_tmp[674410])
      (159339 'end of statement' tableSize[159138])
      {
        unknown tmp[159477] "expr temp" "maybe param" "maybe type" "temp"
        (159479 'move' tmp[159477] initMethod[159336])
        unknown call_tmp[674415] "expr temp" "maybe param" "maybe type" "temp"
        (674418 'move' call_tmp[674415](159481 call == tmp[159477] noInit[11146]))
        unknown call_tmp[674420] "expr temp" "maybe param" "maybe type" "temp"
        (674423 'move' call_tmp[674420](159484 call _cond_test call_tmp[674415]))
        if call_tmp[674420]
        {
        }
        {
          unknown call_tmp[674425] "expr temp" "maybe param" "maybe type" "temp"
          (674428 'move' call_tmp[674425](159487 call == tmp[159477] serialInit[11148]))
          unknown call_tmp[674430] "expr temp" "maybe param" "maybe type" "temp"
          (674433 'move' call_tmp[674430](159490 call _cond_test call_tmp[674425]))
          if call_tmp[674430]
          {
            {
              unknown _indexOfInterest[159388] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[159389] "expr temp" "temp"
              unknown call_tmp[674437] "expr temp" "maybe param" "maybe type" "temp"
              (674440 'move' call_tmp[674437](159358 call table _mt[243] dom[159088]))
              unknown call_tmp[674444] "expr temp" "maybe param" "maybe type" "temp"
              (674447 'move' call_tmp[674444](159365 call(159361 call (partial) allSlots _mt[243] call_tmp[674437])))
              (159398 'move' _iterator[159389](159396 call _getIterator call_tmp[674444]))
              Defer
              {
                {
                  (159415 call _freeIterator _iterator[159389])
                }
              }
              { scopeless type
                (159404 'move' _indexOfInterest[159388](159401 call iteratorIndex _iterator[159389]))
              }
              ForLoop[159390]
              {
                unknown slot[159408] "index var" "insert auto destroy"
                (482435 'end of statement')
                (159410 'move' slot[159408] _indexOfInterest[159388])
                (482436 'end of statement' slot[159408])
                {
                  unknown call_tmp[674451] "expr temp" "maybe param" "maybe type" "temp"
                  (674454 'move' call_tmp[674451](159374 call(159369 call (partial) _isSlotFull _mt[243] dom[159088]) slot[159408]))
                  unknown call_tmp[674456] "expr temp" "maybe param" "maybe type" "temp"
                  (674459 'move' call_tmp[674456](159383 call _cond_test call_tmp[674451]))
                  if call_tmp[674456]
                  {
                    (159380 call(387144 call (partial) _doDefaultInitSlot _mt[243] this[161466]) slot[159408](inAdd = 0))
                    (482438 'end of statement' slot[159408])
                  }
                }
                label _continueLabel[159393]
                _indexOfInterest[159388]
                _iterator[159389]
              }
              label _breakLabel[159394]
            }
          }
          {
            unknown call_tmp[674463] "expr temp" "maybe param" "maybe type" "temp"
            (674466 'move' call_tmp[674463](159494 call == tmp[159477] parallelInit[11150]))
            unknown call_tmp[674468] "expr temp" "maybe param" "maybe type" "temp"
            (674471 'move' call_tmp[674468](159497 call _cond_test call_tmp[674463]))
            if call_tmp[674468]
            {
              unknown call_tmp[674475] "expr temp" "maybe param" "maybe type" "temp"
              (674478 'move' call_tmp[674475](159432 call table _mt[243] dom[159088]))
              unknown call_tmp[674482] "expr temp" "maybe param" "maybe type" "temp"
              (674485 'move' call_tmp[674482](159439 call(159435 call (partial) allSlots _mt[243] call_tmp[674475])))
              Forall {
                induction variables:
                  
                  unknown slot[159461] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[674482]
                shadow variables:
                other variables
                  forall body
                {
                  unknown call_tmp[674489] "expr temp" "maybe param" "maybe type" "temp"
                  (674492 'move' call_tmp[674489](159446 call(159441 call (partial) _isSlotFull _mt[243] dom[159088]) slot[159461]))
                  unknown call_tmp[674494] "expr temp" "maybe param" "maybe type" "temp"
                  (674497 'move' call_tmp[674494](159455 call _cond_test call_tmp[674489]))
                  if call_tmp[674494]
                  {
                    (159452 call(387150 call (partial) _doDefaultInitSlot _mt[243] this[161466]) slot[159461](inAdd = 0))
                    (482440 'end of statement' slot[159461])
                  }
                }
              }
            }
            {
              (159471 call halt "ArrayInit.heuristicInit should have been made concrete")
            }
          }
        }
      }
    }
    (521250 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).deinit[159510](arg _mt[161472]:_MT[238], arg this[161470]:DefaultAssociativeArr[161464](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[674503] "expr temp" "maybe param" "maybe type" "temp"
    (674506 'move' call_tmp[674503](387156 call data _mt[243] this[161470]))
    unknown call_tmp[674510] "expr temp" "maybe param" "maybe type" "temp"
    (674513 'move' call_tmp[674510](361151 call dom _mt[243] this[161470]))
    unknown call_tmp[674517] "expr temp" "maybe param" "maybe type" "temp"
    (674520 'move' call_tmp[674517](159516 call table _mt[243] call_tmp[674510]))
    unknown call_tmp[674524] "expr temp" "maybe param" "maybe type" "temp"
    (674527 'move' call_tmp[674524](159519 call tableSize _mt[243] call_tmp[674517]))
    (159522 call _ddata_free call_tmp[674503] call_tmp[674524])
    (521252 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiGetBaseDom[159529](arg _mt[161476]:_MT[238], arg this[161474]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521256] "RVV" "temp"
    unknown call_tmp[674531] "expr temp" "maybe param" "maybe type" "temp"
    (674534 'move' call_tmp[674531](387161 call dom _mt[243] this[161474]))
    (521261 'move' ret[521256](521260 'deref' call_tmp[674531]))
    (521258 return ret[521256])
  }
  function DefaultAssociativeArr[161464](?).dsiAccess[159543](arg _mt[161480]:_MT[238], arg this[161478]:DefaultAssociativeArr[161464](?), arg idx[159540] :
  (387166 call idxType _mt[243] this[161478])) ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521265] "RVV" "temp"
    unknown call_tmp[674540] "expr temp" "maybe param" "maybe type" "temp"
    (674543 'move' call_tmp[674540](361156 call dom _mt[243] this[161478]))
    unknown call_tmp[674547] "expr temp" "maybe param" "maybe type" "temp"
    (674550 'move' call_tmp[674547](159551 call table _mt[243] call_tmp[674540]))
    unknown call_tmp[674554] "maybe param" "maybe type" "temp"
    (674557 'move' call_tmp[674554](159559 call(159554 call (partial) findFullSlot _mt[243] call_tmp[674547]) idx[159540]))
    unknown tmp[159560] "dead at end of block" "insert auto destroy" "temp"
    (544202 'init var' tmp[159560] call_tmp[674554])
    (159567 call _check_tuple_var_decl tmp[159560] 2)
    (482445 'end of statement')
    unknown call_tmp[674559] "maybe param" "maybe type" "temp"
    (674562 'move' call_tmp[674559](159561 call tmp[159560] 0))
    unknown found[159545] "dead at end of block" "insert auto destroy"
    (544204 'init var' found[159545] call_tmp[674559])
    unknown call_tmp[674564] "maybe param" "maybe type" "temp"
    (674567 'move' call_tmp[674564](159564 call tmp[159560] 1))
    unknown slotNum[159547] "dead at end of block" "insert auto destroy"
    (544206 'init var' slotNum[159547] call_tmp[674564])
    (159572 'end of statement')
    unknown call_tmp[674569] "expr temp" "maybe param" "maybe type" "temp"
    (674572 'move' call_tmp[674569](159605 call _cond_test found[159545]))
    if call_tmp[674569]
    {
      unknown call_tmp[674576] "expr temp" "maybe param" "maybe type" "temp"
      (674579 'move' call_tmp[674576](159578 call(387173 call (partial) data _mt[243] this[161478]) slotNum[159547]))
      (521270 'move' ret[521265](521269 'addr of' call_tmp[674576]))
      gotoReturn _end_dsiAccess[521263] _end_dsiAccess[521263]
      (482446 'end of statement' slotNum[159547])
    }
    {
      (159602 call halt "array index out of bounds: " idx[159540])
    }
    label _end_dsiAccess[521263]
    (521267 return ret[521265])
  }
  function DefaultAssociativeArr[161464](?).dsiAccess[159617](arg _mt[161484]:_MT[238], arg this[161482]:DefaultAssociativeArr[161464](?), arg idx[159614] :
  (387180 call idxType _mt[243] this[161482])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521276] "RVV" "temp"
    unknown call_tmp[674585] "expr temp" "maybe param" "maybe type" "temp"
    (674588 'move' call_tmp[674585](361161 call dom _mt[243] this[161482]))
    unknown call_tmp[674592] "expr temp" "maybe param" "maybe type" "temp"
    (674595 'move' call_tmp[674592](159629 call table _mt[243] call_tmp[674585]))
    unknown call_tmp[674599] "maybe param" "maybe type" "temp"
    (674602 'move' call_tmp[674599](159637 call(159632 call (partial) findFullSlot _mt[243] call_tmp[674592]) idx[159614]))
    unknown tmp[159638] "dead at end of block" "insert auto destroy" "temp"
    (544208 'init var' tmp[159638] call_tmp[674599])
    (159645 call _check_tuple_var_decl tmp[159638] 2)
    (482449 'end of statement')
    unknown call_tmp[674604] "maybe param" "maybe type" "temp"
    (674607 'move' call_tmp[674604](159639 call tmp[159638] 0))
    unknown found[159623] "dead at end of block" "insert auto destroy"
    (544210 'init var' found[159623] call_tmp[674604])
    unknown call_tmp[674609] "maybe param" "maybe type" "temp"
    (674612 'move' call_tmp[674609](159642 call tmp[159638] 1))
    unknown slotNum[159625] "dead at end of block" "insert auto destroy"
    (544212 'init var' slotNum[159625] call_tmp[674609])
    (159650 'end of statement')
    unknown call_tmp[674614] "expr temp" "maybe param" "maybe type" "temp"
    (674617 'move' call_tmp[674614](159673 call _cond_test found[159623]))
    if call_tmp[674614]
    {
      unknown call_tmp[674621] "expr temp" "maybe param" "maybe type" "temp"
      (674624 'move' call_tmp[674621](159656 call(387192 call (partial) data _mt[243] this[161482]) slotNum[159625]))
      (521281 'move' ret[521276](521280 'deref' call_tmp[674621]))
      gotoReturn _end_dsiAccess[521274] _end_dsiAccess[521274]
      (482450 'end of statement' slotNum[159625])
    }
    {
      (159664 call halt "array index out of bounds: " idx[159614])
      (482452 'end of statement')
      unknown call_tmp[674628] "expr temp" "maybe param" "maybe type" "temp"
      (674631 'move' call_tmp[674628](159670 call(387199 call (partial) data _mt[243] this[161482]) 0))
      (521286 'move' ret[521276](521285 'deref' call_tmp[674628]))
      gotoReturn _end_dsiAccess[521274] _end_dsiAccess[521274]
    }
    label _end_dsiAccess[521274]
    (521278 return ret[521276])
  }
  where {
    unknown call_tmp[674635] "expr temp" "maybe param" "maybe type" "temp"
    (674638 'move' call_tmp[674635](387185 call eltType _mt[243] this[161482]))
    (159622 call shouldReturnRvalueByValue call_tmp[674635])
  }
  function DefaultAssociativeArr[161464](?).dsiAccess[159686](arg _mt[161488]:_MT[238], arg this[161486]:DefaultAssociativeArr[161464](?), arg idx[159683] :
  (387204 call idxType _mt[243] this[161486])) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521292] "RVV" "temp"
    unknown call_tmp[674644] "expr temp" "maybe param" "maybe type" "temp"
    (674647 'move' call_tmp[674644](361166 call dom _mt[243] this[161486]))
    unknown call_tmp[674651] "expr temp" "maybe param" "maybe type" "temp"
    (674654 'move' call_tmp[674651](159698 call table _mt[243] call_tmp[674644]))
    unknown call_tmp[674658] "maybe param" "maybe type" "temp"
    (674661 'move' call_tmp[674658](159706 call(159701 call (partial) findFullSlot _mt[243] call_tmp[674651]) idx[159683]))
    unknown tmp[159707] "dead at end of block" "insert auto destroy" "temp"
    (544214 'init var' tmp[159707] call_tmp[674658])
    (159714 call _check_tuple_var_decl tmp[159707] 2)
    (482454 'end of statement')
    unknown call_tmp[674663] "maybe param" "maybe type" "temp"
    (674666 'move' call_tmp[674663](159708 call tmp[159707] 0))
    unknown found[159692] "dead at end of block" "insert auto destroy"
    (544216 'init var' found[159692] call_tmp[674663])
    unknown call_tmp[674668] "maybe param" "maybe type" "temp"
    (674671 'move' call_tmp[674668](159711 call tmp[159707] 1))
    unknown slotNum[159694] "dead at end of block" "insert auto destroy"
    (544218 'init var' slotNum[159694] call_tmp[674668])
    (159719 'end of statement')
    unknown call_tmp[674673] "expr temp" "maybe param" "maybe type" "temp"
    (674676 'move' call_tmp[674673](159742 call _cond_test found[159692]))
    if call_tmp[674673]
    {
      unknown call_tmp[674680] "expr temp" "maybe param" "maybe type" "temp"
      (674683 'move' call_tmp[674680](159725 call(387216 call (partial) data _mt[243] this[161486]) slotNum[159694]))
      (521297 'move' ret[521292](521296 'addr of' call_tmp[674680]))
      gotoReturn _end_dsiAccess[521290] _end_dsiAccess[521290]
      (482455 'end of statement' slotNum[159694])
    }
    {
      (159733 call halt "array index out of bounds: " idx[159683])
      (482457 'end of statement')
      unknown call_tmp[674687] "expr temp" "maybe param" "maybe type" "temp"
      (674690 'move' call_tmp[674687](159739 call(387223 call (partial) data _mt[243] this[161486]) 0))
      (521302 'move' ret[521292](521301 'addr of' call_tmp[674687]))
      gotoReturn _end_dsiAccess[521290] _end_dsiAccess[521290]
    }
    label _end_dsiAccess[521290]
    (521294 return ret[521292])
  }
  where {
    unknown call_tmp[674694] "expr temp" "maybe param" "maybe type" "temp"
    (674697 'move' call_tmp[674694](387209 call eltType _mt[243] this[161486]))
    (159691 call shouldReturnRvalueByConstRef call_tmp[674694])
  }
  function DefaultAssociativeArr[161464](?).dsiLocalAccess[159753](arg _mt[161492]:_MT[238], arg this[161490]:DefaultAssociativeArr[161464](?), arg i[159751]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521308] "RVV" "temp"
    unknown call_tmp[674701] "expr temp" "maybe param" "maybe type" "temp"
    (674704 'move' call_tmp[674701](159758 call(387227 call (partial) dsiAccess _mt[243] this[161490]) i[159751]))
    (521313 'move' ret[521308](521312 'addr of' call_tmp[674701]))
    (521310 return ret[521308])
  }
  function DefaultAssociativeArr[161464](?).dsiLocalAccess[159768](arg _mt[161496]:_MT[238], arg this[161494]:DefaultAssociativeArr[161464](?), arg i[159766]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521317] "RVV" "temp"
    unknown call_tmp[674708] "expr temp" "maybe param" "maybe type" "temp"
    (674711 'move' call_tmp[674708](159777 call(387237 call (partial) dsiAccess _mt[243] this[161494]) i[159766]))
    (521322 'move' ret[521317](521321 'deref' call_tmp[674708]))
    (521319 return ret[521317])
  }
  where {
    unknown call_tmp[674715] "expr temp" "maybe param" "maybe type" "temp"
    (674718 'move' call_tmp[674715](387233 call eltType _mt[243] this[161494]))
    (159773 call shouldReturnRvalueByValue call_tmp[674715])
  }
  function DefaultAssociativeArr[161464](?).dsiLocalAccess[159788](arg _mt[161500]:_MT[238], arg this[161498]:DefaultAssociativeArr[161464](?), arg i[159786]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521326] "RVV" "temp"
    unknown call_tmp[674722] "expr temp" "maybe param" "maybe type" "temp"
    (674725 'move' call_tmp[674722](159797 call(387247 call (partial) dsiAccess _mt[243] this[161498]) i[159786]))
    (521331 'move' ret[521326](521330 'addr of' call_tmp[674722]))
    (521328 return ret[521326])
  }
  where {
    unknown call_tmp[674729] "expr temp" "maybe param" "maybe type" "temp"
    (674732 'move' call_tmp[674729](387243 call eltType _mt[243] this[161498]))
    (159793 call shouldReturnRvalueByConstRef call_tmp[674729])
  }
  function DefaultAssociativeArr[161464](?).these[159806](arg _mt[161504]:_MT[238], arg this[161502]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521335] "RVV" "temp"
    {
      unknown _indexOfInterest[159837] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159838] "expr temp" "temp"
      unknown call_tmp[674736] "expr temp" "maybe param" "maybe type" "temp"
      (674739 'move' call_tmp[674736](361171 call dom _mt[243] this[161502]))
      unknown call_tmp[674743] "expr temp" "maybe param" "maybe type" "temp"
      (674746 'move' call_tmp[674743](159810 call table _mt[243] call_tmp[674736]))
      unknown call_tmp[674750] "expr temp" "maybe param" "maybe type" "temp"
      (674753 'move' call_tmp[674750](159817 call(159813 call (partial) allSlots _mt[243] call_tmp[674743])))
      (159847 'move' _iterator[159838](159845 call _getIterator call_tmp[674750]))
      Defer
      {
        {
          (159864 call _freeIterator _iterator[159838])
        }
      }
      { scopeless type
        (159853 'move' _indexOfInterest[159837](159850 call iteratorIndex _iterator[159838]))
      }
      ForLoop[159839]
      {
        unknown slot[159857] "index var" "insert auto destroy"
        (482463 'end of statement')
        (159859 'move' slot[159857] _indexOfInterest[159837])
        (482464 'end of statement' slot[159857])
        {
          unknown call_tmp[674757] "expr temp" "maybe param" "maybe type" "temp"
          (674760 'move' call_tmp[674757](361176 call dom _mt[243] this[161502]))
          unknown call_tmp[674764] "expr temp" "maybe param" "maybe type" "temp"
          (674767 'move' call_tmp[674764](159824 call(159819 call (partial) _isSlotFull _mt[243] call_tmp[674757]) slot[159857]))
          unknown call_tmp[674769] "expr temp" "maybe param" "maybe type" "temp"
          (674772 'move' call_tmp[674769](159832 call _cond_test call_tmp[674764]))
          if call_tmp[674769]
          {
            unknown yret[521339] "YVV" "temp"
            unknown call_tmp[674776] "expr temp" "maybe param" "maybe type" "temp"
            (674779 'move' call_tmp[674776](159828 call(387254 call (partial) data _mt[243] this[161502]) slot[159857]))
            (521342 'move' yret[521339](521341 'addr of' call_tmp[674776]))
            (521344 yield yret[521339])
            (482466 'end of statement' slot[159857])
          }
        }
        label _continueLabel[159842]
        _indexOfInterest[159837]
        _iterator[159838]
      }
      label _breakLabel[159843]
    }
    (521337 return ret[521335])
  }
  function DefaultAssociativeArr[161464](?).these[159880](arg _mt[161508]:_MT[238], arg this[161506]:DefaultAssociativeArr[161464](?), param arg tag[159877]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521348] "RVV" "temp"
    unknown call_tmp[674781] "expr temp" "maybe param" "maybe type" "temp"
    (674784 'move' call_tmp[674781](159912 call _cond_test debugDefaultAssoc[156309]))
    if call_tmp[674781]
    {
      (159909 call writeln "*** In associative array standalone iterator")
    }
    {
      unknown _indexOfInterest[159948] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159949] "expr temp" "temp"
      unknown call_tmp[674788] "expr temp" "maybe param" "maybe type" "temp"
      (674791 'move' call_tmp[674788](361182 call dom _mt[243] this[161506]))
      unknown call_tmp[674795] "expr temp" "maybe param" "maybe type" "temp"
      (674798 'move' call_tmp[674795](159919 call table _mt[243] call_tmp[674788]))
      unknown call_tmp[674802] "expr temp" "maybe param" "maybe type" "temp"
      (674805 'move' call_tmp[674802](159928 call(159922 call (partial) allSlots _mt[243] call_tmp[674795])(tag = tag[159877])))
      (159958 'move' _iterator[159949](159956 call _getIterator call_tmp[674802]))
      Defer
      {
        {
          (159975 call _freeIterator _iterator[159949])
        }
      }
      { scopeless type
        (159964 'move' _indexOfInterest[159948](159961 call iteratorIndex _iterator[159949]))
      }
      ForLoop[159950]
      {
        unknown slot[159968] "index var" "insert auto destroy"
        (482470 'end of statement')
        (159970 'move' slot[159968] _indexOfInterest[159948])
        (482471 'end of statement' slot[159968])
        {
          unknown call_tmp[674809] "expr temp" "maybe param" "maybe type" "temp"
          (674812 'move' call_tmp[674809](361187 call dom _mt[243] this[161506]))
          unknown call_tmp[674816] "expr temp" "maybe param" "maybe type" "temp"
          (674819 'move' call_tmp[674816](159935 call(159930 call (partial) _isSlotFull _mt[243] call_tmp[674809]) slot[159968]))
          unknown call_tmp[674821] "expr temp" "maybe param" "maybe type" "temp"
          (674824 'move' call_tmp[674821](159943 call _cond_test call_tmp[674816]))
          if call_tmp[674821]
          {
            unknown yret[521352] "YVV" "temp"
            unknown call_tmp[674828] "expr temp" "maybe param" "maybe type" "temp"
            (674831 'move' call_tmp[674828](159939 call(387265 call (partial) data _mt[243] this[161506]) slot[159968]))
            (521355 'move' yret[521352](521354 'addr of' call_tmp[674828]))
            (521357 yield yret[521352])
            (482473 'end of statement' slot[159968])
          }
        }
        label _continueLabel[159953]
        _indexOfInterest[159948]
        _iterator[159949]
      }
      label _breakLabel[159954]
    }
    (521350 return ret[521348])
  }
  where {
    (159887 call == tag[159877] standalone[451])
  }
  function DefaultAssociativeArr[161464](?).these[159991](arg _mt[161512]:_MT[238], arg this[161510]:DefaultAssociativeArr[161464](?), param arg tag[159988]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521361] "RVV" "temp"
    {
      unknown _indexOfInterest[160011] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160012] "expr temp" "temp"
      unknown call_tmp[674835] "expr temp" "maybe param" "maybe type" "temp"
      (674838 'move' call_tmp[674835](361193 call dom _mt[243] this[161510]))
      unknown call_tmp[674842] "expr temp" "maybe param" "maybe type" "temp"
      (674845 'move' call_tmp[674842](160007 call(160002 call (partial) these _mt[243] call_tmp[674835]) tag[159988]))
      (160021 'move' _iterator[160012](160019 call _getIterator call_tmp[674842]))
      Defer
      {
        {
          (160038 call _freeIterator _iterator[160012])
        }
      }
      { scopeless type
        (160027 'move' _indexOfInterest[160011](160024 call iteratorIndex _iterator[160012]))
      }
      ForLoop[160013]
      {
        unknown followThis[160031] "index var" "insert auto destroy"
        (482476 'end of statement')
        (160033 'move' followThis[160031] _indexOfInterest[160011])
        (482477 'end of statement' followThis[160031])
        unknown yret[521365] "YVV" "temp"
        (521368 'move' yret[521365](521367 'deref' followThis[160031]))
        (521370 yield yret[521365])
        (482479 'end of statement' followThis[160031])
        label _continueLabel[160016]
        _indexOfInterest[160011]
        _iterator[160012]
      }
      label _breakLabel[160017]
    }
    (521363 return ret[521361])
  }
  where {
    (159998 call == tag[159988] leader[447])
  }
  function DefaultAssociativeArr[161464](?).these[160055](arg _mt[161516]:_MT[238], arg this[161514]:DefaultAssociativeArr[161464](?), param arg tag[160052]:iterKind[453], arg followThis[160057]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521374] "RVV" "temp"
    unknown tmp[160072] "dead at end of block" "insert auto destroy" "temp"
    (544220 'init var' tmp[160072] followThis[160057])
    (160079 call _check_tuple_var_decl tmp[160072] 2)
    (482481 'end of statement')
    unknown call_tmp[674847] "maybe param" "maybe type" "temp"
    (674850 'move' call_tmp[674847](160073 call tmp[160072] 0))
    unknown chunk[160066] "dead at end of block" "insert auto destroy"
    (544222 'init var' chunk[160066] call_tmp[674847])
    unknown call_tmp[674852] "maybe param" "maybe type" "temp"
    (674855 'move' call_tmp[674852](160076 call tmp[160072] 1))
    unknown followThisDom[160068] "dead at end of block" "insert auto destroy"
    (544224 'init var' followThisDom[160068] call_tmp[674852])
    (160084 'end of statement')
    unknown call_tmp[674857] "expr temp" "maybe param" "maybe type" "temp"
    (674860 'move' call_tmp[674857](160109 call _cond_test debugDefaultAssoc[156309]))
    if call_tmp[674857]
    {
      (160107 call writeln "In array follower code: Following " chunk[160066])
      (482482 'end of statement' chunk[160066])
    }
    unknown call_tmp[674864] "expr temp" "maybe param" "maybe type" "temp"
    (674867 'move' call_tmp[674864](160116 call dom _mt[243] this[161514]))
    unknown call_tmp[674869] "maybe param" "maybe type" "temp"
    (674872 'move' call_tmp[674869](160119 call == followThisDom[160068] call_tmp[674864]))
    const sameDom[160121] "dead at end of block" "const" "insert auto destroy"
    (544226 'init var' sameDom[160121] call_tmp[674869])
    (160124 'end of statement')
    unknown call_tmp[674874] "expr temp" "maybe param" "maybe type" "temp"
    (674877 'move' call_tmp[674874](160126 call ! sameDom[160121]))
    unknown call_tmp[674879] "expr temp" "maybe param" "maybe type" "temp"
    (674882 'move' call_tmp[674879](160167 call _cond_test call_tmp[674874]))
    if call_tmp[674879]
    {
      unknown call_tmp[674886] "expr temp" "maybe param" "maybe type" "temp"
      (674889 'move' call_tmp[674886](160129 call dsiNumIndices _mt[243] followThisDom[160068]))
      unknown call_tmp[674893] "expr temp" "maybe param" "maybe type" "temp"
      (674896 'move' call_tmp[674893](160133 call dom _mt[243] this[161514]))
      unknown call_tmp[674900] "expr temp" "maybe param" "maybe type" "temp"
      (674903 'move' call_tmp[674900](160136 call dsiNumIndices _mt[243] call_tmp[674893]))
      unknown call_tmp[674905] "expr temp" "maybe param" "maybe type" "temp"
      (674908 'move' call_tmp[674905](160139 call != call_tmp[674886] call_tmp[674900]))
      unknown call_tmp[674910] "expr temp" "maybe param" "maybe type" "temp"
      (674913 'move' call_tmp[674910](160162 call _cond_test call_tmp[674905]))
      if call_tmp[674910]
      {
        (160160 call halt "zippered associative array does not match the iterated domain")
      }
    }
    unknown call_tmp[674917] "expr temp" "maybe param" "maybe type" "temp"
    (674920 'move' call_tmp[674917](160173 call table _mt[243] followThisDom[160068]))
    unknown call_tmp[674924] "maybe param" "maybe type" "temp"
    (674927 'move' call_tmp[674924](160176 call table _mt[243] call_tmp[674917]))
    const otherTable[160179] "dead at end of block" "const" "insert auto destroy"
    (544228 'init var' otherTable[160179] call_tmp[674924])
    (160182 'end of statement' followThisDom[160068] followThisDom[160068])
    {
      unknown _indexOfInterest[160273] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160274] "expr temp" "temp"
      (160283 'move' _iterator[160274](160281 call _getIterator chunk[160066]))
      Defer
      {
        {
          (160299 call _freeIterator _iterator[160274])
        }
      }
      { scopeless type
        (160288 'move' _indexOfInterest[160273](160285 call iteratorIndex _iterator[160274]))
      }
      ForLoop[160275]
      {
        unknown slot[160292] "index var" "insert auto destroy"
        (482488 'end of statement')
        (160294 'move' slot[160292] _indexOfInterest[160273])
        (482489 'end of statement' slot[160292])
        {
          const aSlot[160189] "dead at end of block" "const" "ref var"
          unknown call_tmp[674929] "expr temp" "maybe param" "maybe type" "temp"
          (674932 'move' call_tmp[674929](160188 call otherTable[160179] slot[160292]))
          (544231 'move' aSlot[160189](544230 'addr of' call_tmp[674929]))
          (160192 'end of statement' otherTable[160179] slot[160292])
          unknown call_tmp[674936] "expr temp" "maybe param" "maybe type" "temp"
          (674939 'move' call_tmp[674936](160199 call(160195 call (partial) isFull _mt[243] aSlot[160189])))
          unknown call_tmp[674941] "expr temp" "maybe param" "maybe type" "temp"
          (674944 'move' call_tmp[674941](160269 call _cond_test call_tmp[674936]))
          if call_tmp[674941]
          {
            unknown idx[160201] "dead at end of block" "insert auto destroy"
            (544233 'init var' idx[160201] slot[160292])
            (160204 'end of statement' slot[160292])
            unknown call_tmp[674946] "expr temp" "maybe param" "maybe type" "temp"
            (674949 'move' call_tmp[674946](160207 call ! sameDom[160121]))
            unknown call_tmp[674951] "expr temp" "maybe param" "maybe type" "temp"
            (674954 'move' call_tmp[674951](160259 call _cond_test call_tmp[674946]))
            if call_tmp[674951]
            {
              unknown call_tmp[674958] "expr temp" "maybe param" "maybe type" "temp"
              (674961 'move' call_tmp[674958](361204 call dom _mt[243] this[161514]))
              unknown call_tmp[674965] "expr temp" "maybe param" "maybe type" "temp"
              (674968 'move' call_tmp[674965](160215 call table _mt[243] call_tmp[674958]))
              unknown call_tmp[674974] "expr temp" "maybe param" "maybe type" "temp"
              (674977 'move' call_tmp[674974](160222 call key _mt[243] aSlot[160189]))
              unknown call_tmp[674979] "maybe param" "maybe type" "temp"
              (674982 'move' call_tmp[674979](160226 call(160218 call (partial) findFullSlot _mt[243] call_tmp[674965]) call_tmp[674974]))
              const tmp[160227] "dead at end of block" "const" "insert auto destroy" "temp"
              (544235 'init var' tmp[160227] call_tmp[674979])
              (160234 call _check_tuple_var_decl tmp[160227] 2)
              (482494 'end of statement')
              unknown call_tmp[674984] "maybe param" "maybe type" "temp"
              (674987 'move' call_tmp[674984](160228 call tmp[160227] 0))
              const match[160209] "dead at end of block" "const" "insert auto destroy"
              (544237 'init var' match[160209] call_tmp[674984])
              unknown call_tmp[674989] "maybe param" "maybe type" "temp"
              (674992 'move' call_tmp[674989](160231 call tmp[160227] 1))
              const loc[160211] "dead at end of block" "const" "insert auto destroy"
              (544239 'init var' loc[160211] call_tmp[674989])
              (160239 'end of statement')
              unknown call_tmp[674994] "expr temp" "maybe param" "maybe type" "temp"
              (674997 'move' call_tmp[674994](160242 call ! match[160209]))
              unknown call_tmp[674999] "expr temp" "maybe param" "maybe type" "temp"
              (675002 'move' call_tmp[674999](160249 call _cond_test call_tmp[674994]))
              if call_tmp[674999]
              {
                (160247 call halt "zippered associative array does not match the iterated domain")
              }
              (160256 call = idx[160201] loc[160211])
              (482496 'end of statement' idx[160201] loc[160211])
            }
            unknown yret[521378] "YVV" "temp"
            unknown call_tmp[675006] "expr temp" "maybe param" "maybe type" "temp"
            (675009 'move' call_tmp[675006](160266 call(387290 call (partial) data _mt[243] this[161514]) idx[160201]))
            (521381 'move' yret[521378](521380 'addr of' call_tmp[675006]))
            (521383 yield yret[521378])
            (482499 'end of statement' idx[160201])
          }
        }
        label _continueLabel[160278]
        _indexOfInterest[160273]
        _iterator[160274]
      }
      label _breakLabel[160279]
    }
    (521376 return ret[521374])
  }
  where {
    (160064 call == tag[160052] follower[449])
  }
  function DefaultAssociativeArr[161464](?).dsiSerialReadWrite[160313](arg _mt[161520]:_MT[238], arg this[161518]:DefaultAssociativeArr[161464](?), arg f[160311]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675013] "maybe param" "maybe type" "temp"
    (675016 'move' call_tmp[675013](160320 call(160316 call (partial) binary _mt[243] f[160311])))
    unknown binary[160321] "dead at end of block" "insert auto destroy"
    (544241 'init var' binary[160321] call_tmp[675013])
    (160324 'end of statement')
    unknown call_tmp[675020] "maybe param" "maybe type" "temp"
    (675023 'move' call_tmp[675020](160332 call(160327 call (partial) styleElement _mt[243] f[160311]) QIO_STYLE_ELEMENT_ARRAY[19665]))
    unknown arrayStyle[160333] "dead at end of block" "insert auto destroy"
    (544243 'init var' arrayStyle[160333] call_tmp[675020])
    (160336 'end of statement')
    unknown tmp[428024] "maybe param" "temp"
    (428035 'move' tmp[428024](160339 call == arrayStyle[160333] QIO_ARRAY_FORMAT_SPACE[19695]))
    unknown call_tmp[675025] "expr temp" "maybe param" "maybe type" "temp"
    (675028 'move' call_tmp[675025](428037 call _cond_invalid tmp[428024]))
    if call_tmp[675025]
    {
      (428040 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isspace[160346] "dead at end of block" "insert auto destroy"
    unknown tmp[569974] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569975] "maybe param" "temp"
    unknown call_tmp[675030] "expr temp" "maybe param" "maybe type" "temp"
    (675033 'move' call_tmp[675030](428025 call isTrue tmp[428024]))
    (569980 'move' tmp[569975](569978 call _cond_test call_tmp[675030]))
    if tmp[569975]
    {
      unknown tmp[569982] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[675035] "expr temp" "maybe param" "maybe type" "temp"
      (675038 'move' call_tmp[675035](160342 call ! binary[160321]))
      (569984 'move' tmp[569982](428028 call isTrue call_tmp[675035]))
      (569989 'move' tmp[569974](569986 '_paramFoldLogical' tmp[569975] tmp[569982]))
    }
    {
      (569994 'move' tmp[569974](569991 '_paramFoldLogical' tmp[569975] 0))
    }
    (544245 'init var' isspace[160346] tmp[569974])
    (160349 'end of statement')
    unknown tmp[428045] "maybe param" "temp"
    (428056 'move' tmp[428045](160352 call == arrayStyle[160333] QIO_ARRAY_FORMAT_JSON[19705]))
    unknown call_tmp[675040] "expr temp" "maybe param" "maybe type" "temp"
    (675043 'move' call_tmp[675040](428058 call _cond_invalid tmp[428045]))
    if call_tmp[675040]
    {
      (428061 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isjson[160359] "dead at end of block" "insert auto destroy"
    unknown tmp[570001] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570002] "maybe param" "temp"
    unknown call_tmp[675045] "expr temp" "maybe param" "maybe type" "temp"
    (675048 'move' call_tmp[675045](428046 call isTrue tmp[428045]))
    (570007 'move' tmp[570002](570005 call _cond_test call_tmp[675045]))
    if tmp[570002]
    {
      unknown tmp[570009] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[675050] "expr temp" "maybe param" "maybe type" "temp"
      (675053 'move' call_tmp[675050](160355 call ! binary[160321]))
      (570011 'move' tmp[570009](428049 call isTrue call_tmp[675050]))
      (570016 'move' tmp[570001](570013 '_paramFoldLogical' tmp[570002] tmp[570009]))
    }
    {
      (570021 'move' tmp[570001](570018 '_paramFoldLogical' tmp[570002] 0))
    }
    (544247 'init var' isjson[160359] tmp[570001])
    (160362 'end of statement')
    unknown tmp[428066] "maybe param" "temp"
    (428077 'move' tmp[428066](160365 call == arrayStyle[160333] QIO_ARRAY_FORMAT_CHPL[19700]))
    unknown call_tmp[675055] "expr temp" "maybe param" "maybe type" "temp"
    (675058 'move' call_tmp[675055](428079 call _cond_invalid tmp[428066]))
    if call_tmp[675055]
    {
      (428082 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown ischpl[160372] "dead at end of block" "insert auto destroy"
    unknown tmp[570028] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570029] "maybe param" "temp"
    unknown call_tmp[675060] "expr temp" "maybe param" "maybe type" "temp"
    (675063 'move' call_tmp[675060](428067 call isTrue tmp[428066]))
    (570034 'move' tmp[570029](570032 call _cond_test call_tmp[675060]))
    if tmp[570029]
    {
      unknown tmp[570036] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[675065] "expr temp" "maybe param" "maybe type" "temp"
      (675068 'move' call_tmp[675065](160368 call ! binary[160321]))
      (570038 'move' tmp[570036](428070 call isTrue call_tmp[675065]))
      (570043 'move' tmp[570028](570040 '_paramFoldLogical' tmp[570029] tmp[570036]))
    }
    {
      (570048 'move' tmp[570028](570045 '_paramFoldLogical' tmp[570029] 0))
    }
    (544249 'init var' ischpl[160372] tmp[570028])
    (160375 'end of statement')
    unknown tmp[428087] "maybe param" "temp"
    unknown call_tmp[675072] "expr temp" "maybe param" "maybe type" "temp"
    (675075 'move' call_tmp[675072](160377 call writing _mt[243] f[160311]))
    (428098 'move' tmp[428087](160380 call ! call_tmp[675072]))
    unknown call_tmp[675077] "expr temp" "maybe param" "maybe type" "temp"
    (675080 'move' call_tmp[675077](428100 call _cond_invalid tmp[428087]))
    if call_tmp[675077]
    {
      (428103 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570055] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570056] "maybe param" "temp"
    unknown call_tmp[675082] "expr temp" "maybe param" "maybe type" "temp"
    (675085 'move' call_tmp[675082](428088 call isTrue tmp[428087]))
    (570061 'move' tmp[570056](570059 call _cond_test call_tmp[675082]))
    if tmp[570056]
    {
      unknown tmp[570063] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (570065 'move' tmp[570063](428091 call isTrue ischpl[160372]))
      (570070 'move' tmp[570055](570067 '_paramFoldLogical' tmp[570056] tmp[570063]))
    }
    {
      (570075 'move' tmp[570055](570072 '_paramFoldLogical' tmp[570056] 0))
    }
    unknown call_tmp[675087] "expr temp" "maybe param" "maybe type" "temp"
    (675090 'move' call_tmp[675087](160398 call _cond_test tmp[570055]))
    if call_tmp[675087]
    {
      (160393 call(160388 call (partial) readChapelStyleAssocArray _mt[243] this[161518]) f[160311])
      (482508 'end of statement')
      gotoReturn _end_dsiSerialReadWrite[521385] _end_dsiSerialReadWrite[521385]
    }
    unknown tmp[428108] "maybe param" "temp"
    (428119 'move' tmp[428108] isjson[160359])
    unknown call_tmp[675094] "expr temp" "maybe param" "maybe type" "temp"
    (675097 'move' call_tmp[675094](428121 call _cond_invalid tmp[428108]))
    if call_tmp[675094]
    {
      (428124 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[570082] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570083] "maybe param" "temp"
    unknown call_tmp[675099] "expr temp" "maybe param" "maybe type" "temp"
    (675102 'move' call_tmp[675099](428109 call isTrue tmp[428108]))
    (570088 'move' tmp[570083](570086 call _cond_test call_tmp[675099]))
    if tmp[570083]
    {
      (570093 'move' tmp[570082](570090 '_paramFoldLogical' tmp[570083] 1))
    }
    {
      unknown tmp[570095] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (570097 'move' tmp[570095](428113 call isTrue ischpl[160372]))
      (570102 'move' tmp[570082](570099 '_paramFoldLogical' tmp[570083] tmp[570095]))
    }
    unknown call_tmp[675104] "expr temp" "maybe param" "maybe type" "temp"
    (675107 'move' call_tmp[675104](160415 call _cond_test tmp[570082]))
    if call_tmp[675104]
    {
      unknown call_tmp[675109] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (675112 'move' call_tmp[675109](748146 'new' ioLiteral[238841] "["))
      (160412 call <~> f[160311] call_tmp[675109])
    }
    unknown first[160421] "dead at end of block" "insert auto destroy"
    (544251 'init var' first[160421] 1)
    (160424 'end of statement' binary[160321] binary[160321] binary[160321])
    {
      unknown _indexOfInterest[160531] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160532] "expr temp" "temp"
      unknown call_tmp[675116] "expr temp" "maybe param" "maybe type" "temp"
      (675119 'move' call_tmp[675116](160541 call dom _mt[243] this[161518]))
      unknown call_tmp[675121] "expr temp" "maybe param" "maybe type" "temp"
      (675124 'move' call_tmp[675121](160544 call _getIterator call_tmp[675116]))
      unknown call_tmp[675126] "expr temp" "maybe param" "maybe type" "temp"
      (675129 'move' call_tmp[675126](160548 call _getIterator this[161518]))
      (160550 'move' _iterator[160532](160436 call _build_tuple call_tmp[675121] call_tmp[675126]))
      Defer
      {
        {
          (160580 call _freeIterator _iterator[160532])
        }
      }
      { scopeless type
        (160555 'move' _indexOfInterest[160531](160552 call iteratorIndex _iterator[160532]))
      }
      ForLoop[160533]
      {
        (160560 call _check_tuple_var_decl _indexOfInterest[160531] 2)
        (482513 'end of statement')
        unknown key[160566] "index var" "insert auto destroy"
        (482514 'end of statement')
        (160568 'move' key[160566](160564 call _indexOfInterest[160531] 0))
        (482515 'end of statement' key[160566])
        unknown val[160573] "index var" "insert auto destroy"
        (482517 'end of statement')
        (160575 'move' val[160573](160571 call _indexOfInterest[160531] 1))
        (482518 'end of statement' val[160573])
        {
          unknown call_tmp[675131] "expr temp" "maybe param" "maybe type" "temp"
          (675134 'move' call_tmp[675131](160477 call _cond_test first[160421]))
          if call_tmp[675131]
          {
            (160440 call = first[160421] 0)
            (482520 'end of statement' first[160421])
          }
          {
            unknown call_tmp[675136] "expr temp" "maybe param" "maybe type" "temp"
            (675139 'move' call_tmp[675136](160471 call _cond_test isspace[160346]))
            if call_tmp[675136]
            {
              unknown call_tmp[675141] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
              (675144 'move' call_tmp[675141](748147 'new' ioLiteral[238841] " "))
              (160450 call <~> f[160311] call_tmp[675141])
            }
            {
              unknown tmp[428129] "maybe param" "temp"
              (428140 'move' tmp[428129] isjson[160359])
              unknown call_tmp[675146] "expr temp" "maybe param" "maybe type" "temp"
              (675149 'move' call_tmp[675146](428142 call _cond_invalid tmp[428129]))
              if call_tmp[675146]
              {
                (428145 call compilerError "cannot promote short-circuiting || operator")
              }
              unknown tmp[570109] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[570110] "maybe param" "temp"
              unknown call_tmp[675151] "expr temp" "maybe param" "maybe type" "temp"
              (675154 'move' call_tmp[675151](428130 call isTrue tmp[428129]))
              (570115 'move' tmp[570110](570113 call _cond_test call_tmp[675151]))
              if tmp[570110]
              {
                (570120 'move' tmp[570109](570117 '_paramFoldLogical' tmp[570110] 1))
              }
              {
                unknown tmp[570122] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                (570124 'move' tmp[570122](428134 call isTrue ischpl[160372]))
                (570129 'move' tmp[570109](570126 '_paramFoldLogical' tmp[570110] tmp[570122]))
              }
              unknown call_tmp[675156] "expr temp" "maybe param" "maybe type" "temp"
              (675159 'move' call_tmp[675156](160466 call _cond_test tmp[570109]))
              if call_tmp[675156]
              {
                unknown call_tmp[675161] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675164 'move' call_tmp[675161](748148 'new' ioLiteral[238841] ", "))
                (160463 call <~> f[160311] call_tmp[675161])
              }
            }
          }
          unknown tmp[428150] "maybe param" "temp"
          (428161 'move' tmp[428150](160485 call writing _mt[243] f[160311]))
          unknown call_tmp[675168] "expr temp" "maybe param" "maybe type" "temp"
          (675171 'move' call_tmp[675168](428163 call _cond_invalid tmp[428150]))
          if call_tmp[675168]
          {
            (428166 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[570136] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570137] "maybe param" "temp"
          unknown call_tmp[675173] "expr temp" "maybe param" "maybe type" "temp"
          (675176 'move' call_tmp[675173](428151 call isTrue tmp[428150]))
          (570142 'move' tmp[570137](570140 call _cond_test call_tmp[675173]))
          if tmp[570137]
          {
            unknown tmp[570144] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (570146 'move' tmp[570144](428154 call isTrue ischpl[160372]))
            (570151 'move' tmp[570136](570148 '_paramFoldLogical' tmp[570137] tmp[570144]))
          }
          {
            (570156 'move' tmp[570136](570153 '_paramFoldLogical' tmp[570137] 0))
          }
          unknown call_tmp[675178] "expr temp" "maybe param" "maybe type" "temp"
          (675181 'move' call_tmp[675178](160522 call _cond_test tmp[570136]))
          if call_tmp[675178]
          {
            (160493 call <~> f[160311] key[160566])
            (482526 'end of statement' key[160566])
            unknown call_tmp[675183] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
            (675186 'move' call_tmp[675183](748149 'new' ioLiteral[238841] " => "))
            (160519 call <~> f[160311] call_tmp[675183])
          }
          (160528 call <~> f[160311] val[160573])
          (482529 'end of statement' val[160573])
        }
        label _continueLabel[160536]
        _indexOfInterest[160531]
        _iterator[160532]
      }
      label _breakLabel[160537]
    }
    unknown tmp[428171] "maybe param" "temp"
    (428182 'move' tmp[428171] isjson[160359])
    unknown call_tmp[675188] "expr temp" "maybe param" "maybe type" "temp"
    (675191 'move' call_tmp[675188](428184 call _cond_invalid tmp[428171]))
    if call_tmp[675188]
    {
      (428187 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[570163] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570164] "maybe param" "temp"
    unknown call_tmp[675193] "expr temp" "maybe param" "maybe type" "temp"
    (675196 'move' call_tmp[675193](428172 call isTrue tmp[428171]))
    (570169 'move' tmp[570164](570167 call _cond_test call_tmp[675193]))
    if tmp[570164]
    {
      (570174 'move' tmp[570163](570171 '_paramFoldLogical' tmp[570164] 1))
    }
    {
      unknown tmp[570176] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (570178 'move' tmp[570176](428176 call isTrue ischpl[160372]))
      (570183 'move' tmp[570163](570180 '_paramFoldLogical' tmp[570164] tmp[570176]))
    }
    unknown call_tmp[675198] "expr temp" "maybe param" "maybe type" "temp"
    (675201 'move' call_tmp[675198](160600 call _cond_test tmp[570163]))
    if call_tmp[675198]
    {
      unknown call_tmp[675203] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (675206 'move' call_tmp[675203](748150 'new' ioLiteral[238841] "]"))
      (160597 call <~> f[160311] call_tmp[675203])
    }
    label _end_dsiSerialReadWrite[521385]
    (521387 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).readChapelStyleAssocArray[160611](arg _mt[161524]:_MT[238], arg this[161522]:DefaultAssociativeArr[161464](?), arg f[160609]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675208] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675211 'move' call_tmp[675208](748151 'new' ioLiteral[238841] "["))
    const openBracket[160618] "dead at end of block" "const" "insert auto destroy"
    (544253 'init var' openBracket[160618] call_tmp[675208])
    (160621 'end of statement')
    unknown call_tmp[675213] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675216 'move' call_tmp[675213](748152 'new' ioLiteral[238841] "]"))
    const closedBracket[160628] "dead at end of block" "const" "insert auto destroy"
    (544255 'init var' closedBracket[160628] call_tmp[675213])
    (160631 'end of statement')
    unknown first[160633] "dead at end of block" "insert auto destroy"
    (544257 'init var' first[160633] 1)
    (160636 'end of statement')
    unknown readEnd[160638] "dead at end of block" "insert auto destroy"
    (544259 'init var' readEnd[160638] 0)
    (160641 'end of statement')
    (160644 call <~> f[160609] openBracket[160618])
    (482533 'end of statement' openBracket[160618])
    {
      unknown tmp[160747] "temp"
      (160765 'move' tmp[160747](160763 call _cond_test 1))
      WhileDo[160752]
      {
        {
          unknown call_tmp[675218] "expr temp" "maybe param" "maybe type" "temp"
          (675221 'move' call_tmp[675218](160699 call _cond_test first[160633]))
          if call_tmp[675218]
          {
            (160651 call = first[160633] 0)
            (482535 'end of statement' first[160633])
            Try
            {
              {
                (160657 call <~> f[160609] closedBracket[160628])
                (482537 'end of statement' closedBracket[160628])
                (160663 call = readEnd[160638] 1)
                (482539 'end of statement' readEnd[160638])
                break _breakLabel[160751] _breakLabel[160751]
              }
            }
            Catch err : BadFormatError
            {
              unknown call_tmp[675223] "expr temp" "maybe param" "maybe type" "temp"
              (675226 'move' call_tmp[675223](354589 'current error'))
              unknown call_tmp[675228] "maybe param" "maybe type" "temp"
              (675231 'move' call_tmp[675228](354590 'dynamic_cast' unmanaged BadFormatError?[415722] call_tmp[675223]))
              unknown tmp[354586] "dead at end of block" "insert auto destroy" "temp"
              (544261 'init var' tmp[354586] call_tmp[675228])
              unknown call_tmp[675233] "expr temp" "maybe param" "maybe type" "temp"
              (675236 'move' call_tmp[675233](354593 '!=' tmp[354586] nil[44]))
              if call_tmp[675233]
              {
                unknown call_tmp[675238] "expr temp" "maybe param" "maybe type" "temp"
                (675241 'move' call_tmp[675238](354600 'to non nilable class' tmp[354586]))
                unknown call_tmp[675243] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675246 'move' call_tmp[675243](748153 'new' _owned[30](?) call_tmp[675238]))
                unknown err[354599] "dead at end of block" "insert auto destroy"
                (544263 'init var' err[354599] call_tmp[675243])
                (482541 'end of statement')
                {
                }
              }
              {
              }
            }
          }
          {
            Try
            {
              {
                unknown call_tmp[675248] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675251 'move' call_tmp[675248](748154 'new' ioLiteral[238841] ","))
                (160683 call <~> f[160609] call_tmp[675248])
              }
            }
            Catch err : BadFormatError
            {
              unknown call_tmp[675253] "expr temp" "maybe param" "maybe type" "temp"
              (675256 'move' call_tmp[675253](354610 'current error'))
              unknown call_tmp[675258] "maybe param" "maybe type" "temp"
              (675261 'move' call_tmp[675258](354611 'dynamic_cast' unmanaged BadFormatError?[415722] call_tmp[675253]))
              unknown tmp[354607] "dead at end of block" "insert auto destroy" "temp"
              (544265 'init var' tmp[354607] call_tmp[675258])
              unknown call_tmp[675263] "expr temp" "maybe param" "maybe type" "temp"
              (675266 'move' call_tmp[675263](354614 '!=' tmp[354607] nil[44]))
              if call_tmp[675263]
              {
                unknown call_tmp[675268] "expr temp" "maybe param" "maybe type" "temp"
                (675271 'move' call_tmp[675268](354621 'to non nilable class' tmp[354607]))
                unknown call_tmp[675273] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675276 'move' call_tmp[675273](748155 'new' _owned[30](?) call_tmp[675268]))
                unknown err[354620] "dead at end of block" "insert auto destroy"
                (544267 'init var' err[354620] call_tmp[675273])
                (482543 'end of statement')
                {
                  break _breakLabel[160751] _breakLabel[160751]
                }
              }
              {
              }
            }
          }
          unknown key[160705] "dead at end of block" "insert auto destroy"
          unknown call_tmp[675280] "expr temp" "maybe param" "maybe type" "temp"
          (675283 'move' call_tmp[675280](387346 call idxType _mt[243] this[161522]))
          (544269 'default init var' key[160705] call_tmp[675280])
          (160708 'end of statement')
          (160711 call <~> f[160609] key[160705])
          (482544 'end of statement' key[160705])
          unknown call_tmp[675285] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (675288 'move' call_tmp[675285](748156 'new' ioLiteral[238841] "=>"))
          (160736 call <~> f[160609] call_tmp[675285])
          (482546 'end of statement')
          unknown call_tmp[675292] "expr temp" "maybe param" "maybe type" "temp"
          (675295 'move' call_tmp[675292](160743 call(387355 call (partial) dsiAccess _mt[243] this[161522]) key[160705]))
          (160744 call <~> f[160609] call_tmp[675292])
          (482547 'end of statement' key[160705])
        }
        label _continueLabel[160750]
        (160758 'move' tmp[160747](160756 call _cond_test 1))
        tmp[160747]
      }
      label _breakLabel[160751]
    }
    unknown call_tmp[675297] "expr temp" "maybe param" "maybe type" "temp"
    (675300 'move' call_tmp[675297](160769 call ! readEnd[160638]))
    unknown call_tmp[675302] "expr temp" "maybe param" "maybe type" "temp"
    (675305 'move' call_tmp[675302](160776 call _cond_test call_tmp[675297]))
    if call_tmp[675302]
    {
      (160773 call <~> f[160609] closedBracket[160628])
      (482549 'end of statement' closedBracket[160628])
    }
    (521391 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiSerialWrite[160787](arg _mt[161528]:_MT[238], arg this[161526]:DefaultAssociativeArr[161464](?), arg f[160785]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160795 call(160790 call (partial) dsiSerialReadWrite _mt[243] this[161526]) f[160785])
    (521393 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiSerialRead[160804](arg _mt[161532]:_MT[238], arg this[161530]:DefaultAssociativeArr[161464](?), arg f[160802]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160812 call(160807 call (partial) dsiSerialReadWrite _mt[243] this[161530]) f[160802])
    (521395 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiSorted[160821](arg _mt[161536]:_MT[238], arg this[161534]:DefaultAssociativeArr[161464](?), arg comparator[160819]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521399] "RVV" "temp"
    unknown tableCopy[160859] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter9[583219](arg iterator[583221]:_any[178](?), arg this[583257]:DefaultAssociativeArr[161464](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[583268] "RVV" "temp"
      {
        unknown _indexOfInterest[583226] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[583227] "expr temp" "temp"
        (583236 'move' _iterator[583227](583234 call _getIterator iterator[583221]))
        Defer
        {
          {
            (583250 call _freeIterator _iterator[583227])
          }
        }
        { scopeless type
          (583241 'move' _indexOfInterest[583226](583238 call iteratorIndex _iterator[583227]))
        }
        ForLoop[583228] for-expr
        {
          unknown slot[160857] "index var" "insert auto destroy" "no doc"
          (583261 'end of statement')
          (583245 'move' slot[160857] _indexOfInterest[583226])
          (583262 'end of statement' slot[160857])
          {
            {
              unknown yret[583272] "YVV" "temp"
              unknown call_tmp[583281] "expr temp" "maybe param" "maybe type" "temp"
              (583284 'move' call_tmp[583281](160854 call(387372 call (partial) data _mt[243] this[583257]) slot[160857]))
              (583275 'move' yret[583272](583274 'deref' call_tmp[583281]))
              (583277 yield yret[583272])
              (583264 'end of statement' slot[160857])
            }
          }
          label _continueLabel[583231]
          _indexOfInterest[583226]
          _iterator[583227]
        }
        label _breakLabel[583232]
      }
      (583270 return ret[583268])
    }
    function chpl__forexpr9[583199](arg iterExpr[583202]:_any[178](?), arg this[583206]:DefaultAssociativeArr[161464](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[583289] "RVV" "temp"
      unknown _iterator[583209] "expr temp" "maybe ref" "temp"
      (583211 'move' _iterator[583209] iterExpr[583202])
      unknown call_tmp[583296] "expr temp" "maybe param" "maybe type" "temp"
      (583299 'move' call_tmp[583296](583214 call chpl__loopexpr_iter9 _iterator[583209] this[583206]))
      (583294 'move' ret[583289](583293 'deref' call_tmp[583296]))
      (583291 return ret[583289])
    }
    unknown call_tmp[583303] "expr temp" "maybe param" "maybe type" "temp"
    (583306 'move' call_tmp[583303](361223 call dom _mt[243] this[161534]))
    unknown call_tmp[583310] "expr temp" "maybe param" "maybe type" "temp"
    (583313 'move' call_tmp[583310](160850 call(160846 call (partial) _fullSlots _mt[243] call_tmp[583303])))
    unknown call_tmp[583315] "maybe param" "maybe type" "temp"
    (583318 'move' call_tmp[583315](583204 call chpl__forexpr9 call_tmp[583310] this[161534]))
    (583322 'iterator record set shape' call_tmp[583315] call_tmp[583310] 1)
    unknown call_tmp[675311] "expr temp" "maybe param" "maybe type" "temp"
    (675314 'move' call_tmp[675311](160828 call chpl_build_low_bounded_range 0))
    unknown call_tmp[675318] "expr temp" "maybe param" "maybe type" "temp"
    (675321 'move' call_tmp[675318](361218 call dom _mt[243] this[161534]))
    unknown call_tmp[675325] "expr temp" "maybe param" "maybe type" "temp"
    (675328 'move' call_tmp[675325](160831 call dsiNumIndices _mt[243] call_tmp[675318]))
    unknown call_tmp[675330] "expr temp" "maybe param" "maybe type" "temp"
    (675333 'move' call_tmp[675330](160834 call # call_tmp[675311] call_tmp[675325]))
    unknown call_tmp[675335] "expr temp" "maybe param" "maybe type" "temp"
    (675338 'move' call_tmp[675335](160838 call chpl__ensureDomainExpr call_tmp[675330]))
    unknown call_tmp[675342] "expr temp" "maybe param" "maybe type" "temp"
    (675345 'move' call_tmp[675342](387366 call eltType _mt[243] this[161534]))
    unknown call_tmp[675347] "maybe param" "maybe type" "temp"
    (675350 'move' call_tmp[675347](160840 call chpl__buildArrayRuntimeType call_tmp[675335] call_tmp[675342]))
    (544271 'init var' tableCopy[160859] call_tmp[583315] call_tmp[675347])
    (160862 'end of statement')
    (160868 call sort tableCopy[160859](comparator = comparator[160819]))
    (482553 'end of statement' tableCopy[160859])
    {
      unknown _indexOfInterest[160875] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160876] "expr temp" "temp"
      (160885 'move' _iterator[160876](160883 call _getIterator tableCopy[160859]))
      Defer
      {
        {
          (160901 call _freeIterator _iterator[160876])
        }
      }
      { scopeless type
        (160890 'move' _indexOfInterest[160875](160887 call iteratorIndex _iterator[160876]))
      }
      ForLoop[160877]
      {
        unknown elem[160894] "index var" "insert auto destroy"
        (482556 'end of statement')
        (160896 'move' elem[160894] _indexOfInterest[160875])
        (482557 'end of statement' elem[160894])
        unknown yret[521403] "YVV" "temp"
        (521406 'move' yret[521403](521405 'deref' elem[160894]))
        (521408 yield yret[521403])
        (482559 'end of statement' elem[160894])
        label _continueLabel[160880]
        _indexOfInterest[160875]
        _iterator[160876]
      }
      label _breakLabel[160881]
    }
    (521401 return ret[521399])
    (355270 'used modules list'(160824 'use' Sort[268056]))
  }
  function DefaultAssociativeArr[161464](?)._doDefaultInitSlot[160916](arg _mt[161540]:_MT[238], arg this[161538]:DefaultAssociativeArr[161464](?), arg slot[160913]:int(64)[13], arg inAdd[160919]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675354] "expr temp" "maybe param" "maybe type" "temp"
    (675357 'move' call_tmp[675354](387382 call eltType _mt[243] this[161538]))
    unknown call_tmp[675359] "expr temp" "maybe param" "maybe type" "temp"
    (675362 'move' call_tmp[675359](160925 call isDefaultInitializable call_tmp[675354]))
    unknown call_tmp[675364] "expr temp" "maybe param" "maybe type" "temp"
    (675367 'move' call_tmp[675364](160926 call ! call_tmp[675359]))
    unknown call_tmp[675369] "expr temp" "maybe param" "maybe type" "temp"
    (675372 'move' call_tmp[675369](161036 call _cond_test call_tmp[675364]))
    if call_tmp[675369]
    {
      unknown call_tmp[675374] "expr temp" "maybe param" "maybe type" "temp"
      (675377 'move' call_tmp[675374](161011 call _cond_test inAdd[160919]))
      if call_tmp[675374]
      {
        unknown call_tmp[675379] "expr temp" "maybe param" "maybe type" "temp"
        (675382 'move' call_tmp[675379](160964 call + "Can't resize domains whose arrays' elements don't " "have default values"))
        (160967 call halt call_tmp[675379])
      }
      {
        unknown call_tmp[675384] "expr temp" "maybe param" "maybe type" "temp"
        (675387 'move' call_tmp[675384](161005 call + "Can't default initialize associative arrays whose " "elements have no default value"))
        (161008 call halt call_tmp[675384])
      }
    }
    {
      unknown initval[161017] "dead at end of block" "no auto destroy"
      unknown call_tmp[675391] "expr temp" "maybe param" "maybe type" "temp"
      (675394 'move' call_tmp[675391](387388 call eltType _mt[243] this[161538]))
      (544273 'default init var' initval[161017] call_tmp[675391])
      (161020 'end of statement')
      unknown dst[161026] "dead at end of block" "ref var"
      unknown call_tmp[675398] "expr temp" "maybe param" "maybe type" "temp"
      (675401 'move' call_tmp[675398](161025 call(387393 call (partial) data _mt[243] this[161538]) slot[160913]))
      (544276 'move' dst[161026](544275 'addr of' call_tmp[675398]))
      (161029 'end of statement')
      (161034 '=' dst[161026] initval[161017])
      (482563 'end of statement' dst[161026] initval[161017])
    }
    (521410 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._defaultInitSlot[161049](arg _mt[161544]:_MT[238], arg this[161542]:DefaultAssociativeArr[161464](?), arg slot[161046]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161056 call(387400 call (partial) _doDefaultInitSlot _mt[243] this[161542]) slot[161046](inAdd = 1))
    (521412 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._deinitSlot[161067](arg _mt[161548]:_MT[238], arg this[161546]:DefaultAssociativeArr[161464](?), arg slot[161064]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675409] "expr temp" "maybe param" "maybe type" "temp"
    (675412 'move' call_tmp[675409](161073 call(387412 call (partial) data _mt[243] this[161546]) slot[161064]))
    (161075 call(387407 call (partial) _deinitElement _mt[243] this[161546]) call_tmp[675409])
    (521414 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._elementNeedsDeinit[161082](arg _mt[161552]:_MT[238], arg this[161550]:DefaultAssociativeArr[161464](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521418] "RVV" "param" "temp"
    unknown call_tmp[675416] "expr temp" "maybe param" "maybe type" "temp"
    (675419 'move' call_tmp[675416](387418 call eltType _mt[243] this[161550]))
    unknown call_tmp[675421] "expr temp" "maybe param" "maybe type" "temp"
    (675424 'move' call_tmp[675421](161087 'needs auto destroy' call_tmp[675416]))
    (521423 'move' ret[521418](521422 'deref' call_tmp[675421]))
    (521420 return ret[521418])
  }
  function DefaultAssociativeArr[161464](?)._deinitElement[161099](arg _mt[161556]:_MT[238], arg this[161554]:DefaultAssociativeArr[161464](?), ref arg elt[161096] :
  (387423 call eltType _mt[243] this[161554])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675430] "expr temp" "maybe param" "maybe type" "temp"
    (675433 'move' call_tmp[675430](161103 call(387429 call (partial) _elementNeedsDeinit _mt[243] this[161554])))
    unknown call_tmp[675435] "expr temp" "maybe param" "maybe type" "temp"
    (675438 'move' call_tmp[675435](161110 call _cond_test call_tmp[675430]))
    if call_tmp[675435]
    {
      (161107 call chpl__autoDestroy elt[161096])
    }
    (521425 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._startRehash[161123](arg _mt[161560]:_MT[238], arg this[161558]:DefaultAssociativeArr[161464](?), arg newSize[161120]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675442] "expr temp" "maybe param" "maybe type" "temp"
    (675445 'move' call_tmp[675442](387435 call tmpData _mt[243] this[161558]))
    unknown call_tmp[675449] "expr temp" "maybe param" "maybe type" "temp"
    (675452 'move' call_tmp[675449](387440 call data _mt[243] this[161558]))
    (161127 call = call_tmp[675442] call_tmp[675449])
    (482570 'end of statement')
    unknown call_tmp[675456] "expr temp" "maybe param" "maybe type" "temp"
    (675459 'move' call_tmp[675456](387445 call data _mt[243] this[161558]))
    unknown call_tmp[675463] "expr temp" "maybe param" "maybe type" "temp"
    (675466 'move' call_tmp[675463](361228 call dom _mt[243] this[161558]))
    unknown call_tmp[675470] "expr temp" "maybe param" "maybe type" "temp"
    (675473 'move' call_tmp[675470](161133 call table _mt[243] call_tmp[675463]))
    unknown call_tmp[675479] "expr temp" "maybe param" "maybe type" "temp"
    (675482 'move' call_tmp[675479](387451 call eltType _mt[243] this[161558]))
    unknown call_tmp[675484] "expr temp" "maybe param" "maybe type" "temp"
    (675487 'move' call_tmp[675484](161142 call(161136 call (partial) allocateData _mt[243] call_tmp[675470]) newSize[161120] call_tmp[675479]))
    (161143 call = call_tmp[675456] call_tmp[675484])
    (521427 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._finishRehash[161154](arg _mt[161564]:_MT[238], arg this[161562]:DefaultAssociativeArr[161464](?), arg oldSize[161151]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675491] "expr temp" "maybe param" "maybe type" "temp"
    (675494 'move' call_tmp[675491](387456 call tmpData _mt[243] this[161562]))
    (161160 call _ddata_free call_tmp[675491] oldSize[161151])
    (482572 'end of statement')
    unknown call_tmp[675498] "expr temp" "maybe param" "maybe type" "temp"
    (675501 'move' call_tmp[675498](387462 call tmpData _mt[243] this[161562]))
    (161165 call = call_tmp[675498] nil[44])
    (521429 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._moveElementDuringRehash[161176](arg _mt[161568]:_MT[238], arg this[161566]:DefaultAssociativeArr[161464](?), arg oldslot[161173]:int(64)[13], arg newslot[161179]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const src[161186] "dead at end of block" "const" "ref var"
    unknown call_tmp[675505] "expr temp" "maybe param" "maybe type" "temp"
    (675508 'move' call_tmp[675505](161185 call(387467 call (partial) tmpData _mt[243] this[161566]) oldslot[161173]))
    (544279 'move' src[161186](544278 'addr of' call_tmp[675505]))
    (161189 'end of statement')
    unknown dst[161195] "dead at end of block" "ref var"
    unknown call_tmp[675512] "expr temp" "maybe param" "maybe type" "temp"
    (675515 'move' call_tmp[675512](161194 call(387473 call (partial) data _mt[243] this[161566]) newslot[161179]))
    (544282 'move' dst[161195](544281 'addr of' call_tmp[675512]))
    (161198 'end of statement')
    (161203 '=' dst[161195] src[161186])
    (482574 'end of statement' dst[161195] src[161186])
    (521431 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiTargetLocales[161209](arg _mt[161572]:_MT[238], arg this[161570]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521435] "RVV" "temp"
    unknown call_tmp[675517] "expr temp" "maybe param" "maybe type" "temp"
    (675520 'move' call_tmp[675517](161212 '_wide_get_locale' this[161570]))
    unknown call_tmp[675522] "expr temp" "maybe param" "maybe type" "temp"
    (675525 'move' call_tmp[675522](161213 call chpl_localeID_to_locale call_tmp[675517]))
    unknown call_tmp[675527] "expr temp" "maybe param" "maybe type" "temp"
    (675530 'move' call_tmp[675527](161216 call chpl__buildArrayExpr call_tmp[675522]))
    (521440 'move' ret[521435](521439 'deref' call_tmp[675527]))
    (521437 return ret[521435])
  }
  function DefaultAssociativeArr[161464](?).dsiHasSingleLocalSubdomain[161225](arg _mt[161576]:_MT[238], arg this[161574]:DefaultAssociativeArr[161464](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521444] "RVV" "param" "temp"
    (521449 'move' ret[521444](521448 'deref' 1))
    (521446 return ret[521444])
  }
  function DefaultAssociativeArr[161464](?).dsiLocalSubdomain[161239](arg _mt[161580]:_MT[238], arg this[161578]:DefaultAssociativeArr[161464](?), arg loc[161236]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521453] "RVV" "temp"
    unknown call_tmp[675532] "expr temp" "maybe param" "maybe type" "temp"
    (675535 'move' call_tmp[675532](161242 '_wide_get_locale' this[161578]))
    unknown call_tmp[675537] "expr temp" "maybe param" "maybe type" "temp"
    (675540 'move' call_tmp[675537](161243 call chpl_localeID_to_locale call_tmp[675532]))
    unknown call_tmp[675542] "expr temp" "maybe param" "maybe type" "temp"
    (675545 'move' call_tmp[675542](161246 call == call_tmp[675537] loc[161236]))
    unknown call_tmp[675547] "expr temp" "maybe param" "maybe type" "temp"
    (675550 'move' call_tmp[675547](161276 call _cond_test call_tmp[675542]))
    if call_tmp[675547]
    {
      unknown call_tmp[675554] "expr temp" "maybe param" "maybe type" "temp"
      (675557 'move' call_tmp[675554](387484 call dom _mt[243] this[161578]))
      unknown call_tmp[675559] "expr temp" "maybe param" "maybe type" "temp"
      (675562 'move' call_tmp[675559](161251 call _getDomain call_tmp[675554]))
      (521458 'move' ret[521453](521457 'deref' call_tmp[675559]))
      gotoReturn _end_dsiLocalSubdomain[521451] _end_dsiLocalSubdomain[521451]
    }
    {
      unknown a[161268] "dead at end of block" "insert auto destroy"
      unknown call_tmp[675566] "expr temp" "maybe param" "maybe type" "temp"
      (675569 'move' call_tmp[675566](361233 call dom _mt[243] this[161578]))
      unknown call_tmp[675573] "expr temp" "maybe param" "maybe type" "temp"
      (675576 'move' call_tmp[675573](161256 call idxType _mt[243] call_tmp[675566]))
      unknown call_tmp[675580] "expr temp" "maybe param" "maybe type" "temp"
      (675583 'move' call_tmp[675580](361238 call dom _mt[243] this[161578]))
      unknown call_tmp[675587] "expr temp" "maybe param" "maybe type" "temp"
      (675590 'move' call_tmp[675587](161261 call parSafe _mt[243] call_tmp[675580]))
      unknown call_tmp[675592] "expr temp" "maybe param" "maybe type" "temp"
      (675595 'move' call_tmp[675592](161266 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[675573](parSafe = call_tmp[675587])))
      (544284 'default init var' a[161268] call_tmp[675592])
      (161271 'end of statement')
      (521463 'move' ret[521453](521462 'deref' a[161268]))
      gotoReturn _end_dsiLocalSubdomain[521451] _end_dsiLocalSubdomain[521451]
      (482580 'end of statement' a[161268])
    }
    label _end_dsiLocalSubdomain[521451]
    (521455 return ret[521453])
  }
  function DefaultAssociativeArr[161464](?).dsiElementInitializationComplete[161285](arg _mt[161584]:_MT[238], arg this[161582]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675599] "expr temp" "maybe param" "maybe type" "temp"
    (675602 'move' call_tmp[675599](161288 call eltsNeedDeinit _mt[243] this[161582]))
    (161292 call = call_tmp[675599] 1)
    (521467 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiElementDeinitializationComplete[161300](arg _mt[161588]:_MT[238], arg this[161586]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675606] "expr temp" "maybe param" "maybe type" "temp"
    (675609 'move' call_tmp[675606](161303 call eltsNeedDeinit _mt[243] this[161586]))
    (161307 call = call_tmp[675606] 0)
    (521469 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiDestroyArr[161319](arg _mt[161592]:_MT[238], arg this[161590]:DefaultAssociativeArr[161464](?), arg deinitElts[161316]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown tmp[428192] "maybe param" "temp"
    (428203 'move' tmp[428192] deinitElts[161316])
    unknown call_tmp[675611] "expr temp" "maybe param" "maybe type" "temp"
    (675614 'move' call_tmp[675611](428205 call _cond_invalid tmp[428192]))
    if call_tmp[675611]
    {
      (428208 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570190] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570191] "maybe param" "temp"
    unknown call_tmp[675616] "expr temp" "maybe param" "maybe type" "temp"
    (675619 'move' call_tmp[675616](428193 call isTrue tmp[428192]))
    (570196 'move' tmp[570191](570194 call _cond_test call_tmp[675616]))
    if tmp[570191]
    {
      unknown tmp[570198] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[675623] "expr temp" "maybe param" "maybe type" "temp"
      (675626 'move' call_tmp[675623](161323 call eltsNeedDeinit _mt[243] this[161590]))
      (570200 'move' tmp[570198](428196 call isTrue call_tmp[675623]))
      (570205 'move' tmp[570190](570202 '_paramFoldLogical' tmp[570191] tmp[570198]))
    }
    {
      (570210 'move' tmp[570190](570207 '_paramFoldLogical' tmp[570191] 0))
    }
    unknown call_tmp[675628] "expr temp" "maybe param" "maybe type" "temp"
    (675631 'move' call_tmp[675628](161448 call _cond_test tmp[570190]))
    if call_tmp[675628]
    {
      unknown call_tmp[675635] "expr temp" "maybe param" "maybe type" "temp"
      (675638 'move' call_tmp[675635](161330 call(387491 call (partial) _elementNeedsDeinit _mt[243] this[161590])))
      unknown call_tmp[675640] "expr temp" "maybe param" "maybe type" "temp"
      (675643 'move' call_tmp[675640](161443 call _cond_test call_tmp[675635]))
      if call_tmp[675640]
      {
        unknown call_tmp[675647] "expr temp" "maybe param" "maybe type" "temp"
        (675650 'move' call_tmp[675647](387496 call eltType _mt[243] this[161590]))
        unknown call_tmp[675652] "expr temp" "maybe param" "maybe type" "temp"
        (675655 'move' call_tmp[675652](161334 call _deinitElementsIsParallel call_tmp[675647]))
        unknown call_tmp[675657] "expr temp" "maybe param" "maybe type" "temp"
        (675660 'move' call_tmp[675657](161438 call _cond_test call_tmp[675652]))
        if call_tmp[675657]
        {
          unknown call_tmp[675664] "expr temp" "maybe param" "maybe type" "temp"
          (675667 'move' call_tmp[675664](361246 call dom _mt[243] this[161590]))
          unknown call_tmp[675671] "expr temp" "maybe param" "maybe type" "temp"
          (675674 'move' call_tmp[675671](161337 call table _mt[243] call_tmp[675664]))
          unknown call_tmp[675678] "expr temp" "maybe param" "maybe type" "temp"
          (675681 'move' call_tmp[675678](161344 call(161340 call (partial) allSlots _mt[243] call_tmp[675671])))
          Forall {
            induction variables:
              
              unknown slot[161367] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[675678]
            shadow variables:
            other variables
              forall body
            {
              unknown call_tmp[675685] "expr temp" "maybe param" "maybe type" "temp"
              (675688 'move' call_tmp[675685](361251 call dom _mt[243] this[161590]))
              unknown call_tmp[675692] "expr temp" "maybe param" "maybe type" "temp"
              (675695 'move' call_tmp[675692](161351 call(161346 call (partial) _isSlotFull _mt[243] call_tmp[675685]) slot[161367]))
              unknown call_tmp[675697] "expr temp" "maybe param" "maybe type" "temp"
              (675700 'move' call_tmp[675697](161361 call _cond_test call_tmp[675692]))
              if call_tmp[675697]
              {
                unknown call_tmp[675706] "expr temp" "maybe param" "maybe type" "temp"
                (675709 'move' call_tmp[675706](161356 call(387506 call (partial) data _mt[243] this[161590]) slot[161367]))
                (161358 call(387501 call (partial) _deinitElement _mt[243] this[161590]) call_tmp[675706])
                (482585 'end of statement' slot[161367])
              }
            }
          }
        }
        {
          {
            unknown _indexOfInterest[161403] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[161404] "expr temp" "temp"
            unknown call_tmp[675713] "expr temp" "maybe param" "maybe type" "temp"
            (675716 'move' call_tmp[675713](361256 call dom _mt[243] this[161590]))
            unknown call_tmp[675720] "expr temp" "maybe param" "maybe type" "temp"
            (675723 'move' call_tmp[675720](161374 call table _mt[243] call_tmp[675713]))
            unknown call_tmp[675727] "expr temp" "maybe param" "maybe type" "temp"
            (675730 'move' call_tmp[675727](161381 call(161377 call (partial) allSlots _mt[243] call_tmp[675720])))
            (161413 'move' _iterator[161404](161411 call _getIterator call_tmp[675727]))
            Defer
            {
              {
                (161430 call _freeIterator _iterator[161404])
              }
            }
            { scopeless type
              (161419 'move' _indexOfInterest[161403](161416 call iteratorIndex _iterator[161404]))
            }
            ForLoop[161405]
            {
              unknown slot[161423] "index var" "insert auto destroy"
              (482588 'end of statement')
              (161425 'move' slot[161423] _indexOfInterest[161403])
              (482589 'end of statement' slot[161423])
              {
                unknown call_tmp[675734] "expr temp" "maybe param" "maybe type" "temp"
                (675737 'move' call_tmp[675734](361261 call dom _mt[243] this[161590]))
                unknown call_tmp[675741] "expr temp" "maybe param" "maybe type" "temp"
                (675744 'move' call_tmp[675741](161388 call(161383 call (partial) _isSlotFull _mt[243] call_tmp[675734]) slot[161423]))
                unknown call_tmp[675746] "expr temp" "maybe param" "maybe type" "temp"
                (675749 'move' call_tmp[675746](161398 call _cond_test call_tmp[675741]))
                if call_tmp[675746]
                {
                  unknown call_tmp[675755] "expr temp" "maybe param" "maybe type" "temp"
                  (675758 'move' call_tmp[675755](161393 call(387517 call (partial) data _mt[243] this[161590]) slot[161423]))
                  (161395 call(387512 call (partial) _deinitElement _mt[243] this[161590]) call_tmp[675755])
                  (482591 'end of statement' slot[161423])
                }
              }
              label _continueLabel[161408]
              _indexOfInterest[161403]
              _iterator[161404]
            }
            label _breakLabel[161409]
          }
        }
      }
    }
    unknown call_tmp[675762] "expr temp" "maybe param" "maybe type" "temp"
    (675765 'move' call_tmp[675762](161454 call eltsNeedDeinit _mt[243] this[161590]))
    (161458 call = call_tmp[675762] 0)
    (521471 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).super[811047](arg _mt[811049]:_MT[238], arg this[811051]:DefaultAssociativeArr[161464](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811061] "RVV" "temp"
    unknown call_tmp[811068] "expr temp" "maybe param" "maybe type" "temp"
    (811071 'move' call_tmp[811068](811055 '.v' this[811051] c"super"))
    (811066 'move' ret[811061](811065 'deref' call_tmp[811068]))
    (811063 return ret[811061])
  }
  function DefaultAssociativeArr[811078](?).idxType[811073](arg _mt[811075]:_MT[238], arg this[811080]:DefaultAssociativeArr[811078](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811115] "RVV" "temp" "type variable"
    unknown borrowOfThis[811082]
    (811107 'end of statement')
    (811084 'move' borrowOfThis[811082](811087 call _cast _borrowedNonNilable[214](?) this[811080]))
    (811108 'end of statement' borrowOfThis[811082])
    unknown call_tmp[811129] "expr temp" "maybe param" "maybe type" "temp"
    (811132 'move' call_tmp[811129](811097 'is bound' borrowOfThis[811082] c"idxType"))
    if call_tmp[811129]
    {
      unknown call_tmp[811134] "expr temp" "maybe param" "maybe type" "temp"
      (811137 'move' call_tmp[811134](811092 '.v' borrowOfThis[811082] c"idxType"))
      unknown call_tmp[811139] "expr temp" "maybe param" "maybe type" "temp"
      (811142 'move' call_tmp[811139](811093 call chpl_checkLegalTypeFieldAccessor this[811080] call_tmp[811134] "idxType"))
      (811120 'move' ret[811115](811119 'deref' call_tmp[811139]))
      gotoReturn _end_idxType[811113] _end_idxType[811113]
      (811110 'end of statement' borrowOfThis[811082])
    }
    {
      (811125 'move' ret[811115](811124 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[811113] _end_idxType[811113]
    }
    label _end_idxType[811113]
    (811117 return ret[811115])
  }
  function DefaultAssociativeArr[811078](?).idxType[811144](arg _mt[811146]:_MT[238], arg this[811148]:DefaultAssociativeArr[811078](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811183] "RVV" "temp" "type variable"
    unknown borrowOfThis[811150] "type variable"
    (811175 'end of statement')
    (811152 'move' borrowOfThis[811150](811155 call _cast _borrowedNonNilable[214](?) this[811148]))
    (811176 'end of statement' borrowOfThis[811150])
    unknown call_tmp[811197] "expr temp" "maybe param" "maybe type" "temp"
    (811200 'move' call_tmp[811197](811165 'is bound' borrowOfThis[811150] c"idxType"))
    if call_tmp[811197]
    {
      unknown call_tmp[811202] "expr temp" "maybe param" "maybe type" "temp"
      (811205 'move' call_tmp[811202](811160 '.v' borrowOfThis[811150] c"idxType"))
      unknown call_tmp[811207] "expr temp" "maybe param" "maybe type" "temp"
      (811210 'move' call_tmp[811207](811161 call chpl_checkLegalTypeFieldAccessor this[811148] call_tmp[811202] "idxType"))
      (811188 'move' ret[811183](811187 'deref' call_tmp[811207]))
      gotoReturn _end_idxType[811181] _end_idxType[811181]
      (811178 'end of statement' borrowOfThis[811150])
    }
    {
      (811193 'move' ret[811183](811192 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[811181] _end_idxType[811181]
    }
    label _end_idxType[811181]
    (811185 return ret[811183])
  }
  function DefaultAssociativeArr[811078](?).parSafeDom[811212](arg _mt[811214]:_MT[238], arg this[811216]:DefaultAssociativeArr[811078](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811247] "RVV" "param" "temp"
    unknown borrowOfThis[811218]
    (811239 'end of statement')
    (811220 'move' borrowOfThis[811218](811223 call _cast _borrowedNonNilable[214](?) this[811216]))
    (811240 'end of statement' borrowOfThis[811218])
    unknown call_tmp[811261] "expr temp" "maybe param" "maybe type" "temp"
    (811264 'move' call_tmp[811261](811229 'is bound' borrowOfThis[811218] c"parSafeDom"))
    if call_tmp[811261]
    {
      unknown call_tmp[811266] "expr temp" "maybe param" "maybe type" "temp"
      (811269 'move' call_tmp[811266](811228 '.' borrowOfThis[811218] c"parSafeDom"))
      (811252 'move' ret[811247](811251 'deref' call_tmp[811266]))
      gotoReturn _end_parSafeDom[811245] _end_parSafeDom[811245]
      (811242 'end of statement' borrowOfThis[811218])
    }
    {
      (811257 'move' ret[811247](811256 'deref' ?[260]))
      gotoReturn _end_parSafeDom[811245] _end_parSafeDom[811245]
    }
    label _end_parSafeDom[811245]
    (811249 return ret[811247])
  }
  function DefaultAssociativeArr[811078](?).parSafeDom[811271](arg _mt[811273]:_MT[238], arg this[811275]:DefaultAssociativeArr[811078](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811306] "RVV" "param" "temp"
    unknown borrowOfThis[811277] "type variable"
    (811298 'end of statement')
    (811279 'move' borrowOfThis[811277](811282 call _cast _borrowedNonNilable[214](?) this[811275]))
    (811299 'end of statement' borrowOfThis[811277])
    unknown call_tmp[811320] "expr temp" "maybe param" "maybe type" "temp"
    (811323 'move' call_tmp[811320](811288 'is bound' borrowOfThis[811277] c"parSafeDom"))
    if call_tmp[811320]
    {
      unknown call_tmp[811325] "expr temp" "maybe param" "maybe type" "temp"
      (811328 'move' call_tmp[811325](811287 '.' borrowOfThis[811277] c"parSafeDom"))
      (811311 'move' ret[811306](811310 'deref' call_tmp[811325]))
      gotoReturn _end_parSafeDom[811304] _end_parSafeDom[811304]
      (811301 'end of statement' borrowOfThis[811277])
    }
    {
      (811316 'move' ret[811306](811315 'deref' ?[260]))
      gotoReturn _end_parSafeDom[811304] _end_parSafeDom[811304]
    }
    label _end_parSafeDom[811304]
    (811308 return ret[811306])
  }
  function DefaultAssociativeArr[161464](?).dom[811330](arg _mt[811332]:_MT[238], arg this[811334]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811344] "RVV" "temp"
    unknown call_tmp[811351] "expr temp" "maybe param" "maybe type" "temp"
    (811354 'move' call_tmp[811351](811338 '.' this[811334] c"dom"))
    (811349 'move' ret[811344](811348 'addr of' call_tmp[811351]))
    (811346 return ret[811344])
  }
  function DefaultAssociativeArr[161464](?).dataSize[811356](arg _mt[811358]:_MT[238], arg this[811360]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811370] "RVV" "temp"
    unknown call_tmp[811377] "expr temp" "maybe param" "maybe type" "temp"
    (811380 'move' call_tmp[811377](811364 '.' this[811360] c"dataSize"))
    (811375 'move' ret[811370](811374 'addr of' call_tmp[811377]))
    (811372 return ret[811370])
  }
  function DefaultAssociativeArr[161464](?).data[811382](arg _mt[811384]:_MT[238], arg this[811386]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811396] "RVV" "temp"
    unknown call_tmp[811403] "expr temp" "maybe param" "maybe type" "temp"
    (811406 'move' call_tmp[811403](811390 '.' this[811386] c"data"))
    (811401 'move' ret[811396](811400 'addr of' call_tmp[811403]))
    (811398 return ret[811396])
  }
  function DefaultAssociativeArr[161464](?).tmpData[811408](arg _mt[811410]:_MT[238], arg this[811412]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811422] "RVV" "temp"
    unknown call_tmp[811429] "expr temp" "maybe param" "maybe type" "temp"
    (811432 'move' call_tmp[811429](811416 '.' this[811412] c"tmpData"))
    (811427 'move' ret[811422](811426 'addr of' call_tmp[811429]))
    (811424 return ret[811422])
  }
  function DefaultAssociativeArr[161464](?).eltsNeedDeinit[811434](arg _mt[811436]:_MT[238], arg this[811438]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811448] "RVV" "temp"
    unknown call_tmp[811455] "expr temp" "maybe param" "maybe type" "temp"
    (811458 'move' call_tmp[811455](811442 '.' this[811438] c"eltsNeedDeinit"))
    (811453 'move' ret[811448](811452 'addr of' call_tmp[811455]))
    (811450 return ret[811448])
  }
  type DefaultAssociativeArr[161464](?) val super[355801]:AbsBaseArr[149740](?) "delay instantiation" "super class" unknown idxType[159026] "type variable" unknown parSafeDom[159030] "param" bool[10] unknown dom[159041](159039 call unmanaged DefaultAssociativeDom[415587](?) idxType[159026](parSafe = parSafeDom[159030])) val dataSize[159046]:int(64)[13] int(64)[13] unknown data[159054](159053 call _ddata[11696](?) eltType[149714]) unknown tmpData[159062](159061 call _ddata[11696](?) eltType[149714]) val eltsNeedDeinit[159067]:bool[10] 1
  type DefaultAssociativeArr[811078](?)
  type DefaultAssociativeArr[386809](?)
  (355256 'used modules list'(156281 'use' DSIUtil[230976])(156288 'use' ChapelDistribution[145457])(156290 'use' ChapelRange[64183])(156291 'use' SysBasic[223604])(156292 'use' ChapelArray[113678])(156296 'use' ChapelBase[307])(156298 'use' ChapelLocks[187302])(156299 'use' IO[230979])(156302 'use' ChapelHashing[155409])(156304 'use' ChapelHashtable[200446])(156306 'use' SysError[264319]))
}