AST dump for MSBRadixSort after pass readExternC.
Module use list: 

{
  (353092 'use' ChapelStandard)
  (288018 'import' Sort.{defaultComparator, ShellSort})
  (288025 'use'(288022 call . super c"RadixSortHelp"))
  type MSBRadixSortSettings[288067](?) unknown DISTRIBUTE_BUFFER[288029] "param" 5 const sortSwitch[288034] "const" 256 const minForTask[288039] "const" 256 unknown CHECK_SORTS[288044] "param" 0 unknown progress[288049] "param" 0 const alwaysSerial[288054] "const" 0 const maxTasks[288062] "const"(288059 call . here c"maxTaskPar")
  function msbRadixSort[288078](arg Data[288075] :
  (288072 call chpl__buildArrayRuntimeType nil[44]), arg comparator[288083] :
  unknown rec[288080] =
  defaultComparator) : _unknown[51]
  {
    { scopeless
      unknown endbit[288088] int[13]
      (288091 'end of statement')
    }
    (288099 call = endbit(288098 call msbRadixSortParamLastStartBit Data comparator))
    if(288114 call _cond_test(288104 call < endbit 0))
    {
      { scopeless
        (288111 call = endbit(288110 call max int[13]))
      }
    }
    (288148 call msbRadixSort(start_n =(288124 call .(288121 call . Data c"_dom") c"low"))(end_n =(288133 call .(288130 call . Data c"_dom") c"high")) Data comparator(startbit = 0)(endbit = endbit)(settings =(288143 'new'(288146 call MSBRadixSortSettings))))
  }
  function msbRadixSort[288158](arg start_n[288155] :
  int[13], arg end_n[288161] :
  int[13], arg A[288167] :
  (288164 call chpl__buildArrayRuntimeType nil[44]), arg criterion[288170]:_any[178](?), arg startbit[288173] :
  int[13], arg endbit[288177] :
  int[13], arg settings[288180]:_any[178](?)) : _unknown[51]
  {
    if(288188 call _cond_test(288184 call > startbit endbit))
    {
      { scopeless
        (288186 return)
      }
    }
    if(288241 call _cond_test(288204 call <(288196 call - end_n start_n)(288201 call . settings c"sortSwitch")))
    {
      (288217 call(288207 call . ShellSort c"shellSort") A criterion(start = start_n)(end = end_n))
      if(288234 call _cond_test(288223 call . settings c"CHECK_SORTS"))
      {
        { scopeless
          (288232 call checkSorted start_n end_n A criterion)
        }
      }
      (288239 return)
    }
    if(288295 call _cond_test(288248 call . settings c"progress"))
    {
      { scopeless
        (288293 call writeln "radix sort start=" start_n " end=" end_n " startbit=" startbit " endbit=" endbit)
      }
    }
    { scopeless
      const radixbits[288301] "const" RADIX_BITS
      (288304 'end of statement')
    }
    { scopeless
      const radix[288312] "const"(288310 call +(288307 call << 1 radixbits) 1)
      (288315 'end of statement')
    }
    { scopeless
      unknown offsets[288326](288324 call chpl__buildArrayRuntimeType(288322 call chpl__ensureDomainExpr(288318 call chpl_build_bounded_range 0 radix)) int[13])
      (288329 'end of statement')
    }
    { scopeless
      unknown end_offsets[288340](288338 call chpl__buildArrayRuntimeType(288336 call chpl__ensureDomainExpr(288332 call chpl_build_bounded_range 0 radix)) int[13])
      (288343 'end of statement')
    }
    unknown ubitsType[288357] "type variable"(288356 'typeof'(288355 call(288352 call binForRecord(288348 call A start_n) criterion startbit) 1))
    { scopeless
      unknown min_ubits[288365](288364 call max ubitsType) ubitsType
      (288368 'end of statement')
    }
    { scopeless
      unknown max_ubits[288371] 0 ubitsType
      (288374 'end of statement')
    }
    { scopeless
      unknown min_bin[288379](288377 call + radix 1)
      (288382 'end of statement')
    }
    { scopeless
      unknown max_bin[288384] 0
      (288387 'end of statement')
    }
    { scopeless
      unknown any_ending[288389] 0
      (288392 'end of statement')
    }
    if(288654 call _cond_test(288400 call ==(288396 call . settings c"alwaysSerial") 0))
    {
      Forall {
        induction variables:
          
          unknown i[288521] "index var" "insert auto destroy"
        iterated expressions:
          (288405 call chpl_build_bounded_range start_n end_n)
        shadow variables:
          offsets[288409] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
          min_ubits[288417] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
          max_ubits[288424] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
          any_ending[288431] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          { scopeless
            const tmp[288450] "const" "temp"(288449 call binForRecord(288445 call A i) criterion startbit)
            (288457 call _check_tuple_var_decl tmp[288450] 2)
            const bin[288436] "const"(288451 call tmp[288450] 0)
            const ubits[288438] "const"(288454 call tmp[288450] 1)
            (288462 'end of statement')
          }
          if(288473 call _cond_test(288466 call < ubits min_ubits))
          {
            { scopeless
              (288470 call = min_ubits ubits)
            }
          }
          if(288487 call _cond_test(288480 call > ubits max_ubits))
          {
            { scopeless
              (288484 call = max_ubits ubits)
            }
          }
          if(288507 call _cond_test(288500 call ||(288494 call == bin 0)(288498 call == bin radix)))
          {
            { scopeless
              (288504 call = any_ending 1)
            }
          }
          (288517 call +=(288515 call offsets bin) 1)
        }
      }
    }
    {
      {
        unknown _indexOfInterest[288615] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[288616] "expr temp" "temp"
        (288625 'move' _iterator[288616](288623 call _getIterator(288630 call chpl_direct_range_iter start_n end_n 1)))
        Defer
        {
          {
            (288646 call _freeIterator _iterator[288616])
          }
        }
        { scopeless type
          (288635 'move' _indexOfInterest[288615](288632 call iteratorIndex _iterator[288616]))
        }
        ForLoop[288617]
        {
          unknown i[288639] "index var" "insert auto destroy"
          (288641 'move' i[288639] _indexOfInterest[288615])
          {
            { scopeless
              const tmp[288545] "const" "temp"(288544 call binForRecord(288540 call A i) criterion startbit)
              (288552 call _check_tuple_var_decl tmp[288545] 2)
              const bin[288531] "const"(288546 call tmp[288545] 0)
              const ubits[288533] "const"(288549 call tmp[288545] 1)
              (288557 'end of statement')
            }
            if(288568 call _cond_test(288561 call < ubits min_ubits))
            {
              { scopeless
                (288565 call = min_ubits ubits)
              }
            }
            if(288582 call _cond_test(288575 call > ubits max_ubits))
            {
              { scopeless
                (288579 call = max_ubits ubits)
              }
            }
            if(288602 call _cond_test(288595 call ||(288589 call == bin 0)(288593 call == bin radix)))
            {
              { scopeless
                (288599 call = any_ending 1)
              }
            }
            (288612 call +=(288610 call offsets bin) 1)
          }
          label _continueLabel[288620]
          _indexOfInterest[288615]
          _iterator[288616]
        }
        label _breakLabel[288621]
      }
    }
    if(288695 call _cond_test(288660 call == any_ending 0))
    {
      { scopeless
        unknown dataStartBit[288668](288667 call findDataStartBit startbit min_ubits max_ubits)
        (288671 'end of statement')
      }
      if(288691 call _cond_test(288675 call > dataStartBit startbit))
      {
        (288686 call msbRadixSort start_n end_n A criterion dataStartBit endbit settings)
        (288689 return)
      }
    }
    if(288722 call _cond_test(288700 call . settings c"progress"))
    {
      { scopeless
        (288720 call writeln "accumulate")
      }
    }
    { scopeless
      unknown sum[288728] 0
      (288731 'end of statement')
    }
    {
      unknown _indexOfInterest[288773] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[288774] "expr temp" "temp"
      (288788 'move' _iterator[288774](288740 call _build_tuple(288783 call _getIterator offsets)(288786 call _getIterator end_offsets)))
      Defer
      {
        {
          (288818 call _freeIterator _iterator[288774])
        }
      }
      { scopeless type
        (288793 'move' _indexOfInterest[288773](288790 call iteratorIndex _iterator[288774]))
      }
      ForLoop[288775]
      {
        (288798 call _check_tuple_var_decl _indexOfInterest[288773] 2)
        unknown off[288804] "index var" "insert auto destroy"
        (288806 'move' off[288804](288802 call _indexOfInterest[288773] 0))
        unknown end[288811] "index var" "insert auto destroy"
        (288813 'move' end[288811](288809 call _indexOfInterest[288773] 1))
        {
          { scopeless
            unknown binstart[288742] sum
            (288745 'end of statement')
          }
          (288749 call += sum off)
          { scopeless
            unknown binend[288753] sum
            (288756 'end of statement')
          }
          (288762 call = off(288760 call + start_n binstart))
          (288770 call = end(288768 call + start_n binend))
        }
        label _continueLabel[288778]
        _indexOfInterest[288773]
        _iterator[288774]
      }
      label _breakLabel[288779]
    }
    { scopeless
      unknown curbin[288826] 0
      (288829 'end of statement')
    }
    if(288855 call _cond_test(288831 call . settings c"progress"))
    {
      { scopeless
        (288853 call writeln "shuffle")
      }
    }
    {
      unknown tmp[289385] "temp"
      (289403 'move' tmp[289385](289401 call _cond_test 1))
      WhileDo[289390]
      {
        {
          {
            unknown tmp[288883] "temp"
            (288927 'move' tmp[288883](288912 call _cond_test(288914 call &&(288916 call <= curbin radix)(288920 call ==(288922 call offsets curbin)(288925 call end_offsets curbin)))))
            WhileDo[288888]
            {
              {
                (288879 call += curbin 1)
              }
              label _continueLabel[288886]
              (288907 'move' tmp[288883](288892 call _cond_test(288894 call &&(288896 call <= curbin radix)(288900 call ==(288902 call offsets curbin)(288905 call end_offsets curbin)))))
              tmp[288883]
            }
            label _breakLabel[288887]
          }
          if(288939 call _cond_test(288933 call > curbin radix))
          {
            break nil[44]
          }
          { scopeless
            unknown max_buf[288949] "param"(288946 call . settings c"DISTRIBUTE_BUFFER")
            (288952 'end of statement')
          }
          { scopeless
            unknown buf[288960](288958 call * max_buf(288955 call . A c"eltType"))
            (288963 'end of statement')
          }
          { scopeless
            unknown used_buf[288965] 0
            (288968 'end of statement')
          }
          { scopeless
            unknown end[288973](288972 call end_offsets curbin)
            (288976 'end of statement')
          }
          { scopeless
            unknown endfast[288994](288993 call max(288981 call offsets curbin)(288991 call -(288986 call end_offsets curbin)(288989 call * 2 max_buf)))
            (288997 'end of statement')
          }
          { scopeless
            unknown bufstart[289012](289011 call max(289002 call offsets curbin)(289009 call -(289007 call end_offsets curbin) max_buf))
            (289015 'end of statement')
          }
          { scopeless
            unknown i[289017] bufstart
            (289020 'end of statement')
          }
          {
            unknown tmp[289047] "temp"
            (289071 'move' tmp[289047](289066 call _cond_test(289068 call < i end)))
            WhileDo[289052]
            {
              {
                (289033 call <=>(289028 call buf used_buf)(289032 call A i))
                (289039 call += used_buf 1)
                (289044 call += i 1)
              }
              label _continueLabel[289050]
              (289061 'move' tmp[289047](289056 call _cond_test(289058 call < i end)))
              tmp[289047]
            }
            label _breakLabel[289051]
          }
          {
            unknown tmp[289173] "temp"
            (289201 'move' tmp[289173](289194 call _cond_test(289196 call <(289198 call offsets curbin) endfast)))
            WhileDo[289178]
            {
              {
                {
                  unknown j[289135] 0
                  unknown tmp[289136] "maybe param" "temp"
                  (289148 'move' tmp[289136](289146 call chpl_compute_low_param_loop_bound 0(289084 call - max_buf 1)))
                  unknown tmp[289137] "maybe param" "temp"
                  (289158 'move' tmp[289137](289156 call chpl_compute_high_param_loop_bound 0(289153 call - max_buf 1)))
                  unknown tmp[289138] "maybe param" "temp"
                  (289161 'move' tmp[289138] 1)
                  ParamForLoop[289163]
                  { j[289135] tmp[289136] tmp[289137] tmp[289138]
                    {
                      { scopeless
                        const tmp[289102] "const" "temp"(289101 call binForRecord(289097 call buf j) criterion startbit)
                        (289106 call _check_tuple_var_decl tmp[289102] 2)
                        const bin[289088] "const"(289103 call tmp[289102] 0)
                        (289111 'end of statement')
                      }
                      (289124 call <=>(289119 call A(289117 call offsets bin))(289123 call buf j))
                      (289132 call +=(289130 call offsets bin) 1)
                    }
                  }
                  label _unused_continueLabel[289140]
                  label _breakLabel[289139]
                }
              }
              label _continueLabel[289176]
              (289189 'move' tmp[289173](289182 call _cond_test(289184 call <(289186 call offsets curbin) endfast)))
              tmp[289173]
            }
            label _breakLabel[289177]
          }
          {
            unknown tmp[289354] "temp"
            (289382 'move' tmp[289354](289375 call _cond_test(289377 call <(289379 call offsets curbin) end)))
            WhileDo[289359]
            {
              {
                { scopeless
                  unknown j[289212] 0
                  (289215 'end of statement')
                }
                {
                  unknown tmp[289315] "temp"
                  (289351 'move' tmp[289315](289340 call _cond_test(289342 call &&(289344 call >= used_buf 0)(289348 call < j used_buf))))
                  WhileDo[289320]
                  {
                    {
                      { scopeless
                        const tmp[289241] "const" "temp"(289240 call binForRecord(289236 call buf j) criterion startbit)
                        (289245 call _check_tuple_var_decl tmp[289241] 2)
                        const bin[289227] "const"(289242 call tmp[289241] 0)
                        (289250 'end of statement')
                      }
                      { scopeless
                        unknown offset[289256](289255 call offsets bin)
                        (289259 'end of statement')
                      }
                      (289268 call <=>(289263 call A offset)(289267 call buf j))
                      (289276 call +=(289274 call offsets bin) 1)
                      if(289306 call _cond_test(289287 call &&(289281 call == bin curbin)(289285 call >= offset bufstart)))
                      {
                        (289291 call -= used_buf 1)
                        (289303 call <=>(289298 call buf j)(289302 call buf used_buf))
                      }
                      (289312 call += j 1)
                    }
                    label _continueLabel[289318]
                    (289335 'move' tmp[289315](289324 call _cond_test(289326 call &&(289328 call >= used_buf 0)(289332 call < j used_buf))))
                    tmp[289315]
                  }
                  label _breakLabel[289319]
                }
              }
              label _continueLabel[289357]
              (289370 'move' tmp[289354](289363 call _cond_test(289365 call <(289367 call offsets curbin) end)))
              tmp[289354]
            }
            label _breakLabel[289358]
          }
        }
        label _continueLabel[289388]
        (289396 'move' tmp[289385](289394 call _cond_test 1))
        tmp[289385]
      }
      label _breakLabel[289389]
    }
    if(289431 call _cond_test(289407 call . settings c"progress"))
    {
      { scopeless
        (289429 call writeln "sort sub-problems")
      }
    }
    (289441 call =(289439 call offsets 0) start_n)
    {
      unknown _indexOfInterest[289464] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[289465] "expr temp" "temp"
      (289474 'move' _iterator[289465](289472 call _getIterator(289479 call chpl_direct_range_iter 1 radix 1)))
      Defer
      {
        {
          (289495 call _freeIterator _iterator[289465])
        }
      }
      { scopeless type
        (289484 'move' _indexOfInterest[289464](289481 call iteratorIndex _iterator[289465]))
      }
      ForLoop[289466]
      {
        unknown i[289488] "index var" "insert auto destroy"
        (289490 'move' i[289488] _indexOfInterest[289464])
        {
          (289460 call =(289452 call offsets i)(289459 call end_offsets(289456 call - i 1)))
        }
        label _continueLabel[289469]
        _indexOfInterest[289464]
        _iterator[289465]
      }
      label _breakLabel[289470]
    }
    if(289897 call _cond_test(289507 call ==(289503 call . settings c"alwaysSerial") 0))
    {
      { scopeless
        const subbits[289513] "const"(289511 call + startbit radixbits)
        (289516 'end of statement')
      }
      { scopeless
        unknown nbigsubs[289519] 0
        (289522 'end of statement')
      }
      { scopeless
        unknown bigsubs[289537](289535 call chpl__buildArrayRuntimeType(289533 call chpl__ensureDomainExpr(289525 call chpl_build_bounded_range 0 radix))(289531 call _build_tuple int[13] int[13]))
        (289540 'end of statement')
      }
      { scopeless
        const runningNow[289547] "const"(289546 call(289542 call . here c"runningTasks"))
        (289550 'end of statement')
      }
      {
        unknown _indexOfInterest[289674] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289675] "expr temp" "temp"
        (289684 'move' _iterator[289675](289682 call _getIterator(289692 call chpl_direct_range_iter 1(289689 call - radix 1) 1)))
        Defer
        {
          {
            (289708 call _freeIterator _iterator[289675])
          }
        }
        { scopeless type
          (289697 'move' _indexOfInterest[289674](289694 call iteratorIndex _iterator[289675]))
        }
        ForLoop[289676]
        {
          unknown bin[289701] "index var" "insert auto destroy"
          (289703 'move' bin[289701] _indexOfInterest[289674])
          {
            { scopeless
              const bin_start[289563] "const"(289562 call offsets bin)
              (289566 'end of statement')
            }
            { scopeless
              const bin_end[289589] "const"(289586 IfExpr (289573 call <=(289570 call + bin 1) radix) then
              { scopeless
                (289583 call -(289581 call offsets(289578 call + bin 1)) 1)
              } else
              { scopeless
                end_n
              } )
              (289592 'end of statement')
            }
            { scopeless
              const num[289600] "const"(289598 call -(289595 call + 1 bin_end) bin_start)
              (289603 'end of statement')
            }
            if(289669 call _cond_test(289612 call ||(289606 call <= num 1)(289610 call >= startbit endbit)))
            {
            }
            {
              { scopeless
                if(289665 call _cond_test(289633 call ||(289622 call < num(289619 call . settings c"minForTask"))(289631 call >= runningNow(289628 call . settings c"maxTasks"))))
                {
                  (289644 call msbRadixSort bin_start bin_end A criterion subbits endbit settings)
                }
                {
                  (289656 call =(289650 call bigsubs nbigsubs)(289654 call _build_tuple bin_start bin_end))
                  (289662 call += nbigsubs 1)
                }
              }
            }
          }
          label _continueLabel[289679]
          _indexOfInterest[289674]
          _iterator[289675]
        }
        label _breakLabel[289680]
      }
      Forall {
        induction variables:
          
          unknown bin[289746] "index var" "insert auto destroy"
          
          unknown chpl_idx_2[289748] "index var" "an _indexOfInterest or chpl__followIdx variable" "insert auto destroy" "temp"
        iterated expressions:
          (289728 call #(289725 call chpl_build_low_bounded_range 0) nbigsubs)
          bigsubs
        shadow variables:
        other variables
          forall body
        {
          (289753 call _check_tuple_var_decl chpl_idx_2[289748] 2)
          unknown bin_start[289759] "index var" "insert auto destroy"
          (289761 'move' bin_start[289759](289757 call chpl_idx_2[289748] 0))
          unknown bin_end[289766] "index var" "insert auto destroy"
          (289768 'move' bin_end[289766](289764 call chpl_idx_2[289748] 1))
          (289742 call msbRadixSort bin_start bin_end A criterion subbits endbit settings)
        }
      }
    }
    {
      {
        unknown _indexOfInterest[289855] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289856] "expr temp" "temp"
        (289865 'move' _iterator[289856](289863 call _getIterator(289873 call chpl_direct_range_iter 1(289870 call - radix 1) 1)))
        Defer
        {
          {
            (289889 call _freeIterator _iterator[289856])
          }
        }
        { scopeless type
          (289878 'move' _indexOfInterest[289855](289875 call iteratorIndex _iterator[289856]))
        }
        ForLoop[289857]
        {
          unknown bin[289882] "index var" "insert auto destroy"
          (289884 'move' bin[289882] _indexOfInterest[289855])
          {
            { scopeless
              const bin_start[289784] "const"(289783 call offsets bin)
              (289787 'end of statement')
            }
            { scopeless
              const bin_end[289810] "const"(289807 IfExpr (289794 call <=(289791 call + bin 1) radix) then
              { scopeless
                (289804 call -(289802 call offsets(289799 call + bin 1)) 1)
              } else
              { scopeless
                end_n
              } )
              (289813 'end of statement')
            }
            { scopeless
              const num[289821] "const"(289819 call -(289816 call + 1 bin_end) bin_start)
              (289824 'end of statement')
            }
            if(289851 call _cond_test(289833 call ||(289827 call <= num 1)(289831 call >= startbit endbit)))
            {
            }
            {
              (289848 call msbRadixSort bin_start bin_end A criterion(289844 call + startbit radixbits) endbit settings)
            }
          }
          label _continueLabel[289860]
          _indexOfInterest[289855]
          _iterator[289856]
        }
        label _breakLabel[289861]
      }
    }
    if(289913 call _cond_test(289902 call . settings c"CHECK_SORTS"))
    {
      { scopeless
        (289911 call checkSorted start_n end_n A criterion)
      }
    }
  }
}