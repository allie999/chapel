AST dump for MSBRadixSort after pass readExternC.
Module use list: 

{
  (353161 'use' ChapelStandard)
  (288087 'import' Sort.{defaultComparator, ShellSort})
  (288094 'use'(288091 call . super c"RadixSortHelp"))
  type MSBRadixSortSettings[288136](?) unknown DISTRIBUTE_BUFFER[288098] "param" 5 const sortSwitch[288103] "const" 256 const minForTask[288108] "const" 256 unknown CHECK_SORTS[288113] "param" 0 unknown progress[288118] "param" 0 const alwaysSerial[288123] "const" 0 const maxTasks[288131] "const"(288128 call . here c"maxTaskPar")
  function msbRadixSort[288147](arg Data[288144] :
  (288141 call chpl__buildArrayRuntimeType nil[44]), arg comparator[288152] :
  unknown rec[288149] =
  defaultComparator) : _unknown[51]
  {
    { scopeless
      unknown endbit[288157] int[13]
      (288160 'end of statement')
    }
    (288168 call = endbit(288167 call msbRadixSortParamLastStartBit Data comparator))
    if(288183 call _cond_test(288173 call < endbit 0))
    {
      { scopeless
        (288180 call = endbit(288179 call max int[13]))
      }
    }
    (288217 call msbRadixSort(start_n =(288193 call .(288190 call . Data c"_dom") c"low"))(end_n =(288202 call .(288199 call . Data c"_dom") c"high")) Data comparator(startbit = 0)(endbit = endbit)(settings =(288212 'new'(288215 call MSBRadixSortSettings))))
  }
  function msbRadixSort[288227](arg start_n[288224] :
  int[13], arg end_n[288230] :
  int[13], arg A[288236] :
  (288233 call chpl__buildArrayRuntimeType nil[44]), arg criterion[288239]:_any[178](?), arg startbit[288242] :
  int[13], arg endbit[288246] :
  int[13], arg settings[288249]:_any[178](?)) : _unknown[51]
  {
    if(288257 call _cond_test(288253 call > startbit endbit))
    {
      { scopeless
        (288255 return)
      }
    }
    if(288310 call _cond_test(288273 call <(288265 call - end_n start_n)(288270 call . settings c"sortSwitch")))
    {
      (288286 call(288276 call . ShellSort c"shellSort") A criterion(start = start_n)(end = end_n))
      if(288303 call _cond_test(288292 call . settings c"CHECK_SORTS"))
      {
        { scopeless
          (288301 call checkSorted start_n end_n A criterion)
        }
      }
      (288308 return)
    }
    if(288364 call _cond_test(288317 call . settings c"progress"))
    {
      { scopeless
        (288362 call writeln "radix sort start=" start_n " end=" end_n " startbit=" startbit " endbit=" endbit)
      }
    }
    { scopeless
      const radixbits[288370] "const" RADIX_BITS
      (288373 'end of statement')
    }
    { scopeless
      const radix[288381] "const"(288379 call +(288376 call << 1 radixbits) 1)
      (288384 'end of statement')
    }
    { scopeless
      unknown offsets[288395](288393 call chpl__buildArrayRuntimeType(288391 call chpl__ensureDomainExpr(288387 call chpl_build_bounded_range 0 radix)) int[13])
      (288398 'end of statement')
    }
    { scopeless
      unknown end_offsets[288409](288407 call chpl__buildArrayRuntimeType(288405 call chpl__ensureDomainExpr(288401 call chpl_build_bounded_range 0 radix)) int[13])
      (288412 'end of statement')
    }
    unknown ubitsType[288426] "type variable"(288425 'typeof'(288424 call(288421 call binForRecord(288417 call A start_n) criterion startbit) 1))
    { scopeless
      unknown min_ubits[288434](288433 call max ubitsType) ubitsType
      (288437 'end of statement')
    }
    { scopeless
      unknown max_ubits[288440] 0 ubitsType
      (288443 'end of statement')
    }
    { scopeless
      unknown min_bin[288448](288446 call + radix 1)
      (288451 'end of statement')
    }
    { scopeless
      unknown max_bin[288453] 0
      (288456 'end of statement')
    }
    { scopeless
      unknown any_ending[288458] 0
      (288461 'end of statement')
    }
    if(288723 call _cond_test(288469 call ==(288465 call . settings c"alwaysSerial") 0))
    {
      Forall {
        induction variables:
          
          unknown i[288590] "index var" "insert auto destroy"
        iterated expressions:
          (288474 call chpl_build_bounded_range start_n end_n)
        shadow variables:
          offsets[288478] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
          min_ubits[288486] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
          max_ubits[288493] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
          any_ending[288500] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          { scopeless
            const tmp[288519] "const" "temp"(288518 call binForRecord(288514 call A i) criterion startbit)
            (288526 call _check_tuple_var_decl tmp[288519] 2)
            const bin[288505] "const"(288520 call tmp[288519] 0)
            const ubits[288507] "const"(288523 call tmp[288519] 1)
            (288531 'end of statement')
          }
          if(288542 call _cond_test(288535 call < ubits min_ubits))
          {
            { scopeless
              (288539 call = min_ubits ubits)
            }
          }
          if(288556 call _cond_test(288549 call > ubits max_ubits))
          {
            { scopeless
              (288553 call = max_ubits ubits)
            }
          }
          if(288576 call _cond_test(288569 call ||(288563 call == bin 0)(288567 call == bin radix)))
          {
            { scopeless
              (288573 call = any_ending 1)
            }
          }
          (288586 call +=(288584 call offsets bin) 1)
        }
      }
    }
    {
      {
        unknown _indexOfInterest[288684] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[288685] "expr temp" "temp"
        (288694 'move' _iterator[288685](288692 call _getIterator(288699 call chpl_direct_range_iter start_n end_n 1)))
        Defer
        {
          {
            (288715 call _freeIterator _iterator[288685])
          }
        }
        { scopeless type
          (288704 'move' _indexOfInterest[288684](288701 call iteratorIndex _iterator[288685]))
        }
        ForLoop[288686]
        {
          unknown i[288708] "index var" "insert auto destroy"
          (288710 'move' i[288708] _indexOfInterest[288684])
          {
            { scopeless
              const tmp[288614] "const" "temp"(288613 call binForRecord(288609 call A i) criterion startbit)
              (288621 call _check_tuple_var_decl tmp[288614] 2)
              const bin[288600] "const"(288615 call tmp[288614] 0)
              const ubits[288602] "const"(288618 call tmp[288614] 1)
              (288626 'end of statement')
            }
            if(288637 call _cond_test(288630 call < ubits min_ubits))
            {
              { scopeless
                (288634 call = min_ubits ubits)
              }
            }
            if(288651 call _cond_test(288644 call > ubits max_ubits))
            {
              { scopeless
                (288648 call = max_ubits ubits)
              }
            }
            if(288671 call _cond_test(288664 call ||(288658 call == bin 0)(288662 call == bin radix)))
            {
              { scopeless
                (288668 call = any_ending 1)
              }
            }
            (288681 call +=(288679 call offsets bin) 1)
          }
          label _continueLabel[288689]
          _indexOfInterest[288684]
          _iterator[288685]
        }
        label _breakLabel[288690]
      }
    }
    if(288764 call _cond_test(288729 call == any_ending 0))
    {
      { scopeless
        unknown dataStartBit[288737](288736 call findDataStartBit startbit min_ubits max_ubits)
        (288740 'end of statement')
      }
      if(288760 call _cond_test(288744 call > dataStartBit startbit))
      {
        (288755 call msbRadixSort start_n end_n A criterion dataStartBit endbit settings)
        (288758 return)
      }
    }
    if(288791 call _cond_test(288769 call . settings c"progress"))
    {
      { scopeless
        (288789 call writeln "accumulate")
      }
    }
    { scopeless
      unknown sum[288797] 0
      (288800 'end of statement')
    }
    {
      unknown _indexOfInterest[288842] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[288843] "expr temp" "temp"
      (288857 'move' _iterator[288843](288809 call _build_tuple(288852 call _getIterator offsets)(288855 call _getIterator end_offsets)))
      Defer
      {
        {
          (288887 call _freeIterator _iterator[288843])
        }
      }
      { scopeless type
        (288862 'move' _indexOfInterest[288842](288859 call iteratorIndex _iterator[288843]))
      }
      ForLoop[288844]
      {
        (288867 call _check_tuple_var_decl _indexOfInterest[288842] 2)
        unknown off[288873] "index var" "insert auto destroy"
        (288875 'move' off[288873](288871 call _indexOfInterest[288842] 0))
        unknown end[288880] "index var" "insert auto destroy"
        (288882 'move' end[288880](288878 call _indexOfInterest[288842] 1))
        {
          { scopeless
            unknown binstart[288811] sum
            (288814 'end of statement')
          }
          (288818 call += sum off)
          { scopeless
            unknown binend[288822] sum
            (288825 'end of statement')
          }
          (288831 call = off(288829 call + start_n binstart))
          (288839 call = end(288837 call + start_n binend))
        }
        label _continueLabel[288847]
        _indexOfInterest[288842]
        _iterator[288843]
      }
      label _breakLabel[288848]
    }
    { scopeless
      unknown curbin[288895] 0
      (288898 'end of statement')
    }
    if(288924 call _cond_test(288900 call . settings c"progress"))
    {
      { scopeless
        (288922 call writeln "shuffle")
      }
    }
    {
      unknown tmp[289454] "temp"
      (289472 'move' tmp[289454](289470 call _cond_test 1))
      WhileDo[289459]
      {
        {
          {
            unknown tmp[288952] "temp"
            (288996 'move' tmp[288952](288981 call _cond_test(288983 call &&(288985 call <= curbin radix)(288989 call ==(288991 call offsets curbin)(288994 call end_offsets curbin)))))
            WhileDo[288957]
            {
              {
                (288948 call += curbin 1)
              }
              label _continueLabel[288955]
              (288976 'move' tmp[288952](288961 call _cond_test(288963 call &&(288965 call <= curbin radix)(288969 call ==(288971 call offsets curbin)(288974 call end_offsets curbin)))))
              tmp[288952]
            }
            label _breakLabel[288956]
          }
          if(289008 call _cond_test(289002 call > curbin radix))
          {
            break nil[44]
          }
          { scopeless
            unknown max_buf[289018] "param"(289015 call . settings c"DISTRIBUTE_BUFFER")
            (289021 'end of statement')
          }
          { scopeless
            unknown buf[289029](289027 call * max_buf(289024 call . A c"eltType"))
            (289032 'end of statement')
          }
          { scopeless
            unknown used_buf[289034] 0
            (289037 'end of statement')
          }
          { scopeless
            unknown end[289042](289041 call end_offsets curbin)
            (289045 'end of statement')
          }
          { scopeless
            unknown endfast[289063](289062 call max(289050 call offsets curbin)(289060 call -(289055 call end_offsets curbin)(289058 call * 2 max_buf)))
            (289066 'end of statement')
          }
          { scopeless
            unknown bufstart[289081](289080 call max(289071 call offsets curbin)(289078 call -(289076 call end_offsets curbin) max_buf))
            (289084 'end of statement')
          }
          { scopeless
            unknown i[289086] bufstart
            (289089 'end of statement')
          }
          {
            unknown tmp[289116] "temp"
            (289140 'move' tmp[289116](289135 call _cond_test(289137 call < i end)))
            WhileDo[289121]
            {
              {
                (289102 call <=>(289097 call buf used_buf)(289101 call A i))
                (289108 call += used_buf 1)
                (289113 call += i 1)
              }
              label _continueLabel[289119]
              (289130 'move' tmp[289116](289125 call _cond_test(289127 call < i end)))
              tmp[289116]
            }
            label _breakLabel[289120]
          }
          {
            unknown tmp[289242] "temp"
            (289270 'move' tmp[289242](289263 call _cond_test(289265 call <(289267 call offsets curbin) endfast)))
            WhileDo[289247]
            {
              {
                {
                  unknown j[289204] 0
                  unknown tmp[289205] "maybe param" "temp"
                  (289217 'move' tmp[289205](289215 call chpl_compute_low_param_loop_bound 0(289153 call - max_buf 1)))
                  unknown tmp[289206] "maybe param" "temp"
                  (289227 'move' tmp[289206](289225 call chpl_compute_high_param_loop_bound 0(289222 call - max_buf 1)))
                  unknown tmp[289207] "maybe param" "temp"
                  (289230 'move' tmp[289207] 1)
                  ParamForLoop[289232]
                  { j[289204] tmp[289205] tmp[289206] tmp[289207]
                    {
                      { scopeless
                        const tmp[289171] "const" "temp"(289170 call binForRecord(289166 call buf j) criterion startbit)
                        (289175 call _check_tuple_var_decl tmp[289171] 2)
                        const bin[289157] "const"(289172 call tmp[289171] 0)
                        (289180 'end of statement')
                      }
                      (289193 call <=>(289188 call A(289186 call offsets bin))(289192 call buf j))
                      (289201 call +=(289199 call offsets bin) 1)
                    }
                  }
                  label _unused_continueLabel[289209]
                  label _breakLabel[289208]
                }
              }
              label _continueLabel[289245]
              (289258 'move' tmp[289242](289251 call _cond_test(289253 call <(289255 call offsets curbin) endfast)))
              tmp[289242]
            }
            label _breakLabel[289246]
          }
          {
            unknown tmp[289423] "temp"
            (289451 'move' tmp[289423](289444 call _cond_test(289446 call <(289448 call offsets curbin) end)))
            WhileDo[289428]
            {
              {
                { scopeless
                  unknown j[289281] 0
                  (289284 'end of statement')
                }
                {
                  unknown tmp[289384] "temp"
                  (289420 'move' tmp[289384](289409 call _cond_test(289411 call &&(289413 call >= used_buf 0)(289417 call < j used_buf))))
                  WhileDo[289389]
                  {
                    {
                      { scopeless
                        const tmp[289310] "const" "temp"(289309 call binForRecord(289305 call buf j) criterion startbit)
                        (289314 call _check_tuple_var_decl tmp[289310] 2)
                        const bin[289296] "const"(289311 call tmp[289310] 0)
                        (289319 'end of statement')
                      }
                      { scopeless
                        unknown offset[289325](289324 call offsets bin)
                        (289328 'end of statement')
                      }
                      (289337 call <=>(289332 call A offset)(289336 call buf j))
                      (289345 call +=(289343 call offsets bin) 1)
                      if(289375 call _cond_test(289356 call &&(289350 call == bin curbin)(289354 call >= offset bufstart)))
                      {
                        (289360 call -= used_buf 1)
                        (289372 call <=>(289367 call buf j)(289371 call buf used_buf))
                      }
                      (289381 call += j 1)
                    }
                    label _continueLabel[289387]
                    (289404 'move' tmp[289384](289393 call _cond_test(289395 call &&(289397 call >= used_buf 0)(289401 call < j used_buf))))
                    tmp[289384]
                  }
                  label _breakLabel[289388]
                }
              }
              label _continueLabel[289426]
              (289439 'move' tmp[289423](289432 call _cond_test(289434 call <(289436 call offsets curbin) end)))
              tmp[289423]
            }
            label _breakLabel[289427]
          }
        }
        label _continueLabel[289457]
        (289465 'move' tmp[289454](289463 call _cond_test 1))
        tmp[289454]
      }
      label _breakLabel[289458]
    }
    if(289500 call _cond_test(289476 call . settings c"progress"))
    {
      { scopeless
        (289498 call writeln "sort sub-problems")
      }
    }
    (289510 call =(289508 call offsets 0) start_n)
    {
      unknown _indexOfInterest[289533] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[289534] "expr temp" "temp"
      (289543 'move' _iterator[289534](289541 call _getIterator(289548 call chpl_direct_range_iter 1 radix 1)))
      Defer
      {
        {
          (289564 call _freeIterator _iterator[289534])
        }
      }
      { scopeless type
        (289553 'move' _indexOfInterest[289533](289550 call iteratorIndex _iterator[289534]))
      }
      ForLoop[289535]
      {
        unknown i[289557] "index var" "insert auto destroy"
        (289559 'move' i[289557] _indexOfInterest[289533])
        {
          (289529 call =(289521 call offsets i)(289528 call end_offsets(289525 call - i 1)))
        }
        label _continueLabel[289538]
        _indexOfInterest[289533]
        _iterator[289534]
      }
      label _breakLabel[289539]
    }
    if(289966 call _cond_test(289576 call ==(289572 call . settings c"alwaysSerial") 0))
    {
      { scopeless
        const subbits[289582] "const"(289580 call + startbit radixbits)
        (289585 'end of statement')
      }
      { scopeless
        unknown nbigsubs[289588] 0
        (289591 'end of statement')
      }
      { scopeless
        unknown bigsubs[289606](289604 call chpl__buildArrayRuntimeType(289602 call chpl__ensureDomainExpr(289594 call chpl_build_bounded_range 0 radix))(289600 call _build_tuple int[13] int[13]))
        (289609 'end of statement')
      }
      { scopeless
        const runningNow[289616] "const"(289615 call(289611 call . here c"runningTasks"))
        (289619 'end of statement')
      }
      {
        unknown _indexOfInterest[289743] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289744] "expr temp" "temp"
        (289753 'move' _iterator[289744](289751 call _getIterator(289761 call chpl_direct_range_iter 1(289758 call - radix 1) 1)))
        Defer
        {
          {
            (289777 call _freeIterator _iterator[289744])
          }
        }
        { scopeless type
          (289766 'move' _indexOfInterest[289743](289763 call iteratorIndex _iterator[289744]))
        }
        ForLoop[289745]
        {
          unknown bin[289770] "index var" "insert auto destroy"
          (289772 'move' bin[289770] _indexOfInterest[289743])
          {
            { scopeless
              const bin_start[289632] "const"(289631 call offsets bin)
              (289635 'end of statement')
            }
            { scopeless
              const bin_end[289658] "const"(289655 IfExpr (289642 call <=(289639 call + bin 1) radix) then
              { scopeless
                (289652 call -(289650 call offsets(289647 call + bin 1)) 1)
              } else
              { scopeless
                end_n
              } )
              (289661 'end of statement')
            }
            { scopeless
              const num[289669] "const"(289667 call -(289664 call + 1 bin_end) bin_start)
              (289672 'end of statement')
            }
            if(289738 call _cond_test(289681 call ||(289675 call <= num 1)(289679 call >= startbit endbit)))
            {
            }
            {
              { scopeless
                if(289734 call _cond_test(289702 call ||(289691 call < num(289688 call . settings c"minForTask"))(289700 call >= runningNow(289697 call . settings c"maxTasks"))))
                {
                  (289713 call msbRadixSort bin_start bin_end A criterion subbits endbit settings)
                }
                {
                  (289725 call =(289719 call bigsubs nbigsubs)(289723 call _build_tuple bin_start bin_end))
                  (289731 call += nbigsubs 1)
                }
              }
            }
          }
          label _continueLabel[289748]
          _indexOfInterest[289743]
          _iterator[289744]
        }
        label _breakLabel[289749]
      }
      Forall {
        induction variables:
          
          unknown bin[289815] "index var" "insert auto destroy"
          
          unknown chpl_idx_2[289817] "index var" "an _indexOfInterest or chpl__followIdx variable" "insert auto destroy" "temp"
        iterated expressions:
          (289797 call #(289794 call chpl_build_low_bounded_range 0) nbigsubs)
          bigsubs
        shadow variables:
        other variables
          forall body
        {
          (289822 call _check_tuple_var_decl chpl_idx_2[289817] 2)
          unknown bin_start[289828] "index var" "insert auto destroy"
          (289830 'move' bin_start[289828](289826 call chpl_idx_2[289817] 0))
          unknown bin_end[289835] "index var" "insert auto destroy"
          (289837 'move' bin_end[289835](289833 call chpl_idx_2[289817] 1))
          (289811 call msbRadixSort bin_start bin_end A criterion subbits endbit settings)
        }
      }
    }
    {
      {
        unknown _indexOfInterest[289924] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289925] "expr temp" "temp"
        (289934 'move' _iterator[289925](289932 call _getIterator(289942 call chpl_direct_range_iter 1(289939 call - radix 1) 1)))
        Defer
        {
          {
            (289958 call _freeIterator _iterator[289925])
          }
        }
        { scopeless type
          (289947 'move' _indexOfInterest[289924](289944 call iteratorIndex _iterator[289925]))
        }
        ForLoop[289926]
        {
          unknown bin[289951] "index var" "insert auto destroy"
          (289953 'move' bin[289951] _indexOfInterest[289924])
          {
            { scopeless
              const bin_start[289853] "const"(289852 call offsets bin)
              (289856 'end of statement')
            }
            { scopeless
              const bin_end[289879] "const"(289876 IfExpr (289863 call <=(289860 call + bin 1) radix) then
              { scopeless
                (289873 call -(289871 call offsets(289868 call + bin 1)) 1)
              } else
              { scopeless
                end_n
              } )
              (289882 'end of statement')
            }
            { scopeless
              const num[289890] "const"(289888 call -(289885 call + 1 bin_end) bin_start)
              (289893 'end of statement')
            }
            if(289920 call _cond_test(289902 call ||(289896 call <= num 1)(289900 call >= startbit endbit)))
            {
            }
            {
              (289917 call msbRadixSort bin_start bin_end A criterion(289913 call + startbit radixbits) endbit settings)
            }
          }
          label _continueLabel[289929]
          _indexOfInterest[289924]
          _iterator[289925]
        }
        label _breakLabel[289930]
      }
    }
    if(289982 call _cond_test(289971 call . settings c"CHECK_SORTS"))
    {
      { scopeless
        (289980 call checkSorted start_n end_n A criterion)
      }
    }
  }
}