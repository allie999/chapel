AST dump for LayoutCS after pass parse.
Module use list: 

{
  (352990 'use' ChapelStandard)
  (335962 'import' RangeChunk)
  { scopeless
    unknown debugCS[335965] "config" "no doc" "param" 0
    (335968 'end of statement')
  }
  { scopeless
    unknown LayoutCSDefaultToSorted[335970] "config" "param" 1
    (335973 'end of statement')
  }
  type _ColumnComparator[336000] function _ColumnComparator[336000].key[335981](arg _mt[336004]:_MT[238], arg this[336002]:_ColumnComparator[336000], arg idx[335978] :
  _tuple) : _unknown[51] "method" "primary method"
  {
    (335994 return(335992 call _build_tuple(335986 call idx 1)(335990 call idx 0)))
  }
  { scopeless
    const _columnComparator[336008] "const" "no doc" _ColumnComparator
    (336011 'end of statement')
  }
  function isCSType[336016](arg t[336014]:_any[178](?)) param : _unknown[51] "no doc"
  {
    { scopeless
      (336026 return(336025 call isSubtype(336022 call _to_borrowed t) CS))
    }
  }
  type CS[336166](?) unknown compressRows[336036] "param" 1 bool[10] unknown sortedIndices[336042] "param" LayoutCSDefaultToSorted bool[10] function CS[336166](?).dsiNewSparseDom[336052](arg _mt[336170]:_MT[238], arg this[336168]:CS[336166](?), param arg rank[336049] :
  int[13], arg idxType[336054]:_any[178](?), arg dom[336057] :
  _domain) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336089 return(336062 'new'(_chpl_manager = unmanaged[220](?))(336088 call CSDom rank idxType(336070 call . this c"compressRows")(336076 call . this c"sortedIndices")(336080 call . dom c"stridable")(336086 call _to_unmanaged this) dom)))
  } function CS[336166](?).dsiClone[336096](arg _mt[336174]:_MT[238], arg this[336172]:CS[336166](?)) : _unknown[51] "method" "primary method"
  {
    (336114 return(336100 'new'(_chpl_manager = unmanaged[220](?))(336113 call CS(compressRows =(336103 call . this c"compressRows"))(sortedIndices =(336109 call . this c"sortedIndices")))))
  } function CS[336166](?).dsiEqualDMaps[336135](arg _mt[336178]:_MT[238], arg this[336176]:CS[336166](?), arg that[336132] :
  (336131 call CS(336123 call . this c"compressRows")(336128 call . this c"sortedIndices"))) param : _unknown[51] "method" "primary method"
  {
    (336138 return 1)
  } function CS[336166](?).dsiEqualDMaps[336147](arg _mt[336182]:_MT[238], arg this[336180]:CS[336166](?), arg that[336145]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (336150 return 0)
  } function CS[336166](?).dsiIsLayout[336157](arg _mt[336186]:_MT[238], arg this[336184]:CS[336166](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (336160 return 1)
  } BaseDist
  type CSDom[340828](?) unknown compressRows[336192] "param" unknown sortedIndices[336196] "param" unknown stridable[336200] "param" unknown dist[336210](336209 'to unmanaged class from unknown'(336208 call CS compressRows sortedIndices)) unknown rowRange[336220](336219 call range idxType(stridable = stridable)) unknown colRange[336230](336229 call range idxType(stridable = stridable)) unknown startIdxDom[336240](336238 call chpl__buildDomainRuntimeType defaultDist 1 idxType) unknown _nnz[336245] 0 unknown startIdx[336256] "local field"(336254 call chpl__buildArrayRuntimeType(336252 call chpl__ensureDomainExpr startIdxDom) idxType) unknown idx[336267] "local field"(336265 call chpl__buildArrayRuntimeType(336263 call chpl__ensureDomainExpr nnzDom) idxType) function CSDom[340828](?).init[336275](arg _mt[340832]:_MT[238], arg this[340830]:CSDom[340828](?), param arg rank[336273]:_any[178](?), arg idxType[336277]:_any[178](?), param arg compressRows[336279]:_any[178](?), param arg sortedIndices[336281]:_any[178](?), param arg stridable[336283]:_any[178](?), arg dist[336291] :
  (336290 'to unmanaged class from unknown'(336289 call CS compressRows sortedIndices)), arg parentDom[336295] :
  _domain) : _unknown[51] "method" "primary method"
  {
    if(336332 call _cond_test(336309 call ||(336300 call != rank 2)(336307 call !=(336303 call . parentDom c"rank") 2)))
    {
      { scopeless
        (336330 call compilerError "Only 2D sparse domains are supported by the CS distribution")
      }
    }
    if(336384 call _cond_test(336343 call !=(336339 call . parentDom c"idxType") idxType))
    {
      { scopeless
        (336382 call compilerError(336379 call +(336370 call +(336367 call + "idxType mismatch in CSDom.init(): "(336365 call _cast string[26] idxType)) " != ")(336377 call _cast string[26](336373 call . parentDom c"idxType"))))
      }
    }
    (336397 call(336390 call . super c"init") rank idxType parentDom)
    (336404 call =(336400 call . this c"compressRows") compressRows)
    (336412 call =(336408 call . this c"sortedIndices") sortedIndices)
    (336420 call =(336416 call . this c"stridable") stridable)
    (336428 call =(336424 call . this c"dist") dist)
    (336439 call = rowRange(336438 call(336433 call . parentDom c"dim") 0))
    (336450 call = colRange(336449 call(336444 call . parentDom c"dim") 1))
    (336490 call = startIdxDom(336487 IfExpr  compressRows then
    { scopeless
      (336469 call chpl__buildDomainExpr(336466 call chpl_build_bounded_range(336456 call . rowRange c"low")(336464 call +(336460 call . rowRange c"high") 1)))
    } else
    { scopeless
      (336485 call chpl__buildDomainExpr(336482 call chpl_build_bounded_range(336472 call . colRange c"low")(336480 call +(336476 call . colRange c"high") 1)))
    } ))
    (336498 call(336494 call . this c"complete"))
    (336508 call = nnzDom(336506 call chpl__buildDomainExpr(336503 call chpl_build_bounded_range 1 _nnz)))
    (336513 call dsiClear)
  } function CSDom[340828](?).getNNZ[336519](arg _mt[340836]:_MT[238], arg this[340834]:CSDom[340828](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336523 return _nnz)
  }
  { scopeless type
    int[13]
  } function CSDom[340828](?).dsiMyDist[336531](arg _mt[340840]:_MT[238], arg this[340838]:CSDom[340828](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (336534 return dist)
    }
  } function CSDom[340828](?).dsiAssignDomain[336545](arg _mt[340844]:_MT[238], arg this[340842]:CSDom[340828](?), arg rhs[336542] :
  _domain, arg lhsPrivate[336548] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    if(336680 call _cond_test(336570 call &&(336561 call ==(336558 call _to_borrowed(336556 'typeof'(336553 call . rhs c"_instance")))(336560 'typeof' this))(336568 call ==(336564 call . this c"dsiNumIndices") 0)))
    {
      (336580 call =(336573 call . this c"_nnz")(336577 call . rhs c"_nnz"))
      (336592 call =(336585 call . this c"nnzDom")(336589 call . rhs c"nnzDom"))
      (336605 call =(336598 call . this c"startIdx")(336602 call . rhs c"startIdx"))
      (336616 call =(336609 call . this c"idx")(336613 call . rhs c"idx"))
    }
    {
      { scopeless
        if(336676 call _cond_test(336628 call <(336626 call _to_borrowed(336624 'typeof'(336621 call . rhs c"_instance"))) DefaultSparseDom))
        {
          (336666 call(336631 call . this c"dsiBulkAdd")(336657 call(336638 call .(336635 call . rhs c"_instance") c"_indices")(336654 call #(336648 call chpl_build_low_bounded_range(336645 call .(336642 call . rhs c"nnzDom") c"low"))(336651 call . rhs c"_nnz")))(dataSorted =(336660 call . this c"compressRows"))(isUnique = 1))
        }
        {
          (336673 call chpl_assignDomainWithIndsIterSafeForRemoving this rhs)
        }
      }
    }
  } function CSDom[340828](?).dsiBuildArray[336692](arg _mt[340848]:_MT[238], arg this[340846]:CSDom[340828](?), arg eltType[336690]:_any[178](?), param arg initElts[336695] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (336717 return(336700 'new'(_chpl_manager = unmanaged[220](?))(336716 call CSArr(eltType = eltType)(rank = rank)(idxType = idxType)(dom =(336712 call _to_unmanaged this))(initElts = initElts))))
  } function CSDom[340828](?).dsiIndsIterSafeForRemoving[336724](arg _mt[340852]:_MT[238], arg this[340850]:CSDom[340828](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown cursor[336741](336738 IfExpr (336727 call . this c"compressRows") then
      { scopeless
        (336731 call . rowRange c"high")
      } else
      { scopeless
        (336735 call . colRange c"high")
      } )
      (336744 'end of statement')
    }
    {
      unknown _indexOfInterest[336831] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[336832] "expr temp" "temp"
      (336841 'move' _iterator[336832](336839 call _getIterator(336852 call chpl_direct_range_iter 1 _nnz(336848 call - 1))))
      Defer
      {
        {
          (336868 call _freeIterator _iterator[336832])
        }
      }
      { scopeless type
        (336857 'move' _indexOfInterest[336831](336854 call iteratorIndex _iterator[336832]))
      }
      ForLoop[336833]
      {
        unknown i[336861] "index var" "insert auto destroy"
        (336863 'move' i[336861] _indexOfInterest[336831])
        {
          {
            unknown tmp[336769] "temp"
            (336797 'move' tmp[336769](336790 call _cond_test(336792 call >(336794 call startIdx cursor) i)))
            WhileDo[336774]
            {
              {
                (336765 call -= cursor 1)
              }
              label _continueLabel[336772]
              (336785 'move' tmp[336769](336778 call _cond_test(336780 call >(336782 call startIdx cursor) i)))
              tmp[336769]
            }
            label _breakLabel[336773]
          }
          if(336827 call _cond_test(336802 call . this c"compressRows"))
          {
            (336813 yield(336811 call _build_tuple cursor(336809 call idx i)))
          }
          {
            (336824 yield(336822 call _build_tuple(336819 call idx i) cursor))
          }
        }
        label _continueLabel[336836]
        _indexOfInterest[336831]
        _iterator[336832]
      }
      label _breakLabel[336837]
    }
  } function CSDom[340828](?).these[336879](arg _mt[340856]:_MT[238], arg this[340854]:CSDom[340828](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown cursor[336896](336893 IfExpr (336882 call . this c"compressRows") then
      { scopeless
        (336886 call . rowRange c"low")
      } else
      { scopeless
        (336890 call . colRange c"low")
      } )
      (336899 'end of statement')
    }
    {
      unknown _indexOfInterest[336990] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[336991] "expr temp" "temp"
      (337000 'move' _iterator[336991](336998 call _getIterator(337005 call chpl_direct_range_iter 1 _nnz 1)))
      Defer
      {
        {
          (337021 call _freeIterator _iterator[336991])
        }
      }
      { scopeless type
        (337010 'move' _indexOfInterest[336990](337007 call iteratorIndex _iterator[336991]))
      }
      ForLoop[336992]
      {
        unknown i[337014] "index var" "insert auto destroy"
        (337016 'move' i[337014] _indexOfInterest[336990])
        {
          {
            unknown tmp[336922] "temp"
            (336956 'move' tmp[336922](336946 call _cond_test(336948 call <=(336950 call startIdx(336952 call + cursor 1)) i)))
            WhileDo[336927]
            {
              {
                (336918 call += cursor 1)
              }
              label _continueLabel[336925]
              (336941 'move' tmp[336922](336931 call _cond_test(336933 call <=(336935 call startIdx(336937 call + cursor 1)) i)))
              tmp[336922]
            }
            label _breakLabel[336926]
          }
          if(336984 call _cond_test(336961 call . this c"compressRows"))
          {
            { scopeless
              (336972 yield(336970 call _build_tuple cursor(336968 call idx i)))
            }
          }
          {
            { scopeless
              (336982 yield(336980 call _build_tuple(336977 call idx i) cursor))
            }
          }
        }
        label _continueLabel[336995]
        _indexOfInterest[336990]
        _iterator[336991]
      }
      label _breakLabel[336996]
    }
  } function CSDom[340828](?).these[337036](arg _mt[340860]:_MT[238], arg this[340858]:CSDom[340828](?), param arg tag[337033] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (337046 'use' DSIUtil)
    { scopeless
      const numElems[337050] "const" _nnz
      (337053 'end of statement')
    }
    { scopeless
      const numChunks[337058] "const"(337057 call _computeNumChunks numElems)
      (337061 'end of statement')
    }
    if(337088 call _cond_test debugCS)
    {
      { scopeless
        (337086 call writeln "CSDom leader: " numChunks " chunks, " numElems " elems")
      }
    }
    if(337302 call _cond_test(337095 call == numChunks 1))
    {
      { scopeless
        (337103 yield(337101 call _build_tuple this 1 numElems))
      }
    }
    {
      unknown tmpIter[337131] "expr temp" "maybe ref" "no copy" "temp"
      (337134 'move' tmpIter[337131](337116 call(337107 call . RangeChunk c"chunks")(337112 call chpl_build_bounded_range 1 numElems) numChunks))
      unknown isRngDomArr[337283] "maybe param" "temp"
      (337298 'move' isRngDomArr[337283](337296 call ||(337285 call isBoundedRange tmpIter[337131])(337294 call ||(337288 call isDomain tmpIter[337131])(337291 call isArray tmpIter[337131]))))
      if isRngDomArr[337283]
      {
        const _coforallCount[337150] "const" "end count" "temp"
        (337219 'move' _coforallCount[337150](337216 call _endCountAlloc 1))
        unknown numTasks[337151] "temp"
        (337203 'move' numTasks[337151](337199 call . tmpIter[337131] c"size"))
        (337194 call _upEndCount _coforallCount[337150] 1 numTasks[337151])
        (337191 call chpl_resetTaskSpawn numTasks[337151])
        unknown _indexOfInterest[337158] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[337159] "expr temp" "temp"
        (337168 'move' _iterator[337159](337166 call _getIterator tmpIter[337131]))
        Defer
        {
          {
            (337184 call _freeIterator _iterator[337159])
          }
        }
        { scopeless type
          (337173 'move' _indexOfInterest[337158](337170 call iteratorIndex _iterator[337159]))
        }
        ForLoop[337160]
        {
          unknown chunk[337177] "coforall index var" "index var" "insert auto destroy"
          (337179 'move' chunk[337177] _indexOfInterest[337158])
          {
            { scopeless
              (337137 yield(337139 call _build_tuple this(337142 call . chunk c"first")(337146 call . chunk c"last")))
            }
            (337153 call _downEndCount _coforallCount[337150] nil[44])
            (337152 'coforall loop')
          }
          label _continueLabel[337163]
          _indexOfInterest[337158]
          _iterator[337159]
        }
        label _breakLabel[337164]
        Defer
        {
          {
            (337206 call _endCountFree _coforallCount[337150])
          }
        }
        (337211 call _waitEndCount _coforallCount[337150] 1 numTasks[337151])
      }
      {
        const _coforallCount[337223] "const" "end count" "temp"
        (337280 'move' _coforallCount[337223](337277 call _endCountAlloc 1))
        unknown _indexOfInterest[337231] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[337232] "expr temp" "temp"
        (337241 'move' _iterator[337232](337239 call _getIterator tmpIter[337131]))
        Defer
        {
          {
            (337257 call _freeIterator _iterator[337232])
          }
        }
        { scopeless type
          (337246 'move' _indexOfInterest[337231](337243 call iteratorIndex _iterator[337232]))
        }
        ForLoop[337233]
        {
          unknown chunk[337250] "coforall index var" "index var" "insert auto destroy"
          (337252 'move' chunk[337250] _indexOfInterest[337231])
          (337264 call _upEndCount _coforallCount[337223] 1)
          {
            { scopeless
              (337129 yield(337127 call _build_tuple this(337119 call . chunk c"first")(337124 call . chunk c"last")))
            }
            (337226 call _downEndCount _coforallCount[337223] nil[44])
            (337225 'coforall loop')
          }
          label _continueLabel[337236]
          _indexOfInterest[337231]
          _iterator[337232]
        }
        label _breakLabel[337237]
        Defer
        {
          {
            (337268 call _endCountFree _coforallCount[337223])
          }
        }
        (337273 call _waitEndCount _coforallCount[337223] 1)
      }
    }
  }
  where {
    (337043 call == tag(337040 call . iterKind c"leader"))
  } function CSDom[340828](?).these[337316](arg _mt[340864]:_MT[238], arg this[340862]:CSDom[340828](?), param arg tag[337313] :
  iterKind, arg followThis[337324] :
  (337322 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown tmp[337342] "temp" followThis
      (337352 call _check_tuple_var_decl tmp[337342] 3)
      unknown followThisDom[337334](337343 call tmp[337342] 0)
      unknown startIx[337336](337346 call tmp[337342] 1)
      unknown endIx[337338](337349 call tmp[337342] 2)
      (337357 'end of statement')
    }
    if(337385 call _cond_test boundsChecking)
    {
      { scopeless
        (337383 call assert(337363 call <= startIx endIx) "CSDom follower - got nothing to iterate over")
      }
    }
    if(337417 call _cond_test(337392 call != followThisDom this))
    {
      { scopeless
        (337415 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays (CS layout)")
      }
    }
    { scopeless
      unknown cursor[337426](337425 call _private_findStart startIx)
      (337429 'end of statement')
    }
    if(337494 call _cond_test debugCS)
    {
      { scopeless
        (337492 call writeln "CSDom follower: " startIx ".." endIx "  startIdx(" cursor ")="(337491 call startIdx cursor))
      }
    }
    {
      unknown _indexOfInterest[337587] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[337588] "expr temp" "temp"
      (337597 'move' _iterator[337588](337595 call _getIterator(337602 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (337618 call _freeIterator _iterator[337588])
        }
      }
      { scopeless type
        (337607 'move' _indexOfInterest[337587](337604 call iteratorIndex _iterator[337588]))
      }
      ForLoop[337589]
      {
        unknown i[337611] "index var" "insert auto destroy"
        (337613 'move' i[337611] _indexOfInterest[337587])
        {
          {
            unknown tmp[337519] "temp"
            (337553 'move' tmp[337519](337543 call _cond_test(337545 call <=(337547 call startIdx(337549 call + cursor 1)) i)))
            WhileDo[337524]
            {
              { scopeless
                (337516 call += cursor 1)
              }
              label _continueLabel[337522]
              (337538 'move' tmp[337519](337528 call _cond_test(337530 call <=(337532 call startIdx(337534 call + cursor 1)) i)))
              tmp[337519]
            }
            label _breakLabel[337523]
          }
          if(337581 call _cond_test(337558 call . this c"compressRows"))
          {
            { scopeless
              (337569 yield(337567 call _build_tuple cursor(337565 call idx i)))
            }
          }
          {
            { scopeless
              (337579 yield(337577 call _build_tuple(337574 call idx i) cursor))
            }
          }
        }
        label _continueLabel[337592]
        _indexOfInterest[337587]
        _iterator[337588]
      }
      label _breakLabel[337593]
    }
  }
  where {
    (337332 call == tag(337329 call . iterKind c"follower"))
  } function CSDom[340828](?).these[337634](arg _mt[340868]:_MT[238], arg this[340866]:CSDom[340828](?), param arg tag[337631] :
  iterKind, arg followThis[337636]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (337664 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")
    (337668 yield 0)
  }
  where {
    (337643 call == tag(337640 call . iterKind c"follower"))
  } function CSDom[340828](?)._private_findStart[337677](arg _mt[340872]:_MT[238], arg this[340870]:CSDom[340828](?), arg startIx[337675]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (337691 return(337690 call _private_findStart startIx(337683 call . startIdxDom c"low")(337687 call . startIdxDom c"high")))
  } function CSDom[340828](?)._private_findStart[337700](arg _mt[340876]:_MT[238], arg this[340874]:CSDom[340828](?), arg startIx[337698]:_any[178](?), arg low[337702]:_any[178](?), arg high[337704]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown approx[337707] 2
      (337710 'end of statement')
    }
    { scopeless
      unknown l[337713] low
      unknown h[337717] high
      (337720 'end of statement')
    }
    {
      unknown tmp[337763] "temp"
      (337793 'move' tmp[337763](337785 call _cond_test(337787 call > h(337790 call + l approx))))
      WhileDo[337768]
      {
        {
          { scopeless
            unknown m[337735](337733 call /(337730 call + h l) 2)
            (337738 'end of statement')
          }
          if(337757 call _cond_test(337745 call <=(337743 call startIdx m) startIx))
          {
            { scopeless
              (337749 call = l m)
            }
          }
          {
            { scopeless
              (337754 call = h m)
            }
          }
        }
        label _continueLabel[337766]
        (337780 'move' tmp[337763](337772 call _cond_test(337774 call > h(337777 call + l approx))))
        tmp[337763]
      }
      label _breakLabel[337767]
    }
    { scopeless
      unknown hh[337804](337803 call min(337799 call + l approx) high)
      (337807 'end of statement')
    }
    if(337866 call _cond_test boundsChecking)
    {
      (337835 call assert(337815 call <=(337813 call startIdx l) startIx) "CSDom.findStart-1")
      (337864 call assert(337844 call < startIx(337843 call startIdx hh)) "CSDom.findStart-2")
    }
    (337871 return l)
  } function CSDom[340828](?).stopIdx[337879](arg _mt[340880]:_MT[238], arg this[340878]:CSDom[340828](?), arg i[337877]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (337891 return(337889 call -(337887 call startIdx(337884 call + i 1)) 1))
  } function CSDom[340828](?).find[337905](arg _mt[340884]:_MT[238], arg this[340882]:CSDom[340828](?), arg ind[337902] :
  (337900 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (337908 'use' Search)
    { scopeless
      const tmp[337917] "const" "temp" ind
      (337924 call _check_tuple_var_decl tmp[337917] 2)
      const row[337911] "const"(337918 call tmp[337917] 0)
      const col[337913] "const"(337921 call tmp[337917] 1)
      (337929 'end of statement')
    }
    { scopeless
      unknown ret[337935](337933 call _build_tuple bool[10] idxType)
      (337938 'end of statement')
    }
    if(338041 call _cond_test(337940 call . this c"compressRows"))
    {
      if(337986 call _cond_test(337944 call . this c"sortedIndices"))
      {
        { scopeless
          (337963 call = ret(337962 call binarySearch idx col(lo =(337955 call startIdx row))(hi =(337960 call stopIdx row))))
        }
      }
      {
        (337982 call = ret(337981 call linearSearch idx col(lo =(337974 call startIdx row))(hi =(337979 call stopIdx row))))
      }
    }
    {
      if(338035 call _cond_test(337993 call . this c"sortedIndices"))
      {
        { scopeless
          (338012 call = ret(338011 call binarySearch idx row(lo =(338004 call startIdx col))(hi =(338009 call stopIdx col))))
        }
      }
      {
        (338031 call = ret(338030 call linearSearch idx row(lo =(338023 call startIdx col))(hi =(338028 call stopIdx col))))
      }
    }
    (338046 return ret)
  } function CSDom[340828](?).dsiMember[338059](arg _mt[340888]:_MT[238], arg this[340886]:CSDom[340828](?), arg ind[338056] :
  (338054 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    if(338094 call _cond_test(338067 call(338062 call . parentDom c"contains") ind))
    {
      { scopeless
        const tmp[338077] "const" "temp"(338076 call find ind)
        (338084 call _check_tuple_var_decl tmp[338077] 2)
        const found[338068] "const"(338078 call tmp[338077] 0)
        const loc[338070] "const"(338081 call tmp[338077] 1)
        (338089 'end of statement')
      }
      (338092 return found)
    }
    (338100 return 0)
  } function CSDom[340828](?).dsiFirst[338106](arg _mt[340892]:_MT[238], arg this[340890]:CSDom[340828](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338125 call _cond_test(338110 call == _nnz 0))
    {
      { scopeless
        (338123 return(338121 call -(338113 call . parentDom c"low")(338119 call _build_tuple 1 1)))
      }
    }
    { scopeless
      const _low[338135] "const"(338132 call . nnzDom c"low")
      (338138 'end of statement')
    }
    {
      unknown _indexOfInterest[338202] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338203] "expr temp" "temp"
      (338212 'move' _iterator[338203](338210 call _getIterator startIdxDom))
      Defer
      {
        {
          (338228 call _freeIterator _iterator[338203])
        }
      }
      { scopeless type
        (338217 'move' _indexOfInterest[338202](338214 call iteratorIndex _iterator[338203]))
      }
      ForLoop[338204]
      {
        unknown i[338221] "index var" "insert auto destroy"
        (338223 'move' i[338221] _indexOfInterest[338202])
        {
          if(338197 call _cond_test(338146 call >(338144 call startIdx i) _low))
          {
            if(338190 call _cond_test(338149 call . this c"compressRows"))
            {
              { scopeless
                (338169 return(338167 call _build_tuple(338154 call - i 1)(338165 call idx(338161 call .(338158 call . idx c"_dom") c"low"))))
              }
            }
            {
              { scopeless
                (338188 return(338186 call _build_tuple(338180 call idx(338176 call .(338173 call . idx c"_dom") c"low"))(338183 call - i 1)))
              }
            }
          }
        }
        label _continueLabel[338207]
        _indexOfInterest[338202]
        _iterator[338203]
      }
      label _breakLabel[338208]
    }
    (338254 call halt "Something went wrong in dsiFirst")
    (338261 return(338259 call _build_tuple 0 0))
  } function CSDom[340828](?).dsiLast[338267](arg _mt[340896]:_MT[238], arg this[340894]:CSDom[340828](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338286 call _cond_test(338271 call == _nnz 0))
    {
      { scopeless
        (338284 return(338282 call -(338274 call . parentDom c"low")(338280 call _build_tuple 1 1)))
      }
    }
    { scopeless
      unknown _last[338302](338300 call -(338298 call(338293 call . parentDom c"low") 1) 1)
      (338305 'end of statement')
    }
    {
      unknown _indexOfInterest[338328] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338329] "expr temp" "temp"
      (338338 'move' _iterator[338329](338336 call _getIterator startIdxDom))
      Defer
      {
        {
          (338354 call _freeIterator _iterator[338329])
        }
      }
      { scopeless type
        (338343 'move' _indexOfInterest[338328](338340 call iteratorIndex _iterator[338329]))
      }
      ForLoop[338330]
      {
        unknown i[338347] "index var" "insert auto destroy"
        (338349 'move' i[338347] _indexOfInterest[338328])
        { scopeless
          if(338323 call _cond_test(338313 call >(338311 call startIdx i) _last))
          {
            { scopeless
              (338320 call = _last(338318 call - i 1))
            }
          }
        }
        label _continueLabel[338333]
        _indexOfInterest[338328]
        _iterator[338329]
      }
      label _breakLabel[338334]
    }
    if(338385 call _cond_test(338362 call . this c"compressRows"))
    {
      { scopeless
        (338373 return(338371 call _build_tuple _last(338369 call idx _nnz)))
      }
    }
    {
      { scopeless
        (338383 return(338381 call _build_tuple(338378 call idx _nnz) _last))
      }
    }
  } function CSDom[340828](?).dsiAdd[338402](arg _mt[340900]:_MT[238], arg this[340898]:CSDom[340828](?), arg ind[338399] :
  (338397 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (338407 call boundsCheck ind)
    { scopeless
      const tmp[338419] "const" "temp"(338418 call find ind)
      (338426 call _check_tuple_var_decl tmp[338419] 2)
      const found[338410] "const"(338420 call tmp[338419] 0)
      const insertPt[338412] "const"(338423 call tmp[338419] 1)
      (338431 'end of statement')
    }
    if(338436 call _cond_test found)
    {
      { scopeless
        (338434 return 0)
      }
    }
    (338443 call += _nnz 1)
    { scopeless
      unknown oldNNZDomSize[338450](338447 call . nnzDom c"size")
      (338453 'end of statement')
    }
    (338457 call _grow _nnz)
    { scopeless
      const tmp[338465] "const" "temp" ind
      (338472 call _check_tuple_var_decl tmp[338465] 2)
      const row[338459] "const"(338466 call tmp[338465] 0)
      const col[338461] "const"(338469 call tmp[338465] 1)
      (338477 'end of statement')
    }
    {
      unknown _indexOfInterest[338506] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338507] "expr temp" "temp"
      (338516 'move' _iterator[338507](338514 call _getIterator(338533 call chpl_direct_range_iter insertPt(338530 call - _nnz 1)(338526 call - 1))))
      Defer
      {
        {
          (338549 call _freeIterator _iterator[338507])
        }
      }
      { scopeless type
        (338538 'move' _indexOfInterest[338506](338535 call iteratorIndex _iterator[338507]))
      }
      ForLoop[338508]
      {
        unknown i[338542] "index var" "insert auto destroy"
        (338544 'move' i[338542] _indexOfInterest[338506])
        {
          (338502 call =(338497 call idx(338494 call + i 1))(338501 call idx i))
        }
        label _continueLabel[338511]
        _indexOfInterest[338506]
        _iterator[338507]
      }
      label _breakLabel[338512]
    }
    if(338576 call _cond_test(338557 call . this c"compressRows"))
    {
      { scopeless
        (338565 call =(338563 call idx insertPt) col)
      }
    }
    {
      { scopeless
        (338573 call =(338571 call idx insertPt) row)
      }
    }
    { scopeless
      unknown start[338591](338588 IfExpr (338583 call . this c"compressRows") then
      { scopeless
        row
      } else
      { scopeless
        col
      } )
      (338594 'end of statement')
    }
    {
      unknown _indexOfInterest[338615] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338616] "expr temp" "temp"
      (338625 'move' _iterator[338616](338623 call _getIterator(338636 call chpl_direct_range_iter(338629 call + start 1)(338633 call . startIdxDom c"high") 1)))
      Defer
      {
        {
          (338652 call _freeIterator _iterator[338616])
        }
      }
      { scopeless type
        (338641 'move' _indexOfInterest[338615](338638 call iteratorIndex _iterator[338616]))
      }
      ForLoop[338617]
      {
        unknown rc[338645] "index var" "insert auto destroy"
        (338647 'move' rc[338645] _indexOfInterest[338615])
        {
          (338611 call +=(338609 call startIdx rc) 1)
        }
        label _continueLabel[338620]
        _indexOfInterest[338615]
        _iterator[338616]
      }
      label _breakLabel[338621]
    }
    {
      unknown _indexOfInterest[338686] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338687] "expr temp" "temp"
      (338696 'move' _iterator[338687](338694 call _getIterator _arrs))
      Defer
      {
        {
          (338712 call _freeIterator _iterator[338687])
        }
      }
      { scopeless type
        (338701 'move' _indexOfInterest[338686](338698 call iteratorIndex _iterator[338687]))
      }
      ForLoop[338688]
      {
        unknown a[338705] "index var" "insert auto destroy"
        (338707 'move' a[338705] _indexOfInterest[338686])
        {
          (338683 call(338662 call . a c"sparseShiftArray")(338670 call chpl_build_bounded_range insertPt(338668 call - _nnz 1))(338681 call chpl_build_bounded_range(338675 call + oldNNZDomSize 1)(338678 call . nnzDom c"size")))
        }
        label _continueLabel[338691]
        _indexOfInterest[338686]
        _iterator[338687]
      }
      label _breakLabel[338692]
    }
    (338720 return 1)
  } function CSDom[340828](?).bulkAdd_help[338738](arg _mt[340904]:_MT[238], arg this[340902]:CSDom[340828](?), arg inds[338735] :
  (338733 call chpl__buildArrayRuntimeType unknown indsDom[338726](338731 call * rank idxType)), arg dataSorted[338741] =
  0, arg isUnique[338745] =
  0, arg addOn[338749] =
  nilLocale) : _unknown[51] "method" "primary method" "method overrides"
  {
    (338753 'import' Sort)
    if(338794 call _cond_test(338758 call != addOn nilLocale))
    {
      if(338789 call _cond_test(338765 call != addOn(338763 call chpl_localeID_to_locale(338762 '_wide_get_locale' this))))
      {
        (338786 call halt "Bulk index addition is only possible on the locale where the\n            sparse domain is created")
      }
    }
    if(338824 call _cond_test(338799 call . this c"compressRows"))
    {
      { scopeless
        (338812 call bulkAdd_prepareInds inds dataSorted isUnique(cmp =(338808 call . Sort c"defaultComparator")))
      }
    }
    {
      (338821 call bulkAdd_prepareInds inds dataSorted isUnique(cmp = _columnComparator))
    }
    if(339257 call _cond_test(338831 call == _nnz 0))
    {
      { scopeless
        const dupCount[338842] "const"(338839 IfExpr  isUnique then
        { scopeless
          0
        } else
        { scopeless
          (338838 call _countDuplicates inds)
        } )
        (338845 'end of statement')
      }
      (338855 call += _nnz(338853 call -(338849 call . inds c"size") dupCount))
      (338860 call _bulkGrow)
      { scopeless
        unknown idxIdx[338863] 1
        (338866 'end of statement')
      }
      { scopeless
        unknown prevIdx[338878](338876 call -(338868 call . parentDom c"low")(338874 call _build_tuple 1 1))
        (338881 'end of statement')
      }
      { scopeless
        unknown current[338883] idxType
        (338886 'end of statement')
      }
      if(338919 call _cond_test(338888 call . this c"compressRows"))
      {
        { scopeless
          (338902 call = current(338899 call .(338898 call(338893 call . parentDom c"dim") 0) c"low"))
        }
      }
      {
        { scopeless
          (338916 call = current(338913 call .(338912 call(338907 call . parentDom c"dim") 1) c"low"))
        }
      }
      {
        unknown _indexOfInterest[339123] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[339124] "expr temp" "temp"
        (339133 'move' _iterator[339124](339131 call _getIterator inds))
        Defer
        {
          {
            (339163 call _freeIterator _iterator[339124])
          }
        }
        { scopeless type
          (339138 'move' _indexOfInterest[339123](339135 call iteratorIndex _iterator[339124]))
        }
        ForLoop[339125]
        {
          (339143 call _check_tuple_var_decl _indexOfInterest[339123] 2)
          unknown i[339149] "index var" "insert auto destroy"
          (339151 'move' i[339149](339147 call _indexOfInterest[339123] 0))
          unknown j[339156] "index var" "insert auto destroy"
          (339158 'move' j[339156](339154 call _indexOfInterest[339123] 1))
          {
            if(338956 call _cond_test(338942 call &&(338932 call ! isUnique)(338940 call ==(338937 call _build_tuple i j) prevIdx)))
            {
              { scopeless
                continue nil[44]
              }
            }
            {
              { scopeless
                (338953 call = prevIdx(338951 call _build_tuple i j))
              }
            }
            if(339119 call _cond_test(338964 call . this c"compressRows"))
            {
              {
                unknown tmp[338991] "temp"
                (339015 'move' tmp[338991](339010 call _cond_test(339012 call != i current)))
                WhileDo[338996]
                {
                  {
                    (338973 call += current 1)
                    (338988 call =(338983 call startIdx(338980 call + current 1))(338987 call startIdx current))
                  }
                  label _continueLabel[338994]
                  (339005 'move' tmp[338991](339000 call _cond_test(339002 call != i current)))
                  tmp[338991]
                }
                label _breakLabel[338995]
              }
              (339027 call +=(339025 call startIdx(339022 call + i 1)) 1)
              (339035 call =(339033 call idx idxIdx) j)
              (339040 call += idxIdx 1)
            }
            {
              {
                unknown tmp[339067] "temp"
                (339091 'move' tmp[339067](339086 call _cond_test(339088 call != j current)))
                WhileDo[339072]
                {
                  {
                    (339049 call += current 1)
                    (339064 call =(339059 call startIdx(339056 call + current 1))(339063 call startIdx current))
                  }
                  label _continueLabel[339070]
                  (339081 'move' tmp[339067](339076 call _cond_test(339078 call != j current)))
                  tmp[339067]
                }
                label _breakLabel[339071]
              }
              (339103 call +=(339101 call startIdx(339098 call + j 1)) 1)
              (339111 call =(339109 call idx idxIdx) i)
              (339116 call += idxIdx 1)
            }
          }
          label _continueLabel[339128]
          _indexOfInterest[339123]
          _iterator[339124]
        }
        label _breakLabel[339129]
      }
      { scopeless
        const startIdxHigh[339177] "const"(339176 call startIdx(339173 call + current 1))
        (339180 'end of statement')
      }
      {
        unknown _indexOfInterest[339204] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[339205] "expr temp" "temp"
        (339214 'move' _iterator[339205](339212 call _getIterator(339228 call chpl_direct_range_iter(339218 call + current 2)(339222 call .(339224 call . startIdx c"_dom") c"high") 1)))
        Defer
        {
          {
            (339244 call _freeIterator _iterator[339205])
          }
        }
        { scopeless type
          (339233 'move' _indexOfInterest[339204](339230 call iteratorIndex _iterator[339205]))
        }
        ForLoop[339206]
        {
          unknown r[339237] "index var" "insert auto destroy"
          (339239 'move' r[339237] _indexOfInterest[339204])
          {
            (339200 call =(339198 call startIdx r) startIdxHigh)
          }
          label _continueLabel[339209]
          _indexOfInterest[339204]
          _iterator[339205]
        }
        label _breakLabel[339210]
      }
      (339255 return(339253 call - idxIdx 1))
    }
    { scopeless
      const tmp[339272] "const" "temp"(339271 call __getActualInsertPts this inds isUnique)
      (339279 call _check_tuple_var_decl tmp[339272] 2)
      const actualInsertPts[339261] "const"(339273 call tmp[339272] 0)
      const actualAddCnt[339263] "const"(339276 call tmp[339272] 1)
      (339284 'end of statement')
    }
    { scopeless
      const oldnnz[339286] "const" _nnz
      (339289 'end of statement')
    }
    (339292 call += _nnz actualAddCnt)
    (339297 call _bulkGrow)
    { scopeless
      unknown newIndIdx[339303](339300 call . indsDom c"high")
      (339306 'end of statement')
    }
    { scopeless
      unknown oldIndIdx[339308] oldnnz
      (339311 'end of statement')
    }
    { scopeless
      unknown newLoc[339316](339315 call actualInsertPts newIndIdx)
      (339319 'end of statement')
    }
    {
      unknown tmp[339358] "temp"
      (339386 'move' tmp[339358](339379 call _cond_test(339381 call == newLoc(339384 call - 1))))
      WhileDo[339363]
      {
        {
          (339328 call -= newIndIdx 1)
          if(339345 call _cond_test(339340 call == newIndIdx(339338 call -(339334 call . indsDom c"low") 1)))
          {
            { scopeless
              break nil[44]
            }
          }
          (339355 call = newLoc(339354 call actualInsertPts newIndIdx))
        }
        label _continueLabel[339361]
        (339374 'move' tmp[339358](339367 call _cond_test(339369 call == newLoc(339372 call - 1))))
        tmp[339358]
      }
      label _breakLabel[339362]
    }
    { scopeless
      unknown arrShiftMap[339402](339400 call chpl__buildArrayRuntimeType(339398 call chpl__ensureDomainExpr(339394 call chpl__buildDomainExpr(339391 call chpl_build_bounded_range 1 oldnnz))) int[13])
      (339405 'end of statement')
    }
    {
      unknown _indexOfInterest[339621] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339622] "expr temp" "temp"
      (339631 'move' _iterator[339622](339629 call _getIterator(339642 call chpl_direct_range_iter 1 _nnz(339638 call - 1))))
      Defer
      {
        {
          (339658 call _freeIterator _iterator[339622])
        }
      }
      { scopeless type
        (339647 'move' _indexOfInterest[339621](339644 call iteratorIndex _iterator[339622]))
      }
      ForLoop[339623]
      {
        unknown i[339651] "index var" "insert auto destroy"
        (339653 'move' i[339651] _indexOfInterest[339621])
        {
          if(339615 call _cond_test(339424 call &&(339418 call >= oldIndIdx 1)(339422 call > i newLoc)))
          {
            (339434 call =(339429 call idx i)(339433 call idx oldIndIdx))
            (339443 call =(339441 call arrShiftMap oldIndIdx) i)
            (339448 call -= oldIndIdx 1)
          }
          {
            { scopeless
              if(339610 call _cond_test(339462 call &&(339456 call >= newIndIdx(339453 call . indsDom c"low"))(339460 call == i newLoc)))
              {
                if(339498 call _cond_test(339465 call . this c"compressRows"))
                {
                  (339479 call =(339471 call idx i)(339478 call(339475 call inds newIndIdx) 1))
                }
                {
                  (339494 call =(339486 call idx i)(339493 call(339490 call inds newIndIdx) 0))
                }
                (339505 call -= newIndIdx 1)
                if(339530 call _cond_test(339513 call >= newIndIdx(339510 call . indsDom c"low")))
                {
                  { scopeless
                    (339520 call = newLoc(339519 call actualInsertPts newIndIdx))
                  }
                }
                {
                  { scopeless
                    (339527 call = newLoc(339525 call - 2))
                  }
                }
                {
                  unknown tmp[339574] "temp"
                  (339602 'move' tmp[339574](339595 call _cond_test(339597 call == newLoc(339600 call - 1))))
                  WhileDo[339579]
                  {
                    {
                      (339544 call -= newIndIdx 1)
                      if(339561 call _cond_test(339556 call == newIndIdx(339554 call -(339550 call . indsDom c"low") 1)))
                      {
                        { scopeless
                          break nil[44]
                        }
                      }
                      (339571 call = newLoc(339570 call actualInsertPts newIndIdx))
                    }
                    label _continueLabel[339577]
                    (339590 'move' tmp[339574](339583 call _cond_test(339585 call == newLoc(339588 call - 1))))
                    tmp[339574]
                  }
                  label _breakLabel[339578]
                }
              }
              {
                { scopeless
                  (339608 call halt "Something went wrong")
                }
              }
            }
          }
        }
        label _continueLabel[339626]
        _indexOfInterest[339621]
        _iterator[339622]
      }
      label _breakLabel[339627]
    }
    { scopeless
      unknown prevCursor[339692](339689 IfExpr (339666 call . this c"compressRows") then
      { scopeless
        (339676 call .(339675 call(339670 call . parentDom c"dim") 0) c"low")
      } else
      { scopeless
        (339686 call .(339685 call(339680 call . parentDom c"dim") 1) c"low")
      } )
      (339695 'end of statement')
    }
    { scopeless
      unknown cursor[339697] int[13]
      (339700 'end of statement')
    }
    { scopeless
      unknown cursorCnt[339702] 0
      (339705 'end of statement')
    }
    {
      unknown _indexOfInterest[339862] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339863] "expr temp" "temp"
      (339877 'move' _iterator[339863](339714 call _build_tuple(339872 call _getIterator inds)(339875 call _getIterator actualInsertPts)))
      Defer
      {
        {
          (339907 call _freeIterator _iterator[339863])
        }
      }
      { scopeless type
        (339882 'move' _indexOfInterest[339862](339879 call iteratorIndex _iterator[339863]))
      }
      ForLoop[339864]
      {
        (339887 call _check_tuple_var_decl _indexOfInterest[339862] 2)
        unknown ind[339893] "index var" "insert auto destroy"
        (339895 'move' ind[339893](339891 call _indexOfInterest[339862] 0))
        unknown p[339900] "index var" "insert auto destroy"
        (339902 'move' p[339900](339898 call _indexOfInterest[339862] 1))
        {
          if(339724 call _cond_test(339719 call == p(339717 call - 1)))
          {
            { scopeless
              continue nil[44]
            }
          }
          if(339752 call _cond_test(339731 call . this c"compressRows"))
          {
            (339739 call = cursor(339738 call ind 0))
          }
          {
            (339748 call = cursor(339747 call ind 1))
          }
          if(339857 call _cond_test(339758 call == cursor prevCursor))
          {
            { scopeless
              (339762 call += cursorCnt 1)
            }
          }
          {
            (339773 call +=(339771 call startIdx(339768 call + prevCursor 1)) cursorCnt)
            if(339843 call _cond_test(339782 call >(339779 call - cursor prevCursor) 1))
            {
              {
                unknown _indexOfInterest[339801] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[339802] "expr temp" "temp"
                (339811 'move' _iterator[339802](339809 call _getIterator(339819 call chpl_direct_range_iter(339815 call + prevCursor 2) cursor 1)))
                Defer
                {
                  {
                    (339835 call _freeIterator _iterator[339802])
                  }
                }
                { scopeless type
                  (339824 'move' _indexOfInterest[339801](339821 call iteratorIndex _iterator[339802]))
                }
                ForLoop[339803]
                {
                  unknown i[339828] "index var" "insert auto destroy"
                  (339830 'move' i[339828] _indexOfInterest[339801])
                  {
                    (339797 call +=(339795 call startIdx i) cursorCnt)
                  }
                  label _continueLabel[339806]
                  _indexOfInterest[339801]
                  _iterator[339802]
                }
                label _breakLabel[339807]
              }
            }
            (339849 call += cursorCnt 1)
            (339854 call = prevCursor cursor)
          }
        }
        label _continueLabel[339867]
        _indexOfInterest[339862]
        _iterator[339863]
      }
      label _breakLabel[339868]
    }
    {
      unknown _indexOfInterest[339934] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339935] "expr temp" "temp"
      (339944 'move' _iterator[339935](339942 call _getIterator(339955 call chpl_direct_range_iter(339948 call + prevCursor 1)(339952 call . startIdxDom c"high") 1)))
      Defer
      {
        {
          (339971 call _freeIterator _iterator[339935])
        }
      }
      { scopeless type
        (339960 'move' _indexOfInterest[339934](339957 call iteratorIndex _iterator[339935]))
      }
      ForLoop[339936]
      {
        unknown i[339964] "index var" "insert auto destroy"
        (339966 'move' i[339964] _indexOfInterest[339934])
        {
          (339930 call +=(339928 call startIdx i) cursorCnt)
        }
        label _continueLabel[339939]
        _indexOfInterest[339934]
        _iterator[339935]
      }
      label _breakLabel[339940]
    }
    {
      unknown _indexOfInterest[339989] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339990] "expr temp" "temp"
      (339999 'move' _iterator[339990](339997 call _getIterator _arrs))
      Defer
      {
        {
          (340015 call _freeIterator _iterator[339990])
        }
      }
      { scopeless type
        (340004 'move' _indexOfInterest[339989](340001 call iteratorIndex _iterator[339990]))
      }
      ForLoop[339991]
      {
        unknown a[340008] "index var" "insert auto destroy"
        (340010 'move' a[340008] _indexOfInterest[339989])
        { scopeless
          (339987 call(339981 call . a c"sparseBulkShiftArray") arrShiftMap oldnnz)
        }
        label _continueLabel[339994]
        _indexOfInterest[339989]
        _iterator[339990]
      }
      label _breakLabel[339995]
    }
    (340023 return actualAddCnt)
  } function CSDom[340828](?).dsiRemove[340036](arg _mt[340908]:_MT[238], arg this[340906]:CSDom[340828](?), arg ind[340033] :
  (340031 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[340047] "const" "temp"(340046 call find ind)
      (340054 call _check_tuple_var_decl tmp[340047] 2)
      const found[340038] "const"(340048 call tmp[340047] 0)
      const insertPt[340040] "const"(340051 call tmp[340047] 1)
      (340059 'end of statement')
    }
    if(340067 call _cond_test(340062 call ! found))
    {
      { scopeless
        (340065 return 0)
      }
    }
    (340074 call -= _nnz 1)
    (340080 call _shrink _nnz)
    { scopeless
      const tmp[340088] "const" "temp" ind
      (340095 call _check_tuple_var_decl tmp[340088] 2)
      const row[340082] "const"(340089 call tmp[340088] 0)
      const col[340084] "const"(340092 call tmp[340088] 1)
      (340100 'end of statement')
    }
    {
      unknown _indexOfInterest[340121] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340122] "expr temp" "temp"
      (340131 'move' _iterator[340122](340129 call _getIterator(340136 call chpl_direct_range_iter insertPt _nnz 1)))
      Defer
      {
        {
          (340152 call _freeIterator _iterator[340122])
        }
      }
      { scopeless type
        (340141 'move' _indexOfInterest[340121](340138 call iteratorIndex _iterator[340122]))
      }
      ForLoop[340123]
      {
        unknown i[340145] "index var" "insert auto destroy"
        (340147 'move' i[340145] _indexOfInterest[340121])
        {
          (340117 call =(340109 call idx i)(340116 call idx(340113 call + i 1)))
        }
        label _continueLabel[340126]
        _indexOfInterest[340121]
        _iterator[340122]
      }
      label _breakLabel[340127]
    }
    if(340293 call _cond_test(340160 call . this c"compressRows"))
    {
      {
        unknown _indexOfInterest[340183] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340184] "expr temp" "temp"
        (340193 'move' _iterator[340184](340191 call _getIterator(340204 call chpl_direct_range_iter(340197 call + row 1)(340201 call . startIdxDom c"high") 1)))
        Defer
        {
          {
            (340220 call _freeIterator _iterator[340184])
          }
        }
        { scopeless type
          (340209 'move' _indexOfInterest[340183](340206 call iteratorIndex _iterator[340184]))
        }
        ForLoop[340185]
        {
          unknown r[340213] "index var" "insert auto destroy"
          (340215 'move' r[340213] _indexOfInterest[340183])
          {
            (340179 call -=(340177 call startIdx r) 1)
          }
          label _continueLabel[340188]
          _indexOfInterest[340183]
          _iterator[340184]
        }
        label _breakLabel[340189]
      }
    }
    {
      {
        unknown _indexOfInterest[340248] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340249] "expr temp" "temp"
        (340258 'move' _iterator[340249](340256 call _getIterator(340269 call chpl_direct_range_iter(340262 call + col 1)(340266 call . startIdxDom c"high") 1)))
        Defer
        {
          {
            (340285 call _freeIterator _iterator[340249])
          }
        }
        { scopeless type
          (340274 'move' _indexOfInterest[340248](340271 call iteratorIndex _iterator[340249]))
        }
        ForLoop[340250]
        {
          unknown r[340278] "index var" "insert auto destroy"
          (340280 'move' r[340278] _indexOfInterest[340248])
          {
            (340244 call -=(340242 call startIdx r) 1)
          }
          label _continueLabel[340253]
          _indexOfInterest[340248]
          _iterator[340249]
        }
        label _breakLabel[340254]
      }
    }
    {
      unknown _indexOfInterest[340314] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340315] "expr temp" "temp"
      (340324 'move' _iterator[340315](340322 call _getIterator _arrs))
      Defer
      {
        {
          (340340 call _freeIterator _iterator[340315])
        }
      }
      { scopeless type
        (340329 'move' _indexOfInterest[340314](340326 call iteratorIndex _iterator[340315]))
      }
      ForLoop[340316]
      {
        unknown a[340333] "index var" "insert auto destroy"
        (340335 'move' a[340333] _indexOfInterest[340314])
        {
          (340311 call(340300 call . a c"sparseShiftArrayBack")(340308 call chpl_build_bounded_range insertPt(340306 call - _nnz 1)))
        }
        label _continueLabel[340319]
        _indexOfInterest[340314]
        _iterator[340315]
      }
      label _breakLabel[340320]
    }
    (340348 return 1)
  } function CSDom[340828](?).dsiClear[340354](arg _mt[340912]:_MT[238], arg this[340910]:CSDom[340828](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (340358 call = _nnz 0)
    (340364 call = startIdx 1)
  } function CSDom[340828](?).dimIter[340373](arg _mt[340916]:_MT[238], arg this[340914]:CSDom[340828](?), param arg d[340371]:_any[178](?), arg ind[340375]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(340447 call _cond_test(340385 call &&(340379 call != d 1)(340382 call . this c"compressRows")))
    {
      (340406 call compilerError "dimIter(0, ..) not supported on CS(compressRows=true) domains")
    }
    {
      { scopeless
        if(340443 call _cond_test(340419 call &&(340411 call != d 0)(340417 call !(340414 call . this c"compressRows"))))
        {
          (340440 call compilerError "dimIter(1, ..) not supported on CS(compressRows=false) domains")
        }
      }
    }
    {
      unknown _indexOfInterest[340470] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340471] "expr temp" "temp"
      (340480 'move' _iterator[340471](340478 call _getIterator(340489 call chpl_direct_range_iter(340484 call startIdx ind)(340487 call stopIdx ind) 1)))
      Defer
      {
        {
          (340505 call _freeIterator _iterator[340471])
        }
      }
      { scopeless type
        (340494 'move' _indexOfInterest[340470](340491 call iteratorIndex _iterator[340471]))
      }
      ForLoop[340472]
      {
        unknown i[340498] "index var" "insert auto destroy"
        (340500 'move' i[340498] _indexOfInterest[340470])
        { scopeless
          (340468 yield(340467 call idx i))
        }
        label _continueLabel[340475]
        _indexOfInterest[340470]
        _iterator[340471]
      }
      label _breakLabel[340476]
    }
  } function CSDom[340828](?).dsiSerialWrite[340518](arg _mt[340920]:_MT[238], arg this[340918]:CSDom[340828](?), arg f[340516]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (340522 call <~> f "{\n")
    if(340816 call _cond_test(340527 call . this c"compressRows"))
    {
      {
        unknown _indexOfInterest[340639] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340640] "expr temp" "temp"
        (340649 'move' _iterator[340640](340647 call _getIterator rowRange))
        Defer
        {
          {
            (340665 call _freeIterator _iterator[340640])
          }
        }
        { scopeless type
          (340654 'move' _indexOfInterest[340639](340651 call iteratorIndex _iterator[340640]))
        }
        ForLoop[340641]
        {
          unknown r[340658] "index var" "insert auto destroy"
          (340660 'move' r[340658] _indexOfInterest[340639])
          {
            { scopeless
              const lo[340536] "const"(340535 call startIdx r)
              const hi[340543] "const"(340542 call stopIdx r)
              (340546 'end of statement')
            }
            {
              unknown _indexOfInterest[340601] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[340602] "expr temp" "temp"
              (340611 'move' _iterator[340602](340609 call _getIterator(340616 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (340632 call _freeIterator _iterator[340602])
                }
              }
              { scopeless type
                (340621 'move' _indexOfInterest[340601](340618 call iteratorIndex _iterator[340602]))
              }
              ForLoop[340603]
              {
                unknown c[340625] "index var" "insert auto destroy"
                (340627 'move' c[340625] _indexOfInterest[340601])
                {
                  (340597 call <~>(340570 call <~>(340567 call <~>(340561 call <~>(340558 call <~>(340555 call <~> f " (") r) ", ")(340566 call idx c)) ")")(340594 IfExpr (340574 call == c hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    ""
                  } ))
                }
                label _continueLabel[340606]
                _indexOfInterest[340601]
                _iterator[340602]
              }
              label _breakLabel[340607]
            }
          }
          label _continueLabel[340644]
          _indexOfInterest[340639]
          _iterator[340640]
        }
        label _breakLabel[340645]
      }
    }
    {
      {
        unknown _indexOfInterest[340782] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340783] "expr temp" "temp"
        (340792 'move' _iterator[340783](340790 call _getIterator colRange))
        Defer
        {
          {
            (340808 call _freeIterator _iterator[340783])
          }
        }
        { scopeless type
          (340797 'move' _indexOfInterest[340782](340794 call iteratorIndex _iterator[340783]))
        }
        ForLoop[340784]
        {
          unknown c[340801] "index var" "insert auto destroy"
          (340803 'move' c[340801] _indexOfInterest[340782])
          {
            { scopeless
              const lo[340679] "const"(340678 call startIdx c)
              const hi[340686] "const"(340685 call stopIdx c)
              (340689 'end of statement')
            }
            {
              unknown _indexOfInterest[340744] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[340745] "expr temp" "temp"
              (340754 'move' _iterator[340745](340752 call _getIterator(340759 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (340775 call _freeIterator _iterator[340745])
                }
              }
              { scopeless type
                (340764 'move' _indexOfInterest[340744](340761 call iteratorIndex _iterator[340745]))
              }
              ForLoop[340746]
              {
                unknown r[340768] "index var" "insert auto destroy"
                (340770 'move' r[340768] _indexOfInterest[340744])
                {
                  (340740 call <~>(340713 call <~>(340710 call <~>(340707 call <~>(340704 call <~>(340698 call <~> f " (")(340703 call idx r)) ", ") c) ")")(340737 IfExpr (340717 call == r hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    ""
                  } ))
                }
                label _continueLabel[340749]
                _indexOfInterest[340744]
                _iterator[340745]
              }
              label _breakLabel[340750]
            }
          }
          label _continueLabel[340787]
          _indexOfInterest[340782]
          _iterator[340783]
        }
        label _breakLabel[340788]
      }
    }
    (340822 call <~> f "}\n")
  } BaseSparseDomImpl
  type CSArr[341756] function CSArr[341756].init[340930](arg _mt[341760]:_MT[238], arg this[341758]:CSArr[341756], arg eltType[340928]:_any[178](?), param arg rank[340933] :
  int[13], arg idxType[340936]:_any[178](?), arg dom[340938]:_any[178](?), param arg initElts[340941] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (340954 call(340945 call . super c"init") eltType rank idxType dom initElts)
  } function CSArr[341756].dsiAccess[340968](arg _mt[341764]:_MT[238], arg this[341762]:CSArr[341756], arg ind[340965] :
  (340963 call * rank idxType)) ref : _unknown[51] "method" "primary method"
  {
    (340976 call(340971 call . dom c"boundsCheck") ind)
    { scopeless
      const tmp[340991] "const" "temp"(340990 call(340985 call . dom c"find") ind)
      (340998 call _check_tuple_var_decl tmp[340991] 2)
      const found[340979] "const"(340992 call tmp[340991] 0)
      const loc[340981] "const"(340995 call tmp[340991] 1)
      (341003 'end of statement')
    }
    if(341017 call _cond_test found)
    {
      { scopeless
        (341009 return(341008 call data loc))
      }
    }
    {
      { scopeless
        (341015 call halt "attempting to assign a 'zero' value in a sparse array: " ind)
      }
    }
  } function CSArr[341756].dsiAccess[341034](arg _mt[341768]:_MT[238], arg this[341766]:CSArr[341756], arg ind[341031] :
  (341029 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (341046 call(341041 call . dom c"boundsCheck") ind)
    { scopeless
      const tmp[341061] "const" "temp"(341060 call(341055 call . dom c"find") ind)
      (341068 call _check_tuple_var_decl tmp[341061] 2)
      const found[341049] "const"(341062 call tmp[341061] 0)
      const loc[341051] "const"(341065 call tmp[341061] 1)
      (341073 'end of statement')
    }
    if(341084 call _cond_test found)
    {
      { scopeless
        (341079 return(341078 call data loc))
      }
    }
    {
      { scopeless
        (341082 return irv)
      }
    }
  }
  where {
    (341039 call shouldReturnRvalueByValue eltType)
  } function CSArr[341756].dsiAccess[341102](arg _mt[341772]:_MT[238], arg this[341770]:CSArr[341756], arg ind[341099] :
  (341097 call * rank idxType)) const ref : _unknown[51] "method" "primary method"
  {
    (341114 call(341109 call . dom c"boundsCheck") ind)
    { scopeless
      const tmp[341129] "const" "temp"(341128 call(341123 call . dom c"find") ind)
      (341136 call _check_tuple_var_decl tmp[341129] 2)
      const found[341117] "const"(341130 call tmp[341129] 0)
      const loc[341119] "const"(341133 call tmp[341129] 1)
      (341141 'end of statement')
    }
    if(341152 call _cond_test found)
    {
      { scopeless
        (341147 return(341146 call data loc))
      }
    }
    {
      { scopeless
        (341150 return irv)
      }
    }
  }
  where {
    (341107 call shouldReturnRvalueByConstRef eltType)
  } function CSArr[341756].these[341163](arg _mt[341776]:_MT[238], arg this[341774]:CSArr[341756]) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[341179] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341180] "expr temp" "temp"
      (341189 'move' _iterator[341180](341187 call _getIterator(341197 call chpl_direct_range_iter 1(341194 call . dom c"_nnz") 1)))
      Defer
      {
        {
          (341213 call _freeIterator _iterator[341180])
        }
      }
      { scopeless type
        (341202 'move' _indexOfInterest[341179](341199 call iteratorIndex _iterator[341180]))
      }
      ForLoop[341181]
      {
        unknown i[341206] "index var" "insert auto destroy"
        (341208 'move' i[341206] _indexOfInterest[341179])
        { scopeless
          (341177 yield(341176 call data i))
        }
        label _continueLabel[341184]
        _indexOfInterest[341179]
        _iterator[341180]
      }
      label _breakLabel[341185]
    }
  } function CSArr[341756].these[341229](arg _mt[341780]:_MT[238], arg this[341778]:CSArr[341756], param arg tag[341226] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[341249] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341250] "expr temp" "temp"
      (341259 'move' _iterator[341250](341257 call _getIterator(341245 call(341240 call . dom c"these") tag)))
      Defer
      {
        {
          (341276 call _freeIterator _iterator[341250])
        }
      }
      { scopeless type
        (341265 'move' _indexOfInterest[341249](341262 call iteratorIndex _iterator[341250]))
      }
      ForLoop[341251]
      {
        unknown followThis[341269] "index var" "insert auto destroy"
        (341271 'move' followThis[341269] _indexOfInterest[341249])
        { scopeless
          (341247 yield followThis)
        }
        label _continueLabel[341254]
        _indexOfInterest[341249]
        _iterator[341250]
      }
      label _breakLabel[341255]
    }
  }
  where {
    (341236 call == tag(341233 call . iterKind c"leader"))
  } function CSArr[341756].these[341293](arg _mt[341784]:_MT[238], arg this[341782]:CSArr[341756], param arg tag[341290] :
  iterKind, arg followThis[341301] :
  (341299 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown tmp[341319] "temp" followThis
      (341329 call _check_tuple_var_decl tmp[341319] 3)
      unknown followThisDom[341311](341320 call tmp[341319] 0)
      unknown startIx[341313](341323 call tmp[341319] 1)
      unknown endIx[341315](341326 call tmp[341319] 2)
      (341334 'end of statement')
    }
    if(341364 call _cond_test(341341 call != followThisDom(341338 call . this c"dom")))
    {
      { scopeless
        (341362 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays (CS layout)")
      }
    }
    if(341394 call _cond_test debugCS)
    {
      { scopeless
        (341392 call writeln "CSArr follower: " startIx ".." endIx)
      }
    }
    {
      unknown _indexOfInterest[341410] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341411] "expr temp" "temp"
      (341420 'move' _iterator[341411](341418 call _getIterator(341425 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (341441 call _freeIterator _iterator[341411])
        }
      }
      { scopeless type
        (341430 'move' _indexOfInterest[341410](341427 call iteratorIndex _iterator[341411]))
      }
      ForLoop[341412]
      {
        unknown i[341434] "index var" "insert auto destroy"
        (341436 'move' i[341434] _indexOfInterest[341410])
        { scopeless
          (341408 yield(341407 call data i))
        }
        label _continueLabel[341415]
        _indexOfInterest[341410]
        _iterator[341411]
      }
      label _breakLabel[341416]
    }
  }
  where {
    (341309 call == tag(341306 call . iterKind c"follower"))
  } function CSArr[341756].these[341457](arg _mt[341788]:_MT[238], arg this[341786]:CSArr[341756], param arg tag[341454] :
  iterKind, arg followThis[341459]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (341471 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")
    (341475 yield 0)
  }
  where {
    (341466 call == tag(341463 call . iterKind c"follower"))
  } function CSArr[341756].dsiSerialWrite[341484](arg _mt[341792]:_MT[238], arg this[341790]:CSArr[341756], arg f[341482]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(341748 call _cond_test(341487 call . dom c"compressRows"))
    {
      {
        unknown _indexOfInterest[341585] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[341586] "expr temp" "temp"
        (341595 'move' _iterator[341586](341593 call _getIterator(341494 call . dom c"rowRange")))
        Defer
        {
          {
            (341612 call _freeIterator _iterator[341586])
          }
        }
        { scopeless type
          (341601 'move' _indexOfInterest[341585](341598 call iteratorIndex _iterator[341586]))
        }
        ForLoop[341587]
        {
          unknown r[341605] "index var" "insert auto destroy"
          (341607 'move' r[341605] _indexOfInterest[341585])
          {
            { scopeless
              const lo[341504] "const"(341503 call(341498 call . dom c"startIdx") r)
              (341507 'end of statement')
            }
            { scopeless
              const hi[341518] "const"(341517 call(341512 call . dom c"stopIdx") r)
              (341521 'end of statement')
            }
            {
              unknown _indexOfInterest[341547] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[341548] "expr temp" "temp"
              (341557 'move' _iterator[341548](341555 call _getIterator(341562 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (341578 call _freeIterator _iterator[341548])
                }
              }
              { scopeless type
                (341567 'move' _indexOfInterest[341547](341564 call iteratorIndex _iterator[341548]))
              }
              ForLoop[341549]
              {
                unknown c[341571] "index var" "insert auto destroy"
                (341573 'move' c[341571] _indexOfInterest[341547])
                {
                  (341543 call <~>(341532 call <~> f(341531 call data c))(341540 IfExpr (341536 call == c hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    " "
                  } ))
                }
                label _continueLabel[341552]
                _indexOfInterest[341547]
                _iterator[341548]
              }
              label _breakLabel[341553]
            }
          }
          label _continueLabel[341590]
          _indexOfInterest[341585]
          _iterator[341586]
        }
        label _breakLabel[341591]
      }
    }
    {
      {
        unknown _indexOfInterest[341713] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[341714] "expr temp" "temp"
        (341723 'move' _iterator[341714](341721 call _getIterator(341624 call . dom c"colRange")))
        Defer
        {
          {
            (341740 call _freeIterator _iterator[341714])
          }
        }
        { scopeless type
          (341729 'move' _indexOfInterest[341713](341726 call iteratorIndex _iterator[341714]))
        }
        ForLoop[341715]
        {
          unknown c[341733] "index var" "insert auto destroy"
          (341735 'move' c[341733] _indexOfInterest[341713])
          {
            { scopeless
              const lo[341634] "const"(341633 call(341628 call . dom c"startIdx") c)
              (341637 'end of statement')
            }
            { scopeless
              const hi[341646] "const"(341645 call(341640 call . dom c"stopIdx") c)
              (341649 'end of statement')
            }
            {
              unknown _indexOfInterest[341675] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[341676] "expr temp" "temp"
              (341685 'move' _iterator[341676](341683 call _getIterator(341690 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (341706 call _freeIterator _iterator[341676])
                }
              }
              { scopeless type
                (341695 'move' _indexOfInterest[341675](341692 call iteratorIndex _iterator[341676]))
              }
              ForLoop[341677]
              {
                unknown r[341699] "index var" "insert auto destroy"
                (341701 'move' r[341699] _indexOfInterest[341675])
                {
                  (341671 call <~>(341660 call <~> f(341659 call data r))(341668 IfExpr (341664 call == r hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    " "
                  } ))
                }
                label _continueLabel[341680]
                _indexOfInterest[341675]
                _iterator[341676]
              }
              label _breakLabel[341681]
            }
          }
          label _continueLabel[341718]
          _indexOfInterest[341713]
          _iterator[341714]
        }
        label _breakLabel[341719]
      }
    }
  } BaseSparseArrImpl
}