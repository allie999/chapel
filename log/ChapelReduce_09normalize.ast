AST dump for ChapelReduce after pass normalize.
Module use list: ChapelStandard ChapelLocks Reflection 

{
  function chpl__init_ChapelReduce[416070]() : void[4] "insert line file info" "module init"
  {
    (512788 return _void[55])
  }
  function chpl__scanStateResTypesMatch[81790](arg op[81788]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512249] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[492039] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628670] "expr temp" "maybe param" "maybe type" "temp"
      (628673 'move' call_tmp[628670](81799 call(81795 call (partial) generate _mt[243] op[81788])))
      (492043 'move' call_type_tmp[492039](81800 'typeof' call_tmp[628670]))
    }
    unknown resType[81801] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[492039]
    (541603 'move' resType[81801] call_type_tmp[492039])
    (476796 'end of statement')
    { scopeless type
      unknown call_type_tmp[492045] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628677] "expr temp" "maybe param" "maybe type" "temp"
      (628680 'move' call_tmp[628677](81808 call identity _mt[243] op[81788]))
      (492049 'move' call_type_tmp[492045](81811 'typeof' call_tmp[628677]))
    }
    unknown stateType[81812] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[492045]
    (541606 'move' stateType[81812] call_type_tmp[492045])
    (476797 'end of statement')
    unknown call_tmp[628682] "expr temp" "maybe param" "maybe type" "temp"
    (628685 'move' call_tmp[628682](81817 call == resType[81801] stateType[81812]))
    (512254 'move' ret[512249](512253 'deref' call_tmp[628682]))
    gotoReturn _end_chpl__scanStateResTypesMatch[512247] _end_chpl__scanStateResTypesMatch[512247]
    (476798 'end of statement' resType[81801] stateType[81812])
    label _end_chpl__scanStateResTypesMatch[512247]
    (512251 return ret[512249])
  }
  function chpl__scanIteratorZip[81827](arg op[81825]:_any[178](?), arg data[81829]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512260] "RVV" "temp"
    (81850 call compilerWarning "scan has been serialized (see issue #12482)")
    (476801 'end of statement')
    unknown arr[81868] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter1[581625](arg iterator[581627]:_any[178](?), arg op[581663]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[581674] "RVV" "temp"
      {
        unknown _indexOfInterest[581632] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[581633] "expr temp" "temp"
        (581642 'move' _iterator[581633](581640 call _getIteratorZip iterator[581627]))
        Defer
        {
          {
            (581656 call _freeIterator _iterator[581633])
          }
        }
        { scopeless type
          (581647 'move' _indexOfInterest[581632](581644 call iteratorIndex _iterator[581633]))
        }
        ForLoop[581634] for-expr
        {
          unknown d[81866] "index var" "insert auto destroy" "no doc"
          (581667 'end of statement')
          (581651 'move' d[81866] _indexOfInterest[581632])
          (581668 'end of statement' d[81866])
          {
            {
              unknown yret[581678] "YVV" "temp"
              unknown call_tmp[581685] "expr temp" "maybe param" "maybe type" "temp"
              (581688 'move' call_tmp[581685](81862 call chpl__accumgen op[581663] d[81866]))
              (581681 'move' yret[581678](581680 'deref' call_tmp[581685]))
              (581683 yield yret[581678])
              (581670 'end of statement' d[81866])
            }
          }
          label _continueLabel[581637]
          _indexOfInterest[581632]
          _iterator[581633]
        }
        label _breakLabel[581638]
      }
      (581676 return ret[581674])
    }
    function chpl__forexpr1[581605](arg iterExpr[581608]:_any[178](?), arg op[581612]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[581693] "RVV" "temp"
      unknown _iterator[581615] "expr temp" "maybe ref" "temp"
      (581617 'move' _iterator[581615] iterExpr[581608])
      unknown call_tmp[581700] "expr temp" "maybe param" "maybe type" "temp"
      (581703 'move' call_tmp[581700](581620 call chpl__loopexpr_iter1 _iterator[581615] op[581612]))
      (581698 'move' ret[581693](581697 'deref' call_tmp[581700]))
      (581695 return ret[581693])
    }
    unknown call_tmp[581705] "expr temp" "maybe param" "maybe type" "temp"
    (581708 'move' call_tmp[581705](81857 call _build_tuple(81855 'expand_tuple' data[81829])))
    unknown call_tmp[581710] "maybe param" "maybe type" "temp"
    (581713 'move' call_tmp[581710](581610 call chpl__forexpr1 call_tmp[581705] op[81825]))
    (581718 'iterator record set shape' call_tmp[581710](581716 'expand_tuple' data[81829]) 1)
    (541608 'init var' arr[81868] call_tmp[581710])
    (81871 'end of statement')
    (81874 call chpl__delete op[81825])
    (476802 'end of statement')
    (512265 'move' ret[512260](512264 'deref' arr[81868]))
    gotoReturn _end_chpl__scanIteratorZip[512258] _end_chpl__scanIteratorZip[512258]
    (476803 'end of statement' arr[81868])
    label _end_chpl__scanIteratorZip[512258]
    (512262 return ret[512260])
  }
  function chpl__scanIterator[81886](arg op[81884]:_any[178](?), arg data[81888]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512271] "RVV" "temp"
    unknown tmp[421766] "maybe param" "temp"
    (421777 'move' tmp[421766](81897 call isArray data[81888]))
    unknown call_tmp[628687] "expr temp" "maybe param" "maybe type" "temp"
    (628690 'move' call_tmp[628687](421779 call _cond_invalid tmp[421766]))
    if call_tmp[628687]
    {
      (421782 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown supportsPar[81922] "dead at end of block" "param"
    unknown tmp[560178] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560179] "maybe param" "temp"
    unknown call_tmp[628692] "expr temp" "maybe param" "maybe type" "temp"
    (628695 'move' call_tmp[628692](421767 call isTrue tmp[421766]))
    (560184 'move' tmp[560179](560182 call _cond_test call_tmp[628692]))
    if tmp[560179]
    {
      unknown tmp[560186] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628697] "expr temp" "maybe param" "maybe type" "temp"
      (628700 'move' call_tmp[628697](81919 call canResolveMethod data[81888] "_scan" op[81884]))
      (560188 'move' tmp[560186](421770 call isTrue call_tmp[628697]))
      (560193 'move' tmp[560178](560190 '_paramFoldLogical' tmp[560179] tmp[560186]))
    }
    {
      (560198 'move' tmp[560178](560195 '_paramFoldLogical' tmp[560179] 0))
    }
    (541610 'init var' supportsPar[81922] tmp[560178])
    (81925 'end of statement')
    unknown call_tmp[628702] "expr temp" "maybe param" "maybe type" "temp"
    (628705 'move' call_tmp[628702](81966 call _cond_test supportsPar[81922]))
    if call_tmp[628702]
    {
      unknown call_tmp[628709] "expr temp" "maybe param" "maybe type" "temp"
      (628712 'move' call_tmp[628709](81933 call(81928 call (partial) _scan _mt[243] data[81888]) op[81884]))
      (512276 'move' ret[512271](512275 'deref' call_tmp[628709]))
      gotoReturn _end_chpl__scanIterator[512269] _end_chpl__scanIterator[512269]
    }
    {
      (81940 call compilerWarning "scan has been serialized (see issue #12482)")
      (476807 'end of statement')
      unknown arr[81954] "dead at end of block" "insert auto destroy"
      function chpl__loopexpr_iter2[581740](arg iterator[581742]:_any[178](?), arg op[581778]:_any[178](?)) : _unknown[51] "iterator fn"
      {
        unknown ret[581789] "RVV" "temp"
        {
          unknown _indexOfInterest[581747] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[581748] "expr temp" "temp"
          (581757 'move' _iterator[581748](581755 call _getIterator iterator[581742]))
          Defer
          {
            {
              (581771 call _freeIterator _iterator[581748])
            }
          }
          { scopeless type
            (581762 'move' _indexOfInterest[581747](581759 call iteratorIndex _iterator[581748]))
          }
          ForLoop[581749] for-expr
          {
            unknown d[81952] "index var" "insert auto destroy" "no doc"
            (581782 'end of statement')
            (581766 'move' d[81952] _indexOfInterest[581747])
            (581783 'end of statement' d[81952])
            {
              {
                unknown yret[581793] "YVV" "temp"
                unknown call_tmp[581800] "expr temp" "maybe param" "maybe type" "temp"
                (581803 'move' call_tmp[581800](81949 call chpl__accumgen op[581778] d[81952]))
                (581796 'move' yret[581793](581795 'deref' call_tmp[581800]))
                (581798 yield yret[581793])
                (581785 'end of statement' d[81952])
              }
            }
            label _continueLabel[581752]
            _indexOfInterest[581747]
            _iterator[581748]
          }
          label _breakLabel[581753]
        }
        (581791 return ret[581789])
      }
      function chpl__forexpr2[581720](arg iterExpr[581723]:_any[178](?), arg op[581727]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
      {
        unknown ret[581808] "RVV" "temp"
        unknown _iterator[581730] "expr temp" "maybe ref" "temp"
        (581732 'move' _iterator[581730] iterExpr[581723])
        unknown call_tmp[581815] "expr temp" "maybe param" "maybe type" "temp"
        (581818 'move' call_tmp[581815](581735 call chpl__loopexpr_iter2 _iterator[581730] op[581727]))
        (581813 'move' ret[581808](581812 'deref' call_tmp[581815]))
        (581810 return ret[581808])
      }
      unknown call_tmp[581820] "maybe param" "maybe type" "temp"
      (581823 'move' call_tmp[581820](581725 call chpl__forexpr2 data[81888] op[81884]))
      (581827 'iterator record set shape' call_tmp[581820] data[81888] 1)
      (541612 'init var' arr[81954] call_tmp[581820])
      (81957 'end of statement')
      (81960 call chpl__delete op[81884])
      (476808 'end of statement')
      (512281 'move' ret[512271](512280 'deref' arr[81954]))
      gotoReturn _end_chpl__scanIterator[512269] _end_chpl__scanIterator[512269]
      (476809 'end of statement' arr[81954])
    }
    label _end_chpl__scanIterator[512269]
    (512273 return ret[512271])
    (355169 'used modules list'(81891 'use' Reflection[224970]))
  }
  function chpl__accumgen[81976](arg op[81974]:_any[178](?), arg d[81978]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512287] "RVV" "temp"
    (81988 call(81983 call (partial) accumulate _mt[243] op[81974]) d[81978])
    (476811 'end of statement')
    unknown call_tmp[628718] "expr temp" "maybe param" "maybe type" "temp"
    (628721 'move' call_tmp[628718](81996 call(81992 call (partial) generate _mt[243] op[81974])))
    (512292 'move' ret[512287](512291 'deref' call_tmp[628718]))
    (512289 return ret[512287])
  }
  function chpl__reduceCombine[82005](arg globalOp[82003]:_any[178](?), arg localOp[82007]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[82050] "const" "temp"
    unknown call_tmp[628723] "expr temp" "maybe param" "maybe type" "temp"
    (628726 'move' call_tmp[628723](82047 '_wide_get_locale' globalOp[82003]))
    (82052 'move' tmp[82050](82048 'deref' call_tmp[628723]))
    {
      {
        unknown call_tmp[628730] "expr temp" "maybe param" "maybe type" "temp"
        (628733 'move' call_tmp[628730](82013 call l _mt[243] globalOp[82003]))
        (82022 call(82018 call (partial) lock _mt[243] call_tmp[628730]))
        (476813 'end of statement')
        (82033 call(82028 call (partial) combine _mt[243] globalOp[82003]) localOp[82007])
        (476814 'end of statement')
        unknown call_tmp[628741] "expr temp" "maybe param" "maybe type" "temp"
        (628744 'move' call_tmp[628741](82036 call l _mt[243] globalOp[82003]))
        (82045 call(82041 call (partial) unlock _mt[243] call_tmp[628741]))
      }
      (82055 'on block' 0 tmp[82050])
    }
    (512294 return _void[55])
  }
  function chpl__cleanupLocalOp[82065](arg globalOp[82063]:_any[178](?), arg localOp[82067]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (82071 call chpl__delete localOp[82067])
    (512296 return _void[55])
  }
  function chpl_sumTypeIsSame[82081](arg eltType[82079]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512300] "RVV" "param" "temp"
    unknown tmp[421787] "maybe param" "temp"
    (421798 'move' tmp[421787](82086 call isNumeric eltType[82079]))
    unknown call_tmp[628748] "expr temp" "maybe param" "maybe type" "temp"
    (628751 'move' call_tmp[628748](421800 call _cond_invalid tmp[421787]))
    if call_tmp[628748]
    {
      (421803 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560205] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560206] "maybe param" "temp"
    unknown call_tmp[628753] "expr temp" "maybe param" "maybe type" "temp"
    (628756 'move' call_tmp[628753](421788 call isTrue tmp[421787]))
    (560211 'move' tmp[560206](560209 call _cond_test call_tmp[628753]))
    if tmp[560206]
    {
      (560216 'move' tmp[560205](560213 '_paramFoldLogical' tmp[560206] 1))
    }
    {
      unknown tmp[560218] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628758] "expr temp" "maybe param" "maybe type" "temp"
      (628761 'move' call_tmp[628758](82090 call isString eltType[82079]))
      (560220 'move' tmp[560218](421792 call isTrue call_tmp[628758]))
      (560225 'move' tmp[560205](560222 '_paramFoldLogical' tmp[560206] tmp[560218]))
    }
    unknown call_tmp[628763] "expr temp" "maybe param" "maybe type" "temp"
    (628766 'move' call_tmp[628763](82163 call _cond_test tmp[560205]))
    if call_tmp[628763]
    {
      (512305 'move' ret[512300](512304 'deref' 1))
      gotoReturn _end_chpl_sumTypeIsSame[512298] _end_chpl_sumTypeIsSame[512298]
    }
    {
      unknown call_tmp[628768] "expr temp" "maybe param" "maybe type" "temp"
      (628771 'move' call_tmp[628768](82100 call isDomain eltType[82079]))
      unknown call_tmp[628773] "expr temp" "maybe param" "maybe type" "temp"
      (628776 'move' call_tmp[628773](82158 call _cond_test call_tmp[628768]))
      if call_tmp[628773]
      {
        unknown d[82102] "dead at end of block" "insert auto destroy"
        (541614 'default init var' d[82102] eltType[82079])
        (82105 'end of statement')
        unknown call_tmp[628778] "expr temp" "maybe param" "maybe type" "temp"
        (628781 'move' call_tmp[628778](82110 call isAssociativeDom d[82102]))
        (512310 'move' ret[512300](512309 'deref' call_tmp[628778]))
        gotoReturn _end_chpl_sumTypeIsSame[512298] _end_chpl_sumTypeIsSame[512298]
        (476819 'end of statement' d[82102])
      }
      {
        unknown call_tmp[628783] "expr temp" "maybe param" "maybe type" "temp"
        (628786 'move' call_tmp[628783](82116 call isArray eltType[82079]))
        unknown call_tmp[628788] "expr temp" "maybe param" "maybe type" "temp"
        (628791 'move' call_tmp[628788](82154 call _cond_test call_tmp[628783]))
        if call_tmp[628788]
        {
          unknown arrInstType[82122] "dead at end of block" "insert auto destroy" "type variable"(82121 'static field type' eltType[82079] "_instance")
          (541619 'move' arrInstType[82122](541616 'static field type' eltType[82079] "_instance"))
          unknown instanceObj[82128] "dead at end of block" "insert auto destroy"
          unknown call_tmp[628793] "expr temp" "maybe param" "maybe type" "temp"
          (628796 'move' call_tmp[628793](82127 'to nilable class from type' arrInstType[82122]))
          (541621 'default init var' instanceObj[82128] call_tmp[628793])
          (82131 'end of statement' arrInstType[82122])
          unknown call_tmp[628798] "expr temp" "maybe param" "maybe type" "temp"
          (628801 'move' call_tmp[628798](82135 call postfix! instanceObj[82128]))
          unknown call_tmp[628805] "expr temp" "maybe param" "maybe type" "temp"
          (628808 'move' call_tmp[628805](82137 call eltType _mt[243] call_tmp[628798]))
          unknown instanceEltType[82141] "dead at end of block" "insert auto destroy" "type variable"(82140 'static typeof' call_tmp[628805])
          unknown call_tmp[628810] "expr temp" "maybe param" "maybe type" "temp"
          (628813 'move' call_tmp[628810](541627 call postfix! instanceObj[82128]))
          unknown call_tmp[628817] "expr temp" "maybe param" "maybe type" "temp"
          (628820 'move' call_tmp[628817](541625 call eltType _mt[243] call_tmp[628810]))
          (541630 'move' instanceEltType[82141](541623 'static typeof' call_tmp[628817]))
          (476822 'end of statement' instanceObj[82128])
          unknown call_tmp[628822] "expr temp" "maybe param" "maybe type" "temp"
          (628825 'move' call_tmp[628822](82147 call chpl_sumTypeIsSame instanceEltType[82141]))
          (512315 'move' ret[512300](512314 'deref' call_tmp[628822]))
          gotoReturn _end_chpl_sumTypeIsSame[512298] _end_chpl_sumTypeIsSame[512298]
          (476824 'end of statement' instanceEltType[82141])
        }
        {
          (512320 'move' ret[512300](512319 'deref' 0))
          gotoReturn _end_chpl_sumTypeIsSame[512298] _end_chpl_sumTypeIsSame[512298]
        }
      }
    }
    label _end_chpl_sumTypeIsSame[512298]
    (512302 return ret[512300])
  }
  function chpl__sumType[82175](arg eltType[82173]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[512326] "RVV" "temp" "type variable"
    unknown call_tmp[628827] "expr temp" "maybe param" "maybe type" "temp"
    (628830 'move' call_tmp[628827](82180 call chpl_sumTypeIsSame eltType[82173]))
    unknown call_tmp[628832] "expr temp" "maybe param" "maybe type" "temp"
    (628835 'move' call_tmp[628832](82286 call _cond_test call_tmp[628827]))
    if call_tmp[628832]
    {
      (512331 'move' ret[512326](512330 'deref' eltType[82173]))
      gotoReturn _end_chpl__sumType[512324] _end_chpl__sumType[512324]
    }
    {
      unknown x[82186] "dead at end of block" "insert auto destroy"
      (541632 'default init var' x[82186] eltType[82173])
      (82189 'end of statement')
      unknown call_tmp[628837] "expr temp" "maybe param" "maybe type" "temp"
      (628840 'move' call_tmp[628837](82194 call isArray x[82186]))
      unknown call_tmp[628842] "expr temp" "maybe param" "maybe type" "temp"
      (628845 'move' call_tmp[628842](82282 call _cond_test call_tmp[628837]))
      if call_tmp[628842]
      {
        unknown xET[82199] "dead at end of block" "insert auto destroy" "type variable"(82196 call eltType _mt[243] x[82186])
        (541638 'move' xET[82199](541635 call eltType _mt[243] x[82186]))
        (476828 'end of statement' x[82186])
        unknown xST[82207] "dead at end of block" "insert auto destroy" "type variable"(82206 call chpl__sumType xET[82199])
        (541643 'move' xST[82207](541641 call chpl__sumType xET[82199]))
        (476830 'end of statement' xET[82199])
        unknown call_tmp[628851] "expr temp" "maybe param" "maybe type" "temp"
        (628854 'move' call_tmp[628851](82212 call == xET[82199] xST[82207]))
        unknown call_tmp[628856] "expr temp" "maybe param" "maybe type" "temp"
        (628859 'move' call_tmp[628856](82227 call _cond_test call_tmp[628851]))
        if call_tmp[628856]
        {
          (512336 'move' ret[512326](512335 'deref' eltType[82173]))
          gotoReturn _end_chpl__sumType[512324] _end_chpl__sumType[512324]
        }
        {
          function chpl__loopexpr_iter3[581916](arg iterator[581918]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[582056] "RVV" "temp"
            {
              unknown _indexOfInterest[581923] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581924] "expr temp" "temp"
              (581933 'move' _iterator[581924](581931 call _getIterator iterator[581918]))
              Defer
              {
                {
                  (581950 call _freeIterator _iterator[581924])
                }
              }
              { scopeless type
                (581938 'move' _indexOfInterest[581923](581935 call iteratorIndex _iterator[581924]))
              }
              ForLoop[581925] for-expr
              {
                unknown chpl__elidedIdx[581943] "index var" "insert auto destroy"
                (582050 'end of statement')
                (581945 'move' chpl__elidedIdx[581943] _indexOfInterest[581923])
                (582051 'end of statement' chpl__elidedIdx[581943])
                {
                  {
                    unknown yret[582060] "YVV" "temp"
                    (582063 'move' yret[582060](582062 'deref' xST[82207]))
                    (582065 yield yret[582060])
                  }
                }
                label _continueLabel[581928]
                _indexOfInterest[581923]
                _iterator[581924]
              }
              label _breakLabel[581929]
            }
            (582058 return ret[582056])
          }
          function chpl__loopexpr_iter3[581957](param arg tag[581961]:iterKind[453], arg iterator[581964]:_any[178](?)) : _unknown[51] "fn returns iterator"
          {
            unknown ret[582092] "RVV" "temp"
            const _leaderIterator[581976] "const" "expr temp" "temp"
            (581981 'move' _leaderIterator[581976](581978 call _toLeader iterator[581964]))
            (582097 'move' ret[582092](582096 'deref' _leaderIterator[581976]))
            (582094 return ret[582092])
          }
          where {
            unknown tmp[582068] "maybe param" "temp"
            (582079 'move' tmp[582068](581966 call == tag[581961] leader[447]))
            unknown call_tmp[582126] "expr temp" "maybe param" "maybe type" "temp"
            (582129 'move' call_tmp[582126](582081 call _cond_invalid tmp[582068]))
            if call_tmp[582126]
            {
              (582084 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[582099] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[582100] "maybe param" "temp"
            unknown call_tmp[582131] "expr temp" "maybe param" "maybe type" "temp"
            (582134 'move' call_tmp[582131](582069 call isTrue tmp[582068]))
            (582105 'move' tmp[582100](582103 call _cond_test call_tmp[582131]))
            if tmp[582100]
            {
              unknown tmp[582107] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[582136] "expr temp" "maybe param" "maybe type" "temp"
              (582139 'move' call_tmp[582136](581970 'call resolves' "_toLeader" iterator[581964]))
              (582109 'move' tmp[582107](582072 call isTrue call_tmp[582136]))
              (582114 'move' tmp[582099](582111 '_paramFoldLogical' tmp[582100] tmp[582107]))
            }
            {
              (582119 'move' tmp[582099](582116 '_paramFoldLogical' tmp[582100] 0))
            }
            (748611 call chpl_statementLevelSymbol tmp[582099])
          }
          function chpl__loopexpr_iter3[581985](param arg tag[581989]:iterKind[453], arg followThis[581992]:_any[178](?), arg iterator[581994]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[582149] "RVV" "temp"
            const _followerIterator[582001] "const" "expr temp" "temp"
            (582007 'move' _followerIterator[582001](582003 call _toFollower iterator[581994] followThis[581992]))
            {
              unknown _indexOfInterest[582014] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[582015] "expr temp" "temp"
              (582024 'move' _iterator[582015](582022 call _getIterator _followerIterator[582001]))
              Defer
              {
                {
                  (582041 call _freeIterator _iterator[582015])
                }
              }
              { scopeless type
                (582029 'move' _indexOfInterest[582014](582026 call iteratorIndex _iterator[582015]))
              }
              ForLoop[582016] lowered-forall for-expr
              {
                unknown chpl__elidedIdx[582034] "index var" "insert auto destroy"
                (582143 'end of statement')
                (582036 'move' chpl__elidedIdx[582034] _indexOfInterest[582014])
                (582144 'end of statement' chpl__elidedIdx[582034])
                {
                  {
                    unknown yret[582153] "YVV" "temp"
                    (582156 'move' yret[582153](582155 'deref' xST[82207]))
                    (582158 yield yret[582153])
                  }
                }
                label _continueLabel[582019]
                _indexOfInterest[582014]
                _iterator[582015]
              }
              label _breakLabel[582020]
            }
            (582151 return ret[582149])
          }
          where {
            (581997 call == tag[581989] follower[449])
          }
          function chpl__forallexpr3[581829](arg iterExpr[581832]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "maybe type" "fn returns iterator"
          {
            unknown ret[582170] "RVV" "maybe type" "temp"
            function _isArrayTypeFn[581838]() : _unknown[51] "inline"
            {
              unknown _iterator[581843] "temp"
              (581848 'move' _iterator[581843](581845 call _getIterator iterExpr[581832]))
              unknown _indexOfInterest[581850] "an _indexOfInterest or chpl__followIdx variable" "temp"
              (581855 'move' _indexOfInterest[581850](581852 call iteratorIndex _iterator[581843]))
              unknown chpl__elidedIdx[581861] "index var" "insert auto destroy"
              (582160 'end of statement')
              (581863 'move' chpl__elidedIdx[581861] _indexOfInterest[581850])
              (582161 'end of statement' chpl__elidedIdx[581861])
              unknown isType_result[581865] "param" "temp"
              {
                (581871 'move' isType_result[581865](581869 call isType xST[82207]))
              }
              if isType_result[581865]
              {
                (581874 'move' _isArrayType[581841] 1)
              }
              {
                (581877 'move' _isArrayType[581841] 0)
              }
              (582166 return _void[55])
            }
            unknown _isArrayType[581841] "maybe param" "temp"
            { scopeless type
              (581884 call _isArrayTypeFn[581838])
            }
            if _isArrayType[581841]
            {
              unknown _arrayType[581886] "expr temp" "maybe type" "temp"
              unknown _domain[581889] "expr temp" "no auto destroy" "temp"
              (581894 'move' _domain[581889](581891 call chpl__ensureDomainExpr iterExpr[581832]))
              {
                (581901 'move' _arrayType[581886](581898 call chpl__buildArrayRuntimeType _domain[581889] xST[82207]))
              }
              (582175 'move' ret[582170](582174 'deref' _arrayType[581886]))
              gotoReturn _end_chpl__forallexpr3[582168] _end_chpl__forallexpr3[582168]
            }
            {
              unknown _iterator[581907] "expr temp" "maybe ref" "temp"
              (581909 'move' _iterator[581907] iterExpr[581832])
              unknown call_tmp[582184] "expr temp" "maybe param" "maybe type" "temp"
              (582187 'move' call_tmp[582184](581912 call chpl__loopexpr_iter3 _iterator[581907]))
              (582180 'move' ret[582170](582179 'deref' call_tmp[582184]))
              gotoReturn _end_chpl__forallexpr3[582168] _end_chpl__forallexpr3[582168]
            }
            label _end_chpl__forallexpr3[582168]
            (582172 return ret[582170])
          }
          unknown call_tmp[582191] "expr temp" "maybe param" "maybe type" "temp"
          (582194 'move' call_tmp[582191](82218 call _dom _mt[243] x[82186]))
          unknown call_tmp[582196] "expr temp" "maybe param" "maybe type" "temp"
          (582199 'move' call_tmp[582196](581834 call chpl__forallexpr3 call_tmp[582191]))
          (582203 'iterator record set shape' call_tmp[582196] call_tmp[582191] 0)
          (512341 'move' ret[512326](512340 'deref' call_tmp[582196]))
          gotoReturn _end_chpl__sumType[512324] _end_chpl__sumType[512324]
          (476833 'end of statement' x[82186] xST[82207])
        }
      }
      {
        unknown call_tmp[628861] "expr temp" "maybe param" "maybe type" "temp"
        (628864 'move' call_tmp[628861](82242 call canResolve "+" x[82186] x[82186]))
        unknown call_tmp[628866] "expr temp" "maybe param" "maybe type" "temp"
        (628869 'move' call_tmp[628866](82243 call ! call_tmp[628861]))
        unknown call_tmp[628871] "expr temp" "maybe param" "maybe type" "temp"
        (628874 'move' call_tmp[628871](82270 call _cond_test call_tmp[628866]))
        if call_tmp[628871]
        {
          unknown call_tmp[628876] "expr temp" "maybe param" "maybe type" "temp"
          (628879 'move' call_tmp[628876](82266 call _cast string[26] eltType[82173]))
          (82268 call compilerError "+ reduce cannot be used on values of the type " call_tmp[628876])
        }
        { scopeless type
          unknown call_type_tmp[492051] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[628881] "expr temp" "maybe param" "maybe type" "temp"
          (628884 'move' call_tmp[628881](82277 call + x[82186] x[82186]))
          (492055 'move' call_type_tmp[492051](82279 'typeof' call_tmp[628881]))
        }
        (512346 'move' ret[512326](512345 'deref' call_type_tmp[492051]))
        gotoReturn _end_chpl__sumType[512324] _end_chpl__sumType[512324]
        (476837 'end of statement' x[82186] x[82186])
        (355171 'used modules list'(82234 'use' Reflection[224970]))
      }
    }
    label _end_chpl__sumType[512324]
    (512328 return ret[512326])
  }
  type ReduceScanOp[82300] val super[355717]:object[22] "super class" val l[82295]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432]
  function SumReduceScanOp[82412](?).identity[82319](arg _mt[82416]:_MT[238], arg this[82414]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[512352] "RVV" "temp"
    unknown x[82325] "dead at end of block" "insert auto destroy"
    unknown call_tmp[628888] "expr temp" "maybe param" "maybe type" "temp"
    (628891 'move' call_tmp[628888](376460 call eltType _mt[243] this[82414]))
    unknown call_tmp[628893] "expr temp" "maybe param" "maybe type" "temp"
    (628896 'move' call_tmp[628893](82324 call chpl__sumType call_tmp[628888]))
    (541645 'default init var' x[82325] call_tmp[628893])
    (82328 'end of statement')
    (512357 'move' ret[512352](512356 'deref' x[82325]))
    gotoReturn _end_identity[512350] _end_identity[512350]
    (476840 'end of statement' x[82325])
    label _end_identity[512350]
    (512354 return ret[512352])
  }
  function SumReduceScanOp[82412](?).accumulate[82339](arg _mt[82420]:_MT[238], arg this[82418]:SumReduceScanOp[82412](?), arg x[82337]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628900] "expr temp" "maybe param" "maybe type" "temp"
    (628903 'move' call_tmp[628900](376466 call value _mt[243] this[82418]))
    (82343 call += call_tmp[628900] x[82337])
    (512361 return _void[55])
  }
  function SumReduceScanOp[82412](?).accumulateOntoState[82353](arg _mt[82424]:_MT[238], arg this[82422]:SumReduceScanOp[82412](?), ref arg state[82351]:_any[178](?), arg x[82355]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82359 call += state[82351] x[82355])
    (512363 return _void[55])
  }
  function SumReduceScanOp[82412](?).combine[82369](arg _mt[82428]:_MT[238], arg this[82426]:SumReduceScanOp[82412](?), arg x[82367]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628907] "expr temp" "maybe param" "maybe type" "temp"
    (628910 'move' call_tmp[628907](376474 call value _mt[243] this[82426]))
    unknown call_tmp[628914] "expr temp" "maybe param" "maybe type" "temp"
    (628917 'move' call_tmp[628914](82375 call value _mt[243] x[82367]))
    (82378 call += call_tmp[628907] call_tmp[628914])
    (512365 return _void[55])
  }
  function SumReduceScanOp[82412](?).generate[82386](arg _mt[82432]:_MT[238], arg this[82430]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512369] "RVV" "temp"
    unknown call_tmp[628921] "expr temp" "maybe param" "maybe type" "temp"
    (628924 'move' call_tmp[628921](376479 call value _mt[243] this[82430]))
    (512374 'move' ret[512369](512373 'deref' call_tmp[628921]))
    (512371 return ret[512369])
  }
  function SumReduceScanOp[82412](?).clone[82396](arg _mt[82436]:_MT[238], arg this[82434]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512378] "RVV" "temp"
    unknown call_tmp[628928] "expr temp" "maybe param" "maybe type" "temp"
    (628931 'move' call_tmp[628928](376488 call eltType _mt[243] this[82434]))
    unknown call_tmp[628933] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628936 'move' call_tmp[628933](747981 'new' SumReduceScanOp[376483](?)(eltType = call_tmp[628928])(_chpl_manager = unmanaged[220](?))))
    (512383 'move' ret[512378](512382 'deref' call_tmp[628933]))
    (512380 return ret[512378])
  }
  type SumReduceScanOp[82412](?) val super[355719]:ReduceScanOp[82300] "super class" unknown eltType[82306] "type variable" unknown value[82313](82312 call chpl__sumType eltType[82306])
  type SumReduceScanOp[376483](?)
  function ProductReduceScanOp[82541](?).identity[82455](arg _mt[82545]:_MT[238], arg this[82543]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512387] "RVV" "temp"
    unknown call_tmp[628940] "expr temp" "maybe param" "maybe type" "temp"
    (628943 'move' call_tmp[628940](376494 call eltType _mt[243] this[82543]))
    unknown call_tmp[628945] "expr temp" "maybe param" "maybe type" "temp"
    (628948 'move' call_tmp[628945](82460 call _prod_id call_tmp[628940]))
    (512392 'move' ret[512387](512391 'deref' call_tmp[628945]))
    (512389 return ret[512387])
  }
  function ProductReduceScanOp[82541](?).accumulate[82470](arg _mt[82549]:_MT[238], arg this[82547]:ProductReduceScanOp[82541](?), arg x[82468]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628952] "expr temp" "maybe param" "maybe type" "temp"
    (628955 'move' call_tmp[628952](376499 call value _mt[243] this[82547]))
    (82474 call *= call_tmp[628952] x[82468])
    (512394 return _void[55])
  }
  function ProductReduceScanOp[82541](?).accumulateOntoState[82484](arg _mt[82553]:_MT[238], arg this[82551]:ProductReduceScanOp[82541](?), ref arg state[82482]:_any[178](?), arg x[82486]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82490 call *= state[82482] x[82486])
    (512396 return _void[55])
  }
  function ProductReduceScanOp[82541](?).combine[82500](arg _mt[82557]:_MT[238], arg this[82555]:ProductReduceScanOp[82541](?), arg x[82498]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628959] "expr temp" "maybe param" "maybe type" "temp"
    (628962 'move' call_tmp[628959](376507 call value _mt[243] this[82555]))
    unknown call_tmp[628966] "expr temp" "maybe param" "maybe type" "temp"
    (628969 'move' call_tmp[628966](82504 call value _mt[243] x[82498]))
    (82507 call *= call_tmp[628959] call_tmp[628966])
    (512398 return _void[55])
  }
  function ProductReduceScanOp[82541](?).generate[82515](arg _mt[82561]:_MT[238], arg this[82559]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512402] "RVV" "temp"
    unknown call_tmp[628973] "expr temp" "maybe param" "maybe type" "temp"
    (628976 'move' call_tmp[628973](376512 call value _mt[243] this[82559]))
    (512407 'move' ret[512402](512406 'deref' call_tmp[628973]))
    (512404 return ret[512402])
  }
  function ProductReduceScanOp[82541](?).clone[82525](arg _mt[82565]:_MT[238], arg this[82563]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512411] "RVV" "temp"
    unknown call_tmp[628980] "expr temp" "maybe param" "maybe type" "temp"
    (628983 'move' call_tmp[628980](376521 call eltType _mt[243] this[82563]))
    unknown call_tmp[628985] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628988 'move' call_tmp[628985](747982 'new' ProductReduceScanOp[376516](?)(eltType = call_tmp[628980])(_chpl_manager = unmanaged[220](?))))
    (512416 'move' ret[512411](512415 'deref' call_tmp[628985]))
    (512413 return ret[512411])
  }
  type ProductReduceScanOp[82541](?) val super[355721]:ReduceScanOp[82300] "super class" unknown eltType[82442] "type variable" unknown value[82449](82448 call _prod_id eltType[82442])
  type ProductReduceScanOp[376516](?)
  function MaxReduceScanOp[82682](?).identity[82584](arg _mt[82686]:_MT[238], arg this[82684]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512420] "RVV" "temp"
    unknown call_tmp[628992] "expr temp" "maybe param" "maybe type" "temp"
    (628995 'move' call_tmp[628992](376527 call eltType _mt[243] this[82684]))
    unknown call_tmp[628997] "expr temp" "maybe param" "maybe type" "temp"
    (629000 'move' call_tmp[628997](82589 call min call_tmp[628992]))
    (512425 'move' ret[512420](512424 'deref' call_tmp[628997]))
    (512422 return ret[512420])
  }
  function MaxReduceScanOp[82682](?).accumulate[82599](arg _mt[82690]:_MT[238], arg this[82688]:MaxReduceScanOp[82682](?), arg x[82597]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629004] "expr temp" "maybe param" "maybe type" "temp"
    (629007 'move' call_tmp[629004](376532 call value _mt[243] this[82688]))
    unknown call_tmp[629011] "expr temp" "maybe param" "maybe type" "temp"
    (629014 'move' call_tmp[629011](376538 call value _mt[243] this[82688]))
    unknown call_tmp[629016] "expr temp" "maybe param" "maybe type" "temp"
    (629019 'move' call_tmp[629016](82606 call max x[82597] call_tmp[629011]))
    (82607 call = call_tmp[629004] call_tmp[629016])
    (512427 return _void[55])
  }
  function MaxReduceScanOp[82682](?).accumulateOntoState[82617](arg _mt[82694]:_MT[238], arg this[82692]:MaxReduceScanOp[82682](?), ref arg state[82615]:_any[178](?), arg x[82619]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629021] "expr temp" "maybe param" "maybe type" "temp"
    (629024 'move' call_tmp[629021](82626 call max state[82615] x[82619]))
    (82627 call = state[82615] call_tmp[629021])
    (512429 return _void[55])
  }
  function MaxReduceScanOp[82682](?).combine[82637](arg _mt[82698]:_MT[238], arg this[82696]:MaxReduceScanOp[82682](?), arg x[82635]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629028] "expr temp" "maybe param" "maybe type" "temp"
    (629031 'move' call_tmp[629028](376546 call value _mt[243] this[82696]))
    unknown call_tmp[629035] "expr temp" "maybe param" "maybe type" "temp"
    (629038 'move' call_tmp[629035](376551 call value _mt[243] this[82696]))
    unknown call_tmp[629042] "expr temp" "maybe param" "maybe type" "temp"
    (629045 'move' call_tmp[629042](82644 call value _mt[243] x[82635]))
    unknown call_tmp[629047] "expr temp" "maybe param" "maybe type" "temp"
    (629050 'move' call_tmp[629047](82647 call max call_tmp[629035] call_tmp[629042]))
    (82648 call = call_tmp[629028] call_tmp[629047])
    (512431 return _void[55])
  }
  function MaxReduceScanOp[82682](?).generate[82656](arg _mt[82702]:_MT[238], arg this[82700]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512435] "RVV" "temp"
    unknown call_tmp[629054] "expr temp" "maybe param" "maybe type" "temp"
    (629057 'move' call_tmp[629054](376556 call value _mt[243] this[82700]))
    (512440 'move' ret[512435](512439 'deref' call_tmp[629054]))
    (512437 return ret[512435])
  }
  function MaxReduceScanOp[82682](?).clone[82666](arg _mt[82706]:_MT[238], arg this[82704]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512444] "RVV" "temp"
    unknown call_tmp[629061] "expr temp" "maybe param" "maybe type" "temp"
    (629064 'move' call_tmp[629061](376565 call eltType _mt[243] this[82704]))
    unknown call_tmp[629066] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629069 'move' call_tmp[629066](747983 'new' MaxReduceScanOp[376560](?)(eltType = call_tmp[629061])(_chpl_manager = unmanaged[220](?))))
    (512449 'move' ret[512444](512448 'deref' call_tmp[629066]))
    (512446 return ret[512444])
  }
  type MaxReduceScanOp[82682](?) val super[355723]:ReduceScanOp[82300] "super class" unknown eltType[82571] "type variable" unknown value[82578](82577 call min eltType[82571])
  type MaxReduceScanOp[376560](?)
  function MinReduceScanOp[82823](?).identity[82725](arg _mt[82827]:_MT[238], arg this[82825]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512453] "RVV" "temp"
    unknown call_tmp[629073] "expr temp" "maybe param" "maybe type" "temp"
    (629076 'move' call_tmp[629073](376571 call eltType _mt[243] this[82825]))
    unknown call_tmp[629078] "expr temp" "maybe param" "maybe type" "temp"
    (629081 'move' call_tmp[629078](82730 call max call_tmp[629073]))
    (512458 'move' ret[512453](512457 'deref' call_tmp[629078]))
    (512455 return ret[512453])
  }
  function MinReduceScanOp[82823](?).accumulate[82740](arg _mt[82831]:_MT[238], arg this[82829]:MinReduceScanOp[82823](?), arg x[82738]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629085] "expr temp" "maybe param" "maybe type" "temp"
    (629088 'move' call_tmp[629085](376576 call value _mt[243] this[82829]))
    unknown call_tmp[629092] "expr temp" "maybe param" "maybe type" "temp"
    (629095 'move' call_tmp[629092](376582 call value _mt[243] this[82829]))
    unknown call_tmp[629097] "expr temp" "maybe param" "maybe type" "temp"
    (629100 'move' call_tmp[629097](82747 call min x[82738] call_tmp[629092]))
    (82748 call = call_tmp[629085] call_tmp[629097])
    (512460 return _void[55])
  }
  function MinReduceScanOp[82823](?).accumulateOntoState[82758](arg _mt[82835]:_MT[238], arg this[82833]:MinReduceScanOp[82823](?), ref arg state[82756]:_any[178](?), arg x[82760]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629102] "expr temp" "maybe param" "maybe type" "temp"
    (629105 'move' call_tmp[629102](82767 call min state[82756] x[82760]))
    (82768 call = state[82756] call_tmp[629102])
    (512462 return _void[55])
  }
  function MinReduceScanOp[82823](?).combine[82778](arg _mt[82839]:_MT[238], arg this[82837]:MinReduceScanOp[82823](?), arg x[82776]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629109] "expr temp" "maybe param" "maybe type" "temp"
    (629112 'move' call_tmp[629109](376590 call value _mt[243] this[82837]))
    unknown call_tmp[629116] "expr temp" "maybe param" "maybe type" "temp"
    (629119 'move' call_tmp[629116](376595 call value _mt[243] this[82837]))
    unknown call_tmp[629123] "expr temp" "maybe param" "maybe type" "temp"
    (629126 'move' call_tmp[629123](82785 call value _mt[243] x[82776]))
    unknown call_tmp[629128] "expr temp" "maybe param" "maybe type" "temp"
    (629131 'move' call_tmp[629128](82788 call min call_tmp[629116] call_tmp[629123]))
    (82789 call = call_tmp[629109] call_tmp[629128])
    (512464 return _void[55])
  }
  function MinReduceScanOp[82823](?).generate[82797](arg _mt[82843]:_MT[238], arg this[82841]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512468] "RVV" "temp"
    unknown call_tmp[629135] "expr temp" "maybe param" "maybe type" "temp"
    (629138 'move' call_tmp[629135](376600 call value _mt[243] this[82841]))
    (512473 'move' ret[512468](512472 'deref' call_tmp[629135]))
    (512470 return ret[512468])
  }
  function MinReduceScanOp[82823](?).clone[82807](arg _mt[82847]:_MT[238], arg this[82845]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512477] "RVV" "temp"
    unknown call_tmp[629142] "expr temp" "maybe param" "maybe type" "temp"
    (629145 'move' call_tmp[629142](376609 call eltType _mt[243] this[82845]))
    unknown call_tmp[629147] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629150 'move' call_tmp[629147](747984 'new' MinReduceScanOp[376604](?)(eltType = call_tmp[629142])(_chpl_manager = unmanaged[220](?))))
    (512482 'move' ret[512477](512481 'deref' call_tmp[629147]))
    (512479 return ret[512477])
  }
  type MinReduceScanOp[82823](?) val super[355725]:ReduceScanOp[82300] "super class" unknown eltType[82712] "type variable" unknown value[82719](82718 call max eltType[82712])
  type MinReduceScanOp[376604](?)
  function minmax[83074](?).identity[82873](arg _mt[83078]:_MT[238], arg this[83076]:minmax[83074](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512486] "RVV" "temp"
    unknown call_tmp[629154] "expr temp" "maybe param" "maybe type" "temp"
    (629157 'move' call_tmp[629154](376616 call eltType _mt[243] this[83076]))
    unknown call_tmp[629159] "expr temp" "maybe param" "maybe type" "temp"
    (629162 'move' call_tmp[629159](82878 call max call_tmp[629154]))
    unknown call_tmp[629166] "expr temp" "maybe param" "maybe type" "temp"
    (629169 'move' call_tmp[629166](376621 call eltType _mt[243] this[83076]))
    unknown call_tmp[629171] "expr temp" "maybe param" "maybe type" "temp"
    (629174 'move' call_tmp[629171](82882 call min call_tmp[629166]))
    unknown call_tmp[629176] "expr temp" "maybe param" "maybe type" "temp"
    (629179 'move' call_tmp[629176](82884 call _build_tuple call_tmp[629159] call_tmp[629171]))
    (512491 'move' ret[512486](512490 'deref' call_tmp[629176]))
    (512488 return ret[512486])
  }
  function minmax[83074](?).accumulateOntoState[82895](arg _mt[83082]:_MT[238], arg this[83080]:minmax[83074](?), ref arg state[82893]:_any[178](?), arg x[82898] :
  (376626 call eltType _mt[243] this[83080])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629183] "expr temp" "maybe param" "maybe type" "temp"
    (629186 'move' call_tmp[629183](82904 call state[82893] 0))
    unknown call_tmp[629188] "expr temp" "maybe param" "maybe type" "temp"
    (629191 'move' call_tmp[629188](82909 call state[82893] 0))
    unknown call_tmp[629193] "expr temp" "maybe param" "maybe type" "temp"
    (629196 'move' call_tmp[629193](82912 call min call_tmp[629188] x[82898]))
    (82913 call = call_tmp[629183] call_tmp[629193])
    (476866 'end of statement')
    unknown call_tmp[629198] "expr temp" "maybe param" "maybe type" "temp"
    (629201 'move' call_tmp[629198](82920 call state[82893] 1))
    unknown call_tmp[629203] "expr temp" "maybe param" "maybe type" "temp"
    (629206 'move' call_tmp[629203](82925 call state[82893] 1))
    unknown call_tmp[629208] "expr temp" "maybe param" "maybe type" "temp"
    (629211 'move' call_tmp[629208](82928 call max call_tmp[629203] x[82898]))
    (82929 call = call_tmp[629198] call_tmp[629208])
    (512493 return _void[55])
  }
  function minmax[83074](?).accumulateOntoState[82938](arg _mt[83086]:_MT[238], arg this[83084]:minmax[83074](?), ref arg state[82936]:_any[178](?), arg other[82944] :
  unknown call_tmp[629215] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629220] "expr temp" "maybe param" "maybe type" "temp"
    (629223 'move' call_tmp[629220](82950 call state[82936] 0))
    unknown call_tmp[629225] "expr temp" "maybe param" "maybe type" "temp"
    (629228 'move' call_tmp[629225](82955 call state[82936] 0))
    unknown call_tmp[629230] "expr temp" "maybe param" "maybe type" "temp"
    (629233 'move' call_tmp[629230](82960 call other[82944] 0))
    unknown call_tmp[629235] "expr temp" "maybe param" "maybe type" "temp"
    (629238 'move' call_tmp[629235](82961 call min call_tmp[629225] call_tmp[629230]))
    (82962 call = call_tmp[629220] call_tmp[629235])
    (476868 'end of statement')
    unknown call_tmp[629240] "expr temp" "maybe param" "maybe type" "temp"
    (629243 'move' call_tmp[629240](82969 call state[82936] 1))
    unknown call_tmp[629245] "expr temp" "maybe param" "maybe type" "temp"
    (629248 'move' call_tmp[629245](82974 call state[82936] 1))
    unknown call_tmp[629250] "expr temp" "maybe param" "maybe type" "temp"
    (629253 'move' call_tmp[629250](82979 call other[82944] 1))
    unknown call_tmp[629255] "expr temp" "maybe param" "maybe type" "temp"
    (629258 'move' call_tmp[629255](82980 call max call_tmp[629245] call_tmp[629250]))
    (82981 call = call_tmp[629240] call_tmp[629255])
    (512495 return _void[55])
  }
  function minmax[83074](?).accumulate[82992](arg _mt[83090]:_MT[238], arg this[83088]:minmax[83074](?), arg x[82989] :
  (376648 call eltType _mt[243] this[83088])) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629266] "expr temp" "maybe param" "maybe type" "temp"
    (629269 'move' call_tmp[629266](376657 call value _mt[243] this[83088]))
    (82998 call(376652 call (partial) accumulateOntoState _mt[243] this[83088]) call_tmp[629266] x[82989])
    (512497 return _void[55])
  }
  function minmax[83074](?).accumulate[83012](arg _mt[83094]:_MT[238], arg this[83092]:minmax[83074](?), arg state[83009] :
  unknown call_tmp[629273] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629282] "expr temp" "maybe param" "maybe type" "temp"
    (629285 'move' call_tmp[629282](376672 call value _mt[243] this[83092]))
    (83018 call(376667 call (partial) accumulateOntoState _mt[243] this[83092]) call_tmp[629282] state[83009])
    (512499 return _void[55])
  }
  function minmax[83074](?).combine[83032](arg _mt[83098]:_MT[238], arg this[83096]:minmax[83074](?), arg other[83029] :
  unknown call_tmp[629289] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629298] "expr temp" "maybe param" "maybe type" "temp"
    (629301 'move' call_tmp[629298](376691 call value _mt[243] this[83096]))
    unknown call_tmp[629305] "expr temp" "maybe param" "maybe type" "temp"
    (629308 'move' call_tmp[629305](83038 call value _mt[243] other[83029]))
    (83041 call(376686 call (partial) accumulateOntoState _mt[243] this[83096]) call_tmp[629298] call_tmp[629305])
    (512501 return _void[55])
  }
  function minmax[83074](?).generate[83048](arg _mt[83102]:_MT[238], arg this[83100]:minmax[83074](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512505] "RVV" "temp"
    unknown call_tmp[629312] "expr temp" "maybe param" "maybe type" "temp"
    (629315 'move' call_tmp[629312](376696 call value _mt[243] this[83100]))
    (512510 'move' ret[512505](512509 'deref' call_tmp[629312]))
    (512507 return ret[512505])
  }
  function minmax[83074](?).clone[83058](arg _mt[83106]:_MT[238], arg this[83104]:minmax[83074](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512514] "RVV" "temp"
    unknown call_tmp[629319] "expr temp" "maybe param" "maybe type" "temp"
    (629322 'move' call_tmp[629319](376702 call eltType _mt[243] this[83104]))
    unknown call_tmp[629324] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629327 'move' call_tmp[629324](747985 'new' minmax[376677](?)(eltType = call_tmp[629319])(_chpl_manager = unmanaged[220](?))))
    (512519 'move' ret[512514](512518 'deref' call_tmp[629324]))
    (512516 return ret[512514])
  }
  type minmax[83074](?) val super[355727]:ReduceScanOp[82300] "super class" unknown eltType[82853] "type variable" unknown value[82867](82865 call _build_tuple(82859 call max eltType[82853])(82863 call min eltType[82853]))
  type minmax[376677](?)
  function LogicalAndReduceScanOp[83238](?).identity[83125](arg _mt[83242]:_MT[238], arg this[83240]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512523] "RVV" "temp"
    unknown call_tmp[629331] "expr temp" "maybe param" "maybe type" "temp"
    (629334 'move' call_tmp[629331](376708 call eltType _mt[243] this[83240]))
    unknown call_tmp[629336] "expr temp" "maybe param" "maybe type" "temp"
    (629339 'move' call_tmp[629336](83130 call _land_id call_tmp[629331]))
    (512528 'move' ret[512523](512527 'deref' call_tmp[629336]))
    (512525 return ret[512523])
  }
  function LogicalAndReduceScanOp[83238](?).accumulate[83140](arg _mt[83246]:_MT[238], arg this[83244]:LogicalAndReduceScanOp[83238](?), arg x[83138]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83145] "temp"
      unknown call_tmp[629343] "expr temp" "maybe param" "maybe type" "temp"
      (629346 'move' call_tmp[629343](376713 call value _mt[243] this[83244]))
      (83148 'move' tmp[83145](83147 'addr of' call_tmp[629343]))
      unknown tmp[421808] "maybe param" "temp"
      (421819 'move' tmp[421808] tmp[83145])
      unknown call_tmp[629348] "expr temp" "maybe param" "maybe type" "temp"
      (629351 'move' call_tmp[629348](421821 call _cond_invalid tmp[421808]))
      if call_tmp[629348]
      {
        (421824 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560232] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560233] "maybe param" "temp"
      unknown call_tmp[629353] "expr temp" "maybe param" "maybe type" "temp"
      (629356 'move' call_tmp[629353](421809 call isTrue tmp[421808]))
      (560238 'move' tmp[560233](560236 call _cond_test call_tmp[629353]))
      if tmp[560233]
      {
        unknown tmp[560240] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560242 'move' tmp[560240](421812 call isTrue x[83138]))
        (560247 'move' tmp[560232](560244 '_paramFoldLogical' tmp[560233] tmp[560240]))
      }
      {
        (560252 'move' tmp[560232](560249 '_paramFoldLogical' tmp[560233] 0))
      }
      (83153 call = tmp[83145] tmp[560232])
    }
    (512530 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).accumulateOntoState[83163](arg _mt[83250]:_MT[238], arg this[83248]:LogicalAndReduceScanOp[83238](?), ref arg state[83161]:_any[178](?), arg x[83165]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83170] "temp"
      (83173 'move' tmp[83170](83172 'addr of' state[83161]))
      unknown tmp[421829] "maybe param" "temp"
      (421840 'move' tmp[421829] tmp[83170])
      unknown call_tmp[629358] "expr temp" "maybe param" "maybe type" "temp"
      (629361 'move' call_tmp[629358](421842 call _cond_invalid tmp[421829]))
      if call_tmp[629358]
      {
        (421845 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560259] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560260] "maybe param" "temp"
      unknown call_tmp[629363] "expr temp" "maybe param" "maybe type" "temp"
      (629366 'move' call_tmp[629363](421830 call isTrue tmp[421829]))
      (560265 'move' tmp[560260](560263 call _cond_test call_tmp[629363]))
      if tmp[560260]
      {
        unknown tmp[560267] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560269 'move' tmp[560267](421833 call isTrue x[83165]))
        (560274 'move' tmp[560259](560271 '_paramFoldLogical' tmp[560260] tmp[560267]))
      }
      {
        (560279 'move' tmp[560259](560276 '_paramFoldLogical' tmp[560260] 0))
      }
      (83178 call = tmp[83170] tmp[560259])
    }
    (512532 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).combine[83188](arg _mt[83254]:_MT[238], arg this[83252]:LogicalAndReduceScanOp[83238](?), arg x[83186]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83196] "temp"
      unknown call_tmp[629370] "expr temp" "maybe param" "maybe type" "temp"
      (629373 'move' call_tmp[629370](376721 call value _mt[243] this[83252]))
      (83199 'move' tmp[83196](83198 'addr of' call_tmp[629370]))
      unknown tmp[421850] "maybe param" "temp"
      (421861 'move' tmp[421850] tmp[83196])
      unknown call_tmp[629375] "expr temp" "maybe param" "maybe type" "temp"
      (629378 'move' call_tmp[629375](421863 call _cond_invalid tmp[421850]))
      if call_tmp[629375]
      {
        (421866 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560286] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560287] "maybe param" "temp"
      unknown call_tmp[629380] "expr temp" "maybe param" "maybe type" "temp"
      (629383 'move' call_tmp[629380](421851 call isTrue tmp[421850]))
      (560292 'move' tmp[560287](560290 call _cond_test call_tmp[629380]))
      if tmp[560287]
      {
        unknown tmp[560294] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629387] "expr temp" "maybe param" "maybe type" "temp"
        (629390 'move' call_tmp[629387](83192 call value _mt[243] x[83186]))
        (560296 'move' tmp[560294](421854 call isTrue call_tmp[629387]))
        (560301 'move' tmp[560286](560298 '_paramFoldLogical' tmp[560287] tmp[560294]))
      }
      {
        (560306 'move' tmp[560286](560303 '_paramFoldLogical' tmp[560287] 0))
      }
      (83204 call = tmp[83196] tmp[560286])
    }
    (512534 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).generate[83212](arg _mt[83258]:_MT[238], arg this[83256]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512538] "RVV" "temp"
    unknown call_tmp[629394] "expr temp" "maybe param" "maybe type" "temp"
    (629397 'move' call_tmp[629394](376726 call value _mt[243] this[83256]))
    (512543 'move' ret[512538](512542 'deref' call_tmp[629394]))
    (512540 return ret[512538])
  }
  function LogicalAndReduceScanOp[83238](?).clone[83222](arg _mt[83262]:_MT[238], arg this[83260]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512547] "RVV" "temp"
    unknown call_tmp[629401] "expr temp" "maybe param" "maybe type" "temp"
    (629404 'move' call_tmp[629401](376735 call eltType _mt[243] this[83260]))
    unknown call_tmp[629406] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629409 'move' call_tmp[629406](747986 'new' LogicalAndReduceScanOp[376730](?)(eltType = call_tmp[629401])(_chpl_manager = unmanaged[220](?))))
    (512552 'move' ret[512547](512551 'deref' call_tmp[629406]))
    (512549 return ret[512547])
  }
  type LogicalAndReduceScanOp[83238](?) val super[355729]:ReduceScanOp[82300] "super class" unknown eltType[83112] "type variable" unknown value[83119](83118 call _land_id eltType[83112])
  type LogicalAndReduceScanOp[376730](?)
  function LogicalOrReduceScanOp[83394](?).identity[83281](arg _mt[83398]:_MT[238], arg this[83396]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512556] "RVV" "temp"
    unknown call_tmp[629413] "expr temp" "maybe param" "maybe type" "temp"
    (629416 'move' call_tmp[629413](376741 call eltType _mt[243] this[83396]))
    unknown call_tmp[629418] "expr temp" "maybe param" "maybe type" "temp"
    (629421 'move' call_tmp[629418](83286 call _lor_id call_tmp[629413]))
    (512561 'move' ret[512556](512560 'deref' call_tmp[629418]))
    (512558 return ret[512556])
  }
  function LogicalOrReduceScanOp[83394](?).accumulate[83296](arg _mt[83402]:_MT[238], arg this[83400]:LogicalOrReduceScanOp[83394](?), arg x[83294]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83301] "temp"
      unknown call_tmp[629425] "expr temp" "maybe param" "maybe type" "temp"
      (629428 'move' call_tmp[629425](376746 call value _mt[243] this[83400]))
      (83304 'move' tmp[83301](83303 'addr of' call_tmp[629425]))
      unknown tmp[421871] "maybe param" "temp"
      (421882 'move' tmp[421871] tmp[83301])
      unknown call_tmp[629430] "expr temp" "maybe param" "maybe type" "temp"
      (629433 'move' call_tmp[629430](421884 call _cond_invalid tmp[421871]))
      if call_tmp[629430]
      {
        (421887 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560313] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560314] "maybe param" "temp"
      unknown call_tmp[629435] "expr temp" "maybe param" "maybe type" "temp"
      (629438 'move' call_tmp[629435](421872 call isTrue tmp[421871]))
      (560319 'move' tmp[560314](560317 call _cond_test call_tmp[629435]))
      if tmp[560314]
      {
        (560324 'move' tmp[560313](560321 '_paramFoldLogical' tmp[560314] 1))
      }
      {
        unknown tmp[560326] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560328 'move' tmp[560326](421876 call isTrue x[83294]))
        (560333 'move' tmp[560313](560330 '_paramFoldLogical' tmp[560314] tmp[560326]))
      }
      (83309 call = tmp[83301] tmp[560313])
    }
    (512563 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).accumulateOntoState[83319](arg _mt[83406]:_MT[238], arg this[83404]:LogicalOrReduceScanOp[83394](?), ref arg state[83317]:_any[178](?), arg x[83321]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83326] "temp"
      (83329 'move' tmp[83326](83328 'addr of' state[83317]))
      unknown tmp[421892] "maybe param" "temp"
      (421903 'move' tmp[421892] tmp[83326])
      unknown call_tmp[629440] "expr temp" "maybe param" "maybe type" "temp"
      (629443 'move' call_tmp[629440](421905 call _cond_invalid tmp[421892]))
      if call_tmp[629440]
      {
        (421908 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560340] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560341] "maybe param" "temp"
      unknown call_tmp[629445] "expr temp" "maybe param" "maybe type" "temp"
      (629448 'move' call_tmp[629445](421893 call isTrue tmp[421892]))
      (560346 'move' tmp[560341](560344 call _cond_test call_tmp[629445]))
      if tmp[560341]
      {
        (560351 'move' tmp[560340](560348 '_paramFoldLogical' tmp[560341] 1))
      }
      {
        unknown tmp[560353] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560355 'move' tmp[560353](421897 call isTrue x[83321]))
        (560360 'move' tmp[560340](560357 '_paramFoldLogical' tmp[560341] tmp[560353]))
      }
      (83334 call = tmp[83326] tmp[560340])
    }
    (512565 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).combine[83344](arg _mt[83410]:_MT[238], arg this[83408]:LogicalOrReduceScanOp[83394](?), arg x[83342]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83352] "temp"
      unknown call_tmp[629452] "expr temp" "maybe param" "maybe type" "temp"
      (629455 'move' call_tmp[629452](376754 call value _mt[243] this[83408]))
      (83355 'move' tmp[83352](83354 'addr of' call_tmp[629452]))
      unknown tmp[421913] "maybe param" "temp"
      (421924 'move' tmp[421913] tmp[83352])
      unknown call_tmp[629457] "expr temp" "maybe param" "maybe type" "temp"
      (629460 'move' call_tmp[629457](421926 call _cond_invalid tmp[421913]))
      if call_tmp[629457]
      {
        (421929 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560367] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560368] "maybe param" "temp"
      unknown call_tmp[629462] "expr temp" "maybe param" "maybe type" "temp"
      (629465 'move' call_tmp[629462](421914 call isTrue tmp[421913]))
      (560373 'move' tmp[560368](560371 call _cond_test call_tmp[629462]))
      if tmp[560368]
      {
        (560378 'move' tmp[560367](560375 '_paramFoldLogical' tmp[560368] 1))
      }
      {
        unknown tmp[560380] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629469] "expr temp" "maybe param" "maybe type" "temp"
        (629472 'move' call_tmp[629469](83348 call value _mt[243] x[83342]))
        (560382 'move' tmp[560380](421918 call isTrue call_tmp[629469]))
        (560387 'move' tmp[560367](560384 '_paramFoldLogical' tmp[560368] tmp[560380]))
      }
      (83360 call = tmp[83352] tmp[560367])
    }
    (512567 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).generate[83368](arg _mt[83414]:_MT[238], arg this[83412]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512571] "RVV" "temp"
    unknown call_tmp[629476] "expr temp" "maybe param" "maybe type" "temp"
    (629479 'move' call_tmp[629476](376759 call value _mt[243] this[83412]))
    (512576 'move' ret[512571](512575 'deref' call_tmp[629476]))
    (512573 return ret[512571])
  }
  function LogicalOrReduceScanOp[83394](?).clone[83378](arg _mt[83418]:_MT[238], arg this[83416]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512580] "RVV" "temp"
    unknown call_tmp[629483] "expr temp" "maybe param" "maybe type" "temp"
    (629486 'move' call_tmp[629483](376768 call eltType _mt[243] this[83416]))
    unknown call_tmp[629488] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629491 'move' call_tmp[629488](747987 'new' LogicalOrReduceScanOp[376763](?)(eltType = call_tmp[629483])(_chpl_manager = unmanaged[220](?))))
    (512585 'move' ret[512580](512584 'deref' call_tmp[629488]))
    (512582 return ret[512580])
  }
  type LogicalOrReduceScanOp[83394](?) val super[355731]:ReduceScanOp[82300] "super class" unknown eltType[83268] "type variable" unknown value[83275](83274 call _lor_id eltType[83268])
  type LogicalOrReduceScanOp[376763](?)
  function BitwiseAndReduceScanOp[83523](?).identity[83437](arg _mt[83527]:_MT[238], arg this[83525]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512589] "RVV" "temp"
    unknown call_tmp[629495] "expr temp" "maybe param" "maybe type" "temp"
    (629498 'move' call_tmp[629495](376774 call eltType _mt[243] this[83525]))
    unknown call_tmp[629500] "expr temp" "maybe param" "maybe type" "temp"
    (629503 'move' call_tmp[629500](83442 call _band_id call_tmp[629495]))
    (512594 'move' ret[512589](512593 'deref' call_tmp[629500]))
    (512591 return ret[512589])
  }
  function BitwiseAndReduceScanOp[83523](?).accumulate[83452](arg _mt[83531]:_MT[238], arg this[83529]:BitwiseAndReduceScanOp[83523](?), arg x[83450]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629507] "expr temp" "maybe param" "maybe type" "temp"
    (629510 'move' call_tmp[629507](376779 call value _mt[243] this[83529]))
    (83456 call &= call_tmp[629507] x[83450])
    (512596 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).accumulateOntoState[83466](arg _mt[83535]:_MT[238], arg this[83533]:BitwiseAndReduceScanOp[83523](?), ref arg state[83464]:_any[178](?), arg x[83468]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83472 call &= state[83464] x[83468])
    (512598 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).combine[83482](arg _mt[83539]:_MT[238], arg this[83537]:BitwiseAndReduceScanOp[83523](?), arg x[83480]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629514] "expr temp" "maybe param" "maybe type" "temp"
    (629517 'move' call_tmp[629514](376787 call value _mt[243] this[83537]))
    unknown call_tmp[629521] "expr temp" "maybe param" "maybe type" "temp"
    (629524 'move' call_tmp[629521](83486 call value _mt[243] x[83480]))
    (83489 call &= call_tmp[629514] call_tmp[629521])
    (512600 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).generate[83497](arg _mt[83543]:_MT[238], arg this[83541]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512604] "RVV" "temp"
    unknown call_tmp[629528] "expr temp" "maybe param" "maybe type" "temp"
    (629531 'move' call_tmp[629528](376792 call value _mt[243] this[83541]))
    (512609 'move' ret[512604](512608 'deref' call_tmp[629528]))
    (512606 return ret[512604])
  }
  function BitwiseAndReduceScanOp[83523](?).clone[83507](arg _mt[83547]:_MT[238], arg this[83545]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512613] "RVV" "temp"
    unknown call_tmp[629535] "expr temp" "maybe param" "maybe type" "temp"
    (629538 'move' call_tmp[629535](376801 call eltType _mt[243] this[83545]))
    unknown call_tmp[629540] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629543 'move' call_tmp[629540](747988 'new' BitwiseAndReduceScanOp[376796](?)(eltType = call_tmp[629535])(_chpl_manager = unmanaged[220](?))))
    (512618 'move' ret[512613](512617 'deref' call_tmp[629540]))
    (512615 return ret[512613])
  }
  type BitwiseAndReduceScanOp[83523](?) val super[355733]:ReduceScanOp[82300] "super class" unknown eltType[83424] "type variable" unknown value[83431](83430 call _band_id eltType[83424])
  type BitwiseAndReduceScanOp[376796](?)
  function BitwiseOrReduceScanOp[83652](?).identity[83566](arg _mt[83656]:_MT[238], arg this[83654]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512622] "RVV" "temp"
    unknown call_tmp[629547] "expr temp" "maybe param" "maybe type" "temp"
    (629550 'move' call_tmp[629547](376807 call eltType _mt[243] this[83654]))
    unknown call_tmp[629552] "expr temp" "maybe param" "maybe type" "temp"
    (629555 'move' call_tmp[629552](83571 call _bor_id call_tmp[629547]))
    (512627 'move' ret[512622](512626 'deref' call_tmp[629552]))
    (512624 return ret[512622])
  }
  function BitwiseOrReduceScanOp[83652](?).accumulate[83581](arg _mt[83660]:_MT[238], arg this[83658]:BitwiseOrReduceScanOp[83652](?), arg x[83579]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629559] "expr temp" "maybe param" "maybe type" "temp"
    (629562 'move' call_tmp[629559](376812 call value _mt[243] this[83658]))
    (83585 call |= call_tmp[629559] x[83579])
    (512629 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).accumulateOntoState[83595](arg _mt[83664]:_MT[238], arg this[83662]:BitwiseOrReduceScanOp[83652](?), ref arg state[83593]:_any[178](?), arg x[83597]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83601 call |= state[83593] x[83597])
    (512631 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).combine[83611](arg _mt[83668]:_MT[238], arg this[83666]:BitwiseOrReduceScanOp[83652](?), arg x[83609]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629566] "expr temp" "maybe param" "maybe type" "temp"
    (629569 'move' call_tmp[629566](376820 call value _mt[243] this[83666]))
    unknown call_tmp[629573] "expr temp" "maybe param" "maybe type" "temp"
    (629576 'move' call_tmp[629573](83615 call value _mt[243] x[83609]))
    (83618 call |= call_tmp[629566] call_tmp[629573])
    (512633 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).generate[83626](arg _mt[83672]:_MT[238], arg this[83670]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512637] "RVV" "temp"
    unknown call_tmp[629580] "expr temp" "maybe param" "maybe type" "temp"
    (629583 'move' call_tmp[629580](376825 call value _mt[243] this[83670]))
    (512642 'move' ret[512637](512641 'deref' call_tmp[629580]))
    (512639 return ret[512637])
  }
  function BitwiseOrReduceScanOp[83652](?).clone[83636](arg _mt[83676]:_MT[238], arg this[83674]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512646] "RVV" "temp"
    unknown call_tmp[629587] "expr temp" "maybe param" "maybe type" "temp"
    (629590 'move' call_tmp[629587](376834 call eltType _mt[243] this[83674]))
    unknown call_tmp[629592] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629595 'move' call_tmp[629592](747989 'new' BitwiseOrReduceScanOp[376829](?)(eltType = call_tmp[629587])(_chpl_manager = unmanaged[220](?))))
    (512651 'move' ret[512646](512650 'deref' call_tmp[629592]))
    (512648 return ret[512646])
  }
  type BitwiseOrReduceScanOp[83652](?) val super[355735]:ReduceScanOp[82300] "super class" unknown eltType[83553] "type variable" unknown value[83560](83559 call _bor_id eltType[83553])
  type BitwiseOrReduceScanOp[376829](?)
  function BitwiseXorReduceScanOp[83781](?).identity[83695](arg _mt[83785]:_MT[238], arg this[83783]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512655] "RVV" "temp"
    unknown call_tmp[629599] "expr temp" "maybe param" "maybe type" "temp"
    (629602 'move' call_tmp[629599](376840 call eltType _mt[243] this[83783]))
    unknown call_tmp[629604] "expr temp" "maybe param" "maybe type" "temp"
    (629607 'move' call_tmp[629604](83700 call _bxor_id call_tmp[629599]))
    (512660 'move' ret[512655](512659 'deref' call_tmp[629604]))
    (512657 return ret[512655])
  }
  function BitwiseXorReduceScanOp[83781](?).accumulate[83710](arg _mt[83789]:_MT[238], arg this[83787]:BitwiseXorReduceScanOp[83781](?), arg x[83708]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629611] "expr temp" "maybe param" "maybe type" "temp"
    (629614 'move' call_tmp[629611](376845 call value _mt[243] this[83787]))
    (83714 call ^= call_tmp[629611] x[83708])
    (512662 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).accumulateOntoState[83724](arg _mt[83793]:_MT[238], arg this[83791]:BitwiseXorReduceScanOp[83781](?), ref arg state[83722]:_any[178](?), arg x[83726]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83730 call ^= state[83722] x[83726])
    (512664 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).combine[83740](arg _mt[83797]:_MT[238], arg this[83795]:BitwiseXorReduceScanOp[83781](?), arg x[83738]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629618] "expr temp" "maybe param" "maybe type" "temp"
    (629621 'move' call_tmp[629618](376853 call value _mt[243] this[83795]))
    unknown call_tmp[629625] "expr temp" "maybe param" "maybe type" "temp"
    (629628 'move' call_tmp[629625](83744 call value _mt[243] x[83738]))
    (83747 call ^= call_tmp[629618] call_tmp[629625])
    (512666 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).generate[83755](arg _mt[83801]:_MT[238], arg this[83799]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512670] "RVV" "temp"
    unknown call_tmp[629632] "expr temp" "maybe param" "maybe type" "temp"
    (629635 'move' call_tmp[629632](376858 call value _mt[243] this[83799]))
    (512675 'move' ret[512670](512674 'deref' call_tmp[629632]))
    (512672 return ret[512670])
  }
  function BitwiseXorReduceScanOp[83781](?).clone[83765](arg _mt[83805]:_MT[238], arg this[83803]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512679] "RVV" "temp"
    unknown call_tmp[629639] "expr temp" "maybe param" "maybe type" "temp"
    (629642 'move' call_tmp[629639](376867 call eltType _mt[243] this[83803]))
    unknown call_tmp[629644] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629647 'move' call_tmp[629644](747990 'new' BitwiseXorReduceScanOp[376862](?)(eltType = call_tmp[629639])(_chpl_manager = unmanaged[220](?))))
    (512684 'move' ret[512679](512683 'deref' call_tmp[629644]))
    (512681 return ret[512679])
  }
  type BitwiseXorReduceScanOp[83781](?) val super[355737]:ReduceScanOp[82300] "super class" unknown eltType[83682] "type variable" unknown value[83689](83688 call _bxor_id eltType[83682])
  type BitwiseXorReduceScanOp[376862](?)
  function _maxloc_id[83812](arg eltType[83810]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512688] "RVV" "temp"
    unknown call_tmp[629649] "expr temp" "maybe param" "maybe type" "temp"
    (629652 'move' call_tmp[629649](83818 call eltType[83810] 0))
    unknown call_tmp[629654] "expr temp" "maybe param" "maybe type" "temp"
    (629657 'move' call_tmp[629654](83820 call min call_tmp[629649]))
    unknown call_tmp[629659] "expr temp" "maybe param" "maybe type" "temp"
    (629662 'move' call_tmp[629659](83825 call eltType[83810] 1))
    unknown call_tmp[629664] "expr temp" "maybe param" "maybe type" "temp"
    (629667 'move' call_tmp[629664](83827 call max call_tmp[629659]))
    unknown call_tmp[629669] "expr temp" "maybe param" "maybe type" "temp"
    (629672 'move' call_tmp[629669](83829 call _build_tuple call_tmp[629654] call_tmp[629664]))
    (512693 'move' ret[512688](512692 'deref' call_tmp[629669]))
    (512690 return ret[512688])
  }
  function _minloc_id[83840](arg eltType[83838]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512697] "RVV" "temp"
    unknown call_tmp[629674] "expr temp" "maybe param" "maybe type" "temp"
    (629677 'move' call_tmp[629674](83845 call max eltType[83838]))
    (512702 'move' ret[512697](512701 'deref' call_tmp[629674]))
    (512699 return ret[512697])
  }
  function maxloc[84026](?).identity[83867](arg _mt[84030]:_MT[238], arg this[84028]:maxloc[84026](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512706] "RVV" "temp"
    unknown call_tmp[629681] "expr temp" "maybe param" "maybe type" "temp"
    (629684 'move' call_tmp[629681](376876 call eltType _mt[243] this[84028]))
    unknown call_tmp[629686] "expr temp" "maybe param" "maybe type" "temp"
    (629689 'move' call_tmp[629686](83872 call _maxloc_id call_tmp[629681]))
    (512711 'move' ret[512706](512710 'deref' call_tmp[629686]))
    (512708 return ret[512706])
  }
  function maxloc[84026](?).accumulate[83882](arg _mt[84034]:_MT[238], arg this[84032]:maxloc[84026](?), arg x[83880]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629695] "expr temp" "maybe param" "maybe type" "temp"
    (629698 'move' call_tmp[629695](376885 call value _mt[243] this[84032]))
    (83888 call(376880 call (partial) accumulateOntoState _mt[243] this[84032]) call_tmp[629695] x[83880])
    (512713 return _void[55])
  }
  function maxloc[84026](?).accumulateOntoState[83897](arg _mt[84038]:_MT[238], arg this[84036]:maxloc[84026](?), ref arg state[83895]:_any[178](?), arg x[83899]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421934] "maybe param" "temp"
    unknown tmp[421955] "maybe param" "temp"
    unknown call_tmp[629700] "expr temp" "maybe param" "maybe type" "temp"
    (629703 'move' call_tmp[629700](83904 call x[83899] 0))
    unknown call_tmp[629705] "expr temp" "maybe param" "maybe type" "temp"
    (629708 'move' call_tmp[629705](83908 call state[83895] 0))
    (421966 'move' tmp[421955](83909 call > call_tmp[629700] call_tmp[629705]))
    unknown call_tmp[629710] "expr temp" "maybe param" "maybe type" "temp"
    (629713 'move' call_tmp[629710](421968 call _cond_invalid tmp[421955]))
    if call_tmp[629710]
    {
      (421971 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560421] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560422] "maybe param" "temp"
    unknown call_tmp[629715] "expr temp" "maybe param" "maybe type" "temp"
    (629718 'move' call_tmp[629715](421956 call isTrue tmp[421955]))
    (560427 'move' tmp[560422](560425 call _cond_test call_tmp[629715]))
    if tmp[560422]
    {
      (560432 'move' tmp[560421](560429 '_paramFoldLogical' tmp[560422] 1))
    }
    {
      unknown tmp[421976] "maybe param" "temp"
      unknown call_tmp[629720] "expr temp" "maybe param" "maybe type" "temp"
      (629723 'move' call_tmp[629720](83914 call x[83899] 0))
      unknown call_tmp[629725] "expr temp" "maybe param" "maybe type" "temp"
      (629728 'move' call_tmp[629725](83918 call state[83895] 0))
      (421987 'move' tmp[421976](83919 call == call_tmp[629720] call_tmp[629725]))
      unknown call_tmp[629730] "expr temp" "maybe param" "maybe type" "temp"
      (629733 'move' call_tmp[629730](421989 call _cond_invalid tmp[421976]))
      if call_tmp[629730]
      {
        (421992 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560394] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560395] "maybe param" "temp"
      unknown call_tmp[629735] "expr temp" "maybe param" "maybe type" "temp"
      (629738 'move' call_tmp[629735](421977 call isTrue tmp[421976]))
      (560400 'move' tmp[560395](560398 call _cond_test call_tmp[629735]))
      if tmp[560395]
      {
        unknown tmp[560402] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629740] "expr temp" "maybe param" "maybe type" "temp"
        (629743 'move' call_tmp[629740](83924 call x[83899] 1))
        unknown call_tmp[629745] "expr temp" "maybe param" "maybe type" "temp"
        (629748 'move' call_tmp[629745](83928 call state[83895] 1))
        unknown call_tmp[629750] "expr temp" "maybe param" "maybe type" "temp"
        (629753 'move' call_tmp[629750](83929 call < call_tmp[629740] call_tmp[629745]))
        (560404 'move' tmp[560402](421980 call isTrue call_tmp[629750]))
        (560409 'move' tmp[560394](560406 '_paramFoldLogical' tmp[560395] tmp[560402]))
      }
      {
        (560414 'move' tmp[560394](560411 '_paramFoldLogical' tmp[560395] 0))
      }
      unknown tmp[560434] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560436 'move' tmp[560434](421960 call isTrue tmp[560394]))
      (560441 'move' tmp[560421](560438 '_paramFoldLogical' tmp[560422] tmp[560434]))
    }
    (421945 'move' tmp[421934] tmp[560421])
    unknown call_tmp[629755] "expr temp" "maybe param" "maybe type" "temp"
    (629758 'move' call_tmp[629755](421947 call _cond_invalid tmp[421934]))
    if call_tmp[629755]
    {
      (421950 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560502] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560503] "maybe param" "temp"
    unknown call_tmp[629760] "expr temp" "maybe param" "maybe type" "temp"
    (629763 'move' call_tmp[629760](421935 call isTrue tmp[421934]))
    (560508 'move' tmp[560503](560506 call _cond_test call_tmp[629760]))
    if tmp[560503]
    {
      (560513 'move' tmp[560502](560510 '_paramFoldLogical' tmp[560503] 1))
    }
    {
      unknown tmp[421997] "maybe param" "temp"
      unknown call_tmp[629765] "expr temp" "maybe param" "maybe type" "temp"
      (629768 'move' call_tmp[629765](83939 call x[83899] 0))
      (422008 'move' tmp[421997](83941 call gotNaN call_tmp[629765]))
      unknown call_tmp[629770] "expr temp" "maybe param" "maybe type" "temp"
      (629773 'move' call_tmp[629770](422010 call _cond_invalid tmp[421997]))
      if call_tmp[629770]
      {
        (422013 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560475] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560476] "maybe param" "temp"
      unknown call_tmp[629775] "expr temp" "maybe param" "maybe type" "temp"
      (629778 'move' call_tmp[629775](421998 call isTrue tmp[421997]))
      (560481 'move' tmp[560476](560479 call _cond_test call_tmp[629775]))
      if tmp[560476]
      {
        unknown tmp[422018] "maybe param" "temp"
        unknown call_tmp[629780] "expr temp" "maybe param" "maybe type" "temp"
        (629783 'move' call_tmp[629780](83946 call state[83895] 0))
        unknown call_tmp[629785] "expr temp" "maybe param" "maybe type" "temp"
        (629788 'move' call_tmp[629785](83948 call gotNaN call_tmp[629780]))
        (422029 'move' tmp[422018](83949 call ! call_tmp[629785]))
        unknown call_tmp[629790] "expr temp" "maybe param" "maybe type" "temp"
        (629793 'move' call_tmp[629790](422031 call _cond_invalid tmp[422018]))
        if call_tmp[629790]
        {
          (422034 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560448] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560449] "maybe param" "temp"
        unknown call_tmp[629795] "expr temp" "maybe param" "maybe type" "temp"
        (629798 'move' call_tmp[629795](422019 call isTrue tmp[422018]))
        (560454 'move' tmp[560449](560452 call _cond_test call_tmp[629795]))
        if tmp[560449]
        {
          (560459 'move' tmp[560448](560456 '_paramFoldLogical' tmp[560449] 1))
        }
        {
          unknown tmp[560461] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629800] "expr temp" "maybe param" "maybe type" "temp"
          (629803 'move' call_tmp[629800](83954 call x[83899] 1))
          unknown call_tmp[629805] "expr temp" "maybe param" "maybe type" "temp"
          (629808 'move' call_tmp[629805](83958 call state[83895] 1))
          unknown call_tmp[629810] "expr temp" "maybe param" "maybe type" "temp"
          (629813 'move' call_tmp[629810](83959 call < call_tmp[629800] call_tmp[629805]))
          (560463 'move' tmp[560461](422023 call isTrue call_tmp[629810]))
          (560468 'move' tmp[560448](560465 '_paramFoldLogical' tmp[560449] tmp[560461]))
        }
        unknown tmp[560483] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560485 'move' tmp[560483](422001 call isTrue tmp[560448]))
        (560490 'move' tmp[560475](560487 '_paramFoldLogical' tmp[560476] tmp[560483]))
      }
      {
        (560495 'move' tmp[560475](560492 '_paramFoldLogical' tmp[560476] 0))
      }
      unknown tmp[560515] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560517 'move' tmp[560515](421939 call isTrue tmp[560475]))
      (560522 'move' tmp[560502](560519 '_paramFoldLogical' tmp[560503] tmp[560515]))
    }
    unknown call_tmp[629815] "expr temp" "maybe param" "maybe type" "temp"
    (629818 'move' call_tmp[629815](83972 call _cond_test tmp[560502]))
    if call_tmp[629815]
    {
      (83969 call = state[83895] x[83899])
    }
    (512715 return _void[55])
  }
  function maxloc[84026](?).combine[83984](arg _mt[84042]:_MT[238], arg this[84040]:maxloc[84026](?), arg x[83982]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629824] "expr temp" "maybe param" "maybe type" "temp"
    (629827 'move' call_tmp[629824](376907 call value _mt[243] this[84040]))
    unknown call_tmp[629831] "expr temp" "maybe param" "maybe type" "temp"
    (629834 'move' call_tmp[629831](83990 call value _mt[243] x[83982]))
    (83993 call(376902 call (partial) accumulateOntoState _mt[243] this[84040]) call_tmp[629824] call_tmp[629831])
    (512717 return _void[55])
  }
  function maxloc[84026](?).generate[84000](arg _mt[84046]:_MT[238], arg this[84044]:maxloc[84026](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512721] "RVV" "temp"
    unknown call_tmp[629838] "expr temp" "maybe param" "maybe type" "temp"
    (629841 'move' call_tmp[629838](376912 call value _mt[243] this[84044]))
    (512726 'move' ret[512721](512725 'deref' call_tmp[629838]))
    (512723 return ret[512721])
  }
  function maxloc[84026](?).clone[84010](arg _mt[84050]:_MT[238], arg this[84048]:maxloc[84026](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512730] "RVV" "temp"
    unknown call_tmp[629845] "expr temp" "maybe param" "maybe type" "temp"
    (629848 'move' call_tmp[629845](376921 call eltType _mt[243] this[84048]))
    unknown call_tmp[629850] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629853 'move' call_tmp[629850](747991 'new' maxloc[376916](?)(eltType = call_tmp[629845])(_chpl_manager = unmanaged[220](?))))
    (512735 'move' ret[512730](512734 'deref' call_tmp[629850]))
    (512732 return ret[512730])
  }
  type maxloc[84026](?) val super[355739]:ReduceScanOp[82300] "super class" unknown eltType[83854] "type variable" unknown value[83861](83860 call _maxloc_id eltType[83854])
  type maxloc[376916](?)
  function minloc[84228](?).identity[84069](arg _mt[84232]:_MT[238], arg this[84230]:minloc[84228](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512739] "RVV" "temp"
    unknown call_tmp[629857] "expr temp" "maybe param" "maybe type" "temp"
    (629860 'move' call_tmp[629857](376927 call eltType _mt[243] this[84230]))
    unknown call_tmp[629862] "expr temp" "maybe param" "maybe type" "temp"
    (629865 'move' call_tmp[629862](84074 call _minloc_id call_tmp[629857]))
    (512744 'move' ret[512739](512743 'deref' call_tmp[629862]))
    (512741 return ret[512739])
  }
  function minloc[84228](?).accumulate[84084](arg _mt[84236]:_MT[238], arg this[84234]:minloc[84228](?), arg x[84082]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629871] "expr temp" "maybe param" "maybe type" "temp"
    (629874 'move' call_tmp[629871](376936 call value _mt[243] this[84234]))
    (84090 call(376931 call (partial) accumulateOntoState _mt[243] this[84234]) call_tmp[629871] x[84082])
    (512746 return _void[55])
  }
  function minloc[84228](?).accumulateOntoState[84099](arg _mt[84240]:_MT[238], arg this[84238]:minloc[84228](?), ref arg state[84097]:_any[178](?), arg x[84101]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[422039] "maybe param" "temp"
    unknown tmp[422060] "maybe param" "temp"
    unknown call_tmp[629876] "expr temp" "maybe param" "maybe type" "temp"
    (629879 'move' call_tmp[629876](84106 call x[84101] 0))
    unknown call_tmp[629881] "expr temp" "maybe param" "maybe type" "temp"
    (629884 'move' call_tmp[629881](84110 call state[84097] 0))
    (422071 'move' tmp[422060](84111 call < call_tmp[629876] call_tmp[629881]))
    unknown call_tmp[629886] "expr temp" "maybe param" "maybe type" "temp"
    (629889 'move' call_tmp[629886](422073 call _cond_invalid tmp[422060]))
    if call_tmp[629886]
    {
      (422076 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560556] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560557] "maybe param" "temp"
    unknown call_tmp[629891] "expr temp" "maybe param" "maybe type" "temp"
    (629894 'move' call_tmp[629891](422061 call isTrue tmp[422060]))
    (560562 'move' tmp[560557](560560 call _cond_test call_tmp[629891]))
    if tmp[560557]
    {
      (560567 'move' tmp[560556](560564 '_paramFoldLogical' tmp[560557] 1))
    }
    {
      unknown tmp[422081] "maybe param" "temp"
      unknown call_tmp[629896] "expr temp" "maybe param" "maybe type" "temp"
      (629899 'move' call_tmp[629896](84116 call x[84101] 0))
      unknown call_tmp[629901] "expr temp" "maybe param" "maybe type" "temp"
      (629904 'move' call_tmp[629901](84120 call state[84097] 0))
      (422092 'move' tmp[422081](84121 call == call_tmp[629896] call_tmp[629901]))
      unknown call_tmp[629906] "expr temp" "maybe param" "maybe type" "temp"
      (629909 'move' call_tmp[629906](422094 call _cond_invalid tmp[422081]))
      if call_tmp[629906]
      {
        (422097 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560529] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560530] "maybe param" "temp"
      unknown call_tmp[629911] "expr temp" "maybe param" "maybe type" "temp"
      (629914 'move' call_tmp[629911](422082 call isTrue tmp[422081]))
      (560535 'move' tmp[560530](560533 call _cond_test call_tmp[629911]))
      if tmp[560530]
      {
        unknown tmp[560537] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629916] "expr temp" "maybe param" "maybe type" "temp"
        (629919 'move' call_tmp[629916](84126 call x[84101] 1))
        unknown call_tmp[629921] "expr temp" "maybe param" "maybe type" "temp"
        (629924 'move' call_tmp[629921](84130 call state[84097] 1))
        unknown call_tmp[629926] "expr temp" "maybe param" "maybe type" "temp"
        (629929 'move' call_tmp[629926](84131 call < call_tmp[629916] call_tmp[629921]))
        (560539 'move' tmp[560537](422085 call isTrue call_tmp[629926]))
        (560544 'move' tmp[560529](560541 '_paramFoldLogical' tmp[560530] tmp[560537]))
      }
      {
        (560549 'move' tmp[560529](560546 '_paramFoldLogical' tmp[560530] 0))
      }
      unknown tmp[560569] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560571 'move' tmp[560569](422065 call isTrue tmp[560529]))
      (560576 'move' tmp[560556](560573 '_paramFoldLogical' tmp[560557] tmp[560569]))
    }
    (422050 'move' tmp[422039] tmp[560556])
    unknown call_tmp[629931] "expr temp" "maybe param" "maybe type" "temp"
    (629934 'move' call_tmp[629931](422052 call _cond_invalid tmp[422039]))
    if call_tmp[629931]
    {
      (422055 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560637] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560638] "maybe param" "temp"
    unknown call_tmp[629936] "expr temp" "maybe param" "maybe type" "temp"
    (629939 'move' call_tmp[629936](422040 call isTrue tmp[422039]))
    (560643 'move' tmp[560638](560641 call _cond_test call_tmp[629936]))
    if tmp[560638]
    {
      (560648 'move' tmp[560637](560645 '_paramFoldLogical' tmp[560638] 1))
    }
    {
      unknown tmp[422102] "maybe param" "temp"
      unknown call_tmp[629941] "expr temp" "maybe param" "maybe type" "temp"
      (629944 'move' call_tmp[629941](84141 call x[84101] 0))
      (422113 'move' tmp[422102](84143 call gotNaN call_tmp[629941]))
      unknown call_tmp[629946] "expr temp" "maybe param" "maybe type" "temp"
      (629949 'move' call_tmp[629946](422115 call _cond_invalid tmp[422102]))
      if call_tmp[629946]
      {
        (422118 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560610] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560611] "maybe param" "temp"
      unknown call_tmp[629951] "expr temp" "maybe param" "maybe type" "temp"
      (629954 'move' call_tmp[629951](422103 call isTrue tmp[422102]))
      (560616 'move' tmp[560611](560614 call _cond_test call_tmp[629951]))
      if tmp[560611]
      {
        unknown tmp[422123] "maybe param" "temp"
        unknown call_tmp[629956] "expr temp" "maybe param" "maybe type" "temp"
        (629959 'move' call_tmp[629956](84148 call state[84097] 0))
        unknown call_tmp[629961] "expr temp" "maybe param" "maybe type" "temp"
        (629964 'move' call_tmp[629961](84150 call gotNaN call_tmp[629956]))
        (422134 'move' tmp[422123](84151 call ! call_tmp[629961]))
        unknown call_tmp[629966] "expr temp" "maybe param" "maybe type" "temp"
        (629969 'move' call_tmp[629966](422136 call _cond_invalid tmp[422123]))
        if call_tmp[629966]
        {
          (422139 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560583] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560584] "maybe param" "temp"
        unknown call_tmp[629971] "expr temp" "maybe param" "maybe type" "temp"
        (629974 'move' call_tmp[629971](422124 call isTrue tmp[422123]))
        (560589 'move' tmp[560584](560587 call _cond_test call_tmp[629971]))
        if tmp[560584]
        {
          (560594 'move' tmp[560583](560591 '_paramFoldLogical' tmp[560584] 1))
        }
        {
          unknown tmp[560596] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629976] "expr temp" "maybe param" "maybe type" "temp"
          (629979 'move' call_tmp[629976](84156 call x[84101] 1))
          unknown call_tmp[629981] "expr temp" "maybe param" "maybe type" "temp"
          (629984 'move' call_tmp[629981](84160 call state[84097] 1))
          unknown call_tmp[629986] "expr temp" "maybe param" "maybe type" "temp"
          (629989 'move' call_tmp[629986](84161 call < call_tmp[629976] call_tmp[629981]))
          (560598 'move' tmp[560596](422128 call isTrue call_tmp[629986]))
          (560603 'move' tmp[560583](560600 '_paramFoldLogical' tmp[560584] tmp[560596]))
        }
        unknown tmp[560618] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560620 'move' tmp[560618](422106 call isTrue tmp[560583]))
        (560625 'move' tmp[560610](560622 '_paramFoldLogical' tmp[560611] tmp[560618]))
      }
      {
        (560630 'move' tmp[560610](560627 '_paramFoldLogical' tmp[560611] 0))
      }
      unknown tmp[560650] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560652 'move' tmp[560650](422044 call isTrue tmp[560610]))
      (560657 'move' tmp[560637](560654 '_paramFoldLogical' tmp[560638] tmp[560650]))
    }
    unknown call_tmp[629991] "expr temp" "maybe param" "maybe type" "temp"
    (629994 'move' call_tmp[629991](84174 call _cond_test tmp[560637]))
    if call_tmp[629991]
    {
      (84171 call = state[84097] x[84101])
    }
    (512748 return _void[55])
  }
  function minloc[84228](?).combine[84186](arg _mt[84244]:_MT[238], arg this[84242]:minloc[84228](?), arg x[84184]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630000] "expr temp" "maybe param" "maybe type" "temp"
    (630003 'move' call_tmp[630000](376958 call value _mt[243] this[84242]))
    unknown call_tmp[630007] "expr temp" "maybe param" "maybe type" "temp"
    (630010 'move' call_tmp[630007](84192 call value _mt[243] x[84184]))
    (84195 call(376953 call (partial) accumulateOntoState _mt[243] this[84242]) call_tmp[630000] call_tmp[630007])
    (512750 return _void[55])
  }
  function minloc[84228](?).generate[84202](arg _mt[84248]:_MT[238], arg this[84246]:minloc[84228](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512754] "RVV" "temp"
    unknown call_tmp[630014] "expr temp" "maybe param" "maybe type" "temp"
    (630017 'move' call_tmp[630014](376963 call value _mt[243] this[84246]))
    (512759 'move' ret[512754](512758 'deref' call_tmp[630014]))
    (512756 return ret[512754])
  }
  function minloc[84228](?).clone[84212](arg _mt[84252]:_MT[238], arg this[84250]:minloc[84228](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512763] "RVV" "temp"
    unknown call_tmp[630021] "expr temp" "maybe param" "maybe type" "temp"
    (630024 'move' call_tmp[630021](376972 call eltType _mt[243] this[84250]))
    unknown call_tmp[630026] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630029 'move' call_tmp[630026](747992 'new' minloc[376967](?)(eltType = call_tmp[630021])(_chpl_manager = unmanaged[220](?))))
    (512768 'move' ret[512763](512767 'deref' call_tmp[630026]))
    (512765 return ret[512763])
  }
  type minloc[84228](?) val super[355741]:ReduceScanOp[82300] "super class" unknown eltType[84056] "type variable" unknown value[84063](84062 call _minloc_id eltType[84056])
  type minloc[376967](?)
  function gotNaN[84259](arg value[84257]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[512772] "RVV" "temp"
    unknown call_tmp[630031] "expr temp" "maybe param" "maybe type" "temp"
    (630034 'move' call_tmp[630031](84268 call isnan value[84257]))
    (512777 'move' ret[512772](512776 'deref' call_tmp[630031]))
    (512774 return ret[512772])
  }
  where {
    (84264 call isReal value[84257])
  }
  function gotNaN[84279](arg value[84277]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512781] "RVV" "param" "temp"
    (512786 'move' ret[512781](512785 'deref' 0))
    (512783 return ret[512781])
  }
  (355166 'used modules list'(81780 'use' ChapelStandard[20267])(81784 'use' ChapelLocks[187302]))
}