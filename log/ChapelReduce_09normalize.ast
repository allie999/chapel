AST dump for ChapelReduce after pass normalize.
Module use list: ChapelStandard ChapelLocks Reflection 

{
  function chpl__init_ChapelReduce[416012]() : void[4] "insert line file info" "module init"
  {
    (512728 return _void[55])
  }
  function chpl__scanStateResTypesMatch[81791](arg op[81789]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512189] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[491979] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628592] "expr temp" "maybe param" "maybe type" "temp"
      (628595 'move' call_tmp[628592](81800 call(81796 call (partial) generate _mt[243] op[81789])))
      (491983 'move' call_type_tmp[491979](81801 'typeof' call_tmp[628592]))
    }
    unknown resType[81802] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[491979]
    (541525 'move' resType[81802] call_type_tmp[491979])
    (476737 'end of statement')
    { scopeless type
      unknown call_type_tmp[491985] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628599] "expr temp" "maybe param" "maybe type" "temp"
      (628602 'move' call_tmp[628599](81809 call identity _mt[243] op[81789]))
      (491989 'move' call_type_tmp[491985](81812 'typeof' call_tmp[628599]))
    }
    unknown stateType[81813] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[491985]
    (541528 'move' stateType[81813] call_type_tmp[491985])
    (476738 'end of statement')
    unknown call_tmp[628604] "expr temp" "maybe param" "maybe type" "temp"
    (628607 'move' call_tmp[628604](81818 call == resType[81802] stateType[81813]))
    (512194 'move' ret[512189](512193 'deref' call_tmp[628604]))
    gotoReturn _end_chpl__scanStateResTypesMatch[512187] _end_chpl__scanStateResTypesMatch[512187]
    (476739 'end of statement' resType[81802] stateType[81813])
    label _end_chpl__scanStateResTypesMatch[512187]
    (512191 return ret[512189])
  }
  function chpl__scanIteratorZip[81828](arg op[81826]:_any[178](?), arg data[81830]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512200] "RVV" "temp"
    (81851 call compilerWarning "scan has been serialized (see issue #12482)")
    (476742 'end of statement')
    unknown arr[81869] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter1[581547](arg iterator[581549]:_any[178](?), arg op[581585]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[581596] "RVV" "temp"
      {
        unknown _indexOfInterest[581554] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[581555] "expr temp" "temp"
        (581564 'move' _iterator[581555](581562 call _getIteratorZip iterator[581549]))
        Defer
        {
          {
            (581578 call _freeIterator _iterator[581555])
          }
        }
        { scopeless type
          (581569 'move' _indexOfInterest[581554](581566 call iteratorIndex _iterator[581555]))
        }
        ForLoop[581556] for-expr
        {
          unknown d[81867] "index var" "insert auto destroy" "no doc"
          (581589 'end of statement')
          (581573 'move' d[81867] _indexOfInterest[581554])
          (581590 'end of statement' d[81867])
          {
            {
              unknown yret[581600] "YVV" "temp"
              unknown call_tmp[581607] "expr temp" "maybe param" "maybe type" "temp"
              (581610 'move' call_tmp[581607](81863 call chpl__accumgen op[581585] d[81867]))
              (581603 'move' yret[581600](581602 'deref' call_tmp[581607]))
              (581605 yield yret[581600])
              (581592 'end of statement' d[81867])
            }
          }
          label _continueLabel[581559]
          _indexOfInterest[581554]
          _iterator[581555]
        }
        label _breakLabel[581560]
      }
      (581598 return ret[581596])
    }
    function chpl__forexpr1[581527](arg iterExpr[581530]:_any[178](?), arg op[581534]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[581615] "RVV" "temp"
      unknown _iterator[581537] "expr temp" "maybe ref" "temp"
      (581539 'move' _iterator[581537] iterExpr[581530])
      unknown call_tmp[581622] "expr temp" "maybe param" "maybe type" "temp"
      (581625 'move' call_tmp[581622](581542 call chpl__loopexpr_iter1 _iterator[581537] op[581534]))
      (581620 'move' ret[581615](581619 'deref' call_tmp[581622]))
      (581617 return ret[581615])
    }
    unknown call_tmp[581627] "expr temp" "maybe param" "maybe type" "temp"
    (581630 'move' call_tmp[581627](81858 call _build_tuple(81856 'expand_tuple' data[81830])))
    unknown call_tmp[581632] "maybe param" "maybe type" "temp"
    (581635 'move' call_tmp[581632](581532 call chpl__forexpr1 call_tmp[581627] op[81826]))
    (581640 'iterator record set shape' call_tmp[581632](581638 'expand_tuple' data[81830]) 1)
    (541530 'init var' arr[81869] call_tmp[581632])
    (81872 'end of statement')
    (81875 call chpl__delete op[81826])
    (476743 'end of statement')
    (512205 'move' ret[512200](512204 'deref' arr[81869]))
    gotoReturn _end_chpl__scanIteratorZip[512198] _end_chpl__scanIteratorZip[512198]
    (476744 'end of statement' arr[81869])
    label _end_chpl__scanIteratorZip[512198]
    (512202 return ret[512200])
  }
  function chpl__scanIterator[81887](arg op[81885]:_any[178](?), arg data[81889]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512211] "RVV" "temp"
    unknown tmp[421708] "maybe param" "temp"
    (421719 'move' tmp[421708](81898 call isArray data[81889]))
    unknown call_tmp[628609] "expr temp" "maybe param" "maybe type" "temp"
    (628612 'move' call_tmp[628609](421721 call _cond_invalid tmp[421708]))
    if call_tmp[628609]
    {
      (421724 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown supportsPar[81923] "dead at end of block" "param"
    unknown tmp[560100] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560101] "maybe param" "temp"
    unknown call_tmp[628614] "expr temp" "maybe param" "maybe type" "temp"
    (628617 'move' call_tmp[628614](421709 call isTrue tmp[421708]))
    (560106 'move' tmp[560101](560104 call _cond_test call_tmp[628614]))
    if tmp[560101]
    {
      unknown tmp[560108] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628619] "expr temp" "maybe param" "maybe type" "temp"
      (628622 'move' call_tmp[628619](81920 call canResolveMethod data[81889] "_scan" op[81885]))
      (560110 'move' tmp[560108](421712 call isTrue call_tmp[628619]))
      (560115 'move' tmp[560100](560112 '_paramFoldLogical' tmp[560101] tmp[560108]))
    }
    {
      (560120 'move' tmp[560100](560117 '_paramFoldLogical' tmp[560101] 0))
    }
    (541532 'init var' supportsPar[81923] tmp[560100])
    (81926 'end of statement')
    unknown call_tmp[628624] "expr temp" "maybe param" "maybe type" "temp"
    (628627 'move' call_tmp[628624](81967 call _cond_test supportsPar[81923]))
    if call_tmp[628624]
    {
      unknown call_tmp[628631] "expr temp" "maybe param" "maybe type" "temp"
      (628634 'move' call_tmp[628631](81934 call(81929 call (partial) _scan _mt[243] data[81889]) op[81885]))
      (512216 'move' ret[512211](512215 'deref' call_tmp[628631]))
      gotoReturn _end_chpl__scanIterator[512209] _end_chpl__scanIterator[512209]
    }
    {
      (81941 call compilerWarning "scan has been serialized (see issue #12482)")
      (476748 'end of statement')
      unknown arr[81955] "dead at end of block" "insert auto destroy"
      function chpl__loopexpr_iter2[581662](arg iterator[581664]:_any[178](?), arg op[581700]:_any[178](?)) : _unknown[51] "iterator fn"
      {
        unknown ret[581711] "RVV" "temp"
        {
          unknown _indexOfInterest[581669] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[581670] "expr temp" "temp"
          (581679 'move' _iterator[581670](581677 call _getIterator iterator[581664]))
          Defer
          {
            {
              (581693 call _freeIterator _iterator[581670])
            }
          }
          { scopeless type
            (581684 'move' _indexOfInterest[581669](581681 call iteratorIndex _iterator[581670]))
          }
          ForLoop[581671] for-expr
          {
            unknown d[81953] "index var" "insert auto destroy" "no doc"
            (581704 'end of statement')
            (581688 'move' d[81953] _indexOfInterest[581669])
            (581705 'end of statement' d[81953])
            {
              {
                unknown yret[581715] "YVV" "temp"
                unknown call_tmp[581722] "expr temp" "maybe param" "maybe type" "temp"
                (581725 'move' call_tmp[581722](81950 call chpl__accumgen op[581700] d[81953]))
                (581718 'move' yret[581715](581717 'deref' call_tmp[581722]))
                (581720 yield yret[581715])
                (581707 'end of statement' d[81953])
              }
            }
            label _continueLabel[581674]
            _indexOfInterest[581669]
            _iterator[581670]
          }
          label _breakLabel[581675]
        }
        (581713 return ret[581711])
      }
      function chpl__forexpr2[581642](arg iterExpr[581645]:_any[178](?), arg op[581649]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
      {
        unknown ret[581730] "RVV" "temp"
        unknown _iterator[581652] "expr temp" "maybe ref" "temp"
        (581654 'move' _iterator[581652] iterExpr[581645])
        unknown call_tmp[581737] "expr temp" "maybe param" "maybe type" "temp"
        (581740 'move' call_tmp[581737](581657 call chpl__loopexpr_iter2 _iterator[581652] op[581649]))
        (581735 'move' ret[581730](581734 'deref' call_tmp[581737]))
        (581732 return ret[581730])
      }
      unknown call_tmp[581742] "maybe param" "maybe type" "temp"
      (581745 'move' call_tmp[581742](581647 call chpl__forexpr2 data[81889] op[81885]))
      (581749 'iterator record set shape' call_tmp[581742] data[81889] 1)
      (541534 'init var' arr[81955] call_tmp[581742])
      (81958 'end of statement')
      (81961 call chpl__delete op[81885])
      (476749 'end of statement')
      (512221 'move' ret[512211](512220 'deref' arr[81955]))
      gotoReturn _end_chpl__scanIterator[512209] _end_chpl__scanIterator[512209]
      (476750 'end of statement' arr[81955])
    }
    label _end_chpl__scanIterator[512209]
    (512213 return ret[512211])
    (355115 'used modules list'(81892 'use' Reflection[224799]))
  }
  function chpl__accumgen[81977](arg op[81975]:_any[178](?), arg d[81979]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512227] "RVV" "temp"
    (81989 call(81984 call (partial) accumulate _mt[243] op[81975]) d[81979])
    (476752 'end of statement')
    unknown call_tmp[628640] "expr temp" "maybe param" "maybe type" "temp"
    (628643 'move' call_tmp[628640](81997 call(81993 call (partial) generate _mt[243] op[81975])))
    (512232 'move' ret[512227](512231 'deref' call_tmp[628640]))
    (512229 return ret[512227])
  }
  function chpl__reduceCombine[82006](arg globalOp[82004]:_any[178](?), arg localOp[82008]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    {
      const tmp[82051] "const" "temp"
      unknown call_tmp[628645] "expr temp" "maybe param" "maybe type" "temp"
      (628648 'move' call_tmp[628645](82048 '_wide_get_locale' globalOp[82004]))
      (82052 'move' tmp[82051](82049 'deref' call_tmp[628645]))
      {
        unknown call_tmp[628652] "expr temp" "maybe param" "maybe type" "temp"
        (628655 'move' call_tmp[628652](82014 call l _mt[243] globalOp[82004]))
        (82023 call(82019 call (partial) lock _mt[243] call_tmp[628652]))
        (476754 'end of statement')
        (82034 call(82029 call (partial) combine _mt[243] globalOp[82004]) localOp[82008])
        (476755 'end of statement')
        unknown call_tmp[628663] "expr temp" "maybe param" "maybe type" "temp"
        (628666 'move' call_tmp[628663](82037 call l _mt[243] globalOp[82004]))
        (82046 call(82042 call (partial) unlock _mt[243] call_tmp[628663]))
      }
      (82055 'elided on block' 0 tmp[82051])
    }
    (512234 return _void[55])
  }
  function chpl__cleanupLocalOp[82066](arg globalOp[82064]:_any[178](?), arg localOp[82068]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (82072 call chpl__delete localOp[82068])
    (512236 return _void[55])
  }
  function chpl_sumTypeIsSame[82082](arg eltType[82080]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512240] "RVV" "param" "temp"
    unknown tmp[421729] "maybe param" "temp"
    (421740 'move' tmp[421729](82087 call isNumeric eltType[82080]))
    unknown call_tmp[628670] "expr temp" "maybe param" "maybe type" "temp"
    (628673 'move' call_tmp[628670](421742 call _cond_invalid tmp[421729]))
    if call_tmp[628670]
    {
      (421745 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560127] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560128] "maybe param" "temp"
    unknown call_tmp[628675] "expr temp" "maybe param" "maybe type" "temp"
    (628678 'move' call_tmp[628675](421730 call isTrue tmp[421729]))
    (560133 'move' tmp[560128](560131 call _cond_test call_tmp[628675]))
    if tmp[560128]
    {
      (560138 'move' tmp[560127](560135 '_paramFoldLogical' tmp[560128] 1))
    }
    {
      unknown tmp[560140] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628680] "expr temp" "maybe param" "maybe type" "temp"
      (628683 'move' call_tmp[628680](82091 call isString eltType[82080]))
      (560142 'move' tmp[560140](421734 call isTrue call_tmp[628680]))
      (560147 'move' tmp[560127](560144 '_paramFoldLogical' tmp[560128] tmp[560140]))
    }
    unknown call_tmp[628685] "expr temp" "maybe param" "maybe type" "temp"
    (628688 'move' call_tmp[628685](82164 call _cond_test tmp[560127]))
    if call_tmp[628685]
    {
      (512245 'move' ret[512240](512244 'deref' 1))
      gotoReturn _end_chpl_sumTypeIsSame[512238] _end_chpl_sumTypeIsSame[512238]
    }
    {
      unknown call_tmp[628690] "expr temp" "maybe param" "maybe type" "temp"
      (628693 'move' call_tmp[628690](82101 call isDomain eltType[82080]))
      unknown call_tmp[628695] "expr temp" "maybe param" "maybe type" "temp"
      (628698 'move' call_tmp[628695](82159 call _cond_test call_tmp[628690]))
      if call_tmp[628695]
      {
        unknown d[82103] "dead at end of block" "insert auto destroy"
        (541536 'default init var' d[82103] eltType[82080])
        (82106 'end of statement')
        unknown call_tmp[628700] "expr temp" "maybe param" "maybe type" "temp"
        (628703 'move' call_tmp[628700](82111 call isAssociativeDom d[82103]))
        (512250 'move' ret[512240](512249 'deref' call_tmp[628700]))
        gotoReturn _end_chpl_sumTypeIsSame[512238] _end_chpl_sumTypeIsSame[512238]
        (476760 'end of statement' d[82103])
      }
      {
        unknown call_tmp[628705] "expr temp" "maybe param" "maybe type" "temp"
        (628708 'move' call_tmp[628705](82117 call isArray eltType[82080]))
        unknown call_tmp[628710] "expr temp" "maybe param" "maybe type" "temp"
        (628713 'move' call_tmp[628710](82155 call _cond_test call_tmp[628705]))
        if call_tmp[628710]
        {
          unknown arrInstType[82123] "dead at end of block" "insert auto destroy" "type variable"(82122 'static field type' eltType[82080] "_instance")
          (541541 'move' arrInstType[82123](541538 'static field type' eltType[82080] "_instance"))
          unknown instanceObj[82129] "dead at end of block" "insert auto destroy"
          unknown call_tmp[628715] "expr temp" "maybe param" "maybe type" "temp"
          (628718 'move' call_tmp[628715](82128 'to nilable class from type' arrInstType[82123]))
          (541543 'default init var' instanceObj[82129] call_tmp[628715])
          (82132 'end of statement' arrInstType[82123])
          unknown call_tmp[628720] "expr temp" "maybe param" "maybe type" "temp"
          (628723 'move' call_tmp[628720](82136 call postfix! instanceObj[82129]))
          unknown call_tmp[628727] "expr temp" "maybe param" "maybe type" "temp"
          (628730 'move' call_tmp[628727](82138 call eltType _mt[243] call_tmp[628720]))
          unknown instanceEltType[82142] "dead at end of block" "insert auto destroy" "type variable"(82141 'static typeof' call_tmp[628727])
          unknown call_tmp[628732] "expr temp" "maybe param" "maybe type" "temp"
          (628735 'move' call_tmp[628732](541549 call postfix! instanceObj[82129]))
          unknown call_tmp[628739] "expr temp" "maybe param" "maybe type" "temp"
          (628742 'move' call_tmp[628739](541547 call eltType _mt[243] call_tmp[628732]))
          (541552 'move' instanceEltType[82142](541545 'static typeof' call_tmp[628739]))
          (476763 'end of statement' instanceObj[82129])
          unknown call_tmp[628744] "expr temp" "maybe param" "maybe type" "temp"
          (628747 'move' call_tmp[628744](82148 call chpl_sumTypeIsSame instanceEltType[82142]))
          (512255 'move' ret[512240](512254 'deref' call_tmp[628744]))
          gotoReturn _end_chpl_sumTypeIsSame[512238] _end_chpl_sumTypeIsSame[512238]
          (476765 'end of statement' instanceEltType[82142])
        }
        {
          (512260 'move' ret[512240](512259 'deref' 0))
          gotoReturn _end_chpl_sumTypeIsSame[512238] _end_chpl_sumTypeIsSame[512238]
        }
      }
    }
    label _end_chpl_sumTypeIsSame[512238]
    (512242 return ret[512240])
  }
  function chpl__sumType[82176](arg eltType[82174]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[512266] "RVV" "temp" "type variable"
    unknown call_tmp[628749] "expr temp" "maybe param" "maybe type" "temp"
    (628752 'move' call_tmp[628749](82181 call chpl_sumTypeIsSame eltType[82174]))
    unknown call_tmp[628754] "expr temp" "maybe param" "maybe type" "temp"
    (628757 'move' call_tmp[628754](82287 call _cond_test call_tmp[628749]))
    if call_tmp[628754]
    {
      (512271 'move' ret[512266](512270 'deref' eltType[82174]))
      gotoReturn _end_chpl__sumType[512264] _end_chpl__sumType[512264]
    }
    {
      unknown x[82187] "dead at end of block" "insert auto destroy"
      (541554 'default init var' x[82187] eltType[82174])
      (82190 'end of statement')
      unknown call_tmp[628759] "expr temp" "maybe param" "maybe type" "temp"
      (628762 'move' call_tmp[628759](82195 call isArray x[82187]))
      unknown call_tmp[628764] "expr temp" "maybe param" "maybe type" "temp"
      (628767 'move' call_tmp[628764](82283 call _cond_test call_tmp[628759]))
      if call_tmp[628764]
      {
        unknown xET[82200] "dead at end of block" "insert auto destroy" "type variable"(82197 call eltType _mt[243] x[82187])
        (541560 'move' xET[82200](541557 call eltType _mt[243] x[82187]))
        (476769 'end of statement' x[82187])
        unknown xST[82208] "dead at end of block" "insert auto destroy" "type variable"(82207 call chpl__sumType xET[82200])
        (541565 'move' xST[82208](541563 call chpl__sumType xET[82200]))
        (476771 'end of statement' xET[82200])
        unknown call_tmp[628773] "expr temp" "maybe param" "maybe type" "temp"
        (628776 'move' call_tmp[628773](82213 call == xET[82200] xST[82208]))
        unknown call_tmp[628778] "expr temp" "maybe param" "maybe type" "temp"
        (628781 'move' call_tmp[628778](82228 call _cond_test call_tmp[628773]))
        if call_tmp[628778]
        {
          (512276 'move' ret[512266](512275 'deref' eltType[82174]))
          gotoReturn _end_chpl__sumType[512264] _end_chpl__sumType[512264]
        }
        {
          function chpl__loopexpr_iter3[581838](arg iterator[581840]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[581978] "RVV" "temp"
            {
              unknown _indexOfInterest[581845] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581846] "expr temp" "temp"
              (581855 'move' _iterator[581846](581853 call _getIterator iterator[581840]))
              Defer
              {
                {
                  (581872 call _freeIterator _iterator[581846])
                }
              }
              { scopeless type
                (581860 'move' _indexOfInterest[581845](581857 call iteratorIndex _iterator[581846]))
              }
              ForLoop[581847] for-expr
              {
                unknown chpl__elidedIdx[581865] "index var" "insert auto destroy"
                (581972 'end of statement')
                (581867 'move' chpl__elidedIdx[581865] _indexOfInterest[581845])
                (581973 'end of statement' chpl__elidedIdx[581865])
                {
                  {
                    unknown yret[581982] "YVV" "temp"
                    (581985 'move' yret[581982](581984 'deref' xST[82208]))
                    (581987 yield yret[581982])
                  }
                }
                label _continueLabel[581850]
                _indexOfInterest[581845]
                _iterator[581846]
              }
              label _breakLabel[581851]
            }
            (581980 return ret[581978])
          }
          function chpl__loopexpr_iter3[581879](param arg tag[581883]:iterKind[453], arg iterator[581886]:_any[178](?)) : _unknown[51] "fn returns iterator"
          {
            unknown ret[582014] "RVV" "temp"
            const _leaderIterator[581898] "const" "expr temp" "temp"
            (581903 'move' _leaderIterator[581898](581900 call _toLeader iterator[581886]))
            (582019 'move' ret[582014](582018 'deref' _leaderIterator[581898]))
            (582016 return ret[582014])
          }
          where {
            unknown tmp[581990] "maybe param" "temp"
            (582001 'move' tmp[581990](581888 call == tag[581883] leader[447]))
            unknown call_tmp[582048] "expr temp" "maybe param" "maybe type" "temp"
            (582051 'move' call_tmp[582048](582003 call _cond_invalid tmp[581990]))
            if call_tmp[582048]
            {
              (582006 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[582021] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[582022] "maybe param" "temp"
            unknown call_tmp[582053] "expr temp" "maybe param" "maybe type" "temp"
            (582056 'move' call_tmp[582053](581991 call isTrue tmp[581990]))
            (582027 'move' tmp[582022](582025 call _cond_test call_tmp[582053]))
            if tmp[582022]
            {
              unknown tmp[582029] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[582058] "expr temp" "maybe param" "maybe type" "temp"
              (582061 'move' call_tmp[582058](581892 'call resolves' "_toLeader" iterator[581886]))
              (582031 'move' tmp[582029](581994 call isTrue call_tmp[582058]))
              (582036 'move' tmp[582021](582033 '_paramFoldLogical' tmp[582022] tmp[582029]))
            }
            {
              (582041 'move' tmp[582021](582038 '_paramFoldLogical' tmp[582022] 0))
            }
            (748461 call chpl_statementLevelSymbol tmp[582021])
          }
          function chpl__loopexpr_iter3[581907](param arg tag[581911]:iterKind[453], arg followThis[581914]:_any[178](?), arg iterator[581916]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[582071] "RVV" "temp"
            const _followerIterator[581923] "const" "expr temp" "temp"
            (581929 'move' _followerIterator[581923](581925 call _toFollower iterator[581916] followThis[581914]))
            {
              unknown _indexOfInterest[581936] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581937] "expr temp" "temp"
              (581946 'move' _iterator[581937](581944 call _getIterator _followerIterator[581923]))
              Defer
              {
                {
                  (581963 call _freeIterator _iterator[581937])
                }
              }
              { scopeless type
                (581951 'move' _indexOfInterest[581936](581948 call iteratorIndex _iterator[581937]))
              }
              ForLoop[581938] lowered-forall for-expr
              {
                unknown chpl__elidedIdx[581956] "index var" "insert auto destroy"
                (582065 'end of statement')
                (581958 'move' chpl__elidedIdx[581956] _indexOfInterest[581936])
                (582066 'end of statement' chpl__elidedIdx[581956])
                {
                  {
                    unknown yret[582075] "YVV" "temp"
                    (582078 'move' yret[582075](582077 'deref' xST[82208]))
                    (582080 yield yret[582075])
                  }
                }
                label _continueLabel[581941]
                _indexOfInterest[581936]
                _iterator[581937]
              }
              label _breakLabel[581942]
            }
            (582073 return ret[582071])
          }
          where {
            (581919 call == tag[581911] follower[449])
          }
          function chpl__forallexpr3[581751](arg iterExpr[581754]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "maybe type" "fn returns iterator"
          {
            unknown ret[582092] "RVV" "maybe type" "temp"
            function _isArrayTypeFn[581760]() : _unknown[51] "inline"
            {
              unknown _iterator[581765] "temp"
              (581770 'move' _iterator[581765](581767 call _getIterator iterExpr[581754]))
              unknown _indexOfInterest[581772] "an _indexOfInterest or chpl__followIdx variable" "temp"
              (581777 'move' _indexOfInterest[581772](581774 call iteratorIndex _iterator[581765]))
              unknown chpl__elidedIdx[581783] "index var" "insert auto destroy"
              (582082 'end of statement')
              (581785 'move' chpl__elidedIdx[581783] _indexOfInterest[581772])
              (582083 'end of statement' chpl__elidedIdx[581783])
              unknown isType_result[581787] "param" "temp"
              {
                (581793 'move' isType_result[581787](581791 call isType xST[82208]))
              }
              if isType_result[581787]
              {
                (581796 'move' _isArrayType[581763] 1)
              }
              {
                (581799 'move' _isArrayType[581763] 0)
              }
              (582088 return _void[55])
            }
            unknown _isArrayType[581763] "maybe param" "temp"
            { scopeless type
              (581806 call _isArrayTypeFn[581760])
            }
            if _isArrayType[581763]
            {
              unknown _arrayType[581808] "expr temp" "maybe type" "temp"
              unknown _domain[581811] "expr temp" "no auto destroy" "temp"
              (581816 'move' _domain[581811](581813 call chpl__ensureDomainExpr iterExpr[581754]))
              {
                (581823 'move' _arrayType[581808](581820 call chpl__buildArrayRuntimeType _domain[581811] xST[82208]))
              }
              (582097 'move' ret[582092](582096 'deref' _arrayType[581808]))
              gotoReturn _end_chpl__forallexpr3[582090] _end_chpl__forallexpr3[582090]
            }
            {
              unknown _iterator[581829] "expr temp" "maybe ref" "temp"
              (581831 'move' _iterator[581829] iterExpr[581754])
              unknown call_tmp[582106] "expr temp" "maybe param" "maybe type" "temp"
              (582109 'move' call_tmp[582106](581834 call chpl__loopexpr_iter3 _iterator[581829]))
              (582102 'move' ret[582092](582101 'deref' call_tmp[582106]))
              gotoReturn _end_chpl__forallexpr3[582090] _end_chpl__forallexpr3[582090]
            }
            label _end_chpl__forallexpr3[582090]
            (582094 return ret[582092])
          }
          unknown call_tmp[582113] "expr temp" "maybe param" "maybe type" "temp"
          (582116 'move' call_tmp[582113](82219 call _dom _mt[243] x[82187]))
          unknown call_tmp[582118] "expr temp" "maybe param" "maybe type" "temp"
          (582121 'move' call_tmp[582118](581756 call chpl__forallexpr3 call_tmp[582113]))
          (582125 'iterator record set shape' call_tmp[582118] call_tmp[582113] 0)
          (512281 'move' ret[512266](512280 'deref' call_tmp[582118]))
          gotoReturn _end_chpl__sumType[512264] _end_chpl__sumType[512264]
          (476774 'end of statement' x[82187] xST[82208])
        }
      }
      {
        unknown call_tmp[628783] "expr temp" "maybe param" "maybe type" "temp"
        (628786 'move' call_tmp[628783](82243 call canResolve "+" x[82187] x[82187]))
        unknown call_tmp[628788] "expr temp" "maybe param" "maybe type" "temp"
        (628791 'move' call_tmp[628788](82244 call ! call_tmp[628783]))
        unknown call_tmp[628793] "expr temp" "maybe param" "maybe type" "temp"
        (628796 'move' call_tmp[628793](82271 call _cond_test call_tmp[628788]))
        if call_tmp[628793]
        {
          unknown call_tmp[628798] "expr temp" "maybe param" "maybe type" "temp"
          (628801 'move' call_tmp[628798](82267 call _cast string[26] eltType[82174]))
          (82269 call compilerError "+ reduce cannot be used on values of the type " call_tmp[628798])
        }
        { scopeless type
          unknown call_type_tmp[491991] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[628803] "expr temp" "maybe param" "maybe type" "temp"
          (628806 'move' call_tmp[628803](82278 call + x[82187] x[82187]))
          (491995 'move' call_type_tmp[491991](82280 'typeof' call_tmp[628803]))
        }
        (512286 'move' ret[512266](512285 'deref' call_type_tmp[491991]))
        gotoReturn _end_chpl__sumType[512264] _end_chpl__sumType[512264]
        (476778 'end of statement' x[82187] x[82187])
        (355117 'used modules list'(82235 'use' Reflection[224799]))
      }
    }
    label _end_chpl__sumType[512264]
    (512268 return ret[512266])
  }
  type ReduceScanOp[82301] val super[355663]:object[22] "super class" val l[82296]:chpl_LocalSpinlock[187398] chpl_LocalSpinlock[187398]
  function SumReduceScanOp[82413](?).identity[82320](arg _mt[82417]:_MT[238], arg this[82415]:SumReduceScanOp[82413](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[512292] "RVV" "temp"
    unknown x[82326] "dead at end of block" "insert auto destroy"
    unknown call_tmp[628810] "expr temp" "maybe param" "maybe type" "temp"
    (628813 'move' call_tmp[628810](376406 call eltType _mt[243] this[82415]))
    unknown call_tmp[628815] "expr temp" "maybe param" "maybe type" "temp"
    (628818 'move' call_tmp[628815](82325 call chpl__sumType call_tmp[628810]))
    (541567 'default init var' x[82326] call_tmp[628815])
    (82329 'end of statement')
    (512297 'move' ret[512292](512296 'deref' x[82326]))
    gotoReturn _end_identity[512290] _end_identity[512290]
    (476781 'end of statement' x[82326])
    label _end_identity[512290]
    (512294 return ret[512292])
  }
  function SumReduceScanOp[82413](?).accumulate[82340](arg _mt[82421]:_MT[238], arg this[82419]:SumReduceScanOp[82413](?), arg x[82338]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628822] "expr temp" "maybe param" "maybe type" "temp"
    (628825 'move' call_tmp[628822](376412 call value _mt[243] this[82419]))
    (82344 call += call_tmp[628822] x[82338])
    (512301 return _void[55])
  }
  function SumReduceScanOp[82413](?).accumulateOntoState[82354](arg _mt[82425]:_MT[238], arg this[82423]:SumReduceScanOp[82413](?), ref arg state[82352]:_any[178](?), arg x[82356]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82360 call += state[82352] x[82356])
    (512303 return _void[55])
  }
  function SumReduceScanOp[82413](?).combine[82370](arg _mt[82429]:_MT[238], arg this[82427]:SumReduceScanOp[82413](?), arg x[82368]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628829] "expr temp" "maybe param" "maybe type" "temp"
    (628832 'move' call_tmp[628829](376420 call value _mt[243] this[82427]))
    unknown call_tmp[628836] "expr temp" "maybe param" "maybe type" "temp"
    (628839 'move' call_tmp[628836](82376 call value _mt[243] x[82368]))
    (82379 call += call_tmp[628829] call_tmp[628836])
    (512305 return _void[55])
  }
  function SumReduceScanOp[82413](?).generate[82387](arg _mt[82433]:_MT[238], arg this[82431]:SumReduceScanOp[82413](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512309] "RVV" "temp"
    unknown call_tmp[628843] "expr temp" "maybe param" "maybe type" "temp"
    (628846 'move' call_tmp[628843](376425 call value _mt[243] this[82431]))
    (512314 'move' ret[512309](512313 'deref' call_tmp[628843]))
    (512311 return ret[512309])
  }
  function SumReduceScanOp[82413](?).clone[82397](arg _mt[82437]:_MT[238], arg this[82435]:SumReduceScanOp[82413](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512318] "RVV" "temp"
    unknown call_tmp[628850] "expr temp" "maybe param" "maybe type" "temp"
    (628853 'move' call_tmp[628850](376434 call eltType _mt[243] this[82435]))
    unknown call_tmp[628855] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628858 'move' call_tmp[628855](747833 'new' SumReduceScanOp[376429](?)(eltType = call_tmp[628850])(_chpl_manager = unmanaged[220](?))))
    (512323 'move' ret[512318](512322 'deref' call_tmp[628855]))
    (512320 return ret[512318])
  }
  type SumReduceScanOp[82413](?) val super[355665]:ReduceScanOp[82301] "super class" unknown eltType[82307] "type variable" unknown value[82314](82313 call chpl__sumType eltType[82307])
  type SumReduceScanOp[376429](?)
  function ProductReduceScanOp[82542](?).identity[82456](arg _mt[82546]:_MT[238], arg this[82544]:ProductReduceScanOp[82542](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512327] "RVV" "temp"
    unknown call_tmp[628862] "expr temp" "maybe param" "maybe type" "temp"
    (628865 'move' call_tmp[628862](376440 call eltType _mt[243] this[82544]))
    unknown call_tmp[628867] "expr temp" "maybe param" "maybe type" "temp"
    (628870 'move' call_tmp[628867](82461 call _prod_id call_tmp[628862]))
    (512332 'move' ret[512327](512331 'deref' call_tmp[628867]))
    (512329 return ret[512327])
  }
  function ProductReduceScanOp[82542](?).accumulate[82471](arg _mt[82550]:_MT[238], arg this[82548]:ProductReduceScanOp[82542](?), arg x[82469]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628874] "expr temp" "maybe param" "maybe type" "temp"
    (628877 'move' call_tmp[628874](376445 call value _mt[243] this[82548]))
    (82475 call *= call_tmp[628874] x[82469])
    (512334 return _void[55])
  }
  function ProductReduceScanOp[82542](?).accumulateOntoState[82485](arg _mt[82554]:_MT[238], arg this[82552]:ProductReduceScanOp[82542](?), ref arg state[82483]:_any[178](?), arg x[82487]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82491 call *= state[82483] x[82487])
    (512336 return _void[55])
  }
  function ProductReduceScanOp[82542](?).combine[82501](arg _mt[82558]:_MT[238], arg this[82556]:ProductReduceScanOp[82542](?), arg x[82499]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628881] "expr temp" "maybe param" "maybe type" "temp"
    (628884 'move' call_tmp[628881](376453 call value _mt[243] this[82556]))
    unknown call_tmp[628888] "expr temp" "maybe param" "maybe type" "temp"
    (628891 'move' call_tmp[628888](82505 call value _mt[243] x[82499]))
    (82508 call *= call_tmp[628881] call_tmp[628888])
    (512338 return _void[55])
  }
  function ProductReduceScanOp[82542](?).generate[82516](arg _mt[82562]:_MT[238], arg this[82560]:ProductReduceScanOp[82542](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512342] "RVV" "temp"
    unknown call_tmp[628895] "expr temp" "maybe param" "maybe type" "temp"
    (628898 'move' call_tmp[628895](376458 call value _mt[243] this[82560]))
    (512347 'move' ret[512342](512346 'deref' call_tmp[628895]))
    (512344 return ret[512342])
  }
  function ProductReduceScanOp[82542](?).clone[82526](arg _mt[82566]:_MT[238], arg this[82564]:ProductReduceScanOp[82542](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512351] "RVV" "temp"
    unknown call_tmp[628902] "expr temp" "maybe param" "maybe type" "temp"
    (628905 'move' call_tmp[628902](376467 call eltType _mt[243] this[82564]))
    unknown call_tmp[628907] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628910 'move' call_tmp[628907](747834 'new' ProductReduceScanOp[376462](?)(eltType = call_tmp[628902])(_chpl_manager = unmanaged[220](?))))
    (512356 'move' ret[512351](512355 'deref' call_tmp[628907]))
    (512353 return ret[512351])
  }
  type ProductReduceScanOp[82542](?) val super[355667]:ReduceScanOp[82301] "super class" unknown eltType[82443] "type variable" unknown value[82450](82449 call _prod_id eltType[82443])
  type ProductReduceScanOp[376462](?)
  function MaxReduceScanOp[82683](?).identity[82585](arg _mt[82687]:_MT[238], arg this[82685]:MaxReduceScanOp[82683](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512360] "RVV" "temp"
    unknown call_tmp[628914] "expr temp" "maybe param" "maybe type" "temp"
    (628917 'move' call_tmp[628914](376473 call eltType _mt[243] this[82685]))
    unknown call_tmp[628919] "expr temp" "maybe param" "maybe type" "temp"
    (628922 'move' call_tmp[628919](82590 call min call_tmp[628914]))
    (512365 'move' ret[512360](512364 'deref' call_tmp[628919]))
    (512362 return ret[512360])
  }
  function MaxReduceScanOp[82683](?).accumulate[82600](arg _mt[82691]:_MT[238], arg this[82689]:MaxReduceScanOp[82683](?), arg x[82598]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628926] "expr temp" "maybe param" "maybe type" "temp"
    (628929 'move' call_tmp[628926](376478 call value _mt[243] this[82689]))
    unknown call_tmp[628933] "expr temp" "maybe param" "maybe type" "temp"
    (628936 'move' call_tmp[628933](376484 call value _mt[243] this[82689]))
    unknown call_tmp[628938] "expr temp" "maybe param" "maybe type" "temp"
    (628941 'move' call_tmp[628938](82607 call max x[82598] call_tmp[628933]))
    (82608 call = call_tmp[628926] call_tmp[628938])
    (512367 return _void[55])
  }
  function MaxReduceScanOp[82683](?).accumulateOntoState[82618](arg _mt[82695]:_MT[238], arg this[82693]:MaxReduceScanOp[82683](?), ref arg state[82616]:_any[178](?), arg x[82620]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628943] "expr temp" "maybe param" "maybe type" "temp"
    (628946 'move' call_tmp[628943](82627 call max state[82616] x[82620]))
    (82628 call = state[82616] call_tmp[628943])
    (512369 return _void[55])
  }
  function MaxReduceScanOp[82683](?).combine[82638](arg _mt[82699]:_MT[238], arg this[82697]:MaxReduceScanOp[82683](?), arg x[82636]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628950] "expr temp" "maybe param" "maybe type" "temp"
    (628953 'move' call_tmp[628950](376492 call value _mt[243] this[82697]))
    unknown call_tmp[628957] "expr temp" "maybe param" "maybe type" "temp"
    (628960 'move' call_tmp[628957](376497 call value _mt[243] this[82697]))
    unknown call_tmp[628964] "expr temp" "maybe param" "maybe type" "temp"
    (628967 'move' call_tmp[628964](82645 call value _mt[243] x[82636]))
    unknown call_tmp[628969] "expr temp" "maybe param" "maybe type" "temp"
    (628972 'move' call_tmp[628969](82648 call max call_tmp[628957] call_tmp[628964]))
    (82649 call = call_tmp[628950] call_tmp[628969])
    (512371 return _void[55])
  }
  function MaxReduceScanOp[82683](?).generate[82657](arg _mt[82703]:_MT[238], arg this[82701]:MaxReduceScanOp[82683](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512375] "RVV" "temp"
    unknown call_tmp[628976] "expr temp" "maybe param" "maybe type" "temp"
    (628979 'move' call_tmp[628976](376502 call value _mt[243] this[82701]))
    (512380 'move' ret[512375](512379 'deref' call_tmp[628976]))
    (512377 return ret[512375])
  }
  function MaxReduceScanOp[82683](?).clone[82667](arg _mt[82707]:_MT[238], arg this[82705]:MaxReduceScanOp[82683](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512384] "RVV" "temp"
    unknown call_tmp[628983] "expr temp" "maybe param" "maybe type" "temp"
    (628986 'move' call_tmp[628983](376511 call eltType _mt[243] this[82705]))
    unknown call_tmp[628988] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628991 'move' call_tmp[628988](747835 'new' MaxReduceScanOp[376506](?)(eltType = call_tmp[628983])(_chpl_manager = unmanaged[220](?))))
    (512389 'move' ret[512384](512388 'deref' call_tmp[628988]))
    (512386 return ret[512384])
  }
  type MaxReduceScanOp[82683](?) val super[355669]:ReduceScanOp[82301] "super class" unknown eltType[82572] "type variable" unknown value[82579](82578 call min eltType[82572])
  type MaxReduceScanOp[376506](?)
  function MinReduceScanOp[82824](?).identity[82726](arg _mt[82828]:_MT[238], arg this[82826]:MinReduceScanOp[82824](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512393] "RVV" "temp"
    unknown call_tmp[628995] "expr temp" "maybe param" "maybe type" "temp"
    (628998 'move' call_tmp[628995](376517 call eltType _mt[243] this[82826]))
    unknown call_tmp[629000] "expr temp" "maybe param" "maybe type" "temp"
    (629003 'move' call_tmp[629000](82731 call max call_tmp[628995]))
    (512398 'move' ret[512393](512397 'deref' call_tmp[629000]))
    (512395 return ret[512393])
  }
  function MinReduceScanOp[82824](?).accumulate[82741](arg _mt[82832]:_MT[238], arg this[82830]:MinReduceScanOp[82824](?), arg x[82739]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629007] "expr temp" "maybe param" "maybe type" "temp"
    (629010 'move' call_tmp[629007](376522 call value _mt[243] this[82830]))
    unknown call_tmp[629014] "expr temp" "maybe param" "maybe type" "temp"
    (629017 'move' call_tmp[629014](376528 call value _mt[243] this[82830]))
    unknown call_tmp[629019] "expr temp" "maybe param" "maybe type" "temp"
    (629022 'move' call_tmp[629019](82748 call min x[82739] call_tmp[629014]))
    (82749 call = call_tmp[629007] call_tmp[629019])
    (512400 return _void[55])
  }
  function MinReduceScanOp[82824](?).accumulateOntoState[82759](arg _mt[82836]:_MT[238], arg this[82834]:MinReduceScanOp[82824](?), ref arg state[82757]:_any[178](?), arg x[82761]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629024] "expr temp" "maybe param" "maybe type" "temp"
    (629027 'move' call_tmp[629024](82768 call min state[82757] x[82761]))
    (82769 call = state[82757] call_tmp[629024])
    (512402 return _void[55])
  }
  function MinReduceScanOp[82824](?).combine[82779](arg _mt[82840]:_MT[238], arg this[82838]:MinReduceScanOp[82824](?), arg x[82777]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629031] "expr temp" "maybe param" "maybe type" "temp"
    (629034 'move' call_tmp[629031](376536 call value _mt[243] this[82838]))
    unknown call_tmp[629038] "expr temp" "maybe param" "maybe type" "temp"
    (629041 'move' call_tmp[629038](376541 call value _mt[243] this[82838]))
    unknown call_tmp[629045] "expr temp" "maybe param" "maybe type" "temp"
    (629048 'move' call_tmp[629045](82786 call value _mt[243] x[82777]))
    unknown call_tmp[629050] "expr temp" "maybe param" "maybe type" "temp"
    (629053 'move' call_tmp[629050](82789 call min call_tmp[629038] call_tmp[629045]))
    (82790 call = call_tmp[629031] call_tmp[629050])
    (512404 return _void[55])
  }
  function MinReduceScanOp[82824](?).generate[82798](arg _mt[82844]:_MT[238], arg this[82842]:MinReduceScanOp[82824](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512408] "RVV" "temp"
    unknown call_tmp[629057] "expr temp" "maybe param" "maybe type" "temp"
    (629060 'move' call_tmp[629057](376546 call value _mt[243] this[82842]))
    (512413 'move' ret[512408](512412 'deref' call_tmp[629057]))
    (512410 return ret[512408])
  }
  function MinReduceScanOp[82824](?).clone[82808](arg _mt[82848]:_MT[238], arg this[82846]:MinReduceScanOp[82824](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512417] "RVV" "temp"
    unknown call_tmp[629064] "expr temp" "maybe param" "maybe type" "temp"
    (629067 'move' call_tmp[629064](376555 call eltType _mt[243] this[82846]))
    unknown call_tmp[629069] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629072 'move' call_tmp[629069](747836 'new' MinReduceScanOp[376550](?)(eltType = call_tmp[629064])(_chpl_manager = unmanaged[220](?))))
    (512422 'move' ret[512417](512421 'deref' call_tmp[629069]))
    (512419 return ret[512417])
  }
  type MinReduceScanOp[82824](?) val super[355671]:ReduceScanOp[82301] "super class" unknown eltType[82713] "type variable" unknown value[82720](82719 call max eltType[82713])
  type MinReduceScanOp[376550](?)
  function minmax[83075](?).identity[82874](arg _mt[83079]:_MT[238], arg this[83077]:minmax[83075](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512426] "RVV" "temp"
    unknown call_tmp[629076] "expr temp" "maybe param" "maybe type" "temp"
    (629079 'move' call_tmp[629076](376562 call eltType _mt[243] this[83077]))
    unknown call_tmp[629081] "expr temp" "maybe param" "maybe type" "temp"
    (629084 'move' call_tmp[629081](82879 call max call_tmp[629076]))
    unknown call_tmp[629088] "expr temp" "maybe param" "maybe type" "temp"
    (629091 'move' call_tmp[629088](376567 call eltType _mt[243] this[83077]))
    unknown call_tmp[629093] "expr temp" "maybe param" "maybe type" "temp"
    (629096 'move' call_tmp[629093](82883 call min call_tmp[629088]))
    unknown call_tmp[629098] "expr temp" "maybe param" "maybe type" "temp"
    (629101 'move' call_tmp[629098](82885 call _build_tuple call_tmp[629081] call_tmp[629093]))
    (512431 'move' ret[512426](512430 'deref' call_tmp[629098]))
    (512428 return ret[512426])
  }
  function minmax[83075](?).accumulateOntoState[82896](arg _mt[83083]:_MT[238], arg this[83081]:minmax[83075](?), ref arg state[82894]:_any[178](?), arg x[82899] :
  (376572 call eltType _mt[243] this[83081])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629105] "expr temp" "maybe param" "maybe type" "temp"
    (629108 'move' call_tmp[629105](82905 call state[82894] 0))
    unknown call_tmp[629110] "expr temp" "maybe param" "maybe type" "temp"
    (629113 'move' call_tmp[629110](82910 call state[82894] 0))
    unknown call_tmp[629115] "expr temp" "maybe param" "maybe type" "temp"
    (629118 'move' call_tmp[629115](82913 call min call_tmp[629110] x[82899]))
    (82914 call = call_tmp[629105] call_tmp[629115])
    (476807 'end of statement')
    unknown call_tmp[629120] "expr temp" "maybe param" "maybe type" "temp"
    (629123 'move' call_tmp[629120](82921 call state[82894] 1))
    unknown call_tmp[629125] "expr temp" "maybe param" "maybe type" "temp"
    (629128 'move' call_tmp[629125](82926 call state[82894] 1))
    unknown call_tmp[629130] "expr temp" "maybe param" "maybe type" "temp"
    (629133 'move' call_tmp[629130](82929 call max call_tmp[629125] x[82899]))
    (82930 call = call_tmp[629120] call_tmp[629130])
    (512433 return _void[55])
  }
  function minmax[83075](?).accumulateOntoState[82939](arg _mt[83087]:_MT[238], arg this[83085]:minmax[83075](?), ref arg state[82937]:_any[178](?), arg other[82945] :
  unknown call_tmp[629137] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629142] "expr temp" "maybe param" "maybe type" "temp"
    (629145 'move' call_tmp[629142](82951 call state[82937] 0))
    unknown call_tmp[629147] "expr temp" "maybe param" "maybe type" "temp"
    (629150 'move' call_tmp[629147](82956 call state[82937] 0))
    unknown call_tmp[629152] "expr temp" "maybe param" "maybe type" "temp"
    (629155 'move' call_tmp[629152](82961 call other[82945] 0))
    unknown call_tmp[629157] "expr temp" "maybe param" "maybe type" "temp"
    (629160 'move' call_tmp[629157](82962 call min call_tmp[629147] call_tmp[629152]))
    (82963 call = call_tmp[629142] call_tmp[629157])
    (476809 'end of statement')
    unknown call_tmp[629162] "expr temp" "maybe param" "maybe type" "temp"
    (629165 'move' call_tmp[629162](82970 call state[82937] 1))
    unknown call_tmp[629167] "expr temp" "maybe param" "maybe type" "temp"
    (629170 'move' call_tmp[629167](82975 call state[82937] 1))
    unknown call_tmp[629172] "expr temp" "maybe param" "maybe type" "temp"
    (629175 'move' call_tmp[629172](82980 call other[82945] 1))
    unknown call_tmp[629177] "expr temp" "maybe param" "maybe type" "temp"
    (629180 'move' call_tmp[629177](82981 call max call_tmp[629167] call_tmp[629172]))
    (82982 call = call_tmp[629162] call_tmp[629177])
    (512435 return _void[55])
  }
  function minmax[83075](?).accumulate[82993](arg _mt[83091]:_MT[238], arg this[83089]:minmax[83075](?), arg x[82990] :
  (376594 call eltType _mt[243] this[83089])) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629188] "expr temp" "maybe param" "maybe type" "temp"
    (629191 'move' call_tmp[629188](376603 call value _mt[243] this[83089]))
    (82999 call(376598 call (partial) accumulateOntoState _mt[243] this[83089]) call_tmp[629188] x[82990])
    (512437 return _void[55])
  }
  function minmax[83075](?).accumulate[83013](arg _mt[83095]:_MT[238], arg this[83093]:minmax[83075](?), arg state[83010] :
  unknown call_tmp[629195] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629204] "expr temp" "maybe param" "maybe type" "temp"
    (629207 'move' call_tmp[629204](376618 call value _mt[243] this[83093]))
    (83019 call(376613 call (partial) accumulateOntoState _mt[243] this[83093]) call_tmp[629204] state[83010])
    (512439 return _void[55])
  }
  function minmax[83075](?).combine[83033](arg _mt[83099]:_MT[238], arg this[83097]:minmax[83075](?), arg other[83030] :
  unknown call_tmp[629211] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629220] "expr temp" "maybe param" "maybe type" "temp"
    (629223 'move' call_tmp[629220](376637 call value _mt[243] this[83097]))
    unknown call_tmp[629227] "expr temp" "maybe param" "maybe type" "temp"
    (629230 'move' call_tmp[629227](83039 call value _mt[243] other[83030]))
    (83042 call(376632 call (partial) accumulateOntoState _mt[243] this[83097]) call_tmp[629220] call_tmp[629227])
    (512441 return _void[55])
  }
  function minmax[83075](?).generate[83049](arg _mt[83103]:_MT[238], arg this[83101]:minmax[83075](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512445] "RVV" "temp"
    unknown call_tmp[629234] "expr temp" "maybe param" "maybe type" "temp"
    (629237 'move' call_tmp[629234](376642 call value _mt[243] this[83101]))
    (512450 'move' ret[512445](512449 'deref' call_tmp[629234]))
    (512447 return ret[512445])
  }
  function minmax[83075](?).clone[83059](arg _mt[83107]:_MT[238], arg this[83105]:minmax[83075](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512454] "RVV" "temp"
    unknown call_tmp[629241] "expr temp" "maybe param" "maybe type" "temp"
    (629244 'move' call_tmp[629241](376648 call eltType _mt[243] this[83105]))
    unknown call_tmp[629246] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629249 'move' call_tmp[629246](747837 'new' minmax[376623](?)(eltType = call_tmp[629241])(_chpl_manager = unmanaged[220](?))))
    (512459 'move' ret[512454](512458 'deref' call_tmp[629246]))
    (512456 return ret[512454])
  }
  type minmax[83075](?) val super[355673]:ReduceScanOp[82301] "super class" unknown eltType[82854] "type variable" unknown value[82868](82866 call _build_tuple(82860 call max eltType[82854])(82864 call min eltType[82854]))
  type minmax[376623](?)
  function LogicalAndReduceScanOp[83239](?).identity[83126](arg _mt[83243]:_MT[238], arg this[83241]:LogicalAndReduceScanOp[83239](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512463] "RVV" "temp"
    unknown call_tmp[629253] "expr temp" "maybe param" "maybe type" "temp"
    (629256 'move' call_tmp[629253](376654 call eltType _mt[243] this[83241]))
    unknown call_tmp[629258] "expr temp" "maybe param" "maybe type" "temp"
    (629261 'move' call_tmp[629258](83131 call _land_id call_tmp[629253]))
    (512468 'move' ret[512463](512467 'deref' call_tmp[629258]))
    (512465 return ret[512463])
  }
  function LogicalAndReduceScanOp[83239](?).accumulate[83141](arg _mt[83247]:_MT[238], arg this[83245]:LogicalAndReduceScanOp[83239](?), arg x[83139]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83146] "temp"
      unknown call_tmp[629265] "expr temp" "maybe param" "maybe type" "temp"
      (629268 'move' call_tmp[629265](376659 call value _mt[243] this[83245]))
      (83149 'move' tmp[83146](83148 'addr of' call_tmp[629265]))
      unknown tmp[421750] "maybe param" "temp"
      (421761 'move' tmp[421750] tmp[83146])
      unknown call_tmp[629270] "expr temp" "maybe param" "maybe type" "temp"
      (629273 'move' call_tmp[629270](421763 call _cond_invalid tmp[421750]))
      if call_tmp[629270]
      {
        (421766 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560154] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560155] "maybe param" "temp"
      unknown call_tmp[629275] "expr temp" "maybe param" "maybe type" "temp"
      (629278 'move' call_tmp[629275](421751 call isTrue tmp[421750]))
      (560160 'move' tmp[560155](560158 call _cond_test call_tmp[629275]))
      if tmp[560155]
      {
        unknown tmp[560162] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560164 'move' tmp[560162](421754 call isTrue x[83139]))
        (560169 'move' tmp[560154](560166 '_paramFoldLogical' tmp[560155] tmp[560162]))
      }
      {
        (560174 'move' tmp[560154](560171 '_paramFoldLogical' tmp[560155] 0))
      }
      (83154 call = tmp[83146] tmp[560154])
    }
    (512470 return _void[55])
  }
  function LogicalAndReduceScanOp[83239](?).accumulateOntoState[83164](arg _mt[83251]:_MT[238], arg this[83249]:LogicalAndReduceScanOp[83239](?), ref arg state[83162]:_any[178](?), arg x[83166]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83171] "temp"
      (83174 'move' tmp[83171](83173 'addr of' state[83162]))
      unknown tmp[421771] "maybe param" "temp"
      (421782 'move' tmp[421771] tmp[83171])
      unknown call_tmp[629280] "expr temp" "maybe param" "maybe type" "temp"
      (629283 'move' call_tmp[629280](421784 call _cond_invalid tmp[421771]))
      if call_tmp[629280]
      {
        (421787 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560181] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560182] "maybe param" "temp"
      unknown call_tmp[629285] "expr temp" "maybe param" "maybe type" "temp"
      (629288 'move' call_tmp[629285](421772 call isTrue tmp[421771]))
      (560187 'move' tmp[560182](560185 call _cond_test call_tmp[629285]))
      if tmp[560182]
      {
        unknown tmp[560189] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560191 'move' tmp[560189](421775 call isTrue x[83166]))
        (560196 'move' tmp[560181](560193 '_paramFoldLogical' tmp[560182] tmp[560189]))
      }
      {
        (560201 'move' tmp[560181](560198 '_paramFoldLogical' tmp[560182] 0))
      }
      (83179 call = tmp[83171] tmp[560181])
    }
    (512472 return _void[55])
  }
  function LogicalAndReduceScanOp[83239](?).combine[83189](arg _mt[83255]:_MT[238], arg this[83253]:LogicalAndReduceScanOp[83239](?), arg x[83187]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83197] "temp"
      unknown call_tmp[629292] "expr temp" "maybe param" "maybe type" "temp"
      (629295 'move' call_tmp[629292](376667 call value _mt[243] this[83253]))
      (83200 'move' tmp[83197](83199 'addr of' call_tmp[629292]))
      unknown tmp[421792] "maybe param" "temp"
      (421803 'move' tmp[421792] tmp[83197])
      unknown call_tmp[629297] "expr temp" "maybe param" "maybe type" "temp"
      (629300 'move' call_tmp[629297](421805 call _cond_invalid tmp[421792]))
      if call_tmp[629297]
      {
        (421808 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560208] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560209] "maybe param" "temp"
      unknown call_tmp[629302] "expr temp" "maybe param" "maybe type" "temp"
      (629305 'move' call_tmp[629302](421793 call isTrue tmp[421792]))
      (560214 'move' tmp[560209](560212 call _cond_test call_tmp[629302]))
      if tmp[560209]
      {
        unknown tmp[560216] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629309] "expr temp" "maybe param" "maybe type" "temp"
        (629312 'move' call_tmp[629309](83193 call value _mt[243] x[83187]))
        (560218 'move' tmp[560216](421796 call isTrue call_tmp[629309]))
        (560223 'move' tmp[560208](560220 '_paramFoldLogical' tmp[560209] tmp[560216]))
      }
      {
        (560228 'move' tmp[560208](560225 '_paramFoldLogical' tmp[560209] 0))
      }
      (83205 call = tmp[83197] tmp[560208])
    }
    (512474 return _void[55])
  }
  function LogicalAndReduceScanOp[83239](?).generate[83213](arg _mt[83259]:_MT[238], arg this[83257]:LogicalAndReduceScanOp[83239](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512478] "RVV" "temp"
    unknown call_tmp[629316] "expr temp" "maybe param" "maybe type" "temp"
    (629319 'move' call_tmp[629316](376672 call value _mt[243] this[83257]))
    (512483 'move' ret[512478](512482 'deref' call_tmp[629316]))
    (512480 return ret[512478])
  }
  function LogicalAndReduceScanOp[83239](?).clone[83223](arg _mt[83263]:_MT[238], arg this[83261]:LogicalAndReduceScanOp[83239](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512487] "RVV" "temp"
    unknown call_tmp[629323] "expr temp" "maybe param" "maybe type" "temp"
    (629326 'move' call_tmp[629323](376681 call eltType _mt[243] this[83261]))
    unknown call_tmp[629328] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629331 'move' call_tmp[629328](747838 'new' LogicalAndReduceScanOp[376676](?)(eltType = call_tmp[629323])(_chpl_manager = unmanaged[220](?))))
    (512492 'move' ret[512487](512491 'deref' call_tmp[629328]))
    (512489 return ret[512487])
  }
  type LogicalAndReduceScanOp[83239](?) val super[355675]:ReduceScanOp[82301] "super class" unknown eltType[83113] "type variable" unknown value[83120](83119 call _land_id eltType[83113])
  type LogicalAndReduceScanOp[376676](?)
  function LogicalOrReduceScanOp[83395](?).identity[83282](arg _mt[83399]:_MT[238], arg this[83397]:LogicalOrReduceScanOp[83395](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512496] "RVV" "temp"
    unknown call_tmp[629335] "expr temp" "maybe param" "maybe type" "temp"
    (629338 'move' call_tmp[629335](376687 call eltType _mt[243] this[83397]))
    unknown call_tmp[629340] "expr temp" "maybe param" "maybe type" "temp"
    (629343 'move' call_tmp[629340](83287 call _lor_id call_tmp[629335]))
    (512501 'move' ret[512496](512500 'deref' call_tmp[629340]))
    (512498 return ret[512496])
  }
  function LogicalOrReduceScanOp[83395](?).accumulate[83297](arg _mt[83403]:_MT[238], arg this[83401]:LogicalOrReduceScanOp[83395](?), arg x[83295]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83302] "temp"
      unknown call_tmp[629347] "expr temp" "maybe param" "maybe type" "temp"
      (629350 'move' call_tmp[629347](376692 call value _mt[243] this[83401]))
      (83305 'move' tmp[83302](83304 'addr of' call_tmp[629347]))
      unknown tmp[421813] "maybe param" "temp"
      (421824 'move' tmp[421813] tmp[83302])
      unknown call_tmp[629352] "expr temp" "maybe param" "maybe type" "temp"
      (629355 'move' call_tmp[629352](421826 call _cond_invalid tmp[421813]))
      if call_tmp[629352]
      {
        (421829 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560235] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560236] "maybe param" "temp"
      unknown call_tmp[629357] "expr temp" "maybe param" "maybe type" "temp"
      (629360 'move' call_tmp[629357](421814 call isTrue tmp[421813]))
      (560241 'move' tmp[560236](560239 call _cond_test call_tmp[629357]))
      if tmp[560236]
      {
        (560246 'move' tmp[560235](560243 '_paramFoldLogical' tmp[560236] 1))
      }
      {
        unknown tmp[560248] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560250 'move' tmp[560248](421818 call isTrue x[83295]))
        (560255 'move' tmp[560235](560252 '_paramFoldLogical' tmp[560236] tmp[560248]))
      }
      (83310 call = tmp[83302] tmp[560235])
    }
    (512503 return _void[55])
  }
  function LogicalOrReduceScanOp[83395](?).accumulateOntoState[83320](arg _mt[83407]:_MT[238], arg this[83405]:LogicalOrReduceScanOp[83395](?), ref arg state[83318]:_any[178](?), arg x[83322]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83327] "temp"
      (83330 'move' tmp[83327](83329 'addr of' state[83318]))
      unknown tmp[421834] "maybe param" "temp"
      (421845 'move' tmp[421834] tmp[83327])
      unknown call_tmp[629362] "expr temp" "maybe param" "maybe type" "temp"
      (629365 'move' call_tmp[629362](421847 call _cond_invalid tmp[421834]))
      if call_tmp[629362]
      {
        (421850 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560262] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560263] "maybe param" "temp"
      unknown call_tmp[629367] "expr temp" "maybe param" "maybe type" "temp"
      (629370 'move' call_tmp[629367](421835 call isTrue tmp[421834]))
      (560268 'move' tmp[560263](560266 call _cond_test call_tmp[629367]))
      if tmp[560263]
      {
        (560273 'move' tmp[560262](560270 '_paramFoldLogical' tmp[560263] 1))
      }
      {
        unknown tmp[560275] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560277 'move' tmp[560275](421839 call isTrue x[83322]))
        (560282 'move' tmp[560262](560279 '_paramFoldLogical' tmp[560263] tmp[560275]))
      }
      (83335 call = tmp[83327] tmp[560262])
    }
    (512505 return _void[55])
  }
  function LogicalOrReduceScanOp[83395](?).combine[83345](arg _mt[83411]:_MT[238], arg this[83409]:LogicalOrReduceScanOp[83395](?), arg x[83343]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83353] "temp"
      unknown call_tmp[629374] "expr temp" "maybe param" "maybe type" "temp"
      (629377 'move' call_tmp[629374](376700 call value _mt[243] this[83409]))
      (83356 'move' tmp[83353](83355 'addr of' call_tmp[629374]))
      unknown tmp[421855] "maybe param" "temp"
      (421866 'move' tmp[421855] tmp[83353])
      unknown call_tmp[629379] "expr temp" "maybe param" "maybe type" "temp"
      (629382 'move' call_tmp[629379](421868 call _cond_invalid tmp[421855]))
      if call_tmp[629379]
      {
        (421871 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560289] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560290] "maybe param" "temp"
      unknown call_tmp[629384] "expr temp" "maybe param" "maybe type" "temp"
      (629387 'move' call_tmp[629384](421856 call isTrue tmp[421855]))
      (560295 'move' tmp[560290](560293 call _cond_test call_tmp[629384]))
      if tmp[560290]
      {
        (560300 'move' tmp[560289](560297 '_paramFoldLogical' tmp[560290] 1))
      }
      {
        unknown tmp[560302] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629391] "expr temp" "maybe param" "maybe type" "temp"
        (629394 'move' call_tmp[629391](83349 call value _mt[243] x[83343]))
        (560304 'move' tmp[560302](421860 call isTrue call_tmp[629391]))
        (560309 'move' tmp[560289](560306 '_paramFoldLogical' tmp[560290] tmp[560302]))
      }
      (83361 call = tmp[83353] tmp[560289])
    }
    (512507 return _void[55])
  }
  function LogicalOrReduceScanOp[83395](?).generate[83369](arg _mt[83415]:_MT[238], arg this[83413]:LogicalOrReduceScanOp[83395](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512511] "RVV" "temp"
    unknown call_tmp[629398] "expr temp" "maybe param" "maybe type" "temp"
    (629401 'move' call_tmp[629398](376705 call value _mt[243] this[83413]))
    (512516 'move' ret[512511](512515 'deref' call_tmp[629398]))
    (512513 return ret[512511])
  }
  function LogicalOrReduceScanOp[83395](?).clone[83379](arg _mt[83419]:_MT[238], arg this[83417]:LogicalOrReduceScanOp[83395](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512520] "RVV" "temp"
    unknown call_tmp[629405] "expr temp" "maybe param" "maybe type" "temp"
    (629408 'move' call_tmp[629405](376714 call eltType _mt[243] this[83417]))
    unknown call_tmp[629410] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629413 'move' call_tmp[629410](747839 'new' LogicalOrReduceScanOp[376709](?)(eltType = call_tmp[629405])(_chpl_manager = unmanaged[220](?))))
    (512525 'move' ret[512520](512524 'deref' call_tmp[629410]))
    (512522 return ret[512520])
  }
  type LogicalOrReduceScanOp[83395](?) val super[355677]:ReduceScanOp[82301] "super class" unknown eltType[83269] "type variable" unknown value[83276](83275 call _lor_id eltType[83269])
  type LogicalOrReduceScanOp[376709](?)
  function BitwiseAndReduceScanOp[83524](?).identity[83438](arg _mt[83528]:_MT[238], arg this[83526]:BitwiseAndReduceScanOp[83524](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512529] "RVV" "temp"
    unknown call_tmp[629417] "expr temp" "maybe param" "maybe type" "temp"
    (629420 'move' call_tmp[629417](376720 call eltType _mt[243] this[83526]))
    unknown call_tmp[629422] "expr temp" "maybe param" "maybe type" "temp"
    (629425 'move' call_tmp[629422](83443 call _band_id call_tmp[629417]))
    (512534 'move' ret[512529](512533 'deref' call_tmp[629422]))
    (512531 return ret[512529])
  }
  function BitwiseAndReduceScanOp[83524](?).accumulate[83453](arg _mt[83532]:_MT[238], arg this[83530]:BitwiseAndReduceScanOp[83524](?), arg x[83451]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629429] "expr temp" "maybe param" "maybe type" "temp"
    (629432 'move' call_tmp[629429](376725 call value _mt[243] this[83530]))
    (83457 call &= call_tmp[629429] x[83451])
    (512536 return _void[55])
  }
  function BitwiseAndReduceScanOp[83524](?).accumulateOntoState[83467](arg _mt[83536]:_MT[238], arg this[83534]:BitwiseAndReduceScanOp[83524](?), ref arg state[83465]:_any[178](?), arg x[83469]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83473 call &= state[83465] x[83469])
    (512538 return _void[55])
  }
  function BitwiseAndReduceScanOp[83524](?).combine[83483](arg _mt[83540]:_MT[238], arg this[83538]:BitwiseAndReduceScanOp[83524](?), arg x[83481]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629436] "expr temp" "maybe param" "maybe type" "temp"
    (629439 'move' call_tmp[629436](376733 call value _mt[243] this[83538]))
    unknown call_tmp[629443] "expr temp" "maybe param" "maybe type" "temp"
    (629446 'move' call_tmp[629443](83487 call value _mt[243] x[83481]))
    (83490 call &= call_tmp[629436] call_tmp[629443])
    (512540 return _void[55])
  }
  function BitwiseAndReduceScanOp[83524](?).generate[83498](arg _mt[83544]:_MT[238], arg this[83542]:BitwiseAndReduceScanOp[83524](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512544] "RVV" "temp"
    unknown call_tmp[629450] "expr temp" "maybe param" "maybe type" "temp"
    (629453 'move' call_tmp[629450](376738 call value _mt[243] this[83542]))
    (512549 'move' ret[512544](512548 'deref' call_tmp[629450]))
    (512546 return ret[512544])
  }
  function BitwiseAndReduceScanOp[83524](?).clone[83508](arg _mt[83548]:_MT[238], arg this[83546]:BitwiseAndReduceScanOp[83524](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512553] "RVV" "temp"
    unknown call_tmp[629457] "expr temp" "maybe param" "maybe type" "temp"
    (629460 'move' call_tmp[629457](376747 call eltType _mt[243] this[83546]))
    unknown call_tmp[629462] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629465 'move' call_tmp[629462](747840 'new' BitwiseAndReduceScanOp[376742](?)(eltType = call_tmp[629457])(_chpl_manager = unmanaged[220](?))))
    (512558 'move' ret[512553](512557 'deref' call_tmp[629462]))
    (512555 return ret[512553])
  }
  type BitwiseAndReduceScanOp[83524](?) val super[355679]:ReduceScanOp[82301] "super class" unknown eltType[83425] "type variable" unknown value[83432](83431 call _band_id eltType[83425])
  type BitwiseAndReduceScanOp[376742](?)
  function BitwiseOrReduceScanOp[83653](?).identity[83567](arg _mt[83657]:_MT[238], arg this[83655]:BitwiseOrReduceScanOp[83653](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512562] "RVV" "temp"
    unknown call_tmp[629469] "expr temp" "maybe param" "maybe type" "temp"
    (629472 'move' call_tmp[629469](376753 call eltType _mt[243] this[83655]))
    unknown call_tmp[629474] "expr temp" "maybe param" "maybe type" "temp"
    (629477 'move' call_tmp[629474](83572 call _bor_id call_tmp[629469]))
    (512567 'move' ret[512562](512566 'deref' call_tmp[629474]))
    (512564 return ret[512562])
  }
  function BitwiseOrReduceScanOp[83653](?).accumulate[83582](arg _mt[83661]:_MT[238], arg this[83659]:BitwiseOrReduceScanOp[83653](?), arg x[83580]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629481] "expr temp" "maybe param" "maybe type" "temp"
    (629484 'move' call_tmp[629481](376758 call value _mt[243] this[83659]))
    (83586 call |= call_tmp[629481] x[83580])
    (512569 return _void[55])
  }
  function BitwiseOrReduceScanOp[83653](?).accumulateOntoState[83596](arg _mt[83665]:_MT[238], arg this[83663]:BitwiseOrReduceScanOp[83653](?), ref arg state[83594]:_any[178](?), arg x[83598]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83602 call |= state[83594] x[83598])
    (512571 return _void[55])
  }
  function BitwiseOrReduceScanOp[83653](?).combine[83612](arg _mt[83669]:_MT[238], arg this[83667]:BitwiseOrReduceScanOp[83653](?), arg x[83610]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629488] "expr temp" "maybe param" "maybe type" "temp"
    (629491 'move' call_tmp[629488](376766 call value _mt[243] this[83667]))
    unknown call_tmp[629495] "expr temp" "maybe param" "maybe type" "temp"
    (629498 'move' call_tmp[629495](83616 call value _mt[243] x[83610]))
    (83619 call |= call_tmp[629488] call_tmp[629495])
    (512573 return _void[55])
  }
  function BitwiseOrReduceScanOp[83653](?).generate[83627](arg _mt[83673]:_MT[238], arg this[83671]:BitwiseOrReduceScanOp[83653](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512577] "RVV" "temp"
    unknown call_tmp[629502] "expr temp" "maybe param" "maybe type" "temp"
    (629505 'move' call_tmp[629502](376771 call value _mt[243] this[83671]))
    (512582 'move' ret[512577](512581 'deref' call_tmp[629502]))
    (512579 return ret[512577])
  }
  function BitwiseOrReduceScanOp[83653](?).clone[83637](arg _mt[83677]:_MT[238], arg this[83675]:BitwiseOrReduceScanOp[83653](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512586] "RVV" "temp"
    unknown call_tmp[629509] "expr temp" "maybe param" "maybe type" "temp"
    (629512 'move' call_tmp[629509](376780 call eltType _mt[243] this[83675]))
    unknown call_tmp[629514] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629517 'move' call_tmp[629514](747841 'new' BitwiseOrReduceScanOp[376775](?)(eltType = call_tmp[629509])(_chpl_manager = unmanaged[220](?))))
    (512591 'move' ret[512586](512590 'deref' call_tmp[629514]))
    (512588 return ret[512586])
  }
  type BitwiseOrReduceScanOp[83653](?) val super[355681]:ReduceScanOp[82301] "super class" unknown eltType[83554] "type variable" unknown value[83561](83560 call _bor_id eltType[83554])
  type BitwiseOrReduceScanOp[376775](?)
  function BitwiseXorReduceScanOp[83782](?).identity[83696](arg _mt[83786]:_MT[238], arg this[83784]:BitwiseXorReduceScanOp[83782](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512595] "RVV" "temp"
    unknown call_tmp[629521] "expr temp" "maybe param" "maybe type" "temp"
    (629524 'move' call_tmp[629521](376786 call eltType _mt[243] this[83784]))
    unknown call_tmp[629526] "expr temp" "maybe param" "maybe type" "temp"
    (629529 'move' call_tmp[629526](83701 call _bxor_id call_tmp[629521]))
    (512600 'move' ret[512595](512599 'deref' call_tmp[629526]))
    (512597 return ret[512595])
  }
  function BitwiseXorReduceScanOp[83782](?).accumulate[83711](arg _mt[83790]:_MT[238], arg this[83788]:BitwiseXorReduceScanOp[83782](?), arg x[83709]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629533] "expr temp" "maybe param" "maybe type" "temp"
    (629536 'move' call_tmp[629533](376791 call value _mt[243] this[83788]))
    (83715 call ^= call_tmp[629533] x[83709])
    (512602 return _void[55])
  }
  function BitwiseXorReduceScanOp[83782](?).accumulateOntoState[83725](arg _mt[83794]:_MT[238], arg this[83792]:BitwiseXorReduceScanOp[83782](?), ref arg state[83723]:_any[178](?), arg x[83727]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83731 call ^= state[83723] x[83727])
    (512604 return _void[55])
  }
  function BitwiseXorReduceScanOp[83782](?).combine[83741](arg _mt[83798]:_MT[238], arg this[83796]:BitwiseXorReduceScanOp[83782](?), arg x[83739]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629540] "expr temp" "maybe param" "maybe type" "temp"
    (629543 'move' call_tmp[629540](376799 call value _mt[243] this[83796]))
    unknown call_tmp[629547] "expr temp" "maybe param" "maybe type" "temp"
    (629550 'move' call_tmp[629547](83745 call value _mt[243] x[83739]))
    (83748 call ^= call_tmp[629540] call_tmp[629547])
    (512606 return _void[55])
  }
  function BitwiseXorReduceScanOp[83782](?).generate[83756](arg _mt[83802]:_MT[238], arg this[83800]:BitwiseXorReduceScanOp[83782](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512610] "RVV" "temp"
    unknown call_tmp[629554] "expr temp" "maybe param" "maybe type" "temp"
    (629557 'move' call_tmp[629554](376804 call value _mt[243] this[83800]))
    (512615 'move' ret[512610](512614 'deref' call_tmp[629554]))
    (512612 return ret[512610])
  }
  function BitwiseXorReduceScanOp[83782](?).clone[83766](arg _mt[83806]:_MT[238], arg this[83804]:BitwiseXorReduceScanOp[83782](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512619] "RVV" "temp"
    unknown call_tmp[629561] "expr temp" "maybe param" "maybe type" "temp"
    (629564 'move' call_tmp[629561](376813 call eltType _mt[243] this[83804]))
    unknown call_tmp[629566] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629569 'move' call_tmp[629566](747842 'new' BitwiseXorReduceScanOp[376808](?)(eltType = call_tmp[629561])(_chpl_manager = unmanaged[220](?))))
    (512624 'move' ret[512619](512623 'deref' call_tmp[629566]))
    (512621 return ret[512619])
  }
  type BitwiseXorReduceScanOp[83782](?) val super[355683]:ReduceScanOp[82301] "super class" unknown eltType[83683] "type variable" unknown value[83690](83689 call _bxor_id eltType[83683])
  type BitwiseXorReduceScanOp[376808](?)
  function _maxloc_id[83813](arg eltType[83811]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512628] "RVV" "temp"
    unknown call_tmp[629571] "expr temp" "maybe param" "maybe type" "temp"
    (629574 'move' call_tmp[629571](83819 call eltType[83811] 0))
    unknown call_tmp[629576] "expr temp" "maybe param" "maybe type" "temp"
    (629579 'move' call_tmp[629576](83821 call min call_tmp[629571]))
    unknown call_tmp[629581] "expr temp" "maybe param" "maybe type" "temp"
    (629584 'move' call_tmp[629581](83826 call eltType[83811] 1))
    unknown call_tmp[629586] "expr temp" "maybe param" "maybe type" "temp"
    (629589 'move' call_tmp[629586](83828 call max call_tmp[629581]))
    unknown call_tmp[629591] "expr temp" "maybe param" "maybe type" "temp"
    (629594 'move' call_tmp[629591](83830 call _build_tuple call_tmp[629576] call_tmp[629586]))
    (512633 'move' ret[512628](512632 'deref' call_tmp[629591]))
    (512630 return ret[512628])
  }
  function _minloc_id[83841](arg eltType[83839]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512637] "RVV" "temp"
    unknown call_tmp[629596] "expr temp" "maybe param" "maybe type" "temp"
    (629599 'move' call_tmp[629596](83846 call max eltType[83839]))
    (512642 'move' ret[512637](512641 'deref' call_tmp[629596]))
    (512639 return ret[512637])
  }
  function maxloc[84027](?).identity[83868](arg _mt[84031]:_MT[238], arg this[84029]:maxloc[84027](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512646] "RVV" "temp"
    unknown call_tmp[629603] "expr temp" "maybe param" "maybe type" "temp"
    (629606 'move' call_tmp[629603](376822 call eltType _mt[243] this[84029]))
    unknown call_tmp[629608] "expr temp" "maybe param" "maybe type" "temp"
    (629611 'move' call_tmp[629608](83873 call _maxloc_id call_tmp[629603]))
    (512651 'move' ret[512646](512650 'deref' call_tmp[629608]))
    (512648 return ret[512646])
  }
  function maxloc[84027](?).accumulate[83883](arg _mt[84035]:_MT[238], arg this[84033]:maxloc[84027](?), arg x[83881]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629617] "expr temp" "maybe param" "maybe type" "temp"
    (629620 'move' call_tmp[629617](376831 call value _mt[243] this[84033]))
    (83889 call(376826 call (partial) accumulateOntoState _mt[243] this[84033]) call_tmp[629617] x[83881])
    (512653 return _void[55])
  }
  function maxloc[84027](?).accumulateOntoState[83898](arg _mt[84039]:_MT[238], arg this[84037]:maxloc[84027](?), ref arg state[83896]:_any[178](?), arg x[83900]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421876] "maybe param" "temp"
    unknown tmp[421897] "maybe param" "temp"
    unknown call_tmp[629622] "expr temp" "maybe param" "maybe type" "temp"
    (629625 'move' call_tmp[629622](83905 call x[83900] 0))
    unknown call_tmp[629627] "expr temp" "maybe param" "maybe type" "temp"
    (629630 'move' call_tmp[629627](83909 call state[83896] 0))
    (421908 'move' tmp[421897](83910 call > call_tmp[629622] call_tmp[629627]))
    unknown call_tmp[629632] "expr temp" "maybe param" "maybe type" "temp"
    (629635 'move' call_tmp[629632](421910 call _cond_invalid tmp[421897]))
    if call_tmp[629632]
    {
      (421913 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560343] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560344] "maybe param" "temp"
    unknown call_tmp[629637] "expr temp" "maybe param" "maybe type" "temp"
    (629640 'move' call_tmp[629637](421898 call isTrue tmp[421897]))
    (560349 'move' tmp[560344](560347 call _cond_test call_tmp[629637]))
    if tmp[560344]
    {
      (560354 'move' tmp[560343](560351 '_paramFoldLogical' tmp[560344] 1))
    }
    {
      unknown tmp[421918] "maybe param" "temp"
      unknown call_tmp[629642] "expr temp" "maybe param" "maybe type" "temp"
      (629645 'move' call_tmp[629642](83915 call x[83900] 0))
      unknown call_tmp[629647] "expr temp" "maybe param" "maybe type" "temp"
      (629650 'move' call_tmp[629647](83919 call state[83896] 0))
      (421929 'move' tmp[421918](83920 call == call_tmp[629642] call_tmp[629647]))
      unknown call_tmp[629652] "expr temp" "maybe param" "maybe type" "temp"
      (629655 'move' call_tmp[629652](421931 call _cond_invalid tmp[421918]))
      if call_tmp[629652]
      {
        (421934 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560316] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560317] "maybe param" "temp"
      unknown call_tmp[629657] "expr temp" "maybe param" "maybe type" "temp"
      (629660 'move' call_tmp[629657](421919 call isTrue tmp[421918]))
      (560322 'move' tmp[560317](560320 call _cond_test call_tmp[629657]))
      if tmp[560317]
      {
        unknown tmp[560324] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629662] "expr temp" "maybe param" "maybe type" "temp"
        (629665 'move' call_tmp[629662](83925 call x[83900] 1))
        unknown call_tmp[629667] "expr temp" "maybe param" "maybe type" "temp"
        (629670 'move' call_tmp[629667](83929 call state[83896] 1))
        unknown call_tmp[629672] "expr temp" "maybe param" "maybe type" "temp"
        (629675 'move' call_tmp[629672](83930 call < call_tmp[629662] call_tmp[629667]))
        (560326 'move' tmp[560324](421922 call isTrue call_tmp[629672]))
        (560331 'move' tmp[560316](560328 '_paramFoldLogical' tmp[560317] tmp[560324]))
      }
      {
        (560336 'move' tmp[560316](560333 '_paramFoldLogical' tmp[560317] 0))
      }
      unknown tmp[560356] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560358 'move' tmp[560356](421902 call isTrue tmp[560316]))
      (560363 'move' tmp[560343](560360 '_paramFoldLogical' tmp[560344] tmp[560356]))
    }
    (421887 'move' tmp[421876] tmp[560343])
    unknown call_tmp[629677] "expr temp" "maybe param" "maybe type" "temp"
    (629680 'move' call_tmp[629677](421889 call _cond_invalid tmp[421876]))
    if call_tmp[629677]
    {
      (421892 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560424] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560425] "maybe param" "temp"
    unknown call_tmp[629682] "expr temp" "maybe param" "maybe type" "temp"
    (629685 'move' call_tmp[629682](421877 call isTrue tmp[421876]))
    (560430 'move' tmp[560425](560428 call _cond_test call_tmp[629682]))
    if tmp[560425]
    {
      (560435 'move' tmp[560424](560432 '_paramFoldLogical' tmp[560425] 1))
    }
    {
      unknown tmp[421939] "maybe param" "temp"
      unknown call_tmp[629687] "expr temp" "maybe param" "maybe type" "temp"
      (629690 'move' call_tmp[629687](83940 call x[83900] 0))
      (421950 'move' tmp[421939](83942 call gotNaN call_tmp[629687]))
      unknown call_tmp[629692] "expr temp" "maybe param" "maybe type" "temp"
      (629695 'move' call_tmp[629692](421952 call _cond_invalid tmp[421939]))
      if call_tmp[629692]
      {
        (421955 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560397] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560398] "maybe param" "temp"
      unknown call_tmp[629697] "expr temp" "maybe param" "maybe type" "temp"
      (629700 'move' call_tmp[629697](421940 call isTrue tmp[421939]))
      (560403 'move' tmp[560398](560401 call _cond_test call_tmp[629697]))
      if tmp[560398]
      {
        unknown tmp[421960] "maybe param" "temp"
        unknown call_tmp[629702] "expr temp" "maybe param" "maybe type" "temp"
        (629705 'move' call_tmp[629702](83947 call state[83896] 0))
        unknown call_tmp[629707] "expr temp" "maybe param" "maybe type" "temp"
        (629710 'move' call_tmp[629707](83949 call gotNaN call_tmp[629702]))
        (421971 'move' tmp[421960](83950 call ! call_tmp[629707]))
        unknown call_tmp[629712] "expr temp" "maybe param" "maybe type" "temp"
        (629715 'move' call_tmp[629712](421973 call _cond_invalid tmp[421960]))
        if call_tmp[629712]
        {
          (421976 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560370] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560371] "maybe param" "temp"
        unknown call_tmp[629717] "expr temp" "maybe param" "maybe type" "temp"
        (629720 'move' call_tmp[629717](421961 call isTrue tmp[421960]))
        (560376 'move' tmp[560371](560374 call _cond_test call_tmp[629717]))
        if tmp[560371]
        {
          (560381 'move' tmp[560370](560378 '_paramFoldLogical' tmp[560371] 1))
        }
        {
          unknown tmp[560383] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629722] "expr temp" "maybe param" "maybe type" "temp"
          (629725 'move' call_tmp[629722](83955 call x[83900] 1))
          unknown call_tmp[629727] "expr temp" "maybe param" "maybe type" "temp"
          (629730 'move' call_tmp[629727](83959 call state[83896] 1))
          unknown call_tmp[629732] "expr temp" "maybe param" "maybe type" "temp"
          (629735 'move' call_tmp[629732](83960 call < call_tmp[629722] call_tmp[629727]))
          (560385 'move' tmp[560383](421965 call isTrue call_tmp[629732]))
          (560390 'move' tmp[560370](560387 '_paramFoldLogical' tmp[560371] tmp[560383]))
        }
        unknown tmp[560405] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560407 'move' tmp[560405](421943 call isTrue tmp[560370]))
        (560412 'move' tmp[560397](560409 '_paramFoldLogical' tmp[560398] tmp[560405]))
      }
      {
        (560417 'move' tmp[560397](560414 '_paramFoldLogical' tmp[560398] 0))
      }
      unknown tmp[560437] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560439 'move' tmp[560437](421881 call isTrue tmp[560397]))
      (560444 'move' tmp[560424](560441 '_paramFoldLogical' tmp[560425] tmp[560437]))
    }
    unknown call_tmp[629737] "expr temp" "maybe param" "maybe type" "temp"
    (629740 'move' call_tmp[629737](83973 call _cond_test tmp[560424]))
    if call_tmp[629737]
    {
      (83970 call = state[83896] x[83900])
    }
    (512655 return _void[55])
  }
  function maxloc[84027](?).combine[83985](arg _mt[84043]:_MT[238], arg this[84041]:maxloc[84027](?), arg x[83983]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629746] "expr temp" "maybe param" "maybe type" "temp"
    (629749 'move' call_tmp[629746](376853 call value _mt[243] this[84041]))
    unknown call_tmp[629753] "expr temp" "maybe param" "maybe type" "temp"
    (629756 'move' call_tmp[629753](83991 call value _mt[243] x[83983]))
    (83994 call(376848 call (partial) accumulateOntoState _mt[243] this[84041]) call_tmp[629746] call_tmp[629753])
    (512657 return _void[55])
  }
  function maxloc[84027](?).generate[84001](arg _mt[84047]:_MT[238], arg this[84045]:maxloc[84027](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512661] "RVV" "temp"
    unknown call_tmp[629760] "expr temp" "maybe param" "maybe type" "temp"
    (629763 'move' call_tmp[629760](376858 call value _mt[243] this[84045]))
    (512666 'move' ret[512661](512665 'deref' call_tmp[629760]))
    (512663 return ret[512661])
  }
  function maxloc[84027](?).clone[84011](arg _mt[84051]:_MT[238], arg this[84049]:maxloc[84027](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512670] "RVV" "temp"
    unknown call_tmp[629767] "expr temp" "maybe param" "maybe type" "temp"
    (629770 'move' call_tmp[629767](376867 call eltType _mt[243] this[84049]))
    unknown call_tmp[629772] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629775 'move' call_tmp[629772](747843 'new' maxloc[376862](?)(eltType = call_tmp[629767])(_chpl_manager = unmanaged[220](?))))
    (512675 'move' ret[512670](512674 'deref' call_tmp[629772]))
    (512672 return ret[512670])
  }
  type maxloc[84027](?) val super[355685]:ReduceScanOp[82301] "super class" unknown eltType[83855] "type variable" unknown value[83862](83861 call _maxloc_id eltType[83855])
  type maxloc[376862](?)
  function minloc[84229](?).identity[84070](arg _mt[84233]:_MT[238], arg this[84231]:minloc[84229](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512679] "RVV" "temp"
    unknown call_tmp[629779] "expr temp" "maybe param" "maybe type" "temp"
    (629782 'move' call_tmp[629779](376873 call eltType _mt[243] this[84231]))
    unknown call_tmp[629784] "expr temp" "maybe param" "maybe type" "temp"
    (629787 'move' call_tmp[629784](84075 call _minloc_id call_tmp[629779]))
    (512684 'move' ret[512679](512683 'deref' call_tmp[629784]))
    (512681 return ret[512679])
  }
  function minloc[84229](?).accumulate[84085](arg _mt[84237]:_MT[238], arg this[84235]:minloc[84229](?), arg x[84083]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629793] "expr temp" "maybe param" "maybe type" "temp"
    (629796 'move' call_tmp[629793](376882 call value _mt[243] this[84235]))
    (84091 call(376877 call (partial) accumulateOntoState _mt[243] this[84235]) call_tmp[629793] x[84083])
    (512686 return _void[55])
  }
  function minloc[84229](?).accumulateOntoState[84100](arg _mt[84241]:_MT[238], arg this[84239]:minloc[84229](?), ref arg state[84098]:_any[178](?), arg x[84102]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421981] "maybe param" "temp"
    unknown tmp[422002] "maybe param" "temp"
    unknown call_tmp[629798] "expr temp" "maybe param" "maybe type" "temp"
    (629801 'move' call_tmp[629798](84107 call x[84102] 0))
    unknown call_tmp[629803] "expr temp" "maybe param" "maybe type" "temp"
    (629806 'move' call_tmp[629803](84111 call state[84098] 0))
    (422013 'move' tmp[422002](84112 call < call_tmp[629798] call_tmp[629803]))
    unknown call_tmp[629808] "expr temp" "maybe param" "maybe type" "temp"
    (629811 'move' call_tmp[629808](422015 call _cond_invalid tmp[422002]))
    if call_tmp[629808]
    {
      (422018 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560478] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560479] "maybe param" "temp"
    unknown call_tmp[629813] "expr temp" "maybe param" "maybe type" "temp"
    (629816 'move' call_tmp[629813](422003 call isTrue tmp[422002]))
    (560484 'move' tmp[560479](560482 call _cond_test call_tmp[629813]))
    if tmp[560479]
    {
      (560489 'move' tmp[560478](560486 '_paramFoldLogical' tmp[560479] 1))
    }
    {
      unknown tmp[422023] "maybe param" "temp"
      unknown call_tmp[629818] "expr temp" "maybe param" "maybe type" "temp"
      (629821 'move' call_tmp[629818](84117 call x[84102] 0))
      unknown call_tmp[629823] "expr temp" "maybe param" "maybe type" "temp"
      (629826 'move' call_tmp[629823](84121 call state[84098] 0))
      (422034 'move' tmp[422023](84122 call == call_tmp[629818] call_tmp[629823]))
      unknown call_tmp[629828] "expr temp" "maybe param" "maybe type" "temp"
      (629831 'move' call_tmp[629828](422036 call _cond_invalid tmp[422023]))
      if call_tmp[629828]
      {
        (422039 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560451] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560452] "maybe param" "temp"
      unknown call_tmp[629833] "expr temp" "maybe param" "maybe type" "temp"
      (629836 'move' call_tmp[629833](422024 call isTrue tmp[422023]))
      (560457 'move' tmp[560452](560455 call _cond_test call_tmp[629833]))
      if tmp[560452]
      {
        unknown tmp[560459] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629838] "expr temp" "maybe param" "maybe type" "temp"
        (629841 'move' call_tmp[629838](84127 call x[84102] 1))
        unknown call_tmp[629843] "expr temp" "maybe param" "maybe type" "temp"
        (629846 'move' call_tmp[629843](84131 call state[84098] 1))
        unknown call_tmp[629848] "expr temp" "maybe param" "maybe type" "temp"
        (629851 'move' call_tmp[629848](84132 call < call_tmp[629838] call_tmp[629843]))
        (560461 'move' tmp[560459](422027 call isTrue call_tmp[629848]))
        (560466 'move' tmp[560451](560463 '_paramFoldLogical' tmp[560452] tmp[560459]))
      }
      {
        (560471 'move' tmp[560451](560468 '_paramFoldLogical' tmp[560452] 0))
      }
      unknown tmp[560491] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560493 'move' tmp[560491](422007 call isTrue tmp[560451]))
      (560498 'move' tmp[560478](560495 '_paramFoldLogical' tmp[560479] tmp[560491]))
    }
    (421992 'move' tmp[421981] tmp[560478])
    unknown call_tmp[629853] "expr temp" "maybe param" "maybe type" "temp"
    (629856 'move' call_tmp[629853](421994 call _cond_invalid tmp[421981]))
    if call_tmp[629853]
    {
      (421997 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560559] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560560] "maybe param" "temp"
    unknown call_tmp[629858] "expr temp" "maybe param" "maybe type" "temp"
    (629861 'move' call_tmp[629858](421982 call isTrue tmp[421981]))
    (560565 'move' tmp[560560](560563 call _cond_test call_tmp[629858]))
    if tmp[560560]
    {
      (560570 'move' tmp[560559](560567 '_paramFoldLogical' tmp[560560] 1))
    }
    {
      unknown tmp[422044] "maybe param" "temp"
      unknown call_tmp[629863] "expr temp" "maybe param" "maybe type" "temp"
      (629866 'move' call_tmp[629863](84142 call x[84102] 0))
      (422055 'move' tmp[422044](84144 call gotNaN call_tmp[629863]))
      unknown call_tmp[629868] "expr temp" "maybe param" "maybe type" "temp"
      (629871 'move' call_tmp[629868](422057 call _cond_invalid tmp[422044]))
      if call_tmp[629868]
      {
        (422060 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560532] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560533] "maybe param" "temp"
      unknown call_tmp[629873] "expr temp" "maybe param" "maybe type" "temp"
      (629876 'move' call_tmp[629873](422045 call isTrue tmp[422044]))
      (560538 'move' tmp[560533](560536 call _cond_test call_tmp[629873]))
      if tmp[560533]
      {
        unknown tmp[422065] "maybe param" "temp"
        unknown call_tmp[629878] "expr temp" "maybe param" "maybe type" "temp"
        (629881 'move' call_tmp[629878](84149 call state[84098] 0))
        unknown call_tmp[629883] "expr temp" "maybe param" "maybe type" "temp"
        (629886 'move' call_tmp[629883](84151 call gotNaN call_tmp[629878]))
        (422076 'move' tmp[422065](84152 call ! call_tmp[629883]))
        unknown call_tmp[629888] "expr temp" "maybe param" "maybe type" "temp"
        (629891 'move' call_tmp[629888](422078 call _cond_invalid tmp[422065]))
        if call_tmp[629888]
        {
          (422081 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560505] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560506] "maybe param" "temp"
        unknown call_tmp[629893] "expr temp" "maybe param" "maybe type" "temp"
        (629896 'move' call_tmp[629893](422066 call isTrue tmp[422065]))
        (560511 'move' tmp[560506](560509 call _cond_test call_tmp[629893]))
        if tmp[560506]
        {
          (560516 'move' tmp[560505](560513 '_paramFoldLogical' tmp[560506] 1))
        }
        {
          unknown tmp[560518] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629898] "expr temp" "maybe param" "maybe type" "temp"
          (629901 'move' call_tmp[629898](84157 call x[84102] 1))
          unknown call_tmp[629903] "expr temp" "maybe param" "maybe type" "temp"
          (629906 'move' call_tmp[629903](84161 call state[84098] 1))
          unknown call_tmp[629908] "expr temp" "maybe param" "maybe type" "temp"
          (629911 'move' call_tmp[629908](84162 call < call_tmp[629898] call_tmp[629903]))
          (560520 'move' tmp[560518](422070 call isTrue call_tmp[629908]))
          (560525 'move' tmp[560505](560522 '_paramFoldLogical' tmp[560506] tmp[560518]))
        }
        unknown tmp[560540] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560542 'move' tmp[560540](422048 call isTrue tmp[560505]))
        (560547 'move' tmp[560532](560544 '_paramFoldLogical' tmp[560533] tmp[560540]))
      }
      {
        (560552 'move' tmp[560532](560549 '_paramFoldLogical' tmp[560533] 0))
      }
      unknown tmp[560572] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560574 'move' tmp[560572](421986 call isTrue tmp[560532]))
      (560579 'move' tmp[560559](560576 '_paramFoldLogical' tmp[560560] tmp[560572]))
    }
    unknown call_tmp[629913] "expr temp" "maybe param" "maybe type" "temp"
    (629916 'move' call_tmp[629913](84175 call _cond_test tmp[560559]))
    if call_tmp[629913]
    {
      (84172 call = state[84098] x[84102])
    }
    (512688 return _void[55])
  }
  function minloc[84229](?).combine[84187](arg _mt[84245]:_MT[238], arg this[84243]:minloc[84229](?), arg x[84185]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629922] "expr temp" "maybe param" "maybe type" "temp"
    (629925 'move' call_tmp[629922](376904 call value _mt[243] this[84243]))
    unknown call_tmp[629929] "expr temp" "maybe param" "maybe type" "temp"
    (629932 'move' call_tmp[629929](84193 call value _mt[243] x[84185]))
    (84196 call(376899 call (partial) accumulateOntoState _mt[243] this[84243]) call_tmp[629922] call_tmp[629929])
    (512690 return _void[55])
  }
  function minloc[84229](?).generate[84203](arg _mt[84249]:_MT[238], arg this[84247]:minloc[84229](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512694] "RVV" "temp"
    unknown call_tmp[629936] "expr temp" "maybe param" "maybe type" "temp"
    (629939 'move' call_tmp[629936](376909 call value _mt[243] this[84247]))
    (512699 'move' ret[512694](512698 'deref' call_tmp[629936]))
    (512696 return ret[512694])
  }
  function minloc[84229](?).clone[84213](arg _mt[84253]:_MT[238], arg this[84251]:minloc[84229](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512703] "RVV" "temp"
    unknown call_tmp[629943] "expr temp" "maybe param" "maybe type" "temp"
    (629946 'move' call_tmp[629943](376918 call eltType _mt[243] this[84251]))
    unknown call_tmp[629948] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629951 'move' call_tmp[629948](747844 'new' minloc[376913](?)(eltType = call_tmp[629943])(_chpl_manager = unmanaged[220](?))))
    (512708 'move' ret[512703](512707 'deref' call_tmp[629948]))
    (512705 return ret[512703])
  }
  type minloc[84229](?) val super[355687]:ReduceScanOp[82301] "super class" unknown eltType[84057] "type variable" unknown value[84064](84063 call _minloc_id eltType[84057])
  type minloc[376913](?)
  function gotNaN[84260](arg value[84258]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[512712] "RVV" "temp"
    unknown call_tmp[629953] "expr temp" "maybe param" "maybe type" "temp"
    (629956 'move' call_tmp[629953](84269 call isnan value[84258]))
    (512717 'move' ret[512712](512716 'deref' call_tmp[629953]))
    (512714 return ret[512712])
  }
  where {
    (84265 call isReal value[84258])
  }
  function gotNaN[84280](arg value[84278]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512721] "RVV" "param" "temp"
    (512726 'move' ret[512721](512725 'deref' 0))
    (512723 return ret[512721])
  }
  (355112 'used modules list'(81781 'use' ChapelStandard[20264])(81785 'use' ChapelLocks[187268]))
}