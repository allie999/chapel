AST dump for ChapelReduce after pass normalize.
Module use list: ChapelStandard ChapelLocks Reflection 

{
  function chpl__init_ChapelReduce[415954]() : void[4] "insert line file info" "module init"
  {
    (512664 return _void[55])
  }
  function chpl__scanStateResTypesMatch[81787](arg op[81785]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512125] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[491915] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628528] "expr temp" "maybe param" "maybe type" "temp"
      (628531 'move' call_tmp[628528](81796 call(81792 call (partial) generate _mt[243] op[81785])))
      (491919 'move' call_type_tmp[491915](81797 'typeof' call_tmp[628528]))
    }
    unknown resType[81798] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[491915]
    (541461 'move' resType[81798] call_type_tmp[491915])
    (476678 'end of statement')
    { scopeless type
      unknown call_type_tmp[491921] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628535] "expr temp" "maybe param" "maybe type" "temp"
      (628538 'move' call_tmp[628535](81805 call identity _mt[243] op[81785]))
      (491925 'move' call_type_tmp[491921](81808 'typeof' call_tmp[628535]))
    }
    unknown stateType[81809] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[491921]
    (541464 'move' stateType[81809] call_type_tmp[491921])
    (476679 'end of statement')
    unknown call_tmp[628540] "expr temp" "maybe param" "maybe type" "temp"
    (628543 'move' call_tmp[628540](81814 call == resType[81798] stateType[81809]))
    (512130 'move' ret[512125](512129 'deref' call_tmp[628540]))
    gotoReturn _end_chpl__scanStateResTypesMatch[512123] _end_chpl__scanStateResTypesMatch[512123]
    (476680 'end of statement' resType[81798] stateType[81809])
    label _end_chpl__scanStateResTypesMatch[512123]
    (512127 return ret[512125])
  }
  function chpl__scanIteratorZip[81824](arg op[81822]:_any[178](?), arg data[81826]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512136] "RVV" "temp"
    (81847 call compilerWarning "scan has been serialized (see issue #12482)")
    (476683 'end of statement')
    unknown arr[81865] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter1[581483](arg iterator[581485]:_any[178](?), arg op[581521]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[581532] "RVV" "temp"
      {
        unknown _indexOfInterest[581490] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[581491] "expr temp" "temp"
        (581500 'move' _iterator[581491](581498 call _getIteratorZip iterator[581485]))
        Defer
        {
          {
            (581514 call _freeIterator _iterator[581491])
          }
        }
        { scopeless type
          (581505 'move' _indexOfInterest[581490](581502 call iteratorIndex _iterator[581491]))
        }
        ForLoop[581492] for-expr
        {
          unknown d[81863] "index var" "insert auto destroy" "no doc"
          (581525 'end of statement')
          (581509 'move' d[81863] _indexOfInterest[581490])
          (581526 'end of statement' d[81863])
          {
            {
              unknown yret[581536] "YVV" "temp"
              unknown call_tmp[581543] "expr temp" "maybe param" "maybe type" "temp"
              (581546 'move' call_tmp[581543](81859 call chpl__accumgen op[581521] d[81863]))
              (581539 'move' yret[581536](581538 'deref' call_tmp[581543]))
              (581541 yield yret[581536])
              (581528 'end of statement' d[81863])
            }
          }
          label _continueLabel[581495]
          _indexOfInterest[581490]
          _iterator[581491]
        }
        label _breakLabel[581496]
      }
      (581534 return ret[581532])
    }
    function chpl__forexpr1[581463](arg iterExpr[581466]:_any[178](?), arg op[581470]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[581551] "RVV" "temp"
      unknown _iterator[581473] "expr temp" "maybe ref" "temp"
      (581475 'move' _iterator[581473] iterExpr[581466])
      unknown call_tmp[581558] "expr temp" "maybe param" "maybe type" "temp"
      (581561 'move' call_tmp[581558](581478 call chpl__loopexpr_iter1 _iterator[581473] op[581470]))
      (581556 'move' ret[581551](581555 'deref' call_tmp[581558]))
      (581553 return ret[581551])
    }
    unknown call_tmp[581563] "expr temp" "maybe param" "maybe type" "temp"
    (581566 'move' call_tmp[581563](81854 call _build_tuple(81852 'expand_tuple' data[81826])))
    unknown call_tmp[581568] "maybe param" "maybe type" "temp"
    (581571 'move' call_tmp[581568](581468 call chpl__forexpr1 call_tmp[581563] op[81822]))
    (581576 'iterator record set shape' call_tmp[581568](581574 'expand_tuple' data[81826]) 1)
    (541466 'init var' arr[81865] call_tmp[581568])
    (81868 'end of statement')
    (81871 call chpl__delete op[81822])
    (476684 'end of statement')
    (512141 'move' ret[512136](512140 'deref' arr[81865]))
    gotoReturn _end_chpl__scanIteratorZip[512134] _end_chpl__scanIteratorZip[512134]
    (476685 'end of statement' arr[81865])
    label _end_chpl__scanIteratorZip[512134]
    (512138 return ret[512136])
  }
  function chpl__scanIterator[81883](arg op[81881]:_any[178](?), arg data[81885]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512147] "RVV" "temp"
    unknown tmp[421650] "maybe param" "temp"
    (421661 'move' tmp[421650](81894 call isArray data[81885]))
    unknown call_tmp[628545] "expr temp" "maybe param" "maybe type" "temp"
    (628548 'move' call_tmp[628545](421663 call _cond_invalid tmp[421650]))
    if call_tmp[628545]
    {
      (421666 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown supportsPar[81919] "dead at end of block" "param"
    unknown tmp[560036] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560037] "maybe param" "temp"
    unknown call_tmp[628550] "expr temp" "maybe param" "maybe type" "temp"
    (628553 'move' call_tmp[628550](421651 call isTrue tmp[421650]))
    (560042 'move' tmp[560037](560040 call _cond_test call_tmp[628550]))
    if tmp[560037]
    {
      unknown tmp[560044] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628555] "expr temp" "maybe param" "maybe type" "temp"
      (628558 'move' call_tmp[628555](81916 call canResolveMethod data[81885] "_scan" op[81881]))
      (560046 'move' tmp[560044](421654 call isTrue call_tmp[628555]))
      (560051 'move' tmp[560036](560048 '_paramFoldLogical' tmp[560037] tmp[560044]))
    }
    {
      (560056 'move' tmp[560036](560053 '_paramFoldLogical' tmp[560037] 0))
    }
    (541468 'init var' supportsPar[81919] tmp[560036])
    (81922 'end of statement')
    unknown call_tmp[628560] "expr temp" "maybe param" "maybe type" "temp"
    (628563 'move' call_tmp[628560](81963 call _cond_test supportsPar[81919]))
    if call_tmp[628560]
    {
      unknown call_tmp[628567] "expr temp" "maybe param" "maybe type" "temp"
      (628570 'move' call_tmp[628567](81930 call(81925 call (partial) _scan _mt[243] data[81885]) op[81881]))
      (512152 'move' ret[512147](512151 'deref' call_tmp[628567]))
      gotoReturn _end_chpl__scanIterator[512145] _end_chpl__scanIterator[512145]
    }
    {
      (81937 call compilerWarning "scan has been serialized (see issue #12482)")
      (476689 'end of statement')
      unknown arr[81951] "dead at end of block" "insert auto destroy"
      function chpl__loopexpr_iter2[581598](arg iterator[581600]:_any[178](?), arg op[581636]:_any[178](?)) : _unknown[51] "iterator fn"
      {
        unknown ret[581647] "RVV" "temp"
        {
          unknown _indexOfInterest[581605] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[581606] "expr temp" "temp"
          (581615 'move' _iterator[581606](581613 call _getIterator iterator[581600]))
          Defer
          {
            {
              (581629 call _freeIterator _iterator[581606])
            }
          }
          { scopeless type
            (581620 'move' _indexOfInterest[581605](581617 call iteratorIndex _iterator[581606]))
          }
          ForLoop[581607] for-expr
          {
            unknown d[81949] "index var" "insert auto destroy" "no doc"
            (581640 'end of statement')
            (581624 'move' d[81949] _indexOfInterest[581605])
            (581641 'end of statement' d[81949])
            {
              {
                unknown yret[581651] "YVV" "temp"
                unknown call_tmp[581658] "expr temp" "maybe param" "maybe type" "temp"
                (581661 'move' call_tmp[581658](81946 call chpl__accumgen op[581636] d[81949]))
                (581654 'move' yret[581651](581653 'deref' call_tmp[581658]))
                (581656 yield yret[581651])
                (581643 'end of statement' d[81949])
              }
            }
            label _continueLabel[581610]
            _indexOfInterest[581605]
            _iterator[581606]
          }
          label _breakLabel[581611]
        }
        (581649 return ret[581647])
      }
      function chpl__forexpr2[581578](arg iterExpr[581581]:_any[178](?), arg op[581585]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
      {
        unknown ret[581666] "RVV" "temp"
        unknown _iterator[581588] "expr temp" "maybe ref" "temp"
        (581590 'move' _iterator[581588] iterExpr[581581])
        unknown call_tmp[581673] "expr temp" "maybe param" "maybe type" "temp"
        (581676 'move' call_tmp[581673](581593 call chpl__loopexpr_iter2 _iterator[581588] op[581585]))
        (581671 'move' ret[581666](581670 'deref' call_tmp[581673]))
        (581668 return ret[581666])
      }
      unknown call_tmp[581678] "maybe param" "maybe type" "temp"
      (581681 'move' call_tmp[581678](581583 call chpl__forexpr2 data[81885] op[81881]))
      (581685 'iterator record set shape' call_tmp[581678] data[81885] 1)
      (541470 'init var' arr[81951] call_tmp[581678])
      (81954 'end of statement')
      (81957 call chpl__delete op[81881])
      (476690 'end of statement')
      (512157 'move' ret[512147](512156 'deref' arr[81951]))
      gotoReturn _end_chpl__scanIterator[512145] _end_chpl__scanIterator[512145]
      (476691 'end of statement' arr[81951])
    }
    label _end_chpl__scanIterator[512145]
    (512149 return ret[512147])
    (355058 'used modules list'(81888 'use' Reflection[224882]))
  }
  function chpl__accumgen[81973](arg op[81971]:_any[178](?), arg d[81975]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512163] "RVV" "temp"
    (81985 call(81980 call (partial) accumulate _mt[243] op[81971]) d[81975])
    (476693 'end of statement')
    unknown call_tmp[628576] "expr temp" "maybe param" "maybe type" "temp"
    (628579 'move' call_tmp[628576](81993 call(81989 call (partial) generate _mt[243] op[81971])))
    (512168 'move' ret[512163](512167 'deref' call_tmp[628576]))
    (512165 return ret[512163])
  }
  function chpl__reduceCombine[82002](arg globalOp[82000]:_any[178](?), arg localOp[82004]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[82047] "const" "temp"
    unknown call_tmp[628581] "expr temp" "maybe param" "maybe type" "temp"
    (628584 'move' call_tmp[628581](82044 '_wide_get_locale' globalOp[82000]))
    (82049 'move' tmp[82047](82045 'deref' call_tmp[628581]))
    {
      {
        unknown call_tmp[628588] "expr temp" "maybe param" "maybe type" "temp"
        (628591 'move' call_tmp[628588](82010 call l _mt[243] globalOp[82000]))
        (82019 call(82015 call (partial) lock _mt[243] call_tmp[628588]))
        (476695 'end of statement')
        (82030 call(82025 call (partial) combine _mt[243] globalOp[82000]) localOp[82004])
        (476696 'end of statement')
        unknown call_tmp[628599] "expr temp" "maybe param" "maybe type" "temp"
        (628602 'move' call_tmp[628599](82033 call l _mt[243] globalOp[82000]))
        (82042 call(82038 call (partial) unlock _mt[243] call_tmp[628599]))
      }
      (82052 'on block' 0 tmp[82047])
    }
    (512170 return _void[55])
  }
  function chpl__cleanupLocalOp[82062](arg globalOp[82060]:_any[178](?), arg localOp[82064]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (82068 call chpl__delete localOp[82064])
    (512172 return _void[55])
  }
  function chpl_sumTypeIsSame[82078](arg eltType[82076]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512176] "RVV" "param" "temp"
    unknown tmp[421671] "maybe param" "temp"
    (421682 'move' tmp[421671](82083 call isNumeric eltType[82076]))
    unknown call_tmp[628606] "expr temp" "maybe param" "maybe type" "temp"
    (628609 'move' call_tmp[628606](421684 call _cond_invalid tmp[421671]))
    if call_tmp[628606]
    {
      (421687 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560063] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560064] "maybe param" "temp"
    unknown call_tmp[628611] "expr temp" "maybe param" "maybe type" "temp"
    (628614 'move' call_tmp[628611](421672 call isTrue tmp[421671]))
    (560069 'move' tmp[560064](560067 call _cond_test call_tmp[628611]))
    if tmp[560064]
    {
      (560074 'move' tmp[560063](560071 '_paramFoldLogical' tmp[560064] 1))
    }
    {
      unknown tmp[560076] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628616] "expr temp" "maybe param" "maybe type" "temp"
      (628619 'move' call_tmp[628616](82087 call isString eltType[82076]))
      (560078 'move' tmp[560076](421676 call isTrue call_tmp[628616]))
      (560083 'move' tmp[560063](560080 '_paramFoldLogical' tmp[560064] tmp[560076]))
    }
    unknown call_tmp[628621] "expr temp" "maybe param" "maybe type" "temp"
    (628624 'move' call_tmp[628621](82160 call _cond_test tmp[560063]))
    if call_tmp[628621]
    {
      (512181 'move' ret[512176](512180 'deref' 1))
      gotoReturn _end_chpl_sumTypeIsSame[512174] _end_chpl_sumTypeIsSame[512174]
    }
    {
      unknown call_tmp[628626] "expr temp" "maybe param" "maybe type" "temp"
      (628629 'move' call_tmp[628626](82097 call isDomain eltType[82076]))
      unknown call_tmp[628631] "expr temp" "maybe param" "maybe type" "temp"
      (628634 'move' call_tmp[628631](82155 call _cond_test call_tmp[628626]))
      if call_tmp[628631]
      {
        unknown d[82099] "dead at end of block" "insert auto destroy"
        (541472 'default init var' d[82099] eltType[82076])
        (82102 'end of statement')
        unknown call_tmp[628636] "expr temp" "maybe param" "maybe type" "temp"
        (628639 'move' call_tmp[628636](82107 call isAssociativeDom d[82099]))
        (512186 'move' ret[512176](512185 'deref' call_tmp[628636]))
        gotoReturn _end_chpl_sumTypeIsSame[512174] _end_chpl_sumTypeIsSame[512174]
        (476701 'end of statement' d[82099])
      }
      {
        unknown call_tmp[628641] "expr temp" "maybe param" "maybe type" "temp"
        (628644 'move' call_tmp[628641](82113 call isArray eltType[82076]))
        unknown call_tmp[628646] "expr temp" "maybe param" "maybe type" "temp"
        (628649 'move' call_tmp[628646](82151 call _cond_test call_tmp[628641]))
        if call_tmp[628646]
        {
          unknown arrInstType[82119] "dead at end of block" "insert auto destroy" "type variable"(82118 'static field type' eltType[82076] "_instance")
          (541477 'move' arrInstType[82119](541474 'static field type' eltType[82076] "_instance"))
          unknown instanceObj[82125] "dead at end of block" "insert auto destroy"
          unknown call_tmp[628651] "expr temp" "maybe param" "maybe type" "temp"
          (628654 'move' call_tmp[628651](82124 'to nilable class from type' arrInstType[82119]))
          (541479 'default init var' instanceObj[82125] call_tmp[628651])
          (82128 'end of statement' arrInstType[82119])
          unknown call_tmp[628656] "expr temp" "maybe param" "maybe type" "temp"
          (628659 'move' call_tmp[628656](82132 call postfix! instanceObj[82125]))
          unknown call_tmp[628663] "expr temp" "maybe param" "maybe type" "temp"
          (628666 'move' call_tmp[628663](82134 call eltType _mt[243] call_tmp[628656]))
          unknown instanceEltType[82138] "dead at end of block" "insert auto destroy" "type variable"(82137 'static typeof' call_tmp[628663])
          unknown call_tmp[628668] "expr temp" "maybe param" "maybe type" "temp"
          (628671 'move' call_tmp[628668](541485 call postfix! instanceObj[82125]))
          unknown call_tmp[628675] "expr temp" "maybe param" "maybe type" "temp"
          (628678 'move' call_tmp[628675](541483 call eltType _mt[243] call_tmp[628668]))
          (541488 'move' instanceEltType[82138](541481 'static typeof' call_tmp[628675]))
          (476704 'end of statement' instanceObj[82125])
          unknown call_tmp[628680] "expr temp" "maybe param" "maybe type" "temp"
          (628683 'move' call_tmp[628680](82144 call chpl_sumTypeIsSame instanceEltType[82138]))
          (512191 'move' ret[512176](512190 'deref' call_tmp[628680]))
          gotoReturn _end_chpl_sumTypeIsSame[512174] _end_chpl_sumTypeIsSame[512174]
          (476706 'end of statement' instanceEltType[82138])
        }
        {
          (512196 'move' ret[512176](512195 'deref' 0))
          gotoReturn _end_chpl_sumTypeIsSame[512174] _end_chpl_sumTypeIsSame[512174]
        }
      }
    }
    label _end_chpl_sumTypeIsSame[512174]
    (512178 return ret[512176])
  }
  function chpl__sumType[82172](arg eltType[82170]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[512202] "RVV" "temp" "type variable"
    unknown call_tmp[628685] "expr temp" "maybe param" "maybe type" "temp"
    (628688 'move' call_tmp[628685](82177 call chpl_sumTypeIsSame eltType[82170]))
    unknown call_tmp[628690] "expr temp" "maybe param" "maybe type" "temp"
    (628693 'move' call_tmp[628690](82283 call _cond_test call_tmp[628685]))
    if call_tmp[628690]
    {
      (512207 'move' ret[512202](512206 'deref' eltType[82170]))
      gotoReturn _end_chpl__sumType[512200] _end_chpl__sumType[512200]
    }
    {
      unknown x[82183] "dead at end of block" "insert auto destroy"
      (541490 'default init var' x[82183] eltType[82170])
      (82186 'end of statement')
      unknown call_tmp[628695] "expr temp" "maybe param" "maybe type" "temp"
      (628698 'move' call_tmp[628695](82191 call isArray x[82183]))
      unknown call_tmp[628700] "expr temp" "maybe param" "maybe type" "temp"
      (628703 'move' call_tmp[628700](82279 call _cond_test call_tmp[628695]))
      if call_tmp[628700]
      {
        unknown xET[82196] "dead at end of block" "insert auto destroy" "type variable"(82193 call eltType _mt[243] x[82183])
        (541496 'move' xET[82196](541493 call eltType _mt[243] x[82183]))
        (476710 'end of statement' x[82183])
        unknown xST[82204] "dead at end of block" "insert auto destroy" "type variable"(82203 call chpl__sumType xET[82196])
        (541501 'move' xST[82204](541499 call chpl__sumType xET[82196]))
        (476712 'end of statement' xET[82196])
        unknown call_tmp[628709] "expr temp" "maybe param" "maybe type" "temp"
        (628712 'move' call_tmp[628709](82209 call == xET[82196] xST[82204]))
        unknown call_tmp[628714] "expr temp" "maybe param" "maybe type" "temp"
        (628717 'move' call_tmp[628714](82224 call _cond_test call_tmp[628709]))
        if call_tmp[628714]
        {
          (512212 'move' ret[512202](512211 'deref' eltType[82170]))
          gotoReturn _end_chpl__sumType[512200] _end_chpl__sumType[512200]
        }
        {
          function chpl__loopexpr_iter3[581774](arg iterator[581776]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[581914] "RVV" "temp"
            {
              unknown _indexOfInterest[581781] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581782] "expr temp" "temp"
              (581791 'move' _iterator[581782](581789 call _getIterator iterator[581776]))
              Defer
              {
                {
                  (581808 call _freeIterator _iterator[581782])
                }
              }
              { scopeless type
                (581796 'move' _indexOfInterest[581781](581793 call iteratorIndex _iterator[581782]))
              }
              ForLoop[581783] for-expr
              {
                unknown chpl__elidedIdx[581801] "index var" "insert auto destroy"
                (581908 'end of statement')
                (581803 'move' chpl__elidedIdx[581801] _indexOfInterest[581781])
                (581909 'end of statement' chpl__elidedIdx[581801])
                {
                  {
                    unknown yret[581918] "YVV" "temp"
                    (581921 'move' yret[581918](581920 'deref' xST[82204]))
                    (581923 yield yret[581918])
                  }
                }
                label _continueLabel[581786]
                _indexOfInterest[581781]
                _iterator[581782]
              }
              label _breakLabel[581787]
            }
            (581916 return ret[581914])
          }
          function chpl__loopexpr_iter3[581815](param arg tag[581819]:iterKind[453], arg iterator[581822]:_any[178](?)) : _unknown[51] "fn returns iterator"
          {
            unknown ret[581950] "RVV" "temp"
            const _leaderIterator[581834] "const" "expr temp" "temp"
            (581839 'move' _leaderIterator[581834](581836 call _toLeader iterator[581822]))
            (581955 'move' ret[581950](581954 'deref' _leaderIterator[581834]))
            (581952 return ret[581950])
          }
          where {
            unknown tmp[581926] "maybe param" "temp"
            (581937 'move' tmp[581926](581824 call == tag[581819] leader[447]))
            unknown call_tmp[581984] "expr temp" "maybe param" "maybe type" "temp"
            (581987 'move' call_tmp[581984](581939 call _cond_invalid tmp[581926]))
            if call_tmp[581984]
            {
              (581942 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[581957] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[581958] "maybe param" "temp"
            unknown call_tmp[581989] "expr temp" "maybe param" "maybe type" "temp"
            (581992 'move' call_tmp[581989](581927 call isTrue tmp[581926]))
            (581963 'move' tmp[581958](581961 call _cond_test call_tmp[581989]))
            if tmp[581958]
            {
              unknown tmp[581965] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[581994] "expr temp" "maybe param" "maybe type" "temp"
              (581997 'move' call_tmp[581994](581828 'call resolves' "_toLeader" iterator[581822]))
              (581967 'move' tmp[581965](581930 call isTrue call_tmp[581994]))
              (581972 'move' tmp[581957](581969 '_paramFoldLogical' tmp[581958] tmp[581965]))
            }
            {
              (581977 'move' tmp[581957](581974 '_paramFoldLogical' tmp[581958] 0))
            }
            (748422 call chpl_statementLevelSymbol tmp[581957])
          }
          function chpl__loopexpr_iter3[581843](param arg tag[581847]:iterKind[453], arg followThis[581850]:_any[178](?), arg iterator[581852]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[582007] "RVV" "temp"
            const _followerIterator[581859] "const" "expr temp" "temp"
            (581865 'move' _followerIterator[581859](581861 call _toFollower iterator[581852] followThis[581850]))
            {
              unknown _indexOfInterest[581872] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581873] "expr temp" "temp"
              (581882 'move' _iterator[581873](581880 call _getIterator _followerIterator[581859]))
              Defer
              {
                {
                  (581899 call _freeIterator _iterator[581873])
                }
              }
              { scopeless type
                (581887 'move' _indexOfInterest[581872](581884 call iteratorIndex _iterator[581873]))
              }
              ForLoop[581874] lowered-forall for-expr
              {
                unknown chpl__elidedIdx[581892] "index var" "insert auto destroy"
                (582001 'end of statement')
                (581894 'move' chpl__elidedIdx[581892] _indexOfInterest[581872])
                (582002 'end of statement' chpl__elidedIdx[581892])
                {
                  {
                    unknown yret[582011] "YVV" "temp"
                    (582014 'move' yret[582011](582013 'deref' xST[82204]))
                    (582016 yield yret[582011])
                  }
                }
                label _continueLabel[581877]
                _indexOfInterest[581872]
                _iterator[581873]
              }
              label _breakLabel[581878]
            }
            (582009 return ret[582007])
          }
          where {
            (581855 call == tag[581847] follower[449])
          }
          function chpl__forallexpr3[581687](arg iterExpr[581690]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "maybe type" "fn returns iterator"
          {
            unknown ret[582028] "RVV" "maybe type" "temp"
            function _isArrayTypeFn[581696]() : _unknown[51] "inline"
            {
              unknown _iterator[581701] "temp"
              (581706 'move' _iterator[581701](581703 call _getIterator iterExpr[581690]))
              unknown _indexOfInterest[581708] "an _indexOfInterest or chpl__followIdx variable" "temp"
              (581713 'move' _indexOfInterest[581708](581710 call iteratorIndex _iterator[581701]))
              unknown chpl__elidedIdx[581719] "index var" "insert auto destroy"
              (582018 'end of statement')
              (581721 'move' chpl__elidedIdx[581719] _indexOfInterest[581708])
              (582019 'end of statement' chpl__elidedIdx[581719])
              unknown isType_result[581723] "param" "temp"
              {
                (581729 'move' isType_result[581723](581727 call isType xST[82204]))
              }
              if isType_result[581723]
              {
                (581732 'move' _isArrayType[581699] 1)
              }
              {
                (581735 'move' _isArrayType[581699] 0)
              }
              (582024 return _void[55])
            }
            unknown _isArrayType[581699] "maybe param" "temp"
            { scopeless type
              (581742 call _isArrayTypeFn[581696])
            }
            if _isArrayType[581699]
            {
              unknown _arrayType[581744] "expr temp" "maybe type" "temp"
              unknown _domain[581747] "expr temp" "no auto destroy" "temp"
              (581752 'move' _domain[581747](581749 call chpl__ensureDomainExpr iterExpr[581690]))
              {
                (581759 'move' _arrayType[581744](581756 call chpl__buildArrayRuntimeType _domain[581747] xST[82204]))
              }
              (582033 'move' ret[582028](582032 'deref' _arrayType[581744]))
              gotoReturn _end_chpl__forallexpr3[582026] _end_chpl__forallexpr3[582026]
            }
            {
              unknown _iterator[581765] "expr temp" "maybe ref" "temp"
              (581767 'move' _iterator[581765] iterExpr[581690])
              unknown call_tmp[582042] "expr temp" "maybe param" "maybe type" "temp"
              (582045 'move' call_tmp[582042](581770 call chpl__loopexpr_iter3 _iterator[581765]))
              (582038 'move' ret[582028](582037 'deref' call_tmp[582042]))
              gotoReturn _end_chpl__forallexpr3[582026] _end_chpl__forallexpr3[582026]
            }
            label _end_chpl__forallexpr3[582026]
            (582030 return ret[582028])
          }
          unknown call_tmp[582049] "expr temp" "maybe param" "maybe type" "temp"
          (582052 'move' call_tmp[582049](82215 call _dom _mt[243] x[82183]))
          unknown call_tmp[582054] "expr temp" "maybe param" "maybe type" "temp"
          (582057 'move' call_tmp[582054](581692 call chpl__forallexpr3 call_tmp[582049]))
          (582061 'iterator record set shape' call_tmp[582054] call_tmp[582049] 0)
          (512217 'move' ret[512202](512216 'deref' call_tmp[582054]))
          gotoReturn _end_chpl__sumType[512200] _end_chpl__sumType[512200]
          (476715 'end of statement' x[82183] xST[82204])
        }
      }
      {
        unknown call_tmp[628719] "expr temp" "maybe param" "maybe type" "temp"
        (628722 'move' call_tmp[628719](82239 call canResolve "+" x[82183] x[82183]))
        unknown call_tmp[628724] "expr temp" "maybe param" "maybe type" "temp"
        (628727 'move' call_tmp[628724](82240 call ! call_tmp[628719]))
        unknown call_tmp[628729] "expr temp" "maybe param" "maybe type" "temp"
        (628732 'move' call_tmp[628729](82267 call _cond_test call_tmp[628724]))
        if call_tmp[628729]
        {
          unknown call_tmp[628734] "expr temp" "maybe param" "maybe type" "temp"
          (628737 'move' call_tmp[628734](82263 call _cast string[26] eltType[82170]))
          (82265 call compilerError "+ reduce cannot be used on values of the type " call_tmp[628734])
        }
        { scopeless type
          unknown call_type_tmp[491927] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[628739] "expr temp" "maybe param" "maybe type" "temp"
          (628742 'move' call_tmp[628739](82274 call + x[82183] x[82183]))
          (491931 'move' call_type_tmp[491927](82276 'typeof' call_tmp[628739]))
        }
        (512222 'move' ret[512202](512221 'deref' call_type_tmp[491927]))
        gotoReturn _end_chpl__sumType[512200] _end_chpl__sumType[512200]
        (476719 'end of statement' x[82183] x[82183])
        (355060 'used modules list'(82231 'use' Reflection[224882]))
      }
    }
    label _end_chpl__sumType[512200]
    (512204 return ret[512202])
  }
  type ReduceScanOp[82297] val super[355606]:object[22] "super class" val l[82292]:chpl_LocalSpinlock[187386] chpl_LocalSpinlock[187386]
  function SumReduceScanOp[82409](?).identity[82316](arg _mt[82413]:_MT[238], arg this[82411]:SumReduceScanOp[82409](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[512228] "RVV" "temp"
    unknown x[82322] "dead at end of block" "insert auto destroy"
    unknown call_tmp[628746] "expr temp" "maybe param" "maybe type" "temp"
    (628749 'move' call_tmp[628746](376349 call eltType _mt[243] this[82411]))
    unknown call_tmp[628751] "expr temp" "maybe param" "maybe type" "temp"
    (628754 'move' call_tmp[628751](82321 call chpl__sumType call_tmp[628746]))
    (541503 'default init var' x[82322] call_tmp[628751])
    (82325 'end of statement')
    (512233 'move' ret[512228](512232 'deref' x[82322]))
    gotoReturn _end_identity[512226] _end_identity[512226]
    (476722 'end of statement' x[82322])
    label _end_identity[512226]
    (512230 return ret[512228])
  }
  function SumReduceScanOp[82409](?).accumulate[82336](arg _mt[82417]:_MT[238], arg this[82415]:SumReduceScanOp[82409](?), arg x[82334]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628758] "expr temp" "maybe param" "maybe type" "temp"
    (628761 'move' call_tmp[628758](376355 call value _mt[243] this[82415]))
    (82340 call += call_tmp[628758] x[82334])
    (512237 return _void[55])
  }
  function SumReduceScanOp[82409](?).accumulateOntoState[82350](arg _mt[82421]:_MT[238], arg this[82419]:SumReduceScanOp[82409](?), ref arg state[82348]:_any[178](?), arg x[82352]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82356 call += state[82348] x[82352])
    (512239 return _void[55])
  }
  function SumReduceScanOp[82409](?).combine[82366](arg _mt[82425]:_MT[238], arg this[82423]:SumReduceScanOp[82409](?), arg x[82364]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628765] "expr temp" "maybe param" "maybe type" "temp"
    (628768 'move' call_tmp[628765](376363 call value _mt[243] this[82423]))
    unknown call_tmp[628772] "expr temp" "maybe param" "maybe type" "temp"
    (628775 'move' call_tmp[628772](82372 call value _mt[243] x[82364]))
    (82375 call += call_tmp[628765] call_tmp[628772])
    (512241 return _void[55])
  }
  function SumReduceScanOp[82409](?).generate[82383](arg _mt[82429]:_MT[238], arg this[82427]:SumReduceScanOp[82409](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512245] "RVV" "temp"
    unknown call_tmp[628779] "expr temp" "maybe param" "maybe type" "temp"
    (628782 'move' call_tmp[628779](376368 call value _mt[243] this[82427]))
    (512250 'move' ret[512245](512249 'deref' call_tmp[628779]))
    (512247 return ret[512245])
  }
  function SumReduceScanOp[82409](?).clone[82393](arg _mt[82433]:_MT[238], arg this[82431]:SumReduceScanOp[82409](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512254] "RVV" "temp"
    unknown call_tmp[628786] "expr temp" "maybe param" "maybe type" "temp"
    (628789 'move' call_tmp[628786](376377 call eltType _mt[243] this[82431]))
    unknown call_tmp[628791] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628794 'move' call_tmp[628791](747794 'new' SumReduceScanOp[376372](?)(eltType = call_tmp[628786])(_chpl_manager = unmanaged[220](?))))
    (512259 'move' ret[512254](512258 'deref' call_tmp[628791]))
    (512256 return ret[512254])
  }
  type SumReduceScanOp[82409](?) val super[355608]:ReduceScanOp[82297] "super class" unknown eltType[82303] "type variable" unknown value[82310](82309 call chpl__sumType eltType[82303])
  type SumReduceScanOp[376372](?)
  function ProductReduceScanOp[82538](?).identity[82452](arg _mt[82542]:_MT[238], arg this[82540]:ProductReduceScanOp[82538](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512263] "RVV" "temp"
    unknown call_tmp[628798] "expr temp" "maybe param" "maybe type" "temp"
    (628801 'move' call_tmp[628798](376383 call eltType _mt[243] this[82540]))
    unknown call_tmp[628803] "expr temp" "maybe param" "maybe type" "temp"
    (628806 'move' call_tmp[628803](82457 call _prod_id call_tmp[628798]))
    (512268 'move' ret[512263](512267 'deref' call_tmp[628803]))
    (512265 return ret[512263])
  }
  function ProductReduceScanOp[82538](?).accumulate[82467](arg _mt[82546]:_MT[238], arg this[82544]:ProductReduceScanOp[82538](?), arg x[82465]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628810] "expr temp" "maybe param" "maybe type" "temp"
    (628813 'move' call_tmp[628810](376388 call value _mt[243] this[82544]))
    (82471 call *= call_tmp[628810] x[82465])
    (512270 return _void[55])
  }
  function ProductReduceScanOp[82538](?).accumulateOntoState[82481](arg _mt[82550]:_MT[238], arg this[82548]:ProductReduceScanOp[82538](?), ref arg state[82479]:_any[178](?), arg x[82483]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82487 call *= state[82479] x[82483])
    (512272 return _void[55])
  }
  function ProductReduceScanOp[82538](?).combine[82497](arg _mt[82554]:_MT[238], arg this[82552]:ProductReduceScanOp[82538](?), arg x[82495]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628817] "expr temp" "maybe param" "maybe type" "temp"
    (628820 'move' call_tmp[628817](376396 call value _mt[243] this[82552]))
    unknown call_tmp[628824] "expr temp" "maybe param" "maybe type" "temp"
    (628827 'move' call_tmp[628824](82501 call value _mt[243] x[82495]))
    (82504 call *= call_tmp[628817] call_tmp[628824])
    (512274 return _void[55])
  }
  function ProductReduceScanOp[82538](?).generate[82512](arg _mt[82558]:_MT[238], arg this[82556]:ProductReduceScanOp[82538](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512278] "RVV" "temp"
    unknown call_tmp[628831] "expr temp" "maybe param" "maybe type" "temp"
    (628834 'move' call_tmp[628831](376401 call value _mt[243] this[82556]))
    (512283 'move' ret[512278](512282 'deref' call_tmp[628831]))
    (512280 return ret[512278])
  }
  function ProductReduceScanOp[82538](?).clone[82522](arg _mt[82562]:_MT[238], arg this[82560]:ProductReduceScanOp[82538](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512287] "RVV" "temp"
    unknown call_tmp[628838] "expr temp" "maybe param" "maybe type" "temp"
    (628841 'move' call_tmp[628838](376410 call eltType _mt[243] this[82560]))
    unknown call_tmp[628843] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628846 'move' call_tmp[628843](747795 'new' ProductReduceScanOp[376405](?)(eltType = call_tmp[628838])(_chpl_manager = unmanaged[220](?))))
    (512292 'move' ret[512287](512291 'deref' call_tmp[628843]))
    (512289 return ret[512287])
  }
  type ProductReduceScanOp[82538](?) val super[355610]:ReduceScanOp[82297] "super class" unknown eltType[82439] "type variable" unknown value[82446](82445 call _prod_id eltType[82439])
  type ProductReduceScanOp[376405](?)
  function MaxReduceScanOp[82679](?).identity[82581](arg _mt[82683]:_MT[238], arg this[82681]:MaxReduceScanOp[82679](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512296] "RVV" "temp"
    unknown call_tmp[628850] "expr temp" "maybe param" "maybe type" "temp"
    (628853 'move' call_tmp[628850](376416 call eltType _mt[243] this[82681]))
    unknown call_tmp[628855] "expr temp" "maybe param" "maybe type" "temp"
    (628858 'move' call_tmp[628855](82586 call min call_tmp[628850]))
    (512301 'move' ret[512296](512300 'deref' call_tmp[628855]))
    (512298 return ret[512296])
  }
  function MaxReduceScanOp[82679](?).accumulate[82596](arg _mt[82687]:_MT[238], arg this[82685]:MaxReduceScanOp[82679](?), arg x[82594]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628862] "expr temp" "maybe param" "maybe type" "temp"
    (628865 'move' call_tmp[628862](376421 call value _mt[243] this[82685]))
    unknown call_tmp[628869] "expr temp" "maybe param" "maybe type" "temp"
    (628872 'move' call_tmp[628869](376427 call value _mt[243] this[82685]))
    unknown call_tmp[628874] "expr temp" "maybe param" "maybe type" "temp"
    (628877 'move' call_tmp[628874](82603 call max x[82594] call_tmp[628869]))
    (82604 call = call_tmp[628862] call_tmp[628874])
    (512303 return _void[55])
  }
  function MaxReduceScanOp[82679](?).accumulateOntoState[82614](arg _mt[82691]:_MT[238], arg this[82689]:MaxReduceScanOp[82679](?), ref arg state[82612]:_any[178](?), arg x[82616]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628879] "expr temp" "maybe param" "maybe type" "temp"
    (628882 'move' call_tmp[628879](82623 call max state[82612] x[82616]))
    (82624 call = state[82612] call_tmp[628879])
    (512305 return _void[55])
  }
  function MaxReduceScanOp[82679](?).combine[82634](arg _mt[82695]:_MT[238], arg this[82693]:MaxReduceScanOp[82679](?), arg x[82632]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628886] "expr temp" "maybe param" "maybe type" "temp"
    (628889 'move' call_tmp[628886](376435 call value _mt[243] this[82693]))
    unknown call_tmp[628893] "expr temp" "maybe param" "maybe type" "temp"
    (628896 'move' call_tmp[628893](376440 call value _mt[243] this[82693]))
    unknown call_tmp[628900] "expr temp" "maybe param" "maybe type" "temp"
    (628903 'move' call_tmp[628900](82641 call value _mt[243] x[82632]))
    unknown call_tmp[628905] "expr temp" "maybe param" "maybe type" "temp"
    (628908 'move' call_tmp[628905](82644 call max call_tmp[628893] call_tmp[628900]))
    (82645 call = call_tmp[628886] call_tmp[628905])
    (512307 return _void[55])
  }
  function MaxReduceScanOp[82679](?).generate[82653](arg _mt[82699]:_MT[238], arg this[82697]:MaxReduceScanOp[82679](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512311] "RVV" "temp"
    unknown call_tmp[628912] "expr temp" "maybe param" "maybe type" "temp"
    (628915 'move' call_tmp[628912](376445 call value _mt[243] this[82697]))
    (512316 'move' ret[512311](512315 'deref' call_tmp[628912]))
    (512313 return ret[512311])
  }
  function MaxReduceScanOp[82679](?).clone[82663](arg _mt[82703]:_MT[238], arg this[82701]:MaxReduceScanOp[82679](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512320] "RVV" "temp"
    unknown call_tmp[628919] "expr temp" "maybe param" "maybe type" "temp"
    (628922 'move' call_tmp[628919](376454 call eltType _mt[243] this[82701]))
    unknown call_tmp[628924] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628927 'move' call_tmp[628924](747796 'new' MaxReduceScanOp[376449](?)(eltType = call_tmp[628919])(_chpl_manager = unmanaged[220](?))))
    (512325 'move' ret[512320](512324 'deref' call_tmp[628924]))
    (512322 return ret[512320])
  }
  type MaxReduceScanOp[82679](?) val super[355612]:ReduceScanOp[82297] "super class" unknown eltType[82568] "type variable" unknown value[82575](82574 call min eltType[82568])
  type MaxReduceScanOp[376449](?)
  function MinReduceScanOp[82820](?).identity[82722](arg _mt[82824]:_MT[238], arg this[82822]:MinReduceScanOp[82820](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512329] "RVV" "temp"
    unknown call_tmp[628931] "expr temp" "maybe param" "maybe type" "temp"
    (628934 'move' call_tmp[628931](376460 call eltType _mt[243] this[82822]))
    unknown call_tmp[628936] "expr temp" "maybe param" "maybe type" "temp"
    (628939 'move' call_tmp[628936](82727 call max call_tmp[628931]))
    (512334 'move' ret[512329](512333 'deref' call_tmp[628936]))
    (512331 return ret[512329])
  }
  function MinReduceScanOp[82820](?).accumulate[82737](arg _mt[82828]:_MT[238], arg this[82826]:MinReduceScanOp[82820](?), arg x[82735]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628943] "expr temp" "maybe param" "maybe type" "temp"
    (628946 'move' call_tmp[628943](376465 call value _mt[243] this[82826]))
    unknown call_tmp[628950] "expr temp" "maybe param" "maybe type" "temp"
    (628953 'move' call_tmp[628950](376471 call value _mt[243] this[82826]))
    unknown call_tmp[628955] "expr temp" "maybe param" "maybe type" "temp"
    (628958 'move' call_tmp[628955](82744 call min x[82735] call_tmp[628950]))
    (82745 call = call_tmp[628943] call_tmp[628955])
    (512336 return _void[55])
  }
  function MinReduceScanOp[82820](?).accumulateOntoState[82755](arg _mt[82832]:_MT[238], arg this[82830]:MinReduceScanOp[82820](?), ref arg state[82753]:_any[178](?), arg x[82757]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628960] "expr temp" "maybe param" "maybe type" "temp"
    (628963 'move' call_tmp[628960](82764 call min state[82753] x[82757]))
    (82765 call = state[82753] call_tmp[628960])
    (512338 return _void[55])
  }
  function MinReduceScanOp[82820](?).combine[82775](arg _mt[82836]:_MT[238], arg this[82834]:MinReduceScanOp[82820](?), arg x[82773]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628967] "expr temp" "maybe param" "maybe type" "temp"
    (628970 'move' call_tmp[628967](376479 call value _mt[243] this[82834]))
    unknown call_tmp[628974] "expr temp" "maybe param" "maybe type" "temp"
    (628977 'move' call_tmp[628974](376484 call value _mt[243] this[82834]))
    unknown call_tmp[628981] "expr temp" "maybe param" "maybe type" "temp"
    (628984 'move' call_tmp[628981](82782 call value _mt[243] x[82773]))
    unknown call_tmp[628986] "expr temp" "maybe param" "maybe type" "temp"
    (628989 'move' call_tmp[628986](82785 call min call_tmp[628974] call_tmp[628981]))
    (82786 call = call_tmp[628967] call_tmp[628986])
    (512340 return _void[55])
  }
  function MinReduceScanOp[82820](?).generate[82794](arg _mt[82840]:_MT[238], arg this[82838]:MinReduceScanOp[82820](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512344] "RVV" "temp"
    unknown call_tmp[628993] "expr temp" "maybe param" "maybe type" "temp"
    (628996 'move' call_tmp[628993](376489 call value _mt[243] this[82838]))
    (512349 'move' ret[512344](512348 'deref' call_tmp[628993]))
    (512346 return ret[512344])
  }
  function MinReduceScanOp[82820](?).clone[82804](arg _mt[82844]:_MT[238], arg this[82842]:MinReduceScanOp[82820](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512353] "RVV" "temp"
    unknown call_tmp[629000] "expr temp" "maybe param" "maybe type" "temp"
    (629003 'move' call_tmp[629000](376498 call eltType _mt[243] this[82842]))
    unknown call_tmp[629005] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629008 'move' call_tmp[629005](747797 'new' MinReduceScanOp[376493](?)(eltType = call_tmp[629000])(_chpl_manager = unmanaged[220](?))))
    (512358 'move' ret[512353](512357 'deref' call_tmp[629005]))
    (512355 return ret[512353])
  }
  type MinReduceScanOp[82820](?) val super[355614]:ReduceScanOp[82297] "super class" unknown eltType[82709] "type variable" unknown value[82716](82715 call max eltType[82709])
  type MinReduceScanOp[376493](?)
  function minmax[83071](?).identity[82870](arg _mt[83075]:_MT[238], arg this[83073]:minmax[83071](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512362] "RVV" "temp"
    unknown call_tmp[629012] "expr temp" "maybe param" "maybe type" "temp"
    (629015 'move' call_tmp[629012](376505 call eltType _mt[243] this[83073]))
    unknown call_tmp[629017] "expr temp" "maybe param" "maybe type" "temp"
    (629020 'move' call_tmp[629017](82875 call max call_tmp[629012]))
    unknown call_tmp[629024] "expr temp" "maybe param" "maybe type" "temp"
    (629027 'move' call_tmp[629024](376510 call eltType _mt[243] this[83073]))
    unknown call_tmp[629029] "expr temp" "maybe param" "maybe type" "temp"
    (629032 'move' call_tmp[629029](82879 call min call_tmp[629024]))
    unknown call_tmp[629034] "expr temp" "maybe param" "maybe type" "temp"
    (629037 'move' call_tmp[629034](82881 call _build_tuple call_tmp[629017] call_tmp[629029]))
    (512367 'move' ret[512362](512366 'deref' call_tmp[629034]))
    (512364 return ret[512362])
  }
  function minmax[83071](?).accumulateOntoState[82892](arg _mt[83079]:_MT[238], arg this[83077]:minmax[83071](?), ref arg state[82890]:_any[178](?), arg x[82895] :
  (376515 call eltType _mt[243] this[83077])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629041] "expr temp" "maybe param" "maybe type" "temp"
    (629044 'move' call_tmp[629041](82901 call state[82890] 0))
    unknown call_tmp[629046] "expr temp" "maybe param" "maybe type" "temp"
    (629049 'move' call_tmp[629046](82906 call state[82890] 0))
    unknown call_tmp[629051] "expr temp" "maybe param" "maybe type" "temp"
    (629054 'move' call_tmp[629051](82909 call min call_tmp[629046] x[82895]))
    (82910 call = call_tmp[629041] call_tmp[629051])
    (476748 'end of statement')
    unknown call_tmp[629056] "expr temp" "maybe param" "maybe type" "temp"
    (629059 'move' call_tmp[629056](82917 call state[82890] 1))
    unknown call_tmp[629061] "expr temp" "maybe param" "maybe type" "temp"
    (629064 'move' call_tmp[629061](82922 call state[82890] 1))
    unknown call_tmp[629066] "expr temp" "maybe param" "maybe type" "temp"
    (629069 'move' call_tmp[629066](82925 call max call_tmp[629061] x[82895]))
    (82926 call = call_tmp[629056] call_tmp[629066])
    (512369 return _void[55])
  }
  function minmax[83071](?).accumulateOntoState[82935](arg _mt[83083]:_MT[238], arg this[83081]:minmax[83071](?), ref arg state[82933]:_any[178](?), arg other[82941] :
  unknown call_tmp[629073] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629078] "expr temp" "maybe param" "maybe type" "temp"
    (629081 'move' call_tmp[629078](82947 call state[82933] 0))
    unknown call_tmp[629083] "expr temp" "maybe param" "maybe type" "temp"
    (629086 'move' call_tmp[629083](82952 call state[82933] 0))
    unknown call_tmp[629088] "expr temp" "maybe param" "maybe type" "temp"
    (629091 'move' call_tmp[629088](82957 call other[82941] 0))
    unknown call_tmp[629093] "expr temp" "maybe param" "maybe type" "temp"
    (629096 'move' call_tmp[629093](82958 call min call_tmp[629083] call_tmp[629088]))
    (82959 call = call_tmp[629078] call_tmp[629093])
    (476750 'end of statement')
    unknown call_tmp[629098] "expr temp" "maybe param" "maybe type" "temp"
    (629101 'move' call_tmp[629098](82966 call state[82933] 1))
    unknown call_tmp[629103] "expr temp" "maybe param" "maybe type" "temp"
    (629106 'move' call_tmp[629103](82971 call state[82933] 1))
    unknown call_tmp[629108] "expr temp" "maybe param" "maybe type" "temp"
    (629111 'move' call_tmp[629108](82976 call other[82941] 1))
    unknown call_tmp[629113] "expr temp" "maybe param" "maybe type" "temp"
    (629116 'move' call_tmp[629113](82977 call max call_tmp[629103] call_tmp[629108]))
    (82978 call = call_tmp[629098] call_tmp[629113])
    (512371 return _void[55])
  }
  function minmax[83071](?).accumulate[82989](arg _mt[83087]:_MT[238], arg this[83085]:minmax[83071](?), arg x[82986] :
  (376537 call eltType _mt[243] this[83085])) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629124] "expr temp" "maybe param" "maybe type" "temp"
    (629127 'move' call_tmp[629124](376546 call value _mt[243] this[83085]))
    (82995 call(376541 call (partial) accumulateOntoState _mt[243] this[83085]) call_tmp[629124] x[82986])
    (512373 return _void[55])
  }
  function minmax[83071](?).accumulate[83009](arg _mt[83091]:_MT[238], arg this[83089]:minmax[83071](?), arg state[83006] :
  unknown call_tmp[629131] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629140] "expr temp" "maybe param" "maybe type" "temp"
    (629143 'move' call_tmp[629140](376561 call value _mt[243] this[83089]))
    (83015 call(376556 call (partial) accumulateOntoState _mt[243] this[83089]) call_tmp[629140] state[83006])
    (512375 return _void[55])
  }
  function minmax[83071](?).combine[83029](arg _mt[83095]:_MT[238], arg this[83093]:minmax[83071](?), arg other[83026] :
  unknown call_tmp[629147] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629156] "expr temp" "maybe param" "maybe type" "temp"
    (629159 'move' call_tmp[629156](376580 call value _mt[243] this[83093]))
    unknown call_tmp[629163] "expr temp" "maybe param" "maybe type" "temp"
    (629166 'move' call_tmp[629163](83035 call value _mt[243] other[83026]))
    (83038 call(376575 call (partial) accumulateOntoState _mt[243] this[83093]) call_tmp[629156] call_tmp[629163])
    (512377 return _void[55])
  }
  function minmax[83071](?).generate[83045](arg _mt[83099]:_MT[238], arg this[83097]:minmax[83071](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512381] "RVV" "temp"
    unknown call_tmp[629170] "expr temp" "maybe param" "maybe type" "temp"
    (629173 'move' call_tmp[629170](376585 call value _mt[243] this[83097]))
    (512386 'move' ret[512381](512385 'deref' call_tmp[629170]))
    (512383 return ret[512381])
  }
  function minmax[83071](?).clone[83055](arg _mt[83103]:_MT[238], arg this[83101]:minmax[83071](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512390] "RVV" "temp"
    unknown call_tmp[629177] "expr temp" "maybe param" "maybe type" "temp"
    (629180 'move' call_tmp[629177](376591 call eltType _mt[243] this[83101]))
    unknown call_tmp[629182] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629185 'move' call_tmp[629182](747798 'new' minmax[376566](?)(eltType = call_tmp[629177])(_chpl_manager = unmanaged[220](?))))
    (512395 'move' ret[512390](512394 'deref' call_tmp[629182]))
    (512392 return ret[512390])
  }
  type minmax[83071](?) val super[355616]:ReduceScanOp[82297] "super class" unknown eltType[82850] "type variable" unknown value[82864](82862 call _build_tuple(82856 call max eltType[82850])(82860 call min eltType[82850]))
  type minmax[376566](?)
  function LogicalAndReduceScanOp[83235](?).identity[83122](arg _mt[83239]:_MT[238], arg this[83237]:LogicalAndReduceScanOp[83235](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512399] "RVV" "temp"
    unknown call_tmp[629189] "expr temp" "maybe param" "maybe type" "temp"
    (629192 'move' call_tmp[629189](376597 call eltType _mt[243] this[83237]))
    unknown call_tmp[629194] "expr temp" "maybe param" "maybe type" "temp"
    (629197 'move' call_tmp[629194](83127 call _land_id call_tmp[629189]))
    (512404 'move' ret[512399](512403 'deref' call_tmp[629194]))
    (512401 return ret[512399])
  }
  function LogicalAndReduceScanOp[83235](?).accumulate[83137](arg _mt[83243]:_MT[238], arg this[83241]:LogicalAndReduceScanOp[83235](?), arg x[83135]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83142] "temp"
      unknown call_tmp[629201] "expr temp" "maybe param" "maybe type" "temp"
      (629204 'move' call_tmp[629201](376602 call value _mt[243] this[83241]))
      (83145 'move' tmp[83142](83144 'addr of' call_tmp[629201]))
      unknown tmp[421692] "maybe param" "temp"
      (421703 'move' tmp[421692] tmp[83142])
      unknown call_tmp[629206] "expr temp" "maybe param" "maybe type" "temp"
      (629209 'move' call_tmp[629206](421705 call _cond_invalid tmp[421692]))
      if call_tmp[629206]
      {
        (421708 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560090] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560091] "maybe param" "temp"
      unknown call_tmp[629211] "expr temp" "maybe param" "maybe type" "temp"
      (629214 'move' call_tmp[629211](421693 call isTrue tmp[421692]))
      (560096 'move' tmp[560091](560094 call _cond_test call_tmp[629211]))
      if tmp[560091]
      {
        unknown tmp[560098] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560100 'move' tmp[560098](421696 call isTrue x[83135]))
        (560105 'move' tmp[560090](560102 '_paramFoldLogical' tmp[560091] tmp[560098]))
      }
      {
        (560110 'move' tmp[560090](560107 '_paramFoldLogical' tmp[560091] 0))
      }
      (83150 call = tmp[83142] tmp[560090])
    }
    (512406 return _void[55])
  }
  function LogicalAndReduceScanOp[83235](?).accumulateOntoState[83160](arg _mt[83247]:_MT[238], arg this[83245]:LogicalAndReduceScanOp[83235](?), ref arg state[83158]:_any[178](?), arg x[83162]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83167] "temp"
      (83170 'move' tmp[83167](83169 'addr of' state[83158]))
      unknown tmp[421713] "maybe param" "temp"
      (421724 'move' tmp[421713] tmp[83167])
      unknown call_tmp[629216] "expr temp" "maybe param" "maybe type" "temp"
      (629219 'move' call_tmp[629216](421726 call _cond_invalid tmp[421713]))
      if call_tmp[629216]
      {
        (421729 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560117] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560118] "maybe param" "temp"
      unknown call_tmp[629221] "expr temp" "maybe param" "maybe type" "temp"
      (629224 'move' call_tmp[629221](421714 call isTrue tmp[421713]))
      (560123 'move' tmp[560118](560121 call _cond_test call_tmp[629221]))
      if tmp[560118]
      {
        unknown tmp[560125] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560127 'move' tmp[560125](421717 call isTrue x[83162]))
        (560132 'move' tmp[560117](560129 '_paramFoldLogical' tmp[560118] tmp[560125]))
      }
      {
        (560137 'move' tmp[560117](560134 '_paramFoldLogical' tmp[560118] 0))
      }
      (83175 call = tmp[83167] tmp[560117])
    }
    (512408 return _void[55])
  }
  function LogicalAndReduceScanOp[83235](?).combine[83185](arg _mt[83251]:_MT[238], arg this[83249]:LogicalAndReduceScanOp[83235](?), arg x[83183]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83193] "temp"
      unknown call_tmp[629228] "expr temp" "maybe param" "maybe type" "temp"
      (629231 'move' call_tmp[629228](376610 call value _mt[243] this[83249]))
      (83196 'move' tmp[83193](83195 'addr of' call_tmp[629228]))
      unknown tmp[421734] "maybe param" "temp"
      (421745 'move' tmp[421734] tmp[83193])
      unknown call_tmp[629233] "expr temp" "maybe param" "maybe type" "temp"
      (629236 'move' call_tmp[629233](421747 call _cond_invalid tmp[421734]))
      if call_tmp[629233]
      {
        (421750 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560144] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560145] "maybe param" "temp"
      unknown call_tmp[629238] "expr temp" "maybe param" "maybe type" "temp"
      (629241 'move' call_tmp[629238](421735 call isTrue tmp[421734]))
      (560150 'move' tmp[560145](560148 call _cond_test call_tmp[629238]))
      if tmp[560145]
      {
        unknown tmp[560152] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629245] "expr temp" "maybe param" "maybe type" "temp"
        (629248 'move' call_tmp[629245](83189 call value _mt[243] x[83183]))
        (560154 'move' tmp[560152](421738 call isTrue call_tmp[629245]))
        (560159 'move' tmp[560144](560156 '_paramFoldLogical' tmp[560145] tmp[560152]))
      }
      {
        (560164 'move' tmp[560144](560161 '_paramFoldLogical' tmp[560145] 0))
      }
      (83201 call = tmp[83193] tmp[560144])
    }
    (512410 return _void[55])
  }
  function LogicalAndReduceScanOp[83235](?).generate[83209](arg _mt[83255]:_MT[238], arg this[83253]:LogicalAndReduceScanOp[83235](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512414] "RVV" "temp"
    unknown call_tmp[629252] "expr temp" "maybe param" "maybe type" "temp"
    (629255 'move' call_tmp[629252](376615 call value _mt[243] this[83253]))
    (512419 'move' ret[512414](512418 'deref' call_tmp[629252]))
    (512416 return ret[512414])
  }
  function LogicalAndReduceScanOp[83235](?).clone[83219](arg _mt[83259]:_MT[238], arg this[83257]:LogicalAndReduceScanOp[83235](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512423] "RVV" "temp"
    unknown call_tmp[629259] "expr temp" "maybe param" "maybe type" "temp"
    (629262 'move' call_tmp[629259](376624 call eltType _mt[243] this[83257]))
    unknown call_tmp[629264] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629267 'move' call_tmp[629264](747799 'new' LogicalAndReduceScanOp[376619](?)(eltType = call_tmp[629259])(_chpl_manager = unmanaged[220](?))))
    (512428 'move' ret[512423](512427 'deref' call_tmp[629264]))
    (512425 return ret[512423])
  }
  type LogicalAndReduceScanOp[83235](?) val super[355618]:ReduceScanOp[82297] "super class" unknown eltType[83109] "type variable" unknown value[83116](83115 call _land_id eltType[83109])
  type LogicalAndReduceScanOp[376619](?)
  function LogicalOrReduceScanOp[83391](?).identity[83278](arg _mt[83395]:_MT[238], arg this[83393]:LogicalOrReduceScanOp[83391](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512432] "RVV" "temp"
    unknown call_tmp[629271] "expr temp" "maybe param" "maybe type" "temp"
    (629274 'move' call_tmp[629271](376630 call eltType _mt[243] this[83393]))
    unknown call_tmp[629276] "expr temp" "maybe param" "maybe type" "temp"
    (629279 'move' call_tmp[629276](83283 call _lor_id call_tmp[629271]))
    (512437 'move' ret[512432](512436 'deref' call_tmp[629276]))
    (512434 return ret[512432])
  }
  function LogicalOrReduceScanOp[83391](?).accumulate[83293](arg _mt[83399]:_MT[238], arg this[83397]:LogicalOrReduceScanOp[83391](?), arg x[83291]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83298] "temp"
      unknown call_tmp[629283] "expr temp" "maybe param" "maybe type" "temp"
      (629286 'move' call_tmp[629283](376635 call value _mt[243] this[83397]))
      (83301 'move' tmp[83298](83300 'addr of' call_tmp[629283]))
      unknown tmp[421755] "maybe param" "temp"
      (421766 'move' tmp[421755] tmp[83298])
      unknown call_tmp[629288] "expr temp" "maybe param" "maybe type" "temp"
      (629291 'move' call_tmp[629288](421768 call _cond_invalid tmp[421755]))
      if call_tmp[629288]
      {
        (421771 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560171] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560172] "maybe param" "temp"
      unknown call_tmp[629293] "expr temp" "maybe param" "maybe type" "temp"
      (629296 'move' call_tmp[629293](421756 call isTrue tmp[421755]))
      (560177 'move' tmp[560172](560175 call _cond_test call_tmp[629293]))
      if tmp[560172]
      {
        (560182 'move' tmp[560171](560179 '_paramFoldLogical' tmp[560172] 1))
      }
      {
        unknown tmp[560184] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560186 'move' tmp[560184](421760 call isTrue x[83291]))
        (560191 'move' tmp[560171](560188 '_paramFoldLogical' tmp[560172] tmp[560184]))
      }
      (83306 call = tmp[83298] tmp[560171])
    }
    (512439 return _void[55])
  }
  function LogicalOrReduceScanOp[83391](?).accumulateOntoState[83316](arg _mt[83403]:_MT[238], arg this[83401]:LogicalOrReduceScanOp[83391](?), ref arg state[83314]:_any[178](?), arg x[83318]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83323] "temp"
      (83326 'move' tmp[83323](83325 'addr of' state[83314]))
      unknown tmp[421776] "maybe param" "temp"
      (421787 'move' tmp[421776] tmp[83323])
      unknown call_tmp[629298] "expr temp" "maybe param" "maybe type" "temp"
      (629301 'move' call_tmp[629298](421789 call _cond_invalid tmp[421776]))
      if call_tmp[629298]
      {
        (421792 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560198] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560199] "maybe param" "temp"
      unknown call_tmp[629303] "expr temp" "maybe param" "maybe type" "temp"
      (629306 'move' call_tmp[629303](421777 call isTrue tmp[421776]))
      (560204 'move' tmp[560199](560202 call _cond_test call_tmp[629303]))
      if tmp[560199]
      {
        (560209 'move' tmp[560198](560206 '_paramFoldLogical' tmp[560199] 1))
      }
      {
        unknown tmp[560211] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560213 'move' tmp[560211](421781 call isTrue x[83318]))
        (560218 'move' tmp[560198](560215 '_paramFoldLogical' tmp[560199] tmp[560211]))
      }
      (83331 call = tmp[83323] tmp[560198])
    }
    (512441 return _void[55])
  }
  function LogicalOrReduceScanOp[83391](?).combine[83341](arg _mt[83407]:_MT[238], arg this[83405]:LogicalOrReduceScanOp[83391](?), arg x[83339]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83349] "temp"
      unknown call_tmp[629310] "expr temp" "maybe param" "maybe type" "temp"
      (629313 'move' call_tmp[629310](376643 call value _mt[243] this[83405]))
      (83352 'move' tmp[83349](83351 'addr of' call_tmp[629310]))
      unknown tmp[421797] "maybe param" "temp"
      (421808 'move' tmp[421797] tmp[83349])
      unknown call_tmp[629315] "expr temp" "maybe param" "maybe type" "temp"
      (629318 'move' call_tmp[629315](421810 call _cond_invalid tmp[421797]))
      if call_tmp[629315]
      {
        (421813 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560225] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560226] "maybe param" "temp"
      unknown call_tmp[629320] "expr temp" "maybe param" "maybe type" "temp"
      (629323 'move' call_tmp[629320](421798 call isTrue tmp[421797]))
      (560231 'move' tmp[560226](560229 call _cond_test call_tmp[629320]))
      if tmp[560226]
      {
        (560236 'move' tmp[560225](560233 '_paramFoldLogical' tmp[560226] 1))
      }
      {
        unknown tmp[560238] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629327] "expr temp" "maybe param" "maybe type" "temp"
        (629330 'move' call_tmp[629327](83345 call value _mt[243] x[83339]))
        (560240 'move' tmp[560238](421802 call isTrue call_tmp[629327]))
        (560245 'move' tmp[560225](560242 '_paramFoldLogical' tmp[560226] tmp[560238]))
      }
      (83357 call = tmp[83349] tmp[560225])
    }
    (512443 return _void[55])
  }
  function LogicalOrReduceScanOp[83391](?).generate[83365](arg _mt[83411]:_MT[238], arg this[83409]:LogicalOrReduceScanOp[83391](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512447] "RVV" "temp"
    unknown call_tmp[629334] "expr temp" "maybe param" "maybe type" "temp"
    (629337 'move' call_tmp[629334](376648 call value _mt[243] this[83409]))
    (512452 'move' ret[512447](512451 'deref' call_tmp[629334]))
    (512449 return ret[512447])
  }
  function LogicalOrReduceScanOp[83391](?).clone[83375](arg _mt[83415]:_MT[238], arg this[83413]:LogicalOrReduceScanOp[83391](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512456] "RVV" "temp"
    unknown call_tmp[629341] "expr temp" "maybe param" "maybe type" "temp"
    (629344 'move' call_tmp[629341](376657 call eltType _mt[243] this[83413]))
    unknown call_tmp[629346] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629349 'move' call_tmp[629346](747800 'new' LogicalOrReduceScanOp[376652](?)(eltType = call_tmp[629341])(_chpl_manager = unmanaged[220](?))))
    (512461 'move' ret[512456](512460 'deref' call_tmp[629346]))
    (512458 return ret[512456])
  }
  type LogicalOrReduceScanOp[83391](?) val super[355620]:ReduceScanOp[82297] "super class" unknown eltType[83265] "type variable" unknown value[83272](83271 call _lor_id eltType[83265])
  type LogicalOrReduceScanOp[376652](?)
  function BitwiseAndReduceScanOp[83520](?).identity[83434](arg _mt[83524]:_MT[238], arg this[83522]:BitwiseAndReduceScanOp[83520](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512465] "RVV" "temp"
    unknown call_tmp[629353] "expr temp" "maybe param" "maybe type" "temp"
    (629356 'move' call_tmp[629353](376663 call eltType _mt[243] this[83522]))
    unknown call_tmp[629358] "expr temp" "maybe param" "maybe type" "temp"
    (629361 'move' call_tmp[629358](83439 call _band_id call_tmp[629353]))
    (512470 'move' ret[512465](512469 'deref' call_tmp[629358]))
    (512467 return ret[512465])
  }
  function BitwiseAndReduceScanOp[83520](?).accumulate[83449](arg _mt[83528]:_MT[238], arg this[83526]:BitwiseAndReduceScanOp[83520](?), arg x[83447]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629365] "expr temp" "maybe param" "maybe type" "temp"
    (629368 'move' call_tmp[629365](376668 call value _mt[243] this[83526]))
    (83453 call &= call_tmp[629365] x[83447])
    (512472 return _void[55])
  }
  function BitwiseAndReduceScanOp[83520](?).accumulateOntoState[83463](arg _mt[83532]:_MT[238], arg this[83530]:BitwiseAndReduceScanOp[83520](?), ref arg state[83461]:_any[178](?), arg x[83465]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83469 call &= state[83461] x[83465])
    (512474 return _void[55])
  }
  function BitwiseAndReduceScanOp[83520](?).combine[83479](arg _mt[83536]:_MT[238], arg this[83534]:BitwiseAndReduceScanOp[83520](?), arg x[83477]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629372] "expr temp" "maybe param" "maybe type" "temp"
    (629375 'move' call_tmp[629372](376676 call value _mt[243] this[83534]))
    unknown call_tmp[629379] "expr temp" "maybe param" "maybe type" "temp"
    (629382 'move' call_tmp[629379](83483 call value _mt[243] x[83477]))
    (83486 call &= call_tmp[629372] call_tmp[629379])
    (512476 return _void[55])
  }
  function BitwiseAndReduceScanOp[83520](?).generate[83494](arg _mt[83540]:_MT[238], arg this[83538]:BitwiseAndReduceScanOp[83520](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512480] "RVV" "temp"
    unknown call_tmp[629386] "expr temp" "maybe param" "maybe type" "temp"
    (629389 'move' call_tmp[629386](376681 call value _mt[243] this[83538]))
    (512485 'move' ret[512480](512484 'deref' call_tmp[629386]))
    (512482 return ret[512480])
  }
  function BitwiseAndReduceScanOp[83520](?).clone[83504](arg _mt[83544]:_MT[238], arg this[83542]:BitwiseAndReduceScanOp[83520](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512489] "RVV" "temp"
    unknown call_tmp[629393] "expr temp" "maybe param" "maybe type" "temp"
    (629396 'move' call_tmp[629393](376690 call eltType _mt[243] this[83542]))
    unknown call_tmp[629398] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629401 'move' call_tmp[629398](747801 'new' BitwiseAndReduceScanOp[376685](?)(eltType = call_tmp[629393])(_chpl_manager = unmanaged[220](?))))
    (512494 'move' ret[512489](512493 'deref' call_tmp[629398]))
    (512491 return ret[512489])
  }
  type BitwiseAndReduceScanOp[83520](?) val super[355622]:ReduceScanOp[82297] "super class" unknown eltType[83421] "type variable" unknown value[83428](83427 call _band_id eltType[83421])
  type BitwiseAndReduceScanOp[376685](?)
  function BitwiseOrReduceScanOp[83649](?).identity[83563](arg _mt[83653]:_MT[238], arg this[83651]:BitwiseOrReduceScanOp[83649](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512498] "RVV" "temp"
    unknown call_tmp[629405] "expr temp" "maybe param" "maybe type" "temp"
    (629408 'move' call_tmp[629405](376696 call eltType _mt[243] this[83651]))
    unknown call_tmp[629410] "expr temp" "maybe param" "maybe type" "temp"
    (629413 'move' call_tmp[629410](83568 call _bor_id call_tmp[629405]))
    (512503 'move' ret[512498](512502 'deref' call_tmp[629410]))
    (512500 return ret[512498])
  }
  function BitwiseOrReduceScanOp[83649](?).accumulate[83578](arg _mt[83657]:_MT[238], arg this[83655]:BitwiseOrReduceScanOp[83649](?), arg x[83576]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629417] "expr temp" "maybe param" "maybe type" "temp"
    (629420 'move' call_tmp[629417](376701 call value _mt[243] this[83655]))
    (83582 call |= call_tmp[629417] x[83576])
    (512505 return _void[55])
  }
  function BitwiseOrReduceScanOp[83649](?).accumulateOntoState[83592](arg _mt[83661]:_MT[238], arg this[83659]:BitwiseOrReduceScanOp[83649](?), ref arg state[83590]:_any[178](?), arg x[83594]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83598 call |= state[83590] x[83594])
    (512507 return _void[55])
  }
  function BitwiseOrReduceScanOp[83649](?).combine[83608](arg _mt[83665]:_MT[238], arg this[83663]:BitwiseOrReduceScanOp[83649](?), arg x[83606]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629424] "expr temp" "maybe param" "maybe type" "temp"
    (629427 'move' call_tmp[629424](376709 call value _mt[243] this[83663]))
    unknown call_tmp[629431] "expr temp" "maybe param" "maybe type" "temp"
    (629434 'move' call_tmp[629431](83612 call value _mt[243] x[83606]))
    (83615 call |= call_tmp[629424] call_tmp[629431])
    (512509 return _void[55])
  }
  function BitwiseOrReduceScanOp[83649](?).generate[83623](arg _mt[83669]:_MT[238], arg this[83667]:BitwiseOrReduceScanOp[83649](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512513] "RVV" "temp"
    unknown call_tmp[629438] "expr temp" "maybe param" "maybe type" "temp"
    (629441 'move' call_tmp[629438](376714 call value _mt[243] this[83667]))
    (512518 'move' ret[512513](512517 'deref' call_tmp[629438]))
    (512515 return ret[512513])
  }
  function BitwiseOrReduceScanOp[83649](?).clone[83633](arg _mt[83673]:_MT[238], arg this[83671]:BitwiseOrReduceScanOp[83649](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512522] "RVV" "temp"
    unknown call_tmp[629445] "expr temp" "maybe param" "maybe type" "temp"
    (629448 'move' call_tmp[629445](376723 call eltType _mt[243] this[83671]))
    unknown call_tmp[629450] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629453 'move' call_tmp[629450](747802 'new' BitwiseOrReduceScanOp[376718](?)(eltType = call_tmp[629445])(_chpl_manager = unmanaged[220](?))))
    (512527 'move' ret[512522](512526 'deref' call_tmp[629450]))
    (512524 return ret[512522])
  }
  type BitwiseOrReduceScanOp[83649](?) val super[355624]:ReduceScanOp[82297] "super class" unknown eltType[83550] "type variable" unknown value[83557](83556 call _bor_id eltType[83550])
  type BitwiseOrReduceScanOp[376718](?)
  function BitwiseXorReduceScanOp[83778](?).identity[83692](arg _mt[83782]:_MT[238], arg this[83780]:BitwiseXorReduceScanOp[83778](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512531] "RVV" "temp"
    unknown call_tmp[629457] "expr temp" "maybe param" "maybe type" "temp"
    (629460 'move' call_tmp[629457](376729 call eltType _mt[243] this[83780]))
    unknown call_tmp[629462] "expr temp" "maybe param" "maybe type" "temp"
    (629465 'move' call_tmp[629462](83697 call _bxor_id call_tmp[629457]))
    (512536 'move' ret[512531](512535 'deref' call_tmp[629462]))
    (512533 return ret[512531])
  }
  function BitwiseXorReduceScanOp[83778](?).accumulate[83707](arg _mt[83786]:_MT[238], arg this[83784]:BitwiseXorReduceScanOp[83778](?), arg x[83705]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629469] "expr temp" "maybe param" "maybe type" "temp"
    (629472 'move' call_tmp[629469](376734 call value _mt[243] this[83784]))
    (83711 call ^= call_tmp[629469] x[83705])
    (512538 return _void[55])
  }
  function BitwiseXorReduceScanOp[83778](?).accumulateOntoState[83721](arg _mt[83790]:_MT[238], arg this[83788]:BitwiseXorReduceScanOp[83778](?), ref arg state[83719]:_any[178](?), arg x[83723]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83727 call ^= state[83719] x[83723])
    (512540 return _void[55])
  }
  function BitwiseXorReduceScanOp[83778](?).combine[83737](arg _mt[83794]:_MT[238], arg this[83792]:BitwiseXorReduceScanOp[83778](?), arg x[83735]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629476] "expr temp" "maybe param" "maybe type" "temp"
    (629479 'move' call_tmp[629476](376742 call value _mt[243] this[83792]))
    unknown call_tmp[629483] "expr temp" "maybe param" "maybe type" "temp"
    (629486 'move' call_tmp[629483](83741 call value _mt[243] x[83735]))
    (83744 call ^= call_tmp[629476] call_tmp[629483])
    (512542 return _void[55])
  }
  function BitwiseXorReduceScanOp[83778](?).generate[83752](arg _mt[83798]:_MT[238], arg this[83796]:BitwiseXorReduceScanOp[83778](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512546] "RVV" "temp"
    unknown call_tmp[629490] "expr temp" "maybe param" "maybe type" "temp"
    (629493 'move' call_tmp[629490](376747 call value _mt[243] this[83796]))
    (512551 'move' ret[512546](512550 'deref' call_tmp[629490]))
    (512548 return ret[512546])
  }
  function BitwiseXorReduceScanOp[83778](?).clone[83762](arg _mt[83802]:_MT[238], arg this[83800]:BitwiseXorReduceScanOp[83778](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512555] "RVV" "temp"
    unknown call_tmp[629497] "expr temp" "maybe param" "maybe type" "temp"
    (629500 'move' call_tmp[629497](376756 call eltType _mt[243] this[83800]))
    unknown call_tmp[629502] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629505 'move' call_tmp[629502](747803 'new' BitwiseXorReduceScanOp[376751](?)(eltType = call_tmp[629497])(_chpl_manager = unmanaged[220](?))))
    (512560 'move' ret[512555](512559 'deref' call_tmp[629502]))
    (512557 return ret[512555])
  }
  type BitwiseXorReduceScanOp[83778](?) val super[355626]:ReduceScanOp[82297] "super class" unknown eltType[83679] "type variable" unknown value[83686](83685 call _bxor_id eltType[83679])
  type BitwiseXorReduceScanOp[376751](?)
  function _maxloc_id[83809](arg eltType[83807]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512564] "RVV" "temp"
    unknown call_tmp[629507] "expr temp" "maybe param" "maybe type" "temp"
    (629510 'move' call_tmp[629507](83815 call eltType[83807] 0))
    unknown call_tmp[629512] "expr temp" "maybe param" "maybe type" "temp"
    (629515 'move' call_tmp[629512](83817 call min call_tmp[629507]))
    unknown call_tmp[629517] "expr temp" "maybe param" "maybe type" "temp"
    (629520 'move' call_tmp[629517](83822 call eltType[83807] 1))
    unknown call_tmp[629522] "expr temp" "maybe param" "maybe type" "temp"
    (629525 'move' call_tmp[629522](83824 call max call_tmp[629517]))
    unknown call_tmp[629527] "expr temp" "maybe param" "maybe type" "temp"
    (629530 'move' call_tmp[629527](83826 call _build_tuple call_tmp[629512] call_tmp[629522]))
    (512569 'move' ret[512564](512568 'deref' call_tmp[629527]))
    (512566 return ret[512564])
  }
  function _minloc_id[83837](arg eltType[83835]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512573] "RVV" "temp"
    unknown call_tmp[629532] "expr temp" "maybe param" "maybe type" "temp"
    (629535 'move' call_tmp[629532](83842 call max eltType[83835]))
    (512578 'move' ret[512573](512577 'deref' call_tmp[629532]))
    (512575 return ret[512573])
  }
  function maxloc[84023](?).identity[83864](arg _mt[84027]:_MT[238], arg this[84025]:maxloc[84023](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512582] "RVV" "temp"
    unknown call_tmp[629539] "expr temp" "maybe param" "maybe type" "temp"
    (629542 'move' call_tmp[629539](376765 call eltType _mt[243] this[84025]))
    unknown call_tmp[629544] "expr temp" "maybe param" "maybe type" "temp"
    (629547 'move' call_tmp[629544](83869 call _maxloc_id call_tmp[629539]))
    (512587 'move' ret[512582](512586 'deref' call_tmp[629544]))
    (512584 return ret[512582])
  }
  function maxloc[84023](?).accumulate[83879](arg _mt[84031]:_MT[238], arg this[84029]:maxloc[84023](?), arg x[83877]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629553] "expr temp" "maybe param" "maybe type" "temp"
    (629556 'move' call_tmp[629553](376774 call value _mt[243] this[84029]))
    (83885 call(376769 call (partial) accumulateOntoState _mt[243] this[84029]) call_tmp[629553] x[83877])
    (512589 return _void[55])
  }
  function maxloc[84023](?).accumulateOntoState[83894](arg _mt[84035]:_MT[238], arg this[84033]:maxloc[84023](?), ref arg state[83892]:_any[178](?), arg x[83896]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421818] "maybe param" "temp"
    unknown tmp[421839] "maybe param" "temp"
    unknown call_tmp[629558] "expr temp" "maybe param" "maybe type" "temp"
    (629561 'move' call_tmp[629558](83901 call x[83896] 0))
    unknown call_tmp[629563] "expr temp" "maybe param" "maybe type" "temp"
    (629566 'move' call_tmp[629563](83905 call state[83892] 0))
    (421850 'move' tmp[421839](83906 call > call_tmp[629558] call_tmp[629563]))
    unknown call_tmp[629568] "expr temp" "maybe param" "maybe type" "temp"
    (629571 'move' call_tmp[629568](421852 call _cond_invalid tmp[421839]))
    if call_tmp[629568]
    {
      (421855 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560279] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560280] "maybe param" "temp"
    unknown call_tmp[629573] "expr temp" "maybe param" "maybe type" "temp"
    (629576 'move' call_tmp[629573](421840 call isTrue tmp[421839]))
    (560285 'move' tmp[560280](560283 call _cond_test call_tmp[629573]))
    if tmp[560280]
    {
      (560290 'move' tmp[560279](560287 '_paramFoldLogical' tmp[560280] 1))
    }
    {
      unknown tmp[421860] "maybe param" "temp"
      unknown call_tmp[629578] "expr temp" "maybe param" "maybe type" "temp"
      (629581 'move' call_tmp[629578](83911 call x[83896] 0))
      unknown call_tmp[629583] "expr temp" "maybe param" "maybe type" "temp"
      (629586 'move' call_tmp[629583](83915 call state[83892] 0))
      (421871 'move' tmp[421860](83916 call == call_tmp[629578] call_tmp[629583]))
      unknown call_tmp[629588] "expr temp" "maybe param" "maybe type" "temp"
      (629591 'move' call_tmp[629588](421873 call _cond_invalid tmp[421860]))
      if call_tmp[629588]
      {
        (421876 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560252] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560253] "maybe param" "temp"
      unknown call_tmp[629593] "expr temp" "maybe param" "maybe type" "temp"
      (629596 'move' call_tmp[629593](421861 call isTrue tmp[421860]))
      (560258 'move' tmp[560253](560256 call _cond_test call_tmp[629593]))
      if tmp[560253]
      {
        unknown tmp[560260] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629598] "expr temp" "maybe param" "maybe type" "temp"
        (629601 'move' call_tmp[629598](83921 call x[83896] 1))
        unknown call_tmp[629603] "expr temp" "maybe param" "maybe type" "temp"
        (629606 'move' call_tmp[629603](83925 call state[83892] 1))
        unknown call_tmp[629608] "expr temp" "maybe param" "maybe type" "temp"
        (629611 'move' call_tmp[629608](83926 call < call_tmp[629598] call_tmp[629603]))
        (560262 'move' tmp[560260](421864 call isTrue call_tmp[629608]))
        (560267 'move' tmp[560252](560264 '_paramFoldLogical' tmp[560253] tmp[560260]))
      }
      {
        (560272 'move' tmp[560252](560269 '_paramFoldLogical' tmp[560253] 0))
      }
      unknown tmp[560292] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560294 'move' tmp[560292](421844 call isTrue tmp[560252]))
      (560299 'move' tmp[560279](560296 '_paramFoldLogical' tmp[560280] tmp[560292]))
    }
    (421829 'move' tmp[421818] tmp[560279])
    unknown call_tmp[629613] "expr temp" "maybe param" "maybe type" "temp"
    (629616 'move' call_tmp[629613](421831 call _cond_invalid tmp[421818]))
    if call_tmp[629613]
    {
      (421834 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560360] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560361] "maybe param" "temp"
    unknown call_tmp[629618] "expr temp" "maybe param" "maybe type" "temp"
    (629621 'move' call_tmp[629618](421819 call isTrue tmp[421818]))
    (560366 'move' tmp[560361](560364 call _cond_test call_tmp[629618]))
    if tmp[560361]
    {
      (560371 'move' tmp[560360](560368 '_paramFoldLogical' tmp[560361] 1))
    }
    {
      unknown tmp[421881] "maybe param" "temp"
      unknown call_tmp[629623] "expr temp" "maybe param" "maybe type" "temp"
      (629626 'move' call_tmp[629623](83936 call x[83896] 0))
      (421892 'move' tmp[421881](83938 call gotNaN call_tmp[629623]))
      unknown call_tmp[629628] "expr temp" "maybe param" "maybe type" "temp"
      (629631 'move' call_tmp[629628](421894 call _cond_invalid tmp[421881]))
      if call_tmp[629628]
      {
        (421897 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560333] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560334] "maybe param" "temp"
      unknown call_tmp[629633] "expr temp" "maybe param" "maybe type" "temp"
      (629636 'move' call_tmp[629633](421882 call isTrue tmp[421881]))
      (560339 'move' tmp[560334](560337 call _cond_test call_tmp[629633]))
      if tmp[560334]
      {
        unknown tmp[421902] "maybe param" "temp"
        unknown call_tmp[629638] "expr temp" "maybe param" "maybe type" "temp"
        (629641 'move' call_tmp[629638](83943 call state[83892] 0))
        unknown call_tmp[629643] "expr temp" "maybe param" "maybe type" "temp"
        (629646 'move' call_tmp[629643](83945 call gotNaN call_tmp[629638]))
        (421913 'move' tmp[421902](83946 call ! call_tmp[629643]))
        unknown call_tmp[629648] "expr temp" "maybe param" "maybe type" "temp"
        (629651 'move' call_tmp[629648](421915 call _cond_invalid tmp[421902]))
        if call_tmp[629648]
        {
          (421918 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560306] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560307] "maybe param" "temp"
        unknown call_tmp[629653] "expr temp" "maybe param" "maybe type" "temp"
        (629656 'move' call_tmp[629653](421903 call isTrue tmp[421902]))
        (560312 'move' tmp[560307](560310 call _cond_test call_tmp[629653]))
        if tmp[560307]
        {
          (560317 'move' tmp[560306](560314 '_paramFoldLogical' tmp[560307] 1))
        }
        {
          unknown tmp[560319] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629658] "expr temp" "maybe param" "maybe type" "temp"
          (629661 'move' call_tmp[629658](83951 call x[83896] 1))
          unknown call_tmp[629663] "expr temp" "maybe param" "maybe type" "temp"
          (629666 'move' call_tmp[629663](83955 call state[83892] 1))
          unknown call_tmp[629668] "expr temp" "maybe param" "maybe type" "temp"
          (629671 'move' call_tmp[629668](83956 call < call_tmp[629658] call_tmp[629663]))
          (560321 'move' tmp[560319](421907 call isTrue call_tmp[629668]))
          (560326 'move' tmp[560306](560323 '_paramFoldLogical' tmp[560307] tmp[560319]))
        }
        unknown tmp[560341] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560343 'move' tmp[560341](421885 call isTrue tmp[560306]))
        (560348 'move' tmp[560333](560345 '_paramFoldLogical' tmp[560334] tmp[560341]))
      }
      {
        (560353 'move' tmp[560333](560350 '_paramFoldLogical' tmp[560334] 0))
      }
      unknown tmp[560373] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560375 'move' tmp[560373](421823 call isTrue tmp[560333]))
      (560380 'move' tmp[560360](560377 '_paramFoldLogical' tmp[560361] tmp[560373]))
    }
    unknown call_tmp[629673] "expr temp" "maybe param" "maybe type" "temp"
    (629676 'move' call_tmp[629673](83969 call _cond_test tmp[560360]))
    if call_tmp[629673]
    {
      (83966 call = state[83892] x[83896])
    }
    (512591 return _void[55])
  }
  function maxloc[84023](?).combine[83981](arg _mt[84039]:_MT[238], arg this[84037]:maxloc[84023](?), arg x[83979]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629682] "expr temp" "maybe param" "maybe type" "temp"
    (629685 'move' call_tmp[629682](376796 call value _mt[243] this[84037]))
    unknown call_tmp[629689] "expr temp" "maybe param" "maybe type" "temp"
    (629692 'move' call_tmp[629689](83987 call value _mt[243] x[83979]))
    (83990 call(376791 call (partial) accumulateOntoState _mt[243] this[84037]) call_tmp[629682] call_tmp[629689])
    (512593 return _void[55])
  }
  function maxloc[84023](?).generate[83997](arg _mt[84043]:_MT[238], arg this[84041]:maxloc[84023](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512597] "RVV" "temp"
    unknown call_tmp[629696] "expr temp" "maybe param" "maybe type" "temp"
    (629699 'move' call_tmp[629696](376801 call value _mt[243] this[84041]))
    (512602 'move' ret[512597](512601 'deref' call_tmp[629696]))
    (512599 return ret[512597])
  }
  function maxloc[84023](?).clone[84007](arg _mt[84047]:_MT[238], arg this[84045]:maxloc[84023](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512606] "RVV" "temp"
    unknown call_tmp[629703] "expr temp" "maybe param" "maybe type" "temp"
    (629706 'move' call_tmp[629703](376810 call eltType _mt[243] this[84045]))
    unknown call_tmp[629708] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629711 'move' call_tmp[629708](747804 'new' maxloc[376805](?)(eltType = call_tmp[629703])(_chpl_manager = unmanaged[220](?))))
    (512611 'move' ret[512606](512610 'deref' call_tmp[629708]))
    (512608 return ret[512606])
  }
  type maxloc[84023](?) val super[355628]:ReduceScanOp[82297] "super class" unknown eltType[83851] "type variable" unknown value[83858](83857 call _maxloc_id eltType[83851])
  type maxloc[376805](?)
  function minloc[84225](?).identity[84066](arg _mt[84229]:_MT[238], arg this[84227]:minloc[84225](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512615] "RVV" "temp"
    unknown call_tmp[629715] "expr temp" "maybe param" "maybe type" "temp"
    (629718 'move' call_tmp[629715](376816 call eltType _mt[243] this[84227]))
    unknown call_tmp[629720] "expr temp" "maybe param" "maybe type" "temp"
    (629723 'move' call_tmp[629720](84071 call _minloc_id call_tmp[629715]))
    (512620 'move' ret[512615](512619 'deref' call_tmp[629720]))
    (512617 return ret[512615])
  }
  function minloc[84225](?).accumulate[84081](arg _mt[84233]:_MT[238], arg this[84231]:minloc[84225](?), arg x[84079]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629729] "expr temp" "maybe param" "maybe type" "temp"
    (629732 'move' call_tmp[629729](376825 call value _mt[243] this[84231]))
    (84087 call(376820 call (partial) accumulateOntoState _mt[243] this[84231]) call_tmp[629729] x[84079])
    (512622 return _void[55])
  }
  function minloc[84225](?).accumulateOntoState[84096](arg _mt[84237]:_MT[238], arg this[84235]:minloc[84225](?), ref arg state[84094]:_any[178](?), arg x[84098]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421923] "maybe param" "temp"
    unknown tmp[421944] "maybe param" "temp"
    unknown call_tmp[629734] "expr temp" "maybe param" "maybe type" "temp"
    (629737 'move' call_tmp[629734](84103 call x[84098] 0))
    unknown call_tmp[629739] "expr temp" "maybe param" "maybe type" "temp"
    (629742 'move' call_tmp[629739](84107 call state[84094] 0))
    (421955 'move' tmp[421944](84108 call < call_tmp[629734] call_tmp[629739]))
    unknown call_tmp[629744] "expr temp" "maybe param" "maybe type" "temp"
    (629747 'move' call_tmp[629744](421957 call _cond_invalid tmp[421944]))
    if call_tmp[629744]
    {
      (421960 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560414] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560415] "maybe param" "temp"
    unknown call_tmp[629749] "expr temp" "maybe param" "maybe type" "temp"
    (629752 'move' call_tmp[629749](421945 call isTrue tmp[421944]))
    (560420 'move' tmp[560415](560418 call _cond_test call_tmp[629749]))
    if tmp[560415]
    {
      (560425 'move' tmp[560414](560422 '_paramFoldLogical' tmp[560415] 1))
    }
    {
      unknown tmp[421965] "maybe param" "temp"
      unknown call_tmp[629754] "expr temp" "maybe param" "maybe type" "temp"
      (629757 'move' call_tmp[629754](84113 call x[84098] 0))
      unknown call_tmp[629759] "expr temp" "maybe param" "maybe type" "temp"
      (629762 'move' call_tmp[629759](84117 call state[84094] 0))
      (421976 'move' tmp[421965](84118 call == call_tmp[629754] call_tmp[629759]))
      unknown call_tmp[629764] "expr temp" "maybe param" "maybe type" "temp"
      (629767 'move' call_tmp[629764](421978 call _cond_invalid tmp[421965]))
      if call_tmp[629764]
      {
        (421981 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560387] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560388] "maybe param" "temp"
      unknown call_tmp[629769] "expr temp" "maybe param" "maybe type" "temp"
      (629772 'move' call_tmp[629769](421966 call isTrue tmp[421965]))
      (560393 'move' tmp[560388](560391 call _cond_test call_tmp[629769]))
      if tmp[560388]
      {
        unknown tmp[560395] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629774] "expr temp" "maybe param" "maybe type" "temp"
        (629777 'move' call_tmp[629774](84123 call x[84098] 1))
        unknown call_tmp[629779] "expr temp" "maybe param" "maybe type" "temp"
        (629782 'move' call_tmp[629779](84127 call state[84094] 1))
        unknown call_tmp[629784] "expr temp" "maybe param" "maybe type" "temp"
        (629787 'move' call_tmp[629784](84128 call < call_tmp[629774] call_tmp[629779]))
        (560397 'move' tmp[560395](421969 call isTrue call_tmp[629784]))
        (560402 'move' tmp[560387](560399 '_paramFoldLogical' tmp[560388] tmp[560395]))
      }
      {
        (560407 'move' tmp[560387](560404 '_paramFoldLogical' tmp[560388] 0))
      }
      unknown tmp[560427] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560429 'move' tmp[560427](421949 call isTrue tmp[560387]))
      (560434 'move' tmp[560414](560431 '_paramFoldLogical' tmp[560415] tmp[560427]))
    }
    (421934 'move' tmp[421923] tmp[560414])
    unknown call_tmp[629789] "expr temp" "maybe param" "maybe type" "temp"
    (629792 'move' call_tmp[629789](421936 call _cond_invalid tmp[421923]))
    if call_tmp[629789]
    {
      (421939 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560495] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560496] "maybe param" "temp"
    unknown call_tmp[629794] "expr temp" "maybe param" "maybe type" "temp"
    (629797 'move' call_tmp[629794](421924 call isTrue tmp[421923]))
    (560501 'move' tmp[560496](560499 call _cond_test call_tmp[629794]))
    if tmp[560496]
    {
      (560506 'move' tmp[560495](560503 '_paramFoldLogical' tmp[560496] 1))
    }
    {
      unknown tmp[421986] "maybe param" "temp"
      unknown call_tmp[629799] "expr temp" "maybe param" "maybe type" "temp"
      (629802 'move' call_tmp[629799](84138 call x[84098] 0))
      (421997 'move' tmp[421986](84140 call gotNaN call_tmp[629799]))
      unknown call_tmp[629804] "expr temp" "maybe param" "maybe type" "temp"
      (629807 'move' call_tmp[629804](421999 call _cond_invalid tmp[421986]))
      if call_tmp[629804]
      {
        (422002 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560468] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560469] "maybe param" "temp"
      unknown call_tmp[629809] "expr temp" "maybe param" "maybe type" "temp"
      (629812 'move' call_tmp[629809](421987 call isTrue tmp[421986]))
      (560474 'move' tmp[560469](560472 call _cond_test call_tmp[629809]))
      if tmp[560469]
      {
        unknown tmp[422007] "maybe param" "temp"
        unknown call_tmp[629814] "expr temp" "maybe param" "maybe type" "temp"
        (629817 'move' call_tmp[629814](84145 call state[84094] 0))
        unknown call_tmp[629819] "expr temp" "maybe param" "maybe type" "temp"
        (629822 'move' call_tmp[629819](84147 call gotNaN call_tmp[629814]))
        (422018 'move' tmp[422007](84148 call ! call_tmp[629819]))
        unknown call_tmp[629824] "expr temp" "maybe param" "maybe type" "temp"
        (629827 'move' call_tmp[629824](422020 call _cond_invalid tmp[422007]))
        if call_tmp[629824]
        {
          (422023 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560441] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560442] "maybe param" "temp"
        unknown call_tmp[629829] "expr temp" "maybe param" "maybe type" "temp"
        (629832 'move' call_tmp[629829](422008 call isTrue tmp[422007]))
        (560447 'move' tmp[560442](560445 call _cond_test call_tmp[629829]))
        if tmp[560442]
        {
          (560452 'move' tmp[560441](560449 '_paramFoldLogical' tmp[560442] 1))
        }
        {
          unknown tmp[560454] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629834] "expr temp" "maybe param" "maybe type" "temp"
          (629837 'move' call_tmp[629834](84153 call x[84098] 1))
          unknown call_tmp[629839] "expr temp" "maybe param" "maybe type" "temp"
          (629842 'move' call_tmp[629839](84157 call state[84094] 1))
          unknown call_tmp[629844] "expr temp" "maybe param" "maybe type" "temp"
          (629847 'move' call_tmp[629844](84158 call < call_tmp[629834] call_tmp[629839]))
          (560456 'move' tmp[560454](422012 call isTrue call_tmp[629844]))
          (560461 'move' tmp[560441](560458 '_paramFoldLogical' tmp[560442] tmp[560454]))
        }
        unknown tmp[560476] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560478 'move' tmp[560476](421990 call isTrue tmp[560441]))
        (560483 'move' tmp[560468](560480 '_paramFoldLogical' tmp[560469] tmp[560476]))
      }
      {
        (560488 'move' tmp[560468](560485 '_paramFoldLogical' tmp[560469] 0))
      }
      unknown tmp[560508] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560510 'move' tmp[560508](421928 call isTrue tmp[560468]))
      (560515 'move' tmp[560495](560512 '_paramFoldLogical' tmp[560496] tmp[560508]))
    }
    unknown call_tmp[629849] "expr temp" "maybe param" "maybe type" "temp"
    (629852 'move' call_tmp[629849](84171 call _cond_test tmp[560495]))
    if call_tmp[629849]
    {
      (84168 call = state[84094] x[84098])
    }
    (512624 return _void[55])
  }
  function minloc[84225](?).combine[84183](arg _mt[84241]:_MT[238], arg this[84239]:minloc[84225](?), arg x[84181]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629858] "expr temp" "maybe param" "maybe type" "temp"
    (629861 'move' call_tmp[629858](376847 call value _mt[243] this[84239]))
    unknown call_tmp[629865] "expr temp" "maybe param" "maybe type" "temp"
    (629868 'move' call_tmp[629865](84189 call value _mt[243] x[84181]))
    (84192 call(376842 call (partial) accumulateOntoState _mt[243] this[84239]) call_tmp[629858] call_tmp[629865])
    (512626 return _void[55])
  }
  function minloc[84225](?).generate[84199](arg _mt[84245]:_MT[238], arg this[84243]:minloc[84225](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512630] "RVV" "temp"
    unknown call_tmp[629872] "expr temp" "maybe param" "maybe type" "temp"
    (629875 'move' call_tmp[629872](376852 call value _mt[243] this[84243]))
    (512635 'move' ret[512630](512634 'deref' call_tmp[629872]))
    (512632 return ret[512630])
  }
  function minloc[84225](?).clone[84209](arg _mt[84249]:_MT[238], arg this[84247]:minloc[84225](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512639] "RVV" "temp"
    unknown call_tmp[629879] "expr temp" "maybe param" "maybe type" "temp"
    (629882 'move' call_tmp[629879](376861 call eltType _mt[243] this[84247]))
    unknown call_tmp[629884] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629887 'move' call_tmp[629884](747805 'new' minloc[376856](?)(eltType = call_tmp[629879])(_chpl_manager = unmanaged[220](?))))
    (512644 'move' ret[512639](512643 'deref' call_tmp[629884]))
    (512641 return ret[512639])
  }
  type minloc[84225](?) val super[355630]:ReduceScanOp[82297] "super class" unknown eltType[84053] "type variable" unknown value[84060](84059 call _minloc_id eltType[84053])
  type minloc[376856](?)
  function gotNaN[84256](arg value[84254]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[512648] "RVV" "temp"
    unknown call_tmp[629889] "expr temp" "maybe param" "maybe type" "temp"
    (629892 'move' call_tmp[629889](84265 call isnan value[84254]))
    (512653 'move' ret[512648](512652 'deref' call_tmp[629889]))
    (512650 return ret[512648])
  }
  where {
    (84261 call isReal value[84254])
  }
  function gotNaN[84276](arg value[84274]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512657] "RVV" "param" "temp"
    (512662 'move' ret[512657](512661 'deref' 0))
    (512659 return ret[512657])
  }
  (355055 'used modules list'(81777 'use' ChapelStandard[20264])(81781 'use' ChapelLocks[187256]))
}