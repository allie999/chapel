AST dump for CommDiagnostics after pass expandExternArrayCalls.
Module use list: 

{
  (353059 'use' ChapelStandard)
  { scopeless
    unknown commDiagsPrintUnstable[222188] "config" "param" 0
    (222191 'end of statement')
  }
  type chpl_commDiagnostics[222470] unknown get[222198](222197 call uint[115] 64) unknown get_nb[222206](222205 call uint[115] 64) unknown put[222214](222213 call uint[115] 64) unknown put_nb[222222](222221 call uint[115] 64) unknown test_nb[222230](222229 call uint[115] 64) unknown wait_nb[222238](222237 call uint[115] 64) unknown try_nb[222246](222245 call uint[115] 64) unknown amo[222254](222253 call uint[115] 64) unknown execute_on[222262](222261 call uint[115] 64) unknown execute_on_fast[222270](222269 call uint[115] 64) unknown execute_on_nb[222278](222277 call uint[115] 64) function chpl_commDiagnostics[222470].writeThis[222286](arg _mt[222474]:_MT[238], arg this[222472]:chpl_commDiagnostics[222470], arg c[222284]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (222289 'use' Reflection)
    { scopeless
      unknown first[222293] 1
      (222296 'end of statement')
    }
    (222299 call <~> c "(")
    {
      unknown i[222396] 0
      unknown tmp[222397] "maybe param" "temp"
      (222409 'move' tmp[222397](222407 call chpl_compute_low_param_loop_bound 0(222308 call -(222306 call numFields chpl_commDiagnostics) 1)))
      unknown tmp[222398] "maybe param" "temp"
      (222421 'move' tmp[222398](222419 call chpl_compute_high_param_loop_bound 0(222414 call -(222416 call numFields chpl_commDiagnostics) 1)))
      unknown tmp[222399] "maybe param" "temp"
      (222424 'move' tmp[222399] 1)
      ParamForLoop[222426]
      { i[222396] tmp[222397] tmp[222398] tmp[222399]
        {
          { scopeless
            unknown name[222317] "param"(222316 call getFieldName chpl_commDiagnostics i)
            (222320 'end of statement')
          }
          { scopeless
            const val[222327] "const"(222326 call getField this i)
            (222330 'end of statement')
          }
          if(222392 call _cond_test(222333 call != val 0))
          {
            if(222387 call _cond_test(222356 call || commDiagsPrintUnstable(222354 call != name "amo")))
            {
              if(222369 call _cond_test first)
              {
                { scopeless
                  (222361 call = first 0)
                }
              }
              {
                { scopeless
                  (222366 call <~> c ", ")
                }
              }
              (222384 call <~>(222381 call <~>(222378 call <~> c name) " = ") val)
            }
          }
        }
      }
      label _unused_continueLabel[222401]
      label _breakLabel[222400]
    }
    if(222457 call _cond_test first)
    {
      { scopeless
        (222454 call <~> c "<no communication>")
      }
    }
    (222464 call <~> c ")")
  }
  {
  }
  unknown commDiagnostics[222480] "type variable" chpl_commDiagnostics
  function chpl_comm_startVerbose[222489](arg print_unstable[222486] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  function chpl_comm_stopVerbose[222495]() : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  function chpl_comm_startVerboseHere[222505](arg print_unstable[222502] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  function chpl_comm_stopVerboseHere[222511]() : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  function chpl_comm_startDiagnostics[222521](arg print_unstable[222518] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  function chpl_comm_stopDiagnostics[222527]() : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  function chpl_comm_startDiagnosticsHere[222537](arg print_unstable[222534] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  function chpl_comm_stopDiagnosticsHere[222543]() : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  function chpl_comm_resetDiagnosticsHere[222549]() : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  function chpl_comm_getDiagnosticsHere[222559](out arg cd[222556] :
  commDiagnostics) : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  function startVerboseComm[222565]() : _unknown[51]
  {
    (222570 call chpl_comm_startVerbose commDiagsPrintUnstable)
  }
  function stopVerboseComm[222577]() : _unknown[51]
  {
    (222581 call chpl_comm_stopVerbose)
  }
  function startVerboseCommHere[222588]() : _unknown[51]
  {
    (222593 call chpl_comm_startVerboseHere commDiagsPrintUnstable)
  }
  function stopVerboseCommHere[222600]() : _unknown[51]
  {
    (222604 call chpl_comm_stopVerboseHere)
  }
  function startCommDiagnostics[222611]() : _unknown[51]
  {
    (222616 call chpl_comm_startDiagnostics commDiagsPrintUnstable)
  }
  function stopCommDiagnostics[222623]() : _unknown[51]
  {
    (222627 call chpl_comm_stopDiagnostics)
  }
  function startCommDiagnosticsHere[222634]() : _unknown[51]
  {
    (222639 call chpl_comm_startDiagnosticsHere commDiagsPrintUnstable)
  }
  function stopCommDiagnosticsHere[222646]() : _unknown[51]
  {
    (222650 call chpl_comm_stopDiagnosticsHere)
  }
  function resetCommDiagnostics[222657]() : _unknown[51]
  {
    {
      unknown _indexOfInterest[222677] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222678] "expr temp" "temp"
      (222687 'move' _iterator[222678](222685 call _getIterator Locales))
      Defer
      {
        {
          (222703 call _freeIterator _iterator[222678])
        }
      }
      { scopeless type
        (222692 'move' _indexOfInterest[222677](222689 call iteratorIndex _iterator[222678]))
      }
      ForLoop[222679]
      {
        unknown loc[222696] "index var" "insert auto destroy"
        (222698 'move' loc[222696] _indexOfInterest[222677])
        { scopeless
          {
            const tmp[222669] "const" "temp"
            (222670 'move' tmp[222669](222667 'deref'(222666 '_wide_get_locale' loc)))
            { scopeless
              (222664 call resetCommDiagnosticsHere)
            }
            (222673 'elided on block' 0 tmp[222669])
          }
        }
        label _continueLabel[222682]
        _indexOfInterest[222677]
        _iterator[222678]
      }
      label _breakLabel[222683]
    }
  }
  function resetCommDiagnosticsHere[222715]() : _unknown[51] "inline"
  {
    (222719 call chpl_comm_resetDiagnosticsHere)
  }
  function getCommDiagnostics[222726]() : _unknown[51]
  {
    { scopeless
      unknown D[222735](222733 call chpl__buildArrayRuntimeType(222731 call chpl__ensureDomainExpr LocaleSpace) commDiagnostics)
      (222738 'end of statement')
    }
    {
      unknown _indexOfInterest[222768] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222769] "expr temp" "temp"
      (222778 'move' _iterator[222769](222776 call _getIterator Locales))
      Defer
      {
        {
          (222794 call _freeIterator _iterator[222769])
        }
      }
      { scopeless type
        (222783 'move' _indexOfInterest[222768](222780 call iteratorIndex _iterator[222769]))
      }
      ForLoop[222770]
      {
        unknown loc[222787] "index var" "insert auto destroy"
        (222789 'move' loc[222787] _indexOfInterest[222768])
        { scopeless
          {
            const tmp[222760] "const" "temp"
            (222761 'move' tmp[222760](222758 'deref'(222757 '_wide_get_locale' loc)))
            {
              (222753 call =(222749 call D(222745 call . loc c"id"))(222752 call getCommDiagnosticsHere))
            }
            (222764 'elided on block' 0 tmp[222760])
          }
        }
        label _continueLabel[222773]
        _indexOfInterest[222768]
        _iterator[222769]
      }
      label _breakLabel[222774]
    }
    (222802 return D)
  }
  function getCommDiagnosticsHere[222808]() : _unknown[51]
  {
    { scopeless
      unknown cd[222811] commDiagnostics
      (222814 'end of statement')
    }
    (222819 call chpl_comm_getDiagnosticsHere cd)
    (222822 return cd)
  }
  function printCommDiagnosticsTable[222832](arg printEmptyColumns[222829] =
  0) : _unknown[51]
  {
    (222835 'use' Reflection)
    { scopeless
      unknown unstable[222855] "param" "unstable"
      (222858 'end of statement')
    }
    { scopeless
      unknown CommDiags[222862](222861 call getCommDiagnostics)
      (222865 'end of statement')
    }
    { scopeless
      unknown nFields[222870] "param"(222869 call numFields chpl_commDiagnostics)
      (222873 'end of statement')
    }
    { scopeless
      unknown fieldWidth[222887](222885 call chpl__buildArrayRuntimeType(222883 call chpl__ensureDomainExpr(222879 call chpl_build_bounded_range 0(222877 call - nFields 1))) int[13])
      (222890 'end of statement')
    }
    (222927 call writef "| %6s " "locale")
    {
      unknown fieldID[223097] 0
      unknown tmp[223098] "maybe param" "temp"
      (223110 'move' tmp[223098](223108 call chpl_compute_low_param_loop_bound 0(222932 call - nFields 1)))
      unknown tmp[223099] "maybe param" "temp"
      (223120 'move' tmp[223099](223118 call chpl_compute_high_param_loop_bound 0(223115 call - nFields 1)))
      unknown tmp[223100] "maybe param" "temp"
      (223123 'move' tmp[223100] 1)
      ParamForLoop[223125]
      { fieldID[223097] tmp[223098] tmp[223099] tmp[223100]
        {
          { scopeless
            unknown name[222941] "param"(222940 call getFieldName chpl_commDiagnostics fieldID)
            (222944 'end of statement')
          }
          { scopeless
            unknown maxval[222947] 0
            (222950 'end of statement')
          }
          {
            unknown _indexOfInterest[222975] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[222976] "expr temp" "temp"
            (222985 'move' _iterator[222976](222983 call _getIterator LocaleSpace))
            Defer
            {
              {
                (223001 call _freeIterator _iterator[222976])
              }
            }
            { scopeless type
              (222990 'move' _indexOfInterest[222975](222987 call iteratorIndex _iterator[222976]))
            }
            ForLoop[222977]
            {
              unknown locID[222994] "index var" "insert auto destroy"
              (222996 'move' locID[222994] _indexOfInterest[222975])
              { scopeless
                (222972 call = maxval(222971 call max maxval(222970 call(222965 call .(222964 call getField(222961 call CommDiags locID) fieldID) c"safeCast") int[13])))
              }
              label _continueLabel[222980]
              _indexOfInterest[222975]
              _iterator[222976]
            }
            label _breakLabel[222981]
          }
          if(223093 call _cond_test(223013 call || printEmptyColumns(223011 call != maxval 0)))
          {
            { scopeless
              const width[223054] "const"(223051 IfExpr (223023 call &&(223017 call == commDiagsPrintUnstable 0)(223021 call == name "amo")) then
              { scopeless
                (223029 call -(223026 call . unstable c"size"))
              } else
              { scopeless
                (223050 call max(223033 call . name c"size")(223048 call _cast int[13](223046 call ceil(223044 call log10(223041 call + maxval 1)))))
              } )
              (223057 'end of statement')
            }
            (223064 call =(223062 call fieldWidth fieldID) width)
            (223091 call writef "| %*s "(223089 call abs width) name)
          }
        }
      }
      label _unused_continueLabel[223102]
      label _breakLabel[223101]
    }
    (223137 call writeln "|")
    (223158 call writef "| -----: ")
    {
      unknown fieldID[223230] 0
      unknown tmp[223231] "maybe param" "temp"
      (223243 'move' tmp[223231](223241 call chpl_compute_low_param_loop_bound 0(223163 call - nFields 1)))
      unknown tmp[223232] "maybe param" "temp"
      (223253 'move' tmp[223232](223251 call chpl_compute_high_param_loop_bound 0(223248 call - nFields 1)))
      unknown tmp[223233] "maybe param" "temp"
      (223256 'move' tmp[223233] 1)
      ParamForLoop[223258]
      { fieldID[223230] tmp[223231] tmp[223232] tmp[223233]
        {
          { scopeless
            const width[223174] "const"(223173 call abs(223171 call fieldWidth fieldID))
            (223177 'end of statement')
          }
          if(223226 call _cond_test(223181 call != width 0))
          {
            (223223 call writef "| %.*s: "(223204 call - width 1) "------------------")
          }
        }
      }
      label _unused_continueLabel[223235]
      label _breakLabel[223234]
    }
    (223270 call writeln "|")
    {
      unknown _indexOfInterest[223384] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223385] "expr temp" "temp"
      (223394 'move' _iterator[223385](223392 call _getIterator LocaleSpace))
      Defer
      {
        {
          (223410 call _freeIterator _iterator[223385])
        }
      }
      { scopeless type
        (223399 'move' _indexOfInterest[223384](223396 call iteratorIndex _iterator[223385]))
      }
      ForLoop[223386]
      {
        unknown locID[223403] "index var" "insert auto destroy"
        (223405 'move' locID[223403] _indexOfInterest[223384])
        {
          (223281 call writef "| %6s "(223279 call _cast string[26] locID))
          {
            unknown fieldID[223342] 0
            unknown tmp[223343] "maybe param" "temp"
            (223355 'move' tmp[223343](223353 call chpl_compute_low_param_loop_bound 0(223287 call - nFields 1)))
            unknown tmp[223344] "maybe param" "temp"
            (223365 'move' tmp[223344](223363 call chpl_compute_high_param_loop_bound 0(223360 call - nFields 1)))
            unknown tmp[223345] "maybe param" "temp"
            (223368 'move' tmp[223345] 1)
            ParamForLoop[223370]
            { fieldID[223342] tmp[223343] tmp[223344] tmp[223345]
              {
                { scopeless
                  unknown width[223295](223294 call fieldWidth fieldID)
                  (223298 'end of statement')
                }
                { scopeless
                  const count[223319] "const"(223316 IfExpr (223302 call < width 0) then
                  { scopeless
                    unstable
                  } else
                  { scopeless
                    (223314 call _cast string[26](223312 call getField(223309 call CommDiags locID) fieldID))
                  } )
                  (223322 'end of statement')
                }
                if(223337 call _cond_test(223325 call != width 0))
                {
                  { scopeless
                    (223335 call writef "| %*s "(223333 call abs width) count)
                  }
                }
              }
            }
            label _unused_continueLabel[223347]
            label _breakLabel[223346]
          }
          (223382 call writeln "|")
        }
        label _continueLabel[223389]
        _indexOfInterest[223384]
        _iterator[223385]
      }
      label _breakLabel[223390]
    }
  }
  { scopeless
    unknown printInitVerboseComm[223420] "config" "param" 0
    (223423 'end of statement')
  }
  { scopeless
    unknown printInitCommCounts[223425] "config" "param" 0
    (223428 'end of statement')
  }
}