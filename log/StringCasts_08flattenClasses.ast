AST dump for StringCasts after pass flattenClasses.
Module use list: ChapelStandard SysCTypes NVStringFactory 

{
  function _cast[184432](arg t[184429] :
  string[26], arg x[184435] :
  bool[10]) : _unknown[51] "inline"
  {
    if(184461 call _cond_test x[184435])
    {
      (184440 return "true")
    }
    {
      (184458 return "false")
    }
  }
  function _cast[184474](arg t[184471] :
  chpl_anybool[181](?), arg x[184477] :
  string[26]) : _unknown[51] throws
  {
    unknown str[184486](184485 call(184481 call . x[184477] c"strip"))
    (184489 'end of statement')
    if(184564 call _cond_test(184496 call(184492 call . str[184486] c"isEmpty")))
    {
      (184520 'throw'(184499 'new'(_chpl_manager = _owned[30](?))(184519 call IllegalArgumentError[388778](?) "bad cast from empty string to bool")))
    }
    {
      if(184559 call _cond_test(184525 call == str[184486] "true"))
      {
        (184528 return 1)
      }
      {
        if(184555 call _cond_test(184533 call == str[184486] "false"))
        {
          (184536 return 0)
        }
        {
          (184552 'throw'(184541 'new'(_chpl_manager = _owned[30](?))(184551 call IllegalArgumentError[388778](?)(184548 call +(184545 call + "bad cast from string '" x[184477]) "' to bool"))))
        }
      }
    }
    (184570 return 0)
  }
  function _cast[184580](arg t[184577] :
  string[26], arg x[184583] :
  integral[199](?)) : _unknown[51]
  {
    function integral_to_c_string[184595](arg x[184592] :
    (184591 call int(64)[13] 64), arg size[184601] :
    (184600 call uint(64)[115] 32), arg isSigned[184605] :
    bool[10], ref arg err[184609] :
    bool[10]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_string[19]
    }
    function strlen[184623](const arg str[184620] :
    c_string[19]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      size_t[20654]
    }
    unknown isErr[184630] bool[10]
    (184633 'end of statement')
    unknown csc[184655](184654 call integral_to_c_string(184640 call _cast(184639 call int(64)[13] 64) x[184583])(184647 call numBytes(184645 'typeof' x[184583]))(184652 call isIntType(184650 'typeof' x[184583])) isErr[184630])
    (184658 'end of statement')
    if(184674 call _cond_test isErr[184630])
    {
      Try!
      {
        {
          (184667 'throw'(184662 'new'(_chpl_manager = _owned[30](?))(184666 call IllegalArgumentError[388778](?) "Unexpected case in integral_to_c_string")))
        }
      }
    }
    const len[184688] "const"(184687 call(184682 call .(184681 call strlen csc[184655]) c"safeCast") int(64)[13])
    (184691 'end of statement')
    (184715 return(184714 call chpl_createStringWithOwnedBufferNV(x =(184701 call _cast(184700 call c_ptr[205045](?)(184698 call uint(64)[115] 8)) csc[184655]))(length = len[184688])(size =(184709 call + len[184688] 1))(numCodepoints = len[184688])))
  }
  function _cast[184725](arg t[184722] :
  integral[199](?), arg x[184728] :
  string[26]) : _unknown[51] throws "inline"
  {
    function c_string_to_int8_t[184737](arg x[184734] :
    c_string[19], ref arg err[184740] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184746 call int(64)[13] 8)
    }
    function c_string_to_int16_t[184757](arg x[184754] :
    c_string[19], ref arg err[184760] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184766 call int(64)[13] 16)
    }
    function c_string_to_int32_t[184776](arg x[184773] :
    c_string[19], ref arg err[184779] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184785 call int(64)[13] 32)
    }
    function c_string_to_int64_t[184795](arg x[184792] :
    c_string[19], ref arg err[184798] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184804 call int(64)[13] 64)
    }
    function c_string_to_uint8_t[184814](arg x[184811] :
    c_string[19], ref arg err[184817] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184823 call uint(64)[115] 8)
    }
    function c_string_to_uint16_t[184833](arg x[184830] :
    c_string[19], ref arg err[184836] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184842 call uint(64)[115] 16)
    }
    function c_string_to_uint32_t[184852](arg x[184849] :
    c_string[19], ref arg err[184855] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184861 call uint(64)[115] 32)
    }
    function c_string_to_uint64_t[184871](arg x[184868] :
    c_string[19], ref arg err[184874] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184880 call uint(64)[115] 64)
    }
    unknown retVal[184885] t[184722]
    (184888 'end of statement')
    unknown isErr[184890] bool[10]
    (184893 'end of statement')
    unknown localX[184900](184899 call(184895 call . x[184728] c"localize"))
    (184903 'end of statement')
    const hasUnderscores[184916] "const"(184914 call !=(184910 call(184905 call . localX[184900] c"find") "_")(184912 call - 1))
    (184919 'end of statement')
    if(185077 call _cond_test hasUnderscores[184916])
    {
      (184928 call = localX[184900](184927 call(184923 call . localX[184900] c"strip")))
      unknown numElements[184933] int(64)[13]
      (184936 'end of statement')
      {
        unknown _indexOfInterest[184961] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[184962] "expr temp" "temp"
        (184971 'move' _iterator[184962](184969 call _getIterator(184942 call(184938 call . localX[184900] c"split"))))
        Defer
        {
          {
            (184989 call _freeIterator _iterator[184962])
          }
        }
        { scopeless type
          (184977 'move' _indexOfInterest[184961](184974 call iteratorIndex _iterator[184962]))
        }
        ForLoop[184963]
        {
          unknown chpl__elidedIdx[184982] "index var" "insert auto destroy"
          (184984 'move' chpl__elidedIdx[184982] _indexOfInterest[184961])
          {
            (184945 call += numElements[184933] 1)
            if(184956 call _cond_test(184951 call > numElements[184933] 1))
            {
              break _breakLabel[184967] _breakLabel[184967]
            }
          }
          label _continueLabel[184966]
          _indexOfInterest[184961]
          _iterator[184962]
        }
        label _breakLabel[184967]
      }
      if(185021 call _cond_test(184998 call > numElements[184933] 1))
      {
        (185019 'throw'(185002 'new'(_chpl_manager = _owned[30](?))(185018 call IllegalArgumentError[388778](?)(185015 call +(185009 call +(185006 call + "bad cast from string '" x[184728]) "' to ")(185013 call _cast string[26] t[184722])))))
      }
      if(185072 call _cond_test(185031 call >=(185027 call . localX[184900] c"size") 2))
      {
        (185069 call = localX[184900](185067 call +(185037 call localX[184900] 0)(185066 call(185044 call .(185043 call localX[184900](185040 call chpl_build_low_bounded_range 1)) c"replace") "_" "")))
      }
    }
    if(185118 call _cond_test(185086 call(185082 call . localX[184900] c"isEmpty")))
    {
      (185116 'throw'(185089 'new'(_chpl_manager = _owned[30](?))(185115 call IllegalArgumentError[388778](?)(185112 call + "bad cast from empty string to "(185110 call _cast string[26] t[184722])))))
    }
    if(185411 call _cond_test(185126 call isIntType t[184722]))
    {
      {
        unknown tmp[185244] "expr temp" "maybe param" "maybe type" "temp"
        (185246 'move' tmp[185244](185130 call numBits t[184722]))
        if(185251 call _cond_test(185248 call == tmp[185244] 8))
        {
          (185145 call = retVal[184885](185144 call c_string_to_int8_t(185141 call(185137 call . localX[184900] c"c_str")) isErr[184890]))
        }
        {
          if(185257 call _cond_test(185254 call == tmp[185244] 16))
          {
            (185164 call = retVal[184885](185163 call c_string_to_int16_t(185160 call(185156 call . localX[184900] c"c_str")) isErr[184890]))
          }
          {
            if(185264 call _cond_test(185261 call == tmp[185244] 32))
            {
              (185183 call = retVal[184885](185182 call c_string_to_int32_t(185179 call(185175 call . localX[184900] c"c_str")) isErr[184890]))
            }
            {
              if(185271 call _cond_test(185268 call == tmp[185244] 64))
              {
                (185202 call = retVal[184885](185201 call c_string_to_int64_t(185198 call(185194 call . localX[184900] c"c_str")) isErr[184890]))
              }
              {
                (185238 call compilerError "Unsupported bit width "(185214 call numBits t[184722])(185236 call + " in cast from string to "(185234 call _cast string[26] t[184722])))
              }
            }
          }
        }
      }
    }
    {
      {
        unknown tmp[185378] "expr temp" "maybe param" "maybe type" "temp"
        (185380 'move' tmp[185378](185280 call numBits t[184722]))
        if(185385 call _cond_test(185382 call == tmp[185378] 8))
        {
          (185295 call = retVal[184885](185294 call c_string_to_uint8_t(185291 call(185287 call . localX[184900] c"c_str")) isErr[184890]))
        }
        {
          if(185391 call _cond_test(185388 call == tmp[185378] 16))
          {
            (185314 call = retVal[184885](185313 call c_string_to_uint16_t(185310 call(185306 call . localX[184900] c"c_str")) isErr[184890]))
          }
          {
            if(185398 call _cond_test(185395 call == tmp[185378] 32))
            {
              (185333 call = retVal[184885](185332 call c_string_to_uint32_t(185329 call(185325 call . localX[184900] c"c_str")) isErr[184890]))
            }
            {
              if(185405 call _cond_test(185402 call == tmp[185378] 64))
              {
                (185352 call = retVal[184885](185351 call c_string_to_uint64_t(185348 call(185344 call . localX[184900] c"c_str")) isErr[184890]))
              }
              {
                (185372 call compilerError "Unsupported bit width "(185364 call numBits t[184722])(185370 call + " in cast from string to "(185368 call _cast string[26] t[184722])))
              }
            }
          }
        }
      }
    }
    if(185437 call _cond_test isErr[184890])
    {
      (185435 'throw'(185418 'new'(_chpl_manager = _owned[30](?))(185434 call IllegalArgumentError[388778](?)(185431 call +(185425 call +(185422 call + "bad cast from string '" x[184728]) "' to ")(185429 call _cast string[26] t[184722])))))
    }
    (185443 return retVal[184885])
  }
  function _real_cast_helper[185456](arg x[185453] :
  (185452 call real(64)[16] 64), param arg isImag[185459] :
  bool[10]) : _unknown[51] "inline"
  {
    function real_to_c_string[185472](arg x[185469] :
    (185468 call real(64)[16] 64), arg isImag[185475] :
    bool[10]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_string[19]
    }
    function strlen[185489](const arg str[185486] :
    c_string[19]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      size_t[20654]
    }
    unknown csc[185506](185505 call real_to_c_string(185501 call _cast(185500 call real(64)[16] 64) x[185453]) isImag[185459])
    (185509 'end of statement')
    const len[185520] "const"(185519 call(185514 call .(185513 call strlen csc[185506]) c"safeCast") int(64)[13])
    (185523 'end of statement')
    (185547 return(185546 call chpl_createStringWithOwnedBufferNV(x =(185533 call _cast(185532 call c_ptr[205045](?)(185530 call uint(64)[115] 8)) csc[185506]))(length = len[185520])(size =(185541 call + len[185520] 1))(numCodepoints = len[185520])))
  }
  { scopeless type
    string[26]
  }
  function _cast[185558](arg t[185555] :
  string[26], arg x[185561] :
  chpl_anyreal[193](?)) : _unknown[51]
  {
    (185575 return(185574 call _real_cast_helper(185570 call _cast(185569 call real(64)[16] 64) x[185561]) 0))
  }
  function _cast[185586](arg t[185583] :
  string[26], arg x[185589] :
  chpl_anyimag[190](?)) : _unknown[51]
  {
    unknown r[185600](185599 'cast'(185597 call real(64)[16] 64) x[185589])
    (185603 'end of statement')
    (185610 return(185609 call _real_cast_helper r[185600] 1))
  }
  function _cleanupStringForRealCast[185618](arg t[185616]:_any[178](?), ref arg s[185621] :
  string[26]) : _unknown[51] throws "inline" "no return value for void"
  {
    unknown len[185628](185625 call . s[185621] c"size")
    (185631 'end of statement')
    if(185654 call _cond_test(185638 call(185634 call . s[185621] c"isEmpty")))
    {
      (185652 'throw'(185641 'new'(_chpl_manager = _owned[30](?))(185651 call IllegalArgumentError[388778](?)(185648 call + "bad cast from empty string to "(185646 call _cast string[26] t[185616])))))
    }
    if(185769 call _cond_test(185680 call &&(185661 call >= len[185628] 2)(185678 call !=(185674 call(185669 call .(185668 call s[185621](185665 call chpl_build_low_bounded_range 1)) c"find") "_")(185676 call - 1))))
    {
      if(185764 call _cond_test(185693 call &&(185684 call > len[185628] 2)(185691 call ==(185689 call s[185621] 0) "_")))
      {
        (185731 call = s[185621](185729 call +(185699 call s[185621] 0)(185728 call(185706 call .(185705 call s[185621](185702 call chpl_build_low_bounded_range 1)) c"replace") "_" "")))
      }
      {
        (185760 call = s[185621](185759 call(185737 call . s[185621] c"replace") "_" ""))
      }
    }
  }
  function _cast[185781](arg t[185778] :
  chpl_anyreal[193](?), arg x[185784] :
  string[26]) : _unknown[51] throws "inline"
  {
    function c_string_to_real32[185793](arg x[185790] :
    c_string[19], ref arg err[185796] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (185802 call real(64)[16] 32)
    }
    function c_string_to_real64[185813](arg x[185810] :
    c_string[19], ref arg err[185816] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (185822 call real(64)[16] 64)
    }
    unknown retVal[185827] t[185778]
    (185830 'end of statement')
    unknown isErr[185832] bool[10]
    (185835 'end of statement')
    unknown localX[185842](185841 call(185837 call . x[185784] c"localize"))
    (185845 'end of statement')
    (185850 call _cleanupStringForRealCast t[185778] localX[185842])
    {
      unknown tmp[185925] "expr temp" "maybe param" "maybe type" "temp"
      (185927 'move' tmp[185925](185855 call numBits t[185778]))
      if(185932 call _cond_test(185929 call == tmp[185925] 32))
      {
        (185870 call = retVal[185827](185869 call c_string_to_real32(185866 call(185862 call . localX[185842] c"c_str")) isErr[185832]))
      }
      {
        if(185938 call _cond_test(185935 call == tmp[185925] 64))
        {
          (185889 call = retVal[185827](185888 call c_string_to_real64(185885 call(185881 call . localX[185842] c"c_str")) isErr[185832]))
        }
        {
          (185919 call compilerError "Unsupported bit width "(185901 call numBits t[185778]) " in cast to string")
        }
      }
    }
    if(185971 call _cond_test isErr[185832])
    {
      (185969 'throw'(185946 'new'(_chpl_manager = _owned[30](?))(185968 call IllegalArgumentError[388778](?)(185965 call +(185962 call +(185953 call +(185950 call + "bad cast from string '" x[185784]) "' to real(")(185960 call _cast string[26](185958 call numBits t[185778]))) ")"))))
    }
    (185977 return retVal[185827])
  }
  function _cast[185987](arg t[185984] :
  chpl_anyimag[190](?), arg x[185990] :
  string[26]) : _unknown[51] throws "inline"
  {
    function c_string_to_imag32[185999](arg x[185996] :
    c_string[19], ref arg err[186002] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (186008 call imag(64)[130] 32)
    }
    function c_string_to_imag64[186019](arg x[186016] :
    c_string[19], ref arg err[186022] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (186028 call imag(64)[130] 64)
    }
    unknown retVal[186033] t[185984]
    (186036 'end of statement')
    unknown isErr[186038] bool[10]
    (186041 'end of statement')
    unknown localX[186048](186047 call(186043 call . x[185990] c"localize"))
    (186051 'end of statement')
    (186056 call _cleanupStringForRealCast t[185984] localX[186048])
    {
      unknown tmp[186115] "expr temp" "maybe param" "maybe type" "temp"
      (186117 'move' tmp[186115](186061 call numBits t[185984]))
      if(186122 call _cond_test(186119 call == tmp[186115] 32))
      {
        (186076 call = retVal[186033](186075 call c_string_to_imag32(186072 call(186068 call . localX[186048] c"c_str")) isErr[186038]))
      }
      {
        if(186128 call _cond_test(186125 call == tmp[186115] 64))
        {
          (186095 call = retVal[186033](186094 call c_string_to_imag64(186091 call(186087 call . localX[186048] c"c_str")) isErr[186038]))
        }
        {
          (186109 call compilerError "Unsupported bit width "(186107 call numBits t[185984]) " in cast to string")
        }
      }
    }
    if(186161 call _cond_test isErr[186038])
    {
      (186159 'throw'(186136 'new'(_chpl_manager = _owned[30](?))(186158 call IllegalArgumentError[388778](?)(186155 call +(186152 call +(186143 call +(186140 call + "bad cast from string '" x[185990]) "' to imag(")(186150 call _cast string[26](186148 call numBits t[185984]))) ")"))))
    }
    (186167 return retVal[186033])
  }
  function _cast[186177](arg t[186174] :
  string[26], arg x[186180] :
  chpl_anycomplex[184](?)) : _unknown[51]
  {
    if(186216 call _cond_test(186197 call ||(186189 call isnan(186185 call . x[186180] c"re"))(186196 call isnan(186192 call . x[186180] c"im"))))
    {
      (186214 return "nan")
    }
    unknown re[186229](186227 call _cast string[26](186223 call . x[186180] c"re"))
    (186232 'end of statement')
    unknown im[186234] string[26]
    (186237 'end of statement')
    unknown op[186239] string[26]
    (186242 'end of statement')
    if(186318 call _cond_test(186248 call <(186244 call . x[186180] c"im") 0))
    {
      (186260 call = im[186234](186258 call _cast string[26](186255 call -(186252 call . x[186180] c"im"))))
      (186266 call = op[186239] " - ")
    }
    {
      if(186314 call _cond_test(186284 call &&(186276 call ==(186270 call . x[186180] c"im")(186274 call - 0.0))(186282 call !=(186279 call - 0.0) 0.0)))
      {
        (186288 call = im[186234] "0.0")
        (186294 call = op[186239] " - ")
      }
      {
        (186305 call = im[186234](186303 call _cast string[26](186299 call . x[186180] c"im")))
        (186311 call = op[186239] " + ")
      }
    }
    const ts0[186327] "const"(186325 call + re[186229] op[186239])
    (186330 'end of statement')
    const ts1[186335] "const"(186333 call + ts0[186327] im[186234])
    (186338 'end of statement')
    const ret[186357] "const"(186355 call + ts1[186335] "i")
    (186360 'end of statement')
    (186362 return ret[186357])
  }
  function _cast[186372](arg t[186369] :
  chpl_anycomplex[184](?), arg x[186375] :
  string[26]) : _unknown[51] throws "inline"
  {
    function c_string_to_complex64[186384](arg x[186381] :
    c_string[19], ref arg err[186387] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (186393 call complex(128)[140] 64)
    }
    function c_string_to_complex128[186404](arg x[186401] :
    c_string[19], ref arg err[186407] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (186413 call complex(128)[140] 128)
    }
    unknown retVal[186418] t[186369]
    (186421 'end of statement')
    unknown isErr[186423] bool[10]
    (186426 'end of statement')
    const localX[186433] "const"(186432 call(186428 call . x[186375] c"localize"))
    (186436 'end of statement')
    if(186480 call _cond_test(186442 call(186438 call . localX[186433] c"isEmpty")))
    {
      (186478 'throw'(186445 'new'(_chpl_manager = _owned[30](?))(186477 call IllegalArgumentError[388778](?)(186474 call +(186471 call + "bad cast from empty string to complex("(186469 call _cast string[26](186467 call numBits t[186369]))) ")"))))
    }
    {
      unknown tmp[186542] "expr temp" "maybe param" "maybe type" "temp"
      (186544 'move' tmp[186542](186488 call numBits t[186369]))
      if(186549 call _cond_test(186546 call == tmp[186542] 64))
      {
        (186503 call = retVal[186418](186502 call c_string_to_complex64(186499 call(186495 call . localX[186433] c"c_str")) isErr[186423]))
      }
      {
        if(186555 call _cond_test(186552 call == tmp[186542] 128))
        {
          (186522 call = retVal[186418](186521 call c_string_to_complex128(186518 call(186514 call . localX[186433] c"c_str")) isErr[186423]))
        }
        {
          (186536 call compilerError "Unsupported bit width "(186534 call numBits t[186369]) " in cast to string")
        }
      }
    }
    if(186588 call _cond_test isErr[186423])
    {
      (186586 'throw'(186563 'new'(_chpl_manager = _owned[30](?))(186585 call IllegalArgumentError[388778](?)(186582 call +(186579 call +(186570 call +(186567 call + "bad cast from string '" x[186375]) "' to complex(")(186577 call _cast string[26](186575 call numBits t[186369]))) ")"))))
    }
    (186594 return retVal[186418])
  }
  (355216 'used modules list'(184414 'use' ChapelStandard[20264])(184418 'use' SysCTypes[20940])(184424 'use' NVStringFactory[30564]))
}