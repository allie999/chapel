AST dump for StringCasts after pass flattenClasses.
Module use list: ChapelStandard SysCTypes NVStringFactory 

{
  function _cast[184478](arg t[184475] :
  string[26], arg x[184481] :
  bool[10]) : _unknown[51] "inline"
  {
    if(184507 call _cond_test x[184481])
    {
      (184486 return "true")
    }
    {
      (184504 return "false")
    }
  }
  function _cast[184520](arg t[184517] :
  chpl_anybool[181](?), arg x[184523] :
  string[26]) : _unknown[51] throws
  {
    unknown str[184532](184531 call(184527 call . x[184523] c"strip"))
    (184535 'end of statement')
    if(184610 call _cond_test(184542 call(184538 call . str[184532] c"isEmpty")))
    {
      (184566 'throw'(184545 'new'(_chpl_manager = _owned[30](?))(184565 call IllegalArgumentError[388889](?) "bad cast from empty string to bool")))
    }
    {
      if(184605 call _cond_test(184571 call == str[184532] "true"))
      {
        (184574 return 1)
      }
      {
        if(184601 call _cond_test(184579 call == str[184532] "false"))
        {
          (184582 return 0)
        }
        {
          (184598 'throw'(184587 'new'(_chpl_manager = _owned[30](?))(184597 call IllegalArgumentError[388889](?)(184594 call +(184591 call + "bad cast from string '" x[184523]) "' to bool"))))
        }
      }
    }
    (184616 return 0)
  }
  function _cast[184626](arg t[184623] :
  string[26], arg x[184629] :
  integral[199](?)) : _unknown[51]
  {
    function integral_to_c_string[184641](arg x[184638] :
    (184637 call int(64)[13] 64), arg size[184647] :
    (184646 call uint(64)[115] 32), arg isSigned[184651] :
    bool[10], ref arg err[184655] :
    bool[10]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_string[19]
    }
    function strlen[184669](const arg str[184666] :
    c_string[19]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      size_t[20657]
    }
    unknown isErr[184676] bool[10]
    (184679 'end of statement')
    unknown csc[184701](184700 call integral_to_c_string(184686 call _cast(184685 call int(64)[13] 64) x[184629])(184693 call numBytes(184691 'typeof' x[184629]))(184698 call isIntType(184696 'typeof' x[184629])) isErr[184676])
    (184704 'end of statement')
    if(184720 call _cond_test isErr[184676])
    {
      Try!
      {
        {
          (184713 'throw'(184708 'new'(_chpl_manager = _owned[30](?))(184712 call IllegalArgumentError[388889](?) "Unexpected case in integral_to_c_string")))
        }
      }
    }
    const len[184734] "const"(184733 call(184728 call .(184727 call strlen csc[184701]) c"safeCast") int(64)[13])
    (184737 'end of statement')
    (184761 return(184760 call chpl_createStringWithOwnedBufferNV(x =(184747 call _cast(184746 call c_ptr[205100](?)(184744 call uint(64)[115] 8)) csc[184701]))(length = len[184734])(size =(184755 call + len[184734] 1))(numCodepoints = len[184734])))
  }
  function _cast[184771](arg t[184768] :
  integral[199](?), arg x[184774] :
  string[26]) : _unknown[51] throws "inline"
  {
    function c_string_to_int8_t[184783](arg x[184780] :
    c_string[19], ref arg err[184786] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184792 call int(64)[13] 8)
    }
    function c_string_to_int16_t[184803](arg x[184800] :
    c_string[19], ref arg err[184806] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184812 call int(64)[13] 16)
    }
    function c_string_to_int32_t[184822](arg x[184819] :
    c_string[19], ref arg err[184825] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184831 call int(64)[13] 32)
    }
    function c_string_to_int64_t[184841](arg x[184838] :
    c_string[19], ref arg err[184844] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184850 call int(64)[13] 64)
    }
    function c_string_to_uint8_t[184860](arg x[184857] :
    c_string[19], ref arg err[184863] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184869 call uint(64)[115] 8)
    }
    function c_string_to_uint16_t[184879](arg x[184876] :
    c_string[19], ref arg err[184882] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184888 call uint(64)[115] 16)
    }
    function c_string_to_uint32_t[184898](arg x[184895] :
    c_string[19], ref arg err[184901] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184907 call uint(64)[115] 32)
    }
    function c_string_to_uint64_t[184917](arg x[184914] :
    c_string[19], ref arg err[184920] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (184926 call uint(64)[115] 64)
    }
    unknown retVal[184931] t[184768]
    (184934 'end of statement')
    unknown isErr[184936] bool[10]
    (184939 'end of statement')
    unknown localX[184946](184945 call(184941 call . x[184774] c"localize"))
    (184949 'end of statement')
    const hasUnderscores[184962] "const"(184960 call !=(184956 call(184951 call . localX[184946] c"find") "_")(184958 call - 1))
    (184965 'end of statement')
    if(185123 call _cond_test hasUnderscores[184962])
    {
      (184974 call = localX[184946](184973 call(184969 call . localX[184946] c"strip")))
      unknown numElements[184979] int(64)[13]
      (184982 'end of statement')
      {
        unknown _indexOfInterest[185007] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[185008] "expr temp" "temp"
        (185017 'move' _iterator[185008](185015 call _getIterator(184988 call(184984 call . localX[184946] c"split"))))
        Defer
        {
          {
            (185035 call _freeIterator _iterator[185008])
          }
        }
        { scopeless type
          (185023 'move' _indexOfInterest[185007](185020 call iteratorIndex _iterator[185008]))
        }
        ForLoop[185009]
        {
          unknown chpl__elidedIdx[185028] "index var" "insert auto destroy"
          (185030 'move' chpl__elidedIdx[185028] _indexOfInterest[185007])
          {
            (184991 call += numElements[184979] 1)
            if(185002 call _cond_test(184997 call > numElements[184979] 1))
            {
              break _breakLabel[185013] _breakLabel[185013]
            }
          }
          label _continueLabel[185012]
          _indexOfInterest[185007]
          _iterator[185008]
        }
        label _breakLabel[185013]
      }
      if(185067 call _cond_test(185044 call > numElements[184979] 1))
      {
        (185065 'throw'(185048 'new'(_chpl_manager = _owned[30](?))(185064 call IllegalArgumentError[388889](?)(185061 call +(185055 call +(185052 call + "bad cast from string '" x[184774]) "' to ")(185059 call _cast string[26] t[184768])))))
      }
      if(185118 call _cond_test(185077 call >=(185073 call . localX[184946] c"size") 2))
      {
        (185115 call = localX[184946](185113 call +(185083 call localX[184946] 0)(185112 call(185090 call .(185089 call localX[184946](185086 call chpl_build_low_bounded_range 1)) c"replace") "_" "")))
      }
    }
    if(185164 call _cond_test(185132 call(185128 call . localX[184946] c"isEmpty")))
    {
      (185162 'throw'(185135 'new'(_chpl_manager = _owned[30](?))(185161 call IllegalArgumentError[388889](?)(185158 call + "bad cast from empty string to "(185156 call _cast string[26] t[184768])))))
    }
    if(185457 call _cond_test(185172 call isIntType t[184768]))
    {
      {
        unknown tmp[185290] "expr temp" "maybe param" "maybe type" "temp"
        (185292 'move' tmp[185290](185176 call numBits t[184768]))
        if(185297 call _cond_test(185294 call == tmp[185290] 8))
        {
          (185191 call = retVal[184931](185190 call c_string_to_int8_t(185187 call(185183 call . localX[184946] c"c_str")) isErr[184936]))
        }
        {
          if(185303 call _cond_test(185300 call == tmp[185290] 16))
          {
            (185210 call = retVal[184931](185209 call c_string_to_int16_t(185206 call(185202 call . localX[184946] c"c_str")) isErr[184936]))
          }
          {
            if(185310 call _cond_test(185307 call == tmp[185290] 32))
            {
              (185229 call = retVal[184931](185228 call c_string_to_int32_t(185225 call(185221 call . localX[184946] c"c_str")) isErr[184936]))
            }
            {
              if(185317 call _cond_test(185314 call == tmp[185290] 64))
              {
                (185248 call = retVal[184931](185247 call c_string_to_int64_t(185244 call(185240 call . localX[184946] c"c_str")) isErr[184936]))
              }
              {
                (185284 call compilerError "Unsupported bit width "(185260 call numBits t[184768])(185282 call + " in cast from string to "(185280 call _cast string[26] t[184768])))
              }
            }
          }
        }
      }
    }
    {
      {
        unknown tmp[185424] "expr temp" "maybe param" "maybe type" "temp"
        (185426 'move' tmp[185424](185326 call numBits t[184768]))
        if(185431 call _cond_test(185428 call == tmp[185424] 8))
        {
          (185341 call = retVal[184931](185340 call c_string_to_uint8_t(185337 call(185333 call . localX[184946] c"c_str")) isErr[184936]))
        }
        {
          if(185437 call _cond_test(185434 call == tmp[185424] 16))
          {
            (185360 call = retVal[184931](185359 call c_string_to_uint16_t(185356 call(185352 call . localX[184946] c"c_str")) isErr[184936]))
          }
          {
            if(185444 call _cond_test(185441 call == tmp[185424] 32))
            {
              (185379 call = retVal[184931](185378 call c_string_to_uint32_t(185375 call(185371 call . localX[184946] c"c_str")) isErr[184936]))
            }
            {
              if(185451 call _cond_test(185448 call == tmp[185424] 64))
              {
                (185398 call = retVal[184931](185397 call c_string_to_uint64_t(185394 call(185390 call . localX[184946] c"c_str")) isErr[184936]))
              }
              {
                (185418 call compilerError "Unsupported bit width "(185410 call numBits t[184768])(185416 call + " in cast from string to "(185414 call _cast string[26] t[184768])))
              }
            }
          }
        }
      }
    }
    if(185483 call _cond_test isErr[184936])
    {
      (185481 'throw'(185464 'new'(_chpl_manager = _owned[30](?))(185480 call IllegalArgumentError[388889](?)(185477 call +(185471 call +(185468 call + "bad cast from string '" x[184774]) "' to ")(185475 call _cast string[26] t[184768])))))
    }
    (185489 return retVal[184931])
  }
  function _real_cast_helper[185502](arg x[185499] :
  (185498 call real(64)[16] 64), param arg isImag[185505] :
  bool[10]) : _unknown[51] "inline"
  {
    function real_to_c_string[185518](arg x[185515] :
    (185514 call real(64)[16] 64), arg isImag[185521] :
    bool[10]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_string[19]
    }
    function strlen[185535](const arg str[185532] :
    c_string[19]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      size_t[20657]
    }
    unknown csc[185552](185551 call real_to_c_string(185547 call _cast(185546 call real(64)[16] 64) x[185499]) isImag[185505])
    (185555 'end of statement')
    const len[185566] "const"(185565 call(185560 call .(185559 call strlen csc[185552]) c"safeCast") int(64)[13])
    (185569 'end of statement')
    (185593 return(185592 call chpl_createStringWithOwnedBufferNV(x =(185579 call _cast(185578 call c_ptr[205100](?)(185576 call uint(64)[115] 8)) csc[185552]))(length = len[185566])(size =(185587 call + len[185566] 1))(numCodepoints = len[185566])))
  }
  { scopeless type
    string[26]
  }
  function _cast[185604](arg t[185601] :
  string[26], arg x[185607] :
  chpl_anyreal[193](?)) : _unknown[51]
  {
    (185621 return(185620 call _real_cast_helper(185616 call _cast(185615 call real(64)[16] 64) x[185607]) 0))
  }
  function _cast[185632](arg t[185629] :
  string[26], arg x[185635] :
  chpl_anyimag[190](?)) : _unknown[51]
  {
    unknown r[185646](185645 'cast'(185643 call real(64)[16] 64) x[185635])
    (185649 'end of statement')
    (185656 return(185655 call _real_cast_helper r[185646] 1))
  }
  function _cleanupStringForRealCast[185664](arg t[185662]:_any[178](?), ref arg s[185667] :
  string[26]) : _unknown[51] throws "inline" "no return value for void"
  {
    unknown len[185674](185671 call . s[185667] c"size")
    (185677 'end of statement')
    if(185700 call _cond_test(185684 call(185680 call . s[185667] c"isEmpty")))
    {
      (185698 'throw'(185687 'new'(_chpl_manager = _owned[30](?))(185697 call IllegalArgumentError[388889](?)(185694 call + "bad cast from empty string to "(185692 call _cast string[26] t[185662])))))
    }
    if(185815 call _cond_test(185726 call &&(185707 call >= len[185674] 2)(185724 call !=(185720 call(185715 call .(185714 call s[185667](185711 call chpl_build_low_bounded_range 1)) c"find") "_")(185722 call - 1))))
    {
      if(185810 call _cond_test(185739 call &&(185730 call > len[185674] 2)(185737 call ==(185735 call s[185667] 0) "_")))
      {
        (185777 call = s[185667](185775 call +(185745 call s[185667] 0)(185774 call(185752 call .(185751 call s[185667](185748 call chpl_build_low_bounded_range 1)) c"replace") "_" "")))
      }
      {
        (185806 call = s[185667](185805 call(185783 call . s[185667] c"replace") "_" ""))
      }
    }
  }
  function _cast[185827](arg t[185824] :
  chpl_anyreal[193](?), arg x[185830] :
  string[26]) : _unknown[51] throws "inline"
  {
    function c_string_to_real32[185839](arg x[185836] :
    c_string[19], ref arg err[185842] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (185848 call real(64)[16] 32)
    }
    function c_string_to_real64[185859](arg x[185856] :
    c_string[19], ref arg err[185862] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (185868 call real(64)[16] 64)
    }
    unknown retVal[185873] t[185824]
    (185876 'end of statement')
    unknown isErr[185878] bool[10]
    (185881 'end of statement')
    unknown localX[185888](185887 call(185883 call . x[185830] c"localize"))
    (185891 'end of statement')
    (185896 call _cleanupStringForRealCast t[185824] localX[185888])
    {
      unknown tmp[185971] "expr temp" "maybe param" "maybe type" "temp"
      (185973 'move' tmp[185971](185901 call numBits t[185824]))
      if(185978 call _cond_test(185975 call == tmp[185971] 32))
      {
        (185916 call = retVal[185873](185915 call c_string_to_real32(185912 call(185908 call . localX[185888] c"c_str")) isErr[185878]))
      }
      {
        if(185984 call _cond_test(185981 call == tmp[185971] 64))
        {
          (185935 call = retVal[185873](185934 call c_string_to_real64(185931 call(185927 call . localX[185888] c"c_str")) isErr[185878]))
        }
        {
          (185965 call compilerError "Unsupported bit width "(185947 call numBits t[185824]) " in cast to string")
        }
      }
    }
    if(186017 call _cond_test isErr[185878])
    {
      (186015 'throw'(185992 'new'(_chpl_manager = _owned[30](?))(186014 call IllegalArgumentError[388889](?)(186011 call +(186008 call +(185999 call +(185996 call + "bad cast from string '" x[185830]) "' to real(")(186006 call _cast string[26](186004 call numBits t[185824]))) ")"))))
    }
    (186023 return retVal[185873])
  }
  function _cast[186033](arg t[186030] :
  chpl_anyimag[190](?), arg x[186036] :
  string[26]) : _unknown[51] throws "inline"
  {
    function c_string_to_imag32[186045](arg x[186042] :
    c_string[19], ref arg err[186048] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (186054 call imag(64)[130] 32)
    }
    function c_string_to_imag64[186065](arg x[186062] :
    c_string[19], ref arg err[186068] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (186074 call imag(64)[130] 64)
    }
    unknown retVal[186079] t[186030]
    (186082 'end of statement')
    unknown isErr[186084] bool[10]
    (186087 'end of statement')
    unknown localX[186094](186093 call(186089 call . x[186036] c"localize"))
    (186097 'end of statement')
    (186102 call _cleanupStringForRealCast t[186030] localX[186094])
    {
      unknown tmp[186161] "expr temp" "maybe param" "maybe type" "temp"
      (186163 'move' tmp[186161](186107 call numBits t[186030]))
      if(186168 call _cond_test(186165 call == tmp[186161] 32))
      {
        (186122 call = retVal[186079](186121 call c_string_to_imag32(186118 call(186114 call . localX[186094] c"c_str")) isErr[186084]))
      }
      {
        if(186174 call _cond_test(186171 call == tmp[186161] 64))
        {
          (186141 call = retVal[186079](186140 call c_string_to_imag64(186137 call(186133 call . localX[186094] c"c_str")) isErr[186084]))
        }
        {
          (186155 call compilerError "Unsupported bit width "(186153 call numBits t[186030]) " in cast to string")
        }
      }
    }
    if(186207 call _cond_test isErr[186084])
    {
      (186205 'throw'(186182 'new'(_chpl_manager = _owned[30](?))(186204 call IllegalArgumentError[388889](?)(186201 call +(186198 call +(186189 call +(186186 call + "bad cast from string '" x[186036]) "' to imag(")(186196 call _cast string[26](186194 call numBits t[186030]))) ")"))))
    }
    (186213 return retVal[186079])
  }
  function _cast[186223](arg t[186220] :
  string[26], arg x[186226] :
  chpl_anycomplex[184](?)) : _unknown[51]
  {
    if(186262 call _cond_test(186243 call ||(186235 call isnan(186231 call . x[186226] c"re"))(186242 call isnan(186238 call . x[186226] c"im"))))
    {
      (186260 return "nan")
    }
    unknown re[186275](186273 call _cast string[26](186269 call . x[186226] c"re"))
    (186278 'end of statement')
    unknown im[186280] string[26]
    (186283 'end of statement')
    unknown op[186285] string[26]
    (186288 'end of statement')
    if(186364 call _cond_test(186294 call <(186290 call . x[186226] c"im") 0))
    {
      (186306 call = im[186280](186304 call _cast string[26](186301 call -(186298 call . x[186226] c"im"))))
      (186312 call = op[186285] " - ")
    }
    {
      if(186360 call _cond_test(186330 call &&(186322 call ==(186316 call . x[186226] c"im")(186320 call - 0.0))(186328 call !=(186325 call - 0.0) 0.0)))
      {
        (186334 call = im[186280] "0.0")
        (186340 call = op[186285] " - ")
      }
      {
        (186351 call = im[186280](186349 call _cast string[26](186345 call . x[186226] c"im")))
        (186357 call = op[186285] " + ")
      }
    }
    const ts0[186373] "const"(186371 call + re[186275] op[186285])
    (186376 'end of statement')
    const ts1[186381] "const"(186379 call + ts0[186373] im[186280])
    (186384 'end of statement')
    const ret[186403] "const"(186401 call + ts1[186381] "i")
    (186406 'end of statement')
    (186408 return ret[186403])
  }
  function _cast[186418](arg t[186415] :
  chpl_anycomplex[184](?), arg x[186421] :
  string[26]) : _unknown[51] throws "inline"
  {
    function c_string_to_complex64[186430](arg x[186427] :
    c_string[19], ref arg err[186433] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (186439 call complex(128)[140] 64)
    }
    function c_string_to_complex128[186450](arg x[186447] :
    c_string[19], ref arg err[186453] :
    bool[10]) : _unknown[51] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (186459 call complex(128)[140] 128)
    }
    unknown retVal[186464] t[186415]
    (186467 'end of statement')
    unknown isErr[186469] bool[10]
    (186472 'end of statement')
    const localX[186479] "const"(186478 call(186474 call . x[186421] c"localize"))
    (186482 'end of statement')
    if(186526 call _cond_test(186488 call(186484 call . localX[186479] c"isEmpty")))
    {
      (186524 'throw'(186491 'new'(_chpl_manager = _owned[30](?))(186523 call IllegalArgumentError[388889](?)(186520 call +(186517 call + "bad cast from empty string to complex("(186515 call _cast string[26](186513 call numBits t[186415]))) ")"))))
    }
    {
      unknown tmp[186588] "expr temp" "maybe param" "maybe type" "temp"
      (186590 'move' tmp[186588](186534 call numBits t[186415]))
      if(186595 call _cond_test(186592 call == tmp[186588] 64))
      {
        (186549 call = retVal[186464](186548 call c_string_to_complex64(186545 call(186541 call . localX[186479] c"c_str")) isErr[186469]))
      }
      {
        if(186601 call _cond_test(186598 call == tmp[186588] 128))
        {
          (186568 call = retVal[186464](186567 call c_string_to_complex128(186564 call(186560 call . localX[186479] c"c_str")) isErr[186469]))
        }
        {
          (186582 call compilerError "Unsupported bit width "(186580 call numBits t[186415]) " in cast to string")
        }
      }
    }
    if(186634 call _cond_test isErr[186469])
    {
      (186632 'throw'(186609 'new'(_chpl_manager = _owned[30](?))(186631 call IllegalArgumentError[388889](?)(186628 call +(186625 call +(186616 call +(186613 call + "bad cast from string '" x[186421]) "' to complex(")(186623 call _cast string[26](186621 call numBits t[186415]))) ")"))))
    }
    (186640 return retVal[186464])
  }
  (355327 'used modules list'(184460 'use' ChapelStandard[20267])(184464 'use' SysCTypes[20943])(184470 'use' NVStringFactory[30567]))
}