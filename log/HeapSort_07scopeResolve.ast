AST dump for HeapSort after pass scopeResolve.
Module use list: ChapelStandard Sort 

{ function heapSort[269658](arg Data[269655] :(269653 call chpl__buildArrayRuntimeType unknown Dom[269648] unknown eltType[269651]), arg comparator[269663] : unknown rec[269660] = defaultComparator[267977]) : _unknown[51]
  {(269671 call chpl_check_comparator comparator[269663] eltType[269651])
    if(269703 call _cond_test(269679 call !=(269675 call . Dom[269648] c"rank") 1))
    {(269700 call compilerError "heapSort() requires 1-D array")
    } const low[269711] "const"(269708 call . Dom[269648] c"alignedLow") const high[269718] "const"(269715 call . Dom[269648] c"alignedHigh") const size[269725] "const"(269722 call . Dom[269648] c"size") const stride[269735] "const"(269734 call abs(269730 call . Dom[269648] c"stride"))(269738 'end of statement') unknown start[269780](269777 IfExpr (269741 call == high[269718] low[269711]) then
    { scopeless high[269718]
    } else
    { scopeless(269774 IfExpr (269746 call % size[269725] 2) then
      { scopeless(269759 call + low[269711](269757 call *(269754 call /(269751 call - size[269725] 1) 2) stride[269735]))
      } else
      { scopeless(269772 call + low[269711](269770 call *(269767 call -(269764 call / size[269725] 2) 1) stride[269735]))
      } )
    } )(269783 'end of statement')
    { unknown tmp[269804] "temp"(269828 'move' tmp[269804](269823 call _cond_test(269825 call >= start[269780] low[269711])))
      WhileDo[269809]
      {
        {(269793 call SiftDown start[269780] high[269718] comparator[269663])(269801 call = start[269780](269799 call - start[269780] stride[269735]))
        } label _continueLabel[269807](269818 'move' tmp[269804](269813 call _cond_test(269815 call >= start[269780] low[269711]))) tmp[269804]
      } label _breakLabel[269808]
    } unknown end[269832] high[269718](269835 'end of statement')
    { unknown tmp[269867] "temp"(269891 'move' tmp[269867](269886 call _cond_test(269888 call > end[269832] low[269711])))
      WhileDo[269872]
      {
        {(269848 call <=>(269843 call Data[269655] end[269832])(269847 call Data[269655] low[269711]))(269857 call = end[269832](269855 call - end[269832] stride[269735]))(269865 call SiftDown low[269711] end[269832] comparator[269663])
        } label _continueLabel[269870](269881 'move' tmp[269867](269876 call _cond_test(269878 call > end[269832] low[269711]))) tmp[269867]
      } label _breakLabel[269871]
    } function SiftDown[269898](arg start[269896]:_any[178](?), arg end[269900]:_any[178](?), arg comparator[269905] : unknown rec[269902] = defaultComparator[267977]) : _unknown[51] "no return value for void"
    { unknown root[269910] start[269896](269913 'end of statement')
      { unknown tmp[270041] "temp"(270083 'move' tmp[270041](270069 call _cond_test(270071 call <=(270073 call +(270075 call -(270077 call * 2 root[269910]) low[269711]) stride[269735]) end[269900])))
        WhileDo[270046]
        {
          { const child[269938] "const"(269936 call +(269933 call -(269930 call * 2 root[269910]) low[269711]) stride[269735])(269941 'end of statement') unknown swap[269944] root[269910](269947 'end of statement')
            if(269968 call _cond_test(269961 call <(269959 call chpl_compare(269952 call Data[269655] swap[269944])(269957 call Data[269655] child[269938]) comparator[269905]) 0))
            {(269965 call = swap[269944] child[269938])
            }
            if(270008 call _cond_test(269998 call &&(269978 call <=(269975 call + child[269938] stride[269735]) end[269900])(269996 call <(269994 call chpl_compare(269984 call Data[269655] swap[269944])(269992 call Data[269655](269989 call + child[269938] stride[269735])) comparator[269905]) 0)))
            {(270005 call = swap[269944](270003 call + child[269938] stride[269735]))
            }
            if(270037 call _cond_test(270015 call != swap[269944] root[269910]))
            {(270025 call <=>(270020 call Data[269655] root[269910])(270024 call Data[269655] swap[269944]))(270031 call = root[269910] swap[269944])
            }
            {(270034 return _void[55])
            }
          } label _continueLabel[270044](270064 'move' tmp[270041](270050 call _cond_test(270052 call <=(270054 call +(270056 call -(270058 call * 2 root[269910]) low[269711]) stride[269735]) end[269900]))) tmp[270041]
        } label _breakLabel[270045]
      }
    }
  }(355335 'used modules list'(353022 'use' ChapelStandard[20264])(269643 'import' Sort[267968].{defaultComparator, chpl_check_comparator, chpl_compare}))
}