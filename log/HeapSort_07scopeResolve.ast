AST dump for HeapSort after pass scopeResolve.
Module use list: ChapelStandard Sort 

{ function heapSort[269570](arg Data[269567] :(269565 call chpl__buildArrayRuntimeType unknown Dom[269560] unknown eltType[269563]), arg comparator[269575] : unknown rec[269572] = defaultComparator[267889]) : _unknown[51]
  {(269583 call chpl_check_comparator comparator[269575] eltType[269563])
    if(269615 call _cond_test(269591 call !=(269587 call . Dom[269560] c"rank") 1))
    {(269612 call compilerError "heapSort() requires 1-D array")
    } const low[269623] "const"(269620 call . Dom[269560] c"alignedLow") const high[269630] "const"(269627 call . Dom[269560] c"alignedHigh") const size[269637] "const"(269634 call . Dom[269560] c"size") const stride[269647] "const"(269646 call abs(269642 call . Dom[269560] c"stride"))(269650 'end of statement') unknown start[269692](269689 IfExpr (269653 call == high[269630] low[269623]) then
    { scopeless high[269630]
    } else
    { scopeless(269686 IfExpr (269658 call % size[269637] 2) then
      { scopeless(269671 call + low[269623](269669 call *(269666 call /(269663 call - size[269637] 1) 2) stride[269647]))
      } else
      { scopeless(269684 call + low[269623](269682 call *(269679 call -(269676 call / size[269637] 2) 1) stride[269647]))
      } )
    } )(269695 'end of statement')
    { unknown tmp[269716] "temp"(269740 'move' tmp[269716](269735 call _cond_test(269737 call >= start[269692] low[269623])))
      WhileDo[269721]
      {
        {(269705 call SiftDown start[269692] high[269630] comparator[269575])(269713 call = start[269692](269711 call - start[269692] stride[269647]))
        } label _continueLabel[269719](269730 'move' tmp[269716](269725 call _cond_test(269727 call >= start[269692] low[269623]))) tmp[269716]
      } label _breakLabel[269720]
    } unknown end[269744] high[269630](269747 'end of statement')
    { unknown tmp[269779] "temp"(269803 'move' tmp[269779](269798 call _cond_test(269800 call > end[269744] low[269623])))
      WhileDo[269784]
      {
        {(269760 call <=>(269755 call Data[269567] end[269744])(269759 call Data[269567] low[269623]))(269769 call = end[269744](269767 call - end[269744] stride[269647]))(269777 call SiftDown low[269623] end[269744] comparator[269575])
        } label _continueLabel[269782](269793 'move' tmp[269779](269788 call _cond_test(269790 call > end[269744] low[269623]))) tmp[269779]
      } label _breakLabel[269783]
    } function SiftDown[269810](arg start[269808]:_any[178](?), arg end[269812]:_any[178](?), arg comparator[269817] : unknown rec[269814] = defaultComparator[267889]) : _unknown[51] "no return value for void"
    { unknown root[269822] start[269808](269825 'end of statement')
      { unknown tmp[269953] "temp"(269995 'move' tmp[269953](269981 call _cond_test(269983 call <=(269985 call +(269987 call -(269989 call * 2 root[269822]) low[269623]) stride[269647]) end[269812])))
        WhileDo[269958]
        {
          { const child[269850] "const"(269848 call +(269845 call -(269842 call * 2 root[269822]) low[269623]) stride[269647])(269853 'end of statement') unknown swap[269856] root[269822](269859 'end of statement')
            if(269880 call _cond_test(269873 call <(269871 call chpl_compare(269864 call Data[269567] swap[269856])(269869 call Data[269567] child[269850]) comparator[269817]) 0))
            {(269877 call = swap[269856] child[269850])
            }
            if(269920 call _cond_test(269910 call &&(269890 call <=(269887 call + child[269850] stride[269647]) end[269812])(269908 call <(269906 call chpl_compare(269896 call Data[269567] swap[269856])(269904 call Data[269567](269901 call + child[269850] stride[269647])) comparator[269817]) 0)))
            {(269917 call = swap[269856](269915 call + child[269850] stride[269647]))
            }
            if(269949 call _cond_test(269927 call != swap[269856] root[269822]))
            {(269937 call <=>(269932 call Data[269567] root[269822])(269936 call Data[269567] swap[269856]))(269943 call = root[269822] swap[269856])
            }
            {(269946 return _void[55])
            }
          } label _continueLabel[269956](269976 'move' tmp[269953](269962 call _cond_test(269964 call <=(269966 call +(269968 call -(269970 call * 2 root[269822]) low[269623]) stride[269647]) end[269812]))) tmp[269953]
        } label _breakLabel[269957]
      }
    }
  }(355247 'used modules list'(352934 'use' ChapelStandard[20264])(269555 'import' Sort[267880].{defaultComparator, chpl_check_comparator, chpl_compare}))
}