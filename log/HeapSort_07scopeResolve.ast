AST dump for HeapSort after pass scopeResolve.
Module use list: ChapelStandard Sort 

{ function heapSort[269680](arg Data[269677] :(269675 call chpl__buildArrayRuntimeType unknown Dom[269670] unknown eltType[269673]), arg comparator[269685] : unknown rec[269682] = defaultComparator[267998]) : _unknown[51]
  {(269693 call chpl_check_comparator comparator[269685] eltType[269673])
    if(269725 call _cond_test(269701 call !=(269697 call . Dom[269670] c"rank") 1))
    {(269722 call compilerError "heapSort() requires 1-D array")
    } const low[269733] "const"(269730 call . Dom[269670] c"alignedLow") const high[269740] "const"(269737 call . Dom[269670] c"alignedHigh") const size[269747] "const"(269744 call . Dom[269670] c"size") const stride[269757] "const"(269756 call abs(269752 call . Dom[269670] c"stride"))(269760 'end of statement') unknown start[269802](269799 IfExpr (269763 call == high[269740] low[269733]) then
    { scopeless high[269740]
    } else
    { scopeless(269796 IfExpr (269768 call % size[269747] 2) then
      { scopeless(269781 call + low[269733](269779 call *(269776 call /(269773 call - size[269747] 1) 2) stride[269757]))
      } else
      { scopeless(269794 call + low[269733](269792 call *(269789 call -(269786 call / size[269747] 2) 1) stride[269757]))
      } )
    } )(269805 'end of statement')
    { unknown tmp[269826] "temp"(269850 'move' tmp[269826](269845 call _cond_test(269847 call >= start[269802] low[269733])))
      WhileDo[269831]
      {
        {(269815 call SiftDown start[269802] high[269740] comparator[269685])(269823 call = start[269802](269821 call - start[269802] stride[269757]))
        } label _continueLabel[269829](269840 'move' tmp[269826](269835 call _cond_test(269837 call >= start[269802] low[269733]))) tmp[269826]
      } label _breakLabel[269830]
    } unknown end[269854] high[269740](269857 'end of statement')
    { unknown tmp[269889] "temp"(269913 'move' tmp[269889](269908 call _cond_test(269910 call > end[269854] low[269733])))
      WhileDo[269894]
      {
        {(269870 call <=>(269865 call Data[269677] end[269854])(269869 call Data[269677] low[269733]))(269879 call = end[269854](269877 call - end[269854] stride[269757]))(269887 call SiftDown low[269733] end[269854] comparator[269685])
        } label _continueLabel[269892](269903 'move' tmp[269889](269898 call _cond_test(269900 call > end[269854] low[269733]))) tmp[269889]
      } label _breakLabel[269893]
    } function SiftDown[269920](arg start[269918]:_any[178](?), arg end[269922]:_any[178](?), arg comparator[269927] : unknown rec[269924] = defaultComparator[267998]) : _unknown[51] "no return value for void"
    { unknown root[269932] start[269918](269935 'end of statement')
      { unknown tmp[270063] "temp"(270105 'move' tmp[270063](270091 call _cond_test(270093 call <=(270095 call +(270097 call -(270099 call * 2 root[269932]) low[269733]) stride[269757]) end[269922])))
        WhileDo[270068]
        {
          { const child[269960] "const"(269958 call +(269955 call -(269952 call * 2 root[269932]) low[269733]) stride[269757])(269963 'end of statement') unknown swap[269966] root[269932](269969 'end of statement')
            if(269990 call _cond_test(269983 call <(269981 call chpl_compare(269974 call Data[269677] swap[269966])(269979 call Data[269677] child[269960]) comparator[269927]) 0))
            {(269987 call = swap[269966] child[269960])
            }
            if(270030 call _cond_test(270020 call &&(270000 call <=(269997 call + child[269960] stride[269757]) end[269922])(270018 call <(270016 call chpl_compare(270006 call Data[269677] swap[269966])(270014 call Data[269677](270011 call + child[269960] stride[269757])) comparator[269927]) 0)))
            {(270027 call = swap[269966](270025 call + child[269960] stride[269757]))
            }
            if(270059 call _cond_test(270037 call != swap[269966] root[269932]))
            {(270047 call <=>(270042 call Data[269677] root[269932])(270046 call Data[269677] swap[269966]))(270053 call = root[269932] swap[269966])
            }
            {(270056 return _void[55])
            }
          } label _continueLabel[270066](270086 'move' tmp[270063](270072 call _cond_test(270074 call <=(270076 call +(270078 call -(270080 call * 2 root[269932]) low[269733]) stride[269757]) end[269922]))) tmp[270063]
        } label _breakLabel[270067]
      }
    }
  }(355378 'used modules list'(353064 'use' ChapelStandard[20267])(269665 'import' Sort[267989].{defaultComparator, chpl_check_comparator, chpl_compare}))
}