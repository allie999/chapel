AST dump for HeapSort after pass scopeResolve.
Module use list: ChapelStandard Sort 

{ function heapSort[269678](arg Data[269675] :(269673 call chpl__buildArrayRuntimeType unknown Dom[269668] unknown eltType[269671]), arg comparator[269683] : unknown rec[269680] = defaultComparator[267996]) : _unknown[51]
  {(269691 call chpl_check_comparator comparator[269683] eltType[269671])
    if(269723 call _cond_test(269699 call !=(269695 call . Dom[269668] c"rank") 1))
    {(269720 call compilerError "heapSort() requires 1-D array")
    } const low[269731] "const"(269728 call . Dom[269668] c"alignedLow") const high[269738] "const"(269735 call . Dom[269668] c"alignedHigh") const size[269745] "const"(269742 call . Dom[269668] c"size") const stride[269755] "const"(269754 call abs(269750 call . Dom[269668] c"stride"))(269758 'end of statement') unknown start[269800](269797 IfExpr (269761 call == high[269738] low[269731]) then
    { scopeless high[269738]
    } else
    { scopeless(269794 IfExpr (269766 call % size[269745] 2) then
      { scopeless(269779 call + low[269731](269777 call *(269774 call /(269771 call - size[269745] 1) 2) stride[269755]))
      } else
      { scopeless(269792 call + low[269731](269790 call *(269787 call -(269784 call / size[269745] 2) 1) stride[269755]))
      } )
    } )(269803 'end of statement')
    { unknown tmp[269824] "temp"(269848 'move' tmp[269824](269843 call _cond_test(269845 call >= start[269800] low[269731])))
      WhileDo[269829]
      {
        {(269813 call SiftDown start[269800] high[269738] comparator[269683])(269821 call = start[269800](269819 call - start[269800] stride[269755]))
        } label _continueLabel[269827](269838 'move' tmp[269824](269833 call _cond_test(269835 call >= start[269800] low[269731]))) tmp[269824]
      } label _breakLabel[269828]
    } unknown end[269852] high[269738](269855 'end of statement')
    { unknown tmp[269887] "temp"(269911 'move' tmp[269887](269906 call _cond_test(269908 call > end[269852] low[269731])))
      WhileDo[269892]
      {
        {(269868 call <=>(269863 call Data[269675] end[269852])(269867 call Data[269675] low[269731]))(269877 call = end[269852](269875 call - end[269852] stride[269755]))(269885 call SiftDown low[269731] end[269852] comparator[269683])
        } label _continueLabel[269890](269901 'move' tmp[269887](269896 call _cond_test(269898 call > end[269852] low[269731]))) tmp[269887]
      } label _breakLabel[269891]
    } function SiftDown[269918](arg start[269916]:_any[178](?), arg end[269920]:_any[178](?), arg comparator[269925] : unknown rec[269922] = defaultComparator[267996]) : _unknown[51] "no return value for void"
    { unknown root[269930] start[269916](269933 'end of statement')
      { unknown tmp[270061] "temp"(270103 'move' tmp[270061](270089 call _cond_test(270091 call <=(270093 call +(270095 call -(270097 call * 2 root[269930]) low[269731]) stride[269755]) end[269920])))
        WhileDo[270066]
        {
          { const child[269958] "const"(269956 call +(269953 call -(269950 call * 2 root[269930]) low[269731]) stride[269755])(269961 'end of statement') unknown swap[269964] root[269930](269967 'end of statement')
            if(269988 call _cond_test(269981 call <(269979 call chpl_compare(269972 call Data[269675] swap[269964])(269977 call Data[269675] child[269958]) comparator[269925]) 0))
            {(269985 call = swap[269964] child[269958])
            }
            if(270028 call _cond_test(270018 call &&(269998 call <=(269995 call + child[269958] stride[269755]) end[269920])(270016 call <(270014 call chpl_compare(270004 call Data[269675] swap[269964])(270012 call Data[269675](270009 call + child[269958] stride[269755])) comparator[269925]) 0)))
            {(270025 call = swap[269964](270023 call + child[269958] stride[269755]))
            }
            if(270057 call _cond_test(270035 call != swap[269964] root[269930]))
            {(270045 call <=>(270040 call Data[269675] root[269930])(270044 call Data[269675] swap[269964]))(270051 call = root[269930] swap[269964])
            }
            {(270054 return _void[55])
            }
          } label _continueLabel[270064](270084 'move' tmp[270061](270070 call _cond_test(270072 call <=(270074 call +(270076 call -(270078 call * 2 root[269930]) low[269731]) stride[269755]) end[269920]))) tmp[270061]
        } label _breakLabel[270065]
      }
    }
  }(355375 'used modules list'(353062 'use' ChapelStandard[20267])(269663 'import' Sort[267987].{defaultComparator, chpl_check_comparator, chpl_compare}))
}