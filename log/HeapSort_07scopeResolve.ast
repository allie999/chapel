AST dump for HeapSort after pass scopeResolve.
Module use list: ChapelStandard Sort 

{ function heapSort[269747](arg Data[269744] :(269742 call chpl__buildArrayRuntimeType unknown Dom[269737] unknown eltType[269740]), arg comparator[269752] : unknown rec[269749] = defaultComparator[268065]) : _unknown[51]
  {(269760 call chpl_check_comparator comparator[269752] eltType[269740])
    if(269792 call _cond_test(269768 call !=(269764 call . Dom[269737] c"rank") 1))
    {(269789 call compilerError "heapSort() requires 1-D array")
    } const low[269800] "const"(269797 call . Dom[269737] c"alignedLow") const high[269807] "const"(269804 call . Dom[269737] c"alignedHigh") const size[269814] "const"(269811 call . Dom[269737] c"size") const stride[269824] "const"(269823 call abs(269819 call . Dom[269737] c"stride"))(269827 'end of statement') unknown start[269869](269866 IfExpr (269830 call == high[269807] low[269800]) then
    { scopeless high[269807]
    } else
    { scopeless(269863 IfExpr (269835 call % size[269814] 2) then
      { scopeless(269848 call + low[269800](269846 call *(269843 call /(269840 call - size[269814] 1) 2) stride[269824]))
      } else
      { scopeless(269861 call + low[269800](269859 call *(269856 call -(269853 call / size[269814] 2) 1) stride[269824]))
      } )
    } )(269872 'end of statement')
    { unknown tmp[269893] "temp"(269917 'move' tmp[269893](269912 call _cond_test(269914 call >= start[269869] low[269800])))
      WhileDo[269898]
      {
        {(269882 call SiftDown start[269869] high[269807] comparator[269752])(269890 call = start[269869](269888 call - start[269869] stride[269824]))
        } label _continueLabel[269896](269907 'move' tmp[269893](269902 call _cond_test(269904 call >= start[269869] low[269800]))) tmp[269893]
      } label _breakLabel[269897]
    } unknown end[269921] high[269807](269924 'end of statement')
    { unknown tmp[269956] "temp"(269980 'move' tmp[269956](269975 call _cond_test(269977 call > end[269921] low[269800])))
      WhileDo[269961]
      {
        {(269937 call <=>(269932 call Data[269744] end[269921])(269936 call Data[269744] low[269800]))(269946 call = end[269921](269944 call - end[269921] stride[269824]))(269954 call SiftDown low[269800] end[269921] comparator[269752])
        } label _continueLabel[269959](269970 'move' tmp[269956](269965 call _cond_test(269967 call > end[269921] low[269800]))) tmp[269956]
      } label _breakLabel[269960]
    } function SiftDown[269987](arg start[269985]:_any[178](?), arg end[269989]:_any[178](?), arg comparator[269994] : unknown rec[269991] = defaultComparator[268065]) : _unknown[51] "no return value for void"
    { unknown root[269999] start[269985](270002 'end of statement')
      { unknown tmp[270130] "temp"(270172 'move' tmp[270130](270158 call _cond_test(270160 call <=(270162 call +(270164 call -(270166 call * 2 root[269999]) low[269800]) stride[269824]) end[269989])))
        WhileDo[270135]
        {
          { const child[270027] "const"(270025 call +(270022 call -(270019 call * 2 root[269999]) low[269800]) stride[269824])(270030 'end of statement') unknown swap[270033] root[269999](270036 'end of statement')
            if(270057 call _cond_test(270050 call <(270048 call chpl_compare(270041 call Data[269744] swap[270033])(270046 call Data[269744] child[270027]) comparator[269994]) 0))
            {(270054 call = swap[270033] child[270027])
            }
            if(270097 call _cond_test(270087 call &&(270067 call <=(270064 call + child[270027] stride[269824]) end[269989])(270085 call <(270083 call chpl_compare(270073 call Data[269744] swap[270033])(270081 call Data[269744](270078 call + child[270027] stride[269824])) comparator[269994]) 0)))
            {(270094 call = swap[270033](270092 call + child[270027] stride[269824]))
            }
            if(270126 call _cond_test(270104 call != swap[270033] root[269999]))
            {(270114 call <=>(270109 call Data[269744] root[269999])(270113 call Data[269744] swap[270033]))(270120 call = root[269999] swap[270033])
            }
            {(270123 return _void[55])
            }
          } label _continueLabel[270133](270153 'move' tmp[270130](270139 call _cond_test(270141 call <=(270143 call +(270145 call -(270147 call * 2 root[269999]) low[269800]) stride[269824]) end[269989]))) tmp[270130]
        } label _breakLabel[270134]
      }
    }
  }(355446 'used modules list'(353131 'use' ChapelStandard[20267])(269732 'import' Sort[268056].{defaultComparator, chpl_check_comparator, chpl_compare}))
}