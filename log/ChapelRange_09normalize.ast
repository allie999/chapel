AST dump for ChapelRange after pass normalize.
Module use list: ChapelBase SysBasic HaltWrappers Math DSIUtil 

{
  function chpl__init_ChapelRange[416009]() : void[4] "insert line file info" "module init"
  {
    (541049 'init var' debugChapelRange[64195] 0)
    (64198 'end of statement')
    (541051 'init var' useOptimizedRangeIterators[64200] 1)
    (64203 'end of statement')
    {
    }
    (512185 return _void[55])
  }
  unknown debugChapelRange[64195] "config" "no doc" "param"
  unknown useOptimizedRangeIterators[64200] "config" "no doc" "param"
  type BoundedRangeType[64213] def bounded[64205]:BoundedRangeType[64213] def boundedLow[64207]:BoundedRangeType[64213] def boundedHigh[64209]:BoundedRangeType[64213] def boundedNone[64211]:BoundedRangeType[64213]
  function range[64316](?).strType[64294](arg _mt[64320]:_MT[238], arg this[64318]:range[64316](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[509042] "RVV" "temp" "type variable"
    unknown call_tmp[616285] "expr temp" "maybe param" "maybe type" "temp"
    (616288 'move' call_tmp[616285](373744 call idxType _mt[243] this[64318]))
    unknown call_tmp[616290] "expr temp" "maybe param" "maybe type" "temp"
    (616293 'move' call_tmp[616290](64299 call chpl__rangeStrideType call_tmp[616285]))
    (509047 'move' ret[509042](509046 'deref' call_tmp[616290]))
    (509044 return ret[509042])
  }
  function range[64316](?).chpl__promotionType[64307](arg _mt[64324]:_MT[238], arg this[64322]:range[64316](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[509051] "RVV" "temp" "type variable"
    unknown call_tmp[616297] "expr temp" "maybe param" "maybe type" "temp"
    (616300 'move' call_tmp[616297](373749 call idxType _mt[243] this[64322]))
    (509056 'move' ret[509051](509055 'deref' call_tmp[616297]))
    (509053 return ret[509051])
  }
  type range[64316](?) unknown idxType[64220] "type variable" int(64)[13] unknown boundedType[64230] "param" bounded[64205] BoundedRangeType[64213] unknown stridable[64236] "param" 0 bool[10] unknown _low[64244](64243 call chpl__idxTypeToIntIdxType idxType[64220]) unknown _high[64252](64251 call chpl__idxTypeToIntIdxType idxType[64220]) unknown _stride[64265](64262 IfExpr  stridable[64236] then
  { scopeless
    (64260 call chpl__rangeStrideType idxType[64220])
  } else
  { scopeless
    nothing[7]
  } ) unknown _alignment[64278](64275 IfExpr  stridable[64236] then
  { scopeless
    (64273 call chpl__idxTypeToIntIdxType idxType[64220])
  } else
  { scopeless
    nothing[7]
  } ) unknown _aligned[64288](64285 IfExpr  stridable[64236] then
  { scopeless
    bool[10]
  } else
  { scopeless
    nothing[7]
  } )
  function range[64316](?).intIdxType[64330](arg _mt[64335]:_MT[238], arg this[64332]:range[64316](?) :
  range[64316](?)) type : _unknown[51] "method" "no parens"
  {
    unknown ret[509060] "RVV" "temp" "type variable"
    unknown call_tmp[616304] "expr temp" "maybe param" "maybe type" "temp"
    (616307 'move' call_tmp[616304](373754 call idxType _mt[243] this[64332]))
    unknown call_tmp[616309] "expr temp" "maybe param" "maybe type" "temp"
    (616312 'move' call_tmp[616309](64340 call chpl__idxTypeToIntIdxType call_tmp[616304]))
    (509065 'move' ret[509060](509064 'deref' call_tmp[616309]))
    (509062 return ret[509060])
  }
  function range[64316](?).init[64353](arg _mt[64418]:_MT[238], ref arg this[64415]:range[64316](?) :
  range[64316](?), arg idxType[64350]:_any[178](?) =
  int(64)[13], param arg boundedType[64360]:BoundedRangeType[64213] =
  bounded[64205], param arg stridable[64366]:bool[10] =
  0, arg _low[64376] :
  idxType[64350] =
  (64375 call chpl__intToIdx idxType[64350] 1), arg _high[64386] :
  idxType[64350] =
  (64385 call chpl__intToIdx idxType[64350] 0), arg _stride[64395] :
  (64393 call chpl__rangeStrideType idxType[64350]) =
  1, arg _alignment[64405] :
  idxType[64350] =
  (64404 call chpl__intToIdx idxType[64350] 0), arg _aligned[64411]:bool[10] =
  0) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454856] "temp" "type variable"
    (454858 'move' tmp[454856] idxType[64350])
    (454860 'init field' this[64415] c"idxType" tmp[454856])
    unknown call_tmp[616314] "expr temp" "maybe param" "maybe type" "temp"
    (616317 'move' call_tmp[616314](454865 call _cast BoundedRangeType[64213] boundedType[64360]))
    (454867 'init field' this[64415] c"boundedType" call_tmp[616314])
    (475285 'end of statement')
    unknown call_tmp[616319] "expr temp" "maybe param" "maybe type" "temp"
    (616322 'move' call_tmp[616319](454871 call _cast bool[10] stridable[64366]))
    (454873 'init field' this[64415] c"stridable" call_tmp[616319])
    (475286 'end of statement')
    unknown call_tmp[616324] "maybe param" "maybe type" "temp"
    (616327 'move' call_tmp[616324](64456 call chpl__idxToInt _low[64376]))
    unknown call_tmp[616329] "expr temp" "maybe param" "maybe type" "temp"
    (616332 'move' call_tmp[616329](454887 '.v' this[64415] c"idxType"))
    unknown call_tmp[616334] "maybe param" "maybe type" "temp"
    (616337 'move' call_tmp[616334](454879 call chpl__idxTypeToIntIdxType call_tmp[616329]))
    unknown tmp[454876] "temp"
    (454881 'init var' tmp[454876] call_tmp[616324] call_tmp[616334])
    (454883 'init field' this[64415] c"_low" tmp[454876])
    (475287 'end of statement')
    unknown call_tmp[616339] "maybe param" "maybe type" "temp"
    (616342 'move' call_tmp[616339](64469 call chpl__idxToInt _high[64386]))
    unknown call_tmp[616344] "expr temp" "maybe param" "maybe type" "temp"
    (616347 'move' call_tmp[616344](454901 '.v' this[64415] c"idxType"))
    unknown call_tmp[616349] "maybe param" "maybe type" "temp"
    (616352 'move' call_tmp[616349](454893 call chpl__idxTypeToIntIdxType call_tmp[616344]))
    unknown tmp[454890] "temp"
    (454895 'init var' tmp[454890] call_tmp[616339] call_tmp[616349])
    (454897 'init field' this[64415] c"_high" tmp[454890])
    (475288 'end of statement')
    unknown tmp[454904] "temp"
    unknown tmp[555430] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555431] "maybe param" "temp"
    unknown call_tmp[616354] "expr temp" "maybe param" "maybe type" "temp"
    (616357 'move' call_tmp[616354](454920 '.v' this[64415] c"stridable"))
    (555436 'move' tmp[555431](555434 call _cond_test call_tmp[616354]))
    if tmp[555431]
    {
      unknown tmp[555438] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616359] "expr temp" "maybe param" "maybe type" "temp"
      (616362 'move' call_tmp[616359](454923 '.v' this[64415] c"idxType"))
      (555440 'move' tmp[555438](454909 call chpl__rangeStrideType call_tmp[616359]))
      (555445 'move' tmp[555430](555442 '_paramFoldLogical' tmp[555431] tmp[555438]))
    }
    {
      (555450 'move' tmp[555430](555447 '_paramFoldLogical' tmp[555431] nothing[7]))
    }
    (454914 'default init var' tmp[454904] tmp[555430])
    (454916 '.=' this[64415] c"_stride" tmp[454904])
    (475289 'end of statement')
    unknown tmp[454926] "temp"
    unknown tmp[555457] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555458] "maybe param" "temp"
    unknown call_tmp[616364] "expr temp" "maybe param" "maybe type" "temp"
    (616367 'move' call_tmp[616364](454942 '.v' this[64415] c"stridable"))
    (555463 'move' tmp[555458](555461 call _cond_test call_tmp[616364]))
    if tmp[555458]
    {
      unknown tmp[555465] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616369] "expr temp" "maybe param" "maybe type" "temp"
      (616372 'move' call_tmp[616369](454945 '.v' this[64415] c"idxType"))
      (555467 'move' tmp[555465](454931 call chpl__idxTypeToIntIdxType call_tmp[616369]))
      (555472 'move' tmp[555457](555469 '_paramFoldLogical' tmp[555458] tmp[555465]))
    }
    {
      (555477 'move' tmp[555457](555474 '_paramFoldLogical' tmp[555458] nothing[7]))
    }
    (454936 'default init var' tmp[454926] tmp[555457])
    (454938 '.=' this[64415] c"_alignment" tmp[454926])
    (475290 'end of statement')
    unknown tmp[454948] "temp"
    unknown tmp[555484] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555485] "maybe param" "temp"
    unknown call_tmp[616374] "expr temp" "maybe param" "maybe type" "temp"
    (616377 'move' call_tmp[616374](454962 '.v' this[64415] c"stridable"))
    (555490 'move' tmp[555485](555488 call _cond_test call_tmp[616374]))
    if tmp[555485]
    {
      (555495 'move' tmp[555484](555492 '_paramFoldLogical' tmp[555485] bool[10]))
    }
    {
      (555500 'move' tmp[555484](555497 '_paramFoldLogical' tmp[555485] nothing[7]))
    }
    (454956 'default init var' tmp[454948] tmp[555484])
    (454958 '.=' this[64415] c"_aligned" tmp[454948])
    (475291 'end of statement')
    unknown call_tmp[616379] "expr temp" "maybe param" "maybe type" "temp"
    (616382 'move' call_tmp[616379](64515 call _cond_test stridable[64366]))
    if call_tmp[616379]
    {
      unknown call_tmp[616386] "expr temp" "maybe param" "maybe type" "temp"
      (616389 'move' call_tmp[616386](64484 call _stride _mt[243] this[64415]))
      (64488 call = call_tmp[616386] _stride[64395])
      (475292 'end of statement')
      unknown call_tmp[616393] "expr temp" "maybe param" "maybe type" "temp"
      (616396 'move' call_tmp[616393](64495 call _alignment _mt[243] this[64415]))
      unknown call_tmp[616398] "expr temp" "maybe param" "maybe type" "temp"
      (616401 'move' call_tmp[616398](64501 call chpl__idxToInt _alignment[64405]))
      (64502 call = call_tmp[616393] call_tmp[616398])
      (475293 'end of statement')
      unknown call_tmp[616405] "expr temp" "maybe param" "maybe type" "temp"
      (616408 'move' call_tmp[616405](64508 call _aligned _mt[243] this[64415]))
      (64512 call = call_tmp[616405] _aligned[64411])
    }
    unknown tmp[419251] "maybe param" "temp"
    (419262 'move' tmp[419251](64520 call ! stridable[64366]))
    unknown call_tmp[616410] "expr temp" "maybe param" "maybe type" "temp"
    (616413 'move' call_tmp[616410](419264 call _cond_invalid tmp[419251]))
    if call_tmp[616410]
    {
      (419267 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555507] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555508] "maybe param" "temp"
    unknown call_tmp[616415] "expr temp" "maybe param" "maybe type" "temp"
    (616418 'move' call_tmp[616415](419252 call isTrue tmp[419251]))
    (555513 'move' tmp[555508](555511 call _cond_test call_tmp[616415]))
    if tmp[555508]
    {
      unknown tmp[555515] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555517 'move' tmp[555515](419255 call isTrue 1))
      (555522 'move' tmp[555507](555519 '_paramFoldLogical' tmp[555508] tmp[555515]))
    }
    {
      (555527 'move' tmp[555507](555524 '_paramFoldLogical' tmp[555508] 0))
    }
    unknown call_tmp[616420] "expr temp" "maybe param" "maybe type" "temp"
    (616423 'move' call_tmp[616420](64533 call _cond_test tmp[555507]))
    if call_tmp[616420]
    {
      unknown call_tmp[616425] "expr temp" "maybe param" "maybe type" "temp"
      (616428 'move' call_tmp[616425](64528 call == _stride[64395] 1))
      (64531 call assert call_tmp[616425])
    }
    (509067 return _void[55])
  }
  function _isAnyNothing[64546](arg args[64543]:_any[178](?) ...) param : _unknown[51] "private"
  {
    unknown ret[509071] "RVV" "param" "temp"
    {
      unknown i[64576] "dead at end of block" "insert auto destroy"
      (541053 'init var' i[64576] 0)
      (475297 'end of statement')
      unknown tmp[64577] "maybe param" "temp"
      unknown call_tmp[616432] "expr temp" "maybe param" "maybe type" "temp"
      (616435 'move' call_tmp[616432](64551 call size _mt[243] args[64543]))
      unknown call_tmp[616437] "expr temp" "maybe param" "maybe type" "temp"
      (616440 'move' call_tmp[616437](64555 call - call_tmp[616432] 1))
      (64589 'move' tmp[64577](64587 call chpl_compute_low_param_loop_bound 0 call_tmp[616437]))
      unknown tmp[64578] "maybe param" "temp"
      unknown call_tmp[616444] "expr temp" "maybe param" "maybe type" "temp"
      (616447 'move' call_tmp[616444](64596 call size _mt[243] args[64543]))
      unknown call_tmp[616449] "expr temp" "maybe param" "maybe type" "temp"
      (616452 'move' call_tmp[616449](64594 call - call_tmp[616444] 1))
      (64602 'move' tmp[64578](64600 call chpl_compute_high_param_loop_bound 0 call_tmp[616449]))
      unknown tmp[64579] "maybe param" "temp"
      (64605 'move' tmp[64579] 1)
      ParamForLoop[64607]
      { i[64576] tmp[64577] tmp[64578] tmp[64579]
        {
          { scopeless type
            unknown call_type_tmp[491907] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[616454] "expr temp" "maybe param" "maybe type" "temp"
            (616457 'move' call_tmp[616454](64563 call args[64543] i[64576]))
            (491911 'move' call_type_tmp[491907](64564 'typeof' call_tmp[616454]))
          }
          unknown call_tmp[616459] "expr temp" "maybe param" "maybe type" "temp"
          (616462 'move' call_tmp[616459](64566 call isNothingType call_type_tmp[491907]))
          unknown call_tmp[616464] "expr temp" "maybe param" "maybe type" "temp"
          (616467 'move' call_tmp[616464](64570 call _cond_test call_tmp[616459]))
          if call_tmp[616464]
          {
            (509077 'move' ret[509071](509076 'coerce' 1 bool[10]))
            gotoReturn _end__isAnyNothing[509069] _end__isAnyNothing[509069]
          }
        }
      }
      label _unused_continueLabel[64581]
      label _breakLabel[64580]
    }
    (509083 'move' ret[509071](509082 'coerce' 0 bool[10]))
    label _end__isAnyNothing[509069]
    (509073 return ret[509071])
  }
  { scopeless type
    bool[10]
  }
  function range[64316](?).init[64630](arg _mt[64676]:_MT[238], ref arg this[64673]:range[64316](?) :
  range[64316](?), arg idxType[64627]:_any[178](?) =
  int(64)[13], param arg boundedType[64637]:BoundedRangeType[64213] =
  bounded[64205], param arg stridable[64643]:bool[10] =
  0, arg _low[64653] :
  idxType[64627] =
  (64652 call chpl__intToIdx idxType[64627] 1), arg _high[64663] :
  idxType[64627] =
  (64662 call chpl__intToIdx idxType[64627] 0), arg _stride[64667]:_any[178](?), arg _alignment[64669]:_any[178](?), arg _aligned[64671]:_any[178](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454965] "temp" "type variable"
    (454967 'move' tmp[454965] idxType[64627])
    (454969 'init field' this[64673] c"idxType" tmp[454965])
    unknown call_tmp[616469] "expr temp" "maybe param" "maybe type" "temp"
    (616472 'move' call_tmp[616469](454974 call _cast BoundedRangeType[64213] boundedType[64637]))
    (454976 'init field' this[64673] c"boundedType" call_tmp[616469])
    (475300 'end of statement')
    unknown call_tmp[616474] "expr temp" "maybe param" "maybe type" "temp"
    (616477 'move' call_tmp[616474](454980 call _cast bool[10] stridable[64643]))
    (454982 'init field' this[64673] c"stridable" call_tmp[616474])
    (475301 'end of statement')
    unknown call_tmp[616479] "maybe param" "maybe type" "temp"
    (616482 'move' call_tmp[616479](64716 call chpl__idxToInt _low[64653]))
    unknown call_tmp[616484] "expr temp" "maybe param" "maybe type" "temp"
    (616487 'move' call_tmp[616484](454996 '.v' this[64673] c"idxType"))
    unknown call_tmp[616489] "maybe param" "maybe type" "temp"
    (616492 'move' call_tmp[616489](454988 call chpl__idxTypeToIntIdxType call_tmp[616484]))
    unknown tmp[454985] "temp"
    (454990 'init var' tmp[454985] call_tmp[616479] call_tmp[616489])
    (454992 'init field' this[64673] c"_low" tmp[454985])
    (475302 'end of statement')
    unknown call_tmp[616494] "maybe param" "maybe type" "temp"
    (616497 'move' call_tmp[616494](64727 call chpl__idxToInt _high[64663]))
    unknown call_tmp[616499] "expr temp" "maybe param" "maybe type" "temp"
    (616502 'move' call_tmp[616499](455010 '.v' this[64673] c"idxType"))
    unknown call_tmp[616504] "maybe param" "maybe type" "temp"
    (616507 'move' call_tmp[616504](455002 call chpl__idxTypeToIntIdxType call_tmp[616499]))
    unknown tmp[454999] "temp"
    (455004 'init var' tmp[454999] call_tmp[616494] call_tmp[616504])
    (455006 'init field' this[64673] c"_high" tmp[454999])
    (475303 'end of statement')
    unknown tmp[455013] "temp"
    unknown tmp[555534] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555535] "maybe param" "temp"
    unknown call_tmp[616509] "expr temp" "maybe param" "maybe type" "temp"
    (616512 'move' call_tmp[616509](455029 '.v' this[64673] c"stridable"))
    (555540 'move' tmp[555535](555538 call _cond_test call_tmp[616509]))
    if tmp[555535]
    {
      unknown tmp[555542] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616514] "expr temp" "maybe param" "maybe type" "temp"
      (616517 'move' call_tmp[616514](455032 '.v' this[64673] c"idxType"))
      (555544 'move' tmp[555542](455018 call chpl__rangeStrideType call_tmp[616514]))
      (555549 'move' tmp[555534](555546 '_paramFoldLogical' tmp[555535] tmp[555542]))
    }
    {
      (555554 'move' tmp[555534](555551 '_paramFoldLogical' tmp[555535] nothing[7]))
    }
    (455023 'default init var' tmp[455013] tmp[555534])
    (455025 '.=' this[64673] c"_stride" tmp[455013])
    (475304 'end of statement')
    unknown tmp[455035] "temp"
    unknown tmp[555561] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555562] "maybe param" "temp"
    unknown call_tmp[616519] "expr temp" "maybe param" "maybe type" "temp"
    (616522 'move' call_tmp[616519](455051 '.v' this[64673] c"stridable"))
    (555567 'move' tmp[555562](555565 call _cond_test call_tmp[616519]))
    if tmp[555562]
    {
      unknown tmp[555569] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616524] "expr temp" "maybe param" "maybe type" "temp"
      (616527 'move' call_tmp[616524](455054 '.v' this[64673] c"idxType"))
      (555571 'move' tmp[555569](455040 call chpl__idxTypeToIntIdxType call_tmp[616524]))
      (555576 'move' tmp[555561](555573 '_paramFoldLogical' tmp[555562] tmp[555569]))
    }
    {
      (555581 'move' tmp[555561](555578 '_paramFoldLogical' tmp[555562] nothing[7]))
    }
    (455045 'default init var' tmp[455035] tmp[555561])
    (455047 '.=' this[64673] c"_alignment" tmp[455035])
    (475305 'end of statement')
    unknown tmp[455057] "temp"
    unknown tmp[555588] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555589] "maybe param" "temp"
    unknown call_tmp[616529] "expr temp" "maybe param" "maybe type" "temp"
    (616532 'move' call_tmp[616529](455071 '.v' this[64673] c"stridable"))
    (555594 'move' tmp[555589](555592 call _cond_test call_tmp[616529]))
    if tmp[555589]
    {
      (555599 'move' tmp[555588](555596 '_paramFoldLogical' tmp[555589] bool[10]))
    }
    {
      (555604 'move' tmp[555588](555601 '_paramFoldLogical' tmp[555589] nothing[7]))
    }
    (455065 'default init var' tmp[455057] tmp[555588])
    (455067 '.=' this[64673] c"_aligned" tmp[455057])
    (475306 'end of statement')
    unknown call_tmp[616534] "expr temp" "maybe param" "maybe type" "temp"
    (616537 'move' call_tmp[616534](64760 call _cond_test stridable[64643]))
    if call_tmp[616534]
    {
      (64758 call compilerError "non-stridable range initializer called with stridable=true")
    }
    (509085 return _void[55])
  }
  where {
    (64683 call _isAnyNothing _stride[64667] _alignment[64669] _aligned[64671])
  }
  function range[64316](?).init=[64783](arg _mt[64788]:_MT[238], ref arg this[64785]:range[64316](?) :
  range[64316](?), arg other[64780]:range[64316](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown call_tmp[616539] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616542 'move' call_tmp[616539](64791 'typeof' this[64785]))
    unknown call_tmp[616546] "expr temp" "maybe param" "maybe type" "temp"
    (616549 'move' call_tmp[616546](64792 call idxType _mt[243] call_tmp[616539]))
    unknown call_tmp[616551] "expr temp" "maybe param" "maybe type" "temp"
    (616554 'move' call_tmp[616551](64796 call == call_tmp[616546] ?[260]))
    unknown idxType[64807] "dead at end of block" "insert auto destroy" "type variable"(64804 IfExpr  call_tmp[616551] then
    { scopeless
      (455080 'query' other[64780] 1)
    } else
    { scopeless
      unknown call_tmp[616556] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616559 'move' call_tmp[616556](64800 'typeof' this[64785]))
      (64801 call idxType _mt[243] call_tmp[616556])
    } )
    unknown tmp[555611] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555612] "maybe param" "temp"
    unknown call_tmp[616563] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616566 'move' call_tmp[616563](541059 'typeof' this[64785]))
    unknown call_tmp[616570] "expr temp" "maybe param" "maybe type" "temp"
    (616573 'move' call_tmp[616570](541058 call idxType _mt[243] call_tmp[616563]))
    unknown call_tmp[616575] "expr temp" "maybe param" "maybe type" "temp"
    (616578 'move' call_tmp[616575](541056 call == call_tmp[616570] ?[260]))
    (555617 'move' tmp[555612](555615 call _cond_test call_tmp[616575]))
    if tmp[555612]
    {
      unknown tmp[555619] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555621 'move' tmp[555619](541064 'query' other[64780] 1))
      (555626 'move' tmp[555611](555623 '_paramFoldLogical' tmp[555612] tmp[555619]))
    }
    {
      unknown tmp[555628] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616580] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616583 'move' call_tmp[616580](541070 'typeof' this[64785]))
      (555630 'move' tmp[555628](541069 call idxType _mt[243] call_tmp[616580]))
      (555635 'move' tmp[555611](555632 '_paramFoldLogical' tmp[555612] tmp[555628]))
    }
    (541074 'move' idxType[64807] tmp[555611])
    unknown boundedType[64828] "dead at end of block" "param"
    unknown tmp[555642] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555643] "maybe param" "temp"
    unknown call_tmp[616587] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616590 'move' call_tmp[616587](64812 'typeof' this[64785]))
    unknown call_tmp[616594] "expr temp" "maybe param" "maybe type" "temp"
    (616597 'move' call_tmp[616594](64813 call boundedType _mt[243] call_tmp[616587]))
    unknown call_tmp[616599] "expr temp" "maybe param" "maybe type" "temp"
    (616602 'move' call_tmp[616599](64817 call == call_tmp[616594] ?[260]))
    (555648 'move' tmp[555643](555646 call _cond_test call_tmp[616599]))
    if tmp[555643]
    {
      unknown tmp[555650] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555652 'move' tmp[555650](455086 'query' other[64780] 2))
      (555657 'move' tmp[555642](555654 '_paramFoldLogical' tmp[555643] tmp[555650]))
    }
    {
      unknown tmp[555659] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616604] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616607 'move' call_tmp[616604](64821 'typeof' this[64785]))
      (555661 'move' tmp[555659](64822 call boundedType _mt[243] call_tmp[616604]))
      (555666 'move' tmp[555642](555663 '_paramFoldLogical' tmp[555643] tmp[555659]))
    }
    (541076 'init var' boundedType[64828] tmp[555642])
    (64831 'end of statement')
    unknown stridable[64849] "dead at end of block" "param"
    unknown tmp[555673] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555674] "maybe param" "temp"
    unknown call_tmp[616611] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616614 'move' call_tmp[616611](64833 'typeof' this[64785]))
    unknown call_tmp[616618] "expr temp" "maybe param" "maybe type" "temp"
    (616621 'move' call_tmp[616618](64834 call stridable _mt[243] call_tmp[616611]))
    unknown call_tmp[616623] "expr temp" "maybe param" "maybe type" "temp"
    (616626 'move' call_tmp[616623](64838 call == call_tmp[616618] ?[260]))
    (555679 'move' tmp[555674](555677 call _cond_test call_tmp[616623]))
    if tmp[555674]
    {
      unknown tmp[555681] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555683 'move' tmp[555681](455098 'query' other[64780] 3))
      (555688 'move' tmp[555673](555685 '_paramFoldLogical' tmp[555674] tmp[555681]))
    }
    {
      unknown tmp[555690] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616628] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616631 'move' call_tmp[616628](64842 'typeof' this[64785]))
      (555692 'move' tmp[555690](64843 call stridable _mt[243] call_tmp[616628]))
      (555697 'move' tmp[555673](555694 '_paramFoldLogical' tmp[555674] tmp[555690]))
    }
    (541078 'init var' stridable[64849] tmp[555673])
    (64852 'end of statement')
    unknown call_tmp[616635] "expr temp" "maybe param" "maybe type" "temp"
    (616638 'move' call_tmp[616635](455089 'query' other[64780] 2))
    unknown call_tmp[616640] "expr temp" "maybe param" "maybe type" "temp"
    (616643 'move' call_tmp[616640](64855 call != boundedType[64828] call_tmp[616635]))
    unknown call_tmp[616645] "expr temp" "maybe param" "maybe type" "temp"
    (616648 'move' call_tmp[616645](64917 call _cond_test call_tmp[616640]))
    if call_tmp[616645]
    {
      unknown call_tmp[616650] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616653 'move' call_tmp[616650](64876 'typeof' this[64785]))
      unknown call_tmp[616657] "expr temp" "maybe param" "maybe type" "temp"
      (616660 'move' call_tmp[616657](64877 call boundedType _mt[243] call_tmp[616650]))
      unknown call_tmp[616662] "expr temp" "maybe param" "maybe type" "temp"
      (616665 'move' call_tmp[616662](64881 call _cast string[26] call_tmp[616657]))
      unknown call_tmp[616667] "expr temp" "maybe param" "maybe type" "temp"
      (616670 'move' call_tmp[616667](64883 call + "range(boundedType=" call_tmp[616662]))
      unknown call_tmp[616672] "expr temp" "maybe param" "maybe type" "temp"
      (616675 'move' call_tmp[616672](64902 call + call_tmp[616667] ") cannot be initialized from range(boundedType="))
      unknown call_tmp[616677] "expr temp" "maybe param" "maybe type" "temp"
      (616680 'move' call_tmp[616677](455092 'query' other[64780] 2))
      unknown call_tmp[616682] "expr temp" "maybe param" "maybe type" "temp"
      (616685 'move' call_tmp[616682](64906 call _cast string[26] call_tmp[616677]))
      unknown call_tmp[616687] "expr temp" "maybe param" "maybe type" "temp"
      (616690 'move' call_tmp[616687](64908 call + call_tmp[616672] call_tmp[616682]))
      unknown call_tmp[616692] "expr temp" "maybe param" "maybe type" "temp"
      (616695 'move' call_tmp[616692](64911 call + call_tmp[616687] ")"))
      (64914 call compilerError call_tmp[616692])
    }
    unknown tmp[419272] "maybe param" "temp"
    (419283 'move' tmp[419272](64922 call ! stridable[64849]))
    unknown call_tmp[616697] "expr temp" "maybe param" "maybe type" "temp"
    (616700 'move' call_tmp[616697](419285 call _cond_invalid tmp[419272]))
    if call_tmp[616697]
    {
      (419288 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555704] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555705] "maybe param" "temp"
    unknown call_tmp[616702] "expr temp" "maybe param" "maybe type" "temp"
    (616705 'move' call_tmp[616702](419273 call isTrue tmp[419272]))
    (555710 'move' tmp[555705](555708 call _cond_test call_tmp[616702]))
    if tmp[555705]
    {
      unknown tmp[555712] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616707] "expr temp" "maybe param" "maybe type" "temp"
      (616710 'move' call_tmp[616707](455101 'query' other[64780] 3))
      (555714 'move' tmp[555712](419276 call isTrue call_tmp[616707]))
      (555719 'move' tmp[555704](555716 '_paramFoldLogical' tmp[555705] tmp[555712]))
    }
    {
      (555724 'move' tmp[555704](555721 '_paramFoldLogical' tmp[555705] 0))
    }
    unknown call_tmp[616712] "expr temp" "maybe param" "maybe type" "temp"
    (616715 'move' call_tmp[616712](64948 call _cond_test tmp[555704]))
    if call_tmp[616712]
    {
      (64946 call compilerError "cannot initialize a non-stridable range from a stridable range")
    }
    unknown tmp[419293] "maybe param" "temp"
    (419304 'move' tmp[419293] stridable[64849])
    unknown call_tmp[616717] "expr temp" "maybe param" "maybe type" "temp"
    (616720 'move' call_tmp[616717](419306 call _cond_invalid tmp[419293]))
    if call_tmp[616717]
    {
      (419309 call compilerError "cannot promote short-circuiting && operator")
    }
    const str[64971] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[555731] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555732] "maybe param" "temp"
    unknown call_tmp[616722] "expr temp" "maybe param" "maybe type" "temp"
    (616725 'move' call_tmp[616722](419294 call isTrue tmp[419293]))
    (555737 'move' tmp[555732](555735 call _cond_test call_tmp[616722]))
    if tmp[555732]
    {
      unknown tmp[555739] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616727] "expr temp" "maybe param" "maybe type" "temp"
      (616730 'move' call_tmp[616727](455104 'query' other[64780] 3))
      (555741 'move' tmp[555739](419297 call isTrue call_tmp[616727]))
      (555746 'move' tmp[555731](555743 '_paramFoldLogical' tmp[555732] tmp[555739]))
    }
    {
      (555751 'move' tmp[555731](555748 '_paramFoldLogical' tmp[555732] 0))
    }
    unknown tmp[555758] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555759] "maybe param" "temp"
    (555764 'move' tmp[555759](555762 call _cond_test tmp[555731]))
    if tmp[555759]
    {
      unknown tmp[555766] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555768 'move' tmp[555766](64958 call stride _mt[243] other[64780]))
      (555773 'move' tmp[555758](555770 '_paramFoldLogical' tmp[555759] tmp[555766]))
    }
    {
      unknown tmp[555775] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616734] "expr temp" "maybe param" "maybe type" "temp"
      (616737 'move' call_tmp[616734](64965 call chpl__rangeStrideType idxType[64807]))
      (555777 'move' tmp[555775](64966 call _cast call_tmp[616734] 1))
      (555782 'move' tmp[555758](555779 '_paramFoldLogical' tmp[555759] tmp[555775]))
    }
    (541080 'init var' str[64971] tmp[555758])
    (64974 'end of statement' idxType[64807])
    unknown call_tmp[616743] "expr temp" "maybe param" "maybe type" "temp"
    (616746 'move' call_tmp[616743](64987 call _low _mt[243] other[64780]))
    unknown call_tmp[616748] "expr temp" "maybe param" "maybe type" "temp"
    (616751 'move' call_tmp[616748](64990 call chpl__intToIdx idxType[64807] call_tmp[616743]))
    unknown call_tmp[616755] "expr temp" "maybe param" "maybe type" "temp"
    (616758 'move' call_tmp[616755](64995 call _high _mt[243] other[64780]))
    unknown call_tmp[616760] "expr temp" "maybe param" "maybe type" "temp"
    (616763 'move' call_tmp[616760](64998 call chpl__intToIdx idxType[64807] call_tmp[616755]))
    unknown call_tmp[616767] "expr temp" "maybe param" "maybe type" "temp"
    (616770 'move' call_tmp[616767](65007 call alignment _mt[243] other[64780]))
    unknown call_tmp[616772] "expr temp" "maybe param" "maybe type" "temp"
    (616775 'move' call_tmp[616772](65011 call chpl__idxToInt call_tmp[616767]))
    unknown call_tmp[616777] "expr temp" "maybe param" "maybe type" "temp"
    (616780 'move' call_tmp[616777](65012 call chpl__intToIdx idxType[64807] call_tmp[616772]))
    unknown call_tmp[616784] "expr temp" "maybe param" "maybe type" "temp"
    (616787 'move' call_tmp[616784](65016 call aligned _mt[243] other[64780]))
    (65019 call(64976 call (partial) init _mt[243] this[64785]) idxType[64807] boundedType[64828] stridable[64849] call_tmp[616748] call_tmp[616760] str[64971] call_tmp[616777] call_tmp[616784])
    (475313 'end of statement' idxType[64807] idxType[64807] idxType[64807] str[64971] idxType[64807])
    (509087 return _void[55])
  }
  function range[64316](?).displayRepresentation[65048](arg _mt[65053]:_MT[238], arg this[65050]:range[64316](?) :
  range[64316](?), arg msg[65044]:string[26] =
  "") : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown ret[509091] "RVV" "temp"
    unknown tmp[555789] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555790] "maybe param" "temp"
    unknown call_tmp[616791] "expr temp" "maybe param" "maybe type" "temp"
    (616794 'move' call_tmp[616791](373848 call aligned _mt[243] this[65050]))
    (555795 'move' tmp[555790](555793 call _cond_test call_tmp[616791]))
    if tmp[555790]
    {
      unknown tmp[555797] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616798] "expr temp" "maybe param" "maybe type" "temp"
      (616801 'move' call_tmp[616798](373852 call alignment _mt[243] this[65050]))
      (555799 'move' tmp[555797](65126 call _cast string[26] call_tmp[616798]))
      (555804 'move' tmp[555789](555801 '_paramFoldLogical' tmp[555790] tmp[555797]))
    }
    {
      (555809 'move' tmp[555789](555806 '_paramFoldLogical' tmp[555790] "\?"))
    }
    unknown call_tmp[616805] "expr temp" "maybe param" "maybe type" "temp"
    (616808 'move' call_tmp[616805](373822 call idxType _mt[243] this[65050]))
    unknown call_tmp[616810] "expr temp" "maybe param" "maybe type" "temp"
    (616813 'move' call_tmp[616810](65078 call _cast string[26] call_tmp[616805]))
    unknown call_tmp[616817] "expr temp" "maybe param" "maybe type" "temp"
    (616820 'move' call_tmp[616817](373827 call boundedType _mt[243] this[65050]))
    unknown call_tmp[616824] "expr temp" "maybe param" "maybe type" "temp"
    (616827 'move' call_tmp[616824](373832 call stridable _mt[243] this[65050]))
    unknown call_tmp[616831] "expr temp" "maybe param" "maybe type" "temp"
    (616834 'move' call_tmp[616831](373836 call low _mt[243] this[65050]))
    unknown call_tmp[616838] "expr temp" "maybe param" "maybe type" "temp"
    (616841 'move' call_tmp[616838](373840 call high _mt[243] this[65050]))
    unknown call_tmp[616845] "expr temp" "maybe param" "maybe type" "temp"
    (616848 'move' call_tmp[616845](373844 call stride _mt[243] this[65050]))
    (65149 call chpl_debug_writeln msg[65044] "(" call_tmp[616810] "," call_tmp[616817] "," call_tmp[616824] " : " call_tmp[616831] "," call_tmp[616838] "," call_tmp[616845] "," tmp[555789] ")")
    (509093 return ret[509091])
  }
  { scopeless type
    void[4]
  }
  function chpl_build_bounded_range[455195](arg low[455202] :
  (455199 call int(64)[13] 64), arg high[455208] :
  (455206 call int(64)[13] 64)) : _unknown[51]
  {
    unknown ret[509097] "RVV" "temp"
    unknown call_tmp[616850] "expr temp" "maybe param" "maybe type" "temp"
    (616853 'move' call_tmp[616850](455216 call int(64)[13] 64))
    unknown call_tmp[616855] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616858 'move' call_tmp[616855](747799 'new' range[64316](?) call_tmp[616850](_low = low[455202])(_high = high[455208])))
    (509102 'move' ret[509097](509101 'deref' call_tmp[616855]))
    (509099 return ret[509097])
  }
  function chpl_build_bounded_range[455166](arg low[455173] :
  (455170 call int(64)[13] 32), arg high[455179] :
  (455177 call int(64)[13] 32)) : _unknown[51]
  {
    unknown ret[509106] "RVV" "temp"
    unknown call_tmp[616860] "expr temp" "maybe param" "maybe type" "temp"
    (616863 'move' call_tmp[616860](455187 call int(64)[13] 32))
    unknown call_tmp[616865] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616868 'move' call_tmp[616865](747800 'new' range[64316](?) call_tmp[616860](_low = low[455173])(_high = high[455179])))
    (509111 'move' ret[509106](509110 'deref' call_tmp[616865]))
    (509108 return ret[509106])
  }
  function chpl_build_bounded_range[455137](arg low[455144] :
  (455141 call int(64)[13] 16), arg high[455150] :
  (455148 call int(64)[13] 16)) : _unknown[51]
  {
    unknown ret[509115] "RVV" "temp"
    unknown call_tmp[616870] "expr temp" "maybe param" "maybe type" "temp"
    (616873 'move' call_tmp[616870](455158 call int(64)[13] 16))
    unknown call_tmp[616875] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616878 'move' call_tmp[616875](747801 'new' range[64316](?) call_tmp[616870](_low = low[455144])(_high = high[455150])))
    (509120 'move' ret[509115](509119 'deref' call_tmp[616875]))
    (509117 return ret[509115])
  }
  function chpl_build_bounded_range[455108](arg low[455115] :
  (455112 call int(64)[13] 8), arg high[455121] :
  (455119 call int(64)[13] 8)) : _unknown[51]
  {
    unknown ret[509124] "RVV" "temp"
    unknown call_tmp[616880] "expr temp" "maybe param" "maybe type" "temp"
    (616883 'move' call_tmp[616880](455129 call int(64)[13] 8))
    unknown call_tmp[616885] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616888 'move' call_tmp[616885](747802 'new' range[64316](?) call_tmp[616880](_low = low[455115])(_high = high[455121])))
    (509129 'move' ret[509124](509128 'deref' call_tmp[616885]))
    (509126 return ret[509124])
  }
  function chpl_build_bounded_range[455311](arg low[455318] :
  (455315 call uint(64)[115] 64), arg high[455324] :
  (455322 call uint(64)[115] 64)) : _unknown[51]
  {
    unknown ret[509133] "RVV" "temp"
    unknown call_tmp[616890] "expr temp" "maybe param" "maybe type" "temp"
    (616893 'move' call_tmp[616890](455332 call uint(64)[115] 64))
    unknown call_tmp[616895] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616898 'move' call_tmp[616895](747803 'new' range[64316](?) call_tmp[616890](_low = low[455318])(_high = high[455324])))
    (509138 'move' ret[509133](509137 'deref' call_tmp[616895]))
    (509135 return ret[509133])
  }
  function chpl_build_bounded_range[455282](arg low[455289] :
  (455286 call uint(64)[115] 32), arg high[455295] :
  (455293 call uint(64)[115] 32)) : _unknown[51]
  {
    unknown ret[509142] "RVV" "temp"
    unknown call_tmp[616900] "expr temp" "maybe param" "maybe type" "temp"
    (616903 'move' call_tmp[616900](455303 call uint(64)[115] 32))
    unknown call_tmp[616905] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616908 'move' call_tmp[616905](747804 'new' range[64316](?) call_tmp[616900](_low = low[455289])(_high = high[455295])))
    (509147 'move' ret[509142](509146 'deref' call_tmp[616905]))
    (509144 return ret[509142])
  }
  function chpl_build_bounded_range[455253](arg low[455260] :
  (455257 call uint(64)[115] 16), arg high[455266] :
  (455264 call uint(64)[115] 16)) : _unknown[51]
  {
    unknown ret[509151] "RVV" "temp"
    unknown call_tmp[616910] "expr temp" "maybe param" "maybe type" "temp"
    (616913 'move' call_tmp[616910](455274 call uint(64)[115] 16))
    unknown call_tmp[616915] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616918 'move' call_tmp[616915](747805 'new' range[64316](?) call_tmp[616910](_low = low[455260])(_high = high[455266])))
    (509156 'move' ret[509151](509155 'deref' call_tmp[616915]))
    (509153 return ret[509151])
  }
  function chpl_build_bounded_range[455224](arg low[455231] :
  (455228 call uint(64)[115] 8), arg high[455237] :
  (455235 call uint(64)[115] 8)) : _unknown[51]
  {
    unknown ret[509160] "RVV" "temp"
    unknown call_tmp[616920] "expr temp" "maybe param" "maybe type" "temp"
    (616923 'move' call_tmp[616920](455245 call uint(64)[115] 8))
    unknown call_tmp[616925] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616928 'move' call_tmp[616925](747806 'new' range[64316](?) call_tmp[616920](_low = low[455231])(_high = high[455237])))
    (509165 'move' ret[509160](509164 'deref' call_tmp[616925]))
    (509162 return ret[509160])
  }
  function chpl_build_bounded_range[65233](arg low[65230]:enum[187](?), arg high[65236]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509169] "RVV" "temp"
    unknown call_tmp[616930] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616933 'move' call_tmp[616930](65240 'typeof' low[65230]))
    unknown call_tmp[616935] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616938 'move' call_tmp[616935](65242 'typeof' high[65236]))
    unknown call_tmp[616940] "expr temp" "maybe param" "maybe type" "temp"
    (616943 'move' call_tmp[616940](65243 call != call_tmp[616930] call_tmp[616935]))
    unknown call_tmp[616945] "expr temp" "maybe param" "maybe type" "temp"
    (616948 'move' call_tmp[616945](65266 call _cond_test call_tmp[616940]))
    if call_tmp[616945]
    {
      (65264 call compilerError "ranges of enums must use a single enum type")
    }
    unknown call_tmp[616950] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616953 'move' call_tmp[616950](65275 'typeof' low[65230]))
    unknown call_tmp[616955] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616958 'move' call_tmp[616955](747807 'new' range[64316](?) call_tmp[616950](_low = low[65230])(_high = high[65236])))
    (509174 'move' ret[509169](509173 'deref' call_tmp[616955]))
    (509171 return ret[509169])
  }
  function chpl_build_bounded_range[65292](arg low[65289]:bool[10], arg high[65295]:bool[10]) : _unknown[51]
  {
    unknown ret[509178] "RVV" "temp"
    unknown call_tmp[616960] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616963 'move' call_tmp[616960](747808 'new' range[64316](?) bool[10](_low = low[65289])(_high = high[65295])))
    (509183 'move' ret[509178](509182 'deref' call_tmp[616960]))
    (509180 return ret[509178])
  }
  function chpl_build_bounded_range[65316](arg low[65314]:_any[178](?), arg high[65318]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65339 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (509185 return _void[55])
  }
  function chpl_build_low_bounded_range[65350](arg low[65347]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509189] "RVV" "temp"
    unknown call_tmp[616965] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616968 'move' call_tmp[616965](65355 'typeof' low[65347]))
    unknown call_tmp[616970] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616973 'move' call_tmp[616970](747809 'new' range[64316](?) call_tmp[616965] boundedLow[64207](_low = low[65347])))
    (509194 'move' ret[509189](509193 'deref' call_tmp[616970]))
    (509191 return ret[509189])
  }
  function chpl_build_low_bounded_range[65375](arg low[65372]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509198] "RVV" "temp"
    unknown call_tmp[616975] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616978 'move' call_tmp[616975](65380 'typeof' low[65372]))
    unknown call_tmp[616980] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616983 'move' call_tmp[616980](747810 'new' range[64316](?) call_tmp[616975] boundedLow[64207](_low = low[65372])))
    (509203 'move' ret[509198](509202 'deref' call_tmp[616980]))
    (509200 return ret[509198])
  }
  function chpl_build_low_bounded_range[65400](arg low[65397]:bool[10]) : _unknown[51]
  {
    unknown ret[509207] "RVV" "temp"
    unknown call_tmp[616985] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616988 'move' call_tmp[616985](65405 'typeof' low[65397]))
    unknown call_tmp[616990] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616993 'move' call_tmp[616990](747811 'new' range[64316](?) call_tmp[616985] boundedLow[64207](_low = low[65397])))
    (509212 'move' ret[509207](509211 'deref' call_tmp[616990]))
    (509209 return ret[509207])
  }
  function chpl_build_low_bounded_range[65423](arg low[65421]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65444 call compilerError "Bound of 'low..' must be an integer")
    (509214 return _void[55])
  }
  function chpl_build_high_bounded_range[65455](arg high[65452]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509218] "RVV" "temp"
    unknown call_tmp[616995] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616998 'move' call_tmp[616995](65460 'typeof' high[65452]))
    unknown call_tmp[617000] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617003 'move' call_tmp[617000](747812 'new' range[64316](?) call_tmp[616995] boundedHigh[64209](_high = high[65452])))
    (509223 'move' ret[509218](509222 'deref' call_tmp[617000]))
    (509220 return ret[509218])
  }
  function chpl_build_high_bounded_range[65480](arg high[65477]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509227] "RVV" "temp"
    unknown call_tmp[617005] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617008 'move' call_tmp[617005](65485 'typeof' high[65477]))
    unknown call_tmp[617010] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617013 'move' call_tmp[617010](747813 'new' range[64316](?) call_tmp[617005] boundedHigh[64209](_high = high[65477])))
    (509232 'move' ret[509227](509231 'deref' call_tmp[617010]))
    (509229 return ret[509227])
  }
  function chpl_build_high_bounded_range[65505](arg high[65502]:bool[10]) : _unknown[51]
  {
    unknown ret[509236] "RVV" "temp"
    unknown call_tmp[617015] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617018 'move' call_tmp[617015](65510 'typeof' high[65502]))
    unknown call_tmp[617020] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617023 'move' call_tmp[617020](747814 'new' range[64316](?) call_tmp[617015] boundedHigh[64209](_high = high[65502])))
    (509241 'move' ret[509236](509240 'deref' call_tmp[617020]))
    (509238 return ret[509236])
  }
  function chpl_build_high_bounded_range[65528](arg high[65526]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65549 call compilerError "Bound of '..high' must be an integer.")
    (509243 return _void[55])
  }
  function chpl_build_unbounded_range[65556]() : _unknown[51]
  {
    unknown ret[509247] "RVV" "temp"
    unknown call_tmp[617025] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617028 'move' call_tmp[617025](747815 'new' range[64316](?) int(64)[13] boundedNone[64211]))
    (509252 'move' ret[509247](509251 'deref' call_tmp[617025]))
    (509249 return ret[509247])
  }
  function chpl_compute_low_param_loop_bound[455400](param arg low[455407] :
  (455404 call int(64)[13] 64), param arg high[455413] :
  (455411 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509256] "RVV" "param" "temp"
    (509261 'move' ret[509256](509260 'deref' low[455407]))
    (509258 return ret[509256])
  }
  function chpl_compute_low_param_loop_bound[455380](param arg low[455387] :
  (455384 call int(64)[13] 32), param arg high[455393] :
  (455391 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509265] "RVV" "param" "temp"
    (509270 'move' ret[509265](509269 'deref' low[455387]))
    (509267 return ret[509265])
  }
  function chpl_compute_low_param_loop_bound[455360](param arg low[455367] :
  (455364 call int(64)[13] 16), param arg high[455373] :
  (455371 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509274] "RVV" "param" "temp"
    (509279 'move' ret[509274](509278 'deref' low[455367]))
    (509276 return ret[509274])
  }
  function chpl_compute_low_param_loop_bound[455340](param arg low[455347] :
  (455344 call int(64)[13] 8), param arg high[455353] :
  (455351 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509283] "RVV" "param" "temp"
    (509288 'move' ret[509283](509287 'deref' low[455347]))
    (509285 return ret[509283])
  }
  function chpl_compute_high_param_loop_bound[455480](param arg low[455487] :
  (455484 call int(64)[13] 64), param arg high[455493] :
  (455491 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509292] "RVV" "param" "temp"
    (509297 'move' ret[509292](509296 'deref' high[455493]))
    (509294 return ret[509292])
  }
  function chpl_compute_high_param_loop_bound[455460](param arg low[455467] :
  (455464 call int(64)[13] 32), param arg high[455473] :
  (455471 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509301] "RVV" "param" "temp"
    (509306 'move' ret[509301](509305 'deref' high[455473]))
    (509303 return ret[509301])
  }
  function chpl_compute_high_param_loop_bound[455440](param arg low[455447] :
  (455444 call int(64)[13] 16), param arg high[455453] :
  (455451 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509310] "RVV" "param" "temp"
    (509315 'move' ret[509310](509314 'deref' high[455453]))
    (509312 return ret[509310])
  }
  function chpl_compute_high_param_loop_bound[455420](param arg low[455427] :
  (455424 call int(64)[13] 8), param arg high[455433] :
  (455431 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509319] "RVV" "param" "temp"
    (509324 'move' ret[509319](509323 'deref' high[455433]))
    (509321 return ret[509319])
  }
  function chpl_compute_low_param_loop_bound[455560](param arg low[455567] :
  (455564 call uint(64)[115] 64), param arg high[455573] :
  (455571 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509328] "RVV" "param" "temp"
    (509333 'move' ret[509328](509332 'deref' low[455567]))
    (509330 return ret[509328])
  }
  function chpl_compute_low_param_loop_bound[455540](param arg low[455547] :
  (455544 call uint(64)[115] 32), param arg high[455553] :
  (455551 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509337] "RVV" "param" "temp"
    (509342 'move' ret[509337](509341 'deref' low[455547]))
    (509339 return ret[509337])
  }
  function chpl_compute_low_param_loop_bound[455520](param arg low[455527] :
  (455524 call uint(64)[115] 16), param arg high[455533] :
  (455531 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509346] "RVV" "param" "temp"
    (509351 'move' ret[509346](509350 'deref' low[455527]))
    (509348 return ret[509346])
  }
  function chpl_compute_low_param_loop_bound[455500](param arg low[455507] :
  (455504 call uint(64)[115] 8), param arg high[455513] :
  (455511 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509355] "RVV" "param" "temp"
    (509360 'move' ret[509355](509359 'deref' low[455507]))
    (509357 return ret[509355])
  }
  function chpl_compute_high_param_loop_bound[455640](param arg low[455647] :
  (455644 call uint(64)[115] 64), param arg high[455653] :
  (455651 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509364] "RVV" "param" "temp"
    (509369 'move' ret[509364](509368 'deref' high[455653]))
    (509366 return ret[509364])
  }
  function chpl_compute_high_param_loop_bound[455620](param arg low[455627] :
  (455624 call uint(64)[115] 32), param arg high[455633] :
  (455631 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509373] "RVV" "param" "temp"
    (509378 'move' ret[509373](509377 'deref' high[455633]))
    (509375 return ret[509373])
  }
  function chpl_compute_high_param_loop_bound[455600](param arg low[455607] :
  (455604 call uint(64)[115] 16), param arg high[455613] :
  (455611 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509382] "RVV" "param" "temp"
    (509387 'move' ret[509382](509386 'deref' high[455613]))
    (509384 return ret[509382])
  }
  function chpl_compute_high_param_loop_bound[455580](param arg low[455587] :
  (455584 call uint(64)[115] 8), param arg high[455593] :
  (455591 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509391] "RVV" "param" "temp"
    (509396 'move' ret[509391](509395 'deref' high[455593]))
    (509393 return ret[509391])
  }
  function chpl_compute_low_param_loop_bound[65680](param arg low[65677]:bool[10], param arg high[65683]:bool[10]) param : _unknown[51]
  {
    unknown ret[509400] "RVV" "param" "temp"
    (509405 'move' ret[509400](509404 'deref' low[65677]))
    (509402 return ret[509400])
  }
  function chpl_compute_high_param_loop_bound[65698](param arg low[65695]:bool[10], param arg high[65701]:bool[10]) param : _unknown[51]
  {
    unknown ret[509409] "RVV" "param" "temp"
    (509414 'move' ret[509409](509413 'deref' high[65701]))
    (509411 return ret[509409])
  }
  function chpl_compute_low_param_loop_bound[65714](param arg low[65712]:_any[178](?), param arg high[65716]:_any[178](?)) param : _unknown[51] "last resort" "no return value for void"
  {
    (65739 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509416 return _void[55])
  }
  function chpl_compute_low_param_loop_bound[65748](arg low[65746]:_any[178](?), arg high[65750]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65771 call compilerError "param for-loops must be defined over a bounded param range")
    (509418 return _void[55])
  }
  function chpl_compute_count_param_loop[65782](param arg count[65779]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509422] "RVV" "param" "temp"
    (509427 'move' ret[509422](509426 'deref' count[65779]))
    (509424 return ret[509422])
  }
  function chpl_compute_count_param_loop[65794](arg count[65792]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65817 call compilerError "in a param for-loop, the count operator requires a param integral value")
    (509429 return _void[55])
  }
  function chpl_low_bound_count_for_param_loop[65828](param arg high[65825]:integral[199](?), param arg count[65831]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509433] "RVV" "param" "temp"
    unknown call_tmp[617030] "expr temp" "maybe param" "maybe type" "temp"
    (617033 'move' call_tmp[617030](65836 call > count[65831] 0))
    unknown call_tmp[617035] "expr temp" "maybe param" "maybe type" "temp"
    (617038 'move' call_tmp[617035](65885 call _cond_test call_tmp[617030]))
    if call_tmp[617035]
    {
      (65857 call compilerError "count operators with positive count require the range to have a low bound")
    }
    {
      unknown call_tmp[617040] "expr temp" "maybe param" "maybe type" "temp"
      (617043 'move' call_tmp[617040](65862 call == count[65831] 0))
      unknown call_tmp[617045] "expr temp" "maybe param" "maybe type" "temp"
      (617048 'move' call_tmp[617045](65881 call _cond_test call_tmp[617040]))
      if call_tmp[617045]
      {
        unknown call_tmp[617050] "expr temp" "maybe param" "maybe type" "temp"
        (617053 'move' call_tmp[617050](65866 call + high[65825] 1))
        (509438 'move' ret[509433](509437 'deref' call_tmp[617050]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509431] _end_chpl_low_bound_count_for_param_loop[509431]
      }
      {
        unknown call_tmp[617055] "expr temp" "maybe param" "maybe type" "temp"
        (617058 'move' call_tmp[617055](65873 call + high[65825] count[65831]))
        unknown call_tmp[617060] "expr temp" "maybe param" "maybe type" "temp"
        (617063 'move' call_tmp[617060](65876 call + call_tmp[617055] 1))
        (509443 'move' ret[509433](509442 'deref' call_tmp[617060]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509431] _end_chpl_low_bound_count_for_param_loop[509431]
      }
    }
    label _end_chpl_low_bound_count_for_param_loop[509431]
    (509435 return ret[509433])
  }
  function chpl_low_bound_count_for_param_loop[65897](arg high[65895]:_any[178](?), arg count[65899]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65904 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509447 return _void[55])
  }
  function chpl_high_bound_count_for_param_loop[65915](param arg low[65912]:integral[199](?), param arg count[65918]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509451] "RVV" "param" "temp"
    unknown call_tmp[617065] "expr temp" "maybe param" "maybe type" "temp"
    (617068 'move' call_tmp[617065](65923 call < count[65918] 0))
    unknown call_tmp[617070] "expr temp" "maybe param" "maybe type" "temp"
    (617073 'move' call_tmp[617070](65974 call _cond_test call_tmp[617065]))
    if call_tmp[617070]
    {
      (65946 call compilerError "count operators with negative count require the range to have a high bound")
    }
    {
      unknown call_tmp[617075] "expr temp" "maybe param" "maybe type" "temp"
      (617078 'move' call_tmp[617075](65951 call == count[65918] 0))
      unknown call_tmp[617080] "expr temp" "maybe param" "maybe type" "temp"
      (617083 'move' call_tmp[617080](65970 call _cond_test call_tmp[617075]))
      if call_tmp[617080]
      {
        unknown call_tmp[617085] "expr temp" "maybe param" "maybe type" "temp"
        (617088 'move' call_tmp[617085](65955 call - low[65912] 1))
        (509456 'move' ret[509451](509455 'deref' call_tmp[617085]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509449] _end_chpl_high_bound_count_for_param_loop[509449]
      }
      {
        unknown call_tmp[617090] "expr temp" "maybe param" "maybe type" "temp"
        (617093 'move' call_tmp[617090](65962 call + low[65912] count[65918]))
        unknown call_tmp[617095] "expr temp" "maybe param" "maybe type" "temp"
        (617098 'move' call_tmp[617095](65965 call - call_tmp[617090] 1))
        (509461 'move' ret[509451](509460 'deref' call_tmp[617095]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509449] _end_chpl_high_bound_count_for_param_loop[509449]
      }
    }
    label _end_chpl_high_bound_count_for_param_loop[509449]
    (509453 return ret[509451])
  }
  function chpl_high_bound_count_for_param_loop[65986](arg low[65984]:_any[178](?), arg count[65988]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65993 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509465 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_low[66004](param arg low[66001]:integral[199](?), param arg high[66007]:integral[199](?), param arg count[66011]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509469] "RVV" "param" "temp"
    unknown abs_count[66025] "dead at end of block" "param"
    unknown tmp[555816] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555817] "maybe param" "temp"
    unknown call_tmp[617100] "expr temp" "maybe param" "maybe type" "temp"
    (617103 'move' call_tmp[617100](66016 call < count[66011] 0))
    (555822 'move' tmp[555817](555820 call _cond_test call_tmp[617100]))
    if tmp[555817]
    {
      unknown tmp[555824] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555826 'move' tmp[555824](66019 call - count[66011]))
      (555831 'move' tmp[555816](555828 '_paramFoldLogical' tmp[555817] tmp[555824]))
    }
    {
      (555836 'move' tmp[555816](555833 '_paramFoldLogical' tmp[555817] count[66011]))
    }
    (541082 'init var' abs_count[66025] tmp[555816])
    (66028 'end of statement')
    unknown call_tmp[617105] "expr temp" "maybe param" "maybe type" "temp"
    (617108 'move' call_tmp[617105](66032 call - high[66007] low[66001]))
    unknown call_tmp[617110] "maybe param" "maybe type" "temp"
    (617113 'move' call_tmp[617110](66035 call + call_tmp[617105] 1))
    unknown size[66037] "dead at end of block" "param"
    (541084 'init var' size[66037] call_tmp[617110])
    (66040 'end of statement')
    unknown call_tmp[617115] "expr temp" "maybe param" "maybe type" "temp"
    (617118 'move' call_tmp[617115](66043 call < size[66037] abs_count[66025]))
    unknown call_tmp[617120] "expr temp" "maybe param" "maybe type" "temp"
    (617123 'move' call_tmp[617120](66130 call _cond_test call_tmp[617115]))
    if call_tmp[617120]
    {
      unknown call_tmp[617125] "expr temp" "maybe param" "maybe type" "temp"
      (617128 'move' call_tmp[617125](66066 call _cast string[26] abs_count[66025]))
      unknown call_tmp[617130] "expr temp" "maybe param" "maybe type" "temp"
      (617133 'move' call_tmp[617130](66087 call _cast string[26] size[66037]))
      (66089 call compilerError "Count of " call_tmp[617125] " is too small for range of size " call_tmp[617130])
    }
    {
      unknown call_tmp[617135] "expr temp" "maybe param" "maybe type" "temp"
      (617138 'move' call_tmp[617135](66094 call == count[66011] 0))
      unknown call_tmp[617140] "expr temp" "maybe param" "maybe type" "temp"
      (617143 'move' call_tmp[617140](66125 call _cond_test call_tmp[617135]))
      if call_tmp[617140]
      {
        unknown call_tmp[617145] "expr temp" "maybe param" "maybe type" "temp"
        (617148 'move' call_tmp[617145](66098 call + high[66007] 1))
        (509474 'move' ret[509469](509473 'deref' call_tmp[617145]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_low[509467] _end_chpl_bounded_count_for_param_loop_low[509467]
      }
      {
        unknown call_tmp[617150] "expr temp" "maybe param" "maybe type" "temp"
        (617153 'move' call_tmp[617150](66105 call < count[66011] 0))
        unknown call_tmp[617155] "expr temp" "maybe param" "maybe type" "temp"
        (617158 'move' call_tmp[617155](66121 call _cond_test call_tmp[617150]))
        if call_tmp[617155]
        {
          unknown call_tmp[617160] "expr temp" "maybe param" "maybe type" "temp"
          (617163 'move' call_tmp[617160](66109 call + high[66007] count[66011]))
          unknown call_tmp[617165] "expr temp" "maybe param" "maybe type" "temp"
          (617168 'move' call_tmp[617165](66112 call + call_tmp[617160] 1))
          (509479 'move' ret[509469](509478 'deref' call_tmp[617165]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509467] _end_chpl_bounded_count_for_param_loop_low[509467]
        }
        {
          (509484 'move' ret[509469](509483 'deref' low[66001]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509467] _end_chpl_bounded_count_for_param_loop_low[509467]
        }
      }
    }
    label _end_chpl_bounded_count_for_param_loop_low[509467]
    (509471 return ret[509469])
  }
  function chpl_bounded_count_for_param_loop_low[66141](arg low[66139]:_any[178](?), arg high[66143]:_any[178](?), arg count[66145]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66168 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509488 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_high[66179](param arg low[66176]:integral[199](?), param arg high[66182]:integral[199](?), param arg count[66186]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509492] "RVV" "param" "temp"
    unknown call_tmp[617170] "expr temp" "maybe param" "maybe type" "temp"
    (617173 'move' call_tmp[617170](66191 call == count[66186] 0))
    unknown call_tmp[617175] "expr temp" "maybe param" "maybe type" "temp"
    (617178 'move' call_tmp[617175](66222 call _cond_test call_tmp[617170]))
    if call_tmp[617175]
    {
      unknown call_tmp[617180] "expr temp" "maybe param" "maybe type" "temp"
      (617183 'move' call_tmp[617180](66195 call - low[66176] 1))
      (509497 'move' ret[509492](509496 'deref' call_tmp[617180]))
      gotoReturn _end_chpl_bounded_count_for_param_loop_high[509490] _end_chpl_bounded_count_for_param_loop_high[509490]
    }
    {
      unknown call_tmp[617185] "expr temp" "maybe param" "maybe type" "temp"
      (617188 'move' call_tmp[617185](66202 call < count[66186] 0))
      unknown call_tmp[617190] "expr temp" "maybe param" "maybe type" "temp"
      (617193 'move' call_tmp[617190](66218 call _cond_test call_tmp[617185]))
      if call_tmp[617190]
      {
        (509502 'move' ret[509492](509501 'deref' high[66182]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509490] _end_chpl_bounded_count_for_param_loop_high[509490]
      }
      {
        unknown call_tmp[617195] "expr temp" "maybe param" "maybe type" "temp"
        (617198 'move' call_tmp[617195](66210 call + low[66176] count[66186]))
        unknown call_tmp[617200] "expr temp" "maybe param" "maybe type" "temp"
        (617203 'move' call_tmp[617200](66213 call - call_tmp[617195] 1))
        (509507 'move' ret[509492](509506 'deref' call_tmp[617200]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509490] _end_chpl_bounded_count_for_param_loop_high[509490]
      }
    }
    label _end_chpl_bounded_count_for_param_loop_high[509490]
    (509494 return ret[509492])
  }
  function chpl_bounded_count_for_param_loop_high[66234](arg low[66232]:_any[178](?), arg high[66236]:_any[178](?), arg count[66238]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66243 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509511 return _void[55])
  }
  function isRangeType[66252](arg t[66250]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[509533] "RVV" "param" "temp"
    function isRangeHelp[66263](arg t[66260]:range[64316](?)) param : _unknown[51]
    {
      unknown ret[509515] "RVV" "param" "temp"
      (509520 'move' ret[509515](509519 'deref' 1))
      (509517 return ret[509515])
    }
    function isRangeHelp[66276](arg t[66274]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[509524] "RVV" "param" "temp"
      (509529 'move' ret[509524](509528 'deref' 0))
      (509526 return ret[509524])
    }
    unknown call_tmp[617205] "expr temp" "maybe param" "maybe type" "temp"
    (617208 'move' call_tmp[617205](66287 call isRangeHelp t[66250]))
    (509538 'move' ret[509533](509537 'deref' call_tmp[617205]))
    (509535 return ret[509533])
  }
  function isRangeValue[66301](arg r[66298]:range[64316](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509542] "RVV" "param" "temp"
    (509547 'move' ret[509542](509546 'deref' 1))
    (509544 return ret[509542])
  }
  function isRangeValue[66313](arg r[66311]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509551] "RVV" "param" "temp"
    (509556 'move' ret[509551](509555 'deref' 0))
    (509553 return ret[509551])
  }
  function isBoundedRange[66325](arg r[66323]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509560] "RVV" "param" "temp"
    (509565 'move' ret[509560](509564 'deref' 0))
    (509562 return ret[509560])
  }
  function isBoundedRange[66342](arg r[66339]:range[64316](?)) param : _unknown[51]
  {
    unknown ret[509569] "RVV" "param" "temp"
    unknown call_tmp[617212] "expr temp" "maybe param" "maybe type" "temp"
    (617215 'move' call_tmp[617212](66346 call boundedType _mt[243] r[66339]))
    unknown call_tmp[617217] "expr temp" "maybe param" "maybe type" "temp"
    (617220 'move' call_tmp[617217](66350 call isBoundedRange call_tmp[617212]))
    (509574 'move' ret[509569](509573 'deref' call_tmp[617217]))
    (509571 return ret[509569])
  }
  function isBoundedRange[66362](param arg B[66359]:BoundedRangeType[64213]) param : _unknown[51] "no doc"
  {
    unknown ret[509578] "RVV" "param" "temp"
    unknown call_tmp[617222] "expr temp" "maybe param" "maybe type" "temp"
    (617225 'move' call_tmp[617222](66369 call == B[66359] bounded[64205]))
    (509583 'move' ret[509578](509582 'deref' call_tmp[617222]))
    (509580 return ret[509578])
  }
  function range[64316](?).isBounded[66379](arg _mt[66384]:_MT[238], arg this[66381]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509587] "RVV" "param" "temp"
    unknown call_tmp[617229] "expr temp" "maybe param" "maybe type" "temp"
    (617232 'move' call_tmp[617229](373956 call boundedType _mt[243] this[66381]))
    unknown call_tmp[617234] "expr temp" "maybe param" "maybe type" "temp"
    (617237 'move' call_tmp[617234](66391 call == call_tmp[617229] bounded[64205]))
    (509592 'move' ret[509587](509591 'deref' call_tmp[617234]))
    (509589 return ret[509587])
  }
  function range[64316](?).hasLowBound[66401](arg _mt[66406]:_MT[238], arg this[66403]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509596] "RVV" "param" "temp"
    unknown tmp[419314] "maybe param" "temp"
    unknown call_tmp[617241] "expr temp" "maybe param" "maybe type" "temp"
    (617244 'move' call_tmp[617241](373961 call boundedType _mt[243] this[66403]))
    (419325 'move' tmp[419314](66413 call == call_tmp[617241] bounded[64205]))
    unknown call_tmp[617246] "expr temp" "maybe param" "maybe type" "temp"
    (617249 'move' call_tmp[617246](419327 call _cond_invalid tmp[419314]))
    if call_tmp[617246]
    {
      (419330 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555843] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555844] "maybe param" "temp"
    unknown call_tmp[617251] "expr temp" "maybe param" "maybe type" "temp"
    (617254 'move' call_tmp[617251](419315 call isTrue tmp[419314]))
    (555849 'move' tmp[555844](555847 call _cond_test call_tmp[617251]))
    if tmp[555844]
    {
      (555854 'move' tmp[555843](555851 '_paramFoldLogical' tmp[555844] 1))
    }
    {
      unknown tmp[555856] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617258] "expr temp" "maybe param" "maybe type" "temp"
      (617261 'move' call_tmp[617258](373966 call boundedType _mt[243] this[66403]))
      unknown call_tmp[617263] "expr temp" "maybe param" "maybe type" "temp"
      (617266 'move' call_tmp[617263](66420 call == call_tmp[617258] boundedLow[64207]))
      (555858 'move' tmp[555856](419319 call isTrue call_tmp[617263]))
      (555863 'move' tmp[555843](555860 '_paramFoldLogical' tmp[555844] tmp[555856]))
    }
    (509601 'move' ret[509596](509600 'deref' tmp[555843]))
    (509598 return ret[509596])
  }
  function range[64316](?).hasHighBound[66432](arg _mt[66437]:_MT[238], arg this[66434]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509605] "RVV" "param" "temp"
    unknown tmp[419335] "maybe param" "temp"
    unknown call_tmp[617270] "expr temp" "maybe param" "maybe type" "temp"
    (617273 'move' call_tmp[617270](373971 call boundedType _mt[243] this[66434]))
    (419346 'move' tmp[419335](66444 call == call_tmp[617270] bounded[64205]))
    unknown call_tmp[617275] "expr temp" "maybe param" "maybe type" "temp"
    (617278 'move' call_tmp[617275](419348 call _cond_invalid tmp[419335]))
    if call_tmp[617275]
    {
      (419351 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555870] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555871] "maybe param" "temp"
    unknown call_tmp[617280] "expr temp" "maybe param" "maybe type" "temp"
    (617283 'move' call_tmp[617280](419336 call isTrue tmp[419335]))
    (555876 'move' tmp[555871](555874 call _cond_test call_tmp[617280]))
    if tmp[555871]
    {
      (555881 'move' tmp[555870](555878 '_paramFoldLogical' tmp[555871] 1))
    }
    {
      unknown tmp[555883] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617287] "expr temp" "maybe param" "maybe type" "temp"
      (617290 'move' call_tmp[617287](373976 call boundedType _mt[243] this[66434]))
      unknown call_tmp[617292] "expr temp" "maybe param" "maybe type" "temp"
      (617295 'move' call_tmp[617292](66451 call == call_tmp[617287] boundedHigh[64209]))
      (555885 'move' tmp[555883](419340 call isTrue call_tmp[617292]))
      (555890 'move' tmp[555870](555887 '_paramFoldLogical' tmp[555871] tmp[555883]))
    }
    (509610 'move' ret[509605](509609 'deref' tmp[555870]))
    (509607 return ret[509605])
  }
  function range[64316](?).stride[66463](arg _mt[66468]:_MT[238], arg this[66465]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509614] "RVV" "temp"
    unknown call_tmp[617299] "expr temp" "maybe param" "maybe type" "temp"
    (617302 'move' call_tmp[617299](373986 call _stride _mt[243] this[66465]))
    (509619 'move' ret[509614](509618 'deref' call_tmp[617299]))
    (509616 return ret[509614])
  }
  where {
    (373981 call stridable _mt[243] this[66465])
  }
  function range[64316](?).stride[66481](arg _mt[66486]:_MT[238], arg this[66483]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509623] "RVV" "param" "temp"
    unknown call_tmp[617308] "expr temp" "maybe param" "maybe type" "temp"
    (617311 'move' call_tmp[617308](373995 call strType _mt[243] this[66483]))
    unknown call_tmp[617313] "expr temp" "maybe param" "maybe type" "temp"
    (617316 'move' call_tmp[617313](66493 call _cast call_tmp[617308] 1))
    (509628 'move' ret[509623](509627 'deref' call_tmp[617313]))
    (509625 return ret[509623])
  }
  where {
    unknown call_tmp[617320] "expr temp" "maybe param" "maybe type" "temp"
    (617323 'move' call_tmp[617320](373991 call stridable _mt[243] this[66483]))
    (66489 call ! call_tmp[617320])
  }
  function range[64316](?).alignment[66504](arg _mt[66509]:_MT[238], arg this[66506]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509632] "RVV" "temp"
    unknown call_tmp[617329] "expr temp" "maybe param" "maybe type" "temp"
    (617332 'move' call_tmp[617329](374009 call _alignment _mt[243] this[66506]))
    unknown call_tmp[617334] "expr temp" "maybe param" "maybe type" "temp"
    (617337 'move' call_tmp[617334](66515 call(374004 call (partial) chpl_intToIdx _mt[243] this[66506]) call_tmp[617329]))
    (509637 'move' ret[509632](509636 'deref' call_tmp[617334]))
    (509634 return ret[509632])
  }
  where {
    (374000 call stridable _mt[243] this[66506])
  }
  function range[64316](?).alignment[66525](arg _mt[66530]:_MT[238], arg this[66527]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509641] "RVV" "temp"
    unknown call_tmp[617343] "expr temp" "maybe param" "maybe type" "temp"
    (617346 'move' call_tmp[617343](374022 call low _mt[243] this[66527]))
    (509646 'move' ret[509641](509645 'deref' call_tmp[617343]))
    (509643 return ret[509641])
  }
  where {
    unknown tmp[419356] "maybe param" "temp"
    unknown call_tmp[617350] "expr temp" "maybe param" "maybe type" "temp"
    (617353 'move' call_tmp[617350](374014 call stridable _mt[243] this[66527]))
    (419367 'move' tmp[419356](66533 call ! call_tmp[617350]))
    unknown call_tmp[617355] "expr temp" "maybe param" "maybe type" "temp"
    (617358 'move' call_tmp[617355](419369 call _cond_invalid tmp[419356]))
    if call_tmp[617355]
    {
      (419372 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555897] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555898] "maybe param" "temp"
    unknown call_tmp[617360] "expr temp" "maybe param" "maybe type" "temp"
    (617363 'move' call_tmp[617360](419357 call isTrue tmp[419356]))
    (555903 'move' tmp[555898](555901 call _cond_test call_tmp[617360]))
    if tmp[555898]
    {
      unknown tmp[555905] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617367] "expr temp" "maybe param" "maybe type" "temp"
      (617370 'move' call_tmp[617367](66537 call(374018 call (partial) hasLowBound _mt[243] this[66527])))
      (555907 'move' tmp[555905](419360 call isTrue call_tmp[617367]))
      (555912 'move' tmp[555897](555909 '_paramFoldLogical' tmp[555898] tmp[555905]))
    }
    {
      (555917 'move' tmp[555897](555914 '_paramFoldLogical' tmp[555898] 0))
    }
    (748263 call chpl_statementLevelSymbol tmp[555897])
  }
  function range[64316](?).alignment[66550](arg _mt[66555]:_MT[238], arg this[66552]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509650] "RVV" "temp"
    unknown call_tmp[617374] "expr temp" "maybe param" "maybe type" "temp"
    (617377 'move' call_tmp[617374](66560 call(374026 call (partial) chpl_intToIdx _mt[243] this[66552]) 0))
    (509655 'move' ret[509650](509654 'deref' call_tmp[617374]))
    (509652 return ret[509650])
  }
  function range[64316](?).aligned[66569](arg _mt[66574]:_MT[238], arg this[66571]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509659] "RVV" "temp"
    unknown call_tmp[617381] "expr temp" "maybe param" "maybe type" "temp"
    (617384 'move' call_tmp[617381](374036 call _aligned _mt[243] this[66571]))
    (509664 'move' ret[509659](509663 'deref' call_tmp[617381]))
    (509661 return ret[509659])
  }
  where {
    (374031 call stridable _mt[243] this[66571])
  }
  function range[64316](?).aligned[66587](arg _mt[66592]:_MT[238], arg this[66589]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509668] "RVV" "param" "temp"
    (509673 'move' ret[509668](509672 'deref' 1))
    (509670 return ret[509668])
  }
  where {
    unknown tmp[419377] "maybe param" "temp"
    unknown call_tmp[617390] "expr temp" "maybe param" "maybe type" "temp"
    (617393 'move' call_tmp[617390](374041 call stridable _mt[243] this[66589]))
    (419388 'move' tmp[419377](66595 call ! call_tmp[617390]))
    unknown call_tmp[617395] "expr temp" "maybe param" "maybe type" "temp"
    (617398 'move' call_tmp[617395](419390 call _cond_invalid tmp[419377]))
    if call_tmp[617395]
    {
      (419393 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555951] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555952] "maybe param" "temp"
    unknown call_tmp[617400] "expr temp" "maybe param" "maybe type" "temp"
    (617403 'move' call_tmp[617400](419378 call isTrue tmp[419377]))
    (555957 'move' tmp[555952](555955 call _cond_test call_tmp[617400]))
    if tmp[555952]
    {
      unknown tmp[419398] "maybe param" "temp"
      unknown call_tmp[617407] "expr temp" "maybe param" "maybe type" "temp"
      (617410 'move' call_tmp[617407](374046 call boundedType _mt[243] this[66589]))
      (419409 'move' tmp[419398](66602 call == call_tmp[617407] bounded[64205]))
      unknown call_tmp[617412] "expr temp" "maybe param" "maybe type" "temp"
      (617415 'move' call_tmp[617412](419411 call _cond_invalid tmp[419398]))
      if call_tmp[617412]
      {
        (419414 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[555924] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555925] "maybe param" "temp"
      unknown call_tmp[617417] "expr temp" "maybe param" "maybe type" "temp"
      (617420 'move' call_tmp[617417](419399 call isTrue tmp[419398]))
      (555930 'move' tmp[555925](555928 call _cond_test call_tmp[617417]))
      if tmp[555925]
      {
        (555935 'move' tmp[555924](555932 '_paramFoldLogical' tmp[555925] 1))
      }
      {
        unknown tmp[555937] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617424] "expr temp" "maybe param" "maybe type" "temp"
        (617427 'move' call_tmp[617424](374051 call boundedType _mt[243] this[66589]))
        unknown call_tmp[617429] "expr temp" "maybe param" "maybe type" "temp"
        (617432 'move' call_tmp[617429](66609 call == call_tmp[617424] boundedLow[64207]))
        (555939 'move' tmp[555937](419403 call isTrue call_tmp[617429]))
        (555944 'move' tmp[555924](555941 '_paramFoldLogical' tmp[555925] tmp[555937]))
      }
      unknown tmp[555959] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555961 'move' tmp[555959](419381 call isTrue tmp[555924]))
      (555966 'move' tmp[555951](555963 '_paramFoldLogical' tmp[555952] tmp[555959]))
    }
    {
      (555971 'move' tmp[555951](555968 '_paramFoldLogical' tmp[555952] 0))
    }
    (748265 call chpl_statementLevelSymbol tmp[555951])
  }
  function range[64316](?).aligned[66625](arg _mt[66630]:_MT[238], arg this[66627]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509677] "RVV" "param" "temp"
    (509682 'move' ret[509677](509681 'deref' 0))
    (509679 return ret[509677])
  }
  function range[64316](?).first[66641](arg _mt[66646]:_MT[238], arg this[66643]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509686] "RVV" "temp"
    unknown call_tmp[617438] "expr temp" "maybe param" "maybe type" "temp"
    (617441 'move' call_tmp[617438](66652 call firstAsInt _mt[243] this[66643]))
    unknown call_tmp[617443] "expr temp" "maybe param" "maybe type" "temp"
    (617446 'move' call_tmp[617443](66656 call(374055 call (partial) chpl_intToIdx _mt[243] this[66643]) call_tmp[617438]))
    (509691 'move' ret[509686](509690 'deref' call_tmp[617443]))
    (509688 return ret[509686])
  }
  function range[64316](?).firstAsInt[66665](arg _mt[66670]:_MT[238], arg this[66667]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509695] "RVV" "temp"
    unknown call_tmp[617450] "expr temp" "maybe param" "maybe type" "temp"
    (617453 'move' call_tmp[617450](374060 call stridable _mt[243] this[66667]))
    unknown call_tmp[617455] "expr temp" "maybe param" "maybe type" "temp"
    (617458 'move' call_tmp[617455](66673 call ! call_tmp[617450]))
    unknown call_tmp[617460] "expr temp" "maybe param" "maybe type" "temp"
    (617463 'move' call_tmp[617460](66699 call _cond_test call_tmp[617455]))
    if call_tmp[617460]
    {
      unknown call_tmp[617467] "expr temp" "maybe param" "maybe type" "temp"
      (617470 'move' call_tmp[617467](374065 call _low _mt[243] this[66667]))
      (509700 'move' ret[509695](509699 'deref' call_tmp[617467]))
      gotoReturn _end_firstAsInt[509693] _end_firstAsInt[509693]
    }
    {
      unknown tmp[555978] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555979] "maybe param" "temp"
      unknown call_tmp[617474] "expr temp" "maybe param" "maybe type" "temp"
      (617477 'move' call_tmp[617474](374070 call _stride _mt[243] this[66667]))
      unknown call_tmp[617479] "expr temp" "maybe param" "maybe type" "temp"
      (617482 'move' call_tmp[617479](66680 call > call_tmp[617474] 0))
      (555984 'move' tmp[555979](555982 call _cond_test call_tmp[617479]))
      if tmp[555979]
      {
        unknown tmp[555986] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555988 'move' tmp[555986](66685 call alignedLowAsInt _mt[243] this[66667]))
        (555993 'move' tmp[555978](555990 '_paramFoldLogical' tmp[555979] tmp[555986]))
      }
      {
        unknown tmp[555995] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555997 'move' tmp[555995](66691 call alignedHighAsInt _mt[243] this[66667]))
        (556002 'move' tmp[555978](555999 '_paramFoldLogical' tmp[555979] tmp[555995]))
      }
      (509705 'move' ret[509695](509704 'deref' tmp[555978]))
      gotoReturn _end_firstAsInt[509693] _end_firstAsInt[509693]
    }
    label _end_firstAsInt[509693]
    (509697 return ret[509695])
  }
  function range[64316](?).last[66711](arg _mt[66716]:_MT[238], arg this[66713]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509711] "RVV" "temp"
    unknown call_tmp[617492] "expr temp" "maybe param" "maybe type" "temp"
    (617495 'move' call_tmp[617492](66722 call lastAsInt _mt[243] this[66713]))
    unknown call_tmp[617497] "expr temp" "maybe param" "maybe type" "temp"
    (617500 'move' call_tmp[617497](66726 call(374074 call (partial) chpl_intToIdx _mt[243] this[66713]) call_tmp[617492]))
    (509716 'move' ret[509711](509715 'deref' call_tmp[617497]))
    (509713 return ret[509711])
  }
  function range[64316](?).lastAsInt[66735](arg _mt[66740]:_MT[238], arg this[66737]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509720] "RVV" "temp"
    unknown call_tmp[617504] "expr temp" "maybe param" "maybe type" "temp"
    (617507 'move' call_tmp[617504](374079 call stridable _mt[243] this[66737]))
    unknown call_tmp[617509] "expr temp" "maybe param" "maybe type" "temp"
    (617512 'move' call_tmp[617509](66743 call ! call_tmp[617504]))
    unknown call_tmp[617514] "expr temp" "maybe param" "maybe type" "temp"
    (617517 'move' call_tmp[617514](66765 call _cond_test call_tmp[617509]))
    if call_tmp[617514]
    {
      unknown call_tmp[617521] "expr temp" "maybe param" "maybe type" "temp"
      (617524 'move' call_tmp[617521](374084 call _high _mt[243] this[66737]))
      (509725 'move' ret[509720](509724 'deref' call_tmp[617521]))
      gotoReturn _end_lastAsInt[509718] _end_lastAsInt[509718]
    }
    {
      unknown tmp[556009] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556010] "maybe param" "temp"
      unknown call_tmp[617528] "expr temp" "maybe param" "maybe type" "temp"
      (617531 'move' call_tmp[617528](374088 call stride _mt[243] this[66737]))
      unknown call_tmp[617533] "expr temp" "maybe param" "maybe type" "temp"
      (617536 'move' call_tmp[617533](66750 call > call_tmp[617528] 0))
      (556015 'move' tmp[556010](556013 call _cond_test call_tmp[617533]))
      if tmp[556010]
      {
        unknown tmp[556017] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556019 'move' tmp[556017](66753 call alignedHighAsInt _mt[243] this[66737]))
        (556024 'move' tmp[556009](556021 '_paramFoldLogical' tmp[556010] tmp[556017]))
      }
      {
        unknown tmp[556026] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556028 'move' tmp[556026](66757 call alignedLowAsInt _mt[243] this[66737]))
        (556033 'move' tmp[556009](556030 '_paramFoldLogical' tmp[556010] tmp[556026]))
      }
      (509730 'move' ret[509720](509729 'deref' tmp[556009]))
      gotoReturn _end_lastAsInt[509718] _end_lastAsInt[509718]
    }
    label _end_lastAsInt[509718]
    (509722 return ret[509720])
  }
  function range[64316](?).low[66777](arg _mt[66782]:_MT[238], arg this[66779]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509736] "RVV" "temp"
    unknown call_tmp[617546] "expr temp" "maybe param" "maybe type" "temp"
    (617549 'move' call_tmp[617546](374097 call _low _mt[243] this[66779]))
    unknown call_tmp[617551] "expr temp" "maybe param" "maybe type" "temp"
    (617554 'move' call_tmp[617551](66787 call(374092 call (partial) chpl_intToIdx _mt[243] this[66779]) call_tmp[617546]))
    (509741 'move' ret[509736](509740 'deref' call_tmp[617551]))
    (509738 return ret[509736])
  }
  function range[64316](?).high[66796](arg _mt[66801]:_MT[238], arg this[66798]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509745] "RVV" "temp"
    unknown call_tmp[617560] "expr temp" "maybe param" "maybe type" "temp"
    (617563 'move' call_tmp[617560](374106 call _high _mt[243] this[66798]))
    unknown call_tmp[617565] "expr temp" "maybe param" "maybe type" "temp"
    (617568 'move' call_tmp[617565](66806 call(374101 call (partial) chpl_intToIdx _mt[243] this[66798]) call_tmp[617560]))
    (509750 'move' ret[509745](509749 'deref' call_tmp[617565]))
    (509747 return ret[509745])
  }
  function range[64316](?).alignedLow[66815](arg _mt[66820]:_MT[238], arg this[66817]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509754] "RVV" "temp"
    unknown call_tmp[617574] "expr temp" "maybe param" "maybe type" "temp"
    (617577 'move' call_tmp[617574](66825 call alignedLowAsInt _mt[243] this[66817]))
    unknown call_tmp[617579] "expr temp" "maybe param" "maybe type" "temp"
    (617582 'move' call_tmp[617579](66829 call(374115 call (partial) chpl_intToIdx _mt[243] this[66817]) call_tmp[617574]))
    unknown call_tmp[617586] "expr temp" "maybe param" "maybe type" "temp"
    (617589 'move' call_tmp[617586](509759 call idxType _mt[243] this[66817]))
    (509763 'move' ret[509754](509762 'coerce' call_tmp[617579] call_tmp[617586]))
    (509756 return ret[509754])
  }
  { scopeless type
    (374111 call idxType _mt[243] this[66817])
  }
  function range[64316](?).alignedLowAsInt[66839](arg _mt[66844]:_MT[238], arg this[66841]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509767] "RVV" "temp"
    unknown call_tmp[617595] "expr temp" "maybe param" "maybe type" "temp"
    (617598 'move' call_tmp[617595](374120 call stridable _mt[243] this[66841]))
    unknown call_tmp[617600] "expr temp" "maybe param" "maybe type" "temp"
    (617603 'move' call_tmp[617600](66847 call ! call_tmp[617595]))
    unknown call_tmp[617605] "expr temp" "maybe param" "maybe type" "temp"
    (617608 'move' call_tmp[617605](66863 call _cond_test call_tmp[617600]))
    if call_tmp[617605]
    {
      unknown call_tmp[617612] "expr temp" "maybe param" "maybe type" "temp"
      (617615 'move' call_tmp[617612](374125 call _low _mt[243] this[66841]))
      (509772 'move' ret[509767](509771 'deref' call_tmp[617612]))
      gotoReturn _end_alignedLowAsInt[509765] _end_alignedLowAsInt[509765]
    }
    {
      unknown call_tmp[617619] "expr temp" "maybe param" "maybe type" "temp"
      (617622 'move' call_tmp[617619](374130 call _low _mt[243] this[66841]))
      unknown call_tmp[617626] "expr temp" "maybe param" "maybe type" "temp"
      (617629 'move' call_tmp[617626](374135 call _alignment _mt[243] this[66841]))
      unknown call_tmp[617633] "expr temp" "maybe param" "maybe type" "temp"
      (617636 'move' call_tmp[617633](374140 call _low _mt[243] this[66841]))
      unknown call_tmp[617640] "expr temp" "maybe param" "maybe type" "temp"
      (617643 'move' call_tmp[617640](374144 call stride _mt[243] this[66841]))
      unknown call_tmp[617645] "expr temp" "maybe param" "maybe type" "temp"
      (617648 'move' call_tmp[617645](66858 call chpl__diffMod call_tmp[617626] call_tmp[617633] call_tmp[617640]))
      unknown call_tmp[617650] "expr temp" "maybe param" "maybe type" "temp"
      (617653 'move' call_tmp[617650](66859 call + call_tmp[617619] call_tmp[617645]))
      (509777 'move' ret[509767](509776 'deref' call_tmp[617650]))
      gotoReturn _end_alignedLowAsInt[509765] _end_alignedLowAsInt[509765]
    }
    label _end_alignedLowAsInt[509765]
    (509769 return ret[509767])
  }
  function range[64316](?).alignedHigh[66875](arg _mt[66880]:_MT[238], arg this[66877]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509783] "RVV" "temp"
    unknown call_tmp[617659] "expr temp" "maybe param" "maybe type" "temp"
    (617662 'move' call_tmp[617659](66885 call alignedHighAsInt _mt[243] this[66877]))
    unknown call_tmp[617664] "expr temp" "maybe param" "maybe type" "temp"
    (617667 'move' call_tmp[617664](66889 call(374153 call (partial) chpl_intToIdx _mt[243] this[66877]) call_tmp[617659]))
    unknown call_tmp[617671] "expr temp" "maybe param" "maybe type" "temp"
    (617674 'move' call_tmp[617671](509788 call idxType _mt[243] this[66877]))
    (509792 'move' ret[509783](509791 'coerce' call_tmp[617664] call_tmp[617671]))
    (509785 return ret[509783])
  }
  { scopeless type
    (374149 call idxType _mt[243] this[66877])
  }
  function range[64316](?).alignedHighAsInt[66899](arg _mt[66904]:_MT[238], arg this[66901]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509796] "RVV" "temp"
    unknown call_tmp[617680] "expr temp" "maybe param" "maybe type" "temp"
    (617683 'move' call_tmp[617680](374158 call stridable _mt[243] this[66901]))
    unknown call_tmp[617685] "expr temp" "maybe param" "maybe type" "temp"
    (617688 'move' call_tmp[617685](66907 call ! call_tmp[617680]))
    unknown call_tmp[617690] "expr temp" "maybe param" "maybe type" "temp"
    (617693 'move' call_tmp[617690](66923 call _cond_test call_tmp[617685]))
    if call_tmp[617690]
    {
      unknown call_tmp[617697] "expr temp" "maybe param" "maybe type" "temp"
      (617700 'move' call_tmp[617697](374163 call _high _mt[243] this[66901]))
      (509801 'move' ret[509796](509800 'deref' call_tmp[617697]))
      gotoReturn _end_alignedHighAsInt[509794] _end_alignedHighAsInt[509794]
    }
    {
      unknown call_tmp[617704] "expr temp" "maybe param" "maybe type" "temp"
      (617707 'move' call_tmp[617704](374168 call _high _mt[243] this[66901]))
      unknown call_tmp[617711] "expr temp" "maybe param" "maybe type" "temp"
      (617714 'move' call_tmp[617711](374173 call _high _mt[243] this[66901]))
      unknown call_tmp[617718] "expr temp" "maybe param" "maybe type" "temp"
      (617721 'move' call_tmp[617718](374178 call _alignment _mt[243] this[66901]))
      unknown call_tmp[617725] "expr temp" "maybe param" "maybe type" "temp"
      (617728 'move' call_tmp[617725](374182 call stride _mt[243] this[66901]))
      unknown call_tmp[617730] "expr temp" "maybe param" "maybe type" "temp"
      (617733 'move' call_tmp[617730](66918 call chpl__diffMod call_tmp[617711] call_tmp[617718] call_tmp[617725]))
      unknown call_tmp[617735] "expr temp" "maybe param" "maybe type" "temp"
      (617738 'move' call_tmp[617735](66919 call - call_tmp[617704] call_tmp[617730]))
      (509806 'move' ret[509796](509805 'deref' call_tmp[617735]))
      gotoReturn _end_alignedHighAsInt[509794] _end_alignedHighAsInt[509794]
    }
    label _end_alignedHighAsInt[509794]
    (509798 return ret[509796])
  }
  function range[64316](?).isEmpty[66935](arg _mt[66940]:_MT[238], arg this[66937]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509812] "RVV" "temp"
    unknown tmp[419440] "maybe param" "temp"
    (419451 'move' tmp[419440] 1)
    unknown call_tmp[617740] "expr temp" "maybe param" "maybe type" "temp"
    (617743 'move' call_tmp[617740](419453 call _cond_invalid tmp[419440]))
    if call_tmp[617740]
    {
      (419456 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556040] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556041] "maybe param" "temp"
    unknown call_tmp[617745] "expr temp" "maybe param" "maybe type" "temp"
    (617748 'move' call_tmp[617745](419441 call isTrue tmp[419440]))
    (556046 'move' tmp[556041](556044 call _cond_test call_tmp[617745]))
    if tmp[556041]
    {
      unknown tmp[556048] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617752] "expr temp" "maybe param" "maybe type" "temp"
      (617755 'move' call_tmp[617752](66945 call(374187 call (partial) isAmbiguous _mt[243] this[66937])))
      (556050 'move' tmp[556048](419444 call isTrue call_tmp[617752]))
      (556055 'move' tmp[556040](556052 '_paramFoldLogical' tmp[556041] tmp[556048]))
    }
    {
      (556060 'move' tmp[556040](556057 '_paramFoldLogical' tmp[556041] 0))
    }
    unknown call_tmp[617757] "expr temp" "maybe param" "maybe type" "temp"
    (617760 'move' call_tmp[617757](66990 call _cond_test tmp[556040]))
    if call_tmp[617757]
    {
      (66970 call boundsCheckHalt module=[255] HaltWrappers[209915] "isEmpty() is invoked on an ambiguously-aligned range")
      (357606 'referenced modules list' HaltWrappers[209915])
    }
    {
      unknown tmp[419419] "maybe param" "temp"
      (419430 'move' tmp[419419](66975 call isBoundedRange this[66937]))
      unknown call_tmp[617762] "expr temp" "maybe param" "maybe type" "temp"
      (617765 'move' call_tmp[617762](419432 call _cond_invalid tmp[419419]))
      if call_tmp[617762]
      {
        (419435 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556067] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556068] "maybe param" "temp"
      unknown call_tmp[617767] "expr temp" "maybe param" "maybe type" "temp"
      (617770 'move' call_tmp[617767](419420 call isTrue tmp[419419]))
      (556073 'move' tmp[556068](556071 call _cond_test call_tmp[617767]))
      if tmp[556068]
      {
        unknown tmp[556075] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617774] "expr temp" "maybe param" "maybe type" "temp"
        (617777 'move' call_tmp[617774](66977 call alignedLow _mt[243] this[66937]))
        unknown call_tmp[617781] "expr temp" "maybe param" "maybe type" "temp"
        (617784 'move' call_tmp[617781](66981 call alignedHigh _mt[243] this[66937]))
        unknown call_tmp[617786] "expr temp" "maybe param" "maybe type" "temp"
        (617789 'move' call_tmp[617786](66984 call > call_tmp[617774] call_tmp[617781]))
        (556077 'move' tmp[556075](419423 call isTrue call_tmp[617786]))
        (556082 'move' tmp[556067](556079 '_paramFoldLogical' tmp[556068] tmp[556075]))
      }
      {
        (556087 'move' tmp[556067](556084 '_paramFoldLogical' tmp[556068] 0))
      }
      (509817 'move' ret[509812](509816 'deref' tmp[556067]))
      gotoReturn _end_isEmpty[509810] _end_isEmpty[509810]
    }
    label _end_isEmpty[509810]
    (509814 return ret[509812])
  }
  function range[64316](?).length[67002](arg _mt[67007]:_MT[238], arg this[67004]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509823] "RVV" "temp"
    unknown call_tmp[617791] "expr temp" "maybe param" "maybe type" "temp"
    (617794 'move' call_tmp[617791](67045 call + "'range.length' is deprecated - " "please use 'range.size' instead"))
    (67048 call compilerWarning call_tmp[617791])
    (475419 'end of statement')
    unknown call_tmp[617798] "expr temp" "maybe param" "maybe type" "temp"
    (617801 'move' call_tmp[617798](67052 call size _mt[243] this[67004]))
    unknown call_tmp[617805] "expr temp" "maybe param" "maybe type" "temp"
    (617808 'move' call_tmp[617805](509828 call intIdxType _mt[243] this[67004]))
    (509832 'move' ret[509823](509831 'coerce' call_tmp[617798] call_tmp[617805]))
    (509825 return ret[509823])
  }
  { scopeless type
    (374192 call intIdxType _mt[243] this[67004])
  }
  function range[64316](?).size[67063](arg _mt[67068]:_MT[238], arg this[67065]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[509836] "RVV" "temp"
    unknown call_tmp[617812] "expr temp" "maybe param" "maybe type" "temp"
    (617815 'move' call_tmp[617812](67074 call isBoundedRange this[67065]))
    unknown call_tmp[617817] "expr temp" "maybe param" "maybe type" "temp"
    (617820 'move' call_tmp[617817](67075 call ! call_tmp[617812]))
    unknown call_tmp[617822] "expr temp" "maybe param" "maybe type" "temp"
    (617825 'move' call_tmp[617822](67098 call _cond_test call_tmp[617817]))
    if call_tmp[617822]
    {
      (67096 call compilerError "'size' is not defined on unbounded ranges")
    }
    unknown call_tmp[617829] "maybe param" "maybe type" "temp"
    (617832 'move' call_tmp[617829](67105 call alignedHighAsInt _mt[243] this[67065]))
    const ah[67108] "dead at end of block" "const" "insert auto destroy"
    (541086 'init var' ah[67108] call_tmp[617829])
    unknown call_tmp[617836] "maybe param" "maybe type" "temp"
    (617839 'move' call_tmp[617836](67112 call alignedLowAsInt _mt[243] this[67065]))
    const al[67115] "dead at end of block" "const" "insert auto destroy"
    (541088 'init var' al[67115] call_tmp[617836])
    (67118 'end of statement')
    unknown call_tmp[617841] "expr temp" "maybe param" "maybe type" "temp"
    (617844 'move' call_tmp[617841](67121 call > al[67115] ah[67108]))
    unknown call_tmp[617846] "expr temp" "maybe param" "maybe type" "temp"
    (617849 'move' call_tmp[617846](67129 call _cond_test call_tmp[617841]))
    if call_tmp[617846]
    {
      unknown call_tmp[617853] "expr temp" "maybe param" "maybe type" "temp"
      (617856 'move' call_tmp[617853](374203 call intIdxType _mt[243] this[67065]))
      unknown call_tmp[617858] "expr temp" "maybe param" "maybe type" "temp"
      (617861 'move' call_tmp[617858](67125 call _cast call_tmp[617853] 0))
      unknown call_tmp[617865] "expr temp" "maybe param" "maybe type" "temp"
      (617868 'move' call_tmp[617865](509841 call intIdxType _mt[243] this[67065]))
      (509845 'move' ret[509836](509844 'coerce' call_tmp[617858] call_tmp[617865]))
      gotoReturn _end_size[509834] _end_size[509834]
    }
    unknown call_tmp[617872] "expr temp" "maybe param" "maybe type" "temp"
    (617875 'move' call_tmp[617872](374207 call intIdxType _mt[243] this[67065]))
    unknown call_tmp[617879] "expr temp" "maybe param" "maybe type" "temp"
    (617882 'move' call_tmp[617879](67136 call stride _mt[243] this[67065]))
    unknown call_tmp[617884] "expr temp" "maybe param" "maybe type" "temp"
    (617887 'move' call_tmp[617884](67140 call abs call_tmp[617879]))
    unknown call_tmp[617889] "maybe param" "maybe type" "temp"
    (617892 'move' call_tmp[617889](67142 call _cast call_tmp[617872] call_tmp[617884]))
    const s[67144] "dead at end of block" "const" "insert auto destroy"
    (541090 'init var' s[67144] call_tmp[617889])
    (67147 'end of statement')
    unknown call_tmp[617894] "expr temp" "maybe param" "maybe type" "temp"
    (617897 'move' call_tmp[617894](67150 call - ah[67108] al[67115]))
    unknown call_tmp[617899] "expr temp" "maybe param" "maybe type" "temp"
    (617902 'move' call_tmp[617899](67153 call / call_tmp[617894] s[67144]))
    unknown call_tmp[617906] "expr temp" "maybe param" "maybe type" "temp"
    (617909 'move' call_tmp[617906](374214 call intIdxType _mt[243] this[67065]))
    unknown call_tmp[617911] "expr temp" "maybe param" "maybe type" "temp"
    (617914 'move' call_tmp[617911](67157 call _cast call_tmp[617906] 1))
    unknown call_tmp[617916] "expr temp" "maybe param" "maybe type" "temp"
    (617919 'move' call_tmp[617916](67159 call + call_tmp[617899] call_tmp[617911]))
    unknown call_tmp[617923] "expr temp" "maybe param" "maybe type" "temp"
    (617926 'move' call_tmp[617923](509850 call intIdxType _mt[243] this[67065]))
    (509854 'move' ret[509836](509853 'coerce' call_tmp[617916] call_tmp[617923]))
    gotoReturn _end_size[509834] _end_size[509834]
    (475423 'end of statement' ah[67108] al[67115] s[67144])
    label _end_size[509834]
    (509838 return ret[509836])
  }
  { scopeless type
    (374196 call intIdxType _mt[243] this[67065])
  }
  function range[64316](?).hasFirst[67169](arg _mt[67174]:_MT[238], arg this[67171]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509860] "RVV" "param" "temp"
    unknown call_tmp[617932] "expr temp" "maybe param" "maybe type" "temp"
    (617935 'move' call_tmp[617932](67188 call(374227 call (partial) hasLowBound _mt[243] this[67171])))
    (509865 'move' ret[509860](509864 'deref' call_tmp[617932]))
    (509862 return ret[509860])
  }
  where {
    unknown tmp[419461] "maybe param" "temp"
    unknown call_tmp[617939] "expr temp" "maybe param" "maybe type" "temp"
    (617942 'move' call_tmp[617939](374219 call stridable _mt[243] this[67171]))
    (419472 'move' tmp[419461](67177 call ! call_tmp[617939]))
    unknown call_tmp[617944] "expr temp" "maybe param" "maybe type" "temp"
    (617947 'move' call_tmp[617944](419474 call _cond_invalid tmp[419461]))
    if call_tmp[617944]
    {
      (419477 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556094] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556095] "maybe param" "temp"
    unknown call_tmp[617949] "expr temp" "maybe param" "maybe type" "temp"
    (617952 'move' call_tmp[617949](419462 call isTrue tmp[419461]))
    (556100 'move' tmp[556095](556098 call _cond_test call_tmp[617949]))
    if tmp[556095]
    {
      unknown tmp[556102] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617956] "expr temp" "maybe param" "maybe type" "temp"
      (617959 'move' call_tmp[617956](67181 call(374223 call (partial) hasHighBound _mt[243] this[67171])))
      unknown call_tmp[617961] "expr temp" "maybe param" "maybe type" "temp"
      (617964 'move' call_tmp[617961](67182 call ! call_tmp[617956]))
      (556104 'move' tmp[556102](419465 call isTrue call_tmp[617961]))
      (556109 'move' tmp[556094](556106 '_paramFoldLogical' tmp[556095] tmp[556102]))
    }
    {
      (556114 'move' tmp[556094](556111 '_paramFoldLogical' tmp[556095] 0))
    }
    (748267 call chpl_statementLevelSymbol tmp[556094])
  }
  function range[64316](?).hasFirst[67198](arg _mt[67203]:_MT[238], arg this[67200]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509869] "RVV" "temp"
    unknown tmp[419482] "maybe param" "temp"
    (419493 'move' tmp[419482](67207 call(374231 call (partial) isAmbiguous _mt[243] this[67200])))
    unknown call_tmp[617968] "expr temp" "maybe param" "maybe type" "temp"
    (617971 'move' call_tmp[617968](419495 call _cond_invalid tmp[419482]))
    if call_tmp[617968]
    {
      (419498 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556121] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556122] "maybe param" "temp"
    unknown call_tmp[617973] "expr temp" "maybe param" "maybe type" "temp"
    (617976 'move' call_tmp[617973](419483 call isTrue tmp[419482]))
    (556127 'move' tmp[556122](556125 call _cond_test call_tmp[617973]))
    if tmp[556122]
    {
      (556132 'move' tmp[556121](556129 '_paramFoldLogical' tmp[556122] 1))
    }
    {
      unknown tmp[556134] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617980] "expr temp" "maybe param" "maybe type" "temp"
      (617983 'move' call_tmp[617980](67210 call(374235 call (partial) isEmpty _mt[243] this[67200])))
      (556136 'move' tmp[556134](419487 call isTrue call_tmp[617980]))
      (556141 'move' tmp[556121](556138 '_paramFoldLogical' tmp[556122] tmp[556134]))
    }
    unknown tmp[556179] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556180] "maybe param" "temp"
    (556185 'move' tmp[556180](556183 call _cond_test tmp[556121]))
    if tmp[556180]
    {
      (556190 'move' tmp[556179](556187 '_paramFoldLogical' tmp[556180] 0))
    }
    {
      unknown tmp[556148] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556149] "maybe param" "temp"
      unknown call_tmp[617987] "expr temp" "maybe param" "maybe type" "temp"
      (617990 'move' call_tmp[617987](374239 call stride _mt[243] this[67200]))
      unknown call_tmp[617992] "expr temp" "maybe param" "maybe type" "temp"
      (617995 'move' call_tmp[617992](67216 call > call_tmp[617987] 0))
      (556154 'move' tmp[556149](556152 call _cond_test call_tmp[617992]))
      if tmp[556149]
      {
        unknown tmp[556156] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556158 'move' tmp[556156](67220 call(374243 call (partial) hasLowBound _mt[243] this[67200])))
        (556163 'move' tmp[556148](556160 '_paramFoldLogical' tmp[556149] tmp[556156]))
      }
      {
        unknown tmp[556165] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556167 'move' tmp[556165](67223 call(374247 call (partial) hasHighBound _mt[243] this[67200])))
        (556172 'move' tmp[556148](556169 '_paramFoldLogical' tmp[556149] tmp[556165]))
      }
      (556195 'move' tmp[556179](556192 '_paramFoldLogical' tmp[556180] tmp[556148]))
    }
    (509874 'move' ret[509869](509873 'deref' tmp[556179]))
    (509871 return ret[509869])
  }
  function range[64316](?).hasLast[67238](arg _mt[67243]:_MT[238], arg this[67240]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509878] "RVV" "param" "temp"
    unknown call_tmp[618003] "expr temp" "maybe param" "maybe type" "temp"
    (618006 'move' call_tmp[618003](67257 call(374260 call (partial) hasHighBound _mt[243] this[67240])))
    (509883 'move' ret[509878](509882 'deref' call_tmp[618003]))
    (509880 return ret[509878])
  }
  where {
    unknown tmp[419503] "maybe param" "temp"
    unknown call_tmp[618010] "expr temp" "maybe param" "maybe type" "temp"
    (618013 'move' call_tmp[618010](374252 call stridable _mt[243] this[67240]))
    (419514 'move' tmp[419503](67246 call ! call_tmp[618010]))
    unknown call_tmp[618015] "expr temp" "maybe param" "maybe type" "temp"
    (618018 'move' call_tmp[618015](419516 call _cond_invalid tmp[419503]))
    if call_tmp[618015]
    {
      (419519 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556202] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556203] "maybe param" "temp"
    unknown call_tmp[618020] "expr temp" "maybe param" "maybe type" "temp"
    (618023 'move' call_tmp[618020](419504 call isTrue tmp[419503]))
    (556208 'move' tmp[556203](556206 call _cond_test call_tmp[618020]))
    if tmp[556203]
    {
      unknown tmp[556210] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618027] "expr temp" "maybe param" "maybe type" "temp"
      (618030 'move' call_tmp[618027](67250 call(374256 call (partial) hasLowBound _mt[243] this[67240])))
      unknown call_tmp[618032] "expr temp" "maybe param" "maybe type" "temp"
      (618035 'move' call_tmp[618032](67251 call ! call_tmp[618027]))
      (556212 'move' tmp[556210](419507 call isTrue call_tmp[618032]))
      (556217 'move' tmp[556202](556214 '_paramFoldLogical' tmp[556203] tmp[556210]))
    }
    {
      (556222 'move' tmp[556202](556219 '_paramFoldLogical' tmp[556203] 0))
    }
    (748269 call chpl_statementLevelSymbol tmp[556202])
  }
  function range[64316](?).hasLast[67267](arg _mt[67272]:_MT[238], arg this[67269]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509887] "RVV" "temp"
    unknown tmp[419524] "maybe param" "temp"
    (419535 'move' tmp[419524](67276 call(374264 call (partial) isAmbiguous _mt[243] this[67269])))
    unknown call_tmp[618039] "expr temp" "maybe param" "maybe type" "temp"
    (618042 'move' call_tmp[618039](419537 call _cond_invalid tmp[419524]))
    if call_tmp[618039]
    {
      (419540 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556229] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556230] "maybe param" "temp"
    unknown call_tmp[618044] "expr temp" "maybe param" "maybe type" "temp"
    (618047 'move' call_tmp[618044](419525 call isTrue tmp[419524]))
    (556235 'move' tmp[556230](556233 call _cond_test call_tmp[618044]))
    if tmp[556230]
    {
      (556240 'move' tmp[556229](556237 '_paramFoldLogical' tmp[556230] 1))
    }
    {
      unknown tmp[556242] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618051] "expr temp" "maybe param" "maybe type" "temp"
      (618054 'move' call_tmp[618051](67279 call(374268 call (partial) isEmpty _mt[243] this[67269])))
      (556244 'move' tmp[556242](419529 call isTrue call_tmp[618051]))
      (556249 'move' tmp[556229](556246 '_paramFoldLogical' tmp[556230] tmp[556242]))
    }
    unknown tmp[556287] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556288] "maybe param" "temp"
    (556293 'move' tmp[556288](556291 call _cond_test tmp[556229]))
    if tmp[556288]
    {
      (556298 'move' tmp[556287](556295 '_paramFoldLogical' tmp[556288] 0))
    }
    {
      unknown tmp[556256] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556257] "maybe param" "temp"
      unknown call_tmp[618058] "expr temp" "maybe param" "maybe type" "temp"
      (618061 'move' call_tmp[618058](374272 call stride _mt[243] this[67269]))
      unknown call_tmp[618063] "expr temp" "maybe param" "maybe type" "temp"
      (618066 'move' call_tmp[618063](67285 call > call_tmp[618058] 0))
      (556262 'move' tmp[556257](556260 call _cond_test call_tmp[618063]))
      if tmp[556257]
      {
        unknown tmp[556264] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556266 'move' tmp[556264](67289 call(374276 call (partial) hasHighBound _mt[243] this[67269])))
        (556271 'move' tmp[556256](556268 '_paramFoldLogical' tmp[556257] tmp[556264]))
      }
      {
        unknown tmp[556273] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556275 'move' tmp[556273](67292 call(374280 call (partial) hasLowBound _mt[243] this[67269])))
        (556280 'move' tmp[556256](556277 '_paramFoldLogical' tmp[556257] tmp[556273]))
      }
      (556303 'move' tmp[556287](556300 '_paramFoldLogical' tmp[556288] tmp[556256]))
    }
    (509892 'move' ret[509887](509891 'deref' tmp[556287]))
    (509889 return ret[509887])
  }
  function range[64316](?).isNaturallyAligned[67307](arg _mt[67312]:_MT[238], arg this[67309]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method"
  {
    unknown ret[509896] "RVV" "temp"
    unknown call_tmp[618074] "expr temp" "maybe param" "maybe type" "temp"
    (618077 'move' call_tmp[618074](374289 call stride _mt[243] this[67309]))
    unknown call_tmp[618079] "expr temp" "maybe param" "maybe type" "temp"
    (618082 'move' call_tmp[618079](67329 call > call_tmp[618074] 0))
    unknown call_tmp[618084] "expr temp" "maybe param" "maybe type" "temp"
    (618087 'move' call_tmp[618084](67340 call _cond_test call_tmp[618079]))
    if call_tmp[618084]
    {
      unknown call_tmp[618091] "expr temp" "maybe param" "maybe type" "temp"
      (618094 'move' call_tmp[618091](67332 call alignedLowAsInt _mt[243] this[67309]))
      unknown call_tmp[618098] "expr temp" "maybe param" "maybe type" "temp"
      (618101 'move' call_tmp[618098](374294 call _low _mt[243] this[67309]))
      unknown call_tmp[618103] "expr temp" "maybe param" "maybe type" "temp"
      (618106 'move' call_tmp[618103](67336 call == call_tmp[618091] call_tmp[618098]))
      (509901 'move' ret[509896](509900 'deref' call_tmp[618103]))
      gotoReturn _end_isNaturallyAligned[509894] _end_isNaturallyAligned[509894]
    }
    unknown call_tmp[618110] "expr temp" "maybe param" "maybe type" "temp"
    (618113 'move' call_tmp[618110](374298 call stride _mt[243] this[67309]))
    unknown call_tmp[618115] "expr temp" "maybe param" "maybe type" "temp"
    (618118 'move' call_tmp[618115](67348 call < call_tmp[618110] 0))
    unknown call_tmp[618120] "expr temp" "maybe param" "maybe type" "temp"
    (618123 'move' call_tmp[618120](67359 call _cond_test call_tmp[618115]))
    if call_tmp[618120]
    {
      unknown call_tmp[618127] "expr temp" "maybe param" "maybe type" "temp"
      (618130 'move' call_tmp[618127](67351 call alignedHighAsInt _mt[243] this[67309]))
      unknown call_tmp[618134] "expr temp" "maybe param" "maybe type" "temp"
      (618137 'move' call_tmp[618134](374303 call _high _mt[243] this[67309]))
      unknown call_tmp[618139] "expr temp" "maybe param" "maybe type" "temp"
      (618142 'move' call_tmp[618139](67355 call == call_tmp[618127] call_tmp[618134]))
      (509906 'move' ret[509896](509905 'deref' call_tmp[618139]))
      gotoReturn _end_isNaturallyAligned[509894] _end_isNaturallyAligned[509894]
    }
    (509911 'move' ret[509896](509910 'deref' 0))
    label _end_isNaturallyAligned[509894]
    (509898 return ret[509896])
  }
  where {
    unknown tmp[419545] "maybe param" "temp"
    (419556 'move' tmp[419545](374285 call stridable _mt[243] this[67309]))
    unknown call_tmp[618146] "expr temp" "maybe param" "maybe type" "temp"
    (618149 'move' call_tmp[618146](419558 call _cond_invalid tmp[419545]))
    if call_tmp[618146]
    {
      (419561 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556310] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556311] "maybe param" "temp"
    unknown call_tmp[618151] "expr temp" "maybe param" "maybe type" "temp"
    (618154 'move' call_tmp[618151](419546 call isTrue tmp[419545]))
    (556316 'move' tmp[556311](556314 call _cond_test call_tmp[618151]))
    if tmp[556311]
    {
      unknown tmp[556318] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618158] "expr temp" "maybe param" "maybe type" "temp"
      (618161 'move' call_tmp[618158](67316 call boundedType _mt[243] this[67309]))
      unknown call_tmp[618163] "expr temp" "maybe param" "maybe type" "temp"
      (618166 'move' call_tmp[618163](67323 call == call_tmp[618158] bounded[64205]))
      (556320 'move' tmp[556318](419549 call isTrue call_tmp[618163]))
      (556325 'move' tmp[556310](556322 '_paramFoldLogical' tmp[556311] tmp[556318]))
    }
    {
      (556330 'move' tmp[556310](556327 '_paramFoldLogical' tmp[556311] 0))
    }
    (748271 call chpl_statementLevelSymbol tmp[556310])
  }
  function range[64316](?).isNaturallyAligned[67373](arg _mt[67378]:_MT[238], arg this[67375]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509915] "RVV" "param" "temp"
    (509920 'move' ret[509915](509919 'deref' 1))
    (509917 return ret[509915])
  }
  where {
    unknown tmp[419566] "maybe param" "temp"
    unknown call_tmp[618170] "expr temp" "maybe param" "maybe type" "temp"
    (618173 'move' call_tmp[618170](374308 call stridable _mt[243] this[67375]))
    (419577 'move' tmp[419566](67381 call ! call_tmp[618170]))
    unknown call_tmp[618175] "expr temp" "maybe param" "maybe type" "temp"
    (618178 'move' call_tmp[618175](419579 call _cond_invalid tmp[419566]))
    if call_tmp[618175]
    {
      (419582 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556337] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556338] "maybe param" "temp"
    unknown call_tmp[618180] "expr temp" "maybe param" "maybe type" "temp"
    (618183 'move' call_tmp[618180](419567 call isTrue tmp[419566]))
    (556343 'move' tmp[556338](556341 call _cond_test call_tmp[618180]))
    if tmp[556338]
    {
      unknown tmp[556345] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618187] "expr temp" "maybe param" "maybe type" "temp"
      (618190 'move' call_tmp[618187](67384 call boundedType _mt[243] this[67375]))
      unknown call_tmp[618192] "expr temp" "maybe param" "maybe type" "temp"
      (618195 'move' call_tmp[618192](67391 call == call_tmp[618187] bounded[64205]))
      (556347 'move' tmp[556345](419570 call isTrue call_tmp[618192]))
      (556352 'move' tmp[556337](556349 '_paramFoldLogical' tmp[556338] tmp[556345]))
    }
    {
      (556357 'move' tmp[556337](556354 '_paramFoldLogical' tmp[556338] 0))
    }
    (748273 call chpl_statementLevelSymbol tmp[556337])
  }
  function range[64316](?).isNaturallyAligned[67405](arg _mt[67410]:_MT[238], arg this[67407]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509924] "RVV" "temp"
    unknown call_tmp[618199] "expr temp" "maybe param" "maybe type" "temp"
    (618202 'move' call_tmp[618199](67428 call alignedLowAsInt _mt[243] this[67407]))
    unknown call_tmp[618206] "expr temp" "maybe param" "maybe type" "temp"
    (618209 'move' call_tmp[618206](374318 call _low _mt[243] this[67407]))
    unknown call_tmp[618211] "expr temp" "maybe param" "maybe type" "temp"
    (618214 'move' call_tmp[618211](67432 call == call_tmp[618199] call_tmp[618206]))
    (509929 'move' ret[509924](509928 'deref' call_tmp[618211]))
    (509926 return ret[509924])
  }
  where {
    unknown tmp[419587] "maybe param" "temp"
    unknown call_tmp[618218] "expr temp" "maybe param" "maybe type" "temp"
    (618221 'move' call_tmp[618218](374313 call stridable _mt[243] this[67407]))
    (419598 'move' tmp[419587](67413 call ! call_tmp[618218]))
    unknown call_tmp[618223] "expr temp" "maybe param" "maybe type" "temp"
    (618226 'move' call_tmp[618223](419600 call _cond_invalid tmp[419587]))
    if call_tmp[618223]
    {
      (419603 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556364] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556365] "maybe param" "temp"
    unknown call_tmp[618228] "expr temp" "maybe param" "maybe type" "temp"
    (618231 'move' call_tmp[618228](419588 call isTrue tmp[419587]))
    (556370 'move' tmp[556365](556368 call _cond_test call_tmp[618228]))
    if tmp[556365]
    {
      unknown tmp[556372] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618235] "expr temp" "maybe param" "maybe type" "temp"
      (618238 'move' call_tmp[618235](67416 call boundedType _mt[243] this[67407]))
      unknown call_tmp[618240] "expr temp" "maybe param" "maybe type" "temp"
      (618243 'move' call_tmp[618240](67423 call == call_tmp[618235] boundedLow[64207]))
      (556374 'move' tmp[556372](419591 call isTrue call_tmp[618240]))
      (556379 'move' tmp[556364](556376 '_paramFoldLogical' tmp[556365] tmp[556372]))
    }
    {
      (556384 'move' tmp[556364](556381 '_paramFoldLogical' tmp[556365] 0))
    }
    (748275 call chpl_statementLevelSymbol tmp[556364])
  }
  function range[64316](?).isNaturallyAligned[67443](arg _mt[67448]:_MT[238], arg this[67445]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509933] "RVV" "temp"
    unknown tmp[419629] "maybe param" "temp"
    unknown call_tmp[618247] "expr temp" "maybe param" "maybe type" "temp"
    (618250 'move' call_tmp[618247](374327 call stride _mt[243] this[67445]))
    (419640 'move' tmp[419629](67465 call > call_tmp[618247] 0))
    unknown call_tmp[618252] "expr temp" "maybe param" "maybe type" "temp"
    (618255 'move' call_tmp[618252](419642 call _cond_invalid tmp[419629]))
    if call_tmp[618252]
    {
      (419645 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556391] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556392] "maybe param" "temp"
    unknown call_tmp[618257] "expr temp" "maybe param" "maybe type" "temp"
    (618260 'move' call_tmp[618257](419630 call isTrue tmp[419629]))
    (556397 'move' tmp[556392](556395 call _cond_test call_tmp[618257]))
    if tmp[556392]
    {
      unknown tmp[556399] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618264] "expr temp" "maybe param" "maybe type" "temp"
      (618267 'move' call_tmp[618264](67468 call alignedLowAsInt _mt[243] this[67445]))
      unknown call_tmp[618271] "expr temp" "maybe param" "maybe type" "temp"
      (618274 'move' call_tmp[618271](374332 call _low _mt[243] this[67445]))
      unknown call_tmp[618276] "expr temp" "maybe param" "maybe type" "temp"
      (618279 'move' call_tmp[618276](67472 call == call_tmp[618264] call_tmp[618271]))
      (556401 'move' tmp[556399](419633 call isTrue call_tmp[618276]))
      (556406 'move' tmp[556391](556403 '_paramFoldLogical' tmp[556392] tmp[556399]))
    }
    {
      (556411 'move' tmp[556391](556408 '_paramFoldLogical' tmp[556392] 0))
    }
    (509938 'move' ret[509933](509937 'deref' tmp[556391]))
    (509935 return ret[509933])
  }
  where {
    unknown tmp[419608] "maybe param" "temp"
    (419619 'move' tmp[419608](374323 call stridable _mt[243] this[67445]))
    unknown call_tmp[618283] "expr temp" "maybe param" "maybe type" "temp"
    (618286 'move' call_tmp[618283](419621 call _cond_invalid tmp[419608]))
    if call_tmp[618283]
    {
      (419624 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556418] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556419] "maybe param" "temp"
    unknown call_tmp[618288] "expr temp" "maybe param" "maybe type" "temp"
    (618291 'move' call_tmp[618288](419609 call isTrue tmp[419608]))
    (556424 'move' tmp[556419](556422 call _cond_test call_tmp[618288]))
    if tmp[556419]
    {
      unknown tmp[556426] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618295] "expr temp" "maybe param" "maybe type" "temp"
      (618298 'move' call_tmp[618295](67452 call boundedType _mt[243] this[67445]))
      unknown call_tmp[618300] "expr temp" "maybe param" "maybe type" "temp"
      (618303 'move' call_tmp[618300](67459 call == call_tmp[618295] boundedLow[64207]))
      (556428 'move' tmp[556426](419612 call isTrue call_tmp[618300]))
      (556433 'move' tmp[556418](556430 '_paramFoldLogical' tmp[556419] tmp[556426]))
    }
    {
      (556438 'move' tmp[556418](556435 '_paramFoldLogical' tmp[556419] 0))
    }
    (748277 call chpl_statementLevelSymbol tmp[556418])
  }
  function range[64316](?).isNaturallyAligned[67485](arg _mt[67490]:_MT[238], arg this[67487]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509942] "RVV" "param" "temp"
    (509947 'move' ret[509942](509946 'deref' 0))
    (509944 return ret[509942])
  }
  where {
    unknown tmp[419650] "maybe param" "temp"
    unknown call_tmp[618307] "expr temp" "maybe param" "maybe type" "temp"
    (618310 'move' call_tmp[618307](67493 call boundedType _mt[243] this[67487]))
    (419661 'move' tmp[419650](67500 call == call_tmp[618307] boundedNone[64211]))
    unknown call_tmp[618312] "expr temp" "maybe param" "maybe type" "temp"
    (618315 'move' call_tmp[618312](419663 call _cond_invalid tmp[419650]))
    if call_tmp[618312]
    {
      (419666 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556472] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556473] "maybe param" "temp"
    unknown call_tmp[618317] "expr temp" "maybe param" "maybe type" "temp"
    (618320 'move' call_tmp[618317](419651 call isTrue tmp[419650]))
    (556478 'move' tmp[556473](556476 call _cond_test call_tmp[618317]))
    if tmp[556473]
    {
      (556483 'move' tmp[556472](556480 '_paramFoldLogical' tmp[556473] 1))
    }
    {
      unknown tmp[419671] "maybe param" "temp"
      unknown call_tmp[618324] "expr temp" "maybe param" "maybe type" "temp"
      (618327 'move' call_tmp[618324](374337 call stridable _mt[243] this[67487]))
      (419682 'move' tmp[419671](67503 call ! call_tmp[618324]))
      unknown call_tmp[618329] "expr temp" "maybe param" "maybe type" "temp"
      (618332 'move' call_tmp[618329](419684 call _cond_invalid tmp[419671]))
      if call_tmp[618329]
      {
        (419687 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556445] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556446] "maybe param" "temp"
      unknown call_tmp[618334] "expr temp" "maybe param" "maybe type" "temp"
      (618337 'move' call_tmp[618334](419672 call isTrue tmp[419671]))
      (556451 'move' tmp[556446](556449 call _cond_test call_tmp[618334]))
      if tmp[556446]
      {
        unknown tmp[556453] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618341] "expr temp" "maybe param" "maybe type" "temp"
        (618344 'move' call_tmp[618341](67506 call boundedType _mt[243] this[67487]))
        unknown call_tmp[618346] "expr temp" "maybe param" "maybe type" "temp"
        (618349 'move' call_tmp[618346](67513 call == call_tmp[618341] boundedHigh[64209]))
        (556455 'move' tmp[556453](419675 call isTrue call_tmp[618346]))
        (556460 'move' tmp[556445](556457 '_paramFoldLogical' tmp[556446] tmp[556453]))
      }
      {
        (556465 'move' tmp[556445](556462 '_paramFoldLogical' tmp[556446] 0))
      }
      unknown tmp[556485] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556487 'move' tmp[556485](419655 call isTrue tmp[556445]))
      (556492 'move' tmp[556472](556489 '_paramFoldLogical' tmp[556473] tmp[556485]))
    }
    (748279 call chpl_statementLevelSymbol tmp[556472])
  }
  function range[64316](?).isNaturallyAligned[67529](arg _mt[67534]:_MT[238], arg this[67531]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509951] "RVV" "temp"
    unknown tmp[419713] "maybe param" "temp"
    unknown call_tmp[618353] "expr temp" "maybe param" "maybe type" "temp"
    (618356 'move' call_tmp[618353](374346 call stride _mt[243] this[67531]))
    (419724 'move' tmp[419713](67551 call < call_tmp[618353] 0))
    unknown call_tmp[618358] "expr temp" "maybe param" "maybe type" "temp"
    (618361 'move' call_tmp[618358](419726 call _cond_invalid tmp[419713]))
    if call_tmp[618358]
    {
      (419729 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556499] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556500] "maybe param" "temp"
    unknown call_tmp[618363] "expr temp" "maybe param" "maybe type" "temp"
    (618366 'move' call_tmp[618363](419714 call isTrue tmp[419713]))
    (556505 'move' tmp[556500](556503 call _cond_test call_tmp[618363]))
    if tmp[556500]
    {
      unknown tmp[556507] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618370] "expr temp" "maybe param" "maybe type" "temp"
      (618373 'move' call_tmp[618370](67554 call alignedHighAsInt _mt[243] this[67531]))
      unknown call_tmp[618377] "expr temp" "maybe param" "maybe type" "temp"
      (618380 'move' call_tmp[618377](374351 call _high _mt[243] this[67531]))
      unknown call_tmp[618382] "expr temp" "maybe param" "maybe type" "temp"
      (618385 'move' call_tmp[618382](67558 call == call_tmp[618370] call_tmp[618377]))
      (556509 'move' tmp[556507](419717 call isTrue call_tmp[618382]))
      (556514 'move' tmp[556499](556511 '_paramFoldLogical' tmp[556500] tmp[556507]))
    }
    {
      (556519 'move' tmp[556499](556516 '_paramFoldLogical' tmp[556500] 0))
    }
    (509956 'move' ret[509951](509955 'deref' tmp[556499]))
    (509953 return ret[509951])
  }
  where {
    unknown tmp[419692] "maybe param" "temp"
    (419703 'move' tmp[419692](374342 call stridable _mt[243] this[67531]))
    unknown call_tmp[618389] "expr temp" "maybe param" "maybe type" "temp"
    (618392 'move' call_tmp[618389](419705 call _cond_invalid tmp[419692]))
    if call_tmp[618389]
    {
      (419708 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556526] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556527] "maybe param" "temp"
    unknown call_tmp[618394] "expr temp" "maybe param" "maybe type" "temp"
    (618397 'move' call_tmp[618394](419693 call isTrue tmp[419692]))
    (556532 'move' tmp[556527](556530 call _cond_test call_tmp[618394]))
    if tmp[556527]
    {
      unknown tmp[556534] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618401] "expr temp" "maybe param" "maybe type" "temp"
      (618404 'move' call_tmp[618401](67538 call boundedType _mt[243] this[67531]))
      unknown call_tmp[618406] "expr temp" "maybe param" "maybe type" "temp"
      (618409 'move' call_tmp[618406](67545 call == call_tmp[618401] boundedHigh[64209]))
      (556536 'move' tmp[556534](419696 call isTrue call_tmp[618406]))
      (556541 'move' tmp[556526](556538 '_paramFoldLogical' tmp[556527] tmp[556534]))
    }
    {
      (556546 'move' tmp[556526](556543 '_paramFoldLogical' tmp[556527] 0))
    }
    (748281 call chpl_statementLevelSymbol tmp[556526])
  }
  function range[64316](?).isAmbiguous[67571](arg _mt[67576]:_MT[238], arg this[67573]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509960] "RVV" "param" "temp"
    (509965 'move' ret[509960](509964 'deref' 0))
    (509962 return ret[509960])
  }
  where {
    unknown call_tmp[618413] "expr temp" "maybe param" "maybe type" "temp"
    (618416 'move' call_tmp[618413](374356 call stridable _mt[243] this[67573]))
    (67579 call ! call_tmp[618413])
  }
  function range[64316](?).isAmbiguous[67591](arg _mt[67596]:_MT[238], arg this[67593]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[509969] "RVV" "temp"
    unknown tmp[419734] "maybe param" "temp"
    unknown call_tmp[618420] "expr temp" "maybe param" "maybe type" "temp"
    (618423 'move' call_tmp[618420](374365 call aligned _mt[243] this[67593]))
    (419745 'move' tmp[419734](67600 call ! call_tmp[618420]))
    unknown call_tmp[618425] "expr temp" "maybe param" "maybe type" "temp"
    (618428 'move' call_tmp[618425](419747 call _cond_invalid tmp[419734]))
    if call_tmp[618425]
    {
      (419750 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556580] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556581] "maybe param" "temp"
    unknown call_tmp[618430] "expr temp" "maybe param" "maybe type" "temp"
    (618433 'move' call_tmp[618430](419735 call isTrue tmp[419734]))
    (556586 'move' tmp[556581](556584 call _cond_test call_tmp[618430]))
    if tmp[556581]
    {
      unknown tmp[419755] "maybe param" "temp"
      unknown call_tmp[618437] "expr temp" "maybe param" "maybe type" "temp"
      (618440 'move' call_tmp[618437](374369 call stride _mt[243] this[67593]))
      (419766 'move' tmp[419755](67604 call > call_tmp[618437] 1))
      unknown call_tmp[618442] "expr temp" "maybe param" "maybe type" "temp"
      (618445 'move' call_tmp[618442](419768 call _cond_invalid tmp[419755]))
      if call_tmp[618442]
      {
        (419771 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556553] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556554] "maybe param" "temp"
      unknown call_tmp[618447] "expr temp" "maybe param" "maybe type" "temp"
      (618450 'move' call_tmp[618447](419756 call isTrue tmp[419755]))
      (556559 'move' tmp[556554](556557 call _cond_test call_tmp[618447]))
      if tmp[556554]
      {
        (556564 'move' tmp[556553](556561 '_paramFoldLogical' tmp[556554] 1))
      }
      {
        unknown tmp[556566] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618454] "expr temp" "maybe param" "maybe type" "temp"
        (618457 'move' call_tmp[618454](374373 call stride _mt[243] this[67593]))
        unknown call_tmp[618459] "expr temp" "maybe param" "maybe type" "temp"
        (618462 'move' call_tmp[618459](67608 call - 1))
        unknown call_tmp[618464] "expr temp" "maybe param" "maybe type" "temp"
        (618467 'move' call_tmp[618464](67610 call < call_tmp[618454] call_tmp[618459]))
        (556568 'move' tmp[556566](419760 call isTrue call_tmp[618464]))
        (556573 'move' tmp[556553](556570 '_paramFoldLogical' tmp[556554] tmp[556566]))
      }
      unknown tmp[556588] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556590 'move' tmp[556588](419738 call isTrue tmp[556553]))
      (556595 'move' tmp[556580](556592 '_paramFoldLogical' tmp[556581] tmp[556588]))
    }
    {
      (556600 'move' tmp[556580](556597 '_paramFoldLogical' tmp[556581] 0))
    }
    (509974 'move' ret[509969](509973 'deref' tmp[556580]))
    (509971 return ret[509969])
  }
  where {
    (374361 call stridable _mt[243] this[67593])
  }
  function range[64316](?).contains[67629](arg _mt[67634]:_MT[238], arg this[67631]:range[64316](?) :
  range[64316](?), arg ind[67626] :
  (374378 call idxType _mt[243] this[67631])) : _unknown[51] "inline" "method"
  {
    unknown ret[509978] "RVV" "temp"
    unknown call_tmp[618475] "expr temp" "maybe param" "maybe type" "temp"
    (618478 'move' call_tmp[618475](67643 call(67639 call (partial) isAmbiguous _mt[243] this[67631])))
    unknown call_tmp[618480] "expr temp" "maybe param" "maybe type" "temp"
    (618483 'move' call_tmp[618480](67647 call _cond_test call_tmp[618475]))
    if call_tmp[618480]
    {
      (509983 'move' ret[509978](509982 'deref' 0))
      gotoReturn _end_contains[509976] _end_contains[509976]
    }
    unknown call_tmp[618485] "maybe param" "maybe type" "temp"
    (618488 'move' call_tmp[618485](67656 call chpl__idxToInt ind[67626]))
    const i[67657] "dead at end of block" "const" "insert auto destroy"
    (541092 'init var' i[67657] call_tmp[618485])
    (67660 'end of statement')
    unknown call_tmp[618492] "expr temp" "maybe param" "maybe type" "temp"
    (618495 'move' call_tmp[618492](67663 call(374383 call (partial) hasHighBound _mt[243] this[67631])))
    unknown call_tmp[618497] "expr temp" "maybe param" "maybe type" "temp"
    (618500 'move' call_tmp[618497](67677 call _cond_test call_tmp[618492]))
    if call_tmp[618497]
    {
      unknown call_tmp[618504] "expr temp" "maybe param" "maybe type" "temp"
      (618507 'move' call_tmp[618504](374389 call _high _mt[243] this[67631]))
      unknown call_tmp[618509] "expr temp" "maybe param" "maybe type" "temp"
      (618512 'move' call_tmp[618509](67666 call > i[67657] call_tmp[618504]))
      unknown call_tmp[618514] "expr temp" "maybe param" "maybe type" "temp"
      (618517 'move' call_tmp[618514](67671 call _cond_test call_tmp[618509]))
      if call_tmp[618514]
      {
        (509988 'move' ret[509978](509987 'deref' 0))
        gotoReturn _end_contains[509976] _end_contains[509976]
      }
    }
    unknown call_tmp[618521] "expr temp" "maybe param" "maybe type" "temp"
    (618524 'move' call_tmp[618521](67683 call(374393 call (partial) hasLowBound _mt[243] this[67631])))
    unknown call_tmp[618526] "expr temp" "maybe param" "maybe type" "temp"
    (618529 'move' call_tmp[618526](67697 call _cond_test call_tmp[618521]))
    if call_tmp[618526]
    {
      unknown call_tmp[618533] "expr temp" "maybe param" "maybe type" "temp"
      (618536 'move' call_tmp[618533](374399 call _low _mt[243] this[67631]))
      unknown call_tmp[618538] "expr temp" "maybe param" "maybe type" "temp"
      (618541 'move' call_tmp[618538](67686 call < i[67657] call_tmp[618533]))
      unknown call_tmp[618543] "expr temp" "maybe param" "maybe type" "temp"
      (618546 'move' call_tmp[618543](67691 call _cond_test call_tmp[618538]))
      if call_tmp[618543]
      {
        (509993 'move' ret[509978](509992 'deref' 0))
        gotoReturn _end_contains[509976] _end_contains[509976]
      }
    }
    unknown call_tmp[618550] "expr temp" "maybe param" "maybe type" "temp"
    (618553 'move' call_tmp[618550](374404 call stridable _mt[243] this[67631]))
    unknown call_tmp[618555] "expr temp" "maybe param" "maybe type" "temp"
    (618558 'move' call_tmp[618555](67731 call _cond_test call_tmp[618550]))
    if call_tmp[618555]
    {
      unknown call_tmp[618562] "expr temp" "maybe param" "maybe type" "temp"
      (618565 'move' call_tmp[618562](374413 call intIdxType _mt[243] this[67631]))
      unknown call_tmp[618569] "expr temp" "maybe param" "maybe type" "temp"
      (618572 'move' call_tmp[618569](374409 call _stride _mt[243] this[67631]))
      unknown call_tmp[618574] "expr temp" "maybe param" "maybe type" "temp"
      (618577 'move' call_tmp[618574](67705 call abs call_tmp[618569]))
      unknown call_tmp[618579] "maybe param" "maybe type" "temp"
      (618582 'move' call_tmp[618579](67707 call _cast call_tmp[618562] call_tmp[618574]))
      unknown s[67709] "dead at end of block" "insert auto destroy"
      (541094 'init var' s[67709] call_tmp[618579])
      (67712 'end of statement')
      unknown call_tmp[618586] "expr temp" "maybe param" "maybe type" "temp"
      (618589 'move' call_tmp[618586](374419 call _alignment _mt[243] this[67631]))
      unknown call_tmp[618591] "expr temp" "maybe param" "maybe type" "temp"
      (618594 'move' call_tmp[618591](67719 call chpl__diffMod i[67657] call_tmp[618586] s[67709]))
      unknown call_tmp[618596] "expr temp" "maybe param" "maybe type" "temp"
      (618599 'move' call_tmp[618596](67721 call != call_tmp[618591] 0))
      unknown call_tmp[618601] "expr temp" "maybe param" "maybe type" "temp"
      (618604 'move' call_tmp[618601](67726 call _cond_test call_tmp[618596]))
      if call_tmp[618601]
      {
        (509998 'move' ret[509978](509997 'deref' 0))
        gotoReturn _end_contains[509976] _end_contains[509976]
      }
    }
    (510003 'move' ret[509978](510002 'deref' 1))
    label _end_contains[509976]
    (509980 return ret[509978])
  }
  function range[64316](?).contains[67750](arg _mt[67755]:_MT[238], arg this[67752]:range[64316](?) :
  range[64316](?), arg other[67747]:range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510007] "RVV" "temp"
    unknown tmp[419776] "maybe param" "temp"
    (419787 'move' tmp[419776](67762 call(67758 call (partial) isAmbiguous _mt[243] this[67752])))
    unknown call_tmp[618608] "expr temp" "maybe param" "maybe type" "temp"
    (618611 'move' call_tmp[618608](419789 call _cond_invalid tmp[419776]))
    if call_tmp[618608]
    {
      (419792 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556607] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556608] "maybe param" "temp"
    unknown call_tmp[618613] "expr temp" "maybe param" "maybe type" "temp"
    (618616 'move' call_tmp[618613](419777 call isTrue tmp[419776]))
    (556613 'move' tmp[556608](556611 call _cond_test call_tmp[618613]))
    if tmp[556608]
    {
      (556618 'move' tmp[556607](556615 '_paramFoldLogical' tmp[556608] 1))
    }
    {
      unknown tmp[556620] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618620] "expr temp" "maybe param" "maybe type" "temp"
      (618623 'move' call_tmp[618620](67768 call(67764 call (partial) isAmbiguous _mt[243] other[67747])))
      (556622 'move' tmp[556620](419781 call isTrue call_tmp[618620]))
      (556627 'move' tmp[556607](556624 '_paramFoldLogical' tmp[556608] tmp[556620]))
    }
    unknown call_tmp[618625] "expr temp" "maybe param" "maybe type" "temp"
    (618628 'move' call_tmp[618625](67774 call _cond_test tmp[556607]))
    if call_tmp[618625]
    {
      (510012 'move' ret[510007](510011 'deref' 0))
      gotoReturn _end_contains[510005] _end_contains[510005]
    }
    unknown call_tmp[618632] "expr temp" "maybe param" "maybe type" "temp"
    (618635 'move' call_tmp[618632](374426 call stridable _mt[243] this[67752]))
    unknown call_tmp[618637] "expr temp" "maybe param" "maybe type" "temp"
    (618640 'move' call_tmp[618637](67842 call _cond_test call_tmp[618632]))
    if call_tmp[618637]
    {
      unknown tmp[419797] "maybe param" "temp"
      unknown tmp[419818] "maybe param" "temp"
      unknown call_tmp[618644] "expr temp" "maybe param" "maybe type" "temp"
      (618647 'move' call_tmp[618644](374430 call stride _mt[243] this[67752]))
      (419829 'move' tmp[419818](67783 call > call_tmp[618644] 0))
      unknown call_tmp[618649] "expr temp" "maybe param" "maybe type" "temp"
      (618652 'move' call_tmp[618649](419831 call _cond_invalid tmp[419818]))
      if call_tmp[618649]
      {
        (419834 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556634] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556635] "maybe param" "temp"
      unknown call_tmp[618654] "expr temp" "maybe param" "maybe type" "temp"
      (618657 'move' call_tmp[618654](419819 call isTrue tmp[419818]))
      (556640 'move' tmp[556635](556638 call _cond_test call_tmp[618654]))
      if tmp[556635]
      {
        unknown tmp[556642] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618661] "expr temp" "maybe param" "maybe type" "temp"
        (618664 'move' call_tmp[618661](67786 call stride _mt[243] other[67747]))
        unknown call_tmp[618666] "expr temp" "maybe param" "maybe type" "temp"
        (618669 'move' call_tmp[618666](67790 call < call_tmp[618661] 0))
        (556644 'move' tmp[556642](419822 call isTrue call_tmp[618666]))
        (556649 'move' tmp[556634](556646 '_paramFoldLogical' tmp[556635] tmp[556642]))
      }
      {
        (556654 'move' tmp[556634](556651 '_paramFoldLogical' tmp[556635] 0))
      }
      (419808 'move' tmp[419797] tmp[556634])
      unknown call_tmp[618671] "expr temp" "maybe param" "maybe type" "temp"
      (618674 'move' call_tmp[618671](419810 call _cond_invalid tmp[419797]))
      if call_tmp[618671]
      {
        (419813 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556688] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556689] "maybe param" "temp"
      unknown call_tmp[618676] "expr temp" "maybe param" "maybe type" "temp"
      (618679 'move' call_tmp[618676](419798 call isTrue tmp[419797]))
      (556694 'move' tmp[556689](556692 call _cond_test call_tmp[618676]))
      if tmp[556689]
      {
        (556699 'move' tmp[556688](556696 '_paramFoldLogical' tmp[556689] 1))
      }
      {
        unknown tmp[419839] "maybe param" "temp"
        unknown call_tmp[618683] "expr temp" "maybe param" "maybe type" "temp"
        (618686 'move' call_tmp[618683](374434 call stride _mt[243] this[67752]))
        (419850 'move' tmp[419839](67796 call < call_tmp[618683] 0))
        unknown call_tmp[618688] "expr temp" "maybe param" "maybe type" "temp"
        (618691 'move' call_tmp[618688](419852 call _cond_invalid tmp[419839]))
        if call_tmp[618688]
        {
          (419855 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[556661] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[556662] "maybe param" "temp"
        unknown call_tmp[618693] "expr temp" "maybe param" "maybe type" "temp"
        (618696 'move' call_tmp[618693](419840 call isTrue tmp[419839]))
        (556667 'move' tmp[556662](556665 call _cond_test call_tmp[618693]))
        if tmp[556662]
        {
          unknown tmp[556669] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[618700] "expr temp" "maybe param" "maybe type" "temp"
          (618703 'move' call_tmp[618700](67799 call stride _mt[243] other[67747]))
          unknown call_tmp[618705] "expr temp" "maybe param" "maybe type" "temp"
          (618708 'move' call_tmp[618705](67803 call > call_tmp[618700] 0))
          (556671 'move' tmp[556669](419843 call isTrue call_tmp[618705]))
          (556676 'move' tmp[556661](556673 '_paramFoldLogical' tmp[556662] tmp[556669]))
        }
        {
          (556681 'move' tmp[556661](556678 '_paramFoldLogical' tmp[556662] 0))
        }
        unknown tmp[556701] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556703 'move' tmp[556701](419802 call isTrue tmp[556661]))
        (556708 'move' tmp[556688](556705 '_paramFoldLogical' tmp[556689] tmp[556701]))
      }
      unknown call_tmp[618710] "expr temp" "maybe param" "maybe type" "temp"
      (618713 'move' call_tmp[618710](67816 call _cond_test tmp[556688]))
      if call_tmp[618710]
      {
        unknown call_tmp[618715] "expr temp" "maybe param" "maybe type" "temp"
        (618718 'move' call_tmp[618715](67813 call _containsHelp this[67752] other[67747]))
        (510017 'move' ret[510007](510016 'deref' call_tmp[618715]))
        gotoReturn _end_contains[510005] _end_contains[510005]
      }
    }
    {
      unknown call_tmp[618722] "expr temp" "maybe param" "maybe type" "temp"
      (618725 'move' call_tmp[618722](67823 call stride _mt[243] other[67747]))
      unknown call_tmp[618727] "expr temp" "maybe param" "maybe type" "temp"
      (618730 'move' call_tmp[618727](67827 call < call_tmp[618722] 0))
      unknown call_tmp[618732] "expr temp" "maybe param" "maybe type" "temp"
      (618735 'move' call_tmp[618732](67836 call _cond_test call_tmp[618727]))
      if call_tmp[618732]
      {
        unknown call_tmp[618737] "expr temp" "maybe param" "maybe type" "temp"
        (618740 'move' call_tmp[618737](67833 call _containsHelp this[67752] other[67747]))
        (510022 'move' ret[510007](510021 'deref' call_tmp[618737]))
        gotoReturn _end_contains[510005] _end_contains[510005]
      }
    }
    unknown call_tmp[618742] "expr temp" "maybe param" "maybe type" "temp"
    (618745 'move' call_tmp[618742](67850 call this[67752] other[67747]))
    unknown call_tmp[618747] "expr temp" "maybe param" "maybe type" "temp"
    (618750 'move' call_tmp[618747](67851 call == other[67747] call_tmp[618742]))
    (510027 'move' ret[510007](510026 'deref' call_tmp[618747]))
    label _end_contains[510005]
    (510009 return ret[510007])
  }
  function range[64316](?).member[67864](arg _mt[67869]:_MT[238], arg this[67866]:range[64316](?) :
  range[64316](?), arg ind[67861] :
  (374446 call idxType _mt[243] this[67866])) : _unknown[51] "inline" "method"
  {
    unknown ret[510031] "RVV" "temp"
    unknown call_tmp[618754] "expr temp" "maybe param" "maybe type" "temp"
    (618757 'move' call_tmp[618754](67906 call + "range.member is deprecated - " "please use range.contains instead"))
    (67909 call compilerWarning call_tmp[618754])
    (475458 'end of statement')
    unknown call_tmp[618761] "expr temp" "maybe param" "maybe type" "temp"
    (618764 'move' call_tmp[618761](67920 call(67915 call (partial) contains _mt[243] this[67866]) ind[67861]))
    (510036 'move' ret[510031](510035 'deref' call_tmp[618761]))
    (510033 return ret[510031])
  }
  function range[64316](?).member[67935](arg _mt[67940]:_MT[238], arg this[67937]:range[64316](?) :
  range[64316](?), arg other[67932]:range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510040] "RVV" "temp"
    unknown call_tmp[618766] "expr temp" "maybe param" "maybe type" "temp"
    (618769 'move' call_tmp[618766](67945 call + "range.member is deprecated - " "please use range.contains instead"))
    (67948 call compilerWarning call_tmp[618766])
    (475460 'end of statement')
    unknown call_tmp[618773] "expr temp" "maybe param" "maybe type" "temp"
    (618776 'move' call_tmp[618773](67957 call(67952 call (partial) contains _mt[243] this[67937]) other[67932]))
    (510045 'move' ret[510040](510044 'deref' call_tmp[618773]))
    (510042 return ret[510040])
  }
  function _containsHelp[67971](in arg arg1[67968]:range[64316](?), in arg arg2[67977]:range[64316](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[510049] "RVV" "temp"
    unknown call_tmp[618780] "expr temp" "maybe param" "maybe type" "temp"
    (618783 'move' call_tmp[618780](67981 call stridable _mt[243] arg2[67977]))
    unknown call_tmp[618785] "expr temp" "maybe param" "maybe type" "temp"
    (618788 'move' call_tmp[618785](68010 call _cond_test call_tmp[618780]))
    if call_tmp[618785]
    {
      unknown call_tmp[618792] "expr temp" "maybe param" "maybe type" "temp"
      (618795 'move' call_tmp[618792](67985 call _stride _mt[243] arg2[67977]))
      unknown call_tmp[618799] "expr temp" "maybe param" "maybe type" "temp"
      (618802 'move' call_tmp[618799](67989 call _stride _mt[243] arg2[67977]))
      unknown call_tmp[618804] "expr temp" "maybe param" "maybe type" "temp"
      (618807 'move' call_tmp[618804](67992 call - call_tmp[618799]))
      (67994 call = call_tmp[618792] call_tmp[618804])
    }
    {
      unknown call_tmp[618811] "expr temp" "maybe param" "maybe type" "temp"
      (618814 'move' call_tmp[618811](67998 call _stride _mt[243] arg1[67968]))
      unknown call_tmp[618818] "expr temp" "maybe param" "maybe type" "temp"
      (618821 'move' call_tmp[618818](68002 call _stride _mt[243] arg1[67968]))
      unknown call_tmp[618823] "expr temp" "maybe param" "maybe type" "temp"
      (618826 'move' call_tmp[618823](68005 call - call_tmp[618818]))
      (68007 call = call_tmp[618811] call_tmp[618823])
    }
    unknown call_tmp[618828] "expr temp" "maybe param" "maybe type" "temp"
    (618831 'move' call_tmp[618828](68021 call arg1[67968] arg2[67977]))
    unknown call_tmp[618833] "expr temp" "maybe param" "maybe type" "temp"
    (618836 'move' call_tmp[618833](68022 call == arg2[67977] call_tmp[618828]))
    (510054 'move' ret[510049](510053 'deref' call_tmp[618833]))
    (510051 return ret[510049])
  }
  function ==[68037](arg r1[68034]:range[64316](?), arg r2[68043]:range[64316](?)) param : _unknown[51]
  {
    unknown ret[510058] "RVV" "param" "temp"
    (510063 'move' ret[510058](510062 'deref' 0))
    (510060 return ret[510058])
  }
  where {
    unknown call_tmp[618840] "expr temp" "maybe param" "maybe type" "temp"
    (618843 'move' call_tmp[618840](68047 call boundedType _mt[243] r1[68034]))
    unknown call_tmp[618847] "expr temp" "maybe param" "maybe type" "temp"
    (618850 'move' call_tmp[618847](68051 call boundedType _mt[243] r2[68043]))
    (68054 call != call_tmp[618840] call_tmp[618847])
  }
  function ==[68072](arg r1[68069]:range[64316](?), arg r2[68078]:range[64316](?)) : _unknown[51]
  {
    unknown ret[510067] "RVV" "temp"
    unknown call_tmp[618854] "expr temp" "maybe param" "maybe type" "temp"
    (618857 'move' call_tmp[618854](68097 call(68093 call (partial) isAmbiguous _mt[243] r1[68069])))
    unknown call_tmp[618861] "expr temp" "maybe param" "maybe type" "temp"
    (618864 'move' call_tmp[618861](68103 call(68099 call (partial) isAmbiguous _mt[243] r2[68078])))
    unknown call_tmp[618866] "expr temp" "maybe param" "maybe type" "temp"
    (618869 'move' call_tmp[618866](68104 call != call_tmp[618854] call_tmp[618861]))
    unknown call_tmp[618871] "expr temp" "maybe param" "maybe type" "temp"
    (618874 'move' call_tmp[618871](68109 call _cond_test call_tmp[618866]))
    if call_tmp[618871]
    {
      (510073 'move' ret[510067](510072 'coerce' 0 bool[10]))
      gotoReturn _end_==[510065] _end_==[510065]
    }
    unknown call_tmp[618878] "expr temp" "maybe param" "maybe type" "temp"
    (618881 'move' call_tmp[618878](68120 call(68116 call (partial) isAmbiguous _mt[243] r1[68069])))
    unknown call_tmp[618883] "expr temp" "maybe param" "maybe type" "temp"
    (618886 'move' call_tmp[618883](68128 call _cond_test call_tmp[618878]))
    if call_tmp[618883]
    {
      unknown call_tmp[618888] "expr temp" "maybe param" "maybe type" "temp"
      (618891 'move' call_tmp[618888](68125 call ident r1[68069] r2[68078]))
      (510079 'move' ret[510067](510078 'coerce' call_tmp[618888] bool[10]))
      gotoReturn _end_==[510065] _end_==[510065]
    }
    unknown call_tmp[618893] "expr temp" "maybe param" "maybe type" "temp"
    (618896 'move' call_tmp[618893](68136 call isBoundedRange r1[68069]))
    unknown call_tmp[618898] "expr temp" "maybe param" "maybe type" "temp"
    (618901 'move' call_tmp[618898](68310 call _cond_test call_tmp[618893]))
    if call_tmp[618898]
    {
      unknown call_tmp[618905] "maybe param" "maybe type" "temp"
      (618908 'move' call_tmp[618905](68138 call size _mt[243] r1[68069]))
      const len[68141] "dead at end of block" "const" "insert auto destroy"
      (541096 'init var' len[68141] call_tmp[618905])
      unknown call_tmp[618912] "maybe param" "maybe type" "temp"
      (618915 'move' call_tmp[618912](68145 call size _mt[243] r2[68078]))
      const l2[68148] "dead at end of block" "const" "insert auto destroy"
      (541098 'init var' l2[68148] call_tmp[618912])
      (68151 'end of statement')
      unknown call_tmp[618917] "expr temp" "maybe param" "maybe type" "temp"
      (618920 'move' call_tmp[618917](68155 call != len[68141] l2[68148]))
      unknown call_tmp[618922] "expr temp" "maybe param" "maybe type" "temp"
      (618925 'move' call_tmp[618922](68160 call _cond_test call_tmp[618917]))
      if call_tmp[618922]
      {
        (510085 'move' ret[510067](510084 'coerce' 0 bool[10]))
        gotoReturn _end_==[510065] _end_==[510065]
      }
      unknown call_tmp[618927] "expr temp" "maybe param" "maybe type" "temp"
      (618930 'move' call_tmp[618927](68167 call == len[68141] 0))
      unknown call_tmp[618932] "expr temp" "maybe param" "maybe type" "temp"
      (618935 'move' call_tmp[618932](68172 call _cond_test call_tmp[618927]))
      if call_tmp[618932]
      {
        (510091 'move' ret[510067](510090 'coerce' 1 bool[10]))
        gotoReturn _end_==[510065] _end_==[510065]
      }
      unknown call_tmp[618939] "expr temp" "maybe param" "maybe type" "temp"
      (618942 'move' call_tmp[618939](68180 call first _mt[243] r1[68069]))
      unknown call_tmp[618946] "expr temp" "maybe param" "maybe type" "temp"
      (618949 'move' call_tmp[618946](68184 call first _mt[243] r2[68078]))
      unknown call_tmp[618951] "expr temp" "maybe param" "maybe type" "temp"
      (618954 'move' call_tmp[618951](68187 call != call_tmp[618939] call_tmp[618946]))
      unknown call_tmp[618956] "expr temp" "maybe param" "maybe type" "temp"
      (618959 'move' call_tmp[618956](68192 call _cond_test call_tmp[618951]))
      if call_tmp[618956]
      {
        (510097 'move' ret[510067](510096 'coerce' 0 bool[10]))
        gotoReturn _end_==[510065] _end_==[510065]
      }
      unknown call_tmp[618961] "expr temp" "maybe param" "maybe type" "temp"
      (618964 'move' call_tmp[618961](68199 call == len[68141] 1))
      unknown call_tmp[618966] "expr temp" "maybe param" "maybe type" "temp"
      (618969 'move' call_tmp[618966](68204 call _cond_test call_tmp[618961]))
      if call_tmp[618966]
      {
        (510103 'move' ret[510067](510102 'coerce' 1 bool[10]))
        gotoReturn _end_==[510065] _end_==[510065]
      }
      unknown call_tmp[618973] "expr temp" "maybe param" "maybe type" "temp"
      (618976 'move' call_tmp[618973](68210 call stride _mt[243] r1[68069]))
      unknown call_tmp[618980] "expr temp" "maybe param" "maybe type" "temp"
      (618983 'move' call_tmp[618980](68214 call stride _mt[243] r2[68078]))
      unknown call_tmp[618985] "expr temp" "maybe param" "maybe type" "temp"
      (618988 'move' call_tmp[618985](68217 call != call_tmp[618973] call_tmp[618980]))
      unknown call_tmp[618990] "expr temp" "maybe param" "maybe type" "temp"
      (618993 'move' call_tmp[618990](68222 call _cond_test call_tmp[618985]))
      if call_tmp[618990]
      {
        (510109 'move' ret[510067](510108 'coerce' 0 bool[10]))
        gotoReturn _end_==[510065] _end_==[510065]
      }
      (510115 'move' ret[510067](510114 'coerce' 1 bool[10]))
      gotoReturn _end_==[510065] _end_==[510065]
    }
    {
      unknown call_tmp[618997] "expr temp" "maybe param" "maybe type" "temp"
      (619000 'move' call_tmp[618997](68231 call stride _mt[243] r1[68069]))
      unknown call_tmp[619004] "expr temp" "maybe param" "maybe type" "temp"
      (619007 'move' call_tmp[619004](68235 call stride _mt[243] r2[68078]))
      unknown call_tmp[619009] "expr temp" "maybe param" "maybe type" "temp"
      (619012 'move' call_tmp[619009](68238 call != call_tmp[618997] call_tmp[619004]))
      unknown call_tmp[619014] "expr temp" "maybe param" "maybe type" "temp"
      (619017 'move' call_tmp[619014](68243 call _cond_test call_tmp[619009]))
      if call_tmp[619014]
      {
        (510121 'move' ret[510067](510120 'coerce' 0 bool[10]))
        gotoReturn _end_==[510065] _end_==[510065]
      }
      unknown call_tmp[619021] "expr temp" "maybe param" "maybe type" "temp"
      (619024 'move' call_tmp[619021](68254 call(68250 call (partial) hasLowBound _mt[243] r1[68069])))
      unknown call_tmp[619026] "expr temp" "maybe param" "maybe type" "temp"
      (619029 'move' call_tmp[619026](68273 call _cond_test call_tmp[619021]))
      if call_tmp[619026]
      {
        unknown call_tmp[619033] "expr temp" "maybe param" "maybe type" "temp"
        (619036 'move' call_tmp[619033](68256 call alignedLow _mt[243] r1[68069]))
        unknown call_tmp[619040] "expr temp" "maybe param" "maybe type" "temp"
        (619043 'move' call_tmp[619040](68260 call alignedLow _mt[243] r2[68078]))
        unknown call_tmp[619045] "expr temp" "maybe param" "maybe type" "temp"
        (619048 'move' call_tmp[619045](68263 call != call_tmp[619033] call_tmp[619040]))
        unknown call_tmp[619050] "expr temp" "maybe param" "maybe type" "temp"
        (619053 'move' call_tmp[619050](68268 call _cond_test call_tmp[619045]))
        if call_tmp[619050]
        {
          (510127 'move' ret[510067](510126 'coerce' 0 bool[10]))
          gotoReturn _end_==[510065] _end_==[510065]
        }
      }
      unknown call_tmp[619057] "expr temp" "maybe param" "maybe type" "temp"
      (619060 'move' call_tmp[619057](68283 call(68279 call (partial) hasHighBound _mt[243] r1[68069])))
      unknown call_tmp[619062] "expr temp" "maybe param" "maybe type" "temp"
      (619065 'move' call_tmp[619062](68302 call _cond_test call_tmp[619057]))
      if call_tmp[619062]
      {
        unknown call_tmp[619069] "expr temp" "maybe param" "maybe type" "temp"
        (619072 'move' call_tmp[619069](68285 call alignedHigh _mt[243] r1[68069]))
        unknown call_tmp[619076] "expr temp" "maybe param" "maybe type" "temp"
        (619079 'move' call_tmp[619076](68289 call alignedHigh _mt[243] r2[68078]))
        unknown call_tmp[619081] "expr temp" "maybe param" "maybe type" "temp"
        (619084 'move' call_tmp[619081](68292 call != call_tmp[619069] call_tmp[619076]))
        unknown call_tmp[619086] "expr temp" "maybe param" "maybe type" "temp"
        (619089 'move' call_tmp[619086](68297 call _cond_test call_tmp[619081]))
        if call_tmp[619086]
        {
          (510133 'move' ret[510067](510132 'coerce' 0 bool[10]))
          gotoReturn _end_==[510065] _end_==[510065]
        }
      }
      (510139 'move' ret[510067](510138 'coerce' 1 bool[10]))
      gotoReturn _end_==[510065] _end_==[510065]
    }
    label _end_==[510065]
    (510069 return ret[510067])
  }
  where {
    unknown call_tmp[619093] "expr temp" "maybe param" "maybe type" "temp"
    (619096 'move' call_tmp[619093](68083 call boundedType _mt[243] r1[68069]))
    unknown call_tmp[619100] "expr temp" "maybe param" "maybe type" "temp"
    (619103 'move' call_tmp[619100](68087 call boundedType _mt[243] r2[68078]))
    (68090 call == call_tmp[619093] call_tmp[619100])
  }
  { scopeless type
    bool[10]
  }
  function !=[68327](arg r1[68324]:range[64316](?), arg r2[68333]:range[64316](?)) : _unknown[51]
  {
    unknown ret[510145] "RVV" "temp"
    unknown call_tmp[619105] "expr temp" "maybe param" "maybe type" "temp"
    (619108 'move' call_tmp[619105](68338 call == r1[68324] r2[68333]))
    unknown call_tmp[619110] "expr temp" "maybe param" "maybe type" "temp"
    (619113 'move' call_tmp[619110](68340 call ! call_tmp[619105]))
    (510150 'move' ret[510145](510149 'deref' call_tmp[619110]))
    (510147 return ret[510145])
  }
  function ident[68356](arg r1[68353]:range[64316](?), arg r2[68362]:range[64316](?)) : _unknown[51]
  {
    unknown ret[510154] "RVV" "temp"
    unknown call_tmp[619117] "expr temp" "maybe param" "maybe type" "temp"
    (619120 'move' call_tmp[619117](68400 call _low _mt[243] r1[68353]))
    unknown call_tmp[619124] "expr temp" "maybe param" "maybe type" "temp"
    (619127 'move' call_tmp[619124](68404 call _low _mt[243] r2[68362]))
    unknown call_tmp[619129] "expr temp" "maybe param" "maybe type" "temp"
    (619132 'move' call_tmp[619129](68407 call != call_tmp[619117] call_tmp[619124]))
    unknown call_tmp[619134] "expr temp" "maybe param" "maybe type" "temp"
    (619137 'move' call_tmp[619134](68412 call _cond_test call_tmp[619129]))
    if call_tmp[619134]
    {
      (510159 'move' ret[510154](510158 'deref' 0))
      gotoReturn _end_ident[510152] _end_ident[510152]
    }
    unknown call_tmp[619141] "expr temp" "maybe param" "maybe type" "temp"
    (619144 'move' call_tmp[619141](68419 call _high _mt[243] r1[68353]))
    unknown call_tmp[619148] "expr temp" "maybe param" "maybe type" "temp"
    (619151 'move' call_tmp[619148](68423 call _high _mt[243] r2[68362]))
    unknown call_tmp[619153] "expr temp" "maybe param" "maybe type" "temp"
    (619156 'move' call_tmp[619153](68426 call != call_tmp[619141] call_tmp[619148]))
    unknown call_tmp[619158] "expr temp" "maybe param" "maybe type" "temp"
    (619161 'move' call_tmp[619158](68431 call _cond_test call_tmp[619153]))
    if call_tmp[619158]
    {
      (510164 'move' ret[510154](510163 'deref' 0))
      gotoReturn _end_ident[510152] _end_ident[510152]
    }
    unknown call_tmp[619165] "expr temp" "maybe param" "maybe type" "temp"
    (619168 'move' call_tmp[619165](68437 call stridable _mt[243] r1[68353]))
    unknown call_tmp[619170] "expr temp" "maybe param" "maybe type" "temp"
    (619173 'move' call_tmp[619170](68508 call _cond_test call_tmp[619165]))
    if call_tmp[619170]
    {
      unknown call_tmp[619177] "expr temp" "maybe param" "maybe type" "temp"
      (619180 'move' call_tmp[619177](68441 call stridable _mt[243] r2[68362]))
      unknown call_tmp[619182] "expr temp" "maybe param" "maybe type" "temp"
      (619185 'move' call_tmp[619182](68503 call _cond_test call_tmp[619177]))
      if call_tmp[619182]
      {
        unknown call_tmp[619189] "expr temp" "maybe param" "maybe type" "temp"
        (619192 'move' call_tmp[619189](68445 call _stride _mt[243] r1[68353]))
        unknown call_tmp[619196] "expr temp" "maybe param" "maybe type" "temp"
        (619199 'move' call_tmp[619196](68449 call _stride _mt[243] r2[68362]))
        unknown call_tmp[619201] "expr temp" "maybe param" "maybe type" "temp"
        (619204 'move' call_tmp[619201](68452 call != call_tmp[619189] call_tmp[619196]))
        unknown call_tmp[619206] "expr temp" "maybe param" "maybe type" "temp"
        (619209 'move' call_tmp[619206](68457 call _cond_test call_tmp[619201]))
        if call_tmp[619206]
        {
          (510169 'move' ret[510154](510168 'deref' 0))
          gotoReturn _end_ident[510152] _end_ident[510152]
        }
        unknown call_tmp[619213] "expr temp" "maybe param" "maybe type" "temp"
        (619216 'move' call_tmp[619213](68464 call _alignment _mt[243] r1[68353]))
        unknown call_tmp[619220] "expr temp" "maybe param" "maybe type" "temp"
        (619223 'move' call_tmp[619220](68468 call _alignment _mt[243] r2[68362]))
        unknown call_tmp[619225] "expr temp" "maybe param" "maybe type" "temp"
        (619228 'move' call_tmp[619225](68471 call != call_tmp[619213] call_tmp[619220]))
        unknown call_tmp[619230] "expr temp" "maybe param" "maybe type" "temp"
        (619233 'move' call_tmp[619230](68476 call _cond_test call_tmp[619225]))
        if call_tmp[619230]
        {
          (510174 'move' ret[510154](510173 'deref' 0))
          gotoReturn _end_ident[510152] _end_ident[510152]
        }
        unknown call_tmp[619237] "expr temp" "maybe param" "maybe type" "temp"
        (619240 'move' call_tmp[619237](68482 call _aligned _mt[243] r1[68353]))
        unknown call_tmp[619244] "expr temp" "maybe param" "maybe type" "temp"
        (619247 'move' call_tmp[619244](68486 call _aligned _mt[243] r2[68362]))
        unknown call_tmp[619249] "expr temp" "maybe param" "maybe type" "temp"
        (619252 'move' call_tmp[619249](68489 call != call_tmp[619237] call_tmp[619244]))
        unknown call_tmp[619254] "expr temp" "maybe param" "maybe type" "temp"
        (619257 'move' call_tmp[619254](68494 call _cond_test call_tmp[619249]))
        if call_tmp[619254]
        {
          (510179 'move' ret[510154](510178 'deref' 0))
          gotoReturn _end_ident[510152] _end_ident[510152]
        }
      }
      {
        (510184 'move' ret[510154](510183 'deref' 0))
        gotoReturn _end_ident[510152] _end_ident[510152]
      }
    }
    (510189 'move' ret[510154](510188 'deref' 1))
    label _end_ident[510152]
    (510156 return ret[510154])
  }
  where {
    unknown tmp[419860] "maybe param" "temp"
    unknown tmp[419881] "maybe param" "temp"
    unknown call_tmp[619261] "expr temp" "maybe param" "maybe type" "temp"
    (619264 'move' call_tmp[619261](68366 call idxType _mt[243] r1[68353]))
    unknown call_tmp[619268] "expr temp" "maybe param" "maybe type" "temp"
    (619271 'move' call_tmp[619268](68370 call idxType _mt[243] r2[68362]))
    (419892 'move' tmp[419881](68373 call == call_tmp[619261] call_tmp[619268]))
    unknown call_tmp[619273] "expr temp" "maybe param" "maybe type" "temp"
    (619276 'move' call_tmp[619273](419894 call _cond_invalid tmp[419881]))
    if call_tmp[619273]
    {
      (419897 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556715] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556716] "maybe param" "temp"
    unknown call_tmp[619278] "expr temp" "maybe param" "maybe type" "temp"
    (619281 'move' call_tmp[619278](419882 call isTrue tmp[419881]))
    (556721 'move' tmp[556716](556719 call _cond_test call_tmp[619278]))
    if tmp[556716]
    {
      unknown tmp[556723] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619285] "expr temp" "maybe param" "maybe type" "temp"
      (619288 'move' call_tmp[619285](68376 call boundedType _mt[243] r1[68353]))
      unknown call_tmp[619292] "expr temp" "maybe param" "maybe type" "temp"
      (619295 'move' call_tmp[619292](68380 call boundedType _mt[243] r2[68362]))
      unknown call_tmp[619297] "expr temp" "maybe param" "maybe type" "temp"
      (619300 'move' call_tmp[619297](68383 call == call_tmp[619285] call_tmp[619292]))
      (556725 'move' tmp[556723](419885 call isTrue call_tmp[619297]))
      (556730 'move' tmp[556715](556727 '_paramFoldLogical' tmp[556716] tmp[556723]))
    }
    {
      (556735 'move' tmp[556715](556732 '_paramFoldLogical' tmp[556716] 0))
    }
    (419871 'move' tmp[419860] tmp[556715])
    unknown call_tmp[619302] "expr temp" "maybe param" "maybe type" "temp"
    (619305 'move' call_tmp[619302](419873 call _cond_invalid tmp[419860]))
    if call_tmp[619302]
    {
      (419876 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556742] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556743] "maybe param" "temp"
    unknown call_tmp[619307] "expr temp" "maybe param" "maybe type" "temp"
    (619310 'move' call_tmp[619307](419861 call isTrue tmp[419860]))
    (556748 'move' tmp[556743](556746 call _cond_test call_tmp[619307]))
    if tmp[556743]
    {
      unknown tmp[556750] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619314] "expr temp" "maybe param" "maybe type" "temp"
      (619317 'move' call_tmp[619314](68388 call stridable _mt[243] r1[68353]))
      unknown call_tmp[619321] "expr temp" "maybe param" "maybe type" "temp"
      (619324 'move' call_tmp[619321](68392 call stridable _mt[243] r2[68362]))
      unknown call_tmp[619326] "expr temp" "maybe param" "maybe type" "temp"
      (619329 'move' call_tmp[619326](68395 call == call_tmp[619314] call_tmp[619321]))
      (556752 'move' tmp[556750](419864 call isTrue call_tmp[619326]))
      (556757 'move' tmp[556742](556754 '_paramFoldLogical' tmp[556743] tmp[556750]))
    }
    {
      (556762 'move' tmp[556742](556759 '_paramFoldLogical' tmp[556743] 0))
    }
    (748283 call chpl_statementLevelSymbol tmp[556742])
  }
  function ident[68527](arg r1[68524]:range[64316](?), arg r2[68533]:range[64316](?)) param : _unknown[51] "no doc"
  {
    unknown ret[510193] "RVV" "param" "temp"
    (510198 'move' ret[510193](510197 'deref' 0))
    (510195 return ret[510193])
  }
  function range[64316](?).safeCast[68552](arg _mt[68557]:_MT[238], arg this[68554]:range[64316](?) :
  range[64316](?), arg t[68549]:range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510202] "RVV" "temp"
    unknown tmp[68560] "dead at end of block" "insert auto destroy"
    (541100 'default init var' tmp[68560] t[68549])
    (68563 'end of statement')
    unknown call_tmp[619333] "expr temp" "maybe param" "maybe type" "temp"
    (619336 'move' call_tmp[619333](68566 call boundedType _mt[243] tmp[68560]))
    unknown call_tmp[619340] "expr temp" "maybe param" "maybe type" "temp"
    (619343 'move' call_tmp[619340](68570 call boundedType _mt[243] this[68554]))
    unknown call_tmp[619345] "expr temp" "maybe param" "maybe type" "temp"
    (619348 'move' call_tmp[619345](68573 call != call_tmp[619333] call_tmp[619340]))
    unknown call_tmp[619350] "expr temp" "maybe param" "maybe type" "temp"
    (619353 'move' call_tmp[619350](68628 call _cond_test call_tmp[619345]))
    if call_tmp[619350]
    {
      unknown call_tmp[619357] "expr temp" "maybe param" "maybe type" "temp"
      (619360 'move' call_tmp[619357](68595 call boundedType _mt[243] this[68554]))
      unknown call_tmp[619362] "expr temp" "maybe param" "maybe type" "temp"
      (619365 'move' call_tmp[619362](68599 call _cast string[26] call_tmp[619357]))
      unknown call_tmp[619369] "expr temp" "maybe param" "maybe type" "temp"
      (619372 'move' call_tmp[619369](68619 call boundedType _mt[243] tmp[68560]))
      unknown call_tmp[619374] "expr temp" "maybe param" "maybe type" "temp"
      (619377 'move' call_tmp[619374](68623 call _cast string[26] call_tmp[619369]))
      (68625 call compilerError "cannot cast range from " call_tmp[619362] " to " call_tmp[619374])
      (475487 'end of statement' tmp[68560])
    }
    unknown call_tmp[619381] "expr temp" "maybe param" "maybe type" "temp"
    (619384 'move' call_tmp[619381](68633 call stridable _mt[243] tmp[68560]))
    unknown call_tmp[619386] "expr temp" "maybe param" "maybe type" "temp"
    (619389 'move' call_tmp[619386](68722 call _cond_test call_tmp[619381]))
    if call_tmp[619386]
    {
      unknown call_tmp[619393] "expr temp" "maybe param" "maybe type" "temp"
      (619396 'move' call_tmp[619393](68637 call _stride _mt[243] tmp[68560]))
      unknown call_tmp[619400] "expr temp" "maybe param" "maybe type" "temp"
      (619403 'move' call_tmp[619400](68641 call stride _mt[243] this[68554]))
      (68644 call = call_tmp[619393] call_tmp[619400])
      (475489 'end of statement' tmp[68560])
      unknown call_tmp[619407] "expr temp" "maybe param" "maybe type" "temp"
      (619410 'move' call_tmp[619407](68649 call _alignment _mt[243] tmp[68560]))
      unknown call_tmp[619414] "expr temp" "maybe param" "maybe type" "temp"
      (619417 'move' call_tmp[619414](68654 call alignment _mt[243] this[68554]))
      unknown call_tmp[619419] "expr temp" "maybe param" "maybe type" "temp"
      (619422 'move' call_tmp[619419](68658 call chpl__idxToInt call_tmp[619414]))
      unknown call_tmp[619428] "expr temp" "maybe param" "maybe type" "temp"
      (619431 'move' call_tmp[619428](68665 call intIdxType _mt[243] tmp[68560]))
      unknown call_tmp[619433] "expr temp" "maybe param" "maybe type" "temp"
      (619436 'move' call_tmp[619433](68669 call(68659 call (partial) safeCast _mt[243] call_tmp[619419]) call_tmp[619428]))
      (68670 call = call_tmp[619407] call_tmp[619433])
      (475491 'end of statement' tmp[68560] tmp[68560])
      unknown call_tmp[619440] "expr temp" "maybe param" "maybe type" "temp"
      (619443 'move' call_tmp[619440](68674 call _aligned _mt[243] tmp[68560]))
      unknown call_tmp[619447] "expr temp" "maybe param" "maybe type" "temp"
      (619450 'move' call_tmp[619447](68678 call aligned _mt[243] this[68554]))
      (68681 call = call_tmp[619440] call_tmp[619447])
      (475494 'end of statement' tmp[68560])
    }
    {
      unknown call_tmp[619454] "expr temp" "maybe param" "maybe type" "temp"
      (619457 'move' call_tmp[619454](68685 call stride _mt[243] this[68554]))
      unknown call_tmp[619459] "expr temp" "maybe param" "maybe type" "temp"
      (619462 'move' call_tmp[619459](68689 call != call_tmp[619454] 1))
      unknown call_tmp[619464] "expr temp" "maybe param" "maybe type" "temp"
      (619467 'move' call_tmp[619464](68718 call _cond_test call_tmp[619459]))
      if call_tmp[619464]
      {
        (68715 call safeCastCheckHalt module=[255] HaltWrappers[209915] "illegal safeCast from non-unit stride range to unstridable range")
        (357702 'referenced modules list' HaltWrappers[209915])
      }
    }
    unknown call_tmp[619471] "expr temp" "maybe param" "maybe type" "temp"
    (619474 'move' call_tmp[619471](68728 call _low _mt[243] tmp[68560]))
    unknown call_tmp[619478] "expr temp" "maybe param" "maybe type" "temp"
    (619481 'move' call_tmp[619478](68732 call _low _mt[243] this[68554]))
    unknown call_tmp[619487] "expr temp" "maybe param" "maybe type" "temp"
    (619490 'move' call_tmp[619487](68739 call intIdxType _mt[243] tmp[68560]))
    unknown call_tmp[619492] "expr temp" "maybe param" "maybe type" "temp"
    (619495 'move' call_tmp[619492](68743 call(68735 call (partial) safeCast _mt[243] call_tmp[619478]) call_tmp[619487]))
    (68744 call = call_tmp[619471] call_tmp[619492])
    (475497 'end of statement' tmp[68560] tmp[68560])
    unknown call_tmp[619499] "expr temp" "maybe param" "maybe type" "temp"
    (619502 'move' call_tmp[619499](68748 call _high _mt[243] tmp[68560]))
    unknown call_tmp[619506] "expr temp" "maybe param" "maybe type" "temp"
    (619509 'move' call_tmp[619506](68752 call _high _mt[243] this[68554]))
    unknown call_tmp[619515] "expr temp" "maybe param" "maybe type" "temp"
    (619518 'move' call_tmp[619515](68759 call intIdxType _mt[243] tmp[68560]))
    unknown call_tmp[619520] "expr temp" "maybe param" "maybe type" "temp"
    (619523 'move' call_tmp[619520](68763 call(68755 call (partial) safeCast _mt[243] call_tmp[619506]) call_tmp[619515]))
    (68764 call = call_tmp[619499] call_tmp[619520])
    (475500 'end of statement' tmp[68560] tmp[68560])
    (510207 'move' ret[510202](510206 'deref' tmp[68560]))
    gotoReturn _end_safeCast[510200] _end_safeCast[510200]
    (475503 'end of statement' tmp[68560])
    label _end_safeCast[510200]
    (510204 return ret[510202])
  }
  function _cast[68781](arg t[68778]:range[64316](?), arg r[68787]:range[64316](?)) : _unknown[51] "no doc"
  {
    unknown ret[510213] "RVV" "temp"
    unknown tmp[68791] "dead at end of block" "insert auto destroy"
    (541102 'default init var' tmp[68791] t[68778])
    (68794 'end of statement')
    unknown call_tmp[619527] "expr temp" "maybe param" "maybe type" "temp"
    (619530 'move' call_tmp[619527](68797 call boundedType _mt[243] tmp[68791]))
    unknown call_tmp[619534] "expr temp" "maybe param" "maybe type" "temp"
    (619537 'move' call_tmp[619534](68801 call boundedType _mt[243] r[68787]))
    unknown call_tmp[619539] "expr temp" "maybe param" "maybe type" "temp"
    (619542 'move' call_tmp[619539](68804 call != call_tmp[619527] call_tmp[619534]))
    unknown call_tmp[619544] "expr temp" "maybe param" "maybe type" "temp"
    (619547 'move' call_tmp[619544](68827 call _cond_test call_tmp[619539]))
    if call_tmp[619544]
    {
      unknown call_tmp[619551] "expr temp" "maybe param" "maybe type" "temp"
      (619554 'move' call_tmp[619551](68810 call boundedType _mt[243] r[68787]))
      unknown call_tmp[619556] "expr temp" "maybe param" "maybe type" "temp"
      (619559 'move' call_tmp[619556](68814 call _cast string[26] call_tmp[619551]))
      unknown call_tmp[619563] "expr temp" "maybe param" "maybe type" "temp"
      (619566 'move' call_tmp[619563](68818 call boundedType _mt[243] tmp[68791]))
      unknown call_tmp[619568] "expr temp" "maybe param" "maybe type" "temp"
      (619571 'move' call_tmp[619568](68822 call _cast string[26] call_tmp[619563]))
      (68824 call compilerError "cannot cast range from " call_tmp[619556] " to " call_tmp[619568])
      (475505 'end of statement' tmp[68791])
    }
    unknown call_tmp[619575] "expr temp" "maybe param" "maybe type" "temp"
    (619578 'move' call_tmp[619575](68832 call stridable _mt[243] tmp[68791]))
    unknown call_tmp[619580] "expr temp" "maybe param" "maybe type" "temp"
    (619583 'move' call_tmp[619580](68875 call _cond_test call_tmp[619575]))
    if call_tmp[619580]
    {
      unknown call_tmp[619587] "expr temp" "maybe param" "maybe type" "temp"
      (619590 'move' call_tmp[619587](68836 call _stride _mt[243] tmp[68791]))
      unknown call_tmp[619594] "expr temp" "maybe param" "maybe type" "temp"
      (619597 'move' call_tmp[619594](68840 call _stride _mt[243] r[68787]))
      (68843 call = call_tmp[619587] call_tmp[619594])
      (475507 'end of statement' tmp[68791])
      unknown call_tmp[619601] "expr temp" "maybe param" "maybe type" "temp"
      (619604 'move' call_tmp[619601](68848 call _alignment _mt[243] tmp[68791]))
      unknown call_tmp[619608] "expr temp" "maybe param" "maybe type" "temp"
      (619611 'move' call_tmp[619608](68856 call intIdxType _mt[243] tmp[68791]))
      unknown call_tmp[619615] "expr temp" "maybe param" "maybe type" "temp"
      (619618 'move' call_tmp[619615](68852 call _alignment _mt[243] r[68787]))
      unknown call_tmp[619620] "expr temp" "maybe param" "maybe type" "temp"
      (619623 'move' call_tmp[619620](68859 call _cast call_tmp[619608] call_tmp[619615]))
      (68861 call = call_tmp[619601] call_tmp[619620])
      (475509 'end of statement' tmp[68791] tmp[68791])
      unknown call_tmp[619627] "expr temp" "maybe param" "maybe type" "temp"
      (619630 'move' call_tmp[619627](68865 call _aligned _mt[243] tmp[68791]))
      unknown call_tmp[619634] "expr temp" "maybe param" "maybe type" "temp"
      (619637 'move' call_tmp[619634](68869 call _aligned _mt[243] r[68787]))
      (68872 call = call_tmp[619627] call_tmp[619634])
      (475512 'end of statement' tmp[68791])
    }
    unknown call_tmp[619641] "expr temp" "maybe param" "maybe type" "temp"
    (619644 'move' call_tmp[619641](68880 call _low _mt[243] tmp[68791]))
    unknown call_tmp[619648] "expr temp" "maybe param" "maybe type" "temp"
    (619651 'move' call_tmp[619648](68888 call intIdxType _mt[243] tmp[68791]))
    unknown call_tmp[619655] "expr temp" "maybe param" "maybe type" "temp"
    (619658 'move' call_tmp[619655](68884 call low _mt[243] r[68787]))
    unknown call_tmp[619660] "expr temp" "maybe param" "maybe type" "temp"
    (619663 'move' call_tmp[619660](68891 call _cast call_tmp[619648] call_tmp[619655]))
    (68893 call = call_tmp[619641] call_tmp[619660])
    (475514 'end of statement' tmp[68791] tmp[68791])
    unknown call_tmp[619667] "expr temp" "maybe param" "maybe type" "temp"
    (619670 'move' call_tmp[619667](68897 call _high _mt[243] tmp[68791]))
    unknown call_tmp[619674] "expr temp" "maybe param" "maybe type" "temp"
    (619677 'move' call_tmp[619674](68905 call intIdxType _mt[243] tmp[68791]))
    unknown call_tmp[619681] "expr temp" "maybe param" "maybe type" "temp"
    (619684 'move' call_tmp[619681](68901 call high _mt[243] r[68787]))
    unknown call_tmp[619686] "expr temp" "maybe param" "maybe type" "temp"
    (619689 'move' call_tmp[619686](68908 call _cast call_tmp[619674] call_tmp[619681]))
    (68910 call = call_tmp[619667] call_tmp[619686])
    (475517 'end of statement' tmp[68791] tmp[68791])
    (510218 'move' ret[510213](510217 'deref' tmp[68791]))
    gotoReturn _end__cast[510211] _end__cast[510211]
    (475520 'end of statement' tmp[68791])
    label _end__cast[510211]
    (510215 return ret[510213])
  }
  function range[64316](?).boundsCheck[68933](arg _mt[68938]:_MT[238], arg this[68935]:range[64316](?) :
  range[64316](?), arg other[68930]:range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510224] "RVV" "temp"
    unknown tmp[419902] "maybe param" "temp"
    (419913 'move' tmp[419902](68952 call(68948 call (partial) isAmbiguous _mt[243] this[68935])))
    unknown call_tmp[619693] "expr temp" "maybe param" "maybe type" "temp"
    (619696 'move' call_tmp[619693](419915 call _cond_invalid tmp[419902]))
    if call_tmp[619693]
    {
      (419918 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556769] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556770] "maybe param" "temp"
    unknown call_tmp[619698] "expr temp" "maybe param" "maybe type" "temp"
    (619701 'move' call_tmp[619698](419903 call isTrue tmp[419902]))
    (556775 'move' tmp[556770](556773 call _cond_test call_tmp[619698]))
    if tmp[556770]
    {
      (556780 'move' tmp[556769](556777 '_paramFoldLogical' tmp[556770] 1))
    }
    {
      unknown tmp[556782] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619705] "expr temp" "maybe param" "maybe type" "temp"
      (619708 'move' call_tmp[619705](68958 call(68954 call (partial) isAmbiguous _mt[243] other[68930])))
      (556784 'move' tmp[556782](419907 call isTrue call_tmp[619705]))
      (556789 'move' tmp[556769](556786 '_paramFoldLogical' tmp[556770] tmp[556782]))
    }
    unknown call_tmp[619710] "expr temp" "maybe param" "maybe type" "temp"
    (619713 'move' call_tmp[619710](68964 call _cond_test tmp[556769]))
    if call_tmp[619710]
    {
      (510229 'move' ret[510224](510228 'deref' 0))
      gotoReturn _end_boundsCheck[510222] _end_boundsCheck[510222]
    }
    (510234 'move' ret[510224](510233 'deref' 1))
    label _end_boundsCheck[510222]
    (510226 return ret[510224])
  }
  where {
    unknown call_tmp[619715] "expr temp" "maybe param" "maybe type" "temp"
    (619718 'move' call_tmp[619715](455809 'query' other[68930] 2))
    (68945 call == call_tmp[619715] boundedNone[64211])
  }
  function range[64316](?).boundsCheck[68991](arg _mt[68996]:_MT[238], arg this[68993]:range[64316](?) :
  range[64316](?), arg other[68988]:range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510238] "RVV" "temp"
    unknown tmp[419923] "maybe param" "temp"
    (419934 'move' tmp[419923](69003 call(68999 call (partial) isAmbiguous _mt[243] this[68993])))
    unknown call_tmp[619722] "expr temp" "maybe param" "maybe type" "temp"
    (619725 'move' call_tmp[619722](419936 call _cond_invalid tmp[419923]))
    if call_tmp[619722]
    {
      (419939 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556796] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556797] "maybe param" "temp"
    unknown call_tmp[619727] "expr temp" "maybe param" "maybe type" "temp"
    (619730 'move' call_tmp[619727](419924 call isTrue tmp[419923]))
    (556802 'move' tmp[556797](556800 call _cond_test call_tmp[619727]))
    if tmp[556797]
    {
      (556807 'move' tmp[556796](556804 '_paramFoldLogical' tmp[556797] 1))
    }
    {
      unknown tmp[556809] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619734] "expr temp" "maybe param" "maybe type" "temp"
      (619737 'move' call_tmp[619734](69009 call(69005 call (partial) isAmbiguous _mt[243] other[68988])))
      (556811 'move' tmp[556809](419928 call isTrue call_tmp[619734]))
      (556816 'move' tmp[556796](556813 '_paramFoldLogical' tmp[556797] tmp[556809]))
    }
    unknown call_tmp[619739] "expr temp" "maybe param" "maybe type" "temp"
    (619742 'move' call_tmp[619739](69015 call _cond_test tmp[556796]))
    if call_tmp[619739]
    {
      (510243 'move' ret[510238](510242 'deref' 0))
      gotoReturn _end_boundsCheck[510236] _end_boundsCheck[510236]
    }
    unknown tmp[419944] "maybe param" "temp"
    (419955 'move' tmp[419944](455828 'query' other[68988] 3))
    unknown call_tmp[619744] "expr temp" "maybe param" "maybe type" "temp"
    (619747 'move' call_tmp[619744](419957 call _cond_invalid tmp[419944]))
    if call_tmp[619744]
    {
      (419960 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown boundedOther[69074] "dead at end of block" "insert auto destroy"
    unknown tmp[556823] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556824] "maybe param" "temp"
    unknown call_tmp[619749] "expr temp" "maybe param" "maybe type" "temp"
    (619752 'move' call_tmp[619749](419945 call isTrue tmp[419944]))
    (556829 'move' tmp[556824](556827 call _cond_test call_tmp[619749]))
    if tmp[556824]
    {
      (556834 'move' tmp[556823](556831 '_paramFoldLogical' tmp[556824] 1))
    }
    {
      unknown tmp[556836] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619756] "expr temp" "maybe param" "maybe type" "temp"
      (619759 'move' call_tmp[619756](69031 call stridable _mt[243] this[68993]))
      (556838 'move' tmp[556836](419949 call isTrue call_tmp[619756]))
      (556843 'move' tmp[556823](556840 '_paramFoldLogical' tmp[556824] tmp[556836]))
    }
    unknown tmp[556850] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556851] "maybe param" "temp"
    unknown call_tmp[619763] "expr temp" "maybe param" "maybe type" "temp"
    (619766 'move' call_tmp[619763](69041 call(69037 call (partial) hasLowBound _mt[243] other[68988])))
    (556856 'move' tmp[556851](556854 call _cond_test call_tmp[619763]))
    if tmp[556851]
    {
      unknown tmp[556858] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556860 'move' tmp[556858](69043 call low _mt[243] other[68988]))
      (556865 'move' tmp[556850](556862 '_paramFoldLogical' tmp[556851] tmp[556858]))
    }
    {
      unknown tmp[556867] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556869 'move' tmp[556867](374494 call low _mt[243] this[68993]))
      (556874 'move' tmp[556850](556871 '_paramFoldLogical' tmp[556851] tmp[556867]))
    }
    unknown tmp[556881] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556882] "maybe param" "temp"
    unknown call_tmp[619774] "expr temp" "maybe param" "maybe type" "temp"
    (619777 'move' call_tmp[619774](69055 call(69051 call (partial) hasHighBound _mt[243] other[68988])))
    (556887 'move' tmp[556882](556885 call _cond_test call_tmp[619774]))
    if tmp[556882]
    {
      unknown tmp[556889] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556891 'move' tmp[556889](69057 call high _mt[243] other[68988]))
      (556896 'move' tmp[556881](556893 '_paramFoldLogical' tmp[556882] tmp[556889]))
    }
    {
      unknown tmp[556898] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556900 'move' tmp[556898](374498 call high _mt[243] this[68993]))
      (556905 'move' tmp[556881](556902 '_paramFoldLogical' tmp[556882] tmp[556898]))
    }
    unknown call_tmp[619785] "expr temp" "maybe param" "maybe type" "temp"
    (619788 'move' call_tmp[619785](374489 call idxType _mt[243] this[68993]))
    unknown call_tmp[619792] "expr temp" "maybe param" "maybe type" "temp"
    (619795 'move' call_tmp[619792](69065 call stride _mt[243] other[68988]))
    unknown call_tmp[619799] "expr temp" "maybe param" "maybe type" "temp"
    (619802 'move' call_tmp[619799](69069 call alignment _mt[243] other[68988]))
    unknown call_tmp[619804] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (619807 'move' call_tmp[619804](747816 'new' range[64316](?) call_tmp[619785] bounded[64205] tmp[556823] tmp[556850] tmp[556881] call_tmp[619792] call_tmp[619799] 1))
    (541104 'init var' boundedOther[69074] call_tmp[619804])
    (69077 'end of statement')
    unknown tmp[419965] "maybe param" "temp"
    unknown call_tmp[619811] "expr temp" "maybe param" "maybe type" "temp"
    (619814 'move' call_tmp[619811](69079 call size _mt[243] boundedOther[69074]))
    (419976 'move' tmp[419965](69083 call == call_tmp[619811] 0))
    unknown call_tmp[619816] "expr temp" "maybe param" "maybe type" "temp"
    (619819 'move' call_tmp[619816](419978 call _cond_invalid tmp[419965]))
    if call_tmp[619816]
    {
      (419981 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556912] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556913] "maybe param" "temp"
    unknown call_tmp[619821] "expr temp" "maybe param" "maybe type" "temp"
    (619824 'move' call_tmp[619821](419966 call isTrue tmp[419965]))
    (556918 'move' tmp[556913](556916 call _cond_test call_tmp[619821]))
    if tmp[556913]
    {
      (556923 'move' tmp[556912](556920 '_paramFoldLogical' tmp[556913] 1))
    }
    {
      unknown tmp[556925] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619828] "expr temp" "maybe param" "maybe type" "temp"
      (619831 'move' call_tmp[619828](69088 call(374502 call (partial) contains _mt[243] this[68993]) boundedOther[69074]))
      (556927 'move' tmp[556925](419970 call isTrue call_tmp[619828]))
      (556932 'move' tmp[556912](556929 '_paramFoldLogical' tmp[556913] tmp[556925]))
    }
    (510248 'move' ret[510238](510247 'deref' tmp[556912]))
    gotoReturn _end_boundsCheck[510236] _end_boundsCheck[510236]
    (475529 'end of statement' boundedOther[69074])
    label _end_boundsCheck[510236]
    (510240 return ret[510238])
  }
  function range[64316](?).boundsCheck[69102](arg _mt[69107]:_MT[238], arg this[69104]:range[64316](?) :
  range[64316](?), arg other[69099] :
  (374508 call idxType _mt[243] this[69104])) : _unknown[51] "inline" "method"
  {
    unknown ret[510254] "RVV" "temp"
    unknown call_tmp[619837] "expr temp" "maybe param" "maybe type" "temp"
    (619840 'move' call_tmp[619837](69112 call(374512 call (partial) contains _mt[243] this[69104]) other[69099]))
    (510259 'move' ret[510254](510258 'deref' call_tmp[619837]))
    (510256 return ret[510254])
  }
  function range[64316](?).alignLow[69121](arg _mt[69126]:_MT[238], ref arg this[69123]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510263] "RVV" "temp"
    unknown tmp[419986] "maybe param" "temp"
    (419997 'move' tmp[419986] 1)
    unknown call_tmp[619842] "expr temp" "maybe param" "maybe type" "temp"
    (619845 'move' call_tmp[619842](419999 call _cond_invalid tmp[419986]))
    if call_tmp[619842]
    {
      (420002 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556939] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556940] "maybe param" "temp"
    unknown call_tmp[619847] "expr temp" "maybe param" "maybe type" "temp"
    (619850 'move' call_tmp[619847](419987 call isTrue tmp[419986]))
    (556945 'move' tmp[556940](556943 call _cond_test call_tmp[619847]))
    if tmp[556940]
    {
      unknown tmp[556947] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619854] "expr temp" "maybe param" "maybe type" "temp"
      (619857 'move' call_tmp[619854](69134 call(69130 call (partial) isAmbiguous _mt[243] this[69123])))
      (556949 'move' tmp[556947](419990 call isTrue call_tmp[619854]))
      (556954 'move' tmp[556939](556951 '_paramFoldLogical' tmp[556940] tmp[556947]))
    }
    {
      (556959 'move' tmp[556939](556956 '_paramFoldLogical' tmp[556940] 0))
    }
    unknown call_tmp[619859] "expr temp" "maybe param" "maybe type" "temp"
    (619862 'move' call_tmp[619859](69163 call _cond_test tmp[556939]))
    if call_tmp[619859]
    {
      (69161 call boundsCheckHalt module=[255] HaltWrappers[209915] "alignLow -- Cannot be applied to a range with ambiguous alignment.")
      (357747 'referenced modules list' HaltWrappers[209915])
    }
    unknown call_tmp[619866] "expr temp" "maybe param" "maybe type" "temp"
    (619869 'move' call_tmp[619866](374519 call stridable _mt[243] this[69123]))
    unknown call_tmp[619871] "expr temp" "maybe param" "maybe type" "temp"
    (619874 'move' call_tmp[619871](69178 call _cond_test call_tmp[619866]))
    if call_tmp[619871]
    {
      unknown call_tmp[619878] "expr temp" "maybe param" "maybe type" "temp"
      (619881 'move' call_tmp[619878](374524 call _low _mt[243] this[69123]))
      unknown call_tmp[619885] "expr temp" "maybe param" "maybe type" "temp"
      (619888 'move' call_tmp[619885](69172 call alignedLowAsInt _mt[243] this[69123]))
      (69175 call = call_tmp[619878] call_tmp[619885])
    }
    (510268 'move' ret[510263](510267 'deref' this[69123]))
    (510265 return ret[510263])
  }
  function range[64316](?).alignHigh[69191](arg _mt[69196]:_MT[238], ref arg this[69193]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510272] "RVV" "temp"
    unknown tmp[420007] "maybe param" "temp"
    (420018 'move' tmp[420007] 1)
    unknown call_tmp[619890] "expr temp" "maybe param" "maybe type" "temp"
    (619893 'move' call_tmp[619890](420020 call _cond_invalid tmp[420007]))
    if call_tmp[619890]
    {
      (420023 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556966] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556967] "maybe param" "temp"
    unknown call_tmp[619895] "expr temp" "maybe param" "maybe type" "temp"
    (619898 'move' call_tmp[619895](420008 call isTrue tmp[420007]))
    (556972 'move' tmp[556967](556970 call _cond_test call_tmp[619895]))
    if tmp[556967]
    {
      unknown tmp[556974] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619902] "expr temp" "maybe param" "maybe type" "temp"
      (619905 'move' call_tmp[619902](69204 call(69200 call (partial) isAmbiguous _mt[243] this[69193])))
      (556976 'move' tmp[556974](420011 call isTrue call_tmp[619902]))
      (556981 'move' tmp[556966](556978 '_paramFoldLogical' tmp[556967] tmp[556974]))
    }
    {
      (556986 'move' tmp[556966](556983 '_paramFoldLogical' tmp[556967] 0))
    }
    unknown call_tmp[619907] "expr temp" "maybe param" "maybe type" "temp"
    (619910 'move' call_tmp[619907](69231 call _cond_test tmp[556966]))
    if call_tmp[619907]
    {
      (69229 call boundsCheckHalt module=[255] HaltWrappers[209915] "alignHigh -- Cannot be applied to a range with ambiguous alignment.")
      (357755 'referenced modules list' HaltWrappers[209915])
    }
    unknown call_tmp[619914] "expr temp" "maybe param" "maybe type" "temp"
    (619917 'move' call_tmp[619914](374531 call stridable _mt[243] this[69193]))
    unknown call_tmp[619919] "expr temp" "maybe param" "maybe type" "temp"
    (619922 'move' call_tmp[619919](69246 call _cond_test call_tmp[619914]))
    if call_tmp[619919]
    {
      unknown call_tmp[619926] "expr temp" "maybe param" "maybe type" "temp"
      (619929 'move' call_tmp[619926](374536 call _high _mt[243] this[69193]))
      unknown call_tmp[619933] "expr temp" "maybe param" "maybe type" "temp"
      (619936 'move' call_tmp[619933](69240 call alignedHighAsInt _mt[243] this[69193]))
      (69243 call = call_tmp[619926] call_tmp[619933])
    }
    (510277 'move' ret[510272](510276 'deref' this[69193]))
    (510274 return ret[510272])
  }
  function range[64316](?).indexOrder[69263](arg _mt[69268]:_MT[238], arg this[69265]:range[64316](?) :
  range[64316](?), arg ind[69260] :
  (374542 call idxType _mt[243] this[69265])) : _unknown[51] "method"
  {
    unknown ret[510281] "RVV" "temp"
    unknown tmp[420028] "maybe param" "temp"
    (420039 'move' tmp[420028] 1)
    unknown call_tmp[619940] "expr temp" "maybe param" "maybe type" "temp"
    (619943 'move' call_tmp[619940](420041 call _cond_invalid tmp[420028]))
    if call_tmp[619940]
    {
      (420044 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556993] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556994] "maybe param" "temp"
    unknown call_tmp[619945] "expr temp" "maybe param" "maybe type" "temp"
    (619948 'move' call_tmp[619945](420029 call isTrue tmp[420028]))
    (556999 'move' tmp[556994](556997 call _cond_test call_tmp[619945]))
    if tmp[556994]
    {
      unknown tmp[557001] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619952] "expr temp" "maybe param" "maybe type" "temp"
      (619955 'move' call_tmp[619952](69276 call(69272 call (partial) isAmbiguous _mt[243] this[69265])))
      (557003 'move' tmp[557001](420032 call isTrue call_tmp[619952]))
      (557008 'move' tmp[556993](557005 '_paramFoldLogical' tmp[556994] tmp[557001]))
    }
    {
      (557013 'move' tmp[556993](557010 '_paramFoldLogical' tmp[556994] 0))
    }
    unknown call_tmp[619957] "expr temp" "maybe param" "maybe type" "temp"
    (619960 'move' call_tmp[619957](69303 call _cond_test tmp[556993]))
    if call_tmp[619957]
    {
      (69301 call boundsCheckHalt module=[255] HaltWrappers[209915] "indexOrder -- Undefined on a range with ambiguous alignment.")
      (357763 'referenced modules list' HaltWrappers[209915])
    }
    unknown call_tmp[619964] "expr temp" "maybe param" "maybe type" "temp"
    (619967 'move' call_tmp[619964](69312 call(374547 call (partial) contains _mt[243] this[69265]) ind[69260]))
    unknown call_tmp[619969] "expr temp" "maybe param" "maybe type" "temp"
    (619972 'move' call_tmp[619969](69313 call ! call_tmp[619964]))
    unknown call_tmp[619974] "expr temp" "maybe param" "maybe type" "temp"
    (619977 'move' call_tmp[619974](69323 call _cond_test call_tmp[619969]))
    if call_tmp[619974]
    {
      unknown call_tmp[619981] "expr temp" "maybe param" "maybe type" "temp"
      (619984 'move' call_tmp[619981](374552 call intIdxType _mt[243] this[69265]))
      unknown call_tmp[619986] "expr temp" "maybe param" "maybe type" "temp"
      (619989 'move' call_tmp[619986](69316 call - 1))
      unknown call_tmp[619991] "expr temp" "maybe param" "maybe type" "temp"
      (619994 'move' call_tmp[619991](69319 call _cast call_tmp[619981] call_tmp[619986]))
      (510286 'move' ret[510281](510285 'deref' call_tmp[619991]))
      gotoReturn _end_indexOrder[510279] _end_indexOrder[510279]
    }
    unknown call_tmp[619998] "expr temp" "maybe param" "maybe type" "temp"
    (620001 'move' call_tmp[619998](374557 call stridable _mt[243] this[69265]))
    unknown call_tmp[620003] "expr temp" "maybe param" "maybe type" "temp"
    (620006 'move' call_tmp[620003](69329 call ! call_tmp[619998]))
    unknown call_tmp[620008] "expr temp" "maybe param" "maybe type" "temp"
    (620011 'move' call_tmp[620008](69393 call _cond_test call_tmp[620003]))
    if call_tmp[620008]
    {
      unknown call_tmp[620015] "expr temp" "maybe param" "maybe type" "temp"
      (620018 'move' call_tmp[620015](69336 call(69332 call (partial) hasLowBound _mt[243] this[69265])))
      unknown call_tmp[620020] "expr temp" "maybe param" "maybe type" "temp"
      (620023 'move' call_tmp[620020](69346 call _cond_test call_tmp[620015]))
      if call_tmp[620020]
      {
        unknown call_tmp[620025] "expr temp" "maybe param" "maybe type" "temp"
        (620028 'move' call_tmp[620025](69340 call chpl__idxToInt ind[69260]))
        unknown call_tmp[620032] "expr temp" "maybe param" "maybe type" "temp"
        (620035 'move' call_tmp[620032](374563 call _low _mt[243] this[69265]))
        unknown call_tmp[620037] "expr temp" "maybe param" "maybe type" "temp"
        (620040 'move' call_tmp[620037](69342 call - call_tmp[620025] call_tmp[620032]))
        (510291 'move' ret[510281](510290 'deref' call_tmp[620037]))
        gotoReturn _end_indexOrder[510279] _end_indexOrder[510279]
      }
    }
    {
      unknown call_tmp[620044] "expr temp" "maybe param" "maybe type" "temp"
      (620047 'move' call_tmp[620044](69359 call(69355 call (partial) hasFirst _mt[243] this[69265])))
      unknown call_tmp[620049] "expr temp" "maybe param" "maybe type" "temp"
      (620052 'move' call_tmp[620049](69387 call _cond_test call_tmp[620044]))
      if call_tmp[620049]
      {
        unknown call_tmp[620056] "expr temp" "maybe param" "maybe type" "temp"
        (620059 'move' call_tmp[620056](374581 call intIdxType _mt[243] this[69265]))
        unknown call_tmp[620063] "expr temp" "maybe param" "maybe type" "temp"
        (620066 'move' call_tmp[620063](374568 call strType _mt[243] this[69265]))
        unknown call_tmp[620068] "expr temp" "maybe param" "maybe type" "temp"
        (620071 'move' call_tmp[620068](69363 call chpl__idxToInt ind[69260]))
        unknown call_tmp[620073] "expr temp" "maybe param" "maybe type" "temp"
        (620076 'move' call_tmp[620073](69365 call _cast call_tmp[620063] call_tmp[620068]))
        unknown call_tmp[620080] "expr temp" "maybe param" "maybe type" "temp"
        (620083 'move' call_tmp[620080](374572 call strType _mt[243] this[69265]))
        unknown call_tmp[620087] "expr temp" "maybe param" "maybe type" "temp"
        (620090 'move' call_tmp[620087](69369 call first _mt[243] this[69265]))
        unknown call_tmp[620092] "expr temp" "maybe param" "maybe type" "temp"
        (620095 'move' call_tmp[620092](69373 call chpl__idxToInt call_tmp[620087]))
        unknown call_tmp[620097] "expr temp" "maybe param" "maybe type" "temp"
        (620100 'move' call_tmp[620097](69375 call _cast call_tmp[620080] call_tmp[620092]))
        unknown call_tmp[620102] "expr temp" "maybe param" "maybe type" "temp"
        (620105 'move' call_tmp[620102](69377 call - call_tmp[620073] call_tmp[620097]))
        unknown call_tmp[620109] "expr temp" "maybe param" "maybe type" "temp"
        (620112 'move' call_tmp[620109](374577 call _stride _mt[243] this[69265]))
        unknown call_tmp[620114] "expr temp" "maybe param" "maybe type" "temp"
        (620117 'move' call_tmp[620114](69380 call / call_tmp[620102] call_tmp[620109]))
        unknown call_tmp[620119] "expr temp" "maybe param" "maybe type" "temp"
        (620122 'move' call_tmp[620119](69383 call _cast call_tmp[620056] call_tmp[620114]))
        (510296 'move' ret[510281](510295 'deref' call_tmp[620119]))
        gotoReturn _end_indexOrder[510279] _end_indexOrder[510279]
      }
    }
    unknown call_tmp[620126] "expr temp" "maybe param" "maybe type" "temp"
    (620129 'move' call_tmp[620126](374585 call intIdxType _mt[243] this[69265]))
    unknown call_tmp[620131] "expr temp" "maybe param" "maybe type" "temp"
    (620134 'move' call_tmp[620131](69398 call - 1))
    unknown call_tmp[620136] "expr temp" "maybe param" "maybe type" "temp"
    (620139 'move' call_tmp[620136](69401 call _cast call_tmp[620126] call_tmp[620131]))
    (510301 'move' ret[510281](510300 'deref' call_tmp[620136]))
    label _end_indexOrder[510279]
    (510283 return ret[510281])
  }
  function range[64316](?).orderToIndex[69414](arg _mt[69419]:_MT[238], arg this[69416]:range[64316](?) :
  range[64316](?), arg ord[69411]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510305] "RVV" "temp"
    unknown call_tmp[620141] "expr temp" "maybe param" "maybe type" "temp"
    (620144 'move' call_tmp[620141](69605 call _cond_test 1))
    if call_tmp[620141]
    {
      unknown call_tmp[620148] "expr temp" "maybe param" "maybe type" "temp"
      (620151 'move' call_tmp[620148](69425 call(374596 call (partial) hasFirst _mt[243] this[69416])))
      unknown call_tmp[620153] "expr temp" "maybe param" "maybe type" "temp"
      (620156 'move' call_tmp[620153](69426 call ! call_tmp[620148]))
      unknown call_tmp[620158] "expr temp" "maybe param" "maybe type" "temp"
      (620161 'move' call_tmp[620158](69452 call _cond_test call_tmp[620153]))
      if call_tmp[620158]
      {
        (69450 call boundsCheckHalt module=[255] HaltWrappers[209915] "invoking orderToIndex on a range that has no first index")
        (357772 'referenced modules list' HaltWrappers[209915])
      }
      unknown call_tmp[620165] "expr temp" "maybe param" "maybe type" "temp"
      (620168 'move' call_tmp[620165](69460 call(374600 call (partial) isAmbiguous _mt[243] this[69416])))
      unknown call_tmp[620170] "expr temp" "maybe param" "maybe type" "temp"
      (620173 'move' call_tmp[620170](69485 call _cond_test call_tmp[620165]))
      if call_tmp[620170]
      {
        (69483 call boundsCheckHalt module=[255] HaltWrappers[209915] "invoking orderToIndex on a range that is ambiguously aligned")
        (357778 'referenced modules list' HaltWrappers[209915])
      }
      unknown call_tmp[620175] "expr temp" "maybe param" "maybe type" "temp"
      (620178 'move' call_tmp[620175](69492 call < ord[69411] 0))
      unknown call_tmp[620180] "expr temp" "maybe param" "maybe type" "temp"
      (620183 'move' call_tmp[620180](69524 call _cond_test call_tmp[620175]))
      if call_tmp[620180]
      {
        unknown call_tmp[620185] "expr temp" "maybe param" "maybe type" "temp"
        (620188 'move' call_tmp[620185](69517 call _cast string[26] ord[69411]))
        unknown call_tmp[620190] "expr temp" "maybe param" "maybe type" "temp"
        (620193 'move' call_tmp[620190](69519 call + "invoking orderToIndex on a negative integer: " call_tmp[620185]))
        (69522 call boundsCheckHalt module=[255] HaltWrappers[209915] call_tmp[620190])
        (357784 'referenced modules list' HaltWrappers[209915])
      }
      unknown tmp[420049] "maybe param" "temp"
      (420060 'move' tmp[420049](69532 call isBoundedRange this[69416]))
      unknown call_tmp[620195] "expr temp" "maybe param" "maybe type" "temp"
      (620198 'move' call_tmp[620195](420062 call _cond_invalid tmp[420049]))
      if call_tmp[620195]
      {
        (420065 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557020] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557021] "maybe param" "temp"
      unknown call_tmp[620200] "expr temp" "maybe param" "maybe type" "temp"
      (620203 'move' call_tmp[620200](420050 call isTrue tmp[420049]))
      (557026 'move' tmp[557021](557024 call _cond_test call_tmp[620200]))
      if tmp[557021]
      {
        unknown tmp[557028] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[620207] "expr temp" "maybe param" "maybe type" "temp"
        (620210 'move' call_tmp[620207](69535 call size _mt[243] this[69416]))
        unknown call_tmp[620212] "expr temp" "maybe param" "maybe type" "temp"
        (620215 'move' call_tmp[620212](69538 call >= ord[69411] call_tmp[620207]))
        (557030 'move' tmp[557028](420053 call isTrue call_tmp[620212]))
        (557035 'move' tmp[557020](557032 '_paramFoldLogical' tmp[557021] tmp[557028]))
      }
      {
        (557040 'move' tmp[557020](557037 '_paramFoldLogical' tmp[557021] 0))
      }
      unknown call_tmp[620217] "expr temp" "maybe param" "maybe type" "temp"
      (620220 'move' call_tmp[620217](69600 call _cond_test tmp[557020]))
      if call_tmp[620217]
      {
        unknown call_tmp[620222] "expr temp" "maybe param" "maybe type" "temp"
        (620225 'move' call_tmp[620222](69565 call _cast string[26] ord[69411]))
        unknown call_tmp[620227] "expr temp" "maybe param" "maybe type" "temp"
        (620230 'move' call_tmp[620227](69567 call + "invoking orderToIndex on an integer " call_tmp[620222]))
        unknown call_tmp[620232] "expr temp" "maybe param" "maybe type" "temp"
        (620235 'move' call_tmp[620232](69586 call + call_tmp[620227] " that is larger than the range's number of indices "))
        unknown call_tmp[620239] "expr temp" "maybe param" "maybe type" "temp"
        (620242 'move' call_tmp[620239](69589 call size _mt[243] this[69416]))
        unknown call_tmp[620244] "expr temp" "maybe param" "maybe type" "temp"
        (620247 'move' call_tmp[620244](69593 call _cast string[26] call_tmp[620239]))
        unknown call_tmp[620249] "expr temp" "maybe param" "maybe type" "temp"
        (620252 'move' call_tmp[620249](69595 call + call_tmp[620232] call_tmp[620244]))
        (69598 call boundsCheckHalt module=[255] HaltWrappers[209915] call_tmp[620249])
        (357791 'referenced modules list' HaltWrappers[209915])
      }
    }
    unknown call_tmp[620258] "expr temp" "maybe param" "maybe type" "temp"
    (620261 'move' call_tmp[620258](69613 call firstAsInt _mt[243] this[69416]))
    unknown call_tmp[620265] "expr temp" "maybe param" "maybe type" "temp"
    (620268 'move' call_tmp[620265](69618 call stride _mt[243] this[69416]))
    unknown call_tmp[620270] "expr temp" "maybe param" "maybe type" "temp"
    (620273 'move' call_tmp[620270](69622 call chpl__addRangeStrides call_tmp[620258] call_tmp[620265] ord[69411]))
    unknown call_tmp[620275] "expr temp" "maybe param" "maybe type" "temp"
    (620278 'move' call_tmp[620275](69624 call(374609 call (partial) chpl_intToIdx _mt[243] this[69416]) call_tmp[620270]))
    unknown call_tmp[620282] "expr temp" "maybe param" "maybe type" "temp"
    (620285 'move' call_tmp[620282](510310 call idxType _mt[243] this[69416]))
    (510314 'move' ret[510305](510313 'coerce' call_tmp[620275] call_tmp[620282]))
    (510307 return ret[510305])
  }
  { scopeless type
    (374591 call idxType _mt[243] this[69416])
  }
  function range[64316](?).translate[69637](arg _mt[69642]:_MT[238], arg this[69639]:range[64316](?) :
  range[64316](?), arg offset[69634]:integral[199](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510318] "RVV" "temp"
    unknown call_tmp[620289] "expr temp" "maybe param" "maybe type" "temp"
    (620292 'move' call_tmp[620289](69646 call + this[69639] offset[69634]))
    (510323 'move' ret[510318](510322 'deref' call_tmp[620289]))
    (510320 return ret[510318])
  }
  function range[64316](?).translate[69658](arg _mt[69663]:_MT[238], arg this[69660]:range[64316](?) :
  range[64316](?), arg i[69656]:_any[178](?)) : _unknown[51] "inline" "method" "no doc" "no return value for void"
  {
    (69684 call compilerError "offsets must be of integral type")
    (510325 return _void[55])
  }
  function range[64316](?)._effAlmt[69692](arg _mt[69697]:_MT[238], arg this[69694]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510329] "RVV" "temp"
    unknown call_tmp[620296] "expr temp" "maybe param" "maybe type" "temp"
    (620299 'move' call_tmp[620296](374622 call alignment _mt[243] this[69694]))
    (510334 'move' ret[510329](510333 'deref' call_tmp[620296]))
    (510331 return ret[510329])
  }
  where {
    (374618 call stridable _mt[243] this[69694])
  }
  function range[64316](?)._effAlmt[69710](arg _mt[69715]:_MT[238], arg this[69712]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510338] "RVV" "temp"
    unknown call_tmp[620305] "expr temp" "maybe param" "maybe type" "temp"
    (620308 'move' call_tmp[620305](69723 call(374631 call (partial) chpl_intToIdx _mt[243] this[69712]) 0))
    (510343 'move' ret[510338](510342 'deref' call_tmp[620305]))
    (510340 return ret[510338])
  }
  where {
    unknown call_tmp[620312] "expr temp" "maybe param" "maybe type" "temp"
    (620315 'move' call_tmp[620312](374627 call stridable _mt[243] this[69712]))
    (69718 call ! call_tmp[620312])
  }
  function range[64316](?).interior[69737](arg _mt[69742]:_MT[238], arg this[69739]:range[64316](?) :
  range[64316](?), arg offset[69734]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69770 call compilerError "interior is not supported on unbounded ranges")
    (510345 return _void[55])
  }
  where {
    unknown call_tmp[620319] "expr temp" "maybe param" "maybe type" "temp"
    (620322 'move' call_tmp[620319](374637 call boundedType _mt[243] this[69739]))
    (69749 call != call_tmp[620319] bounded[64205])
  }
  function range[64316](?).interior[69783](arg _mt[69788]:_MT[238], arg this[69785]:range[64316](?) :
  range[64316](?), arg offset[69780]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510349] "RVV" "temp"
    unknown call_tmp[620328] "expr temp" "maybe param" "maybe type" "temp"
    (620331 'move' call_tmp[620328](374642 call intIdxType _mt[243] this[69785]))
    unknown call_tmp[620333] "maybe param" "maybe type" "temp"
    (620336 'move' call_tmp[620333](69796 call(69791 call (partial) safeCast _mt[243] offset[69780]) call_tmp[620328]))
    const i[69797] "dead at end of block" "const" "insert auto destroy"
    (541106 'init var' i[69797] call_tmp[620333])
    (69800 'end of statement')
    unknown call_tmp[620338] "expr temp" "maybe param" "maybe type" "temp"
    (620341 'move' call_tmp[620338](69804 call < i[69797] 0))
    unknown call_tmp[620343] "expr temp" "maybe param" "maybe type" "temp"
    (620346 'move' call_tmp[620343](69831 call _cond_test call_tmp[620338]))
    if call_tmp[620343]
    {
      unknown call_tmp[620350] "expr temp" "maybe param" "maybe type" "temp"
      (620353 'move' call_tmp[620350](374649 call idxType _mt[243] this[69785]))
      unknown call_tmp[620357] "expr temp" "maybe param" "maybe type" "temp"
      (620360 'move' call_tmp[620357](374654 call boundedType _mt[243] this[69785]))
      unknown call_tmp[620364] "expr temp" "maybe param" "maybe type" "temp"
      (620367 'move' call_tmp[620364](374659 call stridable _mt[243] this[69785]))
      unknown call_tmp[620371] "expr temp" "maybe param" "maybe type" "temp"
      (620374 'move' call_tmp[620371](374663 call low _mt[243] this[69785]))
      unknown call_tmp[620380] "expr temp" "maybe param" "maybe type" "temp"
      (620383 'move' call_tmp[620380](374672 call _low _mt[243] this[69785]))
      unknown call_tmp[620385] "expr temp" "maybe param" "maybe type" "temp"
      (620388 'move' call_tmp[620385](69816 call - call_tmp[620380] 1))
      unknown call_tmp[620390] "expr temp" "maybe param" "maybe type" "temp"
      (620393 'move' call_tmp[620390](69819 call - call_tmp[620385] i[69797]))
      unknown call_tmp[620395] "expr temp" "maybe param" "maybe type" "temp"
      (620398 'move' call_tmp[620395](69822 call(374667 call (partial) chpl_intToIdx _mt[243] this[69785]) call_tmp[620390]))
      unknown call_tmp[620402] "expr temp" "maybe param" "maybe type" "temp"
      (620405 'move' call_tmp[620402](374677 call stride _mt[243] this[69785]))
      unknown call_tmp[620409] "expr temp" "maybe param" "maybe type" "temp"
      (620412 'move' call_tmp[620409](69826 call(374683 call (partial) _effAlmt _mt[243] this[69785])))
      unknown call_tmp[620416] "expr temp" "maybe param" "maybe type" "temp"
      (620419 'move' call_tmp[620416](374687 call aligned _mt[243] this[69785]))
      unknown call_tmp[620421] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620424 'move' call_tmp[620421](747817 'new' range[64316](?) call_tmp[620350] call_tmp[620357] call_tmp[620364] call_tmp[620371] call_tmp[620395] call_tmp[620402] call_tmp[620409] call_tmp[620416]))
      (510354 'move' ret[510349](510353 'deref' call_tmp[620421]))
      gotoReturn _end_interior[510347] _end_interior[510347]
      (475557 'end of statement' i[69797])
    }
    unknown call_tmp[620426] "expr temp" "maybe param" "maybe type" "temp"
    (620429 'move' call_tmp[620426](69838 call > i[69797] 0))
    unknown call_tmp[620431] "expr temp" "maybe param" "maybe type" "temp"
    (620434 'move' call_tmp[620431](69865 call _cond_test call_tmp[620426]))
    if call_tmp[620431]
    {
      unknown call_tmp[620438] "expr temp" "maybe param" "maybe type" "temp"
      (620441 'move' call_tmp[620438](374694 call idxType _mt[243] this[69785]))
      unknown call_tmp[620445] "expr temp" "maybe param" "maybe type" "temp"
      (620448 'move' call_tmp[620445](374699 call boundedType _mt[243] this[69785]))
      unknown call_tmp[620452] "expr temp" "maybe param" "maybe type" "temp"
      (620455 'move' call_tmp[620452](374704 call stridable _mt[243] this[69785]))
      unknown call_tmp[620461] "expr temp" "maybe param" "maybe type" "temp"
      (620464 'move' call_tmp[620461](374713 call _high _mt[243] this[69785]))
      unknown call_tmp[620466] "expr temp" "maybe param" "maybe type" "temp"
      (620469 'move' call_tmp[620466](69849 call + call_tmp[620461] 1))
      unknown call_tmp[620471] "expr temp" "maybe param" "maybe type" "temp"
      (620474 'move' call_tmp[620471](69852 call - call_tmp[620466] i[69797]))
      unknown call_tmp[620476] "expr temp" "maybe param" "maybe type" "temp"
      (620479 'move' call_tmp[620476](69855 call(374708 call (partial) chpl_intToIdx _mt[243] this[69785]) call_tmp[620471]))
      unknown call_tmp[620483] "expr temp" "maybe param" "maybe type" "temp"
      (620486 'move' call_tmp[620483](374718 call high _mt[243] this[69785]))
      unknown call_tmp[620490] "expr temp" "maybe param" "maybe type" "temp"
      (620493 'move' call_tmp[620490](374722 call stride _mt[243] this[69785]))
      unknown call_tmp[620497] "expr temp" "maybe param" "maybe type" "temp"
      (620500 'move' call_tmp[620497](69860 call(374726 call (partial) _effAlmt _mt[243] this[69785])))
      unknown call_tmp[620504] "expr temp" "maybe param" "maybe type" "temp"
      (620507 'move' call_tmp[620504](374730 call aligned _mt[243] this[69785]))
      unknown call_tmp[620509] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620512 'move' call_tmp[620509](747818 'new' range[64316](?) call_tmp[620438] call_tmp[620445] call_tmp[620452] call_tmp[620476] call_tmp[620483] call_tmp[620490] call_tmp[620497] call_tmp[620504]))
      (510359 'move' ret[510349](510358 'deref' call_tmp[620509]))
      gotoReturn _end_interior[510347] _end_interior[510347]
      (475559 'end of statement' i[69797])
    }
    unknown call_tmp[620516] "expr temp" "maybe param" "maybe type" "temp"
    (620519 'move' call_tmp[620516](374736 call idxType _mt[243] this[69785]))
    unknown call_tmp[620523] "expr temp" "maybe param" "maybe type" "temp"
    (620526 'move' call_tmp[620523](374741 call boundedType _mt[243] this[69785]))
    unknown call_tmp[620530] "expr temp" "maybe param" "maybe type" "temp"
    (620533 'move' call_tmp[620530](374746 call stridable _mt[243] this[69785]))
    unknown call_tmp[620537] "expr temp" "maybe param" "maybe type" "temp"
    (620540 'move' call_tmp[620537](374750 call low _mt[243] this[69785]))
    unknown call_tmp[620544] "expr temp" "maybe param" "maybe type" "temp"
    (620547 'move' call_tmp[620544](374754 call high _mt[243] this[69785]))
    unknown call_tmp[620551] "expr temp" "maybe param" "maybe type" "temp"
    (620554 'move' call_tmp[620551](374758 call stride _mt[243] this[69785]))
    unknown call_tmp[620558] "expr temp" "maybe param" "maybe type" "temp"
    (620561 'move' call_tmp[620558](69881 call(374762 call (partial) _effAlmt _mt[243] this[69785])))
    unknown call_tmp[620565] "expr temp" "maybe param" "maybe type" "temp"
    (620568 'move' call_tmp[620565](374766 call aligned _mt[243] this[69785]))
    unknown call_tmp[620570] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620573 'move' call_tmp[620570](747819 'new' range[64316](?) call_tmp[620516] call_tmp[620523] call_tmp[620530] call_tmp[620537] call_tmp[620544] call_tmp[620551] call_tmp[620558] call_tmp[620565]))
    (510364 'move' ret[510349](510363 'deref' call_tmp[620570]))
    label _end_interior[510347]
    (510351 return ret[510349])
  }
  function range[64316](?).exterior[69895](arg _mt[69900]:_MT[238], arg this[69897]:range[64316](?) :
  range[64316](?), arg offset[69892]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69928 call compilerError "exterior is not supported on unbounded ranges")
    (510366 return _void[55])
  }
  where {
    unknown call_tmp[620577] "expr temp" "maybe param" "maybe type" "temp"
    (620580 'move' call_tmp[620577](374772 call boundedType _mt[243] this[69897]))
    (69907 call != call_tmp[620577] bounded[64205])
  }
  function range[64316](?).exterior[69941](arg _mt[69946]:_MT[238], arg this[69943]:range[64316](?) :
  range[64316](?), arg offset[69938]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510370] "RVV" "temp"
    unknown call_tmp[620586] "expr temp" "maybe param" "maybe type" "temp"
    (620589 'move' call_tmp[620586](374777 call intIdxType _mt[243] this[69943]))
    unknown call_tmp[620591] "maybe param" "maybe type" "temp"
    (620594 'move' call_tmp[620591](69954 call(69949 call (partial) safeCast _mt[243] offset[69938]) call_tmp[620586]))
    const i[69955] "dead at end of block" "const" "insert auto destroy"
    (541108 'init var' i[69955] call_tmp[620591])
    (69958 'end of statement')
    unknown call_tmp[620596] "expr temp" "maybe param" "maybe type" "temp"
    (620599 'move' call_tmp[620596](69962 call < i[69955] 0))
    unknown call_tmp[620601] "expr temp" "maybe param" "maybe type" "temp"
    (620604 'move' call_tmp[620601](69992 call _cond_test call_tmp[620596]))
    if call_tmp[620601]
    {
      unknown call_tmp[620608] "expr temp" "maybe param" "maybe type" "temp"
      (620611 'move' call_tmp[620608](374784 call idxType _mt[243] this[69943]))
      unknown call_tmp[620615] "expr temp" "maybe param" "maybe type" "temp"
      (620618 'move' call_tmp[620615](374789 call boundedType _mt[243] this[69943]))
      unknown call_tmp[620622] "expr temp" "maybe param" "maybe type" "temp"
      (620625 'move' call_tmp[620622](374794 call stridable _mt[243] this[69943]))
      unknown call_tmp[620631] "expr temp" "maybe param" "maybe type" "temp"
      (620634 'move' call_tmp[620631](374803 call _low _mt[243] this[69943]))
      unknown call_tmp[620636] "expr temp" "maybe param" "maybe type" "temp"
      (620639 'move' call_tmp[620636](69973 call + call_tmp[620631] i[69955]))
      unknown call_tmp[620641] "expr temp" "maybe param" "maybe type" "temp"
      (620644 'move' call_tmp[620641](69976 call(374798 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620636]))
      unknown call_tmp[620650] "expr temp" "maybe param" "maybe type" "temp"
      (620653 'move' call_tmp[620650](374813 call _low _mt[243] this[69943]))
      unknown call_tmp[620655] "expr temp" "maybe param" "maybe type" "temp"
      (620658 'move' call_tmp[620655](69980 call - call_tmp[620650] 1))
      unknown call_tmp[620660] "expr temp" "maybe param" "maybe type" "temp"
      (620663 'move' call_tmp[620660](69983 call(374808 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620655]))
      unknown call_tmp[620667] "expr temp" "maybe param" "maybe type" "temp"
      (620670 'move' call_tmp[620667](374817 call stride _mt[243] this[69943]))
      unknown call_tmp[620674] "expr temp" "maybe param" "maybe type" "temp"
      (620677 'move' call_tmp[620674](69987 call(374821 call (partial) _effAlmt _mt[243] this[69943])))
      unknown call_tmp[620681] "expr temp" "maybe param" "maybe type" "temp"
      (620684 'move' call_tmp[620681](374825 call aligned _mt[243] this[69943]))
      unknown call_tmp[620686] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620689 'move' call_tmp[620686](747820 'new' range[64316](?) call_tmp[620608] call_tmp[620615] call_tmp[620622] call_tmp[620641] call_tmp[620660] call_tmp[620667] call_tmp[620674] call_tmp[620681]))
      (510375 'move' ret[510370](510374 'deref' call_tmp[620686]))
      gotoReturn _end_exterior[510368] _end_exterior[510368]
      (475563 'end of statement' i[69955])
    }
    unknown call_tmp[620691] "expr temp" "maybe param" "maybe type" "temp"
    (620694 'move' call_tmp[620691](69999 call > i[69955] 0))
    unknown call_tmp[620696] "expr temp" "maybe param" "maybe type" "temp"
    (620699 'move' call_tmp[620696](70029 call _cond_test call_tmp[620691]))
    if call_tmp[620696]
    {
      unknown call_tmp[620703] "expr temp" "maybe param" "maybe type" "temp"
      (620706 'move' call_tmp[620703](374832 call idxType _mt[243] this[69943]))
      unknown call_tmp[620710] "expr temp" "maybe param" "maybe type" "temp"
      (620713 'move' call_tmp[620710](374837 call boundedType _mt[243] this[69943]))
      unknown call_tmp[620717] "expr temp" "maybe param" "maybe type" "temp"
      (620720 'move' call_tmp[620717](374842 call stridable _mt[243] this[69943]))
      unknown call_tmp[620726] "expr temp" "maybe param" "maybe type" "temp"
      (620729 'move' call_tmp[620726](374851 call _high _mt[243] this[69943]))
      unknown call_tmp[620731] "expr temp" "maybe param" "maybe type" "temp"
      (620734 'move' call_tmp[620731](70010 call + call_tmp[620726] 1))
      unknown call_tmp[620736] "expr temp" "maybe param" "maybe type" "temp"
      (620739 'move' call_tmp[620736](70013 call(374846 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620731]))
      unknown call_tmp[620745] "expr temp" "maybe param" "maybe type" "temp"
      (620748 'move' call_tmp[620745](374860 call _high _mt[243] this[69943]))
      unknown call_tmp[620750] "expr temp" "maybe param" "maybe type" "temp"
      (620753 'move' call_tmp[620750](70017 call + call_tmp[620745] i[69955]))
      unknown call_tmp[620755] "expr temp" "maybe param" "maybe type" "temp"
      (620758 'move' call_tmp[620755](70020 call(374855 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620750]))
      unknown call_tmp[620762] "expr temp" "maybe param" "maybe type" "temp"
      (620765 'move' call_tmp[620762](374865 call stride _mt[243] this[69943]))
      unknown call_tmp[620769] "expr temp" "maybe param" "maybe type" "temp"
      (620772 'move' call_tmp[620769](70024 call(374869 call (partial) _effAlmt _mt[243] this[69943])))
      unknown call_tmp[620776] "expr temp" "maybe param" "maybe type" "temp"
      (620779 'move' call_tmp[620776](374873 call aligned _mt[243] this[69943]))
      unknown call_tmp[620781] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620784 'move' call_tmp[620781](747821 'new' range[64316](?) call_tmp[620703] call_tmp[620710] call_tmp[620717] call_tmp[620736] call_tmp[620755] call_tmp[620762] call_tmp[620769] call_tmp[620776]))
      (510380 'move' ret[510370](510379 'deref' call_tmp[620781]))
      gotoReturn _end_exterior[510368] _end_exterior[510368]
      (475565 'end of statement' i[69955])
    }
    unknown call_tmp[620788] "expr temp" "maybe param" "maybe type" "temp"
    (620791 'move' call_tmp[620788](374879 call idxType _mt[243] this[69943]))
    unknown call_tmp[620795] "expr temp" "maybe param" "maybe type" "temp"
    (620798 'move' call_tmp[620795](374884 call boundedType _mt[243] this[69943]))
    unknown call_tmp[620802] "expr temp" "maybe param" "maybe type" "temp"
    (620805 'move' call_tmp[620802](374889 call stridable _mt[243] this[69943]))
    unknown call_tmp[620809] "expr temp" "maybe param" "maybe type" "temp"
    (620812 'move' call_tmp[620809](374893 call low _mt[243] this[69943]))
    unknown call_tmp[620816] "expr temp" "maybe param" "maybe type" "temp"
    (620819 'move' call_tmp[620816](374897 call high _mt[243] this[69943]))
    unknown call_tmp[620823] "expr temp" "maybe param" "maybe type" "temp"
    (620826 'move' call_tmp[620823](374901 call stride _mt[243] this[69943]))
    unknown call_tmp[620830] "expr temp" "maybe param" "maybe type" "temp"
    (620833 'move' call_tmp[620830](70045 call(374905 call (partial) _effAlmt _mt[243] this[69943])))
    unknown call_tmp[620837] "expr temp" "maybe param" "maybe type" "temp"
    (620840 'move' call_tmp[620837](374909 call aligned _mt[243] this[69943]))
    unknown call_tmp[620842] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620845 'move' call_tmp[620842](747822 'new' range[64316](?) call_tmp[620788] call_tmp[620795] call_tmp[620802] call_tmp[620809] call_tmp[620816] call_tmp[620823] call_tmp[620830] call_tmp[620837]))
    (510385 'move' ret[510370](510384 'deref' call_tmp[620842]))
    label _end_exterior[510368]
    (510372 return ret[510370])
  }
  function range[64316](?).expand[70059](arg _mt[70064]:_MT[238], arg this[70061]:range[64316](?) :
  range[64316](?), arg offset[70056]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (70092 call compilerError "expand() is not supported on unbounded ranges")
    (510387 return _void[55])
  }
  where {
    unknown call_tmp[620849] "expr temp" "maybe param" "maybe type" "temp"
    (620852 'move' call_tmp[620849](374915 call boundedType _mt[243] this[70061]))
    (70071 call != call_tmp[620849] bounded[64205])
  }
  function range[64316](?).expand[70105](arg _mt[70110]:_MT[238], arg this[70107]:range[64316](?) :
  range[64316](?), arg offset[70102]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510391] "RVV" "temp"
    unknown call_tmp[620858] "expr temp" "maybe param" "maybe type" "temp"
    (620861 'move' call_tmp[620858](374920 call intIdxType _mt[243] this[70107]))
    unknown call_tmp[620863] "maybe param" "maybe type" "temp"
    (620866 'move' call_tmp[620863](70118 call(70113 call (partial) safeCast _mt[243] offset[70102]) call_tmp[620858]))
    const i[70119] "dead at end of block" "const" "insert auto destroy"
    (541110 'init var' i[70119] call_tmp[620863])
    (70122 'end of statement')
    unknown call_tmp[620870] "expr temp" "maybe param" "maybe type" "temp"
    (620873 'move' call_tmp[620870](374926 call idxType _mt[243] this[70107]))
    unknown call_tmp[620877] "expr temp" "maybe param" "maybe type" "temp"
    (620880 'move' call_tmp[620877](374931 call boundedType _mt[243] this[70107]))
    unknown call_tmp[620884] "expr temp" "maybe param" "maybe type" "temp"
    (620887 'move' call_tmp[620884](374936 call stridable _mt[243] this[70107]))
    unknown call_tmp[620893] "expr temp" "maybe param" "maybe type" "temp"
    (620896 'move' call_tmp[620893](374945 call _low _mt[243] this[70107]))
    unknown call_tmp[620898] "expr temp" "maybe param" "maybe type" "temp"
    (620901 'move' call_tmp[620898](70133 call - call_tmp[620893] i[70119]))
    unknown call_tmp[620903] "expr temp" "maybe param" "maybe type" "temp"
    (620906 'move' call_tmp[620903](70136 call(374940 call (partial) chpl_intToIdx _mt[243] this[70107]) call_tmp[620898]))
    unknown call_tmp[620912] "expr temp" "maybe param" "maybe type" "temp"
    (620915 'move' call_tmp[620912](374955 call _high _mt[243] this[70107]))
    unknown call_tmp[620917] "expr temp" "maybe param" "maybe type" "temp"
    (620920 'move' call_tmp[620917](70140 call + call_tmp[620912] i[70119]))
    unknown call_tmp[620922] "expr temp" "maybe param" "maybe type" "temp"
    (620925 'move' call_tmp[620922](70143 call(374950 call (partial) chpl_intToIdx _mt[243] this[70107]) call_tmp[620917]))
    unknown call_tmp[620929] "expr temp" "maybe param" "maybe type" "temp"
    (620932 'move' call_tmp[620929](374960 call stride _mt[243] this[70107]))
    unknown call_tmp[620936] "expr temp" "maybe param" "maybe type" "temp"
    (620939 'move' call_tmp[620936](374964 call alignment _mt[243] this[70107]))
    unknown call_tmp[620943] "expr temp" "maybe param" "maybe type" "temp"
    (620946 'move' call_tmp[620943](374969 call _aligned _mt[243] this[70107]))
    unknown call_tmp[620948] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620951 'move' call_tmp[620948](747823 'new' range[64316](?) call_tmp[620870] call_tmp[620877] call_tmp[620884] call_tmp[620903] call_tmp[620922] call_tmp[620929] call_tmp[620936] call_tmp[620943]))
    (510396 'move' ret[510391](510395 'deref' call_tmp[620948]))
    gotoReturn _end_expand[510389] _end_expand[510389]
    (475569 'end of statement' i[70119] i[70119])
    label _end_expand[510389]
    (510393 return ret[510391])
  }
  function =[70163](ref arg r1[70160]:range[64316](?), arg r2[70171]:range[64316](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[620955] "expr temp" "maybe param" "maybe type" "temp"
    (620958 'move' call_tmp[620955](70175 call boundedType _mt[243] r1[70160]))
    unknown call_tmp[620962] "expr temp" "maybe param" "maybe type" "temp"
    (620965 'move' call_tmp[620962](70179 call boundedType _mt[243] r2[70171]))
    unknown call_tmp[620967] "expr temp" "maybe param" "maybe type" "temp"
    (620970 'move' call_tmp[620967](70182 call != call_tmp[620955] call_tmp[620962]))
    unknown call_tmp[620972] "expr temp" "maybe param" "maybe type" "temp"
    (620975 'move' call_tmp[620972](70207 call _cond_test call_tmp[620967]))
    if call_tmp[620972]
    {
      (70205 call compilerError "type mismatch in assignment of ranges with different boundedType parameters")
    }
    unknown tmp[420091] "maybe param" "temp"
    unknown call_tmp[620977] "expr temp" "maybe param" "maybe type" "temp"
    (620980 'move' call_tmp[620977](455839 'query' r1[70160] c"stridable"))
    (420102 'move' tmp[420091](70214 call ! call_tmp[620977]))
    unknown call_tmp[620982] "expr temp" "maybe param" "maybe type" "temp"
    (620985 'move' call_tmp[620982](420104 call _cond_invalid tmp[420091]))
    if call_tmp[620982]
    {
      (420107 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557047] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557048] "maybe param" "temp"
    unknown call_tmp[620987] "expr temp" "maybe param" "maybe type" "temp"
    (620990 'move' call_tmp[620987](420092 call isTrue tmp[420091]))
    (557053 'move' tmp[557048](557051 call _cond_test call_tmp[620987]))
    if tmp[557048]
    {
      unknown tmp[557055] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[620992] "expr temp" "maybe param" "maybe type" "temp"
      (620995 'move' call_tmp[620992](455859 'query' r2[70171] c"stridable"))
      (557057 'move' tmp[557055](420095 call isTrue call_tmp[620992]))
      (557062 'move' tmp[557047](557059 '_paramFoldLogical' tmp[557048] tmp[557055]))
    }
    {
      (557067 'move' tmp[557047](557064 '_paramFoldLogical' tmp[557048] 0))
    }
    unknown call_tmp[620997] "expr temp" "maybe param" "maybe type" "temp"
    (621000 'move' call_tmp[620997](70275 call _cond_test tmp[557047]))
    if call_tmp[620997]
    {
      (70238 call compilerError "type mismatch in assignment of ranges with different stridable parameters")
    }
    {
      unknown tmp[420070] "maybe param" "temp"
      (420081 'move' tmp[420070](455842 'query' r1[70160] c"stridable"))
      unknown call_tmp[621002] "expr temp" "maybe param" "maybe type" "temp"
      (621005 'move' call_tmp[621002](420083 call _cond_invalid tmp[420070]))
      if call_tmp[621002]
      {
        (420086 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557074] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557075] "maybe param" "temp"
      unknown call_tmp[621007] "expr temp" "maybe param" "maybe type" "temp"
      (621010 'move' call_tmp[621007](420071 call isTrue tmp[420070]))
      (557080 'move' tmp[557075](557078 call _cond_test call_tmp[621007]))
      if tmp[557075]
      {
        unknown tmp[557082] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621012] "expr temp" "maybe param" "maybe type" "temp"
        (621015 'move' call_tmp[621012](455862 'query' r2[70171] c"stridable"))
        (557084 'move' tmp[557082](420074 call isTrue call_tmp[621012]))
        (557089 'move' tmp[557074](557086 '_paramFoldLogical' tmp[557075] tmp[557082]))
      }
      {
        (557094 'move' tmp[557074](557091 '_paramFoldLogical' tmp[557075] 0))
      }
      unknown call_tmp[621017] "expr temp" "maybe param" "maybe type" "temp"
      (621020 'move' call_tmp[621017](70269 call _cond_test tmp[557074]))
      if call_tmp[621017]
      {
        unknown call_tmp[621024] "expr temp" "maybe param" "maybe type" "temp"
        (621027 'move' call_tmp[621024](70245 call _stride _mt[243] r1[70160]))
        unknown call_tmp[621031] "expr temp" "maybe param" "maybe type" "temp"
        (621034 'move' call_tmp[621031](70249 call stride _mt[243] r2[70171]))
        (70252 call = call_tmp[621024] call_tmp[621031])
      }
      {
        unknown call_tmp[621036] "expr temp" "maybe param" "maybe type" "temp"
        (621039 'move' call_tmp[621036](455845 'query' r1[70160] c"stridable"))
        unknown call_tmp[621041] "expr temp" "maybe param" "maybe type" "temp"
        (621044 'move' call_tmp[621041](70264 call _cond_test call_tmp[621036]))
        if call_tmp[621041]
        {
          unknown call_tmp[621048] "expr temp" "maybe param" "maybe type" "temp"
          (621051 'move' call_tmp[621048](70257 call _stride _mt[243] r1[70160]))
          (70261 call = call_tmp[621048] 1)
        }
      }
    }
    unknown call_tmp[621055] "expr temp" "maybe param" "maybe type" "temp"
    (621058 'move' call_tmp[621055](70282 call _low _mt[243] r1[70160]))
    unknown call_tmp[621062] "expr temp" "maybe param" "maybe type" "temp"
    (621065 'move' call_tmp[621062](70286 call _low _mt[243] r2[70171]))
    (70289 call = call_tmp[621055] call_tmp[621062])
    (475578 'end of statement')
    unknown call_tmp[621069] "expr temp" "maybe param" "maybe type" "temp"
    (621072 'move' call_tmp[621069](70293 call _high _mt[243] r1[70160]))
    unknown call_tmp[621076] "expr temp" "maybe param" "maybe type" "temp"
    (621079 'move' call_tmp[621076](70297 call _high _mt[243] r2[70171]))
    (70300 call = call_tmp[621069] call_tmp[621076])
    (475579 'end of statement')
    unknown call_tmp[621081] "expr temp" "maybe param" "maybe type" "temp"
    (621084 'move' call_tmp[621081](455848 'query' r1[70160] c"stridable"))
    unknown call_tmp[621086] "expr temp" "maybe param" "maybe type" "temp"
    (621089 'move' call_tmp[621086](70330 call _cond_test call_tmp[621081]))
    if call_tmp[621086]
    {
      unknown call_tmp[621093] "expr temp" "maybe param" "maybe type" "temp"
      (621096 'move' call_tmp[621093](70305 call _alignment _mt[243] r1[70160]))
      unknown call_tmp[621100] "expr temp" "maybe param" "maybe type" "temp"
      (621103 'move' call_tmp[621100](70310 call alignment _mt[243] r2[70171]))
      unknown call_tmp[621105] "expr temp" "maybe param" "maybe type" "temp"
      (621108 'move' call_tmp[621105](70314 call chpl__idxToInt call_tmp[621100]))
      (70315 call = call_tmp[621093] call_tmp[621105])
      (475580 'end of statement')
      unknown call_tmp[621112] "expr temp" "maybe param" "maybe type" "temp"
      (621115 'move' call_tmp[621112](70320 call _aligned _mt[243] r1[70160]))
      unknown call_tmp[621119] "expr temp" "maybe param" "maybe type" "temp"
      (621122 'move' call_tmp[621119](70324 call aligned _mt[243] r2[70171]))
      (70327 call = call_tmp[621112] call_tmp[621119])
    }
    (510400 return _void[55])
  }
  function +[70350](arg r[70347]:range[64316](?), arg offset[70353]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510404] "RVV" "temp"
    unknown call_tmp[621126] "expr temp" "maybe param" "maybe type" "temp"
    (621129 'move' call_tmp[621126](70358 call intIdxType _mt[243] r[70347]))
    unknown call_tmp[621131] "maybe param" "maybe type" "temp"
    (621134 'move' call_tmp[621131](70361 call _cast call_tmp[621126] offset[70353]))
    const i[70363] "dead at end of block" "const" "insert auto destroy"
    (541112 'init var' i[70363] call_tmp[621131])
    (70366 'end of statement')
    unknown call_tmp[621136] "expr temp" "maybe param" "maybe type" "temp"
    (621139 'move' call_tmp[621136](455872 'query' r[70347] 1))
    unknown strType[70372] "dead at end of block" "insert auto destroy" "type variable"(70371 call chpl__rangeStrideType call_tmp[621136])
    unknown call_tmp[621141] "expr temp" "maybe param" "maybe type" "temp"
    (621144 'move' call_tmp[621141](541116 'query' r[70347] 1))
    (541119 'move' strType[70372](541115 call chpl__rangeStrideType call_tmp[621141]))
    (475582 'end of statement')
    unknown call_tmp[621146] "expr temp" "maybe param" "maybe type" "temp"
    (621149 'move' call_tmp[621146](455875 'query' r[70347] 1))
    unknown call_tmp[621151] "expr temp" "maybe param" "maybe type" "temp"
    (621154 'move' call_tmp[621151](455881 'query' r[70347] 2))
    unknown call_tmp[621156] "expr temp" "maybe param" "maybe type" "temp"
    (621159 'move' call_tmp[621156](455887 'query' r[70347] 3))
    unknown call_tmp[621165] "expr temp" "maybe param" "maybe type" "temp"
    (621168 'move' call_tmp[621165](70388 call _low _mt[243] r[70347]))
    unknown call_tmp[621170] "expr temp" "maybe param" "maybe type" "temp"
    (621173 'move' call_tmp[621170](70392 call + call_tmp[621165] i[70363]))
    unknown call_tmp[621175] "expr temp" "maybe param" "maybe type" "temp"
    (621178 'move' call_tmp[621175](70395 call(70384 call (partial) chpl_intToIdx _mt[243] r[70347]) call_tmp[621170]))
    unknown call_tmp[621184] "expr temp" "maybe param" "maybe type" "temp"
    (621187 'move' call_tmp[621184](70401 call _high _mt[243] r[70347]))
    unknown call_tmp[621189] "expr temp" "maybe param" "maybe type" "temp"
    (621192 'move' call_tmp[621189](70405 call + call_tmp[621184] i[70363]))
    unknown call_tmp[621194] "expr temp" "maybe param" "maybe type" "temp"
    (621197 'move' call_tmp[621194](70408 call(70397 call (partial) chpl_intToIdx _mt[243] r[70347]) call_tmp[621189]))
    unknown call_tmp[621201] "expr temp" "maybe param" "maybe type" "temp"
    (621204 'move' call_tmp[621201](70410 call stride _mt[243] r[70347]))
    unknown call_tmp[621206] "expr temp" "maybe param" "maybe type" "temp"
    (621209 'move' call_tmp[621206](70414 call _cast strType[70372] call_tmp[621201]))
    unknown call_tmp[621215] "expr temp" "maybe param" "maybe type" "temp"
    (621218 'move' call_tmp[621215](70422 call alignment _mt[243] r[70347]))
    unknown call_tmp[621220] "expr temp" "maybe param" "maybe type" "temp"
    (621223 'move' call_tmp[621220](70426 call chpl__idxToInt call_tmp[621215]))
    unknown call_tmp[621225] "expr temp" "maybe param" "maybe type" "temp"
    (621228 'move' call_tmp[621225](70428 call + call_tmp[621220] i[70363]))
    unknown call_tmp[621230] "expr temp" "maybe param" "maybe type" "temp"
    (621233 'move' call_tmp[621230](70431 call(70417 call (partial) chpl_intToIdx _mt[243] r[70347]) call_tmp[621225]))
    unknown call_tmp[621237] "expr temp" "maybe param" "maybe type" "temp"
    (621240 'move' call_tmp[621237](70433 call aligned _mt[243] r[70347]))
    unknown call_tmp[621242] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621245 'move' call_tmp[621242](747824 'new' range[64316](?) call_tmp[621146] call_tmp[621151] call_tmp[621156] call_tmp[621175] call_tmp[621194] call_tmp[621206] call_tmp[621230] call_tmp[621237]))
    (510409 'move' ret[510404](510408 'deref' call_tmp[621242]))
    gotoReturn _end_+[510402] _end_+[510402]
    (475583 'end of statement' i[70363] i[70363] strType[70372] i[70363])
    label _end_+[510402]
    (510406 return ret[510404])
  }
  function +[70447](arg i[70444]:integral[199](?), arg r[70458]:range[64316](?)) : _unknown[51] "inline"
  {
    unknown ret[510415] "RVV" "temp"
    unknown call_tmp[621247] "expr temp" "maybe param" "maybe type" "temp"
    (621250 'move' call_tmp[621247](70463 call + r[70458] i[70444]))
    (510420 'move' ret[510415](510419 'deref' call_tmp[621247]))
    (510417 return ret[510415])
  }
  function -[70484](arg r[70481]:range[64316](?), arg i[70487]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510424] "RVV" "temp"
    unknown call_tmp[621252] "expr temp" "maybe param" "maybe type" "temp"
    (621255 'move' call_tmp[621252](455910 'query' r[70481] 1))
    unknown strType[70494] "dead at end of block" "insert auto destroy" "type variable"(70493 call chpl__rangeStrideType call_tmp[621252])
    unknown call_tmp[621257] "expr temp" "maybe param" "maybe type" "temp"
    (621260 'move' call_tmp[621257](541123 'query' r[70481] 1))
    (541126 'move' strType[70494](541122 call chpl__rangeStrideType call_tmp[621257]))
    (475589 'end of statement')
    unknown call_tmp[621262] "expr temp" "maybe param" "maybe type" "temp"
    (621265 'move' call_tmp[621262](455913 'query' r[70481] 1))
    unknown call_tmp[621267] "expr temp" "maybe param" "maybe type" "temp"
    (621270 'move' call_tmp[621267](455919 'query' r[70481] 2))
    unknown call_tmp[621272] "expr temp" "maybe param" "maybe type" "temp"
    (621275 'move' call_tmp[621272](455925 'query' r[70481] 3))
    unknown call_tmp[621281] "expr temp" "maybe param" "maybe type" "temp"
    (621284 'move' call_tmp[621281](70509 call _low _mt[243] r[70481]))
    unknown call_tmp[621286] "expr temp" "maybe param" "maybe type" "temp"
    (621289 'move' call_tmp[621286](70513 call - call_tmp[621281] i[70487]))
    unknown call_tmp[621291] "expr temp" "maybe param" "maybe type" "temp"
    (621294 'move' call_tmp[621291](70516 call(70505 call (partial) chpl_intToIdx _mt[243] r[70481]) call_tmp[621286]))
    unknown call_tmp[621300] "expr temp" "maybe param" "maybe type" "temp"
    (621303 'move' call_tmp[621300](70522 call _high _mt[243] r[70481]))
    unknown call_tmp[621305] "expr temp" "maybe param" "maybe type" "temp"
    (621308 'move' call_tmp[621305](70526 call - call_tmp[621300] i[70487]))
    unknown call_tmp[621310] "expr temp" "maybe param" "maybe type" "temp"
    (621313 'move' call_tmp[621310](70529 call(70518 call (partial) chpl_intToIdx _mt[243] r[70481]) call_tmp[621305]))
    unknown call_tmp[621317] "expr temp" "maybe param" "maybe type" "temp"
    (621320 'move' call_tmp[621317](70531 call stride _mt[243] r[70481]))
    unknown call_tmp[621322] "expr temp" "maybe param" "maybe type" "temp"
    (621325 'move' call_tmp[621322](70535 call _cast strType[70494] call_tmp[621317]))
    unknown call_tmp[621331] "expr temp" "maybe param" "maybe type" "temp"
    (621334 'move' call_tmp[621331](70543 call alignment _mt[243] r[70481]))
    unknown call_tmp[621336] "expr temp" "maybe param" "maybe type" "temp"
    (621339 'move' call_tmp[621336](70547 call chpl__idxToInt call_tmp[621331]))
    unknown call_tmp[621341] "expr temp" "maybe param" "maybe type" "temp"
    (621344 'move' call_tmp[621341](70549 call - call_tmp[621336] i[70487]))
    unknown call_tmp[621346] "expr temp" "maybe param" "maybe type" "temp"
    (621349 'move' call_tmp[621346](70552 call(70538 call (partial) chpl_intToIdx _mt[243] r[70481]) call_tmp[621341]))
    unknown call_tmp[621353] "expr temp" "maybe param" "maybe type" "temp"
    (621356 'move' call_tmp[621353](70554 call aligned _mt[243] r[70481]))
    unknown call_tmp[621358] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621361 'move' call_tmp[621358](747825 'new' range[64316](?) call_tmp[621262] call_tmp[621267] call_tmp[621272] call_tmp[621291] call_tmp[621310] call_tmp[621322] call_tmp[621346] call_tmp[621353]))
    (510429 'move' ret[510424](510428 'deref' call_tmp[621358]))
    gotoReturn _end_-[510422] _end_-[510422]
    (475590 'end of statement' strType[70494])
    label _end_-[510422]
    (510426 return ret[510424])
  }
  function chpl_check_step_integral[70566](arg step[70564]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[621363] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621366 'move' call_tmp[621363](70570 'typeof' step[70564]))
    unknown call_tmp[621368] "expr temp" "maybe param" "maybe type" "temp"
    (621371 'move' call_tmp[621368](70572 call isIntegral call_tmp[621363]))
    unknown call_tmp[621373] "expr temp" "maybe param" "maybe type" "temp"
    (621376 'move' call_tmp[621373](70573 call ! call_tmp[621368]))
    unknown call_tmp[621378] "expr temp" "maybe param" "maybe type" "temp"
    (621381 'move' call_tmp[621378](70601 call _cond_test call_tmp[621373]))
    if call_tmp[621378]
    {
      unknown call_tmp[621383] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621386 'move' call_tmp[621383](70595 'typeof' step[70564]))
      unknown call_tmp[621388] "expr temp" "maybe param" "maybe type" "temp"
      (621391 'move' call_tmp[621388](70597 call _cast string[26] call_tmp[621383]))
      (70599 call compilerError "can't apply 'by' using step of a non-integral type " call_tmp[621388])
    }
    (510433 return _void[55])
  }
  function chpl_need_to_check_step[70613](arg step[70611]:_any[178](?), arg strType[70615]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[510437] "RVV" "param" "temp"
    unknown call_tmp[621393] "expr temp" "maybe param" "maybe type" "temp"
    (621396 'move' call_tmp[621393](70621 call isInt strType[70615]))
    (70623 call compilerAssert call_tmp[621393])
    (475593 'end of statement')
    unknown tmp[420112] "maybe param" "temp"
    unknown call_tmp[621398] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621401 'move' call_tmp[621398](70627 'typeof' step[70611]))
    (420123 'move' tmp[420112](70629 call != call_tmp[621398] strType[70615]))
    unknown call_tmp[621403] "expr temp" "maybe param" "maybe type" "temp"
    (621406 'move' call_tmp[621403](420125 call _cond_invalid tmp[420112]))
    if call_tmp[621403]
    {
      (420128 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557101] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557102] "maybe param" "temp"
    unknown call_tmp[621408] "expr temp" "maybe param" "maybe type" "temp"
    (621411 'move' call_tmp[621408](420113 call isTrue tmp[420112]))
    (557107 'move' tmp[557102](557105 call _cond_test call_tmp[621408]))
    if tmp[557102]
    {
      unknown tmp[557109] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621413] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621416 'move' call_tmp[621413](70633 'typeof' step[70611]))
      unknown call_tmp[621418] "expr temp" "maybe param" "maybe type" "temp"
      (621421 'move' call_tmp[621418](70635 call numBits call_tmp[621413]))
      unknown call_tmp[621423] "expr temp" "maybe param" "maybe type" "temp"
      (621426 'move' call_tmp[621423](70639 call numBits strType[70615]))
      unknown call_tmp[621428] "expr temp" "maybe param" "maybe type" "temp"
      (621431 'move' call_tmp[621428](70640 call >= call_tmp[621418] call_tmp[621423]))
      (557111 'move' tmp[557109](420116 call isTrue call_tmp[621428]))
      (557116 'move' tmp[557101](557113 '_paramFoldLogical' tmp[557102] tmp[557109]))
    }
    {
      (557121 'move' tmp[557101](557118 '_paramFoldLogical' tmp[557102] 0))
    }
    (510442 'move' ret[510437](510441 'deref' tmp[557101]))
    (510439 return ret[510437])
  }
  function chpl_range_check_stride[70652](arg step[70650]:_any[178](?), arg idxType[70654]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70659 call chpl_check_step_integral step[70650])
    (475596 'end of statement')
    unknown strType[70666] "dead at end of block" "insert auto destroy" "type variable"(70665 call chpl__rangeStrideType idxType[70654])
    (541131 'move' strType[70666](541129 call chpl__rangeStrideType idxType[70654]))
    (475597 'end of statement')
    unknown call_tmp[621433] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621436 'move' call_tmp[621433](70671 'typeof' step[70650]))
    unknown call_tmp[621438] "expr temp" "maybe param" "maybe type" "temp"
    (621441 'move' call_tmp[621438](70673 call numBits call_tmp[621433]))
    unknown call_tmp[621443] "expr temp" "maybe param" "maybe type" "temp"
    (621446 'move' call_tmp[621443](70677 call numBits strType[70666]))
    unknown call_tmp[621448] "expr temp" "maybe param" "maybe type" "temp"
    (621451 'move' call_tmp[621448](70678 call > call_tmp[621438] call_tmp[621443]))
    unknown call_tmp[621453] "expr temp" "maybe param" "maybe type" "temp"
    (621456 'move' call_tmp[621453](70727 call _cond_test call_tmp[621448]))
    if call_tmp[621453]
    {
      unknown call_tmp[621458] "expr temp" "maybe param" "maybe type" "temp"
      (621461 'move' call_tmp[621458](70701 call _cast string[26] idxType[70654]))
      unknown call_tmp[621463] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621466 'move' call_tmp[621463](70721 'typeof' step[70650]))
      unknown call_tmp[621468] "expr temp" "maybe param" "maybe type" "temp"
      (621471 'move' call_tmp[621468](70723 call _cast string[26] call_tmp[621463]))
      (70725 call compilerError "can't apply 'by' to a range with idxType " call_tmp[621458] " using a step of type " call_tmp[621468])
    }
    unknown call_tmp[621473] "expr temp" "maybe param" "maybe type" "temp"
    (621476 'move' call_tmp[621473](70822 call _cond_test 1))
    if call_tmp[621473]
    {
      unknown call_tmp[621478] "expr temp" "maybe param" "maybe type" "temp"
      (621481 'move' call_tmp[621478](70735 call == step[70650] 0))
      unknown call_tmp[621483] "expr temp" "maybe param" "maybe type" "temp"
      (621486 'move' call_tmp[621483](70761 call _cond_test call_tmp[621478]))
      if call_tmp[621483]
      {
        (70759 call boundsCheckHalt module=[255] HaltWrappers[209915] "the step argument of the 'by' operator is zero")
        (357836 'referenced modules list' HaltWrappers[209915])
      }
      unknown tmp[420133] "maybe param" "temp"
      (420144 'move' tmp[420133](70771 call chpl_need_to_check_step step[70650] strType[70666]))
      unknown call_tmp[621488] "expr temp" "maybe param" "maybe type" "temp"
      (621491 'move' call_tmp[621488](420146 call _cond_invalid tmp[420133]))
      if call_tmp[621488]
      {
        (420149 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557128] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557129] "maybe param" "temp"
      unknown call_tmp[621493] "expr temp" "maybe param" "maybe type" "temp"
      (621496 'move' call_tmp[621493](420134 call isTrue tmp[420133]))
      (557134 'move' tmp[557129](557132 call _cond_test call_tmp[621493]))
      if tmp[557129]
      {
        unknown tmp[557136] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621498] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (621501 'move' call_tmp[621498](70778 'typeof' step[70650]))
        unknown call_tmp[621503] "expr temp" "maybe param" "maybe type" "temp"
        (621506 'move' call_tmp[621503](70776 call max strType[70666]))
        unknown call_tmp[621508] "expr temp" "maybe param" "maybe type" "temp"
        (621511 'move' call_tmp[621508](70779 call _cast call_tmp[621498] call_tmp[621503]))
        unknown call_tmp[621513] "expr temp" "maybe param" "maybe type" "temp"
        (621516 'move' call_tmp[621513](70781 call > step[70650] call_tmp[621508]))
        (557138 'move' tmp[557136](420137 call isTrue call_tmp[621513]))
        (557143 'move' tmp[557128](557140 '_paramFoldLogical' tmp[557129] tmp[557136]))
      }
      {
        (557148 'move' tmp[557128](557145 '_paramFoldLogical' tmp[557129] 0))
      }
      unknown call_tmp[621518] "expr temp" "maybe param" "maybe type" "temp"
      (621521 'move' call_tmp[621518](70817 call _cond_test tmp[557128]))
      if call_tmp[621518]
      {
        unknown call_tmp[621523] "expr temp" "maybe param" "maybe type" "temp"
        (621526 'move' call_tmp[621523](70810 call _cast string[26] strType[70666]))
        unknown call_tmp[621528] "expr temp" "maybe param" "maybe type" "temp"
        (621531 'move' call_tmp[621528](70812 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621523]))
        (70815 call boundsCheckHalt module=[255] HaltWrappers[209915] call_tmp[621528])
        (475601 'end of statement' strType[70666])
        (357842 'referenced modules list' HaltWrappers[209915])
      }
    }
    (510444 return _void[55])
  }
  function chpl_range_check_stride[70832](param arg step[70830]:_any[178](?), arg idxType[70834]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70839 call chpl_check_step_integral step[70830])
    (475603 'end of statement')
    unknown strType[70846] "dead at end of block" "insert auto destroy" "type variable"(70845 call chpl__rangeStrideType idxType[70834])
    (541136 'move' strType[70846](541134 call chpl__rangeStrideType idxType[70834]))
    (475604 'end of statement')
    unknown call_tmp[621533] "expr temp" "maybe param" "maybe type" "temp"
    (621536 'move' call_tmp[621533](70851 call == step[70830] 0))
    unknown call_tmp[621538] "expr temp" "maybe param" "maybe type" "temp"
    (621541 'move' call_tmp[621538](70858 call _cond_test call_tmp[621533]))
    if call_tmp[621538]
    {
      (70856 call compilerError "the step argument of the 'by' operator is zero")
    }
    unknown tmp[420154] "maybe param" "temp"
    (420165 'move' tmp[420154](70867 call chpl_need_to_check_step step[70830] strType[70846]))
    unknown call_tmp[621543] "expr temp" "maybe param" "maybe type" "temp"
    (621546 'move' call_tmp[621543](420167 call _cond_invalid tmp[420154]))
    if call_tmp[621543]
    {
      (420170 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557155] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557156] "maybe param" "temp"
    unknown call_tmp[621548] "expr temp" "maybe param" "maybe type" "temp"
    (621551 'move' call_tmp[621548](420155 call isTrue tmp[420154]))
    (557161 'move' tmp[557156](557159 call _cond_test call_tmp[621548]))
    if tmp[557156]
    {
      unknown tmp[557163] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621553] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621556 'move' call_tmp[621553](70874 'typeof' step[70830]))
      unknown call_tmp[621558] "expr temp" "maybe param" "maybe type" "temp"
      (621561 'move' call_tmp[621558](70872 call max strType[70846]))
      unknown call_tmp[621563] "expr temp" "maybe param" "maybe type" "temp"
      (621566 'move' call_tmp[621563](70875 call _cast call_tmp[621553] call_tmp[621558]))
      unknown call_tmp[621568] "expr temp" "maybe param" "maybe type" "temp"
      (621571 'move' call_tmp[621568](70877 call > step[70830] call_tmp[621563]))
      (557165 'move' tmp[557163](420158 call isTrue call_tmp[621568]))
      (557170 'move' tmp[557155](557167 '_paramFoldLogical' tmp[557156] tmp[557163]))
    }
    {
      (557175 'move' tmp[557155](557172 '_paramFoldLogical' tmp[557156] 0))
    }
    unknown call_tmp[621573] "expr temp" "maybe param" "maybe type" "temp"
    (621576 'move' call_tmp[621573](70892 call _cond_test tmp[557155]))
    if call_tmp[621573]
    {
      unknown call_tmp[621578] "expr temp" "maybe param" "maybe type" "temp"
      (621581 'move' call_tmp[621578](70885 call _cast string[26] strType[70846]))
      unknown call_tmp[621583] "expr temp" "maybe param" "maybe type" "temp"
      (621586 'move' call_tmp[621583](70887 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621578]))
      (70890 call compilerError call_tmp[621583])
      (475607 'end of statement' strType[70846])
    }
    (510446 return _void[55])
  }
  function chpl_by_help[70913](arg r[70910]:range[64316](?), arg step[70915]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510450] "RVV" "temp"
    unknown call_tmp[621590] "maybe param" "maybe type" "temp"
    (621593 'move' call_tmp[621590](70919 call low _mt[243] r[70910]))
    unknown call_tmp[621595] "maybe param" "maybe type" "temp"
    (621598 'move' call_tmp[621595](455935 'query' r[70910] 1))
    const lw[70922] "dead at end of block" "const" "insert auto destroy"
    (541138 'init var' lw[70922] call_tmp[621590] call_tmp[621595])
    unknown call_tmp[621602] "maybe param" "maybe type" "temp"
    (621605 'move' call_tmp[621602](70927 call high _mt[243] r[70910]))
    unknown call_tmp[621607] "maybe param" "maybe type" "temp"
    (621610 'move' call_tmp[621607](455938 'query' r[70910] 1))
    const hh[70930] "dead at end of block" "const" "insert auto destroy"
    (541140 'init var' hh[70930] call_tmp[621602] call_tmp[621607])
    unknown call_tmp[621614] "expr temp" "maybe param" "maybe type" "temp"
    (621617 'move' call_tmp[621614](70940 call stride _mt[243] r[70910]))
    unknown call_tmp[621621] "expr temp" "maybe param" "maybe type" "temp"
    (621624 'move' call_tmp[621621](70945 call strType _mt[243] r[70910]))
    unknown call_tmp[621626] "expr temp" "maybe param" "maybe type" "temp"
    (621629 'move' call_tmp[621626](70948 call _cast call_tmp[621621] step[70915]))
    unknown call_tmp[621631] "maybe param" "maybe type" "temp"
    (621634 'move' call_tmp[621631](70950 call * call_tmp[621614] call_tmp[621626]))
    unknown call_tmp[621638] "maybe param" "maybe type" "temp"
    (621641 'move' call_tmp[621638](70936 call strType _mt[243] r[70910]))
    const st[70952] "dead at end of block" "const" "insert auto destroy"
    (541142 'init var' st[70952] call_tmp[621631] call_tmp[621638])
    (70955 'end of statement')
    const tmp[71077] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[557352] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557353] "maybe param" "temp"
    unknown call_tmp[621645] "expr temp" "maybe param" "maybe type" "temp"
    (621648 'move' call_tmp[621645](70972 call(70968 call (partial) isAmbiguous _mt[243] r[70910])))
    (557358 'move' tmp[557353](557356 call _cond_test call_tmp[621645]))
    if tmp[557353]
    {
      unknown tmp[557182] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557183] "maybe param" "temp"
      unknown call_tmp[621652] "expr temp" "maybe param" "maybe type" "temp"
      (621655 'move' call_tmp[621652](70974 call stridable _mt[243] r[70910]))
      (557188 'move' tmp[557183](557186 call _cond_test call_tmp[621652]))
      if tmp[557183]
      {
        unknown tmp[557190] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621659] "expr temp" "maybe param" "maybe type" "temp"
        (621662 'move' call_tmp[621659](70979 call alignment _mt[243] r[70910]))
        (557192 'move' tmp[557190](70983 call _build_tuple 0 call_tmp[621659]))
        (557197 'move' tmp[557182](557194 '_paramFoldLogical' tmp[557183] tmp[557190]))
      }
      {
        unknown tmp[557199] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621666] "expr temp" "maybe param" "maybe type" "temp"
        (621669 'move' call_tmp[621666](70992 call(70987 call (partial) chpl_intToIdx _mt[243] r[70910]) 0))
        (557201 'move' tmp[557199](70994 call _build_tuple 0 call_tmp[621666]))
        (557206 'move' tmp[557182](557203 '_paramFoldLogical' tmp[557183] tmp[557199]))
      }
      (557363 'move' tmp[557352](557360 '_paramFoldLogical' tmp[557353] tmp[557182]))
    }
    {
      unknown tmp[420196] "maybe param" "temp"
      (420207 'move' tmp[420196](71004 call(71000 call (partial) hasLowBound _mt[243] r[70910])))
      unknown call_tmp[621673] "expr temp" "maybe param" "maybe type" "temp"
      (621676 'move' call_tmp[621673](420209 call _cond_invalid tmp[420196]))
      if call_tmp[621673]
      {
        (420212 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557213] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557214] "maybe param" "temp"
      unknown call_tmp[621678] "expr temp" "maybe param" "maybe type" "temp"
      (621681 'move' call_tmp[621678](420197 call isTrue tmp[420196]))
      (557219 'move' tmp[557214](557217 call _cond_test call_tmp[621678]))
      if tmp[557214]
      {
        unknown tmp[557221] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621683] "expr temp" "maybe param" "maybe type" "temp"
        (621686 'move' call_tmp[621683](71007 call > st[70952] 0))
        (557223 'move' tmp[557221](420200 call isTrue call_tmp[621683]))
        (557228 'move' tmp[557213](557225 '_paramFoldLogical' tmp[557214] tmp[557221]))
      }
      {
        (557233 'move' tmp[557213](557230 '_paramFoldLogical' tmp[557214] 0))
      }
      unknown tmp[557325] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557326] "maybe param" "temp"
      (557331 'move' tmp[557326](557329 call _cond_test tmp[557213]))
      if tmp[557326]
      {
        unknown tmp[557333] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621690] "expr temp" "maybe param" "maybe type" "temp"
        (621693 'move' call_tmp[621690](71013 call alignedLow _mt[243] r[70910]))
        (557335 'move' tmp[557333](71017 call _build_tuple 1 call_tmp[621690]))
        (557340 'move' tmp[557325](557337 '_paramFoldLogical' tmp[557326] tmp[557333]))
      }
      {
        unknown tmp[420175] "maybe param" "temp"
        (420186 'move' tmp[420175](71024 call(71020 call (partial) hasHighBound _mt[243] r[70910])))
        unknown call_tmp[621697] "expr temp" "maybe param" "maybe type" "temp"
        (621700 'move' call_tmp[621697](420188 call _cond_invalid tmp[420175]))
        if call_tmp[621697]
        {
          (420191 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557240] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557241] "maybe param" "temp"
        unknown call_tmp[621702] "expr temp" "maybe param" "maybe type" "temp"
        (621705 'move' call_tmp[621702](420176 call isTrue tmp[420175]))
        (557246 'move' tmp[557241](557244 call _cond_test call_tmp[621702]))
        if tmp[557241]
        {
          unknown tmp[557248] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621707] "expr temp" "maybe param" "maybe type" "temp"
          (621710 'move' call_tmp[621707](71027 call < st[70952] 0))
          (557250 'move' tmp[557248](420179 call isTrue call_tmp[621707]))
          (557255 'move' tmp[557240](557252 '_paramFoldLogical' tmp[557241] tmp[557248]))
        }
        {
          (557260 'move' tmp[557240](557257 '_paramFoldLogical' tmp[557241] 0))
        }
        unknown tmp[557298] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[557299] "maybe param" "temp"
        (557304 'move' tmp[557299](557302 call _cond_test tmp[557240]))
        if tmp[557299]
        {
          unknown tmp[557306] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621714] "expr temp" "maybe param" "maybe type" "temp"
          (621717 'move' call_tmp[621714](71033 call alignedHigh _mt[243] r[70910]))
          (557308 'move' tmp[557306](71037 call _build_tuple 1 call_tmp[621714]))
          (557313 'move' tmp[557298](557310 '_paramFoldLogical' tmp[557299] tmp[557306]))
        }
        {
          unknown tmp[557267] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[557268] "maybe param" "temp"
          unknown call_tmp[621721] "expr temp" "maybe param" "maybe type" "temp"
          (621724 'move' call_tmp[621721](71040 call stridable _mt[243] r[70910]))
          (557273 'move' tmp[557268](557271 call _cond_test call_tmp[621721]))
          if tmp[557268]
          {
            unknown tmp[557275] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621728] "expr temp" "maybe param" "maybe type" "temp"
            (621731 'move' call_tmp[621728](71044 call aligned _mt[243] r[70910]))
            unknown call_tmp[621735] "expr temp" "maybe param" "maybe type" "temp"
            (621738 'move' call_tmp[621735](71048 call alignment _mt[243] r[70910]))
            (557277 'move' tmp[557275](71052 call _build_tuple call_tmp[621728] call_tmp[621735]))
            (557282 'move' tmp[557267](557279 '_paramFoldLogical' tmp[557268] tmp[557275]))
          }
          {
            unknown tmp[557284] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621742] "expr temp" "maybe param" "maybe type" "temp"
            (621745 'move' call_tmp[621742](71061 call(71056 call (partial) chpl_intToIdx _mt[243] r[70910]) 0))
            (557286 'move' tmp[557284](71063 call _build_tuple 0 call_tmp[621742]))
            (557291 'move' tmp[557267](557288 '_paramFoldLogical' tmp[557268] tmp[557284]))
          }
          (557318 'move' tmp[557298](557315 '_paramFoldLogical' tmp[557299] tmp[557267]))
        }
        (557345 'move' tmp[557325](557342 '_paramFoldLogical' tmp[557326] tmp[557298]))
      }
      (557368 'move' tmp[557352](557365 '_paramFoldLogical' tmp[557353] tmp[557325]))
    }
    unknown call_tmp[621747] "expr temp" "maybe param" "maybe type" "temp"
    (621750 'move' call_tmp[621747](455941 'query' r[70910] 1))
    unknown call_tmp[621752] "maybe param" "maybe type" "temp"
    (621755 'move' call_tmp[621752](70965 call _build_tuple bool[10] call_tmp[621747]))
    (541144 'init var' tmp[71077] tmp[557352] call_tmp[621752])
    (71084 call _check_tuple_var_decl tmp[71077] 2)
    (475609 'end of statement')
    unknown call_tmp[621757] "maybe param" "maybe type" "temp"
    (621760 'move' call_tmp[621757](71078 call tmp[71077] 0))
    const ald[70957] "dead at end of block" "const" "insert auto destroy"
    (541146 'init var' ald[70957] call_tmp[621757])
    unknown call_tmp[621762] "maybe param" "maybe type" "temp"
    (621765 'move' call_tmp[621762](71081 call tmp[71077] 1))
    const alt[70959] "dead at end of block" "const" "insert auto destroy"
    (541148 'init var' alt[70959] call_tmp[621762])
    (71089 'end of statement')
    unknown call_tmp[621767] "expr temp" "maybe param" "maybe type" "temp"
    (621770 'move' call_tmp[621767](455944 'query' r[70910] 1))
    unknown call_tmp[621772] "expr temp" "maybe param" "maybe type" "temp"
    (621775 'move' call_tmp[621772](455950 'query' r[70910] 2))
    unknown call_tmp[621777] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621780 'move' call_tmp[621777](747826 'new' range[64316](?) call_tmp[621767] call_tmp[621772] 1 lw[70922] hh[70930] st[70952] alt[70959] ald[70957]))
    (510455 'move' ret[510450](510454 'deref' call_tmp[621777]))
    gotoReturn _end_chpl_by_help[510448] _end_chpl_by_help[510448]
    (475610 'end of statement' lw[70922] hh[70930] st[70952] alt[70959] ald[70957])
    label _end_chpl_by_help[510448]
    (510452 return ret[510450])
  }
  function chpl_by[71110](arg r[71108]:_any[178](?), arg step[71112]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510461] "RVV" "temp"
    unknown call_tmp[621782] "expr temp" "maybe param" "maybe type" "temp"
    (621785 'move' call_tmp[621782](71117 call isRange r[71108]))
    unknown call_tmp[621787] "expr temp" "maybe param" "maybe type" "temp"
    (621790 'move' call_tmp[621787](71118 call ! call_tmp[621782]))
    unknown call_tmp[621792] "expr temp" "maybe param" "maybe type" "temp"
    (621795 'move' call_tmp[621792](71141 call _cond_test call_tmp[621787]))
    if call_tmp[621792]
    {
      (71139 call compilerError "the first argument of the 'by' operator is not a range")
    }
    unknown call_tmp[621799] "expr temp" "maybe param" "maybe type" "temp"
    (621802 'move' call_tmp[621799](71151 call idxType _mt[243] r[71108]))
    (71154 call chpl_range_check_stride step[71112] call_tmp[621799])
    (475617 'end of statement')
    unknown call_tmp[621804] "expr temp" "maybe param" "maybe type" "temp"
    (621807 'move' call_tmp[621804](71160 call chpl_by_help r[71108] step[71112]))
    (510466 'move' ret[510461](510465 'deref' call_tmp[621804]))
    (510463 return ret[510461])
  }
  function chpl_by[71174](arg r[71171]:range[64316](?), param arg step[71176]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510470] "RVV" "temp"
    unknown call_tmp[621811] "expr temp" "maybe param" "maybe type" "temp"
    (621814 'move' call_tmp[621811](71182 call idxType _mt[243] r[71171]))
    (71185 call chpl_range_check_stride step[71176] call_tmp[621811])
    (475619 'end of statement')
    unknown call_tmp[621818] "expr temp" "maybe param" "maybe type" "temp"
    (621821 'move' call_tmp[621818](71193 call strType _mt[243] r[71171]))
    unknown call_tmp[621823] "expr temp" "maybe param" "maybe type" "temp"
    (621826 'move' call_tmp[621823](71196 call _cast call_tmp[621818] step[71176]))
    unknown call_tmp[621828] "expr temp" "maybe param" "maybe type" "temp"
    (621831 'move' call_tmp[621828](71198 call chpl_by_help r[71171] call_tmp[621823]))
    (510475 'move' ret[510470](510474 'deref' call_tmp[621828]))
    (510472 return ret[510470])
  }
  function chpl_align[71217](arg r[71214]:range[64316](?), arg algn[71220] :
  (455970 'query' r[71214] 1)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510479] "RVV" "temp"
    unknown call_tmp[621833] "expr temp" "maybe param" "maybe type" "temp"
    (621836 'move' call_tmp[621833](455973 'query' r[71214] 1))
    unknown call_tmp[621838] "expr temp" "maybe param" "maybe type" "temp"
    (621841 'move' call_tmp[621838](455979 'query' r[71214] 2))
    unknown call_tmp[621847] "expr temp" "maybe param" "maybe type" "temp"
    (621850 'move' call_tmp[621847](71234 call _low _mt[243] r[71214]))
    unknown call_tmp[621852] "expr temp" "maybe param" "maybe type" "temp"
    (621855 'move' call_tmp[621852](71238 call(71230 call (partial) chpl_intToIdx _mt[243] r[71214]) call_tmp[621847]))
    unknown call_tmp[621861] "expr temp" "maybe param" "maybe type" "temp"
    (621864 'move' call_tmp[621861](71244 call _high _mt[243] r[71214]))
    unknown call_tmp[621866] "expr temp" "maybe param" "maybe type" "temp"
    (621869 'move' call_tmp[621866](71248 call(71240 call (partial) chpl_intToIdx _mt[243] r[71214]) call_tmp[621861]))
    unknown call_tmp[621873] "expr temp" "maybe param" "maybe type" "temp"
    (621876 'move' call_tmp[621873](71250 call stride _mt[243] r[71214]))
    unknown call_tmp[621878] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621881 'move' call_tmp[621878](747827 'new' range[64316](?) call_tmp[621833] call_tmp[621838] 1 call_tmp[621852] call_tmp[621866] call_tmp[621873] algn[71220] 1))
    (510484 'move' ret[510479](510483 'deref' call_tmp[621878]))
    (510481 return ret[510479])
  }
  function chpl_align[71275](arg r[71272]:range[64316](?), arg algn[71277]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510488] "RVV" "temp"
    unknown call_tmp[621883] "expr temp" "maybe param" "maybe type" "temp"
    (621886 'move' call_tmp[621883](455992 'query' r[71272] 1))
    unknown call_tmp[621888] "expr temp" "maybe param" "maybe type" "temp"
    (621891 'move' call_tmp[621888](71300 call _cast string[26] call_tmp[621883]))
    unknown call_tmp[621893] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621896 'move' call_tmp[621893](71320 'typeof' algn[71277]))
    unknown call_tmp[621898] "expr temp" "maybe param" "maybe type" "temp"
    (621901 'move' call_tmp[621898](71322 call _cast string[26] call_tmp[621893]))
    (71324 call compilerError "can't align a range with idxType " call_tmp[621888] " using a value of type " call_tmp[621898])
    (475622 'end of statement')
    (510493 'move' ret[510488](510492 'deref' r[71272]))
    (510490 return ret[510488])
  }
  function range[64316](?).offset[71339](arg _mt[71344]:_MT[238], arg this[71341]:range[64316](?) :
  range[64316](?), in arg offset[71336]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510497] "RVV" "temp"
    unknown call_tmp[621907] "expr temp" "maybe param" "maybe type" "temp"
    (621910 'move' call_tmp[621907](375072 call intIdxType _mt[243] this[71341]))
    unknown call_tmp[621912] "maybe param" "maybe type" "temp"
    (621915 'move' call_tmp[621912](71352 call(71347 call (partial) safeCast _mt[243] offset[71336]) call_tmp[621907]))
    unknown offs[71353] "dead at end of block" "insert auto destroy"
    (541150 'init var' offs[71353] call_tmp[621912])
    (71356 'end of statement')
    unknown call_tmp[621919] "expr temp" "maybe param" "maybe type" "temp"
    (621922 'move' call_tmp[621919](375077 call stridable _mt[243] this[71341]))
    unknown call_tmp[621924] "expr temp" "maybe param" "maybe type" "temp"
    (621927 'move' call_tmp[621924](71359 call ! call_tmp[621919]))
    unknown call_tmp[621929] "expr temp" "maybe param" "maybe type" "temp"
    (621932 'move' call_tmp[621929](71388 call _cond_test call_tmp[621924]))
    if call_tmp[621929]
    {
      (71380 call compilerWarning "invoking 'offset' on an unstrided range has no effect.")
      (475624 'end of statement')
      (71385 call = offs[71353] 0)
      (475625 'end of statement' offs[71353])
    }
    unknown tmp[420217] "maybe param" "temp"
    (420228 'move' tmp[420217] 1)
    unknown call_tmp[621934] "expr temp" "maybe param" "maybe type" "temp"
    (621937 'move' call_tmp[621934](420230 call _cond_invalid tmp[420217]))
    if call_tmp[621934]
    {
      (420233 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557375] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557376] "maybe param" "temp"
    unknown call_tmp[621939] "expr temp" "maybe param" "maybe type" "temp"
    (621942 'move' call_tmp[621939](420218 call isTrue tmp[420217]))
    (557381 'move' tmp[557376](557379 call _cond_test call_tmp[621939]))
    if tmp[557376]
    {
      unknown tmp[557383] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621946] "expr temp" "maybe param" "maybe type" "temp"
      (621949 'move' call_tmp[621946](71395 call(375083 call (partial) hasFirst _mt[243] this[71341])))
      unknown call_tmp[621951] "expr temp" "maybe param" "maybe type" "temp"
      (621954 'move' call_tmp[621951](71396 call ! call_tmp[621946]))
      (557385 'move' tmp[557383](420221 call isTrue call_tmp[621951]))
      (557390 'move' tmp[557375](557387 '_paramFoldLogical' tmp[557376] tmp[557383]))
    }
    {
      (557395 'move' tmp[557375](557392 '_paramFoldLogical' tmp[557376] 0))
    }
    unknown call_tmp[621956] "expr temp" "maybe param" "maybe type" "temp"
    (621959 'move' call_tmp[621956](71424 call _cond_test tmp[557375]))
    if call_tmp[621956]
    {
      (71422 call boundsCheckHalt module=[255] HaltWrappers[209915] "invoking 'offset' on a range without the first index")
      (357874 'referenced modules list' HaltWrappers[209915])
    }
    unknown call_tmp[621963] "expr temp" "maybe param" "maybe type" "temp"
    (621966 'move' call_tmp[621963](375089 call idxType _mt[243] this[71341]))
    unknown call_tmp[621970] "expr temp" "maybe param" "maybe type" "temp"
    (621973 'move' call_tmp[621970](375094 call boundedType _mt[243] this[71341]))
    unknown call_tmp[621977] "expr temp" "maybe param" "maybe type" "temp"
    (621980 'move' call_tmp[621977](375099 call stridable _mt[243] this[71341]))
    unknown call_tmp[621984] "expr temp" "maybe param" "maybe type" "temp"
    (621987 'move' call_tmp[621984](375103 call low _mt[243] this[71341]))
    unknown call_tmp[621991] "expr temp" "maybe param" "maybe type" "temp"
    (621994 'move' call_tmp[621991](375107 call high _mt[243] this[71341]))
    unknown call_tmp[621998] "expr temp" "maybe param" "maybe type" "temp"
    (622001 'move' call_tmp[621998](375111 call stride _mt[243] this[71341]))
    unknown call_tmp[622007] "expr temp" "maybe param" "maybe type" "temp"
    (622010 'move' call_tmp[622007](71440 call firstAsInt _mt[243] this[71341]))
    unknown call_tmp[622012] "expr temp" "maybe param" "maybe type" "temp"
    (622015 'move' call_tmp[622012](71444 call + call_tmp[622007] offs[71353]))
    unknown call_tmp[622017] "expr temp" "maybe param" "maybe type" "temp"
    (622020 'move' call_tmp[622017](71447 call(375115 call (partial) chpl_intToIdx _mt[243] this[71341]) call_tmp[622012]))
    unknown call_tmp[622022] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (622025 'move' call_tmp[622022](747828 'new' range[64316](?) call_tmp[621963] call_tmp[621970] call_tmp[621977] call_tmp[621984] call_tmp[621991] call_tmp[621998] call_tmp[622017] 1))
    (510502 'move' ret[510497](510501 'deref' call_tmp[622022]))
    gotoReturn _end_offset[510495] _end_offset[510495]
    (475629 'end of statement' offs[71353])
    label _end_offset[510495]
    (510499 return ret[510497])
  }
  function range[64316](?).this[71464](arg _mt[71469]:_MT[238], const arg this[71466]:range[64316](?) :
  range[64316](?), arg other[71461]:range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510590] "RVV" "temp"
    unknown ambig[71472] "dead at end of block" "insert auto destroy"
    (541152 'init var' ambig[71472] 0)
    (71475 'end of statement')
    unknown tmp[420259] "maybe param" "temp"
    (420270 'move' tmp[420259](71482 call(71478 call (partial) isAmbiguous _mt[243] this[71466])))
    unknown call_tmp[622029] "expr temp" "maybe param" "maybe type" "temp"
    (622032 'move' call_tmp[622029](420272 call _cond_invalid tmp[420259]))
    if call_tmp[622029]
    {
      (420275 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[557402] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557403] "maybe param" "temp"
    unknown call_tmp[622034] "expr temp" "maybe param" "maybe type" "temp"
    (622037 'move' call_tmp[622034](420260 call isTrue tmp[420259]))
    (557408 'move' tmp[557403](557406 call _cond_test call_tmp[622034]))
    if tmp[557403]
    {
      (557413 'move' tmp[557402](557410 '_paramFoldLogical' tmp[557403] 1))
    }
    {
      unknown tmp[557415] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622041] "expr temp" "maybe param" "maybe type" "temp"
      (622044 'move' call_tmp[622041](71488 call(71484 call (partial) isAmbiguous _mt[243] other[71461])))
      (557417 'move' tmp[557415](420264 call isTrue call_tmp[622041]))
      (557422 'move' tmp[557402](557419 '_paramFoldLogical' tmp[557403] tmp[557415]))
    }
    unknown call_tmp[622046] "expr temp" "maybe param" "maybe type" "temp"
    (622049 'move' call_tmp[622046](71580 call _cond_test tmp[557402]))
    if call_tmp[622046]
    {
      unknown call_tmp[622053] "expr temp" "maybe param" "maybe type" "temp"
      (622056 'move' call_tmp[622053](71493 call stride _mt[243] this[71466]))
      unknown call_tmp[622058] "maybe param" "maybe type" "temp"
      (622061 'move' call_tmp[622058](71497 call abs call_tmp[622053]))
      unknown st1[71498] "dead at end of block" "insert auto destroy"
      (541154 'init var' st1[71498] call_tmp[622058])
      (71501 'end of statement')
      unknown call_tmp[622065] "expr temp" "maybe param" "maybe type" "temp"
      (622068 'move' call_tmp[622065](71505 call stride _mt[243] other[71461]))
      unknown call_tmp[622070] "maybe param" "maybe type" "temp"
      (622073 'move' call_tmp[622070](71509 call abs call_tmp[622065]))
      unknown st2[71510] "dead at end of block" "insert auto destroy"
      (541156 'init var' st2[71510] call_tmp[622070])
      (71513 'end of statement')
      unknown call_tmp[622075] "maybe param" "maybe type" "temp"
      (622078 'move' call_tmp[622075](71523 call chpl__extendedEuclid st1[71498] st2[71510]))
      unknown tmp[71524] "dead at end of block" "insert auto destroy" "temp"
      (541158 'init var' tmp[71524] call_tmp[622075])
      (71531 call _check_tuple_var_decl tmp[71524] 2)
      (475632 'end of statement')
      unknown call_tmp[622080] "maybe param" "maybe type" "temp"
      (622083 'move' call_tmp[622080](71525 call tmp[71524] 0))
      unknown g[71514] "dead at end of block" "insert auto destroy"
      (541160 'init var' g[71514] call_tmp[622080])
      unknown call_tmp[622085] "maybe param" "maybe type" "temp"
      (622088 'move' call_tmp[622085](71528 call tmp[71524] 1))
      unknown x[71516] "dead at end of block" "insert auto destroy"
      (541162 'init var' x[71516] call_tmp[622085])
      (71536 'end of statement')
      unknown tmp[420238] "maybe param" "temp"
      (420249 'move' tmp[420238] 1)
      unknown call_tmp[622090] "expr temp" "maybe param" "maybe type" "temp"
      (622093 'move' call_tmp[622090](420251 call _cond_invalid tmp[420238]))
      if call_tmp[622090]
      {
        (420254 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557429] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557430] "maybe param" "temp"
      unknown call_tmp[622095] "expr temp" "maybe param" "maybe type" "temp"
      (622098 'move' call_tmp[622095](420239 call isTrue tmp[420238]))
      (557435 'move' tmp[557430](557433 call _cond_test call_tmp[622095]))
      if tmp[557430]
      {
        unknown tmp[557437] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622100] "expr temp" "maybe param" "maybe type" "temp"
        (622103 'move' call_tmp[622100](71540 call > g[71514] 1))
        (557439 'move' tmp[557437](420242 call isTrue call_tmp[622100]))
        (557444 'move' tmp[557429](557441 '_paramFoldLogical' tmp[557430] tmp[557437]))
      }
      {
        (557449 'move' tmp[557429](557446 '_paramFoldLogical' tmp[557430] 0))
      }
      unknown call_tmp[622105] "expr temp" "maybe param" "maybe type" "temp"
      (622108 'move' call_tmp[622105](71570 call _cond_test tmp[557429]))
      if call_tmp[622105]
      {
        (71568 call boundsCheckHalt module=[255] HaltWrappers[209915] "Cannot slice ranges with ambiguous alignments unless their strides are relatively prime.")
        (357885 'referenced modules list' HaltWrappers[209915])
      }
      (71577 call = ambig[71472] 1)
      (475635 'end of statement' ambig[71472])
    }
    function computeBoundedType[71588](arg r1[71586]:_any[178](?), arg r2[71590]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[510508] "RVV" "param" "temp"
      unknown tmp[420280] "maybe param" "temp"
      (420291 'move' tmp[420280](71597 call(71593 call (partial) hasLowBound _mt[243] r1[71586])))
      unknown call_tmp[622112] "expr temp" "maybe param" "maybe type" "temp"
      (622115 'move' call_tmp[622112](420293 call _cond_invalid tmp[420280]))
      if call_tmp[622112]
      {
        (420296 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown low[71606] "dead at end of block" "param"
      unknown tmp[557456] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557457] "maybe param" "temp"
      unknown call_tmp[622117] "expr temp" "maybe param" "maybe type" "temp"
      (622120 'move' call_tmp[622117](420281 call isTrue tmp[420280]))
      (557462 'move' tmp[557457](557460 call _cond_test call_tmp[622117]))
      if tmp[557457]
      {
        (557467 'move' tmp[557456](557464 '_paramFoldLogical' tmp[557457] 1))
      }
      {
        unknown tmp[557469] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622124] "expr temp" "maybe param" "maybe type" "temp"
        (622127 'move' call_tmp[622124](71603 call(71599 call (partial) hasLowBound _mt[243] r2[71590])))
        (557471 'move' tmp[557469](420285 call isTrue call_tmp[622124]))
        (557476 'move' tmp[557456](557473 '_paramFoldLogical' tmp[557457] tmp[557469]))
      }
      (541164 'init var' low[71606] tmp[557456])
      (71609 'end of statement')
      unknown tmp[420301] "maybe param" "temp"
      (420312 'move' tmp[420301](71616 call(71612 call (partial) hasHighBound _mt[243] r1[71586])))
      unknown call_tmp[622131] "expr temp" "maybe param" "maybe type" "temp"
      (622134 'move' call_tmp[622131](420314 call _cond_invalid tmp[420301]))
      if call_tmp[622131]
      {
        (420317 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown high[71625] "dead at end of block" "param"
      unknown tmp[557483] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557484] "maybe param" "temp"
      unknown call_tmp[622136] "expr temp" "maybe param" "maybe type" "temp"
      (622139 'move' call_tmp[622136](420302 call isTrue tmp[420301]))
      (557489 'move' tmp[557484](557487 call _cond_test call_tmp[622136]))
      if tmp[557484]
      {
        (557494 'move' tmp[557483](557491 '_paramFoldLogical' tmp[557484] 1))
      }
      {
        unknown tmp[557496] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622143] "expr temp" "maybe param" "maybe type" "temp"
        (622146 'move' call_tmp[622143](71622 call(71618 call (partial) hasHighBound _mt[243] r2[71590])))
        (557498 'move' tmp[557496](420306 call isTrue call_tmp[622143]))
        (557503 'move' tmp[557483](557500 '_paramFoldLogical' tmp[557484] tmp[557496]))
      }
      (541166 'init var' high[71625] tmp[557483])
      (71628 'end of statement')
      unknown tmp[420322] "maybe param" "temp"
      (420333 'move' tmp[420322] low[71606])
      unknown call_tmp[622148] "expr temp" "maybe param" "maybe type" "temp"
      (622151 'move' call_tmp[622148](420335 call _cond_invalid tmp[420322]))
      if call_tmp[622148]
      {
        (420338 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557510] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557511] "maybe param" "temp"
      unknown call_tmp[622153] "expr temp" "maybe param" "maybe type" "temp"
      (622156 'move' call_tmp[622153](420323 call isTrue tmp[420322]))
      (557516 'move' tmp[557511](557514 call _cond_test call_tmp[622153]))
      if tmp[557511]
      {
        unknown tmp[557518] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557520 'move' tmp[557518](420326 call isTrue high[71625]))
        (557525 'move' tmp[557510](557522 '_paramFoldLogical' tmp[557511] tmp[557518]))
      }
      {
        (557530 'move' tmp[557510](557527 '_paramFoldLogical' tmp[557511] 0))
      }
      unknown call_tmp[622158] "expr temp" "maybe param" "maybe type" "temp"
      (622161 'move' call_tmp[622158](71671 call _cond_test tmp[557510]))
      if call_tmp[622158]
      {
        (510513 'move' ret[510508](510512 'deref' bounded[64205]))
        gotoReturn _end_computeBoundedType[510506] _end_computeBoundedType[510506]
      }
      {
        unknown call_tmp[622163] "expr temp" "maybe param" "maybe type" "temp"
        (622166 'move' call_tmp[622163](71665 call _cond_test low[71606]))
        if call_tmp[622163]
        {
          (510518 'move' ret[510508](510517 'deref' boundedLow[64207]))
          gotoReturn _end_computeBoundedType[510506] _end_computeBoundedType[510506]
        }
        {
          unknown call_tmp[622168] "expr temp" "maybe param" "maybe type" "temp"
          (622171 'move' call_tmp[622168](71659 call _cond_test high[71625]))
          if call_tmp[622168]
          {
            (510523 'move' ret[510508](510522 'deref' boundedHigh[64209]))
            gotoReturn _end_computeBoundedType[510506] _end_computeBoundedType[510506]
          }
          {
            (510528 'move' ret[510508](510527 'deref' boundedNone[64211]))
            gotoReturn _end_computeBoundedType[510506] _end_computeBoundedType[510506]
          }
        }
      }
      label _end_computeBoundedType[510506]
      (510510 return ret[510508])
    }
    unknown lo1[71693] "dead at end of block" "insert auto destroy"
    unknown tmp[557537] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557538] "maybe param" "temp"
    unknown call_tmp[622175] "expr temp" "maybe param" "maybe type" "temp"
    (622178 'move' call_tmp[622175](71681 call(375130 call (partial) hasLowBound _mt[243] this[71466])))
    (557543 'move' tmp[557538](557541 call _cond_test call_tmp[622175]))
    if tmp[557538]
    {
      unknown tmp[557545] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557547 'move' tmp[557545](71683 call _low _mt[243] this[71466]))
      (557552 'move' tmp[557537](557549 '_paramFoldLogical' tmp[557538] tmp[557545]))
    }
    {
      unknown tmp[557554] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557556 'move' tmp[557554](71687 call _low _mt[243] other[71461]))
      (557561 'move' tmp[557537](557558 '_paramFoldLogical' tmp[557538] tmp[557554]))
    }
    (541168 'init var' lo1[71693] tmp[557537])
    (71696 'end of statement')
    unknown hi1[71711] "dead at end of block" "insert auto destroy"
    unknown tmp[557568] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557569] "maybe param" "temp"
    unknown call_tmp[622186] "expr temp" "maybe param" "maybe type" "temp"
    (622189 'move' call_tmp[622186](71699 call(375134 call (partial) hasHighBound _mt[243] this[71466])))
    (557574 'move' tmp[557569](557572 call _cond_test call_tmp[622186]))
    if tmp[557569]
    {
      unknown tmp[557576] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557578 'move' tmp[557576](71701 call _high _mt[243] this[71466]))
      (557583 'move' tmp[557568](557580 '_paramFoldLogical' tmp[557569] tmp[557576]))
    }
    {
      unknown tmp[557585] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557587 'move' tmp[557585](71705 call _high _mt[243] other[71461]))
      (557592 'move' tmp[557568](557589 '_paramFoldLogical' tmp[557569] tmp[557585]))
    }
    (541170 'init var' hi1[71711] tmp[557568])
    (71714 'end of statement')
    unknown call_tmp[622197] "expr temp" "maybe param" "maybe type" "temp"
    (622200 'move' call_tmp[622197](71717 call stride _mt[243] this[71466]))
    unknown call_tmp[622202] "maybe param" "maybe type" "temp"
    (622205 'move' call_tmp[622202](71721 call abs call_tmp[622197]))
    unknown st1[71722] "dead at end of block" "insert auto destroy"
    (541172 'init var' st1[71722] call_tmp[622202])
    (71725 'end of statement')
    unknown lo2[71743] "dead at end of block" "insert auto destroy"
    unknown tmp[557599] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557600] "maybe param" "temp"
    unknown call_tmp[622209] "expr temp" "maybe param" "maybe type" "temp"
    (622212 'move' call_tmp[622209](71731 call(71727 call (partial) hasLowBound _mt[243] other[71461])))
    (557605 'move' tmp[557600](557603 call _cond_test call_tmp[622209]))
    if tmp[557600]
    {
      unknown tmp[557607] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557609 'move' tmp[557607](71733 call _low _mt[243] other[71461]))
      (557614 'move' tmp[557599](557611 '_paramFoldLogical' tmp[557600] tmp[557607]))
    }
    {
      unknown tmp[557616] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557618 'move' tmp[557616](71737 call _low _mt[243] this[71466]))
      (557623 'move' tmp[557599](557620 '_paramFoldLogical' tmp[557600] tmp[557616]))
    }
    (541174 'init var' lo2[71743] tmp[557599])
    (71746 'end of statement')
    unknown hi2[71764] "dead at end of block" "insert auto destroy"
    unknown tmp[557630] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557631] "maybe param" "temp"
    unknown call_tmp[622220] "expr temp" "maybe param" "maybe type" "temp"
    (622223 'move' call_tmp[622220](71752 call(71748 call (partial) hasHighBound _mt[243] other[71461])))
    (557636 'move' tmp[557631](557634 call _cond_test call_tmp[622220]))
    if tmp[557631]
    {
      unknown tmp[557638] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557640 'move' tmp[557638](71754 call _high _mt[243] other[71461]))
      (557645 'move' tmp[557630](557642 '_paramFoldLogical' tmp[557631] tmp[557638]))
    }
    {
      unknown tmp[557647] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557649 'move' tmp[557647](71758 call _high _mt[243] this[71466]))
      (557654 'move' tmp[557630](557651 '_paramFoldLogical' tmp[557631] tmp[557647]))
    }
    (541176 'init var' hi2[71764] tmp[557630])
    (71767 'end of statement')
    unknown call_tmp[622231] "expr temp" "maybe param" "maybe type" "temp"
    (622234 'move' call_tmp[622231](71770 call stride _mt[243] other[71461]))
    unknown call_tmp[622236] "maybe param" "maybe type" "temp"
    (622239 'move' call_tmp[622236](71774 call abs call_tmp[622231]))
    unknown st2[71775] "dead at end of block" "insert auto destroy"
    (541178 'init var' st2[71775] call_tmp[622236])
    (71778 'end of statement')
    unknown call_tmp[622243] "expr temp" "maybe param" "maybe type" "temp"
    (622246 'move' call_tmp[622243](375138 call intIdxType _mt[243] this[71466]))
    unknown call_tmp[622248] "expr temp" "maybe param" "maybe type" "temp"
    (622251 'move' call_tmp[622248](71782 call isUintType call_tmp[622243]))
    unknown call_tmp[622253] "expr temp" "maybe param" "maybe type" "temp"
    (622256 'move' call_tmp[622253](71798 call _cond_test call_tmp[622248]))
    if call_tmp[622253]
    {
      unknown call_tmp[622258] "expr temp" "maybe param" "maybe type" "temp"
      (622261 'move' call_tmp[622258](71785 call < lo1[71693] 0))
      unknown call_tmp[622263] "expr temp" "maybe param" "maybe type" "temp"
      (622266 'move' call_tmp[622263](71792 call _cond_test call_tmp[622258]))
      if call_tmp[622263]
      {
        (71789 call = lo1[71693] 0)
        (475644 'end of statement' lo1[71693])
      }
    }
    unknown call_tmp[622270] "maybe param" "maybe type" "temp"
    (622273 'move' call_tmp[622270](71804 call stride _mt[243] this[71466]))
    unknown call_tmp[622277] "maybe param" "maybe type" "temp"
    (622280 'move' call_tmp[622277](375144 call strType _mt[243] this[71466]))
    unknown newStride[71807] "dead at end of block" "insert auto destroy"
    (541180 'init var' newStride[71807] call_tmp[622270] call_tmp[622277])
    (71810 'end of statement')
    unknown call_tmp[622284] "expr temp" "maybe param" "maybe type" "temp"
    (622287 'move' call_tmp[622284](71814 call stride _mt[243] this[71466]))
    unknown call_tmp[622289] "maybe param" "maybe type" "temp"
    (622292 'move' call_tmp[622289](71818 call abs call_tmp[622284]))
    unknown call_tmp[622296] "maybe param" "maybe type" "temp"
    (622299 'move' call_tmp[622296](375148 call strType _mt[243] this[71466]))
    unknown lcm[71819] "dead at end of block" "insert auto destroy"
    (541182 'init var' lcm[71819] call_tmp[622289] call_tmp[622296])
    (71822 'end of statement')
    unknown call_tmp[622303] "expr temp" "maybe param" "maybe type" "temp"
    (622306 'move' call_tmp[622303](375157 call strType _mt[243] this[71466]))
    unknown call_tmp[622308] "expr temp" "maybe param" "maybe type" "temp"
    (622311 'move' call_tmp[622308](71835 call _cast call_tmp[622303] 0))
    unknown call_tmp[622313] "maybe param" "maybe type" "temp"
    (622316 'move' call_tmp[622313](71838 call _build_tuple lcm[71819] call_tmp[622308]))
    unknown call_tmp[622320] "expr temp" "maybe param" "maybe type" "temp"
    (622323 'move' call_tmp[622320](375152 call strType _mt[243] this[71466]))
    unknown call_tmp[622325] "maybe param" "maybe type" "temp"
    (622328 'move' call_tmp[622325](71830 call * 2 call_tmp[622320]))
    unknown tmp[71840] "dead at end of block" "insert auto destroy" "temp"
    (541184 'init var' tmp[71840] call_tmp[622313] call_tmp[622325])
    (71847 call _check_tuple_var_decl tmp[71840] 2)
    (475646 'end of statement')
    unknown call_tmp[622330] "maybe param" "maybe type" "temp"
    (622333 'move' call_tmp[622330](71841 call tmp[71840] 0))
    unknown g[71823] "dead at end of block" "insert auto destroy"
    (541186 'init var' g[71823] call_tmp[622330])
    unknown call_tmp[622335] "maybe param" "maybe type" "temp"
    (622338 'move' call_tmp[622335](71844 call tmp[71840] 1))
    unknown x[71825] "dead at end of block" "insert auto destroy"
    (541188 'init var' x[71825] call_tmp[622335])
    (71852 'end of statement')
    unknown tmp[420343] "maybe param" "temp"
    unknown call_tmp[622342] "expr temp" "maybe param" "maybe type" "temp"
    (622345 'move' call_tmp[622342](71854 call stride _mt[243] this[71466]))
    unknown call_tmp[622349] "expr temp" "maybe param" "maybe type" "temp"
    (622352 'move' call_tmp[622349](71858 call stride _mt[243] other[71461]))
    (420354 'move' tmp[420343](71861 call != call_tmp[622342] call_tmp[622349]))
    unknown call_tmp[622354] "expr temp" "maybe param" "maybe type" "temp"
    (622357 'move' call_tmp[622354](420356 call _cond_invalid tmp[420343]))
    if call_tmp[622354]
    {
      (420359 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557661] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557662] "maybe param" "temp"
    unknown call_tmp[622359] "expr temp" "maybe param" "maybe type" "temp"
    (622362 'move' call_tmp[622359](420344 call isTrue tmp[420343]))
    (557667 'move' tmp[557662](557665 call _cond_test call_tmp[622359]))
    if tmp[557662]
    {
      unknown tmp[557669] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622366] "expr temp" "maybe param" "maybe type" "temp"
      (622369 'move' call_tmp[622366](71864 call stride _mt[243] this[71466]))
      unknown call_tmp[622373] "expr temp" "maybe param" "maybe type" "temp"
      (622376 'move' call_tmp[622373](71868 call stride _mt[243] other[71461]))
      unknown call_tmp[622378] "expr temp" "maybe param" "maybe type" "temp"
      (622381 'move' call_tmp[622378](71871 call - call_tmp[622373]))
      unknown call_tmp[622383] "expr temp" "maybe param" "maybe type" "temp"
      (622386 'move' call_tmp[622383](71873 call != call_tmp[622366] call_tmp[622378]))
      (557671 'move' tmp[557669](420347 call isTrue call_tmp[622383]))
      (557676 'move' tmp[557661](557673 '_paramFoldLogical' tmp[557662] tmp[557669]))
    }
    {
      (557681 'move' tmp[557661](557678 '_paramFoldLogical' tmp[557662] 0))
    }
    unknown call_tmp[622388] "expr temp" "maybe param" "maybe type" "temp"
    (622391 'move' call_tmp[622388](71955 call _cond_test tmp[557661]))
    if call_tmp[622388]
    {
      unknown call_tmp[622393] "maybe param" "maybe type" "temp"
      (622396 'move' call_tmp[622393](71886 call chpl__extendedEuclid st1[71722] st2[71775]))
      const tmp[71887] "dead at end of block" "const" "insert auto destroy" "temp"
      (541190 'init var' tmp[71887] call_tmp[622393])
      (71894 call _check_tuple_var_decl tmp[71887] 2)
      (475648 'end of statement')
      unknown call_tmp[622398] "maybe param" "maybe type" "temp"
      (622401 'move' call_tmp[622398](71888 call tmp[71887] 0))
      const tg[71877] "dead at end of block" "const" "insert auto destroy"
      (541192 'init var' tg[71877] call_tmp[622398])
      unknown call_tmp[622403] "maybe param" "maybe type" "temp"
      (622406 'move' call_tmp[622403](71891 call tmp[71887] 1))
      const tx[71879] "dead at end of block" "const" "insert auto destroy"
      (541194 'init var' tx[71879] call_tmp[622403])
      (71899 'end of statement')
      unknown tmp[491913] "expr temp" "maybe param" "maybe type" "temp"
      unknown tmp[491954] "maybe param" "temp"
      (491957 'move' tmp[491954](491955 'addr of' g[71823]))
      unknown tmp[491965] "maybe param" "temp"
      (491968 'move' tmp[491965](491966 'addr of' x[71825]))
      unknown call_tmp[622412] "expr temp" "maybe param" "maybe type" "temp"
      (622415 'move' call_tmp[622412](375165 call strType _mt[243] this[71466]))
      unknown call_tmp[622417] "expr temp" "maybe param" "maybe type" "temp"
      (622420 'move' call_tmp[622417](71912 call(71907 call (partial) safeCast _mt[243] tg[71877]) call_tmp[622412]))
      unknown call_tmp[622426] "expr temp" "maybe param" "maybe type" "temp"
      (622429 'move' call_tmp[622426](375169 call strType _mt[243] this[71466]))
      unknown call_tmp[622431] "expr temp" "maybe param" "maybe type" "temp"
      (622434 'move' call_tmp[622431](71919 call(71914 call (partial) safeCast _mt[243] tx[71879]) call_tmp[622426]))
      (491914 'move' tmp[491913](71921 call _build_tuple call_tmp[622417] call_tmp[622431]))
      { scopeless
        unknown call_tmp[622438] "expr temp" "maybe param" "maybe type" "temp"
        (622441 'move' call_tmp[622438](491920 call size _mt[243] tmp[491913]))
        unknown call_tmp[622443] "expr temp" "maybe param" "maybe type" "temp"
        (622446 'move' call_tmp[622443](491923 call != 2 call_tmp[622438]))
        unknown call_tmp[622448] "expr temp" "maybe param" "maybe type" "temp"
        (622451 'move' call_tmp[622448](491946 call _cond_test call_tmp[622443]))
        if call_tmp[622448]
        {
          (491942 call compilerError "tuple size must match the number of grouped variables" 0)
        }
      }
      unknown call_tmp[622453] "expr temp" "maybe param" "maybe type" "temp"
      (622456 'move' call_tmp[622453](491952 call tmp[491913] 0))
      (491959 call = tmp[491954] call_tmp[622453])
      unknown call_tmp[622458] "expr temp" "maybe param" "maybe type" "temp"
      (622461 'move' call_tmp[622458](491963 call tmp[491913] 1))
      (491970 call = tmp[491965] call_tmp[622458])
      (475649 'end of statement' g[71823] x[71825] tg[71877] tx[71879])
      unknown call_tmp[622463] "expr temp" "maybe param" "maybe type" "temp"
      (622466 'move' call_tmp[622463](71929 call / st1[71722] g[71823]))
      unknown call_tmp[622468] "expr temp" "maybe param" "maybe type" "temp"
      (622471 'move' call_tmp[622468](71932 call * call_tmp[622463] st2[71775]))
      (71934 call = lcm[71819] call_tmp[622468])
      (475654 'end of statement' lcm[71819] st1[71722] g[71823] st2[71775])
      unknown tmp[557688] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557689] "maybe param" "temp"
      unknown call_tmp[622475] "expr temp" "maybe param" "maybe type" "temp"
      (622478 'move' call_tmp[622475](71939 call stride _mt[243] this[71466]))
      unknown call_tmp[622480] "expr temp" "maybe param" "maybe type" "temp"
      (622483 'move' call_tmp[622480](71943 call > call_tmp[622475] 0))
      (557694 'move' tmp[557689](557692 call _cond_test call_tmp[622480]))
      if tmp[557689]
      {
        (557699 'move' tmp[557688](557696 '_paramFoldLogical' tmp[557689] lcm[71819]))
      }
      {
        unknown tmp[557701] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557703 'move' tmp[557701](71947 call - lcm[71819]))
        (557708 'move' tmp[557688](557705 '_paramFoldLogical' tmp[557689] tmp[557701]))
      }
      (71952 call = newStride[71807] tmp[557688])
      (475659 'end of statement' newStride[71807] lcm[71819] lcm[71819])
    }
    unknown emptyIntersection[71960] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[541196] "maybe param" "maybe type" "temp"
    (541202 'move' type_tmp[541196] bool[10])
    (541198 'init var split decl' emptyIntersection[71960] type_tmp[541196])
    (71963 'end of statement')
    function min[71970](arg x[71967]:int(64)[13], arg y[71973]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510534] "RVV" "temp"
      unknown call_tmp[622485] "expr temp" "maybe param" "maybe type" "temp"
      (622488 'move' call_tmp[622485](71980 call max int(64)[13]))
      unknown call_tmp[622490] "expr temp" "maybe param" "maybe type" "temp"
      (622493 'move' call_tmp[622490](71981 call > y[71973] call_tmp[622485]))
      unknown call_tmp[622495] "expr temp" "maybe param" "maybe type" "temp"
      (622498 'move' call_tmp[622495](71987 call _cond_test call_tmp[622490]))
      if call_tmp[622495]
      {
        (510539 'move' ret[510534](510538 'deref' x[71967]))
        gotoReturn _end_min[510532] _end_min[510532]
      }
      unknown call_tmp[622500] "expr temp" "maybe param" "maybe type" "temp"
      (622503 'move' call_tmp[622500](71997 call _cast int(64)[13] y[71973]))
      unknown call_tmp[622505] "expr temp" "maybe param" "maybe type" "temp"
      (622508 'move' call_tmp[622505](71999 call min x[71967] call_tmp[622500]))
      (510544 'move' ret[510534](510543 'deref' call_tmp[622505]))
      label _end_min[510532]
      (510536 return ret[510534])
    }
    function min[72010](arg x[72007]:uint(64)[115], arg y[72013]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510548] "RVV" "temp"
      unknown call_tmp[622510] "expr temp" "maybe param" "maybe type" "temp"
      (622513 'move' call_tmp[622510](72018 call < y[72013] 0))
      unknown call_tmp[622515] "expr temp" "maybe param" "maybe type" "temp"
      (622518 'move' call_tmp[622515](72029 call _cond_test call_tmp[622510]))
      if call_tmp[622515]
      {
        (72022 call = emptyIntersection[71960] 1)
        (475665 'end of statement')
        (510553 'move' ret[510548](510552 'deref' x[72007]))
        gotoReturn _end_min[510546] _end_min[510546]
      }
      unknown call_tmp[622520] "expr temp" "maybe param" "maybe type" "temp"
      (622523 'move' call_tmp[622520](72039 call _cast uint(64)[115] y[72013]))
      unknown call_tmp[622525] "expr temp" "maybe param" "maybe type" "temp"
      (622528 'move' call_tmp[622525](72041 call min x[72007] call_tmp[622520]))
      (510558 'move' ret[510548](510557 'deref' call_tmp[622525]))
      label _end_min[510546]
      (510550 return ret[510548])
    }
    function max[72052](arg x[72049]:int(64)[13], arg y[72055]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510562] "RVV" "temp"
      unknown call_tmp[622530] "expr temp" "maybe param" "maybe type" "temp"
      (622533 'move' call_tmp[622530](72062 call max int(64)[13]))
      unknown call_tmp[622535] "expr temp" "maybe param" "maybe type" "temp"
      (622538 'move' call_tmp[622535](72063 call > y[72055] call_tmp[622530]))
      unknown call_tmp[622540] "expr temp" "maybe param" "maybe type" "temp"
      (622543 'move' call_tmp[622540](72074 call _cond_test call_tmp[622535]))
      if call_tmp[622540]
      {
        (72067 call = emptyIntersection[71960] 1)
        (475668 'end of statement')
        (510567 'move' ret[510562](510566 'deref' x[72049]))
        gotoReturn _end_max[510560] _end_max[510560]
      }
      unknown call_tmp[622545] "expr temp" "maybe param" "maybe type" "temp"
      (622548 'move' call_tmp[622545](72084 call _cast int(64)[13] y[72055]))
      unknown call_tmp[622550] "expr temp" "maybe param" "maybe type" "temp"
      (622553 'move' call_tmp[622550](72086 call max x[72049] call_tmp[622545]))
      (510572 'move' ret[510562](510571 'deref' call_tmp[622550]))
      label _end_max[510560]
      (510564 return ret[510562])
    }
    function max[72097](arg x[72094]:uint(64)[115], arg y[72100]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510576] "RVV" "temp"
      unknown call_tmp[622555] "expr temp" "maybe param" "maybe type" "temp"
      (622558 'move' call_tmp[622555](72105 call < y[72100] 0))
      unknown call_tmp[622560] "expr temp" "maybe param" "maybe type" "temp"
      (622563 'move' call_tmp[622560](72111 call _cond_test call_tmp[622555]))
      if call_tmp[622560]
      {
        (510581 'move' ret[510576](510580 'deref' x[72094]))
        gotoReturn _end_max[510574] _end_max[510574]
      }
      unknown call_tmp[622565] "expr temp" "maybe param" "maybe type" "temp"
      (622568 'move' call_tmp[622565](72121 call _cast uint(64)[115] y[72100]))
      unknown call_tmp[622570] "expr temp" "maybe param" "maybe type" "temp"
      (622573 'move' call_tmp[622570](72123 call max x[72094] call_tmp[622565]))
      (510586 'move' ret[510576](510585 'deref' call_tmp[622570]))
      label _end_max[510574]
      (510578 return ret[510576])
    }
    (541204 'init var split init' emptyIntersection[71960] 0 type_tmp[541196])
    (475673 'end of statement' emptyIntersection[71960])
    unknown call_tmp[622577] "expr temp" "maybe param" "maybe type" "temp"
    (622580 'move' call_tmp[622577](375201 call intIdxType _mt[243] this[71466]))
    unknown call_tmp[622582] "expr temp" "maybe param" "maybe type" "temp"
    (622585 'move' call_tmp[622582](72137 call max lo1[71693] lo2[71743]))
    unknown call_tmp[622587] "maybe param" "maybe type" "temp"
    (622590 'move' call_tmp[622587](72139 call _cast call_tmp[622577] call_tmp[622582]))
    unknown newlo[72141] "dead at end of block" "insert auto destroy"
    (541207 'init var' newlo[72141] call_tmp[622587])
    (72144 'end of statement')
    unknown call_tmp[622594] "expr temp" "maybe param" "maybe type" "temp"
    (622597 'move' call_tmp[622594](375207 call intIdxType _mt[243] this[71466]))
    unknown call_tmp[622599] "expr temp" "maybe param" "maybe type" "temp"
    (622602 'move' call_tmp[622599](72149 call min hi1[71711] hi2[71764]))
    unknown call_tmp[622604] "maybe param" "maybe type" "temp"
    (622607 'move' call_tmp[622604](72151 call _cast call_tmp[622594] call_tmp[622599]))
    unknown newhi[72153] "dead at end of block" "insert auto destroy"
    (541209 'init var' newhi[72153] call_tmp[622604])
    (72156 'end of statement')
    unknown call_tmp[622609] "expr temp" "maybe param" "maybe type" "temp"
    (622612 'move' call_tmp[622609](72169 call _cond_test emptyIntersection[71960]))
    if call_tmp[622609]
    {
      (72160 call = newlo[72141] 1)
      (475679 'end of statement' newlo[72141])
      (72166 call = newhi[72153] 0)
      (475681 'end of statement' newhi[72153])
    }
    unknown tmp[420364] "maybe param" "temp"
    (420375 'move' tmp[420364](72206 call ! ambig[71472]))
    unknown call_tmp[622614] "expr temp" "maybe param" "maybe type" "temp"
    (622617 'move' call_tmp[622614](420377 call _cond_invalid tmp[420364]))
    if call_tmp[622614]
    {
      (420380 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown result[72221] "dead at end of block" "insert auto destroy"
    unknown tmp[557742] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557743] "maybe param" "temp"
    unknown call_tmp[622619] "expr temp" "maybe param" "maybe type" "temp"
    (622622 'move' call_tmp[622619](420365 call isTrue tmp[420364]))
    (557748 'move' tmp[557743](557746 call _cond_test call_tmp[622619]))
    if tmp[557743]
    {
      unknown tmp[420385] "maybe param" "temp"
      (420396 'move' tmp[420385](72209 call aligned _mt[243] this[71466]))
      unknown call_tmp[622626] "expr temp" "maybe param" "maybe type" "temp"
      (622629 'move' call_tmp[622626](420398 call _cond_invalid tmp[420385]))
      if call_tmp[622626]
      {
        (420401 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[557715] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557716] "maybe param" "temp"
      unknown call_tmp[622631] "expr temp" "maybe param" "maybe type" "temp"
      (622634 'move' call_tmp[622631](420386 call isTrue tmp[420385]))
      (557721 'move' tmp[557716](557719 call _cond_test call_tmp[622631]))
      if tmp[557716]
      {
        (557726 'move' tmp[557715](557723 '_paramFoldLogical' tmp[557716] 1))
      }
      {
        unknown tmp[557728] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622638] "expr temp" "maybe param" "maybe type" "temp"
        (622641 'move' call_tmp[622638](72213 call aligned _mt[243] other[71461]))
        (557730 'move' tmp[557728](420390 call isTrue call_tmp[622638]))
        (557735 'move' tmp[557715](557732 '_paramFoldLogical' tmp[557716] tmp[557728]))
      }
      unknown tmp[557750] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557752 'move' tmp[557750](420368 call isTrue tmp[557715]))
      (557757 'move' tmp[557742](557754 '_paramFoldLogical' tmp[557743] tmp[557750]))
    }
    {
      (557762 'move' tmp[557742](557759 '_paramFoldLogical' tmp[557743] 0))
    }
    unknown call_tmp[622645] "expr temp" "maybe param" "maybe type" "temp"
    (622648 'move' call_tmp[622645](375216 call idxType _mt[243] this[71466]))
    unknown call_tmp[622650] "expr temp" "maybe param" "maybe type" "temp"
    (622653 'move' call_tmp[622650](72181 call computeBoundedType this[71466] other[71461]))
    unknown call_tmp[622657] "expr temp" "maybe param" "maybe type" "temp"
    (622660 'move' call_tmp[622657](72183 call stridable _mt[243] this[71466]))
    unknown call_tmp[622664] "expr temp" "maybe param" "maybe type" "temp"
    (622667 'move' call_tmp[622664](72187 call stridable _mt[243] other[71461]))
    unknown call_tmp[622669] "expr temp" "maybe param" "maybe type" "temp"
    (622672 'move' call_tmp[622669](72190 call | call_tmp[622657] call_tmp[622664]))
    unknown call_tmp[622676] "expr temp" "maybe param" "maybe type" "temp"
    (622679 'move' call_tmp[622676](72195 call(375222 call (partial) chpl_intToIdx _mt[243] this[71466]) newlo[72141]))
    unknown call_tmp[622683] "expr temp" "maybe param" "maybe type" "temp"
    (622686 'move' call_tmp[622683](72199 call(375227 call (partial) chpl_intToIdx _mt[243] this[71466]) newhi[72153]))
    unknown call_tmp[622690] "expr temp" "maybe param" "maybe type" "temp"
    (622693 'move' call_tmp[622690](72204 call(375233 call (partial) chpl_intToIdx _mt[243] this[71466]) 0))
    unknown call_tmp[622695] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (622698 'move' call_tmp[622695](747829 'new' range[64316](?) call_tmp[622645] call_tmp[622650] call_tmp[622669] call_tmp[622676] call_tmp[622683] newStride[71807] call_tmp[622690] tmp[557742]))
    (541211 'init var' result[72221] call_tmp[622695])
    (72224 'end of statement' lo1[71693] lo2[71743] hi1[71711] hi2[71764] newlo[72141] newhi[72153] newStride[71807])
    unknown call_tmp[622702] "expr temp" "maybe param" "maybe type" "temp"
    (622705 'move' call_tmp[622702](72226 call stridable _mt[243] result[72221]))
    unknown call_tmp[622707] "expr temp" "maybe param" "maybe type" "temp"
    (622710 'move' call_tmp[622707](72430 call _cond_test call_tmp[622702]))
    if call_tmp[622707]
    {
      unknown call_tmp[622714] "expr temp" "maybe param" "maybe type" "temp"
      (622717 'move' call_tmp[622714](72231 call alignment _mt[243] this[71466]))
      unknown call_tmp[622719] "expr temp" "maybe param" "maybe type" "temp"
      (622722 'move' call_tmp[622719](72235 call chpl__idxToInt call_tmp[622714]))
      unknown call_tmp[622726] "expr temp" "maybe param" "maybe type" "temp"
      (622729 'move' call_tmp[622726](375239 call intIdxType _mt[243] this[71466]))
      unknown call_tmp[622731] "expr temp" "maybe param" "maybe type" "temp"
      (622734 'move' call_tmp[622731](72238 call _cast call_tmp[622726] st1[71722]))
      unknown call_tmp[622736] "expr temp" "maybe param" "maybe type" "temp"
      (622739 'move' call_tmp[622736](72240 call % call_tmp[622719] call_tmp[622731]))
      unknown call_tmp[622741] "maybe param" "maybe type" "temp"
      (622744 'move' call_tmp[622741](72243 call _cast int(64)[13] call_tmp[622736]))
      unknown al1[72245] "dead at end of block" "insert auto destroy"
      (541213 'init var' al1[72245] call_tmp[622741])
      (72248 'end of statement')
      unknown call_tmp[622748] "expr temp" "maybe param" "maybe type" "temp"
      (622751 'move' call_tmp[622748](72252 call alignment _mt[243] other[71461]))
      unknown call_tmp[622753] "expr temp" "maybe param" "maybe type" "temp"
      (622756 'move' call_tmp[622753](72256 call chpl__idxToInt call_tmp[622748]))
      unknown call_tmp[622760] "expr temp" "maybe param" "maybe type" "temp"
      (622763 'move' call_tmp[622760](72259 call intIdxType _mt[243] other[71461]))
      unknown call_tmp[622765] "expr temp" "maybe param" "maybe type" "temp"
      (622768 'move' call_tmp[622765](72262 call _cast call_tmp[622760] st2[71775]))
      unknown call_tmp[622770] "expr temp" "maybe param" "maybe type" "temp"
      (622773 'move' call_tmp[622770](72264 call % call_tmp[622753] call_tmp[622765]))
      unknown call_tmp[622775] "maybe param" "maybe type" "temp"
      (622778 'move' call_tmp[622775](72267 call _cast int(64)[13] call_tmp[622770]))
      unknown al2[72269] "dead at end of block" "insert auto destroy"
      (541215 'init var' al2[72269] call_tmp[622775])
      (72272 'end of statement' st1[71722] st2[71775])
      unknown call_tmp[622780] "expr temp" "maybe param" "maybe type" "temp"
      (622783 'move' call_tmp[622780](72275 call - al2[72269] al1[72245]))
      unknown call_tmp[622785] "expr temp" "maybe param" "maybe type" "temp"
      (622788 'move' call_tmp[622785](72278 call % call_tmp[622780] g[71823]))
      unknown call_tmp[622790] "expr temp" "maybe param" "maybe type" "temp"
      (622793 'move' call_tmp[622790](72281 call != call_tmp[622785] 0))
      unknown call_tmp[622795] "expr temp" "maybe param" "maybe type" "temp"
      (622798 'move' call_tmp[622795](72426 call _cond_test call_tmp[622790]))
      if call_tmp[622795]
      {
        unknown tmp[420406] "maybe param" "temp"
        (420417 'move' tmp[420406] 1)
        unknown call_tmp[622800] "expr temp" "maybe param" "maybe type" "temp"
        (622803 'move' call_tmp[622800](420419 call _cond_invalid tmp[420406]))
        if call_tmp[622800]
        {
          (420422 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557769] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557770] "maybe param" "temp"
        unknown call_tmp[622805] "expr temp" "maybe param" "maybe type" "temp"
        (622808 'move' call_tmp[622805](420407 call isTrue tmp[420406]))
        (557775 'move' tmp[557770](557773 call _cond_test call_tmp[622805]))
        if tmp[557770]
        {
          unknown tmp[557777] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622810] "expr temp" "maybe param" "maybe type" "temp"
          (622813 'move' call_tmp[622810](72287 call isBoundedRange result[72221]))
          unknown call_tmp[622815] "expr temp" "maybe param" "maybe type" "temp"
          (622818 'move' call_tmp[622815](72288 call ! call_tmp[622810]))
          (557779 'move' tmp[557777](420410 call isTrue call_tmp[622815]))
          (557784 'move' tmp[557769](557781 '_paramFoldLogical' tmp[557770] tmp[557777]))
        }
        {
          (557789 'move' tmp[557769](557786 '_paramFoldLogical' tmp[557770] 0))
        }
        unknown call_tmp[622820] "expr temp" "maybe param" "maybe type" "temp"
        (622823 'move' call_tmp[622820](72318 call _cond_test tmp[557769]))
        if call_tmp[622820]
        {
          (72316 call boundsCheckHalt module=[255] HaltWrappers[209915] "could not represent range slice - it needs to be empty, but the slice type is not bounded")
          (357928 'referenced modules list' HaltWrappers[209915])
        }
        unknown call_tmp[622827] "expr temp" "maybe param" "maybe type" "temp"
        (622830 'move' call_tmp[622827](72325 call _low _mt[243] result[72221]))
        unknown call_tmp[622834] "expr temp" "maybe param" "maybe type" "temp"
        (622837 'move' call_tmp[622834](375249 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622839] "expr temp" "maybe param" "maybe type" "temp"
        (622842 'move' call_tmp[622839](72330 call _cast call_tmp[622834] 1))
        (72332 call = call_tmp[622827] call_tmp[622839])
        (475691 'end of statement' result[72221])
        unknown call_tmp[622846] "expr temp" "maybe param" "maybe type" "temp"
        (622849 'move' call_tmp[622846](72336 call _high _mt[243] result[72221]))
        unknown call_tmp[622853] "expr temp" "maybe param" "maybe type" "temp"
        (622856 'move' call_tmp[622853](375253 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622858] "expr temp" "maybe param" "maybe type" "temp"
        (622861 'move' call_tmp[622858](72341 call _cast call_tmp[622853] 0))
        (72343 call = call_tmp[622846] call_tmp[622858])
        (475693 'end of statement' result[72221])
        unknown tmp[557796] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557797] "maybe param" "temp"
        unknown call_tmp[622865] "expr temp" "maybe param" "maybe type" "temp"
        (622868 'move' call_tmp[622865](72351 call stride _mt[243] this[71466]))
        unknown call_tmp[622870] "expr temp" "maybe param" "maybe type" "temp"
        (622873 'move' call_tmp[622870](72355 call > call_tmp[622865] 0))
        (557802 'move' tmp[557797](557800 call _cond_test call_tmp[622870]))
        if tmp[557797]
        {
          unknown tmp[557804] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622877] "expr temp" "maybe param" "maybe type" "temp"
          (622880 'move' call_tmp[622877](375257 call intIdxType _mt[243] this[71466]))
          (557806 'move' tmp[557804](72359 call _cast call_tmp[622877] 1))
          (557811 'move' tmp[557796](557808 '_paramFoldLogical' tmp[557797] tmp[557804]))
        }
        {
          unknown tmp[557813] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622884] "expr temp" "maybe param" "maybe type" "temp"
          (622887 'move' call_tmp[622884](375261 call intIdxType _mt[243] this[71466]))
          (557815 'move' tmp[557813](72363 call _cast call_tmp[622884] 0))
          (557820 'move' tmp[557796](557817 '_paramFoldLogical' tmp[557797] tmp[557813]))
        }
        unknown call_tmp[622891] "expr temp" "maybe param" "maybe type" "temp"
        (622894 'move' call_tmp[622891](72347 call _alignment _mt[243] result[72221]))
        (72368 call = call_tmp[622891] tmp[557796])
        (475695 'end of statement' result[72221])
      }
      {
        unknown call_tmp[622896] "expr temp" "maybe param" "maybe type" "temp"
        (622899 'move' call_tmp[622896](72373 call - al2[72269] al1[72245]))
        unknown call_tmp[622901] "maybe param" "maybe type" "temp"
        (622904 'move' call_tmp[622901](72376 call * call_tmp[622896] x[71825]))
        unknown offset[72378] "dead at end of block" "insert auto destroy"
        (541217 'init var' offset[72378] call_tmp[622901])
        (72381 'end of statement' al2[72269] al1[72245] x[71825])
        unknown call_tmp[622906] "expr temp" "maybe param" "maybe type" "temp"
        (622909 'move' call_tmp[622906](72385 call < offset[72378] 0))
        unknown call_tmp[622911] "expr temp" "maybe param" "maybe type" "temp"
        (622914 'move' call_tmp[622911](72392 call _cond_test call_tmp[622906]))
        if call_tmp[622911]
        {
          (72389 call += offset[72378] lcm[71819])
          (475700 'end of statement' offset[72378] lcm[71819])
        }
        unknown call_tmp[622918] "expr temp" "maybe param" "maybe type" "temp"
        (622921 'move' call_tmp[622918](72398 call _alignment _mt[243] result[72221]))
        unknown call_tmp[622925] "expr temp" "maybe param" "maybe type" "temp"
        (622928 'move' call_tmp[622925](375272 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622930] "expr temp" "maybe param" "maybe type" "temp"
        (622933 'move' call_tmp[622930](72403 call _cast call_tmp[622925] al1[72245]))
        unknown call_tmp[622937] "expr temp" "maybe param" "maybe type" "temp"
        (622940 'move' call_tmp[622937](375277 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622942] "expr temp" "maybe param" "maybe type" "temp"
        (622945 'move' call_tmp[622942](72407 call _cast call_tmp[622937] offset[72378]))
        unknown call_tmp[622949] "expr temp" "maybe param" "maybe type" "temp"
        (622952 'move' call_tmp[622949](375282 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622954] "expr temp" "maybe param" "maybe type" "temp"
        (622957 'move' call_tmp[622954](72411 call _cast call_tmp[622949] st1[71722]))
        unknown call_tmp[622959] "expr temp" "maybe param" "maybe type" "temp"
        (622962 'move' call_tmp[622959](72413 call * call_tmp[622942] call_tmp[622954]))
        unknown call_tmp[622966] "expr temp" "maybe param" "maybe type" "temp"
        (622969 'move' call_tmp[622966](375287 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622971] "expr temp" "maybe param" "maybe type" "temp"
        (622974 'move' call_tmp[622971](72417 call _cast call_tmp[622966] g[71823]))
        unknown call_tmp[622976] "expr temp" "maybe param" "maybe type" "temp"
        (622979 'move' call_tmp[622976](72419 call / call_tmp[622959] call_tmp[622971]))
        unknown call_tmp[622981] "expr temp" "maybe param" "maybe type" "temp"
        (622984 'move' call_tmp[622981](72421 call + call_tmp[622930] call_tmp[622976]))
        (72423 call = call_tmp[622918] call_tmp[622981])
        (475703 'end of statement' result[72221] al1[72245] offset[72378] st1[71722] g[71823])
      }
    }
    (510595 'move' ret[510590](510594 'deref' result[72221]))
    gotoReturn _end_this[510588] _end_this[510588]
    (475709 'end of statement' result[72221])
    label _end_this[510588]
    (510592 return ret[510590])
  }
  function chpl_count_help[72448](arg r[72445]:range[64316](?), arg i[72450]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (72483 call compilerError "count operator is not defined for unbounded ranges")
    (510599 return _void[55])
  }
  where {
    unknown call_tmp[622988] "expr temp" "maybe param" "maybe type" "temp"
    (622991 'move' call_tmp[622988](72453 call boundedType _mt[243] r[72445]))
    (72460 call == call_tmp[622988] boundedNone[64211])
  }
  function chpl_count_help[72493](arg r[72491]:_any[178](?), arg count[72496]:integral[199](?)) : _unknown[51]
  {
    unknown ret[510640] "RVV" "temp"
    unknown tmp[420427] "maybe param" "temp"
    (420438 'move' tmp[420427] 1)
    unknown call_tmp[622993] "expr temp" "maybe param" "maybe type" "temp"
    (622996 'move' call_tmp[622993](420440 call _cond_invalid tmp[420427]))
    if call_tmp[622993]
    {
      (420443 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557827] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557828] "maybe param" "temp"
    unknown call_tmp[622998] "expr temp" "maybe param" "maybe type" "temp"
    (623001 'move' call_tmp[622998](420428 call isTrue tmp[420427]))
    (557833 'move' tmp[557828](557831 call _cond_test call_tmp[622998]))
    if tmp[557828]
    {
      unknown tmp[557835] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623005] "expr temp" "maybe param" "maybe type" "temp"
      (623008 'move' call_tmp[623005](72505 call(72501 call (partial) isAmbiguous _mt[243] r[72491])))
      (557837 'move' tmp[557835](420431 call isTrue call_tmp[623005]))
      (557842 'move' tmp[557827](557839 '_paramFoldLogical' tmp[557828] tmp[557835]))
    }
    {
      (557847 'move' tmp[557827](557844 '_paramFoldLogical' tmp[557828] 0))
    }
    unknown call_tmp[623010] "expr temp" "maybe param" "maybe type" "temp"
    (623013 'move' call_tmp[623010](72531 call _cond_test tmp[557827]))
    if call_tmp[623010]
    {
      (72529 call boundsCheckHalt "count -- Cannot count off elements from a range which is ambiguously aligned.")
    }
    unknown resultType[72541] "dead at end of block" "insert auto destroy" "type variable"(72538 call intIdxType _mt[243] r[72491])
    (541223 'move' resultType[72541](541220 call intIdxType _mt[243] r[72491]))
    unknown strType[72548] "dead at end of block" "insert auto destroy" "type variable"(72547 call chpl__rangeStrideType resultType[72541])
    (541228 'move' strType[72548](541226 call chpl__rangeStrideType resultType[72541]))
    function absSameType[72555](arg str[72553]:_any[178](?)) : _unknown[51]
    {
      unknown ret[510603] "RVV" "temp"
      unknown call_tmp[623021] "expr temp" "maybe param" "maybe type" "temp"
      (623024 'move' call_tmp[623021](72558 call stride _mt[243] r[72491]))
      unknown call_tmp[623026] "expr temp" "maybe param" "maybe type" "temp"
      (623029 'move' call_tmp[623026](72562 call < call_tmp[623021] 0))
      unknown call_tmp[623031] "expr temp" "maybe param" "maybe type" "temp"
      (623034 'move' call_tmp[623031](72586 call _cond_test call_tmp[623026]))
      if call_tmp[623031]
      {
        unknown call_tmp[623038] "expr temp" "maybe param" "maybe type" "temp"
        (623041 'move' call_tmp[623038](72565 call stride _mt[243] r[72491]))
        unknown call_tmp[623043] "expr temp" "maybe param" "maybe type" "temp"
        (623046 'move' call_tmp[623043](72568 call - call_tmp[623038]))
        unknown call_tmp[623048] "expr temp" "maybe param" "maybe type" "temp"
        (623051 'move' call_tmp[623048](72571 call _cast resultType[72541] call_tmp[623043]))
        (510608 'move' ret[510603](510607 'deref' call_tmp[623048]))
        gotoReturn _end_absSameType[510601] _end_absSameType[510601]
      }
      {
        unknown call_tmp[623055] "expr temp" "maybe param" "maybe type" "temp"
        (623058 'move' call_tmp[623055](72577 call stride _mt[243] r[72491]))
        unknown call_tmp[623060] "expr temp" "maybe param" "maybe type" "temp"
        (623063 'move' call_tmp[623060](72581 call _cast resultType[72541] call_tmp[623055]))
        (510613 'move' ret[510603](510612 'deref' call_tmp[623060]))
        gotoReturn _end_absSameType[510601] _end_absSameType[510601]
      }
      label _end_absSameType[510601]
      (510605 return ret[510603])
    }
    unknown call_tmp[623065] "expr temp" "maybe param" "maybe type" "temp"
    (623068 'move' call_tmp[623065](72595 call == count[72496] 0))
    unknown call_tmp[623070] "expr temp" "maybe param" "maybe type" "temp"
    (623073 'move' call_tmp[623070](72795 call _cond_test call_tmp[623065]))
    if call_tmp[623070]
    {
      unknown call_tmp[623077] "expr temp" "maybe param" "maybe type" "temp"
      (623080 'move' call_tmp[623077](72602 call(72598 call (partial) hasLowBound _mt[243] r[72491])))
      unknown call_tmp[623082] "expr temp" "maybe param" "maybe type" "temp"
      (623085 'move' call_tmp[623082](72789 call _cond_test call_tmp[623077]))
      if call_tmp[623082]
      {
        unknown call_tmp[623089] "expr temp" "maybe param" "maybe type" "temp"
        (623092 'move' call_tmp[623089](72606 call idxType _mt[243] r[72491]))
        unknown call_tmp[623096] "expr temp" "maybe param" "maybe type" "temp"
        (623099 'move' call_tmp[623096](72617 call stridable _mt[243] r[72491]))
        unknown call_tmp[623103] "expr temp" "maybe param" "maybe type" "temp"
        (623106 'move' call_tmp[623103](72623 call idxType _mt[243] r[72491]))
        unknown call_tmp[623110] "expr temp" "maybe param" "maybe type" "temp"
        (623113 'move' call_tmp[623110](72628 call _low _mt[243] r[72491]))
        unknown call_tmp[623115] "expr temp" "maybe param" "maybe type" "temp"
        (623118 'move' call_tmp[623115](72631 call chpl__intToIdx call_tmp[623103] call_tmp[623110]))
        unknown call_tmp[623122] "expr temp" "maybe param" "maybe type" "temp"
        (623125 'move' call_tmp[623122](72635 call idxType _mt[243] r[72491]))
        unknown call_tmp[623129] "expr temp" "maybe param" "maybe type" "temp"
        (623132 'move' call_tmp[623129](72640 call _low _mt[243] r[72491]))
        unknown call_tmp[623136] "expr temp" "maybe param" "maybe type" "temp"
        (623139 'move' call_tmp[623136](72645 call stride _mt[243] r[72491]))
        unknown call_tmp[623141] "expr temp" "maybe param" "maybe type" "temp"
        (623144 'move' call_tmp[623141](72649 call absSameType call_tmp[623136]))
        unknown call_tmp[623146] "expr temp" "maybe param" "maybe type" "temp"
        (623149 'move' call_tmp[623146](72650 call - call_tmp[623129] call_tmp[623141]))
        unknown call_tmp[623151] "expr temp" "maybe param" "maybe type" "temp"
        (623154 'move' call_tmp[623151](72652 call chpl__intToIdx call_tmp[623122] call_tmp[623146]))
        unknown call_tmp[623158] "expr temp" "maybe param" "maybe type" "temp"
        (623161 'move' call_tmp[623158](72655 call stride _mt[243] r[72491]))
        unknown call_tmp[623165] "expr temp" "maybe param" "maybe type" "temp"
        (623168 'move' call_tmp[623165](72661 call idxType _mt[243] r[72491]))
        unknown call_tmp[623172] "expr temp" "maybe param" "maybe type" "temp"
        (623175 'move' call_tmp[623172](72666 call _alignment _mt[243] r[72491]))
        unknown call_tmp[623177] "expr temp" "maybe param" "maybe type" "temp"
        (623180 'move' call_tmp[623177](72669 call chpl__intToIdx call_tmp[623165] call_tmp[623172]))
        unknown call_tmp[623184] "expr temp" "maybe param" "maybe type" "temp"
        (623187 'move' call_tmp[623184](72672 call aligned _mt[243] r[72491]))
        unknown call_tmp[623189] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (623192 'move' call_tmp[623189](747830 'new' range[64316](?)(idxType = call_tmp[623089])(boundedType = bounded[64205])(stridable = call_tmp[623096])(_low = call_tmp[623115])(_high = call_tmp[623151])(_stride = call_tmp[623158])(_alignment = call_tmp[623177])(_aligned = call_tmp[623184])))
        (510645 'move' ret[510640](510644 'deref' call_tmp[623189]))
        gotoReturn _end_chpl_count_help[510638] _end_chpl_count_help[510638]
      }
      {
        unknown call_tmp[623196] "expr temp" "maybe param" "maybe type" "temp"
        (623199 'move' call_tmp[623196](72685 call(72681 call (partial) hasHighBound _mt[243] r[72491])))
        unknown call_tmp[623201] "expr temp" "maybe param" "maybe type" "temp"
        (623204 'move' call_tmp[623201](72785 call _cond_test call_tmp[623196]))
        if call_tmp[623201]
        {
          unknown call_tmp[623208] "expr temp" "maybe param" "maybe type" "temp"
          (623211 'move' call_tmp[623208](72689 call idxType _mt[243] r[72491]))
          unknown call_tmp[623215] "expr temp" "maybe param" "maybe type" "temp"
          (623218 'move' call_tmp[623215](72700 call stridable _mt[243] r[72491]))
          unknown call_tmp[623222] "expr temp" "maybe param" "maybe type" "temp"
          (623225 'move' call_tmp[623222](72706 call idxType _mt[243] r[72491]))
          unknown call_tmp[623229] "expr temp" "maybe param" "maybe type" "temp"
          (623232 'move' call_tmp[623229](72711 call _high _mt[243] r[72491]))
          unknown call_tmp[623236] "expr temp" "maybe param" "maybe type" "temp"
          (623239 'move' call_tmp[623236](72716 call stride _mt[243] r[72491]))
          unknown call_tmp[623241] "expr temp" "maybe param" "maybe type" "temp"
          (623244 'move' call_tmp[623241](72720 call absSameType call_tmp[623236]))
          unknown call_tmp[623246] "expr temp" "maybe param" "maybe type" "temp"
          (623249 'move' call_tmp[623246](72721 call + call_tmp[623229] call_tmp[623241]))
          unknown call_tmp[623251] "expr temp" "maybe param" "maybe type" "temp"
          (623254 'move' call_tmp[623251](72723 call chpl__intToIdx call_tmp[623222] call_tmp[623246]))
          unknown call_tmp[623258] "expr temp" "maybe param" "maybe type" "temp"
          (623261 'move' call_tmp[623258](72727 call idxType _mt[243] r[72491]))
          unknown call_tmp[623265] "expr temp" "maybe param" "maybe type" "temp"
          (623268 'move' call_tmp[623265](72732 call _high _mt[243] r[72491]))
          unknown call_tmp[623270] "expr temp" "maybe param" "maybe type" "temp"
          (623273 'move' call_tmp[623270](72735 call chpl__intToIdx call_tmp[623258] call_tmp[623265]))
          unknown call_tmp[623277] "expr temp" "maybe param" "maybe type" "temp"
          (623280 'move' call_tmp[623277](72738 call stride _mt[243] r[72491]))
          unknown call_tmp[623284] "expr temp" "maybe param" "maybe type" "temp"
          (623287 'move' call_tmp[623284](72744 call idxType _mt[243] r[72491]))
          unknown call_tmp[623291] "expr temp" "maybe param" "maybe type" "temp"
          (623294 'move' call_tmp[623291](72749 call _alignment _mt[243] r[72491]))
          unknown call_tmp[623296] "expr temp" "maybe param" "maybe type" "temp"
          (623299 'move' call_tmp[623296](72752 call chpl__intToIdx call_tmp[623284] call_tmp[623291]))
          unknown call_tmp[623303] "expr temp" "maybe param" "maybe type" "temp"
          (623306 'move' call_tmp[623303](72755 call aligned _mt[243] r[72491]))
          unknown call_tmp[623308] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (623311 'move' call_tmp[623308](747831 'new' range[64316](?)(idxType = call_tmp[623208])(boundedType = bounded[64205])(stridable = call_tmp[623215])(_low = call_tmp[623251])(_high = call_tmp[623270])(_stride = call_tmp[623277])(_alignment = call_tmp[623296])(_aligned = call_tmp[623303])))
          (510650 'move' ret[510640](510649 'deref' call_tmp[623308]))
          gotoReturn _end_chpl_count_help[510638] _end_chpl_count_help[510638]
        }
        {
          (72782 call halt "Internal error: Unexpected case in chpl_count_help")
        }
      }
    }
    unknown tmp[420448] "maybe param" "temp"
    unknown tmp[420469] "maybe param" "temp"
    (420480 'move' tmp[420469] 1)
    unknown call_tmp[623313] "expr temp" "maybe param" "maybe type" "temp"
    (623316 'move' call_tmp[623313](420482 call _cond_invalid tmp[420469]))
    if call_tmp[623313]
    {
      (420485 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557854] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557855] "maybe param" "temp"
    unknown call_tmp[623318] "expr temp" "maybe param" "maybe type" "temp"
    (623321 'move' call_tmp[623318](420470 call isTrue tmp[420469]))
    (557860 'move' tmp[557855](557858 call _cond_test call_tmp[623318]))
    if tmp[557855]
    {
      unknown tmp[557862] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623325] "expr temp" "maybe param" "maybe type" "temp"
      (623328 'move' call_tmp[623325](72805 call(72801 call (partial) hasFirst _mt[243] r[72491])))
      unknown call_tmp[623330] "expr temp" "maybe param" "maybe type" "temp"
      (623333 'move' call_tmp[623330](72806 call ! call_tmp[623325]))
      (557864 'move' tmp[557862](420473 call isTrue call_tmp[623330]))
      (557869 'move' tmp[557854](557866 '_paramFoldLogical' tmp[557855] tmp[557862]))
    }
    {
      (557874 'move' tmp[557854](557871 '_paramFoldLogical' tmp[557855] 0))
    }
    (420459 'move' tmp[420448] tmp[557854])
    unknown call_tmp[623335] "expr temp" "maybe param" "maybe type" "temp"
    (623338 'move' call_tmp[623335](420461 call _cond_invalid tmp[420448]))
    if call_tmp[623335]
    {
      (420464 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557881] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557882] "maybe param" "temp"
    unknown call_tmp[623340] "expr temp" "maybe param" "maybe type" "temp"
    (623343 'move' call_tmp[623340](420449 call isTrue tmp[420448]))
    (557887 'move' tmp[557882](557885 call _cond_test call_tmp[623340]))
    if tmp[557882]
    {
      unknown tmp[557889] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623345] "expr temp" "maybe param" "maybe type" "temp"
      (623348 'move' call_tmp[623345](72812 call > count[72496] 0))
      (557891 'move' tmp[557889](420452 call isTrue call_tmp[623345]))
      (557896 'move' tmp[557881](557893 '_paramFoldLogical' tmp[557882] tmp[557889]))
    }
    {
      (557901 'move' tmp[557881](557898 '_paramFoldLogical' tmp[557882] 0))
    }
    unknown call_tmp[623350] "expr temp" "maybe param" "maybe type" "temp"
    (623353 'move' call_tmp[623350](72837 call _cond_test tmp[557881]))
    if call_tmp[623350]
    {
      (72835 call boundsCheckHalt "With a positive count, the range must have a first index.")
    }
    unknown tmp[420490] "maybe param" "temp"
    unknown tmp[420511] "maybe param" "temp"
    (420522 'move' tmp[420511] 1)
    unknown call_tmp[623355] "expr temp" "maybe param" "maybe type" "temp"
    (623358 'move' call_tmp[623355](420524 call _cond_invalid tmp[420511]))
    if call_tmp[623355]
    {
      (420527 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557908] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557909] "maybe param" "temp"
    unknown call_tmp[623360] "expr temp" "maybe param" "maybe type" "temp"
    (623363 'move' call_tmp[623360](420512 call isTrue tmp[420511]))
    (557914 'move' tmp[557909](557912 call _cond_test call_tmp[623360]))
    if tmp[557909]
    {
      unknown tmp[557916] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623367] "expr temp" "maybe param" "maybe type" "temp"
      (623370 'move' call_tmp[623367](72850 call(72846 call (partial) hasLast _mt[243] r[72491])))
      unknown call_tmp[623372] "expr temp" "maybe param" "maybe type" "temp"
      (623375 'move' call_tmp[623372](72851 call ! call_tmp[623367]))
      (557918 'move' tmp[557916](420515 call isTrue call_tmp[623372]))
      (557923 'move' tmp[557908](557920 '_paramFoldLogical' tmp[557909] tmp[557916]))
    }
    {
      (557928 'move' tmp[557908](557925 '_paramFoldLogical' tmp[557909] 0))
    }
    (420501 'move' tmp[420490] tmp[557908])
    unknown call_tmp[623377] "expr temp" "maybe param" "maybe type" "temp"
    (623380 'move' call_tmp[623377](420503 call _cond_invalid tmp[420490]))
    if call_tmp[623377]
    {
      (420506 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557935] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557936] "maybe param" "temp"
    unknown call_tmp[623382] "expr temp" "maybe param" "maybe type" "temp"
    (623385 'move' call_tmp[623382](420491 call isTrue tmp[420490]))
    (557941 'move' tmp[557936](557939 call _cond_test call_tmp[623382]))
    if tmp[557936]
    {
      unknown tmp[557943] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623387] "expr temp" "maybe param" "maybe type" "temp"
      (623390 'move' call_tmp[623387](72857 call < count[72496] 0))
      (557945 'move' tmp[557943](420494 call isTrue call_tmp[623387]))
      (557950 'move' tmp[557935](557947 '_paramFoldLogical' tmp[557936] tmp[557943]))
    }
    {
      (557955 'move' tmp[557935](557952 '_paramFoldLogical' tmp[557936] 0))
    }
    unknown call_tmp[623392] "expr temp" "maybe param" "maybe type" "temp"
    (623395 'move' call_tmp[623392](72882 call _cond_test tmp[557935]))
    if call_tmp[623392]
    {
      (72880 call boundsCheckHalt "With a negative count, the range must have a last index.")
    }
    unknown tmp[420532] "maybe param" "temp"
    unknown tmp[420553] "maybe param" "temp"
    (420564 'move' tmp[420553] 1)
    unknown call_tmp[623397] "expr temp" "maybe param" "maybe type" "temp"
    (623400 'move' call_tmp[623397](420566 call _cond_invalid tmp[420553]))
    if call_tmp[623397]
    {
      (420569 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557962] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557963] "maybe param" "temp"
    unknown call_tmp[623402] "expr temp" "maybe param" "maybe type" "temp"
    (623405 'move' call_tmp[623402](420554 call isTrue tmp[420553]))
    (557968 'move' tmp[557963](557966 call _cond_test call_tmp[623402]))
    if tmp[557963]
    {
      unknown tmp[557970] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623409] "expr temp" "maybe param" "maybe type" "temp"
      (623412 'move' call_tmp[623409](72889 call boundedType _mt[243] r[72491]))
      unknown call_tmp[623414] "expr temp" "maybe param" "maybe type" "temp"
      (623417 'move' call_tmp[623414](72896 call == call_tmp[623409] bounded[64205]))
      (557972 'move' tmp[557970](420557 call isTrue call_tmp[623414]))
      (557977 'move' tmp[557962](557974 '_paramFoldLogical' tmp[557963] tmp[557970]))
    }
    {
      (557982 'move' tmp[557962](557979 '_paramFoldLogical' tmp[557963] 0))
    }
    (420543 'move' tmp[420532] tmp[557962])
    unknown call_tmp[623419] "expr temp" "maybe param" "maybe type" "temp"
    (623422 'move' call_tmp[623419](420545 call _cond_invalid tmp[420532]))
    if call_tmp[623419]
    {
      (420548 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557989] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557990] "maybe param" "temp"
    unknown call_tmp[623424] "expr temp" "maybe param" "maybe type" "temp"
    (623427 'move' call_tmp[623424](420533 call isTrue tmp[420532]))
    (557995 'move' tmp[557990](557993 call _cond_test call_tmp[623424]))
    if tmp[557990]
    {
      unknown tmp[557997] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623429] "expr temp" "maybe param" "maybe type" "temp"
      (623432 'move' call_tmp[623429](72914 call uint(64)[115] 64))
      unknown call_tmp[623434] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (623437 'move' call_tmp[623434](72904 'typeof' count[72496]))
      unknown call_tmp[623439] "expr temp" "maybe param" "maybe type" "temp"
      (623442 'move' call_tmp[623439](72906 call chpl__maxIntTypeSameSign call_tmp[623434]))
      unknown call_tmp[623444] "expr temp" "maybe param" "maybe type" "temp"
      (623447 'move' call_tmp[623444](72907 call _cast call_tmp[623439] count[72496]))
      unknown call_tmp[623449] "expr temp" "maybe param" "maybe type" "temp"
      (623452 'move' call_tmp[623449](72910 call abs call_tmp[623444]))
      unknown call_tmp[623454] "expr temp" "maybe param" "maybe type" "temp"
      (623457 'move' call_tmp[623454](72915 call _cast call_tmp[623429] call_tmp[623449]))
      unknown call_tmp[623459] "expr temp" "maybe param" "maybe type" "temp"
      (623462 'move' call_tmp[623459](72924 call uint(64)[115] 64))
      unknown call_tmp[623466] "expr temp" "maybe param" "maybe type" "temp"
      (623469 'move' call_tmp[623466](72918 call size _mt[243] r[72491]))
      unknown call_tmp[623471] "expr temp" "maybe param" "maybe type" "temp"
      (623474 'move' call_tmp[623471](72925 call _cast call_tmp[623459] call_tmp[623466]))
      unknown call_tmp[623476] "expr temp" "maybe param" "maybe type" "temp"
      (623479 'move' call_tmp[623476](72927 call > call_tmp[623454] call_tmp[623471]))
      (557999 'move' tmp[557997](420536 call isTrue call_tmp[623476]))
      (558004 'move' tmp[557989](558001 '_paramFoldLogical' tmp[557990] tmp[557997]))
    }
    {
      (558009 'move' tmp[557989](558006 '_paramFoldLogical' tmp[557990] 0))
    }
    unknown call_tmp[623481] "expr temp" "maybe param" "maybe type" "temp"
    (623484 'move' call_tmp[623481](72981 call _cond_test tmp[557989]))
    if call_tmp[623481]
    {
      unknown call_tmp[623486] "expr temp" "maybe param" "maybe type" "temp"
      (623489 'move' call_tmp[623486](72952 call abs count[72496]))
      unknown call_tmp[623491] "expr temp" "maybe param" "maybe type" "temp"
      (623494 'move' call_tmp[623491](72954 call _cast string[26] call_tmp[623486]))
      unknown call_tmp[623496] "expr temp" "maybe param" "maybe type" "temp"
      (623499 'move' call_tmp[623496](72956 call + "bounded range is too small to access " call_tmp[623491]))
      unknown call_tmp[623501] "expr temp" "maybe param" "maybe type" "temp"
      (623504 'move' call_tmp[623501](72975 call + call_tmp[623496] " elements"))
      (72978 call boundsCheckHalt call_tmp[623501])
    }
    function chpl__computeTypeForCountMath[72989](arg t1[72987]:_any[178](?), arg t2[72991]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[510619] "RVV" "temp" "type variable"
      unknown call_tmp[623506] "expr temp" "maybe param" "maybe type" "temp"
      (623509 'move' call_tmp[623506](72995 call == t1[72987] t2[72991]))
      unknown call_tmp[623511] "expr temp" "maybe param" "maybe type" "temp"
      (623514 'move' call_tmp[623511](73049 call _cond_test call_tmp[623506]))
      if call_tmp[623511]
      {
        unknown call_tmp[623516] "expr temp" "maybe param" "maybe type" "temp"
        (623519 'move' call_tmp[623516](73000 call chpl__idxTypeToIntIdxType t1[72987]))
        (510624 'move' ret[510619](510623 'deref' call_tmp[623516]))
        gotoReturn _end_chpl__computeTypeForCountMath[510617] _end_chpl__computeTypeForCountMath[510617]
      }
      {
        unknown tmp[420574] "maybe param" "temp"
        unknown call_tmp[623521] "expr temp" "maybe param" "maybe type" "temp"
        (623524 'move' call_tmp[623521](73007 call numBits t1[72987]))
        (420585 'move' tmp[420574](73009 call == call_tmp[623521] 64))
        unknown call_tmp[623526] "expr temp" "maybe param" "maybe type" "temp"
        (623529 'move' call_tmp[623526](420587 call _cond_invalid tmp[420574]))
        if call_tmp[623526]
        {
          (420590 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[558016] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558017] "maybe param" "temp"
        unknown call_tmp[623531] "expr temp" "maybe param" "maybe type" "temp"
        (623534 'move' call_tmp[623531](420575 call isTrue tmp[420574]))
        (558022 'move' tmp[558017](558020 call _cond_test call_tmp[623531]))
        if tmp[558017]
        {
          (558027 'move' tmp[558016](558024 '_paramFoldLogical' tmp[558017] 1))
        }
        {
          unknown tmp[558029] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623536] "expr temp" "maybe param" "maybe type" "temp"
          (623539 'move' call_tmp[623536](73014 call numBits t2[72991]))
          unknown call_tmp[623541] "expr temp" "maybe param" "maybe type" "temp"
          (623544 'move' call_tmp[623541](73016 call == call_tmp[623536] 64))
          (558031 'move' tmp[558029](420579 call isTrue call_tmp[623541]))
          (558036 'move' tmp[558016](558033 '_paramFoldLogical' tmp[558017] tmp[558029]))
        }
        unknown call_tmp[623546] "expr temp" "maybe param" "maybe type" "temp"
        (623549 'move' call_tmp[623546](73045 call _cond_test tmp[558016]))
        if call_tmp[623546]
        {
          unknown call_tmp[623551] "expr temp" "maybe param" "maybe type" "temp"
          (623554 'move' call_tmp[623551](73023 call int(64)[13] 64))
          (510629 'move' ret[510619](510628 'deref' call_tmp[623551]))
          gotoReturn _end_chpl__computeTypeForCountMath[510617] _end_chpl__computeTypeForCountMath[510617]
        }
        {
          unknown x1[73028] "dead at end of block" "insert auto destroy"
          (541230 'default init var' x1[73028] t1[72987])
          (73031 'end of statement')
          unknown x2[73034] "dead at end of block" "insert auto destroy"
          (541232 'default init var' x2[73034] t2[72991])
          (73037 'end of statement')
          { scopeless type
            unknown call_type_tmp[491973] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[623556] "expr temp" "maybe param" "maybe type" "temp"
            (623559 'move' call_tmp[623556](73040 call + x1[73028] x2[73034]))
            (491977 'move' call_type_tmp[491973](73042 'typeof' call_tmp[623556]))
          }
          (510634 'move' ret[510619](510633 'deref' call_type_tmp[491973]))
          gotoReturn _end_chpl__computeTypeForCountMath[510617] _end_chpl__computeTypeForCountMath[510617]
          (475732 'end of statement' x1[73028] x2[73034])
        }
      }
      label _end_chpl__computeTypeForCountMath[510617]
      (510621 return ret[510619])
    }
    unknown call_tmp[623561] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623564 'move' call_tmp[623561](73061 'typeof' count[72496]))
    unknown computeType[73063] "dead at end of block" "insert auto destroy" "type variable"(73062 call chpl__computeTypeForCountMath resultType[72541] call_tmp[623561])
    unknown call_tmp[623566] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623569 'move' call_tmp[623566](541237 'typeof' count[72496]))
    (541239 'move' computeType[73063](541235 call chpl__computeTypeForCountMath resultType[72541] call_tmp[623566]))
    unknown signedComputeType[73070] "dead at end of block" "insert auto destroy" "type variable"(73069 call chpl__signedType computeType[73063])
    (541244 'move' signedComputeType[73070](541242 call chpl__signedType computeType[73063]))
    unknown call_tmp[623571] "expr temp" "maybe param" "maybe type" "temp"
    (623574 'move' call_tmp[623571](73075 call _cast signedComputeType[73070] count[72496]))
    unknown call_tmp[623578] "expr temp" "maybe param" "maybe type" "temp"
    (623581 'move' call_tmp[623578](73078 call stride _mt[243] r[72491]))
    unknown call_tmp[623583] "expr temp" "maybe param" "maybe type" "temp"
    (623586 'move' call_tmp[623583](73082 call _cast signedComputeType[73070] call_tmp[623578]))
    unknown call_tmp[623588] "maybe param" "maybe type" "temp"
    (623591 'move' call_tmp[623588](73084 call * call_tmp[623571] call_tmp[623583]))
    unknown diff[73086] "dead at end of block" "insert auto destroy"
    (541246 'init var' diff[73086] call_tmp[623588])
    (73089 'end of statement')
    unknown lo[73120] "dead at end of block" "insert auto destroy"
    unknown tmp[558043] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558044] "maybe param" "temp"
    unknown call_tmp[623593] "expr temp" "maybe param" "maybe type" "temp"
    (623596 'move' call_tmp[623593](73093 call > diff[73086] 0))
    (558049 'move' tmp[558044](558047 call _cond_test call_tmp[623593]))
    if tmp[558044]
    {
      unknown tmp[558051] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558053 'move' tmp[558051](73096 call _low _mt[243] r[72491]))
      (558058 'move' tmp[558043](558055 '_paramFoldLogical' tmp[558044] tmp[558051]))
    }
    {
      unknown tmp[558060] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623602] "expr temp" "maybe param" "maybe type" "temp"
      (623605 'move' call_tmp[623602](73101 call _high _mt[243] r[72491]))
      unknown call_tmp[623607] "expr temp" "maybe param" "maybe type" "temp"
      (623610 'move' call_tmp[623607](73105 call _cast computeType[73063] call_tmp[623602]))
      unknown call_tmp[623612] "expr temp" "maybe param" "maybe type" "temp"
      (623615 'move' call_tmp[623612](73110 call + diff[73086] 1))
      unknown call_tmp[623617] "expr temp" "maybe param" "maybe type" "temp"
      (623620 'move' call_tmp[623617](73113 call _cast computeType[73063] call_tmp[623612]))
      (558062 'move' tmp[558060](73116 call chpl__add call_tmp[623607] call_tmp[623617] resultType[72541]))
      (558067 'move' tmp[558043](558064 '_paramFoldLogical' tmp[558044] tmp[558060]))
    }
    (541248 'init var' lo[73120] tmp[558043] resultType[72541])
    (73123 'end of statement')
    unknown hi[73154] "dead at end of block" "insert auto destroy"
    unknown tmp[558074] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558075] "maybe param" "temp"
    unknown call_tmp[623622] "expr temp" "maybe param" "maybe type" "temp"
    (623625 'move' call_tmp[623622](73127 call < diff[73086] 0))
    (558080 'move' tmp[558075](558078 call _cond_test call_tmp[623622]))
    if tmp[558075]
    {
      unknown tmp[558082] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558084 'move' tmp[558082](73130 call _high _mt[243] r[72491]))
      (558089 'move' tmp[558074](558086 '_paramFoldLogical' tmp[558075] tmp[558082]))
    }
    {
      unknown tmp[558091] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623631] "expr temp" "maybe param" "maybe type" "temp"
      (623634 'move' call_tmp[623631](73135 call _low _mt[243] r[72491]))
      unknown call_tmp[623636] "expr temp" "maybe param" "maybe type" "temp"
      (623639 'move' call_tmp[623636](73139 call _cast computeType[73063] call_tmp[623631]))
      unknown call_tmp[623641] "expr temp" "maybe param" "maybe type" "temp"
      (623644 'move' call_tmp[623641](73144 call _cast computeType[73063] diff[73086]))
      unknown call_tmp[623646] "expr temp" "maybe param" "maybe type" "temp"
      (623649 'move' call_tmp[623646](73147 call - call_tmp[623641] 1))
      (558093 'move' tmp[558091](73150 call chpl__add call_tmp[623636] call_tmp[623646] resultType[72541]))
      (558098 'move' tmp[558074](558095 '_paramFoldLogical' tmp[558075] tmp[558091]))
    }
    (541250 'init var' hi[73154] tmp[558074] resultType[72541])
    (73157 'end of statement' resultType[72541] resultType[72541] computeType[73063] signedComputeType[73070] signedComputeType[73070] diff[73086] computeType[73063] computeType[73063] diff[73086] resultType[72541] resultType[72541] diff[73086] computeType[73063] computeType[73063] diff[73086] resultType[72541] resultType[72541])
    unknown call_tmp[623653] "expr temp" "maybe param" "maybe type" "temp"
    (623656 'move' call_tmp[623653](73159 call stridable _mt[243] r[72491]))
    unknown call_tmp[623658] "expr temp" "maybe param" "maybe type" "temp"
    (623661 'move' call_tmp[623658](73219 call _cond_test call_tmp[623653]))
    if call_tmp[623658]
    {
      unknown tmp[420595] "maybe param" "temp"
      (420606 'move' tmp[420595](73167 call(73163 call (partial) hasLowBound _mt[243] r[72491])))
      unknown call_tmp[623665] "expr temp" "maybe param" "maybe type" "temp"
      (623668 'move' call_tmp[623665](420608 call _cond_invalid tmp[420595]))
      if call_tmp[623665]
      {
        (420611 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558105] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558106] "maybe param" "temp"
      unknown call_tmp[623670] "expr temp" "maybe param" "maybe type" "temp"
      (623673 'move' call_tmp[623670](420596 call isTrue tmp[420595]))
      (558111 'move' tmp[558106](558109 call _cond_test call_tmp[623670]))
      if tmp[558106]
      {
        unknown tmp[558113] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623677] "expr temp" "maybe param" "maybe type" "temp"
        (623680 'move' call_tmp[623677](73170 call _low _mt[243] r[72491]))
        unknown call_tmp[623682] "expr temp" "maybe param" "maybe type" "temp"
        (623685 'move' call_tmp[623682](73173 call < lo[73120] call_tmp[623677]))
        (558115 'move' tmp[558113](420599 call isTrue call_tmp[623682]))
        (558120 'move' tmp[558105](558117 '_paramFoldLogical' tmp[558106] tmp[558113]))
      }
      {
        (558125 'move' tmp[558105](558122 '_paramFoldLogical' tmp[558106] 0))
      }
      unknown call_tmp[623687] "expr temp" "maybe param" "maybe type" "temp"
      (623690 'move' call_tmp[623687](73185 call _cond_test tmp[558105]))
      if call_tmp[623687]
      {
        unknown call_tmp[623694] "expr temp" "maybe param" "maybe type" "temp"
        (623697 'move' call_tmp[623694](73179 call _low _mt[243] r[72491]))
        (73182 call = lo[73120] call_tmp[623694])
        (475752 'end of statement' lo[73120])
      }
      unknown tmp[420616] "maybe param" "temp"
      (420627 'move' tmp[420616](73196 call(73192 call (partial) hasHighBound _mt[243] r[72491])))
      unknown call_tmp[623701] "expr temp" "maybe param" "maybe type" "temp"
      (623704 'move' call_tmp[623701](420629 call _cond_invalid tmp[420616]))
      if call_tmp[623701]
      {
        (420632 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558132] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558133] "maybe param" "temp"
      unknown call_tmp[623706] "expr temp" "maybe param" "maybe type" "temp"
      (623709 'move' call_tmp[623706](420617 call isTrue tmp[420616]))
      (558138 'move' tmp[558133](558136 call _cond_test call_tmp[623706]))
      if tmp[558133]
      {
        unknown tmp[558140] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623713] "expr temp" "maybe param" "maybe type" "temp"
        (623716 'move' call_tmp[623713](73199 call _high _mt[243] r[72491]))
        unknown call_tmp[623718] "expr temp" "maybe param" "maybe type" "temp"
        (623721 'move' call_tmp[623718](73202 call > hi[73154] call_tmp[623713]))
        (558142 'move' tmp[558140](420620 call isTrue call_tmp[623718]))
        (558147 'move' tmp[558132](558144 '_paramFoldLogical' tmp[558133] tmp[558140]))
      }
      {
        (558152 'move' tmp[558132](558149 '_paramFoldLogical' tmp[558133] 0))
      }
      unknown call_tmp[623723] "expr temp" "maybe param" "maybe type" "temp"
      (623726 'move' call_tmp[623723](73214 call _cond_test tmp[558132]))
      if call_tmp[623723]
      {
        unknown call_tmp[623730] "expr temp" "maybe param" "maybe type" "temp"
        (623733 'move' call_tmp[623730](73208 call _high _mt[243] r[72491]))
        (73211 call = hi[73154] call_tmp[623730])
        (475755 'end of statement' hi[73154])
      }
    }
    unknown tmp[558159] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558160] "maybe param" "temp"
    unknown call_tmp[623737] "expr temp" "maybe param" "maybe type" "temp"
    (623740 'move' call_tmp[623737](73258 call stridable _mt[243] r[72491]))
    (558165 'move' tmp[558160](558163 call _cond_test call_tmp[623737]))
    if tmp[558160]
    {
      unknown tmp[558167] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623744] "expr temp" "maybe param" "maybe type" "temp"
      (623747 'move' call_tmp[623744](73262 call stride _mt[243] r[72491]))
      (558169 'move' tmp[558167](73266 call _cast strType[72548] call_tmp[623744]))
      (558174 'move' tmp[558159](558171 '_paramFoldLogical' tmp[558160] tmp[558167]))
    }
    {
      (558179 'move' tmp[558159](558176 '_paramFoldLogical' tmp[558160] none[57]))
    }
    unknown tmp[558186] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558187] "maybe param" "temp"
    unknown call_tmp[623751] "expr temp" "maybe param" "maybe type" "temp"
    (623754 'move' call_tmp[623751](73274 call stridable _mt[243] r[72491]))
    (558192 'move' tmp[558187](558190 call _cond_test call_tmp[623751]))
    if tmp[558187]
    {
      unknown tmp[558194] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558196 'move' tmp[558194](73278 call alignment _mt[243] r[72491]))
      (558201 'move' tmp[558186](558198 '_paramFoldLogical' tmp[558187] tmp[558194]))
    }
    {
      (558206 'move' tmp[558186](558203 '_paramFoldLogical' tmp[558187] none[57]))
    }
    unknown tmp[558213] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558214] "maybe param" "temp"
    unknown call_tmp[623760] "expr temp" "maybe param" "maybe type" "temp"
    (623763 'move' call_tmp[623760](73287 call stridable _mt[243] r[72491]))
    (558219 'move' tmp[558214](558217 call _cond_test call_tmp[623760]))
    if tmp[558214]
    {
      unknown tmp[558221] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558223 'move' tmp[558221](73291 call aligned _mt[243] r[72491]))
      (558228 'move' tmp[558213](558225 '_paramFoldLogical' tmp[558214] tmp[558221]))
    }
    {
      (558233 'move' tmp[558213](558230 '_paramFoldLogical' tmp[558214] none[57]))
    }
    unknown call_tmp[623769] "expr temp" "maybe param" "maybe type" "temp"
    (623772 'move' call_tmp[623769](73226 call idxType _mt[243] r[72491]))
    unknown call_tmp[623776] "expr temp" "maybe param" "maybe type" "temp"
    (623779 'move' call_tmp[623776](73237 call stridable _mt[243] r[72491]))
    unknown call_tmp[623783] "expr temp" "maybe param" "maybe type" "temp"
    (623786 'move' call_tmp[623783](73247 call(73242 call (partial) chpl_intToIdx _mt[243] r[72491]) lo[73120]))
    unknown call_tmp[623790] "expr temp" "maybe param" "maybe type" "temp"
    (623793 'move' call_tmp[623790](73255 call(73250 call (partial) chpl_intToIdx _mt[243] r[72491]) hi[73154]))
    unknown call_tmp[623795] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (623798 'move' call_tmp[623795](747832 'new' range[64316](?)(idxType = call_tmp[623769])(boundedType = bounded[64205])(stridable = call_tmp[623776])(_low = call_tmp[623783])(_high = call_tmp[623790])(_stride = tmp[558159])(_alignment = tmp[558186])(_aligned = tmp[558213])))
    (510655 'move' ret[510640](510654 'deref' call_tmp[623795]))
    gotoReturn _end_chpl_count_help[510638] _end_chpl_count_help[510638]
    (475757 'end of statement' lo[73120] hi[73154] strType[72548])
    label _end_chpl_count_help[510638]
    (510642 return ret[510640])
  }
  function #[73314](arg r[73311]:range[64316](?), arg count[73320] :
  unknown call_tmp[623800] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510661] "RVV" "temp"
    unknown call_tmp[623805] "expr temp" "maybe param" "maybe type" "temp"
    (623808 'move' call_tmp[623805](73327 call chpl_count_help r[73311] count[73320]))
    (510666 'move' ret[510661](510665 'deref' call_tmp[623805]))
    (510663 return ret[510661])
  }
  function #[73343](arg r[73340]:range[64316](?), arg count[73349] :
  unknown call_tmp[623810] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510670] "RVV" "temp"
    unknown call_tmp[623815] "expr temp" "maybe param" "maybe type" "temp"
    (623818 'move' call_tmp[623815](73356 call chpl_count_help r[73340] count[73349]))
    (510675 'move' ret[510670](510674 'deref' call_tmp[623815]))
    (510672 return ret[510670])
  }
  function #[73372](arg r[73369]:range[64316](?), arg count[73374]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510679] "RVV" "temp"
    unknown call_tmp[623820] "expr temp" "maybe param" "maybe type" "temp"
    (623823 'move' call_tmp[623820](456042 'query' r[73369] 1))
    unknown call_tmp[623825] "expr temp" "maybe param" "maybe type" "temp"
    (623828 'move' call_tmp[623825](73397 call _cast string[26] call_tmp[623820]))
    unknown call_tmp[623830] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623833 'move' call_tmp[623830](73417 'typeof' count[73374]))
    unknown call_tmp[623835] "expr temp" "maybe param" "maybe type" "temp"
    (623838 'move' call_tmp[623835](73419 call _cast string[26] call_tmp[623830]))
    (73421 call compilerError "can't apply '#' to a range with idxType " call_tmp[623825] " using a count of type " call_tmp[623835])
    (475763 'end of statement')
    (510684 'move' ret[510679](510683 'deref' r[73369]))
    (510681 return ret[510679])
  }
  function chpl_checkIfRangeIterWillOverflow[73433](arg idxType[73431]:_any[178](?), arg low[73435]:_any[178](?), arg high[73437]:_any[178](?), arg stride[73439]:_any[178](?), arg first[73442] :
  low[73435] =
  low[73435], arg last[73446] :
  high[73437] =
  high[73437], arg shouldHalt[73450] :
  1 =
  1) : _unknown[51]
  {
    unknown ret[510688] "RVV" "temp"
    unknown call_tmp[623840] "expr temp" "maybe param" "maybe type" "temp"
    (623843 'move' call_tmp[623840](73455 call > low[73435] high[73437]))
    unknown call_tmp[623845] "expr temp" "maybe param" "maybe type" "temp"
    (623848 'move' call_tmp[623845](73461 call _cond_test call_tmp[623840]))
    if call_tmp[623845]
    {
      (510693 'move' ret[510688](510692 'deref' 0))
      gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510686] _end_chpl_checkIfRangeIterWillOverflow[510686]
    }
    unknown willOverFlow[73467] "dead at end of block" "insert auto destroy"
    (541252 'init var' willOverFlow[73467] 0)
    (73470 'end of statement')
    unknown call_tmp[623850] "expr temp" "maybe param" "maybe type" "temp"
    (623853 'move' call_tmp[623850](73474 call isIntType idxType[73431]))
    unknown call_tmp[623855] "expr temp" "maybe param" "maybe type" "temp"
    (623858 'move' call_tmp[623855](73654 call _cond_test call_tmp[623850]))
    if call_tmp[623855]
    {
      unknown tmp[420658] "maybe param" "temp"
      (420669 'move' tmp[420658](73477 call > last[73446] 0))
      unknown call_tmp[623860] "expr temp" "maybe param" "maybe type" "temp"
      (623863 'move' call_tmp[623860](420671 call _cond_invalid tmp[420658]))
      if call_tmp[623860]
      {
        (420674 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558240] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558241] "maybe param" "temp"
      unknown call_tmp[623865] "expr temp" "maybe param" "maybe type" "temp"
      (623868 'move' call_tmp[623865](420659 call isTrue tmp[420658]))
      (558246 'move' tmp[558241](558244 call _cond_test call_tmp[623865]))
      if tmp[558241]
      {
        unknown tmp[558248] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623870] "expr temp" "maybe param" "maybe type" "temp"
        (623873 'move' call_tmp[623870](73481 call > stride[73439] 0))
        (558250 'move' tmp[558248](420662 call isTrue call_tmp[623870]))
        (558255 'move' tmp[558240](558252 '_paramFoldLogical' tmp[558241] tmp[558248]))
      }
      {
        (558260 'move' tmp[558240](558257 '_paramFoldLogical' tmp[558241] 0))
      }
      unknown call_tmp[623875] "expr temp" "maybe param" "maybe type" "temp"
      (623878 'move' call_tmp[623875](73541 call _cond_test tmp[558240]))
      if call_tmp[623875]
      {
        unknown call_tmp[623880] "expr temp" "maybe param" "maybe type" "temp"
        (623883 'move' call_tmp[623880](73489 call max idxType[73431]))
        unknown call_tmp[623885] "expr temp" "maybe param" "maybe type" "temp"
        (623888 'move' call_tmp[623885](73491 call - call_tmp[623880] last[73446]))
        unknown call_tmp[623890] "expr temp" "maybe param" "maybe type" "temp"
        (623893 'move' call_tmp[623890](73493 call > stride[73439] call_tmp[623885]))
        unknown call_tmp[623895] "expr temp" "maybe param" "maybe type" "temp"
        (623898 'move' call_tmp[623895](73501 call _cond_test call_tmp[623890]))
        if call_tmp[623895]
        {
          (73497 call = willOverFlow[73467] 1)
          (475767 'end of statement' willOverFlow[73467])
        }
      }
      {
        unknown tmp[420637] "maybe param" "temp"
        (420648 'move' tmp[420637](73508 call < last[73446] 0))
        unknown call_tmp[623900] "expr temp" "maybe param" "maybe type" "temp"
        (623903 'move' call_tmp[623900](420650 call _cond_invalid tmp[420637]))
        if call_tmp[623900]
        {
          (420653 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[558267] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558268] "maybe param" "temp"
        unknown call_tmp[623905] "expr temp" "maybe param" "maybe type" "temp"
        (623908 'move' call_tmp[623905](420638 call isTrue tmp[420637]))
        (558273 'move' tmp[558268](558271 call _cond_test call_tmp[623905]))
        if tmp[558268]
        {
          unknown tmp[558275] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623910] "expr temp" "maybe param" "maybe type" "temp"
          (623913 'move' call_tmp[623910](73512 call < stride[73439] 0))
          (558277 'move' tmp[558275](420641 call isTrue call_tmp[623910]))
          (558282 'move' tmp[558267](558279 '_paramFoldLogical' tmp[558268] tmp[558275]))
        }
        {
          (558287 'move' tmp[558267](558284 '_paramFoldLogical' tmp[558268] 0))
        }
        unknown call_tmp[623915] "expr temp" "maybe param" "maybe type" "temp"
        (623918 'move' call_tmp[623915](73537 call _cond_test tmp[558267]))
        if call_tmp[623915]
        {
          unknown call_tmp[623920] "expr temp" "maybe param" "maybe type" "temp"
          (623923 'move' call_tmp[623920](73520 call min idxType[73431]))
          unknown call_tmp[623925] "expr temp" "maybe param" "maybe type" "temp"
          (623928 'move' call_tmp[623925](73522 call - call_tmp[623920] last[73446]))
          unknown call_tmp[623930] "expr temp" "maybe param" "maybe type" "temp"
          (623933 'move' call_tmp[623930](73524 call < stride[73439] call_tmp[623925]))
          unknown call_tmp[623935] "expr temp" "maybe param" "maybe type" "temp"
          (623938 'move' call_tmp[623935](73532 call _cond_test call_tmp[623930]))
          if call_tmp[623935]
          {
            (73528 call = willOverFlow[73467] 1)
            (475770 'end of statement' willOverFlow[73467])
          }
        }
      }
    }
    {
      unknown call_tmp[623940] "expr temp" "maybe param" "maybe type" "temp"
      (623943 'move' call_tmp[623940](73550 call isUintType idxType[73431]))
      unknown call_tmp[623945] "expr temp" "maybe param" "maybe type" "temp"
      (623948 'move' call_tmp[623945](73650 call _cond_test call_tmp[623940]))
      if call_tmp[623945]
      {
        unknown call_tmp[623950] "expr temp" "maybe param" "maybe type" "temp"
        (623953 'move' call_tmp[623950](73553 call > stride[73439] 0))
        unknown call_tmp[623955] "expr temp" "maybe param" "maybe type" "temp"
        (623958 'move' call_tmp[623955](73605 call _cond_test call_tmp[623950]))
        if call_tmp[623955]
        {
          unknown call_tmp[623960] "expr temp" "maybe param" "maybe type" "temp"
          (623963 'move' call_tmp[623960](73558 call _cast idxType[73431] stride[73439]))
          unknown call_tmp[623965] "expr temp" "maybe param" "maybe type" "temp"
          (623968 'move' call_tmp[623965](73560 call + last[73446] call_tmp[623960]))
          unknown call_tmp[623970] "expr temp" "maybe param" "maybe type" "temp"
          (623973 'move' call_tmp[623970](73563 call < call_tmp[623965] last[73446]))
          unknown call_tmp[623975] "expr temp" "maybe param" "maybe type" "temp"
          (623978 'move' call_tmp[623975](73571 call _cond_test call_tmp[623970]))
          if call_tmp[623975]
          {
            (73567 call = willOverFlow[73467] 1)
            (475772 'end of statement' willOverFlow[73467])
          }
        }
        {
          unknown call_tmp[623980] "expr temp" "maybe param" "maybe type" "temp"
          (623983 'move' call_tmp[623980](73578 call < stride[73439] 0))
          unknown call_tmp[623985] "expr temp" "maybe param" "maybe type" "temp"
          (623988 'move' call_tmp[623985](73601 call _cond_test call_tmp[623980]))
          if call_tmp[623985]
          {
            unknown call_tmp[623990] "expr temp" "maybe param" "maybe type" "temp"
            (623993 'move' call_tmp[623990](73583 call _cast idxType[73431] stride[73439]))
            unknown call_tmp[623995] "expr temp" "maybe param" "maybe type" "temp"
            (623998 'move' call_tmp[623995](73585 call + last[73446] call_tmp[623990]))
            unknown call_tmp[624000] "expr temp" "maybe param" "maybe type" "temp"
            (624003 'move' call_tmp[624000](73588 call > call_tmp[623995] last[73446]))
            unknown call_tmp[624005] "expr temp" "maybe param" "maybe type" "temp"
            (624008 'move' call_tmp[624005](73596 call _cond_test call_tmp[624000]))
            if call_tmp[624005]
            {
              (73592 call = willOverFlow[73467] 1)
              (475774 'end of statement' willOverFlow[73467])
            }
          }
        }
      }
      {
        (73647 call compilerError "Iterator overflow checking is only supported " "for integral types")
      }
    }
    unknown tmp[420679] "maybe param" "temp"
    (420690 'move' tmp[420679] willOverFlow[73467])
    unknown call_tmp[624010] "expr temp" "maybe param" "maybe type" "temp"
    (624013 'move' call_tmp[624010](420692 call _cond_invalid tmp[420679]))
    if call_tmp[624010]
    {
      (420695 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558294] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558295] "maybe param" "temp"
    unknown call_tmp[624015] "expr temp" "maybe param" "maybe type" "temp"
    (624018 'move' call_tmp[624015](420680 call isTrue tmp[420679]))
    (558300 'move' tmp[558295](558298 call _cond_test call_tmp[624015]))
    if tmp[558295]
    {
      unknown tmp[558302] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558304 'move' tmp[558302](420683 call isTrue shouldHalt[73450]))
      (558309 'move' tmp[558294](558306 '_paramFoldLogical' tmp[558295] tmp[558302]))
    }
    {
      (558314 'move' tmp[558294](558311 '_paramFoldLogical' tmp[558295] 0))
    }
    unknown call_tmp[624020] "expr temp" "maybe param" "maybe type" "temp"
    (624023 'move' call_tmp[624020](73688 call _cond_test tmp[558294]))
    if call_tmp[624020]
    {
      (73685 call boundsCheckHalt module=[255] HaltWrappers[209915] "Iteration over a bounded range may be incorrect due to overflow.")
      (358000 'referenced modules list' HaltWrappers[209915])
    }
    (510698 'move' ret[510688](510697 'deref' willOverFlow[73467]))
    gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510686] _end_chpl_checkIfRangeIterWillOverflow[510686]
    (475779 'end of statement' willOverFlow[73467])
    label _end_chpl_checkIfRangeIterWillOverflow[510686]
    (510690 return ret[510688])
  }
  function range[64316](?).checkIfIterWillOverflow[73704](arg _mt[73709]:_MT[238], arg this[73706]:range[64316](?) :
  range[64316](?), arg shouldHalt[73701] :
  1 =
  1) : _unknown[51] "method" "no doc"
  {
    unknown ret[510704] "RVV" "temp"
    unknown call_tmp[624027] "expr temp" "maybe param" "maybe type" "temp"
    (624030 'move' call_tmp[624027](73713 call intIdxType _mt[243] this[73706]))
    unknown call_tmp[624034] "expr temp" "maybe param" "maybe type" "temp"
    (624037 'move' call_tmp[624034](73718 call _low _mt[243] this[73706]))
    unknown call_tmp[624041] "expr temp" "maybe param" "maybe type" "temp"
    (624044 'move' call_tmp[624041](73722 call _high _mt[243] this[73706]))
    unknown call_tmp[624048] "expr temp" "maybe param" "maybe type" "temp"
    (624051 'move' call_tmp[624048](73726 call stride _mt[243] this[73706]))
    unknown call_tmp[624055] "expr temp" "maybe param" "maybe type" "temp"
    (624058 'move' call_tmp[624055](73730 call firstAsInt _mt[243] this[73706]))
    unknown call_tmp[624062] "expr temp" "maybe param" "maybe type" "temp"
    (624065 'move' call_tmp[624062](73734 call lastAsInt _mt[243] this[73706]))
    unknown call_tmp[624067] "expr temp" "maybe param" "maybe type" "temp"
    (624070 'move' call_tmp[624067](73738 call chpl_checkIfRangeIterWillOverflow call_tmp[624027] call_tmp[624034] call_tmp[624041] call_tmp[624048] call_tmp[624055] call_tmp[624062] shouldHalt[73701]))
    (510709 'move' ret[510704](510708 'deref' call_tmp[624067]))
    (510706 return ret[510704])
  }
  function chpl_direct_range_iter[456253](arg low[456260] :
  (456257 call int(64)[13] 64), arg high[456266] :
  (456264 call int(64)[13] 64), arg stride[456272] :
  (456270 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510713] "RVV" "temp"
    unknown call_tmp[624072] "expr temp" "maybe param" "maybe type" "temp"
    (624075 'move' call_tmp[624072](456279 call chpl_build_bounded_range low[456260] high[456266]))
    unknown call_tmp[624077] "maybe param" "maybe type" "temp"
    (624080 'move' call_tmp[624077](456277 call chpl_by call_tmp[624072] stride[456272]))
    const r[456275] "dead at end of block" "const" "insert auto destroy"
    (541254 'init var' r[456275] call_tmp[624077])
    (456284 'end of statement')
    {
      unknown _indexOfInterest[456286] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456288] "expr temp" "temp"
      (456290 'move' _iterator[456288](456293 call _getIterator r[456275]))
      Defer
      {
        {
          (456297 call _freeIterator _iterator[456288])
        }
      }
      { scopeless type
        (456301 'move' _indexOfInterest[456286](456304 call iteratorIndex _iterator[456288]))
      }
      ForLoop[456306]
      {
        unknown i[456309] "index var" "insert auto destroy"
        (475783 'end of statement')
        (456311 'move' i[456309] _indexOfInterest[456286])
        (475784 'end of statement' i[456309])
        unknown yret[510717] "YVV" "temp"
        (510720 'move' yret[510717](510719 'deref' i[456309]))
        (510722 yield yret[510717])
        (475786 'end of statement' i[456309])
        label _continueLabel[456316]
        _indexOfInterest[456286]
        _iterator[456288]
      }
      label _breakLabel[456318]
    }
    (510715 return ret[510713])
  }
  function chpl_direct_range_iter[456184](arg low[456191] :
  (456188 call int(64)[13] 32), arg high[456197] :
  (456195 call int(64)[13] 32), arg stride[456203] :
  (456201 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510726] "RVV" "temp"
    unknown call_tmp[624082] "expr temp" "maybe param" "maybe type" "temp"
    (624085 'move' call_tmp[624082](456210 call chpl_build_bounded_range low[456191] high[456197]))
    unknown call_tmp[624087] "maybe param" "maybe type" "temp"
    (624090 'move' call_tmp[624087](456208 call chpl_by call_tmp[624082] stride[456203]))
    const r[456206] "dead at end of block" "const" "insert auto destroy"
    (541256 'init var' r[456206] call_tmp[624087])
    (456215 'end of statement')
    {
      unknown _indexOfInterest[456217] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456219] "expr temp" "temp"
      (456221 'move' _iterator[456219](456224 call _getIterator r[456206]))
      Defer
      {
        {
          (456228 call _freeIterator _iterator[456219])
        }
      }
      { scopeless type
        (456232 'move' _indexOfInterest[456217](456235 call iteratorIndex _iterator[456219]))
      }
      ForLoop[456237]
      {
        unknown i[456240] "index var" "insert auto destroy"
        (475789 'end of statement')
        (456242 'move' i[456240] _indexOfInterest[456217])
        (475790 'end of statement' i[456240])
        unknown yret[510730] "YVV" "temp"
        (510733 'move' yret[510730](510732 'deref' i[456240]))
        (510735 yield yret[510730])
        (475792 'end of statement' i[456240])
        label _continueLabel[456247]
        _indexOfInterest[456217]
        _iterator[456219]
      }
      label _breakLabel[456249]
    }
    (510728 return ret[510726])
  }
  function chpl_direct_range_iter[456115](arg low[456122] :
  (456119 call int(64)[13] 16), arg high[456128] :
  (456126 call int(64)[13] 16), arg stride[456134] :
  (456132 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510739] "RVV" "temp"
    unknown call_tmp[624092] "expr temp" "maybe param" "maybe type" "temp"
    (624095 'move' call_tmp[624092](456141 call chpl_build_bounded_range low[456122] high[456128]))
    unknown call_tmp[624097] "maybe param" "maybe type" "temp"
    (624100 'move' call_tmp[624097](456139 call chpl_by call_tmp[624092] stride[456134]))
    const r[456137] "dead at end of block" "const" "insert auto destroy"
    (541258 'init var' r[456137] call_tmp[624097])
    (456146 'end of statement')
    {
      unknown _indexOfInterest[456148] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456150] "expr temp" "temp"
      (456152 'move' _iterator[456150](456155 call _getIterator r[456137]))
      Defer
      {
        {
          (456159 call _freeIterator _iterator[456150])
        }
      }
      { scopeless type
        (456163 'move' _indexOfInterest[456148](456166 call iteratorIndex _iterator[456150]))
      }
      ForLoop[456168]
      {
        unknown i[456171] "index var" "insert auto destroy"
        (475795 'end of statement')
        (456173 'move' i[456171] _indexOfInterest[456148])
        (475796 'end of statement' i[456171])
        unknown yret[510743] "YVV" "temp"
        (510746 'move' yret[510743](510745 'deref' i[456171]))
        (510748 yield yret[510743])
        (475798 'end of statement' i[456171])
        label _continueLabel[456178]
        _indexOfInterest[456148]
        _iterator[456150]
      }
      label _breakLabel[456180]
    }
    (510741 return ret[510739])
  }
  function chpl_direct_range_iter[456046](arg low[456053] :
  (456050 call int(64)[13] 8), arg high[456059] :
  (456057 call int(64)[13] 8), arg stride[456065] :
  (456063 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510752] "RVV" "temp"
    unknown call_tmp[624102] "expr temp" "maybe param" "maybe type" "temp"
    (624105 'move' call_tmp[624102](456072 call chpl_build_bounded_range low[456053] high[456059]))
    unknown call_tmp[624107] "maybe param" "maybe type" "temp"
    (624110 'move' call_tmp[624107](456070 call chpl_by call_tmp[624102] stride[456065]))
    const r[456068] "dead at end of block" "const" "insert auto destroy"
    (541260 'init var' r[456068] call_tmp[624107])
    (456077 'end of statement')
    {
      unknown _indexOfInterest[456079] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456081] "expr temp" "temp"
      (456083 'move' _iterator[456081](456086 call _getIterator r[456068]))
      Defer
      {
        {
          (456090 call _freeIterator _iterator[456081])
        }
      }
      { scopeless type
        (456094 'move' _indexOfInterest[456079](456097 call iteratorIndex _iterator[456081]))
      }
      ForLoop[456099]
      {
        unknown i[456102] "index var" "insert auto destroy"
        (475801 'end of statement')
        (456104 'move' i[456102] _indexOfInterest[456079])
        (475802 'end of statement' i[456102])
        unknown yret[510756] "YVV" "temp"
        (510759 'move' yret[510756](510758 'deref' i[456102]))
        (510761 yield yret[510756])
        (475804 'end of statement' i[456102])
        label _continueLabel[456109]
        _indexOfInterest[456079]
        _iterator[456081]
      }
      label _breakLabel[456111]
    }
    (510754 return ret[510752])
  }
  function chpl_direct_range_iter[456529](arg low[456536] :
  (456533 call uint(64)[115] 64), arg high[456542] :
  (456540 call uint(64)[115] 64), arg stride[456548] :
  (456546 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510765] "RVV" "temp"
    unknown call_tmp[624112] "expr temp" "maybe param" "maybe type" "temp"
    (624115 'move' call_tmp[624112](456555 call chpl_build_bounded_range low[456536] high[456542]))
    unknown call_tmp[624117] "maybe param" "maybe type" "temp"
    (624120 'move' call_tmp[624117](456553 call chpl_by call_tmp[624112] stride[456548]))
    const r[456551] "dead at end of block" "const" "insert auto destroy"
    (541262 'init var' r[456551] call_tmp[624117])
    (456560 'end of statement')
    {
      unknown _indexOfInterest[456562] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456564] "expr temp" "temp"
      (456566 'move' _iterator[456564](456569 call _getIterator r[456551]))
      Defer
      {
        {
          (456573 call _freeIterator _iterator[456564])
        }
      }
      { scopeless type
        (456577 'move' _indexOfInterest[456562](456580 call iteratorIndex _iterator[456564]))
      }
      ForLoop[456582]
      {
        unknown i[456585] "index var" "insert auto destroy"
        (475807 'end of statement')
        (456587 'move' i[456585] _indexOfInterest[456562])
        (475808 'end of statement' i[456585])
        unknown yret[510769] "YVV" "temp"
        (510772 'move' yret[510769](510771 'deref' i[456585]))
        (510774 yield yret[510769])
        (475810 'end of statement' i[456585])
        label _continueLabel[456592]
        _indexOfInterest[456562]
        _iterator[456564]
      }
      label _breakLabel[456594]
    }
    (510767 return ret[510765])
  }
  function chpl_direct_range_iter[456460](arg low[456467] :
  (456464 call uint(64)[115] 32), arg high[456473] :
  (456471 call uint(64)[115] 32), arg stride[456479] :
  (456477 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510778] "RVV" "temp"
    unknown call_tmp[624122] "expr temp" "maybe param" "maybe type" "temp"
    (624125 'move' call_tmp[624122](456486 call chpl_build_bounded_range low[456467] high[456473]))
    unknown call_tmp[624127] "maybe param" "maybe type" "temp"
    (624130 'move' call_tmp[624127](456484 call chpl_by call_tmp[624122] stride[456479]))
    const r[456482] "dead at end of block" "const" "insert auto destroy"
    (541264 'init var' r[456482] call_tmp[624127])
    (456491 'end of statement')
    {
      unknown _indexOfInterest[456493] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456495] "expr temp" "temp"
      (456497 'move' _iterator[456495](456500 call _getIterator r[456482]))
      Defer
      {
        {
          (456504 call _freeIterator _iterator[456495])
        }
      }
      { scopeless type
        (456508 'move' _indexOfInterest[456493](456511 call iteratorIndex _iterator[456495]))
      }
      ForLoop[456513]
      {
        unknown i[456516] "index var" "insert auto destroy"
        (475813 'end of statement')
        (456518 'move' i[456516] _indexOfInterest[456493])
        (475814 'end of statement' i[456516])
        unknown yret[510782] "YVV" "temp"
        (510785 'move' yret[510782](510784 'deref' i[456516]))
        (510787 yield yret[510782])
        (475816 'end of statement' i[456516])
        label _continueLabel[456523]
        _indexOfInterest[456493]
        _iterator[456495]
      }
      label _breakLabel[456525]
    }
    (510780 return ret[510778])
  }
  function chpl_direct_range_iter[456391](arg low[456398] :
  (456395 call uint(64)[115] 16), arg high[456404] :
  (456402 call uint(64)[115] 16), arg stride[456410] :
  (456408 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510791] "RVV" "temp"
    unknown call_tmp[624132] "expr temp" "maybe param" "maybe type" "temp"
    (624135 'move' call_tmp[624132](456417 call chpl_build_bounded_range low[456398] high[456404]))
    unknown call_tmp[624137] "maybe param" "maybe type" "temp"
    (624140 'move' call_tmp[624137](456415 call chpl_by call_tmp[624132] stride[456410]))
    const r[456413] "dead at end of block" "const" "insert auto destroy"
    (541266 'init var' r[456413] call_tmp[624137])
    (456422 'end of statement')
    {
      unknown _indexOfInterest[456424] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456426] "expr temp" "temp"
      (456428 'move' _iterator[456426](456431 call _getIterator r[456413]))
      Defer
      {
        {
          (456435 call _freeIterator _iterator[456426])
        }
      }
      { scopeless type
        (456439 'move' _indexOfInterest[456424](456442 call iteratorIndex _iterator[456426]))
      }
      ForLoop[456444]
      {
        unknown i[456447] "index var" "insert auto destroy"
        (475819 'end of statement')
        (456449 'move' i[456447] _indexOfInterest[456424])
        (475820 'end of statement' i[456447])
        unknown yret[510795] "YVV" "temp"
        (510798 'move' yret[510795](510797 'deref' i[456447]))
        (510800 yield yret[510795])
        (475822 'end of statement' i[456447])
        label _continueLabel[456454]
        _indexOfInterest[456424]
        _iterator[456426]
      }
      label _breakLabel[456456]
    }
    (510793 return ret[510791])
  }
  function chpl_direct_range_iter[456322](arg low[456329] :
  (456326 call uint(64)[115] 8), arg high[456335] :
  (456333 call uint(64)[115] 8), arg stride[456341] :
  (456339 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510804] "RVV" "temp"
    unknown call_tmp[624142] "expr temp" "maybe param" "maybe type" "temp"
    (624145 'move' call_tmp[624142](456348 call chpl_build_bounded_range low[456329] high[456335]))
    unknown call_tmp[624147] "maybe param" "maybe type" "temp"
    (624150 'move' call_tmp[624147](456346 call chpl_by call_tmp[624142] stride[456341]))
    const r[456344] "dead at end of block" "const" "insert auto destroy"
    (541268 'init var' r[456344] call_tmp[624147])
    (456353 'end of statement')
    {
      unknown _indexOfInterest[456355] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456357] "expr temp" "temp"
      (456359 'move' _iterator[456357](456362 call _getIterator r[456344]))
      Defer
      {
        {
          (456366 call _freeIterator _iterator[456357])
        }
      }
      { scopeless type
        (456370 'move' _indexOfInterest[456355](456373 call iteratorIndex _iterator[456357]))
      }
      ForLoop[456375]
      {
        unknown i[456378] "index var" "insert auto destroy"
        (475825 'end of statement')
        (456380 'move' i[456378] _indexOfInterest[456355])
        (475826 'end of statement' i[456378])
        unknown yret[510808] "YVV" "temp"
        (510811 'move' yret[510808](510810 'deref' i[456378]))
        (510813 yield yret[510808])
        (475828 'end of statement' i[456378])
        label _continueLabel[456385]
        _indexOfInterest[456355]
        _iterator[456357]
      }
      label _breakLabel[456387]
    }
    (510806 return ret[510804])
  }
  function chpl_direct_range_iter[73906](arg low[73903]:enum[187](?), arg high[73909]:enum[187](?), arg stride[73913]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510817] "RVV" "temp"
    unknown call_tmp[624152] "expr temp" "maybe param" "maybe type" "temp"
    (624155 'move' call_tmp[624152](73918 call chpl_build_bounded_range low[73903] high[73909]))
    unknown call_tmp[624157] "maybe param" "maybe type" "temp"
    (624160 'move' call_tmp[624157](73921 call chpl_by call_tmp[624152] stride[73913]))
    const r[73923] "dead at end of block" "const" "insert auto destroy"
    (541270 'init var' r[73923] call_tmp[624157])
    (73926 'end of statement')
    {
      unknown _indexOfInterest[73933] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[73934] "expr temp" "temp"
      (73943 'move' _iterator[73934](73941 call _getIterator r[73923]))
      Defer
      {
        {
          (73959 call _freeIterator _iterator[73934])
        }
      }
      { scopeless type
        (73948 'move' _indexOfInterest[73933](73945 call iteratorIndex _iterator[73934]))
      }
      ForLoop[73935]
      {
        unknown i[73952] "index var" "insert auto destroy"
        (475831 'end of statement')
        (73954 'move' i[73952] _indexOfInterest[73933])
        (475832 'end of statement' i[73952])
        unknown yret[510821] "YVV" "temp"
        (510824 'move' yret[510821](510823 'deref' i[73952]))
        (510826 yield yret[510821])
        (475834 'end of statement' i[73952])
        label _continueLabel[73938]
        _indexOfInterest[73933]
        _iterator[73934]
      }
      label _breakLabel[73939]
    }
    (510819 return ret[510817])
  }
  function chpl_direct_range_iter[73974](arg low[73971]:bool[10], arg high[73977]:bool[10], arg stride[73981]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510830] "RVV" "temp"
    unknown call_tmp[624162] "expr temp" "maybe param" "maybe type" "temp"
    (624165 'move' call_tmp[624162](73986 call chpl_build_bounded_range low[73971] high[73977]))
    unknown call_tmp[624167] "maybe param" "maybe type" "temp"
    (624170 'move' call_tmp[624167](73989 call chpl_by call_tmp[624162] stride[73981]))
    const r[73991] "dead at end of block" "const" "insert auto destroy"
    (541272 'init var' r[73991] call_tmp[624167])
    (73994 'end of statement')
    {
      unknown _indexOfInterest[74001] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[74002] "expr temp" "temp"
      (74011 'move' _iterator[74002](74009 call _getIterator r[73991]))
      Defer
      {
        {
          (74027 call _freeIterator _iterator[74002])
        }
      }
      { scopeless type
        (74016 'move' _indexOfInterest[74001](74013 call iteratorIndex _iterator[74002]))
      }
      ForLoop[74003]
      {
        unknown i[74020] "index var" "insert auto destroy"
        (475837 'end of statement')
        (74022 'move' i[74020] _indexOfInterest[74001])
        (475838 'end of statement' i[74020])
        unknown yret[510834] "YVV" "temp"
        (510837 'move' yret[510834](510836 'deref' i[74020]))
        (510839 yield yret[510834])
        (475840 'end of statement' i[74020])
        label _continueLabel[74006]
        _indexOfInterest[74001]
        _iterator[74002]
      }
      label _breakLabel[74007]
    }
    (510832 return ret[510830])
  }
  function chpl_direct_range_iter[456787](arg low[456794] :
  (456791 call int(64)[13] 64), arg high[456800] :
  (456798 call int(64)[13] 64), param arg stride[456806] :
  (456804 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510843] "RVV" "temp"
    {
      unknown _indexOfInterest[456810] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456812] "expr temp" "temp"
      unknown call_tmp[624172] "expr temp" "maybe param" "maybe type" "temp"
      (624175 'move' call_tmp[624172](456819 call chpl_direct_param_stride_range_iter low[456794] high[456800] stride[456806]))
      (456814 'move' _iterator[456812](456817 call _getIterator call_tmp[624172]))
      Defer
      {
        {
          (456825 call _freeIterator _iterator[456812])
        }
      }
      { scopeless type
        (456829 'move' _indexOfInterest[456810](456832 call iteratorIndex _iterator[456812]))
      }
      ForLoop[456834]
      {
        unknown i[456837] "index var" "insert auto destroy"
        (475843 'end of statement')
        (456839 'move' i[456837] _indexOfInterest[456810])
        (475844 'end of statement' i[456837])
        unknown yret[510847] "YVV" "temp"
        (510850 'move' yret[510847](510849 'deref' i[456837]))
        (510852 yield yret[510847])
        (475846 'end of statement' i[456837])
        label _continueLabel[456844]
        _indexOfInterest[456810]
        _iterator[456812]
      }
      label _breakLabel[456846]
    }
    (510845 return ret[510843])
  }
  function chpl_direct_range_iter[456724](arg low[456731] :
  (456728 call int(64)[13] 32), arg high[456737] :
  (456735 call int(64)[13] 32), param arg stride[456743] :
  (456741 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510856] "RVV" "temp"
    {
      unknown _indexOfInterest[456747] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456749] "expr temp" "temp"
      unknown call_tmp[624177] "expr temp" "maybe param" "maybe type" "temp"
      (624180 'move' call_tmp[624177](456756 call chpl_direct_param_stride_range_iter low[456731] high[456737] stride[456743]))
      (456751 'move' _iterator[456749](456754 call _getIterator call_tmp[624177]))
      Defer
      {
        {
          (456762 call _freeIterator _iterator[456749])
        }
      }
      { scopeless type
        (456766 'move' _indexOfInterest[456747](456769 call iteratorIndex _iterator[456749]))
      }
      ForLoop[456771]
      {
        unknown i[456774] "index var" "insert auto destroy"
        (475849 'end of statement')
        (456776 'move' i[456774] _indexOfInterest[456747])
        (475850 'end of statement' i[456774])
        unknown yret[510860] "YVV" "temp"
        (510863 'move' yret[510860](510862 'deref' i[456774]))
        (510865 yield yret[510860])
        (475852 'end of statement' i[456774])
        label _continueLabel[456781]
        _indexOfInterest[456747]
        _iterator[456749]
      }
      label _breakLabel[456783]
    }
    (510858 return ret[510856])
  }
  function chpl_direct_range_iter[456661](arg low[456668] :
  (456665 call int(64)[13] 16), arg high[456674] :
  (456672 call int(64)[13] 16), param arg stride[456680] :
  (456678 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510869] "RVV" "temp"
    {
      unknown _indexOfInterest[456684] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456686] "expr temp" "temp"
      unknown call_tmp[624182] "expr temp" "maybe param" "maybe type" "temp"
      (624185 'move' call_tmp[624182](456693 call chpl_direct_param_stride_range_iter low[456668] high[456674] stride[456680]))
      (456688 'move' _iterator[456686](456691 call _getIterator call_tmp[624182]))
      Defer
      {
        {
          (456699 call _freeIterator _iterator[456686])
        }
      }
      { scopeless type
        (456703 'move' _indexOfInterest[456684](456706 call iteratorIndex _iterator[456686]))
      }
      ForLoop[456708]
      {
        unknown i[456711] "index var" "insert auto destroy"
        (475855 'end of statement')
        (456713 'move' i[456711] _indexOfInterest[456684])
        (475856 'end of statement' i[456711])
        unknown yret[510873] "YVV" "temp"
        (510876 'move' yret[510873](510875 'deref' i[456711]))
        (510878 yield yret[510873])
        (475858 'end of statement' i[456711])
        label _continueLabel[456718]
        _indexOfInterest[456684]
        _iterator[456686]
      }
      label _breakLabel[456720]
    }
    (510871 return ret[510869])
  }
  function chpl_direct_range_iter[456598](arg low[456605] :
  (456602 call int(64)[13] 8), arg high[456611] :
  (456609 call int(64)[13] 8), param arg stride[456617] :
  (456615 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510882] "RVV" "temp"
    {
      unknown _indexOfInterest[456621] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456623] "expr temp" "temp"
      unknown call_tmp[624187] "expr temp" "maybe param" "maybe type" "temp"
      (624190 'move' call_tmp[624187](456630 call chpl_direct_param_stride_range_iter low[456605] high[456611] stride[456617]))
      (456625 'move' _iterator[456623](456628 call _getIterator call_tmp[624187]))
      Defer
      {
        {
          (456636 call _freeIterator _iterator[456623])
        }
      }
      { scopeless type
        (456640 'move' _indexOfInterest[456621](456643 call iteratorIndex _iterator[456623]))
      }
      ForLoop[456645]
      {
        unknown i[456648] "index var" "insert auto destroy"
        (475861 'end of statement')
        (456650 'move' i[456648] _indexOfInterest[456621])
        (475862 'end of statement' i[456648])
        unknown yret[510886] "YVV" "temp"
        (510889 'move' yret[510886](510888 'deref' i[456648]))
        (510891 yield yret[510886])
        (475864 'end of statement' i[456648])
        label _continueLabel[456655]
        _indexOfInterest[456621]
        _iterator[456623]
      }
      label _breakLabel[456657]
    }
    (510884 return ret[510882])
  }
  function chpl_direct_range_iter[457039](arg low[457046] :
  (457043 call uint(64)[115] 64), arg high[457052] :
  (457050 call uint(64)[115] 64), param arg stride[457058] :
  (457056 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510895] "RVV" "temp"
    {
      unknown _indexOfInterest[457062] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457064] "expr temp" "temp"
      unknown call_tmp[624192] "expr temp" "maybe param" "maybe type" "temp"
      (624195 'move' call_tmp[624192](457071 call chpl_direct_param_stride_range_iter low[457046] high[457052] stride[457058]))
      (457066 'move' _iterator[457064](457069 call _getIterator call_tmp[624192]))
      Defer
      {
        {
          (457077 call _freeIterator _iterator[457064])
        }
      }
      { scopeless type
        (457081 'move' _indexOfInterest[457062](457084 call iteratorIndex _iterator[457064]))
      }
      ForLoop[457086]
      {
        unknown i[457089] "index var" "insert auto destroy"
        (475867 'end of statement')
        (457091 'move' i[457089] _indexOfInterest[457062])
        (475868 'end of statement' i[457089])
        unknown yret[510899] "YVV" "temp"
        (510902 'move' yret[510899](510901 'deref' i[457089]))
        (510904 yield yret[510899])
        (475870 'end of statement' i[457089])
        label _continueLabel[457096]
        _indexOfInterest[457062]
        _iterator[457064]
      }
      label _breakLabel[457098]
    }
    (510897 return ret[510895])
  }
  function chpl_direct_range_iter[456976](arg low[456983] :
  (456980 call uint(64)[115] 32), arg high[456989] :
  (456987 call uint(64)[115] 32), param arg stride[456995] :
  (456993 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510908] "RVV" "temp"
    {
      unknown _indexOfInterest[456999] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457001] "expr temp" "temp"
      unknown call_tmp[624197] "expr temp" "maybe param" "maybe type" "temp"
      (624200 'move' call_tmp[624197](457008 call chpl_direct_param_stride_range_iter low[456983] high[456989] stride[456995]))
      (457003 'move' _iterator[457001](457006 call _getIterator call_tmp[624197]))
      Defer
      {
        {
          (457014 call _freeIterator _iterator[457001])
        }
      }
      { scopeless type
        (457018 'move' _indexOfInterest[456999](457021 call iteratorIndex _iterator[457001]))
      }
      ForLoop[457023]
      {
        unknown i[457026] "index var" "insert auto destroy"
        (475873 'end of statement')
        (457028 'move' i[457026] _indexOfInterest[456999])
        (475874 'end of statement' i[457026])
        unknown yret[510912] "YVV" "temp"
        (510915 'move' yret[510912](510914 'deref' i[457026]))
        (510917 yield yret[510912])
        (475876 'end of statement' i[457026])
        label _continueLabel[457033]
        _indexOfInterest[456999]
        _iterator[457001]
      }
      label _breakLabel[457035]
    }
    (510910 return ret[510908])
  }
  function chpl_direct_range_iter[456913](arg low[456920] :
  (456917 call uint(64)[115] 16), arg high[456926] :
  (456924 call uint(64)[115] 16), param arg stride[456932] :
  (456930 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510921] "RVV" "temp"
    {
      unknown _indexOfInterest[456936] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456938] "expr temp" "temp"
      unknown call_tmp[624202] "expr temp" "maybe param" "maybe type" "temp"
      (624205 'move' call_tmp[624202](456945 call chpl_direct_param_stride_range_iter low[456920] high[456926] stride[456932]))
      (456940 'move' _iterator[456938](456943 call _getIterator call_tmp[624202]))
      Defer
      {
        {
          (456951 call _freeIterator _iterator[456938])
        }
      }
      { scopeless type
        (456955 'move' _indexOfInterest[456936](456958 call iteratorIndex _iterator[456938]))
      }
      ForLoop[456960]
      {
        unknown i[456963] "index var" "insert auto destroy"
        (475879 'end of statement')
        (456965 'move' i[456963] _indexOfInterest[456936])
        (475880 'end of statement' i[456963])
        unknown yret[510925] "YVV" "temp"
        (510928 'move' yret[510925](510927 'deref' i[456963]))
        (510930 yield yret[510925])
        (475882 'end of statement' i[456963])
        label _continueLabel[456970]
        _indexOfInterest[456936]
        _iterator[456938]
      }
      label _breakLabel[456972]
    }
    (510923 return ret[510921])
  }
  function chpl_direct_range_iter[456850](arg low[456857] :
  (456854 call uint(64)[115] 8), arg high[456863] :
  (456861 call uint(64)[115] 8), param arg stride[456869] :
  (456867 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510934] "RVV" "temp"
    {
      unknown _indexOfInterest[456873] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456875] "expr temp" "temp"
      unknown call_tmp[624207] "expr temp" "maybe param" "maybe type" "temp"
      (624210 'move' call_tmp[624207](456882 call chpl_direct_param_stride_range_iter low[456857] high[456863] stride[456869]))
      (456877 'move' _iterator[456875](456880 call _getIterator call_tmp[624207]))
      Defer
      {
        {
          (456888 call _freeIterator _iterator[456875])
        }
      }
      { scopeless type
        (456892 'move' _indexOfInterest[456873](456895 call iteratorIndex _iterator[456875]))
      }
      ForLoop[456897]
      {
        unknown i[456900] "index var" "insert auto destroy"
        (475885 'end of statement')
        (456902 'move' i[456900] _indexOfInterest[456873])
        (475886 'end of statement' i[456900])
        unknown yret[510938] "YVV" "temp"
        (510941 'move' yret[510938](510940 'deref' i[456900]))
        (510943 yield yret[510938])
        (475888 'end of statement' i[456900])
        label _continueLabel[456907]
        _indexOfInterest[456873]
        _iterator[456875]
      }
      label _breakLabel[456909]
    }
    (510936 return ret[510934])
  }
  function chpl_direct_range_iter[74188](arg low[74185]:enum[187](?), arg high[74191]:enum[187](?), param arg stride[74195]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510947] "RVV" "temp"
    unknown call_tmp[624212] "expr temp" "maybe param" "maybe type" "temp"
    (624215 'move' call_tmp[624212](74200 call == stride[74195] 1))
    unknown call_tmp[624217] "expr temp" "maybe param" "maybe type" "temp"
    (624220 'move' call_tmp[624217](74299 call _cond_test call_tmp[624212]))
    if call_tmp[624217]
    {
      unknown call_tmp[624222] "maybe param" "maybe type" "temp"
      (624225 'move' call_tmp[624222](74204 call chpl_build_bounded_range low[74185] high[74191]))
      const r[74206] "dead at end of block" "const" "insert auto destroy"
      (541274 'init var' r[74206] call_tmp[624222])
      (74209 'end of statement')
      {
        unknown _indexOfInterest[74216] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74217] "expr temp" "temp"
        (74226 'move' _iterator[74217](74224 call _getIterator r[74206]))
        Defer
        {
          {
            (74242 call _freeIterator _iterator[74217])
          }
        }
        { scopeless type
          (74231 'move' _indexOfInterest[74216](74228 call iteratorIndex _iterator[74217]))
        }
        ForLoop[74218]
        {
          unknown i[74235] "index var" "insert auto destroy"
          (475891 'end of statement')
          (74237 'move' i[74235] _indexOfInterest[74216])
          (475892 'end of statement' i[74235])
          unknown yret[510951] "YVV" "temp"
          (510954 'move' yret[510951](510953 'deref' i[74235]))
          (510956 yield yret[510951])
          (475894 'end of statement' i[74235])
          label _continueLabel[74221]
          _indexOfInterest[74216]
          _iterator[74217]
        }
        label _breakLabel[74222]
      }
    }
    {
      unknown call_tmp[624227] "expr temp" "maybe param" "maybe type" "temp"
      (624230 'move' call_tmp[624227](74251 call chpl_build_bounded_range low[74185] high[74191]))
      unknown call_tmp[624232] "maybe param" "maybe type" "temp"
      (624235 'move' call_tmp[624232](74254 call chpl_by call_tmp[624227] stride[74195]))
      const r[74256] "dead at end of block" "const" "insert auto destroy"
      (541276 'init var' r[74256] call_tmp[624232])
      (74259 'end of statement')
      {
        unknown _indexOfInterest[74266] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74267] "expr temp" "temp"
        (74276 'move' _iterator[74267](74274 call _getIterator r[74256]))
        Defer
        {
          {
            (74292 call _freeIterator _iterator[74267])
          }
        }
        { scopeless type
          (74281 'move' _indexOfInterest[74266](74278 call iteratorIndex _iterator[74267]))
        }
        ForLoop[74268]
        {
          unknown i[74285] "index var" "insert auto destroy"
          (475897 'end of statement')
          (74287 'move' i[74285] _indexOfInterest[74266])
          (475898 'end of statement' i[74285])
          unknown yret[510958] "YVV" "temp"
          (510961 'move' yret[510958](510960 'deref' i[74285]))
          (510963 yield yret[510958])
          (475900 'end of statement' i[74285])
          label _continueLabel[74271]
          _indexOfInterest[74266]
          _iterator[74267]
        }
        label _breakLabel[74272]
      }
    }
    (510949 return ret[510947])
  }
  function chpl_direct_range_iter[74312](arg low[74309]:bool[10], arg high[74315]:bool[10], param arg stride[74319]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510967] "RVV" "temp"
    unknown call_tmp[624237] "expr temp" "maybe param" "maybe type" "temp"
    (624240 'move' call_tmp[624237](74324 call == stride[74319] 1))
    unknown call_tmp[624242] "expr temp" "maybe param" "maybe type" "temp"
    (624245 'move' call_tmp[624242](74423 call _cond_test call_tmp[624237]))
    if call_tmp[624242]
    {
      unknown call_tmp[624247] "maybe param" "maybe type" "temp"
      (624250 'move' call_tmp[624247](74328 call chpl_build_bounded_range low[74309] high[74315]))
      const r[74330] "dead at end of block" "const" "insert auto destroy"
      (541278 'init var' r[74330] call_tmp[624247])
      (74333 'end of statement')
      {
        unknown _indexOfInterest[74340] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74341] "expr temp" "temp"
        (74350 'move' _iterator[74341](74348 call _getIterator r[74330]))
        Defer
        {
          {
            (74366 call _freeIterator _iterator[74341])
          }
        }
        { scopeless type
          (74355 'move' _indexOfInterest[74340](74352 call iteratorIndex _iterator[74341]))
        }
        ForLoop[74342]
        {
          unknown i[74359] "index var" "insert auto destroy"
          (475903 'end of statement')
          (74361 'move' i[74359] _indexOfInterest[74340])
          (475904 'end of statement' i[74359])
          unknown yret[510971] "YVV" "temp"
          (510974 'move' yret[510971](510973 'deref' i[74359]))
          (510976 yield yret[510971])
          (475906 'end of statement' i[74359])
          label _continueLabel[74345]
          _indexOfInterest[74340]
          _iterator[74341]
        }
        label _breakLabel[74346]
      }
    }
    {
      unknown call_tmp[624252] "expr temp" "maybe param" "maybe type" "temp"
      (624255 'move' call_tmp[624252](74375 call chpl_build_bounded_range low[74309] high[74315]))
      unknown call_tmp[624257] "maybe param" "maybe type" "temp"
      (624260 'move' call_tmp[624257](74378 call chpl_by call_tmp[624252] stride[74319]))
      const r[74380] "dead at end of block" "const" "insert auto destroy"
      (541280 'init var' r[74380] call_tmp[624257])
      (74383 'end of statement')
      {
        unknown _indexOfInterest[74390] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74391] "expr temp" "temp"
        (74400 'move' _iterator[74391](74398 call _getIterator r[74380]))
        Defer
        {
          {
            (74416 call _freeIterator _iterator[74391])
          }
        }
        { scopeless type
          (74405 'move' _indexOfInterest[74390](74402 call iteratorIndex _iterator[74391]))
        }
        ForLoop[74392]
        {
          unknown i[74409] "index var" "insert auto destroy"
          (475909 'end of statement')
          (74411 'move' i[74409] _indexOfInterest[74390])
          (475910 'end of statement' i[74409])
          unknown yret[510978] "YVV" "temp"
          (510981 'move' yret[510978](510980 'deref' i[74409]))
          (510983 yield yret[510978])
          (475912 'end of statement' i[74409])
          label _continueLabel[74395]
          _indexOfInterest[74390]
          _iterator[74391]
        }
        label _breakLabel[74396]
      }
    }
    (510969 return ret[510967])
  }
  function chpl_direct_range_iter[457291](arg low[457298] :
  (457295 call int(64)[13] 64), arg high[457304] :
  (457302 call int(64)[13] 64), arg stride[457310] :
  (457308 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510987] "RVV" "temp"
    {
      unknown _indexOfInterest[457314] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457316] "expr temp" "temp"
      unknown call_tmp[624262] "expr temp" "maybe param" "maybe type" "temp"
      (624265 'move' call_tmp[624262](457323 call chpl_direct_pos_stride_range_iter low[457298] high[457304] stride[457310]))
      (457318 'move' _iterator[457316](457321 call _getIterator call_tmp[624262]))
      Defer
      {
        {
          (457329 call _freeIterator _iterator[457316])
        }
      }
      { scopeless type
        (457333 'move' _indexOfInterest[457314](457336 call iteratorIndex _iterator[457316]))
      }
      ForLoop[457338]
      {
        unknown i[457341] "index var" "insert auto destroy"
        (475915 'end of statement')
        (457343 'move' i[457341] _indexOfInterest[457314])
        (475916 'end of statement' i[457341])
        unknown yret[510991] "YVV" "temp"
        (510994 'move' yret[510991](510993 'deref' i[457341]))
        (510996 yield yret[510991])
        (475918 'end of statement' i[457341])
        label _continueLabel[457348]
        _indexOfInterest[457314]
        _iterator[457316]
      }
      label _breakLabel[457350]
    }
    (510989 return ret[510987])
  }
  function chpl_direct_range_iter[457228](arg low[457235] :
  (457232 call int(64)[13] 32), arg high[457241] :
  (457239 call int(64)[13] 32), arg stride[457247] :
  (457245 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511000] "RVV" "temp"
    {
      unknown _indexOfInterest[457251] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457253] "expr temp" "temp"
      unknown call_tmp[624267] "expr temp" "maybe param" "maybe type" "temp"
      (624270 'move' call_tmp[624267](457260 call chpl_direct_pos_stride_range_iter low[457235] high[457241] stride[457247]))
      (457255 'move' _iterator[457253](457258 call _getIterator call_tmp[624267]))
      Defer
      {
        {
          (457266 call _freeIterator _iterator[457253])
        }
      }
      { scopeless type
        (457270 'move' _indexOfInterest[457251](457273 call iteratorIndex _iterator[457253]))
      }
      ForLoop[457275]
      {
        unknown i[457278] "index var" "insert auto destroy"
        (475921 'end of statement')
        (457280 'move' i[457278] _indexOfInterest[457251])
        (475922 'end of statement' i[457278])
        unknown yret[511004] "YVV" "temp"
        (511007 'move' yret[511004](511006 'deref' i[457278]))
        (511009 yield yret[511004])
        (475924 'end of statement' i[457278])
        label _continueLabel[457285]
        _indexOfInterest[457251]
        _iterator[457253]
      }
      label _breakLabel[457287]
    }
    (511002 return ret[511000])
  }
  function chpl_direct_range_iter[457165](arg low[457172] :
  (457169 call int(64)[13] 16), arg high[457178] :
  (457176 call int(64)[13] 16), arg stride[457184] :
  (457182 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511013] "RVV" "temp"
    {
      unknown _indexOfInterest[457188] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457190] "expr temp" "temp"
      unknown call_tmp[624272] "expr temp" "maybe param" "maybe type" "temp"
      (624275 'move' call_tmp[624272](457197 call chpl_direct_pos_stride_range_iter low[457172] high[457178] stride[457184]))
      (457192 'move' _iterator[457190](457195 call _getIterator call_tmp[624272]))
      Defer
      {
        {
          (457203 call _freeIterator _iterator[457190])
        }
      }
      { scopeless type
        (457207 'move' _indexOfInterest[457188](457210 call iteratorIndex _iterator[457190]))
      }
      ForLoop[457212]
      {
        unknown i[457215] "index var" "insert auto destroy"
        (475927 'end of statement')
        (457217 'move' i[457215] _indexOfInterest[457188])
        (475928 'end of statement' i[457215])
        unknown yret[511017] "YVV" "temp"
        (511020 'move' yret[511017](511019 'deref' i[457215]))
        (511022 yield yret[511017])
        (475930 'end of statement' i[457215])
        label _continueLabel[457222]
        _indexOfInterest[457188]
        _iterator[457190]
      }
      label _breakLabel[457224]
    }
    (511015 return ret[511013])
  }
  function chpl_direct_range_iter[457102](arg low[457109] :
  (457106 call int(64)[13] 8), arg high[457115] :
  (457113 call int(64)[13] 8), arg stride[457121] :
  (457119 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511026] "RVV" "temp"
    {
      unknown _indexOfInterest[457125] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457127] "expr temp" "temp"
      unknown call_tmp[624277] "expr temp" "maybe param" "maybe type" "temp"
      (624280 'move' call_tmp[624277](457134 call chpl_direct_pos_stride_range_iter low[457109] high[457115] stride[457121]))
      (457129 'move' _iterator[457127](457132 call _getIterator call_tmp[624277]))
      Defer
      {
        {
          (457140 call _freeIterator _iterator[457127])
        }
      }
      { scopeless type
        (457144 'move' _indexOfInterest[457125](457147 call iteratorIndex _iterator[457127]))
      }
      ForLoop[457149]
      {
        unknown i[457152] "index var" "insert auto destroy"
        (475933 'end of statement')
        (457154 'move' i[457152] _indexOfInterest[457125])
        (475934 'end of statement' i[457152])
        unknown yret[511030] "YVV" "temp"
        (511033 'move' yret[511030](511032 'deref' i[457152]))
        (511035 yield yret[511030])
        (475936 'end of statement' i[457152])
        label _continueLabel[457159]
        _indexOfInterest[457125]
        _iterator[457127]
      }
      label _breakLabel[457161]
    }
    (511028 return ret[511026])
  }
  function chpl_direct_range_iter[457543](arg low[457550] :
  (457547 call uint(64)[115] 64), arg high[457556] :
  (457554 call uint(64)[115] 64), arg stride[457562] :
  (457560 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511039] "RVV" "temp"
    {
      unknown _indexOfInterest[457566] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457568] "expr temp" "temp"
      unknown call_tmp[624282] "expr temp" "maybe param" "maybe type" "temp"
      (624285 'move' call_tmp[624282](457575 call chpl_direct_pos_stride_range_iter low[457550] high[457556] stride[457562]))
      (457570 'move' _iterator[457568](457573 call _getIterator call_tmp[624282]))
      Defer
      {
        {
          (457581 call _freeIterator _iterator[457568])
        }
      }
      { scopeless type
        (457585 'move' _indexOfInterest[457566](457588 call iteratorIndex _iterator[457568]))
      }
      ForLoop[457590]
      {
        unknown i[457593] "index var" "insert auto destroy"
        (475939 'end of statement')
        (457595 'move' i[457593] _indexOfInterest[457566])
        (475940 'end of statement' i[457593])
        unknown yret[511043] "YVV" "temp"
        (511046 'move' yret[511043](511045 'deref' i[457593]))
        (511048 yield yret[511043])
        (475942 'end of statement' i[457593])
        label _continueLabel[457600]
        _indexOfInterest[457566]
        _iterator[457568]
      }
      label _breakLabel[457602]
    }
    (511041 return ret[511039])
  }
  function chpl_direct_range_iter[457480](arg low[457487] :
  (457484 call uint(64)[115] 32), arg high[457493] :
  (457491 call uint(64)[115] 32), arg stride[457499] :
  (457497 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511052] "RVV" "temp"
    {
      unknown _indexOfInterest[457503] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457505] "expr temp" "temp"
      unknown call_tmp[624287] "expr temp" "maybe param" "maybe type" "temp"
      (624290 'move' call_tmp[624287](457512 call chpl_direct_pos_stride_range_iter low[457487] high[457493] stride[457499]))
      (457507 'move' _iterator[457505](457510 call _getIterator call_tmp[624287]))
      Defer
      {
        {
          (457518 call _freeIterator _iterator[457505])
        }
      }
      { scopeless type
        (457522 'move' _indexOfInterest[457503](457525 call iteratorIndex _iterator[457505]))
      }
      ForLoop[457527]
      {
        unknown i[457530] "index var" "insert auto destroy"
        (475945 'end of statement')
        (457532 'move' i[457530] _indexOfInterest[457503])
        (475946 'end of statement' i[457530])
        unknown yret[511056] "YVV" "temp"
        (511059 'move' yret[511056](511058 'deref' i[457530]))
        (511061 yield yret[511056])
        (475948 'end of statement' i[457530])
        label _continueLabel[457537]
        _indexOfInterest[457503]
        _iterator[457505]
      }
      label _breakLabel[457539]
    }
    (511054 return ret[511052])
  }
  function chpl_direct_range_iter[457417](arg low[457424] :
  (457421 call uint(64)[115] 16), arg high[457430] :
  (457428 call uint(64)[115] 16), arg stride[457436] :
  (457434 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511065] "RVV" "temp"
    {
      unknown _indexOfInterest[457440] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457442] "expr temp" "temp"
      unknown call_tmp[624292] "expr temp" "maybe param" "maybe type" "temp"
      (624295 'move' call_tmp[624292](457449 call chpl_direct_pos_stride_range_iter low[457424] high[457430] stride[457436]))
      (457444 'move' _iterator[457442](457447 call _getIterator call_tmp[624292]))
      Defer
      {
        {
          (457455 call _freeIterator _iterator[457442])
        }
      }
      { scopeless type
        (457459 'move' _indexOfInterest[457440](457462 call iteratorIndex _iterator[457442]))
      }
      ForLoop[457464]
      {
        unknown i[457467] "index var" "insert auto destroy"
        (475951 'end of statement')
        (457469 'move' i[457467] _indexOfInterest[457440])
        (475952 'end of statement' i[457467])
        unknown yret[511069] "YVV" "temp"
        (511072 'move' yret[511069](511071 'deref' i[457467]))
        (511074 yield yret[511069])
        (475954 'end of statement' i[457467])
        label _continueLabel[457474]
        _indexOfInterest[457440]
        _iterator[457442]
      }
      label _breakLabel[457476]
    }
    (511067 return ret[511065])
  }
  function chpl_direct_range_iter[457354](arg low[457361] :
  (457358 call uint(64)[115] 8), arg high[457367] :
  (457365 call uint(64)[115] 8), arg stride[457373] :
  (457371 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511078] "RVV" "temp"
    {
      unknown _indexOfInterest[457377] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457379] "expr temp" "temp"
      unknown call_tmp[624297] "expr temp" "maybe param" "maybe type" "temp"
      (624300 'move' call_tmp[624297](457386 call chpl_direct_pos_stride_range_iter low[457361] high[457367] stride[457373]))
      (457381 'move' _iterator[457379](457384 call _getIterator call_tmp[624297]))
      Defer
      {
        {
          (457392 call _freeIterator _iterator[457379])
        }
      }
      { scopeless type
        (457396 'move' _indexOfInterest[457377](457399 call iteratorIndex _iterator[457379]))
      }
      ForLoop[457401]
      {
        unknown i[457404] "index var" "insert auto destroy"
        (475957 'end of statement')
        (457406 'move' i[457404] _indexOfInterest[457377])
        (475958 'end of statement' i[457404])
        unknown yret[511082] "YVV" "temp"
        (511085 'move' yret[511082](511084 'deref' i[457404]))
        (511087 yield yret[511082])
        (475960 'end of statement' i[457404])
        label _continueLabel[457411]
        _indexOfInterest[457377]
        _iterator[457379]
      }
      label _breakLabel[457413]
    }
    (511080 return ret[511078])
  }
  function chpl_direct_range_iter[457711](arg low[457718] :
  (457715 call int(64)[13] 64), arg high[457724] :
  (457722 call int(64)[13] 64), arg stride[457726]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511091] "RVV" "temp"
    unknown call_tmp[624302] "expr temp" "maybe param" "maybe type" "temp"
    (624305 'move' call_tmp[624302](457736 call int(64)[13] 64))
    unknown call_tmp[624307] "expr temp" "maybe param" "maybe type" "temp"
    (624310 'move' call_tmp[624307](457733 call _cast string[26] call_tmp[624302]))
    unknown call_tmp[624312] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624315 'move' call_tmp[624312](457742 'typeof' stride[457726]))
    unknown call_tmp[624317] "expr temp" "maybe param" "maybe type" "temp"
    (624320 'move' call_tmp[624317](457740 call _cast string[26] call_tmp[624312]))
    (457730 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624307] " using a step of type " call_tmp[624317])
    (511093 return ret[511091])
  }
  function chpl_direct_range_iter[457676](arg low[457683] :
  (457680 call int(64)[13] 32), arg high[457689] :
  (457687 call int(64)[13] 32), arg stride[457691]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511097] "RVV" "temp"
    unknown call_tmp[624322] "expr temp" "maybe param" "maybe type" "temp"
    (624325 'move' call_tmp[624322](457701 call int(64)[13] 32))
    unknown call_tmp[624327] "expr temp" "maybe param" "maybe type" "temp"
    (624330 'move' call_tmp[624327](457698 call _cast string[26] call_tmp[624322]))
    unknown call_tmp[624332] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624335 'move' call_tmp[624332](457707 'typeof' stride[457691]))
    unknown call_tmp[624337] "expr temp" "maybe param" "maybe type" "temp"
    (624340 'move' call_tmp[624337](457705 call _cast string[26] call_tmp[624332]))
    (457695 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624327] " using a step of type " call_tmp[624337])
    (511099 return ret[511097])
  }
  function chpl_direct_range_iter[457641](arg low[457648] :
  (457645 call int(64)[13] 16), arg high[457654] :
  (457652 call int(64)[13] 16), arg stride[457656]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511103] "RVV" "temp"
    unknown call_tmp[624342] "expr temp" "maybe param" "maybe type" "temp"
    (624345 'move' call_tmp[624342](457666 call int(64)[13] 16))
    unknown call_tmp[624347] "expr temp" "maybe param" "maybe type" "temp"
    (624350 'move' call_tmp[624347](457663 call _cast string[26] call_tmp[624342]))
    unknown call_tmp[624352] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624355 'move' call_tmp[624352](457672 'typeof' stride[457656]))
    unknown call_tmp[624357] "expr temp" "maybe param" "maybe type" "temp"
    (624360 'move' call_tmp[624357](457670 call _cast string[26] call_tmp[624352]))
    (457660 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624347] " using a step of type " call_tmp[624357])
    (511105 return ret[511103])
  }
  function chpl_direct_range_iter[457606](arg low[457613] :
  (457610 call int(64)[13] 8), arg high[457619] :
  (457617 call int(64)[13] 8), arg stride[457621]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511109] "RVV" "temp"
    unknown call_tmp[624362] "expr temp" "maybe param" "maybe type" "temp"
    (624365 'move' call_tmp[624362](457631 call int(64)[13] 8))
    unknown call_tmp[624367] "expr temp" "maybe param" "maybe type" "temp"
    (624370 'move' call_tmp[624367](457628 call _cast string[26] call_tmp[624362]))
    unknown call_tmp[624372] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624375 'move' call_tmp[624372](457637 'typeof' stride[457621]))
    unknown call_tmp[624377] "expr temp" "maybe param" "maybe type" "temp"
    (624380 'move' call_tmp[624377](457635 call _cast string[26] call_tmp[624372]))
    (457625 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624367] " using a step of type " call_tmp[624377])
    (511111 return ret[511109])
  }
  function chpl_direct_range_iter[457851](arg low[457858] :
  (457855 call uint(64)[115] 64), arg high[457864] :
  (457862 call uint(64)[115] 64), arg stride[457866]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511115] "RVV" "temp"
    unknown call_tmp[624382] "expr temp" "maybe param" "maybe type" "temp"
    (624385 'move' call_tmp[624382](457876 call uint(64)[115] 64))
    unknown call_tmp[624387] "expr temp" "maybe param" "maybe type" "temp"
    (624390 'move' call_tmp[624387](457873 call _cast string[26] call_tmp[624382]))
    unknown call_tmp[624392] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624395 'move' call_tmp[624392](457882 'typeof' stride[457866]))
    unknown call_tmp[624397] "expr temp" "maybe param" "maybe type" "temp"
    (624400 'move' call_tmp[624397](457880 call _cast string[26] call_tmp[624392]))
    (457870 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624387] " using a step of type " call_tmp[624397])
    (511117 return ret[511115])
  }
  function chpl_direct_range_iter[457816](arg low[457823] :
  (457820 call uint(64)[115] 32), arg high[457829] :
  (457827 call uint(64)[115] 32), arg stride[457831]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511121] "RVV" "temp"
    unknown call_tmp[624402] "expr temp" "maybe param" "maybe type" "temp"
    (624405 'move' call_tmp[624402](457841 call uint(64)[115] 32))
    unknown call_tmp[624407] "expr temp" "maybe param" "maybe type" "temp"
    (624410 'move' call_tmp[624407](457838 call _cast string[26] call_tmp[624402]))
    unknown call_tmp[624412] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624415 'move' call_tmp[624412](457847 'typeof' stride[457831]))
    unknown call_tmp[624417] "expr temp" "maybe param" "maybe type" "temp"
    (624420 'move' call_tmp[624417](457845 call _cast string[26] call_tmp[624412]))
    (457835 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624407] " using a step of type " call_tmp[624417])
    (511123 return ret[511121])
  }
  function chpl_direct_range_iter[457781](arg low[457788] :
  (457785 call uint(64)[115] 16), arg high[457794] :
  (457792 call uint(64)[115] 16), arg stride[457796]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511127] "RVV" "temp"
    unknown call_tmp[624422] "expr temp" "maybe param" "maybe type" "temp"
    (624425 'move' call_tmp[624422](457806 call uint(64)[115] 16))
    unknown call_tmp[624427] "expr temp" "maybe param" "maybe type" "temp"
    (624430 'move' call_tmp[624427](457803 call _cast string[26] call_tmp[624422]))
    unknown call_tmp[624432] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624435 'move' call_tmp[624432](457812 'typeof' stride[457796]))
    unknown call_tmp[624437] "expr temp" "maybe param" "maybe type" "temp"
    (624440 'move' call_tmp[624437](457810 call _cast string[26] call_tmp[624432]))
    (457800 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624427] " using a step of type " call_tmp[624437])
    (511129 return ret[511127])
  }
  function chpl_direct_range_iter[457746](arg low[457753] :
  (457750 call uint(64)[115] 8), arg high[457759] :
  (457757 call uint(64)[115] 8), arg stride[457761]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511133] "RVV" "temp"
    unknown call_tmp[624442] "expr temp" "maybe param" "maybe type" "temp"
    (624445 'move' call_tmp[624442](457771 call uint(64)[115] 8))
    unknown call_tmp[624447] "expr temp" "maybe param" "maybe type" "temp"
    (624450 'move' call_tmp[624447](457768 call _cast string[26] call_tmp[624442]))
    unknown call_tmp[624452] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624455 'move' call_tmp[624452](457777 'typeof' stride[457761]))
    unknown call_tmp[624457] "expr temp" "maybe param" "maybe type" "temp"
    (624460 'move' call_tmp[624457](457775 call _cast string[26] call_tmp[624452]))
    (457765 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624447] " using a step of type " call_tmp[624457])
    (511135 return ret[511133])
  }
  function chpl_direct_range_iter[74664](arg low[74662]:_any[178](?), arg high[74666]:_any[178](?), arg stride[74668]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511139] "RVV" "temp"
    (74673 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (511141 return ret[511139])
  }
  function chpl_direct_counted_range_iter[458054](arg low[458061] :
  (458058 call int(64)[13] 64), arg count[458067] :
  (458065 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511145] "RVV" "temp"
    {
      unknown _indexOfInterest[458071] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458073] "expr temp" "temp"
      unknown call_tmp[624462] "expr temp" "maybe param" "maybe type" "temp"
      (624465 'move' call_tmp[624462](458080 call chpl_direct_counted_range_iter_helper low[458061] count[458067]))
      (458075 'move' _iterator[458073](458078 call _getIterator call_tmp[624462]))
      Defer
      {
        {
          (458085 call _freeIterator _iterator[458073])
        }
      }
      { scopeless type
        (458089 'move' _indexOfInterest[458071](458092 call iteratorIndex _iterator[458073]))
      }
      ForLoop[458094]
      {
        unknown i[458097] "index var" "insert auto destroy"
        (475972 'end of statement')
        (458099 'move' i[458097] _indexOfInterest[458071])
        (475973 'end of statement' i[458097])
        unknown yret[511149] "YVV" "temp"
        (511152 'move' yret[511149](511151 'deref' i[458097]))
        (511154 yield yret[511149])
        (475975 'end of statement' i[458097])
        label _continueLabel[458104]
        _indexOfInterest[458071]
        _iterator[458073]
      }
      label _breakLabel[458106]
    }
    (511147 return ret[511145])
  }
  function chpl_direct_counted_range_iter[457998](arg low[458005] :
  (458002 call int(64)[13] 32), arg count[458011] :
  (458009 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511158] "RVV" "temp"
    {
      unknown _indexOfInterest[458015] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458017] "expr temp" "temp"
      unknown call_tmp[624467] "expr temp" "maybe param" "maybe type" "temp"
      (624470 'move' call_tmp[624467](458024 call chpl_direct_counted_range_iter_helper low[458005] count[458011]))
      (458019 'move' _iterator[458017](458022 call _getIterator call_tmp[624467]))
      Defer
      {
        {
          (458029 call _freeIterator _iterator[458017])
        }
      }
      { scopeless type
        (458033 'move' _indexOfInterest[458015](458036 call iteratorIndex _iterator[458017]))
      }
      ForLoop[458038]
      {
        unknown i[458041] "index var" "insert auto destroy"
        (475978 'end of statement')
        (458043 'move' i[458041] _indexOfInterest[458015])
        (475979 'end of statement' i[458041])
        unknown yret[511162] "YVV" "temp"
        (511165 'move' yret[511162](511164 'deref' i[458041]))
        (511167 yield yret[511162])
        (475981 'end of statement' i[458041])
        label _continueLabel[458048]
        _indexOfInterest[458015]
        _iterator[458017]
      }
      label _breakLabel[458050]
    }
    (511160 return ret[511158])
  }
  function chpl_direct_counted_range_iter[457942](arg low[457949] :
  (457946 call int(64)[13] 16), arg count[457955] :
  (457953 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511171] "RVV" "temp"
    {
      unknown _indexOfInterest[457959] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457961] "expr temp" "temp"
      unknown call_tmp[624472] "expr temp" "maybe param" "maybe type" "temp"
      (624475 'move' call_tmp[624472](457968 call chpl_direct_counted_range_iter_helper low[457949] count[457955]))
      (457963 'move' _iterator[457961](457966 call _getIterator call_tmp[624472]))
      Defer
      {
        {
          (457973 call _freeIterator _iterator[457961])
        }
      }
      { scopeless type
        (457977 'move' _indexOfInterest[457959](457980 call iteratorIndex _iterator[457961]))
      }
      ForLoop[457982]
      {
        unknown i[457985] "index var" "insert auto destroy"
        (475984 'end of statement')
        (457987 'move' i[457985] _indexOfInterest[457959])
        (475985 'end of statement' i[457985])
        unknown yret[511175] "YVV" "temp"
        (511178 'move' yret[511175](511177 'deref' i[457985]))
        (511180 yield yret[511175])
        (475987 'end of statement' i[457985])
        label _continueLabel[457992]
        _indexOfInterest[457959]
        _iterator[457961]
      }
      label _breakLabel[457994]
    }
    (511173 return ret[511171])
  }
  function chpl_direct_counted_range_iter[457886](arg low[457893] :
  (457890 call int(64)[13] 8), arg count[457899] :
  (457897 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511184] "RVV" "temp"
    {
      unknown _indexOfInterest[457903] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457905] "expr temp" "temp"
      unknown call_tmp[624477] "expr temp" "maybe param" "maybe type" "temp"
      (624480 'move' call_tmp[624477](457912 call chpl_direct_counted_range_iter_helper low[457893] count[457899]))
      (457907 'move' _iterator[457905](457910 call _getIterator call_tmp[624477]))
      Defer
      {
        {
          (457917 call _freeIterator _iterator[457905])
        }
      }
      { scopeless type
        (457921 'move' _indexOfInterest[457903](457924 call iteratorIndex _iterator[457905]))
      }
      ForLoop[457926]
      {
        unknown i[457929] "index var" "insert auto destroy"
        (475990 'end of statement')
        (457931 'move' i[457929] _indexOfInterest[457903])
        (475991 'end of statement' i[457929])
        unknown yret[511188] "YVV" "temp"
        (511191 'move' yret[511188](511190 'deref' i[457929]))
        (511193 yield yret[511188])
        (475993 'end of statement' i[457929])
        label _continueLabel[457936]
        _indexOfInterest[457903]
        _iterator[457905]
      }
      label _breakLabel[457938]
    }
    (511186 return ret[511184])
  }
  function chpl_direct_counted_range_iter[458278](arg low[458285] :
  (458282 call int(64)[13] 64), arg count[458291] :
  (458289 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511197] "RVV" "temp"
    {
      unknown _indexOfInterest[458295] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458297] "expr temp" "temp"
      unknown call_tmp[624482] "expr temp" "maybe param" "maybe type" "temp"
      (624485 'move' call_tmp[624482](458304 call chpl_direct_counted_range_iter_helper low[458285] count[458291]))
      (458299 'move' _iterator[458297](458302 call _getIterator call_tmp[624482]))
      Defer
      {
        {
          (458309 call _freeIterator _iterator[458297])
        }
      }
      { scopeless type
        (458313 'move' _indexOfInterest[458295](458316 call iteratorIndex _iterator[458297]))
      }
      ForLoop[458318]
      {
        unknown i[458321] "index var" "insert auto destroy"
        (475996 'end of statement')
        (458323 'move' i[458321] _indexOfInterest[458295])
        (475997 'end of statement' i[458321])
        unknown yret[511201] "YVV" "temp"
        (511204 'move' yret[511201](511203 'deref' i[458321]))
        (511206 yield yret[511201])
        (475999 'end of statement' i[458321])
        label _continueLabel[458328]
        _indexOfInterest[458295]
        _iterator[458297]
      }
      label _breakLabel[458330]
    }
    (511199 return ret[511197])
  }
  function chpl_direct_counted_range_iter[458222](arg low[458229] :
  (458226 call int(64)[13] 32), arg count[458235] :
  (458233 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511210] "RVV" "temp"
    {
      unknown _indexOfInterest[458239] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458241] "expr temp" "temp"
      unknown call_tmp[624487] "expr temp" "maybe param" "maybe type" "temp"
      (624490 'move' call_tmp[624487](458248 call chpl_direct_counted_range_iter_helper low[458229] count[458235]))
      (458243 'move' _iterator[458241](458246 call _getIterator call_tmp[624487]))
      Defer
      {
        {
          (458253 call _freeIterator _iterator[458241])
        }
      }
      { scopeless type
        (458257 'move' _indexOfInterest[458239](458260 call iteratorIndex _iterator[458241]))
      }
      ForLoop[458262]
      {
        unknown i[458265] "index var" "insert auto destroy"
        (476002 'end of statement')
        (458267 'move' i[458265] _indexOfInterest[458239])
        (476003 'end of statement' i[458265])
        unknown yret[511214] "YVV" "temp"
        (511217 'move' yret[511214](511216 'deref' i[458265]))
        (511219 yield yret[511214])
        (476005 'end of statement' i[458265])
        label _continueLabel[458272]
        _indexOfInterest[458239]
        _iterator[458241]
      }
      label _breakLabel[458274]
    }
    (511212 return ret[511210])
  }
  function chpl_direct_counted_range_iter[458166](arg low[458173] :
  (458170 call int(64)[13] 16), arg count[458179] :
  (458177 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511223] "RVV" "temp"
    {
      unknown _indexOfInterest[458183] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458185] "expr temp" "temp"
      unknown call_tmp[624492] "expr temp" "maybe param" "maybe type" "temp"
      (624495 'move' call_tmp[624492](458192 call chpl_direct_counted_range_iter_helper low[458173] count[458179]))
      (458187 'move' _iterator[458185](458190 call _getIterator call_tmp[624492]))
      Defer
      {
        {
          (458197 call _freeIterator _iterator[458185])
        }
      }
      { scopeless type
        (458201 'move' _indexOfInterest[458183](458204 call iteratorIndex _iterator[458185]))
      }
      ForLoop[458206]
      {
        unknown i[458209] "index var" "insert auto destroy"
        (476008 'end of statement')
        (458211 'move' i[458209] _indexOfInterest[458183])
        (476009 'end of statement' i[458209])
        unknown yret[511227] "YVV" "temp"
        (511230 'move' yret[511227](511229 'deref' i[458209]))
        (511232 yield yret[511227])
        (476011 'end of statement' i[458209])
        label _continueLabel[458216]
        _indexOfInterest[458183]
        _iterator[458185]
      }
      label _breakLabel[458218]
    }
    (511225 return ret[511223])
  }
  function chpl_direct_counted_range_iter[458110](arg low[458117] :
  (458114 call int(64)[13] 8), arg count[458123] :
  (458121 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511236] "RVV" "temp"
    {
      unknown _indexOfInterest[458127] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458129] "expr temp" "temp"
      unknown call_tmp[624497] "expr temp" "maybe param" "maybe type" "temp"
      (624500 'move' call_tmp[624497](458136 call chpl_direct_counted_range_iter_helper low[458117] count[458123]))
      (458131 'move' _iterator[458129](458134 call _getIterator call_tmp[624497]))
      Defer
      {
        {
          (458141 call _freeIterator _iterator[458129])
        }
      }
      { scopeless type
        (458145 'move' _indexOfInterest[458127](458148 call iteratorIndex _iterator[458129]))
      }
      ForLoop[458150]
      {
        unknown i[458153] "index var" "insert auto destroy"
        (476014 'end of statement')
        (458155 'move' i[458153] _indexOfInterest[458127])
        (476015 'end of statement' i[458153])
        unknown yret[511240] "YVV" "temp"
        (511243 'move' yret[511240](511242 'deref' i[458153]))
        (511245 yield yret[511240])
        (476017 'end of statement' i[458153])
        label _continueLabel[458160]
        _indexOfInterest[458127]
        _iterator[458129]
      }
      label _breakLabel[458162]
    }
    (511238 return ret[511236])
  }
  function chpl_direct_counted_range_iter[458502](arg low[458509] :
  (458506 call uint(64)[115] 64), arg count[458515] :
  (458513 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511249] "RVV" "temp"
    {
      unknown _indexOfInterest[458519] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458521] "expr temp" "temp"
      unknown call_tmp[624502] "expr temp" "maybe param" "maybe type" "temp"
      (624505 'move' call_tmp[624502](458528 call chpl_direct_counted_range_iter_helper low[458509] count[458515]))
      (458523 'move' _iterator[458521](458526 call _getIterator call_tmp[624502]))
      Defer
      {
        {
          (458533 call _freeIterator _iterator[458521])
        }
      }
      { scopeless type
        (458537 'move' _indexOfInterest[458519](458540 call iteratorIndex _iterator[458521]))
      }
      ForLoop[458542]
      {
        unknown i[458545] "index var" "insert auto destroy"
        (476020 'end of statement')
        (458547 'move' i[458545] _indexOfInterest[458519])
        (476021 'end of statement' i[458545])
        unknown yret[511253] "YVV" "temp"
        (511256 'move' yret[511253](511255 'deref' i[458545]))
        (511258 yield yret[511253])
        (476023 'end of statement' i[458545])
        label _continueLabel[458552]
        _indexOfInterest[458519]
        _iterator[458521]
      }
      label _breakLabel[458554]
    }
    (511251 return ret[511249])
  }
  function chpl_direct_counted_range_iter[458446](arg low[458453] :
  (458450 call uint(64)[115] 32), arg count[458459] :
  (458457 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511262] "RVV" "temp"
    {
      unknown _indexOfInterest[458463] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458465] "expr temp" "temp"
      unknown call_tmp[624507] "expr temp" "maybe param" "maybe type" "temp"
      (624510 'move' call_tmp[624507](458472 call chpl_direct_counted_range_iter_helper low[458453] count[458459]))
      (458467 'move' _iterator[458465](458470 call _getIterator call_tmp[624507]))
      Defer
      {
        {
          (458477 call _freeIterator _iterator[458465])
        }
      }
      { scopeless type
        (458481 'move' _indexOfInterest[458463](458484 call iteratorIndex _iterator[458465]))
      }
      ForLoop[458486]
      {
        unknown i[458489] "index var" "insert auto destroy"
        (476026 'end of statement')
        (458491 'move' i[458489] _indexOfInterest[458463])
        (476027 'end of statement' i[458489])
        unknown yret[511266] "YVV" "temp"
        (511269 'move' yret[511266](511268 'deref' i[458489]))
        (511271 yield yret[511266])
        (476029 'end of statement' i[458489])
        label _continueLabel[458496]
        _indexOfInterest[458463]
        _iterator[458465]
      }
      label _breakLabel[458498]
    }
    (511264 return ret[511262])
  }
  function chpl_direct_counted_range_iter[458390](arg low[458397] :
  (458394 call uint(64)[115] 16), arg count[458403] :
  (458401 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511275] "RVV" "temp"
    {
      unknown _indexOfInterest[458407] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458409] "expr temp" "temp"
      unknown call_tmp[624512] "expr temp" "maybe param" "maybe type" "temp"
      (624515 'move' call_tmp[624512](458416 call chpl_direct_counted_range_iter_helper low[458397] count[458403]))
      (458411 'move' _iterator[458409](458414 call _getIterator call_tmp[624512]))
      Defer
      {
        {
          (458421 call _freeIterator _iterator[458409])
        }
      }
      { scopeless type
        (458425 'move' _indexOfInterest[458407](458428 call iteratorIndex _iterator[458409]))
      }
      ForLoop[458430]
      {
        unknown i[458433] "index var" "insert auto destroy"
        (476032 'end of statement')
        (458435 'move' i[458433] _indexOfInterest[458407])
        (476033 'end of statement' i[458433])
        unknown yret[511279] "YVV" "temp"
        (511282 'move' yret[511279](511281 'deref' i[458433]))
        (511284 yield yret[511279])
        (476035 'end of statement' i[458433])
        label _continueLabel[458440]
        _indexOfInterest[458407]
        _iterator[458409]
      }
      label _breakLabel[458442]
    }
    (511277 return ret[511275])
  }
  function chpl_direct_counted_range_iter[458334](arg low[458341] :
  (458338 call uint(64)[115] 8), arg count[458347] :
  (458345 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511288] "RVV" "temp"
    {
      unknown _indexOfInterest[458351] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458353] "expr temp" "temp"
      unknown call_tmp[624517] "expr temp" "maybe param" "maybe type" "temp"
      (624520 'move' call_tmp[624517](458360 call chpl_direct_counted_range_iter_helper low[458341] count[458347]))
      (458355 'move' _iterator[458353](458358 call _getIterator call_tmp[624517]))
      Defer
      {
        {
          (458365 call _freeIterator _iterator[458353])
        }
      }
      { scopeless type
        (458369 'move' _indexOfInterest[458351](458372 call iteratorIndex _iterator[458353]))
      }
      ForLoop[458374]
      {
        unknown i[458377] "index var" "insert auto destroy"
        (476038 'end of statement')
        (458379 'move' i[458377] _indexOfInterest[458351])
        (476039 'end of statement' i[458377])
        unknown yret[511292] "YVV" "temp"
        (511295 'move' yret[511292](511294 'deref' i[458377]))
        (511297 yield yret[511292])
        (476041 'end of statement' i[458377])
        label _continueLabel[458384]
        _indexOfInterest[458351]
        _iterator[458353]
      }
      label _breakLabel[458386]
    }
    (511290 return ret[511288])
  }
  function chpl_direct_counted_range_iter[458726](arg low[458733] :
  (458730 call uint(64)[115] 64), arg count[458739] :
  (458737 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511301] "RVV" "temp"
    {
      unknown _indexOfInterest[458743] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458745] "expr temp" "temp"
      unknown call_tmp[624522] "expr temp" "maybe param" "maybe type" "temp"
      (624525 'move' call_tmp[624522](458752 call chpl_direct_counted_range_iter_helper low[458733] count[458739]))
      (458747 'move' _iterator[458745](458750 call _getIterator call_tmp[624522]))
      Defer
      {
        {
          (458757 call _freeIterator _iterator[458745])
        }
      }
      { scopeless type
        (458761 'move' _indexOfInterest[458743](458764 call iteratorIndex _iterator[458745]))
      }
      ForLoop[458766]
      {
        unknown i[458769] "index var" "insert auto destroy"
        (476044 'end of statement')
        (458771 'move' i[458769] _indexOfInterest[458743])
        (476045 'end of statement' i[458769])
        unknown yret[511305] "YVV" "temp"
        (511308 'move' yret[511305](511307 'deref' i[458769]))
        (511310 yield yret[511305])
        (476047 'end of statement' i[458769])
        label _continueLabel[458776]
        _indexOfInterest[458743]
        _iterator[458745]
      }
      label _breakLabel[458778]
    }
    (511303 return ret[511301])
  }
  function chpl_direct_counted_range_iter[458670](arg low[458677] :
  (458674 call uint(64)[115] 32), arg count[458683] :
  (458681 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511314] "RVV" "temp"
    {
      unknown _indexOfInterest[458687] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458689] "expr temp" "temp"
      unknown call_tmp[624527] "expr temp" "maybe param" "maybe type" "temp"
      (624530 'move' call_tmp[624527](458696 call chpl_direct_counted_range_iter_helper low[458677] count[458683]))
      (458691 'move' _iterator[458689](458694 call _getIterator call_tmp[624527]))
      Defer
      {
        {
          (458701 call _freeIterator _iterator[458689])
        }
      }
      { scopeless type
        (458705 'move' _indexOfInterest[458687](458708 call iteratorIndex _iterator[458689]))
      }
      ForLoop[458710]
      {
        unknown i[458713] "index var" "insert auto destroy"
        (476050 'end of statement')
        (458715 'move' i[458713] _indexOfInterest[458687])
        (476051 'end of statement' i[458713])
        unknown yret[511318] "YVV" "temp"
        (511321 'move' yret[511318](511320 'deref' i[458713]))
        (511323 yield yret[511318])
        (476053 'end of statement' i[458713])
        label _continueLabel[458720]
        _indexOfInterest[458687]
        _iterator[458689]
      }
      label _breakLabel[458722]
    }
    (511316 return ret[511314])
  }
  function chpl_direct_counted_range_iter[458614](arg low[458621] :
  (458618 call uint(64)[115] 16), arg count[458627] :
  (458625 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511327] "RVV" "temp"
    {
      unknown _indexOfInterest[458631] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458633] "expr temp" "temp"
      unknown call_tmp[624532] "expr temp" "maybe param" "maybe type" "temp"
      (624535 'move' call_tmp[624532](458640 call chpl_direct_counted_range_iter_helper low[458621] count[458627]))
      (458635 'move' _iterator[458633](458638 call _getIterator call_tmp[624532]))
      Defer
      {
        {
          (458645 call _freeIterator _iterator[458633])
        }
      }
      { scopeless type
        (458649 'move' _indexOfInterest[458631](458652 call iteratorIndex _iterator[458633]))
      }
      ForLoop[458654]
      {
        unknown i[458657] "index var" "insert auto destroy"
        (476056 'end of statement')
        (458659 'move' i[458657] _indexOfInterest[458631])
        (476057 'end of statement' i[458657])
        unknown yret[511331] "YVV" "temp"
        (511334 'move' yret[511331](511333 'deref' i[458657]))
        (511336 yield yret[511331])
        (476059 'end of statement' i[458657])
        label _continueLabel[458664]
        _indexOfInterest[458631]
        _iterator[458633]
      }
      label _breakLabel[458666]
    }
    (511329 return ret[511327])
  }
  function chpl_direct_counted_range_iter[458558](arg low[458565] :
  (458562 call uint(64)[115] 8), arg count[458571] :
  (458569 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511340] "RVV" "temp"
    {
      unknown _indexOfInterest[458575] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458577] "expr temp" "temp"
      unknown call_tmp[624537] "expr temp" "maybe param" "maybe type" "temp"
      (624540 'move' call_tmp[624537](458584 call chpl_direct_counted_range_iter_helper low[458565] count[458571]))
      (458579 'move' _iterator[458577](458582 call _getIterator call_tmp[624537]))
      Defer
      {
        {
          (458589 call _freeIterator _iterator[458577])
        }
      }
      { scopeless type
        (458593 'move' _indexOfInterest[458575](458596 call iteratorIndex _iterator[458577]))
      }
      ForLoop[458598]
      {
        unknown i[458601] "index var" "insert auto destroy"
        (476062 'end of statement')
        (458603 'move' i[458601] _indexOfInterest[458575])
        (476063 'end of statement' i[458601])
        unknown yret[511344] "YVV" "temp"
        (511347 'move' yret[511344](511346 'deref' i[458601]))
        (511349 yield yret[511344])
        (476065 'end of statement' i[458601])
        label _continueLabel[458608]
        _indexOfInterest[458575]
        _iterator[458577]
      }
      label _breakLabel[458610]
    }
    (511342 return ret[511340])
  }
  function chpl_direct_counted_range_iter[458962](arg low[458966]:enum[187](?), arg count[458973] :
  (458970 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511353] "RVV" "temp"
    unknown call_tmp[624542] "maybe param" "maybe type" "temp"
    (624545 'move' call_tmp[624542](458978 call chpl_build_low_bounded_range low[458966]))
    const r[458976] "dead at end of block" "const" "insert auto destroy"
    (541282 'init var' r[458976] call_tmp[624542])
    (458981 'end of statement')
    {
      unknown _indexOfInterest[458983] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458985] "expr temp" "temp"
      unknown call_tmp[624547] "expr temp" "maybe param" "maybe type" "temp"
      (624550 'move' call_tmp[624547](458992 call # r[458976] count[458973]))
      (458987 'move' _iterator[458985](458990 call _getIterator call_tmp[624547]))
      Defer
      {
        {
          (458997 call _freeIterator _iterator[458985])
        }
      }
      { scopeless type
        (459001 'move' _indexOfInterest[458983](459004 call iteratorIndex _iterator[458985]))
      }
      ForLoop[459006]
      {
        unknown i[459009] "index var" "insert auto destroy"
        (476068 'end of statement')
        (459011 'move' i[459009] _indexOfInterest[458983])
        (476069 'end of statement' i[459009])
        unknown yret[511357] "YVV" "temp"
        (511360 'move' yret[511357](511359 'deref' i[459009]))
        (511362 yield yret[511357])
        (476071 'end of statement' i[459009])
        label _continueLabel[459016]
        _indexOfInterest[458983]
        _iterator[458985]
      }
      label _breakLabel[459018]
    }
    (511355 return ret[511353])
  }
  function chpl_direct_counted_range_iter[458902](arg low[458906]:enum[187](?), arg count[458913] :
  (458910 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511366] "RVV" "temp"
    unknown call_tmp[624552] "maybe param" "maybe type" "temp"
    (624555 'move' call_tmp[624552](458918 call chpl_build_low_bounded_range low[458906]))
    const r[458916] "dead at end of block" "const" "insert auto destroy"
    (541284 'init var' r[458916] call_tmp[624552])
    (458921 'end of statement')
    {
      unknown _indexOfInterest[458923] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458925] "expr temp" "temp"
      unknown call_tmp[624557] "expr temp" "maybe param" "maybe type" "temp"
      (624560 'move' call_tmp[624557](458932 call # r[458916] count[458913]))
      (458927 'move' _iterator[458925](458930 call _getIterator call_tmp[624557]))
      Defer
      {
        {
          (458937 call _freeIterator _iterator[458925])
        }
      }
      { scopeless type
        (458941 'move' _indexOfInterest[458923](458944 call iteratorIndex _iterator[458925]))
      }
      ForLoop[458946]
      {
        unknown i[458949] "index var" "insert auto destroy"
        (476074 'end of statement')
        (458951 'move' i[458949] _indexOfInterest[458923])
        (476075 'end of statement' i[458949])
        unknown yret[511370] "YVV" "temp"
        (511373 'move' yret[511370](511372 'deref' i[458949]))
        (511375 yield yret[511370])
        (476077 'end of statement' i[458949])
        label _continueLabel[458956]
        _indexOfInterest[458923]
        _iterator[458925]
      }
      label _breakLabel[458958]
    }
    (511368 return ret[511366])
  }
  function chpl_direct_counted_range_iter[458842](arg low[458846]:enum[187](?), arg count[458853] :
  (458850 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511379] "RVV" "temp"
    unknown call_tmp[624562] "maybe param" "maybe type" "temp"
    (624565 'move' call_tmp[624562](458858 call chpl_build_low_bounded_range low[458846]))
    const r[458856] "dead at end of block" "const" "insert auto destroy"
    (541286 'init var' r[458856] call_tmp[624562])
    (458861 'end of statement')
    {
      unknown _indexOfInterest[458863] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458865] "expr temp" "temp"
      unknown call_tmp[624567] "expr temp" "maybe param" "maybe type" "temp"
      (624570 'move' call_tmp[624567](458872 call # r[458856] count[458853]))
      (458867 'move' _iterator[458865](458870 call _getIterator call_tmp[624567]))
      Defer
      {
        {
          (458877 call _freeIterator _iterator[458865])
        }
      }
      { scopeless type
        (458881 'move' _indexOfInterest[458863](458884 call iteratorIndex _iterator[458865]))
      }
      ForLoop[458886]
      {
        unknown i[458889] "index var" "insert auto destroy"
        (476080 'end of statement')
        (458891 'move' i[458889] _indexOfInterest[458863])
        (476081 'end of statement' i[458889])
        unknown yret[511383] "YVV" "temp"
        (511386 'move' yret[511383](511385 'deref' i[458889]))
        (511388 yield yret[511383])
        (476083 'end of statement' i[458889])
        label _continueLabel[458896]
        _indexOfInterest[458863]
        _iterator[458865]
      }
      label _breakLabel[458898]
    }
    (511381 return ret[511379])
  }
  function chpl_direct_counted_range_iter[458782](arg low[458786]:enum[187](?), arg count[458793] :
  (458790 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511392] "RVV" "temp"
    unknown call_tmp[624572] "maybe param" "maybe type" "temp"
    (624575 'move' call_tmp[624572](458798 call chpl_build_low_bounded_range low[458786]))
    const r[458796] "dead at end of block" "const" "insert auto destroy"
    (541288 'init var' r[458796] call_tmp[624572])
    (458801 'end of statement')
    {
      unknown _indexOfInterest[458803] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458805] "expr temp" "temp"
      unknown call_tmp[624577] "expr temp" "maybe param" "maybe type" "temp"
      (624580 'move' call_tmp[624577](458812 call # r[458796] count[458793]))
      (458807 'move' _iterator[458805](458810 call _getIterator call_tmp[624577]))
      Defer
      {
        {
          (458817 call _freeIterator _iterator[458805])
        }
      }
      { scopeless type
        (458821 'move' _indexOfInterest[458803](458824 call iteratorIndex _iterator[458805]))
      }
      ForLoop[458826]
      {
        unknown i[458829] "index var" "insert auto destroy"
        (476086 'end of statement')
        (458831 'move' i[458829] _indexOfInterest[458803])
        (476087 'end of statement' i[458829])
        unknown yret[511396] "YVV" "temp"
        (511399 'move' yret[511396](511398 'deref' i[458829]))
        (511401 yield yret[511396])
        (476089 'end of statement' i[458829])
        label _continueLabel[458836]
        _indexOfInterest[458803]
        _iterator[458805]
      }
      label _breakLabel[458838]
    }
    (511394 return ret[511392])
  }
  function chpl_direct_counted_range_iter[459202](arg low[459206]:enum[187](?), arg count[459213] :
  (459210 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511405] "RVV" "temp"
    unknown call_tmp[624582] "maybe param" "maybe type" "temp"
    (624585 'move' call_tmp[624582](459218 call chpl_build_low_bounded_range low[459206]))
    const r[459216] "dead at end of block" "const" "insert auto destroy"
    (541290 'init var' r[459216] call_tmp[624582])
    (459221 'end of statement')
    {
      unknown _indexOfInterest[459223] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459225] "expr temp" "temp"
      unknown call_tmp[624587] "expr temp" "maybe param" "maybe type" "temp"
      (624590 'move' call_tmp[624587](459232 call # r[459216] count[459213]))
      (459227 'move' _iterator[459225](459230 call _getIterator call_tmp[624587]))
      Defer
      {
        {
          (459237 call _freeIterator _iterator[459225])
        }
      }
      { scopeless type
        (459241 'move' _indexOfInterest[459223](459244 call iteratorIndex _iterator[459225]))
      }
      ForLoop[459246]
      {
        unknown i[459249] "index var" "insert auto destroy"
        (476092 'end of statement')
        (459251 'move' i[459249] _indexOfInterest[459223])
        (476093 'end of statement' i[459249])
        unknown yret[511409] "YVV" "temp"
        (511412 'move' yret[511409](511411 'deref' i[459249]))
        (511414 yield yret[511409])
        (476095 'end of statement' i[459249])
        label _continueLabel[459256]
        _indexOfInterest[459223]
        _iterator[459225]
      }
      label _breakLabel[459258]
    }
    (511407 return ret[511405])
  }
  function chpl_direct_counted_range_iter[459142](arg low[459146]:enum[187](?), arg count[459153] :
  (459150 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511418] "RVV" "temp"
    unknown call_tmp[624592] "maybe param" "maybe type" "temp"
    (624595 'move' call_tmp[624592](459158 call chpl_build_low_bounded_range low[459146]))
    const r[459156] "dead at end of block" "const" "insert auto destroy"
    (541292 'init var' r[459156] call_tmp[624592])
    (459161 'end of statement')
    {
      unknown _indexOfInterest[459163] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459165] "expr temp" "temp"
      unknown call_tmp[624597] "expr temp" "maybe param" "maybe type" "temp"
      (624600 'move' call_tmp[624597](459172 call # r[459156] count[459153]))
      (459167 'move' _iterator[459165](459170 call _getIterator call_tmp[624597]))
      Defer
      {
        {
          (459177 call _freeIterator _iterator[459165])
        }
      }
      { scopeless type
        (459181 'move' _indexOfInterest[459163](459184 call iteratorIndex _iterator[459165]))
      }
      ForLoop[459186]
      {
        unknown i[459189] "index var" "insert auto destroy"
        (476098 'end of statement')
        (459191 'move' i[459189] _indexOfInterest[459163])
        (476099 'end of statement' i[459189])
        unknown yret[511422] "YVV" "temp"
        (511425 'move' yret[511422](511424 'deref' i[459189]))
        (511427 yield yret[511422])
        (476101 'end of statement' i[459189])
        label _continueLabel[459196]
        _indexOfInterest[459163]
        _iterator[459165]
      }
      label _breakLabel[459198]
    }
    (511420 return ret[511418])
  }
  function chpl_direct_counted_range_iter[459082](arg low[459086]:enum[187](?), arg count[459093] :
  (459090 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511431] "RVV" "temp"
    unknown call_tmp[624602] "maybe param" "maybe type" "temp"
    (624605 'move' call_tmp[624602](459098 call chpl_build_low_bounded_range low[459086]))
    const r[459096] "dead at end of block" "const" "insert auto destroy"
    (541294 'init var' r[459096] call_tmp[624602])
    (459101 'end of statement')
    {
      unknown _indexOfInterest[459103] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459105] "expr temp" "temp"
      unknown call_tmp[624607] "expr temp" "maybe param" "maybe type" "temp"
      (624610 'move' call_tmp[624607](459112 call # r[459096] count[459093]))
      (459107 'move' _iterator[459105](459110 call _getIterator call_tmp[624607]))
      Defer
      {
        {
          (459117 call _freeIterator _iterator[459105])
        }
      }
      { scopeless type
        (459121 'move' _indexOfInterest[459103](459124 call iteratorIndex _iterator[459105]))
      }
      ForLoop[459126]
      {
        unknown i[459129] "index var" "insert auto destroy"
        (476104 'end of statement')
        (459131 'move' i[459129] _indexOfInterest[459103])
        (476105 'end of statement' i[459129])
        unknown yret[511435] "YVV" "temp"
        (511438 'move' yret[511435](511437 'deref' i[459129]))
        (511440 yield yret[511435])
        (476107 'end of statement' i[459129])
        label _continueLabel[459136]
        _indexOfInterest[459103]
        _iterator[459105]
      }
      label _breakLabel[459138]
    }
    (511433 return ret[511431])
  }
  function chpl_direct_counted_range_iter[459022](arg low[459026]:enum[187](?), arg count[459033] :
  (459030 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511444] "RVV" "temp"
    unknown call_tmp[624612] "maybe param" "maybe type" "temp"
    (624615 'move' call_tmp[624612](459038 call chpl_build_low_bounded_range low[459026]))
    const r[459036] "dead at end of block" "const" "insert auto destroy"
    (541296 'init var' r[459036] call_tmp[624612])
    (459041 'end of statement')
    {
      unknown _indexOfInterest[459043] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459045] "expr temp" "temp"
      unknown call_tmp[624617] "expr temp" "maybe param" "maybe type" "temp"
      (624620 'move' call_tmp[624617](459052 call # r[459036] count[459033]))
      (459047 'move' _iterator[459045](459050 call _getIterator call_tmp[624617]))
      Defer
      {
        {
          (459057 call _freeIterator _iterator[459045])
        }
      }
      { scopeless type
        (459061 'move' _indexOfInterest[459043](459064 call iteratorIndex _iterator[459045]))
      }
      ForLoop[459066]
      {
        unknown i[459069] "index var" "insert auto destroy"
        (476110 'end of statement')
        (459071 'move' i[459069] _indexOfInterest[459043])
        (476111 'end of statement' i[459069])
        unknown yret[511448] "YVV" "temp"
        (511451 'move' yret[511448](511450 'deref' i[459069]))
        (511453 yield yret[511448])
        (476113 'end of statement' i[459069])
        label _continueLabel[459076]
        _indexOfInterest[459043]
        _iterator[459045]
      }
      label _breakLabel[459078]
    }
    (511446 return ret[511444])
  }
  function chpl_direct_counted_range_iter[459442](arg low[459446]:bool[10], arg count[459453] :
  (459450 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511457] "RVV" "temp"
    unknown call_tmp[624622] "maybe param" "maybe type" "temp"
    (624625 'move' call_tmp[624622](459458 call chpl_build_low_bounded_range low[459446]))
    const r[459456] "dead at end of block" "const" "insert auto destroy"
    (541298 'init var' r[459456] call_tmp[624622])
    (459461 'end of statement')
    {
      unknown _indexOfInterest[459463] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459465] "expr temp" "temp"
      unknown call_tmp[624627] "expr temp" "maybe param" "maybe type" "temp"
      (624630 'move' call_tmp[624627](459472 call # r[459456] count[459453]))
      (459467 'move' _iterator[459465](459470 call _getIterator call_tmp[624627]))
      Defer
      {
        {
          (459477 call _freeIterator _iterator[459465])
        }
      }
      { scopeless type
        (459481 'move' _indexOfInterest[459463](459484 call iteratorIndex _iterator[459465]))
      }
      ForLoop[459486]
      {
        unknown i[459489] "index var" "insert auto destroy"
        (476116 'end of statement')
        (459491 'move' i[459489] _indexOfInterest[459463])
        (476117 'end of statement' i[459489])
        unknown yret[511461] "YVV" "temp"
        (511464 'move' yret[511461](511463 'deref' i[459489]))
        (511466 yield yret[511461])
        (476119 'end of statement' i[459489])
        label _continueLabel[459496]
        _indexOfInterest[459463]
        _iterator[459465]
      }
      label _breakLabel[459498]
    }
    (511459 return ret[511457])
  }
  function chpl_direct_counted_range_iter[459382](arg low[459386]:bool[10], arg count[459393] :
  (459390 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511470] "RVV" "temp"
    unknown call_tmp[624632] "maybe param" "maybe type" "temp"
    (624635 'move' call_tmp[624632](459398 call chpl_build_low_bounded_range low[459386]))
    const r[459396] "dead at end of block" "const" "insert auto destroy"
    (541300 'init var' r[459396] call_tmp[624632])
    (459401 'end of statement')
    {
      unknown _indexOfInterest[459403] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459405] "expr temp" "temp"
      unknown call_tmp[624637] "expr temp" "maybe param" "maybe type" "temp"
      (624640 'move' call_tmp[624637](459412 call # r[459396] count[459393]))
      (459407 'move' _iterator[459405](459410 call _getIterator call_tmp[624637]))
      Defer
      {
        {
          (459417 call _freeIterator _iterator[459405])
        }
      }
      { scopeless type
        (459421 'move' _indexOfInterest[459403](459424 call iteratorIndex _iterator[459405]))
      }
      ForLoop[459426]
      {
        unknown i[459429] "index var" "insert auto destroy"
        (476122 'end of statement')
        (459431 'move' i[459429] _indexOfInterest[459403])
        (476123 'end of statement' i[459429])
        unknown yret[511474] "YVV" "temp"
        (511477 'move' yret[511474](511476 'deref' i[459429]))
        (511479 yield yret[511474])
        (476125 'end of statement' i[459429])
        label _continueLabel[459436]
        _indexOfInterest[459403]
        _iterator[459405]
      }
      label _breakLabel[459438]
    }
    (511472 return ret[511470])
  }
  function chpl_direct_counted_range_iter[459322](arg low[459326]:bool[10], arg count[459333] :
  (459330 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511483] "RVV" "temp"
    unknown call_tmp[624642] "maybe param" "maybe type" "temp"
    (624645 'move' call_tmp[624642](459338 call chpl_build_low_bounded_range low[459326]))
    const r[459336] "dead at end of block" "const" "insert auto destroy"
    (541302 'init var' r[459336] call_tmp[624642])
    (459341 'end of statement')
    {
      unknown _indexOfInterest[459343] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459345] "expr temp" "temp"
      unknown call_tmp[624647] "expr temp" "maybe param" "maybe type" "temp"
      (624650 'move' call_tmp[624647](459352 call # r[459336] count[459333]))
      (459347 'move' _iterator[459345](459350 call _getIterator call_tmp[624647]))
      Defer
      {
        {
          (459357 call _freeIterator _iterator[459345])
        }
      }
      { scopeless type
        (459361 'move' _indexOfInterest[459343](459364 call iteratorIndex _iterator[459345]))
      }
      ForLoop[459366]
      {
        unknown i[459369] "index var" "insert auto destroy"
        (476128 'end of statement')
        (459371 'move' i[459369] _indexOfInterest[459343])
        (476129 'end of statement' i[459369])
        unknown yret[511487] "YVV" "temp"
        (511490 'move' yret[511487](511489 'deref' i[459369]))
        (511492 yield yret[511487])
        (476131 'end of statement' i[459369])
        label _continueLabel[459376]
        _indexOfInterest[459343]
        _iterator[459345]
      }
      label _breakLabel[459378]
    }
    (511485 return ret[511483])
  }
  function chpl_direct_counted_range_iter[459262](arg low[459266]:bool[10], arg count[459273] :
  (459270 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511496] "RVV" "temp"
    unknown call_tmp[624652] "maybe param" "maybe type" "temp"
    (624655 'move' call_tmp[624652](459278 call chpl_build_low_bounded_range low[459266]))
    const r[459276] "dead at end of block" "const" "insert auto destroy"
    (541304 'init var' r[459276] call_tmp[624652])
    (459281 'end of statement')
    {
      unknown _indexOfInterest[459283] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459285] "expr temp" "temp"
      unknown call_tmp[624657] "expr temp" "maybe param" "maybe type" "temp"
      (624660 'move' call_tmp[624657](459292 call # r[459276] count[459273]))
      (459287 'move' _iterator[459285](459290 call _getIterator call_tmp[624657]))
      Defer
      {
        {
          (459297 call _freeIterator _iterator[459285])
        }
      }
      { scopeless type
        (459301 'move' _indexOfInterest[459283](459304 call iteratorIndex _iterator[459285]))
      }
      ForLoop[459306]
      {
        unknown i[459309] "index var" "insert auto destroy"
        (476134 'end of statement')
        (459311 'move' i[459309] _indexOfInterest[459283])
        (476135 'end of statement' i[459309])
        unknown yret[511500] "YVV" "temp"
        (511503 'move' yret[511500](511502 'deref' i[459309]))
        (511505 yield yret[511500])
        (476137 'end of statement' i[459309])
        label _continueLabel[459316]
        _indexOfInterest[459283]
        _iterator[459285]
      }
      label _breakLabel[459318]
    }
    (511498 return ret[511496])
  }
  function chpl_direct_counted_range_iter[459682](arg low[459686]:bool[10], arg count[459693] :
  (459690 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511509] "RVV" "temp"
    unknown call_tmp[624662] "maybe param" "maybe type" "temp"
    (624665 'move' call_tmp[624662](459698 call chpl_build_low_bounded_range low[459686]))
    const r[459696] "dead at end of block" "const" "insert auto destroy"
    (541306 'init var' r[459696] call_tmp[624662])
    (459701 'end of statement')
    {
      unknown _indexOfInterest[459703] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459705] "expr temp" "temp"
      unknown call_tmp[624667] "expr temp" "maybe param" "maybe type" "temp"
      (624670 'move' call_tmp[624667](459712 call # r[459696] count[459693]))
      (459707 'move' _iterator[459705](459710 call _getIterator call_tmp[624667]))
      Defer
      {
        {
          (459717 call _freeIterator _iterator[459705])
        }
      }
      { scopeless type
        (459721 'move' _indexOfInterest[459703](459724 call iteratorIndex _iterator[459705]))
      }
      ForLoop[459726]
      {
        unknown i[459729] "index var" "insert auto destroy"
        (476140 'end of statement')
        (459731 'move' i[459729] _indexOfInterest[459703])
        (476141 'end of statement' i[459729])
        unknown yret[511513] "YVV" "temp"
        (511516 'move' yret[511513](511515 'deref' i[459729]))
        (511518 yield yret[511513])
        (476143 'end of statement' i[459729])
        label _continueLabel[459736]
        _indexOfInterest[459703]
        _iterator[459705]
      }
      label _breakLabel[459738]
    }
    (511511 return ret[511509])
  }
  function chpl_direct_counted_range_iter[459622](arg low[459626]:bool[10], arg count[459633] :
  (459630 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511522] "RVV" "temp"
    unknown call_tmp[624672] "maybe param" "maybe type" "temp"
    (624675 'move' call_tmp[624672](459638 call chpl_build_low_bounded_range low[459626]))
    const r[459636] "dead at end of block" "const" "insert auto destroy"
    (541308 'init var' r[459636] call_tmp[624672])
    (459641 'end of statement')
    {
      unknown _indexOfInterest[459643] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459645] "expr temp" "temp"
      unknown call_tmp[624677] "expr temp" "maybe param" "maybe type" "temp"
      (624680 'move' call_tmp[624677](459652 call # r[459636] count[459633]))
      (459647 'move' _iterator[459645](459650 call _getIterator call_tmp[624677]))
      Defer
      {
        {
          (459657 call _freeIterator _iterator[459645])
        }
      }
      { scopeless type
        (459661 'move' _indexOfInterest[459643](459664 call iteratorIndex _iterator[459645]))
      }
      ForLoop[459666]
      {
        unknown i[459669] "index var" "insert auto destroy"
        (476146 'end of statement')
        (459671 'move' i[459669] _indexOfInterest[459643])
        (476147 'end of statement' i[459669])
        unknown yret[511526] "YVV" "temp"
        (511529 'move' yret[511526](511528 'deref' i[459669]))
        (511531 yield yret[511526])
        (476149 'end of statement' i[459669])
        label _continueLabel[459676]
        _indexOfInterest[459643]
        _iterator[459645]
      }
      label _breakLabel[459678]
    }
    (511524 return ret[511522])
  }
  function chpl_direct_counted_range_iter[459562](arg low[459566]:bool[10], arg count[459573] :
  (459570 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511535] "RVV" "temp"
    unknown call_tmp[624682] "maybe param" "maybe type" "temp"
    (624685 'move' call_tmp[624682](459578 call chpl_build_low_bounded_range low[459566]))
    const r[459576] "dead at end of block" "const" "insert auto destroy"
    (541310 'init var' r[459576] call_tmp[624682])
    (459581 'end of statement')
    {
      unknown _indexOfInterest[459583] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459585] "expr temp" "temp"
      unknown call_tmp[624687] "expr temp" "maybe param" "maybe type" "temp"
      (624690 'move' call_tmp[624687](459592 call # r[459576] count[459573]))
      (459587 'move' _iterator[459585](459590 call _getIterator call_tmp[624687]))
      Defer
      {
        {
          (459597 call _freeIterator _iterator[459585])
        }
      }
      { scopeless type
        (459601 'move' _indexOfInterest[459583](459604 call iteratorIndex _iterator[459585]))
      }
      ForLoop[459606]
      {
        unknown i[459609] "index var" "insert auto destroy"
        (476152 'end of statement')
        (459611 'move' i[459609] _indexOfInterest[459583])
        (476153 'end of statement' i[459609])
        unknown yret[511539] "YVV" "temp"
        (511542 'move' yret[511539](511541 'deref' i[459609]))
        (511544 yield yret[511539])
        (476155 'end of statement' i[459609])
        label _continueLabel[459616]
        _indexOfInterest[459583]
        _iterator[459585]
      }
      label _breakLabel[459618]
    }
    (511537 return ret[511535])
  }
  function chpl_direct_counted_range_iter[459502](arg low[459506]:bool[10], arg count[459513] :
  (459510 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511548] "RVV" "temp"
    unknown call_tmp[624692] "maybe param" "maybe type" "temp"
    (624695 'move' call_tmp[624692](459518 call chpl_build_low_bounded_range low[459506]))
    const r[459516] "dead at end of block" "const" "insert auto destroy"
    (541312 'init var' r[459516] call_tmp[624692])
    (459521 'end of statement')
    {
      unknown _indexOfInterest[459523] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459525] "expr temp" "temp"
      unknown call_tmp[624697] "expr temp" "maybe param" "maybe type" "temp"
      (624700 'move' call_tmp[624697](459532 call # r[459516] count[459513]))
      (459527 'move' _iterator[459525](459530 call _getIterator call_tmp[624697]))
      Defer
      {
        {
          (459537 call _freeIterator _iterator[459525])
        }
      }
      { scopeless type
        (459541 'move' _indexOfInterest[459523](459544 call iteratorIndex _iterator[459525]))
      }
      ForLoop[459546]
      {
        unknown i[459549] "index var" "insert auto destroy"
        (476158 'end of statement')
        (459551 'move' i[459549] _indexOfInterest[459523])
        (476159 'end of statement' i[459549])
        unknown yret[511552] "YVV" "temp"
        (511555 'move' yret[511552](511554 'deref' i[459549]))
        (511557 yield yret[511552])
        (476161 'end of statement' i[459549])
        label _continueLabel[459556]
        _indexOfInterest[459523]
        _iterator[459525]
      }
      label _breakLabel[459558]
    }
    (511550 return ret[511548])
  }
  function chpl_direct_counted_range_iter[75220](arg low[75217]:integral[199](?), arg count[75222]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511561] "RVV" "temp"
    unknown call_tmp[624702] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624705 'move' call_tmp[624702](75228 'typeof' low[75217]))
    unknown call_tmp[624707] "expr temp" "maybe param" "maybe type" "temp"
    (624710 'move' call_tmp[624707](75230 call _cast string[26] call_tmp[624702]))
    unknown call_tmp[624712] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624715 'move' call_tmp[624712](75234 'typeof' count[75222]))
    unknown call_tmp[624717] "expr temp" "maybe param" "maybe type" "temp"
    (624720 'move' call_tmp[624717](75236 call _cast string[26] call_tmp[624712]))
    (75238 call compilerError "can't apply '#' to a range with idxType " call_tmp[624707] " using a count of type " call_tmp[624717])
    (511563 return ret[511561])
  }
  function chpl_direct_counted_range_iter[75247](arg low[75245]:_any[178](?), arg count[75249]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511567] "RVV" "temp"
    (75254 call compilerError "Bound of 'low..' must be an integer")
    (511569 return ret[511567])
  }
  function chpl_direct_counted_range_iter_helper[75263](arg low[75261]:_any[178](?), arg count[75265]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511573] "RVV" "temp"
    unknown tmp[420700] "maybe param" "temp"
    unknown tmp[420721] "maybe param" "temp"
    (420732 'move' tmp[420721] 1)
    unknown call_tmp[624722] "expr temp" "maybe param" "maybe type" "temp"
    (624725 'move' call_tmp[624722](420734 call _cond_invalid tmp[420721]))
    if call_tmp[624722]
    {
      (420737 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558321] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558322] "maybe param" "temp"
    unknown call_tmp[624727] "expr temp" "maybe param" "maybe type" "temp"
    (624730 'move' call_tmp[624727](420722 call isTrue tmp[420721]))
    (558327 'move' tmp[558322](558325 call _cond_test call_tmp[624727]))
    if tmp[558322]
    {
      unknown tmp[558329] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624732] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624735 'move' call_tmp[624732](75270 'typeof' count[75265]))
      unknown call_tmp[624737] "expr temp" "maybe param" "maybe type" "temp"
      (624740 'move' call_tmp[624737](75272 call isIntType call_tmp[624732]))
      (558331 'move' tmp[558329](420725 call isTrue call_tmp[624737]))
      (558336 'move' tmp[558321](558333 '_paramFoldLogical' tmp[558322] tmp[558329]))
    }
    {
      (558341 'move' tmp[558321](558338 '_paramFoldLogical' tmp[558322] 0))
    }
    (420711 'move' tmp[420700] tmp[558321])
    unknown call_tmp[624742] "expr temp" "maybe param" "maybe type" "temp"
    (624745 'move' call_tmp[624742](420713 call _cond_invalid tmp[420700]))
    if call_tmp[624742]
    {
      (420716 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558348] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558349] "maybe param" "temp"
    unknown call_tmp[624747] "expr temp" "maybe param" "maybe type" "temp"
    (624750 'move' call_tmp[624747](420701 call isTrue tmp[420700]))
    (558354 'move' tmp[558349](558352 call _cond_test call_tmp[624747]))
    if tmp[558349]
    {
      unknown tmp[558356] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624752] "expr temp" "maybe param" "maybe type" "temp"
      (624755 'move' call_tmp[624752](75277 call < count[75265] 0))
      (558358 'move' tmp[558356](420704 call isTrue call_tmp[624752]))
      (558363 'move' tmp[558348](558360 '_paramFoldLogical' tmp[558349] tmp[558356]))
    }
    {
      (558368 'move' tmp[558348](558365 '_paramFoldLogical' tmp[558349] 0))
    }
    unknown call_tmp[624757] "expr temp" "maybe param" "maybe type" "temp"
    (624760 'move' call_tmp[624757](75289 call _cond_test tmp[558348]))
    if call_tmp[624757]
    {
      (75287 call boundsCheckHalt module=[255] HaltWrappers[209915] "With a negative count, the range must have a last index.")
      (358012 'referenced modules list' HaltWrappers[209915])
    }
    const tmp[75337] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[558375] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558376] "maybe param" "temp"
    unknown call_tmp[624762] "expr temp" "maybe param" "maybe type" "temp"
    (624765 'move' call_tmp[624762](75302 call == count[75265] 0))
    (558381 'move' tmp[558376](558379 call _cond_test call_tmp[624762]))
    if tmp[558376]
    {
      unknown tmp[558383] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624767] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624770 'move' call_tmp[624767](75313 'typeof' low[75261]))
      unknown call_tmp[624772] "expr temp" "maybe param" "maybe type" "temp"
      (624775 'move' call_tmp[624772](75307 call _cast uint(64)[115] low[75261]))
      unknown call_tmp[624777] "expr temp" "maybe param" "maybe type" "temp"
      (624780 'move' call_tmp[624777](75310 call - call_tmp[624772] 1))
      unknown call_tmp[624782] "expr temp" "maybe param" "maybe type" "temp"
      (624785 'move' call_tmp[624782](75314 call _cast call_tmp[624767] call_tmp[624777]))
      (558385 'move' tmp[558383](75317 call _build_tuple low[75261] call_tmp[624782]))
      (558390 'move' tmp[558375](558387 '_paramFoldLogical' tmp[558376] tmp[558383]))
    }
    {
      unknown tmp[558392] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624787] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624790 'move' call_tmp[624787](75323 'typeof' low[75261]))
      unknown call_tmp[624792] "expr temp" "maybe param" "maybe type" "temp"
      (624795 'move' call_tmp[624792](75324 call _cast call_tmp[624787] count[75265]))
      unknown call_tmp[624797] "expr temp" "maybe param" "maybe type" "temp"
      (624800 'move' call_tmp[624797](75327 call - call_tmp[624792] 1))
      unknown call_tmp[624802] "expr temp" "maybe param" "maybe type" "temp"
      (624805 'move' call_tmp[624802](75329 call + low[75261] call_tmp[624797]))
      (558394 'move' tmp[558392](75332 call _build_tuple low[75261] call_tmp[624802]))
      (558399 'move' tmp[558375](558396 '_paramFoldLogical' tmp[558376] tmp[558392]))
    }
    (541314 'init var' tmp[75337] tmp[558375])
    (75344 call _check_tuple_var_decl tmp[75337] 2)
    (476168 'end of statement')
    unknown call_tmp[624807] "maybe param" "maybe type" "temp"
    (624810 'move' call_tmp[624807](75338 call tmp[75337] 0))
    const start[75295] "dead at end of block" "const" "insert auto destroy"
    (541316 'init var' start[75295] call_tmp[624807])
    unknown call_tmp[624812] "maybe param" "maybe type" "temp"
    (624815 'move' call_tmp[624812](75341 call tmp[75337] 1))
    const end[75297] "dead at end of block" "const" "insert auto destroy"
    (541318 'init var' end[75297] call_tmp[624812])
    (75349 'end of statement')
    {
      unknown _indexOfInterest[75360] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[75361] "expr temp" "temp"
      unknown call_tmp[624817] "expr temp" "maybe param" "maybe type" "temp"
      (624820 'move' call_tmp[624817](75356 call chpl_direct_param_stride_range_iter start[75295] end[75297] 1))
      (75370 'move' _iterator[75361](75368 call _getIterator call_tmp[624817]))
      Defer
      {
        {
          (75387 call _freeIterator _iterator[75361])
        }
      }
      { scopeless type
        (75376 'move' _indexOfInterest[75360](75373 call iteratorIndex _iterator[75361]))
      }
      ForLoop[75362]
      {
        unknown i[75380] "index var" "insert auto destroy"
        (476170 'end of statement')
        (75382 'move' i[75380] _indexOfInterest[75360])
        (476171 'end of statement' i[75380])
        unknown yret[511577] "YVV" "temp"
        (511580 'move' yret[511577](511579 'deref' i[75380]))
        (511582 yield yret[511577])
        (476173 'end of statement' i[75380])
        label _continueLabel[75365]
        _indexOfInterest[75360]
        _iterator[75361]
      }
      label _breakLabel[75366]
    }
    (511575 return ret[511573])
  }
  function chpl_direct_pos_stride_range_iter[75403](arg low[75400]:_any[178](?), arg high[75405]:_any[178](?), arg stride[75407]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511586] "RVV" "temp"
    unknown call_tmp[624822] "expr temp" "maybe param" "maybe type" "temp"
    (624825 'move' call_tmp[624822](75551 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[624822]
    {
      unknown call_tmp[624827] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624830 'move' call_tmp[624827](459742 'typeof' low[75400]))
      (75414 call chpl_range_check_stride stride[75407] call_tmp[624827])
      (476175 'end of statement')
      unknown call_tmp[624832] "expr temp" "maybe param" "maybe type" "temp"
      (624835 'move' call_tmp[624832](75426 call _cond_test 1))
      if call_tmp[624832]
      {
        unknown call_tmp[624837] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (624840 'move' call_tmp[624837](459744 'typeof' low[75400]))
        (75424 call chpl_checkIfRangeIterWillOverflow call_tmp[624837] low[75400] high[75405] stride[75407])
      }
      unknown i[75432] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624842] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624845 'move' call_tmp[624842](459746 'typeof' low[75400]))
      (541320 'default init var' i[75432] call_tmp[624842])
      (75435 'end of statement')
      CForLoop[75478]
      {
        {
          unknown yret[511590] "YVV" "temp"
          (511593 'move' yret[511590](511592 'deref' i[75432]))
          (511595 yield yret[511590])
          (476177 'end of statement' i[75432])
        }
        label _continueLabel[75494]
        {
          (75479 '=' i[75432] low[75400])
          (476179 'end of statement' i[75432])
        }
        {
          (75482 '<=' i[75432] high[75405])
          (476181 'end of statement' i[75432])
        }
        {
          unknown call_tmp[624847] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624850 'move' call_tmp[624847](459748 'typeof' low[75400]))
          unknown call_tmp[624852] "expr temp" "maybe param" "maybe type" "temp"
          (624855 'move' call_tmp[624852](75488 call _cast call_tmp[624847] stride[75407]))
          (75485 '+=' i[75432] call_tmp[624852])
          (476183 'end of statement' i[75432])
        }
      }
      label _breakLabel[75495]
    }
    {
      {
        unknown _indexOfInterest[75516] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75517] "expr temp" "temp"
        unknown call_tmp[624857] "expr temp" "maybe param" "maybe type" "temp"
        (624860 'move' call_tmp[624857](75501 call chpl_build_bounded_range low[75400] high[75405]))
        unknown call_tmp[624862] "expr temp" "maybe param" "maybe type" "temp"
        (624865 'move' call_tmp[624862](75504 call chpl_by call_tmp[624857] stride[75407]))
        unknown call_tmp[624869] "expr temp" "maybe param" "maybe type" "temp"
        (624872 'move' call_tmp[624869](75512 call(75508 call (partial) generalIterator _mt[243] call_tmp[624862])))
        (75526 'move' _iterator[75517](75524 call _getIterator call_tmp[624869]))
        Defer
        {
          {
            (75543 call _freeIterator _iterator[75517])
          }
        }
        { scopeless type
          (75532 'move' _indexOfInterest[75516](75529 call iteratorIndex _iterator[75517]))
        }
        ForLoop[75518]
        {
          unknown i[75536] "index var" "insert auto destroy"
          (476186 'end of statement')
          (75538 'move' i[75536] _indexOfInterest[75516])
          (476187 'end of statement' i[75536])
          unknown yret[511597] "YVV" "temp"
          (511600 'move' yret[511597](511599 'deref' i[75536]))
          (511602 yield yret[511597])
          (476189 'end of statement' i[75536])
          label _continueLabel[75521]
          _indexOfInterest[75516]
          _iterator[75517]
        }
        label _breakLabel[75522]
      }
    }
    (511588 return ret[511586])
  }
  function chpl_direct_param_stride_range_iter[75565](arg low[75562]:_any[178](?), arg high[75567]:_any[178](?), param arg stride[75569]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511606] "RVV" "temp"
    unknown call_tmp[624874] "expr temp" "maybe param" "maybe type" "temp"
    (624877 'move' call_tmp[624874](75776 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[624874]
    {
      unknown call_tmp[624879] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624882 'move' call_tmp[624879](459750 'typeof' low[75562]))
      (75576 call chpl_range_check_stride stride[75569] call_tmp[624879])
      (476191 'end of statement')
      unknown i[75580] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624884] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624887 'move' call_tmp[624884](459752 'typeof' low[75562]))
      (541322 'default init var' i[75580] call_tmp[624884])
      (75583 'end of statement')
      unknown call_tmp[624889] "expr temp" "maybe param" "maybe type" "temp"
      (624892 'move' call_tmp[624889](75586 call > stride[75569] 0))
      unknown call_tmp[624894] "expr temp" "maybe param" "maybe type" "temp"
      (624897 'move' call_tmp[624894](75720 call _cond_test call_tmp[624889]))
      if call_tmp[624894]
      {
        unknown call_tmp[624899] "expr temp" "maybe param" "maybe type" "temp"
        (624902 'move' call_tmp[624899](75597 call _cond_test 1))
        if call_tmp[624899]
        {
          unknown call_tmp[624904] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624907 'move' call_tmp[624904](459754 'typeof' low[75562]))
          (75595 call chpl_checkIfRangeIterWillOverflow call_tmp[624904] low[75562] high[75567] stride[75569])
        }
        CForLoop[75629]
        {
          {
            unknown yret[511610] "YVV" "temp"
            (511613 'move' yret[511610](511612 'deref' i[75580]))
            (511615 yield yret[511610])
            (476193 'end of statement' i[75580])
          }
          label _continueLabel[75645]
          {
            (75630 '=' i[75580] low[75562])
            (476195 'end of statement' i[75580])
          }
          {
            (75633 '<=' i[75580] high[75567])
            (476197 'end of statement' i[75580])
          }
          {
            unknown call_tmp[624909] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624912 'move' call_tmp[624909](459756 'typeof' low[75562]))
            unknown call_tmp[624914] "expr temp" "maybe param" "maybe type" "temp"
            (624917 'move' call_tmp[624914](75639 call _cast call_tmp[624909] stride[75569]))
            (75636 '+=' i[75580] call_tmp[624914])
            (476199 'end of statement' i[75580])
          }
        }
        label _breakLabel[75646]
      }
      {
        unknown call_tmp[624919] "expr temp" "maybe param" "maybe type" "temp"
        (624922 'move' call_tmp[624919](75651 call < stride[75569] 0))
        unknown call_tmp[624924] "expr temp" "maybe param" "maybe type" "temp"
        (624927 'move' call_tmp[624924](75716 call _cond_test call_tmp[624919]))
        if call_tmp[624924]
        {
          unknown call_tmp[624929] "expr temp" "maybe param" "maybe type" "temp"
          (624932 'move' call_tmp[624929](75664 call _cond_test 1))
          if call_tmp[624929]
          {
            unknown call_tmp[624934] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624937 'move' call_tmp[624934](459758 'typeof' low[75562]))
            (75662 call chpl_checkIfRangeIterWillOverflow call_tmp[624934] low[75562] high[75567] stride[75569] high[75567] low[75562])
          }
          CForLoop[75696]
          {
            {
              unknown yret[511617] "YVV" "temp"
              (511620 'move' yret[511617](511619 'deref' i[75580]))
              (511622 yield yret[511617])
              (476202 'end of statement' i[75580])
            }
            label _continueLabel[75712]
            {
              (75697 '=' i[75580] high[75567])
              (476204 'end of statement' i[75580])
            }
            {
              (75700 '>=' i[75580] low[75562])
              (476206 'end of statement' i[75580])
            }
            {
              unknown call_tmp[624939] "expr temp" "maybe param" "maybe type" "temp" "type variable"
              (624942 'move' call_tmp[624939](459760 'typeof' low[75562]))
              unknown call_tmp[624944] "expr temp" "maybe param" "maybe type" "temp"
              (624947 'move' call_tmp[624944](75706 call _cast call_tmp[624939] stride[75569]))
              (75703 '+=' i[75580] call_tmp[624944])
              (476208 'end of statement' i[75580])
            }
          }
          label _breakLabel[75713]
        }
      }
    }
    {
      {
        unknown _indexOfInterest[75741] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75742] "expr temp" "temp"
        unknown call_tmp[624949] "expr temp" "maybe param" "maybe type" "temp"
        (624952 'move' call_tmp[624949](75728 call chpl_build_bounded_range low[75562] high[75567]))
        unknown call_tmp[624954] "expr temp" "maybe param" "maybe type" "temp"
        (624957 'move' call_tmp[624954](75731 call chpl_by call_tmp[624949] stride[75569]))
        unknown call_tmp[624961] "expr temp" "maybe param" "maybe type" "temp"
        (624964 'move' call_tmp[624961](75737 call(75733 call (partial) generalIterator _mt[243] call_tmp[624954])))
        (75751 'move' _iterator[75742](75749 call _getIterator call_tmp[624961]))
        Defer
        {
          {
            (75768 call _freeIterator _iterator[75742])
          }
        }
        { scopeless type
          (75757 'move' _indexOfInterest[75741](75754 call iteratorIndex _iterator[75742]))
        }
        ForLoop[75743]
        {
          unknown i[75761] "index var" "insert auto destroy"
          (476211 'end of statement')
          (75763 'move' i[75761] _indexOfInterest[75741])
          (476212 'end of statement' i[75761])
          unknown yret[511624] "YVV" "temp"
          (511627 'move' yret[511624](511626 'deref' i[75761]))
          (511629 yield yret[511624])
          (476214 'end of statement' i[75761])
          label _continueLabel[75746]
          _indexOfInterest[75741]
          _iterator[75742]
        }
        label _breakLabel[75747]
      }
    }
    (511608 return ret[511606])
  }
  function range[64316](?).these[75786](arg _mt[75791]:_MT[238], arg this[75788]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511633] "RVV" "temp"
    unknown call_tmp[624968] "expr temp" "maybe param" "maybe type" "temp"
    (624971 'move' call_tmp[624968](375582 call boundedType _mt[243] this[75788]))
    unknown call_tmp[624973] "expr temp" "maybe param" "maybe type" "temp"
    (624976 'move' call_tmp[624973](75805 call == call_tmp[624968] boundedNone[64211]))
    unknown call_tmp[624978] "expr temp" "maybe param" "maybe type" "temp"
    (624981 'move' call_tmp[624978](75828 call _cond_test call_tmp[624973]))
    if call_tmp[624978]
    {
      (75826 call compilerError "iteration over a range with no bounds")
    }
    unknown call_tmp[624983] "expr temp" "maybe param" "maybe type" "temp"
    (624986 'move' call_tmp[624983](75908 call _cond_test 1))
    if call_tmp[624983]
    {
      unknown call_tmp[624990] "expr temp" "maybe param" "maybe type" "temp"
      (624993 'move' call_tmp[624990](75840 call(75836 call (partial) hasFirst _mt[243] this[75788])))
      unknown call_tmp[624995] "expr temp" "maybe param" "maybe type" "temp"
      (624998 'move' call_tmp[624995](75841 call ! call_tmp[624990]))
      unknown call_tmp[625000] "expr temp" "maybe param" "maybe type" "temp"
      (625003 'move' call_tmp[625000](75867 call _cond_test call_tmp[624995]))
      if call_tmp[625000]
      {
        (75865 call boundsCheckHalt module=[255] HaltWrappers[209915] "iteration over range that has no first index")
        (358021 'referenced modules list' HaltWrappers[209915])
      }
      unknown call_tmp[625007] "expr temp" "maybe param" "maybe type" "temp"
      (625010 'move' call_tmp[625007](75878 call(75874 call (partial) isAmbiguous _mt[243] this[75788])))
      unknown call_tmp[625012] "expr temp" "maybe param" "maybe type" "temp"
      (625015 'move' call_tmp[625012](75903 call _cond_test call_tmp[625007]))
      if call_tmp[625012]
      {
        (75901 call boundsCheckHalt module=[255] HaltWrappers[209915] "these -- Attempt to iterate over a range with ambiguous alignment.")
        (358028 'referenced modules list' HaltWrappers[209915])
      }
    }
    unknown i[75913] "dead at end of block" "insert auto destroy"
    unknown call_tmp[625019] "expr temp" "maybe param" "maybe type" "temp"
    (625022 'move' call_tmp[625019](375587 call intIdxType _mt[243] this[75788]))
    (541324 'default init var' i[75913] call_tmp[625019])
    (75916 'end of statement')
    unknown call_tmp[625026] "expr temp" "maybe param" "maybe type" "temp"
    (625029 'move' call_tmp[625026](75919 call first _mt[243] this[75788]))
    unknown call_tmp[625031] "maybe param" "maybe type" "temp"
    (625034 'move' call_tmp[625031](75923 call chpl__idxToInt call_tmp[625026]))
    const start[75924] "dead at end of block" "const" "insert auto destroy"
    (541326 'init var' start[75924] call_tmp[625031])
    (75927 'end of statement')
    CForLoop[75953]
    {
      {
        unknown yret[511637] "YVV" "temp"
        unknown call_tmp[625038] "expr temp" "maybe param" "maybe type" "temp"
        (625041 'move' call_tmp[625038](75948 call(375591 call (partial) chpl_intToIdx _mt[243] this[75788]) i[75913]))
        (511640 'move' yret[511637](511639 'deref' call_tmp[625038]))
        (511642 yield yret[511637])
        (476219 'end of statement' i[75913])
      }
      label _continueLabel[75967]
      {
        (75954 '=' i[75913] start[75924])
        (476221 'end of statement' i[75913] start[75924])
      }
      {
        (748171 call chpl_statementLevelSymbol 1)
      }
      {
        unknown call_tmp[625045] "expr temp" "maybe param" "maybe type" "temp"
        (625048 'move' call_tmp[625045](375599 call intIdxType _mt[243] this[75788]))
        unknown call_tmp[625052] "expr temp" "maybe param" "maybe type" "temp"
        (625055 'move' call_tmp[625052](375603 call stride _mt[243] this[75788]))
        unknown call_tmp[625057] "expr temp" "maybe param" "maybe type" "temp"
        (625060 'move' call_tmp[625057](75961 call _cast call_tmp[625045] call_tmp[625052]))
        (75958 '+=' i[75913] call_tmp[625057])
        (476224 'end of statement' i[75913])
      }
    }
    label _breakLabel[75968]
    (511635 return ret[511633])
  }
  where {
    unknown call_tmp[625064] "expr temp" "maybe param" "maybe type" "temp"
    (625067 'move' call_tmp[625064](375577 call boundedType _mt[243] this[75788]))
    (75798 call != call_tmp[625064] bounded[64205])
  }
  function range[64316](?).these[75977](arg _mt[75982]:_MT[238], arg this[75979]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511646] "RVV" "temp"
    unknown call_tmp[625069] "expr temp" "maybe param" "maybe type" "temp"
    (625072 'move' call_tmp[625069](76164 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[625069]
    {
      unknown call_tmp[625074] "expr temp" "maybe param" "maybe type" "temp"
      (625077 'move' call_tmp[625074](76023 call _cond_test 1))
      if call_tmp[625074]
      {
        (76001 call(375621 call (partial) checkIfIterWillOverflow _mt[243] this[75979]))
        (476226 'end of statement')
        unknown call_tmp[625083] "expr temp" "maybe param" "maybe type" "temp"
        (625086 'move' call_tmp[625083](76009 call(76005 call (partial) isAmbiguous _mt[243] this[75979])))
        unknown call_tmp[625088] "expr temp" "maybe param" "maybe type" "temp"
        (625091 'move' call_tmp[625088](76018 call _cond_test call_tmp[625083]))
        if call_tmp[625088]
        {
          (76016 call boundsCheckHalt module=[255] HaltWrappers[209915] "these -- Attempt to iterate over a range with ambiguous alignment.")
          (358037 'referenced modules list' HaltWrappers[209915])
        }
      }
      unknown i[76029] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625095] "expr temp" "maybe param" "maybe type" "temp"
      (625098 'move' call_tmp[625095](375625 call intIdxType _mt[243] this[75979]))
      (541328 'default init var' i[76029] call_tmp[625095])
      (76032 'end of statement')
      unknown call_tmp[625102] "maybe param" "maybe type" "temp"
      (625105 'move' call_tmp[625102](76034 call firstAsInt _mt[243] this[75979]))
      const start[76037] "dead at end of block" "const" "insert auto destroy"
      (541330 'init var' start[76037] call_tmp[625102])
      (76040 'end of statement')
      const end[76066] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558406] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558407] "maybe param" "temp"
      unknown call_tmp[625109] "expr temp" "maybe param" "maybe type" "temp"
      (625112 'move' call_tmp[625109](76043 call low _mt[243] this[75979]))
      unknown call_tmp[625116] "expr temp" "maybe param" "maybe type" "temp"
      (625119 'move' call_tmp[625116](76047 call high _mt[243] this[75979]))
      unknown call_tmp[625121] "expr temp" "maybe param" "maybe type" "temp"
      (625124 'move' call_tmp[625121](76050 call > call_tmp[625109] call_tmp[625116]))
      (558412 'move' tmp[558407](558410 call _cond_test call_tmp[625121]))
      if tmp[558407]
      {
        (558417 'move' tmp[558406](558414 '_paramFoldLogical' tmp[558407] start[76037]))
      }
      {
        unknown tmp[558419] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[625128] "expr temp" "maybe param" "maybe type" "temp"
        (625131 'move' call_tmp[625128](76054 call lastAsInt _mt[243] this[75979]))
        unknown call_tmp[625135] "expr temp" "maybe param" "maybe type" "temp"
        (625138 'move' call_tmp[625135](375638 call intIdxType _mt[243] this[75979]))
        unknown call_tmp[625142] "expr temp" "maybe param" "maybe type" "temp"
        (625145 'move' call_tmp[625142](375634 call stride _mt[243] this[75979]))
        unknown call_tmp[625147] "expr temp" "maybe param" "maybe type" "temp"
        (625150 'move' call_tmp[625147](76059 call _cast call_tmp[625135] call_tmp[625142]))
        (558421 'move' tmp[558419](76061 call + call_tmp[625128] call_tmp[625147]))
        (558426 'move' tmp[558406](558423 '_paramFoldLogical' tmp[558407] tmp[558419]))
      }
      unknown call_tmp[625154] "maybe param" "maybe type" "temp"
      (625157 'move' call_tmp[625154](375629 call intIdxType _mt[243] this[75979]))
      (541332 'init var' end[76066] tmp[558406] call_tmp[625154])
      (76069 'end of statement' start[76037])
      CForLoop[76099]
      {
        {
          unknown yret[511650] "YVV" "temp"
          unknown call_tmp[625161] "expr temp" "maybe param" "maybe type" "temp"
          (625164 'move' call_tmp[625161](76094 call(375642 call (partial) chpl_intToIdx _mt[243] this[75979]) i[76029]))
          (511653 'move' yret[511650](511652 'deref' call_tmp[625161]))
          (511655 yield yret[511650])
          (476229 'end of statement' i[76029])
        }
        label _continueLabel[76115]
        {
          (76100 '=' i[76029] start[76037])
          (476231 'end of statement' i[76029] start[76037])
        }
        {
          (76103 '!=' i[76029] end[76066])
          (476234 'end of statement' i[76029] end[76066])
        }
        {
          unknown call_tmp[625168] "expr temp" "maybe param" "maybe type" "temp"
          (625171 'move' call_tmp[625168](375652 call intIdxType _mt[243] this[75979]))
          unknown call_tmp[625175] "expr temp" "maybe param" "maybe type" "temp"
          (625178 'move' call_tmp[625175](375656 call stride _mt[243] this[75979]))
          unknown call_tmp[625180] "expr temp" "maybe param" "maybe type" "temp"
          (625183 'move' call_tmp[625180](76109 call _cast call_tmp[625168] call_tmp[625175]))
          (76106 '+=' i[76029] call_tmp[625180])
          (476237 'end of statement' i[76029])
        }
      }
      label _breakLabel[76116]
    }
    {
      {
        unknown _indexOfInterest[76129] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76130] "expr temp" "temp"
        unknown call_tmp[625187] "expr temp" "maybe param" "maybe type" "temp"
        (625190 'move' call_tmp[625187](76125 call(76121 call (partial) generalIterator _mt[243] this[75979])))
        (76139 'move' _iterator[76130](76137 call _getIterator call_tmp[625187]))
        Defer
        {
          {
            (76156 call _freeIterator _iterator[76130])
          }
        }
        { scopeless type
          (76145 'move' _indexOfInterest[76129](76142 call iteratorIndex _iterator[76130]))
        }
        ForLoop[76131]
        {
          unknown i[76149] "index var" "insert auto destroy"
          (476240 'end of statement')
          (76151 'move' i[76149] _indexOfInterest[76129])
          (476241 'end of statement' i[76149])
          unknown yret[511657] "YVV" "temp"
          (511660 'move' yret[511657](511659 'deref' i[76149]))
          (511662 yield yret[511657])
          (476243 'end of statement' i[76149])
          label _continueLabel[76134]
          _indexOfInterest[76129]
          _iterator[76130]
        }
        label _breakLabel[76135]
      }
    }
    (511648 return ret[511646])
  }
  where {
    unknown tmp[420742] "maybe param" "temp"
    unknown call_tmp[625194] "expr temp" "maybe param" "maybe type" "temp"
    (625197 'move' call_tmp[625194](375608 call boundedType _mt[243] this[75979]))
    (420753 'move' tmp[420742](75989 call == call_tmp[625194] bounded[64205]))
    unknown call_tmp[625199] "expr temp" "maybe param" "maybe type" "temp"
    (625202 'move' call_tmp[625199](420755 call _cond_invalid tmp[420742]))
    if call_tmp[625199]
    {
      (420758 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558433] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558434] "maybe param" "temp"
    unknown call_tmp[625204] "expr temp" "maybe param" "maybe type" "temp"
    (625207 'move' call_tmp[625204](420743 call isTrue tmp[420742]))
    (558439 'move' tmp[558434](558437 call _cond_test call_tmp[625204]))
    if tmp[558434]
    {
      unknown tmp[558441] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625211] "expr temp" "maybe param" "maybe type" "temp"
      (625214 'move' call_tmp[625211](375613 call stridable _mt[243] this[75979]))
      unknown call_tmp[625216] "expr temp" "maybe param" "maybe type" "temp"
      (625219 'move' call_tmp[625216](75993 call == call_tmp[625211] 1))
      (558443 'move' tmp[558441](420746 call isTrue call_tmp[625216]))
      (558448 'move' tmp[558433](558445 '_paramFoldLogical' tmp[558434] tmp[558441]))
    }
    {
      (558453 'move' tmp[558433](558450 '_paramFoldLogical' tmp[558434] 0))
    }
    (748285 call chpl_statementLevelSymbol tmp[558433])
  }
  function range[64316](?).these[76175](arg _mt[76180]:_MT[238], arg this[76177]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511666] "RVV" "temp"
    unknown call_tmp[625221] "expr temp" "maybe param" "maybe type" "temp"
    (625224 'move' call_tmp[625221](76322 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[625221]
    {
      unknown call_tmp[625226] "expr temp" "maybe param" "maybe type" "temp"
      (625229 'move' call_tmp[625226](76201 call _cond_test 1))
      if call_tmp[625226]
      {
        (76199 call(375673 call (partial) checkIfIterWillOverflow _mt[243] this[76177]))
      }
      unknown i[76208] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625235] "expr temp" "maybe param" "maybe type" "temp"
      (625238 'move' call_tmp[625235](375677 call intIdxType _mt[243] this[76177]))
      (541334 'default init var' i[76208] call_tmp[625235])
      (76211 'end of statement')
      unknown call_tmp[625242] "maybe param" "maybe type" "temp"
      (625245 'move' call_tmp[625242](76213 call _low _mt[243] this[76177]))
      const start[76216] "dead at end of block" "const" "insert auto destroy"
      (541336 'init var' start[76216] call_tmp[625242])
      (76219 'end of statement')
      unknown call_tmp[625249] "maybe param" "maybe type" "temp"
      (625252 'move' call_tmp[625249](76221 call _high _mt[243] this[76177]))
      const end[76224] "dead at end of block" "const" "insert auto destroy"
      (541338 'init var' end[76224] call_tmp[625249])
      (76227 'end of statement')
      CForLoop[76257]
      {
        {
          unknown yret[511670] "YVV" "temp"
          unknown call_tmp[625256] "expr temp" "maybe param" "maybe type" "temp"
          (625259 'move' call_tmp[625256](76252 call(375681 call (partial) chpl_intToIdx _mt[243] this[76177]) i[76208]))
          (511673 'move' yret[511670](511672 'deref' call_tmp[625256]))
          (511675 yield yret[511670])
          (476246 'end of statement' i[76208])
        }
        label _continueLabel[76273]
        {
          (76258 '=' i[76208] start[76216])
          (476248 'end of statement' i[76208] start[76216])
        }
        {
          (76261 '<=' i[76208] end[76224])
          (476251 'end of statement' i[76208] end[76224])
        }
        {
          unknown call_tmp[625263] "expr temp" "maybe param" "maybe type" "temp"
          (625266 'move' call_tmp[625263](375691 call intIdxType _mt[243] this[76177]))
          unknown call_tmp[625270] "expr temp" "maybe param" "maybe type" "temp"
          (625273 'move' call_tmp[625270](375695 call stride _mt[243] this[76177]))
          unknown call_tmp[625275] "expr temp" "maybe param" "maybe type" "temp"
          (625278 'move' call_tmp[625275](76267 call _cast call_tmp[625263] call_tmp[625270]))
          (76264 '+=' i[76208] call_tmp[625275])
          (476254 'end of statement' i[76208])
        }
      }
      label _breakLabel[76274]
    }
    {
      {
        unknown _indexOfInterest[76287] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76288] "expr temp" "temp"
        unknown call_tmp[625282] "expr temp" "maybe param" "maybe type" "temp"
        (625285 'move' call_tmp[625282](76283 call(76279 call (partial) generalIterator _mt[243] this[76177])))
        (76297 'move' _iterator[76288](76295 call _getIterator call_tmp[625282]))
        Defer
        {
          {
            (76314 call _freeIterator _iterator[76288])
          }
        }
        { scopeless type
          (76303 'move' _indexOfInterest[76287](76300 call iteratorIndex _iterator[76288]))
        }
        ForLoop[76289]
        {
          unknown i[76307] "index var" "insert auto destroy"
          (476257 'end of statement')
          (76309 'move' i[76307] _indexOfInterest[76287])
          (476258 'end of statement' i[76307])
          unknown yret[511677] "YVV" "temp"
          (511680 'move' yret[511677](511679 'deref' i[76307]))
          (511682 yield yret[511677])
          (476260 'end of statement' i[76307])
          label _continueLabel[76292]
          _indexOfInterest[76287]
          _iterator[76288]
        }
        label _breakLabel[76293]
      }
    }
    (511668 return ret[511666])
  }
  where {
    unknown tmp[420763] "maybe param" "temp"
    unknown call_tmp[625289] "expr temp" "maybe param" "maybe type" "temp"
    (625292 'move' call_tmp[625289](375662 call boundedType _mt[243] this[76177]))
    (420774 'move' tmp[420763](76187 call == call_tmp[625289] bounded[64205]))
    unknown call_tmp[625294] "expr temp" "maybe param" "maybe type" "temp"
    (625297 'move' call_tmp[625294](420776 call _cond_invalid tmp[420763]))
    if call_tmp[625294]
    {
      (420779 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558460] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558461] "maybe param" "temp"
    unknown call_tmp[625299] "expr temp" "maybe param" "maybe type" "temp"
    (625302 'move' call_tmp[625299](420764 call isTrue tmp[420763]))
    (558466 'move' tmp[558461](558464 call _cond_test call_tmp[625299]))
    if tmp[558461]
    {
      unknown tmp[558468] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625306] "expr temp" "maybe param" "maybe type" "temp"
      (625309 'move' call_tmp[625306](375667 call stridable _mt[243] this[76177]))
      unknown call_tmp[625311] "expr temp" "maybe param" "maybe type" "temp"
      (625314 'move' call_tmp[625311](76191 call == call_tmp[625306] 0))
      (558470 'move' tmp[558468](420767 call isTrue call_tmp[625311]))
      (558475 'move' tmp[558460](558472 '_paramFoldLogical' tmp[558461] tmp[558468]))
    }
    {
      (558480 'move' tmp[558460](558477 '_paramFoldLogical' tmp[558461] 0))
    }
    (748287 call chpl_statementLevelSymbol tmp[558460])
  }
  function range[64316](?).generalIterator[76333](arg _mt[76338]:_MT[238], arg this[76335]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511686] "RVV" "temp"
    unknown tmp[420784] "maybe param" "temp"
    (420795 'move' tmp[420784] 1)
    unknown call_tmp[625316] "expr temp" "maybe param" "maybe type" "temp"
    (625319 'move' call_tmp[625316](420797 call _cond_invalid tmp[420784]))
    if call_tmp[625316]
    {
      (420800 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558487] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558488] "maybe param" "temp"
    unknown call_tmp[625321] "expr temp" "maybe param" "maybe type" "temp"
    (625324 'move' call_tmp[625321](420785 call isTrue tmp[420784]))
    (558493 'move' tmp[558488](558491 call _cond_test call_tmp[625321]))
    if tmp[558488]
    {
      unknown tmp[558495] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625328] "expr temp" "maybe param" "maybe type" "temp"
      (625331 'move' call_tmp[625328](76346 call(76342 call (partial) isAmbiguous _mt[243] this[76335])))
      (558497 'move' tmp[558495](420788 call isTrue call_tmp[625328]))
      (558502 'move' tmp[558487](558499 '_paramFoldLogical' tmp[558488] tmp[558495]))
    }
    {
      (558507 'move' tmp[558487](558504 '_paramFoldLogical' tmp[558488] 0))
    }
    unknown call_tmp[625333] "expr temp" "maybe param" "maybe type" "temp"
    (625336 'move' call_tmp[625333](76357 call _cond_test tmp[558487]))
    if call_tmp[625333]
    {
      (76355 call boundsCheckHalt module=[255] HaltWrappers[209915] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358053 'referenced modules list' HaltWrappers[209915])
    }
    unknown i[76364] "dead at end of block" "insert auto destroy"
    unknown call_tmp[625340] "expr temp" "maybe param" "maybe type" "temp"
    (625343 'move' call_tmp[625340](375701 call intIdxType _mt[243] this[76335]))
    (541340 'default init var' i[76364] call_tmp[625340])
    (76367 'end of statement')
    unknown call_tmp[625347] "maybe param" "maybe type" "temp"
    (625350 'move' call_tmp[625347](76369 call first _mt[243] this[76335]))
    const start[76372] "dead at end of block" "const" "insert auto destroy"
    (541342 'init var' start[76372] call_tmp[625347])
    (76375 'end of statement')
    const end[76396] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558514] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558515] "maybe param" "temp"
    unknown call_tmp[625354] "expr temp" "maybe param" "maybe type" "temp"
    (625357 'move' call_tmp[625354](76377 call low _mt[243] this[76335]))
    unknown call_tmp[625361] "expr temp" "maybe param" "maybe type" "temp"
    (625364 'move' call_tmp[625361](76381 call high _mt[243] this[76335]))
    unknown call_tmp[625366] "expr temp" "maybe param" "maybe type" "temp"
    (625369 'move' call_tmp[625366](76384 call > call_tmp[625354] call_tmp[625361]))
    (558520 'move' tmp[558515](558518 call _cond_test call_tmp[625366]))
    if tmp[558515]
    {
      (558525 'move' tmp[558514](558522 '_paramFoldLogical' tmp[558515] start[76372]))
    }
    {
      unknown tmp[558527] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558529 'move' tmp[558527](76390 call last _mt[243] this[76335]))
      (558534 'move' tmp[558514](558531 '_paramFoldLogical' tmp[558515] tmp[558527]))
    }
    (541344 'init var' end[76396] tmp[558514])
    (76399 'end of statement' start[76372])
    CForLoop[76438]
    {
      {
        unknown yret[511690] "YVV" "temp"
        (511693 'move' yret[511690](511692 'deref' i[76364]))
        (511695 yield yret[511690])
        (476265 'end of statement' i[76364])
        unknown call_tmp[625373] "expr temp" "maybe param" "maybe type" "temp"
        (625376 'move' call_tmp[625373](76427 call == i[76364] end[76396]))
        unknown call_tmp[625378] "expr temp" "maybe param" "maybe type" "temp"
        (625381 'move' call_tmp[625378](76432 call _cond_test call_tmp[625373]))
        if call_tmp[625378]
        {
          break _breakLabel[76455] _breakLabel[76455]
        }
      }
      label _continueLabel[76454]
      {
        (76439 '=' i[76364] start[76372])
        (476267 'end of statement' i[76364] start[76372])
      }
      {
        unknown call_tmp[625385] "expr temp" "maybe param" "maybe type" "temp"
        (625388 'move' call_tmp[625385](375711 call high _mt[243] this[76335]))
        unknown call_tmp[625392] "expr temp" "maybe param" "maybe type" "temp"
        (625395 'move' call_tmp[625392](375715 call low _mt[243] this[76335]))
        (76442 '>=' call_tmp[625385] call_tmp[625392])
      }
      {
        unknown call_tmp[625399] "expr temp" "maybe param" "maybe type" "temp"
        (625402 'move' call_tmp[625399](375720 call intIdxType _mt[243] this[76335]))
        unknown call_tmp[625406] "expr temp" "maybe param" "maybe type" "temp"
        (625409 'move' call_tmp[625406](375724 call stride _mt[243] this[76335]))
        unknown call_tmp[625411] "expr temp" "maybe param" "maybe type" "temp"
        (625414 'move' call_tmp[625411](76448 call _cast call_tmp[625399] call_tmp[625406]))
        (76445 '+=' i[76364] call_tmp[625411])
        (476271 'end of statement' i[76364])
      }
    }
    label _breakLabel[76455]
    (511688 return ret[511686])
  }
  function range[64316](?).these[76467](arg _mt[76472]:_MT[238], arg this[76469]:range[64316](?) :
  range[64316](?), param arg tag[76464]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511699] "RVV" "temp"
    unknown call_tmp[625416] "expr temp" "maybe param" "maybe type" "temp"
    (625419 'move' call_tmp[625416](76489 call isBoundedRange this[76469]))
    unknown call_tmp[625421] "expr temp" "maybe param" "maybe type" "temp"
    (625424 'move' call_tmp[625421](76490 call ! call_tmp[625416]))
    unknown call_tmp[625426] "expr temp" "maybe param" "maybe type" "temp"
    (625429 'move' call_tmp[625426](76514 call _cond_test call_tmp[625421]))
    if call_tmp[625426]
    {
      (76511 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420826] "maybe param" "temp"
    (420837 'move' tmp[420826] 1)
    unknown call_tmp[625431] "expr temp" "maybe param" "maybe type" "temp"
    (625434 'move' call_tmp[625431](420839 call _cond_invalid tmp[420826]))
    if call_tmp[625431]
    {
      (420842 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558541] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558542] "maybe param" "temp"
    unknown call_tmp[625436] "expr temp" "maybe param" "maybe type" "temp"
    (625439 'move' call_tmp[625436](420827 call isTrue tmp[420826]))
    (558547 'move' tmp[558542](558545 call _cond_test call_tmp[625436]))
    if tmp[558542]
    {
      unknown tmp[558549] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625443] "expr temp" "maybe param" "maybe type" "temp"
      (625446 'move' call_tmp[625443](76525 call(76521 call (partial) isAmbiguous _mt[243] this[76469])))
      (558551 'move' tmp[558549](420830 call isTrue call_tmp[625443]))
      (558556 'move' tmp[558541](558553 '_paramFoldLogical' tmp[558542] tmp[558549]))
    }
    {
      (558561 'move' tmp[558541](558558 '_paramFoldLogical' tmp[558542] 0))
    }
    unknown call_tmp[625448] "expr temp" "maybe param" "maybe type" "temp"
    (625451 'move' call_tmp[625448](76537 call _cond_test tmp[558541]))
    if call_tmp[625448]
    {
      (76534 call boundsCheckHalt module=[255] HaltWrappers[209915] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358065 'referenced modules list' HaltWrappers[209915])
    }
    unknown call_tmp[625453] "expr temp" "maybe param" "maybe type" "temp"
    (625456 'move' call_tmp[625453](76564 call _cond_test debugChapelRange[64195]))
    if call_tmp[625453]
    {
      (76561 call chpl_debug_writeln "*** In range standalone iterator:")
    }
    unknown call_tmp[625460] "maybe param" "maybe type" "temp"
    (625463 'move' call_tmp[625460](76569 call size _mt[243] this[76469]))
    const len[76572] "dead at end of block" "const" "insert auto destroy"
    (541346 'init var' len[76572] call_tmp[625460])
    (76575 'end of statement')
    const numChunks[76603] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558568] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558569] "maybe param" "temp"
    unknown call_tmp[625465] "expr temp" "maybe param" "maybe type" "temp"
    (625468 'move' call_tmp[625465](76594 'task_get_serial'))
    (558574 'move' tmp[558569](558572 call _cond_test call_tmp[625465]))
    if tmp[558569]
    {
      (558579 'move' tmp[558568](558576 '_paramFoldLogical' tmp[558569] 1))
    }
    {
      unknown tmp[558581] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558583 'move' tmp[558581](76599 call _computeNumChunks len[76572]))
      (558588 'move' tmp[558568](558585 '_paramFoldLogical' tmp[558569] tmp[558581]))
    }
    (541348 'init var' numChunks[76603] tmp[558568])
    (76606 'end of statement' len[76572])
    unknown call_tmp[625470] "expr temp" "maybe param" "maybe type" "temp"
    (625473 'move' call_tmp[625470](76649 call _cond_test debugChapelRange[64195]))
    if call_tmp[625470]
    {
      (76646 call chpl_debug_writeln "*** RI: length=" len[76572] " numChunks=" numChunks[76603])
      (476278 'end of statement' len[76572] numChunks[76603])
    }
    unknown call_tmp[625475] "expr temp" "maybe param" "maybe type" "temp"
    (625478 'move' call_tmp[625475](76655 call <= numChunks[76603] 1))
    unknown call_tmp[625480] "expr temp" "maybe param" "maybe type" "temp"
    (625483 'move' call_tmp[625480](77304 call _cond_test call_tmp[625475]))
    if call_tmp[625480]
    {
      {
        unknown _indexOfInterest[76663] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76664] "expr temp" "temp"
        (76673 'move' _iterator[76664](76671 call _getIterator this[76469]))
        Defer
        {
          {
            (76689 call _freeIterator _iterator[76664])
          }
        }
        { scopeless type
          (76678 'move' _indexOfInterest[76663](76675 call iteratorIndex _iterator[76664]))
        }
        ForLoop[76665]
        {
          unknown i[76682] "index var" "insert auto destroy"
          (476282 'end of statement')
          (76684 'move' i[76682] _indexOfInterest[76663])
          (476283 'end of statement' i[76682])
          {
            unknown yret[511703] "YVV" "temp"
            (511706 'move' yret[511703](511705 'deref' i[76682]))
            (511708 yield yret[511703])
            (476285 'end of statement' i[76682])
          }
          label _continueLabel[76668]
          _indexOfInterest[76663]
          _iterator[76664]
        }
        label _breakLabel[76669]
      }
    }
    {
      {
        unknown tmpIter[76939] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[625485] "expr temp" "maybe param" "maybe type" "temp"
        (625488 'move' call_tmp[625485](76699 call chpl_build_low_bounded_range 0))
        (76942 'move' tmpIter[76939](76702 call # call_tmp[625485] numChunks[76603]))
        unknown isRngDomArr[77284] "maybe param" "temp"
        unknown tmp[420847] "maybe param" "temp"
        (420858 'move' tmp[420847](77286 call isBoundedRange tmpIter[76939]))
        unknown call_tmp[625490] "expr temp" "maybe param" "maybe type" "temp"
        (625493 'move' call_tmp[625490](420860 call _cond_invalid tmp[420847]))
        if call_tmp[625490]
        {
          (420863 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[558622] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558623] "maybe param" "temp"
        unknown call_tmp[625495] "expr temp" "maybe param" "maybe type" "temp"
        (625498 'move' call_tmp[625495](420848 call isTrue tmp[420847]))
        (558628 'move' tmp[558623](558626 call _cond_test call_tmp[625495]))
        if tmp[558623]
        {
          (558633 'move' tmp[558622](558630 '_paramFoldLogical' tmp[558623] 1))
        }
        {
          unknown tmp[420868] "maybe param" "temp"
          (420879 'move' tmp[420868](77289 call isDomain tmpIter[76939]))
          unknown call_tmp[625500] "expr temp" "maybe param" "maybe type" "temp"
          (625503 'move' call_tmp[625500](420881 call _cond_invalid tmp[420868]))
          if call_tmp[625500]
          {
            (420884 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558595] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558596] "maybe param" "temp"
          unknown call_tmp[625505] "expr temp" "maybe param" "maybe type" "temp"
          (625508 'move' call_tmp[625505](420869 call isTrue tmp[420868]))
          (558601 'move' tmp[558596](558599 call _cond_test call_tmp[625505]))
          if tmp[558596]
          {
            (558606 'move' tmp[558595](558603 '_paramFoldLogical' tmp[558596] 1))
          }
          {
            unknown tmp[558608] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[625510] "expr temp" "maybe param" "maybe type" "temp"
            (625513 'move' call_tmp[625510](77292 call isArray tmpIter[76939]))
            (558610 'move' tmp[558608](420873 call isTrue call_tmp[625510]))
            (558615 'move' tmp[558595](558612 '_paramFoldLogical' tmp[558596] tmp[558608]))
          }
          unknown tmp[558635] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (558637 'move' tmp[558635](420852 call isTrue tmp[558595]))
          (558642 'move' tmp[558622](558639 '_paramFoldLogical' tmp[558623] tmp[558635]))
        }
        (77299 'move' isRngDomArr[77284] tmp[558622])
        if isRngDomArr[77284]
        {
          const _coforallCount[77151] "const" "end count" "temp"
          (77220 'move' _coforallCount[77151](77217 call _endCountAlloc 1))
          unknown numTasks[77152] "temp"
          (77204 'move' numTasks[77152](77200 call size _mt[243] tmpIter[76939]))
          (77195 call _upEndCount _coforallCount[77151] 1 numTasks[77152])
          (476288 'end of statement')
          (77192 call chpl_resetTaskSpawn numTasks[77152])
          (476289 'end of statement')
          unknown _indexOfInterest[77159] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77160] "expr temp" "temp"
          (77169 'move' _iterator[77160](77167 call _getIterator tmpIter[76939]))
          Defer
          {
            {
              (77185 call _freeIterator _iterator[77160])
            }
          }
          { scopeless type
            (77174 'move' _indexOfInterest[77159](77171 call iteratorIndex _iterator[77160]))
          }
          ForLoop[77161]
          {
            unknown chunk[77178] "coforall index var" "index var" "insert auto destroy"
            (476291 'end of statement')
            (77180 'move' chunk[77178] _indexOfInterest[77159])
            (476292 'end of statement' chunk[77178])
            {
              {
                unknown call_tmp[625519] "expr temp" "maybe param" "maybe type" "temp"
                (625522 'move' call_tmp[625519](375800 call stridable _mt[243] this[76469]))
                unknown call_tmp[625524] "expr temp" "maybe param" "maybe type" "temp"
                (625527 'move' call_tmp[625524](76946 call _cond_test call_tmp[625519]))
                if call_tmp[625524]
                {
                  unknown call_tmp[625529] "expr temp" "maybe param" "maybe type" "temp"
                  (625532 'move' call_tmp[625529](76957 call - len[76572] 1))
                  unknown call_tmp[625534] "maybe param" "maybe type" "temp"
                  (625537 'move' call_tmp[625534](76952 call _computeBlock len[76572] numChunks[76603] chunk[77178] call_tmp[625529]))
                  const tmp[76950] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541350 'init var' tmp[76950] call_tmp[625534])
                  (76962 call _check_tuple_var_decl tmp[76950] 2)
                  (476294 'end of statement')
                  unknown call_tmp[625539] "maybe param" "maybe type" "temp"
                  (625542 'move' call_tmp[625539](76967 call tmp[76950] 0))
                  const lo[76965] "dead at end of block" "const" "insert auto destroy"
                  (541352 'init var' lo[76965] call_tmp[625539])
                  unknown call_tmp[625544] "maybe param" "maybe type" "temp"
                  (625547 'move' call_tmp[625544](76972 call tmp[76950] 1))
                  const hi[76970] "dead at end of block" "const" "insert auto destroy"
                  (541354 'init var' hi[76970] call_tmp[625544])
                  (76975 'end of statement')
                  unknown call_tmp[625549] "expr temp" "maybe param" "maybe type" "temp"
                  (625552 'move' call_tmp[625549](76982 call - lo[76965] 1))
                  unknown call_tmp[625554] "maybe param" "maybe type" "temp"
                  (625557 'move' call_tmp[625554](76979 call - hi[76970] call_tmp[625549]))
                  const mylen[76977] "dead at end of block" "const" "insert auto destroy"
                  (541356 'init var' mylen[76977] call_tmp[625554])
                  (76986 'end of statement')
                  unknown call_tmp[625561] "maybe param" "maybe type" "temp"
                  (625564 'move' call_tmp[625561](76990 call(375810 call (partial) orderToIndex _mt[243] this[76469]) lo[76965]))
                  unknown low[76988] "dead at end of block" "insert auto destroy"
                  (541358 'init var' low[76988] call_tmp[625561])
                  (76993 'end of statement')
                  unknown call_tmp[625570] "expr temp" "maybe param" "maybe type" "temp"
                  (625573 'move' call_tmp[625570](375819 call strType _mt[243] this[76469]))
                  unknown call_tmp[625575] "expr temp" "maybe param" "maybe type" "temp"
                  (625578 'move' call_tmp[625575](77004 call chpl__idxToInt low[76988]))
                  unknown call_tmp[625580] "expr temp" "maybe param" "maybe type" "temp"
                  (625583 'move' call_tmp[625580](77001 call _cast call_tmp[625570] call_tmp[625575]))
                  unknown call_tmp[625587] "expr temp" "maybe param" "maybe type" "temp"
                  (625590 'move' call_tmp[625587](375824 call stride _mt[243] this[76469]))
                  unknown call_tmp[625594] "expr temp" "maybe param" "maybe type" "temp"
                  (625597 'move' call_tmp[625594](375828 call strType _mt[243] this[76469]))
                  unknown call_tmp[625599] "expr temp" "maybe param" "maybe type" "temp"
                  (625602 'move' call_tmp[625599](77013 call - mylen[76977] 1))
                  unknown call_tmp[625604] "expr temp" "maybe param" "maybe type" "temp"
                  (625607 'move' call_tmp[625604](77010 call _cast call_tmp[625594] call_tmp[625599]))
                  unknown call_tmp[625609] "expr temp" "maybe param" "maybe type" "temp"
                  (625612 'move' call_tmp[625609](77007 call * call_tmp[625587] call_tmp[625604]))
                  unknown call_tmp[625614] "expr temp" "maybe param" "maybe type" "temp"
                  (625617 'move' call_tmp[625614](76999 call + call_tmp[625580] call_tmp[625609]))
                  unknown call_tmp[625619] "maybe param" "maybe type" "temp"
                  (625622 'move' call_tmp[625619](76997 call(375815 call (partial) chpl_intToIdx _mt[243] this[76469]) call_tmp[625614]))
                  unknown high[76995] "dead at end of block" "insert auto destroy"
                  (541360 'init var' high[76995] call_tmp[625619])
                  (77017 'end of statement' hi[76970] lo[76965] lo[76965] low[76988] mylen[76977])
                  unknown call_tmp[625626] "expr temp" "maybe param" "maybe type" "temp"
                  (625629 'move' call_tmp[625626](375833 call stride _mt[243] this[76469]))
                  unknown call_tmp[625631] "expr temp" "maybe param" "maybe type" "temp"
                  (625634 'move' call_tmp[625631](77021 call < call_tmp[625626] 0))
                  unknown call_tmp[625636] "expr temp" "maybe param" "maybe type" "temp"
                  (625639 'move' call_tmp[625636](77019 call _cond_test call_tmp[625631]))
                  if call_tmp[625636]
                  {
                    (77027 call <=> low[76988] high[76995])
                    (476300 'end of statement' low[76988] high[76995])
                  }
                  {
                    unknown _indexOfInterest[77032] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77034] "expr temp" "temp"
                    unknown call_tmp[625643] "expr temp" "maybe param" "maybe type" "temp"
                    (625646 'move' call_tmp[625643](375841 call stride _mt[243] this[76469]))
                    unknown call_tmp[625648] "expr temp" "maybe param" "maybe type" "temp"
                    (625651 'move' call_tmp[625648](77041 call chpl_direct_range_iter low[76988] high[76995] call_tmp[625643]))
                    (77036 'move' _iterator[77034](77039 call _getIterator call_tmp[625648]))
                    Defer
                    {
                      {
                        (77047 call _freeIterator _iterator[77034])
                      }
                    }
                    { scopeless type
                      (77051 'move' _indexOfInterest[77032](77054 call iteratorIndex _iterator[77034]))
                    }
                    ForLoop[77056]
                    {
                      unknown i[77059] "index var" "insert auto destroy"
                      (476304 'end of statement')
                      (77061 'move' i[77059] _indexOfInterest[77032])
                      (476305 'end of statement' i[77059])
                      {
                        unknown yret[511710] "YVV" "temp"
                        (511713 'move' yret[511710](511712 'deref' i[77059]))
                        (511715 yield yret[511710])
                        (476307 'end of statement' i[77059])
                      }
                      label _continueLabel[77067]
                      _indexOfInterest[77032]
                      _iterator[77034]
                    }
                    label _breakLabel[77069]
                  }
                }
                {
                  unknown call_tmp[625655] "expr temp" "maybe param" "maybe type" "temp"
                  (625658 'move' call_tmp[625655](77080 call _high _mt[243] this[76469]))
                  unknown call_tmp[625662] "expr temp" "maybe param" "maybe type" "temp"
                  (625665 'move' call_tmp[625662](77084 call _low _mt[243] this[76469]))
                  unknown call_tmp[625669] "expr temp" "maybe param" "maybe type" "temp"
                  (625672 'move' call_tmp[625669](77088 call _low _mt[243] this[76469]))
                  unknown call_tmp[625674] "maybe param" "maybe type" "temp"
                  (625677 'move' call_tmp[625674](77075 call _computeBlock len[76572] numChunks[76603] chunk[77178] call_tmp[625655] call_tmp[625662] call_tmp[625669]))
                  const tmp[77073] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541362 'init var' tmp[77073] call_tmp[625674])
                  (77093 call _check_tuple_var_decl tmp[77073] 2)
                  (476309 'end of statement')
                  unknown call_tmp[625679] "maybe param" "maybe type" "temp"
                  (625682 'move' call_tmp[625679](77098 call tmp[77073] 0))
                  const lo[77096] "dead at end of block" "const" "insert auto destroy"
                  (541364 'init var' lo[77096] call_tmp[625679])
                  unknown call_tmp[625684] "maybe param" "maybe type" "temp"
                  (625687 'move' call_tmp[625684](77103 call tmp[77073] 1))
                  const hi[77101] "dead at end of block" "const" "insert auto destroy"
                  (541366 'init var' hi[77101] call_tmp[625684])
                  (77106 'end of statement')
                  {
                    unknown _indexOfInterest[77108] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77110] "expr temp" "temp"
                    unknown call_tmp[625689] "expr temp" "maybe param" "maybe type" "temp"
                    (625692 'move' call_tmp[625689](77117 call chpl_direct_range_iter lo[77096] hi[77101] 1))
                    (77112 'move' _iterator[77110](77115 call _getIterator call_tmp[625689]))
                    Defer
                    {
                      {
                        (77123 call _freeIterator _iterator[77110])
                      }
                    }
                    { scopeless type
                      (77127 'move' _indexOfInterest[77108](77130 call iteratorIndex _iterator[77110]))
                    }
                    ForLoop[77132]
                    {
                      unknown i[77135] "index var" "insert auto destroy"
                      (476311 'end of statement')
                      (77137 'move' i[77135] _indexOfInterest[77108])
                      (476312 'end of statement' i[77135])
                      {
                        unknown yret[511717] "YVV" "temp"
                        unknown call_tmp[625696] "expr temp" "maybe param" "maybe type" "temp"
                        (625699 'move' call_tmp[625696](77143 call(375851 call (partial) chpl_intToIdx _mt[243] this[76469]) i[77135]))
                        (511720 'move' yret[511717](511719 'deref' call_tmp[625696]))
                        (511722 yield yret[511717])
                        (476314 'end of statement' i[77135])
                      }
                      label _continueLabel[77145]
                      _indexOfInterest[77108]
                      _iterator[77110]
                    }
                    label _breakLabel[77147]
                  }
                }
              }
              (77154 call _downEndCount _coforallCount[77151] nil[44])
              (77153 'coforall loop')
            }
            label _continueLabel[77164]
            _indexOfInterest[77159]
            _iterator[77160]
          }
          label _breakLabel[77165]
          Defer
          {
            {
              (77207 call _endCountFree _coforallCount[77151])
            }
          }
          (77212 call _waitEndCount _coforallCount[77151] 1 numTasks[77152])
        }
        {
          const _coforallCount[77224] "const" "end count" "temp"
          (77281 'move' _coforallCount[77224](77278 call _endCountAlloc 1))
          unknown _indexOfInterest[77232] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77233] "expr temp" "temp"
          (77242 'move' _iterator[77233](77240 call _getIterator tmpIter[76939]))
          Defer
          {
            {
              (77258 call _freeIterator _iterator[77233])
            }
          }
          { scopeless type
            (77247 'move' _indexOfInterest[77232](77244 call iteratorIndex _iterator[77233]))
          }
          ForLoop[77234]
          {
            unknown chunk[77251] "coforall index var" "index var" "insert auto destroy"
            (476320 'end of statement')
            (77253 'move' chunk[77251] _indexOfInterest[77232])
            (476321 'end of statement' chunk[77251])
            (77265 call _upEndCount _coforallCount[77224] 1)
            (476323 'end of statement')
            {
              {
                unknown call_tmp[625703] "expr temp" "maybe param" "maybe type" "temp"
                (625706 'move' call_tmp[625703](375743 call stridable _mt[243] this[76469]))
                unknown call_tmp[625708] "expr temp" "maybe param" "maybe type" "temp"
                (625711 'move' call_tmp[625708](76934 call _cond_test call_tmp[625703]))
                if call_tmp[625708]
                {
                  unknown call_tmp[625713] "expr temp" "maybe param" "maybe type" "temp"
                  (625716 'move' call_tmp[625713](76717 call - len[76572] 1))
                  unknown call_tmp[625718] "maybe param" "maybe type" "temp"
                  (625721 'move' call_tmp[625718](76719 call _computeBlock len[76572] numChunks[76603] chunk[77251] call_tmp[625713]))
                  const tmp[76720] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541368 'init var' tmp[76720] call_tmp[625718])
                  (76727 call _check_tuple_var_decl tmp[76720] 2)
                  (476324 'end of statement')
                  unknown call_tmp[625723] "maybe param" "maybe type" "temp"
                  (625726 'move' call_tmp[625723](76721 call tmp[76720] 0))
                  const lo[76705] "dead at end of block" "const" "insert auto destroy"
                  (541370 'init var' lo[76705] call_tmp[625723])
                  unknown call_tmp[625728] "maybe param" "maybe type" "temp"
                  (625731 'move' call_tmp[625728](76724 call tmp[76720] 1))
                  const hi[76707] "dead at end of block" "const" "insert auto destroy"
                  (541372 'init var' hi[76707] call_tmp[625728])
                  (76732 'end of statement')
                  unknown call_tmp[625733] "expr temp" "maybe param" "maybe type" "temp"
                  (625736 'move' call_tmp[625733](76737 call - lo[76705] 1))
                  unknown call_tmp[625738] "maybe param" "maybe type" "temp"
                  (625741 'move' call_tmp[625738](76739 call - hi[76707] call_tmp[625733]))
                  const mylen[76741] "dead at end of block" "const" "insert auto destroy"
                  (541374 'init var' mylen[76741] call_tmp[625738])
                  (76744 'end of statement')
                  unknown call_tmp[625745] "maybe param" "maybe type" "temp"
                  (625748 'move' call_tmp[625745](76748 call(375753 call (partial) orderToIndex _mt[243] this[76469]) lo[76705]))
                  unknown low[76749] "dead at end of block" "insert auto destroy"
                  (541376 'init var' low[76749] call_tmp[625745])
                  (76752 'end of statement')
                  unknown call_tmp[625754] "expr temp" "maybe param" "maybe type" "temp"
                  (625757 'move' call_tmp[625754](375763 call strType _mt[243] this[76469]))
                  unknown call_tmp[625759] "expr temp" "maybe param" "maybe type" "temp"
                  (625762 'move' call_tmp[625759](76757 call chpl__idxToInt low[76749]))
                  unknown call_tmp[625764] "expr temp" "maybe param" "maybe type" "temp"
                  (625767 'move' call_tmp[625764](76759 call _cast call_tmp[625754] call_tmp[625759]))
                  unknown call_tmp[625771] "expr temp" "maybe param" "maybe type" "temp"
                  (625774 'move' call_tmp[625771](375767 call stride _mt[243] this[76469]))
                  unknown call_tmp[625778] "expr temp" "maybe param" "maybe type" "temp"
                  (625781 'move' call_tmp[625778](375772 call strType _mt[243] this[76469]))
                  unknown call_tmp[625783] "expr temp" "maybe param" "maybe type" "temp"
                  (625786 'move' call_tmp[625783](76764 call - mylen[76741] 1))
                  unknown call_tmp[625788] "expr temp" "maybe param" "maybe type" "temp"
                  (625791 'move' call_tmp[625788](76767 call _cast call_tmp[625778] call_tmp[625783]))
                  unknown call_tmp[625793] "expr temp" "maybe param" "maybe type" "temp"
                  (625796 'move' call_tmp[625793](76769 call * call_tmp[625771] call_tmp[625788]))
                  unknown call_tmp[625798] "expr temp" "maybe param" "maybe type" "temp"
                  (625801 'move' call_tmp[625798](76771 call + call_tmp[625764] call_tmp[625793]))
                  unknown call_tmp[625803] "maybe param" "maybe type" "temp"
                  (625806 'move' call_tmp[625803](76774 call(375758 call (partial) chpl_intToIdx _mt[243] this[76469]) call_tmp[625798]))
                  unknown high[76775] "dead at end of block" "insert auto destroy"
                  (541378 'init var' high[76775] call_tmp[625803])
                  (76778 'end of statement' hi[76707] lo[76705] lo[76705] low[76749] mylen[76741])
                  unknown call_tmp[625810] "expr temp" "maybe param" "maybe type" "temp"
                  (625813 'move' call_tmp[625810](375776 call stride _mt[243] this[76469]))
                  unknown call_tmp[625815] "expr temp" "maybe param" "maybe type" "temp"
                  (625818 'move' call_tmp[625815](76781 call < call_tmp[625810] 0))
                  unknown call_tmp[625820] "expr temp" "maybe param" "maybe type" "temp"
                  (625823 'move' call_tmp[625820](76788 call _cond_test call_tmp[625815]))
                  if call_tmp[625820]
                  {
                    (76785 call <=> low[76749] high[76775])
                    (476330 'end of statement' low[76749] high[76775])
                  }
                  {
                    unknown _indexOfInterest[76805] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76806] "expr temp" "temp"
                    unknown call_tmp[625827] "expr temp" "maybe param" "maybe type" "temp"
                    (625830 'move' call_tmp[625827](375783 call stride _mt[243] this[76469]))
                    unknown call_tmp[625832] "expr temp" "maybe param" "maybe type" "temp"
                    (625835 'move' call_tmp[625832](76824 call chpl_direct_range_iter low[76749] high[76775] call_tmp[625827]))
                    (76815 'move' _iterator[76806](76813 call _getIterator call_tmp[625832]))
                    Defer
                    {
                      {
                        (76840 call _freeIterator _iterator[76806])
                      }
                    }
                    { scopeless type
                      (76829 'move' _indexOfInterest[76805](76826 call iteratorIndex _iterator[76806]))
                    }
                    ForLoop[76807]
                    {
                      unknown i[76833] "index var" "insert auto destroy"
                      (476334 'end of statement')
                      (76835 'move' i[76833] _indexOfInterest[76805])
                      (476335 'end of statement' i[76833])
                      {
                        unknown yret[511724] "YVV" "temp"
                        (511727 'move' yret[511724](511726 'deref' i[76833]))
                        (511729 yield yret[511724])
                        (476337 'end of statement' i[76833])
                      }
                      label _continueLabel[76810]
                      _indexOfInterest[76805]
                      _iterator[76806]
                    }
                    label _breakLabel[76811]
                  }
                }
                {
                  unknown call_tmp[625839] "expr temp" "maybe param" "maybe type" "temp"
                  (625842 'move' call_tmp[625839](76858 call _high _mt[243] this[76469]))
                  unknown call_tmp[625846] "expr temp" "maybe param" "maybe type" "temp"
                  (625849 'move' call_tmp[625846](76862 call _low _mt[243] this[76469]))
                  unknown call_tmp[625853] "expr temp" "maybe param" "maybe type" "temp"
                  (625856 'move' call_tmp[625853](76866 call _low _mt[243] this[76469]))
                  unknown call_tmp[625858] "maybe param" "maybe type" "temp"
                  (625861 'move' call_tmp[625858](76869 call _computeBlock len[76572] numChunks[76603] chunk[77251] call_tmp[625839] call_tmp[625846] call_tmp[625853]))
                  const tmp[76870] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541380 'init var' tmp[76870] call_tmp[625858])
                  (76877 call _check_tuple_var_decl tmp[76870] 2)
                  (476339 'end of statement')
                  unknown call_tmp[625863] "maybe param" "maybe type" "temp"
                  (625866 'move' call_tmp[625863](76871 call tmp[76870] 0))
                  const lo[76847] "dead at end of block" "const" "insert auto destroy"
                  (541382 'init var' lo[76847] call_tmp[625863])
                  unknown call_tmp[625868] "maybe param" "maybe type" "temp"
                  (625871 'move' call_tmp[625868](76874 call tmp[76870] 1))
                  const hi[76849] "dead at end of block" "const" "insert auto destroy"
                  (541384 'init var' hi[76849] call_tmp[625868])
                  (76882 'end of statement')
                  {
                    unknown _indexOfInterest[76896] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76897] "expr temp" "temp"
                    unknown call_tmp[625873] "expr temp" "maybe param" "maybe type" "temp"
                    (625876 'move' call_tmp[625873](76911 call chpl_direct_range_iter lo[76847] hi[76849] 1))
                    (76906 'move' _iterator[76897](76904 call _getIterator call_tmp[625873]))
                    Defer
                    {
                      {
                        (76927 call _freeIterator _iterator[76897])
                      }
                    }
                    { scopeless type
                      (76916 'move' _indexOfInterest[76896](76913 call iteratorIndex _iterator[76897]))
                    }
                    ForLoop[76898]
                    {
                      unknown i[76920] "index var" "insert auto destroy"
                      (476341 'end of statement')
                      (76922 'move' i[76920] _indexOfInterest[76896])
                      (476342 'end of statement' i[76920])
                      {
                        unknown yret[511731] "YVV" "temp"
                        unknown call_tmp[625880] "expr temp" "maybe param" "maybe type" "temp"
                        (625883 'move' call_tmp[625880](76892 call(375792 call (partial) chpl_intToIdx _mt[243] this[76469]) i[76920]))
                        (511734 'move' yret[511731](511733 'deref' call_tmp[625880]))
                        (511736 yield yret[511731])
                        (476344 'end of statement' i[76920])
                      }
                      label _continueLabel[76901]
                      _indexOfInterest[76896]
                      _iterator[76897]
                    }
                    label _breakLabel[76902]
                  }
                }
              }
              (77227 call _downEndCount _coforallCount[77224] nil[44])
              (77226 'coforall loop')
            }
            label _continueLabel[77237]
            _indexOfInterest[77232]
            _iterator[77233]
          }
          label _breakLabel[77238]
          Defer
          {
            {
              (77269 call _endCountFree _coforallCount[77224])
            }
          }
          (77274 call _waitEndCount _coforallCount[77224] 1)
        }
      }
    }
    (511701 return ret[511699])
  }
  where {
    unknown tmp[420805] "maybe param" "temp"
    (420816 'move' tmp[420805](76479 call == tag[76464] standalone[451]))
    unknown call_tmp[625885] "expr temp" "maybe param" "maybe type" "temp"
    (625888 'move' call_tmp[625885](420818 call _cond_invalid tmp[420805]))
    if call_tmp[625885]
    {
      (420821 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558649] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558650] "maybe param" "temp"
    unknown call_tmp[625890] "expr temp" "maybe param" "maybe type" "temp"
    (625893 'move' call_tmp[625890](420806 call isTrue tmp[420805]))
    (558655 'move' tmp[558650](558653 call _cond_test call_tmp[625890]))
    if tmp[558650]
    {
      unknown tmp[558657] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625895] "expr temp" "maybe param" "maybe type" "temp"
      (625898 'move' call_tmp[625895](76482 call ! localeModelHasSublocales[187415]))
      (558659 'move' tmp[558657](420809 call isTrue call_tmp[625895]))
      (558664 'move' tmp[558649](558661 '_paramFoldLogical' tmp[558650] tmp[558657]))
    }
    {
      (558669 'move' tmp[558649](558666 '_paramFoldLogical' tmp[558650] 0))
    }
    (748289 call chpl_statementLevelSymbol tmp[558649])
  }
  function range[64316](?).these[77318](arg _mt[77323]:_MT[238], arg this[77320]:range[64316](?) :
  range[64316](?), param arg tag[77315]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511740] "RVV" "temp"
    unknown call_tmp[625900] "expr temp" "maybe param" "maybe type" "temp"
    (625903 'move' call_tmp[625900](77335 call isBoundedRange this[77320]))
    unknown call_tmp[625905] "expr temp" "maybe param" "maybe type" "temp"
    (625908 'move' call_tmp[625905](77336 call ! call_tmp[625900]))
    unknown call_tmp[625910] "expr temp" "maybe param" "maybe type" "temp"
    (625913 'move' call_tmp[625910](77343 call _cond_test call_tmp[625905]))
    if call_tmp[625910]
    {
      (77341 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420889] "maybe param" "temp"
    (420900 'move' tmp[420889] 1)
    unknown call_tmp[625915] "expr temp" "maybe param" "maybe type" "temp"
    (625918 'move' call_tmp[625915](420902 call _cond_invalid tmp[420889]))
    if call_tmp[625915]
    {
      (420905 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558676] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558677] "maybe param" "temp"
    unknown call_tmp[625920] "expr temp" "maybe param" "maybe type" "temp"
    (625923 'move' call_tmp[625920](420890 call isTrue tmp[420889]))
    (558682 'move' tmp[558677](558680 call _cond_test call_tmp[625920]))
    if tmp[558677]
    {
      unknown tmp[558684] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625927] "expr temp" "maybe param" "maybe type" "temp"
      (625930 'move' call_tmp[625927](77355 call(77351 call (partial) isAmbiguous _mt[243] this[77320])))
      (558686 'move' tmp[558684](420893 call isTrue call_tmp[625927]))
      (558691 'move' tmp[558676](558688 '_paramFoldLogical' tmp[558677] tmp[558684]))
    }
    {
      (558696 'move' tmp[558676](558693 '_paramFoldLogical' tmp[558677] 0))
    }
    unknown call_tmp[625932] "expr temp" "maybe param" "maybe type" "temp"
    (625935 'move' call_tmp[625932](77366 call _cond_test tmp[558676]))
    if call_tmp[625932]
    {
      (77364 call boundsCheckHalt module=[255] HaltWrappers[209915] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358080 'referenced modules list' HaltWrappers[209915])
    }
    unknown call_tmp[625937] "expr temp" "maybe param" "maybe type" "temp"
    (625940 'move' call_tmp[625937](77393 call _cond_test debugChapelRange[64195]))
    if call_tmp[625937]
    {
      (77391 call chpl_debug_writeln "*** In range leader:")
    }
    unknown call_tmp[625942] "expr temp" "maybe param" "maybe type" "temp"
    (625945 'move' call_tmp[625942](358085 call here[90439]))
    unknown call_tmp[625949] "maybe param" "maybe type" "temp"
    (625952 'move' call_tmp[625949](77405 call(77401 call (partial) getChildCount _mt[243] call_tmp[625942])))
    const numSublocs[77406] "dead at end of block" "const" "insert auto destroy"
    (541386 'init var' numSublocs[77406] call_tmp[625949])
    (77409 'end of statement')
    unknown tmp[421078] "maybe param" "temp"
    (421089 'move' tmp[421078] localeModelHasSublocales[187415])
    unknown call_tmp[625954] "expr temp" "maybe param" "maybe type" "temp"
    (625957 'move' call_tmp[625954](421091 call _cond_invalid tmp[421078]))
    if call_tmp[625954]
    {
      (421094 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558703] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558704] "maybe param" "temp"
    unknown call_tmp[625959] "expr temp" "maybe param" "maybe type" "temp"
    (625962 'move' call_tmp[625959](421079 call isTrue tmp[421078]))
    (558709 'move' tmp[558704](558707 call _cond_test call_tmp[625959]))
    if tmp[558704]
    {
      unknown tmp[558711] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625964] "expr temp" "maybe param" "maybe type" "temp"
      (625967 'move' call_tmp[625964](77413 call != numSublocs[77406] 0))
      (558713 'move' tmp[558711](421082 call isTrue call_tmp[625964]))
      (558718 'move' tmp[558703](558715 '_paramFoldLogical' tmp[558704] tmp[558711]))
    }
    {
      (558723 'move' tmp[558703](558720 '_paramFoldLogical' tmp[558704] 0))
    }
    unknown call_tmp[625969] "expr temp" "maybe param" "maybe type" "temp"
    (625972 'move' call_tmp[625969](79139 call _cond_test tmp[558703]))
    if call_tmp[625969]
    {
      unknown call_tmp[625976] "maybe param" "maybe type" "temp"
      (625979 'move' call_tmp[625976](77418 call size _mt[243] this[77320]))
      const len[77421] "dead at end of block" "const" "insert auto destroy"
      (541388 'init var' len[77421] call_tmp[625976])
      (77424 'end of statement')
      const tasksPerLocale[77427] "dead at end of block" "const" "insert auto destroy"
      (541390 'init var' tasksPerLocale[77427] dataParTasksPerLocale[93289])
      (77430 'end of statement')
      const ignoreRunning[77432] "dead at end of block" "const" "insert auto destroy"
      (541392 'init var' ignoreRunning[77432] dataParIgnoreRunningTasks[93295])
      (77435 'end of statement')
      const minIndicesPerTask[77437] "dead at end of block" "const" "insert auto destroy"
      (541394 'init var' minIndicesPerTask[77437] dataParMinGranularity[93301])
      (77440 'end of statement')
      unknown dptpl[77453] "dead at end of block" "insert auto destroy"
      unknown tmp[558730] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558731] "maybe param" "temp"
      unknown call_tmp[625981] "expr temp" "maybe param" "maybe type" "temp"
      (625984 'move' call_tmp[625981](77443 call == tasksPerLocale[77427] 0))
      (558736 'move' tmp[558731](558734 call _cond_test call_tmp[625981]))
      if tmp[558731]
      {
        unknown tmp[558738] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[625986] "expr temp" "maybe param" "maybe type" "temp"
        (625989 'move' call_tmp[625986](358088 call here[90439]))
        (558740 'move' tmp[558738](77446 call maxTaskPar _mt[243] call_tmp[625986]))
        (558745 'move' tmp[558730](558742 '_paramFoldLogical' tmp[558731] tmp[558738]))
      }
      {
        (558750 'move' tmp[558730](558747 '_paramFoldLogical' tmp[558731] tasksPerLocale[77427]))
      }
      (541396 'init var' dptpl[77453] tmp[558730])
      (77456 'end of statement')
      unknown call_tmp[625993] "expr temp" "maybe param" "maybe type" "temp"
      (625996 'move' call_tmp[625993](77458 call ! ignoreRunning[77432]))
      unknown call_tmp[625998] "expr temp" "maybe param" "maybe type" "temp"
      (626001 'move' call_tmp[625998](77495 call _cond_test call_tmp[625993]))
      if call_tmp[625998]
      {
        unknown call_tmp[626003] "expr temp" "maybe param" "maybe type" "temp"
        (626006 'move' call_tmp[626003](358090 call here[90439]))
        unknown call_tmp[626010] "expr temp" "maybe param" "maybe type" "temp"
        (626013 'move' call_tmp[626010](77467 call(77463 call (partial) runningTasks _mt[243] call_tmp[626003])))
        unknown call_tmp[626015] "maybe param" "maybe type" "temp"
        (626018 'move' call_tmp[626015](77469 call - call_tmp[626010] 1))
        const otherTasks[77471] "dead at end of block" "const" "insert auto destroy"
        (541398 'init var' otherTasks[77471] call_tmp[626015])
        (77474 'end of statement')
        unknown tmp[558757] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558758] "maybe param" "temp"
        unknown call_tmp[626020] "expr temp" "maybe param" "maybe type" "temp"
        (626023 'move' call_tmp[626020](77479 call < otherTasks[77471] dptpl[77453]))
        (558763 'move' tmp[558758](558761 call _cond_test call_tmp[626020]))
        if tmp[558758]
        {
          unknown tmp[558765] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[626025] "expr temp" "maybe param" "maybe type" "temp"
          (626028 'move' call_tmp[626025](77483 call - dptpl[77453] otherTasks[77471]))
          (558767 'move' tmp[558765](77486 call _cast int(64)[13] call_tmp[626025]))
          (558772 'move' tmp[558757](558769 '_paramFoldLogical' tmp[558758] tmp[558765]))
        }
        {
          (558777 'move' tmp[558757](558774 '_paramFoldLogical' tmp[558758] 1))
        }
        (77492 call = dptpl[77453] tmp[558757])
        (476356 'end of statement' dptpl[77453] otherTasks[77471] dptpl[77453] dptpl[77453] otherTasks[77471])
      }
      unknown call_tmp[626030] "maybe param" "maybe type" "temp"
      (626033 'move' call_tmp[626030](77503 call min numSublocs[77406] dptpl[77453]))
      const numSublocTasks[77504] "dead at end of block" "const" "insert auto destroy"
      (541400 'init var' numSublocTasks[77504] call_tmp[626030])
      (77507 'end of statement')
      const numChunks[77523] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558784] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558785] "maybe param" "temp"
      unknown call_tmp[626035] "expr temp" "maybe param" "maybe type" "temp"
      (626038 'move' call_tmp[626035](77510 'task_get_serial'))
      (558790 'move' tmp[558785](558788 call _cond_test call_tmp[626035]))
      if tmp[558785]
      {
        (558795 'move' tmp[558784](558792 '_paramFoldLogical' tmp[558785] 1))
      }
      {
        unknown tmp[558797] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (558799 'move' tmp[558797](77519 call _computeNumChunks numSublocTasks[77504](ignoreRunning = 1) minIndicesPerTask[77437] len[77421]))
        (558804 'move' tmp[558784](558801 '_paramFoldLogical' tmp[558785] tmp[558797]))
      }
      (541402 'init var' numChunks[77523] tmp[558784])
      (77526 'end of statement' tasksPerLocale[77427] tasksPerLocale[77427] numSublocs[77406] dptpl[77453] numSublocTasks[77504] minIndicesPerTask[77437] len[77421])
      unknown call_tmp[626040] "expr temp" "maybe param" "maybe type" "temp"
      (626043 'move' call_tmp[626040](77643 call _cond_test debugDataParNuma[93415]))
      if call_tmp[626040]
      {
        (77640 call chpl_debug_writeln "### numSublocs = " numSublocs[77406] "\n" "### numTasksPerSubloc = " numSublocTasks[77504] "\n" "### ignoreRunning = " ignoreRunning[77432] "\n" "### minIndicesPerTask = " minIndicesPerTask[77437] "\n" "### numChunks = " numChunks[77523])
        (476367 'end of statement' numSublocs[77406] numSublocTasks[77504] ignoreRunning[77432] minIndicesPerTask[77437] numChunks[77523])
      }
      unknown call_tmp[626045] "expr temp" "maybe param" "maybe type" "temp"
      (626048 'move' call_tmp[626045](77649 call == numChunks[77523] 1))
      unknown call_tmp[626050] "expr temp" "maybe param" "maybe type" "temp"
      (626053 'move' call_tmp[626050](78752 call _cond_test call_tmp[626045]))
      if call_tmp[626050]
      {
        unknown yret[511744] "YVV" "temp"
        unknown call_tmp[626055] "expr temp" "maybe param" "maybe type" "temp"
        (626058 'move' call_tmp[626055](77654 call - len[77421] 1))
        unknown call_tmp[626060] "expr temp" "maybe param" "maybe type" "temp"
        (626063 'move' call_tmp[626060](77656 call chpl_build_bounded_range 0 call_tmp[626055]))
        unknown call_tmp[626065] "expr temp" "maybe param" "maybe type" "temp"
        (626068 'move' call_tmp[626065](77658 call _build_tuple call_tmp[626060]))
        (511747 'move' yret[511744](511746 'deref' call_tmp[626065]))
        (511749 yield yret[511744])
        (476373 'end of statement' len[77421])
      }
      {
        {
          unknown tmpIter[78206] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626070] "expr temp" "maybe param" "maybe type" "temp"
          (626073 'move' call_tmp[626070](77665 call chpl_build_low_bounded_range 0))
          (78209 'move' tmpIter[78206](77668 call # call_tmp[626070] numChunks[77523]))
          unknown isRngDomArr[78732] "maybe param" "temp"
          unknown tmp[420994] "maybe param" "temp"
          (421005 'move' tmp[420994](78734 call isBoundedRange tmpIter[78206]))
          unknown call_tmp[626075] "expr temp" "maybe param" "maybe type" "temp"
          (626078 'move' call_tmp[626075](421007 call _cond_invalid tmp[420994]))
          if call_tmp[626075]
          {
            (421010 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558838] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558839] "maybe param" "temp"
          unknown call_tmp[626080] "expr temp" "maybe param" "maybe type" "temp"
          (626083 'move' call_tmp[626080](420995 call isTrue tmp[420994]))
          (558844 'move' tmp[558839](558842 call _cond_test call_tmp[626080]))
          if tmp[558839]
          {
            (558849 'move' tmp[558838](558846 '_paramFoldLogical' tmp[558839] 1))
          }
          {
            unknown tmp[421015] "maybe param" "temp"
            (421026 'move' tmp[421015](78737 call isDomain tmpIter[78206]))
            unknown call_tmp[626085] "expr temp" "maybe param" "maybe type" "temp"
            (626088 'move' call_tmp[626085](421028 call _cond_invalid tmp[421015]))
            if call_tmp[626085]
            {
              (421031 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[558811] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[558812] "maybe param" "temp"
            unknown call_tmp[626090] "expr temp" "maybe param" "maybe type" "temp"
            (626093 'move' call_tmp[626090](421016 call isTrue tmp[421015]))
            (558817 'move' tmp[558812](558815 call _cond_test call_tmp[626090]))
            if tmp[558812]
            {
              (558822 'move' tmp[558811](558819 '_paramFoldLogical' tmp[558812] 1))
            }
            {
              unknown tmp[558824] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626095] "expr temp" "maybe param" "maybe type" "temp"
              (626098 'move' call_tmp[626095](78740 call isArray tmpIter[78206]))
              (558826 'move' tmp[558824](421020 call isTrue call_tmp[626095]))
              (558831 'move' tmp[558811](558828 '_paramFoldLogical' tmp[558812] tmp[558824]))
            }
            unknown tmp[558851] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (558853 'move' tmp[558851](420999 call isTrue tmp[558811]))
            (558858 'move' tmp[558838](558855 '_paramFoldLogical' tmp[558839] tmp[558851]))
          }
          (78747 'move' isRngDomArr[78732] tmp[558838])
          if isRngDomArr[78732]
          {
            const _coforallCount[78599] "const" "end count" "temp"
            (78668 'move' _coforallCount[78599](78665 call _endCountAlloc 1))
            unknown numTasks[78600] "temp"
            (78652 'move' numTasks[78600](78648 call size _mt[243] tmpIter[78206]))
            (78643 call _upEndCount _coforallCount[78599] 1 numTasks[78600])
            (476376 'end of statement')
            (78640 call chpl_resetTaskSpawn numTasks[78600])
            (476377 'end of statement')
            unknown _indexOfInterest[78607] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78608] "expr temp" "temp"
            (78617 'move' _iterator[78608](78615 call _getIterator tmpIter[78206]))
            Defer
            {
              {
                (78633 call _freeIterator _iterator[78608])
              }
            }
            { scopeless type
              (78622 'move' _indexOfInterest[78607](78619 call iteratorIndex _iterator[78608]))
            }
            ForLoop[78609]
            {
              unknown chunk[78626] "coforall index var" "index var" "insert auto destroy"
              (476379 'end of statement')
              (78628 'move' chunk[78626] _indexOfInterest[78607])
              (476380 'end of statement' chunk[78626])
              {
                {
                  const tmp[78216] "const" "temp"
                  unknown call_tmp[626102] "expr temp" "maybe param" "maybe type" "temp"
                  (626105 'move' call_tmp[626102](358095 call here[90439]))
                  unknown call_tmp[626109] "expr temp" "maybe param" "maybe type" "temp"
                  (626112 'move' call_tmp[626109](78226 call(78223 call (partial) getChild _mt[243] call_tmp[626102]) chunk[78626]))
                  unknown call_tmp[626114] "expr temp" "maybe param" "maybe type" "temp"
                  (626117 'move' call_tmp[626114](78221 '_wide_get_locale' call_tmp[626109]))
                  (78218 'move' tmp[78216](78220 'deref' call_tmp[626114]))
                  {
                    unknown call_tmp[626119] "expr temp" "maybe param" "maybe type" "temp"
                    (626122 'move' call_tmp[626119](78230 call _cond_test debugDataParNuma[93415]))
                    if call_tmp[626119]
                    {
                      unknown call_tmp[626124] "expr temp" "maybe param" "maybe type" "temp"
                      (626127 'move' call_tmp[626124](78239 call chpl_getSubloc))
                      unknown call_tmp[626129] "expr temp" "maybe param" "maybe type" "temp"
                      (626132 'move' call_tmp[626129](78236 call != chunk[78626] call_tmp[626124]))
                      unknown call_tmp[626134] "expr temp" "maybe param" "maybe type" "temp"
                      (626137 'move' call_tmp[626134](78234 call _cond_test call_tmp[626129]))
                      if call_tmp[626134]
                      {
                        unknown call_tmp[626139] "expr temp" "maybe param" "maybe type" "temp"
                        (626142 'move' call_tmp[626139](78248 call chpl_getSubloc))
                        (78243 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78626] ", on " call_tmp[626139] ") ***")
                        (476382 'end of statement' chunk[78626])
                      }
                    }
                    unknown call_tmp[626144] "expr temp" "maybe param" "maybe type" "temp"
                    (626147 'move' call_tmp[626144](78260 call - len[77421] 1))
                    unknown call_tmp[626149] "maybe param" "maybe type" "temp"
                    (626152 'move' call_tmp[626149](78255 call _computeBlock len[77421] numChunks[77523] chunk[78626] call_tmp[626144]))
                    const tmp[78253] "dead at end of block" "const" "insert auto destroy" "temp"
                    (541404 'init var' tmp[78253] call_tmp[626149])
                    (78265 call _check_tuple_var_decl tmp[78253] 2)
                    (476384 'end of statement')
                    unknown call_tmp[626154] "maybe param" "maybe type" "temp"
                    (626157 'move' call_tmp[626154](78270 call tmp[78253] 0))
                    const lo[78268] "dead at end of block" "const" "insert auto destroy"
                    (541406 'init var' lo[78268] call_tmp[626154])
                    unknown call_tmp[626159] "maybe param" "maybe type" "temp"
                    (626162 'move' call_tmp[626159](78275 call tmp[78253] 1))
                    const hi[78273] "dead at end of block" "const" "insert auto destroy"
                    (541408 'init var' hi[78273] call_tmp[626159])
                    (78278 'end of statement')
                    unknown call_tmp[626164] "maybe param" "maybe type" "temp"
                    (626167 'move' call_tmp[626164](78282 call chpl_build_bounded_range lo[78268] hi[78273]))
                    const locRange[78280] "dead at end of block" "const" "insert auto destroy"
                    (541410 'init var' locRange[78280] call_tmp[626164])
                    (78286 'end of statement')
                    unknown call_tmp[626171] "maybe param" "maybe type" "temp"
                    (626174 'move' call_tmp[626171](78290 call size _mt[243] locRange[78280]))
                    const locLen[78288] "dead at end of block" "const" "insert auto destroy"
                    (541412 'init var' locLen[78288] call_tmp[626171])
                    (78294 'end of statement')
                    const numSublocTasks[78296] "dead at end of block" "const" "insert auto destroy"
                    unknown tmp[558865] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[558866] "maybe param" "temp"
                    unknown call_tmp[626176] "expr temp" "maybe param" "maybe type" "temp"
                    (626179 'move' call_tmp[626176](78301 call % dptpl[77453] numChunks[77523]))
                    unknown call_tmp[626181] "expr temp" "maybe param" "maybe type" "temp"
                    (626184 'move' call_tmp[626181](78298 call < chunk[78626] call_tmp[626176]))
                    (558871 'move' tmp[558866](558869 call _cond_test call_tmp[626181]))
                    if tmp[558866]
                    {
                      unknown tmp[558873] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      unknown call_tmp[626186] "expr temp" "maybe param" "maybe type" "temp"
                      (626189 'move' call_tmp[626186](78308 call / dptpl[77453] numChunks[77523]))
                      (558875 'move' tmp[558873](78306 call + call_tmp[626186] 1))
                      (558880 'move' tmp[558865](558877 '_paramFoldLogical' tmp[558866] tmp[558873]))
                    }
                    {
                      unknown tmp[558882] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (558884 'move' tmp[558882](78314 call / dptpl[77453] numChunks[77523]))
                      (558889 'move' tmp[558865](558886 '_paramFoldLogical' tmp[558866] tmp[558882]))
                    }
                    (541414 'init var' numSublocTasks[78296] tmp[558865])
                    (78319 'end of statement')
                    unknown call_tmp[626191] "maybe param" "maybe type" "temp"
                    (626194 'move' call_tmp[626191](78323 call _computeNumChunks numSublocTasks[78296](ignoreRunning = 1) minIndicesPerTask[77437] locLen[78288]))
                    const numTasks[78321] "dead at end of block" "const" "insert auto destroy"
                    (541416 'init var' numTasks[78321] call_tmp[626191])
                    (78330 'end of statement' lo[78268] hi[78273] locRange[78280] chunk[78626] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] numSublocTasks[78296] minIndicesPerTask[77437] locLen[78288])
                    {
                      unknown tmpIter[78332] "expr temp" "maybe ref" "no copy" "temp"
                      unknown call_tmp[626196] "expr temp" "maybe param" "maybe type" "temp"
                      (626199 'move' call_tmp[626196](78339 call chpl_build_low_bounded_range 0))
                      (78334 'move' tmpIter[78332](78337 call # call_tmp[626196] numTasks[78321]))
                      unknown isRngDomArr[78342] "maybe param" "temp"
                      unknown tmp[420952] "maybe param" "temp"
                      (420963 'move' tmp[420952](78349 call isBoundedRange tmpIter[78332]))
                      unknown call_tmp[626201] "expr temp" "maybe param" "maybe type" "temp"
                      (626204 'move' call_tmp[626201](420965 call _cond_invalid tmp[420952]))
                      if call_tmp[626201]
                      {
                        (420968 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[558923] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[558924] "maybe param" "temp"
                      unknown call_tmp[626206] "expr temp" "maybe param" "maybe type" "temp"
                      (626209 'move' call_tmp[626206](420953 call isTrue tmp[420952]))
                      (558929 'move' tmp[558924](558927 call _cond_test call_tmp[626206]))
                      if tmp[558924]
                      {
                        (558934 'move' tmp[558923](558931 '_paramFoldLogical' tmp[558924] 1))
                      }
                      {
                        unknown tmp[420973] "maybe param" "temp"
                        (420984 'move' tmp[420973](78354 call isDomain tmpIter[78332]))
                        unknown call_tmp[626211] "expr temp" "maybe param" "maybe type" "temp"
                        (626214 'move' call_tmp[626211](420986 call _cond_invalid tmp[420973]))
                        if call_tmp[626211]
                        {
                          (420989 call compilerError "cannot promote short-circuiting || operator")
                        }
                        unknown tmp[558896] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                        unknown tmp[558897] "maybe param" "temp"
                        unknown call_tmp[626216] "expr temp" "maybe param" "maybe type" "temp"
                        (626219 'move' call_tmp[626216](420974 call isTrue tmp[420973]))
                        (558902 'move' tmp[558897](558900 call _cond_test call_tmp[626216]))
                        if tmp[558897]
                        {
                          (558907 'move' tmp[558896](558904 '_paramFoldLogical' tmp[558897] 1))
                        }
                        {
                          unknown tmp[558909] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                          unknown call_tmp[626221] "expr temp" "maybe param" "maybe type" "temp"
                          (626224 'move' call_tmp[626221](78357 call isArray tmpIter[78332]))
                          (558911 'move' tmp[558909](420978 call isTrue call_tmp[626221]))
                          (558916 'move' tmp[558896](558913 '_paramFoldLogical' tmp[558897] tmp[558909]))
                        }
                        unknown tmp[558936] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        (558938 'move' tmp[558936](420957 call isTrue tmp[558896]))
                        (558943 'move' tmp[558923](558940 '_paramFoldLogical' tmp[558924] tmp[558936]))
                      }
                      (78344 'move' isRngDomArr[78342] tmp[558923])
                      if isRngDomArr[78342]
                      {
                        const _coforallCount[78361] "const" "end count" "temp"
                        (78363 'move' _coforallCount[78361](78366 call _endCountAlloc 1))
                        unknown numTasks[78368] "temp"
                        (78370 'move' numTasks[78368](78373 call size _mt[243] tmpIter[78332]))
                        (78377 call _upEndCount _coforallCount[78361] 1 numTasks[78368])
                        (476399 'end of statement')
                        (78382 call chpl_resetTaskSpawn numTasks[78368])
                        (476400 'end of statement')
                        unknown _indexOfInterest[78384] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[78386] "expr temp" "temp"
                        (78388 'move' _iterator[78386](78391 call _getIterator tmpIter[78332]))
                        Defer
                        {
                          {
                            (78395 call _freeIterator _iterator[78386])
                          }
                        }
                        { scopeless type
                          (78399 'move' _indexOfInterest[78384](78402 call iteratorIndex _iterator[78386]))
                        }
                        ForLoop[78404]
                        {
                          unknown core[78407] "coforall index var" "index var" "insert auto destroy"
                          (476402 'end of statement')
                          (78409 'move' core[78407] _indexOfInterest[78384])
                          (476403 'end of statement' core[78407])
                          {
                            {
                              unknown call_tmp[626228] "maybe param" "maybe type" "temp"
                              (626231 'move' call_tmp[626228](78418 call _computeBlock locLen[78288] numTasks[78321] core[78407] hi[78273] lo[78268] lo[78268]))
                              const tmp[78416] "dead at end of block" "const" "insert auto destroy" "temp"
                              (541418 'init var' tmp[78416] call_tmp[626228])
                              (78427 call _check_tuple_var_decl tmp[78416] 2)
                              (476405 'end of statement')
                              unknown call_tmp[626233] "maybe param" "maybe type" "temp"
                              (626236 'move' call_tmp[626233](78432 call tmp[78416] 0))
                              const low[78430] "dead at end of block" "const" "insert auto destroy"
                              (541420 'init var' low[78430] call_tmp[626233])
                              unknown call_tmp[626238] "maybe param" "maybe type" "temp"
                              (626241 'move' call_tmp[626238](78437 call tmp[78416] 1))
                              const high[78435] "dead at end of block" "const" "insert auto destroy"
                              (541422 'init var' high[78435] call_tmp[626238])
                              (78440 'end of statement')
                              unknown call_tmp[626243] "expr temp" "maybe param" "maybe type" "temp"
                              (626246 'move' call_tmp[626243](78442 call _cond_test debugDataParNuma[93415]))
                              if call_tmp[626243]
                              {
                                unknown call_tmp[626248] "expr temp" "maybe param" "maybe type" "temp"
                                (626251 'move' call_tmp[626248](78456 call chpl_build_bounded_range low[78430] high[78435]))
                                (78446 call chpl_debug_writeln "### chunk = " chunk[78626] "  core = " core[78407] "  " "locRange = " locRange[78280] "  coreRange = " call_tmp[626248])
                                (476406 'end of statement' chunk[78626] core[78407] locRange[78280] low[78430] high[78435])
                              }
                              unknown yret[511751] "YVV" "temp"
                              unknown call_tmp[626253] "expr temp" "maybe param" "maybe type" "temp"
                              (626256 'move' call_tmp[626253](78464 call chpl_build_bounded_range low[78430] high[78435]))
                              unknown call_tmp[626258] "expr temp" "maybe param" "maybe type" "temp"
                              (626261 'move' call_tmp[626258](78462 call _build_tuple call_tmp[626253]))
                              (511754 'move' yret[511751](511753 'deref' call_tmp[626258]))
                              (511756 yield yret[511751])
                              (476412 'end of statement' low[78430] high[78435])
                            }
                            (78468 call _downEndCount _coforallCount[78361] nil[44])
                            (78413 'coforall loop')
                          }
                          label _continueLabel[78471]
                          _indexOfInterest[78384]
                          _iterator[78386]
                        }
                        label _breakLabel[78473]
                        Defer
                        {
                          {
                            (78477 call _endCountFree _coforallCount[78361])
                          }
                        }
                        (78481 call _waitEndCount _coforallCount[78361] 1 numTasks[78368])
                      }
                      {
                        const _coforallCount[78486] "const" "end count" "temp"
                        (78488 'move' _coforallCount[78486](78491 call _endCountAlloc 1))
                        unknown _indexOfInterest[78493] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[78495] "expr temp" "temp"
                        (78497 'move' _iterator[78495](78500 call _getIterator tmpIter[78332]))
                        Defer
                        {
                          {
                            (78504 call _freeIterator _iterator[78495])
                          }
                        }
                        { scopeless type
                          (78508 'move' _indexOfInterest[78493](78511 call iteratorIndex _iterator[78495]))
                        }
                        ForLoop[78513]
                        {
                          unknown core[78516] "coforall index var" "index var" "insert auto destroy"
                          (476419 'end of statement')
                          (78518 'move' core[78516] _indexOfInterest[78493])
                          (476420 'end of statement' core[78516])
                          (78522 call _upEndCount _coforallCount[78486] 1)
                          (476422 'end of statement')
                          {
                            {
                              unknown call_tmp[626263] "maybe param" "maybe type" "temp"
                              (626266 'move' call_tmp[626263](78531 call _computeBlock locLen[78288] numTasks[78321] core[78516] hi[78273] lo[78268] lo[78268]))
                              const tmp[78529] "dead at end of block" "const" "insert auto destroy" "temp"
                              (541424 'init var' tmp[78529] call_tmp[626263])
                              (78540 call _check_tuple_var_decl tmp[78529] 2)
                              (476423 'end of statement')
                              unknown call_tmp[626268] "maybe param" "maybe type" "temp"
                              (626271 'move' call_tmp[626268](78545 call tmp[78529] 0))
                              const low[78543] "dead at end of block" "const" "insert auto destroy"
                              (541426 'init var' low[78543] call_tmp[626268])
                              unknown call_tmp[626273] "maybe param" "maybe type" "temp"
                              (626276 'move' call_tmp[626273](78550 call tmp[78529] 1))
                              const high[78548] "dead at end of block" "const" "insert auto destroy"
                              (541428 'init var' high[78548] call_tmp[626273])
                              (78553 'end of statement')
                              unknown call_tmp[626278] "expr temp" "maybe param" "maybe type" "temp"
                              (626281 'move' call_tmp[626278](78555 call _cond_test debugDataParNuma[93415]))
                              if call_tmp[626278]
                              {
                                unknown call_tmp[626283] "expr temp" "maybe param" "maybe type" "temp"
                                (626286 'move' call_tmp[626283](78569 call chpl_build_bounded_range low[78543] high[78548]))
                                (78559 call chpl_debug_writeln "### chunk = " chunk[78626] "  core = " core[78516] "  " "locRange = " locRange[78280] "  coreRange = " call_tmp[626283])
                                (476424 'end of statement' chunk[78626] core[78516] locRange[78280] low[78543] high[78548])
                              }
                              unknown yret[511758] "YVV" "temp"
                              unknown call_tmp[626288] "expr temp" "maybe param" "maybe type" "temp"
                              (626291 'move' call_tmp[626288](78577 call chpl_build_bounded_range low[78543] high[78548]))
                              unknown call_tmp[626293] "expr temp" "maybe param" "maybe type" "temp"
                              (626296 'move' call_tmp[626293](78575 call _build_tuple call_tmp[626288]))
                              (511761 'move' yret[511758](511760 'deref' call_tmp[626293]))
                              (511763 yield yret[511758])
                              (476430 'end of statement' low[78543] high[78548])
                            }
                            (78581 call _downEndCount _coforallCount[78486] nil[44])
                            (78526 'coforall loop')
                          }
                          label _continueLabel[78584]
                          _indexOfInterest[78493]
                          _iterator[78495]
                        }
                        label _breakLabel[78586]
                        Defer
                        {
                          {
                            (78590 call _endCountFree _coforallCount[78486])
                          }
                        }
                        (78594 call _waitEndCount _coforallCount[78486] 1)
                      }
                    }
                  }
                  (78213 'elided on block' 0 tmp[78216])
                }
                (78602 call _downEndCount _coforallCount[78599] nil[44])
                (78601 'coforall loop')
              }
              label _continueLabel[78612]
              _indexOfInterest[78607]
              _iterator[78608]
            }
            label _breakLabel[78613]
            Defer
            {
              {
                (78655 call _endCountFree _coforallCount[78599])
              }
            }
            (78660 call _waitEndCount _coforallCount[78599] 1 numTasks[78600])
          }
          {
            const _coforallCount[78672] "const" "end count" "temp"
            (78729 'move' _coforallCount[78672](78726 call _endCountAlloc 1))
            unknown _indexOfInterest[78680] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78681] "expr temp" "temp"
            (78690 'move' _iterator[78681](78688 call _getIterator tmpIter[78206]))
            Defer
            {
              {
                (78706 call _freeIterator _iterator[78681])
              }
            }
            { scopeless type
              (78695 'move' _indexOfInterest[78680](78692 call iteratorIndex _iterator[78681]))
            }
            ForLoop[78682]
            {
              unknown chunk[78699] "coforall index var" "index var" "insert auto destroy"
              (476440 'end of statement')
              (78701 'move' chunk[78699] _indexOfInterest[78680])
              (476441 'end of statement' chunk[78699])
              (78713 call _upEndCount _coforallCount[78672] 1)
              (476443 'end of statement')
              {
                {
                  const tmp[78196] "const" "temp"
                  unknown call_tmp[626298] "expr temp" "maybe param" "maybe type" "temp"
                  (626301 'move' call_tmp[626298](358092 call here[90439]))
                  unknown call_tmp[626305] "expr temp" "maybe param" "maybe type" "temp"
                  (626308 'move' call_tmp[626305](77678 call(77673 call (partial) getChild _mt[243] call_tmp[626298]) chunk[78699]))
                  unknown call_tmp[626310] "expr temp" "maybe param" "maybe type" "temp"
                  (626313 'move' call_tmp[626310](78193 '_wide_get_locale' call_tmp[626305]))
                  (78197 'move' tmp[78196](78194 'deref' call_tmp[626310]))
                  {
                    unknown call_tmp[626315] "expr temp" "maybe param" "maybe type" "temp"
                    (626318 'move' call_tmp[626315](77751 call _cond_test debugDataParNuma[93415]))
                    if call_tmp[626315]
                    {
                      unknown call_tmp[626320] "expr temp" "maybe param" "maybe type" "temp"
                      (626323 'move' call_tmp[626320](77683 call chpl_getSubloc))
                      unknown call_tmp[626325] "expr temp" "maybe param" "maybe type" "temp"
                      (626328 'move' call_tmp[626325](77684 call != chunk[78699] call_tmp[626320]))
                      unknown call_tmp[626330] "expr temp" "maybe param" "maybe type" "temp"
                      (626333 'move' call_tmp[626330](77745 call _cond_test call_tmp[626325]))
                      if call_tmp[626330]
                      {
                        unknown call_tmp[626335] "expr temp" "maybe param" "maybe type" "temp"
                        (626338 'move' call_tmp[626335](77725 call chpl_getSubloc))
                        (77743 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78699] ", on " call_tmp[626335] ") ***")
                        (476444 'end of statement' chunk[78699])
                      }
                    }
                    unknown call_tmp[626340] "expr temp" "maybe param" "maybe type" "temp"
                    (626343 'move' call_tmp[626340](77768 call - len[77421] 1))
                    unknown call_tmp[626345] "maybe param" "maybe type" "temp"
                    (626348 'move' call_tmp[626345](77770 call _computeBlock len[77421] numChunks[77523] chunk[78699] call_tmp[626340]))
                    const tmp[77771] "dead at end of block" "const" "insert auto destroy" "temp"
                    (541430 'init var' tmp[77771] call_tmp[626345])
                    (77778 call _check_tuple_var_decl tmp[77771] 2)
                    (476446 'end of statement')
                    unknown call_tmp[626350] "maybe param" "maybe type" "temp"
                    (626353 'move' call_tmp[626350](77772 call tmp[77771] 0))
                    const lo[77756] "dead at end of block" "const" "insert auto destroy"
                    (541432 'init var' lo[77756] call_tmp[626350])
                    unknown call_tmp[626355] "maybe param" "maybe type" "temp"
                    (626358 'move' call_tmp[626355](77775 call tmp[77771] 1))
                    const hi[77758] "dead at end of block" "const" "insert auto destroy"
                    (541434 'init var' hi[77758] call_tmp[626355])
                    (77783 'end of statement')
                    unknown call_tmp[626360] "maybe param" "maybe type" "temp"
                    (626363 'move' call_tmp[626360](77786 call chpl_build_bounded_range lo[77756] hi[77758]))
                    const locRange[77788] "dead at end of block" "const" "insert auto destroy"
                    (541436 'init var' locRange[77788] call_tmp[626360])
                    (77791 'end of statement')
                    unknown call_tmp[626367] "maybe param" "maybe type" "temp"
                    (626370 'move' call_tmp[626367](77793 call size _mt[243] locRange[77788]))
                    const locLen[77796] "dead at end of block" "const" "insert auto destroy"
                    (541438 'init var' locLen[77796] call_tmp[626367])
                    (77799 'end of statement')
                    const numSublocTasks[77821] "dead at end of block" "const" "insert auto destroy"
                    unknown tmp[558950] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[558951] "maybe param" "temp"
                    unknown call_tmp[626372] "expr temp" "maybe param" "maybe type" "temp"
                    (626375 'move' call_tmp[626372](77803 call % dptpl[77453] numChunks[77523]))
                    unknown call_tmp[626377] "expr temp" "maybe param" "maybe type" "temp"
                    (626380 'move' call_tmp[626377](77805 call < chunk[78699] call_tmp[626372]))
                    (558956 'move' tmp[558951](558954 call _cond_test call_tmp[626377]))
                    if tmp[558951]
                    {
                      unknown tmp[558958] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      unknown call_tmp[626382] "expr temp" "maybe param" "maybe type" "temp"
                      (626385 'move' call_tmp[626382](77809 call / dptpl[77453] numChunks[77523]))
                      (558960 'move' tmp[558958](77812 call + call_tmp[626382] 1))
                      (558965 'move' tmp[558950](558962 '_paramFoldLogical' tmp[558951] tmp[558958]))
                    }
                    {
                      unknown tmp[558967] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (558969 'move' tmp[558967](77816 call / dptpl[77453] numChunks[77523]))
                      (558974 'move' tmp[558950](558971 '_paramFoldLogical' tmp[558951] tmp[558967]))
                    }
                    (541440 'init var' numSublocTasks[77821] tmp[558950])
                    (77824 'end of statement')
                    unknown call_tmp[626387] "maybe param" "maybe type" "temp"
                    (626390 'move' call_tmp[626387](77832 call _computeNumChunks numSublocTasks[77821](ignoreRunning = 1) minIndicesPerTask[77437] locLen[77796]))
                    const numTasks[77833] "dead at end of block" "const" "insert auto destroy"
                    (541442 'init var' numTasks[77833] call_tmp[626387])
                    (77836 'end of statement' lo[77756] hi[77758] locRange[77788] chunk[78699] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] numSublocTasks[77821] minIndicesPerTask[77437] locLen[77796])
                    {
                      unknown tmpIter[77982] "expr temp" "maybe ref" "no copy" "temp"
                      unknown call_tmp[626392] "expr temp" "maybe param" "maybe type" "temp"
                      (626395 'move' call_tmp[626392](77839 call chpl_build_low_bounded_range 0))
                      (77985 'move' tmpIter[77982](77842 call # call_tmp[626392] numTasks[77833]))
                      unknown isRngDomArr[78174] "maybe param" "temp"
                      unknown tmp[420910] "maybe param" "temp"
                      (420921 'move' tmp[420910](78176 call isBoundedRange tmpIter[77982]))
                      unknown call_tmp[626397] "expr temp" "maybe param" "maybe type" "temp"
                      (626400 'move' call_tmp[626397](420923 call _cond_invalid tmp[420910]))
                      if call_tmp[626397]
                      {
                        (420926 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[559008] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[559009] "maybe param" "temp"
                      unknown call_tmp[626402] "expr temp" "maybe param" "maybe type" "temp"
                      (626405 'move' call_tmp[626402](420911 call isTrue tmp[420910]))
                      (559014 'move' tmp[559009](559012 call _cond_test call_tmp[626402]))
                      if tmp[559009]
                      {
                        (559019 'move' tmp[559008](559016 '_paramFoldLogical' tmp[559009] 1))
                      }
                      {
                        unknown tmp[420931] "maybe param" "temp"
                        (420942 'move' tmp[420931](78179 call isDomain tmpIter[77982]))
                        unknown call_tmp[626407] "expr temp" "maybe param" "maybe type" "temp"
                        (626410 'move' call_tmp[626407](420944 call _cond_invalid tmp[420931]))
                        if call_tmp[626407]
                        {
                          (420947 call compilerError "cannot promote short-circuiting || operator")
                        }
                        unknown tmp[558981] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                        unknown tmp[558982] "maybe param" "temp"
                        unknown call_tmp[626412] "expr temp" "maybe param" "maybe type" "temp"
                        (626415 'move' call_tmp[626412](420932 call isTrue tmp[420931]))
                        (558987 'move' tmp[558982](558985 call _cond_test call_tmp[626412]))
                        if tmp[558982]
                        {
                          (558992 'move' tmp[558981](558989 '_paramFoldLogical' tmp[558982] 1))
                        }
                        {
                          unknown tmp[558994] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                          unknown call_tmp[626417] "expr temp" "maybe param" "maybe type" "temp"
                          (626420 'move' call_tmp[626417](78182 call isArray tmpIter[77982]))
                          (558996 'move' tmp[558994](420936 call isTrue call_tmp[626417]))
                          (559001 'move' tmp[558981](558998 '_paramFoldLogical' tmp[558982] tmp[558994]))
                        }
                        unknown tmp[559021] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        (559023 'move' tmp[559021](420915 call isTrue tmp[558981]))
                        (559028 'move' tmp[559008](559025 '_paramFoldLogical' tmp[559009] tmp[559021]))
                      }
                      (78189 'move' isRngDomArr[78174] tmp[559008])
                      if isRngDomArr[78174]
                      {
                        const _coforallCount[78041] "const" "end count" "temp"
                        (78110 'move' _coforallCount[78041](78107 call _endCountAlloc 1))
                        unknown numTasks[78042] "temp"
                        (78094 'move' numTasks[78042](78090 call size _mt[243] tmpIter[77982]))
                        (78085 call _upEndCount _coforallCount[78041] 1 numTasks[78042])
                        (476461 'end of statement')
                        (78082 call chpl_resetTaskSpawn numTasks[78042])
                        (476462 'end of statement')
                        unknown _indexOfInterest[78049] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[78050] "expr temp" "temp"
                        (78059 'move' _iterator[78050](78057 call _getIterator tmpIter[77982]))
                        Defer
                        {
                          {
                            (78075 call _freeIterator _iterator[78050])
                          }
                        }
                        { scopeless type
                          (78064 'move' _indexOfInterest[78049](78061 call iteratorIndex _iterator[78050]))
                        }
                        ForLoop[78051]
                        {
                          unknown core[78068] "coforall index var" "index var" "insert auto destroy"
                          (476464 'end of statement')
                          (78070 'move' core[78068] _indexOfInterest[78049])
                          (476465 'end of statement' core[78068])
                          {
                            {
                              unknown call_tmp[626424] "maybe param" "maybe type" "temp"
                              (626427 'move' call_tmp[626424](77991 call _computeBlock locLen[77796] numTasks[77833] core[78068] hi[77758] lo[77756] lo[77756]))
                              const tmp[77989] "dead at end of block" "const" "insert auto destroy" "temp"
                              (541444 'init var' tmp[77989] call_tmp[626424])
                              (78000 call _check_tuple_var_decl tmp[77989] 2)
                              (476467 'end of statement')
                              unknown call_tmp[626429] "maybe param" "maybe type" "temp"
                              (626432 'move' call_tmp[626429](78005 call tmp[77989] 0))
                              const low[78003] "dead at end of block" "const" "insert auto destroy"
                              (541446 'init var' low[78003] call_tmp[626429])
                              unknown call_tmp[626434] "maybe param" "maybe type" "temp"
                              (626437 'move' call_tmp[626434](78010 call tmp[77989] 1))
                              const high[78008] "dead at end of block" "const" "insert auto destroy"
                              (541448 'init var' high[78008] call_tmp[626434])
                              (78013 'end of statement')
                              unknown call_tmp[626439] "expr temp" "maybe param" "maybe type" "temp"
                              (626442 'move' call_tmp[626439](78015 call _cond_test debugDataParNuma[93415]))
                              if call_tmp[626439]
                              {
                                unknown call_tmp[626444] "expr temp" "maybe param" "maybe type" "temp"
                                (626447 'move' call_tmp[626444](78029 call chpl_build_bounded_range low[78003] high[78008]))
                                (78019 call chpl_debug_writeln "### chunk = " chunk[78699] "  core = " core[78068] "  " "locRange = " locRange[77788] "  coreRange = " call_tmp[626444])
                                (476468 'end of statement' chunk[78699] core[78068] locRange[77788] low[78003] high[78008])
                              }
                              unknown yret[511765] "YVV" "temp"
                              unknown call_tmp[626449] "expr temp" "maybe param" "maybe type" "temp"
                              (626452 'move' call_tmp[626449](78037 call chpl_build_bounded_range low[78003] high[78008]))
                              unknown call_tmp[626454] "expr temp" "maybe param" "maybe type" "temp"
                              (626457 'move' call_tmp[626454](78035 call _build_tuple call_tmp[626449]))
                              (511768 'move' yret[511765](511767 'deref' call_tmp[626454]))
                              (511770 yield yret[511765])
                              (476474 'end of statement' low[78003] high[78008])
                            }
                            (78044 call _downEndCount _coforallCount[78041] nil[44])
                            (78043 'coforall loop')
                          }
                          label _continueLabel[78054]
                          _indexOfInterest[78049]
                          _iterator[78050]
                        }
                        label _breakLabel[78055]
                        Defer
                        {
                          {
                            (78097 call _endCountFree _coforallCount[78041])
                          }
                        }
                        (78102 call _waitEndCount _coforallCount[78041] 1 numTasks[78042])
                      }
                      {
                        const _coforallCount[78114] "const" "end count" "temp"
                        (78171 'move' _coforallCount[78114](78168 call _endCountAlloc 1))
                        unknown _indexOfInterest[78122] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[78123] "expr temp" "temp"
                        (78132 'move' _iterator[78123](78130 call _getIterator tmpIter[77982]))
                        Defer
                        {
                          {
                            (78148 call _freeIterator _iterator[78123])
                          }
                        }
                        { scopeless type
                          (78137 'move' _indexOfInterest[78122](78134 call iteratorIndex _iterator[78123]))
                        }
                        ForLoop[78124]
                        {
                          unknown core[78141] "coforall index var" "index var" "insert auto destroy"
                          (476481 'end of statement')
                          (78143 'move' core[78141] _indexOfInterest[78122])
                          (476482 'end of statement' core[78141])
                          (78155 call _upEndCount _coforallCount[78114] 1)
                          (476484 'end of statement')
                          {
                            {
                              unknown call_tmp[626459] "maybe param" "maybe type" "temp"
                              (626462 'move' call_tmp[626459](77857 call _computeBlock locLen[77796] numTasks[77833] core[78141] hi[77758] lo[77756] lo[77756]))
                              const tmp[77858] "dead at end of block" "const" "insert auto destroy" "temp"
                              (541450 'init var' tmp[77858] call_tmp[626459])
                              (77865 call _check_tuple_var_decl tmp[77858] 2)
                              (476485 'end of statement')
                              unknown call_tmp[626464] "maybe param" "maybe type" "temp"
                              (626467 'move' call_tmp[626464](77859 call tmp[77858] 0))
                              const low[77844] "dead at end of block" "const" "insert auto destroy"
                              (541452 'init var' low[77844] call_tmp[626464])
                              unknown call_tmp[626469] "maybe param" "maybe type" "temp"
                              (626472 'move' call_tmp[626469](77862 call tmp[77858] 1))
                              const high[77846] "dead at end of block" "const" "insert auto destroy"
                              (541454 'init var' high[77846] call_tmp[626469])
                              (77870 'end of statement')
                              unknown call_tmp[626474] "expr temp" "maybe param" "maybe type" "temp"
                              (626477 'move' call_tmp[626474](77970 call _cond_test debugDataParNuma[93415]))
                              if call_tmp[626474]
                              {
                                unknown call_tmp[626479] "expr temp" "maybe param" "maybe type" "temp"
                                (626482 'move' call_tmp[626479](77965 call chpl_build_bounded_range low[77844] high[77846]))
                                (77967 call chpl_debug_writeln "### chunk = " chunk[78699] "  core = " core[78141] "  " "locRange = " locRange[77788] "  coreRange = " call_tmp[626479])
                                (476486 'end of statement' chunk[78699] core[78141] locRange[77788] low[77844] high[77846])
                              }
                              unknown yret[511772] "YVV" "temp"
                              unknown call_tmp[626484] "expr temp" "maybe param" "maybe type" "temp"
                              (626487 'move' call_tmp[626484](77976 call chpl_build_bounded_range low[77844] high[77846]))
                              unknown call_tmp[626489] "expr temp" "maybe param" "maybe type" "temp"
                              (626492 'move' call_tmp[626489](77978 call _build_tuple call_tmp[626484]))
                              (511775 'move' yret[511772](511774 'deref' call_tmp[626489]))
                              (511777 yield yret[511772])
                              (476492 'end of statement' low[77844] high[77846])
                            }
                            (78117 call _downEndCount _coforallCount[78114] nil[44])
                            (78116 'coforall loop')
                          }
                          label _continueLabel[78127]
                          _indexOfInterest[78122]
                          _iterator[78123]
                        }
                        label _breakLabel[78128]
                        Defer
                        {
                          {
                            (78159 call _endCountFree _coforallCount[78114])
                          }
                        }
                        (78164 call _waitEndCount _coforallCount[78114] 1)
                      }
                    }
                  }
                  (78200 'elided on block' 0 tmp[78196])
                }
                (78675 call _downEndCount _coforallCount[78672] nil[44])
                (78674 'coforall loop')
              }
              label _continueLabel[78685]
              _indexOfInterest[78680]
              _iterator[78681]
            }
            label _breakLabel[78686]
            Defer
            {
              {
                (78717 call _endCountFree _coforallCount[78672])
              }
            }
            (78722 call _waitEndCount _coforallCount[78672] 1)
          }
        }
      }
    }
    {
      unknown call_tmp[626496] "maybe param" "maybe type" "temp"
      (626499 'move' call_tmp[626496](78757 call size _mt[243] this[77320]))
      unknown v[78760] "dead at end of block" "insert auto destroy"
      (541456 'init var' v[78760] call_tmp[626496])
      (78763 'end of statement')
      const numChunks[78776] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[559035] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559036] "maybe param" "temp"
      unknown call_tmp[626501] "expr temp" "maybe param" "maybe type" "temp"
      (626504 'move' call_tmp[626501](78767 'task_get_serial'))
      (559041 'move' tmp[559036](559039 call _cond_test call_tmp[626501]))
      if tmp[559036]
      {
        (559046 'move' tmp[559035](559043 '_paramFoldLogical' tmp[559036] 1))
      }
      {
        unknown tmp[559048] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559050 'move' tmp[559048](78772 call _computeNumChunks v[78760]))
        (559055 'move' tmp[559035](559052 '_paramFoldLogical' tmp[559036] tmp[559048]))
      }
      (541458 'init var' numChunks[78776] tmp[559035])
      (78779 'end of statement' v[78760])
      unknown call_tmp[626506] "expr temp" "maybe param" "maybe type" "temp"
      (626509 'move' call_tmp[626506](78829 call _cond_test debugChapelRange[64195]))
      if call_tmp[626506]
      {
        (78787 call chpl_debug_writeln "*** RI: length=" v[78760] " numChunks=" numChunks[78776])
        (476502 'end of statement' v[78760] numChunks[78776])
        (78827 call chpl_debug_writeln "*** RI: Using " numChunks[78776] " chunk(s)")
        (476505 'end of statement' numChunks[78776])
      }
      unknown call_tmp[626511] "expr temp" "maybe param" "maybe type" "temp"
      (626514 'move' call_tmp[626511](78835 call == numChunks[78776] 1))
      unknown call_tmp[626516] "expr temp" "maybe param" "maybe type" "temp"
      (626519 'move' call_tmp[626516](79134 call _cond_test call_tmp[626511]))
      if call_tmp[626516]
      {
        unknown yret[511779] "YVV" "temp"
        unknown call_tmp[626521] "expr temp" "maybe param" "maybe type" "temp"
        (626524 'move' call_tmp[626521](78840 call - v[78760] 1))
        unknown call_tmp[626526] "expr temp" "maybe param" "maybe type" "temp"
        (626529 'move' call_tmp[626526](78842 call chpl_build_bounded_range 0 call_tmp[626521]))
        unknown call_tmp[626531] "expr temp" "maybe param" "maybe type" "temp"
        (626534 'move' call_tmp[626531](78844 call _build_tuple call_tmp[626526]))
        (511782 'move' yret[511779](511781 'deref' call_tmp[626531]))
        (511784 yield yret[511779])
        (476507 'end of statement' v[78760])
      }
      {
        {
          unknown tmpIter[78925] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626536] "expr temp" "maybe param" "maybe type" "temp"
          (626539 'move' call_tmp[626536](78850 call chpl_build_low_bounded_range 0))
          (78928 'move' tmpIter[78925](78853 call # call_tmp[626536] numChunks[78776]))
          unknown isRngDomArr[79114] "maybe param" "temp"
          unknown tmp[421036] "maybe param" "temp"
          (421047 'move' tmp[421036](79116 call isBoundedRange tmpIter[78925]))
          unknown call_tmp[626541] "expr temp" "maybe param" "maybe type" "temp"
          (626544 'move' call_tmp[626541](421049 call _cond_invalid tmp[421036]))
          if call_tmp[626541]
          {
            (421052 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559089] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559090] "maybe param" "temp"
          unknown call_tmp[626546] "expr temp" "maybe param" "maybe type" "temp"
          (626549 'move' call_tmp[626546](421037 call isTrue tmp[421036]))
          (559095 'move' tmp[559090](559093 call _cond_test call_tmp[626546]))
          if tmp[559090]
          {
            (559100 'move' tmp[559089](559097 '_paramFoldLogical' tmp[559090] 1))
          }
          {
            unknown tmp[421057] "maybe param" "temp"
            (421068 'move' tmp[421057](79119 call isDomain tmpIter[78925]))
            unknown call_tmp[626551] "expr temp" "maybe param" "maybe type" "temp"
            (626554 'move' call_tmp[626551](421070 call _cond_invalid tmp[421057]))
            if call_tmp[626551]
            {
              (421073 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[559062] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[559063] "maybe param" "temp"
            unknown call_tmp[626556] "expr temp" "maybe param" "maybe type" "temp"
            (626559 'move' call_tmp[626556](421058 call isTrue tmp[421057]))
            (559068 'move' tmp[559063](559066 call _cond_test call_tmp[626556]))
            if tmp[559063]
            {
              (559073 'move' tmp[559062](559070 '_paramFoldLogical' tmp[559063] 1))
            }
            {
              unknown tmp[559075] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626561] "expr temp" "maybe param" "maybe type" "temp"
              (626564 'move' call_tmp[626561](79122 call isArray tmpIter[78925]))
              (559077 'move' tmp[559075](421062 call isTrue call_tmp[626561]))
              (559082 'move' tmp[559062](559079 '_paramFoldLogical' tmp[559063] tmp[559075]))
            }
            unknown tmp[559102] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559104 'move' tmp[559102](421041 call isTrue tmp[559062]))
            (559109 'move' tmp[559089](559106 '_paramFoldLogical' tmp[559090] tmp[559102]))
          }
          (79129 'move' isRngDomArr[79114] tmp[559089])
          if isRngDomArr[79114]
          {
            const _coforallCount[78981] "const" "end count" "temp"
            (79050 'move' _coforallCount[78981](79047 call _endCountAlloc 1))
            unknown numTasks[78982] "temp"
            (79034 'move' numTasks[78982](79030 call size _mt[243] tmpIter[78925]))
            (79025 call _upEndCount _coforallCount[78981] 1 numTasks[78982])
            (476510 'end of statement')
            (79022 call chpl_resetTaskSpawn numTasks[78982])
            (476511 'end of statement')
            unknown _indexOfInterest[78989] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78990] "expr temp" "temp"
            (78999 'move' _iterator[78990](78997 call _getIterator tmpIter[78925]))
            Defer
            {
              {
                (79015 call _freeIterator _iterator[78990])
              }
            }
            { scopeless type
              (79004 'move' _indexOfInterest[78989](79001 call iteratorIndex _iterator[78990]))
            }
            ForLoop[78991]
            {
              unknown chunk[79008] "coforall index var" "index var" "insert auto destroy"
              (476513 'end of statement')
              (79010 'move' chunk[79008] _indexOfInterest[78989])
              (476514 'end of statement' chunk[79008])
              {
                {
                  unknown call_tmp[626568] "expr temp" "maybe param" "maybe type" "temp"
                  (626571 'move' call_tmp[626568](78939 call - v[78760] 1))
                  unknown call_tmp[626573] "maybe param" "maybe type" "temp"
                  (626576 'move' call_tmp[626573](78934 call _computeBlock v[78760] numChunks[78776] chunk[79008] call_tmp[626568]))
                  const tmp[78932] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541460 'init var' tmp[78932] call_tmp[626573])
                  (78944 call _check_tuple_var_decl tmp[78932] 2)
                  (476516 'end of statement')
                  unknown call_tmp[626578] "maybe param" "maybe type" "temp"
                  (626581 'move' call_tmp[626578](78949 call tmp[78932] 0))
                  const lo[78947] "dead at end of block" "const" "insert auto destroy"
                  (541462 'init var' lo[78947] call_tmp[626578])
                  unknown call_tmp[626583] "maybe param" "maybe type" "temp"
                  (626586 'move' call_tmp[626583](78954 call tmp[78932] 1))
                  const hi[78952] "dead at end of block" "const" "insert auto destroy"
                  (541464 'init var' hi[78952] call_tmp[626583])
                  (78957 'end of statement')
                  unknown call_tmp[626588] "expr temp" "maybe param" "maybe type" "temp"
                  (626591 'move' call_tmp[626588](78959 call _cond_test debugChapelRange[64195]))
                  if call_tmp[626588]
                  {
                    unknown call_tmp[626593] "expr temp" "maybe param" "maybe type" "temp"
                    (626596 'move' call_tmp[626593](78969 call chpl_build_bounded_range lo[78947] hi[78952]))
                    unknown call_tmp[626598] "expr temp" "maybe param" "maybe type" "temp"
                    (626601 'move' call_tmp[626598](78967 call _build_tuple call_tmp[626593]))
                    (78964 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626598])
                    (476517 'end of statement' lo[78947] hi[78952])
                  }
                  unknown yret[511786] "YVV" "temp"
                  unknown call_tmp[626603] "expr temp" "maybe param" "maybe type" "temp"
                  (626606 'move' call_tmp[626603](78977 call chpl_build_bounded_range lo[78947] hi[78952]))
                  unknown call_tmp[626608] "expr temp" "maybe param" "maybe type" "temp"
                  (626611 'move' call_tmp[626608](78975 call _build_tuple call_tmp[626603]))
                  (511789 'move' yret[511786](511788 'deref' call_tmp[626608]))
                  (511791 yield yret[511786])
                  (476520 'end of statement' lo[78947] hi[78952])
                }
                (78984 call _downEndCount _coforallCount[78981] nil[44])
                (78983 'coforall loop')
              }
              label _continueLabel[78994]
              _indexOfInterest[78989]
              _iterator[78990]
            }
            label _breakLabel[78995]
            Defer
            {
              {
                (79037 call _endCountFree _coforallCount[78981])
              }
            }
            (79042 call _waitEndCount _coforallCount[78981] 1 numTasks[78982])
          }
          {
            const _coforallCount[79054] "const" "end count" "temp"
            (79111 'move' _coforallCount[79054](79108 call _endCountAlloc 1))
            unknown _indexOfInterest[79062] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[79063] "expr temp" "temp"
            (79072 'move' _iterator[79063](79070 call _getIterator tmpIter[78925]))
            Defer
            {
              {
                (79088 call _freeIterator _iterator[79063])
              }
            }
            { scopeless type
              (79077 'move' _indexOfInterest[79062](79074 call iteratorIndex _iterator[79063]))
            }
            ForLoop[79064]
            {
              unknown chunk[79081] "coforall index var" "index var" "insert auto destroy"
              (476527 'end of statement')
              (79083 'move' chunk[79081] _indexOfInterest[79062])
              (476528 'end of statement' chunk[79081])
              (79095 call _upEndCount _coforallCount[79054] 1)
              (476530 'end of statement')
              {
                {
                  unknown call_tmp[626613] "expr temp" "maybe param" "maybe type" "temp"
                  (626616 'move' call_tmp[626613](78867 call - v[78760] 1))
                  unknown call_tmp[626618] "maybe param" "maybe type" "temp"
                  (626621 'move' call_tmp[626618](78869 call _computeBlock v[78760] numChunks[78776] chunk[79081] call_tmp[626613]))
                  const tmp[78870] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541466 'init var' tmp[78870] call_tmp[626618])
                  (78877 call _check_tuple_var_decl tmp[78870] 2)
                  (476531 'end of statement')
                  unknown call_tmp[626623] "maybe param" "maybe type" "temp"
                  (626626 'move' call_tmp[626623](78871 call tmp[78870] 0))
                  const lo[78855] "dead at end of block" "const" "insert auto destroy"
                  (541468 'init var' lo[78855] call_tmp[626623])
                  unknown call_tmp[626628] "maybe param" "maybe type" "temp"
                  (626631 'move' call_tmp[626628](78874 call tmp[78870] 1))
                  const hi[78857] "dead at end of block" "const" "insert auto destroy"
                  (541470 'init var' hi[78857] call_tmp[626628])
                  (78882 'end of statement')
                  unknown call_tmp[626633] "expr temp" "maybe param" "maybe type" "temp"
                  (626636 'move' call_tmp[626633](78912 call _cond_test debugChapelRange[64195]))
                  if call_tmp[626633]
                  {
                    unknown call_tmp[626638] "expr temp" "maybe param" "maybe type" "temp"
                    (626641 'move' call_tmp[626638](78906 call chpl_build_bounded_range lo[78855] hi[78857]))
                    unknown call_tmp[626643] "expr temp" "maybe param" "maybe type" "temp"
                    (626646 'move' call_tmp[626643](78908 call _build_tuple call_tmp[626638]))
                    (78910 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626643])
                    (476532 'end of statement' lo[78855] hi[78857])
                  }
                  unknown yret[511793] "YVV" "temp"
                  unknown call_tmp[626648] "expr temp" "maybe param" "maybe type" "temp"
                  (626651 'move' call_tmp[626648](78919 call chpl_build_bounded_range lo[78855] hi[78857]))
                  unknown call_tmp[626653] "expr temp" "maybe param" "maybe type" "temp"
                  (626656 'move' call_tmp[626653](78921 call _build_tuple call_tmp[626648]))
                  (511796 'move' yret[511793](511795 'deref' call_tmp[626653]))
                  (511798 yield yret[511793])
                  (476535 'end of statement' lo[78855] hi[78857])
                }
                (79057 call _downEndCount _coforallCount[79054] nil[44])
                (79056 'coforall loop')
              }
              label _continueLabel[79067]
              _indexOfInterest[79062]
              _iterator[79063]
            }
            label _breakLabel[79068]
            Defer
            {
              {
                (79099 call _endCountFree _coforallCount[79054])
              }
            }
            (79104 call _waitEndCount _coforallCount[79054] 1)
          }
        }
      }
    }
    (511742 return ret[511740])
  }
  where {
    (77330 call == tag[77315] leader[447])
  }
  function range[64316](?).these[79153](arg _mt[79160]:_MT[238], arg this[79157]:range[64316](?) :
  range[64316](?), param arg tag[79150]:iterKind[453], arg followThis[79155]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511802] "RVV" "temp"
    unknown tmp[421099] "maybe param" "temp"
    (421110 'move' tmp[421099] 1)
    unknown call_tmp[626658] "expr temp" "maybe param" "maybe type" "temp"
    (626661 'move' call_tmp[626658](421112 call _cond_invalid tmp[421099]))
    if call_tmp[626658]
    {
      (421115 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559116] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559117] "maybe param" "temp"
    unknown call_tmp[626663] "expr temp" "maybe param" "maybe type" "temp"
    (626666 'move' call_tmp[626663](421100 call isTrue tmp[421099]))
    (559122 'move' tmp[559117](559120 call _cond_test call_tmp[626663]))
    if tmp[559117]
    {
      unknown tmp[559124] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626670] "expr temp" "maybe param" "maybe type" "temp"
      (626673 'move' call_tmp[626670](79175 call(79171 call (partial) isAmbiguous _mt[243] this[79157])))
      (559126 'move' tmp[559124](421103 call isTrue call_tmp[626670]))
      (559131 'move' tmp[559116](559128 '_paramFoldLogical' tmp[559117] tmp[559124]))
    }
    {
      (559136 'move' tmp[559116](559133 '_paramFoldLogical' tmp[559117] 0))
    }
    unknown call_tmp[626675] "expr temp" "maybe param" "maybe type" "temp"
    (626678 'move' call_tmp[626675](79186 call _cond_test tmp[559116]))
    if call_tmp[626675]
    {
      (79184 call boundsCheckHalt module=[255] HaltWrappers[209915] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358102 'referenced modules list' HaltWrappers[209915])
    }
    unknown call_tmp[626682] "expr temp" "maybe param" "maybe type" "temp"
    (626685 'move' call_tmp[626682](376016 call boundedType _mt[243] this[79157]))
    unknown call_tmp[626687] "expr temp" "maybe param" "maybe type" "temp"
    (626690 'move' call_tmp[626687](79197 call == call_tmp[626682] boundedNone[64211]))
    unknown call_tmp[626692] "expr temp" "maybe param" "maybe type" "temp"
    (626695 'move' call_tmp[626692](79204 call _cond_test call_tmp[626687]))
    if call_tmp[626692]
    {
      (79202 call compilerError "iteration over a range with no bounds")
    }
    unknown tmp[421120] "maybe param" "temp"
    unknown call_tmp[626699] "expr temp" "maybe param" "maybe type" "temp"
    (626702 'move' call_tmp[626699](376021 call stridable _mt[243] this[79157]))
    (421131 'move' tmp[421120](79210 call ! call_tmp[626699]))
    unknown call_tmp[626704] "expr temp" "maybe param" "maybe type" "temp"
    (626707 'move' call_tmp[626704](421133 call _cond_invalid tmp[421120]))
    if call_tmp[626704]
    {
      (421136 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559143] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559144] "maybe param" "temp"
    unknown call_tmp[626709] "expr temp" "maybe param" "maybe type" "temp"
    (626712 'move' call_tmp[626709](421121 call isTrue tmp[421120]))
    (559149 'move' tmp[559144](559147 call _cond_test call_tmp[626709]))
    if tmp[559144]
    {
      unknown tmp[559151] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626716] "expr temp" "maybe param" "maybe type" "temp"
      (626719 'move' call_tmp[626716](376026 call boundedType _mt[243] this[79157]))
      unknown call_tmp[626721] "expr temp" "maybe param" "maybe type" "temp"
      (626724 'move' call_tmp[626721](79217 call == call_tmp[626716] boundedHigh[64209]))
      (559153 'move' tmp[559151](421124 call isTrue call_tmp[626721]))
      (559158 'move' tmp[559143](559155 '_paramFoldLogical' tmp[559144] tmp[559151]))
    }
    {
      (559163 'move' tmp[559143](559160 '_paramFoldLogical' tmp[559144] 0))
    }
    unknown call_tmp[626726] "expr temp" "maybe param" "maybe type" "temp"
    (626729 'move' call_tmp[626726](79242 call _cond_test tmp[559143]))
    if call_tmp[626726]
    {
      (79240 call compilerError "iteration over a range with no first index")
    }
    unknown call_tmp[626733] "expr temp" "maybe param" "maybe type" "temp"
    (626736 'move' call_tmp[626733](79248 call size _mt[243] followThis[79155]))
    unknown call_tmp[626738] "expr temp" "maybe param" "maybe type" "temp"
    (626741 'move' call_tmp[626738](79252 call != call_tmp[626733] 1))
    unknown call_tmp[626743] "expr temp" "maybe param" "maybe type" "temp"
    (626746 'move' call_tmp[626743](79275 call _cond_test call_tmp[626738]))
    if call_tmp[626743]
    {
      (79273 call compilerError "iteration over a range with multi-dimensional iterator")
    }
    unknown call_tmp[626748] "expr temp" "maybe param" "maybe type" "temp"
    (626751 'move' call_tmp[626748](79303 call _cond_test debugChapelRange[64195]))
    if call_tmp[626748]
    {
      (79301 call chpl_debug_writeln "In range follower code: Following " followThis[79155])
    }
    unknown call_tmp[626753] "maybe param" "maybe type" "temp"
    (626756 'move' call_tmp[626753](79311 call followThis[79155] 0))
    unknown myFollowThis[79312] "dead at end of block" "insert auto destroy"
    (541472 'init var' myFollowThis[79312] call_tmp[626753])
    (79315 'end of statement')
    unknown call_tmp[626758] "expr temp" "maybe param" "maybe type" "temp"
    (626761 'move' call_tmp[626758](79339 call _cond_test debugChapelRange[64195]))
    if call_tmp[626758]
    {
      (79337 call chpl_debug_writeln "Range = " myFollowThis[79312])
      (476548 'end of statement' myFollowThis[79312])
    }
    unknown tmp[421141] "maybe param" "temp"
    (421152 'move' tmp[421141] 1)
    unknown call_tmp[626763] "expr temp" "maybe param" "maybe type" "temp"
    (626766 'move' call_tmp[626763](421154 call _cond_invalid tmp[421141]))
    if call_tmp[626763]
    {
      (421157 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559170] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559171] "maybe param" "temp"
    unknown call_tmp[626768] "expr temp" "maybe param" "maybe type" "temp"
    (626771 'move' call_tmp[626768](421142 call isTrue tmp[421141]))
    (559176 'move' tmp[559171](559174 call _cond_test call_tmp[626768]))
    if tmp[559171]
    {
      unknown tmp[559178] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626775] "expr temp" "maybe param" "maybe type" "temp"
      (626778 'move' call_tmp[626775](79350 call(79346 call (partial) hasFirst _mt[243] this[79157])))
      unknown call_tmp[626780] "expr temp" "maybe param" "maybe type" "temp"
      (626783 'move' call_tmp[626780](79351 call ! call_tmp[626775]))
      (559180 'move' tmp[559178](421145 call isTrue call_tmp[626780]))
      (559185 'move' tmp[559170](559182 '_paramFoldLogical' tmp[559171] tmp[559178]))
    }
    {
      (559190 'move' tmp[559170](559187 '_paramFoldLogical' tmp[559171] 0))
    }
    unknown call_tmp[626785] "expr temp" "maybe param" "maybe type" "temp"
    (626788 'move' call_tmp[626785](79413 call _cond_test tmp[559170]))
    if call_tmp[626785]
    {
      unknown call_tmp[626792] "expr temp" "maybe param" "maybe type" "temp"
      (626795 'move' call_tmp[626792](79360 call(79356 call (partial) isEmpty _mt[243] this[79157])))
      unknown call_tmp[626797] "expr temp" "maybe param" "maybe type" "temp"
      (626800 'move' call_tmp[626797](79408 call _cond_test call_tmp[626792]))
      if call_tmp[626797]
      {
        unknown call_tmp[626804] "expr temp" "maybe param" "maybe type" "temp"
        (626807 'move' call_tmp[626804](79366 call(79362 call (partial) isEmpty _mt[243] myFollowThis[79312])))
        unknown call_tmp[626809] "expr temp" "maybe param" "maybe type" "temp"
        (626812 'move' call_tmp[626809](79367 call ! call_tmp[626804]))
        unknown call_tmp[626814] "expr temp" "maybe param" "maybe type" "temp"
        (626817 'move' call_tmp[626814](79393 call _cond_test call_tmp[626809]))
        if call_tmp[626814]
        {
          (79391 call boundsCheckHalt module=[255] HaltWrappers[209915] "size mismatch in zippered iteration")
          (358114 'referenced modules list' HaltWrappers[209915])
        }
      }
      {
        (79405 call boundsCheckHalt module=[255] HaltWrappers[209915] "iteration over a range with no first index")
        (358120 'referenced modules list' HaltWrappers[209915])
      }
    }
    unknown tmp[421183] "maybe param" "temp"
    (421194 'move' tmp[421183] 1)
    unknown call_tmp[626819] "expr temp" "maybe param" "maybe type" "temp"
    (626822 'move' call_tmp[626819](421196 call _cond_invalid tmp[421183]))
    if call_tmp[626819]
    {
      (421199 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559197] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559198] "maybe param" "temp"
    unknown call_tmp[626824] "expr temp" "maybe param" "maybe type" "temp"
    (626827 'move' call_tmp[626824](421184 call isTrue tmp[421183]))
    (559203 'move' tmp[559198](559201 call _cond_test call_tmp[626824]))
    if tmp[559198]
    {
      unknown tmp[559205] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626831] "expr temp" "maybe param" "maybe type" "temp"
      (626834 'move' call_tmp[626831](79423 call(79419 call (partial) hasFirst _mt[243] myFollowThis[79312])))
      unknown call_tmp[626836] "expr temp" "maybe param" "maybe type" "temp"
      (626839 'move' call_tmp[626836](79424 call ! call_tmp[626831]))
      (559207 'move' tmp[559205](421187 call isTrue call_tmp[626836]))
      (559212 'move' tmp[559197](559209 '_paramFoldLogical' tmp[559198] tmp[559205]))
    }
    {
      (559217 'move' tmp[559197](559214 '_paramFoldLogical' tmp[559198] 0))
    }
    unknown call_tmp[626841] "expr temp" "maybe param" "maybe type" "temp"
    (626844 'move' call_tmp[626841](79476 call _cond_test tmp[559197]))
    if call_tmp[626841]
    {
      unknown tmp[421162] "maybe param" "temp"
      unknown call_tmp[626848] "expr temp" "maybe param" "maybe type" "temp"
      (626851 'move' call_tmp[626848](79433 call(79429 call (partial) isAmbiguous _mt[243] myFollowThis[79312])))
      (421173 'move' tmp[421162](79434 call ! call_tmp[626848]))
      unknown call_tmp[626853] "expr temp" "maybe param" "maybe type" "temp"
      (626856 'move' call_tmp[626853](421175 call _cond_invalid tmp[421162]))
      if call_tmp[626853]
      {
        (421178 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559224] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559225] "maybe param" "temp"
      unknown call_tmp[626858] "expr temp" "maybe param" "maybe type" "temp"
      (626861 'move' call_tmp[626858](421163 call isTrue tmp[421162]))
      (559230 'move' tmp[559225](559228 call _cond_test call_tmp[626858]))
      if tmp[559225]
      {
        unknown tmp[559232] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626865] "expr temp" "maybe param" "maybe type" "temp"
        (626868 'move' call_tmp[626865](79441 call(79437 call (partial) isEmpty _mt[243] myFollowThis[79312])))
        (559234 'move' tmp[559232](421166 call isTrue call_tmp[626865]))
        (559239 'move' tmp[559224](559236 '_paramFoldLogical' tmp[559225] tmp[559232]))
      }
      {
        (559244 'move' tmp[559224](559241 '_paramFoldLogical' tmp[559225] 0))
      }
      unknown call_tmp[626870] "expr temp" "maybe param" "maybe type" "temp"
      (626873 'move' call_tmp[626870](79444 call ! tmp[559224]))
      unknown call_tmp[626875] "expr temp" "maybe param" "maybe type" "temp"
      (626878 'move' call_tmp[626875](79470 call _cond_test call_tmp[626870]))
      if call_tmp[626875]
      {
        (79468 call boundsCheckHalt module=[255] HaltWrappers[209915] "zippered iteration over a range with no first index")
        (358129 'referenced modules list' HaltWrappers[209915])
      }
    }
    unknown tmp[421267] "maybe param" "temp"
    unknown tmp[421288] "maybe param" "temp"
    (421299 'move' tmp[421288](79483 call isBoundedRange myFollowThis[79312]))
    unknown call_tmp[626880] "expr temp" "maybe param" "maybe type" "temp"
    (626883 'move' call_tmp[626880](421301 call _cond_invalid tmp[421288]))
    if call_tmp[626880]
    {
      (421304 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559251] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559252] "maybe param" "temp"
    unknown call_tmp[626885] "expr temp" "maybe param" "maybe type" "temp"
    (626888 'move' call_tmp[626885](421289 call isTrue tmp[421288]))
    (559257 'move' tmp[559252](559255 call _cond_test call_tmp[626885]))
    if tmp[559252]
    {
      unknown tmp[559259] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626892] "expr temp" "maybe param" "maybe type" "temp"
      (626895 'move' call_tmp[626892](79485 call stridable _mt[243] myFollowThis[79312]))
      unknown call_tmp[626897] "expr temp" "maybe param" "maybe type" "temp"
      (626900 'move' call_tmp[626897](79488 call ! call_tmp[626892]))
      (559261 'move' tmp[559259](421292 call isTrue call_tmp[626897]))
      (559266 'move' tmp[559251](559263 '_paramFoldLogical' tmp[559252] tmp[559259]))
    }
    {
      (559271 'move' tmp[559251](559268 '_paramFoldLogical' tmp[559252] 0))
    }
    (421278 'move' tmp[421267] tmp[559251])
    unknown call_tmp[626902] "expr temp" "maybe param" "maybe type" "temp"
    (626905 'move' call_tmp[626902](421280 call _cond_invalid tmp[421267]))
    if call_tmp[626902]
    {
      (421283 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[559278] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559279] "maybe param" "temp"
    unknown call_tmp[626907] "expr temp" "maybe param" "maybe type" "temp"
    (626910 'move' call_tmp[626907](421268 call isTrue tmp[421267]))
    (559284 'move' tmp[559279](559282 call _cond_test call_tmp[626907]))
    if tmp[559279]
    {
      (559289 'move' tmp[559278](559286 '_paramFoldLogical' tmp[559279] 1))
    }
    {
      unknown tmp[559291] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626914] "expr temp" "maybe param" "maybe type" "temp"
      (626917 'move' call_tmp[626914](79497 call(79493 call (partial) hasLast _mt[243] myFollowThis[79312])))
      (559293 'move' tmp[559291](421272 call isTrue call_tmp[626914]))
      (559298 'move' tmp[559278](559295 '_paramFoldLogical' tmp[559279] tmp[559291]))
    }
    unknown call_tmp[626919] "expr temp" "maybe param" "maybe type" "temp"
    (626922 'move' call_tmp[626919](80148 call _cond_test tmp[559278]))
    if call_tmp[626919]
    {
      unknown call_tmp[626926] "maybe param" "maybe type" "temp"
      (626929 'move' call_tmp[626926](79501 call size _mt[243] myFollowThis[79312]))
      const flwlen[79504] "dead at end of block" "const" "insert auto destroy"
      (541474 'init var' flwlen[79504] call_tmp[626926])
      (79507 'end of statement' myFollowThis[79312])
      unknown tmp[421204] "maybe param" "temp"
      (421215 'move' tmp[421204] 1)
      unknown call_tmp[626931] "expr temp" "maybe param" "maybe type" "temp"
      (626934 'move' call_tmp[626931](421217 call _cond_invalid tmp[421204]))
      if call_tmp[626931]
      {
        (421220 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559305] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559306] "maybe param" "temp"
      unknown call_tmp[626936] "expr temp" "maybe param" "maybe type" "temp"
      (626939 'move' call_tmp[626936](421205 call isTrue tmp[421204]))
      (559311 'move' tmp[559306](559309 call _cond_test call_tmp[626936]))
      if tmp[559306]
      {
        unknown tmp[559313] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626943] "expr temp" "maybe param" "maybe type" "temp"
        (626946 'move' call_tmp[626943](79515 call(79511 call (partial) hasLast _mt[243] this[79157])))
        (559315 'move' tmp[559313](421208 call isTrue call_tmp[626943]))
        (559320 'move' tmp[559305](559317 '_paramFoldLogical' tmp[559306] tmp[559313]))
      }
      {
        (559325 'move' tmp[559305](559322 '_paramFoldLogical' tmp[559306] 0))
      }
      unknown call_tmp[626948] "expr temp" "maybe param" "maybe type" "temp"
      (626951 'move' call_tmp[626948](79587 call _cond_test tmp[559305]))
      if call_tmp[626948]
      {
        unknown call_tmp[626953] "expr temp" "maybe param" "maybe type" "temp"
        (626956 'move' call_tmp[626953](79521 call isBoundedRange this[79157]))
        unknown call_tmp[626958] "expr temp" "maybe param" "maybe type" "temp"
        (626961 'move' call_tmp[626958](79581 call _cond_test call_tmp[626953]))
        if call_tmp[626958]
        {
          unknown call_tmp[626965] "expr temp" "maybe param" "maybe type" "temp"
          (626968 'move' call_tmp[626965](79523 call size _mt[243] this[79157]))
          unknown call_tmp[626970] "expr temp" "maybe param" "maybe type" "temp"
          (626973 'move' call_tmp[626970](79527 call < call_tmp[626965] flwlen[79504]))
          unknown call_tmp[626975] "expr temp" "maybe param" "maybe type" "temp"
          (626978 'move' call_tmp[626975](79553 call _cond_test call_tmp[626970]))
          if call_tmp[626975]
          {
            (79551 call boundsCheckHalt module=[255] HaltWrappers[209915] "zippered iteration over a range with too few indices")
            (358140 'referenced modules list' HaltWrappers[209915])
          }
        }
        {
          (79579 call assert 0 "hasFirst && hasLast do not imply isBoundedRange")
        }
      }
      unknown tmp[421225] "maybe param" "temp"
      (421236 'move' tmp[421225](79592 call stridable _mt[243] this[79157]))
      unknown call_tmp[626982] "expr temp" "maybe param" "maybe type" "temp"
      (626985 'move' call_tmp[626982](421238 call _cond_invalid tmp[421225]))
      if call_tmp[626982]
      {
        (421241 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559332] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559333] "maybe param" "temp"
      unknown call_tmp[626987] "expr temp" "maybe param" "maybe type" "temp"
      (626990 'move' call_tmp[626987](421226 call isTrue tmp[421225]))
      (559338 'move' tmp[559333](559336 call _cond_test call_tmp[626987]))
      if tmp[559333]
      {
        (559343 'move' tmp[559332](559340 '_paramFoldLogical' tmp[559333] 1))
      }
      {
        unknown tmp[559345] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626994] "expr temp" "maybe param" "maybe type" "temp"
        (626997 'move' call_tmp[626994](79596 call stridable _mt[243] myFollowThis[79312]))
        (559347 'move' tmp[559345](421230 call isTrue call_tmp[626994]))
        (559352 'move' tmp[559332](559349 '_paramFoldLogical' tmp[559333] tmp[559345]))
      }
      unknown call_tmp[626999] "expr temp" "maybe param" "maybe type" "temp"
      (627002 'move' call_tmp[626999](79937 call _cond_test tmp[559332]))
      if call_tmp[626999]
      {
        unknown call_tmp[627006] "expr temp" "maybe param" "maybe type" "temp"
        (627009 'move' call_tmp[627006](79604 call(376041 call (partial) chpl_intToIdx _mt[243] this[79157]) 1))
        unknown call_tmp[627013] "expr temp" "maybe param" "maybe type" "temp"
        (627016 'move' call_tmp[627013](79608 call(376045 call (partial) chpl_intToIdx _mt[243] this[79157]) 0))
        unknown call_tmp[627018] "expr temp" "maybe param" "maybe type" "temp"
        (627021 'move' call_tmp[627018](79609 call chpl_build_bounded_range call_tmp[627006] call_tmp[627013]))
        unknown call_tmp[627025] "expr temp" "maybe param" "maybe type" "temp"
        (627028 'move' call_tmp[627025](376049 call intIdxType _mt[243] this[79157]))
        unknown call_tmp[627030] "expr temp" "maybe param" "maybe type" "temp"
        (627033 'move' call_tmp[627030](79615 call chpl__rangeStrideType call_tmp[627025]))
        unknown call_tmp[627035] "expr temp" "maybe param" "maybe type" "temp"
        (627038 'move' call_tmp[627035](79616 call _cast call_tmp[627030] 1))
        unknown call_tmp[627040] "maybe param" "maybe type" "temp"
        (627043 'move' call_tmp[627040](79618 call chpl_by call_tmp[627018] call_tmp[627035]))
        unknown r[79620] "dead at end of block" "insert auto destroy"
        (541476 'init var' r[79620] call_tmp[627040])
        (79623 'end of statement')
        unknown call_tmp[627045] "expr temp" "maybe param" "maybe type" "temp"
        (627048 'move' call_tmp[627045](79627 call != flwlen[79504] 0))
        unknown call_tmp[627050] "expr temp" "maybe param" "maybe type" "temp"
        (627053 'move' call_tmp[627050](79729 call _cond_test call_tmp[627045]))
        if call_tmp[627050]
        {
          unknown call_tmp[627057] "expr temp" "maybe param" "maybe type" "temp"
          (627060 'move' call_tmp[627057](79630 call stride _mt[243] this[79157]))
          unknown call_tmp[627064] "expr temp" "maybe param" "maybe type" "temp"
          (627067 'move' call_tmp[627064](79634 call stride _mt[243] myFollowThis[79312]))
          unknown call_tmp[627069] "maybe param" "maybe type" "temp"
          (627072 'move' call_tmp[627069](79637 call * call_tmp[627057] call_tmp[627064]))
          const stride[79639] "dead at end of block" "const" "insert auto destroy"
          (541478 'init var' stride[79639] call_tmp[627069])
          (79642 'end of statement')
          unknown call_tmp[627078] "expr temp" "maybe param" "maybe type" "temp"
          (627081 'move' call_tmp[627078](79649 call first _mt[243] myFollowThis[79312]))
          unknown call_tmp[627083] "maybe param" "maybe type" "temp"
          (627086 'move' call_tmp[627083](79653 call(79645 call (partial) orderToIndex _mt[243] this[79157]) call_tmp[627078]))
          unknown low[79654] "dead at end of block" "insert auto destroy"
          (541480 'init var' low[79654] call_tmp[627083])
          (79657 'end of statement')
          unknown call_tmp[627092] "expr temp" "maybe param" "maybe type" "temp"
          (627095 'move' call_tmp[627092](376059 call strType _mt[243] this[79157]))
          unknown call_tmp[627097] "expr temp" "maybe param" "maybe type" "temp"
          (627100 'move' call_tmp[627097](79662 call chpl__idxToInt low[79654]))
          unknown call_tmp[627102] "expr temp" "maybe param" "maybe type" "temp"
          (627105 'move' call_tmp[627102](79664 call _cast call_tmp[627092] call_tmp[627097]))
          unknown call_tmp[627109] "expr temp" "maybe param" "maybe type" "temp"
          (627112 'move' call_tmp[627109](376065 call strType _mt[243] this[79157]))
          unknown call_tmp[627114] "expr temp" "maybe param" "maybe type" "temp"
          (627117 'move' call_tmp[627114](79669 call - flwlen[79504] 1))
          unknown call_tmp[627119] "expr temp" "maybe param" "maybe type" "temp"
          (627122 'move' call_tmp[627119](79672 call _cast call_tmp[627109] call_tmp[627114]))
          unknown call_tmp[627124] "expr temp" "maybe param" "maybe type" "temp"
          (627127 'move' call_tmp[627124](79674 call * stride[79639] call_tmp[627119]))
          unknown call_tmp[627129] "expr temp" "maybe param" "maybe type" "temp"
          (627132 'move' call_tmp[627129](79676 call + call_tmp[627102] call_tmp[627124]))
          unknown call_tmp[627134] "maybe param" "maybe type" "temp"
          (627137 'move' call_tmp[627134](79679 call(376054 call (partial) chpl_intToIdx _mt[243] this[79157]) call_tmp[627129]))
          unknown high[79680] "dead at end of block" "insert auto destroy"
          (541482 'init var' high[79680] call_tmp[627134])
          (79683 'end of statement' myFollowThis[79312] myFollowThis[79312] low[79654] stride[79639] flwlen[79504])
          unknown call_tmp[627143] "expr temp" "maybe param" "maybe type" "temp"
          (627146 'move' call_tmp[627143](79691 call last _mt[243] myFollowThis[79312]))
          unknown call_tmp[627148] "expr temp" "maybe param" "maybe type" "temp"
          (627151 'move' call_tmp[627148](79695 call(79687 call (partial) orderToIndex _mt[243] this[79157]) call_tmp[627143]))
          unknown call_tmp[627153] "expr temp" "maybe param" "maybe type" "temp"
          (627156 'move' call_tmp[627153](79696 call == high[79680] call_tmp[627148]))
          (79699 call assert call_tmp[627153])
          (476568 'end of statement' high[79680] myFollowThis[79312])
          unknown call_tmp[627158] "expr temp" "maybe param" "maybe type" "temp"
          (627161 'move' call_tmp[627158](79703 call < stride[79639] 0))
          unknown call_tmp[627163] "expr temp" "maybe param" "maybe type" "temp"
          (627166 'move' call_tmp[627163](79710 call _cond_test call_tmp[627158]))
          if call_tmp[627163]
          {
            (79707 call <=> low[79654] high[79680])
            (476571 'end of statement' low[79654] high[79680])
          }
          unknown call_tmp[627168] "expr temp" "maybe param" "maybe type" "temp"
          (627171 'move' call_tmp[627168](79718 call chpl_build_bounded_range low[79654] high[79680]))
          unknown call_tmp[627175] "expr temp" "maybe param" "maybe type" "temp"
          (627178 'move' call_tmp[627175](376077 call strType _mt[243] this[79157]))
          unknown call_tmp[627180] "expr temp" "maybe param" "maybe type" "temp"
          (627183 'move' call_tmp[627180](79722 call _cast call_tmp[627175] stride[79639]))
          unknown call_tmp[627185] "expr temp" "maybe param" "maybe type" "temp"
          (627188 'move' call_tmp[627185](79724 call chpl_by call_tmp[627168] call_tmp[627180]))
          (79726 call = r[79620] call_tmp[627185])
          (476574 'end of statement' r[79620] low[79654] high[79680] stride[79639])
        }
        unknown call_tmp[627190] "expr temp" "maybe param" "maybe type" "temp"
        (627193 'move' call_tmp[627190](79756 call _cond_test debugChapelRange[64195]))
        if call_tmp[627190]
        {
          (79754 call chpl_debug_writeln "Expanded range = " r[79620])
          (476579 'end of statement' r[79620])
        }
        {
          unknown _indexOfInterest[79766] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79767] "expr temp" "temp"
          (79776 'move' _iterator[79767](79774 call _getIterator r[79620]))
          Defer
          {
            {
              (79792 call _freeIterator _iterator[79767])
            }
          }
          { scopeless type
            (79781 'move' _indexOfInterest[79766](79778 call iteratorIndex _iterator[79767]))
          }
          ForLoop[79768]
          {
            unknown i[79785] "index var" "insert auto destroy"
            (476582 'end of statement')
            (79787 'move' i[79785] _indexOfInterest[79766])
            (476583 'end of statement' i[79785])
            unknown yret[511806] "YVV" "temp"
            (511809 'move' yret[511806](511808 'deref' i[79785]))
            (511811 yield yret[511806])
            (476585 'end of statement' i[79785])
            label _continueLabel[79771]
            _indexOfInterest[79766]
            _iterator[79767]
          }
          label _breakLabel[79772]
        }
      }
      {
        unknown call_tmp[627197] "expr temp" "maybe param" "maybe type" "temp"
        (627200 'move' call_tmp[627197](376086 call idxType _mt[243] this[79157]))
        unknown call_tmp[627202] "expr temp" "maybe param" "maybe type" "temp"
        (627205 'move' call_tmp[627202](79803 call chpl__intToIdx call_tmp[627197] 1))
        unknown call_tmp[627209] "expr temp" "maybe param" "maybe type" "temp"
        (627212 'move' call_tmp[627209](376091 call idxType _mt[243] this[79157]))
        unknown call_tmp[627214] "expr temp" "maybe param" "maybe type" "temp"
        (627217 'move' call_tmp[627214](79808 call chpl__intToIdx call_tmp[627209] 0))
        unknown call_tmp[627219] "maybe param" "maybe type" "temp"
        (627222 'move' call_tmp[627219](79809 call chpl_build_bounded_range call_tmp[627202] call_tmp[627214]))
        unknown r[79811] "dead at end of block" "insert auto destroy"
        (541484 'init var' r[79811] call_tmp[627219])
        (79814 'end of statement')
        unknown call_tmp[627224] "expr temp" "maybe param" "maybe type" "temp"
        (627227 'move' call_tmp[627224](79818 call != flwlen[79504] 0))
        unknown call_tmp[627229] "expr temp" "maybe param" "maybe type" "temp"
        (627232 'move' call_tmp[627229](79883 call _cond_test call_tmp[627224]))
        if call_tmp[627229]
        {
          unknown call_tmp[627238] "expr temp" "maybe param" "maybe type" "temp"
          (627241 'move' call_tmp[627238](79825 call first _mt[243] myFollowThis[79312]))
          unknown call_tmp[627243] "maybe param" "maybe type" "temp"
          (627246 'move' call_tmp[627243](79829 call(79821 call (partial) orderToIndex _mt[243] this[79157]) call_tmp[627238]))
          const low[79830] "dead at end of block" "const" "insert auto destroy"
          (541486 'init var' low[79830] call_tmp[627243])
          (79833 'end of statement')
          unknown call_tmp[627252] "expr temp" "maybe param" "maybe type" "temp"
          (627255 'move' call_tmp[627252](376101 call strType _mt[243] this[79157]))
          unknown call_tmp[627257] "expr temp" "maybe param" "maybe type" "temp"
          (627260 'move' call_tmp[627257](79839 call chpl__idxToInt low[79830]))
          unknown call_tmp[627262] "expr temp" "maybe param" "maybe type" "temp"
          (627265 'move' call_tmp[627262](79841 call _cast call_tmp[627252] call_tmp[627257]))
          unknown call_tmp[627269] "expr temp" "maybe param" "maybe type" "temp"
          (627272 'move' call_tmp[627269](376106 call strType _mt[243] this[79157]))
          unknown call_tmp[627274] "expr temp" "maybe param" "maybe type" "temp"
          (627277 'move' call_tmp[627274](79845 call - flwlen[79504] 1))
          unknown call_tmp[627279] "expr temp" "maybe param" "maybe type" "temp"
          (627282 'move' call_tmp[627279](79848 call _cast call_tmp[627269] call_tmp[627274]))
          unknown call_tmp[627284] "expr temp" "maybe param" "maybe type" "temp"
          (627287 'move' call_tmp[627284](79850 call + call_tmp[627262] call_tmp[627279]))
          unknown call_tmp[627289] "maybe param" "maybe type" "temp"
          (627292 'move' call_tmp[627289](79853 call(376096 call (partial) chpl_intToIdx _mt[243] this[79157]) call_tmp[627284]))
          const high[79854] "dead at end of block" "const" "insert auto destroy"
          (541488 'init var' high[79854] call_tmp[627289])
          (79857 'end of statement' myFollowThis[79312] low[79830] flwlen[79504])
          unknown call_tmp[627298] "expr temp" "maybe param" "maybe type" "temp"
          (627301 'move' call_tmp[627298](79865 call last _mt[243] myFollowThis[79312]))
          unknown call_tmp[627303] "expr temp" "maybe param" "maybe type" "temp"
          (627306 'move' call_tmp[627303](79869 call(79861 call (partial) orderToIndex _mt[243] this[79157]) call_tmp[627298]))
          unknown call_tmp[627308] "expr temp" "maybe param" "maybe type" "temp"
          (627311 'move' call_tmp[627308](79870 call == high[79854] call_tmp[627303]))
          (79873 call assert call_tmp[627308])
          (476590 'end of statement' high[79854] myFollowThis[79312])
          unknown call_tmp[627313] "expr temp" "maybe param" "maybe type" "temp"
          (627316 'move' call_tmp[627313](79878 call chpl_build_bounded_range low[79830] high[79854]))
          (79880 call = r[79811] call_tmp[627313])
          (476593 'end of statement' r[79811] low[79830] high[79854])
        }
        unknown call_tmp[627318] "expr temp" "maybe param" "maybe type" "temp"
        (627321 'move' call_tmp[627318](79894 call _cond_test debugChapelRange[64195]))
        if call_tmp[627318]
        {
          (79892 call chpl_debug_writeln "Expanded range = " r[79811])
          (476597 'end of statement' r[79811])
        }
        {
          unknown _indexOfInterest[79904] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79905] "expr temp" "temp"
          (79914 'move' _iterator[79905](79912 call _getIterator r[79811]))
          Defer
          {
            {
              (79930 call _freeIterator _iterator[79905])
            }
          }
          { scopeless type
            (79919 'move' _indexOfInterest[79904](79916 call iteratorIndex _iterator[79905]))
          }
          ForLoop[79906]
          {
            unknown i[79923] "index var" "insert auto destroy"
            (476600 'end of statement')
            (79925 'move' i[79923] _indexOfInterest[79904])
            (476601 'end of statement' i[79923])
            unknown yret[511813] "YVV" "temp"
            (511816 'move' yret[511813](511815 'deref' i[79923]))
            (511818 yield yret[511813])
            (476603 'end of statement' i[79923])
            label _continueLabel[79909]
            _indexOfInterest[79904]
            _iterator[79905]
          }
          label _breakLabel[79910]
        }
      }
    }
    {
      unknown tmp[421246] "maybe param" "temp"
      (421257 'move' tmp[421246] 1)
      unknown call_tmp[627323] "expr temp" "maybe param" "maybe type" "temp"
      (627326 'move' call_tmp[627323](421259 call _cond_invalid tmp[421246]))
      if call_tmp[627323]
      {
        (421262 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559359] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559360] "maybe param" "temp"
      unknown call_tmp[627328] "expr temp" "maybe param" "maybe type" "temp"
      (627331 'move' call_tmp[627328](421247 call isTrue tmp[421246]))
      (559365 'move' tmp[559360](559363 call _cond_test call_tmp[627328]))
      if tmp[559360]
      {
        unknown tmp[559367] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627335] "expr temp" "maybe param" "maybe type" "temp"
        (627338 'move' call_tmp[627335](79947 call(79943 call (partial) hasLast _mt[243] this[79157])))
        (559369 'move' tmp[559367](421250 call isTrue call_tmp[627335]))
        (559374 'move' tmp[559359](559371 '_paramFoldLogical' tmp[559360] tmp[559367]))
      }
      {
        (559379 'move' tmp[559359](559376 '_paramFoldLogical' tmp[559360] 0))
      }
      unknown call_tmp[627340] "expr temp" "maybe param" "maybe type" "temp"
      (627343 'move' call_tmp[627340](79978 call _cond_test tmp[559359]))
      if call_tmp[627340]
      {
        (79976 call zipLengthHalt module=[255] HaltWrappers[209915] "zippered iteration where a bounded range follows an unbounded iterator")
        (358159 'referenced modules list' HaltWrappers[209915])
      }
      unknown call_tmp[627349] "expr temp" "maybe param" "maybe type" "temp"
      (627352 'move' call_tmp[627349](79989 call first _mt[243] myFollowThis[79312]))
      unknown call_tmp[627354] "maybe param" "maybe type" "temp"
      (627357 'move' call_tmp[627354](79993 call(79985 call (partial) orderToIndex _mt[243] this[79157]) call_tmp[627349]))
      const first[79994] "dead at end of block" "const" "insert auto destroy"
      (541490 'init var' first[79994] call_tmp[627354])
      (79997 'end of statement')
      unknown call_tmp[627361] "expr temp" "maybe param" "maybe type" "temp"
      (627364 'move' call_tmp[627361](79999 call stride _mt[243] this[79157]))
      unknown call_tmp[627368] "expr temp" "maybe param" "maybe type" "temp"
      (627371 'move' call_tmp[627368](80003 call stride _mt[243] myFollowThis[79312]))
      unknown call_tmp[627373] "maybe param" "maybe type" "temp"
      (627376 'move' call_tmp[627373](80006 call * call_tmp[627361] call_tmp[627368]))
      const stride[80008] "dead at end of block" "const" "insert auto destroy"
      (541492 'init var' stride[80008] call_tmp[627373])
      (80011 'end of statement' myFollowThis[79312] myFollowThis[79312])
      unknown call_tmp[627378] "expr temp" "maybe param" "maybe type" "temp"
      (627381 'move' call_tmp[627378](80014 call > stride[80008] 0))
      unknown call_tmp[627383] "expr temp" "maybe param" "maybe type" "temp"
      (627386 'move' call_tmp[627383](80144 call _cond_test call_tmp[627378]))
      if call_tmp[627383]
      {
        unknown call_tmp[627388] "expr temp" "maybe param" "maybe type" "temp"
        (627391 'move' call_tmp[627388](80017 call chpl_build_low_bounded_range first[79994]))
        unknown call_tmp[627395] "expr temp" "maybe param" "maybe type" "temp"
        (627398 'move' call_tmp[627395](376122 call strType _mt[243] this[79157]))
        unknown call_tmp[627400] "expr temp" "maybe param" "maybe type" "temp"
        (627403 'move' call_tmp[627400](80021 call _cast call_tmp[627395] stride[80008]))
        unknown call_tmp[627405] "maybe param" "maybe type" "temp"
        (627408 'move' call_tmp[627405](80023 call chpl_by call_tmp[627388] call_tmp[627400]))
        const r[80025] "dead at end of block" "const" "insert auto destroy"
        (541494 'init var' r[80025] call_tmp[627405])
        (80028 'end of statement' first[79994] stride[80008])
        unknown call_tmp[627410] "expr temp" "maybe param" "maybe type" "temp"
        (627413 'move' call_tmp[627410](80037 call _cond_test debugChapelRange[64195]))
        if call_tmp[627410]
        {
          (80035 call chpl_debug_writeln "Expanded range = " r[80025])
          (476611 'end of statement' r[80025])
        }
        {
          unknown _indexOfInterest[80047] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80048] "expr temp" "temp"
          (80057 'move' _iterator[80048](80055 call _getIterator r[80025]))
          Defer
          {
            {
              (80073 call _freeIterator _iterator[80048])
            }
          }
          { scopeless type
            (80062 'move' _indexOfInterest[80047](80059 call iteratorIndex _iterator[80048]))
          }
          ForLoop[80049]
          {
            unknown i[80066] "index var" "insert auto destroy"
            (476614 'end of statement')
            (80068 'move' i[80066] _indexOfInterest[80047])
            (476615 'end of statement' i[80066])
            unknown yret[511820] "YVV" "temp"
            (511823 'move' yret[511820](511822 'deref' i[80066]))
            (511825 yield yret[511820])
            (476617 'end of statement' i[80066])
            label _continueLabel[80052]
            _indexOfInterest[80047]
            _iterator[80048]
          }
          label _breakLabel[80053]
        }
      }
      {
        unknown call_tmp[627415] "expr temp" "maybe param" "maybe type" "temp"
        (627418 'move' call_tmp[627415](80081 call chpl_build_high_bounded_range first[79994]))
        unknown call_tmp[627422] "expr temp" "maybe param" "maybe type" "temp"
        (627425 'move' call_tmp[627422](376132 call strType _mt[243] this[79157]))
        unknown call_tmp[627427] "expr temp" "maybe param" "maybe type" "temp"
        (627430 'move' call_tmp[627427](80085 call _cast call_tmp[627422] stride[80008]))
        unknown call_tmp[627432] "maybe param" "maybe type" "temp"
        (627435 'move' call_tmp[627432](80087 call chpl_by call_tmp[627415] call_tmp[627427]))
        const r[80089] "dead at end of block" "const" "insert auto destroy"
        (541496 'init var' r[80089] call_tmp[627432])
        (80092 'end of statement' first[79994] stride[80008])
        unknown call_tmp[627437] "expr temp" "maybe param" "maybe type" "temp"
        (627440 'move' call_tmp[627437](80101 call _cond_test debugChapelRange[64195]))
        if call_tmp[627437]
        {
          (80099 call chpl_debug_writeln "Expanded range = " r[80089])
          (476621 'end of statement' r[80089])
        }
        {
          unknown _indexOfInterest[80111] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80112] "expr temp" "temp"
          (80121 'move' _iterator[80112](80119 call _getIterator r[80089]))
          Defer
          {
            {
              (80137 call _freeIterator _iterator[80112])
            }
          }
          { scopeless type
            (80126 'move' _indexOfInterest[80111](80123 call iteratorIndex _iterator[80112]))
          }
          ForLoop[80113]
          {
            unknown i[80130] "index var" "insert auto destroy"
            (476624 'end of statement')
            (80132 'move' i[80130] _indexOfInterest[80111])
            (476625 'end of statement' i[80130])
            unknown yret[511827] "YVV" "temp"
            (511830 'move' yret[511827](511829 'deref' i[80130]))
            (511832 yield yret[511827])
            (476627 'end of statement' i[80130])
            label _continueLabel[80116]
            _indexOfInterest[80111]
            _iterator[80112]
          }
          label _breakLabel[80117]
        }
      }
    }
    (511804 return ret[511802])
  }
  where {
    (79167 call == tag[79150] follower[449])
  }
  function _cast[80161](arg t[80158]:string[26], arg x[80167]:range[64316](?)) : _unknown[51]
  {
    unknown ret[511836] "RVV" "temp"
    unknown ret[80171] "dead at end of block" "insert auto destroy"
    (541498 'default init var' ret[80171] string[26])
    (80174 'end of statement')
    unknown call_tmp[627444] "expr temp" "maybe param" "maybe type" "temp"
    (627447 'move' call_tmp[627444](80181 call(80177 call (partial) hasLowBound _mt[243] x[80167])))
    unknown call_tmp[627449] "expr temp" "maybe param" "maybe type" "temp"
    (627452 'move' call_tmp[627449](80193 call _cond_test call_tmp[627444]))
    if call_tmp[627449]
    {
      unknown call_tmp[627456] "expr temp" "maybe param" "maybe type" "temp"
      (627459 'move' call_tmp[627456](80184 call low _mt[243] x[80167]))
      unknown call_tmp[627461] "expr temp" "maybe param" "maybe type" "temp"
      (627464 'move' call_tmp[627461](80188 call _cast string[26] call_tmp[627456]))
      (80190 call += ret[80171] call_tmp[627461])
      (476629 'end of statement' ret[80171])
    }
    (80216 call += ret[80171] "..")
    (476631 'end of statement' ret[80171])
    unknown call_tmp[627468] "expr temp" "maybe param" "maybe type" "temp"
    (627471 'move' call_tmp[627468](80224 call(80220 call (partial) hasHighBound _mt[243] x[80167])))
    unknown call_tmp[627473] "expr temp" "maybe param" "maybe type" "temp"
    (627476 'move' call_tmp[627473](80236 call _cond_test call_tmp[627468]))
    if call_tmp[627473]
    {
      unknown call_tmp[627480] "expr temp" "maybe param" "maybe type" "temp"
      (627483 'move' call_tmp[627480](80227 call high _mt[243] x[80167]))
      unknown call_tmp[627485] "expr temp" "maybe param" "maybe type" "temp"
      (627488 'move' call_tmp[627485](80231 call _cast string[26] call_tmp[627480]))
      (80233 call += ret[80171] call_tmp[627485])
      (476633 'end of statement' ret[80171])
    }
    unknown call_tmp[627492] "expr temp" "maybe param" "maybe type" "temp"
    (627495 'move' call_tmp[627492](80242 call stride _mt[243] x[80167]))
    unknown call_tmp[627497] "expr temp" "maybe param" "maybe type" "temp"
    (627500 'move' call_tmp[627497](80246 call != call_tmp[627492] 1))
    unknown call_tmp[627502] "expr temp" "maybe param" "maybe type" "temp"
    (627505 'move' call_tmp[627502](80262 call _cond_test call_tmp[627497]))
    if call_tmp[627502]
    {
      unknown call_tmp[627509] "expr temp" "maybe param" "maybe type" "temp"
      (627512 'move' call_tmp[627509](80251 call stride _mt[243] x[80167]))
      unknown call_tmp[627514] "expr temp" "maybe param" "maybe type" "temp"
      (627517 'move' call_tmp[627514](80255 call _cast string[26] call_tmp[627509]))
      unknown call_tmp[627519] "expr temp" "maybe param" "maybe type" "temp"
      (627522 'move' call_tmp[627519](80257 call + " by " call_tmp[627514]))
      (80259 call += ret[80171] call_tmp[627519])
      (476635 'end of statement' ret[80171])
    }
    unknown alignCheckRange[80268] "dead at end of block" "insert auto destroy"
    (541500 'init var' alignCheckRange[80268] x[80167])
    (80271 'end of statement')
    (80279 call(80275 call (partial) normalizeAlignment _mt[243] alignCheckRange[80268]))
    (476637 'end of statement' alignCheckRange[80268])
    unknown call_tmp[627528] "expr temp" "maybe param" "maybe type" "temp"
    (627531 'move' call_tmp[627528](80288 call(80284 call (partial) isNaturallyAligned _mt[243] alignCheckRange[80268])))
    unknown call_tmp[627533] "expr temp" "maybe param" "maybe type" "temp"
    (627536 'move' call_tmp[627533](80289 call ! call_tmp[627528]))
    unknown call_tmp[627538] "expr temp" "maybe param" "maybe type" "temp"
    (627541 'move' call_tmp[627538](80331 call _cond_test call_tmp[627533]))
    if call_tmp[627538]
    {
      unknown call_tmp[627545] "expr temp" "maybe param" "maybe type" "temp"
      (627548 'move' call_tmp[627545](80312 call alignment _mt[243] x[80167]))
      unknown call_tmp[627550] "expr temp" "maybe param" "maybe type" "temp"
      (627553 'move' call_tmp[627550](80316 call chpl__idxToInt call_tmp[627545]))
      unknown call_tmp[627557] "expr temp" "maybe param" "maybe type" "temp"
      (627560 'move' call_tmp[627557](80319 call stride _mt[243] x[80167]))
      unknown call_tmp[627562] "expr temp" "maybe param" "maybe type" "temp"
      (627565 'move' call_tmp[627562](80322 call chpl__mod call_tmp[627550] call_tmp[627557]))
      unknown call_tmp[627567] "expr temp" "maybe param" "maybe type" "temp"
      (627570 'move' call_tmp[627567](80324 call _cast string[26] call_tmp[627562]))
      unknown call_tmp[627572] "expr temp" "maybe param" "maybe type" "temp"
      (627575 'move' call_tmp[627572](80326 call + " align " call_tmp[627567]))
      (80328 call += ret[80171] call_tmp[627572])
      (476639 'end of statement' ret[80171])
    }
    (511841 'move' ret[511836](511840 'deref' ret[80171]))
    gotoReturn _end__cast[511834] _end__cast[511834]
    (476641 'end of statement' ret[80171])
    label _end__cast[511834]
    (511838 return ret[511836])
  }
  function range[64316](?).normalizeAlignment[80344](arg _mt[80349]:_MT[238], ref arg this[80346]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown tmp[421309] "maybe param" "temp"
    (421320 'move' tmp[421309](376149 call stridable _mt[243] this[80346]))
    unknown call_tmp[627579] "expr temp" "maybe param" "maybe type" "temp"
    (627582 'move' call_tmp[627579](421322 call _cond_invalid tmp[421309]))
    if call_tmp[627579]
    {
      (421325 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559386] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559387] "maybe param" "temp"
    unknown call_tmp[627584] "expr temp" "maybe param" "maybe type" "temp"
    (627587 'move' call_tmp[627584](421310 call isTrue tmp[421309]))
    (559392 'move' tmp[559387](559390 call _cond_test call_tmp[627584]))
    if tmp[559387]
    {
      unknown tmp[559394] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627591] "expr temp" "maybe param" "maybe type" "temp"
      (627594 'move' call_tmp[627591](376153 call aligned _mt[243] this[80346]))
      unknown call_tmp[627596] "expr temp" "maybe param" "maybe type" "temp"
      (627599 'move' call_tmp[627596](80353 call ! call_tmp[627591]))
      (559396 'move' tmp[559394](421313 call isTrue call_tmp[627596]))
      (559401 'move' tmp[559386](559398 '_paramFoldLogical' tmp[559387] tmp[559394]))
    }
    {
      (559406 'move' tmp[559386](559403 '_paramFoldLogical' tmp[559387] 0))
    }
    unknown call_tmp[627601] "expr temp" "maybe param" "maybe type" "temp"
    (627604 'move' call_tmp[627601](80407 call _cond_test tmp[559386]))
    if call_tmp[627601]
    {
      unknown tmp[559498] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559499] "maybe param" "temp"
      unknown call_tmp[627606] "expr temp" "maybe param" "maybe type" "temp"
      (627609 'move' call_tmp[627606](80361 call isBoundedRange this[80346]))
      (559504 'move' tmp[559499](559502 call _cond_test call_tmp[627606]))
      if tmp[559499]
      {
        unknown tmp[559413] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559414] "maybe param" "temp"
        unknown call_tmp[627613] "expr temp" "maybe param" "maybe type" "temp"
        (627616 'move' call_tmp[627613](376163 call stride _mt[243] this[80346]))
        unknown call_tmp[627618] "expr temp" "maybe param" "maybe type" "temp"
        (627621 'move' call_tmp[627618](80364 call > call_tmp[627613] 0))
        (559419 'move' tmp[559414](559417 call _cond_test call_tmp[627618]))
        if tmp[559414]
        {
          unknown tmp[559421] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559423 'move' tmp[559421](376168 call _low _mt[243] this[80346]))
          (559428 'move' tmp[559413](559425 '_paramFoldLogical' tmp[559414] tmp[559421]))
        }
        {
          unknown tmp[559430] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559432 'move' tmp[559430](376173 call _high _mt[243] this[80346]))
          (559437 'move' tmp[559413](559434 '_paramFoldLogical' tmp[559414] tmp[559430]))
        }
        (559509 'move' tmp[559498](559506 '_paramFoldLogical' tmp[559499] tmp[559413]))
      }
      {
        unknown tmp[559471] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559472] "maybe param" "temp"
        unknown call_tmp[627629] "expr temp" "maybe param" "maybe type" "temp"
        (627632 'move' call_tmp[627629](80372 call boundedType _mt[243] this[80346]))
        unknown call_tmp[627634] "expr temp" "maybe param" "maybe type" "temp"
        (627637 'move' call_tmp[627634](80379 call == call_tmp[627629] boundedLow[64207]))
        (559477 'move' tmp[559472](559475 call _cond_test call_tmp[627634]))
        if tmp[559472]
        {
          unknown tmp[559479] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559481 'move' tmp[559479](376178 call _low _mt[243] this[80346]))
          (559486 'move' tmp[559471](559483 '_paramFoldLogical' tmp[559472] tmp[559479]))
        }
        {
          unknown tmp[559444] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[559445] "maybe param" "temp"
          unknown call_tmp[627643] "expr temp" "maybe param" "maybe type" "temp"
          (627646 'move' call_tmp[627643](80383 call boundedType _mt[243] this[80346]))
          unknown call_tmp[627648] "expr temp" "maybe param" "maybe type" "temp"
          (627651 'move' call_tmp[627648](80390 call == call_tmp[627643] boundedHigh[64209]))
          (559450 'move' tmp[559445](559448 call _cond_test call_tmp[627648]))
          if tmp[559445]
          {
            unknown tmp[559452] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559454 'move' tmp[559452](376183 call _high _mt[243] this[80346]))
            (559459 'move' tmp[559444](559456 '_paramFoldLogical' tmp[559445] tmp[559452]))
          }
          {
            (559464 'move' tmp[559444](559461 '_paramFoldLogical' tmp[559445] 0))
          }
          (559491 'move' tmp[559471](559488 '_paramFoldLogical' tmp[559472] tmp[559444]))
        }
        (559514 'move' tmp[559498](559511 '_paramFoldLogical' tmp[559499] tmp[559471]))
      }
      unknown call_tmp[627657] "expr temp" "maybe param" "maybe type" "temp"
      (627660 'move' call_tmp[627657](376158 call _alignment _mt[243] this[80346]))
      (80403 call = call_tmp[627657] tmp[559498])
    }
    (511845 return _void[55])
  }
  function range[64316](?).chpl__unTranslate[80421](arg _mt[80426]:_MT[238], arg this[80423]:range[64316](?) :
  range[64316](?), arg i[80418] :
  (376187 call intIdxType _mt[243] this[80423])) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511849] "RVV" "temp"
    unknown call_tmp[627664] "expr temp" "maybe param" "maybe type" "temp"
    (627667 'move' call_tmp[627664](80430 call - this[80423] i[80418]))
    (511854 'move' ret[511849](511853 'deref' call_tmp[627664]))
    (511851 return ret[511849])
  }
  function range[64316](?).chpl__unTranslate[80442](arg _mt[80447]:_MT[238], arg this[80444]:range[64316](?) :
  range[64316](?), arg i[80440]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511858] "RVV" "temp"
    unknown call_tmp[627669] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627672 'move' call_tmp[627669](80451 'typeof' i[80440]))
    unknown call_tmp[627674] "expr temp" "maybe param" "maybe type" "temp"
    (627677 'move' call_tmp[627674](80453 call isIntType call_tmp[627669]))
    unknown call_tmp[627679] "expr temp" "maybe param" "maybe type" "temp"
    (627682 'move' call_tmp[627679](80469 call _cond_test call_tmp[627674]))
    if call_tmp[627679]
    {
      unknown call_tmp[627684] "expr temp" "maybe param" "maybe type" "temp"
      (627687 'move' call_tmp[627684](80456 call - this[80444] i[80440]))
      (511863 'move' ret[511858](511862 'deref' call_tmp[627684]))
      gotoReturn _end_chpl__unTranslate[511856] _end_chpl__unTranslate[511856]
    }
    {
      unknown call_tmp[627689] "expr temp" "maybe param" "maybe type" "temp"
      (627692 'move' call_tmp[627689](80464 call abs i[80440]))
      unknown call_tmp[627694] "expr temp" "maybe param" "maybe type" "temp"
      (627697 'move' call_tmp[627694](80465 call + this[80444] call_tmp[627689]))
      (511868 'move' ret[511858](511867 'deref' call_tmp[627694]))
      gotoReturn _end_chpl__unTranslate[511856] _end_chpl__unTranslate[511856]
    }
    label _end_chpl__unTranslate[511856]
    (511860 return ret[511858])
  }
  function chpl__hasAlignment[80487](arg r[80484]:range[64316](?)) : _unknown[51]
  {
    unknown ret[511874] "RVV" "temp"
    unknown tmp[421330] "maybe param" "temp"
    (421341 'move' tmp[421330](80494 call(80490 call (partial) hasLowBound _mt[243] r[80484])))
    unknown call_tmp[627701] "expr temp" "maybe param" "maybe type" "temp"
    (627704 'move' call_tmp[627701](421343 call _cond_invalid tmp[421330]))
    if call_tmp[627701]
    {
      (421346 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559521] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559522] "maybe param" "temp"
    unknown call_tmp[627706] "expr temp" "maybe param" "maybe type" "temp"
    (627709 'move' call_tmp[627706](421331 call isTrue tmp[421330]))
    (559527 'move' tmp[559522](559525 call _cond_test call_tmp[627706]))
    if tmp[559522]
    {
      unknown tmp[559529] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627713] "expr temp" "maybe param" "maybe type" "temp"
      (627716 'move' call_tmp[627713](80496 call stride _mt[243] r[80484]))
      unknown call_tmp[627718] "expr temp" "maybe param" "maybe type" "temp"
      (627721 'move' call_tmp[627718](80500 call >= call_tmp[627713] 2))
      (559531 'move' tmp[559529](421334 call isTrue call_tmp[627718]))
      (559536 'move' tmp[559521](559533 '_paramFoldLogical' tmp[559522] tmp[559529]))
    }
    {
      (559541 'move' tmp[559521](559538 '_paramFoldLogical' tmp[559522] 0))
    }
    unknown call_tmp[627723] "expr temp" "maybe param" "maybe type" "temp"
    (627726 'move' call_tmp[627723](80507 call _cond_test tmp[559521]))
    if call_tmp[627723]
    {
      (511879 'move' ret[511874](511878 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511872] _end_chpl__hasAlignment[511872]
    }
    unknown tmp[421351] "maybe param" "temp"
    (421362 'move' tmp[421351](80518 call(80514 call (partial) hasHighBound _mt[243] r[80484])))
    unknown call_tmp[627730] "expr temp" "maybe param" "maybe type" "temp"
    (627733 'move' call_tmp[627730](421364 call _cond_invalid tmp[421351]))
    if call_tmp[627730]
    {
      (421367 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559548] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559549] "maybe param" "temp"
    unknown call_tmp[627735] "expr temp" "maybe param" "maybe type" "temp"
    (627738 'move' call_tmp[627735](421352 call isTrue tmp[421351]))
    (559554 'move' tmp[559549](559552 call _cond_test call_tmp[627735]))
    if tmp[559549]
    {
      unknown tmp[559556] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627742] "expr temp" "maybe param" "maybe type" "temp"
      (627745 'move' call_tmp[627742](80520 call stride _mt[243] r[80484]))
      unknown call_tmp[627747] "expr temp" "maybe param" "maybe type" "temp"
      (627750 'move' call_tmp[627747](80524 call - 2))
      unknown call_tmp[627752] "expr temp" "maybe param" "maybe type" "temp"
      (627755 'move' call_tmp[627752](80526 call <= call_tmp[627742] call_tmp[627747]))
      (559558 'move' tmp[559556](421355 call isTrue call_tmp[627752]))
      (559563 'move' tmp[559548](559560 '_paramFoldLogical' tmp[559549] tmp[559556]))
    }
    {
      (559568 'move' tmp[559548](559565 '_paramFoldLogical' tmp[559549] 0))
    }
    unknown call_tmp[627757] "expr temp" "maybe param" "maybe type" "temp"
    (627760 'move' call_tmp[627757](80533 call _cond_test tmp[559548]))
    if call_tmp[627757]
    {
      (511884 'move' ret[511874](511883 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511872] _end_chpl__hasAlignment[511872]
    }
    (511889 'move' ret[511874](511888 'deref' 0))
    label _end_chpl__hasAlignment[511872]
    (511876 return ret[511874])
  }
  function chpl__mod[80549](arg dividend[80546]:integral[199](?), arg modulus[80552]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511893] "RVV" "temp"
    unknown call_tmp[627762] "expr temp" "maybe param" "maybe type" "temp"
    (627765 'move' call_tmp[627762](80558 call abs modulus[80552]))
    unknown call_tmp[627769] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627772 'move' call_tmp[627769](80563 'typeof' dividend[80546]))
    unknown call_tmp[627774] "maybe param" "maybe type" "temp"
    (627777 'move' call_tmp[627774](80565 call(80559 call (partial) safeCast _mt[243] call_tmp[627762]) call_tmp[627769]))
    const m[80566] "dead at end of block" "const" "insert auto destroy"
    (541502 'init var' m[80566] call_tmp[627774])
    (80569 'end of statement')
    unknown call_tmp[627779] "maybe param" "maybe type" "temp"
    (627782 'move' call_tmp[627779](80573 call % dividend[80546] m[80566]))
    unknown tmp[80575] "dead at end of block" "insert auto destroy"
    (541504 'init var' tmp[80575] call_tmp[627779])
    (80578 'end of statement' m[80566])
    unknown call_tmp[627784] "expr temp" "maybe param" "maybe type" "temp"
    (627787 'move' call_tmp[627784](80582 call isInt dividend[80546]))
    unknown call_tmp[627789] "expr temp" "maybe param" "maybe type" "temp"
    (627792 'move' call_tmp[627789](80597 call _cond_test call_tmp[627784]))
    if call_tmp[627789]
    {
      unknown call_tmp[627794] "expr temp" "maybe param" "maybe type" "temp"
      (627797 'move' call_tmp[627794](80585 call < tmp[80575] 0))
      unknown call_tmp[627799] "expr temp" "maybe param" "maybe type" "temp"
      (627802 'move' call_tmp[627799](80592 call _cond_test call_tmp[627794]))
      if call_tmp[627799]
      {
        (80589 call += tmp[80575] m[80566])
        (476654 'end of statement' tmp[80575] m[80566])
      }
    }
    (511898 'move' ret[511893](511897 'deref' tmp[80575]))
    gotoReturn _end_chpl__mod[511891] _end_chpl__mod[511891]
    (476657 'end of statement' tmp[80575])
    label _end_chpl__mod[511891]
    (511895 return ret[511893])
  }
  function chpl__diffMod[80613](arg minuend[80610]:integral[199](?), arg subtrahend[80616]:integral[199](?), arg modulus[80620]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511904] "RVV" "temp"
    unknown call_tmp[627804] "expr temp" "maybe param" "maybe type" "temp"
    (627807 'move' call_tmp[627804](80634 call abs modulus[80620]))
    unknown call_tmp[627811] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627814 'move' call_tmp[627811](80639 'typeof' minuend[80610]))
    unknown call_tmp[627816] "maybe param" "maybe type" "temp"
    (627819 'move' call_tmp[627816](80641 call(80635 call (partial) safeCast _mt[243] call_tmp[627804]) call_tmp[627811]))
    const m[80642] "dead at end of block" "const" "insert auto destroy"
    (541506 'init var' m[80642] call_tmp[627816])
    (80645 'end of statement')
    unknown call_tmp[627821] "maybe param" "maybe type" "temp"
    (627824 'move' call_tmp[627821](80651 call chpl__mod minuend[80610] m[80642]))
    unknown minMod[80652] "dead at end of block" "insert auto destroy"
    (541508 'init var' minMod[80652] call_tmp[627821])
    (80655 'end of statement')
    unknown call_tmp[627826] "maybe param" "maybe type" "temp"
    (627829 'move' call_tmp[627826](80660 call chpl__mod subtrahend[80616] m[80642]))
    unknown subMod[80661] "dead at end of block" "insert auto destroy"
    (541510 'init var' subMod[80661] call_tmp[627826])
    (80664 'end of statement' m[80642] m[80642])
    unknown tmp[559575] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559576] "maybe param" "temp"
    unknown call_tmp[627831] "expr temp" "maybe param" "maybe type" "temp"
    (627834 'move' call_tmp[627831](80667 call < minMod[80652] subMod[80661]))
    (559581 'move' tmp[559576](559579 call _cond_test call_tmp[627831]))
    if tmp[559576]
    {
      unknown tmp[559583] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627836] "expr temp" "maybe param" "maybe type" "temp"
      (627839 'move' call_tmp[627836](80672 call - subMod[80661] minMod[80652]))
      (559585 'move' tmp[559583](80674 call - m[80642] call_tmp[627836]))
      (559590 'move' tmp[559575](559587 '_paramFoldLogical' tmp[559576] tmp[559583]))
    }
    {
      unknown tmp[559592] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (559594 'move' tmp[559592](80678 call - minMod[80652] subMod[80661]))
      (559599 'move' tmp[559575](559596 '_paramFoldLogical' tmp[559576] tmp[559592]))
    }
    unknown call_tmp[627841] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627844 'move' call_tmp[627841](511908 'typeof' minuend[80610]))
    (511911 'move' ret[511904](511910 'coerce' tmp[559575] call_tmp[627841]))
    gotoReturn _end_chpl__diffMod[511902] _end_chpl__diffMod[511902]
    (476661 'end of statement' minMod[80652] subMod[80661] m[80642] subMod[80661] minMod[80652] minMod[80652] subMod[80661])
    label _end_chpl__diffMod[511902]
    (511906 return ret[511904])
  }
  where {
    unknown call_tmp[627846] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627849 'move' call_tmp[627846](80626 'typeof' minuend[80610]))
    unknown call_tmp[627851] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627854 'move' call_tmp[627851](80628 'typeof' subtrahend[80616]))
    (80629 call == call_tmp[627846] call_tmp[627851])
  }
  { scopeless type
    (80624 'typeof' minuend[80610])
  }
  function chpl__diffMod[80695](arg minuend[80692]:integral[199](?), arg subtrahend[80698]:integral[199](?), arg modulus[80702]:integral[199](?)) : _unknown[51] "no return value for void"
  {
    (80724 call compilerError "chpl__diffMod -- Operand types must match.")
    (511915 return _void[55])
  }
  function chpl__add[80736](arg a[80733]:_any[178](?), arg b[80739] :
  (459776 'typeof' a[80733]), arg resultType[80742]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511919] "RVV" "temp"
    unknown call_tmp[627856] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627859 'move' call_tmp[627856](459778 'typeof' a[80733]))
    unknown call_tmp[627861] "expr temp" "maybe param" "maybe type" "temp"
    (627864 'move' call_tmp[627861](80747 call isIntegralType call_tmp[627856]))
    unknown call_tmp[627866] "expr temp" "maybe param" "maybe type" "temp"
    (627869 'move' call_tmp[627866](80748 call ! call_tmp[627861]))
    unknown call_tmp[627871] "expr temp" "maybe param" "maybe type" "temp"
    (627874 'move' call_tmp[627871](80771 call _cond_test call_tmp[627866]))
    if call_tmp[627871]
    {
      (80769 call compilerError "Values must be of integral type.")
    }
    unknown tmp[421372] "maybe param" "temp"
    unknown tmp[421393] "maybe param" "temp"
    (421404 'move' tmp[421393](80779 call > a[80733] 0))
    unknown call_tmp[627876] "expr temp" "maybe param" "maybe type" "temp"
    (627879 'move' call_tmp[627876](421406 call _cond_invalid tmp[421393]))
    if call_tmp[627876]
    {
      (421409 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559606] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559607] "maybe param" "temp"
    unknown call_tmp[627881] "expr temp" "maybe param" "maybe type" "temp"
    (627884 'move' call_tmp[627881](421394 call isTrue tmp[421393]))
    (559612 'move' tmp[559607](559610 call _cond_test call_tmp[627881]))
    if tmp[559607]
    {
      unknown tmp[559614] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627886] "expr temp" "maybe param" "maybe type" "temp"
      (627889 'move' call_tmp[627886](80783 call > b[80739] 0))
      (559616 'move' tmp[559614](421397 call isTrue call_tmp[627886]))
      (559621 'move' tmp[559606](559618 '_paramFoldLogical' tmp[559607] tmp[559614]))
    }
    {
      (559626 'move' tmp[559606](559623 '_paramFoldLogical' tmp[559607] 0))
    }
    (421383 'move' tmp[421372] tmp[559606])
    unknown call_tmp[627891] "expr temp" "maybe param" "maybe type" "temp"
    (627894 'move' call_tmp[627891](421385 call _cond_invalid tmp[421372]))
    if call_tmp[627891]
    {
      (421388 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559633] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559634] "maybe param" "temp"
    unknown call_tmp[627896] "expr temp" "maybe param" "maybe type" "temp"
    (627899 'move' call_tmp[627896](421373 call isTrue tmp[421372]))
    (559639 'move' tmp[559634](559637 call _cond_test call_tmp[627896]))
    if tmp[559634]
    {
      unknown tmp[559641] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627901] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627904 'move' call_tmp[627901](459780 'typeof' a[80733]))
      unknown call_tmp[627906] "expr temp" "maybe param" "maybe type" "temp"
      (627909 'move' call_tmp[627906](80791 call max call_tmp[627901]))
      unknown call_tmp[627911] "expr temp" "maybe param" "maybe type" "temp"
      (627914 'move' call_tmp[627911](80793 call - call_tmp[627906] a[80733]))
      unknown call_tmp[627916] "expr temp" "maybe param" "maybe type" "temp"
      (627919 'move' call_tmp[627916](80795 call > b[80739] call_tmp[627911]))
      (559643 'move' tmp[559641](421376 call isTrue call_tmp[627916]))
      (559648 'move' tmp[559633](559645 '_paramFoldLogical' tmp[559634] tmp[559641]))
    }
    {
      (559653 'move' tmp[559633](559650 '_paramFoldLogical' tmp[559634] 0))
    }
    unknown call_tmp[627921] "expr temp" "maybe param" "maybe type" "temp"
    (627924 'move' call_tmp[627921](80805 call _cond_test tmp[559633]))
    if call_tmp[627921]
    {
      unknown call_tmp[627926] "expr temp" "maybe param" "maybe type" "temp"
      (627929 'move' call_tmp[627926](80802 call max resultType[80742]))
      (511924 'move' ret[511919](511923 'deref' call_tmp[627926]))
      gotoReturn _end_chpl__add[511917] _end_chpl__add[511917]
    }
    unknown tmp[421414] "maybe param" "temp"
    unknown tmp[421435] "maybe param" "temp"
    (421446 'move' tmp[421435](80812 call < a[80733] 0))
    unknown call_tmp[627931] "expr temp" "maybe param" "maybe type" "temp"
    (627934 'move' call_tmp[627931](421448 call _cond_invalid tmp[421435]))
    if call_tmp[627931]
    {
      (421451 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559660] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559661] "maybe param" "temp"
    unknown call_tmp[627936] "expr temp" "maybe param" "maybe type" "temp"
    (627939 'move' call_tmp[627936](421436 call isTrue tmp[421435]))
    (559666 'move' tmp[559661](559664 call _cond_test call_tmp[627936]))
    if tmp[559661]
    {
      unknown tmp[559668] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627941] "expr temp" "maybe param" "maybe type" "temp"
      (627944 'move' call_tmp[627941](80816 call < b[80739] 0))
      (559670 'move' tmp[559668](421439 call isTrue call_tmp[627941]))
      (559675 'move' tmp[559660](559672 '_paramFoldLogical' tmp[559661] tmp[559668]))
    }
    {
      (559680 'move' tmp[559660](559677 '_paramFoldLogical' tmp[559661] 0))
    }
    (421425 'move' tmp[421414] tmp[559660])
    unknown call_tmp[627946] "expr temp" "maybe param" "maybe type" "temp"
    (627949 'move' call_tmp[627946](421427 call _cond_invalid tmp[421414]))
    if call_tmp[627946]
    {
      (421430 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559687] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559688] "maybe param" "temp"
    unknown call_tmp[627951] "expr temp" "maybe param" "maybe type" "temp"
    (627954 'move' call_tmp[627951](421415 call isTrue tmp[421414]))
    (559693 'move' tmp[559688](559691 call _cond_test call_tmp[627951]))
    if tmp[559688]
    {
      unknown tmp[559695] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627956] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627959 'move' call_tmp[627956](459782 'typeof' a[80733]))
      unknown call_tmp[627961] "expr temp" "maybe param" "maybe type" "temp"
      (627964 'move' call_tmp[627961](80824 call min call_tmp[627956]))
      unknown call_tmp[627966] "expr temp" "maybe param" "maybe type" "temp"
      (627969 'move' call_tmp[627966](80826 call - call_tmp[627961] a[80733]))
      unknown call_tmp[627971] "expr temp" "maybe param" "maybe type" "temp"
      (627974 'move' call_tmp[627971](80828 call < b[80739] call_tmp[627966]))
      (559697 'move' tmp[559695](421418 call isTrue call_tmp[627971]))
      (559702 'move' tmp[559687](559699 '_paramFoldLogical' tmp[559688] tmp[559695]))
    }
    {
      (559707 'move' tmp[559687](559704 '_paramFoldLogical' tmp[559688] 0))
    }
    unknown call_tmp[627976] "expr temp" "maybe param" "maybe type" "temp"
    (627979 'move' call_tmp[627976](80838 call _cond_test tmp[559687]))
    if call_tmp[627976]
    {
      unknown call_tmp[627981] "expr temp" "maybe param" "maybe type" "temp"
      (627984 'move' call_tmp[627981](80835 call min resultType[80742]))
      (511929 'move' ret[511919](511928 'deref' call_tmp[627981]))
      gotoReturn _end_chpl__add[511917] _end_chpl__add[511917]
    }
    unknown call_tmp[627986] "expr temp" "maybe param" "maybe type" "temp"
    (627989 'move' call_tmp[627986](80846 call isUintType resultType[80742]))
    unknown call_tmp[627991] "expr temp" "maybe param" "maybe type" "temp"
    (627994 'move' call_tmp[627991](80923 call _cond_test call_tmp[627986]))
    if call_tmp[627991]
    {
      unknown tmp[421456] "maybe param" "temp"
      unknown tmp[421477] "maybe param" "temp"
      unknown tmp[421498] "maybe param" "temp"
      (421509 'move' tmp[421498](80849 call < a[80733] 0))
      unknown call_tmp[627996] "expr temp" "maybe param" "maybe type" "temp"
      (627999 'move' call_tmp[627996](421511 call _cond_invalid tmp[421498]))
      if call_tmp[627996]
      {
        (421514 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559714] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559715] "maybe param" "temp"
      unknown call_tmp[628001] "expr temp" "maybe param" "maybe type" "temp"
      (628004 'move' call_tmp[628001](421499 call isTrue tmp[421498]))
      (559720 'move' tmp[559715](559718 call _cond_test call_tmp[628001]))
      if tmp[559715]
      {
        unknown tmp[559722] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628006] "expr temp" "maybe param" "maybe type" "temp"
        (628009 'move' call_tmp[628006](80853 call > b[80739] 0))
        (559724 'move' tmp[559722](421502 call isTrue call_tmp[628006]))
        (559729 'move' tmp[559714](559726 '_paramFoldLogical' tmp[559715] tmp[559722]))
      }
      {
        (559734 'move' tmp[559714](559731 '_paramFoldLogical' tmp[559715] 0))
      }
      (421488 'move' tmp[421477] tmp[559714])
      unknown call_tmp[628011] "expr temp" "maybe param" "maybe type" "temp"
      (628014 'move' call_tmp[628011](421490 call _cond_invalid tmp[421477]))
      if call_tmp[628011]
      {
        (421493 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559768] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559769] "maybe param" "temp"
      unknown call_tmp[628016] "expr temp" "maybe param" "maybe type" "temp"
      (628019 'move' call_tmp[628016](421478 call isTrue tmp[421477]))
      (559774 'move' tmp[559769](559772 call _cond_test call_tmp[628016]))
      if tmp[559769]
      {
        unknown tmp[421519] "maybe param" "temp"
        unknown call_tmp[628021] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628024 'move' call_tmp[628021](459784 'typeof' a[80733]))
        unknown call_tmp[628026] "expr temp" "maybe param" "maybe type" "temp"
        (628029 'move' call_tmp[628026](80861 call min call_tmp[628021]))
        (421530 'move' tmp[421519](80862 call == a[80733] call_tmp[628026]))
        unknown call_tmp[628031] "expr temp" "maybe param" "maybe type" "temp"
        (628034 'move' call_tmp[628031](421532 call _cond_invalid tmp[421519]))
        if call_tmp[628031]
        {
          (421535 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[559741] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559742] "maybe param" "temp"
        unknown call_tmp[628036] "expr temp" "maybe param" "maybe type" "temp"
        (628039 'move' call_tmp[628036](421520 call isTrue tmp[421519]))
        (559747 'move' tmp[559742](559745 call _cond_test call_tmp[628036]))
        if tmp[559742]
        {
          (559752 'move' tmp[559741](559749 '_paramFoldLogical' tmp[559742] 1))
        }
        {
          unknown tmp[559754] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628041] "expr temp" "maybe param" "maybe type" "temp"
          (628044 'move' call_tmp[628041](80867 call abs a[80733]))
          unknown call_tmp[628046] "expr temp" "maybe param" "maybe type" "temp"
          (628049 'move' call_tmp[628046](80871 call abs b[80739]))
          unknown call_tmp[628051] "expr temp" "maybe param" "maybe type" "temp"
          (628054 'move' call_tmp[628051](80872 call > call_tmp[628041] call_tmp[628046]))
          (559756 'move' tmp[559754](421524 call isTrue call_tmp[628051]))
          (559761 'move' tmp[559741](559758 '_paramFoldLogical' tmp[559742] tmp[559754]))
        }
        unknown tmp[559776] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559778 'move' tmp[559776](421481 call isTrue tmp[559741]))
        (559783 'move' tmp[559768](559780 '_paramFoldLogical' tmp[559769] tmp[559776]))
      }
      {
        (559788 'move' tmp[559768](559785 '_paramFoldLogical' tmp[559769] 0))
      }
      (421467 'move' tmp[421456] tmp[559768])
      unknown call_tmp[628056] "expr temp" "maybe param" "maybe type" "temp"
      (628059 'move' call_tmp[628056](421469 call _cond_invalid tmp[421456]))
      if call_tmp[628056]
      {
        (421472 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559876] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559877] "maybe param" "temp"
      unknown call_tmp[628061] "expr temp" "maybe param" "maybe type" "temp"
      (628064 'move' call_tmp[628061](421457 call isTrue tmp[421456]))
      (559882 'move' tmp[559877](559880 call _cond_test call_tmp[628061]))
      if tmp[559877]
      {
        (559887 'move' tmp[559876](559884 '_paramFoldLogical' tmp[559877] 1))
      }
      {
        unknown tmp[421540] "maybe param" "temp"
        unknown tmp[421561] "maybe param" "temp"
        (421572 'move' tmp[421561](80880 call > a[80733] 0))
        unknown call_tmp[628066] "expr temp" "maybe param" "maybe type" "temp"
        (628069 'move' call_tmp[628066](421574 call _cond_invalid tmp[421561]))
        if call_tmp[628066]
        {
          (421577 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559795] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559796] "maybe param" "temp"
        unknown call_tmp[628071] "expr temp" "maybe param" "maybe type" "temp"
        (628074 'move' call_tmp[628071](421562 call isTrue tmp[421561]))
        (559801 'move' tmp[559796](559799 call _cond_test call_tmp[628071]))
        if tmp[559796]
        {
          unknown tmp[559803] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628076] "expr temp" "maybe param" "maybe type" "temp"
          (628079 'move' call_tmp[628076](80884 call < b[80739] 0))
          (559805 'move' tmp[559803](421565 call isTrue call_tmp[628076]))
          (559810 'move' tmp[559795](559807 '_paramFoldLogical' tmp[559796] tmp[559803]))
        }
        {
          (559815 'move' tmp[559795](559812 '_paramFoldLogical' tmp[559796] 0))
        }
        (421551 'move' tmp[421540] tmp[559795])
        unknown call_tmp[628081] "expr temp" "maybe param" "maybe type" "temp"
        (628084 'move' call_tmp[628081](421553 call _cond_invalid tmp[421540]))
        if call_tmp[628081]
        {
          (421556 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559849] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559850] "maybe param" "temp"
        unknown call_tmp[628086] "expr temp" "maybe param" "maybe type" "temp"
        (628089 'move' call_tmp[628086](421541 call isTrue tmp[421540]))
        (559855 'move' tmp[559850](559853 call _cond_test call_tmp[628086]))
        if tmp[559850]
        {
          unknown tmp[421582] "maybe param" "temp"
          unknown call_tmp[628091] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628094 'move' call_tmp[628091](459786 'typeof' a[80733]))
          unknown call_tmp[628096] "expr temp" "maybe param" "maybe type" "temp"
          (628099 'move' call_tmp[628096](80892 call min call_tmp[628091]))
          (421593 'move' tmp[421582](80893 call == b[80739] call_tmp[628096]))
          unknown call_tmp[628101] "expr temp" "maybe param" "maybe type" "temp"
          (628104 'move' call_tmp[628101](421595 call _cond_invalid tmp[421582]))
          if call_tmp[628101]
          {
            (421598 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559822] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559823] "maybe param" "temp"
          unknown call_tmp[628106] "expr temp" "maybe param" "maybe type" "temp"
          (628109 'move' call_tmp[628106](421583 call isTrue tmp[421582]))
          (559828 'move' tmp[559823](559826 call _cond_test call_tmp[628106]))
          if tmp[559823]
          {
            (559833 'move' tmp[559822](559830 '_paramFoldLogical' tmp[559823] 1))
          }
          {
            unknown tmp[559835] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[628111] "expr temp" "maybe param" "maybe type" "temp"
            (628114 'move' call_tmp[628111](80898 call abs b[80739]))
            unknown call_tmp[628116] "expr temp" "maybe param" "maybe type" "temp"
            (628119 'move' call_tmp[628116](80902 call abs a[80733]))
            unknown call_tmp[628121] "expr temp" "maybe param" "maybe type" "temp"
            (628124 'move' call_tmp[628121](80903 call > call_tmp[628111] call_tmp[628116]))
            (559837 'move' tmp[559835](421587 call isTrue call_tmp[628121]))
            (559842 'move' tmp[559822](559839 '_paramFoldLogical' tmp[559823] tmp[559835]))
          }
          unknown tmp[559857] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559859 'move' tmp[559857](421544 call isTrue tmp[559822]))
          (559864 'move' tmp[559849](559861 '_paramFoldLogical' tmp[559850] tmp[559857]))
        }
        {
          (559869 'move' tmp[559849](559866 '_paramFoldLogical' tmp[559850] 0))
        }
        unknown tmp[559889] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559891 'move' tmp[559889](421461 call isTrue tmp[559849]))
        (559896 'move' tmp[559876](559893 '_paramFoldLogical' tmp[559877] tmp[559889]))
      }
      unknown call_tmp[628126] "expr temp" "maybe param" "maybe type" "temp"
      (628129 'move' call_tmp[628126](80917 call _cond_test tmp[559876]))
      if call_tmp[628126]
      {
        unknown call_tmp[628131] "expr temp" "maybe param" "maybe type" "temp"
        (628134 'move' call_tmp[628131](80913 call _cast resultType[80742] 0))
        (511934 'move' ret[511919](511933 'deref' call_tmp[628131]))
        gotoReturn _end_chpl__add[511917] _end_chpl__add[511917]
      }
    }
    unknown call_tmp[628136] "expr temp" "maybe param" "maybe type" "temp"
    (628139 'move' call_tmp[628136](80929 call + a[80733] b[80739]))
    unknown call_tmp[628141] "expr temp" "maybe param" "maybe type" "temp"
    (628144 'move' call_tmp[628141](80932 call _cast resultType[80742] call_tmp[628136]))
    (511939 'move' ret[511919](511938 'deref' call_tmp[628141]))
    label _end_chpl__add[511917]
    (511921 return ret[511919])
  }
  function chpl__addRangeStrides[80942](arg start[80940]:_any[178](?), arg stride[80944]:_any[178](?), arg count[80946]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511970] "RVV" "temp"
    function convert[80954](arg a[80952]:_any[178](?), arg b[80956]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[511943] "RVV" "param" "temp"
      unknown tmp[421603] "maybe param" "temp"
      unknown tmp[421624] "maybe param" "temp"
      unknown call_tmp[628146] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (628149 'move' call_tmp[628146](80959 'typeof' a[80952]))
      unknown call_tmp[628151] "expr temp" "maybe param" "maybe type" "temp"
      (628154 'move' call_tmp[628151](80963 call int(64)[13] 64))
      (421635 'move' tmp[421624](80964 call == call_tmp[628146] call_tmp[628151]))
      unknown call_tmp[628156] "expr temp" "maybe param" "maybe type" "temp"
      (628159 'move' call_tmp[628156](421637 call _cond_invalid tmp[421624]))
      if call_tmp[628156]
      {
        (421640 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559903] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559904] "maybe param" "temp"
      unknown call_tmp[628161] "expr temp" "maybe param" "maybe type" "temp"
      (628164 'move' call_tmp[628161](421625 call isTrue tmp[421624]))
      (559909 'move' tmp[559904](559907 call _cond_test call_tmp[628161]))
      if tmp[559904]
      {
        unknown tmp[559911] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628166] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628169 'move' call_tmp[628166](80967 'typeof' b[80956]))
        unknown call_tmp[628171] "expr temp" "maybe param" "maybe type" "temp"
        (628174 'move' call_tmp[628171](80971 call uint(64)[115] 64))
        unknown call_tmp[628176] "expr temp" "maybe param" "maybe type" "temp"
        (628179 'move' call_tmp[628176](80972 call == call_tmp[628166] call_tmp[628171]))
        (559913 'move' tmp[559911](421628 call isTrue call_tmp[628176]))
        (559918 'move' tmp[559903](559915 '_paramFoldLogical' tmp[559904] tmp[559911]))
      }
      {
        (559923 'move' tmp[559903](559920 '_paramFoldLogical' tmp[559904] 0))
      }
      (421614 'move' tmp[421603] tmp[559903])
      unknown call_tmp[628181] "expr temp" "maybe param" "maybe type" "temp"
      (628184 'move' call_tmp[628181](421616 call _cond_invalid tmp[421603]))
      if call_tmp[628181]
      {
        (421619 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559957] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559958] "maybe param" "temp"
      unknown call_tmp[628186] "expr temp" "maybe param" "maybe type" "temp"
      (628189 'move' call_tmp[628186](421604 call isTrue tmp[421603]))
      (559963 'move' tmp[559958](559961 call _cond_test call_tmp[628186]))
      if tmp[559958]
      {
        (559968 'move' tmp[559957](559965 '_paramFoldLogical' tmp[559958] 1))
      }
      {
        unknown tmp[421645] "maybe param" "temp"
        unknown call_tmp[628191] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628194 'move' call_tmp[628191](80977 'typeof' a[80952]))
        unknown call_tmp[628196] "expr temp" "maybe param" "maybe type" "temp"
        (628199 'move' call_tmp[628196](80981 call uint(64)[115] 64))
        (421656 'move' tmp[421645](80982 call == call_tmp[628191] call_tmp[628196]))
        unknown call_tmp[628201] "expr temp" "maybe param" "maybe type" "temp"
        (628204 'move' call_tmp[628201](421658 call _cond_invalid tmp[421645]))
        if call_tmp[628201]
        {
          (421661 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559930] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559931] "maybe param" "temp"
        unknown call_tmp[628206] "expr temp" "maybe param" "maybe type" "temp"
        (628209 'move' call_tmp[628206](421646 call isTrue tmp[421645]))
        (559936 'move' tmp[559931](559934 call _cond_test call_tmp[628206]))
        if tmp[559931]
        {
          unknown tmp[559938] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628211] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628214 'move' call_tmp[628211](80985 'typeof' b[80956]))
          unknown call_tmp[628216] "expr temp" "maybe param" "maybe type" "temp"
          (628219 'move' call_tmp[628216](80989 call int(64)[13] 64))
          unknown call_tmp[628221] "expr temp" "maybe param" "maybe type" "temp"
          (628224 'move' call_tmp[628221](80990 call == call_tmp[628211] call_tmp[628216]))
          (559940 'move' tmp[559938](421649 call isTrue call_tmp[628221]))
          (559945 'move' tmp[559930](559942 '_paramFoldLogical' tmp[559931] tmp[559938]))
        }
        {
          (559950 'move' tmp[559930](559947 '_paramFoldLogical' tmp[559931] 0))
        }
        unknown tmp[559970] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559972 'move' tmp[559970](421608 call isTrue tmp[559930]))
        (559977 'move' tmp[559957](559974 '_paramFoldLogical' tmp[559958] tmp[559970]))
      }
      (511948 'move' ret[511943](511947 'deref' tmp[559957]))
      (511945 return ret[511943])
    }
    function mul[81006](arg a[81004]:_any[178](?), arg b[81008]:_any[178](?)) : _unknown[51]
    {
      unknown ret[511952] "RVV" "temp"
      unknown tmp[559984] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559985] "maybe param" "temp"
      unknown call_tmp[628226] "expr temp" "maybe param" "maybe type" "temp"
      (628229 'move' call_tmp[628226](81014 call convert a[81004] b[81008]))
      (559990 'move' tmp[559985](559988 call _cond_test call_tmp[628226]))
      if tmp[559985]
      {
        unknown tmp[559992] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628231] "expr temp" "maybe param" "maybe type" "temp"
        (628234 'move' call_tmp[628231](81019 call int(64)[13] 64))
        unknown call_tmp[628236] "expr temp" "maybe param" "maybe type" "temp"
        (628239 'move' call_tmp[628236](81020 call _cast call_tmp[628231] a[81004]))
        unknown call_tmp[628241] "expr temp" "maybe param" "maybe type" "temp"
        (628244 'move' call_tmp[628241](81026 call int(64)[13] 64))
        unknown call_tmp[628246] "expr temp" "maybe param" "maybe type" "temp"
        (628249 'move' call_tmp[628246](81027 call _cast call_tmp[628241] b[81008]))
        (559994 'move' tmp[559992](81029 call * call_tmp[628236] call_tmp[628246]))
        (559999 'move' tmp[559984](559996 '_paramFoldLogical' tmp[559985] tmp[559992]))
      }
      {
        unknown tmp[560001] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560003 'move' tmp[560001](81033 call * a[81004] b[81008]))
        (560008 'move' tmp[559984](560005 '_paramFoldLogical' tmp[559985] tmp[560001]))
      }
      (511957 'move' ret[511952](511956 'deref' tmp[559984]))
      (511954 return ret[511952])
    }
    function add[81047](arg a[81045]:_any[178](?), arg b[81049]:_any[178](?)) : _unknown[51]
    {
      unknown ret[511961] "RVV" "temp"
      unknown tmp[560015] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560016] "maybe param" "temp"
      unknown call_tmp[628251] "expr temp" "maybe param" "maybe type" "temp"
      (628254 'move' call_tmp[628251](81055 call convert a[81045] b[81049]))
      (560021 'move' tmp[560016](560019 call _cond_test call_tmp[628251]))
      if tmp[560016]
      {
        unknown tmp[560023] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628256] "expr temp" "maybe param" "maybe type" "temp"
        (628259 'move' call_tmp[628256](81060 call int(64)[13] 64))
        unknown call_tmp[628261] "expr temp" "maybe param" "maybe type" "temp"
        (628264 'move' call_tmp[628261](81061 call _cast call_tmp[628256] a[81045]))
        unknown call_tmp[628266] "expr temp" "maybe param" "maybe type" "temp"
        (628269 'move' call_tmp[628266](81067 call int(64)[13] 64))
        unknown call_tmp[628271] "expr temp" "maybe param" "maybe type" "temp"
        (628274 'move' call_tmp[628271](81068 call _cast call_tmp[628266] b[81049]))
        (560025 'move' tmp[560023](81070 call + call_tmp[628261] call_tmp[628271]))
        (560030 'move' tmp[560015](560027 '_paramFoldLogical' tmp[560016] tmp[560023]))
      }
      {
        unknown tmp[560032] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560034 'move' tmp[560032](81074 call + a[81045] b[81049]))
        (560039 'move' tmp[560015](560036 '_paramFoldLogical' tmp[560016] tmp[560032]))
      }
      (511966 'move' ret[511961](511965 'deref' tmp[560015]))
      (511963 return ret[511961])
    }
    unknown call_tmp[628276] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628279 'move' call_tmp[628276](81094 'typeof' start[80940]))
    unknown call_tmp[628281] "expr temp" "maybe param" "maybe type" "temp"
    (628284 'move' call_tmp[628281](81091 call mul stride[80944] count[80946]))
    unknown call_tmp[628286] "expr temp" "maybe param" "maybe type" "temp"
    (628289 'move' call_tmp[628286](81092 call add start[80940] call_tmp[628281]))
    unknown call_tmp[628291] "expr temp" "maybe param" "maybe type" "temp"
    (628294 'move' call_tmp[628291](81095 call _cast call_tmp[628276] call_tmp[628286]))
    unknown call_tmp[628296] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628299 'move' call_tmp[628296](511974 'typeof' start[80940]))
    (511977 'move' ret[511970](511976 'coerce' call_tmp[628291] call_tmp[628296]))
    (511972 return ret[511970])
  }
  { scopeless type
    (80949 'typeof' start[80940])
  }
  function chpl__extendedEuclidHelper[81106](arg u[81104]:_any[178](?), arg v[81108]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511981] "RVV" "temp"
    unknown call_tmp[628301] "maybe param" "maybe type" "temp" "type variable"
    (628304 'move' call_tmp[628301](81111 'typeof' u[81104]))
    unknown zero[81113] "dead at end of block" "insert auto destroy"
    (541512 'init var' zero[81113] 0 call_tmp[628301])
    (81116 'end of statement')
    unknown call_tmp[628306] "maybe param" "maybe type" "temp" "type variable"
    (628309 'move' call_tmp[628306](81119 'typeof' u[81104]))
    unknown one[81121] "dead at end of block" "insert auto destroy"
    (541514 'init var' one[81121] 1 call_tmp[628306])
    (81124 'end of statement')
    unknown call_tmp[628311] "maybe param" "maybe type" "temp"
    (628314 'move' call_tmp[628311](81129 call _build_tuple one[81121] zero[81113] u[81104]))
    unknown U[81131] "dead at end of block" "insert auto destroy"
    (541516 'init var' U[81131] call_tmp[628311])
    (81134 'end of statement')
    unknown call_tmp[628316] "maybe param" "maybe type" "temp"
    (628319 'move' call_tmp[628316](81139 call _build_tuple zero[81113] one[81121] v[81108]))
    unknown V[81141] "dead at end of block" "insert auto destroy"
    (541518 'init var' V[81141] call_tmp[628316])
    (81144 'end of statement' one[81121] zero[81113] zero[81113] one[81121])
    {
      unknown tmp[81193] "temp"
      unknown call_tmp[628321] "expr temp" "maybe param" "maybe type" "temp"
      (628324 'move' call_tmp[628321](81218 call V[81141] 2))
      unknown call_tmp[628326] "expr temp" "maybe param" "maybe type" "temp"
      (628329 'move' call_tmp[628326](81216 call != call_tmp[628321] 0))
      (81221 'move' tmp[81193](81214 call _cond_test call_tmp[628326]))
      WhileDo[81198]
      {
        {
          unknown oldU[81153] "dead at end of block" "insert auto destroy"
          (541520 'init var' oldU[81153] U[81131])
          (81156 'end of statement')
          unknown call_tmp[628331] "expr temp" "maybe param" "maybe type" "temp"
          (628334 'move' call_tmp[628331](81161 call U[81131] 2))
          unknown call_tmp[628336] "expr temp" "maybe param" "maybe type" "temp"
          (628339 'move' call_tmp[628336](81165 call V[81141] 2))
          unknown call_tmp[628341] "maybe param" "maybe type" "temp"
          (628344 'move' call_tmp[628341](81166 call / call_tmp[628331] call_tmp[628336]))
          unknown q[81168] "dead at end of block" "insert auto destroy"
          (541522 'init var' q[81168] call_tmp[628341])
          (81171 'end of statement' U[81131] U[81131] V[81141])
          (81174 call = U[81131] V[81141])
          (476695 'end of statement' U[81131] V[81141])
          unknown call_tmp[628346] "expr temp" "maybe param" "maybe type" "temp"
          (628349 'move' call_tmp[628346](81184 call _build_tuple q[81168] q[81168] q[81168]))
          unknown call_tmp[628351] "expr temp" "maybe param" "maybe type" "temp"
          (628354 'move' call_tmp[628351](81186 call * V[81141] call_tmp[628346]))
          unknown call_tmp[628356] "expr temp" "maybe param" "maybe type" "temp"
          (628359 'move' call_tmp[628356](81188 call - oldU[81153] call_tmp[628351]))
          (81190 call = V[81141] call_tmp[628356])
          (476698 'end of statement' V[81141] oldU[81153] V[81141] q[81168] q[81168] q[81168])
        }
        label _continueLabel[81196]
        unknown call_tmp[628361] "expr temp" "maybe param" "maybe type" "temp"
        (628364 'move' call_tmp[628361](81206 call V[81141] 2))
        unknown call_tmp[628366] "expr temp" "maybe param" "maybe type" "temp"
        (628369 'move' call_tmp[628366](81204 call != call_tmp[628361] 0))
        (81209 'move' tmp[81193](81202 call _cond_test call_tmp[628366]))
        tmp[81193]
      }
      label _breakLabel[81197]
    }
    unknown call_tmp[628371] "expr temp" "maybe param" "maybe type" "temp"
    (628374 'move' call_tmp[628371](81227 call U[81131] 2))
    unknown call_tmp[628376] "expr temp" "maybe param" "maybe type" "temp"
    (628379 'move' call_tmp[628376](81231 call U[81131] 0))
    unknown call_tmp[628381] "expr temp" "maybe param" "maybe type" "temp"
    (628384 'move' call_tmp[628381](81233 call _build_tuple call_tmp[628371] call_tmp[628376]))
    (511986 'move' ret[511981](511985 'deref' call_tmp[628381]))
    gotoReturn _end_chpl__extendedEuclidHelper[511979] _end_chpl__extendedEuclidHelper[511979]
    (476705 'end of statement' U[81131] U[81131])
    label _end_chpl__extendedEuclidHelper[511979]
    (511983 return ret[511981])
  }
  function chpl__extendedEuclid[81248](arg u[81245] :
  (81244 call int(64)[13] 32), arg v[81254] :
  (81253 call int(64)[13] 32)) : _unknown[51] "inline"
  {
    unknown ret[511992] "RVV" "temp"
    unknown call_tmp[628386] "expr temp" "maybe param" "maybe type" "temp"
    (628389 'move' call_tmp[628386](81261 call chpl__extendedEuclidHelper u[81245] v[81254]))
    (511997 'move' ret[511992](511996 'deref' call_tmp[628386]))
    (511994 return ret[511992])
  }
  function chpl__extendedEuclid[81276](arg u[81273] :
  (81272 call int(64)[13] 64), arg v[81282] :
  (81281 call int(64)[13] 64)) : _unknown[51] "inline"
  {
    unknown ret[512001] "RVV" "temp"
    unknown call_tmp[628391] "expr temp" "maybe param" "maybe type" "temp"
    (628394 'move' call_tmp[628391](81289 call chpl__extendedEuclidHelper u[81273] v[81282]))
    (512006 'move' ret[512001](512005 'deref' call_tmp[628391]))
    (512003 return ret[512001])
  }
  function chpl__rangeIdxTypeError[81299](arg idxType[81297]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[628396] "expr temp" "maybe param" "maybe type" "temp"
    (628399 'move' call_tmp[628396](81322 call _cast string[26] idxType[81297]))
    (81341 call compilerError "ranges don't support '" call_tmp[628396] "' as their idxType")
    (512008 return _void[55])
  }
  function chpl__rangeStrideType[81350](arg idxType[81348]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512012] "RVV" "temp" "type variable"
    unknown call_tmp[628401] "expr temp" "maybe param" "maybe type" "temp"
    (628404 'move' call_tmp[628401](81355 call isIntegralType idxType[81348]))
    unknown call_tmp[628406] "expr temp" "maybe param" "maybe type" "temp"
    (628409 'move' call_tmp[628406](81387 call _cond_test call_tmp[628401]))
    if call_tmp[628406]
    {
      unknown call_tmp[628411] "expr temp" "maybe param" "maybe type" "temp"
      (628414 'move' call_tmp[628411](81359 call chpl__signedType idxType[81348]))
      (512017 'move' ret[512012](512016 'deref' call_tmp[628411]))
      gotoReturn _end_chpl__rangeStrideType[512010] _end_chpl__rangeStrideType[512010]
    }
    {
      unknown tmp[421666] "maybe param" "temp"
      (421677 'move' tmp[421666](81366 call isEnumType idxType[81348]))
      unknown call_tmp[628416] "expr temp" "maybe param" "maybe type" "temp"
      (628419 'move' call_tmp[628416](421679 call _cond_invalid tmp[421666]))
      if call_tmp[628416]
      {
        (421682 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560046] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560047] "maybe param" "temp"
      unknown call_tmp[628421] "expr temp" "maybe param" "maybe type" "temp"
      (628424 'move' call_tmp[628421](421667 call isTrue tmp[421666]))
      (560052 'move' tmp[560047](560050 call _cond_test call_tmp[628421]))
      if tmp[560047]
      {
        (560057 'move' tmp[560046](560054 '_paramFoldLogical' tmp[560047] 1))
      }
      {
        unknown tmp[560059] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628426] "expr temp" "maybe param" "maybe type" "temp"
        (628429 'move' call_tmp[628426](81370 call isBoolType idxType[81348]))
        (560061 'move' tmp[560059](421671 call isTrue call_tmp[628426]))
        (560066 'move' tmp[560046](560063 '_paramFoldLogical' tmp[560047] tmp[560059]))
      }
      unknown call_tmp[628431] "expr temp" "maybe param" "maybe type" "temp"
      (628434 'move' call_tmp[628431](81383 call _cond_test tmp[560046]))
      if call_tmp[628431]
      {
        (512022 'move' ret[512012](512021 'deref' int(64)[13]))
        gotoReturn _end_chpl__rangeStrideType[512010] _end_chpl__rangeStrideType[512010]
      }
      {
        (81380 call chpl__rangeIdxTypeError idxType[81348])
      }
    }
    label _end_chpl__rangeStrideType[512010]
    (512014 return ret[512012])
  }
  function chpl__rangeUnsignedType[81399](arg idxType[81397]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512028] "RVV" "temp" "type variable"
    unknown call_tmp[628436] "expr temp" "maybe param" "maybe type" "temp"
    (628439 'move' call_tmp[628436](81404 call isIntegralType idxType[81397]))
    unknown call_tmp[628441] "expr temp" "maybe param" "maybe type" "temp"
    (628444 'move' call_tmp[628441](81436 call _cond_test call_tmp[628436]))
    if call_tmp[628441]
    {
      unknown call_tmp[628446] "expr temp" "maybe param" "maybe type" "temp"
      (628449 'move' call_tmp[628446](81408 call chpl__unsignedType idxType[81397]))
      (512033 'move' ret[512028](512032 'deref' call_tmp[628446]))
      gotoReturn _end_chpl__rangeUnsignedType[512026] _end_chpl__rangeUnsignedType[512026]
    }
    {
      unknown tmp[421687] "maybe param" "temp"
      (421698 'move' tmp[421687](81415 call isEnumType idxType[81397]))
      unknown call_tmp[628451] "expr temp" "maybe param" "maybe type" "temp"
      (628454 'move' call_tmp[628451](421700 call _cond_invalid tmp[421687]))
      if call_tmp[628451]
      {
        (421703 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560073] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560074] "maybe param" "temp"
      unknown call_tmp[628456] "expr temp" "maybe param" "maybe type" "temp"
      (628459 'move' call_tmp[628456](421688 call isTrue tmp[421687]))
      (560079 'move' tmp[560074](560077 call _cond_test call_tmp[628456]))
      if tmp[560074]
      {
        (560084 'move' tmp[560073](560081 '_paramFoldLogical' tmp[560074] 1))
      }
      {
        unknown tmp[560086] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628461] "expr temp" "maybe param" "maybe type" "temp"
        (628464 'move' call_tmp[628461](81419 call isBoolType idxType[81397]))
        (560088 'move' tmp[560086](421692 call isTrue call_tmp[628461]))
        (560093 'move' tmp[560073](560090 '_paramFoldLogical' tmp[560074] tmp[560086]))
      }
      unknown call_tmp[628466] "expr temp" "maybe param" "maybe type" "temp"
      (628469 'move' call_tmp[628466](81432 call _cond_test tmp[560073]))
      if call_tmp[628466]
      {
        (512038 'move' ret[512028](512037 'deref' uint(64)[115]))
        gotoReturn _end_chpl__rangeUnsignedType[512026] _end_chpl__rangeUnsignedType[512026]
      }
      {
        (81429 call chpl__rangeIdxTypeError idxType[81397])
      }
    }
    label _end_chpl__rangeUnsignedType[512026]
    (512030 return ret[512028])
  }
  function chpl__idxTypeToIntIdxType[81448](arg idxType[81446]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[512044] "RVV" "temp" "type variable"
    unknown call_tmp[628471] "expr temp" "maybe param" "maybe type" "temp"
    (628474 'move' call_tmp[628471](81453 call isBoolType idxType[81446]))
    unknown call_tmp[628476] "expr temp" "maybe param" "maybe type" "temp"
    (628479 'move' call_tmp[628476](81507 call _cond_test call_tmp[628471]))
    if call_tmp[628476]
    {
      (512049 'move' ret[512044](512048 'deref' int(64)[13]))
      gotoReturn _end_chpl__idxTypeToIntIdxType[512042] _end_chpl__idxTypeToIntIdxType[512042]
    }
    {
      unknown call_tmp[628481] "expr temp" "maybe param" "maybe type" "temp"
      (628484 'move' call_tmp[628481](81461 call isEnumType idxType[81446]))
      unknown call_tmp[628486] "expr temp" "maybe param" "maybe type" "temp"
      (628489 'move' call_tmp[628486](81503 call _cond_test call_tmp[628481]))
      if call_tmp[628486]
      {
        unknown call_tmp[628493] "expr temp" "maybe param" "maybe type" "temp"
        (628496 'move' call_tmp[628493](81463 call size _mt[243] idxType[81446]))
        unknown call_tmp[628498] "expr temp" "maybe param" "maybe type" "temp"
        (628501 'move' call_tmp[628498](81467 call < call_tmp[628493] 2))
        unknown call_tmp[628503] "expr temp" "maybe param" "maybe type" "temp"
        (628506 'move' call_tmp[628503](81490 call _cond_test call_tmp[628498]))
        if call_tmp[628503]
        {
          (81488 call compilerError "ranges are not currently supported for enums with fewer than two values")
        }
        (512054 'move' ret[512044](512053 'deref' int(64)[13]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[512042] _end_chpl__idxTypeToIntIdxType[512042]
      }
      {
        (512059 'move' ret[512044](512058 'deref' idxType[81446]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[512042] _end_chpl__idxTypeToIntIdxType[512042]
      }
    }
    label _end_chpl__idxTypeToIntIdxType[512042]
    (512046 return ret[512044])
  }
  function range[64316](?).chpl_intToIdx[81520](arg _mt[81525]:_MT[238], arg this[81522]:range[64316](?) :
  range[64316](?), arg i[81518]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[512065] "RVV" "temp"
    unknown call_tmp[628510] "expr temp" "maybe param" "maybe type" "temp"
    (628513 'move' call_tmp[628510](81529 call idxType _mt[243] this[81522]))
    unknown call_tmp[628515] "expr temp" "maybe param" "maybe type" "temp"
    (628518 'move' call_tmp[628515](81534 call chpl__intToIdx call_tmp[628510] i[81518]))
    (512070 'move' ret[512065](512069 'deref' call_tmp[628515]))
    (512067 return ret[512065])
  }
  function chpl__intToIdx[81546](arg idxType[81543]:integral[199](?), arg i[81549]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512074] "RVV" "temp"
    unknown call_tmp[628520] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628523 'move' call_tmp[628520](81553 'typeof' i[81549]))
    unknown call_tmp[628525] "expr temp" "maybe param" "maybe type" "temp"
    (628528 'move' call_tmp[628525](81555 call == call_tmp[628520] idxType[81543]))
    unknown call_tmp[628530] "expr temp" "maybe param" "maybe type" "temp"
    (628533 'move' call_tmp[628530](81566 call _cond_test call_tmp[628525]))
    if call_tmp[628530]
    {
      (512079 'move' ret[512074](512078 'deref' i[81549]))
      gotoReturn _end_chpl__intToIdx[512072] _end_chpl__intToIdx[512072]
    }
    {
      unknown call_tmp[628535] "expr temp" "maybe param" "maybe type" "temp"
      (628538 'move' call_tmp[628535](81562 call _cast idxType[81543] i[81549]))
      (512084 'move' ret[512074](512083 'deref' call_tmp[628535]))
      gotoReturn _end_chpl__intToIdx[512072] _end_chpl__intToIdx[512072]
    }
    label _end_chpl__intToIdx[512072]
    (512076 return ret[512074])
  }
  function chpl__intToIdx[81581](arg idxType[81578]:integral[199](?), param arg i[81584]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512090] "RVV" "temp"
    unknown call_tmp[628540] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628543 'move' call_tmp[628540](81588 'typeof' i[81584]))
    unknown call_tmp[628545] "expr temp" "maybe param" "maybe type" "temp"
    (628548 'move' call_tmp[628545](81590 call == call_tmp[628540] idxType[81578]))
    unknown call_tmp[628550] "expr temp" "maybe param" "maybe type" "temp"
    (628553 'move' call_tmp[628550](81601 call _cond_test call_tmp[628545]))
    if call_tmp[628550]
    {
      (512095 'move' ret[512090](512094 'deref' i[81584]))
      gotoReturn _end_chpl__intToIdx[512088] _end_chpl__intToIdx[512088]
    }
    {
      unknown call_tmp[628555] "expr temp" "maybe param" "maybe type" "temp"
      (628558 'move' call_tmp[628555](81597 call _cast idxType[81578] i[81584]))
      (512100 'move' ret[512090](512099 'deref' call_tmp[628555]))
      gotoReturn _end_chpl__intToIdx[512088] _end_chpl__intToIdx[512088]
    }
    label _end_chpl__intToIdx[512088]
    (512092 return ret[512090])
  }
  function chpl__intToIdx[81616](arg idxType[81613]:enum[187](?), arg i[81619]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512106] "RVV" "temp"
    unknown call_tmp[628560] "expr temp" "maybe param" "maybe type" "temp"
    (628563 'move' call_tmp[628560](81626 call chpl__orderToEnum i[81619] idxType[81613]))
    (512111 'move' ret[512106](512110 'deref' call_tmp[628560]))
    (512108 return ret[512106])
  }
  function chpl__intToIdx[81636](arg idxType[81634]:_any[178](?), arg i[81639]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512115] "RVV" "temp"
    unknown call_tmp[628565] "expr temp" "maybe param" "maybe type" "temp"
    (628568 'move' call_tmp[628565](81648 call _cast bool[10] i[81639]))
    (512120 'move' ret[512115](512119 'deref' call_tmp[628565]))
    (512117 return ret[512115])
  }
  where {
    (81645 call isBoolType idxType[81634])
  }
  function chpl__intToIdx[81660](arg idxType[81658]:_any[178](?), param arg i[81663]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[512124] "RVV" "param" "temp"
    unknown call_tmp[628570] "expr temp" "maybe param" "maybe type" "temp"
    (628573 'move' call_tmp[628570](81672 call _cast bool[10] i[81663]))
    (512129 'move' ret[512124](512128 'deref' call_tmp[628570]))
    (512126 return ret[512124])
  }
  where {
    (81669 call isBoolType idxType[81658])
  }
  function chpl__intToIdx[81684](arg idxType[81682]:_any[178](?), arg i[81687]:nothing[7]) : _unknown[51] "inline"
  {
    unknown ret[512133] "RVV" "temp"
    (512138 'move' ret[512133](512137 'deref' none[57]))
    (512135 return ret[512133])
  }
  function chpl__idxToInt[81702](arg i[81699]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512142] "RVV" "temp"
    (512147 'move' ret[512142](512146 'deref' i[81699]))
    (512144 return ret[512142])
  }
  function chpl__idxToInt[81716](param arg i[81713]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[512151] "RVV" "param" "temp"
    (512156 'move' ret[512151](512155 'deref' i[81713]))
    (512153 return ret[512151])
  }
  function chpl__idxToInt[81730](arg i[81727]:enum[187](?)) : _unknown[51] "inline"
  {
    unknown ret[512160] "RVV" "temp"
    unknown call_tmp[628575] "expr temp" "maybe param" "maybe type" "temp"
    (628578 'move' call_tmp[628575](81735 call chpl__enumToOrder i[81727]))
    (512165 'move' ret[512160](512164 'deref' call_tmp[628575]))
    (512162 return ret[512160])
  }
  function chpl__idxToInt[81747](arg i[81744]:bool[10]) : _unknown[51] "inline"
  {
    unknown ret[512169] "RVV" "temp"
    unknown call_tmp[628580] "expr temp" "maybe param" "maybe type" "temp"
    (628583 'move' call_tmp[628580](81751 call _cast int(64)[13] i[81744]))
    (512174 'move' ret[512169](512173 'deref' call_tmp[628580]))
    (512171 return ret[512169])
  }
  function chpl__idxToInt[81764](param arg i[81761]:bool[10]) param : _unknown[51] "inline"
  {
    unknown ret[512178] "RVV" "param" "temp"
    unknown call_tmp[628585] "expr temp" "maybe param" "maybe type" "temp"
    (628588 'move' call_tmp[628585](81768 call _cast int(64)[13] i[81761]))
    (512183 'move' ret[512178](512182 'deref' call_tmp[628585]))
    (512180 return ret[512178])
  }
  (355106 'used modules list'(64184 'use' ChapelBase[307])(64186 'use' SysBasic[223433])(64187 'use' HaltWrappers[209915])(64191 'use' Math[215775])(64193 'use' DSIUtil[230805]))
}