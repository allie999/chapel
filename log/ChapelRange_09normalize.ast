AST dump for ChapelRange after pass normalize.
Module use list: ChapelBase SysBasic HaltWrappers Math DSIUtil 

{
  function chpl__init_ChapelRange[415994]() : void[4] "insert line file info" "module init"
  {
    (541040 'init var' debugChapelRange[64198] 0)
    (64201 'end of statement')
    (541042 'init var' useOptimizedRangeIterators[64203] 1)
    (64206 'end of statement')
    {
    }
    (512167 return _void[55])
  }
  unknown debugChapelRange[64198] "config" "no doc" "param"
  unknown useOptimizedRangeIterators[64203] "config" "no doc" "param"
  type BoundedRangeType[64216] def bounded[64208]:BoundedRangeType[64216] def boundedLow[64210]:BoundedRangeType[64216] def boundedHigh[64212]:BoundedRangeType[64216] def boundedNone[64214]:BoundedRangeType[64216]
  function range[64319](?).strType[64297](arg _mt[64323]:_MT[238], arg this[64321]:range[64319](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[509024] "RVV" "temp" "type variable"
    unknown call_tmp[616276] "expr temp" "maybe param" "maybe type" "temp"
    (616279 'move' call_tmp[616276](373730 call idxType _mt[243] this[64321]))
    unknown call_tmp[616281] "expr temp" "maybe param" "maybe type" "temp"
    (616284 'move' call_tmp[616281](64302 call chpl__rangeStrideType call_tmp[616276]))
    (509029 'move' ret[509024](509028 'deref' call_tmp[616281]))
    (509026 return ret[509024])
  }
  function range[64319](?).chpl__promotionType[64310](arg _mt[64327]:_MT[238], arg this[64325]:range[64319](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[509033] "RVV" "temp" "type variable"
    unknown call_tmp[616288] "expr temp" "maybe param" "maybe type" "temp"
    (616291 'move' call_tmp[616288](373735 call idxType _mt[243] this[64325]))
    (509038 'move' ret[509033](509037 'deref' call_tmp[616288]))
    (509035 return ret[509033])
  }
  type range[64319](?) unknown idxType[64223] "type variable" int(64)[13] unknown boundedType[64233] "param" bounded[64208] BoundedRangeType[64216] unknown stridable[64239] "param" 0 bool[10] unknown _low[64247](64246 call chpl__idxTypeToIntIdxType idxType[64223]) unknown _high[64255](64254 call chpl__idxTypeToIntIdxType idxType[64223]) unknown _stride[64268](64265 IfExpr  stridable[64239] then
  { scopeless
    (64263 call chpl__rangeStrideType idxType[64223])
  } else
  { scopeless
    nothing[7]
  } ) unknown _alignment[64281](64278 IfExpr  stridable[64239] then
  { scopeless
    (64276 call chpl__idxTypeToIntIdxType idxType[64223])
  } else
  { scopeless
    nothing[7]
  } ) unknown _aligned[64291](64288 IfExpr  stridable[64239] then
  { scopeless
    bool[10]
  } else
  { scopeless
    nothing[7]
  } )
  function range[64319](?).intIdxType[64333](arg _mt[64338]:_MT[238], arg this[64335]:range[64319](?) :
  range[64319](?)) type : _unknown[51] "method" "no parens"
  {
    unknown ret[509042] "RVV" "temp" "type variable"
    unknown call_tmp[616295] "expr temp" "maybe param" "maybe type" "temp"
    (616298 'move' call_tmp[616295](373740 call idxType _mt[243] this[64335]))
    unknown call_tmp[616300] "expr temp" "maybe param" "maybe type" "temp"
    (616303 'move' call_tmp[616300](64343 call chpl__idxTypeToIntIdxType call_tmp[616295]))
    (509047 'move' ret[509042](509046 'deref' call_tmp[616300]))
    (509044 return ret[509042])
  }
  function range[64319](?).init[64356](arg _mt[64421]:_MT[238], ref arg this[64418]:range[64319](?) :
  range[64319](?), arg idxType[64353]:_any[178](?) =
  int(64)[13], param arg boundedType[64363]:BoundedRangeType[64216] =
  bounded[64208], param arg stridable[64369]:bool[10] =
  0, arg _low[64379] :
  idxType[64353] =
  (64378 call chpl__intToIdx idxType[64353] 1), arg _high[64389] :
  idxType[64353] =
  (64388 call chpl__intToIdx idxType[64353] 0), arg _stride[64398] :
  (64396 call chpl__rangeStrideType idxType[64353]) =
  1, arg _alignment[64408] :
  idxType[64353] =
  (64407 call chpl__intToIdx idxType[64353] 0), arg _aligned[64414]:bool[10] =
  0) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454841] "temp" "type variable"
    (454843 'move' tmp[454841] idxType[64353])
    (454845 'init field' this[64418] c"idxType" tmp[454841])
    unknown call_tmp[616305] "expr temp" "maybe param" "maybe type" "temp"
    (616308 'move' call_tmp[616305](454850 call _cast BoundedRangeType[64216] boundedType[64363]))
    (454852 'init field' this[64418] c"boundedType" call_tmp[616305])
    (475272 'end of statement')
    unknown call_tmp[616310] "expr temp" "maybe param" "maybe type" "temp"
    (616313 'move' call_tmp[616310](454856 call _cast bool[10] stridable[64369]))
    (454858 'init field' this[64418] c"stridable" call_tmp[616310])
    (475273 'end of statement')
    unknown call_tmp[616315] "maybe param" "maybe type" "temp"
    (616318 'move' call_tmp[616315](64459 call chpl__idxToInt _low[64379]))
    unknown call_tmp[616320] "expr temp" "maybe param" "maybe type" "temp"
    (616323 'move' call_tmp[616320](454872 '.v' this[64418] c"idxType"))
    unknown call_tmp[616325] "maybe param" "maybe type" "temp"
    (616328 'move' call_tmp[616325](454864 call chpl__idxTypeToIntIdxType call_tmp[616320]))
    unknown tmp[454861] "temp"
    (454866 'init var' tmp[454861] call_tmp[616315] call_tmp[616325])
    (454868 'init field' this[64418] c"_low" tmp[454861])
    (475274 'end of statement')
    unknown call_tmp[616330] "maybe param" "maybe type" "temp"
    (616333 'move' call_tmp[616330](64472 call chpl__idxToInt _high[64389]))
    unknown call_tmp[616335] "expr temp" "maybe param" "maybe type" "temp"
    (616338 'move' call_tmp[616335](454886 '.v' this[64418] c"idxType"))
    unknown call_tmp[616340] "maybe param" "maybe type" "temp"
    (616343 'move' call_tmp[616340](454878 call chpl__idxTypeToIntIdxType call_tmp[616335]))
    unknown tmp[454875] "temp"
    (454880 'init var' tmp[454875] call_tmp[616330] call_tmp[616340])
    (454882 'init field' this[64418] c"_high" tmp[454875])
    (475275 'end of statement')
    unknown tmp[454889] "temp"
    unknown tmp[555421] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555422] "maybe param" "temp"
    unknown call_tmp[616345] "expr temp" "maybe param" "maybe type" "temp"
    (616348 'move' call_tmp[616345](454905 '.v' this[64418] c"stridable"))
    (555427 'move' tmp[555422](555425 call _cond_test call_tmp[616345]))
    if tmp[555422]
    {
      unknown tmp[555429] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616350] "expr temp" "maybe param" "maybe type" "temp"
      (616353 'move' call_tmp[616350](454908 '.v' this[64418] c"idxType"))
      (555431 'move' tmp[555429](454894 call chpl__rangeStrideType call_tmp[616350]))
      (555436 'move' tmp[555421](555433 '_paramFoldLogical' tmp[555422] tmp[555429]))
    }
    {
      (555441 'move' tmp[555421](555438 '_paramFoldLogical' tmp[555422] nothing[7]))
    }
    (454899 'default init var' tmp[454889] tmp[555421])
    (454901 '.=' this[64418] c"_stride" tmp[454889])
    (475276 'end of statement')
    unknown tmp[454911] "temp"
    unknown tmp[555448] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555449] "maybe param" "temp"
    unknown call_tmp[616355] "expr temp" "maybe param" "maybe type" "temp"
    (616358 'move' call_tmp[616355](454927 '.v' this[64418] c"stridable"))
    (555454 'move' tmp[555449](555452 call _cond_test call_tmp[616355]))
    if tmp[555449]
    {
      unknown tmp[555456] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616360] "expr temp" "maybe param" "maybe type" "temp"
      (616363 'move' call_tmp[616360](454930 '.v' this[64418] c"idxType"))
      (555458 'move' tmp[555456](454916 call chpl__idxTypeToIntIdxType call_tmp[616360]))
      (555463 'move' tmp[555448](555460 '_paramFoldLogical' tmp[555449] tmp[555456]))
    }
    {
      (555468 'move' tmp[555448](555465 '_paramFoldLogical' tmp[555449] nothing[7]))
    }
    (454921 'default init var' tmp[454911] tmp[555448])
    (454923 '.=' this[64418] c"_alignment" tmp[454911])
    (475277 'end of statement')
    unknown tmp[454933] "temp"
    unknown tmp[555475] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555476] "maybe param" "temp"
    unknown call_tmp[616365] "expr temp" "maybe param" "maybe type" "temp"
    (616368 'move' call_tmp[616365](454947 '.v' this[64418] c"stridable"))
    (555481 'move' tmp[555476](555479 call _cond_test call_tmp[616365]))
    if tmp[555476]
    {
      (555486 'move' tmp[555475](555483 '_paramFoldLogical' tmp[555476] bool[10]))
    }
    {
      (555491 'move' tmp[555475](555488 '_paramFoldLogical' tmp[555476] nothing[7]))
    }
    (454941 'default init var' tmp[454933] tmp[555475])
    (454943 '.=' this[64418] c"_aligned" tmp[454933])
    (475278 'end of statement')
    unknown call_tmp[616370] "expr temp" "maybe param" "maybe type" "temp"
    (616373 'move' call_tmp[616370](64518 call _cond_test stridable[64369]))
    if call_tmp[616370]
    {
      unknown call_tmp[616377] "expr temp" "maybe param" "maybe type" "temp"
      (616380 'move' call_tmp[616377](64487 call _stride _mt[243] this[64418]))
      (64491 call = call_tmp[616377] _stride[64398])
      (475279 'end of statement')
      unknown call_tmp[616384] "expr temp" "maybe param" "maybe type" "temp"
      (616387 'move' call_tmp[616384](64498 call _alignment _mt[243] this[64418]))
      unknown call_tmp[616389] "expr temp" "maybe param" "maybe type" "temp"
      (616392 'move' call_tmp[616389](64504 call chpl__idxToInt _alignment[64408]))
      (64505 call = call_tmp[616384] call_tmp[616389])
      (475280 'end of statement')
      unknown call_tmp[616396] "expr temp" "maybe param" "maybe type" "temp"
      (616399 'move' call_tmp[616396](64511 call _aligned _mt[243] this[64418]))
      (64515 call = call_tmp[616396] _aligned[64414])
    }
    unknown tmp[419236] "maybe param" "temp"
    (419247 'move' tmp[419236](64523 call ! stridable[64369]))
    unknown call_tmp[616401] "expr temp" "maybe param" "maybe type" "temp"
    (616404 'move' call_tmp[616401](419249 call _cond_invalid tmp[419236]))
    if call_tmp[616401]
    {
      (419252 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555498] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555499] "maybe param" "temp"
    unknown call_tmp[616406] "expr temp" "maybe param" "maybe type" "temp"
    (616409 'move' call_tmp[616406](419237 call isTrue tmp[419236]))
    (555504 'move' tmp[555499](555502 call _cond_test call_tmp[616406]))
    if tmp[555499]
    {
      unknown tmp[555506] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555508 'move' tmp[555506](419240 call isTrue 1))
      (555513 'move' tmp[555498](555510 '_paramFoldLogical' tmp[555499] tmp[555506]))
    }
    {
      (555518 'move' tmp[555498](555515 '_paramFoldLogical' tmp[555499] 0))
    }
    unknown call_tmp[616411] "expr temp" "maybe param" "maybe type" "temp"
    (616414 'move' call_tmp[616411](64536 call _cond_test tmp[555498]))
    if call_tmp[616411]
    {
      unknown call_tmp[616416] "expr temp" "maybe param" "maybe type" "temp"
      (616419 'move' call_tmp[616416](64531 call == _stride[64398] 1))
      (64534 call assert call_tmp[616416])
    }
    (509049 return _void[55])
  }
  function _isAnyNothing[64549](arg args[64546]:_any[178](?) ...) param : _unknown[51] "private"
  {
    unknown ret[509053] "RVV" "param" "temp"
    {
      unknown i[64579] "dead at end of block" "insert auto destroy"
      (541044 'init var' i[64579] 0)
      (475284 'end of statement')
      unknown tmp[64580] "maybe param" "temp"
      unknown call_tmp[616423] "expr temp" "maybe param" "maybe type" "temp"
      (616426 'move' call_tmp[616423](64554 call size _mt[243] args[64546]))
      unknown call_tmp[616428] "expr temp" "maybe param" "maybe type" "temp"
      (616431 'move' call_tmp[616428](64558 call - call_tmp[616423] 1))
      (64592 'move' tmp[64580](64590 call chpl_compute_low_param_loop_bound 0 call_tmp[616428]))
      unknown tmp[64581] "maybe param" "temp"
      unknown call_tmp[616435] "expr temp" "maybe param" "maybe type" "temp"
      (616438 'move' call_tmp[616435](64599 call size _mt[243] args[64546]))
      unknown call_tmp[616440] "expr temp" "maybe param" "maybe type" "temp"
      (616443 'move' call_tmp[616440](64597 call - call_tmp[616435] 1))
      (64605 'move' tmp[64581](64603 call chpl_compute_high_param_loop_bound 0 call_tmp[616440]))
      unknown tmp[64582] "maybe param" "temp"
      (64608 'move' tmp[64582] 1)
      ParamForLoop[64610]
      { i[64579] tmp[64580] tmp[64581] tmp[64582]
        {
          { scopeless type
            unknown call_type_tmp[491889] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[616445] "expr temp" "maybe param" "maybe type" "temp"
            (616448 'move' call_tmp[616445](64566 call args[64546] i[64579]))
            (491893 'move' call_type_tmp[491889](64567 'typeof' call_tmp[616445]))
          }
          unknown call_tmp[616450] "expr temp" "maybe param" "maybe type" "temp"
          (616453 'move' call_tmp[616450](64569 call isNothingType call_type_tmp[491889]))
          unknown call_tmp[616455] "expr temp" "maybe param" "maybe type" "temp"
          (616458 'move' call_tmp[616455](64573 call _cond_test call_tmp[616450]))
          if call_tmp[616455]
          {
            (509059 'move' ret[509053](509058 'coerce' 1 bool[10]))
            gotoReturn _end__isAnyNothing[509051] _end__isAnyNothing[509051]
          }
        }
      }
      label _unused_continueLabel[64584]
      label _breakLabel[64583]
    }
    (509065 'move' ret[509053](509064 'coerce' 0 bool[10]))
    label _end__isAnyNothing[509051]
    (509055 return ret[509053])
  }
  { scopeless type
    bool[10]
  }
  function range[64319](?).init[64633](arg _mt[64679]:_MT[238], ref arg this[64676]:range[64319](?) :
  range[64319](?), arg idxType[64630]:_any[178](?) =
  int(64)[13], param arg boundedType[64640]:BoundedRangeType[64216] =
  bounded[64208], param arg stridable[64646]:bool[10] =
  0, arg _low[64656] :
  idxType[64630] =
  (64655 call chpl__intToIdx idxType[64630] 1), arg _high[64666] :
  idxType[64630] =
  (64665 call chpl__intToIdx idxType[64630] 0), arg _stride[64670]:_any[178](?), arg _alignment[64672]:_any[178](?), arg _aligned[64674]:_any[178](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454950] "temp" "type variable"
    (454952 'move' tmp[454950] idxType[64630])
    (454954 'init field' this[64676] c"idxType" tmp[454950])
    unknown call_tmp[616460] "expr temp" "maybe param" "maybe type" "temp"
    (616463 'move' call_tmp[616460](454959 call _cast BoundedRangeType[64216] boundedType[64640]))
    (454961 'init field' this[64676] c"boundedType" call_tmp[616460])
    (475287 'end of statement')
    unknown call_tmp[616465] "expr temp" "maybe param" "maybe type" "temp"
    (616468 'move' call_tmp[616465](454965 call _cast bool[10] stridable[64646]))
    (454967 'init field' this[64676] c"stridable" call_tmp[616465])
    (475288 'end of statement')
    unknown call_tmp[616470] "maybe param" "maybe type" "temp"
    (616473 'move' call_tmp[616470](64719 call chpl__idxToInt _low[64656]))
    unknown call_tmp[616475] "expr temp" "maybe param" "maybe type" "temp"
    (616478 'move' call_tmp[616475](454981 '.v' this[64676] c"idxType"))
    unknown call_tmp[616480] "maybe param" "maybe type" "temp"
    (616483 'move' call_tmp[616480](454973 call chpl__idxTypeToIntIdxType call_tmp[616475]))
    unknown tmp[454970] "temp"
    (454975 'init var' tmp[454970] call_tmp[616470] call_tmp[616480])
    (454977 'init field' this[64676] c"_low" tmp[454970])
    (475289 'end of statement')
    unknown call_tmp[616485] "maybe param" "maybe type" "temp"
    (616488 'move' call_tmp[616485](64730 call chpl__idxToInt _high[64666]))
    unknown call_tmp[616490] "expr temp" "maybe param" "maybe type" "temp"
    (616493 'move' call_tmp[616490](454995 '.v' this[64676] c"idxType"))
    unknown call_tmp[616495] "maybe param" "maybe type" "temp"
    (616498 'move' call_tmp[616495](454987 call chpl__idxTypeToIntIdxType call_tmp[616490]))
    unknown tmp[454984] "temp"
    (454989 'init var' tmp[454984] call_tmp[616485] call_tmp[616495])
    (454991 'init field' this[64676] c"_high" tmp[454984])
    (475290 'end of statement')
    unknown tmp[454998] "temp"
    unknown tmp[555525] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555526] "maybe param" "temp"
    unknown call_tmp[616500] "expr temp" "maybe param" "maybe type" "temp"
    (616503 'move' call_tmp[616500](455014 '.v' this[64676] c"stridable"))
    (555531 'move' tmp[555526](555529 call _cond_test call_tmp[616500]))
    if tmp[555526]
    {
      unknown tmp[555533] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616505] "expr temp" "maybe param" "maybe type" "temp"
      (616508 'move' call_tmp[616505](455017 '.v' this[64676] c"idxType"))
      (555535 'move' tmp[555533](455003 call chpl__rangeStrideType call_tmp[616505]))
      (555540 'move' tmp[555525](555537 '_paramFoldLogical' tmp[555526] tmp[555533]))
    }
    {
      (555545 'move' tmp[555525](555542 '_paramFoldLogical' tmp[555526] nothing[7]))
    }
    (455008 'default init var' tmp[454998] tmp[555525])
    (455010 '.=' this[64676] c"_stride" tmp[454998])
    (475291 'end of statement')
    unknown tmp[455020] "temp"
    unknown tmp[555552] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555553] "maybe param" "temp"
    unknown call_tmp[616510] "expr temp" "maybe param" "maybe type" "temp"
    (616513 'move' call_tmp[616510](455036 '.v' this[64676] c"stridable"))
    (555558 'move' tmp[555553](555556 call _cond_test call_tmp[616510]))
    if tmp[555553]
    {
      unknown tmp[555560] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616515] "expr temp" "maybe param" "maybe type" "temp"
      (616518 'move' call_tmp[616515](455039 '.v' this[64676] c"idxType"))
      (555562 'move' tmp[555560](455025 call chpl__idxTypeToIntIdxType call_tmp[616515]))
      (555567 'move' tmp[555552](555564 '_paramFoldLogical' tmp[555553] tmp[555560]))
    }
    {
      (555572 'move' tmp[555552](555569 '_paramFoldLogical' tmp[555553] nothing[7]))
    }
    (455030 'default init var' tmp[455020] tmp[555552])
    (455032 '.=' this[64676] c"_alignment" tmp[455020])
    (475292 'end of statement')
    unknown tmp[455042] "temp"
    unknown tmp[555579] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555580] "maybe param" "temp"
    unknown call_tmp[616520] "expr temp" "maybe param" "maybe type" "temp"
    (616523 'move' call_tmp[616520](455056 '.v' this[64676] c"stridable"))
    (555585 'move' tmp[555580](555583 call _cond_test call_tmp[616520]))
    if tmp[555580]
    {
      (555590 'move' tmp[555579](555587 '_paramFoldLogical' tmp[555580] bool[10]))
    }
    {
      (555595 'move' tmp[555579](555592 '_paramFoldLogical' tmp[555580] nothing[7]))
    }
    (455050 'default init var' tmp[455042] tmp[555579])
    (455052 '.=' this[64676] c"_aligned" tmp[455042])
    (475293 'end of statement')
    unknown call_tmp[616525] "expr temp" "maybe param" "maybe type" "temp"
    (616528 'move' call_tmp[616525](64763 call _cond_test stridable[64646]))
    if call_tmp[616525]
    {
      (64761 call compilerError "non-stridable range initializer called with stridable=true")
    }
    (509067 return _void[55])
  }
  where {
    (64686 call _isAnyNothing _stride[64670] _alignment[64672] _aligned[64674])
  }
  function range[64319](?).init=[64786](arg _mt[64791]:_MT[238], ref arg this[64788]:range[64319](?) :
  range[64319](?), arg other[64783]:range[64319](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown call_tmp[616530] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616533 'move' call_tmp[616530](64794 'typeof' this[64788]))
    unknown call_tmp[616537] "expr temp" "maybe param" "maybe type" "temp"
    (616540 'move' call_tmp[616537](64795 call idxType _mt[243] call_tmp[616530]))
    unknown call_tmp[616542] "expr temp" "maybe param" "maybe type" "temp"
    (616545 'move' call_tmp[616542](64799 call == call_tmp[616537] ?[260]))
    unknown idxType[64810] "dead at end of block" "insert auto destroy" "type variable"(64807 IfExpr  call_tmp[616542] then
    { scopeless
      (455065 'query' other[64783] 1)
    } else
    { scopeless
      unknown call_tmp[616547] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616550 'move' call_tmp[616547](64803 'typeof' this[64788]))
      (64804 call idxType _mt[243] call_tmp[616547])
    } )
    unknown tmp[555602] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555603] "maybe param" "temp"
    unknown call_tmp[616554] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616557 'move' call_tmp[616554](541050 'typeof' this[64788]))
    unknown call_tmp[616561] "expr temp" "maybe param" "maybe type" "temp"
    (616564 'move' call_tmp[616561](541049 call idxType _mt[243] call_tmp[616554]))
    unknown call_tmp[616566] "expr temp" "maybe param" "maybe type" "temp"
    (616569 'move' call_tmp[616566](541047 call == call_tmp[616561] ?[260]))
    (555608 'move' tmp[555603](555606 call _cond_test call_tmp[616566]))
    if tmp[555603]
    {
      unknown tmp[555610] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555612 'move' tmp[555610](541055 'query' other[64783] 1))
      (555617 'move' tmp[555602](555614 '_paramFoldLogical' tmp[555603] tmp[555610]))
    }
    {
      unknown tmp[555619] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616571] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616574 'move' call_tmp[616571](541061 'typeof' this[64788]))
      (555621 'move' tmp[555619](541060 call idxType _mt[243] call_tmp[616571]))
      (555626 'move' tmp[555602](555623 '_paramFoldLogical' tmp[555603] tmp[555619]))
    }
    (541065 'move' idxType[64810] tmp[555602])
    unknown boundedType[64831] "dead at end of block" "param"
    unknown tmp[555633] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555634] "maybe param" "temp"
    unknown call_tmp[616578] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616581 'move' call_tmp[616578](64815 'typeof' this[64788]))
    unknown call_tmp[616585] "expr temp" "maybe param" "maybe type" "temp"
    (616588 'move' call_tmp[616585](64816 call boundedType _mt[243] call_tmp[616578]))
    unknown call_tmp[616590] "expr temp" "maybe param" "maybe type" "temp"
    (616593 'move' call_tmp[616590](64820 call == call_tmp[616585] ?[260]))
    (555639 'move' tmp[555634](555637 call _cond_test call_tmp[616590]))
    if tmp[555634]
    {
      unknown tmp[555641] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555643 'move' tmp[555641](455071 'query' other[64783] 2))
      (555648 'move' tmp[555633](555645 '_paramFoldLogical' tmp[555634] tmp[555641]))
    }
    {
      unknown tmp[555650] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616595] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616598 'move' call_tmp[616595](64824 'typeof' this[64788]))
      (555652 'move' tmp[555650](64825 call boundedType _mt[243] call_tmp[616595]))
      (555657 'move' tmp[555633](555654 '_paramFoldLogical' tmp[555634] tmp[555650]))
    }
    (541067 'init var' boundedType[64831] tmp[555633])
    (64834 'end of statement')
    unknown stridable[64852] "dead at end of block" "param"
    unknown tmp[555664] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555665] "maybe param" "temp"
    unknown call_tmp[616602] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616605 'move' call_tmp[616602](64836 'typeof' this[64788]))
    unknown call_tmp[616609] "expr temp" "maybe param" "maybe type" "temp"
    (616612 'move' call_tmp[616609](64837 call stridable _mt[243] call_tmp[616602]))
    unknown call_tmp[616614] "expr temp" "maybe param" "maybe type" "temp"
    (616617 'move' call_tmp[616614](64841 call == call_tmp[616609] ?[260]))
    (555670 'move' tmp[555665](555668 call _cond_test call_tmp[616614]))
    if tmp[555665]
    {
      unknown tmp[555672] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555674 'move' tmp[555672](455083 'query' other[64783] 3))
      (555679 'move' tmp[555664](555676 '_paramFoldLogical' tmp[555665] tmp[555672]))
    }
    {
      unknown tmp[555681] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616619] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616622 'move' call_tmp[616619](64845 'typeof' this[64788]))
      (555683 'move' tmp[555681](64846 call stridable _mt[243] call_tmp[616619]))
      (555688 'move' tmp[555664](555685 '_paramFoldLogical' tmp[555665] tmp[555681]))
    }
    (541069 'init var' stridable[64852] tmp[555664])
    (64855 'end of statement')
    unknown call_tmp[616626] "expr temp" "maybe param" "maybe type" "temp"
    (616629 'move' call_tmp[616626](455074 'query' other[64783] 2))
    unknown call_tmp[616631] "expr temp" "maybe param" "maybe type" "temp"
    (616634 'move' call_tmp[616631](64858 call != boundedType[64831] call_tmp[616626]))
    unknown call_tmp[616636] "expr temp" "maybe param" "maybe type" "temp"
    (616639 'move' call_tmp[616636](64920 call _cond_test call_tmp[616631]))
    if call_tmp[616636]
    {
      unknown call_tmp[616641] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616644 'move' call_tmp[616641](64879 'typeof' this[64788]))
      unknown call_tmp[616648] "expr temp" "maybe param" "maybe type" "temp"
      (616651 'move' call_tmp[616648](64880 call boundedType _mt[243] call_tmp[616641]))
      unknown call_tmp[616653] "expr temp" "maybe param" "maybe type" "temp"
      (616656 'move' call_tmp[616653](64884 call _cast string[26] call_tmp[616648]))
      unknown call_tmp[616658] "expr temp" "maybe param" "maybe type" "temp"
      (616661 'move' call_tmp[616658](64886 call + "range(boundedType=" call_tmp[616653]))
      unknown call_tmp[616663] "expr temp" "maybe param" "maybe type" "temp"
      (616666 'move' call_tmp[616663](64905 call + call_tmp[616658] ") cannot be initialized from range(boundedType="))
      unknown call_tmp[616668] "expr temp" "maybe param" "maybe type" "temp"
      (616671 'move' call_tmp[616668](455077 'query' other[64783] 2))
      unknown call_tmp[616673] "expr temp" "maybe param" "maybe type" "temp"
      (616676 'move' call_tmp[616673](64909 call _cast string[26] call_tmp[616668]))
      unknown call_tmp[616678] "expr temp" "maybe param" "maybe type" "temp"
      (616681 'move' call_tmp[616678](64911 call + call_tmp[616663] call_tmp[616673]))
      unknown call_tmp[616683] "expr temp" "maybe param" "maybe type" "temp"
      (616686 'move' call_tmp[616683](64914 call + call_tmp[616678] ")"))
      (64917 call compilerError call_tmp[616683])
    }
    unknown tmp[419257] "maybe param" "temp"
    (419268 'move' tmp[419257](64925 call ! stridable[64852]))
    unknown call_tmp[616688] "expr temp" "maybe param" "maybe type" "temp"
    (616691 'move' call_tmp[616688](419270 call _cond_invalid tmp[419257]))
    if call_tmp[616688]
    {
      (419273 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555695] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555696] "maybe param" "temp"
    unknown call_tmp[616693] "expr temp" "maybe param" "maybe type" "temp"
    (616696 'move' call_tmp[616693](419258 call isTrue tmp[419257]))
    (555701 'move' tmp[555696](555699 call _cond_test call_tmp[616693]))
    if tmp[555696]
    {
      unknown tmp[555703] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616698] "expr temp" "maybe param" "maybe type" "temp"
      (616701 'move' call_tmp[616698](455086 'query' other[64783] 3))
      (555705 'move' tmp[555703](419261 call isTrue call_tmp[616698]))
      (555710 'move' tmp[555695](555707 '_paramFoldLogical' tmp[555696] tmp[555703]))
    }
    {
      (555715 'move' tmp[555695](555712 '_paramFoldLogical' tmp[555696] 0))
    }
    unknown call_tmp[616703] "expr temp" "maybe param" "maybe type" "temp"
    (616706 'move' call_tmp[616703](64951 call _cond_test tmp[555695]))
    if call_tmp[616703]
    {
      (64949 call compilerError "cannot initialize a non-stridable range from a stridable range")
    }
    unknown tmp[419278] "maybe param" "temp"
    (419289 'move' tmp[419278] stridable[64852])
    unknown call_tmp[616708] "expr temp" "maybe param" "maybe type" "temp"
    (616711 'move' call_tmp[616708](419291 call _cond_invalid tmp[419278]))
    if call_tmp[616708]
    {
      (419294 call compilerError "cannot promote short-circuiting && operator")
    }
    const str[64974] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[555722] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555723] "maybe param" "temp"
    unknown call_tmp[616713] "expr temp" "maybe param" "maybe type" "temp"
    (616716 'move' call_tmp[616713](419279 call isTrue tmp[419278]))
    (555728 'move' tmp[555723](555726 call _cond_test call_tmp[616713]))
    if tmp[555723]
    {
      unknown tmp[555730] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616718] "expr temp" "maybe param" "maybe type" "temp"
      (616721 'move' call_tmp[616718](455089 'query' other[64783] 3))
      (555732 'move' tmp[555730](419282 call isTrue call_tmp[616718]))
      (555737 'move' tmp[555722](555734 '_paramFoldLogical' tmp[555723] tmp[555730]))
    }
    {
      (555742 'move' tmp[555722](555739 '_paramFoldLogical' tmp[555723] 0))
    }
    unknown tmp[555749] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555750] "maybe param" "temp"
    (555755 'move' tmp[555750](555753 call _cond_test tmp[555722]))
    if tmp[555750]
    {
      unknown tmp[555757] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555759 'move' tmp[555757](64961 call stride _mt[243] other[64783]))
      (555764 'move' tmp[555749](555761 '_paramFoldLogical' tmp[555750] tmp[555757]))
    }
    {
      unknown tmp[555766] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616725] "expr temp" "maybe param" "maybe type" "temp"
      (616728 'move' call_tmp[616725](64968 call chpl__rangeStrideType idxType[64810]))
      (555768 'move' tmp[555766](64969 call _cast call_tmp[616725] 1))
      (555773 'move' tmp[555749](555770 '_paramFoldLogical' tmp[555750] tmp[555766]))
    }
    (541071 'init var' str[64974] tmp[555749])
    (64977 'end of statement' idxType[64810])
    unknown call_tmp[616734] "expr temp" "maybe param" "maybe type" "temp"
    (616737 'move' call_tmp[616734](64990 call _low _mt[243] other[64783]))
    unknown call_tmp[616739] "expr temp" "maybe param" "maybe type" "temp"
    (616742 'move' call_tmp[616739](64993 call chpl__intToIdx idxType[64810] call_tmp[616734]))
    unknown call_tmp[616746] "expr temp" "maybe param" "maybe type" "temp"
    (616749 'move' call_tmp[616746](64998 call _high _mt[243] other[64783]))
    unknown call_tmp[616751] "expr temp" "maybe param" "maybe type" "temp"
    (616754 'move' call_tmp[616751](65001 call chpl__intToIdx idxType[64810] call_tmp[616746]))
    unknown call_tmp[616758] "expr temp" "maybe param" "maybe type" "temp"
    (616761 'move' call_tmp[616758](65010 call alignment _mt[243] other[64783]))
    unknown call_tmp[616763] "expr temp" "maybe param" "maybe type" "temp"
    (616766 'move' call_tmp[616763](65014 call chpl__idxToInt call_tmp[616758]))
    unknown call_tmp[616768] "expr temp" "maybe param" "maybe type" "temp"
    (616771 'move' call_tmp[616768](65015 call chpl__intToIdx idxType[64810] call_tmp[616763]))
    unknown call_tmp[616775] "expr temp" "maybe param" "maybe type" "temp"
    (616778 'move' call_tmp[616775](65019 call aligned _mt[243] other[64783]))
    (65022 call(64979 call (partial) init _mt[243] this[64788]) idxType[64810] boundedType[64831] stridable[64852] call_tmp[616739] call_tmp[616751] str[64974] call_tmp[616768] call_tmp[616775])
    (475300 'end of statement' idxType[64810] idxType[64810] idxType[64810] str[64974] idxType[64810])
    (509069 return _void[55])
  }
  function range[64319](?).displayRepresentation[65051](arg _mt[65056]:_MT[238], arg this[65053]:range[64319](?) :
  range[64319](?), arg msg[65047]:string[26] =
  "") : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown ret[509073] "RVV" "temp"
    unknown tmp[555780] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555781] "maybe param" "temp"
    unknown call_tmp[616782] "expr temp" "maybe param" "maybe type" "temp"
    (616785 'move' call_tmp[616782](373834 call aligned _mt[243] this[65053]))
    (555786 'move' tmp[555781](555784 call _cond_test call_tmp[616782]))
    if tmp[555781]
    {
      unknown tmp[555788] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616789] "expr temp" "maybe param" "maybe type" "temp"
      (616792 'move' call_tmp[616789](373838 call alignment _mt[243] this[65053]))
      (555790 'move' tmp[555788](65129 call _cast string[26] call_tmp[616789]))
      (555795 'move' tmp[555780](555792 '_paramFoldLogical' tmp[555781] tmp[555788]))
    }
    {
      (555800 'move' tmp[555780](555797 '_paramFoldLogical' tmp[555781] "\?"))
    }
    unknown call_tmp[616796] "expr temp" "maybe param" "maybe type" "temp"
    (616799 'move' call_tmp[616796](373808 call idxType _mt[243] this[65053]))
    unknown call_tmp[616801] "expr temp" "maybe param" "maybe type" "temp"
    (616804 'move' call_tmp[616801](65081 call _cast string[26] call_tmp[616796]))
    unknown call_tmp[616808] "expr temp" "maybe param" "maybe type" "temp"
    (616811 'move' call_tmp[616808](373813 call boundedType _mt[243] this[65053]))
    unknown call_tmp[616815] "expr temp" "maybe param" "maybe type" "temp"
    (616818 'move' call_tmp[616815](373818 call stridable _mt[243] this[65053]))
    unknown call_tmp[616822] "expr temp" "maybe param" "maybe type" "temp"
    (616825 'move' call_tmp[616822](373822 call low _mt[243] this[65053]))
    unknown call_tmp[616829] "expr temp" "maybe param" "maybe type" "temp"
    (616832 'move' call_tmp[616829](373826 call high _mt[243] this[65053]))
    unknown call_tmp[616836] "expr temp" "maybe param" "maybe type" "temp"
    (616839 'move' call_tmp[616836](373830 call stride _mt[243] this[65053]))
    (65152 call chpl_debug_writeln msg[65047] "(" call_tmp[616801] "," call_tmp[616808] "," call_tmp[616815] " : " call_tmp[616822] "," call_tmp[616829] "," call_tmp[616836] "," tmp[555780] ")")
    (509075 return ret[509073])
  }
  { scopeless type
    void[4]
  }
  function chpl_build_bounded_range[455180](arg low[455187] :
  (455184 call int(64)[13] 64), arg high[455193] :
  (455191 call int(64)[13] 64)) : _unknown[51]
  {
    unknown ret[509079] "RVV" "temp"
    unknown call_tmp[616841] "expr temp" "maybe param" "maybe type" "temp"
    (616844 'move' call_tmp[616841](455201 call int(64)[13] 64))
    unknown call_tmp[616846] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616849 'move' call_tmp[616846](747820 'new' range[64319](?) call_tmp[616841](_low = low[455187])(_high = high[455193])))
    (509084 'move' ret[509079](509083 'deref' call_tmp[616846]))
    (509081 return ret[509079])
  }
  function chpl_build_bounded_range[455151](arg low[455158] :
  (455155 call int(64)[13] 32), arg high[455164] :
  (455162 call int(64)[13] 32)) : _unknown[51]
  {
    unknown ret[509088] "RVV" "temp"
    unknown call_tmp[616851] "expr temp" "maybe param" "maybe type" "temp"
    (616854 'move' call_tmp[616851](455172 call int(64)[13] 32))
    unknown call_tmp[616856] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616859 'move' call_tmp[616856](747821 'new' range[64319](?) call_tmp[616851](_low = low[455158])(_high = high[455164])))
    (509093 'move' ret[509088](509092 'deref' call_tmp[616856]))
    (509090 return ret[509088])
  }
  function chpl_build_bounded_range[455122](arg low[455129] :
  (455126 call int(64)[13] 16), arg high[455135] :
  (455133 call int(64)[13] 16)) : _unknown[51]
  {
    unknown ret[509097] "RVV" "temp"
    unknown call_tmp[616861] "expr temp" "maybe param" "maybe type" "temp"
    (616864 'move' call_tmp[616861](455143 call int(64)[13] 16))
    unknown call_tmp[616866] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616869 'move' call_tmp[616866](747822 'new' range[64319](?) call_tmp[616861](_low = low[455129])(_high = high[455135])))
    (509102 'move' ret[509097](509101 'deref' call_tmp[616866]))
    (509099 return ret[509097])
  }
  function chpl_build_bounded_range[455093](arg low[455100] :
  (455097 call int(64)[13] 8), arg high[455106] :
  (455104 call int(64)[13] 8)) : _unknown[51]
  {
    unknown ret[509106] "RVV" "temp"
    unknown call_tmp[616871] "expr temp" "maybe param" "maybe type" "temp"
    (616874 'move' call_tmp[616871](455114 call int(64)[13] 8))
    unknown call_tmp[616876] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616879 'move' call_tmp[616876](747823 'new' range[64319](?) call_tmp[616871](_low = low[455100])(_high = high[455106])))
    (509111 'move' ret[509106](509110 'deref' call_tmp[616876]))
    (509108 return ret[509106])
  }
  function chpl_build_bounded_range[455296](arg low[455303] :
  (455300 call uint(64)[115] 64), arg high[455309] :
  (455307 call uint(64)[115] 64)) : _unknown[51]
  {
    unknown ret[509115] "RVV" "temp"
    unknown call_tmp[616881] "expr temp" "maybe param" "maybe type" "temp"
    (616884 'move' call_tmp[616881](455317 call uint(64)[115] 64))
    unknown call_tmp[616886] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616889 'move' call_tmp[616886](747824 'new' range[64319](?) call_tmp[616881](_low = low[455303])(_high = high[455309])))
    (509120 'move' ret[509115](509119 'deref' call_tmp[616886]))
    (509117 return ret[509115])
  }
  function chpl_build_bounded_range[455267](arg low[455274] :
  (455271 call uint(64)[115] 32), arg high[455280] :
  (455278 call uint(64)[115] 32)) : _unknown[51]
  {
    unknown ret[509124] "RVV" "temp"
    unknown call_tmp[616891] "expr temp" "maybe param" "maybe type" "temp"
    (616894 'move' call_tmp[616891](455288 call uint(64)[115] 32))
    unknown call_tmp[616896] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616899 'move' call_tmp[616896](747825 'new' range[64319](?) call_tmp[616891](_low = low[455274])(_high = high[455280])))
    (509129 'move' ret[509124](509128 'deref' call_tmp[616896]))
    (509126 return ret[509124])
  }
  function chpl_build_bounded_range[455238](arg low[455245] :
  (455242 call uint(64)[115] 16), arg high[455251] :
  (455249 call uint(64)[115] 16)) : _unknown[51]
  {
    unknown ret[509133] "RVV" "temp"
    unknown call_tmp[616901] "expr temp" "maybe param" "maybe type" "temp"
    (616904 'move' call_tmp[616901](455259 call uint(64)[115] 16))
    unknown call_tmp[616906] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616909 'move' call_tmp[616906](747826 'new' range[64319](?) call_tmp[616901](_low = low[455245])(_high = high[455251])))
    (509138 'move' ret[509133](509137 'deref' call_tmp[616906]))
    (509135 return ret[509133])
  }
  function chpl_build_bounded_range[455209](arg low[455216] :
  (455213 call uint(64)[115] 8), arg high[455222] :
  (455220 call uint(64)[115] 8)) : _unknown[51]
  {
    unknown ret[509142] "RVV" "temp"
    unknown call_tmp[616911] "expr temp" "maybe param" "maybe type" "temp"
    (616914 'move' call_tmp[616911](455230 call uint(64)[115] 8))
    unknown call_tmp[616916] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616919 'move' call_tmp[616916](747827 'new' range[64319](?) call_tmp[616911](_low = low[455216])(_high = high[455222])))
    (509147 'move' ret[509142](509146 'deref' call_tmp[616916]))
    (509144 return ret[509142])
  }
  function chpl_build_bounded_range[65236](arg low[65233]:enum[187](?), arg high[65239]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509151] "RVV" "temp"
    unknown call_tmp[616921] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616924 'move' call_tmp[616921](65243 'typeof' low[65233]))
    unknown call_tmp[616926] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616929 'move' call_tmp[616926](65245 'typeof' high[65239]))
    unknown call_tmp[616931] "expr temp" "maybe param" "maybe type" "temp"
    (616934 'move' call_tmp[616931](65246 call != call_tmp[616921] call_tmp[616926]))
    unknown call_tmp[616936] "expr temp" "maybe param" "maybe type" "temp"
    (616939 'move' call_tmp[616936](65269 call _cond_test call_tmp[616931]))
    if call_tmp[616936]
    {
      (65267 call compilerError "ranges of enums must use a single enum type")
    }
    unknown call_tmp[616941] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616944 'move' call_tmp[616941](65278 'typeof' low[65233]))
    unknown call_tmp[616946] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616949 'move' call_tmp[616946](747828 'new' range[64319](?) call_tmp[616941](_low = low[65233])(_high = high[65239])))
    (509156 'move' ret[509151](509155 'deref' call_tmp[616946]))
    (509153 return ret[509151])
  }
  function chpl_build_bounded_range[65295](arg low[65292]:bool[10], arg high[65298]:bool[10]) : _unknown[51]
  {
    unknown ret[509160] "RVV" "temp"
    unknown call_tmp[616951] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616954 'move' call_tmp[616951](747829 'new' range[64319](?) bool[10](_low = low[65292])(_high = high[65298])))
    (509165 'move' ret[509160](509164 'deref' call_tmp[616951]))
    (509162 return ret[509160])
  }
  function chpl_build_bounded_range[65319](arg low[65317]:_any[178](?), arg high[65321]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65342 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (509167 return _void[55])
  }
  function chpl_build_low_bounded_range[65353](arg low[65350]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509171] "RVV" "temp"
    unknown call_tmp[616956] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616959 'move' call_tmp[616956](65358 'typeof' low[65350]))
    unknown call_tmp[616961] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616964 'move' call_tmp[616961](747830 'new' range[64319](?) call_tmp[616956] boundedLow[64210](_low = low[65350])))
    (509176 'move' ret[509171](509175 'deref' call_tmp[616961]))
    (509173 return ret[509171])
  }
  function chpl_build_low_bounded_range[65378](arg low[65375]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509180] "RVV" "temp"
    unknown call_tmp[616966] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616969 'move' call_tmp[616966](65383 'typeof' low[65375]))
    unknown call_tmp[616971] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616974 'move' call_tmp[616971](747831 'new' range[64319](?) call_tmp[616966] boundedLow[64210](_low = low[65375])))
    (509185 'move' ret[509180](509184 'deref' call_tmp[616971]))
    (509182 return ret[509180])
  }
  function chpl_build_low_bounded_range[65403](arg low[65400]:bool[10]) : _unknown[51]
  {
    unknown ret[509189] "RVV" "temp"
    unknown call_tmp[616976] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616979 'move' call_tmp[616976](65408 'typeof' low[65400]))
    unknown call_tmp[616981] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616984 'move' call_tmp[616981](747832 'new' range[64319](?) call_tmp[616976] boundedLow[64210](_low = low[65400])))
    (509194 'move' ret[509189](509193 'deref' call_tmp[616981]))
    (509191 return ret[509189])
  }
  function chpl_build_low_bounded_range[65426](arg low[65424]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65447 call compilerError "Bound of 'low..' must be an integer")
    (509196 return _void[55])
  }
  function chpl_build_high_bounded_range[65458](arg high[65455]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509200] "RVV" "temp"
    unknown call_tmp[616986] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616989 'move' call_tmp[616986](65463 'typeof' high[65455]))
    unknown call_tmp[616991] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616994 'move' call_tmp[616991](747833 'new' range[64319](?) call_tmp[616986] boundedHigh[64212](_high = high[65455])))
    (509205 'move' ret[509200](509204 'deref' call_tmp[616991]))
    (509202 return ret[509200])
  }
  function chpl_build_high_bounded_range[65483](arg high[65480]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509209] "RVV" "temp"
    unknown call_tmp[616996] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616999 'move' call_tmp[616996](65488 'typeof' high[65480]))
    unknown call_tmp[617001] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617004 'move' call_tmp[617001](747834 'new' range[64319](?) call_tmp[616996] boundedHigh[64212](_high = high[65480])))
    (509214 'move' ret[509209](509213 'deref' call_tmp[617001]))
    (509211 return ret[509209])
  }
  function chpl_build_high_bounded_range[65508](arg high[65505]:bool[10]) : _unknown[51]
  {
    unknown ret[509218] "RVV" "temp"
    unknown call_tmp[617006] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617009 'move' call_tmp[617006](65513 'typeof' high[65505]))
    unknown call_tmp[617011] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617014 'move' call_tmp[617011](747835 'new' range[64319](?) call_tmp[617006] boundedHigh[64212](_high = high[65505])))
    (509223 'move' ret[509218](509222 'deref' call_tmp[617011]))
    (509220 return ret[509218])
  }
  function chpl_build_high_bounded_range[65531](arg high[65529]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65552 call compilerError "Bound of '..high' must be an integer.")
    (509225 return _void[55])
  }
  function chpl_build_unbounded_range[65559]() : _unknown[51]
  {
    unknown ret[509229] "RVV" "temp"
    unknown call_tmp[617016] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617019 'move' call_tmp[617016](747836 'new' range[64319](?) int(64)[13] boundedNone[64214]))
    (509234 'move' ret[509229](509233 'deref' call_tmp[617016]))
    (509231 return ret[509229])
  }
  function chpl_compute_low_param_loop_bound[455385](param arg low[455392] :
  (455389 call int(64)[13] 64), param arg high[455398] :
  (455396 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509238] "RVV" "param" "temp"
    (509243 'move' ret[509238](509242 'deref' low[455392]))
    (509240 return ret[509238])
  }
  function chpl_compute_low_param_loop_bound[455365](param arg low[455372] :
  (455369 call int(64)[13] 32), param arg high[455378] :
  (455376 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509247] "RVV" "param" "temp"
    (509252 'move' ret[509247](509251 'deref' low[455372]))
    (509249 return ret[509247])
  }
  function chpl_compute_low_param_loop_bound[455345](param arg low[455352] :
  (455349 call int(64)[13] 16), param arg high[455358] :
  (455356 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509256] "RVV" "param" "temp"
    (509261 'move' ret[509256](509260 'deref' low[455352]))
    (509258 return ret[509256])
  }
  function chpl_compute_low_param_loop_bound[455325](param arg low[455332] :
  (455329 call int(64)[13] 8), param arg high[455338] :
  (455336 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509265] "RVV" "param" "temp"
    (509270 'move' ret[509265](509269 'deref' low[455332]))
    (509267 return ret[509265])
  }
  function chpl_compute_high_param_loop_bound[455465](param arg low[455472] :
  (455469 call int(64)[13] 64), param arg high[455478] :
  (455476 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509274] "RVV" "param" "temp"
    (509279 'move' ret[509274](509278 'deref' high[455478]))
    (509276 return ret[509274])
  }
  function chpl_compute_high_param_loop_bound[455445](param arg low[455452] :
  (455449 call int(64)[13] 32), param arg high[455458] :
  (455456 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509283] "RVV" "param" "temp"
    (509288 'move' ret[509283](509287 'deref' high[455458]))
    (509285 return ret[509283])
  }
  function chpl_compute_high_param_loop_bound[455425](param arg low[455432] :
  (455429 call int(64)[13] 16), param arg high[455438] :
  (455436 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509292] "RVV" "param" "temp"
    (509297 'move' ret[509292](509296 'deref' high[455438]))
    (509294 return ret[509292])
  }
  function chpl_compute_high_param_loop_bound[455405](param arg low[455412] :
  (455409 call int(64)[13] 8), param arg high[455418] :
  (455416 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509301] "RVV" "param" "temp"
    (509306 'move' ret[509301](509305 'deref' high[455418]))
    (509303 return ret[509301])
  }
  function chpl_compute_low_param_loop_bound[455545](param arg low[455552] :
  (455549 call uint(64)[115] 64), param arg high[455558] :
  (455556 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509310] "RVV" "param" "temp"
    (509315 'move' ret[509310](509314 'deref' low[455552]))
    (509312 return ret[509310])
  }
  function chpl_compute_low_param_loop_bound[455525](param arg low[455532] :
  (455529 call uint(64)[115] 32), param arg high[455538] :
  (455536 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509319] "RVV" "param" "temp"
    (509324 'move' ret[509319](509323 'deref' low[455532]))
    (509321 return ret[509319])
  }
  function chpl_compute_low_param_loop_bound[455505](param arg low[455512] :
  (455509 call uint(64)[115] 16), param arg high[455518] :
  (455516 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509328] "RVV" "param" "temp"
    (509333 'move' ret[509328](509332 'deref' low[455512]))
    (509330 return ret[509328])
  }
  function chpl_compute_low_param_loop_bound[455485](param arg low[455492] :
  (455489 call uint(64)[115] 8), param arg high[455498] :
  (455496 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509337] "RVV" "param" "temp"
    (509342 'move' ret[509337](509341 'deref' low[455492]))
    (509339 return ret[509337])
  }
  function chpl_compute_high_param_loop_bound[455625](param arg low[455632] :
  (455629 call uint(64)[115] 64), param arg high[455638] :
  (455636 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509346] "RVV" "param" "temp"
    (509351 'move' ret[509346](509350 'deref' high[455638]))
    (509348 return ret[509346])
  }
  function chpl_compute_high_param_loop_bound[455605](param arg low[455612] :
  (455609 call uint(64)[115] 32), param arg high[455618] :
  (455616 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509355] "RVV" "param" "temp"
    (509360 'move' ret[509355](509359 'deref' high[455618]))
    (509357 return ret[509355])
  }
  function chpl_compute_high_param_loop_bound[455585](param arg low[455592] :
  (455589 call uint(64)[115] 16), param arg high[455598] :
  (455596 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509364] "RVV" "param" "temp"
    (509369 'move' ret[509364](509368 'deref' high[455598]))
    (509366 return ret[509364])
  }
  function chpl_compute_high_param_loop_bound[455565](param arg low[455572] :
  (455569 call uint(64)[115] 8), param arg high[455578] :
  (455576 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509373] "RVV" "param" "temp"
    (509378 'move' ret[509373](509377 'deref' high[455578]))
    (509375 return ret[509373])
  }
  function chpl_compute_low_param_loop_bound[65683](param arg low[65680]:bool[10], param arg high[65686]:bool[10]) param : _unknown[51]
  {
    unknown ret[509382] "RVV" "param" "temp"
    (509387 'move' ret[509382](509386 'deref' low[65680]))
    (509384 return ret[509382])
  }
  function chpl_compute_high_param_loop_bound[65701](param arg low[65698]:bool[10], param arg high[65704]:bool[10]) param : _unknown[51]
  {
    unknown ret[509391] "RVV" "param" "temp"
    (509396 'move' ret[509391](509395 'deref' high[65704]))
    (509393 return ret[509391])
  }
  function chpl_compute_low_param_loop_bound[65717](param arg low[65715]:_any[178](?), param arg high[65719]:_any[178](?)) param : _unknown[51] "last resort" "no return value for void"
  {
    (65742 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509398 return _void[55])
  }
  function chpl_compute_low_param_loop_bound[65751](arg low[65749]:_any[178](?), arg high[65753]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65774 call compilerError "param for-loops must be defined over a bounded param range")
    (509400 return _void[55])
  }
  function chpl_compute_count_param_loop[65785](param arg count[65782]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509404] "RVV" "param" "temp"
    (509409 'move' ret[509404](509408 'deref' count[65782]))
    (509406 return ret[509404])
  }
  function chpl_compute_count_param_loop[65797](arg count[65795]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65820 call compilerError "in a param for-loop, the count operator requires a param integral value")
    (509411 return _void[55])
  }
  function chpl_low_bound_count_for_param_loop[65831](param arg high[65828]:integral[199](?), param arg count[65834]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509415] "RVV" "param" "temp"
    unknown call_tmp[617021] "expr temp" "maybe param" "maybe type" "temp"
    (617024 'move' call_tmp[617021](65839 call > count[65834] 0))
    unknown call_tmp[617026] "expr temp" "maybe param" "maybe type" "temp"
    (617029 'move' call_tmp[617026](65888 call _cond_test call_tmp[617021]))
    if call_tmp[617026]
    {
      (65860 call compilerError "count operators with positive count require the range to have a low bound")
    }
    {
      unknown call_tmp[617031] "expr temp" "maybe param" "maybe type" "temp"
      (617034 'move' call_tmp[617031](65865 call == count[65834] 0))
      unknown call_tmp[617036] "expr temp" "maybe param" "maybe type" "temp"
      (617039 'move' call_tmp[617036](65884 call _cond_test call_tmp[617031]))
      if call_tmp[617036]
      {
        unknown call_tmp[617041] "expr temp" "maybe param" "maybe type" "temp"
        (617044 'move' call_tmp[617041](65869 call + high[65828] 1))
        (509420 'move' ret[509415](509419 'deref' call_tmp[617041]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509413] _end_chpl_low_bound_count_for_param_loop[509413]
      }
      {
        unknown call_tmp[617046] "expr temp" "maybe param" "maybe type" "temp"
        (617049 'move' call_tmp[617046](65876 call + high[65828] count[65834]))
        unknown call_tmp[617051] "expr temp" "maybe param" "maybe type" "temp"
        (617054 'move' call_tmp[617051](65879 call + call_tmp[617046] 1))
        (509425 'move' ret[509415](509424 'deref' call_tmp[617051]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509413] _end_chpl_low_bound_count_for_param_loop[509413]
      }
    }
    label _end_chpl_low_bound_count_for_param_loop[509413]
    (509417 return ret[509415])
  }
  function chpl_low_bound_count_for_param_loop[65900](arg high[65898]:_any[178](?), arg count[65902]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65907 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509429 return _void[55])
  }
  function chpl_high_bound_count_for_param_loop[65918](param arg low[65915]:integral[199](?), param arg count[65921]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509433] "RVV" "param" "temp"
    unknown call_tmp[617056] "expr temp" "maybe param" "maybe type" "temp"
    (617059 'move' call_tmp[617056](65926 call < count[65921] 0))
    unknown call_tmp[617061] "expr temp" "maybe param" "maybe type" "temp"
    (617064 'move' call_tmp[617061](65977 call _cond_test call_tmp[617056]))
    if call_tmp[617061]
    {
      (65949 call compilerError "count operators with negative count require the range to have a high bound")
    }
    {
      unknown call_tmp[617066] "expr temp" "maybe param" "maybe type" "temp"
      (617069 'move' call_tmp[617066](65954 call == count[65921] 0))
      unknown call_tmp[617071] "expr temp" "maybe param" "maybe type" "temp"
      (617074 'move' call_tmp[617071](65973 call _cond_test call_tmp[617066]))
      if call_tmp[617071]
      {
        unknown call_tmp[617076] "expr temp" "maybe param" "maybe type" "temp"
        (617079 'move' call_tmp[617076](65958 call - low[65915] 1))
        (509438 'move' ret[509433](509437 'deref' call_tmp[617076]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509431] _end_chpl_high_bound_count_for_param_loop[509431]
      }
      {
        unknown call_tmp[617081] "expr temp" "maybe param" "maybe type" "temp"
        (617084 'move' call_tmp[617081](65965 call + low[65915] count[65921]))
        unknown call_tmp[617086] "expr temp" "maybe param" "maybe type" "temp"
        (617089 'move' call_tmp[617086](65968 call - call_tmp[617081] 1))
        (509443 'move' ret[509433](509442 'deref' call_tmp[617086]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509431] _end_chpl_high_bound_count_for_param_loop[509431]
      }
    }
    label _end_chpl_high_bound_count_for_param_loop[509431]
    (509435 return ret[509433])
  }
  function chpl_high_bound_count_for_param_loop[65989](arg low[65987]:_any[178](?), arg count[65991]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65996 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509447 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_low[66007](param arg low[66004]:integral[199](?), param arg high[66010]:integral[199](?), param arg count[66014]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509451] "RVV" "param" "temp"
    unknown abs_count[66028] "dead at end of block" "param"
    unknown tmp[555807] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555808] "maybe param" "temp"
    unknown call_tmp[617091] "expr temp" "maybe param" "maybe type" "temp"
    (617094 'move' call_tmp[617091](66019 call < count[66014] 0))
    (555813 'move' tmp[555808](555811 call _cond_test call_tmp[617091]))
    if tmp[555808]
    {
      unknown tmp[555815] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555817 'move' tmp[555815](66022 call - count[66014]))
      (555822 'move' tmp[555807](555819 '_paramFoldLogical' tmp[555808] tmp[555815]))
    }
    {
      (555827 'move' tmp[555807](555824 '_paramFoldLogical' tmp[555808] count[66014]))
    }
    (541073 'init var' abs_count[66028] tmp[555807])
    (66031 'end of statement')
    unknown call_tmp[617096] "expr temp" "maybe param" "maybe type" "temp"
    (617099 'move' call_tmp[617096](66035 call - high[66010] low[66004]))
    unknown call_tmp[617101] "maybe param" "maybe type" "temp"
    (617104 'move' call_tmp[617101](66038 call + call_tmp[617096] 1))
    unknown size[66040] "dead at end of block" "param"
    (541075 'init var' size[66040] call_tmp[617101])
    (66043 'end of statement')
    unknown call_tmp[617106] "expr temp" "maybe param" "maybe type" "temp"
    (617109 'move' call_tmp[617106](66046 call < size[66040] abs_count[66028]))
    unknown call_tmp[617111] "expr temp" "maybe param" "maybe type" "temp"
    (617114 'move' call_tmp[617111](66133 call _cond_test call_tmp[617106]))
    if call_tmp[617111]
    {
      unknown call_tmp[617116] "expr temp" "maybe param" "maybe type" "temp"
      (617119 'move' call_tmp[617116](66069 call _cast string[26] abs_count[66028]))
      unknown call_tmp[617121] "expr temp" "maybe param" "maybe type" "temp"
      (617124 'move' call_tmp[617121](66090 call _cast string[26] size[66040]))
      (66092 call compilerError "Count of " call_tmp[617116] " is too small for range of size " call_tmp[617121])
    }
    {
      unknown call_tmp[617126] "expr temp" "maybe param" "maybe type" "temp"
      (617129 'move' call_tmp[617126](66097 call == count[66014] 0))
      unknown call_tmp[617131] "expr temp" "maybe param" "maybe type" "temp"
      (617134 'move' call_tmp[617131](66128 call _cond_test call_tmp[617126]))
      if call_tmp[617131]
      {
        unknown call_tmp[617136] "expr temp" "maybe param" "maybe type" "temp"
        (617139 'move' call_tmp[617136](66101 call + high[66010] 1))
        (509456 'move' ret[509451](509455 'deref' call_tmp[617136]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_low[509449] _end_chpl_bounded_count_for_param_loop_low[509449]
      }
      {
        unknown call_tmp[617141] "expr temp" "maybe param" "maybe type" "temp"
        (617144 'move' call_tmp[617141](66108 call < count[66014] 0))
        unknown call_tmp[617146] "expr temp" "maybe param" "maybe type" "temp"
        (617149 'move' call_tmp[617146](66124 call _cond_test call_tmp[617141]))
        if call_tmp[617146]
        {
          unknown call_tmp[617151] "expr temp" "maybe param" "maybe type" "temp"
          (617154 'move' call_tmp[617151](66112 call + high[66010] count[66014]))
          unknown call_tmp[617156] "expr temp" "maybe param" "maybe type" "temp"
          (617159 'move' call_tmp[617156](66115 call + call_tmp[617151] 1))
          (509461 'move' ret[509451](509460 'deref' call_tmp[617156]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509449] _end_chpl_bounded_count_for_param_loop_low[509449]
        }
        {
          (509466 'move' ret[509451](509465 'deref' low[66004]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509449] _end_chpl_bounded_count_for_param_loop_low[509449]
        }
      }
    }
    label _end_chpl_bounded_count_for_param_loop_low[509449]
    (509453 return ret[509451])
  }
  function chpl_bounded_count_for_param_loop_low[66144](arg low[66142]:_any[178](?), arg high[66146]:_any[178](?), arg count[66148]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66171 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509470 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_high[66182](param arg low[66179]:integral[199](?), param arg high[66185]:integral[199](?), param arg count[66189]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509474] "RVV" "param" "temp"
    unknown call_tmp[617161] "expr temp" "maybe param" "maybe type" "temp"
    (617164 'move' call_tmp[617161](66194 call == count[66189] 0))
    unknown call_tmp[617166] "expr temp" "maybe param" "maybe type" "temp"
    (617169 'move' call_tmp[617166](66225 call _cond_test call_tmp[617161]))
    if call_tmp[617166]
    {
      unknown call_tmp[617171] "expr temp" "maybe param" "maybe type" "temp"
      (617174 'move' call_tmp[617171](66198 call - low[66179] 1))
      (509479 'move' ret[509474](509478 'deref' call_tmp[617171]))
      gotoReturn _end_chpl_bounded_count_for_param_loop_high[509472] _end_chpl_bounded_count_for_param_loop_high[509472]
    }
    {
      unknown call_tmp[617176] "expr temp" "maybe param" "maybe type" "temp"
      (617179 'move' call_tmp[617176](66205 call < count[66189] 0))
      unknown call_tmp[617181] "expr temp" "maybe param" "maybe type" "temp"
      (617184 'move' call_tmp[617181](66221 call _cond_test call_tmp[617176]))
      if call_tmp[617181]
      {
        (509484 'move' ret[509474](509483 'deref' high[66185]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509472] _end_chpl_bounded_count_for_param_loop_high[509472]
      }
      {
        unknown call_tmp[617186] "expr temp" "maybe param" "maybe type" "temp"
        (617189 'move' call_tmp[617186](66213 call + low[66179] count[66189]))
        unknown call_tmp[617191] "expr temp" "maybe param" "maybe type" "temp"
        (617194 'move' call_tmp[617191](66216 call - call_tmp[617186] 1))
        (509489 'move' ret[509474](509488 'deref' call_tmp[617191]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509472] _end_chpl_bounded_count_for_param_loop_high[509472]
      }
    }
    label _end_chpl_bounded_count_for_param_loop_high[509472]
    (509476 return ret[509474])
  }
  function chpl_bounded_count_for_param_loop_high[66237](arg low[66235]:_any[178](?), arg high[66239]:_any[178](?), arg count[66241]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66246 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509493 return _void[55])
  }
  function isRangeType[66255](arg t[66253]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[509515] "RVV" "param" "temp"
    function isRangeHelp[66266](arg t[66263]:range[64319](?)) param : _unknown[51]
    {
      unknown ret[509497] "RVV" "param" "temp"
      (509502 'move' ret[509497](509501 'deref' 1))
      (509499 return ret[509497])
    }
    function isRangeHelp[66279](arg t[66277]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[509506] "RVV" "param" "temp"
      (509511 'move' ret[509506](509510 'deref' 0))
      (509508 return ret[509506])
    }
    unknown call_tmp[617196] "expr temp" "maybe param" "maybe type" "temp"
    (617199 'move' call_tmp[617196](66290 call isRangeHelp t[66253]))
    (509520 'move' ret[509515](509519 'deref' call_tmp[617196]))
    (509517 return ret[509515])
  }
  function isRangeValue[66304](arg r[66301]:range[64319](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509524] "RVV" "param" "temp"
    (509529 'move' ret[509524](509528 'deref' 1))
    (509526 return ret[509524])
  }
  function isRangeValue[66316](arg r[66314]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509533] "RVV" "param" "temp"
    (509538 'move' ret[509533](509537 'deref' 0))
    (509535 return ret[509533])
  }
  function isBoundedRange[66328](arg r[66326]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509542] "RVV" "param" "temp"
    (509547 'move' ret[509542](509546 'deref' 0))
    (509544 return ret[509542])
  }
  function isBoundedRange[66345](arg r[66342]:range[64319](?)) param : _unknown[51]
  {
    unknown ret[509551] "RVV" "param" "temp"
    unknown call_tmp[617203] "expr temp" "maybe param" "maybe type" "temp"
    (617206 'move' call_tmp[617203](66349 call boundedType _mt[243] r[66342]))
    unknown call_tmp[617208] "expr temp" "maybe param" "maybe type" "temp"
    (617211 'move' call_tmp[617208](66353 call isBoundedRange call_tmp[617203]))
    (509556 'move' ret[509551](509555 'deref' call_tmp[617208]))
    (509553 return ret[509551])
  }
  function isBoundedRange[66365](param arg B[66362]:BoundedRangeType[64216]) param : _unknown[51] "no doc"
  {
    unknown ret[509560] "RVV" "param" "temp"
    unknown call_tmp[617213] "expr temp" "maybe param" "maybe type" "temp"
    (617216 'move' call_tmp[617213](66372 call == B[66362] bounded[64208]))
    (509565 'move' ret[509560](509564 'deref' call_tmp[617213]))
    (509562 return ret[509560])
  }
  function range[64319](?).isBounded[66382](arg _mt[66387]:_MT[238], arg this[66384]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509569] "RVV" "param" "temp"
    unknown call_tmp[617220] "expr temp" "maybe param" "maybe type" "temp"
    (617223 'move' call_tmp[617220](373942 call boundedType _mt[243] this[66384]))
    unknown call_tmp[617225] "expr temp" "maybe param" "maybe type" "temp"
    (617228 'move' call_tmp[617225](66394 call == call_tmp[617220] bounded[64208]))
    (509574 'move' ret[509569](509573 'deref' call_tmp[617225]))
    (509571 return ret[509569])
  }
  function range[64319](?).hasLowBound[66404](arg _mt[66409]:_MT[238], arg this[66406]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509578] "RVV" "param" "temp"
    unknown tmp[419299] "maybe param" "temp"
    unknown call_tmp[617232] "expr temp" "maybe param" "maybe type" "temp"
    (617235 'move' call_tmp[617232](373947 call boundedType _mt[243] this[66406]))
    (419310 'move' tmp[419299](66416 call == call_tmp[617232] bounded[64208]))
    unknown call_tmp[617237] "expr temp" "maybe param" "maybe type" "temp"
    (617240 'move' call_tmp[617237](419312 call _cond_invalid tmp[419299]))
    if call_tmp[617237]
    {
      (419315 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555834] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555835] "maybe param" "temp"
    unknown call_tmp[617242] "expr temp" "maybe param" "maybe type" "temp"
    (617245 'move' call_tmp[617242](419300 call isTrue tmp[419299]))
    (555840 'move' tmp[555835](555838 call _cond_test call_tmp[617242]))
    if tmp[555835]
    {
      (555845 'move' tmp[555834](555842 '_paramFoldLogical' tmp[555835] 1))
    }
    {
      unknown tmp[555847] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617249] "expr temp" "maybe param" "maybe type" "temp"
      (617252 'move' call_tmp[617249](373952 call boundedType _mt[243] this[66406]))
      unknown call_tmp[617254] "expr temp" "maybe param" "maybe type" "temp"
      (617257 'move' call_tmp[617254](66423 call == call_tmp[617249] boundedLow[64210]))
      (555849 'move' tmp[555847](419304 call isTrue call_tmp[617254]))
      (555854 'move' tmp[555834](555851 '_paramFoldLogical' tmp[555835] tmp[555847]))
    }
    (509583 'move' ret[509578](509582 'deref' tmp[555834]))
    (509580 return ret[509578])
  }
  function range[64319](?).hasHighBound[66435](arg _mt[66440]:_MT[238], arg this[66437]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509587] "RVV" "param" "temp"
    unknown tmp[419320] "maybe param" "temp"
    unknown call_tmp[617261] "expr temp" "maybe param" "maybe type" "temp"
    (617264 'move' call_tmp[617261](373957 call boundedType _mt[243] this[66437]))
    (419331 'move' tmp[419320](66447 call == call_tmp[617261] bounded[64208]))
    unknown call_tmp[617266] "expr temp" "maybe param" "maybe type" "temp"
    (617269 'move' call_tmp[617266](419333 call _cond_invalid tmp[419320]))
    if call_tmp[617266]
    {
      (419336 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555861] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555862] "maybe param" "temp"
    unknown call_tmp[617271] "expr temp" "maybe param" "maybe type" "temp"
    (617274 'move' call_tmp[617271](419321 call isTrue tmp[419320]))
    (555867 'move' tmp[555862](555865 call _cond_test call_tmp[617271]))
    if tmp[555862]
    {
      (555872 'move' tmp[555861](555869 '_paramFoldLogical' tmp[555862] 1))
    }
    {
      unknown tmp[555874] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617278] "expr temp" "maybe param" "maybe type" "temp"
      (617281 'move' call_tmp[617278](373962 call boundedType _mt[243] this[66437]))
      unknown call_tmp[617283] "expr temp" "maybe param" "maybe type" "temp"
      (617286 'move' call_tmp[617283](66454 call == call_tmp[617278] boundedHigh[64212]))
      (555876 'move' tmp[555874](419325 call isTrue call_tmp[617283]))
      (555881 'move' tmp[555861](555878 '_paramFoldLogical' tmp[555862] tmp[555874]))
    }
    (509592 'move' ret[509587](509591 'deref' tmp[555861]))
    (509589 return ret[509587])
  }
  function range[64319](?).stride[66466](arg _mt[66471]:_MT[238], arg this[66468]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509596] "RVV" "temp"
    unknown call_tmp[617290] "expr temp" "maybe param" "maybe type" "temp"
    (617293 'move' call_tmp[617290](373972 call _stride _mt[243] this[66468]))
    (509601 'move' ret[509596](509600 'deref' call_tmp[617290]))
    (509598 return ret[509596])
  }
  where {
    (373967 call stridable _mt[243] this[66468])
  }
  function range[64319](?).stride[66484](arg _mt[66489]:_MT[238], arg this[66486]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509605] "RVV" "param" "temp"
    unknown call_tmp[617299] "expr temp" "maybe param" "maybe type" "temp"
    (617302 'move' call_tmp[617299](373981 call strType _mt[243] this[66486]))
    unknown call_tmp[617304] "expr temp" "maybe param" "maybe type" "temp"
    (617307 'move' call_tmp[617304](66496 call _cast call_tmp[617299] 1))
    (509610 'move' ret[509605](509609 'deref' call_tmp[617304]))
    (509607 return ret[509605])
  }
  where {
    unknown call_tmp[617311] "expr temp" "maybe param" "maybe type" "temp"
    (617314 'move' call_tmp[617311](373977 call stridable _mt[243] this[66486]))
    (66492 call ! call_tmp[617311])
  }
  function range[64319](?).alignment[66507](arg _mt[66512]:_MT[238], arg this[66509]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509614] "RVV" "temp"
    unknown call_tmp[617320] "expr temp" "maybe param" "maybe type" "temp"
    (617323 'move' call_tmp[617320](373995 call _alignment _mt[243] this[66509]))
    unknown call_tmp[617325] "expr temp" "maybe param" "maybe type" "temp"
    (617328 'move' call_tmp[617325](66518 call(373990 call (partial) chpl_intToIdx _mt[243] this[66509]) call_tmp[617320]))
    (509619 'move' ret[509614](509618 'deref' call_tmp[617325]))
    (509616 return ret[509614])
  }
  where {
    (373986 call stridable _mt[243] this[66509])
  }
  function range[64319](?).alignment[66528](arg _mt[66533]:_MT[238], arg this[66530]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509623] "RVV" "temp"
    unknown call_tmp[617334] "expr temp" "maybe param" "maybe type" "temp"
    (617337 'move' call_tmp[617334](374008 call low _mt[243] this[66530]))
    (509628 'move' ret[509623](509627 'deref' call_tmp[617334]))
    (509625 return ret[509623])
  }
  where {
    unknown tmp[419341] "maybe param" "temp"
    unknown call_tmp[617341] "expr temp" "maybe param" "maybe type" "temp"
    (617344 'move' call_tmp[617341](374000 call stridable _mt[243] this[66530]))
    (419352 'move' tmp[419341](66536 call ! call_tmp[617341]))
    unknown call_tmp[617346] "expr temp" "maybe param" "maybe type" "temp"
    (617349 'move' call_tmp[617346](419354 call _cond_invalid tmp[419341]))
    if call_tmp[617346]
    {
      (419357 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555888] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555889] "maybe param" "temp"
    unknown call_tmp[617351] "expr temp" "maybe param" "maybe type" "temp"
    (617354 'move' call_tmp[617351](419342 call isTrue tmp[419341]))
    (555894 'move' tmp[555889](555892 call _cond_test call_tmp[617351]))
    if tmp[555889]
    {
      unknown tmp[555896] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617358] "expr temp" "maybe param" "maybe type" "temp"
      (617361 'move' call_tmp[617358](66540 call(374004 call (partial) hasLowBound _mt[243] this[66530])))
      (555898 'move' tmp[555896](419345 call isTrue call_tmp[617358]))
      (555903 'move' tmp[555888](555900 '_paramFoldLogical' tmp[555889] tmp[555896]))
    }
    {
      (555908 'move' tmp[555888](555905 '_paramFoldLogical' tmp[555889] 0))
    }
    (748285 call chpl_statementLevelSymbol tmp[555888])
  }
  function range[64319](?).alignment[66553](arg _mt[66558]:_MT[238], arg this[66555]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509632] "RVV" "temp"
    unknown call_tmp[617365] "expr temp" "maybe param" "maybe type" "temp"
    (617368 'move' call_tmp[617365](66563 call(374012 call (partial) chpl_intToIdx _mt[243] this[66555]) 0))
    (509637 'move' ret[509632](509636 'deref' call_tmp[617365]))
    (509634 return ret[509632])
  }
  function range[64319](?).aligned[66572](arg _mt[66577]:_MT[238], arg this[66574]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509641] "RVV" "temp"
    unknown call_tmp[617372] "expr temp" "maybe param" "maybe type" "temp"
    (617375 'move' call_tmp[617372](374022 call _aligned _mt[243] this[66574]))
    (509646 'move' ret[509641](509645 'deref' call_tmp[617372]))
    (509643 return ret[509641])
  }
  where {
    (374017 call stridable _mt[243] this[66574])
  }
  function range[64319](?).aligned[66590](arg _mt[66595]:_MT[238], arg this[66592]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509650] "RVV" "param" "temp"
    (509655 'move' ret[509650](509654 'deref' 1))
    (509652 return ret[509650])
  }
  where {
    unknown tmp[419362] "maybe param" "temp"
    unknown call_tmp[617381] "expr temp" "maybe param" "maybe type" "temp"
    (617384 'move' call_tmp[617381](374027 call stridable _mt[243] this[66592]))
    (419373 'move' tmp[419362](66598 call ! call_tmp[617381]))
    unknown call_tmp[617386] "expr temp" "maybe param" "maybe type" "temp"
    (617389 'move' call_tmp[617386](419375 call _cond_invalid tmp[419362]))
    if call_tmp[617386]
    {
      (419378 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555942] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555943] "maybe param" "temp"
    unknown call_tmp[617391] "expr temp" "maybe param" "maybe type" "temp"
    (617394 'move' call_tmp[617391](419363 call isTrue tmp[419362]))
    (555948 'move' tmp[555943](555946 call _cond_test call_tmp[617391]))
    if tmp[555943]
    {
      unknown tmp[419383] "maybe param" "temp"
      unknown call_tmp[617398] "expr temp" "maybe param" "maybe type" "temp"
      (617401 'move' call_tmp[617398](374032 call boundedType _mt[243] this[66592]))
      (419394 'move' tmp[419383](66605 call == call_tmp[617398] bounded[64208]))
      unknown call_tmp[617403] "expr temp" "maybe param" "maybe type" "temp"
      (617406 'move' call_tmp[617403](419396 call _cond_invalid tmp[419383]))
      if call_tmp[617403]
      {
        (419399 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[555915] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555916] "maybe param" "temp"
      unknown call_tmp[617408] "expr temp" "maybe param" "maybe type" "temp"
      (617411 'move' call_tmp[617408](419384 call isTrue tmp[419383]))
      (555921 'move' tmp[555916](555919 call _cond_test call_tmp[617408]))
      if tmp[555916]
      {
        (555926 'move' tmp[555915](555923 '_paramFoldLogical' tmp[555916] 1))
      }
      {
        unknown tmp[555928] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617415] "expr temp" "maybe param" "maybe type" "temp"
        (617418 'move' call_tmp[617415](374037 call boundedType _mt[243] this[66592]))
        unknown call_tmp[617420] "expr temp" "maybe param" "maybe type" "temp"
        (617423 'move' call_tmp[617420](66612 call == call_tmp[617415] boundedLow[64210]))
        (555930 'move' tmp[555928](419388 call isTrue call_tmp[617420]))
        (555935 'move' tmp[555915](555932 '_paramFoldLogical' tmp[555916] tmp[555928]))
      }
      unknown tmp[555950] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555952 'move' tmp[555950](419366 call isTrue tmp[555915]))
      (555957 'move' tmp[555942](555954 '_paramFoldLogical' tmp[555943] tmp[555950]))
    }
    {
      (555962 'move' tmp[555942](555959 '_paramFoldLogical' tmp[555943] 0))
    }
    (748287 call chpl_statementLevelSymbol tmp[555942])
  }
  function range[64319](?).aligned[66628](arg _mt[66633]:_MT[238], arg this[66630]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509659] "RVV" "param" "temp"
    (509664 'move' ret[509659](509663 'deref' 0))
    (509661 return ret[509659])
  }
  function range[64319](?).first[66644](arg _mt[66649]:_MT[238], arg this[66646]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509668] "RVV" "temp"
    unknown call_tmp[617429] "expr temp" "maybe param" "maybe type" "temp"
    (617432 'move' call_tmp[617429](66655 call firstAsInt _mt[243] this[66646]))
    unknown call_tmp[617434] "expr temp" "maybe param" "maybe type" "temp"
    (617437 'move' call_tmp[617434](66659 call(374041 call (partial) chpl_intToIdx _mt[243] this[66646]) call_tmp[617429]))
    (509673 'move' ret[509668](509672 'deref' call_tmp[617434]))
    (509670 return ret[509668])
  }
  function range[64319](?).firstAsInt[66668](arg _mt[66673]:_MT[238], arg this[66670]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509677] "RVV" "temp"
    unknown call_tmp[617441] "expr temp" "maybe param" "maybe type" "temp"
    (617444 'move' call_tmp[617441](374046 call stridable _mt[243] this[66670]))
    unknown call_tmp[617446] "expr temp" "maybe param" "maybe type" "temp"
    (617449 'move' call_tmp[617446](66676 call ! call_tmp[617441]))
    unknown call_tmp[617451] "expr temp" "maybe param" "maybe type" "temp"
    (617454 'move' call_tmp[617451](66702 call _cond_test call_tmp[617446]))
    if call_tmp[617451]
    {
      unknown call_tmp[617458] "expr temp" "maybe param" "maybe type" "temp"
      (617461 'move' call_tmp[617458](374051 call _low _mt[243] this[66670]))
      (509682 'move' ret[509677](509681 'deref' call_tmp[617458]))
      gotoReturn _end_firstAsInt[509675] _end_firstAsInt[509675]
    }
    {
      unknown tmp[555969] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555970] "maybe param" "temp"
      unknown call_tmp[617465] "expr temp" "maybe param" "maybe type" "temp"
      (617468 'move' call_tmp[617465](374056 call _stride _mt[243] this[66670]))
      unknown call_tmp[617470] "expr temp" "maybe param" "maybe type" "temp"
      (617473 'move' call_tmp[617470](66683 call > call_tmp[617465] 0))
      (555975 'move' tmp[555970](555973 call _cond_test call_tmp[617470]))
      if tmp[555970]
      {
        unknown tmp[555977] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555979 'move' tmp[555977](66688 call alignedLowAsInt _mt[243] this[66670]))
        (555984 'move' tmp[555969](555981 '_paramFoldLogical' tmp[555970] tmp[555977]))
      }
      {
        unknown tmp[555986] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555988 'move' tmp[555986](66694 call alignedHighAsInt _mt[243] this[66670]))
        (555993 'move' tmp[555969](555990 '_paramFoldLogical' tmp[555970] tmp[555986]))
      }
      (509687 'move' ret[509677](509686 'deref' tmp[555969]))
      gotoReturn _end_firstAsInt[509675] _end_firstAsInt[509675]
    }
    label _end_firstAsInt[509675]
    (509679 return ret[509677])
  }
  function range[64319](?).last[66714](arg _mt[66719]:_MT[238], arg this[66716]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509693] "RVV" "temp"
    unknown call_tmp[617483] "expr temp" "maybe param" "maybe type" "temp"
    (617486 'move' call_tmp[617483](66725 call lastAsInt _mt[243] this[66716]))
    unknown call_tmp[617488] "expr temp" "maybe param" "maybe type" "temp"
    (617491 'move' call_tmp[617488](66729 call(374060 call (partial) chpl_intToIdx _mt[243] this[66716]) call_tmp[617483]))
    (509698 'move' ret[509693](509697 'deref' call_tmp[617488]))
    (509695 return ret[509693])
  }
  function range[64319](?).lastAsInt[66738](arg _mt[66743]:_MT[238], arg this[66740]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509702] "RVV" "temp"
    unknown call_tmp[617495] "expr temp" "maybe param" "maybe type" "temp"
    (617498 'move' call_tmp[617495](374065 call stridable _mt[243] this[66740]))
    unknown call_tmp[617500] "expr temp" "maybe param" "maybe type" "temp"
    (617503 'move' call_tmp[617500](66746 call ! call_tmp[617495]))
    unknown call_tmp[617505] "expr temp" "maybe param" "maybe type" "temp"
    (617508 'move' call_tmp[617505](66768 call _cond_test call_tmp[617500]))
    if call_tmp[617505]
    {
      unknown call_tmp[617512] "expr temp" "maybe param" "maybe type" "temp"
      (617515 'move' call_tmp[617512](374070 call _high _mt[243] this[66740]))
      (509707 'move' ret[509702](509706 'deref' call_tmp[617512]))
      gotoReturn _end_lastAsInt[509700] _end_lastAsInt[509700]
    }
    {
      unknown tmp[556000] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556001] "maybe param" "temp"
      unknown call_tmp[617519] "expr temp" "maybe param" "maybe type" "temp"
      (617522 'move' call_tmp[617519](374074 call stride _mt[243] this[66740]))
      unknown call_tmp[617524] "expr temp" "maybe param" "maybe type" "temp"
      (617527 'move' call_tmp[617524](66753 call > call_tmp[617519] 0))
      (556006 'move' tmp[556001](556004 call _cond_test call_tmp[617524]))
      if tmp[556001]
      {
        unknown tmp[556008] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556010 'move' tmp[556008](66756 call alignedHighAsInt _mt[243] this[66740]))
        (556015 'move' tmp[556000](556012 '_paramFoldLogical' tmp[556001] tmp[556008]))
      }
      {
        unknown tmp[556017] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556019 'move' tmp[556017](66760 call alignedLowAsInt _mt[243] this[66740]))
        (556024 'move' tmp[556000](556021 '_paramFoldLogical' tmp[556001] tmp[556017]))
      }
      (509712 'move' ret[509702](509711 'deref' tmp[556000]))
      gotoReturn _end_lastAsInt[509700] _end_lastAsInt[509700]
    }
    label _end_lastAsInt[509700]
    (509704 return ret[509702])
  }
  function range[64319](?).low[66780](arg _mt[66785]:_MT[238], arg this[66782]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509718] "RVV" "temp"
    unknown call_tmp[617537] "expr temp" "maybe param" "maybe type" "temp"
    (617540 'move' call_tmp[617537](374083 call _low _mt[243] this[66782]))
    unknown call_tmp[617542] "expr temp" "maybe param" "maybe type" "temp"
    (617545 'move' call_tmp[617542](66790 call(374078 call (partial) chpl_intToIdx _mt[243] this[66782]) call_tmp[617537]))
    (509723 'move' ret[509718](509722 'deref' call_tmp[617542]))
    (509720 return ret[509718])
  }
  function range[64319](?).high[66799](arg _mt[66804]:_MT[238], arg this[66801]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509727] "RVV" "temp"
    unknown call_tmp[617551] "expr temp" "maybe param" "maybe type" "temp"
    (617554 'move' call_tmp[617551](374092 call _high _mt[243] this[66801]))
    unknown call_tmp[617556] "expr temp" "maybe param" "maybe type" "temp"
    (617559 'move' call_tmp[617556](66809 call(374087 call (partial) chpl_intToIdx _mt[243] this[66801]) call_tmp[617551]))
    (509732 'move' ret[509727](509731 'deref' call_tmp[617556]))
    (509729 return ret[509727])
  }
  function range[64319](?).alignedLow[66818](arg _mt[66823]:_MT[238], arg this[66820]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509736] "RVV" "temp"
    unknown call_tmp[617565] "expr temp" "maybe param" "maybe type" "temp"
    (617568 'move' call_tmp[617565](66828 call alignedLowAsInt _mt[243] this[66820]))
    unknown call_tmp[617570] "expr temp" "maybe param" "maybe type" "temp"
    (617573 'move' call_tmp[617570](66832 call(374101 call (partial) chpl_intToIdx _mt[243] this[66820]) call_tmp[617565]))
    unknown call_tmp[617577] "expr temp" "maybe param" "maybe type" "temp"
    (617580 'move' call_tmp[617577](509741 call idxType _mt[243] this[66820]))
    (509745 'move' ret[509736](509744 'coerce' call_tmp[617570] call_tmp[617577]))
    (509738 return ret[509736])
  }
  { scopeless type
    (374097 call idxType _mt[243] this[66820])
  }
  function range[64319](?).alignedLowAsInt[66842](arg _mt[66847]:_MT[238], arg this[66844]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509749] "RVV" "temp"
    unknown call_tmp[617586] "expr temp" "maybe param" "maybe type" "temp"
    (617589 'move' call_tmp[617586](374106 call stridable _mt[243] this[66844]))
    unknown call_tmp[617591] "expr temp" "maybe param" "maybe type" "temp"
    (617594 'move' call_tmp[617591](66850 call ! call_tmp[617586]))
    unknown call_tmp[617596] "expr temp" "maybe param" "maybe type" "temp"
    (617599 'move' call_tmp[617596](66866 call _cond_test call_tmp[617591]))
    if call_tmp[617596]
    {
      unknown call_tmp[617603] "expr temp" "maybe param" "maybe type" "temp"
      (617606 'move' call_tmp[617603](374111 call _low _mt[243] this[66844]))
      (509754 'move' ret[509749](509753 'deref' call_tmp[617603]))
      gotoReturn _end_alignedLowAsInt[509747] _end_alignedLowAsInt[509747]
    }
    {
      unknown call_tmp[617610] "expr temp" "maybe param" "maybe type" "temp"
      (617613 'move' call_tmp[617610](374116 call _low _mt[243] this[66844]))
      unknown call_tmp[617617] "expr temp" "maybe param" "maybe type" "temp"
      (617620 'move' call_tmp[617617](374121 call _alignment _mt[243] this[66844]))
      unknown call_tmp[617624] "expr temp" "maybe param" "maybe type" "temp"
      (617627 'move' call_tmp[617624](374126 call _low _mt[243] this[66844]))
      unknown call_tmp[617631] "expr temp" "maybe param" "maybe type" "temp"
      (617634 'move' call_tmp[617631](374130 call stride _mt[243] this[66844]))
      unknown call_tmp[617636] "expr temp" "maybe param" "maybe type" "temp"
      (617639 'move' call_tmp[617636](66861 call chpl__diffMod call_tmp[617617] call_tmp[617624] call_tmp[617631]))
      unknown call_tmp[617641] "expr temp" "maybe param" "maybe type" "temp"
      (617644 'move' call_tmp[617641](66862 call + call_tmp[617610] call_tmp[617636]))
      (509759 'move' ret[509749](509758 'deref' call_tmp[617641]))
      gotoReturn _end_alignedLowAsInt[509747] _end_alignedLowAsInt[509747]
    }
    label _end_alignedLowAsInt[509747]
    (509751 return ret[509749])
  }
  function range[64319](?).alignedHigh[66878](arg _mt[66883]:_MT[238], arg this[66880]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509765] "RVV" "temp"
    unknown call_tmp[617650] "expr temp" "maybe param" "maybe type" "temp"
    (617653 'move' call_tmp[617650](66888 call alignedHighAsInt _mt[243] this[66880]))
    unknown call_tmp[617655] "expr temp" "maybe param" "maybe type" "temp"
    (617658 'move' call_tmp[617655](66892 call(374139 call (partial) chpl_intToIdx _mt[243] this[66880]) call_tmp[617650]))
    unknown call_tmp[617662] "expr temp" "maybe param" "maybe type" "temp"
    (617665 'move' call_tmp[617662](509770 call idxType _mt[243] this[66880]))
    (509774 'move' ret[509765](509773 'coerce' call_tmp[617655] call_tmp[617662]))
    (509767 return ret[509765])
  }
  { scopeless type
    (374135 call idxType _mt[243] this[66880])
  }
  function range[64319](?).alignedHighAsInt[66902](arg _mt[66907]:_MT[238], arg this[66904]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509778] "RVV" "temp"
    unknown call_tmp[617671] "expr temp" "maybe param" "maybe type" "temp"
    (617674 'move' call_tmp[617671](374144 call stridable _mt[243] this[66904]))
    unknown call_tmp[617676] "expr temp" "maybe param" "maybe type" "temp"
    (617679 'move' call_tmp[617676](66910 call ! call_tmp[617671]))
    unknown call_tmp[617681] "expr temp" "maybe param" "maybe type" "temp"
    (617684 'move' call_tmp[617681](66926 call _cond_test call_tmp[617676]))
    if call_tmp[617681]
    {
      unknown call_tmp[617688] "expr temp" "maybe param" "maybe type" "temp"
      (617691 'move' call_tmp[617688](374149 call _high _mt[243] this[66904]))
      (509783 'move' ret[509778](509782 'deref' call_tmp[617688]))
      gotoReturn _end_alignedHighAsInt[509776] _end_alignedHighAsInt[509776]
    }
    {
      unknown call_tmp[617695] "expr temp" "maybe param" "maybe type" "temp"
      (617698 'move' call_tmp[617695](374154 call _high _mt[243] this[66904]))
      unknown call_tmp[617702] "expr temp" "maybe param" "maybe type" "temp"
      (617705 'move' call_tmp[617702](374159 call _high _mt[243] this[66904]))
      unknown call_tmp[617709] "expr temp" "maybe param" "maybe type" "temp"
      (617712 'move' call_tmp[617709](374164 call _alignment _mt[243] this[66904]))
      unknown call_tmp[617716] "expr temp" "maybe param" "maybe type" "temp"
      (617719 'move' call_tmp[617716](374168 call stride _mt[243] this[66904]))
      unknown call_tmp[617721] "expr temp" "maybe param" "maybe type" "temp"
      (617724 'move' call_tmp[617721](66921 call chpl__diffMod call_tmp[617702] call_tmp[617709] call_tmp[617716]))
      unknown call_tmp[617726] "expr temp" "maybe param" "maybe type" "temp"
      (617729 'move' call_tmp[617726](66922 call - call_tmp[617695] call_tmp[617721]))
      (509788 'move' ret[509778](509787 'deref' call_tmp[617726]))
      gotoReturn _end_alignedHighAsInt[509776] _end_alignedHighAsInt[509776]
    }
    label _end_alignedHighAsInt[509776]
    (509780 return ret[509778])
  }
  function range[64319](?).isEmpty[66938](arg _mt[66943]:_MT[238], arg this[66940]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509794] "RVV" "temp"
    unknown tmp[419425] "maybe param" "temp"
    (419436 'move' tmp[419425] 1)
    unknown call_tmp[617731] "expr temp" "maybe param" "maybe type" "temp"
    (617734 'move' call_tmp[617731](419438 call _cond_invalid tmp[419425]))
    if call_tmp[617731]
    {
      (419441 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556031] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556032] "maybe param" "temp"
    unknown call_tmp[617736] "expr temp" "maybe param" "maybe type" "temp"
    (617739 'move' call_tmp[617736](419426 call isTrue tmp[419425]))
    (556037 'move' tmp[556032](556035 call _cond_test call_tmp[617736]))
    if tmp[556032]
    {
      unknown tmp[556039] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617743] "expr temp" "maybe param" "maybe type" "temp"
      (617746 'move' call_tmp[617743](66948 call(374173 call (partial) isAmbiguous _mt[243] this[66940])))
      (556041 'move' tmp[556039](419429 call isTrue call_tmp[617743]))
      (556046 'move' tmp[556031](556043 '_paramFoldLogical' tmp[556032] tmp[556039]))
    }
    {
      (556051 'move' tmp[556031](556048 '_paramFoldLogical' tmp[556032] 0))
    }
    unknown call_tmp[617748] "expr temp" "maybe param" "maybe type" "temp"
    (617751 'move' call_tmp[617748](66993 call _cond_test tmp[556031]))
    if call_tmp[617748]
    {
      (66973 call boundsCheckHalt module=[255] HaltWrappers[210018] "isEmpty() is invoked on an ambiguously-aligned range")
      (357592 'referenced modules list' HaltWrappers[210018])
    }
    {
      unknown tmp[419404] "maybe param" "temp"
      (419415 'move' tmp[419404](66978 call isBoundedRange this[66940]))
      unknown call_tmp[617753] "expr temp" "maybe param" "maybe type" "temp"
      (617756 'move' call_tmp[617753](419417 call _cond_invalid tmp[419404]))
      if call_tmp[617753]
      {
        (419420 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556058] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556059] "maybe param" "temp"
      unknown call_tmp[617758] "expr temp" "maybe param" "maybe type" "temp"
      (617761 'move' call_tmp[617758](419405 call isTrue tmp[419404]))
      (556064 'move' tmp[556059](556062 call _cond_test call_tmp[617758]))
      if tmp[556059]
      {
        unknown tmp[556066] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617765] "expr temp" "maybe param" "maybe type" "temp"
        (617768 'move' call_tmp[617765](66980 call alignedLow _mt[243] this[66940]))
        unknown call_tmp[617772] "expr temp" "maybe param" "maybe type" "temp"
        (617775 'move' call_tmp[617772](66984 call alignedHigh _mt[243] this[66940]))
        unknown call_tmp[617777] "expr temp" "maybe param" "maybe type" "temp"
        (617780 'move' call_tmp[617777](66987 call > call_tmp[617765] call_tmp[617772]))
        (556068 'move' tmp[556066](419408 call isTrue call_tmp[617777]))
        (556073 'move' tmp[556058](556070 '_paramFoldLogical' tmp[556059] tmp[556066]))
      }
      {
        (556078 'move' tmp[556058](556075 '_paramFoldLogical' tmp[556059] 0))
      }
      (509799 'move' ret[509794](509798 'deref' tmp[556058]))
      gotoReturn _end_isEmpty[509792] _end_isEmpty[509792]
    }
    label _end_isEmpty[509792]
    (509796 return ret[509794])
  }
  function range[64319](?).length[67005](arg _mt[67010]:_MT[238], arg this[67007]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509805] "RVV" "temp"
    unknown call_tmp[617782] "expr temp" "maybe param" "maybe type" "temp"
    (617785 'move' call_tmp[617782](67048 call + "'range.length' is deprecated - " "please use 'range.size' instead"))
    (67051 call compilerWarning call_tmp[617782])
    (475406 'end of statement')
    unknown call_tmp[617789] "expr temp" "maybe param" "maybe type" "temp"
    (617792 'move' call_tmp[617789](67055 call size _mt[243] this[67007]))
    unknown call_tmp[617796] "expr temp" "maybe param" "maybe type" "temp"
    (617799 'move' call_tmp[617796](509810 call intIdxType _mt[243] this[67007]))
    (509814 'move' ret[509805](509813 'coerce' call_tmp[617789] call_tmp[617796]))
    (509807 return ret[509805])
  }
  { scopeless type
    (374178 call intIdxType _mt[243] this[67007])
  }
  function range[64319](?).size[67066](arg _mt[67071]:_MT[238], arg this[67068]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[509818] "RVV" "temp"
    unknown call_tmp[617803] "expr temp" "maybe param" "maybe type" "temp"
    (617806 'move' call_tmp[617803](67077 call isBoundedRange this[67068]))
    unknown call_tmp[617808] "expr temp" "maybe param" "maybe type" "temp"
    (617811 'move' call_tmp[617808](67078 call ! call_tmp[617803]))
    unknown call_tmp[617813] "expr temp" "maybe param" "maybe type" "temp"
    (617816 'move' call_tmp[617813](67101 call _cond_test call_tmp[617808]))
    if call_tmp[617813]
    {
      (67099 call compilerError "'size' is not defined on unbounded ranges")
    }
    unknown call_tmp[617820] "maybe param" "maybe type" "temp"
    (617823 'move' call_tmp[617820](67108 call alignedHighAsInt _mt[243] this[67068]))
    const ah[67111] "dead at end of block" "const" "insert auto destroy"
    (541077 'init var' ah[67111] call_tmp[617820])
    unknown call_tmp[617827] "maybe param" "maybe type" "temp"
    (617830 'move' call_tmp[617827](67115 call alignedLowAsInt _mt[243] this[67068]))
    const al[67118] "dead at end of block" "const" "insert auto destroy"
    (541079 'init var' al[67118] call_tmp[617827])
    (67121 'end of statement')
    unknown call_tmp[617832] "expr temp" "maybe param" "maybe type" "temp"
    (617835 'move' call_tmp[617832](67124 call > al[67118] ah[67111]))
    unknown call_tmp[617837] "expr temp" "maybe param" "maybe type" "temp"
    (617840 'move' call_tmp[617837](67132 call _cond_test call_tmp[617832]))
    if call_tmp[617837]
    {
      unknown call_tmp[617844] "expr temp" "maybe param" "maybe type" "temp"
      (617847 'move' call_tmp[617844](374189 call intIdxType _mt[243] this[67068]))
      unknown call_tmp[617849] "expr temp" "maybe param" "maybe type" "temp"
      (617852 'move' call_tmp[617849](67128 call _cast call_tmp[617844] 0))
      unknown call_tmp[617856] "expr temp" "maybe param" "maybe type" "temp"
      (617859 'move' call_tmp[617856](509823 call intIdxType _mt[243] this[67068]))
      (509827 'move' ret[509818](509826 'coerce' call_tmp[617849] call_tmp[617856]))
      gotoReturn _end_size[509816] _end_size[509816]
    }
    unknown call_tmp[617863] "expr temp" "maybe param" "maybe type" "temp"
    (617866 'move' call_tmp[617863](374193 call intIdxType _mt[243] this[67068]))
    unknown call_tmp[617870] "expr temp" "maybe param" "maybe type" "temp"
    (617873 'move' call_tmp[617870](67139 call stride _mt[243] this[67068]))
    unknown call_tmp[617875] "expr temp" "maybe param" "maybe type" "temp"
    (617878 'move' call_tmp[617875](67143 call abs call_tmp[617870]))
    unknown call_tmp[617880] "maybe param" "maybe type" "temp"
    (617883 'move' call_tmp[617880](67145 call _cast call_tmp[617863] call_tmp[617875]))
    const s[67147] "dead at end of block" "const" "insert auto destroy"
    (541081 'init var' s[67147] call_tmp[617880])
    (67150 'end of statement')
    unknown call_tmp[617885] "expr temp" "maybe param" "maybe type" "temp"
    (617888 'move' call_tmp[617885](67153 call - ah[67111] al[67118]))
    unknown call_tmp[617890] "expr temp" "maybe param" "maybe type" "temp"
    (617893 'move' call_tmp[617890](67156 call / call_tmp[617885] s[67147]))
    unknown call_tmp[617897] "expr temp" "maybe param" "maybe type" "temp"
    (617900 'move' call_tmp[617897](374200 call intIdxType _mt[243] this[67068]))
    unknown call_tmp[617902] "expr temp" "maybe param" "maybe type" "temp"
    (617905 'move' call_tmp[617902](67160 call _cast call_tmp[617897] 1))
    unknown call_tmp[617907] "expr temp" "maybe param" "maybe type" "temp"
    (617910 'move' call_tmp[617907](67162 call + call_tmp[617890] call_tmp[617902]))
    unknown call_tmp[617914] "expr temp" "maybe param" "maybe type" "temp"
    (617917 'move' call_tmp[617914](509832 call intIdxType _mt[243] this[67068]))
    (509836 'move' ret[509818](509835 'coerce' call_tmp[617907] call_tmp[617914]))
    gotoReturn _end_size[509816] _end_size[509816]
    (475410 'end of statement' ah[67111] al[67118] s[67147])
    label _end_size[509816]
    (509820 return ret[509818])
  }
  { scopeless type
    (374182 call intIdxType _mt[243] this[67068])
  }
  function range[64319](?).hasFirst[67172](arg _mt[67177]:_MT[238], arg this[67174]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509842] "RVV" "param" "temp"
    unknown call_tmp[617923] "expr temp" "maybe param" "maybe type" "temp"
    (617926 'move' call_tmp[617923](67191 call(374213 call (partial) hasLowBound _mt[243] this[67174])))
    (509847 'move' ret[509842](509846 'deref' call_tmp[617923]))
    (509844 return ret[509842])
  }
  where {
    unknown tmp[419446] "maybe param" "temp"
    unknown call_tmp[617930] "expr temp" "maybe param" "maybe type" "temp"
    (617933 'move' call_tmp[617930](374205 call stridable _mt[243] this[67174]))
    (419457 'move' tmp[419446](67180 call ! call_tmp[617930]))
    unknown call_tmp[617935] "expr temp" "maybe param" "maybe type" "temp"
    (617938 'move' call_tmp[617935](419459 call _cond_invalid tmp[419446]))
    if call_tmp[617935]
    {
      (419462 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556085] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556086] "maybe param" "temp"
    unknown call_tmp[617940] "expr temp" "maybe param" "maybe type" "temp"
    (617943 'move' call_tmp[617940](419447 call isTrue tmp[419446]))
    (556091 'move' tmp[556086](556089 call _cond_test call_tmp[617940]))
    if tmp[556086]
    {
      unknown tmp[556093] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617947] "expr temp" "maybe param" "maybe type" "temp"
      (617950 'move' call_tmp[617947](67184 call(374209 call (partial) hasHighBound _mt[243] this[67174])))
      unknown call_tmp[617952] "expr temp" "maybe param" "maybe type" "temp"
      (617955 'move' call_tmp[617952](67185 call ! call_tmp[617947]))
      (556095 'move' tmp[556093](419450 call isTrue call_tmp[617952]))
      (556100 'move' tmp[556085](556097 '_paramFoldLogical' tmp[556086] tmp[556093]))
    }
    {
      (556105 'move' tmp[556085](556102 '_paramFoldLogical' tmp[556086] 0))
    }
    (748289 call chpl_statementLevelSymbol tmp[556085])
  }
  function range[64319](?).hasFirst[67201](arg _mt[67206]:_MT[238], arg this[67203]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509851] "RVV" "temp"
    unknown tmp[419467] "maybe param" "temp"
    (419478 'move' tmp[419467](67210 call(374217 call (partial) isAmbiguous _mt[243] this[67203])))
    unknown call_tmp[617959] "expr temp" "maybe param" "maybe type" "temp"
    (617962 'move' call_tmp[617959](419480 call _cond_invalid tmp[419467]))
    if call_tmp[617959]
    {
      (419483 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556112] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556113] "maybe param" "temp"
    unknown call_tmp[617964] "expr temp" "maybe param" "maybe type" "temp"
    (617967 'move' call_tmp[617964](419468 call isTrue tmp[419467]))
    (556118 'move' tmp[556113](556116 call _cond_test call_tmp[617964]))
    if tmp[556113]
    {
      (556123 'move' tmp[556112](556120 '_paramFoldLogical' tmp[556113] 1))
    }
    {
      unknown tmp[556125] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617971] "expr temp" "maybe param" "maybe type" "temp"
      (617974 'move' call_tmp[617971](67213 call(374221 call (partial) isEmpty _mt[243] this[67203])))
      (556127 'move' tmp[556125](419472 call isTrue call_tmp[617971]))
      (556132 'move' tmp[556112](556129 '_paramFoldLogical' tmp[556113] tmp[556125]))
    }
    unknown tmp[556170] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556171] "maybe param" "temp"
    (556176 'move' tmp[556171](556174 call _cond_test tmp[556112]))
    if tmp[556171]
    {
      (556181 'move' tmp[556170](556178 '_paramFoldLogical' tmp[556171] 0))
    }
    {
      unknown tmp[556139] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556140] "maybe param" "temp"
      unknown call_tmp[617978] "expr temp" "maybe param" "maybe type" "temp"
      (617981 'move' call_tmp[617978](374225 call stride _mt[243] this[67203]))
      unknown call_tmp[617983] "expr temp" "maybe param" "maybe type" "temp"
      (617986 'move' call_tmp[617983](67219 call > call_tmp[617978] 0))
      (556145 'move' tmp[556140](556143 call _cond_test call_tmp[617983]))
      if tmp[556140]
      {
        unknown tmp[556147] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556149 'move' tmp[556147](67223 call(374229 call (partial) hasLowBound _mt[243] this[67203])))
        (556154 'move' tmp[556139](556151 '_paramFoldLogical' tmp[556140] tmp[556147]))
      }
      {
        unknown tmp[556156] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556158 'move' tmp[556156](67226 call(374233 call (partial) hasHighBound _mt[243] this[67203])))
        (556163 'move' tmp[556139](556160 '_paramFoldLogical' tmp[556140] tmp[556156]))
      }
      (556186 'move' tmp[556170](556183 '_paramFoldLogical' tmp[556171] tmp[556139]))
    }
    (509856 'move' ret[509851](509855 'deref' tmp[556170]))
    (509853 return ret[509851])
  }
  function range[64319](?).hasLast[67241](arg _mt[67246]:_MT[238], arg this[67243]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509860] "RVV" "param" "temp"
    unknown call_tmp[617994] "expr temp" "maybe param" "maybe type" "temp"
    (617997 'move' call_tmp[617994](67260 call(374246 call (partial) hasHighBound _mt[243] this[67243])))
    (509865 'move' ret[509860](509864 'deref' call_tmp[617994]))
    (509862 return ret[509860])
  }
  where {
    unknown tmp[419488] "maybe param" "temp"
    unknown call_tmp[618001] "expr temp" "maybe param" "maybe type" "temp"
    (618004 'move' call_tmp[618001](374238 call stridable _mt[243] this[67243]))
    (419499 'move' tmp[419488](67249 call ! call_tmp[618001]))
    unknown call_tmp[618006] "expr temp" "maybe param" "maybe type" "temp"
    (618009 'move' call_tmp[618006](419501 call _cond_invalid tmp[419488]))
    if call_tmp[618006]
    {
      (419504 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556193] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556194] "maybe param" "temp"
    unknown call_tmp[618011] "expr temp" "maybe param" "maybe type" "temp"
    (618014 'move' call_tmp[618011](419489 call isTrue tmp[419488]))
    (556199 'move' tmp[556194](556197 call _cond_test call_tmp[618011]))
    if tmp[556194]
    {
      unknown tmp[556201] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618018] "expr temp" "maybe param" "maybe type" "temp"
      (618021 'move' call_tmp[618018](67253 call(374242 call (partial) hasLowBound _mt[243] this[67243])))
      unknown call_tmp[618023] "expr temp" "maybe param" "maybe type" "temp"
      (618026 'move' call_tmp[618023](67254 call ! call_tmp[618018]))
      (556203 'move' tmp[556201](419492 call isTrue call_tmp[618023]))
      (556208 'move' tmp[556193](556205 '_paramFoldLogical' tmp[556194] tmp[556201]))
    }
    {
      (556213 'move' tmp[556193](556210 '_paramFoldLogical' tmp[556194] 0))
    }
    (748291 call chpl_statementLevelSymbol tmp[556193])
  }
  function range[64319](?).hasLast[67270](arg _mt[67275]:_MT[238], arg this[67272]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509869] "RVV" "temp"
    unknown tmp[419509] "maybe param" "temp"
    (419520 'move' tmp[419509](67279 call(374250 call (partial) isAmbiguous _mt[243] this[67272])))
    unknown call_tmp[618030] "expr temp" "maybe param" "maybe type" "temp"
    (618033 'move' call_tmp[618030](419522 call _cond_invalid tmp[419509]))
    if call_tmp[618030]
    {
      (419525 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556220] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556221] "maybe param" "temp"
    unknown call_tmp[618035] "expr temp" "maybe param" "maybe type" "temp"
    (618038 'move' call_tmp[618035](419510 call isTrue tmp[419509]))
    (556226 'move' tmp[556221](556224 call _cond_test call_tmp[618035]))
    if tmp[556221]
    {
      (556231 'move' tmp[556220](556228 '_paramFoldLogical' tmp[556221] 1))
    }
    {
      unknown tmp[556233] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618042] "expr temp" "maybe param" "maybe type" "temp"
      (618045 'move' call_tmp[618042](67282 call(374254 call (partial) isEmpty _mt[243] this[67272])))
      (556235 'move' tmp[556233](419514 call isTrue call_tmp[618042]))
      (556240 'move' tmp[556220](556237 '_paramFoldLogical' tmp[556221] tmp[556233]))
    }
    unknown tmp[556278] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556279] "maybe param" "temp"
    (556284 'move' tmp[556279](556282 call _cond_test tmp[556220]))
    if tmp[556279]
    {
      (556289 'move' tmp[556278](556286 '_paramFoldLogical' tmp[556279] 0))
    }
    {
      unknown tmp[556247] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556248] "maybe param" "temp"
      unknown call_tmp[618049] "expr temp" "maybe param" "maybe type" "temp"
      (618052 'move' call_tmp[618049](374258 call stride _mt[243] this[67272]))
      unknown call_tmp[618054] "expr temp" "maybe param" "maybe type" "temp"
      (618057 'move' call_tmp[618054](67288 call > call_tmp[618049] 0))
      (556253 'move' tmp[556248](556251 call _cond_test call_tmp[618054]))
      if tmp[556248]
      {
        unknown tmp[556255] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556257 'move' tmp[556255](67292 call(374262 call (partial) hasHighBound _mt[243] this[67272])))
        (556262 'move' tmp[556247](556259 '_paramFoldLogical' tmp[556248] tmp[556255]))
      }
      {
        unknown tmp[556264] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556266 'move' tmp[556264](67295 call(374266 call (partial) hasLowBound _mt[243] this[67272])))
        (556271 'move' tmp[556247](556268 '_paramFoldLogical' tmp[556248] tmp[556264]))
      }
      (556294 'move' tmp[556278](556291 '_paramFoldLogical' tmp[556279] tmp[556247]))
    }
    (509874 'move' ret[509869](509873 'deref' tmp[556278]))
    (509871 return ret[509869])
  }
  function range[64319](?).isNaturallyAligned[67310](arg _mt[67315]:_MT[238], arg this[67312]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method"
  {
    unknown ret[509878] "RVV" "temp"
    unknown call_tmp[618065] "expr temp" "maybe param" "maybe type" "temp"
    (618068 'move' call_tmp[618065](374275 call stride _mt[243] this[67312]))
    unknown call_tmp[618070] "expr temp" "maybe param" "maybe type" "temp"
    (618073 'move' call_tmp[618070](67332 call > call_tmp[618065] 0))
    unknown call_tmp[618075] "expr temp" "maybe param" "maybe type" "temp"
    (618078 'move' call_tmp[618075](67343 call _cond_test call_tmp[618070]))
    if call_tmp[618075]
    {
      unknown call_tmp[618082] "expr temp" "maybe param" "maybe type" "temp"
      (618085 'move' call_tmp[618082](67335 call alignedLowAsInt _mt[243] this[67312]))
      unknown call_tmp[618089] "expr temp" "maybe param" "maybe type" "temp"
      (618092 'move' call_tmp[618089](374280 call _low _mt[243] this[67312]))
      unknown call_tmp[618094] "expr temp" "maybe param" "maybe type" "temp"
      (618097 'move' call_tmp[618094](67339 call == call_tmp[618082] call_tmp[618089]))
      (509883 'move' ret[509878](509882 'deref' call_tmp[618094]))
      gotoReturn _end_isNaturallyAligned[509876] _end_isNaturallyAligned[509876]
    }
    unknown call_tmp[618101] "expr temp" "maybe param" "maybe type" "temp"
    (618104 'move' call_tmp[618101](374284 call stride _mt[243] this[67312]))
    unknown call_tmp[618106] "expr temp" "maybe param" "maybe type" "temp"
    (618109 'move' call_tmp[618106](67351 call < call_tmp[618101] 0))
    unknown call_tmp[618111] "expr temp" "maybe param" "maybe type" "temp"
    (618114 'move' call_tmp[618111](67362 call _cond_test call_tmp[618106]))
    if call_tmp[618111]
    {
      unknown call_tmp[618118] "expr temp" "maybe param" "maybe type" "temp"
      (618121 'move' call_tmp[618118](67354 call alignedHighAsInt _mt[243] this[67312]))
      unknown call_tmp[618125] "expr temp" "maybe param" "maybe type" "temp"
      (618128 'move' call_tmp[618125](374289 call _high _mt[243] this[67312]))
      unknown call_tmp[618130] "expr temp" "maybe param" "maybe type" "temp"
      (618133 'move' call_tmp[618130](67358 call == call_tmp[618118] call_tmp[618125]))
      (509888 'move' ret[509878](509887 'deref' call_tmp[618130]))
      gotoReturn _end_isNaturallyAligned[509876] _end_isNaturallyAligned[509876]
    }
    (509893 'move' ret[509878](509892 'deref' 0))
    label _end_isNaturallyAligned[509876]
    (509880 return ret[509878])
  }
  where {
    unknown tmp[419530] "maybe param" "temp"
    (419541 'move' tmp[419530](374271 call stridable _mt[243] this[67312]))
    unknown call_tmp[618137] "expr temp" "maybe param" "maybe type" "temp"
    (618140 'move' call_tmp[618137](419543 call _cond_invalid tmp[419530]))
    if call_tmp[618137]
    {
      (419546 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556301] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556302] "maybe param" "temp"
    unknown call_tmp[618142] "expr temp" "maybe param" "maybe type" "temp"
    (618145 'move' call_tmp[618142](419531 call isTrue tmp[419530]))
    (556307 'move' tmp[556302](556305 call _cond_test call_tmp[618142]))
    if tmp[556302]
    {
      unknown tmp[556309] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618149] "expr temp" "maybe param" "maybe type" "temp"
      (618152 'move' call_tmp[618149](67319 call boundedType _mt[243] this[67312]))
      unknown call_tmp[618154] "expr temp" "maybe param" "maybe type" "temp"
      (618157 'move' call_tmp[618154](67326 call == call_tmp[618149] bounded[64208]))
      (556311 'move' tmp[556309](419534 call isTrue call_tmp[618154]))
      (556316 'move' tmp[556301](556313 '_paramFoldLogical' tmp[556302] tmp[556309]))
    }
    {
      (556321 'move' tmp[556301](556318 '_paramFoldLogical' tmp[556302] 0))
    }
    (748293 call chpl_statementLevelSymbol tmp[556301])
  }
  function range[64319](?).isNaturallyAligned[67376](arg _mt[67381]:_MT[238], arg this[67378]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509897] "RVV" "param" "temp"
    (509902 'move' ret[509897](509901 'deref' 1))
    (509899 return ret[509897])
  }
  where {
    unknown tmp[419551] "maybe param" "temp"
    unknown call_tmp[618161] "expr temp" "maybe param" "maybe type" "temp"
    (618164 'move' call_tmp[618161](374294 call stridable _mt[243] this[67378]))
    (419562 'move' tmp[419551](67384 call ! call_tmp[618161]))
    unknown call_tmp[618166] "expr temp" "maybe param" "maybe type" "temp"
    (618169 'move' call_tmp[618166](419564 call _cond_invalid tmp[419551]))
    if call_tmp[618166]
    {
      (419567 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556328] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556329] "maybe param" "temp"
    unknown call_tmp[618171] "expr temp" "maybe param" "maybe type" "temp"
    (618174 'move' call_tmp[618171](419552 call isTrue tmp[419551]))
    (556334 'move' tmp[556329](556332 call _cond_test call_tmp[618171]))
    if tmp[556329]
    {
      unknown tmp[556336] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618178] "expr temp" "maybe param" "maybe type" "temp"
      (618181 'move' call_tmp[618178](67387 call boundedType _mt[243] this[67378]))
      unknown call_tmp[618183] "expr temp" "maybe param" "maybe type" "temp"
      (618186 'move' call_tmp[618183](67394 call == call_tmp[618178] bounded[64208]))
      (556338 'move' tmp[556336](419555 call isTrue call_tmp[618183]))
      (556343 'move' tmp[556328](556340 '_paramFoldLogical' tmp[556329] tmp[556336]))
    }
    {
      (556348 'move' tmp[556328](556345 '_paramFoldLogical' tmp[556329] 0))
    }
    (748295 call chpl_statementLevelSymbol tmp[556328])
  }
  function range[64319](?).isNaturallyAligned[67408](arg _mt[67413]:_MT[238], arg this[67410]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509906] "RVV" "temp"
    unknown call_tmp[618190] "expr temp" "maybe param" "maybe type" "temp"
    (618193 'move' call_tmp[618190](67431 call alignedLowAsInt _mt[243] this[67410]))
    unknown call_tmp[618197] "expr temp" "maybe param" "maybe type" "temp"
    (618200 'move' call_tmp[618197](374304 call _low _mt[243] this[67410]))
    unknown call_tmp[618202] "expr temp" "maybe param" "maybe type" "temp"
    (618205 'move' call_tmp[618202](67435 call == call_tmp[618190] call_tmp[618197]))
    (509911 'move' ret[509906](509910 'deref' call_tmp[618202]))
    (509908 return ret[509906])
  }
  where {
    unknown tmp[419572] "maybe param" "temp"
    unknown call_tmp[618209] "expr temp" "maybe param" "maybe type" "temp"
    (618212 'move' call_tmp[618209](374299 call stridable _mt[243] this[67410]))
    (419583 'move' tmp[419572](67416 call ! call_tmp[618209]))
    unknown call_tmp[618214] "expr temp" "maybe param" "maybe type" "temp"
    (618217 'move' call_tmp[618214](419585 call _cond_invalid tmp[419572]))
    if call_tmp[618214]
    {
      (419588 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556355] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556356] "maybe param" "temp"
    unknown call_tmp[618219] "expr temp" "maybe param" "maybe type" "temp"
    (618222 'move' call_tmp[618219](419573 call isTrue tmp[419572]))
    (556361 'move' tmp[556356](556359 call _cond_test call_tmp[618219]))
    if tmp[556356]
    {
      unknown tmp[556363] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618226] "expr temp" "maybe param" "maybe type" "temp"
      (618229 'move' call_tmp[618226](67419 call boundedType _mt[243] this[67410]))
      unknown call_tmp[618231] "expr temp" "maybe param" "maybe type" "temp"
      (618234 'move' call_tmp[618231](67426 call == call_tmp[618226] boundedLow[64210]))
      (556365 'move' tmp[556363](419576 call isTrue call_tmp[618231]))
      (556370 'move' tmp[556355](556367 '_paramFoldLogical' tmp[556356] tmp[556363]))
    }
    {
      (556375 'move' tmp[556355](556372 '_paramFoldLogical' tmp[556356] 0))
    }
    (748297 call chpl_statementLevelSymbol tmp[556355])
  }
  function range[64319](?).isNaturallyAligned[67446](arg _mt[67451]:_MT[238], arg this[67448]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509915] "RVV" "temp"
    unknown tmp[419614] "maybe param" "temp"
    unknown call_tmp[618238] "expr temp" "maybe param" "maybe type" "temp"
    (618241 'move' call_tmp[618238](374313 call stride _mt[243] this[67448]))
    (419625 'move' tmp[419614](67468 call > call_tmp[618238] 0))
    unknown call_tmp[618243] "expr temp" "maybe param" "maybe type" "temp"
    (618246 'move' call_tmp[618243](419627 call _cond_invalid tmp[419614]))
    if call_tmp[618243]
    {
      (419630 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556382] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556383] "maybe param" "temp"
    unknown call_tmp[618248] "expr temp" "maybe param" "maybe type" "temp"
    (618251 'move' call_tmp[618248](419615 call isTrue tmp[419614]))
    (556388 'move' tmp[556383](556386 call _cond_test call_tmp[618248]))
    if tmp[556383]
    {
      unknown tmp[556390] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618255] "expr temp" "maybe param" "maybe type" "temp"
      (618258 'move' call_tmp[618255](67471 call alignedLowAsInt _mt[243] this[67448]))
      unknown call_tmp[618262] "expr temp" "maybe param" "maybe type" "temp"
      (618265 'move' call_tmp[618262](374318 call _low _mt[243] this[67448]))
      unknown call_tmp[618267] "expr temp" "maybe param" "maybe type" "temp"
      (618270 'move' call_tmp[618267](67475 call == call_tmp[618255] call_tmp[618262]))
      (556392 'move' tmp[556390](419618 call isTrue call_tmp[618267]))
      (556397 'move' tmp[556382](556394 '_paramFoldLogical' tmp[556383] tmp[556390]))
    }
    {
      (556402 'move' tmp[556382](556399 '_paramFoldLogical' tmp[556383] 0))
    }
    (509920 'move' ret[509915](509919 'deref' tmp[556382]))
    (509917 return ret[509915])
  }
  where {
    unknown tmp[419593] "maybe param" "temp"
    (419604 'move' tmp[419593](374309 call stridable _mt[243] this[67448]))
    unknown call_tmp[618274] "expr temp" "maybe param" "maybe type" "temp"
    (618277 'move' call_tmp[618274](419606 call _cond_invalid tmp[419593]))
    if call_tmp[618274]
    {
      (419609 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556409] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556410] "maybe param" "temp"
    unknown call_tmp[618279] "expr temp" "maybe param" "maybe type" "temp"
    (618282 'move' call_tmp[618279](419594 call isTrue tmp[419593]))
    (556415 'move' tmp[556410](556413 call _cond_test call_tmp[618279]))
    if tmp[556410]
    {
      unknown tmp[556417] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618286] "expr temp" "maybe param" "maybe type" "temp"
      (618289 'move' call_tmp[618286](67455 call boundedType _mt[243] this[67448]))
      unknown call_tmp[618291] "expr temp" "maybe param" "maybe type" "temp"
      (618294 'move' call_tmp[618291](67462 call == call_tmp[618286] boundedLow[64210]))
      (556419 'move' tmp[556417](419597 call isTrue call_tmp[618291]))
      (556424 'move' tmp[556409](556421 '_paramFoldLogical' tmp[556410] tmp[556417]))
    }
    {
      (556429 'move' tmp[556409](556426 '_paramFoldLogical' tmp[556410] 0))
    }
    (748299 call chpl_statementLevelSymbol tmp[556409])
  }
  function range[64319](?).isNaturallyAligned[67488](arg _mt[67493]:_MT[238], arg this[67490]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509924] "RVV" "param" "temp"
    (509929 'move' ret[509924](509928 'deref' 0))
    (509926 return ret[509924])
  }
  where {
    unknown tmp[419635] "maybe param" "temp"
    unknown call_tmp[618298] "expr temp" "maybe param" "maybe type" "temp"
    (618301 'move' call_tmp[618298](67496 call boundedType _mt[243] this[67490]))
    (419646 'move' tmp[419635](67503 call == call_tmp[618298] boundedNone[64214]))
    unknown call_tmp[618303] "expr temp" "maybe param" "maybe type" "temp"
    (618306 'move' call_tmp[618303](419648 call _cond_invalid tmp[419635]))
    if call_tmp[618303]
    {
      (419651 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556463] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556464] "maybe param" "temp"
    unknown call_tmp[618308] "expr temp" "maybe param" "maybe type" "temp"
    (618311 'move' call_tmp[618308](419636 call isTrue tmp[419635]))
    (556469 'move' tmp[556464](556467 call _cond_test call_tmp[618308]))
    if tmp[556464]
    {
      (556474 'move' tmp[556463](556471 '_paramFoldLogical' tmp[556464] 1))
    }
    {
      unknown tmp[419656] "maybe param" "temp"
      unknown call_tmp[618315] "expr temp" "maybe param" "maybe type" "temp"
      (618318 'move' call_tmp[618315](374323 call stridable _mt[243] this[67490]))
      (419667 'move' tmp[419656](67506 call ! call_tmp[618315]))
      unknown call_tmp[618320] "expr temp" "maybe param" "maybe type" "temp"
      (618323 'move' call_tmp[618320](419669 call _cond_invalid tmp[419656]))
      if call_tmp[618320]
      {
        (419672 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556436] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556437] "maybe param" "temp"
      unknown call_tmp[618325] "expr temp" "maybe param" "maybe type" "temp"
      (618328 'move' call_tmp[618325](419657 call isTrue tmp[419656]))
      (556442 'move' tmp[556437](556440 call _cond_test call_tmp[618325]))
      if tmp[556437]
      {
        unknown tmp[556444] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618332] "expr temp" "maybe param" "maybe type" "temp"
        (618335 'move' call_tmp[618332](67509 call boundedType _mt[243] this[67490]))
        unknown call_tmp[618337] "expr temp" "maybe param" "maybe type" "temp"
        (618340 'move' call_tmp[618337](67516 call == call_tmp[618332] boundedHigh[64212]))
        (556446 'move' tmp[556444](419660 call isTrue call_tmp[618337]))
        (556451 'move' tmp[556436](556448 '_paramFoldLogical' tmp[556437] tmp[556444]))
      }
      {
        (556456 'move' tmp[556436](556453 '_paramFoldLogical' tmp[556437] 0))
      }
      unknown tmp[556476] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556478 'move' tmp[556476](419640 call isTrue tmp[556436]))
      (556483 'move' tmp[556463](556480 '_paramFoldLogical' tmp[556464] tmp[556476]))
    }
    (748301 call chpl_statementLevelSymbol tmp[556463])
  }
  function range[64319](?).isNaturallyAligned[67532](arg _mt[67537]:_MT[238], arg this[67534]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509933] "RVV" "temp"
    unknown tmp[419698] "maybe param" "temp"
    unknown call_tmp[618344] "expr temp" "maybe param" "maybe type" "temp"
    (618347 'move' call_tmp[618344](374332 call stride _mt[243] this[67534]))
    (419709 'move' tmp[419698](67554 call < call_tmp[618344] 0))
    unknown call_tmp[618349] "expr temp" "maybe param" "maybe type" "temp"
    (618352 'move' call_tmp[618349](419711 call _cond_invalid tmp[419698]))
    if call_tmp[618349]
    {
      (419714 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556490] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556491] "maybe param" "temp"
    unknown call_tmp[618354] "expr temp" "maybe param" "maybe type" "temp"
    (618357 'move' call_tmp[618354](419699 call isTrue tmp[419698]))
    (556496 'move' tmp[556491](556494 call _cond_test call_tmp[618354]))
    if tmp[556491]
    {
      unknown tmp[556498] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618361] "expr temp" "maybe param" "maybe type" "temp"
      (618364 'move' call_tmp[618361](67557 call alignedHighAsInt _mt[243] this[67534]))
      unknown call_tmp[618368] "expr temp" "maybe param" "maybe type" "temp"
      (618371 'move' call_tmp[618368](374337 call _high _mt[243] this[67534]))
      unknown call_tmp[618373] "expr temp" "maybe param" "maybe type" "temp"
      (618376 'move' call_tmp[618373](67561 call == call_tmp[618361] call_tmp[618368]))
      (556500 'move' tmp[556498](419702 call isTrue call_tmp[618373]))
      (556505 'move' tmp[556490](556502 '_paramFoldLogical' tmp[556491] tmp[556498]))
    }
    {
      (556510 'move' tmp[556490](556507 '_paramFoldLogical' tmp[556491] 0))
    }
    (509938 'move' ret[509933](509937 'deref' tmp[556490]))
    (509935 return ret[509933])
  }
  where {
    unknown tmp[419677] "maybe param" "temp"
    (419688 'move' tmp[419677](374328 call stridable _mt[243] this[67534]))
    unknown call_tmp[618380] "expr temp" "maybe param" "maybe type" "temp"
    (618383 'move' call_tmp[618380](419690 call _cond_invalid tmp[419677]))
    if call_tmp[618380]
    {
      (419693 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556517] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556518] "maybe param" "temp"
    unknown call_tmp[618385] "expr temp" "maybe param" "maybe type" "temp"
    (618388 'move' call_tmp[618385](419678 call isTrue tmp[419677]))
    (556523 'move' tmp[556518](556521 call _cond_test call_tmp[618385]))
    if tmp[556518]
    {
      unknown tmp[556525] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618392] "expr temp" "maybe param" "maybe type" "temp"
      (618395 'move' call_tmp[618392](67541 call boundedType _mt[243] this[67534]))
      unknown call_tmp[618397] "expr temp" "maybe param" "maybe type" "temp"
      (618400 'move' call_tmp[618397](67548 call == call_tmp[618392] boundedHigh[64212]))
      (556527 'move' tmp[556525](419681 call isTrue call_tmp[618397]))
      (556532 'move' tmp[556517](556529 '_paramFoldLogical' tmp[556518] tmp[556525]))
    }
    {
      (556537 'move' tmp[556517](556534 '_paramFoldLogical' tmp[556518] 0))
    }
    (748303 call chpl_statementLevelSymbol tmp[556517])
  }
  function range[64319](?).isAmbiguous[67574](arg _mt[67579]:_MT[238], arg this[67576]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509942] "RVV" "param" "temp"
    (509947 'move' ret[509942](509946 'deref' 0))
    (509944 return ret[509942])
  }
  where {
    unknown call_tmp[618404] "expr temp" "maybe param" "maybe type" "temp"
    (618407 'move' call_tmp[618404](374342 call stridable _mt[243] this[67576]))
    (67582 call ! call_tmp[618404])
  }
  function range[64319](?).isAmbiguous[67594](arg _mt[67599]:_MT[238], arg this[67596]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[509951] "RVV" "temp"
    unknown tmp[419719] "maybe param" "temp"
    unknown call_tmp[618411] "expr temp" "maybe param" "maybe type" "temp"
    (618414 'move' call_tmp[618411](374351 call aligned _mt[243] this[67596]))
    (419730 'move' tmp[419719](67603 call ! call_tmp[618411]))
    unknown call_tmp[618416] "expr temp" "maybe param" "maybe type" "temp"
    (618419 'move' call_tmp[618416](419732 call _cond_invalid tmp[419719]))
    if call_tmp[618416]
    {
      (419735 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556571] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556572] "maybe param" "temp"
    unknown call_tmp[618421] "expr temp" "maybe param" "maybe type" "temp"
    (618424 'move' call_tmp[618421](419720 call isTrue tmp[419719]))
    (556577 'move' tmp[556572](556575 call _cond_test call_tmp[618421]))
    if tmp[556572]
    {
      unknown tmp[419740] "maybe param" "temp"
      unknown call_tmp[618428] "expr temp" "maybe param" "maybe type" "temp"
      (618431 'move' call_tmp[618428](374355 call stride _mt[243] this[67596]))
      (419751 'move' tmp[419740](67607 call > call_tmp[618428] 1))
      unknown call_tmp[618433] "expr temp" "maybe param" "maybe type" "temp"
      (618436 'move' call_tmp[618433](419753 call _cond_invalid tmp[419740]))
      if call_tmp[618433]
      {
        (419756 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556544] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556545] "maybe param" "temp"
      unknown call_tmp[618438] "expr temp" "maybe param" "maybe type" "temp"
      (618441 'move' call_tmp[618438](419741 call isTrue tmp[419740]))
      (556550 'move' tmp[556545](556548 call _cond_test call_tmp[618438]))
      if tmp[556545]
      {
        (556555 'move' tmp[556544](556552 '_paramFoldLogical' tmp[556545] 1))
      }
      {
        unknown tmp[556557] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618445] "expr temp" "maybe param" "maybe type" "temp"
        (618448 'move' call_tmp[618445](374359 call stride _mt[243] this[67596]))
        unknown call_tmp[618450] "expr temp" "maybe param" "maybe type" "temp"
        (618453 'move' call_tmp[618450](67611 call - 1))
        unknown call_tmp[618455] "expr temp" "maybe param" "maybe type" "temp"
        (618458 'move' call_tmp[618455](67613 call < call_tmp[618445] call_tmp[618450]))
        (556559 'move' tmp[556557](419745 call isTrue call_tmp[618455]))
        (556564 'move' tmp[556544](556561 '_paramFoldLogical' tmp[556545] tmp[556557]))
      }
      unknown tmp[556579] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556581 'move' tmp[556579](419723 call isTrue tmp[556544]))
      (556586 'move' tmp[556571](556583 '_paramFoldLogical' tmp[556572] tmp[556579]))
    }
    {
      (556591 'move' tmp[556571](556588 '_paramFoldLogical' tmp[556572] 0))
    }
    (509956 'move' ret[509951](509955 'deref' tmp[556571]))
    (509953 return ret[509951])
  }
  where {
    (374347 call stridable _mt[243] this[67596])
  }
  function range[64319](?).contains[67632](arg _mt[67637]:_MT[238], arg this[67634]:range[64319](?) :
  range[64319](?), arg ind[67629] :
  (374364 call idxType _mt[243] this[67634])) : _unknown[51] "inline" "method"
  {
    unknown ret[509960] "RVV" "temp"
    unknown call_tmp[618466] "expr temp" "maybe param" "maybe type" "temp"
    (618469 'move' call_tmp[618466](67646 call(67642 call (partial) isAmbiguous _mt[243] this[67634])))
    unknown call_tmp[618471] "expr temp" "maybe param" "maybe type" "temp"
    (618474 'move' call_tmp[618471](67650 call _cond_test call_tmp[618466]))
    if call_tmp[618471]
    {
      (509965 'move' ret[509960](509964 'deref' 0))
      gotoReturn _end_contains[509958] _end_contains[509958]
    }
    unknown call_tmp[618476] "maybe param" "maybe type" "temp"
    (618479 'move' call_tmp[618476](67659 call chpl__idxToInt ind[67629]))
    const i[67660] "dead at end of block" "const" "insert auto destroy"
    (541083 'init var' i[67660] call_tmp[618476])
    (67663 'end of statement')
    unknown call_tmp[618483] "expr temp" "maybe param" "maybe type" "temp"
    (618486 'move' call_tmp[618483](67666 call(374369 call (partial) hasHighBound _mt[243] this[67634])))
    unknown call_tmp[618488] "expr temp" "maybe param" "maybe type" "temp"
    (618491 'move' call_tmp[618488](67680 call _cond_test call_tmp[618483]))
    if call_tmp[618488]
    {
      unknown call_tmp[618495] "expr temp" "maybe param" "maybe type" "temp"
      (618498 'move' call_tmp[618495](374375 call _high _mt[243] this[67634]))
      unknown call_tmp[618500] "expr temp" "maybe param" "maybe type" "temp"
      (618503 'move' call_tmp[618500](67669 call > i[67660] call_tmp[618495]))
      unknown call_tmp[618505] "expr temp" "maybe param" "maybe type" "temp"
      (618508 'move' call_tmp[618505](67674 call _cond_test call_tmp[618500]))
      if call_tmp[618505]
      {
        (509970 'move' ret[509960](509969 'deref' 0))
        gotoReturn _end_contains[509958] _end_contains[509958]
      }
    }
    unknown call_tmp[618512] "expr temp" "maybe param" "maybe type" "temp"
    (618515 'move' call_tmp[618512](67686 call(374379 call (partial) hasLowBound _mt[243] this[67634])))
    unknown call_tmp[618517] "expr temp" "maybe param" "maybe type" "temp"
    (618520 'move' call_tmp[618517](67700 call _cond_test call_tmp[618512]))
    if call_tmp[618517]
    {
      unknown call_tmp[618524] "expr temp" "maybe param" "maybe type" "temp"
      (618527 'move' call_tmp[618524](374385 call _low _mt[243] this[67634]))
      unknown call_tmp[618529] "expr temp" "maybe param" "maybe type" "temp"
      (618532 'move' call_tmp[618529](67689 call < i[67660] call_tmp[618524]))
      unknown call_tmp[618534] "expr temp" "maybe param" "maybe type" "temp"
      (618537 'move' call_tmp[618534](67694 call _cond_test call_tmp[618529]))
      if call_tmp[618534]
      {
        (509975 'move' ret[509960](509974 'deref' 0))
        gotoReturn _end_contains[509958] _end_contains[509958]
      }
    }
    unknown call_tmp[618541] "expr temp" "maybe param" "maybe type" "temp"
    (618544 'move' call_tmp[618541](374390 call stridable _mt[243] this[67634]))
    unknown call_tmp[618546] "expr temp" "maybe param" "maybe type" "temp"
    (618549 'move' call_tmp[618546](67734 call _cond_test call_tmp[618541]))
    if call_tmp[618546]
    {
      unknown call_tmp[618553] "expr temp" "maybe param" "maybe type" "temp"
      (618556 'move' call_tmp[618553](374399 call intIdxType _mt[243] this[67634]))
      unknown call_tmp[618560] "expr temp" "maybe param" "maybe type" "temp"
      (618563 'move' call_tmp[618560](374395 call _stride _mt[243] this[67634]))
      unknown call_tmp[618565] "expr temp" "maybe param" "maybe type" "temp"
      (618568 'move' call_tmp[618565](67708 call abs call_tmp[618560]))
      unknown call_tmp[618570] "maybe param" "maybe type" "temp"
      (618573 'move' call_tmp[618570](67710 call _cast call_tmp[618553] call_tmp[618565]))
      unknown s[67712] "dead at end of block" "insert auto destroy"
      (541085 'init var' s[67712] call_tmp[618570])
      (67715 'end of statement')
      unknown call_tmp[618577] "expr temp" "maybe param" "maybe type" "temp"
      (618580 'move' call_tmp[618577](374405 call _alignment _mt[243] this[67634]))
      unknown call_tmp[618582] "expr temp" "maybe param" "maybe type" "temp"
      (618585 'move' call_tmp[618582](67722 call chpl__diffMod i[67660] call_tmp[618577] s[67712]))
      unknown call_tmp[618587] "expr temp" "maybe param" "maybe type" "temp"
      (618590 'move' call_tmp[618587](67724 call != call_tmp[618582] 0))
      unknown call_tmp[618592] "expr temp" "maybe param" "maybe type" "temp"
      (618595 'move' call_tmp[618592](67729 call _cond_test call_tmp[618587]))
      if call_tmp[618592]
      {
        (509980 'move' ret[509960](509979 'deref' 0))
        gotoReturn _end_contains[509958] _end_contains[509958]
      }
    }
    (509985 'move' ret[509960](509984 'deref' 1))
    label _end_contains[509958]
    (509962 return ret[509960])
  }
  function range[64319](?).contains[67753](arg _mt[67758]:_MT[238], arg this[67755]:range[64319](?) :
  range[64319](?), arg other[67750]:range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509989] "RVV" "temp"
    unknown tmp[419761] "maybe param" "temp"
    (419772 'move' tmp[419761](67765 call(67761 call (partial) isAmbiguous _mt[243] this[67755])))
    unknown call_tmp[618599] "expr temp" "maybe param" "maybe type" "temp"
    (618602 'move' call_tmp[618599](419774 call _cond_invalid tmp[419761]))
    if call_tmp[618599]
    {
      (419777 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556598] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556599] "maybe param" "temp"
    unknown call_tmp[618604] "expr temp" "maybe param" "maybe type" "temp"
    (618607 'move' call_tmp[618604](419762 call isTrue tmp[419761]))
    (556604 'move' tmp[556599](556602 call _cond_test call_tmp[618604]))
    if tmp[556599]
    {
      (556609 'move' tmp[556598](556606 '_paramFoldLogical' tmp[556599] 1))
    }
    {
      unknown tmp[556611] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618611] "expr temp" "maybe param" "maybe type" "temp"
      (618614 'move' call_tmp[618611](67771 call(67767 call (partial) isAmbiguous _mt[243] other[67750])))
      (556613 'move' tmp[556611](419766 call isTrue call_tmp[618611]))
      (556618 'move' tmp[556598](556615 '_paramFoldLogical' tmp[556599] tmp[556611]))
    }
    unknown call_tmp[618616] "expr temp" "maybe param" "maybe type" "temp"
    (618619 'move' call_tmp[618616](67777 call _cond_test tmp[556598]))
    if call_tmp[618616]
    {
      (509994 'move' ret[509989](509993 'deref' 0))
      gotoReturn _end_contains[509987] _end_contains[509987]
    }
    unknown call_tmp[618623] "expr temp" "maybe param" "maybe type" "temp"
    (618626 'move' call_tmp[618623](374412 call stridable _mt[243] this[67755]))
    unknown call_tmp[618628] "expr temp" "maybe param" "maybe type" "temp"
    (618631 'move' call_tmp[618628](67845 call _cond_test call_tmp[618623]))
    if call_tmp[618628]
    {
      unknown tmp[419782] "maybe param" "temp"
      unknown tmp[419803] "maybe param" "temp"
      unknown call_tmp[618635] "expr temp" "maybe param" "maybe type" "temp"
      (618638 'move' call_tmp[618635](374416 call stride _mt[243] this[67755]))
      (419814 'move' tmp[419803](67786 call > call_tmp[618635] 0))
      unknown call_tmp[618640] "expr temp" "maybe param" "maybe type" "temp"
      (618643 'move' call_tmp[618640](419816 call _cond_invalid tmp[419803]))
      if call_tmp[618640]
      {
        (419819 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556625] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556626] "maybe param" "temp"
      unknown call_tmp[618645] "expr temp" "maybe param" "maybe type" "temp"
      (618648 'move' call_tmp[618645](419804 call isTrue tmp[419803]))
      (556631 'move' tmp[556626](556629 call _cond_test call_tmp[618645]))
      if tmp[556626]
      {
        unknown tmp[556633] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618652] "expr temp" "maybe param" "maybe type" "temp"
        (618655 'move' call_tmp[618652](67789 call stride _mt[243] other[67750]))
        unknown call_tmp[618657] "expr temp" "maybe param" "maybe type" "temp"
        (618660 'move' call_tmp[618657](67793 call < call_tmp[618652] 0))
        (556635 'move' tmp[556633](419807 call isTrue call_tmp[618657]))
        (556640 'move' tmp[556625](556637 '_paramFoldLogical' tmp[556626] tmp[556633]))
      }
      {
        (556645 'move' tmp[556625](556642 '_paramFoldLogical' tmp[556626] 0))
      }
      (419793 'move' tmp[419782] tmp[556625])
      unknown call_tmp[618662] "expr temp" "maybe param" "maybe type" "temp"
      (618665 'move' call_tmp[618662](419795 call _cond_invalid tmp[419782]))
      if call_tmp[618662]
      {
        (419798 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556679] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556680] "maybe param" "temp"
      unknown call_tmp[618667] "expr temp" "maybe param" "maybe type" "temp"
      (618670 'move' call_tmp[618667](419783 call isTrue tmp[419782]))
      (556685 'move' tmp[556680](556683 call _cond_test call_tmp[618667]))
      if tmp[556680]
      {
        (556690 'move' tmp[556679](556687 '_paramFoldLogical' tmp[556680] 1))
      }
      {
        unknown tmp[419824] "maybe param" "temp"
        unknown call_tmp[618674] "expr temp" "maybe param" "maybe type" "temp"
        (618677 'move' call_tmp[618674](374420 call stride _mt[243] this[67755]))
        (419835 'move' tmp[419824](67799 call < call_tmp[618674] 0))
        unknown call_tmp[618679] "expr temp" "maybe param" "maybe type" "temp"
        (618682 'move' call_tmp[618679](419837 call _cond_invalid tmp[419824]))
        if call_tmp[618679]
        {
          (419840 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[556652] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[556653] "maybe param" "temp"
        unknown call_tmp[618684] "expr temp" "maybe param" "maybe type" "temp"
        (618687 'move' call_tmp[618684](419825 call isTrue tmp[419824]))
        (556658 'move' tmp[556653](556656 call _cond_test call_tmp[618684]))
        if tmp[556653]
        {
          unknown tmp[556660] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[618691] "expr temp" "maybe param" "maybe type" "temp"
          (618694 'move' call_tmp[618691](67802 call stride _mt[243] other[67750]))
          unknown call_tmp[618696] "expr temp" "maybe param" "maybe type" "temp"
          (618699 'move' call_tmp[618696](67806 call > call_tmp[618691] 0))
          (556662 'move' tmp[556660](419828 call isTrue call_tmp[618696]))
          (556667 'move' tmp[556652](556664 '_paramFoldLogical' tmp[556653] tmp[556660]))
        }
        {
          (556672 'move' tmp[556652](556669 '_paramFoldLogical' tmp[556653] 0))
        }
        unknown tmp[556692] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556694 'move' tmp[556692](419787 call isTrue tmp[556652]))
        (556699 'move' tmp[556679](556696 '_paramFoldLogical' tmp[556680] tmp[556692]))
      }
      unknown call_tmp[618701] "expr temp" "maybe param" "maybe type" "temp"
      (618704 'move' call_tmp[618701](67819 call _cond_test tmp[556679]))
      if call_tmp[618701]
      {
        unknown call_tmp[618706] "expr temp" "maybe param" "maybe type" "temp"
        (618709 'move' call_tmp[618706](67816 call _containsHelp this[67755] other[67750]))
        (509999 'move' ret[509989](509998 'deref' call_tmp[618706]))
        gotoReturn _end_contains[509987] _end_contains[509987]
      }
    }
    {
      unknown call_tmp[618713] "expr temp" "maybe param" "maybe type" "temp"
      (618716 'move' call_tmp[618713](67826 call stride _mt[243] other[67750]))
      unknown call_tmp[618718] "expr temp" "maybe param" "maybe type" "temp"
      (618721 'move' call_tmp[618718](67830 call < call_tmp[618713] 0))
      unknown call_tmp[618723] "expr temp" "maybe param" "maybe type" "temp"
      (618726 'move' call_tmp[618723](67839 call _cond_test call_tmp[618718]))
      if call_tmp[618723]
      {
        unknown call_tmp[618728] "expr temp" "maybe param" "maybe type" "temp"
        (618731 'move' call_tmp[618728](67836 call _containsHelp this[67755] other[67750]))
        (510004 'move' ret[509989](510003 'deref' call_tmp[618728]))
        gotoReturn _end_contains[509987] _end_contains[509987]
      }
    }
    unknown call_tmp[618733] "expr temp" "maybe param" "maybe type" "temp"
    (618736 'move' call_tmp[618733](67853 call this[67755] other[67750]))
    unknown call_tmp[618738] "expr temp" "maybe param" "maybe type" "temp"
    (618741 'move' call_tmp[618738](67854 call == other[67750] call_tmp[618733]))
    (510009 'move' ret[509989](510008 'deref' call_tmp[618738]))
    label _end_contains[509987]
    (509991 return ret[509989])
  }
  function range[64319](?).member[67867](arg _mt[67872]:_MT[238], arg this[67869]:range[64319](?) :
  range[64319](?), arg ind[67864] :
  (374432 call idxType _mt[243] this[67869])) : _unknown[51] "inline" "method"
  {
    unknown ret[510013] "RVV" "temp"
    unknown call_tmp[618745] "expr temp" "maybe param" "maybe type" "temp"
    (618748 'move' call_tmp[618745](67909 call + "range.member is deprecated - " "please use range.contains instead"))
    (67912 call compilerWarning call_tmp[618745])
    (475445 'end of statement')
    unknown call_tmp[618752] "expr temp" "maybe param" "maybe type" "temp"
    (618755 'move' call_tmp[618752](67923 call(67918 call (partial) contains _mt[243] this[67869]) ind[67864]))
    (510018 'move' ret[510013](510017 'deref' call_tmp[618752]))
    (510015 return ret[510013])
  }
  function range[64319](?).member[67938](arg _mt[67943]:_MT[238], arg this[67940]:range[64319](?) :
  range[64319](?), arg other[67935]:range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510022] "RVV" "temp"
    unknown call_tmp[618757] "expr temp" "maybe param" "maybe type" "temp"
    (618760 'move' call_tmp[618757](67948 call + "range.member is deprecated - " "please use range.contains instead"))
    (67951 call compilerWarning call_tmp[618757])
    (475447 'end of statement')
    unknown call_tmp[618764] "expr temp" "maybe param" "maybe type" "temp"
    (618767 'move' call_tmp[618764](67960 call(67955 call (partial) contains _mt[243] this[67940]) other[67935]))
    (510027 'move' ret[510022](510026 'deref' call_tmp[618764]))
    (510024 return ret[510022])
  }
  function _containsHelp[67974](in arg arg1[67971]:range[64319](?), in arg arg2[67980]:range[64319](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[510031] "RVV" "temp"
    unknown call_tmp[618771] "expr temp" "maybe param" "maybe type" "temp"
    (618774 'move' call_tmp[618771](67984 call stridable _mt[243] arg2[67980]))
    unknown call_tmp[618776] "expr temp" "maybe param" "maybe type" "temp"
    (618779 'move' call_tmp[618776](68013 call _cond_test call_tmp[618771]))
    if call_tmp[618776]
    {
      unknown call_tmp[618783] "expr temp" "maybe param" "maybe type" "temp"
      (618786 'move' call_tmp[618783](67988 call _stride _mt[243] arg2[67980]))
      unknown call_tmp[618790] "expr temp" "maybe param" "maybe type" "temp"
      (618793 'move' call_tmp[618790](67992 call _stride _mt[243] arg2[67980]))
      unknown call_tmp[618795] "expr temp" "maybe param" "maybe type" "temp"
      (618798 'move' call_tmp[618795](67995 call - call_tmp[618790]))
      (67997 call = call_tmp[618783] call_tmp[618795])
    }
    {
      unknown call_tmp[618802] "expr temp" "maybe param" "maybe type" "temp"
      (618805 'move' call_tmp[618802](68001 call _stride _mt[243] arg1[67971]))
      unknown call_tmp[618809] "expr temp" "maybe param" "maybe type" "temp"
      (618812 'move' call_tmp[618809](68005 call _stride _mt[243] arg1[67971]))
      unknown call_tmp[618814] "expr temp" "maybe param" "maybe type" "temp"
      (618817 'move' call_tmp[618814](68008 call - call_tmp[618809]))
      (68010 call = call_tmp[618802] call_tmp[618814])
    }
    unknown call_tmp[618819] "expr temp" "maybe param" "maybe type" "temp"
    (618822 'move' call_tmp[618819](68024 call arg1[67971] arg2[67980]))
    unknown call_tmp[618824] "expr temp" "maybe param" "maybe type" "temp"
    (618827 'move' call_tmp[618824](68025 call == arg2[67980] call_tmp[618819]))
    (510036 'move' ret[510031](510035 'deref' call_tmp[618824]))
    (510033 return ret[510031])
  }
  function ==[68040](arg r1[68037]:range[64319](?), arg r2[68046]:range[64319](?)) param : _unknown[51]
  {
    unknown ret[510040] "RVV" "param" "temp"
    (510045 'move' ret[510040](510044 'deref' 0))
    (510042 return ret[510040])
  }
  where {
    unknown call_tmp[618831] "expr temp" "maybe param" "maybe type" "temp"
    (618834 'move' call_tmp[618831](68050 call boundedType _mt[243] r1[68037]))
    unknown call_tmp[618838] "expr temp" "maybe param" "maybe type" "temp"
    (618841 'move' call_tmp[618838](68054 call boundedType _mt[243] r2[68046]))
    (68057 call != call_tmp[618831] call_tmp[618838])
  }
  function ==[68075](arg r1[68072]:range[64319](?), arg r2[68081]:range[64319](?)) : _unknown[51]
  {
    unknown ret[510049] "RVV" "temp"
    unknown call_tmp[618845] "expr temp" "maybe param" "maybe type" "temp"
    (618848 'move' call_tmp[618845](68100 call(68096 call (partial) isAmbiguous _mt[243] r1[68072])))
    unknown call_tmp[618852] "expr temp" "maybe param" "maybe type" "temp"
    (618855 'move' call_tmp[618852](68106 call(68102 call (partial) isAmbiguous _mt[243] r2[68081])))
    unknown call_tmp[618857] "expr temp" "maybe param" "maybe type" "temp"
    (618860 'move' call_tmp[618857](68107 call != call_tmp[618845] call_tmp[618852]))
    unknown call_tmp[618862] "expr temp" "maybe param" "maybe type" "temp"
    (618865 'move' call_tmp[618862](68112 call _cond_test call_tmp[618857]))
    if call_tmp[618862]
    {
      (510055 'move' ret[510049](510054 'coerce' 0 bool[10]))
      gotoReturn _end_==[510047] _end_==[510047]
    }
    unknown call_tmp[618869] "expr temp" "maybe param" "maybe type" "temp"
    (618872 'move' call_tmp[618869](68123 call(68119 call (partial) isAmbiguous _mt[243] r1[68072])))
    unknown call_tmp[618874] "expr temp" "maybe param" "maybe type" "temp"
    (618877 'move' call_tmp[618874](68131 call _cond_test call_tmp[618869]))
    if call_tmp[618874]
    {
      unknown call_tmp[618879] "expr temp" "maybe param" "maybe type" "temp"
      (618882 'move' call_tmp[618879](68128 call ident r1[68072] r2[68081]))
      (510061 'move' ret[510049](510060 'coerce' call_tmp[618879] bool[10]))
      gotoReturn _end_==[510047] _end_==[510047]
    }
    unknown call_tmp[618884] "expr temp" "maybe param" "maybe type" "temp"
    (618887 'move' call_tmp[618884](68139 call isBoundedRange r1[68072]))
    unknown call_tmp[618889] "expr temp" "maybe param" "maybe type" "temp"
    (618892 'move' call_tmp[618889](68313 call _cond_test call_tmp[618884]))
    if call_tmp[618889]
    {
      unknown call_tmp[618896] "maybe param" "maybe type" "temp"
      (618899 'move' call_tmp[618896](68141 call size _mt[243] r1[68072]))
      const len[68144] "dead at end of block" "const" "insert auto destroy"
      (541087 'init var' len[68144] call_tmp[618896])
      unknown call_tmp[618903] "maybe param" "maybe type" "temp"
      (618906 'move' call_tmp[618903](68148 call size _mt[243] r2[68081]))
      const l2[68151] "dead at end of block" "const" "insert auto destroy"
      (541089 'init var' l2[68151] call_tmp[618903])
      (68154 'end of statement')
      unknown call_tmp[618908] "expr temp" "maybe param" "maybe type" "temp"
      (618911 'move' call_tmp[618908](68158 call != len[68144] l2[68151]))
      unknown call_tmp[618913] "expr temp" "maybe param" "maybe type" "temp"
      (618916 'move' call_tmp[618913](68163 call _cond_test call_tmp[618908]))
      if call_tmp[618913]
      {
        (510067 'move' ret[510049](510066 'coerce' 0 bool[10]))
        gotoReturn _end_==[510047] _end_==[510047]
      }
      unknown call_tmp[618918] "expr temp" "maybe param" "maybe type" "temp"
      (618921 'move' call_tmp[618918](68170 call == len[68144] 0))
      unknown call_tmp[618923] "expr temp" "maybe param" "maybe type" "temp"
      (618926 'move' call_tmp[618923](68175 call _cond_test call_tmp[618918]))
      if call_tmp[618923]
      {
        (510073 'move' ret[510049](510072 'coerce' 1 bool[10]))
        gotoReturn _end_==[510047] _end_==[510047]
      }
      unknown call_tmp[618930] "expr temp" "maybe param" "maybe type" "temp"
      (618933 'move' call_tmp[618930](68183 call first _mt[243] r1[68072]))
      unknown call_tmp[618937] "expr temp" "maybe param" "maybe type" "temp"
      (618940 'move' call_tmp[618937](68187 call first _mt[243] r2[68081]))
      unknown call_tmp[618942] "expr temp" "maybe param" "maybe type" "temp"
      (618945 'move' call_tmp[618942](68190 call != call_tmp[618930] call_tmp[618937]))
      unknown call_tmp[618947] "expr temp" "maybe param" "maybe type" "temp"
      (618950 'move' call_tmp[618947](68195 call _cond_test call_tmp[618942]))
      if call_tmp[618947]
      {
        (510079 'move' ret[510049](510078 'coerce' 0 bool[10]))
        gotoReturn _end_==[510047] _end_==[510047]
      }
      unknown call_tmp[618952] "expr temp" "maybe param" "maybe type" "temp"
      (618955 'move' call_tmp[618952](68202 call == len[68144] 1))
      unknown call_tmp[618957] "expr temp" "maybe param" "maybe type" "temp"
      (618960 'move' call_tmp[618957](68207 call _cond_test call_tmp[618952]))
      if call_tmp[618957]
      {
        (510085 'move' ret[510049](510084 'coerce' 1 bool[10]))
        gotoReturn _end_==[510047] _end_==[510047]
      }
      unknown call_tmp[618964] "expr temp" "maybe param" "maybe type" "temp"
      (618967 'move' call_tmp[618964](68213 call stride _mt[243] r1[68072]))
      unknown call_tmp[618971] "expr temp" "maybe param" "maybe type" "temp"
      (618974 'move' call_tmp[618971](68217 call stride _mt[243] r2[68081]))
      unknown call_tmp[618976] "expr temp" "maybe param" "maybe type" "temp"
      (618979 'move' call_tmp[618976](68220 call != call_tmp[618964] call_tmp[618971]))
      unknown call_tmp[618981] "expr temp" "maybe param" "maybe type" "temp"
      (618984 'move' call_tmp[618981](68225 call _cond_test call_tmp[618976]))
      if call_tmp[618981]
      {
        (510091 'move' ret[510049](510090 'coerce' 0 bool[10]))
        gotoReturn _end_==[510047] _end_==[510047]
      }
      (510097 'move' ret[510049](510096 'coerce' 1 bool[10]))
      gotoReturn _end_==[510047] _end_==[510047]
    }
    {
      unknown call_tmp[618988] "expr temp" "maybe param" "maybe type" "temp"
      (618991 'move' call_tmp[618988](68234 call stride _mt[243] r1[68072]))
      unknown call_tmp[618995] "expr temp" "maybe param" "maybe type" "temp"
      (618998 'move' call_tmp[618995](68238 call stride _mt[243] r2[68081]))
      unknown call_tmp[619000] "expr temp" "maybe param" "maybe type" "temp"
      (619003 'move' call_tmp[619000](68241 call != call_tmp[618988] call_tmp[618995]))
      unknown call_tmp[619005] "expr temp" "maybe param" "maybe type" "temp"
      (619008 'move' call_tmp[619005](68246 call _cond_test call_tmp[619000]))
      if call_tmp[619005]
      {
        (510103 'move' ret[510049](510102 'coerce' 0 bool[10]))
        gotoReturn _end_==[510047] _end_==[510047]
      }
      unknown call_tmp[619012] "expr temp" "maybe param" "maybe type" "temp"
      (619015 'move' call_tmp[619012](68257 call(68253 call (partial) hasLowBound _mt[243] r1[68072])))
      unknown call_tmp[619017] "expr temp" "maybe param" "maybe type" "temp"
      (619020 'move' call_tmp[619017](68276 call _cond_test call_tmp[619012]))
      if call_tmp[619017]
      {
        unknown call_tmp[619024] "expr temp" "maybe param" "maybe type" "temp"
        (619027 'move' call_tmp[619024](68259 call alignedLow _mt[243] r1[68072]))
        unknown call_tmp[619031] "expr temp" "maybe param" "maybe type" "temp"
        (619034 'move' call_tmp[619031](68263 call alignedLow _mt[243] r2[68081]))
        unknown call_tmp[619036] "expr temp" "maybe param" "maybe type" "temp"
        (619039 'move' call_tmp[619036](68266 call != call_tmp[619024] call_tmp[619031]))
        unknown call_tmp[619041] "expr temp" "maybe param" "maybe type" "temp"
        (619044 'move' call_tmp[619041](68271 call _cond_test call_tmp[619036]))
        if call_tmp[619041]
        {
          (510109 'move' ret[510049](510108 'coerce' 0 bool[10]))
          gotoReturn _end_==[510047] _end_==[510047]
        }
      }
      unknown call_tmp[619048] "expr temp" "maybe param" "maybe type" "temp"
      (619051 'move' call_tmp[619048](68286 call(68282 call (partial) hasHighBound _mt[243] r1[68072])))
      unknown call_tmp[619053] "expr temp" "maybe param" "maybe type" "temp"
      (619056 'move' call_tmp[619053](68305 call _cond_test call_tmp[619048]))
      if call_tmp[619053]
      {
        unknown call_tmp[619060] "expr temp" "maybe param" "maybe type" "temp"
        (619063 'move' call_tmp[619060](68288 call alignedHigh _mt[243] r1[68072]))
        unknown call_tmp[619067] "expr temp" "maybe param" "maybe type" "temp"
        (619070 'move' call_tmp[619067](68292 call alignedHigh _mt[243] r2[68081]))
        unknown call_tmp[619072] "expr temp" "maybe param" "maybe type" "temp"
        (619075 'move' call_tmp[619072](68295 call != call_tmp[619060] call_tmp[619067]))
        unknown call_tmp[619077] "expr temp" "maybe param" "maybe type" "temp"
        (619080 'move' call_tmp[619077](68300 call _cond_test call_tmp[619072]))
        if call_tmp[619077]
        {
          (510115 'move' ret[510049](510114 'coerce' 0 bool[10]))
          gotoReturn _end_==[510047] _end_==[510047]
        }
      }
      (510121 'move' ret[510049](510120 'coerce' 1 bool[10]))
      gotoReturn _end_==[510047] _end_==[510047]
    }
    label _end_==[510047]
    (510051 return ret[510049])
  }
  where {
    unknown call_tmp[619084] "expr temp" "maybe param" "maybe type" "temp"
    (619087 'move' call_tmp[619084](68086 call boundedType _mt[243] r1[68072]))
    unknown call_tmp[619091] "expr temp" "maybe param" "maybe type" "temp"
    (619094 'move' call_tmp[619091](68090 call boundedType _mt[243] r2[68081]))
    (68093 call == call_tmp[619084] call_tmp[619091])
  }
  { scopeless type
    bool[10]
  }
  function !=[68330](arg r1[68327]:range[64319](?), arg r2[68336]:range[64319](?)) : _unknown[51]
  {
    unknown ret[510127] "RVV" "temp"
    unknown call_tmp[619096] "expr temp" "maybe param" "maybe type" "temp"
    (619099 'move' call_tmp[619096](68341 call == r1[68327] r2[68336]))
    unknown call_tmp[619101] "expr temp" "maybe param" "maybe type" "temp"
    (619104 'move' call_tmp[619101](68343 call ! call_tmp[619096]))
    (510132 'move' ret[510127](510131 'deref' call_tmp[619101]))
    (510129 return ret[510127])
  }
  function ident[68359](arg r1[68356]:range[64319](?), arg r2[68365]:range[64319](?)) : _unknown[51]
  {
    unknown ret[510136] "RVV" "temp"
    unknown call_tmp[619108] "expr temp" "maybe param" "maybe type" "temp"
    (619111 'move' call_tmp[619108](68403 call _low _mt[243] r1[68356]))
    unknown call_tmp[619115] "expr temp" "maybe param" "maybe type" "temp"
    (619118 'move' call_tmp[619115](68407 call _low _mt[243] r2[68365]))
    unknown call_tmp[619120] "expr temp" "maybe param" "maybe type" "temp"
    (619123 'move' call_tmp[619120](68410 call != call_tmp[619108] call_tmp[619115]))
    unknown call_tmp[619125] "expr temp" "maybe param" "maybe type" "temp"
    (619128 'move' call_tmp[619125](68415 call _cond_test call_tmp[619120]))
    if call_tmp[619125]
    {
      (510141 'move' ret[510136](510140 'deref' 0))
      gotoReturn _end_ident[510134] _end_ident[510134]
    }
    unknown call_tmp[619132] "expr temp" "maybe param" "maybe type" "temp"
    (619135 'move' call_tmp[619132](68422 call _high _mt[243] r1[68356]))
    unknown call_tmp[619139] "expr temp" "maybe param" "maybe type" "temp"
    (619142 'move' call_tmp[619139](68426 call _high _mt[243] r2[68365]))
    unknown call_tmp[619144] "expr temp" "maybe param" "maybe type" "temp"
    (619147 'move' call_tmp[619144](68429 call != call_tmp[619132] call_tmp[619139]))
    unknown call_tmp[619149] "expr temp" "maybe param" "maybe type" "temp"
    (619152 'move' call_tmp[619149](68434 call _cond_test call_tmp[619144]))
    if call_tmp[619149]
    {
      (510146 'move' ret[510136](510145 'deref' 0))
      gotoReturn _end_ident[510134] _end_ident[510134]
    }
    unknown call_tmp[619156] "expr temp" "maybe param" "maybe type" "temp"
    (619159 'move' call_tmp[619156](68440 call stridable _mt[243] r1[68356]))
    unknown call_tmp[619161] "expr temp" "maybe param" "maybe type" "temp"
    (619164 'move' call_tmp[619161](68511 call _cond_test call_tmp[619156]))
    if call_tmp[619161]
    {
      unknown call_tmp[619168] "expr temp" "maybe param" "maybe type" "temp"
      (619171 'move' call_tmp[619168](68444 call stridable _mt[243] r2[68365]))
      unknown call_tmp[619173] "expr temp" "maybe param" "maybe type" "temp"
      (619176 'move' call_tmp[619173](68506 call _cond_test call_tmp[619168]))
      if call_tmp[619173]
      {
        unknown call_tmp[619180] "expr temp" "maybe param" "maybe type" "temp"
        (619183 'move' call_tmp[619180](68448 call _stride _mt[243] r1[68356]))
        unknown call_tmp[619187] "expr temp" "maybe param" "maybe type" "temp"
        (619190 'move' call_tmp[619187](68452 call _stride _mt[243] r2[68365]))
        unknown call_tmp[619192] "expr temp" "maybe param" "maybe type" "temp"
        (619195 'move' call_tmp[619192](68455 call != call_tmp[619180] call_tmp[619187]))
        unknown call_tmp[619197] "expr temp" "maybe param" "maybe type" "temp"
        (619200 'move' call_tmp[619197](68460 call _cond_test call_tmp[619192]))
        if call_tmp[619197]
        {
          (510151 'move' ret[510136](510150 'deref' 0))
          gotoReturn _end_ident[510134] _end_ident[510134]
        }
        unknown call_tmp[619204] "expr temp" "maybe param" "maybe type" "temp"
        (619207 'move' call_tmp[619204](68467 call _alignment _mt[243] r1[68356]))
        unknown call_tmp[619211] "expr temp" "maybe param" "maybe type" "temp"
        (619214 'move' call_tmp[619211](68471 call _alignment _mt[243] r2[68365]))
        unknown call_tmp[619216] "expr temp" "maybe param" "maybe type" "temp"
        (619219 'move' call_tmp[619216](68474 call != call_tmp[619204] call_tmp[619211]))
        unknown call_tmp[619221] "expr temp" "maybe param" "maybe type" "temp"
        (619224 'move' call_tmp[619221](68479 call _cond_test call_tmp[619216]))
        if call_tmp[619221]
        {
          (510156 'move' ret[510136](510155 'deref' 0))
          gotoReturn _end_ident[510134] _end_ident[510134]
        }
        unknown call_tmp[619228] "expr temp" "maybe param" "maybe type" "temp"
        (619231 'move' call_tmp[619228](68485 call _aligned _mt[243] r1[68356]))
        unknown call_tmp[619235] "expr temp" "maybe param" "maybe type" "temp"
        (619238 'move' call_tmp[619235](68489 call _aligned _mt[243] r2[68365]))
        unknown call_tmp[619240] "expr temp" "maybe param" "maybe type" "temp"
        (619243 'move' call_tmp[619240](68492 call != call_tmp[619228] call_tmp[619235]))
        unknown call_tmp[619245] "expr temp" "maybe param" "maybe type" "temp"
        (619248 'move' call_tmp[619245](68497 call _cond_test call_tmp[619240]))
        if call_tmp[619245]
        {
          (510161 'move' ret[510136](510160 'deref' 0))
          gotoReturn _end_ident[510134] _end_ident[510134]
        }
      }
      {
        (510166 'move' ret[510136](510165 'deref' 0))
        gotoReturn _end_ident[510134] _end_ident[510134]
      }
    }
    (510171 'move' ret[510136](510170 'deref' 1))
    label _end_ident[510134]
    (510138 return ret[510136])
  }
  where {
    unknown tmp[419845] "maybe param" "temp"
    unknown tmp[419866] "maybe param" "temp"
    unknown call_tmp[619252] "expr temp" "maybe param" "maybe type" "temp"
    (619255 'move' call_tmp[619252](68369 call idxType _mt[243] r1[68356]))
    unknown call_tmp[619259] "expr temp" "maybe param" "maybe type" "temp"
    (619262 'move' call_tmp[619259](68373 call idxType _mt[243] r2[68365]))
    (419877 'move' tmp[419866](68376 call == call_tmp[619252] call_tmp[619259]))
    unknown call_tmp[619264] "expr temp" "maybe param" "maybe type" "temp"
    (619267 'move' call_tmp[619264](419879 call _cond_invalid tmp[419866]))
    if call_tmp[619264]
    {
      (419882 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556706] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556707] "maybe param" "temp"
    unknown call_tmp[619269] "expr temp" "maybe param" "maybe type" "temp"
    (619272 'move' call_tmp[619269](419867 call isTrue tmp[419866]))
    (556712 'move' tmp[556707](556710 call _cond_test call_tmp[619269]))
    if tmp[556707]
    {
      unknown tmp[556714] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619276] "expr temp" "maybe param" "maybe type" "temp"
      (619279 'move' call_tmp[619276](68379 call boundedType _mt[243] r1[68356]))
      unknown call_tmp[619283] "expr temp" "maybe param" "maybe type" "temp"
      (619286 'move' call_tmp[619283](68383 call boundedType _mt[243] r2[68365]))
      unknown call_tmp[619288] "expr temp" "maybe param" "maybe type" "temp"
      (619291 'move' call_tmp[619288](68386 call == call_tmp[619276] call_tmp[619283]))
      (556716 'move' tmp[556714](419870 call isTrue call_tmp[619288]))
      (556721 'move' tmp[556706](556718 '_paramFoldLogical' tmp[556707] tmp[556714]))
    }
    {
      (556726 'move' tmp[556706](556723 '_paramFoldLogical' tmp[556707] 0))
    }
    (419856 'move' tmp[419845] tmp[556706])
    unknown call_tmp[619293] "expr temp" "maybe param" "maybe type" "temp"
    (619296 'move' call_tmp[619293](419858 call _cond_invalid tmp[419845]))
    if call_tmp[619293]
    {
      (419861 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556733] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556734] "maybe param" "temp"
    unknown call_tmp[619298] "expr temp" "maybe param" "maybe type" "temp"
    (619301 'move' call_tmp[619298](419846 call isTrue tmp[419845]))
    (556739 'move' tmp[556734](556737 call _cond_test call_tmp[619298]))
    if tmp[556734]
    {
      unknown tmp[556741] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619305] "expr temp" "maybe param" "maybe type" "temp"
      (619308 'move' call_tmp[619305](68391 call stridable _mt[243] r1[68356]))
      unknown call_tmp[619312] "expr temp" "maybe param" "maybe type" "temp"
      (619315 'move' call_tmp[619312](68395 call stridable _mt[243] r2[68365]))
      unknown call_tmp[619317] "expr temp" "maybe param" "maybe type" "temp"
      (619320 'move' call_tmp[619317](68398 call == call_tmp[619305] call_tmp[619312]))
      (556743 'move' tmp[556741](419849 call isTrue call_tmp[619317]))
      (556748 'move' tmp[556733](556745 '_paramFoldLogical' tmp[556734] tmp[556741]))
    }
    {
      (556753 'move' tmp[556733](556750 '_paramFoldLogical' tmp[556734] 0))
    }
    (748305 call chpl_statementLevelSymbol tmp[556733])
  }
  function ident[68530](arg r1[68527]:range[64319](?), arg r2[68536]:range[64319](?)) param : _unknown[51] "no doc"
  {
    unknown ret[510175] "RVV" "param" "temp"
    (510180 'move' ret[510175](510179 'deref' 0))
    (510177 return ret[510175])
  }
  function range[64319](?).safeCast[68555](arg _mt[68560]:_MT[238], arg this[68557]:range[64319](?) :
  range[64319](?), arg t[68552]:range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510184] "RVV" "temp"
    unknown tmp[68563] "dead at end of block" "insert auto destroy"
    (541091 'default init var' tmp[68563] t[68552])
    (68566 'end of statement')
    unknown call_tmp[619324] "expr temp" "maybe param" "maybe type" "temp"
    (619327 'move' call_tmp[619324](68569 call boundedType _mt[243] tmp[68563]))
    unknown call_tmp[619331] "expr temp" "maybe param" "maybe type" "temp"
    (619334 'move' call_tmp[619331](68573 call boundedType _mt[243] this[68557]))
    unknown call_tmp[619336] "expr temp" "maybe param" "maybe type" "temp"
    (619339 'move' call_tmp[619336](68576 call != call_tmp[619324] call_tmp[619331]))
    unknown call_tmp[619341] "expr temp" "maybe param" "maybe type" "temp"
    (619344 'move' call_tmp[619341](68631 call _cond_test call_tmp[619336]))
    if call_tmp[619341]
    {
      unknown call_tmp[619348] "expr temp" "maybe param" "maybe type" "temp"
      (619351 'move' call_tmp[619348](68598 call boundedType _mt[243] this[68557]))
      unknown call_tmp[619353] "expr temp" "maybe param" "maybe type" "temp"
      (619356 'move' call_tmp[619353](68602 call _cast string[26] call_tmp[619348]))
      unknown call_tmp[619360] "expr temp" "maybe param" "maybe type" "temp"
      (619363 'move' call_tmp[619360](68622 call boundedType _mt[243] tmp[68563]))
      unknown call_tmp[619365] "expr temp" "maybe param" "maybe type" "temp"
      (619368 'move' call_tmp[619365](68626 call _cast string[26] call_tmp[619360]))
      (68628 call compilerError "cannot cast range from " call_tmp[619353] " to " call_tmp[619365])
      (475474 'end of statement' tmp[68563])
    }
    unknown call_tmp[619372] "expr temp" "maybe param" "maybe type" "temp"
    (619375 'move' call_tmp[619372](68636 call stridable _mt[243] tmp[68563]))
    unknown call_tmp[619377] "expr temp" "maybe param" "maybe type" "temp"
    (619380 'move' call_tmp[619377](68725 call _cond_test call_tmp[619372]))
    if call_tmp[619377]
    {
      unknown call_tmp[619384] "expr temp" "maybe param" "maybe type" "temp"
      (619387 'move' call_tmp[619384](68640 call _stride _mt[243] tmp[68563]))
      unknown call_tmp[619391] "expr temp" "maybe param" "maybe type" "temp"
      (619394 'move' call_tmp[619391](68644 call stride _mt[243] this[68557]))
      (68647 call = call_tmp[619384] call_tmp[619391])
      (475476 'end of statement' tmp[68563])
      unknown call_tmp[619398] "expr temp" "maybe param" "maybe type" "temp"
      (619401 'move' call_tmp[619398](68652 call _alignment _mt[243] tmp[68563]))
      unknown call_tmp[619405] "expr temp" "maybe param" "maybe type" "temp"
      (619408 'move' call_tmp[619405](68657 call alignment _mt[243] this[68557]))
      unknown call_tmp[619410] "expr temp" "maybe param" "maybe type" "temp"
      (619413 'move' call_tmp[619410](68661 call chpl__idxToInt call_tmp[619405]))
      unknown call_tmp[619419] "expr temp" "maybe param" "maybe type" "temp"
      (619422 'move' call_tmp[619419](68668 call intIdxType _mt[243] tmp[68563]))
      unknown call_tmp[619424] "expr temp" "maybe param" "maybe type" "temp"
      (619427 'move' call_tmp[619424](68672 call(68662 call (partial) safeCast _mt[243] call_tmp[619410]) call_tmp[619419]))
      (68673 call = call_tmp[619398] call_tmp[619424])
      (475478 'end of statement' tmp[68563] tmp[68563])
      unknown call_tmp[619431] "expr temp" "maybe param" "maybe type" "temp"
      (619434 'move' call_tmp[619431](68677 call _aligned _mt[243] tmp[68563]))
      unknown call_tmp[619438] "expr temp" "maybe param" "maybe type" "temp"
      (619441 'move' call_tmp[619438](68681 call aligned _mt[243] this[68557]))
      (68684 call = call_tmp[619431] call_tmp[619438])
      (475481 'end of statement' tmp[68563])
    }
    {
      unknown call_tmp[619445] "expr temp" "maybe param" "maybe type" "temp"
      (619448 'move' call_tmp[619445](68688 call stride _mt[243] this[68557]))
      unknown call_tmp[619450] "expr temp" "maybe param" "maybe type" "temp"
      (619453 'move' call_tmp[619450](68692 call != call_tmp[619445] 1))
      unknown call_tmp[619455] "expr temp" "maybe param" "maybe type" "temp"
      (619458 'move' call_tmp[619455](68721 call _cond_test call_tmp[619450]))
      if call_tmp[619455]
      {
        (68718 call safeCastCheckHalt module=[255] HaltWrappers[210018] "illegal safeCast from non-unit stride range to unstridable range")
        (357688 'referenced modules list' HaltWrappers[210018])
      }
    }
    unknown call_tmp[619462] "expr temp" "maybe param" "maybe type" "temp"
    (619465 'move' call_tmp[619462](68731 call _low _mt[243] tmp[68563]))
    unknown call_tmp[619469] "expr temp" "maybe param" "maybe type" "temp"
    (619472 'move' call_tmp[619469](68735 call _low _mt[243] this[68557]))
    unknown call_tmp[619478] "expr temp" "maybe param" "maybe type" "temp"
    (619481 'move' call_tmp[619478](68742 call intIdxType _mt[243] tmp[68563]))
    unknown call_tmp[619483] "expr temp" "maybe param" "maybe type" "temp"
    (619486 'move' call_tmp[619483](68746 call(68738 call (partial) safeCast _mt[243] call_tmp[619469]) call_tmp[619478]))
    (68747 call = call_tmp[619462] call_tmp[619483])
    (475484 'end of statement' tmp[68563] tmp[68563])
    unknown call_tmp[619490] "expr temp" "maybe param" "maybe type" "temp"
    (619493 'move' call_tmp[619490](68751 call _high _mt[243] tmp[68563]))
    unknown call_tmp[619497] "expr temp" "maybe param" "maybe type" "temp"
    (619500 'move' call_tmp[619497](68755 call _high _mt[243] this[68557]))
    unknown call_tmp[619506] "expr temp" "maybe param" "maybe type" "temp"
    (619509 'move' call_tmp[619506](68762 call intIdxType _mt[243] tmp[68563]))
    unknown call_tmp[619511] "expr temp" "maybe param" "maybe type" "temp"
    (619514 'move' call_tmp[619511](68766 call(68758 call (partial) safeCast _mt[243] call_tmp[619497]) call_tmp[619506]))
    (68767 call = call_tmp[619490] call_tmp[619511])
    (475487 'end of statement' tmp[68563] tmp[68563])
    (510189 'move' ret[510184](510188 'deref' tmp[68563]))
    gotoReturn _end_safeCast[510182] _end_safeCast[510182]
    (475490 'end of statement' tmp[68563])
    label _end_safeCast[510182]
    (510186 return ret[510184])
  }
  function _cast[68784](arg t[68781]:range[64319](?), arg r[68790]:range[64319](?)) : _unknown[51] "no doc"
  {
    unknown ret[510195] "RVV" "temp"
    unknown tmp[68794] "dead at end of block" "insert auto destroy"
    (541093 'default init var' tmp[68794] t[68781])
    (68797 'end of statement')
    unknown call_tmp[619518] "expr temp" "maybe param" "maybe type" "temp"
    (619521 'move' call_tmp[619518](68800 call boundedType _mt[243] tmp[68794]))
    unknown call_tmp[619525] "expr temp" "maybe param" "maybe type" "temp"
    (619528 'move' call_tmp[619525](68804 call boundedType _mt[243] r[68790]))
    unknown call_tmp[619530] "expr temp" "maybe param" "maybe type" "temp"
    (619533 'move' call_tmp[619530](68807 call != call_tmp[619518] call_tmp[619525]))
    unknown call_tmp[619535] "expr temp" "maybe param" "maybe type" "temp"
    (619538 'move' call_tmp[619535](68830 call _cond_test call_tmp[619530]))
    if call_tmp[619535]
    {
      unknown call_tmp[619542] "expr temp" "maybe param" "maybe type" "temp"
      (619545 'move' call_tmp[619542](68813 call boundedType _mt[243] r[68790]))
      unknown call_tmp[619547] "expr temp" "maybe param" "maybe type" "temp"
      (619550 'move' call_tmp[619547](68817 call _cast string[26] call_tmp[619542]))
      unknown call_tmp[619554] "expr temp" "maybe param" "maybe type" "temp"
      (619557 'move' call_tmp[619554](68821 call boundedType _mt[243] tmp[68794]))
      unknown call_tmp[619559] "expr temp" "maybe param" "maybe type" "temp"
      (619562 'move' call_tmp[619559](68825 call _cast string[26] call_tmp[619554]))
      (68827 call compilerError "cannot cast range from " call_tmp[619547] " to " call_tmp[619559])
      (475492 'end of statement' tmp[68794])
    }
    unknown call_tmp[619566] "expr temp" "maybe param" "maybe type" "temp"
    (619569 'move' call_tmp[619566](68835 call stridable _mt[243] tmp[68794]))
    unknown call_tmp[619571] "expr temp" "maybe param" "maybe type" "temp"
    (619574 'move' call_tmp[619571](68878 call _cond_test call_tmp[619566]))
    if call_tmp[619571]
    {
      unknown call_tmp[619578] "expr temp" "maybe param" "maybe type" "temp"
      (619581 'move' call_tmp[619578](68839 call _stride _mt[243] tmp[68794]))
      unknown call_tmp[619585] "expr temp" "maybe param" "maybe type" "temp"
      (619588 'move' call_tmp[619585](68843 call _stride _mt[243] r[68790]))
      (68846 call = call_tmp[619578] call_tmp[619585])
      (475494 'end of statement' tmp[68794])
      unknown call_tmp[619592] "expr temp" "maybe param" "maybe type" "temp"
      (619595 'move' call_tmp[619592](68851 call _alignment _mt[243] tmp[68794]))
      unknown call_tmp[619599] "expr temp" "maybe param" "maybe type" "temp"
      (619602 'move' call_tmp[619599](68859 call intIdxType _mt[243] tmp[68794]))
      unknown call_tmp[619606] "expr temp" "maybe param" "maybe type" "temp"
      (619609 'move' call_tmp[619606](68855 call _alignment _mt[243] r[68790]))
      unknown call_tmp[619611] "expr temp" "maybe param" "maybe type" "temp"
      (619614 'move' call_tmp[619611](68862 call _cast call_tmp[619599] call_tmp[619606]))
      (68864 call = call_tmp[619592] call_tmp[619611])
      (475496 'end of statement' tmp[68794] tmp[68794])
      unknown call_tmp[619618] "expr temp" "maybe param" "maybe type" "temp"
      (619621 'move' call_tmp[619618](68868 call _aligned _mt[243] tmp[68794]))
      unknown call_tmp[619625] "expr temp" "maybe param" "maybe type" "temp"
      (619628 'move' call_tmp[619625](68872 call _aligned _mt[243] r[68790]))
      (68875 call = call_tmp[619618] call_tmp[619625])
      (475499 'end of statement' tmp[68794])
    }
    unknown call_tmp[619632] "expr temp" "maybe param" "maybe type" "temp"
    (619635 'move' call_tmp[619632](68883 call _low _mt[243] tmp[68794]))
    unknown call_tmp[619639] "expr temp" "maybe param" "maybe type" "temp"
    (619642 'move' call_tmp[619639](68891 call intIdxType _mt[243] tmp[68794]))
    unknown call_tmp[619646] "expr temp" "maybe param" "maybe type" "temp"
    (619649 'move' call_tmp[619646](68887 call low _mt[243] r[68790]))
    unknown call_tmp[619651] "expr temp" "maybe param" "maybe type" "temp"
    (619654 'move' call_tmp[619651](68894 call _cast call_tmp[619639] call_tmp[619646]))
    (68896 call = call_tmp[619632] call_tmp[619651])
    (475501 'end of statement' tmp[68794] tmp[68794])
    unknown call_tmp[619658] "expr temp" "maybe param" "maybe type" "temp"
    (619661 'move' call_tmp[619658](68900 call _high _mt[243] tmp[68794]))
    unknown call_tmp[619665] "expr temp" "maybe param" "maybe type" "temp"
    (619668 'move' call_tmp[619665](68908 call intIdxType _mt[243] tmp[68794]))
    unknown call_tmp[619672] "expr temp" "maybe param" "maybe type" "temp"
    (619675 'move' call_tmp[619672](68904 call high _mt[243] r[68790]))
    unknown call_tmp[619677] "expr temp" "maybe param" "maybe type" "temp"
    (619680 'move' call_tmp[619677](68911 call _cast call_tmp[619665] call_tmp[619672]))
    (68913 call = call_tmp[619658] call_tmp[619677])
    (475504 'end of statement' tmp[68794] tmp[68794])
    (510200 'move' ret[510195](510199 'deref' tmp[68794]))
    gotoReturn _end__cast[510193] _end__cast[510193]
    (475507 'end of statement' tmp[68794])
    label _end__cast[510193]
    (510197 return ret[510195])
  }
  function range[64319](?).boundsCheck[68936](arg _mt[68941]:_MT[238], arg this[68938]:range[64319](?) :
  range[64319](?), arg other[68933]:range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510206] "RVV" "temp"
    unknown tmp[419887] "maybe param" "temp"
    (419898 'move' tmp[419887](68955 call(68951 call (partial) isAmbiguous _mt[243] this[68938])))
    unknown call_tmp[619684] "expr temp" "maybe param" "maybe type" "temp"
    (619687 'move' call_tmp[619684](419900 call _cond_invalid tmp[419887]))
    if call_tmp[619684]
    {
      (419903 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556760] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556761] "maybe param" "temp"
    unknown call_tmp[619689] "expr temp" "maybe param" "maybe type" "temp"
    (619692 'move' call_tmp[619689](419888 call isTrue tmp[419887]))
    (556766 'move' tmp[556761](556764 call _cond_test call_tmp[619689]))
    if tmp[556761]
    {
      (556771 'move' tmp[556760](556768 '_paramFoldLogical' tmp[556761] 1))
    }
    {
      unknown tmp[556773] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619696] "expr temp" "maybe param" "maybe type" "temp"
      (619699 'move' call_tmp[619696](68961 call(68957 call (partial) isAmbiguous _mt[243] other[68933])))
      (556775 'move' tmp[556773](419892 call isTrue call_tmp[619696]))
      (556780 'move' tmp[556760](556777 '_paramFoldLogical' tmp[556761] tmp[556773]))
    }
    unknown call_tmp[619701] "expr temp" "maybe param" "maybe type" "temp"
    (619704 'move' call_tmp[619701](68967 call _cond_test tmp[556760]))
    if call_tmp[619701]
    {
      (510211 'move' ret[510206](510210 'deref' 0))
      gotoReturn _end_boundsCheck[510204] _end_boundsCheck[510204]
    }
    (510216 'move' ret[510206](510215 'deref' 1))
    label _end_boundsCheck[510204]
    (510208 return ret[510206])
  }
  where {
    unknown call_tmp[619706] "expr temp" "maybe param" "maybe type" "temp"
    (619709 'move' call_tmp[619706](455794 'query' other[68933] 2))
    (68948 call == call_tmp[619706] boundedNone[64214])
  }
  function range[64319](?).boundsCheck[68994](arg _mt[68999]:_MT[238], arg this[68996]:range[64319](?) :
  range[64319](?), arg other[68991]:range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510220] "RVV" "temp"
    unknown tmp[419908] "maybe param" "temp"
    (419919 'move' tmp[419908](69006 call(69002 call (partial) isAmbiguous _mt[243] this[68996])))
    unknown call_tmp[619713] "expr temp" "maybe param" "maybe type" "temp"
    (619716 'move' call_tmp[619713](419921 call _cond_invalid tmp[419908]))
    if call_tmp[619713]
    {
      (419924 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556787] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556788] "maybe param" "temp"
    unknown call_tmp[619718] "expr temp" "maybe param" "maybe type" "temp"
    (619721 'move' call_tmp[619718](419909 call isTrue tmp[419908]))
    (556793 'move' tmp[556788](556791 call _cond_test call_tmp[619718]))
    if tmp[556788]
    {
      (556798 'move' tmp[556787](556795 '_paramFoldLogical' tmp[556788] 1))
    }
    {
      unknown tmp[556800] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619725] "expr temp" "maybe param" "maybe type" "temp"
      (619728 'move' call_tmp[619725](69012 call(69008 call (partial) isAmbiguous _mt[243] other[68991])))
      (556802 'move' tmp[556800](419913 call isTrue call_tmp[619725]))
      (556807 'move' tmp[556787](556804 '_paramFoldLogical' tmp[556788] tmp[556800]))
    }
    unknown call_tmp[619730] "expr temp" "maybe param" "maybe type" "temp"
    (619733 'move' call_tmp[619730](69018 call _cond_test tmp[556787]))
    if call_tmp[619730]
    {
      (510225 'move' ret[510220](510224 'deref' 0))
      gotoReturn _end_boundsCheck[510218] _end_boundsCheck[510218]
    }
    unknown tmp[419929] "maybe param" "temp"
    (419940 'move' tmp[419929](455813 'query' other[68991] 3))
    unknown call_tmp[619735] "expr temp" "maybe param" "maybe type" "temp"
    (619738 'move' call_tmp[619735](419942 call _cond_invalid tmp[419929]))
    if call_tmp[619735]
    {
      (419945 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown boundedOther[69077] "dead at end of block" "insert auto destroy"
    unknown tmp[556814] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556815] "maybe param" "temp"
    unknown call_tmp[619740] "expr temp" "maybe param" "maybe type" "temp"
    (619743 'move' call_tmp[619740](419930 call isTrue tmp[419929]))
    (556820 'move' tmp[556815](556818 call _cond_test call_tmp[619740]))
    if tmp[556815]
    {
      (556825 'move' tmp[556814](556822 '_paramFoldLogical' tmp[556815] 1))
    }
    {
      unknown tmp[556827] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619747] "expr temp" "maybe param" "maybe type" "temp"
      (619750 'move' call_tmp[619747](69034 call stridable _mt[243] this[68996]))
      (556829 'move' tmp[556827](419934 call isTrue call_tmp[619747]))
      (556834 'move' tmp[556814](556831 '_paramFoldLogical' tmp[556815] tmp[556827]))
    }
    unknown tmp[556841] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556842] "maybe param" "temp"
    unknown call_tmp[619754] "expr temp" "maybe param" "maybe type" "temp"
    (619757 'move' call_tmp[619754](69044 call(69040 call (partial) hasLowBound _mt[243] other[68991])))
    (556847 'move' tmp[556842](556845 call _cond_test call_tmp[619754]))
    if tmp[556842]
    {
      unknown tmp[556849] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556851 'move' tmp[556849](69046 call low _mt[243] other[68991]))
      (556856 'move' tmp[556841](556853 '_paramFoldLogical' tmp[556842] tmp[556849]))
    }
    {
      unknown tmp[556858] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556860 'move' tmp[556858](374480 call low _mt[243] this[68996]))
      (556865 'move' tmp[556841](556862 '_paramFoldLogical' tmp[556842] tmp[556858]))
    }
    unknown tmp[556872] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556873] "maybe param" "temp"
    unknown call_tmp[619765] "expr temp" "maybe param" "maybe type" "temp"
    (619768 'move' call_tmp[619765](69058 call(69054 call (partial) hasHighBound _mt[243] other[68991])))
    (556878 'move' tmp[556873](556876 call _cond_test call_tmp[619765]))
    if tmp[556873]
    {
      unknown tmp[556880] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556882 'move' tmp[556880](69060 call high _mt[243] other[68991]))
      (556887 'move' tmp[556872](556884 '_paramFoldLogical' tmp[556873] tmp[556880]))
    }
    {
      unknown tmp[556889] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556891 'move' tmp[556889](374484 call high _mt[243] this[68996]))
      (556896 'move' tmp[556872](556893 '_paramFoldLogical' tmp[556873] tmp[556889]))
    }
    unknown call_tmp[619776] "expr temp" "maybe param" "maybe type" "temp"
    (619779 'move' call_tmp[619776](374475 call idxType _mt[243] this[68996]))
    unknown call_tmp[619783] "expr temp" "maybe param" "maybe type" "temp"
    (619786 'move' call_tmp[619783](69068 call stride _mt[243] other[68991]))
    unknown call_tmp[619790] "expr temp" "maybe param" "maybe type" "temp"
    (619793 'move' call_tmp[619790](69072 call alignment _mt[243] other[68991]))
    unknown call_tmp[619795] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (619798 'move' call_tmp[619795](747837 'new' range[64319](?) call_tmp[619776] bounded[64208] tmp[556814] tmp[556841] tmp[556872] call_tmp[619783] call_tmp[619790] 1))
    (541095 'init var' boundedOther[69077] call_tmp[619795])
    (69080 'end of statement')
    unknown tmp[419950] "maybe param" "temp"
    unknown call_tmp[619802] "expr temp" "maybe param" "maybe type" "temp"
    (619805 'move' call_tmp[619802](69082 call size _mt[243] boundedOther[69077]))
    (419961 'move' tmp[419950](69086 call == call_tmp[619802] 0))
    unknown call_tmp[619807] "expr temp" "maybe param" "maybe type" "temp"
    (619810 'move' call_tmp[619807](419963 call _cond_invalid tmp[419950]))
    if call_tmp[619807]
    {
      (419966 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556903] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556904] "maybe param" "temp"
    unknown call_tmp[619812] "expr temp" "maybe param" "maybe type" "temp"
    (619815 'move' call_tmp[619812](419951 call isTrue tmp[419950]))
    (556909 'move' tmp[556904](556907 call _cond_test call_tmp[619812]))
    if tmp[556904]
    {
      (556914 'move' tmp[556903](556911 '_paramFoldLogical' tmp[556904] 1))
    }
    {
      unknown tmp[556916] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619819] "expr temp" "maybe param" "maybe type" "temp"
      (619822 'move' call_tmp[619819](69091 call(374488 call (partial) contains _mt[243] this[68996]) boundedOther[69077]))
      (556918 'move' tmp[556916](419955 call isTrue call_tmp[619819]))
      (556923 'move' tmp[556903](556920 '_paramFoldLogical' tmp[556904] tmp[556916]))
    }
    (510230 'move' ret[510220](510229 'deref' tmp[556903]))
    gotoReturn _end_boundsCheck[510218] _end_boundsCheck[510218]
    (475516 'end of statement' boundedOther[69077])
    label _end_boundsCheck[510218]
    (510222 return ret[510220])
  }
  function range[64319](?).boundsCheck[69105](arg _mt[69110]:_MT[238], arg this[69107]:range[64319](?) :
  range[64319](?), arg other[69102] :
  (374494 call idxType _mt[243] this[69107])) : _unknown[51] "inline" "method"
  {
    unknown ret[510236] "RVV" "temp"
    unknown call_tmp[619828] "expr temp" "maybe param" "maybe type" "temp"
    (619831 'move' call_tmp[619828](69115 call(374498 call (partial) contains _mt[243] this[69107]) other[69102]))
    (510241 'move' ret[510236](510240 'deref' call_tmp[619828]))
    (510238 return ret[510236])
  }
  function range[64319](?).alignLow[69124](arg _mt[69129]:_MT[238], ref arg this[69126]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510245] "RVV" "temp"
    unknown tmp[419971] "maybe param" "temp"
    (419982 'move' tmp[419971] 1)
    unknown call_tmp[619833] "expr temp" "maybe param" "maybe type" "temp"
    (619836 'move' call_tmp[619833](419984 call _cond_invalid tmp[419971]))
    if call_tmp[619833]
    {
      (419987 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556930] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556931] "maybe param" "temp"
    unknown call_tmp[619838] "expr temp" "maybe param" "maybe type" "temp"
    (619841 'move' call_tmp[619838](419972 call isTrue tmp[419971]))
    (556936 'move' tmp[556931](556934 call _cond_test call_tmp[619838]))
    if tmp[556931]
    {
      unknown tmp[556938] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619845] "expr temp" "maybe param" "maybe type" "temp"
      (619848 'move' call_tmp[619845](69137 call(69133 call (partial) isAmbiguous _mt[243] this[69126])))
      (556940 'move' tmp[556938](419975 call isTrue call_tmp[619845]))
      (556945 'move' tmp[556930](556942 '_paramFoldLogical' tmp[556931] tmp[556938]))
    }
    {
      (556950 'move' tmp[556930](556947 '_paramFoldLogical' tmp[556931] 0))
    }
    unknown call_tmp[619850] "expr temp" "maybe param" "maybe type" "temp"
    (619853 'move' call_tmp[619850](69166 call _cond_test tmp[556930]))
    if call_tmp[619850]
    {
      (69164 call boundsCheckHalt module=[255] HaltWrappers[210018] "alignLow -- Cannot be applied to a range with ambiguous alignment.")
      (357733 'referenced modules list' HaltWrappers[210018])
    }
    unknown call_tmp[619857] "expr temp" "maybe param" "maybe type" "temp"
    (619860 'move' call_tmp[619857](374505 call stridable _mt[243] this[69126]))
    unknown call_tmp[619862] "expr temp" "maybe param" "maybe type" "temp"
    (619865 'move' call_tmp[619862](69181 call _cond_test call_tmp[619857]))
    if call_tmp[619862]
    {
      unknown call_tmp[619869] "expr temp" "maybe param" "maybe type" "temp"
      (619872 'move' call_tmp[619869](374510 call _low _mt[243] this[69126]))
      unknown call_tmp[619876] "expr temp" "maybe param" "maybe type" "temp"
      (619879 'move' call_tmp[619876](69175 call alignedLowAsInt _mt[243] this[69126]))
      (69178 call = call_tmp[619869] call_tmp[619876])
    }
    (510250 'move' ret[510245](510249 'deref' this[69126]))
    (510247 return ret[510245])
  }
  function range[64319](?).alignHigh[69194](arg _mt[69199]:_MT[238], ref arg this[69196]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510254] "RVV" "temp"
    unknown tmp[419992] "maybe param" "temp"
    (420003 'move' tmp[419992] 1)
    unknown call_tmp[619881] "expr temp" "maybe param" "maybe type" "temp"
    (619884 'move' call_tmp[619881](420005 call _cond_invalid tmp[419992]))
    if call_tmp[619881]
    {
      (420008 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556957] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556958] "maybe param" "temp"
    unknown call_tmp[619886] "expr temp" "maybe param" "maybe type" "temp"
    (619889 'move' call_tmp[619886](419993 call isTrue tmp[419992]))
    (556963 'move' tmp[556958](556961 call _cond_test call_tmp[619886]))
    if tmp[556958]
    {
      unknown tmp[556965] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619893] "expr temp" "maybe param" "maybe type" "temp"
      (619896 'move' call_tmp[619893](69207 call(69203 call (partial) isAmbiguous _mt[243] this[69196])))
      (556967 'move' tmp[556965](419996 call isTrue call_tmp[619893]))
      (556972 'move' tmp[556957](556969 '_paramFoldLogical' tmp[556958] tmp[556965]))
    }
    {
      (556977 'move' tmp[556957](556974 '_paramFoldLogical' tmp[556958] 0))
    }
    unknown call_tmp[619898] "expr temp" "maybe param" "maybe type" "temp"
    (619901 'move' call_tmp[619898](69234 call _cond_test tmp[556957]))
    if call_tmp[619898]
    {
      (69232 call boundsCheckHalt module=[255] HaltWrappers[210018] "alignHigh -- Cannot be applied to a range with ambiguous alignment.")
      (357741 'referenced modules list' HaltWrappers[210018])
    }
    unknown call_tmp[619905] "expr temp" "maybe param" "maybe type" "temp"
    (619908 'move' call_tmp[619905](374517 call stridable _mt[243] this[69196]))
    unknown call_tmp[619910] "expr temp" "maybe param" "maybe type" "temp"
    (619913 'move' call_tmp[619910](69249 call _cond_test call_tmp[619905]))
    if call_tmp[619910]
    {
      unknown call_tmp[619917] "expr temp" "maybe param" "maybe type" "temp"
      (619920 'move' call_tmp[619917](374522 call _high _mt[243] this[69196]))
      unknown call_tmp[619924] "expr temp" "maybe param" "maybe type" "temp"
      (619927 'move' call_tmp[619924](69243 call alignedHighAsInt _mt[243] this[69196]))
      (69246 call = call_tmp[619917] call_tmp[619924])
    }
    (510259 'move' ret[510254](510258 'deref' this[69196]))
    (510256 return ret[510254])
  }
  function range[64319](?).indexOrder[69266](arg _mt[69271]:_MT[238], arg this[69268]:range[64319](?) :
  range[64319](?), arg ind[69263] :
  (374528 call idxType _mt[243] this[69268])) : _unknown[51] "method"
  {
    unknown ret[510263] "RVV" "temp"
    unknown tmp[420013] "maybe param" "temp"
    (420024 'move' tmp[420013] 1)
    unknown call_tmp[619931] "expr temp" "maybe param" "maybe type" "temp"
    (619934 'move' call_tmp[619931](420026 call _cond_invalid tmp[420013]))
    if call_tmp[619931]
    {
      (420029 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556984] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556985] "maybe param" "temp"
    unknown call_tmp[619936] "expr temp" "maybe param" "maybe type" "temp"
    (619939 'move' call_tmp[619936](420014 call isTrue tmp[420013]))
    (556990 'move' tmp[556985](556988 call _cond_test call_tmp[619936]))
    if tmp[556985]
    {
      unknown tmp[556992] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619943] "expr temp" "maybe param" "maybe type" "temp"
      (619946 'move' call_tmp[619943](69279 call(69275 call (partial) isAmbiguous _mt[243] this[69268])))
      (556994 'move' tmp[556992](420017 call isTrue call_tmp[619943]))
      (556999 'move' tmp[556984](556996 '_paramFoldLogical' tmp[556985] tmp[556992]))
    }
    {
      (557004 'move' tmp[556984](557001 '_paramFoldLogical' tmp[556985] 0))
    }
    unknown call_tmp[619948] "expr temp" "maybe param" "maybe type" "temp"
    (619951 'move' call_tmp[619948](69306 call _cond_test tmp[556984]))
    if call_tmp[619948]
    {
      (69304 call boundsCheckHalt module=[255] HaltWrappers[210018] "indexOrder -- Undefined on a range with ambiguous alignment.")
      (357749 'referenced modules list' HaltWrappers[210018])
    }
    unknown call_tmp[619955] "expr temp" "maybe param" "maybe type" "temp"
    (619958 'move' call_tmp[619955](69315 call(374533 call (partial) contains _mt[243] this[69268]) ind[69263]))
    unknown call_tmp[619960] "expr temp" "maybe param" "maybe type" "temp"
    (619963 'move' call_tmp[619960](69316 call ! call_tmp[619955]))
    unknown call_tmp[619965] "expr temp" "maybe param" "maybe type" "temp"
    (619968 'move' call_tmp[619965](69326 call _cond_test call_tmp[619960]))
    if call_tmp[619965]
    {
      unknown call_tmp[619972] "expr temp" "maybe param" "maybe type" "temp"
      (619975 'move' call_tmp[619972](374538 call intIdxType _mt[243] this[69268]))
      unknown call_tmp[619977] "expr temp" "maybe param" "maybe type" "temp"
      (619980 'move' call_tmp[619977](69319 call - 1))
      unknown call_tmp[619982] "expr temp" "maybe param" "maybe type" "temp"
      (619985 'move' call_tmp[619982](69322 call _cast call_tmp[619972] call_tmp[619977]))
      (510268 'move' ret[510263](510267 'deref' call_tmp[619982]))
      gotoReturn _end_indexOrder[510261] _end_indexOrder[510261]
    }
    unknown call_tmp[619989] "expr temp" "maybe param" "maybe type" "temp"
    (619992 'move' call_tmp[619989](374543 call stridable _mt[243] this[69268]))
    unknown call_tmp[619994] "expr temp" "maybe param" "maybe type" "temp"
    (619997 'move' call_tmp[619994](69332 call ! call_tmp[619989]))
    unknown call_tmp[619999] "expr temp" "maybe param" "maybe type" "temp"
    (620002 'move' call_tmp[619999](69396 call _cond_test call_tmp[619994]))
    if call_tmp[619999]
    {
      unknown call_tmp[620006] "expr temp" "maybe param" "maybe type" "temp"
      (620009 'move' call_tmp[620006](69339 call(69335 call (partial) hasLowBound _mt[243] this[69268])))
      unknown call_tmp[620011] "expr temp" "maybe param" "maybe type" "temp"
      (620014 'move' call_tmp[620011](69349 call _cond_test call_tmp[620006]))
      if call_tmp[620011]
      {
        unknown call_tmp[620016] "expr temp" "maybe param" "maybe type" "temp"
        (620019 'move' call_tmp[620016](69343 call chpl__idxToInt ind[69263]))
        unknown call_tmp[620023] "expr temp" "maybe param" "maybe type" "temp"
        (620026 'move' call_tmp[620023](374549 call _low _mt[243] this[69268]))
        unknown call_tmp[620028] "expr temp" "maybe param" "maybe type" "temp"
        (620031 'move' call_tmp[620028](69345 call - call_tmp[620016] call_tmp[620023]))
        (510273 'move' ret[510263](510272 'deref' call_tmp[620028]))
        gotoReturn _end_indexOrder[510261] _end_indexOrder[510261]
      }
    }
    {
      unknown call_tmp[620035] "expr temp" "maybe param" "maybe type" "temp"
      (620038 'move' call_tmp[620035](69362 call(69358 call (partial) hasFirst _mt[243] this[69268])))
      unknown call_tmp[620040] "expr temp" "maybe param" "maybe type" "temp"
      (620043 'move' call_tmp[620040](69390 call _cond_test call_tmp[620035]))
      if call_tmp[620040]
      {
        unknown call_tmp[620047] "expr temp" "maybe param" "maybe type" "temp"
        (620050 'move' call_tmp[620047](374567 call intIdxType _mt[243] this[69268]))
        unknown call_tmp[620054] "expr temp" "maybe param" "maybe type" "temp"
        (620057 'move' call_tmp[620054](374554 call strType _mt[243] this[69268]))
        unknown call_tmp[620059] "expr temp" "maybe param" "maybe type" "temp"
        (620062 'move' call_tmp[620059](69366 call chpl__idxToInt ind[69263]))
        unknown call_tmp[620064] "expr temp" "maybe param" "maybe type" "temp"
        (620067 'move' call_tmp[620064](69368 call _cast call_tmp[620054] call_tmp[620059]))
        unknown call_tmp[620071] "expr temp" "maybe param" "maybe type" "temp"
        (620074 'move' call_tmp[620071](374558 call strType _mt[243] this[69268]))
        unknown call_tmp[620078] "expr temp" "maybe param" "maybe type" "temp"
        (620081 'move' call_tmp[620078](69372 call first _mt[243] this[69268]))
        unknown call_tmp[620083] "expr temp" "maybe param" "maybe type" "temp"
        (620086 'move' call_tmp[620083](69376 call chpl__idxToInt call_tmp[620078]))
        unknown call_tmp[620088] "expr temp" "maybe param" "maybe type" "temp"
        (620091 'move' call_tmp[620088](69378 call _cast call_tmp[620071] call_tmp[620083]))
        unknown call_tmp[620093] "expr temp" "maybe param" "maybe type" "temp"
        (620096 'move' call_tmp[620093](69380 call - call_tmp[620064] call_tmp[620088]))
        unknown call_tmp[620100] "expr temp" "maybe param" "maybe type" "temp"
        (620103 'move' call_tmp[620100](374563 call _stride _mt[243] this[69268]))
        unknown call_tmp[620105] "expr temp" "maybe param" "maybe type" "temp"
        (620108 'move' call_tmp[620105](69383 call / call_tmp[620093] call_tmp[620100]))
        unknown call_tmp[620110] "expr temp" "maybe param" "maybe type" "temp"
        (620113 'move' call_tmp[620110](69386 call _cast call_tmp[620047] call_tmp[620105]))
        (510278 'move' ret[510263](510277 'deref' call_tmp[620110]))
        gotoReturn _end_indexOrder[510261] _end_indexOrder[510261]
      }
    }
    unknown call_tmp[620117] "expr temp" "maybe param" "maybe type" "temp"
    (620120 'move' call_tmp[620117](374571 call intIdxType _mt[243] this[69268]))
    unknown call_tmp[620122] "expr temp" "maybe param" "maybe type" "temp"
    (620125 'move' call_tmp[620122](69401 call - 1))
    unknown call_tmp[620127] "expr temp" "maybe param" "maybe type" "temp"
    (620130 'move' call_tmp[620127](69404 call _cast call_tmp[620117] call_tmp[620122]))
    (510283 'move' ret[510263](510282 'deref' call_tmp[620127]))
    label _end_indexOrder[510261]
    (510265 return ret[510263])
  }
  function range[64319](?).orderToIndex[69417](arg _mt[69422]:_MT[238], arg this[69419]:range[64319](?) :
  range[64319](?), arg ord[69414]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510287] "RVV" "temp"
    unknown call_tmp[620132] "expr temp" "maybe param" "maybe type" "temp"
    (620135 'move' call_tmp[620132](69608 call _cond_test 1))
    if call_tmp[620132]
    {
      unknown call_tmp[620139] "expr temp" "maybe param" "maybe type" "temp"
      (620142 'move' call_tmp[620139](69428 call(374582 call (partial) hasFirst _mt[243] this[69419])))
      unknown call_tmp[620144] "expr temp" "maybe param" "maybe type" "temp"
      (620147 'move' call_tmp[620144](69429 call ! call_tmp[620139]))
      unknown call_tmp[620149] "expr temp" "maybe param" "maybe type" "temp"
      (620152 'move' call_tmp[620149](69455 call _cond_test call_tmp[620144]))
      if call_tmp[620149]
      {
        (69453 call boundsCheckHalt module=[255] HaltWrappers[210018] "invoking orderToIndex on a range that has no first index")
        (357758 'referenced modules list' HaltWrappers[210018])
      }
      unknown call_tmp[620156] "expr temp" "maybe param" "maybe type" "temp"
      (620159 'move' call_tmp[620156](69463 call(374586 call (partial) isAmbiguous _mt[243] this[69419])))
      unknown call_tmp[620161] "expr temp" "maybe param" "maybe type" "temp"
      (620164 'move' call_tmp[620161](69488 call _cond_test call_tmp[620156]))
      if call_tmp[620161]
      {
        (69486 call boundsCheckHalt module=[255] HaltWrappers[210018] "invoking orderToIndex on a range that is ambiguously aligned")
        (357764 'referenced modules list' HaltWrappers[210018])
      }
      unknown call_tmp[620166] "expr temp" "maybe param" "maybe type" "temp"
      (620169 'move' call_tmp[620166](69495 call < ord[69414] 0))
      unknown call_tmp[620171] "expr temp" "maybe param" "maybe type" "temp"
      (620174 'move' call_tmp[620171](69527 call _cond_test call_tmp[620166]))
      if call_tmp[620171]
      {
        unknown call_tmp[620176] "expr temp" "maybe param" "maybe type" "temp"
        (620179 'move' call_tmp[620176](69520 call _cast string[26] ord[69414]))
        unknown call_tmp[620181] "expr temp" "maybe param" "maybe type" "temp"
        (620184 'move' call_tmp[620181](69522 call + "invoking orderToIndex on a negative integer: " call_tmp[620176]))
        (69525 call boundsCheckHalt module=[255] HaltWrappers[210018] call_tmp[620181])
        (357770 'referenced modules list' HaltWrappers[210018])
      }
      unknown tmp[420034] "maybe param" "temp"
      (420045 'move' tmp[420034](69535 call isBoundedRange this[69419]))
      unknown call_tmp[620186] "expr temp" "maybe param" "maybe type" "temp"
      (620189 'move' call_tmp[620186](420047 call _cond_invalid tmp[420034]))
      if call_tmp[620186]
      {
        (420050 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557011] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557012] "maybe param" "temp"
      unknown call_tmp[620191] "expr temp" "maybe param" "maybe type" "temp"
      (620194 'move' call_tmp[620191](420035 call isTrue tmp[420034]))
      (557017 'move' tmp[557012](557015 call _cond_test call_tmp[620191]))
      if tmp[557012]
      {
        unknown tmp[557019] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[620198] "expr temp" "maybe param" "maybe type" "temp"
        (620201 'move' call_tmp[620198](69538 call size _mt[243] this[69419]))
        unknown call_tmp[620203] "expr temp" "maybe param" "maybe type" "temp"
        (620206 'move' call_tmp[620203](69541 call >= ord[69414] call_tmp[620198]))
        (557021 'move' tmp[557019](420038 call isTrue call_tmp[620203]))
        (557026 'move' tmp[557011](557023 '_paramFoldLogical' tmp[557012] tmp[557019]))
      }
      {
        (557031 'move' tmp[557011](557028 '_paramFoldLogical' tmp[557012] 0))
      }
      unknown call_tmp[620208] "expr temp" "maybe param" "maybe type" "temp"
      (620211 'move' call_tmp[620208](69603 call _cond_test tmp[557011]))
      if call_tmp[620208]
      {
        unknown call_tmp[620213] "expr temp" "maybe param" "maybe type" "temp"
        (620216 'move' call_tmp[620213](69568 call _cast string[26] ord[69414]))
        unknown call_tmp[620218] "expr temp" "maybe param" "maybe type" "temp"
        (620221 'move' call_tmp[620218](69570 call + "invoking orderToIndex on an integer " call_tmp[620213]))
        unknown call_tmp[620223] "expr temp" "maybe param" "maybe type" "temp"
        (620226 'move' call_tmp[620223](69589 call + call_tmp[620218] " that is larger than the range's number of indices "))
        unknown call_tmp[620230] "expr temp" "maybe param" "maybe type" "temp"
        (620233 'move' call_tmp[620230](69592 call size _mt[243] this[69419]))
        unknown call_tmp[620235] "expr temp" "maybe param" "maybe type" "temp"
        (620238 'move' call_tmp[620235](69596 call _cast string[26] call_tmp[620230]))
        unknown call_tmp[620240] "expr temp" "maybe param" "maybe type" "temp"
        (620243 'move' call_tmp[620240](69598 call + call_tmp[620223] call_tmp[620235]))
        (69601 call boundsCheckHalt module=[255] HaltWrappers[210018] call_tmp[620240])
        (357777 'referenced modules list' HaltWrappers[210018])
      }
    }
    unknown call_tmp[620249] "expr temp" "maybe param" "maybe type" "temp"
    (620252 'move' call_tmp[620249](69616 call firstAsInt _mt[243] this[69419]))
    unknown call_tmp[620256] "expr temp" "maybe param" "maybe type" "temp"
    (620259 'move' call_tmp[620256](69621 call stride _mt[243] this[69419]))
    unknown call_tmp[620261] "expr temp" "maybe param" "maybe type" "temp"
    (620264 'move' call_tmp[620261](69625 call chpl__addRangeStrides call_tmp[620249] call_tmp[620256] ord[69414]))
    unknown call_tmp[620266] "expr temp" "maybe param" "maybe type" "temp"
    (620269 'move' call_tmp[620266](69627 call(374595 call (partial) chpl_intToIdx _mt[243] this[69419]) call_tmp[620261]))
    unknown call_tmp[620273] "expr temp" "maybe param" "maybe type" "temp"
    (620276 'move' call_tmp[620273](510292 call idxType _mt[243] this[69419]))
    (510296 'move' ret[510287](510295 'coerce' call_tmp[620266] call_tmp[620273]))
    (510289 return ret[510287])
  }
  { scopeless type
    (374577 call idxType _mt[243] this[69419])
  }
  function range[64319](?).translate[69640](arg _mt[69645]:_MT[238], arg this[69642]:range[64319](?) :
  range[64319](?), arg offset[69637]:integral[199](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510300] "RVV" "temp"
    unknown call_tmp[620280] "expr temp" "maybe param" "maybe type" "temp"
    (620283 'move' call_tmp[620280](69649 call + this[69642] offset[69637]))
    (510305 'move' ret[510300](510304 'deref' call_tmp[620280]))
    (510302 return ret[510300])
  }
  function range[64319](?).translate[69661](arg _mt[69666]:_MT[238], arg this[69663]:range[64319](?) :
  range[64319](?), arg i[69659]:_any[178](?)) : _unknown[51] "inline" "method" "no doc" "no return value for void"
  {
    (69687 call compilerError "offsets must be of integral type")
    (510307 return _void[55])
  }
  function range[64319](?)._effAlmt[69695](arg _mt[69700]:_MT[238], arg this[69697]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510311] "RVV" "temp"
    unknown call_tmp[620287] "expr temp" "maybe param" "maybe type" "temp"
    (620290 'move' call_tmp[620287](374608 call alignment _mt[243] this[69697]))
    (510316 'move' ret[510311](510315 'deref' call_tmp[620287]))
    (510313 return ret[510311])
  }
  where {
    (374604 call stridable _mt[243] this[69697])
  }
  function range[64319](?)._effAlmt[69713](arg _mt[69718]:_MT[238], arg this[69715]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510320] "RVV" "temp"
    unknown call_tmp[620296] "expr temp" "maybe param" "maybe type" "temp"
    (620299 'move' call_tmp[620296](69726 call(374617 call (partial) chpl_intToIdx _mt[243] this[69715]) 0))
    (510325 'move' ret[510320](510324 'deref' call_tmp[620296]))
    (510322 return ret[510320])
  }
  where {
    unknown call_tmp[620303] "expr temp" "maybe param" "maybe type" "temp"
    (620306 'move' call_tmp[620303](374613 call stridable _mt[243] this[69715]))
    (69721 call ! call_tmp[620303])
  }
  function range[64319](?).interior[69740](arg _mt[69745]:_MT[238], arg this[69742]:range[64319](?) :
  range[64319](?), arg offset[69737]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69773 call compilerError "interior is not supported on unbounded ranges")
    (510327 return _void[55])
  }
  where {
    unknown call_tmp[620310] "expr temp" "maybe param" "maybe type" "temp"
    (620313 'move' call_tmp[620310](374623 call boundedType _mt[243] this[69742]))
    (69752 call != call_tmp[620310] bounded[64208])
  }
  function range[64319](?).interior[69786](arg _mt[69791]:_MT[238], arg this[69788]:range[64319](?) :
  range[64319](?), arg offset[69783]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510331] "RVV" "temp"
    unknown call_tmp[620319] "expr temp" "maybe param" "maybe type" "temp"
    (620322 'move' call_tmp[620319](374628 call intIdxType _mt[243] this[69788]))
    unknown call_tmp[620324] "maybe param" "maybe type" "temp"
    (620327 'move' call_tmp[620324](69799 call(69794 call (partial) safeCast _mt[243] offset[69783]) call_tmp[620319]))
    const i[69800] "dead at end of block" "const" "insert auto destroy"
    (541097 'init var' i[69800] call_tmp[620324])
    (69803 'end of statement')
    unknown call_tmp[620329] "expr temp" "maybe param" "maybe type" "temp"
    (620332 'move' call_tmp[620329](69807 call < i[69800] 0))
    unknown call_tmp[620334] "expr temp" "maybe param" "maybe type" "temp"
    (620337 'move' call_tmp[620334](69834 call _cond_test call_tmp[620329]))
    if call_tmp[620334]
    {
      unknown call_tmp[620341] "expr temp" "maybe param" "maybe type" "temp"
      (620344 'move' call_tmp[620341](374635 call idxType _mt[243] this[69788]))
      unknown call_tmp[620348] "expr temp" "maybe param" "maybe type" "temp"
      (620351 'move' call_tmp[620348](374640 call boundedType _mt[243] this[69788]))
      unknown call_tmp[620355] "expr temp" "maybe param" "maybe type" "temp"
      (620358 'move' call_tmp[620355](374645 call stridable _mt[243] this[69788]))
      unknown call_tmp[620362] "expr temp" "maybe param" "maybe type" "temp"
      (620365 'move' call_tmp[620362](374649 call low _mt[243] this[69788]))
      unknown call_tmp[620371] "expr temp" "maybe param" "maybe type" "temp"
      (620374 'move' call_tmp[620371](374658 call _low _mt[243] this[69788]))
      unknown call_tmp[620376] "expr temp" "maybe param" "maybe type" "temp"
      (620379 'move' call_tmp[620376](69819 call - call_tmp[620371] 1))
      unknown call_tmp[620381] "expr temp" "maybe param" "maybe type" "temp"
      (620384 'move' call_tmp[620381](69822 call - call_tmp[620376] i[69800]))
      unknown call_tmp[620386] "expr temp" "maybe param" "maybe type" "temp"
      (620389 'move' call_tmp[620386](69825 call(374653 call (partial) chpl_intToIdx _mt[243] this[69788]) call_tmp[620381]))
      unknown call_tmp[620393] "expr temp" "maybe param" "maybe type" "temp"
      (620396 'move' call_tmp[620393](374663 call stride _mt[243] this[69788]))
      unknown call_tmp[620400] "expr temp" "maybe param" "maybe type" "temp"
      (620403 'move' call_tmp[620400](69829 call(374669 call (partial) _effAlmt _mt[243] this[69788])))
      unknown call_tmp[620407] "expr temp" "maybe param" "maybe type" "temp"
      (620410 'move' call_tmp[620407](374673 call aligned _mt[243] this[69788]))
      unknown call_tmp[620412] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620415 'move' call_tmp[620412](747838 'new' range[64319](?) call_tmp[620341] call_tmp[620348] call_tmp[620355] call_tmp[620362] call_tmp[620386] call_tmp[620393] call_tmp[620400] call_tmp[620407]))
      (510336 'move' ret[510331](510335 'deref' call_tmp[620412]))
      gotoReturn _end_interior[510329] _end_interior[510329]
      (475544 'end of statement' i[69800])
    }
    unknown call_tmp[620417] "expr temp" "maybe param" "maybe type" "temp"
    (620420 'move' call_tmp[620417](69841 call > i[69800] 0))
    unknown call_tmp[620422] "expr temp" "maybe param" "maybe type" "temp"
    (620425 'move' call_tmp[620422](69868 call _cond_test call_tmp[620417]))
    if call_tmp[620422]
    {
      unknown call_tmp[620429] "expr temp" "maybe param" "maybe type" "temp"
      (620432 'move' call_tmp[620429](374680 call idxType _mt[243] this[69788]))
      unknown call_tmp[620436] "expr temp" "maybe param" "maybe type" "temp"
      (620439 'move' call_tmp[620436](374685 call boundedType _mt[243] this[69788]))
      unknown call_tmp[620443] "expr temp" "maybe param" "maybe type" "temp"
      (620446 'move' call_tmp[620443](374690 call stridable _mt[243] this[69788]))
      unknown call_tmp[620452] "expr temp" "maybe param" "maybe type" "temp"
      (620455 'move' call_tmp[620452](374699 call _high _mt[243] this[69788]))
      unknown call_tmp[620457] "expr temp" "maybe param" "maybe type" "temp"
      (620460 'move' call_tmp[620457](69852 call + call_tmp[620452] 1))
      unknown call_tmp[620462] "expr temp" "maybe param" "maybe type" "temp"
      (620465 'move' call_tmp[620462](69855 call - call_tmp[620457] i[69800]))
      unknown call_tmp[620467] "expr temp" "maybe param" "maybe type" "temp"
      (620470 'move' call_tmp[620467](69858 call(374694 call (partial) chpl_intToIdx _mt[243] this[69788]) call_tmp[620462]))
      unknown call_tmp[620474] "expr temp" "maybe param" "maybe type" "temp"
      (620477 'move' call_tmp[620474](374704 call high _mt[243] this[69788]))
      unknown call_tmp[620481] "expr temp" "maybe param" "maybe type" "temp"
      (620484 'move' call_tmp[620481](374708 call stride _mt[243] this[69788]))
      unknown call_tmp[620488] "expr temp" "maybe param" "maybe type" "temp"
      (620491 'move' call_tmp[620488](69863 call(374712 call (partial) _effAlmt _mt[243] this[69788])))
      unknown call_tmp[620495] "expr temp" "maybe param" "maybe type" "temp"
      (620498 'move' call_tmp[620495](374716 call aligned _mt[243] this[69788]))
      unknown call_tmp[620500] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620503 'move' call_tmp[620500](747839 'new' range[64319](?) call_tmp[620429] call_tmp[620436] call_tmp[620443] call_tmp[620467] call_tmp[620474] call_tmp[620481] call_tmp[620488] call_tmp[620495]))
      (510341 'move' ret[510331](510340 'deref' call_tmp[620500]))
      gotoReturn _end_interior[510329] _end_interior[510329]
      (475546 'end of statement' i[69800])
    }
    unknown call_tmp[620507] "expr temp" "maybe param" "maybe type" "temp"
    (620510 'move' call_tmp[620507](374722 call idxType _mt[243] this[69788]))
    unknown call_tmp[620514] "expr temp" "maybe param" "maybe type" "temp"
    (620517 'move' call_tmp[620514](374727 call boundedType _mt[243] this[69788]))
    unknown call_tmp[620521] "expr temp" "maybe param" "maybe type" "temp"
    (620524 'move' call_tmp[620521](374732 call stridable _mt[243] this[69788]))
    unknown call_tmp[620528] "expr temp" "maybe param" "maybe type" "temp"
    (620531 'move' call_tmp[620528](374736 call low _mt[243] this[69788]))
    unknown call_tmp[620535] "expr temp" "maybe param" "maybe type" "temp"
    (620538 'move' call_tmp[620535](374740 call high _mt[243] this[69788]))
    unknown call_tmp[620542] "expr temp" "maybe param" "maybe type" "temp"
    (620545 'move' call_tmp[620542](374744 call stride _mt[243] this[69788]))
    unknown call_tmp[620549] "expr temp" "maybe param" "maybe type" "temp"
    (620552 'move' call_tmp[620549](69884 call(374748 call (partial) _effAlmt _mt[243] this[69788])))
    unknown call_tmp[620556] "expr temp" "maybe param" "maybe type" "temp"
    (620559 'move' call_tmp[620556](374752 call aligned _mt[243] this[69788]))
    unknown call_tmp[620561] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620564 'move' call_tmp[620561](747840 'new' range[64319](?) call_tmp[620507] call_tmp[620514] call_tmp[620521] call_tmp[620528] call_tmp[620535] call_tmp[620542] call_tmp[620549] call_tmp[620556]))
    (510346 'move' ret[510331](510345 'deref' call_tmp[620561]))
    label _end_interior[510329]
    (510333 return ret[510331])
  }
  function range[64319](?).exterior[69898](arg _mt[69903]:_MT[238], arg this[69900]:range[64319](?) :
  range[64319](?), arg offset[69895]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69931 call compilerError "exterior is not supported on unbounded ranges")
    (510348 return _void[55])
  }
  where {
    unknown call_tmp[620568] "expr temp" "maybe param" "maybe type" "temp"
    (620571 'move' call_tmp[620568](374758 call boundedType _mt[243] this[69900]))
    (69910 call != call_tmp[620568] bounded[64208])
  }
  function range[64319](?).exterior[69944](arg _mt[69949]:_MT[238], arg this[69946]:range[64319](?) :
  range[64319](?), arg offset[69941]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510352] "RVV" "temp"
    unknown call_tmp[620577] "expr temp" "maybe param" "maybe type" "temp"
    (620580 'move' call_tmp[620577](374763 call intIdxType _mt[243] this[69946]))
    unknown call_tmp[620582] "maybe param" "maybe type" "temp"
    (620585 'move' call_tmp[620582](69957 call(69952 call (partial) safeCast _mt[243] offset[69941]) call_tmp[620577]))
    const i[69958] "dead at end of block" "const" "insert auto destroy"
    (541099 'init var' i[69958] call_tmp[620582])
    (69961 'end of statement')
    unknown call_tmp[620587] "expr temp" "maybe param" "maybe type" "temp"
    (620590 'move' call_tmp[620587](69965 call < i[69958] 0))
    unknown call_tmp[620592] "expr temp" "maybe param" "maybe type" "temp"
    (620595 'move' call_tmp[620592](69995 call _cond_test call_tmp[620587]))
    if call_tmp[620592]
    {
      unknown call_tmp[620599] "expr temp" "maybe param" "maybe type" "temp"
      (620602 'move' call_tmp[620599](374770 call idxType _mt[243] this[69946]))
      unknown call_tmp[620606] "expr temp" "maybe param" "maybe type" "temp"
      (620609 'move' call_tmp[620606](374775 call boundedType _mt[243] this[69946]))
      unknown call_tmp[620613] "expr temp" "maybe param" "maybe type" "temp"
      (620616 'move' call_tmp[620613](374780 call stridable _mt[243] this[69946]))
      unknown call_tmp[620622] "expr temp" "maybe param" "maybe type" "temp"
      (620625 'move' call_tmp[620622](374789 call _low _mt[243] this[69946]))
      unknown call_tmp[620627] "expr temp" "maybe param" "maybe type" "temp"
      (620630 'move' call_tmp[620627](69976 call + call_tmp[620622] i[69958]))
      unknown call_tmp[620632] "expr temp" "maybe param" "maybe type" "temp"
      (620635 'move' call_tmp[620632](69979 call(374784 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620627]))
      unknown call_tmp[620641] "expr temp" "maybe param" "maybe type" "temp"
      (620644 'move' call_tmp[620641](374799 call _low _mt[243] this[69946]))
      unknown call_tmp[620646] "expr temp" "maybe param" "maybe type" "temp"
      (620649 'move' call_tmp[620646](69983 call - call_tmp[620641] 1))
      unknown call_tmp[620651] "expr temp" "maybe param" "maybe type" "temp"
      (620654 'move' call_tmp[620651](69986 call(374794 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620646]))
      unknown call_tmp[620658] "expr temp" "maybe param" "maybe type" "temp"
      (620661 'move' call_tmp[620658](374803 call stride _mt[243] this[69946]))
      unknown call_tmp[620665] "expr temp" "maybe param" "maybe type" "temp"
      (620668 'move' call_tmp[620665](69990 call(374807 call (partial) _effAlmt _mt[243] this[69946])))
      unknown call_tmp[620672] "expr temp" "maybe param" "maybe type" "temp"
      (620675 'move' call_tmp[620672](374811 call aligned _mt[243] this[69946]))
      unknown call_tmp[620677] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620680 'move' call_tmp[620677](747841 'new' range[64319](?) call_tmp[620599] call_tmp[620606] call_tmp[620613] call_tmp[620632] call_tmp[620651] call_tmp[620658] call_tmp[620665] call_tmp[620672]))
      (510357 'move' ret[510352](510356 'deref' call_tmp[620677]))
      gotoReturn _end_exterior[510350] _end_exterior[510350]
      (475550 'end of statement' i[69958])
    }
    unknown call_tmp[620682] "expr temp" "maybe param" "maybe type" "temp"
    (620685 'move' call_tmp[620682](70002 call > i[69958] 0))
    unknown call_tmp[620687] "expr temp" "maybe param" "maybe type" "temp"
    (620690 'move' call_tmp[620687](70032 call _cond_test call_tmp[620682]))
    if call_tmp[620687]
    {
      unknown call_tmp[620694] "expr temp" "maybe param" "maybe type" "temp"
      (620697 'move' call_tmp[620694](374818 call idxType _mt[243] this[69946]))
      unknown call_tmp[620701] "expr temp" "maybe param" "maybe type" "temp"
      (620704 'move' call_tmp[620701](374823 call boundedType _mt[243] this[69946]))
      unknown call_tmp[620708] "expr temp" "maybe param" "maybe type" "temp"
      (620711 'move' call_tmp[620708](374828 call stridable _mt[243] this[69946]))
      unknown call_tmp[620717] "expr temp" "maybe param" "maybe type" "temp"
      (620720 'move' call_tmp[620717](374837 call _high _mt[243] this[69946]))
      unknown call_tmp[620722] "expr temp" "maybe param" "maybe type" "temp"
      (620725 'move' call_tmp[620722](70013 call + call_tmp[620717] 1))
      unknown call_tmp[620727] "expr temp" "maybe param" "maybe type" "temp"
      (620730 'move' call_tmp[620727](70016 call(374832 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620722]))
      unknown call_tmp[620736] "expr temp" "maybe param" "maybe type" "temp"
      (620739 'move' call_tmp[620736](374846 call _high _mt[243] this[69946]))
      unknown call_tmp[620741] "expr temp" "maybe param" "maybe type" "temp"
      (620744 'move' call_tmp[620741](70020 call + call_tmp[620736] i[69958]))
      unknown call_tmp[620746] "expr temp" "maybe param" "maybe type" "temp"
      (620749 'move' call_tmp[620746](70023 call(374841 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620741]))
      unknown call_tmp[620753] "expr temp" "maybe param" "maybe type" "temp"
      (620756 'move' call_tmp[620753](374851 call stride _mt[243] this[69946]))
      unknown call_tmp[620760] "expr temp" "maybe param" "maybe type" "temp"
      (620763 'move' call_tmp[620760](70027 call(374855 call (partial) _effAlmt _mt[243] this[69946])))
      unknown call_tmp[620767] "expr temp" "maybe param" "maybe type" "temp"
      (620770 'move' call_tmp[620767](374859 call aligned _mt[243] this[69946]))
      unknown call_tmp[620772] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620775 'move' call_tmp[620772](747842 'new' range[64319](?) call_tmp[620694] call_tmp[620701] call_tmp[620708] call_tmp[620727] call_tmp[620746] call_tmp[620753] call_tmp[620760] call_tmp[620767]))
      (510362 'move' ret[510352](510361 'deref' call_tmp[620772]))
      gotoReturn _end_exterior[510350] _end_exterior[510350]
      (475552 'end of statement' i[69958])
    }
    unknown call_tmp[620779] "expr temp" "maybe param" "maybe type" "temp"
    (620782 'move' call_tmp[620779](374865 call idxType _mt[243] this[69946]))
    unknown call_tmp[620786] "expr temp" "maybe param" "maybe type" "temp"
    (620789 'move' call_tmp[620786](374870 call boundedType _mt[243] this[69946]))
    unknown call_tmp[620793] "expr temp" "maybe param" "maybe type" "temp"
    (620796 'move' call_tmp[620793](374875 call stridable _mt[243] this[69946]))
    unknown call_tmp[620800] "expr temp" "maybe param" "maybe type" "temp"
    (620803 'move' call_tmp[620800](374879 call low _mt[243] this[69946]))
    unknown call_tmp[620807] "expr temp" "maybe param" "maybe type" "temp"
    (620810 'move' call_tmp[620807](374883 call high _mt[243] this[69946]))
    unknown call_tmp[620814] "expr temp" "maybe param" "maybe type" "temp"
    (620817 'move' call_tmp[620814](374887 call stride _mt[243] this[69946]))
    unknown call_tmp[620821] "expr temp" "maybe param" "maybe type" "temp"
    (620824 'move' call_tmp[620821](70048 call(374891 call (partial) _effAlmt _mt[243] this[69946])))
    unknown call_tmp[620828] "expr temp" "maybe param" "maybe type" "temp"
    (620831 'move' call_tmp[620828](374895 call aligned _mt[243] this[69946]))
    unknown call_tmp[620833] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620836 'move' call_tmp[620833](747843 'new' range[64319](?) call_tmp[620779] call_tmp[620786] call_tmp[620793] call_tmp[620800] call_tmp[620807] call_tmp[620814] call_tmp[620821] call_tmp[620828]))
    (510367 'move' ret[510352](510366 'deref' call_tmp[620833]))
    label _end_exterior[510350]
    (510354 return ret[510352])
  }
  function range[64319](?).expand[70062](arg _mt[70067]:_MT[238], arg this[70064]:range[64319](?) :
  range[64319](?), arg offset[70059]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (70095 call compilerError "expand() is not supported on unbounded ranges")
    (510369 return _void[55])
  }
  where {
    unknown call_tmp[620840] "expr temp" "maybe param" "maybe type" "temp"
    (620843 'move' call_tmp[620840](374901 call boundedType _mt[243] this[70064]))
    (70074 call != call_tmp[620840] bounded[64208])
  }
  function range[64319](?).expand[70108](arg _mt[70113]:_MT[238], arg this[70110]:range[64319](?) :
  range[64319](?), arg offset[70105]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510373] "RVV" "temp"
    unknown call_tmp[620849] "expr temp" "maybe param" "maybe type" "temp"
    (620852 'move' call_tmp[620849](374906 call intIdxType _mt[243] this[70110]))
    unknown call_tmp[620854] "maybe param" "maybe type" "temp"
    (620857 'move' call_tmp[620854](70121 call(70116 call (partial) safeCast _mt[243] offset[70105]) call_tmp[620849]))
    const i[70122] "dead at end of block" "const" "insert auto destroy"
    (541101 'init var' i[70122] call_tmp[620854])
    (70125 'end of statement')
    unknown call_tmp[620861] "expr temp" "maybe param" "maybe type" "temp"
    (620864 'move' call_tmp[620861](374912 call idxType _mt[243] this[70110]))
    unknown call_tmp[620868] "expr temp" "maybe param" "maybe type" "temp"
    (620871 'move' call_tmp[620868](374917 call boundedType _mt[243] this[70110]))
    unknown call_tmp[620875] "expr temp" "maybe param" "maybe type" "temp"
    (620878 'move' call_tmp[620875](374922 call stridable _mt[243] this[70110]))
    unknown call_tmp[620884] "expr temp" "maybe param" "maybe type" "temp"
    (620887 'move' call_tmp[620884](374931 call _low _mt[243] this[70110]))
    unknown call_tmp[620889] "expr temp" "maybe param" "maybe type" "temp"
    (620892 'move' call_tmp[620889](70136 call - call_tmp[620884] i[70122]))
    unknown call_tmp[620894] "expr temp" "maybe param" "maybe type" "temp"
    (620897 'move' call_tmp[620894](70139 call(374926 call (partial) chpl_intToIdx _mt[243] this[70110]) call_tmp[620889]))
    unknown call_tmp[620903] "expr temp" "maybe param" "maybe type" "temp"
    (620906 'move' call_tmp[620903](374941 call _high _mt[243] this[70110]))
    unknown call_tmp[620908] "expr temp" "maybe param" "maybe type" "temp"
    (620911 'move' call_tmp[620908](70143 call + call_tmp[620903] i[70122]))
    unknown call_tmp[620913] "expr temp" "maybe param" "maybe type" "temp"
    (620916 'move' call_tmp[620913](70146 call(374936 call (partial) chpl_intToIdx _mt[243] this[70110]) call_tmp[620908]))
    unknown call_tmp[620920] "expr temp" "maybe param" "maybe type" "temp"
    (620923 'move' call_tmp[620920](374946 call stride _mt[243] this[70110]))
    unknown call_tmp[620927] "expr temp" "maybe param" "maybe type" "temp"
    (620930 'move' call_tmp[620927](374950 call alignment _mt[243] this[70110]))
    unknown call_tmp[620934] "expr temp" "maybe param" "maybe type" "temp"
    (620937 'move' call_tmp[620934](374955 call _aligned _mt[243] this[70110]))
    unknown call_tmp[620939] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620942 'move' call_tmp[620939](747844 'new' range[64319](?) call_tmp[620861] call_tmp[620868] call_tmp[620875] call_tmp[620894] call_tmp[620913] call_tmp[620920] call_tmp[620927] call_tmp[620934]))
    (510378 'move' ret[510373](510377 'deref' call_tmp[620939]))
    gotoReturn _end_expand[510371] _end_expand[510371]
    (475556 'end of statement' i[70122] i[70122])
    label _end_expand[510371]
    (510375 return ret[510373])
  }
  function =[70166](ref arg r1[70163]:range[64319](?), arg r2[70174]:range[64319](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[620946] "expr temp" "maybe param" "maybe type" "temp"
    (620949 'move' call_tmp[620946](70178 call boundedType _mt[243] r1[70163]))
    unknown call_tmp[620953] "expr temp" "maybe param" "maybe type" "temp"
    (620956 'move' call_tmp[620953](70182 call boundedType _mt[243] r2[70174]))
    unknown call_tmp[620958] "expr temp" "maybe param" "maybe type" "temp"
    (620961 'move' call_tmp[620958](70185 call != call_tmp[620946] call_tmp[620953]))
    unknown call_tmp[620963] "expr temp" "maybe param" "maybe type" "temp"
    (620966 'move' call_tmp[620963](70210 call _cond_test call_tmp[620958]))
    if call_tmp[620963]
    {
      (70208 call compilerError "type mismatch in assignment of ranges with different boundedType parameters")
    }
    unknown tmp[420076] "maybe param" "temp"
    unknown call_tmp[620968] "expr temp" "maybe param" "maybe type" "temp"
    (620971 'move' call_tmp[620968](455824 'query' r1[70163] c"stridable"))
    (420087 'move' tmp[420076](70217 call ! call_tmp[620968]))
    unknown call_tmp[620973] "expr temp" "maybe param" "maybe type" "temp"
    (620976 'move' call_tmp[620973](420089 call _cond_invalid tmp[420076]))
    if call_tmp[620973]
    {
      (420092 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557038] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557039] "maybe param" "temp"
    unknown call_tmp[620978] "expr temp" "maybe param" "maybe type" "temp"
    (620981 'move' call_tmp[620978](420077 call isTrue tmp[420076]))
    (557044 'move' tmp[557039](557042 call _cond_test call_tmp[620978]))
    if tmp[557039]
    {
      unknown tmp[557046] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[620983] "expr temp" "maybe param" "maybe type" "temp"
      (620986 'move' call_tmp[620983](455844 'query' r2[70174] c"stridable"))
      (557048 'move' tmp[557046](420080 call isTrue call_tmp[620983]))
      (557053 'move' tmp[557038](557050 '_paramFoldLogical' tmp[557039] tmp[557046]))
    }
    {
      (557058 'move' tmp[557038](557055 '_paramFoldLogical' tmp[557039] 0))
    }
    unknown call_tmp[620988] "expr temp" "maybe param" "maybe type" "temp"
    (620991 'move' call_tmp[620988](70278 call _cond_test tmp[557038]))
    if call_tmp[620988]
    {
      (70241 call compilerError "type mismatch in assignment of ranges with different stridable parameters")
    }
    {
      unknown tmp[420055] "maybe param" "temp"
      (420066 'move' tmp[420055](455827 'query' r1[70163] c"stridable"))
      unknown call_tmp[620993] "expr temp" "maybe param" "maybe type" "temp"
      (620996 'move' call_tmp[620993](420068 call _cond_invalid tmp[420055]))
      if call_tmp[620993]
      {
        (420071 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557065] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557066] "maybe param" "temp"
      unknown call_tmp[620998] "expr temp" "maybe param" "maybe type" "temp"
      (621001 'move' call_tmp[620998](420056 call isTrue tmp[420055]))
      (557071 'move' tmp[557066](557069 call _cond_test call_tmp[620998]))
      if tmp[557066]
      {
        unknown tmp[557073] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621003] "expr temp" "maybe param" "maybe type" "temp"
        (621006 'move' call_tmp[621003](455847 'query' r2[70174] c"stridable"))
        (557075 'move' tmp[557073](420059 call isTrue call_tmp[621003]))
        (557080 'move' tmp[557065](557077 '_paramFoldLogical' tmp[557066] tmp[557073]))
      }
      {
        (557085 'move' tmp[557065](557082 '_paramFoldLogical' tmp[557066] 0))
      }
      unknown call_tmp[621008] "expr temp" "maybe param" "maybe type" "temp"
      (621011 'move' call_tmp[621008](70272 call _cond_test tmp[557065]))
      if call_tmp[621008]
      {
        unknown call_tmp[621015] "expr temp" "maybe param" "maybe type" "temp"
        (621018 'move' call_tmp[621015](70248 call _stride _mt[243] r1[70163]))
        unknown call_tmp[621022] "expr temp" "maybe param" "maybe type" "temp"
        (621025 'move' call_tmp[621022](70252 call stride _mt[243] r2[70174]))
        (70255 call = call_tmp[621015] call_tmp[621022])
      }
      {
        unknown call_tmp[621027] "expr temp" "maybe param" "maybe type" "temp"
        (621030 'move' call_tmp[621027](455830 'query' r1[70163] c"stridable"))
        unknown call_tmp[621032] "expr temp" "maybe param" "maybe type" "temp"
        (621035 'move' call_tmp[621032](70267 call _cond_test call_tmp[621027]))
        if call_tmp[621032]
        {
          unknown call_tmp[621039] "expr temp" "maybe param" "maybe type" "temp"
          (621042 'move' call_tmp[621039](70260 call _stride _mt[243] r1[70163]))
          (70264 call = call_tmp[621039] 1)
        }
      }
    }
    unknown call_tmp[621046] "expr temp" "maybe param" "maybe type" "temp"
    (621049 'move' call_tmp[621046](70285 call _low _mt[243] r1[70163]))
    unknown call_tmp[621053] "expr temp" "maybe param" "maybe type" "temp"
    (621056 'move' call_tmp[621053](70289 call _low _mt[243] r2[70174]))
    (70292 call = call_tmp[621046] call_tmp[621053])
    (475565 'end of statement')
    unknown call_tmp[621060] "expr temp" "maybe param" "maybe type" "temp"
    (621063 'move' call_tmp[621060](70296 call _high _mt[243] r1[70163]))
    unknown call_tmp[621067] "expr temp" "maybe param" "maybe type" "temp"
    (621070 'move' call_tmp[621067](70300 call _high _mt[243] r2[70174]))
    (70303 call = call_tmp[621060] call_tmp[621067])
    (475566 'end of statement')
    unknown call_tmp[621072] "expr temp" "maybe param" "maybe type" "temp"
    (621075 'move' call_tmp[621072](455833 'query' r1[70163] c"stridable"))
    unknown call_tmp[621077] "expr temp" "maybe param" "maybe type" "temp"
    (621080 'move' call_tmp[621077](70333 call _cond_test call_tmp[621072]))
    if call_tmp[621077]
    {
      unknown call_tmp[621084] "expr temp" "maybe param" "maybe type" "temp"
      (621087 'move' call_tmp[621084](70308 call _alignment _mt[243] r1[70163]))
      unknown call_tmp[621091] "expr temp" "maybe param" "maybe type" "temp"
      (621094 'move' call_tmp[621091](70313 call alignment _mt[243] r2[70174]))
      unknown call_tmp[621096] "expr temp" "maybe param" "maybe type" "temp"
      (621099 'move' call_tmp[621096](70317 call chpl__idxToInt call_tmp[621091]))
      (70318 call = call_tmp[621084] call_tmp[621096])
      (475567 'end of statement')
      unknown call_tmp[621103] "expr temp" "maybe param" "maybe type" "temp"
      (621106 'move' call_tmp[621103](70323 call _aligned _mt[243] r1[70163]))
      unknown call_tmp[621110] "expr temp" "maybe param" "maybe type" "temp"
      (621113 'move' call_tmp[621110](70327 call aligned _mt[243] r2[70174]))
      (70330 call = call_tmp[621103] call_tmp[621110])
    }
    (510382 return _void[55])
  }
  function +[70353](arg r[70350]:range[64319](?), arg offset[70356]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510386] "RVV" "temp"
    unknown call_tmp[621117] "expr temp" "maybe param" "maybe type" "temp"
    (621120 'move' call_tmp[621117](70361 call intIdxType _mt[243] r[70350]))
    unknown call_tmp[621122] "maybe param" "maybe type" "temp"
    (621125 'move' call_tmp[621122](70364 call _cast call_tmp[621117] offset[70356]))
    const i[70366] "dead at end of block" "const" "insert auto destroy"
    (541103 'init var' i[70366] call_tmp[621122])
    (70369 'end of statement')
    unknown call_tmp[621127] "expr temp" "maybe param" "maybe type" "temp"
    (621130 'move' call_tmp[621127](455857 'query' r[70350] 1))
    unknown strType[70375] "dead at end of block" "insert auto destroy" "type variable"(70374 call chpl__rangeStrideType call_tmp[621127])
    unknown call_tmp[621132] "expr temp" "maybe param" "maybe type" "temp"
    (621135 'move' call_tmp[621132](541107 'query' r[70350] 1))
    (541110 'move' strType[70375](541106 call chpl__rangeStrideType call_tmp[621132]))
    (475569 'end of statement')
    unknown call_tmp[621137] "expr temp" "maybe param" "maybe type" "temp"
    (621140 'move' call_tmp[621137](455860 'query' r[70350] 1))
    unknown call_tmp[621142] "expr temp" "maybe param" "maybe type" "temp"
    (621145 'move' call_tmp[621142](455866 'query' r[70350] 2))
    unknown call_tmp[621147] "expr temp" "maybe param" "maybe type" "temp"
    (621150 'move' call_tmp[621147](455872 'query' r[70350] 3))
    unknown call_tmp[621156] "expr temp" "maybe param" "maybe type" "temp"
    (621159 'move' call_tmp[621156](70391 call _low _mt[243] r[70350]))
    unknown call_tmp[621161] "expr temp" "maybe param" "maybe type" "temp"
    (621164 'move' call_tmp[621161](70395 call + call_tmp[621156] i[70366]))
    unknown call_tmp[621166] "expr temp" "maybe param" "maybe type" "temp"
    (621169 'move' call_tmp[621166](70398 call(70387 call (partial) chpl_intToIdx _mt[243] r[70350]) call_tmp[621161]))
    unknown call_tmp[621175] "expr temp" "maybe param" "maybe type" "temp"
    (621178 'move' call_tmp[621175](70404 call _high _mt[243] r[70350]))
    unknown call_tmp[621180] "expr temp" "maybe param" "maybe type" "temp"
    (621183 'move' call_tmp[621180](70408 call + call_tmp[621175] i[70366]))
    unknown call_tmp[621185] "expr temp" "maybe param" "maybe type" "temp"
    (621188 'move' call_tmp[621185](70411 call(70400 call (partial) chpl_intToIdx _mt[243] r[70350]) call_tmp[621180]))
    unknown call_tmp[621192] "expr temp" "maybe param" "maybe type" "temp"
    (621195 'move' call_tmp[621192](70413 call stride _mt[243] r[70350]))
    unknown call_tmp[621197] "expr temp" "maybe param" "maybe type" "temp"
    (621200 'move' call_tmp[621197](70417 call _cast strType[70375] call_tmp[621192]))
    unknown call_tmp[621206] "expr temp" "maybe param" "maybe type" "temp"
    (621209 'move' call_tmp[621206](70425 call alignment _mt[243] r[70350]))
    unknown call_tmp[621211] "expr temp" "maybe param" "maybe type" "temp"
    (621214 'move' call_tmp[621211](70429 call chpl__idxToInt call_tmp[621206]))
    unknown call_tmp[621216] "expr temp" "maybe param" "maybe type" "temp"
    (621219 'move' call_tmp[621216](70431 call + call_tmp[621211] i[70366]))
    unknown call_tmp[621221] "expr temp" "maybe param" "maybe type" "temp"
    (621224 'move' call_tmp[621221](70434 call(70420 call (partial) chpl_intToIdx _mt[243] r[70350]) call_tmp[621216]))
    unknown call_tmp[621228] "expr temp" "maybe param" "maybe type" "temp"
    (621231 'move' call_tmp[621228](70436 call aligned _mt[243] r[70350]))
    unknown call_tmp[621233] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621236 'move' call_tmp[621233](747845 'new' range[64319](?) call_tmp[621137] call_tmp[621142] call_tmp[621147] call_tmp[621166] call_tmp[621185] call_tmp[621197] call_tmp[621221] call_tmp[621228]))
    (510391 'move' ret[510386](510390 'deref' call_tmp[621233]))
    gotoReturn _end_+[510384] _end_+[510384]
    (475570 'end of statement' i[70366] i[70366] strType[70375] i[70366])
    label _end_+[510384]
    (510388 return ret[510386])
  }
  function +[70450](arg i[70447]:integral[199](?), arg r[70461]:range[64319](?)) : _unknown[51] "inline"
  {
    unknown ret[510397] "RVV" "temp"
    unknown call_tmp[621238] "expr temp" "maybe param" "maybe type" "temp"
    (621241 'move' call_tmp[621238](70466 call + r[70461] i[70447]))
    (510402 'move' ret[510397](510401 'deref' call_tmp[621238]))
    (510399 return ret[510397])
  }
  function -[70487](arg r[70484]:range[64319](?), arg i[70490]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510406] "RVV" "temp"
    unknown call_tmp[621243] "expr temp" "maybe param" "maybe type" "temp"
    (621246 'move' call_tmp[621243](455895 'query' r[70484] 1))
    unknown strType[70497] "dead at end of block" "insert auto destroy" "type variable"(70496 call chpl__rangeStrideType call_tmp[621243])
    unknown call_tmp[621248] "expr temp" "maybe param" "maybe type" "temp"
    (621251 'move' call_tmp[621248](541114 'query' r[70484] 1))
    (541117 'move' strType[70497](541113 call chpl__rangeStrideType call_tmp[621248]))
    (475576 'end of statement')
    unknown call_tmp[621253] "expr temp" "maybe param" "maybe type" "temp"
    (621256 'move' call_tmp[621253](455898 'query' r[70484] 1))
    unknown call_tmp[621258] "expr temp" "maybe param" "maybe type" "temp"
    (621261 'move' call_tmp[621258](455904 'query' r[70484] 2))
    unknown call_tmp[621263] "expr temp" "maybe param" "maybe type" "temp"
    (621266 'move' call_tmp[621263](455910 'query' r[70484] 3))
    unknown call_tmp[621272] "expr temp" "maybe param" "maybe type" "temp"
    (621275 'move' call_tmp[621272](70512 call _low _mt[243] r[70484]))
    unknown call_tmp[621277] "expr temp" "maybe param" "maybe type" "temp"
    (621280 'move' call_tmp[621277](70516 call - call_tmp[621272] i[70490]))
    unknown call_tmp[621282] "expr temp" "maybe param" "maybe type" "temp"
    (621285 'move' call_tmp[621282](70519 call(70508 call (partial) chpl_intToIdx _mt[243] r[70484]) call_tmp[621277]))
    unknown call_tmp[621291] "expr temp" "maybe param" "maybe type" "temp"
    (621294 'move' call_tmp[621291](70525 call _high _mt[243] r[70484]))
    unknown call_tmp[621296] "expr temp" "maybe param" "maybe type" "temp"
    (621299 'move' call_tmp[621296](70529 call - call_tmp[621291] i[70490]))
    unknown call_tmp[621301] "expr temp" "maybe param" "maybe type" "temp"
    (621304 'move' call_tmp[621301](70532 call(70521 call (partial) chpl_intToIdx _mt[243] r[70484]) call_tmp[621296]))
    unknown call_tmp[621308] "expr temp" "maybe param" "maybe type" "temp"
    (621311 'move' call_tmp[621308](70534 call stride _mt[243] r[70484]))
    unknown call_tmp[621313] "expr temp" "maybe param" "maybe type" "temp"
    (621316 'move' call_tmp[621313](70538 call _cast strType[70497] call_tmp[621308]))
    unknown call_tmp[621322] "expr temp" "maybe param" "maybe type" "temp"
    (621325 'move' call_tmp[621322](70546 call alignment _mt[243] r[70484]))
    unknown call_tmp[621327] "expr temp" "maybe param" "maybe type" "temp"
    (621330 'move' call_tmp[621327](70550 call chpl__idxToInt call_tmp[621322]))
    unknown call_tmp[621332] "expr temp" "maybe param" "maybe type" "temp"
    (621335 'move' call_tmp[621332](70552 call - call_tmp[621327] i[70490]))
    unknown call_tmp[621337] "expr temp" "maybe param" "maybe type" "temp"
    (621340 'move' call_tmp[621337](70555 call(70541 call (partial) chpl_intToIdx _mt[243] r[70484]) call_tmp[621332]))
    unknown call_tmp[621344] "expr temp" "maybe param" "maybe type" "temp"
    (621347 'move' call_tmp[621344](70557 call aligned _mt[243] r[70484]))
    unknown call_tmp[621349] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621352 'move' call_tmp[621349](747846 'new' range[64319](?) call_tmp[621253] call_tmp[621258] call_tmp[621263] call_tmp[621282] call_tmp[621301] call_tmp[621313] call_tmp[621337] call_tmp[621344]))
    (510411 'move' ret[510406](510410 'deref' call_tmp[621349]))
    gotoReturn _end_-[510404] _end_-[510404]
    (475577 'end of statement' strType[70497])
    label _end_-[510404]
    (510408 return ret[510406])
  }
  function chpl_check_step_integral[70569](arg step[70567]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[621354] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621357 'move' call_tmp[621354](70573 'typeof' step[70567]))
    unknown call_tmp[621359] "expr temp" "maybe param" "maybe type" "temp"
    (621362 'move' call_tmp[621359](70575 call isIntegral call_tmp[621354]))
    unknown call_tmp[621364] "expr temp" "maybe param" "maybe type" "temp"
    (621367 'move' call_tmp[621364](70576 call ! call_tmp[621359]))
    unknown call_tmp[621369] "expr temp" "maybe param" "maybe type" "temp"
    (621372 'move' call_tmp[621369](70604 call _cond_test call_tmp[621364]))
    if call_tmp[621369]
    {
      unknown call_tmp[621374] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621377 'move' call_tmp[621374](70598 'typeof' step[70567]))
      unknown call_tmp[621379] "expr temp" "maybe param" "maybe type" "temp"
      (621382 'move' call_tmp[621379](70600 call _cast string[26] call_tmp[621374]))
      (70602 call compilerError "can't apply 'by' using step of a non-integral type " call_tmp[621379])
    }
    (510415 return _void[55])
  }
  function chpl_need_to_check_step[70616](arg step[70614]:_any[178](?), arg strType[70618]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[510419] "RVV" "param" "temp"
    unknown call_tmp[621384] "expr temp" "maybe param" "maybe type" "temp"
    (621387 'move' call_tmp[621384](70624 call isInt strType[70618]))
    (70626 call compilerAssert call_tmp[621384])
    (475580 'end of statement')
    unknown tmp[420097] "maybe param" "temp"
    unknown call_tmp[621389] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621392 'move' call_tmp[621389](70630 'typeof' step[70614]))
    (420108 'move' tmp[420097](70632 call != call_tmp[621389] strType[70618]))
    unknown call_tmp[621394] "expr temp" "maybe param" "maybe type" "temp"
    (621397 'move' call_tmp[621394](420110 call _cond_invalid tmp[420097]))
    if call_tmp[621394]
    {
      (420113 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557092] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557093] "maybe param" "temp"
    unknown call_tmp[621399] "expr temp" "maybe param" "maybe type" "temp"
    (621402 'move' call_tmp[621399](420098 call isTrue tmp[420097]))
    (557098 'move' tmp[557093](557096 call _cond_test call_tmp[621399]))
    if tmp[557093]
    {
      unknown tmp[557100] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621404] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621407 'move' call_tmp[621404](70636 'typeof' step[70614]))
      unknown call_tmp[621409] "expr temp" "maybe param" "maybe type" "temp"
      (621412 'move' call_tmp[621409](70638 call numBits call_tmp[621404]))
      unknown call_tmp[621414] "expr temp" "maybe param" "maybe type" "temp"
      (621417 'move' call_tmp[621414](70642 call numBits strType[70618]))
      unknown call_tmp[621419] "expr temp" "maybe param" "maybe type" "temp"
      (621422 'move' call_tmp[621419](70643 call >= call_tmp[621409] call_tmp[621414]))
      (557102 'move' tmp[557100](420101 call isTrue call_tmp[621419]))
      (557107 'move' tmp[557092](557104 '_paramFoldLogical' tmp[557093] tmp[557100]))
    }
    {
      (557112 'move' tmp[557092](557109 '_paramFoldLogical' tmp[557093] 0))
    }
    (510424 'move' ret[510419](510423 'deref' tmp[557092]))
    (510421 return ret[510419])
  }
  function chpl_range_check_stride[70655](arg step[70653]:_any[178](?), arg idxType[70657]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70662 call chpl_check_step_integral step[70653])
    (475583 'end of statement')
    unknown strType[70669] "dead at end of block" "insert auto destroy" "type variable"(70668 call chpl__rangeStrideType idxType[70657])
    (541122 'move' strType[70669](541120 call chpl__rangeStrideType idxType[70657]))
    (475584 'end of statement')
    unknown call_tmp[621424] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621427 'move' call_tmp[621424](70674 'typeof' step[70653]))
    unknown call_tmp[621429] "expr temp" "maybe param" "maybe type" "temp"
    (621432 'move' call_tmp[621429](70676 call numBits call_tmp[621424]))
    unknown call_tmp[621434] "expr temp" "maybe param" "maybe type" "temp"
    (621437 'move' call_tmp[621434](70680 call numBits strType[70669]))
    unknown call_tmp[621439] "expr temp" "maybe param" "maybe type" "temp"
    (621442 'move' call_tmp[621439](70681 call > call_tmp[621429] call_tmp[621434]))
    unknown call_tmp[621444] "expr temp" "maybe param" "maybe type" "temp"
    (621447 'move' call_tmp[621444](70730 call _cond_test call_tmp[621439]))
    if call_tmp[621444]
    {
      unknown call_tmp[621449] "expr temp" "maybe param" "maybe type" "temp"
      (621452 'move' call_tmp[621449](70704 call _cast string[26] idxType[70657]))
      unknown call_tmp[621454] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621457 'move' call_tmp[621454](70724 'typeof' step[70653]))
      unknown call_tmp[621459] "expr temp" "maybe param" "maybe type" "temp"
      (621462 'move' call_tmp[621459](70726 call _cast string[26] call_tmp[621454]))
      (70728 call compilerError "can't apply 'by' to a range with idxType " call_tmp[621449] " using a step of type " call_tmp[621459])
    }
    unknown call_tmp[621464] "expr temp" "maybe param" "maybe type" "temp"
    (621467 'move' call_tmp[621464](70825 call _cond_test 1))
    if call_tmp[621464]
    {
      unknown call_tmp[621469] "expr temp" "maybe param" "maybe type" "temp"
      (621472 'move' call_tmp[621469](70738 call == step[70653] 0))
      unknown call_tmp[621474] "expr temp" "maybe param" "maybe type" "temp"
      (621477 'move' call_tmp[621474](70764 call _cond_test call_tmp[621469]))
      if call_tmp[621474]
      {
        (70762 call boundsCheckHalt module=[255] HaltWrappers[210018] "the step argument of the 'by' operator is zero")
        (357822 'referenced modules list' HaltWrappers[210018])
      }
      unknown tmp[420118] "maybe param" "temp"
      (420129 'move' tmp[420118](70774 call chpl_need_to_check_step step[70653] strType[70669]))
      unknown call_tmp[621479] "expr temp" "maybe param" "maybe type" "temp"
      (621482 'move' call_tmp[621479](420131 call _cond_invalid tmp[420118]))
      if call_tmp[621479]
      {
        (420134 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557119] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557120] "maybe param" "temp"
      unknown call_tmp[621484] "expr temp" "maybe param" "maybe type" "temp"
      (621487 'move' call_tmp[621484](420119 call isTrue tmp[420118]))
      (557125 'move' tmp[557120](557123 call _cond_test call_tmp[621484]))
      if tmp[557120]
      {
        unknown tmp[557127] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621489] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (621492 'move' call_tmp[621489](70781 'typeof' step[70653]))
        unknown call_tmp[621494] "expr temp" "maybe param" "maybe type" "temp"
        (621497 'move' call_tmp[621494](70779 call max strType[70669]))
        unknown call_tmp[621499] "expr temp" "maybe param" "maybe type" "temp"
        (621502 'move' call_tmp[621499](70782 call _cast call_tmp[621489] call_tmp[621494]))
        unknown call_tmp[621504] "expr temp" "maybe param" "maybe type" "temp"
        (621507 'move' call_tmp[621504](70784 call > step[70653] call_tmp[621499]))
        (557129 'move' tmp[557127](420122 call isTrue call_tmp[621504]))
        (557134 'move' tmp[557119](557131 '_paramFoldLogical' tmp[557120] tmp[557127]))
      }
      {
        (557139 'move' tmp[557119](557136 '_paramFoldLogical' tmp[557120] 0))
      }
      unknown call_tmp[621509] "expr temp" "maybe param" "maybe type" "temp"
      (621512 'move' call_tmp[621509](70820 call _cond_test tmp[557119]))
      if call_tmp[621509]
      {
        unknown call_tmp[621514] "expr temp" "maybe param" "maybe type" "temp"
        (621517 'move' call_tmp[621514](70813 call _cast string[26] strType[70669]))
        unknown call_tmp[621519] "expr temp" "maybe param" "maybe type" "temp"
        (621522 'move' call_tmp[621519](70815 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621514]))
        (70818 call boundsCheckHalt module=[255] HaltWrappers[210018] call_tmp[621519])
        (475588 'end of statement' strType[70669])
        (357828 'referenced modules list' HaltWrappers[210018])
      }
    }
    (510426 return _void[55])
  }
  function chpl_range_check_stride[70835](param arg step[70833]:_any[178](?), arg idxType[70837]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70842 call chpl_check_step_integral step[70833])
    (475590 'end of statement')
    unknown strType[70849] "dead at end of block" "insert auto destroy" "type variable"(70848 call chpl__rangeStrideType idxType[70837])
    (541127 'move' strType[70849](541125 call chpl__rangeStrideType idxType[70837]))
    (475591 'end of statement')
    unknown call_tmp[621524] "expr temp" "maybe param" "maybe type" "temp"
    (621527 'move' call_tmp[621524](70854 call == step[70833] 0))
    unknown call_tmp[621529] "expr temp" "maybe param" "maybe type" "temp"
    (621532 'move' call_tmp[621529](70861 call _cond_test call_tmp[621524]))
    if call_tmp[621529]
    {
      (70859 call compilerError "the step argument of the 'by' operator is zero")
    }
    unknown tmp[420139] "maybe param" "temp"
    (420150 'move' tmp[420139](70870 call chpl_need_to_check_step step[70833] strType[70849]))
    unknown call_tmp[621534] "expr temp" "maybe param" "maybe type" "temp"
    (621537 'move' call_tmp[621534](420152 call _cond_invalid tmp[420139]))
    if call_tmp[621534]
    {
      (420155 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557146] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557147] "maybe param" "temp"
    unknown call_tmp[621539] "expr temp" "maybe param" "maybe type" "temp"
    (621542 'move' call_tmp[621539](420140 call isTrue tmp[420139]))
    (557152 'move' tmp[557147](557150 call _cond_test call_tmp[621539]))
    if tmp[557147]
    {
      unknown tmp[557154] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621544] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621547 'move' call_tmp[621544](70877 'typeof' step[70833]))
      unknown call_tmp[621549] "expr temp" "maybe param" "maybe type" "temp"
      (621552 'move' call_tmp[621549](70875 call max strType[70849]))
      unknown call_tmp[621554] "expr temp" "maybe param" "maybe type" "temp"
      (621557 'move' call_tmp[621554](70878 call _cast call_tmp[621544] call_tmp[621549]))
      unknown call_tmp[621559] "expr temp" "maybe param" "maybe type" "temp"
      (621562 'move' call_tmp[621559](70880 call > step[70833] call_tmp[621554]))
      (557156 'move' tmp[557154](420143 call isTrue call_tmp[621559]))
      (557161 'move' tmp[557146](557158 '_paramFoldLogical' tmp[557147] tmp[557154]))
    }
    {
      (557166 'move' tmp[557146](557163 '_paramFoldLogical' tmp[557147] 0))
    }
    unknown call_tmp[621564] "expr temp" "maybe param" "maybe type" "temp"
    (621567 'move' call_tmp[621564](70895 call _cond_test tmp[557146]))
    if call_tmp[621564]
    {
      unknown call_tmp[621569] "expr temp" "maybe param" "maybe type" "temp"
      (621572 'move' call_tmp[621569](70888 call _cast string[26] strType[70849]))
      unknown call_tmp[621574] "expr temp" "maybe param" "maybe type" "temp"
      (621577 'move' call_tmp[621574](70890 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621569]))
      (70893 call compilerError call_tmp[621574])
      (475594 'end of statement' strType[70849])
    }
    (510428 return _void[55])
  }
  function chpl_by_help[70916](arg r[70913]:range[64319](?), arg step[70918]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510432] "RVV" "temp"
    unknown call_tmp[621581] "maybe param" "maybe type" "temp"
    (621584 'move' call_tmp[621581](70922 call low _mt[243] r[70913]))
    unknown call_tmp[621586] "maybe param" "maybe type" "temp"
    (621589 'move' call_tmp[621586](455920 'query' r[70913] 1))
    const lw[70925] "dead at end of block" "const" "insert auto destroy"
    (541129 'init var' lw[70925] call_tmp[621581] call_tmp[621586])
    unknown call_tmp[621593] "maybe param" "maybe type" "temp"
    (621596 'move' call_tmp[621593](70930 call high _mt[243] r[70913]))
    unknown call_tmp[621598] "maybe param" "maybe type" "temp"
    (621601 'move' call_tmp[621598](455923 'query' r[70913] 1))
    const hh[70933] "dead at end of block" "const" "insert auto destroy"
    (541131 'init var' hh[70933] call_tmp[621593] call_tmp[621598])
    unknown call_tmp[621605] "expr temp" "maybe param" "maybe type" "temp"
    (621608 'move' call_tmp[621605](70943 call stride _mt[243] r[70913]))
    unknown call_tmp[621612] "expr temp" "maybe param" "maybe type" "temp"
    (621615 'move' call_tmp[621612](70948 call strType _mt[243] r[70913]))
    unknown call_tmp[621617] "expr temp" "maybe param" "maybe type" "temp"
    (621620 'move' call_tmp[621617](70951 call _cast call_tmp[621612] step[70918]))
    unknown call_tmp[621622] "maybe param" "maybe type" "temp"
    (621625 'move' call_tmp[621622](70953 call * call_tmp[621605] call_tmp[621617]))
    unknown call_tmp[621629] "maybe param" "maybe type" "temp"
    (621632 'move' call_tmp[621629](70939 call strType _mt[243] r[70913]))
    const st[70955] "dead at end of block" "const" "insert auto destroy"
    (541133 'init var' st[70955] call_tmp[621622] call_tmp[621629])
    (70958 'end of statement')
    const tmp[71080] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[557343] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557344] "maybe param" "temp"
    unknown call_tmp[621636] "expr temp" "maybe param" "maybe type" "temp"
    (621639 'move' call_tmp[621636](70975 call(70971 call (partial) isAmbiguous _mt[243] r[70913])))
    (557349 'move' tmp[557344](557347 call _cond_test call_tmp[621636]))
    if tmp[557344]
    {
      unknown tmp[557173] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557174] "maybe param" "temp"
      unknown call_tmp[621643] "expr temp" "maybe param" "maybe type" "temp"
      (621646 'move' call_tmp[621643](70977 call stridable _mt[243] r[70913]))
      (557179 'move' tmp[557174](557177 call _cond_test call_tmp[621643]))
      if tmp[557174]
      {
        unknown tmp[557181] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621650] "expr temp" "maybe param" "maybe type" "temp"
        (621653 'move' call_tmp[621650](70982 call alignment _mt[243] r[70913]))
        (557183 'move' tmp[557181](70986 call _build_tuple 0 call_tmp[621650]))
        (557188 'move' tmp[557173](557185 '_paramFoldLogical' tmp[557174] tmp[557181]))
      }
      {
        unknown tmp[557190] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621657] "expr temp" "maybe param" "maybe type" "temp"
        (621660 'move' call_tmp[621657](70995 call(70990 call (partial) chpl_intToIdx _mt[243] r[70913]) 0))
        (557192 'move' tmp[557190](70997 call _build_tuple 0 call_tmp[621657]))
        (557197 'move' tmp[557173](557194 '_paramFoldLogical' tmp[557174] tmp[557190]))
      }
      (557354 'move' tmp[557343](557351 '_paramFoldLogical' tmp[557344] tmp[557173]))
    }
    {
      unknown tmp[420181] "maybe param" "temp"
      (420192 'move' tmp[420181](71007 call(71003 call (partial) hasLowBound _mt[243] r[70913])))
      unknown call_tmp[621664] "expr temp" "maybe param" "maybe type" "temp"
      (621667 'move' call_tmp[621664](420194 call _cond_invalid tmp[420181]))
      if call_tmp[621664]
      {
        (420197 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557204] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557205] "maybe param" "temp"
      unknown call_tmp[621669] "expr temp" "maybe param" "maybe type" "temp"
      (621672 'move' call_tmp[621669](420182 call isTrue tmp[420181]))
      (557210 'move' tmp[557205](557208 call _cond_test call_tmp[621669]))
      if tmp[557205]
      {
        unknown tmp[557212] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621674] "expr temp" "maybe param" "maybe type" "temp"
        (621677 'move' call_tmp[621674](71010 call > st[70955] 0))
        (557214 'move' tmp[557212](420185 call isTrue call_tmp[621674]))
        (557219 'move' tmp[557204](557216 '_paramFoldLogical' tmp[557205] tmp[557212]))
      }
      {
        (557224 'move' tmp[557204](557221 '_paramFoldLogical' tmp[557205] 0))
      }
      unknown tmp[557316] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557317] "maybe param" "temp"
      (557322 'move' tmp[557317](557320 call _cond_test tmp[557204]))
      if tmp[557317]
      {
        unknown tmp[557324] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621681] "expr temp" "maybe param" "maybe type" "temp"
        (621684 'move' call_tmp[621681](71016 call alignedLow _mt[243] r[70913]))
        (557326 'move' tmp[557324](71020 call _build_tuple 1 call_tmp[621681]))
        (557331 'move' tmp[557316](557328 '_paramFoldLogical' tmp[557317] tmp[557324]))
      }
      {
        unknown tmp[420160] "maybe param" "temp"
        (420171 'move' tmp[420160](71027 call(71023 call (partial) hasHighBound _mt[243] r[70913])))
        unknown call_tmp[621688] "expr temp" "maybe param" "maybe type" "temp"
        (621691 'move' call_tmp[621688](420173 call _cond_invalid tmp[420160]))
        if call_tmp[621688]
        {
          (420176 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557231] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557232] "maybe param" "temp"
        unknown call_tmp[621693] "expr temp" "maybe param" "maybe type" "temp"
        (621696 'move' call_tmp[621693](420161 call isTrue tmp[420160]))
        (557237 'move' tmp[557232](557235 call _cond_test call_tmp[621693]))
        if tmp[557232]
        {
          unknown tmp[557239] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621698] "expr temp" "maybe param" "maybe type" "temp"
          (621701 'move' call_tmp[621698](71030 call < st[70955] 0))
          (557241 'move' tmp[557239](420164 call isTrue call_tmp[621698]))
          (557246 'move' tmp[557231](557243 '_paramFoldLogical' tmp[557232] tmp[557239]))
        }
        {
          (557251 'move' tmp[557231](557248 '_paramFoldLogical' tmp[557232] 0))
        }
        unknown tmp[557289] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[557290] "maybe param" "temp"
        (557295 'move' tmp[557290](557293 call _cond_test tmp[557231]))
        if tmp[557290]
        {
          unknown tmp[557297] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621705] "expr temp" "maybe param" "maybe type" "temp"
          (621708 'move' call_tmp[621705](71036 call alignedHigh _mt[243] r[70913]))
          (557299 'move' tmp[557297](71040 call _build_tuple 1 call_tmp[621705]))
          (557304 'move' tmp[557289](557301 '_paramFoldLogical' tmp[557290] tmp[557297]))
        }
        {
          unknown tmp[557258] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[557259] "maybe param" "temp"
          unknown call_tmp[621712] "expr temp" "maybe param" "maybe type" "temp"
          (621715 'move' call_tmp[621712](71043 call stridable _mt[243] r[70913]))
          (557264 'move' tmp[557259](557262 call _cond_test call_tmp[621712]))
          if tmp[557259]
          {
            unknown tmp[557266] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621719] "expr temp" "maybe param" "maybe type" "temp"
            (621722 'move' call_tmp[621719](71047 call aligned _mt[243] r[70913]))
            unknown call_tmp[621726] "expr temp" "maybe param" "maybe type" "temp"
            (621729 'move' call_tmp[621726](71051 call alignment _mt[243] r[70913]))
            (557268 'move' tmp[557266](71055 call _build_tuple call_tmp[621719] call_tmp[621726]))
            (557273 'move' tmp[557258](557270 '_paramFoldLogical' tmp[557259] tmp[557266]))
          }
          {
            unknown tmp[557275] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621733] "expr temp" "maybe param" "maybe type" "temp"
            (621736 'move' call_tmp[621733](71064 call(71059 call (partial) chpl_intToIdx _mt[243] r[70913]) 0))
            (557277 'move' tmp[557275](71066 call _build_tuple 0 call_tmp[621733]))
            (557282 'move' tmp[557258](557279 '_paramFoldLogical' tmp[557259] tmp[557275]))
          }
          (557309 'move' tmp[557289](557306 '_paramFoldLogical' tmp[557290] tmp[557258]))
        }
        (557336 'move' tmp[557316](557333 '_paramFoldLogical' tmp[557317] tmp[557289]))
      }
      (557359 'move' tmp[557343](557356 '_paramFoldLogical' tmp[557344] tmp[557316]))
    }
    unknown call_tmp[621738] "expr temp" "maybe param" "maybe type" "temp"
    (621741 'move' call_tmp[621738](455926 'query' r[70913] 1))
    unknown call_tmp[621743] "maybe param" "maybe type" "temp"
    (621746 'move' call_tmp[621743](70968 call _build_tuple bool[10] call_tmp[621738]))
    (541135 'init var' tmp[71080] tmp[557343] call_tmp[621743])
    (71087 call _check_tuple_var_decl tmp[71080] 2)
    (475596 'end of statement')
    unknown call_tmp[621748] "maybe param" "maybe type" "temp"
    (621751 'move' call_tmp[621748](71081 call tmp[71080] 0))
    const ald[70960] "dead at end of block" "const" "insert auto destroy"
    (541137 'init var' ald[70960] call_tmp[621748])
    unknown call_tmp[621753] "maybe param" "maybe type" "temp"
    (621756 'move' call_tmp[621753](71084 call tmp[71080] 1))
    const alt[70962] "dead at end of block" "const" "insert auto destroy"
    (541139 'init var' alt[70962] call_tmp[621753])
    (71092 'end of statement')
    unknown call_tmp[621758] "expr temp" "maybe param" "maybe type" "temp"
    (621761 'move' call_tmp[621758](455929 'query' r[70913] 1))
    unknown call_tmp[621763] "expr temp" "maybe param" "maybe type" "temp"
    (621766 'move' call_tmp[621763](455935 'query' r[70913] 2))
    unknown call_tmp[621768] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621771 'move' call_tmp[621768](747847 'new' range[64319](?) call_tmp[621758] call_tmp[621763] 1 lw[70925] hh[70933] st[70955] alt[70962] ald[70960]))
    (510437 'move' ret[510432](510436 'deref' call_tmp[621768]))
    gotoReturn _end_chpl_by_help[510430] _end_chpl_by_help[510430]
    (475597 'end of statement' lw[70925] hh[70933] st[70955] alt[70962] ald[70960])
    label _end_chpl_by_help[510430]
    (510434 return ret[510432])
  }
  function chpl_by[71113](arg r[71111]:_any[178](?), arg step[71115]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510443] "RVV" "temp"
    unknown call_tmp[621773] "expr temp" "maybe param" "maybe type" "temp"
    (621776 'move' call_tmp[621773](71120 call isRange r[71111]))
    unknown call_tmp[621778] "expr temp" "maybe param" "maybe type" "temp"
    (621781 'move' call_tmp[621778](71121 call ! call_tmp[621773]))
    unknown call_tmp[621783] "expr temp" "maybe param" "maybe type" "temp"
    (621786 'move' call_tmp[621783](71144 call _cond_test call_tmp[621778]))
    if call_tmp[621783]
    {
      (71142 call compilerError "the first argument of the 'by' operator is not a range")
    }
    unknown call_tmp[621790] "expr temp" "maybe param" "maybe type" "temp"
    (621793 'move' call_tmp[621790](71154 call idxType _mt[243] r[71111]))
    (71157 call chpl_range_check_stride step[71115] call_tmp[621790])
    (475604 'end of statement')
    unknown call_tmp[621795] "expr temp" "maybe param" "maybe type" "temp"
    (621798 'move' call_tmp[621795](71163 call chpl_by_help r[71111] step[71115]))
    (510448 'move' ret[510443](510447 'deref' call_tmp[621795]))
    (510445 return ret[510443])
  }
  function chpl_by[71177](arg r[71174]:range[64319](?), param arg step[71179]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510452] "RVV" "temp"
    unknown call_tmp[621802] "expr temp" "maybe param" "maybe type" "temp"
    (621805 'move' call_tmp[621802](71185 call idxType _mt[243] r[71174]))
    (71188 call chpl_range_check_stride step[71179] call_tmp[621802])
    (475606 'end of statement')
    unknown call_tmp[621809] "expr temp" "maybe param" "maybe type" "temp"
    (621812 'move' call_tmp[621809](71196 call strType _mt[243] r[71174]))
    unknown call_tmp[621814] "expr temp" "maybe param" "maybe type" "temp"
    (621817 'move' call_tmp[621814](71199 call _cast call_tmp[621809] step[71179]))
    unknown call_tmp[621819] "expr temp" "maybe param" "maybe type" "temp"
    (621822 'move' call_tmp[621819](71201 call chpl_by_help r[71174] call_tmp[621814]))
    (510457 'move' ret[510452](510456 'deref' call_tmp[621819]))
    (510454 return ret[510452])
  }
  function chpl_align[71220](arg r[71217]:range[64319](?), arg algn[71223] :
  (455955 'query' r[71217] 1)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510461] "RVV" "temp"
    unknown call_tmp[621824] "expr temp" "maybe param" "maybe type" "temp"
    (621827 'move' call_tmp[621824](455958 'query' r[71217] 1))
    unknown call_tmp[621829] "expr temp" "maybe param" "maybe type" "temp"
    (621832 'move' call_tmp[621829](455964 'query' r[71217] 2))
    unknown call_tmp[621838] "expr temp" "maybe param" "maybe type" "temp"
    (621841 'move' call_tmp[621838](71237 call _low _mt[243] r[71217]))
    unknown call_tmp[621843] "expr temp" "maybe param" "maybe type" "temp"
    (621846 'move' call_tmp[621843](71241 call(71233 call (partial) chpl_intToIdx _mt[243] r[71217]) call_tmp[621838]))
    unknown call_tmp[621852] "expr temp" "maybe param" "maybe type" "temp"
    (621855 'move' call_tmp[621852](71247 call _high _mt[243] r[71217]))
    unknown call_tmp[621857] "expr temp" "maybe param" "maybe type" "temp"
    (621860 'move' call_tmp[621857](71251 call(71243 call (partial) chpl_intToIdx _mt[243] r[71217]) call_tmp[621852]))
    unknown call_tmp[621864] "expr temp" "maybe param" "maybe type" "temp"
    (621867 'move' call_tmp[621864](71253 call stride _mt[243] r[71217]))
    unknown call_tmp[621869] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621872 'move' call_tmp[621869](747848 'new' range[64319](?) call_tmp[621824] call_tmp[621829] 1 call_tmp[621843] call_tmp[621857] call_tmp[621864] algn[71223] 1))
    (510466 'move' ret[510461](510465 'deref' call_tmp[621869]))
    (510463 return ret[510461])
  }
  function chpl_align[71278](arg r[71275]:range[64319](?), arg algn[71280]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510470] "RVV" "temp"
    unknown call_tmp[621874] "expr temp" "maybe param" "maybe type" "temp"
    (621877 'move' call_tmp[621874](455977 'query' r[71275] 1))
    unknown call_tmp[621879] "expr temp" "maybe param" "maybe type" "temp"
    (621882 'move' call_tmp[621879](71303 call _cast string[26] call_tmp[621874]))
    unknown call_tmp[621884] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621887 'move' call_tmp[621884](71323 'typeof' algn[71280]))
    unknown call_tmp[621889] "expr temp" "maybe param" "maybe type" "temp"
    (621892 'move' call_tmp[621889](71325 call _cast string[26] call_tmp[621884]))
    (71327 call compilerError "can't align a range with idxType " call_tmp[621879] " using a value of type " call_tmp[621889])
    (475609 'end of statement')
    (510475 'move' ret[510470](510474 'deref' r[71275]))
    (510472 return ret[510470])
  }
  function range[64319](?).offset[71342](arg _mt[71347]:_MT[238], arg this[71344]:range[64319](?) :
  range[64319](?), in arg offset[71339]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510479] "RVV" "temp"
    unknown call_tmp[621898] "expr temp" "maybe param" "maybe type" "temp"
    (621901 'move' call_tmp[621898](375058 call intIdxType _mt[243] this[71344]))
    unknown call_tmp[621903] "maybe param" "maybe type" "temp"
    (621906 'move' call_tmp[621903](71355 call(71350 call (partial) safeCast _mt[243] offset[71339]) call_tmp[621898]))
    unknown offs[71356] "dead at end of block" "insert auto destroy"
    (541141 'init var' offs[71356] call_tmp[621903])
    (71359 'end of statement')
    unknown call_tmp[621910] "expr temp" "maybe param" "maybe type" "temp"
    (621913 'move' call_tmp[621910](375063 call stridable _mt[243] this[71344]))
    unknown call_tmp[621915] "expr temp" "maybe param" "maybe type" "temp"
    (621918 'move' call_tmp[621915](71362 call ! call_tmp[621910]))
    unknown call_tmp[621920] "expr temp" "maybe param" "maybe type" "temp"
    (621923 'move' call_tmp[621920](71391 call _cond_test call_tmp[621915]))
    if call_tmp[621920]
    {
      (71383 call compilerWarning "invoking 'offset' on an unstrided range has no effect.")
      (475611 'end of statement')
      (71388 call = offs[71356] 0)
      (475612 'end of statement' offs[71356])
    }
    unknown tmp[420202] "maybe param" "temp"
    (420213 'move' tmp[420202] 1)
    unknown call_tmp[621925] "expr temp" "maybe param" "maybe type" "temp"
    (621928 'move' call_tmp[621925](420215 call _cond_invalid tmp[420202]))
    if call_tmp[621925]
    {
      (420218 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557366] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557367] "maybe param" "temp"
    unknown call_tmp[621930] "expr temp" "maybe param" "maybe type" "temp"
    (621933 'move' call_tmp[621930](420203 call isTrue tmp[420202]))
    (557372 'move' tmp[557367](557370 call _cond_test call_tmp[621930]))
    if tmp[557367]
    {
      unknown tmp[557374] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621937] "expr temp" "maybe param" "maybe type" "temp"
      (621940 'move' call_tmp[621937](71398 call(375069 call (partial) hasFirst _mt[243] this[71344])))
      unknown call_tmp[621942] "expr temp" "maybe param" "maybe type" "temp"
      (621945 'move' call_tmp[621942](71399 call ! call_tmp[621937]))
      (557376 'move' tmp[557374](420206 call isTrue call_tmp[621942]))
      (557381 'move' tmp[557366](557378 '_paramFoldLogical' tmp[557367] tmp[557374]))
    }
    {
      (557386 'move' tmp[557366](557383 '_paramFoldLogical' tmp[557367] 0))
    }
    unknown call_tmp[621947] "expr temp" "maybe param" "maybe type" "temp"
    (621950 'move' call_tmp[621947](71427 call _cond_test tmp[557366]))
    if call_tmp[621947]
    {
      (71425 call boundsCheckHalt module=[255] HaltWrappers[210018] "invoking 'offset' on a range without the first index")
      (357860 'referenced modules list' HaltWrappers[210018])
    }
    unknown call_tmp[621954] "expr temp" "maybe param" "maybe type" "temp"
    (621957 'move' call_tmp[621954](375075 call idxType _mt[243] this[71344]))
    unknown call_tmp[621961] "expr temp" "maybe param" "maybe type" "temp"
    (621964 'move' call_tmp[621961](375080 call boundedType _mt[243] this[71344]))
    unknown call_tmp[621968] "expr temp" "maybe param" "maybe type" "temp"
    (621971 'move' call_tmp[621968](375085 call stridable _mt[243] this[71344]))
    unknown call_tmp[621975] "expr temp" "maybe param" "maybe type" "temp"
    (621978 'move' call_tmp[621975](375089 call low _mt[243] this[71344]))
    unknown call_tmp[621982] "expr temp" "maybe param" "maybe type" "temp"
    (621985 'move' call_tmp[621982](375093 call high _mt[243] this[71344]))
    unknown call_tmp[621989] "expr temp" "maybe param" "maybe type" "temp"
    (621992 'move' call_tmp[621989](375097 call stride _mt[243] this[71344]))
    unknown call_tmp[621998] "expr temp" "maybe param" "maybe type" "temp"
    (622001 'move' call_tmp[621998](71443 call firstAsInt _mt[243] this[71344]))
    unknown call_tmp[622003] "expr temp" "maybe param" "maybe type" "temp"
    (622006 'move' call_tmp[622003](71447 call + call_tmp[621998] offs[71356]))
    unknown call_tmp[622008] "expr temp" "maybe param" "maybe type" "temp"
    (622011 'move' call_tmp[622008](71450 call(375101 call (partial) chpl_intToIdx _mt[243] this[71344]) call_tmp[622003]))
    unknown call_tmp[622013] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (622016 'move' call_tmp[622013](747849 'new' range[64319](?) call_tmp[621954] call_tmp[621961] call_tmp[621968] call_tmp[621975] call_tmp[621982] call_tmp[621989] call_tmp[622008] 1))
    (510484 'move' ret[510479](510483 'deref' call_tmp[622013]))
    gotoReturn _end_offset[510477] _end_offset[510477]
    (475616 'end of statement' offs[71356])
    label _end_offset[510477]
    (510481 return ret[510479])
  }
  function range[64319](?).this[71467](arg _mt[71472]:_MT[238], const arg this[71469]:range[64319](?) :
  range[64319](?), arg other[71464]:range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510572] "RVV" "temp"
    unknown ambig[71475] "dead at end of block" "insert auto destroy"
    (541143 'init var' ambig[71475] 0)
    (71478 'end of statement')
    unknown tmp[420244] "maybe param" "temp"
    (420255 'move' tmp[420244](71485 call(71481 call (partial) isAmbiguous _mt[243] this[71469])))
    unknown call_tmp[622020] "expr temp" "maybe param" "maybe type" "temp"
    (622023 'move' call_tmp[622020](420257 call _cond_invalid tmp[420244]))
    if call_tmp[622020]
    {
      (420260 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[557393] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557394] "maybe param" "temp"
    unknown call_tmp[622025] "expr temp" "maybe param" "maybe type" "temp"
    (622028 'move' call_tmp[622025](420245 call isTrue tmp[420244]))
    (557399 'move' tmp[557394](557397 call _cond_test call_tmp[622025]))
    if tmp[557394]
    {
      (557404 'move' tmp[557393](557401 '_paramFoldLogical' tmp[557394] 1))
    }
    {
      unknown tmp[557406] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622032] "expr temp" "maybe param" "maybe type" "temp"
      (622035 'move' call_tmp[622032](71491 call(71487 call (partial) isAmbiguous _mt[243] other[71464])))
      (557408 'move' tmp[557406](420249 call isTrue call_tmp[622032]))
      (557413 'move' tmp[557393](557410 '_paramFoldLogical' tmp[557394] tmp[557406]))
    }
    unknown call_tmp[622037] "expr temp" "maybe param" "maybe type" "temp"
    (622040 'move' call_tmp[622037](71583 call _cond_test tmp[557393]))
    if call_tmp[622037]
    {
      unknown call_tmp[622044] "expr temp" "maybe param" "maybe type" "temp"
      (622047 'move' call_tmp[622044](71496 call stride _mt[243] this[71469]))
      unknown call_tmp[622049] "maybe param" "maybe type" "temp"
      (622052 'move' call_tmp[622049](71500 call abs call_tmp[622044]))
      unknown st1[71501] "dead at end of block" "insert auto destroy"
      (541145 'init var' st1[71501] call_tmp[622049])
      (71504 'end of statement')
      unknown call_tmp[622056] "expr temp" "maybe param" "maybe type" "temp"
      (622059 'move' call_tmp[622056](71508 call stride _mt[243] other[71464]))
      unknown call_tmp[622061] "maybe param" "maybe type" "temp"
      (622064 'move' call_tmp[622061](71512 call abs call_tmp[622056]))
      unknown st2[71513] "dead at end of block" "insert auto destroy"
      (541147 'init var' st2[71513] call_tmp[622061])
      (71516 'end of statement')
      unknown call_tmp[622066] "maybe param" "maybe type" "temp"
      (622069 'move' call_tmp[622066](71526 call chpl__extendedEuclid st1[71501] st2[71513]))
      unknown tmp[71527] "dead at end of block" "insert auto destroy" "temp"
      (541149 'init var' tmp[71527] call_tmp[622066])
      (71534 call _check_tuple_var_decl tmp[71527] 2)
      (475619 'end of statement')
      unknown call_tmp[622071] "maybe param" "maybe type" "temp"
      (622074 'move' call_tmp[622071](71528 call tmp[71527] 0))
      unknown g[71517] "dead at end of block" "insert auto destroy"
      (541151 'init var' g[71517] call_tmp[622071])
      unknown call_tmp[622076] "maybe param" "maybe type" "temp"
      (622079 'move' call_tmp[622076](71531 call tmp[71527] 1))
      unknown x[71519] "dead at end of block" "insert auto destroy"
      (541153 'init var' x[71519] call_tmp[622076])
      (71539 'end of statement')
      unknown tmp[420223] "maybe param" "temp"
      (420234 'move' tmp[420223] 1)
      unknown call_tmp[622081] "expr temp" "maybe param" "maybe type" "temp"
      (622084 'move' call_tmp[622081](420236 call _cond_invalid tmp[420223]))
      if call_tmp[622081]
      {
        (420239 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557420] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557421] "maybe param" "temp"
      unknown call_tmp[622086] "expr temp" "maybe param" "maybe type" "temp"
      (622089 'move' call_tmp[622086](420224 call isTrue tmp[420223]))
      (557426 'move' tmp[557421](557424 call _cond_test call_tmp[622086]))
      if tmp[557421]
      {
        unknown tmp[557428] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622091] "expr temp" "maybe param" "maybe type" "temp"
        (622094 'move' call_tmp[622091](71543 call > g[71517] 1))
        (557430 'move' tmp[557428](420227 call isTrue call_tmp[622091]))
        (557435 'move' tmp[557420](557432 '_paramFoldLogical' tmp[557421] tmp[557428]))
      }
      {
        (557440 'move' tmp[557420](557437 '_paramFoldLogical' tmp[557421] 0))
      }
      unknown call_tmp[622096] "expr temp" "maybe param" "maybe type" "temp"
      (622099 'move' call_tmp[622096](71573 call _cond_test tmp[557420]))
      if call_tmp[622096]
      {
        (71571 call boundsCheckHalt module=[255] HaltWrappers[210018] "Cannot slice ranges with ambiguous alignments unless their strides are relatively prime.")
        (357871 'referenced modules list' HaltWrappers[210018])
      }
      (71580 call = ambig[71475] 1)
      (475622 'end of statement' ambig[71475])
    }
    function computeBoundedType[71591](arg r1[71589]:_any[178](?), arg r2[71593]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[510490] "RVV" "param" "temp"
      unknown tmp[420265] "maybe param" "temp"
      (420276 'move' tmp[420265](71600 call(71596 call (partial) hasLowBound _mt[243] r1[71589])))
      unknown call_tmp[622103] "expr temp" "maybe param" "maybe type" "temp"
      (622106 'move' call_tmp[622103](420278 call _cond_invalid tmp[420265]))
      if call_tmp[622103]
      {
        (420281 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown low[71609] "dead at end of block" "param"
      unknown tmp[557447] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557448] "maybe param" "temp"
      unknown call_tmp[622108] "expr temp" "maybe param" "maybe type" "temp"
      (622111 'move' call_tmp[622108](420266 call isTrue tmp[420265]))
      (557453 'move' tmp[557448](557451 call _cond_test call_tmp[622108]))
      if tmp[557448]
      {
        (557458 'move' tmp[557447](557455 '_paramFoldLogical' tmp[557448] 1))
      }
      {
        unknown tmp[557460] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622115] "expr temp" "maybe param" "maybe type" "temp"
        (622118 'move' call_tmp[622115](71606 call(71602 call (partial) hasLowBound _mt[243] r2[71593])))
        (557462 'move' tmp[557460](420270 call isTrue call_tmp[622115]))
        (557467 'move' tmp[557447](557464 '_paramFoldLogical' tmp[557448] tmp[557460]))
      }
      (541155 'init var' low[71609] tmp[557447])
      (71612 'end of statement')
      unknown tmp[420286] "maybe param" "temp"
      (420297 'move' tmp[420286](71619 call(71615 call (partial) hasHighBound _mt[243] r1[71589])))
      unknown call_tmp[622122] "expr temp" "maybe param" "maybe type" "temp"
      (622125 'move' call_tmp[622122](420299 call _cond_invalid tmp[420286]))
      if call_tmp[622122]
      {
        (420302 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown high[71628] "dead at end of block" "param"
      unknown tmp[557474] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557475] "maybe param" "temp"
      unknown call_tmp[622127] "expr temp" "maybe param" "maybe type" "temp"
      (622130 'move' call_tmp[622127](420287 call isTrue tmp[420286]))
      (557480 'move' tmp[557475](557478 call _cond_test call_tmp[622127]))
      if tmp[557475]
      {
        (557485 'move' tmp[557474](557482 '_paramFoldLogical' tmp[557475] 1))
      }
      {
        unknown tmp[557487] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622134] "expr temp" "maybe param" "maybe type" "temp"
        (622137 'move' call_tmp[622134](71625 call(71621 call (partial) hasHighBound _mt[243] r2[71593])))
        (557489 'move' tmp[557487](420291 call isTrue call_tmp[622134]))
        (557494 'move' tmp[557474](557491 '_paramFoldLogical' tmp[557475] tmp[557487]))
      }
      (541157 'init var' high[71628] tmp[557474])
      (71631 'end of statement')
      unknown tmp[420307] "maybe param" "temp"
      (420318 'move' tmp[420307] low[71609])
      unknown call_tmp[622139] "expr temp" "maybe param" "maybe type" "temp"
      (622142 'move' call_tmp[622139](420320 call _cond_invalid tmp[420307]))
      if call_tmp[622139]
      {
        (420323 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557501] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557502] "maybe param" "temp"
      unknown call_tmp[622144] "expr temp" "maybe param" "maybe type" "temp"
      (622147 'move' call_tmp[622144](420308 call isTrue tmp[420307]))
      (557507 'move' tmp[557502](557505 call _cond_test call_tmp[622144]))
      if tmp[557502]
      {
        unknown tmp[557509] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557511 'move' tmp[557509](420311 call isTrue high[71628]))
        (557516 'move' tmp[557501](557513 '_paramFoldLogical' tmp[557502] tmp[557509]))
      }
      {
        (557521 'move' tmp[557501](557518 '_paramFoldLogical' tmp[557502] 0))
      }
      unknown call_tmp[622149] "expr temp" "maybe param" "maybe type" "temp"
      (622152 'move' call_tmp[622149](71674 call _cond_test tmp[557501]))
      if call_tmp[622149]
      {
        (510495 'move' ret[510490](510494 'deref' bounded[64208]))
        gotoReturn _end_computeBoundedType[510488] _end_computeBoundedType[510488]
      }
      {
        unknown call_tmp[622154] "expr temp" "maybe param" "maybe type" "temp"
        (622157 'move' call_tmp[622154](71668 call _cond_test low[71609]))
        if call_tmp[622154]
        {
          (510500 'move' ret[510490](510499 'deref' boundedLow[64210]))
          gotoReturn _end_computeBoundedType[510488] _end_computeBoundedType[510488]
        }
        {
          unknown call_tmp[622159] "expr temp" "maybe param" "maybe type" "temp"
          (622162 'move' call_tmp[622159](71662 call _cond_test high[71628]))
          if call_tmp[622159]
          {
            (510505 'move' ret[510490](510504 'deref' boundedHigh[64212]))
            gotoReturn _end_computeBoundedType[510488] _end_computeBoundedType[510488]
          }
          {
            (510510 'move' ret[510490](510509 'deref' boundedNone[64214]))
            gotoReturn _end_computeBoundedType[510488] _end_computeBoundedType[510488]
          }
        }
      }
      label _end_computeBoundedType[510488]
      (510492 return ret[510490])
    }
    unknown lo1[71696] "dead at end of block" "insert auto destroy"
    unknown tmp[557528] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557529] "maybe param" "temp"
    unknown call_tmp[622166] "expr temp" "maybe param" "maybe type" "temp"
    (622169 'move' call_tmp[622166](71684 call(375116 call (partial) hasLowBound _mt[243] this[71469])))
    (557534 'move' tmp[557529](557532 call _cond_test call_tmp[622166]))
    if tmp[557529]
    {
      unknown tmp[557536] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557538 'move' tmp[557536](71686 call _low _mt[243] this[71469]))
      (557543 'move' tmp[557528](557540 '_paramFoldLogical' tmp[557529] tmp[557536]))
    }
    {
      unknown tmp[557545] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557547 'move' tmp[557545](71690 call _low _mt[243] other[71464]))
      (557552 'move' tmp[557528](557549 '_paramFoldLogical' tmp[557529] tmp[557545]))
    }
    (541159 'init var' lo1[71696] tmp[557528])
    (71699 'end of statement')
    unknown hi1[71714] "dead at end of block" "insert auto destroy"
    unknown tmp[557559] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557560] "maybe param" "temp"
    unknown call_tmp[622177] "expr temp" "maybe param" "maybe type" "temp"
    (622180 'move' call_tmp[622177](71702 call(375120 call (partial) hasHighBound _mt[243] this[71469])))
    (557565 'move' tmp[557560](557563 call _cond_test call_tmp[622177]))
    if tmp[557560]
    {
      unknown tmp[557567] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557569 'move' tmp[557567](71704 call _high _mt[243] this[71469]))
      (557574 'move' tmp[557559](557571 '_paramFoldLogical' tmp[557560] tmp[557567]))
    }
    {
      unknown tmp[557576] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557578 'move' tmp[557576](71708 call _high _mt[243] other[71464]))
      (557583 'move' tmp[557559](557580 '_paramFoldLogical' tmp[557560] tmp[557576]))
    }
    (541161 'init var' hi1[71714] tmp[557559])
    (71717 'end of statement')
    unknown call_tmp[622188] "expr temp" "maybe param" "maybe type" "temp"
    (622191 'move' call_tmp[622188](71720 call stride _mt[243] this[71469]))
    unknown call_tmp[622193] "maybe param" "maybe type" "temp"
    (622196 'move' call_tmp[622193](71724 call abs call_tmp[622188]))
    unknown st1[71725] "dead at end of block" "insert auto destroy"
    (541163 'init var' st1[71725] call_tmp[622193])
    (71728 'end of statement')
    unknown lo2[71746] "dead at end of block" "insert auto destroy"
    unknown tmp[557590] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557591] "maybe param" "temp"
    unknown call_tmp[622200] "expr temp" "maybe param" "maybe type" "temp"
    (622203 'move' call_tmp[622200](71734 call(71730 call (partial) hasLowBound _mt[243] other[71464])))
    (557596 'move' tmp[557591](557594 call _cond_test call_tmp[622200]))
    if tmp[557591]
    {
      unknown tmp[557598] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557600 'move' tmp[557598](71736 call _low _mt[243] other[71464]))
      (557605 'move' tmp[557590](557602 '_paramFoldLogical' tmp[557591] tmp[557598]))
    }
    {
      unknown tmp[557607] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557609 'move' tmp[557607](71740 call _low _mt[243] this[71469]))
      (557614 'move' tmp[557590](557611 '_paramFoldLogical' tmp[557591] tmp[557607]))
    }
    (541165 'init var' lo2[71746] tmp[557590])
    (71749 'end of statement')
    unknown hi2[71767] "dead at end of block" "insert auto destroy"
    unknown tmp[557621] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557622] "maybe param" "temp"
    unknown call_tmp[622211] "expr temp" "maybe param" "maybe type" "temp"
    (622214 'move' call_tmp[622211](71755 call(71751 call (partial) hasHighBound _mt[243] other[71464])))
    (557627 'move' tmp[557622](557625 call _cond_test call_tmp[622211]))
    if tmp[557622]
    {
      unknown tmp[557629] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557631 'move' tmp[557629](71757 call _high _mt[243] other[71464]))
      (557636 'move' tmp[557621](557633 '_paramFoldLogical' tmp[557622] tmp[557629]))
    }
    {
      unknown tmp[557638] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557640 'move' tmp[557638](71761 call _high _mt[243] this[71469]))
      (557645 'move' tmp[557621](557642 '_paramFoldLogical' tmp[557622] tmp[557638]))
    }
    (541167 'init var' hi2[71767] tmp[557621])
    (71770 'end of statement')
    unknown call_tmp[622222] "expr temp" "maybe param" "maybe type" "temp"
    (622225 'move' call_tmp[622222](71773 call stride _mt[243] other[71464]))
    unknown call_tmp[622227] "maybe param" "maybe type" "temp"
    (622230 'move' call_tmp[622227](71777 call abs call_tmp[622222]))
    unknown st2[71778] "dead at end of block" "insert auto destroy"
    (541169 'init var' st2[71778] call_tmp[622227])
    (71781 'end of statement')
    unknown call_tmp[622234] "expr temp" "maybe param" "maybe type" "temp"
    (622237 'move' call_tmp[622234](375124 call intIdxType _mt[243] this[71469]))
    unknown call_tmp[622239] "expr temp" "maybe param" "maybe type" "temp"
    (622242 'move' call_tmp[622239](71785 call isUintType call_tmp[622234]))
    unknown call_tmp[622244] "expr temp" "maybe param" "maybe type" "temp"
    (622247 'move' call_tmp[622244](71801 call _cond_test call_tmp[622239]))
    if call_tmp[622244]
    {
      unknown call_tmp[622249] "expr temp" "maybe param" "maybe type" "temp"
      (622252 'move' call_tmp[622249](71788 call < lo1[71696] 0))
      unknown call_tmp[622254] "expr temp" "maybe param" "maybe type" "temp"
      (622257 'move' call_tmp[622254](71795 call _cond_test call_tmp[622249]))
      if call_tmp[622254]
      {
        (71792 call = lo1[71696] 0)
        (475631 'end of statement' lo1[71696])
      }
    }
    unknown call_tmp[622261] "maybe param" "maybe type" "temp"
    (622264 'move' call_tmp[622261](71807 call stride _mt[243] this[71469]))
    unknown call_tmp[622268] "maybe param" "maybe type" "temp"
    (622271 'move' call_tmp[622268](375130 call strType _mt[243] this[71469]))
    unknown newStride[71810] "dead at end of block" "insert auto destroy"
    (541171 'init var' newStride[71810] call_tmp[622261] call_tmp[622268])
    (71813 'end of statement')
    unknown call_tmp[622275] "expr temp" "maybe param" "maybe type" "temp"
    (622278 'move' call_tmp[622275](71817 call stride _mt[243] this[71469]))
    unknown call_tmp[622280] "maybe param" "maybe type" "temp"
    (622283 'move' call_tmp[622280](71821 call abs call_tmp[622275]))
    unknown call_tmp[622287] "maybe param" "maybe type" "temp"
    (622290 'move' call_tmp[622287](375134 call strType _mt[243] this[71469]))
    unknown lcm[71822] "dead at end of block" "insert auto destroy"
    (541173 'init var' lcm[71822] call_tmp[622280] call_tmp[622287])
    (71825 'end of statement')
    unknown call_tmp[622294] "expr temp" "maybe param" "maybe type" "temp"
    (622297 'move' call_tmp[622294](375143 call strType _mt[243] this[71469]))
    unknown call_tmp[622299] "expr temp" "maybe param" "maybe type" "temp"
    (622302 'move' call_tmp[622299](71838 call _cast call_tmp[622294] 0))
    unknown call_tmp[622304] "maybe param" "maybe type" "temp"
    (622307 'move' call_tmp[622304](71841 call _build_tuple lcm[71822] call_tmp[622299]))
    unknown call_tmp[622311] "expr temp" "maybe param" "maybe type" "temp"
    (622314 'move' call_tmp[622311](375138 call strType _mt[243] this[71469]))
    unknown call_tmp[622316] "maybe param" "maybe type" "temp"
    (622319 'move' call_tmp[622316](71833 call * 2 call_tmp[622311]))
    unknown tmp[71843] "dead at end of block" "insert auto destroy" "temp"
    (541175 'init var' tmp[71843] call_tmp[622304] call_tmp[622316])
    (71850 call _check_tuple_var_decl tmp[71843] 2)
    (475633 'end of statement')
    unknown call_tmp[622321] "maybe param" "maybe type" "temp"
    (622324 'move' call_tmp[622321](71844 call tmp[71843] 0))
    unknown g[71826] "dead at end of block" "insert auto destroy"
    (541177 'init var' g[71826] call_tmp[622321])
    unknown call_tmp[622326] "maybe param" "maybe type" "temp"
    (622329 'move' call_tmp[622326](71847 call tmp[71843] 1))
    unknown x[71828] "dead at end of block" "insert auto destroy"
    (541179 'init var' x[71828] call_tmp[622326])
    (71855 'end of statement')
    unknown tmp[420328] "maybe param" "temp"
    unknown call_tmp[622333] "expr temp" "maybe param" "maybe type" "temp"
    (622336 'move' call_tmp[622333](71857 call stride _mt[243] this[71469]))
    unknown call_tmp[622340] "expr temp" "maybe param" "maybe type" "temp"
    (622343 'move' call_tmp[622340](71861 call stride _mt[243] other[71464]))
    (420339 'move' tmp[420328](71864 call != call_tmp[622333] call_tmp[622340]))
    unknown call_tmp[622345] "expr temp" "maybe param" "maybe type" "temp"
    (622348 'move' call_tmp[622345](420341 call _cond_invalid tmp[420328]))
    if call_tmp[622345]
    {
      (420344 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557652] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557653] "maybe param" "temp"
    unknown call_tmp[622350] "expr temp" "maybe param" "maybe type" "temp"
    (622353 'move' call_tmp[622350](420329 call isTrue tmp[420328]))
    (557658 'move' tmp[557653](557656 call _cond_test call_tmp[622350]))
    if tmp[557653]
    {
      unknown tmp[557660] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622357] "expr temp" "maybe param" "maybe type" "temp"
      (622360 'move' call_tmp[622357](71867 call stride _mt[243] this[71469]))
      unknown call_tmp[622364] "expr temp" "maybe param" "maybe type" "temp"
      (622367 'move' call_tmp[622364](71871 call stride _mt[243] other[71464]))
      unknown call_tmp[622369] "expr temp" "maybe param" "maybe type" "temp"
      (622372 'move' call_tmp[622369](71874 call - call_tmp[622364]))
      unknown call_tmp[622374] "expr temp" "maybe param" "maybe type" "temp"
      (622377 'move' call_tmp[622374](71876 call != call_tmp[622357] call_tmp[622369]))
      (557662 'move' tmp[557660](420332 call isTrue call_tmp[622374]))
      (557667 'move' tmp[557652](557664 '_paramFoldLogical' tmp[557653] tmp[557660]))
    }
    {
      (557672 'move' tmp[557652](557669 '_paramFoldLogical' tmp[557653] 0))
    }
    unknown call_tmp[622379] "expr temp" "maybe param" "maybe type" "temp"
    (622382 'move' call_tmp[622379](71958 call _cond_test tmp[557652]))
    if call_tmp[622379]
    {
      unknown call_tmp[622384] "maybe param" "maybe type" "temp"
      (622387 'move' call_tmp[622384](71889 call chpl__extendedEuclid st1[71725] st2[71778]))
      const tmp[71890] "dead at end of block" "const" "insert auto destroy" "temp"
      (541181 'init var' tmp[71890] call_tmp[622384])
      (71897 call _check_tuple_var_decl tmp[71890] 2)
      (475635 'end of statement')
      unknown call_tmp[622389] "maybe param" "maybe type" "temp"
      (622392 'move' call_tmp[622389](71891 call tmp[71890] 0))
      const tg[71880] "dead at end of block" "const" "insert auto destroy"
      (541183 'init var' tg[71880] call_tmp[622389])
      unknown call_tmp[622394] "maybe param" "maybe type" "temp"
      (622397 'move' call_tmp[622394](71894 call tmp[71890] 1))
      const tx[71882] "dead at end of block" "const" "insert auto destroy"
      (541185 'init var' tx[71882] call_tmp[622394])
      (71902 'end of statement')
      unknown tmp[491895] "expr temp" "maybe param" "maybe type" "temp"
      unknown tmp[491936] "maybe param" "temp"
      (491939 'move' tmp[491936](491937 'addr of' g[71826]))
      unknown tmp[491947] "maybe param" "temp"
      (491950 'move' tmp[491947](491948 'addr of' x[71828]))
      unknown call_tmp[622403] "expr temp" "maybe param" "maybe type" "temp"
      (622406 'move' call_tmp[622403](375151 call strType _mt[243] this[71469]))
      unknown call_tmp[622408] "expr temp" "maybe param" "maybe type" "temp"
      (622411 'move' call_tmp[622408](71915 call(71910 call (partial) safeCast _mt[243] tg[71880]) call_tmp[622403]))
      unknown call_tmp[622417] "expr temp" "maybe param" "maybe type" "temp"
      (622420 'move' call_tmp[622417](375155 call strType _mt[243] this[71469]))
      unknown call_tmp[622422] "expr temp" "maybe param" "maybe type" "temp"
      (622425 'move' call_tmp[622422](71922 call(71917 call (partial) safeCast _mt[243] tx[71882]) call_tmp[622417]))
      (491896 'move' tmp[491895](71924 call _build_tuple call_tmp[622408] call_tmp[622422]))
      { scopeless
        unknown call_tmp[622429] "expr temp" "maybe param" "maybe type" "temp"
        (622432 'move' call_tmp[622429](491902 call size _mt[243] tmp[491895]))
        unknown call_tmp[622434] "expr temp" "maybe param" "maybe type" "temp"
        (622437 'move' call_tmp[622434](491905 call != 2 call_tmp[622429]))
        unknown call_tmp[622439] "expr temp" "maybe param" "maybe type" "temp"
        (622442 'move' call_tmp[622439](491928 call _cond_test call_tmp[622434]))
        if call_tmp[622439]
        {
          (491924 call compilerError "tuple size must match the number of grouped variables" 0)
        }
      }
      unknown call_tmp[622444] "expr temp" "maybe param" "maybe type" "temp"
      (622447 'move' call_tmp[622444](491934 call tmp[491895] 0))
      (491941 call = tmp[491936] call_tmp[622444])
      unknown call_tmp[622449] "expr temp" "maybe param" "maybe type" "temp"
      (622452 'move' call_tmp[622449](491945 call tmp[491895] 1))
      (491952 call = tmp[491947] call_tmp[622449])
      (475636 'end of statement' g[71826] x[71828] tg[71880] tx[71882])
      unknown call_tmp[622454] "expr temp" "maybe param" "maybe type" "temp"
      (622457 'move' call_tmp[622454](71932 call / st1[71725] g[71826]))
      unknown call_tmp[622459] "expr temp" "maybe param" "maybe type" "temp"
      (622462 'move' call_tmp[622459](71935 call * call_tmp[622454] st2[71778]))
      (71937 call = lcm[71822] call_tmp[622459])
      (475641 'end of statement' lcm[71822] st1[71725] g[71826] st2[71778])
      unknown tmp[557679] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557680] "maybe param" "temp"
      unknown call_tmp[622466] "expr temp" "maybe param" "maybe type" "temp"
      (622469 'move' call_tmp[622466](71942 call stride _mt[243] this[71469]))
      unknown call_tmp[622471] "expr temp" "maybe param" "maybe type" "temp"
      (622474 'move' call_tmp[622471](71946 call > call_tmp[622466] 0))
      (557685 'move' tmp[557680](557683 call _cond_test call_tmp[622471]))
      if tmp[557680]
      {
        (557690 'move' tmp[557679](557687 '_paramFoldLogical' tmp[557680] lcm[71822]))
      }
      {
        unknown tmp[557692] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557694 'move' tmp[557692](71950 call - lcm[71822]))
        (557699 'move' tmp[557679](557696 '_paramFoldLogical' tmp[557680] tmp[557692]))
      }
      (71955 call = newStride[71810] tmp[557679])
      (475646 'end of statement' newStride[71810] lcm[71822] lcm[71822])
    }
    unknown emptyIntersection[71963] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[541187] "maybe param" "maybe type" "temp"
    (541193 'move' type_tmp[541187] bool[10])
    (541189 'init var split decl' emptyIntersection[71963] type_tmp[541187])
    (71966 'end of statement')
    function min[71973](arg x[71970]:int(64)[13], arg y[71976]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510516] "RVV" "temp"
      unknown call_tmp[622476] "expr temp" "maybe param" "maybe type" "temp"
      (622479 'move' call_tmp[622476](71983 call max int(64)[13]))
      unknown call_tmp[622481] "expr temp" "maybe param" "maybe type" "temp"
      (622484 'move' call_tmp[622481](71984 call > y[71976] call_tmp[622476]))
      unknown call_tmp[622486] "expr temp" "maybe param" "maybe type" "temp"
      (622489 'move' call_tmp[622486](71990 call _cond_test call_tmp[622481]))
      if call_tmp[622486]
      {
        (510521 'move' ret[510516](510520 'deref' x[71970]))
        gotoReturn _end_min[510514] _end_min[510514]
      }
      unknown call_tmp[622491] "expr temp" "maybe param" "maybe type" "temp"
      (622494 'move' call_tmp[622491](72000 call _cast int(64)[13] y[71976]))
      unknown call_tmp[622496] "expr temp" "maybe param" "maybe type" "temp"
      (622499 'move' call_tmp[622496](72002 call min x[71970] call_tmp[622491]))
      (510526 'move' ret[510516](510525 'deref' call_tmp[622496]))
      label _end_min[510514]
      (510518 return ret[510516])
    }
    function min[72013](arg x[72010]:uint(64)[115], arg y[72016]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510530] "RVV" "temp"
      unknown call_tmp[622501] "expr temp" "maybe param" "maybe type" "temp"
      (622504 'move' call_tmp[622501](72021 call < y[72016] 0))
      unknown call_tmp[622506] "expr temp" "maybe param" "maybe type" "temp"
      (622509 'move' call_tmp[622506](72032 call _cond_test call_tmp[622501]))
      if call_tmp[622506]
      {
        (72025 call = emptyIntersection[71963] 1)
        (475652 'end of statement')
        (510535 'move' ret[510530](510534 'deref' x[72010]))
        gotoReturn _end_min[510528] _end_min[510528]
      }
      unknown call_tmp[622511] "expr temp" "maybe param" "maybe type" "temp"
      (622514 'move' call_tmp[622511](72042 call _cast uint(64)[115] y[72016]))
      unknown call_tmp[622516] "expr temp" "maybe param" "maybe type" "temp"
      (622519 'move' call_tmp[622516](72044 call min x[72010] call_tmp[622511]))
      (510540 'move' ret[510530](510539 'deref' call_tmp[622516]))
      label _end_min[510528]
      (510532 return ret[510530])
    }
    function max[72055](arg x[72052]:int(64)[13], arg y[72058]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510544] "RVV" "temp"
      unknown call_tmp[622521] "expr temp" "maybe param" "maybe type" "temp"
      (622524 'move' call_tmp[622521](72065 call max int(64)[13]))
      unknown call_tmp[622526] "expr temp" "maybe param" "maybe type" "temp"
      (622529 'move' call_tmp[622526](72066 call > y[72058] call_tmp[622521]))
      unknown call_tmp[622531] "expr temp" "maybe param" "maybe type" "temp"
      (622534 'move' call_tmp[622531](72077 call _cond_test call_tmp[622526]))
      if call_tmp[622531]
      {
        (72070 call = emptyIntersection[71963] 1)
        (475655 'end of statement')
        (510549 'move' ret[510544](510548 'deref' x[72052]))
        gotoReturn _end_max[510542] _end_max[510542]
      }
      unknown call_tmp[622536] "expr temp" "maybe param" "maybe type" "temp"
      (622539 'move' call_tmp[622536](72087 call _cast int(64)[13] y[72058]))
      unknown call_tmp[622541] "expr temp" "maybe param" "maybe type" "temp"
      (622544 'move' call_tmp[622541](72089 call max x[72052] call_tmp[622536]))
      (510554 'move' ret[510544](510553 'deref' call_tmp[622541]))
      label _end_max[510542]
      (510546 return ret[510544])
    }
    function max[72100](arg x[72097]:uint(64)[115], arg y[72103]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510558] "RVV" "temp"
      unknown call_tmp[622546] "expr temp" "maybe param" "maybe type" "temp"
      (622549 'move' call_tmp[622546](72108 call < y[72103] 0))
      unknown call_tmp[622551] "expr temp" "maybe param" "maybe type" "temp"
      (622554 'move' call_tmp[622551](72114 call _cond_test call_tmp[622546]))
      if call_tmp[622551]
      {
        (510563 'move' ret[510558](510562 'deref' x[72097]))
        gotoReturn _end_max[510556] _end_max[510556]
      }
      unknown call_tmp[622556] "expr temp" "maybe param" "maybe type" "temp"
      (622559 'move' call_tmp[622556](72124 call _cast uint(64)[115] y[72103]))
      unknown call_tmp[622561] "expr temp" "maybe param" "maybe type" "temp"
      (622564 'move' call_tmp[622561](72126 call max x[72097] call_tmp[622556]))
      (510568 'move' ret[510558](510567 'deref' call_tmp[622561]))
      label _end_max[510556]
      (510560 return ret[510558])
    }
    (541195 'init var split init' emptyIntersection[71963] 0 type_tmp[541187])
    (475660 'end of statement' emptyIntersection[71963])
    unknown call_tmp[622568] "expr temp" "maybe param" "maybe type" "temp"
    (622571 'move' call_tmp[622568](375187 call intIdxType _mt[243] this[71469]))
    unknown call_tmp[622573] "expr temp" "maybe param" "maybe type" "temp"
    (622576 'move' call_tmp[622573](72140 call max lo1[71696] lo2[71746]))
    unknown call_tmp[622578] "maybe param" "maybe type" "temp"
    (622581 'move' call_tmp[622578](72142 call _cast call_tmp[622568] call_tmp[622573]))
    unknown newlo[72144] "dead at end of block" "insert auto destroy"
    (541198 'init var' newlo[72144] call_tmp[622578])
    (72147 'end of statement')
    unknown call_tmp[622585] "expr temp" "maybe param" "maybe type" "temp"
    (622588 'move' call_tmp[622585](375193 call intIdxType _mt[243] this[71469]))
    unknown call_tmp[622590] "expr temp" "maybe param" "maybe type" "temp"
    (622593 'move' call_tmp[622590](72152 call min hi1[71714] hi2[71767]))
    unknown call_tmp[622595] "maybe param" "maybe type" "temp"
    (622598 'move' call_tmp[622595](72154 call _cast call_tmp[622585] call_tmp[622590]))
    unknown newhi[72156] "dead at end of block" "insert auto destroy"
    (541200 'init var' newhi[72156] call_tmp[622595])
    (72159 'end of statement')
    unknown call_tmp[622600] "expr temp" "maybe param" "maybe type" "temp"
    (622603 'move' call_tmp[622600](72172 call _cond_test emptyIntersection[71963]))
    if call_tmp[622600]
    {
      (72163 call = newlo[72144] 1)
      (475666 'end of statement' newlo[72144])
      (72169 call = newhi[72156] 0)
      (475668 'end of statement' newhi[72156])
    }
    unknown tmp[420349] "maybe param" "temp"
    (420360 'move' tmp[420349](72209 call ! ambig[71475]))
    unknown call_tmp[622605] "expr temp" "maybe param" "maybe type" "temp"
    (622608 'move' call_tmp[622605](420362 call _cond_invalid tmp[420349]))
    if call_tmp[622605]
    {
      (420365 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown result[72224] "dead at end of block" "insert auto destroy"
    unknown tmp[557733] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557734] "maybe param" "temp"
    unknown call_tmp[622610] "expr temp" "maybe param" "maybe type" "temp"
    (622613 'move' call_tmp[622610](420350 call isTrue tmp[420349]))
    (557739 'move' tmp[557734](557737 call _cond_test call_tmp[622610]))
    if tmp[557734]
    {
      unknown tmp[420370] "maybe param" "temp"
      (420381 'move' tmp[420370](72212 call aligned _mt[243] this[71469]))
      unknown call_tmp[622617] "expr temp" "maybe param" "maybe type" "temp"
      (622620 'move' call_tmp[622617](420383 call _cond_invalid tmp[420370]))
      if call_tmp[622617]
      {
        (420386 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[557706] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557707] "maybe param" "temp"
      unknown call_tmp[622622] "expr temp" "maybe param" "maybe type" "temp"
      (622625 'move' call_tmp[622622](420371 call isTrue tmp[420370]))
      (557712 'move' tmp[557707](557710 call _cond_test call_tmp[622622]))
      if tmp[557707]
      {
        (557717 'move' tmp[557706](557714 '_paramFoldLogical' tmp[557707] 1))
      }
      {
        unknown tmp[557719] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622629] "expr temp" "maybe param" "maybe type" "temp"
        (622632 'move' call_tmp[622629](72216 call aligned _mt[243] other[71464]))
        (557721 'move' tmp[557719](420375 call isTrue call_tmp[622629]))
        (557726 'move' tmp[557706](557723 '_paramFoldLogical' tmp[557707] tmp[557719]))
      }
      unknown tmp[557741] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557743 'move' tmp[557741](420353 call isTrue tmp[557706]))
      (557748 'move' tmp[557733](557745 '_paramFoldLogical' tmp[557734] tmp[557741]))
    }
    {
      (557753 'move' tmp[557733](557750 '_paramFoldLogical' tmp[557734] 0))
    }
    unknown call_tmp[622636] "expr temp" "maybe param" "maybe type" "temp"
    (622639 'move' call_tmp[622636](375202 call idxType _mt[243] this[71469]))
    unknown call_tmp[622641] "expr temp" "maybe param" "maybe type" "temp"
    (622644 'move' call_tmp[622641](72184 call computeBoundedType this[71469] other[71464]))
    unknown call_tmp[622648] "expr temp" "maybe param" "maybe type" "temp"
    (622651 'move' call_tmp[622648](72186 call stridable _mt[243] this[71469]))
    unknown call_tmp[622655] "expr temp" "maybe param" "maybe type" "temp"
    (622658 'move' call_tmp[622655](72190 call stridable _mt[243] other[71464]))
    unknown call_tmp[622660] "expr temp" "maybe param" "maybe type" "temp"
    (622663 'move' call_tmp[622660](72193 call | call_tmp[622648] call_tmp[622655]))
    unknown call_tmp[622667] "expr temp" "maybe param" "maybe type" "temp"
    (622670 'move' call_tmp[622667](72198 call(375208 call (partial) chpl_intToIdx _mt[243] this[71469]) newlo[72144]))
    unknown call_tmp[622674] "expr temp" "maybe param" "maybe type" "temp"
    (622677 'move' call_tmp[622674](72202 call(375213 call (partial) chpl_intToIdx _mt[243] this[71469]) newhi[72156]))
    unknown call_tmp[622681] "expr temp" "maybe param" "maybe type" "temp"
    (622684 'move' call_tmp[622681](72207 call(375219 call (partial) chpl_intToIdx _mt[243] this[71469]) 0))
    unknown call_tmp[622686] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (622689 'move' call_tmp[622686](747850 'new' range[64319](?) call_tmp[622636] call_tmp[622641] call_tmp[622660] call_tmp[622667] call_tmp[622674] newStride[71810] call_tmp[622681] tmp[557733]))
    (541202 'init var' result[72224] call_tmp[622686])
    (72227 'end of statement' lo1[71696] lo2[71746] hi1[71714] hi2[71767] newlo[72144] newhi[72156] newStride[71810])
    unknown call_tmp[622693] "expr temp" "maybe param" "maybe type" "temp"
    (622696 'move' call_tmp[622693](72229 call stridable _mt[243] result[72224]))
    unknown call_tmp[622698] "expr temp" "maybe param" "maybe type" "temp"
    (622701 'move' call_tmp[622698](72433 call _cond_test call_tmp[622693]))
    if call_tmp[622698]
    {
      unknown call_tmp[622705] "expr temp" "maybe param" "maybe type" "temp"
      (622708 'move' call_tmp[622705](72234 call alignment _mt[243] this[71469]))
      unknown call_tmp[622710] "expr temp" "maybe param" "maybe type" "temp"
      (622713 'move' call_tmp[622710](72238 call chpl__idxToInt call_tmp[622705]))
      unknown call_tmp[622717] "expr temp" "maybe param" "maybe type" "temp"
      (622720 'move' call_tmp[622717](375225 call intIdxType _mt[243] this[71469]))
      unknown call_tmp[622722] "expr temp" "maybe param" "maybe type" "temp"
      (622725 'move' call_tmp[622722](72241 call _cast call_tmp[622717] st1[71725]))
      unknown call_tmp[622727] "expr temp" "maybe param" "maybe type" "temp"
      (622730 'move' call_tmp[622727](72243 call % call_tmp[622710] call_tmp[622722]))
      unknown call_tmp[622732] "maybe param" "maybe type" "temp"
      (622735 'move' call_tmp[622732](72246 call _cast int(64)[13] call_tmp[622727]))
      unknown al1[72248] "dead at end of block" "insert auto destroy"
      (541204 'init var' al1[72248] call_tmp[622732])
      (72251 'end of statement')
      unknown call_tmp[622739] "expr temp" "maybe param" "maybe type" "temp"
      (622742 'move' call_tmp[622739](72255 call alignment _mt[243] other[71464]))
      unknown call_tmp[622744] "expr temp" "maybe param" "maybe type" "temp"
      (622747 'move' call_tmp[622744](72259 call chpl__idxToInt call_tmp[622739]))
      unknown call_tmp[622751] "expr temp" "maybe param" "maybe type" "temp"
      (622754 'move' call_tmp[622751](72262 call intIdxType _mt[243] other[71464]))
      unknown call_tmp[622756] "expr temp" "maybe param" "maybe type" "temp"
      (622759 'move' call_tmp[622756](72265 call _cast call_tmp[622751] st2[71778]))
      unknown call_tmp[622761] "expr temp" "maybe param" "maybe type" "temp"
      (622764 'move' call_tmp[622761](72267 call % call_tmp[622744] call_tmp[622756]))
      unknown call_tmp[622766] "maybe param" "maybe type" "temp"
      (622769 'move' call_tmp[622766](72270 call _cast int(64)[13] call_tmp[622761]))
      unknown al2[72272] "dead at end of block" "insert auto destroy"
      (541206 'init var' al2[72272] call_tmp[622766])
      (72275 'end of statement' st1[71725] st2[71778])
      unknown call_tmp[622771] "expr temp" "maybe param" "maybe type" "temp"
      (622774 'move' call_tmp[622771](72278 call - al2[72272] al1[72248]))
      unknown call_tmp[622776] "expr temp" "maybe param" "maybe type" "temp"
      (622779 'move' call_tmp[622776](72281 call % call_tmp[622771] g[71826]))
      unknown call_tmp[622781] "expr temp" "maybe param" "maybe type" "temp"
      (622784 'move' call_tmp[622781](72284 call != call_tmp[622776] 0))
      unknown call_tmp[622786] "expr temp" "maybe param" "maybe type" "temp"
      (622789 'move' call_tmp[622786](72429 call _cond_test call_tmp[622781]))
      if call_tmp[622786]
      {
        unknown tmp[420391] "maybe param" "temp"
        (420402 'move' tmp[420391] 1)
        unknown call_tmp[622791] "expr temp" "maybe param" "maybe type" "temp"
        (622794 'move' call_tmp[622791](420404 call _cond_invalid tmp[420391]))
        if call_tmp[622791]
        {
          (420407 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557760] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557761] "maybe param" "temp"
        unknown call_tmp[622796] "expr temp" "maybe param" "maybe type" "temp"
        (622799 'move' call_tmp[622796](420392 call isTrue tmp[420391]))
        (557766 'move' tmp[557761](557764 call _cond_test call_tmp[622796]))
        if tmp[557761]
        {
          unknown tmp[557768] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622801] "expr temp" "maybe param" "maybe type" "temp"
          (622804 'move' call_tmp[622801](72290 call isBoundedRange result[72224]))
          unknown call_tmp[622806] "expr temp" "maybe param" "maybe type" "temp"
          (622809 'move' call_tmp[622806](72291 call ! call_tmp[622801]))
          (557770 'move' tmp[557768](420395 call isTrue call_tmp[622806]))
          (557775 'move' tmp[557760](557772 '_paramFoldLogical' tmp[557761] tmp[557768]))
        }
        {
          (557780 'move' tmp[557760](557777 '_paramFoldLogical' tmp[557761] 0))
        }
        unknown call_tmp[622811] "expr temp" "maybe param" "maybe type" "temp"
        (622814 'move' call_tmp[622811](72321 call _cond_test tmp[557760]))
        if call_tmp[622811]
        {
          (72319 call boundsCheckHalt module=[255] HaltWrappers[210018] "could not represent range slice - it needs to be empty, but the slice type is not bounded")
          (357914 'referenced modules list' HaltWrappers[210018])
        }
        unknown call_tmp[622818] "expr temp" "maybe param" "maybe type" "temp"
        (622821 'move' call_tmp[622818](72328 call _low _mt[243] result[72224]))
        unknown call_tmp[622825] "expr temp" "maybe param" "maybe type" "temp"
        (622828 'move' call_tmp[622825](375235 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622830] "expr temp" "maybe param" "maybe type" "temp"
        (622833 'move' call_tmp[622830](72333 call _cast call_tmp[622825] 1))
        (72335 call = call_tmp[622818] call_tmp[622830])
        (475678 'end of statement' result[72224])
        unknown call_tmp[622837] "expr temp" "maybe param" "maybe type" "temp"
        (622840 'move' call_tmp[622837](72339 call _high _mt[243] result[72224]))
        unknown call_tmp[622844] "expr temp" "maybe param" "maybe type" "temp"
        (622847 'move' call_tmp[622844](375239 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622849] "expr temp" "maybe param" "maybe type" "temp"
        (622852 'move' call_tmp[622849](72344 call _cast call_tmp[622844] 0))
        (72346 call = call_tmp[622837] call_tmp[622849])
        (475680 'end of statement' result[72224])
        unknown tmp[557787] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557788] "maybe param" "temp"
        unknown call_tmp[622856] "expr temp" "maybe param" "maybe type" "temp"
        (622859 'move' call_tmp[622856](72354 call stride _mt[243] this[71469]))
        unknown call_tmp[622861] "expr temp" "maybe param" "maybe type" "temp"
        (622864 'move' call_tmp[622861](72358 call > call_tmp[622856] 0))
        (557793 'move' tmp[557788](557791 call _cond_test call_tmp[622861]))
        if tmp[557788]
        {
          unknown tmp[557795] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622868] "expr temp" "maybe param" "maybe type" "temp"
          (622871 'move' call_tmp[622868](375243 call intIdxType _mt[243] this[71469]))
          (557797 'move' tmp[557795](72362 call _cast call_tmp[622868] 1))
          (557802 'move' tmp[557787](557799 '_paramFoldLogical' tmp[557788] tmp[557795]))
        }
        {
          unknown tmp[557804] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622875] "expr temp" "maybe param" "maybe type" "temp"
          (622878 'move' call_tmp[622875](375247 call intIdxType _mt[243] this[71469]))
          (557806 'move' tmp[557804](72366 call _cast call_tmp[622875] 0))
          (557811 'move' tmp[557787](557808 '_paramFoldLogical' tmp[557788] tmp[557804]))
        }
        unknown call_tmp[622882] "expr temp" "maybe param" "maybe type" "temp"
        (622885 'move' call_tmp[622882](72350 call _alignment _mt[243] result[72224]))
        (72371 call = call_tmp[622882] tmp[557787])
        (475682 'end of statement' result[72224])
      }
      {
        unknown call_tmp[622887] "expr temp" "maybe param" "maybe type" "temp"
        (622890 'move' call_tmp[622887](72376 call - al2[72272] al1[72248]))
        unknown call_tmp[622892] "maybe param" "maybe type" "temp"
        (622895 'move' call_tmp[622892](72379 call * call_tmp[622887] x[71828]))
        unknown offset[72381] "dead at end of block" "insert auto destroy"
        (541208 'init var' offset[72381] call_tmp[622892])
        (72384 'end of statement' al2[72272] al1[72248] x[71828])
        unknown call_tmp[622897] "expr temp" "maybe param" "maybe type" "temp"
        (622900 'move' call_tmp[622897](72388 call < offset[72381] 0))
        unknown call_tmp[622902] "expr temp" "maybe param" "maybe type" "temp"
        (622905 'move' call_tmp[622902](72395 call _cond_test call_tmp[622897]))
        if call_tmp[622902]
        {
          (72392 call += offset[72381] lcm[71822])
          (475687 'end of statement' offset[72381] lcm[71822])
        }
        unknown call_tmp[622909] "expr temp" "maybe param" "maybe type" "temp"
        (622912 'move' call_tmp[622909](72401 call _alignment _mt[243] result[72224]))
        unknown call_tmp[622916] "expr temp" "maybe param" "maybe type" "temp"
        (622919 'move' call_tmp[622916](375258 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622921] "expr temp" "maybe param" "maybe type" "temp"
        (622924 'move' call_tmp[622921](72406 call _cast call_tmp[622916] al1[72248]))
        unknown call_tmp[622928] "expr temp" "maybe param" "maybe type" "temp"
        (622931 'move' call_tmp[622928](375263 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622933] "expr temp" "maybe param" "maybe type" "temp"
        (622936 'move' call_tmp[622933](72410 call _cast call_tmp[622928] offset[72381]))
        unknown call_tmp[622940] "expr temp" "maybe param" "maybe type" "temp"
        (622943 'move' call_tmp[622940](375268 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622945] "expr temp" "maybe param" "maybe type" "temp"
        (622948 'move' call_tmp[622945](72414 call _cast call_tmp[622940] st1[71725]))
        unknown call_tmp[622950] "expr temp" "maybe param" "maybe type" "temp"
        (622953 'move' call_tmp[622950](72416 call * call_tmp[622933] call_tmp[622945]))
        unknown call_tmp[622957] "expr temp" "maybe param" "maybe type" "temp"
        (622960 'move' call_tmp[622957](375273 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622962] "expr temp" "maybe param" "maybe type" "temp"
        (622965 'move' call_tmp[622962](72420 call _cast call_tmp[622957] g[71826]))
        unknown call_tmp[622967] "expr temp" "maybe param" "maybe type" "temp"
        (622970 'move' call_tmp[622967](72422 call / call_tmp[622950] call_tmp[622962]))
        unknown call_tmp[622972] "expr temp" "maybe param" "maybe type" "temp"
        (622975 'move' call_tmp[622972](72424 call + call_tmp[622921] call_tmp[622967]))
        (72426 call = call_tmp[622909] call_tmp[622972])
        (475690 'end of statement' result[72224] al1[72248] offset[72381] st1[71725] g[71826])
      }
    }
    (510577 'move' ret[510572](510576 'deref' result[72224]))
    gotoReturn _end_this[510570] _end_this[510570]
    (475696 'end of statement' result[72224])
    label _end_this[510570]
    (510574 return ret[510572])
  }
  function chpl_count_help[72451](arg r[72448]:range[64319](?), arg i[72453]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (72486 call compilerError "count operator is not defined for unbounded ranges")
    (510581 return _void[55])
  }
  where {
    unknown call_tmp[622979] "expr temp" "maybe param" "maybe type" "temp"
    (622982 'move' call_tmp[622979](72456 call boundedType _mt[243] r[72448]))
    (72463 call == call_tmp[622979] boundedNone[64214])
  }
  function chpl_count_help[72496](arg r[72494]:_any[178](?), arg count[72499]:integral[199](?)) : _unknown[51]
  {
    unknown ret[510622] "RVV" "temp"
    unknown tmp[420412] "maybe param" "temp"
    (420423 'move' tmp[420412] 1)
    unknown call_tmp[622984] "expr temp" "maybe param" "maybe type" "temp"
    (622987 'move' call_tmp[622984](420425 call _cond_invalid tmp[420412]))
    if call_tmp[622984]
    {
      (420428 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557818] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557819] "maybe param" "temp"
    unknown call_tmp[622989] "expr temp" "maybe param" "maybe type" "temp"
    (622992 'move' call_tmp[622989](420413 call isTrue tmp[420412]))
    (557824 'move' tmp[557819](557822 call _cond_test call_tmp[622989]))
    if tmp[557819]
    {
      unknown tmp[557826] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622996] "expr temp" "maybe param" "maybe type" "temp"
      (622999 'move' call_tmp[622996](72508 call(72504 call (partial) isAmbiguous _mt[243] r[72494])))
      (557828 'move' tmp[557826](420416 call isTrue call_tmp[622996]))
      (557833 'move' tmp[557818](557830 '_paramFoldLogical' tmp[557819] tmp[557826]))
    }
    {
      (557838 'move' tmp[557818](557835 '_paramFoldLogical' tmp[557819] 0))
    }
    unknown call_tmp[623001] "expr temp" "maybe param" "maybe type" "temp"
    (623004 'move' call_tmp[623001](72534 call _cond_test tmp[557818]))
    if call_tmp[623001]
    {
      (72532 call boundsCheckHalt "count -- Cannot count off elements from a range which is ambiguously aligned.")
    }
    unknown resultType[72544] "dead at end of block" "insert auto destroy" "type variable"(72541 call intIdxType _mt[243] r[72494])
    (541214 'move' resultType[72544](541211 call intIdxType _mt[243] r[72494]))
    unknown strType[72551] "dead at end of block" "insert auto destroy" "type variable"(72550 call chpl__rangeStrideType resultType[72544])
    (541219 'move' strType[72551](541217 call chpl__rangeStrideType resultType[72544]))
    function absSameType[72558](arg str[72556]:_any[178](?)) : _unknown[51]
    {
      unknown ret[510585] "RVV" "temp"
      unknown call_tmp[623012] "expr temp" "maybe param" "maybe type" "temp"
      (623015 'move' call_tmp[623012](72561 call stride _mt[243] r[72494]))
      unknown call_tmp[623017] "expr temp" "maybe param" "maybe type" "temp"
      (623020 'move' call_tmp[623017](72565 call < call_tmp[623012] 0))
      unknown call_tmp[623022] "expr temp" "maybe param" "maybe type" "temp"
      (623025 'move' call_tmp[623022](72589 call _cond_test call_tmp[623017]))
      if call_tmp[623022]
      {
        unknown call_tmp[623029] "expr temp" "maybe param" "maybe type" "temp"
        (623032 'move' call_tmp[623029](72568 call stride _mt[243] r[72494]))
        unknown call_tmp[623034] "expr temp" "maybe param" "maybe type" "temp"
        (623037 'move' call_tmp[623034](72571 call - call_tmp[623029]))
        unknown call_tmp[623039] "expr temp" "maybe param" "maybe type" "temp"
        (623042 'move' call_tmp[623039](72574 call _cast resultType[72544] call_tmp[623034]))
        (510590 'move' ret[510585](510589 'deref' call_tmp[623039]))
        gotoReturn _end_absSameType[510583] _end_absSameType[510583]
      }
      {
        unknown call_tmp[623046] "expr temp" "maybe param" "maybe type" "temp"
        (623049 'move' call_tmp[623046](72580 call stride _mt[243] r[72494]))
        unknown call_tmp[623051] "expr temp" "maybe param" "maybe type" "temp"
        (623054 'move' call_tmp[623051](72584 call _cast resultType[72544] call_tmp[623046]))
        (510595 'move' ret[510585](510594 'deref' call_tmp[623051]))
        gotoReturn _end_absSameType[510583] _end_absSameType[510583]
      }
      label _end_absSameType[510583]
      (510587 return ret[510585])
    }
    unknown call_tmp[623056] "expr temp" "maybe param" "maybe type" "temp"
    (623059 'move' call_tmp[623056](72598 call == count[72499] 0))
    unknown call_tmp[623061] "expr temp" "maybe param" "maybe type" "temp"
    (623064 'move' call_tmp[623061](72798 call _cond_test call_tmp[623056]))
    if call_tmp[623061]
    {
      unknown call_tmp[623068] "expr temp" "maybe param" "maybe type" "temp"
      (623071 'move' call_tmp[623068](72605 call(72601 call (partial) hasLowBound _mt[243] r[72494])))
      unknown call_tmp[623073] "expr temp" "maybe param" "maybe type" "temp"
      (623076 'move' call_tmp[623073](72792 call _cond_test call_tmp[623068]))
      if call_tmp[623073]
      {
        unknown call_tmp[623080] "expr temp" "maybe param" "maybe type" "temp"
        (623083 'move' call_tmp[623080](72609 call idxType _mt[243] r[72494]))
        unknown call_tmp[623087] "expr temp" "maybe param" "maybe type" "temp"
        (623090 'move' call_tmp[623087](72620 call stridable _mt[243] r[72494]))
        unknown call_tmp[623094] "expr temp" "maybe param" "maybe type" "temp"
        (623097 'move' call_tmp[623094](72626 call idxType _mt[243] r[72494]))
        unknown call_tmp[623101] "expr temp" "maybe param" "maybe type" "temp"
        (623104 'move' call_tmp[623101](72631 call _low _mt[243] r[72494]))
        unknown call_tmp[623106] "expr temp" "maybe param" "maybe type" "temp"
        (623109 'move' call_tmp[623106](72634 call chpl__intToIdx call_tmp[623094] call_tmp[623101]))
        unknown call_tmp[623113] "expr temp" "maybe param" "maybe type" "temp"
        (623116 'move' call_tmp[623113](72638 call idxType _mt[243] r[72494]))
        unknown call_tmp[623120] "expr temp" "maybe param" "maybe type" "temp"
        (623123 'move' call_tmp[623120](72643 call _low _mt[243] r[72494]))
        unknown call_tmp[623127] "expr temp" "maybe param" "maybe type" "temp"
        (623130 'move' call_tmp[623127](72648 call stride _mt[243] r[72494]))
        unknown call_tmp[623132] "expr temp" "maybe param" "maybe type" "temp"
        (623135 'move' call_tmp[623132](72652 call absSameType call_tmp[623127]))
        unknown call_tmp[623137] "expr temp" "maybe param" "maybe type" "temp"
        (623140 'move' call_tmp[623137](72653 call - call_tmp[623120] call_tmp[623132]))
        unknown call_tmp[623142] "expr temp" "maybe param" "maybe type" "temp"
        (623145 'move' call_tmp[623142](72655 call chpl__intToIdx call_tmp[623113] call_tmp[623137]))
        unknown call_tmp[623149] "expr temp" "maybe param" "maybe type" "temp"
        (623152 'move' call_tmp[623149](72658 call stride _mt[243] r[72494]))
        unknown call_tmp[623156] "expr temp" "maybe param" "maybe type" "temp"
        (623159 'move' call_tmp[623156](72664 call idxType _mt[243] r[72494]))
        unknown call_tmp[623163] "expr temp" "maybe param" "maybe type" "temp"
        (623166 'move' call_tmp[623163](72669 call _alignment _mt[243] r[72494]))
        unknown call_tmp[623168] "expr temp" "maybe param" "maybe type" "temp"
        (623171 'move' call_tmp[623168](72672 call chpl__intToIdx call_tmp[623156] call_tmp[623163]))
        unknown call_tmp[623175] "expr temp" "maybe param" "maybe type" "temp"
        (623178 'move' call_tmp[623175](72675 call aligned _mt[243] r[72494]))
        unknown call_tmp[623180] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (623183 'move' call_tmp[623180](747851 'new' range[64319](?)(idxType = call_tmp[623080])(boundedType = bounded[64208])(stridable = call_tmp[623087])(_low = call_tmp[623106])(_high = call_tmp[623142])(_stride = call_tmp[623149])(_alignment = call_tmp[623168])(_aligned = call_tmp[623175])))
        (510627 'move' ret[510622](510626 'deref' call_tmp[623180]))
        gotoReturn _end_chpl_count_help[510620] _end_chpl_count_help[510620]
      }
      {
        unknown call_tmp[623187] "expr temp" "maybe param" "maybe type" "temp"
        (623190 'move' call_tmp[623187](72688 call(72684 call (partial) hasHighBound _mt[243] r[72494])))
        unknown call_tmp[623192] "expr temp" "maybe param" "maybe type" "temp"
        (623195 'move' call_tmp[623192](72788 call _cond_test call_tmp[623187]))
        if call_tmp[623192]
        {
          unknown call_tmp[623199] "expr temp" "maybe param" "maybe type" "temp"
          (623202 'move' call_tmp[623199](72692 call idxType _mt[243] r[72494]))
          unknown call_tmp[623206] "expr temp" "maybe param" "maybe type" "temp"
          (623209 'move' call_tmp[623206](72703 call stridable _mt[243] r[72494]))
          unknown call_tmp[623213] "expr temp" "maybe param" "maybe type" "temp"
          (623216 'move' call_tmp[623213](72709 call idxType _mt[243] r[72494]))
          unknown call_tmp[623220] "expr temp" "maybe param" "maybe type" "temp"
          (623223 'move' call_tmp[623220](72714 call _high _mt[243] r[72494]))
          unknown call_tmp[623227] "expr temp" "maybe param" "maybe type" "temp"
          (623230 'move' call_tmp[623227](72719 call stride _mt[243] r[72494]))
          unknown call_tmp[623232] "expr temp" "maybe param" "maybe type" "temp"
          (623235 'move' call_tmp[623232](72723 call absSameType call_tmp[623227]))
          unknown call_tmp[623237] "expr temp" "maybe param" "maybe type" "temp"
          (623240 'move' call_tmp[623237](72724 call + call_tmp[623220] call_tmp[623232]))
          unknown call_tmp[623242] "expr temp" "maybe param" "maybe type" "temp"
          (623245 'move' call_tmp[623242](72726 call chpl__intToIdx call_tmp[623213] call_tmp[623237]))
          unknown call_tmp[623249] "expr temp" "maybe param" "maybe type" "temp"
          (623252 'move' call_tmp[623249](72730 call idxType _mt[243] r[72494]))
          unknown call_tmp[623256] "expr temp" "maybe param" "maybe type" "temp"
          (623259 'move' call_tmp[623256](72735 call _high _mt[243] r[72494]))
          unknown call_tmp[623261] "expr temp" "maybe param" "maybe type" "temp"
          (623264 'move' call_tmp[623261](72738 call chpl__intToIdx call_tmp[623249] call_tmp[623256]))
          unknown call_tmp[623268] "expr temp" "maybe param" "maybe type" "temp"
          (623271 'move' call_tmp[623268](72741 call stride _mt[243] r[72494]))
          unknown call_tmp[623275] "expr temp" "maybe param" "maybe type" "temp"
          (623278 'move' call_tmp[623275](72747 call idxType _mt[243] r[72494]))
          unknown call_tmp[623282] "expr temp" "maybe param" "maybe type" "temp"
          (623285 'move' call_tmp[623282](72752 call _alignment _mt[243] r[72494]))
          unknown call_tmp[623287] "expr temp" "maybe param" "maybe type" "temp"
          (623290 'move' call_tmp[623287](72755 call chpl__intToIdx call_tmp[623275] call_tmp[623282]))
          unknown call_tmp[623294] "expr temp" "maybe param" "maybe type" "temp"
          (623297 'move' call_tmp[623294](72758 call aligned _mt[243] r[72494]))
          unknown call_tmp[623299] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (623302 'move' call_tmp[623299](747852 'new' range[64319](?)(idxType = call_tmp[623199])(boundedType = bounded[64208])(stridable = call_tmp[623206])(_low = call_tmp[623242])(_high = call_tmp[623261])(_stride = call_tmp[623268])(_alignment = call_tmp[623287])(_aligned = call_tmp[623294])))
          (510632 'move' ret[510622](510631 'deref' call_tmp[623299]))
          gotoReturn _end_chpl_count_help[510620] _end_chpl_count_help[510620]
        }
        {
          (72785 call halt "Internal error: Unexpected case in chpl_count_help")
        }
      }
    }
    unknown tmp[420433] "maybe param" "temp"
    unknown tmp[420454] "maybe param" "temp"
    (420465 'move' tmp[420454] 1)
    unknown call_tmp[623304] "expr temp" "maybe param" "maybe type" "temp"
    (623307 'move' call_tmp[623304](420467 call _cond_invalid tmp[420454]))
    if call_tmp[623304]
    {
      (420470 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557845] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557846] "maybe param" "temp"
    unknown call_tmp[623309] "expr temp" "maybe param" "maybe type" "temp"
    (623312 'move' call_tmp[623309](420455 call isTrue tmp[420454]))
    (557851 'move' tmp[557846](557849 call _cond_test call_tmp[623309]))
    if tmp[557846]
    {
      unknown tmp[557853] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623316] "expr temp" "maybe param" "maybe type" "temp"
      (623319 'move' call_tmp[623316](72808 call(72804 call (partial) hasFirst _mt[243] r[72494])))
      unknown call_tmp[623321] "expr temp" "maybe param" "maybe type" "temp"
      (623324 'move' call_tmp[623321](72809 call ! call_tmp[623316]))
      (557855 'move' tmp[557853](420458 call isTrue call_tmp[623321]))
      (557860 'move' tmp[557845](557857 '_paramFoldLogical' tmp[557846] tmp[557853]))
    }
    {
      (557865 'move' tmp[557845](557862 '_paramFoldLogical' tmp[557846] 0))
    }
    (420444 'move' tmp[420433] tmp[557845])
    unknown call_tmp[623326] "expr temp" "maybe param" "maybe type" "temp"
    (623329 'move' call_tmp[623326](420446 call _cond_invalid tmp[420433]))
    if call_tmp[623326]
    {
      (420449 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557872] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557873] "maybe param" "temp"
    unknown call_tmp[623331] "expr temp" "maybe param" "maybe type" "temp"
    (623334 'move' call_tmp[623331](420434 call isTrue tmp[420433]))
    (557878 'move' tmp[557873](557876 call _cond_test call_tmp[623331]))
    if tmp[557873]
    {
      unknown tmp[557880] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623336] "expr temp" "maybe param" "maybe type" "temp"
      (623339 'move' call_tmp[623336](72815 call > count[72499] 0))
      (557882 'move' tmp[557880](420437 call isTrue call_tmp[623336]))
      (557887 'move' tmp[557872](557884 '_paramFoldLogical' tmp[557873] tmp[557880]))
    }
    {
      (557892 'move' tmp[557872](557889 '_paramFoldLogical' tmp[557873] 0))
    }
    unknown call_tmp[623341] "expr temp" "maybe param" "maybe type" "temp"
    (623344 'move' call_tmp[623341](72840 call _cond_test tmp[557872]))
    if call_tmp[623341]
    {
      (72838 call boundsCheckHalt "With a positive count, the range must have a first index.")
    }
    unknown tmp[420475] "maybe param" "temp"
    unknown tmp[420496] "maybe param" "temp"
    (420507 'move' tmp[420496] 1)
    unknown call_tmp[623346] "expr temp" "maybe param" "maybe type" "temp"
    (623349 'move' call_tmp[623346](420509 call _cond_invalid tmp[420496]))
    if call_tmp[623346]
    {
      (420512 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557899] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557900] "maybe param" "temp"
    unknown call_tmp[623351] "expr temp" "maybe param" "maybe type" "temp"
    (623354 'move' call_tmp[623351](420497 call isTrue tmp[420496]))
    (557905 'move' tmp[557900](557903 call _cond_test call_tmp[623351]))
    if tmp[557900]
    {
      unknown tmp[557907] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623358] "expr temp" "maybe param" "maybe type" "temp"
      (623361 'move' call_tmp[623358](72853 call(72849 call (partial) hasLast _mt[243] r[72494])))
      unknown call_tmp[623363] "expr temp" "maybe param" "maybe type" "temp"
      (623366 'move' call_tmp[623363](72854 call ! call_tmp[623358]))
      (557909 'move' tmp[557907](420500 call isTrue call_tmp[623363]))
      (557914 'move' tmp[557899](557911 '_paramFoldLogical' tmp[557900] tmp[557907]))
    }
    {
      (557919 'move' tmp[557899](557916 '_paramFoldLogical' tmp[557900] 0))
    }
    (420486 'move' tmp[420475] tmp[557899])
    unknown call_tmp[623368] "expr temp" "maybe param" "maybe type" "temp"
    (623371 'move' call_tmp[623368](420488 call _cond_invalid tmp[420475]))
    if call_tmp[623368]
    {
      (420491 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557926] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557927] "maybe param" "temp"
    unknown call_tmp[623373] "expr temp" "maybe param" "maybe type" "temp"
    (623376 'move' call_tmp[623373](420476 call isTrue tmp[420475]))
    (557932 'move' tmp[557927](557930 call _cond_test call_tmp[623373]))
    if tmp[557927]
    {
      unknown tmp[557934] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623378] "expr temp" "maybe param" "maybe type" "temp"
      (623381 'move' call_tmp[623378](72860 call < count[72499] 0))
      (557936 'move' tmp[557934](420479 call isTrue call_tmp[623378]))
      (557941 'move' tmp[557926](557938 '_paramFoldLogical' tmp[557927] tmp[557934]))
    }
    {
      (557946 'move' tmp[557926](557943 '_paramFoldLogical' tmp[557927] 0))
    }
    unknown call_tmp[623383] "expr temp" "maybe param" "maybe type" "temp"
    (623386 'move' call_tmp[623383](72885 call _cond_test tmp[557926]))
    if call_tmp[623383]
    {
      (72883 call boundsCheckHalt "With a negative count, the range must have a last index.")
    }
    unknown tmp[420517] "maybe param" "temp"
    unknown tmp[420538] "maybe param" "temp"
    (420549 'move' tmp[420538] 1)
    unknown call_tmp[623388] "expr temp" "maybe param" "maybe type" "temp"
    (623391 'move' call_tmp[623388](420551 call _cond_invalid tmp[420538]))
    if call_tmp[623388]
    {
      (420554 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557953] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557954] "maybe param" "temp"
    unknown call_tmp[623393] "expr temp" "maybe param" "maybe type" "temp"
    (623396 'move' call_tmp[623393](420539 call isTrue tmp[420538]))
    (557959 'move' tmp[557954](557957 call _cond_test call_tmp[623393]))
    if tmp[557954]
    {
      unknown tmp[557961] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623400] "expr temp" "maybe param" "maybe type" "temp"
      (623403 'move' call_tmp[623400](72892 call boundedType _mt[243] r[72494]))
      unknown call_tmp[623405] "expr temp" "maybe param" "maybe type" "temp"
      (623408 'move' call_tmp[623405](72899 call == call_tmp[623400] bounded[64208]))
      (557963 'move' tmp[557961](420542 call isTrue call_tmp[623405]))
      (557968 'move' tmp[557953](557965 '_paramFoldLogical' tmp[557954] tmp[557961]))
    }
    {
      (557973 'move' tmp[557953](557970 '_paramFoldLogical' tmp[557954] 0))
    }
    (420528 'move' tmp[420517] tmp[557953])
    unknown call_tmp[623410] "expr temp" "maybe param" "maybe type" "temp"
    (623413 'move' call_tmp[623410](420530 call _cond_invalid tmp[420517]))
    if call_tmp[623410]
    {
      (420533 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557980] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557981] "maybe param" "temp"
    unknown call_tmp[623415] "expr temp" "maybe param" "maybe type" "temp"
    (623418 'move' call_tmp[623415](420518 call isTrue tmp[420517]))
    (557986 'move' tmp[557981](557984 call _cond_test call_tmp[623415]))
    if tmp[557981]
    {
      unknown tmp[557988] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623420] "expr temp" "maybe param" "maybe type" "temp"
      (623423 'move' call_tmp[623420](72917 call uint(64)[115] 64))
      unknown call_tmp[623425] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (623428 'move' call_tmp[623425](72907 'typeof' count[72499]))
      unknown call_tmp[623430] "expr temp" "maybe param" "maybe type" "temp"
      (623433 'move' call_tmp[623430](72909 call chpl__maxIntTypeSameSign call_tmp[623425]))
      unknown call_tmp[623435] "expr temp" "maybe param" "maybe type" "temp"
      (623438 'move' call_tmp[623435](72910 call _cast call_tmp[623430] count[72499]))
      unknown call_tmp[623440] "expr temp" "maybe param" "maybe type" "temp"
      (623443 'move' call_tmp[623440](72913 call abs call_tmp[623435]))
      unknown call_tmp[623445] "expr temp" "maybe param" "maybe type" "temp"
      (623448 'move' call_tmp[623445](72918 call _cast call_tmp[623420] call_tmp[623440]))
      unknown call_tmp[623450] "expr temp" "maybe param" "maybe type" "temp"
      (623453 'move' call_tmp[623450](72927 call uint(64)[115] 64))
      unknown call_tmp[623457] "expr temp" "maybe param" "maybe type" "temp"
      (623460 'move' call_tmp[623457](72921 call size _mt[243] r[72494]))
      unknown call_tmp[623462] "expr temp" "maybe param" "maybe type" "temp"
      (623465 'move' call_tmp[623462](72928 call _cast call_tmp[623450] call_tmp[623457]))
      unknown call_tmp[623467] "expr temp" "maybe param" "maybe type" "temp"
      (623470 'move' call_tmp[623467](72930 call > call_tmp[623445] call_tmp[623462]))
      (557990 'move' tmp[557988](420521 call isTrue call_tmp[623467]))
      (557995 'move' tmp[557980](557992 '_paramFoldLogical' tmp[557981] tmp[557988]))
    }
    {
      (558000 'move' tmp[557980](557997 '_paramFoldLogical' tmp[557981] 0))
    }
    unknown call_tmp[623472] "expr temp" "maybe param" "maybe type" "temp"
    (623475 'move' call_tmp[623472](72984 call _cond_test tmp[557980]))
    if call_tmp[623472]
    {
      unknown call_tmp[623477] "expr temp" "maybe param" "maybe type" "temp"
      (623480 'move' call_tmp[623477](72955 call abs count[72499]))
      unknown call_tmp[623482] "expr temp" "maybe param" "maybe type" "temp"
      (623485 'move' call_tmp[623482](72957 call _cast string[26] call_tmp[623477]))
      unknown call_tmp[623487] "expr temp" "maybe param" "maybe type" "temp"
      (623490 'move' call_tmp[623487](72959 call + "bounded range is too small to access " call_tmp[623482]))
      unknown call_tmp[623492] "expr temp" "maybe param" "maybe type" "temp"
      (623495 'move' call_tmp[623492](72978 call + call_tmp[623487] " elements"))
      (72981 call boundsCheckHalt call_tmp[623492])
    }
    function chpl__computeTypeForCountMath[72992](arg t1[72990]:_any[178](?), arg t2[72994]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[510601] "RVV" "temp" "type variable"
      unknown call_tmp[623497] "expr temp" "maybe param" "maybe type" "temp"
      (623500 'move' call_tmp[623497](72998 call == t1[72990] t2[72994]))
      unknown call_tmp[623502] "expr temp" "maybe param" "maybe type" "temp"
      (623505 'move' call_tmp[623502](73052 call _cond_test call_tmp[623497]))
      if call_tmp[623502]
      {
        unknown call_tmp[623507] "expr temp" "maybe param" "maybe type" "temp"
        (623510 'move' call_tmp[623507](73003 call chpl__idxTypeToIntIdxType t1[72990]))
        (510606 'move' ret[510601](510605 'deref' call_tmp[623507]))
        gotoReturn _end_chpl__computeTypeForCountMath[510599] _end_chpl__computeTypeForCountMath[510599]
      }
      {
        unknown tmp[420559] "maybe param" "temp"
        unknown call_tmp[623512] "expr temp" "maybe param" "maybe type" "temp"
        (623515 'move' call_tmp[623512](73010 call numBits t1[72990]))
        (420570 'move' tmp[420559](73012 call == call_tmp[623512] 64))
        unknown call_tmp[623517] "expr temp" "maybe param" "maybe type" "temp"
        (623520 'move' call_tmp[623517](420572 call _cond_invalid tmp[420559]))
        if call_tmp[623517]
        {
          (420575 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[558007] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558008] "maybe param" "temp"
        unknown call_tmp[623522] "expr temp" "maybe param" "maybe type" "temp"
        (623525 'move' call_tmp[623522](420560 call isTrue tmp[420559]))
        (558013 'move' tmp[558008](558011 call _cond_test call_tmp[623522]))
        if tmp[558008]
        {
          (558018 'move' tmp[558007](558015 '_paramFoldLogical' tmp[558008] 1))
        }
        {
          unknown tmp[558020] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623527] "expr temp" "maybe param" "maybe type" "temp"
          (623530 'move' call_tmp[623527](73017 call numBits t2[72994]))
          unknown call_tmp[623532] "expr temp" "maybe param" "maybe type" "temp"
          (623535 'move' call_tmp[623532](73019 call == call_tmp[623527] 64))
          (558022 'move' tmp[558020](420564 call isTrue call_tmp[623532]))
          (558027 'move' tmp[558007](558024 '_paramFoldLogical' tmp[558008] tmp[558020]))
        }
        unknown call_tmp[623537] "expr temp" "maybe param" "maybe type" "temp"
        (623540 'move' call_tmp[623537](73048 call _cond_test tmp[558007]))
        if call_tmp[623537]
        {
          unknown call_tmp[623542] "expr temp" "maybe param" "maybe type" "temp"
          (623545 'move' call_tmp[623542](73026 call int(64)[13] 64))
          (510611 'move' ret[510601](510610 'deref' call_tmp[623542]))
          gotoReturn _end_chpl__computeTypeForCountMath[510599] _end_chpl__computeTypeForCountMath[510599]
        }
        {
          unknown x1[73031] "dead at end of block" "insert auto destroy"
          (541221 'default init var' x1[73031] t1[72990])
          (73034 'end of statement')
          unknown x2[73037] "dead at end of block" "insert auto destroy"
          (541223 'default init var' x2[73037] t2[72994])
          (73040 'end of statement')
          { scopeless type
            unknown call_type_tmp[491955] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[623547] "expr temp" "maybe param" "maybe type" "temp"
            (623550 'move' call_tmp[623547](73043 call + x1[73031] x2[73037]))
            (491959 'move' call_type_tmp[491955](73045 'typeof' call_tmp[623547]))
          }
          (510616 'move' ret[510601](510615 'deref' call_type_tmp[491955]))
          gotoReturn _end_chpl__computeTypeForCountMath[510599] _end_chpl__computeTypeForCountMath[510599]
          (475719 'end of statement' x1[73031] x2[73037])
        }
      }
      label _end_chpl__computeTypeForCountMath[510599]
      (510603 return ret[510601])
    }
    unknown call_tmp[623552] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623555 'move' call_tmp[623552](73064 'typeof' count[72499]))
    unknown computeType[73066] "dead at end of block" "insert auto destroy" "type variable"(73065 call chpl__computeTypeForCountMath resultType[72544] call_tmp[623552])
    unknown call_tmp[623557] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623560 'move' call_tmp[623557](541228 'typeof' count[72499]))
    (541230 'move' computeType[73066](541226 call chpl__computeTypeForCountMath resultType[72544] call_tmp[623557]))
    unknown signedComputeType[73073] "dead at end of block" "insert auto destroy" "type variable"(73072 call chpl__signedType computeType[73066])
    (541235 'move' signedComputeType[73073](541233 call chpl__signedType computeType[73066]))
    unknown call_tmp[623562] "expr temp" "maybe param" "maybe type" "temp"
    (623565 'move' call_tmp[623562](73078 call _cast signedComputeType[73073] count[72499]))
    unknown call_tmp[623569] "expr temp" "maybe param" "maybe type" "temp"
    (623572 'move' call_tmp[623569](73081 call stride _mt[243] r[72494]))
    unknown call_tmp[623574] "expr temp" "maybe param" "maybe type" "temp"
    (623577 'move' call_tmp[623574](73085 call _cast signedComputeType[73073] call_tmp[623569]))
    unknown call_tmp[623579] "maybe param" "maybe type" "temp"
    (623582 'move' call_tmp[623579](73087 call * call_tmp[623562] call_tmp[623574]))
    unknown diff[73089] "dead at end of block" "insert auto destroy"
    (541237 'init var' diff[73089] call_tmp[623579])
    (73092 'end of statement')
    unknown lo[73123] "dead at end of block" "insert auto destroy"
    unknown tmp[558034] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558035] "maybe param" "temp"
    unknown call_tmp[623584] "expr temp" "maybe param" "maybe type" "temp"
    (623587 'move' call_tmp[623584](73096 call > diff[73089] 0))
    (558040 'move' tmp[558035](558038 call _cond_test call_tmp[623584]))
    if tmp[558035]
    {
      unknown tmp[558042] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558044 'move' tmp[558042](73099 call _low _mt[243] r[72494]))
      (558049 'move' tmp[558034](558046 '_paramFoldLogical' tmp[558035] tmp[558042]))
    }
    {
      unknown tmp[558051] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623593] "expr temp" "maybe param" "maybe type" "temp"
      (623596 'move' call_tmp[623593](73104 call _high _mt[243] r[72494]))
      unknown call_tmp[623598] "expr temp" "maybe param" "maybe type" "temp"
      (623601 'move' call_tmp[623598](73108 call _cast computeType[73066] call_tmp[623593]))
      unknown call_tmp[623603] "expr temp" "maybe param" "maybe type" "temp"
      (623606 'move' call_tmp[623603](73113 call + diff[73089] 1))
      unknown call_tmp[623608] "expr temp" "maybe param" "maybe type" "temp"
      (623611 'move' call_tmp[623608](73116 call _cast computeType[73066] call_tmp[623603]))
      (558053 'move' tmp[558051](73119 call chpl__add call_tmp[623598] call_tmp[623608] resultType[72544]))
      (558058 'move' tmp[558034](558055 '_paramFoldLogical' tmp[558035] tmp[558051]))
    }
    (541239 'init var' lo[73123] tmp[558034] resultType[72544])
    (73126 'end of statement')
    unknown hi[73157] "dead at end of block" "insert auto destroy"
    unknown tmp[558065] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558066] "maybe param" "temp"
    unknown call_tmp[623613] "expr temp" "maybe param" "maybe type" "temp"
    (623616 'move' call_tmp[623613](73130 call < diff[73089] 0))
    (558071 'move' tmp[558066](558069 call _cond_test call_tmp[623613]))
    if tmp[558066]
    {
      unknown tmp[558073] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558075 'move' tmp[558073](73133 call _high _mt[243] r[72494]))
      (558080 'move' tmp[558065](558077 '_paramFoldLogical' tmp[558066] tmp[558073]))
    }
    {
      unknown tmp[558082] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623622] "expr temp" "maybe param" "maybe type" "temp"
      (623625 'move' call_tmp[623622](73138 call _low _mt[243] r[72494]))
      unknown call_tmp[623627] "expr temp" "maybe param" "maybe type" "temp"
      (623630 'move' call_tmp[623627](73142 call _cast computeType[73066] call_tmp[623622]))
      unknown call_tmp[623632] "expr temp" "maybe param" "maybe type" "temp"
      (623635 'move' call_tmp[623632](73147 call _cast computeType[73066] diff[73089]))
      unknown call_tmp[623637] "expr temp" "maybe param" "maybe type" "temp"
      (623640 'move' call_tmp[623637](73150 call - call_tmp[623632] 1))
      (558084 'move' tmp[558082](73153 call chpl__add call_tmp[623627] call_tmp[623637] resultType[72544]))
      (558089 'move' tmp[558065](558086 '_paramFoldLogical' tmp[558066] tmp[558082]))
    }
    (541241 'init var' hi[73157] tmp[558065] resultType[72544])
    (73160 'end of statement' resultType[72544] resultType[72544] computeType[73066] signedComputeType[73073] signedComputeType[73073] diff[73089] computeType[73066] computeType[73066] diff[73089] resultType[72544] resultType[72544] diff[73089] computeType[73066] computeType[73066] diff[73089] resultType[72544] resultType[72544])
    unknown call_tmp[623644] "expr temp" "maybe param" "maybe type" "temp"
    (623647 'move' call_tmp[623644](73162 call stridable _mt[243] r[72494]))
    unknown call_tmp[623649] "expr temp" "maybe param" "maybe type" "temp"
    (623652 'move' call_tmp[623649](73222 call _cond_test call_tmp[623644]))
    if call_tmp[623649]
    {
      unknown tmp[420580] "maybe param" "temp"
      (420591 'move' tmp[420580](73170 call(73166 call (partial) hasLowBound _mt[243] r[72494])))
      unknown call_tmp[623656] "expr temp" "maybe param" "maybe type" "temp"
      (623659 'move' call_tmp[623656](420593 call _cond_invalid tmp[420580]))
      if call_tmp[623656]
      {
        (420596 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558096] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558097] "maybe param" "temp"
      unknown call_tmp[623661] "expr temp" "maybe param" "maybe type" "temp"
      (623664 'move' call_tmp[623661](420581 call isTrue tmp[420580]))
      (558102 'move' tmp[558097](558100 call _cond_test call_tmp[623661]))
      if tmp[558097]
      {
        unknown tmp[558104] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623668] "expr temp" "maybe param" "maybe type" "temp"
        (623671 'move' call_tmp[623668](73173 call _low _mt[243] r[72494]))
        unknown call_tmp[623673] "expr temp" "maybe param" "maybe type" "temp"
        (623676 'move' call_tmp[623673](73176 call < lo[73123] call_tmp[623668]))
        (558106 'move' tmp[558104](420584 call isTrue call_tmp[623673]))
        (558111 'move' tmp[558096](558108 '_paramFoldLogical' tmp[558097] tmp[558104]))
      }
      {
        (558116 'move' tmp[558096](558113 '_paramFoldLogical' tmp[558097] 0))
      }
      unknown call_tmp[623678] "expr temp" "maybe param" "maybe type" "temp"
      (623681 'move' call_tmp[623678](73188 call _cond_test tmp[558096]))
      if call_tmp[623678]
      {
        unknown call_tmp[623685] "expr temp" "maybe param" "maybe type" "temp"
        (623688 'move' call_tmp[623685](73182 call _low _mt[243] r[72494]))
        (73185 call = lo[73123] call_tmp[623685])
        (475739 'end of statement' lo[73123])
      }
      unknown tmp[420601] "maybe param" "temp"
      (420612 'move' tmp[420601](73199 call(73195 call (partial) hasHighBound _mt[243] r[72494])))
      unknown call_tmp[623692] "expr temp" "maybe param" "maybe type" "temp"
      (623695 'move' call_tmp[623692](420614 call _cond_invalid tmp[420601]))
      if call_tmp[623692]
      {
        (420617 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558123] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558124] "maybe param" "temp"
      unknown call_tmp[623697] "expr temp" "maybe param" "maybe type" "temp"
      (623700 'move' call_tmp[623697](420602 call isTrue tmp[420601]))
      (558129 'move' tmp[558124](558127 call _cond_test call_tmp[623697]))
      if tmp[558124]
      {
        unknown tmp[558131] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623704] "expr temp" "maybe param" "maybe type" "temp"
        (623707 'move' call_tmp[623704](73202 call _high _mt[243] r[72494]))
        unknown call_tmp[623709] "expr temp" "maybe param" "maybe type" "temp"
        (623712 'move' call_tmp[623709](73205 call > hi[73157] call_tmp[623704]))
        (558133 'move' tmp[558131](420605 call isTrue call_tmp[623709]))
        (558138 'move' tmp[558123](558135 '_paramFoldLogical' tmp[558124] tmp[558131]))
      }
      {
        (558143 'move' tmp[558123](558140 '_paramFoldLogical' tmp[558124] 0))
      }
      unknown call_tmp[623714] "expr temp" "maybe param" "maybe type" "temp"
      (623717 'move' call_tmp[623714](73217 call _cond_test tmp[558123]))
      if call_tmp[623714]
      {
        unknown call_tmp[623721] "expr temp" "maybe param" "maybe type" "temp"
        (623724 'move' call_tmp[623721](73211 call _high _mt[243] r[72494]))
        (73214 call = hi[73157] call_tmp[623721])
        (475742 'end of statement' hi[73157])
      }
    }
    unknown tmp[558150] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558151] "maybe param" "temp"
    unknown call_tmp[623728] "expr temp" "maybe param" "maybe type" "temp"
    (623731 'move' call_tmp[623728](73261 call stridable _mt[243] r[72494]))
    (558156 'move' tmp[558151](558154 call _cond_test call_tmp[623728]))
    if tmp[558151]
    {
      unknown tmp[558158] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623735] "expr temp" "maybe param" "maybe type" "temp"
      (623738 'move' call_tmp[623735](73265 call stride _mt[243] r[72494]))
      (558160 'move' tmp[558158](73269 call _cast strType[72551] call_tmp[623735]))
      (558165 'move' tmp[558150](558162 '_paramFoldLogical' tmp[558151] tmp[558158]))
    }
    {
      (558170 'move' tmp[558150](558167 '_paramFoldLogical' tmp[558151] none[57]))
    }
    unknown tmp[558177] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558178] "maybe param" "temp"
    unknown call_tmp[623742] "expr temp" "maybe param" "maybe type" "temp"
    (623745 'move' call_tmp[623742](73277 call stridable _mt[243] r[72494]))
    (558183 'move' tmp[558178](558181 call _cond_test call_tmp[623742]))
    if tmp[558178]
    {
      unknown tmp[558185] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558187 'move' tmp[558185](73281 call alignment _mt[243] r[72494]))
      (558192 'move' tmp[558177](558189 '_paramFoldLogical' tmp[558178] tmp[558185]))
    }
    {
      (558197 'move' tmp[558177](558194 '_paramFoldLogical' tmp[558178] none[57]))
    }
    unknown tmp[558204] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558205] "maybe param" "temp"
    unknown call_tmp[623751] "expr temp" "maybe param" "maybe type" "temp"
    (623754 'move' call_tmp[623751](73290 call stridable _mt[243] r[72494]))
    (558210 'move' tmp[558205](558208 call _cond_test call_tmp[623751]))
    if tmp[558205]
    {
      unknown tmp[558212] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558214 'move' tmp[558212](73294 call aligned _mt[243] r[72494]))
      (558219 'move' tmp[558204](558216 '_paramFoldLogical' tmp[558205] tmp[558212]))
    }
    {
      (558224 'move' tmp[558204](558221 '_paramFoldLogical' tmp[558205] none[57]))
    }
    unknown call_tmp[623760] "expr temp" "maybe param" "maybe type" "temp"
    (623763 'move' call_tmp[623760](73229 call idxType _mt[243] r[72494]))
    unknown call_tmp[623767] "expr temp" "maybe param" "maybe type" "temp"
    (623770 'move' call_tmp[623767](73240 call stridable _mt[243] r[72494]))
    unknown call_tmp[623774] "expr temp" "maybe param" "maybe type" "temp"
    (623777 'move' call_tmp[623774](73250 call(73245 call (partial) chpl_intToIdx _mt[243] r[72494]) lo[73123]))
    unknown call_tmp[623781] "expr temp" "maybe param" "maybe type" "temp"
    (623784 'move' call_tmp[623781](73258 call(73253 call (partial) chpl_intToIdx _mt[243] r[72494]) hi[73157]))
    unknown call_tmp[623786] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (623789 'move' call_tmp[623786](747853 'new' range[64319](?)(idxType = call_tmp[623760])(boundedType = bounded[64208])(stridable = call_tmp[623767])(_low = call_tmp[623774])(_high = call_tmp[623781])(_stride = tmp[558150])(_alignment = tmp[558177])(_aligned = tmp[558204])))
    (510637 'move' ret[510622](510636 'deref' call_tmp[623786]))
    gotoReturn _end_chpl_count_help[510620] _end_chpl_count_help[510620]
    (475744 'end of statement' lo[73123] hi[73157] strType[72551])
    label _end_chpl_count_help[510620]
    (510624 return ret[510622])
  }
  function #[73317](arg r[73314]:range[64319](?), arg count[73323] :
  unknown call_tmp[623791] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510643] "RVV" "temp"
    unknown call_tmp[623796] "expr temp" "maybe param" "maybe type" "temp"
    (623799 'move' call_tmp[623796](73330 call chpl_count_help r[73314] count[73323]))
    (510648 'move' ret[510643](510647 'deref' call_tmp[623796]))
    (510645 return ret[510643])
  }
  function #[73346](arg r[73343]:range[64319](?), arg count[73352] :
  unknown call_tmp[623801] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510652] "RVV" "temp"
    unknown call_tmp[623806] "expr temp" "maybe param" "maybe type" "temp"
    (623809 'move' call_tmp[623806](73359 call chpl_count_help r[73343] count[73352]))
    (510657 'move' ret[510652](510656 'deref' call_tmp[623806]))
    (510654 return ret[510652])
  }
  function #[73375](arg r[73372]:range[64319](?), arg count[73377]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510661] "RVV" "temp"
    unknown call_tmp[623811] "expr temp" "maybe param" "maybe type" "temp"
    (623814 'move' call_tmp[623811](456027 'query' r[73372] 1))
    unknown call_tmp[623816] "expr temp" "maybe param" "maybe type" "temp"
    (623819 'move' call_tmp[623816](73400 call _cast string[26] call_tmp[623811]))
    unknown call_tmp[623821] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623824 'move' call_tmp[623821](73420 'typeof' count[73377]))
    unknown call_tmp[623826] "expr temp" "maybe param" "maybe type" "temp"
    (623829 'move' call_tmp[623826](73422 call _cast string[26] call_tmp[623821]))
    (73424 call compilerError "can't apply '#' to a range with idxType " call_tmp[623816] " using a count of type " call_tmp[623826])
    (475750 'end of statement')
    (510666 'move' ret[510661](510665 'deref' r[73372]))
    (510663 return ret[510661])
  }
  function chpl_checkIfRangeIterWillOverflow[73436](arg idxType[73434]:_any[178](?), arg low[73438]:_any[178](?), arg high[73440]:_any[178](?), arg stride[73442]:_any[178](?), arg first[73445] :
  low[73438] =
  low[73438], arg last[73449] :
  high[73440] =
  high[73440], arg shouldHalt[73453] :
  1 =
  1) : _unknown[51]
  {
    unknown ret[510670] "RVV" "temp"
    unknown call_tmp[623831] "expr temp" "maybe param" "maybe type" "temp"
    (623834 'move' call_tmp[623831](73458 call > low[73438] high[73440]))
    unknown call_tmp[623836] "expr temp" "maybe param" "maybe type" "temp"
    (623839 'move' call_tmp[623836](73464 call _cond_test call_tmp[623831]))
    if call_tmp[623836]
    {
      (510675 'move' ret[510670](510674 'deref' 0))
      gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510668] _end_chpl_checkIfRangeIterWillOverflow[510668]
    }
    unknown willOverFlow[73470] "dead at end of block" "insert auto destroy"
    (541243 'init var' willOverFlow[73470] 0)
    (73473 'end of statement')
    unknown call_tmp[623841] "expr temp" "maybe param" "maybe type" "temp"
    (623844 'move' call_tmp[623841](73477 call isIntType idxType[73434]))
    unknown call_tmp[623846] "expr temp" "maybe param" "maybe type" "temp"
    (623849 'move' call_tmp[623846](73657 call _cond_test call_tmp[623841]))
    if call_tmp[623846]
    {
      unknown tmp[420643] "maybe param" "temp"
      (420654 'move' tmp[420643](73480 call > last[73449] 0))
      unknown call_tmp[623851] "expr temp" "maybe param" "maybe type" "temp"
      (623854 'move' call_tmp[623851](420656 call _cond_invalid tmp[420643]))
      if call_tmp[623851]
      {
        (420659 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558231] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558232] "maybe param" "temp"
      unknown call_tmp[623856] "expr temp" "maybe param" "maybe type" "temp"
      (623859 'move' call_tmp[623856](420644 call isTrue tmp[420643]))
      (558237 'move' tmp[558232](558235 call _cond_test call_tmp[623856]))
      if tmp[558232]
      {
        unknown tmp[558239] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623861] "expr temp" "maybe param" "maybe type" "temp"
        (623864 'move' call_tmp[623861](73484 call > stride[73442] 0))
        (558241 'move' tmp[558239](420647 call isTrue call_tmp[623861]))
        (558246 'move' tmp[558231](558243 '_paramFoldLogical' tmp[558232] tmp[558239]))
      }
      {
        (558251 'move' tmp[558231](558248 '_paramFoldLogical' tmp[558232] 0))
      }
      unknown call_tmp[623866] "expr temp" "maybe param" "maybe type" "temp"
      (623869 'move' call_tmp[623866](73544 call _cond_test tmp[558231]))
      if call_tmp[623866]
      {
        unknown call_tmp[623871] "expr temp" "maybe param" "maybe type" "temp"
        (623874 'move' call_tmp[623871](73492 call max idxType[73434]))
        unknown call_tmp[623876] "expr temp" "maybe param" "maybe type" "temp"
        (623879 'move' call_tmp[623876](73494 call - call_tmp[623871] last[73449]))
        unknown call_tmp[623881] "expr temp" "maybe param" "maybe type" "temp"
        (623884 'move' call_tmp[623881](73496 call > stride[73442] call_tmp[623876]))
        unknown call_tmp[623886] "expr temp" "maybe param" "maybe type" "temp"
        (623889 'move' call_tmp[623886](73504 call _cond_test call_tmp[623881]))
        if call_tmp[623886]
        {
          (73500 call = willOverFlow[73470] 1)
          (475754 'end of statement' willOverFlow[73470])
        }
      }
      {
        unknown tmp[420622] "maybe param" "temp"
        (420633 'move' tmp[420622](73511 call < last[73449] 0))
        unknown call_tmp[623891] "expr temp" "maybe param" "maybe type" "temp"
        (623894 'move' call_tmp[623891](420635 call _cond_invalid tmp[420622]))
        if call_tmp[623891]
        {
          (420638 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[558258] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558259] "maybe param" "temp"
        unknown call_tmp[623896] "expr temp" "maybe param" "maybe type" "temp"
        (623899 'move' call_tmp[623896](420623 call isTrue tmp[420622]))
        (558264 'move' tmp[558259](558262 call _cond_test call_tmp[623896]))
        if tmp[558259]
        {
          unknown tmp[558266] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623901] "expr temp" "maybe param" "maybe type" "temp"
          (623904 'move' call_tmp[623901](73515 call < stride[73442] 0))
          (558268 'move' tmp[558266](420626 call isTrue call_tmp[623901]))
          (558273 'move' tmp[558258](558270 '_paramFoldLogical' tmp[558259] tmp[558266]))
        }
        {
          (558278 'move' tmp[558258](558275 '_paramFoldLogical' tmp[558259] 0))
        }
        unknown call_tmp[623906] "expr temp" "maybe param" "maybe type" "temp"
        (623909 'move' call_tmp[623906](73540 call _cond_test tmp[558258]))
        if call_tmp[623906]
        {
          unknown call_tmp[623911] "expr temp" "maybe param" "maybe type" "temp"
          (623914 'move' call_tmp[623911](73523 call min idxType[73434]))
          unknown call_tmp[623916] "expr temp" "maybe param" "maybe type" "temp"
          (623919 'move' call_tmp[623916](73525 call - call_tmp[623911] last[73449]))
          unknown call_tmp[623921] "expr temp" "maybe param" "maybe type" "temp"
          (623924 'move' call_tmp[623921](73527 call < stride[73442] call_tmp[623916]))
          unknown call_tmp[623926] "expr temp" "maybe param" "maybe type" "temp"
          (623929 'move' call_tmp[623926](73535 call _cond_test call_tmp[623921]))
          if call_tmp[623926]
          {
            (73531 call = willOverFlow[73470] 1)
            (475757 'end of statement' willOverFlow[73470])
          }
        }
      }
    }
    {
      unknown call_tmp[623931] "expr temp" "maybe param" "maybe type" "temp"
      (623934 'move' call_tmp[623931](73553 call isUintType idxType[73434]))
      unknown call_tmp[623936] "expr temp" "maybe param" "maybe type" "temp"
      (623939 'move' call_tmp[623936](73653 call _cond_test call_tmp[623931]))
      if call_tmp[623936]
      {
        unknown call_tmp[623941] "expr temp" "maybe param" "maybe type" "temp"
        (623944 'move' call_tmp[623941](73556 call > stride[73442] 0))
        unknown call_tmp[623946] "expr temp" "maybe param" "maybe type" "temp"
        (623949 'move' call_tmp[623946](73608 call _cond_test call_tmp[623941]))
        if call_tmp[623946]
        {
          unknown call_tmp[623951] "expr temp" "maybe param" "maybe type" "temp"
          (623954 'move' call_tmp[623951](73561 call _cast idxType[73434] stride[73442]))
          unknown call_tmp[623956] "expr temp" "maybe param" "maybe type" "temp"
          (623959 'move' call_tmp[623956](73563 call + last[73449] call_tmp[623951]))
          unknown call_tmp[623961] "expr temp" "maybe param" "maybe type" "temp"
          (623964 'move' call_tmp[623961](73566 call < call_tmp[623956] last[73449]))
          unknown call_tmp[623966] "expr temp" "maybe param" "maybe type" "temp"
          (623969 'move' call_tmp[623966](73574 call _cond_test call_tmp[623961]))
          if call_tmp[623966]
          {
            (73570 call = willOverFlow[73470] 1)
            (475759 'end of statement' willOverFlow[73470])
          }
        }
        {
          unknown call_tmp[623971] "expr temp" "maybe param" "maybe type" "temp"
          (623974 'move' call_tmp[623971](73581 call < stride[73442] 0))
          unknown call_tmp[623976] "expr temp" "maybe param" "maybe type" "temp"
          (623979 'move' call_tmp[623976](73604 call _cond_test call_tmp[623971]))
          if call_tmp[623976]
          {
            unknown call_tmp[623981] "expr temp" "maybe param" "maybe type" "temp"
            (623984 'move' call_tmp[623981](73586 call _cast idxType[73434] stride[73442]))
            unknown call_tmp[623986] "expr temp" "maybe param" "maybe type" "temp"
            (623989 'move' call_tmp[623986](73588 call + last[73449] call_tmp[623981]))
            unknown call_tmp[623991] "expr temp" "maybe param" "maybe type" "temp"
            (623994 'move' call_tmp[623991](73591 call > call_tmp[623986] last[73449]))
            unknown call_tmp[623996] "expr temp" "maybe param" "maybe type" "temp"
            (623999 'move' call_tmp[623996](73599 call _cond_test call_tmp[623991]))
            if call_tmp[623996]
            {
              (73595 call = willOverFlow[73470] 1)
              (475761 'end of statement' willOverFlow[73470])
            }
          }
        }
      }
      {
        (73650 call compilerError "Iterator overflow checking is only supported " "for integral types")
      }
    }
    unknown tmp[420664] "maybe param" "temp"
    (420675 'move' tmp[420664] willOverFlow[73470])
    unknown call_tmp[624001] "expr temp" "maybe param" "maybe type" "temp"
    (624004 'move' call_tmp[624001](420677 call _cond_invalid tmp[420664]))
    if call_tmp[624001]
    {
      (420680 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558285] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558286] "maybe param" "temp"
    unknown call_tmp[624006] "expr temp" "maybe param" "maybe type" "temp"
    (624009 'move' call_tmp[624006](420665 call isTrue tmp[420664]))
    (558291 'move' tmp[558286](558289 call _cond_test call_tmp[624006]))
    if tmp[558286]
    {
      unknown tmp[558293] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558295 'move' tmp[558293](420668 call isTrue shouldHalt[73453]))
      (558300 'move' tmp[558285](558297 '_paramFoldLogical' tmp[558286] tmp[558293]))
    }
    {
      (558305 'move' tmp[558285](558302 '_paramFoldLogical' tmp[558286] 0))
    }
    unknown call_tmp[624011] "expr temp" "maybe param" "maybe type" "temp"
    (624014 'move' call_tmp[624011](73691 call _cond_test tmp[558285]))
    if call_tmp[624011]
    {
      (73688 call boundsCheckHalt module=[255] HaltWrappers[210018] "Iteration over a bounded range may be incorrect due to overflow.")
      (357986 'referenced modules list' HaltWrappers[210018])
    }
    (510680 'move' ret[510670](510679 'deref' willOverFlow[73470]))
    gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510668] _end_chpl_checkIfRangeIterWillOverflow[510668]
    (475766 'end of statement' willOverFlow[73470])
    label _end_chpl_checkIfRangeIterWillOverflow[510668]
    (510672 return ret[510670])
  }
  function range[64319](?).checkIfIterWillOverflow[73707](arg _mt[73712]:_MT[238], arg this[73709]:range[64319](?) :
  range[64319](?), arg shouldHalt[73704] :
  1 =
  1) : _unknown[51] "method" "no doc"
  {
    unknown ret[510686] "RVV" "temp"
    unknown call_tmp[624018] "expr temp" "maybe param" "maybe type" "temp"
    (624021 'move' call_tmp[624018](73716 call intIdxType _mt[243] this[73709]))
    unknown call_tmp[624025] "expr temp" "maybe param" "maybe type" "temp"
    (624028 'move' call_tmp[624025](73721 call _low _mt[243] this[73709]))
    unknown call_tmp[624032] "expr temp" "maybe param" "maybe type" "temp"
    (624035 'move' call_tmp[624032](73725 call _high _mt[243] this[73709]))
    unknown call_tmp[624039] "expr temp" "maybe param" "maybe type" "temp"
    (624042 'move' call_tmp[624039](73729 call stride _mt[243] this[73709]))
    unknown call_tmp[624046] "expr temp" "maybe param" "maybe type" "temp"
    (624049 'move' call_tmp[624046](73733 call firstAsInt _mt[243] this[73709]))
    unknown call_tmp[624053] "expr temp" "maybe param" "maybe type" "temp"
    (624056 'move' call_tmp[624053](73737 call lastAsInt _mt[243] this[73709]))
    unknown call_tmp[624058] "expr temp" "maybe param" "maybe type" "temp"
    (624061 'move' call_tmp[624058](73741 call chpl_checkIfRangeIterWillOverflow call_tmp[624018] call_tmp[624025] call_tmp[624032] call_tmp[624039] call_tmp[624046] call_tmp[624053] shouldHalt[73704]))
    (510691 'move' ret[510686](510690 'deref' call_tmp[624058]))
    (510688 return ret[510686])
  }
  function chpl_direct_range_iter[456238](arg low[456245] :
  (456242 call int(64)[13] 64), arg high[456251] :
  (456249 call int(64)[13] 64), arg stride[456257] :
  (456255 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510695] "RVV" "temp"
    unknown call_tmp[624063] "expr temp" "maybe param" "maybe type" "temp"
    (624066 'move' call_tmp[624063](456264 call chpl_build_bounded_range low[456245] high[456251]))
    unknown call_tmp[624068] "maybe param" "maybe type" "temp"
    (624071 'move' call_tmp[624068](456262 call chpl_by call_tmp[624063] stride[456257]))
    const r[456260] "dead at end of block" "const" "insert auto destroy"
    (541245 'init var' r[456260] call_tmp[624068])
    (456269 'end of statement')
    {
      unknown _indexOfInterest[456271] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456273] "expr temp" "temp"
      (456275 'move' _iterator[456273](456278 call _getIterator r[456260]))
      Defer
      {
        {
          (456282 call _freeIterator _iterator[456273])
        }
      }
      { scopeless type
        (456286 'move' _indexOfInterest[456271](456289 call iteratorIndex _iterator[456273]))
      }
      ForLoop[456291]
      {
        unknown i[456294] "index var" "insert auto destroy"
        (475770 'end of statement')
        (456296 'move' i[456294] _indexOfInterest[456271])
        (475771 'end of statement' i[456294])
        unknown yret[510699] "YVV" "temp"
        (510702 'move' yret[510699](510701 'deref' i[456294]))
        (510704 yield yret[510699])
        (475773 'end of statement' i[456294])
        label _continueLabel[456301]
        _indexOfInterest[456271]
        _iterator[456273]
      }
      label _breakLabel[456303]
    }
    (510697 return ret[510695])
  }
  function chpl_direct_range_iter[456169](arg low[456176] :
  (456173 call int(64)[13] 32), arg high[456182] :
  (456180 call int(64)[13] 32), arg stride[456188] :
  (456186 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510708] "RVV" "temp"
    unknown call_tmp[624073] "expr temp" "maybe param" "maybe type" "temp"
    (624076 'move' call_tmp[624073](456195 call chpl_build_bounded_range low[456176] high[456182]))
    unknown call_tmp[624078] "maybe param" "maybe type" "temp"
    (624081 'move' call_tmp[624078](456193 call chpl_by call_tmp[624073] stride[456188]))
    const r[456191] "dead at end of block" "const" "insert auto destroy"
    (541247 'init var' r[456191] call_tmp[624078])
    (456200 'end of statement')
    {
      unknown _indexOfInterest[456202] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456204] "expr temp" "temp"
      (456206 'move' _iterator[456204](456209 call _getIterator r[456191]))
      Defer
      {
        {
          (456213 call _freeIterator _iterator[456204])
        }
      }
      { scopeless type
        (456217 'move' _indexOfInterest[456202](456220 call iteratorIndex _iterator[456204]))
      }
      ForLoop[456222]
      {
        unknown i[456225] "index var" "insert auto destroy"
        (475776 'end of statement')
        (456227 'move' i[456225] _indexOfInterest[456202])
        (475777 'end of statement' i[456225])
        unknown yret[510712] "YVV" "temp"
        (510715 'move' yret[510712](510714 'deref' i[456225]))
        (510717 yield yret[510712])
        (475779 'end of statement' i[456225])
        label _continueLabel[456232]
        _indexOfInterest[456202]
        _iterator[456204]
      }
      label _breakLabel[456234]
    }
    (510710 return ret[510708])
  }
  function chpl_direct_range_iter[456100](arg low[456107] :
  (456104 call int(64)[13] 16), arg high[456113] :
  (456111 call int(64)[13] 16), arg stride[456119] :
  (456117 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510721] "RVV" "temp"
    unknown call_tmp[624083] "expr temp" "maybe param" "maybe type" "temp"
    (624086 'move' call_tmp[624083](456126 call chpl_build_bounded_range low[456107] high[456113]))
    unknown call_tmp[624088] "maybe param" "maybe type" "temp"
    (624091 'move' call_tmp[624088](456124 call chpl_by call_tmp[624083] stride[456119]))
    const r[456122] "dead at end of block" "const" "insert auto destroy"
    (541249 'init var' r[456122] call_tmp[624088])
    (456131 'end of statement')
    {
      unknown _indexOfInterest[456133] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456135] "expr temp" "temp"
      (456137 'move' _iterator[456135](456140 call _getIterator r[456122]))
      Defer
      {
        {
          (456144 call _freeIterator _iterator[456135])
        }
      }
      { scopeless type
        (456148 'move' _indexOfInterest[456133](456151 call iteratorIndex _iterator[456135]))
      }
      ForLoop[456153]
      {
        unknown i[456156] "index var" "insert auto destroy"
        (475782 'end of statement')
        (456158 'move' i[456156] _indexOfInterest[456133])
        (475783 'end of statement' i[456156])
        unknown yret[510725] "YVV" "temp"
        (510728 'move' yret[510725](510727 'deref' i[456156]))
        (510730 yield yret[510725])
        (475785 'end of statement' i[456156])
        label _continueLabel[456163]
        _indexOfInterest[456133]
        _iterator[456135]
      }
      label _breakLabel[456165]
    }
    (510723 return ret[510721])
  }
  function chpl_direct_range_iter[456031](arg low[456038] :
  (456035 call int(64)[13] 8), arg high[456044] :
  (456042 call int(64)[13] 8), arg stride[456050] :
  (456048 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510734] "RVV" "temp"
    unknown call_tmp[624093] "expr temp" "maybe param" "maybe type" "temp"
    (624096 'move' call_tmp[624093](456057 call chpl_build_bounded_range low[456038] high[456044]))
    unknown call_tmp[624098] "maybe param" "maybe type" "temp"
    (624101 'move' call_tmp[624098](456055 call chpl_by call_tmp[624093] stride[456050]))
    const r[456053] "dead at end of block" "const" "insert auto destroy"
    (541251 'init var' r[456053] call_tmp[624098])
    (456062 'end of statement')
    {
      unknown _indexOfInterest[456064] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456066] "expr temp" "temp"
      (456068 'move' _iterator[456066](456071 call _getIterator r[456053]))
      Defer
      {
        {
          (456075 call _freeIterator _iterator[456066])
        }
      }
      { scopeless type
        (456079 'move' _indexOfInterest[456064](456082 call iteratorIndex _iterator[456066]))
      }
      ForLoop[456084]
      {
        unknown i[456087] "index var" "insert auto destroy"
        (475788 'end of statement')
        (456089 'move' i[456087] _indexOfInterest[456064])
        (475789 'end of statement' i[456087])
        unknown yret[510738] "YVV" "temp"
        (510741 'move' yret[510738](510740 'deref' i[456087]))
        (510743 yield yret[510738])
        (475791 'end of statement' i[456087])
        label _continueLabel[456094]
        _indexOfInterest[456064]
        _iterator[456066]
      }
      label _breakLabel[456096]
    }
    (510736 return ret[510734])
  }
  function chpl_direct_range_iter[456514](arg low[456521] :
  (456518 call uint(64)[115] 64), arg high[456527] :
  (456525 call uint(64)[115] 64), arg stride[456533] :
  (456531 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510747] "RVV" "temp"
    unknown call_tmp[624103] "expr temp" "maybe param" "maybe type" "temp"
    (624106 'move' call_tmp[624103](456540 call chpl_build_bounded_range low[456521] high[456527]))
    unknown call_tmp[624108] "maybe param" "maybe type" "temp"
    (624111 'move' call_tmp[624108](456538 call chpl_by call_tmp[624103] stride[456533]))
    const r[456536] "dead at end of block" "const" "insert auto destroy"
    (541253 'init var' r[456536] call_tmp[624108])
    (456545 'end of statement')
    {
      unknown _indexOfInterest[456547] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456549] "expr temp" "temp"
      (456551 'move' _iterator[456549](456554 call _getIterator r[456536]))
      Defer
      {
        {
          (456558 call _freeIterator _iterator[456549])
        }
      }
      { scopeless type
        (456562 'move' _indexOfInterest[456547](456565 call iteratorIndex _iterator[456549]))
      }
      ForLoop[456567]
      {
        unknown i[456570] "index var" "insert auto destroy"
        (475794 'end of statement')
        (456572 'move' i[456570] _indexOfInterest[456547])
        (475795 'end of statement' i[456570])
        unknown yret[510751] "YVV" "temp"
        (510754 'move' yret[510751](510753 'deref' i[456570]))
        (510756 yield yret[510751])
        (475797 'end of statement' i[456570])
        label _continueLabel[456577]
        _indexOfInterest[456547]
        _iterator[456549]
      }
      label _breakLabel[456579]
    }
    (510749 return ret[510747])
  }
  function chpl_direct_range_iter[456445](arg low[456452] :
  (456449 call uint(64)[115] 32), arg high[456458] :
  (456456 call uint(64)[115] 32), arg stride[456464] :
  (456462 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510760] "RVV" "temp"
    unknown call_tmp[624113] "expr temp" "maybe param" "maybe type" "temp"
    (624116 'move' call_tmp[624113](456471 call chpl_build_bounded_range low[456452] high[456458]))
    unknown call_tmp[624118] "maybe param" "maybe type" "temp"
    (624121 'move' call_tmp[624118](456469 call chpl_by call_tmp[624113] stride[456464]))
    const r[456467] "dead at end of block" "const" "insert auto destroy"
    (541255 'init var' r[456467] call_tmp[624118])
    (456476 'end of statement')
    {
      unknown _indexOfInterest[456478] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456480] "expr temp" "temp"
      (456482 'move' _iterator[456480](456485 call _getIterator r[456467]))
      Defer
      {
        {
          (456489 call _freeIterator _iterator[456480])
        }
      }
      { scopeless type
        (456493 'move' _indexOfInterest[456478](456496 call iteratorIndex _iterator[456480]))
      }
      ForLoop[456498]
      {
        unknown i[456501] "index var" "insert auto destroy"
        (475800 'end of statement')
        (456503 'move' i[456501] _indexOfInterest[456478])
        (475801 'end of statement' i[456501])
        unknown yret[510764] "YVV" "temp"
        (510767 'move' yret[510764](510766 'deref' i[456501]))
        (510769 yield yret[510764])
        (475803 'end of statement' i[456501])
        label _continueLabel[456508]
        _indexOfInterest[456478]
        _iterator[456480]
      }
      label _breakLabel[456510]
    }
    (510762 return ret[510760])
  }
  function chpl_direct_range_iter[456376](arg low[456383] :
  (456380 call uint(64)[115] 16), arg high[456389] :
  (456387 call uint(64)[115] 16), arg stride[456395] :
  (456393 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510773] "RVV" "temp"
    unknown call_tmp[624123] "expr temp" "maybe param" "maybe type" "temp"
    (624126 'move' call_tmp[624123](456402 call chpl_build_bounded_range low[456383] high[456389]))
    unknown call_tmp[624128] "maybe param" "maybe type" "temp"
    (624131 'move' call_tmp[624128](456400 call chpl_by call_tmp[624123] stride[456395]))
    const r[456398] "dead at end of block" "const" "insert auto destroy"
    (541257 'init var' r[456398] call_tmp[624128])
    (456407 'end of statement')
    {
      unknown _indexOfInterest[456409] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456411] "expr temp" "temp"
      (456413 'move' _iterator[456411](456416 call _getIterator r[456398]))
      Defer
      {
        {
          (456420 call _freeIterator _iterator[456411])
        }
      }
      { scopeless type
        (456424 'move' _indexOfInterest[456409](456427 call iteratorIndex _iterator[456411]))
      }
      ForLoop[456429]
      {
        unknown i[456432] "index var" "insert auto destroy"
        (475806 'end of statement')
        (456434 'move' i[456432] _indexOfInterest[456409])
        (475807 'end of statement' i[456432])
        unknown yret[510777] "YVV" "temp"
        (510780 'move' yret[510777](510779 'deref' i[456432]))
        (510782 yield yret[510777])
        (475809 'end of statement' i[456432])
        label _continueLabel[456439]
        _indexOfInterest[456409]
        _iterator[456411]
      }
      label _breakLabel[456441]
    }
    (510775 return ret[510773])
  }
  function chpl_direct_range_iter[456307](arg low[456314] :
  (456311 call uint(64)[115] 8), arg high[456320] :
  (456318 call uint(64)[115] 8), arg stride[456326] :
  (456324 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510786] "RVV" "temp"
    unknown call_tmp[624133] "expr temp" "maybe param" "maybe type" "temp"
    (624136 'move' call_tmp[624133](456333 call chpl_build_bounded_range low[456314] high[456320]))
    unknown call_tmp[624138] "maybe param" "maybe type" "temp"
    (624141 'move' call_tmp[624138](456331 call chpl_by call_tmp[624133] stride[456326]))
    const r[456329] "dead at end of block" "const" "insert auto destroy"
    (541259 'init var' r[456329] call_tmp[624138])
    (456338 'end of statement')
    {
      unknown _indexOfInterest[456340] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456342] "expr temp" "temp"
      (456344 'move' _iterator[456342](456347 call _getIterator r[456329]))
      Defer
      {
        {
          (456351 call _freeIterator _iterator[456342])
        }
      }
      { scopeless type
        (456355 'move' _indexOfInterest[456340](456358 call iteratorIndex _iterator[456342]))
      }
      ForLoop[456360]
      {
        unknown i[456363] "index var" "insert auto destroy"
        (475812 'end of statement')
        (456365 'move' i[456363] _indexOfInterest[456340])
        (475813 'end of statement' i[456363])
        unknown yret[510790] "YVV" "temp"
        (510793 'move' yret[510790](510792 'deref' i[456363]))
        (510795 yield yret[510790])
        (475815 'end of statement' i[456363])
        label _continueLabel[456370]
        _indexOfInterest[456340]
        _iterator[456342]
      }
      label _breakLabel[456372]
    }
    (510788 return ret[510786])
  }
  function chpl_direct_range_iter[73909](arg low[73906]:enum[187](?), arg high[73912]:enum[187](?), arg stride[73916]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510799] "RVV" "temp"
    unknown call_tmp[624143] "expr temp" "maybe param" "maybe type" "temp"
    (624146 'move' call_tmp[624143](73921 call chpl_build_bounded_range low[73906] high[73912]))
    unknown call_tmp[624148] "maybe param" "maybe type" "temp"
    (624151 'move' call_tmp[624148](73924 call chpl_by call_tmp[624143] stride[73916]))
    const r[73926] "dead at end of block" "const" "insert auto destroy"
    (541261 'init var' r[73926] call_tmp[624148])
    (73929 'end of statement')
    {
      unknown _indexOfInterest[73936] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[73937] "expr temp" "temp"
      (73946 'move' _iterator[73937](73944 call _getIterator r[73926]))
      Defer
      {
        {
          (73962 call _freeIterator _iterator[73937])
        }
      }
      { scopeless type
        (73951 'move' _indexOfInterest[73936](73948 call iteratorIndex _iterator[73937]))
      }
      ForLoop[73938]
      {
        unknown i[73955] "index var" "insert auto destroy"
        (475818 'end of statement')
        (73957 'move' i[73955] _indexOfInterest[73936])
        (475819 'end of statement' i[73955])
        unknown yret[510803] "YVV" "temp"
        (510806 'move' yret[510803](510805 'deref' i[73955]))
        (510808 yield yret[510803])
        (475821 'end of statement' i[73955])
        label _continueLabel[73941]
        _indexOfInterest[73936]
        _iterator[73937]
      }
      label _breakLabel[73942]
    }
    (510801 return ret[510799])
  }
  function chpl_direct_range_iter[73977](arg low[73974]:bool[10], arg high[73980]:bool[10], arg stride[73984]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510812] "RVV" "temp"
    unknown call_tmp[624153] "expr temp" "maybe param" "maybe type" "temp"
    (624156 'move' call_tmp[624153](73989 call chpl_build_bounded_range low[73974] high[73980]))
    unknown call_tmp[624158] "maybe param" "maybe type" "temp"
    (624161 'move' call_tmp[624158](73992 call chpl_by call_tmp[624153] stride[73984]))
    const r[73994] "dead at end of block" "const" "insert auto destroy"
    (541263 'init var' r[73994] call_tmp[624158])
    (73997 'end of statement')
    {
      unknown _indexOfInterest[74004] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[74005] "expr temp" "temp"
      (74014 'move' _iterator[74005](74012 call _getIterator r[73994]))
      Defer
      {
        {
          (74030 call _freeIterator _iterator[74005])
        }
      }
      { scopeless type
        (74019 'move' _indexOfInterest[74004](74016 call iteratorIndex _iterator[74005]))
      }
      ForLoop[74006]
      {
        unknown i[74023] "index var" "insert auto destroy"
        (475824 'end of statement')
        (74025 'move' i[74023] _indexOfInterest[74004])
        (475825 'end of statement' i[74023])
        unknown yret[510816] "YVV" "temp"
        (510819 'move' yret[510816](510818 'deref' i[74023]))
        (510821 yield yret[510816])
        (475827 'end of statement' i[74023])
        label _continueLabel[74009]
        _indexOfInterest[74004]
        _iterator[74005]
      }
      label _breakLabel[74010]
    }
    (510814 return ret[510812])
  }
  function chpl_direct_range_iter[456772](arg low[456779] :
  (456776 call int(64)[13] 64), arg high[456785] :
  (456783 call int(64)[13] 64), param arg stride[456791] :
  (456789 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510825] "RVV" "temp"
    {
      unknown _indexOfInterest[456795] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456797] "expr temp" "temp"
      unknown call_tmp[624163] "expr temp" "maybe param" "maybe type" "temp"
      (624166 'move' call_tmp[624163](456804 call chpl_direct_param_stride_range_iter low[456779] high[456785] stride[456791]))
      (456799 'move' _iterator[456797](456802 call _getIterator call_tmp[624163]))
      Defer
      {
        {
          (456810 call _freeIterator _iterator[456797])
        }
      }
      { scopeless type
        (456814 'move' _indexOfInterest[456795](456817 call iteratorIndex _iterator[456797]))
      }
      ForLoop[456819]
      {
        unknown i[456822] "index var" "insert auto destroy"
        (475830 'end of statement')
        (456824 'move' i[456822] _indexOfInterest[456795])
        (475831 'end of statement' i[456822])
        unknown yret[510829] "YVV" "temp"
        (510832 'move' yret[510829](510831 'deref' i[456822]))
        (510834 yield yret[510829])
        (475833 'end of statement' i[456822])
        label _continueLabel[456829]
        _indexOfInterest[456795]
        _iterator[456797]
      }
      label _breakLabel[456831]
    }
    (510827 return ret[510825])
  }
  function chpl_direct_range_iter[456709](arg low[456716] :
  (456713 call int(64)[13] 32), arg high[456722] :
  (456720 call int(64)[13] 32), param arg stride[456728] :
  (456726 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510838] "RVV" "temp"
    {
      unknown _indexOfInterest[456732] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456734] "expr temp" "temp"
      unknown call_tmp[624168] "expr temp" "maybe param" "maybe type" "temp"
      (624171 'move' call_tmp[624168](456741 call chpl_direct_param_stride_range_iter low[456716] high[456722] stride[456728]))
      (456736 'move' _iterator[456734](456739 call _getIterator call_tmp[624168]))
      Defer
      {
        {
          (456747 call _freeIterator _iterator[456734])
        }
      }
      { scopeless type
        (456751 'move' _indexOfInterest[456732](456754 call iteratorIndex _iterator[456734]))
      }
      ForLoop[456756]
      {
        unknown i[456759] "index var" "insert auto destroy"
        (475836 'end of statement')
        (456761 'move' i[456759] _indexOfInterest[456732])
        (475837 'end of statement' i[456759])
        unknown yret[510842] "YVV" "temp"
        (510845 'move' yret[510842](510844 'deref' i[456759]))
        (510847 yield yret[510842])
        (475839 'end of statement' i[456759])
        label _continueLabel[456766]
        _indexOfInterest[456732]
        _iterator[456734]
      }
      label _breakLabel[456768]
    }
    (510840 return ret[510838])
  }
  function chpl_direct_range_iter[456646](arg low[456653] :
  (456650 call int(64)[13] 16), arg high[456659] :
  (456657 call int(64)[13] 16), param arg stride[456665] :
  (456663 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510851] "RVV" "temp"
    {
      unknown _indexOfInterest[456669] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456671] "expr temp" "temp"
      unknown call_tmp[624173] "expr temp" "maybe param" "maybe type" "temp"
      (624176 'move' call_tmp[624173](456678 call chpl_direct_param_stride_range_iter low[456653] high[456659] stride[456665]))
      (456673 'move' _iterator[456671](456676 call _getIterator call_tmp[624173]))
      Defer
      {
        {
          (456684 call _freeIterator _iterator[456671])
        }
      }
      { scopeless type
        (456688 'move' _indexOfInterest[456669](456691 call iteratorIndex _iterator[456671]))
      }
      ForLoop[456693]
      {
        unknown i[456696] "index var" "insert auto destroy"
        (475842 'end of statement')
        (456698 'move' i[456696] _indexOfInterest[456669])
        (475843 'end of statement' i[456696])
        unknown yret[510855] "YVV" "temp"
        (510858 'move' yret[510855](510857 'deref' i[456696]))
        (510860 yield yret[510855])
        (475845 'end of statement' i[456696])
        label _continueLabel[456703]
        _indexOfInterest[456669]
        _iterator[456671]
      }
      label _breakLabel[456705]
    }
    (510853 return ret[510851])
  }
  function chpl_direct_range_iter[456583](arg low[456590] :
  (456587 call int(64)[13] 8), arg high[456596] :
  (456594 call int(64)[13] 8), param arg stride[456602] :
  (456600 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510864] "RVV" "temp"
    {
      unknown _indexOfInterest[456606] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456608] "expr temp" "temp"
      unknown call_tmp[624178] "expr temp" "maybe param" "maybe type" "temp"
      (624181 'move' call_tmp[624178](456615 call chpl_direct_param_stride_range_iter low[456590] high[456596] stride[456602]))
      (456610 'move' _iterator[456608](456613 call _getIterator call_tmp[624178]))
      Defer
      {
        {
          (456621 call _freeIterator _iterator[456608])
        }
      }
      { scopeless type
        (456625 'move' _indexOfInterest[456606](456628 call iteratorIndex _iterator[456608]))
      }
      ForLoop[456630]
      {
        unknown i[456633] "index var" "insert auto destroy"
        (475848 'end of statement')
        (456635 'move' i[456633] _indexOfInterest[456606])
        (475849 'end of statement' i[456633])
        unknown yret[510868] "YVV" "temp"
        (510871 'move' yret[510868](510870 'deref' i[456633]))
        (510873 yield yret[510868])
        (475851 'end of statement' i[456633])
        label _continueLabel[456640]
        _indexOfInterest[456606]
        _iterator[456608]
      }
      label _breakLabel[456642]
    }
    (510866 return ret[510864])
  }
  function chpl_direct_range_iter[457024](arg low[457031] :
  (457028 call uint(64)[115] 64), arg high[457037] :
  (457035 call uint(64)[115] 64), param arg stride[457043] :
  (457041 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510877] "RVV" "temp"
    {
      unknown _indexOfInterest[457047] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457049] "expr temp" "temp"
      unknown call_tmp[624183] "expr temp" "maybe param" "maybe type" "temp"
      (624186 'move' call_tmp[624183](457056 call chpl_direct_param_stride_range_iter low[457031] high[457037] stride[457043]))
      (457051 'move' _iterator[457049](457054 call _getIterator call_tmp[624183]))
      Defer
      {
        {
          (457062 call _freeIterator _iterator[457049])
        }
      }
      { scopeless type
        (457066 'move' _indexOfInterest[457047](457069 call iteratorIndex _iterator[457049]))
      }
      ForLoop[457071]
      {
        unknown i[457074] "index var" "insert auto destroy"
        (475854 'end of statement')
        (457076 'move' i[457074] _indexOfInterest[457047])
        (475855 'end of statement' i[457074])
        unknown yret[510881] "YVV" "temp"
        (510884 'move' yret[510881](510883 'deref' i[457074]))
        (510886 yield yret[510881])
        (475857 'end of statement' i[457074])
        label _continueLabel[457081]
        _indexOfInterest[457047]
        _iterator[457049]
      }
      label _breakLabel[457083]
    }
    (510879 return ret[510877])
  }
  function chpl_direct_range_iter[456961](arg low[456968] :
  (456965 call uint(64)[115] 32), arg high[456974] :
  (456972 call uint(64)[115] 32), param arg stride[456980] :
  (456978 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510890] "RVV" "temp"
    {
      unknown _indexOfInterest[456984] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456986] "expr temp" "temp"
      unknown call_tmp[624188] "expr temp" "maybe param" "maybe type" "temp"
      (624191 'move' call_tmp[624188](456993 call chpl_direct_param_stride_range_iter low[456968] high[456974] stride[456980]))
      (456988 'move' _iterator[456986](456991 call _getIterator call_tmp[624188]))
      Defer
      {
        {
          (456999 call _freeIterator _iterator[456986])
        }
      }
      { scopeless type
        (457003 'move' _indexOfInterest[456984](457006 call iteratorIndex _iterator[456986]))
      }
      ForLoop[457008]
      {
        unknown i[457011] "index var" "insert auto destroy"
        (475860 'end of statement')
        (457013 'move' i[457011] _indexOfInterest[456984])
        (475861 'end of statement' i[457011])
        unknown yret[510894] "YVV" "temp"
        (510897 'move' yret[510894](510896 'deref' i[457011]))
        (510899 yield yret[510894])
        (475863 'end of statement' i[457011])
        label _continueLabel[457018]
        _indexOfInterest[456984]
        _iterator[456986]
      }
      label _breakLabel[457020]
    }
    (510892 return ret[510890])
  }
  function chpl_direct_range_iter[456898](arg low[456905] :
  (456902 call uint(64)[115] 16), arg high[456911] :
  (456909 call uint(64)[115] 16), param arg stride[456917] :
  (456915 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510903] "RVV" "temp"
    {
      unknown _indexOfInterest[456921] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456923] "expr temp" "temp"
      unknown call_tmp[624193] "expr temp" "maybe param" "maybe type" "temp"
      (624196 'move' call_tmp[624193](456930 call chpl_direct_param_stride_range_iter low[456905] high[456911] stride[456917]))
      (456925 'move' _iterator[456923](456928 call _getIterator call_tmp[624193]))
      Defer
      {
        {
          (456936 call _freeIterator _iterator[456923])
        }
      }
      { scopeless type
        (456940 'move' _indexOfInterest[456921](456943 call iteratorIndex _iterator[456923]))
      }
      ForLoop[456945]
      {
        unknown i[456948] "index var" "insert auto destroy"
        (475866 'end of statement')
        (456950 'move' i[456948] _indexOfInterest[456921])
        (475867 'end of statement' i[456948])
        unknown yret[510907] "YVV" "temp"
        (510910 'move' yret[510907](510909 'deref' i[456948]))
        (510912 yield yret[510907])
        (475869 'end of statement' i[456948])
        label _continueLabel[456955]
        _indexOfInterest[456921]
        _iterator[456923]
      }
      label _breakLabel[456957]
    }
    (510905 return ret[510903])
  }
  function chpl_direct_range_iter[456835](arg low[456842] :
  (456839 call uint(64)[115] 8), arg high[456848] :
  (456846 call uint(64)[115] 8), param arg stride[456854] :
  (456852 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510916] "RVV" "temp"
    {
      unknown _indexOfInterest[456858] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456860] "expr temp" "temp"
      unknown call_tmp[624198] "expr temp" "maybe param" "maybe type" "temp"
      (624201 'move' call_tmp[624198](456867 call chpl_direct_param_stride_range_iter low[456842] high[456848] stride[456854]))
      (456862 'move' _iterator[456860](456865 call _getIterator call_tmp[624198]))
      Defer
      {
        {
          (456873 call _freeIterator _iterator[456860])
        }
      }
      { scopeless type
        (456877 'move' _indexOfInterest[456858](456880 call iteratorIndex _iterator[456860]))
      }
      ForLoop[456882]
      {
        unknown i[456885] "index var" "insert auto destroy"
        (475872 'end of statement')
        (456887 'move' i[456885] _indexOfInterest[456858])
        (475873 'end of statement' i[456885])
        unknown yret[510920] "YVV" "temp"
        (510923 'move' yret[510920](510922 'deref' i[456885]))
        (510925 yield yret[510920])
        (475875 'end of statement' i[456885])
        label _continueLabel[456892]
        _indexOfInterest[456858]
        _iterator[456860]
      }
      label _breakLabel[456894]
    }
    (510918 return ret[510916])
  }
  function chpl_direct_range_iter[74191](arg low[74188]:enum[187](?), arg high[74194]:enum[187](?), param arg stride[74198]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510929] "RVV" "temp"
    unknown call_tmp[624203] "expr temp" "maybe param" "maybe type" "temp"
    (624206 'move' call_tmp[624203](74203 call == stride[74198] 1))
    unknown call_tmp[624208] "expr temp" "maybe param" "maybe type" "temp"
    (624211 'move' call_tmp[624208](74302 call _cond_test call_tmp[624203]))
    if call_tmp[624208]
    {
      unknown call_tmp[624213] "maybe param" "maybe type" "temp"
      (624216 'move' call_tmp[624213](74207 call chpl_build_bounded_range low[74188] high[74194]))
      const r[74209] "dead at end of block" "const" "insert auto destroy"
      (541265 'init var' r[74209] call_tmp[624213])
      (74212 'end of statement')
      {
        unknown _indexOfInterest[74219] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74220] "expr temp" "temp"
        (74229 'move' _iterator[74220](74227 call _getIterator r[74209]))
        Defer
        {
          {
            (74245 call _freeIterator _iterator[74220])
          }
        }
        { scopeless type
          (74234 'move' _indexOfInterest[74219](74231 call iteratorIndex _iterator[74220]))
        }
        ForLoop[74221]
        {
          unknown i[74238] "index var" "insert auto destroy"
          (475878 'end of statement')
          (74240 'move' i[74238] _indexOfInterest[74219])
          (475879 'end of statement' i[74238])
          unknown yret[510933] "YVV" "temp"
          (510936 'move' yret[510933](510935 'deref' i[74238]))
          (510938 yield yret[510933])
          (475881 'end of statement' i[74238])
          label _continueLabel[74224]
          _indexOfInterest[74219]
          _iterator[74220]
        }
        label _breakLabel[74225]
      }
    }
    {
      unknown call_tmp[624218] "expr temp" "maybe param" "maybe type" "temp"
      (624221 'move' call_tmp[624218](74254 call chpl_build_bounded_range low[74188] high[74194]))
      unknown call_tmp[624223] "maybe param" "maybe type" "temp"
      (624226 'move' call_tmp[624223](74257 call chpl_by call_tmp[624218] stride[74198]))
      const r[74259] "dead at end of block" "const" "insert auto destroy"
      (541267 'init var' r[74259] call_tmp[624223])
      (74262 'end of statement')
      {
        unknown _indexOfInterest[74269] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74270] "expr temp" "temp"
        (74279 'move' _iterator[74270](74277 call _getIterator r[74259]))
        Defer
        {
          {
            (74295 call _freeIterator _iterator[74270])
          }
        }
        { scopeless type
          (74284 'move' _indexOfInterest[74269](74281 call iteratorIndex _iterator[74270]))
        }
        ForLoop[74271]
        {
          unknown i[74288] "index var" "insert auto destroy"
          (475884 'end of statement')
          (74290 'move' i[74288] _indexOfInterest[74269])
          (475885 'end of statement' i[74288])
          unknown yret[510940] "YVV" "temp"
          (510943 'move' yret[510940](510942 'deref' i[74288]))
          (510945 yield yret[510940])
          (475887 'end of statement' i[74288])
          label _continueLabel[74274]
          _indexOfInterest[74269]
          _iterator[74270]
        }
        label _breakLabel[74275]
      }
    }
    (510931 return ret[510929])
  }
  function chpl_direct_range_iter[74315](arg low[74312]:bool[10], arg high[74318]:bool[10], param arg stride[74322]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510949] "RVV" "temp"
    unknown call_tmp[624228] "expr temp" "maybe param" "maybe type" "temp"
    (624231 'move' call_tmp[624228](74327 call == stride[74322] 1))
    unknown call_tmp[624233] "expr temp" "maybe param" "maybe type" "temp"
    (624236 'move' call_tmp[624233](74426 call _cond_test call_tmp[624228]))
    if call_tmp[624233]
    {
      unknown call_tmp[624238] "maybe param" "maybe type" "temp"
      (624241 'move' call_tmp[624238](74331 call chpl_build_bounded_range low[74312] high[74318]))
      const r[74333] "dead at end of block" "const" "insert auto destroy"
      (541269 'init var' r[74333] call_tmp[624238])
      (74336 'end of statement')
      {
        unknown _indexOfInterest[74343] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74344] "expr temp" "temp"
        (74353 'move' _iterator[74344](74351 call _getIterator r[74333]))
        Defer
        {
          {
            (74369 call _freeIterator _iterator[74344])
          }
        }
        { scopeless type
          (74358 'move' _indexOfInterest[74343](74355 call iteratorIndex _iterator[74344]))
        }
        ForLoop[74345]
        {
          unknown i[74362] "index var" "insert auto destroy"
          (475890 'end of statement')
          (74364 'move' i[74362] _indexOfInterest[74343])
          (475891 'end of statement' i[74362])
          unknown yret[510953] "YVV" "temp"
          (510956 'move' yret[510953](510955 'deref' i[74362]))
          (510958 yield yret[510953])
          (475893 'end of statement' i[74362])
          label _continueLabel[74348]
          _indexOfInterest[74343]
          _iterator[74344]
        }
        label _breakLabel[74349]
      }
    }
    {
      unknown call_tmp[624243] "expr temp" "maybe param" "maybe type" "temp"
      (624246 'move' call_tmp[624243](74378 call chpl_build_bounded_range low[74312] high[74318]))
      unknown call_tmp[624248] "maybe param" "maybe type" "temp"
      (624251 'move' call_tmp[624248](74381 call chpl_by call_tmp[624243] stride[74322]))
      const r[74383] "dead at end of block" "const" "insert auto destroy"
      (541271 'init var' r[74383] call_tmp[624248])
      (74386 'end of statement')
      {
        unknown _indexOfInterest[74393] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74394] "expr temp" "temp"
        (74403 'move' _iterator[74394](74401 call _getIterator r[74383]))
        Defer
        {
          {
            (74419 call _freeIterator _iterator[74394])
          }
        }
        { scopeless type
          (74408 'move' _indexOfInterest[74393](74405 call iteratorIndex _iterator[74394]))
        }
        ForLoop[74395]
        {
          unknown i[74412] "index var" "insert auto destroy"
          (475896 'end of statement')
          (74414 'move' i[74412] _indexOfInterest[74393])
          (475897 'end of statement' i[74412])
          unknown yret[510960] "YVV" "temp"
          (510963 'move' yret[510960](510962 'deref' i[74412]))
          (510965 yield yret[510960])
          (475899 'end of statement' i[74412])
          label _continueLabel[74398]
          _indexOfInterest[74393]
          _iterator[74394]
        }
        label _breakLabel[74399]
      }
    }
    (510951 return ret[510949])
  }
  function chpl_direct_range_iter[457276](arg low[457283] :
  (457280 call int(64)[13] 64), arg high[457289] :
  (457287 call int(64)[13] 64), arg stride[457295] :
  (457293 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510969] "RVV" "temp"
    {
      unknown _indexOfInterest[457299] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457301] "expr temp" "temp"
      unknown call_tmp[624253] "expr temp" "maybe param" "maybe type" "temp"
      (624256 'move' call_tmp[624253](457308 call chpl_direct_pos_stride_range_iter low[457283] high[457289] stride[457295]))
      (457303 'move' _iterator[457301](457306 call _getIterator call_tmp[624253]))
      Defer
      {
        {
          (457314 call _freeIterator _iterator[457301])
        }
      }
      { scopeless type
        (457318 'move' _indexOfInterest[457299](457321 call iteratorIndex _iterator[457301]))
      }
      ForLoop[457323]
      {
        unknown i[457326] "index var" "insert auto destroy"
        (475902 'end of statement')
        (457328 'move' i[457326] _indexOfInterest[457299])
        (475903 'end of statement' i[457326])
        unknown yret[510973] "YVV" "temp"
        (510976 'move' yret[510973](510975 'deref' i[457326]))
        (510978 yield yret[510973])
        (475905 'end of statement' i[457326])
        label _continueLabel[457333]
        _indexOfInterest[457299]
        _iterator[457301]
      }
      label _breakLabel[457335]
    }
    (510971 return ret[510969])
  }
  function chpl_direct_range_iter[457213](arg low[457220] :
  (457217 call int(64)[13] 32), arg high[457226] :
  (457224 call int(64)[13] 32), arg stride[457232] :
  (457230 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510982] "RVV" "temp"
    {
      unknown _indexOfInterest[457236] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457238] "expr temp" "temp"
      unknown call_tmp[624258] "expr temp" "maybe param" "maybe type" "temp"
      (624261 'move' call_tmp[624258](457245 call chpl_direct_pos_stride_range_iter low[457220] high[457226] stride[457232]))
      (457240 'move' _iterator[457238](457243 call _getIterator call_tmp[624258]))
      Defer
      {
        {
          (457251 call _freeIterator _iterator[457238])
        }
      }
      { scopeless type
        (457255 'move' _indexOfInterest[457236](457258 call iteratorIndex _iterator[457238]))
      }
      ForLoop[457260]
      {
        unknown i[457263] "index var" "insert auto destroy"
        (475908 'end of statement')
        (457265 'move' i[457263] _indexOfInterest[457236])
        (475909 'end of statement' i[457263])
        unknown yret[510986] "YVV" "temp"
        (510989 'move' yret[510986](510988 'deref' i[457263]))
        (510991 yield yret[510986])
        (475911 'end of statement' i[457263])
        label _continueLabel[457270]
        _indexOfInterest[457236]
        _iterator[457238]
      }
      label _breakLabel[457272]
    }
    (510984 return ret[510982])
  }
  function chpl_direct_range_iter[457150](arg low[457157] :
  (457154 call int(64)[13] 16), arg high[457163] :
  (457161 call int(64)[13] 16), arg stride[457169] :
  (457167 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510995] "RVV" "temp"
    {
      unknown _indexOfInterest[457173] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457175] "expr temp" "temp"
      unknown call_tmp[624263] "expr temp" "maybe param" "maybe type" "temp"
      (624266 'move' call_tmp[624263](457182 call chpl_direct_pos_stride_range_iter low[457157] high[457163] stride[457169]))
      (457177 'move' _iterator[457175](457180 call _getIterator call_tmp[624263]))
      Defer
      {
        {
          (457188 call _freeIterator _iterator[457175])
        }
      }
      { scopeless type
        (457192 'move' _indexOfInterest[457173](457195 call iteratorIndex _iterator[457175]))
      }
      ForLoop[457197]
      {
        unknown i[457200] "index var" "insert auto destroy"
        (475914 'end of statement')
        (457202 'move' i[457200] _indexOfInterest[457173])
        (475915 'end of statement' i[457200])
        unknown yret[510999] "YVV" "temp"
        (511002 'move' yret[510999](511001 'deref' i[457200]))
        (511004 yield yret[510999])
        (475917 'end of statement' i[457200])
        label _continueLabel[457207]
        _indexOfInterest[457173]
        _iterator[457175]
      }
      label _breakLabel[457209]
    }
    (510997 return ret[510995])
  }
  function chpl_direct_range_iter[457087](arg low[457094] :
  (457091 call int(64)[13] 8), arg high[457100] :
  (457098 call int(64)[13] 8), arg stride[457106] :
  (457104 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511008] "RVV" "temp"
    {
      unknown _indexOfInterest[457110] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457112] "expr temp" "temp"
      unknown call_tmp[624268] "expr temp" "maybe param" "maybe type" "temp"
      (624271 'move' call_tmp[624268](457119 call chpl_direct_pos_stride_range_iter low[457094] high[457100] stride[457106]))
      (457114 'move' _iterator[457112](457117 call _getIterator call_tmp[624268]))
      Defer
      {
        {
          (457125 call _freeIterator _iterator[457112])
        }
      }
      { scopeless type
        (457129 'move' _indexOfInterest[457110](457132 call iteratorIndex _iterator[457112]))
      }
      ForLoop[457134]
      {
        unknown i[457137] "index var" "insert auto destroy"
        (475920 'end of statement')
        (457139 'move' i[457137] _indexOfInterest[457110])
        (475921 'end of statement' i[457137])
        unknown yret[511012] "YVV" "temp"
        (511015 'move' yret[511012](511014 'deref' i[457137]))
        (511017 yield yret[511012])
        (475923 'end of statement' i[457137])
        label _continueLabel[457144]
        _indexOfInterest[457110]
        _iterator[457112]
      }
      label _breakLabel[457146]
    }
    (511010 return ret[511008])
  }
  function chpl_direct_range_iter[457528](arg low[457535] :
  (457532 call uint(64)[115] 64), arg high[457541] :
  (457539 call uint(64)[115] 64), arg stride[457547] :
  (457545 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511021] "RVV" "temp"
    {
      unknown _indexOfInterest[457551] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457553] "expr temp" "temp"
      unknown call_tmp[624273] "expr temp" "maybe param" "maybe type" "temp"
      (624276 'move' call_tmp[624273](457560 call chpl_direct_pos_stride_range_iter low[457535] high[457541] stride[457547]))
      (457555 'move' _iterator[457553](457558 call _getIterator call_tmp[624273]))
      Defer
      {
        {
          (457566 call _freeIterator _iterator[457553])
        }
      }
      { scopeless type
        (457570 'move' _indexOfInterest[457551](457573 call iteratorIndex _iterator[457553]))
      }
      ForLoop[457575]
      {
        unknown i[457578] "index var" "insert auto destroy"
        (475926 'end of statement')
        (457580 'move' i[457578] _indexOfInterest[457551])
        (475927 'end of statement' i[457578])
        unknown yret[511025] "YVV" "temp"
        (511028 'move' yret[511025](511027 'deref' i[457578]))
        (511030 yield yret[511025])
        (475929 'end of statement' i[457578])
        label _continueLabel[457585]
        _indexOfInterest[457551]
        _iterator[457553]
      }
      label _breakLabel[457587]
    }
    (511023 return ret[511021])
  }
  function chpl_direct_range_iter[457465](arg low[457472] :
  (457469 call uint(64)[115] 32), arg high[457478] :
  (457476 call uint(64)[115] 32), arg stride[457484] :
  (457482 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511034] "RVV" "temp"
    {
      unknown _indexOfInterest[457488] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457490] "expr temp" "temp"
      unknown call_tmp[624278] "expr temp" "maybe param" "maybe type" "temp"
      (624281 'move' call_tmp[624278](457497 call chpl_direct_pos_stride_range_iter low[457472] high[457478] stride[457484]))
      (457492 'move' _iterator[457490](457495 call _getIterator call_tmp[624278]))
      Defer
      {
        {
          (457503 call _freeIterator _iterator[457490])
        }
      }
      { scopeless type
        (457507 'move' _indexOfInterest[457488](457510 call iteratorIndex _iterator[457490]))
      }
      ForLoop[457512]
      {
        unknown i[457515] "index var" "insert auto destroy"
        (475932 'end of statement')
        (457517 'move' i[457515] _indexOfInterest[457488])
        (475933 'end of statement' i[457515])
        unknown yret[511038] "YVV" "temp"
        (511041 'move' yret[511038](511040 'deref' i[457515]))
        (511043 yield yret[511038])
        (475935 'end of statement' i[457515])
        label _continueLabel[457522]
        _indexOfInterest[457488]
        _iterator[457490]
      }
      label _breakLabel[457524]
    }
    (511036 return ret[511034])
  }
  function chpl_direct_range_iter[457402](arg low[457409] :
  (457406 call uint(64)[115] 16), arg high[457415] :
  (457413 call uint(64)[115] 16), arg stride[457421] :
  (457419 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511047] "RVV" "temp"
    {
      unknown _indexOfInterest[457425] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457427] "expr temp" "temp"
      unknown call_tmp[624283] "expr temp" "maybe param" "maybe type" "temp"
      (624286 'move' call_tmp[624283](457434 call chpl_direct_pos_stride_range_iter low[457409] high[457415] stride[457421]))
      (457429 'move' _iterator[457427](457432 call _getIterator call_tmp[624283]))
      Defer
      {
        {
          (457440 call _freeIterator _iterator[457427])
        }
      }
      { scopeless type
        (457444 'move' _indexOfInterest[457425](457447 call iteratorIndex _iterator[457427]))
      }
      ForLoop[457449]
      {
        unknown i[457452] "index var" "insert auto destroy"
        (475938 'end of statement')
        (457454 'move' i[457452] _indexOfInterest[457425])
        (475939 'end of statement' i[457452])
        unknown yret[511051] "YVV" "temp"
        (511054 'move' yret[511051](511053 'deref' i[457452]))
        (511056 yield yret[511051])
        (475941 'end of statement' i[457452])
        label _continueLabel[457459]
        _indexOfInterest[457425]
        _iterator[457427]
      }
      label _breakLabel[457461]
    }
    (511049 return ret[511047])
  }
  function chpl_direct_range_iter[457339](arg low[457346] :
  (457343 call uint(64)[115] 8), arg high[457352] :
  (457350 call uint(64)[115] 8), arg stride[457358] :
  (457356 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511060] "RVV" "temp"
    {
      unknown _indexOfInterest[457362] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457364] "expr temp" "temp"
      unknown call_tmp[624288] "expr temp" "maybe param" "maybe type" "temp"
      (624291 'move' call_tmp[624288](457371 call chpl_direct_pos_stride_range_iter low[457346] high[457352] stride[457358]))
      (457366 'move' _iterator[457364](457369 call _getIterator call_tmp[624288]))
      Defer
      {
        {
          (457377 call _freeIterator _iterator[457364])
        }
      }
      { scopeless type
        (457381 'move' _indexOfInterest[457362](457384 call iteratorIndex _iterator[457364]))
      }
      ForLoop[457386]
      {
        unknown i[457389] "index var" "insert auto destroy"
        (475944 'end of statement')
        (457391 'move' i[457389] _indexOfInterest[457362])
        (475945 'end of statement' i[457389])
        unknown yret[511064] "YVV" "temp"
        (511067 'move' yret[511064](511066 'deref' i[457389]))
        (511069 yield yret[511064])
        (475947 'end of statement' i[457389])
        label _continueLabel[457396]
        _indexOfInterest[457362]
        _iterator[457364]
      }
      label _breakLabel[457398]
    }
    (511062 return ret[511060])
  }
  function chpl_direct_range_iter[457696](arg low[457703] :
  (457700 call int(64)[13] 64), arg high[457709] :
  (457707 call int(64)[13] 64), arg stride[457711]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511073] "RVV" "temp"
    unknown call_tmp[624293] "expr temp" "maybe param" "maybe type" "temp"
    (624296 'move' call_tmp[624293](457721 call int(64)[13] 64))
    unknown call_tmp[624298] "expr temp" "maybe param" "maybe type" "temp"
    (624301 'move' call_tmp[624298](457718 call _cast string[26] call_tmp[624293]))
    unknown call_tmp[624303] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624306 'move' call_tmp[624303](457727 'typeof' stride[457711]))
    unknown call_tmp[624308] "expr temp" "maybe param" "maybe type" "temp"
    (624311 'move' call_tmp[624308](457725 call _cast string[26] call_tmp[624303]))
    (457715 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624298] " using a step of type " call_tmp[624308])
    (511075 return ret[511073])
  }
  function chpl_direct_range_iter[457661](arg low[457668] :
  (457665 call int(64)[13] 32), arg high[457674] :
  (457672 call int(64)[13] 32), arg stride[457676]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511079] "RVV" "temp"
    unknown call_tmp[624313] "expr temp" "maybe param" "maybe type" "temp"
    (624316 'move' call_tmp[624313](457686 call int(64)[13] 32))
    unknown call_tmp[624318] "expr temp" "maybe param" "maybe type" "temp"
    (624321 'move' call_tmp[624318](457683 call _cast string[26] call_tmp[624313]))
    unknown call_tmp[624323] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624326 'move' call_tmp[624323](457692 'typeof' stride[457676]))
    unknown call_tmp[624328] "expr temp" "maybe param" "maybe type" "temp"
    (624331 'move' call_tmp[624328](457690 call _cast string[26] call_tmp[624323]))
    (457680 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624318] " using a step of type " call_tmp[624328])
    (511081 return ret[511079])
  }
  function chpl_direct_range_iter[457626](arg low[457633] :
  (457630 call int(64)[13] 16), arg high[457639] :
  (457637 call int(64)[13] 16), arg stride[457641]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511085] "RVV" "temp"
    unknown call_tmp[624333] "expr temp" "maybe param" "maybe type" "temp"
    (624336 'move' call_tmp[624333](457651 call int(64)[13] 16))
    unknown call_tmp[624338] "expr temp" "maybe param" "maybe type" "temp"
    (624341 'move' call_tmp[624338](457648 call _cast string[26] call_tmp[624333]))
    unknown call_tmp[624343] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624346 'move' call_tmp[624343](457657 'typeof' stride[457641]))
    unknown call_tmp[624348] "expr temp" "maybe param" "maybe type" "temp"
    (624351 'move' call_tmp[624348](457655 call _cast string[26] call_tmp[624343]))
    (457645 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624338] " using a step of type " call_tmp[624348])
    (511087 return ret[511085])
  }
  function chpl_direct_range_iter[457591](arg low[457598] :
  (457595 call int(64)[13] 8), arg high[457604] :
  (457602 call int(64)[13] 8), arg stride[457606]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511091] "RVV" "temp"
    unknown call_tmp[624353] "expr temp" "maybe param" "maybe type" "temp"
    (624356 'move' call_tmp[624353](457616 call int(64)[13] 8))
    unknown call_tmp[624358] "expr temp" "maybe param" "maybe type" "temp"
    (624361 'move' call_tmp[624358](457613 call _cast string[26] call_tmp[624353]))
    unknown call_tmp[624363] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624366 'move' call_tmp[624363](457622 'typeof' stride[457606]))
    unknown call_tmp[624368] "expr temp" "maybe param" "maybe type" "temp"
    (624371 'move' call_tmp[624368](457620 call _cast string[26] call_tmp[624363]))
    (457610 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624358] " using a step of type " call_tmp[624368])
    (511093 return ret[511091])
  }
  function chpl_direct_range_iter[457836](arg low[457843] :
  (457840 call uint(64)[115] 64), arg high[457849] :
  (457847 call uint(64)[115] 64), arg stride[457851]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511097] "RVV" "temp"
    unknown call_tmp[624373] "expr temp" "maybe param" "maybe type" "temp"
    (624376 'move' call_tmp[624373](457861 call uint(64)[115] 64))
    unknown call_tmp[624378] "expr temp" "maybe param" "maybe type" "temp"
    (624381 'move' call_tmp[624378](457858 call _cast string[26] call_tmp[624373]))
    unknown call_tmp[624383] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624386 'move' call_tmp[624383](457867 'typeof' stride[457851]))
    unknown call_tmp[624388] "expr temp" "maybe param" "maybe type" "temp"
    (624391 'move' call_tmp[624388](457865 call _cast string[26] call_tmp[624383]))
    (457855 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624378] " using a step of type " call_tmp[624388])
    (511099 return ret[511097])
  }
  function chpl_direct_range_iter[457801](arg low[457808] :
  (457805 call uint(64)[115] 32), arg high[457814] :
  (457812 call uint(64)[115] 32), arg stride[457816]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511103] "RVV" "temp"
    unknown call_tmp[624393] "expr temp" "maybe param" "maybe type" "temp"
    (624396 'move' call_tmp[624393](457826 call uint(64)[115] 32))
    unknown call_tmp[624398] "expr temp" "maybe param" "maybe type" "temp"
    (624401 'move' call_tmp[624398](457823 call _cast string[26] call_tmp[624393]))
    unknown call_tmp[624403] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624406 'move' call_tmp[624403](457832 'typeof' stride[457816]))
    unknown call_tmp[624408] "expr temp" "maybe param" "maybe type" "temp"
    (624411 'move' call_tmp[624408](457830 call _cast string[26] call_tmp[624403]))
    (457820 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624398] " using a step of type " call_tmp[624408])
    (511105 return ret[511103])
  }
  function chpl_direct_range_iter[457766](arg low[457773] :
  (457770 call uint(64)[115] 16), arg high[457779] :
  (457777 call uint(64)[115] 16), arg stride[457781]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511109] "RVV" "temp"
    unknown call_tmp[624413] "expr temp" "maybe param" "maybe type" "temp"
    (624416 'move' call_tmp[624413](457791 call uint(64)[115] 16))
    unknown call_tmp[624418] "expr temp" "maybe param" "maybe type" "temp"
    (624421 'move' call_tmp[624418](457788 call _cast string[26] call_tmp[624413]))
    unknown call_tmp[624423] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624426 'move' call_tmp[624423](457797 'typeof' stride[457781]))
    unknown call_tmp[624428] "expr temp" "maybe param" "maybe type" "temp"
    (624431 'move' call_tmp[624428](457795 call _cast string[26] call_tmp[624423]))
    (457785 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624418] " using a step of type " call_tmp[624428])
    (511111 return ret[511109])
  }
  function chpl_direct_range_iter[457731](arg low[457738] :
  (457735 call uint(64)[115] 8), arg high[457744] :
  (457742 call uint(64)[115] 8), arg stride[457746]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511115] "RVV" "temp"
    unknown call_tmp[624433] "expr temp" "maybe param" "maybe type" "temp"
    (624436 'move' call_tmp[624433](457756 call uint(64)[115] 8))
    unknown call_tmp[624438] "expr temp" "maybe param" "maybe type" "temp"
    (624441 'move' call_tmp[624438](457753 call _cast string[26] call_tmp[624433]))
    unknown call_tmp[624443] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624446 'move' call_tmp[624443](457762 'typeof' stride[457746]))
    unknown call_tmp[624448] "expr temp" "maybe param" "maybe type" "temp"
    (624451 'move' call_tmp[624448](457760 call _cast string[26] call_tmp[624443]))
    (457750 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624438] " using a step of type " call_tmp[624448])
    (511117 return ret[511115])
  }
  function chpl_direct_range_iter[74667](arg low[74665]:_any[178](?), arg high[74669]:_any[178](?), arg stride[74671]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511121] "RVV" "temp"
    (74676 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (511123 return ret[511121])
  }
  function chpl_direct_counted_range_iter[458039](arg low[458046] :
  (458043 call int(64)[13] 64), arg count[458052] :
  (458050 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511127] "RVV" "temp"
    {
      unknown _indexOfInterest[458056] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458058] "expr temp" "temp"
      unknown call_tmp[624453] "expr temp" "maybe param" "maybe type" "temp"
      (624456 'move' call_tmp[624453](458065 call chpl_direct_counted_range_iter_helper low[458046] count[458052]))
      (458060 'move' _iterator[458058](458063 call _getIterator call_tmp[624453]))
      Defer
      {
        {
          (458070 call _freeIterator _iterator[458058])
        }
      }
      { scopeless type
        (458074 'move' _indexOfInterest[458056](458077 call iteratorIndex _iterator[458058]))
      }
      ForLoop[458079]
      {
        unknown i[458082] "index var" "insert auto destroy"
        (475959 'end of statement')
        (458084 'move' i[458082] _indexOfInterest[458056])
        (475960 'end of statement' i[458082])
        unknown yret[511131] "YVV" "temp"
        (511134 'move' yret[511131](511133 'deref' i[458082]))
        (511136 yield yret[511131])
        (475962 'end of statement' i[458082])
        label _continueLabel[458089]
        _indexOfInterest[458056]
        _iterator[458058]
      }
      label _breakLabel[458091]
    }
    (511129 return ret[511127])
  }
  function chpl_direct_counted_range_iter[457983](arg low[457990] :
  (457987 call int(64)[13] 32), arg count[457996] :
  (457994 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511140] "RVV" "temp"
    {
      unknown _indexOfInterest[458000] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458002] "expr temp" "temp"
      unknown call_tmp[624458] "expr temp" "maybe param" "maybe type" "temp"
      (624461 'move' call_tmp[624458](458009 call chpl_direct_counted_range_iter_helper low[457990] count[457996]))
      (458004 'move' _iterator[458002](458007 call _getIterator call_tmp[624458]))
      Defer
      {
        {
          (458014 call _freeIterator _iterator[458002])
        }
      }
      { scopeless type
        (458018 'move' _indexOfInterest[458000](458021 call iteratorIndex _iterator[458002]))
      }
      ForLoop[458023]
      {
        unknown i[458026] "index var" "insert auto destroy"
        (475965 'end of statement')
        (458028 'move' i[458026] _indexOfInterest[458000])
        (475966 'end of statement' i[458026])
        unknown yret[511144] "YVV" "temp"
        (511147 'move' yret[511144](511146 'deref' i[458026]))
        (511149 yield yret[511144])
        (475968 'end of statement' i[458026])
        label _continueLabel[458033]
        _indexOfInterest[458000]
        _iterator[458002]
      }
      label _breakLabel[458035]
    }
    (511142 return ret[511140])
  }
  function chpl_direct_counted_range_iter[457927](arg low[457934] :
  (457931 call int(64)[13] 16), arg count[457940] :
  (457938 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511153] "RVV" "temp"
    {
      unknown _indexOfInterest[457944] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457946] "expr temp" "temp"
      unknown call_tmp[624463] "expr temp" "maybe param" "maybe type" "temp"
      (624466 'move' call_tmp[624463](457953 call chpl_direct_counted_range_iter_helper low[457934] count[457940]))
      (457948 'move' _iterator[457946](457951 call _getIterator call_tmp[624463]))
      Defer
      {
        {
          (457958 call _freeIterator _iterator[457946])
        }
      }
      { scopeless type
        (457962 'move' _indexOfInterest[457944](457965 call iteratorIndex _iterator[457946]))
      }
      ForLoop[457967]
      {
        unknown i[457970] "index var" "insert auto destroy"
        (475971 'end of statement')
        (457972 'move' i[457970] _indexOfInterest[457944])
        (475972 'end of statement' i[457970])
        unknown yret[511157] "YVV" "temp"
        (511160 'move' yret[511157](511159 'deref' i[457970]))
        (511162 yield yret[511157])
        (475974 'end of statement' i[457970])
        label _continueLabel[457977]
        _indexOfInterest[457944]
        _iterator[457946]
      }
      label _breakLabel[457979]
    }
    (511155 return ret[511153])
  }
  function chpl_direct_counted_range_iter[457871](arg low[457878] :
  (457875 call int(64)[13] 8), arg count[457884] :
  (457882 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511166] "RVV" "temp"
    {
      unknown _indexOfInterest[457888] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457890] "expr temp" "temp"
      unknown call_tmp[624468] "expr temp" "maybe param" "maybe type" "temp"
      (624471 'move' call_tmp[624468](457897 call chpl_direct_counted_range_iter_helper low[457878] count[457884]))
      (457892 'move' _iterator[457890](457895 call _getIterator call_tmp[624468]))
      Defer
      {
        {
          (457902 call _freeIterator _iterator[457890])
        }
      }
      { scopeless type
        (457906 'move' _indexOfInterest[457888](457909 call iteratorIndex _iterator[457890]))
      }
      ForLoop[457911]
      {
        unknown i[457914] "index var" "insert auto destroy"
        (475977 'end of statement')
        (457916 'move' i[457914] _indexOfInterest[457888])
        (475978 'end of statement' i[457914])
        unknown yret[511170] "YVV" "temp"
        (511173 'move' yret[511170](511172 'deref' i[457914]))
        (511175 yield yret[511170])
        (475980 'end of statement' i[457914])
        label _continueLabel[457921]
        _indexOfInterest[457888]
        _iterator[457890]
      }
      label _breakLabel[457923]
    }
    (511168 return ret[511166])
  }
  function chpl_direct_counted_range_iter[458263](arg low[458270] :
  (458267 call int(64)[13] 64), arg count[458276] :
  (458274 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511179] "RVV" "temp"
    {
      unknown _indexOfInterest[458280] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458282] "expr temp" "temp"
      unknown call_tmp[624473] "expr temp" "maybe param" "maybe type" "temp"
      (624476 'move' call_tmp[624473](458289 call chpl_direct_counted_range_iter_helper low[458270] count[458276]))
      (458284 'move' _iterator[458282](458287 call _getIterator call_tmp[624473]))
      Defer
      {
        {
          (458294 call _freeIterator _iterator[458282])
        }
      }
      { scopeless type
        (458298 'move' _indexOfInterest[458280](458301 call iteratorIndex _iterator[458282]))
      }
      ForLoop[458303]
      {
        unknown i[458306] "index var" "insert auto destroy"
        (475983 'end of statement')
        (458308 'move' i[458306] _indexOfInterest[458280])
        (475984 'end of statement' i[458306])
        unknown yret[511183] "YVV" "temp"
        (511186 'move' yret[511183](511185 'deref' i[458306]))
        (511188 yield yret[511183])
        (475986 'end of statement' i[458306])
        label _continueLabel[458313]
        _indexOfInterest[458280]
        _iterator[458282]
      }
      label _breakLabel[458315]
    }
    (511181 return ret[511179])
  }
  function chpl_direct_counted_range_iter[458207](arg low[458214] :
  (458211 call int(64)[13] 32), arg count[458220] :
  (458218 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511192] "RVV" "temp"
    {
      unknown _indexOfInterest[458224] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458226] "expr temp" "temp"
      unknown call_tmp[624478] "expr temp" "maybe param" "maybe type" "temp"
      (624481 'move' call_tmp[624478](458233 call chpl_direct_counted_range_iter_helper low[458214] count[458220]))
      (458228 'move' _iterator[458226](458231 call _getIterator call_tmp[624478]))
      Defer
      {
        {
          (458238 call _freeIterator _iterator[458226])
        }
      }
      { scopeless type
        (458242 'move' _indexOfInterest[458224](458245 call iteratorIndex _iterator[458226]))
      }
      ForLoop[458247]
      {
        unknown i[458250] "index var" "insert auto destroy"
        (475989 'end of statement')
        (458252 'move' i[458250] _indexOfInterest[458224])
        (475990 'end of statement' i[458250])
        unknown yret[511196] "YVV" "temp"
        (511199 'move' yret[511196](511198 'deref' i[458250]))
        (511201 yield yret[511196])
        (475992 'end of statement' i[458250])
        label _continueLabel[458257]
        _indexOfInterest[458224]
        _iterator[458226]
      }
      label _breakLabel[458259]
    }
    (511194 return ret[511192])
  }
  function chpl_direct_counted_range_iter[458151](arg low[458158] :
  (458155 call int(64)[13] 16), arg count[458164] :
  (458162 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511205] "RVV" "temp"
    {
      unknown _indexOfInterest[458168] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458170] "expr temp" "temp"
      unknown call_tmp[624483] "expr temp" "maybe param" "maybe type" "temp"
      (624486 'move' call_tmp[624483](458177 call chpl_direct_counted_range_iter_helper low[458158] count[458164]))
      (458172 'move' _iterator[458170](458175 call _getIterator call_tmp[624483]))
      Defer
      {
        {
          (458182 call _freeIterator _iterator[458170])
        }
      }
      { scopeless type
        (458186 'move' _indexOfInterest[458168](458189 call iteratorIndex _iterator[458170]))
      }
      ForLoop[458191]
      {
        unknown i[458194] "index var" "insert auto destroy"
        (475995 'end of statement')
        (458196 'move' i[458194] _indexOfInterest[458168])
        (475996 'end of statement' i[458194])
        unknown yret[511209] "YVV" "temp"
        (511212 'move' yret[511209](511211 'deref' i[458194]))
        (511214 yield yret[511209])
        (475998 'end of statement' i[458194])
        label _continueLabel[458201]
        _indexOfInterest[458168]
        _iterator[458170]
      }
      label _breakLabel[458203]
    }
    (511207 return ret[511205])
  }
  function chpl_direct_counted_range_iter[458095](arg low[458102] :
  (458099 call int(64)[13] 8), arg count[458108] :
  (458106 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511218] "RVV" "temp"
    {
      unknown _indexOfInterest[458112] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458114] "expr temp" "temp"
      unknown call_tmp[624488] "expr temp" "maybe param" "maybe type" "temp"
      (624491 'move' call_tmp[624488](458121 call chpl_direct_counted_range_iter_helper low[458102] count[458108]))
      (458116 'move' _iterator[458114](458119 call _getIterator call_tmp[624488]))
      Defer
      {
        {
          (458126 call _freeIterator _iterator[458114])
        }
      }
      { scopeless type
        (458130 'move' _indexOfInterest[458112](458133 call iteratorIndex _iterator[458114]))
      }
      ForLoop[458135]
      {
        unknown i[458138] "index var" "insert auto destroy"
        (476001 'end of statement')
        (458140 'move' i[458138] _indexOfInterest[458112])
        (476002 'end of statement' i[458138])
        unknown yret[511222] "YVV" "temp"
        (511225 'move' yret[511222](511224 'deref' i[458138]))
        (511227 yield yret[511222])
        (476004 'end of statement' i[458138])
        label _continueLabel[458145]
        _indexOfInterest[458112]
        _iterator[458114]
      }
      label _breakLabel[458147]
    }
    (511220 return ret[511218])
  }
  function chpl_direct_counted_range_iter[458487](arg low[458494] :
  (458491 call uint(64)[115] 64), arg count[458500] :
  (458498 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511231] "RVV" "temp"
    {
      unknown _indexOfInterest[458504] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458506] "expr temp" "temp"
      unknown call_tmp[624493] "expr temp" "maybe param" "maybe type" "temp"
      (624496 'move' call_tmp[624493](458513 call chpl_direct_counted_range_iter_helper low[458494] count[458500]))
      (458508 'move' _iterator[458506](458511 call _getIterator call_tmp[624493]))
      Defer
      {
        {
          (458518 call _freeIterator _iterator[458506])
        }
      }
      { scopeless type
        (458522 'move' _indexOfInterest[458504](458525 call iteratorIndex _iterator[458506]))
      }
      ForLoop[458527]
      {
        unknown i[458530] "index var" "insert auto destroy"
        (476007 'end of statement')
        (458532 'move' i[458530] _indexOfInterest[458504])
        (476008 'end of statement' i[458530])
        unknown yret[511235] "YVV" "temp"
        (511238 'move' yret[511235](511237 'deref' i[458530]))
        (511240 yield yret[511235])
        (476010 'end of statement' i[458530])
        label _continueLabel[458537]
        _indexOfInterest[458504]
        _iterator[458506]
      }
      label _breakLabel[458539]
    }
    (511233 return ret[511231])
  }
  function chpl_direct_counted_range_iter[458431](arg low[458438] :
  (458435 call uint(64)[115] 32), arg count[458444] :
  (458442 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511244] "RVV" "temp"
    {
      unknown _indexOfInterest[458448] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458450] "expr temp" "temp"
      unknown call_tmp[624498] "expr temp" "maybe param" "maybe type" "temp"
      (624501 'move' call_tmp[624498](458457 call chpl_direct_counted_range_iter_helper low[458438] count[458444]))
      (458452 'move' _iterator[458450](458455 call _getIterator call_tmp[624498]))
      Defer
      {
        {
          (458462 call _freeIterator _iterator[458450])
        }
      }
      { scopeless type
        (458466 'move' _indexOfInterest[458448](458469 call iteratorIndex _iterator[458450]))
      }
      ForLoop[458471]
      {
        unknown i[458474] "index var" "insert auto destroy"
        (476013 'end of statement')
        (458476 'move' i[458474] _indexOfInterest[458448])
        (476014 'end of statement' i[458474])
        unknown yret[511248] "YVV" "temp"
        (511251 'move' yret[511248](511250 'deref' i[458474]))
        (511253 yield yret[511248])
        (476016 'end of statement' i[458474])
        label _continueLabel[458481]
        _indexOfInterest[458448]
        _iterator[458450]
      }
      label _breakLabel[458483]
    }
    (511246 return ret[511244])
  }
  function chpl_direct_counted_range_iter[458375](arg low[458382] :
  (458379 call uint(64)[115] 16), arg count[458388] :
  (458386 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511257] "RVV" "temp"
    {
      unknown _indexOfInterest[458392] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458394] "expr temp" "temp"
      unknown call_tmp[624503] "expr temp" "maybe param" "maybe type" "temp"
      (624506 'move' call_tmp[624503](458401 call chpl_direct_counted_range_iter_helper low[458382] count[458388]))
      (458396 'move' _iterator[458394](458399 call _getIterator call_tmp[624503]))
      Defer
      {
        {
          (458406 call _freeIterator _iterator[458394])
        }
      }
      { scopeless type
        (458410 'move' _indexOfInterest[458392](458413 call iteratorIndex _iterator[458394]))
      }
      ForLoop[458415]
      {
        unknown i[458418] "index var" "insert auto destroy"
        (476019 'end of statement')
        (458420 'move' i[458418] _indexOfInterest[458392])
        (476020 'end of statement' i[458418])
        unknown yret[511261] "YVV" "temp"
        (511264 'move' yret[511261](511263 'deref' i[458418]))
        (511266 yield yret[511261])
        (476022 'end of statement' i[458418])
        label _continueLabel[458425]
        _indexOfInterest[458392]
        _iterator[458394]
      }
      label _breakLabel[458427]
    }
    (511259 return ret[511257])
  }
  function chpl_direct_counted_range_iter[458319](arg low[458326] :
  (458323 call uint(64)[115] 8), arg count[458332] :
  (458330 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511270] "RVV" "temp"
    {
      unknown _indexOfInterest[458336] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458338] "expr temp" "temp"
      unknown call_tmp[624508] "expr temp" "maybe param" "maybe type" "temp"
      (624511 'move' call_tmp[624508](458345 call chpl_direct_counted_range_iter_helper low[458326] count[458332]))
      (458340 'move' _iterator[458338](458343 call _getIterator call_tmp[624508]))
      Defer
      {
        {
          (458350 call _freeIterator _iterator[458338])
        }
      }
      { scopeless type
        (458354 'move' _indexOfInterest[458336](458357 call iteratorIndex _iterator[458338]))
      }
      ForLoop[458359]
      {
        unknown i[458362] "index var" "insert auto destroy"
        (476025 'end of statement')
        (458364 'move' i[458362] _indexOfInterest[458336])
        (476026 'end of statement' i[458362])
        unknown yret[511274] "YVV" "temp"
        (511277 'move' yret[511274](511276 'deref' i[458362]))
        (511279 yield yret[511274])
        (476028 'end of statement' i[458362])
        label _continueLabel[458369]
        _indexOfInterest[458336]
        _iterator[458338]
      }
      label _breakLabel[458371]
    }
    (511272 return ret[511270])
  }
  function chpl_direct_counted_range_iter[458711](arg low[458718] :
  (458715 call uint(64)[115] 64), arg count[458724] :
  (458722 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511283] "RVV" "temp"
    {
      unknown _indexOfInterest[458728] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458730] "expr temp" "temp"
      unknown call_tmp[624513] "expr temp" "maybe param" "maybe type" "temp"
      (624516 'move' call_tmp[624513](458737 call chpl_direct_counted_range_iter_helper low[458718] count[458724]))
      (458732 'move' _iterator[458730](458735 call _getIterator call_tmp[624513]))
      Defer
      {
        {
          (458742 call _freeIterator _iterator[458730])
        }
      }
      { scopeless type
        (458746 'move' _indexOfInterest[458728](458749 call iteratorIndex _iterator[458730]))
      }
      ForLoop[458751]
      {
        unknown i[458754] "index var" "insert auto destroy"
        (476031 'end of statement')
        (458756 'move' i[458754] _indexOfInterest[458728])
        (476032 'end of statement' i[458754])
        unknown yret[511287] "YVV" "temp"
        (511290 'move' yret[511287](511289 'deref' i[458754]))
        (511292 yield yret[511287])
        (476034 'end of statement' i[458754])
        label _continueLabel[458761]
        _indexOfInterest[458728]
        _iterator[458730]
      }
      label _breakLabel[458763]
    }
    (511285 return ret[511283])
  }
  function chpl_direct_counted_range_iter[458655](arg low[458662] :
  (458659 call uint(64)[115] 32), arg count[458668] :
  (458666 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511296] "RVV" "temp"
    {
      unknown _indexOfInterest[458672] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458674] "expr temp" "temp"
      unknown call_tmp[624518] "expr temp" "maybe param" "maybe type" "temp"
      (624521 'move' call_tmp[624518](458681 call chpl_direct_counted_range_iter_helper low[458662] count[458668]))
      (458676 'move' _iterator[458674](458679 call _getIterator call_tmp[624518]))
      Defer
      {
        {
          (458686 call _freeIterator _iterator[458674])
        }
      }
      { scopeless type
        (458690 'move' _indexOfInterest[458672](458693 call iteratorIndex _iterator[458674]))
      }
      ForLoop[458695]
      {
        unknown i[458698] "index var" "insert auto destroy"
        (476037 'end of statement')
        (458700 'move' i[458698] _indexOfInterest[458672])
        (476038 'end of statement' i[458698])
        unknown yret[511300] "YVV" "temp"
        (511303 'move' yret[511300](511302 'deref' i[458698]))
        (511305 yield yret[511300])
        (476040 'end of statement' i[458698])
        label _continueLabel[458705]
        _indexOfInterest[458672]
        _iterator[458674]
      }
      label _breakLabel[458707]
    }
    (511298 return ret[511296])
  }
  function chpl_direct_counted_range_iter[458599](arg low[458606] :
  (458603 call uint(64)[115] 16), arg count[458612] :
  (458610 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511309] "RVV" "temp"
    {
      unknown _indexOfInterest[458616] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458618] "expr temp" "temp"
      unknown call_tmp[624523] "expr temp" "maybe param" "maybe type" "temp"
      (624526 'move' call_tmp[624523](458625 call chpl_direct_counted_range_iter_helper low[458606] count[458612]))
      (458620 'move' _iterator[458618](458623 call _getIterator call_tmp[624523]))
      Defer
      {
        {
          (458630 call _freeIterator _iterator[458618])
        }
      }
      { scopeless type
        (458634 'move' _indexOfInterest[458616](458637 call iteratorIndex _iterator[458618]))
      }
      ForLoop[458639]
      {
        unknown i[458642] "index var" "insert auto destroy"
        (476043 'end of statement')
        (458644 'move' i[458642] _indexOfInterest[458616])
        (476044 'end of statement' i[458642])
        unknown yret[511313] "YVV" "temp"
        (511316 'move' yret[511313](511315 'deref' i[458642]))
        (511318 yield yret[511313])
        (476046 'end of statement' i[458642])
        label _continueLabel[458649]
        _indexOfInterest[458616]
        _iterator[458618]
      }
      label _breakLabel[458651]
    }
    (511311 return ret[511309])
  }
  function chpl_direct_counted_range_iter[458543](arg low[458550] :
  (458547 call uint(64)[115] 8), arg count[458556] :
  (458554 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511322] "RVV" "temp"
    {
      unknown _indexOfInterest[458560] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458562] "expr temp" "temp"
      unknown call_tmp[624528] "expr temp" "maybe param" "maybe type" "temp"
      (624531 'move' call_tmp[624528](458569 call chpl_direct_counted_range_iter_helper low[458550] count[458556]))
      (458564 'move' _iterator[458562](458567 call _getIterator call_tmp[624528]))
      Defer
      {
        {
          (458574 call _freeIterator _iterator[458562])
        }
      }
      { scopeless type
        (458578 'move' _indexOfInterest[458560](458581 call iteratorIndex _iterator[458562]))
      }
      ForLoop[458583]
      {
        unknown i[458586] "index var" "insert auto destroy"
        (476049 'end of statement')
        (458588 'move' i[458586] _indexOfInterest[458560])
        (476050 'end of statement' i[458586])
        unknown yret[511326] "YVV" "temp"
        (511329 'move' yret[511326](511328 'deref' i[458586]))
        (511331 yield yret[511326])
        (476052 'end of statement' i[458586])
        label _continueLabel[458593]
        _indexOfInterest[458560]
        _iterator[458562]
      }
      label _breakLabel[458595]
    }
    (511324 return ret[511322])
  }
  function chpl_direct_counted_range_iter[458947](arg low[458951]:enum[187](?), arg count[458958] :
  (458955 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511335] "RVV" "temp"
    unknown call_tmp[624533] "maybe param" "maybe type" "temp"
    (624536 'move' call_tmp[624533](458963 call chpl_build_low_bounded_range low[458951]))
    const r[458961] "dead at end of block" "const" "insert auto destroy"
    (541273 'init var' r[458961] call_tmp[624533])
    (458966 'end of statement')
    {
      unknown _indexOfInterest[458968] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458970] "expr temp" "temp"
      unknown call_tmp[624538] "expr temp" "maybe param" "maybe type" "temp"
      (624541 'move' call_tmp[624538](458977 call # r[458961] count[458958]))
      (458972 'move' _iterator[458970](458975 call _getIterator call_tmp[624538]))
      Defer
      {
        {
          (458982 call _freeIterator _iterator[458970])
        }
      }
      { scopeless type
        (458986 'move' _indexOfInterest[458968](458989 call iteratorIndex _iterator[458970]))
      }
      ForLoop[458991]
      {
        unknown i[458994] "index var" "insert auto destroy"
        (476055 'end of statement')
        (458996 'move' i[458994] _indexOfInterest[458968])
        (476056 'end of statement' i[458994])
        unknown yret[511339] "YVV" "temp"
        (511342 'move' yret[511339](511341 'deref' i[458994]))
        (511344 yield yret[511339])
        (476058 'end of statement' i[458994])
        label _continueLabel[459001]
        _indexOfInterest[458968]
        _iterator[458970]
      }
      label _breakLabel[459003]
    }
    (511337 return ret[511335])
  }
  function chpl_direct_counted_range_iter[458887](arg low[458891]:enum[187](?), arg count[458898] :
  (458895 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511348] "RVV" "temp"
    unknown call_tmp[624543] "maybe param" "maybe type" "temp"
    (624546 'move' call_tmp[624543](458903 call chpl_build_low_bounded_range low[458891]))
    const r[458901] "dead at end of block" "const" "insert auto destroy"
    (541275 'init var' r[458901] call_tmp[624543])
    (458906 'end of statement')
    {
      unknown _indexOfInterest[458908] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458910] "expr temp" "temp"
      unknown call_tmp[624548] "expr temp" "maybe param" "maybe type" "temp"
      (624551 'move' call_tmp[624548](458917 call # r[458901] count[458898]))
      (458912 'move' _iterator[458910](458915 call _getIterator call_tmp[624548]))
      Defer
      {
        {
          (458922 call _freeIterator _iterator[458910])
        }
      }
      { scopeless type
        (458926 'move' _indexOfInterest[458908](458929 call iteratorIndex _iterator[458910]))
      }
      ForLoop[458931]
      {
        unknown i[458934] "index var" "insert auto destroy"
        (476061 'end of statement')
        (458936 'move' i[458934] _indexOfInterest[458908])
        (476062 'end of statement' i[458934])
        unknown yret[511352] "YVV" "temp"
        (511355 'move' yret[511352](511354 'deref' i[458934]))
        (511357 yield yret[511352])
        (476064 'end of statement' i[458934])
        label _continueLabel[458941]
        _indexOfInterest[458908]
        _iterator[458910]
      }
      label _breakLabel[458943]
    }
    (511350 return ret[511348])
  }
  function chpl_direct_counted_range_iter[458827](arg low[458831]:enum[187](?), arg count[458838] :
  (458835 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511361] "RVV" "temp"
    unknown call_tmp[624553] "maybe param" "maybe type" "temp"
    (624556 'move' call_tmp[624553](458843 call chpl_build_low_bounded_range low[458831]))
    const r[458841] "dead at end of block" "const" "insert auto destroy"
    (541277 'init var' r[458841] call_tmp[624553])
    (458846 'end of statement')
    {
      unknown _indexOfInterest[458848] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458850] "expr temp" "temp"
      unknown call_tmp[624558] "expr temp" "maybe param" "maybe type" "temp"
      (624561 'move' call_tmp[624558](458857 call # r[458841] count[458838]))
      (458852 'move' _iterator[458850](458855 call _getIterator call_tmp[624558]))
      Defer
      {
        {
          (458862 call _freeIterator _iterator[458850])
        }
      }
      { scopeless type
        (458866 'move' _indexOfInterest[458848](458869 call iteratorIndex _iterator[458850]))
      }
      ForLoop[458871]
      {
        unknown i[458874] "index var" "insert auto destroy"
        (476067 'end of statement')
        (458876 'move' i[458874] _indexOfInterest[458848])
        (476068 'end of statement' i[458874])
        unknown yret[511365] "YVV" "temp"
        (511368 'move' yret[511365](511367 'deref' i[458874]))
        (511370 yield yret[511365])
        (476070 'end of statement' i[458874])
        label _continueLabel[458881]
        _indexOfInterest[458848]
        _iterator[458850]
      }
      label _breakLabel[458883]
    }
    (511363 return ret[511361])
  }
  function chpl_direct_counted_range_iter[458767](arg low[458771]:enum[187](?), arg count[458778] :
  (458775 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511374] "RVV" "temp"
    unknown call_tmp[624563] "maybe param" "maybe type" "temp"
    (624566 'move' call_tmp[624563](458783 call chpl_build_low_bounded_range low[458771]))
    const r[458781] "dead at end of block" "const" "insert auto destroy"
    (541279 'init var' r[458781] call_tmp[624563])
    (458786 'end of statement')
    {
      unknown _indexOfInterest[458788] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458790] "expr temp" "temp"
      unknown call_tmp[624568] "expr temp" "maybe param" "maybe type" "temp"
      (624571 'move' call_tmp[624568](458797 call # r[458781] count[458778]))
      (458792 'move' _iterator[458790](458795 call _getIterator call_tmp[624568]))
      Defer
      {
        {
          (458802 call _freeIterator _iterator[458790])
        }
      }
      { scopeless type
        (458806 'move' _indexOfInterest[458788](458809 call iteratorIndex _iterator[458790]))
      }
      ForLoop[458811]
      {
        unknown i[458814] "index var" "insert auto destroy"
        (476073 'end of statement')
        (458816 'move' i[458814] _indexOfInterest[458788])
        (476074 'end of statement' i[458814])
        unknown yret[511378] "YVV" "temp"
        (511381 'move' yret[511378](511380 'deref' i[458814]))
        (511383 yield yret[511378])
        (476076 'end of statement' i[458814])
        label _continueLabel[458821]
        _indexOfInterest[458788]
        _iterator[458790]
      }
      label _breakLabel[458823]
    }
    (511376 return ret[511374])
  }
  function chpl_direct_counted_range_iter[459187](arg low[459191]:enum[187](?), arg count[459198] :
  (459195 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511387] "RVV" "temp"
    unknown call_tmp[624573] "maybe param" "maybe type" "temp"
    (624576 'move' call_tmp[624573](459203 call chpl_build_low_bounded_range low[459191]))
    const r[459201] "dead at end of block" "const" "insert auto destroy"
    (541281 'init var' r[459201] call_tmp[624573])
    (459206 'end of statement')
    {
      unknown _indexOfInterest[459208] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459210] "expr temp" "temp"
      unknown call_tmp[624578] "expr temp" "maybe param" "maybe type" "temp"
      (624581 'move' call_tmp[624578](459217 call # r[459201] count[459198]))
      (459212 'move' _iterator[459210](459215 call _getIterator call_tmp[624578]))
      Defer
      {
        {
          (459222 call _freeIterator _iterator[459210])
        }
      }
      { scopeless type
        (459226 'move' _indexOfInterest[459208](459229 call iteratorIndex _iterator[459210]))
      }
      ForLoop[459231]
      {
        unknown i[459234] "index var" "insert auto destroy"
        (476079 'end of statement')
        (459236 'move' i[459234] _indexOfInterest[459208])
        (476080 'end of statement' i[459234])
        unknown yret[511391] "YVV" "temp"
        (511394 'move' yret[511391](511393 'deref' i[459234]))
        (511396 yield yret[511391])
        (476082 'end of statement' i[459234])
        label _continueLabel[459241]
        _indexOfInterest[459208]
        _iterator[459210]
      }
      label _breakLabel[459243]
    }
    (511389 return ret[511387])
  }
  function chpl_direct_counted_range_iter[459127](arg low[459131]:enum[187](?), arg count[459138] :
  (459135 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511400] "RVV" "temp"
    unknown call_tmp[624583] "maybe param" "maybe type" "temp"
    (624586 'move' call_tmp[624583](459143 call chpl_build_low_bounded_range low[459131]))
    const r[459141] "dead at end of block" "const" "insert auto destroy"
    (541283 'init var' r[459141] call_tmp[624583])
    (459146 'end of statement')
    {
      unknown _indexOfInterest[459148] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459150] "expr temp" "temp"
      unknown call_tmp[624588] "expr temp" "maybe param" "maybe type" "temp"
      (624591 'move' call_tmp[624588](459157 call # r[459141] count[459138]))
      (459152 'move' _iterator[459150](459155 call _getIterator call_tmp[624588]))
      Defer
      {
        {
          (459162 call _freeIterator _iterator[459150])
        }
      }
      { scopeless type
        (459166 'move' _indexOfInterest[459148](459169 call iteratorIndex _iterator[459150]))
      }
      ForLoop[459171]
      {
        unknown i[459174] "index var" "insert auto destroy"
        (476085 'end of statement')
        (459176 'move' i[459174] _indexOfInterest[459148])
        (476086 'end of statement' i[459174])
        unknown yret[511404] "YVV" "temp"
        (511407 'move' yret[511404](511406 'deref' i[459174]))
        (511409 yield yret[511404])
        (476088 'end of statement' i[459174])
        label _continueLabel[459181]
        _indexOfInterest[459148]
        _iterator[459150]
      }
      label _breakLabel[459183]
    }
    (511402 return ret[511400])
  }
  function chpl_direct_counted_range_iter[459067](arg low[459071]:enum[187](?), arg count[459078] :
  (459075 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511413] "RVV" "temp"
    unknown call_tmp[624593] "maybe param" "maybe type" "temp"
    (624596 'move' call_tmp[624593](459083 call chpl_build_low_bounded_range low[459071]))
    const r[459081] "dead at end of block" "const" "insert auto destroy"
    (541285 'init var' r[459081] call_tmp[624593])
    (459086 'end of statement')
    {
      unknown _indexOfInterest[459088] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459090] "expr temp" "temp"
      unknown call_tmp[624598] "expr temp" "maybe param" "maybe type" "temp"
      (624601 'move' call_tmp[624598](459097 call # r[459081] count[459078]))
      (459092 'move' _iterator[459090](459095 call _getIterator call_tmp[624598]))
      Defer
      {
        {
          (459102 call _freeIterator _iterator[459090])
        }
      }
      { scopeless type
        (459106 'move' _indexOfInterest[459088](459109 call iteratorIndex _iterator[459090]))
      }
      ForLoop[459111]
      {
        unknown i[459114] "index var" "insert auto destroy"
        (476091 'end of statement')
        (459116 'move' i[459114] _indexOfInterest[459088])
        (476092 'end of statement' i[459114])
        unknown yret[511417] "YVV" "temp"
        (511420 'move' yret[511417](511419 'deref' i[459114]))
        (511422 yield yret[511417])
        (476094 'end of statement' i[459114])
        label _continueLabel[459121]
        _indexOfInterest[459088]
        _iterator[459090]
      }
      label _breakLabel[459123]
    }
    (511415 return ret[511413])
  }
  function chpl_direct_counted_range_iter[459007](arg low[459011]:enum[187](?), arg count[459018] :
  (459015 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511426] "RVV" "temp"
    unknown call_tmp[624603] "maybe param" "maybe type" "temp"
    (624606 'move' call_tmp[624603](459023 call chpl_build_low_bounded_range low[459011]))
    const r[459021] "dead at end of block" "const" "insert auto destroy"
    (541287 'init var' r[459021] call_tmp[624603])
    (459026 'end of statement')
    {
      unknown _indexOfInterest[459028] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459030] "expr temp" "temp"
      unknown call_tmp[624608] "expr temp" "maybe param" "maybe type" "temp"
      (624611 'move' call_tmp[624608](459037 call # r[459021] count[459018]))
      (459032 'move' _iterator[459030](459035 call _getIterator call_tmp[624608]))
      Defer
      {
        {
          (459042 call _freeIterator _iterator[459030])
        }
      }
      { scopeless type
        (459046 'move' _indexOfInterest[459028](459049 call iteratorIndex _iterator[459030]))
      }
      ForLoop[459051]
      {
        unknown i[459054] "index var" "insert auto destroy"
        (476097 'end of statement')
        (459056 'move' i[459054] _indexOfInterest[459028])
        (476098 'end of statement' i[459054])
        unknown yret[511430] "YVV" "temp"
        (511433 'move' yret[511430](511432 'deref' i[459054]))
        (511435 yield yret[511430])
        (476100 'end of statement' i[459054])
        label _continueLabel[459061]
        _indexOfInterest[459028]
        _iterator[459030]
      }
      label _breakLabel[459063]
    }
    (511428 return ret[511426])
  }
  function chpl_direct_counted_range_iter[459427](arg low[459431]:bool[10], arg count[459438] :
  (459435 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511439] "RVV" "temp"
    unknown call_tmp[624613] "maybe param" "maybe type" "temp"
    (624616 'move' call_tmp[624613](459443 call chpl_build_low_bounded_range low[459431]))
    const r[459441] "dead at end of block" "const" "insert auto destroy"
    (541289 'init var' r[459441] call_tmp[624613])
    (459446 'end of statement')
    {
      unknown _indexOfInterest[459448] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459450] "expr temp" "temp"
      unknown call_tmp[624618] "expr temp" "maybe param" "maybe type" "temp"
      (624621 'move' call_tmp[624618](459457 call # r[459441] count[459438]))
      (459452 'move' _iterator[459450](459455 call _getIterator call_tmp[624618]))
      Defer
      {
        {
          (459462 call _freeIterator _iterator[459450])
        }
      }
      { scopeless type
        (459466 'move' _indexOfInterest[459448](459469 call iteratorIndex _iterator[459450]))
      }
      ForLoop[459471]
      {
        unknown i[459474] "index var" "insert auto destroy"
        (476103 'end of statement')
        (459476 'move' i[459474] _indexOfInterest[459448])
        (476104 'end of statement' i[459474])
        unknown yret[511443] "YVV" "temp"
        (511446 'move' yret[511443](511445 'deref' i[459474]))
        (511448 yield yret[511443])
        (476106 'end of statement' i[459474])
        label _continueLabel[459481]
        _indexOfInterest[459448]
        _iterator[459450]
      }
      label _breakLabel[459483]
    }
    (511441 return ret[511439])
  }
  function chpl_direct_counted_range_iter[459367](arg low[459371]:bool[10], arg count[459378] :
  (459375 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511452] "RVV" "temp"
    unknown call_tmp[624623] "maybe param" "maybe type" "temp"
    (624626 'move' call_tmp[624623](459383 call chpl_build_low_bounded_range low[459371]))
    const r[459381] "dead at end of block" "const" "insert auto destroy"
    (541291 'init var' r[459381] call_tmp[624623])
    (459386 'end of statement')
    {
      unknown _indexOfInterest[459388] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459390] "expr temp" "temp"
      unknown call_tmp[624628] "expr temp" "maybe param" "maybe type" "temp"
      (624631 'move' call_tmp[624628](459397 call # r[459381] count[459378]))
      (459392 'move' _iterator[459390](459395 call _getIterator call_tmp[624628]))
      Defer
      {
        {
          (459402 call _freeIterator _iterator[459390])
        }
      }
      { scopeless type
        (459406 'move' _indexOfInterest[459388](459409 call iteratorIndex _iterator[459390]))
      }
      ForLoop[459411]
      {
        unknown i[459414] "index var" "insert auto destroy"
        (476109 'end of statement')
        (459416 'move' i[459414] _indexOfInterest[459388])
        (476110 'end of statement' i[459414])
        unknown yret[511456] "YVV" "temp"
        (511459 'move' yret[511456](511458 'deref' i[459414]))
        (511461 yield yret[511456])
        (476112 'end of statement' i[459414])
        label _continueLabel[459421]
        _indexOfInterest[459388]
        _iterator[459390]
      }
      label _breakLabel[459423]
    }
    (511454 return ret[511452])
  }
  function chpl_direct_counted_range_iter[459307](arg low[459311]:bool[10], arg count[459318] :
  (459315 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511465] "RVV" "temp"
    unknown call_tmp[624633] "maybe param" "maybe type" "temp"
    (624636 'move' call_tmp[624633](459323 call chpl_build_low_bounded_range low[459311]))
    const r[459321] "dead at end of block" "const" "insert auto destroy"
    (541293 'init var' r[459321] call_tmp[624633])
    (459326 'end of statement')
    {
      unknown _indexOfInterest[459328] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459330] "expr temp" "temp"
      unknown call_tmp[624638] "expr temp" "maybe param" "maybe type" "temp"
      (624641 'move' call_tmp[624638](459337 call # r[459321] count[459318]))
      (459332 'move' _iterator[459330](459335 call _getIterator call_tmp[624638]))
      Defer
      {
        {
          (459342 call _freeIterator _iterator[459330])
        }
      }
      { scopeless type
        (459346 'move' _indexOfInterest[459328](459349 call iteratorIndex _iterator[459330]))
      }
      ForLoop[459351]
      {
        unknown i[459354] "index var" "insert auto destroy"
        (476115 'end of statement')
        (459356 'move' i[459354] _indexOfInterest[459328])
        (476116 'end of statement' i[459354])
        unknown yret[511469] "YVV" "temp"
        (511472 'move' yret[511469](511471 'deref' i[459354]))
        (511474 yield yret[511469])
        (476118 'end of statement' i[459354])
        label _continueLabel[459361]
        _indexOfInterest[459328]
        _iterator[459330]
      }
      label _breakLabel[459363]
    }
    (511467 return ret[511465])
  }
  function chpl_direct_counted_range_iter[459247](arg low[459251]:bool[10], arg count[459258] :
  (459255 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511478] "RVV" "temp"
    unknown call_tmp[624643] "maybe param" "maybe type" "temp"
    (624646 'move' call_tmp[624643](459263 call chpl_build_low_bounded_range low[459251]))
    const r[459261] "dead at end of block" "const" "insert auto destroy"
    (541295 'init var' r[459261] call_tmp[624643])
    (459266 'end of statement')
    {
      unknown _indexOfInterest[459268] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459270] "expr temp" "temp"
      unknown call_tmp[624648] "expr temp" "maybe param" "maybe type" "temp"
      (624651 'move' call_tmp[624648](459277 call # r[459261] count[459258]))
      (459272 'move' _iterator[459270](459275 call _getIterator call_tmp[624648]))
      Defer
      {
        {
          (459282 call _freeIterator _iterator[459270])
        }
      }
      { scopeless type
        (459286 'move' _indexOfInterest[459268](459289 call iteratorIndex _iterator[459270]))
      }
      ForLoop[459291]
      {
        unknown i[459294] "index var" "insert auto destroy"
        (476121 'end of statement')
        (459296 'move' i[459294] _indexOfInterest[459268])
        (476122 'end of statement' i[459294])
        unknown yret[511482] "YVV" "temp"
        (511485 'move' yret[511482](511484 'deref' i[459294]))
        (511487 yield yret[511482])
        (476124 'end of statement' i[459294])
        label _continueLabel[459301]
        _indexOfInterest[459268]
        _iterator[459270]
      }
      label _breakLabel[459303]
    }
    (511480 return ret[511478])
  }
  function chpl_direct_counted_range_iter[459667](arg low[459671]:bool[10], arg count[459678] :
  (459675 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511491] "RVV" "temp"
    unknown call_tmp[624653] "maybe param" "maybe type" "temp"
    (624656 'move' call_tmp[624653](459683 call chpl_build_low_bounded_range low[459671]))
    const r[459681] "dead at end of block" "const" "insert auto destroy"
    (541297 'init var' r[459681] call_tmp[624653])
    (459686 'end of statement')
    {
      unknown _indexOfInterest[459688] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459690] "expr temp" "temp"
      unknown call_tmp[624658] "expr temp" "maybe param" "maybe type" "temp"
      (624661 'move' call_tmp[624658](459697 call # r[459681] count[459678]))
      (459692 'move' _iterator[459690](459695 call _getIterator call_tmp[624658]))
      Defer
      {
        {
          (459702 call _freeIterator _iterator[459690])
        }
      }
      { scopeless type
        (459706 'move' _indexOfInterest[459688](459709 call iteratorIndex _iterator[459690]))
      }
      ForLoop[459711]
      {
        unknown i[459714] "index var" "insert auto destroy"
        (476127 'end of statement')
        (459716 'move' i[459714] _indexOfInterest[459688])
        (476128 'end of statement' i[459714])
        unknown yret[511495] "YVV" "temp"
        (511498 'move' yret[511495](511497 'deref' i[459714]))
        (511500 yield yret[511495])
        (476130 'end of statement' i[459714])
        label _continueLabel[459721]
        _indexOfInterest[459688]
        _iterator[459690]
      }
      label _breakLabel[459723]
    }
    (511493 return ret[511491])
  }
  function chpl_direct_counted_range_iter[459607](arg low[459611]:bool[10], arg count[459618] :
  (459615 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511504] "RVV" "temp"
    unknown call_tmp[624663] "maybe param" "maybe type" "temp"
    (624666 'move' call_tmp[624663](459623 call chpl_build_low_bounded_range low[459611]))
    const r[459621] "dead at end of block" "const" "insert auto destroy"
    (541299 'init var' r[459621] call_tmp[624663])
    (459626 'end of statement')
    {
      unknown _indexOfInterest[459628] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459630] "expr temp" "temp"
      unknown call_tmp[624668] "expr temp" "maybe param" "maybe type" "temp"
      (624671 'move' call_tmp[624668](459637 call # r[459621] count[459618]))
      (459632 'move' _iterator[459630](459635 call _getIterator call_tmp[624668]))
      Defer
      {
        {
          (459642 call _freeIterator _iterator[459630])
        }
      }
      { scopeless type
        (459646 'move' _indexOfInterest[459628](459649 call iteratorIndex _iterator[459630]))
      }
      ForLoop[459651]
      {
        unknown i[459654] "index var" "insert auto destroy"
        (476133 'end of statement')
        (459656 'move' i[459654] _indexOfInterest[459628])
        (476134 'end of statement' i[459654])
        unknown yret[511508] "YVV" "temp"
        (511511 'move' yret[511508](511510 'deref' i[459654]))
        (511513 yield yret[511508])
        (476136 'end of statement' i[459654])
        label _continueLabel[459661]
        _indexOfInterest[459628]
        _iterator[459630]
      }
      label _breakLabel[459663]
    }
    (511506 return ret[511504])
  }
  function chpl_direct_counted_range_iter[459547](arg low[459551]:bool[10], arg count[459558] :
  (459555 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511517] "RVV" "temp"
    unknown call_tmp[624673] "maybe param" "maybe type" "temp"
    (624676 'move' call_tmp[624673](459563 call chpl_build_low_bounded_range low[459551]))
    const r[459561] "dead at end of block" "const" "insert auto destroy"
    (541301 'init var' r[459561] call_tmp[624673])
    (459566 'end of statement')
    {
      unknown _indexOfInterest[459568] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459570] "expr temp" "temp"
      unknown call_tmp[624678] "expr temp" "maybe param" "maybe type" "temp"
      (624681 'move' call_tmp[624678](459577 call # r[459561] count[459558]))
      (459572 'move' _iterator[459570](459575 call _getIterator call_tmp[624678]))
      Defer
      {
        {
          (459582 call _freeIterator _iterator[459570])
        }
      }
      { scopeless type
        (459586 'move' _indexOfInterest[459568](459589 call iteratorIndex _iterator[459570]))
      }
      ForLoop[459591]
      {
        unknown i[459594] "index var" "insert auto destroy"
        (476139 'end of statement')
        (459596 'move' i[459594] _indexOfInterest[459568])
        (476140 'end of statement' i[459594])
        unknown yret[511521] "YVV" "temp"
        (511524 'move' yret[511521](511523 'deref' i[459594]))
        (511526 yield yret[511521])
        (476142 'end of statement' i[459594])
        label _continueLabel[459601]
        _indexOfInterest[459568]
        _iterator[459570]
      }
      label _breakLabel[459603]
    }
    (511519 return ret[511517])
  }
  function chpl_direct_counted_range_iter[459487](arg low[459491]:bool[10], arg count[459498] :
  (459495 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511530] "RVV" "temp"
    unknown call_tmp[624683] "maybe param" "maybe type" "temp"
    (624686 'move' call_tmp[624683](459503 call chpl_build_low_bounded_range low[459491]))
    const r[459501] "dead at end of block" "const" "insert auto destroy"
    (541303 'init var' r[459501] call_tmp[624683])
    (459506 'end of statement')
    {
      unknown _indexOfInterest[459508] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459510] "expr temp" "temp"
      unknown call_tmp[624688] "expr temp" "maybe param" "maybe type" "temp"
      (624691 'move' call_tmp[624688](459517 call # r[459501] count[459498]))
      (459512 'move' _iterator[459510](459515 call _getIterator call_tmp[624688]))
      Defer
      {
        {
          (459522 call _freeIterator _iterator[459510])
        }
      }
      { scopeless type
        (459526 'move' _indexOfInterest[459508](459529 call iteratorIndex _iterator[459510]))
      }
      ForLoop[459531]
      {
        unknown i[459534] "index var" "insert auto destroy"
        (476145 'end of statement')
        (459536 'move' i[459534] _indexOfInterest[459508])
        (476146 'end of statement' i[459534])
        unknown yret[511534] "YVV" "temp"
        (511537 'move' yret[511534](511536 'deref' i[459534]))
        (511539 yield yret[511534])
        (476148 'end of statement' i[459534])
        label _continueLabel[459541]
        _indexOfInterest[459508]
        _iterator[459510]
      }
      label _breakLabel[459543]
    }
    (511532 return ret[511530])
  }
  function chpl_direct_counted_range_iter[75223](arg low[75220]:integral[199](?), arg count[75225]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511543] "RVV" "temp"
    unknown call_tmp[624693] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624696 'move' call_tmp[624693](75231 'typeof' low[75220]))
    unknown call_tmp[624698] "expr temp" "maybe param" "maybe type" "temp"
    (624701 'move' call_tmp[624698](75233 call _cast string[26] call_tmp[624693]))
    unknown call_tmp[624703] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624706 'move' call_tmp[624703](75237 'typeof' count[75225]))
    unknown call_tmp[624708] "expr temp" "maybe param" "maybe type" "temp"
    (624711 'move' call_tmp[624708](75239 call _cast string[26] call_tmp[624703]))
    (75241 call compilerError "can't apply '#' to a range with idxType " call_tmp[624698] " using a count of type " call_tmp[624708])
    (511545 return ret[511543])
  }
  function chpl_direct_counted_range_iter[75250](arg low[75248]:_any[178](?), arg count[75252]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511549] "RVV" "temp"
    (75257 call compilerError "Bound of 'low..' must be an integer")
    (511551 return ret[511549])
  }
  function chpl_direct_counted_range_iter_helper[75266](arg low[75264]:_any[178](?), arg count[75268]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511555] "RVV" "temp"
    unknown tmp[420685] "maybe param" "temp"
    unknown tmp[420706] "maybe param" "temp"
    (420717 'move' tmp[420706] 1)
    unknown call_tmp[624713] "expr temp" "maybe param" "maybe type" "temp"
    (624716 'move' call_tmp[624713](420719 call _cond_invalid tmp[420706]))
    if call_tmp[624713]
    {
      (420722 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558312] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558313] "maybe param" "temp"
    unknown call_tmp[624718] "expr temp" "maybe param" "maybe type" "temp"
    (624721 'move' call_tmp[624718](420707 call isTrue tmp[420706]))
    (558318 'move' tmp[558313](558316 call _cond_test call_tmp[624718]))
    if tmp[558313]
    {
      unknown tmp[558320] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624723] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624726 'move' call_tmp[624723](75273 'typeof' count[75268]))
      unknown call_tmp[624728] "expr temp" "maybe param" "maybe type" "temp"
      (624731 'move' call_tmp[624728](75275 call isIntType call_tmp[624723]))
      (558322 'move' tmp[558320](420710 call isTrue call_tmp[624728]))
      (558327 'move' tmp[558312](558324 '_paramFoldLogical' tmp[558313] tmp[558320]))
    }
    {
      (558332 'move' tmp[558312](558329 '_paramFoldLogical' tmp[558313] 0))
    }
    (420696 'move' tmp[420685] tmp[558312])
    unknown call_tmp[624733] "expr temp" "maybe param" "maybe type" "temp"
    (624736 'move' call_tmp[624733](420698 call _cond_invalid tmp[420685]))
    if call_tmp[624733]
    {
      (420701 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558339] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558340] "maybe param" "temp"
    unknown call_tmp[624738] "expr temp" "maybe param" "maybe type" "temp"
    (624741 'move' call_tmp[624738](420686 call isTrue tmp[420685]))
    (558345 'move' tmp[558340](558343 call _cond_test call_tmp[624738]))
    if tmp[558340]
    {
      unknown tmp[558347] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624743] "expr temp" "maybe param" "maybe type" "temp"
      (624746 'move' call_tmp[624743](75280 call < count[75268] 0))
      (558349 'move' tmp[558347](420689 call isTrue call_tmp[624743]))
      (558354 'move' tmp[558339](558351 '_paramFoldLogical' tmp[558340] tmp[558347]))
    }
    {
      (558359 'move' tmp[558339](558356 '_paramFoldLogical' tmp[558340] 0))
    }
    unknown call_tmp[624748] "expr temp" "maybe param" "maybe type" "temp"
    (624751 'move' call_tmp[624748](75292 call _cond_test tmp[558339]))
    if call_tmp[624748]
    {
      (75290 call boundsCheckHalt module=[255] HaltWrappers[210018] "With a negative count, the range must have a last index.")
      (357998 'referenced modules list' HaltWrappers[210018])
    }
    const tmp[75340] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[558366] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558367] "maybe param" "temp"
    unknown call_tmp[624753] "expr temp" "maybe param" "maybe type" "temp"
    (624756 'move' call_tmp[624753](75305 call == count[75268] 0))
    (558372 'move' tmp[558367](558370 call _cond_test call_tmp[624753]))
    if tmp[558367]
    {
      unknown tmp[558374] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624758] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624761 'move' call_tmp[624758](75316 'typeof' low[75264]))
      unknown call_tmp[624763] "expr temp" "maybe param" "maybe type" "temp"
      (624766 'move' call_tmp[624763](75310 call _cast uint(64)[115] low[75264]))
      unknown call_tmp[624768] "expr temp" "maybe param" "maybe type" "temp"
      (624771 'move' call_tmp[624768](75313 call - call_tmp[624763] 1))
      unknown call_tmp[624773] "expr temp" "maybe param" "maybe type" "temp"
      (624776 'move' call_tmp[624773](75317 call _cast call_tmp[624758] call_tmp[624768]))
      (558376 'move' tmp[558374](75320 call _build_tuple low[75264] call_tmp[624773]))
      (558381 'move' tmp[558366](558378 '_paramFoldLogical' tmp[558367] tmp[558374]))
    }
    {
      unknown tmp[558383] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624778] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624781 'move' call_tmp[624778](75326 'typeof' low[75264]))
      unknown call_tmp[624783] "expr temp" "maybe param" "maybe type" "temp"
      (624786 'move' call_tmp[624783](75327 call _cast call_tmp[624778] count[75268]))
      unknown call_tmp[624788] "expr temp" "maybe param" "maybe type" "temp"
      (624791 'move' call_tmp[624788](75330 call - call_tmp[624783] 1))
      unknown call_tmp[624793] "expr temp" "maybe param" "maybe type" "temp"
      (624796 'move' call_tmp[624793](75332 call + low[75264] call_tmp[624788]))
      (558385 'move' tmp[558383](75335 call _build_tuple low[75264] call_tmp[624793]))
      (558390 'move' tmp[558366](558387 '_paramFoldLogical' tmp[558367] tmp[558383]))
    }
    (541305 'init var' tmp[75340] tmp[558366])
    (75347 call _check_tuple_var_decl tmp[75340] 2)
    (476155 'end of statement')
    unknown call_tmp[624798] "maybe param" "maybe type" "temp"
    (624801 'move' call_tmp[624798](75341 call tmp[75340] 0))
    const start[75298] "dead at end of block" "const" "insert auto destroy"
    (541307 'init var' start[75298] call_tmp[624798])
    unknown call_tmp[624803] "maybe param" "maybe type" "temp"
    (624806 'move' call_tmp[624803](75344 call tmp[75340] 1))
    const end[75300] "dead at end of block" "const" "insert auto destroy"
    (541309 'init var' end[75300] call_tmp[624803])
    (75352 'end of statement')
    {
      unknown _indexOfInterest[75363] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[75364] "expr temp" "temp"
      unknown call_tmp[624808] "expr temp" "maybe param" "maybe type" "temp"
      (624811 'move' call_tmp[624808](75359 call chpl_direct_param_stride_range_iter start[75298] end[75300] 1))
      (75373 'move' _iterator[75364](75371 call _getIterator call_tmp[624808]))
      Defer
      {
        {
          (75390 call _freeIterator _iterator[75364])
        }
      }
      { scopeless type
        (75379 'move' _indexOfInterest[75363](75376 call iteratorIndex _iterator[75364]))
      }
      ForLoop[75365]
      {
        unknown i[75383] "index var" "insert auto destroy"
        (476157 'end of statement')
        (75385 'move' i[75383] _indexOfInterest[75363])
        (476158 'end of statement' i[75383])
        unknown yret[511559] "YVV" "temp"
        (511562 'move' yret[511559](511561 'deref' i[75383]))
        (511564 yield yret[511559])
        (476160 'end of statement' i[75383])
        label _continueLabel[75368]
        _indexOfInterest[75363]
        _iterator[75364]
      }
      label _breakLabel[75369]
    }
    (511557 return ret[511555])
  }
  function chpl_direct_pos_stride_range_iter[75406](arg low[75403]:_any[178](?), arg high[75408]:_any[178](?), arg stride[75410]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511568] "RVV" "temp"
    unknown call_tmp[624813] "expr temp" "maybe param" "maybe type" "temp"
    (624816 'move' call_tmp[624813](75554 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[624813]
    {
      unknown call_tmp[624818] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624821 'move' call_tmp[624818](459727 'typeof' low[75403]))
      (75417 call chpl_range_check_stride stride[75410] call_tmp[624818])
      (476162 'end of statement')
      unknown call_tmp[624823] "expr temp" "maybe param" "maybe type" "temp"
      (624826 'move' call_tmp[624823](75429 call _cond_test 1))
      if call_tmp[624823]
      {
        unknown call_tmp[624828] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (624831 'move' call_tmp[624828](459729 'typeof' low[75403]))
        (75427 call chpl_checkIfRangeIterWillOverflow call_tmp[624828] low[75403] high[75408] stride[75410])
      }
      unknown i[75435] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624833] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624836 'move' call_tmp[624833](459731 'typeof' low[75403]))
      (541311 'default init var' i[75435] call_tmp[624833])
      (75438 'end of statement')
      CForLoop[75481]
      {
        {
          unknown yret[511572] "YVV" "temp"
          (511575 'move' yret[511572](511574 'deref' i[75435]))
          (511577 yield yret[511572])
          (476164 'end of statement' i[75435])
        }
        label _continueLabel[75497]
        {
          (75482 '=' i[75435] low[75403])
          (476166 'end of statement' i[75435])
        }
        {
          (75485 '<=' i[75435] high[75408])
          (476168 'end of statement' i[75435])
        }
        {
          unknown call_tmp[624838] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624841 'move' call_tmp[624838](459733 'typeof' low[75403]))
          unknown call_tmp[624843] "expr temp" "maybe param" "maybe type" "temp"
          (624846 'move' call_tmp[624843](75491 call _cast call_tmp[624838] stride[75410]))
          (75488 '+=' i[75435] call_tmp[624843])
          (476170 'end of statement' i[75435])
        }
      }
      label _breakLabel[75498]
    }
    {
      {
        unknown _indexOfInterest[75519] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75520] "expr temp" "temp"
        unknown call_tmp[624848] "expr temp" "maybe param" "maybe type" "temp"
        (624851 'move' call_tmp[624848](75504 call chpl_build_bounded_range low[75403] high[75408]))
        unknown call_tmp[624853] "expr temp" "maybe param" "maybe type" "temp"
        (624856 'move' call_tmp[624853](75507 call chpl_by call_tmp[624848] stride[75410]))
        unknown call_tmp[624860] "expr temp" "maybe param" "maybe type" "temp"
        (624863 'move' call_tmp[624860](75515 call(75511 call (partial) generalIterator _mt[243] call_tmp[624853])))
        (75529 'move' _iterator[75520](75527 call _getIterator call_tmp[624860]))
        Defer
        {
          {
            (75546 call _freeIterator _iterator[75520])
          }
        }
        { scopeless type
          (75535 'move' _indexOfInterest[75519](75532 call iteratorIndex _iterator[75520]))
        }
        ForLoop[75521]
        {
          unknown i[75539] "index var" "insert auto destroy"
          (476173 'end of statement')
          (75541 'move' i[75539] _indexOfInterest[75519])
          (476174 'end of statement' i[75539])
          unknown yret[511579] "YVV" "temp"
          (511582 'move' yret[511579](511581 'deref' i[75539]))
          (511584 yield yret[511579])
          (476176 'end of statement' i[75539])
          label _continueLabel[75524]
          _indexOfInterest[75519]
          _iterator[75520]
        }
        label _breakLabel[75525]
      }
    }
    (511570 return ret[511568])
  }
  function chpl_direct_param_stride_range_iter[75568](arg low[75565]:_any[178](?), arg high[75570]:_any[178](?), param arg stride[75572]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511588] "RVV" "temp"
    unknown call_tmp[624865] "expr temp" "maybe param" "maybe type" "temp"
    (624868 'move' call_tmp[624865](75779 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[624865]
    {
      unknown call_tmp[624870] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624873 'move' call_tmp[624870](459735 'typeof' low[75565]))
      (75579 call chpl_range_check_stride stride[75572] call_tmp[624870])
      (476178 'end of statement')
      unknown i[75583] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624875] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624878 'move' call_tmp[624875](459737 'typeof' low[75565]))
      (541313 'default init var' i[75583] call_tmp[624875])
      (75586 'end of statement')
      unknown call_tmp[624880] "expr temp" "maybe param" "maybe type" "temp"
      (624883 'move' call_tmp[624880](75589 call > stride[75572] 0))
      unknown call_tmp[624885] "expr temp" "maybe param" "maybe type" "temp"
      (624888 'move' call_tmp[624885](75723 call _cond_test call_tmp[624880]))
      if call_tmp[624885]
      {
        unknown call_tmp[624890] "expr temp" "maybe param" "maybe type" "temp"
        (624893 'move' call_tmp[624890](75600 call _cond_test 1))
        if call_tmp[624890]
        {
          unknown call_tmp[624895] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624898 'move' call_tmp[624895](459739 'typeof' low[75565]))
          (75598 call chpl_checkIfRangeIterWillOverflow call_tmp[624895] low[75565] high[75570] stride[75572])
        }
        CForLoop[75632]
        {
          {
            unknown yret[511592] "YVV" "temp"
            (511595 'move' yret[511592](511594 'deref' i[75583]))
            (511597 yield yret[511592])
            (476180 'end of statement' i[75583])
          }
          label _continueLabel[75648]
          {
            (75633 '=' i[75583] low[75565])
            (476182 'end of statement' i[75583])
          }
          {
            (75636 '<=' i[75583] high[75570])
            (476184 'end of statement' i[75583])
          }
          {
            unknown call_tmp[624900] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624903 'move' call_tmp[624900](459741 'typeof' low[75565]))
            unknown call_tmp[624905] "expr temp" "maybe param" "maybe type" "temp"
            (624908 'move' call_tmp[624905](75642 call _cast call_tmp[624900] stride[75572]))
            (75639 '+=' i[75583] call_tmp[624905])
            (476186 'end of statement' i[75583])
          }
        }
        label _breakLabel[75649]
      }
      {
        unknown call_tmp[624910] "expr temp" "maybe param" "maybe type" "temp"
        (624913 'move' call_tmp[624910](75654 call < stride[75572] 0))
        unknown call_tmp[624915] "expr temp" "maybe param" "maybe type" "temp"
        (624918 'move' call_tmp[624915](75719 call _cond_test call_tmp[624910]))
        if call_tmp[624915]
        {
          unknown call_tmp[624920] "expr temp" "maybe param" "maybe type" "temp"
          (624923 'move' call_tmp[624920](75667 call _cond_test 1))
          if call_tmp[624920]
          {
            unknown call_tmp[624925] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624928 'move' call_tmp[624925](459743 'typeof' low[75565]))
            (75665 call chpl_checkIfRangeIterWillOverflow call_tmp[624925] low[75565] high[75570] stride[75572] high[75570] low[75565])
          }
          CForLoop[75699]
          {
            {
              unknown yret[511599] "YVV" "temp"
              (511602 'move' yret[511599](511601 'deref' i[75583]))
              (511604 yield yret[511599])
              (476189 'end of statement' i[75583])
            }
            label _continueLabel[75715]
            {
              (75700 '=' i[75583] high[75570])
              (476191 'end of statement' i[75583])
            }
            {
              (75703 '>=' i[75583] low[75565])
              (476193 'end of statement' i[75583])
            }
            {
              unknown call_tmp[624930] "expr temp" "maybe param" "maybe type" "temp" "type variable"
              (624933 'move' call_tmp[624930](459745 'typeof' low[75565]))
              unknown call_tmp[624935] "expr temp" "maybe param" "maybe type" "temp"
              (624938 'move' call_tmp[624935](75709 call _cast call_tmp[624930] stride[75572]))
              (75706 '+=' i[75583] call_tmp[624935])
              (476195 'end of statement' i[75583])
            }
          }
          label _breakLabel[75716]
        }
      }
    }
    {
      {
        unknown _indexOfInterest[75744] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75745] "expr temp" "temp"
        unknown call_tmp[624940] "expr temp" "maybe param" "maybe type" "temp"
        (624943 'move' call_tmp[624940](75731 call chpl_build_bounded_range low[75565] high[75570]))
        unknown call_tmp[624945] "expr temp" "maybe param" "maybe type" "temp"
        (624948 'move' call_tmp[624945](75734 call chpl_by call_tmp[624940] stride[75572]))
        unknown call_tmp[624952] "expr temp" "maybe param" "maybe type" "temp"
        (624955 'move' call_tmp[624952](75740 call(75736 call (partial) generalIterator _mt[243] call_tmp[624945])))
        (75754 'move' _iterator[75745](75752 call _getIterator call_tmp[624952]))
        Defer
        {
          {
            (75771 call _freeIterator _iterator[75745])
          }
        }
        { scopeless type
          (75760 'move' _indexOfInterest[75744](75757 call iteratorIndex _iterator[75745]))
        }
        ForLoop[75746]
        {
          unknown i[75764] "index var" "insert auto destroy"
          (476198 'end of statement')
          (75766 'move' i[75764] _indexOfInterest[75744])
          (476199 'end of statement' i[75764])
          unknown yret[511606] "YVV" "temp"
          (511609 'move' yret[511606](511608 'deref' i[75764]))
          (511611 yield yret[511606])
          (476201 'end of statement' i[75764])
          label _continueLabel[75749]
          _indexOfInterest[75744]
          _iterator[75745]
        }
        label _breakLabel[75750]
      }
    }
    (511590 return ret[511588])
  }
  function range[64319](?).these[75789](arg _mt[75794]:_MT[238], arg this[75791]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511615] "RVV" "temp"
    unknown call_tmp[624959] "expr temp" "maybe param" "maybe type" "temp"
    (624962 'move' call_tmp[624959](375568 call boundedType _mt[243] this[75791]))
    unknown call_tmp[624964] "expr temp" "maybe param" "maybe type" "temp"
    (624967 'move' call_tmp[624964](75808 call == call_tmp[624959] boundedNone[64214]))
    unknown call_tmp[624969] "expr temp" "maybe param" "maybe type" "temp"
    (624972 'move' call_tmp[624969](75831 call _cond_test call_tmp[624964]))
    if call_tmp[624969]
    {
      (75829 call compilerError "iteration over a range with no bounds")
    }
    unknown call_tmp[624974] "expr temp" "maybe param" "maybe type" "temp"
    (624977 'move' call_tmp[624974](75911 call _cond_test 1))
    if call_tmp[624974]
    {
      unknown call_tmp[624981] "expr temp" "maybe param" "maybe type" "temp"
      (624984 'move' call_tmp[624981](75843 call(75839 call (partial) hasFirst _mt[243] this[75791])))
      unknown call_tmp[624986] "expr temp" "maybe param" "maybe type" "temp"
      (624989 'move' call_tmp[624986](75844 call ! call_tmp[624981]))
      unknown call_tmp[624991] "expr temp" "maybe param" "maybe type" "temp"
      (624994 'move' call_tmp[624991](75870 call _cond_test call_tmp[624986]))
      if call_tmp[624991]
      {
        (75868 call boundsCheckHalt module=[255] HaltWrappers[210018] "iteration over range that has no first index")
        (358007 'referenced modules list' HaltWrappers[210018])
      }
      unknown call_tmp[624998] "expr temp" "maybe param" "maybe type" "temp"
      (625001 'move' call_tmp[624998](75881 call(75877 call (partial) isAmbiguous _mt[243] this[75791])))
      unknown call_tmp[625003] "expr temp" "maybe param" "maybe type" "temp"
      (625006 'move' call_tmp[625003](75906 call _cond_test call_tmp[624998]))
      if call_tmp[625003]
      {
        (75904 call boundsCheckHalt module=[255] HaltWrappers[210018] "these -- Attempt to iterate over a range with ambiguous alignment.")
        (358014 'referenced modules list' HaltWrappers[210018])
      }
    }
    unknown i[75916] "dead at end of block" "insert auto destroy"
    unknown call_tmp[625010] "expr temp" "maybe param" "maybe type" "temp"
    (625013 'move' call_tmp[625010](375573 call intIdxType _mt[243] this[75791]))
    (541315 'default init var' i[75916] call_tmp[625010])
    (75919 'end of statement')
    unknown call_tmp[625017] "expr temp" "maybe param" "maybe type" "temp"
    (625020 'move' call_tmp[625017](75922 call first _mt[243] this[75791]))
    unknown call_tmp[625022] "maybe param" "maybe type" "temp"
    (625025 'move' call_tmp[625022](75926 call chpl__idxToInt call_tmp[625017]))
    const start[75927] "dead at end of block" "const" "insert auto destroy"
    (541317 'init var' start[75927] call_tmp[625022])
    (75930 'end of statement')
    CForLoop[75956]
    {
      {
        unknown yret[511619] "YVV" "temp"
        unknown call_tmp[625029] "expr temp" "maybe param" "maybe type" "temp"
        (625032 'move' call_tmp[625029](75951 call(375577 call (partial) chpl_intToIdx _mt[243] this[75791]) i[75916]))
        (511622 'move' yret[511619](511621 'deref' call_tmp[625029]))
        (511624 yield yret[511619])
        (476206 'end of statement' i[75916])
      }
      label _continueLabel[75970]
      {
        (75957 '=' i[75916] start[75927])
        (476208 'end of statement' i[75916] start[75927])
      }
      {
        (748193 call chpl_statementLevelSymbol 1)
      }
      {
        unknown call_tmp[625036] "expr temp" "maybe param" "maybe type" "temp"
        (625039 'move' call_tmp[625036](375585 call intIdxType _mt[243] this[75791]))
        unknown call_tmp[625043] "expr temp" "maybe param" "maybe type" "temp"
        (625046 'move' call_tmp[625043](375589 call stride _mt[243] this[75791]))
        unknown call_tmp[625048] "expr temp" "maybe param" "maybe type" "temp"
        (625051 'move' call_tmp[625048](75964 call _cast call_tmp[625036] call_tmp[625043]))
        (75961 '+=' i[75916] call_tmp[625048])
        (476211 'end of statement' i[75916])
      }
    }
    label _breakLabel[75971]
    (511617 return ret[511615])
  }
  where {
    unknown call_tmp[625055] "expr temp" "maybe param" "maybe type" "temp"
    (625058 'move' call_tmp[625055](375563 call boundedType _mt[243] this[75791]))
    (75801 call != call_tmp[625055] bounded[64208])
  }
  function range[64319](?).these[75980](arg _mt[75985]:_MT[238], arg this[75982]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511628] "RVV" "temp"
    unknown call_tmp[625060] "expr temp" "maybe param" "maybe type" "temp"
    (625063 'move' call_tmp[625060](76167 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[625060]
    {
      unknown call_tmp[625065] "expr temp" "maybe param" "maybe type" "temp"
      (625068 'move' call_tmp[625065](76026 call _cond_test 1))
      if call_tmp[625065]
      {
        (76004 call(375607 call (partial) checkIfIterWillOverflow _mt[243] this[75982]))
        (476213 'end of statement')
        unknown call_tmp[625074] "expr temp" "maybe param" "maybe type" "temp"
        (625077 'move' call_tmp[625074](76012 call(76008 call (partial) isAmbiguous _mt[243] this[75982])))
        unknown call_tmp[625079] "expr temp" "maybe param" "maybe type" "temp"
        (625082 'move' call_tmp[625079](76021 call _cond_test call_tmp[625074]))
        if call_tmp[625079]
        {
          (76019 call boundsCheckHalt module=[255] HaltWrappers[210018] "these -- Attempt to iterate over a range with ambiguous alignment.")
          (358023 'referenced modules list' HaltWrappers[210018])
        }
      }
      unknown i[76032] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625086] "expr temp" "maybe param" "maybe type" "temp"
      (625089 'move' call_tmp[625086](375611 call intIdxType _mt[243] this[75982]))
      (541319 'default init var' i[76032] call_tmp[625086])
      (76035 'end of statement')
      unknown call_tmp[625093] "maybe param" "maybe type" "temp"
      (625096 'move' call_tmp[625093](76037 call firstAsInt _mt[243] this[75982]))
      const start[76040] "dead at end of block" "const" "insert auto destroy"
      (541321 'init var' start[76040] call_tmp[625093])
      (76043 'end of statement')
      const end[76069] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558397] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558398] "maybe param" "temp"
      unknown call_tmp[625100] "expr temp" "maybe param" "maybe type" "temp"
      (625103 'move' call_tmp[625100](76046 call low _mt[243] this[75982]))
      unknown call_tmp[625107] "expr temp" "maybe param" "maybe type" "temp"
      (625110 'move' call_tmp[625107](76050 call high _mt[243] this[75982]))
      unknown call_tmp[625112] "expr temp" "maybe param" "maybe type" "temp"
      (625115 'move' call_tmp[625112](76053 call > call_tmp[625100] call_tmp[625107]))
      (558403 'move' tmp[558398](558401 call _cond_test call_tmp[625112]))
      if tmp[558398]
      {
        (558408 'move' tmp[558397](558405 '_paramFoldLogical' tmp[558398] start[76040]))
      }
      {
        unknown tmp[558410] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[625119] "expr temp" "maybe param" "maybe type" "temp"
        (625122 'move' call_tmp[625119](76057 call lastAsInt _mt[243] this[75982]))
        unknown call_tmp[625126] "expr temp" "maybe param" "maybe type" "temp"
        (625129 'move' call_tmp[625126](375624 call intIdxType _mt[243] this[75982]))
        unknown call_tmp[625133] "expr temp" "maybe param" "maybe type" "temp"
        (625136 'move' call_tmp[625133](375620 call stride _mt[243] this[75982]))
        unknown call_tmp[625138] "expr temp" "maybe param" "maybe type" "temp"
        (625141 'move' call_tmp[625138](76062 call _cast call_tmp[625126] call_tmp[625133]))
        (558412 'move' tmp[558410](76064 call + call_tmp[625119] call_tmp[625138]))
        (558417 'move' tmp[558397](558414 '_paramFoldLogical' tmp[558398] tmp[558410]))
      }
      unknown call_tmp[625145] "maybe param" "maybe type" "temp"
      (625148 'move' call_tmp[625145](375615 call intIdxType _mt[243] this[75982]))
      (541323 'init var' end[76069] tmp[558397] call_tmp[625145])
      (76072 'end of statement' start[76040])
      CForLoop[76102]
      {
        {
          unknown yret[511632] "YVV" "temp"
          unknown call_tmp[625152] "expr temp" "maybe param" "maybe type" "temp"
          (625155 'move' call_tmp[625152](76097 call(375628 call (partial) chpl_intToIdx _mt[243] this[75982]) i[76032]))
          (511635 'move' yret[511632](511634 'deref' call_tmp[625152]))
          (511637 yield yret[511632])
          (476216 'end of statement' i[76032])
        }
        label _continueLabel[76118]
        {
          (76103 '=' i[76032] start[76040])
          (476218 'end of statement' i[76032] start[76040])
        }
        {
          (76106 '!=' i[76032] end[76069])
          (476221 'end of statement' i[76032] end[76069])
        }
        {
          unknown call_tmp[625159] "expr temp" "maybe param" "maybe type" "temp"
          (625162 'move' call_tmp[625159](375638 call intIdxType _mt[243] this[75982]))
          unknown call_tmp[625166] "expr temp" "maybe param" "maybe type" "temp"
          (625169 'move' call_tmp[625166](375642 call stride _mt[243] this[75982]))
          unknown call_tmp[625171] "expr temp" "maybe param" "maybe type" "temp"
          (625174 'move' call_tmp[625171](76112 call _cast call_tmp[625159] call_tmp[625166]))
          (76109 '+=' i[76032] call_tmp[625171])
          (476224 'end of statement' i[76032])
        }
      }
      label _breakLabel[76119]
    }
    {
      {
        unknown _indexOfInterest[76132] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76133] "expr temp" "temp"
        unknown call_tmp[625178] "expr temp" "maybe param" "maybe type" "temp"
        (625181 'move' call_tmp[625178](76128 call(76124 call (partial) generalIterator _mt[243] this[75982])))
        (76142 'move' _iterator[76133](76140 call _getIterator call_tmp[625178]))
        Defer
        {
          {
            (76159 call _freeIterator _iterator[76133])
          }
        }
        { scopeless type
          (76148 'move' _indexOfInterest[76132](76145 call iteratorIndex _iterator[76133]))
        }
        ForLoop[76134]
        {
          unknown i[76152] "index var" "insert auto destroy"
          (476227 'end of statement')
          (76154 'move' i[76152] _indexOfInterest[76132])
          (476228 'end of statement' i[76152])
          unknown yret[511639] "YVV" "temp"
          (511642 'move' yret[511639](511641 'deref' i[76152]))
          (511644 yield yret[511639])
          (476230 'end of statement' i[76152])
          label _continueLabel[76137]
          _indexOfInterest[76132]
          _iterator[76133]
        }
        label _breakLabel[76138]
      }
    }
    (511630 return ret[511628])
  }
  where {
    unknown tmp[420727] "maybe param" "temp"
    unknown call_tmp[625185] "expr temp" "maybe param" "maybe type" "temp"
    (625188 'move' call_tmp[625185](375594 call boundedType _mt[243] this[75982]))
    (420738 'move' tmp[420727](75992 call == call_tmp[625185] bounded[64208]))
    unknown call_tmp[625190] "expr temp" "maybe param" "maybe type" "temp"
    (625193 'move' call_tmp[625190](420740 call _cond_invalid tmp[420727]))
    if call_tmp[625190]
    {
      (420743 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558424] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558425] "maybe param" "temp"
    unknown call_tmp[625195] "expr temp" "maybe param" "maybe type" "temp"
    (625198 'move' call_tmp[625195](420728 call isTrue tmp[420727]))
    (558430 'move' tmp[558425](558428 call _cond_test call_tmp[625195]))
    if tmp[558425]
    {
      unknown tmp[558432] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625202] "expr temp" "maybe param" "maybe type" "temp"
      (625205 'move' call_tmp[625202](375599 call stridable _mt[243] this[75982]))
      unknown call_tmp[625207] "expr temp" "maybe param" "maybe type" "temp"
      (625210 'move' call_tmp[625207](75996 call == call_tmp[625202] 1))
      (558434 'move' tmp[558432](420731 call isTrue call_tmp[625207]))
      (558439 'move' tmp[558424](558436 '_paramFoldLogical' tmp[558425] tmp[558432]))
    }
    {
      (558444 'move' tmp[558424](558441 '_paramFoldLogical' tmp[558425] 0))
    }
    (748307 call chpl_statementLevelSymbol tmp[558424])
  }
  function range[64319](?).these[76178](arg _mt[76183]:_MT[238], arg this[76180]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511648] "RVV" "temp"
    unknown call_tmp[625212] "expr temp" "maybe param" "maybe type" "temp"
    (625215 'move' call_tmp[625212](76325 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[625212]
    {
      unknown call_tmp[625217] "expr temp" "maybe param" "maybe type" "temp"
      (625220 'move' call_tmp[625217](76204 call _cond_test 1))
      if call_tmp[625217]
      {
        (76202 call(375659 call (partial) checkIfIterWillOverflow _mt[243] this[76180]))
      }
      unknown i[76211] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625226] "expr temp" "maybe param" "maybe type" "temp"
      (625229 'move' call_tmp[625226](375663 call intIdxType _mt[243] this[76180]))
      (541325 'default init var' i[76211] call_tmp[625226])
      (76214 'end of statement')
      unknown call_tmp[625233] "maybe param" "maybe type" "temp"
      (625236 'move' call_tmp[625233](76216 call _low _mt[243] this[76180]))
      const start[76219] "dead at end of block" "const" "insert auto destroy"
      (541327 'init var' start[76219] call_tmp[625233])
      (76222 'end of statement')
      unknown call_tmp[625240] "maybe param" "maybe type" "temp"
      (625243 'move' call_tmp[625240](76224 call _high _mt[243] this[76180]))
      const end[76227] "dead at end of block" "const" "insert auto destroy"
      (541329 'init var' end[76227] call_tmp[625240])
      (76230 'end of statement')
      CForLoop[76260]
      {
        {
          unknown yret[511652] "YVV" "temp"
          unknown call_tmp[625247] "expr temp" "maybe param" "maybe type" "temp"
          (625250 'move' call_tmp[625247](76255 call(375667 call (partial) chpl_intToIdx _mt[243] this[76180]) i[76211]))
          (511655 'move' yret[511652](511654 'deref' call_tmp[625247]))
          (511657 yield yret[511652])
          (476233 'end of statement' i[76211])
        }
        label _continueLabel[76276]
        {
          (76261 '=' i[76211] start[76219])
          (476235 'end of statement' i[76211] start[76219])
        }
        {
          (76264 '<=' i[76211] end[76227])
          (476238 'end of statement' i[76211] end[76227])
        }
        {
          unknown call_tmp[625254] "expr temp" "maybe param" "maybe type" "temp"
          (625257 'move' call_tmp[625254](375677 call intIdxType _mt[243] this[76180]))
          unknown call_tmp[625261] "expr temp" "maybe param" "maybe type" "temp"
          (625264 'move' call_tmp[625261](375681 call stride _mt[243] this[76180]))
          unknown call_tmp[625266] "expr temp" "maybe param" "maybe type" "temp"
          (625269 'move' call_tmp[625266](76270 call _cast call_tmp[625254] call_tmp[625261]))
          (76267 '+=' i[76211] call_tmp[625266])
          (476241 'end of statement' i[76211])
        }
      }
      label _breakLabel[76277]
    }
    {
      {
        unknown _indexOfInterest[76290] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76291] "expr temp" "temp"
        unknown call_tmp[625273] "expr temp" "maybe param" "maybe type" "temp"
        (625276 'move' call_tmp[625273](76286 call(76282 call (partial) generalIterator _mt[243] this[76180])))
        (76300 'move' _iterator[76291](76298 call _getIterator call_tmp[625273]))
        Defer
        {
          {
            (76317 call _freeIterator _iterator[76291])
          }
        }
        { scopeless type
          (76306 'move' _indexOfInterest[76290](76303 call iteratorIndex _iterator[76291]))
        }
        ForLoop[76292]
        {
          unknown i[76310] "index var" "insert auto destroy"
          (476244 'end of statement')
          (76312 'move' i[76310] _indexOfInterest[76290])
          (476245 'end of statement' i[76310])
          unknown yret[511659] "YVV" "temp"
          (511662 'move' yret[511659](511661 'deref' i[76310]))
          (511664 yield yret[511659])
          (476247 'end of statement' i[76310])
          label _continueLabel[76295]
          _indexOfInterest[76290]
          _iterator[76291]
        }
        label _breakLabel[76296]
      }
    }
    (511650 return ret[511648])
  }
  where {
    unknown tmp[420748] "maybe param" "temp"
    unknown call_tmp[625280] "expr temp" "maybe param" "maybe type" "temp"
    (625283 'move' call_tmp[625280](375648 call boundedType _mt[243] this[76180]))
    (420759 'move' tmp[420748](76190 call == call_tmp[625280] bounded[64208]))
    unknown call_tmp[625285] "expr temp" "maybe param" "maybe type" "temp"
    (625288 'move' call_tmp[625285](420761 call _cond_invalid tmp[420748]))
    if call_tmp[625285]
    {
      (420764 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558451] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558452] "maybe param" "temp"
    unknown call_tmp[625290] "expr temp" "maybe param" "maybe type" "temp"
    (625293 'move' call_tmp[625290](420749 call isTrue tmp[420748]))
    (558457 'move' tmp[558452](558455 call _cond_test call_tmp[625290]))
    if tmp[558452]
    {
      unknown tmp[558459] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625297] "expr temp" "maybe param" "maybe type" "temp"
      (625300 'move' call_tmp[625297](375653 call stridable _mt[243] this[76180]))
      unknown call_tmp[625302] "expr temp" "maybe param" "maybe type" "temp"
      (625305 'move' call_tmp[625302](76194 call == call_tmp[625297] 0))
      (558461 'move' tmp[558459](420752 call isTrue call_tmp[625302]))
      (558466 'move' tmp[558451](558463 '_paramFoldLogical' tmp[558452] tmp[558459]))
    }
    {
      (558471 'move' tmp[558451](558468 '_paramFoldLogical' tmp[558452] 0))
    }
    (748309 call chpl_statementLevelSymbol tmp[558451])
  }
  function range[64319](?).generalIterator[76336](arg _mt[76341]:_MT[238], arg this[76338]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511668] "RVV" "temp"
    unknown tmp[420769] "maybe param" "temp"
    (420780 'move' tmp[420769] 1)
    unknown call_tmp[625307] "expr temp" "maybe param" "maybe type" "temp"
    (625310 'move' call_tmp[625307](420782 call _cond_invalid tmp[420769]))
    if call_tmp[625307]
    {
      (420785 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558478] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558479] "maybe param" "temp"
    unknown call_tmp[625312] "expr temp" "maybe param" "maybe type" "temp"
    (625315 'move' call_tmp[625312](420770 call isTrue tmp[420769]))
    (558484 'move' tmp[558479](558482 call _cond_test call_tmp[625312]))
    if tmp[558479]
    {
      unknown tmp[558486] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625319] "expr temp" "maybe param" "maybe type" "temp"
      (625322 'move' call_tmp[625319](76349 call(76345 call (partial) isAmbiguous _mt[243] this[76338])))
      (558488 'move' tmp[558486](420773 call isTrue call_tmp[625319]))
      (558493 'move' tmp[558478](558490 '_paramFoldLogical' tmp[558479] tmp[558486]))
    }
    {
      (558498 'move' tmp[558478](558495 '_paramFoldLogical' tmp[558479] 0))
    }
    unknown call_tmp[625324] "expr temp" "maybe param" "maybe type" "temp"
    (625327 'move' call_tmp[625324](76360 call _cond_test tmp[558478]))
    if call_tmp[625324]
    {
      (76358 call boundsCheckHalt module=[255] HaltWrappers[210018] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358039 'referenced modules list' HaltWrappers[210018])
    }
    unknown i[76367] "dead at end of block" "insert auto destroy"
    unknown call_tmp[625331] "expr temp" "maybe param" "maybe type" "temp"
    (625334 'move' call_tmp[625331](375687 call intIdxType _mt[243] this[76338]))
    (541331 'default init var' i[76367] call_tmp[625331])
    (76370 'end of statement')
    unknown call_tmp[625338] "maybe param" "maybe type" "temp"
    (625341 'move' call_tmp[625338](76372 call first _mt[243] this[76338]))
    const start[76375] "dead at end of block" "const" "insert auto destroy"
    (541333 'init var' start[76375] call_tmp[625338])
    (76378 'end of statement')
    const end[76399] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558505] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558506] "maybe param" "temp"
    unknown call_tmp[625345] "expr temp" "maybe param" "maybe type" "temp"
    (625348 'move' call_tmp[625345](76380 call low _mt[243] this[76338]))
    unknown call_tmp[625352] "expr temp" "maybe param" "maybe type" "temp"
    (625355 'move' call_tmp[625352](76384 call high _mt[243] this[76338]))
    unknown call_tmp[625357] "expr temp" "maybe param" "maybe type" "temp"
    (625360 'move' call_tmp[625357](76387 call > call_tmp[625345] call_tmp[625352]))
    (558511 'move' tmp[558506](558509 call _cond_test call_tmp[625357]))
    if tmp[558506]
    {
      (558516 'move' tmp[558505](558513 '_paramFoldLogical' tmp[558506] start[76375]))
    }
    {
      unknown tmp[558518] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558520 'move' tmp[558518](76393 call last _mt[243] this[76338]))
      (558525 'move' tmp[558505](558522 '_paramFoldLogical' tmp[558506] tmp[558518]))
    }
    (541335 'init var' end[76399] tmp[558505])
    (76402 'end of statement' start[76375])
    CForLoop[76441]
    {
      {
        unknown yret[511672] "YVV" "temp"
        (511675 'move' yret[511672](511674 'deref' i[76367]))
        (511677 yield yret[511672])
        (476252 'end of statement' i[76367])
        unknown call_tmp[625364] "expr temp" "maybe param" "maybe type" "temp"
        (625367 'move' call_tmp[625364](76430 call == i[76367] end[76399]))
        unknown call_tmp[625369] "expr temp" "maybe param" "maybe type" "temp"
        (625372 'move' call_tmp[625369](76435 call _cond_test call_tmp[625364]))
        if call_tmp[625369]
        {
          break _breakLabel[76458] _breakLabel[76458]
        }
      }
      label _continueLabel[76457]
      {
        (76442 '=' i[76367] start[76375])
        (476254 'end of statement' i[76367] start[76375])
      }
      {
        unknown call_tmp[625376] "expr temp" "maybe param" "maybe type" "temp"
        (625379 'move' call_tmp[625376](375697 call high _mt[243] this[76338]))
        unknown call_tmp[625383] "expr temp" "maybe param" "maybe type" "temp"
        (625386 'move' call_tmp[625383](375701 call low _mt[243] this[76338]))
        (76445 '>=' call_tmp[625376] call_tmp[625383])
      }
      {
        unknown call_tmp[625390] "expr temp" "maybe param" "maybe type" "temp"
        (625393 'move' call_tmp[625390](375706 call intIdxType _mt[243] this[76338]))
        unknown call_tmp[625397] "expr temp" "maybe param" "maybe type" "temp"
        (625400 'move' call_tmp[625397](375710 call stride _mt[243] this[76338]))
        unknown call_tmp[625402] "expr temp" "maybe param" "maybe type" "temp"
        (625405 'move' call_tmp[625402](76451 call _cast call_tmp[625390] call_tmp[625397]))
        (76448 '+=' i[76367] call_tmp[625402])
        (476258 'end of statement' i[76367])
      }
    }
    label _breakLabel[76458]
    (511670 return ret[511668])
  }
  function range[64319](?).these[76470](arg _mt[76475]:_MT[238], arg this[76472]:range[64319](?) :
  range[64319](?), param arg tag[76467]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511681] "RVV" "temp"
    unknown call_tmp[625407] "expr temp" "maybe param" "maybe type" "temp"
    (625410 'move' call_tmp[625407](76492 call isBoundedRange this[76472]))
    unknown call_tmp[625412] "expr temp" "maybe param" "maybe type" "temp"
    (625415 'move' call_tmp[625412](76493 call ! call_tmp[625407]))
    unknown call_tmp[625417] "expr temp" "maybe param" "maybe type" "temp"
    (625420 'move' call_tmp[625417](76517 call _cond_test call_tmp[625412]))
    if call_tmp[625417]
    {
      (76514 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420811] "maybe param" "temp"
    (420822 'move' tmp[420811] 1)
    unknown call_tmp[625422] "expr temp" "maybe param" "maybe type" "temp"
    (625425 'move' call_tmp[625422](420824 call _cond_invalid tmp[420811]))
    if call_tmp[625422]
    {
      (420827 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558532] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558533] "maybe param" "temp"
    unknown call_tmp[625427] "expr temp" "maybe param" "maybe type" "temp"
    (625430 'move' call_tmp[625427](420812 call isTrue tmp[420811]))
    (558538 'move' tmp[558533](558536 call _cond_test call_tmp[625427]))
    if tmp[558533]
    {
      unknown tmp[558540] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625434] "expr temp" "maybe param" "maybe type" "temp"
      (625437 'move' call_tmp[625434](76528 call(76524 call (partial) isAmbiguous _mt[243] this[76472])))
      (558542 'move' tmp[558540](420815 call isTrue call_tmp[625434]))
      (558547 'move' tmp[558532](558544 '_paramFoldLogical' tmp[558533] tmp[558540]))
    }
    {
      (558552 'move' tmp[558532](558549 '_paramFoldLogical' tmp[558533] 0))
    }
    unknown call_tmp[625439] "expr temp" "maybe param" "maybe type" "temp"
    (625442 'move' call_tmp[625439](76540 call _cond_test tmp[558532]))
    if call_tmp[625439]
    {
      (76537 call boundsCheckHalt module=[255] HaltWrappers[210018] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358051 'referenced modules list' HaltWrappers[210018])
    }
    unknown call_tmp[625444] "expr temp" "maybe param" "maybe type" "temp"
    (625447 'move' call_tmp[625444](76567 call _cond_test debugChapelRange[64198]))
    if call_tmp[625444]
    {
      (76564 call chpl_debug_writeln "*** In range standalone iterator:")
    }
    unknown call_tmp[625451] "maybe param" "maybe type" "temp"
    (625454 'move' call_tmp[625451](76572 call size _mt[243] this[76472]))
    const len[76575] "dead at end of block" "const" "insert auto destroy"
    (541337 'init var' len[76575] call_tmp[625451])
    (76578 'end of statement')
    const numChunks[76606] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558559] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558560] "maybe param" "temp"
    unknown call_tmp[625456] "expr temp" "maybe param" "maybe type" "temp"
    (625459 'move' call_tmp[625456](76597 'task_get_serial'))
    (558565 'move' tmp[558560](558563 call _cond_test call_tmp[625456]))
    if tmp[558560]
    {
      (558570 'move' tmp[558559](558567 '_paramFoldLogical' tmp[558560] 1))
    }
    {
      unknown tmp[558572] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558574 'move' tmp[558572](76602 call _computeNumChunks len[76575]))
      (558579 'move' tmp[558559](558576 '_paramFoldLogical' tmp[558560] tmp[558572]))
    }
    (541339 'init var' numChunks[76606] tmp[558559])
    (76609 'end of statement' len[76575])
    unknown call_tmp[625461] "expr temp" "maybe param" "maybe type" "temp"
    (625464 'move' call_tmp[625461](76652 call _cond_test debugChapelRange[64198]))
    if call_tmp[625461]
    {
      (76649 call chpl_debug_writeln "*** RI: length=" len[76575] " numChunks=" numChunks[76606])
      (476265 'end of statement' len[76575] numChunks[76606])
    }
    unknown call_tmp[625466] "expr temp" "maybe param" "maybe type" "temp"
    (625469 'move' call_tmp[625466](76658 call <= numChunks[76606] 1))
    unknown call_tmp[625471] "expr temp" "maybe param" "maybe type" "temp"
    (625474 'move' call_tmp[625471](77307 call _cond_test call_tmp[625466]))
    if call_tmp[625471]
    {
      {
        unknown _indexOfInterest[76666] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76667] "expr temp" "temp"
        (76676 'move' _iterator[76667](76674 call _getIterator this[76472]))
        Defer
        {
          {
            (76692 call _freeIterator _iterator[76667])
          }
        }
        { scopeless type
          (76681 'move' _indexOfInterest[76666](76678 call iteratorIndex _iterator[76667]))
        }
        ForLoop[76668]
        {
          unknown i[76685] "index var" "insert auto destroy"
          (476269 'end of statement')
          (76687 'move' i[76685] _indexOfInterest[76666])
          (476270 'end of statement' i[76685])
          {
            unknown yret[511685] "YVV" "temp"
            (511688 'move' yret[511685](511687 'deref' i[76685]))
            (511690 yield yret[511685])
            (476272 'end of statement' i[76685])
          }
          label _continueLabel[76671]
          _indexOfInterest[76666]
          _iterator[76667]
        }
        label _breakLabel[76672]
      }
    }
    {
      {
        unknown tmpIter[76942] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[625476] "expr temp" "maybe param" "maybe type" "temp"
        (625479 'move' call_tmp[625476](76702 call chpl_build_low_bounded_range 0))
        (76945 'move' tmpIter[76942](76705 call # call_tmp[625476] numChunks[76606]))
        unknown isRngDomArr[77287] "maybe param" "temp"
        unknown tmp[420832] "maybe param" "temp"
        (420843 'move' tmp[420832](77289 call isBoundedRange tmpIter[76942]))
        unknown call_tmp[625481] "expr temp" "maybe param" "maybe type" "temp"
        (625484 'move' call_tmp[625481](420845 call _cond_invalid tmp[420832]))
        if call_tmp[625481]
        {
          (420848 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[558613] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558614] "maybe param" "temp"
        unknown call_tmp[625486] "expr temp" "maybe param" "maybe type" "temp"
        (625489 'move' call_tmp[625486](420833 call isTrue tmp[420832]))
        (558619 'move' tmp[558614](558617 call _cond_test call_tmp[625486]))
        if tmp[558614]
        {
          (558624 'move' tmp[558613](558621 '_paramFoldLogical' tmp[558614] 1))
        }
        {
          unknown tmp[420853] "maybe param" "temp"
          (420864 'move' tmp[420853](77292 call isDomain tmpIter[76942]))
          unknown call_tmp[625491] "expr temp" "maybe param" "maybe type" "temp"
          (625494 'move' call_tmp[625491](420866 call _cond_invalid tmp[420853]))
          if call_tmp[625491]
          {
            (420869 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558586] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558587] "maybe param" "temp"
          unknown call_tmp[625496] "expr temp" "maybe param" "maybe type" "temp"
          (625499 'move' call_tmp[625496](420854 call isTrue tmp[420853]))
          (558592 'move' tmp[558587](558590 call _cond_test call_tmp[625496]))
          if tmp[558587]
          {
            (558597 'move' tmp[558586](558594 '_paramFoldLogical' tmp[558587] 1))
          }
          {
            unknown tmp[558599] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[625501] "expr temp" "maybe param" "maybe type" "temp"
            (625504 'move' call_tmp[625501](77295 call isArray tmpIter[76942]))
            (558601 'move' tmp[558599](420858 call isTrue call_tmp[625501]))
            (558606 'move' tmp[558586](558603 '_paramFoldLogical' tmp[558587] tmp[558599]))
          }
          unknown tmp[558626] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (558628 'move' tmp[558626](420837 call isTrue tmp[558586]))
          (558633 'move' tmp[558613](558630 '_paramFoldLogical' tmp[558614] tmp[558626]))
        }
        (77302 'move' isRngDomArr[77287] tmp[558613])
        if isRngDomArr[77287]
        {
          const _coforallCount[77154] "const" "end count" "temp"
          (77223 'move' _coforallCount[77154](77220 call _endCountAlloc 1))
          unknown numTasks[77155] "temp"
          (77207 'move' numTasks[77155](77203 call size _mt[243] tmpIter[76942]))
          (77198 call _upEndCount _coforallCount[77154] 1 numTasks[77155])
          (476275 'end of statement')
          (77195 call chpl_resetTaskSpawn numTasks[77155])
          (476276 'end of statement')
          unknown _indexOfInterest[77162] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77163] "expr temp" "temp"
          (77172 'move' _iterator[77163](77170 call _getIterator tmpIter[76942]))
          Defer
          {
            {
              (77188 call _freeIterator _iterator[77163])
            }
          }
          { scopeless type
            (77177 'move' _indexOfInterest[77162](77174 call iteratorIndex _iterator[77163]))
          }
          ForLoop[77164]
          {
            unknown chunk[77181] "coforall index var" "index var" "insert auto destroy"
            (476278 'end of statement')
            (77183 'move' chunk[77181] _indexOfInterest[77162])
            (476279 'end of statement' chunk[77181])
            {
              {
                unknown call_tmp[625510] "expr temp" "maybe param" "maybe type" "temp"
                (625513 'move' call_tmp[625510](375786 call stridable _mt[243] this[76472]))
                unknown call_tmp[625515] "expr temp" "maybe param" "maybe type" "temp"
                (625518 'move' call_tmp[625515](76949 call _cond_test call_tmp[625510]))
                if call_tmp[625515]
                {
                  unknown call_tmp[625520] "expr temp" "maybe param" "maybe type" "temp"
                  (625523 'move' call_tmp[625520](76960 call - len[76575] 1))
                  unknown call_tmp[625525] "maybe param" "maybe type" "temp"
                  (625528 'move' call_tmp[625525](76955 call _computeBlock len[76575] numChunks[76606] chunk[77181] call_tmp[625520]))
                  const tmp[76953] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541341 'init var' tmp[76953] call_tmp[625525])
                  (76965 call _check_tuple_var_decl tmp[76953] 2)
                  (476281 'end of statement')
                  unknown call_tmp[625530] "maybe param" "maybe type" "temp"
                  (625533 'move' call_tmp[625530](76970 call tmp[76953] 0))
                  const lo[76968] "dead at end of block" "const" "insert auto destroy"
                  (541343 'init var' lo[76968] call_tmp[625530])
                  unknown call_tmp[625535] "maybe param" "maybe type" "temp"
                  (625538 'move' call_tmp[625535](76975 call tmp[76953] 1))
                  const hi[76973] "dead at end of block" "const" "insert auto destroy"
                  (541345 'init var' hi[76973] call_tmp[625535])
                  (76978 'end of statement')
                  unknown call_tmp[625540] "expr temp" "maybe param" "maybe type" "temp"
                  (625543 'move' call_tmp[625540](76985 call - lo[76968] 1))
                  unknown call_tmp[625545] "maybe param" "maybe type" "temp"
                  (625548 'move' call_tmp[625545](76982 call - hi[76973] call_tmp[625540]))
                  const mylen[76980] "dead at end of block" "const" "insert auto destroy"
                  (541347 'init var' mylen[76980] call_tmp[625545])
                  (76989 'end of statement')
                  unknown call_tmp[625552] "maybe param" "maybe type" "temp"
                  (625555 'move' call_tmp[625552](76993 call(375796 call (partial) orderToIndex _mt[243] this[76472]) lo[76968]))
                  unknown low[76991] "dead at end of block" "insert auto destroy"
                  (541349 'init var' low[76991] call_tmp[625552])
                  (76996 'end of statement')
                  unknown call_tmp[625561] "expr temp" "maybe param" "maybe type" "temp"
                  (625564 'move' call_tmp[625561](375805 call strType _mt[243] this[76472]))
                  unknown call_tmp[625566] "expr temp" "maybe param" "maybe type" "temp"
                  (625569 'move' call_tmp[625566](77007 call chpl__idxToInt low[76991]))
                  unknown call_tmp[625571] "expr temp" "maybe param" "maybe type" "temp"
                  (625574 'move' call_tmp[625571](77004 call _cast call_tmp[625561] call_tmp[625566]))
                  unknown call_tmp[625578] "expr temp" "maybe param" "maybe type" "temp"
                  (625581 'move' call_tmp[625578](375810 call stride _mt[243] this[76472]))
                  unknown call_tmp[625585] "expr temp" "maybe param" "maybe type" "temp"
                  (625588 'move' call_tmp[625585](375814 call strType _mt[243] this[76472]))
                  unknown call_tmp[625590] "expr temp" "maybe param" "maybe type" "temp"
                  (625593 'move' call_tmp[625590](77016 call - mylen[76980] 1))
                  unknown call_tmp[625595] "expr temp" "maybe param" "maybe type" "temp"
                  (625598 'move' call_tmp[625595](77013 call _cast call_tmp[625585] call_tmp[625590]))
                  unknown call_tmp[625600] "expr temp" "maybe param" "maybe type" "temp"
                  (625603 'move' call_tmp[625600](77010 call * call_tmp[625578] call_tmp[625595]))
                  unknown call_tmp[625605] "expr temp" "maybe param" "maybe type" "temp"
                  (625608 'move' call_tmp[625605](77002 call + call_tmp[625571] call_tmp[625600]))
                  unknown call_tmp[625610] "maybe param" "maybe type" "temp"
                  (625613 'move' call_tmp[625610](77000 call(375801 call (partial) chpl_intToIdx _mt[243] this[76472]) call_tmp[625605]))
                  unknown high[76998] "dead at end of block" "insert auto destroy"
                  (541351 'init var' high[76998] call_tmp[625610])
                  (77020 'end of statement' hi[76973] lo[76968] lo[76968] low[76991] mylen[76980])
                  unknown call_tmp[625617] "expr temp" "maybe param" "maybe type" "temp"
                  (625620 'move' call_tmp[625617](375819 call stride _mt[243] this[76472]))
                  unknown call_tmp[625622] "expr temp" "maybe param" "maybe type" "temp"
                  (625625 'move' call_tmp[625622](77024 call < call_tmp[625617] 0))
                  unknown call_tmp[625627] "expr temp" "maybe param" "maybe type" "temp"
                  (625630 'move' call_tmp[625627](77022 call _cond_test call_tmp[625622]))
                  if call_tmp[625627]
                  {
                    (77030 call <=> low[76991] high[76998])
                    (476287 'end of statement' low[76991] high[76998])
                  }
                  {
                    unknown _indexOfInterest[77035] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77037] "expr temp" "temp"
                    unknown call_tmp[625634] "expr temp" "maybe param" "maybe type" "temp"
                    (625637 'move' call_tmp[625634](375827 call stride _mt[243] this[76472]))
                    unknown call_tmp[625639] "expr temp" "maybe param" "maybe type" "temp"
                    (625642 'move' call_tmp[625639](77044 call chpl_direct_range_iter low[76991] high[76998] call_tmp[625634]))
                    (77039 'move' _iterator[77037](77042 call _getIterator call_tmp[625639]))
                    Defer
                    {
                      {
                        (77050 call _freeIterator _iterator[77037])
                      }
                    }
                    { scopeless type
                      (77054 'move' _indexOfInterest[77035](77057 call iteratorIndex _iterator[77037]))
                    }
                    ForLoop[77059]
                    {
                      unknown i[77062] "index var" "insert auto destroy"
                      (476291 'end of statement')
                      (77064 'move' i[77062] _indexOfInterest[77035])
                      (476292 'end of statement' i[77062])
                      {
                        unknown yret[511692] "YVV" "temp"
                        (511695 'move' yret[511692](511694 'deref' i[77062]))
                        (511697 yield yret[511692])
                        (476294 'end of statement' i[77062])
                      }
                      label _continueLabel[77070]
                      _indexOfInterest[77035]
                      _iterator[77037]
                    }
                    label _breakLabel[77072]
                  }
                }
                {
                  unknown call_tmp[625646] "expr temp" "maybe param" "maybe type" "temp"
                  (625649 'move' call_tmp[625646](77083 call _high _mt[243] this[76472]))
                  unknown call_tmp[625653] "expr temp" "maybe param" "maybe type" "temp"
                  (625656 'move' call_tmp[625653](77087 call _low _mt[243] this[76472]))
                  unknown call_tmp[625660] "expr temp" "maybe param" "maybe type" "temp"
                  (625663 'move' call_tmp[625660](77091 call _low _mt[243] this[76472]))
                  unknown call_tmp[625665] "maybe param" "maybe type" "temp"
                  (625668 'move' call_tmp[625665](77078 call _computeBlock len[76575] numChunks[76606] chunk[77181] call_tmp[625646] call_tmp[625653] call_tmp[625660]))
                  const tmp[77076] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541353 'init var' tmp[77076] call_tmp[625665])
                  (77096 call _check_tuple_var_decl tmp[77076] 2)
                  (476296 'end of statement')
                  unknown call_tmp[625670] "maybe param" "maybe type" "temp"
                  (625673 'move' call_tmp[625670](77101 call tmp[77076] 0))
                  const lo[77099] "dead at end of block" "const" "insert auto destroy"
                  (541355 'init var' lo[77099] call_tmp[625670])
                  unknown call_tmp[625675] "maybe param" "maybe type" "temp"
                  (625678 'move' call_tmp[625675](77106 call tmp[77076] 1))
                  const hi[77104] "dead at end of block" "const" "insert auto destroy"
                  (541357 'init var' hi[77104] call_tmp[625675])
                  (77109 'end of statement')
                  {
                    unknown _indexOfInterest[77111] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77113] "expr temp" "temp"
                    unknown call_tmp[625680] "expr temp" "maybe param" "maybe type" "temp"
                    (625683 'move' call_tmp[625680](77120 call chpl_direct_range_iter lo[77099] hi[77104] 1))
                    (77115 'move' _iterator[77113](77118 call _getIterator call_tmp[625680]))
                    Defer
                    {
                      {
                        (77126 call _freeIterator _iterator[77113])
                      }
                    }
                    { scopeless type
                      (77130 'move' _indexOfInterest[77111](77133 call iteratorIndex _iterator[77113]))
                    }
                    ForLoop[77135]
                    {
                      unknown i[77138] "index var" "insert auto destroy"
                      (476298 'end of statement')
                      (77140 'move' i[77138] _indexOfInterest[77111])
                      (476299 'end of statement' i[77138])
                      {
                        unknown yret[511699] "YVV" "temp"
                        unknown call_tmp[625687] "expr temp" "maybe param" "maybe type" "temp"
                        (625690 'move' call_tmp[625687](77146 call(375837 call (partial) chpl_intToIdx _mt[243] this[76472]) i[77138]))
                        (511702 'move' yret[511699](511701 'deref' call_tmp[625687]))
                        (511704 yield yret[511699])
                        (476301 'end of statement' i[77138])
                      }
                      label _continueLabel[77148]
                      _indexOfInterest[77111]
                      _iterator[77113]
                    }
                    label _breakLabel[77150]
                  }
                }
              }
              (77157 call _downEndCount _coforallCount[77154] nil[44])
              (77156 'coforall loop')
            }
            label _continueLabel[77167]
            _indexOfInterest[77162]
            _iterator[77163]
          }
          label _breakLabel[77168]
          Defer
          {
            {
              (77210 call _endCountFree _coforallCount[77154])
            }
          }
          (77215 call _waitEndCount _coforallCount[77154] 1 numTasks[77155])
        }
        {
          const _coforallCount[77227] "const" "end count" "temp"
          (77284 'move' _coforallCount[77227](77281 call _endCountAlloc 1))
          unknown _indexOfInterest[77235] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77236] "expr temp" "temp"
          (77245 'move' _iterator[77236](77243 call _getIterator tmpIter[76942]))
          Defer
          {
            {
              (77261 call _freeIterator _iterator[77236])
            }
          }
          { scopeless type
            (77250 'move' _indexOfInterest[77235](77247 call iteratorIndex _iterator[77236]))
          }
          ForLoop[77237]
          {
            unknown chunk[77254] "coforall index var" "index var" "insert auto destroy"
            (476307 'end of statement')
            (77256 'move' chunk[77254] _indexOfInterest[77235])
            (476308 'end of statement' chunk[77254])
            (77268 call _upEndCount _coforallCount[77227] 1)
            (476310 'end of statement')
            {
              {
                unknown call_tmp[625694] "expr temp" "maybe param" "maybe type" "temp"
                (625697 'move' call_tmp[625694](375729 call stridable _mt[243] this[76472]))
                unknown call_tmp[625699] "expr temp" "maybe param" "maybe type" "temp"
                (625702 'move' call_tmp[625699](76937 call _cond_test call_tmp[625694]))
                if call_tmp[625699]
                {
                  unknown call_tmp[625704] "expr temp" "maybe param" "maybe type" "temp"
                  (625707 'move' call_tmp[625704](76720 call - len[76575] 1))
                  unknown call_tmp[625709] "maybe param" "maybe type" "temp"
                  (625712 'move' call_tmp[625709](76722 call _computeBlock len[76575] numChunks[76606] chunk[77254] call_tmp[625704]))
                  const tmp[76723] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541359 'init var' tmp[76723] call_tmp[625709])
                  (76730 call _check_tuple_var_decl tmp[76723] 2)
                  (476311 'end of statement')
                  unknown call_tmp[625714] "maybe param" "maybe type" "temp"
                  (625717 'move' call_tmp[625714](76724 call tmp[76723] 0))
                  const lo[76708] "dead at end of block" "const" "insert auto destroy"
                  (541361 'init var' lo[76708] call_tmp[625714])
                  unknown call_tmp[625719] "maybe param" "maybe type" "temp"
                  (625722 'move' call_tmp[625719](76727 call tmp[76723] 1))
                  const hi[76710] "dead at end of block" "const" "insert auto destroy"
                  (541363 'init var' hi[76710] call_tmp[625719])
                  (76735 'end of statement')
                  unknown call_tmp[625724] "expr temp" "maybe param" "maybe type" "temp"
                  (625727 'move' call_tmp[625724](76740 call - lo[76708] 1))
                  unknown call_tmp[625729] "maybe param" "maybe type" "temp"
                  (625732 'move' call_tmp[625729](76742 call - hi[76710] call_tmp[625724]))
                  const mylen[76744] "dead at end of block" "const" "insert auto destroy"
                  (541365 'init var' mylen[76744] call_tmp[625729])
                  (76747 'end of statement')
                  unknown call_tmp[625736] "maybe param" "maybe type" "temp"
                  (625739 'move' call_tmp[625736](76751 call(375739 call (partial) orderToIndex _mt[243] this[76472]) lo[76708]))
                  unknown low[76752] "dead at end of block" "insert auto destroy"
                  (541367 'init var' low[76752] call_tmp[625736])
                  (76755 'end of statement')
                  unknown call_tmp[625745] "expr temp" "maybe param" "maybe type" "temp"
                  (625748 'move' call_tmp[625745](375749 call strType _mt[243] this[76472]))
                  unknown call_tmp[625750] "expr temp" "maybe param" "maybe type" "temp"
                  (625753 'move' call_tmp[625750](76760 call chpl__idxToInt low[76752]))
                  unknown call_tmp[625755] "expr temp" "maybe param" "maybe type" "temp"
                  (625758 'move' call_tmp[625755](76762 call _cast call_tmp[625745] call_tmp[625750]))
                  unknown call_tmp[625762] "expr temp" "maybe param" "maybe type" "temp"
                  (625765 'move' call_tmp[625762](375753 call stride _mt[243] this[76472]))
                  unknown call_tmp[625769] "expr temp" "maybe param" "maybe type" "temp"
                  (625772 'move' call_tmp[625769](375758 call strType _mt[243] this[76472]))
                  unknown call_tmp[625774] "expr temp" "maybe param" "maybe type" "temp"
                  (625777 'move' call_tmp[625774](76767 call - mylen[76744] 1))
                  unknown call_tmp[625779] "expr temp" "maybe param" "maybe type" "temp"
                  (625782 'move' call_tmp[625779](76770 call _cast call_tmp[625769] call_tmp[625774]))
                  unknown call_tmp[625784] "expr temp" "maybe param" "maybe type" "temp"
                  (625787 'move' call_tmp[625784](76772 call * call_tmp[625762] call_tmp[625779]))
                  unknown call_tmp[625789] "expr temp" "maybe param" "maybe type" "temp"
                  (625792 'move' call_tmp[625789](76774 call + call_tmp[625755] call_tmp[625784]))
                  unknown call_tmp[625794] "maybe param" "maybe type" "temp"
                  (625797 'move' call_tmp[625794](76777 call(375744 call (partial) chpl_intToIdx _mt[243] this[76472]) call_tmp[625789]))
                  unknown high[76778] "dead at end of block" "insert auto destroy"
                  (541369 'init var' high[76778] call_tmp[625794])
                  (76781 'end of statement' hi[76710] lo[76708] lo[76708] low[76752] mylen[76744])
                  unknown call_tmp[625801] "expr temp" "maybe param" "maybe type" "temp"
                  (625804 'move' call_tmp[625801](375762 call stride _mt[243] this[76472]))
                  unknown call_tmp[625806] "expr temp" "maybe param" "maybe type" "temp"
                  (625809 'move' call_tmp[625806](76784 call < call_tmp[625801] 0))
                  unknown call_tmp[625811] "expr temp" "maybe param" "maybe type" "temp"
                  (625814 'move' call_tmp[625811](76791 call _cond_test call_tmp[625806]))
                  if call_tmp[625811]
                  {
                    (76788 call <=> low[76752] high[76778])
                    (476317 'end of statement' low[76752] high[76778])
                  }
                  {
                    unknown _indexOfInterest[76808] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76809] "expr temp" "temp"
                    unknown call_tmp[625818] "expr temp" "maybe param" "maybe type" "temp"
                    (625821 'move' call_tmp[625818](375769 call stride _mt[243] this[76472]))
                    unknown call_tmp[625823] "expr temp" "maybe param" "maybe type" "temp"
                    (625826 'move' call_tmp[625823](76827 call chpl_direct_range_iter low[76752] high[76778] call_tmp[625818]))
                    (76818 'move' _iterator[76809](76816 call _getIterator call_tmp[625823]))
                    Defer
                    {
                      {
                        (76843 call _freeIterator _iterator[76809])
                      }
                    }
                    { scopeless type
                      (76832 'move' _indexOfInterest[76808](76829 call iteratorIndex _iterator[76809]))
                    }
                    ForLoop[76810]
                    {
                      unknown i[76836] "index var" "insert auto destroy"
                      (476321 'end of statement')
                      (76838 'move' i[76836] _indexOfInterest[76808])
                      (476322 'end of statement' i[76836])
                      {
                        unknown yret[511706] "YVV" "temp"
                        (511709 'move' yret[511706](511708 'deref' i[76836]))
                        (511711 yield yret[511706])
                        (476324 'end of statement' i[76836])
                      }
                      label _continueLabel[76813]
                      _indexOfInterest[76808]
                      _iterator[76809]
                    }
                    label _breakLabel[76814]
                  }
                }
                {
                  unknown call_tmp[625830] "expr temp" "maybe param" "maybe type" "temp"
                  (625833 'move' call_tmp[625830](76861 call _high _mt[243] this[76472]))
                  unknown call_tmp[625837] "expr temp" "maybe param" "maybe type" "temp"
                  (625840 'move' call_tmp[625837](76865 call _low _mt[243] this[76472]))
                  unknown call_tmp[625844] "expr temp" "maybe param" "maybe type" "temp"
                  (625847 'move' call_tmp[625844](76869 call _low _mt[243] this[76472]))
                  unknown call_tmp[625849] "maybe param" "maybe type" "temp"
                  (625852 'move' call_tmp[625849](76872 call _computeBlock len[76575] numChunks[76606] chunk[77254] call_tmp[625830] call_tmp[625837] call_tmp[625844]))
                  const tmp[76873] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541371 'init var' tmp[76873] call_tmp[625849])
                  (76880 call _check_tuple_var_decl tmp[76873] 2)
                  (476326 'end of statement')
                  unknown call_tmp[625854] "maybe param" "maybe type" "temp"
                  (625857 'move' call_tmp[625854](76874 call tmp[76873] 0))
                  const lo[76850] "dead at end of block" "const" "insert auto destroy"
                  (541373 'init var' lo[76850] call_tmp[625854])
                  unknown call_tmp[625859] "maybe param" "maybe type" "temp"
                  (625862 'move' call_tmp[625859](76877 call tmp[76873] 1))
                  const hi[76852] "dead at end of block" "const" "insert auto destroy"
                  (541375 'init var' hi[76852] call_tmp[625859])
                  (76885 'end of statement')
                  {
                    unknown _indexOfInterest[76899] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76900] "expr temp" "temp"
                    unknown call_tmp[625864] "expr temp" "maybe param" "maybe type" "temp"
                    (625867 'move' call_tmp[625864](76914 call chpl_direct_range_iter lo[76850] hi[76852] 1))
                    (76909 'move' _iterator[76900](76907 call _getIterator call_tmp[625864]))
                    Defer
                    {
                      {
                        (76930 call _freeIterator _iterator[76900])
                      }
                    }
                    { scopeless type
                      (76919 'move' _indexOfInterest[76899](76916 call iteratorIndex _iterator[76900]))
                    }
                    ForLoop[76901]
                    {
                      unknown i[76923] "index var" "insert auto destroy"
                      (476328 'end of statement')
                      (76925 'move' i[76923] _indexOfInterest[76899])
                      (476329 'end of statement' i[76923])
                      {
                        unknown yret[511713] "YVV" "temp"
                        unknown call_tmp[625871] "expr temp" "maybe param" "maybe type" "temp"
                        (625874 'move' call_tmp[625871](76895 call(375778 call (partial) chpl_intToIdx _mt[243] this[76472]) i[76923]))
                        (511716 'move' yret[511713](511715 'deref' call_tmp[625871]))
                        (511718 yield yret[511713])
                        (476331 'end of statement' i[76923])
                      }
                      label _continueLabel[76904]
                      _indexOfInterest[76899]
                      _iterator[76900]
                    }
                    label _breakLabel[76905]
                  }
                }
              }
              (77230 call _downEndCount _coforallCount[77227] nil[44])
              (77229 'coforall loop')
            }
            label _continueLabel[77240]
            _indexOfInterest[77235]
            _iterator[77236]
          }
          label _breakLabel[77241]
          Defer
          {
            {
              (77272 call _endCountFree _coforallCount[77227])
            }
          }
          (77277 call _waitEndCount _coforallCount[77227] 1)
        }
      }
    }
    (511683 return ret[511681])
  }
  where {
    unknown tmp[420790] "maybe param" "temp"
    (420801 'move' tmp[420790](76482 call == tag[76467] standalone[451]))
    unknown call_tmp[625876] "expr temp" "maybe param" "maybe type" "temp"
    (625879 'move' call_tmp[625876](420803 call _cond_invalid tmp[420790]))
    if call_tmp[625876]
    {
      (420806 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558640] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558641] "maybe param" "temp"
    unknown call_tmp[625881] "expr temp" "maybe param" "maybe type" "temp"
    (625884 'move' call_tmp[625881](420791 call isTrue tmp[420790]))
    (558646 'move' tmp[558641](558644 call _cond_test call_tmp[625881]))
    if tmp[558641]
    {
      unknown tmp[558648] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625886] "expr temp" "maybe param" "maybe type" "temp"
      (625889 'move' call_tmp[625886](76485 call ! localeModelHasSublocales[187449]))
      (558650 'move' tmp[558648](420794 call isTrue call_tmp[625886]))
      (558655 'move' tmp[558640](558652 '_paramFoldLogical' tmp[558641] tmp[558648]))
    }
    {
      (558660 'move' tmp[558640](558657 '_paramFoldLogical' tmp[558641] 0))
    }
    (748311 call chpl_statementLevelSymbol tmp[558640])
  }
  function range[64319](?).these[77321](arg _mt[77326]:_MT[238], arg this[77323]:range[64319](?) :
  range[64319](?), param arg tag[77318]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511722] "RVV" "temp"
    unknown call_tmp[625891] "expr temp" "maybe param" "maybe type" "temp"
    (625894 'move' call_tmp[625891](77338 call isBoundedRange this[77323]))
    unknown call_tmp[625896] "expr temp" "maybe param" "maybe type" "temp"
    (625899 'move' call_tmp[625896](77339 call ! call_tmp[625891]))
    unknown call_tmp[625901] "expr temp" "maybe param" "maybe type" "temp"
    (625904 'move' call_tmp[625901](77346 call _cond_test call_tmp[625896]))
    if call_tmp[625901]
    {
      (77344 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420874] "maybe param" "temp"
    (420885 'move' tmp[420874] 1)
    unknown call_tmp[625906] "expr temp" "maybe param" "maybe type" "temp"
    (625909 'move' call_tmp[625906](420887 call _cond_invalid tmp[420874]))
    if call_tmp[625906]
    {
      (420890 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558667] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558668] "maybe param" "temp"
    unknown call_tmp[625911] "expr temp" "maybe param" "maybe type" "temp"
    (625914 'move' call_tmp[625911](420875 call isTrue tmp[420874]))
    (558673 'move' tmp[558668](558671 call _cond_test call_tmp[625911]))
    if tmp[558668]
    {
      unknown tmp[558675] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625918] "expr temp" "maybe param" "maybe type" "temp"
      (625921 'move' call_tmp[625918](77358 call(77354 call (partial) isAmbiguous _mt[243] this[77323])))
      (558677 'move' tmp[558675](420878 call isTrue call_tmp[625918]))
      (558682 'move' tmp[558667](558679 '_paramFoldLogical' tmp[558668] tmp[558675]))
    }
    {
      (558687 'move' tmp[558667](558684 '_paramFoldLogical' tmp[558668] 0))
    }
    unknown call_tmp[625923] "expr temp" "maybe param" "maybe type" "temp"
    (625926 'move' call_tmp[625923](77369 call _cond_test tmp[558667]))
    if call_tmp[625923]
    {
      (77367 call boundsCheckHalt module=[255] HaltWrappers[210018] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358066 'referenced modules list' HaltWrappers[210018])
    }
    unknown call_tmp[625928] "expr temp" "maybe param" "maybe type" "temp"
    (625931 'move' call_tmp[625928](77396 call _cond_test debugChapelRange[64198]))
    if call_tmp[625928]
    {
      (77394 call chpl_debug_writeln "*** In range leader:")
    }
    unknown call_tmp[625933] "expr temp" "maybe param" "maybe type" "temp"
    (625936 'move' call_tmp[625933](358071 call here[90438]))
    unknown call_tmp[625940] "maybe param" "maybe type" "temp"
    (625943 'move' call_tmp[625940](77408 call(77404 call (partial) getChildCount _mt[243] call_tmp[625933])))
    const numSublocs[77409] "dead at end of block" "const" "insert auto destroy"
    (541377 'init var' numSublocs[77409] call_tmp[625940])
    (77412 'end of statement')
    unknown tmp[421063] "maybe param" "temp"
    (421074 'move' tmp[421063] localeModelHasSublocales[187449])
    unknown call_tmp[625945] "expr temp" "maybe param" "maybe type" "temp"
    (625948 'move' call_tmp[625945](421076 call _cond_invalid tmp[421063]))
    if call_tmp[625945]
    {
      (421079 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558694] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558695] "maybe param" "temp"
    unknown call_tmp[625950] "expr temp" "maybe param" "maybe type" "temp"
    (625953 'move' call_tmp[625950](421064 call isTrue tmp[421063]))
    (558700 'move' tmp[558695](558698 call _cond_test call_tmp[625950]))
    if tmp[558695]
    {
      unknown tmp[558702] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625955] "expr temp" "maybe param" "maybe type" "temp"
      (625958 'move' call_tmp[625955](77416 call != numSublocs[77409] 0))
      (558704 'move' tmp[558702](421067 call isTrue call_tmp[625955]))
      (558709 'move' tmp[558694](558706 '_paramFoldLogical' tmp[558695] tmp[558702]))
    }
    {
      (558714 'move' tmp[558694](558711 '_paramFoldLogical' tmp[558695] 0))
    }
    unknown call_tmp[625960] "expr temp" "maybe param" "maybe type" "temp"
    (625963 'move' call_tmp[625960](79138 call _cond_test tmp[558694]))
    if call_tmp[625960]
    {
      unknown call_tmp[625967] "maybe param" "maybe type" "temp"
      (625970 'move' call_tmp[625967](77421 call size _mt[243] this[77323]))
      const len[77424] "dead at end of block" "const" "insert auto destroy"
      (541379 'init var' len[77424] call_tmp[625967])
      (77427 'end of statement')
      const tasksPerLocale[77430] "dead at end of block" "const" "insert auto destroy"
      (541381 'init var' tasksPerLocale[77430] dataParTasksPerLocale[93284])
      (77433 'end of statement')
      const ignoreRunning[77435] "dead at end of block" "const" "insert auto destroy"
      (541383 'init var' ignoreRunning[77435] dataParIgnoreRunningTasks[93290])
      (77438 'end of statement')
      const minIndicesPerTask[77440] "dead at end of block" "const" "insert auto destroy"
      (541385 'init var' minIndicesPerTask[77440] dataParMinGranularity[93296])
      (77443 'end of statement')
      unknown dptpl[77456] "dead at end of block" "insert auto destroy"
      unknown tmp[558721] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558722] "maybe param" "temp"
      unknown call_tmp[625972] "expr temp" "maybe param" "maybe type" "temp"
      (625975 'move' call_tmp[625972](77446 call == tasksPerLocale[77430] 0))
      (558727 'move' tmp[558722](558725 call _cond_test call_tmp[625972]))
      if tmp[558722]
      {
        unknown tmp[558729] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[625977] "expr temp" "maybe param" "maybe type" "temp"
        (625980 'move' call_tmp[625977](358074 call here[90438]))
        (558731 'move' tmp[558729](77449 call maxTaskPar _mt[243] call_tmp[625977]))
        (558736 'move' tmp[558721](558733 '_paramFoldLogical' tmp[558722] tmp[558729]))
      }
      {
        (558741 'move' tmp[558721](558738 '_paramFoldLogical' tmp[558722] tasksPerLocale[77430]))
      }
      (541387 'init var' dptpl[77456] tmp[558721])
      (77459 'end of statement')
      unknown call_tmp[625984] "expr temp" "maybe param" "maybe type" "temp"
      (625987 'move' call_tmp[625984](77461 call ! ignoreRunning[77435]))
      unknown call_tmp[625989] "expr temp" "maybe param" "maybe type" "temp"
      (625992 'move' call_tmp[625989](77498 call _cond_test call_tmp[625984]))
      if call_tmp[625989]
      {
        unknown call_tmp[625994] "expr temp" "maybe param" "maybe type" "temp"
        (625997 'move' call_tmp[625994](358076 call here[90438]))
        unknown call_tmp[626001] "expr temp" "maybe param" "maybe type" "temp"
        (626004 'move' call_tmp[626001](77470 call(77466 call (partial) runningTasks _mt[243] call_tmp[625994])))
        unknown call_tmp[626006] "maybe param" "maybe type" "temp"
        (626009 'move' call_tmp[626006](77472 call - call_tmp[626001] 1))
        const otherTasks[77474] "dead at end of block" "const" "insert auto destroy"
        (541389 'init var' otherTasks[77474] call_tmp[626006])
        (77477 'end of statement')
        unknown tmp[558748] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558749] "maybe param" "temp"
        unknown call_tmp[626011] "expr temp" "maybe param" "maybe type" "temp"
        (626014 'move' call_tmp[626011](77482 call < otherTasks[77474] dptpl[77456]))
        (558754 'move' tmp[558749](558752 call _cond_test call_tmp[626011]))
        if tmp[558749]
        {
          unknown tmp[558756] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[626016] "expr temp" "maybe param" "maybe type" "temp"
          (626019 'move' call_tmp[626016](77486 call - dptpl[77456] otherTasks[77474]))
          (558758 'move' tmp[558756](77489 call _cast int(64)[13] call_tmp[626016]))
          (558763 'move' tmp[558748](558760 '_paramFoldLogical' tmp[558749] tmp[558756]))
        }
        {
          (558768 'move' tmp[558748](558765 '_paramFoldLogical' tmp[558749] 1))
        }
        (77495 call = dptpl[77456] tmp[558748])
        (476343 'end of statement' dptpl[77456] otherTasks[77474] dptpl[77456] dptpl[77456] otherTasks[77474])
      }
      unknown call_tmp[626021] "maybe param" "maybe type" "temp"
      (626024 'move' call_tmp[626021](77506 call min numSublocs[77409] dptpl[77456]))
      const numSublocTasks[77507] "dead at end of block" "const" "insert auto destroy"
      (541391 'init var' numSublocTasks[77507] call_tmp[626021])
      (77510 'end of statement')
      const numChunks[77526] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558775] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558776] "maybe param" "temp"
      unknown call_tmp[626026] "expr temp" "maybe param" "maybe type" "temp"
      (626029 'move' call_tmp[626026](77513 'task_get_serial'))
      (558781 'move' tmp[558776](558779 call _cond_test call_tmp[626026]))
      if tmp[558776]
      {
        (558786 'move' tmp[558775](558783 '_paramFoldLogical' tmp[558776] 1))
      }
      {
        unknown tmp[558788] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (558790 'move' tmp[558788](77522 call _computeNumChunks numSublocTasks[77507](ignoreRunning = 1) minIndicesPerTask[77440] len[77424]))
        (558795 'move' tmp[558775](558792 '_paramFoldLogical' tmp[558776] tmp[558788]))
      }
      (541393 'init var' numChunks[77526] tmp[558775])
      (77529 'end of statement' tasksPerLocale[77430] tasksPerLocale[77430] numSublocs[77409] dptpl[77456] numSublocTasks[77507] minIndicesPerTask[77440] len[77424])
      unknown call_tmp[626031] "expr temp" "maybe param" "maybe type" "temp"
      (626034 'move' call_tmp[626031](77646 call _cond_test debugDataParNuma[93410]))
      if call_tmp[626031]
      {
        (77643 call chpl_debug_writeln "### numSublocs = " numSublocs[77409] "\n" "### numTasksPerSubloc = " numSublocTasks[77507] "\n" "### ignoreRunning = " ignoreRunning[77435] "\n" "### minIndicesPerTask = " minIndicesPerTask[77440] "\n" "### numChunks = " numChunks[77526])
        (476354 'end of statement' numSublocs[77409] numSublocTasks[77507] ignoreRunning[77435] minIndicesPerTask[77440] numChunks[77526])
      }
      unknown call_tmp[626036] "expr temp" "maybe param" "maybe type" "temp"
      (626039 'move' call_tmp[626036](77652 call == numChunks[77526] 1))
      unknown call_tmp[626041] "expr temp" "maybe param" "maybe type" "temp"
      (626044 'move' call_tmp[626041](78751 call _cond_test call_tmp[626036]))
      if call_tmp[626041]
      {
        unknown yret[511726] "YVV" "temp"
        unknown call_tmp[626046] "expr temp" "maybe param" "maybe type" "temp"
        (626049 'move' call_tmp[626046](77657 call - len[77424] 1))
        unknown call_tmp[626051] "expr temp" "maybe param" "maybe type" "temp"
        (626054 'move' call_tmp[626051](77659 call chpl_build_bounded_range 0 call_tmp[626046]))
        unknown call_tmp[626056] "expr temp" "maybe param" "maybe type" "temp"
        (626059 'move' call_tmp[626056](77661 call _build_tuple call_tmp[626051]))
        (511729 'move' yret[511726](511728 'deref' call_tmp[626056]))
        (511731 yield yret[511726])
        (476360 'end of statement' len[77424])
      }
      {
        {
          unknown tmpIter[78210] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626061] "expr temp" "maybe param" "maybe type" "temp"
          (626064 'move' call_tmp[626061](77668 call chpl_build_low_bounded_range 0))
          (78213 'move' tmpIter[78210](77671 call # call_tmp[626061] numChunks[77526]))
          unknown isRngDomArr[78731] "maybe param" "temp"
          unknown tmp[420979] "maybe param" "temp"
          (420990 'move' tmp[420979](78733 call isBoundedRange tmpIter[78210]))
          unknown call_tmp[626066] "expr temp" "maybe param" "maybe type" "temp"
          (626069 'move' call_tmp[626066](420992 call _cond_invalid tmp[420979]))
          if call_tmp[626066]
          {
            (420995 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558829] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558830] "maybe param" "temp"
          unknown call_tmp[626071] "expr temp" "maybe param" "maybe type" "temp"
          (626074 'move' call_tmp[626071](420980 call isTrue tmp[420979]))
          (558835 'move' tmp[558830](558833 call _cond_test call_tmp[626071]))
          if tmp[558830]
          {
            (558840 'move' tmp[558829](558837 '_paramFoldLogical' tmp[558830] 1))
          }
          {
            unknown tmp[421000] "maybe param" "temp"
            (421011 'move' tmp[421000](78736 call isDomain tmpIter[78210]))
            unknown call_tmp[626076] "expr temp" "maybe param" "maybe type" "temp"
            (626079 'move' call_tmp[626076](421013 call _cond_invalid tmp[421000]))
            if call_tmp[626076]
            {
              (421016 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[558802] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[558803] "maybe param" "temp"
            unknown call_tmp[626081] "expr temp" "maybe param" "maybe type" "temp"
            (626084 'move' call_tmp[626081](421001 call isTrue tmp[421000]))
            (558808 'move' tmp[558803](558806 call _cond_test call_tmp[626081]))
            if tmp[558803]
            {
              (558813 'move' tmp[558802](558810 '_paramFoldLogical' tmp[558803] 1))
            }
            {
              unknown tmp[558815] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626086] "expr temp" "maybe param" "maybe type" "temp"
              (626089 'move' call_tmp[626086](78739 call isArray tmpIter[78210]))
              (558817 'move' tmp[558815](421005 call isTrue call_tmp[626086]))
              (558822 'move' tmp[558802](558819 '_paramFoldLogical' tmp[558803] tmp[558815]))
            }
            unknown tmp[558842] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (558844 'move' tmp[558842](420984 call isTrue tmp[558802]))
            (558849 'move' tmp[558829](558846 '_paramFoldLogical' tmp[558830] tmp[558842]))
          }
          (78746 'move' isRngDomArr[78731] tmp[558829])
          if isRngDomArr[78731]
          {
            const _coforallCount[78603] "const" "end count" "temp"
            (78668 'move' _coforallCount[78603](78665 call _endCountAlloc 0))
            unknown numTasks[78604] "temp"
            (78652 'move' numTasks[78604](78648 call size _mt[243] tmpIter[78210]))
            (78643 call _upEndCount _coforallCount[78603] 0 numTasks[78604])
            (476363 'end of statement')
            unknown _indexOfInterest[78610] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78611] "expr temp" "temp"
            (78620 'move' _iterator[78611](78618 call _getIterator tmpIter[78210]))
            Defer
            {
              {
                (78636 call _freeIterator _iterator[78611])
              }
            }
            { scopeless type
              (78625 'move' _indexOfInterest[78610](78622 call iteratorIndex _iterator[78611]))
            }
            ForLoop[78612]
            {
              unknown chunk[78629] "coforall index var" "index var" "insert auto destroy"
              (476365 'end of statement')
              (78631 'move' chunk[78629] _indexOfInterest[78610])
              (476366 'end of statement' chunk[78629])
              const tmp[78216] "const" "temp"
              unknown call_tmp[626093] "expr temp" "maybe param" "maybe type" "temp"
              (626096 'move' call_tmp[626093](358081 call here[90438]))
              unknown call_tmp[626100] "expr temp" "maybe param" "maybe type" "temp"
              (626103 'move' call_tmp[626100](78226 call(78223 call (partial) getChild _mt[243] call_tmp[626093]) chunk[78629]))
              unknown call_tmp[626105] "expr temp" "maybe param" "maybe type" "temp"
              (626108 'move' call_tmp[626105](78221 '_wide_get_locale' call_tmp[626100]))
              (78218 'move' tmp[78216](78220 'deref' call_tmp[626105]))
              {
                {
                  unknown call_tmp[626110] "expr temp" "maybe param" "maybe type" "temp"
                  (626113 'move' call_tmp[626110](78234 call _cond_test debugDataParNuma[93410]))
                  if call_tmp[626110]
                  {
                    unknown call_tmp[626115] "expr temp" "maybe param" "maybe type" "temp"
                    (626118 'move' call_tmp[626115](78243 call chpl_getSubloc))
                    unknown call_tmp[626120] "expr temp" "maybe param" "maybe type" "temp"
                    (626123 'move' call_tmp[626120](78240 call != chunk[78629] call_tmp[626115]))
                    unknown call_tmp[626125] "expr temp" "maybe param" "maybe type" "temp"
                    (626128 'move' call_tmp[626125](78238 call _cond_test call_tmp[626120]))
                    if call_tmp[626125]
                    {
                      unknown call_tmp[626130] "expr temp" "maybe param" "maybe type" "temp"
                      (626133 'move' call_tmp[626130](78252 call chpl_getSubloc))
                      (78247 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78629] ", on " call_tmp[626130] ") ***")
                      (476368 'end of statement' chunk[78629])
                    }
                  }
                  unknown call_tmp[626135] "expr temp" "maybe param" "maybe type" "temp"
                  (626138 'move' call_tmp[626135](78264 call - len[77424] 1))
                  unknown call_tmp[626140] "maybe param" "maybe type" "temp"
                  (626143 'move' call_tmp[626140](78259 call _computeBlock len[77424] numChunks[77526] chunk[78629] call_tmp[626135]))
                  const tmp[78257] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541395 'init var' tmp[78257] call_tmp[626140])
                  (78269 call _check_tuple_var_decl tmp[78257] 2)
                  (476370 'end of statement')
                  unknown call_tmp[626145] "maybe param" "maybe type" "temp"
                  (626148 'move' call_tmp[626145](78274 call tmp[78257] 0))
                  const lo[78272] "dead at end of block" "const" "insert auto destroy"
                  (541397 'init var' lo[78272] call_tmp[626145])
                  unknown call_tmp[626150] "maybe param" "maybe type" "temp"
                  (626153 'move' call_tmp[626150](78279 call tmp[78257] 1))
                  const hi[78277] "dead at end of block" "const" "insert auto destroy"
                  (541399 'init var' hi[78277] call_tmp[626150])
                  (78282 'end of statement')
                  unknown call_tmp[626155] "maybe param" "maybe type" "temp"
                  (626158 'move' call_tmp[626155](78286 call chpl_build_bounded_range lo[78272] hi[78277]))
                  const locRange[78284] "dead at end of block" "const" "insert auto destroy"
                  (541401 'init var' locRange[78284] call_tmp[626155])
                  (78290 'end of statement')
                  unknown call_tmp[626162] "maybe param" "maybe type" "temp"
                  (626165 'move' call_tmp[626162](78294 call size _mt[243] locRange[78284]))
                  const locLen[78292] "dead at end of block" "const" "insert auto destroy"
                  (541403 'init var' locLen[78292] call_tmp[626162])
                  (78298 'end of statement')
                  const numSublocTasks[78300] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[558856] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[558857] "maybe param" "temp"
                  unknown call_tmp[626167] "expr temp" "maybe param" "maybe type" "temp"
                  (626170 'move' call_tmp[626167](78305 call % dptpl[77456] numChunks[77526]))
                  unknown call_tmp[626172] "expr temp" "maybe param" "maybe type" "temp"
                  (626175 'move' call_tmp[626172](78302 call < chunk[78629] call_tmp[626167]))
                  (558862 'move' tmp[558857](558860 call _cond_test call_tmp[626172]))
                  if tmp[558857]
                  {
                    unknown tmp[558864] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[626177] "expr temp" "maybe param" "maybe type" "temp"
                    (626180 'move' call_tmp[626177](78312 call / dptpl[77456] numChunks[77526]))
                    (558866 'move' tmp[558864](78310 call + call_tmp[626177] 1))
                    (558871 'move' tmp[558856](558868 '_paramFoldLogical' tmp[558857] tmp[558864]))
                  }
                  {
                    unknown tmp[558873] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (558875 'move' tmp[558873](78318 call / dptpl[77456] numChunks[77526]))
                    (558880 'move' tmp[558856](558877 '_paramFoldLogical' tmp[558857] tmp[558873]))
                  }
                  (541405 'init var' numSublocTasks[78300] tmp[558856])
                  (78323 'end of statement')
                  unknown call_tmp[626182] "maybe param" "maybe type" "temp"
                  (626185 'move' call_tmp[626182](78327 call _computeNumChunks numSublocTasks[78300](ignoreRunning = 1) minIndicesPerTask[77440] locLen[78292]))
                  const numTasks[78325] "dead at end of block" "const" "insert auto destroy"
                  (541407 'init var' numTasks[78325] call_tmp[626182])
                  (78334 'end of statement' lo[78272] hi[78277] locRange[78284] chunk[78629] dptpl[77456] numChunks[77526] dptpl[77456] numChunks[77526] dptpl[77456] numChunks[77526] numSublocTasks[78300] minIndicesPerTask[77440] locLen[78292])
                  {
                    unknown tmpIter[78336] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[626187] "expr temp" "maybe param" "maybe type" "temp"
                    (626190 'move' call_tmp[626187](78343 call chpl_build_low_bounded_range 0))
                    (78338 'move' tmpIter[78336](78341 call # call_tmp[626187] numTasks[78325]))
                    unknown isRngDomArr[78346] "maybe param" "temp"
                    unknown tmp[420937] "maybe param" "temp"
                    (420948 'move' tmp[420937](78353 call isBoundedRange tmpIter[78336]))
                    unknown call_tmp[626192] "expr temp" "maybe param" "maybe type" "temp"
                    (626195 'move' call_tmp[626192](420950 call _cond_invalid tmp[420937]))
                    if call_tmp[626192]
                    {
                      (420953 call compilerError "cannot promote short-circuiting || operator")
                    }
                    unknown tmp[558914] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[558915] "maybe param" "temp"
                    unknown call_tmp[626197] "expr temp" "maybe param" "maybe type" "temp"
                    (626200 'move' call_tmp[626197](420938 call isTrue tmp[420937]))
                    (558920 'move' tmp[558915](558918 call _cond_test call_tmp[626197]))
                    if tmp[558915]
                    {
                      (558925 'move' tmp[558914](558922 '_paramFoldLogical' tmp[558915] 1))
                    }
                    {
                      unknown tmp[420958] "maybe param" "temp"
                      (420969 'move' tmp[420958](78358 call isDomain tmpIter[78336]))
                      unknown call_tmp[626202] "expr temp" "maybe param" "maybe type" "temp"
                      (626205 'move' call_tmp[626202](420971 call _cond_invalid tmp[420958]))
                      if call_tmp[626202]
                      {
                        (420974 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[558887] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[558888] "maybe param" "temp"
                      unknown call_tmp[626207] "expr temp" "maybe param" "maybe type" "temp"
                      (626210 'move' call_tmp[626207](420959 call isTrue tmp[420958]))
                      (558893 'move' tmp[558888](558891 call _cond_test call_tmp[626207]))
                      if tmp[558888]
                      {
                        (558898 'move' tmp[558887](558895 '_paramFoldLogical' tmp[558888] 1))
                      }
                      {
                        unknown tmp[558900] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        unknown call_tmp[626212] "expr temp" "maybe param" "maybe type" "temp"
                        (626215 'move' call_tmp[626212](78361 call isArray tmpIter[78336]))
                        (558902 'move' tmp[558900](420963 call isTrue call_tmp[626212]))
                        (558907 'move' tmp[558887](558904 '_paramFoldLogical' tmp[558888] tmp[558900]))
                      }
                      unknown tmp[558927] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (558929 'move' tmp[558927](420942 call isTrue tmp[558887]))
                      (558934 'move' tmp[558914](558931 '_paramFoldLogical' tmp[558915] tmp[558927]))
                    }
                    (78348 'move' isRngDomArr[78346] tmp[558914])
                    if isRngDomArr[78346]
                    {
                      const _coforallCount[78365] "const" "end count" "temp"
                      (78367 'move' _coforallCount[78365](78370 call _endCountAlloc 1))
                      unknown numTasks[78372] "temp"
                      (78374 'move' numTasks[78372](78377 call size _mt[243] tmpIter[78336]))
                      (78381 call _upEndCount _coforallCount[78365] 1 numTasks[78372])
                      (476385 'end of statement')
                      (78386 call chpl_resetTaskSpawn numTasks[78372])
                      (476386 'end of statement')
                      unknown _indexOfInterest[78388] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78390] "expr temp" "temp"
                      (78392 'move' _iterator[78390](78395 call _getIterator tmpIter[78336]))
                      Defer
                      {
                        {
                          (78399 call _freeIterator _iterator[78390])
                        }
                      }
                      { scopeless type
                        (78403 'move' _indexOfInterest[78388](78406 call iteratorIndex _iterator[78390]))
                      }
                      ForLoop[78408]
                      {
                        unknown core[78411] "coforall index var" "index var" "insert auto destroy"
                        (476388 'end of statement')
                        (78413 'move' core[78411] _indexOfInterest[78388])
                        (476389 'end of statement' core[78411])
                        {
                          {
                            unknown call_tmp[626219] "maybe param" "maybe type" "temp"
                            (626222 'move' call_tmp[626219](78422 call _computeBlock locLen[78292] numTasks[78325] core[78411] hi[78277] lo[78272] lo[78272]))
                            const tmp[78420] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541409 'init var' tmp[78420] call_tmp[626219])
                            (78431 call _check_tuple_var_decl tmp[78420] 2)
                            (476391 'end of statement')
                            unknown call_tmp[626224] "maybe param" "maybe type" "temp"
                            (626227 'move' call_tmp[626224](78436 call tmp[78420] 0))
                            const low[78434] "dead at end of block" "const" "insert auto destroy"
                            (541411 'init var' low[78434] call_tmp[626224])
                            unknown call_tmp[626229] "maybe param" "maybe type" "temp"
                            (626232 'move' call_tmp[626229](78441 call tmp[78420] 1))
                            const high[78439] "dead at end of block" "const" "insert auto destroy"
                            (541413 'init var' high[78439] call_tmp[626229])
                            (78444 'end of statement')
                            unknown call_tmp[626234] "expr temp" "maybe param" "maybe type" "temp"
                            (626237 'move' call_tmp[626234](78446 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626234]
                            {
                              unknown call_tmp[626239] "expr temp" "maybe param" "maybe type" "temp"
                              (626242 'move' call_tmp[626239](78460 call chpl_build_bounded_range low[78434] high[78439]))
                              (78450 call chpl_debug_writeln "### chunk = " chunk[78629] "  core = " core[78411] "  " "locRange = " locRange[78284] "  coreRange = " call_tmp[626239])
                              (476392 'end of statement' chunk[78629] core[78411] locRange[78284] low[78434] high[78439])
                            }
                            unknown yret[511733] "YVV" "temp"
                            unknown call_tmp[626244] "expr temp" "maybe param" "maybe type" "temp"
                            (626247 'move' call_tmp[626244](78468 call chpl_build_bounded_range low[78434] high[78439]))
                            unknown call_tmp[626249] "expr temp" "maybe param" "maybe type" "temp"
                            (626252 'move' call_tmp[626249](78466 call _build_tuple call_tmp[626244]))
                            (511736 'move' yret[511733](511735 'deref' call_tmp[626249]))
                            (511738 yield yret[511733])
                            (476398 'end of statement' low[78434] high[78439])
                          }
                          (78472 call _downEndCount _coforallCount[78365] nil[44])
                          (78417 'coforall loop')
                        }
                        label _continueLabel[78475]
                        _indexOfInterest[78388]
                        _iterator[78390]
                      }
                      label _breakLabel[78477]
                      Defer
                      {
                        {
                          (78481 call _endCountFree _coforallCount[78365])
                        }
                      }
                      (78485 call _waitEndCount _coforallCount[78365] 1 numTasks[78372])
                    }
                    {
                      const _coforallCount[78490] "const" "end count" "temp"
                      (78492 'move' _coforallCount[78490](78495 call _endCountAlloc 1))
                      unknown _indexOfInterest[78497] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78499] "expr temp" "temp"
                      (78501 'move' _iterator[78499](78504 call _getIterator tmpIter[78336]))
                      Defer
                      {
                        {
                          (78508 call _freeIterator _iterator[78499])
                        }
                      }
                      { scopeless type
                        (78512 'move' _indexOfInterest[78497](78515 call iteratorIndex _iterator[78499]))
                      }
                      ForLoop[78517]
                      {
                        unknown core[78520] "coforall index var" "index var" "insert auto destroy"
                        (476405 'end of statement')
                        (78522 'move' core[78520] _indexOfInterest[78497])
                        (476406 'end of statement' core[78520])
                        (78526 call _upEndCount _coforallCount[78490] 1)
                        (476408 'end of statement')
                        {
                          {
                            unknown call_tmp[626254] "maybe param" "maybe type" "temp"
                            (626257 'move' call_tmp[626254](78535 call _computeBlock locLen[78292] numTasks[78325] core[78520] hi[78277] lo[78272] lo[78272]))
                            const tmp[78533] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541415 'init var' tmp[78533] call_tmp[626254])
                            (78544 call _check_tuple_var_decl tmp[78533] 2)
                            (476409 'end of statement')
                            unknown call_tmp[626259] "maybe param" "maybe type" "temp"
                            (626262 'move' call_tmp[626259](78549 call tmp[78533] 0))
                            const low[78547] "dead at end of block" "const" "insert auto destroy"
                            (541417 'init var' low[78547] call_tmp[626259])
                            unknown call_tmp[626264] "maybe param" "maybe type" "temp"
                            (626267 'move' call_tmp[626264](78554 call tmp[78533] 1))
                            const high[78552] "dead at end of block" "const" "insert auto destroy"
                            (541419 'init var' high[78552] call_tmp[626264])
                            (78557 'end of statement')
                            unknown call_tmp[626269] "expr temp" "maybe param" "maybe type" "temp"
                            (626272 'move' call_tmp[626269](78559 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626269]
                            {
                              unknown call_tmp[626274] "expr temp" "maybe param" "maybe type" "temp"
                              (626277 'move' call_tmp[626274](78573 call chpl_build_bounded_range low[78547] high[78552]))
                              (78563 call chpl_debug_writeln "### chunk = " chunk[78629] "  core = " core[78520] "  " "locRange = " locRange[78284] "  coreRange = " call_tmp[626274])
                              (476410 'end of statement' chunk[78629] core[78520] locRange[78284] low[78547] high[78552])
                            }
                            unknown yret[511740] "YVV" "temp"
                            unknown call_tmp[626279] "expr temp" "maybe param" "maybe type" "temp"
                            (626282 'move' call_tmp[626279](78581 call chpl_build_bounded_range low[78547] high[78552]))
                            unknown call_tmp[626284] "expr temp" "maybe param" "maybe type" "temp"
                            (626287 'move' call_tmp[626284](78579 call _build_tuple call_tmp[626279]))
                            (511743 'move' yret[511740](511742 'deref' call_tmp[626284]))
                            (511745 yield yret[511740])
                            (476416 'end of statement' low[78547] high[78552])
                          }
                          (78585 call _downEndCount _coforallCount[78490] nil[44])
                          (78530 'coforall loop')
                        }
                        label _continueLabel[78588]
                        _indexOfInterest[78497]
                        _iterator[78499]
                      }
                      label _breakLabel[78590]
                      Defer
                      {
                        {
                          (78594 call _endCountFree _coforallCount[78490])
                        }
                      }
                      (78598 call _waitEndCount _coforallCount[78490] 1)
                    }
                  }
                }
                (78605 call _downEndCount _coforallCount[78603] nil[44])
                (78229 'coforall on block' 1 tmp[78216])
              }
              label _continueLabel[78615]
              _indexOfInterest[78610]
              _iterator[78611]
            }
            label _breakLabel[78616]
            Defer
            {
              {
                (78655 call _endCountFree _coforallCount[78603])
              }
            }
            (78660 call _waitEndCount _coforallCount[78603] 0 numTasks[78604])
          }
          {
            const _coforallCount[78672] "const" "end count" "temp"
            (78728 'move' _coforallCount[78672](78725 call _endCountAlloc 0))
            unknown _indexOfInterest[78679] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78680] "expr temp" "temp"
            (78689 'move' _iterator[78680](78687 call _getIterator tmpIter[78210]))
            Defer
            {
              {
                (78705 call _freeIterator _iterator[78680])
              }
            }
            { scopeless type
              (78694 'move' _indexOfInterest[78679](78691 call iteratorIndex _iterator[78680]))
            }
            ForLoop[78681]
            {
              unknown chunk[78698] "coforall index var" "index var" "insert auto destroy"
              (476426 'end of statement')
              (78700 'move' chunk[78698] _indexOfInterest[78679])
              (476427 'end of statement' chunk[78698])
              (78712 call _upEndCount _coforallCount[78672] 0)
              (476429 'end of statement')
              const tmp[78199] "const" "temp"
              unknown call_tmp[626289] "expr temp" "maybe param" "maybe type" "temp"
              (626292 'move' call_tmp[626289](358078 call here[90438]))
              unknown call_tmp[626296] "expr temp" "maybe param" "maybe type" "temp"
              (626299 'move' call_tmp[626296](77681 call(77676 call (partial) getChild _mt[243] call_tmp[626289]) chunk[78698]))
              unknown call_tmp[626301] "expr temp" "maybe param" "maybe type" "temp"
              (626304 'move' call_tmp[626301](78196 '_wide_get_locale' call_tmp[626296]))
              (78201 'move' tmp[78199](78197 'deref' call_tmp[626301]))
              {
                {
                  unknown call_tmp[626306] "expr temp" "maybe param" "maybe type" "temp"
                  (626309 'move' call_tmp[626306](77754 call _cond_test debugDataParNuma[93410]))
                  if call_tmp[626306]
                  {
                    unknown call_tmp[626311] "expr temp" "maybe param" "maybe type" "temp"
                    (626314 'move' call_tmp[626311](77686 call chpl_getSubloc))
                    unknown call_tmp[626316] "expr temp" "maybe param" "maybe type" "temp"
                    (626319 'move' call_tmp[626316](77687 call != chunk[78698] call_tmp[626311]))
                    unknown call_tmp[626321] "expr temp" "maybe param" "maybe type" "temp"
                    (626324 'move' call_tmp[626321](77748 call _cond_test call_tmp[626316]))
                    if call_tmp[626321]
                    {
                      unknown call_tmp[626326] "expr temp" "maybe param" "maybe type" "temp"
                      (626329 'move' call_tmp[626326](77728 call chpl_getSubloc))
                      (77746 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78698] ", on " call_tmp[626326] ") ***")
                      (476430 'end of statement' chunk[78698])
                    }
                  }
                  unknown call_tmp[626331] "expr temp" "maybe param" "maybe type" "temp"
                  (626334 'move' call_tmp[626331](77771 call - len[77424] 1))
                  unknown call_tmp[626336] "maybe param" "maybe type" "temp"
                  (626339 'move' call_tmp[626336](77773 call _computeBlock len[77424] numChunks[77526] chunk[78698] call_tmp[626331]))
                  const tmp[77774] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541421 'init var' tmp[77774] call_tmp[626336])
                  (77781 call _check_tuple_var_decl tmp[77774] 2)
                  (476432 'end of statement')
                  unknown call_tmp[626341] "maybe param" "maybe type" "temp"
                  (626344 'move' call_tmp[626341](77775 call tmp[77774] 0))
                  const lo[77759] "dead at end of block" "const" "insert auto destroy"
                  (541423 'init var' lo[77759] call_tmp[626341])
                  unknown call_tmp[626346] "maybe param" "maybe type" "temp"
                  (626349 'move' call_tmp[626346](77778 call tmp[77774] 1))
                  const hi[77761] "dead at end of block" "const" "insert auto destroy"
                  (541425 'init var' hi[77761] call_tmp[626346])
                  (77786 'end of statement')
                  unknown call_tmp[626351] "maybe param" "maybe type" "temp"
                  (626354 'move' call_tmp[626351](77789 call chpl_build_bounded_range lo[77759] hi[77761]))
                  const locRange[77791] "dead at end of block" "const" "insert auto destroy"
                  (541427 'init var' locRange[77791] call_tmp[626351])
                  (77794 'end of statement')
                  unknown call_tmp[626358] "maybe param" "maybe type" "temp"
                  (626361 'move' call_tmp[626358](77796 call size _mt[243] locRange[77791]))
                  const locLen[77799] "dead at end of block" "const" "insert auto destroy"
                  (541429 'init var' locLen[77799] call_tmp[626358])
                  (77802 'end of statement')
                  const numSublocTasks[77824] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[558941] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[558942] "maybe param" "temp"
                  unknown call_tmp[626363] "expr temp" "maybe param" "maybe type" "temp"
                  (626366 'move' call_tmp[626363](77806 call % dptpl[77456] numChunks[77526]))
                  unknown call_tmp[626368] "expr temp" "maybe param" "maybe type" "temp"
                  (626371 'move' call_tmp[626368](77808 call < chunk[78698] call_tmp[626363]))
                  (558947 'move' tmp[558942](558945 call _cond_test call_tmp[626368]))
                  if tmp[558942]
                  {
                    unknown tmp[558949] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[626373] "expr temp" "maybe param" "maybe type" "temp"
                    (626376 'move' call_tmp[626373](77812 call / dptpl[77456] numChunks[77526]))
                    (558951 'move' tmp[558949](77815 call + call_tmp[626373] 1))
                    (558956 'move' tmp[558941](558953 '_paramFoldLogical' tmp[558942] tmp[558949]))
                  }
                  {
                    unknown tmp[558958] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (558960 'move' tmp[558958](77819 call / dptpl[77456] numChunks[77526]))
                    (558965 'move' tmp[558941](558962 '_paramFoldLogical' tmp[558942] tmp[558958]))
                  }
                  (541431 'init var' numSublocTasks[77824] tmp[558941])
                  (77827 'end of statement')
                  unknown call_tmp[626378] "maybe param" "maybe type" "temp"
                  (626381 'move' call_tmp[626378](77835 call _computeNumChunks numSublocTasks[77824](ignoreRunning = 1) minIndicesPerTask[77440] locLen[77799]))
                  const numTasks[77836] "dead at end of block" "const" "insert auto destroy"
                  (541433 'init var' numTasks[77836] call_tmp[626378])
                  (77839 'end of statement' lo[77759] hi[77761] locRange[77791] chunk[78698] dptpl[77456] numChunks[77526] dptpl[77456] numChunks[77526] dptpl[77456] numChunks[77526] numSublocTasks[77824] minIndicesPerTask[77440] locLen[77799])
                  {
                    unknown tmpIter[77985] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[626383] "expr temp" "maybe param" "maybe type" "temp"
                    (626386 'move' call_tmp[626383](77842 call chpl_build_low_bounded_range 0))
                    (77988 'move' tmpIter[77985](77845 call # call_tmp[626383] numTasks[77836]))
                    unknown isRngDomArr[78177] "maybe param" "temp"
                    unknown tmp[420895] "maybe param" "temp"
                    (420906 'move' tmp[420895](78179 call isBoundedRange tmpIter[77985]))
                    unknown call_tmp[626388] "expr temp" "maybe param" "maybe type" "temp"
                    (626391 'move' call_tmp[626388](420908 call _cond_invalid tmp[420895]))
                    if call_tmp[626388]
                    {
                      (420911 call compilerError "cannot promote short-circuiting || operator")
                    }
                    unknown tmp[558999] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[559000] "maybe param" "temp"
                    unknown call_tmp[626393] "expr temp" "maybe param" "maybe type" "temp"
                    (626396 'move' call_tmp[626393](420896 call isTrue tmp[420895]))
                    (559005 'move' tmp[559000](559003 call _cond_test call_tmp[626393]))
                    if tmp[559000]
                    {
                      (559010 'move' tmp[558999](559007 '_paramFoldLogical' tmp[559000] 1))
                    }
                    {
                      unknown tmp[420916] "maybe param" "temp"
                      (420927 'move' tmp[420916](78182 call isDomain tmpIter[77985]))
                      unknown call_tmp[626398] "expr temp" "maybe param" "maybe type" "temp"
                      (626401 'move' call_tmp[626398](420929 call _cond_invalid tmp[420916]))
                      if call_tmp[626398]
                      {
                        (420932 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[558972] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[558973] "maybe param" "temp"
                      unknown call_tmp[626403] "expr temp" "maybe param" "maybe type" "temp"
                      (626406 'move' call_tmp[626403](420917 call isTrue tmp[420916]))
                      (558978 'move' tmp[558973](558976 call _cond_test call_tmp[626403]))
                      if tmp[558973]
                      {
                        (558983 'move' tmp[558972](558980 '_paramFoldLogical' tmp[558973] 1))
                      }
                      {
                        unknown tmp[558985] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        unknown call_tmp[626408] "expr temp" "maybe param" "maybe type" "temp"
                        (626411 'move' call_tmp[626408](78185 call isArray tmpIter[77985]))
                        (558987 'move' tmp[558985](420921 call isTrue call_tmp[626408]))
                        (558992 'move' tmp[558972](558989 '_paramFoldLogical' tmp[558973] tmp[558985]))
                      }
                      unknown tmp[559012] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (559014 'move' tmp[559012](420900 call isTrue tmp[558972]))
                      (559019 'move' tmp[558999](559016 '_paramFoldLogical' tmp[559000] tmp[559012]))
                    }
                    (78192 'move' isRngDomArr[78177] tmp[558999])
                    if isRngDomArr[78177]
                    {
                      const _coforallCount[78044] "const" "end count" "temp"
                      (78113 'move' _coforallCount[78044](78110 call _endCountAlloc 1))
                      unknown numTasks[78045] "temp"
                      (78097 'move' numTasks[78045](78093 call size _mt[243] tmpIter[77985]))
                      (78088 call _upEndCount _coforallCount[78044] 1 numTasks[78045])
                      (476447 'end of statement')
                      (78085 call chpl_resetTaskSpawn numTasks[78045])
                      (476448 'end of statement')
                      unknown _indexOfInterest[78052] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78053] "expr temp" "temp"
                      (78062 'move' _iterator[78053](78060 call _getIterator tmpIter[77985]))
                      Defer
                      {
                        {
                          (78078 call _freeIterator _iterator[78053])
                        }
                      }
                      { scopeless type
                        (78067 'move' _indexOfInterest[78052](78064 call iteratorIndex _iterator[78053]))
                      }
                      ForLoop[78054]
                      {
                        unknown core[78071] "coforall index var" "index var" "insert auto destroy"
                        (476450 'end of statement')
                        (78073 'move' core[78071] _indexOfInterest[78052])
                        (476451 'end of statement' core[78071])
                        {
                          {
                            unknown call_tmp[626415] "maybe param" "maybe type" "temp"
                            (626418 'move' call_tmp[626415](77994 call _computeBlock locLen[77799] numTasks[77836] core[78071] hi[77761] lo[77759] lo[77759]))
                            const tmp[77992] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541435 'init var' tmp[77992] call_tmp[626415])
                            (78003 call _check_tuple_var_decl tmp[77992] 2)
                            (476453 'end of statement')
                            unknown call_tmp[626420] "maybe param" "maybe type" "temp"
                            (626423 'move' call_tmp[626420](78008 call tmp[77992] 0))
                            const low[78006] "dead at end of block" "const" "insert auto destroy"
                            (541437 'init var' low[78006] call_tmp[626420])
                            unknown call_tmp[626425] "maybe param" "maybe type" "temp"
                            (626428 'move' call_tmp[626425](78013 call tmp[77992] 1))
                            const high[78011] "dead at end of block" "const" "insert auto destroy"
                            (541439 'init var' high[78011] call_tmp[626425])
                            (78016 'end of statement')
                            unknown call_tmp[626430] "expr temp" "maybe param" "maybe type" "temp"
                            (626433 'move' call_tmp[626430](78018 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626430]
                            {
                              unknown call_tmp[626435] "expr temp" "maybe param" "maybe type" "temp"
                              (626438 'move' call_tmp[626435](78032 call chpl_build_bounded_range low[78006] high[78011]))
                              (78022 call chpl_debug_writeln "### chunk = " chunk[78698] "  core = " core[78071] "  " "locRange = " locRange[77791] "  coreRange = " call_tmp[626435])
                              (476454 'end of statement' chunk[78698] core[78071] locRange[77791] low[78006] high[78011])
                            }
                            unknown yret[511747] "YVV" "temp"
                            unknown call_tmp[626440] "expr temp" "maybe param" "maybe type" "temp"
                            (626443 'move' call_tmp[626440](78040 call chpl_build_bounded_range low[78006] high[78011]))
                            unknown call_tmp[626445] "expr temp" "maybe param" "maybe type" "temp"
                            (626448 'move' call_tmp[626445](78038 call _build_tuple call_tmp[626440]))
                            (511750 'move' yret[511747](511749 'deref' call_tmp[626445]))
                            (511752 yield yret[511747])
                            (476460 'end of statement' low[78006] high[78011])
                          }
                          (78047 call _downEndCount _coforallCount[78044] nil[44])
                          (78046 'coforall loop')
                        }
                        label _continueLabel[78057]
                        _indexOfInterest[78052]
                        _iterator[78053]
                      }
                      label _breakLabel[78058]
                      Defer
                      {
                        {
                          (78100 call _endCountFree _coforallCount[78044])
                        }
                      }
                      (78105 call _waitEndCount _coforallCount[78044] 1 numTasks[78045])
                    }
                    {
                      const _coforallCount[78117] "const" "end count" "temp"
                      (78174 'move' _coforallCount[78117](78171 call _endCountAlloc 1))
                      unknown _indexOfInterest[78125] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78126] "expr temp" "temp"
                      (78135 'move' _iterator[78126](78133 call _getIterator tmpIter[77985]))
                      Defer
                      {
                        {
                          (78151 call _freeIterator _iterator[78126])
                        }
                      }
                      { scopeless type
                        (78140 'move' _indexOfInterest[78125](78137 call iteratorIndex _iterator[78126]))
                      }
                      ForLoop[78127]
                      {
                        unknown core[78144] "coforall index var" "index var" "insert auto destroy"
                        (476467 'end of statement')
                        (78146 'move' core[78144] _indexOfInterest[78125])
                        (476468 'end of statement' core[78144])
                        (78158 call _upEndCount _coforallCount[78117] 1)
                        (476470 'end of statement')
                        {
                          {
                            unknown call_tmp[626450] "maybe param" "maybe type" "temp"
                            (626453 'move' call_tmp[626450](77860 call _computeBlock locLen[77799] numTasks[77836] core[78144] hi[77761] lo[77759] lo[77759]))
                            const tmp[77861] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541441 'init var' tmp[77861] call_tmp[626450])
                            (77868 call _check_tuple_var_decl tmp[77861] 2)
                            (476471 'end of statement')
                            unknown call_tmp[626455] "maybe param" "maybe type" "temp"
                            (626458 'move' call_tmp[626455](77862 call tmp[77861] 0))
                            const low[77847] "dead at end of block" "const" "insert auto destroy"
                            (541443 'init var' low[77847] call_tmp[626455])
                            unknown call_tmp[626460] "maybe param" "maybe type" "temp"
                            (626463 'move' call_tmp[626460](77865 call tmp[77861] 1))
                            const high[77849] "dead at end of block" "const" "insert auto destroy"
                            (541445 'init var' high[77849] call_tmp[626460])
                            (77873 'end of statement')
                            unknown call_tmp[626465] "expr temp" "maybe param" "maybe type" "temp"
                            (626468 'move' call_tmp[626465](77973 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626465]
                            {
                              unknown call_tmp[626470] "expr temp" "maybe param" "maybe type" "temp"
                              (626473 'move' call_tmp[626470](77968 call chpl_build_bounded_range low[77847] high[77849]))
                              (77970 call chpl_debug_writeln "### chunk = " chunk[78698] "  core = " core[78144] "  " "locRange = " locRange[77791] "  coreRange = " call_tmp[626470])
                              (476472 'end of statement' chunk[78698] core[78144] locRange[77791] low[77847] high[77849])
                            }
                            unknown yret[511754] "YVV" "temp"
                            unknown call_tmp[626475] "expr temp" "maybe param" "maybe type" "temp"
                            (626478 'move' call_tmp[626475](77979 call chpl_build_bounded_range low[77847] high[77849]))
                            unknown call_tmp[626480] "expr temp" "maybe param" "maybe type" "temp"
                            (626483 'move' call_tmp[626480](77981 call _build_tuple call_tmp[626475]))
                            (511757 'move' yret[511754](511756 'deref' call_tmp[626480]))
                            (511759 yield yret[511754])
                            (476478 'end of statement' low[77847] high[77849])
                          }
                          (78120 call _downEndCount _coforallCount[78117] nil[44])
                          (78119 'coforall loop')
                        }
                        label _continueLabel[78130]
                        _indexOfInterest[78125]
                        _iterator[78126]
                      }
                      label _breakLabel[78131]
                      Defer
                      {
                        {
                          (78162 call _endCountFree _coforallCount[78117])
                        }
                      }
                      (78167 call _waitEndCount _coforallCount[78117] 1)
                    }
                  }
                }
                (78674 call _downEndCount _coforallCount[78672] nil[44])
                (78204 'coforall on block' 1 tmp[78199])
              }
              label _continueLabel[78684]
              _indexOfInterest[78679]
              _iterator[78680]
            }
            label _breakLabel[78685]
            Defer
            {
              {
                (78716 call _endCountFree _coforallCount[78672])
              }
            }
            (78721 call _waitEndCount _coforallCount[78672] 0)
          }
        }
      }
    }
    {
      unknown call_tmp[626487] "maybe param" "maybe type" "temp"
      (626490 'move' call_tmp[626487](78756 call size _mt[243] this[77323]))
      unknown v[78759] "dead at end of block" "insert auto destroy"
      (541447 'init var' v[78759] call_tmp[626487])
      (78762 'end of statement')
      const numChunks[78775] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[559026] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559027] "maybe param" "temp"
      unknown call_tmp[626492] "expr temp" "maybe param" "maybe type" "temp"
      (626495 'move' call_tmp[626492](78766 'task_get_serial'))
      (559032 'move' tmp[559027](559030 call _cond_test call_tmp[626492]))
      if tmp[559027]
      {
        (559037 'move' tmp[559026](559034 '_paramFoldLogical' tmp[559027] 1))
      }
      {
        unknown tmp[559039] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559041 'move' tmp[559039](78771 call _computeNumChunks v[78759]))
        (559046 'move' tmp[559026](559043 '_paramFoldLogical' tmp[559027] tmp[559039]))
      }
      (541449 'init var' numChunks[78775] tmp[559026])
      (78778 'end of statement' v[78759])
      unknown call_tmp[626497] "expr temp" "maybe param" "maybe type" "temp"
      (626500 'move' call_tmp[626497](78828 call _cond_test debugChapelRange[64198]))
      if call_tmp[626497]
      {
        (78786 call chpl_debug_writeln "*** RI: length=" v[78759] " numChunks=" numChunks[78775])
        (476488 'end of statement' v[78759] numChunks[78775])
        (78826 call chpl_debug_writeln "*** RI: Using " numChunks[78775] " chunk(s)")
        (476491 'end of statement' numChunks[78775])
      }
      unknown call_tmp[626502] "expr temp" "maybe param" "maybe type" "temp"
      (626505 'move' call_tmp[626502](78834 call == numChunks[78775] 1))
      unknown call_tmp[626507] "expr temp" "maybe param" "maybe type" "temp"
      (626510 'move' call_tmp[626507](79133 call _cond_test call_tmp[626502]))
      if call_tmp[626507]
      {
        unknown yret[511761] "YVV" "temp"
        unknown call_tmp[626512] "expr temp" "maybe param" "maybe type" "temp"
        (626515 'move' call_tmp[626512](78839 call - v[78759] 1))
        unknown call_tmp[626517] "expr temp" "maybe param" "maybe type" "temp"
        (626520 'move' call_tmp[626517](78841 call chpl_build_bounded_range 0 call_tmp[626512]))
        unknown call_tmp[626522] "expr temp" "maybe param" "maybe type" "temp"
        (626525 'move' call_tmp[626522](78843 call _build_tuple call_tmp[626517]))
        (511764 'move' yret[511761](511763 'deref' call_tmp[626522]))
        (511766 yield yret[511761])
        (476493 'end of statement' v[78759])
      }
      {
        {
          unknown tmpIter[78924] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626527] "expr temp" "maybe param" "maybe type" "temp"
          (626530 'move' call_tmp[626527](78849 call chpl_build_low_bounded_range 0))
          (78927 'move' tmpIter[78924](78852 call # call_tmp[626527] numChunks[78775]))
          unknown isRngDomArr[79113] "maybe param" "temp"
          unknown tmp[421021] "maybe param" "temp"
          (421032 'move' tmp[421021](79115 call isBoundedRange tmpIter[78924]))
          unknown call_tmp[626532] "expr temp" "maybe param" "maybe type" "temp"
          (626535 'move' call_tmp[626532](421034 call _cond_invalid tmp[421021]))
          if call_tmp[626532]
          {
            (421037 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559080] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559081] "maybe param" "temp"
          unknown call_tmp[626537] "expr temp" "maybe param" "maybe type" "temp"
          (626540 'move' call_tmp[626537](421022 call isTrue tmp[421021]))
          (559086 'move' tmp[559081](559084 call _cond_test call_tmp[626537]))
          if tmp[559081]
          {
            (559091 'move' tmp[559080](559088 '_paramFoldLogical' tmp[559081] 1))
          }
          {
            unknown tmp[421042] "maybe param" "temp"
            (421053 'move' tmp[421042](79118 call isDomain tmpIter[78924]))
            unknown call_tmp[626542] "expr temp" "maybe param" "maybe type" "temp"
            (626545 'move' call_tmp[626542](421055 call _cond_invalid tmp[421042]))
            if call_tmp[626542]
            {
              (421058 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[559053] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[559054] "maybe param" "temp"
            unknown call_tmp[626547] "expr temp" "maybe param" "maybe type" "temp"
            (626550 'move' call_tmp[626547](421043 call isTrue tmp[421042]))
            (559059 'move' tmp[559054](559057 call _cond_test call_tmp[626547]))
            if tmp[559054]
            {
              (559064 'move' tmp[559053](559061 '_paramFoldLogical' tmp[559054] 1))
            }
            {
              unknown tmp[559066] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626552] "expr temp" "maybe param" "maybe type" "temp"
              (626555 'move' call_tmp[626552](79121 call isArray tmpIter[78924]))
              (559068 'move' tmp[559066](421047 call isTrue call_tmp[626552]))
              (559073 'move' tmp[559053](559070 '_paramFoldLogical' tmp[559054] tmp[559066]))
            }
            unknown tmp[559093] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559095 'move' tmp[559093](421026 call isTrue tmp[559053]))
            (559100 'move' tmp[559080](559097 '_paramFoldLogical' tmp[559081] tmp[559093]))
          }
          (79128 'move' isRngDomArr[79113] tmp[559080])
          if isRngDomArr[79113]
          {
            const _coforallCount[78980] "const" "end count" "temp"
            (79049 'move' _coforallCount[78980](79046 call _endCountAlloc 1))
            unknown numTasks[78981] "temp"
            (79033 'move' numTasks[78981](79029 call size _mt[243] tmpIter[78924]))
            (79024 call _upEndCount _coforallCount[78980] 1 numTasks[78981])
            (476496 'end of statement')
            (79021 call chpl_resetTaskSpawn numTasks[78981])
            (476497 'end of statement')
            unknown _indexOfInterest[78988] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78989] "expr temp" "temp"
            (78998 'move' _iterator[78989](78996 call _getIterator tmpIter[78924]))
            Defer
            {
              {
                (79014 call _freeIterator _iterator[78989])
              }
            }
            { scopeless type
              (79003 'move' _indexOfInterest[78988](79000 call iteratorIndex _iterator[78989]))
            }
            ForLoop[78990]
            {
              unknown chunk[79007] "coforall index var" "index var" "insert auto destroy"
              (476499 'end of statement')
              (79009 'move' chunk[79007] _indexOfInterest[78988])
              (476500 'end of statement' chunk[79007])
              {
                {
                  unknown call_tmp[626559] "expr temp" "maybe param" "maybe type" "temp"
                  (626562 'move' call_tmp[626559](78938 call - v[78759] 1))
                  unknown call_tmp[626564] "maybe param" "maybe type" "temp"
                  (626567 'move' call_tmp[626564](78933 call _computeBlock v[78759] numChunks[78775] chunk[79007] call_tmp[626559]))
                  const tmp[78931] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541451 'init var' tmp[78931] call_tmp[626564])
                  (78943 call _check_tuple_var_decl tmp[78931] 2)
                  (476502 'end of statement')
                  unknown call_tmp[626569] "maybe param" "maybe type" "temp"
                  (626572 'move' call_tmp[626569](78948 call tmp[78931] 0))
                  const lo[78946] "dead at end of block" "const" "insert auto destroy"
                  (541453 'init var' lo[78946] call_tmp[626569])
                  unknown call_tmp[626574] "maybe param" "maybe type" "temp"
                  (626577 'move' call_tmp[626574](78953 call tmp[78931] 1))
                  const hi[78951] "dead at end of block" "const" "insert auto destroy"
                  (541455 'init var' hi[78951] call_tmp[626574])
                  (78956 'end of statement')
                  unknown call_tmp[626579] "expr temp" "maybe param" "maybe type" "temp"
                  (626582 'move' call_tmp[626579](78958 call _cond_test debugChapelRange[64198]))
                  if call_tmp[626579]
                  {
                    unknown call_tmp[626584] "expr temp" "maybe param" "maybe type" "temp"
                    (626587 'move' call_tmp[626584](78968 call chpl_build_bounded_range lo[78946] hi[78951]))
                    unknown call_tmp[626589] "expr temp" "maybe param" "maybe type" "temp"
                    (626592 'move' call_tmp[626589](78966 call _build_tuple call_tmp[626584]))
                    (78963 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626589])
                    (476503 'end of statement' lo[78946] hi[78951])
                  }
                  unknown yret[511768] "YVV" "temp"
                  unknown call_tmp[626594] "expr temp" "maybe param" "maybe type" "temp"
                  (626597 'move' call_tmp[626594](78976 call chpl_build_bounded_range lo[78946] hi[78951]))
                  unknown call_tmp[626599] "expr temp" "maybe param" "maybe type" "temp"
                  (626602 'move' call_tmp[626599](78974 call _build_tuple call_tmp[626594]))
                  (511771 'move' yret[511768](511770 'deref' call_tmp[626599]))
                  (511773 yield yret[511768])
                  (476506 'end of statement' lo[78946] hi[78951])
                }
                (78983 call _downEndCount _coforallCount[78980] nil[44])
                (78982 'coforall loop')
              }
              label _continueLabel[78993]
              _indexOfInterest[78988]
              _iterator[78989]
            }
            label _breakLabel[78994]
            Defer
            {
              {
                (79036 call _endCountFree _coforallCount[78980])
              }
            }
            (79041 call _waitEndCount _coforallCount[78980] 1 numTasks[78981])
          }
          {
            const _coforallCount[79053] "const" "end count" "temp"
            (79110 'move' _coforallCount[79053](79107 call _endCountAlloc 1))
            unknown _indexOfInterest[79061] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[79062] "expr temp" "temp"
            (79071 'move' _iterator[79062](79069 call _getIterator tmpIter[78924]))
            Defer
            {
              {
                (79087 call _freeIterator _iterator[79062])
              }
            }
            { scopeless type
              (79076 'move' _indexOfInterest[79061](79073 call iteratorIndex _iterator[79062]))
            }
            ForLoop[79063]
            {
              unknown chunk[79080] "coforall index var" "index var" "insert auto destroy"
              (476513 'end of statement')
              (79082 'move' chunk[79080] _indexOfInterest[79061])
              (476514 'end of statement' chunk[79080])
              (79094 call _upEndCount _coforallCount[79053] 1)
              (476516 'end of statement')
              {
                {
                  unknown call_tmp[626604] "expr temp" "maybe param" "maybe type" "temp"
                  (626607 'move' call_tmp[626604](78866 call - v[78759] 1))
                  unknown call_tmp[626609] "maybe param" "maybe type" "temp"
                  (626612 'move' call_tmp[626609](78868 call _computeBlock v[78759] numChunks[78775] chunk[79080] call_tmp[626604]))
                  const tmp[78869] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541457 'init var' tmp[78869] call_tmp[626609])
                  (78876 call _check_tuple_var_decl tmp[78869] 2)
                  (476517 'end of statement')
                  unknown call_tmp[626614] "maybe param" "maybe type" "temp"
                  (626617 'move' call_tmp[626614](78870 call tmp[78869] 0))
                  const lo[78854] "dead at end of block" "const" "insert auto destroy"
                  (541459 'init var' lo[78854] call_tmp[626614])
                  unknown call_tmp[626619] "maybe param" "maybe type" "temp"
                  (626622 'move' call_tmp[626619](78873 call tmp[78869] 1))
                  const hi[78856] "dead at end of block" "const" "insert auto destroy"
                  (541461 'init var' hi[78856] call_tmp[626619])
                  (78881 'end of statement')
                  unknown call_tmp[626624] "expr temp" "maybe param" "maybe type" "temp"
                  (626627 'move' call_tmp[626624](78911 call _cond_test debugChapelRange[64198]))
                  if call_tmp[626624]
                  {
                    unknown call_tmp[626629] "expr temp" "maybe param" "maybe type" "temp"
                    (626632 'move' call_tmp[626629](78905 call chpl_build_bounded_range lo[78854] hi[78856]))
                    unknown call_tmp[626634] "expr temp" "maybe param" "maybe type" "temp"
                    (626637 'move' call_tmp[626634](78907 call _build_tuple call_tmp[626629]))
                    (78909 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626634])
                    (476518 'end of statement' lo[78854] hi[78856])
                  }
                  unknown yret[511775] "YVV" "temp"
                  unknown call_tmp[626639] "expr temp" "maybe param" "maybe type" "temp"
                  (626642 'move' call_tmp[626639](78918 call chpl_build_bounded_range lo[78854] hi[78856]))
                  unknown call_tmp[626644] "expr temp" "maybe param" "maybe type" "temp"
                  (626647 'move' call_tmp[626644](78920 call _build_tuple call_tmp[626639]))
                  (511778 'move' yret[511775](511777 'deref' call_tmp[626644]))
                  (511780 yield yret[511775])
                  (476521 'end of statement' lo[78854] hi[78856])
                }
                (79056 call _downEndCount _coforallCount[79053] nil[44])
                (79055 'coforall loop')
              }
              label _continueLabel[79066]
              _indexOfInterest[79061]
              _iterator[79062]
            }
            label _breakLabel[79067]
            Defer
            {
              {
                (79098 call _endCountFree _coforallCount[79053])
              }
            }
            (79103 call _waitEndCount _coforallCount[79053] 1)
          }
        }
      }
    }
    (511724 return ret[511722])
  }
  where {
    (77333 call == tag[77318] leader[447])
  }
  function range[64319](?).these[79152](arg _mt[79159]:_MT[238], arg this[79156]:range[64319](?) :
  range[64319](?), param arg tag[79149]:iterKind[453], arg followThis[79154]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511784] "RVV" "temp"
    unknown tmp[421084] "maybe param" "temp"
    (421095 'move' tmp[421084] 1)
    unknown call_tmp[626649] "expr temp" "maybe param" "maybe type" "temp"
    (626652 'move' call_tmp[626649](421097 call _cond_invalid tmp[421084]))
    if call_tmp[626649]
    {
      (421100 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559107] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559108] "maybe param" "temp"
    unknown call_tmp[626654] "expr temp" "maybe param" "maybe type" "temp"
    (626657 'move' call_tmp[626654](421085 call isTrue tmp[421084]))
    (559113 'move' tmp[559108](559111 call _cond_test call_tmp[626654]))
    if tmp[559108]
    {
      unknown tmp[559115] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626661] "expr temp" "maybe param" "maybe type" "temp"
      (626664 'move' call_tmp[626661](79174 call(79170 call (partial) isAmbiguous _mt[243] this[79156])))
      (559117 'move' tmp[559115](421088 call isTrue call_tmp[626661]))
      (559122 'move' tmp[559107](559119 '_paramFoldLogical' tmp[559108] tmp[559115]))
    }
    {
      (559127 'move' tmp[559107](559124 '_paramFoldLogical' tmp[559108] 0))
    }
    unknown call_tmp[626666] "expr temp" "maybe param" "maybe type" "temp"
    (626669 'move' call_tmp[626666](79185 call _cond_test tmp[559107]))
    if call_tmp[626666]
    {
      (79183 call boundsCheckHalt module=[255] HaltWrappers[210018] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358088 'referenced modules list' HaltWrappers[210018])
    }
    unknown call_tmp[626673] "expr temp" "maybe param" "maybe type" "temp"
    (626676 'move' call_tmp[626673](376002 call boundedType _mt[243] this[79156]))
    unknown call_tmp[626678] "expr temp" "maybe param" "maybe type" "temp"
    (626681 'move' call_tmp[626678](79196 call == call_tmp[626673] boundedNone[64214]))
    unknown call_tmp[626683] "expr temp" "maybe param" "maybe type" "temp"
    (626686 'move' call_tmp[626683](79203 call _cond_test call_tmp[626678]))
    if call_tmp[626683]
    {
      (79201 call compilerError "iteration over a range with no bounds")
    }
    unknown tmp[421105] "maybe param" "temp"
    unknown call_tmp[626690] "expr temp" "maybe param" "maybe type" "temp"
    (626693 'move' call_tmp[626690](376007 call stridable _mt[243] this[79156]))
    (421116 'move' tmp[421105](79209 call ! call_tmp[626690]))
    unknown call_tmp[626695] "expr temp" "maybe param" "maybe type" "temp"
    (626698 'move' call_tmp[626695](421118 call _cond_invalid tmp[421105]))
    if call_tmp[626695]
    {
      (421121 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559134] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559135] "maybe param" "temp"
    unknown call_tmp[626700] "expr temp" "maybe param" "maybe type" "temp"
    (626703 'move' call_tmp[626700](421106 call isTrue tmp[421105]))
    (559140 'move' tmp[559135](559138 call _cond_test call_tmp[626700]))
    if tmp[559135]
    {
      unknown tmp[559142] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626707] "expr temp" "maybe param" "maybe type" "temp"
      (626710 'move' call_tmp[626707](376012 call boundedType _mt[243] this[79156]))
      unknown call_tmp[626712] "expr temp" "maybe param" "maybe type" "temp"
      (626715 'move' call_tmp[626712](79216 call == call_tmp[626707] boundedHigh[64212]))
      (559144 'move' tmp[559142](421109 call isTrue call_tmp[626712]))
      (559149 'move' tmp[559134](559146 '_paramFoldLogical' tmp[559135] tmp[559142]))
    }
    {
      (559154 'move' tmp[559134](559151 '_paramFoldLogical' tmp[559135] 0))
    }
    unknown call_tmp[626717] "expr temp" "maybe param" "maybe type" "temp"
    (626720 'move' call_tmp[626717](79241 call _cond_test tmp[559134]))
    if call_tmp[626717]
    {
      (79239 call compilerError "iteration over a range with no first index")
    }
    unknown call_tmp[626724] "expr temp" "maybe param" "maybe type" "temp"
    (626727 'move' call_tmp[626724](79247 call size _mt[243] followThis[79154]))
    unknown call_tmp[626729] "expr temp" "maybe param" "maybe type" "temp"
    (626732 'move' call_tmp[626729](79251 call != call_tmp[626724] 1))
    unknown call_tmp[626734] "expr temp" "maybe param" "maybe type" "temp"
    (626737 'move' call_tmp[626734](79274 call _cond_test call_tmp[626729]))
    if call_tmp[626734]
    {
      (79272 call compilerError "iteration over a range with multi-dimensional iterator")
    }
    unknown call_tmp[626739] "expr temp" "maybe param" "maybe type" "temp"
    (626742 'move' call_tmp[626739](79302 call _cond_test debugChapelRange[64198]))
    if call_tmp[626739]
    {
      (79300 call chpl_debug_writeln "In range follower code: Following " followThis[79154])
    }
    unknown call_tmp[626744] "maybe param" "maybe type" "temp"
    (626747 'move' call_tmp[626744](79310 call followThis[79154] 0))
    unknown myFollowThis[79311] "dead at end of block" "insert auto destroy"
    (541463 'init var' myFollowThis[79311] call_tmp[626744])
    (79314 'end of statement')
    unknown call_tmp[626749] "expr temp" "maybe param" "maybe type" "temp"
    (626752 'move' call_tmp[626749](79338 call _cond_test debugChapelRange[64198]))
    if call_tmp[626749]
    {
      (79336 call chpl_debug_writeln "Range = " myFollowThis[79311])
      (476534 'end of statement' myFollowThis[79311])
    }
    unknown tmp[421126] "maybe param" "temp"
    (421137 'move' tmp[421126] 1)
    unknown call_tmp[626754] "expr temp" "maybe param" "maybe type" "temp"
    (626757 'move' call_tmp[626754](421139 call _cond_invalid tmp[421126]))
    if call_tmp[626754]
    {
      (421142 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559161] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559162] "maybe param" "temp"
    unknown call_tmp[626759] "expr temp" "maybe param" "maybe type" "temp"
    (626762 'move' call_tmp[626759](421127 call isTrue tmp[421126]))
    (559167 'move' tmp[559162](559165 call _cond_test call_tmp[626759]))
    if tmp[559162]
    {
      unknown tmp[559169] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626766] "expr temp" "maybe param" "maybe type" "temp"
      (626769 'move' call_tmp[626766](79349 call(79345 call (partial) hasFirst _mt[243] this[79156])))
      unknown call_tmp[626771] "expr temp" "maybe param" "maybe type" "temp"
      (626774 'move' call_tmp[626771](79350 call ! call_tmp[626766]))
      (559171 'move' tmp[559169](421130 call isTrue call_tmp[626771]))
      (559176 'move' tmp[559161](559173 '_paramFoldLogical' tmp[559162] tmp[559169]))
    }
    {
      (559181 'move' tmp[559161](559178 '_paramFoldLogical' tmp[559162] 0))
    }
    unknown call_tmp[626776] "expr temp" "maybe param" "maybe type" "temp"
    (626779 'move' call_tmp[626776](79412 call _cond_test tmp[559161]))
    if call_tmp[626776]
    {
      unknown call_tmp[626783] "expr temp" "maybe param" "maybe type" "temp"
      (626786 'move' call_tmp[626783](79359 call(79355 call (partial) isEmpty _mt[243] this[79156])))
      unknown call_tmp[626788] "expr temp" "maybe param" "maybe type" "temp"
      (626791 'move' call_tmp[626788](79407 call _cond_test call_tmp[626783]))
      if call_tmp[626788]
      {
        unknown call_tmp[626795] "expr temp" "maybe param" "maybe type" "temp"
        (626798 'move' call_tmp[626795](79365 call(79361 call (partial) isEmpty _mt[243] myFollowThis[79311])))
        unknown call_tmp[626800] "expr temp" "maybe param" "maybe type" "temp"
        (626803 'move' call_tmp[626800](79366 call ! call_tmp[626795]))
        unknown call_tmp[626805] "expr temp" "maybe param" "maybe type" "temp"
        (626808 'move' call_tmp[626805](79392 call _cond_test call_tmp[626800]))
        if call_tmp[626805]
        {
          (79390 call boundsCheckHalt module=[255] HaltWrappers[210018] "size mismatch in zippered iteration")
          (358100 'referenced modules list' HaltWrappers[210018])
        }
      }
      {
        (79404 call boundsCheckHalt module=[255] HaltWrappers[210018] "iteration over a range with no first index")
        (358106 'referenced modules list' HaltWrappers[210018])
      }
    }
    unknown tmp[421168] "maybe param" "temp"
    (421179 'move' tmp[421168] 1)
    unknown call_tmp[626810] "expr temp" "maybe param" "maybe type" "temp"
    (626813 'move' call_tmp[626810](421181 call _cond_invalid tmp[421168]))
    if call_tmp[626810]
    {
      (421184 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559188] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559189] "maybe param" "temp"
    unknown call_tmp[626815] "expr temp" "maybe param" "maybe type" "temp"
    (626818 'move' call_tmp[626815](421169 call isTrue tmp[421168]))
    (559194 'move' tmp[559189](559192 call _cond_test call_tmp[626815]))
    if tmp[559189]
    {
      unknown tmp[559196] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626822] "expr temp" "maybe param" "maybe type" "temp"
      (626825 'move' call_tmp[626822](79422 call(79418 call (partial) hasFirst _mt[243] myFollowThis[79311])))
      unknown call_tmp[626827] "expr temp" "maybe param" "maybe type" "temp"
      (626830 'move' call_tmp[626827](79423 call ! call_tmp[626822]))
      (559198 'move' tmp[559196](421172 call isTrue call_tmp[626827]))
      (559203 'move' tmp[559188](559200 '_paramFoldLogical' tmp[559189] tmp[559196]))
    }
    {
      (559208 'move' tmp[559188](559205 '_paramFoldLogical' tmp[559189] 0))
    }
    unknown call_tmp[626832] "expr temp" "maybe param" "maybe type" "temp"
    (626835 'move' call_tmp[626832](79475 call _cond_test tmp[559188]))
    if call_tmp[626832]
    {
      unknown tmp[421147] "maybe param" "temp"
      unknown call_tmp[626839] "expr temp" "maybe param" "maybe type" "temp"
      (626842 'move' call_tmp[626839](79432 call(79428 call (partial) isAmbiguous _mt[243] myFollowThis[79311])))
      (421158 'move' tmp[421147](79433 call ! call_tmp[626839]))
      unknown call_tmp[626844] "expr temp" "maybe param" "maybe type" "temp"
      (626847 'move' call_tmp[626844](421160 call _cond_invalid tmp[421147]))
      if call_tmp[626844]
      {
        (421163 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559215] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559216] "maybe param" "temp"
      unknown call_tmp[626849] "expr temp" "maybe param" "maybe type" "temp"
      (626852 'move' call_tmp[626849](421148 call isTrue tmp[421147]))
      (559221 'move' tmp[559216](559219 call _cond_test call_tmp[626849]))
      if tmp[559216]
      {
        unknown tmp[559223] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626856] "expr temp" "maybe param" "maybe type" "temp"
        (626859 'move' call_tmp[626856](79440 call(79436 call (partial) isEmpty _mt[243] myFollowThis[79311])))
        (559225 'move' tmp[559223](421151 call isTrue call_tmp[626856]))
        (559230 'move' tmp[559215](559227 '_paramFoldLogical' tmp[559216] tmp[559223]))
      }
      {
        (559235 'move' tmp[559215](559232 '_paramFoldLogical' tmp[559216] 0))
      }
      unknown call_tmp[626861] "expr temp" "maybe param" "maybe type" "temp"
      (626864 'move' call_tmp[626861](79443 call ! tmp[559215]))
      unknown call_tmp[626866] "expr temp" "maybe param" "maybe type" "temp"
      (626869 'move' call_tmp[626866](79469 call _cond_test call_tmp[626861]))
      if call_tmp[626866]
      {
        (79467 call boundsCheckHalt module=[255] HaltWrappers[210018] "zippered iteration over a range with no first index")
        (358115 'referenced modules list' HaltWrappers[210018])
      }
    }
    unknown tmp[421252] "maybe param" "temp"
    unknown tmp[421273] "maybe param" "temp"
    (421284 'move' tmp[421273](79482 call isBoundedRange myFollowThis[79311]))
    unknown call_tmp[626871] "expr temp" "maybe param" "maybe type" "temp"
    (626874 'move' call_tmp[626871](421286 call _cond_invalid tmp[421273]))
    if call_tmp[626871]
    {
      (421289 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559242] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559243] "maybe param" "temp"
    unknown call_tmp[626876] "expr temp" "maybe param" "maybe type" "temp"
    (626879 'move' call_tmp[626876](421274 call isTrue tmp[421273]))
    (559248 'move' tmp[559243](559246 call _cond_test call_tmp[626876]))
    if tmp[559243]
    {
      unknown tmp[559250] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626883] "expr temp" "maybe param" "maybe type" "temp"
      (626886 'move' call_tmp[626883](79484 call stridable _mt[243] myFollowThis[79311]))
      unknown call_tmp[626888] "expr temp" "maybe param" "maybe type" "temp"
      (626891 'move' call_tmp[626888](79487 call ! call_tmp[626883]))
      (559252 'move' tmp[559250](421277 call isTrue call_tmp[626888]))
      (559257 'move' tmp[559242](559254 '_paramFoldLogical' tmp[559243] tmp[559250]))
    }
    {
      (559262 'move' tmp[559242](559259 '_paramFoldLogical' tmp[559243] 0))
    }
    (421263 'move' tmp[421252] tmp[559242])
    unknown call_tmp[626893] "expr temp" "maybe param" "maybe type" "temp"
    (626896 'move' call_tmp[626893](421265 call _cond_invalid tmp[421252]))
    if call_tmp[626893]
    {
      (421268 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[559269] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559270] "maybe param" "temp"
    unknown call_tmp[626898] "expr temp" "maybe param" "maybe type" "temp"
    (626901 'move' call_tmp[626898](421253 call isTrue tmp[421252]))
    (559275 'move' tmp[559270](559273 call _cond_test call_tmp[626898]))
    if tmp[559270]
    {
      (559280 'move' tmp[559269](559277 '_paramFoldLogical' tmp[559270] 1))
    }
    {
      unknown tmp[559282] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626905] "expr temp" "maybe param" "maybe type" "temp"
      (626908 'move' call_tmp[626905](79496 call(79492 call (partial) hasLast _mt[243] myFollowThis[79311])))
      (559284 'move' tmp[559282](421257 call isTrue call_tmp[626905]))
      (559289 'move' tmp[559269](559286 '_paramFoldLogical' tmp[559270] tmp[559282]))
    }
    unknown call_tmp[626910] "expr temp" "maybe param" "maybe type" "temp"
    (626913 'move' call_tmp[626910](80147 call _cond_test tmp[559269]))
    if call_tmp[626910]
    {
      unknown call_tmp[626917] "maybe param" "maybe type" "temp"
      (626920 'move' call_tmp[626917](79500 call size _mt[243] myFollowThis[79311]))
      const flwlen[79503] "dead at end of block" "const" "insert auto destroy"
      (541465 'init var' flwlen[79503] call_tmp[626917])
      (79506 'end of statement' myFollowThis[79311])
      unknown tmp[421189] "maybe param" "temp"
      (421200 'move' tmp[421189] 1)
      unknown call_tmp[626922] "expr temp" "maybe param" "maybe type" "temp"
      (626925 'move' call_tmp[626922](421202 call _cond_invalid tmp[421189]))
      if call_tmp[626922]
      {
        (421205 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559296] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559297] "maybe param" "temp"
      unknown call_tmp[626927] "expr temp" "maybe param" "maybe type" "temp"
      (626930 'move' call_tmp[626927](421190 call isTrue tmp[421189]))
      (559302 'move' tmp[559297](559300 call _cond_test call_tmp[626927]))
      if tmp[559297]
      {
        unknown tmp[559304] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626934] "expr temp" "maybe param" "maybe type" "temp"
        (626937 'move' call_tmp[626934](79514 call(79510 call (partial) hasLast _mt[243] this[79156])))
        (559306 'move' tmp[559304](421193 call isTrue call_tmp[626934]))
        (559311 'move' tmp[559296](559308 '_paramFoldLogical' tmp[559297] tmp[559304]))
      }
      {
        (559316 'move' tmp[559296](559313 '_paramFoldLogical' tmp[559297] 0))
      }
      unknown call_tmp[626939] "expr temp" "maybe param" "maybe type" "temp"
      (626942 'move' call_tmp[626939](79586 call _cond_test tmp[559296]))
      if call_tmp[626939]
      {
        unknown call_tmp[626944] "expr temp" "maybe param" "maybe type" "temp"
        (626947 'move' call_tmp[626944](79520 call isBoundedRange this[79156]))
        unknown call_tmp[626949] "expr temp" "maybe param" "maybe type" "temp"
        (626952 'move' call_tmp[626949](79580 call _cond_test call_tmp[626944]))
        if call_tmp[626949]
        {
          unknown call_tmp[626956] "expr temp" "maybe param" "maybe type" "temp"
          (626959 'move' call_tmp[626956](79522 call size _mt[243] this[79156]))
          unknown call_tmp[626961] "expr temp" "maybe param" "maybe type" "temp"
          (626964 'move' call_tmp[626961](79526 call < call_tmp[626956] flwlen[79503]))
          unknown call_tmp[626966] "expr temp" "maybe param" "maybe type" "temp"
          (626969 'move' call_tmp[626966](79552 call _cond_test call_tmp[626961]))
          if call_tmp[626966]
          {
            (79550 call boundsCheckHalt module=[255] HaltWrappers[210018] "zippered iteration over a range with too few indices")
            (358126 'referenced modules list' HaltWrappers[210018])
          }
        }
        {
          (79578 call assert 0 "hasFirst && hasLast do not imply isBoundedRange")
        }
      }
      unknown tmp[421210] "maybe param" "temp"
      (421221 'move' tmp[421210](79591 call stridable _mt[243] this[79156]))
      unknown call_tmp[626973] "expr temp" "maybe param" "maybe type" "temp"
      (626976 'move' call_tmp[626973](421223 call _cond_invalid tmp[421210]))
      if call_tmp[626973]
      {
        (421226 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559323] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559324] "maybe param" "temp"
      unknown call_tmp[626978] "expr temp" "maybe param" "maybe type" "temp"
      (626981 'move' call_tmp[626978](421211 call isTrue tmp[421210]))
      (559329 'move' tmp[559324](559327 call _cond_test call_tmp[626978]))
      if tmp[559324]
      {
        (559334 'move' tmp[559323](559331 '_paramFoldLogical' tmp[559324] 1))
      }
      {
        unknown tmp[559336] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626985] "expr temp" "maybe param" "maybe type" "temp"
        (626988 'move' call_tmp[626985](79595 call stridable _mt[243] myFollowThis[79311]))
        (559338 'move' tmp[559336](421215 call isTrue call_tmp[626985]))
        (559343 'move' tmp[559323](559340 '_paramFoldLogical' tmp[559324] tmp[559336]))
      }
      unknown call_tmp[626990] "expr temp" "maybe param" "maybe type" "temp"
      (626993 'move' call_tmp[626990](79936 call _cond_test tmp[559323]))
      if call_tmp[626990]
      {
        unknown call_tmp[626997] "expr temp" "maybe param" "maybe type" "temp"
        (627000 'move' call_tmp[626997](79603 call(376027 call (partial) chpl_intToIdx _mt[243] this[79156]) 1))
        unknown call_tmp[627004] "expr temp" "maybe param" "maybe type" "temp"
        (627007 'move' call_tmp[627004](79607 call(376031 call (partial) chpl_intToIdx _mt[243] this[79156]) 0))
        unknown call_tmp[627009] "expr temp" "maybe param" "maybe type" "temp"
        (627012 'move' call_tmp[627009](79608 call chpl_build_bounded_range call_tmp[626997] call_tmp[627004]))
        unknown call_tmp[627016] "expr temp" "maybe param" "maybe type" "temp"
        (627019 'move' call_tmp[627016](376035 call intIdxType _mt[243] this[79156]))
        unknown call_tmp[627021] "expr temp" "maybe param" "maybe type" "temp"
        (627024 'move' call_tmp[627021](79614 call chpl__rangeStrideType call_tmp[627016]))
        unknown call_tmp[627026] "expr temp" "maybe param" "maybe type" "temp"
        (627029 'move' call_tmp[627026](79615 call _cast call_tmp[627021] 1))
        unknown call_tmp[627031] "maybe param" "maybe type" "temp"
        (627034 'move' call_tmp[627031](79617 call chpl_by call_tmp[627009] call_tmp[627026]))
        unknown r[79619] "dead at end of block" "insert auto destroy"
        (541467 'init var' r[79619] call_tmp[627031])
        (79622 'end of statement')
        unknown call_tmp[627036] "expr temp" "maybe param" "maybe type" "temp"
        (627039 'move' call_tmp[627036](79626 call != flwlen[79503] 0))
        unknown call_tmp[627041] "expr temp" "maybe param" "maybe type" "temp"
        (627044 'move' call_tmp[627041](79728 call _cond_test call_tmp[627036]))
        if call_tmp[627041]
        {
          unknown call_tmp[627048] "expr temp" "maybe param" "maybe type" "temp"
          (627051 'move' call_tmp[627048](79629 call stride _mt[243] this[79156]))
          unknown call_tmp[627055] "expr temp" "maybe param" "maybe type" "temp"
          (627058 'move' call_tmp[627055](79633 call stride _mt[243] myFollowThis[79311]))
          unknown call_tmp[627060] "maybe param" "maybe type" "temp"
          (627063 'move' call_tmp[627060](79636 call * call_tmp[627048] call_tmp[627055]))
          const stride[79638] "dead at end of block" "const" "insert auto destroy"
          (541469 'init var' stride[79638] call_tmp[627060])
          (79641 'end of statement')
          unknown call_tmp[627069] "expr temp" "maybe param" "maybe type" "temp"
          (627072 'move' call_tmp[627069](79648 call first _mt[243] myFollowThis[79311]))
          unknown call_tmp[627074] "maybe param" "maybe type" "temp"
          (627077 'move' call_tmp[627074](79652 call(79644 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627069]))
          unknown low[79653] "dead at end of block" "insert auto destroy"
          (541471 'init var' low[79653] call_tmp[627074])
          (79656 'end of statement')
          unknown call_tmp[627083] "expr temp" "maybe param" "maybe type" "temp"
          (627086 'move' call_tmp[627083](376045 call strType _mt[243] this[79156]))
          unknown call_tmp[627088] "expr temp" "maybe param" "maybe type" "temp"
          (627091 'move' call_tmp[627088](79661 call chpl__idxToInt low[79653]))
          unknown call_tmp[627093] "expr temp" "maybe param" "maybe type" "temp"
          (627096 'move' call_tmp[627093](79663 call _cast call_tmp[627083] call_tmp[627088]))
          unknown call_tmp[627100] "expr temp" "maybe param" "maybe type" "temp"
          (627103 'move' call_tmp[627100](376051 call strType _mt[243] this[79156]))
          unknown call_tmp[627105] "expr temp" "maybe param" "maybe type" "temp"
          (627108 'move' call_tmp[627105](79668 call - flwlen[79503] 1))
          unknown call_tmp[627110] "expr temp" "maybe param" "maybe type" "temp"
          (627113 'move' call_tmp[627110](79671 call _cast call_tmp[627100] call_tmp[627105]))
          unknown call_tmp[627115] "expr temp" "maybe param" "maybe type" "temp"
          (627118 'move' call_tmp[627115](79673 call * stride[79638] call_tmp[627110]))
          unknown call_tmp[627120] "expr temp" "maybe param" "maybe type" "temp"
          (627123 'move' call_tmp[627120](79675 call + call_tmp[627093] call_tmp[627115]))
          unknown call_tmp[627125] "maybe param" "maybe type" "temp"
          (627128 'move' call_tmp[627125](79678 call(376040 call (partial) chpl_intToIdx _mt[243] this[79156]) call_tmp[627120]))
          unknown high[79679] "dead at end of block" "insert auto destroy"
          (541473 'init var' high[79679] call_tmp[627125])
          (79682 'end of statement' myFollowThis[79311] myFollowThis[79311] low[79653] stride[79638] flwlen[79503])
          unknown call_tmp[627134] "expr temp" "maybe param" "maybe type" "temp"
          (627137 'move' call_tmp[627134](79690 call last _mt[243] myFollowThis[79311]))
          unknown call_tmp[627139] "expr temp" "maybe param" "maybe type" "temp"
          (627142 'move' call_tmp[627139](79694 call(79686 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627134]))
          unknown call_tmp[627144] "expr temp" "maybe param" "maybe type" "temp"
          (627147 'move' call_tmp[627144](79695 call == high[79679] call_tmp[627139]))
          (79698 call assert call_tmp[627144])
          (476554 'end of statement' high[79679] myFollowThis[79311])
          unknown call_tmp[627149] "expr temp" "maybe param" "maybe type" "temp"
          (627152 'move' call_tmp[627149](79702 call < stride[79638] 0))
          unknown call_tmp[627154] "expr temp" "maybe param" "maybe type" "temp"
          (627157 'move' call_tmp[627154](79709 call _cond_test call_tmp[627149]))
          if call_tmp[627154]
          {
            (79706 call <=> low[79653] high[79679])
            (476557 'end of statement' low[79653] high[79679])
          }
          unknown call_tmp[627159] "expr temp" "maybe param" "maybe type" "temp"
          (627162 'move' call_tmp[627159](79717 call chpl_build_bounded_range low[79653] high[79679]))
          unknown call_tmp[627166] "expr temp" "maybe param" "maybe type" "temp"
          (627169 'move' call_tmp[627166](376063 call strType _mt[243] this[79156]))
          unknown call_tmp[627171] "expr temp" "maybe param" "maybe type" "temp"
          (627174 'move' call_tmp[627171](79721 call _cast call_tmp[627166] stride[79638]))
          unknown call_tmp[627176] "expr temp" "maybe param" "maybe type" "temp"
          (627179 'move' call_tmp[627176](79723 call chpl_by call_tmp[627159] call_tmp[627171]))
          (79725 call = r[79619] call_tmp[627176])
          (476560 'end of statement' r[79619] low[79653] high[79679] stride[79638])
        }
        unknown call_tmp[627181] "expr temp" "maybe param" "maybe type" "temp"
        (627184 'move' call_tmp[627181](79755 call _cond_test debugChapelRange[64198]))
        if call_tmp[627181]
        {
          (79753 call chpl_debug_writeln "Expanded range = " r[79619])
          (476565 'end of statement' r[79619])
        }
        {
          unknown _indexOfInterest[79765] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79766] "expr temp" "temp"
          (79775 'move' _iterator[79766](79773 call _getIterator r[79619]))
          Defer
          {
            {
              (79791 call _freeIterator _iterator[79766])
            }
          }
          { scopeless type
            (79780 'move' _indexOfInterest[79765](79777 call iteratorIndex _iterator[79766]))
          }
          ForLoop[79767]
          {
            unknown i[79784] "index var" "insert auto destroy"
            (476568 'end of statement')
            (79786 'move' i[79784] _indexOfInterest[79765])
            (476569 'end of statement' i[79784])
            unknown yret[511788] "YVV" "temp"
            (511791 'move' yret[511788](511790 'deref' i[79784]))
            (511793 yield yret[511788])
            (476571 'end of statement' i[79784])
            label _continueLabel[79770]
            _indexOfInterest[79765]
            _iterator[79766]
          }
          label _breakLabel[79771]
        }
      }
      {
        unknown call_tmp[627188] "expr temp" "maybe param" "maybe type" "temp"
        (627191 'move' call_tmp[627188](376072 call idxType _mt[243] this[79156]))
        unknown call_tmp[627193] "expr temp" "maybe param" "maybe type" "temp"
        (627196 'move' call_tmp[627193](79802 call chpl__intToIdx call_tmp[627188] 1))
        unknown call_tmp[627200] "expr temp" "maybe param" "maybe type" "temp"
        (627203 'move' call_tmp[627200](376077 call idxType _mt[243] this[79156]))
        unknown call_tmp[627205] "expr temp" "maybe param" "maybe type" "temp"
        (627208 'move' call_tmp[627205](79807 call chpl__intToIdx call_tmp[627200] 0))
        unknown call_tmp[627210] "maybe param" "maybe type" "temp"
        (627213 'move' call_tmp[627210](79808 call chpl_build_bounded_range call_tmp[627193] call_tmp[627205]))
        unknown r[79810] "dead at end of block" "insert auto destroy"
        (541475 'init var' r[79810] call_tmp[627210])
        (79813 'end of statement')
        unknown call_tmp[627215] "expr temp" "maybe param" "maybe type" "temp"
        (627218 'move' call_tmp[627215](79817 call != flwlen[79503] 0))
        unknown call_tmp[627220] "expr temp" "maybe param" "maybe type" "temp"
        (627223 'move' call_tmp[627220](79882 call _cond_test call_tmp[627215]))
        if call_tmp[627220]
        {
          unknown call_tmp[627229] "expr temp" "maybe param" "maybe type" "temp"
          (627232 'move' call_tmp[627229](79824 call first _mt[243] myFollowThis[79311]))
          unknown call_tmp[627234] "maybe param" "maybe type" "temp"
          (627237 'move' call_tmp[627234](79828 call(79820 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627229]))
          const low[79829] "dead at end of block" "const" "insert auto destroy"
          (541477 'init var' low[79829] call_tmp[627234])
          (79832 'end of statement')
          unknown call_tmp[627243] "expr temp" "maybe param" "maybe type" "temp"
          (627246 'move' call_tmp[627243](376087 call strType _mt[243] this[79156]))
          unknown call_tmp[627248] "expr temp" "maybe param" "maybe type" "temp"
          (627251 'move' call_tmp[627248](79838 call chpl__idxToInt low[79829]))
          unknown call_tmp[627253] "expr temp" "maybe param" "maybe type" "temp"
          (627256 'move' call_tmp[627253](79840 call _cast call_tmp[627243] call_tmp[627248]))
          unknown call_tmp[627260] "expr temp" "maybe param" "maybe type" "temp"
          (627263 'move' call_tmp[627260](376092 call strType _mt[243] this[79156]))
          unknown call_tmp[627265] "expr temp" "maybe param" "maybe type" "temp"
          (627268 'move' call_tmp[627265](79844 call - flwlen[79503] 1))
          unknown call_tmp[627270] "expr temp" "maybe param" "maybe type" "temp"
          (627273 'move' call_tmp[627270](79847 call _cast call_tmp[627260] call_tmp[627265]))
          unknown call_tmp[627275] "expr temp" "maybe param" "maybe type" "temp"
          (627278 'move' call_tmp[627275](79849 call + call_tmp[627253] call_tmp[627270]))
          unknown call_tmp[627280] "maybe param" "maybe type" "temp"
          (627283 'move' call_tmp[627280](79852 call(376082 call (partial) chpl_intToIdx _mt[243] this[79156]) call_tmp[627275]))
          const high[79853] "dead at end of block" "const" "insert auto destroy"
          (541479 'init var' high[79853] call_tmp[627280])
          (79856 'end of statement' myFollowThis[79311] low[79829] flwlen[79503])
          unknown call_tmp[627289] "expr temp" "maybe param" "maybe type" "temp"
          (627292 'move' call_tmp[627289](79864 call last _mt[243] myFollowThis[79311]))
          unknown call_tmp[627294] "expr temp" "maybe param" "maybe type" "temp"
          (627297 'move' call_tmp[627294](79868 call(79860 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627289]))
          unknown call_tmp[627299] "expr temp" "maybe param" "maybe type" "temp"
          (627302 'move' call_tmp[627299](79869 call == high[79853] call_tmp[627294]))
          (79872 call assert call_tmp[627299])
          (476576 'end of statement' high[79853] myFollowThis[79311])
          unknown call_tmp[627304] "expr temp" "maybe param" "maybe type" "temp"
          (627307 'move' call_tmp[627304](79877 call chpl_build_bounded_range low[79829] high[79853]))
          (79879 call = r[79810] call_tmp[627304])
          (476579 'end of statement' r[79810] low[79829] high[79853])
        }
        unknown call_tmp[627309] "expr temp" "maybe param" "maybe type" "temp"
        (627312 'move' call_tmp[627309](79893 call _cond_test debugChapelRange[64198]))
        if call_tmp[627309]
        {
          (79891 call chpl_debug_writeln "Expanded range = " r[79810])
          (476583 'end of statement' r[79810])
        }
        {
          unknown _indexOfInterest[79903] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79904] "expr temp" "temp"
          (79913 'move' _iterator[79904](79911 call _getIterator r[79810]))
          Defer
          {
            {
              (79929 call _freeIterator _iterator[79904])
            }
          }
          { scopeless type
            (79918 'move' _indexOfInterest[79903](79915 call iteratorIndex _iterator[79904]))
          }
          ForLoop[79905]
          {
            unknown i[79922] "index var" "insert auto destroy"
            (476586 'end of statement')
            (79924 'move' i[79922] _indexOfInterest[79903])
            (476587 'end of statement' i[79922])
            unknown yret[511795] "YVV" "temp"
            (511798 'move' yret[511795](511797 'deref' i[79922]))
            (511800 yield yret[511795])
            (476589 'end of statement' i[79922])
            label _continueLabel[79908]
            _indexOfInterest[79903]
            _iterator[79904]
          }
          label _breakLabel[79909]
        }
      }
    }
    {
      unknown tmp[421231] "maybe param" "temp"
      (421242 'move' tmp[421231] 1)
      unknown call_tmp[627314] "expr temp" "maybe param" "maybe type" "temp"
      (627317 'move' call_tmp[627314](421244 call _cond_invalid tmp[421231]))
      if call_tmp[627314]
      {
        (421247 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559350] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559351] "maybe param" "temp"
      unknown call_tmp[627319] "expr temp" "maybe param" "maybe type" "temp"
      (627322 'move' call_tmp[627319](421232 call isTrue tmp[421231]))
      (559356 'move' tmp[559351](559354 call _cond_test call_tmp[627319]))
      if tmp[559351]
      {
        unknown tmp[559358] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627326] "expr temp" "maybe param" "maybe type" "temp"
        (627329 'move' call_tmp[627326](79946 call(79942 call (partial) hasLast _mt[243] this[79156])))
        (559360 'move' tmp[559358](421235 call isTrue call_tmp[627326]))
        (559365 'move' tmp[559350](559362 '_paramFoldLogical' tmp[559351] tmp[559358]))
      }
      {
        (559370 'move' tmp[559350](559367 '_paramFoldLogical' tmp[559351] 0))
      }
      unknown call_tmp[627331] "expr temp" "maybe param" "maybe type" "temp"
      (627334 'move' call_tmp[627331](79977 call _cond_test tmp[559350]))
      if call_tmp[627331]
      {
        (79975 call zipLengthHalt module=[255] HaltWrappers[210018] "zippered iteration where a bounded range follows an unbounded iterator")
        (358145 'referenced modules list' HaltWrappers[210018])
      }
      unknown call_tmp[627340] "expr temp" "maybe param" "maybe type" "temp"
      (627343 'move' call_tmp[627340](79988 call first _mt[243] myFollowThis[79311]))
      unknown call_tmp[627345] "maybe param" "maybe type" "temp"
      (627348 'move' call_tmp[627345](79992 call(79984 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627340]))
      const first[79993] "dead at end of block" "const" "insert auto destroy"
      (541481 'init var' first[79993] call_tmp[627345])
      (79996 'end of statement')
      unknown call_tmp[627352] "expr temp" "maybe param" "maybe type" "temp"
      (627355 'move' call_tmp[627352](79998 call stride _mt[243] this[79156]))
      unknown call_tmp[627359] "expr temp" "maybe param" "maybe type" "temp"
      (627362 'move' call_tmp[627359](80002 call stride _mt[243] myFollowThis[79311]))
      unknown call_tmp[627364] "maybe param" "maybe type" "temp"
      (627367 'move' call_tmp[627364](80005 call * call_tmp[627352] call_tmp[627359]))
      const stride[80007] "dead at end of block" "const" "insert auto destroy"
      (541483 'init var' stride[80007] call_tmp[627364])
      (80010 'end of statement' myFollowThis[79311] myFollowThis[79311])
      unknown call_tmp[627369] "expr temp" "maybe param" "maybe type" "temp"
      (627372 'move' call_tmp[627369](80013 call > stride[80007] 0))
      unknown call_tmp[627374] "expr temp" "maybe param" "maybe type" "temp"
      (627377 'move' call_tmp[627374](80143 call _cond_test call_tmp[627369]))
      if call_tmp[627374]
      {
        unknown call_tmp[627379] "expr temp" "maybe param" "maybe type" "temp"
        (627382 'move' call_tmp[627379](80016 call chpl_build_low_bounded_range first[79993]))
        unknown call_tmp[627386] "expr temp" "maybe param" "maybe type" "temp"
        (627389 'move' call_tmp[627386](376108 call strType _mt[243] this[79156]))
        unknown call_tmp[627391] "expr temp" "maybe param" "maybe type" "temp"
        (627394 'move' call_tmp[627391](80020 call _cast call_tmp[627386] stride[80007]))
        unknown call_tmp[627396] "maybe param" "maybe type" "temp"
        (627399 'move' call_tmp[627396](80022 call chpl_by call_tmp[627379] call_tmp[627391]))
        const r[80024] "dead at end of block" "const" "insert auto destroy"
        (541485 'init var' r[80024] call_tmp[627396])
        (80027 'end of statement' first[79993] stride[80007])
        unknown call_tmp[627401] "expr temp" "maybe param" "maybe type" "temp"
        (627404 'move' call_tmp[627401](80036 call _cond_test debugChapelRange[64198]))
        if call_tmp[627401]
        {
          (80034 call chpl_debug_writeln "Expanded range = " r[80024])
          (476597 'end of statement' r[80024])
        }
        {
          unknown _indexOfInterest[80046] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80047] "expr temp" "temp"
          (80056 'move' _iterator[80047](80054 call _getIterator r[80024]))
          Defer
          {
            {
              (80072 call _freeIterator _iterator[80047])
            }
          }
          { scopeless type
            (80061 'move' _indexOfInterest[80046](80058 call iteratorIndex _iterator[80047]))
          }
          ForLoop[80048]
          {
            unknown i[80065] "index var" "insert auto destroy"
            (476600 'end of statement')
            (80067 'move' i[80065] _indexOfInterest[80046])
            (476601 'end of statement' i[80065])
            unknown yret[511802] "YVV" "temp"
            (511805 'move' yret[511802](511804 'deref' i[80065]))
            (511807 yield yret[511802])
            (476603 'end of statement' i[80065])
            label _continueLabel[80051]
            _indexOfInterest[80046]
            _iterator[80047]
          }
          label _breakLabel[80052]
        }
      }
      {
        unknown call_tmp[627406] "expr temp" "maybe param" "maybe type" "temp"
        (627409 'move' call_tmp[627406](80080 call chpl_build_high_bounded_range first[79993]))
        unknown call_tmp[627413] "expr temp" "maybe param" "maybe type" "temp"
        (627416 'move' call_tmp[627413](376118 call strType _mt[243] this[79156]))
        unknown call_tmp[627418] "expr temp" "maybe param" "maybe type" "temp"
        (627421 'move' call_tmp[627418](80084 call _cast call_tmp[627413] stride[80007]))
        unknown call_tmp[627423] "maybe param" "maybe type" "temp"
        (627426 'move' call_tmp[627423](80086 call chpl_by call_tmp[627406] call_tmp[627418]))
        const r[80088] "dead at end of block" "const" "insert auto destroy"
        (541487 'init var' r[80088] call_tmp[627423])
        (80091 'end of statement' first[79993] stride[80007])
        unknown call_tmp[627428] "expr temp" "maybe param" "maybe type" "temp"
        (627431 'move' call_tmp[627428](80100 call _cond_test debugChapelRange[64198]))
        if call_tmp[627428]
        {
          (80098 call chpl_debug_writeln "Expanded range = " r[80088])
          (476607 'end of statement' r[80088])
        }
        {
          unknown _indexOfInterest[80110] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80111] "expr temp" "temp"
          (80120 'move' _iterator[80111](80118 call _getIterator r[80088]))
          Defer
          {
            {
              (80136 call _freeIterator _iterator[80111])
            }
          }
          { scopeless type
            (80125 'move' _indexOfInterest[80110](80122 call iteratorIndex _iterator[80111]))
          }
          ForLoop[80112]
          {
            unknown i[80129] "index var" "insert auto destroy"
            (476610 'end of statement')
            (80131 'move' i[80129] _indexOfInterest[80110])
            (476611 'end of statement' i[80129])
            unknown yret[511809] "YVV" "temp"
            (511812 'move' yret[511809](511811 'deref' i[80129]))
            (511814 yield yret[511809])
            (476613 'end of statement' i[80129])
            label _continueLabel[80115]
            _indexOfInterest[80110]
            _iterator[80111]
          }
          label _breakLabel[80116]
        }
      }
    }
    (511786 return ret[511784])
  }
  where {
    (79166 call == tag[79149] follower[449])
  }
  function _cast[80160](arg t[80157]:string[26], arg x[80166]:range[64319](?)) : _unknown[51]
  {
    unknown ret[511818] "RVV" "temp"
    unknown ret[80170] "dead at end of block" "insert auto destroy"
    (541489 'default init var' ret[80170] string[26])
    (80173 'end of statement')
    unknown call_tmp[627435] "expr temp" "maybe param" "maybe type" "temp"
    (627438 'move' call_tmp[627435](80180 call(80176 call (partial) hasLowBound _mt[243] x[80166])))
    unknown call_tmp[627440] "expr temp" "maybe param" "maybe type" "temp"
    (627443 'move' call_tmp[627440](80192 call _cond_test call_tmp[627435]))
    if call_tmp[627440]
    {
      unknown call_tmp[627447] "expr temp" "maybe param" "maybe type" "temp"
      (627450 'move' call_tmp[627447](80183 call low _mt[243] x[80166]))
      unknown call_tmp[627452] "expr temp" "maybe param" "maybe type" "temp"
      (627455 'move' call_tmp[627452](80187 call _cast string[26] call_tmp[627447]))
      (80189 call += ret[80170] call_tmp[627452])
      (476615 'end of statement' ret[80170])
    }
    (80215 call += ret[80170] "..")
    (476617 'end of statement' ret[80170])
    unknown call_tmp[627459] "expr temp" "maybe param" "maybe type" "temp"
    (627462 'move' call_tmp[627459](80223 call(80219 call (partial) hasHighBound _mt[243] x[80166])))
    unknown call_tmp[627464] "expr temp" "maybe param" "maybe type" "temp"
    (627467 'move' call_tmp[627464](80235 call _cond_test call_tmp[627459]))
    if call_tmp[627464]
    {
      unknown call_tmp[627471] "expr temp" "maybe param" "maybe type" "temp"
      (627474 'move' call_tmp[627471](80226 call high _mt[243] x[80166]))
      unknown call_tmp[627476] "expr temp" "maybe param" "maybe type" "temp"
      (627479 'move' call_tmp[627476](80230 call _cast string[26] call_tmp[627471]))
      (80232 call += ret[80170] call_tmp[627476])
      (476619 'end of statement' ret[80170])
    }
    unknown call_tmp[627483] "expr temp" "maybe param" "maybe type" "temp"
    (627486 'move' call_tmp[627483](80241 call stride _mt[243] x[80166]))
    unknown call_tmp[627488] "expr temp" "maybe param" "maybe type" "temp"
    (627491 'move' call_tmp[627488](80245 call != call_tmp[627483] 1))
    unknown call_tmp[627493] "expr temp" "maybe param" "maybe type" "temp"
    (627496 'move' call_tmp[627493](80261 call _cond_test call_tmp[627488]))
    if call_tmp[627493]
    {
      unknown call_tmp[627500] "expr temp" "maybe param" "maybe type" "temp"
      (627503 'move' call_tmp[627500](80250 call stride _mt[243] x[80166]))
      unknown call_tmp[627505] "expr temp" "maybe param" "maybe type" "temp"
      (627508 'move' call_tmp[627505](80254 call _cast string[26] call_tmp[627500]))
      unknown call_tmp[627510] "expr temp" "maybe param" "maybe type" "temp"
      (627513 'move' call_tmp[627510](80256 call + " by " call_tmp[627505]))
      (80258 call += ret[80170] call_tmp[627510])
      (476621 'end of statement' ret[80170])
    }
    unknown alignCheckRange[80267] "dead at end of block" "insert auto destroy"
    (541491 'init var' alignCheckRange[80267] x[80166])
    (80270 'end of statement')
    (80278 call(80274 call (partial) normalizeAlignment _mt[243] alignCheckRange[80267]))
    (476623 'end of statement' alignCheckRange[80267])
    unknown call_tmp[627519] "expr temp" "maybe param" "maybe type" "temp"
    (627522 'move' call_tmp[627519](80287 call(80283 call (partial) isNaturallyAligned _mt[243] alignCheckRange[80267])))
    unknown call_tmp[627524] "expr temp" "maybe param" "maybe type" "temp"
    (627527 'move' call_tmp[627524](80288 call ! call_tmp[627519]))
    unknown call_tmp[627529] "expr temp" "maybe param" "maybe type" "temp"
    (627532 'move' call_tmp[627529](80330 call _cond_test call_tmp[627524]))
    if call_tmp[627529]
    {
      unknown call_tmp[627536] "expr temp" "maybe param" "maybe type" "temp"
      (627539 'move' call_tmp[627536](80311 call alignment _mt[243] x[80166]))
      unknown call_tmp[627541] "expr temp" "maybe param" "maybe type" "temp"
      (627544 'move' call_tmp[627541](80315 call chpl__idxToInt call_tmp[627536]))
      unknown call_tmp[627548] "expr temp" "maybe param" "maybe type" "temp"
      (627551 'move' call_tmp[627548](80318 call stride _mt[243] x[80166]))
      unknown call_tmp[627553] "expr temp" "maybe param" "maybe type" "temp"
      (627556 'move' call_tmp[627553](80321 call chpl__mod call_tmp[627541] call_tmp[627548]))
      unknown call_tmp[627558] "expr temp" "maybe param" "maybe type" "temp"
      (627561 'move' call_tmp[627558](80323 call _cast string[26] call_tmp[627553]))
      unknown call_tmp[627563] "expr temp" "maybe param" "maybe type" "temp"
      (627566 'move' call_tmp[627563](80325 call + " align " call_tmp[627558]))
      (80327 call += ret[80170] call_tmp[627563])
      (476625 'end of statement' ret[80170])
    }
    (511823 'move' ret[511818](511822 'deref' ret[80170]))
    gotoReturn _end__cast[511816] _end__cast[511816]
    (476627 'end of statement' ret[80170])
    label _end__cast[511816]
    (511820 return ret[511818])
  }
  function range[64319](?).normalizeAlignment[80343](arg _mt[80348]:_MT[238], ref arg this[80345]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown tmp[421294] "maybe param" "temp"
    (421305 'move' tmp[421294](376135 call stridable _mt[243] this[80345]))
    unknown call_tmp[627570] "expr temp" "maybe param" "maybe type" "temp"
    (627573 'move' call_tmp[627570](421307 call _cond_invalid tmp[421294]))
    if call_tmp[627570]
    {
      (421310 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559377] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559378] "maybe param" "temp"
    unknown call_tmp[627575] "expr temp" "maybe param" "maybe type" "temp"
    (627578 'move' call_tmp[627575](421295 call isTrue tmp[421294]))
    (559383 'move' tmp[559378](559381 call _cond_test call_tmp[627575]))
    if tmp[559378]
    {
      unknown tmp[559385] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627582] "expr temp" "maybe param" "maybe type" "temp"
      (627585 'move' call_tmp[627582](376139 call aligned _mt[243] this[80345]))
      unknown call_tmp[627587] "expr temp" "maybe param" "maybe type" "temp"
      (627590 'move' call_tmp[627587](80352 call ! call_tmp[627582]))
      (559387 'move' tmp[559385](421298 call isTrue call_tmp[627587]))
      (559392 'move' tmp[559377](559389 '_paramFoldLogical' tmp[559378] tmp[559385]))
    }
    {
      (559397 'move' tmp[559377](559394 '_paramFoldLogical' tmp[559378] 0))
    }
    unknown call_tmp[627592] "expr temp" "maybe param" "maybe type" "temp"
    (627595 'move' call_tmp[627592](80406 call _cond_test tmp[559377]))
    if call_tmp[627592]
    {
      unknown tmp[559489] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559490] "maybe param" "temp"
      unknown call_tmp[627597] "expr temp" "maybe param" "maybe type" "temp"
      (627600 'move' call_tmp[627597](80360 call isBoundedRange this[80345]))
      (559495 'move' tmp[559490](559493 call _cond_test call_tmp[627597]))
      if tmp[559490]
      {
        unknown tmp[559404] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559405] "maybe param" "temp"
        unknown call_tmp[627604] "expr temp" "maybe param" "maybe type" "temp"
        (627607 'move' call_tmp[627604](376149 call stride _mt[243] this[80345]))
        unknown call_tmp[627609] "expr temp" "maybe param" "maybe type" "temp"
        (627612 'move' call_tmp[627609](80363 call > call_tmp[627604] 0))
        (559410 'move' tmp[559405](559408 call _cond_test call_tmp[627609]))
        if tmp[559405]
        {
          unknown tmp[559412] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559414 'move' tmp[559412](376154 call _low _mt[243] this[80345]))
          (559419 'move' tmp[559404](559416 '_paramFoldLogical' tmp[559405] tmp[559412]))
        }
        {
          unknown tmp[559421] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559423 'move' tmp[559421](376159 call _high _mt[243] this[80345]))
          (559428 'move' tmp[559404](559425 '_paramFoldLogical' tmp[559405] tmp[559421]))
        }
        (559500 'move' tmp[559489](559497 '_paramFoldLogical' tmp[559490] tmp[559404]))
      }
      {
        unknown tmp[559462] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559463] "maybe param" "temp"
        unknown call_tmp[627620] "expr temp" "maybe param" "maybe type" "temp"
        (627623 'move' call_tmp[627620](80371 call boundedType _mt[243] this[80345]))
        unknown call_tmp[627625] "expr temp" "maybe param" "maybe type" "temp"
        (627628 'move' call_tmp[627625](80378 call == call_tmp[627620] boundedLow[64210]))
        (559468 'move' tmp[559463](559466 call _cond_test call_tmp[627625]))
        if tmp[559463]
        {
          unknown tmp[559470] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559472 'move' tmp[559470](376164 call _low _mt[243] this[80345]))
          (559477 'move' tmp[559462](559474 '_paramFoldLogical' tmp[559463] tmp[559470]))
        }
        {
          unknown tmp[559435] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[559436] "maybe param" "temp"
          unknown call_tmp[627634] "expr temp" "maybe param" "maybe type" "temp"
          (627637 'move' call_tmp[627634](80382 call boundedType _mt[243] this[80345]))
          unknown call_tmp[627639] "expr temp" "maybe param" "maybe type" "temp"
          (627642 'move' call_tmp[627639](80389 call == call_tmp[627634] boundedHigh[64212]))
          (559441 'move' tmp[559436](559439 call _cond_test call_tmp[627639]))
          if tmp[559436]
          {
            unknown tmp[559443] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559445 'move' tmp[559443](376169 call _high _mt[243] this[80345]))
            (559450 'move' tmp[559435](559447 '_paramFoldLogical' tmp[559436] tmp[559443]))
          }
          {
            (559455 'move' tmp[559435](559452 '_paramFoldLogical' tmp[559436] 0))
          }
          (559482 'move' tmp[559462](559479 '_paramFoldLogical' tmp[559463] tmp[559435]))
        }
        (559505 'move' tmp[559489](559502 '_paramFoldLogical' tmp[559490] tmp[559462]))
      }
      unknown call_tmp[627648] "expr temp" "maybe param" "maybe type" "temp"
      (627651 'move' call_tmp[627648](376144 call _alignment _mt[243] this[80345]))
      (80402 call = call_tmp[627648] tmp[559489])
    }
    (511827 return _void[55])
  }
  function range[64319](?).chpl__unTranslate[80420](arg _mt[80425]:_MT[238], arg this[80422]:range[64319](?) :
  range[64319](?), arg i[80417] :
  (376173 call intIdxType _mt[243] this[80422])) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511831] "RVV" "temp"
    unknown call_tmp[627655] "expr temp" "maybe param" "maybe type" "temp"
    (627658 'move' call_tmp[627655](80429 call - this[80422] i[80417]))
    (511836 'move' ret[511831](511835 'deref' call_tmp[627655]))
    (511833 return ret[511831])
  }
  function range[64319](?).chpl__unTranslate[80441](arg _mt[80446]:_MT[238], arg this[80443]:range[64319](?) :
  range[64319](?), arg i[80439]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511840] "RVV" "temp"
    unknown call_tmp[627660] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627663 'move' call_tmp[627660](80450 'typeof' i[80439]))
    unknown call_tmp[627665] "expr temp" "maybe param" "maybe type" "temp"
    (627668 'move' call_tmp[627665](80452 call isIntType call_tmp[627660]))
    unknown call_tmp[627670] "expr temp" "maybe param" "maybe type" "temp"
    (627673 'move' call_tmp[627670](80468 call _cond_test call_tmp[627665]))
    if call_tmp[627670]
    {
      unknown call_tmp[627675] "expr temp" "maybe param" "maybe type" "temp"
      (627678 'move' call_tmp[627675](80455 call - this[80443] i[80439]))
      (511845 'move' ret[511840](511844 'deref' call_tmp[627675]))
      gotoReturn _end_chpl__unTranslate[511838] _end_chpl__unTranslate[511838]
    }
    {
      unknown call_tmp[627680] "expr temp" "maybe param" "maybe type" "temp"
      (627683 'move' call_tmp[627680](80463 call abs i[80439]))
      unknown call_tmp[627685] "expr temp" "maybe param" "maybe type" "temp"
      (627688 'move' call_tmp[627685](80464 call + this[80443] call_tmp[627680]))
      (511850 'move' ret[511840](511849 'deref' call_tmp[627685]))
      gotoReturn _end_chpl__unTranslate[511838] _end_chpl__unTranslate[511838]
    }
    label _end_chpl__unTranslate[511838]
    (511842 return ret[511840])
  }
  function chpl__hasAlignment[80486](arg r[80483]:range[64319](?)) : _unknown[51]
  {
    unknown ret[511856] "RVV" "temp"
    unknown tmp[421315] "maybe param" "temp"
    (421326 'move' tmp[421315](80493 call(80489 call (partial) hasLowBound _mt[243] r[80483])))
    unknown call_tmp[627692] "expr temp" "maybe param" "maybe type" "temp"
    (627695 'move' call_tmp[627692](421328 call _cond_invalid tmp[421315]))
    if call_tmp[627692]
    {
      (421331 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559512] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559513] "maybe param" "temp"
    unknown call_tmp[627697] "expr temp" "maybe param" "maybe type" "temp"
    (627700 'move' call_tmp[627697](421316 call isTrue tmp[421315]))
    (559518 'move' tmp[559513](559516 call _cond_test call_tmp[627697]))
    if tmp[559513]
    {
      unknown tmp[559520] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627704] "expr temp" "maybe param" "maybe type" "temp"
      (627707 'move' call_tmp[627704](80495 call stride _mt[243] r[80483]))
      unknown call_tmp[627709] "expr temp" "maybe param" "maybe type" "temp"
      (627712 'move' call_tmp[627709](80499 call >= call_tmp[627704] 2))
      (559522 'move' tmp[559520](421319 call isTrue call_tmp[627709]))
      (559527 'move' tmp[559512](559524 '_paramFoldLogical' tmp[559513] tmp[559520]))
    }
    {
      (559532 'move' tmp[559512](559529 '_paramFoldLogical' tmp[559513] 0))
    }
    unknown call_tmp[627714] "expr temp" "maybe param" "maybe type" "temp"
    (627717 'move' call_tmp[627714](80506 call _cond_test tmp[559512]))
    if call_tmp[627714]
    {
      (511861 'move' ret[511856](511860 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511854] _end_chpl__hasAlignment[511854]
    }
    unknown tmp[421336] "maybe param" "temp"
    (421347 'move' tmp[421336](80517 call(80513 call (partial) hasHighBound _mt[243] r[80483])))
    unknown call_tmp[627721] "expr temp" "maybe param" "maybe type" "temp"
    (627724 'move' call_tmp[627721](421349 call _cond_invalid tmp[421336]))
    if call_tmp[627721]
    {
      (421352 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559539] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559540] "maybe param" "temp"
    unknown call_tmp[627726] "expr temp" "maybe param" "maybe type" "temp"
    (627729 'move' call_tmp[627726](421337 call isTrue tmp[421336]))
    (559545 'move' tmp[559540](559543 call _cond_test call_tmp[627726]))
    if tmp[559540]
    {
      unknown tmp[559547] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627733] "expr temp" "maybe param" "maybe type" "temp"
      (627736 'move' call_tmp[627733](80519 call stride _mt[243] r[80483]))
      unknown call_tmp[627738] "expr temp" "maybe param" "maybe type" "temp"
      (627741 'move' call_tmp[627738](80523 call - 2))
      unknown call_tmp[627743] "expr temp" "maybe param" "maybe type" "temp"
      (627746 'move' call_tmp[627743](80525 call <= call_tmp[627733] call_tmp[627738]))
      (559549 'move' tmp[559547](421340 call isTrue call_tmp[627743]))
      (559554 'move' tmp[559539](559551 '_paramFoldLogical' tmp[559540] tmp[559547]))
    }
    {
      (559559 'move' tmp[559539](559556 '_paramFoldLogical' tmp[559540] 0))
    }
    unknown call_tmp[627748] "expr temp" "maybe param" "maybe type" "temp"
    (627751 'move' call_tmp[627748](80532 call _cond_test tmp[559539]))
    if call_tmp[627748]
    {
      (511866 'move' ret[511856](511865 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511854] _end_chpl__hasAlignment[511854]
    }
    (511871 'move' ret[511856](511870 'deref' 0))
    label _end_chpl__hasAlignment[511854]
    (511858 return ret[511856])
  }
  function chpl__mod[80548](arg dividend[80545]:integral[199](?), arg modulus[80551]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511875] "RVV" "temp"
    unknown call_tmp[627753] "expr temp" "maybe param" "maybe type" "temp"
    (627756 'move' call_tmp[627753](80557 call abs modulus[80551]))
    unknown call_tmp[627760] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627763 'move' call_tmp[627760](80562 'typeof' dividend[80545]))
    unknown call_tmp[627765] "maybe param" "maybe type" "temp"
    (627768 'move' call_tmp[627765](80564 call(80558 call (partial) safeCast _mt[243] call_tmp[627753]) call_tmp[627760]))
    const m[80565] "dead at end of block" "const" "insert auto destroy"
    (541493 'init var' m[80565] call_tmp[627765])
    (80568 'end of statement')
    unknown call_tmp[627770] "maybe param" "maybe type" "temp"
    (627773 'move' call_tmp[627770](80572 call % dividend[80545] m[80565]))
    unknown tmp[80574] "dead at end of block" "insert auto destroy"
    (541495 'init var' tmp[80574] call_tmp[627770])
    (80577 'end of statement' m[80565])
    unknown call_tmp[627775] "expr temp" "maybe param" "maybe type" "temp"
    (627778 'move' call_tmp[627775](80581 call isInt dividend[80545]))
    unknown call_tmp[627780] "expr temp" "maybe param" "maybe type" "temp"
    (627783 'move' call_tmp[627780](80596 call _cond_test call_tmp[627775]))
    if call_tmp[627780]
    {
      unknown call_tmp[627785] "expr temp" "maybe param" "maybe type" "temp"
      (627788 'move' call_tmp[627785](80584 call < tmp[80574] 0))
      unknown call_tmp[627790] "expr temp" "maybe param" "maybe type" "temp"
      (627793 'move' call_tmp[627790](80591 call _cond_test call_tmp[627785]))
      if call_tmp[627790]
      {
        (80588 call += tmp[80574] m[80565])
        (476640 'end of statement' tmp[80574] m[80565])
      }
    }
    (511880 'move' ret[511875](511879 'deref' tmp[80574]))
    gotoReturn _end_chpl__mod[511873] _end_chpl__mod[511873]
    (476643 'end of statement' tmp[80574])
    label _end_chpl__mod[511873]
    (511877 return ret[511875])
  }
  function chpl__diffMod[80612](arg minuend[80609]:integral[199](?), arg subtrahend[80615]:integral[199](?), arg modulus[80619]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511886] "RVV" "temp"
    unknown call_tmp[627795] "expr temp" "maybe param" "maybe type" "temp"
    (627798 'move' call_tmp[627795](80633 call abs modulus[80619]))
    unknown call_tmp[627802] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627805 'move' call_tmp[627802](80638 'typeof' minuend[80609]))
    unknown call_tmp[627807] "maybe param" "maybe type" "temp"
    (627810 'move' call_tmp[627807](80640 call(80634 call (partial) safeCast _mt[243] call_tmp[627795]) call_tmp[627802]))
    const m[80641] "dead at end of block" "const" "insert auto destroy"
    (541497 'init var' m[80641] call_tmp[627807])
    (80644 'end of statement')
    unknown call_tmp[627812] "maybe param" "maybe type" "temp"
    (627815 'move' call_tmp[627812](80650 call chpl__mod minuend[80609] m[80641]))
    unknown minMod[80651] "dead at end of block" "insert auto destroy"
    (541499 'init var' minMod[80651] call_tmp[627812])
    (80654 'end of statement')
    unknown call_tmp[627817] "maybe param" "maybe type" "temp"
    (627820 'move' call_tmp[627817](80659 call chpl__mod subtrahend[80615] m[80641]))
    unknown subMod[80660] "dead at end of block" "insert auto destroy"
    (541501 'init var' subMod[80660] call_tmp[627817])
    (80663 'end of statement' m[80641] m[80641])
    unknown tmp[559566] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559567] "maybe param" "temp"
    unknown call_tmp[627822] "expr temp" "maybe param" "maybe type" "temp"
    (627825 'move' call_tmp[627822](80666 call < minMod[80651] subMod[80660]))
    (559572 'move' tmp[559567](559570 call _cond_test call_tmp[627822]))
    if tmp[559567]
    {
      unknown tmp[559574] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627827] "expr temp" "maybe param" "maybe type" "temp"
      (627830 'move' call_tmp[627827](80671 call - subMod[80660] minMod[80651]))
      (559576 'move' tmp[559574](80673 call - m[80641] call_tmp[627827]))
      (559581 'move' tmp[559566](559578 '_paramFoldLogical' tmp[559567] tmp[559574]))
    }
    {
      unknown tmp[559583] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (559585 'move' tmp[559583](80677 call - minMod[80651] subMod[80660]))
      (559590 'move' tmp[559566](559587 '_paramFoldLogical' tmp[559567] tmp[559583]))
    }
    unknown call_tmp[627832] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627835 'move' call_tmp[627832](511890 'typeof' minuend[80609]))
    (511893 'move' ret[511886](511892 'coerce' tmp[559566] call_tmp[627832]))
    gotoReturn _end_chpl__diffMod[511884] _end_chpl__diffMod[511884]
    (476647 'end of statement' minMod[80651] subMod[80660] m[80641] subMod[80660] minMod[80651] minMod[80651] subMod[80660])
    label _end_chpl__diffMod[511884]
    (511888 return ret[511886])
  }
  where {
    unknown call_tmp[627837] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627840 'move' call_tmp[627837](80625 'typeof' minuend[80609]))
    unknown call_tmp[627842] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627845 'move' call_tmp[627842](80627 'typeof' subtrahend[80615]))
    (80628 call == call_tmp[627837] call_tmp[627842])
  }
  { scopeless type
    (80623 'typeof' minuend[80609])
  }
  function chpl__diffMod[80694](arg minuend[80691]:integral[199](?), arg subtrahend[80697]:integral[199](?), arg modulus[80701]:integral[199](?)) : _unknown[51] "no return value for void"
  {
    (80723 call compilerError "chpl__diffMod -- Operand types must match.")
    (511897 return _void[55])
  }
  function chpl__add[80735](arg a[80732]:_any[178](?), arg b[80738] :
  (459761 'typeof' a[80732]), arg resultType[80741]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511901] "RVV" "temp"
    unknown call_tmp[627847] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627850 'move' call_tmp[627847](459763 'typeof' a[80732]))
    unknown call_tmp[627852] "expr temp" "maybe param" "maybe type" "temp"
    (627855 'move' call_tmp[627852](80746 call isIntegralType call_tmp[627847]))
    unknown call_tmp[627857] "expr temp" "maybe param" "maybe type" "temp"
    (627860 'move' call_tmp[627857](80747 call ! call_tmp[627852]))
    unknown call_tmp[627862] "expr temp" "maybe param" "maybe type" "temp"
    (627865 'move' call_tmp[627862](80770 call _cond_test call_tmp[627857]))
    if call_tmp[627862]
    {
      (80768 call compilerError "Values must be of integral type.")
    }
    unknown tmp[421357] "maybe param" "temp"
    unknown tmp[421378] "maybe param" "temp"
    (421389 'move' tmp[421378](80778 call > a[80732] 0))
    unknown call_tmp[627867] "expr temp" "maybe param" "maybe type" "temp"
    (627870 'move' call_tmp[627867](421391 call _cond_invalid tmp[421378]))
    if call_tmp[627867]
    {
      (421394 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559597] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559598] "maybe param" "temp"
    unknown call_tmp[627872] "expr temp" "maybe param" "maybe type" "temp"
    (627875 'move' call_tmp[627872](421379 call isTrue tmp[421378]))
    (559603 'move' tmp[559598](559601 call _cond_test call_tmp[627872]))
    if tmp[559598]
    {
      unknown tmp[559605] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627877] "expr temp" "maybe param" "maybe type" "temp"
      (627880 'move' call_tmp[627877](80782 call > b[80738] 0))
      (559607 'move' tmp[559605](421382 call isTrue call_tmp[627877]))
      (559612 'move' tmp[559597](559609 '_paramFoldLogical' tmp[559598] tmp[559605]))
    }
    {
      (559617 'move' tmp[559597](559614 '_paramFoldLogical' tmp[559598] 0))
    }
    (421368 'move' tmp[421357] tmp[559597])
    unknown call_tmp[627882] "expr temp" "maybe param" "maybe type" "temp"
    (627885 'move' call_tmp[627882](421370 call _cond_invalid tmp[421357]))
    if call_tmp[627882]
    {
      (421373 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559624] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559625] "maybe param" "temp"
    unknown call_tmp[627887] "expr temp" "maybe param" "maybe type" "temp"
    (627890 'move' call_tmp[627887](421358 call isTrue tmp[421357]))
    (559630 'move' tmp[559625](559628 call _cond_test call_tmp[627887]))
    if tmp[559625]
    {
      unknown tmp[559632] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627892] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627895 'move' call_tmp[627892](459765 'typeof' a[80732]))
      unknown call_tmp[627897] "expr temp" "maybe param" "maybe type" "temp"
      (627900 'move' call_tmp[627897](80790 call max call_tmp[627892]))
      unknown call_tmp[627902] "expr temp" "maybe param" "maybe type" "temp"
      (627905 'move' call_tmp[627902](80792 call - call_tmp[627897] a[80732]))
      unknown call_tmp[627907] "expr temp" "maybe param" "maybe type" "temp"
      (627910 'move' call_tmp[627907](80794 call > b[80738] call_tmp[627902]))
      (559634 'move' tmp[559632](421361 call isTrue call_tmp[627907]))
      (559639 'move' tmp[559624](559636 '_paramFoldLogical' tmp[559625] tmp[559632]))
    }
    {
      (559644 'move' tmp[559624](559641 '_paramFoldLogical' tmp[559625] 0))
    }
    unknown call_tmp[627912] "expr temp" "maybe param" "maybe type" "temp"
    (627915 'move' call_tmp[627912](80804 call _cond_test tmp[559624]))
    if call_tmp[627912]
    {
      unknown call_tmp[627917] "expr temp" "maybe param" "maybe type" "temp"
      (627920 'move' call_tmp[627917](80801 call max resultType[80741]))
      (511906 'move' ret[511901](511905 'deref' call_tmp[627917]))
      gotoReturn _end_chpl__add[511899] _end_chpl__add[511899]
    }
    unknown tmp[421399] "maybe param" "temp"
    unknown tmp[421420] "maybe param" "temp"
    (421431 'move' tmp[421420](80811 call < a[80732] 0))
    unknown call_tmp[627922] "expr temp" "maybe param" "maybe type" "temp"
    (627925 'move' call_tmp[627922](421433 call _cond_invalid tmp[421420]))
    if call_tmp[627922]
    {
      (421436 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559651] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559652] "maybe param" "temp"
    unknown call_tmp[627927] "expr temp" "maybe param" "maybe type" "temp"
    (627930 'move' call_tmp[627927](421421 call isTrue tmp[421420]))
    (559657 'move' tmp[559652](559655 call _cond_test call_tmp[627927]))
    if tmp[559652]
    {
      unknown tmp[559659] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627932] "expr temp" "maybe param" "maybe type" "temp"
      (627935 'move' call_tmp[627932](80815 call < b[80738] 0))
      (559661 'move' tmp[559659](421424 call isTrue call_tmp[627932]))
      (559666 'move' tmp[559651](559663 '_paramFoldLogical' tmp[559652] tmp[559659]))
    }
    {
      (559671 'move' tmp[559651](559668 '_paramFoldLogical' tmp[559652] 0))
    }
    (421410 'move' tmp[421399] tmp[559651])
    unknown call_tmp[627937] "expr temp" "maybe param" "maybe type" "temp"
    (627940 'move' call_tmp[627937](421412 call _cond_invalid tmp[421399]))
    if call_tmp[627937]
    {
      (421415 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559678] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559679] "maybe param" "temp"
    unknown call_tmp[627942] "expr temp" "maybe param" "maybe type" "temp"
    (627945 'move' call_tmp[627942](421400 call isTrue tmp[421399]))
    (559684 'move' tmp[559679](559682 call _cond_test call_tmp[627942]))
    if tmp[559679]
    {
      unknown tmp[559686] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627947] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627950 'move' call_tmp[627947](459767 'typeof' a[80732]))
      unknown call_tmp[627952] "expr temp" "maybe param" "maybe type" "temp"
      (627955 'move' call_tmp[627952](80823 call min call_tmp[627947]))
      unknown call_tmp[627957] "expr temp" "maybe param" "maybe type" "temp"
      (627960 'move' call_tmp[627957](80825 call - call_tmp[627952] a[80732]))
      unknown call_tmp[627962] "expr temp" "maybe param" "maybe type" "temp"
      (627965 'move' call_tmp[627962](80827 call < b[80738] call_tmp[627957]))
      (559688 'move' tmp[559686](421403 call isTrue call_tmp[627962]))
      (559693 'move' tmp[559678](559690 '_paramFoldLogical' tmp[559679] tmp[559686]))
    }
    {
      (559698 'move' tmp[559678](559695 '_paramFoldLogical' tmp[559679] 0))
    }
    unknown call_tmp[627967] "expr temp" "maybe param" "maybe type" "temp"
    (627970 'move' call_tmp[627967](80837 call _cond_test tmp[559678]))
    if call_tmp[627967]
    {
      unknown call_tmp[627972] "expr temp" "maybe param" "maybe type" "temp"
      (627975 'move' call_tmp[627972](80834 call min resultType[80741]))
      (511911 'move' ret[511901](511910 'deref' call_tmp[627972]))
      gotoReturn _end_chpl__add[511899] _end_chpl__add[511899]
    }
    unknown call_tmp[627977] "expr temp" "maybe param" "maybe type" "temp"
    (627980 'move' call_tmp[627977](80845 call isUintType resultType[80741]))
    unknown call_tmp[627982] "expr temp" "maybe param" "maybe type" "temp"
    (627985 'move' call_tmp[627982](80922 call _cond_test call_tmp[627977]))
    if call_tmp[627982]
    {
      unknown tmp[421441] "maybe param" "temp"
      unknown tmp[421462] "maybe param" "temp"
      unknown tmp[421483] "maybe param" "temp"
      (421494 'move' tmp[421483](80848 call < a[80732] 0))
      unknown call_tmp[627987] "expr temp" "maybe param" "maybe type" "temp"
      (627990 'move' call_tmp[627987](421496 call _cond_invalid tmp[421483]))
      if call_tmp[627987]
      {
        (421499 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559705] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559706] "maybe param" "temp"
      unknown call_tmp[627992] "expr temp" "maybe param" "maybe type" "temp"
      (627995 'move' call_tmp[627992](421484 call isTrue tmp[421483]))
      (559711 'move' tmp[559706](559709 call _cond_test call_tmp[627992]))
      if tmp[559706]
      {
        unknown tmp[559713] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627997] "expr temp" "maybe param" "maybe type" "temp"
        (628000 'move' call_tmp[627997](80852 call > b[80738] 0))
        (559715 'move' tmp[559713](421487 call isTrue call_tmp[627997]))
        (559720 'move' tmp[559705](559717 '_paramFoldLogical' tmp[559706] tmp[559713]))
      }
      {
        (559725 'move' tmp[559705](559722 '_paramFoldLogical' tmp[559706] 0))
      }
      (421473 'move' tmp[421462] tmp[559705])
      unknown call_tmp[628002] "expr temp" "maybe param" "maybe type" "temp"
      (628005 'move' call_tmp[628002](421475 call _cond_invalid tmp[421462]))
      if call_tmp[628002]
      {
        (421478 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559759] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559760] "maybe param" "temp"
      unknown call_tmp[628007] "expr temp" "maybe param" "maybe type" "temp"
      (628010 'move' call_tmp[628007](421463 call isTrue tmp[421462]))
      (559765 'move' tmp[559760](559763 call _cond_test call_tmp[628007]))
      if tmp[559760]
      {
        unknown tmp[421504] "maybe param" "temp"
        unknown call_tmp[628012] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628015 'move' call_tmp[628012](459769 'typeof' a[80732]))
        unknown call_tmp[628017] "expr temp" "maybe param" "maybe type" "temp"
        (628020 'move' call_tmp[628017](80860 call min call_tmp[628012]))
        (421515 'move' tmp[421504](80861 call == a[80732] call_tmp[628017]))
        unknown call_tmp[628022] "expr temp" "maybe param" "maybe type" "temp"
        (628025 'move' call_tmp[628022](421517 call _cond_invalid tmp[421504]))
        if call_tmp[628022]
        {
          (421520 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[559732] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559733] "maybe param" "temp"
        unknown call_tmp[628027] "expr temp" "maybe param" "maybe type" "temp"
        (628030 'move' call_tmp[628027](421505 call isTrue tmp[421504]))
        (559738 'move' tmp[559733](559736 call _cond_test call_tmp[628027]))
        if tmp[559733]
        {
          (559743 'move' tmp[559732](559740 '_paramFoldLogical' tmp[559733] 1))
        }
        {
          unknown tmp[559745] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628032] "expr temp" "maybe param" "maybe type" "temp"
          (628035 'move' call_tmp[628032](80866 call abs a[80732]))
          unknown call_tmp[628037] "expr temp" "maybe param" "maybe type" "temp"
          (628040 'move' call_tmp[628037](80870 call abs b[80738]))
          unknown call_tmp[628042] "expr temp" "maybe param" "maybe type" "temp"
          (628045 'move' call_tmp[628042](80871 call > call_tmp[628032] call_tmp[628037]))
          (559747 'move' tmp[559745](421509 call isTrue call_tmp[628042]))
          (559752 'move' tmp[559732](559749 '_paramFoldLogical' tmp[559733] tmp[559745]))
        }
        unknown tmp[559767] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559769 'move' tmp[559767](421466 call isTrue tmp[559732]))
        (559774 'move' tmp[559759](559771 '_paramFoldLogical' tmp[559760] tmp[559767]))
      }
      {
        (559779 'move' tmp[559759](559776 '_paramFoldLogical' tmp[559760] 0))
      }
      (421452 'move' tmp[421441] tmp[559759])
      unknown call_tmp[628047] "expr temp" "maybe param" "maybe type" "temp"
      (628050 'move' call_tmp[628047](421454 call _cond_invalid tmp[421441]))
      if call_tmp[628047]
      {
        (421457 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559867] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559868] "maybe param" "temp"
      unknown call_tmp[628052] "expr temp" "maybe param" "maybe type" "temp"
      (628055 'move' call_tmp[628052](421442 call isTrue tmp[421441]))
      (559873 'move' tmp[559868](559871 call _cond_test call_tmp[628052]))
      if tmp[559868]
      {
        (559878 'move' tmp[559867](559875 '_paramFoldLogical' tmp[559868] 1))
      }
      {
        unknown tmp[421525] "maybe param" "temp"
        unknown tmp[421546] "maybe param" "temp"
        (421557 'move' tmp[421546](80879 call > a[80732] 0))
        unknown call_tmp[628057] "expr temp" "maybe param" "maybe type" "temp"
        (628060 'move' call_tmp[628057](421559 call _cond_invalid tmp[421546]))
        if call_tmp[628057]
        {
          (421562 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559786] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559787] "maybe param" "temp"
        unknown call_tmp[628062] "expr temp" "maybe param" "maybe type" "temp"
        (628065 'move' call_tmp[628062](421547 call isTrue tmp[421546]))
        (559792 'move' tmp[559787](559790 call _cond_test call_tmp[628062]))
        if tmp[559787]
        {
          unknown tmp[559794] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628067] "expr temp" "maybe param" "maybe type" "temp"
          (628070 'move' call_tmp[628067](80883 call < b[80738] 0))
          (559796 'move' tmp[559794](421550 call isTrue call_tmp[628067]))
          (559801 'move' tmp[559786](559798 '_paramFoldLogical' tmp[559787] tmp[559794]))
        }
        {
          (559806 'move' tmp[559786](559803 '_paramFoldLogical' tmp[559787] 0))
        }
        (421536 'move' tmp[421525] tmp[559786])
        unknown call_tmp[628072] "expr temp" "maybe param" "maybe type" "temp"
        (628075 'move' call_tmp[628072](421538 call _cond_invalid tmp[421525]))
        if call_tmp[628072]
        {
          (421541 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559840] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559841] "maybe param" "temp"
        unknown call_tmp[628077] "expr temp" "maybe param" "maybe type" "temp"
        (628080 'move' call_tmp[628077](421526 call isTrue tmp[421525]))
        (559846 'move' tmp[559841](559844 call _cond_test call_tmp[628077]))
        if tmp[559841]
        {
          unknown tmp[421567] "maybe param" "temp"
          unknown call_tmp[628082] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628085 'move' call_tmp[628082](459771 'typeof' a[80732]))
          unknown call_tmp[628087] "expr temp" "maybe param" "maybe type" "temp"
          (628090 'move' call_tmp[628087](80891 call min call_tmp[628082]))
          (421578 'move' tmp[421567](80892 call == b[80738] call_tmp[628087]))
          unknown call_tmp[628092] "expr temp" "maybe param" "maybe type" "temp"
          (628095 'move' call_tmp[628092](421580 call _cond_invalid tmp[421567]))
          if call_tmp[628092]
          {
            (421583 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559813] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559814] "maybe param" "temp"
          unknown call_tmp[628097] "expr temp" "maybe param" "maybe type" "temp"
          (628100 'move' call_tmp[628097](421568 call isTrue tmp[421567]))
          (559819 'move' tmp[559814](559817 call _cond_test call_tmp[628097]))
          if tmp[559814]
          {
            (559824 'move' tmp[559813](559821 '_paramFoldLogical' tmp[559814] 1))
          }
          {
            unknown tmp[559826] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[628102] "expr temp" "maybe param" "maybe type" "temp"
            (628105 'move' call_tmp[628102](80897 call abs b[80738]))
            unknown call_tmp[628107] "expr temp" "maybe param" "maybe type" "temp"
            (628110 'move' call_tmp[628107](80901 call abs a[80732]))
            unknown call_tmp[628112] "expr temp" "maybe param" "maybe type" "temp"
            (628115 'move' call_tmp[628112](80902 call > call_tmp[628102] call_tmp[628107]))
            (559828 'move' tmp[559826](421572 call isTrue call_tmp[628112]))
            (559833 'move' tmp[559813](559830 '_paramFoldLogical' tmp[559814] tmp[559826]))
          }
          unknown tmp[559848] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559850 'move' tmp[559848](421529 call isTrue tmp[559813]))
          (559855 'move' tmp[559840](559852 '_paramFoldLogical' tmp[559841] tmp[559848]))
        }
        {
          (559860 'move' tmp[559840](559857 '_paramFoldLogical' tmp[559841] 0))
        }
        unknown tmp[559880] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559882 'move' tmp[559880](421446 call isTrue tmp[559840]))
        (559887 'move' tmp[559867](559884 '_paramFoldLogical' tmp[559868] tmp[559880]))
      }
      unknown call_tmp[628117] "expr temp" "maybe param" "maybe type" "temp"
      (628120 'move' call_tmp[628117](80916 call _cond_test tmp[559867]))
      if call_tmp[628117]
      {
        unknown call_tmp[628122] "expr temp" "maybe param" "maybe type" "temp"
        (628125 'move' call_tmp[628122](80912 call _cast resultType[80741] 0))
        (511916 'move' ret[511901](511915 'deref' call_tmp[628122]))
        gotoReturn _end_chpl__add[511899] _end_chpl__add[511899]
      }
    }
    unknown call_tmp[628127] "expr temp" "maybe param" "maybe type" "temp"
    (628130 'move' call_tmp[628127](80928 call + a[80732] b[80738]))
    unknown call_tmp[628132] "expr temp" "maybe param" "maybe type" "temp"
    (628135 'move' call_tmp[628132](80931 call _cast resultType[80741] call_tmp[628127]))
    (511921 'move' ret[511901](511920 'deref' call_tmp[628132]))
    label _end_chpl__add[511899]
    (511903 return ret[511901])
  }
  function chpl__addRangeStrides[80941](arg start[80939]:_any[178](?), arg stride[80943]:_any[178](?), arg count[80945]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511952] "RVV" "temp"
    function convert[80953](arg a[80951]:_any[178](?), arg b[80955]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[511925] "RVV" "param" "temp"
      unknown tmp[421588] "maybe param" "temp"
      unknown tmp[421609] "maybe param" "temp"
      unknown call_tmp[628137] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (628140 'move' call_tmp[628137](80958 'typeof' a[80951]))
      unknown call_tmp[628142] "expr temp" "maybe param" "maybe type" "temp"
      (628145 'move' call_tmp[628142](80962 call int(64)[13] 64))
      (421620 'move' tmp[421609](80963 call == call_tmp[628137] call_tmp[628142]))
      unknown call_tmp[628147] "expr temp" "maybe param" "maybe type" "temp"
      (628150 'move' call_tmp[628147](421622 call _cond_invalid tmp[421609]))
      if call_tmp[628147]
      {
        (421625 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559894] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559895] "maybe param" "temp"
      unknown call_tmp[628152] "expr temp" "maybe param" "maybe type" "temp"
      (628155 'move' call_tmp[628152](421610 call isTrue tmp[421609]))
      (559900 'move' tmp[559895](559898 call _cond_test call_tmp[628152]))
      if tmp[559895]
      {
        unknown tmp[559902] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628157] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628160 'move' call_tmp[628157](80966 'typeof' b[80955]))
        unknown call_tmp[628162] "expr temp" "maybe param" "maybe type" "temp"
        (628165 'move' call_tmp[628162](80970 call uint(64)[115] 64))
        unknown call_tmp[628167] "expr temp" "maybe param" "maybe type" "temp"
        (628170 'move' call_tmp[628167](80971 call == call_tmp[628157] call_tmp[628162]))
        (559904 'move' tmp[559902](421613 call isTrue call_tmp[628167]))
        (559909 'move' tmp[559894](559906 '_paramFoldLogical' tmp[559895] tmp[559902]))
      }
      {
        (559914 'move' tmp[559894](559911 '_paramFoldLogical' tmp[559895] 0))
      }
      (421599 'move' tmp[421588] tmp[559894])
      unknown call_tmp[628172] "expr temp" "maybe param" "maybe type" "temp"
      (628175 'move' call_tmp[628172](421601 call _cond_invalid tmp[421588]))
      if call_tmp[628172]
      {
        (421604 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559948] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559949] "maybe param" "temp"
      unknown call_tmp[628177] "expr temp" "maybe param" "maybe type" "temp"
      (628180 'move' call_tmp[628177](421589 call isTrue tmp[421588]))
      (559954 'move' tmp[559949](559952 call _cond_test call_tmp[628177]))
      if tmp[559949]
      {
        (559959 'move' tmp[559948](559956 '_paramFoldLogical' tmp[559949] 1))
      }
      {
        unknown tmp[421630] "maybe param" "temp"
        unknown call_tmp[628182] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628185 'move' call_tmp[628182](80976 'typeof' a[80951]))
        unknown call_tmp[628187] "expr temp" "maybe param" "maybe type" "temp"
        (628190 'move' call_tmp[628187](80980 call uint(64)[115] 64))
        (421641 'move' tmp[421630](80981 call == call_tmp[628182] call_tmp[628187]))
        unknown call_tmp[628192] "expr temp" "maybe param" "maybe type" "temp"
        (628195 'move' call_tmp[628192](421643 call _cond_invalid tmp[421630]))
        if call_tmp[628192]
        {
          (421646 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559921] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559922] "maybe param" "temp"
        unknown call_tmp[628197] "expr temp" "maybe param" "maybe type" "temp"
        (628200 'move' call_tmp[628197](421631 call isTrue tmp[421630]))
        (559927 'move' tmp[559922](559925 call _cond_test call_tmp[628197]))
        if tmp[559922]
        {
          unknown tmp[559929] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628202] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628205 'move' call_tmp[628202](80984 'typeof' b[80955]))
          unknown call_tmp[628207] "expr temp" "maybe param" "maybe type" "temp"
          (628210 'move' call_tmp[628207](80988 call int(64)[13] 64))
          unknown call_tmp[628212] "expr temp" "maybe param" "maybe type" "temp"
          (628215 'move' call_tmp[628212](80989 call == call_tmp[628202] call_tmp[628207]))
          (559931 'move' tmp[559929](421634 call isTrue call_tmp[628212]))
          (559936 'move' tmp[559921](559933 '_paramFoldLogical' tmp[559922] tmp[559929]))
        }
        {
          (559941 'move' tmp[559921](559938 '_paramFoldLogical' tmp[559922] 0))
        }
        unknown tmp[559961] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559963 'move' tmp[559961](421593 call isTrue tmp[559921]))
        (559968 'move' tmp[559948](559965 '_paramFoldLogical' tmp[559949] tmp[559961]))
      }
      (511930 'move' ret[511925](511929 'deref' tmp[559948]))
      (511927 return ret[511925])
    }
    function mul[81005](arg a[81003]:_any[178](?), arg b[81007]:_any[178](?)) : _unknown[51]
    {
      unknown ret[511934] "RVV" "temp"
      unknown tmp[559975] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559976] "maybe param" "temp"
      unknown call_tmp[628217] "expr temp" "maybe param" "maybe type" "temp"
      (628220 'move' call_tmp[628217](81013 call convert a[81003] b[81007]))
      (559981 'move' tmp[559976](559979 call _cond_test call_tmp[628217]))
      if tmp[559976]
      {
        unknown tmp[559983] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628222] "expr temp" "maybe param" "maybe type" "temp"
        (628225 'move' call_tmp[628222](81018 call int(64)[13] 64))
        unknown call_tmp[628227] "expr temp" "maybe param" "maybe type" "temp"
        (628230 'move' call_tmp[628227](81019 call _cast call_tmp[628222] a[81003]))
        unknown call_tmp[628232] "expr temp" "maybe param" "maybe type" "temp"
        (628235 'move' call_tmp[628232](81025 call int(64)[13] 64))
        unknown call_tmp[628237] "expr temp" "maybe param" "maybe type" "temp"
        (628240 'move' call_tmp[628237](81026 call _cast call_tmp[628232] b[81007]))
        (559985 'move' tmp[559983](81028 call * call_tmp[628227] call_tmp[628237]))
        (559990 'move' tmp[559975](559987 '_paramFoldLogical' tmp[559976] tmp[559983]))
      }
      {
        unknown tmp[559992] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559994 'move' tmp[559992](81032 call * a[81003] b[81007]))
        (559999 'move' tmp[559975](559996 '_paramFoldLogical' tmp[559976] tmp[559992]))
      }
      (511939 'move' ret[511934](511938 'deref' tmp[559975]))
      (511936 return ret[511934])
    }
    function add[81046](arg a[81044]:_any[178](?), arg b[81048]:_any[178](?)) : _unknown[51]
    {
      unknown ret[511943] "RVV" "temp"
      unknown tmp[560006] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560007] "maybe param" "temp"
      unknown call_tmp[628242] "expr temp" "maybe param" "maybe type" "temp"
      (628245 'move' call_tmp[628242](81054 call convert a[81044] b[81048]))
      (560012 'move' tmp[560007](560010 call _cond_test call_tmp[628242]))
      if tmp[560007]
      {
        unknown tmp[560014] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628247] "expr temp" "maybe param" "maybe type" "temp"
        (628250 'move' call_tmp[628247](81059 call int(64)[13] 64))
        unknown call_tmp[628252] "expr temp" "maybe param" "maybe type" "temp"
        (628255 'move' call_tmp[628252](81060 call _cast call_tmp[628247] a[81044]))
        unknown call_tmp[628257] "expr temp" "maybe param" "maybe type" "temp"
        (628260 'move' call_tmp[628257](81066 call int(64)[13] 64))
        unknown call_tmp[628262] "expr temp" "maybe param" "maybe type" "temp"
        (628265 'move' call_tmp[628262](81067 call _cast call_tmp[628257] b[81048]))
        (560016 'move' tmp[560014](81069 call + call_tmp[628252] call_tmp[628262]))
        (560021 'move' tmp[560006](560018 '_paramFoldLogical' tmp[560007] tmp[560014]))
      }
      {
        unknown tmp[560023] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560025 'move' tmp[560023](81073 call + a[81044] b[81048]))
        (560030 'move' tmp[560006](560027 '_paramFoldLogical' tmp[560007] tmp[560023]))
      }
      (511948 'move' ret[511943](511947 'deref' tmp[560006]))
      (511945 return ret[511943])
    }
    unknown call_tmp[628267] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628270 'move' call_tmp[628267](81093 'typeof' start[80939]))
    unknown call_tmp[628272] "expr temp" "maybe param" "maybe type" "temp"
    (628275 'move' call_tmp[628272](81090 call mul stride[80943] count[80945]))
    unknown call_tmp[628277] "expr temp" "maybe param" "maybe type" "temp"
    (628280 'move' call_tmp[628277](81091 call add start[80939] call_tmp[628272]))
    unknown call_tmp[628282] "expr temp" "maybe param" "maybe type" "temp"
    (628285 'move' call_tmp[628282](81094 call _cast call_tmp[628267] call_tmp[628277]))
    unknown call_tmp[628287] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628290 'move' call_tmp[628287](511956 'typeof' start[80939]))
    (511959 'move' ret[511952](511958 'coerce' call_tmp[628282] call_tmp[628287]))
    (511954 return ret[511952])
  }
  { scopeless type
    (80948 'typeof' start[80939])
  }
  function chpl__extendedEuclidHelper[81105](arg u[81103]:_any[178](?), arg v[81107]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511963] "RVV" "temp"
    unknown call_tmp[628292] "maybe param" "maybe type" "temp" "type variable"
    (628295 'move' call_tmp[628292](81110 'typeof' u[81103]))
    unknown zero[81112] "dead at end of block" "insert auto destroy"
    (541503 'init var' zero[81112] 0 call_tmp[628292])
    (81115 'end of statement')
    unknown call_tmp[628297] "maybe param" "maybe type" "temp" "type variable"
    (628300 'move' call_tmp[628297](81118 'typeof' u[81103]))
    unknown one[81120] "dead at end of block" "insert auto destroy"
    (541505 'init var' one[81120] 1 call_tmp[628297])
    (81123 'end of statement')
    unknown call_tmp[628302] "maybe param" "maybe type" "temp"
    (628305 'move' call_tmp[628302](81128 call _build_tuple one[81120] zero[81112] u[81103]))
    unknown U[81130] "dead at end of block" "insert auto destroy"
    (541507 'init var' U[81130] call_tmp[628302])
    (81133 'end of statement')
    unknown call_tmp[628307] "maybe param" "maybe type" "temp"
    (628310 'move' call_tmp[628307](81138 call _build_tuple zero[81112] one[81120] v[81107]))
    unknown V[81140] "dead at end of block" "insert auto destroy"
    (541509 'init var' V[81140] call_tmp[628307])
    (81143 'end of statement' one[81120] zero[81112] zero[81112] one[81120])
    {
      unknown tmp[81192] "temp"
      unknown call_tmp[628312] "expr temp" "maybe param" "maybe type" "temp"
      (628315 'move' call_tmp[628312](81217 call V[81140] 2))
      unknown call_tmp[628317] "expr temp" "maybe param" "maybe type" "temp"
      (628320 'move' call_tmp[628317](81215 call != call_tmp[628312] 0))
      (81220 'move' tmp[81192](81213 call _cond_test call_tmp[628317]))
      WhileDo[81197]
      {
        {
          unknown oldU[81152] "dead at end of block" "insert auto destroy"
          (541511 'init var' oldU[81152] U[81130])
          (81155 'end of statement')
          unknown call_tmp[628322] "expr temp" "maybe param" "maybe type" "temp"
          (628325 'move' call_tmp[628322](81160 call U[81130] 2))
          unknown call_tmp[628327] "expr temp" "maybe param" "maybe type" "temp"
          (628330 'move' call_tmp[628327](81164 call V[81140] 2))
          unknown call_tmp[628332] "maybe param" "maybe type" "temp"
          (628335 'move' call_tmp[628332](81165 call / call_tmp[628322] call_tmp[628327]))
          unknown q[81167] "dead at end of block" "insert auto destroy"
          (541513 'init var' q[81167] call_tmp[628332])
          (81170 'end of statement' U[81130] U[81130] V[81140])
          (81173 call = U[81130] V[81140])
          (476681 'end of statement' U[81130] V[81140])
          unknown call_tmp[628337] "expr temp" "maybe param" "maybe type" "temp"
          (628340 'move' call_tmp[628337](81183 call _build_tuple q[81167] q[81167] q[81167]))
          unknown call_tmp[628342] "expr temp" "maybe param" "maybe type" "temp"
          (628345 'move' call_tmp[628342](81185 call * V[81140] call_tmp[628337]))
          unknown call_tmp[628347] "expr temp" "maybe param" "maybe type" "temp"
          (628350 'move' call_tmp[628347](81187 call - oldU[81152] call_tmp[628342]))
          (81189 call = V[81140] call_tmp[628347])
          (476684 'end of statement' V[81140] oldU[81152] V[81140] q[81167] q[81167] q[81167])
        }
        label _continueLabel[81195]
        unknown call_tmp[628352] "expr temp" "maybe param" "maybe type" "temp"
        (628355 'move' call_tmp[628352](81205 call V[81140] 2))
        unknown call_tmp[628357] "expr temp" "maybe param" "maybe type" "temp"
        (628360 'move' call_tmp[628357](81203 call != call_tmp[628352] 0))
        (81208 'move' tmp[81192](81201 call _cond_test call_tmp[628357]))
        tmp[81192]
      }
      label _breakLabel[81196]
    }
    unknown call_tmp[628362] "expr temp" "maybe param" "maybe type" "temp"
    (628365 'move' call_tmp[628362](81226 call U[81130] 2))
    unknown call_tmp[628367] "expr temp" "maybe param" "maybe type" "temp"
    (628370 'move' call_tmp[628367](81230 call U[81130] 0))
    unknown call_tmp[628372] "expr temp" "maybe param" "maybe type" "temp"
    (628375 'move' call_tmp[628372](81232 call _build_tuple call_tmp[628362] call_tmp[628367]))
    (511968 'move' ret[511963](511967 'deref' call_tmp[628372]))
    gotoReturn _end_chpl__extendedEuclidHelper[511961] _end_chpl__extendedEuclidHelper[511961]
    (476691 'end of statement' U[81130] U[81130])
    label _end_chpl__extendedEuclidHelper[511961]
    (511965 return ret[511963])
  }
  function chpl__extendedEuclid[81247](arg u[81244] :
  (81243 call int(64)[13] 32), arg v[81253] :
  (81252 call int(64)[13] 32)) : _unknown[51] "inline"
  {
    unknown ret[511974] "RVV" "temp"
    unknown call_tmp[628377] "expr temp" "maybe param" "maybe type" "temp"
    (628380 'move' call_tmp[628377](81260 call chpl__extendedEuclidHelper u[81244] v[81253]))
    (511979 'move' ret[511974](511978 'deref' call_tmp[628377]))
    (511976 return ret[511974])
  }
  function chpl__extendedEuclid[81275](arg u[81272] :
  (81271 call int(64)[13] 64), arg v[81281] :
  (81280 call int(64)[13] 64)) : _unknown[51] "inline"
  {
    unknown ret[511983] "RVV" "temp"
    unknown call_tmp[628382] "expr temp" "maybe param" "maybe type" "temp"
    (628385 'move' call_tmp[628382](81288 call chpl__extendedEuclidHelper u[81272] v[81281]))
    (511988 'move' ret[511983](511987 'deref' call_tmp[628382]))
    (511985 return ret[511983])
  }
  function chpl__rangeIdxTypeError[81298](arg idxType[81296]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[628387] "expr temp" "maybe param" "maybe type" "temp"
    (628390 'move' call_tmp[628387](81321 call _cast string[26] idxType[81296]))
    (81340 call compilerError "ranges don't support '" call_tmp[628387] "' as their idxType")
    (511990 return _void[55])
  }
  function chpl__rangeStrideType[81349](arg idxType[81347]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[511994] "RVV" "temp" "type variable"
    unknown call_tmp[628392] "expr temp" "maybe param" "maybe type" "temp"
    (628395 'move' call_tmp[628392](81354 call isIntegralType idxType[81347]))
    unknown call_tmp[628397] "expr temp" "maybe param" "maybe type" "temp"
    (628400 'move' call_tmp[628397](81386 call _cond_test call_tmp[628392]))
    if call_tmp[628397]
    {
      unknown call_tmp[628402] "expr temp" "maybe param" "maybe type" "temp"
      (628405 'move' call_tmp[628402](81358 call chpl__signedType idxType[81347]))
      (511999 'move' ret[511994](511998 'deref' call_tmp[628402]))
      gotoReturn _end_chpl__rangeStrideType[511992] _end_chpl__rangeStrideType[511992]
    }
    {
      unknown tmp[421651] "maybe param" "temp"
      (421662 'move' tmp[421651](81365 call isEnumType idxType[81347]))
      unknown call_tmp[628407] "expr temp" "maybe param" "maybe type" "temp"
      (628410 'move' call_tmp[628407](421664 call _cond_invalid tmp[421651]))
      if call_tmp[628407]
      {
        (421667 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560037] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560038] "maybe param" "temp"
      unknown call_tmp[628412] "expr temp" "maybe param" "maybe type" "temp"
      (628415 'move' call_tmp[628412](421652 call isTrue tmp[421651]))
      (560043 'move' tmp[560038](560041 call _cond_test call_tmp[628412]))
      if tmp[560038]
      {
        (560048 'move' tmp[560037](560045 '_paramFoldLogical' tmp[560038] 1))
      }
      {
        unknown tmp[560050] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628417] "expr temp" "maybe param" "maybe type" "temp"
        (628420 'move' call_tmp[628417](81369 call isBoolType idxType[81347]))
        (560052 'move' tmp[560050](421656 call isTrue call_tmp[628417]))
        (560057 'move' tmp[560037](560054 '_paramFoldLogical' tmp[560038] tmp[560050]))
      }
      unknown call_tmp[628422] "expr temp" "maybe param" "maybe type" "temp"
      (628425 'move' call_tmp[628422](81382 call _cond_test tmp[560037]))
      if call_tmp[628422]
      {
        (512004 'move' ret[511994](512003 'deref' int(64)[13]))
        gotoReturn _end_chpl__rangeStrideType[511992] _end_chpl__rangeStrideType[511992]
      }
      {
        (81379 call chpl__rangeIdxTypeError idxType[81347])
      }
    }
    label _end_chpl__rangeStrideType[511992]
    (511996 return ret[511994])
  }
  function chpl__rangeUnsignedType[81398](arg idxType[81396]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512010] "RVV" "temp" "type variable"
    unknown call_tmp[628427] "expr temp" "maybe param" "maybe type" "temp"
    (628430 'move' call_tmp[628427](81403 call isIntegralType idxType[81396]))
    unknown call_tmp[628432] "expr temp" "maybe param" "maybe type" "temp"
    (628435 'move' call_tmp[628432](81435 call _cond_test call_tmp[628427]))
    if call_tmp[628432]
    {
      unknown call_tmp[628437] "expr temp" "maybe param" "maybe type" "temp"
      (628440 'move' call_tmp[628437](81407 call chpl__unsignedType idxType[81396]))
      (512015 'move' ret[512010](512014 'deref' call_tmp[628437]))
      gotoReturn _end_chpl__rangeUnsignedType[512008] _end_chpl__rangeUnsignedType[512008]
    }
    {
      unknown tmp[421672] "maybe param" "temp"
      (421683 'move' tmp[421672](81414 call isEnumType idxType[81396]))
      unknown call_tmp[628442] "expr temp" "maybe param" "maybe type" "temp"
      (628445 'move' call_tmp[628442](421685 call _cond_invalid tmp[421672]))
      if call_tmp[628442]
      {
        (421688 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560064] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560065] "maybe param" "temp"
      unknown call_tmp[628447] "expr temp" "maybe param" "maybe type" "temp"
      (628450 'move' call_tmp[628447](421673 call isTrue tmp[421672]))
      (560070 'move' tmp[560065](560068 call _cond_test call_tmp[628447]))
      if tmp[560065]
      {
        (560075 'move' tmp[560064](560072 '_paramFoldLogical' tmp[560065] 1))
      }
      {
        unknown tmp[560077] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628452] "expr temp" "maybe param" "maybe type" "temp"
        (628455 'move' call_tmp[628452](81418 call isBoolType idxType[81396]))
        (560079 'move' tmp[560077](421677 call isTrue call_tmp[628452]))
        (560084 'move' tmp[560064](560081 '_paramFoldLogical' tmp[560065] tmp[560077]))
      }
      unknown call_tmp[628457] "expr temp" "maybe param" "maybe type" "temp"
      (628460 'move' call_tmp[628457](81431 call _cond_test tmp[560064]))
      if call_tmp[628457]
      {
        (512020 'move' ret[512010](512019 'deref' uint(64)[115]))
        gotoReturn _end_chpl__rangeUnsignedType[512008] _end_chpl__rangeUnsignedType[512008]
      }
      {
        (81428 call chpl__rangeIdxTypeError idxType[81396])
      }
    }
    label _end_chpl__rangeUnsignedType[512008]
    (512012 return ret[512010])
  }
  function chpl__idxTypeToIntIdxType[81447](arg idxType[81445]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[512026] "RVV" "temp" "type variable"
    unknown call_tmp[628462] "expr temp" "maybe param" "maybe type" "temp"
    (628465 'move' call_tmp[628462](81452 call isBoolType idxType[81445]))
    unknown call_tmp[628467] "expr temp" "maybe param" "maybe type" "temp"
    (628470 'move' call_tmp[628467](81506 call _cond_test call_tmp[628462]))
    if call_tmp[628467]
    {
      (512031 'move' ret[512026](512030 'deref' int(64)[13]))
      gotoReturn _end_chpl__idxTypeToIntIdxType[512024] _end_chpl__idxTypeToIntIdxType[512024]
    }
    {
      unknown call_tmp[628472] "expr temp" "maybe param" "maybe type" "temp"
      (628475 'move' call_tmp[628472](81460 call isEnumType idxType[81445]))
      unknown call_tmp[628477] "expr temp" "maybe param" "maybe type" "temp"
      (628480 'move' call_tmp[628477](81502 call _cond_test call_tmp[628472]))
      if call_tmp[628477]
      {
        unknown call_tmp[628484] "expr temp" "maybe param" "maybe type" "temp"
        (628487 'move' call_tmp[628484](81462 call size _mt[243] idxType[81445]))
        unknown call_tmp[628489] "expr temp" "maybe param" "maybe type" "temp"
        (628492 'move' call_tmp[628489](81466 call < call_tmp[628484] 2))
        unknown call_tmp[628494] "expr temp" "maybe param" "maybe type" "temp"
        (628497 'move' call_tmp[628494](81489 call _cond_test call_tmp[628489]))
        if call_tmp[628494]
        {
          (81487 call compilerError "ranges are not currently supported for enums with fewer than two values")
        }
        (512036 'move' ret[512026](512035 'deref' int(64)[13]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[512024] _end_chpl__idxTypeToIntIdxType[512024]
      }
      {
        (512041 'move' ret[512026](512040 'deref' idxType[81445]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[512024] _end_chpl__idxTypeToIntIdxType[512024]
      }
    }
    label _end_chpl__idxTypeToIntIdxType[512024]
    (512028 return ret[512026])
  }
  function range[64319](?).chpl_intToIdx[81519](arg _mt[81524]:_MT[238], arg this[81521]:range[64319](?) :
  range[64319](?), arg i[81517]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[512047] "RVV" "temp"
    unknown call_tmp[628501] "expr temp" "maybe param" "maybe type" "temp"
    (628504 'move' call_tmp[628501](81528 call idxType _mt[243] this[81521]))
    unknown call_tmp[628506] "expr temp" "maybe param" "maybe type" "temp"
    (628509 'move' call_tmp[628506](81533 call chpl__intToIdx call_tmp[628501] i[81517]))
    (512052 'move' ret[512047](512051 'deref' call_tmp[628506]))
    (512049 return ret[512047])
  }
  function chpl__intToIdx[81545](arg idxType[81542]:integral[199](?), arg i[81548]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512056] "RVV" "temp"
    unknown call_tmp[628511] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628514 'move' call_tmp[628511](81552 'typeof' i[81548]))
    unknown call_tmp[628516] "expr temp" "maybe param" "maybe type" "temp"
    (628519 'move' call_tmp[628516](81554 call == call_tmp[628511] idxType[81542]))
    unknown call_tmp[628521] "expr temp" "maybe param" "maybe type" "temp"
    (628524 'move' call_tmp[628521](81565 call _cond_test call_tmp[628516]))
    if call_tmp[628521]
    {
      (512061 'move' ret[512056](512060 'deref' i[81548]))
      gotoReturn _end_chpl__intToIdx[512054] _end_chpl__intToIdx[512054]
    }
    {
      unknown call_tmp[628526] "expr temp" "maybe param" "maybe type" "temp"
      (628529 'move' call_tmp[628526](81561 call _cast idxType[81542] i[81548]))
      (512066 'move' ret[512056](512065 'deref' call_tmp[628526]))
      gotoReturn _end_chpl__intToIdx[512054] _end_chpl__intToIdx[512054]
    }
    label _end_chpl__intToIdx[512054]
    (512058 return ret[512056])
  }
  function chpl__intToIdx[81580](arg idxType[81577]:integral[199](?), param arg i[81583]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512072] "RVV" "temp"
    unknown call_tmp[628531] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628534 'move' call_tmp[628531](81587 'typeof' i[81583]))
    unknown call_tmp[628536] "expr temp" "maybe param" "maybe type" "temp"
    (628539 'move' call_tmp[628536](81589 call == call_tmp[628531] idxType[81577]))
    unknown call_tmp[628541] "expr temp" "maybe param" "maybe type" "temp"
    (628544 'move' call_tmp[628541](81600 call _cond_test call_tmp[628536]))
    if call_tmp[628541]
    {
      (512077 'move' ret[512072](512076 'deref' i[81583]))
      gotoReturn _end_chpl__intToIdx[512070] _end_chpl__intToIdx[512070]
    }
    {
      unknown call_tmp[628546] "expr temp" "maybe param" "maybe type" "temp"
      (628549 'move' call_tmp[628546](81596 call _cast idxType[81577] i[81583]))
      (512082 'move' ret[512072](512081 'deref' call_tmp[628546]))
      gotoReturn _end_chpl__intToIdx[512070] _end_chpl__intToIdx[512070]
    }
    label _end_chpl__intToIdx[512070]
    (512074 return ret[512072])
  }
  function chpl__intToIdx[81615](arg idxType[81612]:enum[187](?), arg i[81618]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512088] "RVV" "temp"
    unknown call_tmp[628551] "expr temp" "maybe param" "maybe type" "temp"
    (628554 'move' call_tmp[628551](81625 call chpl__orderToEnum i[81618] idxType[81612]))
    (512093 'move' ret[512088](512092 'deref' call_tmp[628551]))
    (512090 return ret[512088])
  }
  function chpl__intToIdx[81635](arg idxType[81633]:_any[178](?), arg i[81638]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512097] "RVV" "temp"
    unknown call_tmp[628556] "expr temp" "maybe param" "maybe type" "temp"
    (628559 'move' call_tmp[628556](81647 call _cast bool[10] i[81638]))
    (512102 'move' ret[512097](512101 'deref' call_tmp[628556]))
    (512099 return ret[512097])
  }
  where {
    (81644 call isBoolType idxType[81633])
  }
  function chpl__intToIdx[81659](arg idxType[81657]:_any[178](?), param arg i[81662]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[512106] "RVV" "param" "temp"
    unknown call_tmp[628561] "expr temp" "maybe param" "maybe type" "temp"
    (628564 'move' call_tmp[628561](81671 call _cast bool[10] i[81662]))
    (512111 'move' ret[512106](512110 'deref' call_tmp[628561]))
    (512108 return ret[512106])
  }
  where {
    (81668 call isBoolType idxType[81657])
  }
  function chpl__intToIdx[81683](arg idxType[81681]:_any[178](?), arg i[81686]:nothing[7]) : _unknown[51] "inline"
  {
    unknown ret[512115] "RVV" "temp"
    (512120 'move' ret[512115](512119 'deref' none[57]))
    (512117 return ret[512115])
  }
  function chpl__idxToInt[81701](arg i[81698]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512124] "RVV" "temp"
    (512129 'move' ret[512124](512128 'deref' i[81698]))
    (512126 return ret[512124])
  }
  function chpl__idxToInt[81715](param arg i[81712]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[512133] "RVV" "param" "temp"
    (512138 'move' ret[512133](512137 'deref' i[81712]))
    (512135 return ret[512133])
  }
  function chpl__idxToInt[81729](arg i[81726]:enum[187](?)) : _unknown[51] "inline"
  {
    unknown ret[512142] "RVV" "temp"
    unknown call_tmp[628566] "expr temp" "maybe param" "maybe type" "temp"
    (628569 'move' call_tmp[628566](81734 call chpl__enumToOrder i[81726]))
    (512147 'move' ret[512142](512146 'deref' call_tmp[628566]))
    (512144 return ret[512142])
  }
  function chpl__idxToInt[81746](arg i[81743]:bool[10]) : _unknown[51] "inline"
  {
    unknown ret[512151] "RVV" "temp"
    unknown call_tmp[628571] "expr temp" "maybe param" "maybe type" "temp"
    (628574 'move' call_tmp[628571](81750 call _cast int(64)[13] i[81743]))
    (512156 'move' ret[512151](512155 'deref' call_tmp[628571]))
    (512153 return ret[512151])
  }
  function chpl__idxToInt[81763](param arg i[81760]:bool[10]) param : _unknown[51] "inline"
  {
    unknown ret[512160] "RVV" "param" "temp"
    unknown call_tmp[628576] "expr temp" "maybe param" "maybe type" "temp"
    (628579 'move' call_tmp[628576](81767 call _cast int(64)[13] i[81760]))
    (512165 'move' ret[512160](512164 'deref' call_tmp[628576]))
    (512162 return ret[512160])
  }
  (355092 'used modules list'(64187 'use' ChapelBase[307])(64189 'use' SysBasic[223537])(64190 'use' HaltWrappers[210018])(64194 'use' Math[215879])(64196 'use' DSIUtil[230909]))
}