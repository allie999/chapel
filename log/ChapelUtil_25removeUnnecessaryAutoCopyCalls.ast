AST dump for ChapelUtil after pass removeUnnecessaryAutoCopyCalls.
Module use list: ChapelStandard 

{
  function chpl__init_ChapelUtil[416052]() : void[4] "insert line file info" "module init" "resolved"
  {
    (522125 return _void[55])
  }
  function safeAdd[979748](const in arg a[979750]:int(64)[13], const in arg b[979755]:int(64)[13]) : bool[10] "instantiated generic" "invisible fn" "resolved"
  {
    val ret[979757]:bool[10] "dead after last mention" "RVV" "temp"
    val call_tmp[979765]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp" "type variable"
    const-val call_tmp[979798]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (979800 'move' call_tmp[979798](979803 call <[948417] a[979750]))
    const-val call_tmp[979806]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (979808 'move' call_tmp[979806] call_tmp[979798])
    if call_tmp[979806]
    {
      const-val call_tmp[979815]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (979817 'move' call_tmp[979815](979820 call >=[979995] b[979755]))
      const-val call_tmp[979823]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (979825 'move' call_tmp[979823] call_tmp[979815])
      if call_tmp[979823]
      {
        (979832 'move' ret[979757] 1)
        gotoReturn _end_safeAdd[979971] _end_safeAdd[979971]
      }
      {
        val call_tmp[979839]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp" "type variable"
        const-val call_tmp[979852]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (979854 'move' call_tmp[979852](979857 call -[980219] a[979750]))
        const-val call_tmp[979860]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (979862 'move' call_tmp[979860](979865 call <[437490] b[979755] call_tmp[979852]))
        const-val call_tmp[979868]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (979870 'move' call_tmp[979868] call_tmp[979860])
        if call_tmp[979868]
        {
          (979877 'move' ret[979757] 0)
          gotoReturn _end_safeAdd[979971] _end_safeAdd[979971]
        }
        {
          (979884 'move' ret[979757] 1)
          gotoReturn _end_safeAdd[979971] _end_safeAdd[979971]
        }
      }
    }
    {
      const-val call_tmp[979893]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (979895 'move' call_tmp[979893](979898 call <=[437050] b[979755] 0))
      const-val call_tmp[979901]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (979903 'move' call_tmp[979901] call_tmp[979893])
      if call_tmp[979901]
      {
        (979910 'move' ret[979757] 1)
        gotoReturn _end_safeAdd[979971] _end_safeAdd[979971]
      }
      {
        val call_tmp[979917]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp" "type variable"
        const-val call_tmp[979930]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (979932 'move' call_tmp[979930](979935 call -[980367] a[979750]))
        const-val call_tmp[979938]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (979940 'move' call_tmp[979938](979943 call >[437710] b[979755] call_tmp[979930]))
        const-val call_tmp[979946]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (979948 'move' call_tmp[979946] call_tmp[979938])
        if call_tmp[979946]
        {
          (979955 'move' ret[979757] 0)
          gotoReturn _end_safeAdd[979971] _end_safeAdd[979971]
        }
        {
          (979962 'move' ret[979757] 1)
          gotoReturn _end_safeAdd[979971] _end_safeAdd[979971]
        }
      }
    }
    label _end_safeAdd[979971]
    (979973 return ret[979757])
  }
  type chpl_main_argument[167416] val argc[167403]:int(64)[13] val return_value[167411]:int(32)[95]
  function chpl_rt_preUserCodeHook[167714]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522111 return _void[55])
  }
  function chpl_rt_postUserCodeHook[167720]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522113 return _void[55])
  }
  function chpl_addModule[167735](const in arg moduleName[167732]:c_string[19], const in arg deinitFun[167738]:c_fn_ptr[152]) : void[4] "resolved" "no return value for void"
  {
    val call_tmp[679379]:chpl_ModuleDeinit[19827] "dead after last mention" "insert auto destroy for explicit new" "maybe param" "temp"
    val new_temp[1414110]:chpl_ModuleDeinit[19827] "dead after last mention" "temp"
    val tmp[2050547]:chpl_ModuleDeinit[19827] "temp"
    (2050552 'move' tmp[2050547](2050549 '.v' chpl_moduleDeinitFuns[19840] value[2050513]))
    (1414112 'move' new_temp[1414110](1413981 call _new[1414046] moduleName[167732] deinitFun[167738] tmp[2050547]))
    (679382 'move' call_tmp[679379] new_temp[1414110])
    val coerce_tmp[1414128]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (1414134 'move' coerce_tmp[1414128] call_tmp[679379])
    ref tmp[2050523]:chpl_ModuleDeinit[19827] "temp"
    (2050528 'move' tmp[2050523](2050525 '.' chpl_moduleDeinitFuns[19840] value[2050513]))
    (167751 call =[1412791] tmp[2050523] coerce_tmp[1414128])
    (522115 return _void[55])
  }
  function chpl_deinitModules[167759]() : void[4] "export" "local args" "resolved" "no return value for void"
  {
    val prev[167810]:chpl_ModuleDeinit[19827] "dead at end of block" "insert auto destroy"
    val tmp[2050539]:chpl_ModuleDeinit[19827] "temp"
    (2050544 'move' tmp[2050539](2050541 '.v' chpl_moduleDeinitFuns[19840] value[2050513]))
    (544591 'move' prev[167810] tmp[2050539])
    {
      val tmp[167867]:bool[10] "dead after last mention" "temp"
      val coerce_tmp[1412410]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1412415 'move' coerce_tmp[1412410](1412412 'cast' object[22] prev[167810]))
      (167885 'move' tmp[167867](167883 call _cond_test[9881] coerce_tmp[1412410]))
      WhileDo[167872] hazard
      {
        {
          val call_tmp[679389]:chpl_ModuleDeinit[19827] "dead at end of block" "maybe param" "temp"
          (679392 'move' call_tmp[679389](167816 call postfix![1412418] prev[167810]))
          const curr[167818]:chpl_ModuleDeinit[19827] "dead at end of block" "const" "insert auto destroy"
          (544593 'move' curr[167818] call_tmp[679389])
          ref call_tmp[679408]:_ref(c_fn_ptr)[948883] "dead after last mention" "maybe param" "reference to a const" "temp"
          val coerce_tmp[1412740]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1412745 'move' coerce_tmp[1412740] curr[167818])
          (679411 'move' call_tmp[679408](167846 call deinitFun[752647] coerce_tmp[1412740]))
          const-val coerce_tmp[1412748]:c_fn_ptr[152] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1412752 'move' coerce_tmp[1412748](1412750 'deref' call_tmp[679408]))
          (167850 call chpl_execute_module_deinit[167792] coerce_tmp[1412748])
          ref call_tmp[679415]:_ref(chpl_ModuleDeinit)[981886] "dead after last mention" "maybe param" "reference to a const" "temp"
          val coerce_tmp[1412755]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1412760 'move' coerce_tmp[1412755] curr[167818])
          (679418 'move' call_tmp[679415](167856 call prevModule[752673] coerce_tmp[1412755]))
          val coerce_tmp[1412826]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1412830 'move' coerce_tmp[1412826](1412828 'deref' call_tmp[679415]))
          (167859 call =[1412791] prev[167810] coerce_tmp[1412826])
          (167864 call chpl__delete[1412833] curr[167818])
        }
        label _continueLabel[167870]
        val coerce_tmp[1413892]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (1413897 'move' coerce_tmp[1413892](1413894 'cast' object[22] prev[167810]))
        (167878 'move' tmp[167867](167876 call _cond_test[9881] coerce_tmp[1413892]))
        tmp[167867]
      }
      label _breakLabel[167871]
    }
    ref tmp[2050531]:chpl_ModuleDeinit[19827] "temp"
    (2050536 'move' tmp[2050531](2050533 '.' chpl_moduleDeinitFuns[19840] value[2050513]))
    (167890 call =[1413928] tmp[2050531] nil[44])
    (522123 return _void[55])
  }
  function chpl_execute_module_deinit[167792](const in arg deinitFun[167789]:c_fn_ptr[152]) : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522121 return _void[55])
  }
}