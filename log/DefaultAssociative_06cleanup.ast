AST dump for DefaultAssociative after pass cleanup.
Module use list: 

{
  (156281 'use' DSIUtil)
  (156288 'use' ChapelDistribution)
  (156290 'use' ChapelRange)
  (156291 'use' SysBasic)
  (156292 'use' ChapelArray)
  (156296 'use' ChapelBase)
  (156298 'use' ChapelLocks)
  (156299 'use' IO)
  (156302 'use' ChapelHashing)
  (156304 'use' ChapelHashtable)
  (156306 'use' SysError)
  unknown debugDefaultAssoc[156309] "config" "param" 0
  (156312 'end of statement')
  unknown debugAssocDataPar[156314] "config" "param" 0
  (156317 'end of statement')
  function DefaultAssociativeDomRehashHelper[156516].startRehash[156333](arg _mt[156520]:_MT[238], arg this[156518]:DefaultAssociativeDomRehashHelper[156516], arg newSize[156330] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156351] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156352] "expr temp" "temp"
      (156361 'move' _iterator[156352](156359 call _getIterator(156337 call . dom c"_arrs")))
      Defer
      {
        {
          (156378 call _freeIterator _iterator[156352])
        }
      }
      { scopeless type
        (156367 'move' _indexOfInterest[156351](156364 call iteratorIndex _iterator[156352]))
      }
      ForLoop[156353]
      {
        unknown arr[156371] "index var" "insert auto destroy"
        (156373 'move' arr[156371] _indexOfInterest[156351])
        {
          (156348 call(156343 call . arr c"_startRehash") newSize)
        }
        label _continueLabel[156356]
        _indexOfInterest[156351]
        _iterator[156352]
      }
      label _breakLabel[156357]
    }
  }
  function DefaultAssociativeDomRehashHelper[156516].moveElementDuringRehash[156394](arg _mt[156524]:_MT[238], arg this[156522]:DefaultAssociativeDomRehashHelper[156516], arg oldSlot[156391] :
  int[13], arg newSlot[156397] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156417] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156418] "expr temp" "temp"
      (156427 'move' _iterator[156418](156425 call _getIterator(156402 call . dom c"_arrs")))
      Defer
      {
        {
          (156444 call _freeIterator _iterator[156418])
        }
      }
      { scopeless type
        (156433 'move' _indexOfInterest[156417](156430 call iteratorIndex _iterator[156418]))
      }
      ForLoop[156419]
      {
        unknown arr[156437] "index var" "insert auto destroy"
        (156439 'move' arr[156437] _indexOfInterest[156417])
        {
          (156414 call(156408 call . arr c"_moveElementDuringRehash") oldSlot newSlot)
        }
        label _continueLabel[156422]
        _indexOfInterest[156417]
        _iterator[156418]
      }
      label _breakLabel[156423]
    }
  }
  function DefaultAssociativeDomRehashHelper[156516].finishRehash[156460](arg _mt[156528]:_MT[238], arg this[156526]:DefaultAssociativeDomRehashHelper[156516], arg oldSize[156457] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156478] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156479] "expr temp" "temp"
      (156488 'move' _iterator[156479](156486 call _getIterator(156464 call . dom c"_arrs")))
      Defer
      {
        {
          (156505 call _freeIterator _iterator[156479])
        }
      }
      { scopeless type
        (156494 'move' _indexOfInterest[156478](156491 call iteratorIndex _iterator[156479]))
      }
      ForLoop[156480]
      {
        unknown arr[156498] "index var" "insert auto destroy"
        (156500 'move' arr[156498] _indexOfInterest[156478])
        {
          (156475 call(156470 call . arr c"_finishRehash") oldSize)
        }
        label _continueLabel[156483]
        _indexOfInterest[156478]
        _iterator[156479]
      }
      label _breakLabel[156484]
    }
  }
  type DefaultAssociativeDomRehashHelper[156516] unknown dom[156323](156322 'to unmanaged class from unknown' DefaultAssociativeDom) chpl__rehashHelpers
  function DefaultAssociativeDom[158900](?).lockTable[156577](arg _mt[158904]:_MT[238], arg this[158902]:DefaultAssociativeDom[158900](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(156587 call _cond_test parSafe)
    {
      (156585 call(156581 call . tableLock c"lock"))
    }
  }
  function DefaultAssociativeDom[158900](?).unlockTable[156597](arg _mt[158908]:_MT[238], arg this[158906]:DefaultAssociativeDom[158900](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(156607 call _cond_test parSafe)
    {
      (156605 call(156601 call . tableLock c"unlock"))
    }
  }
  function DefaultAssociativeDom[158900](?).linksDistribution[156617](arg _mt[158912]:_MT[238], arg this[158910]:DefaultAssociativeDom[158900](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (156620 return 0)
  }
  function DefaultAssociativeDom[158900](?).dsiLinksDistribution[156627](arg _mt[158916]:_MT[238], arg this[158914]:DefaultAssociativeDom[158900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (156630 return 0)
  }
  function DefaultAssociativeDom[158900](?).init[156639](arg _mt[158920]:_MT[238], arg this[158918]:DefaultAssociativeDom[158900](?), arg idxType[156637]:_any[178](?), param arg parSafe[156642] :
  bool[10], arg dist[156647] :
  (156646 'to unmanaged class from unknown' DefaultDist)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(156699 call _cond_test(156654 call !(156653 call chpl__validDefaultAssocDomIdxType idxType)))
    {
      (156697 call compilerError "Default Associative domains with idxType="(156677 call _cast string[26] idxType) " are not allowed" 2)
    }
    (156710 call =(156706 call . this c"idxType") idxType)
    (156718 call =(156714 call . this c"parSafe") parSafe)
    (156726 call =(156722 call . this c"dist") dist)
    (156741 call =(156732 call . this c"table")(156735 'new'(156740 call chpl__hashtable idxType nothing[7])))
    (156749 call(156745 call . this c"complete"))
    (156769 call =(156757 call .(156752 call . this c"table") c"rehashHelpers")(156760 'new'(156768 call DefaultAssociativeDomRehashHelper(156765 call _cast(156764 'to unmanaged class from unknown' class[232](?)) this))))
  }
  function DefaultAssociativeDom[158900](?).deinit[156776](arg _mt[158924]:_MT[238], arg this[158922]:DefaultAssociativeDom[158900](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function DefaultAssociativeDom[158900](?).dsiBuildArray[156785](arg _mt[158928]:_MT[238], arg this[158926]:DefaultAssociativeDom[158900](?), arg eltType[156783]:_any[178](?), param arg initElts[156788] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (156810 return(156793 'new'(_chpl_manager = unmanaged[220](?))(156809 call DefaultAssociativeArr(eltType = eltType)(idxType = idxType)(parSafeDom = parSafe)(dom =(156805 call _to_unmanaged this))(initElts = initElts))))
  }
  function DefaultAssociativeDom[158900](?).dsiSerialReadWrite[156819](arg _mt[158932]:_MT[238], arg this[158930]:DefaultAssociativeDom[158900](?), arg f[156817]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown binary[156827](156826 call(156822 call . f c"binary"))
    (156830 'end of statement')
    if(157168 call _cond_test(156833 call . f c"writing"))
    {
      if(156976 call _cond_test binary)
      {
        unknown numIndices[156839] dsiNumIndices int[13]
        (156842 'end of statement')
        (156846 call <~> f numIndices)
        {
          unknown _indexOfInterest[156857] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156858] "expr temp" "temp"
          (156867 'move' _iterator[156858](156865 call _getIterator this))
          Defer
          {
            {
              (156883 call _freeIterator _iterator[156858])
            }
          }
          { scopeless type
            (156872 'move' _indexOfInterest[156857](156869 call iteratorIndex _iterator[156858]))
          }
          ForLoop[156859]
          {
            unknown idx[156876] "index var" "insert auto destroy"
            (156878 'move' idx[156876] _indexOfInterest[156857])
            {
              (156853 call <~> f idx)
            }
            label _continueLabel[156862]
            _indexOfInterest[156857]
            _iterator[156858]
          }
          label _breakLabel[156863]
        }
      }
      {
        unknown first[156891] 1
        (156894 'end of statement')
        (156902 call <~> f(156897 'new'(156901 call ioLiteral "{")))
        {
          unknown _indexOfInterest[156934] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156935] "expr temp" "temp"
          (156944 'move' _iterator[156935](156942 call _getIterator this))
          Defer
          {
            {
              (156960 call _freeIterator _iterator[156935])
            }
          }
          { scopeless type
            (156949 'move' _indexOfInterest[156934](156946 call iteratorIndex _iterator[156935]))
          }
          ForLoop[156936]
          {
            unknown idx[156953] "index var" "insert auto destroy"
            (156955 'move' idx[156953] _indexOfInterest[156934])
            {
              if(156922 call _cond_test first)
              {
                (156910 call = first 0)
              }
              {
                (156919 call <~> f(156914 'new'(156918 call ioLiteral ", ")))
              }
              (156931 call <~> f idx)
            }
            label _continueLabel[156939]
            _indexOfInterest[156934]
            _iterator[156935]
          }
          label _breakLabel[156940]
        }
        (156973 call <~> f(156968 'new'(156972 call ioLiteral "}")))
      }
    }
    {
      (156983 call dsiClear)
      if(157164 call _cond_test binary)
      {
        unknown numIndices[156988] int[13]
        (156991 'end of statement')
        (156995 call <~> f numIndices)
        {
          unknown _indexOfInterest[157019] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[157020] "expr temp" "temp"
          (157029 'move' _iterator[157020](157027 call _getIterator(157034 call chpl_direct_range_iter 1 numIndices 1)))
          Defer
          {
            {
              (157050 call _freeIterator _iterator[157020])
            }
          }
          { scopeless type
            (157039 'move' _indexOfInterest[157019](157036 call iteratorIndex _iterator[157020]))
          }
          ForLoop[157021]
          {
            unknown i[157043] "index var" "insert auto destroy"
            (157045 'move' i[157043] _indexOfInterest[157019])
            {
              unknown idx[157004] idxType
              (157007 'end of statement')
              (157011 call <~> f idx)
              (157017 call dsiAdd idx)
            }
            label _continueLabel[157024]
            _indexOfInterest[157019]
            _iterator[157020]
          }
          label _breakLabel[157025]
        }
      }
      {
        (157063 call <~> f(157058 'new'(157062 call ioLiteral "{")))
        unknown first[157068] 1
        (157071 'end of statement')
        unknown comma[157078](157072 'new'(157077 call ioLiteral "," 1))
        (157081 'end of statement')
        unknown end[157087](157082 'new'(157086 call ioLiteral "}"))
        (157090 'end of statement')
        {
          unknown tmp[157143] "temp"
          (157161 'move' tmp[157143](157159 call _cond_test 1))
          WhileDo[157148]
          {
            {
              Try
              {
                {
                  (157094 call <~> f end)
                  break nil[44]
                }
              }
              Catch err : BadFormatError
              {
                unknown tmp[354564] "temp"(354568 'dynamic_cast'(354566 'to nilable class'(354565 'to unmanaged class' BadFormatError))(354567 'current error'))
                if(354571 '!=' tmp[354564] nil[44])
                {
                  unknown err[354577](354582 'new'(354580 call _owned(354578 'to non nilable class' tmp[354564])))
                  {
                  }
                }
                {
                }
              }
              if(157118 call _cond_test(157111 call ! first))
              {
                (157115 call <~> f comma)
              }
              (157125 call = first 0)
              unknown idx[157129] idxType
              (157132 'end of statement')
              (157135 call <~> f idx)
              (157141 call dsiAdd idx)
            }
            label _continueLabel[157146]
            (157154 'move' tmp[157143](157152 call _cond_test 1))
            tmp[157143]
          }
          label _breakLabel[157147]
        }
      }
    }
  }
  function DefaultAssociativeDom[158900](?).dsiSerialWrite[157178](arg _mt[158936]:_MT[238], arg this[158934]:DefaultAssociativeDom[158900](?), arg f[157176]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157186 call(157181 call . this c"dsiSerialReadWrite") f)
  }
  function DefaultAssociativeDom[158900](?).dsiSerialRead[157195](arg _mt[158940]:_MT[238], arg this[158938]:DefaultAssociativeDom[158900](?), arg f[157193]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157203 call(157198 call . this c"dsiSerialReadWrite") f)
  }
  function DefaultAssociativeDom[158900](?).dsiAssignDomain[157214](arg _mt[158944]:_MT[238], arg this[158942]:DefaultAssociativeDom[158900](?), arg rhs[157211] :
  _domain, arg lhsPrivate[157217] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (157224 call chpl_assignDomainWithIndsIterSafeForRemoving this rhs)
  }
  function DefaultAssociativeDom[158900](?).dsiNumIndices[157231](arg _mt[158948]:_MT[238], arg this[158946]:DefaultAssociativeDom[158900](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (157239 return(157238 call(157234 call . numEntries c"read")))
  }
  function DefaultAssociativeDom[158900](?).dsiIndsIterSafeForRemoving[157246](arg _mt[158952]:_MT[238], arg this[158950]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (157255 call =(157251 call . table c"postponeResize") 1)
    {
      unknown _indexOfInterest[157269] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157270] "expr temp" "temp"
      (157279 'move' _iterator[157270](157277 call _getIterator(157265 call(157261 call . this c"these"))))
      Defer
      {
        {
          (157296 call _freeIterator _iterator[157270])
        }
      }
      { scopeless type
        (157285 'move' _indexOfInterest[157269](157282 call iteratorIndex _iterator[157270]))
      }
      ForLoop[157271]
      {
        unknown i[157289] "index var" "insert auto destroy"
        (157291 'move' i[157289] _indexOfInterest[157269])
        (157267 yield i)
        label _continueLabel[157274]
        _indexOfInterest[157269]
        _iterator[157270]
      }
      label _breakLabel[157275]
    }
    const tmp[157336] "const" "temp"
    (157338 'move' tmp[157336](157334 'deref'(157333 '_wide_get_locale' this)))
    {
      {
        (157309 call =(157305 call . table c"postponeResize") 0)
        (157315 call lockTable)
        Defer
        {
          {
            (157319 call unlockTable)
          }
        }
        (157331 call(157327 call . table c"maybeShrinkAfterRemove"))
      }
      (157341 'on block' 0 tmp[157336])
    }
  }
  function DefaultAssociativeDom[158900](?)._isSlotFull[157352](arg _mt[158956]:_MT[238], arg this[158954]:DefaultAssociativeDom[158900](?), arg slot[157349] :
  int[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (157367 return(157366 call(157362 call .(157361 call(157356 call . table c"table") slot) c"isFull")))
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158900](?).these[157375](arg _mt[158960]:_MT[238], arg this[158958]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[157425] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157426] "expr temp" "temp"
      (157435 'move' _iterator[157426](157433 call _getIterator(157385 call(157381 call . table c"allSlots"))))
      Defer
      {
        {
          (157452 call _freeIterator _iterator[157426])
        }
      }
      { scopeless type
        (157441 'move' _indexOfInterest[157425](157438 call iteratorIndex _iterator[157426]))
      }
      ForLoop[157427]
      {
        unknown slot[157445] "index var" "insert auto destroy"
        (157447 'move' slot[157445] _indexOfInterest[157425])
        {
          unknown aSlot[157393] "ref var"(157392 call(157387 call . table c"table") slot)
          (157396 'end of statement')
          if(157421 call _cond_test(157410 call ==(157401 call . aSlot c"status")(157407 call . chpl__hash_status c"full")))
          {
            (157418 yield(157415 call . aSlot c"key"))
          }
        }
        label _continueLabel[157430]
        _indexOfInterest[157425]
        _iterator[157426]
      }
      label _breakLabel[157431]
    }
  }
  function DefaultAssociativeDom[158900](?).these[157468](arg _mt[158964]:_MT[238], arg this[158962]:DefaultAssociativeDom[158900](?), param arg tag[157465] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(157500 call _cond_test debugDefaultAssoc)
    {
      (157497 call writeln "*** In associative domain standalone iterator")
    }
    {
      unknown _indexOfInterest[157547] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157548] "expr temp" "temp"
      (157557 'move' _iterator[157548](157555 call _getIterator(157513 call(157507 call . table c"allSlots")(tag = tag))))
      Defer
      {
        {
          (157574 call _freeIterator _iterator[157548])
        }
      }
      { scopeless type
        (157563 'move' _indexOfInterest[157547](157560 call iteratorIndex _iterator[157548]))
      }
      ForLoop[157549]
      {
        unknown slot[157567] "index var" "insert auto destroy"
        (157569 'move' slot[157567] _indexOfInterest[157547])
        {
          unknown aSlot[157521] "ref var"(157520 call(157515 call . table c"table") slot)
          (157524 'end of statement')
          if(157543 call _cond_test(157534 call ==(157527 call . aSlot c"status")(157531 call . chpl__hash_status c"full")))
          {
            (157540 yield(157537 call . aSlot c"key"))
          }
        }
        label _continueLabel[157552]
        _indexOfInterest[157547]
        _iterator[157548]
      }
      label _breakLabel[157553]
    }
  }
  where {
    (157475 call == tag(157472 call . iterKind c"standalone"))
  }
  function DefaultAssociativeDom[158900](?).these[157590](arg _mt[158968]:_MT[238], arg this[158966]:DefaultAssociativeDom[158900](?), param arg tag[157587] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(157621 call _cond_test debugDefaultAssoc)
    {
      (157619 call writeln "*** In associative domain leader iterator")
    }
    {
      unknown _indexOfInterest[157643] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157644] "expr temp" "temp"
      (157653 'move' _iterator[157644](157651 call _getIterator(157635 call(157629 call . table c"allSlots")(tag = tag))))
      Defer
      {
        {
          (157670 call _freeIterator _iterator[157644])
        }
      }
      { scopeless type
        (157659 'move' _indexOfInterest[157643](157656 call iteratorIndex _iterator[157644]))
      }
      ForLoop[157645]
      {
        unknown chunk[157663] "index var" "insert auto destroy"
        (157665 'move' chunk[157663] _indexOfInterest[157643])
        (157641 yield(157639 call _build_tuple chunk this))
        label _continueLabel[157648]
        _indexOfInterest[157643]
        _iterator[157644]
      }
      label _breakLabel[157649]
    }
  }
  where {
    (157597 call == tag(157594 call . iterKind c"leader"))
  }
  function DefaultAssociativeDom[158900](?).these[157686](arg _mt[158972]:_MT[238], arg this[158970]:DefaultAssociativeDom[158900](?), param arg tag[157683] :
  iterKind, arg followThis[157688]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[157703] "temp" followThis
    (157710 call _check_tuple_var_decl tmp[157703] 2)
    unknown chunk[157697](157704 call tmp[157703] 0)
    unknown followThisDom[157699](157707 call tmp[157703] 1)
    (157715 'end of statement')
    if(157739 call _cond_test debugDefaultAssoc)
    {
      (157737 call writeln "In associative domain follower code")
    }
    const sameDom[157748] "const"(157746 call == followThisDom this)
    (157751 'end of statement')
    if(157791 call _cond_test(157753 call ! sameDom))
    {
      if(157786 call _cond_test(157763 call !=(157756 call . followThisDom c"dsiNumIndices")(157760 call . this c"dsiNumIndices")))
      {
        (157784 call halt "zippered associative domains do not match")
      }
    }
    const otherTable[157803] "const"(157800 call .(157797 call . followThisDom c"table") c"table")
    (157806 'end of statement')
    {
      unknown _indexOfInterest[157902] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157903] "expr temp" "temp"
      (157912 'move' _iterator[157903](157910 call _getIterator chunk))
      Defer
      {
        {
          (157928 call _freeIterator _iterator[157903])
        }
      }
      { scopeless type
        (157917 'move' _indexOfInterest[157902](157914 call iteratorIndex _iterator[157903]))
      }
      ForLoop[157904]
      {
        unknown slot[157921] "index var" "insert auto destroy"
        (157923 'move' slot[157921] _indexOfInterest[157902])
        {
          const aSlot[157813] "const" "ref var"(157812 call otherTable slot)
          (157816 'end of statement')
          if(157898 call _cond_test(157823 call(157819 call . aSlot c"isFull")))
          {
            unknown idx[157825] slot
            (157828 'end of statement')
            if(157882 call _cond_test(157831 call ! sameDom))
            {
              const tmp[157850] "const" "temp"(157849 call(157841 call . table c"findFullSlot")(157845 call . aSlot c"key"))
              (157857 call _check_tuple_var_decl tmp[157850] 2)
              const match[157833] "const"(157851 call tmp[157850] 0)
              const loc[157835] "const"(157854 call tmp[157850] 1)
              (157862 'end of statement')
              if(157872 call _cond_test(157865 call ! match))
              {
                (157870 call halt "zippered associative domains do not match")
              }
              (157879 call = idx loc)
            }
            (157896 yield(157893 call .(157892 call(157887 call . table c"table") idx) c"key"))
          }
        }
        label _continueLabel[157907]
        _indexOfInterest[157902]
        _iterator[157903]
      }
      label _breakLabel[157908]
    }
  }
  where {
    (157695 call == tag(157692 call . iterKind c"follower"))
  }
  function DefaultAssociativeDom[158900](?).dsiMyDist[157940](arg _mt[158976]:_MT[238], arg this[158974]:DefaultAssociativeDom[158900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (157945 return dist)
  }
  { scopeless type
    (157943 'to unmanaged class from unknown' BaseDist)
  }
  function DefaultAssociativeDom[158900](?).dsiClear[157953](arg _mt[158980]:_MT[238], arg this[158978]:DefaultAssociativeDom[158900](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const tmp[158132] "const" "temp"
    (158134 'move' tmp[158132](158130 'deref'(158129 '_wide_get_locale' this)))
    {
      {
        (157958 call lockTable)
        {
          unknown _indexOfInterest[158076] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[158077] "expr temp" "temp"
          (158086 'move' _iterator[158077](158084 call _getIterator(157967 call(157963 call . table c"allSlots"))))
          Defer
          {
            {
              (158103 call _freeIterator _iterator[158077])
            }
          }
          { scopeless type
            (158092 'move' _indexOfInterest[158076](158089 call iteratorIndex _iterator[158077]))
          }
          ForLoop[158078]
          {
            unknown slot[158096] "index var" "insert auto destroy"
            (158098 'move' slot[158096] _indexOfInterest[158076])
            {
              unknown aSlot[157975] "ref var"(157974 call(157969 call . table c"table") slot)
              (157978 'end of statement')
              if(158055 call _cond_test(157985 call(157981 call . aSlot c"isFull")))
              {
                unknown tmpKey[157987] idxType
                (157990 'end of statement')
                unknown tmpVal[157993] nothing[7]
                (157996 'end of statement')
                (158007 call(158000 call . table c"clearSlot") aSlot tmpKey tmpVal)
                {
                  unknown _indexOfInterest[158022] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[158023] "expr temp" "temp"
                  (158032 'move' _iterator[158023](158030 call _getIterator _arrs))
                  Defer
                  {
                    {
                      (158048 call _freeIterator _iterator[158023])
                    }
                  }
                  { scopeless type
                    (158037 'move' _indexOfInterest[158022](158034 call iteratorIndex _iterator[158023]))
                  }
                  ForLoop[158024]
                  {
                    unknown arr[158041] "index var" "insert auto destroy"
                    (158043 'move' arr[158041] _indexOfInterest[158022])
                    {
                      (158019 call(158014 call . arr c"_deinitSlot") slot)
                    }
                    label _continueLabel[158027]
                    _indexOfInterest[158022]
                    _iterator[158023]
                  }
                  label _breakLabel[158028]
                }
              }
              (158073 call =(158066 call .(158065 call(158060 call . table c"table") slot) c"status")(158070 call . chpl__hash_status c"empty"))
            }
            label _continueLabel[158081]
            _indexOfInterest[158076]
            _iterator[158077]
          }
          label _breakLabel[158082]
        }
        (158116 call(158111 call . numEntries c"write") 0)
        (158123 call(158119 call . table c"maybeShrinkAfterRemove"))
        (158127 call unlockTable)
      }
      (158137 'on block' 0 tmp[158132])
    }
  }
  function DefaultAssociativeDom[158900](?).dsiMember[158149](arg _mt[158984]:_MT[238], arg this[158982]:DefaultAssociativeDom[158900](?), arg idx[158146] :
  idxType) : _unknown[51] "method" "primary method"
  {
    (158154 call lockTable)
    Defer
    {
      {
        (158159 call unlockTable)
      }
    }
    unknown tmp[158176] "temp"(158175 call(158170 call . table c"findFullSlot") idx)
    (158183 call _check_tuple_var_decl tmp[158176] 2)
    unknown foundFullSlot[158164](158177 call tmp[158176] 0)
    unknown slotNum[158166](158180 call tmp[158176] 1)
    (158188 'end of statement')
    (158190 return foundFullSlot)
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158900](?).dsiAdd[158199](arg _mt[158988]:_MT[238], arg this[158986]:DefaultAssociativeDom[158900](?), in arg idx[158197]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    const numInds[158208] "const"(158207 call(158204 call _addWrapper idx) 1)
    (158211 'end of statement')
    (158214 return numInds)
  }
  function DefaultAssociativeDom[158900](?)._addWrapper[158224](arg _mt[158992]:_MT[238], arg this[158990]:DefaultAssociativeDom[158900](?), in arg idx[158221] :
  idxType) : _unknown[51] "method" "primary method"
  {
    unknown slotNum[158229](158227 call - 1)
    (158232 'end of statement')
    unknown retVal[158235] 0
    (158238 'end of statement')
    const tmp[158267] "const" "temp"
    (158269 'move' tmp[158267](158265 'deref'(158264 '_wide_get_locale' this)))
    {
      {
        (158242 call lockTable)
        Defer
        {
          {
            (158247 call unlockTable)
          }
        }
        (158261 call =(158255 call _build_tuple slotNum retVal)(158260 call _add idx))
      }
      (158272 'on block' 0 tmp[158267])
    }
    (158280 return(158278 call _build_tuple slotNum retVal))
  }
  function DefaultAssociativeDom[158900](?)._add[158290](arg _mt[158996]:_MT[238], arg this[158994]:DefaultAssociativeDom[158900](?), in arg idx[158287] :
  idxType) : _unknown[51] "method" "primary method"
  {
    unknown foundFullSlot[158293] 0
    (158296 'end of statement')
    unknown slotNum[158301](158299 call - 1)
    (158304 'end of statement')
    (158319 call =(158308 call _build_tuple foundFullSlot slotNum)(158318 call(158313 call . table c"findAvailableSlot") idx))
    if(158405 call _cond_test foundFullSlot)
    {
      (158328 return(158326 call _build_tuple slotNum 0))
    }
    {
      (158341 call(158334 call . table c"fillSlot") slotNum idx none[57])
      (158350 call(158345 call . numEntries c"add") 1)
      {
        unknown _indexOfInterest[158365] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[158366] "expr temp" "temp"
        (158375 'move' _iterator[158366](158373 call _getIterator _arrs))
        Defer
        {
          {
            (158391 call _freeIterator _iterator[158366])
          }
        }
        { scopeless type
          (158380 'move' _indexOfInterest[158365](158377 call iteratorIndex _iterator[158366]))
        }
        ForLoop[158367]
        {
          unknown arr[158384] "index var" "insert auto destroy"
          (158386 'move' arr[158384] _indexOfInterest[158365])
          {
            (158362 call(158357 call . arr c"_defaultInitSlot") slotNum)
          }
          label _continueLabel[158370]
          _indexOfInterest[158365]
          _iterator[158366]
        }
        label _breakLabel[158371]
      }
      (158403 return(158401 call _build_tuple slotNum 1))
    }
  }
  function DefaultAssociativeDom[158900](?).dsiRemove[158417](arg _mt[159000]:_MT[238], arg this[158998]:DefaultAssociativeDom[158900](?), arg idx[158414] :
  idxType) : _unknown[51] "method" "primary method"
  {
    unknown retval[158420] int[13]
    (158423 'end of statement')
    const tmp[158562] "const" "temp"
    (158564 'move' tmp[158562](158560 'deref'(158559 '_wide_get_locale' this)))
    {
      {
        (158428 call lockTable)
        Defer
        {
          {
            (158433 call unlockTable)
          }
        }
        const tmp[158450] "const" "temp"(158449 call(158444 call . table c"findFullSlot") idx)
        (158457 call _check_tuple_var_decl tmp[158450] 2)
        const foundSlot[158438] "const"(158451 call tmp[158450] 0)
        const slotNum[158440] "const"(158454 call tmp[158450] 1)
        (158462 'end of statement')
        if(158548 call _cond_test foundSlot)
        {
          unknown tmpIdx[158465] idxType
          (158468 'end of statement')
          unknown tmpVal[158471] nothing[7]
          (158474 'end of statement')
          (158483 call(158476 call . table c"clearSlot") slotNum tmpIdx tmpVal)
          (158491 call(158486 call . numEntries c"sub") 1)
          {
            unknown _indexOfInterest[158504] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[158505] "expr temp" "temp"
            (158514 'move' _iterator[158505](158512 call _getIterator _arrs))
            Defer
            {
              {
                (158530 call _freeIterator _iterator[158505])
              }
            }
            { scopeless type
              (158519 'move' _indexOfInterest[158504](158516 call iteratorIndex _iterator[158505]))
            }
            ForLoop[158506]
            {
              unknown arr[158523] "index var" "insert auto destroy"
              (158525 'move' arr[158523] _indexOfInterest[158504])
              {
                (158501 call(158496 call . arr c"_deinitSlot") slotNum)
              }
              label _continueLabel[158509]
              _indexOfInterest[158504]
              _iterator[158505]
            }
            label _breakLabel[158510]
          }
          (158539 call = retval 1)
        }
        {
          (158544 call = retval 0)
        }
        (158557 call(158553 call . table c"maybeShrinkAfterRemove"))
      }
      (158567 'on block' 0 tmp[158562])
    }
    (158571 return retval)
  }
  function DefaultAssociativeDom[158900](?).dsiRequestCapacity[158581](arg _mt[159004]:_MT[238], arg this[159002]:DefaultAssociativeDom[158900](?), arg numKeys[158578] :
  int[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[158669] "const" "temp"
    (158671 'move' tmp[158669](158667 'deref'(158666 '_wide_get_locale' this)))
    {
      {
        unknown entries[158590](158589 call(158585 call . numEntries c"read"))
        (158593 'end of statement')
        if(158662 call _cond_test(158597 call < entries numKeys))
        {
          (158601 call lockTable)
          Defer
          {
            {
              (158606 call unlockTable)
            }
          }
          (158617 call(158612 call . table c"requestCapacity") numKeys)
        }
        {
          (158659 call warning "Requested capacity (" numKeys ") " "is less than current size (" entries ")")
        }
      }
      (158674 'on block' 0 tmp[158669])
    }
  }
  function DefaultAssociativeDom[158900](?).dsiSorted[158684](arg _mt[159008]:_MT[238], arg this[159006]:DefaultAssociativeDom[158900](?), arg comparator[158682]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (158687 'use' Sort)
    unknown tableCopy[158725](158721 for  slot  in (158710 call _fullSlots) do
    {
      (158718 call .(158717 call(158712 call . table c"table") slot) c"key")
    } )(158705 call chpl__buildArrayRuntimeType(158703 call chpl__ensureDomainExpr(158699 call #(158691 call chpl_build_low_bounded_range 0)(158698 call(158694 call . numEntries c"read")))) idxType)
    (158728 'end of statement')
    (158734 call sort tableCopy(comparator = comparator))
    {
      unknown _indexOfInterest[158741] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158742] "expr temp" "temp"
      (158751 'move' _iterator[158742](158749 call _getIterator tableCopy))
      Defer
      {
        {
          (158767 call _freeIterator _iterator[158742])
        }
      }
      { scopeless type
        (158756 'move' _indexOfInterest[158741](158753 call iteratorIndex _iterator[158742]))
      }
      ForLoop[158743]
      {
        unknown ind[158760] "index var" "insert auto destroy"
        (158762 'move' ind[158760] _indexOfInterest[158741])
        (158739 yield ind)
        label _continueLabel[158746]
        _indexOfInterest[158741]
        _iterator[158742]
      }
      label _breakLabel[158747]
    }
  }
  function DefaultAssociativeDom[158900](?)._fullSlots[158778](arg _mt[159012]:_MT[238], arg this[159010]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[158805] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158806] "expr temp" "temp"
      (158815 'move' _iterator[158806](158813 call _getIterator(158786 call(158782 call . table c"allSlots"))))
      Defer
      {
        {
          (158832 call _freeIterator _iterator[158806])
        }
      }
      { scopeless type
        (158821 'move' _indexOfInterest[158805](158818 call iteratorIndex _iterator[158806]))
      }
      ForLoop[158807]
      {
        unknown slot[158825] "index var" "insert auto destroy"
        (158827 'move' slot[158825] _indexOfInterest[158805])
        {
          if(158800 call _cond_test(158795 call(158790 call . table c"isSlotFull") slot))
          {
            (158797 yield slot)
          }
        }
        label _continueLabel[158810]
        _indexOfInterest[158805]
        _iterator[158806]
      }
      label _breakLabel[158811]
    }
  }
  function DefaultAssociativeDom[158900](?).dsiHasSingleLocalSubdomain[158844](arg _mt[159016]:_MT[238], arg this[159014]:DefaultAssociativeDom[158900](?)) param : _unknown[51] "method" "primary method"
  {
    (158847 return 1)
  }
  function DefaultAssociativeDom[158900](?).dsiLocalSubdomain[158858](arg _mt[159020]:_MT[238], arg this[159018]:DefaultAssociativeDom[158900](?), arg loc[158855] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(158892 call _cond_test(158865 call ==(158862 call chpl_localeID_to_locale(158861 '_wide_get_locale' this)) loc))
    {
      (158874 return(158873 call _getDomain(158871 call _to_unmanaged this)))
    }
    {
      unknown a[158884](158882 call chpl__buildDomainRuntimeType defaultDist idxType(parSafe = parSafe))
      (158887 'end of statement')
      (158890 return a)
    }
  }
  type DefaultAssociativeDom[158900](?) unknown idxType[156534] "type variable" unknown parSafe[156538] "param" bool[10] unknown dist[156544](156543 'to unmanaged class from unknown' DefaultDist) unknown numEntries[156552](156551 call chpl__processorAtomicType int[13]) unknown tableLock[156562](156559 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) unknown table[156571](156570 call chpl__hashtable idxType nothing[7]) BaseAssociativeDom
  function DefaultAssociativeArr[161464](?).init[159075](arg _mt[161468]:_MT[238], arg this[161466]:DefaultAssociativeArr[161464](?), arg eltType[159073]:_any[178](?), arg idxType[159077]:_any[178](?), param arg parSafeDom[159079]:_any[178](?), arg dom[159088] :
  (159087 'to unmanaged class from unknown'(159086 call DefaultAssociativeDom idxType(parSafe = parSafeDom))), param arg initElts[159091]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (159100 call(159094 call . super c"init")(eltType = eltType))
    (159108 call =(159104 call . this c"idxType") idxType)
    (159118 call =(159114 call . this c"parSafeDom") parSafeDom)
    (159126 call =(159122 call . this c"dom") dom)
    unknown tableSize[159138](159135 call .(159130 call . dom c"table") c"tableSize")
    (159141 'end of statement')
    (159159 call =(159143 call . this c"data")(159158 call(159152 call .(159147 call . dom c"table") c"allocateData") tableSize eltType))
    (159169 call =(159165 call . this c"tmpData") nil[44])
    (159179 call =(159175 call . this c"eltsNeedDeinit") initElts)
    (159187 call(159183 call . this c"complete"))
    if(159326 call _cond_test initElts)
    {
      if(159320 call _cond_test(159196 call isNonNilableClass(159192 call . this c"eltType")))
      {
        unknown msg[159258] "param"(159256 call +(159237 call +(159231 call + "Cannot default initialize associative array because" " element type ")(159235 call _cast string[26] eltType)) " is a non-nilable class")
        (159261 'end of statement')
        (159266 call compilerError msg)
      }
      {
        if(159316 call _cond_test(159275 call !(159274 call isDefaultInitializable(159270 call . this c"eltType"))))
        {
          unknown msg[159306] "param"(159304 call +(159285 call +(159279 call + "Cannot default initialize associative array because" " element type ")(159283 call _cast string[26] eltType)) " cannot be default initialized")
          (159309 'end of statement')
          (159314 call compilerError msg)
        }
      }
    }
    if(159502 call _cond_test initElts)
    {
      unknown initMethod[159336](159335 call init_elts_method tableSize eltType)
      (159339 'end of statement')
      {
        unknown tmp[159477] "expr temp" "maybe param" "maybe type" "temp"
        (159479 'move' tmp[159477] initMethod)
        if(159484 call _cond_test(159481 call == tmp[159477](159344 call . ArrayInit c"noInit")))
        {
        }
        {
          if(159490 call _cond_test(159487 call == tmp[159477](159352 call . ArrayInit c"serialInit")))
          {
            {
              unknown _indexOfInterest[159388] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[159389] "expr temp" "temp"
              (159398 'move' _iterator[159389](159396 call _getIterator(159365 call(159361 call .(159358 call . dom c"table") c"allSlots"))))
              Defer
              {
                {
                  (159415 call _freeIterator _iterator[159389])
                }
              }
              { scopeless type
                (159404 'move' _indexOfInterest[159388](159401 call iteratorIndex _iterator[159389]))
              }
              ForLoop[159390]
              {
                unknown slot[159408] "index var" "insert auto destroy"
                (159410 'move' slot[159408] _indexOfInterest[159388])
                {
                  if(159383 call _cond_test(159374 call(159369 call . dom c"_isSlotFull") slot))
                  {
                    (159380 call _doDefaultInitSlot slot(inAdd = 0))
                  }
                }
                label _continueLabel[159393]
                _indexOfInterest[159388]
                _iterator[159389]
              }
              label _breakLabel[159394]
            }
          }
          {
            if(159497 call _cond_test(159494 call == tmp[159477](159426 call . ArrayInit c"parallelInit")))
            {
              Forall {
                induction variables:
                  
                  unknown slot[159461] "index var" "insert auto destroy"
                iterated expressions:
                  (159439 call(159435 call .(159432 call . dom c"table") c"allSlots"))
                shadow variables:
                other variables
                  forall body
                {
                  if(159455 call _cond_test(159446 call(159441 call . dom c"_isSlotFull") slot))
                  {
                    (159452 call _doDefaultInitSlot slot(inAdd = 0))
                  }
                }
              }
            }
            {
              (159471 call halt "ArrayInit.heuristicInit should have been made concrete")
            }
          }
        }
      }
    }
  }
  function DefaultAssociativeArr[161464](?).deinit[159510](arg _mt[161472]:_MT[238], arg this[161470]:DefaultAssociativeArr[161464](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (159522 call _ddata_free data(159519 call .(159516 call . dom c"table") c"tableSize"))
  }
  function DefaultAssociativeArr[161464](?).dsiGetBaseDom[159529](arg _mt[161476]:_MT[238], arg this[161474]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (159532 return dom)
  }
  function DefaultAssociativeArr[161464](?).dsiAccess[159543](arg _mt[161480]:_MT[238], arg this[161478]:DefaultAssociativeArr[161464](?), arg idx[159540] :
  idxType) ref : _unknown[51] "method" "primary method"
  {
    unknown tmp[159560] "temp"(159559 call(159554 call .(159551 call . dom c"table") c"findFullSlot") idx)
    (159567 call _check_tuple_var_decl tmp[159560] 2)
    unknown found[159545](159561 call tmp[159560] 0)
    unknown slotNum[159547](159564 call tmp[159560] 1)
    (159572 'end of statement')
    if(159605 call _cond_test found)
    {
      (159579 return(159578 call data slotNum))
    }
    {
      (159602 call halt "array index out of bounds: " idx)
    }
  }
  function DefaultAssociativeArr[161464](?).dsiAccess[159617](arg _mt[161484]:_MT[238], arg this[161482]:DefaultAssociativeArr[161464](?), arg idx[159614] :
  idxType) : _unknown[51] "method" "primary method"
  {
    unknown tmp[159638] "temp"(159637 call(159632 call .(159629 call . dom c"table") c"findFullSlot") idx)
    (159645 call _check_tuple_var_decl tmp[159638] 2)
    unknown found[159623](159639 call tmp[159638] 0)
    unknown slotNum[159625](159642 call tmp[159638] 1)
    (159650 'end of statement')
    if(159673 call _cond_test found)
    {
      (159657 return(159656 call data slotNum))
    }
    {
      (159664 call halt "array index out of bounds: " idx)
      (159671 return(159670 call data 0))
    }
  }
  where {
    (159622 call shouldReturnRvalueByValue eltType)
  }
  function DefaultAssociativeArr[161464](?).dsiAccess[159686](arg _mt[161488]:_MT[238], arg this[161486]:DefaultAssociativeArr[161464](?), arg idx[159683] :
  idxType) const ref : _unknown[51] "method" "primary method"
  {
    unknown tmp[159707] "temp"(159706 call(159701 call .(159698 call . dom c"table") c"findFullSlot") idx)
    (159714 call _check_tuple_var_decl tmp[159707] 2)
    unknown found[159692](159708 call tmp[159707] 0)
    unknown slotNum[159694](159711 call tmp[159707] 1)
    (159719 'end of statement')
    if(159742 call _cond_test found)
    {
      (159726 return(159725 call data slotNum))
    }
    {
      (159733 call halt "array index out of bounds: " idx)
      (159740 return(159739 call data 0))
    }
  }
  where {
    (159691 call shouldReturnRvalueByConstRef eltType)
  }
  function DefaultAssociativeArr[161464](?).dsiLocalAccess[159753](arg _mt[161492]:_MT[238], arg this[161490]:DefaultAssociativeArr[161464](?), arg i[159751]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (159759 return(159758 call dsiAccess i))
  }
  function DefaultAssociativeArr[161464](?).dsiLocalAccess[159768](arg _mt[161496]:_MT[238], arg this[161494]:DefaultAssociativeArr[161464](?), arg i[159766]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (159778 return(159777 call dsiAccess i))
  }
  where {
    (159773 call shouldReturnRvalueByValue eltType)
  }
  function DefaultAssociativeArr[161464](?).dsiLocalAccess[159788](arg _mt[161500]:_MT[238], arg this[161498]:DefaultAssociativeArr[161464](?), arg i[159786]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (159798 return(159797 call dsiAccess i))
  }
  where {
    (159793 call shouldReturnRvalueByConstRef eltType)
  }
  function DefaultAssociativeArr[161464](?).these[159806](arg _mt[161504]:_MT[238], arg this[161502]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[159837] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159838] "expr temp" "temp"
      (159847 'move' _iterator[159838](159845 call _getIterator(159817 call(159813 call .(159810 call . dom c"table") c"allSlots"))))
      Defer
      {
        {
          (159864 call _freeIterator _iterator[159838])
        }
      }
      { scopeless type
        (159853 'move' _indexOfInterest[159837](159850 call iteratorIndex _iterator[159838]))
      }
      ForLoop[159839]
      {
        unknown slot[159857] "index var" "insert auto destroy"
        (159859 'move' slot[159857] _indexOfInterest[159837])
        {
          if(159832 call _cond_test(159824 call(159819 call . dom c"_isSlotFull") slot))
          {
            (159829 yield(159828 call data slot))
          }
        }
        label _continueLabel[159842]
        _indexOfInterest[159837]
        _iterator[159838]
      }
      label _breakLabel[159843]
    }
  }
  function DefaultAssociativeArr[161464](?).these[159880](arg _mt[161508]:_MT[238], arg this[161506]:DefaultAssociativeArr[161464](?), param arg tag[159877] :
  iterKind) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(159912 call _cond_test debugDefaultAssoc)
    {
      (159909 call writeln "*** In associative array standalone iterator")
    }
    {
      unknown _indexOfInterest[159948] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159949] "expr temp" "temp"
      (159958 'move' _iterator[159949](159956 call _getIterator(159928 call(159922 call .(159919 call . dom c"table") c"allSlots")(tag = tag))))
      Defer
      {
        {
          (159975 call _freeIterator _iterator[159949])
        }
      }
      { scopeless type
        (159964 'move' _indexOfInterest[159948](159961 call iteratorIndex _iterator[159949]))
      }
      ForLoop[159950]
      {
        unknown slot[159968] "index var" "insert auto destroy"
        (159970 'move' slot[159968] _indexOfInterest[159948])
        {
          if(159943 call _cond_test(159935 call(159930 call . dom c"_isSlotFull") slot))
          {
            (159940 yield(159939 call data slot))
          }
        }
        label _continueLabel[159953]
        _indexOfInterest[159948]
        _iterator[159949]
      }
      label _breakLabel[159954]
    }
  }
  where {
    (159887 call == tag(159884 call . iterKind c"standalone"))
  }
  function DefaultAssociativeArr[161464](?).these[159991](arg _mt[161512]:_MT[238], arg this[161510]:DefaultAssociativeArr[161464](?), param arg tag[159988] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[160011] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160012] "expr temp" "temp"
      (160021 'move' _iterator[160012](160019 call _getIterator(160007 call(160002 call . dom c"these") tag)))
      Defer
      {
        {
          (160038 call _freeIterator _iterator[160012])
        }
      }
      { scopeless type
        (160027 'move' _indexOfInterest[160011](160024 call iteratorIndex _iterator[160012]))
      }
      ForLoop[160013]
      {
        unknown followThis[160031] "index var" "insert auto destroy"
        (160033 'move' followThis[160031] _indexOfInterest[160011])
        (160009 yield followThis)
        label _continueLabel[160016]
        _indexOfInterest[160011]
        _iterator[160012]
      }
      label _breakLabel[160017]
    }
  }
  where {
    (159998 call == tag(159995 call . iterKind c"leader"))
  }
  function DefaultAssociativeArr[161464](?).these[160055](arg _mt[161516]:_MT[238], arg this[161514]:DefaultAssociativeArr[161464](?), param arg tag[160052] :
  iterKind, arg followThis[160057]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[160072] "temp" followThis
    (160079 call _check_tuple_var_decl tmp[160072] 2)
    unknown chunk[160066](160073 call tmp[160072] 0)
    unknown followThisDom[160068](160076 call tmp[160072] 1)
    (160084 'end of statement')
    if(160109 call _cond_test debugDefaultAssoc)
    {
      (160107 call writeln "In array follower code: Following " chunk)
    }
    const sameDom[160121] "const"(160119 call == followThisDom(160116 call . this c"dom"))
    (160124 'end of statement')
    if(160167 call _cond_test(160126 call ! sameDom))
    {
      if(160162 call _cond_test(160139 call !=(160129 call . followThisDom c"dsiNumIndices")(160136 call .(160133 call . this c"dom") c"dsiNumIndices")))
      {
        (160160 call halt "zippered associative array does not match the iterated domain")
      }
    }
    const otherTable[160179] "const"(160176 call .(160173 call . followThisDom c"table") c"table")
    (160182 'end of statement')
    {
      unknown _indexOfInterest[160273] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160274] "expr temp" "temp"
      (160283 'move' _iterator[160274](160281 call _getIterator chunk))
      Defer
      {
        {
          (160299 call _freeIterator _iterator[160274])
        }
      }
      { scopeless type
        (160288 'move' _indexOfInterest[160273](160285 call iteratorIndex _iterator[160274]))
      }
      ForLoop[160275]
      {
        unknown slot[160292] "index var" "insert auto destroy"
        (160294 'move' slot[160292] _indexOfInterest[160273])
        {
          const aSlot[160189] "const" "ref var"(160188 call otherTable slot)
          (160192 'end of statement')
          if(160269 call _cond_test(160199 call(160195 call . aSlot c"isFull")))
          {
            unknown idx[160201] slot
            (160204 'end of statement')
            if(160259 call _cond_test(160207 call ! sameDom))
            {
              const tmp[160227] "const" "temp"(160226 call(160218 call .(160215 call . dom c"table") c"findFullSlot")(160222 call . aSlot c"key"))
              (160234 call _check_tuple_var_decl tmp[160227] 2)
              const match[160209] "const"(160228 call tmp[160227] 0)
              const loc[160211] "const"(160231 call tmp[160227] 1)
              (160239 'end of statement')
              if(160249 call _cond_test(160242 call ! match))
              {
                (160247 call halt "zippered associative array does not match the iterated domain")
              }
              (160256 call = idx loc)
            }
            (160267 yield(160266 call data idx))
          }
        }
        label _continueLabel[160278]
        _indexOfInterest[160273]
        _iterator[160274]
      }
      label _breakLabel[160279]
    }
  }
  where {
    (160064 call == tag(160061 call . iterKind c"follower"))
  }
  function DefaultAssociativeArr[161464](?).dsiSerialReadWrite[160313](arg _mt[161520]:_MT[238], arg this[161518]:DefaultAssociativeArr[161464](?), arg f[160311]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown binary[160321](160320 call(160316 call . f c"binary"))
    (160324 'end of statement')
    unknown arrayStyle[160333](160332 call(160327 call . f c"styleElement") QIO_STYLE_ELEMENT_ARRAY)
    (160336 'end of statement')
    unknown isspace[160346](160344 call &&(160339 call == arrayStyle QIO_ARRAY_FORMAT_SPACE)(160342 call ! binary))
    (160349 'end of statement')
    unknown isjson[160359](160357 call &&(160352 call == arrayStyle QIO_ARRAY_FORMAT_JSON)(160355 call ! binary))
    (160362 'end of statement')
    unknown ischpl[160372](160370 call &&(160365 call == arrayStyle QIO_ARRAY_FORMAT_CHPL)(160368 call ! binary))
    (160375 'end of statement')
    if(160398 call _cond_test(160383 call &&(160380 call !(160377 call . f c"writing")) ischpl))
    {
      (160393 call(160388 call . this c"readChapelStyleAssocArray") f)
      (160396 return _void[55])
    }
    if(160415 call _cond_test(160404 call || isjson ischpl))
    {
      (160412 call <~> f(160407 'new'(160411 call ioLiteral "[")))
    }
    unknown first[160421] 1
    (160424 'end of statement')
    {
      unknown _indexOfInterest[160531] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160532] "expr temp" "temp"
      (160550 'move' _iterator[160532](160436 call _build_tuple(160544 call _getIterator(160541 call . this c"dom"))(160548 call _getIterator this)))
      Defer
      {
        {
          (160580 call _freeIterator _iterator[160532])
        }
      }
      { scopeless type
        (160555 'move' _indexOfInterest[160531](160552 call iteratorIndex _iterator[160532]))
      }
      ForLoop[160533]
      {
        (160560 call _check_tuple_var_decl _indexOfInterest[160531] 2)
        unknown key[160566] "index var" "insert auto destroy"
        (160568 'move' key[160566](160564 call _indexOfInterest[160531] 0))
        unknown val[160573] "index var" "insert auto destroy"
        (160575 'move' val[160573](160571 call _indexOfInterest[160531] 1))
        {
          if(160477 call _cond_test first)
          {
            (160440 call = first 0)
          }
          {
            if(160471 call _cond_test isspace)
            {
              (160450 call <~> f(160445 'new'(160449 call ioLiteral " ")))
            }
            {
              if(160466 call _cond_test(160455 call || isjson ischpl))
              {
                (160463 call <~> f(160458 'new'(160462 call ioLiteral ", ")))
              }
            }
          }
          if(160522 call _cond_test(160489 call &&(160485 call . f c"writing") ischpl))
          {
            (160493 call <~> f key)
            (160519 call <~> f(160498 'new'(160518 call ioLiteral " => ")))
          }
          (160528 call <~> f val)
        }
        label _continueLabel[160536]
        _indexOfInterest[160531]
        _iterator[160532]
      }
      label _breakLabel[160537]
    }
    if(160600 call _cond_test(160589 call || isjson ischpl))
    {
      (160597 call <~> f(160592 'new'(160596 call ioLiteral "]")))
    }
  }
  function DefaultAssociativeArr[161464](?).readChapelStyleAssocArray[160611](arg _mt[161524]:_MT[238], arg this[161522]:DefaultAssociativeArr[161464](?), arg f[160609]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    const openBracket[160618] "const"(160613 'new'(160617 call ioLiteral "["))
    (160621 'end of statement')
    const closedBracket[160628] "const"(160623 'new'(160627 call ioLiteral "]"))
    (160631 'end of statement')
    unknown first[160633] 1
    (160636 'end of statement')
    unknown readEnd[160638] 0
    (160641 'end of statement')
    (160644 call <~> f openBracket)
    {
      unknown tmp[160747] "temp"
      (160765 'move' tmp[160747](160763 call _cond_test 1))
      WhileDo[160752]
      {
        {
          if(160699 call _cond_test first)
          {
            (160651 call = first 0)
            Try
            {
              {
                (160657 call <~> f closedBracket)
                (160663 call = readEnd 1)
                break nil[44]
              }
            }
            Catch err : BadFormatError
            {
              unknown tmp[354586] "temp"(354590 'dynamic_cast'(354588 'to nilable class'(354587 'to unmanaged class' BadFormatError))(354589 'current error'))
              if(354593 '!=' tmp[354586] nil[44])
              {
                unknown err[354599](354604 'new'(354602 call _owned(354600 'to non nilable class' tmp[354586])))
                {
                }
              }
              {
              }
            }
          }
          {
            Try
            {
              {
                (160683 call <~> f(160678 'new'(160682 call ioLiteral ",")))
              }
            }
            Catch err : BadFormatError
            {
              unknown tmp[354607] "temp"(354611 'dynamic_cast'(354609 'to nilable class'(354608 'to unmanaged class' BadFormatError))(354610 'current error'))
              if(354614 '!=' tmp[354607] nil[44])
              {
                unknown err[354620](354625 'new'(354623 call _owned(354621 'to non nilable class' tmp[354607])))
                {
                  break nil[44]
                }
              }
              {
              }
            }
          }
          unknown key[160705] idxType
          (160708 'end of statement')
          (160711 call <~> f key)
          (160736 call <~> f(160715 'new'(160735 call ioLiteral "=>")))
          (160744 call <~> f(160743 call dsiAccess key))
        }
        label _continueLabel[160750]
        (160758 'move' tmp[160747](160756 call _cond_test 1))
        tmp[160747]
      }
      label _breakLabel[160751]
    }
    if(160776 call _cond_test(160769 call ! readEnd))
    {
      (160773 call <~> f closedBracket)
    }
  }
  function DefaultAssociativeArr[161464](?).dsiSerialWrite[160787](arg _mt[161528]:_MT[238], arg this[161526]:DefaultAssociativeArr[161464](?), arg f[160785]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160795 call(160790 call . this c"dsiSerialReadWrite") f)
  }
  function DefaultAssociativeArr[161464](?).dsiSerialRead[160804](arg _mt[161532]:_MT[238], arg this[161530]:DefaultAssociativeArr[161464](?), arg f[160802]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160812 call(160807 call . this c"dsiSerialReadWrite") f)
  }
  function DefaultAssociativeArr[161464](?).dsiSorted[160821](arg _mt[161536]:_MT[238], arg this[161534]:DefaultAssociativeArr[161464](?), arg comparator[160819]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (160824 'use' Sort)
    unknown tableCopy[160859](160855 for  slot  in (160850 call(160846 call . dom c"_fullSlots")) do
    {
      (160854 call data slot)
    } )(160840 call chpl__buildArrayRuntimeType(160838 call chpl__ensureDomainExpr(160834 call #(160828 call chpl_build_low_bounded_range 0)(160831 call . dom c"dsiNumIndices"))) eltType)
    (160862 'end of statement')
    (160868 call sort tableCopy(comparator = comparator))
    {
      unknown _indexOfInterest[160875] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160876] "expr temp" "temp"
      (160885 'move' _iterator[160876](160883 call _getIterator tableCopy))
      Defer
      {
        {
          (160901 call _freeIterator _iterator[160876])
        }
      }
      { scopeless type
        (160890 'move' _indexOfInterest[160875](160887 call iteratorIndex _iterator[160876]))
      }
      ForLoop[160877]
      {
        unknown elem[160894] "index var" "insert auto destroy"
        (160896 'move' elem[160894] _indexOfInterest[160875])
        (160873 yield elem)
        label _continueLabel[160880]
        _indexOfInterest[160875]
        _iterator[160876]
      }
      label _breakLabel[160881]
    }
  }
  function DefaultAssociativeArr[161464](?)._doDefaultInitSlot[160916](arg _mt[161540]:_MT[238], arg this[161538]:DefaultAssociativeArr[161464](?), arg slot[160913] :
  int[13], arg inAdd[160919] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(161036 call _cond_test(160926 call !(160925 call isDefaultInitializable eltType)))
    {
      if(161011 call _cond_test inAdd)
      {
        (160967 call halt(160964 call + "Can't resize domains whose arrays' elements don't " "have default values"))
      }
      {
        (161008 call halt(161005 call + "Can't default initialize associative arrays whose " "elements have no default value"))
      }
    }
    {
      unknown initval[161017] "no auto destroy" eltType
      (161020 'end of statement')
      unknown dst[161026] "ref var"(161025 call data slot)
      (161029 'end of statement')
      (161034 '=' dst initval)
    }
  }
  function DefaultAssociativeArr[161464](?)._defaultInitSlot[161049](arg _mt[161544]:_MT[238], arg this[161542]:DefaultAssociativeArr[161464](?), arg slot[161046] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161056 call _doDefaultInitSlot slot(inAdd = 1))
  }
  function DefaultAssociativeArr[161464](?)._deinitSlot[161067](arg _mt[161548]:_MT[238], arg this[161546]:DefaultAssociativeArr[161464](?), arg slot[161064] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161075 call _deinitElement(161073 call data slot))
  }
  function DefaultAssociativeArr[161464](?)._elementNeedsDeinit[161082](arg _mt[161552]:_MT[238], arg this[161550]:DefaultAssociativeArr[161464](?)) param : _unknown[51] "method" "primary method"
  {
    (161088 return(161087 'needs auto destroy' eltType))
  }
  function DefaultAssociativeArr[161464](?)._deinitElement[161099](arg _mt[161556]:_MT[238], arg this[161554]:DefaultAssociativeArr[161464](?), ref arg elt[161096] :
  eltType) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(161110 call _cond_test(161103 call _elementNeedsDeinit))
    {
      (161107 call chpl__autoDestroy elt)
    }
  }
  function DefaultAssociativeArr[161464](?)._startRehash[161123](arg _mt[161560]:_MT[238], arg this[161558]:DefaultAssociativeArr[161464](?), arg newSize[161120] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161127 call = tmpData data)
    (161143 call = data(161142 call(161136 call .(161133 call . dom c"table") c"allocateData") newSize eltType))
  }
  function DefaultAssociativeArr[161464](?)._finishRehash[161154](arg _mt[161564]:_MT[238], arg this[161562]:DefaultAssociativeArr[161464](?), arg oldSize[161151] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161160 call _ddata_free tmpData oldSize)
    (161165 call = tmpData nil[44])
  }
  function DefaultAssociativeArr[161464](?)._moveElementDuringRehash[161176](arg _mt[161568]:_MT[238], arg this[161566]:DefaultAssociativeArr[161464](?), arg oldslot[161173] :
  int[13], arg newslot[161179] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const src[161186] "const" "ref var"(161185 call tmpData oldslot)
    (161189 'end of statement')
    unknown dst[161195] "ref var"(161194 call data newslot)
    (161198 'end of statement')
    (161203 '=' dst src)
  }
  function DefaultAssociativeArr[161464](?).dsiTargetLocales[161209](arg _mt[161572]:_MT[238], arg this[161570]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method"
  {
    (161218 return(161216 call chpl__buildArrayExpr(161213 call chpl_localeID_to_locale(161212 '_wide_get_locale' this))))
  }
  function DefaultAssociativeArr[161464](?).dsiHasSingleLocalSubdomain[161225](arg _mt[161576]:_MT[238], arg this[161574]:DefaultAssociativeArr[161464](?)) param : _unknown[51] "method" "primary method"
  {
    (161228 return 1)
  }
  function DefaultAssociativeArr[161464](?).dsiLocalSubdomain[161239](arg _mt[161580]:_MT[238], arg this[161578]:DefaultAssociativeArr[161464](?), arg loc[161236] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(161276 call _cond_test(161246 call ==(161243 call chpl_localeID_to_locale(161242 '_wide_get_locale' this)) loc))
    {
      (161252 return(161251 call _getDomain dom))
    }
    {
      unknown a[161268](161266 call chpl__buildDomainRuntimeType defaultDist(161256 call . dom c"idxType")(parSafe =(161261 call . dom c"parSafe")))
      (161271 'end of statement')
      (161274 return a)
    }
  }
  function DefaultAssociativeArr[161464](?).dsiElementInitializationComplete[161285](arg _mt[161584]:_MT[238], arg this[161582]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161292 call =(161288 call . this c"eltsNeedDeinit") 1)
  }
  function DefaultAssociativeArr[161464](?).dsiElementDeinitializationComplete[161300](arg _mt[161588]:_MT[238], arg this[161586]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161307 call =(161303 call . this c"eltsNeedDeinit") 0)
  }
  function DefaultAssociativeArr[161464](?).dsiDestroyArr[161319](arg _mt[161592]:_MT[238], arg this[161590]:DefaultAssociativeArr[161464](?), arg deinitElts[161316] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(161448 call _cond_test(161326 call && deinitElts(161323 call . this c"eltsNeedDeinit")))
    {
      if(161443 call _cond_test(161330 call _elementNeedsDeinit))
      {
        if(161438 call _cond_test(161334 call _deinitElementsIsParallel eltType))
        {
          Forall {
            induction variables:
              
              unknown slot[161367] "index var" "insert auto destroy"
            iterated expressions:
              (161344 call(161340 call .(161337 call . dom c"table") c"allSlots"))
            shadow variables:
            other variables
              forall body
            {
              if(161361 call _cond_test(161351 call(161346 call . dom c"_isSlotFull") slot))
              {
                (161358 call _deinitElement(161356 call data slot))
              }
            }
          }
        }
        {
          {
            unknown _indexOfInterest[161403] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[161404] "expr temp" "temp"
            (161413 'move' _iterator[161404](161411 call _getIterator(161381 call(161377 call .(161374 call . dom c"table") c"allSlots"))))
            Defer
            {
              {
                (161430 call _freeIterator _iterator[161404])
              }
            }
            { scopeless type
              (161419 'move' _indexOfInterest[161403](161416 call iteratorIndex _iterator[161404]))
            }
            ForLoop[161405]
            {
              unknown slot[161423] "index var" "insert auto destroy"
              (161425 'move' slot[161423] _indexOfInterest[161403])
              {
                if(161398 call _cond_test(161388 call(161383 call . dom c"_isSlotFull") slot))
                {
                  (161395 call _deinitElement(161393 call data slot))
                }
              }
              label _continueLabel[161408]
              _indexOfInterest[161403]
              _iterator[161404]
            }
            label _breakLabel[161409]
          }
        }
      }
    }
    (161458 call =(161454 call . this c"eltsNeedDeinit") 0)
  }
  type DefaultAssociativeArr[161464](?) unknown idxType[159026] "type variable" unknown parSafeDom[159030] "param" bool[10] unknown dom[159041](159040 'to unmanaged class from unknown'(159039 call DefaultAssociativeDom idxType(parSafe = parSafeDom))) unknown dataSize[159046] int[13] unknown data[159054](159053 call _ddata eltType) unknown tmpData[159062](159061 call _ddata eltType) unknown eltsNeedDeinit[159067] 1 AbsBaseArr
}