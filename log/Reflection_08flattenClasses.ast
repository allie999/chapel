AST dump for Reflection after pass flattenClasses.
Module use list: ChapelStandard 

{
  function checkQueryT[224887](arg t[224885]:_any[178](?)) type : _unknown[51] "private"
  {
    if(224945 call _cond_test(224892 call isClassType t[224885]))
    {
      (224898 return(224896 call _cast _borrowedNonNilable[214](?) t[224885]))
    }
    {
      if(224939 call _cond_test(224908 call ||(224903 call isRecordType t[224885])(224907 call isUnionType t[224885])))
      {
        (224911 return t[224885])
      }
      {
        (224937 call compilerError(224916 call _cast string[26] t[224885]) " is not a class, record, or union type" 2)
      }
    }
  }
  function numFields[224959](arg t[224957]:_any[178](?)) param : _unknown[51]
  {
    (224969 return(224968 'num fields'(224967 call checkQueryT t[224957])))
  }
  { scopeless type
    int(64)[13]
  }
  function getFieldName[224979](arg t[224977]:_any[178](?), param arg i[224982] :
  int(64)[13]) param : _unknown[51]
  {
    (224997 return(224996 'field num to name'(224991 call checkQueryT t[224977])(224994 call + i[224982] 1)))
  }
  { scopeless type
    string[26]
  }
  function getField[225010](const  ref arg x[225007] :
  unknown t[225005], param arg i[225013] :
  int(64)[13]) param : _unknown[51]
  {
    (225050 return(225049 'field by num' x[225007](225047 call + i[225013] 1)))
  }
  where {
    (225040 call &&(225027 call &&(225018 call >= i[225013] 0)(225025 call < i[225013](225024 call numFields t[225005])))(225039 call isParam(225037 'field by num' x[225007](225035 call + i[225013] 1))))
  }
  function getField[225063](const  ref arg x[225060] :
  unknown t[225058], param arg i[225066] :
  int(64)[13]) type : _unknown[51]
  {
    (225103 return(225102 'field by num' x[225060](225100 call + i[225066] 1)))
  }
  where {
    (225093 call &&(225080 call &&(225071 call >= i[225066] 0)(225078 call < i[225066](225077 call numFields t[225058])))(225092 call isType(225090 'field by num' x[225060](225088 call + i[225066] 1))))
  }
  function getField[225116](const  ref arg x[225113] :
  unknown t[225111], param arg i[225119] :
  int(64)[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    (225130 return(225129 'field by num' x[225113](225127 call + i[225119] 1)))
  }
  function getField[225142](const  ref arg x[225139] :
  unknown t[225137], param arg s[225145] :
  string[26]) param : _unknown[51]
  {
    (225181 return(225180 call getField x[225139](225179 call getFieldIndex t[225137] s[225145])))
  }
  where {
    (225170 call &&(225156 call !=(225152 call getFieldIndex t[225137] s[225145])(225154 call - 1))(225169 call isParam(225167 call getField x[225139](225166 call getFieldIndex t[225137] s[225145]))))
  }
  function getField[225194](const  ref arg x[225191] :
  unknown t[225189], param arg s[225197] :
  string[26]) type : _unknown[51]
  {
    (225233 return(225232 call getField x[225191](225231 call getFieldIndex t[225189] s[225197])))
  }
  where {
    (225222 call &&(225208 call !=(225204 call getFieldIndex t[225189] s[225197])(225206 call - 1))(225221 call isType(225219 call getField x[225191](225218 call getFieldIndex t[225189] s[225197]))))
  }
  function getField[225246](const  ref arg x[225243] :
  unknown t[225241], param arg s[225249] :
  string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown i[225273] "param"(225272 'field name to num' t[225241] s[225249])
    (225276 'end of statement')
    if(225325 call _cond_test(225280 call == i[225273] 0))
    {
      (225323 call compilerError "field " s[225249] " not found in "(225321 call _cast string[26] t[225241]))
    }
    (225335 return(225334 'field by num' x[225243] i[225273]))
  }
  function isImplementedWithRecords[225343](arg t[225341]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (225355 return(225353 call ||(225348 call isRangeType t[225341])(225352 call isStringType t[225341])))
  }
  function numImplementationFields[225364](arg t[225362]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (225375 return(225374 'num fields' t[225362]))
  }
  where {
    (225370 call isImplementedWithRecords t[225362])
  }
  { scopeless type
    int(64)[13]
  }
  function getImplementationField[225389](const  ref arg x[225386] :
  unknown t[225384], param arg i[225392] :
  int(64)[13]) type : _unknown[51] "no doc"
  {
    (225414 return(225413 'field by num' x[225386] i[225392]))
  }
  where {
    (225407 call &&(225398 call isImplementedWithRecords t[225384])(225406 call isType(225404 'field by num' x[225386] i[225392])))
  }
  function getImplementationField[225427](const  ref arg x[225424] :
  unknown t[225422], param arg i[225430] :
  int(64)[13]) param : _unknown[51] "no doc"
  {
    (225452 return(225451 'field by num' x[225424] i[225430]))
  }
  where {
    (225445 call &&(225436 call isImplementedWithRecords t[225422])(225444 call isParam(225442 'field by num' x[225424] i[225430])))
  }
  function getImplementationField[225465](const  ref arg x[225462] :
  unknown t[225460], param arg i[225468] :
  int(64)[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    if(225519 call _cond_test(225475 call !(225474 call isImplementedWithRecords t[225460])))
    {
      (225517 call compilerError "an argument of the type "(225498 call _cast string[26] t[225460]) " is not valid for getImplementationField()")
    }
    (225530 return(225529 'field by num' x[225462] i[225468]))
  }
  function getFieldRef[225541](ref arg x[225538] :
  unknown t[225536], param arg i[225544] :
  int(64)[13]) ref : _unknown[51] "inline" "unsafe"
  {
    (225555 return(225554 'field by num' x[225538](225552 call + i[225544] 1)))
  }
  function getFieldRef[225567](ref arg x[225564] :
  unknown t[225562], param arg s[225570] :
  string[26]) ref : _unknown[51] "unsafe"
  {
    unknown i[225578] "param"(225577 'field name to num' t[225562] s[225570])
    (225581 'end of statement')
    if(225598 call _cond_test(225585 call == i[225578] 0))
    {
      (225596 call compilerError "field " s[225570] " not found in "(225594 call _cast string[26] t[225562]))
    }
    (225608 return(225607 'field by num' x[225564] i[225578]))
  }
  function getFieldIndex[225616](arg t[225614]:_any[178](?), param arg s[225619] :
  string[26]) param : _unknown[51]
  {
    (225634 return(225632 call -(225630 'field name to num'(225628 call checkQueryT t[225614]) s[225619]) 1))
  }
  { scopeless type
    int(64)[13]
  }
  function hasField[225644](arg t[225642]:_any[178](?), param arg s[225647] :
  string[26]) param : _unknown[51]
  {
    (225659 return(225657 call >=(225655 call getFieldIndex t[225642] s[225647]) 0))
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225669](arg t[225667]:_any[178](?), param arg i[225672] :
  int(64)[13]) param : _unknown[51]
  {
    (225707 return(225706 'is bound'(225697 call checkQueryT t[225667])(225705 call getFieldName(225702 call checkQueryT t[225667]) i[225672])))
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225717](arg t[225715]:_any[178](?), param arg s[225720] :
  string[26]) param : _unknown[51]
  {
    (225732 return(225731 'is bound'(225729 call checkQueryT t[225715]) s[225720]))
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225744](param arg fname[225741] :
  string[26]) param : _unknown[51]
  {
    (225767 return(225766 'call and fn resolves' fname[225741]))
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225779](param arg fname[225776] :
  string[26], arg args[225782]:_any[178](?) ...) param : _unknown[51]
  {
    (225792 return(225791 'call and fn resolves' fname[225776](225790 'expand_tuple' args[225782])))
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225802](arg obj[225800]:_any[178](?), param arg fname[225805] :
  string[26]) param : _unknown[51]
  {
    (225830 return(225829 'method call and fn resolves' obj[225800] fname[225805]))
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225840](arg obj[225838]:_any[178](?), param arg fname[225843] :
  string[26], arg args[225847]:_any[178](?) ...) param : _unknown[51]
  {
    (225858 return(225857 'method call and fn resolves' obj[225838] fname[225843](225856 'expand_tuple' args[225847])))
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225868](arg t[225866]:_any[178](?), param arg fname[225871] :
  string[26]) param : _unknown[51]
  {
    (225880 return(225879 'method call and fn resolves' t[225866] fname[225871]))
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225890](arg t[225888]:_any[178](?), param arg fname[225893] :
  string[26], arg args[225897]:_any[178](?) ...) param : _unknown[51]
  {
    (225908 return(225907 'method call and fn resolves' t[225888] fname[225893](225906 'expand_tuple' args[225897])))
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[225916]() param : _unknown[51] "get line number" "no return value for void"
  {
  }
  { scopeless type
    int(64)[13]
  }
  function getFileName[225925]() param : _unknown[51] "get file name" "no return value for void"
  {
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[225934]() param : _unknown[51] "get function name" "no return value for void"
  {
  }
  { scopeless type
    string[26]
  }
  function getModuleName[225943]() param : _unknown[51] "get module name" "no return value for void"
  {
  }
  { scopeless type
    string[26]
  }
  (355299 'used modules list'(353006 'use' ChapelStandard[20264]))
}