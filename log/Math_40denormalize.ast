AST dump for Math after pass denormalize.
Module use list: ChapelStandard HaltWrappers SysCTypes 

{
  function chpl__init_Math[416214](const in arg _ln[2684678]:int(64)[13], in arg _fn[2684680]:int(32)[95]) : void[4] "fast on" "insert line file info" "local fn" "module init" "resolved"
  {
    if chpl__init_Math_p[2657026]
    {
      goto _exit_chpl__init_Math[2657063] _exit_chpl__init_Math[2657063]
    }
    ref refIndentLevel[2657049]:int(32)[95] "temp"
    (2657047 call printModuleInit[20429] c"%*s\n" c"Math" 4 _ln[2684678] _fn[2684680])
    (2657053 'move' refIndentLevel[2657049](2657052 'addr of' moduleInitLevel[20419]))
    (2657056 '+=' refIndentLevel[2657049] 1)
    (2657032 'move' chpl__init_Math_p[2657026] 1)
    {
      (2654709 call chpl__init_HaltWrappers[416205] _ln[2684678] _fn[2684680])
      (2654711 call chpl__init_SysCTypes[416019] _ln[2684678] _fn[2684680])
    }
    (2657059 '-=' refIndentLevel[2657049] 1)
    label _exit_chpl__init_Math[2657063]
    (532659 return _void[55])
  }
  function divceil[1401581](const in arg m[1401583]:int(64)[13], const in arg n[1401585]:int(64)[13], const in arg _ln[2690068]:int(64)[13], in arg _fn[2690070]:int(32)[95]) : int(64)[13] "instantiated generic" "invisible fn" "resolved" "fn synchronization free"
  {
    const-val local__str_literal_71[2579125]:string[26] "temp"
    (2579126 'move' "Attempt to divide by zero" "Attempt to divide by zero")
    val tmp[1401597]:int(64)[13] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    if(2335534 '>=' m[1401583] 0)
    {
      val tmp[1401615]:int(64)[13] "dead after last mention" "expr temp" "if-expr result" "temp"
      if(2335544 '>=' n[1401585] 0)
      {
        const-val call_tmp[2261334]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2261336 'move' call_tmp[2261334](2261338 '-'(2708352 'cast' int(64)[13](2242260 '+' m[1401583] n[1401585])) 1))
        if(2335040 '==' n[1401585] 0)
        {
          (2335046 call halt[154111] "Attempt to divide by zero" _ln[2690068] _fn[2690070])
        }
        const-val call_tmp[2335049]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2335051 'move' call_tmp[2335049](2335053 '/' call_tmp[2261334] n[1401585]))
        (1401657 'move' tmp[1401615] call_tmp[2335049])
      }
      {
        if(2335063 '==' n[1401585] 0)
        {
          (2335069 call halt[154111] "Attempt to divide by zero" _ln[2690068] _fn[2690070])
        }
        const-val call_tmp[2335072]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2335074 'move' call_tmp[2335072](2335076 '/' m[1401583] n[1401585]))
        (1401671 'move' tmp[1401615] call_tmp[2335072])
      }
      (1401677 'move' tmp[1401597] tmp[1401615])
    }
    {
      val tmp[1401683]:int(64)[13] "dead after last mention" "expr temp" "if-expr result" "temp"
      if(2335554 '>=' n[1401585] 0)
      {
        if(2335086 '==' n[1401585] 0)
        {
          (2335092 call halt[154111] "Attempt to divide by zero" _ln[2690068] _fn[2690070])
        }
        const-val call_tmp[2335095]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2335097 'move' call_tmp[2335095](2335099 '/' m[1401583] n[1401585]))
        (1401709 'move' tmp[1401683] call_tmp[2335095])
      }
      {
        const-val call_tmp[2236250]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2236252 'move' call_tmp[2236250](2236254 '+'(2708350 'cast' int(64)[13](2242270 '+' m[1401583] n[1401585])) 1))
        if(2335109 '==' n[1401585] 0)
        {
          (2335115 call halt[154111] "Attempt to divide by zero" _ln[2690068] _fn[2690070])
        }
        const-val call_tmp[2335118]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2335120 'move' call_tmp[2335118](2335122 '/' call_tmp[2236250] n[1401585]))
        (1401739 'move' tmp[1401683] call_tmp[2335118])
      }
      (1401745 'move' tmp[1401597] tmp[1401683])
    }
    (1401755 return tmp[1401597])
  }
}