AST dump for NPBRandom after pass scopeResolve.
Module use list: ChapelStandard RandomSupport ChapelLocks HaltWrappers DSIUtil 

{ function NPBRandomStream[315410](?).init[314455](arg _mt[315414]:_MT[238], arg this[315412]:NPBRandomStream[315410](?), arg eltType[314452]:_any[178](?) =(314451 call real(64)[16] 64), arg seed[314465] :(314460 call int(64)[13] 64) =(314462 call . SeedGenerator[307561] c"oddCurrentTime"), param arg parSafe[314471] : bool[10] = 1) : _unknown[51] "method" "primary method" "no return value for void"
  {(314484 call =(314480 call . this[315412] c"eltType") eltType[314452]) unknown one[314492] 1(314490 call uint(64)[115] 64)(314495 'end of statement') unknown two_46[314504](314502 call << one[314492] 46)(314499 call uint(64)[115] 64)(314507 'end of statement') unknown two_46_mask[314516](314514 call - two_46[314504] 1)(314511 call uint(64)[115] 64)(314519 'end of statement') unknown useed[314527](314525 call _cast(314524 call uint(64)[115] 64) seed[314465])(314530 'end of statement') unknown mod[314535](314534 call uint(64)[115] 64)(314538 'end of statement')
    if(314572 call _cond_test(314544 call ==(314541 call % useed[314527] 2) 0))
    {(314570 call initHalt module=[255] HaltWrappers[210018] "NPBRandomStream seed must be an odd integer")(365185 'referenced modules list' HaltWrappers[210018])
    }(314582 call = mod[314535](314580 call & useed[314527] two_46_mask[314516]))(314596 call =(314586 call . this[315412] c"seed")(314594 call _cast(314593 call int(64)[13] 64) mod[314535]))(314604 call =(314600 call . this[315412] c"parSafe") parSafe[314471])(314612 call(314608 call . this[315412] c"complete"))
    if(314672 call _cond_test(314646 call ||(314631 call ||(314622 call ==(314619 call %(314615 call . this[315412] c"seed") 2) 0)(314629 call <(314625 call . this[315412] c"seed") 1))(314644 call >(314634 call . this[315412] c"seed")(314642 call _cast(314641 call int(64)[13] 64) two_46[314504]))))
    {(314670 call initHalt module=[255] HaltWrappers[210018] "NPBRandomStream seed must be an odd integer between 0 and 2**46")(365197 'referenced modules list' HaltWrappers[210018])
    }(314679 call =(408479 call . this[315412] c"NPBRandomStreamPrivate_cursor") seed[314465])(314684 call =(408487 call . this[315412] c"NPBRandomStreamPrivate_count") 1)
    if(314726 call _cond_test(314701 call ||(314695 call ||(314689 call == eltType[314452] real(64)[16])(314693 call == eltType[314452] imag(64)[130]))(314699 call == eltType[314452] complex(128)[140])))
    {
    }
    {(314723 call compilerError "NPBRandomStream only supports eltType=real(64), imag(64), or complex(128)")
    }(355593 'used modules list'(314476 'use' HaltWrappers[210018]))
  } function NPBRandomStream[315410](?).NPBRandomStreamPrivate_getNext_noLock[314734](arg _mt[315418]:_MT[238], arg this[315416]:NPBRandomStream[315410](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(314752 call _cond_test(314738 call ==(408495 call . this[315416] c"eltType") complex(128)[140]))
    {(314742 call +=(408500 call . this[315416] c"NPBRandomStreamPrivate_count") 2)
    }
    {(314748 call +=(408505 call . this[315416] c"NPBRandomStreamPrivate_count") 1)
    }(314762 return(314761 call randlc(408510 call . this[315416] c"eltType")(408515 call . this[315416] c"NPBRandomStreamPrivate_cursor")))
  } function NPBRandomStream[315410](?).NPBRandomStreamPrivate_skipToNth_noLock[314772](arg _mt[315422]:_MT[238], arg this[315420]:NPBRandomStream[315410](?), in arg n[314769] : integral[199](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(314776 call += n[314769] 1)
    if(314795 call _cond_test(314782 call ==(408522 call . this[315420] c"eltType") complex(128)[140]))
    {(314792 call = n[314769](314790 call -(314787 call * n[314769] 2) 1))
    }(314802 call =(408529 call . this[315420] c"NPBRandomStreamPrivate_count") n[314769])(314811 call =(408535 call . this[315420] c"NPBRandomStreamPrivate_cursor")(314810 call randlc_skipto(408540 call . this[315420] c"seed") n[314769]))
  } function NPBRandomStream[315410](?).getNext[314818](arg _mt[315426]:_MT[238], arg this[315424]:NPBRandomStream[315410](?)) : _unknown[51] "method" "primary method"
  {(314823 call(408550 call . this[315424] c"_lock")) const result[314829] "const"(314828 call(408556 call . this[315424] c"NPBRandomStreamPrivate_getNext_noLock"))(314832 'end of statement')(314835 call(408560 call . this[315424] c"_unlock"))(314838 return result[314829])
  }
  { scopeless type(408546 call . this[315424] c"eltType")
  } function NPBRandomStream[315410](?).skipToNth[314849](arg _mt[315430]:_MT[238], arg this[315428]:NPBRandomStream[315410](?), arg n[314846] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    if(314886 call _cond_test(314853 call < n[314846] 0))
    {(314884 'throw'(314857 'new'(_chpl_manager = _owned[30](?))(314883 call IllegalArgumentError[388821](?)(314880 call + "NPBRandomStream.skipToNth(n) called with negative 'n' value "(314878 call _cast string[26] n[314846])))))
    }(314894 call(408569 call . this[315428] c"_lock"))(314899 call(408575 call . this[315428] c"NPBRandomStreamPrivate_skipToNth_noLock") n[314846])(314903 call(408580 call . this[315428] c"_unlock"))
  } function NPBRandomStream[315410](?).getNth[314913](arg _mt[315434]:_MT[238], arg this[315432]:NPBRandomStream[315410](?), arg n[314910] : integral[199](?)) : _unknown[51] throws "method" "primary method"
  {
    if(314951 call _cond_test(314918 call < n[314910] 0))
    {(314949 'throw'(314922 'new'(_chpl_manager = _owned[30](?))(314948 call IllegalArgumentError[388821](?)(314945 call + "NPBRandomStream.getNth(n) called with negative 'n' value "(314943 call _cast string[26] n[314910])))))
    }(314959 call(408593 call . this[315432] c"_lock"))(314964 call(408597 call . this[315432] c"NPBRandomStreamPrivate_skipToNth_noLock") n[314910]) const result[314969] "const"(314968 call(408602 call . this[315432] c"NPBRandomStreamPrivate_getNext_noLock"))(314972 'end of statement')(314975 call(408606 call . this[315432] c"_unlock"))(314978 return result[314969])
  }
  { scopeless type(408586 call . this[315432] c"eltType")
  } function NPBRandomStream[315410](?).fillRandom[314992](arg _mt[315438]:_MT[238], arg this[315436]:NPBRandomStream[315410](?), arg arr[314989] :(314986 call chpl__buildArrayRuntimeType nil[44](408612 call . this[315436] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    Forall {
      induction variables:
        unknown x[315019] "index var" "insert auto destroy"
        unknown r[315021] "index var" "insert auto destroy"
      iterated expressions:
        arr[314989]
        (315011 call(408617 call . this[315436] c"iterate")(315003 call . arr[314989] c"_dom")(315008 call . arr[314989] c"eltType"))
      shadow variables:
      other variables
        forall body
      {(315015 call = x[315019] r[315021])
      }
    }
  } function NPBRandomStream[315410](?).fillRandom[315036](arg _mt[315442]:_MT[238], arg this[315440]:NPBRandomStream[315410](?), arg arr[315033] :(315030 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(315066 call compilerError "NPBRandomStream(eltType="(315059 call _cast string[26](408624 call . this[315440] c"eltType")) ") can only be used to fill arrays of "(315064 call _cast string[26](408629 call . this[315440] c"eltType")))
  } function NPBRandomStream[315410](?).choice[315079](arg _mt[315446]:_MT[238], arg this[315444]:NPBRandomStream[315410](?), arg x[315076] :(315073 call chpl__buildArrayRuntimeType nil[44]), arg size[315084] : unknown sizeType[315081] = none[57], arg replace[315089] = 1, arg prob[315095] : unknown probType[315092] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315118 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315410](?).choice[315133](arg _mt[315450]:_MT[238], arg this[315448]:NPBRandomStream[315410](?), arg x[315130] :(315129 call range[64319](?)(stridable = ?[260])), arg size[315138] : unknown sizeType[315135] = none[57], arg replace[315143] = 1, arg prob[315149] : unknown probType[315146] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315156 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315410](?).choice[315167](arg _mt[315454]:_MT[238], arg this[315452]:NPBRandomStream[315410](?), arg x[315164] : _domain[125908](?), arg size[315172] : unknown sizeType[315169] = none[57], arg replace[315177] = 1, arg prob[315183] : unknown probType[315180] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315190 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315410](?).iterate[315201](arg _mt[315458]:_MT[238], arg this[315456]:NPBRandomStream[315410](?), arg D[315198] : _domain[125908](?), arg resultType[315204]:_any[178](?) = real(64)[16]) : _unknown[51] "method" "primary method" "fn returns iterator"
  {(315209 call(408636 call . this[315456] c"_lock")) const start[315213] "const"(408641 call . this[315456] c"NPBRandomStreamPrivate_count")(315216 'end of statement')(315231 call +=(408646 call . this[315456] c"NPBRandomStreamPrivate_count")(315230 call(315222 call .(315219 call . D[315198] c"size") c"safeCast")(315228 call int(64)[13] 64)))(315240 call(408650 call . this[315456] c"NPBRandomStreamPrivate_skipToNth_noLock")(315237 call -(408655 call . this[315456] c"NPBRandomStreamPrivate_count") 1))(315244 call(408659 call . this[315456] c"_unlock"))(315253 return(315252 call NPBRandomPrivate_iterate resultType[315204] D[315198](408666 call . this[315456] c"seed") start[315213]))
  } function NPBRandomStream[315410](?).iterate[315263](arg _mt[315462]:_MT[238], arg this[315460]:NPBRandomStream[315410](?), arg D[315260] : _domain[125908](?), arg resultType[315266]:_any[178](?) = real(64)[16], param arg tag[315269]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  { const start[315279] "const"(408674 call . this[315460] c"NPBRandomStreamPrivate_count")(315282 'end of statement')(315292 return(315291 call NPBRandomPrivate_iterate resultType[315266] D[315260](408681 call . this[315460] c"seed") start[315279] tag[315269]))
  }
  {(315276 call == tag[315269] leader[447])
  } function NPBRandomStream[315410](?).writeThis[315301](arg _mt[315466]:_MT[238], arg this[315464]:NPBRandomStream[315410](?), arg f[315299]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides" "no return value for void"
  {(315305 call <~> f[315299] "NPBRandomStream(eltType=")(315314 call <~> f[315299](315312 call _cast string[26](408690 call . this[315464] c"eltType")))(315319 call <~> f[315299] ", parSafe=")(315324 call <~> f[315299](408697 call . this[315464] c"parSafe"))(315329 call <~> f[315299] ", seed=")(315334 call <~> f[315299](408704 call . this[315464] c"seed"))(315339 call <~> f[315299] ")")
  } function NPBRandomStream[315410](?)._lock[315356](arg _mt[315470]:_MT[238], arg this[315468]:NPBRandomStream[315410](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(315366 call _cond_test(408712 call . this[315468] c"parSafe"))
    {(315364 call(315360 call .(365208 call . this[315468] c"_l") c"lock"))
    }
  } function NPBRandomStream[315410](?)._unlock[315376](arg _mt[315474]:_MT[238], arg this[315472]:NPBRandomStream[315410](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(315386 call _cond_test(408717 call . this[315472] c"parSafe"))
    {(315384 call(315380 call .(365213 call . this[315472] c"_l") c"unlock"))
    }
  } type NPBRandomStream[315410](?) val super[355821]:object[22] "super class" unknown eltType[314429] "type variable"(314428 call real(64)[16] 64) const seed[314436] "const"(314435 call int(64)[13] 64) unknown parSafe[314442] "param" 1 bool[10] unknown _l[315350] "no doc"(315347 IfExpr  parSafe[314442] then
  { scopeless chpl_LocalSpinlock[187432]
  } else
  { scopeless nothing[7]
  } ) unknown NPBRandomStreamPrivate_cursor[315396] "no doc" seed[314436] real(64)[16] unknown NPBRandomStreamPrivate_count[315405] "no doc" 1(315403 call int(64)[13] 64) type NPBRandomStream[406919](?) const r23[315483] "const" "private"(315481 call ** 0.5 23) const t23[315490] "const" "private"(315488 call ** 2.0 23) const r46[315497] "const" "private"(315495 call ** 0.5 46) const t46[315504] "const" "private"(315502 call ** 2.0 46) const arand[315510] "const" "private" 1.2207e+09(315513 'end of statement') function randlc[315520](inout arg x[315517] : real(64)[16], arg a[315524] : real(64)[16] = arand[315510]) : _unknown[51] "private"
  { unknown t1[315532](315530 call * r23[315483] a[315524])(315535 'end of statement') const a1[315541] "const"(315540 call floor t1[315532]) const a2[315551] "const"(315549 call - a[315524](315547 call * t23[315490] a1[315541]))(315554 'end of statement')(315560 call = t1[315532](315558 call * r23[315483] x[315517])) const x1[315567] "const"(315566 call floor t1[315532]) const x2[315577] "const"(315575 call - x[315517](315573 call * t23[315490] x1[315567]))(315580 'end of statement')(315592 call = t1[315532](315590 call +(315584 call * a1[315541] x2[315577])(315588 call * a2[315551] x1[315567]))) const t2[315602] "const"(315601 call floor(315598 call * r23[315483] t1[315532])) const z[315612] "const"(315610 call - t1[315532](315608 call * t23[315490] t2[315602])) const t3[315625] "const"(315623 call +(315617 call * t23[315490] z[315612])(315621 call * a2[315551] x2[315577])) const t4[315635] "const"(315634 call floor(315631 call * r46[315497] t3[315625])) const x3[315645] "const"(315643 call - t3[315625](315641 call * t46[315504] t4[315635]))(315648 'end of statement')(315651 call = x[315517] x3[315645])(315658 return(315656 call * r46[315497] x3[315645]))
  } function randlc[315666](arg resultType[315664]:_any[178](?), inout arg x[315669] : real(64)[16]) : _unknown[51] "private"
  {
    if(315717 call _cond_test(315674 call == resultType[315664] complex(128)[140]))
    {(315690 return(315688 call _cast complex(128)[140](315685 call _build_tuple(315679 call randlc x[315669])(315683 call randlc x[315669]))))
    }
    {
      if(315711 call _cond_test(315694 call == resultType[315664] imag(64)[130]))
      {(315703 return(315702 call _r2i(315700 call randlc x[315669])))
      }
      {(315709 return(315708 call randlc x[315669]))
      }
    }
  } function randlc_skipto[315735](arg seed[315732] :(315731 call int(64)[13] 64), in arg n[315738] : integral[199](?)) : _unknown[51] "private"
  { unknown cursor[315746](315744 call _cast real(64)[16] seed[315732])(315749 'end of statement')(315753 call -= n[315738] 1) unknown t[315757] arand[315510](315760 'end of statement') arand[315510]
    { unknown tmp[315823] "temp"(315847 'move' tmp[315823](315842 call _cond_test(315844 call != n[315738] 0)))
      WhileDo[315828]
      {
        { const i[315771] "const"(315769 call / n[315738] 2)(315774 'end of statement')
          if(315789 call _cond_test(315781 call !=(315778 call * 2 i[315771]) n[315738]))
          {(315787 call randlc cursor[315746] t[315757])
          }
          if(315806 call _cond_test(315796 call == i[315771] 0))
          {
            break _breakLabel[315827] _breakLabel[315827]
          }
          {(315803 call = n[315738] i[315771])
          }(315816 call randlc t[315757] t[315757])(315820 call = n[315738] i[315771])
        } label _continueLabel[315826](315837 'move' tmp[315823](315832 call _cond_test(315834 call != n[315738] 0))) tmp[315823]
      } label _breakLabel[315827]
    }(315851 return cursor[315746])
  }
  { scopeless type real(64)[16]
  } function outer[315860](arg ranges[315858]:_any[178](?), param arg dim[315864] : int(64)[13] = 0) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(316032 call _cond_test(315876 call ==(315870 call + dim[315864] 2)(315873 call . ranges[315858] c"size")))
    {
      { unknown _indexOfInterest[315888] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315889] "expr temp" "temp"(315898 'move' _iterator[315889](315896 call _getIterator(315882 call ranges[315858] dim[315864])))
        Defer
        {
          {(315915 call _freeIterator _iterator[315889])
          }
        }
        { scopeless type(315904 'move' _indexOfInterest[315888](315901 call iteratorIndex _iterator[315889]))
        }
        ForLoop[315890]
        { unknown i[315908] "index var" "insert auto destroy"(315910 'move' i[315908] _indexOfInterest[315888])(315886 yield(315884 call _build_tuple i[315908])) label _continueLabel[315893] _indexOfInterest[315888] _iterator[315889]
        } label _breakLabel[315894]
      }
    }
    {
      if(316028 call _cond_test(315931 call <(315925 call + dim[315864] 2)(315928 call . ranges[315858] c"size")))
      {
        { unknown _indexOfInterest[315989] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315990] "expr temp" "temp"(315999 'move' _iterator[315990](315997 call _getIterator(315937 call ranges[315858] dim[315864])))
          Defer
          {
            {(316016 call _freeIterator _iterator[315990])
            }
          }
          { scopeless type(316005 'move' _indexOfInterest[315989](316002 call iteratorIndex _iterator[315990]))
          }
          ForLoop[315991]
          { unknown i[316009] "index var" "insert auto destroy"(316011 'move' i[316009] _indexOfInterest[315989])
            { unknown _indexOfInterest[315955] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315956] "expr temp" "temp"(315965 'move' _iterator[315956](315963 call _getIterator(315946 call outer ranges[315858](315944 call + dim[315864] 1))))
              Defer
              {
                {(315982 call _freeIterator _iterator[315956])
                }
              }
              { scopeless type(315971 'move' _indexOfInterest[315955](315968 call iteratorIndex _iterator[315956]))
              }
              ForLoop[315957]
              { unknown j[315975] "index var" "insert auto destroy"(315977 'move' j[315975] _indexOfInterest[315955])(315953 yield(315951 call _build_tuple i[316009](315949 'expand_tuple' j[315975]))) label _continueLabel[315960] _indexOfInterest[315955] _iterator[315956]
              } label _breakLabel[315961]
            } label _continueLabel[315994] _indexOfInterest[315989] _iterator[315990]
          } label _breakLabel[315995]
        }
      }
      {(316025 yield 0)
      }
    }
  } function NPBRandomPrivate_iterate[316044](arg resultType[316042]:_any[178](?), arg D[316047] : _domain[125908](?), arg seed[316054] :(316053 call int(64)[13] 64), arg start[316061] :(316060 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown cursor[316069](316068 call randlc_skipto seed[316054] start[316061])(316072 'end of statement')
    { unknown _indexOfInterest[316083] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316084] "expr temp" "temp"(316093 'move' _iterator[316084](316091 call _getIterator D[316047]))
      Defer
      {
        {(316109 call _freeIterator _iterator[316084])
        }
      }
      { scopeless type(316098 'move' _indexOfInterest[316083](316095 call iteratorIndex _iterator[316084]))
      }
      ForLoop[316085]
      { unknown i[316102] "index var" "insert auto destroy"(316104 'move' i[316102] _indexOfInterest[316083])(316081 yield(316080 call randlc resultType[316042] cursor[316069])) label _continueLabel[316088] _indexOfInterest[316083] _iterator[316084]
      } label _breakLabel[316089]
    }
  } function NPBRandomPrivate_iterate[316122](arg resultType[316120]:_any[178](?), arg D[316125] : _domain[125908](?), arg seed[316132] :(316131 call int(64)[13] 64), arg start[316139] :(316138 call int(64)[13] 64), param arg tag[316143] : iterKind[453]) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    { unknown _indexOfInterest[316168] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316169] "expr temp" "temp"(316178 'move' _iterator[316169](316176 call _getIterator(316164 call(316155 call . D[316125] c"these")(tag = leader[447]))))
      Defer
      {
        {(316195 call _freeIterator _iterator[316169])
        }
      }
      { scopeless type(316184 'move' _indexOfInterest[316168](316181 call iteratorIndex _iterator[316169]))
      }
      ForLoop[316170]
      { unknown block[316188] "index var" "insert auto destroy"(316190 'move' block[316188] _indexOfInterest[316168])(316166 yield block[316188]) label _continueLabel[316173] _indexOfInterest[316168] _iterator[316169]
      } label _breakLabel[316174]
    }
  }
  {(316151 call == tag[316143] leader[447])
  } function NPBRandomPrivate_iterate[316210](arg resultType[316208]:_any[178](?), arg D[316213] : _domain[125908](?), arg seed[316220] :(316219 call int(64)[13] 64), arg start[316227] :(316226 call int(64)[13] 64), param arg tag[316231] : iterKind[453], arg followThis[316234]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown multiplier[316256] "param"(316253 IfExpr (316249 call == resultType[316208] complex(128)[140]) then
    { scopeless 2
    } else
    { scopeless 1
    } )(316259 'end of statement') const ZD[316264] "const"(316263 call computeZeroBasedDomain D[316213])(316267 'end of statement') const innerRange[316278] "const"(316277 call followThis[316234](316274 call -(316270 call . ZD[316264] c"rank") 1))(316281 'end of statement') unknown cursor[316283] real(64)[16](316286 'end of statement')
    { unknown _indexOfInterest[316515] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316516] "expr temp" "temp"(316525 'move' _iterator[316516](316523 call _getIterator(316291 call outer followThis[316234])))
      Defer
      {
        {(316542 call _freeIterator _iterator[316516])
        }
      }
      { scopeless type(316531 'move' _indexOfInterest[316515](316528 call iteratorIndex _iterator[316516]))
      }
      ForLoop[316517]
      { unknown outer[316535] "index var" "insert auto destroy"(316537 'move' outer[316535] _indexOfInterest[316515])
        { unknown myStart[316293] start[316227](316296 'end of statement')
          if(316362 call _cond_test(316303 call >(316299 call . ZD[316264] c"rank") 1))
          {(316333 call += myStart[316293](316331 call * multiplier[316256](316330 call(316322 call .(316321 call(316308 call . ZD[316264] c"indexOrder")(316318 call _build_tuple(316312 'expand_tuple' outer[316535])(316314 call . innerRange[316278] c"low"))) c"safeCast")(316328 call int(64)[13] 64))))
          }
          {(316359 call += myStart[316293](316357 call * multiplier[316256](316356 call(316348 call .(316347 call(316339 call . ZD[316264] c"indexOrder")(316343 call . innerRange[316278] c"low")) c"safeCast")(316354 call int(64)[13] 64))))
          }
          if(316511 call _cond_test(316372 call !(316369 call . innerRange[316278] c"stridable")))
          {(316380 call = cursor[316283](316379 call randlc_skipto seed[316220] myStart[316293]))
            { unknown _indexOfInterest[316393] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316394] "expr temp" "temp"(316403 'move' _iterator[316394](316401 call _getIterator innerRange[316278]))
              Defer
              {
                {(316419 call _freeIterator _iterator[316394])
                }
              }
              { scopeless type(316408 'move' _indexOfInterest[316393](316405 call iteratorIndex _iterator[316394]))
              }
              ForLoop[316395]
              { unknown i[316412] "index var" "insert auto destroy"(316414 'move' i[316412] _indexOfInterest[316393])(316391 yield(316390 call randlc resultType[316208] cursor[316283])) label _continueLabel[316398] _indexOfInterest[316393] _iterator[316394]
              } label _breakLabel[316399]
            }
          }
          {(316440 call -= myStart[316293](316439 call(316431 call .(316428 call . innerRange[316278] c"low") c"safeCast")(316437 call int(64)[13] 64)))
            { unknown _indexOfInterest[316478] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316479] "expr temp" "temp"(316488 'move' _iterator[316479](316486 call _getIterator innerRange[316278]))
              Defer
              {
                {(316504 call _freeIterator _iterator[316479])
                }
              }
              { scopeless type(316493 'move' _indexOfInterest[316478](316490 call iteratorIndex _iterator[316479]))
              }
              ForLoop[316480]
              { unknown i[316497] "index var" "insert auto destroy"(316499 'move' i[316497] _indexOfInterest[316478])
                {(316467 call = cursor[316283](316466 call randlc_skipto seed[316220](316464 call + myStart[316293](316462 call *(316460 call(316452 call . i[316497] c"safeCast")(316458 call int(64)[13] 64)) multiplier[316256]))))(316476 yield(316475 call randlc resultType[316208] cursor[316283]))
                } label _continueLabel[316483] _indexOfInterest[316478] _iterator[316479]
              } label _breakLabel[316484]
            }
          }
        } label _continueLabel[316520] _indexOfInterest[316515] _iterator[316516]
      } label _breakLabel[316521]
    }(355595 'used modules list'(316244 'use' DSIUtil[230909]))
  }
  {(316241 call == tag[316231] follower[449])
  }(355589 'used modules list'(353112 'use' ChapelStandard[20267])(314418 'use' RandomSupport[307465])(314422 'use' ChapelLocks[187302]))
}