AST dump for NPBRandom after pass scopeResolve.
Module use list: ChapelStandard RandomSupport ChapelLocks HaltWrappers DSIUtil 

{ function NPBRandomStream[315291](?).init[314337](arg _mt[315295]:_MT[238], arg this[315293]:NPBRandomStream[315291](?), arg eltType[314334]:_any[178](?) =(314333 call real(64)[16] 64), arg seed[314347] :(314342 call int(64)[13] 64) =(314344 call . SeedGenerator[307444] c"oddCurrentTime"), param arg parSafe[314353] : bool[10] = 1) : _unknown[51] "method" "primary method" "no return value for void"
  {(314366 call =(314362 call . this[315293] c"eltType") eltType[314334]) unknown one[314374] 1(314372 call uint(64)[115] 64)(314377 'end of statement') unknown two_46[314386](314384 call << one[314374] 46)(314381 call uint(64)[115] 64)(314389 'end of statement') unknown two_46_mask[314398](314396 call - two_46[314386] 1)(314393 call uint(64)[115] 64)(314401 'end of statement') unknown useed[314409](314407 call _cast(314406 call uint(64)[115] 64) seed[314347])(314412 'end of statement') unknown mod[314417](314416 call uint(64)[115] 64)(314420 'end of statement')
    if(314454 call _cond_test(314426 call ==(314423 call % useed[314409] 2) 0))
    {(314452 call initHalt module=[255] HaltWrappers[209910] "NPBRandomStream seed must be an odd integer")(365054 'referenced modules list' HaltWrappers[209910])
    }(314464 call = mod[314417](314462 call & useed[314409] two_46_mask[314398]))(314478 call =(314468 call . this[315293] c"seed")(314476 call _cast(314475 call int(64)[13] 64) mod[314417]))(314486 call =(314482 call . this[315293] c"parSafe") parSafe[314353])(314494 call(314490 call . this[315293] c"complete"))
    if(314554 call _cond_test(314528 call ||(314513 call ||(314504 call ==(314501 call %(314497 call . this[315293] c"seed") 2) 0)(314511 call <(314507 call . this[315293] c"seed") 1))(314526 call >(314516 call . this[315293] c"seed")(314524 call _cast(314523 call int(64)[13] 64) two_46[314386]))))
    {(314552 call initHalt module=[255] HaltWrappers[209910] "NPBRandomStream seed must be an odd integer between 0 and 2**46")(365066 'referenced modules list' HaltWrappers[209910])
    }(314561 call =(408347 call . this[315293] c"NPBRandomStreamPrivate_cursor") seed[314347])(314566 call =(408355 call . this[315293] c"NPBRandomStreamPrivate_count") 1)
    if(314608 call _cond_test(314583 call ||(314577 call ||(314571 call == eltType[314334] real(64)[16])(314575 call == eltType[314334] imag(64)[130]))(314581 call == eltType[314334] complex(128)[140])))
    {
    }
    {(314605 call compilerError "NPBRandomStream only supports eltType=real(64), imag(64), or complex(128)")
    }(355462 'used modules list'(314358 'use' HaltWrappers[209910]))
  } function NPBRandomStream[315291](?).NPBRandomStreamPrivate_getNext_noLock[314616](arg _mt[315299]:_MT[238], arg this[315297]:NPBRandomStream[315291](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(314634 call _cond_test(314620 call ==(408363 call . this[315297] c"eltType") complex(128)[140]))
    {(314624 call +=(408368 call . this[315297] c"NPBRandomStreamPrivate_count") 2)
    }
    {(314630 call +=(408373 call . this[315297] c"NPBRandomStreamPrivate_count") 1)
    }(314644 return(314643 call randlc(408378 call . this[315297] c"eltType")(408383 call . this[315297] c"NPBRandomStreamPrivate_cursor")))
  } function NPBRandomStream[315291](?).NPBRandomStreamPrivate_skipToNth_noLock[314654](arg _mt[315303]:_MT[238], arg this[315301]:NPBRandomStream[315291](?), in arg n[314651] : integral[199](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(314658 call += n[314651] 1)
    if(314677 call _cond_test(314664 call ==(408390 call . this[315301] c"eltType") complex(128)[140]))
    {(314674 call = n[314651](314672 call -(314669 call * n[314651] 2) 1))
    }(314684 call =(408397 call . this[315301] c"NPBRandomStreamPrivate_count") n[314651])(314693 call =(408403 call . this[315301] c"NPBRandomStreamPrivate_cursor")(314692 call randlc_skipto(408408 call . this[315301] c"seed") n[314651]))
  } function NPBRandomStream[315291](?).getNext[314700](arg _mt[315307]:_MT[238], arg this[315305]:NPBRandomStream[315291](?)) : _unknown[51] "method" "primary method"
  {(314705 call(408418 call . this[315305] c"_lock")) const result[314711] "const"(314710 call(408424 call . this[315305] c"NPBRandomStreamPrivate_getNext_noLock"))(314714 'end of statement')(314717 call(408428 call . this[315305] c"_unlock"))(314720 return result[314711])
  }
  { scopeless type(408414 call . this[315305] c"eltType")
  } function NPBRandomStream[315291](?).skipToNth[314731](arg _mt[315311]:_MT[238], arg this[315309]:NPBRandomStream[315291](?), arg n[314728] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    if(314768 call _cond_test(314735 call < n[314728] 0))
    {(314766 'throw'(314739 'new'(_chpl_manager = _owned[30](?))(314765 call IllegalArgumentError[388690](?)(314762 call + "NPBRandomStream.skipToNth(n) called with negative 'n' value "(314760 call _cast string[26] n[314728])))))
    }(314776 call(408437 call . this[315309] c"_lock"))(314781 call(408443 call . this[315309] c"NPBRandomStreamPrivate_skipToNth_noLock") n[314728])(314785 call(408448 call . this[315309] c"_unlock"))
  } function NPBRandomStream[315291](?).getNth[314795](arg _mt[315315]:_MT[238], arg this[315313]:NPBRandomStream[315291](?), arg n[314792] : integral[199](?)) : _unknown[51] throws "method" "primary method"
  {
    if(314833 call _cond_test(314800 call < n[314792] 0))
    {(314831 'throw'(314804 'new'(_chpl_manager = _owned[30](?))(314830 call IllegalArgumentError[388690](?)(314827 call + "NPBRandomStream.getNth(n) called with negative 'n' value "(314825 call _cast string[26] n[314792])))))
    }(314841 call(408461 call . this[315313] c"_lock"))(314846 call(408465 call . this[315313] c"NPBRandomStreamPrivate_skipToNth_noLock") n[314792]) const result[314851] "const"(314850 call(408470 call . this[315313] c"NPBRandomStreamPrivate_getNext_noLock"))(314854 'end of statement')(314857 call(408474 call . this[315313] c"_unlock"))(314860 return result[314851])
  }
  { scopeless type(408454 call . this[315313] c"eltType")
  } function NPBRandomStream[315291](?).fillRandom[314874](arg _mt[315319]:_MT[238], arg this[315317]:NPBRandomStream[315291](?), arg arr[314871] :(314868 call chpl__buildArrayRuntimeType nil[44](408480 call . this[315317] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    Forall {
      induction variables:
        unknown x[314901] "index var" "insert auto destroy"
        unknown r[314903] "index var" "insert auto destroy"
      iterated expressions:
        arr[314871]
        (314893 call(408485 call . this[315317] c"iterate")(314885 call . arr[314871] c"_dom")(314890 call . arr[314871] c"eltType"))
      shadow variables:
      other variables
        forall body
      {(314897 call = x[314901] r[314903])
      }
    }
  } function NPBRandomStream[315291](?).fillRandom[314917](arg _mt[315323]:_MT[238], arg this[315321]:NPBRandomStream[315291](?), arg arr[314914] :(314911 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(314947 call compilerError "NPBRandomStream(eltType="(314940 call _cast string[26](408492 call . this[315321] c"eltType")) ") can only be used to fill arrays of "(314945 call _cast string[26](408497 call . this[315321] c"eltType")))
  } function NPBRandomStream[315291](?).choice[314960](arg _mt[315327]:_MT[238], arg this[315325]:NPBRandomStream[315291](?), arg x[314957] :(314954 call chpl__buildArrayRuntimeType nil[44]), arg size[314965] : unknown sizeType[314962] = none[57], arg replace[314970] = 1, arg prob[314976] : unknown probType[314973] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(314999 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315291](?).choice[315014](arg _mt[315331]:_MT[238], arg this[315329]:NPBRandomStream[315291](?), arg x[315011] :(315010 call range[64316](?)(stridable = ?[260])), arg size[315019] : unknown sizeType[315016] = none[57], arg replace[315024] = 1, arg prob[315030] : unknown probType[315027] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315037 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315291](?).choice[315048](arg _mt[315335]:_MT[238], arg this[315333]:NPBRandomStream[315291](?), arg x[315045] : _domain[125902](?), arg size[315053] : unknown sizeType[315050] = none[57], arg replace[315058] = 1, arg prob[315064] : unknown probType[315061] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315071 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315291](?).iterate[315082](arg _mt[315339]:_MT[238], arg this[315337]:NPBRandomStream[315291](?), arg D[315079] : _domain[125902](?), arg resultType[315085]:_any[178](?) = real(64)[16]) : _unknown[51] "method" "primary method" "fn returns iterator"
  {(315090 call(408504 call . this[315337] c"_lock")) const start[315094] "const"(408509 call . this[315337] c"NPBRandomStreamPrivate_count")(315097 'end of statement')(315112 call +=(408514 call . this[315337] c"NPBRandomStreamPrivate_count")(315111 call(315103 call .(315100 call . D[315079] c"size") c"safeCast")(315109 call int(64)[13] 64)))(315121 call(408518 call . this[315337] c"NPBRandomStreamPrivate_skipToNth_noLock")(315118 call -(408523 call . this[315337] c"NPBRandomStreamPrivate_count") 1))(315125 call(408527 call . this[315337] c"_unlock"))(315134 return(315133 call NPBRandomPrivate_iterate resultType[315085] D[315079](408534 call . this[315337] c"seed") start[315094]))
  } function NPBRandomStream[315291](?).iterate[315144](arg _mt[315343]:_MT[238], arg this[315341]:NPBRandomStream[315291](?), arg D[315141] : _domain[125902](?), arg resultType[315147]:_any[178](?) = real(64)[16], param arg tag[315150]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  { const start[315160] "const"(408542 call . this[315341] c"NPBRandomStreamPrivate_count")(315163 'end of statement')(315173 return(315172 call NPBRandomPrivate_iterate resultType[315147] D[315141](408549 call . this[315341] c"seed") start[315160] tag[315150]))
  }
  {(315157 call == tag[315150] leader[447])
  } function NPBRandomStream[315291](?).writeThis[315182](arg _mt[315347]:_MT[238], arg this[315345]:NPBRandomStream[315291](?), arg f[315180]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides" "no return value for void"
  {(315186 call <~> f[315180] "NPBRandomStream(eltType=")(315195 call <~> f[315180](315193 call _cast string[26](408558 call . this[315345] c"eltType")))(315200 call <~> f[315180] ", parSafe=")(315205 call <~> f[315180](408565 call . this[315345] c"parSafe"))(315210 call <~> f[315180] ", seed=")(315215 call <~> f[315180](408572 call . this[315345] c"seed"))(315220 call <~> f[315180] ")")
  } function NPBRandomStream[315291](?)._lock[315237](arg _mt[315351]:_MT[238], arg this[315349]:NPBRandomStream[315291](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(315247 call _cond_test(408580 call . this[315349] c"parSafe"))
    {(315245 call(315241 call .(365077 call . this[315349] c"_l") c"lock"))
    }
  } function NPBRandomStream[315291](?)._unlock[315257](arg _mt[315355]:_MT[238], arg this[315353]:NPBRandomStream[315291](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(315267 call _cond_test(408585 call . this[315353] c"parSafe"))
    {(315265 call(315261 call .(365082 call . this[315353] c"_l") c"unlock"))
    }
  } type NPBRandomStream[315291](?) val super[355690]:object[22] "super class" unknown eltType[314311] "type variable"(314310 call real(64)[16] 64) const seed[314318] "const"(314317 call int(64)[13] 64) unknown parSafe[314324] "param" 1 bool[10] unknown _l[315231] "no doc"(315228 IfExpr  parSafe[314324] then
  { scopeless chpl_LocalSpinlock[187386]
  } else
  { scopeless nothing[7]
  } ) unknown NPBRandomStreamPrivate_cursor[315277] "no doc" seed[314318] real(64)[16] unknown NPBRandomStreamPrivate_count[315286] "no doc" 1(315284 call int(64)[13] 64) type NPBRandomStream[406787](?) const r23[315364] "const" "private"(315362 call ** 0.5 23) const t23[315371] "const" "private"(315369 call ** 2.0 23) const r46[315378] "const" "private"(315376 call ** 0.5 46) const t46[315385] "const" "private"(315383 call ** 2.0 46) const arand[315391] "const" "private" 1.2207e+09(315394 'end of statement') function randlc[315401](inout arg x[315398] : real(64)[16], arg a[315405] : real(64)[16] = arand[315391]) : _unknown[51] "private"
  { unknown t1[315413](315411 call * r23[315364] a[315405])(315416 'end of statement') const a1[315422] "const"(315421 call floor t1[315413]) const a2[315432] "const"(315430 call - a[315405](315428 call * t23[315371] a1[315422]))(315435 'end of statement')(315441 call = t1[315413](315439 call * r23[315364] x[315398])) const x1[315448] "const"(315447 call floor t1[315413]) const x2[315458] "const"(315456 call - x[315398](315454 call * t23[315371] x1[315448]))(315461 'end of statement')(315473 call = t1[315413](315471 call +(315465 call * a1[315422] x2[315458])(315469 call * a2[315432] x1[315448]))) const t2[315483] "const"(315482 call floor(315479 call * r23[315364] t1[315413])) const z[315493] "const"(315491 call - t1[315413](315489 call * t23[315371] t2[315483])) const t3[315506] "const"(315504 call +(315498 call * t23[315371] z[315493])(315502 call * a2[315432] x2[315458])) const t4[315516] "const"(315515 call floor(315512 call * r46[315378] t3[315506])) const x3[315526] "const"(315524 call - t3[315506](315522 call * t46[315385] t4[315516]))(315529 'end of statement')(315532 call = x[315398] x3[315526])(315539 return(315537 call * r46[315378] x3[315526]))
  } function randlc[315547](arg resultType[315545]:_any[178](?), inout arg x[315550] : real(64)[16]) : _unknown[51] "private"
  {
    if(315598 call _cond_test(315555 call == resultType[315545] complex(128)[140]))
    {(315571 return(315569 call _cast complex(128)[140](315566 call _build_tuple(315560 call randlc x[315550])(315564 call randlc x[315550]))))
    }
    {
      if(315592 call _cond_test(315575 call == resultType[315545] imag(64)[130]))
      {(315584 return(315583 call _r2i(315581 call randlc x[315550])))
      }
      {(315590 return(315589 call randlc x[315550]))
      }
    }
  } function randlc_skipto[315616](arg seed[315613] :(315612 call int(64)[13] 64), in arg n[315619] : integral[199](?)) : _unknown[51] "private"
  { unknown cursor[315627](315625 call _cast real(64)[16] seed[315613])(315630 'end of statement')(315634 call -= n[315619] 1) unknown t[315638] arand[315391](315641 'end of statement') arand[315391]
    { unknown tmp[315704] "temp"(315728 'move' tmp[315704](315723 call _cond_test(315725 call != n[315619] 0)))
      WhileDo[315709]
      {
        { const i[315652] "const"(315650 call / n[315619] 2)(315655 'end of statement')
          if(315670 call _cond_test(315662 call !=(315659 call * 2 i[315652]) n[315619]))
          {(315668 call randlc cursor[315627] t[315638])
          }
          if(315687 call _cond_test(315677 call == i[315652] 0))
          {
            break _breakLabel[315708] _breakLabel[315708]
          }
          {(315684 call = n[315619] i[315652])
          }(315697 call randlc t[315638] t[315638])(315701 call = n[315619] i[315652])
        } label _continueLabel[315707](315718 'move' tmp[315704](315713 call _cond_test(315715 call != n[315619] 0))) tmp[315704]
      } label _breakLabel[315708]
    }(315732 return cursor[315627])
  }
  { scopeless type real(64)[16]
  } function outer[315741](arg ranges[315739]:_any[178](?), param arg dim[315745] : int(64)[13] = 0) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(315913 call _cond_test(315757 call ==(315751 call + dim[315745] 2)(315754 call . ranges[315739] c"size")))
    {
      { unknown _indexOfInterest[315769] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315770] "expr temp" "temp"(315779 'move' _iterator[315770](315777 call _getIterator(315763 call ranges[315739] dim[315745])))
        Defer
        {
          {(315796 call _freeIterator _iterator[315770])
          }
        }
        { scopeless type(315785 'move' _indexOfInterest[315769](315782 call iteratorIndex _iterator[315770]))
        }
        ForLoop[315771]
        { unknown i[315789] "index var" "insert auto destroy"(315791 'move' i[315789] _indexOfInterest[315769])(315767 yield(315765 call _build_tuple i[315789])) label _continueLabel[315774] _indexOfInterest[315769] _iterator[315770]
        } label _breakLabel[315775]
      }
    }
    {
      if(315909 call _cond_test(315812 call <(315806 call + dim[315745] 2)(315809 call . ranges[315739] c"size")))
      {
        { unknown _indexOfInterest[315870] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315871] "expr temp" "temp"(315880 'move' _iterator[315871](315878 call _getIterator(315818 call ranges[315739] dim[315745])))
          Defer
          {
            {(315897 call _freeIterator _iterator[315871])
            }
          }
          { scopeless type(315886 'move' _indexOfInterest[315870](315883 call iteratorIndex _iterator[315871]))
          }
          ForLoop[315872]
          { unknown i[315890] "index var" "insert auto destroy"(315892 'move' i[315890] _indexOfInterest[315870])
            { unknown _indexOfInterest[315836] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315837] "expr temp" "temp"(315846 'move' _iterator[315837](315844 call _getIterator(315827 call outer ranges[315739](315825 call + dim[315745] 1))))
              Defer
              {
                {(315863 call _freeIterator _iterator[315837])
                }
              }
              { scopeless type(315852 'move' _indexOfInterest[315836](315849 call iteratorIndex _iterator[315837]))
              }
              ForLoop[315838]
              { unknown j[315856] "index var" "insert auto destroy"(315858 'move' j[315856] _indexOfInterest[315836])(315834 yield(315832 call _build_tuple i[315890](315830 'expand_tuple' j[315856]))) label _continueLabel[315841] _indexOfInterest[315836] _iterator[315837]
              } label _breakLabel[315842]
            } label _continueLabel[315875] _indexOfInterest[315870] _iterator[315871]
          } label _breakLabel[315876]
        }
      }
      {(315906 yield 0)
      }
    }
  } function NPBRandomPrivate_iterate[315925](arg resultType[315923]:_any[178](?), arg D[315928] : _domain[125902](?), arg seed[315935] :(315934 call int(64)[13] 64), arg start[315942] :(315941 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown cursor[315950](315949 call randlc_skipto seed[315935] start[315942])(315953 'end of statement')
    { unknown _indexOfInterest[315964] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315965] "expr temp" "temp"(315974 'move' _iterator[315965](315972 call _getIterator D[315928]))
      Defer
      {
        {(315990 call _freeIterator _iterator[315965])
        }
      }
      { scopeless type(315979 'move' _indexOfInterest[315964](315976 call iteratorIndex _iterator[315965]))
      }
      ForLoop[315966]
      { unknown i[315983] "index var" "insert auto destroy"(315985 'move' i[315983] _indexOfInterest[315964])(315962 yield(315961 call randlc resultType[315923] cursor[315950])) label _continueLabel[315969] _indexOfInterest[315964] _iterator[315965]
      } label _breakLabel[315970]
    }
  } function NPBRandomPrivate_iterate[316003](arg resultType[316001]:_any[178](?), arg D[316006] : _domain[125902](?), arg seed[316013] :(316012 call int(64)[13] 64), arg start[316020] :(316019 call int(64)[13] 64), param arg tag[316024] : iterKind[453]) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    { unknown _indexOfInterest[316049] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316050] "expr temp" "temp"(316059 'move' _iterator[316050](316057 call _getIterator(316045 call(316036 call . D[316006] c"these")(tag = leader[447]))))
      Defer
      {
        {(316076 call _freeIterator _iterator[316050])
        }
      }
      { scopeless type(316065 'move' _indexOfInterest[316049](316062 call iteratorIndex _iterator[316050]))
      }
      ForLoop[316051]
      { unknown block[316069] "index var" "insert auto destroy"(316071 'move' block[316069] _indexOfInterest[316049])(316047 yield block[316069]) label _continueLabel[316054] _indexOfInterest[316049] _iterator[316050]
      } label _breakLabel[316055]
    }
  }
  {(316032 call == tag[316024] leader[447])
  } function NPBRandomPrivate_iterate[316091](arg resultType[316089]:_any[178](?), arg D[316094] : _domain[125902](?), arg seed[316101] :(316100 call int(64)[13] 64), arg start[316108] :(316107 call int(64)[13] 64), param arg tag[316112] : iterKind[453], arg followThis[316115]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown multiplier[316137] "param"(316134 IfExpr (316130 call == resultType[316089] complex(128)[140]) then
    { scopeless 2
    } else
    { scopeless 1
    } )(316140 'end of statement') const ZD[316145] "const"(316144 call computeZeroBasedDomain D[316094])(316148 'end of statement') const innerRange[316159] "const"(316158 call followThis[316115](316155 call -(316151 call . ZD[316145] c"rank") 1))(316162 'end of statement') unknown cursor[316164] real(64)[16](316167 'end of statement')
    { unknown _indexOfInterest[316396] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316397] "expr temp" "temp"(316406 'move' _iterator[316397](316404 call _getIterator(316172 call outer followThis[316115])))
      Defer
      {
        {(316423 call _freeIterator _iterator[316397])
        }
      }
      { scopeless type(316412 'move' _indexOfInterest[316396](316409 call iteratorIndex _iterator[316397]))
      }
      ForLoop[316398]
      { unknown outer[316416] "index var" "insert auto destroy"(316418 'move' outer[316416] _indexOfInterest[316396])
        { unknown myStart[316174] start[316108](316177 'end of statement')
          if(316243 call _cond_test(316184 call >(316180 call . ZD[316145] c"rank") 1))
          {(316214 call += myStart[316174](316212 call * multiplier[316137](316211 call(316203 call .(316202 call(316189 call . ZD[316145] c"indexOrder")(316199 call _build_tuple(316193 'expand_tuple' outer[316416])(316195 call . innerRange[316159] c"low"))) c"safeCast")(316209 call int(64)[13] 64))))
          }
          {(316240 call += myStart[316174](316238 call * multiplier[316137](316237 call(316229 call .(316228 call(316220 call . ZD[316145] c"indexOrder")(316224 call . innerRange[316159] c"low")) c"safeCast")(316235 call int(64)[13] 64))))
          }
          if(316392 call _cond_test(316253 call !(316250 call . innerRange[316159] c"stridable")))
          {(316261 call = cursor[316164](316260 call randlc_skipto seed[316101] myStart[316174]))
            { unknown _indexOfInterest[316274] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316275] "expr temp" "temp"(316284 'move' _iterator[316275](316282 call _getIterator innerRange[316159]))
              Defer
              {
                {(316300 call _freeIterator _iterator[316275])
                }
              }
              { scopeless type(316289 'move' _indexOfInterest[316274](316286 call iteratorIndex _iterator[316275]))
              }
              ForLoop[316276]
              { unknown i[316293] "index var" "insert auto destroy"(316295 'move' i[316293] _indexOfInterest[316274])(316272 yield(316271 call randlc resultType[316089] cursor[316164])) label _continueLabel[316279] _indexOfInterest[316274] _iterator[316275]
              } label _breakLabel[316280]
            }
          }
          {(316321 call -= myStart[316174](316320 call(316312 call .(316309 call . innerRange[316159] c"low") c"safeCast")(316318 call int(64)[13] 64)))
            { unknown _indexOfInterest[316359] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316360] "expr temp" "temp"(316369 'move' _iterator[316360](316367 call _getIterator innerRange[316159]))
              Defer
              {
                {(316385 call _freeIterator _iterator[316360])
                }
              }
              { scopeless type(316374 'move' _indexOfInterest[316359](316371 call iteratorIndex _iterator[316360]))
              }
              ForLoop[316361]
              { unknown i[316378] "index var" "insert auto destroy"(316380 'move' i[316378] _indexOfInterest[316359])
                {(316348 call = cursor[316164](316347 call randlc_skipto seed[316101](316345 call + myStart[316174](316343 call *(316341 call(316333 call . i[316378] c"safeCast")(316339 call int(64)[13] 64)) multiplier[316137]))))(316357 yield(316356 call randlc resultType[316089] cursor[316164]))
                } label _continueLabel[316364] _indexOfInterest[316359] _iterator[316360]
              } label _breakLabel[316365]
            }
          }
        } label _continueLabel[316401] _indexOfInterest[316396] _iterator[316397]
      } label _breakLabel[316402]
    }(355464 'used modules list'(316125 'use' DSIUtil[230800]))
  }
  {(316122 call == tag[316112] follower[449])
  }(355458 'used modules list'(352982 'use' ChapelStandard[20264])(314300 'use' RandomSupport[307348])(314304 'use' ChapelLocks[187256]))
}