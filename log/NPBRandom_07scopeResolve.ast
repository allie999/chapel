AST dump for NPBRandom after pass scopeResolve.
Module use list: ChapelStandard RandomSupport ChapelLocks HaltWrappers DSIUtil 

{ function NPBRandomStream[315408](?).init[314453](arg _mt[315412]:_MT[238], arg this[315410]:NPBRandomStream[315408](?), arg eltType[314450]:_any[178](?) =(314449 call real(64)[16] 64), arg seed[314463] :(314458 call int(64)[13] 64) =(314460 call . SeedGenerator[307559] c"oddCurrentTime"), param arg parSafe[314469] : bool[10] = 1) : _unknown[51] "method" "primary method" "no return value for void"
  {(314482 call =(314478 call . this[315410] c"eltType") eltType[314450]) unknown one[314490] 1(314488 call uint(64)[115] 64)(314493 'end of statement') unknown two_46[314502](314500 call << one[314490] 46)(314497 call uint(64)[115] 64)(314505 'end of statement') unknown two_46_mask[314514](314512 call - two_46[314502] 1)(314509 call uint(64)[115] 64)(314517 'end of statement') unknown useed[314525](314523 call _cast(314522 call uint(64)[115] 64) seed[314463])(314528 'end of statement') unknown mod[314533](314532 call uint(64)[115] 64)(314536 'end of statement')
    if(314570 call _cond_test(314542 call ==(314539 call % useed[314525] 2) 0))
    {(314568 call initHalt module=[255] HaltWrappers[210016] "NPBRandomStream seed must be an odd integer")(365182 'referenced modules list' HaltWrappers[210016])
    }(314580 call = mod[314533](314578 call & useed[314525] two_46_mask[314514]))(314594 call =(314584 call . this[315410] c"seed")(314592 call _cast(314591 call int(64)[13] 64) mod[314533]))(314602 call =(314598 call . this[315410] c"parSafe") parSafe[314469])(314610 call(314606 call . this[315410] c"complete"))
    if(314670 call _cond_test(314644 call ||(314629 call ||(314620 call ==(314617 call %(314613 call . this[315410] c"seed") 2) 0)(314627 call <(314623 call . this[315410] c"seed") 1))(314642 call >(314632 call . this[315410] c"seed")(314640 call _cast(314639 call int(64)[13] 64) two_46[314502]))))
    {(314668 call initHalt module=[255] HaltWrappers[210016] "NPBRandomStream seed must be an odd integer between 0 and 2**46")(365194 'referenced modules list' HaltWrappers[210016])
    }(314677 call =(408474 call . this[315410] c"NPBRandomStreamPrivate_cursor") seed[314463])(314682 call =(408482 call . this[315410] c"NPBRandomStreamPrivate_count") 1)
    if(314724 call _cond_test(314699 call ||(314693 call ||(314687 call == eltType[314450] real(64)[16])(314691 call == eltType[314450] imag(64)[130]))(314697 call == eltType[314450] complex(128)[140])))
    {
    }
    {(314721 call compilerError "NPBRandomStream only supports eltType=real(64), imag(64), or complex(128)")
    }(355590 'used modules list'(314474 'use' HaltWrappers[210016]))
  } function NPBRandomStream[315408](?).NPBRandomStreamPrivate_getNext_noLock[314732](arg _mt[315416]:_MT[238], arg this[315414]:NPBRandomStream[315408](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(314750 call _cond_test(314736 call ==(408490 call . this[315414] c"eltType") complex(128)[140]))
    {(314740 call +=(408495 call . this[315414] c"NPBRandomStreamPrivate_count") 2)
    }
    {(314746 call +=(408500 call . this[315414] c"NPBRandomStreamPrivate_count") 1)
    }(314760 return(314759 call randlc(408505 call . this[315414] c"eltType")(408510 call . this[315414] c"NPBRandomStreamPrivate_cursor")))
  } function NPBRandomStream[315408](?).NPBRandomStreamPrivate_skipToNth_noLock[314770](arg _mt[315420]:_MT[238], arg this[315418]:NPBRandomStream[315408](?), in arg n[314767] : integral[199](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(314774 call += n[314767] 1)
    if(314793 call _cond_test(314780 call ==(408517 call . this[315418] c"eltType") complex(128)[140]))
    {(314790 call = n[314767](314788 call -(314785 call * n[314767] 2) 1))
    }(314800 call =(408524 call . this[315418] c"NPBRandomStreamPrivate_count") n[314767])(314809 call =(408530 call . this[315418] c"NPBRandomStreamPrivate_cursor")(314808 call randlc_skipto(408535 call . this[315418] c"seed") n[314767]))
  } function NPBRandomStream[315408](?).getNext[314816](arg _mt[315424]:_MT[238], arg this[315422]:NPBRandomStream[315408](?)) : _unknown[51] "method" "primary method"
  {(314821 call(408545 call . this[315422] c"_lock")) const result[314827] "const"(314826 call(408551 call . this[315422] c"NPBRandomStreamPrivate_getNext_noLock"))(314830 'end of statement')(314833 call(408555 call . this[315422] c"_unlock"))(314836 return result[314827])
  }
  { scopeless type(408541 call . this[315422] c"eltType")
  } function NPBRandomStream[315408](?).skipToNth[314847](arg _mt[315428]:_MT[238], arg this[315426]:NPBRandomStream[315408](?), arg n[314844] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    if(314884 call _cond_test(314851 call < n[314844] 0))
    {(314882 'throw'(314855 'new'(_chpl_manager = _owned[30](?))(314881 call IllegalArgumentError[388818](?)(314878 call + "NPBRandomStream.skipToNth(n) called with negative 'n' value "(314876 call _cast string[26] n[314844])))))
    }(314892 call(408564 call . this[315426] c"_lock"))(314897 call(408570 call . this[315426] c"NPBRandomStreamPrivate_skipToNth_noLock") n[314844])(314901 call(408575 call . this[315426] c"_unlock"))
  } function NPBRandomStream[315408](?).getNth[314911](arg _mt[315432]:_MT[238], arg this[315430]:NPBRandomStream[315408](?), arg n[314908] : integral[199](?)) : _unknown[51] throws "method" "primary method"
  {
    if(314949 call _cond_test(314916 call < n[314908] 0))
    {(314947 'throw'(314920 'new'(_chpl_manager = _owned[30](?))(314946 call IllegalArgumentError[388818](?)(314943 call + "NPBRandomStream.getNth(n) called with negative 'n' value "(314941 call _cast string[26] n[314908])))))
    }(314957 call(408588 call . this[315430] c"_lock"))(314962 call(408592 call . this[315430] c"NPBRandomStreamPrivate_skipToNth_noLock") n[314908]) const result[314967] "const"(314966 call(408597 call . this[315430] c"NPBRandomStreamPrivate_getNext_noLock"))(314970 'end of statement')(314973 call(408601 call . this[315430] c"_unlock"))(314976 return result[314967])
  }
  { scopeless type(408581 call . this[315430] c"eltType")
  } function NPBRandomStream[315408](?).fillRandom[314990](arg _mt[315436]:_MT[238], arg this[315434]:NPBRandomStream[315408](?), arg arr[314987] :(314984 call chpl__buildArrayRuntimeType nil[44](408607 call . this[315434] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    Forall {
      induction variables:
        unknown x[315017] "index var" "insert auto destroy"
        unknown r[315019] "index var" "insert auto destroy"
      iterated expressions:
        arr[314987]
        (315009 call(408612 call . this[315434] c"iterate")(315001 call . arr[314987] c"_dom")(315006 call . arr[314987] c"eltType"))
      shadow variables:
      other variables
        forall body
      {(315013 call = x[315017] r[315019])
      }
    }
  } function NPBRandomStream[315408](?).fillRandom[315034](arg _mt[315440]:_MT[238], arg this[315438]:NPBRandomStream[315408](?), arg arr[315031] :(315028 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(315064 call compilerError "NPBRandomStream(eltType="(315057 call _cast string[26](408619 call . this[315438] c"eltType")) ") can only be used to fill arrays of "(315062 call _cast string[26](408624 call . this[315438] c"eltType")))
  } function NPBRandomStream[315408](?).choice[315077](arg _mt[315444]:_MT[238], arg this[315442]:NPBRandomStream[315408](?), arg x[315074] :(315071 call chpl__buildArrayRuntimeType nil[44]), arg size[315082] : unknown sizeType[315079] = none[57], arg replace[315087] = 1, arg prob[315093] : unknown probType[315090] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315116 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315408](?).choice[315131](arg _mt[315448]:_MT[238], arg this[315446]:NPBRandomStream[315408](?), arg x[315128] :(315127 call range[64319](?)(stridable = ?[260])), arg size[315136] : unknown sizeType[315133] = none[57], arg replace[315141] = 1, arg prob[315147] : unknown probType[315144] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315154 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315408](?).choice[315165](arg _mt[315452]:_MT[238], arg this[315450]:NPBRandomStream[315408](?), arg x[315162] : _domain[125908](?), arg size[315170] : unknown sizeType[315167] = none[57], arg replace[315175] = 1, arg prob[315181] : unknown probType[315178] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315188 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315408](?).iterate[315199](arg _mt[315456]:_MT[238], arg this[315454]:NPBRandomStream[315408](?), arg D[315196] : _domain[125908](?), arg resultType[315202]:_any[178](?) = real(64)[16]) : _unknown[51] "method" "primary method" "fn returns iterator"
  {(315207 call(408631 call . this[315454] c"_lock")) const start[315211] "const"(408636 call . this[315454] c"NPBRandomStreamPrivate_count")(315214 'end of statement')(315229 call +=(408641 call . this[315454] c"NPBRandomStreamPrivate_count")(315228 call(315220 call .(315217 call . D[315196] c"size") c"safeCast")(315226 call int(64)[13] 64)))(315238 call(408645 call . this[315454] c"NPBRandomStreamPrivate_skipToNth_noLock")(315235 call -(408650 call . this[315454] c"NPBRandomStreamPrivate_count") 1))(315242 call(408654 call . this[315454] c"_unlock"))(315251 return(315250 call NPBRandomPrivate_iterate resultType[315202] D[315196](408661 call . this[315454] c"seed") start[315211]))
  } function NPBRandomStream[315408](?).iterate[315261](arg _mt[315460]:_MT[238], arg this[315458]:NPBRandomStream[315408](?), arg D[315258] : _domain[125908](?), arg resultType[315264]:_any[178](?) = real(64)[16], param arg tag[315267]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  { const start[315277] "const"(408669 call . this[315458] c"NPBRandomStreamPrivate_count")(315280 'end of statement')(315290 return(315289 call NPBRandomPrivate_iterate resultType[315264] D[315258](408676 call . this[315458] c"seed") start[315277] tag[315267]))
  }
  {(315274 call == tag[315267] leader[447])
  } function NPBRandomStream[315408](?).writeThis[315299](arg _mt[315464]:_MT[238], arg this[315462]:NPBRandomStream[315408](?), arg f[315297]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides" "no return value for void"
  {(315303 call <~> f[315297] "NPBRandomStream(eltType=")(315312 call <~> f[315297](315310 call _cast string[26](408685 call . this[315462] c"eltType")))(315317 call <~> f[315297] ", parSafe=")(315322 call <~> f[315297](408692 call . this[315462] c"parSafe"))(315327 call <~> f[315297] ", seed=")(315332 call <~> f[315297](408699 call . this[315462] c"seed"))(315337 call <~> f[315297] ")")
  } function NPBRandomStream[315408](?)._lock[315354](arg _mt[315468]:_MT[238], arg this[315466]:NPBRandomStream[315408](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(315364 call _cond_test(408707 call . this[315466] c"parSafe"))
    {(315362 call(315358 call .(365205 call . this[315466] c"_l") c"lock"))
    }
  } function NPBRandomStream[315408](?)._unlock[315374](arg _mt[315472]:_MT[238], arg this[315470]:NPBRandomStream[315408](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(315384 call _cond_test(408712 call . this[315470] c"parSafe"))
    {(315382 call(315378 call .(365210 call . this[315470] c"_l") c"unlock"))
    }
  } type NPBRandomStream[315408](?) val super[355818]:object[22] "super class" unknown eltType[314427] "type variable"(314426 call real(64)[16] 64) const seed[314434] "const"(314433 call int(64)[13] 64) unknown parSafe[314440] "param" 1 bool[10] unknown _l[315348] "no doc"(315345 IfExpr  parSafe[314440] then
  { scopeless chpl_LocalSpinlock[187432]
  } else
  { scopeless nothing[7]
  } ) unknown NPBRandomStreamPrivate_cursor[315394] "no doc" seed[314434] real(64)[16] unknown NPBRandomStreamPrivate_count[315403] "no doc" 1(315401 call int(64)[13] 64) type NPBRandomStream[406914](?) const r23[315481] "const" "private"(315479 call ** 0.5 23) const t23[315488] "const" "private"(315486 call ** 2.0 23) const r46[315495] "const" "private"(315493 call ** 0.5 46) const t46[315502] "const" "private"(315500 call ** 2.0 46) const arand[315508] "const" "private" 1.2207e+09(315511 'end of statement') function randlc[315518](inout arg x[315515] : real(64)[16], arg a[315522] : real(64)[16] = arand[315508]) : _unknown[51] "private"
  { unknown t1[315530](315528 call * r23[315481] a[315522])(315533 'end of statement') const a1[315539] "const"(315538 call floor t1[315530]) const a2[315549] "const"(315547 call - a[315522](315545 call * t23[315488] a1[315539]))(315552 'end of statement')(315558 call = t1[315530](315556 call * r23[315481] x[315515])) const x1[315565] "const"(315564 call floor t1[315530]) const x2[315575] "const"(315573 call - x[315515](315571 call * t23[315488] x1[315565]))(315578 'end of statement')(315590 call = t1[315530](315588 call +(315582 call * a1[315539] x2[315575])(315586 call * a2[315549] x1[315565]))) const t2[315600] "const"(315599 call floor(315596 call * r23[315481] t1[315530])) const z[315610] "const"(315608 call - t1[315530](315606 call * t23[315488] t2[315600])) const t3[315623] "const"(315621 call +(315615 call * t23[315488] z[315610])(315619 call * a2[315549] x2[315575])) const t4[315633] "const"(315632 call floor(315629 call * r46[315495] t3[315623])) const x3[315643] "const"(315641 call - t3[315623](315639 call * t46[315502] t4[315633]))(315646 'end of statement')(315649 call = x[315515] x3[315643])(315656 return(315654 call * r46[315495] x3[315643]))
  } function randlc[315664](arg resultType[315662]:_any[178](?), inout arg x[315667] : real(64)[16]) : _unknown[51] "private"
  {
    if(315715 call _cond_test(315672 call == resultType[315662] complex(128)[140]))
    {(315688 return(315686 call _cast complex(128)[140](315683 call _build_tuple(315677 call randlc x[315667])(315681 call randlc x[315667]))))
    }
    {
      if(315709 call _cond_test(315692 call == resultType[315662] imag(64)[130]))
      {(315701 return(315700 call _r2i(315698 call randlc x[315667])))
      }
      {(315707 return(315706 call randlc x[315667]))
      }
    }
  } function randlc_skipto[315733](arg seed[315730] :(315729 call int(64)[13] 64), in arg n[315736] : integral[199](?)) : _unknown[51] "private"
  { unknown cursor[315744](315742 call _cast real(64)[16] seed[315730])(315747 'end of statement')(315751 call -= n[315736] 1) unknown t[315755] arand[315508](315758 'end of statement') arand[315508]
    { unknown tmp[315821] "temp"(315845 'move' tmp[315821](315840 call _cond_test(315842 call != n[315736] 0)))
      WhileDo[315826]
      {
        { const i[315769] "const"(315767 call / n[315736] 2)(315772 'end of statement')
          if(315787 call _cond_test(315779 call !=(315776 call * 2 i[315769]) n[315736]))
          {(315785 call randlc cursor[315744] t[315755])
          }
          if(315804 call _cond_test(315794 call == i[315769] 0))
          {
            break _breakLabel[315825] _breakLabel[315825]
          }
          {(315801 call = n[315736] i[315769])
          }(315814 call randlc t[315755] t[315755])(315818 call = n[315736] i[315769])
        } label _continueLabel[315824](315835 'move' tmp[315821](315830 call _cond_test(315832 call != n[315736] 0))) tmp[315821]
      } label _breakLabel[315825]
    }(315849 return cursor[315744])
  }
  { scopeless type real(64)[16]
  } function outer[315858](arg ranges[315856]:_any[178](?), param arg dim[315862] : int(64)[13] = 0) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(316030 call _cond_test(315874 call ==(315868 call + dim[315862] 2)(315871 call . ranges[315856] c"size")))
    {
      { unknown _indexOfInterest[315886] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315887] "expr temp" "temp"(315896 'move' _iterator[315887](315894 call _getIterator(315880 call ranges[315856] dim[315862])))
        Defer
        {
          {(315913 call _freeIterator _iterator[315887])
          }
        }
        { scopeless type(315902 'move' _indexOfInterest[315886](315899 call iteratorIndex _iterator[315887]))
        }
        ForLoop[315888]
        { unknown i[315906] "index var" "insert auto destroy"(315908 'move' i[315906] _indexOfInterest[315886])(315884 yield(315882 call _build_tuple i[315906])) label _continueLabel[315891] _indexOfInterest[315886] _iterator[315887]
        } label _breakLabel[315892]
      }
    }
    {
      if(316026 call _cond_test(315929 call <(315923 call + dim[315862] 2)(315926 call . ranges[315856] c"size")))
      {
        { unknown _indexOfInterest[315987] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315988] "expr temp" "temp"(315997 'move' _iterator[315988](315995 call _getIterator(315935 call ranges[315856] dim[315862])))
          Defer
          {
            {(316014 call _freeIterator _iterator[315988])
            }
          }
          { scopeless type(316003 'move' _indexOfInterest[315987](316000 call iteratorIndex _iterator[315988]))
          }
          ForLoop[315989]
          { unknown i[316007] "index var" "insert auto destroy"(316009 'move' i[316007] _indexOfInterest[315987])
            { unknown _indexOfInterest[315953] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315954] "expr temp" "temp"(315963 'move' _iterator[315954](315961 call _getIterator(315944 call outer ranges[315856](315942 call + dim[315862] 1))))
              Defer
              {
                {(315980 call _freeIterator _iterator[315954])
                }
              }
              { scopeless type(315969 'move' _indexOfInterest[315953](315966 call iteratorIndex _iterator[315954]))
              }
              ForLoop[315955]
              { unknown j[315973] "index var" "insert auto destroy"(315975 'move' j[315973] _indexOfInterest[315953])(315951 yield(315949 call _build_tuple i[316007](315947 'expand_tuple' j[315973]))) label _continueLabel[315958] _indexOfInterest[315953] _iterator[315954]
              } label _breakLabel[315959]
            } label _continueLabel[315992] _indexOfInterest[315987] _iterator[315988]
          } label _breakLabel[315993]
        }
      }
      {(316023 yield 0)
      }
    }
  } function NPBRandomPrivate_iterate[316042](arg resultType[316040]:_any[178](?), arg D[316045] : _domain[125908](?), arg seed[316052] :(316051 call int(64)[13] 64), arg start[316059] :(316058 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown cursor[316067](316066 call randlc_skipto seed[316052] start[316059])(316070 'end of statement')
    { unknown _indexOfInterest[316081] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316082] "expr temp" "temp"(316091 'move' _iterator[316082](316089 call _getIterator D[316045]))
      Defer
      {
        {(316107 call _freeIterator _iterator[316082])
        }
      }
      { scopeless type(316096 'move' _indexOfInterest[316081](316093 call iteratorIndex _iterator[316082]))
      }
      ForLoop[316083]
      { unknown i[316100] "index var" "insert auto destroy"(316102 'move' i[316100] _indexOfInterest[316081])(316079 yield(316078 call randlc resultType[316040] cursor[316067])) label _continueLabel[316086] _indexOfInterest[316081] _iterator[316082]
      } label _breakLabel[316087]
    }
  } function NPBRandomPrivate_iterate[316120](arg resultType[316118]:_any[178](?), arg D[316123] : _domain[125908](?), arg seed[316130] :(316129 call int(64)[13] 64), arg start[316137] :(316136 call int(64)[13] 64), param arg tag[316141] : iterKind[453]) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    { unknown _indexOfInterest[316166] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316167] "expr temp" "temp"(316176 'move' _iterator[316167](316174 call _getIterator(316162 call(316153 call . D[316123] c"these")(tag = leader[447]))))
      Defer
      {
        {(316193 call _freeIterator _iterator[316167])
        }
      }
      { scopeless type(316182 'move' _indexOfInterest[316166](316179 call iteratorIndex _iterator[316167]))
      }
      ForLoop[316168]
      { unknown block[316186] "index var" "insert auto destroy"(316188 'move' block[316186] _indexOfInterest[316166])(316164 yield block[316186]) label _continueLabel[316171] _indexOfInterest[316166] _iterator[316167]
      } label _breakLabel[316172]
    }
  }
  {(316149 call == tag[316141] leader[447])
  } function NPBRandomPrivate_iterate[316208](arg resultType[316206]:_any[178](?), arg D[316211] : _domain[125908](?), arg seed[316218] :(316217 call int(64)[13] 64), arg start[316225] :(316224 call int(64)[13] 64), param arg tag[316229] : iterKind[453], arg followThis[316232]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown multiplier[316254] "param"(316251 IfExpr (316247 call == resultType[316206] complex(128)[140]) then
    { scopeless 2
    } else
    { scopeless 1
    } )(316257 'end of statement') const ZD[316262] "const"(316261 call computeZeroBasedDomain D[316211])(316265 'end of statement') const innerRange[316276] "const"(316275 call followThis[316232](316272 call -(316268 call . ZD[316262] c"rank") 1))(316279 'end of statement') unknown cursor[316281] real(64)[16](316284 'end of statement')
    { unknown _indexOfInterest[316513] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316514] "expr temp" "temp"(316523 'move' _iterator[316514](316521 call _getIterator(316289 call outer followThis[316232])))
      Defer
      {
        {(316540 call _freeIterator _iterator[316514])
        }
      }
      { scopeless type(316529 'move' _indexOfInterest[316513](316526 call iteratorIndex _iterator[316514]))
      }
      ForLoop[316515]
      { unknown outer[316533] "index var" "insert auto destroy"(316535 'move' outer[316533] _indexOfInterest[316513])
        { unknown myStart[316291] start[316225](316294 'end of statement')
          if(316360 call _cond_test(316301 call >(316297 call . ZD[316262] c"rank") 1))
          {(316331 call += myStart[316291](316329 call * multiplier[316254](316328 call(316320 call .(316319 call(316306 call . ZD[316262] c"indexOrder")(316316 call _build_tuple(316310 'expand_tuple' outer[316533])(316312 call . innerRange[316276] c"low"))) c"safeCast")(316326 call int(64)[13] 64))))
          }
          {(316357 call += myStart[316291](316355 call * multiplier[316254](316354 call(316346 call .(316345 call(316337 call . ZD[316262] c"indexOrder")(316341 call . innerRange[316276] c"low")) c"safeCast")(316352 call int(64)[13] 64))))
          }
          if(316509 call _cond_test(316370 call !(316367 call . innerRange[316276] c"stridable")))
          {(316378 call = cursor[316281](316377 call randlc_skipto seed[316218] myStart[316291]))
            { unknown _indexOfInterest[316391] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316392] "expr temp" "temp"(316401 'move' _iterator[316392](316399 call _getIterator innerRange[316276]))
              Defer
              {
                {(316417 call _freeIterator _iterator[316392])
                }
              }
              { scopeless type(316406 'move' _indexOfInterest[316391](316403 call iteratorIndex _iterator[316392]))
              }
              ForLoop[316393]
              { unknown i[316410] "index var" "insert auto destroy"(316412 'move' i[316410] _indexOfInterest[316391])(316389 yield(316388 call randlc resultType[316206] cursor[316281])) label _continueLabel[316396] _indexOfInterest[316391] _iterator[316392]
              } label _breakLabel[316397]
            }
          }
          {(316438 call -= myStart[316291](316437 call(316429 call .(316426 call . innerRange[316276] c"low") c"safeCast")(316435 call int(64)[13] 64)))
            { unknown _indexOfInterest[316476] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316477] "expr temp" "temp"(316486 'move' _iterator[316477](316484 call _getIterator innerRange[316276]))
              Defer
              {
                {(316502 call _freeIterator _iterator[316477])
                }
              }
              { scopeless type(316491 'move' _indexOfInterest[316476](316488 call iteratorIndex _iterator[316477]))
              }
              ForLoop[316478]
              { unknown i[316495] "index var" "insert auto destroy"(316497 'move' i[316495] _indexOfInterest[316476])
                {(316465 call = cursor[316281](316464 call randlc_skipto seed[316218](316462 call + myStart[316291](316460 call *(316458 call(316450 call . i[316495] c"safeCast")(316456 call int(64)[13] 64)) multiplier[316254]))))(316474 yield(316473 call randlc resultType[316206] cursor[316281]))
                } label _continueLabel[316481] _indexOfInterest[316476] _iterator[316477]
              } label _breakLabel[316482]
            }
          }
        } label _continueLabel[316518] _indexOfInterest[316513] _iterator[316514]
      } label _breakLabel[316519]
    }(355592 'used modules list'(316242 'use' DSIUtil[230907]))
  }
  {(316239 call == tag[316229] follower[449])
  }(355586 'used modules list'(353110 'use' ChapelStandard[20267])(314416 'use' RandomSupport[307463])(314420 'use' ChapelLocks[187302]))
}