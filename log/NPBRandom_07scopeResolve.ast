AST dump for NPBRandom after pass scopeResolve.
Module use list: ChapelStandard RandomSupport ChapelLocks HaltWrappers DSIUtil 

{ function NPBRandomStream[315477](?).init[314522](arg _mt[315481]:_MT[238], arg this[315479]:NPBRandomStream[315477](?), arg eltType[314519]:_any[178](?) =(314518 call real(64)[16] 64), arg seed[314532] :(314527 call int(64)[13] 64) =(314529 call . SeedGenerator[307628] c"oddCurrentTime"), param arg parSafe[314538] : bool[10] = 1) : _unknown[51] "method" "primary method" "no return value for void"
  {(314551 call =(314547 call . this[315479] c"eltType") eltType[314519]) unknown one[314559] 1(314557 call uint(64)[115] 64)(314562 'end of statement') unknown two_46[314571](314569 call << one[314559] 46)(314566 call uint(64)[115] 64)(314574 'end of statement') unknown two_46_mask[314583](314581 call - two_46[314571] 1)(314578 call uint(64)[115] 64)(314586 'end of statement') unknown useed[314594](314592 call _cast(314591 call uint(64)[115] 64) seed[314532])(314597 'end of statement') unknown mod[314602](314601 call uint(64)[115] 64)(314605 'end of statement')
    if(314639 call _cond_test(314611 call ==(314608 call % useed[314594] 2) 0))
    {(314637 call initHalt module=[255] HaltWrappers[210085] "NPBRandomStream seed must be an odd integer")(365253 'referenced modules list' HaltWrappers[210085])
    }(314649 call = mod[314602](314647 call & useed[314594] two_46_mask[314583]))(314663 call =(314653 call . this[315479] c"seed")(314661 call _cast(314660 call int(64)[13] 64) mod[314602]))(314671 call =(314667 call . this[315479] c"parSafe") parSafe[314538])(314679 call(314675 call . this[315479] c"complete"))
    if(314739 call _cond_test(314713 call ||(314698 call ||(314689 call ==(314686 call %(314682 call . this[315479] c"seed") 2) 0)(314696 call <(314692 call . this[315479] c"seed") 1))(314711 call >(314701 call . this[315479] c"seed")(314709 call _cast(314708 call int(64)[13] 64) two_46[314571]))))
    {(314737 call initHalt module=[255] HaltWrappers[210085] "NPBRandomStream seed must be an odd integer between 0 and 2**46")(365265 'referenced modules list' HaltWrappers[210085])
    }(314746 call =(408552 call . this[315479] c"NPBRandomStreamPrivate_cursor") seed[314532])(314751 call =(408560 call . this[315479] c"NPBRandomStreamPrivate_count") 1)
    if(314793 call _cond_test(314768 call ||(314762 call ||(314756 call == eltType[314519] real(64)[16])(314760 call == eltType[314519] imag(64)[130]))(314766 call == eltType[314519] complex(128)[140])))
    {
    }
    {(314790 call compilerError "NPBRandomStream only supports eltType=real(64), imag(64), or complex(128)")
    }(355661 'used modules list'(314543 'use' HaltWrappers[210085]))
  } function NPBRandomStream[315477](?).NPBRandomStreamPrivate_getNext_noLock[314801](arg _mt[315485]:_MT[238], arg this[315483]:NPBRandomStream[315477](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(314819 call _cond_test(314805 call ==(408568 call . this[315483] c"eltType") complex(128)[140]))
    {(314809 call +=(408573 call . this[315483] c"NPBRandomStreamPrivate_count") 2)
    }
    {(314815 call +=(408578 call . this[315483] c"NPBRandomStreamPrivate_count") 1)
    }(314829 return(314828 call randlc(408583 call . this[315483] c"eltType")(408588 call . this[315483] c"NPBRandomStreamPrivate_cursor")))
  } function NPBRandomStream[315477](?).NPBRandomStreamPrivate_skipToNth_noLock[314839](arg _mt[315489]:_MT[238], arg this[315487]:NPBRandomStream[315477](?), in arg n[314836] : integral[199](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(314843 call += n[314836] 1)
    if(314862 call _cond_test(314849 call ==(408595 call . this[315487] c"eltType") complex(128)[140]))
    {(314859 call = n[314836](314857 call -(314854 call * n[314836] 2) 1))
    }(314869 call =(408602 call . this[315487] c"NPBRandomStreamPrivate_count") n[314836])(314878 call =(408608 call . this[315487] c"NPBRandomStreamPrivate_cursor")(314877 call randlc_skipto(408613 call . this[315487] c"seed") n[314836]))
  } function NPBRandomStream[315477](?).getNext[314885](arg _mt[315493]:_MT[238], arg this[315491]:NPBRandomStream[315477](?)) : _unknown[51] "method" "primary method"
  {(314890 call(408623 call . this[315491] c"_lock")) const result[314896] "const"(314895 call(408629 call . this[315491] c"NPBRandomStreamPrivate_getNext_noLock"))(314899 'end of statement')(314902 call(408633 call . this[315491] c"_unlock"))(314905 return result[314896])
  }
  { scopeless type(408619 call . this[315491] c"eltType")
  } function NPBRandomStream[315477](?).skipToNth[314916](arg _mt[315497]:_MT[238], arg this[315495]:NPBRandomStream[315477](?), arg n[314913] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    if(314953 call _cond_test(314920 call < n[314913] 0))
    {(314951 'throw'(314924 'new'(_chpl_manager = _owned[30](?))(314950 call IllegalArgumentError[388889](?)(314947 call + "NPBRandomStream.skipToNth(n) called with negative 'n' value "(314945 call _cast string[26] n[314913])))))
    }(314961 call(408642 call . this[315495] c"_lock"))(314966 call(408648 call . this[315495] c"NPBRandomStreamPrivate_skipToNth_noLock") n[314913])(314970 call(408653 call . this[315495] c"_unlock"))
  } function NPBRandomStream[315477](?).getNth[314980](arg _mt[315501]:_MT[238], arg this[315499]:NPBRandomStream[315477](?), arg n[314977] : integral[199](?)) : _unknown[51] throws "method" "primary method"
  {
    if(315018 call _cond_test(314985 call < n[314977] 0))
    {(315016 'throw'(314989 'new'(_chpl_manager = _owned[30](?))(315015 call IllegalArgumentError[388889](?)(315012 call + "NPBRandomStream.getNth(n) called with negative 'n' value "(315010 call _cast string[26] n[314977])))))
    }(315026 call(408666 call . this[315499] c"_lock"))(315031 call(408670 call . this[315499] c"NPBRandomStreamPrivate_skipToNth_noLock") n[314977]) const result[315036] "const"(315035 call(408675 call . this[315499] c"NPBRandomStreamPrivate_getNext_noLock"))(315039 'end of statement')(315042 call(408679 call . this[315499] c"_unlock"))(315045 return result[315036])
  }
  { scopeless type(408659 call . this[315499] c"eltType")
  } function NPBRandomStream[315477](?).fillRandom[315059](arg _mt[315505]:_MT[238], arg this[315503]:NPBRandomStream[315477](?), arg arr[315056] :(315053 call chpl__buildArrayRuntimeType nil[44](408685 call . this[315503] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    Forall {
      induction variables:
        unknown x[315086] "index var" "insert auto destroy"
        unknown r[315088] "index var" "insert auto destroy"
      iterated expressions:
        arr[315056]
        (315078 call(408690 call . this[315503] c"iterate")(315070 call . arr[315056] c"_dom")(315075 call . arr[315056] c"eltType"))
      shadow variables:
      other variables
        forall body
      {(315082 call = x[315086] r[315088])
      }
    }
  } function NPBRandomStream[315477](?).fillRandom[315103](arg _mt[315509]:_MT[238], arg this[315507]:NPBRandomStream[315477](?), arg arr[315100] :(315097 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(315133 call compilerError "NPBRandomStream(eltType="(315126 call _cast string[26](408697 call . this[315507] c"eltType")) ") can only be used to fill arrays of "(315131 call _cast string[26](408702 call . this[315507] c"eltType")))
  } function NPBRandomStream[315477](?).choice[315146](arg _mt[315513]:_MT[238], arg this[315511]:NPBRandomStream[315477](?), arg x[315143] :(315140 call chpl__buildArrayRuntimeType nil[44]), arg size[315151] : unknown sizeType[315148] = none[57], arg replace[315156] = 1, arg prob[315162] : unknown probType[315159] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315185 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315477](?).choice[315200](arg _mt[315517]:_MT[238], arg this[315515]:NPBRandomStream[315477](?), arg x[315197] :(315196 call range[64319](?)(stridable = ?[260])), arg size[315205] : unknown sizeType[315202] = none[57], arg replace[315210] = 1, arg prob[315216] : unknown probType[315213] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315223 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315477](?).choice[315234](arg _mt[315521]:_MT[238], arg this[315519]:NPBRandomStream[315477](?), arg x[315231] : _domain[125908](?), arg size[315239] : unknown sizeType[315236] = none[57], arg replace[315244] = 1, arg prob[315250] : unknown probType[315247] = none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(315257 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315477](?).iterate[315268](arg _mt[315525]:_MT[238], arg this[315523]:NPBRandomStream[315477](?), arg D[315265] : _domain[125908](?), arg resultType[315271]:_any[178](?) = real(64)[16]) : _unknown[51] "method" "primary method" "fn returns iterator"
  {(315276 call(408709 call . this[315523] c"_lock")) const start[315280] "const"(408714 call . this[315523] c"NPBRandomStreamPrivate_count")(315283 'end of statement')(315298 call +=(408719 call . this[315523] c"NPBRandomStreamPrivate_count")(315297 call(315289 call .(315286 call . D[315265] c"size") c"safeCast")(315295 call int(64)[13] 64)))(315307 call(408723 call . this[315523] c"NPBRandomStreamPrivate_skipToNth_noLock")(315304 call -(408728 call . this[315523] c"NPBRandomStreamPrivate_count") 1))(315311 call(408732 call . this[315523] c"_unlock"))(315320 return(315319 call NPBRandomPrivate_iterate resultType[315271] D[315265](408739 call . this[315523] c"seed") start[315280]))
  } function NPBRandomStream[315477](?).iterate[315330](arg _mt[315529]:_MT[238], arg this[315527]:NPBRandomStream[315477](?), arg D[315327] : _domain[125908](?), arg resultType[315333]:_any[178](?) = real(64)[16], param arg tag[315336]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  { const start[315346] "const"(408747 call . this[315527] c"NPBRandomStreamPrivate_count")(315349 'end of statement')(315359 return(315358 call NPBRandomPrivate_iterate resultType[315333] D[315327](408754 call . this[315527] c"seed") start[315346] tag[315336]))
  }
  {(315343 call == tag[315336] leader[447])
  } function NPBRandomStream[315477](?).writeThis[315368](arg _mt[315533]:_MT[238], arg this[315531]:NPBRandomStream[315477](?), arg f[315366]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides" "no return value for void"
  {(315372 call <~> f[315366] "NPBRandomStream(eltType=")(315381 call <~> f[315366](315379 call _cast string[26](408763 call . this[315531] c"eltType")))(315386 call <~> f[315366] ", parSafe=")(315391 call <~> f[315366](408770 call . this[315531] c"parSafe"))(315396 call <~> f[315366] ", seed=")(315401 call <~> f[315366](408777 call . this[315531] c"seed"))(315406 call <~> f[315366] ")")
  } function NPBRandomStream[315477](?)._lock[315423](arg _mt[315537]:_MT[238], arg this[315535]:NPBRandomStream[315477](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(315433 call _cond_test(408785 call . this[315535] c"parSafe"))
    {(315431 call(315427 call .(365276 call . this[315535] c"_l") c"lock"))
    }
  } function NPBRandomStream[315477](?)._unlock[315443](arg _mt[315541]:_MT[238], arg this[315539]:NPBRandomStream[315477](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(315453 call _cond_test(408790 call . this[315539] c"parSafe"))
    {(315451 call(315447 call .(365281 call . this[315539] c"_l") c"unlock"))
    }
  } type NPBRandomStream[315477](?) val super[355889]:object[22] "super class" unknown eltType[314496] "type variable"(314495 call real(64)[16] 64) const seed[314503] "const"(314502 call int(64)[13] 64) unknown parSafe[314509] "param" 1 bool[10] unknown _l[315417] "no doc"(315414 IfExpr  parSafe[314509] then
  { scopeless chpl_LocalSpinlock[187432]
  } else
  { scopeless nothing[7]
  } ) unknown NPBRandomStreamPrivate_cursor[315463] "no doc" seed[314503] real(64)[16] unknown NPBRandomStreamPrivate_count[315472] "no doc" 1(315470 call int(64)[13] 64) type NPBRandomStream[406992](?) const r23[315550] "const" "private"(315548 call ** 0.5 23) const t23[315557] "const" "private"(315555 call ** 2.0 23) const r46[315564] "const" "private"(315562 call ** 0.5 46) const t46[315571] "const" "private"(315569 call ** 2.0 46) const arand[315577] "const" "private" 1.2207e+09(315580 'end of statement') function randlc[315587](inout arg x[315584] : real(64)[16], arg a[315591] : real(64)[16] = arand[315577]) : _unknown[51] "private"
  { unknown t1[315599](315597 call * r23[315550] a[315591])(315602 'end of statement') const a1[315608] "const"(315607 call floor t1[315599]) const a2[315618] "const"(315616 call - a[315591](315614 call * t23[315557] a1[315608]))(315621 'end of statement')(315627 call = t1[315599](315625 call * r23[315550] x[315584])) const x1[315634] "const"(315633 call floor t1[315599]) const x2[315644] "const"(315642 call - x[315584](315640 call * t23[315557] x1[315634]))(315647 'end of statement')(315659 call = t1[315599](315657 call +(315651 call * a1[315608] x2[315644])(315655 call * a2[315618] x1[315634]))) const t2[315669] "const"(315668 call floor(315665 call * r23[315550] t1[315599])) const z[315679] "const"(315677 call - t1[315599](315675 call * t23[315557] t2[315669])) const t3[315692] "const"(315690 call +(315684 call * t23[315557] z[315679])(315688 call * a2[315618] x2[315644])) const t4[315702] "const"(315701 call floor(315698 call * r46[315564] t3[315692])) const x3[315712] "const"(315710 call - t3[315692](315708 call * t46[315571] t4[315702]))(315715 'end of statement')(315718 call = x[315584] x3[315712])(315725 return(315723 call * r46[315564] x3[315712]))
  } function randlc[315733](arg resultType[315731]:_any[178](?), inout arg x[315736] : real(64)[16]) : _unknown[51] "private"
  {
    if(315784 call _cond_test(315741 call == resultType[315731] complex(128)[140]))
    {(315757 return(315755 call _cast complex(128)[140](315752 call _build_tuple(315746 call randlc x[315736])(315750 call randlc x[315736]))))
    }
    {
      if(315778 call _cond_test(315761 call == resultType[315731] imag(64)[130]))
      {(315770 return(315769 call _r2i(315767 call randlc x[315736])))
      }
      {(315776 return(315775 call randlc x[315736]))
      }
    }
  } function randlc_skipto[315802](arg seed[315799] :(315798 call int(64)[13] 64), in arg n[315805] : integral[199](?)) : _unknown[51] "private"
  { unknown cursor[315813](315811 call _cast real(64)[16] seed[315799])(315816 'end of statement')(315820 call -= n[315805] 1) unknown t[315824] arand[315577](315827 'end of statement') arand[315577]
    { unknown tmp[315890] "temp"(315914 'move' tmp[315890](315909 call _cond_test(315911 call != n[315805] 0)))
      WhileDo[315895]
      {
        { const i[315838] "const"(315836 call / n[315805] 2)(315841 'end of statement')
          if(315856 call _cond_test(315848 call !=(315845 call * 2 i[315838]) n[315805]))
          {(315854 call randlc cursor[315813] t[315824])
          }
          if(315873 call _cond_test(315863 call == i[315838] 0))
          {
            break _breakLabel[315894] _breakLabel[315894]
          }
          {(315870 call = n[315805] i[315838])
          }(315883 call randlc t[315824] t[315824])(315887 call = n[315805] i[315838])
        } label _continueLabel[315893](315904 'move' tmp[315890](315899 call _cond_test(315901 call != n[315805] 0))) tmp[315890]
      } label _breakLabel[315894]
    }(315918 return cursor[315813])
  }
  { scopeless type real(64)[16]
  } function outer[315927](arg ranges[315925]:_any[178](?), param arg dim[315931] : int(64)[13] = 0) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(316099 call _cond_test(315943 call ==(315937 call + dim[315931] 2)(315940 call . ranges[315925] c"size")))
    {
      { unknown _indexOfInterest[315955] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315956] "expr temp" "temp"(315965 'move' _iterator[315956](315963 call _getIterator(315949 call ranges[315925] dim[315931])))
        Defer
        {
          {(315982 call _freeIterator _iterator[315956])
          }
        }
        { scopeless type(315971 'move' _indexOfInterest[315955](315968 call iteratorIndex _iterator[315956]))
        }
        ForLoop[315957]
        { unknown i[315975] "index var" "insert auto destroy"(315977 'move' i[315975] _indexOfInterest[315955])(315953 yield(315951 call _build_tuple i[315975])) label _continueLabel[315960] _indexOfInterest[315955] _iterator[315956]
        } label _breakLabel[315961]
      }
    }
    {
      if(316095 call _cond_test(315998 call <(315992 call + dim[315931] 2)(315995 call . ranges[315925] c"size")))
      {
        { unknown _indexOfInterest[316056] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316057] "expr temp" "temp"(316066 'move' _iterator[316057](316064 call _getIterator(316004 call ranges[315925] dim[315931])))
          Defer
          {
            {(316083 call _freeIterator _iterator[316057])
            }
          }
          { scopeless type(316072 'move' _indexOfInterest[316056](316069 call iteratorIndex _iterator[316057]))
          }
          ForLoop[316058]
          { unknown i[316076] "index var" "insert auto destroy"(316078 'move' i[316076] _indexOfInterest[316056])
            { unknown _indexOfInterest[316022] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316023] "expr temp" "temp"(316032 'move' _iterator[316023](316030 call _getIterator(316013 call outer ranges[315925](316011 call + dim[315931] 1))))
              Defer
              {
                {(316049 call _freeIterator _iterator[316023])
                }
              }
              { scopeless type(316038 'move' _indexOfInterest[316022](316035 call iteratorIndex _iterator[316023]))
              }
              ForLoop[316024]
              { unknown j[316042] "index var" "insert auto destroy"(316044 'move' j[316042] _indexOfInterest[316022])(316020 yield(316018 call _build_tuple i[316076](316016 'expand_tuple' j[316042]))) label _continueLabel[316027] _indexOfInterest[316022] _iterator[316023]
              } label _breakLabel[316028]
            } label _continueLabel[316061] _indexOfInterest[316056] _iterator[316057]
          } label _breakLabel[316062]
        }
      }
      {(316092 yield 0)
      }
    }
  } function NPBRandomPrivate_iterate[316111](arg resultType[316109]:_any[178](?), arg D[316114] : _domain[125908](?), arg seed[316121] :(316120 call int(64)[13] 64), arg start[316128] :(316127 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown cursor[316136](316135 call randlc_skipto seed[316121] start[316128])(316139 'end of statement')
    { unknown _indexOfInterest[316150] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316151] "expr temp" "temp"(316160 'move' _iterator[316151](316158 call _getIterator D[316114]))
      Defer
      {
        {(316176 call _freeIterator _iterator[316151])
        }
      }
      { scopeless type(316165 'move' _indexOfInterest[316150](316162 call iteratorIndex _iterator[316151]))
      }
      ForLoop[316152]
      { unknown i[316169] "index var" "insert auto destroy"(316171 'move' i[316169] _indexOfInterest[316150])(316148 yield(316147 call randlc resultType[316109] cursor[316136])) label _continueLabel[316155] _indexOfInterest[316150] _iterator[316151]
      } label _breakLabel[316156]
    }
  } function NPBRandomPrivate_iterate[316189](arg resultType[316187]:_any[178](?), arg D[316192] : _domain[125908](?), arg seed[316199] :(316198 call int(64)[13] 64), arg start[316206] :(316205 call int(64)[13] 64), param arg tag[316210] : iterKind[453]) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    { unknown _indexOfInterest[316235] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316236] "expr temp" "temp"(316245 'move' _iterator[316236](316243 call _getIterator(316231 call(316222 call . D[316192] c"these")(tag = leader[447]))))
      Defer
      {
        {(316262 call _freeIterator _iterator[316236])
        }
      }
      { scopeless type(316251 'move' _indexOfInterest[316235](316248 call iteratorIndex _iterator[316236]))
      }
      ForLoop[316237]
      { unknown block[316255] "index var" "insert auto destroy"(316257 'move' block[316255] _indexOfInterest[316235])(316233 yield block[316255]) label _continueLabel[316240] _indexOfInterest[316235] _iterator[316236]
      } label _breakLabel[316241]
    }
  }
  {(316218 call == tag[316210] leader[447])
  } function NPBRandomPrivate_iterate[316277](arg resultType[316275]:_any[178](?), arg D[316280] : _domain[125908](?), arg seed[316287] :(316286 call int(64)[13] 64), arg start[316294] :(316293 call int(64)[13] 64), param arg tag[316298] : iterKind[453], arg followThis[316301]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown multiplier[316323] "param"(316320 IfExpr (316316 call == resultType[316275] complex(128)[140]) then
    { scopeless 2
    } else
    { scopeless 1
    } )(316326 'end of statement') const ZD[316331] "const"(316330 call computeZeroBasedDomain D[316280])(316334 'end of statement') const innerRange[316345] "const"(316344 call followThis[316301](316341 call -(316337 call . ZD[316331] c"rank") 1))(316348 'end of statement') unknown cursor[316350] real(64)[16](316353 'end of statement')
    { unknown _indexOfInterest[316582] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316583] "expr temp" "temp"(316592 'move' _iterator[316583](316590 call _getIterator(316358 call outer followThis[316301])))
      Defer
      {
        {(316609 call _freeIterator _iterator[316583])
        }
      }
      { scopeless type(316598 'move' _indexOfInterest[316582](316595 call iteratorIndex _iterator[316583]))
      }
      ForLoop[316584]
      { unknown outer[316602] "index var" "insert auto destroy"(316604 'move' outer[316602] _indexOfInterest[316582])
        { unknown myStart[316360] start[316294](316363 'end of statement')
          if(316429 call _cond_test(316370 call >(316366 call . ZD[316331] c"rank") 1))
          {(316400 call += myStart[316360](316398 call * multiplier[316323](316397 call(316389 call .(316388 call(316375 call . ZD[316331] c"indexOrder")(316385 call _build_tuple(316379 'expand_tuple' outer[316602])(316381 call . innerRange[316345] c"low"))) c"safeCast")(316395 call int(64)[13] 64))))
          }
          {(316426 call += myStart[316360](316424 call * multiplier[316323](316423 call(316415 call .(316414 call(316406 call . ZD[316331] c"indexOrder")(316410 call . innerRange[316345] c"low")) c"safeCast")(316421 call int(64)[13] 64))))
          }
          if(316578 call _cond_test(316439 call !(316436 call . innerRange[316345] c"stridable")))
          {(316447 call = cursor[316350](316446 call randlc_skipto seed[316287] myStart[316360]))
            { unknown _indexOfInterest[316460] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316461] "expr temp" "temp"(316470 'move' _iterator[316461](316468 call _getIterator innerRange[316345]))
              Defer
              {
                {(316486 call _freeIterator _iterator[316461])
                }
              }
              { scopeless type(316475 'move' _indexOfInterest[316460](316472 call iteratorIndex _iterator[316461]))
              }
              ForLoop[316462]
              { unknown i[316479] "index var" "insert auto destroy"(316481 'move' i[316479] _indexOfInterest[316460])(316458 yield(316457 call randlc resultType[316275] cursor[316350])) label _continueLabel[316465] _indexOfInterest[316460] _iterator[316461]
              } label _breakLabel[316466]
            }
          }
          {(316507 call -= myStart[316360](316506 call(316498 call .(316495 call . innerRange[316345] c"low") c"safeCast")(316504 call int(64)[13] 64)))
            { unknown _indexOfInterest[316545] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316546] "expr temp" "temp"(316555 'move' _iterator[316546](316553 call _getIterator innerRange[316345]))
              Defer
              {
                {(316571 call _freeIterator _iterator[316546])
                }
              }
              { scopeless type(316560 'move' _indexOfInterest[316545](316557 call iteratorIndex _iterator[316546]))
              }
              ForLoop[316547]
              { unknown i[316564] "index var" "insert auto destroy"(316566 'move' i[316564] _indexOfInterest[316545])
                {(316534 call = cursor[316350](316533 call randlc_skipto seed[316287](316531 call + myStart[316360](316529 call *(316527 call(316519 call . i[316564] c"safeCast")(316525 call int(64)[13] 64)) multiplier[316323]))))(316543 yield(316542 call randlc resultType[316275] cursor[316350]))
                } label _continueLabel[316550] _indexOfInterest[316545] _iterator[316546]
              } label _breakLabel[316551]
            }
          }
        } label _continueLabel[316587] _indexOfInterest[316582] _iterator[316583]
      } label _breakLabel[316588]
    }(355663 'used modules list'(316311 'use' DSIUtil[230976]))
  }
  {(316308 call == tag[316298] follower[449])
  }(355657 'used modules list'(353179 'use' ChapelStandard[20267])(314485 'use' RandomSupport[307532])(314489 'use' ChapelLocks[187302]))
}