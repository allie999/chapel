AST dump for HeapSort after pass parse.
Module use list: 

{
  (353131 'use' ChapelStandard)
  (269732 'import' Sort.{defaultComparator, chpl_check_comparator, chpl_compare})
  function heapSort[269747](arg Data[269744] :
  (269742 call chpl__buildArrayRuntimeType unknown Dom[269737] unknown eltType[269740]), arg comparator[269752] :
  unknown rec[269749] =
  defaultComparator) : _unknown[51]
  {
    (269760 call chpl_check_comparator comparator eltType)
    if(269792 call _cond_test(269768 call !=(269764 call . Dom c"rank") 1))
    {
      (269789 call compilerError "heapSort() requires 1-D array")
    }
    { scopeless
      const low[269800] "const"(269797 call . Dom c"alignedLow")
      const high[269807] "const"(269804 call . Dom c"alignedHigh")
      const size[269814] "const"(269811 call . Dom c"size")
      const stride[269824] "const"(269823 call abs(269819 call . Dom c"stride"))
      (269827 'end of statement')
    }
    { scopeless
      unknown start[269869](269866 IfExpr (269830 call == high low) then
      { scopeless
        high
      } else
      { scopeless(269863 IfExpr (269835 call % size 2) then
        { scopeless
          (269848 call + low(269846 call *(269843 call /(269840 call - size 1) 2) stride))
        } else
        { scopeless
          (269861 call + low(269859 call *(269856 call -(269853 call / size 2) 1) stride))
        } )
      } )
      (269872 'end of statement')
    }
    {
      unknown tmp[269893] "temp"
      (269917 'move' tmp[269893](269912 call _cond_test(269914 call >= start low)))
      WhileDo[269898]
      {
        {
          (269882 call SiftDown start high comparator)
          (269890 call = start(269888 call - start stride))
        }
        label _continueLabel[269896]
        (269907 'move' tmp[269893](269902 call _cond_test(269904 call >= start low)))
        tmp[269893]
      }
      label _breakLabel[269897]
    }
    { scopeless
      unknown end[269921] high
      (269924 'end of statement')
    }
    {
      unknown tmp[269956] "temp"
      (269980 'move' tmp[269956](269975 call _cond_test(269977 call > end low)))
      WhileDo[269961]
      {
        {
          (269937 call <=>(269932 call Data end)(269936 call Data low))
          (269946 call = end(269944 call - end stride))
          (269954 call SiftDown low end comparator)
        }
        label _continueLabel[269959]
        (269970 'move' tmp[269956](269965 call _cond_test(269967 call > end low)))
        tmp[269956]
      }
      label _breakLabel[269960]
    }
    function SiftDown[269987](arg start[269985]:_any[178](?), arg end[269989]:_any[178](?), arg comparator[269994] :
    unknown rec[269991] =
    defaultComparator) : _unknown[51]
    {
      { scopeless
        unknown root[269999] start
        (270002 'end of statement')
      }
      {
        unknown tmp[270130] "temp"
        (270172 'move' tmp[270130](270158 call _cond_test(270160 call <=(270162 call +(270164 call -(270166 call * 2 root) low) stride) end)))
        WhileDo[270135]
        {
          {
            { scopeless
              const child[270027] "const"(270025 call +(270022 call -(270019 call * 2 root) low) stride)
              (270030 'end of statement')
            }
            { scopeless
              unknown swap[270033] root
              (270036 'end of statement')
            }
            if(270057 call _cond_test(270050 call <(270048 call chpl_compare(270041 call Data swap)(270046 call Data child) comparator) 0))
            {
              { scopeless
                (270054 call = swap child)
              }
            }
            if(270097 call _cond_test(270087 call &&(270067 call <=(270064 call + child stride) end)(270085 call <(270083 call chpl_compare(270073 call Data swap)(270081 call Data(270078 call + child stride)) comparator) 0)))
            {
              { scopeless
                (270094 call = swap(270092 call + child stride))
              }
            }
            if(270126 call _cond_test(270104 call != swap root))
            {
              (270114 call <=>(270109 call Data root)(270113 call Data swap))
              (270120 call = root swap)
            }
            {
              (270123 return)
            }
          }
          label _continueLabel[270133]
          (270153 'move' tmp[270130](270139 call _cond_test(270141 call <=(270143 call +(270145 call -(270147 call * 2 root) low) stride) end)))
          tmp[270130]
        }
        label _breakLabel[270134]
      }
    }
  }
}