AST dump for QuickSort after pass scopeResolve.
Module use list: ChapelStandard Sort ShallowCopy InsertionSort 

{
  function partition[272064](arg Data[272061] :
  (272059 call chpl__buildArrayRuntimeType unknown Dom[272054] unknown eltType[272057]), arg lo[272067] :
  int(64)[13], arg pivIdx[272071] :
  int(64)[13], arg hi[272075] :
  int(64)[13], arg comparator[272078]:_any[178](?)) : _unknown[51]
  {
    unknown a[272081] lo[272067]
    (272084 'end of statement')
    unknown b[272087] lo[272067]
    (272090 'end of statement')
    unknown c[272092] hi[272075]
    (272095 'end of statement')
    unknown d[272097] hi[272075]
    (272100 'end of statement')
    if(272122 call _cond_test(272103 call != lo[272067] pivIdx[272071]))
    {
      (272120 call shallowSwap module=[255] ShallowCopy[277381](272114 call Data[272061] lo[272067])(272119 call Data[272061] pivIdx[272071]))
      (364200 'referenced modules list' ShallowCopy[277381])
    }
    (272129 call += a[272081] 1)
    (272134 call += b[272087] 1)
    unknown piv[272148] "no auto destroy"(272147 call shallowCopyInit module=[255] ShallowCopy[277381](272145 call Data[272061] lo[272067])) eltType[272057]
    (272151 'end of statement')
    {
      unknown tmp[272382] "temp"
      (272400 'move' tmp[272382](272398 call _cond_test 1))
      WhileDo[272387]
      {
        {
          {
            unknown tmp[272226] "temp"
            (272250 'move' tmp[272226](272245 call _cond_test(272247 call <= b[272087] c[272092])))
            WhileDo[272231]
            {
              {
                unknown cmp[272166](272165 call chpl_compare(272161 call Data[272061] b[272087]) piv[272148] comparator[272078])
                (272169 'end of statement')
                if(272178 call _cond_test(272173 call > cmp[272166] 0))
                {
                  break _breakLabel[272230] _breakLabel[272230]
                }
                if(272217 call _cond_test(272185 call == cmp[272166] 0))
                {
                  if(272207 call _cond_test(272189 call != a[272081] b[272087]))
                  {
                    (272204 call shallowSwap module=[255] ShallowCopy[277381](272198 call Data[272061] a[272081])(272203 call Data[272061] b[272087]))
                    (364212 'referenced modules list' ShallowCopy[277381])
                  }
                  (272214 call += a[272081] 1)
                }
                (272223 call += b[272087] 1)
              }
              label _continueLabel[272229]
              (272240 'move' tmp[272226](272235 call _cond_test(272237 call <= b[272087] c[272092])))
              tmp[272226]
            }
            label _breakLabel[272230]
          }
          {
            unknown tmp[272318] "temp"
            (272342 'move' tmp[272318](272337 call _cond_test(272339 call >= c[272092] b[272087])))
            WhileDo[272323]
            {
              {
                unknown cmp[272267](272266 call chpl_compare(272262 call Data[272061] c[272092]) piv[272148] comparator[272078])
                (272270 'end of statement')
                if(272279 call _cond_test(272274 call < cmp[272267] 0))
                {
                  break _breakLabel[272322] _breakLabel[272322]
                }
                if(272309 call _cond_test(272286 call == cmp[272267] 0))
                {
                  (272301 call shallowSwap module=[255] ShallowCopy[277381](272295 call Data[272061] d[272097])(272300 call Data[272061] c[272092]))
                  (272306 call -= d[272097] 1)
                  (364218 'referenced modules list' ShallowCopy[277381])
                }
                (272315 call -= c[272092] 1)
              }
              label _continueLabel[272321]
              (272332 'move' tmp[272318](272327 call _cond_test(272329 call >= c[272092] b[272087])))
              tmp[272318]
            }
            label _breakLabel[272322]
          }
          if(272352 call _cond_test(272347 call > b[272087] c[272092]))
          {
            break _breakLabel[272386] _breakLabel[272386]
          }
          (272370 call shallowSwap module=[255] ShallowCopy[277381](272364 call Data[272061] b[272087])(272369 call Data[272061] c[272092]))
          (272374 call += b[272087] 1)
          (272379 call -= c[272092] 1)
          (364224 'referenced modules list' ShallowCopy[277381])
        }
        label _continueLabel[272385]
        (272393 'move' tmp[272382](272391 call _cond_test 1))
        tmp[272382]
      }
      label _breakLabel[272386]
    }
    (272413 call shallowCopy module=[255] ShallowCopy[277381](272410 call Data[272061] lo[272067]) piv[272148])
    unknown s[272415] int(64)[13]
    unknown l[272418](272428 'typeof' s[272415])
    unknown h[272422](272426 'typeof' l[272418])
    (272429 'end of statement')
    (272442 call = s[272415](272441 call min(272434 call - a[272081] lo[272067])(272439 call - b[272087] a[272081])))
    (272447 call = l[272418] lo[272067])
    (272455 call = h[272422](272453 call - b[272087] s[272415]))
    {
      unknown tmp[272493] "temp"
      (272517 'move' tmp[272493](272512 call _cond_test(272514 call > s[272415] 0)))
      WhileDo[272498]
      {
        {
          (272475 call shallowSwap module=[255] ShallowCopy[277381](272469 call Data[272061] l[272418])(272474 call Data[272061] h[272422]))
          (272480 call += l[272418] 1)
          (272485 call += h[272422] 1)
          (272490 call -= s[272415] 1)
          (364235 'referenced modules list' ShallowCopy[277381])
        }
        label _continueLabel[272496]
        (272507 'move' tmp[272493](272502 call _cond_test(272504 call > s[272415] 0)))
        tmp[272493]
      }
      label _breakLabel[272497]
    }
    unknown n[272524](272522 call + hi[272075] 1)
    (272527 'end of statement')
    (272540 call = s[272415](272539 call min(272532 call - d[272097] c[272092])(272537 call - hi[272075] d[272097])))
    (272545 call = l[272418] b[272087])
    (272553 call = h[272422](272551 call - n[272524] s[272415]))
    {
      unknown tmp[272591] "temp"
      (272615 'move' tmp[272591](272610 call _cond_test(272612 call > s[272415] 0)))
      WhileDo[272596]
      {
        {
          (272573 call shallowSwap module=[255] ShallowCopy[277381](272567 call Data[272061] l[272418])(272572 call Data[272061] h[272422]))
          (272578 call += l[272418] 1)
          (272583 call += h[272422] 1)
          (272588 call -= s[272415] 1)
          (364241 'referenced modules list' ShallowCopy[277381])
        }
        label _continueLabel[272594]
        (272605 'move' tmp[272591](272600 call _cond_test(272602 call > s[272415] 0)))
        tmp[272591]
      }
      label _breakLabel[272595]
    }
    unknown eqStart[272625](272623 call +(272620 call - b[272087] a[272081]) lo[272067])
    (272628 'end of statement')
    unknown eqEnd[272636](272634 call - hi[272075](272632 call - d[272097] c[272092]))
    (272639 'end of statement')
    (272645 return(272643 call _build_tuple eqStart[272625] eqEnd[272636]))
    (364206 'referenced modules list' ShallowCopy[277381] ShallowCopy[277381])
  }
  function order3[272661](arg Data[272658] :
  (272656 call chpl__buildArrayRuntimeType unknown Dom[272651] unknown eltType[272654]), arg lo[272664] :
  int(64)[13], arg mid[272668] :
  int(64)[13], arg hi[272672] :
  int(64)[13], arg comparator[272675]:_any[178](?)) : _unknown[51]
  {
    if(272797 call _cond_test(272691 call <(272689 call chpl_compare(272682 call Data[272658] lo[272664])(272687 call Data[272658] mid[272668]) comparator[272675]) 0))
    {
      if(272739 call _cond_test(272706 call <(272704 call chpl_compare(272697 call Data[272658] hi[272672])(272702 call Data[272658] lo[272664]) comparator[272675]) 0))
      {
        (272709 return lo[272664])
      }
      {
        if(272735 call _cond_test(272725 call <(272723 call chpl_compare(272716 call Data[272658] mid[272668])(272721 call Data[272658] hi[272672]) comparator[272675]) 0))
        {
          (272728 return mid[272668])
        }
        {
          (272732 return hi[272672])
        }
      }
    }
    {
      if(272791 call _cond_test(272758 call <(272756 call chpl_compare(272749 call Data[272658] lo[272664])(272754 call Data[272658] hi[272672]) comparator[272675]) 0))
      {
        (272761 return lo[272664])
      }
      {
        if(272787 call _cond_test(272777 call <(272775 call chpl_compare(272768 call Data[272658] hi[272672])(272773 call Data[272658] mid[272668]) comparator[272675]) 0))
        {
          (272780 return mid[272668])
        }
        {
          (272784 return hi[272672])
        }
      }
    }
  }
  { scopeless type
    int(64)[13]
  }
  function quickSort[272817](arg Data[272814] :
  (272812 call chpl__buildArrayRuntimeType unknown Dom[272807] unknown eltType[272810]), arg minlen[272820] =
  16, arg comparator[272826] :
  unknown rec[272823] =
  defaultComparator[267977]) : _unknown[51] "no return value for void"
  {
    (272834 call chpl_check_comparator comparator[272826] eltType[272810])
    if(272866 call _cond_test(272842 call !=(272838 call . Dom[272807] c"rank") 1))
    {
      (272863 call compilerError "quickSort() requires 1-D array")
    }
    if(272931 call _cond_test(272881 call &&(272871 call . Dom[272807] c"stridable")(272879 call !=(272875 call . Dom[272807] c"stride") 1)))
    {
      unknown reindexed[272903] "ref var"(272902 call(272886 call . Data[272814] c"reindex")(272899 call #(272893 call chpl_build_low_bounded_range(272890 call . Dom[272807] c"alignedLow"))(272896 call . Dom[272807] c"size")))
      (272906 'end of statement')
      (272920 call assert(272917 call ==(272913 call .(272910 call . reindexed[272903] c"_dom") c"stride") 1))
      (272927 call quickSortImpl reindexed[272903] minlen[272820] comparator[272826])
      (272929 return _void[55])
    }
    (272944 call assert(272941 call ==(272937 call . Dom[272807] c"stride") 1))
    (272951 call quickSortImpl Data[272814] minlen[272820] comparator[272826])
  }
  function quickSortImpl[272967](arg Data[272964] :
  (272962 call chpl__buildArrayRuntimeType unknown Dom[272957] unknown eltType[272960]), arg minlen[272970] =
  16, arg comparator[272976] :
  unknown rec[272973] =
  defaultComparator[267977], arg start[272985] :
  int(64)[13] =
  (272982 call . Dom[272957] c"low"), arg end[272994] :
  int(64)[13] =
  (272991 call . Dom[272957] c"high")) : _unknown[51] "no return value for void"
  {
    const lo[273006] "const" start[272985]
    const hi[273010] "const" end[272994]
    const mid[273026] "const"(273024 call + lo[273006](273022 call /(273019 call +(273016 call - hi[273010] lo[273006]) 1) 2))
    (273029 'end of statement')
    unknown piv[273031] mid[273026]
    (273034 'end of statement')
    if(273070 call _cond_test(273040 call <(273037 call - hi[273010] lo[273006]) 0))
    {
      (273054 call insertionSortMoveElts module=[255] InsertionSort[270092] Data[272964](comparator = comparator[272976]) lo[273006] hi[273010])
      (273057 return _void[55])
      (364257 'referenced modules list' InsertionSort[270092])
    }
    {
      if(273066 call _cond_test(273061 call <= hi[273010] lo[273006]))
      {
        (273063 return _void[55])
      }
    }
    if(273162 call _cond_test(273080 call <(273077 call - hi[273010] lo[273006]) 100))
    {
      (273091 call = piv[273031](273090 call order3 Data[272964] lo[273006] mid[273026] hi[273010] comparator[272976]))
    }
    {
      const medLo[273109] "const"(273108 call order3 Data[272964] lo[273006](273101 call + lo[273006] 1)(273105 call + lo[273006] 2) comparator[272976])
      (273112 'end of statement')
      const medMid[273128] "const"(273127 call order3 Data[272964](273119 call - mid[273026] 1) mid[273026](273124 call + mid[273026] 1) comparator[272976])
      (273131 'end of statement')
      const medHi[273146] "const"(273145 call order3 Data[272964](273137 call - hi[273010] 2)(273141 call - hi[273010] 1) hi[273010] comparator[272976])
      (273149 'end of statement')
      (273159 call = piv[273031](273158 call order3 Data[272964] medLo[273109] medMid[273128] medHi[273146] comparator[272976]))
    }
    unknown tmp[273179] "temp"(273178 call partition Data[272964] lo[273006] piv[273031] hi[273010] comparator[272976])
    (273186 call _check_tuple_var_decl tmp[273179] 2)
    unknown eqStart[273166](273180 call tmp[273179] 0)
    unknown eqEnd[273168](273183 call tmp[273179] 1)
    (273191 'end of statement')
    if(273271 call _cond_test(273199 call <(273194 call - hi[273010] lo[273006]) 300))
    {
      (273211 call quickSortImpl Data[272964] minlen[272970] comparator[272976] lo[273006](273209 call - eqStart[273166] 1))
      (273224 call quickSortImpl Data[272964] minlen[272970] comparator[272976](273221 call + eqEnd[273168] 1) hi[273010])
    }
    {
      Forall {
        induction variables:
          
          unknown i[273267] "index var" "insert auto destroy"
        iterated expressions:
          (273229 call chpl_build_bounded_range 1 2)
        shadow variables:
        other variables
          forall body
        {
          if(273259 call _cond_test(273233 call == i[273267] 1))
          {
            (273245 call quickSortImpl Data[272964] minlen[272970] comparator[272976] lo[273006](273243 call - eqStart[273166] 1))
          }
          {
            (273257 call quickSortImpl Data[272964] minlen[272970] comparator[272976](273254 call + eqEnd[273168] 1) hi[273010])
          }
        }
      }
    }
    (355353 'used modules list'(273002 'import' InsertionSort[270092]))
  }
  (355349 'used modules list'(353030 'use' ChapelStandard[20264])(272041 'use' Sort[267968])(272050 'use' ShallowCopy[277381]))
}