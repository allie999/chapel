AST dump for QuickSort after pass scopeResolve.
Module use list: ChapelStandard Sort ShallowCopy InsertionSort 

{
  function partition[272153](arg Data[272150] :
  (272148 call chpl__buildArrayRuntimeType unknown Dom[272143] unknown eltType[272146]), arg lo[272156] :
  int(64)[13], arg pivIdx[272160] :
  int(64)[13], arg hi[272164] :
  int(64)[13], arg comparator[272167]:_any[178](?)) : _unknown[51]
  {
    unknown a[272170] lo[272156]
    (272173 'end of statement')
    unknown b[272176] lo[272156]
    (272179 'end of statement')
    unknown c[272181] hi[272164]
    (272184 'end of statement')
    unknown d[272186] hi[272164]
    (272189 'end of statement')
    if(272211 call _cond_test(272192 call != lo[272156] pivIdx[272160]))
    {
      (272209 call shallowSwap module=[255] ShallowCopy[277471](272203 call Data[272150] lo[272156])(272208 call Data[272150] pivIdx[272160]))
      (364311 'referenced modules list' ShallowCopy[277471])
    }
    (272218 call += a[272170] 1)
    (272223 call += b[272176] 1)
    unknown piv[272237] "no auto destroy"(272236 call shallowCopyInit module=[255] ShallowCopy[277471](272234 call Data[272150] lo[272156])) eltType[272146]
    (272240 'end of statement')
    {
      unknown tmp[272471] "temp"
      (272489 'move' tmp[272471](272487 call _cond_test 1))
      WhileDo[272476]
      {
        {
          {
            unknown tmp[272315] "temp"
            (272339 'move' tmp[272315](272334 call _cond_test(272336 call <= b[272176] c[272181])))
            WhileDo[272320]
            {
              {
                unknown cmp[272255](272254 call chpl_compare(272250 call Data[272150] b[272176]) piv[272237] comparator[272167])
                (272258 'end of statement')
                if(272267 call _cond_test(272262 call > cmp[272255] 0))
                {
                  break _breakLabel[272319] _breakLabel[272319]
                }
                if(272306 call _cond_test(272274 call == cmp[272255] 0))
                {
                  if(272296 call _cond_test(272278 call != a[272170] b[272176]))
                  {
                    (272293 call shallowSwap module=[255] ShallowCopy[277471](272287 call Data[272150] a[272170])(272292 call Data[272150] b[272176]))
                    (364323 'referenced modules list' ShallowCopy[277471])
                  }
                  (272303 call += a[272170] 1)
                }
                (272312 call += b[272176] 1)
              }
              label _continueLabel[272318]
              (272329 'move' tmp[272315](272324 call _cond_test(272326 call <= b[272176] c[272181])))
              tmp[272315]
            }
            label _breakLabel[272319]
          }
          {
            unknown tmp[272407] "temp"
            (272431 'move' tmp[272407](272426 call _cond_test(272428 call >= c[272181] b[272176])))
            WhileDo[272412]
            {
              {
                unknown cmp[272356](272355 call chpl_compare(272351 call Data[272150] c[272181]) piv[272237] comparator[272167])
                (272359 'end of statement')
                if(272368 call _cond_test(272363 call < cmp[272356] 0))
                {
                  break _breakLabel[272411] _breakLabel[272411]
                }
                if(272398 call _cond_test(272375 call == cmp[272356] 0))
                {
                  (272390 call shallowSwap module=[255] ShallowCopy[277471](272384 call Data[272150] d[272186])(272389 call Data[272150] c[272181]))
                  (272395 call -= d[272186] 1)
                  (364329 'referenced modules list' ShallowCopy[277471])
                }
                (272404 call -= c[272181] 1)
              }
              label _continueLabel[272410]
              (272421 'move' tmp[272407](272416 call _cond_test(272418 call >= c[272181] b[272176])))
              tmp[272407]
            }
            label _breakLabel[272411]
          }
          if(272441 call _cond_test(272436 call > b[272176] c[272181]))
          {
            break _breakLabel[272475] _breakLabel[272475]
          }
          (272459 call shallowSwap module=[255] ShallowCopy[277471](272453 call Data[272150] b[272176])(272458 call Data[272150] c[272181]))
          (272463 call += b[272176] 1)
          (272468 call -= c[272181] 1)
          (364335 'referenced modules list' ShallowCopy[277471])
        }
        label _continueLabel[272474]
        (272482 'move' tmp[272471](272480 call _cond_test 1))
        tmp[272471]
      }
      label _breakLabel[272475]
    }
    (272502 call shallowCopy module=[255] ShallowCopy[277471](272499 call Data[272150] lo[272156]) piv[272237])
    unknown s[272504] int(64)[13]
    unknown l[272507](272517 'typeof' s[272504])
    unknown h[272511](272515 'typeof' l[272507])
    (272518 'end of statement')
    (272531 call = s[272504](272530 call min(272523 call - a[272170] lo[272156])(272528 call - b[272176] a[272170])))
    (272536 call = l[272507] lo[272156])
    (272544 call = h[272511](272542 call - b[272176] s[272504]))
    {
      unknown tmp[272582] "temp"
      (272606 'move' tmp[272582](272601 call _cond_test(272603 call > s[272504] 0)))
      WhileDo[272587]
      {
        {
          (272564 call shallowSwap module=[255] ShallowCopy[277471](272558 call Data[272150] l[272507])(272563 call Data[272150] h[272511]))
          (272569 call += l[272507] 1)
          (272574 call += h[272511] 1)
          (272579 call -= s[272504] 1)
          (364346 'referenced modules list' ShallowCopy[277471])
        }
        label _continueLabel[272585]
        (272596 'move' tmp[272582](272591 call _cond_test(272593 call > s[272504] 0)))
        tmp[272582]
      }
      label _breakLabel[272586]
    }
    unknown n[272613](272611 call + hi[272164] 1)
    (272616 'end of statement')
    (272629 call = s[272504](272628 call min(272621 call - d[272186] c[272181])(272626 call - hi[272164] d[272186])))
    (272634 call = l[272507] b[272176])
    (272642 call = h[272511](272640 call - n[272613] s[272504]))
    {
      unknown tmp[272680] "temp"
      (272704 'move' tmp[272680](272699 call _cond_test(272701 call > s[272504] 0)))
      WhileDo[272685]
      {
        {
          (272662 call shallowSwap module=[255] ShallowCopy[277471](272656 call Data[272150] l[272507])(272661 call Data[272150] h[272511]))
          (272667 call += l[272507] 1)
          (272672 call += h[272511] 1)
          (272677 call -= s[272504] 1)
          (364352 'referenced modules list' ShallowCopy[277471])
        }
        label _continueLabel[272683]
        (272694 'move' tmp[272680](272689 call _cond_test(272691 call > s[272504] 0)))
        tmp[272680]
      }
      label _breakLabel[272684]
    }
    unknown eqStart[272714](272712 call +(272709 call - b[272176] a[272170]) lo[272156])
    (272717 'end of statement')
    unknown eqEnd[272725](272723 call - hi[272164](272721 call - d[272186] c[272181]))
    (272728 'end of statement')
    (272734 return(272732 call _build_tuple eqStart[272714] eqEnd[272725]))
    (364317 'referenced modules list' ShallowCopy[277471] ShallowCopy[277471])
  }
  function order3[272750](arg Data[272747] :
  (272745 call chpl__buildArrayRuntimeType unknown Dom[272740] unknown eltType[272743]), arg lo[272753] :
  int(64)[13], arg mid[272757] :
  int(64)[13], arg hi[272761] :
  int(64)[13], arg comparator[272764]:_any[178](?)) : _unknown[51]
  {
    if(272886 call _cond_test(272780 call <(272778 call chpl_compare(272771 call Data[272747] lo[272753])(272776 call Data[272747] mid[272757]) comparator[272764]) 0))
    {
      if(272828 call _cond_test(272795 call <(272793 call chpl_compare(272786 call Data[272747] hi[272761])(272791 call Data[272747] lo[272753]) comparator[272764]) 0))
      {
        (272798 return lo[272753])
      }
      {
        if(272824 call _cond_test(272814 call <(272812 call chpl_compare(272805 call Data[272747] mid[272757])(272810 call Data[272747] hi[272761]) comparator[272764]) 0))
        {
          (272817 return mid[272757])
        }
        {
          (272821 return hi[272761])
        }
      }
    }
    {
      if(272880 call _cond_test(272847 call <(272845 call chpl_compare(272838 call Data[272747] lo[272753])(272843 call Data[272747] hi[272761]) comparator[272764]) 0))
      {
        (272850 return lo[272753])
      }
      {
        if(272876 call _cond_test(272866 call <(272864 call chpl_compare(272857 call Data[272747] hi[272761])(272862 call Data[272747] mid[272757]) comparator[272764]) 0))
        {
          (272869 return mid[272757])
        }
        {
          (272873 return hi[272761])
        }
      }
    }
  }
  { scopeless type
    int(64)[13]
  }
  function quickSort[272906](arg Data[272903] :
  (272901 call chpl__buildArrayRuntimeType unknown Dom[272896] unknown eltType[272899]), arg minlen[272909] =
  16, arg comparator[272915] :
  unknown rec[272912] =
  defaultComparator[268065]) : _unknown[51] "no return value for void"
  {
    (272923 call chpl_check_comparator comparator[272915] eltType[272899])
    if(272955 call _cond_test(272931 call !=(272927 call . Dom[272896] c"rank") 1))
    {
      (272952 call compilerError "quickSort() requires 1-D array")
    }
    if(273020 call _cond_test(272970 call &&(272960 call . Dom[272896] c"stridable")(272968 call !=(272964 call . Dom[272896] c"stride") 1)))
    {
      unknown reindexed[272992] "ref var"(272991 call(272975 call . Data[272903] c"reindex")(272988 call #(272982 call chpl_build_low_bounded_range(272979 call . Dom[272896] c"alignedLow"))(272985 call . Dom[272896] c"size")))
      (272995 'end of statement')
      (273009 call assert(273006 call ==(273002 call .(272999 call . reindexed[272992] c"_dom") c"stride") 1))
      (273016 call quickSortImpl reindexed[272992] minlen[272909] comparator[272915])
      (273018 return _void[55])
    }
    (273033 call assert(273030 call ==(273026 call . Dom[272896] c"stride") 1))
    (273040 call quickSortImpl Data[272903] minlen[272909] comparator[272915])
  }
  function quickSortImpl[273056](arg Data[273053] :
  (273051 call chpl__buildArrayRuntimeType unknown Dom[273046] unknown eltType[273049]), arg minlen[273059] =
  16, arg comparator[273065] :
  unknown rec[273062] =
  defaultComparator[268065], arg start[273074] :
  int(64)[13] =
  (273071 call . Dom[273046] c"low"), arg end[273083] :
  int(64)[13] =
  (273080 call . Dom[273046] c"high")) : _unknown[51] "no return value for void"
  {
    const lo[273095] "const" start[273074]
    const hi[273099] "const" end[273083]
    const mid[273115] "const"(273113 call + lo[273095](273111 call /(273108 call +(273105 call - hi[273099] lo[273095]) 1) 2))
    (273118 'end of statement')
    unknown piv[273120] mid[273115]
    (273123 'end of statement')
    if(273159 call _cond_test(273129 call <(273126 call - hi[273099] lo[273095]) 0))
    {
      (273143 call insertionSortMoveElts module=[255] InsertionSort[270181] Data[273053](comparator = comparator[273065]) lo[273095] hi[273099])
      (273146 return _void[55])
      (364368 'referenced modules list' InsertionSort[270181])
    }
    {
      if(273155 call _cond_test(273150 call <= hi[273099] lo[273095]))
      {
        (273152 return _void[55])
      }
    }
    if(273251 call _cond_test(273169 call <(273166 call - hi[273099] lo[273095]) 100))
    {
      (273180 call = piv[273120](273179 call order3 Data[273053] lo[273095] mid[273115] hi[273099] comparator[273065]))
    }
    {
      const medLo[273198] "const"(273197 call order3 Data[273053] lo[273095](273190 call + lo[273095] 1)(273194 call + lo[273095] 2) comparator[273065])
      (273201 'end of statement')
      const medMid[273217] "const"(273216 call order3 Data[273053](273208 call - mid[273115] 1) mid[273115](273213 call + mid[273115] 1) comparator[273065])
      (273220 'end of statement')
      const medHi[273235] "const"(273234 call order3 Data[273053](273226 call - hi[273099] 2)(273230 call - hi[273099] 1) hi[273099] comparator[273065])
      (273238 'end of statement')
      (273248 call = piv[273120](273247 call order3 Data[273053] medLo[273198] medMid[273217] medHi[273235] comparator[273065]))
    }
    unknown tmp[273268] "temp"(273267 call partition Data[273053] lo[273095] piv[273120] hi[273099] comparator[273065])
    (273275 call _check_tuple_var_decl tmp[273268] 2)
    unknown eqStart[273255](273269 call tmp[273268] 0)
    unknown eqEnd[273257](273272 call tmp[273268] 1)
    (273280 'end of statement')
    if(273361 call _cond_test(273288 call <(273283 call - hi[273099] lo[273095]) 300))
    {
      (273300 call quickSortImpl Data[273053] minlen[273059] comparator[273065] lo[273095](273298 call - eqStart[273255] 1))
      (273313 call quickSortImpl Data[273053] minlen[273059] comparator[273065](273310 call + eqEnd[273257] 1) hi[273099])
    }
    {
      Forall {
        induction variables:
          
          unknown i[273356] "index var" "insert auto destroy"
        iterated expressions:
          (273318 call chpl_build_bounded_range 1 2)
        shadow variables:
        other variables
          forall body
        {
          if(273348 call _cond_test(273322 call == i[273356] 1))
          {
            (273334 call quickSortImpl Data[273053] minlen[273059] comparator[273065] lo[273095](273332 call - eqStart[273255] 1))
          }
          {
            (273346 call quickSortImpl Data[273053] minlen[273059] comparator[273065](273343 call + eqEnd[273257] 1) hi[273099])
          }
        }
      }
    }
    (355464 'used modules list'(273091 'import' InsertionSort[270181]))
  }
  (355460 'used modules list'(353139 'use' ChapelStandard[20267])(272130 'use' Sort[268056])(272139 'use' ShallowCopy[277471]))
}