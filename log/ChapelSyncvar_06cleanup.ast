AST dump for ChapelSyncvar after pass cleanup.
Module use list: 

{
  (84290 'use' ChapelStandard)
  (84294 'use' AlignedTSupport)
  (84297 'use' MemConsistency)
  (84300 'use' SyncVarRuntimeSupport)
  function isSupported[84306](arg t[84304]:_any[178](?)) param : _unknown[51] "private"
  {
    (84360 return(84358 call ||(84352 call ||(84346 call ||(84340 call ||(84334 call ||(84328 call ||(84322 call ||(84316 call ||(84311 call isNothingType t)(84315 call isBoolType t))(84321 call isIntegralType t))(84327 call isRealType t))(84333 call isImagType t))(84339 call isEnumType t))(84345 call isClassType t))(84351 call isStringType t))(84356 call == t chpl_taskID_t)))
  }
  function ensureFEType[84369](arg t[84367]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(84420 call _cond_test(84376 call ==(84374 call isSupported t) 0))
    {
      (84418 call compilerError "sync/single types cannot contain type '"(84399 call _cast string[26] t) "'")
    }
    if(84451 call _cond_test(84429 call isNonNilableClass t))
    {
      (84449 call compilerError "sync/single types cannot contain non-nilable classes")
    }
    if(84481 call _cond_test(84459 call isGenericType t))
    {
      (84479 call compilerError "sync/single types cannot contain generic types")
    }
  }
  unknown useNativeSyncVar[84489] "config" "no doc" "param" 1
  (84492 'end of statement')
  function getSyncClassType[84497](arg valType[84495]:_any[178](?)) type : _unknown[51] "private"
  {
    if(84522 call _cond_test(84504 call && useNativeSyncVar(84503 call supportsNativeSyncVar valType)))
    {
      (84511 return(84510 'to unmanaged class from unknown'(84509 call _qthreads_synccls valType)))
    }
    {
      (84519 return(84518 'to unmanaged class from unknown'(84517 call _synccls valType)))
    }
  }
  function chpl__readXX[84533](arg x[84531]:_any[178](?)) : _unknown[51] "no doc"
  {
    (84536 return x)
  }
  function _syncvar[84944](?).init[84563](arg _mt[84948]:_MT[238], arg this[84946]:_syncvar[84944](?), arg valType[84561]:_any[178](?)) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (84568 call ensureFEType valType)
    (84578 call =(84574 call . this c"valType") valType)
    (84594 call =(84584 call . this c"wrapped")(84587 'new'(84593 call(84591 call getSyncClassType valType))))
  }
  function _syncvar[84944](?).init[84605](arg _mt[84952]:_MT[238], arg this[84950]:_syncvar[84944](?), const arg other[84602] :
  _syncvar) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (84615 call =(84608 call . this c"valType")(84612 call . other c"valType"))
    (84627 call =(84620 call . this c"wrapped")(84624 call . other c"wrapped"))
    (84637 call =(84633 call . this c"isOwned") 0)
  }
  function _syncvar[84944](?).init=[84648](arg _mt[84956]:_MT[238], arg this[84954]:_syncvar[84944](?), const arg other[84645] :
  _syncvar) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(84793 call _cond_test(84663 call ==(354135 'is_coercible'(84658 call .(84657 'typeof' this) c"valType")(84652 call . other c"valType")) 0))
    {
      unknown theseTypes[84702] "param"(84700 call +(84697 call +(84690 call +(84671 call + "'"(84669 call _cast string[26](84667 'typeof' this))) "' from '")(84695 call _cast string[26](84693 'typeof' other))) "'")
      (84705 'end of statement')
      unknown because[84765] "param"(84763 call +(84760 call +(84750 call +(84731 call + "because '"(84729 call _cast string[26](84725 call . other c"valType"))) "' is not coercible to '")(84758 call _cast string[26](84754 call .(84753 'typeof' this) c"valType"))) "'")
      (84768 'end of statement')
      (84791 call compilerError "cannot initialize " theseTypes " " because)
    }
    (84808 call(84799 call . this c"init")(84804 call .(84803 'typeof' this) c"valType"))
    (84823 call(84813 call . this c"writeEF")(84821 call(84817 call . other c"readFE")))
  }
  function _syncvar[84944](?).init=[84836](arg _mt[84960]:_MT[238], arg this[84958]:_syncvar[84944](?), const arg other[84833] :
  (84830 call . this c"valType")) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (84845 call(84839 call . this c"init")(84843 'typeof' other))
    (84854 call(84849 call . this c"writeEF") other)
  }
  function _syncvar[84944](?).deinit[84860](arg _mt[84964]:_MT[238], arg this[84962]:_syncvar[84944](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    if(84871 call _cond_test(84864 call == isOwned 1))
    {
      (84868 call chpl__delete wrapped)
    }
  }
  function _syncvar[84944](?).readThis[84883](arg _mt[84968]:_MT[238], arg this[84966]:_syncvar[84944](?), arg x[84881]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84906 call compilerError "sync variables cannot currently be read - use writeEF/writeFF instead")
  }
  function _syncvar[84944](?).writeThis[84915](arg _mt[84972]:_MT[238], arg this[84970]:_syncvar[84944](?), arg x[84913]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84938 call compilerError "sync variables cannot currently be written - apply readFE/readFF() to those variables first")
  }
  sync type _syncvar[84944](?) unknown valType[84542] "type variable" unknown wrapped[84549](84548 call getSyncClassType valType) unknown isOwned[84555] 1 bool[10]
  function isSyncType[84981](arg t[84978] :
  _syncvar) param : _unknown[51] "no doc"
  {
    (84984 return 1)
  }
  function isSyncType[84993](arg t[84991]:_any[178](?)) param : _unknown[51]
  {
    (84996 return 0)
  }
  function _unknown[51].readFE[85004](arg _mt[85009]:_MT[238], arg this[85006] :
  _syncvar) : _unknown[51] "method"
  {
    (85017 return(85016 call(85012 call . wrapped c"readFE")))
  }
  function _unknown[51].readFF[85025](arg _mt[85030]:_MT[238], arg this[85027] :
  _syncvar) : _unknown[51] "method"
  {
    (85038 return(85037 call(85033 call . wrapped c"readFF")))
  }
  function _unknown[51].readXX[85046](arg _mt[85051]:_MT[238], arg this[85048] :
  _syncvar) : _unknown[51] "method"
  {
    (85055 call chpl_task_yield)
    (85066 return(85065 call(85061 call . wrapped c"readXX")))
  }
  function _unknown[51].writeEF[85077](arg _mt[85082]:_MT[238], arg this[85079] :
  _syncvar, arg x[85074] :
  valType) : _unknown[51] "method" "no return value for void"
  {
    (85090 call(85085 call . wrapped c"writeEF") x)
  }
  function _unknown[51].writeFF[85102](arg _mt[85107]:_MT[238], arg this[85104] :
  _syncvar, arg x[85099] :
  valType) : _unknown[51] "method" "no return value for void"
  {
    (85117 call(85112 call . wrapped c"writeFF") x)
  }
  function _unknown[51].writeXF[85129](arg _mt[85134]:_MT[238], arg this[85131] :
  _syncvar, arg x[85126] :
  valType) : _unknown[51] "method" "no return value for void"
  {
    (85144 call(85139 call . wrapped c"writeXF") x)
  }
  function _unknown[51].reset[85152](arg _mt[85157]:_MT[238], arg this[85154] :
  _syncvar) : _unknown[51] "method" "no return value for void"
  {
    (85166 call(85162 call . wrapped c"reset"))
  }
  function _unknown[51].isFull[85174](arg _mt[85179]:_MT[238], arg this[85176] :
  _syncvar) : _unknown[51] "method" "no parens"
  {
    (85187 return(85184 call . wrapped c"isFull"))
  }
  function =[85202](ref arg lhs[85199] :
  (85198 call _syncvar unknown t[85195]), arg rhs[85205] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85217 call(85212 call .(85209 call . lhs c"wrapped") c"writeEF") rhs)
  }
  function +=[85232](ref arg lhs[85229] :
  (85228 call _syncvar unknown t[85225]), arg rhs[85235] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85258 call(85242 call .(85239 call . lhs c"wrapped") c"writeEF")(85255 call +(85253 call(85249 call .(85246 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function -=[85273](ref arg lhs[85270] :
  (85269 call _syncvar unknown t[85266]), arg rhs[85276] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85299 call(85283 call .(85280 call . lhs c"wrapped") c"writeEF")(85296 call -(85294 call(85290 call .(85287 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function *=[85314](ref arg lhs[85311] :
  (85310 call _syncvar unknown t[85307]), arg rhs[85317] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85340 call(85324 call .(85321 call . lhs c"wrapped") c"writeEF")(85337 call *(85335 call(85331 call .(85328 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function /=[85355](ref arg lhs[85352] :
  (85351 call _syncvar unknown t[85348]), arg rhs[85358] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85381 call(85365 call .(85362 call . lhs c"wrapped") c"writeEF")(85378 call /(85376 call(85372 call .(85369 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function %=[85396](ref arg lhs[85393] :
  (85392 call _syncvar unknown t[85389]), arg rhs[85399] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85422 call(85406 call .(85403 call . lhs c"wrapped") c"writeEF")(85419 call %(85417 call(85413 call .(85410 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function **=[85437](ref arg lhs[85434] :
  (85433 call _syncvar unknown t[85430]), arg rhs[85440] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85463 call(85447 call .(85444 call . lhs c"wrapped") c"writeEF")(85460 call **(85458 call(85454 call .(85451 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function &=[85478](ref arg lhs[85475] :
  (85474 call _syncvar unknown t[85471]), arg rhs[85481] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85504 call(85488 call .(85485 call . lhs c"wrapped") c"writeEF")(85501 call &(85499 call(85495 call .(85492 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function |=[85519](ref arg lhs[85516] :
  (85515 call _syncvar unknown t[85512]), arg rhs[85522] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85545 call(85529 call .(85526 call . lhs c"wrapped") c"writeEF")(85542 call |(85540 call(85536 call .(85533 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function ^=[85560](ref arg lhs[85557] :
  (85556 call _syncvar unknown t[85553]), arg rhs[85563] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85586 call(85570 call .(85567 call . lhs c"wrapped") c"writeEF")(85583 call ^(85581 call(85577 call .(85574 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function >>=[85601](ref arg lhs[85598] :
  (85597 call _syncvar unknown t[85594]), arg rhs[85604] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85627 call(85611 call .(85608 call . lhs c"wrapped") c"writeEF")(85624 call >>(85622 call(85618 call .(85615 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function <<=[85642](ref arg lhs[85639] :
  (85638 call _syncvar unknown t[85635]), arg rhs[85645] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (85668 call(85652 call .(85649 call . lhs c"wrapped") c"writeEF")(85665 call <<(85663 call(85659 call .(85656 call . lhs c"wrapped") c"readFE")) rhs))
  }
  function chpl__initCopy[85683](ref arg sv[85680] :
  (85679 call _syncvar unknown t[85676])) : _unknown[51] "init copy fn"
  {
    (85691 return(85690 call(85686 call . sv c"readFE")))
  }
  function chpl__autoCopy[85702](const  ref arg rhs[85699] :
  _syncvar) : _unknown[51] "auto copy fn" "no doc"
  {
    (85709 return(85704 'new'(85708 call _syncvar rhs)))
  }
  function chpl__maybeAutoDestroyed[85724](arg x[85721] :
  (85720 call _syncvar unknown t[85717])) param : _unknown[51] "inline"
  {
    (85727 return 1)
  }
  function chpl__autoDestroy[85741](arg x[85738] :
  (85737 call _syncvar ?[260])) : _unknown[51] "inline" "no return value for void"
  {
    if(85758 call _cond_test(85748 call ==(85744 call . x c"isOwned") 1))
    {
      (85755 call chpl__delete(85751 call . x c"wrapped"))
    }
  }
  function chpl__readXX[85775](const  ref arg x[85772] :
  (85771 call _syncvar ?[260])) : _unknown[51] "no doc"
  {
    (85783 return(85782 call(85778 call . x c"readXX")))
  }
  function <=>[85794](arg lhs[85791] :
  _syncvar, ref arg rhs[85796]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85799] "const" lhs
    (85802 'end of statement')
    (85806 call = lhs rhs)
    (85811 call = rhs tmp)
  }
  function <=>[85820](ref arg lhs[85818]:_any[178](?), arg rhs[85823] :
  _syncvar) : _unknown[51] "no return value for void"
  {
    const tmp[85827] "const" lhs
    (85830 'end of statement')
    (85834 call = lhs rhs)
    (85839 call = rhs tmp)
  }
  function <=>[85850](arg lhs[85847] :
  _syncvar, arg rhs[85853] :
  _syncvar) : _unknown[51] "no return value for void"
  {
    const tmp[85857] "const" lhs
    (85860 'end of statement')
    (85864 call = lhs rhs)
    (85869 call = rhs tmp)
  }
  function _synccls[86371](?).init[85892](arg _mt[86375]:_MT[238], arg this[86373]:_synccls[86371](?), arg valType[85890]:_any[178](?)) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (85899 call =(85895 call . this c"valType") valType)
    (85908 call(85904 call . this c"complete"))
    (85913 call chpl_sync_initAux syncAux)
  }
  function _synccls[86371](?).deinit[85919](arg _mt[86379]:_MT[238], arg this[86377]:_synccls[86371](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (85924 call chpl_sync_destroyAux syncAux)
  }
  function _synccls[86371](?).readFE[85931](arg _mt[86383]:_MT[238], arg this[86381]:_synccls[86371](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[85934] valType
    (85937 'end of statement')
    const tmp[85977] "const" "temp"
    (85979 'move' tmp[85977](85975 'deref'(85974 '_wide_get_locale' this)))
    {
      {
        unknown localRet[85941] valType
        (85944 'end of statement')
        (85948 call chpl_rmem_consist_release)
        (85953 call chpl_sync_waitFullAndLock syncAux)
        (85957 call = localRet value)
        (85963 call chpl_sync_markAndSignalEmpty syncAux)
        (85967 call chpl_rmem_consist_acquire)
        (85971 call = ret localRet)
      }
      (85982 'on block' 0 tmp[85977])
    }
    (85986 return ret)
  }
  function _synccls[86371](?).readFF[85992](arg _mt[86387]:_MT[238], arg this[86385]:_synccls[86371](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[85995] valType
    (85998 'end of statement')
    const tmp[86038] "const" "temp"
    (86040 'move' tmp[86038](86036 'deref'(86035 '_wide_get_locale' this)))
    {
      {
        unknown localRet[86002] valType
        (86005 'end of statement')
        (86009 call chpl_rmem_consist_release)
        (86014 call chpl_sync_waitFullAndLock syncAux)
        (86018 call = localRet value)
        (86024 call chpl_sync_markAndSignalFull syncAux)
        (86028 call chpl_rmem_consist_acquire)
        (86032 call = ret localRet)
      }
      (86043 'on block' 0 tmp[86038])
    }
    (86047 return ret)
  }
  function _synccls[86371](?).readXX[86053](arg _mt[86391]:_MT[238], arg this[86389]:_synccls[86371](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[86056] valType
    (86059 'end of statement')
    const tmp[86099] "const" "temp"
    (86101 'move' tmp[86099](86097 'deref'(86096 '_wide_get_locale' this)))
    {
      {
        unknown localRet[86063] valType
        (86066 'end of statement')
        (86070 call chpl_rmem_consist_release)
        (86075 call chpl_sync_lock syncAux)
        (86079 call = localRet value)
        (86085 call chpl_sync_unlock syncAux)
        (86089 call chpl_rmem_consist_acquire)
        (86093 call = ret localRet)
      }
      (86104 'on block' 0 tmp[86099])
    }
    (86108 return ret)
  }
  function _synccls[86371](?).writeEF[86118](arg _mt[86395]:_MT[238], arg this[86393]:_synccls[86371](?), arg val[86115] :
  valType) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86154] "const" "temp"
    (86156 'move' tmp[86154](86152 'deref'(86151 '_wide_get_locale' this)))
    {
      {
        (86129 call chpl_rmem_consist_release)
        (86135 call chpl_sync_waitEmptyAndLock syncAux)
        (86139 call = value val)
        (86145 call chpl_sync_markAndSignalFull syncAux)
        (86149 call chpl_rmem_consist_acquire)
      }
      (86159 'on block' 0 tmp[86154])
    }
  }
  {
    (86124 call <(86121 'lifetime_of' this)(86123 'lifetime_of' val))
  }
  function _synccls[86371](?).writeFF[86172](arg _mt[86399]:_MT[238], arg this[86397]:_synccls[86371](?), arg val[86169] :
  valType) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86208] "const" "temp"
    (86210 'move' tmp[86208](86206 'deref'(86205 '_wide_get_locale' this)))
    {
      {
        (86183 call chpl_rmem_consist_release)
        (86189 call chpl_sync_waitFullAndLock syncAux)
        (86193 call = value val)
        (86199 call chpl_sync_markAndSignalFull syncAux)
        (86203 call chpl_rmem_consist_acquire)
      }
      (86213 'on block' 0 tmp[86208])
    }
  }
  {
    (86178 call <(86175 'lifetime_of' this)(86177 'lifetime_of' val))
  }
  function _synccls[86371](?).writeXF[86226](arg _mt[86403]:_MT[238], arg this[86401]:_synccls[86371](?), arg val[86223] :
  valType) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86262] "const" "temp"
    (86264 'move' tmp[86262](86260 'deref'(86259 '_wide_get_locale' this)))
    {
      {
        (86237 call chpl_rmem_consist_release)
        (86243 call chpl_sync_lock syncAux)
        (86247 call = value val)
        (86253 call chpl_sync_markAndSignalFull syncAux)
        (86257 call chpl_rmem_consist_acquire)
      }
      (86267 'on block' 0 tmp[86262])
    }
  }
  {
    (86232 call <(86229 'lifetime_of' this)(86231 'lifetime_of' val))
  }
  function _synccls[86371](?).reset[86276](arg _mt[86407]:_MT[238], arg this[86405]:_synccls[86371](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86311] "const" "temp"
    (86313 'move' tmp[86311](86309 'deref'(86308 '_wide_get_locale' this)))
    {
      {
        const defaultValue[86280] "const" valType
        (86283 'end of statement')
        (86287 call chpl_rmem_consist_release)
        (86292 call chpl_sync_lock syncAux)
        (86296 call = value defaultValue)
        (86302 call chpl_sync_markAndSignalEmpty syncAux)
        (86306 call chpl_rmem_consist_acquire)
      }
      (86316 'on block' 0 tmp[86311])
    }
  }
  function _synccls[86371](?).isFull[86324](arg _mt[86411]:_MT[238], arg this[86409]:_synccls[86371](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown b[86327] bool[10]
    (86330 'end of statement')
    const tmp[86357] "const" "temp"
    (86359 'move' tmp[86357](86355 'deref'(86354 '_wide_get_locale' this)))
    {
      {
        (86335 call chpl_rmem_consist_release)
        (86347 call = b(86346 call chpl_sync_isFull(86343 call c_ptrTo value) syncAux))
        (86352 call chpl_rmem_consist_acquire)
      }
      (86362 'on block' 0 tmp[86357])
    }
    (86366 return b)
  }
  type _synccls[86371](?) unknown valType[85875] "type variable" unknown value[85879] valType unknown syncAux[85884] chpl_sync_aux_t
  function _qthreads_synccls[86862](?).init[86427](arg _mt[86866]:_MT[238], arg this[86864]:_qthreads_synccls[86862](?), arg valType[86425]:_any[178](?)) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (86434 call =(86430 call . this c"valType") valType)
    (86443 call(86439 call . this c"complete"))
    (86452 call qthread_purge_to alignedValue(86451 call defaultOfAlignedT valType))
  }
  function _qthreads_synccls[86862](?).deinit[86458](arg _mt[86870]:_MT[238], arg this[86868]:_qthreads_synccls[86862](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (86463 call qthread_fill alignedValue)
  }
  function _qthreads_synccls[86862](?).readFE[86470](arg _mt[86874]:_MT[238], arg this[86872]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[86473] valType
    (86476 'end of statement')
    const tmp[86510] "const" "temp"
    (86512 'move' tmp[86510](86508 'deref'(86507 '_wide_get_locale' this)))
    {
      {
        unknown alignedLocalRet[86480] aligned_t
        (86483 'end of statement')
        (86487 call chpl_rmem_consist_release)
        (86493 call qthread_readFE alignedLocalRet alignedValue)
        (86497 call chpl_rmem_consist_acquire)
        (86504 call = ret(86502 call _cast valType alignedLocalRet))
      }
      (86515 'on block' 0 tmp[86510])
    }
    (86519 return ret)
  }
  function _qthreads_synccls[86862](?).readFF[86525](arg _mt[86878]:_MT[238], arg this[86876]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[86528] valType
    (86531 'end of statement')
    const tmp[86565] "const" "temp"
    (86567 'move' tmp[86565](86563 'deref'(86562 '_wide_get_locale' this)))
    {
      {
        unknown alignedLocalRet[86535] aligned_t
        (86538 'end of statement')
        (86542 call chpl_rmem_consist_release)
        (86548 call qthread_readFF alignedLocalRet alignedValue)
        (86552 call chpl_rmem_consist_acquire)
        (86559 call = ret(86557 call _cast valType alignedLocalRet))
      }
      (86570 'on block' 0 tmp[86565])
    }
    (86574 return ret)
  }
  function _qthreads_synccls[86862](?).readXX[86580](arg _mt[86882]:_MT[238], arg this[86880]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[86583] valType
    (86586 'end of statement')
    const tmp[86620] "const" "temp"
    (86622 'move' tmp[86620](86618 'deref'(86617 '_wide_get_locale' this)))
    {
      {
        unknown alignedLocalRet[86590] aligned_t
        (86593 'end of statement')
        (86597 call chpl_rmem_consist_release)
        (86603 call qthread_readXX alignedLocalRet alignedValue)
        (86607 call chpl_rmem_consist_acquire)
        (86614 call = ret(86612 call _cast valType alignedLocalRet))
      }
      (86625 'on block' 0 tmp[86620])
    }
    (86629 return ret)
  }
  function _qthreads_synccls[86862](?).writeEF[86639](arg _mt[86886]:_MT[238], arg this[86884]:_qthreads_synccls[86862](?), arg val[86636] :
  valType) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86669] "const" "temp"
    (86671 'move' tmp[86669](86667 'deref'(86666 '_wide_get_locale' this)))
    {
      {
        (86650 call chpl_rmem_consist_release)
        (86660 call qthread_writeEF alignedValue(86658 call _cast aligned_t val))
        (86664 call chpl_rmem_consist_acquire)
      }
      (86674 'on block' 0 tmp[86669])
    }
  }
  {
    (86645 call <(86642 'lifetime_of' this)(86644 'lifetime_of' val))
  }
  function _qthreads_synccls[86862](?).writeFF[86687](arg _mt[86890]:_MT[238], arg this[86888]:_qthreads_synccls[86862](?), arg val[86684] :
  valType) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86717] "const" "temp"
    (86719 'move' tmp[86717](86715 'deref'(86714 '_wide_get_locale' this)))
    {
      {
        (86698 call chpl_rmem_consist_release)
        (86708 call qthread_writeFF alignedValue(86706 call _cast aligned_t val))
        (86712 call chpl_rmem_consist_acquire)
      }
      (86722 'on block' 0 tmp[86717])
    }
  }
  {
    (86693 call <(86690 'lifetime_of' this)(86692 'lifetime_of' val))
  }
  function _qthreads_synccls[86862](?).writeXF[86735](arg _mt[86894]:_MT[238], arg this[86892]:_qthreads_synccls[86862](?), arg val[86732] :
  valType) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86765] "const" "temp"
    (86767 'move' tmp[86765](86763 'deref'(86762 '_wide_get_locale' this)))
    {
      {
        (86746 call chpl_rmem_consist_release)
        (86756 call qthread_writeF alignedValue(86754 call _cast aligned_t val))
        (86760 call chpl_rmem_consist_acquire)
      }
      (86770 'on block' 0 tmp[86765])
    }
  }
  {
    (86741 call <(86738 'lifetime_of' this)(86740 'lifetime_of' val))
  }
  function _qthreads_synccls[86862](?).reset[86779](arg _mt[86898]:_MT[238], arg this[86896]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86803] "const" "temp"
    (86805 'move' tmp[86803](86801 'deref'(86800 '_wide_get_locale' this)))
    {
      {
        (86784 call chpl_rmem_consist_release)
        (86794 call qthread_purge_to alignedValue(86793 call defaultOfAlignedT valType))
        (86798 call chpl_rmem_consist_acquire)
      }
      (86808 'on block' 0 tmp[86803])
    }
  }
  function _qthreads_synccls[86862](?).isFull[86816](arg _mt[86902]:_MT[238], arg this[86900]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown b[86819] bool[10]
    (86822 'end of statement')
    const tmp[86848] "const" "temp"
    (86850 'move' tmp[86848](86846 'deref'(86845 '_wide_get_locale' this)))
    {
      {
        (86827 call chpl_rmem_consist_release)
        (86838 call = b(86836 call _cast bool[10](86834 call qthread_feb_status alignedValue)))
        (86843 call chpl_rmem_consist_acquire)
      }
      (86853 'on block' 0 tmp[86848])
    }
    (86857 return b)
  }
  type _qthreads_synccls[86862](?) unknown valType[86415] "type variable" unknown alignedValue[86419] aligned_t
  function isSyncValue[86911](arg x[86908] :
  _syncvar) param : _unknown[51] "no doc"
  {
    (86914 return 1)
  }
  function isSyncValue[86923](arg x[86921]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (86926 return 0)
  }
  function _singlevar[87253](?).init[86954](arg _mt[87257]:_MT[238], arg this[87255]:_singlevar[87253](?), arg valType[86952]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (86959 call ensureFEType valType)
    (86967 call =(86963 call . this c"valType") valType)
    (86978 call = wrapped(86973 'new'(_chpl_manager = unmanaged[220](?))(86977 call _singlecls valType)))
  }
  function _singlevar[87253](?).init[86989](arg _mt[87261]:_MT[238], arg this[87259]:_singlevar[87253](?), const arg other[86986] :
  _singlevar) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (86999 call =(86992 call . this c"valType")(86996 call . other c"valType"))
    (87008 call = wrapped(87005 call . other c"wrapped"))
    (87013 call = isOwned 0)
  }
  function _singlevar[87253](?).init=[87024](arg _mt[87265]:_MT[238], arg this[87263]:_singlevar[87253](?), const arg other[87021] :
  _singlevar) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(87105 call _cond_test(87039 call ==(354136 'is_coercible'(87034 call .(87033 'typeof' this) c"valType")(87028 call . other c"valType")) 0))
    {
      unknown theseTypes[87062] "param"(87060 call +(87057 call +(87050 call +(87047 call + "'"(87045 call _cast string[26](87043 'typeof' this))) "' from '")(87055 call _cast string[26](87053 'typeof' other))) "'")
      (87065 'end of statement')
      unknown because[87093] "param"(87091 call +(87088 call +(87078 call +(87075 call + "because '"(87073 call _cast string[26](87069 call . other c"valType"))) "' is not coercible to '")(87086 call _cast string[26](87082 call .(87081 'typeof' this) c"valType"))) "'")
      (87096 'end of statement')
      (87103 call compilerError "cannot initialize " theseTypes " " because)
    }
    (87120 call(87111 call . this c"init")(87116 call .(87115 'typeof' this) c"valType"))
    (87133 call(87123 call . this c"writeEF")(87131 call(87127 call . other c"readFF")))
  }
  function _singlevar[87253](?).init=[87147](arg _mt[87269]:_MT[238], arg this[87267]:_singlevar[87253](?), const arg other[87144] :
  (87141 call .(87140 'typeof' this) c"valType")) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (87156 call(87150 call . this c"init")(87154 'typeof' other))
    (87165 call(87160 call . this c"writeEF") other)
  }
  function _singlevar[87253](?).deinit[87171](arg _mt[87273]:_MT[238], arg this[87271]:_singlevar[87253](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    if(87182 call _cond_test(87175 call == isOwned 1))
    {
      (87179 call chpl__delete wrapped)
    }
  }
  function _singlevar[87253](?).readThis[87194](arg _mt[87277]:_MT[238], arg this[87275]:_singlevar[87253](?), arg x[87192]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87215 call compilerError "single variables cannot currently be read - use writeEF instead")
  }
  function _singlevar[87253](?).writeThis[87224](arg _mt[87281]:_MT[238], arg this[87279]:_singlevar[87253](?), arg x[87222]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87247 call compilerError "single variables cannot currently be written - apply readFF() to those variables first")
  }
  single type _singlevar[87253](?) unknown valType[86932] "type variable" unknown wrapped[86940](86939 'to unmanaged class from unknown'(86938 call _singlecls valType)) unknown isOwned[86946] 1 bool[10]
  function isSingleType[87290](arg t[87287] :
  _singlevar) param : _unknown[51] "no doc"
  {
    (87293 return 1)
  }
  function isSingleType[87302](arg t[87300]:_any[178](?)) param : _unknown[51]
  {
    (87305 return 0)
  }
  function _unknown[51].readFF[87313](arg _mt[87318]:_MT[238], arg this[87315] :
  _singlevar) : _unknown[51] "method"
  {
    (87326 return(87325 call(87321 call . wrapped c"readFF")))
  }
  function _unknown[51].readXX[87334](arg _mt[87339]:_MT[238], arg this[87336] :
  _singlevar) : _unknown[51] "method"
  {
    (87343 call chpl_task_yield)
    (87352 return(87351 call(87347 call . wrapped c"readXX")))
  }
  function _unknown[51].writeEF[87363](arg _mt[87368]:_MT[238], arg this[87365] :
  _singlevar, arg x[87360] :
  valType) : _unknown[51] "method" "no return value for void"
  {
    (87376 call(87371 call . wrapped c"writeEF") x)
  }
  function _unknown[51].isFull[87384](arg _mt[87389]:_MT[238], arg this[87386] :
  _singlevar) : _unknown[51] "method" "no parens"
  {
    (87395 return(87392 call . wrapped c"isFull"))
  }
  function =[87410](ref arg lhs[87407] :
  (87406 call _singlevar unknown t[87403]), arg rhs[87413] :
  t) : _unknown[51] "assignop" "no return value for void"
  {
    (87425 call(87420 call .(87417 call . lhs c"wrapped") c"writeEF") rhs)
  }
  function chpl__initCopy[87440](ref arg sv[87437] :
  (87436 call _singlevar unknown t[87433])) : _unknown[51] "init copy fn"
  {
    (87448 return(87447 call(87443 call . sv c"readFF")))
  }
  function chpl__autoCopy[87459](const  ref arg rhs[87456] :
  _singlevar) : _unknown[51] "auto copy fn" "no doc"
  {
    (87466 return(87461 'new'(87465 call _singlevar rhs)))
  }
  function chpl__maybeAutoDestroyed[87481](arg x[87478] :
  (87477 call _singlevar unknown t[87474])) param : _unknown[51] "inline"
  {
    (87484 return 1)
  }
  function chpl__autoDestroy[87498](arg x[87495] :
  (87494 call _singlevar ?[260])) : _unknown[51] "inline" "no return value for void"
  {
    if(87515 call _cond_test(87505 call ==(87501 call . x c"isOwned") 1))
    {
      (87512 call chpl__delete(87508 call . x c"wrapped"))
    }
  }
  function chpl__readXX[87532](const  ref arg x[87529] :
  (87528 call _singlevar ?[260])) : _unknown[51] "no doc"
  {
    (87540 return(87539 call(87535 call . x c"readXX")))
  }
  function _singlecls[87885](?).init[87563](arg _mt[87889]:_MT[238], arg this[87887]:_singlecls[87885](?), arg valType[87561]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (87570 call =(87566 call . this c"valType") valType)
    (87579 call(87575 call . this c"complete"))
    (87584 call chpl_single_initAux singleAux)
  }
  function _singlecls[87885](?).deinit[87590](arg _mt[87893]:_MT[238], arg this[87891]:_singlecls[87885](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (87595 call chpl_single_destroyAux singleAux)
  }
  function _singlecls[87885](?).readFF[87602](arg _mt[87897]:_MT[238], arg this[87895]:_singlecls[87885](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[87605] valType
    (87608 'end of statement')
    const tmp[87663] "const" "temp"
    (87665 'move' tmp[87663](87661 'deref'(87660 '_wide_get_locale' this)))
    {
      {
        unknown localRet[87612] valType
        (87615 'end of statement')
        (87619 call chpl_rmem_consist_release)
        if(87646 call _cond_test(87622 call . this c"isFull"))
        {
          (87627 call = localRet value)
        }
        {
          (87633 call chpl_single_waitFullAndLock singleAux)
          (87638 call = localRet value)
          (87644 call chpl_single_markAndSignalFull singleAux)
        }
        (87653 call chpl_rmem_consist_acquire)
        (87657 call = ret localRet)
      }
      (87668 'on block' 0 tmp[87663])
    }
    (87672 return ret)
  }
  function _singlecls[87885](?).readXX[87678](arg _mt[87901]:_MT[238], arg this[87899]:_singlecls[87885](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[87681] valType
    (87684 'end of statement')
    const tmp[87739] "const" "temp"
    (87741 'move' tmp[87739](87737 'deref'(87736 '_wide_get_locale' this)))
    {
      {
        unknown localRet[87688] valType
        (87691 'end of statement')
        (87695 call chpl_rmem_consist_release)
        if(87722 call _cond_test(87698 call . this c"isFull"))
        {
          (87703 call = localRet value)
        }
        {
          (87709 call chpl_single_lock singleAux)
          (87714 call = localRet value)
          (87720 call chpl_single_unlock singleAux)
        }
        (87729 call chpl_rmem_consist_acquire)
        (87733 call = ret localRet)
      }
      (87744 'on block' 0 tmp[87739])
    }
    (87748 return ret)
  }
  function _singlecls[87885](?).writeEF[87758](arg _mt[87905]:_MT[238], arg this[87903]:_singlecls[87885](?), arg val[87755] :
  valType) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[87824] "const" "temp"
    (87826 'move' tmp[87824](87822 'deref'(87821 '_wide_get_locale' this)))
    {
      {
        (87769 call chpl_rmem_consist_release)
        (87775 call chpl_single_lock singleAux)
        if(87802 call _cond_test(87778 call . this c"isFull"))
        {
          (87800 call halt "single var already defined")
        }
        (87809 call = value val)
        (87815 call chpl_single_markAndSignalFull singleAux)
        (87819 call chpl_rmem_consist_acquire)
      }
      (87829 'on block' 0 tmp[87824])
    }
  }
  {
    (87764 call <(87761 'lifetime_of' this)(87763 'lifetime_of' val))
  }
  function _singlecls[87885](?).isFull[87838](arg _mt[87909]:_MT[238], arg this[87907]:_singlecls[87885](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown b[87841] bool[10]
    (87844 'end of statement')
    const tmp[87871] "const" "temp"
    (87873 'move' tmp[87871](87869 'deref'(87868 '_wide_get_locale' this)))
    {
      {
        (87849 call chpl_rmem_consist_release)
        (87861 call = b(87860 call chpl_single_isFull(87857 call c_ptrTo value) singleAux))
        (87866 call chpl_rmem_consist_acquire)
      }
      (87876 'on block' 0 tmp[87871])
    }
    (87880 return b)
  }
  type _singlecls[87885](?) unknown valType[87546] "type variable" unknown value[87550] valType unknown singleAux[87555] chpl_single_aux_t
  function isSingleValue[87918](arg x[87915] :
  _singlevar) param : _unknown[51] "no doc"
  {
    (87921 return 1)
  }
  function isSingleValue[87930](arg x[87928]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (87933 return 0)
  }
}