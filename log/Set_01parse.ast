AST dump for Set after pass parse.
Module use list: 

{
  (352986 'use' ChapelStandard)
  (331223 'import' ChapelLocks)
  (331227 'use' IO)
  (331230 'use' Reflection)
  (331233 'use' ChapelHashtable)
  { scopeless
    unknown _sanityChecks[331236] "no doc" "param" "private" 1
    (331239 'end of statement')
  }
  function _sanity[331246](arg expr[331243] :
  bool[10]) : _unknown[51] "inline" "private"
  {
    if(331254 call _cond_test _sanityChecks)
    {
      { scopeless
        (331252 call assert expr)
      }
    }
  }
  unknown _lockType[331266] "no doc" "type variable"(331263 call . ChapelLocks c"chpl_LocalSpinlock")
  type _LockWrapper[331307] unknown lock$[331274](331270 'new'(331273 call _lockType)) function _LockWrapper[331307].lock[331280](arg _mt[331311]:_MT[238], arg this[331309]:_LockWrapper[331307]) : _unknown[51] "inline" "method" "primary method"
  {
    (331287 call(331283 call . lock$ c"lock"))
  } function _LockWrapper[331307].unlock[331294](arg _mt[331315]:_MT[238], arg this[331313]:_LockWrapper[331307]) : _unknown[51] "inline" "method" "primary method"
  {
    (331301 call(331297 call . lock$ c"unlock"))
  }
  function _checkElementType[331322](arg t[331320]:_any[178](?)) : _unknown[51] "no doc"
  {
    if(331379 call _cond_test(331327 call isGenericType t))
    {
      (331354 call compilerWarning(331350 call + "creating a set with element type "(331348 call _cast string[26] t)) 2)
      (331377 call compilerError "set element type cannot currently be generic" 2)
    }
  }
  type set[333080](?) unknown eltType[331387] "type variable" unknown parSafe[331391] "param" 0 unknown _lock$[331404] "no doc"(331401 IfExpr  parSafe then
  { scopeless
    (331396 'new'(331399 call _LockWrapper))
  } else
  { scopeless
    none[57]
  } ) unknown _htb[331413] "no doc"(331412 call chpl__hashtable eltType nothing[7]) function set[333080](?).init[331421](arg _mt[333084]:_MT[238], arg this[333082]:set[333080](?), arg eltType[331419]:_any[178](?), param arg parSafe[331424] =
  0) : _unknown[51] "method" "primary method"
  {
    (331430 call _checkElementType eltType)
    (331438 call =(331434 call . this c"eltType") eltType)
    (331446 call =(331442 call . this c"parSafe") parSafe)
  } function set[333080](?)._addElem[331457](arg _mt[333088]:_MT[238], arg this[333086]:set[333080](?), in arg elem[331454] :
  eltType) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      unknown tmp[331472] "temp"(331471 call(331466 call . _htb c"findAvailableSlot") elem)
      (331479 call _check_tuple_var_decl tmp[331472] 2)
      unknown isFullSlot[331460](331473 call tmp[331472] 0)
      unknown idx[331462](331476 call tmp[331472] 1)
      (331484 'end of statement')
    }
    if(331490 call _cond_test isFullSlot)
    {
      { scopeless
        (331488 return 0)
      }
    }
    (331503 call(331496 call . _htb c"fillSlot") idx elem none[57])
    (331506 return 1)
  }
  { scopeless type
    bool[10]
  } function set[333080](?).init[331515](arg _mt[333092]:_MT[238], arg this[333090]:set[333080](?), arg eltType[331513]:_any[178](?), arg iterable[331517]:_any[178](?), param arg parSafe[331520] =
  0) : _unknown[51] "method" "primary method"
  {
    (331537 call _checkElementType eltType)
    (331545 call =(331541 call . this c"eltType") eltType)
    (331553 call =(331549 call . this c"parSafe") parSafe)
    (331561 call(331557 call . this c"complete"))
    {
      unknown _indexOfInterest[331570] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[331571] "expr temp" "temp"
      (331580 'move' _iterator[331571](331578 call _getIterator iterable))
      Defer
      {
        {
          (331596 call _freeIterator _iterator[331571])
        }
      }
      { scopeless type
        (331585 'move' _indexOfInterest[331570](331582 call iteratorIndex _iterator[331571]))
      }
      ForLoop[331572]
      {
        unknown elem[331589] "index var" "insert auto destroy"
        (331591 'move' elem[331589] _indexOfInterest[331570])
        { scopeless
          (331568 call _addElem elem)
        }
        label _continueLabel[331575]
        _indexOfInterest[331570]
        _iterator[331571]
      }
      label _breakLabel[331576]
    }
  }
  where {
    (331527 call canResolveMethod iterable "these")
  }
  {
    (331532 call <(331529 'lifetime_of' this)(331531 'lifetime_of' iterable))
  } function set[333080](?).init=[331618](arg _mt[333096]:_MT[238], arg this[333094]:set[333080](?), const  ref arg other[331615] :
  (331614 call set unknown t[331610] ?[260])) : _unknown[51] "method" "primary method"
  {
    (331631 call =(331627 call . this c"eltType") t)
    (331643 call =(331636 call . this c"parSafe")(331640 call . other c"parSafe"))
    (331651 call(331647 call . this c"complete"))
    if(331741 call _cond_test(331657 call !(331656 call isCopyableType eltType)))
    {
      { scopeless
        (331739 call compilerError(331736 call +(331717 call +(331711 call +(331692 call +(331685 call +(331682 call + "Cannot initialize "(331680 call _cast string[26](331678 'typeof' this))) " from ")(331690 call _cast string[26](331688 'typeof' other))) " because element type ")(331715 call _cast string[26] eltType)) " is not copyable"))
      }
    }
    {
      unknown _indexOfInterest[331753] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[331754] "expr temp" "temp"
      (331763 'move' _iterator[331754](331761 call _getIterator other))
      Defer
      {
        {
          (331779 call _freeIterator _iterator[331754])
        }
      }
      { scopeless type
        (331768 'move' _indexOfInterest[331753](331765 call iteratorIndex _iterator[331754]))
      }
      ForLoop[331755]
      {
        unknown elem[331772] "index var" "insert auto destroy"
        (331774 'move' elem[331772] _indexOfInterest[331753])
        { scopeless
          (331751 call _addElem elem)
        }
        label _continueLabel[331758]
        _indexOfInterest[331753]
        _iterator[331754]
      }
      label _breakLabel[331759]
    }
  }
  {
    (331624 call <(331621 'lifetime_of' this)(331623 'lifetime_of' other))
  } function set[333080](?)._enter[331791](arg _mt[333100]:_MT[238], arg this[333098]:set[333080](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(331814 call _cond_test parSafe)
    {
      { scopeless
        const tmp[331806] "const" "temp"
        (331808 'move' tmp[331806](331804 'deref'(331803 '_wide_get_locale' this)))
        {
          {
            (331800 call(331796 call . _lock$ c"lock"))
          }
          (331811 'on block' 0 tmp[331806])
        }
      }
    }
  } function set[333080](?)._leave[331824](arg _mt[333104]:_MT[238], arg this[333102]:set[333080](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(331847 call _cond_test parSafe)
    {
      { scopeless
        const tmp[331839] "const" "temp"
        (331841 'move' tmp[331839](331837 'deref'(331836 '_wide_get_locale' this)))
        {
          {
            (331833 call(331829 call . _lock$ c"unlock"))
          }
          (331844 'on block' 0 tmp[331839])
        }
      }
    }
  } function set[333080](?).add[331861](arg _mt[333108]:_MT[238], ref arg this[333106]:set[333080](?), in arg x[331858] :
  eltType) : _unknown[51] "method" "primary method"
  {
    (331871 call _enter)
    Defer
    {
      { scopeless
        (331876 call _leave)
      }
    }
    (331883 call _addElem x)
  }
  {
    (331867 call <(331864 'lifetime_of' this)(331866 'lifetime_of' x))
  } function set[333080](?).contains[331894](arg _mt[333112]:_MT[238], const arg this[333110]:set[333080](?), const  ref arg x[331891] :
  eltType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[331898] 0
      (331901 'end of statement')
    }
    { scopeless
      const tmp[331945] "const" "temp"
      (331947 'move' tmp[331945](331943 'deref'(331942 '_wide_get_locale' this)))
      {
        {
          (331906 call _enter)
          Defer
          {
            { scopeless
              (331911 call _leave)
            }
          }
          { scopeless
            unknown tmp[331927] "temp"(331926 call(331921 call . _htb c"findFullSlot") x)
            (331931 call _check_tuple_var_decl tmp[331927] 2)
            unknown hasFoundSlot[331915](331928 call tmp[331927] 0)
            (331936 'end of statement')
          }
          (331939 call = result hasFoundSlot)
        }
        (331950 'on block' 0 tmp[331945])
      }
    }
    (331954 return result)
  }
  { scopeless type
    bool[10]
  } function set[333080](?).isDisjoint[331969](arg _mt[333116]:_MT[238], const arg this[333114]:set[333080](?), const  ref arg other[331966] :
  (331965 call set eltType ?[260])) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[331973] 1
      (331976 'end of statement')
    }
    { scopeless
      const tmp[332068] "const" "temp"
      (332070 'move' tmp[332068](332066 'deref'(332065 '_wide_get_locale' this)))
      {
        {
          (331981 call _enter)
          Defer
          {
            { scopeless
              (331986 call _leave)
            }
          }
          if(332061 call _cond_test(332003 call !(332001 call ||(331992 call == size 0)(331999 call ==(331995 call . other c"size") 0))))
          {
            {
              unknown _indexOfInterest[332027] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[332028] "expr temp" "temp"
              (332037 'move' _iterator[332028](332035 call _getIterator other))
              Defer
              {
                {
                  (332053 call _freeIterator _iterator[332028])
                }
              }
              { scopeless type
                (332042 'move' _indexOfInterest[332027](332039 call iteratorIndex _iterator[332028]))
              }
              ForLoop[332029]
              {
                unknown x[332046] "index var" "insert auto destroy"
                (332048 'move' x[332046] _indexOfInterest[332027])
                { scopeless
                  if(332023 call _cond_test(332013 call(332008 call . this c"contains") x))
                  {
                    (332016 call = result 0)
                    break nil[44]
                  }
                }
                label _continueLabel[332032]
                _indexOfInterest[332027]
                _iterator[332028]
              }
              label _breakLabel[332033]
            }
          }
        }
        (332073 'on block' 0 tmp[332068])
      }
    }
    (332077 return result)
  }
  { scopeless type
    bool[10]
  } function set[333080](?).isIntersecting[332092](arg _mt[333120]:_MT[238], const arg this[333118]:set[333080](?), const  ref arg other[332089] :
  (332088 call set eltType ?[260])) : _unknown[51] "method" "primary method"
  {
    (332101 return(332099 call !(332098 call isDisjoint other)))
  }
  { scopeless type
    bool[10]
  } function set[333080](?).remove[332113](arg _mt[333124]:_MT[238], ref arg this[333122]:set[333080](?), const  ref arg x[332110] :
  eltType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[332117] 0
      (332120 'end of statement')
    }
    { scopeless
      const tmp[332200] "const" "temp"
      (332202 'move' tmp[332200](332198 'deref'(332197 '_wide_get_locale' this)))
      {
        {
          (332125 call _enter)
          Defer
          {
            { scopeless
              (332130 call _leave)
            }
          }
          { scopeless
            unknown tmp[332146] "temp"(332145 call(332140 call . _htb c"findFullSlot") x)
            (332153 call _check_tuple_var_decl tmp[332146] 2)
            unknown hasFoundSlot[332134](332147 call tmp[332146] 0)
            unknown idx[332136](332150 call tmp[332146] 1)
            (332158 'end of statement')
          }
          if(332193 call _cond_test hasFoundSlot)
          {
            { scopeless
              unknown key[332161] eltType
              (332164 'end of statement')
            }
            { scopeless
              unknown val[332167] nothing[7]
              (332170 'end of statement')
            }
            (332179 call(332172 call . _htb c"clearSlot") idx key val)
            (332186 call(332182 call . _htb c"maybeShrinkAfterRemove"))
            (332190 call = result 1)
          }
        }
        (332205 'on block' 0 tmp[332200])
      }
    }
    (332209 return result)
  }
  { scopeless type
    bool[10]
  } function set[333080](?).clear[332216](arg _mt[333128]:_MT[238], ref arg this[333126]:set[333080](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[332326] "const" "temp"
      (332328 'move' tmp[332326](332324 'deref'(332323 '_wide_get_locale' this)))
      {
        {
          (332221 call _enter)
          Defer
          {
            { scopeless
              (332226 call _leave)
            }
          }
          {
            unknown _indexOfInterest[332273] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[332274] "expr temp" "temp"
            (332283 'move' _iterator[332274](332281 call _getIterator(332293 call chpl_direct_counted_range_iter 0(332289 call . _htb c"tableSize"))))
            Defer
            {
              {
                (332309 call _freeIterator _iterator[332274])
              }
            }
            { scopeless type
              (332298 'move' _indexOfInterest[332273](332295 call iteratorIndex _iterator[332274]))
            }
            ForLoop[332275]
            {
              unknown idx[332302] "index var" "insert auto destroy"
              (332304 'move' idx[332302] _indexOfInterest[332273])
              {
                if(332268 call _cond_test(332246 call(332241 call . _htb c"isSlotFull") idx))
                {
                  { scopeless
                    unknown key[332248] eltType
                    (332251 'end of statement')
                  }
                  { scopeless
                    unknown val[332254] nothing[7]
                    (332257 'end of statement')
                  }
                  (332266 call(332259 call . _htb c"clearSlot") idx key val)
                }
              }
              label _continueLabel[332278]
              _indexOfInterest[332273]
              _iterator[332274]
            }
            label _breakLabel[332279]
          }
          (332321 call(332317 call . _htb c"maybeShrinkAfterRemove"))
        }
        (332331 'on block' 0 tmp[332326])
      }
    }
  } function set[333080](?).these[332339](arg _mt[333132]:_MT[238], const arg this[333130]:set[333080](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[332375] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[332376] "expr temp" "temp"
      (332385 'move' _iterator[332376](332383 call _getIterator(332395 call chpl_direct_counted_range_iter 0(332391 call . _htb c"tableSize"))))
      Defer
      {
        {
          (332411 call _freeIterator _iterator[332376])
        }
      }
      { scopeless type
        (332400 'move' _indexOfInterest[332375](332397 call iteratorIndex _iterator[332376]))
      }
      ForLoop[332377]
      {
        unknown idx[332404] "index var" "insert auto destroy"
        (332406 'move' idx[332404] _indexOfInterest[332375])
        { scopeless
          if(332370 call _cond_test(332357 call(332352 call . _htb c"isSlotFull") idx))
          {
            { scopeless
              (332368 yield(332365 call .(332364 call(332359 call . _htb c"table") idx) c"key"))
            }
          }
        }
        label _continueLabel[332380]
        _indexOfInterest[332375]
        _iterator[332376]
      }
      label _breakLabel[332381]
    }
  } function set[333080](?).these[332425](arg _mt[333136]:_MT[238], const arg this[333134]:set[333080](?), param arg tag[332423]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    { scopeless
      unknown space[332443](332441 call #(332435 call chpl_build_low_bounded_range 0)(332438 call . _htb c"tableSize"))
      (332446 'end of statement')
    }
    {
      unknown _indexOfInterest[332480] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[332481] "expr temp" "temp"
      (332490 'move' _iterator[332481](332488 call _getIterator(332455 call(332450 call . space c"these") tag)))
      Defer
      {
        {
          (332507 call _freeIterator _iterator[332481])
        }
      }
      { scopeless type
        (332496 'move' _indexOfInterest[332480](332493 call iteratorIndex _iterator[332481]))
      }
      ForLoop[332482]
      {
        unknown idx[332500] "index var" "insert auto destroy"
        (332502 'move' idx[332500] _indexOfInterest[332480])
        { scopeless
          if(332475 call _cond_test(332462 call(332457 call . _htb c"isSlotFull") idx))
          {
            { scopeless
              (332473 yield(332470 call .(332469 call(332464 call . _htb c"table") idx) c"key"))
            }
          }
        }
        label _continueLabel[332485]
        _indexOfInterest[332480]
        _iterator[332481]
      }
      label _breakLabel[332486]
    }
  }
  where {
    (332432 call == tag(332429 call . iterKind c"standalone"))
  } function set[333080](?).these[332521](arg _mt[333140]:_MT[238], const arg this[333138]:set[333080](?), param arg tag[332519]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    { scopeless
      unknown space[332539](332537 call #(332531 call chpl_build_low_bounded_range 0)(332534 call . _htb c"tableSize"))
      (332542 'end of statement')
    }
    {
      unknown _indexOfInterest[332556] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[332557] "expr temp" "temp"
      (332566 'move' _iterator[332557](332564 call _getIterator(332551 call(332546 call . space c"these") tag)))
      Defer
      {
        {
          (332583 call _freeIterator _iterator[332557])
        }
      }
      { scopeless type
        (332572 'move' _indexOfInterest[332556](332569 call iteratorIndex _iterator[332557]))
      }
      ForLoop[332558]
      {
        unknown followThis[332576] "index var" "insert auto destroy"
        (332578 'move' followThis[332576] _indexOfInterest[332556])
        {
          (332553 yield followThis)
        }
        label _continueLabel[332561]
        _indexOfInterest[332556]
        _iterator[332557]
      }
      label _breakLabel[332562]
    }
  }
  where {
    (332528 call == tag(332525 call . iterKind c"leader"))
  } function set[333080](?).these[332597](arg _mt[333144]:_MT[238], const arg this[333142]:set[333080](?), param arg tag[332595]:_any[178](?), arg followThis[332599]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    {
      unknown _indexOfInterest[332637] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[332638] "expr temp" "temp"
      (332647 'move' _iterator[332638](332645 call _getIterator(332612 call followThis 0)))
      Defer
      {
        {
          (332664 call _freeIterator _iterator[332638])
        }
      }
      { scopeless type
        (332653 'move' _indexOfInterest[332637](332650 call iteratorIndex _iterator[332638]))
      }
      ForLoop[332639]
      {
        unknown idx[332657] "index var" "insert auto destroy"
        (332659 'move' idx[332657] _indexOfInterest[332637])
        { scopeless
          if(332632 call _cond_test(332619 call(332614 call . _htb c"isSlotFull") idx))
          {
            { scopeless
              (332630 yield(332627 call .(332626 call(332621 call . _htb c"table") idx) c"key"))
            }
          }
        }
        label _continueLabel[332642]
        _indexOfInterest[332637]
        _iterator[332638]
      }
      label _breakLabel[332643]
    }
  }
  where {
    (332606 call == tag(332603 call . iterKind c"follower"))
  } function set[333080](?).writeThis[332681](arg _mt[333148]:_MT[238], const arg this[333146]:set[333080](?), arg ch[332678] :
  channel) : _unknown[51] throws "method" "primary method"
  {
    { scopeless
      const tmp[332783] "const" "temp"
      (332785 'move' tmp[332783](332781 'deref'(332780 '_wide_get_locale' this)))
      {
        {
          (332686 call _enter)
          Defer
          {
            { scopeless
              (332691 call _leave)
            }
          }
          { scopeless
            unknown count[332696] 1
            (332699 'end of statement')
          }
          (332702 call <~> ch "{")
          {
            unknown _indexOfInterest[332742] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[332743] "expr temp" "temp"
            (332752 'move' _iterator[332743](332750 call _getIterator this))
            Defer
            {
              {
                (332768 call _freeIterator _iterator[332743])
              }
            }
            { scopeless type
              (332757 'move' _indexOfInterest[332742](332754 call iteratorIndex _iterator[332743]))
            }
            ForLoop[332744]
            {
              unknown x[332761] "index var" "insert auto destroy"
              (332763 'move' x[332761] _indexOfInterest[332742])
              {
                if(332737 call _cond_test(332715 call <= count(332713 call -(332709 call . _htb c"tableNumFullSlots") 1)))
                {
                  (332719 call += count 1)
                  (332728 call <~>(332725 call <~> ch x) ", ")
                }
                {
                  (332733 call <~> ch x)
                }
              }
              label _continueLabel[332747]
              _indexOfInterest[332742]
              _iterator[332743]
            }
            label _breakLabel[332748]
          }
          (332777 call <~> ch "}")
        }
        (332788 'on block' 0 tmp[332783])
      }
    }
  } function set[333080](?).isEmpty[332796](arg _mt[333152]:_MT[238], const arg this[333150]:set[333080](?)) : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      unknown result[332800] 0
      (332803 'end of statement')
    }
    { scopeless
      const tmp[332831] "const" "temp"
      (332833 'move' tmp[332831](332829 'deref'(332828 '_wide_get_locale' this)))
      {
        {
          (332808 call _enter)
          Defer
          {
            { scopeless
              (332813 call _leave)
            }
          }
          (332825 call = result(332823 call ==(332819 call . _htb c"tableNumFullSlots") 0))
        }
        (332836 'on block' 0 tmp[332831])
      }
    }
    (332840 return result)
  }
  { scopeless type
    bool[10]
  } function set[333080](?).size[332847](arg _mt[333156]:_MT[238], const arg this[333154]:set[333080](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    { scopeless
      unknown result[332850] 0
      (332853 'end of statement')
    }
    { scopeless
      const tmp[332878] "const" "temp"
      (332880 'move' tmp[332878](332876 'deref'(332875 '_wide_get_locale' this)))
      {
        {
          (332858 call _enter)
          Defer
          {
            { scopeless
              (332863 call _leave)
            }
          }
          (332872 call = result(332869 call . _htb c"tableNumFullSlots"))
        }
        (332883 'on block' 0 tmp[332878])
      }
    }
    (332887 return result)
  } function set[333080](?).toArray[332893](arg _mt[333160]:_MT[238], const arg this[333158]:set[333080](?)) : _unknown[51] "method" "primary method"
  {
    (332901 call _enter)
    Defer
    {
      { scopeless
        (332906 call _leave)
      }
    }
    { scopeless
      unknown result[332925](332923 call chpl__buildArrayRuntimeType(332921 call chpl__ensureDomainExpr(332917 call #(332911 call chpl_build_low_bounded_range 0)(332914 call . _htb c"tableNumFullSlots"))) eltType)
      (332928 'end of statement')
    }
    if(332965 call _cond_test(332933 call !(332932 call isCopyableType eltType)))
    {
      { scopeless
        (332963 call compilerError(332960 call +(332957 call + "Cannot create array because set element type "(332955 call _cast string[26] eltType)) " is not copyable"))
      }
    }
    { scopeless
      const tmp[333065] "const" "temp"
      (333067 'move' tmp[333065](333063 'deref'(333062 '_wide_get_locale' this)))
      {
        {
          if(333057 call _cond_test(332976 call !=(332972 call . _htb c"tableNumFullSlots") 0))
          {
            { scopeless
              unknown count[332979] 0
              (332982 'end of statement')
            }
            { scopeless
              unknown array[332999](332997 call chpl__buildArrayRuntimeType(332995 call chpl__ensureDomainExpr(332991 call #(332985 call chpl_build_low_bounded_range 0)(332988 call . _htb c"tableNumFullSlots"))) eltType)
              (333002 'end of statement')
            }
            {
              unknown _indexOfInterest[333019] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[333020] "expr temp" "temp"
              (333029 'move' _iterator[333020](333027 call _getIterator this))
              Defer
              {
                {
                  (333045 call _freeIterator _iterator[333020])
                }
              }
              { scopeless type
                (333034 'move' _indexOfInterest[333019](333031 call iteratorIndex _iterator[333020]))
              }
              ForLoop[333021]
              {
                unknown x[333038] "index var" "insert auto destroy"
                (333040 'move' x[333038] _indexOfInterest[333019])
                {
                  (333010 call =(333008 call array count) x)
                  (333016 call += count 1)
                }
                label _continueLabel[333024]
                _indexOfInterest[333019]
                _iterator[333020]
              }
              label _breakLabel[333025]
            }
            (333054 call = result array)
          }
        }
        (333070 'on block' 0 tmp[333065])
      }
    }
    (333074 return result)
  }
  { scopeless type
    (332896 call chpl__buildArrayRuntimeType nil[44] eltType)
  }
  function =[333174](ref arg lhs[333171] :
  (333170 call set unknown t[333166] ?[260]), const  ref arg rhs[333181] :
  (333180 call set t ?[260])) : _unknown[51] "assignop"
  {
    (333189 call(333185 call . lhs c"clear"))
    {
      unknown _indexOfInterest[333202] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[333203] "expr temp" "temp"
      (333212 'move' _iterator[333203](333210 call _getIterator rhs))
      Defer
      {
        {
          (333228 call _freeIterator _iterator[333203])
        }
      }
      { scopeless type
        (333217 'move' _indexOfInterest[333202](333214 call iteratorIndex _iterator[333203]))
      }
      ForLoop[333204]
      {
        unknown x[333221] "index var" "insert auto destroy"
        (333223 'move' x[333221] _indexOfInterest[333202])
        { scopeless
          (333200 call(333195 call . lhs c"add") x)
        }
        label _continueLabel[333207]
        _indexOfInterest[333202]
        _iterator[333203]
      }
      label _breakLabel[333208]
    }
  }
  function |[333248](const  ref arg a[333245] :
  (333244 call set unknown t[333240] ?[260]), const  ref arg b[333255] :
  (333254 call set t ?[260])) : _unknown[51]
  {
    { scopeless
      unknown result[333276](333275 call set t(333273 call ||(333266 call . a c"parSafe")(333270 call . b c"parSafe")))
      (333279 'end of statement')
    }
    (333283 call = result a)
    (333288 call |= result b)
    (333292 return result)
  }
  { scopeless type
    (333261 call set t)
  }
  function |=[333308](ref arg lhs[333305] :
  (333304 call set unknown t[333300] ?[260]), const  ref arg rhs[333315] :
  (333314 call set t ?[260])) : _unknown[51] "assignop"
  {
    {
      unknown _indexOfInterest[333328] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[333329] "expr temp" "temp"
      (333338 'move' _iterator[333329](333336 call _getIterator rhs))
      Defer
      {
        {
          (333354 call _freeIterator _iterator[333329])
        }
      }
      { scopeless type
        (333343 'move' _indexOfInterest[333328](333340 call iteratorIndex _iterator[333329]))
      }
      ForLoop[333330]
      {
        unknown x[333347] "index var" "insert auto destroy"
        (333349 'move' x[333347] _indexOfInterest[333328])
        { scopeless
          (333326 call(333321 call . lhs c"add") x)
        }
        label _continueLabel[333333]
        _indexOfInterest[333328]
        _iterator[333329]
      }
      label _breakLabel[333334]
    }
  }
  function +[333375](const  ref arg a[333372] :
  (333371 call set unknown t[333367] ?[260]), const  ref arg b[333382] :
  (333381 call set t ?[260])) : _unknown[51]
  {
    (333394 return(333392 call | a b))
  }
  { scopeless type
    (333389 call set t ?[260])
  }
  function +=[333411](ref arg lhs[333408] :
  (333407 call set unknown t[333403] ?[260]), const  ref arg rhs[333418] :
  (333417 call set t ?[260])) : _unknown[51] "assignop"
  {
    (333423 call |= lhs rhs)
  }
  function -[333440](const  ref arg a[333437] :
  (333436 call set unknown t[333432] ?[260]), const  ref arg b[333447] :
  (333446 call set t ?[260])) : _unknown[51]
  {
    { scopeless
      unknown result[333469](333454 'new'(333468 call set t(333466 call ||(333459 call . a c"parSafe")(333463 call . b c"parSafe"))))
      (333472 'end of statement')
    }
    if(333571 call _cond_test(333482 call &&(333475 call . a c"parSafe")(333479 call . b c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[333509] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          if(333503 call _cond_test(333493 call !(333492 call(333487 call . b c"contains") x)))
          {
            { scopeless
              (333501 call(333496 call . result c"add") x)
            }
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[333537] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[333538] "expr temp" "temp"
        (333547 'move' _iterator[333538](333545 call _getIterator a))
        Defer
        {
          {
            (333563 call _freeIterator _iterator[333538])
          }
        }
        { scopeless type
          (333552 'move' _indexOfInterest[333537](333549 call iteratorIndex _iterator[333538]))
        }
        ForLoop[333539]
        {
          unknown x[333556] "index var" "insert auto destroy"
          (333558 'move' x[333556] _indexOfInterest[333537])
          { scopeless
            if(333532 call _cond_test(333522 call !(333521 call(333516 call . b c"contains") x)))
            {
              { scopeless
                (333530 call(333525 call . result c"add") x)
              }
            }
          }
          label _continueLabel[333542]
          _indexOfInterest[333537]
          _iterator[333538]
        }
        label _breakLabel[333543]
      }
    }
    (333576 return result)
  }
  { scopeless type
    (333453 call set t)
  }
  function -=[333592](ref arg lhs[333589] :
  (333588 call set unknown t[333584] ?[260]), const  ref arg rhs[333599] :
  (333598 call set t ?[260])) : _unknown[51] "assignop"
  {
    if(333671 call _cond_test(333610 call &&(333603 call . lhs c"parSafe")(333607 call . rhs c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[333623] "index var" "insert auto destroy"
        iterated expressions:
          rhs
        shadow variables:
        other variables
          forall body
        {
          (333620 call(333615 call . lhs c"remove") x)
        }
      }
    }
    {
      {
        unknown _indexOfInterest[333637] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[333638] "expr temp" "temp"
        (333647 'move' _iterator[333638](333645 call _getIterator rhs))
        Defer
        {
          {
            (333663 call _freeIterator _iterator[333638])
          }
        }
        { scopeless type
          (333652 'move' _indexOfInterest[333637](333649 call iteratorIndex _iterator[333638]))
        }
        ForLoop[333639]
        {
          unknown x[333656] "index var" "insert auto destroy"
          (333658 'move' x[333656] _indexOfInterest[333637])
          { scopeless
            (333635 call(333630 call . lhs c"remove") x)
          }
          label _continueLabel[333642]
          _indexOfInterest[333637]
          _iterator[333638]
        }
        label _breakLabel[333643]
      }
    }
  }
  function &[333689](const  ref arg a[333686] :
  (333685 call set unknown t[333681] ?[260]), const  ref arg b[333696] :
  (333695 call set t ?[260])) : _unknown[51]
  {
    { scopeless
      unknown result[333717](333716 call set t(333714 call ||(333707 call . a c"parSafe")(333711 call . b c"parSafe")))
      (333720 'end of statement')
    }
    if(333928 call _cond_test(333730 call <=(333723 call . a c"size")(333727 call . b c"size")))
    {
      if(333825 call _cond_test(333740 call &&(333733 call . a c"parSafe")(333737 call . b c"parSafe")))
      {
        Forall {
          induction variables:
            
            unknown x[333765] "index var" "insert auto destroy"
          iterated expressions:
            a
          shadow variables:
          other variables
            forall body
          {
            if(333759 call _cond_test(333750 call(333745 call . b c"contains") x))
            {
              { scopeless
                (333757 call(333752 call . result c"add") x)
              }
            }
          }
        }
      }
      {
        {
          unknown _indexOfInterest[333791] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[333792] "expr temp" "temp"
          (333801 'move' _iterator[333792](333799 call _getIterator a))
          Defer
          {
            {
              (333817 call _freeIterator _iterator[333792])
            }
          }
          { scopeless type
            (333806 'move' _indexOfInterest[333791](333803 call iteratorIndex _iterator[333792]))
          }
          ForLoop[333793]
          {
            unknown x[333810] "index var" "insert auto destroy"
            (333812 'move' x[333810] _indexOfInterest[333791])
            { scopeless
              if(333786 call _cond_test(333777 call(333772 call . b c"contains") x))
              {
                { scopeless
                  (333784 call(333779 call . result c"add") x)
                }
              }
            }
            label _continueLabel[333796]
            _indexOfInterest[333791]
            _iterator[333792]
          }
          label _breakLabel[333797]
        }
      }
    }
    {
      if(333923 call _cond_test(333838 call &&(333831 call . a c"parSafe")(333835 call . b c"parSafe")))
      {
        Forall {
          induction variables:
            
            unknown x[333863] "index var" "insert auto destroy"
          iterated expressions:
            b
          shadow variables:
          other variables
            forall body
          {
            if(333857 call _cond_test(333848 call(333843 call . a c"contains") x))
            {
              { scopeless
                (333855 call(333850 call . result c"add") x)
              }
            }
          }
        }
      }
      {
        {
          unknown _indexOfInterest[333889] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[333890] "expr temp" "temp"
          (333899 'move' _iterator[333890](333897 call _getIterator b))
          Defer
          {
            {
              (333915 call _freeIterator _iterator[333890])
            }
          }
          { scopeless type
            (333904 'move' _indexOfInterest[333889](333901 call iteratorIndex _iterator[333890]))
          }
          ForLoop[333891]
          {
            unknown x[333908] "index var" "insert auto destroy"
            (333910 'move' x[333908] _indexOfInterest[333889])
            { scopeless
              if(333884 call _cond_test(333875 call(333870 call . a c"contains") x))
              {
                { scopeless
                  (333882 call(333877 call . result c"add") x)
                }
              }
            }
            label _continueLabel[333894]
            _indexOfInterest[333889]
            _iterator[333890]
          }
          label _breakLabel[333895]
        }
      }
    }
    (333933 return result)
  }
  { scopeless type
    (333702 call set t)
  }
  function &=[333949](ref arg lhs[333946] :
  (333945 call set unknown t[333941] ?[260]), const  ref arg rhs[333956] :
  (333955 call set t ?[260])) : _unknown[51] "assignop"
  {
    { scopeless
      unknown result[333973](333972 call set t(333970 call ||(333963 call . lhs c"parSafe")(333967 call . rhs c"parSafe")))
      (333976 'end of statement')
    }
    if(334071 call _cond_test(333986 call &&(333979 call . lhs c"parSafe")(333983 call . rhs c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[334011] "index var" "insert auto destroy"
        iterated expressions:
          lhs
        shadow variables:
        other variables
          forall body
        {
          if(334005 call _cond_test(333996 call(333991 call . rhs c"contains") x))
          {
            { scopeless
              (334003 call(333998 call . result c"add") x)
            }
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[334037] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[334038] "expr temp" "temp"
        (334047 'move' _iterator[334038](334045 call _getIterator lhs))
        Defer
        {
          {
            (334063 call _freeIterator _iterator[334038])
          }
        }
        { scopeless type
          (334052 'move' _indexOfInterest[334037](334049 call iteratorIndex _iterator[334038]))
        }
        ForLoop[334039]
        {
          unknown x[334056] "index var" "insert auto destroy"
          (334058 'move' x[334056] _indexOfInterest[334037])
          { scopeless
            if(334032 call _cond_test(334023 call(334018 call . rhs c"contains") x))
            {
              { scopeless
                (334030 call(334025 call . result c"add") x)
              }
            }
          }
          label _continueLabel[334042]
          _indexOfInterest[334037]
          _iterator[334038]
        }
        label _breakLabel[334043]
      }
    }
    (334077 call = lhs result)
  }
  function ^[334093](const  ref arg a[334090] :
  (334089 call set unknown t[334085] ?[260]), const  ref arg b[334100] :
  (334099 call set t ?[260])) : _unknown[51]
  {
    { scopeless
      unknown result[334121](334120 call set t(334118 call ||(334111 call . a c"parSafe")(334115 call . b c"parSafe")))
      (334124 'end of statement')
    }
    if(334158 call _cond_test(334134 call <=(334127 call . a c"size")(334131 call . b c"size")))
    {
      (334138 call = result b)
      (334144 call ^= result a)
    }
    {
      (334149 call = result a)
      (334155 call ^= result b)
    }
    (334163 return result)
  }
  { scopeless type
    (334106 call set t)
  }
  function ^=[334179](ref arg lhs[334176] :
  (334175 call set unknown t[334171] ?[260]), const  ref arg rhs[334186] :
  (334185 call set t ?[260])) : _unknown[51] "assignop"
  {
    if(334302 call _cond_test(334197 call &&(334190 call . lhs c"parSafe")(334194 call . rhs c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[334232] "index var" "insert auto destroy"
        iterated expressions:
          rhs
        shadow variables:
        other variables
          forall body
        {
          if(334226 call _cond_test(334207 call(334202 call . lhs c"contains") x))
          {
            (334214 call(334209 call . lhs c"remove") x)
          }
          {
            (334223 call(334218 call . lhs c"add") x)
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[334268] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[334269] "expr temp" "temp"
        (334278 'move' _iterator[334269](334276 call _getIterator rhs))
        Defer
        {
          {
            (334294 call _freeIterator _iterator[334269])
          }
        }
        { scopeless type
          (334283 'move' _indexOfInterest[334268](334280 call iteratorIndex _iterator[334269]))
        }
        ForLoop[334270]
        {
          unknown x[334287] "index var" "insert auto destroy"
          (334289 'move' x[334287] _indexOfInterest[334268])
          {
            if(334263 call _cond_test(334244 call(334239 call . lhs c"contains") x))
            {
              (334251 call(334246 call . lhs c"remove") x)
            }
            {
              (334260 call(334255 call . lhs c"add") x)
            }
          }
          label _continueLabel[334273]
          _indexOfInterest[334268]
          _iterator[334269]
        }
        label _breakLabel[334274]
      }
    }
  }
  function ==[334320](const  ref arg a[334317] :
  (334316 call set unknown t[334312] ?[260]), const  ref arg b[334327] :
  (334326 call set t ?[260])) : _unknown[51]
  {
    if(334344 call _cond_test(334339 call !=(334332 call . a c"size")(334336 call . b c"size")))
    {
      { scopeless
        (334342 return 0)
      }
    }
    { scopeless
      unknown result[334351] 1
      (334354 'end of statement')
    }
    if(334444 call _cond_test(334363 call &&(334356 call . a c"parSafe")(334360 call . b c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[334387] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          if(334381 call _cond_test(334374 call !(334373 call(334368 call . b c"contains") x)))
          {
            { scopeless
              (334378 call = result 0)
            }
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[334410] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[334411] "expr temp" "temp"
        (334420 'move' _iterator[334411](334418 call _getIterator a))
        Defer
        {
          {
            (334436 call _freeIterator _iterator[334411])
          }
        }
        { scopeless type
          (334425 'move' _indexOfInterest[334410](334422 call iteratorIndex _iterator[334411]))
        }
        ForLoop[334412]
        {
          unknown x[334429] "index var" "insert auto destroy"
          (334431 'move' x[334429] _indexOfInterest[334410])
          { scopeless
            if(334405 call _cond_test(334400 call !(334399 call(334394 call . b c"contains") x)))
            {
              { scopeless
                (334403 return 0)
              }
            }
          }
          label _continueLabel[334415]
          _indexOfInterest[334410]
          _iterator[334411]
        }
        label _breakLabel[334416]
      }
    }
    (334449 return result)
  }
  { scopeless type
    bool[10]
  }
  function !=[334465](const  ref arg a[334462] :
  (334461 call set unknown t[334457] ?[260]), const  ref arg b[334472] :
  (334471 call set t ?[260])) : _unknown[51]
  {
    (334482 return(334480 call !(334478 call == a b)))
  }
  { scopeless type
    bool[10]
  }
  function <[334499](const  ref arg a[334496] :
  (334495 call set unknown t[334491] ?[260]), const  ref arg b[334506] :
  (334505 call set t ?[260])) : _unknown[51]
  {
    if(334523 call _cond_test(334518 call >=(334511 call . a c"size")(334515 call . b c"size")))
    {
      { scopeless
        (334521 return 0)
      }
    }
    (334533 return(334531 call <= a b))
  }
  { scopeless type
    bool[10]
  }
  function <=[334549](const  ref arg a[334546] :
  (334545 call set unknown t[334541] ?[260]), const  ref arg b[334556] :
  (334555 call set t ?[260])) : _unknown[51]
  {
    if(334573 call _cond_test(334568 call >(334561 call . a c"size")(334565 call . b c"size")))
    {
      { scopeless
        (334571 return 0)
      }
    }
    { scopeless
      unknown result[334580] 1
      (334583 'end of statement')
    }
    if(334673 call _cond_test(334592 call &&(334585 call . a c"parSafe")(334589 call . b c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[334616] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          if(334610 call _cond_test(334603 call !(334602 call(334597 call . b c"contains") x)))
          {
            { scopeless
              (334607 call = result 0)
            }
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[334639] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[334640] "expr temp" "temp"
        (334649 'move' _iterator[334640](334647 call _getIterator a))
        Defer
        {
          {
            (334665 call _freeIterator _iterator[334640])
          }
        }
        { scopeless type
          (334654 'move' _indexOfInterest[334639](334651 call iteratorIndex _iterator[334640]))
        }
        ForLoop[334641]
        {
          unknown x[334658] "index var" "insert auto destroy"
          (334660 'move' x[334658] _indexOfInterest[334639])
          { scopeless
            if(334634 call _cond_test(334629 call !(334628 call(334623 call . b c"contains") x)))
            {
              { scopeless
                (334632 return 0)
              }
            }
          }
          label _continueLabel[334644]
          _indexOfInterest[334639]
          _iterator[334640]
        }
        label _breakLabel[334645]
      }
    }
    (334678 return result)
  }
  { scopeless type
    bool[10]
  }
  function >[334694](const  ref arg a[334691] :
  (334690 call set unknown t[334686] ?[260]), const  ref arg b[334701] :
  (334700 call set t ?[260])) : _unknown[51]
  {
    if(334718 call _cond_test(334713 call <=(334706 call . a c"size")(334710 call . b c"size")))
    {
      { scopeless
        (334716 return 0)
      }
    }
    (334728 return(334726 call >= a b))
  }
  { scopeless type
    bool[10]
  }
  function >=[334744](const  ref arg a[334741] :
  (334740 call set unknown t[334736] ?[260]), const  ref arg b[334751] :
  (334750 call set t ?[260])) : _unknown[51]
  {
    if(334768 call _cond_test(334763 call <(334756 call . a c"size")(334760 call . b c"size")))
    {
      { scopeless
        (334766 return 0)
      }
    }
    { scopeless
      unknown result[334775] 1
      (334778 'end of statement')
    }
    if(334868 call _cond_test(334787 call &&(334780 call . a c"parSafe")(334784 call . b c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[334811] "index var" "insert auto destroy"
        iterated expressions:
          b
        shadow variables:
        other variables
          forall body
        {
          if(334805 call _cond_test(334798 call !(334797 call(334792 call . a c"contains") x)))
          {
            { scopeless
              (334802 call = result 0)
            }
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[334834] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[334835] "expr temp" "temp"
        (334844 'move' _iterator[334835](334842 call _getIterator b))
        Defer
        {
          {
            (334860 call _freeIterator _iterator[334835])
          }
        }
        { scopeless type
          (334849 'move' _indexOfInterest[334834](334846 call iteratorIndex _iterator[334835]))
        }
        ForLoop[334836]
        {
          unknown x[334853] "index var" "insert auto destroy"
          (334855 'move' x[334853] _indexOfInterest[334834])
          { scopeless
            if(334829 call _cond_test(334824 call !(334823 call(334818 call . a c"contains") x)))
            {
              { scopeless
                (334827 return 0)
              }
            }
          }
          label _continueLabel[334839]
          _indexOfInterest[334834]
          _iterator[334835]
        }
        label _breakLabel[334840]
      }
    }
    (334873 return result)
  }
  { scopeless type
    bool[10]
  }
}