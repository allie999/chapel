AST dump for Set after pass parse.
Module use list: 

{
  (353131 'use' ChapelStandard)
  (331310 'import' ChapelLocks)
  (331314 'use' IO)
  (331317 'use' Reflection)
  (331320 'use' ChapelHashtable)
  { scopeless
    unknown _sanityChecks[331323] "no doc" "param" "private" 1
    (331326 'end of statement')
  }
  function _sanity[331333](arg expr[331330] :
  bool[10]) : _unknown[51] "inline" "private"
  {
    if(331341 call _cond_test _sanityChecks)
    {
      { scopeless
        (331339 call assert expr)
      }
    }
  }
  unknown _lockType[331353] "no doc" "type variable"(331350 call . ChapelLocks c"chpl_LocalSpinlock")
  type _LockWrapper[331394] unknown lock$[331361](331357 'new'(331360 call _lockType)) function _LockWrapper[331394].lock[331367](arg _mt[331398]:_MT[238], arg this[331396]:_LockWrapper[331394]) : _unknown[51] "inline" "method" "primary method"
  {
    (331374 call(331370 call . lock$ c"lock"))
  } function _LockWrapper[331394].unlock[331381](arg _mt[331402]:_MT[238], arg this[331400]:_LockWrapper[331394]) : _unknown[51] "inline" "method" "primary method"
  {
    (331388 call(331384 call . lock$ c"unlock"))
  }
  function _checkElementType[331409](arg t[331407]:_any[178](?)) : _unknown[51] "no doc"
  {
    if(331466 call _cond_test(331414 call isGenericType t))
    {
      (331441 call compilerWarning(331437 call + "creating a set with element type "(331435 call _cast string[26] t)) 2)
      (331464 call compilerError "set element type cannot currently be generic" 2)
    }
  }
  type set[333167](?) unknown eltType[331474] "type variable" unknown parSafe[331478] "param" 0 unknown _lock$[331491] "no doc"(331488 IfExpr  parSafe then
  { scopeless
    (331483 'new'(331486 call _LockWrapper))
  } else
  { scopeless
    none[57]
  } ) unknown _htb[331500] "no doc"(331499 call chpl__hashtable eltType nothing[7]) function set[333167](?).init[331508](arg _mt[333171]:_MT[238], arg this[333169]:set[333167](?), arg eltType[331506]:_any[178](?), param arg parSafe[331511] =
  0) : _unknown[51] "method" "primary method"
  {
    (331517 call _checkElementType eltType)
    (331525 call =(331521 call . this c"eltType") eltType)
    (331533 call =(331529 call . this c"parSafe") parSafe)
  } function set[333167](?)._addElem[331544](arg _mt[333175]:_MT[238], arg this[333173]:set[333167](?), in arg elem[331541] :
  eltType) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      unknown tmp[331559] "temp"(331558 call(331553 call . _htb c"findAvailableSlot") elem)
      (331566 call _check_tuple_var_decl tmp[331559] 2)
      unknown isFullSlot[331547](331560 call tmp[331559] 0)
      unknown idx[331549](331563 call tmp[331559] 1)
      (331571 'end of statement')
    }
    if(331577 call _cond_test isFullSlot)
    {
      { scopeless
        (331575 return 0)
      }
    }
    (331590 call(331583 call . _htb c"fillSlot") idx elem none[57])
    (331593 return 1)
  }
  { scopeless type
    bool[10]
  } function set[333167](?).init[331602](arg _mt[333179]:_MT[238], arg this[333177]:set[333167](?), arg eltType[331600]:_any[178](?), arg iterable[331604]:_any[178](?), param arg parSafe[331607] =
  0) : _unknown[51] "method" "primary method"
  {
    (331624 call _checkElementType eltType)
    (331632 call =(331628 call . this c"eltType") eltType)
    (331640 call =(331636 call . this c"parSafe") parSafe)
    (331648 call(331644 call . this c"complete"))
    {
      unknown _indexOfInterest[331657] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[331658] "expr temp" "temp"
      (331667 'move' _iterator[331658](331665 call _getIterator iterable))
      Defer
      {
        {
          (331683 call _freeIterator _iterator[331658])
        }
      }
      { scopeless type
        (331672 'move' _indexOfInterest[331657](331669 call iteratorIndex _iterator[331658]))
      }
      ForLoop[331659]
      {
        unknown elem[331676] "index var" "insert auto destroy"
        (331678 'move' elem[331676] _indexOfInterest[331657])
        { scopeless
          (331655 call _addElem elem)
        }
        label _continueLabel[331662]
        _indexOfInterest[331657]
        _iterator[331658]
      }
      label _breakLabel[331663]
    }
  }
  where {
    (331614 call canResolveMethod iterable "these")
  }
  {
    (331619 call <(331616 'lifetime_of' this)(331618 'lifetime_of' iterable))
  } function set[333167](?).init=[331705](arg _mt[333183]:_MT[238], arg this[333181]:set[333167](?), const  ref arg other[331702] :
  (331701 call set unknown t[331697] ?[260])) : _unknown[51] "method" "primary method"
  {
    (331718 call =(331714 call . this c"eltType") t)
    (331730 call =(331723 call . this c"parSafe")(331727 call . other c"parSafe"))
    (331738 call(331734 call . this c"complete"))
    if(331828 call _cond_test(331744 call !(331743 call isCopyableType eltType)))
    {
      { scopeless
        (331826 call compilerError(331823 call +(331804 call +(331798 call +(331779 call +(331772 call +(331769 call + "Cannot initialize "(331767 call _cast string[26](331765 'typeof' this))) " from ")(331777 call _cast string[26](331775 'typeof' other))) " because element type ")(331802 call _cast string[26] eltType)) " is not copyable"))
      }
    }
    {
      unknown _indexOfInterest[331840] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[331841] "expr temp" "temp"
      (331850 'move' _iterator[331841](331848 call _getIterator other))
      Defer
      {
        {
          (331866 call _freeIterator _iterator[331841])
        }
      }
      { scopeless type
        (331855 'move' _indexOfInterest[331840](331852 call iteratorIndex _iterator[331841]))
      }
      ForLoop[331842]
      {
        unknown elem[331859] "index var" "insert auto destroy"
        (331861 'move' elem[331859] _indexOfInterest[331840])
        { scopeless
          (331838 call _addElem elem)
        }
        label _continueLabel[331845]
        _indexOfInterest[331840]
        _iterator[331841]
      }
      label _breakLabel[331846]
    }
  }
  {
    (331711 call <(331708 'lifetime_of' this)(331710 'lifetime_of' other))
  } function set[333167](?)._enter[331878](arg _mt[333187]:_MT[238], arg this[333185]:set[333167](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(331901 call _cond_test parSafe)
    {
      { scopeless
        {
          const tmp[331893] "const" "temp"
          (331894 'move' tmp[331893](331891 'deref'(331890 '_wide_get_locale' this)))
          {
            (331887 call(331883 call . _lock$ c"lock"))
          }
          (331897 'elided on block' 0 tmp[331893])
        }
      }
    }
  } function set[333167](?)._leave[331911](arg _mt[333191]:_MT[238], arg this[333189]:set[333167](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(331934 call _cond_test parSafe)
    {
      { scopeless
        {
          const tmp[331926] "const" "temp"
          (331927 'move' tmp[331926](331924 'deref'(331923 '_wide_get_locale' this)))
          {
            (331920 call(331916 call . _lock$ c"unlock"))
          }
          (331930 'elided on block' 0 tmp[331926])
        }
      }
    }
  } function set[333167](?).add[331948](arg _mt[333195]:_MT[238], ref arg this[333193]:set[333167](?), in arg x[331945] :
  eltType) : _unknown[51] "method" "primary method"
  {
    (331958 call _enter)
    Defer
    {
      { scopeless
        (331963 call _leave)
      }
    }
    (331970 call _addElem x)
  }
  {
    (331954 call <(331951 'lifetime_of' this)(331953 'lifetime_of' x))
  } function set[333167](?).contains[331981](arg _mt[333199]:_MT[238], const arg this[333197]:set[333167](?), const  ref arg x[331978] :
  eltType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[331985] 0
      (331988 'end of statement')
    }
    {
      const tmp[332032] "const" "temp"
      (332033 'move' tmp[332032](332030 'deref'(332029 '_wide_get_locale' this)))
      {
        (331993 call _enter)
        Defer
        {
          { scopeless
            (331998 call _leave)
          }
        }
        { scopeless
          unknown tmp[332014] "temp"(332013 call(332008 call . _htb c"findFullSlot") x)
          (332018 call _check_tuple_var_decl tmp[332014] 2)
          unknown hasFoundSlot[332002](332015 call tmp[332014] 0)
          (332023 'end of statement')
        }
        (332026 call = result hasFoundSlot)
      }
      (332036 'elided on block' 0 tmp[332032])
    }
    (332041 return result)
  }
  { scopeless type
    bool[10]
  } function set[333167](?).isDisjoint[332056](arg _mt[333203]:_MT[238], const arg this[333201]:set[333167](?), const  ref arg other[332053] :
  (332052 call set eltType ?[260])) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[332060] 1
      (332063 'end of statement')
    }
    {
      const tmp[332155] "const" "temp"
      (332156 'move' tmp[332155](332153 'deref'(332152 '_wide_get_locale' this)))
      {
        (332068 call _enter)
        Defer
        {
          { scopeless
            (332073 call _leave)
          }
        }
        if(332148 call _cond_test(332090 call !(332088 call ||(332079 call == size 0)(332086 call ==(332082 call . other c"size") 0))))
        {
          {
            unknown _indexOfInterest[332114] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[332115] "expr temp" "temp"
            (332124 'move' _iterator[332115](332122 call _getIterator other))
            Defer
            {
              {
                (332140 call _freeIterator _iterator[332115])
              }
            }
            { scopeless type
              (332129 'move' _indexOfInterest[332114](332126 call iteratorIndex _iterator[332115]))
            }
            ForLoop[332116]
            {
              unknown x[332133] "index var" "insert auto destroy"
              (332135 'move' x[332133] _indexOfInterest[332114])
              { scopeless
                if(332110 call _cond_test(332100 call(332095 call . this c"contains") x))
                {
                  (332103 call = result 0)
                  break nil[44]
                }
              }
              label _continueLabel[332119]
              _indexOfInterest[332114]
              _iterator[332115]
            }
            label _breakLabel[332120]
          }
        }
      }
      (332159 'elided on block' 0 tmp[332155])
    }
    (332164 return result)
  }
  { scopeless type
    bool[10]
  } function set[333167](?).isIntersecting[332179](arg _mt[333207]:_MT[238], const arg this[333205]:set[333167](?), const  ref arg other[332176] :
  (332175 call set eltType ?[260])) : _unknown[51] "method" "primary method"
  {
    (332188 return(332186 call !(332185 call isDisjoint other)))
  }
  { scopeless type
    bool[10]
  } function set[333167](?).remove[332200](arg _mt[333211]:_MT[238], ref arg this[333209]:set[333167](?), const  ref arg x[332197] :
  eltType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[332204] 0
      (332207 'end of statement')
    }
    {
      const tmp[332287] "const" "temp"
      (332288 'move' tmp[332287](332285 'deref'(332284 '_wide_get_locale' this)))
      {
        (332212 call _enter)
        Defer
        {
          { scopeless
            (332217 call _leave)
          }
        }
        { scopeless
          unknown tmp[332233] "temp"(332232 call(332227 call . _htb c"findFullSlot") x)
          (332240 call _check_tuple_var_decl tmp[332233] 2)
          unknown hasFoundSlot[332221](332234 call tmp[332233] 0)
          unknown idx[332223](332237 call tmp[332233] 1)
          (332245 'end of statement')
        }
        if(332280 call _cond_test hasFoundSlot)
        {
          { scopeless
            unknown key[332248] eltType
            (332251 'end of statement')
          }
          { scopeless
            unknown val[332254] nothing[7]
            (332257 'end of statement')
          }
          (332266 call(332259 call . _htb c"clearSlot") idx key val)
          (332273 call(332269 call . _htb c"maybeShrinkAfterRemove"))
          (332277 call = result 1)
        }
      }
      (332291 'elided on block' 0 tmp[332287])
    }
    (332296 return result)
  }
  { scopeless type
    bool[10]
  } function set[333167](?).clear[332303](arg _mt[333215]:_MT[238], ref arg this[333213]:set[333167](?)) : _unknown[51] "method" "primary method"
  {
    {
      const tmp[332413] "const" "temp"
      (332414 'move' tmp[332413](332411 'deref'(332410 '_wide_get_locale' this)))
      {
        (332308 call _enter)
        Defer
        {
          { scopeless
            (332313 call _leave)
          }
        }
        {
          unknown _indexOfInterest[332360] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[332361] "expr temp" "temp"
          (332370 'move' _iterator[332361](332368 call _getIterator(332380 call chpl_direct_counted_range_iter 0(332376 call . _htb c"tableSize"))))
          Defer
          {
            {
              (332396 call _freeIterator _iterator[332361])
            }
          }
          { scopeless type
            (332385 'move' _indexOfInterest[332360](332382 call iteratorIndex _iterator[332361]))
          }
          ForLoop[332362]
          {
            unknown idx[332389] "index var" "insert auto destroy"
            (332391 'move' idx[332389] _indexOfInterest[332360])
            {
              if(332355 call _cond_test(332333 call(332328 call . _htb c"isSlotFull") idx))
              {
                { scopeless
                  unknown key[332335] eltType
                  (332338 'end of statement')
                }
                { scopeless
                  unknown val[332341] nothing[7]
                  (332344 'end of statement')
                }
                (332353 call(332346 call . _htb c"clearSlot") idx key val)
              }
            }
            label _continueLabel[332365]
            _indexOfInterest[332360]
            _iterator[332361]
          }
          label _breakLabel[332366]
        }
        (332408 call(332404 call . _htb c"maybeShrinkAfterRemove"))
      }
      (332417 'elided on block' 0 tmp[332413])
    }
  } function set[333167](?).these[332426](arg _mt[333219]:_MT[238], const arg this[333217]:set[333167](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[332462] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[332463] "expr temp" "temp"
      (332472 'move' _iterator[332463](332470 call _getIterator(332482 call chpl_direct_counted_range_iter 0(332478 call . _htb c"tableSize"))))
      Defer
      {
        {
          (332498 call _freeIterator _iterator[332463])
        }
      }
      { scopeless type
        (332487 'move' _indexOfInterest[332462](332484 call iteratorIndex _iterator[332463]))
      }
      ForLoop[332464]
      {
        unknown idx[332491] "index var" "insert auto destroy"
        (332493 'move' idx[332491] _indexOfInterest[332462])
        { scopeless
          if(332457 call _cond_test(332444 call(332439 call . _htb c"isSlotFull") idx))
          {
            { scopeless
              (332455 yield(332452 call .(332451 call(332446 call . _htb c"table") idx) c"key"))
            }
          }
        }
        label _continueLabel[332467]
        _indexOfInterest[332462]
        _iterator[332463]
      }
      label _breakLabel[332468]
    }
  } function set[333167](?).these[332512](arg _mt[333223]:_MT[238], const arg this[333221]:set[333167](?), param arg tag[332510]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    { scopeless
      unknown space[332530](332528 call #(332522 call chpl_build_low_bounded_range 0)(332525 call . _htb c"tableSize"))
      (332533 'end of statement')
    }
    {
      unknown _indexOfInterest[332567] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[332568] "expr temp" "temp"
      (332577 'move' _iterator[332568](332575 call _getIterator(332542 call(332537 call . space c"these") tag)))
      Defer
      {
        {
          (332594 call _freeIterator _iterator[332568])
        }
      }
      { scopeless type
        (332583 'move' _indexOfInterest[332567](332580 call iteratorIndex _iterator[332568]))
      }
      ForLoop[332569]
      {
        unknown idx[332587] "index var" "insert auto destroy"
        (332589 'move' idx[332587] _indexOfInterest[332567])
        { scopeless
          if(332562 call _cond_test(332549 call(332544 call . _htb c"isSlotFull") idx))
          {
            { scopeless
              (332560 yield(332557 call .(332556 call(332551 call . _htb c"table") idx) c"key"))
            }
          }
        }
        label _continueLabel[332572]
        _indexOfInterest[332567]
        _iterator[332568]
      }
      label _breakLabel[332573]
    }
  }
  where {
    (332519 call == tag(332516 call . iterKind c"standalone"))
  } function set[333167](?).these[332608](arg _mt[333227]:_MT[238], const arg this[333225]:set[333167](?), param arg tag[332606]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    { scopeless
      unknown space[332626](332624 call #(332618 call chpl_build_low_bounded_range 0)(332621 call . _htb c"tableSize"))
      (332629 'end of statement')
    }
    {
      unknown _indexOfInterest[332643] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[332644] "expr temp" "temp"
      (332653 'move' _iterator[332644](332651 call _getIterator(332638 call(332633 call . space c"these") tag)))
      Defer
      {
        {
          (332670 call _freeIterator _iterator[332644])
        }
      }
      { scopeless type
        (332659 'move' _indexOfInterest[332643](332656 call iteratorIndex _iterator[332644]))
      }
      ForLoop[332645]
      {
        unknown followThis[332663] "index var" "insert auto destroy"
        (332665 'move' followThis[332663] _indexOfInterest[332643])
        {
          (332640 yield followThis)
        }
        label _continueLabel[332648]
        _indexOfInterest[332643]
        _iterator[332644]
      }
      label _breakLabel[332649]
    }
  }
  where {
    (332615 call == tag(332612 call . iterKind c"leader"))
  } function set[333167](?).these[332684](arg _mt[333231]:_MT[238], const arg this[333229]:set[333167](?), param arg tag[332682]:_any[178](?), arg followThis[332686]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    {
      unknown _indexOfInterest[332724] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[332725] "expr temp" "temp"
      (332734 'move' _iterator[332725](332732 call _getIterator(332699 call followThis 0)))
      Defer
      {
        {
          (332751 call _freeIterator _iterator[332725])
        }
      }
      { scopeless type
        (332740 'move' _indexOfInterest[332724](332737 call iteratorIndex _iterator[332725]))
      }
      ForLoop[332726]
      {
        unknown idx[332744] "index var" "insert auto destroy"
        (332746 'move' idx[332744] _indexOfInterest[332724])
        { scopeless
          if(332719 call _cond_test(332706 call(332701 call . _htb c"isSlotFull") idx))
          {
            { scopeless
              (332717 yield(332714 call .(332713 call(332708 call . _htb c"table") idx) c"key"))
            }
          }
        }
        label _continueLabel[332729]
        _indexOfInterest[332724]
        _iterator[332725]
      }
      label _breakLabel[332730]
    }
  }
  where {
    (332693 call == tag(332690 call . iterKind c"follower"))
  } function set[333167](?).writeThis[332768](arg _mt[333235]:_MT[238], const arg this[333233]:set[333167](?), arg ch[332765] :
  channel) : _unknown[51] throws "method" "primary method"
  {
    {
      const tmp[332870] "const" "temp"
      (332871 'move' tmp[332870](332868 'deref'(332867 '_wide_get_locale' this)))
      {
        (332773 call _enter)
        Defer
        {
          { scopeless
            (332778 call _leave)
          }
        }
        { scopeless
          unknown count[332783] 1
          (332786 'end of statement')
        }
        (332789 call <~> ch "{")
        {
          unknown _indexOfInterest[332829] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[332830] "expr temp" "temp"
          (332839 'move' _iterator[332830](332837 call _getIterator this))
          Defer
          {
            {
              (332855 call _freeIterator _iterator[332830])
            }
          }
          { scopeless type
            (332844 'move' _indexOfInterest[332829](332841 call iteratorIndex _iterator[332830]))
          }
          ForLoop[332831]
          {
            unknown x[332848] "index var" "insert auto destroy"
            (332850 'move' x[332848] _indexOfInterest[332829])
            {
              if(332824 call _cond_test(332802 call <= count(332800 call -(332796 call . _htb c"tableNumFullSlots") 1)))
              {
                (332806 call += count 1)
                (332815 call <~>(332812 call <~> ch x) ", ")
              }
              {
                (332820 call <~> ch x)
              }
            }
            label _continueLabel[332834]
            _indexOfInterest[332829]
            _iterator[332830]
          }
          label _breakLabel[332835]
        }
        (332864 call <~> ch "}")
      }
      (332874 'elided on block' 0 tmp[332870])
    }
  } function set[333167](?).isEmpty[332883](arg _mt[333239]:_MT[238], const arg this[333237]:set[333167](?)) : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      unknown result[332887] 0
      (332890 'end of statement')
    }
    {
      const tmp[332918] "const" "temp"
      (332919 'move' tmp[332918](332916 'deref'(332915 '_wide_get_locale' this)))
      {
        (332895 call _enter)
        Defer
        {
          { scopeless
            (332900 call _leave)
          }
        }
        (332912 call = result(332910 call ==(332906 call . _htb c"tableNumFullSlots") 0))
      }
      (332922 'elided on block' 0 tmp[332918])
    }
    (332927 return result)
  }
  { scopeless type
    bool[10]
  } function set[333167](?).size[332934](arg _mt[333243]:_MT[238], const arg this[333241]:set[333167](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    { scopeless
      unknown result[332937] 0
      (332940 'end of statement')
    }
    {
      const tmp[332965] "const" "temp"
      (332966 'move' tmp[332965](332963 'deref'(332962 '_wide_get_locale' this)))
      {
        (332945 call _enter)
        Defer
        {
          { scopeless
            (332950 call _leave)
          }
        }
        (332959 call = result(332956 call . _htb c"tableNumFullSlots"))
      }
      (332969 'elided on block' 0 tmp[332965])
    }
    (332974 return result)
  } function set[333167](?).toArray[332980](arg _mt[333247]:_MT[238], const arg this[333245]:set[333167](?)) : _unknown[51] "method" "primary method"
  {
    (332988 call _enter)
    Defer
    {
      { scopeless
        (332993 call _leave)
      }
    }
    { scopeless
      unknown result[333012](333010 call chpl__buildArrayRuntimeType(333008 call chpl__ensureDomainExpr(333004 call #(332998 call chpl_build_low_bounded_range 0)(333001 call . _htb c"tableNumFullSlots"))) eltType)
      (333015 'end of statement')
    }
    if(333052 call _cond_test(333020 call !(333019 call isCopyableType eltType)))
    {
      { scopeless
        (333050 call compilerError(333047 call +(333044 call + "Cannot create array because set element type "(333042 call _cast string[26] eltType)) " is not copyable"))
      }
    }
    {
      const tmp[333152] "const" "temp"
      (333153 'move' tmp[333152](333150 'deref'(333149 '_wide_get_locale' this)))
      {
        if(333144 call _cond_test(333063 call !=(333059 call . _htb c"tableNumFullSlots") 0))
        {
          { scopeless
            unknown count[333066] 0
            (333069 'end of statement')
          }
          { scopeless
            unknown array[333086](333084 call chpl__buildArrayRuntimeType(333082 call chpl__ensureDomainExpr(333078 call #(333072 call chpl_build_low_bounded_range 0)(333075 call . _htb c"tableNumFullSlots"))) eltType)
            (333089 'end of statement')
          }
          {
            unknown _indexOfInterest[333106] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[333107] "expr temp" "temp"
            (333116 'move' _iterator[333107](333114 call _getIterator this))
            Defer
            {
              {
                (333132 call _freeIterator _iterator[333107])
              }
            }
            { scopeless type
              (333121 'move' _indexOfInterest[333106](333118 call iteratorIndex _iterator[333107]))
            }
            ForLoop[333108]
            {
              unknown x[333125] "index var" "insert auto destroy"
              (333127 'move' x[333125] _indexOfInterest[333106])
              {
                (333097 call =(333095 call array count) x)
                (333103 call += count 1)
              }
              label _continueLabel[333111]
              _indexOfInterest[333106]
              _iterator[333107]
            }
            label _breakLabel[333112]
          }
          (333141 call = result array)
        }
      }
      (333156 'elided on block' 0 tmp[333152])
    }
    (333161 return result)
  }
  { scopeless type
    (332983 call chpl__buildArrayRuntimeType nil[44] eltType)
  }
  function =[333261](ref arg lhs[333258] :
  (333257 call set unknown t[333253] ?[260]), const  ref arg rhs[333268] :
  (333267 call set t ?[260])) : _unknown[51] "assignop"
  {
    (333276 call(333272 call . lhs c"clear"))
    {
      unknown _indexOfInterest[333289] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[333290] "expr temp" "temp"
      (333299 'move' _iterator[333290](333297 call _getIterator rhs))
      Defer
      {
        {
          (333315 call _freeIterator _iterator[333290])
        }
      }
      { scopeless type
        (333304 'move' _indexOfInterest[333289](333301 call iteratorIndex _iterator[333290]))
      }
      ForLoop[333291]
      {
        unknown x[333308] "index var" "insert auto destroy"
        (333310 'move' x[333308] _indexOfInterest[333289])
        { scopeless
          (333287 call(333282 call . lhs c"add") x)
        }
        label _continueLabel[333294]
        _indexOfInterest[333289]
        _iterator[333290]
      }
      label _breakLabel[333295]
    }
  }
  function |[333335](const  ref arg a[333332] :
  (333331 call set unknown t[333327] ?[260]), const  ref arg b[333342] :
  (333341 call set t ?[260])) : _unknown[51]
  {
    { scopeless
      unknown result[333363](333362 call set t(333360 call ||(333353 call . a c"parSafe")(333357 call . b c"parSafe")))
      (333366 'end of statement')
    }
    (333370 call = result a)
    (333375 call |= result b)
    (333379 return result)
  }
  { scopeless type
    (333348 call set t)
  }
  function |=[333395](ref arg lhs[333392] :
  (333391 call set unknown t[333387] ?[260]), const  ref arg rhs[333402] :
  (333401 call set t ?[260])) : _unknown[51] "assignop"
  {
    {
      unknown _indexOfInterest[333415] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[333416] "expr temp" "temp"
      (333425 'move' _iterator[333416](333423 call _getIterator rhs))
      Defer
      {
        {
          (333441 call _freeIterator _iterator[333416])
        }
      }
      { scopeless type
        (333430 'move' _indexOfInterest[333415](333427 call iteratorIndex _iterator[333416]))
      }
      ForLoop[333417]
      {
        unknown x[333434] "index var" "insert auto destroy"
        (333436 'move' x[333434] _indexOfInterest[333415])
        { scopeless
          (333413 call(333408 call . lhs c"add") x)
        }
        label _continueLabel[333420]
        _indexOfInterest[333415]
        _iterator[333416]
      }
      label _breakLabel[333421]
    }
  }
  function +[333462](const  ref arg a[333459] :
  (333458 call set unknown t[333454] ?[260]), const  ref arg b[333469] :
  (333468 call set t ?[260])) : _unknown[51]
  {
    (333481 return(333479 call | a b))
  }
  { scopeless type
    (333476 call set t ?[260])
  }
  function +=[333498](ref arg lhs[333495] :
  (333494 call set unknown t[333490] ?[260]), const  ref arg rhs[333505] :
  (333504 call set t ?[260])) : _unknown[51] "assignop"
  {
    (333510 call |= lhs rhs)
  }
  function -[333527](const  ref arg a[333524] :
  (333523 call set unknown t[333519] ?[260]), const  ref arg b[333534] :
  (333533 call set t ?[260])) : _unknown[51]
  {
    { scopeless
      unknown result[333556](333541 'new'(333555 call set t(333553 call ||(333546 call . a c"parSafe")(333550 call . b c"parSafe"))))
      (333559 'end of statement')
    }
    if(333658 call _cond_test(333569 call &&(333562 call . a c"parSafe")(333566 call . b c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[333596] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          if(333590 call _cond_test(333580 call !(333579 call(333574 call . b c"contains") x)))
          {
            { scopeless
              (333588 call(333583 call . result c"add") x)
            }
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[333624] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[333625] "expr temp" "temp"
        (333634 'move' _iterator[333625](333632 call _getIterator a))
        Defer
        {
          {
            (333650 call _freeIterator _iterator[333625])
          }
        }
        { scopeless type
          (333639 'move' _indexOfInterest[333624](333636 call iteratorIndex _iterator[333625]))
        }
        ForLoop[333626]
        {
          unknown x[333643] "index var" "insert auto destroy"
          (333645 'move' x[333643] _indexOfInterest[333624])
          { scopeless
            if(333619 call _cond_test(333609 call !(333608 call(333603 call . b c"contains") x)))
            {
              { scopeless
                (333617 call(333612 call . result c"add") x)
              }
            }
          }
          label _continueLabel[333629]
          _indexOfInterest[333624]
          _iterator[333625]
        }
        label _breakLabel[333630]
      }
    }
    (333663 return result)
  }
  { scopeless type
    (333540 call set t)
  }
  function -=[333679](ref arg lhs[333676] :
  (333675 call set unknown t[333671] ?[260]), const  ref arg rhs[333686] :
  (333685 call set t ?[260])) : _unknown[51] "assignop"
  {
    if(333758 call _cond_test(333697 call &&(333690 call . lhs c"parSafe")(333694 call . rhs c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[333710] "index var" "insert auto destroy"
        iterated expressions:
          rhs
        shadow variables:
        other variables
          forall body
        {
          (333707 call(333702 call . lhs c"remove") x)
        }
      }
    }
    {
      {
        unknown _indexOfInterest[333724] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[333725] "expr temp" "temp"
        (333734 'move' _iterator[333725](333732 call _getIterator rhs))
        Defer
        {
          {
            (333750 call _freeIterator _iterator[333725])
          }
        }
        { scopeless type
          (333739 'move' _indexOfInterest[333724](333736 call iteratorIndex _iterator[333725]))
        }
        ForLoop[333726]
        {
          unknown x[333743] "index var" "insert auto destroy"
          (333745 'move' x[333743] _indexOfInterest[333724])
          { scopeless
            (333722 call(333717 call . lhs c"remove") x)
          }
          label _continueLabel[333729]
          _indexOfInterest[333724]
          _iterator[333725]
        }
        label _breakLabel[333730]
      }
    }
  }
  function &[333776](const  ref arg a[333773] :
  (333772 call set unknown t[333768] ?[260]), const  ref arg b[333783] :
  (333782 call set t ?[260])) : _unknown[51]
  {
    { scopeless
      unknown result[333804](333803 call set t(333801 call ||(333794 call . a c"parSafe")(333798 call . b c"parSafe")))
      (333807 'end of statement')
    }
    if(334015 call _cond_test(333817 call <=(333810 call . a c"size")(333814 call . b c"size")))
    {
      if(333912 call _cond_test(333827 call &&(333820 call . a c"parSafe")(333824 call . b c"parSafe")))
      {
        Forall {
          induction variables:
            
            unknown x[333852] "index var" "insert auto destroy"
          iterated expressions:
            a
          shadow variables:
          other variables
            forall body
          {
            if(333846 call _cond_test(333837 call(333832 call . b c"contains") x))
            {
              { scopeless
                (333844 call(333839 call . result c"add") x)
              }
            }
          }
        }
      }
      {
        {
          unknown _indexOfInterest[333878] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[333879] "expr temp" "temp"
          (333888 'move' _iterator[333879](333886 call _getIterator a))
          Defer
          {
            {
              (333904 call _freeIterator _iterator[333879])
            }
          }
          { scopeless type
            (333893 'move' _indexOfInterest[333878](333890 call iteratorIndex _iterator[333879]))
          }
          ForLoop[333880]
          {
            unknown x[333897] "index var" "insert auto destroy"
            (333899 'move' x[333897] _indexOfInterest[333878])
            { scopeless
              if(333873 call _cond_test(333864 call(333859 call . b c"contains") x))
              {
                { scopeless
                  (333871 call(333866 call . result c"add") x)
                }
              }
            }
            label _continueLabel[333883]
            _indexOfInterest[333878]
            _iterator[333879]
          }
          label _breakLabel[333884]
        }
      }
    }
    {
      if(334010 call _cond_test(333925 call &&(333918 call . a c"parSafe")(333922 call . b c"parSafe")))
      {
        Forall {
          induction variables:
            
            unknown x[333950] "index var" "insert auto destroy"
          iterated expressions:
            b
          shadow variables:
          other variables
            forall body
          {
            if(333944 call _cond_test(333935 call(333930 call . a c"contains") x))
            {
              { scopeless
                (333942 call(333937 call . result c"add") x)
              }
            }
          }
        }
      }
      {
        {
          unknown _indexOfInterest[333976] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[333977] "expr temp" "temp"
          (333986 'move' _iterator[333977](333984 call _getIterator b))
          Defer
          {
            {
              (334002 call _freeIterator _iterator[333977])
            }
          }
          { scopeless type
            (333991 'move' _indexOfInterest[333976](333988 call iteratorIndex _iterator[333977]))
          }
          ForLoop[333978]
          {
            unknown x[333995] "index var" "insert auto destroy"
            (333997 'move' x[333995] _indexOfInterest[333976])
            { scopeless
              if(333971 call _cond_test(333962 call(333957 call . a c"contains") x))
              {
                { scopeless
                  (333969 call(333964 call . result c"add") x)
                }
              }
            }
            label _continueLabel[333981]
            _indexOfInterest[333976]
            _iterator[333977]
          }
          label _breakLabel[333982]
        }
      }
    }
    (334020 return result)
  }
  { scopeless type
    (333789 call set t)
  }
  function &=[334036](ref arg lhs[334033] :
  (334032 call set unknown t[334028] ?[260]), const  ref arg rhs[334043] :
  (334042 call set t ?[260])) : _unknown[51] "assignop"
  {
    { scopeless
      unknown result[334060](334059 call set t(334057 call ||(334050 call . lhs c"parSafe")(334054 call . rhs c"parSafe")))
      (334063 'end of statement')
    }
    if(334158 call _cond_test(334073 call &&(334066 call . lhs c"parSafe")(334070 call . rhs c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[334098] "index var" "insert auto destroy"
        iterated expressions:
          lhs
        shadow variables:
        other variables
          forall body
        {
          if(334092 call _cond_test(334083 call(334078 call . rhs c"contains") x))
          {
            { scopeless
              (334090 call(334085 call . result c"add") x)
            }
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[334124] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[334125] "expr temp" "temp"
        (334134 'move' _iterator[334125](334132 call _getIterator lhs))
        Defer
        {
          {
            (334150 call _freeIterator _iterator[334125])
          }
        }
        { scopeless type
          (334139 'move' _indexOfInterest[334124](334136 call iteratorIndex _iterator[334125]))
        }
        ForLoop[334126]
        {
          unknown x[334143] "index var" "insert auto destroy"
          (334145 'move' x[334143] _indexOfInterest[334124])
          { scopeless
            if(334119 call _cond_test(334110 call(334105 call . rhs c"contains") x))
            {
              { scopeless
                (334117 call(334112 call . result c"add") x)
              }
            }
          }
          label _continueLabel[334129]
          _indexOfInterest[334124]
          _iterator[334125]
        }
        label _breakLabel[334130]
      }
    }
    (334164 call = lhs result)
  }
  function ^[334180](const  ref arg a[334177] :
  (334176 call set unknown t[334172] ?[260]), const  ref arg b[334187] :
  (334186 call set t ?[260])) : _unknown[51]
  {
    { scopeless
      unknown result[334208](334207 call set t(334205 call ||(334198 call . a c"parSafe")(334202 call . b c"parSafe")))
      (334211 'end of statement')
    }
    if(334245 call _cond_test(334221 call <=(334214 call . a c"size")(334218 call . b c"size")))
    {
      (334225 call = result b)
      (334231 call ^= result a)
    }
    {
      (334236 call = result a)
      (334242 call ^= result b)
    }
    (334250 return result)
  }
  { scopeless type
    (334193 call set t)
  }
  function ^=[334266](ref arg lhs[334263] :
  (334262 call set unknown t[334258] ?[260]), const  ref arg rhs[334273] :
  (334272 call set t ?[260])) : _unknown[51] "assignop"
  {
    if(334389 call _cond_test(334284 call &&(334277 call . lhs c"parSafe")(334281 call . rhs c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[334319] "index var" "insert auto destroy"
        iterated expressions:
          rhs
        shadow variables:
        other variables
          forall body
        {
          if(334313 call _cond_test(334294 call(334289 call . lhs c"contains") x))
          {
            (334301 call(334296 call . lhs c"remove") x)
          }
          {
            (334310 call(334305 call . lhs c"add") x)
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[334355] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[334356] "expr temp" "temp"
        (334365 'move' _iterator[334356](334363 call _getIterator rhs))
        Defer
        {
          {
            (334381 call _freeIterator _iterator[334356])
          }
        }
        { scopeless type
          (334370 'move' _indexOfInterest[334355](334367 call iteratorIndex _iterator[334356]))
        }
        ForLoop[334357]
        {
          unknown x[334374] "index var" "insert auto destroy"
          (334376 'move' x[334374] _indexOfInterest[334355])
          {
            if(334350 call _cond_test(334331 call(334326 call . lhs c"contains") x))
            {
              (334338 call(334333 call . lhs c"remove") x)
            }
            {
              (334347 call(334342 call . lhs c"add") x)
            }
          }
          label _continueLabel[334360]
          _indexOfInterest[334355]
          _iterator[334356]
        }
        label _breakLabel[334361]
      }
    }
  }
  function ==[334407](const  ref arg a[334404] :
  (334403 call set unknown t[334399] ?[260]), const  ref arg b[334414] :
  (334413 call set t ?[260])) : _unknown[51]
  {
    if(334431 call _cond_test(334426 call !=(334419 call . a c"size")(334423 call . b c"size")))
    {
      { scopeless
        (334429 return 0)
      }
    }
    { scopeless
      unknown result[334438] 1
      (334441 'end of statement')
    }
    if(334531 call _cond_test(334450 call &&(334443 call . a c"parSafe")(334447 call . b c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[334474] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          if(334468 call _cond_test(334461 call !(334460 call(334455 call . b c"contains") x)))
          {
            { scopeless
              (334465 call = result 0)
            }
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[334497] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[334498] "expr temp" "temp"
        (334507 'move' _iterator[334498](334505 call _getIterator a))
        Defer
        {
          {
            (334523 call _freeIterator _iterator[334498])
          }
        }
        { scopeless type
          (334512 'move' _indexOfInterest[334497](334509 call iteratorIndex _iterator[334498]))
        }
        ForLoop[334499]
        {
          unknown x[334516] "index var" "insert auto destroy"
          (334518 'move' x[334516] _indexOfInterest[334497])
          { scopeless
            if(334492 call _cond_test(334487 call !(334486 call(334481 call . b c"contains") x)))
            {
              { scopeless
                (334490 return 0)
              }
            }
          }
          label _continueLabel[334502]
          _indexOfInterest[334497]
          _iterator[334498]
        }
        label _breakLabel[334503]
      }
    }
    (334536 return result)
  }
  { scopeless type
    bool[10]
  }
  function !=[334552](const  ref arg a[334549] :
  (334548 call set unknown t[334544] ?[260]), const  ref arg b[334559] :
  (334558 call set t ?[260])) : _unknown[51]
  {
    (334569 return(334567 call !(334565 call == a b)))
  }
  { scopeless type
    bool[10]
  }
  function <[334586](const  ref arg a[334583] :
  (334582 call set unknown t[334578] ?[260]), const  ref arg b[334593] :
  (334592 call set t ?[260])) : _unknown[51]
  {
    if(334610 call _cond_test(334605 call >=(334598 call . a c"size")(334602 call . b c"size")))
    {
      { scopeless
        (334608 return 0)
      }
    }
    (334620 return(334618 call <= a b))
  }
  { scopeless type
    bool[10]
  }
  function <=[334636](const  ref arg a[334633] :
  (334632 call set unknown t[334628] ?[260]), const  ref arg b[334643] :
  (334642 call set t ?[260])) : _unknown[51]
  {
    if(334660 call _cond_test(334655 call >(334648 call . a c"size")(334652 call . b c"size")))
    {
      { scopeless
        (334658 return 0)
      }
    }
    { scopeless
      unknown result[334667] 1
      (334670 'end of statement')
    }
    if(334760 call _cond_test(334679 call &&(334672 call . a c"parSafe")(334676 call . b c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[334703] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          if(334697 call _cond_test(334690 call !(334689 call(334684 call . b c"contains") x)))
          {
            { scopeless
              (334694 call = result 0)
            }
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[334726] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[334727] "expr temp" "temp"
        (334736 'move' _iterator[334727](334734 call _getIterator a))
        Defer
        {
          {
            (334752 call _freeIterator _iterator[334727])
          }
        }
        { scopeless type
          (334741 'move' _indexOfInterest[334726](334738 call iteratorIndex _iterator[334727]))
        }
        ForLoop[334728]
        {
          unknown x[334745] "index var" "insert auto destroy"
          (334747 'move' x[334745] _indexOfInterest[334726])
          { scopeless
            if(334721 call _cond_test(334716 call !(334715 call(334710 call . b c"contains") x)))
            {
              { scopeless
                (334719 return 0)
              }
            }
          }
          label _continueLabel[334731]
          _indexOfInterest[334726]
          _iterator[334727]
        }
        label _breakLabel[334732]
      }
    }
    (334765 return result)
  }
  { scopeless type
    bool[10]
  }
  function >[334781](const  ref arg a[334778] :
  (334777 call set unknown t[334773] ?[260]), const  ref arg b[334788] :
  (334787 call set t ?[260])) : _unknown[51]
  {
    if(334805 call _cond_test(334800 call <=(334793 call . a c"size")(334797 call . b c"size")))
    {
      { scopeless
        (334803 return 0)
      }
    }
    (334815 return(334813 call >= a b))
  }
  { scopeless type
    bool[10]
  }
  function >=[334831](const  ref arg a[334828] :
  (334827 call set unknown t[334823] ?[260]), const  ref arg b[334838] :
  (334837 call set t ?[260])) : _unknown[51]
  {
    if(334855 call _cond_test(334850 call <(334843 call . a c"size")(334847 call . b c"size")))
    {
      { scopeless
        (334853 return 0)
      }
    }
    { scopeless
      unknown result[334862] 1
      (334865 'end of statement')
    }
    if(334955 call _cond_test(334874 call &&(334867 call . a c"parSafe")(334871 call . b c"parSafe")))
    {
      Forall {
        induction variables:
          
          unknown x[334898] "index var" "insert auto destroy"
        iterated expressions:
          b
        shadow variables:
        other variables
          forall body
        {
          if(334892 call _cond_test(334885 call !(334884 call(334879 call . a c"contains") x)))
          {
            { scopeless
              (334889 call = result 0)
            }
          }
        }
      }
    }
    {
      {
        unknown _indexOfInterest[334921] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[334922] "expr temp" "temp"
        (334931 'move' _iterator[334922](334929 call _getIterator b))
        Defer
        {
          {
            (334947 call _freeIterator _iterator[334922])
          }
        }
        { scopeless type
          (334936 'move' _indexOfInterest[334921](334933 call iteratorIndex _iterator[334922]))
        }
        ForLoop[334923]
        {
          unknown x[334940] "index var" "insert auto destroy"
          (334942 'move' x[334940] _indexOfInterest[334921])
          { scopeless
            if(334916 call _cond_test(334911 call !(334910 call(334905 call . a c"contains") x)))
            {
              { scopeless
                (334914 return 0)
              }
            }
          }
          label _continueLabel[334926]
          _indexOfInterest[334921]
          _iterator[334922]
        }
        label _breakLabel[334927]
      }
    }
    (334960 return result)
  }
  { scopeless type
    bool[10]
  }
}