AST dump for Builtins after pass returnStarTuplesByRefArgs.
Module use list: ChapelStandard IO 

{
  function chpl__init_Builtins[416092]() : void[4] "insert line file info" "module init" "resolved"
  {
    (527840 return _void[55])
  }
  function assert[210345](const in arg test[210342]:bool[10]) : void[4] "always propagate line file info" "insert line file info" "resolved" "fn synchronization free" "no return value for void"
  {
    const-val call_tmp[2114095]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114097 'move' call_tmp[2114095](2114099 '!' test[210342]))
    if call_tmp[2114095]
    {
      (210355 'chpl_error' c"assert failed")
    }
    (527818 return _void[55])
  }
  function assert[1402715](const in arg test[1402717]:bool[10], const  ref arg _e0_args[1402719]:string[26], const  ref arg _e1_args[1402721]:string[26], const  ref arg _e2_args[1402723]:string[26]) : void[4] "always propagate line file info" "expanded varargs" "insert line file info" "instantiated generic" "invisible fn" "resolved" "no return value for void"
  {
    const-val local__str_literal_4795[2379714]:string[26] "temp"
    (2379715 'move' "Cannot call .c_str() on a remote string" "Cannot call .c_str() on a remote string")
    const-val local__str_literal_2727[2379708]:string[26] "temp"
    (2379709 'move' "assert failed - " "assert failed - ")
    const-val call_tmp[2114554]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114556 'move' call_tmp[2114554](2114558 '!' test[1402717]))
    if call_tmp[2114554]
    {
      const-val call_tmp[1402752]:string[26] "dead at end of block" "expr temp" "insert auto destroy" "maybe param" "temp"
      const-val ret_tmp[1838350]:string[26] "temp"
      (1402757 call stringify[1402793] _e0_args[1402719] _e1_args[1402721] _e2_args[1402723] ret_tmp[1838350])
      (1838353 'move' call_tmp[1402752] ret_tmp[1838350])
      const-val call_tmp[1402761]:string[26] "dead at end of block" "maybe param" "temp"
      const-val ret_tmp[1830307]:string[26] "temp"
      (1402766 call +[38342] "assert failed - " call_tmp[1402752] ret_tmp[1830307])
      (1830310 'move' call_tmp[1402761] ret_tmp[1830307])
      const-val tmpstring[1402769]:string[26] "dead at end of block" "insert auto destroy"
      (1402771 'move' tmpstring[1402769] call_tmp[1402761])
      const-val coerce_tmp[2151870]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2151872 'move' coerce_tmp[2151870](2151874 '.v' tmpstring[1402769] locale_id[30754]))
      const-val call_tmp[2151877]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2151879 'move' call_tmp[2151877](2151881 '!=' coerce_tmp[2151870] chpl_nodeID[208152]))
      if call_tmp[2151877]
      {
        (2151887 call halt[154067] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2151890]:c_ptr(uint(8))[937423] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2151892 'move' coerce_tmp[2151890](2151894 '.v' tmpstring[1402769] buff[30737]))
      const-val call_tmp[2151897]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2151899 'move' call_tmp[2151897](2151901 'cast' c_string[19] coerce_tmp[2151890]))
      (1402784 'chpl_error' call_tmp[2151897])
      ref i_x[2132877]:string[26] "temp"
      (2132881 'move' i_x[2132877](2132879 'set reference' tmpstring[1402769]))
      (2132885 call deinit[30831] i_x[2132877])
      ref i_x[2132889]:string[26] "temp"
      (2132893 'move' i_x[2132889](2132891 'set reference' call_tmp[1402752]))
      (2132897 call deinit[30831] i_x[2132889])
    }
    (1402789 return _void[55])
  }
}