AST dump for HeapSort after pass cleanup.
Module use list: 

{
  (352934 'use' ChapelStandard)
  (269555 'import' Sort.{defaultComparator, chpl_check_comparator, chpl_compare})
  function heapSort[269570](arg Data[269567] :
  (269565 call chpl__buildArrayRuntimeType unknown Dom[269560] unknown eltType[269563]), arg comparator[269575] :
  unknown rec[269572] =
  defaultComparator) : _unknown[51]
  {
    (269583 call chpl_check_comparator comparator eltType)
    if(269615 call _cond_test(269591 call !=(269587 call . Dom c"rank") 1))
    {
      (269612 call compilerError "heapSort() requires 1-D array")
    }
    const low[269623] "const"(269620 call . Dom c"alignedLow")
    const high[269630] "const"(269627 call . Dom c"alignedHigh")
    const size[269637] "const"(269634 call . Dom c"size")
    const stride[269647] "const"(269646 call abs(269642 call . Dom c"stride"))
    (269650 'end of statement')
    unknown start[269692](269689 IfExpr (269653 call == high low) then
    { scopeless
      high
    } else
    { scopeless(269686 IfExpr (269658 call % size 2) then
      { scopeless
        (269671 call + low(269669 call *(269666 call /(269663 call - size 1) 2) stride))
      } else
      { scopeless
        (269684 call + low(269682 call *(269679 call -(269676 call / size 2) 1) stride))
      } )
    } )
    (269695 'end of statement')
    {
      unknown tmp[269716] "temp"
      (269740 'move' tmp[269716](269735 call _cond_test(269737 call >= start low)))
      WhileDo[269721]
      {
        {
          (269705 call SiftDown start high comparator)
          (269713 call = start(269711 call - start stride))
        }
        label _continueLabel[269719]
        (269730 'move' tmp[269716](269725 call _cond_test(269727 call >= start low)))
        tmp[269716]
      }
      label _breakLabel[269720]
    }
    unknown end[269744] high
    (269747 'end of statement')
    {
      unknown tmp[269779] "temp"
      (269803 'move' tmp[269779](269798 call _cond_test(269800 call > end low)))
      WhileDo[269784]
      {
        {
          (269760 call <=>(269755 call Data end)(269759 call Data low))
          (269769 call = end(269767 call - end stride))
          (269777 call SiftDown low end comparator)
        }
        label _continueLabel[269782]
        (269793 'move' tmp[269779](269788 call _cond_test(269790 call > end low)))
        tmp[269779]
      }
      label _breakLabel[269783]
    }
    function SiftDown[269810](arg start[269808]:_any[178](?), arg end[269812]:_any[178](?), arg comparator[269817] :
    unknown rec[269814] =
    defaultComparator) : _unknown[51] "no return value for void"
    {
      unknown root[269822] start
      (269825 'end of statement')
      {
        unknown tmp[269953] "temp"
        (269995 'move' tmp[269953](269981 call _cond_test(269983 call <=(269985 call +(269987 call -(269989 call * 2 root) low) stride) end)))
        WhileDo[269958]
        {
          {
            const child[269850] "const"(269848 call +(269845 call -(269842 call * 2 root) low) stride)
            (269853 'end of statement')
            unknown swap[269856] root
            (269859 'end of statement')
            if(269880 call _cond_test(269873 call <(269871 call chpl_compare(269864 call Data swap)(269869 call Data child) comparator) 0))
            {
              (269877 call = swap child)
            }
            if(269920 call _cond_test(269910 call &&(269890 call <=(269887 call + child stride) end)(269908 call <(269906 call chpl_compare(269896 call Data swap)(269904 call Data(269901 call + child stride)) comparator) 0)))
            {
              (269917 call = swap(269915 call + child stride))
            }
            if(269949 call _cond_test(269927 call != swap root))
            {
              (269937 call <=>(269932 call Data root)(269936 call Data swap))
              (269943 call = root swap)
            }
            {
              (269946 return _void[55])
            }
          }
          label _continueLabel[269956]
          (269976 'move' tmp[269953](269962 call _cond_test(269964 call <=(269966 call +(269968 call -(269970 call * 2 root) low) stride) end)))
          tmp[269953]
        }
        label _breakLabel[269957]
      }
    }
  }
}