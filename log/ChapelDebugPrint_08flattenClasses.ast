AST dump for ChapelDebugPrint after pass flattenClasses.
Module use list: ChapelStandard SysCTypes IO 

{
  function chpl_debug_stringify[188137](arg args[188134]:_any[178](?) ...) : _unknown[51]
  {
    unknown str[188157] ""
    (188160 'end of statement')
    {
      unknown i[188204] 0
      unknown tmp[188205] "maybe param" "temp"
      (188217 'move' tmp[188205](188215 call chpl_compute_low_param_loop_bound 0(188168 call -(188164 call . args[188134] c"size") 1)))
      unknown tmp[188206] "maybe param" "temp"
      (188230 'move' tmp[188206](188228 call chpl_compute_high_param_loop_bound 0(188222 call -(188224 call . args[188134] c"size") 1)))
      unknown tmp[188207] "maybe param" "temp"
      (188233 'move' tmp[188207] 1)
      ParamForLoop[188235]
      { i[188204] tmp[188205] tmp[188206] tmp[188207]
        {
          unknown tmp[188176](188175 call args[188134] i[188204])
          (188179 'end of statement')
          if(188200 call _cond_test(188184 call _can_stringify_direct tmp[188176]))
          {
            (188190 call += str[188157](188189 call stringify tmp[188176]))
          }
          {
            (188196 call += str[188157] "\?")
          }
        }
      }
      label _unused_continueLabel[188209]
      label _breakLabel[188208]
    }
    (188245 return str[188157])
  }
  { scopeless type
    string[26]
  }
  function chpl_debug_writeln[188256](arg args[188253]:_any[178](?) ...) : _unknown[51] "no return value for void"
  {
    function printf[188264](arg fmt[188261] :
    c_string[19], arg f[188267] :
    c_string[19]) : void[4] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    unknown str[188278](188277 call chpl_debug_stringify(188275 'expand_tuple' args[188253]))
    (188281 'end of statement')
    (188307 call printf "%s\n"(188306 call(188302 call . str[188278] c"c_str")))
  }
  unknown chpl__testParFlag[188312] "config" "no doc" "param" 0
  (188315 'end of statement')
  unknown chpl__testParOn[188317] "no doc" 0
  (188320 'end of statement')
  function chpl__testParStart[188323]() : _unknown[51] "no doc" "no return value for void"
  {
    (188327 call = chpl__testParOn[188317] 1)
  }
  function chpl__testParStop[188335]() : _unknown[51] "no doc" "no return value for void"
  {
    (188339 call = chpl__testParOn[188317] 0)
  }
  function chpl__testPar[188351](arg args[188348]:_any[178](?) ...) : _unknown[51] "no doc" "no return value for void"
  {
    if(188456 call _cond_test(188355 call && chpl__testParFlag[188312] chpl__testParOn[188317]))
    {
      const file_cs[188364] "const"(188363 'chpl_lookupFilename'(188362 '_get_user_file')) c_string[19]
      (188367 'end of statement')
      unknown file[188370] string[26]
      (188373 'end of statement')
      Try!
      {
        {
          (188379 call = file[188370](188378 call createStringWithNewBuffer file_cs[188364]))
        }
      }
      const line[188389] "const"(188388 '_get_user_line')
      (188392 'end of statement')
      unknown str[188398](188397 call chpl_debug_stringify(188395 'expand_tuple' args[188348]))
      (188401 'end of statement')
      function printf[188408](arg fmt[188405] :
      c_string[19], arg f[188411] :
      c_string[19], arg ln[188415] :
      c_int[20549], arg s[188419] :
      c_string[19]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
      }
      (188454 call printf "CHPL TEST PAR (%s:%i): %s\n" file_cs[188364](188446 call _cast c_int[20549] line[188389])(188453 call(188449 call . str[188398] c"c_str")))
    }
  }
  function chpl__testParWriteln[188469](arg args[188466]:_any[178](?) ...) : _unknown[51] "no doc" "no return value for void"
  {
    if(188554 call _cond_test(188473 call && chpl__testParFlag[188312] chpl__testParOn[188317]))
    {
      const file_cs[188482] "const"(188481 'chpl_lookupFilename'(188480 '_get_user_file')) c_string[19]
      (188485 'end of statement')
      unknown file[188488] string[26]
      (188491 'end of statement')
      Try!
      {
        {
          (188497 call = file[188488](188496 call createStringWithNewBuffer file_cs[188482]))
        }
      }
      const line[188507] "const"(188506 '_get_user_line')
      (188510 'end of statement')
      (188552 call writeln "CHPL TEST PAR (" file[188488] ":" line[188507] "): "(188551 'expand_tuple' args[188466]))
    }
  }
  (355290 'used modules list'(188124 'use' ChapelStandard[20264])(188126 'use' SysCTypes[20940])(188129 'use' IO[230808]))
}