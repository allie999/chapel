AST dump for BlockDist after pass expandExternArrayCalls.
Module use list: 

{
  (353112 'use' ChapelStandard)
  (316557 'use' DSIUtil)
  (316560 'use' ChapelUtil)
  (316563 'use' CommDiagnostics)
  (316566 'use' ChapelLocks)
  (316569 'use' ChapelDebugPrint)
  (316572 'use' LayoutCS)
  (316575 'use' SparseBlockDist)
  { scopeless
    unknown debugBlockDist[316578] "config" "param" 0
    (316581 'end of statement')
  }
  { scopeless
    unknown debugBlockDistBulkTransfer[316583] "config" "param" 0
    (316586 'end of statement')
  }
  { scopeless
    const disableAliasedBulkTransfer[316588] "config" "const" 1
    (316591 'end of statement')
  }
  { scopeless
    unknown disableBlockDistBulkTransfer[316593] "config" "param" 0
    (316596 'end of statement')
  }
  { scopeless
    unknown sanityCheckDistribution[316598] "config" "param" 0
    (316601 'end of statement')
  }
  { scopeless
    unknown testFastFollowerOptimization[316603] "config" "param" 0
    (316606 'end of statement')
  }
  { scopeless
    unknown disableBlockLazyRAD[316608] "config" "param" defaultDisableLazyRADOpt
    (316611 'end of statement')
  }
  type Block[316691](?) unknown rank[316616] "param" int[13] unknown idxType[316621] "type variable" int[13] unknown boundingBox[316630](316628 call chpl__buildDomainRuntimeType defaultDist rank idxType) unknown targetLocDom[316639](316637 call chpl__buildDomainRuntimeType defaultDist rank) unknown targetLocales[316650](316648 call chpl__buildArrayRuntimeType(316646 call chpl__ensureDomainExpr targetLocDom) locale[28]) unknown locDist[316666](316664 call chpl__buildArrayRuntimeType(316662 call chpl__ensureDomainExpr targetLocDom)(316661 'to unmanaged class from unknown'(316660 call LocBlock rank idxType))) unknown dataParTasksPerLocale[316671] int[13] unknown dataParIgnoreRunningTasks[316676] bool[10] unknown dataParMinGranularity[316681] int[13] unknown sparseLayoutType[316687] "type variable"(316686 'to unmanaged class from unknown' DefaultDist) BaseDist
  type LocBlock[316714](?) unknown rank[316696] "param" int[13] unknown idxType[316700] "type variable" const myChunk[316709] "const"(316707 call chpl__buildDomainRuntimeType defaultDist rank idxType)
  type BlockDom[316771](?) unknown sparseLayoutType[316720] "type variable" const dist[316730] "const"(316729 'to unmanaged class from unknown'(316728 call Block rank idxType sparseLayoutType)) unknown locDoms[316752](316750 call chpl__buildArrayRuntimeType(316748 call chpl__ensureDomainExpr(316737 call . dist c"targetLocDom"))(316747 'to unmanaged class from unknown'(316746 call LocBlockDom rank idxType stridable))) unknown whole[316766](316764 call chpl__buildDomainRuntimeType defaultDist(rank = rank)(idxType = idxType)(stridable = stridable)) BaseRectangularDom
  type LocBlockDom[316800](?) unknown rank[316776] "param" int[13] unknown idxType[316780] "type variable" unknown stridable[316784] "param" bool[10] unknown myBlock[316795](316793 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  type BlockArr[316876](?) unknown sparseLayoutType[316806] "type variable" unknown doRADOpt[316811] defaultDoRADOpt bool[10] unknown dom[316823](316822 'to unmanaged class from unknown'(316821 call BlockDom rank idxType stridable sparseLayoutType)) unknown locArr[316847](316845 call chpl__buildArrayRuntimeType(316843 call chpl__ensureDomainExpr(316831 call .(316828 call . dom c"dist") c"targetLocDom"))(316842 'to unmanaged class from unknown'(316841 call LocBlockArr eltType rank idxType stridable))) unknown myLocArr[316860] "local field"(316859 'to unmanaged class from unknown'(316858 'to nilable class from type'(316857 call LocBlockArr eltType rank idxType stridable))) const SENTINEL[316871] "const"(316870 call max(316867 call * rank idxType)) BaseRectangularArr
  type LocBlockArr[317092](?) unknown eltType[316880] "type variable" unknown rank[316884] "param" int[13] unknown idxType[316888] "type variable" unknown stridable[316892] "param" bool[10] const locDom[316903] "const"(316902 'to unmanaged class from unknown'(316901 call LocBlockDom rank idxType stridable)) unknown locRAD[316916](316915 'to unmanaged class from unknown'(316914 'to nilable class from type'(316913 call LocRADCache eltType rank idxType stridable))) unknown myElems[316932] "local field" "unsafe"(316930 call chpl__buildArrayRuntimeType(316928 call chpl__ensureDomainExpr(316923 call . locDom c"myBlock")) eltType) unknown locRADLock[316937] chpl_LocalSpinlock function LocBlockArr[317092](?).init[316945](arg _mt[317096]:_MT[238], arg this[317094]:LocBlockArr[317092](?), arg eltType[316943]:_any[178](?), param arg rank[316948] :
  int[13], arg idxType[316951]:_any[178](?), param arg stridable[316954] :
  bool[10], const arg locDom[316964] :
  (316963 'to unmanaged class from unknown'(316962 call LocBlockDom rank idxType stridable)), param arg initElts[316968] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (316976 call =(316972 call . this c"eltType") eltType)
    (316985 call =(316981 call . this c"rank") rank)
    (316993 call =(316989 call . this c"idxType") idxType)
    (317001 call =(316997 call . this c"stridable") stridable)
    (317011 call =(317007 call . this c"locDom") locDom)
    (317035 call =(317017 call . this c"myElems")(317034 call(317027 call .(317024 call .(317021 call . this c"locDom") c"myBlock") c"buildArray") eltType(initElts = initElts)))
  } function LocBlockArr[317092](?).writeThis[317044](arg _mt[317100]:_MT[238], arg this[317098]:LocBlockArr[317092](?), arg f[317042]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides"
  {
    (317065 call halt "LocBlockArr.writeThis() is not implemented / should not be needed")
  } function LocBlockArr[317092](?).deinit[317072](arg _mt[317104]:_MT[238], arg this[317102]:LocBlockArr[317092](?)) : _unknown[51] "destructor" "method" "primary method"
  {
    if(317083 call _cond_test(317076 call != locRAD nil[44]))
    {
      { scopeless
        (317080 call chpl__delete locRAD)
      }
    }
  }
  function _unknown[51].init[317114](arg _mt[317165]:_MT[238], arg this[317162] :
  Block, arg boundingBox[317111] :
  _domain, arg targetLocales[317121] :
  (317117 call chpl__buildArrayRuntimeType nil[44] locale[28]) =
  Locales, arg dataParTasksPerLocale[317128] =
  (317127 call getDataParTasksPerLocale), arg dataParIgnoreRunningTasks[317134] =
  (317133 call getDataParIgnoreRunningTasks), arg dataParMinGranularity[317140] =
  (317139 call getDataParMinGranularity), param arg rank[317147] =
  (317144 call . boundingBox c"rank"), arg idxType[317154]:_any[178](?) =
  (317151 call . boundingBox c"idxType"), arg sparseLayoutType[317159]:_any[178](?) =
  (317158 'to unmanaged class from unknown' DefaultDist)) : _unknown[51] "method"
  {
    (317172 call =(317168 call . this c"rank") rank)
    (317181 call =(317177 call . this c"idxType") idxType)
    if(317212 call _cond_test(317189 call != rank(317186 call . boundingBox c"rank")))
    {
      { scopeless
        (317210 call compilerError "specified Block rank != rank of specified bounding box")
      }
    }
    if(317245 call _cond_test(317222 call != idxType(317219 call . boundingBox c"idxType")))
    {
      { scopeless
        (317243 call compilerError "specified Block index type != index type of specified bounding box")
      }
    }
    if(317281 call _cond_test(317258 call &&(317252 call != rank 2)(317257 call isCSType sparseLayoutType)))
    {
      { scopeless
        (317279 call compilerError "CS layout is only supported for 2 dimensional domains")
      }
    }
    if(317314 call _cond_test(317291 call ==(317287 call . boundingBox c"size") 0))
    {
      { scopeless
        (317312 call halt "Block() requires a non-empty boundingBox")
      }
    }
    (317336 call =(317322 call . this c"boundingBox")(317334 call _cast(317332 call chpl__buildDomainRuntimeType defaultDist rank idxType(stridable = 0)) boundingBox))
    { scopeless
      const ranges[317344] "const"(317343 call setupTargetLocRanges rank targetLocales)
      (317347 'end of statement')
    }
    (317357 call =(317349 call . this c"targetLocDom")(317355 call chpl__buildDomainExpr(317353 'expand_tuple' ranges)))
    (317372 call =(317361 call . this c"targetLocales")(317371 call reshape targetLocales(317368 call . this c"targetLocDom")))
    { scopeless
      const dummyLB[317385] "const"(317377 'new'(_chpl_manager = unmanaged[220](?))(317384 call LocBlock rank idxType(dummy = 1)))
      (317388 'end of statement')
    }
    { scopeless
      unknown locDistTemp[317402] dummyLB(317399 call chpl__buildArrayRuntimeType(317397 call chpl__ensureDomainExpr targetLocDom)(317396 'to unmanaged class from unknown'(317395 call LocBlock rank idxType)))
      (317405 'end of statement')
    }
    {
      unknown tmpIter[317444] "expr temp" "maybe ref" "no copy" "temp"
      (317447 'move' tmpIter[317444] targetLocDom)
      unknown isRngDomArr[317611] "maybe param" "temp"
      (317626 'move' isRngDomArr[317611](317624 call ||(317613 call isBoundedRange tmpIter[317444])(317622 call ||(317616 call isDomain tmpIter[317444])(317619 call isArray tmpIter[317444]))))
      if isRngDomArr[317611]
      {
        const _coforallCount[317483] "const" "end count" "temp"
        (317548 'move' _coforallCount[317483](317545 call _endCountAlloc 0))
        unknown numTasks[317484] "temp"
        (317532 'move' numTasks[317484](317528 call . tmpIter[317444] c"size"))
        (317523 call _upEndCount _coforallCount[317483] 0 numTasks[317484])
        unknown _indexOfInterest[317490] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317491] "expr temp" "temp"
        (317500 'move' _iterator[317491](317498 call _getIterator tmpIter[317444]))
        Defer
        {
          {
            (317516 call _freeIterator _iterator[317491])
          }
        }
        { scopeless type
          (317505 'move' _indexOfInterest[317490](317502 call iteratorIndex _iterator[317491]))
        }
        ForLoop[317492]
        {
          unknown locid[317509] "coforall index var" "index var" "insert auto destroy"
          (317511 'move' locid[317509] _indexOfInterest[317490])
          { scopeless
            { scopeless
              const tmp[317450] "const" "temp"
              (317452 'move' tmp[317450](317454 'deref'(317455 '_wide_get_locale'(317460 call(317457 call . this c"targetLocales") locid))))
              {
                { scopeless
                  (317468 call =(317470 call locDistTemp locid)(317472 'new'(_chpl_manager = unmanaged[220](?))(317476 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (317485 call _downEndCount _coforallCount[317483] nil[44])
                (317463 'coforall on block' 0 tmp[317450])
              }
            }
          }
          label _continueLabel[317495]
          _indexOfInterest[317490]
          _iterator[317491]
        }
        label _breakLabel[317496]
        Defer
        {
          {
            (317535 call _endCountFree _coforallCount[317483])
          }
        }
        (317540 call _waitEndCount _coforallCount[317483] 0 numTasks[317484])
      }
      {
        const _coforallCount[317552] "const" "end count" "temp"
        (317608 'move' _coforallCount[317552](317605 call _endCountAlloc 0))
        unknown _indexOfInterest[317559] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317560] "expr temp" "temp"
        (317569 'move' _iterator[317560](317567 call _getIterator tmpIter[317444]))
        Defer
        {
          {
            (317585 call _freeIterator _iterator[317560])
          }
        }
        { scopeless type
          (317574 'move' _indexOfInterest[317559](317571 call iteratorIndex _iterator[317560]))
        }
        ForLoop[317561]
        {
          unknown locid[317578] "coforall index var" "index var" "insert auto destroy"
          (317580 'move' locid[317578] _indexOfInterest[317559])
          (317592 call _upEndCount _coforallCount[317552] 0)
          { scopeless
            { scopeless
              const tmp[317436] "const" "temp"
              (317438 'move' tmp[317436](317434 'deref'(317433 '_wide_get_locale'(317414 call(317409 call . this c"targetLocales") locid))))
              {
                { scopeless
                  (317430 call =(317418 call locDistTemp locid)(317421 'new'(_chpl_manager = unmanaged[220](?))(317429 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (317554 call _downEndCount _coforallCount[317552] nil[44])
                (317441 'coforall on block' 0 tmp[317436])
              }
            }
          }
          label _continueLabel[317564]
          _indexOfInterest[317559]
          _iterator[317560]
        }
        label _breakLabel[317565]
        Defer
        {
          {
            (317596 call _endCountFree _coforallCount[317552])
          }
        }
        (317601 call _waitEndCount _coforallCount[317552] 0)
      }
    }
    (317632 call chpl__delete dummyLB)
    (317642 call =(317638 call . this c"locDist") locDistTemp)
    (317663 call =(317648 call . this c"dataParTasksPerLocale")(317660 IfExpr (317653 call == dataParTasksPerLocale 0) then
    { scopeless
      (317656 call . here c"maxTaskPar")
    } else
    { scopeless
      dataParTasksPerLocale
    } ))
    (317673 call =(317669 call . this c"dataParIgnoreRunningTasks") dataParIgnoreRunningTasks)
    (317683 call =(317679 call . this c"dataParMinGranularity") dataParMinGranularity)
    (317696 call =(317689 call . this c"sparseLayoutType")(317695 call _to_unmanaged sparseLayoutType))
    (317704 call(317700 call . this c"complete"))
    if(317733 call _cond_test debugBlockDist)
    {
      (317726 call writeln "Creating new Block distribution:")
      (317731 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiAssign[317747](arg _mt[317752]:_MT[238], arg this[317749] :
  Block, arg other[317744] :
  (317743 'typeof' this)) : _unknown[51] "method"
  {
    {
      unknown tmpIter[317779] "expr temp" "maybe ref" "no copy" "temp"
      (317782 'move' tmpIter[317779] targetLocDom)
      unknown isRngDomArr[317933] "maybe param" "temp"
      (317948 'move' isRngDomArr[317933](317946 call ||(317935 call isBoundedRange tmpIter[317779])(317944 call ||(317938 call isDomain tmpIter[317779])(317941 call isArray tmpIter[317779]))))
      if isRngDomArr[317933]
      {
        const _coforallCount[317805] "const" "end count" "temp"
        (317870 'move' _coforallCount[317805](317867 call _endCountAlloc 0))
        unknown numTasks[317806] "temp"
        (317854 'move' numTasks[317806](317850 call . tmpIter[317779] c"size"))
        (317845 call _upEndCount _coforallCount[317805] 0 numTasks[317806])
        unknown _indexOfInterest[317812] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317813] "expr temp" "temp"
        (317822 'move' _iterator[317813](317820 call _getIterator tmpIter[317779]))
        Defer
        {
          {
            (317838 call _freeIterator _iterator[317813])
          }
        }
        { scopeless type
          (317827 'move' _indexOfInterest[317812](317824 call iteratorIndex _iterator[317813]))
        }
        ForLoop[317814]
        {
          unknown locid[317831] "coforall index var" "index var" "insert auto destroy"
          (317833 'move' locid[317831] _indexOfInterest[317812])
          { scopeless
            { scopeless
              const tmp[317785] "const" "temp"
              (317787 'move' tmp[317785](317789 'deref'(317790 '_wide_get_locale'(317792 call targetLocales locid))))
              {
                { scopeless
                  (317800 call chpl__delete(317802 call locDist locid))
                }
                (317807 call _downEndCount _coforallCount[317805] nil[44])
                (317795 'coforall on block' 0 tmp[317785])
              }
            }
          }
          label _continueLabel[317817]
          _indexOfInterest[317812]
          _iterator[317813]
        }
        label _breakLabel[317818]
        Defer
        {
          {
            (317857 call _endCountFree _coforallCount[317805])
          }
        }
        (317862 call _waitEndCount _coforallCount[317805] 0 numTasks[317806])
      }
      {
        const _coforallCount[317874] "const" "end count" "temp"
        (317930 'move' _coforallCount[317874](317927 call _endCountAlloc 0))
        unknown _indexOfInterest[317881] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317882] "expr temp" "temp"
        (317891 'move' _iterator[317882](317889 call _getIterator tmpIter[317779]))
        Defer
        {
          {
            (317907 call _freeIterator _iterator[317882])
          }
        }
        { scopeless type
          (317896 'move' _indexOfInterest[317881](317893 call iteratorIndex _iterator[317882]))
        }
        ForLoop[317883]
        {
          unknown locid[317900] "coforall index var" "index var" "insert auto destroy"
          (317902 'move' locid[317900] _indexOfInterest[317881])
          (317914 call _upEndCount _coforallCount[317874] 0)
          { scopeless
            { scopeless
              const tmp[317771] "const" "temp"
              (317773 'move' tmp[317771](317769 'deref'(317768 '_wide_get_locale'(317759 call targetLocales locid))))
              {
                { scopeless
                  (317765 call chpl__delete(317763 call locDist locid))
                }
                (317876 call _downEndCount _coforallCount[317874] nil[44])
                (317776 'coforall on block' 0 tmp[317771])
              }
            }
          }
          label _continueLabel[317886]
          _indexOfInterest[317881]
          _iterator[317882]
        }
        label _breakLabel[317887]
        Defer
        {
          {
            (317918 call _endCountFree _coforallCount[317874])
          }
        }
        (317923 call _waitEndCount _coforallCount[317874] 0)
      }
    }
    (317958 call = boundingBox(317955 call . other c"boundingBox"))
    (317966 call = targetLocDom(317963 call . other c"targetLocDom"))
    (317974 call = targetLocales(317971 call . other c"targetLocales"))
    (317982 call = dataParTasksPerLocale(317979 call . other c"dataParTasksPerLocale"))
    (317990 call = dataParIgnoreRunningTasks(317987 call . other c"dataParIgnoreRunningTasks"))
    (317998 call = dataParMinGranularity(317995 call . other c"dataParMinGranularity"))
    {
      unknown tmpIter[318036] "expr temp" "maybe ref" "no copy" "temp"
      (318039 'move' tmpIter[318036] targetLocDom)
      unknown isRngDomArr[318200] "maybe param" "temp"
      (318215 'move' isRngDomArr[318200](318213 call ||(318202 call isBoundedRange tmpIter[318036])(318211 call ||(318205 call isDomain tmpIter[318036])(318208 call isArray tmpIter[318036]))))
      if isRngDomArr[318200]
      {
        const _coforallCount[318072] "const" "end count" "temp"
        (318137 'move' _coforallCount[318072](318134 call _endCountAlloc 0))
        unknown numTasks[318073] "temp"
        (318121 'move' numTasks[318073](318117 call . tmpIter[318036] c"size"))
        (318112 call _upEndCount _coforallCount[318072] 0 numTasks[318073])
        unknown _indexOfInterest[318079] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318080] "expr temp" "temp"
        (318089 'move' _iterator[318080](318087 call _getIterator tmpIter[318036]))
        Defer
        {
          {
            (318105 call _freeIterator _iterator[318080])
          }
        }
        { scopeless type
          (318094 'move' _indexOfInterest[318079](318091 call iteratorIndex _iterator[318080]))
        }
        ForLoop[318081]
        {
          unknown locid[318098] "coforall index var" "index var" "insert auto destroy"
          (318100 'move' locid[318098] _indexOfInterest[318079])
          { scopeless
            { scopeless
              const tmp[318042] "const" "temp"
              (318044 'move' tmp[318042](318046 'deref'(318047 '_wide_get_locale'(318049 call targetLocales locid))))
              {
                { scopeless
                  (318057 call =(318059 call locDist locid)(318061 'new'(_chpl_manager = unmanaged[220](?))(318065 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (318074 call _downEndCount _coforallCount[318072] nil[44])
                (318052 'coforall on block' 0 tmp[318042])
              }
            }
          }
          label _continueLabel[318084]
          _indexOfInterest[318079]
          _iterator[318080]
        }
        label _breakLabel[318085]
        Defer
        {
          {
            (318124 call _endCountFree _coforallCount[318072])
          }
        }
        (318129 call _waitEndCount _coforallCount[318072] 0 numTasks[318073])
      }
      {
        const _coforallCount[318141] "const" "end count" "temp"
        (318197 'move' _coforallCount[318141](318194 call _endCountAlloc 0))
        unknown _indexOfInterest[318148] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318149] "expr temp" "temp"
        (318158 'move' _iterator[318149](318156 call _getIterator tmpIter[318036]))
        Defer
        {
          {
            (318174 call _freeIterator _iterator[318149])
          }
        }
        { scopeless type
          (318163 'move' _indexOfInterest[318148](318160 call iteratorIndex _iterator[318149]))
        }
        ForLoop[318150]
        {
          unknown locid[318167] "coforall index var" "index var" "insert auto destroy"
          (318169 'move' locid[318167] _indexOfInterest[318148])
          (318181 call _upEndCount _coforallCount[318141] 0)
          { scopeless
            { scopeless
              const tmp[318028] "const" "temp"
              (318030 'move' tmp[318028](318026 'deref'(318025 '_wide_get_locale'(318006 call targetLocales locid))))
              {
                { scopeless
                  (318022 call =(318010 call locDist locid)(318013 'new'(_chpl_manager = unmanaged[220](?))(318021 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (318143 call _downEndCount _coforallCount[318141] nil[44])
                (318033 'coforall on block' 0 tmp[318028])
              }
            }
          }
          label _continueLabel[318153]
          _indexOfInterest[318148]
          _iterator[318149]
        }
        label _breakLabel[318154]
        Defer
        {
          {
            (318185 call _endCountFree _coforallCount[318141])
          }
        }
        (318190 call _waitEndCount _coforallCount[318141] 0)
      }
    }
  }
  function _unknown[51].dsiEqualDMaps[318231](arg _mt[318236]:_MT[238], arg this[318233] :
  Block, arg that[318228] :
  (318227 call Block ?[260])) : _unknown[51] "method"
  {
    (318275 return(318273 call &&(318258 call &&(318246 call ==(318239 call . this c"rank")(318243 call . that c"rank"))(318256 call ==(318249 call . this c"boundingBox")(318253 call . that c"boundingBox")))(318272 call(318264 call .(318261 call . this c"targetLocales") c"equals")(318268 call . that c"targetLocales"))))
  }
  function _unknown[51].dsiEqualDMaps[318285](arg _mt[318290]:_MT[238], arg this[318287] :
  Block, arg that[318283]:_any[178](?)) param : _unknown[51] "method"
  {
    (318293 return 0)
  }
  function _unknown[51].dsiClone[318301](arg _mt[318306]:_MT[238], arg this[318303] :
  Block) : _unknown[51] "method"
  {
    (318322 return(318310 'new'(_chpl_manager = unmanaged[220](?))(318321 call Block boundingBox targetLocales dataParTasksPerLocale dataParIgnoreRunningTasks dataParMinGranularity rank idxType sparseLayoutType)))
  }
  function _unknown[51].dsiDestroyDist[318330](arg _mt[318335]:_MT[238], arg this[318332] :
  Block) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[318357] "expr temp" "maybe ref" "no copy" "temp"
      (318360 'move' tmpIter[318357] locDist)
      unknown isRngDomArr[318507] "maybe param" "temp"
      (318522 'move' isRngDomArr[318507](318520 call ||(318509 call isBoundedRange tmpIter[318357])(318518 call ||(318512 call isDomain tmpIter[318357])(318515 call isArray tmpIter[318357]))))
      if isRngDomArr[318507]
      {
        const _coforallCount[318379] "const" "end count" "temp"
        (318444 'move' _coforallCount[318379](318441 call _endCountAlloc 0))
        unknown numTasks[318380] "temp"
        (318428 'move' numTasks[318380](318424 call . tmpIter[318357] c"size"))
        (318419 call _upEndCount _coforallCount[318379] 0 numTasks[318380])
        unknown _indexOfInterest[318386] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318387] "expr temp" "temp"
        (318396 'move' _iterator[318387](318394 call _getIterator tmpIter[318357]))
        Defer
        {
          {
            (318412 call _freeIterator _iterator[318387])
          }
        }
        { scopeless type
          (318401 'move' _indexOfInterest[318386](318398 call iteratorIndex _iterator[318387]))
        }
        ForLoop[318388]
        {
          unknown ld[318405] "coforall index var" "index var" "insert auto destroy"
          (318407 'move' ld[318405] _indexOfInterest[318386])
          { scopeless
            { scopeless
              const tmp[318363] "const" "temp"
              (318365 'move' tmp[318363](318367 'deref'(318368 '_wide_get_locale' ld)))
              {
                { scopeless
                  (318376 call chpl__delete ld)
                }
                (318381 call _downEndCount _coforallCount[318379] nil[44])
                (318371 'coforall on block' 0 tmp[318363])
              }
            }
          }
          label _continueLabel[318391]
          _indexOfInterest[318386]
          _iterator[318387]
        }
        label _breakLabel[318392]
        Defer
        {
          {
            (318431 call _endCountFree _coforallCount[318379])
          }
        }
        (318436 call _waitEndCount _coforallCount[318379] 0 numTasks[318380])
      }
      {
        const _coforallCount[318448] "const" "end count" "temp"
        (318504 'move' _coforallCount[318448](318501 call _endCountAlloc 0))
        unknown _indexOfInterest[318455] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318456] "expr temp" "temp"
        (318465 'move' _iterator[318456](318463 call _getIterator tmpIter[318357]))
        Defer
        {
          {
            (318481 call _freeIterator _iterator[318456])
          }
        }
        { scopeless type
          (318470 'move' _indexOfInterest[318455](318467 call iteratorIndex _iterator[318456]))
        }
        ForLoop[318457]
        {
          unknown ld[318474] "coforall index var" "index var" "insert auto destroy"
          (318476 'move' ld[318474] _indexOfInterest[318455])
          (318488 call _upEndCount _coforallCount[318448] 0)
          { scopeless
            { scopeless
              const tmp[318348] "const" "temp"
              (318350 'move' tmp[318348](318346 'deref'(318345 '_wide_get_locale' ld)))
              {
                { scopeless
                  (318342 call chpl__delete ld)
                }
                (318450 call _downEndCount _coforallCount[318448] nil[44])
                (318353 'coforall on block' 0 tmp[318348])
              }
            }
          }
          label _continueLabel[318460]
          _indexOfInterest[318455]
          _iterator[318456]
        }
        label _breakLabel[318461]
        Defer
        {
          {
            (318492 call _endCountFree _coforallCount[318448])
          }
        }
        (318497 call _waitEndCount _coforallCount[318448] 0)
      }
    }
  }
  function _unknown[51].dsiDisplayRepresentation[318532](arg _mt[318537]:_MT[238], arg this[318534] :
  Block) : _unknown[51] "method" "method overrides"
  {
    (318559 call writeln "boundingBox = " boundingBox)
    (318582 call writeln "targetLocDom = " targetLocDom)
    (318613 call writeln "targetLocales = "(318609 for  tl  in  targetLocales do
    {
      (318606 call . tl c"id")
    } ))
    (318635 call writeln "dataParTasksPerLocale = " dataParTasksPerLocale)
    (318657 call writeln "dataParIgnoreRunningTasks = " dataParIgnoreRunningTasks)
    (318679 call writeln "dataParMinGranularity = " dataParMinGranularity)
    {
      unknown _indexOfInterest[318731] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[318732] "expr temp" "temp"
      (318741 'move' _iterator[318732](318739 call _getIterator targetLocDom))
      Defer
      {
        {
          (318757 call _freeIterator _iterator[318732])
        }
      }
      { scopeless type
        (318746 'move' _indexOfInterest[318731](318743 call iteratorIndex _iterator[318732]))
      }
      ForLoop[318733]
      {
        unknown tli[318750] "index var" "insert auto destroy"
        (318752 'move' tli[318750] _indexOfInterest[318731])
        { scopeless
          (318729 call writeln "locDist[" tli "].myChunk = "(318726 call .(318723 call locDist tli) c"myChunk"))
        }
        label _continueLabel[318736]
        _indexOfInterest[318731]
        _iterator[318732]
      }
      label _breakLabel[318737]
    }
  }
  function _unknown[51].dsiNewRectangularDom[318773](arg _mt[318786]:_MT[238], arg this[318783] :
  Block, param arg rank[318770] :
  int[13], arg idxType[318775]:_any[178](?), param arg stridable[318778] :
  bool[10], arg inds[318781]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(318816 call _cond_test(318793 call != idxType(318790 call . this c"idxType")))
    {
      { scopeless
        (318814 call compilerError "Block domain index type does not match distribution's")
      }
    }
    if(318850 call _cond_test(318827 call != rank(318824 call . this c"rank")))
    {
      { scopeless
        (318848 call compilerError "Block domain rank does not match distribution's")
      }
    }
    { scopeless
      const whole[318862] "const"(318861 call createWholeDomainForInds rank idxType stridable inds)
      (318865 'end of statement')
    }
    { scopeless
      const dummyLBD[318875] "const"(318868 'new'(_chpl_manager = unmanaged[220](?))(318874 call LocBlockDom rank idxType stridable))
      (318878 'end of statement')
    }
    { scopeless
      unknown locDomsTemp[318896] dummyLBD(318893 call chpl__buildArrayRuntimeType(318891 call chpl__ensureDomainExpr(318880 call . this c"targetLocDom"))(318890 'to unmanaged class from unknown'(318889 call LocBlockDom rank idxType stridable)))
      (318899 'end of statement')
    }
    {
      unknown tmpIter[318947] "expr temp" "maybe ref" "no copy" "temp"
      (318950 'move' tmpIter[318947](318902 call . this c"targetLocDom"))
      unknown isRngDomArr[319119] "maybe param" "temp"
      (319134 'move' isRngDomArr[319119](319132 call ||(319121 call isBoundedRange tmpIter[318947])(319130 call ||(319124 call isDomain tmpIter[318947])(319127 call isArray tmpIter[318947]))))
      if isRngDomArr[319119]
      {
        const _coforallCount[318991] "const" "end count" "temp"
        (319056 'move' _coforallCount[318991](319053 call _endCountAlloc 0))
        unknown numTasks[318992] "temp"
        (319040 'move' numTasks[318992](319036 call . tmpIter[318947] c"size"))
        (319031 call _upEndCount _coforallCount[318991] 0 numTasks[318992])
        unknown _indexOfInterest[318998] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318999] "expr temp" "temp"
        (319008 'move' _iterator[318999](319006 call _getIterator tmpIter[318947]))
        Defer
        {
          {
            (319024 call _freeIterator _iterator[318999])
          }
        }
        { scopeless type
          (319013 'move' _indexOfInterest[318998](319010 call iteratorIndex _iterator[318999]))
        }
        ForLoop[319000]
        {
          unknown localeIdx[319017] "coforall index var" "index var" "insert auto destroy"
          (319019 'move' localeIdx[319017] _indexOfInterest[318998])
          { scopeless
            { scopeless
              const tmp[318953] "const" "temp"
              (318955 'move' tmp[318953](318957 'deref'(318958 '_wide_get_locale'(318963 call(318960 call . this c"targetLocales") localeIdx))))
              {
                { scopeless
                  (318971 call =(318973 call locDomsTemp localeIdx)(318975 'new'(_chpl_manager = unmanaged[220](?))(318979 call LocBlockDom rank idxType stridable(318987 call(318984 call . this c"getChunk") whole localeIdx))))
                }
                (318993 call _downEndCount _coforallCount[318991] nil[44])
                (318966 'coforall on block' 0 tmp[318953])
              }
            }
          }
          label _continueLabel[319003]
          _indexOfInterest[318998]
          _iterator[318999]
        }
        label _breakLabel[319004]
        Defer
        {
          {
            (319043 call _endCountFree _coforallCount[318991])
          }
        }
        (319048 call _waitEndCount _coforallCount[318991] 0 numTasks[318992])
      }
      {
        const _coforallCount[319060] "const" "end count" "temp"
        (319116 'move' _coforallCount[319060](319113 call _endCountAlloc 0))
        unknown _indexOfInterest[319067] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[319068] "expr temp" "temp"
        (319077 'move' _iterator[319068](319075 call _getIterator tmpIter[318947]))
        Defer
        {
          {
            (319093 call _freeIterator _iterator[319068])
          }
        }
        { scopeless type
          (319082 'move' _indexOfInterest[319067](319079 call iteratorIndex _iterator[319068]))
        }
        ForLoop[319069]
        {
          unknown localeIdx[319086] "coforall index var" "index var" "insert auto destroy"
          (319088 'move' localeIdx[319086] _indexOfInterest[319067])
          (319100 call _upEndCount _coforallCount[319060] 0)
          { scopeless
            { scopeless
              const tmp[318939] "const" "temp"
              (318941 'move' tmp[318939](318937 'deref'(318936 '_wide_get_locale'(318911 call(318906 call . this c"targetLocales") localeIdx))))
              {
                { scopeless
                  (318933 call =(318915 call locDomsTemp localeIdx)(318918 'new'(_chpl_manager = unmanaged[220](?))(318932 call LocBlockDom rank idxType stridable(318931 call(318925 call . this c"getChunk") whole localeIdx))))
                }
                (319062 call _downEndCount _coforallCount[319060] nil[44])
                (318944 'coforall on block' 0 tmp[318939])
              }
            }
          }
          label _continueLabel[319072]
          _indexOfInterest[319067]
          _iterator[319068]
        }
        label _breakLabel[319073]
        Defer
        {
          {
            (319104 call _endCountFree _coforallCount[319060])
          }
        }
        (319109 call _waitEndCount _coforallCount[319060] 0)
      }
    }
    (319140 call chpl__delete dummyLBD)
    { scopeless
      unknown dom[319159](319145 'new'(_chpl_manager = unmanaged[220](?))(319158 call BlockDom rank idxType stridable sparseLayoutType(319154 call _cast unmanaged[220](?) this) locDomsTemp whole))
      (319162 'end of statement')
    }
    if(319193 call _cond_test debugBlockDist)
    {
      (319183 call writeln "Creating new Block domain:")
      (319191 call(319187 call . dom c"dsiDisplayRepresentation"))
    }
    (319198 return dom)
  }
  function _unknown[51].dsiNewSparseDom[319209](arg _mt[319220]:_MT[238], arg this[319217] :
  Block, param arg rank[319206] :
  int[13], arg idxType[319211]:_any[178](?), arg dom[319214] :
  _domain) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      unknown ret[319256](319224 'new'(_chpl_manager = unmanaged[220](?))(319255 call SparseBlockDom(rank = rank)(idxType = idxType)(sparseLayoutType = sparseLayoutType)(stridable =(319234 call . dom c"stridable"))(dist =(319241 call _to_unmanaged this))(whole =(319249 call .(319244 call . dom c"_value") c"whole"))(parentDom = dom)))
      (319259 'end of statement')
    }
    (319266 call(319262 call . ret c"setup"))
    (319269 return ret)
  }
  function _unknown[51].writeThis[319278](arg _mt[319283]:_MT[238], arg this[319280] :
  Block, arg x[319276]:_any[178](?)) : _unknown[51] throws "method"
  {
    (319306 call <~>(319303 call <~> x "Block") "\n")
    (319331 call <~>(319328 call <~> x "-------") "\n")
    (319358 call <~>(319355 call <~>(319352 call <~> x "distributes: ") boundingBox) "\n")
    (319385 call <~>(319382 call <~>(319379 call <~> x "across locales: ") targetLocales) "\n")
    (319412 call <~>(319409 call <~>(319406 call <~> x "indexed via: ") targetLocDom) "\n")
    (319436 call <~>(319433 call <~> x "resulting in: ") "\n")
    {
      unknown _indexOfInterest[319525] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[319526] "expr temp" "temp"
      (319535 'move' _iterator[319526](319533 call _getIterator targetLocDom))
      Defer
      {
        {
          (319551 call _freeIterator _iterator[319526])
        }
      }
      { scopeless type
        (319540 'move' _indexOfInterest[319525](319537 call iteratorIndex _iterator[319526]))
      }
      ForLoop[319527]
      {
        unknown locid[319544] "index var" "insert auto destroy"
        (319546 'move' locid[319544] _indexOfInterest[319525])
        { scopeless
          (319522 call <~>(319519 call <~>(319510 call <~>(319491 call <~>(319481 call <~>(319462 call <~>(319459 call <~> x "  [") locid) "] locale ")(319490 '_wide_get_node'(319486 call locDist locid))) " owns chunk: ")(319516 call .(319515 call locDist locid) c"myChunk")) "\n")
        }
        label _continueLabel[319530]
        _indexOfInterest[319525]
        _iterator[319526]
      }
      label _breakLabel[319531]
    }
  }
  function _unknown[51].dsiIndexToLocale[319567](arg _mt[319572]:_MT[238], arg this[319569] :
  Block, arg ind[319564] :
  idxType) : _unknown[51] "method"
  {
    (319585 return(319584 call targetLocales(319582 call targetLocsIdx ind)))
  }
  where {
    (319576 call == rank 1)
  }
  function _unknown[51].dsiIndexToLocale[319601](arg _mt[319606]:_MT[238], arg this[319603] :
  Block, arg ind[319598] :
  (319596 call * rank idxType)) : _unknown[51] "method"
  {
    (319615 return(319614 call targetLocales(319612 call targetLocsIdx ind)))
  }
  function _unknown[51].getChunk[319625](arg _mt[319632]:_MT[238], arg this[319629] :
  Block, arg inds[319623]:_any[178](?), arg locid[319627]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      const chunk[319650] "const"(319649 call(319638 call .(319637 call locDist locid) c"myChunk")(319647 'expand_tuple'(319646 call(319642 call . inds c"getIndices"))))
      (319653 'end of statement')
    }
    if(319774 call _cond_test sanityCheckDistribution)
    {
      { scopeless
        if(319770 call _cond_test(319661 call >(319657 call . chunk c"size") 0))
        {
          if(319727 call _cond_test(319671 call !=(319669 call targetLocsIdx(319665 call . chunk c"low")) locid))
          {
            { scopeless
              (319725 call writeln "["(319677 call . here c"id") "] "(319698 call . chunk c"low") " is in my chunk but maps to "(319724 call targetLocsIdx(319720 call . chunk c"low")))
            }
          }
          if(319765 call _cond_test(319741 call !=(319739 call targetLocsIdx(319735 call . chunk c"high")) locid))
          {
            { scopeless
              (319763 call writeln "["(319747 call . here c"id") "] "(319752 call . chunk c"high") " is in my chunk but maps to "(319762 call targetLocsIdx(319758 call . chunk c"high")))
            }
          }
        }
      }
    }
    (319780 return chunk)
  }
  function _unknown[51].targetLocsIdx[319791](arg _mt[319796]:_MT[238], arg this[319793] :
  Block, arg ind[319788] :
  idxType) : _unknown[51] "method"
  {
    (319808 return(319807 call targetLocsIdx(319804 call _build_tuple ind)))
  }
  where {
    (319800 call == rank 1)
  }
  function _unknown[51].targetLocsIdx[319824](arg _mt[319829]:_MT[238], arg this[319826] :
  Block, arg ind[319821] :
  (319819 call * rank idxType)) : _unknown[51] "method"
  {
    { scopeless
      unknown result[319835](319833 call * rank int[13])
      (319838 'end of statement')
    }
    {
      unknown i[319923] 0
      unknown tmp[319924] "maybe param" "temp"
      (319936 'move' tmp[319924](319934 call chpl_compute_low_param_loop_bound 0(319843 call - rank 1)))
      unknown tmp[319925] "maybe param" "temp"
      (319946 'move' tmp[319925](319944 call chpl_compute_high_param_loop_bound 0(319941 call - rank 1)))
      unknown tmp[319926] "maybe param" "temp"
      (319949 'move' tmp[319926] 1)
      ParamForLoop[319951]
      { i[319923] tmp[319924] tmp[319925] tmp[319926]
        { scopeless
          (319920 call =(319850 call result i)(319919 call max 0(319918 call min(319869 call _cast int[13](319866 call -(319862 call .(319861 call(319856 call . targetLocDom c"dim") i) c"size") 1))(319916 call _cast int[13](319913 call /(319901 call *(319886 call -(319875 call ind i)(319883 call .(319882 call(319877 call . boundingBox c"dim") i) c"low"))(319899 call _cast idxType(319895 call .(319894 call(319889 call . targetLocDom c"dim") i) c"size")))(319910 call .(319909 call(319904 call . boundingBox c"dim") i) c"size"))))))
        }
      }
      label _unused_continueLabel[319928]
      label _breakLabel[319927]
    }
    (319972 return(319969 IfExpr (319962 call == rank 1) then
    { scopeless
      (319967 call result 0)
    } else
    { scopeless
      result
    } ))
  }
  function _unknown[51].activeTargetLocales[319985](arg _mt[319990]:_MT[238], arg this[319987] :
  Block, const arg space[319981] :
  _domain =
  boundingBox) : _unknown[51] "iterator fn" "method"
  {
    { scopeless
      const locSpace[320002] "const"(320000 call chpl__buildDomainExpr(319998 'expand_tuple'(319997 call(319993 call . space c"dims"))))
      (320005 'end of statement')
    }
    { scopeless
      const low[320017] "const"(320016 call chpl__tuplify(320014 call targetLocsIdx(320010 call . locSpace c"first")))
      (320020 'end of statement')
    }
    { scopeless
      const high[320031] "const"(320030 call chpl__tuplify(320028 call targetLocsIdx(320024 call . locSpace c"last")))
      (320034 'end of statement')
    }
    { scopeless
      unknown dims[320046](320044 call * rank(320043 call range(320041 'typeof'(320040 call low 0))))
      (320049 'end of statement')
    }
    {
      unknown i[320075] 0
      unknown tmp[320076] "maybe param" "temp"
      (320088 'move' tmp[320076](320086 call chpl_compute_low_param_loop_bound 0(320053 call - rank 1)))
      unknown tmp[320077] "maybe param" "temp"
      (320098 'move' tmp[320077](320096 call chpl_compute_high_param_loop_bound 0(320093 call - rank 1)))
      unknown tmp[320078] "maybe param" "temp"
      (320101 'move' tmp[320078] 1)
      ParamForLoop[320103]
      { i[320075] tmp[320076] tmp[320077] tmp[320078]
        {
          (320071 call =(320060 call dims i)(320069 call chpl_build_bounded_range(320064 call low i)(320068 call high i)))
        }
      }
      label _unused_continueLabel[320080]
      label _breakLabel[320079]
    }
    {
      unknown _indexOfInterest[320148] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320149] "expr temp" "temp"
      (320158 'move' _iterator[320149](320156 call _getIterator(320116 call chpl__buildDomainExpr(320114 'expand_tuple' dims))))
      Defer
      {
        {
          (320175 call _freeIterator _iterator[320149])
        }
      }
      { scopeless type
        (320164 'move' _indexOfInterest[320148](320161 call iteratorIndex _iterator[320149]))
      }
      ForLoop[320150]
      {
        unknown i[320168] "index var" "insert auto destroy"
        (320170 'move' i[320168] _indexOfInterest[320148])
        {
          { scopeless
            const chunk[320124] "const"(320123 call chpl__computeBlock i targetLocDom boundingBox)
            (320127 'end of statement')
          }
          if(320143 call _cond_test(320138 call >(320134 call .(320133 call locSpace(320131 'expand_tuple' chunk)) c"size") 0))
          {
            { scopeless
              (320141 yield i)
            }
          }
        }
        label _continueLabel[320153]
        _indexOfInterest[320148]
        _iterator[320149]
      }
      label _breakLabel[320154]
    }
  }
  function chpl__computeBlock[320188](arg locid[320186]:_any[178](?), arg targetLocBox[320190]:_any[178](?), arg boundingBox[320192]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown rank[320198] "param"(320195 call . targetLocBox c"rank")
      (320201 'end of statement')
    }
    unknown idxType[320213] "type variable"(320210 call .(320209 call(320206 call chpl__tuplify boundingBox) 0) c"idxType")
    { scopeless
      unknown inds[320223](320221 call * rank(320220 call range idxType))
      (320226 'end of statement')
    }
    {
      unknown i[320338] 0
      unknown tmp[320339] "maybe param" "temp"
      (320351 'move' tmp[320339](320349 call chpl_compute_low_param_loop_bound 0(320230 call - rank 1)))
      unknown tmp[320340] "maybe param" "temp"
      (320361 'move' tmp[320340](320359 call chpl_compute_high_param_loop_bound 0(320356 call - rank 1)))
      unknown tmp[320341] "maybe param" "temp"
      (320364 'move' tmp[320341] 1)
      ParamForLoop[320366]
      { i[320338] tmp[320339] tmp[320340] tmp[320341]
        {
          { scopeless
            const lo[320244] "const"(320241 call .(320240 call(320235 call . boundingBox c"dim") i) c"low")
            (320247 'end of statement')
          }
          { scopeless
            const hi[320259] "const"(320256 call .(320255 call(320250 call . boundingBox c"dim") i) c"high")
            (320262 'end of statement')
          }
          { scopeless
            const numelems[320270] "const"(320268 call +(320265 call - hi lo) 1)
            (320273 'end of statement')
          }
          { scopeless
            const numlocs[320284] "const"(320281 call .(320280 call(320275 call . targetLocBox c"dim") i) c"size")
            (320287 'end of statement')
          }
          { scopeless
            const tmp[320314] "const" "temp"(320313 call _computeBlock numelems numlocs(320303 call(320300 call chpl__tuplify locid) i)(320307 call max idxType)(320311 call min idxType) lo)
            (320321 call _check_tuple_var_decl tmp[320314] 2)
            const blo[320288] "const"(320315 call tmp[320314] 0)
            const bhi[320290] "const"(320318 call tmp[320314] 1)
            (320326 'end of statement')
          }
          (320335 call =(320330 call inds i)(320333 call chpl_build_bounded_range blo bhi))
        }
      }
      label _unused_continueLabel[320343]
      label _breakLabel[320342]
    }
    (320376 return inds)
  }
  function _unknown[51].init[320387](arg _mt[320406]:_MT[238], arg this[320403] :
  LocBlock, param arg rank[320384] :
  int[13], arg idxType[320389]:_any[178](?), arg locid[320391]:_any[178](?), arg boundingBox[320393]:_any[178](?), arg targetLocDom[320400] :
  (320398 call chpl__buildDomainRuntimeType defaultDist rank)) : _unknown[51] "method"
  {
    (320413 call =(320409 call . this c"rank") rank)
    (320422 call =(320418 call . this c"idxType") idxType)
    { scopeless
      const inds[320434] "const"(320433 call chpl__computeBlock(320429 call chpl__tuplify locid) targetLocDom boundingBox)
      (320437 'end of statement')
    }
    (320444 call = myChunk(320442 call chpl__buildDomainExpr(320440 'expand_tuple' inds)))
  }
  function _unknown[51].init[320454](arg _mt[320465]:_MT[238], arg this[320462] :
  LocBlock, param arg rank[320452]:_any[178](?), arg idxType[320456]:_any[178](?), param arg dummy[320459] :
  bool[10]) : _unknown[51] "method"
  {
    (320473 call =(320469 call . this c"rank") rank)
    (320482 call =(320478 call . this c"idxType") idxType)
  }
  where {
    dummy
  }
  function _unknown[51].dsiMyDist[320491](arg _mt[320496]:_MT[238], arg this[320493] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (320499 return dist)
    }
  }
  function _unknown[51].dsiDisplayRepresentation[320507](arg _mt[320512]:_MT[238], arg this[320509] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    (320534 call writeln "whole = " whole)
    {
      unknown _indexOfInterest[320588] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320589] "expr temp" "temp"
      (320598 'move' _iterator[320589](320596 call _getIterator(320539 call . dist c"targetLocDom")))
      Defer
      {
        {
          (320615 call _freeIterator _iterator[320589])
        }
      }
      { scopeless type
        (320604 'move' _indexOfInterest[320588](320601 call iteratorIndex _iterator[320589]))
      }
      ForLoop[320590]
      {
        unknown tli[320608] "index var" "insert auto destroy"
        (320610 'move' tli[320608] _indexOfInterest[320588])
        { scopeless
          (320586 call writeln "locDoms[" tli "].myBlock = "(320583 call .(320582 call locDoms tli) c"myBlock"))
        }
        label _continueLabel[320593]
        _indexOfInterest[320588]
        _iterator[320589]
      }
      label _breakLabel[320594]
    }
  }
  function _unknown[51].dsiDims[320627](arg _mt[320632]:_MT[238], arg this[320629] :
  BlockDom) : _unknown[51] "method"
  {
    { scopeless
      (320640 return(320639 call(320635 call . whole c"dims")))
    }
  }
  function _unknown[51].dsiDim[320652](arg _mt[320657]:_MT[238], arg this[320654] :
  BlockDom, arg d[320649] :
  int[13]) : _unknown[51] "method"
  {
    { scopeless
      (320666 return(320665 call(320660 call . whole c"dim") d))
    }
  }
  function _unknown[51].getLocDom[320676](arg _mt[320681]:_MT[238], arg this[320678] :
  BlockDom, arg localeIdx[320674]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (320687 return(320686 call locDoms localeIdx))
    }
  }
  function _matchArgsShape[320696](arg rangeType[320694]:_any[178](?), arg scalarType[320698]:_any[178](?), arg args[320700]:_any[178](?)) type : _unknown[51]
  {
    function helper[320708](param arg i[320705] :
    int[13]) type : _unknown[51]
    {
      if(320783 call _cond_test(320715 call == i(320712 call . args c"size")))
      {
        if(320734 call _cond_test(320723 call isCollapsedDimension(320721 call args i)))
        {
          { scopeless
            (320727 return(320725 call _build_tuple scalarType))
          }
        }
        {
          { scopeless
            (320732 return(320730 call _build_tuple rangeType))
          }
        }
      }
      {
        if(320776 call _cond_test(320747 call isCollapsedDimension(320745 call args i)))
        {
          { scopeless
            (320760 return(320758 call _build_tuple scalarType(320756 'expand_tuple'(320755 call helper(320752 call + i 1)))))
          }
        }
        {
          { scopeless
            (320774 return(320772 call _build_tuple rangeType(320770 'expand_tuple'(320769 call helper(320766 call + i 1)))))
          }
        }
      }
    }
    (320795 return(320794 call helper 0))
  }
  function _unknown[51].these[320802](arg _mt[320807]:_MT[238], arg this[320804] :
  BlockDom) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[320814] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320815] "expr temp" "temp"
      (320824 'move' _iterator[320815](320822 call _getIterator whole))
      Defer
      {
        {
          (320840 call _freeIterator _iterator[320815])
        }
      }
      { scopeless type
        (320829 'move' _indexOfInterest[320814](320826 call iteratorIndex _iterator[320815]))
      }
      ForLoop[320816]
      {
        unknown i[320833] "index var" "insert auto destroy"
        (320835 'move' i[320833] _indexOfInterest[320814])
        { scopeless
          (320812 yield i)
        }
        label _continueLabel[320819]
        _indexOfInterest[320814]
        _iterator[320815]
      }
      label _breakLabel[320820]
    }
  }
  function _unknown[51].these[320857](arg _mt[320862]:_MT[238], arg this[320859] :
  BlockDom, param arg tag[320854] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    { scopeless
      const maxTasks[320875] "const"(320872 call . dist c"dataParTasksPerLocale")
      (320878 'end of statement')
    }
    { scopeless
      const ignoreRunning[320884] "const"(320881 call . dist c"dataParIgnoreRunningTasks")
      (320887 'end of statement')
    }
    { scopeless
      const minSize[320892] "const"(320889 call . dist c"dataParMinGranularity")
      (320895 'end of statement')
    }
    { scopeless
      const wholeLow[320900] "const"(320897 call . whole c"low")
      (320903 'end of statement')
    }
    { scopeless
      const hereId[320908] "const"(320905 call . here c"id")
      (320911 'end of statement')
    }
    { scopeless
      const hereIgnoreRunning[320926] "const"(320923 IfExpr (320919 call ==(320917 call(320913 call . here c"runningTasks")) 1) then
      { scopeless
        1
      } else
      { scopeless
        ignoreRunning
      } )
      (320929 'end of statement')
    }
    {
      unknown tmpIter[321166] "expr temp" "maybe ref" "no copy" "temp"
      (321169 'move' tmpIter[321166] locDoms)
      unknown isRngDomArr[321502] "maybe param" "temp"
      (321517 'move' isRngDomArr[321502](321515 call ||(321504 call isBoundedRange tmpIter[321166])(321513 call ||(321507 call isDomain tmpIter[321166])(321510 call isArray tmpIter[321166]))))
      if isRngDomArr[321502]
      {
        const _coforallCount[321374] "const" "end count" "temp"
        (321439 'move' _coforallCount[321374](321436 call _endCountAlloc 0))
        unknown numTasks[321375] "temp"
        (321423 'move' numTasks[321375](321419 call . tmpIter[321166] c"size"))
        (321414 call _upEndCount _coforallCount[321374] 0 numTasks[321375])
        unknown _indexOfInterest[321381] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[321382] "expr temp" "temp"
        (321391 'move' _iterator[321382](321389 call _getIterator tmpIter[321166]))
        Defer
        {
          {
            (321407 call _freeIterator _iterator[321382])
          }
        }
        { scopeless type
          (321396 'move' _indexOfInterest[321381](321393 call iteratorIndex _iterator[321382]))
        }
        ForLoop[321383]
        {
          unknown locDom[321400] "coforall index var" "index var" "insert auto destroy"
          (321402 'move' locDom[321400] _indexOfInterest[321381])
          { scopeless
            { scopeless
              const tmp[321172] "const" "temp"
              (321174 'move' tmp[321172](321176 'deref'(321177 '_wide_get_locale' locDom)))
              {
                {
                  { scopeless
                    const myIgnoreRunning[321185] "const"(321197 IfExpr (321187 call ==(321189 call . here c"id") hereId) then
                    { scopeless
                      hereIgnoreRunning
                    } else
                    { scopeless
                      ignoreRunning
                    } )
                    (321199 'end of statement')
                  }
                  unknown strType[321200] "type variable"(321202 call chpl__signedType idxType)
                  { scopeless
                    const tmpBlock[321206] "const"(321214 call(321208 call .(321210 call . locDom c"myBlock") c"chpl__unTranslate") wholeLow)
                    (321217 'end of statement')
                  }
                  { scopeless
                    unknown locOffset[321219](321221 call * rank idxType)
                    (321225 'end of statement')
                  }
                  {
                    unknown i[321227] 0
                    unknown tmp[321230] "maybe param" "temp"
                    (321232 'move' tmp[321230](321235 call chpl_compute_low_param_loop_bound 0(321238 call -(321240 call . tmpBlock c"rank") 1)))
                    unknown tmp[321244] "maybe param" "temp"
                    (321246 'move' tmp[321244](321249 call chpl_compute_high_param_loop_bound 0(321252 call -(321254 call . tmpBlock c"rank") 1)))
                    unknown tmp[321258] "maybe param" "temp"
                    (321260 'move' tmp[321258] 1)
                    ParamForLoop[321263]
                    { i[321227] tmp[321230] tmp[321244] tmp[321258]
                      {
                        { scopeless
                          const stride[321271] "const"(321273 call .(321278 call(321275 call . tmpBlock c"dim") i) c"stride")
                          (321282 'end of statement')
                        }
                        if(321284 call _cond_test(321286 call &&(321288 call < stride 0)(321292 call != strType idxType)))
                        {
                          { scopeless
                            (321298 call halt "negative stride not supported with unsigned idxType")
                          }
                        }
                        (321302 call =(321304 call locOffset i)(321307 call /(321309 call .(321314 call(321311 call . tmpBlock c"dim") i) c"first")(321318 call _cast idxType stride)))
                      }
                    }
                    label _unused_continueLabel[321321]
                    label _breakLabel[321323]
                  }
                  {
                    unknown _indexOfInterest[321326] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[321328] "expr temp" "temp"
                    (321330 'move' _iterator[321328](321333 call _getIterator(321338 call(321335 call . tmpBlock c"these")(321340 call . iterKind c"leader") maxTasks myIgnoreRunning minSize locOffset)))
                    Defer
                    {
                      {
                        (321349 call _freeIterator _iterator[321328])
                      }
                    }
                    { scopeless type
                      (321353 'move' _indexOfInterest[321326](321356 call iteratorIndex _iterator[321328]))
                    }
                    ForLoop[321358]
                    {
                      unknown followThis[321361] "index var" "insert auto destroy"
                      (321363 'move' followThis[321361] _indexOfInterest[321326])
                      { scopeless
                        (321367 yield followThis)
                      }
                      label _continueLabel[321369]
                      _indexOfInterest[321326]
                      _iterator[321328]
                    }
                    label _breakLabel[321371]
                  }
                }
                (321376 call _downEndCount _coforallCount[321374] nil[44])
                (321180 'coforall on block' 0 tmp[321172])
              }
            }
          }
          label _continueLabel[321386]
          _indexOfInterest[321381]
          _iterator[321382]
        }
        label _breakLabel[321387]
        Defer
        {
          {
            (321426 call _endCountFree _coforallCount[321374])
          }
        }
        (321431 call _waitEndCount _coforallCount[321374] 0 numTasks[321375])
      }
      {
        const _coforallCount[321443] "const" "end count" "temp"
        (321499 'move' _coforallCount[321443](321496 call _endCountAlloc 0))
        unknown _indexOfInterest[321450] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[321451] "expr temp" "temp"
        (321460 'move' _iterator[321451](321458 call _getIterator tmpIter[321166]))
        Defer
        {
          {
            (321476 call _freeIterator _iterator[321451])
          }
        }
        { scopeless type
          (321465 'move' _indexOfInterest[321450](321462 call iteratorIndex _iterator[321451]))
        }
        ForLoop[321452]
        {
          unknown locDom[321469] "coforall index var" "index var" "insert auto destroy"
          (321471 'move' locDom[321469] _indexOfInterest[321450])
          (321483 call _upEndCount _coforallCount[321443] 0)
          { scopeless
            { scopeless
              const tmp[321158] "const" "temp"
              (321160 'move' tmp[321158](321156 'deref'(321155 '_wide_get_locale' locDom)))
              {
                {
                  { scopeless
                    const myIgnoreRunning[320945] "const"(320942 IfExpr (320938 call ==(320934 call . here c"id") hereId) then
                    { scopeless
                      hereIgnoreRunning
                    } else
                    { scopeless
                      ignoreRunning
                    } )
                    (320948 'end of statement')
                  }
                  unknown strType[320954] "type variable"(320953 call chpl__signedType idxType)
                  { scopeless
                    const tmpBlock[320967] "const"(320966 call(320961 call .(320958 call . locDom c"myBlock") c"chpl__unTranslate") wholeLow)
                    (320970 'end of statement')
                  }
                  { scopeless
                    unknown locOffset[320975](320973 call * rank idxType)
                    (320978 'end of statement')
                  }
                  {
                    unknown i[321063] 0
                    unknown tmp[321064] "maybe param" "temp"
                    (321076 'move' tmp[321064](321074 call chpl_compute_low_param_loop_bound 0(320985 call -(320981 call . tmpBlock c"rank") 1)))
                    unknown tmp[321065] "maybe param" "temp"
                    (321089 'move' tmp[321065](321087 call chpl_compute_high_param_loop_bound 0(321081 call -(321083 call . tmpBlock c"rank") 1)))
                    unknown tmp[321066] "maybe param" "temp"
                    (321092 'move' tmp[321066] 1)
                    ParamForLoop[321094]
                    { i[321063] tmp[321064] tmp[321065] tmp[321066]
                      {
                        { scopeless
                          const stride[320999] "const"(320996 call .(320995 call(320990 call . tmpBlock c"dim") i) c"stride")
                          (321002 'end of statement')
                        }
                        if(321035 call _cond_test(321012 call &&(321006 call < stride 0)(321010 call != strType idxType)))
                        {
                          { scopeless
                            (321033 call halt "negative stride not supported with unsigned idxType")
                          }
                        }
                        (321060 call =(321043 call locOffset i)(321058 call /(321051 call .(321050 call(321045 call . tmpBlock c"dim") i) c"first")(321056 call _cast idxType stride)))
                      }
                    }
                    label _unused_continueLabel[321068]
                    label _breakLabel[321067]
                  }
                  {
                    unknown _indexOfInterest[321121] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[321122] "expr temp" "temp"
                    (321131 'move' _iterator[321122](321129 call _getIterator(321117 call(321105 call . tmpBlock c"these")(321109 call . iterKind c"leader") maxTasks myIgnoreRunning minSize locOffset)))
                    Defer
                    {
                      {
                        (321148 call _freeIterator _iterator[321122])
                      }
                    }
                    { scopeless type
                      (321137 'move' _indexOfInterest[321121](321134 call iteratorIndex _iterator[321122]))
                    }
                    ForLoop[321123]
                    {
                      unknown followThis[321141] "index var" "insert auto destroy"
                      (321143 'move' followThis[321141] _indexOfInterest[321121])
                      { scopeless
                        (321119 yield followThis)
                      }
                      label _continueLabel[321126]
                      _indexOfInterest[321121]
                      _iterator[321122]
                    }
                    label _breakLabel[321127]
                  }
                }
                (321445 call _downEndCount _coforallCount[321443] nil[44])
                (321163 'coforall on block' 0 tmp[321158])
              }
            }
          }
          label _continueLabel[321455]
          _indexOfInterest[321450]
          _iterator[321451]
        }
        label _breakLabel[321456]
        Defer
        {
          {
            (321487 call _endCountFree _coforallCount[321443])
          }
        }
        (321492 call _waitEndCount _coforallCount[321443] 0)
      }
    }
  }
  where {
    (320869 call == tag(320866 call . iterKind c"leader"))
  }
  function _unknown[51].these[321531](arg _mt[321538]:_MT[238], arg this[321535] :
  BlockDom, param arg tag[321528] :
  iterKind, arg followThis[321533]:_any[178](?)) : _unknown[51] "iterator fn" "method"
  {
    function anyStridable[321551](arg rangeTuple[321549]:_any[178](?), param arg i[321555] :
    int[13] =
    0) param : _unknown[51]
    {
      { scopeless
        (321596 return(321593 IfExpr (321567 call == i(321565 call -(321561 call . rangeTuple c"size") 1)) then
        { scopeless
          (321573 call .(321572 call rangeTuple i) c"stridable")
        } else
        { scopeless
          (321591 call ||(321580 call .(321579 call rangeTuple i) c"stridable")(321590 call anyStridable rangeTuple(321588 call + i 1)))
        } ))
      }
    }
    if(321625 call _cond_test chpl__testParFlag)
    {
      { scopeless
        (321623 call chpl__testParWriteln "Block domain follower invoked on " followThis)
      }
    }
    { scopeless
      unknown t[321645](321643 call * rank(321642 call range idxType(stridable =(321639 call || stridable(321638 call anyStridable followThis)))))
      (321648 'end of statement')
    }
    unknown strType[321653] "type variable"(321652 call chpl__signedType idxType)
    {
      unknown i[321772] 0
      unknown tmp[321773] "maybe param" "temp"
      (321785 'move' tmp[321773](321783 call chpl_compute_low_param_loop_bound 0(321659 call - rank 1)))
      unknown tmp[321774] "maybe param" "temp"
      (321795 'move' tmp[321774](321793 call chpl_compute_high_param_loop_bound 0(321790 call - rank 1)))
      unknown tmp[321775] "maybe param" "temp"
      (321798 'move' tmp[321775] 1)
      ParamForLoop[321800]
      { i[321772] tmp[321773] tmp[321774] tmp[321775]
        {
          { scopeless
            unknown stride[321676](321674 call _cast strType(321670 call .(321669 call(321664 call . whole c"dim") i) c"stride"))
            (321679 'end of statement')
          }
          { scopeless
            unknown low[321697](321695 call _cast idxType(321692 call * stride(321690 call _cast strType(321686 call .(321685 call followThis i) c"low"))))
            (321700 'end of statement')
          }
          { scopeless
            unknown high[321717](321715 call _cast idxType(321712 call * stride(321710 call _cast strType(321706 call .(321705 call followThis i) c"high"))))
            (321720 'end of statement')
          }
          (321769 call =(321724 call t i)(321768 call(321759 call .(321757 call chpl_by(321745 call +(321733 call chpl_by(321727 call chpl_build_bounded_range low high)(321731 call _cast strType stride))(321742 call .(321741 call(321736 call . whole c"dim") i) c"alignedLow"))(321755 call _cast strType(321751 call .(321750 call followThis i) c"stride"))) c"safeCast")(321766 'typeof'(321765 call t i))))
        }
      }
      label _unused_continueLabel[321777]
      label _breakLabel[321776]
    }
    {
      unknown _indexOfInterest[321819] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[321820] "expr temp" "temp"
      (321829 'move' _iterator[321820](321827 call _getIterator(321813 call chpl__buildDomainExpr(321811 'expand_tuple' t))))
      Defer
      {
        {
          (321846 call _freeIterator _iterator[321820])
        }
      }
      { scopeless type
        (321835 'move' _indexOfInterest[321819](321832 call iteratorIndex _iterator[321820]))
      }
      ForLoop[321821]
      {
        unknown i[321839] "index var" "insert auto destroy"
        (321841 'move' i[321839] _indexOfInterest[321819])
        {
          (321816 yield i)
        }
        label _continueLabel[321824]
        _indexOfInterest[321819]
        _iterator[321820]
      }
      label _breakLabel[321825]
    }
  }
  where {
    (321545 call == tag(321542 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialWrite[321861](arg _mt[321866]:_MT[238], arg this[321863] :
  BlockDom, arg x[321859]:_any[178](?)) : _unknown[51] "method"
  {
    (321870 call <~> x whole)
  }
  function _unknown[51].dsiBuildArray[321881](arg _mt[321890]:_MT[238], arg this[321887] :
  BlockDom, arg eltType[321879]:_any[178](?), param arg initElts[321884] :
  bool[10]) : _unknown[51] "method"
  {
    { scopeless
      const dom[321893] "const" this
      (321896 'end of statement')
    }
    { scopeless
      const creationLocale[321902] "const"(321899 call . here c"id")
      (321905 'end of statement')
    }
    { scopeless
      const dummyLBD[321915] "const"(321908 'new'(_chpl_manager = unmanaged[220](?))(321914 call LocBlockDom rank idxType stridable))
      (321918 'end of statement')
    }
    { scopeless
      const dummyLBA[321931] "const"(321921 'new'(_chpl_manager = unmanaged[220](?))(321930 call LocBlockArr eltType rank idxType stridable dummyLBD 0))
      (321934 'end of statement')
    }
    { scopeless
      unknown locArrTemp[321956] dummyLBA(321953 call chpl__buildArrayRuntimeType(321951 call chpl__ensureDomainExpr(321939 call .(321936 call . dom c"dist") c"targetLocDom"))(321950 'to unmanaged class from unknown'(321949 call LocBlockArr eltType rank idxType stridable)))
      (321959 'end of statement')
    }
    { scopeless
      unknown myLocArrTemp[321969](321968 'to unmanaged class from unknown'(321967 'to nilable class from type'(321966 call LocBlockArr eltType rank idxType stridable)))
      (321972 'end of statement')
    }
    {
      unknown tmpIter[322062] "expr temp" "maybe ref" "no copy" "temp"
      (322065 'move' tmpIter[322062](321978 call .(321975 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[322263] "maybe param" "temp"
      (322278 'move' isRngDomArr[322263](322276 call ||(322265 call isBoundedRange tmpIter[322062])(322274 call ||(322268 call isDomain tmpIter[322062])(322271 call isArray tmpIter[322062]))))
      if isRngDomArr[322263]
      {
        const _coforallCount[322135] "const" "end count" "temp"
        (322200 'move' _coforallCount[322135](322197 call _endCountAlloc 0))
        unknown numTasks[322136] "temp"
        (322184 'move' numTasks[322136](322180 call . tmpIter[322062] c"size"))
        (322175 call _upEndCount _coforallCount[322135] 0 numTasks[322136])
        unknown _indexOfInterest[322142] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322143] "expr temp" "temp"
        (322152 'move' _iterator[322143](322150 call _getIterator tmpIter[322062]))
        Defer
        {
          {
            (322168 call _freeIterator _iterator[322143])
          }
        }
        { scopeless type
          (322157 'move' _indexOfInterest[322142](322154 call iteratorIndex _iterator[322143]))
        }
        ForLoop[322144]
        {
          unknown localeIdx[322161] "coforall index var" "index var" "insert auto destroy"
          (322163 'move' localeIdx[322161] _indexOfInterest[322142])
          { scopeless
            { scopeless
              const tmp[322071] "const" "temp"
              (322073 'move' tmp[322071](322075 'deref'(322076 '_wide_get_locale'(322084 call(322078 call .(322080 call . dom c"dist") c"targetLocales") localeIdx))))
              {
                {
                  { scopeless
                    const LBA[322092] "const"(322093 'new'(_chpl_manager = unmanaged[220](?))(322097 call LocBlockArr eltType rank idxType stridable(322106 call(322103 call . dom c"getLocDom") localeIdx)(initElts = initElts)))
                    (322111 'end of statement')
                  }
                  (322113 call =(322115 call locArrTemp localeIdx) LBA)
                  if(322119 call _cond_test(322121 call ==(322123 call . here c"id") creationLocale))
                  {
                    { scopeless
                      (322130 call = myLocArrTemp LBA)
                    }
                  }
                }
                (322137 call _downEndCount _coforallCount[322135] nil[44])
                (322087 'coforall on block' 0 tmp[322071])
                (322067 'actuals list' tiMarkRef[294] myLocArrTemp)
              }
            }
          }
          label _continueLabel[322147]
          _indexOfInterest[322142]
          _iterator[322143]
        }
        label _breakLabel[322148]
        Defer
        {
          {
            (322187 call _endCountFree _coforallCount[322135])
          }
        }
        (322192 call _waitEndCount _coforallCount[322135] 0 numTasks[322136])
      }
      {
        const _coforallCount[322204] "const" "end count" "temp"
        (322260 'move' _coforallCount[322204](322257 call _endCountAlloc 0))
        unknown _indexOfInterest[322211] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322212] "expr temp" "temp"
        (322221 'move' _iterator[322212](322219 call _getIterator tmpIter[322062]))
        Defer
        {
          {
            (322237 call _freeIterator _iterator[322212])
          }
        }
        { scopeless type
          (322226 'move' _indexOfInterest[322211](322223 call iteratorIndex _iterator[322212]))
        }
        ForLoop[322213]
        {
          unknown localeIdx[322230] "coforall index var" "index var" "insert auto destroy"
          (322232 'move' localeIdx[322230] _indexOfInterest[322211])
          (322244 call _upEndCount _coforallCount[322204] 0)
          { scopeless
            { scopeless
              const tmp[322053] "const" "temp"
              (322055 'move' tmp[322053](322051 'deref'(322050 '_wide_get_locale'(321998 call(321993 call .(321990 call . dom c"dist") c"targetLocales") localeIdx))))
              {
                {
                  { scopeless
                    const LBA[322020] "const"(322001 'new'(_chpl_manager = unmanaged[220](?))(322019 call LocBlockArr eltType rank idxType stridable(322016 call(322011 call . dom c"getLocDom") localeIdx)(initElts = initElts)))
                    (322023 'end of statement')
                  }
                  (322030 call =(322028 call locArrTemp localeIdx) LBA)
                  if(322045 call _cond_test(322038 call ==(322034 call . here c"id") creationLocale))
                  {
                    { scopeless
                      (322042 call = myLocArrTemp LBA)
                    }
                  }
                }
                (322206 call _downEndCount _coforallCount[322204] nil[44])
                (322058 'coforall on block' 0 tmp[322053])
                (321986 'actuals list' tiMarkRef[294] myLocArrTemp)
              }
            }
          }
          label _continueLabel[322216]
          _indexOfInterest[322211]
          _iterator[322212]
        }
        label _breakLabel[322217]
        Defer
        {
          {
            (322248 call _endCountFree _coforallCount[322204])
          }
        }
        (322253 call _waitEndCount _coforallCount[322204] 0)
      }
    }
    (322285 call chpl__delete dummyLBA dummyLBD)
    { scopeless
      unknown arr[322313](322290 'new'(_chpl_manager = unmanaged[220](?))(322312 call BlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom =(322306 call _to_unmanaged dom))(locArr = locArrTemp)(myLocArr = myLocArrTemp)))
      (322316 'end of statement')
    }
    if(322335 call _cond_test(322324 call &&(322320 call . arr c"doRADOpt") disableBlockLazyRAD))
    {
      { scopeless
        (322333 call(322329 call . arr c"setupRADOpt"))
      }
    }
    (322341 return arr)
  }
  function _unknown[51].dsiNumIndices[322348](arg _mt[322353]:_MT[238], arg this[322350] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322359 return(322356 call . whole c"size"))
    }
  }
  function _unknown[51].dsiLow[322367](arg _mt[322372]:_MT[238], arg this[322369] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322378 return(322375 call . whole c"low"))
    }
  }
  function _unknown[51].dsiHigh[322386](arg _mt[322391]:_MT[238], arg this[322388] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322397 return(322394 call . whole c"high"))
    }
  }
  function _unknown[51].dsiStride[322405](arg _mt[322410]:_MT[238], arg this[322407] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322416 return(322413 call . whole c"stride"))
    }
  }
  function _unknown[51].dsiAlignedLow[322424](arg _mt[322429]:_MT[238], arg this[322426] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322435 return(322432 call . whole c"alignedLow"))
    }
  }
  function _unknown[51].dsiAlignedHigh[322443](arg _mt[322448]:_MT[238], arg this[322445] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322454 return(322451 call . whole c"alignedHigh"))
    }
  }
  function _unknown[51].dsiAlignment[322462](arg _mt[322467]:_MT[238], arg this[322464] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322473 return(322470 call . whole c"alignment"))
    }
  }
  function _unknown[51].dsiSetIndices[322485](arg _mt[322490]:_MT[238], arg this[322487] :
  BlockDom, arg x[322482] :
  _domain) : _unknown[51] "method"
  {
    if(322504 call _cond_test(322497 call !=(322493 call . x c"rank") rank))
    {
      { scopeless
        (322502 call compilerError "rank mismatch in domain assignment")
      }
    }
    if(322525 call _cond_test(322518 call !=(322514 call .(322511 call . x c"_value") c"idxType") idxType))
    {
      { scopeless
        (322523 call compilerError "index type mismatch in domain assignment")
      }
    }
    (322532 call = whole x)
    (322537 call setup)
    if(322566 call _cond_test debugBlockDist)
    {
      (322559 call writeln "Setting indices of Block domain:")
      (322564 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiSetIndices[322577](arg _mt[322582]:_MT[238], arg this[322579] :
  BlockDom, arg x[322575]:_any[178](?)) : _unknown[51] "method"
  {
    if(322596 call _cond_test(322589 call !=(322585 call . x c"size") rank))
    {
      { scopeless
        (322594 call compilerError "rank mismatch in domain assignment")
      }
    }
    if(322617 call _cond_test(322610 call !=(322606 call .(322605 call x 0) c"idxType") idxType))
    {
      { scopeless
        (322615 call compilerError "index type mismatch in domain assignment")
      }
    }
    (322628 call(322623 call . whole c"setIndices") x)
    (322632 call setup)
    if(322645 call _cond_test debugBlockDist)
    {
      (322638 call writeln "Setting indices of Block domain:")
      (322643 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiGetIndices[322654](arg _mt[322659]:_MT[238], arg this[322656] :
  BlockDom) : _unknown[51] "method"
  {
    (322667 return(322666 call(322662 call . whole c"getIndices")))
  }
  function _unknown[51].dsiAssignDomain[322679](arg _mt[322688]:_MT[238], arg this[322685] :
  BlockDom, arg rhs[322676] :
  _domain, arg lhsPrivate[322682] :
  bool[10]) : _unknown[51] "method"
  {
    (322694 call chpl_assignDomainWithGetSetIndices this rhs)
  }
  function _unknown[51].dsiLocalSlice[322706](arg _mt[322713]:_MT[238], arg this[322710] :
  BlockDom, param arg stridable[322703] :
  bool[10], arg ranges[322708]:_any[178](?)) : _unknown[51] "method"
  {
    (322720 return(322719 call whole(322717 'expand_tuple' ranges)))
  }
  function _unknown[51].setup[322728](arg _mt[322733]:_MT[238], arg this[322730] :
  BlockDom) : _unknown[51] "method"
  {
    {
      unknown tmpIter[322777] "expr temp" "maybe ref" "no copy" "temp"
      (322780 'move' tmpIter[322777](322737 call . dist c"targetLocDom"))
      unknown isRngDomArr[322944] "maybe param" "temp"
      (322959 'move' isRngDomArr[322944](322957 call ||(322946 call isBoundedRange tmpIter[322777])(322955 call ||(322949 call isDomain tmpIter[322777])(322952 call isArray tmpIter[322777]))))
      if isRngDomArr[322944]
      {
        const _coforallCount[322816] "const" "end count" "temp"
        (322881 'move' _coforallCount[322816](322878 call _endCountAlloc 0))
        unknown numTasks[322817] "temp"
        (322865 'move' numTasks[322817](322861 call . tmpIter[322777] c"size"))
        (322856 call _upEndCount _coforallCount[322816] 0 numTasks[322817])
        unknown _indexOfInterest[322823] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322824] "expr temp" "temp"
        (322833 'move' _iterator[322824](322831 call _getIterator tmpIter[322777]))
        Defer
        {
          {
            (322849 call _freeIterator _iterator[322824])
          }
        }
        { scopeless type
          (322838 'move' _indexOfInterest[322823](322835 call iteratorIndex _iterator[322824]))
        }
        ForLoop[322825]
        {
          unknown localeIdx[322842] "coforall index var" "index var" "insert auto destroy"
          (322844 'move' localeIdx[322842] _indexOfInterest[322823])
          { scopeless
            { scopeless
              const tmp[322783] "const" "temp"
              (322785 'move' tmp[322783](322787 'deref'(322788 '_wide_get_locale'(322793 call(322790 call . dist c"targetLocales") localeIdx))))
              {
                { scopeless
                  (322801 call =(322803 call .(322805 call locDoms localeIdx) c"myBlock")(322812 call(322809 call . dist c"getChunk") whole localeIdx))
                }
                (322818 call _downEndCount _coforallCount[322816] nil[44])
                (322796 'coforall on block' 0 tmp[322783])
              }
            }
          }
          label _continueLabel[322828]
          _indexOfInterest[322823]
          _iterator[322824]
        }
        label _breakLabel[322829]
        Defer
        {
          {
            (322868 call _endCountFree _coforallCount[322816])
          }
        }
        (322873 call _waitEndCount _coforallCount[322816] 0 numTasks[322817])
      }
      {
        const _coforallCount[322885] "const" "end count" "temp"
        (322941 'move' _coforallCount[322885](322938 call _endCountAlloc 0))
        unknown _indexOfInterest[322892] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322893] "expr temp" "temp"
        (322902 'move' _iterator[322893](322900 call _getIterator tmpIter[322777]))
        Defer
        {
          {
            (322918 call _freeIterator _iterator[322893])
          }
        }
        { scopeless type
          (322907 'move' _indexOfInterest[322892](322904 call iteratorIndex _iterator[322893]))
        }
        ForLoop[322894]
        {
          unknown localeIdx[322911] "coforall index var" "index var" "insert auto destroy"
          (322913 'move' localeIdx[322911] _indexOfInterest[322892])
          (322925 call _upEndCount _coforallCount[322885] 0)
          { scopeless
            { scopeless
              const tmp[322768] "const" "temp"
              (322770 'move' tmp[322768](322766 'deref'(322765 '_wide_get_locale'(322746 call(322741 call . dist c"targetLocales") localeIdx))))
              {
                { scopeless
                  (322762 call =(322751 call .(322750 call locDoms localeIdx) c"myBlock")(322761 call(322755 call . dist c"getChunk") whole localeIdx))
                }
                (322887 call _downEndCount _coforallCount[322885] nil[44])
                (322773 'coforall on block' 0 tmp[322768])
              }
            }
          }
          label _continueLabel[322897]
          _indexOfInterest[322892]
          _iterator[322893]
        }
        label _breakLabel[322898]
        Defer
        {
          {
            (322929 call _endCountFree _coforallCount[322885])
          }
        }
        (322934 call _waitEndCount _coforallCount[322885] 0)
      }
    }
  }
  function _unknown[51].dsiDestroyDom[322969](arg _mt[322974]:_MT[238], arg this[322971] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[323005] "expr temp" "maybe ref" "no copy" "temp"
      (323008 'move' tmpIter[323005](322978 call . dist c"targetLocDom"))
      unknown isRngDomArr[323159] "maybe param" "temp"
      (323174 'move' isRngDomArr[323159](323172 call ||(323161 call isBoundedRange tmpIter[323005])(323170 call ||(323164 call isDomain tmpIter[323005])(323167 call isArray tmpIter[323005]))))
      if isRngDomArr[323159]
      {
        const _coforallCount[323031] "const" "end count" "temp"
        (323096 'move' _coforallCount[323031](323093 call _endCountAlloc 0))
        unknown numTasks[323032] "temp"
        (323080 'move' numTasks[323032](323076 call . tmpIter[323005] c"size"))
        (323071 call _upEndCount _coforallCount[323031] 0 numTasks[323032])
        unknown _indexOfInterest[323038] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323039] "expr temp" "temp"
        (323048 'move' _iterator[323039](323046 call _getIterator tmpIter[323005]))
        Defer
        {
          {
            (323064 call _freeIterator _iterator[323039])
          }
        }
        { scopeless type
          (323053 'move' _indexOfInterest[323038](323050 call iteratorIndex _iterator[323039]))
        }
        ForLoop[323040]
        {
          unknown localeIdx[323057] "coforall index var" "index var" "insert auto destroy"
          (323059 'move' localeIdx[323057] _indexOfInterest[323038])
          { scopeless
            { scopeless
              const tmp[323011] "const" "temp"
              (323013 'move' tmp[323011](323015 'deref'(323016 '_wide_get_locale'(323018 call locDoms localeIdx))))
              {
                { scopeless
                  (323026 call chpl__delete(323028 call locDoms localeIdx))
                }
                (323033 call _downEndCount _coforallCount[323031] nil[44])
                (323021 'coforall on block' 0 tmp[323011])
              }
            }
          }
          label _continueLabel[323043]
          _indexOfInterest[323038]
          _iterator[323039]
        }
        label _breakLabel[323044]
        Defer
        {
          {
            (323083 call _endCountFree _coforallCount[323031])
          }
        }
        (323088 call _waitEndCount _coforallCount[323031] 0 numTasks[323032])
      }
      {
        const _coforallCount[323100] "const" "end count" "temp"
        (323156 'move' _coforallCount[323100](323153 call _endCountAlloc 0))
        unknown _indexOfInterest[323107] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323108] "expr temp" "temp"
        (323117 'move' _iterator[323108](323115 call _getIterator tmpIter[323005]))
        Defer
        {
          {
            (323133 call _freeIterator _iterator[323108])
          }
        }
        { scopeless type
          (323122 'move' _indexOfInterest[323107](323119 call iteratorIndex _iterator[323108]))
        }
        ForLoop[323109]
        {
          unknown localeIdx[323126] "coforall index var" "index var" "insert auto destroy"
          (323128 'move' localeIdx[323126] _indexOfInterest[323107])
          (323140 call _upEndCount _coforallCount[323100] 0)
          { scopeless
            { scopeless
              const tmp[322996] "const" "temp"
              (322998 'move' tmp[322996](322994 'deref'(322993 '_wide_get_locale'(322984 call locDoms localeIdx))))
              {
                { scopeless
                  (322990 call chpl__delete(322988 call locDoms localeIdx))
                }
                (323102 call _downEndCount _coforallCount[323100] nil[44])
                (323001 'coforall on block' 0 tmp[322996])
              }
            }
          }
          label _continueLabel[323112]
          _indexOfInterest[323107]
          _iterator[323108]
        }
        label _breakLabel[323113]
        Defer
        {
          {
            (323144 call _endCountFree _coforallCount[323100])
          }
        }
        (323149 call _waitEndCount _coforallCount[323100] 0)
      }
    }
  }
  function _unknown[51].dsiMember[323186](arg _mt[323191]:_MT[238], arg this[323188] :
  BlockDom, arg i[323184]:_any[178](?)) : _unknown[51] "method"
  {
    (323200 return(323199 call(323194 call . whole c"contains") i))
  }
  function _unknown[51].dsiIndexOrder[323210](arg _mt[323215]:_MT[238], arg this[323212] :
  BlockDom, arg i[323208]:_any[178](?)) : _unknown[51] "method"
  {
    (323224 return(323223 call(323218 call . whole c"indexOrder") i))
  }
  function _unknown[51].contains[323234](arg _mt[323239]:_MT[238], arg this[323236] :
  LocBlockDom, arg i[323232]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (323248 return(323247 call(323242 call . myBlock c"contains") i))
    }
  }
  function _unknown[51].dsiDisplayRepresentation[323256](arg _mt[323261]:_MT[238], arg this[323258] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown _indexOfInterest[323369] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[323370] "expr temp" "temp"
      (323379 'move' _iterator[323370](323377 call _getIterator(323268 call .(323265 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (323396 call _freeIterator _iterator[323370])
        }
      }
      { scopeless type
        (323385 'move' _indexOfInterest[323369](323382 call iteratorIndex _iterator[323370]))
      }
      ForLoop[323371]
      {
        unknown tli[323389] "index var" "insert auto destroy"
        (323391 'move' tli[323389] _indexOfInterest[323369])
        {
          (323321 call writeln "locArr[" tli "].myElems = "(323317 for  e  in (323313 call .(323312 call locArr tli) c"myElems") do
          {
            e
          } ))
          if(323364 call _cond_test doRADOpt)
          {
            { scopeless
              (323362 call writeln "locArr[" tli "].locRAD = "(323359 call .(323355 call postfix!(323352 call .(323349 call locArr tli) c"locRAD")) c"RAD"))
            }
          }
        }
        label _continueLabel[323374]
        _indexOfInterest[323369]
        _iterator[323370]
      }
      label _breakLabel[323375]
    }
  }
  function _unknown[51].dsiGetBaseDom[323409](arg _mt[323414]:_MT[238], arg this[323411] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (323417 return dom)
    }
  }
  function _unknown[51].setupRADOpt[323425](arg _mt[323430]:_MT[238], arg this[323427] :
  BlockArr) : _unknown[51] "method"
  {
    {
      unknown _indexOfInterest[323611] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[323612] "expr temp" "temp"
      (323621 'move' _iterator[323612](323619 call _getIterator(323437 call .(323434 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (323638 call _freeIterator _iterator[323612])
        }
      }
      { scopeless type
        (323627 'move' _indexOfInterest[323611](323624 call iteratorIndex _iterator[323612]))
      }
      ForLoop[323613]
      {
        unknown localeIdx[323631] "index var" "insert auto destroy"
        (323633 'move' localeIdx[323631] _indexOfInterest[323611])
        {
          { scopeless
            const tmp[323602] "const" "temp"
            (323604 'move' tmp[323602](323600 'deref'(323599 '_wide_get_locale'(323449 call(323444 call .(323441 call . dom c"dist") c"targetLocales") localeIdx))))
            {
              {
                { scopeless
                  const myLocArr[323454] "const"(323453 call locArr localeIdx)
                  (323457 'end of statement')
                }
                if(323483 call _cond_test(323464 call !=(323460 call . myLocArr c"locRAD") nil[44]))
                {
                  (323471 call chpl__delete(323467 call . myLocArr c"locRAD"))
                  (323480 call =(323476 call . myLocArr c"locRAD") nil[44])
                }
                if(323595 call _cond_test disableBlockLazyRAD)
                {
                  (323509 call =(323489 call . myLocArr c"locRAD")(323494 'new'(_chpl_manager = unmanaged[220](?))(323508 call LocRADCache eltType rank idxType stridable(323505 call .(323502 call . dom c"dist") c"targetLocDom"))))
                  {
                    unknown _indexOfInterest[323561] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[323562] "expr temp" "temp"
                    (323571 'move' _iterator[323562](323569 call _getIterator(323518 call .(323515 call . dom c"dist") c"targetLocDom")))
                    Defer
                    {
                      {
                        (323588 call _freeIterator _iterator[323562])
                      }
                    }
                    { scopeless type
                      (323577 'move' _indexOfInterest[323561](323574 call iteratorIndex _iterator[323562]))
                    }
                    ForLoop[323563]
                    {
                      unknown l[323581] "index var" "insert auto destroy"
                      (323583 'move' l[323581] _indexOfInterest[323561])
                      {
                        if(323556 call _cond_test(323523 call != l localeIdx))
                        {
                          (323552 call =(323536 call(323531 call .(323529 call postfix!(323526 call . myLocArr c"locRAD")) c"RAD") l)(323551 call(323547 call .(323544 call .(323541 call .(323540 call locArr l) c"myElems") c"_value") c"dsiGetRAD")))
                        }
                      }
                      label _continueLabel[323566]
                      _indexOfInterest[323561]
                      _iterator[323562]
                    }
                    label _breakLabel[323567]
                  }
                }
              }
              (323607 'on block' 0 tmp[323602])
            }
          }
        }
        label _continueLabel[323616]
        _indexOfInterest[323611]
        _iterator[323612]
      }
      label _breakLabel[323617]
    }
  }
  function _unknown[51].dsiElementInitializationComplete[323651](arg _mt[323656]:_MT[238], arg this[323653] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[323696] "expr temp" "maybe ref" "no copy" "temp"
      (323699 'move' tmpIter[323696](323663 call .(323660 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[323855] "maybe param" "temp"
      (323870 'move' isRngDomArr[323855](323868 call ||(323857 call isBoundedRange tmpIter[323696])(323866 call ||(323860 call isDomain tmpIter[323696])(323863 call isArray tmpIter[323696]))))
      if isRngDomArr[323855]
      {
        const _coforallCount[323727] "const" "end count" "temp"
        (323792 'move' _coforallCount[323727](323789 call _endCountAlloc 0))
        unknown numTasks[323728] "temp"
        (323776 'move' numTasks[323728](323772 call . tmpIter[323696] c"size"))
        (323767 call _upEndCount _coforallCount[323727] 0 numTasks[323728])
        unknown _indexOfInterest[323734] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323735] "expr temp" "temp"
        (323744 'move' _iterator[323735](323742 call _getIterator tmpIter[323696]))
        Defer
        {
          {
            (323760 call _freeIterator _iterator[323735])
          }
        }
        { scopeless type
          (323749 'move' _indexOfInterest[323734](323746 call iteratorIndex _iterator[323735]))
        }
        ForLoop[323736]
        {
          unknown localeIdx[323753] "coforall index var" "index var" "insert auto destroy"
          (323755 'move' localeIdx[323753] _indexOfInterest[323734])
          { scopeless
            { scopeless
              const tmp[323702] "const" "temp"
              (323704 'move' tmp[323702](323706 'deref'(323707 '_wide_get_locale'(323709 call locArr localeIdx))))
              {
                {
                  (323725 call(323717 call .(323719 call .(323721 call locArr localeIdx) c"myElems") c"dsiElementInitializationComplete"))
                }
                (323729 call _downEndCount _coforallCount[323727] nil[44])
                (323712 'coforall on block' 0 tmp[323702])
              }
            }
          }
          label _continueLabel[323739]
          _indexOfInterest[323734]
          _iterator[323735]
        }
        label _breakLabel[323740]
        Defer
        {
          {
            (323779 call _endCountFree _coforallCount[323727])
          }
        }
        (323784 call _waitEndCount _coforallCount[323727] 0 numTasks[323728])
      }
      {
        const _coforallCount[323796] "const" "end count" "temp"
        (323852 'move' _coforallCount[323796](323849 call _endCountAlloc 0))
        unknown _indexOfInterest[323803] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323804] "expr temp" "temp"
        (323813 'move' _iterator[323804](323811 call _getIterator tmpIter[323696]))
        Defer
        {
          {
            (323829 call _freeIterator _iterator[323804])
          }
        }
        { scopeless type
          (323818 'move' _indexOfInterest[323803](323815 call iteratorIndex _iterator[323804]))
        }
        ForLoop[323805]
        {
          unknown localeIdx[323822] "coforall index var" "index var" "insert auto destroy"
          (323824 'move' localeIdx[323822] _indexOfInterest[323803])
          (323836 call _upEndCount _coforallCount[323796] 0)
          { scopeless
            { scopeless
              const tmp[323687] "const" "temp"
              (323689 'move' tmp[323687](323685 'deref'(323684 '_wide_get_locale'(323669 call locArr localeIdx))))
              {
                {
                  (323681 call(323677 call .(323674 call .(323673 call locArr localeIdx) c"myElems") c"dsiElementInitializationComplete"))
                }
                (323798 call _downEndCount _coforallCount[323796] nil[44])
                (323692 'coforall on block' 0 tmp[323687])
              }
            }
          }
          label _continueLabel[323808]
          _indexOfInterest[323803]
          _iterator[323804]
        }
        label _breakLabel[323809]
        Defer
        {
          {
            (323840 call _endCountFree _coforallCount[323796])
          }
        }
        (323845 call _waitEndCount _coforallCount[323796] 0)
      }
    }
  }
  function _unknown[51].dsiElementDeinitializationComplete[323880](arg _mt[323885]:_MT[238], arg this[323882] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[323925] "expr temp" "maybe ref" "no copy" "temp"
      (323928 'move' tmpIter[323925](323892 call .(323889 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[324084] "maybe param" "temp"
      (324099 'move' isRngDomArr[324084](324097 call ||(324086 call isBoundedRange tmpIter[323925])(324095 call ||(324089 call isDomain tmpIter[323925])(324092 call isArray tmpIter[323925]))))
      if isRngDomArr[324084]
      {
        const _coforallCount[323956] "const" "end count" "temp"
        (324021 'move' _coforallCount[323956](324018 call _endCountAlloc 0))
        unknown numTasks[323957] "temp"
        (324005 'move' numTasks[323957](324001 call . tmpIter[323925] c"size"))
        (323996 call _upEndCount _coforallCount[323956] 0 numTasks[323957])
        unknown _indexOfInterest[323963] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323964] "expr temp" "temp"
        (323973 'move' _iterator[323964](323971 call _getIterator tmpIter[323925]))
        Defer
        {
          {
            (323989 call _freeIterator _iterator[323964])
          }
        }
        { scopeless type
          (323978 'move' _indexOfInterest[323963](323975 call iteratorIndex _iterator[323964]))
        }
        ForLoop[323965]
        {
          unknown localeIdx[323982] "coforall index var" "index var" "insert auto destroy"
          (323984 'move' localeIdx[323982] _indexOfInterest[323963])
          { scopeless
            { scopeless
              const tmp[323931] "const" "temp"
              (323933 'move' tmp[323931](323935 'deref'(323936 '_wide_get_locale'(323938 call locArr localeIdx))))
              {
                {
                  (323954 call(323946 call .(323948 call .(323950 call locArr localeIdx) c"myElems") c"dsiElementDeinitializationComplete"))
                }
                (323958 call _downEndCount _coforallCount[323956] nil[44])
                (323941 'coforall on block' 0 tmp[323931])
              }
            }
          }
          label _continueLabel[323968]
          _indexOfInterest[323963]
          _iterator[323964]
        }
        label _breakLabel[323969]
        Defer
        {
          {
            (324008 call _endCountFree _coforallCount[323956])
          }
        }
        (324013 call _waitEndCount _coforallCount[323956] 0 numTasks[323957])
      }
      {
        const _coforallCount[324025] "const" "end count" "temp"
        (324081 'move' _coforallCount[324025](324078 call _endCountAlloc 0))
        unknown _indexOfInterest[324032] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324033] "expr temp" "temp"
        (324042 'move' _iterator[324033](324040 call _getIterator tmpIter[323925]))
        Defer
        {
          {
            (324058 call _freeIterator _iterator[324033])
          }
        }
        { scopeless type
          (324047 'move' _indexOfInterest[324032](324044 call iteratorIndex _iterator[324033]))
        }
        ForLoop[324034]
        {
          unknown localeIdx[324051] "coforall index var" "index var" "insert auto destroy"
          (324053 'move' localeIdx[324051] _indexOfInterest[324032])
          (324065 call _upEndCount _coforallCount[324025] 0)
          { scopeless
            { scopeless
              const tmp[323916] "const" "temp"
              (323918 'move' tmp[323916](323914 'deref'(323913 '_wide_get_locale'(323898 call locArr localeIdx))))
              {
                {
                  (323910 call(323906 call .(323903 call .(323902 call locArr localeIdx) c"myElems") c"dsiElementDeinitializationComplete"))
                }
                (324027 call _downEndCount _coforallCount[324025] nil[44])
                (323921 'coforall on block' 0 tmp[323916])
              }
            }
          }
          label _continueLabel[324037]
          _indexOfInterest[324032]
          _iterator[324033]
        }
        label _breakLabel[324038]
        Defer
        {
          {
            (324069 call _endCountFree _coforallCount[324025])
          }
        }
        (324074 call _waitEndCount _coforallCount[324025] 0)
      }
    }
  }
  function _unknown[51].dsiDestroyArr[324113](arg _mt[324118]:_MT[238], arg this[324115] :
  BlockArr, arg deinitElts[324110] :
  bool[10]) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[324182] "expr temp" "maybe ref" "no copy" "temp"
      (324185 'move' tmpIter[324182](324125 call .(324122 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[324361] "maybe param" "temp"
      (324376 'move' isRngDomArr[324361](324374 call ||(324363 call isBoundedRange tmpIter[324182])(324372 call ||(324366 call isDomain tmpIter[324182])(324369 call isArray tmpIter[324182]))))
      if isRngDomArr[324361]
      {
        const _coforallCount[324233] "const" "end count" "temp"
        (324298 'move' _coforallCount[324233](324295 call _endCountAlloc 0))
        unknown numTasks[324234] "temp"
        (324282 'move' numTasks[324234](324278 call . tmpIter[324182] c"size"))
        (324273 call _upEndCount _coforallCount[324233] 0 numTasks[324234])
        unknown _indexOfInterest[324240] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324241] "expr temp" "temp"
        (324250 'move' _iterator[324241](324248 call _getIterator tmpIter[324182]))
        Defer
        {
          {
            (324266 call _freeIterator _iterator[324241])
          }
        }
        { scopeless type
          (324255 'move' _indexOfInterest[324240](324252 call iteratorIndex _iterator[324241]))
        }
        ForLoop[324242]
        {
          unknown localeIdx[324259] "coforall index var" "index var" "insert auto destroy"
          (324261 'move' localeIdx[324259] _indexOfInterest[324240])
          { scopeless
            { scopeless
              const tmp[324188] "const" "temp"
              (324190 'move' tmp[324188](324192 'deref'(324193 '_wide_get_locale'(324195 call locArr localeIdx))))
              {
                {
                  { scopeless
                    unknown arr[324203](324205 call locArr localeIdx)
                    (324208 'end of statement')
                  }
                  if(324210 call _cond_test deinitElts)
                  {
                    { scopeless
                      (324215 call _deinitElements(324217 call . arr c"myElems"))
                    }
                  }
                  (324228 call(324222 call .(324224 call . arr c"myElems") c"dsiElementDeinitializationComplete"))
                  (324230 call chpl__delete arr)
                }
                (324235 call _downEndCount _coforallCount[324233] nil[44])
                (324198 'coforall on block' 0 tmp[324188])
              }
            }
          }
          label _continueLabel[324245]
          _indexOfInterest[324240]
          _iterator[324241]
        }
        label _breakLabel[324246]
        Defer
        {
          {
            (324285 call _endCountFree _coforallCount[324233])
          }
        }
        (324290 call _waitEndCount _coforallCount[324233] 0 numTasks[324234])
      }
      {
        const _coforallCount[324302] "const" "end count" "temp"
        (324358 'move' _coforallCount[324302](324355 call _endCountAlloc 0))
        unknown _indexOfInterest[324309] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324310] "expr temp" "temp"
        (324319 'move' _iterator[324310](324317 call _getIterator tmpIter[324182]))
        Defer
        {
          {
            (324335 call _freeIterator _iterator[324310])
          }
        }
        { scopeless type
          (324324 'move' _indexOfInterest[324309](324321 call iteratorIndex _iterator[324310]))
        }
        ForLoop[324311]
        {
          unknown localeIdx[324328] "coforall index var" "index var" "insert auto destroy"
          (324330 'move' localeIdx[324328] _indexOfInterest[324309])
          (324342 call _upEndCount _coforallCount[324302] 0)
          { scopeless
            { scopeless
              const tmp[324173] "const" "temp"
              (324175 'move' tmp[324173](324171 'deref'(324170 '_wide_get_locale'(324131 call locArr localeIdx))))
              {
                {
                  { scopeless
                    unknown arr[324136](324135 call locArr localeIdx)
                    (324139 'end of statement')
                  }
                  if(324150 call _cond_test deinitElts)
                  {
                    { scopeless
                      (324148 call _deinitElements(324144 call . arr c"myElems"))
                    }
                  }
                  (324163 call(324159 call .(324156 call . arr c"myElems") c"dsiElementDeinitializationComplete"))
                  (324167 call chpl__delete arr)
                }
                (324304 call _downEndCount _coforallCount[324302] nil[44])
                (324178 'coforall on block' 0 tmp[324173])
              }
            }
          }
          label _continueLabel[324314]
          _indexOfInterest[324309]
          _iterator[324310]
        }
        label _breakLabel[324315]
        Defer
        {
          {
            (324346 call _endCountFree _coforallCount[324302])
          }
        }
        (324351 call _waitEndCount _coforallCount[324302] 0)
      }
    }
  }
  function _unknown[51].dsiLocalAccess[324393](arg _mt[324398]:_MT[238], arg this[324395] :
  BlockArr, arg i[324390] :
  (324388 call * rank idxType)) ref : _unknown[51] "inline" "method"
  {
    (324412 return(324411 call(324406 call .(324403 call _to_nonnil myLocArr) c"this") i))
  }
  function _unknown[51].dsiAccess[324427](arg _mt[324432]:_MT[238], arg this[324429] :
  BlockArr, const in arg idx[324424] :
  (324422 call * rank idxType)) ref : _unknown[51] "inline" "method"
  {
    {
      {
        if(324465 call _cond_test(324451 call &&(324436 call != myLocArr nil[44])(324450 call(324445 call .(324442 call .(324441 call _to_nonnil myLocArr) c"locDom") c"contains") idx)))
        {
          { scopeless
            (324463 return(324462 call(324457 call .(324456 call _to_nonnil myLocArr) c"this") idx))
          }
        }
      }
      (324473 'local block')
    }
    (324479 return(324478 call nonLocalAccess idx))
  }
  function _unknown[51].dsiBoundsCheck[324493](arg _mt[324498]:_MT[238], arg this[324495] :
  BlockArr, arg i[324490] :
  (324488 call * rank idxType)) : _unknown[51] "inline" "method"
  {
    (324507 return(324506 call(324501 call . dom c"dsiMember") i))
  }
  function _unknown[51].nonLocalAccess[324522](arg _mt[324527]:_MT[238], arg this[324524] :
  BlockArr, arg i[324519] :
  (324517 call * rank idxType)) ref : _unknown[51] "method" "fn unordered safe"
  {
    if(324815 call _cond_test doRADOpt)
    {
      if(324810 call _cond_test(324533 call . this c"myLocArr"))
      {
        { scopeless
          const myLocArr[324543] "const"(324542 call _to_nonnil(324538 call . this c"myLocArr"))
          (324546 'end of statement')
        }
        { scopeless
          unknown rlocIdx[324560](324559 call(324554 call .(324549 call . dom c"dist") c"targetLocsIdx") i)
          (324563 'end of statement')
        }
        if(324746 call _cond_test(324565 call ! disableBlockLazyRAD))
        {
          if(324649 call _cond_test(324572 call ==(324568 call . myLocArr c"locRAD") nil[44]))
          {
            (324584 call(324580 call .(324577 call . myLocArr c"locRADLock") c"lock"))
            if(324635 call _cond_test(324592 call ==(324588 call . myLocArr c"locRAD") nil[44]))
            {
              { scopeless
                unknown tempLocRAD[324611](324596 'new'(_chpl_manager = unmanaged[220](?))(324610 call LocRADCache eltType rank idxType stridable(324607 call .(324604 call . dom c"dist") c"targetLocDom")))
                (324614 'end of statement')
              }
              (324624 call =(324620 call .(324617 call . tempLocRAD c"RAD") c"blk") SENTINEL)
              (324632 call =(324628 call . myLocArr c"locRAD") tempLocRAD)
            }
            (324647 call(324643 call .(324640 call . myLocArr c"locRADLock") c"unlock"))
          }
          { scopeless
            const locRAD[324661] "const"(324660 call _to_nonnil(324656 call . myLocArr c"locRAD"))
            (324664 'end of statement')
          }
          if(324742 call _cond_test(324676 call ==(324672 call .(324671 call(324666 call . locRAD c"RAD") rlocIdx) c"blk") SENTINEL))
          {
            (324686 call(324681 call . locRAD c"lockRAD") rlocIdx)
            if(324728 call _cond_test(324700 call ==(324696 call .(324695 call(324690 call . locRAD c"RAD") rlocIdx) c"blk") SENTINEL))
            {
              (324724 call =(324708 call(324703 call . locRAD c"RAD") rlocIdx)(324723 call(324719 call .(324716 call .(324713 call .(324712 call locArr rlocIdx) c"myElems") c"_value") c"dsiGetRAD")))
            }
            (324740 call(324735 call . locRAD c"unlockRAD") rlocIdx)
          }
        }
        { scopeless
          unknown myLocRAD[324754] "no auto destroy" "no copy"(324751 call . myLocArr c"locRAD")
          (324757 'end of statement')
        }
        { scopeless
          unknown radata[324765] "no auto destroy" "no copy"(324762 call .(324761 call _to_nonnil myLocRAD) c"RAD")
          (324768 'end of statement')
        }
        if(324806 call _cond_test(324777 call !=(324773 call .(324772 call radata rlocIdx) c"shiftedData") nil[44]))
        {
          { scopeless
            unknown dataIdx[324789](324788 call(324783 call .(324782 call radata rlocIdx) c"getDataIndex") i)
            (324792 'end of statement')
          }
          (324804 return(324803 call(324798 call .(324797 call radata rlocIdx) c"getDataElem") dataIdx))
        }
      }
    }
    (324836 return(324835 call(324832 call locArr(324830 call(324825 call .(324822 call . dom c"dist") c"targetLocsIdx") i)) i))
  }
  function _unknown[51].dsiAccess[324849](arg _mt[324854]:_MT[238], arg this[324851] :
  BlockArr, arg i[324845] ... :
  idxType) ref : _unknown[51] "method"
  {
    { scopeless
      (324860 return(324859 call dsiAccess i))
    }
  }
  function _unknown[51].these[324868](arg _mt[324873]:_MT[238], arg this[324870] :
  BlockArr) ref : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[324883] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[324884] "expr temp" "temp"
      (324893 'move' _iterator[324884](324891 call _getIterator dom))
      Defer
      {
        {
          (324909 call _freeIterator _iterator[324884])
        }
      }
      { scopeless type
        (324898 'move' _indexOfInterest[324883](324895 call iteratorIndex _iterator[324884]))
      }
      ForLoop[324885]
      {
        unknown i[324902] "index var" "insert auto destroy"
        (324904 'move' i[324902] _indexOfInterest[324883])
        { scopeless
          (324881 yield(324880 call dsiAccess i))
        }
        label _continueLabel[324888]
        _indexOfInterest[324883]
        _iterator[324884]
      }
      label _breakLabel[324889]
    }
  }
  function _unknown[51].these[324926](arg _mt[324931]:_MT[238], arg this[324928] :
  BlockArr, param arg tag[324923] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[324951] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[324952] "expr temp" "temp"
      (324961 'move' _iterator[324952](324959 call _getIterator(324947 call(324942 call . dom c"these") tag)))
      Defer
      {
        {
          (324978 call _freeIterator _iterator[324952])
        }
      }
      { scopeless type
        (324967 'move' _indexOfInterest[324951](324964 call iteratorIndex _iterator[324952]))
      }
      ForLoop[324953]
      {
        unknown followThis[324971] "index var" "insert auto destroy"
        (324973 'move' followThis[324971] _indexOfInterest[324951])
        { scopeless
          (324949 yield followThis)
        }
        label _continueLabel[324956]
        _indexOfInterest[324951]
        _iterator[324952]
      }
      label _breakLabel[324957]
    }
  }
  where {
    (324938 call == tag(324935 call . iterKind c"leader"))
  }
  function _unknown[51].dsiStaticFastFollowCheck[324994](arg _mt[324999]:_MT[238], arg this[324996] :
  BlockArr, arg leadType[324992]:_any[178](?)) param : _unknown[51] "method" "method overrides"
  {
    if(325052 call _cond_test(325005 call isSubtype leadType BlockArr))
    {
      { scopeless
        unknown x[325008](325007 'to nilable class from type' leadType)
        (325011 'end of statement')
      }
      (325033 return(325031 call ==(325022 call _to_borrowed(325020 'typeof'(325017 call .(325015 call postfix! x) c"dom")))(325030 call _to_borrowed(325028 'typeof'(325025 call . this c"dom")))))
    }
    {
      (325049 return(325047 call ==(325038 call _to_borrowed leadType)(325046 call _to_borrowed(325044 'typeof'(325041 call . this c"dom")))))
    }
  }
  function _unknown[51].dsiDynamicFastFollowCheck[325068](arg _mt[325073]:_MT[238], arg this[325070] :
  BlockArr, arg lead[325065] :
  (325062 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method"
  {
    { scopeless
      (325085 return(325084 call(325076 call . this c"dsiDynamicFastFollowCheck")(325080 call . lead c"_dom")))
    }
  }
  function _unknown[51].dsiDynamicFastFollowCheck[325097](arg _mt[325102]:_MT[238], arg this[325099] :
  BlockArr, arg lead[325094] :
  _domain) : _unknown[51] "method"
  {
    (325138 return(325136 call &&(325119 call(325108 call .(325105 call . lead c"dist") c"dsiEqualDMaps")(325115 call .(325112 call . this c"dom") c"dist"))(325134 call ==(325124 call .(325121 call . lead c"_value") c"whole")(325131 call .(325128 call . this c"dom") c"whole"))))
  }
  function _unknown[51].these[325150](arg _mt[325163]:_MT[238], arg this[325160] :
  BlockArr, param arg tag[325147] :
  iterKind, arg followThis[325152]:_any[178](?), param arg fast[325156] :
  bool[10] =
  0) ref : _unknown[51] "iterator fn" "method"
  {
    function anyStridable[325176](arg rangeTuple[325174]:_any[178](?), param arg i[325180] :
    int[13] =
    0) param : _unknown[51]
    {
      { scopeless
        (325221 return(325218 IfExpr (325192 call == i(325190 call -(325186 call . rangeTuple c"size") 1)) then
        { scopeless
          (325198 call .(325197 call rangeTuple i) c"stridable")
        } else
        { scopeless
          (325216 call ||(325205 call .(325204 call rangeTuple i) c"stridable")(325215 call anyStridable rangeTuple(325213 call + i 1)))
        } ))
      }
    }
    if(325280 call _cond_test chpl__testParFlag)
    {
      if(325273 call _cond_test fast)
      {
        { scopeless
          (325249 call chpl__testParWriteln "Block array fast follower invoked on " followThis)
        }
      }
      {
        { scopeless
          (325271 call chpl__testParWriteln "Block array non-fast follower invoked on " followThis)
        }
      }
    }
    if(325344 call _cond_test testFastFollowerOptimization)
    {
      { scopeless
        (325342 call writeln(325339 call +(325319 IfExpr  fast then
        { scopeless
          "fast"
        } else
        { scopeless
          "regular"
        } ) " follower invoked for Block array"))
      }
    }
    { scopeless
      unknown myFollowThis[325365](325363 call * rank(325362 call range(idxType = idxType)(stridable =(325359 call || stridable(325358 call anyStridable followThis)))))
      (325368 'end of statement')
    }
    { scopeless
      unknown lowIdx[325373](325371 call * rank idxType)
      (325376 'end of statement')
    }
    {
      unknown i[325504] 0
      unknown tmp[325505] "maybe param" "temp"
      (325517 'move' tmp[325505](325515 call chpl_compute_low_param_loop_bound 0(325380 call - rank 1)))
      unknown tmp[325506] "maybe param" "temp"
      (325527 'move' tmp[325506](325525 call chpl_compute_high_param_loop_bound 0(325522 call - rank 1)))
      unknown tmp[325507] "maybe param" "temp"
      (325530 'move' tmp[325507] 1)
      ParamForLoop[325532]
      { i[325504] tmp[325505] tmp[325506] tmp[325507]
        {
          { scopeless
            unknown stride[325397](325394 call .(325393 call(325388 call .(325385 call . dom c"whole") c"dim") i) c"stride")
            (325400 'end of statement')
          }
          { scopeless
            unknown low[325418](325416 call *(325406 call .(325405 call followThis i) c"low")(325414 call _cast idxType(325412 call abs stride)))
            (325421 'end of statement')
          }
          { scopeless
            unknown high[325438](325436 call *(325426 call .(325425 call followThis i) c"high")(325434 call _cast idxType(325432 call abs stride)))
            (325441 'end of statement')
          }
          (325487 call =(325445 call myFollowThis i)(325486 call(325477 call .(325475 call chpl_by(325466 call +(325451 call chpl_by(325448 call chpl_build_bounded_range low high) stride)(325463 call .(325462 call(325457 call .(325454 call . dom c"whole") c"dim") i) c"alignedLow"))(325472 call .(325471 call followThis i) c"stride")) c"safeCast")(325484 'typeof'(325483 call myFollowThis i))))
          (325501 call =(325493 call lowIdx i)(325498 call .(325497 call myFollowThis i) c"low"))
        }
      }
      label _unused_continueLabel[325509]
      label _breakLabel[325508]
    }
    { scopeless
      const myFollowThisDom[325546] "const"(325544 call chpl__buildDomainExpr(325542 'expand_tuple' myFollowThis))
      (325549 'end of statement')
    }
    if(325705 call _cond_test fast)
    {
      { scopeless
        unknown arrSection[325564](325563 call locArr(325561 call(325556 call .(325553 call . dom c"dist") c"targetLocsIdx") lowIdx))
        (325567 'end of statement')
      }
      if(325588 call _cond_test(325578 call !=(325573 '_wide_get_node' arrSection)(325575 call . here c"id")))
      {
        { scopeless
          (325585 call = arrSection(325584 call _to_nonnil myLocArr))
        }
      }
      {
        {
          { scopeless
            const narrowArrSection[325602] "const"(325600 call _cast(325599 'to nilable class from type'(325598 'typeof' arrSection))(325596 '_wide_get_addr' arrSection))
            (325605 'end of statement')
          }
          { scopeless
            unknown myElems[325614] "ref var"(325611 call .(325610 call _to_nonnil narrowArrSection) c"myElems")
            (325617 'end of statement')
          }
          {
            unknown _indexOfInterest[325626] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[325627] "expr temp" "temp"
            (325636 'move' _iterator[325627](325634 call _getIterator myFollowThisDom))
            Defer
            {
              {
                (325652 call _freeIterator _iterator[325627])
              }
            }
            { scopeless type
              (325641 'move' _indexOfInterest[325626](325638 call iteratorIndex _iterator[325627]))
            }
            ForLoop[325628]
            {
              unknown i[325645] "index var" "insert auto destroy"
              (325647 'move' i[325645] _indexOfInterest[325626])
              { scopeless
                (325624 yield(325623 call myElems i))
              }
              label _continueLabel[325631]
              _indexOfInterest[325626]
              _iterator[325627]
            }
            label _breakLabel[325632]
          }
        }
        (325661 'local block')
      }
    }
    {
      {
        unknown _indexOfInterest[325671] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[325672] "expr temp" "temp"
        (325681 'move' _iterator[325672](325679 call _getIterator myFollowThisDom))
        Defer
        {
          {
            (325697 call _freeIterator _iterator[325672])
          }
        }
        { scopeless type
          (325686 'move' _indexOfInterest[325671](325683 call iteratorIndex _iterator[325672]))
        }
        ForLoop[325673]
        {
          unknown i[325690] "index var" "insert auto destroy"
          (325692 'move' i[325690] _indexOfInterest[325671])
          {
            (325668 yield(325667 call dsiAccess i))
          }
          label _continueLabel[325676]
          _indexOfInterest[325671]
          _iterator[325672]
        }
        label _breakLabel[325677]
      }
    }
  }
  where {
    (325170 call == tag(325167 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialRead[325717](arg _mt[325722]:_MT[238], arg this[325719] :
  BlockArr, arg f[325715]:_any[178](?)) : _unknown[51] "method"
  {
    (325728 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiSerialWrite[325738](arg _mt[325743]:_MT[238], arg this[325740] :
  BlockArr, arg f[325736]:_any[178](?)) : _unknown[51] "method"
  {
    (325749 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiLocalSlice[325759](arg _mt[325764]:_MT[238], arg this[325761] :
  BlockArr, arg ranges[325757]:_any[178](?)) : _unknown[51] "method" "no copy return"
  {
    { scopeless
      unknown low[325770](325768 call * rank idxType)
      (325773 'end of statement')
    }
    {
      unknown i[325797] 0
      unknown tmp[325798] "maybe param" "temp"
      (325810 'move' tmp[325798](325808 call chpl_compute_low_param_loop_bound 0(325778 call - rank 1)))
      unknown tmp[325799] "maybe param" "temp"
      (325820 'move' tmp[325799](325818 call chpl_compute_high_param_loop_bound 0(325815 call - rank 1)))
      unknown tmp[325800] "maybe param" "temp"
      (325823 'move' tmp[325800] 1)
      ParamForLoop[325825]
      { i[325797] tmp[325798] tmp[325799] tmp[325800]
        {
          (325793 call =(325785 call low i)(325790 call .(325789 call ranges i) c"alignedLow"))
        }
      }
      label _unused_continueLabel[325802]
      label _breakLabel[325801]
    }
    (325854 return(325853 call(325847 call .(325846 call locArr(325844 call(325839 call .(325836 call . dom c"dist") c"targetLocsIdx") low)) c"myElems")(325851 'expand_tuple' ranges)))
  }
  function _extendTuple[325862](arg t[325860]:_any[178](?), arg idx[325865] :
  _tuple, arg args[325868]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[325877](325875 call *(325871 call . args c"size") t)
      (325880 'end of statement')
    }
    { scopeless
      unknown j[325884] 1 int[13]
      (325887 'end of statement')
    }
    {
      unknown i[325939] 0
      unknown tmp[325940] "maybe param" "temp"
      (325952 'move' tmp[325940](325950 call chpl_compute_low_param_loop_bound 0(325894 call -(325890 call . args c"size") 1)))
      unknown tmp[325941] "maybe param" "temp"
      (325965 'move' tmp[325941](325963 call chpl_compute_high_param_loop_bound 0(325957 call -(325959 call . args c"size") 1)))
      unknown tmp[325942] "maybe param" "temp"
      (325968 'move' tmp[325942] 1)
      ParamForLoop[325970]
      { i[325939] tmp[325940] tmp[325941] tmp[325942]
        {
          if(325933 call _cond_test(325904 call isCollapsedDimension(325902 call args i)))
          {
            { scopeless
              (325913 call =(325908 call tup i)(325912 call args i))
            }
          }
          {
            (325924 call =(325919 call tup i)(325923 call idx j))
            (325930 call += j 1)
          }
        }
      }
      label _unused_continueLabel[325944]
      label _breakLabel[325943]
    }
    (325980 return tup)
  }
  function _extendTuple[325988](arg t[325986]:_any[178](?), arg idx[325990]:_any[178](?), arg args[325992]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[326001](325999 call *(325995 call . args c"size") t)
      (326004 'end of statement')
    }
    { scopeless
      unknown idxTup[326009](326007 call _build_tuple idx)
      (326012 'end of statement')
    }
    { scopeless
      unknown j[326015] 1 int[13]
      (326018 'end of statement')
    }
    {
      unknown i[326070] 0
      unknown tmp[326071] "maybe param" "temp"
      (326083 'move' tmp[326071](326081 call chpl_compute_low_param_loop_bound 0(326025 call -(326021 call . args c"size") 1)))
      unknown tmp[326072] "maybe param" "temp"
      (326096 'move' tmp[326072](326094 call chpl_compute_high_param_loop_bound 0(326088 call -(326090 call . args c"size") 1)))
      unknown tmp[326073] "maybe param" "temp"
      (326099 'move' tmp[326073] 1)
      ParamForLoop[326101]
      { i[326070] tmp[326071] tmp[326072] tmp[326073]
        {
          if(326064 call _cond_test(326035 call isCollapsedDimension(326033 call args i)))
          {
            { scopeless
              (326044 call =(326039 call tup i)(326043 call args i))
            }
          }
          {
            (326055 call =(326050 call tup i)(326054 call idxTup j))
            (326061 call += j 1)
          }
        }
      }
      label _unused_continueLabel[326075]
      label _breakLabel[326074]
    }
    (326111 return tup)
  }
  function _unknown[51].dsiReallocate[326133](arg _mt[326138]:_MT[238], arg this[326135] :
  BlockArr, arg bounds[326130] :
  (326128 call * rank(326127 call range idxType(326123 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "method overrides"
  {
  }
  function _unknown[51].dsiPostReallocate[326146](arg _mt[326151]:_MT[238], arg this[326148] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    if(326158 call _cond_test doRADOpt)
    {
      { scopeless
        (326156 call setupRADOpt)
      }
    }
  }
  function _unknown[51].setRADOpt[326173](arg _mt[326178]:_MT[238], arg this[326175] :
  BlockArr, arg val[326170] =
  1) : _unknown[51] "method"
  {
    (326182 call = doRADOpt val)
    if(326191 call _cond_test doRADOpt)
    {
      { scopeless
        (326189 call setupRADOpt)
      }
    }
  }
  function _unknown[51].this[326203](arg _mt[326208]:_MT[238], arg this[326205] :
  LocBlockArr, arg i[326201]:_any[178](?)) ref : _unknown[51] "inline" "method"
  {
    (326214 return(326213 call myElems i))
  }
  function _unknown[51].dsiSupportsAutoLocalAccess[326222](arg _mt[326227]:_MT[238], arg this[326224] :
  BlockDom) param : _unknown[51] "method" "method overrides"
  {
    (326230 return 1)
  }
  function _unknown[51].init[326242](arg _mt[326270]:_MT[238], arg this[326267] :
  Block, arg other[326239] :
  Block, arg privateData[326244]:_any[178](?), param arg rank[326250] =
  (326247 call . other c"rank"), arg idxType[326257]:_any[178](?) =
  (326254 call . other c"idxType"), arg sparseLayoutType[326264]:_any[178](?) =
  (326261 call . other c"sparseLayoutType")) : _unknown[51] "method"
  {
    (326277 call =(326273 call . this c"rank") rank)
    (326286 call =(326282 call . this c"idxType") idxType)
    (326298 call = boundingBox(326296 call chpl__buildDomainExpr(326294 'expand_tuple'(326293 call privateData 0))))
    (326310 call = targetLocDom(326308 call chpl__buildDomainExpr(326306 'expand_tuple'(326305 call privateData 1))))
    (326318 call = targetLocales(326315 call . other c"targetLocales"))
    (326326 call = locDist(326323 call . other c"locDist"))
    (326334 call = dataParTasksPerLocale(326333 call privateData 2))
    (326342 call = dataParIgnoreRunningTasks(326341 call privateData 3))
    (326350 call = dataParMinGranularity(326349 call privateData 4))
    (326358 call =(326354 call . this c"sparseLayoutType") sparseLayoutType)
  }
  function _unknown[51].dsiSupportsPrivatization[326366](arg _mt[326371]:_MT[238], arg this[326368] :
  Block) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326374 return 1)
    }
  }
  function _unknown[51].dsiGetPrivatizeData[326382](arg _mt[326387]:_MT[238], arg this[326384] :
  Block) : _unknown[51] "method"
  {
    (326407 return(326405 call _build_tuple(326394 call(326390 call . boundingBox c"dims"))(326400 call(326396 call . targetLocDom c"dims")) dataParTasksPerLocale dataParIgnoreRunningTasks dataParMinGranularity))
  }
  function _unknown[51].dsiPrivatize[326417](arg _mt[326422]:_MT[238], arg this[326419] :
  Block, arg privatizeData[326415]:_any[178](?)) : _unknown[51] "method"
  {
    (326435 return(326426 'new'(_chpl_manager = unmanaged[220](?))(326434 call Block(326431 call _to_unmanaged this) privatizeData)))
  }
  function _unknown[51].dsiGetReprivatizeData[326443](arg _mt[326448]:_MT[238], arg this[326445] :
  Block) : _unknown[51] "method"
  {
    { scopeless
      (326456 return(326455 call(326451 call . boundingBox c"dims")))
    }
  }
  function _unknown[51].dsiReprivatize[326466](arg _mt[326473]:_MT[238], arg this[326470] :
  Block, arg other[326464]:_any[178](?), arg reprivatizeData[326468]:_any[178](?)) : _unknown[51] "method"
  {
    (326481 call = boundingBox(326479 call chpl__buildDomainExpr(326477 'expand_tuple' reprivatizeData)))
    (326490 call = targetLocDom(326487 call . other c"targetLocDom"))
    (326498 call = targetLocales(326495 call . other c"targetLocales"))
    (326506 call = locDist(326503 call . other c"locDist"))
    (326514 call = dataParTasksPerLocale(326511 call . other c"dataParTasksPerLocale"))
    (326522 call = dataParIgnoreRunningTasks(326519 call . other c"dataParIgnoreRunningTasks"))
    (326530 call = dataParMinGranularity(326527 call . other c"dataParMinGranularity"))
  }
  function _unknown[51].chpl__serialize[326538](arg _mt[326543]:_MT[238], arg this[326540] :
  BlockDom) : _unknown[51] "method"
  {
    (326546 return pid)
  }
  function _unknown[51].chpl__deserialize[326556](arg _mt[326561]:_MT[238], arg this[326558] :
  BlockDom, arg data[326554]:_any[178](?)) : _unknown[51] "method"
  {
    (326591 return(326590 call chpl_getPrivatizedCopy(326587 'to unmanaged class from unknown'(326586 call BlockDom(rank =(326566 call . this c"rank"))(idxType =(326572 call . this c"idxType"))(stridable =(326577 call . this c"stridable"))(sparseLayoutType =(326582 call . this c"sparseLayoutType")))) data))
  }
  function _unknown[51].dsiSupportsPrivatization[326599](arg _mt[326604]:_MT[238], arg this[326601] :
  BlockDom) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326607 return 1)
    }
  }
  type BlockDomPrvData[326626](?) unknown distpid[326613] unknown dims[326617] unknown locdoms[326621]
  function _unknown[51].dsiGetPrivatizeData[326632](arg _mt[326637]:_MT[238], arg this[326634] :
  BlockDom) : _unknown[51] "method"
  {
    (326654 return(326639 'new'(326653 call BlockDomPrvData(326642 call . dist c"pid")(326651 call(326647 call . whole c"dims")) locDoms)))
  }
  function _unknown[51].dsiPrivatize[326664](arg _mt[326669]:_MT[238], arg this[326666] :
  BlockDom, arg privatizeData[326662]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown privdist[326682](326681 call chpl_getPrivatizedCopy(326673 'typeof' dist)(326678 call . privatizeData c"distpid"))
      (326685 'end of statement')
    }
    { scopeless
      unknown locDomsTemp[326709](326706 call . privatizeData c"locdoms")(326701 call chpl__buildArrayRuntimeType(326699 call chpl__ensureDomainExpr(326688 call . privdist c"targetLocDom"))(326698 'to unmanaged class from unknown'(326697 call LocBlockDom rank idxType stridable)))
      (326712 'end of statement')
    }
    { scopeless
      const c[326736] "const"(326715 'new'(_chpl_manager = unmanaged[220](?))(326735 call BlockDom rank idxType stridable(326722 call . privdist c"sparseLayoutType") privdist locDomsTemp(326733 call chpl__buildDomainExpr(326731 'expand_tuple'(326728 call . privatizeData c"dims")))))
      (326739 'end of statement')
    }
    (326741 return c)
  }
  function _unknown[51].dsiGetReprivatizeData[326748](arg _mt[326753]:_MT[238], arg this[326750] :
  BlockDom) : _unknown[51] "method"
  {
    { scopeless
      (326761 return(326760 call(326756 call . whole c"dims")))
    }
  }
  function _unknown[51].dsiReprivatize[326771](arg _mt[326778]:_MT[238], arg this[326775] :
  BlockDom, arg other[326769]:_any[178](?), arg reprivatizeData[326773]:_any[178](?)) : _unknown[51] "method"
  {
    (326787 call = locDoms(326784 call . other c"locDoms"))
    (326797 call = whole(326795 call chpl__buildDomainExpr(326793 'expand_tuple' reprivatizeData)))
  }
  function _unknown[51].chpl__serialize[326805](arg _mt[326810]:_MT[238], arg this[326807] :
  BlockArr) : _unknown[51] "method"
  {
    (326813 return pid)
  }
  function _unknown[51].chpl__deserialize[326823](arg _mt[326828]:_MT[238], arg this[326825] :
  BlockArr, arg data[326821]:_any[178](?)) : _unknown[51] "method"
  {
    (326863 return(326862 call chpl_getPrivatizedCopy(326859 'to unmanaged class from unknown'(326858 call BlockArr(rank =(326833 call . this c"rank"))(idxType =(326839 call . this c"idxType"))(stridable =(326844 call . this c"stridable"))(eltType =(326849 call . this c"eltType"))(sparseLayoutType =(326854 call . this c"sparseLayoutType")))) data))
  }
  function _unknown[51].dsiSupportsPrivatization[326871](arg _mt[326876]:_MT[238], arg this[326873] :
  BlockArr) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326879 return 1)
    }
  }
  type BlockArrPrvData[326894](?) unknown dompid[326885] unknown locarr[326889]
  function _unknown[51].dsiGetPrivatizeData[326900](arg _mt[326905]:_MT[238], arg this[326902] :
  BlockArr) : _unknown[51] "method"
  {
    (326916 return(326907 'new'(326915 call BlockArrPrvData(326910 call . dom c"pid") locArr)))
  }
  function _unknown[51].dsiPrivatize[326926](arg _mt[326931]:_MT[238], arg this[326928] :
  BlockArr, arg privatizeData[326924]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown privdom[326944](326943 call chpl_getPrivatizedCopy(326935 'typeof' dom)(326940 call . privatizeData c"dompid"))
      (326947 'end of statement')
    }
    { scopeless
      unknown locArrTemp[326975](326972 call . privatizeData c"locarr")(326967 call chpl__buildArrayRuntimeType(326965 call chpl__ensureDomainExpr(326953 call .(326950 call . privdom c"dist") c"targetLocDom"))(326964 'to unmanaged class from unknown'(326963 call LocBlockArr eltType rank idxType stridable)))
      (326978 'end of statement')
    }
    { scopeless
      unknown myLocArrTemp[326988](326987 'to unmanaged class from unknown'(326986 'to nilable class from type'(326985 call LocBlockArr eltType rank idxType stridable)))
      (326991 'end of statement')
    }
    {
      unknown _indexOfInterest[327027] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[327028] "expr temp" "temp"
      (327037 'move' _iterator[327028](327035 call _getIterator(326997 call .(326994 call . privdom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (327054 call _freeIterator _iterator[327028])
        }
      }
      { scopeless type
        (327043 'move' _indexOfInterest[327027](327040 call iteratorIndex _iterator[327028]))
      }
      ForLoop[327029]
      {
        unknown localeIdx[327047] "index var" "insert auto destroy"
        (327049 'move' localeIdx[327047] _indexOfInterest[327027])
        { scopeless
          if(327022 call _cond_test(327012 call ==(327007 '_wide_get_node'(327003 call locArrTemp localeIdx))(327009 call . here c"id")))
          {
            { scopeless
              (327019 call = myLocArrTemp(327018 call locArrTemp localeIdx))
            }
          }
        }
        label _continueLabel[327032]
        _indexOfInterest[327027]
        _iterator[327028]
      }
      label _breakLabel[327033]
    }
    { scopeless
      const c[327083] "const"(327063 'new'(_chpl_manager = unmanaged[220](?))(327082 call BlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom = privdom)(locArr = locArrTemp)(myLocArr = myLocArrTemp)))
      (327086 'end of statement')
    }
    (327088 return c)
  }
  function _unknown[51].dsiTargetLocales[327095](arg _mt[327100]:_MT[238], arg this[327097] :
  BlockArr) : _unknown[51] "method"
  {
    (327109 return(327106 call .(327103 call . dom c"dist") c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[327117](arg _mt[327122]:_MT[238], arg this[327119] :
  BlockDom) : _unknown[51] "method"
  {
    (327128 return(327125 call . dist c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[327136](arg _mt[327141]:_MT[238], arg this[327138] :
  Block) : _unknown[51] "method"
  {
    (327144 return targetLocales)
  }
  function _unknown[51].chpl__locToLocIdx[327156](arg _mt[327161]:_MT[238], arg this[327158] :
  Block, arg loc[327153] :
  locale[28]) : _unknown[51] "method"
  {
    {
      unknown _indexOfInterest[327184] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[327185] "expr temp" "temp"
      (327194 'move' _iterator[327185](327192 call _getIterator targetLocDom))
      Defer
      {
        {
          (327210 call _freeIterator _iterator[327185])
        }
      }
      { scopeless type
        (327199 'move' _indexOfInterest[327184](327196 call iteratorIndex _iterator[327185]))
      }
      ForLoop[327186]
      {
        unknown locIdx[327203] "index var" "insert auto destroy"
        (327205 'move' locIdx[327203] _indexOfInterest[327184])
        { scopeless
          if(327179 call _cond_test(327170 call ==(327168 call targetLocales locIdx) loc))
          {
            { scopeless
              (327177 return(327175 call _build_tuple 1 locIdx))
            }
          }
        }
        label _continueLabel[327189]
        _indexOfInterest[327184]
        _iterator[327185]
      }
      label _breakLabel[327190]
    }
    (327226 return(327224 call _build_tuple 0(327220 call . targetLocDom c"first")))
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[327233](arg _mt[327238]:_MT[238], arg this[327235] :
  BlockArr) param : _unknown[51] "method"
  {
    { scopeless
      (327241 return 1)
    }
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[327249](arg _mt[327254]:_MT[238], arg this[327251] :
  BlockDom) param : _unknown[51] "method"
  {
    { scopeless
      (327257 return 1)
    }
  }
  function _unknown[51].dsiLocalSubdomain[327269](arg _mt[327274]:_MT[238], arg this[327271] :
  BlockArr, arg loc[327266] :
  locale[28]) : _unknown[51] "method"
  {
    if(327326 call _cond_test(327278 call == loc here))
    {
      if(327296 call _cond_test(327282 call != myLocArr nil[44]))
      {
        { scopeless
          (327294 return(327291 call .(327288 call .(327287 call _to_nonnil myLocArr) c"locDom") c"myBlock"))
        }
      }
      { scopeless
        unknown d[327309](327307 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (327312 'end of statement')
      }
      (327314 return d)
    }
    {
      (327323 return(327322 call(327317 call . dom c"dsiLocalSubdomain") loc))
    }
  }
  function _unknown[51].dsiLocalSubdomain[327340](arg _mt[327345]:_MT[238], arg this[327342] :
  BlockDom, arg loc[327337] :
  locale[28]) : _unknown[51] "method"
  {
    { scopeless
      const tmp[327361] "const" "temp"(327360 call(327355 call . dist c"chpl__locToLocIdx") loc)
      (327368 call _check_tuple_var_decl tmp[327361] 2)
      const gotit[327347] "const"(327362 call tmp[327361] 0)
      const locid[327349] "const"(327365 call tmp[327361] 1)
      (327373 'end of statement')
    }
    if(327415 call _cond_test gotit)
    {
      { scopeless
        unknown inds[327388](327387 call chpl__computeBlock locid(327380 call . dist c"targetLocDom")(327384 call . dist c"boundingBox"))
        (327391 'end of statement')
      }
      (327398 return(327397 call whole(327395 'expand_tuple' inds)))
    }
    {
      { scopeless
        unknown d[327407](327405 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (327410 'end of statement')
      }
      (327413 return d)
    }
  }
  function _unknown[51].numRemoteElems[327426](arg _mt[327435]:_MT[238], arg this[327432] :
  BlockDom, arg viewDom[327424]:_any[178](?), arg rlo[327428]:_any[178](?), arg rid[327430]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown blo[327437](327441 call . dist c"idxType")
      unknown bhi[327444](327448 'typeof' blo)
      (327449 'end of statement')
    }
    if(327587 call _cond_test(327471 call == rid(327469 call -(327465 call .(327464 call(327456 call .(327453 call . dist c"targetLocDom") c"dim")(327461 call - rank 1)) c"size") 1)))
    {
      { scopeless
        (327487 call = bhi(327484 call .(327483 call(327475 call . viewDom c"dim")(327480 call - rank 1)) c"high"))
      }
    }
    {
      (327583 call = bhi(327581 call -(327575 call +(327504 call .(327503 call(327495 call .(327492 call . dist c"boundingBox") c"dim")(327500 call - rank 1)) c"low")(327574 call intCeilXDivByY(327552 call *(327543 call +(327540 call -(327521 call .(327520 call(327512 call .(327509 call . dist c"boundingBox") c"dim")(327517 call - rank 1)) c"high")(327537 call .(327536 call(327528 call .(327525 call . dist c"boundingBox") c"dim")(327533 call - rank 1)) c"low")) 1)(327550 call _cast idxType(327547 call + rid 1)))(327572 call _cast idxType(327568 call .(327567 call(327559 call .(327556 call . dist c"targetLocDom") c"dim")(327564 call - rank 1)) c"size"))))(327579 call _cast idxType 1)))
    }
    (327602 return(327600 call - bhi(327598 call _cast idxType(327595 call - rlo 1))))
  }
  function canDoAnyToBlock[327610](arg Dest[327608]:_any[178](?), arg destDom[327612]:_any[178](?), arg Src[327614]:_any[178](?), arg srcDom[327616]:_any[178](?)) param : _unknown[51] "private"
  {
    if(327643 call _cond_test(327638 call &&(327626 call ==(327624 call(327620 call . Src c"doiCanBulkTransferRankChange")) 0)(327636 call !=(327629 call . Dest c"rank")(327633 call . Src c"rank"))))
    {
      { scopeless
        (327641 return 0)
      }
    }
    (327650 'use' Reflection)
    if(327689 call _cond_test(327683 call !(327682 call canResolveMethod Src "doiBulkTransferToKnown" srcDom(327678 call .(327675 call .(327674 call(327660 call . Dest c"locArr")(327670 call .(327667 call .(327664 call . Dest c"locArr") c"_dom") c"first")) c"myElems") c"_value") destDom)))
    {
      (327686 return 0)
    }
    (327696 return(327694 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferToKnown[327706](arg _mt[327717]:_MT[238], arg this[327714] :
  BlockArr, arg srcDom[327704]:_any[178](?), arg destClass[327709] :
  BlockArr, arg destDom[327712]:_any[178](?)) : _unknown[51] "method"
  {
    (327749 call _doSimpleBlockTransfer destClass destDom this srcDom)
    (327753 return 1)
  }
  where {
    (327741 call &&(327736 call &&(327726 call ==(327721 call . this c"sparseLayoutType")(327725 'to unmanaged class from unknown' DefaultDist))(327734 call ==(327729 call . destClass c"sparseLayoutType")(327733 'to unmanaged class from unknown' DefaultDist)))(327739 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[327764](arg _mt[327775]:_MT[238], arg this[327772] :
  BlockArr, arg destDom[327762]:_any[178](?), arg srcClass[327767] :
  BlockArr, arg srcDom[327770]:_any[178](?)) : _unknown[51] "method"
  {
    (327807 call _doSimpleBlockTransfer this destDom srcClass srcDom)
    (327811 return 1)
  }
  where {
    (327799 call &&(327794 call &&(327784 call ==(327779 call . this c"sparseLayoutType")(327783 'to unmanaged class from unknown' DefaultDist))(327792 call ==(327787 call . srcClass c"sparseLayoutType")(327791 'to unmanaged class from unknown' DefaultDist)))(327797 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiSwap[327822](arg _mt[327827]:_MT[238], arg this[327824] :
  BlockArr, arg arr[327820]:_any[178](?)) : _unknown[51] "method"
  {
    {
      unknown tmpIter[327881] "expr temp" "maybe ref" "no copy" "temp"
      (327884 'move' tmpIter[327881](327843 call _build_tuple(327835 call . this c"locArr")(327840 call . arr c"locArr")))
      unknown isRngDomArr[328076] "maybe param" "temp"
      (328091 'move' isRngDomArr[328076](328089 call ||(328078 call isBoundedRange tmpIter[327881])(328087 call ||(328081 call isDomain tmpIter[327881])(328084 call isArray tmpIter[327881]))))
      if isRngDomArr[328076]
      {
        const _coforallCount[327920] "const" "end count" "temp"
        (327999 'move' _coforallCount[327920](327996 call _endCountAlloc 0))
        unknown numTasks[327921] "temp"
        (327983 'move' numTasks[327921](327979 call . tmpIter[327881] c"size"))
        (327974 call _upEndCount _coforallCount[327920] 0 numTasks[327921])
        unknown _indexOfInterest[327927] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327928] "expr temp" "temp"
        (327937 'move' _iterator[327928](327935 call _getIteratorZip tmpIter[327881]))
        Defer
        {
          {
            (327967 call _freeIterator _iterator[327928])
          }
        }
        { scopeless type
          (327942 'move' _indexOfInterest[327927](327939 call iteratorIndex _iterator[327928]))
        }
        ForLoop[327929]
        {
          (327947 call _check_tuple_var_decl _indexOfInterest[327927] 2)
          unknown locarr1[327953] "coforall index var" "index var" "insert auto destroy"
          (327955 'move' locarr1[327953](327951 call _indexOfInterest[327927] 0))
          unknown locarr2[327960] "coforall index var" "index var" "insert auto destroy"
          (327962 'move' locarr2[327960](327958 call _indexOfInterest[327927] 1))
          { scopeless
            { scopeless
              const tmp[327887] "const" "temp"
              (327889 'move' tmp[327887](327891 'deref'(327892 '_wide_get_locale' locarr1)))
              {
                {
                  (327900 call <=>(327902 call . locarr1 c"myElems")(327906 call . locarr2 c"myElems"))
                  (327910 call <=>(327912 call . locarr1 c"locRAD")(327916 call . locarr2 c"locRAD"))
                }
                (327922 call _downEndCount _coforallCount[327920] nil[44])
                (327895 'coforall on block' 0 tmp[327887])
              }
            }
          }
          label _continueLabel[327932]
          _indexOfInterest[327927]
          _iterator[327928]
        }
        label _breakLabel[327933]
        Defer
        {
          {
            (327986 call _endCountFree _coforallCount[327920])
          }
        }
        (327991 call _waitEndCount _coforallCount[327920] 0 numTasks[327921])
      }
      {
        const _coforallCount[328003] "const" "end count" "temp"
        (328073 'move' _coforallCount[328003](328070 call _endCountAlloc 0))
        unknown _indexOfInterest[328010] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328011] "expr temp" "temp"
        (328020 'move' _iterator[328011](328018 call _getIteratorZip tmpIter[327881]))
        Defer
        {
          {
            (328050 call _freeIterator _iterator[328011])
          }
        }
        { scopeless type
          (328025 'move' _indexOfInterest[328010](328022 call iteratorIndex _iterator[328011]))
        }
        ForLoop[328012]
        {
          (328030 call _check_tuple_var_decl _indexOfInterest[328010] 2)
          unknown locarr1[328036] "coforall index var" "index var" "insert auto destroy"
          (328038 'move' locarr1[328036](328034 call _indexOfInterest[328010] 0))
          unknown locarr2[328043] "coforall index var" "index var" "insert auto destroy"
          (328045 'move' locarr2[328043](328041 call _indexOfInterest[328010] 1))
          (328057 call _upEndCount _coforallCount[328003] 0)
          { scopeless
            { scopeless
              const tmp[327871] "const" "temp"
              (327873 'move' tmp[327871](327869 'deref'(327868 '_wide_get_locale' locarr1)))
              {
                {
                  (327853 call <=>(327846 call . locarr1 c"myElems")(327850 call . locarr2 c"myElems"))
                  (327865 call <=>(327858 call . locarr1 c"locRAD")(327862 call . locarr2 c"locRAD"))
                }
                (328005 call _downEndCount _coforallCount[328003] nil[44])
                (327876 'coforall on block' 0 tmp[327871])
              }
            }
          }
          label _continueLabel[328015]
          _indexOfInterest[328010]
          _iterator[328011]
        }
        label _breakLabel[328016]
        Defer
        {
          {
            (328061 call _endCountFree _coforallCount[328003])
          }
        }
        (328066 call _waitEndCount _coforallCount[328003] 0)
      }
    }
  }
  function _doSimpleBlockTransfer[328102](arg Dest[328100]:_any[178](?), arg destDom[328104]:_any[178](?), arg Src[328106]:_any[178](?), arg srcDom[328108]:_any[178](?)) : _unknown[51] "private"
  {
    if(328152 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (328150 call writeln "In Block=Block Bulk Transfer: Dest[" destDom "] = Src[" srcDom "]")
      }
    }
    { scopeless
      const DestPID[328162] "const"(328159 call . Dest c"pid")
      (328165 'end of statement')
    }
    { scopeless
      const SrcPID[328170] "const"(328167 call . Src c"pid")
      (328173 'end of statement')
    }
    {
      unknown tmpIter[328429] "expr temp" "maybe ref" "no copy" "temp"
      (328432 'move' tmpIter[328429](328189 call(328184 call .(328179 call .(328176 call . Dest c"dom") c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[328764] "maybe param" "temp"
      (328779 'move' isRngDomArr[328764](328777 call ||(328766 call isBoundedRange tmpIter[328429])(328775 call ||(328769 call isDomain tmpIter[328429])(328772 call isArray tmpIter[328429]))))
      if isRngDomArr[328764]
      {
        const _coforallCount[328636] "const" "end count" "temp"
        (328701 'move' _coforallCount[328636](328698 call _endCountAlloc 0))
        unknown numTasks[328637] "temp"
        (328685 'move' numTasks[328637](328681 call . tmpIter[328429] c"size"))
        (328676 call _upEndCount _coforallCount[328636] 0 numTasks[328637])
        unknown _indexOfInterest[328643] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328644] "expr temp" "temp"
        (328653 'move' _iterator[328644](328651 call _getIterator tmpIter[328429]))
        Defer
        {
          {
            (328669 call _freeIterator _iterator[328644])
          }
        }
        { scopeless type
          (328658 'move' _indexOfInterest[328643](328655 call iteratorIndex _iterator[328644]))
        }
        ForLoop[328645]
        {
          unknown i[328662] "coforall index var" "index var" "insert auto destroy"
          (328664 'move' i[328662] _indexOfInterest[328643])
          { scopeless
            { scopeless
              const tmp[328435] "const" "temp"
              (328437 'move' tmp[328435](328439 'deref'(328440 '_wide_get_locale'(328451 call(328442 call .(328444 call .(328446 call . Dest c"dom") c"dist") c"targetLocales") i))))
              {
                {
                  { scopeless
                    const dst[328459] "const"(328469 IfExpr  _privatization then
                    { scopeless
                      (328463 call chpl_getPrivatizedCopy(328464 'typeof' Dest) DestPID)
                    } else
                    { scopeless
                      Dest
                    } )
                    (328471 'end of statement')
                  }
                  { scopeless
                    const src[328473] "const"(328483 IfExpr  _privatization then
                    { scopeless
                      (328477 call chpl_getPrivatizedCopy(328478 'typeof' Src) SrcPID)
                    } else
                    { scopeless
                      Src
                    } )
                    (328485 'end of statement')
                  }
                  { scopeless
                    const localDestBlock[328487] "const"(328500 call(328489 call .(328497 call(328491 call .(328493 call . dst c"dom") c"locDoms") i) c"myBlock") destDom)
                    (328503 'end of statement')
                  }
                  (328505 call assert(328507 call >(328509 call . localDestBlock c"size") 0))
                  { scopeless
                    const corSrcBlock[328514] "const"(328516 call bulkCommTranslateDomain localDestBlock destDom srcDom)
                    (328521 'end of statement')
                  }
                  if(328523 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328528 call writeln "  Dest[" localDestBlock "] = Src[" corSrcBlock "]")
                    }
                  }
                  {
                    unknown _indexOfInterest[328536] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[328538] "expr temp" "temp"
                    (328540 'move' _iterator[328538](328543 call _getIterator(328554 call(328545 call .(328547 call .(328549 call . src c"dom") c"dist") c"activeTargetLocales") corSrcBlock)))
                    Defer
                    {
                      {
                        (328558 call _freeIterator _iterator[328538])
                      }
                    }
                    { scopeless type
                      (328562 'move' _indexOfInterest[328536](328565 call iteratorIndex _iterator[328538]))
                    }
                    ForLoop[328567]
                    {
                      unknown srcLoc[328570] "index var" "insert auto destroy"
                      (328572 'move' srcLoc[328570] _indexOfInterest[328536])
                      {
                        { scopeless
                          const localSrcChunk[328577] "const"(328579 call corSrcBlock(328581 call .(328589 call(328583 call .(328585 call . src c"dom") c"locDoms") srcLoc) c"myBlock"))
                          (328593 'end of statement')
                        }
                        { scopeless
                          const localDestChunk[328595] "const"(328597 call bulkCommTranslateDomain localSrcChunk corSrcBlock localDestBlock)
                          (328602 'end of statement')
                        }
                        (328604 call chpl__bulkTransferArray(328606 call .(328608 call .(328613 call(328610 call . dst c"locArr") i) c"myElems") c"_value") localDestChunk(328619 call .(328621 call .(328626 call(328623 call . src c"locArr") srcLoc) c"myElems") c"_value") localSrcChunk)
                      }
                      label _continueLabel[328631]
                      _indexOfInterest[328536]
                      _iterator[328538]
                    }
                    label _breakLabel[328633]
                  }
                }
                (328638 call _downEndCount _coforallCount[328636] nil[44])
                (328454 'coforall on block' 0 tmp[328435])
              }
            }
          }
          label _continueLabel[328648]
          _indexOfInterest[328643]
          _iterator[328644]
        }
        label _breakLabel[328649]
        Defer
        {
          {
            (328688 call _endCountFree _coforallCount[328636])
          }
        }
        (328693 call _waitEndCount _coforallCount[328636] 0 numTasks[328637])
      }
      {
        const _coforallCount[328705] "const" "end count" "temp"
        (328761 'move' _coforallCount[328705](328758 call _endCountAlloc 0))
        unknown _indexOfInterest[328712] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328713] "expr temp" "temp"
        (328722 'move' _iterator[328713](328720 call _getIterator tmpIter[328429]))
        Defer
        {
          {
            (328738 call _freeIterator _iterator[328713])
          }
        }
        { scopeless type
          (328727 'move' _indexOfInterest[328712](328724 call iteratorIndex _iterator[328713]))
        }
        ForLoop[328714]
        {
          unknown i[328731] "coforall index var" "index var" "insert auto destroy"
          (328733 'move' i[328731] _indexOfInterest[328712])
          (328745 call _upEndCount _coforallCount[328705] 0)
          { scopeless
            { scopeless
              const tmp[328420] "const" "temp"
              (328422 'move' tmp[328420](328418 'deref'(328417 '_wide_get_locale'(328202 call(328197 call .(328194 call .(328191 call . Dest c"dom") c"dist") c"targetLocales") i))))
              {
                {
                  { scopeless
                    const dst[328214] "const"(328211 IfExpr  _privatization then
                    { scopeless
                      (328209 call chpl_getPrivatizedCopy(328206 'typeof' Dest) DestPID)
                    } else
                    { scopeless
                      Dest
                    } )
                    (328217 'end of statement')
                  }
                  { scopeless
                    const src[328230] "const"(328227 IfExpr  _privatization then
                    { scopeless
                      (328225 call chpl_getPrivatizedCopy(328222 'typeof' Src) SrcPID)
                    } else
                    { scopeless
                      Src
                    } )
                    (328233 'end of statement')
                  }
                  { scopeless
                    const localDestBlock[328250] "const"(328249 call(328244 call .(328243 call(328238 call .(328235 call . dst c"dom") c"locDoms") i) c"myBlock") destDom)
                    (328253 'end of statement')
                  }
                  (328263 call assert(328260 call >(328256 call . localDestBlock c"size") 0))
                  { scopeless
                    const corSrcBlock[328271] "const"(328270 call bulkCommTranslateDomain localDestBlock destDom srcDom)
                    (328274 'end of statement')
                  }
                  if(328301 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328299 call writeln "  Dest[" localDestBlock "] = Src[" corSrcBlock "]")
                    }
                  }
                  {
                    unknown _indexOfInterest[328383] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[328384] "expr temp" "temp"
                    (328393 'move' _iterator[328384](328391 call _getIterator(328319 call(328314 call .(328311 call .(328308 call . src c"dom") c"dist") c"activeTargetLocales") corSrcBlock)))
                    Defer
                    {
                      {
                        (328410 call _freeIterator _iterator[328384])
                      }
                    }
                    { scopeless type
                      (328399 'move' _indexOfInterest[328383](328396 call iteratorIndex _iterator[328384]))
                    }
                    ForLoop[328385]
                    {
                      unknown srcLoc[328403] "index var" "insert auto destroy"
                      (328405 'move' srcLoc[328403] _indexOfInterest[328383])
                      {
                        { scopeless
                          const localSrcChunk[328336] "const"(328335 call corSrcBlock(328331 call .(328330 call(328325 call .(328322 call . src c"dom") c"locDoms") srcLoc) c"myBlock"))
                          (328339 'end of statement')
                        }
                        { scopeless
                          const localDestChunk[328347] "const"(328346 call bulkCommTranslateDomain localSrcChunk corSrcBlock localDestBlock)
                          (328350 'end of statement')
                        }
                        (328381 call chpl__bulkTransferArray(328362 call .(328359 call .(328358 call(328353 call . dst c"locArr") i) c"myElems") c"_value") localDestChunk(328377 call .(328374 call .(328373 call(328368 call . src c"locArr") srcLoc) c"myElems") c"_value") localSrcChunk)
                      }
                      label _continueLabel[328388]
                      _indexOfInterest[328383]
                      _iterator[328384]
                    }
                    label _breakLabel[328389]
                  }
                }
                (328707 call _downEndCount _coforallCount[328705] nil[44])
                (328425 'coforall on block' 0 tmp[328420])
              }
            }
          }
          label _continueLabel[328717]
          _indexOfInterest[328712]
          _iterator[328713]
        }
        label _breakLabel[328718]
        Defer
        {
          {
            (328749 call _endCountFree _coforallCount[328705])
          }
        }
        (328754 call _waitEndCount _coforallCount[328705] 0)
      }
    }
  }
  function _unknown[51].doiBulkTransferFromAny[328790](arg _mt[328799]:_MT[238], arg this[328796] :
  BlockArr, arg destDom[328788]:_any[178](?), arg Src[328792]:_any[178](?), arg srcDom[328794]:_any[178](?)) : _unknown[51] "method"
  {
    if(328831 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (328829 call writeln "In BlockDist.doiBulkTransferFromAny")
      }
    }
    {
      unknown tmpIter[328985] "expr temp" "maybe ref" "no copy" "temp"
      (328988 'move' tmpIter[328985](328847 call(328842 call .(328839 call . dom c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[329213] "maybe param" "temp"
      (329228 'move' isRngDomArr[329213](329226 call ||(329215 call isBoundedRange tmpIter[328985])(329224 call ||(329218 call isDomain tmpIter[328985])(329221 call isArray tmpIter[328985]))))
      if isRngDomArr[329213]
      {
        const _coforallCount[329085] "const" "end count" "temp"
        (329150 'move' _coforallCount[329085](329147 call _endCountAlloc 0))
        unknown numTasks[329086] "temp"
        (329134 'move' numTasks[329086](329130 call . tmpIter[328985] c"size"))
        (329125 call _upEndCount _coforallCount[329085] 0 numTasks[329086])
        unknown _indexOfInterest[329092] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329093] "expr temp" "temp"
        (329102 'move' _iterator[329093](329100 call _getIterator tmpIter[328985]))
        Defer
        {
          {
            (329118 call _freeIterator _iterator[329093])
          }
        }
        { scopeless type
          (329107 'move' _indexOfInterest[329092](329104 call iteratorIndex _iterator[329093]))
        }
        ForLoop[329094]
        {
          unknown j[329111] "coforall index var" "index var" "insert auto destroy"
          (329113 'move' j[329111] _indexOfInterest[329092])
          { scopeless
            { scopeless
              const tmp[328991] "const" "temp"
              (328993 'move' tmp[328991](328995 'deref'(328996 '_wide_get_locale'(329004 call(328998 call .(329000 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[329012] "const"(329022 IfExpr  _privatization then
                    { scopeless
                      (329016 call chpl_getPrivatizedCopy(329017 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329024 'end of statement')
                  }
                  { scopeless
                    const inters[329026] "const"(329039 call(329028 call .(329036 call(329030 call .(329032 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (329042 'end of statement')
                  }
                  { scopeless
                    const srcChunk[329044] "const"(329046 call bulkCommTranslateDomain inters destDom srcDom)
                    (329051 'end of statement')
                  }
                  if(329053 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329058 call writeln "Dest.locArr[" j "][" inters "] = Src[" srcDom "]")
                    }
                  }
                  (329068 call chpl__bulkTransferArray(329070 call .(329072 call .(329077 call(329074 call . Dest c"locArr") j) c"myElems") c"_value") inters Src srcChunk)
                }
                (329087 call _downEndCount _coforallCount[329085] nil[44])
                (329007 'coforall on block' 0 tmp[328991])
              }
            }
          }
          label _continueLabel[329097]
          _indexOfInterest[329092]
          _iterator[329093]
        }
        label _breakLabel[329098]
        Defer
        {
          {
            (329137 call _endCountFree _coforallCount[329085])
          }
        }
        (329142 call _waitEndCount _coforallCount[329085] 0 numTasks[329086])
      }
      {
        const _coforallCount[329154] "const" "end count" "temp"
        (329210 'move' _coforallCount[329154](329207 call _endCountAlloc 0))
        unknown _indexOfInterest[329161] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329162] "expr temp" "temp"
        (329171 'move' _iterator[329162](329169 call _getIterator tmpIter[328985]))
        Defer
        {
          {
            (329187 call _freeIterator _iterator[329162])
          }
        }
        { scopeless type
          (329176 'move' _indexOfInterest[329161](329173 call iteratorIndex _iterator[329162]))
        }
        ForLoop[329163]
        {
          unknown j[329180] "coforall index var" "index var" "insert auto destroy"
          (329182 'move' j[329180] _indexOfInterest[329161])
          (329194 call _upEndCount _coforallCount[329154] 0)
          { scopeless
            { scopeless
              const tmp[328976] "const" "temp"
              (328978 'move' tmp[328976](328974 'deref'(328973 '_wide_get_locale'(328857 call(328852 call .(328849 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[328869] "const"(328866 IfExpr  _privatization then
                    { scopeless
                      (328864 call chpl_getPrivatizedCopy(328861 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (328872 'end of statement')
                  }
                  { scopeless
                    const inters[328890] "const"(328889 call(328884 call .(328883 call(328878 call .(328875 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (328893 'end of statement')
                  }
                  { scopeless
                    const srcChunk[328900] "const"(328899 call bulkCommTranslateDomain inters destDom srcDom)
                    (328903 'end of statement')
                  }
                  if(328948 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328946 call writeln "Dest.locArr[" j "][" inters "] = Src[" srcDom "]")
                    }
                  }
                  (328971 call chpl__bulkTransferArray(328964 call .(328961 call .(328960 call(328955 call . Dest c"locArr") j) c"myElems") c"_value") inters Src srcChunk)
                }
                (329156 call _downEndCount _coforallCount[329154] nil[44])
                (328981 'coforall on block' 0 tmp[328976])
              }
            }
          }
          label _continueLabel[329166]
          _indexOfInterest[329161]
          _iterator[329162]
        }
        label _breakLabel[329167]
        Defer
        {
          {
            (329198 call _endCountFree _coforallCount[329154])
          }
        }
        (329203 call _waitEndCount _coforallCount[329154] 0)
      }
    }
    (329233 return 1)
  }
  where {
    (328808 call canDoAnyToBlock this destDom Src srcDom)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferToKnown[329244](arg _mt[329255]:_MT[238], arg this[329252] :
  BlockArr, arg srcDom[329242]:_any[178](?), arg Dest[329247] :
  DefaultRectangularArr, arg destDom[329250]:_any[178](?)) : _unknown[51] "method"
  {
    if(329283 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (329281 call writeln "In BlockDist.doiBulkTransferToKnown(DefaultRectangular)")
      }
    }
    {
      unknown tmpIter[329440] "expr temp" "maybe ref" "no copy" "temp"
      (329443 'move' tmpIter[329440](329299 call(329294 call .(329291 call . dom c"dist") c"activeTargetLocales") srcDom))
      unknown isRngDomArr[329671] "maybe param" "temp"
      (329686 'move' isRngDomArr[329671](329684 call ||(329673 call isBoundedRange tmpIter[329440])(329682 call ||(329676 call isDomain tmpIter[329440])(329679 call isArray tmpIter[329440]))))
      if isRngDomArr[329671]
      {
        const _coforallCount[329543] "const" "end count" "temp"
        (329608 'move' _coforallCount[329543](329605 call _endCountAlloc 0))
        unknown numTasks[329544] "temp"
        (329592 'move' numTasks[329544](329588 call . tmpIter[329440] c"size"))
        (329583 call _upEndCount _coforallCount[329543] 0 numTasks[329544])
        unknown _indexOfInterest[329550] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329551] "expr temp" "temp"
        (329560 'move' _iterator[329551](329558 call _getIterator tmpIter[329440]))
        Defer
        {
          {
            (329576 call _freeIterator _iterator[329551])
          }
        }
        { scopeless type
          (329565 'move' _indexOfInterest[329550](329562 call iteratorIndex _iterator[329551]))
        }
        ForLoop[329552]
        {
          unknown j[329569] "coforall index var" "index var" "insert auto destroy"
          (329571 'move' j[329569] _indexOfInterest[329550])
          { scopeless
            { scopeless
              const tmp[329446] "const" "temp"
              (329448 'move' tmp[329446](329450 'deref'(329451 '_wide_get_locale'(329459 call(329453 call .(329455 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Src[329467] "const"(329477 IfExpr  _privatization then
                    { scopeless
                      (329471 call chpl_getPrivatizedCopy(329472 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329479 'end of statement')
                  }
                  { scopeless
                    const inters[329481] "const"(329494 call(329483 call .(329491 call(329485 call .(329487 call . Src c"dom") c"locDoms") j) c"myBlock") srcDom)
                    (329497 'end of statement')
                  }
                  { scopeless
                    const destChunk[329499] "const"(329501 call bulkCommTranslateDomain inters srcDom destDom)
                    (329506 'end of statement')
                  }
                  if(329508 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329513 call writeln "  A[" destChunk "] = B[" inters "]")
                    }
                  }
                  { scopeless
                    const elemActual[329521] "const"(329523 call .(329525 call .(329530 call(329527 call . Src c"locArr") j) c"myElems") c"_value")
                    (329535 'end of statement')
                  }
                  (329537 call chpl__bulkTransferArray Dest destChunk elemActual inters)
                }
                (329545 call _downEndCount _coforallCount[329543] nil[44])
                (329462 'coforall on block' 0 tmp[329446])
              }
            }
          }
          label _continueLabel[329555]
          _indexOfInterest[329550]
          _iterator[329551]
        }
        label _breakLabel[329556]
        Defer
        {
          {
            (329595 call _endCountFree _coforallCount[329543])
          }
        }
        (329600 call _waitEndCount _coforallCount[329543] 0 numTasks[329544])
      }
      {
        const _coforallCount[329612] "const" "end count" "temp"
        (329668 'move' _coforallCount[329612](329665 call _endCountAlloc 0))
        unknown _indexOfInterest[329619] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329620] "expr temp" "temp"
        (329629 'move' _iterator[329620](329627 call _getIterator tmpIter[329440]))
        Defer
        {
          {
            (329645 call _freeIterator _iterator[329620])
          }
        }
        { scopeless type
          (329634 'move' _indexOfInterest[329619](329631 call iteratorIndex _iterator[329620]))
        }
        ForLoop[329621]
        {
          unknown j[329638] "coforall index var" "index var" "insert auto destroy"
          (329640 'move' j[329638] _indexOfInterest[329619])
          (329652 call _upEndCount _coforallCount[329612] 0)
          { scopeless
            { scopeless
              const tmp[329431] "const" "temp"
              (329433 'move' tmp[329431](329429 'deref'(329428 '_wide_get_locale'(329309 call(329304 call .(329301 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Src[329321] "const"(329318 IfExpr  _privatization then
                    { scopeless
                      (329316 call chpl_getPrivatizedCopy(329313 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329324 'end of statement')
                  }
                  { scopeless
                    const inters[329342] "const"(329341 call(329336 call .(329335 call(329330 call .(329327 call . Src c"dom") c"locDoms") j) c"myBlock") srcDom)
                    (329345 'end of statement')
                  }
                  { scopeless
                    const destChunk[329352] "const"(329351 call bulkCommTranslateDomain inters srcDom destDom)
                    (329355 'end of statement')
                  }
                  if(329398 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329396 call writeln "  A[" destChunk "] = B[" inters "]")
                    }
                  }
                  { scopeless
                    const elemActual[329416] "const"(329413 call .(329410 call .(329409 call(329404 call . Src c"locArr") j) c"myElems") c"_value")
                    (329419 'end of statement')
                  }
                  (329426 call chpl__bulkTransferArray Dest destChunk elemActual inters)
                }
                (329614 call _downEndCount _coforallCount[329612] nil[44])
                (329436 'coforall on block' 0 tmp[329431])
              }
            }
          }
          label _continueLabel[329624]
          _indexOfInterest[329619]
          _iterator[329620]
        }
        label _breakLabel[329625]
        Defer
        {
          {
            (329656 call _endCountFree _coforallCount[329612])
          }
        }
        (329661 call _waitEndCount _coforallCount[329612] 0)
      }
    }
    (329691 return 1)
  }
  where {
    (329259 call ! disableBlockDistBulkTransfer)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[329702](arg _mt[329713]:_MT[238], arg this[329710] :
  BlockArr, arg destDom[329700]:_any[178](?), arg Src[329705] :
  DefaultRectangularArr, arg srcDom[329708]:_any[178](?)) : _unknown[51] "method"
  {
    if(329741 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (329739 call writeln "In BlockArr.doiBulkTransferFromKnown(DefaultRectangular)")
      }
    }
    {
      unknown tmpIter[329877] "expr temp" "maybe ref" "no copy" "temp"
      (329880 'move' tmpIter[329877](329757 call(329752 call .(329749 call . dom c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[330117] "maybe param" "temp"
      (330132 'move' isRngDomArr[330117](330130 call ||(330119 call isBoundedRange tmpIter[329877])(330128 call ||(330122 call isDomain tmpIter[329877])(330125 call isArray tmpIter[329877]))))
      if isRngDomArr[330117]
      {
        const _coforallCount[329989] "const" "end count" "temp"
        (330054 'move' _coforallCount[329989](330051 call _endCountAlloc 0))
        unknown numTasks[329990] "temp"
        (330038 'move' numTasks[329990](330034 call . tmpIter[329877] c"size"))
        (330029 call _upEndCount _coforallCount[329989] 0 numTasks[329990])
        unknown _indexOfInterest[329996] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329997] "expr temp" "temp"
        (330006 'move' _iterator[329997](330004 call _getIterator tmpIter[329877]))
        Defer
        {
          {
            (330022 call _freeIterator _iterator[329997])
          }
        }
        { scopeless type
          (330011 'move' _indexOfInterest[329996](330008 call iteratorIndex _iterator[329997]))
        }
        ForLoop[329998]
        {
          unknown j[330015] "coforall index var" "index var" "insert auto destroy"
          (330017 'move' j[330015] _indexOfInterest[329996])
          { scopeless
            { scopeless
              const tmp[329883] "const" "temp"
              (329885 'move' tmp[329883](329887 'deref'(329888 '_wide_get_locale'(329896 call(329890 call .(329892 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[329904] "const"(329914 IfExpr  _privatization then
                    { scopeless
                      (329908 call chpl_getPrivatizedCopy(329909 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329916 'end of statement')
                  }
                  { scopeless
                    const inters[329918] "const"(329931 call(329920 call .(329928 call(329922 call .(329924 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (329934 'end of statement')
                  }
                  (329936 call assert(329938 call >(329940 call . inters c"size") 0))
                  { scopeless
                    const srcChunk[329945] "const"(329947 call bulkCommTranslateDomain inters destDom srcDom)
                    (329952 'end of statement')
                  }
                  if(329954 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329959 call writeln "  A[" inters "] = B[" srcChunk "]")
                    }
                  }
                  { scopeless
                    const elemActual[329967] "const"(329969 call .(329971 call .(329976 call(329973 call . Dest c"locArr") j) c"myElems") c"_value")
                    (329981 'end of statement')
                  }
                  (329983 call chpl__bulkTransferArray elemActual inters Src srcChunk)
                }
                (329991 call _downEndCount _coforallCount[329989] nil[44])
                (329899 'coforall on block' 0 tmp[329883])
              }
            }
          }
          label _continueLabel[330001]
          _indexOfInterest[329996]
          _iterator[329997]
        }
        label _breakLabel[330002]
        Defer
        {
          {
            (330041 call _endCountFree _coforallCount[329989])
          }
        }
        (330046 call _waitEndCount _coforallCount[329989] 0 numTasks[329990])
      }
      {
        const _coforallCount[330058] "const" "end count" "temp"
        (330114 'move' _coforallCount[330058](330111 call _endCountAlloc 0))
        unknown _indexOfInterest[330065] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[330066] "expr temp" "temp"
        (330075 'move' _iterator[330066](330073 call _getIterator tmpIter[329877]))
        Defer
        {
          {
            (330091 call _freeIterator _iterator[330066])
          }
        }
        { scopeless type
          (330080 'move' _indexOfInterest[330065](330077 call iteratorIndex _iterator[330066]))
        }
        ForLoop[330067]
        {
          unknown j[330084] "coforall index var" "index var" "insert auto destroy"
          (330086 'move' j[330084] _indexOfInterest[330065])
          (330098 call _upEndCount _coforallCount[330058] 0)
          { scopeless
            { scopeless
              const tmp[329868] "const" "temp"
              (329870 'move' tmp[329868](329866 'deref'(329865 '_wide_get_locale'(329767 call(329762 call .(329759 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[329779] "const"(329776 IfExpr  _privatization then
                    { scopeless
                      (329774 call chpl_getPrivatizedCopy(329771 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329782 'end of statement')
                  }
                  { scopeless
                    const inters[329800] "const"(329799 call(329794 call .(329793 call(329788 call .(329785 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (329803 'end of statement')
                  }
                  (329813 call assert(329810 call >(329806 call . inters c"size") 0))
                  { scopeless
                    const srcChunk[329821] "const"(329820 call bulkCommTranslateDomain inters destDom srcDom)
                    (329824 'end of statement')
                  }
                  if(329835 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329833 call writeln "  A[" inters "] = B[" srcChunk "]")
                    }
                  }
                  { scopeless
                    const elemActual[329853] "const"(329850 call .(329847 call .(329846 call(329841 call . Dest c"locArr") j) c"myElems") c"_value")
                    (329856 'end of statement')
                  }
                  (329863 call chpl__bulkTransferArray elemActual inters Src srcChunk)
                }
                (330060 call _downEndCount _coforallCount[330058] nil[44])
                (329873 'coforall on block' 0 tmp[329868])
              }
            }
          }
          label _continueLabel[330070]
          _indexOfInterest[330065]
          _iterator[330066]
        }
        label _breakLabel[330071]
        Defer
        {
          {
            (330102 call _endCountFree _coforallCount[330058])
          }
        }
        (330107 call _waitEndCount _coforallCount[330058] 0)
      }
    }
    (330137 return 1)
  }
  where {
    (329717 call ! disableBlockDistBulkTransfer)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiCanBulkTransferRankChange[330146](arg _mt[330151]:_MT[238], arg this[330148] :
  BlockArr) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (330154 return 1)
    }
  }
  { scopeless
    unknown debugBlockScan[330160] "config" "param" 0
    (330163 'end of statement')
  }
  function _unknown[51].doiScan[330169](arg _mt[330176]:_MT[238], arg this[330173] :
  BlockArr, arg op[330167]:_any[178](?), arg dom[330171]:_any[178](?)) : _unknown[51] "method"
  {
    unknown resType[330195] "type variable"(330194 'typeof'(330193 call(330189 call . op c"generate")))
    { scopeless
      unknown res[330206](330204 call chpl__buildArrayRuntimeType(330202 call chpl__ensureDomainExpr dom) resType)
      (330209 'end of statement')
    }
    (330211 'use' ReplicatedDist)
    { scopeless
      unknown targetLocs[330219] "ref var"(330218 call(330214 call . this c"dsiTargetLocales"))
      (330222 'end of statement')
    }
    { scopeless
      const elemPerLocDom[330236] "const"(330234 call chpl__distributed(330233 call Replicated targetLocs)(330228 call chpl__buildDomainExpr(330225 call chpl_build_bounded_range 1 1)))
      (330239 'end of statement')
    }
    { scopeless
      unknown elemPerLoc[330247](330245 call chpl__buildArrayRuntimeType(330243 call chpl__ensureDomainExpr elemPerLocDom) resType)
      (330250 'end of statement')
    }
    { scopeless
      unknown inputReady$[330260](330258 call chpl__buildArrayRuntimeType(330256 call chpl__ensureDomainExpr elemPerLocDom)(330254 call _syncvar bool[10]))
      (330263 'end of statement')
    }
    { scopeless
      unknown outputReady$[330273](330271 call chpl__buildArrayRuntimeType(330269 call chpl__ensureDomainExpr elemPerLocDom)(330267 call _syncvar bool[10]))
      (330276 'end of statement')
    }
    {
      unknown tmpIter[330716] "expr temp" "maybe ref" "no copy" "temp"
      (330719 'move' tmpIter[330716](330282 call .(330279 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[331201] "maybe param" "temp"
      (331216 'move' isRngDomArr[331201](331214 call ||(331203 call isBoundedRange tmpIter[330716])(331212 call ||(331206 call isDomain tmpIter[330716])(331209 call isArray tmpIter[330716]))))
      if isRngDomArr[331201]
      {
        const _coforallCount[331073] "const" "end count" "temp"
        (331138 'move' _coforallCount[331073](331135 call _endCountAlloc 0))
        unknown numTasks[331074] "temp"
        (331122 'move' numTasks[331074](331118 call . tmpIter[330716] c"size"))
        (331113 call _upEndCount _coforallCount[331073] 0 numTasks[331074])
        unknown _indexOfInterest[331080] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[331081] "expr temp" "temp"
        (331090 'move' _iterator[331081](331088 call _getIterator tmpIter[330716]))
        Defer
        {
          {
            (331106 call _freeIterator _iterator[331081])
          }
        }
        { scopeless type
          (331095 'move' _indexOfInterest[331080](331092 call iteratorIndex _iterator[331081]))
        }
        ForLoop[331082]
        {
          unknown locid[331099] "coforall index var" "index var" "insert auto destroy"
          (331101 'move' locid[331099] _indexOfInterest[331080])
          { scopeless
            { scopeless
              const tmp[330722] "const" "temp"
              (330724 'move' tmp[330722](330726 'deref'(330727 '_wide_get_locale'(330729 call targetLocs locid))))
              {
                {
                  { scopeless
                    const myop[330737] "const"(330742 call(330739 call . op c"clone"))
                    (330744 'end of statement')
                  }
                  { scopeless
                    unknown myLocArrDesc[330746] "ref var"(330748 call locArr locid)
                    (330751 'end of statement')
                  }
                  { scopeless
                    unknown myLocArr[330753] "ref var"(330755 call . myLocArrDesc c"myElems")
                    (330759 'end of statement')
                  }
                  { scopeless
                    const myLocDom[330761] "const" "ref var"(330763 call . myLocArr c"_dom")
                    (330767 'end of statement')
                  }
                  { scopeless
                    unknown tmp[330769] "temp"(330777 call(330771 call .(330773 call . myLocArr c"_value") c"chpl__preScan") myop res(330781 call myLocDom dom))
                    (330785 call _check_tuple_var_decl tmp[330769] 4)
                    unknown numTasks[330788](330790 call tmp[330769] 0)
                    unknown rngs[330793](330795 call tmp[330769] 1)
                    unknown state[330798](330800 call tmp[330769] 2)
                    unknown tot[330803](330805 call tmp[330769] 3)
                    (330808 'end of statement')
                  }
                  if(330810 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330815 call writeln locid ": "(330819 call _build_tuple numTasks rngs state tot))
                    }
                  }
                  (330826 call =(330828 call elemPerLoc 1) tot)
                  (330832 call =(330834 call inputReady$ 1) 1)
                  if(330838 call _cond_test(330840 call == locid(330843 call .(330845 call .(330847 call . dom c"dist") c"targetLocDom") c"low")))
                  {
                    { scopeless
                      const metaop[330854] "const"(330859 call(330856 call . op c"clone"))
                      (330861 'end of statement')
                    }
                    { scopeless
                      unknown next[330863](330865 call . metaop c"identity") resType
                      (330870 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[330872] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[330874] "expr temp" "temp"
                      (330876 'move' _iterator[330874](330879 call _getIterator(330881 call .(330883 call . dom c"dist") c"targetLocDom")))
                      Defer
                      {
                        {
                          (330889 call _freeIterator _iterator[330874])
                        }
                      }
                      { scopeless type
                        (330893 'move' _indexOfInterest[330872](330896 call iteratorIndex _iterator[330874]))
                      }
                      ForLoop[330898]
                      {
                        unknown locid[330901] "index var" "insert auto destroy"
                        (330903 'move' locid[330901] _indexOfInterest[330872])
                        {
                          { scopeless
                            const targetloc[330908] "const"(330910 call targetLocs locid)
                            (330913 'end of statement')
                          }
                          { scopeless
                            const locready[330915] "const"(330922 call(330920 call(330917 call . inputReady$ c"replicand") targetloc) 1)
                            (330925 'end of statement')
                          }
                          { scopeless
                            unknown locVal[330927] "ref var"(330934 call(330932 call(330929 call . elemPerLoc c"replicand") targetloc) 1)
                            (330937 'end of statement')
                          }
                          (330939 call <=> locVal next)
                          (330943 call =(330950 call(330948 call(330945 call . outputReady$ c"replicand") targetloc) 1) 1)
                          (330957 call(330954 call . metaop c"accumulateOntoState") next locVal)
                        }
                        label _continueLabel[330960]
                        _indexOfInterest[330872]
                        _iterator[330874]
                      }
                      label _breakLabel[330962]
                    }
                    (330965 call chpl__delete metaop)
                  }
                  { scopeless
                    const resready[330969] "const"(330971 call outputReady$ 1)
                    (330974 'end of statement')
                  }
                  { scopeless
                    const myadjust[330976] "const"(330978 call elemPerLoc 1)
                    (330981 'end of statement')
                  }
                  if(330983 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330988 call writeln locid ": myadjust = " myadjust)
                    }
                  }
                  {
                    unknown _indexOfInterest[330994] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[330996] "expr temp" "temp"
                    (330998 'move' _iterator[330996](331001 call _getIterator state))
                    Defer
                    {
                      {
                        (331005 call _freeIterator _iterator[330996])
                      }
                    }
                    { scopeless type
                      (331009 'move' _indexOfInterest[330994](331012 call iteratorIndex _iterator[330996]))
                    }
                    ForLoop[331014]
                    {
                      unknown s[331017] "index var" "insert auto destroy"
                      (331019 'move' s[331017] _indexOfInterest[330994])
                      { scopeless
                        (331027 call(331024 call . myop c"accumulateOntoState") s myadjust)
                      }
                      label _continueLabel[331030]
                      _indexOfInterest[330994]
                      _iterator[330996]
                    }
                    label _breakLabel[331032]
                  }
                  if(331035 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (331040 call writeln locid ": state = " state)
                    }
                  }
                  (331052 call(331046 call .(331048 call . myLocArr c"_value") c"chpl__postScan") op res numTasks rngs state)
                  if(331059 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (331064 call writeln locid ": " myLocArr)
                    }
                  }
                  (331070 call chpl__delete myop)
                }
                (331075 call _downEndCount _coforallCount[331073] nil[44])
                (330732 'coforall on block' 0 tmp[330722])
              }
            }
          }
          label _continueLabel[331085]
          _indexOfInterest[331080]
          _iterator[331081]
        }
        label _breakLabel[331086]
        Defer
        {
          {
            (331125 call _endCountFree _coforallCount[331073])
          }
        }
        (331130 call _waitEndCount _coforallCount[331073] 0 numTasks[331074])
      }
      {
        const _coforallCount[331142] "const" "end count" "temp"
        (331198 'move' _coforallCount[331142](331195 call _endCountAlloc 0))
        unknown _indexOfInterest[331149] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[331150] "expr temp" "temp"
        (331159 'move' _iterator[331150](331157 call _getIterator tmpIter[330716]))
        Defer
        {
          {
            (331175 call _freeIterator _iterator[331150])
          }
        }
        { scopeless type
          (331164 'move' _indexOfInterest[331149](331161 call iteratorIndex _iterator[331150]))
        }
        ForLoop[331151]
        {
          unknown locid[331168] "coforall index var" "index var" "insert auto destroy"
          (331170 'move' locid[331168] _indexOfInterest[331149])
          (331182 call _upEndCount _coforallCount[331142] 0)
          { scopeless
            { scopeless
              const tmp[330707] "const" "temp"
              (330709 'move' tmp[330707](330705 'deref'(330704 '_wide_get_locale'(330288 call targetLocs locid))))
              {
                {
                  { scopeless
                    const myop[330295] "const"(330294 call(330290 call . op c"clone"))
                    (330298 'end of statement')
                  }
                  { scopeless
                    unknown myLocArrDesc[330304] "ref var"(330303 call locArr locid)
                    (330307 'end of statement')
                  }
                  { scopeless
                    unknown myLocArr[330312] "ref var"(330309 call . myLocArrDesc c"myElems")
                    (330315 'end of statement')
                  }
                  { scopeless
                    const myLocDom[330320] "const" "ref var"(330317 call . myLocArr c"_dom")
                    (330323 'end of statement')
                  }
                  { scopeless
                    unknown tmp[330348] "temp"(330347 call(330337 call .(330334 call . myLocArr c"_value") c"chpl__preScan") myop res(330346 call myLocDom dom))
                    (330361 call _check_tuple_var_decl tmp[330348] 4)
                    unknown numTasks[330324](330349 call tmp[330348] 0)
                    unknown rngs[330326](330352 call tmp[330348] 1)
                    unknown state[330328](330355 call tmp[330348] 2)
                    unknown tot[330330](330358 call tmp[330348] 3)
                    (330366 'end of statement')
                  }
                  if(330381 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330379 call writeln locid ": "(330377 call _build_tuple numTasks rngs state tot))
                    }
                  }
                  (330391 call =(330389 call elemPerLoc 1) tot)
                  (330399 call =(330397 call inputReady$ 1) 1)
                  if(330549 call _cond_test(330413 call == locid(330410 call .(330407 call .(330404 call . dom c"dist") c"targetLocDom") c"low")))
                  {
                    { scopeless
                      const metaop[330421] "const"(330420 call(330416 call . op c"clone"))
                      (330424 'end of statement')
                    }
                    { scopeless
                      unknown next[330431](330428 call . metaop c"identity") resType
                      (330434 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[330510] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[330511] "expr temp" "temp"
                      (330520 'move' _iterator[330511](330518 call _getIterator(330440 call .(330437 call . dom c"dist") c"targetLocDom")))
                      Defer
                      {
                        {
                          (330537 call _freeIterator _iterator[330511])
                        }
                      }
                      { scopeless type
                        (330526 'move' _indexOfInterest[330510](330523 call iteratorIndex _iterator[330511]))
                      }
                      ForLoop[330512]
                      {
                        unknown locid[330530] "index var" "insert auto destroy"
                        (330532 'move' locid[330530] _indexOfInterest[330510])
                        {
                          { scopeless
                            const targetloc[330447] "const"(330446 call targetLocs locid)
                            (330450 'end of statement')
                          }
                          { scopeless
                            const locready[330464] "const"(330463 call(330460 call(330455 call . inputReady$ c"replicand") targetloc) 1)
                            (330467 'end of statement')
                          }
                          { scopeless
                            unknown locVal[330478] "ref var"(330477 call(330474 call(330469 call . elemPerLoc c"replicand") targetloc) 1)
                            (330481 'end of statement')
                          }
                          (330484 call <=> locVal next)
                          (330498 call =(330496 call(330493 call(330488 call . outputReady$ c"replicand") targetloc) 1) 1)
                          (330508 call(330502 call . metaop c"accumulateOntoState") next locVal)
                        }
                        label _continueLabel[330515]
                        _indexOfInterest[330510]
                        _iterator[330511]
                      }
                      label _breakLabel[330516]
                    }
                    (330546 call chpl__delete metaop)
                  }
                  { scopeless
                    const resready[330557] "const"(330556 call outputReady$ 1)
                    (330560 'end of statement')
                  }
                  { scopeless
                    const myadjust[330565] "const"(330564 call elemPerLoc 1)
                    (330568 'end of statement')
                  }
                  if(330593 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330591 call writeln locid ": myadjust = " myadjust)
                    }
                  }
                  {
                    unknown _indexOfInterest[330609] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[330610] "expr temp" "temp"
                    (330619 'move' _iterator[330610](330617 call _getIterator state))
                    Defer
                    {
                      {
                        (330635 call _freeIterator _iterator[330610])
                      }
                    }
                    { scopeless type
                      (330624 'move' _indexOfInterest[330609](330621 call iteratorIndex _iterator[330610]))
                    }
                    ForLoop[330611]
                    {
                      unknown s[330628] "index var" "insert auto destroy"
                      (330630 'move' s[330628] _indexOfInterest[330609])
                      { scopeless
                        (330607 call(330601 call . myop c"accumulateOntoState") s myadjust)
                      }
                      label _continueLabel[330614]
                      _indexOfInterest[330609]
                      _iterator[330610]
                    }
                    label _breakLabel[330615]
                  }
                  if(330666 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330664 call writeln locid ": state = " state)
                    }
                  }
                  (330684 call(330675 call .(330672 call . myLocArr c"_value") c"chpl__postScan") op res numTasks rngs state)
                  if(330694 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330692 call writeln locid ": " myLocArr)
                    }
                  }
                  (330701 call chpl__delete myop)
                }
                (331144 call _downEndCount _coforallCount[331142] nil[44])
                (330712 'coforall on block' 0 tmp[330707])
              }
            }
          }
          label _continueLabel[331154]
          _indexOfInterest[331149]
          _iterator[331150]
        }
        label _breakLabel[331155]
        Defer
        {
          {
            (331186 call _endCountFree _coforallCount[331142])
          }
        }
        (331191 call _waitEndCount _coforallCount[331142] 0)
      }
    }
    (331222 call chpl__delete op)
    (331226 return res)
  }
  where {
    (330186 call &&(330180 call == rank 1)(330185 call chpl__scanStateResTypesMatch op))
  }
  function newBlockDom[331237](arg dom[331234] :
  _domain) : _unknown[51]
  {
    (331246 return(331244 call chpl__distributed(331243 call Block dom) dom))
  }
  function newBlockArr[331257](arg dom[331254] :
  _domain, arg eltType[331259]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown D[331265](331264 call newBlockDom dom)
      (331268 'end of statement')
    }
    { scopeless
      unknown A[331277](331275 call chpl__buildArrayRuntimeType(331273 call chpl__ensureDomainExpr D) eltType)
      (331280 'end of statement')
    }
    (331282 return A)
  }
  function newBlockDom[331294](arg rng[331290] ... :
  range) : _unknown[51]
  {
    (331304 return(331303 call newBlockDom(331300 call chpl__buildDomainExpr(331298 'expand_tuple' rng))))
  }
  function newBlockArr[331317](arg rng[331313] ... :
  range, arg eltType[331319]:_any[178](?)) : _unknown[51]
  {
    (331330 return(331329 call newBlockArr(331325 call chpl__buildDomainExpr(331323 'expand_tuple' rng)) eltType))
  }
}