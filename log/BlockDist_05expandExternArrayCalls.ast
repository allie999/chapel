AST dump for BlockDist after pass expandExternArrayCalls.
Module use list: 

{
  (353072 'use' ChapelStandard)
  (316528 'use' DSIUtil)
  (316531 'use' ChapelUtil)
  (316534 'use' CommDiagnostics)
  (316537 'use' ChapelLocks)
  (316540 'use' ChapelDebugPrint)
  (316543 'use' LayoutCS)
  (316546 'use' SparseBlockDist)
  { scopeless
    unknown debugBlockDist[316549] "config" "param" 0
    (316552 'end of statement')
  }
  { scopeless
    unknown debugBlockDistBulkTransfer[316554] "config" "param" 0
    (316557 'end of statement')
  }
  { scopeless
    const disableAliasedBulkTransfer[316559] "config" "const" 1
    (316562 'end of statement')
  }
  { scopeless
    unknown disableBlockDistBulkTransfer[316564] "config" "param" 0
    (316567 'end of statement')
  }
  { scopeless
    unknown sanityCheckDistribution[316569] "config" "param" 0
    (316572 'end of statement')
  }
  { scopeless
    unknown testFastFollowerOptimization[316574] "config" "param" 0
    (316577 'end of statement')
  }
  { scopeless
    unknown disableBlockLazyRAD[316579] "config" "param" defaultDisableLazyRADOpt
    (316582 'end of statement')
  }
  type Block[316662](?) unknown rank[316587] "param" int[13] unknown idxType[316592] "type variable" int[13] unknown boundingBox[316601](316599 call chpl__buildDomainRuntimeType defaultDist rank idxType) unknown targetLocDom[316610](316608 call chpl__buildDomainRuntimeType defaultDist rank) unknown targetLocales[316621](316619 call chpl__buildArrayRuntimeType(316617 call chpl__ensureDomainExpr targetLocDom) locale[28]) unknown locDist[316637](316635 call chpl__buildArrayRuntimeType(316633 call chpl__ensureDomainExpr targetLocDom)(316632 'to unmanaged class from unknown'(316631 call LocBlock rank idxType))) unknown dataParTasksPerLocale[316642] int[13] unknown dataParIgnoreRunningTasks[316647] bool[10] unknown dataParMinGranularity[316652] int[13] unknown sparseLayoutType[316658] "type variable"(316657 'to unmanaged class from unknown' DefaultDist) BaseDist
  type LocBlock[316685](?) unknown rank[316667] "param" int[13] unknown idxType[316671] "type variable" const myChunk[316680] "const"(316678 call chpl__buildDomainRuntimeType defaultDist rank idxType)
  type BlockDom[316742](?) unknown sparseLayoutType[316691] "type variable" const dist[316701] "const"(316700 'to unmanaged class from unknown'(316699 call Block rank idxType sparseLayoutType)) unknown locDoms[316723](316721 call chpl__buildArrayRuntimeType(316719 call chpl__ensureDomainExpr(316708 call . dist c"targetLocDom"))(316718 'to unmanaged class from unknown'(316717 call LocBlockDom rank idxType stridable))) unknown whole[316737](316735 call chpl__buildDomainRuntimeType defaultDist(rank = rank)(idxType = idxType)(stridable = stridable)) BaseRectangularDom
  type LocBlockDom[316771](?) unknown rank[316747] "param" int[13] unknown idxType[316751] "type variable" unknown stridable[316755] "param" bool[10] unknown myBlock[316766](316764 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  type BlockArr[316847](?) unknown sparseLayoutType[316777] "type variable" unknown doRADOpt[316782] defaultDoRADOpt bool[10] unknown dom[316794](316793 'to unmanaged class from unknown'(316792 call BlockDom rank idxType stridable sparseLayoutType)) unknown locArr[316818](316816 call chpl__buildArrayRuntimeType(316814 call chpl__ensureDomainExpr(316802 call .(316799 call . dom c"dist") c"targetLocDom"))(316813 'to unmanaged class from unknown'(316812 call LocBlockArr eltType rank idxType stridable))) unknown myLocArr[316831] "local field"(316830 'to unmanaged class from unknown'(316829 'to nilable class from type'(316828 call LocBlockArr eltType rank idxType stridable))) const SENTINEL[316842] "const"(316841 call max(316838 call * rank idxType)) BaseRectangularArr
  type LocBlockArr[317063](?) unknown eltType[316851] "type variable" unknown rank[316855] "param" int[13] unknown idxType[316859] "type variable" unknown stridable[316863] "param" bool[10] const locDom[316874] "const"(316873 'to unmanaged class from unknown'(316872 call LocBlockDom rank idxType stridable)) unknown locRAD[316887](316886 'to unmanaged class from unknown'(316885 'to nilable class from type'(316884 call LocRADCache eltType rank idxType stridable))) unknown myElems[316903] "local field" "unsafe"(316901 call chpl__buildArrayRuntimeType(316899 call chpl__ensureDomainExpr(316894 call . locDom c"myBlock")) eltType) unknown locRADLock[316908] chpl_LocalSpinlock function LocBlockArr[317063](?).init[316916](arg _mt[317067]:_MT[238], arg this[317065]:LocBlockArr[317063](?), arg eltType[316914]:_any[178](?), param arg rank[316919] :
  int[13], arg idxType[316922]:_any[178](?), param arg stridable[316925] :
  bool[10], const arg locDom[316935] :
  (316934 'to unmanaged class from unknown'(316933 call LocBlockDom rank idxType stridable)), param arg initElts[316939] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (316947 call =(316943 call . this c"eltType") eltType)
    (316956 call =(316952 call . this c"rank") rank)
    (316964 call =(316960 call . this c"idxType") idxType)
    (316972 call =(316968 call . this c"stridable") stridable)
    (316982 call =(316978 call . this c"locDom") locDom)
    (317006 call =(316988 call . this c"myElems")(317005 call(316998 call .(316995 call .(316992 call . this c"locDom") c"myBlock") c"buildArray") eltType(initElts = initElts)))
  } function LocBlockArr[317063](?).writeThis[317015](arg _mt[317071]:_MT[238], arg this[317069]:LocBlockArr[317063](?), arg f[317013]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides"
  {
    (317036 call halt "LocBlockArr.writeThis() is not implemented / should not be needed")
  } function LocBlockArr[317063](?).deinit[317043](arg _mt[317075]:_MT[238], arg this[317073]:LocBlockArr[317063](?)) : _unknown[51] "destructor" "method" "primary method"
  {
    if(317054 call _cond_test(317047 call != locRAD nil[44]))
    {
      { scopeless
        (317051 call chpl__delete locRAD)
      }
    }
  }
  function _unknown[51].init[317085](arg _mt[317136]:_MT[238], arg this[317133] :
  Block, arg boundingBox[317082] :
  _domain, arg targetLocales[317092] :
  (317088 call chpl__buildArrayRuntimeType nil[44] locale[28]) =
  Locales, arg dataParTasksPerLocale[317099] =
  (317098 call getDataParTasksPerLocale), arg dataParIgnoreRunningTasks[317105] =
  (317104 call getDataParIgnoreRunningTasks), arg dataParMinGranularity[317111] =
  (317110 call getDataParMinGranularity), param arg rank[317118] =
  (317115 call . boundingBox c"rank"), arg idxType[317125]:_any[178](?) =
  (317122 call . boundingBox c"idxType"), arg sparseLayoutType[317130]:_any[178](?) =
  (317129 'to unmanaged class from unknown' DefaultDist)) : _unknown[51] "method"
  {
    (317143 call =(317139 call . this c"rank") rank)
    (317152 call =(317148 call . this c"idxType") idxType)
    if(317183 call _cond_test(317160 call != rank(317157 call . boundingBox c"rank")))
    {
      { scopeless
        (317181 call compilerError "specified Block rank != rank of specified bounding box")
      }
    }
    if(317216 call _cond_test(317193 call != idxType(317190 call . boundingBox c"idxType")))
    {
      { scopeless
        (317214 call compilerError "specified Block index type != index type of specified bounding box")
      }
    }
    if(317252 call _cond_test(317229 call &&(317223 call != rank 2)(317228 call isCSType sparseLayoutType)))
    {
      { scopeless
        (317250 call compilerError "CS layout is only supported for 2 dimensional domains")
      }
    }
    if(317285 call _cond_test(317262 call ==(317258 call . boundingBox c"size") 0))
    {
      { scopeless
        (317283 call halt "Block() requires a non-empty boundingBox")
      }
    }
    (317307 call =(317293 call . this c"boundingBox")(317305 call _cast(317303 call chpl__buildDomainRuntimeType defaultDist rank idxType(stridable = 0)) boundingBox))
    { scopeless
      const ranges[317315] "const"(317314 call setupTargetLocRanges rank targetLocales)
      (317318 'end of statement')
    }
    (317328 call =(317320 call . this c"targetLocDom")(317326 call chpl__buildDomainExpr(317324 'expand_tuple' ranges)))
    (317343 call =(317332 call . this c"targetLocales")(317342 call reshape targetLocales(317339 call . this c"targetLocDom")))
    { scopeless
      const dummyLB[317356] "const"(317348 'new'(_chpl_manager = unmanaged[220](?))(317355 call LocBlock rank idxType(dummy = 1)))
      (317359 'end of statement')
    }
    { scopeless
      unknown locDistTemp[317373] dummyLB(317370 call chpl__buildArrayRuntimeType(317368 call chpl__ensureDomainExpr targetLocDom)(317367 'to unmanaged class from unknown'(317366 call LocBlock rank idxType)))
      (317376 'end of statement')
    }
    {
      unknown tmpIter[317415] "expr temp" "maybe ref" "no copy" "temp"
      (317418 'move' tmpIter[317415] targetLocDom)
      unknown isRngDomArr[317582] "maybe param" "temp"
      (317597 'move' isRngDomArr[317582](317595 call ||(317584 call isBoundedRange tmpIter[317415])(317593 call ||(317587 call isDomain tmpIter[317415])(317590 call isArray tmpIter[317415]))))
      if isRngDomArr[317582]
      {
        const _coforallCount[317454] "const" "end count" "temp"
        (317519 'move' _coforallCount[317454](317516 call _endCountAlloc 0))
        unknown numTasks[317455] "temp"
        (317503 'move' numTasks[317455](317499 call . tmpIter[317415] c"size"))
        (317494 call _upEndCount _coforallCount[317454] 0 numTasks[317455])
        unknown _indexOfInterest[317461] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317462] "expr temp" "temp"
        (317471 'move' _iterator[317462](317469 call _getIterator tmpIter[317415]))
        Defer
        {
          {
            (317487 call _freeIterator _iterator[317462])
          }
        }
        { scopeless type
          (317476 'move' _indexOfInterest[317461](317473 call iteratorIndex _iterator[317462]))
        }
        ForLoop[317463]
        {
          unknown locid[317480] "coforall index var" "index var" "insert auto destroy"
          (317482 'move' locid[317480] _indexOfInterest[317461])
          { scopeless
            { scopeless
              const tmp[317421] "const" "temp"
              (317423 'move' tmp[317421](317425 'deref'(317426 '_wide_get_locale'(317431 call(317428 call . this c"targetLocales") locid))))
              {
                { scopeless
                  (317439 call =(317441 call locDistTemp locid)(317443 'new'(_chpl_manager = unmanaged[220](?))(317447 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (317456 call _downEndCount _coforallCount[317454] nil[44])
                (317434 'coforall on block' 0 tmp[317421])
              }
            }
          }
          label _continueLabel[317466]
          _indexOfInterest[317461]
          _iterator[317462]
        }
        label _breakLabel[317467]
        Defer
        {
          {
            (317506 call _endCountFree _coforallCount[317454])
          }
        }
        (317511 call _waitEndCount _coforallCount[317454] 0 numTasks[317455])
      }
      {
        const _coforallCount[317523] "const" "end count" "temp"
        (317579 'move' _coforallCount[317523](317576 call _endCountAlloc 0))
        unknown _indexOfInterest[317530] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317531] "expr temp" "temp"
        (317540 'move' _iterator[317531](317538 call _getIterator tmpIter[317415]))
        Defer
        {
          {
            (317556 call _freeIterator _iterator[317531])
          }
        }
        { scopeless type
          (317545 'move' _indexOfInterest[317530](317542 call iteratorIndex _iterator[317531]))
        }
        ForLoop[317532]
        {
          unknown locid[317549] "coforall index var" "index var" "insert auto destroy"
          (317551 'move' locid[317549] _indexOfInterest[317530])
          (317563 call _upEndCount _coforallCount[317523] 0)
          { scopeless
            { scopeless
              const tmp[317407] "const" "temp"
              (317409 'move' tmp[317407](317405 'deref'(317404 '_wide_get_locale'(317385 call(317380 call . this c"targetLocales") locid))))
              {
                { scopeless
                  (317401 call =(317389 call locDistTemp locid)(317392 'new'(_chpl_manager = unmanaged[220](?))(317400 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (317525 call _downEndCount _coforallCount[317523] nil[44])
                (317412 'coforall on block' 0 tmp[317407])
              }
            }
          }
          label _continueLabel[317535]
          _indexOfInterest[317530]
          _iterator[317531]
        }
        label _breakLabel[317536]
        Defer
        {
          {
            (317567 call _endCountFree _coforallCount[317523])
          }
        }
        (317572 call _waitEndCount _coforallCount[317523] 0)
      }
    }
    (317603 call chpl__delete dummyLB)
    (317613 call =(317609 call . this c"locDist") locDistTemp)
    (317634 call =(317619 call . this c"dataParTasksPerLocale")(317631 IfExpr (317624 call == dataParTasksPerLocale 0) then
    { scopeless
      (317627 call . here c"maxTaskPar")
    } else
    { scopeless
      dataParTasksPerLocale
    } ))
    (317644 call =(317640 call . this c"dataParIgnoreRunningTasks") dataParIgnoreRunningTasks)
    (317654 call =(317650 call . this c"dataParMinGranularity") dataParMinGranularity)
    (317667 call =(317660 call . this c"sparseLayoutType")(317666 call _to_unmanaged sparseLayoutType))
    (317675 call(317671 call . this c"complete"))
    if(317704 call _cond_test debugBlockDist)
    {
      (317697 call writeln "Creating new Block distribution:")
      (317702 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiAssign[317718](arg _mt[317723]:_MT[238], arg this[317720] :
  Block, arg other[317715] :
  (317714 'typeof' this)) : _unknown[51] "method"
  {
    {
      unknown tmpIter[317750] "expr temp" "maybe ref" "no copy" "temp"
      (317753 'move' tmpIter[317750] targetLocDom)
      unknown isRngDomArr[317904] "maybe param" "temp"
      (317919 'move' isRngDomArr[317904](317917 call ||(317906 call isBoundedRange tmpIter[317750])(317915 call ||(317909 call isDomain tmpIter[317750])(317912 call isArray tmpIter[317750]))))
      if isRngDomArr[317904]
      {
        const _coforallCount[317776] "const" "end count" "temp"
        (317841 'move' _coforallCount[317776](317838 call _endCountAlloc 0))
        unknown numTasks[317777] "temp"
        (317825 'move' numTasks[317777](317821 call . tmpIter[317750] c"size"))
        (317816 call _upEndCount _coforallCount[317776] 0 numTasks[317777])
        unknown _indexOfInterest[317783] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317784] "expr temp" "temp"
        (317793 'move' _iterator[317784](317791 call _getIterator tmpIter[317750]))
        Defer
        {
          {
            (317809 call _freeIterator _iterator[317784])
          }
        }
        { scopeless type
          (317798 'move' _indexOfInterest[317783](317795 call iteratorIndex _iterator[317784]))
        }
        ForLoop[317785]
        {
          unknown locid[317802] "coforall index var" "index var" "insert auto destroy"
          (317804 'move' locid[317802] _indexOfInterest[317783])
          { scopeless
            { scopeless
              const tmp[317756] "const" "temp"
              (317758 'move' tmp[317756](317760 'deref'(317761 '_wide_get_locale'(317763 call targetLocales locid))))
              {
                { scopeless
                  (317771 call chpl__delete(317773 call locDist locid))
                }
                (317778 call _downEndCount _coforallCount[317776] nil[44])
                (317766 'coforall on block' 0 tmp[317756])
              }
            }
          }
          label _continueLabel[317788]
          _indexOfInterest[317783]
          _iterator[317784]
        }
        label _breakLabel[317789]
        Defer
        {
          {
            (317828 call _endCountFree _coforallCount[317776])
          }
        }
        (317833 call _waitEndCount _coforallCount[317776] 0 numTasks[317777])
      }
      {
        const _coforallCount[317845] "const" "end count" "temp"
        (317901 'move' _coforallCount[317845](317898 call _endCountAlloc 0))
        unknown _indexOfInterest[317852] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317853] "expr temp" "temp"
        (317862 'move' _iterator[317853](317860 call _getIterator tmpIter[317750]))
        Defer
        {
          {
            (317878 call _freeIterator _iterator[317853])
          }
        }
        { scopeless type
          (317867 'move' _indexOfInterest[317852](317864 call iteratorIndex _iterator[317853]))
        }
        ForLoop[317854]
        {
          unknown locid[317871] "coforall index var" "index var" "insert auto destroy"
          (317873 'move' locid[317871] _indexOfInterest[317852])
          (317885 call _upEndCount _coforallCount[317845] 0)
          { scopeless
            { scopeless
              const tmp[317742] "const" "temp"
              (317744 'move' tmp[317742](317740 'deref'(317739 '_wide_get_locale'(317730 call targetLocales locid))))
              {
                { scopeless
                  (317736 call chpl__delete(317734 call locDist locid))
                }
                (317847 call _downEndCount _coforallCount[317845] nil[44])
                (317747 'coforall on block' 0 tmp[317742])
              }
            }
          }
          label _continueLabel[317857]
          _indexOfInterest[317852]
          _iterator[317853]
        }
        label _breakLabel[317858]
        Defer
        {
          {
            (317889 call _endCountFree _coforallCount[317845])
          }
        }
        (317894 call _waitEndCount _coforallCount[317845] 0)
      }
    }
    (317929 call = boundingBox(317926 call . other c"boundingBox"))
    (317937 call = targetLocDom(317934 call . other c"targetLocDom"))
    (317945 call = targetLocales(317942 call . other c"targetLocales"))
    (317953 call = dataParTasksPerLocale(317950 call . other c"dataParTasksPerLocale"))
    (317961 call = dataParIgnoreRunningTasks(317958 call . other c"dataParIgnoreRunningTasks"))
    (317969 call = dataParMinGranularity(317966 call . other c"dataParMinGranularity"))
    {
      unknown tmpIter[318007] "expr temp" "maybe ref" "no copy" "temp"
      (318010 'move' tmpIter[318007] targetLocDom)
      unknown isRngDomArr[318171] "maybe param" "temp"
      (318186 'move' isRngDomArr[318171](318184 call ||(318173 call isBoundedRange tmpIter[318007])(318182 call ||(318176 call isDomain tmpIter[318007])(318179 call isArray tmpIter[318007]))))
      if isRngDomArr[318171]
      {
        const _coforallCount[318043] "const" "end count" "temp"
        (318108 'move' _coforallCount[318043](318105 call _endCountAlloc 0))
        unknown numTasks[318044] "temp"
        (318092 'move' numTasks[318044](318088 call . tmpIter[318007] c"size"))
        (318083 call _upEndCount _coforallCount[318043] 0 numTasks[318044])
        unknown _indexOfInterest[318050] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318051] "expr temp" "temp"
        (318060 'move' _iterator[318051](318058 call _getIterator tmpIter[318007]))
        Defer
        {
          {
            (318076 call _freeIterator _iterator[318051])
          }
        }
        { scopeless type
          (318065 'move' _indexOfInterest[318050](318062 call iteratorIndex _iterator[318051]))
        }
        ForLoop[318052]
        {
          unknown locid[318069] "coforall index var" "index var" "insert auto destroy"
          (318071 'move' locid[318069] _indexOfInterest[318050])
          { scopeless
            { scopeless
              const tmp[318013] "const" "temp"
              (318015 'move' tmp[318013](318017 'deref'(318018 '_wide_get_locale'(318020 call targetLocales locid))))
              {
                { scopeless
                  (318028 call =(318030 call locDist locid)(318032 'new'(_chpl_manager = unmanaged[220](?))(318036 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (318045 call _downEndCount _coforallCount[318043] nil[44])
                (318023 'coforall on block' 0 tmp[318013])
              }
            }
          }
          label _continueLabel[318055]
          _indexOfInterest[318050]
          _iterator[318051]
        }
        label _breakLabel[318056]
        Defer
        {
          {
            (318095 call _endCountFree _coforallCount[318043])
          }
        }
        (318100 call _waitEndCount _coforallCount[318043] 0 numTasks[318044])
      }
      {
        const _coforallCount[318112] "const" "end count" "temp"
        (318168 'move' _coforallCount[318112](318165 call _endCountAlloc 0))
        unknown _indexOfInterest[318119] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318120] "expr temp" "temp"
        (318129 'move' _iterator[318120](318127 call _getIterator tmpIter[318007]))
        Defer
        {
          {
            (318145 call _freeIterator _iterator[318120])
          }
        }
        { scopeless type
          (318134 'move' _indexOfInterest[318119](318131 call iteratorIndex _iterator[318120]))
        }
        ForLoop[318121]
        {
          unknown locid[318138] "coforall index var" "index var" "insert auto destroy"
          (318140 'move' locid[318138] _indexOfInterest[318119])
          (318152 call _upEndCount _coforallCount[318112] 0)
          { scopeless
            { scopeless
              const tmp[317999] "const" "temp"
              (318001 'move' tmp[317999](317997 'deref'(317996 '_wide_get_locale'(317977 call targetLocales locid))))
              {
                { scopeless
                  (317993 call =(317981 call locDist locid)(317984 'new'(_chpl_manager = unmanaged[220](?))(317992 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (318114 call _downEndCount _coforallCount[318112] nil[44])
                (318004 'coforall on block' 0 tmp[317999])
              }
            }
          }
          label _continueLabel[318124]
          _indexOfInterest[318119]
          _iterator[318120]
        }
        label _breakLabel[318125]
        Defer
        {
          {
            (318156 call _endCountFree _coforallCount[318112])
          }
        }
        (318161 call _waitEndCount _coforallCount[318112] 0)
      }
    }
  }
  function _unknown[51].dsiEqualDMaps[318202](arg _mt[318207]:_MT[238], arg this[318204] :
  Block, arg that[318199] :
  (318198 call Block ?[260])) : _unknown[51] "method"
  {
    (318246 return(318244 call &&(318229 call &&(318217 call ==(318210 call . this c"rank")(318214 call . that c"rank"))(318227 call ==(318220 call . this c"boundingBox")(318224 call . that c"boundingBox")))(318243 call(318235 call .(318232 call . this c"targetLocales") c"equals")(318239 call . that c"targetLocales"))))
  }
  function _unknown[51].dsiEqualDMaps[318256](arg _mt[318261]:_MT[238], arg this[318258] :
  Block, arg that[318254]:_any[178](?)) param : _unknown[51] "method"
  {
    (318264 return 0)
  }
  function _unknown[51].dsiClone[318272](arg _mt[318277]:_MT[238], arg this[318274] :
  Block) : _unknown[51] "method"
  {
    (318293 return(318281 'new'(_chpl_manager = unmanaged[220](?))(318292 call Block boundingBox targetLocales dataParTasksPerLocale dataParIgnoreRunningTasks dataParMinGranularity rank idxType sparseLayoutType)))
  }
  function _unknown[51].dsiDestroyDist[318301](arg _mt[318306]:_MT[238], arg this[318303] :
  Block) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[318328] "expr temp" "maybe ref" "no copy" "temp"
      (318331 'move' tmpIter[318328] locDist)
      unknown isRngDomArr[318478] "maybe param" "temp"
      (318493 'move' isRngDomArr[318478](318491 call ||(318480 call isBoundedRange tmpIter[318328])(318489 call ||(318483 call isDomain tmpIter[318328])(318486 call isArray tmpIter[318328]))))
      if isRngDomArr[318478]
      {
        const _coforallCount[318350] "const" "end count" "temp"
        (318415 'move' _coforallCount[318350](318412 call _endCountAlloc 0))
        unknown numTasks[318351] "temp"
        (318399 'move' numTasks[318351](318395 call . tmpIter[318328] c"size"))
        (318390 call _upEndCount _coforallCount[318350] 0 numTasks[318351])
        unknown _indexOfInterest[318357] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318358] "expr temp" "temp"
        (318367 'move' _iterator[318358](318365 call _getIterator tmpIter[318328]))
        Defer
        {
          {
            (318383 call _freeIterator _iterator[318358])
          }
        }
        { scopeless type
          (318372 'move' _indexOfInterest[318357](318369 call iteratorIndex _iterator[318358]))
        }
        ForLoop[318359]
        {
          unknown ld[318376] "coforall index var" "index var" "insert auto destroy"
          (318378 'move' ld[318376] _indexOfInterest[318357])
          { scopeless
            { scopeless
              const tmp[318334] "const" "temp"
              (318336 'move' tmp[318334](318338 'deref'(318339 '_wide_get_locale' ld)))
              {
                { scopeless
                  (318347 call chpl__delete ld)
                }
                (318352 call _downEndCount _coforallCount[318350] nil[44])
                (318342 'coforall on block' 0 tmp[318334])
              }
            }
          }
          label _continueLabel[318362]
          _indexOfInterest[318357]
          _iterator[318358]
        }
        label _breakLabel[318363]
        Defer
        {
          {
            (318402 call _endCountFree _coforallCount[318350])
          }
        }
        (318407 call _waitEndCount _coforallCount[318350] 0 numTasks[318351])
      }
      {
        const _coforallCount[318419] "const" "end count" "temp"
        (318475 'move' _coforallCount[318419](318472 call _endCountAlloc 0))
        unknown _indexOfInterest[318426] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318427] "expr temp" "temp"
        (318436 'move' _iterator[318427](318434 call _getIterator tmpIter[318328]))
        Defer
        {
          {
            (318452 call _freeIterator _iterator[318427])
          }
        }
        { scopeless type
          (318441 'move' _indexOfInterest[318426](318438 call iteratorIndex _iterator[318427]))
        }
        ForLoop[318428]
        {
          unknown ld[318445] "coforall index var" "index var" "insert auto destroy"
          (318447 'move' ld[318445] _indexOfInterest[318426])
          (318459 call _upEndCount _coforallCount[318419] 0)
          { scopeless
            { scopeless
              const tmp[318319] "const" "temp"
              (318321 'move' tmp[318319](318317 'deref'(318316 '_wide_get_locale' ld)))
              {
                { scopeless
                  (318313 call chpl__delete ld)
                }
                (318421 call _downEndCount _coforallCount[318419] nil[44])
                (318324 'coforall on block' 0 tmp[318319])
              }
            }
          }
          label _continueLabel[318431]
          _indexOfInterest[318426]
          _iterator[318427]
        }
        label _breakLabel[318432]
        Defer
        {
          {
            (318463 call _endCountFree _coforallCount[318419])
          }
        }
        (318468 call _waitEndCount _coforallCount[318419] 0)
      }
    }
  }
  function _unknown[51].dsiDisplayRepresentation[318503](arg _mt[318508]:_MT[238], arg this[318505] :
  Block) : _unknown[51] "method" "method overrides"
  {
    (318530 call writeln "boundingBox = " boundingBox)
    (318553 call writeln "targetLocDom = " targetLocDom)
    (318584 call writeln "targetLocales = "(318580 for  tl  in  targetLocales do
    {
      (318577 call . tl c"id")
    } ))
    (318606 call writeln "dataParTasksPerLocale = " dataParTasksPerLocale)
    (318628 call writeln "dataParIgnoreRunningTasks = " dataParIgnoreRunningTasks)
    (318650 call writeln "dataParMinGranularity = " dataParMinGranularity)
    {
      unknown _indexOfInterest[318702] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[318703] "expr temp" "temp"
      (318712 'move' _iterator[318703](318710 call _getIterator targetLocDom))
      Defer
      {
        {
          (318728 call _freeIterator _iterator[318703])
        }
      }
      { scopeless type
        (318717 'move' _indexOfInterest[318702](318714 call iteratorIndex _iterator[318703]))
      }
      ForLoop[318704]
      {
        unknown tli[318721] "index var" "insert auto destroy"
        (318723 'move' tli[318721] _indexOfInterest[318702])
        { scopeless
          (318700 call writeln "locDist[" tli "].myChunk = "(318697 call .(318694 call locDist tli) c"myChunk"))
        }
        label _continueLabel[318707]
        _indexOfInterest[318702]
        _iterator[318703]
      }
      label _breakLabel[318708]
    }
  }
  function _unknown[51].dsiNewRectangularDom[318744](arg _mt[318757]:_MT[238], arg this[318754] :
  Block, param arg rank[318741] :
  int[13], arg idxType[318746]:_any[178](?), param arg stridable[318749] :
  bool[10], arg inds[318752]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(318787 call _cond_test(318764 call != idxType(318761 call . this c"idxType")))
    {
      { scopeless
        (318785 call compilerError "Block domain index type does not match distribution's")
      }
    }
    if(318821 call _cond_test(318798 call != rank(318795 call . this c"rank")))
    {
      { scopeless
        (318819 call compilerError "Block domain rank does not match distribution's")
      }
    }
    { scopeless
      const whole[318833] "const"(318832 call createWholeDomainForInds rank idxType stridable inds)
      (318836 'end of statement')
    }
    { scopeless
      const dummyLBD[318846] "const"(318839 'new'(_chpl_manager = unmanaged[220](?))(318845 call LocBlockDom rank idxType stridable))
      (318849 'end of statement')
    }
    { scopeless
      unknown locDomsTemp[318867] dummyLBD(318864 call chpl__buildArrayRuntimeType(318862 call chpl__ensureDomainExpr(318851 call . this c"targetLocDom"))(318861 'to unmanaged class from unknown'(318860 call LocBlockDom rank idxType stridable)))
      (318870 'end of statement')
    }
    {
      unknown tmpIter[318918] "expr temp" "maybe ref" "no copy" "temp"
      (318921 'move' tmpIter[318918](318873 call . this c"targetLocDom"))
      unknown isRngDomArr[319090] "maybe param" "temp"
      (319105 'move' isRngDomArr[319090](319103 call ||(319092 call isBoundedRange tmpIter[318918])(319101 call ||(319095 call isDomain tmpIter[318918])(319098 call isArray tmpIter[318918]))))
      if isRngDomArr[319090]
      {
        const _coforallCount[318962] "const" "end count" "temp"
        (319027 'move' _coforallCount[318962](319024 call _endCountAlloc 0))
        unknown numTasks[318963] "temp"
        (319011 'move' numTasks[318963](319007 call . tmpIter[318918] c"size"))
        (319002 call _upEndCount _coforallCount[318962] 0 numTasks[318963])
        unknown _indexOfInterest[318969] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318970] "expr temp" "temp"
        (318979 'move' _iterator[318970](318977 call _getIterator tmpIter[318918]))
        Defer
        {
          {
            (318995 call _freeIterator _iterator[318970])
          }
        }
        { scopeless type
          (318984 'move' _indexOfInterest[318969](318981 call iteratorIndex _iterator[318970]))
        }
        ForLoop[318971]
        {
          unknown localeIdx[318988] "coforall index var" "index var" "insert auto destroy"
          (318990 'move' localeIdx[318988] _indexOfInterest[318969])
          { scopeless
            { scopeless
              const tmp[318924] "const" "temp"
              (318926 'move' tmp[318924](318928 'deref'(318929 '_wide_get_locale'(318934 call(318931 call . this c"targetLocales") localeIdx))))
              {
                { scopeless
                  (318942 call =(318944 call locDomsTemp localeIdx)(318946 'new'(_chpl_manager = unmanaged[220](?))(318950 call LocBlockDom rank idxType stridable(318958 call(318955 call . this c"getChunk") whole localeIdx))))
                }
                (318964 call _downEndCount _coforallCount[318962] nil[44])
                (318937 'coforall on block' 0 tmp[318924])
              }
            }
          }
          label _continueLabel[318974]
          _indexOfInterest[318969]
          _iterator[318970]
        }
        label _breakLabel[318975]
        Defer
        {
          {
            (319014 call _endCountFree _coforallCount[318962])
          }
        }
        (319019 call _waitEndCount _coforallCount[318962] 0 numTasks[318963])
      }
      {
        const _coforallCount[319031] "const" "end count" "temp"
        (319087 'move' _coforallCount[319031](319084 call _endCountAlloc 0))
        unknown _indexOfInterest[319038] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[319039] "expr temp" "temp"
        (319048 'move' _iterator[319039](319046 call _getIterator tmpIter[318918]))
        Defer
        {
          {
            (319064 call _freeIterator _iterator[319039])
          }
        }
        { scopeless type
          (319053 'move' _indexOfInterest[319038](319050 call iteratorIndex _iterator[319039]))
        }
        ForLoop[319040]
        {
          unknown localeIdx[319057] "coforall index var" "index var" "insert auto destroy"
          (319059 'move' localeIdx[319057] _indexOfInterest[319038])
          (319071 call _upEndCount _coforallCount[319031] 0)
          { scopeless
            { scopeless
              const tmp[318910] "const" "temp"
              (318912 'move' tmp[318910](318908 'deref'(318907 '_wide_get_locale'(318882 call(318877 call . this c"targetLocales") localeIdx))))
              {
                { scopeless
                  (318904 call =(318886 call locDomsTemp localeIdx)(318889 'new'(_chpl_manager = unmanaged[220](?))(318903 call LocBlockDom rank idxType stridable(318902 call(318896 call . this c"getChunk") whole localeIdx))))
                }
                (319033 call _downEndCount _coforallCount[319031] nil[44])
                (318915 'coforall on block' 0 tmp[318910])
              }
            }
          }
          label _continueLabel[319043]
          _indexOfInterest[319038]
          _iterator[319039]
        }
        label _breakLabel[319044]
        Defer
        {
          {
            (319075 call _endCountFree _coforallCount[319031])
          }
        }
        (319080 call _waitEndCount _coforallCount[319031] 0)
      }
    }
    (319111 call chpl__delete dummyLBD)
    { scopeless
      unknown dom[319130](319116 'new'(_chpl_manager = unmanaged[220](?))(319129 call BlockDom rank idxType stridable sparseLayoutType(319125 call _cast unmanaged[220](?) this) locDomsTemp whole))
      (319133 'end of statement')
    }
    if(319164 call _cond_test debugBlockDist)
    {
      (319154 call writeln "Creating new Block domain:")
      (319162 call(319158 call . dom c"dsiDisplayRepresentation"))
    }
    (319169 return dom)
  }
  function _unknown[51].dsiNewSparseDom[319180](arg _mt[319191]:_MT[238], arg this[319188] :
  Block, param arg rank[319177] :
  int[13], arg idxType[319182]:_any[178](?), arg dom[319185] :
  _domain) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      unknown ret[319227](319195 'new'(_chpl_manager = unmanaged[220](?))(319226 call SparseBlockDom(rank = rank)(idxType = idxType)(sparseLayoutType = sparseLayoutType)(stridable =(319205 call . dom c"stridable"))(dist =(319212 call _to_unmanaged this))(whole =(319220 call .(319215 call . dom c"_value") c"whole"))(parentDom = dom)))
      (319230 'end of statement')
    }
    (319237 call(319233 call . ret c"setup"))
    (319240 return ret)
  }
  function _unknown[51].writeThis[319249](arg _mt[319254]:_MT[238], arg this[319251] :
  Block, arg x[319247]:_any[178](?)) : _unknown[51] throws "method"
  {
    (319277 call <~>(319274 call <~> x "Block") "\n")
    (319302 call <~>(319299 call <~> x "-------") "\n")
    (319329 call <~>(319326 call <~>(319323 call <~> x "distributes: ") boundingBox) "\n")
    (319356 call <~>(319353 call <~>(319350 call <~> x "across locales: ") targetLocales) "\n")
    (319383 call <~>(319380 call <~>(319377 call <~> x "indexed via: ") targetLocDom) "\n")
    (319407 call <~>(319404 call <~> x "resulting in: ") "\n")
    {
      unknown _indexOfInterest[319496] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[319497] "expr temp" "temp"
      (319506 'move' _iterator[319497](319504 call _getIterator targetLocDom))
      Defer
      {
        {
          (319522 call _freeIterator _iterator[319497])
        }
      }
      { scopeless type
        (319511 'move' _indexOfInterest[319496](319508 call iteratorIndex _iterator[319497]))
      }
      ForLoop[319498]
      {
        unknown locid[319515] "index var" "insert auto destroy"
        (319517 'move' locid[319515] _indexOfInterest[319496])
        { scopeless
          (319493 call <~>(319490 call <~>(319481 call <~>(319462 call <~>(319452 call <~>(319433 call <~>(319430 call <~> x "  [") locid) "] locale ")(319461 '_wide_get_node'(319457 call locDist locid))) " owns chunk: ")(319487 call .(319486 call locDist locid) c"myChunk")) "\n")
        }
        label _continueLabel[319501]
        _indexOfInterest[319496]
        _iterator[319497]
      }
      label _breakLabel[319502]
    }
  }
  function _unknown[51].dsiIndexToLocale[319538](arg _mt[319543]:_MT[238], arg this[319540] :
  Block, arg ind[319535] :
  idxType) : _unknown[51] "method"
  {
    (319556 return(319555 call targetLocales(319553 call targetLocsIdx ind)))
  }
  where {
    (319547 call == rank 1)
  }
  function _unknown[51].dsiIndexToLocale[319572](arg _mt[319577]:_MT[238], arg this[319574] :
  Block, arg ind[319569] :
  (319567 call * rank idxType)) : _unknown[51] "method"
  {
    (319586 return(319585 call targetLocales(319583 call targetLocsIdx ind)))
  }
  function _unknown[51].getChunk[319596](arg _mt[319603]:_MT[238], arg this[319600] :
  Block, arg inds[319594]:_any[178](?), arg locid[319598]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      const chunk[319621] "const"(319620 call(319609 call .(319608 call locDist locid) c"myChunk")(319618 'expand_tuple'(319617 call(319613 call . inds c"getIndices"))))
      (319624 'end of statement')
    }
    if(319745 call _cond_test sanityCheckDistribution)
    {
      { scopeless
        if(319741 call _cond_test(319632 call >(319628 call . chunk c"size") 0))
        {
          if(319698 call _cond_test(319642 call !=(319640 call targetLocsIdx(319636 call . chunk c"low")) locid))
          {
            { scopeless
              (319696 call writeln "["(319648 call . here c"id") "] "(319669 call . chunk c"low") " is in my chunk but maps to "(319695 call targetLocsIdx(319691 call . chunk c"low")))
            }
          }
          if(319736 call _cond_test(319712 call !=(319710 call targetLocsIdx(319706 call . chunk c"high")) locid))
          {
            { scopeless
              (319734 call writeln "["(319718 call . here c"id") "] "(319723 call . chunk c"high") " is in my chunk but maps to "(319733 call targetLocsIdx(319729 call . chunk c"high")))
            }
          }
        }
      }
    }
    (319751 return chunk)
  }
  function _unknown[51].targetLocsIdx[319762](arg _mt[319767]:_MT[238], arg this[319764] :
  Block, arg ind[319759] :
  idxType) : _unknown[51] "method"
  {
    (319779 return(319778 call targetLocsIdx(319775 call _build_tuple ind)))
  }
  where {
    (319771 call == rank 1)
  }
  function _unknown[51].targetLocsIdx[319795](arg _mt[319800]:_MT[238], arg this[319797] :
  Block, arg ind[319792] :
  (319790 call * rank idxType)) : _unknown[51] "method"
  {
    { scopeless
      unknown result[319806](319804 call * rank int[13])
      (319809 'end of statement')
    }
    {
      unknown i[319894] 0
      unknown tmp[319895] "maybe param" "temp"
      (319907 'move' tmp[319895](319905 call chpl_compute_low_param_loop_bound 0(319814 call - rank 1)))
      unknown tmp[319896] "maybe param" "temp"
      (319917 'move' tmp[319896](319915 call chpl_compute_high_param_loop_bound 0(319912 call - rank 1)))
      unknown tmp[319897] "maybe param" "temp"
      (319920 'move' tmp[319897] 1)
      ParamForLoop[319922]
      { i[319894] tmp[319895] tmp[319896] tmp[319897]
        { scopeless
          (319891 call =(319821 call result i)(319890 call max 0(319889 call min(319840 call _cast int[13](319837 call -(319833 call .(319832 call(319827 call . targetLocDom c"dim") i) c"size") 1))(319887 call _cast int[13](319884 call /(319872 call *(319857 call -(319846 call ind i)(319854 call .(319853 call(319848 call . boundingBox c"dim") i) c"low"))(319870 call _cast idxType(319866 call .(319865 call(319860 call . targetLocDom c"dim") i) c"size")))(319881 call .(319880 call(319875 call . boundingBox c"dim") i) c"size"))))))
        }
      }
      label _unused_continueLabel[319899]
      label _breakLabel[319898]
    }
    (319943 return(319940 IfExpr (319933 call == rank 1) then
    { scopeless
      (319938 call result 0)
    } else
    { scopeless
      result
    } ))
  }
  function _unknown[51].activeTargetLocales[319956](arg _mt[319961]:_MT[238], arg this[319958] :
  Block, const arg space[319952] :
  _domain =
  boundingBox) : _unknown[51] "iterator fn" "method"
  {
    { scopeless
      const locSpace[319973] "const"(319971 call chpl__buildDomainExpr(319969 'expand_tuple'(319968 call(319964 call . space c"dims"))))
      (319976 'end of statement')
    }
    { scopeless
      const low[319988] "const"(319987 call chpl__tuplify(319985 call targetLocsIdx(319981 call . locSpace c"first")))
      (319991 'end of statement')
    }
    { scopeless
      const high[320002] "const"(320001 call chpl__tuplify(319999 call targetLocsIdx(319995 call . locSpace c"last")))
      (320005 'end of statement')
    }
    { scopeless
      unknown dims[320017](320015 call * rank(320014 call range(320012 'typeof'(320011 call low 0))))
      (320020 'end of statement')
    }
    {
      unknown i[320046] 0
      unknown tmp[320047] "maybe param" "temp"
      (320059 'move' tmp[320047](320057 call chpl_compute_low_param_loop_bound 0(320024 call - rank 1)))
      unknown tmp[320048] "maybe param" "temp"
      (320069 'move' tmp[320048](320067 call chpl_compute_high_param_loop_bound 0(320064 call - rank 1)))
      unknown tmp[320049] "maybe param" "temp"
      (320072 'move' tmp[320049] 1)
      ParamForLoop[320074]
      { i[320046] tmp[320047] tmp[320048] tmp[320049]
        {
          (320042 call =(320031 call dims i)(320040 call chpl_build_bounded_range(320035 call low i)(320039 call high i)))
        }
      }
      label _unused_continueLabel[320051]
      label _breakLabel[320050]
    }
    {
      unknown _indexOfInterest[320119] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320120] "expr temp" "temp"
      (320129 'move' _iterator[320120](320127 call _getIterator(320087 call chpl__buildDomainExpr(320085 'expand_tuple' dims))))
      Defer
      {
        {
          (320146 call _freeIterator _iterator[320120])
        }
      }
      { scopeless type
        (320135 'move' _indexOfInterest[320119](320132 call iteratorIndex _iterator[320120]))
      }
      ForLoop[320121]
      {
        unknown i[320139] "index var" "insert auto destroy"
        (320141 'move' i[320139] _indexOfInterest[320119])
        {
          { scopeless
            const chunk[320095] "const"(320094 call chpl__computeBlock i targetLocDom boundingBox)
            (320098 'end of statement')
          }
          if(320114 call _cond_test(320109 call >(320105 call .(320104 call locSpace(320102 'expand_tuple' chunk)) c"size") 0))
          {
            { scopeless
              (320112 yield i)
            }
          }
        }
        label _continueLabel[320124]
        _indexOfInterest[320119]
        _iterator[320120]
      }
      label _breakLabel[320125]
    }
  }
  function chpl__computeBlock[320159](arg locid[320157]:_any[178](?), arg targetLocBox[320161]:_any[178](?), arg boundingBox[320163]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown rank[320169] "param"(320166 call . targetLocBox c"rank")
      (320172 'end of statement')
    }
    unknown idxType[320184] "type variable"(320181 call .(320180 call(320177 call chpl__tuplify boundingBox) 0) c"idxType")
    { scopeless
      unknown inds[320194](320192 call * rank(320191 call range idxType))
      (320197 'end of statement')
    }
    {
      unknown i[320309] 0
      unknown tmp[320310] "maybe param" "temp"
      (320322 'move' tmp[320310](320320 call chpl_compute_low_param_loop_bound 0(320201 call - rank 1)))
      unknown tmp[320311] "maybe param" "temp"
      (320332 'move' tmp[320311](320330 call chpl_compute_high_param_loop_bound 0(320327 call - rank 1)))
      unknown tmp[320312] "maybe param" "temp"
      (320335 'move' tmp[320312] 1)
      ParamForLoop[320337]
      { i[320309] tmp[320310] tmp[320311] tmp[320312]
        {
          { scopeless
            const lo[320215] "const"(320212 call .(320211 call(320206 call . boundingBox c"dim") i) c"low")
            (320218 'end of statement')
          }
          { scopeless
            const hi[320230] "const"(320227 call .(320226 call(320221 call . boundingBox c"dim") i) c"high")
            (320233 'end of statement')
          }
          { scopeless
            const numelems[320241] "const"(320239 call +(320236 call - hi lo) 1)
            (320244 'end of statement')
          }
          { scopeless
            const numlocs[320255] "const"(320252 call .(320251 call(320246 call . targetLocBox c"dim") i) c"size")
            (320258 'end of statement')
          }
          { scopeless
            const tmp[320285] "const" "temp"(320284 call _computeBlock numelems numlocs(320274 call(320271 call chpl__tuplify locid) i)(320278 call max idxType)(320282 call min idxType) lo)
            (320292 call _check_tuple_var_decl tmp[320285] 2)
            const blo[320259] "const"(320286 call tmp[320285] 0)
            const bhi[320261] "const"(320289 call tmp[320285] 1)
            (320297 'end of statement')
          }
          (320306 call =(320301 call inds i)(320304 call chpl_build_bounded_range blo bhi))
        }
      }
      label _unused_continueLabel[320314]
      label _breakLabel[320313]
    }
    (320347 return inds)
  }
  function _unknown[51].init[320358](arg _mt[320377]:_MT[238], arg this[320374] :
  LocBlock, param arg rank[320355] :
  int[13], arg idxType[320360]:_any[178](?), arg locid[320362]:_any[178](?), arg boundingBox[320364]:_any[178](?), arg targetLocDom[320371] :
  (320369 call chpl__buildDomainRuntimeType defaultDist rank)) : _unknown[51] "method"
  {
    (320384 call =(320380 call . this c"rank") rank)
    (320393 call =(320389 call . this c"idxType") idxType)
    { scopeless
      const inds[320405] "const"(320404 call chpl__computeBlock(320400 call chpl__tuplify locid) targetLocDom boundingBox)
      (320408 'end of statement')
    }
    (320415 call = myChunk(320413 call chpl__buildDomainExpr(320411 'expand_tuple' inds)))
  }
  function _unknown[51].init[320425](arg _mt[320436]:_MT[238], arg this[320433] :
  LocBlock, param arg rank[320423]:_any[178](?), arg idxType[320427]:_any[178](?), param arg dummy[320430] :
  bool[10]) : _unknown[51] "method"
  {
    (320444 call =(320440 call . this c"rank") rank)
    (320453 call =(320449 call . this c"idxType") idxType)
  }
  where {
    dummy
  }
  function _unknown[51].dsiMyDist[320462](arg _mt[320467]:_MT[238], arg this[320464] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (320470 return dist)
    }
  }
  function _unknown[51].dsiDisplayRepresentation[320478](arg _mt[320483]:_MT[238], arg this[320480] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    (320505 call writeln "whole = " whole)
    {
      unknown _indexOfInterest[320559] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320560] "expr temp" "temp"
      (320569 'move' _iterator[320560](320567 call _getIterator(320510 call . dist c"targetLocDom")))
      Defer
      {
        {
          (320586 call _freeIterator _iterator[320560])
        }
      }
      { scopeless type
        (320575 'move' _indexOfInterest[320559](320572 call iteratorIndex _iterator[320560]))
      }
      ForLoop[320561]
      {
        unknown tli[320579] "index var" "insert auto destroy"
        (320581 'move' tli[320579] _indexOfInterest[320559])
        { scopeless
          (320557 call writeln "locDoms[" tli "].myBlock = "(320554 call .(320553 call locDoms tli) c"myBlock"))
        }
        label _continueLabel[320564]
        _indexOfInterest[320559]
        _iterator[320560]
      }
      label _breakLabel[320565]
    }
  }
  function _unknown[51].dsiDims[320598](arg _mt[320603]:_MT[238], arg this[320600] :
  BlockDom) : _unknown[51] "method"
  {
    { scopeless
      (320611 return(320610 call(320606 call . whole c"dims")))
    }
  }
  function _unknown[51].dsiDim[320623](arg _mt[320628]:_MT[238], arg this[320625] :
  BlockDom, arg d[320620] :
  int[13]) : _unknown[51] "method"
  {
    { scopeless
      (320637 return(320636 call(320631 call . whole c"dim") d))
    }
  }
  function _unknown[51].getLocDom[320647](arg _mt[320652]:_MT[238], arg this[320649] :
  BlockDom, arg localeIdx[320645]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (320658 return(320657 call locDoms localeIdx))
    }
  }
  function _matchArgsShape[320667](arg rangeType[320665]:_any[178](?), arg scalarType[320669]:_any[178](?), arg args[320671]:_any[178](?)) type : _unknown[51]
  {
    function helper[320679](param arg i[320676] :
    int[13]) type : _unknown[51]
    {
      if(320754 call _cond_test(320686 call == i(320683 call . args c"size")))
      {
        if(320705 call _cond_test(320694 call isCollapsedDimension(320692 call args i)))
        {
          { scopeless
            (320698 return(320696 call _build_tuple scalarType))
          }
        }
        {
          { scopeless
            (320703 return(320701 call _build_tuple rangeType))
          }
        }
      }
      {
        if(320747 call _cond_test(320718 call isCollapsedDimension(320716 call args i)))
        {
          { scopeless
            (320731 return(320729 call _build_tuple scalarType(320727 'expand_tuple'(320726 call helper(320723 call + i 1)))))
          }
        }
        {
          { scopeless
            (320745 return(320743 call _build_tuple rangeType(320741 'expand_tuple'(320740 call helper(320737 call + i 1)))))
          }
        }
      }
    }
    (320766 return(320765 call helper 0))
  }
  function _unknown[51].these[320773](arg _mt[320778]:_MT[238], arg this[320775] :
  BlockDom) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[320785] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320786] "expr temp" "temp"
      (320795 'move' _iterator[320786](320793 call _getIterator whole))
      Defer
      {
        {
          (320811 call _freeIterator _iterator[320786])
        }
      }
      { scopeless type
        (320800 'move' _indexOfInterest[320785](320797 call iteratorIndex _iterator[320786]))
      }
      ForLoop[320787]
      {
        unknown i[320804] "index var" "insert auto destroy"
        (320806 'move' i[320804] _indexOfInterest[320785])
        { scopeless
          (320783 yield i)
        }
        label _continueLabel[320790]
        _indexOfInterest[320785]
        _iterator[320786]
      }
      label _breakLabel[320791]
    }
  }
  function _unknown[51].these[320828](arg _mt[320833]:_MT[238], arg this[320830] :
  BlockDom, param arg tag[320825] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    { scopeless
      const maxTasks[320846] "const"(320843 call . dist c"dataParTasksPerLocale")
      (320849 'end of statement')
    }
    { scopeless
      const ignoreRunning[320855] "const"(320852 call . dist c"dataParIgnoreRunningTasks")
      (320858 'end of statement')
    }
    { scopeless
      const minSize[320863] "const"(320860 call . dist c"dataParMinGranularity")
      (320866 'end of statement')
    }
    { scopeless
      const wholeLow[320871] "const"(320868 call . whole c"low")
      (320874 'end of statement')
    }
    { scopeless
      const hereId[320879] "const"(320876 call . here c"id")
      (320882 'end of statement')
    }
    { scopeless
      const hereIgnoreRunning[320897] "const"(320894 IfExpr (320890 call ==(320888 call(320884 call . here c"runningTasks")) 1) then
      { scopeless
        1
      } else
      { scopeless
        ignoreRunning
      } )
      (320900 'end of statement')
    }
    {
      unknown tmpIter[321137] "expr temp" "maybe ref" "no copy" "temp"
      (321140 'move' tmpIter[321137] locDoms)
      unknown isRngDomArr[321473] "maybe param" "temp"
      (321488 'move' isRngDomArr[321473](321486 call ||(321475 call isBoundedRange tmpIter[321137])(321484 call ||(321478 call isDomain tmpIter[321137])(321481 call isArray tmpIter[321137]))))
      if isRngDomArr[321473]
      {
        const _coforallCount[321345] "const" "end count" "temp"
        (321410 'move' _coforallCount[321345](321407 call _endCountAlloc 0))
        unknown numTasks[321346] "temp"
        (321394 'move' numTasks[321346](321390 call . tmpIter[321137] c"size"))
        (321385 call _upEndCount _coforallCount[321345] 0 numTasks[321346])
        unknown _indexOfInterest[321352] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[321353] "expr temp" "temp"
        (321362 'move' _iterator[321353](321360 call _getIterator tmpIter[321137]))
        Defer
        {
          {
            (321378 call _freeIterator _iterator[321353])
          }
        }
        { scopeless type
          (321367 'move' _indexOfInterest[321352](321364 call iteratorIndex _iterator[321353]))
        }
        ForLoop[321354]
        {
          unknown locDom[321371] "coforall index var" "index var" "insert auto destroy"
          (321373 'move' locDom[321371] _indexOfInterest[321352])
          { scopeless
            { scopeless
              const tmp[321143] "const" "temp"
              (321145 'move' tmp[321143](321147 'deref'(321148 '_wide_get_locale' locDom)))
              {
                {
                  { scopeless
                    const myIgnoreRunning[321156] "const"(321168 IfExpr (321158 call ==(321160 call . here c"id") hereId) then
                    { scopeless
                      hereIgnoreRunning
                    } else
                    { scopeless
                      ignoreRunning
                    } )
                    (321170 'end of statement')
                  }
                  unknown strType[321171] "type variable"(321173 call chpl__signedType idxType)
                  { scopeless
                    const tmpBlock[321177] "const"(321185 call(321179 call .(321181 call . locDom c"myBlock") c"chpl__unTranslate") wholeLow)
                    (321188 'end of statement')
                  }
                  { scopeless
                    unknown locOffset[321190](321192 call * rank idxType)
                    (321196 'end of statement')
                  }
                  {
                    unknown i[321198] 0
                    unknown tmp[321201] "maybe param" "temp"
                    (321203 'move' tmp[321201](321206 call chpl_compute_low_param_loop_bound 0(321209 call -(321211 call . tmpBlock c"rank") 1)))
                    unknown tmp[321215] "maybe param" "temp"
                    (321217 'move' tmp[321215](321220 call chpl_compute_high_param_loop_bound 0(321223 call -(321225 call . tmpBlock c"rank") 1)))
                    unknown tmp[321229] "maybe param" "temp"
                    (321231 'move' tmp[321229] 1)
                    ParamForLoop[321234]
                    { i[321198] tmp[321201] tmp[321215] tmp[321229]
                      {
                        { scopeless
                          const stride[321242] "const"(321244 call .(321249 call(321246 call . tmpBlock c"dim") i) c"stride")
                          (321253 'end of statement')
                        }
                        if(321255 call _cond_test(321257 call &&(321259 call < stride 0)(321263 call != strType idxType)))
                        {
                          { scopeless
                            (321269 call halt "negative stride not supported with unsigned idxType")
                          }
                        }
                        (321273 call =(321275 call locOffset i)(321278 call /(321280 call .(321285 call(321282 call . tmpBlock c"dim") i) c"first")(321289 call _cast idxType stride)))
                      }
                    }
                    label _unused_continueLabel[321292]
                    label _breakLabel[321294]
                  }
                  {
                    unknown _indexOfInterest[321297] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[321299] "expr temp" "temp"
                    (321301 'move' _iterator[321299](321304 call _getIterator(321309 call(321306 call . tmpBlock c"these")(321311 call . iterKind c"leader") maxTasks myIgnoreRunning minSize locOffset)))
                    Defer
                    {
                      {
                        (321320 call _freeIterator _iterator[321299])
                      }
                    }
                    { scopeless type
                      (321324 'move' _indexOfInterest[321297](321327 call iteratorIndex _iterator[321299]))
                    }
                    ForLoop[321329]
                    {
                      unknown followThis[321332] "index var" "insert auto destroy"
                      (321334 'move' followThis[321332] _indexOfInterest[321297])
                      { scopeless
                        (321338 yield followThis)
                      }
                      label _continueLabel[321340]
                      _indexOfInterest[321297]
                      _iterator[321299]
                    }
                    label _breakLabel[321342]
                  }
                }
                (321347 call _downEndCount _coforallCount[321345] nil[44])
                (321151 'coforall on block' 0 tmp[321143])
              }
            }
          }
          label _continueLabel[321357]
          _indexOfInterest[321352]
          _iterator[321353]
        }
        label _breakLabel[321358]
        Defer
        {
          {
            (321397 call _endCountFree _coforallCount[321345])
          }
        }
        (321402 call _waitEndCount _coforallCount[321345] 0 numTasks[321346])
      }
      {
        const _coforallCount[321414] "const" "end count" "temp"
        (321470 'move' _coforallCount[321414](321467 call _endCountAlloc 0))
        unknown _indexOfInterest[321421] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[321422] "expr temp" "temp"
        (321431 'move' _iterator[321422](321429 call _getIterator tmpIter[321137]))
        Defer
        {
          {
            (321447 call _freeIterator _iterator[321422])
          }
        }
        { scopeless type
          (321436 'move' _indexOfInterest[321421](321433 call iteratorIndex _iterator[321422]))
        }
        ForLoop[321423]
        {
          unknown locDom[321440] "coforall index var" "index var" "insert auto destroy"
          (321442 'move' locDom[321440] _indexOfInterest[321421])
          (321454 call _upEndCount _coforallCount[321414] 0)
          { scopeless
            { scopeless
              const tmp[321129] "const" "temp"
              (321131 'move' tmp[321129](321127 'deref'(321126 '_wide_get_locale' locDom)))
              {
                {
                  { scopeless
                    const myIgnoreRunning[320916] "const"(320913 IfExpr (320909 call ==(320905 call . here c"id") hereId) then
                    { scopeless
                      hereIgnoreRunning
                    } else
                    { scopeless
                      ignoreRunning
                    } )
                    (320919 'end of statement')
                  }
                  unknown strType[320925] "type variable"(320924 call chpl__signedType idxType)
                  { scopeless
                    const tmpBlock[320938] "const"(320937 call(320932 call .(320929 call . locDom c"myBlock") c"chpl__unTranslate") wholeLow)
                    (320941 'end of statement')
                  }
                  { scopeless
                    unknown locOffset[320946](320944 call * rank idxType)
                    (320949 'end of statement')
                  }
                  {
                    unknown i[321034] 0
                    unknown tmp[321035] "maybe param" "temp"
                    (321047 'move' tmp[321035](321045 call chpl_compute_low_param_loop_bound 0(320956 call -(320952 call . tmpBlock c"rank") 1)))
                    unknown tmp[321036] "maybe param" "temp"
                    (321060 'move' tmp[321036](321058 call chpl_compute_high_param_loop_bound 0(321052 call -(321054 call . tmpBlock c"rank") 1)))
                    unknown tmp[321037] "maybe param" "temp"
                    (321063 'move' tmp[321037] 1)
                    ParamForLoop[321065]
                    { i[321034] tmp[321035] tmp[321036] tmp[321037]
                      {
                        { scopeless
                          const stride[320970] "const"(320967 call .(320966 call(320961 call . tmpBlock c"dim") i) c"stride")
                          (320973 'end of statement')
                        }
                        if(321006 call _cond_test(320983 call &&(320977 call < stride 0)(320981 call != strType idxType)))
                        {
                          { scopeless
                            (321004 call halt "negative stride not supported with unsigned idxType")
                          }
                        }
                        (321031 call =(321014 call locOffset i)(321029 call /(321022 call .(321021 call(321016 call . tmpBlock c"dim") i) c"first")(321027 call _cast idxType stride)))
                      }
                    }
                    label _unused_continueLabel[321039]
                    label _breakLabel[321038]
                  }
                  {
                    unknown _indexOfInterest[321092] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[321093] "expr temp" "temp"
                    (321102 'move' _iterator[321093](321100 call _getIterator(321088 call(321076 call . tmpBlock c"these")(321080 call . iterKind c"leader") maxTasks myIgnoreRunning minSize locOffset)))
                    Defer
                    {
                      {
                        (321119 call _freeIterator _iterator[321093])
                      }
                    }
                    { scopeless type
                      (321108 'move' _indexOfInterest[321092](321105 call iteratorIndex _iterator[321093]))
                    }
                    ForLoop[321094]
                    {
                      unknown followThis[321112] "index var" "insert auto destroy"
                      (321114 'move' followThis[321112] _indexOfInterest[321092])
                      { scopeless
                        (321090 yield followThis)
                      }
                      label _continueLabel[321097]
                      _indexOfInterest[321092]
                      _iterator[321093]
                    }
                    label _breakLabel[321098]
                  }
                }
                (321416 call _downEndCount _coforallCount[321414] nil[44])
                (321134 'coforall on block' 0 tmp[321129])
              }
            }
          }
          label _continueLabel[321426]
          _indexOfInterest[321421]
          _iterator[321422]
        }
        label _breakLabel[321427]
        Defer
        {
          {
            (321458 call _endCountFree _coforallCount[321414])
          }
        }
        (321463 call _waitEndCount _coforallCount[321414] 0)
      }
    }
  }
  where {
    (320840 call == tag(320837 call . iterKind c"leader"))
  }
  function _unknown[51].these[321502](arg _mt[321509]:_MT[238], arg this[321506] :
  BlockDom, param arg tag[321499] :
  iterKind, arg followThis[321504]:_any[178](?)) : _unknown[51] "iterator fn" "method"
  {
    function anyStridable[321522](arg rangeTuple[321520]:_any[178](?), param arg i[321526] :
    int[13] =
    0) param : _unknown[51]
    {
      { scopeless
        (321567 return(321564 IfExpr (321538 call == i(321536 call -(321532 call . rangeTuple c"size") 1)) then
        { scopeless
          (321544 call .(321543 call rangeTuple i) c"stridable")
        } else
        { scopeless
          (321562 call ||(321551 call .(321550 call rangeTuple i) c"stridable")(321561 call anyStridable rangeTuple(321559 call + i 1)))
        } ))
      }
    }
    if(321596 call _cond_test chpl__testParFlag)
    {
      { scopeless
        (321594 call chpl__testParWriteln "Block domain follower invoked on " followThis)
      }
    }
    { scopeless
      unknown t[321616](321614 call * rank(321613 call range idxType(stridable =(321610 call || stridable(321609 call anyStridable followThis)))))
      (321619 'end of statement')
    }
    unknown strType[321624] "type variable"(321623 call chpl__signedType idxType)
    {
      unknown i[321743] 0
      unknown tmp[321744] "maybe param" "temp"
      (321756 'move' tmp[321744](321754 call chpl_compute_low_param_loop_bound 0(321630 call - rank 1)))
      unknown tmp[321745] "maybe param" "temp"
      (321766 'move' tmp[321745](321764 call chpl_compute_high_param_loop_bound 0(321761 call - rank 1)))
      unknown tmp[321746] "maybe param" "temp"
      (321769 'move' tmp[321746] 1)
      ParamForLoop[321771]
      { i[321743] tmp[321744] tmp[321745] tmp[321746]
        {
          { scopeless
            unknown stride[321647](321645 call _cast strType(321641 call .(321640 call(321635 call . whole c"dim") i) c"stride"))
            (321650 'end of statement')
          }
          { scopeless
            unknown low[321668](321666 call _cast idxType(321663 call * stride(321661 call _cast strType(321657 call .(321656 call followThis i) c"low"))))
            (321671 'end of statement')
          }
          { scopeless
            unknown high[321688](321686 call _cast idxType(321683 call * stride(321681 call _cast strType(321677 call .(321676 call followThis i) c"high"))))
            (321691 'end of statement')
          }
          (321740 call =(321695 call t i)(321739 call(321730 call .(321728 call chpl_by(321716 call +(321704 call chpl_by(321698 call chpl_build_bounded_range low high)(321702 call _cast strType stride))(321713 call .(321712 call(321707 call . whole c"dim") i) c"alignedLow"))(321726 call _cast strType(321722 call .(321721 call followThis i) c"stride"))) c"safeCast")(321737 'typeof'(321736 call t i))))
        }
      }
      label _unused_continueLabel[321748]
      label _breakLabel[321747]
    }
    {
      unknown _indexOfInterest[321790] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[321791] "expr temp" "temp"
      (321800 'move' _iterator[321791](321798 call _getIterator(321784 call chpl__buildDomainExpr(321782 'expand_tuple' t))))
      Defer
      {
        {
          (321817 call _freeIterator _iterator[321791])
        }
      }
      { scopeless type
        (321806 'move' _indexOfInterest[321790](321803 call iteratorIndex _iterator[321791]))
      }
      ForLoop[321792]
      {
        unknown i[321810] "index var" "insert auto destroy"
        (321812 'move' i[321810] _indexOfInterest[321790])
        {
          (321787 yield i)
        }
        label _continueLabel[321795]
        _indexOfInterest[321790]
        _iterator[321791]
      }
      label _breakLabel[321796]
    }
  }
  where {
    (321516 call == tag(321513 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialWrite[321832](arg _mt[321837]:_MT[238], arg this[321834] :
  BlockDom, arg x[321830]:_any[178](?)) : _unknown[51] "method"
  {
    (321841 call <~> x whole)
  }
  function _unknown[51].dsiBuildArray[321852](arg _mt[321861]:_MT[238], arg this[321858] :
  BlockDom, arg eltType[321850]:_any[178](?), param arg initElts[321855] :
  bool[10]) : _unknown[51] "method"
  {
    { scopeless
      const dom[321864] "const" this
      (321867 'end of statement')
    }
    { scopeless
      const creationLocale[321873] "const"(321870 call . here c"id")
      (321876 'end of statement')
    }
    { scopeless
      const dummyLBD[321886] "const"(321879 'new'(_chpl_manager = unmanaged[220](?))(321885 call LocBlockDom rank idxType stridable))
      (321889 'end of statement')
    }
    { scopeless
      const dummyLBA[321902] "const"(321892 'new'(_chpl_manager = unmanaged[220](?))(321901 call LocBlockArr eltType rank idxType stridable dummyLBD 0))
      (321905 'end of statement')
    }
    { scopeless
      unknown locArrTemp[321927] dummyLBA(321924 call chpl__buildArrayRuntimeType(321922 call chpl__ensureDomainExpr(321910 call .(321907 call . dom c"dist") c"targetLocDom"))(321921 'to unmanaged class from unknown'(321920 call LocBlockArr eltType rank idxType stridable)))
      (321930 'end of statement')
    }
    { scopeless
      unknown myLocArrTemp[321940](321939 'to unmanaged class from unknown'(321938 'to nilable class from type'(321937 call LocBlockArr eltType rank idxType stridable)))
      (321943 'end of statement')
    }
    {
      unknown tmpIter[322033] "expr temp" "maybe ref" "no copy" "temp"
      (322036 'move' tmpIter[322033](321949 call .(321946 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[322234] "maybe param" "temp"
      (322249 'move' isRngDomArr[322234](322247 call ||(322236 call isBoundedRange tmpIter[322033])(322245 call ||(322239 call isDomain tmpIter[322033])(322242 call isArray tmpIter[322033]))))
      if isRngDomArr[322234]
      {
        const _coforallCount[322106] "const" "end count" "temp"
        (322171 'move' _coforallCount[322106](322168 call _endCountAlloc 0))
        unknown numTasks[322107] "temp"
        (322155 'move' numTasks[322107](322151 call . tmpIter[322033] c"size"))
        (322146 call _upEndCount _coforallCount[322106] 0 numTasks[322107])
        unknown _indexOfInterest[322113] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322114] "expr temp" "temp"
        (322123 'move' _iterator[322114](322121 call _getIterator tmpIter[322033]))
        Defer
        {
          {
            (322139 call _freeIterator _iterator[322114])
          }
        }
        { scopeless type
          (322128 'move' _indexOfInterest[322113](322125 call iteratorIndex _iterator[322114]))
        }
        ForLoop[322115]
        {
          unknown localeIdx[322132] "coforall index var" "index var" "insert auto destroy"
          (322134 'move' localeIdx[322132] _indexOfInterest[322113])
          { scopeless
            { scopeless
              const tmp[322042] "const" "temp"
              (322044 'move' tmp[322042](322046 'deref'(322047 '_wide_get_locale'(322055 call(322049 call .(322051 call . dom c"dist") c"targetLocales") localeIdx))))
              {
                {
                  { scopeless
                    const LBA[322063] "const"(322064 'new'(_chpl_manager = unmanaged[220](?))(322068 call LocBlockArr eltType rank idxType stridable(322077 call(322074 call . dom c"getLocDom") localeIdx)(initElts = initElts)))
                    (322082 'end of statement')
                  }
                  (322084 call =(322086 call locArrTemp localeIdx) LBA)
                  if(322090 call _cond_test(322092 call ==(322094 call . here c"id") creationLocale))
                  {
                    { scopeless
                      (322101 call = myLocArrTemp LBA)
                    }
                  }
                }
                (322108 call _downEndCount _coforallCount[322106] nil[44])
                (322058 'coforall on block' 0 tmp[322042])
                (322038 'actuals list' tiMarkRef[294] myLocArrTemp)
              }
            }
          }
          label _continueLabel[322118]
          _indexOfInterest[322113]
          _iterator[322114]
        }
        label _breakLabel[322119]
        Defer
        {
          {
            (322158 call _endCountFree _coforallCount[322106])
          }
        }
        (322163 call _waitEndCount _coforallCount[322106] 0 numTasks[322107])
      }
      {
        const _coforallCount[322175] "const" "end count" "temp"
        (322231 'move' _coforallCount[322175](322228 call _endCountAlloc 0))
        unknown _indexOfInterest[322182] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322183] "expr temp" "temp"
        (322192 'move' _iterator[322183](322190 call _getIterator tmpIter[322033]))
        Defer
        {
          {
            (322208 call _freeIterator _iterator[322183])
          }
        }
        { scopeless type
          (322197 'move' _indexOfInterest[322182](322194 call iteratorIndex _iterator[322183]))
        }
        ForLoop[322184]
        {
          unknown localeIdx[322201] "coforall index var" "index var" "insert auto destroy"
          (322203 'move' localeIdx[322201] _indexOfInterest[322182])
          (322215 call _upEndCount _coforallCount[322175] 0)
          { scopeless
            { scopeless
              const tmp[322024] "const" "temp"
              (322026 'move' tmp[322024](322022 'deref'(322021 '_wide_get_locale'(321969 call(321964 call .(321961 call . dom c"dist") c"targetLocales") localeIdx))))
              {
                {
                  { scopeless
                    const LBA[321991] "const"(321972 'new'(_chpl_manager = unmanaged[220](?))(321990 call LocBlockArr eltType rank idxType stridable(321987 call(321982 call . dom c"getLocDom") localeIdx)(initElts = initElts)))
                    (321994 'end of statement')
                  }
                  (322001 call =(321999 call locArrTemp localeIdx) LBA)
                  if(322016 call _cond_test(322009 call ==(322005 call . here c"id") creationLocale))
                  {
                    { scopeless
                      (322013 call = myLocArrTemp LBA)
                    }
                  }
                }
                (322177 call _downEndCount _coforallCount[322175] nil[44])
                (322029 'coforall on block' 0 tmp[322024])
                (321957 'actuals list' tiMarkRef[294] myLocArrTemp)
              }
            }
          }
          label _continueLabel[322187]
          _indexOfInterest[322182]
          _iterator[322183]
        }
        label _breakLabel[322188]
        Defer
        {
          {
            (322219 call _endCountFree _coforallCount[322175])
          }
        }
        (322224 call _waitEndCount _coforallCount[322175] 0)
      }
    }
    (322256 call chpl__delete dummyLBA dummyLBD)
    { scopeless
      unknown arr[322284](322261 'new'(_chpl_manager = unmanaged[220](?))(322283 call BlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom =(322277 call _to_unmanaged dom))(locArr = locArrTemp)(myLocArr = myLocArrTemp)))
      (322287 'end of statement')
    }
    if(322306 call _cond_test(322295 call &&(322291 call . arr c"doRADOpt") disableBlockLazyRAD))
    {
      { scopeless
        (322304 call(322300 call . arr c"setupRADOpt"))
      }
    }
    (322312 return arr)
  }
  function _unknown[51].dsiNumIndices[322319](arg _mt[322324]:_MT[238], arg this[322321] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322330 return(322327 call . whole c"size"))
    }
  }
  function _unknown[51].dsiLow[322338](arg _mt[322343]:_MT[238], arg this[322340] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322349 return(322346 call . whole c"low"))
    }
  }
  function _unknown[51].dsiHigh[322357](arg _mt[322362]:_MT[238], arg this[322359] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322368 return(322365 call . whole c"high"))
    }
  }
  function _unknown[51].dsiStride[322376](arg _mt[322381]:_MT[238], arg this[322378] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322387 return(322384 call . whole c"stride"))
    }
  }
  function _unknown[51].dsiAlignedLow[322395](arg _mt[322400]:_MT[238], arg this[322397] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322406 return(322403 call . whole c"alignedLow"))
    }
  }
  function _unknown[51].dsiAlignedHigh[322414](arg _mt[322419]:_MT[238], arg this[322416] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322425 return(322422 call . whole c"alignedHigh"))
    }
  }
  function _unknown[51].dsiAlignment[322433](arg _mt[322438]:_MT[238], arg this[322435] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322444 return(322441 call . whole c"alignment"))
    }
  }
  function _unknown[51].dsiSetIndices[322456](arg _mt[322461]:_MT[238], arg this[322458] :
  BlockDom, arg x[322453] :
  _domain) : _unknown[51] "method"
  {
    if(322475 call _cond_test(322468 call !=(322464 call . x c"rank") rank))
    {
      { scopeless
        (322473 call compilerError "rank mismatch in domain assignment")
      }
    }
    if(322496 call _cond_test(322489 call !=(322485 call .(322482 call . x c"_value") c"idxType") idxType))
    {
      { scopeless
        (322494 call compilerError "index type mismatch in domain assignment")
      }
    }
    (322503 call = whole x)
    (322508 call setup)
    if(322537 call _cond_test debugBlockDist)
    {
      (322530 call writeln "Setting indices of Block domain:")
      (322535 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiSetIndices[322548](arg _mt[322553]:_MT[238], arg this[322550] :
  BlockDom, arg x[322546]:_any[178](?)) : _unknown[51] "method"
  {
    if(322567 call _cond_test(322560 call !=(322556 call . x c"size") rank))
    {
      { scopeless
        (322565 call compilerError "rank mismatch in domain assignment")
      }
    }
    if(322588 call _cond_test(322581 call !=(322577 call .(322576 call x 0) c"idxType") idxType))
    {
      { scopeless
        (322586 call compilerError "index type mismatch in domain assignment")
      }
    }
    (322599 call(322594 call . whole c"setIndices") x)
    (322603 call setup)
    if(322616 call _cond_test debugBlockDist)
    {
      (322609 call writeln "Setting indices of Block domain:")
      (322614 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiGetIndices[322625](arg _mt[322630]:_MT[238], arg this[322627] :
  BlockDom) : _unknown[51] "method"
  {
    (322638 return(322637 call(322633 call . whole c"getIndices")))
  }
  function _unknown[51].dsiAssignDomain[322650](arg _mt[322659]:_MT[238], arg this[322656] :
  BlockDom, arg rhs[322647] :
  _domain, arg lhsPrivate[322653] :
  bool[10]) : _unknown[51] "method"
  {
    (322665 call chpl_assignDomainWithGetSetIndices this rhs)
  }
  function _unknown[51].dsiLocalSlice[322677](arg _mt[322684]:_MT[238], arg this[322681] :
  BlockDom, param arg stridable[322674] :
  bool[10], arg ranges[322679]:_any[178](?)) : _unknown[51] "method"
  {
    (322691 return(322690 call whole(322688 'expand_tuple' ranges)))
  }
  function _unknown[51].setup[322699](arg _mt[322704]:_MT[238], arg this[322701] :
  BlockDom) : _unknown[51] "method"
  {
    {
      unknown tmpIter[322748] "expr temp" "maybe ref" "no copy" "temp"
      (322751 'move' tmpIter[322748](322708 call . dist c"targetLocDom"))
      unknown isRngDomArr[322915] "maybe param" "temp"
      (322930 'move' isRngDomArr[322915](322928 call ||(322917 call isBoundedRange tmpIter[322748])(322926 call ||(322920 call isDomain tmpIter[322748])(322923 call isArray tmpIter[322748]))))
      if isRngDomArr[322915]
      {
        const _coforallCount[322787] "const" "end count" "temp"
        (322852 'move' _coforallCount[322787](322849 call _endCountAlloc 0))
        unknown numTasks[322788] "temp"
        (322836 'move' numTasks[322788](322832 call . tmpIter[322748] c"size"))
        (322827 call _upEndCount _coforallCount[322787] 0 numTasks[322788])
        unknown _indexOfInterest[322794] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322795] "expr temp" "temp"
        (322804 'move' _iterator[322795](322802 call _getIterator tmpIter[322748]))
        Defer
        {
          {
            (322820 call _freeIterator _iterator[322795])
          }
        }
        { scopeless type
          (322809 'move' _indexOfInterest[322794](322806 call iteratorIndex _iterator[322795]))
        }
        ForLoop[322796]
        {
          unknown localeIdx[322813] "coforall index var" "index var" "insert auto destroy"
          (322815 'move' localeIdx[322813] _indexOfInterest[322794])
          { scopeless
            { scopeless
              const tmp[322754] "const" "temp"
              (322756 'move' tmp[322754](322758 'deref'(322759 '_wide_get_locale'(322764 call(322761 call . dist c"targetLocales") localeIdx))))
              {
                { scopeless
                  (322772 call =(322774 call .(322776 call locDoms localeIdx) c"myBlock")(322783 call(322780 call . dist c"getChunk") whole localeIdx))
                }
                (322789 call _downEndCount _coforallCount[322787] nil[44])
                (322767 'coforall on block' 0 tmp[322754])
              }
            }
          }
          label _continueLabel[322799]
          _indexOfInterest[322794]
          _iterator[322795]
        }
        label _breakLabel[322800]
        Defer
        {
          {
            (322839 call _endCountFree _coforallCount[322787])
          }
        }
        (322844 call _waitEndCount _coforallCount[322787] 0 numTasks[322788])
      }
      {
        const _coforallCount[322856] "const" "end count" "temp"
        (322912 'move' _coforallCount[322856](322909 call _endCountAlloc 0))
        unknown _indexOfInterest[322863] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322864] "expr temp" "temp"
        (322873 'move' _iterator[322864](322871 call _getIterator tmpIter[322748]))
        Defer
        {
          {
            (322889 call _freeIterator _iterator[322864])
          }
        }
        { scopeless type
          (322878 'move' _indexOfInterest[322863](322875 call iteratorIndex _iterator[322864]))
        }
        ForLoop[322865]
        {
          unknown localeIdx[322882] "coforall index var" "index var" "insert auto destroy"
          (322884 'move' localeIdx[322882] _indexOfInterest[322863])
          (322896 call _upEndCount _coforallCount[322856] 0)
          { scopeless
            { scopeless
              const tmp[322739] "const" "temp"
              (322741 'move' tmp[322739](322737 'deref'(322736 '_wide_get_locale'(322717 call(322712 call . dist c"targetLocales") localeIdx))))
              {
                { scopeless
                  (322733 call =(322722 call .(322721 call locDoms localeIdx) c"myBlock")(322732 call(322726 call . dist c"getChunk") whole localeIdx))
                }
                (322858 call _downEndCount _coforallCount[322856] nil[44])
                (322744 'coforall on block' 0 tmp[322739])
              }
            }
          }
          label _continueLabel[322868]
          _indexOfInterest[322863]
          _iterator[322864]
        }
        label _breakLabel[322869]
        Defer
        {
          {
            (322900 call _endCountFree _coforallCount[322856])
          }
        }
        (322905 call _waitEndCount _coforallCount[322856] 0)
      }
    }
  }
  function _unknown[51].dsiDestroyDom[322940](arg _mt[322945]:_MT[238], arg this[322942] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[322976] "expr temp" "maybe ref" "no copy" "temp"
      (322979 'move' tmpIter[322976](322949 call . dist c"targetLocDom"))
      unknown isRngDomArr[323130] "maybe param" "temp"
      (323145 'move' isRngDomArr[323130](323143 call ||(323132 call isBoundedRange tmpIter[322976])(323141 call ||(323135 call isDomain tmpIter[322976])(323138 call isArray tmpIter[322976]))))
      if isRngDomArr[323130]
      {
        const _coforallCount[323002] "const" "end count" "temp"
        (323067 'move' _coforallCount[323002](323064 call _endCountAlloc 0))
        unknown numTasks[323003] "temp"
        (323051 'move' numTasks[323003](323047 call . tmpIter[322976] c"size"))
        (323042 call _upEndCount _coforallCount[323002] 0 numTasks[323003])
        unknown _indexOfInterest[323009] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323010] "expr temp" "temp"
        (323019 'move' _iterator[323010](323017 call _getIterator tmpIter[322976]))
        Defer
        {
          {
            (323035 call _freeIterator _iterator[323010])
          }
        }
        { scopeless type
          (323024 'move' _indexOfInterest[323009](323021 call iteratorIndex _iterator[323010]))
        }
        ForLoop[323011]
        {
          unknown localeIdx[323028] "coforall index var" "index var" "insert auto destroy"
          (323030 'move' localeIdx[323028] _indexOfInterest[323009])
          { scopeless
            { scopeless
              const tmp[322982] "const" "temp"
              (322984 'move' tmp[322982](322986 'deref'(322987 '_wide_get_locale'(322989 call locDoms localeIdx))))
              {
                { scopeless
                  (322997 call chpl__delete(322999 call locDoms localeIdx))
                }
                (323004 call _downEndCount _coforallCount[323002] nil[44])
                (322992 'coforall on block' 0 tmp[322982])
              }
            }
          }
          label _continueLabel[323014]
          _indexOfInterest[323009]
          _iterator[323010]
        }
        label _breakLabel[323015]
        Defer
        {
          {
            (323054 call _endCountFree _coforallCount[323002])
          }
        }
        (323059 call _waitEndCount _coforallCount[323002] 0 numTasks[323003])
      }
      {
        const _coforallCount[323071] "const" "end count" "temp"
        (323127 'move' _coforallCount[323071](323124 call _endCountAlloc 0))
        unknown _indexOfInterest[323078] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323079] "expr temp" "temp"
        (323088 'move' _iterator[323079](323086 call _getIterator tmpIter[322976]))
        Defer
        {
          {
            (323104 call _freeIterator _iterator[323079])
          }
        }
        { scopeless type
          (323093 'move' _indexOfInterest[323078](323090 call iteratorIndex _iterator[323079]))
        }
        ForLoop[323080]
        {
          unknown localeIdx[323097] "coforall index var" "index var" "insert auto destroy"
          (323099 'move' localeIdx[323097] _indexOfInterest[323078])
          (323111 call _upEndCount _coforallCount[323071] 0)
          { scopeless
            { scopeless
              const tmp[322967] "const" "temp"
              (322969 'move' tmp[322967](322965 'deref'(322964 '_wide_get_locale'(322955 call locDoms localeIdx))))
              {
                { scopeless
                  (322961 call chpl__delete(322959 call locDoms localeIdx))
                }
                (323073 call _downEndCount _coforallCount[323071] nil[44])
                (322972 'coforall on block' 0 tmp[322967])
              }
            }
          }
          label _continueLabel[323083]
          _indexOfInterest[323078]
          _iterator[323079]
        }
        label _breakLabel[323084]
        Defer
        {
          {
            (323115 call _endCountFree _coforallCount[323071])
          }
        }
        (323120 call _waitEndCount _coforallCount[323071] 0)
      }
    }
  }
  function _unknown[51].dsiMember[323157](arg _mt[323162]:_MT[238], arg this[323159] :
  BlockDom, arg i[323155]:_any[178](?)) : _unknown[51] "method"
  {
    (323171 return(323170 call(323165 call . whole c"contains") i))
  }
  function _unknown[51].dsiIndexOrder[323181](arg _mt[323186]:_MT[238], arg this[323183] :
  BlockDom, arg i[323179]:_any[178](?)) : _unknown[51] "method"
  {
    (323195 return(323194 call(323189 call . whole c"indexOrder") i))
  }
  function _unknown[51].contains[323205](arg _mt[323210]:_MT[238], arg this[323207] :
  LocBlockDom, arg i[323203]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (323219 return(323218 call(323213 call . myBlock c"contains") i))
    }
  }
  function _unknown[51].dsiDisplayRepresentation[323227](arg _mt[323232]:_MT[238], arg this[323229] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown _indexOfInterest[323340] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[323341] "expr temp" "temp"
      (323350 'move' _iterator[323341](323348 call _getIterator(323239 call .(323236 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (323367 call _freeIterator _iterator[323341])
        }
      }
      { scopeless type
        (323356 'move' _indexOfInterest[323340](323353 call iteratorIndex _iterator[323341]))
      }
      ForLoop[323342]
      {
        unknown tli[323360] "index var" "insert auto destroy"
        (323362 'move' tli[323360] _indexOfInterest[323340])
        {
          (323292 call writeln "locArr[" tli "].myElems = "(323288 for  e  in (323284 call .(323283 call locArr tli) c"myElems") do
          {
            e
          } ))
          if(323335 call _cond_test doRADOpt)
          {
            { scopeless
              (323333 call writeln "locArr[" tli "].locRAD = "(323330 call .(323326 call postfix!(323323 call .(323320 call locArr tli) c"locRAD")) c"RAD"))
            }
          }
        }
        label _continueLabel[323345]
        _indexOfInterest[323340]
        _iterator[323341]
      }
      label _breakLabel[323346]
    }
  }
  function _unknown[51].dsiGetBaseDom[323380](arg _mt[323385]:_MT[238], arg this[323382] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (323388 return dom)
    }
  }
  function _unknown[51].setupRADOpt[323396](arg _mt[323401]:_MT[238], arg this[323398] :
  BlockArr) : _unknown[51] "method"
  {
    {
      unknown _indexOfInterest[323582] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[323583] "expr temp" "temp"
      (323592 'move' _iterator[323583](323590 call _getIterator(323408 call .(323405 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (323609 call _freeIterator _iterator[323583])
        }
      }
      { scopeless type
        (323598 'move' _indexOfInterest[323582](323595 call iteratorIndex _iterator[323583]))
      }
      ForLoop[323584]
      {
        unknown localeIdx[323602] "index var" "insert auto destroy"
        (323604 'move' localeIdx[323602] _indexOfInterest[323582])
        {
          { scopeless
            const tmp[323573] "const" "temp"
            (323575 'move' tmp[323573](323571 'deref'(323570 '_wide_get_locale'(323420 call(323415 call .(323412 call . dom c"dist") c"targetLocales") localeIdx))))
            {
              {
                { scopeless
                  const myLocArr[323425] "const"(323424 call locArr localeIdx)
                  (323428 'end of statement')
                }
                if(323454 call _cond_test(323435 call !=(323431 call . myLocArr c"locRAD") nil[44]))
                {
                  (323442 call chpl__delete(323438 call . myLocArr c"locRAD"))
                  (323451 call =(323447 call . myLocArr c"locRAD") nil[44])
                }
                if(323566 call _cond_test disableBlockLazyRAD)
                {
                  (323480 call =(323460 call . myLocArr c"locRAD")(323465 'new'(_chpl_manager = unmanaged[220](?))(323479 call LocRADCache eltType rank idxType stridable(323476 call .(323473 call . dom c"dist") c"targetLocDom"))))
                  {
                    unknown _indexOfInterest[323532] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[323533] "expr temp" "temp"
                    (323542 'move' _iterator[323533](323540 call _getIterator(323489 call .(323486 call . dom c"dist") c"targetLocDom")))
                    Defer
                    {
                      {
                        (323559 call _freeIterator _iterator[323533])
                      }
                    }
                    { scopeless type
                      (323548 'move' _indexOfInterest[323532](323545 call iteratorIndex _iterator[323533]))
                    }
                    ForLoop[323534]
                    {
                      unknown l[323552] "index var" "insert auto destroy"
                      (323554 'move' l[323552] _indexOfInterest[323532])
                      {
                        if(323527 call _cond_test(323494 call != l localeIdx))
                        {
                          (323523 call =(323507 call(323502 call .(323500 call postfix!(323497 call . myLocArr c"locRAD")) c"RAD") l)(323522 call(323518 call .(323515 call .(323512 call .(323511 call locArr l) c"myElems") c"_value") c"dsiGetRAD")))
                        }
                      }
                      label _continueLabel[323537]
                      _indexOfInterest[323532]
                      _iterator[323533]
                    }
                    label _breakLabel[323538]
                  }
                }
              }
              (323578 'on block' 0 tmp[323573])
            }
          }
        }
        label _continueLabel[323587]
        _indexOfInterest[323582]
        _iterator[323583]
      }
      label _breakLabel[323588]
    }
  }
  function _unknown[51].dsiElementInitializationComplete[323622](arg _mt[323627]:_MT[238], arg this[323624] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[323667] "expr temp" "maybe ref" "no copy" "temp"
      (323670 'move' tmpIter[323667](323634 call .(323631 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[323826] "maybe param" "temp"
      (323841 'move' isRngDomArr[323826](323839 call ||(323828 call isBoundedRange tmpIter[323667])(323837 call ||(323831 call isDomain tmpIter[323667])(323834 call isArray tmpIter[323667]))))
      if isRngDomArr[323826]
      {
        const _coforallCount[323698] "const" "end count" "temp"
        (323763 'move' _coforallCount[323698](323760 call _endCountAlloc 0))
        unknown numTasks[323699] "temp"
        (323747 'move' numTasks[323699](323743 call . tmpIter[323667] c"size"))
        (323738 call _upEndCount _coforallCount[323698] 0 numTasks[323699])
        unknown _indexOfInterest[323705] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323706] "expr temp" "temp"
        (323715 'move' _iterator[323706](323713 call _getIterator tmpIter[323667]))
        Defer
        {
          {
            (323731 call _freeIterator _iterator[323706])
          }
        }
        { scopeless type
          (323720 'move' _indexOfInterest[323705](323717 call iteratorIndex _iterator[323706]))
        }
        ForLoop[323707]
        {
          unknown localeIdx[323724] "coforall index var" "index var" "insert auto destroy"
          (323726 'move' localeIdx[323724] _indexOfInterest[323705])
          { scopeless
            { scopeless
              const tmp[323673] "const" "temp"
              (323675 'move' tmp[323673](323677 'deref'(323678 '_wide_get_locale'(323680 call locArr localeIdx))))
              {
                {
                  (323696 call(323688 call .(323690 call .(323692 call locArr localeIdx) c"myElems") c"dsiElementInitializationComplete"))
                }
                (323700 call _downEndCount _coforallCount[323698] nil[44])
                (323683 'coforall on block' 0 tmp[323673])
              }
            }
          }
          label _continueLabel[323710]
          _indexOfInterest[323705]
          _iterator[323706]
        }
        label _breakLabel[323711]
        Defer
        {
          {
            (323750 call _endCountFree _coforallCount[323698])
          }
        }
        (323755 call _waitEndCount _coforallCount[323698] 0 numTasks[323699])
      }
      {
        const _coforallCount[323767] "const" "end count" "temp"
        (323823 'move' _coforallCount[323767](323820 call _endCountAlloc 0))
        unknown _indexOfInterest[323774] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323775] "expr temp" "temp"
        (323784 'move' _iterator[323775](323782 call _getIterator tmpIter[323667]))
        Defer
        {
          {
            (323800 call _freeIterator _iterator[323775])
          }
        }
        { scopeless type
          (323789 'move' _indexOfInterest[323774](323786 call iteratorIndex _iterator[323775]))
        }
        ForLoop[323776]
        {
          unknown localeIdx[323793] "coforall index var" "index var" "insert auto destroy"
          (323795 'move' localeIdx[323793] _indexOfInterest[323774])
          (323807 call _upEndCount _coforallCount[323767] 0)
          { scopeless
            { scopeless
              const tmp[323658] "const" "temp"
              (323660 'move' tmp[323658](323656 'deref'(323655 '_wide_get_locale'(323640 call locArr localeIdx))))
              {
                {
                  (323652 call(323648 call .(323645 call .(323644 call locArr localeIdx) c"myElems") c"dsiElementInitializationComplete"))
                }
                (323769 call _downEndCount _coforallCount[323767] nil[44])
                (323663 'coforall on block' 0 tmp[323658])
              }
            }
          }
          label _continueLabel[323779]
          _indexOfInterest[323774]
          _iterator[323775]
        }
        label _breakLabel[323780]
        Defer
        {
          {
            (323811 call _endCountFree _coforallCount[323767])
          }
        }
        (323816 call _waitEndCount _coforallCount[323767] 0)
      }
    }
  }
  function _unknown[51].dsiElementDeinitializationComplete[323851](arg _mt[323856]:_MT[238], arg this[323853] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[323896] "expr temp" "maybe ref" "no copy" "temp"
      (323899 'move' tmpIter[323896](323863 call .(323860 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[324055] "maybe param" "temp"
      (324070 'move' isRngDomArr[324055](324068 call ||(324057 call isBoundedRange tmpIter[323896])(324066 call ||(324060 call isDomain tmpIter[323896])(324063 call isArray tmpIter[323896]))))
      if isRngDomArr[324055]
      {
        const _coforallCount[323927] "const" "end count" "temp"
        (323992 'move' _coforallCount[323927](323989 call _endCountAlloc 0))
        unknown numTasks[323928] "temp"
        (323976 'move' numTasks[323928](323972 call . tmpIter[323896] c"size"))
        (323967 call _upEndCount _coforallCount[323927] 0 numTasks[323928])
        unknown _indexOfInterest[323934] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323935] "expr temp" "temp"
        (323944 'move' _iterator[323935](323942 call _getIterator tmpIter[323896]))
        Defer
        {
          {
            (323960 call _freeIterator _iterator[323935])
          }
        }
        { scopeless type
          (323949 'move' _indexOfInterest[323934](323946 call iteratorIndex _iterator[323935]))
        }
        ForLoop[323936]
        {
          unknown localeIdx[323953] "coforall index var" "index var" "insert auto destroy"
          (323955 'move' localeIdx[323953] _indexOfInterest[323934])
          { scopeless
            { scopeless
              const tmp[323902] "const" "temp"
              (323904 'move' tmp[323902](323906 'deref'(323907 '_wide_get_locale'(323909 call locArr localeIdx))))
              {
                {
                  (323925 call(323917 call .(323919 call .(323921 call locArr localeIdx) c"myElems") c"dsiElementDeinitializationComplete"))
                }
                (323929 call _downEndCount _coforallCount[323927] nil[44])
                (323912 'coforall on block' 0 tmp[323902])
              }
            }
          }
          label _continueLabel[323939]
          _indexOfInterest[323934]
          _iterator[323935]
        }
        label _breakLabel[323940]
        Defer
        {
          {
            (323979 call _endCountFree _coforallCount[323927])
          }
        }
        (323984 call _waitEndCount _coforallCount[323927] 0 numTasks[323928])
      }
      {
        const _coforallCount[323996] "const" "end count" "temp"
        (324052 'move' _coforallCount[323996](324049 call _endCountAlloc 0))
        unknown _indexOfInterest[324003] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324004] "expr temp" "temp"
        (324013 'move' _iterator[324004](324011 call _getIterator tmpIter[323896]))
        Defer
        {
          {
            (324029 call _freeIterator _iterator[324004])
          }
        }
        { scopeless type
          (324018 'move' _indexOfInterest[324003](324015 call iteratorIndex _iterator[324004]))
        }
        ForLoop[324005]
        {
          unknown localeIdx[324022] "coforall index var" "index var" "insert auto destroy"
          (324024 'move' localeIdx[324022] _indexOfInterest[324003])
          (324036 call _upEndCount _coforallCount[323996] 0)
          { scopeless
            { scopeless
              const tmp[323887] "const" "temp"
              (323889 'move' tmp[323887](323885 'deref'(323884 '_wide_get_locale'(323869 call locArr localeIdx))))
              {
                {
                  (323881 call(323877 call .(323874 call .(323873 call locArr localeIdx) c"myElems") c"dsiElementDeinitializationComplete"))
                }
                (323998 call _downEndCount _coforallCount[323996] nil[44])
                (323892 'coforall on block' 0 tmp[323887])
              }
            }
          }
          label _continueLabel[324008]
          _indexOfInterest[324003]
          _iterator[324004]
        }
        label _breakLabel[324009]
        Defer
        {
          {
            (324040 call _endCountFree _coforallCount[323996])
          }
        }
        (324045 call _waitEndCount _coforallCount[323996] 0)
      }
    }
  }
  function _unknown[51].dsiDestroyArr[324084](arg _mt[324089]:_MT[238], arg this[324086] :
  BlockArr, arg deinitElts[324081] :
  bool[10]) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[324153] "expr temp" "maybe ref" "no copy" "temp"
      (324156 'move' tmpIter[324153](324096 call .(324093 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[324332] "maybe param" "temp"
      (324347 'move' isRngDomArr[324332](324345 call ||(324334 call isBoundedRange tmpIter[324153])(324343 call ||(324337 call isDomain tmpIter[324153])(324340 call isArray tmpIter[324153]))))
      if isRngDomArr[324332]
      {
        const _coforallCount[324204] "const" "end count" "temp"
        (324269 'move' _coforallCount[324204](324266 call _endCountAlloc 0))
        unknown numTasks[324205] "temp"
        (324253 'move' numTasks[324205](324249 call . tmpIter[324153] c"size"))
        (324244 call _upEndCount _coforallCount[324204] 0 numTasks[324205])
        unknown _indexOfInterest[324211] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324212] "expr temp" "temp"
        (324221 'move' _iterator[324212](324219 call _getIterator tmpIter[324153]))
        Defer
        {
          {
            (324237 call _freeIterator _iterator[324212])
          }
        }
        { scopeless type
          (324226 'move' _indexOfInterest[324211](324223 call iteratorIndex _iterator[324212]))
        }
        ForLoop[324213]
        {
          unknown localeIdx[324230] "coforall index var" "index var" "insert auto destroy"
          (324232 'move' localeIdx[324230] _indexOfInterest[324211])
          { scopeless
            { scopeless
              const tmp[324159] "const" "temp"
              (324161 'move' tmp[324159](324163 'deref'(324164 '_wide_get_locale'(324166 call locArr localeIdx))))
              {
                {
                  { scopeless
                    unknown arr[324174](324176 call locArr localeIdx)
                    (324179 'end of statement')
                  }
                  if(324181 call _cond_test deinitElts)
                  {
                    { scopeless
                      (324186 call _deinitElements(324188 call . arr c"myElems"))
                    }
                  }
                  (324199 call(324193 call .(324195 call . arr c"myElems") c"dsiElementDeinitializationComplete"))
                  (324201 call chpl__delete arr)
                }
                (324206 call _downEndCount _coforallCount[324204] nil[44])
                (324169 'coforall on block' 0 tmp[324159])
              }
            }
          }
          label _continueLabel[324216]
          _indexOfInterest[324211]
          _iterator[324212]
        }
        label _breakLabel[324217]
        Defer
        {
          {
            (324256 call _endCountFree _coforallCount[324204])
          }
        }
        (324261 call _waitEndCount _coforallCount[324204] 0 numTasks[324205])
      }
      {
        const _coforallCount[324273] "const" "end count" "temp"
        (324329 'move' _coforallCount[324273](324326 call _endCountAlloc 0))
        unknown _indexOfInterest[324280] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324281] "expr temp" "temp"
        (324290 'move' _iterator[324281](324288 call _getIterator tmpIter[324153]))
        Defer
        {
          {
            (324306 call _freeIterator _iterator[324281])
          }
        }
        { scopeless type
          (324295 'move' _indexOfInterest[324280](324292 call iteratorIndex _iterator[324281]))
        }
        ForLoop[324282]
        {
          unknown localeIdx[324299] "coforall index var" "index var" "insert auto destroy"
          (324301 'move' localeIdx[324299] _indexOfInterest[324280])
          (324313 call _upEndCount _coforallCount[324273] 0)
          { scopeless
            { scopeless
              const tmp[324144] "const" "temp"
              (324146 'move' tmp[324144](324142 'deref'(324141 '_wide_get_locale'(324102 call locArr localeIdx))))
              {
                {
                  { scopeless
                    unknown arr[324107](324106 call locArr localeIdx)
                    (324110 'end of statement')
                  }
                  if(324121 call _cond_test deinitElts)
                  {
                    { scopeless
                      (324119 call _deinitElements(324115 call . arr c"myElems"))
                    }
                  }
                  (324134 call(324130 call .(324127 call . arr c"myElems") c"dsiElementDeinitializationComplete"))
                  (324138 call chpl__delete arr)
                }
                (324275 call _downEndCount _coforallCount[324273] nil[44])
                (324149 'coforall on block' 0 tmp[324144])
              }
            }
          }
          label _continueLabel[324285]
          _indexOfInterest[324280]
          _iterator[324281]
        }
        label _breakLabel[324286]
        Defer
        {
          {
            (324317 call _endCountFree _coforallCount[324273])
          }
        }
        (324322 call _waitEndCount _coforallCount[324273] 0)
      }
    }
  }
  function _unknown[51].dsiLocalAccess[324364](arg _mt[324369]:_MT[238], arg this[324366] :
  BlockArr, arg i[324361] :
  (324359 call * rank idxType)) ref : _unknown[51] "inline" "method"
  {
    (324383 return(324382 call(324377 call .(324374 call _to_nonnil myLocArr) c"this") i))
  }
  function _unknown[51].dsiAccess[324398](arg _mt[324403]:_MT[238], arg this[324400] :
  BlockArr, const in arg idx[324395] :
  (324393 call * rank idxType)) ref : _unknown[51] "inline" "method"
  {
    {
      {
        if(324436 call _cond_test(324422 call &&(324407 call != myLocArr nil[44])(324421 call(324416 call .(324413 call .(324412 call _to_nonnil myLocArr) c"locDom") c"contains") idx)))
        {
          { scopeless
            (324434 return(324433 call(324428 call .(324427 call _to_nonnil myLocArr) c"this") idx))
          }
        }
      }
      (324444 'local block')
    }
    (324450 return(324449 call nonLocalAccess idx))
  }
  function _unknown[51].dsiBoundsCheck[324464](arg _mt[324469]:_MT[238], arg this[324466] :
  BlockArr, arg i[324461] :
  (324459 call * rank idxType)) : _unknown[51] "inline" "method"
  {
    (324478 return(324477 call(324472 call . dom c"dsiMember") i))
  }
  function _unknown[51].nonLocalAccess[324493](arg _mt[324498]:_MT[238], arg this[324495] :
  BlockArr, arg i[324490] :
  (324488 call * rank idxType)) ref : _unknown[51] "method" "fn unordered safe"
  {
    if(324786 call _cond_test doRADOpt)
    {
      if(324781 call _cond_test(324504 call . this c"myLocArr"))
      {
        { scopeless
          const myLocArr[324514] "const"(324513 call _to_nonnil(324509 call . this c"myLocArr"))
          (324517 'end of statement')
        }
        { scopeless
          unknown rlocIdx[324531](324530 call(324525 call .(324520 call . dom c"dist") c"targetLocsIdx") i)
          (324534 'end of statement')
        }
        if(324717 call _cond_test(324536 call ! disableBlockLazyRAD))
        {
          if(324620 call _cond_test(324543 call ==(324539 call . myLocArr c"locRAD") nil[44]))
          {
            (324555 call(324551 call .(324548 call . myLocArr c"locRADLock") c"lock"))
            if(324606 call _cond_test(324563 call ==(324559 call . myLocArr c"locRAD") nil[44]))
            {
              { scopeless
                unknown tempLocRAD[324582](324567 'new'(_chpl_manager = unmanaged[220](?))(324581 call LocRADCache eltType rank idxType stridable(324578 call .(324575 call . dom c"dist") c"targetLocDom")))
                (324585 'end of statement')
              }
              (324595 call =(324591 call .(324588 call . tempLocRAD c"RAD") c"blk") SENTINEL)
              (324603 call =(324599 call . myLocArr c"locRAD") tempLocRAD)
            }
            (324618 call(324614 call .(324611 call . myLocArr c"locRADLock") c"unlock"))
          }
          { scopeless
            const locRAD[324632] "const"(324631 call _to_nonnil(324627 call . myLocArr c"locRAD"))
            (324635 'end of statement')
          }
          if(324713 call _cond_test(324647 call ==(324643 call .(324642 call(324637 call . locRAD c"RAD") rlocIdx) c"blk") SENTINEL))
          {
            (324657 call(324652 call . locRAD c"lockRAD") rlocIdx)
            if(324699 call _cond_test(324671 call ==(324667 call .(324666 call(324661 call . locRAD c"RAD") rlocIdx) c"blk") SENTINEL))
            {
              (324695 call =(324679 call(324674 call . locRAD c"RAD") rlocIdx)(324694 call(324690 call .(324687 call .(324684 call .(324683 call locArr rlocIdx) c"myElems") c"_value") c"dsiGetRAD")))
            }
            (324711 call(324706 call . locRAD c"unlockRAD") rlocIdx)
          }
        }
        { scopeless
          unknown myLocRAD[324725] "no auto destroy" "no copy"(324722 call . myLocArr c"locRAD")
          (324728 'end of statement')
        }
        { scopeless
          unknown radata[324736] "no auto destroy" "no copy"(324733 call .(324732 call _to_nonnil myLocRAD) c"RAD")
          (324739 'end of statement')
        }
        if(324777 call _cond_test(324748 call !=(324744 call .(324743 call radata rlocIdx) c"shiftedData") nil[44]))
        {
          { scopeless
            unknown dataIdx[324760](324759 call(324754 call .(324753 call radata rlocIdx) c"getDataIndex") i)
            (324763 'end of statement')
          }
          (324775 return(324774 call(324769 call .(324768 call radata rlocIdx) c"getDataElem") dataIdx))
        }
      }
    }
    (324807 return(324806 call(324803 call locArr(324801 call(324796 call .(324793 call . dom c"dist") c"targetLocsIdx") i)) i))
  }
  function _unknown[51].dsiAccess[324820](arg _mt[324825]:_MT[238], arg this[324822] :
  BlockArr, arg i[324816] ... :
  idxType) ref : _unknown[51] "method"
  {
    { scopeless
      (324831 return(324830 call dsiAccess i))
    }
  }
  function _unknown[51].these[324839](arg _mt[324844]:_MT[238], arg this[324841] :
  BlockArr) ref : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[324854] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[324855] "expr temp" "temp"
      (324864 'move' _iterator[324855](324862 call _getIterator dom))
      Defer
      {
        {
          (324880 call _freeIterator _iterator[324855])
        }
      }
      { scopeless type
        (324869 'move' _indexOfInterest[324854](324866 call iteratorIndex _iterator[324855]))
      }
      ForLoop[324856]
      {
        unknown i[324873] "index var" "insert auto destroy"
        (324875 'move' i[324873] _indexOfInterest[324854])
        { scopeless
          (324852 yield(324851 call dsiAccess i))
        }
        label _continueLabel[324859]
        _indexOfInterest[324854]
        _iterator[324855]
      }
      label _breakLabel[324860]
    }
  }
  function _unknown[51].these[324897](arg _mt[324902]:_MT[238], arg this[324899] :
  BlockArr, param arg tag[324894] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[324922] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[324923] "expr temp" "temp"
      (324932 'move' _iterator[324923](324930 call _getIterator(324918 call(324913 call . dom c"these") tag)))
      Defer
      {
        {
          (324949 call _freeIterator _iterator[324923])
        }
      }
      { scopeless type
        (324938 'move' _indexOfInterest[324922](324935 call iteratorIndex _iterator[324923]))
      }
      ForLoop[324924]
      {
        unknown followThis[324942] "index var" "insert auto destroy"
        (324944 'move' followThis[324942] _indexOfInterest[324922])
        { scopeless
          (324920 yield followThis)
        }
        label _continueLabel[324927]
        _indexOfInterest[324922]
        _iterator[324923]
      }
      label _breakLabel[324928]
    }
  }
  where {
    (324909 call == tag(324906 call . iterKind c"leader"))
  }
  function _unknown[51].dsiStaticFastFollowCheck[324965](arg _mt[324970]:_MT[238], arg this[324967] :
  BlockArr, arg leadType[324963]:_any[178](?)) param : _unknown[51] "method" "method overrides"
  {
    if(325023 call _cond_test(324976 call isSubtype leadType BlockArr))
    {
      { scopeless
        unknown x[324979](324978 'to nilable class from type' leadType)
        (324982 'end of statement')
      }
      (325004 return(325002 call ==(324993 call _to_borrowed(324991 'typeof'(324988 call .(324986 call postfix! x) c"dom")))(325001 call _to_borrowed(324999 'typeof'(324996 call . this c"dom")))))
    }
    {
      (325020 return(325018 call ==(325009 call _to_borrowed leadType)(325017 call _to_borrowed(325015 'typeof'(325012 call . this c"dom")))))
    }
  }
  function _unknown[51].dsiDynamicFastFollowCheck[325039](arg _mt[325044]:_MT[238], arg this[325041] :
  BlockArr, arg lead[325036] :
  (325033 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method"
  {
    { scopeless
      (325056 return(325055 call(325047 call . this c"dsiDynamicFastFollowCheck")(325051 call . lead c"_dom")))
    }
  }
  function _unknown[51].dsiDynamicFastFollowCheck[325068](arg _mt[325073]:_MT[238], arg this[325070] :
  BlockArr, arg lead[325065] :
  _domain) : _unknown[51] "method"
  {
    (325109 return(325107 call &&(325090 call(325079 call .(325076 call . lead c"dist") c"dsiEqualDMaps")(325086 call .(325083 call . this c"dom") c"dist"))(325105 call ==(325095 call .(325092 call . lead c"_value") c"whole")(325102 call .(325099 call . this c"dom") c"whole"))))
  }
  function _unknown[51].these[325121](arg _mt[325134]:_MT[238], arg this[325131] :
  BlockArr, param arg tag[325118] :
  iterKind, arg followThis[325123]:_any[178](?), param arg fast[325127] :
  bool[10] =
  0) ref : _unknown[51] "iterator fn" "method"
  {
    function anyStridable[325147](arg rangeTuple[325145]:_any[178](?), param arg i[325151] :
    int[13] =
    0) param : _unknown[51]
    {
      { scopeless
        (325192 return(325189 IfExpr (325163 call == i(325161 call -(325157 call . rangeTuple c"size") 1)) then
        { scopeless
          (325169 call .(325168 call rangeTuple i) c"stridable")
        } else
        { scopeless
          (325187 call ||(325176 call .(325175 call rangeTuple i) c"stridable")(325186 call anyStridable rangeTuple(325184 call + i 1)))
        } ))
      }
    }
    if(325251 call _cond_test chpl__testParFlag)
    {
      if(325244 call _cond_test fast)
      {
        { scopeless
          (325220 call chpl__testParWriteln "Block array fast follower invoked on " followThis)
        }
      }
      {
        { scopeless
          (325242 call chpl__testParWriteln "Block array non-fast follower invoked on " followThis)
        }
      }
    }
    if(325315 call _cond_test testFastFollowerOptimization)
    {
      { scopeless
        (325313 call writeln(325310 call +(325290 IfExpr  fast then
        { scopeless
          "fast"
        } else
        { scopeless
          "regular"
        } ) " follower invoked for Block array"))
      }
    }
    { scopeless
      unknown myFollowThis[325336](325334 call * rank(325333 call range(idxType = idxType)(stridable =(325330 call || stridable(325329 call anyStridable followThis)))))
      (325339 'end of statement')
    }
    { scopeless
      unknown lowIdx[325344](325342 call * rank idxType)
      (325347 'end of statement')
    }
    {
      unknown i[325475] 0
      unknown tmp[325476] "maybe param" "temp"
      (325488 'move' tmp[325476](325486 call chpl_compute_low_param_loop_bound 0(325351 call - rank 1)))
      unknown tmp[325477] "maybe param" "temp"
      (325498 'move' tmp[325477](325496 call chpl_compute_high_param_loop_bound 0(325493 call - rank 1)))
      unknown tmp[325478] "maybe param" "temp"
      (325501 'move' tmp[325478] 1)
      ParamForLoop[325503]
      { i[325475] tmp[325476] tmp[325477] tmp[325478]
        {
          { scopeless
            unknown stride[325368](325365 call .(325364 call(325359 call .(325356 call . dom c"whole") c"dim") i) c"stride")
            (325371 'end of statement')
          }
          { scopeless
            unknown low[325389](325387 call *(325377 call .(325376 call followThis i) c"low")(325385 call _cast idxType(325383 call abs stride)))
            (325392 'end of statement')
          }
          { scopeless
            unknown high[325409](325407 call *(325397 call .(325396 call followThis i) c"high")(325405 call _cast idxType(325403 call abs stride)))
            (325412 'end of statement')
          }
          (325458 call =(325416 call myFollowThis i)(325457 call(325448 call .(325446 call chpl_by(325437 call +(325422 call chpl_by(325419 call chpl_build_bounded_range low high) stride)(325434 call .(325433 call(325428 call .(325425 call . dom c"whole") c"dim") i) c"alignedLow"))(325443 call .(325442 call followThis i) c"stride")) c"safeCast")(325455 'typeof'(325454 call myFollowThis i))))
          (325472 call =(325464 call lowIdx i)(325469 call .(325468 call myFollowThis i) c"low"))
        }
      }
      label _unused_continueLabel[325480]
      label _breakLabel[325479]
    }
    { scopeless
      const myFollowThisDom[325517] "const"(325515 call chpl__buildDomainExpr(325513 'expand_tuple' myFollowThis))
      (325520 'end of statement')
    }
    if(325676 call _cond_test fast)
    {
      { scopeless
        unknown arrSection[325535](325534 call locArr(325532 call(325527 call .(325524 call . dom c"dist") c"targetLocsIdx") lowIdx))
        (325538 'end of statement')
      }
      if(325559 call _cond_test(325549 call !=(325544 '_wide_get_node' arrSection)(325546 call . here c"id")))
      {
        { scopeless
          (325556 call = arrSection(325555 call _to_nonnil myLocArr))
        }
      }
      {
        {
          { scopeless
            const narrowArrSection[325573] "const"(325571 call _cast(325570 'to nilable class from type'(325569 'typeof' arrSection))(325567 '_wide_get_addr' arrSection))
            (325576 'end of statement')
          }
          { scopeless
            unknown myElems[325585] "ref var"(325582 call .(325581 call _to_nonnil narrowArrSection) c"myElems")
            (325588 'end of statement')
          }
          {
            unknown _indexOfInterest[325597] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[325598] "expr temp" "temp"
            (325607 'move' _iterator[325598](325605 call _getIterator myFollowThisDom))
            Defer
            {
              {
                (325623 call _freeIterator _iterator[325598])
              }
            }
            { scopeless type
              (325612 'move' _indexOfInterest[325597](325609 call iteratorIndex _iterator[325598]))
            }
            ForLoop[325599]
            {
              unknown i[325616] "index var" "insert auto destroy"
              (325618 'move' i[325616] _indexOfInterest[325597])
              { scopeless
                (325595 yield(325594 call myElems i))
              }
              label _continueLabel[325602]
              _indexOfInterest[325597]
              _iterator[325598]
            }
            label _breakLabel[325603]
          }
        }
        (325632 'local block')
      }
    }
    {
      {
        unknown _indexOfInterest[325642] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[325643] "expr temp" "temp"
        (325652 'move' _iterator[325643](325650 call _getIterator myFollowThisDom))
        Defer
        {
          {
            (325668 call _freeIterator _iterator[325643])
          }
        }
        { scopeless type
          (325657 'move' _indexOfInterest[325642](325654 call iteratorIndex _iterator[325643]))
        }
        ForLoop[325644]
        {
          unknown i[325661] "index var" "insert auto destroy"
          (325663 'move' i[325661] _indexOfInterest[325642])
          {
            (325639 yield(325638 call dsiAccess i))
          }
          label _continueLabel[325647]
          _indexOfInterest[325642]
          _iterator[325643]
        }
        label _breakLabel[325648]
      }
    }
  }
  where {
    (325141 call == tag(325138 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialRead[325688](arg _mt[325693]:_MT[238], arg this[325690] :
  BlockArr, arg f[325686]:_any[178](?)) : _unknown[51] "method"
  {
    (325699 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiSerialWrite[325709](arg _mt[325714]:_MT[238], arg this[325711] :
  BlockArr, arg f[325707]:_any[178](?)) : _unknown[51] "method"
  {
    (325720 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiLocalSlice[325730](arg _mt[325735]:_MT[238], arg this[325732] :
  BlockArr, arg ranges[325728]:_any[178](?)) : _unknown[51] "method" "no copy return"
  {
    { scopeless
      unknown low[325741](325739 call * rank idxType)
      (325744 'end of statement')
    }
    {
      unknown i[325768] 0
      unknown tmp[325769] "maybe param" "temp"
      (325781 'move' tmp[325769](325779 call chpl_compute_low_param_loop_bound 0(325749 call - rank 1)))
      unknown tmp[325770] "maybe param" "temp"
      (325791 'move' tmp[325770](325789 call chpl_compute_high_param_loop_bound 0(325786 call - rank 1)))
      unknown tmp[325771] "maybe param" "temp"
      (325794 'move' tmp[325771] 1)
      ParamForLoop[325796]
      { i[325768] tmp[325769] tmp[325770] tmp[325771]
        {
          (325764 call =(325756 call low i)(325761 call .(325760 call ranges i) c"alignedLow"))
        }
      }
      label _unused_continueLabel[325773]
      label _breakLabel[325772]
    }
    (325825 return(325824 call(325818 call .(325817 call locArr(325815 call(325810 call .(325807 call . dom c"dist") c"targetLocsIdx") low)) c"myElems")(325822 'expand_tuple' ranges)))
  }
  function _extendTuple[325833](arg t[325831]:_any[178](?), arg idx[325836] :
  _tuple, arg args[325839]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[325848](325846 call *(325842 call . args c"size") t)
      (325851 'end of statement')
    }
    { scopeless
      unknown j[325855] 1 int[13]
      (325858 'end of statement')
    }
    {
      unknown i[325910] 0
      unknown tmp[325911] "maybe param" "temp"
      (325923 'move' tmp[325911](325921 call chpl_compute_low_param_loop_bound 0(325865 call -(325861 call . args c"size") 1)))
      unknown tmp[325912] "maybe param" "temp"
      (325936 'move' tmp[325912](325934 call chpl_compute_high_param_loop_bound 0(325928 call -(325930 call . args c"size") 1)))
      unknown tmp[325913] "maybe param" "temp"
      (325939 'move' tmp[325913] 1)
      ParamForLoop[325941]
      { i[325910] tmp[325911] tmp[325912] tmp[325913]
        {
          if(325904 call _cond_test(325875 call isCollapsedDimension(325873 call args i)))
          {
            { scopeless
              (325884 call =(325879 call tup i)(325883 call args i))
            }
          }
          {
            (325895 call =(325890 call tup i)(325894 call idx j))
            (325901 call += j 1)
          }
        }
      }
      label _unused_continueLabel[325915]
      label _breakLabel[325914]
    }
    (325951 return tup)
  }
  function _extendTuple[325959](arg t[325957]:_any[178](?), arg idx[325961]:_any[178](?), arg args[325963]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[325972](325970 call *(325966 call . args c"size") t)
      (325975 'end of statement')
    }
    { scopeless
      unknown idxTup[325980](325978 call _build_tuple idx)
      (325983 'end of statement')
    }
    { scopeless
      unknown j[325986] 1 int[13]
      (325989 'end of statement')
    }
    {
      unknown i[326041] 0
      unknown tmp[326042] "maybe param" "temp"
      (326054 'move' tmp[326042](326052 call chpl_compute_low_param_loop_bound 0(325996 call -(325992 call . args c"size") 1)))
      unknown tmp[326043] "maybe param" "temp"
      (326067 'move' tmp[326043](326065 call chpl_compute_high_param_loop_bound 0(326059 call -(326061 call . args c"size") 1)))
      unknown tmp[326044] "maybe param" "temp"
      (326070 'move' tmp[326044] 1)
      ParamForLoop[326072]
      { i[326041] tmp[326042] tmp[326043] tmp[326044]
        {
          if(326035 call _cond_test(326006 call isCollapsedDimension(326004 call args i)))
          {
            { scopeless
              (326015 call =(326010 call tup i)(326014 call args i))
            }
          }
          {
            (326026 call =(326021 call tup i)(326025 call idxTup j))
            (326032 call += j 1)
          }
        }
      }
      label _unused_continueLabel[326046]
      label _breakLabel[326045]
    }
    (326082 return tup)
  }
  function _unknown[51].dsiReallocate[326104](arg _mt[326109]:_MT[238], arg this[326106] :
  BlockArr, arg bounds[326101] :
  (326099 call * rank(326098 call range idxType(326094 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "method overrides"
  {
  }
  function _unknown[51].dsiPostReallocate[326117](arg _mt[326122]:_MT[238], arg this[326119] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    if(326129 call _cond_test doRADOpt)
    {
      { scopeless
        (326127 call setupRADOpt)
      }
    }
  }
  function _unknown[51].setRADOpt[326144](arg _mt[326149]:_MT[238], arg this[326146] :
  BlockArr, arg val[326141] =
  1) : _unknown[51] "method"
  {
    (326153 call = doRADOpt val)
    if(326162 call _cond_test doRADOpt)
    {
      { scopeless
        (326160 call setupRADOpt)
      }
    }
  }
  function _unknown[51].this[326174](arg _mt[326179]:_MT[238], arg this[326176] :
  LocBlockArr, arg i[326172]:_any[178](?)) ref : _unknown[51] "inline" "method"
  {
    (326185 return(326184 call myElems i))
  }
  function _unknown[51].dsiSupportsAutoLocalAccess[326193](arg _mt[326198]:_MT[238], arg this[326195] :
  BlockDom) param : _unknown[51] "method" "method overrides"
  {
    (326201 return 1)
  }
  function _unknown[51].init[326213](arg _mt[326241]:_MT[238], arg this[326238] :
  Block, arg other[326210] :
  Block, arg privateData[326215]:_any[178](?), param arg rank[326221] =
  (326218 call . other c"rank"), arg idxType[326228]:_any[178](?) =
  (326225 call . other c"idxType"), arg sparseLayoutType[326235]:_any[178](?) =
  (326232 call . other c"sparseLayoutType")) : _unknown[51] "method"
  {
    (326248 call =(326244 call . this c"rank") rank)
    (326257 call =(326253 call . this c"idxType") idxType)
    (326269 call = boundingBox(326267 call chpl__buildDomainExpr(326265 'expand_tuple'(326264 call privateData 0))))
    (326281 call = targetLocDom(326279 call chpl__buildDomainExpr(326277 'expand_tuple'(326276 call privateData 1))))
    (326289 call = targetLocales(326286 call . other c"targetLocales"))
    (326297 call = locDist(326294 call . other c"locDist"))
    (326305 call = dataParTasksPerLocale(326304 call privateData 2))
    (326313 call = dataParIgnoreRunningTasks(326312 call privateData 3))
    (326321 call = dataParMinGranularity(326320 call privateData 4))
    (326329 call =(326325 call . this c"sparseLayoutType") sparseLayoutType)
  }
  function _unknown[51].dsiSupportsPrivatization[326337](arg _mt[326342]:_MT[238], arg this[326339] :
  Block) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326345 return 1)
    }
  }
  function _unknown[51].dsiGetPrivatizeData[326353](arg _mt[326358]:_MT[238], arg this[326355] :
  Block) : _unknown[51] "method"
  {
    (326378 return(326376 call _build_tuple(326365 call(326361 call . boundingBox c"dims"))(326371 call(326367 call . targetLocDom c"dims")) dataParTasksPerLocale dataParIgnoreRunningTasks dataParMinGranularity))
  }
  function _unknown[51].dsiPrivatize[326388](arg _mt[326393]:_MT[238], arg this[326390] :
  Block, arg privatizeData[326386]:_any[178](?)) : _unknown[51] "method"
  {
    (326406 return(326397 'new'(_chpl_manager = unmanaged[220](?))(326405 call Block(326402 call _to_unmanaged this) privatizeData)))
  }
  function _unknown[51].dsiGetReprivatizeData[326414](arg _mt[326419]:_MT[238], arg this[326416] :
  Block) : _unknown[51] "method"
  {
    { scopeless
      (326427 return(326426 call(326422 call . boundingBox c"dims")))
    }
  }
  function _unknown[51].dsiReprivatize[326437](arg _mt[326444]:_MT[238], arg this[326441] :
  Block, arg other[326435]:_any[178](?), arg reprivatizeData[326439]:_any[178](?)) : _unknown[51] "method"
  {
    (326452 call = boundingBox(326450 call chpl__buildDomainExpr(326448 'expand_tuple' reprivatizeData)))
    (326461 call = targetLocDom(326458 call . other c"targetLocDom"))
    (326469 call = targetLocales(326466 call . other c"targetLocales"))
    (326477 call = locDist(326474 call . other c"locDist"))
    (326485 call = dataParTasksPerLocale(326482 call . other c"dataParTasksPerLocale"))
    (326493 call = dataParIgnoreRunningTasks(326490 call . other c"dataParIgnoreRunningTasks"))
    (326501 call = dataParMinGranularity(326498 call . other c"dataParMinGranularity"))
  }
  function _unknown[51].chpl__serialize[326509](arg _mt[326514]:_MT[238], arg this[326511] :
  BlockDom) : _unknown[51] "method"
  {
    (326517 return pid)
  }
  function _unknown[51].chpl__deserialize[326527](arg _mt[326532]:_MT[238], arg this[326529] :
  BlockDom, arg data[326525]:_any[178](?)) : _unknown[51] "method"
  {
    (326562 return(326561 call chpl_getPrivatizedCopy(326558 'to unmanaged class from unknown'(326557 call BlockDom(rank =(326537 call . this c"rank"))(idxType =(326543 call . this c"idxType"))(stridable =(326548 call . this c"stridable"))(sparseLayoutType =(326553 call . this c"sparseLayoutType")))) data))
  }
  function _unknown[51].dsiSupportsPrivatization[326570](arg _mt[326575]:_MT[238], arg this[326572] :
  BlockDom) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326578 return 1)
    }
  }
  type BlockDomPrvData[326597](?) unknown distpid[326584] unknown dims[326588] unknown locdoms[326592]
  function _unknown[51].dsiGetPrivatizeData[326603](arg _mt[326608]:_MT[238], arg this[326605] :
  BlockDom) : _unknown[51] "method"
  {
    (326625 return(326610 'new'(326624 call BlockDomPrvData(326613 call . dist c"pid")(326622 call(326618 call . whole c"dims")) locDoms)))
  }
  function _unknown[51].dsiPrivatize[326635](arg _mt[326640]:_MT[238], arg this[326637] :
  BlockDom, arg privatizeData[326633]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown privdist[326653](326652 call chpl_getPrivatizedCopy(326644 'typeof' dist)(326649 call . privatizeData c"distpid"))
      (326656 'end of statement')
    }
    { scopeless
      unknown locDomsTemp[326680](326677 call . privatizeData c"locdoms")(326672 call chpl__buildArrayRuntimeType(326670 call chpl__ensureDomainExpr(326659 call . privdist c"targetLocDom"))(326669 'to unmanaged class from unknown'(326668 call LocBlockDom rank idxType stridable)))
      (326683 'end of statement')
    }
    { scopeless
      const c[326707] "const"(326686 'new'(_chpl_manager = unmanaged[220](?))(326706 call BlockDom rank idxType stridable(326693 call . privdist c"sparseLayoutType") privdist locDomsTemp(326704 call chpl__buildDomainExpr(326702 'expand_tuple'(326699 call . privatizeData c"dims")))))
      (326710 'end of statement')
    }
    (326712 return c)
  }
  function _unknown[51].dsiGetReprivatizeData[326719](arg _mt[326724]:_MT[238], arg this[326721] :
  BlockDom) : _unknown[51] "method"
  {
    { scopeless
      (326732 return(326731 call(326727 call . whole c"dims")))
    }
  }
  function _unknown[51].dsiReprivatize[326742](arg _mt[326749]:_MT[238], arg this[326746] :
  BlockDom, arg other[326740]:_any[178](?), arg reprivatizeData[326744]:_any[178](?)) : _unknown[51] "method"
  {
    (326758 call = locDoms(326755 call . other c"locDoms"))
    (326768 call = whole(326766 call chpl__buildDomainExpr(326764 'expand_tuple' reprivatizeData)))
  }
  function _unknown[51].chpl__serialize[326776](arg _mt[326781]:_MT[238], arg this[326778] :
  BlockArr) : _unknown[51] "method"
  {
    (326784 return pid)
  }
  function _unknown[51].chpl__deserialize[326794](arg _mt[326799]:_MT[238], arg this[326796] :
  BlockArr, arg data[326792]:_any[178](?)) : _unknown[51] "method"
  {
    (326834 return(326833 call chpl_getPrivatizedCopy(326830 'to unmanaged class from unknown'(326829 call BlockArr(rank =(326804 call . this c"rank"))(idxType =(326810 call . this c"idxType"))(stridable =(326815 call . this c"stridable"))(eltType =(326820 call . this c"eltType"))(sparseLayoutType =(326825 call . this c"sparseLayoutType")))) data))
  }
  function _unknown[51].dsiSupportsPrivatization[326842](arg _mt[326847]:_MT[238], arg this[326844] :
  BlockArr) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326850 return 1)
    }
  }
  type BlockArrPrvData[326865](?) unknown dompid[326856] unknown locarr[326860]
  function _unknown[51].dsiGetPrivatizeData[326871](arg _mt[326876]:_MT[238], arg this[326873] :
  BlockArr) : _unknown[51] "method"
  {
    (326887 return(326878 'new'(326886 call BlockArrPrvData(326881 call . dom c"pid") locArr)))
  }
  function _unknown[51].dsiPrivatize[326897](arg _mt[326902]:_MT[238], arg this[326899] :
  BlockArr, arg privatizeData[326895]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown privdom[326915](326914 call chpl_getPrivatizedCopy(326906 'typeof' dom)(326911 call . privatizeData c"dompid"))
      (326918 'end of statement')
    }
    { scopeless
      unknown locArrTemp[326946](326943 call . privatizeData c"locarr")(326938 call chpl__buildArrayRuntimeType(326936 call chpl__ensureDomainExpr(326924 call .(326921 call . privdom c"dist") c"targetLocDom"))(326935 'to unmanaged class from unknown'(326934 call LocBlockArr eltType rank idxType stridable)))
      (326949 'end of statement')
    }
    { scopeless
      unknown myLocArrTemp[326959](326958 'to unmanaged class from unknown'(326957 'to nilable class from type'(326956 call LocBlockArr eltType rank idxType stridable)))
      (326962 'end of statement')
    }
    {
      unknown _indexOfInterest[326998] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[326999] "expr temp" "temp"
      (327008 'move' _iterator[326999](327006 call _getIterator(326968 call .(326965 call . privdom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (327025 call _freeIterator _iterator[326999])
        }
      }
      { scopeless type
        (327014 'move' _indexOfInterest[326998](327011 call iteratorIndex _iterator[326999]))
      }
      ForLoop[327000]
      {
        unknown localeIdx[327018] "index var" "insert auto destroy"
        (327020 'move' localeIdx[327018] _indexOfInterest[326998])
        { scopeless
          if(326993 call _cond_test(326983 call ==(326978 '_wide_get_node'(326974 call locArrTemp localeIdx))(326980 call . here c"id")))
          {
            { scopeless
              (326990 call = myLocArrTemp(326989 call locArrTemp localeIdx))
            }
          }
        }
        label _continueLabel[327003]
        _indexOfInterest[326998]
        _iterator[326999]
      }
      label _breakLabel[327004]
    }
    { scopeless
      const c[327054] "const"(327034 'new'(_chpl_manager = unmanaged[220](?))(327053 call BlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom = privdom)(locArr = locArrTemp)(myLocArr = myLocArrTemp)))
      (327057 'end of statement')
    }
    (327059 return c)
  }
  function _unknown[51].dsiTargetLocales[327066](arg _mt[327071]:_MT[238], arg this[327068] :
  BlockArr) : _unknown[51] "method"
  {
    (327080 return(327077 call .(327074 call . dom c"dist") c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[327088](arg _mt[327093]:_MT[238], arg this[327090] :
  BlockDom) : _unknown[51] "method"
  {
    (327099 return(327096 call . dist c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[327107](arg _mt[327112]:_MT[238], arg this[327109] :
  Block) : _unknown[51] "method"
  {
    (327115 return targetLocales)
  }
  function _unknown[51].chpl__locToLocIdx[327127](arg _mt[327132]:_MT[238], arg this[327129] :
  Block, arg loc[327124] :
  locale[28]) : _unknown[51] "method"
  {
    {
      unknown _indexOfInterest[327155] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[327156] "expr temp" "temp"
      (327165 'move' _iterator[327156](327163 call _getIterator targetLocDom))
      Defer
      {
        {
          (327181 call _freeIterator _iterator[327156])
        }
      }
      { scopeless type
        (327170 'move' _indexOfInterest[327155](327167 call iteratorIndex _iterator[327156]))
      }
      ForLoop[327157]
      {
        unknown locIdx[327174] "index var" "insert auto destroy"
        (327176 'move' locIdx[327174] _indexOfInterest[327155])
        { scopeless
          if(327150 call _cond_test(327141 call ==(327139 call targetLocales locIdx) loc))
          {
            { scopeless
              (327148 return(327146 call _build_tuple 1 locIdx))
            }
          }
        }
        label _continueLabel[327160]
        _indexOfInterest[327155]
        _iterator[327156]
      }
      label _breakLabel[327161]
    }
    (327197 return(327195 call _build_tuple 0(327191 call . targetLocDom c"first")))
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[327204](arg _mt[327209]:_MT[238], arg this[327206] :
  BlockArr) param : _unknown[51] "method"
  {
    { scopeless
      (327212 return 1)
    }
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[327220](arg _mt[327225]:_MT[238], arg this[327222] :
  BlockDom) param : _unknown[51] "method"
  {
    { scopeless
      (327228 return 1)
    }
  }
  function _unknown[51].dsiLocalSubdomain[327240](arg _mt[327245]:_MT[238], arg this[327242] :
  BlockArr, arg loc[327237] :
  locale[28]) : _unknown[51] "method"
  {
    if(327297 call _cond_test(327249 call == loc here))
    {
      if(327267 call _cond_test(327253 call != myLocArr nil[44]))
      {
        { scopeless
          (327265 return(327262 call .(327259 call .(327258 call _to_nonnil myLocArr) c"locDom") c"myBlock"))
        }
      }
      { scopeless
        unknown d[327280](327278 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (327283 'end of statement')
      }
      (327285 return d)
    }
    {
      (327294 return(327293 call(327288 call . dom c"dsiLocalSubdomain") loc))
    }
  }
  function _unknown[51].dsiLocalSubdomain[327311](arg _mt[327316]:_MT[238], arg this[327313] :
  BlockDom, arg loc[327308] :
  locale[28]) : _unknown[51] "method"
  {
    { scopeless
      const tmp[327332] "const" "temp"(327331 call(327326 call . dist c"chpl__locToLocIdx") loc)
      (327339 call _check_tuple_var_decl tmp[327332] 2)
      const gotit[327318] "const"(327333 call tmp[327332] 0)
      const locid[327320] "const"(327336 call tmp[327332] 1)
      (327344 'end of statement')
    }
    if(327386 call _cond_test gotit)
    {
      { scopeless
        unknown inds[327359](327358 call chpl__computeBlock locid(327351 call . dist c"targetLocDom")(327355 call . dist c"boundingBox"))
        (327362 'end of statement')
      }
      (327369 return(327368 call whole(327366 'expand_tuple' inds)))
    }
    {
      { scopeless
        unknown d[327378](327376 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (327381 'end of statement')
      }
      (327384 return d)
    }
  }
  function _unknown[51].numRemoteElems[327397](arg _mt[327406]:_MT[238], arg this[327403] :
  BlockDom, arg viewDom[327395]:_any[178](?), arg rlo[327399]:_any[178](?), arg rid[327401]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown blo[327408](327412 call . dist c"idxType")
      unknown bhi[327415](327419 'typeof' blo)
      (327420 'end of statement')
    }
    if(327558 call _cond_test(327442 call == rid(327440 call -(327436 call .(327435 call(327427 call .(327424 call . dist c"targetLocDom") c"dim")(327432 call - rank 1)) c"size") 1)))
    {
      { scopeless
        (327458 call = bhi(327455 call .(327454 call(327446 call . viewDom c"dim")(327451 call - rank 1)) c"high"))
      }
    }
    {
      (327554 call = bhi(327552 call -(327546 call +(327475 call .(327474 call(327466 call .(327463 call . dist c"boundingBox") c"dim")(327471 call - rank 1)) c"low")(327545 call intCeilXDivByY(327523 call *(327514 call +(327511 call -(327492 call .(327491 call(327483 call .(327480 call . dist c"boundingBox") c"dim")(327488 call - rank 1)) c"high")(327508 call .(327507 call(327499 call .(327496 call . dist c"boundingBox") c"dim")(327504 call - rank 1)) c"low")) 1)(327521 call _cast idxType(327518 call + rid 1)))(327543 call _cast idxType(327539 call .(327538 call(327530 call .(327527 call . dist c"targetLocDom") c"dim")(327535 call - rank 1)) c"size"))))(327550 call _cast idxType 1)))
    }
    (327573 return(327571 call - bhi(327569 call _cast idxType(327566 call - rlo 1))))
  }
  function canDoAnyToBlock[327581](arg Dest[327579]:_any[178](?), arg destDom[327583]:_any[178](?), arg Src[327585]:_any[178](?), arg srcDom[327587]:_any[178](?)) param : _unknown[51] "private"
  {
    if(327614 call _cond_test(327609 call &&(327597 call ==(327595 call(327591 call . Src c"doiCanBulkTransferRankChange")) 0)(327607 call !=(327600 call . Dest c"rank")(327604 call . Src c"rank"))))
    {
      { scopeless
        (327612 return 0)
      }
    }
    (327621 'use' Reflection)
    if(327660 call _cond_test(327654 call !(327653 call canResolveMethod Src "doiBulkTransferToKnown" srcDom(327649 call .(327646 call .(327645 call(327631 call . Dest c"locArr")(327641 call .(327638 call .(327635 call . Dest c"locArr") c"_dom") c"first")) c"myElems") c"_value") destDom)))
    {
      (327657 return 0)
    }
    (327667 return(327665 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferToKnown[327677](arg _mt[327688]:_MT[238], arg this[327685] :
  BlockArr, arg srcDom[327675]:_any[178](?), arg destClass[327680] :
  BlockArr, arg destDom[327683]:_any[178](?)) : _unknown[51] "method"
  {
    (327720 call _doSimpleBlockTransfer destClass destDom this srcDom)
    (327724 return 1)
  }
  where {
    (327712 call &&(327707 call &&(327697 call ==(327692 call . this c"sparseLayoutType")(327696 'to unmanaged class from unknown' DefaultDist))(327705 call ==(327700 call . destClass c"sparseLayoutType")(327704 'to unmanaged class from unknown' DefaultDist)))(327710 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[327735](arg _mt[327746]:_MT[238], arg this[327743] :
  BlockArr, arg destDom[327733]:_any[178](?), arg srcClass[327738] :
  BlockArr, arg srcDom[327741]:_any[178](?)) : _unknown[51] "method"
  {
    (327778 call _doSimpleBlockTransfer this destDom srcClass srcDom)
    (327782 return 1)
  }
  where {
    (327770 call &&(327765 call &&(327755 call ==(327750 call . this c"sparseLayoutType")(327754 'to unmanaged class from unknown' DefaultDist))(327763 call ==(327758 call . srcClass c"sparseLayoutType")(327762 'to unmanaged class from unknown' DefaultDist)))(327768 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiSwap[327793](arg _mt[327798]:_MT[238], arg this[327795] :
  BlockArr, arg arr[327791]:_any[178](?)) : _unknown[51] "method"
  {
    {
      unknown tmpIter[327852] "expr temp" "maybe ref" "no copy" "temp"
      (327855 'move' tmpIter[327852](327814 call _build_tuple(327806 call . this c"locArr")(327811 call . arr c"locArr")))
      unknown isRngDomArr[328047] "maybe param" "temp"
      (328062 'move' isRngDomArr[328047](328060 call ||(328049 call isBoundedRange tmpIter[327852])(328058 call ||(328052 call isDomain tmpIter[327852])(328055 call isArray tmpIter[327852]))))
      if isRngDomArr[328047]
      {
        const _coforallCount[327891] "const" "end count" "temp"
        (327970 'move' _coforallCount[327891](327967 call _endCountAlloc 0))
        unknown numTasks[327892] "temp"
        (327954 'move' numTasks[327892](327950 call . tmpIter[327852] c"size"))
        (327945 call _upEndCount _coforallCount[327891] 0 numTasks[327892])
        unknown _indexOfInterest[327898] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327899] "expr temp" "temp"
        (327908 'move' _iterator[327899](327906 call _getIteratorZip tmpIter[327852]))
        Defer
        {
          {
            (327938 call _freeIterator _iterator[327899])
          }
        }
        { scopeless type
          (327913 'move' _indexOfInterest[327898](327910 call iteratorIndex _iterator[327899]))
        }
        ForLoop[327900]
        {
          (327918 call _check_tuple_var_decl _indexOfInterest[327898] 2)
          unknown locarr1[327924] "coforall index var" "index var" "insert auto destroy"
          (327926 'move' locarr1[327924](327922 call _indexOfInterest[327898] 0))
          unknown locarr2[327931] "coforall index var" "index var" "insert auto destroy"
          (327933 'move' locarr2[327931](327929 call _indexOfInterest[327898] 1))
          { scopeless
            { scopeless
              const tmp[327858] "const" "temp"
              (327860 'move' tmp[327858](327862 'deref'(327863 '_wide_get_locale' locarr1)))
              {
                {
                  (327871 call <=>(327873 call . locarr1 c"myElems")(327877 call . locarr2 c"myElems"))
                  (327881 call <=>(327883 call . locarr1 c"locRAD")(327887 call . locarr2 c"locRAD"))
                }
                (327893 call _downEndCount _coforallCount[327891] nil[44])
                (327866 'coforall on block' 0 tmp[327858])
              }
            }
          }
          label _continueLabel[327903]
          _indexOfInterest[327898]
          _iterator[327899]
        }
        label _breakLabel[327904]
        Defer
        {
          {
            (327957 call _endCountFree _coforallCount[327891])
          }
        }
        (327962 call _waitEndCount _coforallCount[327891] 0 numTasks[327892])
      }
      {
        const _coforallCount[327974] "const" "end count" "temp"
        (328044 'move' _coforallCount[327974](328041 call _endCountAlloc 0))
        unknown _indexOfInterest[327981] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327982] "expr temp" "temp"
        (327991 'move' _iterator[327982](327989 call _getIteratorZip tmpIter[327852]))
        Defer
        {
          {
            (328021 call _freeIterator _iterator[327982])
          }
        }
        { scopeless type
          (327996 'move' _indexOfInterest[327981](327993 call iteratorIndex _iterator[327982]))
        }
        ForLoop[327983]
        {
          (328001 call _check_tuple_var_decl _indexOfInterest[327981] 2)
          unknown locarr1[328007] "coforall index var" "index var" "insert auto destroy"
          (328009 'move' locarr1[328007](328005 call _indexOfInterest[327981] 0))
          unknown locarr2[328014] "coforall index var" "index var" "insert auto destroy"
          (328016 'move' locarr2[328014](328012 call _indexOfInterest[327981] 1))
          (328028 call _upEndCount _coforallCount[327974] 0)
          { scopeless
            { scopeless
              const tmp[327842] "const" "temp"
              (327844 'move' tmp[327842](327840 'deref'(327839 '_wide_get_locale' locarr1)))
              {
                {
                  (327824 call <=>(327817 call . locarr1 c"myElems")(327821 call . locarr2 c"myElems"))
                  (327836 call <=>(327829 call . locarr1 c"locRAD")(327833 call . locarr2 c"locRAD"))
                }
                (327976 call _downEndCount _coforallCount[327974] nil[44])
                (327847 'coforall on block' 0 tmp[327842])
              }
            }
          }
          label _continueLabel[327986]
          _indexOfInterest[327981]
          _iterator[327982]
        }
        label _breakLabel[327987]
        Defer
        {
          {
            (328032 call _endCountFree _coforallCount[327974])
          }
        }
        (328037 call _waitEndCount _coforallCount[327974] 0)
      }
    }
  }
  function _doSimpleBlockTransfer[328073](arg Dest[328071]:_any[178](?), arg destDom[328075]:_any[178](?), arg Src[328077]:_any[178](?), arg srcDom[328079]:_any[178](?)) : _unknown[51] "private"
  {
    if(328123 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (328121 call writeln "In Block=Block Bulk Transfer: Dest[" destDom "] = Src[" srcDom "]")
      }
    }
    { scopeless
      const DestPID[328133] "const"(328130 call . Dest c"pid")
      (328136 'end of statement')
    }
    { scopeless
      const SrcPID[328141] "const"(328138 call . Src c"pid")
      (328144 'end of statement')
    }
    {
      unknown tmpIter[328400] "expr temp" "maybe ref" "no copy" "temp"
      (328403 'move' tmpIter[328400](328160 call(328155 call .(328150 call .(328147 call . Dest c"dom") c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[328735] "maybe param" "temp"
      (328750 'move' isRngDomArr[328735](328748 call ||(328737 call isBoundedRange tmpIter[328400])(328746 call ||(328740 call isDomain tmpIter[328400])(328743 call isArray tmpIter[328400]))))
      if isRngDomArr[328735]
      {
        const _coforallCount[328607] "const" "end count" "temp"
        (328672 'move' _coforallCount[328607](328669 call _endCountAlloc 0))
        unknown numTasks[328608] "temp"
        (328656 'move' numTasks[328608](328652 call . tmpIter[328400] c"size"))
        (328647 call _upEndCount _coforallCount[328607] 0 numTasks[328608])
        unknown _indexOfInterest[328614] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328615] "expr temp" "temp"
        (328624 'move' _iterator[328615](328622 call _getIterator tmpIter[328400]))
        Defer
        {
          {
            (328640 call _freeIterator _iterator[328615])
          }
        }
        { scopeless type
          (328629 'move' _indexOfInterest[328614](328626 call iteratorIndex _iterator[328615]))
        }
        ForLoop[328616]
        {
          unknown i[328633] "coforall index var" "index var" "insert auto destroy"
          (328635 'move' i[328633] _indexOfInterest[328614])
          { scopeless
            { scopeless
              const tmp[328406] "const" "temp"
              (328408 'move' tmp[328406](328410 'deref'(328411 '_wide_get_locale'(328422 call(328413 call .(328415 call .(328417 call . Dest c"dom") c"dist") c"targetLocales") i))))
              {
                {
                  { scopeless
                    const dst[328430] "const"(328440 IfExpr  _privatization then
                    { scopeless
                      (328434 call chpl_getPrivatizedCopy(328435 'typeof' Dest) DestPID)
                    } else
                    { scopeless
                      Dest
                    } )
                    (328442 'end of statement')
                  }
                  { scopeless
                    const src[328444] "const"(328454 IfExpr  _privatization then
                    { scopeless
                      (328448 call chpl_getPrivatizedCopy(328449 'typeof' Src) SrcPID)
                    } else
                    { scopeless
                      Src
                    } )
                    (328456 'end of statement')
                  }
                  { scopeless
                    const localDestBlock[328458] "const"(328471 call(328460 call .(328468 call(328462 call .(328464 call . dst c"dom") c"locDoms") i) c"myBlock") destDom)
                    (328474 'end of statement')
                  }
                  (328476 call assert(328478 call >(328480 call . localDestBlock c"size") 0))
                  { scopeless
                    const corSrcBlock[328485] "const"(328487 call bulkCommTranslateDomain localDestBlock destDom srcDom)
                    (328492 'end of statement')
                  }
                  if(328494 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328499 call writeln "  Dest[" localDestBlock "] = Src[" corSrcBlock "]")
                    }
                  }
                  {
                    unknown _indexOfInterest[328507] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[328509] "expr temp" "temp"
                    (328511 'move' _iterator[328509](328514 call _getIterator(328525 call(328516 call .(328518 call .(328520 call . src c"dom") c"dist") c"activeTargetLocales") corSrcBlock)))
                    Defer
                    {
                      {
                        (328529 call _freeIterator _iterator[328509])
                      }
                    }
                    { scopeless type
                      (328533 'move' _indexOfInterest[328507](328536 call iteratorIndex _iterator[328509]))
                    }
                    ForLoop[328538]
                    {
                      unknown srcLoc[328541] "index var" "insert auto destroy"
                      (328543 'move' srcLoc[328541] _indexOfInterest[328507])
                      {
                        { scopeless
                          const localSrcChunk[328548] "const"(328550 call corSrcBlock(328552 call .(328560 call(328554 call .(328556 call . src c"dom") c"locDoms") srcLoc) c"myBlock"))
                          (328564 'end of statement')
                        }
                        { scopeless
                          const localDestChunk[328566] "const"(328568 call bulkCommTranslateDomain localSrcChunk corSrcBlock localDestBlock)
                          (328573 'end of statement')
                        }
                        (328575 call chpl__bulkTransferArray(328577 call .(328579 call .(328584 call(328581 call . dst c"locArr") i) c"myElems") c"_value") localDestChunk(328590 call .(328592 call .(328597 call(328594 call . src c"locArr") srcLoc) c"myElems") c"_value") localSrcChunk)
                      }
                      label _continueLabel[328602]
                      _indexOfInterest[328507]
                      _iterator[328509]
                    }
                    label _breakLabel[328604]
                  }
                }
                (328609 call _downEndCount _coforallCount[328607] nil[44])
                (328425 'coforall on block' 0 tmp[328406])
              }
            }
          }
          label _continueLabel[328619]
          _indexOfInterest[328614]
          _iterator[328615]
        }
        label _breakLabel[328620]
        Defer
        {
          {
            (328659 call _endCountFree _coforallCount[328607])
          }
        }
        (328664 call _waitEndCount _coforallCount[328607] 0 numTasks[328608])
      }
      {
        const _coforallCount[328676] "const" "end count" "temp"
        (328732 'move' _coforallCount[328676](328729 call _endCountAlloc 0))
        unknown _indexOfInterest[328683] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328684] "expr temp" "temp"
        (328693 'move' _iterator[328684](328691 call _getIterator tmpIter[328400]))
        Defer
        {
          {
            (328709 call _freeIterator _iterator[328684])
          }
        }
        { scopeless type
          (328698 'move' _indexOfInterest[328683](328695 call iteratorIndex _iterator[328684]))
        }
        ForLoop[328685]
        {
          unknown i[328702] "coforall index var" "index var" "insert auto destroy"
          (328704 'move' i[328702] _indexOfInterest[328683])
          (328716 call _upEndCount _coforallCount[328676] 0)
          { scopeless
            { scopeless
              const tmp[328391] "const" "temp"
              (328393 'move' tmp[328391](328389 'deref'(328388 '_wide_get_locale'(328173 call(328168 call .(328165 call .(328162 call . Dest c"dom") c"dist") c"targetLocales") i))))
              {
                {
                  { scopeless
                    const dst[328185] "const"(328182 IfExpr  _privatization then
                    { scopeless
                      (328180 call chpl_getPrivatizedCopy(328177 'typeof' Dest) DestPID)
                    } else
                    { scopeless
                      Dest
                    } )
                    (328188 'end of statement')
                  }
                  { scopeless
                    const src[328201] "const"(328198 IfExpr  _privatization then
                    { scopeless
                      (328196 call chpl_getPrivatizedCopy(328193 'typeof' Src) SrcPID)
                    } else
                    { scopeless
                      Src
                    } )
                    (328204 'end of statement')
                  }
                  { scopeless
                    const localDestBlock[328221] "const"(328220 call(328215 call .(328214 call(328209 call .(328206 call . dst c"dom") c"locDoms") i) c"myBlock") destDom)
                    (328224 'end of statement')
                  }
                  (328234 call assert(328231 call >(328227 call . localDestBlock c"size") 0))
                  { scopeless
                    const corSrcBlock[328242] "const"(328241 call bulkCommTranslateDomain localDestBlock destDom srcDom)
                    (328245 'end of statement')
                  }
                  if(328272 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328270 call writeln "  Dest[" localDestBlock "] = Src[" corSrcBlock "]")
                    }
                  }
                  {
                    unknown _indexOfInterest[328354] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[328355] "expr temp" "temp"
                    (328364 'move' _iterator[328355](328362 call _getIterator(328290 call(328285 call .(328282 call .(328279 call . src c"dom") c"dist") c"activeTargetLocales") corSrcBlock)))
                    Defer
                    {
                      {
                        (328381 call _freeIterator _iterator[328355])
                      }
                    }
                    { scopeless type
                      (328370 'move' _indexOfInterest[328354](328367 call iteratorIndex _iterator[328355]))
                    }
                    ForLoop[328356]
                    {
                      unknown srcLoc[328374] "index var" "insert auto destroy"
                      (328376 'move' srcLoc[328374] _indexOfInterest[328354])
                      {
                        { scopeless
                          const localSrcChunk[328307] "const"(328306 call corSrcBlock(328302 call .(328301 call(328296 call .(328293 call . src c"dom") c"locDoms") srcLoc) c"myBlock"))
                          (328310 'end of statement')
                        }
                        { scopeless
                          const localDestChunk[328318] "const"(328317 call bulkCommTranslateDomain localSrcChunk corSrcBlock localDestBlock)
                          (328321 'end of statement')
                        }
                        (328352 call chpl__bulkTransferArray(328333 call .(328330 call .(328329 call(328324 call . dst c"locArr") i) c"myElems") c"_value") localDestChunk(328348 call .(328345 call .(328344 call(328339 call . src c"locArr") srcLoc) c"myElems") c"_value") localSrcChunk)
                      }
                      label _continueLabel[328359]
                      _indexOfInterest[328354]
                      _iterator[328355]
                    }
                    label _breakLabel[328360]
                  }
                }
                (328678 call _downEndCount _coforallCount[328676] nil[44])
                (328396 'coforall on block' 0 tmp[328391])
              }
            }
          }
          label _continueLabel[328688]
          _indexOfInterest[328683]
          _iterator[328684]
        }
        label _breakLabel[328689]
        Defer
        {
          {
            (328720 call _endCountFree _coforallCount[328676])
          }
        }
        (328725 call _waitEndCount _coforallCount[328676] 0)
      }
    }
  }
  function _unknown[51].doiBulkTransferFromAny[328761](arg _mt[328770]:_MT[238], arg this[328767] :
  BlockArr, arg destDom[328759]:_any[178](?), arg Src[328763]:_any[178](?), arg srcDom[328765]:_any[178](?)) : _unknown[51] "method"
  {
    if(328802 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (328800 call writeln "In BlockDist.doiBulkTransferFromAny")
      }
    }
    {
      unknown tmpIter[328956] "expr temp" "maybe ref" "no copy" "temp"
      (328959 'move' tmpIter[328956](328818 call(328813 call .(328810 call . dom c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[329184] "maybe param" "temp"
      (329199 'move' isRngDomArr[329184](329197 call ||(329186 call isBoundedRange tmpIter[328956])(329195 call ||(329189 call isDomain tmpIter[328956])(329192 call isArray tmpIter[328956]))))
      if isRngDomArr[329184]
      {
        const _coforallCount[329056] "const" "end count" "temp"
        (329121 'move' _coforallCount[329056](329118 call _endCountAlloc 0))
        unknown numTasks[329057] "temp"
        (329105 'move' numTasks[329057](329101 call . tmpIter[328956] c"size"))
        (329096 call _upEndCount _coforallCount[329056] 0 numTasks[329057])
        unknown _indexOfInterest[329063] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329064] "expr temp" "temp"
        (329073 'move' _iterator[329064](329071 call _getIterator tmpIter[328956]))
        Defer
        {
          {
            (329089 call _freeIterator _iterator[329064])
          }
        }
        { scopeless type
          (329078 'move' _indexOfInterest[329063](329075 call iteratorIndex _iterator[329064]))
        }
        ForLoop[329065]
        {
          unknown j[329082] "coforall index var" "index var" "insert auto destroy"
          (329084 'move' j[329082] _indexOfInterest[329063])
          { scopeless
            { scopeless
              const tmp[328962] "const" "temp"
              (328964 'move' tmp[328962](328966 'deref'(328967 '_wide_get_locale'(328975 call(328969 call .(328971 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[328983] "const"(328993 IfExpr  _privatization then
                    { scopeless
                      (328987 call chpl_getPrivatizedCopy(328988 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (328995 'end of statement')
                  }
                  { scopeless
                    const inters[328997] "const"(329010 call(328999 call .(329007 call(329001 call .(329003 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (329013 'end of statement')
                  }
                  { scopeless
                    const srcChunk[329015] "const"(329017 call bulkCommTranslateDomain inters destDom srcDom)
                    (329022 'end of statement')
                  }
                  if(329024 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329029 call writeln "Dest.locArr[" j "][" inters "] = Src[" srcDom "]")
                    }
                  }
                  (329039 call chpl__bulkTransferArray(329041 call .(329043 call .(329048 call(329045 call . Dest c"locArr") j) c"myElems") c"_value") inters Src srcChunk)
                }
                (329058 call _downEndCount _coforallCount[329056] nil[44])
                (328978 'coforall on block' 0 tmp[328962])
              }
            }
          }
          label _continueLabel[329068]
          _indexOfInterest[329063]
          _iterator[329064]
        }
        label _breakLabel[329069]
        Defer
        {
          {
            (329108 call _endCountFree _coforallCount[329056])
          }
        }
        (329113 call _waitEndCount _coforallCount[329056] 0 numTasks[329057])
      }
      {
        const _coforallCount[329125] "const" "end count" "temp"
        (329181 'move' _coforallCount[329125](329178 call _endCountAlloc 0))
        unknown _indexOfInterest[329132] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329133] "expr temp" "temp"
        (329142 'move' _iterator[329133](329140 call _getIterator tmpIter[328956]))
        Defer
        {
          {
            (329158 call _freeIterator _iterator[329133])
          }
        }
        { scopeless type
          (329147 'move' _indexOfInterest[329132](329144 call iteratorIndex _iterator[329133]))
        }
        ForLoop[329134]
        {
          unknown j[329151] "coforall index var" "index var" "insert auto destroy"
          (329153 'move' j[329151] _indexOfInterest[329132])
          (329165 call _upEndCount _coforallCount[329125] 0)
          { scopeless
            { scopeless
              const tmp[328947] "const" "temp"
              (328949 'move' tmp[328947](328945 'deref'(328944 '_wide_get_locale'(328828 call(328823 call .(328820 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[328840] "const"(328837 IfExpr  _privatization then
                    { scopeless
                      (328835 call chpl_getPrivatizedCopy(328832 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (328843 'end of statement')
                  }
                  { scopeless
                    const inters[328861] "const"(328860 call(328855 call .(328854 call(328849 call .(328846 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (328864 'end of statement')
                  }
                  { scopeless
                    const srcChunk[328871] "const"(328870 call bulkCommTranslateDomain inters destDom srcDom)
                    (328874 'end of statement')
                  }
                  if(328919 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328917 call writeln "Dest.locArr[" j "][" inters "] = Src[" srcDom "]")
                    }
                  }
                  (328942 call chpl__bulkTransferArray(328935 call .(328932 call .(328931 call(328926 call . Dest c"locArr") j) c"myElems") c"_value") inters Src srcChunk)
                }
                (329127 call _downEndCount _coforallCount[329125] nil[44])
                (328952 'coforall on block' 0 tmp[328947])
              }
            }
          }
          label _continueLabel[329137]
          _indexOfInterest[329132]
          _iterator[329133]
        }
        label _breakLabel[329138]
        Defer
        {
          {
            (329169 call _endCountFree _coforallCount[329125])
          }
        }
        (329174 call _waitEndCount _coforallCount[329125] 0)
      }
    }
    (329204 return 1)
  }
  where {
    (328779 call canDoAnyToBlock this destDom Src srcDom)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferToKnown[329215](arg _mt[329226]:_MT[238], arg this[329223] :
  BlockArr, arg srcDom[329213]:_any[178](?), arg Dest[329218] :
  DefaultRectangularArr, arg destDom[329221]:_any[178](?)) : _unknown[51] "method"
  {
    if(329254 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (329252 call writeln "In BlockDist.doiBulkTransferToKnown(DefaultRectangular)")
      }
    }
    {
      unknown tmpIter[329411] "expr temp" "maybe ref" "no copy" "temp"
      (329414 'move' tmpIter[329411](329270 call(329265 call .(329262 call . dom c"dist") c"activeTargetLocales") srcDom))
      unknown isRngDomArr[329642] "maybe param" "temp"
      (329657 'move' isRngDomArr[329642](329655 call ||(329644 call isBoundedRange tmpIter[329411])(329653 call ||(329647 call isDomain tmpIter[329411])(329650 call isArray tmpIter[329411]))))
      if isRngDomArr[329642]
      {
        const _coforallCount[329514] "const" "end count" "temp"
        (329579 'move' _coforallCount[329514](329576 call _endCountAlloc 0))
        unknown numTasks[329515] "temp"
        (329563 'move' numTasks[329515](329559 call . tmpIter[329411] c"size"))
        (329554 call _upEndCount _coforallCount[329514] 0 numTasks[329515])
        unknown _indexOfInterest[329521] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329522] "expr temp" "temp"
        (329531 'move' _iterator[329522](329529 call _getIterator tmpIter[329411]))
        Defer
        {
          {
            (329547 call _freeIterator _iterator[329522])
          }
        }
        { scopeless type
          (329536 'move' _indexOfInterest[329521](329533 call iteratorIndex _iterator[329522]))
        }
        ForLoop[329523]
        {
          unknown j[329540] "coforall index var" "index var" "insert auto destroy"
          (329542 'move' j[329540] _indexOfInterest[329521])
          { scopeless
            { scopeless
              const tmp[329417] "const" "temp"
              (329419 'move' tmp[329417](329421 'deref'(329422 '_wide_get_locale'(329430 call(329424 call .(329426 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Src[329438] "const"(329448 IfExpr  _privatization then
                    { scopeless
                      (329442 call chpl_getPrivatizedCopy(329443 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329450 'end of statement')
                  }
                  { scopeless
                    const inters[329452] "const"(329465 call(329454 call .(329462 call(329456 call .(329458 call . Src c"dom") c"locDoms") j) c"myBlock") srcDom)
                    (329468 'end of statement')
                  }
                  { scopeless
                    const destChunk[329470] "const"(329472 call bulkCommTranslateDomain inters srcDom destDom)
                    (329477 'end of statement')
                  }
                  if(329479 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329484 call writeln "  A[" destChunk "] = B[" inters "]")
                    }
                  }
                  { scopeless
                    const elemActual[329492] "const"(329494 call .(329496 call .(329501 call(329498 call . Src c"locArr") j) c"myElems") c"_value")
                    (329506 'end of statement')
                  }
                  (329508 call chpl__bulkTransferArray Dest destChunk elemActual inters)
                }
                (329516 call _downEndCount _coforallCount[329514] nil[44])
                (329433 'coforall on block' 0 tmp[329417])
              }
            }
          }
          label _continueLabel[329526]
          _indexOfInterest[329521]
          _iterator[329522]
        }
        label _breakLabel[329527]
        Defer
        {
          {
            (329566 call _endCountFree _coforallCount[329514])
          }
        }
        (329571 call _waitEndCount _coforallCount[329514] 0 numTasks[329515])
      }
      {
        const _coforallCount[329583] "const" "end count" "temp"
        (329639 'move' _coforallCount[329583](329636 call _endCountAlloc 0))
        unknown _indexOfInterest[329590] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329591] "expr temp" "temp"
        (329600 'move' _iterator[329591](329598 call _getIterator tmpIter[329411]))
        Defer
        {
          {
            (329616 call _freeIterator _iterator[329591])
          }
        }
        { scopeless type
          (329605 'move' _indexOfInterest[329590](329602 call iteratorIndex _iterator[329591]))
        }
        ForLoop[329592]
        {
          unknown j[329609] "coforall index var" "index var" "insert auto destroy"
          (329611 'move' j[329609] _indexOfInterest[329590])
          (329623 call _upEndCount _coforallCount[329583] 0)
          { scopeless
            { scopeless
              const tmp[329402] "const" "temp"
              (329404 'move' tmp[329402](329400 'deref'(329399 '_wide_get_locale'(329280 call(329275 call .(329272 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Src[329292] "const"(329289 IfExpr  _privatization then
                    { scopeless
                      (329287 call chpl_getPrivatizedCopy(329284 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329295 'end of statement')
                  }
                  { scopeless
                    const inters[329313] "const"(329312 call(329307 call .(329306 call(329301 call .(329298 call . Src c"dom") c"locDoms") j) c"myBlock") srcDom)
                    (329316 'end of statement')
                  }
                  { scopeless
                    const destChunk[329323] "const"(329322 call bulkCommTranslateDomain inters srcDom destDom)
                    (329326 'end of statement')
                  }
                  if(329369 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329367 call writeln "  A[" destChunk "] = B[" inters "]")
                    }
                  }
                  { scopeless
                    const elemActual[329387] "const"(329384 call .(329381 call .(329380 call(329375 call . Src c"locArr") j) c"myElems") c"_value")
                    (329390 'end of statement')
                  }
                  (329397 call chpl__bulkTransferArray Dest destChunk elemActual inters)
                }
                (329585 call _downEndCount _coforallCount[329583] nil[44])
                (329407 'coforall on block' 0 tmp[329402])
              }
            }
          }
          label _continueLabel[329595]
          _indexOfInterest[329590]
          _iterator[329591]
        }
        label _breakLabel[329596]
        Defer
        {
          {
            (329627 call _endCountFree _coforallCount[329583])
          }
        }
        (329632 call _waitEndCount _coforallCount[329583] 0)
      }
    }
    (329662 return 1)
  }
  where {
    (329230 call ! disableBlockDistBulkTransfer)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[329673](arg _mt[329684]:_MT[238], arg this[329681] :
  BlockArr, arg destDom[329671]:_any[178](?), arg Src[329676] :
  DefaultRectangularArr, arg srcDom[329679]:_any[178](?)) : _unknown[51] "method"
  {
    if(329712 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (329710 call writeln "In BlockArr.doiBulkTransferFromKnown(DefaultRectangular)")
      }
    }
    {
      unknown tmpIter[329848] "expr temp" "maybe ref" "no copy" "temp"
      (329851 'move' tmpIter[329848](329728 call(329723 call .(329720 call . dom c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[330088] "maybe param" "temp"
      (330103 'move' isRngDomArr[330088](330101 call ||(330090 call isBoundedRange tmpIter[329848])(330099 call ||(330093 call isDomain tmpIter[329848])(330096 call isArray tmpIter[329848]))))
      if isRngDomArr[330088]
      {
        const _coforallCount[329960] "const" "end count" "temp"
        (330025 'move' _coforallCount[329960](330022 call _endCountAlloc 0))
        unknown numTasks[329961] "temp"
        (330009 'move' numTasks[329961](330005 call . tmpIter[329848] c"size"))
        (330000 call _upEndCount _coforallCount[329960] 0 numTasks[329961])
        unknown _indexOfInterest[329967] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329968] "expr temp" "temp"
        (329977 'move' _iterator[329968](329975 call _getIterator tmpIter[329848]))
        Defer
        {
          {
            (329993 call _freeIterator _iterator[329968])
          }
        }
        { scopeless type
          (329982 'move' _indexOfInterest[329967](329979 call iteratorIndex _iterator[329968]))
        }
        ForLoop[329969]
        {
          unknown j[329986] "coforall index var" "index var" "insert auto destroy"
          (329988 'move' j[329986] _indexOfInterest[329967])
          { scopeless
            { scopeless
              const tmp[329854] "const" "temp"
              (329856 'move' tmp[329854](329858 'deref'(329859 '_wide_get_locale'(329867 call(329861 call .(329863 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[329875] "const"(329885 IfExpr  _privatization then
                    { scopeless
                      (329879 call chpl_getPrivatizedCopy(329880 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329887 'end of statement')
                  }
                  { scopeless
                    const inters[329889] "const"(329902 call(329891 call .(329899 call(329893 call .(329895 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (329905 'end of statement')
                  }
                  (329907 call assert(329909 call >(329911 call . inters c"size") 0))
                  { scopeless
                    const srcChunk[329916] "const"(329918 call bulkCommTranslateDomain inters destDom srcDom)
                    (329923 'end of statement')
                  }
                  if(329925 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329930 call writeln "  A[" inters "] = B[" srcChunk "]")
                    }
                  }
                  { scopeless
                    const elemActual[329938] "const"(329940 call .(329942 call .(329947 call(329944 call . Dest c"locArr") j) c"myElems") c"_value")
                    (329952 'end of statement')
                  }
                  (329954 call chpl__bulkTransferArray elemActual inters Src srcChunk)
                }
                (329962 call _downEndCount _coforallCount[329960] nil[44])
                (329870 'coforall on block' 0 tmp[329854])
              }
            }
          }
          label _continueLabel[329972]
          _indexOfInterest[329967]
          _iterator[329968]
        }
        label _breakLabel[329973]
        Defer
        {
          {
            (330012 call _endCountFree _coforallCount[329960])
          }
        }
        (330017 call _waitEndCount _coforallCount[329960] 0 numTasks[329961])
      }
      {
        const _coforallCount[330029] "const" "end count" "temp"
        (330085 'move' _coforallCount[330029](330082 call _endCountAlloc 0))
        unknown _indexOfInterest[330036] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[330037] "expr temp" "temp"
        (330046 'move' _iterator[330037](330044 call _getIterator tmpIter[329848]))
        Defer
        {
          {
            (330062 call _freeIterator _iterator[330037])
          }
        }
        { scopeless type
          (330051 'move' _indexOfInterest[330036](330048 call iteratorIndex _iterator[330037]))
        }
        ForLoop[330038]
        {
          unknown j[330055] "coforall index var" "index var" "insert auto destroy"
          (330057 'move' j[330055] _indexOfInterest[330036])
          (330069 call _upEndCount _coforallCount[330029] 0)
          { scopeless
            { scopeless
              const tmp[329839] "const" "temp"
              (329841 'move' tmp[329839](329837 'deref'(329836 '_wide_get_locale'(329738 call(329733 call .(329730 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[329750] "const"(329747 IfExpr  _privatization then
                    { scopeless
                      (329745 call chpl_getPrivatizedCopy(329742 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329753 'end of statement')
                  }
                  { scopeless
                    const inters[329771] "const"(329770 call(329765 call .(329764 call(329759 call .(329756 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (329774 'end of statement')
                  }
                  (329784 call assert(329781 call >(329777 call . inters c"size") 0))
                  { scopeless
                    const srcChunk[329792] "const"(329791 call bulkCommTranslateDomain inters destDom srcDom)
                    (329795 'end of statement')
                  }
                  if(329806 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329804 call writeln "  A[" inters "] = B[" srcChunk "]")
                    }
                  }
                  { scopeless
                    const elemActual[329824] "const"(329821 call .(329818 call .(329817 call(329812 call . Dest c"locArr") j) c"myElems") c"_value")
                    (329827 'end of statement')
                  }
                  (329834 call chpl__bulkTransferArray elemActual inters Src srcChunk)
                }
                (330031 call _downEndCount _coforallCount[330029] nil[44])
                (329844 'coforall on block' 0 tmp[329839])
              }
            }
          }
          label _continueLabel[330041]
          _indexOfInterest[330036]
          _iterator[330037]
        }
        label _breakLabel[330042]
        Defer
        {
          {
            (330073 call _endCountFree _coforallCount[330029])
          }
        }
        (330078 call _waitEndCount _coforallCount[330029] 0)
      }
    }
    (330108 return 1)
  }
  where {
    (329688 call ! disableBlockDistBulkTransfer)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiCanBulkTransferRankChange[330117](arg _mt[330122]:_MT[238], arg this[330119] :
  BlockArr) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (330125 return 1)
    }
  }
  { scopeless
    unknown debugBlockScan[330131] "config" "param" 0
    (330134 'end of statement')
  }
  function _unknown[51].doiScan[330140](arg _mt[330147]:_MT[238], arg this[330144] :
  BlockArr, arg op[330138]:_any[178](?), arg dom[330142]:_any[178](?)) : _unknown[51] "method"
  {
    unknown resType[330166] "type variable"(330165 'typeof'(330164 call(330160 call . op c"generate")))
    { scopeless
      unknown res[330177](330175 call chpl__buildArrayRuntimeType(330173 call chpl__ensureDomainExpr dom) resType)
      (330180 'end of statement')
    }
    (330182 'use' ReplicatedDist)
    { scopeless
      unknown targetLocs[330190] "ref var"(330189 call(330185 call . this c"dsiTargetLocales"))
      (330193 'end of statement')
    }
    { scopeless
      const elemPerLocDom[330207] "const"(330205 call chpl__distributed(330204 call Replicated targetLocs)(330199 call chpl__buildDomainExpr(330196 call chpl_build_bounded_range 1 1)))
      (330210 'end of statement')
    }
    { scopeless
      unknown elemPerLoc[330218](330216 call chpl__buildArrayRuntimeType(330214 call chpl__ensureDomainExpr elemPerLocDom) resType)
      (330221 'end of statement')
    }
    { scopeless
      unknown inputReady$[330231](330229 call chpl__buildArrayRuntimeType(330227 call chpl__ensureDomainExpr elemPerLocDom)(330225 call _syncvar bool[10]))
      (330234 'end of statement')
    }
    { scopeless
      unknown outputReady$[330244](330242 call chpl__buildArrayRuntimeType(330240 call chpl__ensureDomainExpr elemPerLocDom)(330238 call _syncvar bool[10]))
      (330247 'end of statement')
    }
    {
      unknown tmpIter[330687] "expr temp" "maybe ref" "no copy" "temp"
      (330690 'move' tmpIter[330687](330253 call .(330250 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[331172] "maybe param" "temp"
      (331187 'move' isRngDomArr[331172](331185 call ||(331174 call isBoundedRange tmpIter[330687])(331183 call ||(331177 call isDomain tmpIter[330687])(331180 call isArray tmpIter[330687]))))
      if isRngDomArr[331172]
      {
        const _coforallCount[331044] "const" "end count" "temp"
        (331109 'move' _coforallCount[331044](331106 call _endCountAlloc 0))
        unknown numTasks[331045] "temp"
        (331093 'move' numTasks[331045](331089 call . tmpIter[330687] c"size"))
        (331084 call _upEndCount _coforallCount[331044] 0 numTasks[331045])
        unknown _indexOfInterest[331051] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[331052] "expr temp" "temp"
        (331061 'move' _iterator[331052](331059 call _getIterator tmpIter[330687]))
        Defer
        {
          {
            (331077 call _freeIterator _iterator[331052])
          }
        }
        { scopeless type
          (331066 'move' _indexOfInterest[331051](331063 call iteratorIndex _iterator[331052]))
        }
        ForLoop[331053]
        {
          unknown locid[331070] "coforall index var" "index var" "insert auto destroy"
          (331072 'move' locid[331070] _indexOfInterest[331051])
          { scopeless
            { scopeless
              const tmp[330693] "const" "temp"
              (330695 'move' tmp[330693](330697 'deref'(330698 '_wide_get_locale'(330700 call targetLocs locid))))
              {
                {
                  { scopeless
                    const myop[330708] "const"(330713 call(330710 call . op c"clone"))
                    (330715 'end of statement')
                  }
                  { scopeless
                    unknown myLocArrDesc[330717] "ref var"(330719 call locArr locid)
                    (330722 'end of statement')
                  }
                  { scopeless
                    unknown myLocArr[330724] "ref var"(330726 call . myLocArrDesc c"myElems")
                    (330730 'end of statement')
                  }
                  { scopeless
                    const myLocDom[330732] "const" "ref var"(330734 call . myLocArr c"_dom")
                    (330738 'end of statement')
                  }
                  { scopeless
                    unknown tmp[330740] "temp"(330748 call(330742 call .(330744 call . myLocArr c"_value") c"chpl__preScan") myop res(330752 call myLocDom dom))
                    (330756 call _check_tuple_var_decl tmp[330740] 4)
                    unknown numTasks[330759](330761 call tmp[330740] 0)
                    unknown rngs[330764](330766 call tmp[330740] 1)
                    unknown state[330769](330771 call tmp[330740] 2)
                    unknown tot[330774](330776 call tmp[330740] 3)
                    (330779 'end of statement')
                  }
                  if(330781 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330786 call writeln locid ": "(330790 call _build_tuple numTasks rngs state tot))
                    }
                  }
                  (330797 call =(330799 call elemPerLoc 1) tot)
                  (330803 call =(330805 call inputReady$ 1) 1)
                  if(330809 call _cond_test(330811 call == locid(330814 call .(330816 call .(330818 call . dom c"dist") c"targetLocDom") c"low")))
                  {
                    { scopeless
                      const metaop[330825] "const"(330830 call(330827 call . op c"clone"))
                      (330832 'end of statement')
                    }
                    { scopeless
                      unknown next[330834](330836 call . metaop c"identity") resType
                      (330841 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[330843] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[330845] "expr temp" "temp"
                      (330847 'move' _iterator[330845](330850 call _getIterator(330852 call .(330854 call . dom c"dist") c"targetLocDom")))
                      Defer
                      {
                        {
                          (330860 call _freeIterator _iterator[330845])
                        }
                      }
                      { scopeless type
                        (330864 'move' _indexOfInterest[330843](330867 call iteratorIndex _iterator[330845]))
                      }
                      ForLoop[330869]
                      {
                        unknown locid[330872] "index var" "insert auto destroy"
                        (330874 'move' locid[330872] _indexOfInterest[330843])
                        {
                          { scopeless
                            const targetloc[330879] "const"(330881 call targetLocs locid)
                            (330884 'end of statement')
                          }
                          { scopeless
                            const locready[330886] "const"(330893 call(330891 call(330888 call . inputReady$ c"replicand") targetloc) 1)
                            (330896 'end of statement')
                          }
                          { scopeless
                            unknown locVal[330898] "ref var"(330905 call(330903 call(330900 call . elemPerLoc c"replicand") targetloc) 1)
                            (330908 'end of statement')
                          }
                          (330910 call <=> locVal next)
                          (330914 call =(330921 call(330919 call(330916 call . outputReady$ c"replicand") targetloc) 1) 1)
                          (330928 call(330925 call . metaop c"accumulateOntoState") next locVal)
                        }
                        label _continueLabel[330931]
                        _indexOfInterest[330843]
                        _iterator[330845]
                      }
                      label _breakLabel[330933]
                    }
                    (330936 call chpl__delete metaop)
                  }
                  { scopeless
                    const resready[330940] "const"(330942 call outputReady$ 1)
                    (330945 'end of statement')
                  }
                  { scopeless
                    const myadjust[330947] "const"(330949 call elemPerLoc 1)
                    (330952 'end of statement')
                  }
                  if(330954 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330959 call writeln locid ": myadjust = " myadjust)
                    }
                  }
                  {
                    unknown _indexOfInterest[330965] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[330967] "expr temp" "temp"
                    (330969 'move' _iterator[330967](330972 call _getIterator state))
                    Defer
                    {
                      {
                        (330976 call _freeIterator _iterator[330967])
                      }
                    }
                    { scopeless type
                      (330980 'move' _indexOfInterest[330965](330983 call iteratorIndex _iterator[330967]))
                    }
                    ForLoop[330985]
                    {
                      unknown s[330988] "index var" "insert auto destroy"
                      (330990 'move' s[330988] _indexOfInterest[330965])
                      { scopeless
                        (330998 call(330995 call . myop c"accumulateOntoState") s myadjust)
                      }
                      label _continueLabel[331001]
                      _indexOfInterest[330965]
                      _iterator[330967]
                    }
                    label _breakLabel[331003]
                  }
                  if(331006 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (331011 call writeln locid ": state = " state)
                    }
                  }
                  (331023 call(331017 call .(331019 call . myLocArr c"_value") c"chpl__postScan") op res numTasks rngs state)
                  if(331030 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (331035 call writeln locid ": " myLocArr)
                    }
                  }
                  (331041 call chpl__delete myop)
                }
                (331046 call _downEndCount _coforallCount[331044] nil[44])
                (330703 'coforall on block' 0 tmp[330693])
              }
            }
          }
          label _continueLabel[331056]
          _indexOfInterest[331051]
          _iterator[331052]
        }
        label _breakLabel[331057]
        Defer
        {
          {
            (331096 call _endCountFree _coforallCount[331044])
          }
        }
        (331101 call _waitEndCount _coforallCount[331044] 0 numTasks[331045])
      }
      {
        const _coforallCount[331113] "const" "end count" "temp"
        (331169 'move' _coforallCount[331113](331166 call _endCountAlloc 0))
        unknown _indexOfInterest[331120] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[331121] "expr temp" "temp"
        (331130 'move' _iterator[331121](331128 call _getIterator tmpIter[330687]))
        Defer
        {
          {
            (331146 call _freeIterator _iterator[331121])
          }
        }
        { scopeless type
          (331135 'move' _indexOfInterest[331120](331132 call iteratorIndex _iterator[331121]))
        }
        ForLoop[331122]
        {
          unknown locid[331139] "coforall index var" "index var" "insert auto destroy"
          (331141 'move' locid[331139] _indexOfInterest[331120])
          (331153 call _upEndCount _coforallCount[331113] 0)
          { scopeless
            { scopeless
              const tmp[330678] "const" "temp"
              (330680 'move' tmp[330678](330676 'deref'(330675 '_wide_get_locale'(330259 call targetLocs locid))))
              {
                {
                  { scopeless
                    const myop[330266] "const"(330265 call(330261 call . op c"clone"))
                    (330269 'end of statement')
                  }
                  { scopeless
                    unknown myLocArrDesc[330275] "ref var"(330274 call locArr locid)
                    (330278 'end of statement')
                  }
                  { scopeless
                    unknown myLocArr[330283] "ref var"(330280 call . myLocArrDesc c"myElems")
                    (330286 'end of statement')
                  }
                  { scopeless
                    const myLocDom[330291] "const" "ref var"(330288 call . myLocArr c"_dom")
                    (330294 'end of statement')
                  }
                  { scopeless
                    unknown tmp[330319] "temp"(330318 call(330308 call .(330305 call . myLocArr c"_value") c"chpl__preScan") myop res(330317 call myLocDom dom))
                    (330332 call _check_tuple_var_decl tmp[330319] 4)
                    unknown numTasks[330295](330320 call tmp[330319] 0)
                    unknown rngs[330297](330323 call tmp[330319] 1)
                    unknown state[330299](330326 call tmp[330319] 2)
                    unknown tot[330301](330329 call tmp[330319] 3)
                    (330337 'end of statement')
                  }
                  if(330352 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330350 call writeln locid ": "(330348 call _build_tuple numTasks rngs state tot))
                    }
                  }
                  (330362 call =(330360 call elemPerLoc 1) tot)
                  (330370 call =(330368 call inputReady$ 1) 1)
                  if(330520 call _cond_test(330384 call == locid(330381 call .(330378 call .(330375 call . dom c"dist") c"targetLocDom") c"low")))
                  {
                    { scopeless
                      const metaop[330392] "const"(330391 call(330387 call . op c"clone"))
                      (330395 'end of statement')
                    }
                    { scopeless
                      unknown next[330402](330399 call . metaop c"identity") resType
                      (330405 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[330481] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[330482] "expr temp" "temp"
                      (330491 'move' _iterator[330482](330489 call _getIterator(330411 call .(330408 call . dom c"dist") c"targetLocDom")))
                      Defer
                      {
                        {
                          (330508 call _freeIterator _iterator[330482])
                        }
                      }
                      { scopeless type
                        (330497 'move' _indexOfInterest[330481](330494 call iteratorIndex _iterator[330482]))
                      }
                      ForLoop[330483]
                      {
                        unknown locid[330501] "index var" "insert auto destroy"
                        (330503 'move' locid[330501] _indexOfInterest[330481])
                        {
                          { scopeless
                            const targetloc[330418] "const"(330417 call targetLocs locid)
                            (330421 'end of statement')
                          }
                          { scopeless
                            const locready[330435] "const"(330434 call(330431 call(330426 call . inputReady$ c"replicand") targetloc) 1)
                            (330438 'end of statement')
                          }
                          { scopeless
                            unknown locVal[330449] "ref var"(330448 call(330445 call(330440 call . elemPerLoc c"replicand") targetloc) 1)
                            (330452 'end of statement')
                          }
                          (330455 call <=> locVal next)
                          (330469 call =(330467 call(330464 call(330459 call . outputReady$ c"replicand") targetloc) 1) 1)
                          (330479 call(330473 call . metaop c"accumulateOntoState") next locVal)
                        }
                        label _continueLabel[330486]
                        _indexOfInterest[330481]
                        _iterator[330482]
                      }
                      label _breakLabel[330487]
                    }
                    (330517 call chpl__delete metaop)
                  }
                  { scopeless
                    const resready[330528] "const"(330527 call outputReady$ 1)
                    (330531 'end of statement')
                  }
                  { scopeless
                    const myadjust[330536] "const"(330535 call elemPerLoc 1)
                    (330539 'end of statement')
                  }
                  if(330564 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330562 call writeln locid ": myadjust = " myadjust)
                    }
                  }
                  {
                    unknown _indexOfInterest[330580] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[330581] "expr temp" "temp"
                    (330590 'move' _iterator[330581](330588 call _getIterator state))
                    Defer
                    {
                      {
                        (330606 call _freeIterator _iterator[330581])
                      }
                    }
                    { scopeless type
                      (330595 'move' _indexOfInterest[330580](330592 call iteratorIndex _iterator[330581]))
                    }
                    ForLoop[330582]
                    {
                      unknown s[330599] "index var" "insert auto destroy"
                      (330601 'move' s[330599] _indexOfInterest[330580])
                      { scopeless
                        (330578 call(330572 call . myop c"accumulateOntoState") s myadjust)
                      }
                      label _continueLabel[330585]
                      _indexOfInterest[330580]
                      _iterator[330581]
                    }
                    label _breakLabel[330586]
                  }
                  if(330637 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330635 call writeln locid ": state = " state)
                    }
                  }
                  (330655 call(330646 call .(330643 call . myLocArr c"_value") c"chpl__postScan") op res numTasks rngs state)
                  if(330665 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330663 call writeln locid ": " myLocArr)
                    }
                  }
                  (330672 call chpl__delete myop)
                }
                (331115 call _downEndCount _coforallCount[331113] nil[44])
                (330683 'coforall on block' 0 tmp[330678])
              }
            }
          }
          label _continueLabel[331125]
          _indexOfInterest[331120]
          _iterator[331121]
        }
        label _breakLabel[331126]
        Defer
        {
          {
            (331157 call _endCountFree _coforallCount[331113])
          }
        }
        (331162 call _waitEndCount _coforallCount[331113] 0)
      }
    }
    (331193 call chpl__delete op)
    (331197 return res)
  }
  where {
    (330157 call &&(330151 call == rank 1)(330156 call chpl__scanStateResTypesMatch op))
  }
  function newBlockDom[331208](arg dom[331205] :
  _domain) : _unknown[51]
  {
    (331217 return(331215 call chpl__distributed(331214 call Block dom) dom))
  }
  function newBlockArr[331228](arg dom[331225] :
  _domain, arg eltType[331230]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown D[331236](331235 call newBlockDom dom)
      (331239 'end of statement')
    }
    { scopeless
      unknown A[331248](331246 call chpl__buildArrayRuntimeType(331244 call chpl__ensureDomainExpr D) eltType)
      (331251 'end of statement')
    }
    (331253 return A)
  }
  function newBlockDom[331265](arg rng[331261] ... :
  range) : _unknown[51]
  {
    (331275 return(331274 call newBlockDom(331271 call chpl__buildDomainExpr(331269 'expand_tuple' rng))))
  }
  function newBlockArr[331288](arg rng[331284] ... :
  range, arg eltType[331290]:_any[178](?)) : _unknown[51]
  {
    (331301 return(331300 call newBlockArr(331296 call chpl__buildDomainExpr(331294 'expand_tuple' rng)) eltType))
  }
}