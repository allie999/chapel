AST dump for ChapelTaskDataHelp after pass replaceArrayAccessesWithRefTemps.
Module use list: ChapelStandard 

{
  function chpl__init_ChapelTaskDataHelp[416004]() : void[4] "insert line file info" "module init" "resolved"
  {
    (513368 return _void[55])
  }
  type chpl_task_infoChapel_t[88580]
  function chpl_task_getInfoChapel[88584]() : c_ptr(chpl_task_infoChapel_t)[1414662] "extern" "local args" "no fn body" "resolved" "fn synchronization free" "no return value for void"
  {
    val ret[513352]:c_ptr(chpl_task_infoChapel_t)[1414662] "RVV" "temp"
    (513354 return ret[513352])
  }
  function chpl_task_getInfoChapelInBundle[88599](const in arg args[88596]:chpl_task_bundle_p[209381]) : c_ptr(chpl_task_infoChapel_t)[1414662] "extern" "local args" "no fn body" "resolved" "fn synchronization free" "no return value for void"
  {
    val ret[513358]:c_ptr(chpl_task_infoChapel_t)[1414662] "RVV" "temp"
    (513360 return ret[513358])
  }
  function chpl_task_data_setup[88614](const in arg args[88611]:chpl_task_bundle_p[209381], const in arg infoChapel[88620]:c_ptr(chpl_task_infoChapel_t)[1414662]) : void[4] "resolved" "no return value for void"
  {
    val call_tmp[631952]:c_ptr(chpl_task_infoChapel_t)[1414662] "dead after last mention" "expr temp" "maybe param" "temp"
    (631955 'move' call_tmp[631952](88627 call chpl_task_getInfoChapelInBundle[88599] args[88611]))
    val call_tmp[631957]:uint(64)[115] "dead after last mention" "expr temp" "maybe param" "temp"
    (631960 'move' call_tmp[631957](88633 call c_sizeof[1356962]))
    val coerce_tmp[1415190]:c_void_ptr[149] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (1415196 'move' coerce_tmp[1415190](1415192 'cast' c_void_ptr[149] call_tmp[631952]))
    val coerce_tmp[1415198]:c_void_ptr[149] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (1415204 'move' coerce_tmp[1415198](1415200 'cast' c_void_ptr[149] infoChapel[88620]))
    (88634 call c_memcpy[956084] coerce_tmp[1415190] coerce_tmp[1415198] call_tmp[631957])
    (513362 return _void[55])
  }
  function chpl_save_task_error[1230695](const in arg e[1230697]:unmanaged _EndCountBase[1230693], const in arg err[1230699]:unmanaged Error?[415381]) : void[4] "instantiated generic" "invisible fn" "resolved" "task complete impl fn" "no return value for void"
  {
    val call_tmp[1230705]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    val coerce_tmp[1230755]:borrowed object?[415375] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (1230760 'move' coerce_tmp[1230755](1230757 'cast' borrowed object?[415375] err[1230699]))
    (1230707 'move' call_tmp[1230705](1230710 call !=[1485] coerce_tmp[1230755] nil[44]))
    val call_tmp[1230713]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (1230715 'move' call_tmp[1230713] call_tmp[1230705])
    if call_tmp[1230713]
    {
      ref call_tmp[1230722]:_ref(chpl_TaskErrors)[940959] "dead after last mention" "maybe param" "temp"
      val coerce_tmp[1230773]:_EndCountBase[12717] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1230778 'move' coerce_tmp[1230773](1230775 'cast' _EndCountBase[12717] e[1230697]))
      (1230724 'move' call_tmp[1230722](1230727 call errors[752037] coerce_tmp[1230773]))
      val call_tmp[1230730]:unmanaged Error[415512] "dead after last mention" "expr temp" "maybe param" "temp"
      (1230732 'move' call_tmp[1230730](1230735 call postfix![967793] err[1230699]))
      (1230741 call append[168282] call_tmp[1230722] call_tmp[1230730])
    }
    (1230744 return _void[55])
  }
}