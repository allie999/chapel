AST dump for ChapelLocks after pass removeUnnecessaryAutoCopyCalls.
Module use list: Atomics ChapelBase MemConsistency 

{
  type _class_localson_fn[2035137] val _runtime_hdr[2035138]:chpl_comm_on_bundle_t[209301] val _0_tmp[2035140]:chpl_localeID_t[209294] ref _1_this[2035142]:chpl_LocalSpinlock[187386]
  function chpl__init_ChapelLocks[415958]() : void[4] "insert line file info" "module init" "resolved"
  {
    (523921 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[940982].lock[187277](ref arg this[187388]:_ref(chpl_LocalSpinlock)[940982]) : void[4] "inline" "method" "primary method" "resolved" "no return value for void"
  {
    const-val tmp[187356]:chpl_localeID_t[209294] "dead after last mention" "const" "temp"
    const-val call_tmp[690407]:chpl_localeID_t[209294] "dead after last mention" "expr temp" "maybe param" "temp"
    (690410 'move' call_tmp[690407](187353 '_wide_get_locale' this[187388]))
    (187358 'move' tmp[187356] call_tmp[690407])
    val isdirect[2035121]:bool[10] "temp"
    (2035126 'move' isdirect[2035121](2035123 call chpl_doDirectExecuteOn[187423] tmp[187356]))
    if isdirect[2035121]
    {
      (2035130 call on_fn[935384] this[187388])
    }
    {
      val _args_foron_fn[2035145]:_class_localson_fn[2035137] "temp"
      (2035149 'move' _args_foron_fn[2035145](2035147 'stack allocate class' _class_localson_fn[2035137]))
      (2035151 '.=' _args_foron_fn[2035145] _0_tmp[2035140] tmp[187356])
      ref tmp[2035155]:chpl_LocalSpinlock[187386] "temp"
      (2035159 'move' tmp[2035155](2035157 'set reference' this[187388]))
      (2035161 '.=' _args_foron_fn[2035145] _1_this[2035142] tmp[2035155])
      val _args_vforon_fn[2035165]:c_void_ptr[149] "temp"
      (2035169 'move' _args_vforon_fn[2035165](2035167 'cast_to_void_star' _args_foron_fn[2035145]))
      val _args_sizeon_fn[2035171]:int(64)[13] "temp"
      (2035175 'move' _args_sizeon_fn[2035171](2035173 'sizeof_bundle' _class_localson_fn[2035137]))
      on(2035207 call wrapon_fn[2035177] tmp[187356] _args_vforon_fn[2035165] _args_sizeon_fn[2035171] _args_foron_fn[2035145])
    }
    {
    }
    (523917 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[940982].unlock[187369](ref arg this[187392]:_ref(chpl_LocalSpinlock)[940982]) : void[4] "inline" "method" "primary method" "resolved" "no return value for void"
  {
    ref call_tmp[690480]:_ref(AtomicBool)[941093] "dead after last mention" "maybe param" "temp"
    (690483 'move' call_tmp[690480](361803 call l[820206] this[187392]))
    (187380 call clear[1232406] call_tmp[690480])
    (523919 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[940982].l[820206](ref arg this[820210]:_ref(chpl_LocalSpinlock)[940982]) ref : _ref(AtomicBool)[941093] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this" "resolved" "fn synchronization free"
  {
    ref ret[820220]:_ref(AtomicBool)[941093] "dead after last mention" "RVV" "temp"
    ref call_tmp[820227]:_ref(AtomicBool)[941093] "dead after last mention" "maybe param" "temp"
    (820230 'move' call_tmp[820227](820214 '.' this[820210] l[187271]))
    (820225 'move' ret[820220] call_tmp[820227])
    (820222 return ret[820220])
  }
  function _ref(chpl_LocalSpinlock)[940982].init[820232](ref arg this[820235]:_ref(chpl_LocalSpinlock)[940982], const  ref arg l[820238]:AtomicBool[45874]) : void[4] "compiler generated" "last resort" "method" "primary method" "resolved" "suppress lvalue error"
  {
    val _formal_tmp_l[945066]:AtomicBool[45874] "dead at end of block" "no auto destroy" "no copy" "temp"
    (945069 'move' _formal_tmp_l[945066] l[820238])
    (820254 '.=' this[820235] l[187271] _formal_tmp_l[945066])
    (820258 return _void[55])
  }
  function init_default_l[944739](ref arg _retArg[1788795]:_ref(AtomicBool)[941093]) : void[4] "compiler generated" "default actual function" "fn returns via _retArg" "inline" "invisible fn" "last resort" "lineno ok" "maybe param" "maybe type" "method" "primary method" "resolved" "was compiler generated"
  {
    const-val ret[944741]:AtomicBool[45874] "dead after last mention" "RVV" "maybe param" "temp"
    const-val l[944746]:AtomicBool[45874] "dead after last mention" "expr temp" "maybe param" "suppress lvalue error" "temp" "user variable name"
    val _formal_type[944748]:AtomicBool[45874] "dead after last mention" "temp" "type variable"
    (944763 call init[44785] l[944746])
    (944759 'move' ret[944741] l[944746])
    (1788797 '=' _retArg[1788795] ret[944741])
    (1788799 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[940982].deinit[820305](const  ref arg this[820309]:_ref(chpl_LocalSpinlock)[940982]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method" "resolved"
  {
    label _enddeinit[1771895]
    ref _field_destructor_tmp_[1771893]:_ref(AtomicBool)[941093] "temp"
    (1771900 'move' _field_destructor_tmp_[1771893](1771897 '.' this[820309] l[187271]))
    (1771902 call deinit[44860] _field_destructor_tmp_[1771893])
    (820317 return _void[55])
  }
  type chpl_LocalSpinlock[187386] val l[187271]:AtomicBool[45874]
  function on_fn[935384](ref arg this[1765454]:_ref(chpl_LocalSpinlock)[940982]) : void[4] "on" "resolved"
  {
    {
      val tmp[187302]:bool[10] "dead after last mention" "temp"
      const-val tmp[429436]:bool[10] "dead after last mention" "maybe param" "temp"
      ref call_tmp[690414]:_ref(AtomicBool)[941093] "dead after last mention" "maybe param" "temp"
      (690417 'move' call_tmp[690414](361792 call l[820206] this[1765454]))
      (429447 'move' tmp[429436](187340 call read[1230680] call_tmp[690414]))
      val tmp[572003]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
      const-val tmp[572004]:bool[10] "dead after last mention" "maybe param" "temp"
      const-val call_tmp[690426]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (690429 'move' call_tmp[690426] tmp[429436])
      (572009 'move' tmp[572004] call_tmp[690426])
      if tmp[572004]
      {
        (572014 'move' tmp[572003] 1)
      }
      {
        const-val tmp[572016]:bool[10] "dead after last mention" "expr temp" "maybe param" "no auto destroy" "temp"
        ref call_tmp[690433]:_ref(AtomicBool)[941093] "dead after last mention" "maybe param" "temp"
        (690436 'move' call_tmp[690433](361797 call l[820206] this[1765454]))
        const-val call_tmp[690440]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (690443 'move' call_tmp[690440](187345 call testAndSet[1231556] call_tmp[690433]))
        (572018 'move' tmp[572016] call_tmp[690440])
        (572023 'move' tmp[572003] tmp[572016])
      }
      (187350 'move' tmp[187302] tmp[572003])
      WhileDo[187307] hazard
      {
        (187300 call chpl_task_yield[209642])
        label _continueLabel[187305]
        const-val tmp[429415]:bool[10] "dead after last mention" "maybe param" "temp"
        ref call_tmp[690447]:_ref(AtomicBool)[941093] "dead after last mention" "maybe param" "temp"
        (690450 'move' call_tmp[690447](361781 call l[820206] this[1765454]))
        (429426 'move' tmp[429415](187318 call read[1230680] call_tmp[690447]))
        val tmp[572030]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
        const-val tmp[572031]:bool[10] "dead after last mention" "maybe param" "temp"
        const-val call_tmp[690459]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (690462 'move' call_tmp[690459] tmp[429415])
        (572036 'move' tmp[572031] call_tmp[690459])
        if tmp[572031]
        {
          (572041 'move' tmp[572030] 1)
        }
        {
          const-val tmp[572043]:bool[10] "dead after last mention" "expr temp" "maybe param" "no auto destroy" "temp"
          ref call_tmp[690466]:_ref(AtomicBool)[941093] "dead after last mention" "maybe param" "temp"
          (690469 'move' call_tmp[690466](361786 call l[820206] this[1765454]))
          const-val call_tmp[690473]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
          (690476 'move' call_tmp[690473](187323 call testAndSet[1231556] call_tmp[690466]))
          (572045 'move' tmp[572043] call_tmp[690473])
          (572050 'move' tmp[572030] tmp[572043])
        }
        (187328 'move' tmp[187302] tmp[572030])
        tmp[187302]
      }
      label _breakLabel[187306]
    }
    (935391 return _void[55])
  }
  function wrapon_fn[2035177](const in arg dummy_locale_arg[2035179]:chpl_localeID_t[209294], in arg buf[2035181]:c_void_ptr[149], in arg buf_size[2035183]:int(64)[13], in arg c[2035185]:_class_localson_fn[2035137]) : void[4] "on block"
  {
    val _0_tmp[2035190]:chpl_localeID_t[209294] "temp"
    (2035195 'move' _0_tmp[2035190](2035192 '.v' c[2035185] _0_tmp[2035140]))
    ref _1_this[2035197]:chpl_LocalSpinlock[187386] "temp"
    (2035202 'move' _1_this[2035197](2035199 '.v' c[2035185] _1_this[2035142]))
    (2035188 call on_fn[935384] _1_this[2035197])
    (2035205 return _void[55])
  }
}