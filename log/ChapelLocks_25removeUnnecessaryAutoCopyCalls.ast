AST dump for ChapelLocks after pass removeUnnecessaryAutoCopyCalls.
Module use list: Atomics ChapelBase MemConsistency 

{
  type _class_localson_fn[2052046] val _runtime_hdr[2052047]:chpl_comm_on_bundle_t[209359] val _0_tmp[2052049]:chpl_localeID_t[209352] ref _1_this[2052051]:chpl_LocalSpinlock[187432]
  function chpl__init_ChapelLocks[416085]() : void[4] "insert line file info" "module init" "resolved"
  {
    (524053 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[941090].lock[187323](ref arg this[187434]:_ref(chpl_LocalSpinlock)[941090]) : void[4] "inline" "method" "primary method" "resolved" "no return value for void"
  {
    const-val tmp[187402]:chpl_localeID_t[209352] "dead after last mention" "const" "temp"
    const-val call_tmp[690520]:chpl_localeID_t[209352] "dead after last mention" "expr temp" "maybe param" "temp"
    (690523 'move' call_tmp[690520](187399 '_wide_get_locale' this[187434]))
    (187404 'move' tmp[187402] call_tmp[690520])
    val isdirect[2052030]:bool[10] "temp"
    (2052035 'move' isdirect[2052030](2052032 call chpl_doDirectExecuteOn[187469] tmp[187402]))
    if isdirect[2052030]
    {
      (2052039 call on_fn[935492] this[187434])
    }
    {
      val _args_foron_fn[2052054]:_class_localson_fn[2052046] "temp"
      (2052058 'move' _args_foron_fn[2052054](2052056 'stack allocate class' _class_localson_fn[2052046]))
      (2052060 '.=' _args_foron_fn[2052054] _0_tmp[2052049] tmp[187402])
      ref tmp[2052064]:chpl_LocalSpinlock[187432] "temp"
      (2052068 'move' tmp[2052064](2052066 'set reference' this[187434]))
      (2052070 '.=' _args_foron_fn[2052054] _1_this[2052051] tmp[2052064])
      val _args_vforon_fn[2052074]:c_void_ptr[149] "temp"
      (2052078 'move' _args_vforon_fn[2052074](2052076 'cast_to_void_star' _args_foron_fn[2052054]))
      val _args_sizeon_fn[2052080]:int(64)[13] "temp"
      (2052084 'move' _args_sizeon_fn[2052080](2052082 'sizeof_bundle' _class_localson_fn[2052046]))
      on(2052116 call wrapon_fn[2052086] tmp[187402] _args_vforon_fn[2052074] _args_sizeon_fn[2052080] _args_foron_fn[2052054])
    }
    {
    }
    (524049 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[941090].unlock[187415](ref arg this[187438]:_ref(chpl_LocalSpinlock)[941090]) : void[4] "inline" "method" "primary method" "resolved" "no return value for void"
  {
    ref call_tmp[690593]:_ref(AtomicBool)[941201] "dead after last mention" "maybe param" "temp"
    (690596 'move' call_tmp[690593](361931 call l[820314] this[187438]))
    (187426 call clear[1232514] call_tmp[690593])
    (524051 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[941090].l[820314](ref arg this[820318]:_ref(chpl_LocalSpinlock)[941090]) ref : _ref(AtomicBool)[941201] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this" "resolved" "fn synchronization free"
  {
    ref ret[820328]:_ref(AtomicBool)[941201] "dead after last mention" "RVV" "temp"
    ref call_tmp[820335]:_ref(AtomicBool)[941201] "dead after last mention" "maybe param" "temp"
    (820338 'move' call_tmp[820335](820322 '.' this[820318] l[187317]))
    (820333 'move' ret[820328] call_tmp[820335])
    (820330 return ret[820328])
  }
  function _ref(chpl_LocalSpinlock)[941090].init[820340](ref arg this[820343]:_ref(chpl_LocalSpinlock)[941090], const  ref arg l[820346]:AtomicBool[45877]) : void[4] "compiler generated" "last resort" "method" "primary method" "resolved" "suppress lvalue error"
  {
    val _formal_tmp_l[945174]:AtomicBool[45877] "dead at end of block" "no auto destroy" "no copy" "temp"
    (945177 'move' _formal_tmp_l[945174] l[820346])
    (820362 '.=' this[820343] l[187317] _formal_tmp_l[945174])
    (820366 return _void[55])
  }
  function init_default_l[944847](ref arg _retArg[1805286]:_ref(AtomicBool)[941201]) : void[4] "compiler generated" "default actual function" "fn returns via _retArg" "inline" "invisible fn" "last resort" "lineno ok" "maybe param" "maybe type" "method" "primary method" "resolved" "was compiler generated"
  {
    const-val ret[944849]:AtomicBool[45877] "dead after last mention" "RVV" "maybe param" "temp"
    const-val l[944854]:AtomicBool[45877] "dead after last mention" "expr temp" "maybe param" "suppress lvalue error" "temp" "user variable name"
    val _formal_type[944856]:AtomicBool[45877] "dead after last mention" "temp" "type variable"
    (944871 call init[44788] l[944854])
    (944867 'move' ret[944849] l[944854])
    (1805288 '=' _retArg[1805286] ret[944849])
    (1805290 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[941090].deinit[820413](const  ref arg this[820417]:_ref(chpl_LocalSpinlock)[941090]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method" "resolved"
  {
    label _enddeinit[1788328]
    ref _field_destructor_tmp_[1788326]:_ref(AtomicBool)[941201] "temp"
    (1788333 'move' _field_destructor_tmp_[1788326](1788330 '.' this[820417] l[187317]))
    (1788335 call deinit[44863] _field_destructor_tmp_[1788326])
    (820425 return _void[55])
  }
  type chpl_LocalSpinlock[187432] val l[187317]:AtomicBool[45877]
  function on_fn[935492](ref arg this[1781255]:_ref(chpl_LocalSpinlock)[941090]) : void[4] "on" "resolved"
  {
    {
      val tmp[187348]:bool[10] "dead after last mention" "temp"
      const-val tmp[429563]:bool[10] "dead after last mention" "maybe param" "temp"
      ref call_tmp[690527]:_ref(AtomicBool)[941201] "dead after last mention" "maybe param" "temp"
      (690530 'move' call_tmp[690527](361920 call l[820314] this[1781255]))
      (429574 'move' tmp[429563](187386 call read[1230788] call_tmp[690527]))
      val tmp[572116]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
      const-val tmp[572117]:bool[10] "dead after last mention" "maybe param" "temp"
      const-val call_tmp[690539]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (690542 'move' call_tmp[690539] tmp[429563])
      (572122 'move' tmp[572117] call_tmp[690539])
      if tmp[572117]
      {
        (572127 'move' tmp[572116] 1)
      }
      {
        const-val tmp[572129]:bool[10] "dead after last mention" "expr temp" "maybe param" "no auto destroy" "temp"
        ref call_tmp[690546]:_ref(AtomicBool)[941201] "dead after last mention" "maybe param" "temp"
        (690549 'move' call_tmp[690546](361925 call l[820314] this[1781255]))
        const-val call_tmp[690553]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (690556 'move' call_tmp[690553](187391 call testAndSet[1231664] call_tmp[690546]))
        (572131 'move' tmp[572129] call_tmp[690553])
        (572136 'move' tmp[572116] tmp[572129])
      }
      (187396 'move' tmp[187348] tmp[572116])
      WhileDo[187353] hazard
      {
        (187346 call chpl_task_yield[209700])
        label _continueLabel[187351]
        const-val tmp[429542]:bool[10] "dead after last mention" "maybe param" "temp"
        ref call_tmp[690560]:_ref(AtomicBool)[941201] "dead after last mention" "maybe param" "temp"
        (690563 'move' call_tmp[690560](361909 call l[820314] this[1781255]))
        (429553 'move' tmp[429542](187364 call read[1230788] call_tmp[690560]))
        val tmp[572143]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
        const-val tmp[572144]:bool[10] "dead after last mention" "maybe param" "temp"
        const-val call_tmp[690572]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (690575 'move' call_tmp[690572] tmp[429542])
        (572149 'move' tmp[572144] call_tmp[690572])
        if tmp[572144]
        {
          (572154 'move' tmp[572143] 1)
        }
        {
          const-val tmp[572156]:bool[10] "dead after last mention" "expr temp" "maybe param" "no auto destroy" "temp"
          ref call_tmp[690579]:_ref(AtomicBool)[941201] "dead after last mention" "maybe param" "temp"
          (690582 'move' call_tmp[690579](361914 call l[820314] this[1781255]))
          const-val call_tmp[690586]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
          (690589 'move' call_tmp[690586](187369 call testAndSet[1231664] call_tmp[690579]))
          (572158 'move' tmp[572156] call_tmp[690586])
          (572163 'move' tmp[572143] tmp[572156])
        }
        (187374 'move' tmp[187348] tmp[572143])
        tmp[187348]
      }
      label _breakLabel[187352]
    }
    (935499 return _void[55])
  }
  function wrapon_fn[2052086](const in arg dummy_locale_arg[2052088]:chpl_localeID_t[209352], in arg buf[2052090]:c_void_ptr[149], in arg buf_size[2052092]:int(64)[13], in arg c[2052094]:_class_localson_fn[2052046]) : void[4] "on block"
  {
    val _0_tmp[2052099]:chpl_localeID_t[209352] "temp"
    (2052104 'move' _0_tmp[2052099](2052101 '.v' c[2052094] _0_tmp[2052049]))
    ref _1_this[2052106]:chpl_LocalSpinlock[187432] "temp"
    (2052111 'move' _1_this[2052106](2052108 '.v' c[2052094] _1_this[2052051]))
    (2052097 call on_fn[935492] _1_this[2052106])
    (2052114 return _void[55])
  }
}