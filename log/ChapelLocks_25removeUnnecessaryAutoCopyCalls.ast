AST dump for ChapelLocks after pass removeUnnecessaryAutoCopyCalls.
Module use list: Atomics ChapelBase MemConsistency 

{
  type _class_localson_fn[2198955] val _runtime_hdr[2198956]:chpl_comm_on_bundle_t[209359] val _0_tmp[2198958]:chpl_localeID_t[209352] ref _1_this[2198960]:chpl_LocalSpinlock[187432]
  function chpl__init_ChapelLocks[416163]() : void[4] "insert line file info" "module init" "resolved"
  {
    (524136 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[941260].lock[187323](ref arg this[187434]:_ref(chpl_LocalSpinlock)[941260]) : void[4] "inline" "method" "primary method" "resolved" "no return value for void"
  {
    const-val tmp[187402]:chpl_localeID_t[209352] "dead after last mention" "const" "temp"
    const-val call_tmp[690623]:chpl_localeID_t[209352] "dead after last mention" "expr temp" "maybe param" "temp"
    (690626 'move' call_tmp[690623](187399 '_wide_get_locale' this[187434]))
    (187404 'move' tmp[187402] call_tmp[690623])
    val isdirect[2198939]:bool[10] "temp"
    (2198944 'move' isdirect[2198939](2198941 call chpl_doDirectExecuteOn[187469] tmp[187402]))
    if isdirect[2198939]
    {
      (2198948 call on_fn[935662] this[187434])
    }
    {
      val _args_foron_fn[2198963]:_class_localson_fn[2198955] "temp"
      (2198967 'move' _args_foron_fn[2198963](2198965 'stack allocate class' _class_localson_fn[2198955]))
      (2198969 '.=' _args_foron_fn[2198963] _0_tmp[2198958] tmp[187402])
      ref tmp[2198973]:chpl_LocalSpinlock[187432] "temp"
      (2198977 'move' tmp[2198973](2198975 'set reference' this[187434]))
      (2198979 '.=' _args_foron_fn[2198963] _1_this[2198960] tmp[2198973])
      val _args_vforon_fn[2198983]:c_void_ptr[149] "temp"
      (2198987 'move' _args_vforon_fn[2198983](2198985 'cast_to_void_star' _args_foron_fn[2198963]))
      val _args_sizeon_fn[2198989]:int(64)[13] "temp"
      (2198993 'move' _args_sizeon_fn[2198989](2198991 'sizeof_bundle' _class_localson_fn[2198955]))
      on(2199025 call wrapon_fn[2198995] tmp[187402] _args_vforon_fn[2198983] _args_sizeon_fn[2198989] _args_foron_fn[2198963])
    }
    {
    }
    (524132 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[941260].unlock[187415](ref arg this[187438]:_ref(chpl_LocalSpinlock)[941260]) : void[4] "inline" "method" "primary method" "resolved" "no return value for void"
  {
    ref call_tmp[690696]:_ref(AtomicBool)[941371] "dead after last mention" "maybe param" "temp"
    (690699 'move' call_tmp[690696](362002 call l[820484] this[187438]))
    (187426 call clear[1232684] call_tmp[690696])
    (524134 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[941260].l[820484](ref arg this[820488]:_ref(chpl_LocalSpinlock)[941260]) ref : _ref(AtomicBool)[941371] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this" "resolved" "fn synchronization free"
  {
    ref ret[820498]:_ref(AtomicBool)[941371] "dead after last mention" "RVV" "temp"
    ref call_tmp[820505]:_ref(AtomicBool)[941371] "dead after last mention" "maybe param" "temp"
    (820508 'move' call_tmp[820505](820492 '.' this[820488] l[187317]))
    (820503 'move' ret[820498] call_tmp[820505])
    (820500 return ret[820498])
  }
  function _ref(chpl_LocalSpinlock)[941260].init[820510](ref arg this[820513]:_ref(chpl_LocalSpinlock)[941260], const  ref arg l[820516]:AtomicBool[45877]) : void[4] "compiler generated" "last resort" "method" "primary method" "resolved" "suppress lvalue error"
  {
    val _formal_tmp_l[945344]:AtomicBool[45877] "dead at end of block" "no auto destroy" "no copy" "temp"
    (945347 'move' _formal_tmp_l[945344] l[820516])
    (820532 '.=' this[820513] l[187317] _formal_tmp_l[945344])
    (820536 return _void[55])
  }
  function init_default_l[945017](ref arg _retArg[1907850]:_ref(AtomicBool)[941371]) : void[4] "compiler generated" "default actual function" "fn returns via _retArg" "inline" "invisible fn" "last resort" "lineno ok" "maybe param" "maybe type" "method" "primary method" "resolved" "was compiler generated"
  {
    const-val ret[945019]:AtomicBool[45877] "dead after last mention" "RVV" "maybe param" "temp"
    const-val l[945024]:AtomicBool[45877] "dead after last mention" "expr temp" "maybe param" "suppress lvalue error" "temp" "user variable name"
    val _formal_type[945026]:AtomicBool[45877] "dead after last mention" "temp" "type variable"
    (945041 call init[44788] l[945024])
    (945037 'move' ret[945019] l[945024])
    (1907852 '=' _retArg[1907850] ret[945019])
    (1907854 return _void[55])
  }
  function _ref(chpl_LocalSpinlock)[941260].deinit[820583](const  ref arg this[820587]:_ref(chpl_LocalSpinlock)[941260]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method" "resolved"
  {
    label _enddeinit[1890496]
    ref _field_destructor_tmp_[1890494]:_ref(AtomicBool)[941371] "temp"
    (1890501 'move' _field_destructor_tmp_[1890494](1890498 '.' this[820587] l[187317]))
    (1890503 call deinit[44863] _field_destructor_tmp_[1890494])
    (820595 return _void[55])
  }
  type chpl_LocalSpinlock[187432] val l[187317]:AtomicBool[45877]
  function on_fn[935662](ref arg this[1882176]:_ref(chpl_LocalSpinlock)[941260]) : void[4] "on" "resolved"
  {
    {
      val tmp[187348]:bool[10] "dead after last mention" "temp"
      const-val tmp[429641]:bool[10] "dead after last mention" "maybe param" "temp"
      ref call_tmp[690630]:_ref(AtomicBool)[941371] "dead after last mention" "maybe param" "temp"
      (690633 'move' call_tmp[690630](361991 call l[820484] this[1882176]))
      (429652 'move' tmp[429641](187386 call read[1230958] call_tmp[690630]))
      val tmp[572219]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
      const-val tmp[572220]:bool[10] "dead after last mention" "maybe param" "temp"
      const-val call_tmp[690642]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (690645 'move' call_tmp[690642] tmp[429641])
      (572225 'move' tmp[572220] call_tmp[690642])
      if tmp[572220]
      {
        (572230 'move' tmp[572219] 1)
      }
      {
        const-val tmp[572232]:bool[10] "dead after last mention" "expr temp" "maybe param" "no auto destroy" "temp"
        ref call_tmp[690649]:_ref(AtomicBool)[941371] "dead after last mention" "maybe param" "temp"
        (690652 'move' call_tmp[690649](361996 call l[820484] this[1882176]))
        const-val call_tmp[690656]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (690659 'move' call_tmp[690656](187391 call testAndSet[1231834] call_tmp[690649]))
        (572234 'move' tmp[572232] call_tmp[690656])
        (572239 'move' tmp[572219] tmp[572232])
      }
      (187396 'move' tmp[187348] tmp[572219])
      WhileDo[187353] hazard
      {
        (187346 call chpl_task_yield[209700])
        label _continueLabel[187351]
        const-val tmp[429620]:bool[10] "dead after last mention" "maybe param" "temp"
        ref call_tmp[690663]:_ref(AtomicBool)[941371] "dead after last mention" "maybe param" "temp"
        (690666 'move' call_tmp[690663](361980 call l[820484] this[1882176]))
        (429631 'move' tmp[429620](187364 call read[1230958] call_tmp[690663]))
        val tmp[572246]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
        const-val tmp[572247]:bool[10] "dead after last mention" "maybe param" "temp"
        const-val call_tmp[690675]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (690678 'move' call_tmp[690675] tmp[429620])
        (572252 'move' tmp[572247] call_tmp[690675])
        if tmp[572247]
        {
          (572257 'move' tmp[572246] 1)
        }
        {
          const-val tmp[572259]:bool[10] "dead after last mention" "expr temp" "maybe param" "no auto destroy" "temp"
          ref call_tmp[690682]:_ref(AtomicBool)[941371] "dead after last mention" "maybe param" "temp"
          (690685 'move' call_tmp[690682](361985 call l[820484] this[1882176]))
          const-val call_tmp[690689]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
          (690692 'move' call_tmp[690689](187369 call testAndSet[1231834] call_tmp[690682]))
          (572261 'move' tmp[572259] call_tmp[690689])
          (572266 'move' tmp[572246] tmp[572259])
        }
        (187374 'move' tmp[187348] tmp[572246])
        tmp[187348]
      }
      label _breakLabel[187352]
    }
    (935669 return _void[55])
  }
  function wrapon_fn[2198995](const in arg dummy_locale_arg[2198997]:chpl_localeID_t[209352], in arg buf[2198999]:c_void_ptr[149], in arg buf_size[2199001]:int(64)[13], in arg c[2199003]:_class_localson_fn[2198955]) : void[4] "on block"
  {
    val _0_tmp[2199008]:chpl_localeID_t[209352] "temp"
    (2199013 'move' _0_tmp[2199008](2199010 '.v' c[2199003] _0_tmp[2198958]))
    ref _1_this[2199015]:chpl_LocalSpinlock[187432] "temp"
    (2199020 'move' _1_this[2199015](2199017 '.v' c[2199003] _1_this[2198960]))
    (2199006 call on_fn[935662] _1_this[2199015])
    (2199023 return _void[55])
  }
}