AST dump for RangeChunk after pass scopeResolve.
Module use list: ChapelStandard 

{
  type RemElems[266487] def Thru[266481]:RemElems[266487] def Pack[266483]:RemElems[266487] def Mod[266485]:RemElems[266487]
  function chunks[266510](arg r[266507] :
  (266506 call range[64319](?) unknown RT[266500] bounded[64208] unknown S[266504]), arg numChunks[266513] :
  integral[199](?), arg remPol[266518] :
  RemElems[266487] =
  Thru[266481]) : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[266582] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266583] "expr temp" "temp"
      (266592 'move' _iterator[266583](266590 call _getIterator(266538 call chunksOrder r[266507] numChunks[266513] remPol[266518])))
      Defer
      {
        {
          (266623 call _freeIterator _iterator[266583])
        }
      }
      { scopeless type
        (266598 'move' _indexOfInterest[266582](266595 call iteratorIndex _iterator[266583]))
      }
      ForLoop[266584]
      {
        (266603 call _check_tuple_var_decl _indexOfInterest[266582] 2)
        unknown startOrder[266609] "index var" "insert auto destroy"
        (266611 'move' startOrder[266609](266607 call _indexOfInterest[266582] 0))
        unknown endOrder[266616] "index var" "insert auto destroy"
        (266618 'move' endOrder[266616](266614 call _indexOfInterest[266582] 1))
        {
          const start[266546] "const"(266545 call(266540 call . r[266507] c"orderToIndex") startOrder[266609])
          (266549 'end of statement')
          const end[266558] "const"(266557 call(266552 call . r[266507] c"orderToIndex") endOrder[266616])
          (266561 'end of statement')
          (266580 yield(266577 IfExpr  S[266504] then
          { scopeless
            (266571 call chpl_by(266565 call chpl_build_bounded_range start[266546] end[266558])(266568 call . r[266507] c"stride"))
          } else
          { scopeless
            (266575 call chpl_build_bounded_range start[266546] end[266558])
          } ))
        }
        label _continueLabel[266587]
        _indexOfInterest[266582]
        _iterator[266583]
      }
      label _breakLabel[266588]
    }
  }
  { scopeless type
    (266527 call range[64319](?) RT[266500] bounded[64208] S[266504])
  }
  function chunk[266647](arg r[266644] :
  (266643 call range[64319](?) unknown RT[266637] bounded[64208] unknown S[266641]), arg numChunks[266650] :
  integral[199](?), arg idx[266654] :
  integral[199](?), arg remPol[266659] :
  RemElems[266487] =
  Thru[266481]) : _unknown[51]
  {
    const tmp[266681] "const" "temp"(266680 call chunkOrder r[266644] numChunks[266650] idx[266654] remPol[266659])
    (266688 call _check_tuple_var_decl tmp[266681] 2)
    const startOrder[266669] "const"(266682 call tmp[266681] 0)
    const endOrder[266671] "const"(266685 call tmp[266681] 1)
    (266693 'end of statement')
    const start[266702] "const"(266701 call(266696 call . r[266644] c"orderToIndex") startOrder[266669])
    (266705 'end of statement')
    const end[266713] "const"(266712 call(266707 call . r[266644] c"orderToIndex") endOrder[266671])
    (266716 'end of statement')
    (266735 return(266732 IfExpr  S[266641] then
    { scopeless
      (266726 call chpl_by(266720 call chpl_build_bounded_range start[266702] end[266713])(266723 call . r[266644] c"stride"))
    } else
    { scopeless
      (266730 call chpl_build_bounded_range start[266702] end[266713])
    } ))
  }
  { scopeless type
    (266668 call range[64319](?) RT[266637] bounded[64208] S[266641])
  }
  function blockCyclicChunks[266757](arg r[266754] :
  (266753 call range[64319](?) unknown t[266743](boundedType = bounded[64208]) unknown strided[266751]), arg blockSize[266760] :
  integral[199](?), arg tid[266764] :
  integral[199](?), arg nTasks[266768] :
  integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(266815 call _cond_test(266773 call >= tid[266764] nTasks[266768]))
    {
      (266813 call halt(266810 call + "Parameter tid must be < nTasks " "because blocks are indexed from 0..nTasks-1"))
    }
    if(266846 call _cond_test(266823 call <= blockSize[266760] 0))
    {
      (266844 call halt "blockSize must a positive number")
    }
    if(266876 call _cond_test(266853 call <= nTasks[266768] 0))
    {
      (266874 call halt "nTasks must be a positive number")
    }
    unknown rangeStride[266885](266882 call . r[266754] c"stride")
    (266888 'end of statement')
    unknown blockStride[266893](266891 call * blockSize[266760] rangeStride[266885])
    (266896 'end of statement')
    unknown low[266901](266898 call . r[266754] c"low")
    (266904 'end of statement')
    unknown high[266909](266906 call . r[266754] c"high")
    (266912 'end of statement')
    unknown firstBlockStart[266934](266932 call +(266925 IfExpr (266915 call > rangeStride[266885] 0) then
    { scopeless
      (266918 call . r[266754] c"low")
    } else
    { scopeless
      (266922 call . r[266754] c"high")
    } )(266930 call * blockStride[266893] tid[266764]))
    (266937 'end of statement')
    if(266956 call _cond_test(266952 call ||(266943 call > firstBlockStart[266934](266940 call . r[266754] c"high"))(266950 call < firstBlockStart[266934](266947 call . r[266754] c"low"))))
    {
      (266954 return _void[55])
    }
    unknown strideToNextBlock[266965](266963 call * blockStride[266893] nTasks[266768])
    (266968 'end of statement')
    if(267125 call _cond_test(266971 call > rangeStride[266885] 0))
    {
      {
        unknown _indexOfInterest[267006] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267007] "expr temp" "temp"
        (267016 'move' _iterator[267007](267014 call _getIterator(267025 call chpl_direct_range_iter firstBlockStart[266934] high[266909] strideToNextBlock[266965])))
        Defer
        {
          {
            (267041 call _freeIterator _iterator[267007])
          }
        }
        { scopeless type
          (267030 'move' _indexOfInterest[267006](267027 call iteratorIndex _iterator[267007]))
        }
        ForLoop[267008]
        {
          unknown blockStart[267034] "index var" "insert auto destroy"
          (267036 'move' blockStart[267034] _indexOfInterest[267006])
          {
            unknown blockEnd[266992](266991 call min high[266909](266989 call -(266986 call + blockStart[267034] blockStride[266893]) 1))
            (266995 'end of statement')
            (267004 yield(267002 call chpl_by(266999 call chpl_build_bounded_range blockStart[267034] blockEnd[266992]) rangeStride[266885]))
          }
          label _continueLabel[267011]
          _indexOfInterest[267006]
          _iterator[267007]
        }
        label _breakLabel[267012]
      }
    }
    {
      {
        unknown _indexOfInterest[267082] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267083] "expr temp" "temp"
        (267092 'move' _iterator[267083](267090 call _getIterator(267101 call chpl_direct_range_iter low[266901] firstBlockStart[266934] strideToNextBlock[266965])))
        Defer
        {
          {
            (267117 call _freeIterator _iterator[267083])
          }
        }
        { scopeless type
          (267106 'move' _indexOfInterest[267082](267103 call iteratorIndex _iterator[267083]))
        }
        ForLoop[267084]
        {
          unknown blockEnd[267110] "index var" "insert auto destroy"
          (267112 'move' blockEnd[267110] _indexOfInterest[267082])
          {
            unknown blockStart[267068](267067 call max low[266901](267065 call +(267062 call + blockEnd[267110] blockStride[266893]) 1))
            (267071 'end of statement')
            (267080 yield(267078 call chpl_by(267075 call chpl_build_bounded_range blockStart[267068] blockEnd[267110]) rangeStride[266885]))
          }
          label _continueLabel[267087]
          _indexOfInterest[267082]
          _iterator[267083]
        }
        label _breakLabel[267088]
      }
    }
  }
  function chunksOrder[267143](arg r[267140] :
  (267139 call range[64319](?) unknown RT[267134] bounded[64208] ?[260]), arg numChunks[267146] :
  integral[199](?), arg remPol[267151] :
  RemElems[266487] =
  Thru[266481]) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(267174 call _cond_test(267170 call ||(267164 call ==(267160 call . r[267140] c"size") 0)(267168 call <= numChunks[267146] 0)))
    {
      (267172 return _void[55])
    }
    const nElems[267184] "const"(267181 call . r[267140] c"size")
    (267187 'end of statement')
    unknown nChunks[267196](267194 call _cast RT[267134](267192 call min numChunks[267146] nElems[267184]))
    (267199 'end of statement')
    unknown chunkSize[267200] RT[267134]
    unknown rem[267204](267208 'typeof' chunkSize[267200])
    (267209 'end of statement')
    {
      unknown tmp[267276] "expr temp" "maybe param" "maybe type" "temp"
      (267278 'move' tmp[267276] remPol[267151])
      if(267283 call _cond_test(267280 call == tmp[267276] Pack[266483]))
      {
        (267219 call = chunkSize[267200](267217 call / nElems[267184] nChunks[267196]))
        if(267245 call _cond_test(267228 call !=(267225 call * chunkSize[267200] nChunks[267196]) nElems[267184]))
        {
          (267232 call += chunkSize[267200] 1)
          (267242 call = nChunks[267196](267241 call divceil nElems[267184] chunkSize[267200]))
        }
      }
      {
        if(267289 call _cond_test(267286 call == tmp[267276] Mod[266485]))
        {
          (267258 call = chunkSize[267200](267256 call / nElems[267184] nChunks[267196]))
          (267270 call = rem[267204](267268 call - nElems[267184](267266 call * chunkSize[267200] nChunks[267196])))
        }
      }
    }
    {
      unknown _indexOfInterest[267412] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[267413] "expr temp" "temp"
      (267422 'move' _iterator[267413](267420 call _getIterator(267429 call chpl_direct_counted_range_iter 0 nChunks[267196])))
      Defer
      {
        {
          (267445 call _freeIterator _iterator[267413])
        }
      }
      { scopeless type
        (267434 'move' _indexOfInterest[267412](267431 call iteratorIndex _iterator[267413]))
      }
      ForLoop[267414]
      {
        unknown i[267438] "index var" "insert auto destroy"
        (267440 'move' i[267438] _indexOfInterest[267412])
        {
          unknown chunk[267305](267303 call * 2 RT[267134])
          (267308 'end of statement')
          {
            unknown tmp[267384] "expr temp" "maybe param" "maybe type" "temp"
            (267386 'move' tmp[267384] remPol[267151])
            if(267391 call _cond_test(267388 call == tmp[267384] Thru[266481]))
            {
              (267321 call = chunk[267305](267320 call chunkOrderThru nElems[267184] nChunks[267196] i[267438]))
            }
            {
              if(267397 call _cond_test(267394 call == tmp[267384] Pack[266483]))
              {
                (267336 call = chunk[267305](267335 call chunkOrderPack chunkSize[267200] nElems[267184] i[267438]))
              }
              {
                if(267404 call _cond_test(267401 call == tmp[267384] Mod[266485]))
                {
                  (267353 call = chunk[267305](267352 call chunkOrderMod chunkSize[267200] rem[267204] nElems[267184] nChunks[267196] i[267438]))
                }
                {
                  (267378 call halt "RangeChunk: unknown RemElems in chunksOrder")
                }
              }
            }
          }
          (267410 yield chunk[267305])
        }
        label _continueLabel[267417]
        _indexOfInterest[267412]
        _iterator[267413]
      }
      label _breakLabel[267418]
    }
  }
  { scopeless type
    (267157 call * 2 RT[267134])
  }
  function chunkOrder[267467](arg r[267464] :
  (267463 call range[64319](?) unknown RT[267458] bounded[64208] ?[260]), arg numChunks[267470] :
  integral[199](?), arg idx[267474] :
  integral[199](?), arg remPol[267479] :
  RemElems[266487] =
  Thru[266481]) : _unknown[51]
  {
    if(267525 call _cond_test(267510 call ||(267504 call ||(267498 call ||(267492 call ==(267488 call . r[267464] c"size") 0)(267496 call <= numChunks[267470] 0))(267502 call < idx[267474] 0))(267508 call >= idx[267474] numChunks[267470])))
    {
      (267523 return(267521 call _build_tuple(267514 call _cast RT[267458] 1)(267518 call _cast RT[267458] 0)))
    }
    const nElems[267535] "const"(267532 call . r[267464] c"size")
    (267538 'end of statement')
    const nChunks[267547] "const"(267545 call _cast RT[267458](267543 call min numChunks[267470] nElems[267535]))
    (267550 'end of statement')
    const i[267555] "const"(267553 call _cast RT[267458] idx[267474])
    (267558 'end of statement')
    {
      unknown tmp[267671] "expr temp" "maybe param" "maybe type" "temp"
      (267673 'move' tmp[267671] remPol[267479])
      if(267678 call _cond_test(267675 call == tmp[267671] Thru[266481]))
      {
        (267569 return(267568 call chunkOrderThru nElems[267535] nChunks[267547] i[267555]))
      }
      {
        if(267684 call _cond_test(267681 call == tmp[267671] Pack[266483]))
        {
          unknown chunkSize[267580](267578 call / nElems[267535] nChunks[267547])
          (267583 'end of statement')
          if(267597 call _cond_test(267590 call !=(267587 call * chunkSize[267580] nChunks[267547]) nElems[267535]))
          {
            (267594 call += chunkSize[267580] 1)
          }
          (267608 return(267607 call chunkOrderPack chunkSize[267580] nElems[267535] i[267555]))
        }
        {
          if(267691 call _cond_test(267688 call == tmp[267671] Mod[266485]))
          {
            const chunkSize[267618] "const"(267616 call / nElems[267535] nChunks[267547])
            (267621 'end of statement')
            const rem[267630] "const"(267628 call - nElems[267535](267626 call * chunkSize[267618] nChunks[267547]))
            (267633 'end of statement')
            (267642 return(267641 call chunkOrderMod chunkSize[267618] rem[267630] nElems[267535] nChunks[267547] i[267555]))
          }
          {
            (267665 call halt "RangeChunk: unknown RemElems in chunkOrder")
          }
        }
      }
    }
  }
  { scopeless type
    (267485 call * 2 RT[267458])
  }
  function chunkOrderThru[267706](arg nElems[267703] :
  unknown I[267701], arg nChunks[267709] :
  I[267701], arg i[267713] :
  I[267701]) : _unknown[51] "no doc" "private"
  {
    const m[267725] "const"(267723 call * nElems[267703] i[267713])
    (267728 'end of statement')
    const start[267746] "const"(267743 IfExpr (267732 call == i[267713] 0) then
    { scopeless
      (267736 call _cast I[267701] 0)
    } else
    { scopeless
      (267742 call divceil m[267725] nChunks[267709])
    } )
    (267749 'end of statement')
    const end[267775] "const"(267772 IfExpr (267755 call == i[267713](267753 call - nChunks[267709] 1)) then
    { scopeless
      (267759 call - nElems[267703] 1)
    } else
    { scopeless
      (267770 call -(267768 call divceil(267764 call + m[267725] nElems[267703]) nChunks[267709]) 1)
    } )
    (267778 'end of statement')
    (267784 return(267782 call _build_tuple start[267746] end[267775]))
  }
  { scopeless type
    (267719 call _build_tuple I[267701] I[267701])
  }
  function chunkOrderPack[267796](arg chunkSize[267793] :
  unknown I[267791], arg nElems[267799] :
  I[267791], arg i[267803] :
  I[267791]) : _unknown[51] "no doc" "private"
  {
    const start[267815] "const"(267813 call * chunkSize[267793] i[267803])
    (267818 'end of statement')
    if(267837 call _cond_test(267822 call >= start[267815] nElems[267799]))
    {
      (267835 return(267833 call _build_tuple(267826 call _cast I[267791] 1)(267830 call _cast I[267791] 0)))
    }
    unknown end[267849](267847 call -(267844 call + start[267815] chunkSize[267793]) 1)
    (267852 'end of statement')
    if(267865 call _cond_test(267855 call >= end[267849] nElems[267799]))
    {
      (267862 call = end[267849](267860 call - nElems[267799] 1))
    }
    (267875 return(267873 call _build_tuple start[267815] end[267849]))
  }
  { scopeless type
    (267809 call _build_tuple I[267791] I[267791])
  }
  function chunkOrderMod[267887](arg chunkSize[267884] :
  unknown I[267882], arg rem[267890] :
  I[267882], arg nElems[267894] :
  I[267882], arg nChunks[267898] :
  I[267882], arg i[267902] :
  I[267882]) : _unknown[51] "no doc" "private"
  {
    unknown start[267910] I[267882]
    unknown end[267914](267918 'typeof' start[267910])
    (267919 'end of statement')
    if(267971 call _cond_test(267923 call < i[267902] rem[267890]))
    {
      (267933 call = start[267910](267931 call * i[267902](267929 call + chunkSize[267884] 1)))
      (267942 call = end[267914](267940 call + start[267910] chunkSize[267884]))
    }
    {
      (267956 call = start[267910](267954 call - nElems[267894](267952 call *(267949 call - nChunks[267898] i[267902]) chunkSize[267884])))
      (267968 call = end[267914](267966 call -(267963 call + start[267910] chunkSize[267884]) 1))
    }
    (267980 return(267978 call _build_tuple start[267910] end[267914]))
  }
  { scopeless type
    (267908 call _build_tuple I[267882] I[267882])
  }
  (355367 'used modules list'(353058 'use' ChapelStandard[20267])(266492 'use' RemElems[266487])(266495 'use' BoundedRangeType[64216]))
}