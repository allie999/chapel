AST dump for Time after pass readExternC.
Module use list: 

{
  (353116 'use' ChapelStandard)
  (335010 'use' SysBasic)
  (335014 'import' HaltWrappers)
  function chpl_now_time[335018]() : _unknown[51] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    real[16]
  }
  type _timevalue[335028]
  function chpl_null_timevalue[335032]() : _unknown[51] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_now_timevalue[335040]() : _unknown[51] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_timevalue_parts[335052](arg t[335049] :
  _timevalue, out arg seconds[335058] :
  (335057 call int[13] 32), out arg minutes[335065] :
  (335064 call int[13] 32), out arg hours[335072] :
  (335071 call int[13] 32), out arg mday[335079] :
  (335078 call int[13] 32), out arg month[335086] :
  (335085 call int[13] 32), out arg year[335093] :
  (335092 call int[13] 32), out arg wday[335100] :
  (335099 call int[13] 32), out arg yday[335107] :
  (335106 call int[13] 32), out arg isdst[335114] :
  (335113 call int[13] 32)) : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  type TimeUnits[335130] def microseconds[335120]:TimeUnits[335130] def milliseconds[335122]:TimeUnits[335130] def seconds[335124]:TimeUnits[335130] def minutes[335126]:TimeUnits[335130] def hours[335128]:TimeUnits[335130]
  type Day[335149] def sunday[335135]:Day[335149] 0 def monday[335137]:Day[335149] def tuesday[335139]:Day[335149] def wednesday[335141]:Day[335149] def thursday[335143]:Day[335149] def friday[335145]:Day[335149] def saturday[335147]:Day[335149]
  function getCurrentTime[335165](arg unit[335161] :
  TimeUnits =
  (335158 call . TimeUnits c"seconds")) : _unknown[51]
  {
    { scopeless
      (335178 return(335177 call _convert_microseconds unit(335176 call chpl_now_time)))
    }
  }
  { scopeless type
    (335170 call real[16] 64)
  }
  function getCurrentDate[335186]() : _unknown[51]
  {
    { scopeless
      unknown now[335191](335190 call chpl_now_timevalue)
      (335194 'end of statement')
    }
    { scopeless
      unknown seconds[335196](335223 call int[13] 32)
      unknown minutes[335199](335242 'typeof' seconds)
      unknown hours[335202](335240 'typeof' minutes)
      unknown mday[335205](335238 'typeof' hours)
      unknown month[335208](335236 'typeof' mday)
      unknown year[335211](335234 'typeof' month)
      unknown wday[335214](335232 'typeof' year)
      unknown yday[335217](335230 'typeof' wday)
      unknown isdst[335224](335228 'typeof' yday)
      (335243 'end of statement')
    }
    (335256 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (335272 return(335270 call _build_tuple(335262 call + year 1900)(335266 call + month 1) mday))
  }
  function getCurrentDayOfWeek[335278]() : _unknown[51]
  {
    { scopeless
      unknown now[335284](335283 call chpl_now_timevalue)
      (335287 'end of statement')
    }
    { scopeless
      unknown seconds[335289](335316 call int[13] 32)
      unknown minutes[335292](335335 'typeof' seconds)
      unknown hours[335295](335333 'typeof' minutes)
      unknown mday[335298](335331 'typeof' hours)
      unknown month[335301](335329 'typeof' mday)
      unknown year[335304](335327 'typeof' month)
      unknown wday[335307](335325 'typeof' year)
      unknown yday[335310](335323 'typeof' wday)
      unknown isdst[335317](335321 'typeof' yday)
      (335336 'end of statement')
    }
    (335349 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (335356 return(335355 'try!-expr'(335353 call _cast Day wday)))
  }
  { scopeless type
    Day
  }
  function sleep[335367](arg t[335364] :
  real[16], arg unit[335374] :
  TimeUnits =
  (335371 call . TimeUnits c"seconds")) : _unknown[51] "inline"
  {
    function chpl_task_sleep[335385](arg s[335382] :
    c_double) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      void[4]
    }
    if(335422 call _cond_test(335394 call < t 0))
    {
      (335417 call warning "sleep() called with negative time parameter: '" t "'")
      (335420 return)
    }
    (335439 call chpl_task_sleep(335436 call _cast c_double(335434 call _convert_to_seconds unit(335432 call _cast real[16] t))))
  }
  { scopeless type
    void[4]
  }
  type Timer[335657] unknown time[335449] "no doc"(335448 call chpl_null_timevalue) _timevalue unknown accumulated[335455] "no doc" 0.0 real[16] unknown running[335461] "no doc" 0 bool[10] function Timer[335657].clear[335467](arg _mt[335661]:_MT[238], arg this[335659]:Timer[335657]) : _unknown[51] "method" "primary method"
  {
    (335472 call = accumulated 0.0)
    if(335485 call _cond_test running)
    {
      (335481 call = time(335480 call chpl_now_timevalue))
    }
  }
  { scopeless type
    void[4]
  } function Timer[335657].start[335494](arg _mt[335665]:_MT[238], arg this[335663]:Timer[335657]) : _unknown[51] "method" "primary method"
  {
    if(335535 call _cond_test(335498 call ! running))
    {
      (335502 call = running 1)
      (335510 call = time(335509 call chpl_now_timevalue))
    }
    {
      (335532 call warning "start called on a timer that has not been stopped")
    }
  }
  { scopeless type
    void[4]
  } function Timer[335657].stop[335545](arg _mt[335669]:_MT[238], arg this[335667]:Timer[335657]) : _unknown[51] "method" "primary method"
  {
    if(335594 call _cond_test running)
    {
      { scopeless
        unknown time2[335553](335552 call chpl_now_timevalue) _timevalue
        (335556 'end of statement')
      }
      (335564 call += accumulated(335563 call _diff_time time2 time))
      (335569 call = running 0)
    }
    {
      (335591 call warning "stop called on a timer that has not been started")
    }
  }
  { scopeless type
    void[4]
  } function Timer[335657].elapsed[335613](arg _mt[335673]:_MT[238], arg this[335671]:Timer[335657], arg unit[335609] :
  TimeUnits =
  (335606 call . TimeUnits c"seconds")) : _unknown[51] "method" "primary method"
  {
    if(335648 call _cond_test running)
    {
      { scopeless
        unknown time2[335621](335620 call chpl_now_timevalue) _timevalue
        (335624 'end of statement')
      }
      (335638 return(335637 call _convert_microseconds unit(335635 call + accumulated(335634 call _diff_time time2 time))))
    }
    {
      (335645 return(335644 call _convert_microseconds unit accumulated))
    }
  }
  { scopeless type
    real[16]
  }
  function _diff_time[335682](arg t1[335679] :
  _timevalue, arg t2[335685] :
  _timevalue) : _unknown[51] "inline" "private"
  {
    function chpl_timevalue_seconds[335694](arg t[335691] :
    _timevalue) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (335699 call int[13] 64)
    }
    function chpl_timevalue_microseconds[335710](arg t[335707] :
    _timevalue) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (335715 call int[13] 64)
    }
    { scopeless
      unknown s1[335723](335722 call chpl_timevalue_seconds t1)
      (335726 'end of statement')
    }
    { scopeless
      unknown us1[335731](335730 call chpl_timevalue_microseconds t1)
      (335734 'end of statement')
    }
    { scopeless
      unknown s2[335739](335738 call chpl_timevalue_seconds t2)
      (335742 'end of statement')
    }
    { scopeless
      unknown us2[335747](335746 call chpl_timevalue_microseconds t2)
      (335750 'end of statement')
    }
    (335769 return(335767 call -(335758 call +(335755 call * s1 1e+06) us1)(335765 call +(335762 call * s2 1e+06) us2)))
  }
  function _convert_to_seconds[335779](arg unit[335776] :
  TimeUnits, arg us[335782] :
  real[16]) : _unknown[51] "private"
  {
    {
      unknown tmp[335869] "expr temp" "maybe param" "maybe type" "temp"
      (335871 'move' tmp[335869] unit)
      if(335876 call _cond_test(335873 call == tmp[335869](335788 call . TimeUnits c"microseconds")))
      {
        { scopeless
          (335798 return(335796 call * us 1e-06))
        }
      }
      {
        if(335882 call _cond_test(335879 call == tmp[335869](335806 call . TimeUnits c"milliseconds")))
        {
          { scopeless
            (335816 return(335814 call * us 0.001))
          }
        }
        {
          if(335889 call _cond_test(335886 call == tmp[335869](335822 call . TimeUnits c"seconds")))
          {
            { scopeless
              (335827 return us)
            }
          }
          {
            if(335896 call _cond_test(335893 call == tmp[335869](335835 call . TimeUnits c"minutes")))
            {
              { scopeless
                (335845 return(335843 call * us 60.0))
              }
            }
            {
              if(335903 call _cond_test(335900 call == tmp[335869](335853 call . TimeUnits c"hours")))
              {
                { scopeless
                  (335863 return(335861 call * us 3600.0))
                }
              }
            }
          }
        }
      }
    }
    (335931 call(335910 call . HaltWrappers c"exhaustiveSelectHalt") "unknown timeunits type")
    (335936 return(335934 call - 1.0))
  }
  function _convert_microseconds[335946](arg unit[335943] :
  TimeUnits, arg us[335949] :
  real[16]) : _unknown[51] "private"
  {
    {
      unknown tmp[336028] "expr temp" "maybe param" "maybe type" "temp"
      (336030 'move' tmp[336028] unit)
      if(336035 call _cond_test(336032 call == tmp[336028](335955 call . TimeUnits c"microseconds")))
      {
        { scopeless
          (335960 return us)
        }
      }
      {
        if(336041 call _cond_test(336038 call == tmp[336028](335966 call . TimeUnits c"milliseconds")))
        {
          { scopeless
            (335976 return(335974 call / us 1000.0))
          }
        }
        {
          if(336048 call _cond_test(336045 call == tmp[336028](335982 call . TimeUnits c"seconds")))
          {
            { scopeless
              (335990 return(335988 call / us 1e+06))
            }
          }
          {
            if(336055 call _cond_test(336052 call == tmp[336028](335996 call . TimeUnits c"minutes")))
            {
              { scopeless
                (336006 return(336004 call / us 6e+07))
              }
            }
            {
              if(336062 call _cond_test(336059 call == tmp[336028](336012 call . TimeUnits c"hours")))
              {
                { scopeless
                  (336022 return(336020 call / us 3.6e+09))
                }
              }
            }
          }
        }
      }
    }
    (336074 call(336069 call . HaltWrappers c"exhaustiveSelectHalt") "unknown timeunits type")
    (336079 return(336077 call - 1.0))
  }
}