AST dump for Time after pass readExternC.
Module use list: 

{
  (352988 'use' ChapelStandard)
  (334884 'use' SysBasic)
  (334888 'import' HaltWrappers)
  function chpl_now_time[334892]() : _unknown[51] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    real[16]
  }
  type _timevalue[334902]
  function chpl_null_timevalue[334906]() : _unknown[51] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_now_timevalue[334914]() : _unknown[51] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_timevalue_parts[334926](arg t[334923] :
  _timevalue, out arg seconds[334932] :
  (334931 call int[13] 32), out arg minutes[334939] :
  (334938 call int[13] 32), out arg hours[334946] :
  (334945 call int[13] 32), out arg mday[334953] :
  (334952 call int[13] 32), out arg month[334960] :
  (334959 call int[13] 32), out arg year[334967] :
  (334966 call int[13] 32), out arg wday[334974] :
  (334973 call int[13] 32), out arg yday[334981] :
  (334980 call int[13] 32), out arg isdst[334988] :
  (334987 call int[13] 32)) : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  type TimeUnits[335004] def microseconds[334994]:TimeUnits[335004] def milliseconds[334996]:TimeUnits[335004] def seconds[334998]:TimeUnits[335004] def minutes[335000]:TimeUnits[335004] def hours[335002]:TimeUnits[335004]
  type Day[335023] def sunday[335009]:Day[335023] 0 def monday[335011]:Day[335023] def tuesday[335013]:Day[335023] def wednesday[335015]:Day[335023] def thursday[335017]:Day[335023] def friday[335019]:Day[335023] def saturday[335021]:Day[335023]
  function getCurrentTime[335039](arg unit[335035] :
  TimeUnits =
  (335032 call . TimeUnits c"seconds")) : _unknown[51]
  {
    { scopeless
      (335052 return(335051 call _convert_microseconds unit(335050 call chpl_now_time)))
    }
  }
  { scopeless type
    (335044 call real[16] 64)
  }
  function getCurrentDate[335060]() : _unknown[51]
  {
    { scopeless
      unknown now[335065](335064 call chpl_now_timevalue)
      (335068 'end of statement')
    }
    { scopeless
      unknown seconds[335070](335097 call int[13] 32)
      unknown minutes[335073](335116 'typeof' seconds)
      unknown hours[335076](335114 'typeof' minutes)
      unknown mday[335079](335112 'typeof' hours)
      unknown month[335082](335110 'typeof' mday)
      unknown year[335085](335108 'typeof' month)
      unknown wday[335088](335106 'typeof' year)
      unknown yday[335091](335104 'typeof' wday)
      unknown isdst[335098](335102 'typeof' yday)
      (335117 'end of statement')
    }
    (335130 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (335146 return(335144 call _build_tuple(335136 call + year 1900)(335140 call + month 1) mday))
  }
  function getCurrentDayOfWeek[335152]() : _unknown[51]
  {
    { scopeless
      unknown now[335158](335157 call chpl_now_timevalue)
      (335161 'end of statement')
    }
    { scopeless
      unknown seconds[335163](335190 call int[13] 32)
      unknown minutes[335166](335209 'typeof' seconds)
      unknown hours[335169](335207 'typeof' minutes)
      unknown mday[335172](335205 'typeof' hours)
      unknown month[335175](335203 'typeof' mday)
      unknown year[335178](335201 'typeof' month)
      unknown wday[335181](335199 'typeof' year)
      unknown yday[335184](335197 'typeof' wday)
      unknown isdst[335191](335195 'typeof' yday)
      (335210 'end of statement')
    }
    (335223 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (335230 return(335229 'try!-expr'(335227 call _cast Day wday)))
  }
  { scopeless type
    Day
  }
  function sleep[335241](arg t[335238] :
  real[16], arg unit[335248] :
  TimeUnits =
  (335245 call . TimeUnits c"seconds")) : _unknown[51] "inline"
  {
    function chpl_task_sleep[335259](arg s[335256] :
    c_double) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      void[4]
    }
    if(335296 call _cond_test(335268 call < t 0))
    {
      (335291 call warning "sleep() called with negative time parameter: '" t "'")
      (335294 return)
    }
    (335313 call chpl_task_sleep(335310 call _cast c_double(335308 call _convert_to_seconds unit(335306 call _cast real[16] t))))
  }
  { scopeless type
    void[4]
  }
  type Timer[335531] unknown time[335323] "no doc"(335322 call chpl_null_timevalue) _timevalue unknown accumulated[335329] "no doc" 0.0 real[16] unknown running[335335] "no doc" 0 bool[10] function Timer[335531].clear[335341](arg _mt[335535]:_MT[238], arg this[335533]:Timer[335531]) : _unknown[51] "method" "primary method"
  {
    (335346 call = accumulated 0.0)
    if(335359 call _cond_test running)
    {
      (335355 call = time(335354 call chpl_now_timevalue))
    }
  }
  { scopeless type
    void[4]
  } function Timer[335531].start[335368](arg _mt[335539]:_MT[238], arg this[335537]:Timer[335531]) : _unknown[51] "method" "primary method"
  {
    if(335409 call _cond_test(335372 call ! running))
    {
      (335376 call = running 1)
      (335384 call = time(335383 call chpl_now_timevalue))
    }
    {
      (335406 call warning "start called on a timer that has not been stopped")
    }
  }
  { scopeless type
    void[4]
  } function Timer[335531].stop[335419](arg _mt[335543]:_MT[238], arg this[335541]:Timer[335531]) : _unknown[51] "method" "primary method"
  {
    if(335468 call _cond_test running)
    {
      { scopeless
        unknown time2[335427](335426 call chpl_now_timevalue) _timevalue
        (335430 'end of statement')
      }
      (335438 call += accumulated(335437 call _diff_time time2 time))
      (335443 call = running 0)
    }
    {
      (335465 call warning "stop called on a timer that has not been started")
    }
  }
  { scopeless type
    void[4]
  } function Timer[335531].elapsed[335487](arg _mt[335547]:_MT[238], arg this[335545]:Timer[335531], arg unit[335483] :
  TimeUnits =
  (335480 call . TimeUnits c"seconds")) : _unknown[51] "method" "primary method"
  {
    if(335522 call _cond_test running)
    {
      { scopeless
        unknown time2[335495](335494 call chpl_now_timevalue) _timevalue
        (335498 'end of statement')
      }
      (335512 return(335511 call _convert_microseconds unit(335509 call + accumulated(335508 call _diff_time time2 time))))
    }
    {
      (335519 return(335518 call _convert_microseconds unit accumulated))
    }
  }
  { scopeless type
    real[16]
  }
  function _diff_time[335556](arg t1[335553] :
  _timevalue, arg t2[335559] :
  _timevalue) : _unknown[51] "inline" "private"
  {
    function chpl_timevalue_seconds[335568](arg t[335565] :
    _timevalue) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (335573 call int[13] 64)
    }
    function chpl_timevalue_microseconds[335584](arg t[335581] :
    _timevalue) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (335589 call int[13] 64)
    }
    { scopeless
      unknown s1[335597](335596 call chpl_timevalue_seconds t1)
      (335600 'end of statement')
    }
    { scopeless
      unknown us1[335605](335604 call chpl_timevalue_microseconds t1)
      (335608 'end of statement')
    }
    { scopeless
      unknown s2[335613](335612 call chpl_timevalue_seconds t2)
      (335616 'end of statement')
    }
    { scopeless
      unknown us2[335621](335620 call chpl_timevalue_microseconds t2)
      (335624 'end of statement')
    }
    (335643 return(335641 call -(335632 call +(335629 call * s1 1e+06) us1)(335639 call +(335636 call * s2 1e+06) us2)))
  }
  function _convert_to_seconds[335653](arg unit[335650] :
  TimeUnits, arg us[335656] :
  real[16]) : _unknown[51] "private"
  {
    {
      unknown tmp[335743] "expr temp" "maybe param" "maybe type" "temp"
      (335745 'move' tmp[335743] unit)
      if(335750 call _cond_test(335747 call == tmp[335743](335662 call . TimeUnits c"microseconds")))
      {
        { scopeless
          (335672 return(335670 call * us 1e-06))
        }
      }
      {
        if(335756 call _cond_test(335753 call == tmp[335743](335680 call . TimeUnits c"milliseconds")))
        {
          { scopeless
            (335690 return(335688 call * us 0.001))
          }
        }
        {
          if(335763 call _cond_test(335760 call == tmp[335743](335696 call . TimeUnits c"seconds")))
          {
            { scopeless
              (335701 return us)
            }
          }
          {
            if(335770 call _cond_test(335767 call == tmp[335743](335709 call . TimeUnits c"minutes")))
            {
              { scopeless
                (335719 return(335717 call * us 60.0))
              }
            }
            {
              if(335777 call _cond_test(335774 call == tmp[335743](335727 call . TimeUnits c"hours")))
              {
                { scopeless
                  (335737 return(335735 call * us 3600.0))
                }
              }
            }
          }
        }
      }
    }
    (335805 call(335784 call . HaltWrappers c"exhaustiveSelectHalt") "unknown timeunits type")
    (335810 return(335808 call - 1.0))
  }
  function _convert_microseconds[335820](arg unit[335817] :
  TimeUnits, arg us[335823] :
  real[16]) : _unknown[51] "private"
  {
    {
      unknown tmp[335902] "expr temp" "maybe param" "maybe type" "temp"
      (335904 'move' tmp[335902] unit)
      if(335909 call _cond_test(335906 call == tmp[335902](335829 call . TimeUnits c"microseconds")))
      {
        { scopeless
          (335834 return us)
        }
      }
      {
        if(335915 call _cond_test(335912 call == tmp[335902](335840 call . TimeUnits c"milliseconds")))
        {
          { scopeless
            (335850 return(335848 call / us 1000.0))
          }
        }
        {
          if(335922 call _cond_test(335919 call == tmp[335902](335856 call . TimeUnits c"seconds")))
          {
            { scopeless
              (335864 return(335862 call / us 1e+06))
            }
          }
          {
            if(335929 call _cond_test(335926 call == tmp[335902](335870 call . TimeUnits c"minutes")))
            {
              { scopeless
                (335880 return(335878 call / us 6e+07))
              }
            }
            {
              if(335936 call _cond_test(335933 call == tmp[335902](335886 call . TimeUnits c"hours")))
              {
                { scopeless
                  (335896 return(335894 call / us 3.6e+09))
                }
              }
            }
          }
        }
      }
    }
    (335948 call(335943 call . HaltWrappers c"exhaustiveSelectHalt") "unknown timeunits type")
    (335953 return(335951 call - 1.0))
  }
}