AST dump for RadixSortHelp after pass cleanup.
Module use list: 

{
  (353078 'use' ChapelStandard)
  (276097 'use' Sort)
  (276104 'import'(276101 call . Reflection c"canResolveMethod"))
  unknown RADIX_BITS[276107] "param" 8
  (276110 'end of statement')
  unknown classifyUnrollFactor[276112] "param" 7
  (276115 'end of statement')
  function binForRecordKeyPart[276120](arg a[276118]:_any[178](?), arg criterion[276122]:_any[178](?), arg startbit[276125] :
  int[13]) : _unknown[51] "inline"
  {
    const testRet[276137] "const"(276136 'typeof'(276135 call(276129 call . criterion c"keyPart") a 1))
    (276140 'end of statement')
    const testPart[276146] "const"(276145 call testRet 1)
    (276149 'end of statement')
    unknown bitsPerPart[276155] "param"(276154 call numBits(276152 'typeof' testPart))
    (276158 'end of statement')
    unknown bitsPerPartModRadixBits[276163] "param"(276161 call % bitsPerPart RADIX_BITS)
    (276166 'end of statement')
    if(276192 call _cond_test(276169 call != bitsPerPartModRadixBits 0))
    {
      (276190 call compilerError "part size must be a multiple of radix bits")
    }
    const whichpart[276201] "const"(276199 call / startbit bitsPerPart)
    (276204 'end of statement')
    const bitsinpart[276209] "const"(276207 call % startbit bitsPerPart)
    (276212 'end of statement')
    const tmp[276226] "const" "temp"(276225 call(276219 call . criterion c"keyPart") a whichpart)
    (276233 call _check_tuple_var_decl tmp[276226] 2)
    const section[276213] "const"(276227 call tmp[276226] 0)
    const part[276215] "const"(276230 call tmp[276226] 1)
    (276238 'end of statement')
    unknown ubits[276246](276244 call _cast(276243 call uint[115] bitsPerPart) part)
    (276249 'end of statement')
    if(276276 call _cond_test(276253 call isInt part))
    {
      const one[276257] "const" 1(276255 'typeof' ubits)
      (276260 'end of statement')
      (276273 call = ubits(276271 call ^ ubits(276269 call << one(276267 call - bitsPerPart 1))))
    }
    unknown mask[276288] "param"(276286 call -(276283 call << 1 RADIX_BITS) 1) uint[115]
    (276291 'end of statement')
    const ubin[276305] "const"(276303 call &(276300 call >> ubits(276298 call -(276295 call - bitsPerPart bitsinpart) RADIX_BITS)) mask)
    (276308 'end of statement')
    if(276356 call _cond_test(276311 call == section 0))
    {
      (276324 return(276322 call _build_tuple(276318 call +(276315 call _cast int[13] ubin) 1) ubits))
    }
    {
      if(276350 call _cond_test(276328 call < section 0))
      {
        (276335 return(276333 call _build_tuple 0 ubits))
      }
      {
        (276348 return(276346 call _build_tuple(276342 call +(276339 call << 1 RADIX_BITS) 1) ubits))
      }
    }
  }
  function binForRecord[276368](arg a[276366]:_any[178](?), arg criterion[276370]:_any[178](?), arg startbit[276373] :
  int[13]) : _unknown[51] "inline"
  {
    if(276466 call _cond_test(276382 call canResolveMethod criterion "keyPart" a 0))
    {
      (276389 return(276388 call binForRecordKeyPart a criterion startbit))
    }
    {
      if(276462 call _cond_test(276397 call canResolveMethod criterion "key" a))
      {
        (276410 return(276409 call binForRecordKeyPart(276405 call(276400 call . criterion c"key") a) defaultComparator startbit))
      }
      {
        (276459 call compilerError "Bad comparator for radix sort "(276435 call _cast string[26](276433 'typeof' criterion)) " with eltType "(276457 call _cast string[26](276455 'typeof' a)))
      }
    }
  }
  function fixedWidth[276478](arg eltTy[276476]:_any[178](?)) param : _unknown[51]
  {
    if(276508 call _cond_test(276500 call ||(276494 call ||(276488 call ||(276483 call isUintType eltTy)(276487 call isIntType eltTy))(276493 call isRealType eltTy))(276499 call isImagType eltTy)))
    {
      (276506 return(276505 call numBits eltTy))
    }
    if(276540 call _cond_test(276517 call isHomogeneousTuple eltTy))
    {
      unknown tmp[276519] eltTy
      (276522 'end of statement')
      (276538 return(276536 call *(276525 call . tmp c"size")(276535 call numBits(276533 'typeof'(276532 call tmp 0)))))
    }
    (276547 return(276545 call - 1))
  }
  function msbRadixSortParamLastStartBit[276559](arg Data[276556] :
  (276553 call chpl__buildArrayRuntimeType nil[44]), arg comparator[276561]:_any[178](?)) param : _unknown[51]
  {
    const element[276573] "const" "ref var"(276572 call Data(276568 call .(276565 call . Data c"_dom") c"low"))
    (276576 'end of statement')
    if(276647 call _cond_test(276591 call &&(276581 call ==(276579 'typeof' comparator) DefaultComparator)(276589 call >(276587 call fixedWidth(276585 'typeof' element)) 0)))
    {
      (276601 return(276599 call -(276597 call fixedWidth(276595 'typeof' element)) RADIX_BITS))
    }
    {
      if(276643 call _cond_test(276609 call canResolveMethod comparator "key" element))
      {
        unknown keyType[276618] "type variable"(276617 'typeof'(276616 call(276611 call . comparator c"key") element))
        if(276638 call _cond_test(276627 call >(276625 call fixedWidth keyType) 0))
        {
          (276636 return(276634 call -(276632 call fixedWidth keyType) RADIX_BITS))
        }
      }
    }
    (276655 return(276653 call - 1))
  }
  function radixSortClz[276663](arg val[276661]:_any[178](?)) : _unknown[51]
  {
    unknown nBits[276670] "param"(276669 call numBits(276667 'typeof' val))
    (276673 'end of statement')
    if(276683 call _cond_test(276677 call == val 0))
    {
      (276680 return nBits)
    }
    unknown cur[276688] val
    (276691 'end of statement')
    unknown one[276697](276695 call _cast(276694 'typeof' val) 1)
    (276700 'end of statement')
    unknown hi[276708](276706 call << one(276704 call - nBits 1))
    (276711 'end of statement')
    unknown n[276713] 0
    (276716 'end of statement')
    {
      unknown tmp[276735] "temp"
      (276765 'move' tmp[276735](276757 call _cond_test(276759 call ==(276761 call & cur hi) 0)))
      WhileDo[276740]
      {
        {
          (276726 call += n 1)
          (276732 call <<= cur 1)
        }
        label _continueLabel[276738]
        (276752 'move' tmp[276735](276744 call _cond_test(276746 call ==(276748 call & cur hi) 0)))
        tmp[276735]
      }
      label _breakLabel[276739]
    }
    (276769 return n)
  }
  function findDataStartBit[276779](arg startbit[276776] :
  int[13], arg min_ubits[276781]:_any[178](?), arg max_ubits[276783]:_any[178](?)) : _unknown[51]
  {
    unknown xor[276790](276788 call ^ min_ubits max_ubits)
    (276793 'end of statement')
    unknown bitsPerPart[276800] "param"(276799 call numBits(276797 'typeof' min_ubits))
    (276803 'end of statement')
    const bitsinpart[276808] "const"(276806 call % startbit bitsPerPart)
    (276811 'end of statement')
    (276814 call <<= xor bitsinpart)
    (276819 call >>= xor bitsinpart)
    unknown new_start[276826](276825 call radixSortClz xor)
    (276829 'end of statement')
    unknown new_digit[276834](276832 call / new_start RADIX_BITS)
    (276837 'end of statement')
    unknown new_start_bit_rounded[276842](276840 call * new_digit RADIX_BITS)
    (276845 'end of statement')
    (276850 return(276848 call _cast int[13] new_start_bit_rounded))
  }
  { scopeless type
    int[13]
  }
  function checkSorted[276861](arg start_n[276858] :
  int[13], arg end_n[276864] :
  int[13], arg A[276870] :
  (276867 call chpl__buildArrayRuntimeType nil[44]), arg criterion[276873]:_any[178](?), arg startbit[276876] =
  0) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    {
      unknown _indexOfInterest[277045] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[277046] "expr temp" "temp"
      (277055 'move' _iterator[277046](277053 call _getIterator(277063 call chpl_direct_range_iter(277059 call + start_n 1) end_n 1)))
      Defer
      {
        {
          (277079 call _freeIterator _iterator[277046])
        }
      }
      { scopeless type
        (277068 'move' _indexOfInterest[277045](277065 call iteratorIndex _iterator[277046]))
      }
      ForLoop[277047]
      {
        unknown i[277072] "index var" "insert auto destroy"
        (277074 'move' i[277072] _indexOfInterest[277045])
        {
          unknown cmp[276902](276901 call chpl_compare(276894 call A(276891 call - i 1))(276899 call A i) criterion)
          (276905 'end of statement')
          if(277041 call _cond_test(276909 call > cmp 0))
          {
            (277012 call writeln "Error: not sorted properly at i=" i " A[i-1]="(276954 call A(276951 call - i 1)) " A[i]="(276975 call A i) " in start=" start_n " end=" end_n)
            (277018 call writeln A)
            (277039 call halt "failed checkSorted")
          }
        }
        label _continueLabel[277050]
        _indexOfInterest[277045]
        _iterator[277046]
      }
      label _breakLabel[277051]
    }
  }
  function RadixBucketizer[277377].getNumBuckets[277092](arg _mt[277381]:_MT[238], arg this[277379]:RadixBucketizer[277377]) : _unknown[51] "method" "primary method"
  {
    (277101 return(277099 call +(277096 call << 1 RADIX_BITS) 2))
  }
  function RadixBucketizer[277377].getBinsToRecursivelySort[277108](arg _mt[277385]:_MT[238], arg this[277383]:RadixBucketizer[277377]) : _unknown[51] "method" "primary method"
  {
    (277117 return(277115 call chpl_build_bounded_range 1(277113 call << 1 RADIX_BITS)))
  }
  function RadixBucketizer[277377].getNextStartBit[277128](arg _mt[277389]:_MT[238], arg this[277387]:RadixBucketizer[277377], arg start_bit[277125] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (277134 return(277132 call + start_bit 8))
  }
  function RadixBucketizer[277377].bucketForRecord[277143](arg _mt[277393]:_MT[238], arg this[277391]:RadixBucketizer[277377], arg a[277141]:_any[178](?), arg criterion[277145]:_any[178](?), arg startbit[277147]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    const tmp[277160] "const" "temp"(277159 call binForRecord a criterion startbit)
    (277164 call _check_tuple_var_decl tmp[277160] 2)
    const bin[277149] "const"(277161 call tmp[277160] 0)
    (277169 'end of statement')
    (277172 return bin)
  }
  function RadixBucketizer[277377].classify[277180](arg _mt[277397]:_MT[238], arg this[277395]:RadixBucketizer[277377], arg A[277178]:_any[178](?), arg start_n[277182]:_any[178](?), arg end_n[277184]:_any[178](?), arg criterion[277186]:_any[178](?), arg startbit[277188]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown cur[277191] start_n
    (277194 'end of statement')
    {
      unknown tmp[277283] "temp"
      (277319 'move' tmp[277283](277308 call _cond_test(277310 call <= cur(277313 call - end_n(277316 call - classifyUnrollFactor 1)))))
      WhileDo[277288]
      {
        {
          {
            unknown _indexOfInterest[277236] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[277237] "expr temp" "temp"
            (277246 'move' _iterator[277237](277244 call _getIterator(277254 call chpl_direct_range_iter 0(277251 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (277270 call _freeIterator _iterator[277237])
              }
            }
            { scopeless type
              (277259 'move' _indexOfInterest[277236](277256 call iteratorIndex _iterator[277237]))
            }
            ForLoop[277238]
            {
              unknown j[277263] "index var" "insert auto destroy"
              (277265 'move' j[277263] _indexOfInterest[277236])
              {
                (277233 yield(277231 call _build_tuple(277216 call + cur j)(277229 call bucketForRecord(277225 call A(277222 call + cur j)) criterion startbit)))
              }
              label _continueLabel[277241]
              _indexOfInterest[277236]
              _iterator[277237]
            }
            label _breakLabel[277242]
          }
          (277280 call += cur classifyUnrollFactor)
        }
        label _continueLabel[277286]
        (277303 'move' tmp[277283](277292 call _cond_test(277294 call <= cur(277297 call - end_n(277300 call - classifyUnrollFactor 1)))))
        tmp[277283]
      }
      label _breakLabel[277287]
    }
    {
      unknown tmp[277347] "temp"
      (277371 'move' tmp[277347](277366 call _cond_test(277368 call <= cur end_n)))
      WhileDo[277352]
      {
        {
          (277339 yield(277337 call _build_tuple cur(277335 call bucketForRecord(277331 call A cur) criterion startbit)))
          (277344 call += cur 1)
        }
        label _continueLabel[277350]
        (277361 'move' tmp[277347](277356 call _cond_test(277358 call <= cur end_n)))
        tmp[277347]
      }
      label _breakLabel[277351]
    }
  }
  type RadixBucketizer[277377]
}