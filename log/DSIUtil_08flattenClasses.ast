AST dump for DSIUtil after pass flattenClasses.
Module use list: ChapelStandard 

{
  function getDataParTasksPerLocale[225956]() : _unknown[51] "inline"
  {
    (225959 return dataParTasksPerLocale[93281])
  }
  function getDataParIgnoreRunningTasks[225966]() : _unknown[51] "inline"
  {
    (225969 return dataParIgnoreRunningTasks[93287])
  }
  function getDataParMinGranularity[225976]() : _unknown[51] "inline"
  {
    (225979 return dataParMinGranularity[93293])
  }
  function createTuple[225988](param arg rank[225986]:_any[178](?), arg t[225990]:_any[178](?), arg val[225992]:_any[178](?)) : _unknown[51]
  {
    unknown tup[225998](225996 call * rank[225986] t[225990])
    (226001 'end of statement')
    {
      unknown i[226018] 0
      unknown tmp[226019] "maybe param" "temp"
      (226031 'move' tmp[226019](226029 call chpl_compute_low_param_loop_bound 0(226006 call - rank[225986] 1)))
      unknown tmp[226020] "maybe param" "temp"
      (226041 'move' tmp[226020](226039 call chpl_compute_high_param_loop_bound 0(226036 call - rank[225986] 1)))
      unknown tmp[226021] "maybe param" "temp"
      (226044 'move' tmp[226021] 1)
      ParamForLoop[226046]
      { i[226018] tmp[226019] tmp[226020] tmp[226021]
        (226015 call =(226013 call tup[225998] i[226018]) val[225992])
      }
      label _unused_continueLabel[226023]
      label _breakLabel[226022]
    }
    (226056 return tup[225998])
  }
  function _computeChunkStuff[226064](arg maxTasks[226062]:_any[178](?), arg ignoreRunning[226066]:_any[178](?), arg minSize[226068]:_any[178](?), arg ranges[226070]:_any[178](?), param arg adjustToOneDim[226073] =
  1) : _unknown[51]
  {
    unknown rank[226085] "param"(226082 call . ranges[226070] c"size")
    (226088 'end of statement')
    unknown EC[226091] "type variable" uint(64)[115]
    unknown numElems[226098](226096 call _cast EC[226091] 1)
    (226101 'end of statement')
    {
      unknown i[226124] 0
      unknown tmp[226125] "maybe param" "temp"
      (226137 'move' tmp[226125](226135 call chpl_compute_low_param_loop_bound 0(226105 call - rank[226085] 1)))
      unknown tmp[226126] "maybe param" "temp"
      (226147 'move' tmp[226126](226145 call chpl_compute_high_param_loop_bound 0(226142 call - rank[226085] 1)))
      unknown tmp[226127] "maybe param" "temp"
      (226150 'move' tmp[226127] 1)
      ParamForLoop[226152]
      { i[226124] tmp[226125] tmp[226126] tmp[226127]
        {
          (226120 call *= numElems[226098](226118 call _cast EC[226091](226114 call .(226113 call ranges[226070] i[226124]) c"size")))
        }
      }
      label _unused_continueLabel[226129]
      label _breakLabel[226128]
    }
    unknown numChunks[226168](226167 call _computeNumChunks maxTasks[226062] ignoreRunning[226066] minSize[226068] numElems[226098])
    (226171 'end of statement')
    if(226185 call _cond_test(226174 call == numChunks[226168] 0))
    {
      (226183 return(226181 call _build_tuple 0(226178 call - 1)))
    }
    (226196 call assert(226193 call > numChunks[226168] 0))
    unknown parDim[226201](226199 call - 1)
    (226204 'end of statement')
    unknown maxDim[226208](226206 call - 1)
    (226211 'end of statement')
    unknown maxElems[226216](226215 call min EC[226091])
    (226219 'end of statement')
    {
      unknown _indexOfInterest[226282] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[226283] "expr temp" "temp"
      (226292 'move' _iterator[226283](226290 call _getIterator(226300 call chpl_direct_range_iter 0(226297 call - rank[226085] 1) 1)))
      Defer
      {
        {
          (226316 call _freeIterator _iterator[226283])
        }
      }
      { scopeless type
        (226305 'move' _indexOfInterest[226282](226302 call iteratorIndex _iterator[226283]))
      }
      ForLoop[226284]
      {
        unknown i[226309] "index var" "insert auto destroy"
        (226311 'move' i[226309] _indexOfInterest[226282])
        {
          const curElems[226238] "const"(226236 call _cast EC[226091](226232 call .(226231 call ranges[226070] i[226309]) c"size"))
          (226241 'end of statement')
          if(226259 call _cond_test(226248 call >= curElems[226238](226246 call _cast EC[226091] numChunks[226168])))
          {
            (226252 call = parDim[226201] i[226309])
            break _breakLabel[226288] _breakLabel[226288]
          }
          if(226278 call _cond_test(226265 call > curElems[226238] maxElems[226216]))
          {
            (226269 call = maxElems[226216] curElems[226238])
            (226275 call = maxDim[226208] i[226309])
          }
        }
        label _continueLabel[226287]
        _indexOfInterest[226282]
        _iterator[226283]
      }
      label _breakLabel[226288]
    }
    if(226358 call _cond_test(226327 call == parDim[226201](226325 call - 1)))
    {
      (226331 call = parDim[226201] maxDim[226208])
      if(226353 call _cond_test(226343 call && adjustToOneDim[226073](226341 call < maxElems[226216](226339 call _cast EC[226091] numChunks[226168]))))
      {
        (226350 call = numChunks[226168](226348 call _cast int(64)[13] maxElems[226216]))
      }
    }
    (226367 return(226365 call _build_tuple numChunks[226168] parDim[226201]))
  }
  { scopeless type
    (226079 call _build_tuple int(64)[13] int(64)[13])
  }
  function _computeNumChunks[226376](arg maxTasks[226374]:_any[178](?), arg ignoreRunning[226378]:_any[178](?), arg minSize[226380]:_any[178](?), arg numElems[226382]:_any[178](?)) : _unknown[51]
  {
    if(226392 call _cond_test(226387 call <= numElems[226382] 0))
    {
      (226390 return 0)
    }
    unknown EC[226399] "type variable" uint(64)[115]
    const unumElems[226406] "const"(226404 call _cast EC[226399] numElems[226382])
    (226409 'end of statement')
    unknown numChunks[226414](226412 call _cast int(64)[13] maxTasks[226374])
    (226417 'end of statement')
    if(226454 call _cond_test(226419 call ! ignoreRunning[226378]))
    {
      const otherTasks[226430] "const"(226428 call -(226426 call(226422 call .(363136 call here[90435]) c"runningTasks")) 1)
      (226433 'end of statement')
      (226451 call = numChunks[226414](226448 IfExpr (226438 call < otherTasks[226430] maxTasks[226374]) then
      { scopeless
        (226445 call _cast int(64)[13](226442 call - maxTasks[226374] otherTasks[226430]))
      } else
      { scopeless
        1
      } ))
    }
    if(226535 call _cond_test(226460 call > minSize[226380] 0))
    {
      unknown tmp[226484] "temp"
      (226532 'move' tmp[226484](226515 call _cond_test(226517 call &&(226519 call < unumElems[226406](226522 call _cast EC[226399](226525 call * minSize[226380] numChunks[226414])))(226529 call > numChunks[226414] 1))))
      WhileDo[226489]
      {
        {
          (226480 call -= numChunks[226414] 1)
        }
        label _continueLabel[226487]
        (226510 'move' tmp[226484](226493 call _cond_test(226495 call &&(226497 call < unumElems[226406](226500 call _cast EC[226399](226503 call * minSize[226380] numChunks[226414])))(226507 call > numChunks[226414] 1))))
        tmp[226484]
      }
      label _breakLabel[226488]
    }
    if(226554 call _cond_test(226544 call >(226541 call _cast EC[226399] numChunks[226414]) unumElems[226406]))
    {
      (226551 call = numChunks[226414](226549 call _cast int(64)[13] unumElems[226406]))
    }
    (226560 return numChunks[226414])
  }
  { scopeless type
    int(64)[13]
  }
  function _computeNumChunks[226569](arg numElems[226567]:_any[178](?)) : _unknown[51]
  {
    unknown numTasks[226584](226581 IfExpr (226574 call == dataParTasksPerLocale[93281] 0) then
    { scopeless
      (226577 call .(363138 call here[90435]) c"maxTaskPar")
    } else
    { scopeless
      dataParTasksPerLocale[93281]
    } )
    (226587 'end of statement')
    unknown ignoreRunning[226590] dataParIgnoreRunningTasks[93287]
    (226593 'end of statement')
    unknown minIndicesPerTask[226595] dataParMinGranularity[93293]
    (226598 'end of statement')
    unknown numChunks[226606](226605 call _computeNumChunks numTasks[226584] ignoreRunning[226590] minIndicesPerTask[226595] numElems[226567])
    (226609 'end of statement')
    (226611 return numChunks[226606])
  }
  { scopeless type
    int(64)[13]
  }
  function _computeChunkStartEnd[226620](arg nElems[226618]:_any[178](?), arg nChunks[226622]:_any[178](?), arg myCnk[226624]:_any[178](?)) : _unknown[51]
  {
    unknown IT[226641] "type variable"(226638 IfExpr (226634 call ==(226632 'typeof' nElems[226618]) uint(64)[115]) then
    { scopeless
      uint(64)[115]
    } else
    { scopeless
      int(64)[13]
    } )
    const tmp[226667] "const" "temp"(226665 call _build_tuple(226654 call _cast IT[226641] nElems[226618])(226658 call _cast IT[226641] nChunks[226622])(226663 call _cast IT[226641] myCnk[226624]))
    (226677 call _check_tuple_var_decl tmp[226667] 3)
    const numElems[226645] "const"(226668 call tmp[226667] 0)
    const numChunks[226647] "const"(226671 call tmp[226667] 1)
    const myChunk[226649] "const"(226674 call tmp[226667] 2)
    (226682 'end of statement')
    unknown RT[226685] "type variable"(226684 'typeof' nElems[226618])
    unknown div[226692](226690 call / numElems[226645] numChunks[226647])
    (226695 'end of statement')
    unknown rem[226700](226698 call % numElems[226645] numChunks[226647])
    (226703 'end of statement')
    (226716 call assert(226713 call &&(226707 call <= 1 myChunk[226649])(226711 call <= myChunk[226649] numChunks[226647])))
    if(226787 call _cond_test(226720 call <= myChunk[226649] rem[226700]))
    {
      unknown endIx[226729](226727 call * myChunk[226649](226725 call + div[226692] 1))
      (226732 'end of statement')
      (226748 return(226746 call _build_tuple(226739 call _cast RT[226685](226736 call - endIx[226729] div[226692]))(226743 call _cast RT[226685] endIx[226729])))
    }
    {
      unknown startIx1[226763](226761 call - numElems[226645](226759 call *(226756 call +(226753 call - numChunks[226647] myChunk[226649]) 1) div[226692]))
      (226766 'end of statement')
      (226785 return(226783 call _build_tuple(226773 call _cast RT[226685](226770 call + startIx1[226763] 1))(226780 call _cast RT[226685](226777 call + startIx1[226763] div[226692]))))
    }
  }
  { scopeless type
    (226629 call * 2(226628 'typeof' nElems[226618]))
  }
  function intCeilXDivByY[226798](arg x[226796]:_any[178](?), arg y[226800]:_any[178](?)) : _unknown[51]
  {
    (226812 return(226810 call + 1(226808 call /(226805 call - x[226796] 1) y[226800])))
  }
  function _computeBlock[226821](arg numelems[226819]:_any[178](?), arg numblocks[226823]:_any[178](?), arg blocknum[226825]:_any[178](?), arg wayhi[226827]:_any[178](?), arg waylo[226834] =
  (226832 call _cast(226831 'typeof' wayhi[226827]) 0), arg lo[226842] =
  (226840 call _cast(226839 'typeof' wayhi[226827]) 0)) : _unknown[51]
  {
    if(226864 call _cond_test(226847 call == numelems[226819] 0))
    {
      (226862 return(226860 call _build_tuple(226852 call _cast(226851 'typeof' lo[226842]) 1)(226857 call _cast(226856 'typeof' lo[226842]) 0)))
    }
    const blo[226902] "const"(226899 IfExpr (226872 call == blocknum[226825] 0) then
    { scopeless
      waylo[226834]
    } else
    { scopeless
      (226897 call + lo[226842](226895 call _cast(226894 'typeof' lo[226842])(226892 call intCeilXDivByY(226885 call *(226879 call _cast uint(64)[115] numelems[226819])(226883 call _cast uint(64)[115] blocknum[226825]))(226890 call _cast uint(64)[115] numblocks[226823]))))
    } )
    (226905 'end of statement')
    const bhi[226947] "const"(226944 IfExpr (226911 call == blocknum[226825](226909 call - numblocks[226823] 1)) then
    { scopeless
      wayhi[226827]
    } else
    { scopeless
      (226942 call -(226939 call + lo[226842](226937 call _cast(226936 'typeof' lo[226842])(226934 call intCeilXDivByY(226927 call *(226918 call _cast uint(64)[115] numelems[226819])(226925 call _cast uint(64)[115](226922 call + blocknum[226825] 1)))(226932 call _cast uint(64)[115] numblocks[226823])))) 1)
    } )
    (226950 'end of statement')
    (226956 return(226954 call _build_tuple blo[226902] bhi[226947]))
  }
  function _factor[226966](param arg rank[226963] :
  int(64)[13], arg value[226968]:_any[178](?)) : _unknown[51]
  {
    unknown factors[226974](226972 call * rank[226963] int(64)[13])
    (226977 'end of statement')
    {
      unknown i[226994] 0
      unknown tmp[226995] "maybe param" "temp"
      (227007 'move' tmp[226995](227005 call chpl_compute_low_param_loop_bound 0(226982 call - rank[226963] 1)))
      unknown tmp[226996] "maybe param" "temp"
      (227017 'move' tmp[226996](227015 call chpl_compute_high_param_loop_bound 0(227012 call - rank[226963] 1)))
      unknown tmp[226997] "maybe param" "temp"
      (227020 'move' tmp[226997] 1)
      ParamForLoop[227022]
      { i[226994] tmp[226995] tmp[226996] tmp[226997]
        (226991 call =(226989 call factors[226974] i[226994]) 1)
      }
      label _unused_continueLabel[226999]
      label _breakLabel[226998]
    }
    if(227228 call _cond_test(227033 call >= value[226968] 1))
    {
      unknown iv[227036] value[226968]
      (227039 'end of statement')
      unknown factor[227042] 1
      (227045 'end of statement')
      {
        unknown tmp[227201] "temp"
        (227225 'move' tmp[227201](227220 call _cond_test(227222 call > iv[227036] 1)))
        WhileDo[227206]
        {
          {
            {
              unknown _indexOfInterest[227162] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[227163] "expr temp" "temp"
              (227172 'move' _iterator[227163](227170 call _getIterator(227177 call chpl_direct_range_iter 2 iv[227036] 1)))
              Defer
              {
                {
                  (227193 call _freeIterator _iterator[227163])
                }
              }
              { scopeless type
                (227182 'move' _indexOfInterest[227162](227179 call iteratorIndex _iterator[227163]))
              }
              ForLoop[227164]
              {
                unknown i[227186] "index var" "insert auto destroy"
                (227188 'move' i[227186] _indexOfInterest[227162])
                {
                  if(227157 call _cond_test(227060 call ==(227057 call % iv[227036] i[227186]) 0))
                  {
                    unknown j[227063] 0
                    (227066 'end of statement')
                    {
                      unknown _indexOfInterest[227097] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[227098] "expr temp" "temp"
                      (227107 'move' _iterator[227098](227105 call _getIterator(227115 call chpl_direct_range_iter 1(227112 call - rank[226963] 1) 1)))
                      Defer
                      {
                        {
                          (227131 call _freeIterator _iterator[227098])
                        }
                      }
                      { scopeless type
                        (227120 'move' _indexOfInterest[227097](227117 call iteratorIndex _iterator[227098]))
                      }
                      ForLoop[227099]
                      {
                        unknown i[227124] "index var" "insert auto destroy"
                        (227126 'move' i[227124] _indexOfInterest[227097])
                        {
                          if(227091 call _cond_test(227084 call <(227079 call factors[226974] i[227124])(227083 call factors[226974] j[227063])))
                          {
                            (227088 call = j[227063] i[227124])
                          }
                        }
                        label _continueLabel[227102]
                        _indexOfInterest[227097]
                        _iterator[227098]
                      }
                      label _breakLabel[227103]
                    }
                    (227143 call *=(227141 call factors[226974] j[227063]) i[227186])
                    (227151 call = iv[227036](227149 call / iv[227036] i[227186]))
                    break _breakLabel[227168] _breakLabel[227168]
                  }
                }
                label _continueLabel[227167]
                _indexOfInterest[227162]
                _iterator[227163]
              }
              label _breakLabel[227168]
            }
          }
          label _continueLabel[227204]
          (227215 'move' tmp[227201](227210 call _cond_test(227212 call > iv[227036] 1)))
          tmp[227201]
        }
        label _breakLabel[227205]
      }
    }
    {
      unknown _indexOfInterest[227321] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[227322] "expr temp" "temp"
      (227331 'move' _iterator[227322](227329 call _getIterator(227339 call chpl_direct_range_iter 0(227336 call - rank[226963] 1) 1)))
      Defer
      {
        {
          (227355 call _freeIterator _iterator[227322])
        }
      }
      { scopeless type
        (227344 'move' _indexOfInterest[227321](227341 call iteratorIndex _iterator[227322]))
      }
      ForLoop[227323]
      {
        unknown i[227348] "index var" "insert auto destroy"
        (227350 'move' i[227348] _indexOfInterest[227321])
        {
          unknown _indexOfInterest[227277] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[227278] "expr temp" "temp"
          (227287 'move' _iterator[227278](227285 call _getIterator(227298 call chpl_direct_range_iter(227291 call + i[227348] 1)(227295 call - rank[226963] 1) 1)))
          Defer
          {
            {
              (227314 call _freeIterator _iterator[227278])
            }
          }
          { scopeless type
            (227303 'move' _indexOfInterest[227277](227300 call iteratorIndex _iterator[227278]))
          }
          ForLoop[227279]
          {
            unknown j[227307] "index var" "insert auto destroy"
            (227309 'move' j[227307] _indexOfInterest[227277])
            if(227272 call _cond_test(227259 call <(227254 call factors[226974] i[227348])(227258 call factors[226974] j[227307])))
            {
              (227269 call <=>(227264 call factors[226974] i[227348])(227268 call factors[226974] j[227307]))
            }
            label _continueLabel[227282]
            _indexOfInterest[227277]
            _iterator[227278]
          }
          label _breakLabel[227283]
        }
        label _continueLabel[227326]
        _indexOfInterest[227321]
        _iterator[227322]
      }
      label _breakLabel[227327]
    }
    (227363 return factors[226974])
  }
  function computeZeroBasedDomain[227373](arg dom[227370] :
  _domain[125902](?)) : _unknown[51]
  {
    (227388 return(227386 call chpl__buildDomainExpr(227384 'expand_tuple'(227383 call computeZeroBasedRanges(227381 call(227377 call . dom[227370] c"dims"))))))
  }
  function computeZeroBasedRanges[227399](arg ranges[227396] :
  _tuple[56199](?)) : _unknown[51]
  {
    function helper[227405](arg idxType[227403]:_any[178](?), arg first[227407]:_any[178](?), arg rest[227410]:_any[178](?) ...) : _unknown[51]
    {
      if(227485 call _cond_test(227418 call >(227414 call . rest[227410] c"size") 1))
      {
        (227445 return(227443 call _build_tuple(227433 call #(227424 call chpl_build_low_bounded_range(227422 call _cast idxType[227403] 0))(227431 call _cast idxType[227403](227427 call . first[227407] c"size")))(227441 'expand_tuple'(227440 call helper idxType[227403](227439 'expand_tuple' rest[227410])))))
      }
      {
        (227483 return(227481 call _build_tuple(227460 call #(227451 call chpl_build_low_bounded_range(227449 call _cast idxType[227403] 0))(227458 call _cast idxType[227403](227454 call . first[227407] c"size")))(227478 call #(227466 call chpl_build_low_bounded_range(227464 call _cast idxType[227403] 0))(227476 call _cast idxType[227403](227472 call .(227471 call rest[227410] 0) c"size")))))
      }
    }
    unknown idxType[227502] "type variable"(227499 call .(227498 call ranges[227396] 0) c"idxType")
    if(227542 call _cond_test(227510 call >(227506 call . ranges[227396] c"size") 1))
    {
      (227518 return(227517 call helper idxType[227502](227516 'expand_tuple' ranges[227396])))
    }
    {
      (227540 return(227538 call _build_tuple(227536 call #(227524 call chpl_build_low_bounded_range(227522 call _cast idxType[227502] 0))(227534 call _cast idxType[227502](227530 call .(227529 call ranges[227396] 0) c"size")))))
    }
  }
  function densify[227556](arg sub[227553] :
  _domain[125902](?), arg whole[227559] :
  _domain[125902](?), arg userErrors[227563] =
  1) : _unknown[51]
  {
    unknown argtypes[227585] "type variable"(227584 'typeof'(227582 call _build_tuple sub[227553] whole[227559]))
    (227602 call _densiCheck(227598 call ==(227591 call . sub[227553] c"rank")(227595 call . whole[227559] c"rank")) argtypes[227585])
    (227615 call _densiIdxCheck(227606 call . sub[227553] c"idxType")(227611 call . whole[227559] c"idxType") argtypes[227585])
    (227637 return(227635 call chpl__buildDomainExpr(227633 'expand_tuple'(227632 call densify(227623 call(227619 call . sub[227553] c"dims"))(227630 call(227626 call . whole[227559] c"dims")) userErrors[227563]))))
  }
  { scopeless type
    (227577 call chpl__buildDomainRuntimeType defaultDist[94050](227567 call . whole[227559] c"rank")(227572 call . whole[227559] c"idxType") 1)
  }
  function densify[227646](arg subs[227644]:_any[178](?), arg wholes[227648]:_any[178](?), arg userErrors[227651] =
  1) : _unknown[51]
  {
    unknown argtypes[227670] "type variable"(227669 'typeof'(227667 call _build_tuple subs[227644] wholes[227648]))
    (227687 call _densiCheck(227683 call ==(227676 call . wholes[227648] c"size")(227680 call . subs[227644] c"size")) argtypes[227670])
    (227699 call _densiCheck(227696 call isRange(227694 call subs[227644] 0)) argtypes[227670])
    (227711 call _densiCheck(227708 call isRange(227706 call wholes[227648] 0)) argtypes[227670])
    (227719 call _densiEnsureBounded(227717 call subs[227644] 0))
    (227738 call _densiIdxCheck(227726 call .(227725 call subs[227644] 0) c"idxType")(227734 call .(227733 call wholes[227648] 0) c"idxType") argtypes[227670])
    unknown rank[227744] "param"(227741 call . wholes[227648] c"size")
    (227747 'end of statement')
    unknown IT[227755] "type variable"(227752 call .(227751 call wholes[227648] 0) c"idxType")
    unknown result[227770](227768 call * rank[227744](227767 call range[64316](?) IT[227755] bounded[64205] 1))
    (227773 'end of statement')
    {
      unknown d[227865] 0
      unknown tmp[227866] "maybe param" "temp"
      (227878 'move' tmp[227866](227876 call chpl_compute_low_param_loop_bound 0(227777 call - rank[227744] 1)))
      unknown tmp[227867] "maybe param" "temp"
      (227888 'move' tmp[227867](227886 call chpl_compute_high_param_loop_bound 0(227883 call - rank[227744] 1)))
      unknown tmp[227868] "maybe param" "temp"
      (227891 'move' tmp[227868] 1)
      ParamForLoop[227893]
      { d[227865] tmp[227866] tmp[227867] tmp[227868]
        {
          (227791 call _densiCheck(227788 call isRange(227786 call subs[227644] d[227865])) argtypes[227670])
          (227804 call _densiCheck(227801 call isRange(227799 call wholes[227648] d[227865])) argtypes[227670])
          (227817 call _densiIdxCheck(227811 call .(227810 call wholes[227648] d[227865]) c"idxType") IT[227755] argtypes[227670])
          (227825 call _densiEnsureBounded(227823 call subs[227644] d[227865]))
          (227844 call _densiIdxCheck(227832 call .(227831 call subs[227644] d[227865]) c"idxType")(227840 call .(227839 call wholes[227648] d[227865]) c"idxType") argtypes[227670])
          (227862 call =(227849 call result[227770] d[227865])(227861 call densify(227854 call subs[227644] d[227865])(227859 call wholes[227648] d[227865]) userErrors[227651]))
        }
      }
      label _unused_continueLabel[227870]
      label _breakLabel[227869]
    }
    (227903 return result[227770])
  }
  where {
    (227662 call &&(227657 call isTuple subs[227644])(227661 call isTuple wholes[227648]))
  }
  function densify[227920](arg s[227917] :
  (227916 call range[64316](?) ?[260](boundedType = unknown B[227913])), arg w[227930] :
  (227929 call range[64316](?) unknown IT[227923] ?[260](stridable = 1)), arg userErrors[227934] =
  1) : _unknown[51]
  {
    (227946 call _densiEnsureBounded s[227917])
    (227962 call _densiIdxCheck(227951 call . s[227917] c"idxType") IT[227923](227961 'typeof'(227959 call _build_tuple s[227917] w[227930])))
    function ensure[227968](arg cond[227966]:_any[178](?), arg args[227971]:_any[178](?) ...) : _unknown[51] "no return value for void"
    {
      if(227997 call _cond_test userErrors[227934])
      {
        if(227984 call _cond_test(227976 call ! cond[227966]))
        {
          (227982 call halt(227980 'expand_tuple' args[227971]))
        }
      }
      {
        (227995 call assert cond[227966](227994 'expand_tuple' args[227971]))
      }
    }
    if(228321 call _cond_test(228010 call ==(228006 call . s[227917] c"size") 0))
    {
      (228022 return(228020 call chpl_build_bounded_range(228014 call _cast IT[227923] 1)(228018 call _cast IT[227923] 0)))
    }
    {
      (228087 call ensure(228031 call >(228027 call . w[227930] c"size") 0) "densify(s=" s[227917] ", w=" w[227930] "): w is empty while s is not")
      unknown low[228101](228100 call(228092 call . w[227930] c"indexOrder")(228096 call . s[227917] c"first")) IT[227923]
      (228104 'end of statement')
      (228132 call ensure(228108 call >= low[228101] 0) "densify(s=" s[227917] ", w=" w[227930] "): s.first is not in w")
      if(228317 call _cond_test(228139 call ==(228135 call . s[227917] c"size") 1))
      {
        (228145 return(228143 call chpl_build_bounded_range low[228101] low[228101]))
      }
      {
        unknown high[228159](228158 call(228150 call . w[227930] c"indexOrder")(228154 call . s[227917] c"last")) IT[227923]
        (228162 'end of statement')
        (228191 call ensure(228167 call >= high[228159] 0) "densify(s=" s[227917] ", w=" w[227930] "): s.last is not in w")
        (228229 call ensure(228205 call ==(228202 call %(228195 call . s[227917] c"stride")(228199 call . w[227930] c"stride")) 0) "densify(s=" s[227917] ", w=" w[227930] "): s.stride is not a multiple of w.stride")
        const stride[228241] "const"(228239 call /(228232 call . s[227917] c"stride")(228236 call . w[227930] c"stride"))
        (228244 'end of statement')
        if(228254 call _cond_test(228247 call < stride[228241] 0))
        {
          (228251 call <=> low[228101] high[228159])
        }
        (228306 call assert(228262 call <= low[228101] high[228159]) "densify(s=" s[227917] ", w=" w[227930] "): got low (" low[228101] ") larger than high (" high[228159] ")")
        (228315 return(228313 call chpl_by(228310 call chpl_build_bounded_range low[228101] high[228159]) stride[228241]))
      }
    }
  }
  { scopeless type
    (227942 call range[64316](?) IT[227923] B[227913] 1)
  }
  function densify[228343](arg sArg[228340] :
  (228339 call range[64316](?) ?[260](boundedType = unknown B[228333])(stridable = unknown S[228336])), arg w[228353] :
  (228352 call range[64316](?) unknown IT[228346] ?[260](stridable = 0)), arg userErrors[228357] =
  1) : _unknown[51]
  {
    (228369 call _densiEnsureBounded sArg[228340])
    (228385 call _densiIdxCheck(228374 call . sArg[228340] c"idxType") IT[228346](228384 'typeof'(228382 call _build_tuple sArg[228340] w[228353])))
    const s[228396] "const"(228394 call _cast(228393 call range[64316](?) IT[228346] B[228333] S[228336]) sArg[228340])
    (228399 'end of statement')
    function ensure[228404](arg cond[228402]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      if(228425 call _cond_test userErrors[228357])
      {
        if(228414 call _cond_test(228408 call ! cond[228402]))
        {
          (228412 call halt)
        }
      }
      {
        (228423 call assert cond[228402])
      }
    }
    (228464 call ensure(228461 call ||(228439 call(228435 call . s[228396] c"isEmpty"))(228459 call <=(228441 call . w[228353] c"low")(228456 IfExpr (228447 call isIntType IT[228346]) then
    { scopeless
      (228449 call . s[228396] c"alignedLow")
    } else
    { scopeless
      (228453 call . s[228396] c"low")
    } ))))
    (228496 call ensure(228493 call ||(228481 call ||(228472 call(228468 call . s[228396] c"isEmpty"))(228479 call !(228478 call(228474 call . w[228353] c"hasHighBound"))))(228491 call <=(228484 call . s[228396] c"alignedHigh")(228488 call . w[228353] c"high"))))
    if(228522 call _cond_test(228508 call &&(228501 call isUintType IT[228346])(228507 call(228503 call . s[228396] c"isEmpty"))))
    {
      (228520 return(228518 call chpl_build_bounded_range(228512 call _cast IT[228346] 1)(228516 call _cast IT[228346] 0)))
    }
    (228542 return(228540 call _cast(228539 call range[64316](?) IT[228346] B[228333] S[228336])(228532 call - s[228396](228529 call . w[228353] c"low"))))
  }
  { scopeless type
    (228365 call range[64316](?) IT[228346] B[228333] S[228336])
  }
  function _densiEnsureBounded[228551](arg arg[228549]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    if(228581 call _cond_test(228557 call !(228556 call isBoundedRange arg[228549])))
    {
      (228579 call compilerError "densify() currently requires that sub-ranges be bounded" 2)
    }
  }
  function _densiIdxCheck[228593](arg subIdxType[228591]:_any[178](?), arg wholeIdxType[228595]:_any[178](?), arg argtypes[228597]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (228609 call _densiCheck(228604 call chpl__legalIntCoerce subIdxType[228591] wholeIdxType[228595]) argtypes[228597](errlevel = 3))
  }
  function _densiCheck[228618](param arg cond[228616]:_any[178](?), arg argtypes[228620]:_any[178](?), param arg errlevel[228623] =
  2) : _unknown[51] "no return value for void"
  {
    if(228657 call _cond_test(228627 call ! cond[228616]))
    {
      (228655 call compilerError "densify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges (except stridability and range b(228652 call _cast string[26] argtypes[228620]) errlevel[228623])
    }
  }
  function unDensify[228671](arg dense[228668] :
  _domain[125902](?), arg whole[228674] :
  _domain[125902](?), arg userErrors[228678] =
  1) : _unknown[51]
  {
    unknown argtypes[228700] "type variable"(228699 'typeof'(228697 call _build_tuple dense[228668] whole[228674]))
    (228717 call _undensCheck(228713 call ==(228706 call . dense[228668] c"rank")(228710 call . whole[228674] c"rank")) argtypes[228700])
    (228739 return(228737 call chpl__buildDomainExpr(228735 'expand_tuple'(228734 call unDensify(228725 call(228721 call . dense[228668] c"dims"))(228732 call(228728 call . whole[228674] c"dims")) userErrors[228678]))))
  }
  { scopeless type
    (228692 call chpl__buildDomainRuntimeType defaultDist[94050](228682 call . whole[228674] c"rank")(228687 call . whole[228674] c"idxType") 1)
  }
  function unDensify[228748](arg denses[228746]:_any[178](?), arg wholes[228750]:_any[178](?), arg userErrors[228753] =
  1) : _unknown[51]
  {
    unknown argtypes[228772] "type variable"(228771 'typeof'(228769 call _build_tuple denses[228746] wholes[228750]))
    (228789 call _undensCheck(228785 call ==(228778 call . wholes[228750] c"size")(228782 call . denses[228746] c"size")) argtypes[228772])
    (228801 call _undensCheck(228798 call isRange(228796 call denses[228746] 0)) argtypes[228772])
    (228813 call _undensCheck(228810 call isRange(228808 call wholes[228750] 0)) argtypes[228772])
    (228821 call _undensEnsureBounded(228819 call denses[228746] 0))
    unknown rank[228827] "param"(228824 call . wholes[228750] c"size")
    (228830 'end of statement')
    unknown IT[228838] "type variable"(228835 call .(228834 call wholes[228750] 0) c"idxType")
    unknown result[228853](228851 call * rank[228827](228850 call range[64316](?) IT[228838] bounded[64205] 1))
    (228856 'end of statement')
    {
      unknown d[228931] 0
      unknown tmp[228932] "maybe param" "temp"
      (228944 'move' tmp[228932](228942 call chpl_compute_low_param_loop_bound 0(228860 call - rank[228827] 1)))
      unknown tmp[228933] "maybe param" "temp"
      (228954 'move' tmp[228933](228952 call chpl_compute_high_param_loop_bound 0(228949 call - rank[228827] 1)))
      unknown tmp[228934] "maybe param" "temp"
      (228957 'move' tmp[228934] 1)
      ParamForLoop[228959]
      { d[228931] tmp[228932] tmp[228933] tmp[228934]
        {
          (228874 call _undensCheck(228871 call isRange(228869 call denses[228746] d[228931])) argtypes[228772])
          (228887 call _undensCheck(228884 call isRange(228882 call wholes[228750] d[228931])) argtypes[228772])
          (228903 call _undensCheck(228900 call chpl__legalIntCoerce(228895 call .(228894 call wholes[228750] d[228931]) c"idxType") IT[228838]) argtypes[228772])
          (228911 call _undensEnsureBounded(228909 call denses[228746] d[228931]))
          (228928 call =(228916 call result[228853] d[228931])(228927 call unDensify(228921 call denses[228746] d[228931])(228926 call wholes[228750] d[228931])))
        }
      }
      label _unused_continueLabel[228936]
      label _breakLabel[228935]
    }
    (228969 return result[228853])
  }
  where {
    (228764 call &&(228759 call isTuple denses[228746])(228763 call isTuple wholes[228750]))
  }
  function unDensify[228986](arg dense[228983] :
  (228982 call range[64316](?) ?[260](boundedType = unknown B[228979])), arg whole[228996] :
  (228995 call range[64316](?) unknown IT[228989] ?[260](stridable = 1))) : _unknown[51]
  {
    (229008 call _undensEnsureBounded dense[228983])
    if(229042 call _cond_test(229019 call ==(229012 call . whole[228996] c"boundedType") boundedNone[64211]))
    {
      (229040 call compilerError "unDensify(): the 'whole' argument must have at least one bound")
    }
    if(229066 call _cond_test(229052 call ==(229048 call . dense[228983] c"size") 0))
    {
      (229064 return(229062 call chpl_build_bounded_range(229056 call _cast IT[228989] 1)(229060 call _cast IT[228989] 0)))
    }
    if(229100 call _cond_test(229077 call !(229076 call(229072 call . whole[228996] c"hasFirst"))))
    {
      (229098 call halt "unDensify() is invoked with the 'whole' range that has no first index")
    }
    unknown low[229116](229115 call(229107 call . whole[228996] c"orderToIndex")(229111 call . dense[228983] c"first")) IT[228989]
    (229119 'end of statement')
    const stride[229130] "const"(229128 call *(229121 call . whole[228996] c"stride")(229125 call . dense[228983] c"stride"))
    (229133 'end of statement')
    unknown high[229147](229146 call chpl__addRangeStrides low[229116] stride[229130](229144 call -(229140 call . dense[228983] c"size") 1)) IT[228989]
    (229150 'end of statement')
    (229166 call assert(229163 call == high[229147](229162 call(229154 call . whole[228996] c"orderToIndex")(229158 call . dense[228983] c"last"))))
    if(229177 call _cond_test(229170 call < stride[229130] 0))
    {
      (229174 call <=> low[229116] high[229147])
    }
    (229229 call assert(229185 call <= low[229116] high[229147]) "unDensify(dense=" dense[228983] ", whole=" whole[228996] "): got low (" low[229116] ") larger than high (" high[229147] ")")
    (229238 return(229236 call chpl_by(229233 call chpl_build_bounded_range low[229116] high[229147]) stride[229130]))
  }
  { scopeless type
    (229004 call range[64316](?) IT[228989] B[228979] 1)
  }
  function unDensify[229258](arg dense[229255] :
  (229254 call range[64316](?) ?[260](boundedType = unknown B[229248])(stridable = unknown S[229251])), arg whole[229268] :
  (229267 call range[64316](?) unknown IT[229261] ?[260](stridable = 0))) : _unknown[51]
  {
    if(229306 call _cond_test(229283 call !(229282 call(229278 call . whole[229268] c"hasLowBound"))))
    {
      (229304 call compilerError "unDensify(): the 'whole' argument, when not stridable, must have a low bound")
    }
    (229327 return(229325 call _cast(229324 call range[64316](?) IT[229261] B[229248] S[229251])(229317 call + dense[229255](229314 call . whole[229268] c"low"))))
  }
  { scopeless type
    (229276 call range[64316](?) IT[229261] B[229248] S[229251])
  }
  function _undensEnsureBounded[229336](arg arg[229334]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    if(229366 call _cond_test(229342 call !(229341 call isBoundedRange arg[229334])))
    {
      (229364 call compilerError "unDensify() currently requires that the densified ranges be bounded" 2)
    }
  }
  function _undensCheck[229378](param arg cond[229376]:_any[178](?), arg argtypes[229380]:_any[178](?), param arg errlevel[229383] =
  2) : _unknown[51] "no return value for void"
  {
    if(229417 call _cond_test(229387 call ! cond[229376]))
    {
      (229415 call compilerError "unDensify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges, but is invoked on "(229412 call _cast string[26] argtypes[229380]) errlevel[229383])
    }
  }
  function setupTargetLocalesArray[229429](ref arg targetLocDom[229427]:_any[178](?), arg targetLocArr[229431]:_any[178](?), arg specifiedLocArr[229433]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown rank[229439] "param"(229436 call . targetLocDom[229427] c"rank")
    (229442 'end of statement')
    if(229681 call _cond_test(229455 call &&(229446 call != rank[229439] 1)(229453 call ==(229449 call . specifiedLocArr[229433] c"rank") 1)))
    {
      const factors[229465] "const"(229464 call _factor rank[229439](229461 call . specifiedLocArr[229433] c"size"))
      (229468 'end of statement')
      unknown ranges[229474](229472 call * rank[229439] range[64316](?))
      (229477 'end of statement')
      {
        unknown i[229501] 0
        unknown tmp[229502] "maybe param" "temp"
        (229514 'move' tmp[229502](229512 call chpl_compute_low_param_loop_bound 0(229481 call - rank[229439] 1)))
        unknown tmp[229503] "maybe param" "temp"
        (229524 'move' tmp[229503](229522 call chpl_compute_high_param_loop_bound 0(229519 call - rank[229439] 1)))
        unknown tmp[229504] "maybe param" "temp"
        (229527 'move' tmp[229504] 1)
        ParamForLoop[229529]
        { i[229501] tmp[229502] tmp[229503] tmp[229504]
          (229498 call =(229488 call ranges[229474] i[229501])(229496 call #(229490 call chpl_build_low_bounded_range 0)(229495 call factors[229465] i[229501])))
        }
        label _unused_continueLabel[229506]
        label _breakLabel[229505]
      }
      (229544 call = targetLocDom[229427](229542 call chpl__buildDomainExpr(229540 'expand_tuple' ranges[229474])))
      (229553 call = targetLocArr[229431](229552 call reshape specifiedLocArr[229433] targetLocDom[229427]))
    }
    {
      if(229584 call _cond_test(229561 call !=(229557 call . specifiedLocArr[229433] c"rank") rank[229439]))
      {
        (229582 call compilerError "specified target array of locales must equal 1 or distribution rank")
      }
      unknown ranges[229594](229592 call * rank[229439] range[64316](?))
      (229597 'end of statement')
      {
        unknown i[229630] 0
        unknown tmp[229631] "maybe param" "temp"
        (229643 'move' tmp[229631](229641 call chpl_compute_low_param_loop_bound 0(229601 call - rank[229439] 1)))
        unknown tmp[229632] "maybe param" "temp"
        (229653 'move' tmp[229632](229651 call chpl_compute_high_param_loop_bound 0(229648 call - rank[229439] 1)))
        unknown tmp[229633] "maybe param" "temp"
        (229656 'move' tmp[229633] 1)
        ParamForLoop[229658]
        { i[229630] tmp[229631] tmp[229632] tmp[229633]
          (229627 call =(229608 call ranges[229594] i[229630])(229625 call #(229610 call chpl_build_low_bounded_range 0)(229622 call .(229621 call(229616 call .(229613 call . specifiedLocArr[229433] c"_dom") c"dim") i[229630]) c"size")))
        }
        label _unused_continueLabel[229635]
        label _breakLabel[229634]
      }
      (229673 call = targetLocDom[229427](229671 call chpl__buildDomainExpr(229669 'expand_tuple' ranges[229594])))
      (229678 call = targetLocArr[229431] specifiedLocArr[229433])
    }
  }
  function setupTargetLocRanges[229691](param arg rank[229689]:_any[178](?), arg specifiedLocArr[229693]:_any[178](?)) : _unknown[51]
  {
    unknown ranges[229699](229697 call * rank[229689] range[64316](?))
    (229702 'end of statement')
    if(229877 call _cond_test(229715 call &&(229706 call != rank[229689] 1)(229713 call ==(229709 call . specifiedLocArr[229693] c"rank") 1)))
    {
      const factors[229725] "const"(229724 call _factor rank[229689](229721 call . specifiedLocArr[229693] c"size"))
      (229728 'end of statement')
      {
        unknown i[229753] 0
        unknown tmp[229754] "maybe param" "temp"
        (229766 'move' tmp[229754](229764 call chpl_compute_low_param_loop_bound 0(229733 call - rank[229689] 1)))
        unknown tmp[229755] "maybe param" "temp"
        (229776 'move' tmp[229755](229774 call chpl_compute_high_param_loop_bound 0(229771 call - rank[229689] 1)))
        unknown tmp[229756] "maybe param" "temp"
        (229779 'move' tmp[229756] 1)
        ParamForLoop[229781]
        { i[229753] tmp[229754] tmp[229755] tmp[229756]
          (229750 call =(229740 call ranges[229699] i[229753])(229748 call #(229742 call chpl_build_low_bounded_range 0)(229747 call factors[229725] i[229753])))
        }
        label _unused_continueLabel[229758]
        label _breakLabel[229757]
      }
    }
    {
      if(229802 call _cond_test(229795 call !=(229791 call . specifiedLocArr[229693] c"rank") rank[229689]))
      {
        (229800 call compilerError "specified target array of locales must equal 1 or distribution rank")
      }
      {
        unknown i[229840] 0
        unknown tmp[229841] "maybe param" "temp"
        (229853 'move' tmp[229841](229851 call chpl_compute_low_param_loop_bound 0(229811 call - rank[229689] 1)))
        unknown tmp[229842] "maybe param" "temp"
        (229863 'move' tmp[229842](229861 call chpl_compute_high_param_loop_bound 0(229858 call - rank[229689] 1)))
        unknown tmp[229843] "maybe param" "temp"
        (229866 'move' tmp[229843] 1)
        ParamForLoop[229868]
        { i[229840] tmp[229841] tmp[229842] tmp[229843]
          (229837 call =(229818 call ranges[229699] i[229840])(229835 call #(229820 call chpl_build_low_bounded_range 0)(229832 call .(229831 call(229826 call .(229823 call . specifiedLocArr[229693] c"_dom") c"dim") i[229840]) c"size")))
        }
        label _unused_continueLabel[229845]
        label _breakLabel[229844]
      }
    }
    (229882 return ranges[229699])
  }
  function createWholeDomainForInds[229890](param arg rank[229888]:_any[178](?), arg idxType[229892]:_any[178](?), param arg stridable[229894]:_any[178](?), arg inds[229896]:_any[178](?)) : _unknown[51]
  {
    if(229929 call _cond_test(229901 call isDomain inds[229896]))
    {
      (229903 return inds[229896])
    }
    {
      unknown result[229913](229911 call chpl__buildDomainRuntimeType defaultDist[94050] rank[229888] idxType[229892] stridable[229894])
      (229916 'end of statement')
      (229924 call(229919 call . result[229913] c"setIndices") inds[229896])
      (229927 return result[229913])
    }
  }
  function bulkCommComputeActiveDims[229940](arg LeftDims[229938]:_any[178](?), arg RightDims[229942]:_any[178](?)) : _unknown[51]
  {
    unknown LeftRank[229948] "param"(229945 call . LeftDims[229938] c"size")
    (229951 'end of statement')
    unknown RightRank[229957] "param"(229954 call . RightDims[229942] c"size")
    (229960 'end of statement')
    unknown minRank[229966] "param"(229965 call min LeftRank[229948] RightRank[229957])
    (229969 'end of statement')
    unknown inferredRank[229971] 0
    (229974 'end of statement')
    unknown LeftActives[229975](229980 call * minRank[229966] int(64)[13])
    unknown RightActives[229982](229986 'typeof' LeftActives[229975])
    (229987 'end of statement')
    unknown li[229989] 0
    unknown ri[229993] 0
    (229996 'end of statement')
    function advance[229999]() : _unknown[51] "no return value for void"
    {
      {
        unknown tmp[230034] "temp"
        (230100 'move' tmp[230034](230074 call _cond_test(230076 call &&(230078 call ==(230080 call .(230082 call LeftDims[229938] li[229989]) c"size") 1)(230087 call !=(230089 call .(230091 call LeftDims[229938] li[229989]) c"size")(230095 call .(230097 call RightDims[229942] ri[229993]) c"size")))))
        WhileDo[230039]
        {
          (230031 call += li[229989] 1)
          label _continueLabel[230037]
          (230069 'move' tmp[230034](230043 call _cond_test(230045 call &&(230047 call ==(230049 call .(230051 call LeftDims[229938] li[229989]) c"size") 1)(230056 call !=(230058 call .(230060 call LeftDims[229938] li[229989]) c"size")(230064 call .(230066 call RightDims[229942] ri[229993]) c"size")))))
          tmp[230034]
        }
        label _breakLabel[230038]
      }
      {
        unknown tmp[230137] "temp"
        (230203 'move' tmp[230137](230177 call _cond_test(230179 call &&(230181 call ==(230183 call .(230185 call RightDims[229942] ri[229993]) c"size") 1)(230190 call !=(230192 call .(230194 call RightDims[229942] ri[229993]) c"size")(230198 call .(230200 call LeftDims[229938] li[229989]) c"size")))))
        WhileDo[230142]
        {
          (230134 call += ri[229993] 1)
          label _continueLabel[230140]
          (230172 'move' tmp[230137](230146 call _cond_test(230148 call &&(230150 call ==(230152 call .(230154 call RightDims[229942] ri[229993]) c"size") 1)(230159 call !=(230161 call .(230163 call RightDims[229942] ri[229993]) c"size")(230167 call .(230169 call LeftDims[229938] li[229989]) c"size")))))
          tmp[230137]
        }
        label _breakLabel[230141]
      }
      (230224 call assert(230221 call ==(230211 call .(230210 call LeftDims[229938] li[229989]) c"size")(230218 call .(230217 call RightDims[229942] ri[229993]) c"size")))
    }
    {
      unknown tmp[230274] "temp"
      DoWhile[230295]
      {
        {
          (230230 call advance)
          (230238 call =(230236 call LeftActives[229975] inferredRank[229971]) li[229989])
          (230246 call =(230244 call RightActives[229982] inferredRank[229971]) ri[229993])
          (230251 call += inferredRank[229971] 1)
          (230256 call += li[229989] 1)
          (230261 call += ri[229993] 1)
          label _continueLabel[230277]
          (230293 'move' tmp[230274](230282 call _cond_test(230284 call &&(230286 call < li[229989] LeftRank[229948])(230290 call < ri[229993] RightRank[229957]))))
        }
        tmp[230274]
      }
      label _breakLabel[230278]
    }
    (230305 return(230303 call _build_tuple LeftActives[229975] RightActives[229982] inferredRank[229971]))
  }
  function bulkCommTranslateDomain[230315](arg srcSlice[230312] :
  _domain[125902](?), arg srcDom[230318] :
  _domain[125902](?), arg targetDom[230322] :
  _domain[125902](?)) : _unknown[51]
  {
    if(230356 call _cond_test(230333 call !=(230326 call . srcSlice[230312] c"rank")(230330 call . srcDom[230318] c"rank")))
    {
      (230354 call compilerError "bulkCommTranslateDomain: source slice and source domain must have identical rank")
    }
    const tmp[230384] "const" "temp"(230383 call bulkCommComputeActiveDims(230375 call(230371 call . srcDom[230318] c"dims"))(230382 call(230378 call . targetDom[230322] c"dims")))
    (230394 call _check_tuple_var_decl tmp[230384] 3)
    const SrcActives[230362] "const"(230385 call tmp[230384] 0)
    const TargetActives[230364] "const"(230388 call tmp[230384] 1)
    const inferredRank[230366] "const"(230391 call tmp[230384] 2)
    (230399 'end of statement')
    unknown needsStridable[230410] "param"(230408 call ||(230401 call . targetDom[230322] c"stridable")(230405 call . srcSlice[230312] c"stridable"))
    (230413 'end of statement')
    unknown rngs[230435](230434 call(230430 call . targetDom[230322] c"dims"))(230427 call *(230415 call . targetDom[230322] c"rank")(230426 call range[64316](?)(230420 call . targetDom[230322] c"idxType")(stridable = needsStridable[230410])))
    (230438 'end of statement')
    {
      unknown _indexOfInterest[230503] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[230504] "expr temp" "temp"
      (230513 'move' _iterator[230504](230511 call _getIterator(230521 call chpl_direct_range_iter 0(230518 call - inferredRank[230366] 1) 1)))
      Defer
      {
        {
          (230537 call _freeIterator _iterator[230504])
        }
      }
      { scopeless type
        (230526 'move' _indexOfInterest[230503](230523 call iteratorIndex _iterator[230504]))
      }
      ForLoop[230505]
      {
        unknown i[230530] "index var" "insert auto destroy"
        (230532 'move' i[230530] _indexOfInterest[230503])
        {
          const SD[230451] "const"(230450 call SrcActives[230362] i[230530])
          (230454 'end of statement')
          const TD[230460] "const"(230459 call TargetActives[230364] i[230530])
          (230463 'end of statement')
          const dense[230481] "const"(230480 call densify(230471 call(230466 call . srcSlice[230312] c"dim") SD[230451])(230479 call(230474 call . srcDom[230318] c"dim") SD[230451]))
          (230484 'end of statement')
          (230500 call =(230488 call rngs[230435] TD[230460])(230499 call unDensify dense[230481](230498 call(230493 call . targetDom[230322] c"dim") TD[230460])))
        }
        label _continueLabel[230508]
        _indexOfInterest[230503]
        _iterator[230504]
      }
      label _breakLabel[230509]
    }
    (230549 return(230547 call chpl__buildDomainExpr(230545 'expand_tuple' rngs[230435])))
  }
  function bulkCommConvertCoordinate[230557](arg ind[230555]:_any[178](?), arg bView[230560] :
  _domain[125902](?), arg aView[230564] :
  _domain[125902](?)) : _unknown[51]
  {
    if(230630 call _cond_test(230575 call !=(230568 call . bView[230560] c"rank")(230572 call . aView[230564] c"rank")))
    {
      (230627 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - domain ranks must match: bView.rank = "(230601 call _cast string[26](230597 call . bView[230560] c"rank")) ", aView.rank = "(230625 call _cast string[26](230621 call . aView[230564] c"rank")))
    }
    unknown rank[230639] "param"(230636 call . aView[230564] c"rank")
    (230642 'end of statement')
    const b[230647] "const"(230646 call chpl__tuplify ind[230555])
    (230650 'end of statement')
    if(230741 call _cond_test(230656 call !=(230652 call . b[230647] c"size") rank[230639]))
    {
      unknown plural[230686] "param"(230683 IfExpr (230663 call ==(230659 call . b[230647] c"size") 1) then
      { scopeless
        " element"
      } else
      { scopeless
        " elements"
      } )
      (230689 'end of statement')
      (230739 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - expecting index with "(230712 call _cast string[26] rank[230639]) " elements, got "(230736 call _cast string[26](230732 call . b[230647] c"size")) plural[230686])
    }
    unknown idxType[230749] "type variable"(230746 call . aView[230564] c"idxType")
    const AD[230758] "const"(230757 call(230753 call . aView[230564] c"dims"))
    (230761 'end of statement')
    const BD[230768] "const"(230767 call(230763 call . bView[230560] c"dims"))
    (230771 'end of statement')
    unknown result[230776](230774 call * rank[230639] idxType[230749])
    (230779 'end of statement')
    {
      unknown i[230846] 0
      unknown tmp[230847] "maybe param" "temp"
      (230859 'move' tmp[230847](230857 call chpl_compute_low_param_loop_bound 0(230783 call - rank[230639] 1)))
      unknown tmp[230848] "maybe param" "temp"
      (230869 'move' tmp[230848](230867 call chpl_compute_high_param_loop_bound 0(230864 call - rank[230639] 1)))
      unknown tmp[230849] "maybe param" "temp"
      (230872 'move' tmp[230849] 1)
      ParamForLoop[230874]
      { i[230846] tmp[230847] tmp[230848] tmp[230849]
        {
          const ar[230791] "const"(230790 call AD[230758] i[230846])
          const br[230798] "const"(230797 call BD[230768] i[230846])
          (230801 'end of statement')
          if(230818 call _cond_test 1)
          {
            (230816 call assert(230814 call(230806 call . br[230798] c"contains")(230812 call b[230647] i[230846])))
          }
          (230843 call =(230826 call result[230776] i[230846])(230842 call(230828 call . ar[230791] c"orderToIndex")(230840 call(230832 call . br[230798] c"indexOrder")(230838 call b[230647] i[230846]))))
        }
      }
      label _unused_continueLabel[230851]
      label _breakLabel[230850]
    }
    (230884 return result[230776])
  }
  (355301 'used modules list'(353008 'use' ChapelStandard[20264]))
}