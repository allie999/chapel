AST dump for ChapelIteratorSupport after pass createTaskFunctions.
Module use list: ChapelStandard Reflection 

{
  function chpl__init_ChapelIteratorSupport[415942]() : void[4] "insert line file info" "module init"
  {
    (507964 return _void[55])
  }
  function iteratorIndex[52132](arg ic[52129]:_iteratorClass[208](?)) : _unknown[51] "allow ref" "no doc" "fn returns iterator"
  {
    unknown ret[506862] "RVV" "temp"
    (52141 call(52137 call (partial) advance _mt[243] ic[52129]))
    (474544 'end of statement')
    (506866 'move' ret[506862](52151 call(52147 call (partial) getValue _mt[243] ic[52129])))
    (506864 return ret[506862])
  }
  function iteratorIndex[52162](arg t[52159]:_tuple[56199](?)) : _unknown[51] "expand tuples with values" "no doc" "fn returns iterator"
  {
    unknown ret[506884] "RVV" "temp"
    function iteratorIndexHelp[52170](arg t[52167]:_tuple[56199](?), param arg dim[52173]:int(64)[13]) : _unknown[51] "expand tuples with values"
    {
      unknown ret[506870] "RVV" "temp"
      unknown call_tmp[609288] "expr temp" "maybe param" "maybe type" "temp"
      (609291 'move' call_tmp[609288](52178 call size _mt[243] t[52167]))
      unknown call_tmp[609293] "expr temp" "maybe param" "maybe type" "temp"
      (609296 'move' call_tmp[609293](52182 call - call_tmp[609288] 1))
      unknown call_tmp[609298] "expr temp" "maybe param" "maybe type" "temp"
      (609301 'move' call_tmp[609298](52184 call == dim[52173] call_tmp[609293]))
      unknown call_tmp[609303] "expr temp" "maybe param" "maybe type" "temp"
      (609306 'move' call_tmp[609303](52219 call _cond_test call_tmp[609298]))
      if call_tmp[609303]
      {
        unknown call_tmp[609308] "expr temp" "maybe param" "maybe type" "temp"
        (609311 'move' call_tmp[609308](52191 call t[52167] dim[52173]))
        unknown call_tmp[609313] "expr temp" "maybe param" "maybe type" "temp"
        (609316 'move' call_tmp[609313](52193 call iteratorIndex call_tmp[609308]))
        (506874 'move' ret[506870](52195 call _build_tuple_always_allow_ref call_tmp[609313]))
        gotoReturn _end_iteratorIndexHelp[506868] _end_iteratorIndexHelp[506868]
      }
      {
        unknown call_tmp[609318] "expr temp" "maybe param" "maybe type" "temp"
        (609321 'move' call_tmp[609318](52203 call t[52167] dim[52173]))
        unknown call_tmp[609323] "expr temp" "maybe param" "maybe type" "temp"
        (609326 'move' call_tmp[609323](52205 call iteratorIndex call_tmp[609318]))
        unknown call_tmp[609328] "expr temp" "maybe param" "maybe type" "temp"
        (609331 'move' call_tmp[609328](52212 call + dim[52173] 1))
        unknown call_tmp[609333] "expr temp" "maybe param" "maybe type" "temp"
        (609336 'move' call_tmp[609333](52214 call iteratorIndexHelp t[52167] call_tmp[609328]))
        (506878 'move' ret[506870](52216 call _build_tuple_always_allow_ref call_tmp[609323](52215 'expand_tuple' call_tmp[609333])))
        gotoReturn _end_iteratorIndexHelp[506868] _end_iteratorIndexHelp[506868]
      }
      label _end_iteratorIndexHelp[506868]
      (506872 return ret[506870])
    }
    (506888 'move' ret[506884](52233 call iteratorIndexHelp t[52159] 0))
    (506886 return ret[506884])
  }
  function iteratorIndexType[52242](arg x[52240]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[506892] "RVV" "temp" "type variable"
    unknown call_tmp[609338] "expr temp" "maybe param" "maybe type" "temp"
    (609341 'move' call_tmp[609338](52247 call isArray x[52240]))
    unknown call_tmp[609343] "expr temp" "maybe param" "maybe type" "temp"
    (609346 'move' call_tmp[609343](52320 call _cond_test call_tmp[609338]))
    if call_tmp[609343]
    {
      unknown call_tmp[609350] "expr temp" "maybe param" "maybe type" "temp"
      (609353 'move' call_tmp[609350](52249 call eltType _mt[243] x[52240]))
      (506897 'move' ret[506892](506896 'deref' call_tmp[609350]))
      gotoReturn _end_iteratorIndexType[506890] _end_iteratorIndexType[506890]
    }
    {
      unknown call_tmp[609355] "expr temp" "maybe param" "maybe type" "temp"
      (609358 'move' call_tmp[609355](52258 call isDomain x[52240]))
      unknown call_tmp[609360] "expr temp" "maybe param" "maybe type" "temp"
      (609363 'move' call_tmp[609360](52316 call _cond_test call_tmp[609355]))
      if call_tmp[609360]
      {
        unknown tmp[554363] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[554364] "maybe param" "temp"
        unknown call_tmp[609367] "expr temp" "maybe param" "maybe type" "temp"
        (609370 'move' call_tmp[609367](52262 call rank _mt[243] x[52240]))
        unknown call_tmp[609372] "expr temp" "maybe param" "maybe type" "temp"
        (609375 'move' call_tmp[609372](52266 call == call_tmp[609367] 1))
        (554369 'move' tmp[554364](554367 call _cond_test call_tmp[609372]))
        if tmp[554364]
        {
          unknown tmp[554371] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (554373 'move' tmp[554371](52271 call idxType _mt[243] x[52240]))
          (554378 'move' tmp[554363](554375 '_paramFoldLogical' tmp[554364] tmp[554371]))
        }
        {
          unknown tmp[554380] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[609381] "expr temp" "maybe param" "maybe type" "temp"
          (609384 'move' call_tmp[609381](52275 call rank _mt[243] x[52240]))
          unknown call_tmp[609388] "expr temp" "maybe param" "maybe type" "temp"
          (609391 'move' call_tmp[609388](52279 call idxType _mt[243] x[52240]))
          (554382 'move' tmp[554380](52282 call * call_tmp[609381] call_tmp[609388]))
          (554387 'move' tmp[554363](554384 '_paramFoldLogical' tmp[554364] tmp[554380]))
        }
        (506902 'move' ret[506892](506901 'deref' tmp[554363]))
        gotoReturn _end_iteratorIndexType[506890] _end_iteratorIndexType[506890]
      }
      {
        unknown call_tmp[609393] "maybe param" "maybe type" "temp"
        (609396 'move' call_tmp[609393](52293 call _getIterator x[52240]))
        unknown ic[52294] "dead at end of block" "insert auto destroy" "no copy"
        (540717 'init var' ic[52294] call_tmp[609393])
        (52297 'end of statement')
        unknown call_tmp[609398] "maybe param" "maybe type" "temp"
        (609401 'move' call_tmp[609398](52302 call iteratorIndex ic[52294]))
        unknown i[52303] "dead at end of block" "insert auto destroy" "no copy"
        (540719 'init var' i[52303] call_tmp[609398])
        (52306 'end of statement' ic[52294])
        (52310 call _freeIterator ic[52294])
        (474552 'end of statement' ic[52294])
        unknown call_tmp[609403] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (609406 'move' call_tmp[609403](52313 'typeof' i[52303]))
        (506907 'move' ret[506892](506906 'deref' call_tmp[609403]))
        gotoReturn _end_iteratorIndexType[506890] _end_iteratorIndexType[506890]
        (474554 'end of statement' i[52303])
      }
    }
    label _end_iteratorIndexType[506890]
    (506894 return ret[506892])
  }
  function iteratorIndexTypeZip[52334](arg xs[52331]:_any[178](?) ...) type : _unknown[51] "no doc"
  {
    unknown ret[506929] "RVV" "temp" "type variable"
    function iteratorIndexTypeZipHelp[52340](param arg dim[52338]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[506913] "RVV" "temp" "type variable"
      unknown call_tmp[609410] "expr temp" "maybe param" "maybe type" "temp"
      (609413 'move' call_tmp[609410](52344 call size _mt[243] xs[52331]))
      unknown call_tmp[609415] "expr temp" "maybe param" "maybe type" "temp"
      (609418 'move' call_tmp[609415](52348 call - call_tmp[609410] 1))
      unknown call_tmp[609420] "expr temp" "maybe param" "maybe type" "temp"
      (609423 'move' call_tmp[609420](52350 call == dim[52338] call_tmp[609415]))
      unknown call_tmp[609425] "expr temp" "maybe param" "maybe type" "temp"
      (609428 'move' call_tmp[609425](52383 call _cond_test call_tmp[609420]))
      if call_tmp[609425]
      {
        unknown call_tmp[609430] "expr temp" "maybe param" "maybe type" "temp"
        (609433 'move' call_tmp[609430](52356 call xs[52331] dim[52338]))
        unknown call_tmp[609435] "expr temp" "maybe param" "maybe type" "temp"
        (609438 'move' call_tmp[609435](52358 call iteratorIndexType call_tmp[609430]))
        unknown call_tmp[609440] "expr temp" "maybe param" "maybe type" "temp"
        (609443 'move' call_tmp[609440](52359 call _build_tuple call_tmp[609435]))
        (506918 'move' ret[506913](506917 'deref' call_tmp[609440]))
        gotoReturn _end_iteratorIndexTypeZipHelp[506911] _end_iteratorIndexTypeZipHelp[506911]
      }
      {
        unknown call_tmp[609445] "expr temp" "maybe param" "maybe type" "temp"
        (609448 'move' call_tmp[609445](52367 call xs[52331] dim[52338]))
        unknown call_tmp[609450] "expr temp" "maybe param" "maybe type" "temp"
        (609453 'move' call_tmp[609450](52369 call iteratorIndexType call_tmp[609445]))
        unknown call_tmp[609455] "expr temp" "maybe param" "maybe type" "temp"
        (609458 'move' call_tmp[609455](52373 call + dim[52338] 1))
        unknown call_tmp[609460] "expr temp" "maybe param" "maybe type" "temp"
        (609463 'move' call_tmp[609460](52376 call iteratorIndexTypeZipHelp call_tmp[609455]))
        unknown call_tmp[609465] "expr temp" "maybe param" "maybe type" "temp"
        (609468 'move' call_tmp[609465](52379 call _build_tuple call_tmp[609450](52377 'expand_tuple' call_tmp[609460])))
        (506923 'move' ret[506913](506922 'deref' call_tmp[609465]))
        gotoReturn _end_iteratorIndexTypeZipHelp[506911] _end_iteratorIndexTypeZipHelp[506911]
      }
      label _end_iteratorIndexTypeZipHelp[506911]
      (506915 return ret[506913])
    }
    unknown call_tmp[609470] "expr temp" "maybe param" "maybe type" "temp"
    (609473 'move' call_tmp[609470](52396 call iteratorIndexTypeZipHelp 0))
    (506934 'move' ret[506929](506933 'deref' call_tmp[609470]))
    (506931 return ret[506929])
  }
  function iteratorToArrayElementType[52407](arg t[52404]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[506938] "RVV" "temp" "type variable"
    unknown call_tmp[609475] "expr temp" "maybe param" "maybe type" "temp"
    (609478 'move' call_tmp[609475](52430 'scalar promotion type' t[52404]))
    unknown call_tmp[609480] "expr temp" "maybe param" "maybe type" "temp"
    (609483 'move' call_tmp[609480](52432 call chpl_buildStandInRTT call_tmp[609475]))
    unknown call_tmp[609485] "expr temp" "maybe param" "maybe type" "temp"
    (609488 'move' call_tmp[609485](52434 call chpl__unref call_tmp[609480]))
    (506943 'move' ret[506938](506942 'deref' call_tmp[609485]))
    (506940 return ret[506938])
  }
  function chpl_buildStandInRTT[52446](arg domType[52443]:_domain[125902](?)) type : _unknown[51] "unsafe"
  {
    unknown ret[506947] "RVV" "temp" "type variable"
    unknown instanceObj[52485] "dead at end of block" "insert auto destroy"
    unknown call_tmp[609490] "expr temp" "maybe param" "maybe type" "temp"
    (609493 'move' call_tmp[609490](52484 'static field type' domType[52443] "_instance"))
    (540721 'default init var' instanceObj[52485] call_tmp[609490])
    (52488 'end of statement')
    unknown call_tmp[609495] "expr temp" "maybe param" "maybe type" "temp"
    (609498 'move' call_tmp[609495](52493 call chpl_buildStandInRTT instanceObj[52485]))
    (506952 'move' ret[506947](506951 'deref' call_tmp[609495]))
    gotoReturn _end_chpl_buildStandInRTT[506945] _end_chpl_buildStandInRTT[506945]
    (474560 'end of statement' instanceObj[52485])
    label _end_chpl_buildStandInRTT[506945]
    (506949 return ret[506947])
  }
  function chpl_buildStandInRTT[52506](arg arrType[52503]:_array[133588](?)) type : _unknown[51] "unsafe"
  {
    unknown ret[506958] "RVV" "temp" "type variable"
    unknown arrInstType[52513] "dead at end of block" "insert auto destroy" "type variable"(52512 'static field type' arrType[52503] "_instance")
    (540726 'move' arrInstType[52513](540723 'static field type' arrType[52503] "_instance"))
    unknown domInstType[52538] "dead at end of block" "insert auto destroy" "type variable"(52537 'static field type' arrInstType[52513] "dom")
    (540731 'move' domInstType[52538](540728 'static field type' arrInstType[52513] "dom"))
    unknown domInstance[52542] "dead at end of block" "insert auto destroy"
    (540733 'default init var' domInstance[52542] domInstType[52538])
    (52545 'end of statement')
    unknown standinDomain[52550] "dead at end of block" "no auto destroy"
    unknown call_tmp[609500] "expr temp" "maybe param" "maybe type" "temp"
    (609503 'move' call_tmp[609500](52549 call chpl_buildStandInRTT domInstance[52542]))
    (540735 'default init var' standinDomain[52550] call_tmp[609500])
    (52553 'end of statement')
    unknown instanceObj[52555] "dead at end of block" "insert auto destroy"
    (540737 'default init var' instanceObj[52555] arrInstType[52513])
    (52558 'end of statement' arrInstType[52513] domInstType[52538] domInstance[52542] arrInstType[52513])
    unknown call_tmp[609507] "expr temp" "maybe param" "maybe type" "temp"
    (609510 'move' call_tmp[609507](52578 call eltType _mt[243] instanceObj[52555]))
    unknown instanceEltType[52582] "dead at end of block" "insert auto destroy" "type variable"(52581 'static typeof' call_tmp[609507])
    unknown call_tmp[609514] "expr temp" "maybe param" "maybe type" "temp"
    (609517 'move' call_tmp[609514](540741 call eltType _mt[243] instanceObj[52555]))
    (540744 'move' instanceEltType[52582](540739 'static typeof' call_tmp[609514]))
    (474566 'end of statement' instanceObj[52555])
    unknown call_tmp[609519] "expr temp" "maybe param" "maybe type" "temp"
    (609522 'move' call_tmp[609519](52591 call chpl_buildStandInRTT instanceEltType[52582]))
    unknown call_tmp[609524] "expr temp" "maybe param" "maybe type" "temp"
    (609527 'move' call_tmp[609524](52592 call chpl__buildArrayRuntimeType standinDomain[52550] call_tmp[609519]))
    (506963 'move' ret[506958](506962 'deref' call_tmp[609524]))
    gotoReturn _end_chpl_buildStandInRTT[506956] _end_chpl_buildStandInRTT[506956]
    (474568 'end of statement' standinDomain[52550] instanceEltType[52582])
    label _end_chpl_buildStandInRTT[506956]
    (506960 return ret[506958])
  }
  function chpl_buildStandInRTT[52603](arg irType[52600]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[506990] "RVV" "temp" "type variable"
    unknown shapeType[52609] "dead at end of block" "insert auto destroy" "type variable"(52608 call chpl_iteratorShapeStaticTypeOrNothing irType[52600])
    (540749 'move' shapeType[52609](540747 call chpl_iteratorShapeStaticTypeOrNothing irType[52600]))
    function standinType[52615]() type : _unknown[51] "unsafe"
    {
      unknown ret[506969] "RVV" "temp" "type variable"
      unknown call_tmp[609529] "expr temp" "maybe param" "maybe type" "temp"
      (609532 'move' call_tmp[609529](52619 call == shapeType[52609] nothing[7]))
      unknown call_tmp[609534] "expr temp" "maybe param" "maybe type" "temp"
      (609537 'move' call_tmp[609534](52675 call _cond_test call_tmp[609529]))
      if call_tmp[609534]
      {
        unknown call_tmp[609539] "expr temp" "maybe param" "maybe type" "temp"
        (609542 'move' call_tmp[609539](52624 call chpl__buildDomainRuntimeType defaultDist[94050] 1))
        (506974 'move' ret[506969](506973 'deref' call_tmp[609539]))
        gotoReturn _end_standinType[506967] _end_standinType[506967]
      }
      {
        unknown call_tmp[609544] "expr temp" "maybe param" "maybe type" "temp"
        (609547 'move' call_tmp[609544](52632 call isRange shapeType[52609]))
        unknown call_tmp[609549] "expr temp" "maybe param" "maybe type" "temp"
        (609552 'move' call_tmp[609549](52671 call _cond_test call_tmp[609544]))
        if call_tmp[609549]
        {
          unknown call_tmp[609554] "expr temp" "maybe param" "maybe type" "temp"
          (609557 'move' call_tmp[609554](52636 call chpl__buildDomainRuntimeType defaultDist[94050] 1))
          (506979 'move' ret[506969](506978 'deref' call_tmp[609554]))
          gotoReturn _end_standinType[506967] _end_standinType[506967]
        }
        {
          unknown domInstance[52642] "dead at end of block" "insert auto destroy"
          (540751 'default init var' domInstance[52642] shapeType[52609])
          (52645 'end of statement')
          unknown tmp[418458] "maybe param" "temp"
          unknown call_tmp[609559] "expr temp" "maybe param" "maybe type" "temp"
          (609562 'move' call_tmp[609559](52651 call isDomain domInstance[52642]))
          (418469 'move' tmp[418458](52652 call ! call_tmp[609559]))
          unknown call_tmp[609564] "expr temp" "maybe param" "maybe type" "temp"
          (609567 'move' call_tmp[609564](418471 call _cond_invalid tmp[418458]))
          if call_tmp[609564]
          {
            (418474 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[554394] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[554395] "maybe param" "temp"
          unknown call_tmp[609569] "expr temp" "maybe param" "maybe type" "temp"
          (609572 'move' call_tmp[609569](418459 call isTrue tmp[418458]))
          (554400 'move' tmp[554395](554398 call _cond_test call_tmp[609569]))
          if tmp[554395]
          {
            unknown tmp[554402] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[609574] "expr temp" "maybe param" "maybe type" "temp"
            (609577 'move' call_tmp[609574](52657 call isArray domInstance[52642]))
            unknown call_tmp[609579] "expr temp" "maybe param" "maybe type" "temp"
            (609582 'move' call_tmp[609579](52658 call ! call_tmp[609574]))
            (554404 'move' tmp[554402](418462 call isTrue call_tmp[609579]))
            (554409 'move' tmp[554394](554406 '_paramFoldLogical' tmp[554395] tmp[554402]))
          }
          {
            (554414 'move' tmp[554394](554411 '_paramFoldLogical' tmp[554395] 0))
          }
          (52663 call compilerAssert tmp[554394])
          (474574 'end of statement' domInstance[52642])
          unknown call_tmp[609584] "expr temp" "maybe param" "maybe type" "temp"
          (609587 'move' call_tmp[609584](52668 call chpl_buildStandInRTT domInstance[52642]))
          (506984 'move' ret[506969](506983 'deref' call_tmp[609584]))
          gotoReturn _end_standinType[506967] _end_standinType[506967]
          (474576 'end of statement' domInstance[52642])
        }
      }
      label _end_standinType[506967]
      (506971 return ret[506969])
    }
    unknown standinDomain[52686] "dead at end of block" "no auto destroy"
    unknown call_tmp[609589] "expr temp" "maybe param" "maybe type" "temp"
    (609592 'move' call_tmp[609589](52685 call standinType))
    (540753 'default init var' standinDomain[52686] call_tmp[609589])
    (52689 'end of statement')
    unknown call_tmp[609594] "expr temp" "maybe param" "maybe type" "temp"
    (609597 'move' call_tmp[609594](52697 'scalar promotion type' irType[52600]))
    unknown call_tmp[609599] "expr temp" "maybe param" "maybe type" "temp"
    (609602 'move' call_tmp[609599](52699 call chpl_buildStandInRTT call_tmp[609594]))
    unknown call_tmp[609604] "expr temp" "maybe param" "maybe type" "temp"
    (609607 'move' call_tmp[609604](52700 call chpl__buildArrayRuntimeType standinDomain[52686] call_tmp[609599]))
    (506995 'move' ret[506990](506994 'deref' call_tmp[609604]))
    gotoReturn _end_chpl_buildStandInRTT[506988] _end_chpl_buildStandInRTT[506988]
    (474578 'end of statement' standinDomain[52686])
    label _end_chpl_buildStandInRTT[506988]
    (506992 return ret[506990])
  }
  function chpl_buildStandInRTT[52709](arg nonRTtype[52707]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[507001] "RVV" "temp" "type variable"
    (507006 'move' ret[507001](507005 'deref' nonRTtype[52707]))
    (507003 return ret[507001])
  }
  function chpl_buildStandInRTT[52721](arg domInst[52719]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[507010] "RVV" "temp" "type variable"
    unknown call_tmp[609611] "expr temp" "maybe param" "maybe type" "temp"
    (609614 'move' call_tmp[609611](52733 call rank _mt[243] domInst[52719]))
    unknown call_tmp[609618] "expr temp" "maybe param" "maybe type" "temp"
    (609621 'move' call_tmp[609618](52737 call idxType _mt[243] domInst[52719]))
    unknown call_tmp[609625] "expr temp" "maybe param" "maybe type" "temp"
    (609628 'move' call_tmp[609625](52743 call stridable _mt[243] domInst[52719]))
    unknown call_tmp[609630] "expr temp" "maybe param" "maybe type" "temp"
    (609633 'move' call_tmp[609630](52746 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[609611] call_tmp[609618] call_tmp[609625]))
    (507015 'move' ret[507010](507014 'deref' call_tmp[609630]))
    (507012 return ret[507010])
  }
  where {
    unknown call_tmp[609635] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609638 'move' call_tmp[609635](52724 'typeof' domInst[52719]))
    (52727 call <= call_tmp[609635] unmanaged DefaultRectangularDom[415402](?))
  }
  function chpl_buildStandInRTT[52757](arg domInst[52755]:_any[178](?)) type : _unknown[51] "no return value for void"
  {
    unknown call_tmp[609640] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609643 'move' call_tmp[609640](52760 'typeof' domInst[52755]))
    unknown call_tmp[609645] "expr temp" "maybe param" "maybe type" "temp"
    (609648 'move' call_tmp[609645](52763 call <= call_tmp[609640] unmanaged BaseDom[415405]))
    unknown call_tmp[609650] "expr temp" "maybe param" "maybe type" "temp"
    (609653 'move' call_tmp[609650](52835 call _cond_test call_tmp[609645]))
    if call_tmp[609650]
    {
      (52786 call compilerError "for/forall/promoted expressions are not implemented when the elements are or contain non-DefaultRectangular domains or arrays")
    }
    {
      unknown call_tmp[609655] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (609658 'move' call_tmp[609655](52810 'typeof' domInst[52755]))
      unknown call_tmp[609660] "expr temp" "maybe param" "maybe type" "temp"
      (609663 'move' call_tmp[609660](52812 call _cast string[26] call_tmp[609655]))
      (52833 call compilerError "unexpected argument of type " call_tmp[609660] " for chpl_buildStandInRTT()")
    }
    (507017 return _void[55])
  }
  function chpl_trivialLeader[52846]() : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[507021] "RVV" "temp"
    unknown yret[507025] "YVV" "temp"
    (507028 'move' yret[507025](507027 'deref' 0))
    (507030 yield yret[507025])
    (507023 return ret[507021])
  }
  function chpl_computeIteratorShape[52862](arg arg[52859]:_array[133588](?)) : _unknown[51] "inline"
  {
    unknown ret[507034] "RVV" "temp"
    unknown call_tmp[609667] "expr temp" "maybe param" "maybe type" "temp"
    (609670 'move' call_tmp[609667](52868 call _dom _mt[243] arg[52859]))
    unknown call_tmp[609672] "expr temp" "maybe param" "maybe type" "temp"
    (609675 'move' call_tmp[609672](52872 call chpl_computeIteratorShape call_tmp[609667]))
    (507039 'move' ret[507034](507038 'deref' call_tmp[609672]))
    (507036 return ret[507034])
  }
  function chpl_computeIteratorShape[52884](arg arg[52881]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[507043] "RVV" "temp"
    unknown call_tmp[609679] "expr temp" "maybe param" "maybe type" "temp"
    (609682 'move' call_tmp[609679](52887 call _instance _mt[243] arg[52881]))
    (507048 'move' ret[507043](507047 'deref' call_tmp[609679]))
    (507045 return ret[507043])
  }
  function chpl_computeIteratorShape[52904](arg arg[52901]:range[64316](?)) : _unknown[51] "inline"
  {
    unknown ret[507052] "RVV" "temp"
    (507057 'move' ret[507052](507056 'deref' arg[52901]))
    (507054 return ret[507052])
  }
  function chpl_computeIteratorShape[52918](arg arg[52915]:_iteratorRecord[205](?)) : _unknown[51] "inline"
  {
    unknown ret[507061] "RVV" "temp"
    unknown call_tmp[609684] "expr temp" "maybe param" "maybe type" "temp"
    (609687 'move' call_tmp[609684](52923 call chpl_iteratorHasShape arg[52915]))
    unknown call_tmp[609689] "expr temp" "maybe param" "maybe type" "temp"
    (609692 'move' call_tmp[609689](52941 call _cond_test call_tmp[609684]))
    if call_tmp[609689]
    {
      unknown call_tmp[609696] "expr temp" "maybe param" "maybe type" "temp"
      (609699 'move' call_tmp[609696](52927 call _shape_ _mt[243] arg[52915]))
      (507066 'move' ret[507061](507065 'deref' call_tmp[609696]))
      gotoReturn _end_chpl_computeIteratorShape[507059] _end_chpl_computeIteratorShape[507059]
    }
    {
      const myvoid[52933] "dead at end of block" "const" "insert auto destroy"
      (540755 'init var' myvoid[52933] none[57])
      (52936 'end of statement')
      (507071 'move' ret[507061](507070 'deref' myvoid[52933]))
      gotoReturn _end_chpl_computeIteratorShape[507059] _end_chpl_computeIteratorShape[507059]
      (474589 'end of statement' myvoid[52933])
    }
    label _end_chpl_computeIteratorShape[507059]
    (507063 return ret[507061])
  }
  function chpl_computeIteratorShape[52953](arg arg[52951]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507077] "RVV" "temp"
    (507082 'move' ret[507077](507081 'deref' none[57]))
    (507079 return ret[507077])
  }
  function chpl_iteratorHasShape[52967](arg ir[52964]:_iteratorRecord[205](?)) param : _unknown[51]
  {
    unknown ret[507086] "RVV" "param" "temp"
    unknown call_tmp[609701] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609704 'move' call_tmp[609701](52971 'typeof' ir[52964]))
    unknown call_tmp[609706] "expr temp" "maybe param" "maybe type" "temp"
    (609709 'move' call_tmp[609706](52988 call hasField call_tmp[609701] "_shape_"))
    unknown call_tmp[609711] "expr temp" "maybe param" "maybe type" "temp"
    (609714 'move' call_tmp[609711](53002 call _cond_test call_tmp[609706]))
    if call_tmp[609711]
    {
      { scopeless type
        unknown call_type_tmp[491555] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609718] "expr temp" "maybe param" "maybe type" "temp"
        (609721 'move' call_tmp[609718](52990 call _shape_ _mt[243] ir[52964]))
        (491559 'move' call_type_tmp[491555](52993 'typeof' call_tmp[609718]))
      }
      unknown call_tmp[609723] "expr temp" "maybe param" "maybe type" "temp"
      (609726 'move' call_tmp[609723](52995 call != call_type_tmp[491555] void[4]))
      (507091 'move' ret[507086](507090 'deref' call_tmp[609723]))
      gotoReturn _end_chpl_iteratorHasShape[507084] _end_chpl_iteratorHasShape[507084]
    }
    {
      (507096 'move' ret[507086](507095 'deref' 0))
      gotoReturn _end_chpl_iteratorHasShape[507084] _end_chpl_iteratorHasShape[507084]
    }
    label _end_chpl_iteratorHasShape[507084]
    (507088 return ret[507086])
  }
  function chpl_iteratorHasDomainShape[53017](arg ir[53014]:_iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    unknown ret[507102] "RVV" "param" "temp"
    unknown call_tmp[609728] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609731 'move' call_tmp[609728](53021 'typeof' ir[53014]))
    unknown call_tmp[609733] "expr temp" "maybe param" "maybe type" "temp"
    (609736 'move' call_tmp[609733](53024 call hasField call_tmp[609728] "_shape_"))
    unknown call_tmp[609738] "expr temp" "maybe param" "maybe type" "temp"
    (609741 'move' call_tmp[609738](53039 call _cond_test call_tmp[609733]))
    if call_tmp[609738]
    {
      { scopeless type
        unknown call_type_tmp[491561] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609745] "expr temp" "maybe param" "maybe type" "temp"
        (609748 'move' call_tmp[609745](53027 call _shape_ _mt[243] ir[53014]))
        (491565 'move' call_type_tmp[491561](53030 'typeof' call_tmp[609745]))
      }
      unknown call_tmp[609750] "expr temp" "maybe param" "maybe type" "temp"
      (609753 'move' call_tmp[609750](354210 'is_subtype' BaseDom[372743](?) call_type_tmp[491561]))
      (507107 'move' ret[507102](507106 'deref' call_tmp[609750]))
      gotoReturn _end_chpl_iteratorHasDomainShape[507100] _end_chpl_iteratorHasDomainShape[507100]
    }
    {
      (507112 'move' ret[507102](507111 'deref' 0))
      gotoReturn _end_chpl_iteratorHasDomainShape[507100] _end_chpl_iteratorHasDomainShape[507100]
    }
    label _end_chpl_iteratorHasDomainShape[507100]
    (507104 return ret[507102])
  }
  function chpl_iteratorHasRangeShape[53054](arg ir[53051]:_iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    unknown ret[507118] "RVV" "param" "temp"
    unknown call_tmp[609755] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609758 'move' call_tmp[609755](53058 'typeof' ir[53051]))
    unknown call_tmp[609760] "expr temp" "maybe param" "maybe type" "temp"
    (609763 'move' call_tmp[609760](53061 call hasField call_tmp[609755] "_shape_"))
    unknown call_tmp[609765] "expr temp" "maybe param" "maybe type" "temp"
    (609768 'move' call_tmp[609765](53075 call _cond_test call_tmp[609760]))
    if call_tmp[609765]
    {
      { scopeless type
        unknown call_type_tmp[491567] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609772] "expr temp" "maybe param" "maybe type" "temp"
        (609775 'move' call_tmp[609772](53064 call _shape_ _mt[243] ir[53051]))
        (491571 'move' call_type_tmp[491567](53067 'typeof' call_tmp[609772]))
      }
      unknown call_tmp[609777] "expr temp" "maybe param" "maybe type" "temp"
      (609780 'move' call_tmp[609777](53069 call isRange call_type_tmp[491567]))
      (507123 'move' ret[507118](507122 'deref' call_tmp[609777]))
      gotoReturn _end_chpl_iteratorHasRangeShape[507116] _end_chpl_iteratorHasRangeShape[507116]
    }
    {
      (507128 'move' ret[507118](507127 'deref' 0))
      gotoReturn _end_chpl_iteratorHasRangeShape[507116] _end_chpl_iteratorHasRangeShape[507116]
    }
    label _end_chpl_iteratorHasRangeShape[507116]
    (507120 return ret[507118])
  }
  function chpl_iteratorShapeStaticTypeOrNothing[53090](arg ir[53087]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[507134] "RVV" "temp" "type variable"
    unknown call_tmp[609782] "expr temp" "maybe param" "maybe type" "temp"
    (609785 'move' call_tmp[609782](53096 call hasField ir[53087] "_shape_"))
    unknown call_tmp[609787] "expr temp" "maybe param" "maybe type" "temp"
    (609790 'move' call_tmp[609787](53107 call _cond_test call_tmp[609782]))
    if call_tmp[609787]
    {
      unknown call_tmp[609792] "expr temp" "maybe param" "maybe type" "temp"
      (609795 'move' call_tmp[609792](53101 'static field type' ir[53087] "_shape_"))
      (507139 'move' ret[507134](507138 'deref' call_tmp[609792]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrNothing[507132] _end_chpl_iteratorShapeStaticTypeOrNothing[507132]
    }
    {
      (507144 'move' ret[507134](507143 'deref' nothing[7]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrNothing[507132] _end_chpl_iteratorShapeStaticTypeOrNothing[507132]
    }
    label _end_chpl_iteratorShapeStaticTypeOrNothing[507132]
    (507136 return ret[507134])
  }
  function chpl_iteratorFromForExpr[53122](arg ir[53119]:_iteratorRecord[205](?)) param : _unknown[51]
  {
    unknown ret[507150] "RVV" "param" "temp"
    unknown call_tmp[609797] "expr temp" "maybe param" "maybe type" "temp"
    (609800 'move' call_tmp[609797](53149 call canResolveMethod module=[255] Reflection[224882] ir[53119] "_fromForExpr_"))
    unknown call_tmp[609802] "expr temp" "maybe param" "maybe type" "temp"
    (609805 'move' call_tmp[609802](53159 call _cond_test call_tmp[609797]))
    if call_tmp[609802]
    {
      unknown call_tmp[609809] "expr temp" "maybe param" "maybe type" "temp"
      (609812 'move' call_tmp[609809](53151 call _fromForExpr_ _mt[243] ir[53119]))
      (507155 'move' ret[507150](507154 'deref' call_tmp[609809]))
      gotoReturn _end_chpl_iteratorFromForExpr[507148] _end_chpl_iteratorFromForExpr[507148]
    }
    {
      (507160 'move' ret[507150](507159 'deref' 0))
      gotoReturn _end_chpl_iteratorFromForExpr[507148] _end_chpl_iteratorFromForExpr[507148]
    }
    label _end_chpl_iteratorFromForExpr[507148]
    (507152 return ret[507150])
    (357242 'referenced modules list' Reflection[224882])
  }
  function chpl_iteratorFromForExpr[53172](arg arg[53170]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507166] "RVV" "param" "temp"
    (507171 'move' ret[507166](507170 'deref' 0))
    (507168 return ret[507166])
  }
  function _iteratorRecord[205](?).writeThis[53185](arg _mt[53190]:_MT[238], arg this[53187]:_iteratorRecord[205](?) :
  _iteratorRecord[205](?), arg f[53183]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown first[53194] "dead at end of block" "insert auto destroy"
    (540757 'init var' first[53194] 1 bool[10])
    (53197 'end of statement')
    {
      unknown _indexOfInterest[53242] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53243] "expr temp" "temp"
      (53252 'move' _iterator[53243](53250 call _getIterator this[53187]))
      Defer
      {
        {
          (53268 call _freeIterator _iterator[53243])
        }
      }
      { scopeless type
        (53257 'move' _indexOfInterest[53242](53254 call iteratorIndex _iterator[53243]))
      }
      ForLoop[53244]
      {
        unknown e[53261] "index var" "insert auto destroy"
        (474604 'end of statement')
        (53263 'move' e[53261] _indexOfInterest[53242])
        (474605 'end of statement' e[53261])
        {
          unknown call_tmp[609814] "expr temp" "maybe param" "maybe type" "temp"
          (609817 'move' call_tmp[609814](53202 call ! first[53194]))
          unknown call_tmp[609819] "expr temp" "maybe param" "maybe type" "temp"
          (609822 'move' call_tmp[609819](53230 call _cond_test call_tmp[609814]))
          if call_tmp[609819]
          {
            (53222 call <~> f[53183] " ")
          }
          {
            (53227 call = first[53194] 0)
            (474608 'end of statement' first[53194])
          }
          (53239 call <~> f[53183] e[53261])
          (474610 'end of statement' e[53261])
        }
        label _continueLabel[53247]
        _indexOfInterest[53242]
        _iterator[53243]
      }
      label _breakLabel[53248]
    }
    (507173 return _void[55])
  }
  function =[53283](ref arg ic[53280]:_iteratorRecord[205](?), arg xs[53285]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[53301] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53302] "expr temp" "temp"
      unknown call_tmp[609824] "expr temp" "maybe param" "maybe type" "temp"
      (609827 'move' call_tmp[609824](53311 call _getIterator ic[53280]))
      unknown call_tmp[609829] "expr temp" "maybe param" "maybe type" "temp"
      (609832 'move' call_tmp[609829](53314 call _getIterator xs[53285]))
      (53316 'move' _iterator[53302](53295 call _build_tuple call_tmp[609824] call_tmp[609829]))
      Defer
      {
        {
          (53346 call _freeIterator _iterator[53302])
        }
      }
      { scopeless type
        (53321 'move' _indexOfInterest[53301](53318 call iteratorIndex _iterator[53302]))
      }
      ForLoop[53303]
      {
        (53326 call _check_tuple_var_decl _indexOfInterest[53301] 2)
        (474613 'end of statement')
        unknown e[53332] "index var" "insert auto destroy"
        (474614 'end of statement')
        (53334 'move' e[53332](53330 call _indexOfInterest[53301] 0))
        (474615 'end of statement' e[53332])
        unknown x[53339] "index var" "insert auto destroy"
        (474617 'end of statement')
        (53341 'move' x[53339](53337 call _indexOfInterest[53301] 1))
        (474618 'end of statement' x[53339])
        (53298 call = e[53332] x[53339])
        (474620 'end of statement' e[53332] x[53339])
        label _continueLabel[53306]
        _indexOfInterest[53301]
        _iterator[53302]
      }
      label _breakLabel[53307]
    }
    (507175 return _void[55])
  }
  function =[53362](ref arg ic[53359]:_iteratorRecord[205](?), arg x[53368] :
  (53367 call iteratorIndexType ic[53359])) : _unknown[51] "assignop" "suppress lvalue error" "no return value for void"
  {
    {
      unknown _indexOfInterest[53378] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53379] "expr temp" "temp"
      (53388 'move' _iterator[53379](53386 call _getIterator ic[53359]))
      Defer
      {
        {
          (53404 call _freeIterator _iterator[53379])
        }
      }
      { scopeless type
        (53393 'move' _indexOfInterest[53378](53390 call iteratorIndex _iterator[53379]))
      }
      ForLoop[53380]
      {
        unknown e[53397] "index var" "insert auto destroy"
        (474624 'end of statement')
        (53399 'move' e[53397] _indexOfInterest[53378])
        (474625 'end of statement' e[53397])
        (53375 call = e[53397] x[53368])
        (474627 'end of statement' e[53397])
        label _continueLabel[53383]
        _indexOfInterest[53378]
        _iterator[53379]
      }
      label _breakLabel[53384]
    }
    (507177 return _void[55])
  }
  function _getIterator[53418](const  ref arg x[53416]:_any[178](?)) : _unknown[51] "inline" "no borrow convert" "suppress lvalue error"
  {
    unknown ret[507181] "RVV" "temp"
    unknown call_tmp[609836] "expr temp" "maybe param" "maybe type" "temp"
    (609839 'move' call_tmp[609836](53428 call(53424 call (partial) these _mt[243] x[53416])))
    unknown call_tmp[609841] "expr temp" "maybe param" "maybe type" "temp"
    (609844 'move' call_tmp[609841](53430 call _getIterator call_tmp[609836]))
    (507186 'move' ret[507181](507185 'deref' call_tmp[609841]))
    (507183 return ret[507181])
  }
  function _getIterator[53440](arg t[53438]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507190] "RVV" "temp"
    unknown call_tmp[609848] "expr temp" "maybe param" "maybe type" "temp"
    (609851 'move' call_tmp[609848](53448 call(53444 call (partial) these _mt[243] t[53438])))
    unknown call_tmp[609853] "expr temp" "maybe param" "maybe type" "temp"
    (609856 'move' call_tmp[609853](53450 call _getIterator call_tmp[609848]))
    (507195 'move' ret[507190](507194 'deref' call_tmp[609853]))
    (507192 return ret[507190])
  }
  function _getIteratorZip[53460](arg x[53458]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507199] "RVV" "temp"
    unknown call_tmp[609858] "expr temp" "maybe param" "maybe type" "temp"
    (609861 'move' call_tmp[609858](53465 call _getIterator x[53458]))
    (507204 'move' ret[507199](507203 'deref' call_tmp[609858]))
    (507201 return ret[507199])
  }
  function _getIteratorZip[53475](arg t[53473]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507208] "RVV" "temp"
    unknown call_tmp[609863] "expr temp" "maybe param" "maybe type" "temp"
    (609866 'move' call_tmp[609863](53480 call _getIterator t[53473]))
    (507213 'move' ret[507208](507212 'deref' call_tmp[609863]))
    (507210 return ret[507208])
  }
  function _getIteratorZip[53492](arg x[53489]:_tuple[56199](?)) : _unknown[51] "inline"
  {
    unknown ret[507233] "RVV" "temp"
    function _getIteratorZipInternal[53500](arg x[53497]:_tuple[56199](?), param arg dim[53503]:int(64)[13]) : _unknown[51] "inline"
    {
      unknown ret[507217] "RVV" "temp"
      unknown tmp[418479] "maybe param" "temp"
      unknown call_tmp[609868] "expr temp" "maybe param" "maybe type" "temp"
      (609871 'move' call_tmp[609868](53510 call x[53497] dim[53503]))
      (418490 'move' tmp[418479](53512 call isTuple call_tmp[609868]))
      unknown call_tmp[609873] "expr temp" "maybe param" "maybe type" "temp"
      (609876 'move' call_tmp[609873](418492 call _cond_invalid tmp[418479]))
      if call_tmp[609873]
      {
        (418495 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554421] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554422] "maybe param" "temp"
      unknown call_tmp[609878] "expr temp" "maybe param" "maybe type" "temp"
      (609881 'move' call_tmp[609878](418480 call isTrue tmp[418479]))
      (554427 'move' tmp[554422](554425 call _cond_test call_tmp[609878]))
      if tmp[554422]
      {
        unknown tmp[554429] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[609883] "expr temp" "maybe param" "maybe type" "temp"
        (609886 'move' call_tmp[609883](53517 call x[53497] dim[53503]))
        unknown call_tmp[609888] "expr temp" "maybe param" "maybe type" "temp"
        (609891 'move' call_tmp[609888](53519 call isHomogeneousTuple call_tmp[609883]))
        unknown call_tmp[609893] "expr temp" "maybe param" "maybe type" "temp"
        (609896 'move' call_tmp[609893](53520 call ! call_tmp[609888]))
        (554431 'move' tmp[554429](418483 call isTrue call_tmp[609893]))
        (554436 'move' tmp[554421](554433 '_paramFoldLogical' tmp[554422] tmp[554429]))
      }
      {
        (554441 'move' tmp[554421](554438 '_paramFoldLogical' tmp[554422] 0))
      }
      unknown call_tmp[609898] "expr temp" "maybe param" "maybe type" "temp"
      (609901 'move' call_tmp[609898](53545 call _cond_test tmp[554421]))
      if call_tmp[609898]
      {
        (53543 call compilerError "Heterogeneous tuples don't support zippered iteration yet")
      }
      unknown call_tmp[609905] "expr temp" "maybe param" "maybe type" "temp"
      (609908 'move' call_tmp[609905](53553 call size _mt[243] x[53497]))
      unknown call_tmp[609910] "expr temp" "maybe param" "maybe type" "temp"
      (609913 'move' call_tmp[609910](53557 call - call_tmp[609905] 1))
      unknown call_tmp[609915] "expr temp" "maybe param" "maybe type" "temp"
      (609918 'move' call_tmp[609915](53559 call == dim[53503] call_tmp[609910]))
      unknown call_tmp[609920] "expr temp" "maybe param" "maybe type" "temp"
      (609923 'move' call_tmp[609920](53593 call _cond_test call_tmp[609915]))
      if call_tmp[609920]
      {
        unknown call_tmp[609925] "expr temp" "maybe param" "maybe type" "temp"
        (609928 'move' call_tmp[609925](53565 call x[53497] dim[53503]))
        unknown call_tmp[609930] "expr temp" "maybe param" "maybe type" "temp"
        (609933 'move' call_tmp[609930](53567 call _getIterator call_tmp[609925]))
        unknown call_tmp[609935] "expr temp" "maybe param" "maybe type" "temp"
        (609938 'move' call_tmp[609935](53568 call _build_tuple call_tmp[609930]))
        (507222 'move' ret[507217](507221 'deref' call_tmp[609935]))
        gotoReturn _end__getIteratorZipInternal[507215] _end__getIteratorZipInternal[507215]
      }
      {
        unknown call_tmp[609940] "expr temp" "maybe param" "maybe type" "temp"
        (609943 'move' call_tmp[609940](53576 call x[53497] dim[53503]))
        unknown call_tmp[609945] "expr temp" "maybe param" "maybe type" "temp"
        (609948 'move' call_tmp[609945](53578 call _getIterator call_tmp[609940]))
        unknown call_tmp[609950] "expr temp" "maybe param" "maybe type" "temp"
        (609953 'move' call_tmp[609950](53584 call + dim[53503] 1))
        unknown call_tmp[609955] "expr temp" "maybe param" "maybe type" "temp"
        (609958 'move' call_tmp[609955](53586 call _getIteratorZipInternal x[53497] call_tmp[609950]))
        unknown call_tmp[609960] "expr temp" "maybe param" "maybe type" "temp"
        (609963 'move' call_tmp[609960](53589 call _build_tuple call_tmp[609945](53587 'expand_tuple' call_tmp[609955])))
        (507227 'move' ret[507217](507226 'deref' call_tmp[609960]))
        gotoReturn _end__getIteratorZipInternal[507215] _end__getIteratorZipInternal[507215]
      }
      label _end__getIteratorZipInternal[507215]
      (507219 return ret[507217])
    }
    unknown call_tmp[609967] "expr temp" "maybe param" "maybe type" "temp"
    (609970 'move' call_tmp[609967](53603 call size _mt[243] x[53489]))
    unknown call_tmp[609972] "expr temp" "maybe param" "maybe type" "temp"
    (609975 'move' call_tmp[609972](53607 call == call_tmp[609967] 1))
    unknown call_tmp[609977] "expr temp" "maybe param" "maybe type" "temp"
    (609980 'move' call_tmp[609977](53625 call _cond_test call_tmp[609972]))
    if call_tmp[609977]
    {
      unknown call_tmp[609982] "expr temp" "maybe param" "maybe type" "temp"
      (609985 'move' call_tmp[609982](53613 call x[53489] 0))
      unknown call_tmp[609987] "expr temp" "maybe param" "maybe type" "temp"
      (609990 'move' call_tmp[609987](53615 call _getIterator call_tmp[609982]))
      (507238 'move' ret[507233](507237 'deref' call_tmp[609987]))
      gotoReturn _end__getIteratorZip[507231] _end__getIteratorZip[507231]
    }
    {
      unknown call_tmp[609992] "expr temp" "maybe param" "maybe type" "temp"
      (609995 'move' call_tmp[609992](53622 call _getIteratorZipInternal x[53489] 0))
      (507243 'move' ret[507233](507242 'deref' call_tmp[609992]))
      gotoReturn _end__getIteratorZip[507231] _end__getIteratorZip[507231]
    }
    label _end__getIteratorZip[507231]
    (507235 return ret[507233])
  }
  function _getIteratorZip[53639](arg t[53636]:_tuple[56199](?)) : _unknown[51] "inline"
  {
    unknown ret[507265] "RVV" "temp"
    function _getIteratorZipInternal[53647](arg t[53644]:_tuple[56199](?), param arg dim[53650]:int(64)[13]) : _unknown[51] "inline"
    {
      unknown ret[507249] "RVV" "temp"
      unknown call_tmp[609999] "expr temp" "maybe param" "maybe type" "temp"
      (610002 'move' call_tmp[609999](53655 call size _mt[243] t[53644]))
      unknown call_tmp[610004] "expr temp" "maybe param" "maybe type" "temp"
      (610007 'move' call_tmp[610004](53659 call - call_tmp[609999] 1))
      unknown call_tmp[610009] "expr temp" "maybe param" "maybe type" "temp"
      (610012 'move' call_tmp[610009](53661 call == dim[53650] call_tmp[610004]))
      unknown call_tmp[610014] "expr temp" "maybe param" "maybe type" "temp"
      (610017 'move' call_tmp[610014](53695 call _cond_test call_tmp[610009]))
      if call_tmp[610014]
      {
        unknown call_tmp[610019] "expr temp" "maybe param" "maybe type" "temp"
        (610022 'move' call_tmp[610019](53667 call t[53644] dim[53650]))
        unknown call_tmp[610024] "expr temp" "maybe param" "maybe type" "temp"
        (610027 'move' call_tmp[610024](53669 call _getIterator call_tmp[610019]))
        unknown call_tmp[610029] "expr temp" "maybe param" "maybe type" "temp"
        (610032 'move' call_tmp[610029](53670 call _build_tuple call_tmp[610024]))
        (507254 'move' ret[507249](507253 'deref' call_tmp[610029]))
        gotoReturn _end__getIteratorZipInternal[507247] _end__getIteratorZipInternal[507247]
      }
      {
        unknown call_tmp[610034] "expr temp" "maybe param" "maybe type" "temp"
        (610037 'move' call_tmp[610034](53678 call t[53644] dim[53650]))
        unknown call_tmp[610039] "expr temp" "maybe param" "maybe type" "temp"
        (610042 'move' call_tmp[610039](53680 call _getIterator call_tmp[610034]))
        unknown call_tmp[610044] "expr temp" "maybe param" "maybe type" "temp"
        (610047 'move' call_tmp[610044](53686 call + dim[53650] 1))
        unknown call_tmp[610049] "expr temp" "maybe param" "maybe type" "temp"
        (610052 'move' call_tmp[610049](53688 call _getIteratorZipInternal t[53644] call_tmp[610044]))
        unknown call_tmp[610054] "expr temp" "maybe param" "maybe type" "temp"
        (610057 'move' call_tmp[610054](53691 call _build_tuple call_tmp[610039](53689 'expand_tuple' call_tmp[610049])))
        (507259 'move' ret[507249](507258 'deref' call_tmp[610054]))
        gotoReturn _end__getIteratorZipInternal[507247] _end__getIteratorZipInternal[507247]
      }
      label _end__getIteratorZipInternal[507247]
      (507251 return ret[507249])
    }
    unknown call_tmp[610061] "expr temp" "maybe param" "maybe type" "temp"
    (610064 'move' call_tmp[610061](53706 call size _mt[243] t[53636]))
    unknown call_tmp[610066] "expr temp" "maybe param" "maybe type" "temp"
    (610069 'move' call_tmp[610066](53710 call == call_tmp[610061] 1))
    unknown call_tmp[610071] "expr temp" "maybe param" "maybe type" "temp"
    (610074 'move' call_tmp[610071](53728 call _cond_test call_tmp[610066]))
    if call_tmp[610071]
    {
      unknown call_tmp[610076] "expr temp" "maybe param" "maybe type" "temp"
      (610079 'move' call_tmp[610076](53716 call t[53636] 0))
      unknown call_tmp[610081] "expr temp" "maybe param" "maybe type" "temp"
      (610084 'move' call_tmp[610081](53718 call _getIterator call_tmp[610076]))
      (507270 'move' ret[507265](507269 'deref' call_tmp[610081]))
      gotoReturn _end__getIteratorZip[507263] _end__getIteratorZip[507263]
    }
    {
      unknown call_tmp[610086] "expr temp" "maybe param" "maybe type" "temp"
      (610089 'move' call_tmp[610086](53725 call _getIteratorZipInternal t[53636] 0))
      (507275 'move' ret[507265](507274 'deref' call_tmp[610086]))
      gotoReturn _end__getIteratorZip[507263] _end__getIteratorZip[507263]
    }
    label _end__getIteratorZip[507263]
    (507267 return ret[507265])
  }
  function _freeIterator[53742](arg ic[53739]:_iteratorClass[208](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[610091] "expr temp" "maybe param" "maybe type" "temp"
    (610094 'move' call_tmp[610091](53764 'cast_to_void_star' ic[53739]))
    (53766 call chpl_here_free call_tmp[610091])
    (507279 return _void[55])
  }
  function _freeIterator[53777](arg x[53774]:_tuple[56199](?)) : _unknown[51] "inline" "no return value for void"
  {
    {
      unknown i[53797] "dead at end of block" "insert auto destroy"
      (540759 'init var' i[53797] 0)
      (474644 'end of statement')
      unknown tmp[53798] "maybe param" "temp"
      unknown call_tmp[610098] "expr temp" "maybe param" "maybe type" "temp"
      (610101 'move' call_tmp[610098](53781 call size _mt[243] x[53774]))
      unknown call_tmp[610103] "expr temp" "maybe param" "maybe type" "temp"
      (610106 'move' call_tmp[610103](53785 call - call_tmp[610098] 1))
      (53810 'move' tmp[53798](53808 call chpl_compute_low_param_loop_bound 0 call_tmp[610103]))
      unknown tmp[53799] "maybe param" "temp"
      unknown call_tmp[610110] "expr temp" "maybe param" "maybe type" "temp"
      (610113 'move' call_tmp[610110](53817 call size _mt[243] x[53774]))
      unknown call_tmp[610115] "expr temp" "maybe param" "maybe type" "temp"
      (610118 'move' call_tmp[610115](53815 call - call_tmp[610110] 1))
      (53823 'move' tmp[53799](53821 call chpl_compute_high_param_loop_bound 0 call_tmp[610115]))
      unknown tmp[53800] "maybe param" "temp"
      (53826 'move' tmp[53800] 1)
      ParamForLoop[53828]
      { i[53797] tmp[53798] tmp[53799] tmp[53800]
        unknown call_tmp[610120] "expr temp" "maybe param" "maybe type" "temp"
        (610123 'move' call_tmp[610120](53793 call x[53774] i[53797]))
        (53795 call _freeIterator call_tmp[610120])
        (474645 'end of statement' i[53797])
      }
      label _unused_continueLabel[53802]
      label _breakLabel[53801]
    }
    (507281 return _void[55])
  }
  function _toLeader[53846](arg ir[53843]:_iteratorRecord[205](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507285] "RVV" "temp"
    unknown call_tmp[610125] "expr temp" "maybe param" "maybe type" "temp"
    (610128 'move' call_tmp[610125](53888 'to leader' ir[53843]))
    unknown call_tmp[610130] "expr temp" "maybe param" "maybe type" "temp"
    (610133 'move' call_tmp[610130](53890 call chpl__autoCopy call_tmp[610125]))
    (507290 'move' ret[507285](507289 'deref' call_tmp[610130]))
    (507287 return ret[507285])
  }
  where {
    (53867 'has leader' ir[53843])
  }
  function _toLeader[53901](arg x[53899]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507294] "RVV" "temp"
    unknown call_tmp[610137] "expr temp" "maybe param" "maybe type" "temp"
    (610140 'move' call_tmp[610137](53928 call(53924 call (partial) these _mt[243] x[53899])))
    unknown call_tmp[610142] "expr temp" "maybe param" "maybe type" "temp"
    (610145 'move' call_tmp[610142](53930 call _toLeader call_tmp[610137]))
    (507299 'move' ret[507294](507298 'deref' call_tmp[610142]))
    (507296 return ret[507294])
  }
  where {
    unknown tmp[418500] "maybe param" "temp"
    unknown call_tmp[610147] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (610150 'move' call_tmp[610147](53905 'typeof' x[53899]))
    unknown call_tmp[610152] "expr temp" "maybe param" "maybe type" "temp"
    (610155 'move' call_tmp[610152](354211 'is_subtype' _iteratorRecord[205](?) call_tmp[610147]))
    (418511 'move' tmp[418500](53909 call ! call_tmp[610152]))
    unknown call_tmp[610157] "expr temp" "maybe param" "maybe type" "temp"
    (610160 'move' call_tmp[610157](418513 call _cond_invalid tmp[418500]))
    if call_tmp[610157]
    {
      (418516 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554448] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554449] "maybe param" "temp"
    unknown call_tmp[610162] "expr temp" "maybe param" "maybe type" "temp"
    (610165 'move' call_tmp[610162](418501 call isTrue tmp[418500]))
    (554454 'move' tmp[554449](554452 call _cond_test call_tmp[610162]))
    if tmp[554449]
    {
      unknown tmp[554456] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610169] "expr temp" "maybe param" "maybe type" "temp"
      (610172 'move' call_tmp[610169](53918 call(53914 call (partial) these _mt[243] x[53899])))
      unknown call_tmp[610174] "expr temp" "maybe param" "maybe type" "temp"
      (610177 'move' call_tmp[610174](53919 'has leader' call_tmp[610169]))
      (554458 'move' tmp[554456](418504 call isTrue call_tmp[610174]))
      (554463 'move' tmp[554448](554460 '_paramFoldLogical' tmp[554449] tmp[554456]))
    }
    {
      (554468 'move' tmp[554448](554465 '_paramFoldLogical' tmp[554449] 0))
    }
    (748180 call chpl_statementLevelSymbol tmp[554448])
  }
  function _toLeaderZip[53941](arg x[53939]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507303] "RVV" "temp"
    unknown call_tmp[610179] "expr temp" "maybe param" "maybe type" "temp"
    (610182 'move' call_tmp[610179](53980 call _toLeader x[53939]))
    (507308 'move' ret[507303](507307 'deref' call_tmp[610179]))
    (507305 return ret[507303])
  }
  where {
    unknown tmp[418521] "maybe param" "temp"
    unknown call_tmp[610184] "expr temp" "maybe param" "maybe type" "temp"
    (610187 'move' call_tmp[610184](53946 call isTuple x[53939]))
    (418532 'move' tmp[418521](53947 call ! call_tmp[610184]))
    unknown call_tmp[610189] "expr temp" "maybe param" "maybe type" "temp"
    (610192 'move' call_tmp[610189](418534 call _cond_invalid tmp[418521]))
    if call_tmp[610189]
    {
      (418537 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554475] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554476] "maybe param" "temp"
    unknown call_tmp[610194] "expr temp" "maybe param" "maybe type" "temp"
    (610197 'move' call_tmp[610194](418522 call isTrue tmp[418521]))
    (554481 'move' tmp[554476](554479 call _cond_test call_tmp[610194]))
    if tmp[554476]
    {
      unknown tmp[554483] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610199] "expr temp" "maybe param" "maybe type" "temp"
      (610202 'move' call_tmp[610199](53974 call canResolve module=[255] Reflection[224882] "_toLeader" x[53939]))
      (554485 'move' tmp[554483](418525 call isTrue call_tmp[610199]))
      (554490 'move' tmp[554475](554487 '_paramFoldLogical' tmp[554476] tmp[554483]))
    }
    {
      (554495 'move' tmp[554475](554492 '_paramFoldLogical' tmp[554476] 0))
    }
    (748182 call chpl_statementLevelSymbol tmp[554475])
    (357259 'referenced modules list' Reflection[224882])
  }
  function _toLeaderZip[53993](arg x[53990]:_tuple[56199](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507312] "RVV" "temp"
    unknown call_tmp[610204] "expr temp" "maybe param" "maybe type" "temp"
    (610207 'move' call_tmp[610204](54010 call x[53990] 0))
    unknown call_tmp[610209] "expr temp" "maybe param" "maybe type" "temp"
    (610212 'move' call_tmp[610209](54012 call _toLeader call_tmp[610204]))
    (507317 'move' ret[507312](507316 'deref' call_tmp[610209]))
    (507314 return ret[507312])
  }
  where {
    unknown call_tmp[610214] "expr temp" "maybe param" "maybe type" "temp"
    (610217 'move' call_tmp[610214](54004 call x[53990] 0))
    (54005 call canResolve module=[255] Reflection[224882] "_toLeader" call_tmp[610214])
    (357265 'referenced modules list' Reflection[224882])
  }
  function _toStandalone[54025](arg iterator[54022]:_iteratorClass[208](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507321] "RVV" "temp"
    unknown call_tmp[610219] "expr temp" "maybe param" "maybe type" "temp"
    (610222 'move' call_tmp[610219](54047 'to standalone' iterator[54022]))
    unknown call_tmp[610224] "expr temp" "maybe param" "maybe type" "temp"
    (610227 'move' call_tmp[610224](54049 call chpl__autoCopy call_tmp[610219]))
    (507326 'move' ret[507321](507325 'deref' call_tmp[610224]))
    (507323 return ret[507321])
  }
  function _toStandalone[54061](arg ir[54058]:_iteratorRecord[205](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507330] "RVV" "temp"
    unknown call_tmp[610229] "maybe param" "maybe type" "temp"
    (610232 'move' call_tmp[610229](54066 call _getIterator ir[54058]))
    unknown ic[54067] "dead at end of block" "insert auto destroy" "no copy"
    (540761 'init var' ic[54067] call_tmp[610229])
    (54070 'end of statement')
    unknown call_tmp[610234] "maybe param" "maybe type" "temp"
    (610237 'move' call_tmp[610234](54075 call _toStandalone ic[54067]))
    unknown standalone[54076] "dead at end of block" "insert auto destroy" "no copy"
    (540763 'init var' standalone[54076] call_tmp[610234])
    (54079 'end of statement' ic[54067])
    (54083 call _freeIterator ic[54067])
    (474653 'end of statement' ic[54067])
    (507335 'move' ret[507330](507334 'deref' standalone[54076]))
    gotoReturn _end__toStandalone[507328] _end__toStandalone[507328]
    (474655 'end of statement' standalone[54076])
    label _end__toStandalone[507328]
    (507332 return ret[507330])
  }
  function _toStandalone[54094](arg x[54092]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507341] "RVV" "temp"
    unknown call_tmp[610241] "expr temp" "maybe param" "maybe type" "temp"
    (610244 'move' call_tmp[610241](54102 call(54098 call (partial) these _mt[243] x[54092])))
    unknown call_tmp[610246] "expr temp" "maybe param" "maybe type" "temp"
    (610249 'move' call_tmp[610246](54104 call _toStandalone call_tmp[610241]))
    (507346 'move' ret[507341](507345 'deref' call_tmp[610246]))
    (507343 return ret[507341])
  }
  function _toLeader[54116](arg ir[54113]:_iteratorRecord[205](?), arg args[54119]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507350] "RVV" "temp"
    unknown call_tmp[610251] "expr temp" "maybe param" "maybe type" "temp"
    (610254 'move' call_tmp[610251](54128 'to leader' ir[54113](54127 'expand_tuple' args[54119])))
    unknown call_tmp[610256] "expr temp" "maybe param" "maybe type" "temp"
    (610259 'move' call_tmp[610256](54130 call chpl__autoCopy call_tmp[610251]))
    (507355 'move' ret[507350](507354 'deref' call_tmp[610256]))
    (507352 return ret[507350])
  }
  function _toLeader[54140](arg x[54138]:_any[178](?), arg args[54143]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507359] "RVV" "temp"
    unknown call_tmp[610263] "expr temp" "maybe param" "maybe type" "temp"
    (610266 'move' call_tmp[610263](54152 call(54148 call (partial) these _mt[243] x[54138])))
    unknown call_tmp[610268] "expr temp" "maybe param" "maybe type" "temp"
    (610271 'move' call_tmp[610268](54156 call _toLeader call_tmp[610263](54155 'expand_tuple' args[54143])))
    (507364 'move' ret[507359](507363 'deref' call_tmp[610268]))
    (507361 return ret[507359])
  }
  function _toLeaderZip[54166](arg x[54164]:_any[178](?), arg args[54169]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507368] "RVV" "temp"
    unknown call_tmp[610273] "expr temp" "maybe param" "maybe type" "temp"
    (610276 'move' call_tmp[610273](54177 call _toLeader x[54164](54176 'expand_tuple' args[54169])))
    (507373 'move' ret[507368](507372 'deref' call_tmp[610273]))
    (507370 return ret[507368])
  }
  function _toLeaderZip[54189](arg x[54186]:_tuple[56199](?), arg args[54192]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507377] "RVV" "temp"
    unknown call_tmp[610278] "expr temp" "maybe param" "maybe type" "temp"
    (610281 'move' call_tmp[610278](54199 call x[54186] 0))
    unknown call_tmp[610283] "expr temp" "maybe param" "maybe type" "temp"
    (610286 'move' call_tmp[610283](54203 call _toLeader call_tmp[610278](54202 'expand_tuple' args[54192])))
    (507382 'move' ret[507377](507381 'deref' call_tmp[610283]))
    (507379 return ret[507377])
  }
  function _toStandalone[54215](arg iterator[54212]:_iteratorClass[208](?), arg args[54218]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507386] "RVV" "temp"
    unknown call_tmp[610288] "expr temp" "maybe param" "maybe type" "temp"
    (610291 'move' call_tmp[610288](54227 'to standalone' iterator[54212](54226 'expand_tuple' args[54218])))
    unknown call_tmp[610293] "expr temp" "maybe param" "maybe type" "temp"
    (610296 'move' call_tmp[610293](54229 call chpl__autoCopy call_tmp[610288]))
    (507391 'move' ret[507386](507390 'deref' call_tmp[610293]))
    (507388 return ret[507386])
  }
  function _toStandalone[54241](arg ir[54238]:_iteratorRecord[205](?), arg args[54244]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507395] "RVV" "temp"
    unknown call_tmp[610298] "maybe param" "maybe type" "temp"
    (610301 'move' call_tmp[610298](54250 call _getIterator ir[54238]))
    unknown ic[54251] "dead at end of block" "insert auto destroy" "no copy"
    (540765 'init var' ic[54251] call_tmp[610298])
    (54254 'end of statement')
    unknown call_tmp[610303] "maybe param" "maybe type" "temp"
    (610306 'move' call_tmp[610303](54261 call _toStandalone ic[54251](54260 'expand_tuple' args[54244])))
    unknown standalone[54262] "dead at end of block" "insert auto destroy" "no copy"
    (540767 'init var' standalone[54262] call_tmp[610303])
    (54265 'end of statement' ic[54251])
    (54269 call _freeIterator ic[54251])
    (474664 'end of statement' ic[54251])
    (507400 'move' ret[507395](507399 'deref' standalone[54262]))
    gotoReturn _end__toStandalone[507393] _end__toStandalone[507393]
    (474666 'end of statement' standalone[54262])
    label _end__toStandalone[507393]
    (507397 return ret[507395])
  }
  function _toStandalone[54280](arg x[54278]:_any[178](?), arg args[54283]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507406] "RVV" "temp"
    unknown call_tmp[610310] "expr temp" "maybe param" "maybe type" "temp"
    (610313 'move' call_tmp[610310](54292 call(54288 call (partial) these _mt[243] x[54278])))
    unknown call_tmp[610315] "expr temp" "maybe param" "maybe type" "temp"
    (610318 'move' call_tmp[610315](54296 call _toStandalone call_tmp[610310](54295 'expand_tuple' args[54283])))
    (507411 'move' ret[507406](507410 'deref' call_tmp[610315]))
    (507408 return ret[507406])
  }
  function chpl__canHaveFastFollowers[54306](arg x[54304]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507415] "RVV" "param" "temp"
    (507420 'move' ret[507415](507419 'deref' 0))
    (507417 return ret[507415])
  }
  function chpl__canHaveFastFollowers[54322](arg x[54319]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[507424] "RVV" "param" "temp"
    (507429 'move' ret[507424](507428 'deref' 1))
    (507426 return ret[507424])
  }
  function chpl__canHaveFastFollowersZip[54336](arg x[54333]:_tuple[56199](?)) param : _unknown[51]
  {
    unknown ret[507433] "RVV" "param" "temp"
    unknown call_tmp[610320] "expr temp" "maybe param" "maybe type" "temp"
    (610323 'move' call_tmp[610320](54342 call chpl__canHaveFastFollowersZipHelp x[54333] 0))
    (507438 'move' ret[507433](507437 'deref' call_tmp[610320]))
    (507435 return ret[507433])
  }
  function chpl__canHaveFastFollowersZipHelp[54354](arg x[54351]:_tuple[56199](?), param arg dim[54356]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507442] "RVV" "param" "temp"
    unknown call_tmp[610327] "expr temp" "maybe param" "maybe type" "temp"
    (610330 'move' call_tmp[610327](54359 call size _mt[243] x[54351]))
    unknown call_tmp[610332] "expr temp" "maybe param" "maybe type" "temp"
    (610335 'move' call_tmp[610332](54363 call - call_tmp[610327] 1))
    unknown call_tmp[610337] "expr temp" "maybe param" "maybe type" "temp"
    (610340 'move' call_tmp[610337](54366 call == call_tmp[610332] dim[54356]))
    unknown call_tmp[610342] "expr temp" "maybe param" "maybe type" "temp"
    (610345 'move' call_tmp[610342](54396 call _cond_test call_tmp[610337]))
    if call_tmp[610342]
    {
      unknown call_tmp[610347] "expr temp" "maybe param" "maybe type" "temp"
      (610350 'move' call_tmp[610347](54372 call x[54351] dim[54356]))
      unknown call_tmp[610352] "expr temp" "maybe param" "maybe type" "temp"
      (610355 'move' call_tmp[610352](54374 call chpl__canHaveFastFollowers call_tmp[610347]))
      (507447 'move' ret[507442](507446 'deref' call_tmp[610352]))
      gotoReturn _end_chpl__canHaveFastFollowersZipHelp[507440] _end_chpl__canHaveFastFollowersZipHelp[507440]
    }
    {
      unknown tmp[418542] "maybe param" "temp"
      unknown call_tmp[610357] "expr temp" "maybe param" "maybe type" "temp"
      (610360 'move' call_tmp[610357](54381 call x[54351] dim[54356]))
      (418553 'move' tmp[418542](54383 call chpl__canHaveFastFollowers call_tmp[610357]))
      unknown call_tmp[610362] "expr temp" "maybe param" "maybe type" "temp"
      (610365 'move' call_tmp[610362](418555 call _cond_invalid tmp[418542]))
      if call_tmp[610362]
      {
        (418558 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[554502] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554503] "maybe param" "temp"
      unknown call_tmp[610367] "expr temp" "maybe param" "maybe type" "temp"
      (610370 'move' call_tmp[610367](418543 call isTrue tmp[418542]))
      (554508 'move' tmp[554503](554506 call _cond_test call_tmp[610367]))
      if tmp[554503]
      {
        (554513 'move' tmp[554502](554510 '_paramFoldLogical' tmp[554503] 1))
      }
      {
        unknown tmp[554515] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610372] "expr temp" "maybe param" "maybe type" "temp"
        (610375 'move' call_tmp[610372](54389 call + dim[54356] 1))
        unknown call_tmp[610377] "expr temp" "maybe param" "maybe type" "temp"
        (610380 'move' call_tmp[610377](54391 call chpl__canHaveFastFollowersZipHelp x[54351] call_tmp[610372]))
        (554517 'move' tmp[554515](418547 call isTrue call_tmp[610377]))
        (554522 'move' tmp[554502](554519 '_paramFoldLogical' tmp[554503] tmp[554515]))
      }
      (507452 'move' ret[507442](507451 'deref' tmp[554502]))
      gotoReturn _end_chpl__canHaveFastFollowersZipHelp[507440] _end_chpl__canHaveFastFollowersZipHelp[507440]
    }
    label _end_chpl__canHaveFastFollowersZipHelp[507440]
    (507444 return ret[507442])
  }
  function chpl__canLeadFastFollowers[54409](arg x[54407]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507458] "RVV" "param" "temp"
    unknown tmp[418563] "maybe param" "temp"
    (418574 'move' tmp[418563](54414 call isDomain x[54407]))
    unknown call_tmp[610382] "expr temp" "maybe param" "maybe type" "temp"
    (610385 'move' call_tmp[610382](418576 call _cond_invalid tmp[418563]))
    if call_tmp[610382]
    {
      (418579 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[554529] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554530] "maybe param" "temp"
    unknown call_tmp[610387] "expr temp" "maybe param" "maybe type" "temp"
    (610390 'move' call_tmp[610387](418564 call isTrue tmp[418563]))
    (554535 'move' tmp[554530](554533 call _cond_test call_tmp[610387]))
    if tmp[554530]
    {
      (554540 'move' tmp[554529](554537 '_paramFoldLogical' tmp[554530] 1))
    }
    {
      unknown tmp[554542] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610392] "expr temp" "maybe param" "maybe type" "temp"
      (610395 'move' call_tmp[610392](54418 call isArray x[54407]))
      (554544 'move' tmp[554542](418568 call isTrue call_tmp[610392]))
      (554549 'move' tmp[554529](554546 '_paramFoldLogical' tmp[554530] tmp[554542]))
    }
    (507463 'move' ret[507458](507462 'deref' tmp[554529]))
    (507460 return ret[507458])
  }
  function chpl__hasInertFastFollowers[54430](arg x[54428]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507467] "RVV" "param" "temp"
    (507472 'move' ret[507467](507471 'deref' 1))
    (507469 return ret[507467])
  }
  function chpl__hasInertFastFollowers[54446](arg x[54443]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[507476] "RVV" "param" "temp"
    (507481 'move' ret[507476](507480 'deref' 0))
    (507478 return ret[507476])
  }
  function chpl__hasInertFastFollowersZip[54460](arg x[54457]:_tuple[56199](?)) param : _unknown[51]
  {
    unknown ret[507485] "RVV" "param" "temp"
    unknown call_tmp[610397] "expr temp" "maybe param" "maybe type" "temp"
    (610400 'move' call_tmp[610397](54466 call chpl__hasInertFastFollowersZipHelp x[54457] 0))
    (507490 'move' ret[507485](507489 'deref' call_tmp[610397]))
    (507487 return ret[507485])
  }
  function chpl__hasInertFastFollowersZipHelp[54478](arg x[54475]:_tuple[56199](?), param arg dim[54480]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507494] "RVV" "param" "temp"
    unknown call_tmp[610404] "expr temp" "maybe param" "maybe type" "temp"
    (610407 'move' call_tmp[610404](54483 call size _mt[243] x[54475]))
    unknown call_tmp[610409] "expr temp" "maybe param" "maybe type" "temp"
    (610412 'move' call_tmp[610409](54487 call - call_tmp[610404] 1))
    unknown call_tmp[610414] "expr temp" "maybe param" "maybe type" "temp"
    (610417 'move' call_tmp[610414](54490 call == call_tmp[610409] dim[54480]))
    unknown call_tmp[610419] "expr temp" "maybe param" "maybe type" "temp"
    (610422 'move' call_tmp[610419](54522 call _cond_test call_tmp[610414]))
    if call_tmp[610419]
    {
      unknown call_tmp[610424] "expr temp" "maybe param" "maybe type" "temp"
      (610427 'move' call_tmp[610424](54496 call x[54475] dim[54480]))
      unknown call_tmp[610429] "expr temp" "maybe param" "maybe type" "temp"
      (610432 'move' call_tmp[610429](54498 call chpl__hasInertFastFollowers call_tmp[610424]))
      (507499 'move' ret[507494](507498 'deref' call_tmp[610429]))
      gotoReturn _end_chpl__hasInertFastFollowersZipHelp[507492] _end_chpl__hasInertFastFollowersZipHelp[507492]
    }
    {
      unknown tmp[418584] "maybe param" "temp"
      unknown call_tmp[610434] "expr temp" "maybe param" "maybe type" "temp"
      (610437 'move' call_tmp[610434](54506 call x[54475] dim[54480]))
      (418595 'move' tmp[418584](54508 call chpl__hasInertFastFollowers call_tmp[610434]))
      unknown call_tmp[610439] "expr temp" "maybe param" "maybe type" "temp"
      (610442 'move' call_tmp[610439](418597 call _cond_invalid tmp[418584]))
      if call_tmp[610439]
      {
        (418600 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554556] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554557] "maybe param" "temp"
      unknown call_tmp[610444] "expr temp" "maybe param" "maybe type" "temp"
      (610447 'move' call_tmp[610444](418585 call isTrue tmp[418584]))
      (554562 'move' tmp[554557](554560 call _cond_test call_tmp[610444]))
      if tmp[554557]
      {
        unknown tmp[554564] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610449] "expr temp" "maybe param" "maybe type" "temp"
        (610452 'move' call_tmp[610449](54514 call + dim[54480] 1))
        unknown call_tmp[610454] "expr temp" "maybe param" "maybe type" "temp"
        (610457 'move' call_tmp[610454](54516 call chpl__hasInertFastFollowersZipHelp x[54475] call_tmp[610449]))
        (554566 'move' tmp[554564](418588 call isTrue call_tmp[610454]))
        (554571 'move' tmp[554556](554568 '_paramFoldLogical' tmp[554557] tmp[554564]))
      }
      {
        (554576 'move' tmp[554556](554573 '_paramFoldLogical' tmp[554557] 0))
      }
      (507504 'move' ret[507494](507503 'deref' tmp[554556]))
      gotoReturn _end_chpl__hasInertFastFollowersZipHelp[507492] _end_chpl__hasInertFastFollowersZipHelp[507492]
    }
    label _end_chpl__hasInertFastFollowersZipHelp[507492]
    (507496 return ret[507494])
  }
  function chpl__staticFastFollowCheck[54533](arg x[54531]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507510] "RVV" "param" "temp"
    const lead[54536] "dead at end of block" "const" "insert auto destroy" "no copy"
    (540769 'init var' lead[54536] x[54531])
    (54539 'end of statement')
    unknown call_tmp[610459] "expr temp" "maybe param" "maybe type" "temp"
    (610462 'move' call_tmp[610459](54544 call chpl__canHaveFastFollowers lead[54536]))
    unknown call_tmp[610464] "expr temp" "maybe param" "maybe type" "temp"
    (610467 'move' call_tmp[610464](54556 call _cond_test call_tmp[610459]))
    if call_tmp[610464]
    {
      unknown call_tmp[610469] "expr temp" "maybe param" "maybe type" "temp"
      (610472 'move' call_tmp[610469](54549 call chpl__staticFastFollowCheck x[54531] lead[54536]))
      (507515 'move' ret[507510](507514 'deref' call_tmp[610469]))
      gotoReturn _end_chpl__staticFastFollowCheck[507508] _end_chpl__staticFastFollowCheck[507508]
      (474683 'end of statement' lead[54536])
    }
    {
      (507520 'move' ret[507510](507519 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheck[507508] _end_chpl__staticFastFollowCheck[507508]
    }
    label _end_chpl__staticFastFollowCheck[507508]
    (507512 return ret[507510])
  }
  function chpl__staticFastFollowCheck[54567](arg x[54565]:_any[178](?), arg lead[54569]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507526] "RVV" "param" "temp"
    unknown call_tmp[610474] "expr temp" "maybe param" "maybe type" "temp"
    (610477 'move' call_tmp[610474](54574 call chpl__hasInertFastFollowers x[54565]))
    (507531 'move' ret[507526](507530 'deref' call_tmp[610474]))
    (507528 return ret[507526])
  }
  function chpl__staticFastFollowCheck[54588](arg x[54585]:_array[133588](?), arg lead[54590]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507535] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[491573] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610481] "expr temp" "maybe param" "maybe type" "temp"
      (610484 'move' call_tmp[610481](54604 call _value _mt[243] lead[54590]))
      (491577 'move' call_type_tmp[491573](54607 'typeof' call_tmp[610481]))
    }
    unknown call_tmp[610488] "expr temp" "maybe param" "maybe type" "temp"
    (610491 'move' call_tmp[610488](54595 call _value _mt[243] x[54585]))
    unknown call_tmp[610495] "expr temp" "maybe param" "maybe type" "temp"
    (610498 'move' call_tmp[610495](54609 call(54600 call (partial) dsiStaticFastFollowCheck _mt[243] call_tmp[610488]) call_type_tmp[491573]))
    (507540 'move' ret[507535](507539 'deref' call_tmp[610495]))
    (507537 return ret[507535])
  }
  function chpl__staticFastFollowCheckZip[54621](arg x[54618]:_tuple[56199](?)) param : _unknown[51]
  {
    unknown ret[507544] "RVV" "param" "temp"
    unknown call_tmp[610500] "expr temp" "maybe param" "maybe type" "temp"
    (610503 'move' call_tmp[610500](54626 call chpl__canHaveFastFollowersZip x[54618]))
    unknown call_tmp[610505] "expr temp" "maybe param" "maybe type" "temp"
    (610508 'move' call_tmp[610505](54627 call ! call_tmp[610500]))
    unknown call_tmp[610510] "expr temp" "maybe param" "maybe type" "temp"
    (610513 'move' call_tmp[610510](54662 call _cond_test call_tmp[610505]))
    if call_tmp[610510]
    {
      (507549 'move' ret[507544](507548 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507542] _end_chpl__staticFastFollowCheckZip[507542]
    }
    {
      unknown call_tmp[610515] "maybe param" "maybe type" "temp"
      (610518 'move' call_tmp[610515](54636 call x[54618] 0))
      const lead[54637] "dead at end of block" "const" "insert auto destroy" "no copy"
      (540771 'init var' lead[54637] call_tmp[610515])
      (54640 'end of statement')
      unknown call_tmp[610520] "expr temp" "maybe param" "maybe type" "temp"
      (610523 'move' call_tmp[610520](54645 call chpl__canLeadFastFollowers lead[54637]))
      unknown call_tmp[610525] "expr temp" "maybe param" "maybe type" "temp"
      (610528 'move' call_tmp[610525](54656 call _cond_test call_tmp[610520]))
      if call_tmp[610525]
      {
        unknown call_tmp[610530] "expr temp" "maybe param" "maybe type" "temp"
        (610533 'move' call_tmp[610530](54650 call chpl__staticFastFollowCheckZip x[54618] lead[54637]))
        (507554 'move' ret[507544](507553 'deref' call_tmp[610530]))
        gotoReturn _end_chpl__staticFastFollowCheckZip[507542] _end_chpl__staticFastFollowCheckZip[507542]
        (474689 'end of statement' lead[54637])
      }
      {
        (507559 'move' ret[507544](507558 'deref' 0))
        gotoReturn _end_chpl__staticFastFollowCheckZip[507542] _end_chpl__staticFastFollowCheckZip[507542]
      }
    }
    label _end_chpl__staticFastFollowCheckZip[507542]
    (507546 return ret[507544])
  }
  function chpl__staticFastFollowCheckZip[54675](arg x[54672]:_tuple[56199](?), arg lead[54677]:_any[178](?), param arg dim[54680] :
  0 =
  0) param : _unknown[51]
  {
    unknown ret[507565] "RVV" "param" "temp"
    unknown call_tmp[610537] "expr temp" "maybe param" "maybe type" "temp"
    (610540 'move' call_tmp[610537](54684 call size _mt[243] x[54672]))
    unknown call_tmp[610542] "expr temp" "maybe param" "maybe type" "temp"
    (610545 'move' call_tmp[610542](54688 call - call_tmp[610537] 1))
    unknown call_tmp[610547] "expr temp" "maybe param" "maybe type" "temp"
    (610550 'move' call_tmp[610547](54691 call == call_tmp[610542] dim[54680]))
    unknown call_tmp[610552] "expr temp" "maybe param" "maybe type" "temp"
    (610555 'move' call_tmp[610552](54724 call _cond_test call_tmp[610547]))
    if call_tmp[610552]
    {
      unknown call_tmp[610557] "expr temp" "maybe param" "maybe type" "temp"
      (610560 'move' call_tmp[610557](54697 call x[54672] dim[54680]))
      unknown call_tmp[610562] "expr temp" "maybe param" "maybe type" "temp"
      (610565 'move' call_tmp[610562](54700 call chpl__staticFastFollowCheck call_tmp[610557] lead[54677]))
      (507570 'move' ret[507565](507569 'deref' call_tmp[610562]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507563] _end_chpl__staticFastFollowCheckZip[507563]
    }
    {
      unknown tmp[418605] "maybe param" "temp"
      unknown call_tmp[610567] "expr temp" "maybe param" "maybe type" "temp"
      (610570 'move' call_tmp[610567](54707 call x[54672] dim[54680]))
      (418616 'move' tmp[418605](54710 call chpl__staticFastFollowCheck call_tmp[610567] lead[54677]))
      unknown call_tmp[610572] "expr temp" "maybe param" "maybe type" "temp"
      (610575 'move' call_tmp[610572](418618 call _cond_invalid tmp[418605]))
      if call_tmp[610572]
      {
        (418621 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554583] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554584] "maybe param" "temp"
      unknown call_tmp[610577] "expr temp" "maybe param" "maybe type" "temp"
      (610580 'move' call_tmp[610577](418606 call isTrue tmp[418605]))
      (554589 'move' tmp[554584](554587 call _cond_test call_tmp[610577]))
      if tmp[554584]
      {
        unknown tmp[554591] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610582] "expr temp" "maybe param" "maybe type" "temp"
        (610585 'move' call_tmp[610582](54717 call + dim[54680] 1))
        unknown call_tmp[610587] "expr temp" "maybe param" "maybe type" "temp"
        (610590 'move' call_tmp[610587](54719 call chpl__staticFastFollowCheckZip x[54672] lead[54677] call_tmp[610582]))
        (554593 'move' tmp[554591](418609 call isTrue call_tmp[610587]))
        (554598 'move' tmp[554583](554595 '_paramFoldLogical' tmp[554584] tmp[554591]))
      }
      {
        (554603 'move' tmp[554583](554600 '_paramFoldLogical' tmp[554584] 0))
      }
      (507575 'move' ret[507565](507574 'deref' tmp[554583]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507563] _end_chpl__staticFastFollowCheckZip[507563]
    }
    label _end_chpl__staticFastFollowCheckZip[507563]
    (507567 return ret[507565])
  }
  function chpl__dynamicFastFollowCheck[54737](arg x[54735]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507581] "RVV" "temp"
    unknown call_tmp[610592] "expr temp" "maybe param" "maybe type" "temp"
    (610595 'move' call_tmp[610592](54742 call chpl__canHaveFastFollowers x[54735]))
    unknown call_tmp[610597] "expr temp" "maybe param" "maybe type" "temp"
    (610600 'move' call_tmp[610597](54755 call _cond_test call_tmp[610592]))
    if call_tmp[610597]
    {
      unknown call_tmp[610602] "expr temp" "maybe param" "maybe type" "temp"
      (610605 'move' call_tmp[610602](54747 call chpl__dynamicFastFollowCheck x[54735] x[54735]))
      (507586 'move' ret[507581](507585 'deref' call_tmp[610602]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507579] _end_chpl__dynamicFastFollowCheck[507579]
    }
    {
      (507591 'move' ret[507581](507590 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507579] _end_chpl__dynamicFastFollowCheck[507579]
    }
    label _end_chpl__dynamicFastFollowCheck[507579]
    (507583 return ret[507581])
  }
  function chpl__dynamicFastFollowCheck[54766](arg x[54764]:_any[178](?), arg lead[54768]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507597] "RVV" "temp"
    unknown call_tmp[610607] "expr temp" "maybe param" "maybe type" "temp"
    (610610 'move' call_tmp[610607](54773 call chpl__hasInertFastFollowers x[54764]))
    (507602 'move' ret[507597](507601 'deref' call_tmp[610607]))
    (507599 return ret[507597])
  }
  function chpl__dynamicFastFollowCheck[54787](arg x[54784]:_array[133588](?), arg lead[54789]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507606] "RVV" "temp"
    unknown call_tmp[610612] "expr temp" "maybe param" "maybe type" "temp"
    (610615 'move' call_tmp[610612](54795 call chpl__staticFastFollowCheck x[54784] lead[54789]))
    unknown call_tmp[610617] "expr temp" "maybe param" "maybe type" "temp"
    (610620 'move' call_tmp[610617](54813 call _cond_test call_tmp[610612]))
    if call_tmp[610617]
    {
      unknown call_tmp[610624] "expr temp" "maybe param" "maybe type" "temp"
      (610627 'move' call_tmp[610624](54797 call _value _mt[243] x[54784]))
      unknown call_tmp[610631] "expr temp" "maybe param" "maybe type" "temp"
      (610634 'move' call_tmp[610631](54807 call(54802 call (partial) dsiDynamicFastFollowCheck _mt[243] call_tmp[610624]) lead[54789]))
      (507611 'move' ret[507606](507610 'deref' call_tmp[610631]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507604] _end_chpl__dynamicFastFollowCheck[507604]
    }
    {
      (507616 'move' ret[507606](507615 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507604] _end_chpl__dynamicFastFollowCheck[507604]
    }
    label _end_chpl__dynamicFastFollowCheck[507604]
    (507608 return ret[507606])
  }
  function chpl__dynamicFastFollowCheckZip[54828](arg x[54825]:_tuple[56199](?)) : _unknown[51]
  {
    unknown ret[507622] "RVV" "temp"
    unknown call_tmp[610636] "expr temp" "maybe param" "maybe type" "temp"
    (610639 'move' call_tmp[610636](54833 call chpl__canHaveFastFollowersZip x[54825]))
    unknown call_tmp[610641] "expr temp" "maybe param" "maybe type" "temp"
    (610644 'move' call_tmp[610641](54834 call ! call_tmp[610636]))
    unknown call_tmp[610646] "expr temp" "maybe param" "maybe type" "temp"
    (610649 'move' call_tmp[610646](54840 call _cond_test call_tmp[610641]))
    if call_tmp[610646]
    {
      (507627 'move' ret[507622](507626 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507620] _end_chpl__dynamicFastFollowCheckZip[507620]
    }
    unknown call_tmp[610651] "expr temp" "maybe param" "maybe type" "temp"
    (610654 'move' call_tmp[610651](54849 call x[54825] 0))
    unknown call_tmp[610656] "expr temp" "maybe param" "maybe type" "temp"
    (610659 'move' call_tmp[610656](54851 call chpl__canLeadFastFollowers call_tmp[610651]))
    unknown call_tmp[610661] "expr temp" "maybe param" "maybe type" "temp"
    (610664 'move' call_tmp[610661](54867 call _cond_test call_tmp[610656]))
    if call_tmp[610661]
    {
      unknown call_tmp[610666] "expr temp" "maybe param" "maybe type" "temp"
      (610669 'move' call_tmp[610666](54858 call x[54825] 0))
      unknown call_tmp[610671] "expr temp" "maybe param" "maybe type" "temp"
      (610674 'move' call_tmp[610671](54859 call chpl__dynamicFastFollowCheckZip x[54825] call_tmp[610666]))
      (507632 'move' ret[507622](507631 'deref' call_tmp[610671]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507620] _end_chpl__dynamicFastFollowCheckZip[507620]
    }
    {
      (507637 'move' ret[507622](507636 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507620] _end_chpl__dynamicFastFollowCheckZip[507620]
    }
    label _end_chpl__dynamicFastFollowCheckZip[507620]
    (507624 return ret[507622])
  }
  function chpl__dynamicFastFollowCheckZip[54879](arg x[54876]:_tuple[56199](?), arg lead[54881]:_any[178](?), param arg dim[54884] :
  0 =
  0) : _unknown[51]
  {
    unknown ret[507643] "RVV" "temp"
    unknown call_tmp[610678] "expr temp" "maybe param" "maybe type" "temp"
    (610681 'move' call_tmp[610678](54888 call size _mt[243] x[54876]))
    unknown call_tmp[610683] "expr temp" "maybe param" "maybe type" "temp"
    (610686 'move' call_tmp[610683](54892 call - call_tmp[610678] 1))
    unknown call_tmp[610688] "expr temp" "maybe param" "maybe type" "temp"
    (610691 'move' call_tmp[610688](54895 call == call_tmp[610683] dim[54884]))
    unknown call_tmp[610693] "expr temp" "maybe param" "maybe type" "temp"
    (610696 'move' call_tmp[610693](54928 call _cond_test call_tmp[610688]))
    if call_tmp[610693]
    {
      unknown call_tmp[610698] "expr temp" "maybe param" "maybe type" "temp"
      (610701 'move' call_tmp[610698](54901 call x[54876] dim[54884]))
      unknown call_tmp[610703] "expr temp" "maybe param" "maybe type" "temp"
      (610706 'move' call_tmp[610703](54904 call chpl__dynamicFastFollowCheck call_tmp[610698] lead[54881]))
      (507648 'move' ret[507643](507647 'deref' call_tmp[610703]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507641] _end_chpl__dynamicFastFollowCheckZip[507641]
    }
    {
      unknown tmp[418626] "maybe param" "temp"
      unknown call_tmp[610708] "expr temp" "maybe param" "maybe type" "temp"
      (610711 'move' call_tmp[610708](54911 call x[54876] dim[54884]))
      (418637 'move' tmp[418626](54914 call chpl__dynamicFastFollowCheck call_tmp[610708] lead[54881]))
      unknown call_tmp[610713] "expr temp" "maybe param" "maybe type" "temp"
      (610716 'move' call_tmp[610713](418639 call _cond_invalid tmp[418626]))
      if call_tmp[610713]
      {
        (418642 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554610] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554611] "maybe param" "temp"
      unknown call_tmp[610718] "expr temp" "maybe param" "maybe type" "temp"
      (610721 'move' call_tmp[610718](418627 call isTrue tmp[418626]))
      (554616 'move' tmp[554611](554614 call _cond_test call_tmp[610718]))
      if tmp[554611]
      {
        unknown tmp[554618] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610723] "expr temp" "maybe param" "maybe type" "temp"
        (610726 'move' call_tmp[610723](54921 call + dim[54884] 1))
        unknown call_tmp[610728] "expr temp" "maybe param" "maybe type" "temp"
        (610731 'move' call_tmp[610728](54923 call chpl__dynamicFastFollowCheckZip x[54876] lead[54881] call_tmp[610723]))
        (554620 'move' tmp[554618](418630 call isTrue call_tmp[610728]))
        (554625 'move' tmp[554610](554622 '_paramFoldLogical' tmp[554611] tmp[554618]))
      }
      {
        (554630 'move' tmp[554610](554627 '_paramFoldLogical' tmp[554611] 0))
      }
      (507653 'move' ret[507643](507652 'deref' tmp[554610]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507641] _end_chpl__dynamicFastFollowCheckZip[507641]
    }
    label _end_chpl__dynamicFastFollowCheckZip[507641]
    (507645 return ret[507643])
  }
  function _toFollower[54943](arg iterator[54940]:_iteratorClass[208](?), arg leaderIndex[54945]:_any[178](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507659] "RVV" "temp"
    unknown call_tmp[610733] "expr temp" "maybe param" "maybe type" "temp"
    (610736 'move' call_tmp[610733](54968 'to follower' iterator[54940] leaderIndex[54945]))
    unknown call_tmp[610738] "expr temp" "maybe param" "maybe type" "temp"
    (610741 'move' call_tmp[610738](54970 call chpl__autoCopy call_tmp[610733]))
    (507664 'move' ret[507659](507663 'deref' call_tmp[610738]))
    (507661 return ret[507659])
  }
  function _toFollower[54982](arg ir[54979]:_iteratorRecord[205](?), arg leaderIndex[54984]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507668] "RVV" "temp"
    unknown call_tmp[610743] "maybe param" "maybe type" "temp"
    (610746 'move' call_tmp[610743](54989 call _getIterator ir[54979]))
    unknown ic[54990] "dead at end of block" "insert auto destroy" "no copy"
    (540773 'init var' ic[54990] call_tmp[610743])
    (54993 'end of statement')
    unknown call_tmp[610748] "maybe param" "maybe type" "temp"
    (610751 'move' call_tmp[610748](54999 call _toFollower ic[54990] leaderIndex[54984]))
    unknown follower[55000] "dead at end of block" "insert auto destroy" "no copy"
    (540775 'init var' follower[55000] call_tmp[610748])
    (55003 'end of statement' ic[54990])
    (55007 call _freeIterator ic[54990])
    (474708 'end of statement' ic[54990])
    (507673 'move' ret[507668](507672 'deref' follower[55000]))
    gotoReturn _end__toFollower[507666] _end__toFollower[507666]
    (474710 'end of statement' follower[55000])
    label _end__toFollower[507666]
    (507670 return ret[507668])
  }
  function _toFollower[55018](arg x[55016]:_any[178](?), arg leaderIndex[55020]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507679] "RVV" "temp"
    unknown call_tmp[610755] "expr temp" "maybe param" "maybe type" "temp"
    (610758 'move' call_tmp[610755](55028 call(55024 call (partial) these _mt[243] x[55016])))
    unknown call_tmp[610760] "expr temp" "maybe param" "maybe type" "temp"
    (610763 'move' call_tmp[610760](55031 call _toFollower call_tmp[610755] leaderIndex[55020]))
    (507684 'move' ret[507679](507683 'deref' call_tmp[610760]))
    (507681 return ret[507679])
  }
  function _toFollowerZip[55041](arg x[55039]:_any[178](?), arg leaderIndex[55043]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507688] "RVV" "temp"
    unknown call_tmp[610765] "expr temp" "maybe param" "maybe type" "temp"
    (610768 'move' call_tmp[610765](55049 call _toFollower x[55039] leaderIndex[55043]))
    (507693 'move' ret[507688](507692 'deref' call_tmp[610765]))
    (507690 return ret[507688])
  }
  function _toFollowerZip[55061](arg x[55058]:_tuple[56199](?), arg leaderIndex[55063]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507697] "RVV" "temp"
    unknown call_tmp[610770] "expr temp" "maybe param" "maybe type" "temp"
    (610773 'move' call_tmp[610770](55070 call _toFollowerZipInternal x[55058] leaderIndex[55063] 0))
    (507702 'move' ret[507697](507701 'deref' call_tmp[610770]))
    (507699 return ret[507697])
  }
  function _toFollowerZipInternal[55082](arg x[55079]:_tuple[56199](?), arg leaderIndex[55084]:_any[178](?), param arg dim[55087]:int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507706] "RVV" "temp"
    unknown call_tmp[610777] "expr temp" "maybe param" "maybe type" "temp"
    (610780 'move' call_tmp[610777](55092 call size _mt[243] x[55079]))
    unknown call_tmp[610782] "expr temp" "maybe param" "maybe type" "temp"
    (610785 'move' call_tmp[610782](55096 call - call_tmp[610777] 1))
    unknown call_tmp[610787] "expr temp" "maybe param" "maybe type" "temp"
    (610790 'move' call_tmp[610787](55098 call == dim[55087] call_tmp[610782]))
    unknown call_tmp[610792] "expr temp" "maybe param" "maybe type" "temp"
    (610795 'move' call_tmp[610792](55135 call _cond_test call_tmp[610787]))
    if call_tmp[610792]
    {
      unknown call_tmp[610797] "expr temp" "maybe param" "maybe type" "temp"
      (610800 'move' call_tmp[610797](55104 call x[55079] dim[55087]))
      unknown call_tmp[610802] "expr temp" "maybe param" "maybe type" "temp"
      (610805 'move' call_tmp[610802](55107 call _toFollower call_tmp[610797] leaderIndex[55084]))
      unknown call_tmp[610807] "expr temp" "maybe param" "maybe type" "temp"
      (610810 'move' call_tmp[610807](55108 call _build_tuple call_tmp[610802]))
      (507711 'move' ret[507706](507710 'deref' call_tmp[610807]))
      gotoReturn _end__toFollowerZipInternal[507704] _end__toFollowerZipInternal[507704]
    }
    {
      unknown call_tmp[610812] "expr temp" "maybe param" "maybe type" "temp"
      (610815 'move' call_tmp[610812](55116 call x[55079] dim[55087]))
      unknown call_tmp[610817] "expr temp" "maybe param" "maybe type" "temp"
      (610820 'move' call_tmp[610817](55119 call _toFollower call_tmp[610812] leaderIndex[55084]))
      unknown call_tmp[610822] "expr temp" "maybe param" "maybe type" "temp"
      (610825 'move' call_tmp[610822](55126 call + dim[55087] 1))
      unknown call_tmp[610827] "expr temp" "maybe param" "maybe type" "temp"
      (610830 'move' call_tmp[610827](55128 call _toFollowerZipInternal x[55079] leaderIndex[55084] call_tmp[610822]))
      unknown call_tmp[610832] "expr temp" "maybe param" "maybe type" "temp"
      (610835 'move' call_tmp[610832](55131 call _build_tuple call_tmp[610817](55129 'expand_tuple' call_tmp[610827])))
      (507716 'move' ret[507706](507715 'deref' call_tmp[610832]))
      gotoReturn _end__toFollowerZipInternal[507704] _end__toFollowerZipInternal[507704]
    }
    label _end__toFollowerZipInternal[507704]
    (507708 return ret[507706])
  }
  function _toFastFollower[55150](arg iterator[55147]:_iteratorClass[208](?), arg leaderIndex[55152]:_any[178](?), arg fast[55155]:bool[10]) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507722] "RVV" "temp"
    unknown call_tmp[610837] "expr temp" "maybe param" "maybe type" "temp"
    (610840 'move' call_tmp[610837](55164 'to follower' iterator[55147] leaderIndex[55152] 1))
    unknown call_tmp[610842] "expr temp" "maybe param" "maybe type" "temp"
    (610845 'move' call_tmp[610842](55166 call chpl__autoCopy call_tmp[610837]))
    (507727 'move' ret[507722](507726 'deref' call_tmp[610842]))
    (507724 return ret[507722])
  }
  function _toFastFollower[55178](arg ir[55175]:_iteratorRecord[205](?), arg leaderIndex[55180]:_any[178](?), arg fast[55183]:bool[10]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507731] "RVV" "temp"
    unknown call_tmp[610847] "maybe param" "maybe type" "temp"
    (610850 'move' call_tmp[610847](55189 call _getIterator ir[55175]))
    unknown ic[55190] "dead at end of block" "insert auto destroy" "no copy"
    (540777 'init var' ic[55190] call_tmp[610847])
    (55193 'end of statement')
    unknown call_tmp[610852] "maybe param" "maybe type" "temp"
    (610855 'move' call_tmp[610852](55201 call _toFastFollower ic[55190] leaderIndex[55180](fast = 1)))
    unknown follower[55202] "dead at end of block" "insert auto destroy" "no copy"
    (540779 'init var' follower[55202] call_tmp[610852])
    (55205 'end of statement' ic[55190])
    (55209 call _freeIterator ic[55190])
    (474719 'end of statement' ic[55190])
    (507736 'move' ret[507731](507735 'deref' follower[55202]))
    gotoReturn _end__toFastFollower[507729] _end__toFastFollower[507729]
    (474721 'end of statement' follower[55202])
    label _end__toFastFollower[507729]
    (507733 return ret[507731])
  }
  function _toFastFollower[55220](arg x[55218]:_any[178](?), arg leaderIndex[55222]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507742] "RVV" "temp"
    unknown call_tmp[610857] "expr temp" "maybe param" "maybe type" "temp"
    (610860 'move' call_tmp[610857](55227 call chpl__canHaveFastFollowers x[55218]))
    unknown call_tmp[610862] "expr temp" "maybe param" "maybe type" "temp"
    (610865 'move' call_tmp[610862](55250 call _cond_test call_tmp[610857]))
    if call_tmp[610862]
    {
      unknown call_tmp[610867] "expr temp" "maybe param" "maybe type" "temp"
      (610870 'move' call_tmp[610867](55232 call _getIterator x[55218]))
      unknown call_tmp[610872] "expr temp" "maybe param" "maybe type" "temp"
      (610875 'move' call_tmp[610872](55237 call _toFastFollower call_tmp[610867] leaderIndex[55222](fast = 1)))
      (507747 'move' ret[507742](507746 'deref' call_tmp[610872]))
      gotoReturn _end__toFastFollower[507740] _end__toFastFollower[507740]
    }
    {
      unknown call_tmp[610877] "expr temp" "maybe param" "maybe type" "temp"
      (610880 'move' call_tmp[610877](55244 call _getIterator x[55218]))
      unknown call_tmp[610882] "expr temp" "maybe param" "maybe type" "temp"
      (610885 'move' call_tmp[610882](55247 call _toFollower call_tmp[610877] leaderIndex[55222]))
      (507752 'move' ret[507742](507751 'deref' call_tmp[610882]))
      gotoReturn _end__toFastFollower[507740] _end__toFastFollower[507740]
    }
    label _end__toFastFollower[507740]
    (507744 return ret[507742])
  }
  function _toFastFollowerZip[55263](arg x[55261]:_any[178](?), arg leaderIndex[55265]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507758] "RVV" "temp"
    unknown call_tmp[610887] "expr temp" "maybe param" "maybe type" "temp"
    (610890 'move' call_tmp[610887](55271 call _toFastFollower x[55261] leaderIndex[55265]))
    (507763 'move' ret[507758](507762 'deref' call_tmp[610887]))
    (507760 return ret[507758])
  }
  function _toFastFollowerZip[55283](arg x[55280]:_tuple[56199](?), arg leaderIndex[55285]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507767] "RVV" "temp"
    unknown call_tmp[610892] "expr temp" "maybe param" "maybe type" "temp"
    (610895 'move' call_tmp[610892](55292 call _toFastFollowerZip x[55280] leaderIndex[55285] 0))
    (507772 'move' ret[507767](507771 'deref' call_tmp[610892]))
    (507769 return ret[507767])
  }
  function _toFastFollowerZip[55304](arg x[55301]:_tuple[56199](?), arg leaderIndex[55306]:_any[178](?), param arg dim[55309]:int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507776] "RVV" "temp"
    unknown call_tmp[610899] "expr temp" "maybe param" "maybe type" "temp"
    (610902 'move' call_tmp[610899](55314 call size _mt[243] x[55301]))
    unknown call_tmp[610904] "expr temp" "maybe param" "maybe type" "temp"
    (610907 'move' call_tmp[610904](55318 call - call_tmp[610899] 2))
    unknown call_tmp[610909] "expr temp" "maybe param" "maybe type" "temp"
    (610912 'move' call_tmp[610909](55320 call == dim[55309] call_tmp[610904]))
    unknown call_tmp[610914] "expr temp" "maybe param" "maybe type" "temp"
    (610917 'move' call_tmp[610914](55369 call _cond_test call_tmp[610909]))
    if call_tmp[610914]
    {
      unknown call_tmp[610919] "expr temp" "maybe param" "maybe type" "temp"
      (610922 'move' call_tmp[610919](55326 call x[55301] dim[55309]))
      unknown call_tmp[610924] "expr temp" "maybe param" "maybe type" "temp"
      (610927 'move' call_tmp[610924](55329 call _toFastFollowerZip call_tmp[610919] leaderIndex[55306]))
      unknown call_tmp[610929] "expr temp" "maybe param" "maybe type" "temp"
      (610932 'move' call_tmp[610929](55334 call + dim[55309] 1))
      unknown call_tmp[610934] "expr temp" "maybe param" "maybe type" "temp"
      (610937 'move' call_tmp[610934](55337 call x[55301] call_tmp[610929]))
      unknown call_tmp[610939] "expr temp" "maybe param" "maybe type" "temp"
      (610942 'move' call_tmp[610939](55340 call _toFastFollowerZip call_tmp[610934] leaderIndex[55306]))
      unknown call_tmp[610944] "expr temp" "maybe param" "maybe type" "temp"
      (610947 'move' call_tmp[610944](55342 call _build_tuple call_tmp[610924] call_tmp[610939]))
      (507781 'move' ret[507776](507780 'deref' call_tmp[610944]))
      gotoReturn _end__toFastFollowerZip[507774] _end__toFastFollowerZip[507774]
    }
    {
      unknown call_tmp[610949] "expr temp" "maybe param" "maybe type" "temp"
      (610952 'move' call_tmp[610949](55350 call x[55301] dim[55309]))
      unknown call_tmp[610954] "expr temp" "maybe param" "maybe type" "temp"
      (610957 'move' call_tmp[610954](55353 call _toFastFollowerZip call_tmp[610949] leaderIndex[55306]))
      unknown call_tmp[610959] "expr temp" "maybe param" "maybe type" "temp"
      (610962 'move' call_tmp[610959](55360 call + dim[55309] 1))
      unknown call_tmp[610964] "expr temp" "maybe param" "maybe type" "temp"
      (610967 'move' call_tmp[610964](55362 call _toFastFollowerZip x[55301] leaderIndex[55306] call_tmp[610959]))
      unknown call_tmp[610969] "expr temp" "maybe param" "maybe type" "temp"
      (610972 'move' call_tmp[610969](55365 call _build_tuple call_tmp[610954](55363 'expand_tuple' call_tmp[610964])))
      (507786 'move' ret[507776](507785 'deref' call_tmp[610969]))
      gotoReturn _end__toFastFollowerZip[507774] _end__toFastFollowerZip[507774]
    }
    label _end__toFastFollowerZip[507774]
    (507778 return ret[507776])
  }
  function singleValIter[55384](arg iterables[55381]:_tuple[56199](?)) param : _unknown[51] "no doc"
  {
    unknown ret[507792] "RVV" "param" "temp"
    unknown tmp[418647] "maybe param" "temp"
    unknown call_tmp[610976] "expr temp" "maybe param" "maybe type" "temp"
    (610979 'move' call_tmp[610976](55387 call size _mt[243] iterables[55381]))
    (418658 'move' tmp[418647](55391 call == call_tmp[610976] 1))
    unknown call_tmp[610981] "expr temp" "maybe param" "maybe type" "temp"
    (610984 'move' call_tmp[610981](418660 call _cond_invalid tmp[418647]))
    if call_tmp[610981]
    {
      (418663 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554637] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554638] "maybe param" "temp"
    unknown call_tmp[610986] "expr temp" "maybe param" "maybe type" "temp"
    (610989 'move' call_tmp[610986](418648 call isTrue tmp[418647]))
    (554643 'move' tmp[554638](554641 call _cond_test call_tmp[610986]))
    if tmp[554638]
    {
      unknown tmp[554645] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610991] "expr temp" "maybe param" "maybe type" "temp"
      (610994 'move' call_tmp[610991](55398 call iterables[55381] 0))
      unknown call_tmp[610996] "expr temp" "maybe param" "maybe type" "temp"
      (610999 'move' call_tmp[610996](55400 call _getIterator call_tmp[610991]))
      unknown call_tmp[611001] "expr temp" "maybe param" "maybe type" "temp"
      (611004 'move' call_tmp[611001](55402 call isRefIter call_tmp[610996]))
      unknown call_tmp[611006] "expr temp" "maybe param" "maybe type" "temp"
      (611009 'move' call_tmp[611006](55403 call ! call_tmp[611001]))
      (554647 'move' tmp[554645](418651 call isTrue call_tmp[611006]))
      (554652 'move' tmp[554637](554649 '_paramFoldLogical' tmp[554638] tmp[554645]))
    }
    {
      (554657 'move' tmp[554637](554654 '_paramFoldLogical' tmp[554638] 0))
    }
    (507797 'move' ret[507792](507796 'deref' tmp[554637]))
    (507794 return ret[507792])
  }
  function singleRefIter[55418](arg iterables[55415]:_tuple[56199](?)) param : _unknown[51] "no doc"
  {
    unknown ret[507801] "RVV" "param" "temp"
    unknown tmp[418668] "maybe param" "temp"
    unknown call_tmp[611013] "expr temp" "maybe param" "maybe type" "temp"
    (611016 'move' call_tmp[611013](55421 call size _mt[243] iterables[55415]))
    (418679 'move' tmp[418668](55425 call == call_tmp[611013] 1))
    unknown call_tmp[611018] "expr temp" "maybe param" "maybe type" "temp"
    (611021 'move' call_tmp[611018](418681 call _cond_invalid tmp[418668]))
    if call_tmp[611018]
    {
      (418684 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554664] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554665] "maybe param" "temp"
    unknown call_tmp[611023] "expr temp" "maybe param" "maybe type" "temp"
    (611026 'move' call_tmp[611023](418669 call isTrue tmp[418668]))
    (554670 'move' tmp[554665](554668 call _cond_test call_tmp[611023]))
    if tmp[554665]
    {
      unknown tmp[554672] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611028] "expr temp" "maybe param" "maybe type" "temp"
      (611031 'move' call_tmp[611028](55432 call iterables[55415] 0))
      unknown call_tmp[611033] "expr temp" "maybe param" "maybe type" "temp"
      (611036 'move' call_tmp[611033](55434 call _getIterator call_tmp[611028]))
      unknown call_tmp[611038] "expr temp" "maybe param" "maybe type" "temp"
      (611041 'move' call_tmp[611038](55436 call isRefIter call_tmp[611033]))
      (554674 'move' tmp[554672](418672 call isTrue call_tmp[611038]))
      (554679 'move' tmp[554664](554676 '_paramFoldLogical' tmp[554665] tmp[554672]))
    }
    {
      (554684 'move' tmp[554664](554681 '_paramFoldLogical' tmp[554665] 0))
    }
    (507806 'move' ret[507801](507805 'deref' tmp[554664]))
    (507803 return ret[507801])
  }
  function vectorizeOnly[55450](arg iterables[55447]:_any[178](?) ...) : _unknown[51] "iterator fn" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507810] "RVV" "temp"
    {
      unknown _indexOfInterest[55464] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55465] "expr temp" "temp"
      unknown call_tmp[611043] "expr temp" "maybe param" "maybe type" "temp"
      (611046 'move' call_tmp[611043](55460 call iterables[55447] 0))
      (55474 'move' _iterator[55465](55472 call _getIterator call_tmp[611043]))
      Defer
      {
        {
          (55491 call _freeIterator _iterator[55465])
        }
      }
      { scopeless type
        (55480 'move' _indexOfInterest[55464](55477 call iteratorIndex _iterator[55465]))
      }
      ForLoop[55466]
      {
        unknown i[55484] "index var" "insert auto destroy"
        (474734 'end of statement')
        (55486 'move' i[55484] _indexOfInterest[55464])
        (474735 'end of statement' i[55484])
        unknown yret[507814] "YVV" "temp"
        (507817 'move' yret[507814](507816 'deref' i[55484]))
        (507819 yield yret[507814])
        (474737 'end of statement' i[55484])
        label _continueLabel[55469]
        _indexOfInterest[55464]
        _iterator[55465]
      }
      label _breakLabel[55470]
    }
    (507812 return ret[507810])
  }
  where {
    (55455 call singleValIter iterables[55447])
  }
  function vectorizeOnly[55508](arg iterables[55505]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507823] "RVV" "temp"
    {
      unknown _indexOfInterest[55522] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55523] "expr temp" "temp"
      unknown call_tmp[611048] "expr temp" "maybe param" "maybe type" "temp"
      (611051 'move' call_tmp[611048](55518 call iterables[55505] 0))
      (55532 'move' _iterator[55523](55530 call _getIterator call_tmp[611048]))
      Defer
      {
        {
          (55549 call _freeIterator _iterator[55523])
        }
      }
      { scopeless type
        (55538 'move' _indexOfInterest[55522](55535 call iteratorIndex _iterator[55523]))
      }
      ForLoop[55524]
      {
        unknown i[55542] "index var" "insert auto destroy"
        (474740 'end of statement')
        (55544 'move' i[55542] _indexOfInterest[55522])
        (474741 'end of statement' i[55542])
        unknown yret[507827] "YVV" "temp"
        (507830 'move' yret[507827](507829 'addr of' i[55542]))
        (507832 yield yret[507827])
        (474743 'end of statement' i[55542])
        label _continueLabel[55527]
        _indexOfInterest[55522]
        _iterator[55523]
      }
      label _breakLabel[55528]
    }
    (507825 return ret[507823])
  }
  where {
    (55513 call singleRefIter iterables[55505])
  }
  function vectorizeOnly[55567](arg iterables[55564]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507836] "RVV" "temp"
    {
      unknown _indexOfInterest[55581] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55582] "expr temp" "temp"
      (55590 'move' _iterator[55582](55577 call _getIteratorZip iterables[55564]))
      Defer
      {
        {
          (55606 call _freeIterator _iterator[55582])
        }
      }
      { scopeless type
        (55595 'move' _indexOfInterest[55581](55592 call iteratorIndex _iterator[55582]))
      }
      ForLoop[55583]
      {
        unknown i[55599] "index var" "insert auto destroy"
        (474746 'end of statement')
        (55601 'move' i[55599] _indexOfInterest[55581])
        (474747 'end of statement' i[55599])
        unknown yret[507840] "YVV" "temp"
        (507843 'move' yret[507840](507842 'deref' i[55599]))
        (507845 yield yret[507840])
        (474749 'end of statement' i[55599])
        label _continueLabel[55586]
        _indexOfInterest[55581]
        _iterator[55582]
      }
      label _breakLabel[55587]
    }
    (507838 return ret[507836])
  }
  where {
    (55571 call > numiterables[55562] 1)
  }
  function vectorizeOnly[55623](param arg tag[55620]:iterKind[453], arg iterables[55626]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507849] "RVV" "temp"
    {
      unknown _indexOfInterest[55652] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55653] "expr temp" "temp"
      unknown call_tmp[611053] "expr temp" "maybe param" "maybe type" "temp"
      (611056 'move' call_tmp[611053](55648 call iterables[55626] 0))
      (55662 'move' _iterator[55653](55660 call _getIterator call_tmp[611053]))
      Defer
      {
        {
          (55679 call _freeIterator _iterator[55653])
        }
      }
      { scopeless type
        (55668 'move' _indexOfInterest[55652](55665 call iteratorIndex _iterator[55653]))
      }
      ForLoop[55654]
      {
        unknown i[55672] "index var" "insert auto destroy"
        (474752 'end of statement')
        (55674 'move' i[55672] _indexOfInterest[55652])
        (474753 'end of statement' i[55672])
        unknown yret[507853] "YVV" "temp"
        (507856 'move' yret[507853](507855 'deref' i[55672]))
        (507858 yield yret[507853])
        (474755 'end of statement' i[55672])
        label _continueLabel[55657]
        _indexOfInterest[55652]
        _iterator[55653]
      }
      label _breakLabel[55658]
    }
    (507851 return ret[507849])
  }
  where {
    unknown tmp[418689] "maybe param" "temp"
    (418700 'move' tmp[418689](55636 call == tag[55620] standalone[451]))
    unknown call_tmp[611058] "expr temp" "maybe param" "maybe type" "temp"
    (611061 'move' call_tmp[611058](418702 call _cond_invalid tmp[418689]))
    if call_tmp[611058]
    {
      (418705 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554691] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554692] "maybe param" "temp"
    unknown call_tmp[611063] "expr temp" "maybe param" "maybe type" "temp"
    (611066 'move' call_tmp[611063](418690 call isTrue tmp[418689]))
    (554697 'move' tmp[554692](554695 call _cond_test call_tmp[611063]))
    if tmp[554692]
    {
      unknown tmp[554699] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611068] "expr temp" "maybe param" "maybe type" "temp"
      (611071 'move' call_tmp[611068](55641 call singleValIter iterables[55626]))
      (554701 'move' tmp[554699](418693 call isTrue call_tmp[611068]))
      (554706 'move' tmp[554691](554703 '_paramFoldLogical' tmp[554692] tmp[554699]))
    }
    {
      (554711 'move' tmp[554691](554708 '_paramFoldLogical' tmp[554692] 0))
    }
    (748184 call chpl_statementLevelSymbol tmp[554691])
  }
  function vectorizeOnly[55696](param arg tag[55693]:iterKind[453], arg iterables[55699]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507862] "RVV" "temp"
    {
      unknown _indexOfInterest[55723] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55724] "expr temp" "temp"
      unknown call_tmp[611073] "expr temp" "maybe param" "maybe type" "temp"
      (611076 'move' call_tmp[611073](55719 call iterables[55699] 0))
      (55733 'move' _iterator[55724](55731 call _getIterator call_tmp[611073]))
      Defer
      {
        {
          (55750 call _freeIterator _iterator[55724])
        }
      }
      { scopeless type
        (55739 'move' _indexOfInterest[55723](55736 call iteratorIndex _iterator[55724]))
      }
      ForLoop[55725]
      {
        unknown i[55743] "index var" "insert auto destroy"
        (474758 'end of statement')
        (55745 'move' i[55743] _indexOfInterest[55723])
        (474759 'end of statement' i[55743])
        unknown yret[507866] "YVV" "temp"
        (507869 'move' yret[507866](507868 'addr of' i[55743]))
        (507871 yield yret[507866])
        (474761 'end of statement' i[55743])
        label _continueLabel[55728]
        _indexOfInterest[55723]
        _iterator[55724]
      }
      label _breakLabel[55729]
    }
    (507864 return ret[507862])
  }
  where {
    unknown tmp[418710] "maybe param" "temp"
    (418721 'move' tmp[418710](55707 call == tag[55693] standalone[451]))
    unknown call_tmp[611078] "expr temp" "maybe param" "maybe type" "temp"
    (611081 'move' call_tmp[611078](418723 call _cond_invalid tmp[418710]))
    if call_tmp[611078]
    {
      (418726 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554718] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554719] "maybe param" "temp"
    unknown call_tmp[611083] "expr temp" "maybe param" "maybe type" "temp"
    (611086 'move' call_tmp[611083](418711 call isTrue tmp[418710]))
    (554724 'move' tmp[554719](554722 call _cond_test call_tmp[611083]))
    if tmp[554719]
    {
      unknown tmp[554726] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611088] "expr temp" "maybe param" "maybe type" "temp"
      (611091 'move' call_tmp[611088](55712 call singleRefIter iterables[55699]))
      (554728 'move' tmp[554726](418714 call isTrue call_tmp[611088]))
      (554733 'move' tmp[554718](554730 '_paramFoldLogical' tmp[554719] tmp[554726]))
    }
    {
      (554738 'move' tmp[554718](554735 '_paramFoldLogical' tmp[554719] 0))
    }
    (748186 call chpl_statementLevelSymbol tmp[554718])
  }
  function vectorizeOnly[55767](param arg tag[55764]:iterKind[453], arg iterables[55771]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507875] "RVV" "temp"
    {
      unknown _indexOfInterest[55795] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55796] "expr temp" "temp"
      (55804 'move' _iterator[55796](55791 call _getIteratorZip iterables[55771]))
      Defer
      {
        {
          (55820 call _freeIterator _iterator[55796])
        }
      }
      { scopeless type
        (55809 'move' _indexOfInterest[55795](55806 call iteratorIndex _iterator[55796]))
      }
      ForLoop[55797]
      {
        unknown i[55813] "index var" "insert auto destroy"
        (474764 'end of statement')
        (55815 'move' i[55813] _indexOfInterest[55795])
        (474765 'end of statement' i[55813])
        unknown yret[507879] "YVV" "temp"
        (507882 'move' yret[507879](507881 'deref' i[55813]))
        (507884 yield yret[507879])
        (474767 'end of statement' i[55813])
        label _continueLabel[55800]
        _indexOfInterest[55795]
        _iterator[55796]
      }
      label _breakLabel[55801]
    }
    (507877 return ret[507875])
  }
  where {
    unknown tmp[418731] "maybe param" "temp"
    (418742 'move' tmp[418731](55779 call == tag[55764] standalone[451]))
    unknown call_tmp[611093] "expr temp" "maybe param" "maybe type" "temp"
    (611096 'move' call_tmp[611093](418744 call _cond_invalid tmp[418731]))
    if call_tmp[611093]
    {
      (418747 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554745] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554746] "maybe param" "temp"
    unknown call_tmp[611098] "expr temp" "maybe param" "maybe type" "temp"
    (611101 'move' call_tmp[611098](418732 call isTrue tmp[418731]))
    (554751 'move' tmp[554746](554749 call _cond_test call_tmp[611098]))
    if tmp[554746]
    {
      unknown tmp[554753] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611103] "expr temp" "maybe param" "maybe type" "temp"
      (611106 'move' call_tmp[611103](55783 call > numiterables[55769] 1))
      (554755 'move' tmp[554753](418735 call isTrue call_tmp[611103]))
      (554760 'move' tmp[554745](554757 '_paramFoldLogical' tmp[554746] tmp[554753]))
    }
    {
      (554765 'move' tmp[554745](554762 '_paramFoldLogical' tmp[554746] 0))
    }
    (748188 call chpl_statementLevelSymbol tmp[554745])
  }
  function vectorizeOnly[55837](param arg tag[55834]:iterKind[453], arg iterables[55840]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507888] "RVV" "temp"
    unknown yret[507892] "YVV" "temp"
    unknown call_tmp[611108] "expr temp" "maybe param" "maybe type" "temp"
    (611111 'move' call_tmp[611108](55861 call iterables[55840] 0))
    (507895 'move' yret[507892](507894 'deref' call_tmp[611108]))
    (507897 yield yret[507892])
    (507890 return ret[507888])
  }
  where {
    unknown tmp[418752] "maybe param" "temp"
    (418763 'move' tmp[418752](55850 call == tag[55834] leader[447]))
    unknown call_tmp[611113] "expr temp" "maybe param" "maybe type" "temp"
    (611116 'move' call_tmp[611113](418765 call _cond_invalid tmp[418752]))
    if call_tmp[611113]
    {
      (418768 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554772] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554773] "maybe param" "temp"
    unknown call_tmp[611118] "expr temp" "maybe param" "maybe type" "temp"
    (611121 'move' call_tmp[611118](418753 call isTrue tmp[418752]))
    (554778 'move' tmp[554773](554776 call _cond_test call_tmp[611118]))
    if tmp[554773]
    {
      unknown tmp[554780] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611123] "expr temp" "maybe param" "maybe type" "temp"
      (611126 'move' call_tmp[611123](55855 call singleValIter iterables[55840]))
      (554782 'move' tmp[554780](418756 call isTrue call_tmp[611123]))
      (554787 'move' tmp[554772](554784 '_paramFoldLogical' tmp[554773] tmp[554780]))
    }
    {
      (554792 'move' tmp[554772](554789 '_paramFoldLogical' tmp[554773] 0))
    }
    (748190 call chpl_statementLevelSymbol tmp[554772])
  }
  function vectorizeOnly[55874](param arg tag[55871]:iterKind[453], arg iterables[55877]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507901] "RVV" "temp"
    unknown yret[507905] "YVV" "temp"
    unknown call_tmp[611128] "expr temp" "maybe param" "maybe type" "temp"
    (611131 'move' call_tmp[611128](55896 call iterables[55877] 0))
    (507908 'move' yret[507905](507907 'addr of' call_tmp[611128]))
    (507910 yield yret[507905])
    (507903 return ret[507901])
  }
  where {
    unknown tmp[418773] "maybe param" "temp"
    (418784 'move' tmp[418773](55885 call == tag[55871] leader[447]))
    unknown call_tmp[611133] "expr temp" "maybe param" "maybe type" "temp"
    (611136 'move' call_tmp[611133](418786 call _cond_invalid tmp[418773]))
    if call_tmp[611133]
    {
      (418789 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554799] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554800] "maybe param" "temp"
    unknown call_tmp[611138] "expr temp" "maybe param" "maybe type" "temp"
    (611141 'move' call_tmp[611138](418774 call isTrue tmp[418773]))
    (554805 'move' tmp[554800](554803 call _cond_test call_tmp[611138]))
    if tmp[554800]
    {
      unknown tmp[554807] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611143] "expr temp" "maybe param" "maybe type" "temp"
      (611146 'move' call_tmp[611143](55890 call singleRefIter iterables[55877]))
      (554809 'move' tmp[554807](418777 call isTrue call_tmp[611143]))
      (554814 'move' tmp[554799](554811 '_paramFoldLogical' tmp[554800] tmp[554807]))
    }
    {
      (554819 'move' tmp[554799](554816 '_paramFoldLogical' tmp[554800] 0))
    }
    (748192 call chpl_statementLevelSymbol tmp[554799])
  }
  function vectorizeOnly[55909](param arg tag[55906]:iterKind[453], arg iterables[55913]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507914] "RVV" "temp"
    unknown yret[507918] "YVV" "temp"
    (507921 'move' yret[507918](507920 'deref' iterables[55913]))
    (507923 yield yret[507918])
    (507916 return ret[507914])
  }
  where {
    unknown tmp[418794] "maybe param" "temp"
    (418805 'move' tmp[418794](55921 call == tag[55906] leader[447]))
    unknown call_tmp[611148] "expr temp" "maybe param" "maybe type" "temp"
    (611151 'move' call_tmp[611148](418807 call _cond_invalid tmp[418794]))
    if call_tmp[611148]
    {
      (418810 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554826] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554827] "maybe param" "temp"
    unknown call_tmp[611153] "expr temp" "maybe param" "maybe type" "temp"
    (611156 'move' call_tmp[611153](418795 call isTrue tmp[418794]))
    (554832 'move' tmp[554827](554830 call _cond_test call_tmp[611153]))
    if tmp[554827]
    {
      unknown tmp[554834] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611158] "expr temp" "maybe param" "maybe type" "temp"
      (611161 'move' call_tmp[611158](55925 call > numiterables[55911] 1))
      (554836 'move' tmp[554834](418798 call isTrue call_tmp[611158]))
      (554841 'move' tmp[554826](554838 '_paramFoldLogical' tmp[554827] tmp[554834]))
    }
    {
      (554846 'move' tmp[554826](554843 '_paramFoldLogical' tmp[554827] 0))
    }
    (748194 call chpl_statementLevelSymbol tmp[554826])
  }
  function vectorizeOnly[55942](param arg tag[55939]:iterKind[453], arg followThis[55944]:_any[178](?), arg iterables[55947]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507927] "RVV" "temp"
    {
      unknown _indexOfInterest[55973] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55974] "expr temp" "temp"
      unknown call_tmp[611163] "expr temp" "maybe param" "maybe type" "temp"
      (611166 'move' call_tmp[611163](55969 call iterables[55947] 0))
      (55983 'move' _iterator[55974](55981 call _getIterator call_tmp[611163]))
      Defer
      {
        {
          (56000 call _freeIterator _iterator[55974])
        }
      }
      { scopeless type
        (55989 'move' _indexOfInterest[55973](55986 call iteratorIndex _iterator[55974]))
      }
      ForLoop[55975]
      {
        unknown i[55993] "index var" "insert auto destroy"
        (474773 'end of statement')
        (55995 'move' i[55993] _indexOfInterest[55973])
        (474774 'end of statement' i[55993])
        unknown yret[507931] "YVV" "temp"
        (507934 'move' yret[507931](507933 'deref' i[55993]))
        (507936 yield yret[507931])
        (474776 'end of statement' i[55993])
        label _continueLabel[55978]
        _indexOfInterest[55973]
        _iterator[55974]
      }
      label _breakLabel[55979]
    }
    (507929 return ret[507927])
  }
  where {
    unknown tmp[418815] "maybe param" "temp"
    (418826 'move' tmp[418815](55957 call == tag[55939] follower[449]))
    unknown call_tmp[611168] "expr temp" "maybe param" "maybe type" "temp"
    (611171 'move' call_tmp[611168](418828 call _cond_invalid tmp[418815]))
    if call_tmp[611168]
    {
      (418831 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554853] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554854] "maybe param" "temp"
    unknown call_tmp[611173] "expr temp" "maybe param" "maybe type" "temp"
    (611176 'move' call_tmp[611173](418816 call isTrue tmp[418815]))
    (554859 'move' tmp[554854](554857 call _cond_test call_tmp[611173]))
    if tmp[554854]
    {
      unknown tmp[554861] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611178] "expr temp" "maybe param" "maybe type" "temp"
      (611181 'move' call_tmp[611178](55962 call singleValIter iterables[55947]))
      (554863 'move' tmp[554861](418819 call isTrue call_tmp[611178]))
      (554868 'move' tmp[554853](554865 '_paramFoldLogical' tmp[554854] tmp[554861]))
    }
    {
      (554873 'move' tmp[554853](554870 '_paramFoldLogical' tmp[554854] 0))
    }
    (748196 call chpl_statementLevelSymbol tmp[554853])
  }
  function vectorizeOnly[56017](param arg tag[56014]:iterKind[453], arg followThis[56019]:_any[178](?), arg iterables[56022]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507940] "RVV" "temp"
    {
      unknown _indexOfInterest[56046] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56047] "expr temp" "temp"
      unknown call_tmp[611183] "expr temp" "maybe param" "maybe type" "temp"
      (611186 'move' call_tmp[611183](56042 call iterables[56022] 0))
      (56056 'move' _iterator[56047](56054 call _getIterator call_tmp[611183]))
      Defer
      {
        {
          (56073 call _freeIterator _iterator[56047])
        }
      }
      { scopeless type
        (56062 'move' _indexOfInterest[56046](56059 call iteratorIndex _iterator[56047]))
      }
      ForLoop[56048]
      {
        unknown i[56066] "index var" "insert auto destroy"
        (474779 'end of statement')
        (56068 'move' i[56066] _indexOfInterest[56046])
        (474780 'end of statement' i[56066])
        unknown yret[507944] "YVV" "temp"
        (507947 'move' yret[507944](507946 'addr of' i[56066]))
        (507949 yield yret[507944])
        (474782 'end of statement' i[56066])
        label _continueLabel[56051]
        _indexOfInterest[56046]
        _iterator[56047]
      }
      label _breakLabel[56052]
    }
    (507942 return ret[507940])
  }
  where {
    unknown tmp[418836] "maybe param" "temp"
    (418847 'move' tmp[418836](56030 call == tag[56014] follower[449]))
    unknown call_tmp[611188] "expr temp" "maybe param" "maybe type" "temp"
    (611191 'move' call_tmp[611188](418849 call _cond_invalid tmp[418836]))
    if call_tmp[611188]
    {
      (418852 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554880] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554881] "maybe param" "temp"
    unknown call_tmp[611193] "expr temp" "maybe param" "maybe type" "temp"
    (611196 'move' call_tmp[611193](418837 call isTrue tmp[418836]))
    (554886 'move' tmp[554881](554884 call _cond_test call_tmp[611193]))
    if tmp[554881]
    {
      unknown tmp[554888] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611198] "expr temp" "maybe param" "maybe type" "temp"
      (611201 'move' call_tmp[611198](56035 call singleRefIter iterables[56022]))
      (554890 'move' tmp[554888](418840 call isTrue call_tmp[611198]))
      (554895 'move' tmp[554880](554892 '_paramFoldLogical' tmp[554881] tmp[554888]))
    }
    {
      (554900 'move' tmp[554880](554897 '_paramFoldLogical' tmp[554881] 0))
    }
    (748198 call chpl_statementLevelSymbol tmp[554880])
  }
  function vectorizeOnly[56090](param arg tag[56087]:iterKind[453], arg followThis[56092]:_any[178](?), arg iterables[56096]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507953] "RVV" "temp"
    {
      unknown _indexOfInterest[56120] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56121] "expr temp" "temp"
      (56129 'move' _iterator[56121](56116 call _getIteratorZip iterables[56096]))
      Defer
      {
        {
          (56145 call _freeIterator _iterator[56121])
        }
      }
      { scopeless type
        (56134 'move' _indexOfInterest[56120](56131 call iteratorIndex _iterator[56121]))
      }
      ForLoop[56122]
      {
        unknown i[56138] "index var" "insert auto destroy"
        (474785 'end of statement')
        (56140 'move' i[56138] _indexOfInterest[56120])
        (474786 'end of statement' i[56138])
        unknown yret[507957] "YVV" "temp"
        (507960 'move' yret[507957](507959 'deref' i[56138]))
        (507962 yield yret[507957])
        (474788 'end of statement' i[56138])
        label _continueLabel[56125]
        _indexOfInterest[56120]
        _iterator[56121]
      }
      label _breakLabel[56126]
    }
    (507955 return ret[507953])
  }
  where {
    unknown tmp[418857] "maybe param" "temp"
    (418868 'move' tmp[418857](56104 call == tag[56087] follower[449]))
    unknown call_tmp[611203] "expr temp" "maybe param" "maybe type" "temp"
    (611206 'move' call_tmp[611203](418870 call _cond_invalid tmp[418857]))
    if call_tmp[611203]
    {
      (418873 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554907] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554908] "maybe param" "temp"
    unknown call_tmp[611208] "expr temp" "maybe param" "maybe type" "temp"
    (611211 'move' call_tmp[611208](418858 call isTrue tmp[418857]))
    (554913 'move' tmp[554908](554911 call _cond_test call_tmp[611208]))
    if tmp[554908]
    {
      unknown tmp[554915] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611213] "expr temp" "maybe param" "maybe type" "temp"
      (611216 'move' call_tmp[611213](56108 call > numiterables[56094] 1))
      (554917 'move' tmp[554915](418861 call isTrue call_tmp[611213]))
      (554922 'move' tmp[554907](554919 '_paramFoldLogical' tmp[554908] tmp[554915]))
    }
    {
      (554927 'move' tmp[554907](554924 '_paramFoldLogical' tmp[554908] 0))
    }
    (748200 call chpl_statementLevelSymbol tmp[554907])
  }
  (355043 'used modules list'(52120 'use' ChapelStandard[20264])(52124 'use' Reflection[224882]))
}