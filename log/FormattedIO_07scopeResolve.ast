AST dump for FormattedIO after pass scopeResolve.
Module use list: ChapelStandard IO SysCTypes SysBasic SysError Regexp 

{
  function _toIntegral[251201](arg x[251198] :
  unknown t[251196]) : _unknown[51] "inline" "private"
  {
    (251212 return(251210 call _build_tuple x[251198] 1))
  }
  where {
    (251206 call isIntegralType t[251196])
  }
  function _toIntegral[251225](arg x[251222] :
  unknown t[251220]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251244](251242 call _build_tuple int(64)[13] bool[10])
    (251247 'end of statement')
    if(251274 call _cond_test(251252 call isAbstractEnumType t[251220]))
    {
      (251259 call = ret[251244](251257 call _build_tuple 0 0))
    }
    {
      (251271 call = ret[251244](251269 call _build_tuple(251265 call _cast int(64)[13] x[251222]) 1))
    }
    (251281 return ret[251244])
  }
  where {
    (251237 call &&(251230 call _isIoPrimitiveType t[251220])(251235 call !(251234 call isIntegralType t[251220])))
  }
  function _toIntegral[251293](arg x[251290] :
  unknown t[251288]) : _unknown[51] "inline" "private"
  {
    (251306 return(251304 call _build_tuple 0 0))
  }
  where {
    (251299 call !(251298 call _isIoPrimitiveType t[251288]))
  }
  function _toSigned[251319](arg x[251316] :
  unknown t[251314]) : _unknown[51] "inline" "private"
  {
    (251330 return(251328 call _build_tuple x[251316] 1))
  }
  where {
    (251324 call isIntType t[251314])
  }
  function _toSigned[251345](arg x[251342] :
  (251341 call uint(64)[115] 8)) : _unknown[51] "inline" "private"
  {
    (251358 return(251356 call _build_tuple(251352 call _cast(251351 call int(64)[13] 8) x[251342]) 1))
  }
  function _toSigned[251372](arg x[251369] :
  (251368 call uint(64)[115] 16)) : _unknown[51] "inline" "private"
  {
    (251385 return(251383 call _build_tuple(251379 call _cast(251378 call int(64)[13] 16) x[251369]) 1))
  }
  function _toSigned[251399](arg x[251396] :
  (251395 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {
    (251412 return(251410 call _build_tuple(251406 call _cast(251405 call int(64)[13] 32) x[251396]) 1))
  }
  function _toSigned[251426](arg x[251423] :
  (251422 call uint(64)[115] 64)) : _unknown[51] "inline" "private"
  {
    (251439 return(251437 call _build_tuple(251433 call _cast(251432 call int(64)[13] 64) x[251423]) 1))
  }
  function _toSigned[251451](arg x[251448] :
  unknown t[251446]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251470](251468 call _build_tuple int(64)[13] bool[10])
    (251473 'end of statement')
    if(251500 call _cond_test(251478 call isAbstractEnumType t[251446]))
    {
      (251485 call = ret[251470](251483 call _build_tuple 0 0))
    }
    {
      (251497 call = ret[251470](251495 call _build_tuple(251491 call _cast int(64)[13] x[251448]) 1))
    }
    (251507 return ret[251470])
  }
  where {
    (251463 call &&(251456 call _isIoPrimitiveType t[251446])(251461 call !(251460 call isIntegralType t[251446])))
  }
  function _toSigned[251519](arg x[251516] :
  unknown t[251514]) : _unknown[51] "inline" "private"
  {
    (251535 return(251533 call _build_tuple(251529 call _cast int(64)[13] 0) 0))
  }
  where {
    (251525 call !(251524 call _isIoPrimitiveType t[251514]))
  }
  function _toUnsigned[251548](arg x[251545] :
  unknown t[251543]) : _unknown[51] "inline" "private"
  {
    (251559 return(251557 call _build_tuple x[251545] 1))
  }
  where {
    (251553 call isUintType t[251543])
  }
  function _toUnsigned[251574](arg x[251571] :
  (251570 call int(64)[13] 8)) : _unknown[51] "inline" "private"
  {
    (251587 return(251585 call _build_tuple(251581 call _cast(251580 call uint(64)[115] 8) x[251571]) 1))
  }
  function _toUnsigned[251601](arg x[251598] :
  (251597 call int(64)[13] 16)) : _unknown[51] "inline" "private"
  {
    (251614 return(251612 call _build_tuple(251608 call _cast(251607 call uint(64)[115] 16) x[251598]) 1))
  }
  function _toUnsigned[251628](arg x[251625] :
  (251624 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    (251641 return(251639 call _build_tuple(251635 call _cast(251634 call uint(64)[115] 32) x[251625]) 1))
  }
  function _toUnsigned[251655](arg x[251652] :
  (251651 call int(64)[13] 64)) : _unknown[51] "inline" "private"
  {
    (251668 return(251666 call _build_tuple(251662 call _cast(251661 call uint(64)[115] 64) x[251652]) 1))
  }
  function _toUnsigned[251680](arg x[251677] :
  unknown t[251675]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251699](251697 call _build_tuple uint(64)[115] bool[10])
    (251702 'end of statement')
    if(251732 call _cond_test(251707 call isAbstractEnumType t[251675]))
    {
      (251717 call = ret[251699](251715 call _build_tuple(251711 call _cast uint(64)[115] 0) 0))
    }
    {
      (251729 call = ret[251699](251727 call _build_tuple(251723 call _cast uint(64)[115] x[251677]) 1))
    }
    (251739 return ret[251699])
  }
  where {
    (251692 call &&(251685 call _isIoPrimitiveType t[251675])(251690 call !(251689 call isIntegralType t[251675])))
  }
  function _toUnsigned[251751](arg x[251748] :
  unknown t[251746]) : _unknown[51] "inline" "private"
  {
    (251767 return(251765 call _build_tuple(251761 call _cast uint(64)[115] 0) 0))
  }
  where {
    (251757 call !(251756 call _isIoPrimitiveType t[251746]))
  }
  function _toReal[251780](arg x[251777] :
  unknown t[251775]) : _unknown[51] "inline" "private"
  {
    (251791 return(251789 call _build_tuple x[251777] 1))
  }
  where {
    (251785 call isRealType t[251775])
  }
  function _toReal[251804](arg x[251801] :
  unknown t[251799]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251823](251821 call _build_tuple real(64)[16] bool[10])
    (251826 'end of statement')
    if(251853 call _cond_test(251831 call isAbstractEnumType t[251799]))
    {
      (251838 call = ret[251823](251836 call _build_tuple 0.0 0))
    }
    {
      (251850 call = ret[251823](251848 call _build_tuple(251844 call _cast real(64)[16] x[251801]) 1))
    }
    (251860 return ret[251823])
  }
  where {
    (251816 call &&(251809 call _isIoPrimitiveType t[251799])(251814 call !(251813 call isRealType t[251799])))
  }
  function _toReal[251872](arg x[251869] :
  unknown t[251867]) : _unknown[51] "inline" "private"
  {
    (251885 return(251883 call _build_tuple 0.0 0))
  }
  where {
    (251878 call !(251877 call _isIoPrimitiveType t[251867]))
  }
  function _toImag[251898](arg x[251895] :
  unknown t[251893]) : _unknown[51] "inline" "private"
  {
    (251909 return(251907 call _build_tuple x[251895] 1))
  }
  where {
    (251903 call isImagType t[251893])
  }
  function _toImag[251922](arg x[251919] :
  unknown t[251917]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251941](251939 call _build_tuple imag(64)[130] bool[10])
    (251944 'end of statement')
    if(251971 call _cond_test(251949 call isAbstractEnumType t[251917]))
    {
      (251956 call = ret[251941](251954 call _build_tuple 0.0i 0))
    }
    {
      (251968 call = ret[251941](251966 call _build_tuple(251962 call _cast imag(64)[130] x[251919]) 1))
    }
    (251978 return ret[251941])
  }
  where {
    (251934 call &&(251927 call _isIoPrimitiveType t[251917])(251932 call !(251931 call isImagType t[251917])))
  }
  function _toImag[251990](arg x[251987] :
  unknown t[251985]) : _unknown[51] "inline" "private"
  {
    (252003 return(252001 call _build_tuple 0.0i 0))
  }
  where {
    (251996 call !(251995 call _isIoPrimitiveType t[251985]))
  }
  function _toComplex[252016](arg x[252013] :
  unknown t[252011]) : _unknown[51] "inline" "private"
  {
    (252027 return(252025 call _build_tuple x[252013] 1))
  }
  where {
    (252021 call isComplexType t[252011])
  }
  function _toComplex[252040](arg x[252037] :
  unknown t[252035]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[252059](252057 call _build_tuple complex(128)[140] bool[10])
    (252062 'end of statement')
    if(252092 call _cond_test(252067 call isAbstractEnumType t[252035]))
    {
      (252077 call = ret[252059](252075 call _build_tuple(252071 call + 0.0 0.0i) 0))
    }
    {
      (252089 call = ret[252059](252087 call _build_tuple(252083 call _cast complex(128)[140] x[252037]) 1))
    }
    (252099 return ret[252059])
  }
  where {
    (252052 call &&(252045 call _isIoPrimitiveType t[252035])(252050 call !(252049 call isComplexType t[252035])))
  }
  function _toComplex[252111](arg x[252108] :
  unknown t[252106]) : _unknown[51] "inline" "private"
  {
    (252127 return(252125 call _build_tuple(252121 call + 0.0 0.0i) 0))
  }
  where {
    (252117 call !(252116 call _isIoPrimitiveType t[252106]))
  }
  function _toRealOrComplex[252140](arg x[252137] :
  unknown t[252135]) : _unknown[51] "inline" "private"
  {
    (252151 return(252149 call _build_tuple x[252137] 1))
  }
  where {
    (252145 call isComplexType t[252135])
  }
  function _toRealOrComplex[252164](arg x[252161] :
  unknown t[252159]) : _unknown[51] "inline" "private"
  {
    (252175 return(252173 call _build_tuple x[252161] 1))
  }
  where {
    (252169 call isFloatType t[252159])
  }
  function _toRealOrComplex[252188](arg x[252185] :
  unknown t[252183]) : _unknown[51] "inline" "private"
  {
    (252218 return(252216 call _build_tuple(252212 call _cast real(64)[16] x[252185]) 1))
  }
  where {
    (252208 call &&(252200 call &&(252193 call _isIoPrimitiveType t[252183])(252198 call !(252197 call isComplexType t[252183])))(252206 call !(252205 call isFloatType t[252183])))
  }
  function _toRealOrComplex[252231](arg x[252228] :
  unknown t[252226]) : _unknown[51] "inline" "private"
  {
    (252244 return(252242 call _build_tuple 0.0 0))
  }
  where {
    (252237 call !(252236 call _isIoPrimitiveType t[252226]))
  }
  function _toNumeric[252257](arg x[252254] :
  unknown t[252252]) : _unknown[51] "inline" "private"
  {
    (252268 return(252266 call _build_tuple x[252254] 1))
  }
  where {
    (252262 call isNumericType t[252252])
  }
  function _toNumeric[252281](arg x[252278] :
  unknown t[252276]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[252300](252298 call _build_tuple int(64)[13] bool[10])
    (252303 'end of statement')
    if(252330 call _cond_test(252308 call isAbstractEnumType t[252276]))
    {
      (252315 call = ret[252300](252313 call _build_tuple 0 0))
    }
    {
      (252327 call = ret[252300](252325 call _build_tuple(252321 call _cast int(64)[13] x[252278]) 1))
    }
    (252337 return ret[252300])
  }
  where {
    (252293 call &&(252286 call _isIoPrimitiveType t[252276])(252291 call !(252290 call isNumericType t[252276])))
  }
  function _toNumeric[252349](arg x[252346] :
  unknown t[252344]) : _unknown[51] "inline" "private"
  {
    (252362 return(252360 call _build_tuple 0 0))
  }
  where {
    (252355 call !(252354 call _isIoPrimitiveType t[252344]))
  }
  function _toBytes[252374](arg x[252371] :
  bytes[24]) : _unknown[51] "inline" "private"
  {
    (252381 return(252379 call _build_tuple x[252371] 1))
  }
  function _toBytes[252392](arg x[252389] :
  string[26]) : _unknown[51] "inline" "private"
  {
    (252402 return(252400 call _build_tuple(252396 call _cast bytes[24] x[252389]) 1))
  }
  function _toBytes[252414](arg x[252411] :
  unknown t[252409]) : _unknown[51] "inline" "private"
  {
    (252440 return(252438 call _build_tuple(252434 call _cast bytes[24] "") 0))
  }
  function _toString[252451](arg x[252448] :
  string[26]) : _unknown[51] "inline" "private"
  {
    (252458 return(252456 call _build_tuple x[252448] 1))
  }
  function _toString[252469](arg x[252466] :
  bytes[24]) : _unknown[51] "inline" "private"
  {
    (252492 return(252490 call _build_tuple "" 0))
  }
  function _toString[252504](arg x[252501] :
  unknown t[252499]) : _unknown[51] "inline" "private"
  {
    (252530 return(252528 call _build_tuple(252524 call _cast string[26] x[252501]) 1))
  }
  where {
    (252520 call &&(252514 call &&(252509 call _isIoPrimitiveType t[252499])(252512 call != t[252499] bytes[24]))(252518 call != t[252499] string[26]))
  }
  function _toString[252543](arg x[252540] :
  unknown t[252538]) : _unknown[51] "inline" "private"
  {
    (252572 return(252570 call _build_tuple "" 0))
  }
  where {
    (252549 call !(252548 call _isIoPrimitiveType t[252538]))
  }
  function _toChar[252585](arg x[252582] :
  unknown t[252580]) : _unknown[51] "inline" "private"
  {
    (252602 return(252600 call _build_tuple(252596 call _cast(252595 call int(64)[13] 32) x[252582]) 1))
  }
  where {
    (252590 call isIntegralType t[252580])
  }
  function _toChar[252615](arg x[252612] :
  unknown t[252610]) : _unknown[51] "inline" "private"
  {
    unknown chr[252625](252624 call int(64)[13] 32)
    (252628 'end of statement')
    unknown nbytes[252631] c_int[20549]
    (252634 'end of statement')
    unknown local_x[252641](252640 call(252636 call . x[252612] c"localize"))
    (252644 'end of statement')
    (252662 call qio_decode_char_buf chr[252625] nbytes[252631](252654 call(252650 call . local_x[252641] c"c_str"))(252660 call _cast ssize_t[20647](252656 call . local_x[252641] c"numBytes")))
    (252669 return(252667 call _build_tuple chr[252625] 1))
  }
  where {
    (252619 call == t[252610] string[26])
  }
  function _toChar[252681](arg x[252678] :
  unknown t[252676]) : _unknown[51] "inline" "private"
  {
    (252706 return(252704 call _build_tuple(252700 call _cast(252699 call int(64)[13] 32) 0) 0))
  }
  where {
    (252693 call !(252691 call ||(252685 call == t[252676] string[26])(252690 call isIntegralType t[252676])))
  }
  function _setIfPrimitive[252719](ref arg lhs[252716] :
  unknown t[252714], arg rhs[252723] :
  unknown t2[252721], arg argi[252727] :
  int(64)[13]) : _unknown[51] "inline" "private"
  {
    unknown empty[252742] t2[252721]
    (252745 'end of statement')
    if(252763 call _cond_test(252749 call == rhs[252723] empty[252742]))
    {
      (252753 call = lhs[252716] 0)
    }
    {
      (252759 call = lhs[252716] 1)
    }
    (252768 return(398375 call ENOERR[223566]))
  }
  where {
    (252739 call &&(252733 call == t[252714] bool[10])(252738 call _isIoPrimitiveType t2[252721]))
  }
  { scopeless type
    syserr[223496]
  }
  function _setIfPrimitive[252781](ref arg lhs[252778] :
  unknown t[252776], arg rhs[252785] :
  unknown t2[252783], arg argi[252789] :
  int(64)[13]) : _unknown[51] "inline" "private"
  {
    Try
    {
      {
        if(252912 call _cond_test(252806 call isAbstractEnumType t[252776]))
        {
          if(252824 call _cond_test(252810 call isStringType t2[252783]))
          {
            (252816 call = lhs[252778](252814 call _cast t[252776] rhs[252785]))
          }
          {
            (252821 return ERANGE[224686])
          }
        }
        {
          if(252908 call _cond_test(252832 call isEnumType t[252776]))
          {
            if(252864 call _cond_test(252841 call ||(252836 call isIntType t2[252783])(252840 call isStringType t2[252783])))
            {
              (252848 call = lhs[252778](252846 call _cast t[252776] rhs[252785]))
            }
            {
              (252860 call = lhs[252778](252858 call _cast t[252776](252855 call _cast int(64)[13] rhs[252785])))
            }
          }
          {
            if(252903 call _cond_test(252877 call &&(252872 call isBytesType t2[252783])(252876 call isStringType t[252776])))
            {
              (252890 call = lhs[252778](252889 call(252881 call . rhs[252785] c"decode") strict[173646]))
            }
            {
              (252899 call = lhs[252778](252897 call _cast t[252776] rhs[252785]))
            }
          }
        }
      }
    }
    Catch
    {
      unknown tmp[354551] "temp"(354554 'current error')
      unknown chpl_anon_error[354557](354562 'new'(354560 call _owned[30](?)(354558 'to non nilable class' tmp[354551])))
      {
        (252920 return ERANGE[224686])
      }
    }
    (252928 return(398402 call ENOERR[223566]))
  }
  where {
    (252801 call &&(252795 call != t[252776] bool[10])(252800 call _isIoPrimitiveType t[252776]))
  }
  { scopeless type
    syserr[223496]
  }
  function _setIfPrimitive[252941](ref arg lhs[252938] :
  unknown t[252936], arg rhs[252943]:_any[178](?), arg argi[252946] :
  int(64)[13]) : _unknown[51] "inline" "private"
  {
    (252960 return(252959 call qio_format_error_arg_mismatch argi[252946]))
  }
  where {
    (252954 call !(252953 call _isIoPrimitiveType t[252936]))
  }
  { scopeless type
    syserr[223496]
  }
  function _setIfChar[252974](ref arg lhs[252971] :
  unknown t[252969], arg rhs[252980] :
  (252979 call int(64)[13] 32)) : _unknown[51] "inline" "private" "no return value for void"
  {
    (252996 call = lhs[252971](252994 call _cast string[26](252988 'new'(252992 call ioChar[238545] rhs[252980]))))
  }
  where {
    (252985 call == t[252969] string[26])
  }
  function _setIfChar[253010](ref arg lhs[253007] :
  unknown t[253005], arg rhs[253016] :
  (253015 call int(64)[13] 32)) : _unknown[51] "inline" "private" "no return value for void"
  {
    (253028 call = lhs[253007](253026 call _cast t[253005] rhs[253016]))
  }
  where {
    (253022 call isIntegralType t[253005])
  }
  function _setIfChar[253042](ref arg lhs[253039] :
  unknown t[253037], arg rhs[253048] :
  (253047 call int(64)[13] 32)) : _unknown[51] "inline" "private" "no return value for void"
  {
  }
  where {
    (253061 call !(253059 call ||(253053 call == t[253037] string[26])(253058 call isIntegralType t[253037])))
  }
  function _toRegexp[253074](arg x[253071] :
  unknown t[253069]) : _unknown[51] "inline" "private"
  {
    (253089 return(253087 call _build_tuple x[253071] 1))
  }
  where {
    (354564 'is_subtype'(253082 call regexp[297029](?) ?[260]) t[253069])
  }
  function _toRegexp[253102](arg x[253099] :
  unknown t[253097]) : _unknown[51] "inline" "private"
  {
    unknown r[253108](253107 call regexp[297029](?) string[26])
    (253111 'end of statement')
    (253118 return(253116 call _build_tuple r[253108] 0))
  }
  function _channel_regexp_info[253510].clear[253175](arg _mt[253514]:_MT[238], arg this[253512]:_channel_regexp_info[253510]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(253184 call _cond_test(398427 call . this[253512] c"releaseRegexp"))
    {
      (253181 call qio_regexp_release(398432 call . this[253512] c"theRegexp"))
    }
    (253193 call =(398437 call . this[253512] c"theRegexp")(253192 call qio_regexp_null))
    (253198 call =(398442 call . this[253512] c"hasRegexp") 0)
    (253203 call =(398447 call . this[253512] c"matchedRegexp") 0)
    (253208 call =(398452 call . this[253512] c"releaseRegexp") 0)
    if(253221 call _cond_test(398457 call . this[253512] c"matches"))
    {
      (253219 call _ddata_free(398462 call . this[253512] c"matches")(253217 call +(398467 call . this[253512] c"ncaptures") 1))
    }
    {
      unknown _indexOfInterest[253256] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[253257] "expr temp" "temp"
      (253266 'move' _iterator[253257](253264 call _getIterator(253273 call chpl_direct_counted_range_iter 0(398478 call . this[253512] c"ncaptures"))))
      Defer
      {
        {
          (253289 call _freeIterator _iterator[253257])
        }
      }
      { scopeless type
        (253278 'move' _indexOfInterest[253256](253275 call iteratorIndex _iterator[253257]))
      }
      ForLoop[253258]
      {
        unknown i[253282] "index var" "insert auto destroy"
        (253284 'move' i[253282] _indexOfInterest[253256])
        (253253 call =(253236 call(398472 call . this[253512] c"capArr") i[253282]) b"")
        label _continueLabel[253261]
        _indexOfInterest[253256]
        _iterator[253257]
      }
      label _breakLabel[253262]
    }
    if(253303 call _cond_test(398483 call . this[253512] c"capArr"))
    {
      (253301 call _ddata_free(398488 call . this[253512] c"capArr")(398493 call . this[253512] c"ncaptures"))
    }
  }
  function _channel_regexp_info[253510].allocate_captures[253312](arg _mt[253518]:_MT[238], arg this[253516]:_channel_regexp_info[253510]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (253319 call =(398498 call . this[253516] c"ncaptures")(253318 call qio_regexp_get_ncaptures(398503 call . this[253516] c"theRegexp")))
    (253332 call =(398508 call . this[253516] c"matches")(253331 call _ddata_allocate qio_regexp_string_piece_t[293800](253329 call +(398514 call . this[253516] c"ncaptures") 1)))
    (253341 call =(398519 call . this[253516] c"capArr")(253340 call _ddata_allocate bytes[24](398524 call . this[253516] c"ncaptures")))
    (253346 call =(398529 call . this[253516] c"capturei") 0)
  }
  function _channel_regexp_info[253510].deinit[253353](arg _mt[253522]:_MT[238], arg this[253520]:_channel_regexp_info[253510]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (253357 call(398533 call . this[253520] c"clear"))
  }
  function _channel_regexp_info[253510].writeThis[253366](arg _mt[253526]:_MT[238], arg this[253524]:_channel_regexp_info[253510], arg f[253364]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {
    (253392 call <~> f[253364](253390 call + "{hasRegexp = "(253388 call _cast string[26](398539 call . this[253524] c"hasRegexp"))))
    (253420 call <~> f[253364](253418 call + ", matchedRegexp = "(253416 call _cast string[26](398545 call . this[253524] c"matchedRegexp"))))
    (253447 call <~> f[253364](253445 call + ", releaseRegexp = "(253443 call _cast string[26](398551 call . this[253524] c"releaseRegexp"))))
    (253474 call <~> f[253364](253472 call + ", ... capturei = "(253470 call _cast string[26](398557 call . this[253524] c"capturei"))))
    (253504 call <~> f[253364](253502 call +(253499 call + ", ncaptures = "(253497 call _cast string[26](398563 call . this[253524] c"ncaptures"))) "}"))
  }
  type _channel_regexp_info[253510] val super[355640]:object[22] "super class" unknown hasRegexp[253124] 0 unknown matchedRegexp[253129] 0 unknown releaseRegexp[253134] 0 unknown theRegexp[253141](253140 call qio_regexp_null) unknown matches[253150] nil[44](253148 call _ddata[11695](?) qio_regexp_string_piece_t[293800]) unknown capArr[253159] nil[44](253157 call _ddata[11695](?) bytes[24]) unknown capturei[253164] int(64)[13] unknown ncaptures[253169] int(64)[13]
  type unmanaged _channel_regexp_info?[415436]
  type _channel_regexp_info?[415433](?)
  type unmanaged _channel_regexp_info[415430]
  type _channel_regexp_info[398571](?)
  function channel[237642](?)._match_regexp_if_needed[253536](arg _mt[253558]:_MT[238], arg this[253555]:channel[237642](?) :
  channel[237642](?), arg cur[253533] :
  size_t[20654], arg len[253539] :
  size_t[20654], ref arg error[253543] :
  syserr[223496], ref arg style[253547] :
  iostyle[231756], arg r[253552] :
  unmanaged _channel_regexp_info[415430]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(253959 call _cond_test(253568 call qio_regexp_ok(253564 call . r[253552] c"theRegexp")))
    {
      if(253577 call _cond_test(253572 call . r[253552] c"matchedRegexp"))
      {
        (253575 return _void[55])
      }
      (253588 call =(253584 call . r[253552] c"matchedRegexp") 1)
      (253598 call(253594 call . r[253552] c"allocate_captures"))
      unknown ncaps[253606](253603 call . r[253552] c"ncaptures")
      (253609 'end of statement')
      unknown nm[253614](253612 call + ncaps[253606] 1)
      (253617 'end of statement')
      unknown maxlen[253628](253625 call . style[253547] c"max_width_characters")(253621 call int(64)[13] 64)
      (253631 'end of statement')
      unknown can_discard[253636](253634 call == cur[253533] len[253539])
      (253639 'end of statement')
      if(253661 call _cond_test(253648 call == maxlen[253628](253647 call max(253645 call uint(64)[115] 32))))
      {
        (253658 call = maxlen[253628](253657 call max(253655 call int(64)[13] 64)))
      }
      unknown before_match[253670](253669 call qio_channel_offset_unlocked(398581 call . this[253555] c"_channel_internal"))
      (253673 'end of statement')
      (253696 call = error[253543](253695 call qio_regexp_channel_match(253677 call . r[253552] c"theRegexp") 0(398587 call . this[253555] c"_channel_internal") maxlen[253628] QIO_REGEXP_ANCHOR_START[293773] can_discard[253636] 1 0(253691 call . r[253552] c"matches") nm[253614]))
      unknown after_match[253703](253702 call qio_channel_offset_unlocked(398596 call . this[253555] c"_channel_internal"))
      (253706 'end of statement')
      if(253945 call _cond_test(253708 call ! error[253543]))
      {
        {
          unknown _indexOfInterest[253759] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[253760] "expr temp" "temp"
          (253769 'move' _iterator[253760](253767 call _getIterator(253776 call chpl_direct_counted_range_iter 0 ncaps[253606])))
          Defer
          {
            {
              (253792 call _freeIterator _iterator[253760])
            }
          }
          { scopeless type
            (253781 'move' _indexOfInterest[253759](253778 call iteratorIndex _iterator[253760]))
          }
          ForLoop[253761]
          {
            unknown j[253785] "index var" "insert auto destroy"
            (253787 'move' j[253785] _indexOfInterest[253759])
            {
              unknown m[253730](253729 call _to_reMatch(253727 call(253719 call . r[253552] c"matches")(253724 call + 1 j[253785])))
              (253733 'end of statement')
              (253748 call(398604 call . this[253555] c"_extractMatch") m[253730](253746 call(253741 call . r[253552] c"capArr") j[253785]) error[253543])
              if(253754 call _cond_test error[253543])
              {
                break _breakLabel[253765] _breakLabel[253765]
              }
            }
            label _continueLabel[253764]
            _indexOfInterest[253759]
            _iterator[253760]
          }
          label _breakLabel[253765]
        }
        unknown cur[253804](253803 call qio_channel_offset_unlocked(398614 call . this[253555] c"_channel_internal"))
        (253807 'end of statement')
        unknown target[253835](253833 call _cast int(64)[13](253830 call +(253815 call .(253814 call(253809 call . r[253552] c"matches") 0) c"offset")(253827 call .(253824 call(253819 call . r[253552] c"matches") 0) c"len")))
        (253838 'end of statement')
        (253849 call = error[253543](253848 call qio_channel_advance 0(398620 call . this[253555] c"_channel_internal")(253846 call - target[253835] cur[253804])))
      }
      {
        {
          unknown _indexOfInterest[253886] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[253887] "expr temp" "temp"
          (253896 'move' _iterator[253887](253894 call _getIterator(253903 call chpl_direct_counted_range_iter 0 ncaps[253606])))
          Defer
          {
            {
              (253919 call _freeIterator _iterator[253887])
            }
          }
          { scopeless type
            (253908 'move' _indexOfInterest[253886](253905 call iteratorIndex _iterator[253887]))
          }
          ForLoop[253888]
          {
            unknown j[253912] "index var" "insert auto destroy"
            (253914 'move' j[253912] _indexOfInterest[253886])
            {
              (253882 call =(253865 call(253860 call . r[253552] c"capArr") j[253912]) b"")
            }
            label _continueLabel[253891]
            _indexOfInterest[253886]
            _iterator[253887]
          }
          label _breakLabel[253892]
        }
        unknown cur[253931](253930 call qio_channel_offset_unlocked(398629 call . this[253555] c"_channel_internal"))
        (253934 'end of statement')
        (253943 call qio_channel_advance 0(398634 call . this[253555] c"_channel_internal")(253941 call - before_match[253670] cur[253931]))
      }
    }
    {
      (253953 call = error[253543](253952 call qio_format_error_bad_regexp))
      {
      }
    }
  }
  function channel[237642](?)._format_reader[253974](arg _mt[254013]:_MT[238], arg this[254010]:channel[237642](?) :
  channel[237642](?), arg fmtStr[253971] :
  unknown fmtType[253969], ref arg cur[253977] :
  size_t[20654], arg len[253981] :
  size_t[20654], ref arg error[253985] :
  syserr[223496], ref arg conv[253989] :
  qio_conv_t[234968], ref arg gotConv[253993] :
  bool[10], ref arg style[253997] :
  iostyle[231756], ref arg r[254003] :
  unmanaged _channel_regexp_info?[415436], arg isReadf[254007] :
  bool[10]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(254031 call _cond_test(254017 call != r[254003] nil[44]))
    {
      (254028 call =(254024 call .(254020 call postfix! r[254003]) c"hasRegexp") 0)
    }
    if(254562 call _cond_test(254038 call ! error[253985]))
    {
      unknown fmt[254051](254050 call(254046 call .(254045 call(254041 call . fmtStr[253971] c"localize")) c"c_str"))
      (254054 'end of statement')
      {
        unknown tmp[254535] "temp"
        (254559 'move' tmp[254535](254554 call _cond_test(254556 call < cur[253977] len[253981])))
        WhileDo[254540]
        {
          {
            (254062 call = gotConv[253993] 0)
            if(254070 call _cond_test error[253985])
            {
              break _breakLabel[254539] _breakLabel[254539]
            }
            unknown end[254079](254078 call uint(64)[115] 64)
            (254082 'end of statement')
            (254093 call = error[253985](254092 call qio_conv_parse fmt[254051] cur[253977] end[254079] isReadf[254007] conv[253989] style[253997]))
            if(254098 call _cond_test error[253985])
            {
            }
            (254107 call = cur[253977](254105 call _cast size_t[20654] end[254079]))
            if(254114 call _cond_test error[253985])
            {
              break _breakLabel[254539] _breakLabel[254539]
            }
            if(254530 call _cond_test(254126 call ==(254122 call . conv[253989] c"argType") QIO_CONV_ARG_TYPE_NONE_LITERAL[235062]))
            {
              if(254299 call _cond_test isReadf[254007])
              {
                if(254272 call _cond_test(254136 call ==(254132 call . conv[253989] c"literal_is_whitespace") 2))
                {
                  unknown offsetA[254142](254141 call qio_channel_offset_unlocked(398667 call . this[254010] c"_channel_internal"))
                  (254145 'end of statement')
                  (254154 call = error[253985](254153 call qio_channel_skip_past_newline 0(398673 call . this[254010] c"_channel_internal") 1))
                  unknown offsetB[254161](254160 call qio_channel_offset_unlocked(398678 call . this[254010] c"_channel_internal"))
                  (254164 'end of statement')
                  if(254180 call _cond_test(254172 call &&(254166 call ! error[253985])(254170 call == offsetA[254142] offsetB[254161])))
                  {
                    (254176 call = error[253985](398685 call EFORMAT[224182]))
                  }
                }
                {
                  if(254268 call _cond_test(254189 call ==(254185 call . conv[253989] c"literal_is_whitespace") 1))
                  {
                    unknown offsetA[254195](254194 call qio_channel_offset_unlocked(398689 call . this[254010] c"_channel_internal"))
                    (254198 'end of statement')
                    (254214 call = error[253985](254213 call qio_channel_scan_literal_2 0(398695 call . this[254010] c"_channel_internal")(254208 call . conv[253989] c"literal") 0 1))
                    unknown offsetB[254221](254220 call qio_channel_offset_unlocked(398700 call . this[254010] c"_channel_internal"))
                    (254224 'end of statement')
                    if(254240 call _cond_test(254232 call &&(254226 call ! error[253985])(254230 call == offsetA[254195] offsetB[254221])))
                    {
                      (254236 call = error[253985](398707 call EFORMAT[224182]))
                    }
                  }
                  {
                    (254264 call = error[253985](254263 call qio_channel_scan_literal_2 0(398712 call . this[254010] c"_channel_internal")(254250 call . conv[253989] c"literal")(254260 call _cast ssize_t[20647](254256 call . conv[253989] c"literal_length")) 0))
                  }
                }
              }
              {
                (254295 call = error[253985](254294 call qio_channel_print_literal_2 0(398719 call . this[254010] c"_channel_internal")(254284 call . conv[253989] c"literal")(254292 call _cast ssize_t[20647](254288 call . conv[253989] c"literal_length"))))
              }
            }
            {
              if(254526 call _cond_test(254309 call ==(254305 call . conv[253989] c"argType") QIO_CONV_ARG_TYPE_NONE_REGEXP_LITERAL[235057]))
              {
                if(254512 call _cond_test(254312 call ! isReadf[254007]))
                {
                  (254318 call = error[253985](254317 call qio_format_error_write_regexp))
                }
                {
                  if(254336 call _cond_test(254324 call == r[254003] nil[44]))
                  {
                    (254333 call = r[254003](254329 'new'(_chpl_manager = unmanaged[220](?))(254332 call _channel_regexp_info[398571](?))))
                  }
                  const rnn[254345] "const"(254343 call postfix! r[254003])
                  (254348 'end of statement')
                  (254354 call(254350 call . rnn[254345] c"clear"))
                  unknown errstr[254357] string[26]
                  (254360 'end of statement')
                  (254395 call qio_regexp_create_compile_flags_2(254365 call . conv[253989] c"regexp")(254372 call . conv[253989] c"regexp_length")(254378 call . conv[253989] c"regexp_flags")(254384 call . conv[253989] c"regexp_flags_length")(254389 call == fmtType[253969] string[26])(254392 call . rnn[254345] c"theRegexp"))
                  (254404 call =(254400 call . rnn[254345] c"releaseRegexp") 1)
                  if(254508 call _cond_test(254413 call qio_regexp_ok(254409 call . rnn[254345] c"theRegexp")))
                  {
                    (254419 call =(254415 call . rnn[254345] c"hasRegexp") 1)
                    (254434 call =(254424 call . rnn[254345] c"ncaptures")(254433 call qio_regexp_get_ncaptures(254429 call . rnn[254345] c"theRegexp")))
                    if(254496 call _cond_test(254475 call ||(254464 call ||(254453 call ||(254442 call >(254438 call . rnn[254345] c"ncaptures") 0)(254451 call !=(254447 call . conv[253989] c"preArg1") QIO_CONV_UNK[234972]))(254462 call !=(254458 call . conv[253989] c"preArg2") QIO_CONV_UNK[234972]))(254473 call !=(254469 call . conv[253989] c"preArg3") QIO_CONV_UNK[234972])))
                    {
                      (254479 call = gotConv[253993] 1)
                      break _breakLabel[254539] _breakLabel[254539]
                    }
                    {
                      (254493 call(398738 call . this[254010] c"_match_regexp_if_needed") cur[253977] len[253981] error[253985] style[253997] rnn[254345])
                    }
                  }
                  {
                    (254504 call = error[253985](254503 call qio_format_error_bad_regexp))
                  }
                }
              }
              {
                (254519 call = gotConv[253993] 1)
                break _breakLabel[254539] _breakLabel[254539]
              }
            }
          }
          label _continueLabel[254538]
          (254549 'move' tmp[254535](254544 call _cond_test(254546 call < cur[253977] len[253981])))
          tmp[254535]
        }
        label _breakLabel[254539]
      }
    }
  }
  function channel[237642](?)._conv_helper[254575](arg _mt[254594]:_MT[238], arg this[254591]:channel[237642](?) :
  channel[237642](?), ref arg error[254572] :
  syserr[223496], ref arg conv[254578] :
  qio_conv_t[234968], ref arg gotConv[254582] :
  bool[10], ref arg j[254586] :
  int(64)[13], ref arg argType[254589]:_any[178](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(254599 call _cond_test error[254572])
    {
      (254597 return _void[55])
    }
    if(254731 call _cond_test gotConv[254582])
    {
      if(254630 call _cond_test(254611 call !=(254607 call . conv[254578] c"preArg1") QIO_CONV_UNK[234972]))
      {
        (254621 call =(254616 call argType[254589] j[254586])(254618 call . conv[254578] c"preArg1"))
        (254627 call += j[254586] 1)
      }
      if(254659 call _cond_test(254640 call !=(254636 call . conv[254578] c"preArg2") QIO_CONV_UNK[234972]))
      {
        (254650 call =(254645 call argType[254589] j[254586])(254647 call . conv[254578] c"preArg2"))
        (254656 call += j[254586] 1)
      }
      if(254687 call _cond_test(254668 call !=(254664 call . conv[254578] c"preArg3") QIO_CONV_UNK[234972]))
      {
        (254678 call =(254673 call argType[254589] j[254586])(254675 call . conv[254578] c"preArg3"))
        (254684 call += j[254586] 1)
      }
      if(254727 call _cond_test(254696 call !=(254692 call . conv[254578] c"argType") QIO_CONV_UNK[234972]))
      {
        if(254717 call _cond_test(254703 call ==(254701 call argType[254589] j[254586]) QIO_CONV_UNK[234972]))
        {
          (254713 call =(254708 call argType[254589] j[254586])(254710 call . conv[254578] c"argType"))
        }
        (254724 call += j[254586] 1)
      }
    }
  }
  function channel[237642](?)._conv_sethandler[254744](arg _mt[254767]:_MT[238], arg this[254764]:channel[237642](?) :
  channel[237642](?), ref arg error[254741] :
  syserr[223496], arg argtypei[254747] :
  c_int[20549], ref arg style[254751] :
  iostyle[231756], arg i[254755] :
  int(64)[13], arg argi[254758]:_any[178](?), arg isReadf[254761] :
  bool[10]) : _unknown[51] throws "method" "no doc"
  {
    if(254774 call _cond_test error[254741])
    {
      (254772 return 0)
    }
    {
      unknown tmp[255401] "expr temp" "maybe param" "maybe type" "temp"
      (255403 'move' tmp[255401] argtypei[254747])
      if(255408 call _cond_test(255405 call == tmp[255401] QIO_CONV_SET_MIN_WIDTH_COLS[235067]))
      {
        unknown tmp[254793] "temp"(254792 call _toIntegral argi[254758])
        (254800 call _check_tuple_var_decl tmp[254793] 2)
        unknown t[254784](254794 call tmp[254793] 0)
        unknown ok[254786](254797 call tmp[254793] 1)
        (254805 'end of statement')
        if(254835 call _cond_test(254808 call ! ok[254786]))
        {
          (254815 call = error[254741](254814 call qio_format_error_arg_mismatch i[254755]))
        }
        {
          (254832 call =(254822 call . style[254751] c"min_width_columns")(254830 call _cast(254829 call uint(64)[115] 32) t[254784]))
        }
      }
      {
        if(255414 call _cond_test(255411 call == tmp[255401] QIO_CONV_SET_MAX_WIDTH_COLS[235072]))
        {
          unknown tmp[254853] "temp"(254852 call _toIntegral argi[254758])
          (254860 call _check_tuple_var_decl tmp[254853] 2)
          unknown t[254844](254854 call tmp[254853] 0)
          unknown ok[254846](254857 call tmp[254853] 1)
          (254865 'end of statement')
          if(254895 call _cond_test(254868 call ! ok[254846]))
          {
            (254875 call = error[254741](254874 call qio_format_error_arg_mismatch i[254755]))
          }
          {
            (254892 call =(254882 call . style[254751] c"max_width_columns")(254890 call _cast(254889 call uint(64)[115] 32) t[254844]))
          }
        }
        {
          if(255421 call _cond_test(255418 call == tmp[255401] QIO_CONV_SET_MAX_WIDTH_CHARS[235077]))
          {
            unknown tmp[254913] "temp"(254912 call _toIntegral argi[254758])
            (254920 call _check_tuple_var_decl tmp[254913] 2)
            unknown t[254904](254914 call tmp[254913] 0)
            unknown ok[254906](254917 call tmp[254913] 1)
            (254925 'end of statement')
            if(254953 call _cond_test(254928 call ! ok[254906]))
            {
              (254935 call = error[254741](254934 call qio_format_error_arg_mismatch i[254755]))
            }
            {
              (254950 call =(254940 call . style[254751] c"max_width_characters")(254948 call _cast(254947 call uint(64)[115] 32) t[254904]))
            }
          }
          {
            if(255428 call _cond_test(255425 call == tmp[255401] QIO_CONV_SET_MAX_WIDTH_BYTES[235082]))
            {
              unknown tmp[254971] "temp"(254970 call _toIntegral argi[254758])
              (254978 call _check_tuple_var_decl tmp[254971] 2)
              unknown t[254962](254972 call tmp[254971] 0)
              unknown ok[254964](254975 call tmp[254971] 1)
              (254983 'end of statement')
              if(255013 call _cond_test(254986 call ! ok[254964]))
              {
                (254993 call = error[254741](254992 call qio_format_error_arg_mismatch i[254755]))
              }
              {
                (255010 call =(255000 call . style[254751] c"max_width_bytes")(255008 call _cast(255007 call uint(64)[115] 32) t[254962]))
              }
            }
            {
              if(255435 call _cond_test(255432 call == tmp[255401] QIO_CONV_SET_PRECISION[235087]))
              {
                unknown tmp[255031] "temp"(255030 call _toIntegral argi[254758])
                (255038 call _check_tuple_var_decl tmp[255031] 2)
                unknown t[255022](255032 call tmp[255031] 0)
                unknown ok[255024](255035 call tmp[255031] 1)
                (255043 'end of statement')
                if(255073 call _cond_test(255046 call ! ok[255024]))
                {
                  (255053 call = error[254741](255052 call qio_format_error_arg_mismatch i[254755]))
                }
                {
                  (255070 call =(255060 call . style[254751] c"precision")(255068 call _cast(255067 call int(64)[13] 32) t[255022]))
                }
              }
              {
                if(255442 call _cond_test(255439 call == tmp[255401] QIO_CONV_SET_STRINGSTART[235102]))
                {
                  unknown tmp[255091] "temp"(255090 call _toChar argi[254758])
                  (255098 call _check_tuple_var_decl tmp[255091] 2)
                  unknown t[255082](255092 call tmp[255091] 0)
                  unknown ok[255084](255095 call tmp[255091] 1)
                  (255103 'end of statement')
                  if(255130 call _cond_test(255106 call ! ok[255084]))
                  {
                    (255113 call = error[254741](255112 call qio_format_error_arg_mismatch i[254755]))
                  }
                  {
                    (255127 call =(255120 call . style[254751] c"string_start")(255125 call _cast style_char_t[231399] t[255082]))
                  }
                }
                {
                  if(255449 call _cond_test(255446 call == tmp[255401] QIO_CONV_SET_STRINGEND[235112]))
                  {
                    unknown tmp[255148] "temp"(255147 call _toChar argi[254758])
                    (255155 call _check_tuple_var_decl tmp[255148] 2)
                    unknown t[255139](255149 call tmp[255148] 0)
                    unknown ok[255141](255152 call tmp[255148] 1)
                    (255160 'end of statement')
                    if(255185 call _cond_test(255163 call ! ok[255141]))
                    {
                      (255170 call = error[254741](255169 call qio_format_error_arg_mismatch i[254755]))
                    }
                    {
                      (255182 call =(255175 call . style[254751] c"string_end")(255180 call _cast style_char_t[231399] t[255139]))
                    }
                  }
                  {
                    if(255456 call _cond_test(255453 call == tmp[255401] QIO_CONV_SET_STRINGSTARTEND[235107]))
                    {
                      unknown tmp[255203] "temp"(255202 call _toChar argi[254758])
                      (255210 call _check_tuple_var_decl tmp[255203] 2)
                      unknown t[255194](255204 call tmp[255203] 0)
                      unknown ok[255196](255207 call tmp[255203] 1)
                      (255215 'end of statement')
                      if(255252 call _cond_test(255218 call ! ok[255196]))
                      {
                        (255225 call = error[254741](255224 call qio_format_error_arg_mismatch i[254755]))
                      }
                      {
                        (255237 call =(255230 call . style[254751] c"string_start")(255235 call _cast style_char_t[231399] t[255194]))
                        (255249 call =(255242 call . style[254751] c"string_end")(255247 call _cast style_char_t[231399] t[255194]))
                      }
                    }
                    {
                      if(255463 call _cond_test(255460 call == tmp[255401] QIO_CONV_SET_STRINGLEN[235092]))
                      {
                        unknown tmp[255269] "temp"(255268 call _toIntegral argi[254758])
                        (255276 call _check_tuple_var_decl tmp[255269] 2)
                        unknown t[255260](255270 call tmp[255269] 0)
                        unknown ok[255262](255273 call tmp[255269] 1)
                        (255281 'end of statement')
                        if(255310 call _cond_test(255284 call ! ok[255262]))
                        {
                          (255291 call = error[254741](255290 call qio_format_error_arg_mismatch i[254755]))
                        }
                        {
                          (255306 call =(255296 call . style[254751] c"str_style")(255304 call _cast(255303 call int(64)[13] 64) t[255260]))
                        }
                      }
                      {
                        if(255470 call _cond_test(255467 call == tmp[255401] QIO_CONV_SET_TERMINATOR[235097]))
                        {
                          unknown tmp[255327] "temp"(255326 call _toChar argi[254758])
                          (255334 call _check_tuple_var_decl tmp[255327] 2)
                          unknown t[255318](255328 call tmp[255327] 0)
                          unknown ok[255320](255331 call tmp[255327] 1)
                          (255339 'end of statement')
                          if(255371 call _cond_test(255342 call ! ok[255320]))
                          {
                            (255349 call = error[254741](255348 call qio_format_error_arg_mismatch i[254755]))
                          }
                          {
                            (255367 call =(255354 call . style[254751] c"str_style")(255366 call stringStyleTerminated(255363 call _cast(255362 call uint(64)[115] 8) t[255318])))
                          }
                        }
                        {
                          if(255477 call _cond_test(255474 call == tmp[255401] QIO_CONV_SET_DONE[235122]))
                          {
                          }
                          {
                            if(255484 call _cond_test(255481 call == tmp[255401] QIO_CONV_UNK[234972]))
                            {
                              (255388 call = error[254741](255387 call qio_format_error_too_many_args))
                            }
                            {
                              (255395 return 1)
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    (255490 return 0)
  }
  { scopeless type
    bool[10]
  }
  function channel[237642](?)._write_signed[255505](arg _mt[255518]:_MT[238], arg this[255515]:channel[237642](?) :
  channel[237642](?), arg width[255502] :
  (255501 call uint(64)[115] 32), arg t[255508] :
  int(64)[13], arg i[255512] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[255522] syserr[223496]
    (255525 'end of statement')
    unknown byteorder[255531](255530 call qio_channel_byteorder(398852 call . this[255515] c"_channel_internal"))
    (255534 'end of statement')
    {
      unknown tmp[255656] "expr temp" "maybe param" "maybe type" "temp"
      (255658 'move' tmp[255656] width[255502])
      if(255663 call _cond_test(255660 call == tmp[255656] 1))
      {
        unknown x[255546](255544 call _cast(255543 call int(64)[13] 8) t[255508])
        (255549 'end of statement')
        (255558 call = err[255522](255557 call qio_channel_write_int8 0(398860 call . this[255515] c"_channel_internal") x[255546]))
      }
      {
        if(255669 call _cond_test(255666 call == tmp[255656] 2))
        {
          unknown x[255572](255570 call _cast(255569 call int(64)[13] 16) t[255508])
          (255575 'end of statement')
          (255585 call = err[255522](255584 call qio_channel_write_int16 0 byteorder[255531](398869 call . this[255515] c"_channel_internal") x[255572]))
        }
        {
          if(255676 call _cond_test(255673 call == tmp[255656] 4))
          {
            unknown x[255599](255597 call _cast(255596 call int(64)[13] 32) t[255508])
            (255602 'end of statement')
            (255612 call = err[255522](255611 call qio_channel_write_int32 0 byteorder[255531](398878 call . this[255515] c"_channel_internal") x[255599]))
          }
          {
            if(255683 call _cond_test(255680 call == tmp[255656] 8))
            {
              unknown x[255626](255624 call _cast(255623 call int(64)[13] 64) t[255508])
              (255629 'end of statement')
              (255639 call = err[255522](255638 call qio_channel_write_int64 0 byteorder[255531](398887 call . this[255515] c"_channel_internal") x[255626]))
            }
            {
              (255649 call = err[255522](255648 call qio_format_error_arg_mismatch i[255512]))
            }
          }
        }
      }
    }
    (255689 return err[255522])
  }
  { scopeless type
    syserr[223496]
  }
  function channel[237642](?)._read_signed[255704](arg _mt[255717]:_MT[238], arg this[255714]:channel[237642](?) :
  channel[237642](?), arg width[255701] :
  (255700 call uint(64)[115] 32), out arg t[255707] :
  int(64)[13], arg i[255711] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[255721] syserr[223496]
    (255724 'end of statement')
    unknown byteorder[255730](255729 call qio_channel_byteorder(398898 call . this[255714] c"_channel_internal"))
    (255733 'end of statement')
    {
      unknown tmp[255863] "expr temp" "maybe param" "maybe type" "temp"
      (255865 'move' tmp[255863] width[255701])
      if(255870 call _cond_test(255867 call == tmp[255863] 1))
      {
        unknown x[255742](255741 call int(64)[13] 8)
        (255745 'end of statement')
        (255754 call = err[255721](255753 call qio_channel_read_int8 0(398905 call . this[255714] c"_channel_internal") x[255742]))
        (255759 call = t[255707] x[255742])
      }
      {
        if(255876 call _cond_test(255873 call == tmp[255863] 2))
        {
          unknown x[255770](255769 call int(64)[13] 16)
          (255773 'end of statement')
          (255783 call = err[255721](255782 call qio_channel_read_int16 0 byteorder[255730](398915 call . this[255714] c"_channel_internal") x[255770]))
          (255788 call = t[255707] x[255770])
        }
        {
          if(255883 call _cond_test(255880 call == tmp[255863] 4))
          {
            unknown x[255799](255798 call int(64)[13] 32)
            (255802 'end of statement')
            (255812 call = err[255721](255811 call qio_channel_read_int32 0 byteorder[255730](398925 call . this[255714] c"_channel_internal") x[255799]))
            (255817 call = t[255707] x[255799])
          }
          {
            if(255890 call _cond_test(255887 call == tmp[255863] 8))
            {
              unknown x[255828](255827 call int(64)[13] 64)
              (255831 'end of statement')
              (255841 call = err[255721](255840 call qio_channel_read_int64 0 byteorder[255730](398935 call . this[255714] c"_channel_internal") x[255828]))
              (255846 call = t[255707] x[255828])
            }
            {
              (255856 call = err[255721](255855 call qio_format_error_arg_mismatch i[255711]))
            }
          }
        }
      }
    }
    (255896 return err[255721])
  }
  { scopeless type
    syserr[223496]
  }
  function channel[237642](?)._write_unsigned[255911](arg _mt[255924]:_MT[238], arg this[255921]:channel[237642](?) :
  channel[237642](?), arg width[255908] :
  (255907 call uint(64)[115] 32), arg t[255914] :
  uint(64)[115], arg i[255918] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[255927] syserr[223496]
    (255930 'end of statement')
    unknown byteorder[255936](255935 call qio_channel_byteorder(398947 call . this[255921] c"_channel_internal"))
    (255939 'end of statement')
    {
      unknown tmp[256061] "expr temp" "maybe param" "maybe type" "temp"
      (256063 'move' tmp[256061] width[255908])
      if(256068 call _cond_test(256065 call == tmp[256061] 1))
      {
        unknown x[255951](255949 call _cast(255948 call uint(64)[115] 8) t[255914])
        (255954 'end of statement')
        (255963 call = err[255927](255962 call qio_channel_write_uint8 0(398955 call . this[255921] c"_channel_internal") x[255951]))
      }
      {
        if(256074 call _cond_test(256071 call == tmp[256061] 2))
        {
          unknown x[255977](255975 call _cast(255974 call uint(64)[115] 16) t[255914])
          (255980 'end of statement')
          (255990 call = err[255927](255989 call qio_channel_write_uint16 0 byteorder[255936](398964 call . this[255921] c"_channel_internal") x[255977]))
        }
        {
          if(256081 call _cond_test(256078 call == tmp[256061] 4))
          {
            unknown x[256004](256002 call _cast(256001 call uint(64)[115] 32) t[255914])
            (256007 'end of statement')
            (256017 call = err[255927](256016 call qio_channel_write_uint32 0 byteorder[255936](398973 call . this[255921] c"_channel_internal") x[256004]))
          }
          {
            if(256088 call _cond_test(256085 call == tmp[256061] 8))
            {
              unknown x[256031](256029 call _cast(256028 call uint(64)[115] 64) t[255914])
              (256034 'end of statement')
              (256044 call = err[255927](256043 call qio_channel_write_uint64 0 byteorder[255936](398982 call . this[255921] c"_channel_internal") x[256031]))
            }
            {
              (256054 call = err[255927](256053 call qio_format_error_arg_mismatch i[255918]))
            }
          }
        }
      }
    }
    (256094 return err[255927])
  }
  function channel[237642](?)._read_unsigned[256108](arg _mt[256121]:_MT[238], arg this[256118]:channel[237642](?) :
  channel[237642](?), arg width[256105] :
  (256104 call uint(64)[115] 32), out arg t[256111] :
  uint(64)[115], arg i[256115] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256124] syserr[223496]
    (256127 'end of statement')
    unknown byteorder[256133](256132 call qio_channel_byteorder(398992 call . this[256118] c"_channel_internal"))
    (256136 'end of statement')
    {
      unknown tmp[256266] "expr temp" "maybe param" "maybe type" "temp"
      (256268 'move' tmp[256266] width[256105])
      if(256273 call _cond_test(256270 call == tmp[256266] 1))
      {
        unknown x[256145](256144 call uint(64)[115] 8)
        (256148 'end of statement')
        (256157 call = err[256124](256156 call qio_channel_read_uint8 0(398999 call . this[256118] c"_channel_internal") x[256145]))
        (256162 call = t[256111] x[256145])
      }
      {
        if(256279 call _cond_test(256276 call == tmp[256266] 2))
        {
          unknown x[256173](256172 call uint(64)[115] 16)
          (256176 'end of statement')
          (256186 call = err[256124](256185 call qio_channel_read_uint16 0 byteorder[256133](399009 call . this[256118] c"_channel_internal") x[256173]))
          (256191 call = t[256111] x[256173])
        }
        {
          if(256286 call _cond_test(256283 call == tmp[256266] 4))
          {
            unknown x[256202](256201 call uint(64)[115] 32)
            (256205 'end of statement')
            (256215 call = err[256124](256214 call qio_channel_read_uint32 0 byteorder[256133](399019 call . this[256118] c"_channel_internal") x[256202]))
            (256220 call = t[256111] x[256202])
          }
          {
            if(256293 call _cond_test(256290 call == tmp[256266] 8))
            {
              unknown x[256231](256230 call uint(64)[115] 64)
              (256234 'end of statement')
              (256244 call = err[256124](256243 call qio_channel_read_uint64 0 byteorder[256133](399029 call . this[256118] c"_channel_internal") x[256231]))
              (256249 call = t[256111] x[256231])
            }
            {
              (256259 call = err[256124](256258 call qio_format_error_arg_mismatch i[256115]))
            }
          }
        }
      }
    }
    (256299 return err[256124])
  }
  function channel[237642](?)._write_real[256313](arg _mt[256326]:_MT[238], arg this[256323]:channel[237642](?) :
  channel[237642](?), arg width[256310] :
  (256309 call uint(64)[115] 32), arg t[256316] :
  real(64)[16], arg i[256320] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256329] syserr[223496]
    (256332 'end of statement')
    unknown byteorder[256338](256337 call qio_channel_byteorder(399041 call . this[256323] c"_channel_internal"))
    (256341 'end of statement')
    {
      unknown tmp[256410] "expr temp" "maybe param" "maybe type" "temp"
      (256412 'move' tmp[256410] width[256310])
      if(256417 call _cond_test(256414 call == tmp[256410] 4))
      {
        unknown x[256353](256351 call _cast(256350 call real(64)[16] 32) t[256316])
        (256356 'end of statement')
        (256366 call = err[256329](256365 call qio_channel_write_float32 0 byteorder[256338](399050 call . this[256323] c"_channel_internal") x[256353]))
      }
      {
        if(256423 call _cond_test(256420 call == tmp[256410] 8))
        {
          unknown x[256380](256378 call _cast(256377 call real(64)[16] 64) t[256316])
          (256383 'end of statement')
          (256393 call = err[256329](256392 call qio_channel_write_float64 0 byteorder[256338](399059 call . this[256323] c"_channel_internal") x[256380]))
        }
        {
          (256403 call = err[256329](256402 call qio_format_error_arg_mismatch i[256320]))
        }
      }
    }
    (256429 return err[256329])
  }
  function channel[237642](?)._read_real[256443](arg _mt[256456]:_MT[238], arg this[256453]:channel[237642](?) :
  channel[237642](?), arg width[256440] :
  (256439 call uint(64)[115] 32), out arg t[256446] :
  real(64)[16], arg i[256450] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256459] syserr[223496]
    (256462 'end of statement')
    unknown byteorder[256468](256467 call qio_channel_byteorder(399069 call . this[256453] c"_channel_internal"))
    (256471 'end of statement')
    {
      unknown tmp[256544] "expr temp" "maybe param" "maybe type" "temp"
      (256546 'move' tmp[256544] width[256440])
      if(256551 call _cond_test(256548 call == tmp[256544] 4))
      {
        unknown x[256480](256479 call real(64)[16] 32)
        (256483 'end of statement')
        (256493 call = err[256459](256492 call qio_channel_read_float32 0 byteorder[256468](399077 call . this[256453] c"_channel_internal") x[256480]))
        (256498 call = t[256446] x[256480])
      }
      {
        if(256557 call _cond_test(256554 call == tmp[256544] 8))
        {
          unknown x[256509](256508 call real(64)[16] 64)
          (256512 'end of statement')
          (256522 call = err[256459](256521 call qio_channel_read_float64 0 byteorder[256468](399087 call . this[256453] c"_channel_internal") x[256509]))
          (256527 call = t[256446] x[256509])
        }
        {
          (256537 call = err[256459](256536 call qio_format_error_arg_mismatch i[256450]))
        }
      }
    }
    (256563 return err[256459])
  }
  function channel[237642](?)._write_complex[256577](arg _mt[256590]:_MT[238], arg this[256587]:channel[237642](?) :
  channel[237642](?), arg width[256574] :
  (256573 call uint(64)[115] 32), arg t[256580] :
  complex(128)[140], arg i[256584] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256594](399097 call ENOERR[223566]) syserr[223496]
    (256597 'end of statement')
    unknown byteorder[256603](256602 call qio_channel_byteorder(399101 call . this[256587] c"_channel_internal"))
    (256606 'end of statement')
    {
      unknown tmp[256745] "expr temp" "maybe param" "maybe type" "temp"
      (256747 'move' tmp[256745] width[256574])
      if(256752 call _cond_test(256749 call == tmp[256745] 8))
      {
        unknown x[256618](256616 call _cast(256615 call complex(128)[140] 64) t[256580])
        (256621 'end of statement')
        unknown re[256627](256624 call . x[256618] c"re")
        (256630 'end of statement')
        unknown im[256635](256632 call . x[256618] c"im")
        (256638 'end of statement')
        (256647 call = err[256594](256646 call qio_channel_write_float32 0 byteorder[256603](399110 call . this[256587] c"_channel_internal") re[256627]))
        if(256665 call _cond_test(256651 call ! err[256594]))
        {
          (256661 call = err[256594](256660 call qio_channel_write_float32 0 byteorder[256603](399119 call . this[256587] c"_channel_internal") im[256635]))
        }
      }
      {
        if(256758 call _cond_test(256755 call == tmp[256745] 16))
        {
          unknown x[256680](256678 call _cast(256677 call complex(128)[140] 128) t[256580])
          (256683 'end of statement')
          unknown re[256689](256686 call . x[256680] c"re")
          (256692 'end of statement')
          unknown im[256697](256694 call . x[256680] c"im")
          (256700 'end of statement')
          (256709 call = err[256594](256708 call qio_channel_write_float64 0 byteorder[256603](399128 call . this[256587] c"_channel_internal") re[256689]))
          if(256727 call _cond_test(256713 call ! err[256594]))
          {
            (256723 call = err[256594](256722 call qio_channel_write_float64 0 byteorder[256603](399137 call . this[256587] c"_channel_internal") im[256697]))
          }
        }
        {
          (256738 call = err[256594](256737 call qio_format_error_arg_mismatch i[256584]))
        }
      }
    }
    (256764 return err[256594])
  }
  function channel[237642](?)._read_complex[256778](arg _mt[256791]:_MT[238], arg this[256788]:channel[237642](?) :
  channel[237642](?), arg width[256775] :
  (256774 call uint(64)[115] 32), out arg t[256781] :
  complex(128)[140], arg i[256785] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256795](399145 call ENOERR[223566]) syserr[223496]
    (256798 'end of statement')
    unknown byteorder[256804](256803 call qio_channel_byteorder(399149 call . this[256788] c"_channel_internal"))
    (256807 'end of statement')
    {
      unknown tmp[256984] "expr temp" "maybe param" "maybe type" "temp"
      (256986 'move' tmp[256984] width[256775])
      if(256991 call _cond_test(256988 call == tmp[256984] 8))
      {
        unknown x[256816](256815 call complex(128)[140] 64)
        (256819 'end of statement')
        unknown re[256826](256825 'typeof'(256822 call . x[256816] c"re"))
        (256829 'end of statement')
        unknown im[256835](256834 'typeof'(256831 call . x[256816] c"im"))
        (256838 'end of statement')
        (256847 call = err[256795](256846 call qio_channel_read_float32 0 byteorder[256804](399157 call . this[256788] c"_channel_internal") re[256826]))
        if(256865 call _cond_test(256851 call ! err[256795]))
        {
          (256861 call = err[256795](256860 call qio_channel_read_float32 0 byteorder[256804](399166 call . this[256788] c"_channel_internal") im[256835]))
        }
        (256881 call = x[256816](256879 call _cast(256878 call complex(128)[140] 64)(256873 call _build_tuple re[256826] im[256835])))
        (256886 call = t[256781] x[256816])
      }
      {
        if(256997 call _cond_test(256994 call == tmp[256984] 16))
        {
          unknown x[256897](256896 call complex(128)[140] 128)
          (256900 'end of statement')
          unknown re[256907](256906 'typeof'(256903 call . x[256897] c"re"))
          (256910 'end of statement')
          unknown im[256916](256915 'typeof'(256912 call . x[256897] c"im"))
          (256919 'end of statement')
          (256928 call = err[256795](256927 call qio_channel_read_float64 0 byteorder[256804](399179 call . this[256788] c"_channel_internal") re[256907]))
          if(256946 call _cond_test(256932 call ! err[256795]))
          {
            (256942 call = err[256795](256941 call qio_channel_read_float64 0 byteorder[256804](399188 call . this[256788] c"_channel_internal") im[256916]))
          }
          (256962 call = x[256897](256960 call _cast(256959 call complex(128)[140] 128)(256954 call _build_tuple re[256907] im[256916])))
          (256967 call = t[256781] x[256897])
        }
        {
          (256977 call = err[256795](256976 call qio_format_error_arg_mismatch i[256785]))
        }
      }
    }
    (257003 return err[256795])
  }
  function channel[237642](?).writef[257015](arg _mt[257025]:_MT[238], arg this[257022]:channel[237642](?) :
  channel[237642](?), arg fmtStr[257012] :
  unknown t[257010], const arg args[257019]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    if(257062 call _cond_test(257039 call !(399204 call . this[257022] c"writing")))
    {
      (257060 call compilerError "writef on read-only channel")
    }
    const origLocale[257074] "const"(257073 call(257069 call . this[257022] c"getLocaleOfIoRequest"))
    (257077 'end of statement')
    unknown err[257080](399208 call ENOERR[223566]) syserr[223496]
    (257083 'end of statement')
    const tmp[258313] "const" "temp"
    (258315 'move' tmp[258313](258311 'deref'(258310 '_wide_get_locale'(257085 call . this[257022] c"home"))))
    {
      {
        Try
        {
          {
            (257093 call(257089 call . this[257022] c"lock"))
          }
        }
        Defer
        {
          {
            (257103 call(257099 call . this[257022] c"unlock"))
          }
        }
        unknown save_style[257114](257113 call(257109 call . this[257022] c"_style"))
        (257117 'end of statement')
        unknown cur[257120] 0 size_t[20654]
        (257123 'end of statement')
        unknown len[257132](257130 call _cast size_t[20654](257126 call . fmtStr[257012] c"size")) size_t[20654]
        (257135 'end of statement')
        unknown conv[257137] qio_conv_t[234968]
        (257140 'end of statement')
        unknown gotConv[257142] bool[10]
        (257145 'end of statement')
        unknown style[257147] iostyle[231756]
        (257150 'end of statement')
        unknown end[257152] size_t[20654]
        (257155 'end of statement')
        unknown argType[257163](257161 call *(257158 call + k[257017] 5) c_int[20549])
        (257166 'end of statement')
        unknown r[257170] unmanaged _channel_regexp_info?[415436]
        (257173 'end of statement')
        Defer
        {
          {
            if(257180 call _cond_test r[257170])
            {
              (257177 call chpl__delete r[257170])
            }
          }
        }
        {
          unknown _indexOfInterest[257208] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[257209] "expr temp" "temp"
          (257218 'move' _iterator[257209](257216 call _getIterator(257229 call chpl_direct_range_iter 0(257223 call -(257225 call . argType[257163] c"size") 1) 1)))
          Defer
          {
            {
              (257245 call _freeIterator _iterator[257209])
            }
          }
          { scopeless type
            (257234 'move' _indexOfInterest[257208](257231 call iteratorIndex _iterator[257209]))
          }
          ForLoop[257210]
          {
            unknown i[257238] "index var" "insert auto destroy"
            (257240 'move' i[257238] _indexOfInterest[257208])
            {
              (257204 call =(257202 call argType[257163] i[257238]) QIO_CONV_UNK[234972])
            }
            label _continueLabel[257213]
            _indexOfInterest[257208]
            _iterator[257209]
          }
          label _breakLabel[257214]
        }
        unknown j[257253] 0
        (257256 'end of statement')
        {
          unknown i[258214] 0
          unknown tmp[258215] "maybe param" "temp"
          (258227 'move' tmp[258215](258225 call chpl_compute_low_param_loop_bound 0(257260 call - k[257017] 1)))
          unknown tmp[258216] "maybe param" "temp"
          (258237 'move' tmp[258216](258235 call chpl_compute_high_param_loop_bound 0(258232 call - k[257017] 1)))
          unknown tmp[258217] "maybe param" "temp"
          (258240 'move' tmp[258217] 1)
          ParamForLoop[258242]
          { i[258214] tmp[258215] tmp[258216] tmp[258217]
            {
              (257266 call = gotConv[257142] 0)
              if(257288 call _cond_test(257272 call <= j[257253] i[258214]))
              {
                (257285 call(399231 call . this[257022] c"_format_reader") fmtStr[257012] cur[257120] len[257132] err[257080] conv[257137] gotConv[257142] style[257147] r[257170] 0)
              }
              (257299 call(399245 call . this[257022] c"_conv_helper") err[257080] conv[257137] gotConv[257142] j[257253] argType[257163])
              unknown domore[257316](257315 call(399256 call . this[257022] c"_conv_sethandler") err[257080](257307 call argType[257163] i[258214]) style[257147] i[258214](257313 call args[257019] i[258214]) 0)
              (257319 'end of statement')
              if(258210 call _cond_test domore[257316])
              {
                (257327 call(257322 call . this[257022] c"_set_style") style[257147])
                {
                  unknown tmp[258104] "expr temp" "maybe param" "maybe type" "temp"
                  (258106 'move' tmp[258104](257333 call argType[257163] i[258214]))
                  if(258116 call _cond_test(258114 call ||(258108 call == tmp[258104] QIO_CONV_ARG_TYPE_SIGNED[234982])(258111 call == tmp[258104] QIO_CONV_ARG_TYPE_BINARY_SIGNED[234987])))
                  {
                    unknown tmp[257350] "temp"(257349 call _toSigned(257347 call args[257019] i[258214]))
                    (257357 call _check_tuple_var_decl tmp[257350] 2)
                    unknown t[257338](257351 call tmp[257350] 0)
                    unknown ok[257340](257354 call tmp[257350] 1)
                    (257362 'end of statement')
                    if(257415 call _cond_test(257365 call ! ok[257340]))
                    {
                      (257372 call = err[257080](257371 call qio_format_error_arg_mismatch i[258214]))
                    }
                    {
                      if(257408 call _cond_test(257381 call ==(257379 call argType[257163] i[258214]) QIO_CONV_ARG_TYPE_BINARY_SIGNED[234987]))
                      {
                        (257393 call = err[257080](257392 call(399284 call . this[257022] c"_write_signed")(257386 call . style[257147] c"max_width_bytes") t[257338] i[258214]))
                      }
                      {
                        Try
                        {
                          {
                            (257404 call(399290 call . this[257022] c"_writeOne") dynamic[230832] t[257338] origLocale[257074])
                          }
                        }
                      }
                    }
                  }
                  {
                    if(258127 call _cond_test(258125 call ||(258119 call == tmp[258104] QIO_CONV_ARG_TYPE_UNSIGNED[234992])(258122 call == tmp[258104] QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[234997])))
                    {
                      unknown tmp[257436] "temp"(257435 call _toUnsigned(257433 call args[257019] i[258214]))
                      (257443 call _check_tuple_var_decl tmp[257436] 2)
                      unknown t[257424](257437 call tmp[257436] 0)
                      unknown ok[257426](257440 call tmp[257436] 1)
                      (257448 'end of statement')
                      if(257501 call _cond_test(257451 call ! ok[257426]))
                      {
                        (257458 call = err[257080](257457 call qio_format_error_arg_mismatch i[258214]))
                      }
                      {
                        if(257494 call _cond_test(257467 call ==(257465 call argType[257163] i[258214]) QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[234997]))
                        {
                          (257479 call = err[257080](257478 call(399309 call . this[257022] c"_write_unsigned")(257472 call . style[257147] c"max_width_bytes") t[257424] i[258214]))
                        }
                        {
                          Try
                          {
                            {
                              (257490 call(399315 call . this[257022] c"_writeOne") dynamic[230832] t[257424] origLocale[257074])
                            }
                          }
                        }
                      }
                    }
                    {
                      if(258139 call _cond_test(258137 call ||(258131 call == tmp[258104] QIO_CONV_ARG_TYPE_REAL[235002])(258134 call == tmp[258104] QIO_CONV_ARG_TYPE_BINARY_REAL[235007])))
                      {
                        unknown tmp[257522] "temp"(257521 call _toReal(257519 call args[257019] i[258214]))
                        (257529 call _check_tuple_var_decl tmp[257522] 2)
                        unknown t[257510](257523 call tmp[257522] 0)
                        unknown ok[257512](257526 call tmp[257522] 1)
                        (257534 'end of statement')
                        if(257587 call _cond_test(257537 call ! ok[257512]))
                        {
                          (257544 call = err[257080](257543 call qio_format_error_arg_mismatch i[258214]))
                        }
                        {
                          if(257580 call _cond_test(257553 call ==(257551 call argType[257163] i[258214]) QIO_CONV_ARG_TYPE_BINARY_REAL[235007]))
                          {
                            (257565 call = err[257080](257564 call(399334 call . this[257022] c"_write_real")(257558 call . style[257147] c"max_width_bytes") t[257510] i[258214]))
                          }
                          {
                            Try
                            {
                              {
                                (257576 call(399340 call . this[257022] c"_writeOne") dynamic[230832] t[257510] origLocale[257074])
                              }
                            }
                          }
                        }
                      }
                      {
                        if(258151 call _cond_test(258149 call ||(258143 call == tmp[258104] QIO_CONV_ARG_TYPE_IMAG[235012])(258146 call == tmp[258104] QIO_CONV_ARG_TYPE_BINARY_IMAG[235017])))
                        {
                          unknown tmp[257608] "temp"(257607 call _toImag(257605 call args[257019] i[258214]))
                          (257615 call _check_tuple_var_decl tmp[257608] 2)
                          unknown t[257596](257609 call tmp[257608] 0)
                          unknown ok[257598](257612 call tmp[257608] 1)
                          (257620 'end of statement')
                          if(257676 call _cond_test(257623 call ! ok[257598]))
                          {
                            (257630 call = err[257080](257629 call qio_format_error_arg_mismatch i[258214]))
                          }
                          {
                            if(257669 call _cond_test(257639 call ==(257637 call argType[257163] i[258214]) QIO_CONV_ARG_TYPE_BINARY_IMAG[235017]))
                            {
                              (257654 call = err[257080](257653 call(399357 call . this[257022] c"_write_real")(257644 call . style[257147] c"max_width_bytes")(257650 call _cast real(64)[16] t[257596]) i[258214]))
                            }
                            {
                              Try
                              {
                                {
                                  (257665 call(399363 call . this[257022] c"_writeOne") dynamic[230832] t[257596] origLocale[257074])
                                }
                              }
                            }
                          }
                        }
                        {
                          if(258163 call _cond_test(258161 call ||(258155 call == tmp[258104] QIO_CONV_ARG_TYPE_COMPLEX[235022])(258158 call == tmp[258104] QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235027])))
                          {
                            unknown tmp[257697] "temp"(257696 call _toComplex(257694 call args[257019] i[258214]))
                            (257704 call _check_tuple_var_decl tmp[257697] 2)
                            unknown t[257685](257698 call tmp[257697] 0)
                            unknown ok[257687](257701 call tmp[257697] 1)
                            (257709 'end of statement')
                            if(257762 call _cond_test(257712 call ! ok[257687]))
                            {
                              (257719 call = err[257080](257718 call qio_format_error_arg_mismatch i[258214]))
                            }
                            {
                              if(257755 call _cond_test(257728 call ==(257726 call argType[257163] i[258214]) QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235027]))
                              {
                                (257740 call = err[257080](257739 call(399382 call . this[257022] c"_write_complex")(257733 call . style[257147] c"max_width_bytes") t[257685] i[258214]))
                              }
                              {
                                Try
                                {
                                  {
                                    (257751 call(399388 call . this[257022] c"_writeOne") dynamic[230832] t[257685] origLocale[257074])
                                  }
                                }
                              }
                            }
                          }
                          {
                            if(258170 call _cond_test(258167 call == tmp[258104] QIO_CONV_ARG_TYPE_NUMERIC[234977]))
                            {
                              unknown tmp[257782] "temp"(257781 call _toNumeric(257779 call args[257019] i[258214]))
                              (257789 call _check_tuple_var_decl tmp[257782] 2)
                              unknown t[257770](257783 call tmp[257782] 0)
                              unknown ok[257772](257786 call tmp[257782] 1)
                              (257794 'end of statement')
                              if(257820 call _cond_test(257797 call ! ok[257772]))
                              {
                                (257804 call = err[257080](257803 call qio_format_error_arg_mismatch i[258214]))
                              }
                              {
                                Try
                                {
                                  {
                                    (257816 call(399400 call . this[257022] c"_writeOne") dynamic[230832] t[257770] origLocale[257074])
                                  }
                                }
                              }
                            }
                            {
                              if(258177 call _cond_test(258174 call == tmp[258104] QIO_CONV_ARG_TYPE_CHAR[235032]))
                              {
                                unknown tmp[257841] "temp"(257840 call _toChar(257838 call args[257019] i[258214]))
                                (257848 call _check_tuple_var_decl tmp[257841] 2)
                                unknown t[257829](257842 call tmp[257841] 0)
                                unknown ok[257831](257845 call tmp[257841] 1)
                                (257853 'end of statement')
                                if(257883 call _cond_test(257856 call ! ok[257831]))
                                {
                                  (257863 call = err[257080](257862 call qio_format_error_arg_mismatch i[258214]))
                                }
                                {
                                  Try
                                  {
                                    {
                                      (257879 call(399412 call . this[257022] c"_writeOne") dynamic[230832](257873 'new'(257877 call ioChar[238545] t[257829])) origLocale[257074])
                                    }
                                  }
                                }
                              }
                              {
                                if(258184 call _cond_test(258181 call == tmp[258104] QIO_CONV_ARG_TYPE_BINARY_STRING[235042]))
                                {
                                  unknown tmp[257904] "temp"(257903 call _toBytes(257901 call args[257019] i[258214]))
                                  (257911 call _check_tuple_var_decl tmp[257904] 2)
                                  unknown t[257892](257905 call tmp[257904] 0)
                                  unknown ok[257894](257908 call tmp[257904] 1)
                                  (257916 'end of statement')
                                  if(257942 call _cond_test(257919 call ! ok[257894]))
                                  {
                                    (257926 call = err[257080](257925 call qio_format_error_arg_mismatch i[258214]))
                                  }
                                  {
                                    Try
                                    {
                                      {
                                        (257938 call(399425 call . this[257022] c"_writeOne") dynamic[230832] t[257892] origLocale[257074])
                                      }
                                    }
                                  }
                                }
                                {
                                  if(258191 call _cond_test(258188 call == tmp[258104] QIO_CONV_ARG_TYPE_STRING[235037]))
                                  {
                                    unknown tmp[257963] "temp"(257962 call _toString(257960 call args[257019] i[258214]))
                                    (257970 call _check_tuple_var_decl tmp[257963] 2)
                                    unknown t[257951](257964 call tmp[257963] 0)
                                    unknown ok[257953](257967 call tmp[257963] 1)
                                    (257975 'end of statement')
                                    if(258001 call _cond_test(257978 call ! ok[257953]))
                                    {
                                      (257985 call = err[257080](257984 call qio_format_error_arg_mismatch i[258214]))
                                    }
                                    {
                                      Try
                                      {
                                        {
                                          (257997 call(399437 call . this[257022] c"_writeOne") dynamic[230832] t[257951] origLocale[257074])
                                        }
                                      }
                                    }
                                  }
                                  {
                                    if(258198 call _cond_test(258195 call == tmp[258104] QIO_CONV_ARG_TYPE_REGEXP[235052]))
                                    {
                                      (258014 call = err[257080](258013 call qio_format_error_write_regexp))
                                    }
                                    {
                                      if(258205 call _cond_test(258202 call == tmp[258104] QIO_CONV_ARG_TYPE_REPR[235047]))
                                      {
                                        Try
                                        {
                                          {
                                            (258033 call(399446 call . this[257022] c"_writeOne") dynamic[230832](258031 call args[257019] i[258214]) origLocale[257074])
                                          }
                                        }
                                      }
                                      {
                                        (258098 'throw'(258042 'new'(_chpl_manager = _owned[30](?))(258097 call IllegalArgumentError[388690](?)(258068 call +(258065 call + "args("(258063 call _cast string[26] i[258214])) ")")(258095 call + "writef internal error "(258093 call _cast string[26](258091 call argType[257163] i[258214]))))))
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          label _unused_continueLabel[258219]
          label _breakLabel[258218]
        }
        if(258298 call _cond_test(258252 call ! err[257080]))
        {
          if(258277 call _cond_test(258256 call < cur[257120] len[257132]))
          {
            unknown dummy[258259] c_int[20549]
            (258262 'end of statement')
            (258275 call(399462 call . this[257022] c"_format_reader") fmtStr[257012] cur[257120] len[257132] err[257080] conv[257137] gotConv[257142] style[257147] r[257170] 0)
          }
          if(258294 call _cond_test(258284 call < cur[257120] len[257132]))
          {
            (258290 call = err[257080](258289 call qio_format_error_too_few_args))
          }
        }
        (258308 call(258303 call . this[257022] c"_set_style") save_style[257114])
      }
      (258318 'on block' 0 tmp[258313])
    }
    if(258349 call _cond_test err[257080])
    {
      Try
      {
        {
          (258345 call(258323 call . this[257022] c"_ch_ioerror") err[257080] "in channel.writef(fmt:string)")
        }
      }
    }
    (258355 return 1)
  }
  where {
    (257036 call ||(257031 call isStringType t[257010])(257035 call isBytesType t[257010]))
  }
  { scopeless type
    bool[10]
  }
  function channel[237642](?).writef[258369](arg _mt[258374]:_MT[238], arg this[258371]:channel[237642](?) :
  channel[237642](?), arg fmtStr[258366] :
  unknown t[258364]) : _unknown[51] throws "method"
  {
    if(258395 call _cond_test(258388 call !(399483 call . this[258371] c"writing")))
    {
      (258393 call compilerError "writef on read-only channel")
    }
    unknown err[258403](399487 call ENOERR[223566]) syserr[223496]
    (258406 'end of statement')
    const tmp[258574] "const" "temp"
    (258576 'move' tmp[258574](258572 'deref'(258571 '_wide_get_locale'(258408 call . this[258371] c"home"))))
    {
      {
        Try
        {
          {
            (258416 call(258412 call . this[258371] c"lock"))
          }
        }
        Defer
        {
          {
            (258426 call(258422 call . this[258371] c"unlock"))
          }
        }
        unknown save_style[258437](258436 call(258432 call . this[258371] c"_style"))
        (258440 'end of statement')
        unknown cur[258443] 0 size_t[20654]
        (258446 'end of statement')
        unknown len[258455](258453 call _cast size_t[20654](258449 call . fmtStr[258366] c"size")) size_t[20654]
        (258458 'end of statement')
        unknown conv[258460] qio_conv_t[234968]
        (258463 'end of statement')
        unknown gotConv[258465] bool[10]
        (258468 'end of statement')
        unknown style[258470] iostyle[231756]
        (258473 'end of statement')
        unknown end[258475] size_t[20654]
        (258478 'end of statement')
        unknown dummy[258480] c_int[20549]
        (258483 'end of statement')
        unknown r[258487] unmanaged _channel_regexp_info?[415436]
        (258490 'end of statement')
        Defer
        {
          {
            if(258497 call _cond_test r[258487])
            {
              (258494 call chpl__delete r[258487])
            }
          }
        }
        (258516 call(399500 call . this[258371] c"_format_reader") fmtStr[258366] cur[258443] len[258455] err[258403] conv[258460] gotConv[258465] style[258470] r[258487] 0)
        if(258535 call _cond_test(258519 call ! err[258403]))
        {
          if(258530 call _cond_test gotConv[258465])
          {
            (258526 call = err[258403](258525 call qio_format_error_too_few_args))
          }
        }
        if(258559 call _cond_test(258540 call ! err[258403]))
        {
          if(258554 call _cond_test(258544 call < cur[258443] len[258455]))
          {
            (258550 call = err[258403](258549 call qio_format_error_too_few_args))
          }
        }
        (258569 call(258564 call . this[258371] c"_set_style") save_style[258437])
      }
      (258579 'on block' 0 tmp[258574])
    }
    if(258610 call _cond_test err[258403])
    {
      Try
      {
        {
          (258606 call(258584 call . this[258371] c"_ch_ioerror") err[258403] "in channel.writef(fmt:string, ...)")
        }
      }
    }
    (258616 return 1)
  }
  where {
    (258385 call ||(258380 call isStringType t[258364])(258384 call isBytesType t[258364]))
  }
  { scopeless type
    bool[10]
  }
  function channel[237642](?).readf[258630](arg _mt[258640]:_MT[238], arg this[258637]:channel[237642](?) :
  channel[237642](?), arg fmtStr[258627] :
  unknown t[258625], ref arg args[258634]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    if(258675 call _cond_test(399525 call . this[258637] c"writing"))
    {
      (258673 call compilerError "readf on write-only channel")
    }
    const origLocale[258687] "const"(258686 call(258682 call . this[258637] c"getLocaleOfIoRequest"))
    (258690 'end of statement')
    unknown err[258693](399529 call ENOERR[223566]) syserr[223496]
    (258696 'end of statement')
    const tmp[260778] "const" "temp"
    (260780 'move' tmp[260778](260776 'deref'(260775 '_wide_get_locale'(258698 call . this[258637] c"home"))))
    {
      {
        Try
        {
          {
            (258706 call(258702 call . this[258637] c"lock"))
          }
        }
        Defer
        {
          {
            (258716 call(258712 call . this[258637] c"unlock"))
          }
        }
        unknown save_style[258727](258726 call(258722 call . this[258637] c"_style"))
        (258730 'end of statement')
        Defer
        {
          {
            (258737 call(258732 call . this[258637] c"_set_style") save_style[258727])
          }
        }
        unknown cur[258744] 0 size_t[20654]
        (258747 'end of statement')
        unknown len[258756](258754 call _cast size_t[20654](258750 call . fmtStr[258627] c"size")) size_t[20654]
        (258759 'end of statement')
        unknown conv[258761] qio_conv_t[234968]
        (258764 'end of statement')
        unknown gotConv[258766] bool[10]
        (258769 'end of statement')
        unknown style[258771] iostyle[231756]
        (258774 'end of statement')
        unknown end[258776] size_t[20654]
        (258779 'end of statement')
        unknown argType[258787](258785 call *(258782 call + k[258632] 5) c_int[20549])
        (258790 'end of statement')
        unknown r[258794] unmanaged _channel_regexp_info?[415436]
        (258797 'end of statement')
        Defer
        {
          {
            if(258804 call _cond_test r[258794])
            {
              (258801 call chpl__delete r[258794])
            }
          }
        }
        {
          unknown _indexOfInterest[258832] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[258833] "expr temp" "temp"
          (258842 'move' _iterator[258833](258840 call _getIterator(258853 call chpl_direct_range_iter 0(258847 call -(258849 call . argType[258787] c"size") 1) 1)))
          Defer
          {
            {
              (258869 call _freeIterator _iterator[258833])
            }
          }
          { scopeless type
            (258858 'move' _indexOfInterest[258832](258855 call iteratorIndex _iterator[258833]))
          }
          ForLoop[258834]
          {
            unknown i[258862] "index var" "insert auto destroy"
            (258864 'move' i[258862] _indexOfInterest[258832])
            {
              (258828 call =(258826 call argType[258787] i[258862]) QIO_CONV_UNK[234972])
            }
            label _continueLabel[258837]
            _indexOfInterest[258832]
            _iterator[258833]
          }
          label _breakLabel[258838]
        }
        (258882 call = err[258693](258881 call qio_channel_mark 0(399549 call . this[258637] c"_channel_internal")))
        if(260770 call _cond_test(258886 call ! err[258693]))
        {
          Try
          {
            {
              unknown j[258889] 0
              (258892 'end of statement')
              {
                unknown i[260627] 0
                unknown tmp[260628] "maybe param" "temp"
                (260640 'move' tmp[260628](260638 call chpl_compute_low_param_loop_bound 0(258897 call - k[258632] 1)))
                unknown tmp[260629] "maybe param" "temp"
                (260650 'move' tmp[260629](260648 call chpl_compute_high_param_loop_bound 0(260645 call - k[258632] 1)))
                unknown tmp[260630] "maybe param" "temp"
                (260653 'move' tmp[260630] 1)
                ParamForLoop[260655]
                { i[260627] tmp[260628] tmp[260629] tmp[260630]
                  {
                    if(259049 call _cond_test(258903 call <= j[258889] i[260627]))
                    {
                      (258916 call(399557 call . this[258637] c"_format_reader") fmtStr[258627] cur[258744] len[258756] err[258693] conv[258761] gotConv[258766] style[258771] r[258794] 1)
                      if(259045 call _cond_test(258921 call != r[258794] nil[44]))
                      {
                        const rnn[258926] "const"(258924 call postfix! r[258794])
                        (258929 'end of statement')
                        if(259041 call _cond_test(258932 call . rnn[258926] c"hasRegexp"))
                        {
                          if(258956 call _cond_test(258946 call >(258943 call -(258940 call + i[260627](258937 call . rnn[258926] c"ncaptures")) 1) k[258632]))
                          {
                            (258952 call = err[258693](258951 call qio_format_error_too_few_args))
                          }
                          {
                            unknown _indexOfInterest[258998] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[258999] "expr temp" "temp"
                            (259008 'move' _iterator[258999](259006 call _getIterator(259018 call chpl_direct_counted_range_iter 0(259014 call . rnn[258926] c"ncaptures"))))
                            Defer
                            {
                              {
                                (259034 call _freeIterator _iterator[258999])
                              }
                            }
                            { scopeless type
                              (259023 'move' _indexOfInterest[258998](259020 call iteratorIndex _iterator[258999]))
                            }
                            ForLoop[259000]
                            {
                              unknown z[259027] "index var" "insert auto destroy"
                              (259029 'move' z[259027] _indexOfInterest[258998])
                              {
                                if(258993 call _cond_test(258979 call <=(258973 call + i[260627] z[259027])(258976 call . argType[258787] c"size")))
                                {
                                  (258989 call =(258987 call argType[258787](258984 call + i[260627] z[259027])) QIO_CONV_SET_CAPTURE[235117])
                                }
                              }
                              label _continueLabel[259003]
                              _indexOfInterest[258998]
                              _iterator[258999]
                            }
                            label _breakLabel[259004]
                          }
                        }
                      }
                    }
                    (259061 call(399580 call . this[258637] c"_conv_helper") err[258693] conv[258761] gotConv[258766] j[258889] argType[258787])
                    unknown domore[259078](259077 call(399589 call . this[258637] c"_conv_sethandler") err[258693](259069 call argType[258787] i[260627]) style[258771] i[260627](259075 call args[258634] i[260627]) 0)
                    (259081 'end of statement')
                    if(260623 call _cond_test domore[259078])
                    {
                      (259089 call(259084 call . this[258637] c"_set_style") style[258771])
                      {
                        unknown tmp[260510] "expr temp" "maybe param" "maybe type" "temp"
                        (260512 'move' tmp[260510](259095 call argType[258787] i[260627]))
                        if(260522 call _cond_test(260520 call ||(260514 call == tmp[260510] QIO_CONV_ARG_TYPE_SIGNED[234982])(260517 call == tmp[260510] QIO_CONV_ARG_TYPE_BINARY_SIGNED[234987])))
                        {
                          unknown tmp[259112] "temp"(259111 call _toSigned(259109 call args[258634] i[260627]))
                          (259119 call _check_tuple_var_decl tmp[259112] 2)
                          unknown t[259100](259113 call tmp[259112] 0)
                          unknown ok[259102](259116 call tmp[259112] 1)
                          (259124 'end of statement')
                          if(259203 call _cond_test(259127 call ! ok[259102]))
                          {
                            (259134 call = err[258693](259133 call qio_format_error_arg_mismatch i[260627]))
                          }
                          {
                            unknown ti[259139] int(64)[13]
                            (259142 'end of statement')
                            if(259176 call _cond_test(259149 call ==(259147 call argType[258787] i[260627]) QIO_CONV_ARG_TYPE_BINARY_SIGNED[234987]))
                            {
                              (259161 call = err[258693](259160 call(399617 call . this[258637] c"_read_signed")(259154 call . style[258771] c"max_width_bytes") ti[259139] i[260627]))
                            }
                            {
                              Try
                              {
                                {
                                  (259172 call(399623 call . this[258637] c"_readOne") dynamic[230832] ti[259139] origLocale[258687])
                                }
                              }
                            }
                            if(259198 call _cond_test(259183 call ! err[258693]))
                            {
                              (259195 call = err[258693](259194 call _setIfPrimitive(259190 call args[258634] i[260627]) ti[259139] i[260627]))
                            }
                          }
                        }
                        {
                          if(260533 call _cond_test(260531 call ||(260525 call == tmp[260510] QIO_CONV_ARG_TYPE_UNSIGNED[234992])(260528 call == tmp[260510] QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[234997])))
                          {
                            unknown tmp[259224] "temp"(259223 call _toUnsigned(259221 call args[258634] i[260627]))
                            (259231 call _check_tuple_var_decl tmp[259224] 2)
                            unknown t[259212](259225 call tmp[259224] 0)
                            unknown ok[259214](259228 call tmp[259224] 1)
                            (259236 'end of statement')
                            if(259315 call _cond_test(259239 call ! ok[259214]))
                            {
                              (259246 call = err[258693](259245 call qio_format_error_arg_mismatch i[260627]))
                            }
                            {
                              unknown ti[259251] uint(64)[115]
                              (259254 'end of statement')
                              if(259288 call _cond_test(259261 call ==(259259 call argType[258787] i[260627]) QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[234997]))
                              {
                                (259273 call = err[258693](259272 call(399648 call . this[258637] c"_read_unsigned")(259266 call . style[258771] c"max_width_bytes") ti[259251] i[260627]))
                              }
                              {
                                Try
                                {
                                  {
                                    (259284 call(399654 call . this[258637] c"_readOne") dynamic[230832] ti[259251] origLocale[258687])
                                  }
                                }
                              }
                              if(259310 call _cond_test(259295 call ! err[258693]))
                              {
                                (259307 call = err[258693](259306 call _setIfPrimitive(259302 call args[258634] i[260627]) ti[259251] i[260627]))
                              }
                            }
                          }
                          {
                            if(260545 call _cond_test(260543 call ||(260537 call == tmp[260510] QIO_CONV_ARG_TYPE_REAL[235002])(260540 call == tmp[260510] QIO_CONV_ARG_TYPE_BINARY_REAL[235007])))
                            {
                              unknown tmp[259336] "temp"(259335 call _toReal(259333 call args[258634] i[260627]))
                              (259343 call _check_tuple_var_decl tmp[259336] 2)
                              unknown t[259324](259337 call tmp[259336] 0)
                              unknown ok[259326](259340 call tmp[259336] 1)
                              (259348 'end of statement')
                              if(259427 call _cond_test(259351 call ! ok[259326]))
                              {
                                (259358 call = err[258693](259357 call qio_format_error_arg_mismatch i[260627]))
                              }
                              {
                                unknown ti[259363] real(64)[16]
                                (259366 'end of statement')
                                if(259400 call _cond_test(259373 call ==(259371 call argType[258787] i[260627]) QIO_CONV_ARG_TYPE_BINARY_REAL[235007]))
                                {
                                  (259385 call = err[258693](259384 call(399679 call . this[258637] c"_read_real")(259378 call . style[258771] c"max_width_bytes") ti[259363] i[260627]))
                                }
                                {
                                  Try
                                  {
                                    {
                                      (259396 call(399685 call . this[258637] c"_readOne") dynamic[230832] ti[259363] origLocale[258687])
                                    }
                                  }
                                }
                                if(259422 call _cond_test(259407 call ! err[258693]))
                                {
                                  (259419 call = err[258693](259418 call _setIfPrimitive(259414 call args[258634] i[260627]) ti[259363] i[260627]))
                                }
                              }
                            }
                            {
                              if(260557 call _cond_test(260555 call ||(260549 call == tmp[260510] QIO_CONV_ARG_TYPE_IMAG[235012])(260552 call == tmp[260510] QIO_CONV_ARG_TYPE_BINARY_IMAG[235017])))
                              {
                                unknown tmp[259448] "temp"(259447 call _toImag(259445 call args[258634] i[260627]))
                                (259455 call _check_tuple_var_decl tmp[259448] 2)
                                unknown t[259436](259449 call tmp[259448] 0)
                                unknown ok[259438](259452 call tmp[259448] 1)
                                (259460 'end of statement')
                                if(259552 call _cond_test(259463 call ! ok[259438]))
                                {
                                  (259470 call = err[258693](259469 call qio_format_error_arg_mismatch i[260627]))
                                }
                                {
                                  unknown ti[259475] imag(64)[130]
                                  (259478 'end of statement')
                                  if(259526 call _cond_test(259485 call ==(259483 call argType[258787] i[260627]) QIO_CONV_ARG_TYPE_BINARY_IMAG[235017]))
                                  {
                                    unknown tr[259488] real(64)[16]
                                    (259491 'end of statement')
                                    (259503 call = err[258693](259502 call(399708 call . this[258637] c"_read_real")(259496 call . style[258771] c"max_width_bytes") tr[259488] i[260627]))
                                    (259511 call = ti[259475](259509 call _cast imag(64)[130] tr[259488]))
                                  }
                                  {
                                    Try
                                    {
                                      {
                                        (259522 call(399716 call . this[258637] c"_readOne") dynamic[230832] ti[259475] origLocale[258687])
                                      }
                                    }
                                  }
                                  if(259547 call _cond_test(259532 call ! err[258693]))
                                  {
                                    (259544 call = err[258693](259543 call _setIfPrimitive(259539 call args[258634] i[260627]) ti[259475] i[260627]))
                                  }
                                }
                              }
                              {
                                if(260569 call _cond_test(260567 call ||(260561 call == tmp[260510] QIO_CONV_ARG_TYPE_COMPLEX[235022])(260564 call == tmp[260510] QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235027])))
                                {
                                  unknown tmp[259573] "temp"(259572 call _toComplex(259570 call args[258634] i[260627]))
                                  (259580 call _check_tuple_var_decl tmp[259573] 2)
                                  unknown t[259561](259574 call tmp[259573] 0)
                                  unknown ok[259563](259577 call tmp[259573] 1)
                                  (259585 'end of statement')
                                  if(259664 call _cond_test(259588 call ! ok[259563]))
                                  {
                                    (259595 call = err[258693](259594 call qio_format_error_arg_mismatch i[260627]))
                                  }
                                  {
                                    unknown ti[259600] complex(128)[140]
                                    (259603 'end of statement')
                                    if(259637 call _cond_test(259610 call ==(259608 call argType[258787] i[260627]) QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235027]))
                                    {
                                      (259622 call = err[258693](259621 call(399741 call . this[258637] c"_read_complex")(259615 call . style[258771] c"max_width_bytes") ti[259600] i[260627]))
                                    }
                                    {
                                      Try
                                      {
                                        {
                                          (259633 call(399747 call . this[258637] c"_readOne") dynamic[230832] ti[259600] origLocale[258687])
                                        }
                                      }
                                    }
                                    if(259659 call _cond_test(259644 call ! err[258693]))
                                    {
                                      (259656 call = err[258693](259655 call _setIfPrimitive(259651 call args[258634] i[260627]) ti[259600] i[260627]))
                                    }
                                  }
                                }
                                {
                                  if(260576 call _cond_test(260573 call == tmp[260510] QIO_CONV_ARG_TYPE_NUMERIC[234977]))
                                  {
                                    unknown tmp[259684] "temp"(259683 call _toNumeric(259681 call args[258634] i[260627]))
                                    (259691 call _check_tuple_var_decl tmp[259684] 2)
                                    unknown t[259672](259685 call tmp[259684] 0)
                                    unknown ok[259674](259688 call tmp[259684] 1)
                                    (259696 'end of statement')
                                    if(259749 call _cond_test(259699 call ! ok[259674]))
                                    {
                                      (259706 call = err[258693](259705 call qio_format_error_arg_mismatch i[260627]))
                                    }
                                    {
                                      unknown ti[259711] t[259672]
                                      (259714 'end of statement')
                                      Try
                                      {
                                        {
                                          (259724 call(399766 call . this[258637] c"_readOne") dynamic[230832] ti[259711] origLocale[258687])
                                        }
                                      }
                                      if(259744 call _cond_test(259729 call ! err[258693]))
                                      {
                                        (259741 call = err[258693](259740 call _setIfPrimitive(259736 call args[258634] i[260627]) ti[259711] i[260627]))
                                      }
                                    }
                                  }
                                  {
                                    if(260583 call _cond_test(260580 call == tmp[260510] QIO_CONV_ARG_TYPE_CHAR[235032]))
                                    {
                                      unknown tmp[259769] "temp"(259768 call _toChar(259766 call args[258634] i[260627]))
                                      (259776 call _check_tuple_var_decl tmp[259769] 2)
                                      unknown t[259757](259770 call tmp[259769] 0)
                                      unknown ok[259759](259773 call tmp[259769] 1)
                                      (259781 'end of statement')
                                      unknown chr[259788](259783 'new'(259787 call ioChar[238545] t[259757]))
                                      (259791 'end of statement')
                                      if(259816 call _cond_test(259793 call ! ok[259759]))
                                      {
                                        (259800 call = err[258693](259799 call qio_format_error_arg_mismatch i[260627]))
                                      }
                                      {
                                        Try
                                        {
                                          {
                                            (259812 call(399786 call . this[258637] c"_readOne") dynamic[230832] chr[259788] origLocale[258687])
                                          }
                                        }
                                      }
                                      if(259836 call _cond_test(259822 call ! err[258693]))
                                      {
                                        (259834 call _setIfChar(259828 call args[258634] i[260627])(259831 call . chr[259788] c"ch"))
                                      }
                                    }
                                    {
                                      if(260590 call _cond_test(260587 call == tmp[260510] QIO_CONV_ARG_TYPE_BINARY_STRING[235042]))
                                      {
                                        unknown tmp[259857] "temp"(259856 call _toBytes(259854 call args[258634] i[260627]))
                                        (259864 call _check_tuple_var_decl tmp[259857] 2)
                                        unknown t[259845](259858 call tmp[259857] 0)
                                        unknown ok[259847](259861 call tmp[259857] 1)
                                        (259869 'end of statement')
                                        if(259895 call _cond_test(259872 call ! ok[259847]))
                                        {
                                          (259879 call = err[258693](259878 call qio_format_error_arg_mismatch i[260627]))
                                        }
                                        {
                                          Try
                                          {
                                            {
                                              (259891 call(399801 call . this[258637] c"_readOne") dynamic[230832] t[259845] origLocale[258687])
                                            }
                                          }
                                        }
                                        if(259916 call _cond_test(259901 call ! err[258693]))
                                        {
                                          (259913 call = err[258693](259912 call _setIfPrimitive(259908 call args[258634] i[260627]) t[259845] i[260627]))
                                        }
                                      }
                                      {
                                        if(260597 call _cond_test(260594 call == tmp[260510] QIO_CONV_ARG_TYPE_STRING[235037]))
                                        {
                                          unknown tmp[259937] "temp"(259936 call _toString(259934 call args[258634] i[260627]))
                                          (259944 call _check_tuple_var_decl tmp[259937] 2)
                                          unknown t[259925](259938 call tmp[259937] 0)
                                          unknown ok[259927](259941 call tmp[259937] 1)
                                          (259949 'end of statement')
                                          if(259975 call _cond_test(259952 call ! ok[259927]))
                                          {
                                            (259959 call = err[258693](259958 call qio_format_error_arg_mismatch i[260627]))
                                          }
                                          {
                                            Try
                                            {
                                              {
                                                (259971 call(399819 call . this[258637] c"_readOne") dynamic[230832] t[259925] origLocale[258687])
                                              }
                                            }
                                          }
                                          if(259996 call _cond_test(259981 call ! err[258693]))
                                          {
                                            (259993 call = err[258693](259992 call _setIfPrimitive(259988 call args[258634] i[260627]) t[259925] i[260627]))
                                          }
                                        }
                                        {
                                          if(260604 call _cond_test(260601 call == tmp[260510] QIO_CONV_ARG_TYPE_REGEXP[235052]))
                                          {
                                            unknown tmp[260017] "temp"(260016 call _toRegexp(260014 call args[258634] i[260627]))
                                            (260024 call _check_tuple_var_decl tmp[260017] 2)
                                            unknown t[260005](260018 call tmp[260017] 0)
                                            unknown ok[260007](260021 call tmp[260017] 1)
                                            (260029 'end of statement')
                                            if(260223 call _cond_test(260032 call ! ok[260007]))
                                            {
                                              (260039 call = err[258693](260038 call qio_format_error_arg_mismatch i[260627]))
                                            }
                                            {
                                              if(260057 call _cond_test(260045 call == r[258794] nil[44]))
                                              {
                                                (260054 call = r[258794](260050 'new'(_chpl_manager = unmanaged[220](?))(260053 call _channel_regexp_info[398571](?))))
                                              }
                                              const rnn[260066] "const"(260064 call postfix! r[258794])
                                              (260069 'end of statement')
                                              (260075 call(260071 call . rnn[260066] c"clear"))
                                              (260087 call =(260078 call . rnn[260066] c"theRegexp")(260084 call . t[260005] c"_regexp"))
                                              (260095 call =(260091 call . rnn[260066] c"hasRegexp") 1)
                                              (260103 call =(260099 call . rnn[260066] c"releaseRegexp") 0)
                                              (260113 call(399841 call . this[258637] c"_match_regexp_if_needed") cur[258744] len[258756] err[258693] style[258771] rnn[260066])
                                              if(260136 call _cond_test(260126 call >(260123 call -(260120 call + i[260627](260117 call . rnn[260066] c"ncaptures")) 1) k[258632]))
                                              {
                                                (260132 call = err[258693](260131 call qio_format_error_too_few_args))
                                              }
                                              {
                                                unknown _indexOfInterest[260180] "an _indexOfInterest or chpl__followIdx variable" "temp"
                                                unknown _iterator[260181] "expr temp" "temp"
                                                (260190 'move' _iterator[260181](260188 call _getIterator(260200 call chpl_direct_counted_range_iter 0(260196 call . rnn[260066] c"ncaptures"))))
                                                Defer
                                                {
                                                  {
                                                    (260216 call _freeIterator _iterator[260181])
                                                  }
                                                }
                                                { scopeless type
                                                  (260205 'move' _indexOfInterest[260180](260202 call iteratorIndex _iterator[260181]))
                                                }
                                                ForLoop[260182]
                                                {
                                                  unknown z[260209] "index var" "insert auto destroy"
                                                  (260211 'move' z[260209] _indexOfInterest[260180])
                                                  {
                                                    if(260175 call _cond_test(260158 call <=(260152 call + i[260627] z[260209])(260155 call . argType[258787] c"size")))
                                                    {
                                                      (260171 call =(260169 call argType[258787](260166 call +(260163 call + i[260627] z[260209]) 1)) QIO_CONV_SET_CAPTURE[235117])
                                                    }
                                                  }
                                                  label _continueLabel[260185]
                                                  _indexOfInterest[260180]
                                                  _iterator[260181]
                                                }
                                                label _breakLabel[260186]
                                              }
                                            }
                                          }
                                          {
                                            if(260611 call _cond_test(260608 call == tmp[260510] QIO_CONV_ARG_TYPE_REPR[235047]))
                                            {
                                              Try
                                              {
                                                {
                                                  (260242 call(399860 call . this[258637] c"_readOne") dynamic[230832](260240 call args[258634] i[260627]) origLocale[258687])
                                                }
                                              }
                                            }
                                            {
                                              if(260618 call _cond_test(260615 call == tmp[260510] QIO_CONV_SET_CAPTURE[235117]))
                                              {
                                                if(260455 call _cond_test(260253 call == r[258794] nil[44]))
                                                {
                                                  (260259 call = err[258693](260258 call qio_format_error_bad_regexp))
                                                }
                                                {
                                                  const rnn[260266] "const"(260264 call postfix! r[258794])
                                                  (260269 'end of statement')
                                                  (260278 call(399871 call . this[258637] c"_match_regexp_if_needed") cur[258744] len[258756] err[258693] style[258771] rnn[260266])
                                                  if(260451 call _cond_test(260290 call >=(260283 call . rnn[260266] c"capturei")(260287 call . rnn[260266] c"ncaptures")))
                                                  {
                                                    (260296 call = err[258693](260295 call qio_format_error_bad_regexp))
                                                  }
                                                  {
                                                    if(260438 call _cond_test(260307 call _isIoPrimitiveType(260305 'typeof'(260304 call args[258634] i[260627]))))
                                                    {
                                                      Try
                                                      {
                                                        {
                                                          if(260405 call _cond_test(260314 call ==(260312 'typeof'(260311 call args[258634] i[260627])) string[26]))
                                                          {
                                                            (260335 call =(260319 call args[258634] i[260627])(260334 call(260330 call .(260329 call(260321 call . rnn[260266] c"capArr")(260325 call . rnn[260266] c"capturei")) c"decode")))
                                                          }
                                                          {
                                                            if(260399 call _cond_test(260345 call isEnumType(260343 'typeof'(260342 call args[258634] i[260627]))))
                                                            {
                                                              (260372 call =(260349 call args[258634] i[260627])(260370 call _cast(260369 'typeof'(260368 call args[258634] i[260627]))(260364 call(260360 call .(260359 call(260351 call . rnn[260266] c"capArr")(260355 call . rnn[260266] c"capturei")) c"decode"))))
                                                            }
                                                            {
                                                              (260396 call =(260378 call args[258634] i[260627])(260394 call _cast(260393 'typeof'(260392 call args[258634] i[260627]))(260388 call(260380 call . rnn[260266] c"capArr")(260384 call . rnn[260266] c"capturei"))))
                                                            }
                                                          }
                                                        }
                                                      }
                                                      Catch e : DecodeError
                                                      {
                                                        unknown tmp[354568] "temp"(354572 'dynamic_cast' unmanaged DecodeError?[415511](354571 'current error'))
                                                        if(354575 '!=' tmp[354568] nil[44])
                                                        {
                                                          unknown e[354581](354586 'new'(354584 call _owned[30](?)(354582 'to non nilable class' tmp[354568])))
                                                          {
                                                            (260421 call = err[258693](260420 call qio_format_error_arg_mismatch i[260627]))
                                                          }
                                                        }
                                                        {
                                                        }
                                                      }
                                                      Catch
                                                      {
                                                        unknown tmp[354589] "temp"(354592 'current error')
                                                        unknown chpl_anon_error[354595](354600 'new'(354598 call _owned[30](?)(354596 'to non nilable class' tmp[354589])))
                                                        {
                                                          (260430 call = err[258693](260429 call qio_format_error_bad_regexp))
                                                        }
                                                      }
                                                    }
                                                    (260448 call +=(260444 call . rnn[260266] c"capturei") 1)
                                                  }
                                                }
                                              }
                                              {
                                                (260504 'throw'(260464 'new'(_chpl_manager = _owned[30](?))(260503 call IllegalArgumentError[388690](?)(260474 call +(260471 call + "args("(260469 call _cast string[26] i[260627])) ")")(260501 call + "readf internal error "(260499 call _cast string[26](260497 call argType[258787] i[260627]))))))
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                label _unused_continueLabel[260632]
                label _breakLabel[260631]
              }
              if(260695 call _cond_test(260665 call ! err[258693]))
              {
                if(260690 call _cond_test(260669 call < cur[258744] len[258756]))
                {
                  unknown dummy[260672] c_int[20549]
                  (260675 'end of statement')
                  (260688 call(399910 call . this[258637] c"_format_reader") fmtStr[258627] cur[258744] len[258756] err[258693] conv[258761] gotConv[258766] style[258771] r[258794] 1)
                }
              }
              if(260719 call _cond_test(260700 call ! err[258693]))
              {
                if(260714 call _cond_test(260704 call < cur[258744] len[258756]))
                {
                  (260710 call = err[258693](260709 call qio_format_error_too_few_args))
                }
              }
              if(260738 call _cond_test(260724 call ! err[258693]))
              {
                (260729 call qio_channel_commit_unlocked(399928 call . this[258637] c"_channel_internal"))
              }
              {
                (260735 call qio_channel_revert_unlocked(399933 call . this[258637] c"_channel_internal"))
              }
            }
          }
          Catch thrownError : SystemError
          {
            unknown tmp[354603] "temp"(354607 'dynamic_cast' unmanaged SystemError?[415523](354606 'current error'))
            if(354610 '!=' tmp[354603] nil[44])
            {
              unknown thrownError[354616](354621 'new'(354619 call _owned[30](?)(354617 'to non nilable class' tmp[354603])))
              {
                if(260756 call _cond_test(260751 call !=(260747 call . thrownError[354616] c"err")(399937 call EEOF[224136])))
                {
                  (260754 'throw' thrownError[354616])
                }
                (260764 call = err[258693](399941 call EEOF[224136]))
              }
            }
            {
            }
          }
        }
      }
      (260783 'on block' 0 tmp[260778])
    }
    if(260833 call _cond_test(260787 call ! err[258693]))
    {
      (260790 return 1)
    }
    {
      if(260829 call _cond_test(260795 call == err[258693](399945 call EEOF[224136])))
      {
        (260798 return 0)
      }
      {
        Try
        {
          {
            (260824 call(260802 call . this[258637] c"_ch_ioerror") err[258693] "in channel.readf(fmt:string, ...)")
          }
        }
      }
    }
    (260839 return 0)
  }
  where {
    (258651 call ||(258646 call isStringType t[258625])(258650 call isBytesType t[258625]))
  }
  { scopeless type
    bool[10]
  }
  function channel[237642](?).readf[260853](arg _mt[260858]:_MT[238], arg this[260855]:channel[237642](?) :
  channel[237642](?), arg fmtStr[260850] :
  unknown t[260848]) : _unknown[51] throws "method" "no doc"
  {
    if(260876 call _cond_test(399952 call . this[260855] c"writing"))
    {
      (260874 call compilerError "readf on write-only channel")
    }
    unknown err[260884](399956 call ENOERR[223566]) syserr[223496]
    (260887 'end of statement')
    const tmp[261086] "const" "temp"
    (261088 'move' tmp[261086](261084 'deref'(261083 '_wide_get_locale'(260889 call . this[260855] c"home"))))
    {
      {
        Try
        {
          {
            (260897 call(260893 call . this[260855] c"lock"))
          }
        }
        Defer
        {
          {
            (260907 call(260903 call . this[260855] c"unlock"))
          }
        }
        unknown save_style[260918](260917 call(260913 call . this[260855] c"_style"))
        (260921 'end of statement')
        Defer
        {
          {
            (260928 call(260923 call . this[260855] c"_set_style") save_style[260918])
          }
        }
        unknown cur[260935] 0 size_t[20654]
        (260938 'end of statement')
        unknown len[260947](260945 call _cast size_t[20654](260941 call . fmtStr[260850] c"size")) size_t[20654]
        (260950 'end of statement')
        unknown conv[260952] qio_conv_t[234968]
        (260955 'end of statement')
        unknown gotConv[260957] bool[10]
        (260960 'end of statement')
        unknown style[260962] iostyle[231756]
        (260965 'end of statement')
        unknown end[260967] size_t[20654]
        (260970 'end of statement')
        unknown dummy[260972] c_int[20549]
        (260975 'end of statement')
        unknown r[260979] unmanaged _channel_regexp_info?[415436]
        (260982 'end of statement')
        Defer
        {
          {
            if(260989 call _cond_test r[260979])
            {
              (260986 call chpl__delete r[260979])
            }
          }
        }
        (261003 call = err[260884](261002 call qio_channel_mark 0(399972 call . this[260855] c"_channel_internal")))
        if(261036 call _cond_test(261007 call ! err[260884]))
        {
          (261020 call(399977 call . this[260855] c"_format_reader") fmtStr[260850] cur[260935] len[260947] err[260884] conv[260952] gotConv[260957] style[260962] r[260979] 1)
          if(261032 call _cond_test gotConv[260957])
          {
            (261028 call = err[260884](261027 call qio_format_error_too_few_args))
          }
        }
        if(261060 call _cond_test(261041 call ! err[260884]))
        {
          if(261055 call _cond_test(261045 call < cur[260935] len[260947]))
          {
            (261051 call = err[260884](261050 call qio_format_error_too_few_args))
          }
        }
        if(261079 call _cond_test(261065 call ! err[260884]))
        {
          (261070 call qio_channel_commit_unlocked(399997 call . this[260855] c"_channel_internal"))
        }
        {
          (261076 call qio_channel_revert_unlocked(400002 call . this[260855] c"_channel_internal"))
        }
      }
      (261091 'on block' 0 tmp[261086])
    }
    if(261144 call _cond_test(261095 call ! err[260884]))
    {
      (261098 return 1)
    }
    {
      if(261140 call _cond_test(261103 call == err[260884](400007 call EEOF[224136])))
      {
        (261106 return 0)
      }
      {
        Try
        {
          {
            (261132 call(261110 call . this[260855] c"_ch_ioerror") err[260884] "in channel.readf(fmt:string)")
          }
        }
        (261138 return 0)
      }
    }
  }
  where {
    (260868 call ||(260863 call isStringType t[260848])(260867 call isBytesType t[260848]))
  }
  function readf[261158](arg fmt[261155] :
  string[26], ref arg args[261162]:_any[178](?) ...) : _unknown[51] throws
  {
    (261178 return(261177 'try-expr'(261176 call(261169 call . stdin[250120] c"readf") fmt[261155](261175 'expand_tuple' args[261162]))))
  }
  { scopeless type
    bool[10]
  }
  function readf[261190](arg fmt[261187] :
  string[26]) : _unknown[51] throws "no doc"
  {
    (261201 return(261200 'try-expr'(261199 call(261194 call . stdin[250120] c"readf") fmt[261187])))
  }
  { scopeless type
    bool[10]
  }
  function channel[237642](?).skipField[261210](arg _mt[261215]:_MT[238], arg this[261212]:channel[237642](?) :
  channel[237642](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown err[261219](400014 call ENOERR[223566]) syserr[223496]
    (261222 'end of statement')
    const tmp[261286] "const" "temp"
    (261288 'move' tmp[261286](261284 'deref'(261283 '_wide_get_locale'(261225 call . this[261212] c"home"))))
    {
      {
        Try
        {
          {
            (261233 call(261229 call . this[261212] c"lock"))
          }
        }
        Defer
        {
          {
            (261243 call(261239 call . this[261212] c"unlock"))
          }
        }
        unknown st[261255](261254 call(261249 call . this[261212] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
        (261258 'end of statement')
        if(261279 call _cond_test(261261 call == st[261255] QIO_AGGREGATE_FORMAT_JSON[19717]))
        {
          (261269 call = err[261219](261268 call qio_channel_skip_json_field 0(400022 call . this[261212] c"_channel_internal")))
        }
        {
          (261275 call = err[261219] ENOTSUP[224626])
        }
      }
      (261291 'on block' 0 tmp[261286])
    }
    if(261322 call _cond_test err[261219])
    {
      Try
      {
        {
          (261318 call(261296 call . this[261212] c"_ch_ioerror") err[261219] "in skipField")
        }
      }
    }
  }
  function string[26].format[261337](arg _mt[261342]:_MT[238], arg this[261339]:string[26] :
  string[26], arg args[261334]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    Try
    {
      {
        (261351 return(261350 call chpl_do_format this[261339](261349 'expand_tuple' args[261334])))
      }
    }
    Catch e : IllegalArgumentError
    {
      unknown tmp[354624] "temp"(354628 'dynamic_cast' unmanaged IllegalArgumentError?[415529](354627 'current error'))
      if(354631 '!=' tmp[354624] nil[44])
      {
        unknown e[354637](354642 'new'(354640 call _owned[30](?)(354638 'to non nilable class' tmp[354624])))
        {
          (261359 'throw' e[354637])
        }
      }
      {
      }
    }
    Catch e : SystemError
    {
      unknown tmp[354645] "temp"(354649 'dynamic_cast' unmanaged SystemError?[415523](354648 'current error'))
      if(354652 '!=' tmp[354645] nil[44])
      {
        unknown e[354658](354663 'new'(354661 call _owned[30](?)(354659 'to non nilable class' tmp[354645])))
        {
          Try
          {
            {
              (261389 call ioerror(261368 call . e[354658] c"err") "in string.format")
            }
          }
        }
      }
      {
      }
    }
    Catch e : DecodeError
    {
      unknown tmp[354666] "temp"(354670 'dynamic_cast' unmanaged DecodeError?[415511](354669 'current error'))
      if(354673 '!=' tmp[354666] nil[44])
      {
        unknown e[354679](354684 'new'(354682 call _owned[30](?)(354680 'to non nilable class' tmp[354666])))
        {
          Try
          {
            {
              (261405 call ioerror(261401 call _cast syserr[223496] EILSEQ[224356]) "in string.format")
            }
          }
        }
      }
      {
      }
    }
    Catch
    {
      unknown tmp[354687] "temp"(354690 'current error')
      unknown chpl_anon_error[354693](354698 'new'(354696 call _owned[30](?)(354694 'to non nilable class' tmp[354687])))
      {
        Try
        {
          {
            (261418 call ioerror(261414 call _cast syserr[223496] EINVAL[224371]) "in string.format")
          }
        }
      }
    }
    (261444 return "")
  }
  { scopeless type
    string[26]
  }
  function bytes[24].format[261457](arg _mt[261462]:_MT[238], arg this[261459]:bytes[24] :
  bytes[24], arg args[261454]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    Try
    {
      {
        (261471 return(261470 call chpl_do_format this[261459](261469 'expand_tuple' args[261454])))
      }
    }
    Catch e : SystemError
    {
      unknown tmp[354701] "temp"(354705 'dynamic_cast' unmanaged SystemError?[415523](354704 'current error'))
      if(354708 '!=' tmp[354701] nil[44])
      {
        unknown e[354714](354719 'new'(354717 call _owned[30](?)(354715 'to non nilable class' tmp[354701])))
        {
          Try
          {
            {
              (261501 call ioerror(261480 call . e[354714] c"err") "in bytes.format")
            }
          }
        }
      }
      {
      }
    }
    Catch
    {
      unknown tmp[354722] "temp"(354725 'current error')
      unknown chpl_anon_error[354728](354733 'new'(354731 call _owned[30](?)(354729 'to non nilable class' tmp[354722])))
      {
        Try
        {
          {
            (261514 call ioerror(261510 call _cast syserr[223496] EINVAL[224371]) "in bytes.format")
          }
        }
      }
    }
    (261539 return b"")
  }
  { scopeless type
    bytes[24]
  }
  function chpl_do_format[261551](arg fmt[261548] :
  unknown t[261546], arg args[261555]:_any[178](?) ...) : _unknown[51] throws "inline" "private"
  {
    unknown f[261573](261572 'try-expr'(261571 call openmem))
    (261576 'end of statement')
    Defer
    {
      {
        Try
        {
          {
            (261583 call(261579 call . f[261573] c"close"))
          }
        }
        Catch
        {
          unknown tmp[354736] "temp"(354739 'current error')
          unknown chpl_anon_error[354742](354747 'new'(354745 call _owned[30](?)(354743 'to non nilable class' tmp[354736])))
          {
          }
        }
      }
    }
    unknown offset[261596] 0 int(64)[13]
    (261599 'end of statement')
    {
      unknown w[261609](261608 'try-expr'(261607 call(261601 call . f[261573] c"writer")(locking = 0)))
      (261612 'end of statement')
      Defer
      {
        {
          Try
          {
            {
              (261619 call(261615 call . w[261609] c"close"))
            }
          }
          Catch
          {
            unknown tmp[354750] "temp"(354753 'current error')
            unknown chpl_anon_error[354756](354761 'new'(354759 call _owned[30](?)(354757 'to non nilable class' tmp[354750])))
            {
            }
          }
        }
      }
      Try
      {
        {
          (261638 call(261631 call . w[261609] c"writef") fmt[261548](261637 'expand_tuple' args[261555]))
        }
      }
      (261649 call = offset[261596](261648 call(261644 call . w[261609] c"offset")))
      Try
      {
        {
          (261657 call(261653 call . w[261609] c"close"))
        }
      }
    }
    unknown buf[261672](261671 call c_malloc(261665 call uint(64)[115] 8)(261669 call + offset[261596] 1))
    (261675 'end of statement')
    unknown r[261685](261684 'try-expr'(261683 call(261677 call . f[261573] c"reader")(locking = 0)))
    (261688 'end of statement')
    Defer
    {
      {
        Try
        {
          {
            (261694 call(261690 call . r[261685] c"close"))
          }
        }
        Catch
        {
          unknown tmp[354764] "temp"(354767 'current error')
          unknown chpl_anon_error[354770](354775 'new'(354773 call _owned[30](?)(354771 'to non nilable class' tmp[354764])))
          {
          }
        }
      }
    }
    Try
    {
      {
        (261715 call(261706 call . r[261685] c"readBytes") buf[261672](261713 call _cast ssize_t[20647] offset[261596]))
      }
    }
    Try
    {
      {
        (261724 call(261720 call . r[261685] c"close"))
      }
    }
    Try
    {
      {
        (261733 call(261729 call . f[261573] c"close"))
      }
    }
    (261742 call =(261740 call buf[261672] offset[261596]) 0)
    if(261771 call _cond_test(261748 call isStringType t[261546]))
    {
      (261758 return(261757 call createStringWithOwnedBuffer buf[261672] offset[261596](261755 call + offset[261596] 1)))
    }
    {
      (261769 return(261768 call createBytesWithOwnedBuffer buf[261672] offset[261596](261766 call + offset[261596] 1)))
    }
  }
  where {
    (261567 call ||(261562 call isStringType t[261546])(261566 call isBytesType t[261546]))
  }
  { scopeless type
    t[261546]
  }
  function qio_regexp_channel_match[261790](const  ref arg re[261787] :
  qio_regexp_t[293518], arg threadsafe[261793] :
  c_int[20549], arg ch[261797] :
  qio_channel_ptr_t[231377], arg maxlen[261804] :
  (261803 call int(64)[13] 64), arg anchor[261808] :
  c_int[20549], arg can_discard[261812] :
  bool[10], arg keep_unmatched[261816] :
  bool[10], arg keep_whole_pattern[261820] :
  bool[10], arg submatch[261827] :
  (261826 call _ddata[11695](?) qio_regexp_string_piece_t[293800]), arg nsubmatch[261834] :
  (261833 call int(64)[13] 64)) : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type
    syserr[223496]
  }
  function channel[237642](?)._extractMatch[261848](arg _mt[261861]:_MT[238], arg this[261858]:channel[237642](?) :
  channel[237642](?), arg m[261845] :
  reMatch[294485], ref arg arg[261851] :
  reMatch[294485], ref arg error[261855] :
  syserr[223496]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (261865 call = arg[261851] m[261845])
  }
  function channel[237642](?)._extractMatch[261878](arg _mt[261891]:_MT[238], arg this[261888]:channel[237642](?) :
  channel[237642](?), arg m[261875] :
  reMatch[294485], ref arg arg[261881] :
  bytes[24], ref arg error[261885] :
  syserr[223496]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown cur[261897](261896 call int(64)[13] 64)
    (261900 'end of statement')
    unknown target[261909](261907 call _cast int(64)[13](261903 call . m[261875] c"offset"))
    (261912 'end of statement')
    unknown len[261917](261914 call . m[261875] c"size")
    (261920 'end of statement')
    if(261950 call _cond_test(261927 call !(261924 call . m[261875] c"matched")))
    {
      (261946 call = arg[261881] b"")
    }
    if(261980 call _cond_test(261955 call ! error[261885]))
    {
      (261960 call qio_channel_revert_unlocked(400081 call . this[261888] c"_channel_internal"))
      (261969 call = error[261885](261968 call qio_channel_mark 0(400087 call . this[261888] c"_channel_internal")))
      (261977 call = cur[261897](261976 call qio_channel_offset_unlocked(400093 call . this[261888] c"_channel_internal")))
    }
    if(262001 call _cond_test(261985 call ! error[261885]))
    {
      (261997 call = error[261885](261996 call qio_channel_advance 0(400100 call . this[261888] c"_channel_internal")(261994 call - target[261909] cur[261897])))
    }
    unknown s[262006] bytes[24]
    (262009 'end of statement')
    if(262063 call _cond_test(262011 call ! error[261885]))
    {
      unknown gotlen[262017](262016 call int(64)[13] 64)
      (262020 'end of statement')
      unknown ts[262023] c_string[19]
      (262026 'end of statement')
      (262050 call = error[261885](262049 call qio_channel_read_string 0(262036 call _cast c_int[20549] native[230835])(262041 call stringStyleExactLen len[261917])(400112 call . this[261888] c"_channel_internal") ts[262023] gotlen[262017](262047 call _cast ssize_t[20647] len[261917])))
      (262060 call = s[262006](262059 call createBytesWithOwnedBuffer ts[262023](length = gotlen[262017])))
    }
    if(262097 call _cond_test(262068 call ! error[261885]))
    {
      (262072 call = arg[261881] s[262006])
    }
    {
      (262093 call = arg[261881] b"")
    }
  }
  function channel[237642](?)._extractMatch[262110](arg _mt[262124]:_MT[238], arg this[262121]:channel[237642](?) :
  channel[237642](?), arg m[262107] :
  reMatch[294485], ref arg arg[262114] :
  unknown t[262112], ref arg error[262118] :
  syserr[223496]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(262154 call _cond_test(262140 call !(262137 call . m[262107] c"matched")))
    {
      unknown empty[262144](262143 'typeof' arg[262114])
      (262147 'end of statement')
      (262151 call = arg[262114] empty[262144])
    }
    unknown s[262160] bytes[24]
    (262163 'end of statement')
    (262169 call(400135 call . this[262121] c"_extractMatch") m[262107] s[262160] error[262118])
    if(262228 call _cond_test(262172 call ! error[262118]))
    {
      if(262211 call _cond_test(262177 call ==(262175 'typeof' arg[262114]) string[26]))
      {
        Try
        {
          {
            (262186 call = arg[262114](262185 call(262181 call . s[262160] c"decode")))
          }
        }
        Catch
        {
          unknown tmp[354778] "temp"(354781 'current error')
          unknown chpl_anon_error[354784](354789 'new'(354787 call _owned[30](?)(354785 'to non nilable class' tmp[354778])))
          {
            (262193 call = error[262118](400145 call EFORMAT[224182]))
          }
        }
      }
      {
        (262207 call = arg[262114](262205 call _cast(262204 'typeof' arg[262114]) s[262160]))
      }
    }
    {
      unknown empty[262218](262217 'typeof' arg[262114])
      (262221 'end of statement')
      (262225 call = arg[262114] empty[262218])
    }
  }
  where {
    (262134 call &&(262128 call != t[262112] reMatch[294485])(262132 call != t[262112] bytes[24]))
  }
  function channel[237642](?).extractMatch[262242](arg _mt[262249]:_MT[238], arg this[262246]:channel[237642](?) :
  channel[237642](?), arg m[262239] :
  reMatch[294485], ref arg arg[262244]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown err[262253](400155 call ENOERR[223566]) syserr[223496]
    (262256 'end of statement')
    const tmp[262292] "const" "temp"
    (262294 'move' tmp[262292](262290 'deref'(262289 '_wide_get_locale'(262259 call . this[262246] c"home"))))
    {
      {
        Try
        {
          {
            (262267 call(262263 call . this[262246] c"lock"))
          }
        }
        Defer
        {
          {
            (262277 call(262273 call . this[262246] c"unlock"))
          }
        }
        (262287 call(400158 call . this[262246] c"_extractMatch") m[262239] arg[262244] err[262253])
      }
      (262297 'on block' 0 tmp[262292])
    }
    if(262339 call _cond_test err[262253])
    {
      Try
      {
        {
          (262334 call(262302 call . this[262246] c"_ch_ioerror") err[262253](262332 call +(262329 call + "in channel.extractMatch(m:reMatch, ref "(262327 call _cast string[26](262325 'typeof' arg[262244]))) ")"))
        }
      }
    }
  }
  function channel[237642](?).extractMatch[262352](arg _mt[262363]:_MT[238], arg this[262360]:channel[237642](?) :
  channel[237642](?), arg m[262349] :
  reMatch[294485], ref arg arg[262354]:_any[178](?), ref arg error[262357] :
  syserr[223496]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    const tmp[262396] "const" "temp"
    (262398 'move' tmp[262396](262394 'deref'(262393 '_wide_get_locale'(262366 call . this[262360] c"home"))))
    {
      {
        Try!
        {
          {
            (262374 call(262370 call . this[262360] c"lock"))
          }
        }
        (262384 call(400170 call . this[262360] c"_extractMatch") m[262349] arg[262354] error[262357])
        (262391 call(262387 call . this[262360] c"unlock"))
      }
      (262401 'on block' 0 tmp[262396])
    }
  }
  function channel[237642](?)._ch_handle_captures[262417](arg _mt[262432]:_MT[238], arg this[262429]:channel[237642](?) :
  channel[237642](?), arg matches[262414] :
  (262413 call _ddata[11695](?) qio_regexp_string_piece_t[293800]), arg nmatches[262420] :
  int(64)[13], ref arg captures[262423]:_any[178](?), ref arg error[262426] :
  syserr[223496]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (262443 call assert(262440 call >= nmatches[262420](262437 call . captures[262423] c"size")))
    {
      unknown i[262478] 0
      unknown tmp[262479] "maybe param" "temp"
      (262491 'move' tmp[262479](262489 call chpl_compute_low_param_loop_bound 0(262452 call -(262448 call . captures[262423] c"size") 1)))
      unknown tmp[262480] "maybe param" "temp"
      (262504 'move' tmp[262480](262502 call chpl_compute_high_param_loop_bound 0(262496 call -(262498 call . captures[262423] c"size") 1)))
      unknown tmp[262481] "maybe param" "temp"
      (262507 'move' tmp[262481] 1)
      ParamForLoop[262509]
      { i[262478] tmp[262479] tmp[262480] tmp[262481]
        {
          unknown m[262463](262462 call _to_reMatch(262460 call matches[262414] i[262478]))
          (262466 'end of statement')
          (262476 call(400183 call . this[262429] c"_extractMatch") m[262463](262474 call captures[262423] i[262478]) error[262426])
        }
      }
      label _unused_continueLabel[262483]
      label _breakLabel[262482]
    }
  }
  function channel[237642](?).search[262530](arg _mt[262539]:_MT[238], arg this[262536]:channel[237642](?) :
  channel[237642](?), arg re[262527] :
  (262526 call regexp[297029](?) ?[260]), ref arg error[262533] :
  syserr[223496]) : _unknown[51] "method" "no doc"
  {
    unknown m[262543] reMatch[294485]
    (262546 'end of statement')
    const tmp[262726] "const" "temp"
    (262728 'move' tmp[262726](262724 'deref'(262723 '_wide_get_locale'(262549 call . this[262536] c"home"))))
    {
      {
        Try!
        {
          {
            (262557 call(262553 call . this[262536] c"lock"))
          }
        }
        unknown nm[262563] 1
        (262566 'end of statement')
        unknown matches[262572](262571 call _ddata_allocate qio_regexp_string_piece_t[293800] nm[262563])
        (262575 'end of statement')
        (262582 call = error[262533](262581 call qio_channel_mark 0(400199 call . this[262536] c"_channel_internal")))
        if(262615 call _cond_test(262586 call ! error[262533]))
        {
          (262611 call = error[262533](262610 call qio_regexp_channel_match(262591 call . re[262527] c"_regexp") 0(400206 call . this[262536] c"_channel_internal")(262603 call max(262601 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_UNANCHORED[293768] 1 0 1 matches[262572] nm[262563]))
        }
        if(262634 call _cond_test(262627 call ||(262621 call == error[262533](400213 call EFORMAT[224182]))(262625 call == error[262533](400216 call EEOF[224136]))))
        {
          (262631 call = error[262533](400219 call ENOERR[223566]))
        }
        if(262706 call _cond_test(262640 call ! error[262533]))
        {
          (262650 call = m[262543](262649 call _to_reMatch(262647 call matches[262572] 0)))
          if(262702 call _cond_test(262655 call . m[262543] c"matched"))
          {
            (262661 call qio_channel_revert_unlocked(400226 call . this[262536] c"_channel_internal"))
            unknown cur[262668](262667 call qio_channel_offset_unlocked(400231 call . this[262536] c"_channel_internal"))
            (262671 'end of statement')
            unknown target[262679](262677 call _cast int(64)[13](262673 call . m[262543] c"offset"))
            (262682 'end of statement')
            (262693 call = error[262533](262692 call qio_channel_advance 0(400237 call . this[262536] c"_channel_internal")(262690 call - target[262679] cur[262668])))
          }
          {
            (262699 call qio_channel_commit_unlocked(400244 call . this[262536] c"_channel_internal"))
          }
        }
        (262714 call _ddata_free matches[262572] nm[262563])
        (262721 call(262717 call . this[262536] c"unlock"))
      }
      (262731 'on block' 0 tmp[262726])
    }
    (262735 return m[262543])
  }
  { scopeless type
    reMatch[294485]
  }
  function channel[237642](?).search[262750](arg _mt[262755]:_MT[238], arg this[262752]:channel[237642](?) :
  channel[237642](?), arg re[262747] :
  (262746 call regexp[297029](?) ?[260])) : _unknown[51] throws "method" "no doc"
  {
    unknown e[262760](400253 call ENOERR[223566]) syserr[223496]
    (262763 'end of statement')
    unknown ret[262776](262775 call(262768 call . this[262752] c"search") re[262747](error = e[262760]))
    (262779 'end of statement')
    if(262808 call _cond_test e[262760])
    {
      Try
      {
        {
          (262804 call(262782 call . this[262752] c"_ch_ioerror") e[262760] "in channel.search")
        }
      }
    }
    (262814 return ret[262776])
  }
  { scopeless type
    reMatch[294485]
  }
  function channel[237642](?).search[262829](arg _mt[262839]:_MT[238], arg this[262836]:channel[237642](?) :
  channel[237642](?), arg re[262826] :
  (262825 call regexp[297029](?) ?[260]), ref arg captures[262833]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    unknown m[262843] reMatch[294485]
    (262846 'end of statement')
    unknown err[262850](400264 call ENOERR[223566]) syserr[223496]
    (262853 'end of statement')
    const tmp[263049] "const" "temp"
    (263051 'move' tmp[263049](263047 'deref'(263046 '_wide_get_locale'(262855 call . this[262836] c"home"))))
    {
      {
        Try
        {
          {
            (262863 call(262859 call . this[262836] c"lock"))
          }
        }
        Defer
        {
          {
            (262873 call(262869 call . this[262836] c"unlock"))
          }
        }
        unknown nm[262885](262883 call +(262879 call . captures[262833] c"size") 1)
        (262888 'end of statement')
        unknown matches[262894](262893 call _ddata_allocate qio_regexp_string_piece_t[293800] nm[262885])
        (262897 'end of statement')
        (262904 call = err[262850](262903 call qio_channel_mark 0(400271 call . this[262836] c"_channel_internal")))
        if(262937 call _cond_test(262908 call ! err[262850]))
        {
          (262933 call = err[262850](262932 call qio_regexp_channel_match(262913 call . re[262826] c"_regexp") 0(400278 call . this[262836] c"_channel_internal")(262925 call max(262923 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_UNANCHORED[293768] 1 0 1 matches[262894] nm[262885]))
        }
        if(262956 call _cond_test(262949 call ||(262943 call == err[262850](400285 call EFORMAT[224182]))(262947 call == err[262850](400288 call EEOF[224136]))))
        {
          (262953 call = err[262850](400291 call ENOERR[223566]))
        }
        if(263036 call _cond_test(262962 call ! err[262850]))
        {
          (262972 call = m[262843](262971 call _to_reMatch(262969 call matches[262894] 0)))
          if(263032 call _cond_test(262977 call . m[262843] c"matched"))
          {
            (262986 call(400299 call . this[262836] c"_ch_handle_captures") matches[262894] nm[262885] captures[262833] err[262850])
            (262992 call qio_channel_revert_unlocked(400308 call . this[262836] c"_channel_internal"))
            unknown cur[262998](262997 call qio_channel_offset_unlocked(400313 call . this[262836] c"_channel_internal"))
            (263001 'end of statement')
            unknown target[263009](263007 call _cast int(64)[13](263003 call . m[262843] c"offset"))
            (263012 'end of statement')
            (263023 call = err[262850](263022 call qio_channel_advance 0(400319 call . this[262836] c"_channel_internal")(263020 call - target[263009] cur[262998])))
          }
          {
            (263029 call qio_channel_commit_unlocked(400326 call . this[262836] c"_channel_internal"))
          }
        }
        (263044 call _ddata_free matches[262894] nm[262885])
      }
      (263054 'on block' 0 tmp[263049])
    }
    if(263069 call _cond_test err[262850])
    {
      Try
      {
        {
          (263065 call(263059 call . this[262836] c"_ch_ioerror") err[262850] "in channel.search")
        }
      }
    }
    (263075 return m[262843])
  }
  { scopeless type
    reMatch[294485]
  }
  function channel[237642](?).match[263090](arg _mt[263099]:_MT[238], arg this[263096]:channel[237642](?) :
  channel[237642](?), arg re[263087] :
  (263086 call regexp[297029](?) ?[260]), ref arg error[263093] :
  syserr[223496]) : _unknown[51] "method" "no doc"
  {
    unknown m[263103] reMatch[294485]
    (263106 'end of statement')
    const tmp[263286] "const" "temp"
    (263288 'move' tmp[263286](263284 'deref'(263283 '_wide_get_locale'(263109 call . this[263096] c"home"))))
    {
      {
        Try!
        {
          {
            (263117 call(263113 call . this[263096] c"lock"))
          }
        }
        unknown nm[263123] 1
        (263126 'end of statement')
        unknown matches[263132](263131 call _ddata_allocate qio_regexp_string_piece_t[293800] nm[263123])
        (263135 'end of statement')
        (263142 call = error[263093](263141 call qio_channel_mark 0(400343 call . this[263096] c"_channel_internal")))
        if(263175 call _cond_test(263146 call ! error[263093]))
        {
          (263171 call = error[263093](263170 call qio_regexp_channel_match(263151 call . re[263087] c"_regexp") 0(400350 call . this[263096] c"_channel_internal")(263163 call max(263161 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_START[293773] 1 1 1 matches[263132] nm[263123]))
        }
        if(263194 call _cond_test(263187 call ||(263181 call == error[263093](400357 call EFORMAT[224182]))(263185 call == error[263093](400360 call EEOF[224136]))))
        {
          (263191 call = error[263093](400363 call ENOERR[223566]))
        }
        if(263266 call _cond_test(263200 call ! error[263093]))
        {
          (263210 call = m[263103](263209 call _to_reMatch(263207 call matches[263132] 0)))
          if(263262 call _cond_test(263215 call . m[263103] c"matched"))
          {
            (263221 call qio_channel_revert_unlocked(400370 call . this[263096] c"_channel_internal"))
            unknown cur[263228](263227 call qio_channel_offset_unlocked(400375 call . this[263096] c"_channel_internal"))
            (263231 'end of statement')
            unknown target[263239](263237 call _cast int(64)[13](263233 call . m[263103] c"offset"))
            (263242 'end of statement')
            (263253 call = error[263093](263252 call qio_channel_advance 0(400381 call . this[263096] c"_channel_internal")(263250 call - target[263239] cur[263228])))
          }
          {
            (263259 call qio_channel_revert_unlocked(400388 call . this[263096] c"_channel_internal"))
          }
        }
        (263274 call _ddata_free matches[263132] nm[263123])
        (263281 call(263277 call . this[263096] c"unlock"))
      }
      (263291 'on block' 0 tmp[263286])
    }
    (263295 return m[263103])
  }
  { scopeless type
    reMatch[294485]
  }
  function channel[237642](?).match[263310](arg _mt[263315]:_MT[238], arg this[263312]:channel[237642](?) :
  channel[237642](?), arg re[263307] :
  (263306 call regexp[297029](?) ?[260])) : _unknown[51] throws "method" "no doc"
  {
    unknown e[263320](400397 call ENOERR[223566]) syserr[223496]
    (263323 'end of statement')
    unknown ret[263336](263335 call(263328 call . this[263312] c"match") re[263307](error = e[263320]))
    (263339 'end of statement')
    if(263368 call _cond_test e[263320])
    {
      Try
      {
        {
          (263364 call(263342 call . this[263312] c"_ch_ioerror") e[263320] "in channel.match")
        }
      }
    }
    (263374 return ret[263336])
  }
  { scopeless type
    reMatch[294485]
  }
  function channel[237642](?).match[263389](arg _mt[263403]:_MT[238], arg this[263400]:channel[237642](?) :
  channel[237642](?), arg re[263386] :
  (263385 call regexp[297029](?) ?[260]), ref arg captures[263393]:_any[178](?) ..., ref arg error[263397] :
  syserr[223496]) : _unknown[51] "method"
  {
    unknown m[263407] reMatch[294485]
    (263410 'end of statement')
    const tmp[263604] "const" "temp"
    (263606 'move' tmp[263604](263602 'deref'(263601 '_wide_get_locale'(263413 call . this[263400] c"home"))))
    {
      {
        Try!
        {
          {
            (263421 call(263417 call . this[263400] c"lock"))
          }
        }
        unknown nm[263433](263431 call + 1(263428 call . captures[263393] c"size"))
        (263436 'end of statement')
        unknown matches[263442](263441 call _ddata_allocate qio_regexp_string_piece_t[293800] nm[263433])
        (263445 'end of statement')
        (263452 call = error[263397](263451 call qio_channel_mark 0(400413 call . this[263400] c"_channel_internal")))
        if(263485 call _cond_test(263456 call ! error[263397]))
        {
          (263481 call = error[263397](263480 call qio_regexp_channel_match(263461 call . re[263386] c"_regexp") 0(400420 call . this[263400] c"_channel_internal")(263473 call max(263471 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_START[293773] 1 1 1 matches[263442] nm[263433]))
        }
        if(263504 call _cond_test(263497 call ||(263491 call == error[263397](400427 call EFORMAT[224182]))(263495 call == error[263397](400430 call EEOF[224136]))))
        {
          (263501 call = error[263397](400433 call ENOERR[223566]))
        }
        if(263584 call _cond_test(263510 call ! error[263397]))
        {
          (263520 call = m[263407](263519 call _to_reMatch(263517 call matches[263442] 0)))
          if(263580 call _cond_test(263525 call . m[263407] c"matched"))
          {
            (263534 call(400439 call . this[263400] c"_ch_handle_captures") matches[263442] nm[263433] captures[263393] error[263397])
            (263540 call qio_channel_revert_unlocked(400448 call . this[263400] c"_channel_internal"))
            unknown cur[263546](263545 call qio_channel_offset_unlocked(400453 call . this[263400] c"_channel_internal"))
            (263549 'end of statement')
            unknown target[263557](263555 call _cast int(64)[13](263551 call . m[263407] c"offset"))
            (263560 'end of statement')
            (263571 call = error[263397](263570 call qio_channel_advance 0(400459 call . this[263400] c"_channel_internal")(263568 call - target[263557] cur[263546])))
          }
          {
            (263577 call qio_channel_revert_unlocked(400466 call . this[263400] c"_channel_internal"))
          }
        }
        (263592 call _ddata_free matches[263442] nm[263433])
        (263599 call(263595 call . this[263400] c"unlock"))
      }
      (263609 'on block' 0 tmp[263604])
    }
    (263613 return m[263407])
  }
  { scopeless type
    reMatch[294485]
  }
  function channel[237642](?).match[263628](arg _mt[263638]:_MT[238], arg this[263635]:channel[237642](?) :
  channel[237642](?), arg re[263625] :
  (263624 call regexp[297029](?) ?[260]), ref arg captures[263632]:_any[178](?) ...) : _unknown[51] throws "method" "no doc"
  {
    unknown e[263643](400475 call ENOERR[223566]) syserr[223496]
    (263646 'end of statement')
    unknown ret[263659](263658 call(263649 call . this[263635] c"match") re[263625](263655 'expand_tuple' captures[263632])(error = e[263643]))
    (263662 'end of statement')
    if(263675 call _cond_test e[263643])
    {
      Try
      {
        {
          (263671 call(263665 call . this[263635] c"_ch_ioerror") e[263643] "in channel.match")
        }
      }
    }
    (263681 return ret[263659])
  }
  { scopeless type
    reMatch[294485]
  }
  function channel[237642](?).matches[263696](arg _mt[263714]:_MT[238], arg this[263711]:channel[237642](?) :
  channel[237642](?), arg re[263693] :
  (263692 call regexp[297029](?) ?[260]), param arg captures[263699] =
  0, arg maxmatches[263707] :
  int(64)[13] =
  (263706 call max int(64)[13])) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    unknown m[263717] reMatch[294485]
    (263720 'end of statement')
    unknown go[263723] 1
    (263726 'end of statement')
    unknown i[263728] 0
    (263731 'end of statement')
    unknown error[263734](400486 call ENOERR[223566]) syserr[223496]
    (263737 'end of statement')
    unknown nret[263742] "param"(263740 call + captures[263699] 1)
    (263745 'end of statement')
    unknown ret[263750](263748 call * nret[263742] reMatch[294485])
    (263753 'end of statement')
    Try!
    {
      {
        (263756 call(400492 call . this[263711] c"lock"))
      }
    }
    const tmp[263773] "const" "temp"
    (263775 'move' tmp[263773](263771 'deref'(263770 '_wide_get_locale'(263761 call . this[263711] c"home"))))
    {
      Try!
      {
        {
          (263766 call(400498 call . this[263711] c"_mark"))
        }
      }
      (263778 'on block' 0 tmp[263773])
    }
    {
      unknown tmp[264038] "temp"
      (264068 'move' tmp[264038](264060 call _cond_test(264062 call && go[263723](264065 call < i[263728] maxmatches[263707]))))
      WhileDo[264043]
      {
        {
          const tmp[264013] "const" "temp"
          (264015 'move' tmp[264013](264011 'deref'(264010 '_wide_get_locale'(263789 call . this[263711] c"home"))))
          {
            {
              unknown nm[263796](263794 call + 1 captures[263699])
              (263799 'end of statement')
              unknown matches[263806](263805 call _ddata_allocate qio_regexp_string_piece_t[293800] nm[263796])
              (263809 'end of statement')
              if(263840 call _cond_test(263811 call ! error[263734]))
              {
                (263836 call = error[263734](263835 call qio_regexp_channel_match(263816 call . re[263693] c"_regexp") 0(400508 call . this[263711] c"_channel_internal")(263828 call max(263826 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_UNANCHORED[293768] 1 0 1 matches[263806] nm[263796]))
              }
              if(263989 call _cond_test(263845 call ! error[263734]))
              {
                (263855 call = m[263717](263854 call _to_reMatch(263852 call matches[263806] 0)))
                if(263985 call _cond_test(263860 call . m[263717] c"matched"))
                {
                  {
                    unknown i[263892] 0
                    unknown tmp[263893] "maybe param" "temp"
                    (263905 'move' tmp[263893](263903 call chpl_compute_low_param_loop_bound 0(263866 call - nret[263742] 1)))
                    unknown tmp[263894] "maybe param" "temp"
                    (263915 'move' tmp[263894](263913 call chpl_compute_high_param_loop_bound 0(263910 call - nret[263742] 1)))
                    unknown tmp[263895] "maybe param" "temp"
                    (263918 'move' tmp[263895] 1)
                    ParamForLoop[263920]
                    { i[263892] tmp[263893] tmp[263894] tmp[263895]
                      {
                        (263878 call = m[263717](263877 call _to_reMatch(263875 call matches[263806] i[263892])))
                        (263890 call(400522 call . this[263711] c"_extractMatch") m[263717](263888 call ret[263750] i[263892]) error[263734])
                      }
                    }
                    label _unused_continueLabel[263897]
                    label _breakLabel[263896]
                  }
                  (263933 call qio_channel_revert_unlocked(400532 call . this[263711] c"_channel_internal"))
                  (263941 call = error[263734](263940 call qio_channel_mark 0(400538 call . this[263711] c"_channel_internal")))
                  if(263980 call _cond_test(263945 call ! error[263734]))
                  {
                    unknown cur[263951](263950 call qio_channel_offset_unlocked(400544 call . this[263711] c"_channel_internal"))
                    (263954 'end of statement')
                    unknown target[263963](263961 call _cast int(64)[13](263957 call . m[263717] c"offset"))
                    (263966 'end of statement')
                    (263977 call = error[263734](263976 call qio_channel_advance 0(400550 call . this[263711] c"_channel_internal")(263974 call - target[263963] cur[263951])))
                  }
                }
                {
                }
              }
              (263997 call _ddata_free matches[263806] nm[263796])
              if(264005 call _cond_test error[263734])
              {
                (264002 call = go[263723] 0)
              }
            }
            (264018 'on block' 0 tmp[264013])
          }
          if(264028 call _cond_test(264023 call ! error[263734]))
          {
            (264026 yield ret[263750])
          }
          (264035 call += i[263728] 1)
        }
        label _continueLabel[264041]
        (264055 'move' tmp[264038](264047 call _cond_test(264049 call && go[263723](264052 call < i[263728] maxmatches[263707]))))
        tmp[264038]
      }
      label _breakLabel[264042]
    }
    (264073 call(400571 call . this[263711] c"_commit"))
    (264077 call(400575 call . this[263711] c"unlock"))
    if(264094 call _cond_test(264087 call ||(264081 call == error[263734](400579 call EFORMAT[224182]))(264085 call == error[263734](400582 call EEOF[224136]))))
    {
      (264091 call = error[263734](400585 call ENOERR[223566]))
    }
    if(264127 call _cond_test error[263734])
    {
      Try!
      {
        {
          (264123 call(264101 call . this[263711] c"_ch_ioerror") error[263734] "in channel.matches")
        }
      }
    }
  }
  (355224 'used modules list'(352924 'use' ChapelStandard[20264])(251182 'use' IO[230803])(251186 'use' SysCTypes[20940])(251189 'use' SysBasic[223428])(251192 'use' SysError[264143])(261782 'use' Regexp[293505]))
}