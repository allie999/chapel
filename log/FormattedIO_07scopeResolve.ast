AST dump for FormattedIO after pass scopeResolve.
Module use list: ChapelStandard IO SysCTypes SysBasic SysError Regexp 

{
  function _toIntegral[251206](arg x[251203] :
  unknown t[251201]) : _unknown[51] "inline" "private"
  {
    (251217 return(251215 call _build_tuple x[251203] 1))
  }
  where {
    (251211 call isIntegralType t[251201])
  }
  function _toIntegral[251230](arg x[251227] :
  unknown t[251225]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251249](251247 call _build_tuple int(64)[13] bool[10])
    (251252 'end of statement')
    if(251279 call _cond_test(251257 call isAbstractEnumType t[251225]))
    {
      (251264 call = ret[251249](251262 call _build_tuple 0 0))
    }
    {
      (251276 call = ret[251249](251274 call _build_tuple(251270 call _cast int(64)[13] x[251227]) 1))
    }
    (251286 return ret[251249])
  }
  where {
    (251242 call &&(251235 call _isIoPrimitiveType t[251225])(251240 call !(251239 call isIntegralType t[251225])))
  }
  function _toIntegral[251298](arg x[251295] :
  unknown t[251293]) : _unknown[51] "inline" "private"
  {
    (251311 return(251309 call _build_tuple 0 0))
  }
  where {
    (251304 call !(251303 call _isIoPrimitiveType t[251293]))
  }
  function _toSigned[251324](arg x[251321] :
  unknown t[251319]) : _unknown[51] "inline" "private"
  {
    (251335 return(251333 call _build_tuple x[251321] 1))
  }
  where {
    (251329 call isIntType t[251319])
  }
  function _toSigned[251350](arg x[251347] :
  (251346 call uint(64)[115] 8)) : _unknown[51] "inline" "private"
  {
    (251363 return(251361 call _build_tuple(251357 call _cast(251356 call int(64)[13] 8) x[251347]) 1))
  }
  function _toSigned[251377](arg x[251374] :
  (251373 call uint(64)[115] 16)) : _unknown[51] "inline" "private"
  {
    (251390 return(251388 call _build_tuple(251384 call _cast(251383 call int(64)[13] 16) x[251374]) 1))
  }
  function _toSigned[251404](arg x[251401] :
  (251400 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {
    (251417 return(251415 call _build_tuple(251411 call _cast(251410 call int(64)[13] 32) x[251401]) 1))
  }
  function _toSigned[251431](arg x[251428] :
  (251427 call uint(64)[115] 64)) : _unknown[51] "inline" "private"
  {
    (251444 return(251442 call _build_tuple(251438 call _cast(251437 call int(64)[13] 64) x[251428]) 1))
  }
  function _toSigned[251456](arg x[251453] :
  unknown t[251451]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251475](251473 call _build_tuple int(64)[13] bool[10])
    (251478 'end of statement')
    if(251505 call _cond_test(251483 call isAbstractEnumType t[251451]))
    {
      (251490 call = ret[251475](251488 call _build_tuple 0 0))
    }
    {
      (251502 call = ret[251475](251500 call _build_tuple(251496 call _cast int(64)[13] x[251453]) 1))
    }
    (251512 return ret[251475])
  }
  where {
    (251468 call &&(251461 call _isIoPrimitiveType t[251451])(251466 call !(251465 call isIntegralType t[251451])))
  }
  function _toSigned[251524](arg x[251521] :
  unknown t[251519]) : _unknown[51] "inline" "private"
  {
    (251540 return(251538 call _build_tuple(251534 call _cast int(64)[13] 0) 0))
  }
  where {
    (251530 call !(251529 call _isIoPrimitiveType t[251519]))
  }
  function _toUnsigned[251553](arg x[251550] :
  unknown t[251548]) : _unknown[51] "inline" "private"
  {
    (251564 return(251562 call _build_tuple x[251550] 1))
  }
  where {
    (251558 call isUintType t[251548])
  }
  function _toUnsigned[251579](arg x[251576] :
  (251575 call int(64)[13] 8)) : _unknown[51] "inline" "private"
  {
    (251592 return(251590 call _build_tuple(251586 call _cast(251585 call uint(64)[115] 8) x[251576]) 1))
  }
  function _toUnsigned[251606](arg x[251603] :
  (251602 call int(64)[13] 16)) : _unknown[51] "inline" "private"
  {
    (251619 return(251617 call _build_tuple(251613 call _cast(251612 call uint(64)[115] 16) x[251603]) 1))
  }
  function _toUnsigned[251633](arg x[251630] :
  (251629 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    (251646 return(251644 call _build_tuple(251640 call _cast(251639 call uint(64)[115] 32) x[251630]) 1))
  }
  function _toUnsigned[251660](arg x[251657] :
  (251656 call int(64)[13] 64)) : _unknown[51] "inline" "private"
  {
    (251673 return(251671 call _build_tuple(251667 call _cast(251666 call uint(64)[115] 64) x[251657]) 1))
  }
  function _toUnsigned[251685](arg x[251682] :
  unknown t[251680]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251704](251702 call _build_tuple uint(64)[115] bool[10])
    (251707 'end of statement')
    if(251737 call _cond_test(251712 call isAbstractEnumType t[251680]))
    {
      (251722 call = ret[251704](251720 call _build_tuple(251716 call _cast uint(64)[115] 0) 0))
    }
    {
      (251734 call = ret[251704](251732 call _build_tuple(251728 call _cast uint(64)[115] x[251682]) 1))
    }
    (251744 return ret[251704])
  }
  where {
    (251697 call &&(251690 call _isIoPrimitiveType t[251680])(251695 call !(251694 call isIntegralType t[251680])))
  }
  function _toUnsigned[251756](arg x[251753] :
  unknown t[251751]) : _unknown[51] "inline" "private"
  {
    (251772 return(251770 call _build_tuple(251766 call _cast uint(64)[115] 0) 0))
  }
  where {
    (251762 call !(251761 call _isIoPrimitiveType t[251751]))
  }
  function _toReal[251785](arg x[251782] :
  unknown t[251780]) : _unknown[51] "inline" "private"
  {
    (251796 return(251794 call _build_tuple x[251782] 1))
  }
  where {
    (251790 call isRealType t[251780])
  }
  function _toReal[251809](arg x[251806] :
  unknown t[251804]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251828](251826 call _build_tuple real(64)[16] bool[10])
    (251831 'end of statement')
    if(251858 call _cond_test(251836 call isAbstractEnumType t[251804]))
    {
      (251843 call = ret[251828](251841 call _build_tuple 0.0 0))
    }
    {
      (251855 call = ret[251828](251853 call _build_tuple(251849 call _cast real(64)[16] x[251806]) 1))
    }
    (251865 return ret[251828])
  }
  where {
    (251821 call &&(251814 call _isIoPrimitiveType t[251804])(251819 call !(251818 call isRealType t[251804])))
  }
  function _toReal[251877](arg x[251874] :
  unknown t[251872]) : _unknown[51] "inline" "private"
  {
    (251890 return(251888 call _build_tuple 0.0 0))
  }
  where {
    (251883 call !(251882 call _isIoPrimitiveType t[251872]))
  }
  function _toImag[251903](arg x[251900] :
  unknown t[251898]) : _unknown[51] "inline" "private"
  {
    (251914 return(251912 call _build_tuple x[251900] 1))
  }
  where {
    (251908 call isImagType t[251898])
  }
  function _toImag[251927](arg x[251924] :
  unknown t[251922]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251946](251944 call _build_tuple imag(64)[130] bool[10])
    (251949 'end of statement')
    if(251976 call _cond_test(251954 call isAbstractEnumType t[251922]))
    {
      (251961 call = ret[251946](251959 call _build_tuple 0.0i 0))
    }
    {
      (251973 call = ret[251946](251971 call _build_tuple(251967 call _cast imag(64)[130] x[251924]) 1))
    }
    (251983 return ret[251946])
  }
  where {
    (251939 call &&(251932 call _isIoPrimitiveType t[251922])(251937 call !(251936 call isImagType t[251922])))
  }
  function _toImag[251995](arg x[251992] :
  unknown t[251990]) : _unknown[51] "inline" "private"
  {
    (252008 return(252006 call _build_tuple 0.0i 0))
  }
  where {
    (252001 call !(252000 call _isIoPrimitiveType t[251990]))
  }
  function _toComplex[252021](arg x[252018] :
  unknown t[252016]) : _unknown[51] "inline" "private"
  {
    (252032 return(252030 call _build_tuple x[252018] 1))
  }
  where {
    (252026 call isComplexType t[252016])
  }
  function _toComplex[252045](arg x[252042] :
  unknown t[252040]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[252064](252062 call _build_tuple complex(128)[140] bool[10])
    (252067 'end of statement')
    if(252097 call _cond_test(252072 call isAbstractEnumType t[252040]))
    {
      (252082 call = ret[252064](252080 call _build_tuple(252076 call + 0.0 0.0i) 0))
    }
    {
      (252094 call = ret[252064](252092 call _build_tuple(252088 call _cast complex(128)[140] x[252042]) 1))
    }
    (252104 return ret[252064])
  }
  where {
    (252057 call &&(252050 call _isIoPrimitiveType t[252040])(252055 call !(252054 call isComplexType t[252040])))
  }
  function _toComplex[252116](arg x[252113] :
  unknown t[252111]) : _unknown[51] "inline" "private"
  {
    (252132 return(252130 call _build_tuple(252126 call + 0.0 0.0i) 0))
  }
  where {
    (252122 call !(252121 call _isIoPrimitiveType t[252111]))
  }
  function _toRealOrComplex[252145](arg x[252142] :
  unknown t[252140]) : _unknown[51] "inline" "private"
  {
    (252156 return(252154 call _build_tuple x[252142] 1))
  }
  where {
    (252150 call isComplexType t[252140])
  }
  function _toRealOrComplex[252169](arg x[252166] :
  unknown t[252164]) : _unknown[51] "inline" "private"
  {
    (252180 return(252178 call _build_tuple x[252166] 1))
  }
  where {
    (252174 call isFloatType t[252164])
  }
  function _toRealOrComplex[252193](arg x[252190] :
  unknown t[252188]) : _unknown[51] "inline" "private"
  {
    (252223 return(252221 call _build_tuple(252217 call _cast real(64)[16] x[252190]) 1))
  }
  where {
    (252213 call &&(252205 call &&(252198 call _isIoPrimitiveType t[252188])(252203 call !(252202 call isComplexType t[252188])))(252211 call !(252210 call isFloatType t[252188])))
  }
  function _toRealOrComplex[252236](arg x[252233] :
  unknown t[252231]) : _unknown[51] "inline" "private"
  {
    (252249 return(252247 call _build_tuple 0.0 0))
  }
  where {
    (252242 call !(252241 call _isIoPrimitiveType t[252231]))
  }
  function _toNumeric[252262](arg x[252259] :
  unknown t[252257]) : _unknown[51] "inline" "private"
  {
    (252273 return(252271 call _build_tuple x[252259] 1))
  }
  where {
    (252267 call isNumericType t[252257])
  }
  function _toNumeric[252286](arg x[252283] :
  unknown t[252281]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[252305](252303 call _build_tuple int(64)[13] bool[10])
    (252308 'end of statement')
    if(252335 call _cond_test(252313 call isAbstractEnumType t[252281]))
    {
      (252320 call = ret[252305](252318 call _build_tuple 0 0))
    }
    {
      (252332 call = ret[252305](252330 call _build_tuple(252326 call _cast int(64)[13] x[252283]) 1))
    }
    (252342 return ret[252305])
  }
  where {
    (252298 call &&(252291 call _isIoPrimitiveType t[252281])(252296 call !(252295 call isNumericType t[252281])))
  }
  function _toNumeric[252354](arg x[252351] :
  unknown t[252349]) : _unknown[51] "inline" "private"
  {
    (252367 return(252365 call _build_tuple 0 0))
  }
  where {
    (252360 call !(252359 call _isIoPrimitiveType t[252349]))
  }
  function _toBytes[252379](arg x[252376] :
  bytes[24]) : _unknown[51] "inline" "private"
  {
    (252386 return(252384 call _build_tuple x[252376] 1))
  }
  function _toBytes[252397](arg x[252394] :
  string[26]) : _unknown[51] "inline" "private"
  {
    (252407 return(252405 call _build_tuple(252401 call _cast bytes[24] x[252394]) 1))
  }
  function _toBytes[252419](arg x[252416] :
  unknown t[252414]) : _unknown[51] "inline" "private"
  {
    (252445 return(252443 call _build_tuple(252439 call _cast bytes[24] "") 0))
  }
  function _toString[252456](arg x[252453] :
  string[26]) : _unknown[51] "inline" "private"
  {
    (252463 return(252461 call _build_tuple x[252453] 1))
  }
  function _toString[252474](arg x[252471] :
  bytes[24]) : _unknown[51] "inline" "private"
  {
    (252497 return(252495 call _build_tuple "" 0))
  }
  function _toString[252509](arg x[252506] :
  unknown t[252504]) : _unknown[51] "inline" "private"
  {
    (252535 return(252533 call _build_tuple(252529 call _cast string[26] x[252506]) 1))
  }
  where {
    (252525 call &&(252519 call &&(252514 call _isIoPrimitiveType t[252504])(252517 call != t[252504] bytes[24]))(252523 call != t[252504] string[26]))
  }
  function _toString[252548](arg x[252545] :
  unknown t[252543]) : _unknown[51] "inline" "private"
  {
    (252577 return(252575 call _build_tuple "" 0))
  }
  where {
    (252554 call !(252553 call _isIoPrimitiveType t[252543]))
  }
  function _toChar[252590](arg x[252587] :
  unknown t[252585]) : _unknown[51] "inline" "private"
  {
    (252607 return(252605 call _build_tuple(252601 call _cast(252600 call int(64)[13] 32) x[252587]) 1))
  }
  where {
    (252595 call isIntegralType t[252585])
  }
  function _toChar[252620](arg x[252617] :
  unknown t[252615]) : _unknown[51] "inline" "private"
  {
    unknown chr[252630](252629 call int(64)[13] 32)
    (252633 'end of statement')
    unknown nbytes[252636] c_int[20549]
    (252639 'end of statement')
    unknown local_x[252646](252645 call(252641 call . x[252617] c"localize"))
    (252649 'end of statement')
    (252667 call qio_decode_char_buf chr[252630] nbytes[252636](252659 call(252655 call . local_x[252646] c"c_str"))(252665 call _cast ssize_t[20647](252661 call . local_x[252646] c"numBytes")))
    (252674 return(252672 call _build_tuple chr[252630] 1))
  }
  where {
    (252624 call == t[252615] string[26])
  }
  function _toChar[252686](arg x[252683] :
  unknown t[252681]) : _unknown[51] "inline" "private"
  {
    (252711 return(252709 call _build_tuple(252705 call _cast(252704 call int(64)[13] 32) 0) 0))
  }
  where {
    (252698 call !(252696 call ||(252690 call == t[252681] string[26])(252695 call isIntegralType t[252681])))
  }
  function _setIfPrimitive[252724](ref arg lhs[252721] :
  unknown t[252719], arg rhs[252728] :
  unknown t2[252726], arg argi[252732] :
  int(64)[13]) : _unknown[51] "inline" "private"
  {
    unknown empty[252747] t2[252726]
    (252750 'end of statement')
    if(252768 call _cond_test(252754 call == rhs[252728] empty[252747]))
    {
      (252758 call = lhs[252721] 0)
    }
    {
      (252764 call = lhs[252721] 1)
    }
    (252773 return(398522 call ENOERR[223571]))
  }
  where {
    (252744 call &&(252738 call == t[252719] bool[10])(252743 call _isIoPrimitiveType t2[252726]))
  }
  { scopeless type
    syserr[223501]
  }
  function _setIfPrimitive[252786](ref arg lhs[252783] :
  unknown t[252781], arg rhs[252790] :
  unknown t2[252788], arg argi[252794] :
  int(64)[13]) : _unknown[51] "inline" "private"
  {
    Try
    {
      {
        if(252917 call _cond_test(252811 call isAbstractEnumType t[252781]))
        {
          if(252829 call _cond_test(252815 call isStringType t2[252788]))
          {
            (252821 call = lhs[252783](252819 call _cast t[252781] rhs[252790]))
          }
          {
            (252826 return ERANGE[224691])
          }
        }
        {
          if(252913 call _cond_test(252837 call isEnumType t[252781]))
          {
            if(252869 call _cond_test(252846 call ||(252841 call isIntType t2[252788])(252845 call isStringType t2[252788])))
            {
              (252853 call = lhs[252783](252851 call _cast t[252781] rhs[252790]))
            }
            {
              (252865 call = lhs[252783](252863 call _cast t[252781](252860 call _cast int(64)[13] rhs[252790])))
            }
          }
          {
            if(252908 call _cond_test(252882 call &&(252877 call isBytesType t2[252788])(252881 call isStringType t[252781])))
            {
              (252895 call = lhs[252783](252894 call(252886 call . rhs[252790] c"decode") strict[173658]))
            }
            {
              (252904 call = lhs[252783](252902 call _cast t[252781] rhs[252790]))
            }
          }
        }
      }
    }
    Catch
    {
      unknown tmp[354696] "temp"(354699 'current error')
      unknown chpl_anon_error[354702](354707 'new'(354705 call _owned[30](?)(354703 'to non nilable class' tmp[354696])))
      {
        (252925 return ERANGE[224691])
      }
    }
    (252933 return(398549 call ENOERR[223571]))
  }
  where {
    (252806 call &&(252800 call != t[252781] bool[10])(252805 call _isIoPrimitiveType t[252781]))
  }
  { scopeless type
    syserr[223501]
  }
  function _setIfPrimitive[252946](ref arg lhs[252943] :
  unknown t[252941], arg rhs[252948]:_any[178](?), arg argi[252951] :
  int(64)[13]) : _unknown[51] "inline" "private"
  {
    (252965 return(252964 call qio_format_error_arg_mismatch argi[252951]))
  }
  where {
    (252959 call !(252958 call _isIoPrimitiveType t[252941]))
  }
  { scopeless type
    syserr[223501]
  }
  function _setIfChar[252979](ref arg lhs[252976] :
  unknown t[252974], arg rhs[252985] :
  (252984 call int(64)[13] 32)) : _unknown[51] "inline" "private" "no return value for void"
  {
    (253001 call = lhs[252976](252999 call _cast string[26](252993 'new'(252997 call ioChar[238550] rhs[252985]))))
  }
  where {
    (252990 call == t[252974] string[26])
  }
  function _setIfChar[253015](ref arg lhs[253012] :
  unknown t[253010], arg rhs[253021] :
  (253020 call int(64)[13] 32)) : _unknown[51] "inline" "private" "no return value for void"
  {
    (253033 call = lhs[253012](253031 call _cast t[253010] rhs[253021]))
  }
  where {
    (253027 call isIntegralType t[253010])
  }
  function _setIfChar[253047](ref arg lhs[253044] :
  unknown t[253042], arg rhs[253053] :
  (253052 call int(64)[13] 32)) : _unknown[51] "inline" "private" "no return value for void"
  {
  }
  where {
    (253066 call !(253064 call ||(253058 call == t[253042] string[26])(253063 call isIntegralType t[253042])))
  }
  function _toRegexp[253079](arg x[253076] :
  unknown t[253074]) : _unknown[51] "inline" "private"
  {
    (253094 return(253092 call _build_tuple x[253076] 1))
  }
  where {
    (354709 'is_subtype'(253087 call regexp[297046](?) ?[260]) t[253074])
  }
  function _toRegexp[253107](arg x[253104] :
  unknown t[253102]) : _unknown[51] "inline" "private"
  {
    unknown r[253113](253112 call regexp[297046](?) string[26])
    (253116 'end of statement')
    (253123 return(253121 call _build_tuple r[253113] 0))
  }
  function _channel_regexp_info[253515].clear[253180](arg _mt[253519]:_MT[238], arg this[253517]:_channel_regexp_info[253515]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(253189 call _cond_test(398574 call . this[253517] c"releaseRegexp"))
    {
      (253186 call qio_regexp_release(398579 call . this[253517] c"theRegexp"))
    }
    (253198 call =(398584 call . this[253517] c"theRegexp")(253197 call qio_regexp_null))
    (253203 call =(398589 call . this[253517] c"hasRegexp") 0)
    (253208 call =(398594 call . this[253517] c"matchedRegexp") 0)
    (253213 call =(398599 call . this[253517] c"releaseRegexp") 0)
    if(253226 call _cond_test(398604 call . this[253517] c"matches"))
    {
      (253224 call _ddata_free(398609 call . this[253517] c"matches")(253222 call +(398614 call . this[253517] c"ncaptures") 1))
    }
    {
      unknown _indexOfInterest[253261] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[253262] "expr temp" "temp"
      (253271 'move' _iterator[253262](253269 call _getIterator(253278 call chpl_direct_counted_range_iter 0(398625 call . this[253517] c"ncaptures"))))
      Defer
      {
        {
          (253294 call _freeIterator _iterator[253262])
        }
      }
      { scopeless type
        (253283 'move' _indexOfInterest[253261](253280 call iteratorIndex _iterator[253262]))
      }
      ForLoop[253263]
      {
        unknown i[253287] "index var" "insert auto destroy"
        (253289 'move' i[253287] _indexOfInterest[253261])
        (253258 call =(253241 call(398619 call . this[253517] c"capArr") i[253287]) b"")
        label _continueLabel[253266]
        _indexOfInterest[253261]
        _iterator[253262]
      }
      label _breakLabel[253267]
    }
    if(253308 call _cond_test(398630 call . this[253517] c"capArr"))
    {
      (253306 call _ddata_free(398635 call . this[253517] c"capArr")(398640 call . this[253517] c"ncaptures"))
    }
  }
  function _channel_regexp_info[253515].allocate_captures[253317](arg _mt[253523]:_MT[238], arg this[253521]:_channel_regexp_info[253515]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (253324 call =(398645 call . this[253521] c"ncaptures")(253323 call qio_regexp_get_ncaptures(398650 call . this[253521] c"theRegexp")))
    (253337 call =(398655 call . this[253521] c"matches")(253336 call _ddata_allocate qio_regexp_string_piece_t[293817](253334 call +(398661 call . this[253521] c"ncaptures") 1)))
    (253346 call =(398666 call . this[253521] c"capArr")(253345 call _ddata_allocate bytes[24](398671 call . this[253521] c"ncaptures")))
    (253351 call =(398676 call . this[253521] c"capturei") 0)
  }
  function _channel_regexp_info[253515].deinit[253358](arg _mt[253527]:_MT[238], arg this[253525]:_channel_regexp_info[253515]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (253362 call(398680 call . this[253525] c"clear"))
  }
  function _channel_regexp_info[253515].writeThis[253371](arg _mt[253531]:_MT[238], arg this[253529]:_channel_regexp_info[253515], arg f[253369]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {
    (253397 call <~> f[253369](253395 call + "{hasRegexp = "(253393 call _cast string[26](398686 call . this[253529] c"hasRegexp"))))
    (253425 call <~> f[253369](253423 call + ", matchedRegexp = "(253421 call _cast string[26](398692 call . this[253529] c"matchedRegexp"))))
    (253452 call <~> f[253369](253450 call + ", releaseRegexp = "(253448 call _cast string[26](398698 call . this[253529] c"releaseRegexp"))))
    (253479 call <~> f[253369](253477 call + ", ... capturei = "(253475 call _cast string[26](398704 call . this[253529] c"capturei"))))
    (253509 call <~> f[253369](253507 call +(253504 call + ", ncaptures = "(253502 call _cast string[26](398710 call . this[253529] c"ncaptures"))) "}"))
  }
  type _channel_regexp_info[253515] val super[355785]:object[22] "super class" unknown hasRegexp[253129] 0 unknown matchedRegexp[253134] 0 unknown releaseRegexp[253139] 0 unknown theRegexp[253146](253145 call qio_regexp_null) unknown matches[253155] nil[44](253153 call _ddata[11695](?) qio_regexp_string_piece_t[293817]) unknown capArr[253164] nil[44](253162 call _ddata[11695](?) bytes[24]) unknown capturei[253169] int(64)[13] unknown ncaptures[253174] int(64)[13]
  type unmanaged _channel_regexp_info?[415583]
  type _channel_regexp_info?[415580](?)
  type unmanaged _channel_regexp_info[415577]
  type _channel_regexp_info[398718](?)
  function channel[237647](?)._match_regexp_if_needed[253541](arg _mt[253563]:_MT[238], arg this[253560]:channel[237647](?) :
  channel[237647](?), arg cur[253538] :
  size_t[20654], arg len[253544] :
  size_t[20654], ref arg error[253548] :
  syserr[223501], ref arg style[253552] :
  iostyle[231761], arg r[253557] :
  unmanaged _channel_regexp_info[415577]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(253964 call _cond_test(253573 call qio_regexp_ok(253569 call . r[253557] c"theRegexp")))
    {
      if(253582 call _cond_test(253577 call . r[253557] c"matchedRegexp"))
      {
        (253580 return _void[55])
      }
      (253593 call =(253589 call . r[253557] c"matchedRegexp") 1)
      (253603 call(253599 call . r[253557] c"allocate_captures"))
      unknown ncaps[253611](253608 call . r[253557] c"ncaptures")
      (253614 'end of statement')
      unknown nm[253619](253617 call + ncaps[253611] 1)
      (253622 'end of statement')
      unknown maxlen[253633](253630 call . style[253552] c"max_width_characters")(253626 call int(64)[13] 64)
      (253636 'end of statement')
      unknown can_discard[253641](253639 call == cur[253538] len[253544])
      (253644 'end of statement')
      if(253666 call _cond_test(253653 call == maxlen[253633](253652 call max(253650 call uint(64)[115] 32))))
      {
        (253663 call = maxlen[253633](253662 call max(253660 call int(64)[13] 64)))
      }
      unknown before_match[253675](253674 call qio_channel_offset_unlocked(398728 call . this[253560] c"_channel_internal"))
      (253678 'end of statement')
      (253701 call = error[253548](253700 call qio_regexp_channel_match(253682 call . r[253557] c"theRegexp") 0(398734 call . this[253560] c"_channel_internal") maxlen[253633] QIO_REGEXP_ANCHOR_START[293790] can_discard[253641] 1 0(253696 call . r[253557] c"matches") nm[253619]))
      unknown after_match[253708](253707 call qio_channel_offset_unlocked(398743 call . this[253560] c"_channel_internal"))
      (253711 'end of statement')
      if(253950 call _cond_test(253713 call ! error[253548]))
      {
        {
          unknown _indexOfInterest[253764] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[253765] "expr temp" "temp"
          (253774 'move' _iterator[253765](253772 call _getIterator(253781 call chpl_direct_counted_range_iter 0 ncaps[253611])))
          Defer
          {
            {
              (253797 call _freeIterator _iterator[253765])
            }
          }
          { scopeless type
            (253786 'move' _indexOfInterest[253764](253783 call iteratorIndex _iterator[253765]))
          }
          ForLoop[253766]
          {
            unknown j[253790] "index var" "insert auto destroy"
            (253792 'move' j[253790] _indexOfInterest[253764])
            {
              unknown m[253735](253734 call _to_reMatch(253732 call(253724 call . r[253557] c"matches")(253729 call + 1 j[253790])))
              (253738 'end of statement')
              (253753 call(398751 call . this[253560] c"_extractMatch") m[253735](253751 call(253746 call . r[253557] c"capArr") j[253790]) error[253548])
              if(253759 call _cond_test error[253548])
              {
                break _breakLabel[253770] _breakLabel[253770]
              }
            }
            label _continueLabel[253769]
            _indexOfInterest[253764]
            _iterator[253765]
          }
          label _breakLabel[253770]
        }
        unknown cur[253809](253808 call qio_channel_offset_unlocked(398761 call . this[253560] c"_channel_internal"))
        (253812 'end of statement')
        unknown target[253840](253838 call _cast int(64)[13](253835 call +(253820 call .(253819 call(253814 call . r[253557] c"matches") 0) c"offset")(253832 call .(253829 call(253824 call . r[253557] c"matches") 0) c"len")))
        (253843 'end of statement')
        (253854 call = error[253548](253853 call qio_channel_advance 0(398767 call . this[253560] c"_channel_internal")(253851 call - target[253840] cur[253809])))
      }
      {
        {
          unknown _indexOfInterest[253891] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[253892] "expr temp" "temp"
          (253901 'move' _iterator[253892](253899 call _getIterator(253908 call chpl_direct_counted_range_iter 0 ncaps[253611])))
          Defer
          {
            {
              (253924 call _freeIterator _iterator[253892])
            }
          }
          { scopeless type
            (253913 'move' _indexOfInterest[253891](253910 call iteratorIndex _iterator[253892]))
          }
          ForLoop[253893]
          {
            unknown j[253917] "index var" "insert auto destroy"
            (253919 'move' j[253917] _indexOfInterest[253891])
            {
              (253887 call =(253870 call(253865 call . r[253557] c"capArr") j[253917]) b"")
            }
            label _continueLabel[253896]
            _indexOfInterest[253891]
            _iterator[253892]
          }
          label _breakLabel[253897]
        }
        unknown cur[253936](253935 call qio_channel_offset_unlocked(398776 call . this[253560] c"_channel_internal"))
        (253939 'end of statement')
        (253948 call qio_channel_advance 0(398781 call . this[253560] c"_channel_internal")(253946 call - before_match[253675] cur[253936]))
      }
    }
    {
      (253958 call = error[253548](253957 call qio_format_error_bad_regexp))
      {
      }
    }
  }
  function channel[237647](?)._format_reader[253979](arg _mt[254018]:_MT[238], arg this[254015]:channel[237647](?) :
  channel[237647](?), arg fmtStr[253976] :
  unknown fmtType[253974], ref arg cur[253982] :
  size_t[20654], arg len[253986] :
  size_t[20654], ref arg error[253990] :
  syserr[223501], ref arg conv[253994] :
  qio_conv_t[234973], ref arg gotConv[253998] :
  bool[10], ref arg style[254002] :
  iostyle[231761], ref arg r[254008] :
  unmanaged _channel_regexp_info?[415583], arg isReadf[254012] :
  bool[10]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(254036 call _cond_test(254022 call != r[254008] nil[44]))
    {
      (254033 call =(254029 call .(254025 call postfix! r[254008]) c"hasRegexp") 0)
    }
    if(254567 call _cond_test(254043 call ! error[253990]))
    {
      unknown fmt[254056](254055 call(254051 call .(254050 call(254046 call . fmtStr[253976] c"localize")) c"c_str"))
      (254059 'end of statement')
      {
        unknown tmp[254540] "temp"
        (254564 'move' tmp[254540](254559 call _cond_test(254561 call < cur[253982] len[253986])))
        WhileDo[254545]
        {
          {
            (254067 call = gotConv[253998] 0)
            if(254075 call _cond_test error[253990])
            {
              break _breakLabel[254544] _breakLabel[254544]
            }
            unknown end[254084](254083 call uint(64)[115] 64)
            (254087 'end of statement')
            (254098 call = error[253990](254097 call qio_conv_parse fmt[254056] cur[253982] end[254084] isReadf[254012] conv[253994] style[254002]))
            if(254103 call _cond_test error[253990])
            {
            }
            (254112 call = cur[253982](254110 call _cast size_t[20654] end[254084]))
            if(254119 call _cond_test error[253990])
            {
              break _breakLabel[254544] _breakLabel[254544]
            }
            if(254535 call _cond_test(254131 call ==(254127 call . conv[253994] c"argType") QIO_CONV_ARG_TYPE_NONE_LITERAL[235067]))
            {
              if(254304 call _cond_test isReadf[254012])
              {
                if(254277 call _cond_test(254141 call ==(254137 call . conv[253994] c"literal_is_whitespace") 2))
                {
                  unknown offsetA[254147](254146 call qio_channel_offset_unlocked(398814 call . this[254015] c"_channel_internal"))
                  (254150 'end of statement')
                  (254159 call = error[253990](254158 call qio_channel_skip_past_newline 0(398820 call . this[254015] c"_channel_internal") 1))
                  unknown offsetB[254166](254165 call qio_channel_offset_unlocked(398825 call . this[254015] c"_channel_internal"))
                  (254169 'end of statement')
                  if(254185 call _cond_test(254177 call &&(254171 call ! error[253990])(254175 call == offsetA[254147] offsetB[254166])))
                  {
                    (254181 call = error[253990](398832 call EFORMAT[224187]))
                  }
                }
                {
                  if(254273 call _cond_test(254194 call ==(254190 call . conv[253994] c"literal_is_whitespace") 1))
                  {
                    unknown offsetA[254200](254199 call qio_channel_offset_unlocked(398836 call . this[254015] c"_channel_internal"))
                    (254203 'end of statement')
                    (254219 call = error[253990](254218 call qio_channel_scan_literal_2 0(398842 call . this[254015] c"_channel_internal")(254213 call . conv[253994] c"literal") 0 1))
                    unknown offsetB[254226](254225 call qio_channel_offset_unlocked(398847 call . this[254015] c"_channel_internal"))
                    (254229 'end of statement')
                    if(254245 call _cond_test(254237 call &&(254231 call ! error[253990])(254235 call == offsetA[254200] offsetB[254226])))
                    {
                      (254241 call = error[253990](398854 call EFORMAT[224187]))
                    }
                  }
                  {
                    (254269 call = error[253990](254268 call qio_channel_scan_literal_2 0(398859 call . this[254015] c"_channel_internal")(254255 call . conv[253994] c"literal")(254265 call _cast ssize_t[20647](254261 call . conv[253994] c"literal_length")) 0))
                  }
                }
              }
              {
                (254300 call = error[253990](254299 call qio_channel_print_literal_2 0(398866 call . this[254015] c"_channel_internal")(254289 call . conv[253994] c"literal")(254297 call _cast ssize_t[20647](254293 call . conv[253994] c"literal_length"))))
              }
            }
            {
              if(254531 call _cond_test(254314 call ==(254310 call . conv[253994] c"argType") QIO_CONV_ARG_TYPE_NONE_REGEXP_LITERAL[235062]))
              {
                if(254517 call _cond_test(254317 call ! isReadf[254012]))
                {
                  (254323 call = error[253990](254322 call qio_format_error_write_regexp))
                }
                {
                  if(254341 call _cond_test(254329 call == r[254008] nil[44]))
                  {
                    (254338 call = r[254008](254334 'new'(_chpl_manager = unmanaged[220](?))(254337 call _channel_regexp_info[398718](?))))
                  }
                  const rnn[254350] "const"(254348 call postfix! r[254008])
                  (254353 'end of statement')
                  (254359 call(254355 call . rnn[254350] c"clear"))
                  unknown errstr[254362] string[26]
                  (254365 'end of statement')
                  (254400 call qio_regexp_create_compile_flags_2(254370 call . conv[253994] c"regexp")(254377 call . conv[253994] c"regexp_length")(254383 call . conv[253994] c"regexp_flags")(254389 call . conv[253994] c"regexp_flags_length")(254394 call == fmtType[253974] string[26])(254397 call . rnn[254350] c"theRegexp"))
                  (254409 call =(254405 call . rnn[254350] c"releaseRegexp") 1)
                  if(254513 call _cond_test(254418 call qio_regexp_ok(254414 call . rnn[254350] c"theRegexp")))
                  {
                    (254424 call =(254420 call . rnn[254350] c"hasRegexp") 1)
                    (254439 call =(254429 call . rnn[254350] c"ncaptures")(254438 call qio_regexp_get_ncaptures(254434 call . rnn[254350] c"theRegexp")))
                    if(254501 call _cond_test(254480 call ||(254469 call ||(254458 call ||(254447 call >(254443 call . rnn[254350] c"ncaptures") 0)(254456 call !=(254452 call . conv[253994] c"preArg1") QIO_CONV_UNK[234977]))(254467 call !=(254463 call . conv[253994] c"preArg2") QIO_CONV_UNK[234977]))(254478 call !=(254474 call . conv[253994] c"preArg3") QIO_CONV_UNK[234977])))
                    {
                      (254484 call = gotConv[253998] 1)
                      break _breakLabel[254544] _breakLabel[254544]
                    }
                    {
                      (254498 call(398885 call . this[254015] c"_match_regexp_if_needed") cur[253982] len[253986] error[253990] style[254002] rnn[254350])
                    }
                  }
                  {
                    (254509 call = error[253990](254508 call qio_format_error_bad_regexp))
                  }
                }
              }
              {
                (254524 call = gotConv[253998] 1)
                break _breakLabel[254544] _breakLabel[254544]
              }
            }
          }
          label _continueLabel[254543]
          (254554 'move' tmp[254540](254549 call _cond_test(254551 call < cur[253982] len[253986])))
          tmp[254540]
        }
        label _breakLabel[254544]
      }
    }
  }
  function channel[237647](?)._conv_helper[254580](arg _mt[254599]:_MT[238], arg this[254596]:channel[237647](?) :
  channel[237647](?), ref arg error[254577] :
  syserr[223501], ref arg conv[254583] :
  qio_conv_t[234973], ref arg gotConv[254587] :
  bool[10], ref arg j[254591] :
  int(64)[13], ref arg argType[254594]:_any[178](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(254604 call _cond_test error[254577])
    {
      (254602 return _void[55])
    }
    if(254736 call _cond_test gotConv[254587])
    {
      if(254635 call _cond_test(254616 call !=(254612 call . conv[254583] c"preArg1") QIO_CONV_UNK[234977]))
      {
        (254626 call =(254621 call argType[254594] j[254591])(254623 call . conv[254583] c"preArg1"))
        (254632 call += j[254591] 1)
      }
      if(254664 call _cond_test(254645 call !=(254641 call . conv[254583] c"preArg2") QIO_CONV_UNK[234977]))
      {
        (254655 call =(254650 call argType[254594] j[254591])(254652 call . conv[254583] c"preArg2"))
        (254661 call += j[254591] 1)
      }
      if(254692 call _cond_test(254673 call !=(254669 call . conv[254583] c"preArg3") QIO_CONV_UNK[234977]))
      {
        (254683 call =(254678 call argType[254594] j[254591])(254680 call . conv[254583] c"preArg3"))
        (254689 call += j[254591] 1)
      }
      if(254732 call _cond_test(254701 call !=(254697 call . conv[254583] c"argType") QIO_CONV_UNK[234977]))
      {
        if(254722 call _cond_test(254708 call ==(254706 call argType[254594] j[254591]) QIO_CONV_UNK[234977]))
        {
          (254718 call =(254713 call argType[254594] j[254591])(254715 call . conv[254583] c"argType"))
        }
        (254729 call += j[254591] 1)
      }
    }
  }
  function channel[237647](?)._conv_sethandler[254749](arg _mt[254772]:_MT[238], arg this[254769]:channel[237647](?) :
  channel[237647](?), ref arg error[254746] :
  syserr[223501], arg argtypei[254752] :
  c_int[20549], ref arg style[254756] :
  iostyle[231761], arg i[254760] :
  int(64)[13], arg argi[254763]:_any[178](?), arg isReadf[254766] :
  bool[10]) : _unknown[51] throws "method" "no doc"
  {
    if(254779 call _cond_test error[254746])
    {
      (254777 return 0)
    }
    {
      unknown tmp[255406] "expr temp" "maybe param" "maybe type" "temp"
      (255408 'move' tmp[255406] argtypei[254752])
      if(255413 call _cond_test(255410 call == tmp[255406] QIO_CONV_SET_MIN_WIDTH_COLS[235072]))
      {
        unknown tmp[254798] "temp"(254797 call _toIntegral argi[254763])
        (254805 call _check_tuple_var_decl tmp[254798] 2)
        unknown t[254789](254799 call tmp[254798] 0)
        unknown ok[254791](254802 call tmp[254798] 1)
        (254810 'end of statement')
        if(254840 call _cond_test(254813 call ! ok[254791]))
        {
          (254820 call = error[254746](254819 call qio_format_error_arg_mismatch i[254760]))
        }
        {
          (254837 call =(254827 call . style[254756] c"min_width_columns")(254835 call _cast(254834 call uint(64)[115] 32) t[254789]))
        }
      }
      {
        if(255419 call _cond_test(255416 call == tmp[255406] QIO_CONV_SET_MAX_WIDTH_COLS[235077]))
        {
          unknown tmp[254858] "temp"(254857 call _toIntegral argi[254763])
          (254865 call _check_tuple_var_decl tmp[254858] 2)
          unknown t[254849](254859 call tmp[254858] 0)
          unknown ok[254851](254862 call tmp[254858] 1)
          (254870 'end of statement')
          if(254900 call _cond_test(254873 call ! ok[254851]))
          {
            (254880 call = error[254746](254879 call qio_format_error_arg_mismatch i[254760]))
          }
          {
            (254897 call =(254887 call . style[254756] c"max_width_columns")(254895 call _cast(254894 call uint(64)[115] 32) t[254849]))
          }
        }
        {
          if(255426 call _cond_test(255423 call == tmp[255406] QIO_CONV_SET_MAX_WIDTH_CHARS[235082]))
          {
            unknown tmp[254918] "temp"(254917 call _toIntegral argi[254763])
            (254925 call _check_tuple_var_decl tmp[254918] 2)
            unknown t[254909](254919 call tmp[254918] 0)
            unknown ok[254911](254922 call tmp[254918] 1)
            (254930 'end of statement')
            if(254958 call _cond_test(254933 call ! ok[254911]))
            {
              (254940 call = error[254746](254939 call qio_format_error_arg_mismatch i[254760]))
            }
            {
              (254955 call =(254945 call . style[254756] c"max_width_characters")(254953 call _cast(254952 call uint(64)[115] 32) t[254909]))
            }
          }
          {
            if(255433 call _cond_test(255430 call == tmp[255406] QIO_CONV_SET_MAX_WIDTH_BYTES[235087]))
            {
              unknown tmp[254976] "temp"(254975 call _toIntegral argi[254763])
              (254983 call _check_tuple_var_decl tmp[254976] 2)
              unknown t[254967](254977 call tmp[254976] 0)
              unknown ok[254969](254980 call tmp[254976] 1)
              (254988 'end of statement')
              if(255018 call _cond_test(254991 call ! ok[254969]))
              {
                (254998 call = error[254746](254997 call qio_format_error_arg_mismatch i[254760]))
              }
              {
                (255015 call =(255005 call . style[254756] c"max_width_bytes")(255013 call _cast(255012 call uint(64)[115] 32) t[254967]))
              }
            }
            {
              if(255440 call _cond_test(255437 call == tmp[255406] QIO_CONV_SET_PRECISION[235092]))
              {
                unknown tmp[255036] "temp"(255035 call _toIntegral argi[254763])
                (255043 call _check_tuple_var_decl tmp[255036] 2)
                unknown t[255027](255037 call tmp[255036] 0)
                unknown ok[255029](255040 call tmp[255036] 1)
                (255048 'end of statement')
                if(255078 call _cond_test(255051 call ! ok[255029]))
                {
                  (255058 call = error[254746](255057 call qio_format_error_arg_mismatch i[254760]))
                }
                {
                  (255075 call =(255065 call . style[254756] c"precision")(255073 call _cast(255072 call int(64)[13] 32) t[255027]))
                }
              }
              {
                if(255447 call _cond_test(255444 call == tmp[255406] QIO_CONV_SET_STRINGSTART[235107]))
                {
                  unknown tmp[255096] "temp"(255095 call _toChar argi[254763])
                  (255103 call _check_tuple_var_decl tmp[255096] 2)
                  unknown t[255087](255097 call tmp[255096] 0)
                  unknown ok[255089](255100 call tmp[255096] 1)
                  (255108 'end of statement')
                  if(255135 call _cond_test(255111 call ! ok[255089]))
                  {
                    (255118 call = error[254746](255117 call qio_format_error_arg_mismatch i[254760]))
                  }
                  {
                    (255132 call =(255125 call . style[254756] c"string_start")(255130 call _cast style_char_t[231404] t[255087]))
                  }
                }
                {
                  if(255454 call _cond_test(255451 call == tmp[255406] QIO_CONV_SET_STRINGEND[235117]))
                  {
                    unknown tmp[255153] "temp"(255152 call _toChar argi[254763])
                    (255160 call _check_tuple_var_decl tmp[255153] 2)
                    unknown t[255144](255154 call tmp[255153] 0)
                    unknown ok[255146](255157 call tmp[255153] 1)
                    (255165 'end of statement')
                    if(255190 call _cond_test(255168 call ! ok[255146]))
                    {
                      (255175 call = error[254746](255174 call qio_format_error_arg_mismatch i[254760]))
                    }
                    {
                      (255187 call =(255180 call . style[254756] c"string_end")(255185 call _cast style_char_t[231404] t[255144]))
                    }
                  }
                  {
                    if(255461 call _cond_test(255458 call == tmp[255406] QIO_CONV_SET_STRINGSTARTEND[235112]))
                    {
                      unknown tmp[255208] "temp"(255207 call _toChar argi[254763])
                      (255215 call _check_tuple_var_decl tmp[255208] 2)
                      unknown t[255199](255209 call tmp[255208] 0)
                      unknown ok[255201](255212 call tmp[255208] 1)
                      (255220 'end of statement')
                      if(255257 call _cond_test(255223 call ! ok[255201]))
                      {
                        (255230 call = error[254746](255229 call qio_format_error_arg_mismatch i[254760]))
                      }
                      {
                        (255242 call =(255235 call . style[254756] c"string_start")(255240 call _cast style_char_t[231404] t[255199]))
                        (255254 call =(255247 call . style[254756] c"string_end")(255252 call _cast style_char_t[231404] t[255199]))
                      }
                    }
                    {
                      if(255468 call _cond_test(255465 call == tmp[255406] QIO_CONV_SET_STRINGLEN[235097]))
                      {
                        unknown tmp[255274] "temp"(255273 call _toIntegral argi[254763])
                        (255281 call _check_tuple_var_decl tmp[255274] 2)
                        unknown t[255265](255275 call tmp[255274] 0)
                        unknown ok[255267](255278 call tmp[255274] 1)
                        (255286 'end of statement')
                        if(255315 call _cond_test(255289 call ! ok[255267]))
                        {
                          (255296 call = error[254746](255295 call qio_format_error_arg_mismatch i[254760]))
                        }
                        {
                          (255311 call =(255301 call . style[254756] c"str_style")(255309 call _cast(255308 call int(64)[13] 64) t[255265]))
                        }
                      }
                      {
                        if(255475 call _cond_test(255472 call == tmp[255406] QIO_CONV_SET_TERMINATOR[235102]))
                        {
                          unknown tmp[255332] "temp"(255331 call _toChar argi[254763])
                          (255339 call _check_tuple_var_decl tmp[255332] 2)
                          unknown t[255323](255333 call tmp[255332] 0)
                          unknown ok[255325](255336 call tmp[255332] 1)
                          (255344 'end of statement')
                          if(255376 call _cond_test(255347 call ! ok[255325]))
                          {
                            (255354 call = error[254746](255353 call qio_format_error_arg_mismatch i[254760]))
                          }
                          {
                            (255372 call =(255359 call . style[254756] c"str_style")(255371 call stringStyleTerminated(255368 call _cast(255367 call uint(64)[115] 8) t[255323])))
                          }
                        }
                        {
                          if(255482 call _cond_test(255479 call == tmp[255406] QIO_CONV_SET_DONE[235127]))
                          {
                          }
                          {
                            if(255489 call _cond_test(255486 call == tmp[255406] QIO_CONV_UNK[234977]))
                            {
                              (255393 call = error[254746](255392 call qio_format_error_too_many_args))
                            }
                            {
                              (255400 return 1)
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    (255495 return 0)
  }
  { scopeless type
    bool[10]
  }
  function channel[237647](?)._write_signed[255510](arg _mt[255523]:_MT[238], arg this[255520]:channel[237647](?) :
  channel[237647](?), arg width[255507] :
  (255506 call uint(64)[115] 32), arg t[255513] :
  int(64)[13], arg i[255517] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[255527] syserr[223501]
    (255530 'end of statement')
    unknown byteorder[255536](255535 call qio_channel_byteorder(398999 call . this[255520] c"_channel_internal"))
    (255539 'end of statement')
    {
      unknown tmp[255661] "expr temp" "maybe param" "maybe type" "temp"
      (255663 'move' tmp[255661] width[255507])
      if(255668 call _cond_test(255665 call == tmp[255661] 1))
      {
        unknown x[255551](255549 call _cast(255548 call int(64)[13] 8) t[255513])
        (255554 'end of statement')
        (255563 call = err[255527](255562 call qio_channel_write_int8 0(399007 call . this[255520] c"_channel_internal") x[255551]))
      }
      {
        if(255674 call _cond_test(255671 call == tmp[255661] 2))
        {
          unknown x[255577](255575 call _cast(255574 call int(64)[13] 16) t[255513])
          (255580 'end of statement')
          (255590 call = err[255527](255589 call qio_channel_write_int16 0 byteorder[255536](399016 call . this[255520] c"_channel_internal") x[255577]))
        }
        {
          if(255681 call _cond_test(255678 call == tmp[255661] 4))
          {
            unknown x[255604](255602 call _cast(255601 call int(64)[13] 32) t[255513])
            (255607 'end of statement')
            (255617 call = err[255527](255616 call qio_channel_write_int32 0 byteorder[255536](399025 call . this[255520] c"_channel_internal") x[255604]))
          }
          {
            if(255688 call _cond_test(255685 call == tmp[255661] 8))
            {
              unknown x[255631](255629 call _cast(255628 call int(64)[13] 64) t[255513])
              (255634 'end of statement')
              (255644 call = err[255527](255643 call qio_channel_write_int64 0 byteorder[255536](399034 call . this[255520] c"_channel_internal") x[255631]))
            }
            {
              (255654 call = err[255527](255653 call qio_format_error_arg_mismatch i[255517]))
            }
          }
        }
      }
    }
    (255694 return err[255527])
  }
  { scopeless type
    syserr[223501]
  }
  function channel[237647](?)._read_signed[255709](arg _mt[255722]:_MT[238], arg this[255719]:channel[237647](?) :
  channel[237647](?), arg width[255706] :
  (255705 call uint(64)[115] 32), out arg t[255712] :
  int(64)[13], arg i[255716] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[255726] syserr[223501]
    (255729 'end of statement')
    unknown byteorder[255735](255734 call qio_channel_byteorder(399045 call . this[255719] c"_channel_internal"))
    (255738 'end of statement')
    {
      unknown tmp[255868] "expr temp" "maybe param" "maybe type" "temp"
      (255870 'move' tmp[255868] width[255706])
      if(255875 call _cond_test(255872 call == tmp[255868] 1))
      {
        unknown x[255747](255746 call int(64)[13] 8)
        (255750 'end of statement')
        (255759 call = err[255726](255758 call qio_channel_read_int8 0(399052 call . this[255719] c"_channel_internal") x[255747]))
        (255764 call = t[255712] x[255747])
      }
      {
        if(255881 call _cond_test(255878 call == tmp[255868] 2))
        {
          unknown x[255775](255774 call int(64)[13] 16)
          (255778 'end of statement')
          (255788 call = err[255726](255787 call qio_channel_read_int16 0 byteorder[255735](399062 call . this[255719] c"_channel_internal") x[255775]))
          (255793 call = t[255712] x[255775])
        }
        {
          if(255888 call _cond_test(255885 call == tmp[255868] 4))
          {
            unknown x[255804](255803 call int(64)[13] 32)
            (255807 'end of statement')
            (255817 call = err[255726](255816 call qio_channel_read_int32 0 byteorder[255735](399072 call . this[255719] c"_channel_internal") x[255804]))
            (255822 call = t[255712] x[255804])
          }
          {
            if(255895 call _cond_test(255892 call == tmp[255868] 8))
            {
              unknown x[255833](255832 call int(64)[13] 64)
              (255836 'end of statement')
              (255846 call = err[255726](255845 call qio_channel_read_int64 0 byteorder[255735](399082 call . this[255719] c"_channel_internal") x[255833]))
              (255851 call = t[255712] x[255833])
            }
            {
              (255861 call = err[255726](255860 call qio_format_error_arg_mismatch i[255716]))
            }
          }
        }
      }
    }
    (255901 return err[255726])
  }
  { scopeless type
    syserr[223501]
  }
  function channel[237647](?)._write_unsigned[255916](arg _mt[255929]:_MT[238], arg this[255926]:channel[237647](?) :
  channel[237647](?), arg width[255913] :
  (255912 call uint(64)[115] 32), arg t[255919] :
  uint(64)[115], arg i[255923] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[255932] syserr[223501]
    (255935 'end of statement')
    unknown byteorder[255941](255940 call qio_channel_byteorder(399094 call . this[255926] c"_channel_internal"))
    (255944 'end of statement')
    {
      unknown tmp[256066] "expr temp" "maybe param" "maybe type" "temp"
      (256068 'move' tmp[256066] width[255913])
      if(256073 call _cond_test(256070 call == tmp[256066] 1))
      {
        unknown x[255956](255954 call _cast(255953 call uint(64)[115] 8) t[255919])
        (255959 'end of statement')
        (255968 call = err[255932](255967 call qio_channel_write_uint8 0(399102 call . this[255926] c"_channel_internal") x[255956]))
      }
      {
        if(256079 call _cond_test(256076 call == tmp[256066] 2))
        {
          unknown x[255982](255980 call _cast(255979 call uint(64)[115] 16) t[255919])
          (255985 'end of statement')
          (255995 call = err[255932](255994 call qio_channel_write_uint16 0 byteorder[255941](399111 call . this[255926] c"_channel_internal") x[255982]))
        }
        {
          if(256086 call _cond_test(256083 call == tmp[256066] 4))
          {
            unknown x[256009](256007 call _cast(256006 call uint(64)[115] 32) t[255919])
            (256012 'end of statement')
            (256022 call = err[255932](256021 call qio_channel_write_uint32 0 byteorder[255941](399120 call . this[255926] c"_channel_internal") x[256009]))
          }
          {
            if(256093 call _cond_test(256090 call == tmp[256066] 8))
            {
              unknown x[256036](256034 call _cast(256033 call uint(64)[115] 64) t[255919])
              (256039 'end of statement')
              (256049 call = err[255932](256048 call qio_channel_write_uint64 0 byteorder[255941](399129 call . this[255926] c"_channel_internal") x[256036]))
            }
            {
              (256059 call = err[255932](256058 call qio_format_error_arg_mismatch i[255923]))
            }
          }
        }
      }
    }
    (256099 return err[255932])
  }
  function channel[237647](?)._read_unsigned[256113](arg _mt[256126]:_MT[238], arg this[256123]:channel[237647](?) :
  channel[237647](?), arg width[256110] :
  (256109 call uint(64)[115] 32), out arg t[256116] :
  uint(64)[115], arg i[256120] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256129] syserr[223501]
    (256132 'end of statement')
    unknown byteorder[256138](256137 call qio_channel_byteorder(399139 call . this[256123] c"_channel_internal"))
    (256141 'end of statement')
    {
      unknown tmp[256271] "expr temp" "maybe param" "maybe type" "temp"
      (256273 'move' tmp[256271] width[256110])
      if(256278 call _cond_test(256275 call == tmp[256271] 1))
      {
        unknown x[256150](256149 call uint(64)[115] 8)
        (256153 'end of statement')
        (256162 call = err[256129](256161 call qio_channel_read_uint8 0(399146 call . this[256123] c"_channel_internal") x[256150]))
        (256167 call = t[256116] x[256150])
      }
      {
        if(256284 call _cond_test(256281 call == tmp[256271] 2))
        {
          unknown x[256178](256177 call uint(64)[115] 16)
          (256181 'end of statement')
          (256191 call = err[256129](256190 call qio_channel_read_uint16 0 byteorder[256138](399156 call . this[256123] c"_channel_internal") x[256178]))
          (256196 call = t[256116] x[256178])
        }
        {
          if(256291 call _cond_test(256288 call == tmp[256271] 4))
          {
            unknown x[256207](256206 call uint(64)[115] 32)
            (256210 'end of statement')
            (256220 call = err[256129](256219 call qio_channel_read_uint32 0 byteorder[256138](399166 call . this[256123] c"_channel_internal") x[256207]))
            (256225 call = t[256116] x[256207])
          }
          {
            if(256298 call _cond_test(256295 call == tmp[256271] 8))
            {
              unknown x[256236](256235 call uint(64)[115] 64)
              (256239 'end of statement')
              (256249 call = err[256129](256248 call qio_channel_read_uint64 0 byteorder[256138](399176 call . this[256123] c"_channel_internal") x[256236]))
              (256254 call = t[256116] x[256236])
            }
            {
              (256264 call = err[256129](256263 call qio_format_error_arg_mismatch i[256120]))
            }
          }
        }
      }
    }
    (256304 return err[256129])
  }
  function channel[237647](?)._write_real[256318](arg _mt[256331]:_MT[238], arg this[256328]:channel[237647](?) :
  channel[237647](?), arg width[256315] :
  (256314 call uint(64)[115] 32), arg t[256321] :
  real(64)[16], arg i[256325] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256334] syserr[223501]
    (256337 'end of statement')
    unknown byteorder[256343](256342 call qio_channel_byteorder(399188 call . this[256328] c"_channel_internal"))
    (256346 'end of statement')
    {
      unknown tmp[256415] "expr temp" "maybe param" "maybe type" "temp"
      (256417 'move' tmp[256415] width[256315])
      if(256422 call _cond_test(256419 call == tmp[256415] 4))
      {
        unknown x[256358](256356 call _cast(256355 call real(64)[16] 32) t[256321])
        (256361 'end of statement')
        (256371 call = err[256334](256370 call qio_channel_write_float32 0 byteorder[256343](399197 call . this[256328] c"_channel_internal") x[256358]))
      }
      {
        if(256428 call _cond_test(256425 call == tmp[256415] 8))
        {
          unknown x[256385](256383 call _cast(256382 call real(64)[16] 64) t[256321])
          (256388 'end of statement')
          (256398 call = err[256334](256397 call qio_channel_write_float64 0 byteorder[256343](399206 call . this[256328] c"_channel_internal") x[256385]))
        }
        {
          (256408 call = err[256334](256407 call qio_format_error_arg_mismatch i[256325]))
        }
      }
    }
    (256434 return err[256334])
  }
  function channel[237647](?)._read_real[256448](arg _mt[256461]:_MT[238], arg this[256458]:channel[237647](?) :
  channel[237647](?), arg width[256445] :
  (256444 call uint(64)[115] 32), out arg t[256451] :
  real(64)[16], arg i[256455] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256464] syserr[223501]
    (256467 'end of statement')
    unknown byteorder[256473](256472 call qio_channel_byteorder(399216 call . this[256458] c"_channel_internal"))
    (256476 'end of statement')
    {
      unknown tmp[256549] "expr temp" "maybe param" "maybe type" "temp"
      (256551 'move' tmp[256549] width[256445])
      if(256556 call _cond_test(256553 call == tmp[256549] 4))
      {
        unknown x[256485](256484 call real(64)[16] 32)
        (256488 'end of statement')
        (256498 call = err[256464](256497 call qio_channel_read_float32 0 byteorder[256473](399224 call . this[256458] c"_channel_internal") x[256485]))
        (256503 call = t[256451] x[256485])
      }
      {
        if(256562 call _cond_test(256559 call == tmp[256549] 8))
        {
          unknown x[256514](256513 call real(64)[16] 64)
          (256517 'end of statement')
          (256527 call = err[256464](256526 call qio_channel_read_float64 0 byteorder[256473](399234 call . this[256458] c"_channel_internal") x[256514]))
          (256532 call = t[256451] x[256514])
        }
        {
          (256542 call = err[256464](256541 call qio_format_error_arg_mismatch i[256455]))
        }
      }
    }
    (256568 return err[256464])
  }
  function channel[237647](?)._write_complex[256582](arg _mt[256595]:_MT[238], arg this[256592]:channel[237647](?) :
  channel[237647](?), arg width[256579] :
  (256578 call uint(64)[115] 32), arg t[256585] :
  complex(128)[140], arg i[256589] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256599](399244 call ENOERR[223571]) syserr[223501]
    (256602 'end of statement')
    unknown byteorder[256608](256607 call qio_channel_byteorder(399248 call . this[256592] c"_channel_internal"))
    (256611 'end of statement')
    {
      unknown tmp[256750] "expr temp" "maybe param" "maybe type" "temp"
      (256752 'move' tmp[256750] width[256579])
      if(256757 call _cond_test(256754 call == tmp[256750] 8))
      {
        unknown x[256623](256621 call _cast(256620 call complex(128)[140] 64) t[256585])
        (256626 'end of statement')
        unknown re[256632](256629 call . x[256623] c"re")
        (256635 'end of statement')
        unknown im[256640](256637 call . x[256623] c"im")
        (256643 'end of statement')
        (256652 call = err[256599](256651 call qio_channel_write_float32 0 byteorder[256608](399257 call . this[256592] c"_channel_internal") re[256632]))
        if(256670 call _cond_test(256656 call ! err[256599]))
        {
          (256666 call = err[256599](256665 call qio_channel_write_float32 0 byteorder[256608](399266 call . this[256592] c"_channel_internal") im[256640]))
        }
      }
      {
        if(256763 call _cond_test(256760 call == tmp[256750] 16))
        {
          unknown x[256685](256683 call _cast(256682 call complex(128)[140] 128) t[256585])
          (256688 'end of statement')
          unknown re[256694](256691 call . x[256685] c"re")
          (256697 'end of statement')
          unknown im[256702](256699 call . x[256685] c"im")
          (256705 'end of statement')
          (256714 call = err[256599](256713 call qio_channel_write_float64 0 byteorder[256608](399275 call . this[256592] c"_channel_internal") re[256694]))
          if(256732 call _cond_test(256718 call ! err[256599]))
          {
            (256728 call = err[256599](256727 call qio_channel_write_float64 0 byteorder[256608](399284 call . this[256592] c"_channel_internal") im[256702]))
          }
        }
        {
          (256743 call = err[256599](256742 call qio_format_error_arg_mismatch i[256589]))
        }
      }
    }
    (256769 return err[256599])
  }
  function channel[237647](?)._read_complex[256783](arg _mt[256796]:_MT[238], arg this[256793]:channel[237647](?) :
  channel[237647](?), arg width[256780] :
  (256779 call uint(64)[115] 32), out arg t[256786] :
  complex(128)[140], arg i[256790] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256800](399292 call ENOERR[223571]) syserr[223501]
    (256803 'end of statement')
    unknown byteorder[256809](256808 call qio_channel_byteorder(399296 call . this[256793] c"_channel_internal"))
    (256812 'end of statement')
    {
      unknown tmp[256989] "expr temp" "maybe param" "maybe type" "temp"
      (256991 'move' tmp[256989] width[256780])
      if(256996 call _cond_test(256993 call == tmp[256989] 8))
      {
        unknown x[256821](256820 call complex(128)[140] 64)
        (256824 'end of statement')
        unknown re[256831](256830 'typeof'(256827 call . x[256821] c"re"))
        (256834 'end of statement')
        unknown im[256840](256839 'typeof'(256836 call . x[256821] c"im"))
        (256843 'end of statement')
        (256852 call = err[256800](256851 call qio_channel_read_float32 0 byteorder[256809](399304 call . this[256793] c"_channel_internal") re[256831]))
        if(256870 call _cond_test(256856 call ! err[256800]))
        {
          (256866 call = err[256800](256865 call qio_channel_read_float32 0 byteorder[256809](399313 call . this[256793] c"_channel_internal") im[256840]))
        }
        (256886 call = x[256821](256884 call _cast(256883 call complex(128)[140] 64)(256878 call _build_tuple re[256831] im[256840])))
        (256891 call = t[256786] x[256821])
      }
      {
        if(257002 call _cond_test(256999 call == tmp[256989] 16))
        {
          unknown x[256902](256901 call complex(128)[140] 128)
          (256905 'end of statement')
          unknown re[256912](256911 'typeof'(256908 call . x[256902] c"re"))
          (256915 'end of statement')
          unknown im[256921](256920 'typeof'(256917 call . x[256902] c"im"))
          (256924 'end of statement')
          (256933 call = err[256800](256932 call qio_channel_read_float64 0 byteorder[256809](399326 call . this[256793] c"_channel_internal") re[256912]))
          if(256951 call _cond_test(256937 call ! err[256800]))
          {
            (256947 call = err[256800](256946 call qio_channel_read_float64 0 byteorder[256809](399335 call . this[256793] c"_channel_internal") im[256921]))
          }
          (256967 call = x[256902](256965 call _cast(256964 call complex(128)[140] 128)(256959 call _build_tuple re[256912] im[256921])))
          (256972 call = t[256786] x[256902])
        }
        {
          (256982 call = err[256800](256981 call qio_format_error_arg_mismatch i[256790]))
        }
      }
    }
    (257008 return err[256800])
  }
  function channel[237647](?).writef[257020](arg _mt[257030]:_MT[238], arg this[257027]:channel[237647](?) :
  channel[237647](?), arg fmtStr[257017] :
  unknown t[257015], const arg args[257024]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    if(257067 call _cond_test(257044 call !(399351 call . this[257027] c"writing")))
    {
      (257065 call compilerError "writef on read-only channel")
    }
    const origLocale[257079] "const"(257078 call(257074 call . this[257027] c"getLocaleOfIoRequest"))
    (257082 'end of statement')
    unknown err[257085](399355 call ENOERR[223571]) syserr[223501]
    (257088 'end of statement')
    {
      const tmp[258318] "const" "temp"
      (258319 'move' tmp[258318](258316 'deref'(258315 '_wide_get_locale'(257090 call . this[257027] c"home"))))
      {
        Try
        {
          {
            (257098 call(257094 call . this[257027] c"lock"))
          }
        }
        Defer
        {
          {
            (257108 call(257104 call . this[257027] c"unlock"))
          }
        }
        unknown save_style[257119](257118 call(257114 call . this[257027] c"_style"))
        (257122 'end of statement')
        unknown cur[257125] 0 size_t[20654]
        (257128 'end of statement')
        unknown len[257137](257135 call _cast size_t[20654](257131 call . fmtStr[257017] c"size")) size_t[20654]
        (257140 'end of statement')
        unknown conv[257142] qio_conv_t[234973]
        (257145 'end of statement')
        unknown gotConv[257147] bool[10]
        (257150 'end of statement')
        unknown style[257152] iostyle[231761]
        (257155 'end of statement')
        unknown end[257157] size_t[20654]
        (257160 'end of statement')
        unknown argType[257168](257166 call *(257163 call + k[257022] 5) c_int[20549])
        (257171 'end of statement')
        unknown r[257175] unmanaged _channel_regexp_info?[415583]
        (257178 'end of statement')
        Defer
        {
          {
            if(257185 call _cond_test r[257175])
            {
              (257182 call chpl__delete r[257175])
            }
          }
        }
        {
          unknown _indexOfInterest[257213] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[257214] "expr temp" "temp"
          (257223 'move' _iterator[257214](257221 call _getIterator(257234 call chpl_direct_range_iter 0(257228 call -(257230 call . argType[257168] c"size") 1) 1)))
          Defer
          {
            {
              (257250 call _freeIterator _iterator[257214])
            }
          }
          { scopeless type
            (257239 'move' _indexOfInterest[257213](257236 call iteratorIndex _iterator[257214]))
          }
          ForLoop[257215]
          {
            unknown i[257243] "index var" "insert auto destroy"
            (257245 'move' i[257243] _indexOfInterest[257213])
            {
              (257209 call =(257207 call argType[257168] i[257243]) QIO_CONV_UNK[234977])
            }
            label _continueLabel[257218]
            _indexOfInterest[257213]
            _iterator[257214]
          }
          label _breakLabel[257219]
        }
        unknown j[257258] 0
        (257261 'end of statement')
        {
          unknown i[258219] 0
          unknown tmp[258220] "maybe param" "temp"
          (258232 'move' tmp[258220](258230 call chpl_compute_low_param_loop_bound 0(257265 call - k[257022] 1)))
          unknown tmp[258221] "maybe param" "temp"
          (258242 'move' tmp[258221](258240 call chpl_compute_high_param_loop_bound 0(258237 call - k[257022] 1)))
          unknown tmp[258222] "maybe param" "temp"
          (258245 'move' tmp[258222] 1)
          ParamForLoop[258247]
          { i[258219] tmp[258220] tmp[258221] tmp[258222]
            {
              (257271 call = gotConv[257147] 0)
              if(257293 call _cond_test(257277 call <= j[257258] i[258219]))
              {
                (257290 call(399378 call . this[257027] c"_format_reader") fmtStr[257017] cur[257125] len[257137] err[257085] conv[257142] gotConv[257147] style[257152] r[257175] 0)
              }
              (257304 call(399392 call . this[257027] c"_conv_helper") err[257085] conv[257142] gotConv[257147] j[257258] argType[257168])
              unknown domore[257321](257320 call(399403 call . this[257027] c"_conv_sethandler") err[257085](257312 call argType[257168] i[258219]) style[257152] i[258219](257318 call args[257024] i[258219]) 0)
              (257324 'end of statement')
              if(258215 call _cond_test domore[257321])
              {
                (257332 call(257327 call . this[257027] c"_set_style") style[257152])
                {
                  unknown tmp[258109] "expr temp" "maybe param" "maybe type" "temp"
                  (258111 'move' tmp[258109](257338 call argType[257168] i[258219]))
                  if(258121 call _cond_test(258119 call ||(258113 call == tmp[258109] QIO_CONV_ARG_TYPE_SIGNED[234987])(258116 call == tmp[258109] QIO_CONV_ARG_TYPE_BINARY_SIGNED[234992])))
                  {
                    unknown tmp[257355] "temp"(257354 call _toSigned(257352 call args[257024] i[258219]))
                    (257362 call _check_tuple_var_decl tmp[257355] 2)
                    unknown t[257343](257356 call tmp[257355] 0)
                    unknown ok[257345](257359 call tmp[257355] 1)
                    (257367 'end of statement')
                    if(257420 call _cond_test(257370 call ! ok[257345]))
                    {
                      (257377 call = err[257085](257376 call qio_format_error_arg_mismatch i[258219]))
                    }
                    {
                      if(257413 call _cond_test(257386 call ==(257384 call argType[257168] i[258219]) QIO_CONV_ARG_TYPE_BINARY_SIGNED[234992]))
                      {
                        (257398 call = err[257085](257397 call(399431 call . this[257027] c"_write_signed")(257391 call . style[257152] c"max_width_bytes") t[257343] i[258219]))
                      }
                      {
                        Try
                        {
                          {
                            (257409 call(399437 call . this[257027] c"_writeOne") dynamic[230837] t[257343] origLocale[257079])
                          }
                        }
                      }
                    }
                  }
                  {
                    if(258132 call _cond_test(258130 call ||(258124 call == tmp[258109] QIO_CONV_ARG_TYPE_UNSIGNED[234997])(258127 call == tmp[258109] QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[235002])))
                    {
                      unknown tmp[257441] "temp"(257440 call _toUnsigned(257438 call args[257024] i[258219]))
                      (257448 call _check_tuple_var_decl tmp[257441] 2)
                      unknown t[257429](257442 call tmp[257441] 0)
                      unknown ok[257431](257445 call tmp[257441] 1)
                      (257453 'end of statement')
                      if(257506 call _cond_test(257456 call ! ok[257431]))
                      {
                        (257463 call = err[257085](257462 call qio_format_error_arg_mismatch i[258219]))
                      }
                      {
                        if(257499 call _cond_test(257472 call ==(257470 call argType[257168] i[258219]) QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[235002]))
                        {
                          (257484 call = err[257085](257483 call(399456 call . this[257027] c"_write_unsigned")(257477 call . style[257152] c"max_width_bytes") t[257429] i[258219]))
                        }
                        {
                          Try
                          {
                            {
                              (257495 call(399462 call . this[257027] c"_writeOne") dynamic[230837] t[257429] origLocale[257079])
                            }
                          }
                        }
                      }
                    }
                    {
                      if(258144 call _cond_test(258142 call ||(258136 call == tmp[258109] QIO_CONV_ARG_TYPE_REAL[235007])(258139 call == tmp[258109] QIO_CONV_ARG_TYPE_BINARY_REAL[235012])))
                      {
                        unknown tmp[257527] "temp"(257526 call _toReal(257524 call args[257024] i[258219]))
                        (257534 call _check_tuple_var_decl tmp[257527] 2)
                        unknown t[257515](257528 call tmp[257527] 0)
                        unknown ok[257517](257531 call tmp[257527] 1)
                        (257539 'end of statement')
                        if(257592 call _cond_test(257542 call ! ok[257517]))
                        {
                          (257549 call = err[257085](257548 call qio_format_error_arg_mismatch i[258219]))
                        }
                        {
                          if(257585 call _cond_test(257558 call ==(257556 call argType[257168] i[258219]) QIO_CONV_ARG_TYPE_BINARY_REAL[235012]))
                          {
                            (257570 call = err[257085](257569 call(399481 call . this[257027] c"_write_real")(257563 call . style[257152] c"max_width_bytes") t[257515] i[258219]))
                          }
                          {
                            Try
                            {
                              {
                                (257581 call(399487 call . this[257027] c"_writeOne") dynamic[230837] t[257515] origLocale[257079])
                              }
                            }
                          }
                        }
                      }
                      {
                        if(258156 call _cond_test(258154 call ||(258148 call == tmp[258109] QIO_CONV_ARG_TYPE_IMAG[235017])(258151 call == tmp[258109] QIO_CONV_ARG_TYPE_BINARY_IMAG[235022])))
                        {
                          unknown tmp[257613] "temp"(257612 call _toImag(257610 call args[257024] i[258219]))
                          (257620 call _check_tuple_var_decl tmp[257613] 2)
                          unknown t[257601](257614 call tmp[257613] 0)
                          unknown ok[257603](257617 call tmp[257613] 1)
                          (257625 'end of statement')
                          if(257681 call _cond_test(257628 call ! ok[257603]))
                          {
                            (257635 call = err[257085](257634 call qio_format_error_arg_mismatch i[258219]))
                          }
                          {
                            if(257674 call _cond_test(257644 call ==(257642 call argType[257168] i[258219]) QIO_CONV_ARG_TYPE_BINARY_IMAG[235022]))
                            {
                              (257659 call = err[257085](257658 call(399504 call . this[257027] c"_write_real")(257649 call . style[257152] c"max_width_bytes")(257655 call _cast real(64)[16] t[257601]) i[258219]))
                            }
                            {
                              Try
                              {
                                {
                                  (257670 call(399510 call . this[257027] c"_writeOne") dynamic[230837] t[257601] origLocale[257079])
                                }
                              }
                            }
                          }
                        }
                        {
                          if(258168 call _cond_test(258166 call ||(258160 call == tmp[258109] QIO_CONV_ARG_TYPE_COMPLEX[235027])(258163 call == tmp[258109] QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235032])))
                          {
                            unknown tmp[257702] "temp"(257701 call _toComplex(257699 call args[257024] i[258219]))
                            (257709 call _check_tuple_var_decl tmp[257702] 2)
                            unknown t[257690](257703 call tmp[257702] 0)
                            unknown ok[257692](257706 call tmp[257702] 1)
                            (257714 'end of statement')
                            if(257767 call _cond_test(257717 call ! ok[257692]))
                            {
                              (257724 call = err[257085](257723 call qio_format_error_arg_mismatch i[258219]))
                            }
                            {
                              if(257760 call _cond_test(257733 call ==(257731 call argType[257168] i[258219]) QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235032]))
                              {
                                (257745 call = err[257085](257744 call(399529 call . this[257027] c"_write_complex")(257738 call . style[257152] c"max_width_bytes") t[257690] i[258219]))
                              }
                              {
                                Try
                                {
                                  {
                                    (257756 call(399535 call . this[257027] c"_writeOne") dynamic[230837] t[257690] origLocale[257079])
                                  }
                                }
                              }
                            }
                          }
                          {
                            if(258175 call _cond_test(258172 call == tmp[258109] QIO_CONV_ARG_TYPE_NUMERIC[234982]))
                            {
                              unknown tmp[257787] "temp"(257786 call _toNumeric(257784 call args[257024] i[258219]))
                              (257794 call _check_tuple_var_decl tmp[257787] 2)
                              unknown t[257775](257788 call tmp[257787] 0)
                              unknown ok[257777](257791 call tmp[257787] 1)
                              (257799 'end of statement')
                              if(257825 call _cond_test(257802 call ! ok[257777]))
                              {
                                (257809 call = err[257085](257808 call qio_format_error_arg_mismatch i[258219]))
                              }
                              {
                                Try
                                {
                                  {
                                    (257821 call(399547 call . this[257027] c"_writeOne") dynamic[230837] t[257775] origLocale[257079])
                                  }
                                }
                              }
                            }
                            {
                              if(258182 call _cond_test(258179 call == tmp[258109] QIO_CONV_ARG_TYPE_CHAR[235037]))
                              {
                                unknown tmp[257846] "temp"(257845 call _toChar(257843 call args[257024] i[258219]))
                                (257853 call _check_tuple_var_decl tmp[257846] 2)
                                unknown t[257834](257847 call tmp[257846] 0)
                                unknown ok[257836](257850 call tmp[257846] 1)
                                (257858 'end of statement')
                                if(257888 call _cond_test(257861 call ! ok[257836]))
                                {
                                  (257868 call = err[257085](257867 call qio_format_error_arg_mismatch i[258219]))
                                }
                                {
                                  Try
                                  {
                                    {
                                      (257884 call(399559 call . this[257027] c"_writeOne") dynamic[230837](257878 'new'(257882 call ioChar[238550] t[257834])) origLocale[257079])
                                    }
                                  }
                                }
                              }
                              {
                                if(258189 call _cond_test(258186 call == tmp[258109] QIO_CONV_ARG_TYPE_BINARY_STRING[235047]))
                                {
                                  unknown tmp[257909] "temp"(257908 call _toBytes(257906 call args[257024] i[258219]))
                                  (257916 call _check_tuple_var_decl tmp[257909] 2)
                                  unknown t[257897](257910 call tmp[257909] 0)
                                  unknown ok[257899](257913 call tmp[257909] 1)
                                  (257921 'end of statement')
                                  if(257947 call _cond_test(257924 call ! ok[257899]))
                                  {
                                    (257931 call = err[257085](257930 call qio_format_error_arg_mismatch i[258219]))
                                  }
                                  {
                                    Try
                                    {
                                      {
                                        (257943 call(399572 call . this[257027] c"_writeOne") dynamic[230837] t[257897] origLocale[257079])
                                      }
                                    }
                                  }
                                }
                                {
                                  if(258196 call _cond_test(258193 call == tmp[258109] QIO_CONV_ARG_TYPE_STRING[235042]))
                                  {
                                    unknown tmp[257968] "temp"(257967 call _toString(257965 call args[257024] i[258219]))
                                    (257975 call _check_tuple_var_decl tmp[257968] 2)
                                    unknown t[257956](257969 call tmp[257968] 0)
                                    unknown ok[257958](257972 call tmp[257968] 1)
                                    (257980 'end of statement')
                                    if(258006 call _cond_test(257983 call ! ok[257958]))
                                    {
                                      (257990 call = err[257085](257989 call qio_format_error_arg_mismatch i[258219]))
                                    }
                                    {
                                      Try
                                      {
                                        {
                                          (258002 call(399584 call . this[257027] c"_writeOne") dynamic[230837] t[257956] origLocale[257079])
                                        }
                                      }
                                    }
                                  }
                                  {
                                    if(258203 call _cond_test(258200 call == tmp[258109] QIO_CONV_ARG_TYPE_REGEXP[235057]))
                                    {
                                      (258019 call = err[257085](258018 call qio_format_error_write_regexp))
                                    }
                                    {
                                      if(258210 call _cond_test(258207 call == tmp[258109] QIO_CONV_ARG_TYPE_REPR[235052]))
                                      {
                                        Try
                                        {
                                          {
                                            (258038 call(399593 call . this[257027] c"_writeOne") dynamic[230837](258036 call args[257024] i[258219]) origLocale[257079])
                                          }
                                        }
                                      }
                                      {
                                        (258103 'throw'(258047 'new'(_chpl_manager = _owned[30](?))(258102 call IllegalArgumentError[388835](?)(258073 call +(258070 call + "args("(258068 call _cast string[26] i[258219])) ")")(258100 call + "writef internal error "(258098 call _cast string[26](258096 call argType[257168] i[258219]))))))
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          label _unused_continueLabel[258224]
          label _breakLabel[258223]
        }
        if(258303 call _cond_test(258257 call ! err[257085]))
        {
          if(258282 call _cond_test(258261 call < cur[257125] len[257137]))
          {
            unknown dummy[258264] c_int[20549]
            (258267 'end of statement')
            (258280 call(399609 call . this[257027] c"_format_reader") fmtStr[257017] cur[257125] len[257137] err[257085] conv[257142] gotConv[257147] style[257152] r[257175] 0)
          }
          if(258299 call _cond_test(258289 call < cur[257125] len[257137]))
          {
            (258295 call = err[257085](258294 call qio_format_error_too_few_args))
          }
        }
        (258313 call(258308 call . this[257027] c"_set_style") save_style[257119])
      }
      (258322 'elided on block' 0 tmp[258318])
    }
    if(258354 call _cond_test err[257085])
    {
      Try
      {
        {
          (258350 call(258328 call . this[257027] c"_ch_ioerror") err[257085] "in channel.writef(fmt:string)")
        }
      }
    }
    (258360 return 1)
  }
  where {
    (257041 call ||(257036 call isStringType t[257015])(257040 call isBytesType t[257015]))
  }
  { scopeless type
    bool[10]
  }
  function channel[237647](?).writef[258374](arg _mt[258379]:_MT[238], arg this[258376]:channel[237647](?) :
  channel[237647](?), arg fmtStr[258371] :
  unknown t[258369]) : _unknown[51] throws "method"
  {
    if(258400 call _cond_test(258393 call !(399630 call . this[258376] c"writing")))
    {
      (258398 call compilerError "writef on read-only channel")
    }
    unknown err[258408](399634 call ENOERR[223571]) syserr[223501]
    (258411 'end of statement')
    {
      const tmp[258579] "const" "temp"
      (258580 'move' tmp[258579](258577 'deref'(258576 '_wide_get_locale'(258413 call . this[258376] c"home"))))
      {
        Try
        {
          {
            (258421 call(258417 call . this[258376] c"lock"))
          }
        }
        Defer
        {
          {
            (258431 call(258427 call . this[258376] c"unlock"))
          }
        }
        unknown save_style[258442](258441 call(258437 call . this[258376] c"_style"))
        (258445 'end of statement')
        unknown cur[258448] 0 size_t[20654]
        (258451 'end of statement')
        unknown len[258460](258458 call _cast size_t[20654](258454 call . fmtStr[258371] c"size")) size_t[20654]
        (258463 'end of statement')
        unknown conv[258465] qio_conv_t[234973]
        (258468 'end of statement')
        unknown gotConv[258470] bool[10]
        (258473 'end of statement')
        unknown style[258475] iostyle[231761]
        (258478 'end of statement')
        unknown end[258480] size_t[20654]
        (258483 'end of statement')
        unknown dummy[258485] c_int[20549]
        (258488 'end of statement')
        unknown r[258492] unmanaged _channel_regexp_info?[415583]
        (258495 'end of statement')
        Defer
        {
          {
            if(258502 call _cond_test r[258492])
            {
              (258499 call chpl__delete r[258492])
            }
          }
        }
        (258521 call(399647 call . this[258376] c"_format_reader") fmtStr[258371] cur[258448] len[258460] err[258408] conv[258465] gotConv[258470] style[258475] r[258492] 0)
        if(258540 call _cond_test(258524 call ! err[258408]))
        {
          if(258535 call _cond_test gotConv[258470])
          {
            (258531 call = err[258408](258530 call qio_format_error_too_few_args))
          }
        }
        if(258564 call _cond_test(258545 call ! err[258408]))
        {
          if(258559 call _cond_test(258549 call < cur[258448] len[258460]))
          {
            (258555 call = err[258408](258554 call qio_format_error_too_few_args))
          }
        }
        (258574 call(258569 call . this[258376] c"_set_style") save_style[258442])
      }
      (258583 'elided on block' 0 tmp[258579])
    }
    if(258615 call _cond_test err[258408])
    {
      Try
      {
        {
          (258611 call(258589 call . this[258376] c"_ch_ioerror") err[258408] "in channel.writef(fmt:string, ...)")
        }
      }
    }
    (258621 return 1)
  }
  where {
    (258390 call ||(258385 call isStringType t[258369])(258389 call isBytesType t[258369]))
  }
  { scopeless type
    bool[10]
  }
  function channel[237647](?).readf[258635](arg _mt[258645]:_MT[238], arg this[258642]:channel[237647](?) :
  channel[237647](?), arg fmtStr[258632] :
  unknown t[258630], ref arg args[258639]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    if(258680 call _cond_test(399672 call . this[258642] c"writing"))
    {
      (258678 call compilerError "readf on write-only channel")
    }
    const origLocale[258692] "const"(258691 call(258687 call . this[258642] c"getLocaleOfIoRequest"))
    (258695 'end of statement')
    unknown err[258698](399676 call ENOERR[223571]) syserr[223501]
    (258701 'end of statement')
    {
      const tmp[260783] "const" "temp"
      (260784 'move' tmp[260783](260781 'deref'(260780 '_wide_get_locale'(258703 call . this[258642] c"home"))))
      {
        Try
        {
          {
            (258711 call(258707 call . this[258642] c"lock"))
          }
        }
        Defer
        {
          {
            (258721 call(258717 call . this[258642] c"unlock"))
          }
        }
        unknown save_style[258732](258731 call(258727 call . this[258642] c"_style"))
        (258735 'end of statement')
        Defer
        {
          {
            (258742 call(258737 call . this[258642] c"_set_style") save_style[258732])
          }
        }
        unknown cur[258749] 0 size_t[20654]
        (258752 'end of statement')
        unknown len[258761](258759 call _cast size_t[20654](258755 call . fmtStr[258632] c"size")) size_t[20654]
        (258764 'end of statement')
        unknown conv[258766] qio_conv_t[234973]
        (258769 'end of statement')
        unknown gotConv[258771] bool[10]
        (258774 'end of statement')
        unknown style[258776] iostyle[231761]
        (258779 'end of statement')
        unknown end[258781] size_t[20654]
        (258784 'end of statement')
        unknown argType[258792](258790 call *(258787 call + k[258637] 5) c_int[20549])
        (258795 'end of statement')
        unknown r[258799] unmanaged _channel_regexp_info?[415583]
        (258802 'end of statement')
        Defer
        {
          {
            if(258809 call _cond_test r[258799])
            {
              (258806 call chpl__delete r[258799])
            }
          }
        }
        {
          unknown _indexOfInterest[258837] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[258838] "expr temp" "temp"
          (258847 'move' _iterator[258838](258845 call _getIterator(258858 call chpl_direct_range_iter 0(258852 call -(258854 call . argType[258792] c"size") 1) 1)))
          Defer
          {
            {
              (258874 call _freeIterator _iterator[258838])
            }
          }
          { scopeless type
            (258863 'move' _indexOfInterest[258837](258860 call iteratorIndex _iterator[258838]))
          }
          ForLoop[258839]
          {
            unknown i[258867] "index var" "insert auto destroy"
            (258869 'move' i[258867] _indexOfInterest[258837])
            {
              (258833 call =(258831 call argType[258792] i[258867]) QIO_CONV_UNK[234977])
            }
            label _continueLabel[258842]
            _indexOfInterest[258837]
            _iterator[258838]
          }
          label _breakLabel[258843]
        }
        (258887 call = err[258698](258886 call qio_channel_mark 0(399696 call . this[258642] c"_channel_internal")))
        if(260775 call _cond_test(258891 call ! err[258698]))
        {
          Try
          {
            {
              unknown j[258894] 0
              (258897 'end of statement')
              {
                unknown i[260632] 0
                unknown tmp[260633] "maybe param" "temp"
                (260645 'move' tmp[260633](260643 call chpl_compute_low_param_loop_bound 0(258902 call - k[258637] 1)))
                unknown tmp[260634] "maybe param" "temp"
                (260655 'move' tmp[260634](260653 call chpl_compute_high_param_loop_bound 0(260650 call - k[258637] 1)))
                unknown tmp[260635] "maybe param" "temp"
                (260658 'move' tmp[260635] 1)
                ParamForLoop[260660]
                { i[260632] tmp[260633] tmp[260634] tmp[260635]
                  {
                    if(259054 call _cond_test(258908 call <= j[258894] i[260632]))
                    {
                      (258921 call(399704 call . this[258642] c"_format_reader") fmtStr[258632] cur[258749] len[258761] err[258698] conv[258766] gotConv[258771] style[258776] r[258799] 1)
                      if(259050 call _cond_test(258926 call != r[258799] nil[44]))
                      {
                        const rnn[258931] "const"(258929 call postfix! r[258799])
                        (258934 'end of statement')
                        if(259046 call _cond_test(258937 call . rnn[258931] c"hasRegexp"))
                        {
                          if(258961 call _cond_test(258951 call >(258948 call -(258945 call + i[260632](258942 call . rnn[258931] c"ncaptures")) 1) k[258637]))
                          {
                            (258957 call = err[258698](258956 call qio_format_error_too_few_args))
                          }
                          {
                            unknown _indexOfInterest[259003] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[259004] "expr temp" "temp"
                            (259013 'move' _iterator[259004](259011 call _getIterator(259023 call chpl_direct_counted_range_iter 0(259019 call . rnn[258931] c"ncaptures"))))
                            Defer
                            {
                              {
                                (259039 call _freeIterator _iterator[259004])
                              }
                            }
                            { scopeless type
                              (259028 'move' _indexOfInterest[259003](259025 call iteratorIndex _iterator[259004]))
                            }
                            ForLoop[259005]
                            {
                              unknown z[259032] "index var" "insert auto destroy"
                              (259034 'move' z[259032] _indexOfInterest[259003])
                              {
                                if(258998 call _cond_test(258984 call <=(258978 call + i[260632] z[259032])(258981 call . argType[258792] c"size")))
                                {
                                  (258994 call =(258992 call argType[258792](258989 call + i[260632] z[259032])) QIO_CONV_SET_CAPTURE[235122])
                                }
                              }
                              label _continueLabel[259008]
                              _indexOfInterest[259003]
                              _iterator[259004]
                            }
                            label _breakLabel[259009]
                          }
                        }
                      }
                    }
                    (259066 call(399727 call . this[258642] c"_conv_helper") err[258698] conv[258766] gotConv[258771] j[258894] argType[258792])
                    unknown domore[259083](259082 call(399736 call . this[258642] c"_conv_sethandler") err[258698](259074 call argType[258792] i[260632]) style[258776] i[260632](259080 call args[258639] i[260632]) 0)
                    (259086 'end of statement')
                    if(260628 call _cond_test domore[259083])
                    {
                      (259094 call(259089 call . this[258642] c"_set_style") style[258776])
                      {
                        unknown tmp[260515] "expr temp" "maybe param" "maybe type" "temp"
                        (260517 'move' tmp[260515](259100 call argType[258792] i[260632]))
                        if(260527 call _cond_test(260525 call ||(260519 call == tmp[260515] QIO_CONV_ARG_TYPE_SIGNED[234987])(260522 call == tmp[260515] QIO_CONV_ARG_TYPE_BINARY_SIGNED[234992])))
                        {
                          unknown tmp[259117] "temp"(259116 call _toSigned(259114 call args[258639] i[260632]))
                          (259124 call _check_tuple_var_decl tmp[259117] 2)
                          unknown t[259105](259118 call tmp[259117] 0)
                          unknown ok[259107](259121 call tmp[259117] 1)
                          (259129 'end of statement')
                          if(259208 call _cond_test(259132 call ! ok[259107]))
                          {
                            (259139 call = err[258698](259138 call qio_format_error_arg_mismatch i[260632]))
                          }
                          {
                            unknown ti[259144] int(64)[13]
                            (259147 'end of statement')
                            if(259181 call _cond_test(259154 call ==(259152 call argType[258792] i[260632]) QIO_CONV_ARG_TYPE_BINARY_SIGNED[234992]))
                            {
                              (259166 call = err[258698](259165 call(399764 call . this[258642] c"_read_signed")(259159 call . style[258776] c"max_width_bytes") ti[259144] i[260632]))
                            }
                            {
                              Try
                              {
                                {
                                  (259177 call(399770 call . this[258642] c"_readOne") dynamic[230837] ti[259144] origLocale[258692])
                                }
                              }
                            }
                            if(259203 call _cond_test(259188 call ! err[258698]))
                            {
                              (259200 call = err[258698](259199 call _setIfPrimitive(259195 call args[258639] i[260632]) ti[259144] i[260632]))
                            }
                          }
                        }
                        {
                          if(260538 call _cond_test(260536 call ||(260530 call == tmp[260515] QIO_CONV_ARG_TYPE_UNSIGNED[234997])(260533 call == tmp[260515] QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[235002])))
                          {
                            unknown tmp[259229] "temp"(259228 call _toUnsigned(259226 call args[258639] i[260632]))
                            (259236 call _check_tuple_var_decl tmp[259229] 2)
                            unknown t[259217](259230 call tmp[259229] 0)
                            unknown ok[259219](259233 call tmp[259229] 1)
                            (259241 'end of statement')
                            if(259320 call _cond_test(259244 call ! ok[259219]))
                            {
                              (259251 call = err[258698](259250 call qio_format_error_arg_mismatch i[260632]))
                            }
                            {
                              unknown ti[259256] uint(64)[115]
                              (259259 'end of statement')
                              if(259293 call _cond_test(259266 call ==(259264 call argType[258792] i[260632]) QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[235002]))
                              {
                                (259278 call = err[258698](259277 call(399795 call . this[258642] c"_read_unsigned")(259271 call . style[258776] c"max_width_bytes") ti[259256] i[260632]))
                              }
                              {
                                Try
                                {
                                  {
                                    (259289 call(399801 call . this[258642] c"_readOne") dynamic[230837] ti[259256] origLocale[258692])
                                  }
                                }
                              }
                              if(259315 call _cond_test(259300 call ! err[258698]))
                              {
                                (259312 call = err[258698](259311 call _setIfPrimitive(259307 call args[258639] i[260632]) ti[259256] i[260632]))
                              }
                            }
                          }
                          {
                            if(260550 call _cond_test(260548 call ||(260542 call == tmp[260515] QIO_CONV_ARG_TYPE_REAL[235007])(260545 call == tmp[260515] QIO_CONV_ARG_TYPE_BINARY_REAL[235012])))
                            {
                              unknown tmp[259341] "temp"(259340 call _toReal(259338 call args[258639] i[260632]))
                              (259348 call _check_tuple_var_decl tmp[259341] 2)
                              unknown t[259329](259342 call tmp[259341] 0)
                              unknown ok[259331](259345 call tmp[259341] 1)
                              (259353 'end of statement')
                              if(259432 call _cond_test(259356 call ! ok[259331]))
                              {
                                (259363 call = err[258698](259362 call qio_format_error_arg_mismatch i[260632]))
                              }
                              {
                                unknown ti[259368] real(64)[16]
                                (259371 'end of statement')
                                if(259405 call _cond_test(259378 call ==(259376 call argType[258792] i[260632]) QIO_CONV_ARG_TYPE_BINARY_REAL[235012]))
                                {
                                  (259390 call = err[258698](259389 call(399826 call . this[258642] c"_read_real")(259383 call . style[258776] c"max_width_bytes") ti[259368] i[260632]))
                                }
                                {
                                  Try
                                  {
                                    {
                                      (259401 call(399832 call . this[258642] c"_readOne") dynamic[230837] ti[259368] origLocale[258692])
                                    }
                                  }
                                }
                                if(259427 call _cond_test(259412 call ! err[258698]))
                                {
                                  (259424 call = err[258698](259423 call _setIfPrimitive(259419 call args[258639] i[260632]) ti[259368] i[260632]))
                                }
                              }
                            }
                            {
                              if(260562 call _cond_test(260560 call ||(260554 call == tmp[260515] QIO_CONV_ARG_TYPE_IMAG[235017])(260557 call == tmp[260515] QIO_CONV_ARG_TYPE_BINARY_IMAG[235022])))
                              {
                                unknown tmp[259453] "temp"(259452 call _toImag(259450 call args[258639] i[260632]))
                                (259460 call _check_tuple_var_decl tmp[259453] 2)
                                unknown t[259441](259454 call tmp[259453] 0)
                                unknown ok[259443](259457 call tmp[259453] 1)
                                (259465 'end of statement')
                                if(259557 call _cond_test(259468 call ! ok[259443]))
                                {
                                  (259475 call = err[258698](259474 call qio_format_error_arg_mismatch i[260632]))
                                }
                                {
                                  unknown ti[259480] imag(64)[130]
                                  (259483 'end of statement')
                                  if(259531 call _cond_test(259490 call ==(259488 call argType[258792] i[260632]) QIO_CONV_ARG_TYPE_BINARY_IMAG[235022]))
                                  {
                                    unknown tr[259493] real(64)[16]
                                    (259496 'end of statement')
                                    (259508 call = err[258698](259507 call(399855 call . this[258642] c"_read_real")(259501 call . style[258776] c"max_width_bytes") tr[259493] i[260632]))
                                    (259516 call = ti[259480](259514 call _cast imag(64)[130] tr[259493]))
                                  }
                                  {
                                    Try
                                    {
                                      {
                                        (259527 call(399863 call . this[258642] c"_readOne") dynamic[230837] ti[259480] origLocale[258692])
                                      }
                                    }
                                  }
                                  if(259552 call _cond_test(259537 call ! err[258698]))
                                  {
                                    (259549 call = err[258698](259548 call _setIfPrimitive(259544 call args[258639] i[260632]) ti[259480] i[260632]))
                                  }
                                }
                              }
                              {
                                if(260574 call _cond_test(260572 call ||(260566 call == tmp[260515] QIO_CONV_ARG_TYPE_COMPLEX[235027])(260569 call == tmp[260515] QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235032])))
                                {
                                  unknown tmp[259578] "temp"(259577 call _toComplex(259575 call args[258639] i[260632]))
                                  (259585 call _check_tuple_var_decl tmp[259578] 2)
                                  unknown t[259566](259579 call tmp[259578] 0)
                                  unknown ok[259568](259582 call tmp[259578] 1)
                                  (259590 'end of statement')
                                  if(259669 call _cond_test(259593 call ! ok[259568]))
                                  {
                                    (259600 call = err[258698](259599 call qio_format_error_arg_mismatch i[260632]))
                                  }
                                  {
                                    unknown ti[259605] complex(128)[140]
                                    (259608 'end of statement')
                                    if(259642 call _cond_test(259615 call ==(259613 call argType[258792] i[260632]) QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235032]))
                                    {
                                      (259627 call = err[258698](259626 call(399888 call . this[258642] c"_read_complex")(259620 call . style[258776] c"max_width_bytes") ti[259605] i[260632]))
                                    }
                                    {
                                      Try
                                      {
                                        {
                                          (259638 call(399894 call . this[258642] c"_readOne") dynamic[230837] ti[259605] origLocale[258692])
                                        }
                                      }
                                    }
                                    if(259664 call _cond_test(259649 call ! err[258698]))
                                    {
                                      (259661 call = err[258698](259660 call _setIfPrimitive(259656 call args[258639] i[260632]) ti[259605] i[260632]))
                                    }
                                  }
                                }
                                {
                                  if(260581 call _cond_test(260578 call == tmp[260515] QIO_CONV_ARG_TYPE_NUMERIC[234982]))
                                  {
                                    unknown tmp[259689] "temp"(259688 call _toNumeric(259686 call args[258639] i[260632]))
                                    (259696 call _check_tuple_var_decl tmp[259689] 2)
                                    unknown t[259677](259690 call tmp[259689] 0)
                                    unknown ok[259679](259693 call tmp[259689] 1)
                                    (259701 'end of statement')
                                    if(259754 call _cond_test(259704 call ! ok[259679]))
                                    {
                                      (259711 call = err[258698](259710 call qio_format_error_arg_mismatch i[260632]))
                                    }
                                    {
                                      unknown ti[259716] t[259677]
                                      (259719 'end of statement')
                                      Try
                                      {
                                        {
                                          (259729 call(399913 call . this[258642] c"_readOne") dynamic[230837] ti[259716] origLocale[258692])
                                        }
                                      }
                                      if(259749 call _cond_test(259734 call ! err[258698]))
                                      {
                                        (259746 call = err[258698](259745 call _setIfPrimitive(259741 call args[258639] i[260632]) ti[259716] i[260632]))
                                      }
                                    }
                                  }
                                  {
                                    if(260588 call _cond_test(260585 call == tmp[260515] QIO_CONV_ARG_TYPE_CHAR[235037]))
                                    {
                                      unknown tmp[259774] "temp"(259773 call _toChar(259771 call args[258639] i[260632]))
                                      (259781 call _check_tuple_var_decl tmp[259774] 2)
                                      unknown t[259762](259775 call tmp[259774] 0)
                                      unknown ok[259764](259778 call tmp[259774] 1)
                                      (259786 'end of statement')
                                      unknown chr[259793](259788 'new'(259792 call ioChar[238550] t[259762]))
                                      (259796 'end of statement')
                                      if(259821 call _cond_test(259798 call ! ok[259764]))
                                      {
                                        (259805 call = err[258698](259804 call qio_format_error_arg_mismatch i[260632]))
                                      }
                                      {
                                        Try
                                        {
                                          {
                                            (259817 call(399933 call . this[258642] c"_readOne") dynamic[230837] chr[259793] origLocale[258692])
                                          }
                                        }
                                      }
                                      if(259841 call _cond_test(259827 call ! err[258698]))
                                      {
                                        (259839 call _setIfChar(259833 call args[258639] i[260632])(259836 call . chr[259793] c"ch"))
                                      }
                                    }
                                    {
                                      if(260595 call _cond_test(260592 call == tmp[260515] QIO_CONV_ARG_TYPE_BINARY_STRING[235047]))
                                      {
                                        unknown tmp[259862] "temp"(259861 call _toBytes(259859 call args[258639] i[260632]))
                                        (259869 call _check_tuple_var_decl tmp[259862] 2)
                                        unknown t[259850](259863 call tmp[259862] 0)
                                        unknown ok[259852](259866 call tmp[259862] 1)
                                        (259874 'end of statement')
                                        if(259900 call _cond_test(259877 call ! ok[259852]))
                                        {
                                          (259884 call = err[258698](259883 call qio_format_error_arg_mismatch i[260632]))
                                        }
                                        {
                                          Try
                                          {
                                            {
                                              (259896 call(399948 call . this[258642] c"_readOne") dynamic[230837] t[259850] origLocale[258692])
                                            }
                                          }
                                        }
                                        if(259921 call _cond_test(259906 call ! err[258698]))
                                        {
                                          (259918 call = err[258698](259917 call _setIfPrimitive(259913 call args[258639] i[260632]) t[259850] i[260632]))
                                        }
                                      }
                                      {
                                        if(260602 call _cond_test(260599 call == tmp[260515] QIO_CONV_ARG_TYPE_STRING[235042]))
                                        {
                                          unknown tmp[259942] "temp"(259941 call _toString(259939 call args[258639] i[260632]))
                                          (259949 call _check_tuple_var_decl tmp[259942] 2)
                                          unknown t[259930](259943 call tmp[259942] 0)
                                          unknown ok[259932](259946 call tmp[259942] 1)
                                          (259954 'end of statement')
                                          if(259980 call _cond_test(259957 call ! ok[259932]))
                                          {
                                            (259964 call = err[258698](259963 call qio_format_error_arg_mismatch i[260632]))
                                          }
                                          {
                                            Try
                                            {
                                              {
                                                (259976 call(399966 call . this[258642] c"_readOne") dynamic[230837] t[259930] origLocale[258692])
                                              }
                                            }
                                          }
                                          if(260001 call _cond_test(259986 call ! err[258698]))
                                          {
                                            (259998 call = err[258698](259997 call _setIfPrimitive(259993 call args[258639] i[260632]) t[259930] i[260632]))
                                          }
                                        }
                                        {
                                          if(260609 call _cond_test(260606 call == tmp[260515] QIO_CONV_ARG_TYPE_REGEXP[235057]))
                                          {
                                            unknown tmp[260022] "temp"(260021 call _toRegexp(260019 call args[258639] i[260632]))
                                            (260029 call _check_tuple_var_decl tmp[260022] 2)
                                            unknown t[260010](260023 call tmp[260022] 0)
                                            unknown ok[260012](260026 call tmp[260022] 1)
                                            (260034 'end of statement')
                                            if(260228 call _cond_test(260037 call ! ok[260012]))
                                            {
                                              (260044 call = err[258698](260043 call qio_format_error_arg_mismatch i[260632]))
                                            }
                                            {
                                              if(260062 call _cond_test(260050 call == r[258799] nil[44]))
                                              {
                                                (260059 call = r[258799](260055 'new'(_chpl_manager = unmanaged[220](?))(260058 call _channel_regexp_info[398718](?))))
                                              }
                                              const rnn[260071] "const"(260069 call postfix! r[258799])
                                              (260074 'end of statement')
                                              (260080 call(260076 call . rnn[260071] c"clear"))
                                              (260092 call =(260083 call . rnn[260071] c"theRegexp")(260089 call . t[260010] c"_regexp"))
                                              (260100 call =(260096 call . rnn[260071] c"hasRegexp") 1)
                                              (260108 call =(260104 call . rnn[260071] c"releaseRegexp") 0)
                                              (260118 call(399988 call . this[258642] c"_match_regexp_if_needed") cur[258749] len[258761] err[258698] style[258776] rnn[260071])
                                              if(260141 call _cond_test(260131 call >(260128 call -(260125 call + i[260632](260122 call . rnn[260071] c"ncaptures")) 1) k[258637]))
                                              {
                                                (260137 call = err[258698](260136 call qio_format_error_too_few_args))
                                              }
                                              {
                                                unknown _indexOfInterest[260185] "an _indexOfInterest or chpl__followIdx variable" "temp"
                                                unknown _iterator[260186] "expr temp" "temp"
                                                (260195 'move' _iterator[260186](260193 call _getIterator(260205 call chpl_direct_counted_range_iter 0(260201 call . rnn[260071] c"ncaptures"))))
                                                Defer
                                                {
                                                  {
                                                    (260221 call _freeIterator _iterator[260186])
                                                  }
                                                }
                                                { scopeless type
                                                  (260210 'move' _indexOfInterest[260185](260207 call iteratorIndex _iterator[260186]))
                                                }
                                                ForLoop[260187]
                                                {
                                                  unknown z[260214] "index var" "insert auto destroy"
                                                  (260216 'move' z[260214] _indexOfInterest[260185])
                                                  {
                                                    if(260180 call _cond_test(260163 call <=(260157 call + i[260632] z[260214])(260160 call . argType[258792] c"size")))
                                                    {
                                                      (260176 call =(260174 call argType[258792](260171 call +(260168 call + i[260632] z[260214]) 1)) QIO_CONV_SET_CAPTURE[235122])
                                                    }
                                                  }
                                                  label _continueLabel[260190]
                                                  _indexOfInterest[260185]
                                                  _iterator[260186]
                                                }
                                                label _breakLabel[260191]
                                              }
                                            }
                                          }
                                          {
                                            if(260616 call _cond_test(260613 call == tmp[260515] QIO_CONV_ARG_TYPE_REPR[235052]))
                                            {
                                              Try
                                              {
                                                {
                                                  (260247 call(400007 call . this[258642] c"_readOne") dynamic[230837](260245 call args[258639] i[260632]) origLocale[258692])
                                                }
                                              }
                                            }
                                            {
                                              if(260623 call _cond_test(260620 call == tmp[260515] QIO_CONV_SET_CAPTURE[235122]))
                                              {
                                                if(260460 call _cond_test(260258 call == r[258799] nil[44]))
                                                {
                                                  (260264 call = err[258698](260263 call qio_format_error_bad_regexp))
                                                }
                                                {
                                                  const rnn[260271] "const"(260269 call postfix! r[258799])
                                                  (260274 'end of statement')
                                                  (260283 call(400018 call . this[258642] c"_match_regexp_if_needed") cur[258749] len[258761] err[258698] style[258776] rnn[260271])
                                                  if(260456 call _cond_test(260295 call >=(260288 call . rnn[260271] c"capturei")(260292 call . rnn[260271] c"ncaptures")))
                                                  {
                                                    (260301 call = err[258698](260300 call qio_format_error_bad_regexp))
                                                  }
                                                  {
                                                    if(260443 call _cond_test(260312 call _isIoPrimitiveType(260310 'typeof'(260309 call args[258639] i[260632]))))
                                                    {
                                                      Try
                                                      {
                                                        {
                                                          if(260410 call _cond_test(260319 call ==(260317 'typeof'(260316 call args[258639] i[260632])) string[26]))
                                                          {
                                                            (260340 call =(260324 call args[258639] i[260632])(260339 call(260335 call .(260334 call(260326 call . rnn[260271] c"capArr")(260330 call . rnn[260271] c"capturei")) c"decode")))
                                                          }
                                                          {
                                                            if(260404 call _cond_test(260350 call isEnumType(260348 'typeof'(260347 call args[258639] i[260632]))))
                                                            {
                                                              (260377 call =(260354 call args[258639] i[260632])(260375 call _cast(260374 'typeof'(260373 call args[258639] i[260632]))(260369 call(260365 call .(260364 call(260356 call . rnn[260271] c"capArr")(260360 call . rnn[260271] c"capturei")) c"decode"))))
                                                            }
                                                            {
                                                              (260401 call =(260383 call args[258639] i[260632])(260399 call _cast(260398 'typeof'(260397 call args[258639] i[260632]))(260393 call(260385 call . rnn[260271] c"capArr")(260389 call . rnn[260271] c"capturei"))))
                                                            }
                                                          }
                                                        }
                                                      }
                                                      Catch e : DecodeError
                                                      {
                                                        unknown tmp[354713] "temp"(354717 'dynamic_cast' unmanaged DecodeError?[415658](354716 'current error'))
                                                        if(354720 '!=' tmp[354713] nil[44])
                                                        {
                                                          unknown e[354726](354731 'new'(354729 call _owned[30](?)(354727 'to non nilable class' tmp[354713])))
                                                          {
                                                            (260426 call = err[258698](260425 call qio_format_error_arg_mismatch i[260632]))
                                                          }
                                                        }
                                                        {
                                                        }
                                                      }
                                                      Catch
                                                      {
                                                        unknown tmp[354734] "temp"(354737 'current error')
                                                        unknown chpl_anon_error[354740](354745 'new'(354743 call _owned[30](?)(354741 'to non nilable class' tmp[354734])))
                                                        {
                                                          (260435 call = err[258698](260434 call qio_format_error_bad_regexp))
                                                        }
                                                      }
                                                    }
                                                    (260453 call +=(260449 call . rnn[260271] c"capturei") 1)
                                                  }
                                                }
                                              }
                                              {
                                                (260509 'throw'(260469 'new'(_chpl_manager = _owned[30](?))(260508 call IllegalArgumentError[388835](?)(260479 call +(260476 call + "args("(260474 call _cast string[26] i[260632])) ")")(260506 call + "readf internal error "(260504 call _cast string[26](260502 call argType[258792] i[260632]))))))
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                label _unused_continueLabel[260637]
                label _breakLabel[260636]
              }
              if(260700 call _cond_test(260670 call ! err[258698]))
              {
                if(260695 call _cond_test(260674 call < cur[258749] len[258761]))
                {
                  unknown dummy[260677] c_int[20549]
                  (260680 'end of statement')
                  (260693 call(400057 call . this[258642] c"_format_reader") fmtStr[258632] cur[258749] len[258761] err[258698] conv[258766] gotConv[258771] style[258776] r[258799] 1)
                }
              }
              if(260724 call _cond_test(260705 call ! err[258698]))
              {
                if(260719 call _cond_test(260709 call < cur[258749] len[258761]))
                {
                  (260715 call = err[258698](260714 call qio_format_error_too_few_args))
                }
              }
              if(260743 call _cond_test(260729 call ! err[258698]))
              {
                (260734 call qio_channel_commit_unlocked(400075 call . this[258642] c"_channel_internal"))
              }
              {
                (260740 call qio_channel_revert_unlocked(400080 call . this[258642] c"_channel_internal"))
              }
            }
          }
          Catch thrownError : SystemError
          {
            unknown tmp[354748] "temp"(354752 'dynamic_cast' unmanaged SystemError?[415670](354751 'current error'))
            if(354755 '!=' tmp[354748] nil[44])
            {
              unknown thrownError[354761](354766 'new'(354764 call _owned[30](?)(354762 'to non nilable class' tmp[354748])))
              {
                if(260761 call _cond_test(260756 call !=(260752 call . thrownError[354761] c"err")(400084 call EEOF[224141])))
                {
                  (260759 'throw' thrownError[354761])
                }
                (260769 call = err[258698](400088 call EEOF[224141]))
              }
            }
            {
            }
          }
        }
      }
      (260787 'elided on block' 0 tmp[260783])
    }
    if(260838 call _cond_test(260792 call ! err[258698]))
    {
      (260795 return 1)
    }
    {
      if(260834 call _cond_test(260800 call == err[258698](400092 call EEOF[224141])))
      {
        (260803 return 0)
      }
      {
        Try
        {
          {
            (260829 call(260807 call . this[258642] c"_ch_ioerror") err[258698] "in channel.readf(fmt:string, ...)")
          }
        }
      }
    }
    (260844 return 0)
  }
  where {
    (258656 call ||(258651 call isStringType t[258630])(258655 call isBytesType t[258630]))
  }
  { scopeless type
    bool[10]
  }
  function channel[237647](?).readf[260858](arg _mt[260863]:_MT[238], arg this[260860]:channel[237647](?) :
  channel[237647](?), arg fmtStr[260855] :
  unknown t[260853]) : _unknown[51] throws "method" "no doc"
  {
    if(260881 call _cond_test(400099 call . this[260860] c"writing"))
    {
      (260879 call compilerError "readf on write-only channel")
    }
    unknown err[260889](400103 call ENOERR[223571]) syserr[223501]
    (260892 'end of statement')
    {
      const tmp[261091] "const" "temp"
      (261092 'move' tmp[261091](261089 'deref'(261088 '_wide_get_locale'(260894 call . this[260860] c"home"))))
      {
        Try
        {
          {
            (260902 call(260898 call . this[260860] c"lock"))
          }
        }
        Defer
        {
          {
            (260912 call(260908 call . this[260860] c"unlock"))
          }
        }
        unknown save_style[260923](260922 call(260918 call . this[260860] c"_style"))
        (260926 'end of statement')
        Defer
        {
          {
            (260933 call(260928 call . this[260860] c"_set_style") save_style[260923])
          }
        }
        unknown cur[260940] 0 size_t[20654]
        (260943 'end of statement')
        unknown len[260952](260950 call _cast size_t[20654](260946 call . fmtStr[260855] c"size")) size_t[20654]
        (260955 'end of statement')
        unknown conv[260957] qio_conv_t[234973]
        (260960 'end of statement')
        unknown gotConv[260962] bool[10]
        (260965 'end of statement')
        unknown style[260967] iostyle[231761]
        (260970 'end of statement')
        unknown end[260972] size_t[20654]
        (260975 'end of statement')
        unknown dummy[260977] c_int[20549]
        (260980 'end of statement')
        unknown r[260984] unmanaged _channel_regexp_info?[415583]
        (260987 'end of statement')
        Defer
        {
          {
            if(260994 call _cond_test r[260984])
            {
              (260991 call chpl__delete r[260984])
            }
          }
        }
        (261008 call = err[260889](261007 call qio_channel_mark 0(400119 call . this[260860] c"_channel_internal")))
        if(261041 call _cond_test(261012 call ! err[260889]))
        {
          (261025 call(400124 call . this[260860] c"_format_reader") fmtStr[260855] cur[260940] len[260952] err[260889] conv[260957] gotConv[260962] style[260967] r[260984] 1)
          if(261037 call _cond_test gotConv[260962])
          {
            (261033 call = err[260889](261032 call qio_format_error_too_few_args))
          }
        }
        if(261065 call _cond_test(261046 call ! err[260889]))
        {
          if(261060 call _cond_test(261050 call < cur[260940] len[260952]))
          {
            (261056 call = err[260889](261055 call qio_format_error_too_few_args))
          }
        }
        if(261084 call _cond_test(261070 call ! err[260889]))
        {
          (261075 call qio_channel_commit_unlocked(400144 call . this[260860] c"_channel_internal"))
        }
        {
          (261081 call qio_channel_revert_unlocked(400149 call . this[260860] c"_channel_internal"))
        }
      }
      (261095 'elided on block' 0 tmp[261091])
    }
    if(261149 call _cond_test(261100 call ! err[260889]))
    {
      (261103 return 1)
    }
    {
      if(261145 call _cond_test(261108 call == err[260889](400154 call EEOF[224141])))
      {
        (261111 return 0)
      }
      {
        Try
        {
          {
            (261137 call(261115 call . this[260860] c"_ch_ioerror") err[260889] "in channel.readf(fmt:string)")
          }
        }
        (261143 return 0)
      }
    }
  }
  where {
    (260873 call ||(260868 call isStringType t[260853])(260872 call isBytesType t[260853]))
  }
  function readf[261163](arg fmt[261160] :
  string[26], ref arg args[261167]:_any[178](?) ...) : _unknown[51] throws
  {
    (261183 return(261182 'try-expr'(261181 call(261174 call . stdin[250125] c"readf") fmt[261160](261180 'expand_tuple' args[261167]))))
  }
  { scopeless type
    bool[10]
  }
  function readf[261195](arg fmt[261192] :
  string[26]) : _unknown[51] throws "no doc"
  {
    (261206 return(261205 'try-expr'(261204 call(261199 call . stdin[250125] c"readf") fmt[261192])))
  }
  { scopeless type
    bool[10]
  }
  function channel[237647](?).skipField[261215](arg _mt[261220]:_MT[238], arg this[261217]:channel[237647](?) :
  channel[237647](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown err[261224](400161 call ENOERR[223571]) syserr[223501]
    (261227 'end of statement')
    {
      const tmp[261291] "const" "temp"
      (261292 'move' tmp[261291](261289 'deref'(261288 '_wide_get_locale'(261230 call . this[261217] c"home"))))
      {
        Try
        {
          {
            (261238 call(261234 call . this[261217] c"lock"))
          }
        }
        Defer
        {
          {
            (261248 call(261244 call . this[261217] c"unlock"))
          }
        }
        unknown st[261260](261259 call(261254 call . this[261217] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
        (261263 'end of statement')
        if(261284 call _cond_test(261266 call == st[261260] QIO_AGGREGATE_FORMAT_JSON[19717]))
        {
          (261274 call = err[261224](261273 call qio_channel_skip_json_field 0(400169 call . this[261217] c"_channel_internal")))
        }
        {
          (261280 call = err[261224] ENOTSUP[224631])
        }
      }
      (261295 'elided on block' 0 tmp[261291])
    }
    if(261327 call _cond_test err[261224])
    {
      Try
      {
        {
          (261323 call(261301 call . this[261217] c"_ch_ioerror") err[261224] "in skipField")
        }
      }
    }
  }
  function string[26].format[261342](arg _mt[261347]:_MT[238], arg this[261344]:string[26] :
  string[26], arg args[261339]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    Try
    {
      {
        (261356 return(261355 call chpl_do_format this[261344](261354 'expand_tuple' args[261339])))
      }
    }
    Catch e : IllegalArgumentError
    {
      unknown tmp[354769] "temp"(354773 'dynamic_cast' unmanaged IllegalArgumentError?[415676](354772 'current error'))
      if(354776 '!=' tmp[354769] nil[44])
      {
        unknown e[354782](354787 'new'(354785 call _owned[30](?)(354783 'to non nilable class' tmp[354769])))
        {
          (261364 'throw' e[354782])
        }
      }
      {
      }
    }
    Catch e : SystemError
    {
      unknown tmp[354790] "temp"(354794 'dynamic_cast' unmanaged SystemError?[415670](354793 'current error'))
      if(354797 '!=' tmp[354790] nil[44])
      {
        unknown e[354803](354808 'new'(354806 call _owned[30](?)(354804 'to non nilable class' tmp[354790])))
        {
          Try
          {
            {
              (261394 call ioerror(261373 call . e[354803] c"err") "in string.format")
            }
          }
        }
      }
      {
      }
    }
    Catch e : DecodeError
    {
      unknown tmp[354811] "temp"(354815 'dynamic_cast' unmanaged DecodeError?[415658](354814 'current error'))
      if(354818 '!=' tmp[354811] nil[44])
      {
        unknown e[354824](354829 'new'(354827 call _owned[30](?)(354825 'to non nilable class' tmp[354811])))
        {
          Try
          {
            {
              (261410 call ioerror(261406 call _cast syserr[223501] EILSEQ[224361]) "in string.format")
            }
          }
        }
      }
      {
      }
    }
    Catch
    {
      unknown tmp[354832] "temp"(354835 'current error')
      unknown chpl_anon_error[354838](354843 'new'(354841 call _owned[30](?)(354839 'to non nilable class' tmp[354832])))
      {
        Try
        {
          {
            (261423 call ioerror(261419 call _cast syserr[223501] EINVAL[224376]) "in string.format")
          }
        }
      }
    }
    (261449 return "")
  }
  { scopeless type
    string[26]
  }
  function bytes[24].format[261462](arg _mt[261467]:_MT[238], arg this[261464]:bytes[24] :
  bytes[24], arg args[261459]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    Try
    {
      {
        (261476 return(261475 call chpl_do_format this[261464](261474 'expand_tuple' args[261459])))
      }
    }
    Catch e : SystemError
    {
      unknown tmp[354846] "temp"(354850 'dynamic_cast' unmanaged SystemError?[415670](354849 'current error'))
      if(354853 '!=' tmp[354846] nil[44])
      {
        unknown e[354859](354864 'new'(354862 call _owned[30](?)(354860 'to non nilable class' tmp[354846])))
        {
          Try
          {
            {
              (261506 call ioerror(261485 call . e[354859] c"err") "in bytes.format")
            }
          }
        }
      }
      {
      }
    }
    Catch
    {
      unknown tmp[354867] "temp"(354870 'current error')
      unknown chpl_anon_error[354873](354878 'new'(354876 call _owned[30](?)(354874 'to non nilable class' tmp[354867])))
      {
        Try
        {
          {
            (261519 call ioerror(261515 call _cast syserr[223501] EINVAL[224376]) "in bytes.format")
          }
        }
      }
    }
    (261544 return b"")
  }
  { scopeless type
    bytes[24]
  }
  function chpl_do_format[261556](arg fmt[261553] :
  unknown t[261551], arg args[261560]:_any[178](?) ...) : _unknown[51] throws "inline" "private"
  {
    unknown f[261578](261577 'try-expr'(261576 call openmem))
    (261581 'end of statement')
    Defer
    {
      {
        Try
        {
          {
            (261588 call(261584 call . f[261578] c"close"))
          }
        }
        Catch
        {
          unknown tmp[354881] "temp"(354884 'current error')
          unknown chpl_anon_error[354887](354892 'new'(354890 call _owned[30](?)(354888 'to non nilable class' tmp[354881])))
          {
          }
        }
      }
    }
    unknown offset[261601] 0 int(64)[13]
    (261604 'end of statement')
    {
      unknown w[261614](261613 'try-expr'(261612 call(261606 call . f[261578] c"writer")(locking = 0)))
      (261617 'end of statement')
      Defer
      {
        {
          Try
          {
            {
              (261624 call(261620 call . w[261614] c"close"))
            }
          }
          Catch
          {
            unknown tmp[354895] "temp"(354898 'current error')
            unknown chpl_anon_error[354901](354906 'new'(354904 call _owned[30](?)(354902 'to non nilable class' tmp[354895])))
            {
            }
          }
        }
      }
      Try
      {
        {
          (261643 call(261636 call . w[261614] c"writef") fmt[261553](261642 'expand_tuple' args[261560]))
        }
      }
      (261654 call = offset[261601](261653 call(261649 call . w[261614] c"offset")))
      Try
      {
        {
          (261662 call(261658 call . w[261614] c"close"))
        }
      }
    }
    unknown buf[261677](261676 call c_malloc(261670 call uint(64)[115] 8)(261674 call + offset[261601] 1))
    (261680 'end of statement')
    unknown r[261690](261689 'try-expr'(261688 call(261682 call . f[261578] c"reader")(locking = 0)))
    (261693 'end of statement')
    Defer
    {
      {
        Try
        {
          {
            (261699 call(261695 call . r[261690] c"close"))
          }
        }
        Catch
        {
          unknown tmp[354909] "temp"(354912 'current error')
          unknown chpl_anon_error[354915](354920 'new'(354918 call _owned[30](?)(354916 'to non nilable class' tmp[354909])))
          {
          }
        }
      }
    }
    Try
    {
      {
        (261720 call(261711 call . r[261690] c"readBytes") buf[261677](261718 call _cast ssize_t[20647] offset[261601]))
      }
    }
    Try
    {
      {
        (261729 call(261725 call . r[261690] c"close"))
      }
    }
    Try
    {
      {
        (261738 call(261734 call . f[261578] c"close"))
      }
    }
    (261747 call =(261745 call buf[261677] offset[261601]) 0)
    if(261776 call _cond_test(261753 call isStringType t[261551]))
    {
      (261763 return(261762 call createStringWithOwnedBuffer buf[261677] offset[261601](261760 call + offset[261601] 1)))
    }
    {
      (261774 return(261773 call createBytesWithOwnedBuffer buf[261677] offset[261601](261771 call + offset[261601] 1)))
    }
  }
  where {
    (261572 call ||(261567 call isStringType t[261551])(261571 call isBytesType t[261551]))
  }
  { scopeless type
    t[261551]
  }
  function qio_regexp_channel_match[261795](const  ref arg re[261792] :
  qio_regexp_t[293535], arg threadsafe[261798] :
  c_int[20549], arg ch[261802] :
  qio_channel_ptr_t[231382], arg maxlen[261809] :
  (261808 call int(64)[13] 64), arg anchor[261813] :
  c_int[20549], arg can_discard[261817] :
  bool[10], arg keep_unmatched[261821] :
  bool[10], arg keep_whole_pattern[261825] :
  bool[10], arg submatch[261832] :
  (261831 call _ddata[11695](?) qio_regexp_string_piece_t[293817]), arg nsubmatch[261839] :
  (261838 call int(64)[13] 64)) : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type
    syserr[223501]
  }
  function channel[237647](?)._extractMatch[261853](arg _mt[261866]:_MT[238], arg this[261863]:channel[237647](?) :
  channel[237647](?), arg m[261850] :
  reMatch[294502], ref arg arg[261856] :
  reMatch[294502], ref arg error[261860] :
  syserr[223501]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (261870 call = arg[261856] m[261850])
  }
  function channel[237647](?)._extractMatch[261883](arg _mt[261896]:_MT[238], arg this[261893]:channel[237647](?) :
  channel[237647](?), arg m[261880] :
  reMatch[294502], ref arg arg[261886] :
  bytes[24], ref arg error[261890] :
  syserr[223501]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown cur[261902](261901 call int(64)[13] 64)
    (261905 'end of statement')
    unknown target[261914](261912 call _cast int(64)[13](261908 call . m[261880] c"offset"))
    (261917 'end of statement')
    unknown len[261922](261919 call . m[261880] c"size")
    (261925 'end of statement')
    if(261955 call _cond_test(261932 call !(261929 call . m[261880] c"matched")))
    {
      (261951 call = arg[261886] b"")
    }
    if(261985 call _cond_test(261960 call ! error[261890]))
    {
      (261965 call qio_channel_revert_unlocked(400228 call . this[261893] c"_channel_internal"))
      (261974 call = error[261890](261973 call qio_channel_mark 0(400234 call . this[261893] c"_channel_internal")))
      (261982 call = cur[261902](261981 call qio_channel_offset_unlocked(400240 call . this[261893] c"_channel_internal")))
    }
    if(262006 call _cond_test(261990 call ! error[261890]))
    {
      (262002 call = error[261890](262001 call qio_channel_advance 0(400247 call . this[261893] c"_channel_internal")(261999 call - target[261914] cur[261902])))
    }
    unknown s[262011] bytes[24]
    (262014 'end of statement')
    if(262068 call _cond_test(262016 call ! error[261890]))
    {
      unknown gotlen[262022](262021 call int(64)[13] 64)
      (262025 'end of statement')
      unknown ts[262028] c_string[19]
      (262031 'end of statement')
      (262055 call = error[261890](262054 call qio_channel_read_string 0(262041 call _cast c_int[20549] native[230840])(262046 call stringStyleExactLen len[261922])(400259 call . this[261893] c"_channel_internal") ts[262028] gotlen[262022](262052 call _cast ssize_t[20647] len[261922])))
      (262065 call = s[262011](262064 call createBytesWithOwnedBuffer ts[262028](length = gotlen[262022])))
    }
    if(262102 call _cond_test(262073 call ! error[261890]))
    {
      (262077 call = arg[261886] s[262011])
    }
    {
      (262098 call = arg[261886] b"")
    }
  }
  function channel[237647](?)._extractMatch[262115](arg _mt[262129]:_MT[238], arg this[262126]:channel[237647](?) :
  channel[237647](?), arg m[262112] :
  reMatch[294502], ref arg arg[262119] :
  unknown t[262117], ref arg error[262123] :
  syserr[223501]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(262159 call _cond_test(262145 call !(262142 call . m[262112] c"matched")))
    {
      unknown empty[262149](262148 'typeof' arg[262119])
      (262152 'end of statement')
      (262156 call = arg[262119] empty[262149])
    }
    unknown s[262165] bytes[24]
    (262168 'end of statement')
    (262174 call(400282 call . this[262126] c"_extractMatch") m[262112] s[262165] error[262123])
    if(262233 call _cond_test(262177 call ! error[262123]))
    {
      if(262216 call _cond_test(262182 call ==(262180 'typeof' arg[262119]) string[26]))
      {
        Try
        {
          {
            (262191 call = arg[262119](262190 call(262186 call . s[262165] c"decode")))
          }
        }
        Catch
        {
          unknown tmp[354923] "temp"(354926 'current error')
          unknown chpl_anon_error[354929](354934 'new'(354932 call _owned[30](?)(354930 'to non nilable class' tmp[354923])))
          {
            (262198 call = error[262123](400292 call EFORMAT[224187]))
          }
        }
      }
      {
        (262212 call = arg[262119](262210 call _cast(262209 'typeof' arg[262119]) s[262165]))
      }
    }
    {
      unknown empty[262223](262222 'typeof' arg[262119])
      (262226 'end of statement')
      (262230 call = arg[262119] empty[262223])
    }
  }
  where {
    (262139 call &&(262133 call != t[262117] reMatch[294502])(262137 call != t[262117] bytes[24]))
  }
  function channel[237647](?).extractMatch[262247](arg _mt[262254]:_MT[238], arg this[262251]:channel[237647](?) :
  channel[237647](?), arg m[262244] :
  reMatch[294502], ref arg arg[262249]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown err[262258](400302 call ENOERR[223571]) syserr[223501]
    (262261 'end of statement')
    {
      const tmp[262297] "const" "temp"
      (262298 'move' tmp[262297](262295 'deref'(262294 '_wide_get_locale'(262264 call . this[262251] c"home"))))
      {
        Try
        {
          {
            (262272 call(262268 call . this[262251] c"lock"))
          }
        }
        Defer
        {
          {
            (262282 call(262278 call . this[262251] c"unlock"))
          }
        }
        (262292 call(400305 call . this[262251] c"_extractMatch") m[262244] arg[262249] err[262258])
      }
      (262301 'elided on block' 0 tmp[262297])
    }
    if(262344 call _cond_test err[262258])
    {
      Try
      {
        {
          (262339 call(262307 call . this[262251] c"_ch_ioerror") err[262258](262337 call +(262334 call + "in channel.extractMatch(m:reMatch, ref "(262332 call _cast string[26](262330 'typeof' arg[262249]))) ")"))
        }
      }
    }
  }
  function channel[237647](?).extractMatch[262357](arg _mt[262368]:_MT[238], arg this[262365]:channel[237647](?) :
  channel[237647](?), arg m[262354] :
  reMatch[294502], ref arg arg[262359]:_any[178](?), ref arg error[262362] :
  syserr[223501]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    {
      const tmp[262401] "const" "temp"
      (262402 'move' tmp[262401](262399 'deref'(262398 '_wide_get_locale'(262371 call . this[262365] c"home"))))
      {
        Try!
        {
          {
            (262379 call(262375 call . this[262365] c"lock"))
          }
        }
        (262389 call(400317 call . this[262365] c"_extractMatch") m[262354] arg[262359] error[262362])
        (262396 call(262392 call . this[262365] c"unlock"))
      }
      (262405 'elided on block' 0 tmp[262401])
    }
  }
  function channel[237647](?)._ch_handle_captures[262422](arg _mt[262437]:_MT[238], arg this[262434]:channel[237647](?) :
  channel[237647](?), arg matches[262419] :
  (262418 call _ddata[11695](?) qio_regexp_string_piece_t[293817]), arg nmatches[262425] :
  int(64)[13], ref arg captures[262428]:_any[178](?), ref arg error[262431] :
  syserr[223501]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (262448 call assert(262445 call >= nmatches[262425](262442 call . captures[262428] c"size")))
    {
      unknown i[262483] 0
      unknown tmp[262484] "maybe param" "temp"
      (262496 'move' tmp[262484](262494 call chpl_compute_low_param_loop_bound 0(262457 call -(262453 call . captures[262428] c"size") 1)))
      unknown tmp[262485] "maybe param" "temp"
      (262509 'move' tmp[262485](262507 call chpl_compute_high_param_loop_bound 0(262501 call -(262503 call . captures[262428] c"size") 1)))
      unknown tmp[262486] "maybe param" "temp"
      (262512 'move' tmp[262486] 1)
      ParamForLoop[262514]
      { i[262483] tmp[262484] tmp[262485] tmp[262486]
        {
          unknown m[262468](262467 call _to_reMatch(262465 call matches[262419] i[262483]))
          (262471 'end of statement')
          (262481 call(400330 call . this[262434] c"_extractMatch") m[262468](262479 call captures[262428] i[262483]) error[262431])
        }
      }
      label _unused_continueLabel[262488]
      label _breakLabel[262487]
    }
  }
  function channel[237647](?).search[262535](arg _mt[262544]:_MT[238], arg this[262541]:channel[237647](?) :
  channel[237647](?), arg re[262532] :
  (262531 call regexp[297046](?) ?[260]), ref arg error[262538] :
  syserr[223501]) : _unknown[51] "method" "no doc"
  {
    unknown m[262548] reMatch[294502]
    (262551 'end of statement')
    {
      const tmp[262731] "const" "temp"
      (262732 'move' tmp[262731](262729 'deref'(262728 '_wide_get_locale'(262554 call . this[262541] c"home"))))
      {
        Try!
        {
          {
            (262562 call(262558 call . this[262541] c"lock"))
          }
        }
        unknown nm[262568] 1
        (262571 'end of statement')
        unknown matches[262577](262576 call _ddata_allocate qio_regexp_string_piece_t[293817] nm[262568])
        (262580 'end of statement')
        (262587 call = error[262538](262586 call qio_channel_mark 0(400346 call . this[262541] c"_channel_internal")))
        if(262620 call _cond_test(262591 call ! error[262538]))
        {
          (262616 call = error[262538](262615 call qio_regexp_channel_match(262596 call . re[262532] c"_regexp") 0(400353 call . this[262541] c"_channel_internal")(262608 call max(262606 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_UNANCHORED[293785] 1 0 1 matches[262577] nm[262568]))
        }
        if(262639 call _cond_test(262632 call ||(262626 call == error[262538](400360 call EFORMAT[224187]))(262630 call == error[262538](400363 call EEOF[224141]))))
        {
          (262636 call = error[262538](400366 call ENOERR[223571]))
        }
        if(262711 call _cond_test(262645 call ! error[262538]))
        {
          (262655 call = m[262548](262654 call _to_reMatch(262652 call matches[262577] 0)))
          if(262707 call _cond_test(262660 call . m[262548] c"matched"))
          {
            (262666 call qio_channel_revert_unlocked(400373 call . this[262541] c"_channel_internal"))
            unknown cur[262673](262672 call qio_channel_offset_unlocked(400378 call . this[262541] c"_channel_internal"))
            (262676 'end of statement')
            unknown target[262684](262682 call _cast int(64)[13](262678 call . m[262548] c"offset"))
            (262687 'end of statement')
            (262698 call = error[262538](262697 call qio_channel_advance 0(400384 call . this[262541] c"_channel_internal")(262695 call - target[262684] cur[262673])))
          }
          {
            (262704 call qio_channel_commit_unlocked(400391 call . this[262541] c"_channel_internal"))
          }
        }
        (262719 call _ddata_free matches[262577] nm[262568])
        (262726 call(262722 call . this[262541] c"unlock"))
      }
      (262735 'elided on block' 0 tmp[262731])
    }
    (262740 return m[262548])
  }
  { scopeless type
    reMatch[294502]
  }
  function channel[237647](?).search[262755](arg _mt[262760]:_MT[238], arg this[262757]:channel[237647](?) :
  channel[237647](?), arg re[262752] :
  (262751 call regexp[297046](?) ?[260])) : _unknown[51] throws "method" "no doc"
  {
    unknown e[262765](400400 call ENOERR[223571]) syserr[223501]
    (262768 'end of statement')
    unknown ret[262781](262780 call(262773 call . this[262757] c"search") re[262752](error = e[262765]))
    (262784 'end of statement')
    if(262813 call _cond_test e[262765])
    {
      Try
      {
        {
          (262809 call(262787 call . this[262757] c"_ch_ioerror") e[262765] "in channel.search")
        }
      }
    }
    (262819 return ret[262781])
  }
  { scopeless type
    reMatch[294502]
  }
  function channel[237647](?).search[262834](arg _mt[262844]:_MT[238], arg this[262841]:channel[237647](?) :
  channel[237647](?), arg re[262831] :
  (262830 call regexp[297046](?) ?[260]), ref arg captures[262838]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    unknown m[262848] reMatch[294502]
    (262851 'end of statement')
    unknown err[262855](400411 call ENOERR[223571]) syserr[223501]
    (262858 'end of statement')
    {
      const tmp[263054] "const" "temp"
      (263055 'move' tmp[263054](263052 'deref'(263051 '_wide_get_locale'(262860 call . this[262841] c"home"))))
      {
        Try
        {
          {
            (262868 call(262864 call . this[262841] c"lock"))
          }
        }
        Defer
        {
          {
            (262878 call(262874 call . this[262841] c"unlock"))
          }
        }
        unknown nm[262890](262888 call +(262884 call . captures[262838] c"size") 1)
        (262893 'end of statement')
        unknown matches[262899](262898 call _ddata_allocate qio_regexp_string_piece_t[293817] nm[262890])
        (262902 'end of statement')
        (262909 call = err[262855](262908 call qio_channel_mark 0(400418 call . this[262841] c"_channel_internal")))
        if(262942 call _cond_test(262913 call ! err[262855]))
        {
          (262938 call = err[262855](262937 call qio_regexp_channel_match(262918 call . re[262831] c"_regexp") 0(400425 call . this[262841] c"_channel_internal")(262930 call max(262928 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_UNANCHORED[293785] 1 0 1 matches[262899] nm[262890]))
        }
        if(262961 call _cond_test(262954 call ||(262948 call == err[262855](400432 call EFORMAT[224187]))(262952 call == err[262855](400435 call EEOF[224141]))))
        {
          (262958 call = err[262855](400438 call ENOERR[223571]))
        }
        if(263041 call _cond_test(262967 call ! err[262855]))
        {
          (262977 call = m[262848](262976 call _to_reMatch(262974 call matches[262899] 0)))
          if(263037 call _cond_test(262982 call . m[262848] c"matched"))
          {
            (262991 call(400446 call . this[262841] c"_ch_handle_captures") matches[262899] nm[262890] captures[262838] err[262855])
            (262997 call qio_channel_revert_unlocked(400455 call . this[262841] c"_channel_internal"))
            unknown cur[263003](263002 call qio_channel_offset_unlocked(400460 call . this[262841] c"_channel_internal"))
            (263006 'end of statement')
            unknown target[263014](263012 call _cast int(64)[13](263008 call . m[262848] c"offset"))
            (263017 'end of statement')
            (263028 call = err[262855](263027 call qio_channel_advance 0(400466 call . this[262841] c"_channel_internal")(263025 call - target[263014] cur[263003])))
          }
          {
            (263034 call qio_channel_commit_unlocked(400473 call . this[262841] c"_channel_internal"))
          }
        }
        (263049 call _ddata_free matches[262899] nm[262890])
      }
      (263058 'elided on block' 0 tmp[263054])
    }
    if(263074 call _cond_test err[262855])
    {
      Try
      {
        {
          (263070 call(263064 call . this[262841] c"_ch_ioerror") err[262855] "in channel.search")
        }
      }
    }
    (263080 return m[262848])
  }
  { scopeless type
    reMatch[294502]
  }
  function channel[237647](?).match[263095](arg _mt[263104]:_MT[238], arg this[263101]:channel[237647](?) :
  channel[237647](?), arg re[263092] :
  (263091 call regexp[297046](?) ?[260]), ref arg error[263098] :
  syserr[223501]) : _unknown[51] "method" "no doc"
  {
    unknown m[263108] reMatch[294502]
    (263111 'end of statement')
    {
      const tmp[263291] "const" "temp"
      (263292 'move' tmp[263291](263289 'deref'(263288 '_wide_get_locale'(263114 call . this[263101] c"home"))))
      {
        Try!
        {
          {
            (263122 call(263118 call . this[263101] c"lock"))
          }
        }
        unknown nm[263128] 1
        (263131 'end of statement')
        unknown matches[263137](263136 call _ddata_allocate qio_regexp_string_piece_t[293817] nm[263128])
        (263140 'end of statement')
        (263147 call = error[263098](263146 call qio_channel_mark 0(400490 call . this[263101] c"_channel_internal")))
        if(263180 call _cond_test(263151 call ! error[263098]))
        {
          (263176 call = error[263098](263175 call qio_regexp_channel_match(263156 call . re[263092] c"_regexp") 0(400497 call . this[263101] c"_channel_internal")(263168 call max(263166 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_START[293790] 1 1 1 matches[263137] nm[263128]))
        }
        if(263199 call _cond_test(263192 call ||(263186 call == error[263098](400504 call EFORMAT[224187]))(263190 call == error[263098](400507 call EEOF[224141]))))
        {
          (263196 call = error[263098](400510 call ENOERR[223571]))
        }
        if(263271 call _cond_test(263205 call ! error[263098]))
        {
          (263215 call = m[263108](263214 call _to_reMatch(263212 call matches[263137] 0)))
          if(263267 call _cond_test(263220 call . m[263108] c"matched"))
          {
            (263226 call qio_channel_revert_unlocked(400517 call . this[263101] c"_channel_internal"))
            unknown cur[263233](263232 call qio_channel_offset_unlocked(400522 call . this[263101] c"_channel_internal"))
            (263236 'end of statement')
            unknown target[263244](263242 call _cast int(64)[13](263238 call . m[263108] c"offset"))
            (263247 'end of statement')
            (263258 call = error[263098](263257 call qio_channel_advance 0(400528 call . this[263101] c"_channel_internal")(263255 call - target[263244] cur[263233])))
          }
          {
            (263264 call qio_channel_revert_unlocked(400535 call . this[263101] c"_channel_internal"))
          }
        }
        (263279 call _ddata_free matches[263137] nm[263128])
        (263286 call(263282 call . this[263101] c"unlock"))
      }
      (263295 'elided on block' 0 tmp[263291])
    }
    (263300 return m[263108])
  }
  { scopeless type
    reMatch[294502]
  }
  function channel[237647](?).match[263315](arg _mt[263320]:_MT[238], arg this[263317]:channel[237647](?) :
  channel[237647](?), arg re[263312] :
  (263311 call regexp[297046](?) ?[260])) : _unknown[51] throws "method" "no doc"
  {
    unknown e[263325](400544 call ENOERR[223571]) syserr[223501]
    (263328 'end of statement')
    unknown ret[263341](263340 call(263333 call . this[263317] c"match") re[263312](error = e[263325]))
    (263344 'end of statement')
    if(263373 call _cond_test e[263325])
    {
      Try
      {
        {
          (263369 call(263347 call . this[263317] c"_ch_ioerror") e[263325] "in channel.match")
        }
      }
    }
    (263379 return ret[263341])
  }
  { scopeless type
    reMatch[294502]
  }
  function channel[237647](?).match[263394](arg _mt[263408]:_MT[238], arg this[263405]:channel[237647](?) :
  channel[237647](?), arg re[263391] :
  (263390 call regexp[297046](?) ?[260]), ref arg captures[263398]:_any[178](?) ..., ref arg error[263402] :
  syserr[223501]) : _unknown[51] "method"
  {
    unknown m[263412] reMatch[294502]
    (263415 'end of statement')
    {
      const tmp[263609] "const" "temp"
      (263610 'move' tmp[263609](263607 'deref'(263606 '_wide_get_locale'(263418 call . this[263405] c"home"))))
      {
        Try!
        {
          {
            (263426 call(263422 call . this[263405] c"lock"))
          }
        }
        unknown nm[263438](263436 call + 1(263433 call . captures[263398] c"size"))
        (263441 'end of statement')
        unknown matches[263447](263446 call _ddata_allocate qio_regexp_string_piece_t[293817] nm[263438])
        (263450 'end of statement')
        (263457 call = error[263402](263456 call qio_channel_mark 0(400560 call . this[263405] c"_channel_internal")))
        if(263490 call _cond_test(263461 call ! error[263402]))
        {
          (263486 call = error[263402](263485 call qio_regexp_channel_match(263466 call . re[263391] c"_regexp") 0(400567 call . this[263405] c"_channel_internal")(263478 call max(263476 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_START[293790] 1 1 1 matches[263447] nm[263438]))
        }
        if(263509 call _cond_test(263502 call ||(263496 call == error[263402](400574 call EFORMAT[224187]))(263500 call == error[263402](400577 call EEOF[224141]))))
        {
          (263506 call = error[263402](400580 call ENOERR[223571]))
        }
        if(263589 call _cond_test(263515 call ! error[263402]))
        {
          (263525 call = m[263412](263524 call _to_reMatch(263522 call matches[263447] 0)))
          if(263585 call _cond_test(263530 call . m[263412] c"matched"))
          {
            (263539 call(400586 call . this[263405] c"_ch_handle_captures") matches[263447] nm[263438] captures[263398] error[263402])
            (263545 call qio_channel_revert_unlocked(400595 call . this[263405] c"_channel_internal"))
            unknown cur[263551](263550 call qio_channel_offset_unlocked(400600 call . this[263405] c"_channel_internal"))
            (263554 'end of statement')
            unknown target[263562](263560 call _cast int(64)[13](263556 call . m[263412] c"offset"))
            (263565 'end of statement')
            (263576 call = error[263402](263575 call qio_channel_advance 0(400606 call . this[263405] c"_channel_internal")(263573 call - target[263562] cur[263551])))
          }
          {
            (263582 call qio_channel_revert_unlocked(400613 call . this[263405] c"_channel_internal"))
          }
        }
        (263597 call _ddata_free matches[263447] nm[263438])
        (263604 call(263600 call . this[263405] c"unlock"))
      }
      (263613 'elided on block' 0 tmp[263609])
    }
    (263618 return m[263412])
  }
  { scopeless type
    reMatch[294502]
  }
  function channel[237647](?).match[263633](arg _mt[263643]:_MT[238], arg this[263640]:channel[237647](?) :
  channel[237647](?), arg re[263630] :
  (263629 call regexp[297046](?) ?[260]), ref arg captures[263637]:_any[178](?) ...) : _unknown[51] throws "method" "no doc"
  {
    unknown e[263648](400622 call ENOERR[223571]) syserr[223501]
    (263651 'end of statement')
    unknown ret[263664](263663 call(263654 call . this[263640] c"match") re[263630](263660 'expand_tuple' captures[263637])(error = e[263648]))
    (263667 'end of statement')
    if(263680 call _cond_test e[263648])
    {
      Try
      {
        {
          (263676 call(263670 call . this[263640] c"_ch_ioerror") e[263648] "in channel.match")
        }
      }
    }
    (263686 return ret[263664])
  }
  { scopeless type
    reMatch[294502]
  }
  function channel[237647](?).matches[263701](arg _mt[263719]:_MT[238], arg this[263716]:channel[237647](?) :
  channel[237647](?), arg re[263698] :
  (263697 call regexp[297046](?) ?[260]), param arg captures[263704] =
  0, arg maxmatches[263712] :
  int(64)[13] =
  (263711 call max int(64)[13])) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    unknown m[263722] reMatch[294502]
    (263725 'end of statement')
    unknown go[263728] 1
    (263731 'end of statement')
    unknown i[263733] 0
    (263736 'end of statement')
    unknown error[263739](400633 call ENOERR[223571]) syserr[223501]
    (263742 'end of statement')
    unknown nret[263747] "param"(263745 call + captures[263704] 1)
    (263750 'end of statement')
    unknown ret[263755](263753 call * nret[263747] reMatch[294502])
    (263758 'end of statement')
    Try!
    {
      {
        (263761 call(400639 call . this[263716] c"lock"))
      }
    }
    {
      const tmp[263778] "const" "temp"
      (263779 'move' tmp[263778](263776 'deref'(263775 '_wide_get_locale'(263766 call . this[263716] c"home"))))
      Try!
      {
        {
          (263771 call(400645 call . this[263716] c"_mark"))
        }
      }
      (263782 'elided on block' 0 tmp[263778])
    }
    {
      unknown tmp[264043] "temp"
      (264073 'move' tmp[264043](264065 call _cond_test(264067 call && go[263728](264070 call < i[263733] maxmatches[263712]))))
      WhileDo[264048]
      {
        {
          {
            const tmp[264018] "const" "temp"
            (264019 'move' tmp[264018](264016 'deref'(264015 '_wide_get_locale'(263794 call . this[263716] c"home"))))
            {
              unknown nm[263801](263799 call + 1 captures[263704])
              (263804 'end of statement')
              unknown matches[263811](263810 call _ddata_allocate qio_regexp_string_piece_t[293817] nm[263801])
              (263814 'end of statement')
              if(263845 call _cond_test(263816 call ! error[263739]))
              {
                (263841 call = error[263739](263840 call qio_regexp_channel_match(263821 call . re[263698] c"_regexp") 0(400655 call . this[263716] c"_channel_internal")(263833 call max(263831 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_UNANCHORED[293785] 1 0 1 matches[263811] nm[263801]))
              }
              if(263994 call _cond_test(263850 call ! error[263739]))
              {
                (263860 call = m[263722](263859 call _to_reMatch(263857 call matches[263811] 0)))
                if(263990 call _cond_test(263865 call . m[263722] c"matched"))
                {
                  {
                    unknown i[263897] 0
                    unknown tmp[263898] "maybe param" "temp"
                    (263910 'move' tmp[263898](263908 call chpl_compute_low_param_loop_bound 0(263871 call - nret[263747] 1)))
                    unknown tmp[263899] "maybe param" "temp"
                    (263920 'move' tmp[263899](263918 call chpl_compute_high_param_loop_bound 0(263915 call - nret[263747] 1)))
                    unknown tmp[263900] "maybe param" "temp"
                    (263923 'move' tmp[263900] 1)
                    ParamForLoop[263925]
                    { i[263897] tmp[263898] tmp[263899] tmp[263900]
                      {
                        (263883 call = m[263722](263882 call _to_reMatch(263880 call matches[263811] i[263897])))
                        (263895 call(400669 call . this[263716] c"_extractMatch") m[263722](263893 call ret[263755] i[263897]) error[263739])
                      }
                    }
                    label _unused_continueLabel[263902]
                    label _breakLabel[263901]
                  }
                  (263938 call qio_channel_revert_unlocked(400679 call . this[263716] c"_channel_internal"))
                  (263946 call = error[263739](263945 call qio_channel_mark 0(400685 call . this[263716] c"_channel_internal")))
                  if(263985 call _cond_test(263950 call ! error[263739]))
                  {
                    unknown cur[263956](263955 call qio_channel_offset_unlocked(400691 call . this[263716] c"_channel_internal"))
                    (263959 'end of statement')
                    unknown target[263968](263966 call _cast int(64)[13](263962 call . m[263722] c"offset"))
                    (263971 'end of statement')
                    (263982 call = error[263739](263981 call qio_channel_advance 0(400697 call . this[263716] c"_channel_internal")(263979 call - target[263968] cur[263956])))
                  }
                }
                {
                }
              }
              (264002 call _ddata_free matches[263811] nm[263801])
              if(264010 call _cond_test error[263739])
              {
                (264007 call = go[263728] 0)
              }
            }
            (264022 'elided on block' 0 tmp[264018])
          }
          if(264033 call _cond_test(264028 call ! error[263739]))
          {
            (264031 yield ret[263755])
          }
          (264040 call += i[263733] 1)
        }
        label _continueLabel[264046]
        (264060 'move' tmp[264043](264052 call _cond_test(264054 call && go[263728](264057 call < i[263733] maxmatches[263712]))))
        tmp[264043]
      }
      label _breakLabel[264047]
    }
    (264078 call(400718 call . this[263716] c"_commit"))
    (264082 call(400722 call . this[263716] c"unlock"))
    if(264099 call _cond_test(264092 call ||(264086 call == error[263739](400726 call EFORMAT[224187]))(264090 call == error[263739](400729 call EEOF[224141]))))
    {
      (264096 call = error[263739](400732 call ENOERR[223571]))
    }
    if(264132 call _cond_test error[263739])
    {
      Try!
      {
        {
          (264128 call(264106 call . this[263716] c"_ch_ioerror") error[263739] "in channel.matches")
        }
      }
    }
  }
  (355369 'used modules list'(353069 'use' ChapelStandard[20264])(251187 'use' IO[230808])(251191 'use' SysCTypes[20940])(251194 'use' SysBasic[223433])(251197 'use' SysError[264148])(261787 'use' Regexp[293522]))
}