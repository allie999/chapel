AST dump for MemTracking after pass flattenClasses.
Module use list: ChapelStandard SysCTypes 

{
  const memTrack[166611] "config" "const" 0 bool[10]
  const memStats[166616] "config" "const" 0 bool[10]
  const memLeaksByType[166621] "config" "const" 0 bool[10]
  const memLeaks[166626] "config" "const" 0 bool[10]
  const memMax[166631] "config" "const" 0 uint(64)[115]
  const memThreshold[166636] "config" "const" 0 uint(64)[115]
  const memLog[166640] "config" "const" string[26]
  (166643 'end of statement')
  const memLeaksLog[166645] "config" "const" "no auto destroy" string[26]
  (166648 'end of statement')
  const memLeaksByDesc[166650] "config" "const" "no auto destroy" string[26]
  (166653 'end of statement')
  const cMemMax[166661] "const"(166660 call(166655 call . memMax[166631] c"safeCast") size_t[20654])
  const cMemThreshold[166671] "const"(166670 call(166665 call . memThreshold[166636] c"safeCast") size_t[20654])
  (166674 'end of statement')
  function chpl_memTracking_returnConfigVals[166681](ref arg ret_memTrack[166678] :
  bool[10], ref arg ret_memStats[166684] :
  bool[10], ref arg ret_memLeaksByType[166688] :
  bool[10], ref arg ret_memLeaksByDesc[166692] :
  c_string[19], ref arg ret_memLeaks[166696] :
  bool[10], ref arg ret_memMax[166700] :
  size_t[20654], ref arg ret_memThreshold[166704] :
  size_t[20654], ref arg ret_memLog[166708] :
  c_string[19], ref arg ret_memLeaksLog[166712] :
  c_string[19]) : _unknown[51] "export" "local args" "no return value for void"
  {
    (166717 call = ret_memTrack[166678] memTrack[166611])
    (166723 call = ret_memStats[166684] memStats[166616])
    (166728 call = ret_memLeaksByType[166688] memLeaksByType[166621])
    (166733 call = ret_memLeaks[166696] memLeaks[166626])
    (166738 call = ret_memMax[166700] cMemMax[166661])
    (166743 call = ret_memThreshold[166704] cMemThreshold[166671])
    if(166908 call _cond_test(166751 call !=(166747 call .(361277 call here[90435]) c"id") 0))
    {
      if(166790 call _cond_test(166758 call !=(166754 call . memLeaksByDesc[166650] c"size") 0))
      {
        unknown local_memLeaksByDesc[166761] memLeaksByDesc[166650]
        (166764 'end of statement')
        (166771 call =(166767 call . local_memLeaksByDesc[166761] c"isOwned") 0)
        (166781 call = ret_memLeaksByDesc[166692](166780 call(166776 call . local_memLeaksByDesc[166761] c"c_str")))
      }
      {
        (166786 call = ret_memLeaksByDesc[166692] nil[44])
      }
      if(166832 call _cond_test(166800 call !=(166796 call . memLog[166640] c"size") 0))
      {
        unknown local_memLog[166803] memLog[166640]
        (166806 'end of statement')
        (166813 call =(166809 call . local_memLog[166803] c"isOwned") 0)
        (166823 call = ret_memLog[166708](166822 call(166818 call . local_memLog[166803] c"c_str")))
      }
      {
        (166828 call = ret_memLog[166708] nil[44])
      }
      if(166873 call _cond_test(166841 call !=(166837 call . memLeaksLog[166645] c"size") 0))
      {
        unknown local_memLeaksLog[166844] memLeaksLog[166645]
        (166847 'end of statement')
        (166854 call =(166850 call . local_memLeaksLog[166844] c"isOwned") 0)
        (166864 call = ret_memLeaksLog[166712](166863 call(166859 call . local_memLeaksLog[166844] c"c_str")))
      }
      {
        (166869 call = ret_memLeaksLog[166712] nil[44])
      }
    }
    {
      (166884 call = ret_memLeaksByDesc[166692](166883 call(166879 call . memLeaksByDesc[166650] c"c_str")))
      (166895 call = ret_memLog[166708](166894 call(166890 call . memLog[166640] c"c_str")))
      (166905 call = ret_memLeaksLog[166712](166904 call(166900 call . memLeaksLog[166645] c"c_str")))
    }
  }
  (355083 'used modules list'(166605 'use' ChapelStandard[20264])(166607 'use' SysCTypes[20940]))
}