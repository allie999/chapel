AST dump for MemTracking after pass flattenClasses.
Module use list: ChapelStandard SysCTypes 

{
  const memTrack[166657] "config" "const" 0 bool[10]
  const memStats[166662] "config" "const" 0 bool[10]
  const memLeaksByType[166667] "config" "const" 0 bool[10]
  const memLeaks[166672] "config" "const" 0 bool[10]
  const memMax[166677] "config" "const" 0 uint(64)[115]
  const memThreshold[166682] "config" "const" 0 uint(64)[115]
  const memLog[166686] "config" "const" string[26]
  (166689 'end of statement')
  const memLeaksLog[166691] "config" "const" "no auto destroy" string[26]
  (166694 'end of statement')
  const memLeaksByDesc[166696] "config" "const" "no auto destroy" string[26]
  (166699 'end of statement')
  const cMemMax[166707] "const"(166706 call(166701 call . memMax[166677] c"safeCast") size_t[20657])
  const cMemThreshold[166717] "const"(166716 call(166711 call . memThreshold[166682] c"safeCast") size_t[20657])
  (166720 'end of statement')
  function chpl_memTracking_returnConfigVals[166727](ref arg ret_memTrack[166724] :
  bool[10], ref arg ret_memStats[166730] :
  bool[10], ref arg ret_memLeaksByType[166734] :
  bool[10], ref arg ret_memLeaksByDesc[166738] :
  c_string[19], ref arg ret_memLeaks[166742] :
  bool[10], ref arg ret_memMax[166746] :
  size_t[20657], ref arg ret_memThreshold[166750] :
  size_t[20657], ref arg ret_memLog[166754] :
  c_string[19], ref arg ret_memLeaksLog[166758] :
  c_string[19]) : _unknown[51] "export" "local args" "no return value for void"
  {
    (166763 call = ret_memTrack[166724] memTrack[166657])
    (166769 call = ret_memStats[166730] memStats[166662])
    (166774 call = ret_memLeaksByType[166734] memLeaksByType[166667])
    (166779 call = ret_memLeaks[166742] memLeaks[166672])
    (166784 call = ret_memMax[166746] cMemMax[166707])
    (166789 call = ret_memThreshold[166750] cMemThreshold[166717])
    if(166954 call _cond_test(166797 call !=(166793 call .(361476 call here[90438]) c"id") 0))
    {
      if(166836 call _cond_test(166804 call !=(166800 call . memLeaksByDesc[166696] c"size") 0))
      {
        unknown local_memLeaksByDesc[166807] memLeaksByDesc[166696]
        (166810 'end of statement')
        (166817 call =(166813 call . local_memLeaksByDesc[166807] c"isOwned") 0)
        (166827 call = ret_memLeaksByDesc[166738](166826 call(166822 call . local_memLeaksByDesc[166807] c"c_str")))
      }
      {
        (166832 call = ret_memLeaksByDesc[166738] nil[44])
      }
      if(166878 call _cond_test(166846 call !=(166842 call . memLog[166686] c"size") 0))
      {
        unknown local_memLog[166849] memLog[166686]
        (166852 'end of statement')
        (166859 call =(166855 call . local_memLog[166849] c"isOwned") 0)
        (166869 call = ret_memLog[166754](166868 call(166864 call . local_memLog[166849] c"c_str")))
      }
      {
        (166874 call = ret_memLog[166754] nil[44])
      }
      if(166919 call _cond_test(166887 call !=(166883 call . memLeaksLog[166691] c"size") 0))
      {
        unknown local_memLeaksLog[166890] memLeaksLog[166691]
        (166893 'end of statement')
        (166900 call =(166896 call . local_memLeaksLog[166890] c"isOwned") 0)
        (166910 call = ret_memLeaksLog[166758](166909 call(166905 call . local_memLeaksLog[166890] c"c_str")))
      }
      {
        (166915 call = ret_memLeaksLog[166758] nil[44])
      }
    }
    {
      (166930 call = ret_memLeaksByDesc[166738](166929 call(166925 call . memLeaksByDesc[166696] c"c_str")))
      (166941 call = ret_memLog[166754](166940 call(166936 call . memLog[166686] c"c_str")))
      (166951 call = ret_memLeaksLog[166758](166950 call(166946 call . memLeaksLog[166691] c"c_str")))
    }
  }
  (355282 'used modules list'(166651 'use' ChapelStandard[20267])(166653 'use' SysCTypes[20943]))
}