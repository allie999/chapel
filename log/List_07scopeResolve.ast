AST dump for List after pass scopeResolve.
Module use list: ChapelStandard ChapelLocks HaltWrappers Sort IO 

{
  const _initialCapacity[298257] "const" "no doc" "private" 8
  (298260 'end of statement')
  const _initialArrayCapacity[298262] "const" "no doc" "private" 16
  (298265 'end of statement')
  unknown _sanityChecks[298267] "no doc" "param" "private" 0
  (298270 'end of statement')
  function _sanity[298277](arg expr[298274] :
  bool[10]) : _unknown[51] "inline" "private" "no return value for void"
  {
    if(298285 call _cond_test _sanityChecks[298267])
    {
      (298283 call assert expr[298274])
    }
  }
  unknown _lockType[298299] "no doc" "type variable" chpl_LocalSpinlock[187432]
  function _LockWrapper[298340].lock[298313](arg _mt[298344]:_MT[238], arg this[298342]:_LockWrapper[298340]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (298320 call(298316 call .(364943 call . this[298342] c"lock$") c"lock"))
  }
  function _LockWrapper[298340].unlock[298327](arg _mt[298348]:_MT[238], arg this[298346]:_LockWrapper[298340]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (298334 call(298330 call .(364948 call . this[298346] c"lock$") c"unlock"))
  }
  type _LockWrapper[298340] val super[355815]:object[22] "super class" unknown lock$[298307](298303 'new'(298306 call _lockType[298299]))
  type _LockWrapper[405240](?)
  function _checkType[298355](arg eltType[298353]:_any[178](?)) : _unknown[51] "no doc" "no return value for void"
  {
    if(298433 call _cond_test(298360 call isGenericType eltType[298353]))
    {
      (298386 call compilerWarning(298383 call + "creating a list with element type "(298381 call _cast string[26] eltType[298353])))
      if(298408 call _cond_test(298400 call &&(298392 call isClassType eltType[298353])(298398 call !(298397 call isGenericType(298395 'to borrowed class from unknown' eltType[298353])))))
      {
        (298405 call compilerWarning "which now means class type with generic management")
      }
      (298431 call compilerError "list element type cannot currently be generic")
    }
  }
  function _dummyFieldType[298444](arg t[298442]:_any[178](?)) type : _unknown[51] "no doc"
  {
    if(298459 call _cond_test(298449 call isBorrowedClass t[298442]))
    {
      (298452 return(298451 'to nilable class from type' t[298442]))
    }
    {
      (298456 return nothing[7])
    }
  }
  function list[304222](?).init[298530](arg _mt[304226]:_MT[238], arg this[304224]:list[304222](?), arg eltType[298528]:_any[178](?), param arg parSafe[298533] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (298539 call _checkType eltType[298528])
    (298547 call =(298543 call . this[304224] c"eltType") eltType[298528])
    (298555 call =(298551 call . this[304224] c"parSafe") parSafe[298533])
    (298563 call(298559 call . this[304224] c"complete"))
    (298572 call(298568 call . this[304224] c"_firstTimeInitializeArrays"))
  }
  function list[304222](?).init[298586](arg _mt[304230]:_MT[238], arg this[304228]:list[304222](?), arg other[298583] :
  (298582 call list[304222](?) unknown t[298579]), param arg parSafe[298589] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(298642 call _cond_test(298600 call !(298599 call isCopyableType(298595 call .(298594 'typeof' this[304228]) c"eltType"))))
    {
      (298640 call compilerError(298637 call + "Cannot copy list with element type that " "cannot be copied"))
    }
    (298653 call =(298649 call . this[304228] c"eltType") t[298579])
    (298661 call =(298657 call . this[304228] c"parSafe") parSafe[298589])
    (298669 call(298665 call . this[304228] c"complete"))
    (298674 call(405257 call . this[304228] c"_commonInitFromIterable") other[298583])
  }
  function list[304222](?).init[298690](arg _mt[304234]:_MT[238], arg this[304232]:list[304222](?), arg other[298687] :
  (298685 call chpl__buildArrayRuntimeType unknown d[298680] unknown t[298683]), param arg parSafe[298693] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (298699 call _checkType t[298683])
    if(298748 call _cond_test(298706 call !(298705 call isCopyableType t[298683])))
    {
      (298746 call compilerError(298743 call + "Cannot construct list from array with element " "type that cannot be copied"))
    }
    (298758 call =(298754 call . this[304232] c"eltType") t[298683])
    (298766 call =(298762 call . this[304232] c"parSafe") parSafe[298693])
    (298774 call(298770 call . this[304232] c"complete"))
    (298779 call(405266 call . this[304232] c"_commonInitFromIterable") other[298687])
  }
  function list[304222](?).init[298793](arg _mt[304238]:_MT[238], arg this[304236]:list[304222](?), arg other[298790] :
  (298789 call range[64319](?) unknown t[298786]), param arg parSafe[298796] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (298802 call _checkType t[298786])
    (298810 call =(298806 call . this[304236] c"eltType") t[298786])
    (298818 call =(298814 call . this[304236] c"parSafe") parSafe[298796])
    if(298897 call _cond_test(298825 call !(298824 call isBoundedRange other[298790])))
    {
      unknown e[298832] "param"(298830 call _cast string[26](298828 'typeof' this[304236]))
      (298835 'end of statement')
      unknown f[298842] "param"(298840 call _cast string[26](298838 'typeof' other[298790]))
      (298845 'end of statement')
      unknown msg[298888] "param"(298886 call +(298883 call +(298864 call + "Cannot init " e[298832]) " from unbounded ") f[298842])
      (298891 'end of statement')
      (298895 call compilerError msg[298888])
    }
    (298906 call(298902 call . this[304236] c"complete"))
    (298911 call(405281 call . this[304236] c"_commonInitFromIterable") other[298790])
  }
  function list[304222](?).init=[298930](arg _mt[304242]:_MT[238], arg this[304240]:list[304222](?), arg other[298927] :
  (298926 call list[304222](?)(298920 call .(298919 'typeof' this[304240]) c"eltType") unknown p[298924])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(298950 call _cond_test(298940 call !(298939 call isCopyableType(298935 call .(298934 'typeof' this[304240]) c"eltType"))))
    {
      (298948 call compilerError(298945 call + "Cannot copy list with element type that " "cannot be copied"))
    }
    (298965 call =(298957 call . this[304240] c"eltType")(298962 call .(298961 'typeof' this[304240]) c"eltType"))
    (298977 call =(298969 call . this[304240] c"parSafe")(298974 call .(298973 'typeof' this[304240]) c"parSafe"))
    (298985 call(298981 call . this[304240] c"complete"))
    (298990 call(405291 call . this[304240] c"_commonInitFromIterable") other[298927])
  }
  function list[304222](?).init=[299009](arg _mt[304246]:_MT[238], arg this[304244]:list[304222](?), arg other[299006] :
  (299004 call chpl__buildArrayRuntimeType unknown d[298996](299001 call .(299000 'typeof' this[304244]) c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(299061 call _cond_test(299019 call !(299018 call isCopyableType(299014 call .(299013 'typeof' this[304244]) c"eltType"))))
    {
      (299059 call compilerError(299056 call + "Cannot copy list from array with element type " "that cannot be copied"))
    }
    (299076 call =(299068 call . this[304244] c"eltType")(299073 call .(299072 'typeof' this[304244]) c"eltType"))
    (299088 call =(299080 call . this[304244] c"parSafe")(299085 call .(299084 'typeof' this[304244]) c"parSafe"))
    (299096 call(299092 call . this[304244] c"complete"))
    (299101 call(405300 call . this[304244] c"_commonInitFromIterable") other[299006])
  }
  function list[304222](?).init=[299122](arg _mt[304250]:_MT[238], arg this[304248]:list[304222](?), arg other[299119] :
  (299118 call range[64319](?)(299110 call .(299109 'typeof' this[304248]) c"eltType") unknown b[299114] unknown d[299116])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (299133 call =(299125 call . this[304248] c"eltType")(299130 call .(299129 'typeof' this[304248]) c"eltType"))
    (299146 call =(299138 call . this[304248] c"parSafe")(299143 call .(299142 'typeof' this[304248]) c"parSafe"))
    if(299193 call _cond_test(299153 call !(299152 call isBoundedRange other[299119])))
    {
      unknown e[299160] "param"(299158 call _cast string[26](299156 'typeof' this[304248]))
      (299163 'end of statement')
      unknown f[299170] "param"(299168 call _cast string[26](299166 'typeof' other[299119]))
      (299173 'end of statement')
      unknown msg[299184] "param"(299182 call +(299179 call +(299176 call + "Cannot init " e[299160]) " from unbounded ") f[299170])
      (299187 'end of statement')
      (299191 call compilerError msg[299184])
    }
    (299202 call(299198 call . this[304248] c"complete"))
    (299207 call(405315 call . this[304248] c"_commonInitFromIterable") other[299119])
  }
  function list[304222](?)._commonInitFromIterable[299215](arg _mt[304254]:_MT[238], arg this[304252]:list[304222](?), arg iterable[299213]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299228 call(299224 call . this[304252] c"_firstTimeInitializeArrays"))
    {
      unknown _indexOfInterest[299238] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[299239] "expr temp" "temp"
      (299248 'move' _iterator[299239](299246 call _getIterator iterable[299213]))
      Defer
      {
        {
          (299264 call _freeIterator _iterator[299239])
        }
      }
      { scopeless type
        (299253 'move' _indexOfInterest[299238](299250 call iteratorIndex _iterator[299239]))
      }
      ForLoop[299240]
      {
        unknown x[299257] "index var" "insert auto destroy"
        (299259 'move' x[299257] _indexOfInterest[299238])
        (299236 call(405323 call . this[304252] c"append") x[299257])
        label _continueLabel[299243]
        _indexOfInterest[299238]
        _iterator[299239]
      }
      label _breakLabel[299244]
    }
  }
  {
    (299221 call <(299218 'lifetime_of' this[304252])(299220 'lifetime_of' iterable[299213]))
  }
  function list[304222](?)._firstTimeInitializeArrays[299276](arg _mt[304258]:_MT[238], arg this[304256]:list[304222](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299284 call _sanity(299281 call ==(405331 call . this[304256] c"_arrays") nil[44]))
    (299293 call _sanity(299290 call ==(405338 call . this[304256] c"_totalCapacity") 0))
    (299301 call _sanity(299298 call ==(405345 call . this[304256] c"_size") 0))
    (299308 call =(405350 call . this[304256] c"_arrays")(299307 call(405356 call . this[304256] c"_makeBlockArray") _initialArrayCapacity[298262]))
    (299313 call =(405364 call . this[304256] c"_arrayCapacity") _initialArrayCapacity[298262])
    (299324 call =(299319 call(405370 call . this[304256] c"_arrays") 0)(299323 call(405376 call . this[304256] c"_makeArray") _initialCapacity[298257]))
    (299329 call =(405382 call . this[304256] c"_totalCapacity") _initialCapacity[298257])
  }
  function list[304222](?).deinit[299336](arg _mt[304262]:_MT[238], arg this[304260]:list[304222](?)) : _unknown[51] "destructor" "inline" "method" "primary method" "no doc" "no return value for void"
  {
    (299340 call(405389 call . this[304260] c"_fireAllDestructors"))
    (299345 call(405395 call . this[304260] c"_freeAllArrays"))
    (299353 call _sanity(299350 call ==(405400 call . this[304260] c"_totalCapacity") 0))
    (299361 call _sanity(299358 call ==(405405 call . this[304260] c"_size") 0))
    (299369 call _sanity(299366 call ==(405410 call . this[304260] c"_arrays") nil[44]))
  }
  function list[304222](?)._destroy[299379](arg _mt[304266]:_MT[238], arg this[304264]:list[304222](?), ref arg item[299376] :
  (405415 call . this[304264] c"eltType")) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    (299384 call chpl__autoDestroy item[299376])
  }
  function list[304222](?)._move[299396](arg _mt[304270]:_MT[238], arg this[304268]:list[304222](?), ref arg src[299393] :
  unknown t[299391], ref arg dst[299399] :
  t[299391]) : _unknown[51] "inline" "method" "primary method" "no doc" "unsafe" "no return value for void"
  {
    (299412 '=' dst[299399] src[299393])
  }
  {
    (299406 call ==(299403 'lifetime_of' src[299393])(299405 'lifetime_of' dst[299399]))
  }
  function list[304222](?)._getArrayCapacity[299424](arg _mt[304274]:_MT[238], arg this[304272]:list[304222](?), arg array[299421] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const exp[299434] "const"(299432 call + array[299421](299431 call log2 _initialCapacity[298257]))
    (299437 'end of statement')
    const result[299443] "const"(299441 call ** 2 exp[299434])
    (299446 'end of statement')
    (299448 return result[299443])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304222](?)._getArrayIdx[299459](arg _mt[304278]:_MT[238], arg this[304276]:list[304222](?), arg zpos[299456] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const adj[299466] "const"(299464 call + zpos[299456] _initialCapacity[298257])
    (299469 'end of statement')
    const result[299481] "const"(299479 call -(299474 call log2 adj[299466])(299478 call log2 _initialCapacity[298257]))
    (299484 'end of statement')
    (299486 return result[299481])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304222](?)._getLastArrayIdx[299493](arg _mt[304282]:_MT[238], arg this[304280]:list[304222](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const result[299503] "const"(299502 call(405436 call . this[304280] c"_getArrayIdx")(299499 call -(405441 call . this[304280] c"_size") 1))
    (299506 'end of statement')
    (299514 call _sanity(299511 call >= result[299503] 0))
    (299517 return result[299503])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304222](?)._getItemIdx[299528](arg _mt[304286]:_MT[238], arg this[304284]:list[304222](?), arg zpos[299525] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const adj[299535] "const"(299533 call + zpos[299525] _initialCapacity[298257])
    (299538 'end of statement')
    const result[299550] "const"(299548 call ^ adj[299535](299546 call << 1(299545 call log2 adj[299535])))
    (299553 'end of statement')
    (299555 return result[299550])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304222](?)._getRef[299566](arg _mt[304290]:_MT[238], const  ref arg this[304288]:list[304222](?), arg idx[299563] :
  int(64)[13]) ref : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (299580 call _sanity(299577 call &&(299571 call >= idx[299563] 0)(299575 call < idx[299563](405455 call . this[304288] c"_totalCapacity"))))
    const arrayIdx[299587] "const"(299586 call(405459 call . this[304288] c"_getArrayIdx") idx[299563])
    (299590 'end of statement')
    const itemIdx[299595] "const"(299594 call(405466 call . this[304288] c"_getItemIdx") idx[299563])
    (299598 'end of statement')
    const array[299603] "const"(299602 call(405472 call . this[304288] c"_arrays") arrayIdx[299587])
    (299606 'end of statement')
    (299613 call _sanity(299610 call != array[299603] nil[44]))
    unknown result[299619] "ref var"(299618 call array[299603] itemIdx[299595])
    (299622 'end of statement')
    (299624 return result[299619])
  }
  function list[304222](?)._enter[299630](arg _mt[304294]:_MT[238], arg this[304292]:list[304222](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(299640 call _cond_test(405482 call . this[304292] c"parSafe"))
    {
      (299638 call(299634 call .(364978 call . this[304292] c"_lock$") c"lock"))
    }
  }
  function list[304222](?)._leave[299650](arg _mt[304298]:_MT[238], arg this[304296]:list[304222](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(299660 call _cond_test(405487 call . this[304296] c"parSafe"))
    {
      (299658 call(299654 call .(364983 call . this[304296] c"_lock$") c"unlock"))
    }
  }
  function list[304222](?)._withinBounds[299674](arg _mt[304302]:_MT[238], const arg this[304300]:list[304222](?), arg idx[299671] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (299687 return(299685 call &&(299679 call >= idx[299671] 0)(299683 call < idx[299671](405494 call . this[304300] c"_size"))))
  }
  { scopeless type
    bool[10]
  }
  function list[304222](?)._boundsCheckLeaveOnThrow[299699](arg _mt[304306]:_MT[238], const arg this[304304]:list[304222](?), arg i[299696] :
  int(64)[13], arg umsg[299719] :
  string[26] =
  "") : _unknown[51] throws "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(299794 call _cond_test(299727 call !(299726 call(405500 call . this[304304] c"_withinBounds") i[299696])))
    {
      (299731 call(405507 call . this[304304] c"_leave"))
      const msg[299781] "const"(299778 IfExpr (299752 call != umsg[299719] "") then
      { scopeless
        umsg[299719]
      } else
      { scopeless
        (299776 call + "Index out of bounds: "(299774 call _cast string[26] i[299696]))
      } )
      (299784 'end of statement')
      (299792 'throw'(299787 'new'(_chpl_manager = _owned[30](?))(299791 call IllegalArgumentError[388821](?) msg[299781])))
    }
  }
  function list[304222](?)._makeBlockArray[299807](arg _mt[304310]:_MT[238], arg this[304308]:list[304222](?), arg size[299804] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (299817 return(299816 call _ddata_allocate(299813 call _ddata[11696](?)(405518 call . this[304308] c"eltType")) size[299804]))
  }
  function list[304222](?)._freeBlockArray[299834](arg _mt[304314]:_MT[238], arg this[304312]:list[304222](?), arg data[299831] :
  (299830 call _ddata[11696](?)(299828 call _ddata[11696](?)(405526 call . this[304312] c"eltType"))), arg size[299837] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299844 call _ddata_free data[299831] size[299837])
  }
  function list[304222](?)._makeArray[299855](arg _mt[304318]:_MT[238], arg this[304316]:list[304222](?), arg size[299852] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (299864 return(299863 call _ddata_allocate(405533 call . this[304316] c"eltType") size[299852](initElts = 0)))
  }
  function list[304222](?)._freeArray[299878](arg _mt[304322]:_MT[238], arg this[304320]:list[304222](?), arg data[299875] :
  (299874 call _ddata[11696](?)(405540 call . this[304320] c"eltType")), arg size[299881] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299888 call _ddata_free data[299875] size[299881])
  }
  function list[304222](?)._maybeAcquireMem[299899](arg _mt[304326]:_MT[238], arg this[304324]:list[304222](?), arg amount[299896] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    const remaining[299905] "const"(299903 call -(405547 call . this[304324] c"_totalCapacity")(405552 call . this[304324] c"_size"))
    (299908 'end of statement')
    (299916 call _sanity(299913 call >= remaining[299905] 0))
    if(299924 call _cond_test(299920 call >= remaining[299905] amount[299896]))
    {
      (299922 return _void[55])
    }
    unknown lastArrayIdx[299940](299937 IfExpr (299931 call ==(405560 call . this[304324] c"_size") 0) then
    { scopeless
      0
    } else
    { scopeless
      (299936 call(405566 call . this[304324] c"_getLastArrayIdx"))
    } )
    (299943 'end of statement')
    unknown req[299948](299946 call - amount[299896] remaining[299905])
    (299951 'end of statement')
    {
      unknown tmp[300151] "temp"
      (300175 'move' tmp[300151](300170 call _cond_test(300172 call > req[299948] 0)))
      WhileDo[300156]
      {
        {
          if(300061 call _cond_test(299961 call >= lastArrayIdx[299940](299959 call -(405574 call . this[304324] c"_arrayCapacity") 1)))
          {
            const tmp[300053] "const" "temp"
            (300055 'move' tmp[300053](300051 'deref'(300050 '_wide_get_locale' this[304324])))
            {
              {
                unknown _narrays[299971](299970 call(405579 call . this[304324] c"_makeBlockArray")(299967 call *(405584 call . this[304324] c"_arrayCapacity") 2))
                (299974 'end of statement')
                {
                  unknown _indexOfInterest[299994] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[299995] "expr temp" "temp"
                  (300004 'move' _iterator[299995](300002 call _getIterator(300011 call chpl_direct_counted_range_iter 0(405597 call . this[304324] c"_arrayCapacity"))))
                  Defer
                  {
                    {
                      (300027 call _freeIterator _iterator[299995])
                    }
                  }
                  { scopeless type
                    (300016 'move' _indexOfInterest[299994](300013 call iteratorIndex _iterator[299995]))
                  }
                  ForLoop[299996]
                  {
                    unknown i[300020] "index var" "insert auto destroy"
                    (300022 'move' i[300020] _indexOfInterest[299994])
                    (299991 call =(299986 call _narrays[299971] i[300020])(299990 call(405591 call . this[304324] c"_arrays") i[300020]))
                    label _continueLabel[299999]
                    _indexOfInterest[299994]
                    _iterator[299995]
                  }
                  label _breakLabel[300000]
                }
                (300038 call(405603 call . this[304324] c"_freeBlockArray")(405608 call . this[304324] c"_arrays")(405613 call . this[304324] c"_arrayCapacity"))
                (300042 call =(405618 call . this[304324] c"_arrays") _narrays[299971])
                (300047 call *=(405624 call . this[304324] c"_arrayCapacity") 2)
              }
              (300058 'on block' 0 tmp[300053])
            }
          }
          const tmp[300143] "const" "temp"
          (300145 'move' tmp[300143](300141 'deref'(300140 '_wide_get_locale' this[304324])))
          {
            {
              const oldLast[300072] "const"(300071 call(405630 call . this[304324] c"_arrays") lastArrayIdx[299940])
              (300075 'end of statement')
              const oldLastCapacity[300081] "const"(300080 call(405637 call . this[304324] c"_getArrayCapacity") lastArrayIdx[299940])
              (300084 'end of statement')
              (300087 call += lastArrayIdx[299940] 1)
              unknown newLast[300094] "ref var"(300093 call(405644 call . this[304324] c"_arrays") lastArrayIdx[299940])
              (300097 'end of statement')
              const newLastCapacity[300102] "const"(300100 call * oldLastCapacity[300081] 2)
              (300105 'end of statement')
              (300112 call _sanity(300109 call != oldLast[300072] nil[44]))
              (300120 call _sanity(300117 call == newLast[300094] nil[44]))
              (300127 call = newLast[300094](300126 call(405653 call . this[304324] c"_makeArray") newLastCapacity[300102]))
              (300132 call +=(405659 call . this[304324] c"_totalCapacity") newLastCapacity[300102])
              (300137 call -= req[299948] newLastCapacity[300102])
            }
            (300148 'on block' 0 tmp[300143])
          }
        }
        label _continueLabel[300154]
        (300165 'move' tmp[300151](300160 call _cond_test(300162 call > req[299948] 0)))
        tmp[300151]
      }
      label _breakLabel[300155]
    }
    (300178 return _void[55])
  }
  function list[304222](?)._maybeReleaseMem[300188](arg _mt[304330]:_MT[238], arg this[304328]:list[304222](?), arg amount[300185] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(300196 call _cond_test(300192 call <=(405669 call . this[304328] c"_totalCapacity") _initialCapacity[298257]))
    {
      (300194 return _void[55])
    }
    const lastArrayIdx[300205] "const"(300204 call(405674 call . this[304328] c"_getLastArrayIdx"))
    (300208 'end of statement')
    (300215 call _sanity(300212 call != lastArrayIdx[300205] 0))
    const lastArrayCapacity[300221] "const"(300220 call(405679 call . this[304328] c"_getArrayCapacity") lastArrayIdx[300205])
    (300224 'end of statement')
    const threshold[300229] "const"(300227 call -(405685 call . this[304328] c"_totalCapacity") lastArrayCapacity[300221])
    (300232 'end of statement')
    const nsize[300237] "const"(300235 call -(405691 call . this[304328] c"_size") amount[300185])
    (300240 'end of statement')
    if(300247 call _cond_test(300243 call > nsize[300237] threshold[300229]))
    {
      (300245 return _void[55])
    }
    unknown array[300256] "ref var"(300255 call(405699 call . this[304328] c"_arrays") lastArrayIdx[300205])
    (300259 'end of statement')
    (300266 call _sanity(300263 call != array[300256] nil[44]))
    (300272 call(405707 call . this[304328] c"_freeArray") array[300256] lastArrayCapacity[300221])
    (300276 call -=(405714 call . this[304328] c"_totalCapacity") lastArrayCapacity[300221])
    (300281 call = array[300256] nil[44])
  }
  function list[304222](?)._expand[300292](arg _mt[304334]:_MT[238], ref arg this[304332]:list[304222](?), arg idx[300289] :
  int(64)[13], arg shift[300296] :
  int(64)[13] =
  1) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (300306 call _sanity(300304 call(405720 call . this[304332] c"_withinBounds") idx[300289]))
    if(300315 call _cond_test(300311 call <= shift[300296] 0))
    {
      (300313 return _void[55])
    }
    const tmp[300419] "const" "temp"
    (300421 'move' tmp[300419](300417 'deref'(300416 '_wide_get_locale' this[304332])))
    {
      {
        (300324 call(405729 call . this[304332] c"_maybeAcquireMem") shift[300296])
        {
          unknown _indexOfInterest[300366] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300367] "expr temp" "temp"
          (300376 'move' _iterator[300367](300374 call _getIterator(300393 call chpl_direct_range_iter idx[300289](300390 call -(405757 call . this[304332] c"_size") 1)(300386 call - 1))))
          Defer
          {
            {
              (300409 call _freeIterator _iterator[300367])
            }
          }
          { scopeless type
            (300398 'move' _indexOfInterest[300366](300395 call iteratorIndex _iterator[300367]))
          }
          ForLoop[300368]
          {
            unknown i[300402] "index var" "insert auto destroy"
            (300404 'move' i[300402] _indexOfInterest[300366])
            {
              unknown src[300344] "ref var"(300343 call(405736 call . this[304332] c"_getRef") i[300402])
              (300347 'end of statement')
              unknown dst[300356] "ref var"(300355 call(405741 call . this[304332] c"_getRef")(300352 call + i[300402] shift[300296]))
              (300359 'end of statement')
              (300364 call(405749 call . this[304332] c"_move") src[300344] dst[300356])
            }
            label _continueLabel[300371]
            _indexOfInterest[300366]
            _iterator[300367]
          }
          label _breakLabel[300372]
        }
      }
      (300424 'on block' 0 tmp[300419])
    }
    (300427 return _void[55])
  }
  function list[304222](?)._collapse[300437](arg _mt[304338]:_MT[238], ref arg this[304336]:list[304222](?), arg idx[300434] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (300445 call _sanity(300443 call(405761 call . this[304336] c"_withinBounds") idx[300434]))
    if(300475 call _cond_test(300453 call == idx[300434](300451 call -(405768 call . this[304336] c"_size") 1)))
    {
      const tmp[300464] "const" "temp"
      (300466 'move' tmp[300464](300462 'deref'(300461 '_wide_get_locale' this[304336])))
      {
        (300459 call(405775 call . this[304336] c"_maybeReleaseMem") 1)
        (300469 'on block' 0 tmp[300464])
      }
      (300473 return _void[55])
    }
    const tmp[300564] "const" "temp"
    (300566 'move' tmp[300564](300562 'deref'(300561 '_wide_get_locale' this[304336])))
    {
      {
        {
          unknown _indexOfInterest[300514] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300515] "expr temp" "temp"
          (300524 'move' _iterator[300515](300522 call _getIterator(300532 call chpl_direct_range_iter idx[300434](300529 call -(405798 call . this[304336] c"_size") 2) 1)))
          Defer
          {
            {
              (300548 call _freeIterator _iterator[300515])
            }
          }
          { scopeless type
            (300537 'move' _indexOfInterest[300514](300534 call iteratorIndex _iterator[300515]))
          }
          ForLoop[300516]
          {
            unknown i[300541] "index var" "insert auto destroy"
            (300543 'move' i[300541] _indexOfInterest[300514])
            {
              unknown src[300495] "ref var"(300494 call(405780 call . this[304336] c"_getRef")(300491 call + i[300541] 1))
              (300498 'end of statement')
              unknown dst[300504] "ref var"(300503 call(405785 call . this[304336] c"_getRef") i[300541])
              (300507 'end of statement')
              (300512 call(405790 call . this[304336] c"_move") src[300495] dst[300504])
            }
            label _continueLabel[300519]
            _indexOfInterest[300514]
            _iterator[300515]
          }
          label _breakLabel[300520]
        }
        (300559 call(405802 call . this[304336] c"_maybeReleaseMem") 1)
      }
      (300569 'on block' 0 tmp[300564])
    }
    (300572 return _void[55])
  }
  function list[304222](?)._appendByRef[300582](arg _mt[304342]:_MT[238], ref arg this[304340]:list[304222](?), ref arg x[300579] :
  (405807 call . this[304340] c"eltType")) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (300587 call(405811 call . this[304340] c"_maybeAcquireMem") 1)
    unknown src[300591] "ref var" x[300579]
    (300594 'end of statement')
    unknown dst[300599] "ref var"(300598 call(405816 call . this[304340] c"_getRef")(405821 call . this[304340] c"_size"))
    (300602 'end of statement')
    (300607 call(405825 call . this[304340] c"_move") src[300591] dst[300599])
    (300611 call +=(405832 call . this[304340] c"_size") 1)
  }
  function list[304222](?).append[300625](arg _mt[304346]:_MT[238], ref arg this[304344]:list[304222](?), in arg x[300622] :
  (300619 call . this[304344] c"eltType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (300635 call(405840 call . this[304344] c"_enter"))
    (300641 call(405846 call . this[304344] c"_appendByRef") x[300622])
    (300645 call(405851 call . this[304344] c"_leave"))
  }
  {
    (300631 call <(300628 'lifetime_of' this[304344])(300630 'lifetime_of' x[300622]))
  }
  function list[304222](?).contains[300656](arg _mt[304350]:_MT[238], const arg this[304348]:list[304222](?), arg x[300653] :
  (405856 call . this[304348] c"eltType")) : _unknown[51] "method" "primary method"
  {
    unknown result[300660] 0
    (300663 'end of statement')
    const tmp[300730] "const" "temp"
    (300732 'move' tmp[300730](300728 'deref'(300727 '_wide_get_locale' this[304348])))
    {
      {
        (300668 call(405861 call . this[304348] c"_enter"))
        {
          unknown _indexOfInterest[300690] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300691] "expr temp" "temp"
          (300700 'move' _iterator[300691](300698 call _getIterator this[304348]))
          Defer
          {
            {
              (300716 call _freeIterator _iterator[300691])
            }
          }
          { scopeless type
            (300705 'move' _indexOfInterest[300690](300702 call iteratorIndex _iterator[300691]))
          }
          ForLoop[300692]
          {
            unknown item[300709] "index var" "insert auto destroy"
            (300711 'move' item[300709] _indexOfInterest[300690])
            if(300686 call _cond_test(300675 call == item[300709] x[300653]))
            {
              (300679 call = result[300660] 1)
              break _breakLabel[300696] _breakLabel[300696]
            }
            label _continueLabel[300695]
            _indexOfInterest[300690]
            _iterator[300691]
          }
          label _breakLabel[300696]
        }
        (300725 call(405869 call . this[304348] c"_leave"))
      }
      (300735 'on block' 0 tmp[300730])
    }
    (300739 return result[300660])
  }
  { scopeless type
    bool[10]
  }
  function list[304222](?).first[300746](arg _mt[304354]:_MT[238], ref arg this[304352]:list[304222](?)) ref : _unknown[51] "method" "primary method"
  {
    (300750 call(405874 call . this[304352] c"_enter"))
    if(300786 call _cond_test(300758 call && 1(300756 call ==(405880 call . this[304352] c"_size") 0)))
    {
      (300762 call(405884 call . this[304352] c"_leave"))
      (300784 call boundsCheckHalt "Called \"list.first\" on an empty list.")
    }
    unknown result[300794] "ref var"(300793 call(405888 call . this[304352] c"_getRef") 0)
    (300797 'end of statement')
    (300800 call(405892 call . this[304352] c"_leave"))
    (300803 return result[300794])
  }
  function list[304222](?).last[300809](arg _mt[304358]:_MT[238], ref arg this[304356]:list[304222](?)) ref : _unknown[51] "method" "primary method"
  {
    (300813 call(405897 call . this[304356] c"_enter"))
    if(300849 call _cond_test(300821 call && 1(300819 call ==(405903 call . this[304356] c"_size") 0)))
    {
      (300825 call(405907 call . this[304356] c"_leave"))
      (300847 call boundsCheckHalt "Called \"list.last\" on an empty list.")
    }
    unknown result[300860] "ref var"(300859 call(405911 call . this[304356] c"_getRef")(300856 call -(405916 call . this[304356] c"_size") 1))
    (300863 'end of statement')
    (300866 call(405920 call . this[304356] c"_leave"))
    (300869 return result[300860])
  }
  function list[304222](?)._extendGeneric[300877](arg _mt[304362]:_MT[238], ref arg this[304360]:list[304222](?), arg collection[300875]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    const tmp[300930] "const" "temp"
    (300932 'move' tmp[300930](300928 'deref'(300927 '_wide_get_locale' this[304360])))
    {
      {
        {
          unknown _indexOfInterest[300893] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300894] "expr temp" "temp"
          (300903 'move' _iterator[300894](300901 call _getIterator collection[300875]))
          Defer
          {
            {
              (300919 call _freeIterator _iterator[300894])
            }
          }
          { scopeless type
            (300908 'move' _indexOfInterest[300893](300905 call iteratorIndex _iterator[300894]))
          }
          ForLoop[300895]
          {
            unknown item[300912] "index var" "insert auto destroy"
            (300914 'move' item[300912] _indexOfInterest[300893])
            {
              unknown cpy[300883] "no auto destroy" item[300912]
              (300886 'end of statement')
              (300891 call(405928 call . this[304360] c"_appendByRef") cpy[300883])
            }
            label _continueLabel[300898]
            _indexOfInterest[300893]
            _iterator[300894]
          }
          label _breakLabel[300899]
        }
      }
      (300935 'on block' 0 tmp[300930])
    }
  }
  function list[304222](?).extend[300952](arg _mt[304366]:_MT[238], ref arg this[304364]:list[304222](?), arg other[300949] :
  (300948 call list[304222](?)(405935 call . this[304364] c"eltType") unknown p[300946])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[300978] "const" "temp"
    (300980 'move' tmp[300978](300976 'deref'(300975 '_wide_get_locale' this[304364])))
    {
      {
        (300963 call(405942 call . this[304364] c"_enter"))
        (300969 call(405948 call . this[304364] c"_extendGeneric") other[300949])
        (300973 call(405953 call . this[304364] c"_leave"))
      }
      (300983 'on block' 0 tmp[300978])
    }
  }
  {
    (300958 call <(300955 'lifetime_of' this[304364])(300957 'lifetime_of' other[300949]))
  }
  function list[304222](?).extend[301001](arg _mt[304370]:_MT[238], ref arg this[304368]:list[304222](?), arg other[300998] :
  (300996 call chpl__buildArrayRuntimeType unknown d[300992](405958 call . this[304368] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[301027] "const" "temp"
    (301029 'move' tmp[301027](301025 'deref'(301024 '_wide_get_locale' this[304368])))
    {
      {
        (301012 call(405965 call . this[304368] c"_enter"))
        (301018 call(405969 call . this[304368] c"_extendGeneric") other[300998])
        (301022 call(405974 call . this[304368] c"_leave"))
      }
      (301032 'on block' 0 tmp[301027])
    }
  }
  {
    (301007 call <(301004 'lifetime_of' this[304368])(301006 'lifetime_of' other[300998]))
  }
  function list[304222](?).extend[301052](arg _mt[304374]:_MT[238], ref arg this[304372]:list[304222](?), arg other[301049] :
  (301048 call range[64319](?)(405980 call . this[304372] c"eltType") unknown b[301044] unknown d[301046])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(301136 call _cond_test(301064 call !(301063 call isBoundedRange other[301049])))
    {
      unknown e[301071] "param"(301069 call _cast string[26](301067 'typeof' this[304372]))
      (301074 'end of statement')
      unknown f[301081] "param"(301079 call _cast string[26](301077 'typeof' other[301049]))
      (301084 'end of statement')
      unknown msg[301127] "param"(301125 call +(301122 call +(301103 call + "Cannot extend " e[301071]) " with unbounded ") f[301081])
      (301130 'end of statement')
      (301134 call compilerError msg[301127])
    }
    const tmp[301159] "const" "temp"
    (301161 'move' tmp[301159](301157 'deref'(301156 '_wide_get_locale' this[304372])))
    {
      {
        (301144 call(405993 call . this[304372] c"_enter"))
        (301150 call(405997 call . this[304372] c"_extendGeneric") other[301049])
        (301154 call(406002 call . this[304372] c"_leave"))
      }
      (301164 'on block' 0 tmp[301159])
    }
  }
  {
    (301058 call <(301055 'lifetime_of' this[304372])(301057 'lifetime_of' other[301049]))
  }
  function list[304222](?).insert[301176](arg _mt[304378]:_MT[238], ref arg this[304376]:list[304222](?), arg idx[301173] :
  int(64)[13], in arg x[301179] :
  (406007 call . this[304376] c"eltType")) : _unknown[51] "method" "primary method"
  {
    unknown result[301190] 0
    (301193 'end of statement')
    const tmp[301271] "const" "temp"
    (301273 'move' tmp[301271](301269 'deref'(301268 '_wide_get_locale' this[304376])))
    {
      {
        (301198 call(406014 call . this[304376] c"_enter"))
        if(301259 call _cond_test(301203 call == idx[301173](406020 call . this[304376] c"_size")))
        {
          (301208 call(406024 call . this[304376] c"_appendByRef") x[301179])
          (301213 call = result[301190] 1)
        }
        {
          if(301255 call _cond_test(301219 call(406030 call . this[304376] c"_withinBounds") idx[301173]))
          {
            (301223 call(406037 call . this[304376] c"_expand") idx[301173])
            unknown src[301227] "ref var" x[301179]
            (301230 'end of statement')
            unknown dst[301235] "ref var"(301234 call(406043 call . this[304376] c"_getRef") idx[301173])
            (301238 'end of statement')
            (301243 call(406048 call . this[304376] c"_move") src[301227] dst[301235])
            (301247 call +=(406055 call . this[304376] c"_size") 1)
            (301252 call = result[301190] 1)
          }
        }
        (301266 call(406060 call . this[304376] c"_leave"))
      }
      (301276 'on block' 0 tmp[301271])
    }
    if(301287 call _cond_test(301280 call ! result[301190]))
    {
      (301285 call(406067 call . this[304376] c"_destroy") x[301179])
    }
    (301293 return result[301190])
  }
  {
    (301187 call <(301184 'lifetime_of' this[304376])(301186 'lifetime_of' x[301179]))
  }
  { scopeless type
    bool[10]
  }
  function list[304222](?)._insertGenericKnownSize[301305](arg _mt[304382]:_MT[238], ref arg this[304380]:list[304222](?), arg idx[301302] :
  int(64)[13], arg items[301307]:_any[178](?), arg size[301310] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown result[301315] 0
    (301318 'end of statement')
    (301326 call _sanity(301323 call >= size[301310] 0))
    if(301335 call _cond_test(301330 call == size[301310] 0))
    {
      (301333 return 1)
    }
    const tmp[301460] "const" "temp"
    (301462 'move' tmp[301460](301458 'deref'(301457 '_wide_get_locale' this[304380])))
    {
      {
        if(301451 call _cond_test(301343 call == idx[301302](406078 call . this[304380] c"_size")))
        {
          (301348 call(406082 call . this[304380] c"_extendGeneric") items[301307])
          (301353 call = result[301315] 1)
        }
        {
          if(301447 call _cond_test(301359 call(406088 call . this[304380] c"_withinBounds") idx[301302]))
          {
            (301364 call(406093 call . this[304380] c"_expand") idx[301302] size[301310])
            unknown i[301368] idx[301302]
            (301371 'end of statement')
            {
              unknown _indexOfInterest[301409] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[301410] "expr temp" "temp"
              (301419 'move' _iterator[301410](301417 call _getIterator items[301307]))
              Defer
              {
                {
                  (301435 call _freeIterator _iterator[301410])
                }
              }
              { scopeless type
                (301424 'move' _indexOfInterest[301409](301421 call iteratorIndex _iterator[301410]))
              }
              ForLoop[301411]
              {
                unknown x[301428] "index var" "insert auto destroy"
                (301430 'move' x[301428] _indexOfInterest[301409])
                {
                  unknown cpy[301375] "no auto destroy" x[301428]
                  (301378 'end of statement')
                  unknown src[301381] "ref var" cpy[301375]
                  (301384 'end of statement')
                  unknown dst[301389] "ref var"(301388 call(406103 call . this[304380] c"_getRef") i[301368])
                  (301392 'end of statement')
                  (301397 call(406108 call . this[304380] c"_move") src[301381] dst[301389])
                  (301401 call +=(406115 call . this[304380] c"_size") 1)
                  (301406 call += i[301368] 1)
                }
                label _continueLabel[301414]
                _indexOfInterest[301409]
                _iterator[301410]
              }
              label _breakLabel[301415]
            }
            (301444 call = result[301315] 1)
          }
        }
      }
      (301465 'on block' 0 tmp[301460])
    }
    (301469 return result[301315])
  }
  { scopeless type
    bool[10]
  }
  function list[304222](?).insert[301480](arg _mt[304386]:_MT[238], ref arg this[304384]:list[304222](?), arg idx[301477] :
  int(64)[13], arg arr[301488] :
  (301486 call chpl__buildArrayRuntimeType unknown d[301482](406123 call . this[304384] c"eltType"))) : _unknown[51] "method" "primary method"
  {
    unknown result[301499] 0
    (301502 'end of statement')
    const tmp[301530] "const" "temp"
    (301532 'move' tmp[301530](301528 'deref'(301527 '_wide_get_locale' this[304384])))
    {
      {
        (301507 call(406130 call . this[304384] c"_enter"))
        (301520 call = result[301499](301519 call(406137 call . this[304384] c"_insertGenericKnownSize") idx[301477] arr[301488](301516 call . arr[301488] c"size")))
        (301525 call(406143 call . this[304384] c"_leave"))
      }
      (301535 'on block' 0 tmp[301530])
    }
    (301539 return result[301499])
  }
  {
    (301496 call <(301493 'lifetime_of' this[304384])(301495 'lifetime_of' arr[301488]))
  }
  { scopeless type
    bool[10]
  }
  function list[304222](?).insert[301551](arg _mt[304390]:_MT[238], ref arg this[304388]:list[304222](?), arg idx[301548] :
  int(64)[13], arg lst[301557] :
  (301556 call list[304222](?)(406150 call . this[304388] c"eltType"))) : _unknown[51] "method" "primary method"
  {
    unknown result[301568] 0
    (301571 'end of statement')
    const size[301577] "const"(301574 call . lst[301557] c"size")
    (301580 'end of statement')
    const tmp[301604] "const" "temp"
    (301606 'move' tmp[301604](301602 'deref'(301601 '_wide_get_locale' this[304388])))
    {
      {
        (301584 call(406157 call . this[304388] c"_enter"))
        (301594 call = result[301568](301593 call(406162 call . this[304388] c"_insertGenericKnownSize") idx[301548] lst[301557] size[301577]))
        (301599 call(406169 call . this[304388] c"_leave"))
      }
      (301609 'on block' 0 tmp[301604])
    }
    (301613 return result[301568])
  }
  {
    (301565 call <(301562 'lifetime_of' this[304388])(301564 'lifetime_of' lst[301557]))
  }
  { scopeless type
    bool[10]
  }
  function list[304222](?).remove[301625](arg _mt[304394]:_MT[238], ref arg this[304392]:list[304222](?), arg x[301622] :
  (406175 call . this[304392] c"eltType"), arg count[301629] :
  int(64)[13] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown result[301635] 0
    (301638 'end of statement')
    const tmp[301875] "const" "temp"
    (301877 'move' tmp[301875](301873 'deref'(301872 '_wide_get_locale' this[304392])))
    {
      {
        unknown src_i[301641] int(64)[13]
        unknown dst_i[301645](301649 'typeof' src_i[301641])
        (301650 'end of statement')
        unknown removed[301653] 0
        (301656 'end of statement')
        (301659 call = src_i[301641] 0)
        (301664 call(406182 call . this[304392] c"_enter"))
        {
          unknown tmp[301706] "temp"
          (301730 'move' tmp[301706](301725 call _cond_test(301727 call < dst_i[301645](406208 call . this[304392] c"_size"))))
          WhileDo[301711]
          {
            {
              unknown dst[301674] "ref var"(301673 call(406186 call . this[304392] c"_getRef") dst_i[301645])
              (301677 'end of statement')
              if(301697 call _cond_test(301681 call == dst[301674] x[301622]))
              {
                (301686 call(406193 call . this[304392] c"_destroy") dst[301674])
                (301691 call += removed[301653] 1)
                break _breakLabel[301710] _breakLabel[301710]
              }
              (301703 call += dst_i[301645] 1)
            }
            label _continueLabel[301709]
            (301720 'move' tmp[301706](301715 call _cond_test(301717 call < dst_i[301645](406202 call . this[304392] c"_size"))))
            tmp[301706]
          }
          label _breakLabel[301710]
        }
        (301738 call = src_i[301641](301736 call + dst_i[301645] 1))
        {
          unknown tmp[301817] "temp"
          (301841 'move' tmp[301817](301836 call _cond_test(301838 call < src_i[301641](406252 call . this[304392] c"_size"))))
          WhileDo[301822]
          {
            {
              unknown src[301749] "ref var"(301748 call(406214 call . this[304392] c"_getRef") src_i[301641])
              (301752 'end of statement')
              if(301789 call _cond_test(301768 call &&(301762 call ||(301756 call == count[301629] 0)(301760 call < removed[301653] count[301629]))(301766 call == src[301749] x[301622])))
              {
                (301773 call(406224 call . this[304392] c"_destroy") src[301749])
                (301778 call += src_i[301641] 1)
                (301783 call += removed[301653] 1)
                continue _continueLabel[301820] _continueLabel[301820]
              }
              unknown dst[301797] "ref var"(301796 call(406231 call . this[304392] c"_getRef") dst_i[301645])
              (301800 'end of statement')
              (301805 call(406236 call . this[304392] c"_move") src[301749] dst[301797])
              (301809 call += src_i[301641] 1)
              (301814 call += dst_i[301645] 1)
            }
            label _continueLabel[301820]
            (301831 'move' tmp[301817](301826 call _cond_test(301828 call < src_i[301641](406246 call . this[304392] c"_size"))))
            tmp[301817]
          }
          label _breakLabel[301821]
        }
        if(301859 call _cond_test removed[301653])
        {
          (301848 call(406257 call . this[304392] c"_maybeReleaseMem") removed[301653])
          (301856 call =(406263 call . this[304392] c"_size")(301854 call -(406268 call . this[304392] c"_size") removed[301653]))
        }
        (301865 call(406273 call . this[304392] c"_leave"))
        (301869 call = result[301635] removed[301653])
      }
      (301880 'on block' 0 tmp[301875])
    }
    (301884 return result[301635])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304222](?)._popAtIndex[301895](arg _mt[304398]:_MT[238], ref arg this[304396]:list[304222](?), arg idx[301892] :
  int(64)[13], arg unlockBeforeHalt[301898] =
  1) : _unknown[51] "method" "primary method" "no doc"
  {
    if(301941 call _cond_test(301907 call && 1(301905 call <=(406287 call . this[304396] c"_size") 0)))
    {
      if(301914 call _cond_test unlockBeforeHalt[301898])
      {
        (301912 call(406292 call . this[304396] c"_leave"))
      }
      (301939 call boundsCheckHalt "Called \"list.pop\" on an empty list.")
    }
    if(301998 call _cond_test(301953 call && 1(301951 call !(301950 call(406297 call . this[304396] c"_withinBounds") idx[301892]))))
    {
      if(301960 call _cond_test unlockBeforeHalt[301898])
      {
        (301958 call(406303 call . this[304396] c"_leave"))
      }
      const msg[301989] "const"(301987 call + "Index for \"list.pop\" out of bounds: "(301985 call _cast string[26] idx[301892]))
      (301992 'end of statement')
      (301996 call boundsCheckHalt msg[301989])
    }
    unknown item[302006] "ref var"(302005 call(406309 call . this[304396] c"_getRef") idx[301892])
    (302009 'end of statement')
    unknown result[302011] "no init"(406315 call . this[304396] c"eltType")
    (302014 'end of statement')
    (302019 call(406319 call . this[304396] c"_move") item[302006] result[302011])
    (302024 call(406327 call . this[304396] c"_collapse") idx[301892])
    (302028 call -=(406333 call . this[304396] c"_size") 1)
    (302032 return result[302011])
  }
  { scopeless type
    (406281 call . this[304396] c"eltType")
  }
  function list[304222](?).pop[302039](arg _mt[304402]:_MT[238], ref arg this[304400]:list[304222](?)) : _unknown[51] "method" "primary method"
  {
    (302044 call(406343 call . this[304400] c"_enter"))
    unknown result[302054](302053 call(406349 call . this[304400] c"_popAtIndex")(302050 call -(406354 call . this[304400] c"_size") 1))
    (302057 'end of statement')
    (302060 call(406358 call . this[304400] c"_leave"))
    (302063 return result[302054])
  }
  { scopeless type
    (406339 call . this[304400] c"eltType")
  }
  function list[304222](?).pop[302074](arg _mt[304406]:_MT[238], ref arg this[304404]:list[304222](?), arg idx[302071] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (302079 call(406368 call . this[304404] c"_enter"))
    unknown result[302086](302085 call(406372 call . this[304404] c"_popAtIndex") idx[302071])
    (302089 'end of statement')
    (302092 call(406377 call . this[304404] c"_leave"))
    (302095 return result[302086])
  }
  { scopeless type
    (406364 call . this[304404] c"eltType")
  }
  function list[304222](?)._fireAllDestructors[302102](arg _mt[304410]:_MT[238], arg this[304408]:list[304222](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    const tmp[302175] "const" "temp"
    (302177 'move' tmp[302175](302173 'deref'(302172 '_wide_get_locale' this[304408])))
    {
      {
        {
          unknown _indexOfInterest[302126] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302127] "expr temp" "temp"
          (302136 'move' _iterator[302127](302134 call _getIterator(302143 call chpl_direct_counted_range_iter 0(406394 call . this[304408] c"_size"))))
          Defer
          {
            {
              (302159 call _freeIterator _iterator[302127])
            }
          }
          { scopeless type
            (302148 'move' _indexOfInterest[302126](302145 call iteratorIndex _iterator[302127]))
          }
          ForLoop[302128]
          {
            unknown i[302152] "index var" "insert auto destroy"
            (302154 'move' i[302152] _indexOfInterest[302126])
            {
              unknown item[302116] "ref var"(302115 call(406383 call . this[304408] c"_getRef") i[302152])
              (302119 'end of statement')
              (302124 call(406388 call . this[304408] c"_destroy") item[302116])
            }
            label _continueLabel[302131]
            _indexOfInterest[302126]
            _iterator[302127]
          }
          label _breakLabel[302132]
        }
        (302169 call =(406399 call . this[304408] c"_size") 0)
      }
      (302180 'on block' 0 tmp[302175])
    }
    (302184 return _void[55])
  }
  function list[304222](?)._freeAllArrays[302190](arg _mt[304414]:_MT[238], arg this[304412]:list[304222](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(302198 call _cond_test(302194 call ==(406404 call . this[304412] c"_arrays") nil[44]))
    {
      (302196 return _void[55])
    }
    (302210 call _sanity(302207 call !=(406409 call . this[304412] c"_totalCapacity") 0))
    (302218 call _sanity(302215 call !=(406414 call . this[304412] c"_arrayCapacity") 0))
    const tmp[302341] "const" "temp"
    (302343 'move' tmp[302341](302339 'deref'(302338 '_wide_get_locale' this[304412])))
    {
      {
        {
          unknown _indexOfInterest[302273] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302274] "expr temp" "temp"
          (302283 'move' _iterator[302274](302281 call _getIterator(302290 call chpl_direct_counted_range_iter 0(406445 call . this[304412] c"_arrayCapacity"))))
          Defer
          {
            {
              (302306 call _freeIterator _iterator[302274])
            }
          }
          { scopeless type
            (302295 'move' _indexOfInterest[302273](302292 call iteratorIndex _iterator[302274]))
          }
          ForLoop[302275]
          {
            unknown i[302299] "index var" "insert auto destroy"
            (302301 'move' i[302299] _indexOfInterest[302273])
            {
              unknown array[302232] "ref var"(302231 call(406420 call . this[304412] c"_arrays") i[302299])
              (302235 'end of statement')
              if(302244 call _cond_test(302239 call == array[302232] nil[44]))
              {
                continue _continueLabel[302278] _continueLabel[302278]
              }
              const capacity[302253] "const"(302252 call(406426 call . this[304412] c"_getArrayCapacity") i[302299])
              (302256 'end of statement')
              (302259 call -=(406432 call . this[304412] c"_totalCapacity") capacity[302253])
              (302266 call(406437 call . this[304412] c"_freeArray") array[302232] capacity[302253])
              (302270 call = array[302232] nil[44])
            }
            label _continueLabel[302278]
            _indexOfInterest[302273]
            _iterator[302274]
          }
          label _breakLabel[302279]
        }
        (302320 call _sanity(302317 call ==(406450 call . this[304412] c"_totalCapacity") 0))
        (302326 call(406454 call . this[304412] c"_freeBlockArray")(406459 call . this[304412] c"_arrays")(406464 call . this[304412] c"_arrayCapacity"))
        (302330 call =(406469 call . this[304412] c"_arrays") nil[44])
        (302335 call =(406474 call . this[304412] c"_size") 0)
      }
      (302346 'on block' 0 tmp[302341])
    }
    (302349 return _void[55])
  }
  function list[304222](?).clear[302355](arg _mt[304418]:_MT[238], ref arg this[304416]:list[304222](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[302406] "const" "temp"
    (302408 'move' tmp[302406](302404 'deref'(302403 '_wide_get_locale' this[304416])))
    {
      {
        (302360 call(406479 call . this[304416] c"_enter"))
        (302365 call(406483 call . this[304416] c"_fireAllDestructors"))
        (302369 call(406487 call . this[304416] c"_freeAllArrays"))
        (302377 call _sanity(302374 call ==(406492 call . this[304416] c"_totalCapacity") 0))
        (302385 call _sanity(302382 call ==(406497 call . this[304416] c"_size") 0))
        (302393 call _sanity(302390 call ==(406502 call . this[304416] c"_arrays") nil[44]))
        (302397 call(406506 call . this[304416] c"_firstTimeInitializeArrays"))
        (302401 call(406510 call . this[304416] c"_leave"))
      }
      (302411 'on block' 0 tmp[302406])
    }
  }
  function list[304222](?).indexOf[302423](arg _mt[304422]:_MT[238], const arg this[304420]:list[304222](?), arg x[302420] :
  (406515 call . this[304420] c"eltType"), arg start[302427] :
  int(64)[13] =
  0, arg end[302435] :
  int(64)[13] =
  (302433 call - 1)) : _unknown[51] "method" "primary method"
  {
    if(302551 call _cond_test 1)
    {
      const msg[302458] "const" " index for \"list.indexOf\" out of bounds: "
      (302461 'end of statement')
      if(302505 call _cond_test(302473 call &&(302465 call >= end[302435] 0)(302471 call !(302470 call(406521 call . this[304420] c"_withinBounds") end[302435]))))
      {
        (302503 call boundsCheckHalt(302500 call +(302494 call + "End" msg[302458])(302498 call _cast string[26] end[302435])))
      }
      if(302546 call _cond_test(302514 call !(302513 call(406528 call . this[304420] c"_withinBounds") start[302427])))
      {
        (302544 call boundsCheckHalt(302541 call +(302535 call + "Start" msg[302458])(302539 call _cast string[26] start[302427])))
      }
    }
    unknown error[302559] "param"(302557 call - 1)
    (302562 'end of statement')
    if(302576 call _cond_test(302571 call &&(302565 call >= end[302435] 0)(302569 call < end[302435] start[302427])))
    {
      (302574 return error[302559])
    }
    unknown result[302582] error[302559]
    (302585 'end of statement')
    const tmp[302678] "const" "temp"
    (302680 'move' tmp[302678](302676 'deref'(302675 '_wide_get_locale' this[304420])))
    {
      {
        (302589 call(406541 call . this[304420] c"_enter"))
        const stop[302604] "const"(302601 IfExpr (302594 call < end[302435] 0) then
        { scopeless
          (302598 call -(406547 call . this[304420] c"_size") 1)
        } else
        { scopeless
          end[302435]
        } )
        (302607 'end of statement')
        {
          unknown _indexOfInterest[302633] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302634] "expr temp" "temp"
          (302643 'move' _iterator[302634](302641 call _getIterator(302648 call chpl_direct_range_iter start[302427] stop[302604] 1)))
          Defer
          {
            {
              (302664 call _freeIterator _iterator[302634])
            }
          }
          { scopeless type
            (302653 'move' _indexOfInterest[302633](302650 call iteratorIndex _iterator[302634]))
          }
          ForLoop[302635]
          {
            unknown i[302657] "index var" "insert auto destroy"
            (302659 'move' i[302657] _indexOfInterest[302633])
            if(302629 call _cond_test(302618 call == x[302420](302617 call(406553 call . this[304420] c"_getRef") i[302657])))
            {
              (302622 call = result[302582] i[302657])
              break _breakLabel[302639] _breakLabel[302639]
            }
            label _continueLabel[302638]
            _indexOfInterest[302633]
            _iterator[302634]
          }
          label _breakLabel[302639]
        }
        (302673 call(406562 call . this[304420] c"_leave"))
      }
      (302683 'on block' 0 tmp[302678])
    }
    (302687 return result[302582])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304222](?).count[302698](arg _mt[304426]:_MT[238], const arg this[304424]:list[304222](?), arg x[302695] :
  (406568 call . this[304424] c"eltType")) : _unknown[51] "method" "primary method"
  {
    unknown result[302702] 0
    (302705 'end of statement')
    const tmp[302779] "const" "temp"
    (302781 'move' tmp[302779](302777 'deref'(302776 '_wide_get_locale' this[304424])))
    {
      {
        (302710 call(406573 call . this[304424] c"_enter"))
        unknown count[302714] 0
        (302717 'end of statement')
        {
          unknown _indexOfInterest[302734] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302735] "expr temp" "temp"
          (302744 'move' _iterator[302735](302742 call _getIterator this[304424]))
          Defer
          {
            {
              (302760 call _freeIterator _iterator[302735])
            }
          }
          { scopeless type
            (302749 'move' _indexOfInterest[302734](302746 call iteratorIndex _iterator[302735]))
          }
          ForLoop[302736]
          {
            unknown item[302753] "index var" "insert auto destroy"
            (302755 'move' item[302753] _indexOfInterest[302734])
            if(302729 call _cond_test(302722 call == x[302695] item[302753]))
            {
              (302726 call += count[302714] 1)
            }
            label _continueLabel[302739]
            _indexOfInterest[302734]
            _iterator[302735]
          }
          label _breakLabel[302740]
        }
        (302769 call = result[302702] count[302714])
        (302774 call(406583 call . this[304424] c"_leave"))
      }
      (302784 'on block' 0 tmp[302779])
    }
    (302788 return result[302702])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304222](?).sort[302805](arg _mt[304430]:_MT[238], ref arg this[304428]:list[304222](?), arg comparator[302801] :
  unknown rec[302795] =
  defaultComparator[267998]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[302931] "const" "temp"
    (302933 'move' tmp[302931](302929 'deref'(302928 '_wide_get_locale' this[304428])))
    {
      {
        (302810 call(406589 call . this[304428] c"_enter"))
        if(302920 call _cond_test(302815 call >(406594 call . this[304428] c"_size") 1))
        {
          unknown arr[302829](302827 call chpl__buildArrayRuntimeType(302825 call chpl__ensureDomainExpr(302821 call #(302818 call chpl_build_low_bounded_range 0)(406599 call . this[304428] c"_size")))(406604 call . this[304428] c"eltType"))
          (302832 'end of statement')
          {
            unknown _indexOfInterest[302852] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[302853] "expr temp" "temp"
            (302862 'move' _iterator[302853](302860 call _getIterator(302869 call chpl_direct_counted_range_iter 0(406613 call . this[304428] c"_size"))))
            Defer
            {
              {
                (302885 call _freeIterator _iterator[302853])
              }
            }
            { scopeless type
              (302874 'move' _indexOfInterest[302852](302871 call iteratorIndex _iterator[302853]))
            }
            ForLoop[302854]
            {
              unknown i[302878] "index var" "insert auto destroy"
              (302880 'move' i[302878] _indexOfInterest[302852])
              (302849 call =(302844 call arr[302829] i[302878])(302848 call this[304428] i[302878]))
              label _continueLabel[302857]
              _indexOfInterest[302852]
              _iterator[302853]
            }
            label _breakLabel[302858]
          }
          (302901 call sort module=[255] Sort[267989] arr[302829] comparator[302801])
          (302905 call(406619 call . this[304428] c"_fireAllDestructors"))
          (302909 call(406623 call . this[304428] c"_freeAllArrays"))
          (302913 call(406627 call . this[304428] c"_firstTimeInitializeArrays"))
          (302918 call(406631 call . this[304428] c"_extendGeneric") arr[302829])
          (364993 'referenced modules list' Sort[267989])
        }
        (302926 call(406636 call . this[304428] c"_leave"))
      }
      (302936 'on block' 0 tmp[302931])
    }
    (302940 return _void[55])
  }
  function list[304222](?).this[302950](arg _mt[304434]:_MT[238], ref arg this[304432]:list[304222](?), arg i[302947] :
  int(64)[13]) ref : _unknown[51] "method" "primary method"
  {
    if(302994 call _cond_test(302959 call && 1(302957 call !(302956 call(406641 call . this[304432] c"_withinBounds") i[302947]))))
    {
      const msg[302984] "const"(302982 call + "Invalid list index: "(302980 call _cast string[26] i[302947]))
      (302987 'end of statement')
      (302992 call boundsCheckHalt msg[302984])
    }
    unknown result[303003] "ref var"(303002 call(406648 call . this[304432] c"_getRef") i[302947])
    (303006 'end of statement')
    (303008 return result[303003])
  }
  function list[304222](?).this[303018](arg _mt[304438]:_MT[238], const  ref arg this[304436]:list[304222](?), arg i[303015] :
  int(64)[13]) const ref : _unknown[51] "method" "primary method"
  {
    if(303046 call _cond_test(303027 call && 1(303025 call !(303024 call(406655 call . this[304436] c"_withinBounds") i[303015]))))
    {
      const msg[303036] "const"(303034 call + "Invalid list index: "(303032 call _cast string[26] i[303015]))
      (303039 'end of statement')
      (303044 call halt msg[303036])
    }
    const result[303055] "const" "ref var"(303054 call(406662 call . this[304436] c"_getRef") i[303015])
    (303058 'end of statement')
    (303060 return result[303055])
  }
  function list[304222](?).these[303066](arg _mt[304442]:_MT[238], arg this[304440]:list[304222](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[303087] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303088] "expr temp" "temp"
      (303097 'move' _iterator[303088](303095 call _getIterator(303104 call chpl_direct_counted_range_iter 0(406675 call . this[304440] c"_size"))))
      Defer
      {
        {
          (303120 call _freeIterator _iterator[303088])
        }
      }
      { scopeless type
        (303109 'move' _indexOfInterest[303087](303106 call iteratorIndex _iterator[303088]))
      }
      ForLoop[303089]
      {
        unknown i[303113] "index var" "insert auto destroy"
        (303115 'move' i[303113] _indexOfInterest[303087])
        {
          unknown result[303079] "ref var"(303078 call(406668 call . this[304440] c"_getRef") i[303113])
          (303082 'end of statement')
          (303085 yield result[303079])
        }
        label _continueLabel[303092]
        _indexOfInterest[303087]
        _iterator[303088]
      }
      label _breakLabel[303093]
    }
  }
  function list[304222](?).these[303136](arg _mt[304446]:_MT[238], arg this[304444]:list[304222](?), param arg tag[303133] :
  iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    const osz[303146] "const"(406682 call . this[304444] c"_size")
    (303149 'end of statement')
    const minChunkSize[303152] "const" 64
    (303155 'end of statement')
    const hasOneChunk[303160] "const"(303158 call <= osz[303146] minChunkSize[303152])
    (303163 'end of statement')
    const numTasks[303173] "const"(303170 IfExpr  hasOneChunk[303160] then
    { scopeless
      1
    } else
    { scopeless
      (303167 call .(364999 call here[90438]) c"maxTaskPar")
    } )
    (303176 'end of statement')
    const chunkSize[303187] "const"(303185 call _cast int(64)[13](303183 call floor(303180 call / osz[303146] numTasks[303173])))
    (303190 'end of statement')
    const trailing[303198] "const"(303196 call - osz[303146](303194 call * chunkSize[303187] numTasks[303173]))
    (303201 'end of statement')
    {
      unknown tmpIter[303265] "expr temp" "maybe ref" "no copy" "temp"
      (303268 'move' tmpIter[303265](303207 call #(303204 call chpl_build_low_bounded_range 0) numTasks[303173]))
      unknown isRngDomArr[303454] "maybe param" "temp"
      (303469 'move' isRngDomArr[303454](303467 call ||(303456 call isBoundedRange tmpIter[303265])(303465 call ||(303459 call isDomain tmpIter[303265])(303462 call isArray tmpIter[303265]))))
      if isRngDomArr[303454]
      {
        const _coforallCount[303321] "const" "end count" "temp"
        (303390 'move' _coforallCount[303321](303387 call _endCountAlloc 1))
        unknown numTasks[303322] "temp"
        (303374 'move' numTasks[303322](303370 call . tmpIter[303265] c"size"))
        (303365 call _upEndCount _coforallCount[303321] 1 numTasks[303322])
        (303362 call chpl_resetTaskSpawn numTasks[303322])
        unknown _indexOfInterest[303329] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303330] "expr temp" "temp"
        (303339 'move' _iterator[303330](303337 call _getIterator tmpIter[303265]))
        Defer
        {
          {
            (303355 call _freeIterator _iterator[303330])
          }
        }
        { scopeless type
          (303344 'move' _indexOfInterest[303329](303341 call iteratorIndex _iterator[303330]))
        }
        ForLoop[303331]
        {
          unknown tid[303348] "coforall index var" "index var" "insert auto destroy"
          (303350 'move' tid[303348] _indexOfInterest[303329])
          {
            {
              unknown chunk[303272](303274 call(406707 call . this[304444] c"_computeChunk") tid[303348] chunkSize[303187] trailing[303198])
              (303279 'end of statement')
              {
                unknown _indexOfInterest[303281] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[303283] "expr temp" "temp"
                (303285 'move' _iterator[303283](303288 call _getIterator(303290 call chunk[303272] 0)))
                Defer
                {
                  {
                    (303294 call _freeIterator _iterator[303283])
                  }
                }
                { scopeless type
                  (303298 'move' _indexOfInterest[303281](303301 call iteratorIndex _iterator[303283]))
                }
                ForLoop[303303]
                {
                  unknown i[303306] "index var" "insert auto destroy"
                  (303308 'move' i[303306] _indexOfInterest[303281])
                  (303312 yield(303314 call this[304444] i[303306]))
                  label _continueLabel[303316]
                  _indexOfInterest[303281]
                  _iterator[303283]
                }
                label _breakLabel[303318]
              }
            }
            (303324 call _downEndCount _coforallCount[303321] nil[44])
            (303323 'coforall loop')
          }
          label _continueLabel[303334]
          _indexOfInterest[303329]
          _iterator[303330]
        }
        label _breakLabel[303335]
        Defer
        {
          {
            (303377 call _endCountFree _coforallCount[303321])
          }
        }
        (303382 call _waitEndCount _coforallCount[303321] 1 numTasks[303322])
      }
      {
        const _coforallCount[303394] "const" "end count" "temp"
        (303451 'move' _coforallCount[303394](303448 call _endCountAlloc 1))
        unknown _indexOfInterest[303402] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303403] "expr temp" "temp"
        (303412 'move' _iterator[303403](303410 call _getIterator tmpIter[303265]))
        Defer
        {
          {
            (303428 call _freeIterator _iterator[303403])
          }
        }
        { scopeless type
          (303417 'move' _indexOfInterest[303402](303414 call iteratorIndex _iterator[303403]))
        }
        ForLoop[303404]
        {
          unknown tid[303421] "coforall index var" "index var" "insert auto destroy"
          (303423 'move' tid[303421] _indexOfInterest[303402])
          (303435 call _upEndCount _coforallCount[303394] 1)
          {
            {
              unknown chunk[303215](303214 call(406697 call . this[304444] c"_computeChunk") tid[303421] chunkSize[303187] trailing[303198])
              (303218 'end of statement')
              {
                unknown _indexOfInterest[303231] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[303232] "expr temp" "temp"
                (303241 'move' _iterator[303232](303239 call _getIterator(303224 call chunk[303215] 0)))
                Defer
                {
                  {
                    (303258 call _freeIterator _iterator[303232])
                  }
                }
                { scopeless type
                  (303247 'move' _indexOfInterest[303231](303244 call iteratorIndex _iterator[303232]))
                }
                ForLoop[303233]
                {
                  unknown i[303251] "index var" "insert auto destroy"
                  (303253 'move' i[303251] _indexOfInterest[303231])
                  (303229 yield(303228 call this[304444] i[303251]))
                  label _continueLabel[303236]
                  _indexOfInterest[303231]
                  _iterator[303232]
                }
                label _breakLabel[303237]
              }
            }
            (303397 call _downEndCount _coforallCount[303394] nil[44])
            (303396 'coforall loop')
          }
          label _continueLabel[303407]
          _indexOfInterest[303402]
          _iterator[303403]
        }
        label _breakLabel[303408]
        Defer
        {
          {
            (303439 call _endCountFree _coforallCount[303394])
          }
        }
        (303444 call _waitEndCount _coforallCount[303394] 1)
      }
    }
  }
  where {
    (303143 call == tag[303133] standalone[451])
  }
  function list[304222](?)._computeChunk[303480](arg _mt[304450]:_MT[238], arg this[304448]:list[304222](?), arg tid[303478]:_any[178](?), arg chunkSize[303482]:_any[178](?), arg trailing[303484]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown lo[303486] 0
    unknown hi[303490] lo[303486]
    (303494 'end of statement')
    if(303540 call _cond_test(303498 call <= tid[303478] 0))
    {
      (303502 call = lo[303486] 0)
      (303514 call = hi[303490](303512 call -(303509 call + chunkSize[303482] trailing[303484]) 1))
    }
    {
      (303525 call = lo[303486](303523 call +(303520 call * chunkSize[303482] tid[303478]) trailing[303484]))
      (303537 call = hi[303490](303535 call -(303532 call + lo[303486] chunkSize[303482]) 1))
    }
    (303550 return(303548 call _build_tuple(303546 call chpl_build_bounded_range lo[303486] hi[303490])))
  }
  function list[304222](?).these[303558](arg _mt[304454]:_MT[238], arg this[304452]:list[304222](?), param arg tag[303556]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    const osz[303568] "const"(406734 call . this[304452] c"_size")
    (303571 'end of statement')
    const minChunkSize[303574] "const" 32
    (303577 'end of statement')
    const hasOneChunk[303582] "const"(303580 call <= osz[303568] minChunkSize[303574])
    (303585 'end of statement')
    const numTasks[303592] "const"(303589 IfExpr  hasOneChunk[303582] then
    { scopeless
      1
    } else
    { scopeless
      dataParTasksPerLocale[93284]
    } )
    (303595 'end of statement')
    const chunkSize[303606] "const"(303604 call _cast int(64)[13](303602 call floor(303599 call / osz[303568] numTasks[303592])))
    (303609 'end of statement')
    const trailing[303617] "const"(303615 call - osz[303568](303613 call * chunkSize[303606] numTasks[303592]))
    (303620 'end of statement')
    {
      unknown tmpIter[303642] "expr temp" "maybe ref" "no copy" "temp"
      (303645 'move' tmpIter[303642](303626 call #(303623 call chpl_build_low_bounded_range 0) numTasks[303592]))
      unknown isRngDomArr[303793] "maybe param" "temp"
      (303808 'move' isRngDomArr[303793](303806 call ||(303795 call isBoundedRange tmpIter[303642])(303804 call ||(303798 call isDomain tmpIter[303642])(303801 call isArray tmpIter[303642]))))
      if isRngDomArr[303793]
      {
        const _coforallCount[303660] "const" "end count" "temp"
        (303729 'move' _coforallCount[303660](303726 call _endCountAlloc 1))
        unknown numTasks[303661] "temp"
        (303713 'move' numTasks[303661](303709 call . tmpIter[303642] c"size"))
        (303704 call _upEndCount _coforallCount[303660] 1 numTasks[303661])
        (303701 call chpl_resetTaskSpawn numTasks[303661])
        unknown _indexOfInterest[303668] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303669] "expr temp" "temp"
        (303678 'move' _iterator[303669](303676 call _getIterator tmpIter[303642]))
        Defer
        {
          {
            (303694 call _freeIterator _iterator[303669])
          }
        }
        { scopeless type
          (303683 'move' _indexOfInterest[303668](303680 call iteratorIndex _iterator[303669]))
        }
        ForLoop[303670]
        {
          unknown tid[303687] "coforall index var" "index var" "insert auto destroy"
          (303689 'move' tid[303687] _indexOfInterest[303668])
          {
            {
              unknown chunk[303649](303651 call(406756 call . this[304452] c"_computeChunk") tid[303687] chunkSize[303606] trailing[303617])
              (303656 'end of statement')
              (303657 yield chunk[303649])
            }
            (303663 call _downEndCount _coforallCount[303660] nil[44])
            (303662 'coforall loop')
          }
          label _continueLabel[303673]
          _indexOfInterest[303668]
          _iterator[303669]
        }
        label _breakLabel[303674]
        Defer
        {
          {
            (303716 call _endCountFree _coforallCount[303660])
          }
        }
        (303721 call _waitEndCount _coforallCount[303660] 1 numTasks[303661])
      }
      {
        const _coforallCount[303733] "const" "end count" "temp"
        (303790 'move' _coforallCount[303733](303787 call _endCountAlloc 1))
        unknown _indexOfInterest[303741] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303742] "expr temp" "temp"
        (303751 'move' _iterator[303742](303749 call _getIterator tmpIter[303642]))
        Defer
        {
          {
            (303767 call _freeIterator _iterator[303742])
          }
        }
        { scopeless type
          (303756 'move' _indexOfInterest[303741](303753 call iteratorIndex _iterator[303742]))
        }
        ForLoop[303743]
        {
          unknown tid[303760] "coforall index var" "index var" "insert auto destroy"
          (303762 'move' tid[303760] _indexOfInterest[303741])
          (303774 call _upEndCount _coforallCount[303733] 1)
          {
            {
              unknown chunk[303634](303633 call(406748 call . this[304452] c"_computeChunk") tid[303760] chunkSize[303606] trailing[303617])
              (303637 'end of statement')
              (303640 yield chunk[303634])
            }
            (303736 call _downEndCount _coforallCount[303733] nil[44])
            (303735 'coforall loop')
          }
          label _continueLabel[303746]
          _indexOfInterest[303741]
          _iterator[303742]
        }
        label _breakLabel[303747]
        Defer
        {
          {
            (303778 call _endCountFree _coforallCount[303733])
          }
        }
        (303783 call _waitEndCount _coforallCount[303733] 1)
      }
    }
  }
  where {
    (303565 call == tag[303556] leader[447])
  }
  function list[304222](?).these[303819](arg _mt[304458]:_MT[238], arg this[304456]:list[304222](?), param arg tag[303817]:_any[178](?), arg followThis[303821]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[303841] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303842] "expr temp" "temp"
      (303851 'move' _iterator[303842](303849 call _getIterator(303834 call followThis[303821] 0)))
      Defer
      {
        {
          (303868 call _freeIterator _iterator[303842])
        }
      }
      { scopeless type
        (303857 'move' _indexOfInterest[303841](303854 call iteratorIndex _iterator[303842]))
      }
      ForLoop[303843]
      {
        unknown i[303861] "index var" "insert auto destroy"
        (303863 'move' i[303861] _indexOfInterest[303841])
        (303839 yield(303838 call this[304456] i[303861]))
        label _continueLabel[303846]
        _indexOfInterest[303841]
        _iterator[303842]
      }
      label _breakLabel[303847]
    }
  }
  where {
    (303828 call == tag[303817] follower[449])
  }
  function list[304222](?).readWriteThis[303885](arg _mt[304462]:_MT[238], arg this[304460]:list[304222](?), arg ch[303882] :
  channel[237751](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (303889 call(406769 call . this[304460] c"_enter"))
    (303894 call <~> ch[303882] "[")
    {
      unknown _indexOfInterest[303916] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303917] "expr temp" "temp"
      (303926 'move' _iterator[303917](303924 call _getIterator(303934 call chpl_direct_range_iter 0(303931 call -(406781 call . this[304460] c"_size") 2) 1)))
      Defer
      {
        {
          (303950 call _freeIterator _iterator[303917])
        }
      }
      { scopeless type
        (303939 'move' _indexOfInterest[303916](303936 call iteratorIndex _iterator[303917]))
      }
      ForLoop[303918]
      {
        unknown i[303943] "index var" "insert auto destroy"
        (303945 'move' i[303943] _indexOfInterest[303916])
        (303913 call <~>(303910 call <~> ch[303882](303909 call(406775 call . this[304460] c"_getRef") i[303943])) ", ")
        label _continueLabel[303921]
        _indexOfInterest[303916]
        _iterator[303917]
      }
      label _breakLabel[303922]
    }
    if(303972 call _cond_test(303959 call >(406786 call . this[304460] c"_size") 0))
    {
      (303969 call <~> ch[303882](303968 call(406791 call . this[304460] c"_getRef")(303965 call -(406796 call . this[304460] c"_size") 1)))
    }
    (303979 call <~> ch[303882] "]")
    (303984 call(406801 call . this[304460] c"_leave"))
  }
  function list[304222](?).isEmpty[303990](arg _mt[304466]:_MT[238], const arg this[304464]:list[304222](?)) : _unknown[51] "method" "primary method"
  {
    (303995 call(406805 call . this[304464] c"_enter"))
    unknown result[304002](304000 call ==(406810 call . this[304464] c"_size") 0)
    (304005 'end of statement')
    (304008 call(406814 call . this[304464] c"_leave"))
    (304011 return result[304002])
  }
  { scopeless type
    bool[10]
  }
  function list[304222](?).size[304018](arg _mt[304470]:_MT[238], const arg this[304468]:list[304222](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown result[304021] 0
    (304024 'end of statement')
    const tmp[304044] "const" "temp"
    (304046 'move' tmp[304044](304042 'deref'(304041 '_wide_get_locale' this[304468])))
    {
      {
        (304029 call(406820 call . this[304468] c"_enter"))
        (304034 call = result[304021](406826 call . this[304468] c"_size"))
        (304039 call(406830 call . this[304468] c"_leave"))
      }
      (304049 'on block' 0 tmp[304044])
    }
    (304053 return result[304021])
  }
  function list[304222](?).indices[304059](arg _mt[304474]:_MT[238], arg this[304472]:list[304222](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (304071 return(304069 call chpl_build_bounded_range 0(304067 call -(304063 call . this[304472] c"size") 1)))
  }
  function list[304222](?).toArray[304078](arg _mt[304478]:_MT[238], const arg this[304476]:list[304222](?)) : _unknown[51] "method" "primary method"
  {
    if(304136 call _cond_test(304092 call &&(304087 call isNonNilableClass(406841 call . this[304476] c"eltType"))(304091 call isOwnedClass(406846 call . this[304476] c"eltType"))))
    {
      (304134 call compilerError "toArray() method is not available on a 'list'" " with elements of a non-nilable owned type, here: "(304132 call _cast string[26](406851 call . this[304476] c"eltType")))
    }
    unknown result[304154] "unsafe"(304152 call chpl__buildArrayRuntimeType(304150 call chpl__ensureDomainExpr(304146 call #(304143 call chpl_build_low_bounded_range 0)(406856 call . this[304476] c"_size")))(406861 call . this[304476] c"eltType"))
    (304157 'end of statement')
    const tmp[304207] "const" "temp"
    (304209 'move' tmp[304207](304205 'deref'(304204 '_wide_get_locale' this[304476])))
    {
      {
        (304161 call(406866 call . this[304476] c"_enter"))
        unknown tmp[304191](304187 forall  i[304189]  in (304181 call #(304178 call chpl_build_low_bounded_range 0)(406882 call . this[304476] c"_size")) do
        {
          (304186 call(406886 call . this[304476] c"_getRef") i[304189])
        } )(304174 call chpl__buildArrayRuntimeType(304172 call chpl__ensureDomainExpr(304168 call #(304165 call chpl_build_low_bounded_range 0)(406871 call . this[304476] c"_size")))(406876 call . this[304476] c"eltType"))
        (304194 'end of statement')
        (304197 call = result[304154] tmp[304191])
        (304202 call(406893 call . this[304476] c"_leave"))
      }
      (304212 'on block' 0 tmp[304207])
    }
    (304216 return result[304154])
  }
  { scopeless type
    (304081 call chpl__buildArrayRuntimeType nil[44](406836 call . this[304476] c"eltType"))
  }
  type list[304222](?) unknown eltType[298470] "type variable" unknown parSafe[298474] "param" 0 unknown _size[298479] "no doc" 0 unknown _lock$[298492] "no doc"(298489 IfExpr  parSafe[298474] then
  { scopeless
    (298484 'new'(298487 call _LockWrapper[405240](?)))
  } else
  { scopeless
    none[57]
  } ) unknown _arrays[298504] "no doc" nil[44](298502 call _ddata[11696](?)(298500 call _ddata[11696](?) eltType[298470])) unknown _arrayCapacity[298509] "no doc" 0 unknown _totalCapacity[298514] "no doc" 0 unknown _dummyFieldToForceBorrowChecking[298522] "no doc"(298521 call _dummyFieldType eltType[298470])
  function =[304492](ref arg lhs[304489] :
  (304488 call list[304222](?) unknown t[304484] ?[260]), arg rhs[304499] :
  (304498 call list[304222](?) t[304484] ?[260])) : _unknown[51] "assignop" "no return value for void"
  {
    (304507 call(304503 call . lhs[304489] c"clear"))
    (304518 call(304513 call . lhs[304489] c"extend") rhs[304499])
  }
  function ==[304533](arg a[304530] :
  (304529 call list[304222](?) unknown t[304525] ?[260]), arg b[304540] :
  (304539 call list[304222](?) t[304525] ?[260])) : _unknown[51]
  {
    if(304557 call _cond_test(304552 call !=(304545 call . a[304530] c"size")(304549 call . b[304540] c"size")))
    {
      (304555 return 0)
    }
    {
      unknown _indexOfInterest[304591] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[304592] "expr temp" "temp"
      (304601 'move' _iterator[304592](304599 call _getIterator(304611 call chpl_direct_counted_range_iter 0(304607 call . a[304530] c"size"))))
      Defer
      {
        {
          (304627 call _freeIterator _iterator[304592])
        }
      }
      { scopeless type
        (304616 'move' _indexOfInterest[304591](304613 call iteratorIndex _iterator[304592]))
      }
      ForLoop[304593]
      {
        unknown i[304620] "index var" "insert auto destroy"
        (304622 'move' i[304620] _indexOfInterest[304591])
        if(304586 call _cond_test(304581 call !=(304576 call a[304530] i[304620])(304580 call b[304540] i[304620])))
        {
          (304584 return 0)
        }
        label _continueLabel[304596]
        _indexOfInterest[304591]
        _iterator[304592]
      }
      label _breakLabel[304597]
    }
    (304635 return 1)
  }
  { scopeless type
    bool[10]
  }
  function !=[304651](arg a[304648] :
  (304647 call list[304222](?) unknown t[304643] ?[260]), arg b[304658] :
  (304657 call list[304222](?) t[304643] ?[260])) : _unknown[51]
  {
    (304668 return(304666 call !(304664 call == a[304648] b[304658])))
  }
  { scopeless type
    bool[10]
  }
  (355554 'used modules list'(353102 'use' ChapelStandard[20267])(298247 'import' ChapelLocks[187302])(298251 'use' HaltWrappers[210018])(298254 'use' Sort[267989])(298467 'use' IO[230912]))
  (364936 'referenced modules list' ChapelLocks[187302] Sort[267989])
}