AST dump for Reflection after pass buildDefaultFunctions.
Module use list: ChapelStandard 

{
  function chpl__init_Reflection[416107]() : void[4] "insert line file info" "module init"
  {
    (533115 return _void[55])
  }
  function checkQueryT[224887](arg t[224885]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[532839] "RVV" "temp" "type variable"
    unknown call_tmp[710784] "expr temp" "maybe param" "maybe type" "temp"
    (710787 'move' call_tmp[710784](224892 call isClassType t[224885]))
    unknown call_tmp[710789] "expr temp" "maybe param" "maybe type" "temp"
    (710792 'move' call_tmp[710789](224945 call _cond_test call_tmp[710784]))
    if call_tmp[710789]
    {
      unknown call_tmp[710794] "expr temp" "maybe param" "maybe type" "temp"
      (710797 'move' call_tmp[710794](224896 call _cast _borrowedNonNilable[214](?) t[224885]))
      (532844 'move' ret[532839](532843 'deref' call_tmp[710794]))
      gotoReturn _end_checkQueryT[532837] _end_checkQueryT[532837]
    }
    {
      unknown tmp[431688] "maybe param" "temp"
      (431699 'move' tmp[431688](224903 call isRecordType t[224885]))
      unknown call_tmp[710799] "expr temp" "maybe param" "maybe type" "temp"
      (710802 'move' call_tmp[710799](431701 call _cond_invalid tmp[431688]))
      if call_tmp[710799]
      {
        (431704 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[575780] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[575781] "maybe param" "temp"
      unknown call_tmp[710804] "expr temp" "maybe param" "maybe type" "temp"
      (710807 'move' call_tmp[710804](431689 call isTrue tmp[431688]))
      (575786 'move' tmp[575781](575784 call _cond_test call_tmp[710804]))
      if tmp[575781]
      {
        (575791 'move' tmp[575780](575788 '_paramFoldLogical' tmp[575781] 1))
      }
      {
        unknown tmp[575793] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[710809] "expr temp" "maybe param" "maybe type" "temp"
        (710812 'move' call_tmp[710809](224907 call isUnionType t[224885]))
        (575795 'move' tmp[575793](431693 call isTrue call_tmp[710809]))
        (575800 'move' tmp[575780](575797 '_paramFoldLogical' tmp[575781] tmp[575793]))
      }
      unknown call_tmp[710814] "expr temp" "maybe param" "maybe type" "temp"
      (710817 'move' call_tmp[710814](224939 call _cond_test tmp[575780]))
      if call_tmp[710814]
      {
        (532849 'move' ret[532839](532848 'deref' t[224885]))
        gotoReturn _end_checkQueryT[532837] _end_checkQueryT[532837]
      }
      {
        unknown call_tmp[710819] "expr temp" "maybe param" "maybe type" "temp"
        (710822 'move' call_tmp[710819](224916 call _cast string[26] t[224885]))
        (224937 call compilerError call_tmp[710819] " is not a class, record, or union type" 2)
      }
    }
    label _end_checkQueryT[532837]
    (532841 return ret[532839])
  }
  function numFields[224959](arg t[224957]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[532855] "RVV" "param" "temp"
    unknown call_tmp[710824] "expr temp" "maybe param" "maybe type" "temp"
    (710827 'move' call_tmp[710824](224967 call checkQueryT t[224957]))
    unknown call_tmp[710829] "expr temp" "maybe param" "maybe type" "temp"
    (710832 'move' call_tmp[710829](224968 'num fields' call_tmp[710824]))
    (532861 'move' ret[532855](532860 'coerce' call_tmp[710829] int(64)[13]))
    (532857 return ret[532855])
  }
  { scopeless type
    int(64)[13]
  }
  function getFieldName[224979](arg t[224977]:_any[178](?), param arg i[224982]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532865] "RVV" "param" "temp"
    unknown call_tmp[710834] "expr temp" "maybe param" "maybe type" "temp"
    (710837 'move' call_tmp[710834](224991 call checkQueryT t[224977]))
    unknown call_tmp[710839] "expr temp" "maybe param" "maybe type" "temp"
    (710842 'move' call_tmp[710839](224994 call + i[224982] 1))
    unknown call_tmp[710844] "expr temp" "maybe param" "maybe type" "temp"
    (710847 'move' call_tmp[710844](224996 'field num to name' call_tmp[710834] call_tmp[710839]))
    (532871 'move' ret[532865](532870 'coerce' call_tmp[710844] string[26]))
    (532867 return ret[532865])
  }
  { scopeless type
    string[26]
  }
  function getField[225010](const  ref arg x[225007]:_any[178](?), param arg i[225013]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532875] "RVV" "param" "temp"
    unknown call_tmp[710849] "expr temp" "maybe param" "maybe type" "temp"
    (710852 'move' call_tmp[710849](225047 call + i[225013] 1))
    unknown call_tmp[710854] "expr temp" "maybe param" "maybe type" "temp"
    (710857 'move' call_tmp[710854](225049 'field by num' x[225007] call_tmp[710849]))
    (532880 'move' ret[532875](532879 'deref' call_tmp[710854]))
    (532877 return ret[532875])
  }
  where {
    unknown tmp[431709] "maybe param" "temp"
    unknown tmp[431730] "maybe param" "temp"
    (431741 'move' tmp[431730](225018 call >= i[225013] 0))
    unknown call_tmp[710859] "expr temp" "maybe param" "maybe type" "temp"
    (710862 'move' call_tmp[710859](431743 call _cond_invalid tmp[431730]))
    if call_tmp[710859]
    {
      (431746 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575807] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575808] "maybe param" "temp"
    unknown call_tmp[710864] "expr temp" "maybe param" "maybe type" "temp"
    (710867 'move' call_tmp[710864](431731 call isTrue tmp[431730]))
    (575813 'move' tmp[575808](575811 call _cond_test call_tmp[710864]))
    if tmp[575808]
    {
      unknown tmp[575815] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710869] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710872 'move' call_tmp[710869](464949 'typeof' x[225007]))
      unknown call_tmp[710874] "expr temp" "maybe param" "maybe type" "temp"
      (710877 'move' call_tmp[710874](225024 call numFields call_tmp[710869]))
      unknown call_tmp[710879] "expr temp" "maybe param" "maybe type" "temp"
      (710882 'move' call_tmp[710879](225025 call < i[225013] call_tmp[710874]))
      (575817 'move' tmp[575815](431734 call isTrue call_tmp[710879]))
      (575822 'move' tmp[575807](575819 '_paramFoldLogical' tmp[575808] tmp[575815]))
    }
    {
      (575827 'move' tmp[575807](575824 '_paramFoldLogical' tmp[575808] 0))
    }
    (431720 'move' tmp[431709] tmp[575807])
    unknown call_tmp[710884] "expr temp" "maybe param" "maybe type" "temp"
    (710887 'move' call_tmp[710884](431722 call _cond_invalid tmp[431709]))
    if call_tmp[710884]
    {
      (431725 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575834] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575835] "maybe param" "temp"
    unknown call_tmp[710889] "expr temp" "maybe param" "maybe type" "temp"
    (710892 'move' call_tmp[710889](431710 call isTrue tmp[431709]))
    (575840 'move' tmp[575835](575838 call _cond_test call_tmp[710889]))
    if tmp[575835]
    {
      unknown tmp[575842] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710894] "expr temp" "maybe param" "maybe type" "temp"
      (710897 'move' call_tmp[710894](225035 call + i[225013] 1))
      unknown call_tmp[710899] "expr temp" "maybe param" "maybe type" "temp"
      (710902 'move' call_tmp[710899](225037 'field by num' x[225007] call_tmp[710894]))
      unknown call_tmp[710904] "expr temp" "maybe param" "maybe type" "temp"
      (710907 'move' call_tmp[710904](225039 call isParam call_tmp[710899]))
      (575844 'move' tmp[575842](431713 call isTrue call_tmp[710904]))
      (575849 'move' tmp[575834](575846 '_paramFoldLogical' tmp[575835] tmp[575842]))
    }
    {
      (575854 'move' tmp[575834](575851 '_paramFoldLogical' tmp[575835] 0))
    }
    (748362 call chpl_statementLevelSymbol tmp[575834])
  }
  function getField[225063](const  ref arg x[225060]:_any[178](?), param arg i[225066]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[532884] "RVV" "temp" "type variable"
    unknown call_tmp[710909] "expr temp" "maybe param" "maybe type" "temp"
    (710912 'move' call_tmp[710909](225100 call + i[225066] 1))
    unknown call_tmp[710914] "expr temp" "maybe param" "maybe type" "temp"
    (710917 'move' call_tmp[710914](225102 'field by num' x[225060] call_tmp[710909]))
    (532889 'move' ret[532884](532888 'deref' call_tmp[710914]))
    (532886 return ret[532884])
  }
  where {
    unknown tmp[431751] "maybe param" "temp"
    unknown tmp[431772] "maybe param" "temp"
    (431783 'move' tmp[431772](225071 call >= i[225066] 0))
    unknown call_tmp[710919] "expr temp" "maybe param" "maybe type" "temp"
    (710922 'move' call_tmp[710919](431785 call _cond_invalid tmp[431772]))
    if call_tmp[710919]
    {
      (431788 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575861] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575862] "maybe param" "temp"
    unknown call_tmp[710924] "expr temp" "maybe param" "maybe type" "temp"
    (710927 'move' call_tmp[710924](431773 call isTrue tmp[431772]))
    (575867 'move' tmp[575862](575865 call _cond_test call_tmp[710924]))
    if tmp[575862]
    {
      unknown tmp[575869] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710929] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710932 'move' call_tmp[710929](464951 'typeof' x[225060]))
      unknown call_tmp[710934] "expr temp" "maybe param" "maybe type" "temp"
      (710937 'move' call_tmp[710934](225077 call numFields call_tmp[710929]))
      unknown call_tmp[710939] "expr temp" "maybe param" "maybe type" "temp"
      (710942 'move' call_tmp[710939](225078 call < i[225066] call_tmp[710934]))
      (575871 'move' tmp[575869](431776 call isTrue call_tmp[710939]))
      (575876 'move' tmp[575861](575873 '_paramFoldLogical' tmp[575862] tmp[575869]))
    }
    {
      (575881 'move' tmp[575861](575878 '_paramFoldLogical' tmp[575862] 0))
    }
    (431762 'move' tmp[431751] tmp[575861])
    unknown call_tmp[710944] "expr temp" "maybe param" "maybe type" "temp"
    (710947 'move' call_tmp[710944](431764 call _cond_invalid tmp[431751]))
    if call_tmp[710944]
    {
      (431767 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575888] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575889] "maybe param" "temp"
    unknown call_tmp[710949] "expr temp" "maybe param" "maybe type" "temp"
    (710952 'move' call_tmp[710949](431752 call isTrue tmp[431751]))
    (575894 'move' tmp[575889](575892 call _cond_test call_tmp[710949]))
    if tmp[575889]
    {
      unknown tmp[575896] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710954] "expr temp" "maybe param" "maybe type" "temp"
      (710957 'move' call_tmp[710954](225088 call + i[225066] 1))
      unknown call_tmp[710959] "expr temp" "maybe param" "maybe type" "temp"
      (710962 'move' call_tmp[710959](225090 'field by num' x[225060] call_tmp[710954]))
      unknown call_tmp[710964] "expr temp" "maybe param" "maybe type" "temp"
      (710967 'move' call_tmp[710964](225092 call isType call_tmp[710959]))
      (575898 'move' tmp[575896](431755 call isTrue call_tmp[710964]))
      (575903 'move' tmp[575888](575900 '_paramFoldLogical' tmp[575889] tmp[575896]))
    }
    {
      (575908 'move' tmp[575888](575905 '_paramFoldLogical' tmp[575889] 0))
    }
    (748364 call chpl_statementLevelSymbol tmp[575888])
  }
  function getField[225116](const  ref arg x[225113]:_any[178](?), param arg i[225119]:int(64)[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532893] "RVV" "temp"
    unknown call_tmp[710969] "expr temp" "maybe param" "maybe type" "temp"
    (710972 'move' call_tmp[710969](225127 call + i[225119] 1))
    unknown call_tmp[710974] "expr temp" "maybe param" "maybe type" "temp"
    (710977 'move' call_tmp[710974](225129 'field by num' x[225113] call_tmp[710969]))
    (532898 'move' ret[532893](532897 'addr of' call_tmp[710974]))
    (532895 return ret[532893])
  }
  function getField[225142](const  ref arg x[225139]:_any[178](?), param arg s[225145]:string[26]) param : _unknown[51]
  {
    unknown ret[532902] "RVV" "param" "temp"
    unknown call_tmp[710979] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (710982 'move' call_tmp[710979](464953 'typeof' x[225139]))
    unknown call_tmp[710984] "expr temp" "maybe param" "maybe type" "temp"
    (710987 'move' call_tmp[710984](225179 call getFieldIndex call_tmp[710979] s[225145]))
    unknown call_tmp[710989] "expr temp" "maybe param" "maybe type" "temp"
    (710992 'move' call_tmp[710989](225180 call getField x[225139] call_tmp[710984]))
    (532907 'move' ret[532902](532906 'deref' call_tmp[710989]))
    (532904 return ret[532902])
  }
  where {
    unknown tmp[431793] "maybe param" "temp"
    unknown call_tmp[710994] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (710997 'move' call_tmp[710994](464955 'typeof' x[225139]))
    unknown call_tmp[710999] "expr temp" "maybe param" "maybe type" "temp"
    (711002 'move' call_tmp[710999](225152 call getFieldIndex call_tmp[710994] s[225145]))
    unknown call_tmp[711004] "expr temp" "maybe param" "maybe type" "temp"
    (711007 'move' call_tmp[711004](225154 call - 1))
    (431804 'move' tmp[431793](225156 call != call_tmp[710999] call_tmp[711004]))
    unknown call_tmp[711009] "expr temp" "maybe param" "maybe type" "temp"
    (711012 'move' call_tmp[711009](431806 call _cond_invalid tmp[431793]))
    if call_tmp[711009]
    {
      (431809 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575915] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575916] "maybe param" "temp"
    unknown call_tmp[711014] "expr temp" "maybe param" "maybe type" "temp"
    (711017 'move' call_tmp[711014](431794 call isTrue tmp[431793]))
    (575921 'move' tmp[575916](575919 call _cond_test call_tmp[711014]))
    if tmp[575916]
    {
      unknown tmp[575923] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711019] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711022 'move' call_tmp[711019](464957 'typeof' x[225139]))
      unknown call_tmp[711024] "expr temp" "maybe param" "maybe type" "temp"
      (711027 'move' call_tmp[711024](225166 call getFieldIndex call_tmp[711019] s[225145]))
      unknown call_tmp[711029] "expr temp" "maybe param" "maybe type" "temp"
      (711032 'move' call_tmp[711029](225167 call getField x[225139] call_tmp[711024]))
      unknown call_tmp[711034] "expr temp" "maybe param" "maybe type" "temp"
      (711037 'move' call_tmp[711034](225169 call isParam call_tmp[711029]))
      (575925 'move' tmp[575923](431797 call isTrue call_tmp[711034]))
      (575930 'move' tmp[575915](575927 '_paramFoldLogical' tmp[575916] tmp[575923]))
    }
    {
      (575935 'move' tmp[575915](575932 '_paramFoldLogical' tmp[575916] 0))
    }
    (748366 call chpl_statementLevelSymbol tmp[575915])
  }
  function getField[225194](const  ref arg x[225191]:_any[178](?), param arg s[225197]:string[26]) type : _unknown[51]
  {
    unknown ret[532911] "RVV" "temp" "type variable"
    unknown call_tmp[711039] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711042 'move' call_tmp[711039](464959 'typeof' x[225191]))
    unknown call_tmp[711044] "expr temp" "maybe param" "maybe type" "temp"
    (711047 'move' call_tmp[711044](225231 call getFieldIndex call_tmp[711039] s[225197]))
    unknown call_tmp[711049] "expr temp" "maybe param" "maybe type" "temp"
    (711052 'move' call_tmp[711049](225232 call getField x[225191] call_tmp[711044]))
    (532916 'move' ret[532911](532915 'deref' call_tmp[711049]))
    (532913 return ret[532911])
  }
  where {
    unknown tmp[431814] "maybe param" "temp"
    unknown call_tmp[711054] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711057 'move' call_tmp[711054](464961 'typeof' x[225191]))
    unknown call_tmp[711059] "expr temp" "maybe param" "maybe type" "temp"
    (711062 'move' call_tmp[711059](225204 call getFieldIndex call_tmp[711054] s[225197]))
    unknown call_tmp[711064] "expr temp" "maybe param" "maybe type" "temp"
    (711067 'move' call_tmp[711064](225206 call - 1))
    (431825 'move' tmp[431814](225208 call != call_tmp[711059] call_tmp[711064]))
    unknown call_tmp[711069] "expr temp" "maybe param" "maybe type" "temp"
    (711072 'move' call_tmp[711069](431827 call _cond_invalid tmp[431814]))
    if call_tmp[711069]
    {
      (431830 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575942] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575943] "maybe param" "temp"
    unknown call_tmp[711074] "expr temp" "maybe param" "maybe type" "temp"
    (711077 'move' call_tmp[711074](431815 call isTrue tmp[431814]))
    (575948 'move' tmp[575943](575946 call _cond_test call_tmp[711074]))
    if tmp[575943]
    {
      unknown tmp[575950] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711079] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711082 'move' call_tmp[711079](464963 'typeof' x[225191]))
      unknown call_tmp[711084] "expr temp" "maybe param" "maybe type" "temp"
      (711087 'move' call_tmp[711084](225218 call getFieldIndex call_tmp[711079] s[225197]))
      unknown call_tmp[711089] "expr temp" "maybe param" "maybe type" "temp"
      (711092 'move' call_tmp[711089](225219 call getField x[225191] call_tmp[711084]))
      unknown call_tmp[711094] "expr temp" "maybe param" "maybe type" "temp"
      (711097 'move' call_tmp[711094](225221 call isType call_tmp[711089]))
      (575952 'move' tmp[575950](431818 call isTrue call_tmp[711094]))
      (575957 'move' tmp[575942](575954 '_paramFoldLogical' tmp[575943] tmp[575950]))
    }
    {
      (575962 'move' tmp[575942](575959 '_paramFoldLogical' tmp[575943] 0))
    }
    (748368 call chpl_statementLevelSymbol tmp[575942])
  }
  function getField[225246](const  ref arg x[225243]:_any[178](?), param arg s[225249]:string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532920] "RVV" "temp"
    unknown call_tmp[711099] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711102 'move' call_tmp[711099](464965 'typeof' x[225243]))
    unknown call_tmp[711104] "maybe param" "maybe type" "temp"
    (711107 'move' call_tmp[711104](225272 'field name to num' call_tmp[711099] s[225249]))
    unknown i[225273] "dead at end of block" "param"
    (546502 'init var' i[225273] call_tmp[711104])
    (225276 'end of statement')
    unknown call_tmp[711109] "expr temp" "maybe param" "maybe type" "temp"
    (711112 'move' call_tmp[711109](225280 call == i[225273] 0))
    unknown call_tmp[711114] "expr temp" "maybe param" "maybe type" "temp"
    (711117 'move' call_tmp[711114](225325 call _cond_test call_tmp[711109]))
    if call_tmp[711114]
    {
      unknown call_tmp[711119] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711122 'move' call_tmp[711119](464967 'typeof' x[225243]))
      unknown call_tmp[711124] "expr temp" "maybe param" "maybe type" "temp"
      (711127 'move' call_tmp[711124](225321 call _cast string[26] call_tmp[711119]))
      (225323 call compilerError "field " s[225249] " not found in " call_tmp[711124])
    }
    unknown call_tmp[711129] "expr temp" "maybe param" "maybe type" "temp"
    (711132 'move' call_tmp[711129](225334 'field by num' x[225243] i[225273]))
    (532925 'move' ret[532920](532924 'addr of' call_tmp[711129]))
    (532922 return ret[532920])
  }
  function isImplementedWithRecords[225343](arg t[225341]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[532929] "RVV" "param" "temp"
    unknown tmp[431835] "maybe param" "temp"
    (431846 'move' tmp[431835](225348 call isRangeType t[225341]))
    unknown call_tmp[711134] "expr temp" "maybe param" "maybe type" "temp"
    (711137 'move' call_tmp[711134](431848 call _cond_invalid tmp[431835]))
    if call_tmp[711134]
    {
      (431851 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[575969] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575970] "maybe param" "temp"
    unknown call_tmp[711139] "expr temp" "maybe param" "maybe type" "temp"
    (711142 'move' call_tmp[711139](431836 call isTrue tmp[431835]))
    (575975 'move' tmp[575970](575973 call _cond_test call_tmp[711139]))
    if tmp[575970]
    {
      (575980 'move' tmp[575969](575977 '_paramFoldLogical' tmp[575970] 1))
    }
    {
      unknown tmp[575982] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711144] "expr temp" "maybe param" "maybe type" "temp"
      (711147 'move' call_tmp[711144](225352 call isStringType t[225341]))
      (575984 'move' tmp[575982](431840 call isTrue call_tmp[711144]))
      (575989 'move' tmp[575969](575986 '_paramFoldLogical' tmp[575970] tmp[575982]))
    }
    (532934 'move' ret[532929](532933 'deref' tmp[575969]))
    (532931 return ret[532929])
  }
  function numImplementationFields[225364](arg t[225362]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[532938] "RVV" "param" "temp"
    unknown call_tmp[711149] "expr temp" "maybe param" "maybe type" "temp"
    (711152 'move' call_tmp[711149](225374 'num fields' t[225362]))
    (532944 'move' ret[532938](532943 'coerce' call_tmp[711149] int(64)[13]))
    (532940 return ret[532938])
  }
  where {
    (225370 call isImplementedWithRecords t[225362])
  }
  { scopeless type
    int(64)[13]
  }
  function getImplementationField[225389](const  ref arg x[225386]:_any[178](?), param arg i[225392]:int(64)[13]) type : _unknown[51] "no doc"
  {
    unknown ret[532948] "RVV" "temp" "type variable"
    unknown call_tmp[711154] "expr temp" "maybe param" "maybe type" "temp"
    (711157 'move' call_tmp[711154](225413 'field by num' x[225386] i[225392]))
    (532953 'move' ret[532948](532952 'deref' call_tmp[711154]))
    (532950 return ret[532948])
  }
  where {
    unknown tmp[431856] "maybe param" "temp"
    unknown call_tmp[711159] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711162 'move' call_tmp[711159](464969 'typeof' x[225386]))
    (431867 'move' tmp[431856](225398 call isImplementedWithRecords call_tmp[711159]))
    unknown call_tmp[711164] "expr temp" "maybe param" "maybe type" "temp"
    (711167 'move' call_tmp[711164](431869 call _cond_invalid tmp[431856]))
    if call_tmp[711164]
    {
      (431872 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575996] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575997] "maybe param" "temp"
    unknown call_tmp[711169] "expr temp" "maybe param" "maybe type" "temp"
    (711172 'move' call_tmp[711169](431857 call isTrue tmp[431856]))
    (576002 'move' tmp[575997](576000 call _cond_test call_tmp[711169]))
    if tmp[575997]
    {
      unknown tmp[576004] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711174] "expr temp" "maybe param" "maybe type" "temp"
      (711177 'move' call_tmp[711174](225404 'field by num' x[225386] i[225392]))
      unknown call_tmp[711179] "expr temp" "maybe param" "maybe type" "temp"
      (711182 'move' call_tmp[711179](225406 call isType call_tmp[711174]))
      (576006 'move' tmp[576004](431860 call isTrue call_tmp[711179]))
      (576011 'move' tmp[575996](576008 '_paramFoldLogical' tmp[575997] tmp[576004]))
    }
    {
      (576016 'move' tmp[575996](576013 '_paramFoldLogical' tmp[575997] 0))
    }
    (748370 call chpl_statementLevelSymbol tmp[575996])
  }
  function getImplementationField[225427](const  ref arg x[225424]:_any[178](?), param arg i[225430]:int(64)[13]) param : _unknown[51] "no doc"
  {
    unknown ret[532957] "RVV" "param" "temp"
    unknown call_tmp[711184] "expr temp" "maybe param" "maybe type" "temp"
    (711187 'move' call_tmp[711184](225451 'field by num' x[225424] i[225430]))
    (532962 'move' ret[532957](532961 'deref' call_tmp[711184]))
    (532959 return ret[532957])
  }
  where {
    unknown tmp[431877] "maybe param" "temp"
    unknown call_tmp[711189] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711192 'move' call_tmp[711189](464971 'typeof' x[225424]))
    (431888 'move' tmp[431877](225436 call isImplementedWithRecords call_tmp[711189]))
    unknown call_tmp[711194] "expr temp" "maybe param" "maybe type" "temp"
    (711197 'move' call_tmp[711194](431890 call _cond_invalid tmp[431877]))
    if call_tmp[711194]
    {
      (431893 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576023] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576024] "maybe param" "temp"
    unknown call_tmp[711199] "expr temp" "maybe param" "maybe type" "temp"
    (711202 'move' call_tmp[711199](431878 call isTrue tmp[431877]))
    (576029 'move' tmp[576024](576027 call _cond_test call_tmp[711199]))
    if tmp[576024]
    {
      unknown tmp[576031] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711204] "expr temp" "maybe param" "maybe type" "temp"
      (711207 'move' call_tmp[711204](225442 'field by num' x[225424] i[225430]))
      unknown call_tmp[711209] "expr temp" "maybe param" "maybe type" "temp"
      (711212 'move' call_tmp[711209](225444 call isParam call_tmp[711204]))
      (576033 'move' tmp[576031](431881 call isTrue call_tmp[711209]))
      (576038 'move' tmp[576023](576035 '_paramFoldLogical' tmp[576024] tmp[576031]))
    }
    {
      (576043 'move' tmp[576023](576040 '_paramFoldLogical' tmp[576024] 0))
    }
    (748372 call chpl_statementLevelSymbol tmp[576023])
  }
  function getImplementationField[225465](const  ref arg x[225462]:_any[178](?), param arg i[225468]:int(64)[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    unknown ret[532966] "RVV" "temp"
    unknown call_tmp[711214] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711217 'move' call_tmp[711214](464973 'typeof' x[225462]))
    unknown call_tmp[711219] "expr temp" "maybe param" "maybe type" "temp"
    (711222 'move' call_tmp[711219](225474 call isImplementedWithRecords call_tmp[711214]))
    unknown call_tmp[711224] "expr temp" "maybe param" "maybe type" "temp"
    (711227 'move' call_tmp[711224](225475 call ! call_tmp[711219]))
    unknown call_tmp[711229] "expr temp" "maybe param" "maybe type" "temp"
    (711232 'move' call_tmp[711229](225519 call _cond_test call_tmp[711224]))
    if call_tmp[711229]
    {
      unknown call_tmp[711234] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711237 'move' call_tmp[711234](464975 'typeof' x[225462]))
      unknown call_tmp[711239] "expr temp" "maybe param" "maybe type" "temp"
      (711242 'move' call_tmp[711239](225498 call _cast string[26] call_tmp[711234]))
      (225517 call compilerError "an argument of the type " call_tmp[711239] " is not valid for getImplementationField()")
    }
    unknown call_tmp[711244] "expr temp" "maybe param" "maybe type" "temp"
    (711247 'move' call_tmp[711244](225529 'field by num' x[225462] i[225468]))
    (532971 'move' ret[532966](532970 'addr of' call_tmp[711244]))
    (532968 return ret[532966])
  }
  function getFieldRef[225541](ref arg x[225538]:_any[178](?), param arg i[225544]:int(64)[13]) ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532975] "RVV" "temp"
    unknown call_tmp[711249] "expr temp" "maybe param" "maybe type" "temp"
    (711252 'move' call_tmp[711249](225552 call + i[225544] 1))
    unknown call_tmp[711254] "expr temp" "maybe param" "maybe type" "temp"
    (711257 'move' call_tmp[711254](225554 'field by num' x[225538] call_tmp[711249]))
    (532980 'move' ret[532975](532979 'addr of' call_tmp[711254]))
    (532977 return ret[532975])
  }
  function getFieldRef[225567](ref arg x[225564]:_any[178](?), param arg s[225570]:string[26]) ref : _unknown[51] "unsafe"
  {
    unknown ret[532984] "RVV" "temp"
    unknown call_tmp[711259] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711262 'move' call_tmp[711259](464977 'typeof' x[225564]))
    unknown call_tmp[711264] "maybe param" "maybe type" "temp"
    (711267 'move' call_tmp[711264](225577 'field name to num' call_tmp[711259] s[225570]))
    unknown i[225578] "dead at end of block" "param"
    (546504 'init var' i[225578] call_tmp[711264])
    (225581 'end of statement')
    unknown call_tmp[711269] "expr temp" "maybe param" "maybe type" "temp"
    (711272 'move' call_tmp[711269](225585 call == i[225578] 0))
    unknown call_tmp[711274] "expr temp" "maybe param" "maybe type" "temp"
    (711277 'move' call_tmp[711274](225598 call _cond_test call_tmp[711269]))
    if call_tmp[711274]
    {
      unknown call_tmp[711279] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711282 'move' call_tmp[711279](464979 'typeof' x[225564]))
      unknown call_tmp[711284] "expr temp" "maybe param" "maybe type" "temp"
      (711287 'move' call_tmp[711284](225594 call _cast string[26] call_tmp[711279]))
      (225596 call compilerError "field " s[225570] " not found in " call_tmp[711284])
    }
    unknown call_tmp[711289] "expr temp" "maybe param" "maybe type" "temp"
    (711292 'move' call_tmp[711289](225607 'field by num' x[225564] i[225578]))
    (532989 'move' ret[532984](532988 'addr of' call_tmp[711289]))
    (532986 return ret[532984])
  }
  function getFieldIndex[225616](arg t[225614]:_any[178](?), param arg s[225619]:string[26]) param : _unknown[51]
  {
    unknown ret[532993] "RVV" "param" "temp"
    unknown call_tmp[711294] "expr temp" "maybe param" "maybe type" "temp"
    (711297 'move' call_tmp[711294](225628 call checkQueryT t[225614]))
    unknown call_tmp[711299] "expr temp" "maybe param" "maybe type" "temp"
    (711302 'move' call_tmp[711299](225630 'field name to num' call_tmp[711294] s[225619]))
    unknown call_tmp[711304] "expr temp" "maybe param" "maybe type" "temp"
    (711307 'move' call_tmp[711304](225632 call - call_tmp[711299] 1))
    (532999 'move' ret[532993](532998 'coerce' call_tmp[711304] int(64)[13]))
    (532995 return ret[532993])
  }
  { scopeless type
    int(64)[13]
  }
  function hasField[225644](arg t[225642]:_any[178](?), param arg s[225647]:string[26]) param : _unknown[51]
  {
    unknown ret[533003] "RVV" "param" "temp"
    unknown call_tmp[711309] "expr temp" "maybe param" "maybe type" "temp"
    (711312 'move' call_tmp[711309](225655 call getFieldIndex t[225642] s[225647]))
    unknown call_tmp[711314] "expr temp" "maybe param" "maybe type" "temp"
    (711317 'move' call_tmp[711314](225657 call >= call_tmp[711309] 0))
    (533009 'move' ret[533003](533008 'coerce' call_tmp[711314] bool[10]))
    (533005 return ret[533003])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225669](arg t[225667]:_any[178](?), param arg i[225672]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[533013] "RVV" "param" "temp"
    unknown call_tmp[711319] "expr temp" "maybe param" "maybe type" "temp"
    (711322 'move' call_tmp[711319](225697 call checkQueryT t[225667]))
    unknown call_tmp[711324] "expr temp" "maybe param" "maybe type" "temp"
    (711327 'move' call_tmp[711324](225702 call checkQueryT t[225667]))
    unknown call_tmp[711329] "expr temp" "maybe param" "maybe type" "temp"
    (711332 'move' call_tmp[711329](225705 call getFieldName call_tmp[711324] i[225672]))
    unknown call_tmp[711334] "expr temp" "maybe param" "maybe type" "temp"
    (711337 'move' call_tmp[711334](225706 'is bound' call_tmp[711319] call_tmp[711329]))
    (533019 'move' ret[533013](533018 'coerce' call_tmp[711334] bool[10]))
    (533015 return ret[533013])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225717](arg t[225715]:_any[178](?), param arg s[225720]:string[26]) param : _unknown[51]
  {
    unknown ret[533023] "RVV" "param" "temp"
    unknown call_tmp[711339] "expr temp" "maybe param" "maybe type" "temp"
    (711342 'move' call_tmp[711339](225729 call checkQueryT t[225715]))
    unknown call_tmp[711344] "expr temp" "maybe param" "maybe type" "temp"
    (711347 'move' call_tmp[711344](225731 'is bound' call_tmp[711339] s[225720]))
    (533029 'move' ret[533023](533028 'coerce' call_tmp[711344] bool[10]))
    (533025 return ret[533023])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225744](param arg fname[225741]:string[26]) param : _unknown[51]
  {
    unknown ret[533033] "RVV" "param" "temp"
    unknown call_tmp[711349] "expr temp" "maybe param" "maybe type" "temp"
    (711352 'move' call_tmp[711349](225766 'call and fn resolves' fname[225741]))
    (533039 'move' ret[533033](533038 'coerce' call_tmp[711349] bool[10]))
    (533035 return ret[533033])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225779](param arg fname[225776]:string[26], arg args[225782]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533043] "RVV" "param" "temp"
    unknown call_tmp[711354] "expr temp" "maybe param" "maybe type" "temp"
    (711357 'move' call_tmp[711354](225791 'call and fn resolves' fname[225776](225790 'expand_tuple' args[225782])))
    (533049 'move' ret[533043](533048 'coerce' call_tmp[711354] bool[10]))
    (533045 return ret[533043])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225802](arg obj[225800]:_any[178](?), param arg fname[225805]:string[26]) param : _unknown[51]
  {
    unknown ret[533053] "RVV" "param" "temp"
    unknown call_tmp[711359] "expr temp" "maybe param" "maybe type" "temp"
    (711362 'move' call_tmp[711359](225829 'method call and fn resolves' obj[225800] fname[225805]))
    (533059 'move' ret[533053](533058 'coerce' call_tmp[711359] bool[10]))
    (533055 return ret[533053])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225840](arg obj[225838]:_any[178](?), param arg fname[225843]:string[26], arg args[225847]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533063] "RVV" "param" "temp"
    unknown call_tmp[711364] "expr temp" "maybe param" "maybe type" "temp"
    (711367 'move' call_tmp[711364](225857 'method call and fn resolves' obj[225838] fname[225843](225856 'expand_tuple' args[225847])))
    (533069 'move' ret[533063](533068 'coerce' call_tmp[711364] bool[10]))
    (533065 return ret[533063])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225868](arg t[225866]:_any[178](?), param arg fname[225871]:string[26]) param : _unknown[51]
  {
    unknown ret[533073] "RVV" "param" "temp"
    unknown call_tmp[711369] "expr temp" "maybe param" "maybe type" "temp"
    (711372 'move' call_tmp[711369](225879 'method call and fn resolves' t[225866] fname[225871]))
    (533079 'move' ret[533073](533078 'coerce' call_tmp[711369] bool[10]))
    (533075 return ret[533073])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225890](arg t[225888]:_any[178](?), param arg fname[225893]:string[26], arg args[225897]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533083] "RVV" "param" "temp"
    unknown call_tmp[711374] "expr temp" "maybe param" "maybe type" "temp"
    (711377 'move' call_tmp[711374](225907 'method call and fn resolves' t[225888] fname[225893](225906 'expand_tuple' args[225897])))
    (533089 'move' ret[533083](533088 'coerce' call_tmp[711374] bool[10]))
    (533085 return ret[533083])
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[225916]() param : _unknown[51] "get line number" "no return value for void"
  {
    unknown ret[533093] "RVV" "param" "temp"
    (533095 return ret[533093])
  }
  { scopeless type
    int(64)[13]
  }
  function getFileName[225925]() param : _unknown[51] "get file name" "no return value for void"
  {
    unknown ret[533099] "RVV" "param" "temp"
    (533101 return ret[533099])
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[225934]() param : _unknown[51] "get function name" "no return value for void"
  {
    unknown ret[533105] "RVV" "param" "temp"
    (533107 return ret[533105])
  }
  { scopeless type
    string[26]
  }
  function getModuleName[225943]() param : _unknown[51] "get module name" "no return value for void"
  {
    unknown ret[533111] "RVV" "param" "temp"
    (533113 return ret[533111])
  }
  { scopeless type
    string[26]
  }
  (355299 'used modules list'(353006 'use' ChapelStandard[20264]))
}