AST dump for Reflection after pass buildDefaultFunctions.
Module use list: ChapelStandard 

{
  function chpl__init_Reflection[416165]() : void[4] "insert line file info" "module init"
  {
    (533179 return _void[55])
  }
  function checkQueryT[224804](arg t[224802]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[532903] "RVV" "temp" "type variable"
    unknown call_tmp[710823] "expr temp" "maybe param" "maybe type" "temp"
    (710826 'move' call_tmp[710823](224809 call isClassType t[224802]))
    unknown call_tmp[710828] "expr temp" "maybe param" "maybe type" "temp"
    (710831 'move' call_tmp[710828](224862 call _cond_test call_tmp[710823]))
    if call_tmp[710828]
    {
      unknown call_tmp[710833] "expr temp" "maybe param" "maybe type" "temp"
      (710836 'move' call_tmp[710833](224813 call _cast _borrowedNonNilable[214](?) t[224802]))
      (532908 'move' ret[532903](532907 'deref' call_tmp[710833]))
      gotoReturn _end_checkQueryT[532901] _end_checkQueryT[532901]
    }
    {
      unknown tmp[431746] "maybe param" "temp"
      (431757 'move' tmp[431746](224820 call isRecordType t[224802]))
      unknown call_tmp[710838] "expr temp" "maybe param" "maybe type" "temp"
      (710841 'move' call_tmp[710838](431759 call _cond_invalid tmp[431746]))
      if call_tmp[710838]
      {
        (431762 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[575844] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[575845] "maybe param" "temp"
      unknown call_tmp[710843] "expr temp" "maybe param" "maybe type" "temp"
      (710846 'move' call_tmp[710843](431747 call isTrue tmp[431746]))
      (575850 'move' tmp[575845](575848 call _cond_test call_tmp[710843]))
      if tmp[575845]
      {
        (575855 'move' tmp[575844](575852 '_paramFoldLogical' tmp[575845] 1))
      }
      {
        unknown tmp[575857] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[710848] "expr temp" "maybe param" "maybe type" "temp"
        (710851 'move' call_tmp[710848](224824 call isUnionType t[224802]))
        (575859 'move' tmp[575857](431751 call isTrue call_tmp[710848]))
        (575864 'move' tmp[575844](575861 '_paramFoldLogical' tmp[575845] tmp[575857]))
      }
      unknown call_tmp[710853] "expr temp" "maybe param" "maybe type" "temp"
      (710856 'move' call_tmp[710853](224856 call _cond_test tmp[575844]))
      if call_tmp[710853]
      {
        (532913 'move' ret[532903](532912 'deref' t[224802]))
        gotoReturn _end_checkQueryT[532901] _end_checkQueryT[532901]
      }
      {
        unknown call_tmp[710858] "expr temp" "maybe param" "maybe type" "temp"
        (710861 'move' call_tmp[710858](224833 call _cast string[26] t[224802]))
        (224854 call compilerError call_tmp[710858] " is not a class, record, or union type" 2)
      }
    }
    label _end_checkQueryT[532901]
    (532905 return ret[532903])
  }
  function numFields[224876](arg t[224874]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[532919] "RVV" "param" "temp"
    unknown call_tmp[710863] "expr temp" "maybe param" "maybe type" "temp"
    (710866 'move' call_tmp[710863](224884 call checkQueryT t[224874]))
    unknown call_tmp[710868] "expr temp" "maybe param" "maybe type" "temp"
    (710871 'move' call_tmp[710868](224885 'num fields' call_tmp[710863]))
    (532925 'move' ret[532919](532924 'coerce' call_tmp[710868] int(64)[13]))
    (532921 return ret[532919])
  }
  { scopeless type
    int(64)[13]
  }
  function getFieldName[224896](arg t[224894]:_any[178](?), param arg i[224899]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532929] "RVV" "param" "temp"
    unknown call_tmp[710873] "expr temp" "maybe param" "maybe type" "temp"
    (710876 'move' call_tmp[710873](224908 call checkQueryT t[224894]))
    unknown call_tmp[710878] "expr temp" "maybe param" "maybe type" "temp"
    (710881 'move' call_tmp[710878](224911 call + i[224899] 1))
    unknown call_tmp[710883] "expr temp" "maybe param" "maybe type" "temp"
    (710886 'move' call_tmp[710883](224913 'field num to name' call_tmp[710873] call_tmp[710878]))
    (532935 'move' ret[532929](532934 'coerce' call_tmp[710883] string[26]))
    (532931 return ret[532929])
  }
  { scopeless type
    string[26]
  }
  function getField[224927](const  ref arg x[224924]:_any[178](?), param arg i[224930]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532939] "RVV" "param" "temp"
    unknown call_tmp[710888] "expr temp" "maybe param" "maybe type" "temp"
    (710891 'move' call_tmp[710888](224964 call + i[224930] 1))
    unknown call_tmp[710893] "expr temp" "maybe param" "maybe type" "temp"
    (710896 'move' call_tmp[710893](224966 'field by num' x[224924] call_tmp[710888]))
    (532944 'move' ret[532939](532943 'deref' call_tmp[710893]))
    (532941 return ret[532939])
  }
  where {
    unknown tmp[431767] "maybe param" "temp"
    unknown tmp[431788] "maybe param" "temp"
    (431799 'move' tmp[431788](224935 call >= i[224930] 0))
    unknown call_tmp[710898] "expr temp" "maybe param" "maybe type" "temp"
    (710901 'move' call_tmp[710898](431801 call _cond_invalid tmp[431788]))
    if call_tmp[710898]
    {
      (431804 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575871] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575872] "maybe param" "temp"
    unknown call_tmp[710903] "expr temp" "maybe param" "maybe type" "temp"
    (710906 'move' call_tmp[710903](431789 call isTrue tmp[431788]))
    (575877 'move' tmp[575872](575875 call _cond_test call_tmp[710903]))
    if tmp[575872]
    {
      unknown tmp[575879] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710908] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710911 'move' call_tmp[710908](465007 'typeof' x[224924]))
      unknown call_tmp[710913] "expr temp" "maybe param" "maybe type" "temp"
      (710916 'move' call_tmp[710913](224941 call numFields call_tmp[710908]))
      unknown call_tmp[710918] "expr temp" "maybe param" "maybe type" "temp"
      (710921 'move' call_tmp[710918](224942 call < i[224930] call_tmp[710913]))
      (575881 'move' tmp[575879](431792 call isTrue call_tmp[710918]))
      (575886 'move' tmp[575871](575883 '_paramFoldLogical' tmp[575872] tmp[575879]))
    }
    {
      (575891 'move' tmp[575871](575888 '_paramFoldLogical' tmp[575872] 0))
    }
    (431778 'move' tmp[431767] tmp[575871])
    unknown call_tmp[710923] "expr temp" "maybe param" "maybe type" "temp"
    (710926 'move' call_tmp[710923](431780 call _cond_invalid tmp[431767]))
    if call_tmp[710923]
    {
      (431783 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575898] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575899] "maybe param" "temp"
    unknown call_tmp[710928] "expr temp" "maybe param" "maybe type" "temp"
    (710931 'move' call_tmp[710928](431768 call isTrue tmp[431767]))
    (575904 'move' tmp[575899](575902 call _cond_test call_tmp[710928]))
    if tmp[575899]
    {
      unknown tmp[575906] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710933] "expr temp" "maybe param" "maybe type" "temp"
      (710936 'move' call_tmp[710933](224952 call + i[224930] 1))
      unknown call_tmp[710938] "expr temp" "maybe param" "maybe type" "temp"
      (710941 'move' call_tmp[710938](224954 'field by num' x[224924] call_tmp[710933]))
      unknown call_tmp[710943] "expr temp" "maybe param" "maybe type" "temp"
      (710946 'move' call_tmp[710943](224956 call isParam call_tmp[710938]))
      (575908 'move' tmp[575906](431771 call isTrue call_tmp[710943]))
      (575913 'move' tmp[575898](575910 '_paramFoldLogical' tmp[575899] tmp[575906]))
    }
    {
      (575918 'move' tmp[575898](575915 '_paramFoldLogical' tmp[575899] 0))
    }
    (748401 call chpl_statementLevelSymbol tmp[575898])
  }
  function getField[224980](const  ref arg x[224977]:_any[178](?), param arg i[224983]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[532948] "RVV" "temp" "type variable"
    unknown call_tmp[710948] "expr temp" "maybe param" "maybe type" "temp"
    (710951 'move' call_tmp[710948](225017 call + i[224983] 1))
    unknown call_tmp[710953] "expr temp" "maybe param" "maybe type" "temp"
    (710956 'move' call_tmp[710953](225019 'field by num' x[224977] call_tmp[710948]))
    (532953 'move' ret[532948](532952 'deref' call_tmp[710953]))
    (532950 return ret[532948])
  }
  where {
    unknown tmp[431809] "maybe param" "temp"
    unknown tmp[431830] "maybe param" "temp"
    (431841 'move' tmp[431830](224988 call >= i[224983] 0))
    unknown call_tmp[710958] "expr temp" "maybe param" "maybe type" "temp"
    (710961 'move' call_tmp[710958](431843 call _cond_invalid tmp[431830]))
    if call_tmp[710958]
    {
      (431846 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575925] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575926] "maybe param" "temp"
    unknown call_tmp[710963] "expr temp" "maybe param" "maybe type" "temp"
    (710966 'move' call_tmp[710963](431831 call isTrue tmp[431830]))
    (575931 'move' tmp[575926](575929 call _cond_test call_tmp[710963]))
    if tmp[575926]
    {
      unknown tmp[575933] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710968] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710971 'move' call_tmp[710968](465009 'typeof' x[224977]))
      unknown call_tmp[710973] "expr temp" "maybe param" "maybe type" "temp"
      (710976 'move' call_tmp[710973](224994 call numFields call_tmp[710968]))
      unknown call_tmp[710978] "expr temp" "maybe param" "maybe type" "temp"
      (710981 'move' call_tmp[710978](224995 call < i[224983] call_tmp[710973]))
      (575935 'move' tmp[575933](431834 call isTrue call_tmp[710978]))
      (575940 'move' tmp[575925](575937 '_paramFoldLogical' tmp[575926] tmp[575933]))
    }
    {
      (575945 'move' tmp[575925](575942 '_paramFoldLogical' tmp[575926] 0))
    }
    (431820 'move' tmp[431809] tmp[575925])
    unknown call_tmp[710983] "expr temp" "maybe param" "maybe type" "temp"
    (710986 'move' call_tmp[710983](431822 call _cond_invalid tmp[431809]))
    if call_tmp[710983]
    {
      (431825 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575952] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575953] "maybe param" "temp"
    unknown call_tmp[710988] "expr temp" "maybe param" "maybe type" "temp"
    (710991 'move' call_tmp[710988](431810 call isTrue tmp[431809]))
    (575958 'move' tmp[575953](575956 call _cond_test call_tmp[710988]))
    if tmp[575953]
    {
      unknown tmp[575960] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710993] "expr temp" "maybe param" "maybe type" "temp"
      (710996 'move' call_tmp[710993](225005 call + i[224983] 1))
      unknown call_tmp[710998] "expr temp" "maybe param" "maybe type" "temp"
      (711001 'move' call_tmp[710998](225007 'field by num' x[224977] call_tmp[710993]))
      unknown call_tmp[711003] "expr temp" "maybe param" "maybe type" "temp"
      (711006 'move' call_tmp[711003](225009 call isType call_tmp[710998]))
      (575962 'move' tmp[575960](431813 call isTrue call_tmp[711003]))
      (575967 'move' tmp[575952](575964 '_paramFoldLogical' tmp[575953] tmp[575960]))
    }
    {
      (575972 'move' tmp[575952](575969 '_paramFoldLogical' tmp[575953] 0))
    }
    (748403 call chpl_statementLevelSymbol tmp[575952])
  }
  function getField[225033](const  ref arg x[225030]:_any[178](?), param arg i[225036]:int(64)[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532957] "RVV" "temp"
    unknown call_tmp[711008] "expr temp" "maybe param" "maybe type" "temp"
    (711011 'move' call_tmp[711008](225044 call + i[225036] 1))
    unknown call_tmp[711013] "expr temp" "maybe param" "maybe type" "temp"
    (711016 'move' call_tmp[711013](225046 'field by num' x[225030] call_tmp[711008]))
    (532962 'move' ret[532957](532961 'addr of' call_tmp[711013]))
    (532959 return ret[532957])
  }
  function getField[225059](const  ref arg x[225056]:_any[178](?), param arg s[225062]:string[26]) param : _unknown[51]
  {
    unknown ret[532966] "RVV" "param" "temp"
    unknown call_tmp[711018] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711021 'move' call_tmp[711018](465011 'typeof' x[225056]))
    unknown call_tmp[711023] "expr temp" "maybe param" "maybe type" "temp"
    (711026 'move' call_tmp[711023](225096 call getFieldIndex call_tmp[711018] s[225062]))
    unknown call_tmp[711028] "expr temp" "maybe param" "maybe type" "temp"
    (711031 'move' call_tmp[711028](225097 call getField x[225056] call_tmp[711023]))
    (532971 'move' ret[532966](532970 'deref' call_tmp[711028]))
    (532968 return ret[532966])
  }
  where {
    unknown tmp[431851] "maybe param" "temp"
    unknown call_tmp[711033] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711036 'move' call_tmp[711033](465013 'typeof' x[225056]))
    unknown call_tmp[711038] "expr temp" "maybe param" "maybe type" "temp"
    (711041 'move' call_tmp[711038](225069 call getFieldIndex call_tmp[711033] s[225062]))
    unknown call_tmp[711043] "expr temp" "maybe param" "maybe type" "temp"
    (711046 'move' call_tmp[711043](225071 call - 1))
    (431862 'move' tmp[431851](225073 call != call_tmp[711038] call_tmp[711043]))
    unknown call_tmp[711048] "expr temp" "maybe param" "maybe type" "temp"
    (711051 'move' call_tmp[711048](431864 call _cond_invalid tmp[431851]))
    if call_tmp[711048]
    {
      (431867 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575979] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575980] "maybe param" "temp"
    unknown call_tmp[711053] "expr temp" "maybe param" "maybe type" "temp"
    (711056 'move' call_tmp[711053](431852 call isTrue tmp[431851]))
    (575985 'move' tmp[575980](575983 call _cond_test call_tmp[711053]))
    if tmp[575980]
    {
      unknown tmp[575987] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711058] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711061 'move' call_tmp[711058](465015 'typeof' x[225056]))
      unknown call_tmp[711063] "expr temp" "maybe param" "maybe type" "temp"
      (711066 'move' call_tmp[711063](225083 call getFieldIndex call_tmp[711058] s[225062]))
      unknown call_tmp[711068] "expr temp" "maybe param" "maybe type" "temp"
      (711071 'move' call_tmp[711068](225084 call getField x[225056] call_tmp[711063]))
      unknown call_tmp[711073] "expr temp" "maybe param" "maybe type" "temp"
      (711076 'move' call_tmp[711073](225086 call isParam call_tmp[711068]))
      (575989 'move' tmp[575987](431855 call isTrue call_tmp[711073]))
      (575994 'move' tmp[575979](575991 '_paramFoldLogical' tmp[575980] tmp[575987]))
    }
    {
      (575999 'move' tmp[575979](575996 '_paramFoldLogical' tmp[575980] 0))
    }
    (748405 call chpl_statementLevelSymbol tmp[575979])
  }
  function getField[225111](const  ref arg x[225108]:_any[178](?), param arg s[225114]:string[26]) type : _unknown[51]
  {
    unknown ret[532975] "RVV" "temp" "type variable"
    unknown call_tmp[711078] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711081 'move' call_tmp[711078](465017 'typeof' x[225108]))
    unknown call_tmp[711083] "expr temp" "maybe param" "maybe type" "temp"
    (711086 'move' call_tmp[711083](225148 call getFieldIndex call_tmp[711078] s[225114]))
    unknown call_tmp[711088] "expr temp" "maybe param" "maybe type" "temp"
    (711091 'move' call_tmp[711088](225149 call getField x[225108] call_tmp[711083]))
    (532980 'move' ret[532975](532979 'deref' call_tmp[711088]))
    (532977 return ret[532975])
  }
  where {
    unknown tmp[431872] "maybe param" "temp"
    unknown call_tmp[711093] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711096 'move' call_tmp[711093](465019 'typeof' x[225108]))
    unknown call_tmp[711098] "expr temp" "maybe param" "maybe type" "temp"
    (711101 'move' call_tmp[711098](225121 call getFieldIndex call_tmp[711093] s[225114]))
    unknown call_tmp[711103] "expr temp" "maybe param" "maybe type" "temp"
    (711106 'move' call_tmp[711103](225123 call - 1))
    (431883 'move' tmp[431872](225125 call != call_tmp[711098] call_tmp[711103]))
    unknown call_tmp[711108] "expr temp" "maybe param" "maybe type" "temp"
    (711111 'move' call_tmp[711108](431885 call _cond_invalid tmp[431872]))
    if call_tmp[711108]
    {
      (431888 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576006] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576007] "maybe param" "temp"
    unknown call_tmp[711113] "expr temp" "maybe param" "maybe type" "temp"
    (711116 'move' call_tmp[711113](431873 call isTrue tmp[431872]))
    (576012 'move' tmp[576007](576010 call _cond_test call_tmp[711113]))
    if tmp[576007]
    {
      unknown tmp[576014] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711118] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711121 'move' call_tmp[711118](465021 'typeof' x[225108]))
      unknown call_tmp[711123] "expr temp" "maybe param" "maybe type" "temp"
      (711126 'move' call_tmp[711123](225135 call getFieldIndex call_tmp[711118] s[225114]))
      unknown call_tmp[711128] "expr temp" "maybe param" "maybe type" "temp"
      (711131 'move' call_tmp[711128](225136 call getField x[225108] call_tmp[711123]))
      unknown call_tmp[711133] "expr temp" "maybe param" "maybe type" "temp"
      (711136 'move' call_tmp[711133](225138 call isType call_tmp[711128]))
      (576016 'move' tmp[576014](431876 call isTrue call_tmp[711133]))
      (576021 'move' tmp[576006](576018 '_paramFoldLogical' tmp[576007] tmp[576014]))
    }
    {
      (576026 'move' tmp[576006](576023 '_paramFoldLogical' tmp[576007] 0))
    }
    (748407 call chpl_statementLevelSymbol tmp[576006])
  }
  function getField[225163](const  ref arg x[225160]:_any[178](?), param arg s[225166]:string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532984] "RVV" "temp"
    unknown call_tmp[711138] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711141 'move' call_tmp[711138](465023 'typeof' x[225160]))
    unknown call_tmp[711143] "maybe param" "maybe type" "temp"
    (711146 'move' call_tmp[711143](225189 'field name to num' call_tmp[711138] s[225166]))
    unknown i[225190] "dead at end of block" "param"
    (546566 'init var' i[225190] call_tmp[711143])
    (225193 'end of statement')
    unknown call_tmp[711148] "expr temp" "maybe param" "maybe type" "temp"
    (711151 'move' call_tmp[711148](225197 call == i[225190] 0))
    unknown call_tmp[711153] "expr temp" "maybe param" "maybe type" "temp"
    (711156 'move' call_tmp[711153](225242 call _cond_test call_tmp[711148]))
    if call_tmp[711153]
    {
      unknown call_tmp[711158] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711161 'move' call_tmp[711158](465025 'typeof' x[225160]))
      unknown call_tmp[711163] "expr temp" "maybe param" "maybe type" "temp"
      (711166 'move' call_tmp[711163](225238 call _cast string[26] call_tmp[711158]))
      (225240 call compilerError "field " s[225166] " not found in " call_tmp[711163])
    }
    unknown call_tmp[711168] "expr temp" "maybe param" "maybe type" "temp"
    (711171 'move' call_tmp[711168](225251 'field by num' x[225160] i[225190]))
    (532989 'move' ret[532984](532988 'addr of' call_tmp[711168]))
    (532986 return ret[532984])
  }
  function isImplementedWithRecords[225260](arg t[225258]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[532993] "RVV" "param" "temp"
    unknown tmp[431893] "maybe param" "temp"
    (431904 'move' tmp[431893](225265 call isRangeType t[225258]))
    unknown call_tmp[711173] "expr temp" "maybe param" "maybe type" "temp"
    (711176 'move' call_tmp[711173](431906 call _cond_invalid tmp[431893]))
    if call_tmp[711173]
    {
      (431909 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[576033] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576034] "maybe param" "temp"
    unknown call_tmp[711178] "expr temp" "maybe param" "maybe type" "temp"
    (711181 'move' call_tmp[711178](431894 call isTrue tmp[431893]))
    (576039 'move' tmp[576034](576037 call _cond_test call_tmp[711178]))
    if tmp[576034]
    {
      (576044 'move' tmp[576033](576041 '_paramFoldLogical' tmp[576034] 1))
    }
    {
      unknown tmp[576046] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711183] "expr temp" "maybe param" "maybe type" "temp"
      (711186 'move' call_tmp[711183](225269 call isStringType t[225258]))
      (576048 'move' tmp[576046](431898 call isTrue call_tmp[711183]))
      (576053 'move' tmp[576033](576050 '_paramFoldLogical' tmp[576034] tmp[576046]))
    }
    (532998 'move' ret[532993](532997 'deref' tmp[576033]))
    (532995 return ret[532993])
  }
  function numImplementationFields[225281](arg t[225279]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[533002] "RVV" "param" "temp"
    unknown call_tmp[711188] "expr temp" "maybe param" "maybe type" "temp"
    (711191 'move' call_tmp[711188](225291 'num fields' t[225279]))
    (533008 'move' ret[533002](533007 'coerce' call_tmp[711188] int(64)[13]))
    (533004 return ret[533002])
  }
  where {
    (225287 call isImplementedWithRecords t[225279])
  }
  { scopeless type
    int(64)[13]
  }
  function getImplementationField[225306](const  ref arg x[225303]:_any[178](?), param arg i[225309]:int(64)[13]) type : _unknown[51] "no doc"
  {
    unknown ret[533012] "RVV" "temp" "type variable"
    unknown call_tmp[711193] "expr temp" "maybe param" "maybe type" "temp"
    (711196 'move' call_tmp[711193](225330 'field by num' x[225303] i[225309]))
    (533017 'move' ret[533012](533016 'deref' call_tmp[711193]))
    (533014 return ret[533012])
  }
  where {
    unknown tmp[431914] "maybe param" "temp"
    unknown call_tmp[711198] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711201 'move' call_tmp[711198](465027 'typeof' x[225303]))
    (431925 'move' tmp[431914](225315 call isImplementedWithRecords call_tmp[711198]))
    unknown call_tmp[711203] "expr temp" "maybe param" "maybe type" "temp"
    (711206 'move' call_tmp[711203](431927 call _cond_invalid tmp[431914]))
    if call_tmp[711203]
    {
      (431930 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576060] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576061] "maybe param" "temp"
    unknown call_tmp[711208] "expr temp" "maybe param" "maybe type" "temp"
    (711211 'move' call_tmp[711208](431915 call isTrue tmp[431914]))
    (576066 'move' tmp[576061](576064 call _cond_test call_tmp[711208]))
    if tmp[576061]
    {
      unknown tmp[576068] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711213] "expr temp" "maybe param" "maybe type" "temp"
      (711216 'move' call_tmp[711213](225321 'field by num' x[225303] i[225309]))
      unknown call_tmp[711218] "expr temp" "maybe param" "maybe type" "temp"
      (711221 'move' call_tmp[711218](225323 call isType call_tmp[711213]))
      (576070 'move' tmp[576068](431918 call isTrue call_tmp[711218]))
      (576075 'move' tmp[576060](576072 '_paramFoldLogical' tmp[576061] tmp[576068]))
    }
    {
      (576080 'move' tmp[576060](576077 '_paramFoldLogical' tmp[576061] 0))
    }
    (748409 call chpl_statementLevelSymbol tmp[576060])
  }
  function getImplementationField[225344](const  ref arg x[225341]:_any[178](?), param arg i[225347]:int(64)[13]) param : _unknown[51] "no doc"
  {
    unknown ret[533021] "RVV" "param" "temp"
    unknown call_tmp[711223] "expr temp" "maybe param" "maybe type" "temp"
    (711226 'move' call_tmp[711223](225368 'field by num' x[225341] i[225347]))
    (533026 'move' ret[533021](533025 'deref' call_tmp[711223]))
    (533023 return ret[533021])
  }
  where {
    unknown tmp[431935] "maybe param" "temp"
    unknown call_tmp[711228] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711231 'move' call_tmp[711228](465029 'typeof' x[225341]))
    (431946 'move' tmp[431935](225353 call isImplementedWithRecords call_tmp[711228]))
    unknown call_tmp[711233] "expr temp" "maybe param" "maybe type" "temp"
    (711236 'move' call_tmp[711233](431948 call _cond_invalid tmp[431935]))
    if call_tmp[711233]
    {
      (431951 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576087] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576088] "maybe param" "temp"
    unknown call_tmp[711238] "expr temp" "maybe param" "maybe type" "temp"
    (711241 'move' call_tmp[711238](431936 call isTrue tmp[431935]))
    (576093 'move' tmp[576088](576091 call _cond_test call_tmp[711238]))
    if tmp[576088]
    {
      unknown tmp[576095] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711243] "expr temp" "maybe param" "maybe type" "temp"
      (711246 'move' call_tmp[711243](225359 'field by num' x[225341] i[225347]))
      unknown call_tmp[711248] "expr temp" "maybe param" "maybe type" "temp"
      (711251 'move' call_tmp[711248](225361 call isParam call_tmp[711243]))
      (576097 'move' tmp[576095](431939 call isTrue call_tmp[711248]))
      (576102 'move' tmp[576087](576099 '_paramFoldLogical' tmp[576088] tmp[576095]))
    }
    {
      (576107 'move' tmp[576087](576104 '_paramFoldLogical' tmp[576088] 0))
    }
    (748411 call chpl_statementLevelSymbol tmp[576087])
  }
  function getImplementationField[225382](const  ref arg x[225379]:_any[178](?), param arg i[225385]:int(64)[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    unknown ret[533030] "RVV" "temp"
    unknown call_tmp[711253] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711256 'move' call_tmp[711253](465031 'typeof' x[225379]))
    unknown call_tmp[711258] "expr temp" "maybe param" "maybe type" "temp"
    (711261 'move' call_tmp[711258](225391 call isImplementedWithRecords call_tmp[711253]))
    unknown call_tmp[711263] "expr temp" "maybe param" "maybe type" "temp"
    (711266 'move' call_tmp[711263](225392 call ! call_tmp[711258]))
    unknown call_tmp[711268] "expr temp" "maybe param" "maybe type" "temp"
    (711271 'move' call_tmp[711268](225436 call _cond_test call_tmp[711263]))
    if call_tmp[711268]
    {
      unknown call_tmp[711273] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711276 'move' call_tmp[711273](465033 'typeof' x[225379]))
      unknown call_tmp[711278] "expr temp" "maybe param" "maybe type" "temp"
      (711281 'move' call_tmp[711278](225415 call _cast string[26] call_tmp[711273]))
      (225434 call compilerError "an argument of the type " call_tmp[711278] " is not valid for getImplementationField()")
    }
    unknown call_tmp[711283] "expr temp" "maybe param" "maybe type" "temp"
    (711286 'move' call_tmp[711283](225446 'field by num' x[225379] i[225385]))
    (533035 'move' ret[533030](533034 'addr of' call_tmp[711283]))
    (533032 return ret[533030])
  }
  function getFieldRef[225458](ref arg x[225455]:_any[178](?), param arg i[225461]:int(64)[13]) ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[533039] "RVV" "temp"
    unknown call_tmp[711288] "expr temp" "maybe param" "maybe type" "temp"
    (711291 'move' call_tmp[711288](225469 call + i[225461] 1))
    unknown call_tmp[711293] "expr temp" "maybe param" "maybe type" "temp"
    (711296 'move' call_tmp[711293](225471 'field by num' x[225455] call_tmp[711288]))
    (533044 'move' ret[533039](533043 'addr of' call_tmp[711293]))
    (533041 return ret[533039])
  }
  function getFieldRef[225484](ref arg x[225481]:_any[178](?), param arg s[225487]:string[26]) ref : _unknown[51] "unsafe"
  {
    unknown ret[533048] "RVV" "temp"
    unknown call_tmp[711298] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711301 'move' call_tmp[711298](465035 'typeof' x[225481]))
    unknown call_tmp[711303] "maybe param" "maybe type" "temp"
    (711306 'move' call_tmp[711303](225494 'field name to num' call_tmp[711298] s[225487]))
    unknown i[225495] "dead at end of block" "param"
    (546568 'init var' i[225495] call_tmp[711303])
    (225498 'end of statement')
    unknown call_tmp[711308] "expr temp" "maybe param" "maybe type" "temp"
    (711311 'move' call_tmp[711308](225502 call == i[225495] 0))
    unknown call_tmp[711313] "expr temp" "maybe param" "maybe type" "temp"
    (711316 'move' call_tmp[711313](225515 call _cond_test call_tmp[711308]))
    if call_tmp[711313]
    {
      unknown call_tmp[711318] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711321 'move' call_tmp[711318](465037 'typeof' x[225481]))
      unknown call_tmp[711323] "expr temp" "maybe param" "maybe type" "temp"
      (711326 'move' call_tmp[711323](225511 call _cast string[26] call_tmp[711318]))
      (225513 call compilerError "field " s[225487] " not found in " call_tmp[711323])
    }
    unknown call_tmp[711328] "expr temp" "maybe param" "maybe type" "temp"
    (711331 'move' call_tmp[711328](225524 'field by num' x[225481] i[225495]))
    (533053 'move' ret[533048](533052 'addr of' call_tmp[711328]))
    (533050 return ret[533048])
  }
  function getFieldIndex[225533](arg t[225531]:_any[178](?), param arg s[225536]:string[26]) param : _unknown[51]
  {
    unknown ret[533057] "RVV" "param" "temp"
    unknown call_tmp[711333] "expr temp" "maybe param" "maybe type" "temp"
    (711336 'move' call_tmp[711333](225545 call checkQueryT t[225531]))
    unknown call_tmp[711338] "expr temp" "maybe param" "maybe type" "temp"
    (711341 'move' call_tmp[711338](225547 'field name to num' call_tmp[711333] s[225536]))
    unknown call_tmp[711343] "expr temp" "maybe param" "maybe type" "temp"
    (711346 'move' call_tmp[711343](225549 call - call_tmp[711338] 1))
    (533063 'move' ret[533057](533062 'coerce' call_tmp[711343] int(64)[13]))
    (533059 return ret[533057])
  }
  { scopeless type
    int(64)[13]
  }
  function hasField[225561](arg t[225559]:_any[178](?), param arg s[225564]:string[26]) param : _unknown[51]
  {
    unknown ret[533067] "RVV" "param" "temp"
    unknown call_tmp[711348] "expr temp" "maybe param" "maybe type" "temp"
    (711351 'move' call_tmp[711348](225572 call getFieldIndex t[225559] s[225564]))
    unknown call_tmp[711353] "expr temp" "maybe param" "maybe type" "temp"
    (711356 'move' call_tmp[711353](225574 call >= call_tmp[711348] 0))
    (533073 'move' ret[533067](533072 'coerce' call_tmp[711353] bool[10]))
    (533069 return ret[533067])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225586](arg t[225584]:_any[178](?), param arg i[225589]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[533077] "RVV" "param" "temp"
    unknown call_tmp[711358] "expr temp" "maybe param" "maybe type" "temp"
    (711361 'move' call_tmp[711358](225614 call checkQueryT t[225584]))
    unknown call_tmp[711363] "expr temp" "maybe param" "maybe type" "temp"
    (711366 'move' call_tmp[711363](225619 call checkQueryT t[225584]))
    unknown call_tmp[711368] "expr temp" "maybe param" "maybe type" "temp"
    (711371 'move' call_tmp[711368](225622 call getFieldName call_tmp[711363] i[225589]))
    unknown call_tmp[711373] "expr temp" "maybe param" "maybe type" "temp"
    (711376 'move' call_tmp[711373](225623 'is bound' call_tmp[711358] call_tmp[711368]))
    (533083 'move' ret[533077](533082 'coerce' call_tmp[711373] bool[10]))
    (533079 return ret[533077])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225634](arg t[225632]:_any[178](?), param arg s[225637]:string[26]) param : _unknown[51]
  {
    unknown ret[533087] "RVV" "param" "temp"
    unknown call_tmp[711378] "expr temp" "maybe param" "maybe type" "temp"
    (711381 'move' call_tmp[711378](225646 call checkQueryT t[225632]))
    unknown call_tmp[711383] "expr temp" "maybe param" "maybe type" "temp"
    (711386 'move' call_tmp[711383](225648 'is bound' call_tmp[711378] s[225637]))
    (533093 'move' ret[533087](533092 'coerce' call_tmp[711383] bool[10]))
    (533089 return ret[533087])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225661](param arg fname[225658]:string[26]) param : _unknown[51]
  {
    unknown ret[533097] "RVV" "param" "temp"
    unknown call_tmp[711388] "expr temp" "maybe param" "maybe type" "temp"
    (711391 'move' call_tmp[711388](225683 'call and fn resolves' fname[225658]))
    (533103 'move' ret[533097](533102 'coerce' call_tmp[711388] bool[10]))
    (533099 return ret[533097])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225696](param arg fname[225693]:string[26], arg args[225699]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533107] "RVV" "param" "temp"
    unknown call_tmp[711393] "expr temp" "maybe param" "maybe type" "temp"
    (711396 'move' call_tmp[711393](225708 'call and fn resolves' fname[225693](225707 'expand_tuple' args[225699])))
    (533113 'move' ret[533107](533112 'coerce' call_tmp[711393] bool[10]))
    (533109 return ret[533107])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225719](arg obj[225717]:_any[178](?), param arg fname[225722]:string[26]) param : _unknown[51]
  {
    unknown ret[533117] "RVV" "param" "temp"
    unknown call_tmp[711398] "expr temp" "maybe param" "maybe type" "temp"
    (711401 'move' call_tmp[711398](225746 'method call and fn resolves' obj[225717] fname[225722]))
    (533123 'move' ret[533117](533122 'coerce' call_tmp[711398] bool[10]))
    (533119 return ret[533117])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225757](arg obj[225755]:_any[178](?), param arg fname[225760]:string[26], arg args[225764]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533127] "RVV" "param" "temp"
    unknown call_tmp[711403] "expr temp" "maybe param" "maybe type" "temp"
    (711406 'move' call_tmp[711403](225774 'method call and fn resolves' obj[225755] fname[225760](225773 'expand_tuple' args[225764])))
    (533133 'move' ret[533127](533132 'coerce' call_tmp[711403] bool[10]))
    (533129 return ret[533127])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225785](arg t[225783]:_any[178](?), param arg fname[225788]:string[26]) param : _unknown[51]
  {
    unknown ret[533137] "RVV" "param" "temp"
    unknown call_tmp[711408] "expr temp" "maybe param" "maybe type" "temp"
    (711411 'move' call_tmp[711408](225796 'method call and fn resolves' t[225783] fname[225788]))
    (533143 'move' ret[533137](533142 'coerce' call_tmp[711408] bool[10]))
    (533139 return ret[533137])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225807](arg t[225805]:_any[178](?), param arg fname[225810]:string[26], arg args[225814]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533147] "RVV" "param" "temp"
    unknown call_tmp[711413] "expr temp" "maybe param" "maybe type" "temp"
    (711416 'move' call_tmp[711413](225824 'method call and fn resolves' t[225805] fname[225810](225823 'expand_tuple' args[225814])))
    (533153 'move' ret[533147](533152 'coerce' call_tmp[711413] bool[10]))
    (533149 return ret[533147])
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[225833]() param : _unknown[51] "get line number" "no return value for void"
  {
    unknown ret[533157] "RVV" "param" "temp"
    (533159 return ret[533157])
  }
  { scopeless type
    int(64)[13]
  }
  function getFileName[225842]() param : _unknown[51] "get file name" "no return value for void"
  {
    unknown ret[533163] "RVV" "param" "temp"
    (533165 return ret[533163])
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[225851]() param : _unknown[51] "get function name" "no return value for void"
  {
    unknown ret[533169] "RVV" "param" "temp"
    (533171 return ret[533169])
  }
  { scopeless type
    string[26]
  }
  function getModuleName[225860]() param : _unknown[51] "get module name" "no return value for void"
  {
    unknown ret[533175] "RVV" "param" "temp"
    (533177 return ret[533175])
  }
  { scopeless type
    string[26]
  }
  (355356 'used modules list'(353063 'use' ChapelStandard[20264]))
}