AST dump for ExternalArray after pass removeUnnecessaryAutoCopyCalls.
Module use list: ChapelStandard HaltWrappers 

{
  function chpl__init_ExternalArray[416059]() : void[4] "insert line file info" "module init" "resolved"
  {
    (524336 return _void[55])
  }
  function _ref(chpl_opaque_array)[967640]._instance[821463](ref arg this[821467]:_ref(chpl_opaque_array)[967640]) ref : _ref(c_void_ptr)[938122] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this" "resolved"
  {
    ref ret[821477]:_ref(c_void_ptr)[938122] "dead after last mention" "RVV" "temp"
    ref call_tmp[821484]:_ref(c_void_ptr)[938122] "dead after last mention" "maybe param" "temp"
    (821487 'move' call_tmp[821484](821471 '.' this[821467] _instance[188565]))
    (821482 'move' ret[821477] call_tmp[821484])
    (821479 return ret[821477])
  }
  function _ref(chpl_opaque_array)[967640]._unowned[821489](ref arg this[821493]:_ref(chpl_opaque_array)[967640]) ref : _ref(bool)[937199] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this" "resolved"
  {
    ref ret[821503]:_ref(bool)[937199] "dead after last mention" "RVV" "temp"
    ref call_tmp[821510]:_ref(bool)[937199] "dead after last mention" "maybe param" "temp"
    (821513 'move' call_tmp[821510](821497 '.' this[821493] _unowned[188570]))
    (821508 'move' ret[821503] call_tmp[821510])
    (821505 return ret[821503])
  }
  type chpl_opaque_array[188575] val _pid[188560]:int(64)[13] const-val _instance[188565]:c_void_ptr[149] const-val _unowned[188570]:bool[10]
  function chpl_call_free_func[188662](const in arg func[188659]:c_void_ptr[149], const in arg elts[188665]:c_void_ptr[149]) : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (524199 return _void[55])
  }
  function cleanupOpaqueArray[189647](const  ref arg arr[189644]:_ref(chpl_opaque_array)[967640]) : void[4] "export" "local args" "resolved" "no return value for void"
  {
    ref call_tmp[691637]:_ref(c_void_ptr)[938122] "dead at end of block" "maybe param" "reference to a const" "temp"
    (691640 'move' call_tmp[691637](189650 call _instance[821463] arr[189644]))
    val call_tmp[691642]:BaseArr[149541] "dead at end of block" "maybe param" "temp"
    const-val coerce_tmp[1441605]:c_void_ptr[149] "dead at end of block" "coerce temp" "insert auto destroy" "temp"
    (1441609 'move' coerce_tmp[1441605](1441607 'deref' call_tmp[691637]))
    (691645 'move' call_tmp[691642](189656 call _cast[1441578] coerce_tmp[1441605]))
    val cleanup[189658]:BaseArr[149541] "dead at end of block" "insert auto destroy"
    (545546 'move' cleanup[189658] call_tmp[691642])
    const-val call_tmp[691647]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    val coerce_tmp[1441641]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (1441646 'move' coerce_tmp[1441641](1441643 'cast' object[22] cleanup[189658]))
    (691650 'move' call_tmp[691647](189675 call _cond_test[9881] coerce_tmp[1441641]))
    if call_tmp[691647]
    {
      ref call_tmp[691654]:_ref(bool)[937199] "dead after last mention" "maybe param" "reference to a const" "temp"
      (691657 'move' call_tmp[691654](189666 call _unowned[821489] arr[189644]))
      val call_tmp[691659]:BaseArr[149541] "dead after last mention" "expr temp" "maybe param" "temp"
      (691662 'move' call_tmp[691659] cleanup[189658])
      const-val coerce_tmp[1442539]:bool[10] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1442543 'move' coerce_tmp[1442539](1442541 'deref' call_tmp[691654]))
      (189673 call _do_destroy_arr[1441939] coerce_tmp[1442539] call_tmp[691659] 1)
    }
    (524334 return _void[55])
  }
}