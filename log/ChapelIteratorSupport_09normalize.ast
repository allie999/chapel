AST dump for ChapelIteratorSupport after pass normalize.
Module use list: ChapelStandard Reflection 

{
  function chpl__init_ChapelIteratorSupport[415853]() : void[4] "insert line file info" "module init"
  {
    (507873 return _void[55])
  }
  function iteratorIndex[52132](arg ic[52129]:_iteratorClass[208](?)) : _unknown[51] "allow ref" "no doc" "fn returns iterator"
  {
    unknown ret[506771] "RVV" "temp"
    (52141 call(52137 call (partial) advance _mt[243] ic[52129]))
    (474455 'end of statement')
    (506775 'move' ret[506771](52151 call(52147 call (partial) getValue _mt[243] ic[52129])))
    (506773 return ret[506771])
  }
  function iteratorIndex[52162](arg t[52159]:_tuple[56199](?)) : _unknown[51] "expand tuples with values" "no doc" "fn returns iterator"
  {
    unknown ret[506793] "RVV" "temp"
    function iteratorIndexHelp[52170](arg t[52167]:_tuple[56199](?), param arg dim[52173]:int(64)[13]) : _unknown[51] "expand tuples with values"
    {
      unknown ret[506779] "RVV" "temp"
      unknown call_tmp[609214] "expr temp" "maybe param" "maybe type" "temp"
      (609217 'move' call_tmp[609214](52178 call size _mt[243] t[52167]))
      unknown call_tmp[609219] "expr temp" "maybe param" "maybe type" "temp"
      (609222 'move' call_tmp[609219](52182 call - call_tmp[609214] 1))
      unknown call_tmp[609224] "expr temp" "maybe param" "maybe type" "temp"
      (609227 'move' call_tmp[609224](52184 call == dim[52173] call_tmp[609219]))
      unknown call_tmp[609229] "expr temp" "maybe param" "maybe type" "temp"
      (609232 'move' call_tmp[609229](52219 call _cond_test call_tmp[609224]))
      if call_tmp[609229]
      {
        unknown call_tmp[609234] "expr temp" "maybe param" "maybe type" "temp"
        (609237 'move' call_tmp[609234](52191 call t[52167] dim[52173]))
        unknown call_tmp[609239] "expr temp" "maybe param" "maybe type" "temp"
        (609242 'move' call_tmp[609239](52193 call iteratorIndex call_tmp[609234]))
        (506783 'move' ret[506779](52195 call _build_tuple_always_allow_ref call_tmp[609239]))
        gotoReturn _end_iteratorIndexHelp[506777] _end_iteratorIndexHelp[506777]
      }
      {
        unknown call_tmp[609244] "expr temp" "maybe param" "maybe type" "temp"
        (609247 'move' call_tmp[609244](52203 call t[52167] dim[52173]))
        unknown call_tmp[609249] "expr temp" "maybe param" "maybe type" "temp"
        (609252 'move' call_tmp[609249](52205 call iteratorIndex call_tmp[609244]))
        unknown call_tmp[609254] "expr temp" "maybe param" "maybe type" "temp"
        (609257 'move' call_tmp[609254](52212 call + dim[52173] 1))
        unknown call_tmp[609259] "expr temp" "maybe param" "maybe type" "temp"
        (609262 'move' call_tmp[609259](52214 call iteratorIndexHelp t[52167] call_tmp[609254]))
        (506787 'move' ret[506779](52216 call _build_tuple_always_allow_ref call_tmp[609249](52215 'expand_tuple' call_tmp[609259])))
        gotoReturn _end_iteratorIndexHelp[506777] _end_iteratorIndexHelp[506777]
      }
      label _end_iteratorIndexHelp[506777]
      (506781 return ret[506779])
    }
    (506797 'move' ret[506793](52233 call iteratorIndexHelp t[52159] 0))
    (506795 return ret[506793])
  }
  function iteratorIndexType[52242](arg x[52240]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[506801] "RVV" "temp" "type variable"
    unknown call_tmp[609264] "expr temp" "maybe param" "maybe type" "temp"
    (609267 'move' call_tmp[609264](52247 call isArray x[52240]))
    unknown call_tmp[609269] "expr temp" "maybe param" "maybe type" "temp"
    (609272 'move' call_tmp[609269](52320 call _cond_test call_tmp[609264]))
    if call_tmp[609269]
    {
      unknown call_tmp[609276] "expr temp" "maybe param" "maybe type" "temp"
      (609279 'move' call_tmp[609276](52249 call eltType _mt[243] x[52240]))
      (506806 'move' ret[506801](506805 'deref' call_tmp[609276]))
      gotoReturn _end_iteratorIndexType[506799] _end_iteratorIndexType[506799]
    }
    {
      unknown call_tmp[609281] "expr temp" "maybe param" "maybe type" "temp"
      (609284 'move' call_tmp[609281](52258 call isDomain x[52240]))
      unknown call_tmp[609286] "expr temp" "maybe param" "maybe type" "temp"
      (609289 'move' call_tmp[609286](52316 call _cond_test call_tmp[609281]))
      if call_tmp[609286]
      {
        unknown tmp[554289] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[554290] "maybe param" "temp"
        unknown call_tmp[609293] "expr temp" "maybe param" "maybe type" "temp"
        (609296 'move' call_tmp[609293](52262 call rank _mt[243] x[52240]))
        unknown call_tmp[609298] "expr temp" "maybe param" "maybe type" "temp"
        (609301 'move' call_tmp[609298](52266 call == call_tmp[609293] 1))
        (554295 'move' tmp[554290](554293 call _cond_test call_tmp[609298]))
        if tmp[554290]
        {
          unknown tmp[554297] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (554299 'move' tmp[554297](52271 call idxType _mt[243] x[52240]))
          (554304 'move' tmp[554289](554301 '_paramFoldLogical' tmp[554290] tmp[554297]))
        }
        {
          unknown tmp[554306] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[609307] "expr temp" "maybe param" "maybe type" "temp"
          (609310 'move' call_tmp[609307](52275 call rank _mt[243] x[52240]))
          unknown call_tmp[609314] "expr temp" "maybe param" "maybe type" "temp"
          (609317 'move' call_tmp[609314](52279 call idxType _mt[243] x[52240]))
          (554308 'move' tmp[554306](52282 call * call_tmp[609307] call_tmp[609314]))
          (554313 'move' tmp[554289](554310 '_paramFoldLogical' tmp[554290] tmp[554306]))
        }
        (506811 'move' ret[506801](506810 'deref' tmp[554289]))
        gotoReturn _end_iteratorIndexType[506799] _end_iteratorIndexType[506799]
      }
      {
        unknown call_tmp[609319] "maybe param" "maybe type" "temp"
        (609322 'move' call_tmp[609319](52293 call _getIterator x[52240]))
        unknown ic[52294] "dead at end of block" "insert auto destroy" "no copy"
        (540626 'init var' ic[52294] call_tmp[609319])
        (52297 'end of statement')
        unknown call_tmp[609324] "maybe param" "maybe type" "temp"
        (609327 'move' call_tmp[609324](52302 call iteratorIndex ic[52294]))
        unknown i[52303] "dead at end of block" "insert auto destroy" "no copy"
        (540628 'init var' i[52303] call_tmp[609324])
        (52306 'end of statement' ic[52294])
        (52310 call _freeIterator ic[52294])
        (474463 'end of statement' ic[52294])
        unknown call_tmp[609329] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (609332 'move' call_tmp[609329](52313 'typeof' i[52303]))
        (506816 'move' ret[506801](506815 'deref' call_tmp[609329]))
        gotoReturn _end_iteratorIndexType[506799] _end_iteratorIndexType[506799]
        (474465 'end of statement' i[52303])
      }
    }
    label _end_iteratorIndexType[506799]
    (506803 return ret[506801])
  }
  function iteratorIndexTypeZip[52334](arg xs[52331]:_any[178](?) ...) type : _unknown[51] "no doc"
  {
    unknown ret[506838] "RVV" "temp" "type variable"
    function iteratorIndexTypeZipHelp[52340](param arg dim[52338]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[506822] "RVV" "temp" "type variable"
      unknown call_tmp[609336] "expr temp" "maybe param" "maybe type" "temp"
      (609339 'move' call_tmp[609336](52344 call size _mt[243] xs[52331]))
      unknown call_tmp[609341] "expr temp" "maybe param" "maybe type" "temp"
      (609344 'move' call_tmp[609341](52348 call - call_tmp[609336] 1))
      unknown call_tmp[609346] "expr temp" "maybe param" "maybe type" "temp"
      (609349 'move' call_tmp[609346](52350 call == dim[52338] call_tmp[609341]))
      unknown call_tmp[609351] "expr temp" "maybe param" "maybe type" "temp"
      (609354 'move' call_tmp[609351](52383 call _cond_test call_tmp[609346]))
      if call_tmp[609351]
      {
        unknown call_tmp[609356] "expr temp" "maybe param" "maybe type" "temp"
        (609359 'move' call_tmp[609356](52356 call xs[52331] dim[52338]))
        unknown call_tmp[609361] "expr temp" "maybe param" "maybe type" "temp"
        (609364 'move' call_tmp[609361](52358 call iteratorIndexType call_tmp[609356]))
        unknown call_tmp[609366] "expr temp" "maybe param" "maybe type" "temp"
        (609369 'move' call_tmp[609366](52359 call _build_tuple call_tmp[609361]))
        (506827 'move' ret[506822](506826 'deref' call_tmp[609366]))
        gotoReturn _end_iteratorIndexTypeZipHelp[506820] _end_iteratorIndexTypeZipHelp[506820]
      }
      {
        unknown call_tmp[609371] "expr temp" "maybe param" "maybe type" "temp"
        (609374 'move' call_tmp[609371](52367 call xs[52331] dim[52338]))
        unknown call_tmp[609376] "expr temp" "maybe param" "maybe type" "temp"
        (609379 'move' call_tmp[609376](52369 call iteratorIndexType call_tmp[609371]))
        unknown call_tmp[609381] "expr temp" "maybe param" "maybe type" "temp"
        (609384 'move' call_tmp[609381](52373 call + dim[52338] 1))
        unknown call_tmp[609386] "expr temp" "maybe param" "maybe type" "temp"
        (609389 'move' call_tmp[609386](52376 call iteratorIndexTypeZipHelp call_tmp[609381]))
        unknown call_tmp[609391] "expr temp" "maybe param" "maybe type" "temp"
        (609394 'move' call_tmp[609391](52379 call _build_tuple call_tmp[609376](52377 'expand_tuple' call_tmp[609386])))
        (506832 'move' ret[506822](506831 'deref' call_tmp[609391]))
        gotoReturn _end_iteratorIndexTypeZipHelp[506820] _end_iteratorIndexTypeZipHelp[506820]
      }
      label _end_iteratorIndexTypeZipHelp[506820]
      (506824 return ret[506822])
    }
    unknown call_tmp[609396] "expr temp" "maybe param" "maybe type" "temp"
    (609399 'move' call_tmp[609396](52396 call iteratorIndexTypeZipHelp 0))
    (506843 'move' ret[506838](506842 'deref' call_tmp[609396]))
    (506840 return ret[506838])
  }
  function iteratorToArrayElementType[52407](arg t[52404]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[506847] "RVV" "temp" "type variable"
    unknown call_tmp[609401] "expr temp" "maybe param" "maybe type" "temp"
    (609404 'move' call_tmp[609401](52430 'scalar promotion type' t[52404]))
    unknown call_tmp[609406] "expr temp" "maybe param" "maybe type" "temp"
    (609409 'move' call_tmp[609406](52432 call chpl_buildStandInRTT call_tmp[609401]))
    unknown call_tmp[609411] "expr temp" "maybe param" "maybe type" "temp"
    (609414 'move' call_tmp[609411](52434 call chpl__unref call_tmp[609406]))
    (506852 'move' ret[506847](506851 'deref' call_tmp[609411]))
    (506849 return ret[506847])
  }
  function chpl_buildStandInRTT[52446](arg domType[52443]:_domain[125902](?)) type : _unknown[51] "unsafe"
  {
    unknown ret[506856] "RVV" "temp" "type variable"
    unknown instanceObj[52485] "dead at end of block" "insert auto destroy"
    unknown call_tmp[609416] "expr temp" "maybe param" "maybe type" "temp"
    (609419 'move' call_tmp[609416](52484 'static field type' domType[52443] "_instance"))
    (540630 'default init var' instanceObj[52485] call_tmp[609416])
    (52488 'end of statement')
    unknown call_tmp[609421] "expr temp" "maybe param" "maybe type" "temp"
    (609424 'move' call_tmp[609421](52493 call chpl_buildStandInRTT instanceObj[52485]))
    (506861 'move' ret[506856](506860 'deref' call_tmp[609421]))
    gotoReturn _end_chpl_buildStandInRTT[506854] _end_chpl_buildStandInRTT[506854]
    (474471 'end of statement' instanceObj[52485])
    label _end_chpl_buildStandInRTT[506854]
    (506858 return ret[506856])
  }
  function chpl_buildStandInRTT[52506](arg arrType[52503]:_array[133588](?)) type : _unknown[51] "unsafe"
  {
    unknown ret[506867] "RVV" "temp" "type variable"
    unknown arrInstType[52513] "dead at end of block" "insert auto destroy" "type variable"(52512 'static field type' arrType[52503] "_instance")
    (540635 'move' arrInstType[52513](540632 'static field type' arrType[52503] "_instance"))
    unknown domInstType[52538] "dead at end of block" "insert auto destroy" "type variable"(52537 'static field type' arrInstType[52513] "dom")
    (540640 'move' domInstType[52538](540637 'static field type' arrInstType[52513] "dom"))
    unknown domInstance[52542] "dead at end of block" "insert auto destroy"
    (540642 'default init var' domInstance[52542] domInstType[52538])
    (52545 'end of statement')
    unknown standinDomain[52550] "dead at end of block" "no auto destroy"
    unknown call_tmp[609426] "expr temp" "maybe param" "maybe type" "temp"
    (609429 'move' call_tmp[609426](52549 call chpl_buildStandInRTT domInstance[52542]))
    (540644 'default init var' standinDomain[52550] call_tmp[609426])
    (52553 'end of statement')
    unknown instanceObj[52555] "dead at end of block" "insert auto destroy"
    (540646 'default init var' instanceObj[52555] arrInstType[52513])
    (52558 'end of statement' arrInstType[52513] domInstType[52538] domInstance[52542] arrInstType[52513])
    unknown call_tmp[609433] "expr temp" "maybe param" "maybe type" "temp"
    (609436 'move' call_tmp[609433](52578 call eltType _mt[243] instanceObj[52555]))
    unknown instanceEltType[52582] "dead at end of block" "insert auto destroy" "type variable"(52581 'static typeof' call_tmp[609433])
    unknown call_tmp[609440] "expr temp" "maybe param" "maybe type" "temp"
    (609443 'move' call_tmp[609440](540650 call eltType _mt[243] instanceObj[52555]))
    (540653 'move' instanceEltType[52582](540648 'static typeof' call_tmp[609440]))
    (474477 'end of statement' instanceObj[52555])
    unknown call_tmp[609445] "expr temp" "maybe param" "maybe type" "temp"
    (609448 'move' call_tmp[609445](52591 call chpl_buildStandInRTT instanceEltType[52582]))
    unknown call_tmp[609450] "expr temp" "maybe param" "maybe type" "temp"
    (609453 'move' call_tmp[609450](52592 call chpl__buildArrayRuntimeType standinDomain[52550] call_tmp[609445]))
    (506872 'move' ret[506867](506871 'deref' call_tmp[609450]))
    gotoReturn _end_chpl_buildStandInRTT[506865] _end_chpl_buildStandInRTT[506865]
    (474479 'end of statement' standinDomain[52550] instanceEltType[52582])
    label _end_chpl_buildStandInRTT[506865]
    (506869 return ret[506867])
  }
  function chpl_buildStandInRTT[52603](arg irType[52600]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[506899] "RVV" "temp" "type variable"
    unknown shapeType[52609] "dead at end of block" "insert auto destroy" "type variable"(52608 call chpl_iteratorShapeStaticTypeOrNothing irType[52600])
    (540658 'move' shapeType[52609](540656 call chpl_iteratorShapeStaticTypeOrNothing irType[52600]))
    function standinType[52615]() type : _unknown[51] "unsafe"
    {
      unknown ret[506878] "RVV" "temp" "type variable"
      unknown call_tmp[609455] "expr temp" "maybe param" "maybe type" "temp"
      (609458 'move' call_tmp[609455](52619 call == shapeType[52609] nothing[7]))
      unknown call_tmp[609460] "expr temp" "maybe param" "maybe type" "temp"
      (609463 'move' call_tmp[609460](52675 call _cond_test call_tmp[609455]))
      if call_tmp[609460]
      {
        unknown call_tmp[609465] "expr temp" "maybe param" "maybe type" "temp"
        (609468 'move' call_tmp[609465](52624 call chpl__buildDomainRuntimeType defaultDist[94050] 1))
        (506883 'move' ret[506878](506882 'deref' call_tmp[609465]))
        gotoReturn _end_standinType[506876] _end_standinType[506876]
      }
      {
        unknown call_tmp[609470] "expr temp" "maybe param" "maybe type" "temp"
        (609473 'move' call_tmp[609470](52632 call isRange shapeType[52609]))
        unknown call_tmp[609475] "expr temp" "maybe param" "maybe type" "temp"
        (609478 'move' call_tmp[609475](52671 call _cond_test call_tmp[609470]))
        if call_tmp[609475]
        {
          unknown call_tmp[609480] "expr temp" "maybe param" "maybe type" "temp"
          (609483 'move' call_tmp[609480](52636 call chpl__buildDomainRuntimeType defaultDist[94050] 1))
          (506888 'move' ret[506878](506887 'deref' call_tmp[609480]))
          gotoReturn _end_standinType[506876] _end_standinType[506876]
        }
        {
          unknown domInstance[52642] "dead at end of block" "insert auto destroy"
          (540660 'default init var' domInstance[52642] shapeType[52609])
          (52645 'end of statement')
          unknown tmp[418369] "maybe param" "temp"
          unknown call_tmp[609485] "expr temp" "maybe param" "maybe type" "temp"
          (609488 'move' call_tmp[609485](52651 call isDomain domInstance[52642]))
          (418380 'move' tmp[418369](52652 call ! call_tmp[609485]))
          unknown call_tmp[609490] "expr temp" "maybe param" "maybe type" "temp"
          (609493 'move' call_tmp[609490](418382 call _cond_invalid tmp[418369]))
          if call_tmp[609490]
          {
            (418385 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[554320] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[554321] "maybe param" "temp"
          unknown call_tmp[609495] "expr temp" "maybe param" "maybe type" "temp"
          (609498 'move' call_tmp[609495](418370 call isTrue tmp[418369]))
          (554326 'move' tmp[554321](554324 call _cond_test call_tmp[609495]))
          if tmp[554321]
          {
            unknown tmp[554328] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[609500] "expr temp" "maybe param" "maybe type" "temp"
            (609503 'move' call_tmp[609500](52657 call isArray domInstance[52642]))
            unknown call_tmp[609505] "expr temp" "maybe param" "maybe type" "temp"
            (609508 'move' call_tmp[609505](52658 call ! call_tmp[609500]))
            (554330 'move' tmp[554328](418373 call isTrue call_tmp[609505]))
            (554335 'move' tmp[554320](554332 '_paramFoldLogical' tmp[554321] tmp[554328]))
          }
          {
            (554340 'move' tmp[554320](554337 '_paramFoldLogical' tmp[554321] 0))
          }
          (52663 call compilerAssert tmp[554320])
          (474485 'end of statement' domInstance[52642])
          unknown call_tmp[609510] "expr temp" "maybe param" "maybe type" "temp"
          (609513 'move' call_tmp[609510](52668 call chpl_buildStandInRTT domInstance[52642]))
          (506893 'move' ret[506878](506892 'deref' call_tmp[609510]))
          gotoReturn _end_standinType[506876] _end_standinType[506876]
          (474487 'end of statement' domInstance[52642])
        }
      }
      label _end_standinType[506876]
      (506880 return ret[506878])
    }
    unknown standinDomain[52686] "dead at end of block" "no auto destroy"
    unknown call_tmp[609515] "expr temp" "maybe param" "maybe type" "temp"
    (609518 'move' call_tmp[609515](52685 call standinType))
    (540662 'default init var' standinDomain[52686] call_tmp[609515])
    (52689 'end of statement')
    unknown call_tmp[609520] "expr temp" "maybe param" "maybe type" "temp"
    (609523 'move' call_tmp[609520](52697 'scalar promotion type' irType[52600]))
    unknown call_tmp[609525] "expr temp" "maybe param" "maybe type" "temp"
    (609528 'move' call_tmp[609525](52699 call chpl_buildStandInRTT call_tmp[609520]))
    unknown call_tmp[609530] "expr temp" "maybe param" "maybe type" "temp"
    (609533 'move' call_tmp[609530](52700 call chpl__buildArrayRuntimeType standinDomain[52686] call_tmp[609525]))
    (506904 'move' ret[506899](506903 'deref' call_tmp[609530]))
    gotoReturn _end_chpl_buildStandInRTT[506897] _end_chpl_buildStandInRTT[506897]
    (474489 'end of statement' standinDomain[52686])
    label _end_chpl_buildStandInRTT[506897]
    (506901 return ret[506899])
  }
  function chpl_buildStandInRTT[52709](arg nonRTtype[52707]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[506910] "RVV" "temp" "type variable"
    (506915 'move' ret[506910](506914 'deref' nonRTtype[52707]))
    (506912 return ret[506910])
  }
  function chpl_buildStandInRTT[52721](arg domInst[52719]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[506919] "RVV" "temp" "type variable"
    unknown call_tmp[609537] "expr temp" "maybe param" "maybe type" "temp"
    (609540 'move' call_tmp[609537](52733 call rank _mt[243] domInst[52719]))
    unknown call_tmp[609544] "expr temp" "maybe param" "maybe type" "temp"
    (609547 'move' call_tmp[609544](52737 call idxType _mt[243] domInst[52719]))
    unknown call_tmp[609551] "expr temp" "maybe param" "maybe type" "temp"
    (609554 'move' call_tmp[609551](52743 call stridable _mt[243] domInst[52719]))
    unknown call_tmp[609556] "expr temp" "maybe param" "maybe type" "temp"
    (609559 'move' call_tmp[609556](52746 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[609537] call_tmp[609544] call_tmp[609551]))
    (506924 'move' ret[506919](506923 'deref' call_tmp[609556]))
    (506921 return ret[506919])
  }
  where {
    unknown call_tmp[609561] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609564 'move' call_tmp[609561](52724 'typeof' domInst[52719]))
    (52727 call <= call_tmp[609561] unmanaged DefaultRectangularDom[415313](?))
  }
  function chpl_buildStandInRTT[52757](arg domInst[52755]:_any[178](?)) type : _unknown[51] "no return value for void"
  {
    unknown call_tmp[609566] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609569 'move' call_tmp[609566](52760 'typeof' domInst[52755]))
    unknown call_tmp[609571] "expr temp" "maybe param" "maybe type" "temp"
    (609574 'move' call_tmp[609571](52763 call <= call_tmp[609566] unmanaged BaseDom[415316]))
    unknown call_tmp[609576] "expr temp" "maybe param" "maybe type" "temp"
    (609579 'move' call_tmp[609576](52835 call _cond_test call_tmp[609571]))
    if call_tmp[609576]
    {
      (52786 call compilerError "for/forall/promoted expressions are not implemented when the elements are or contain non-DefaultRectangular domains or arrays")
    }
    {
      unknown call_tmp[609581] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (609584 'move' call_tmp[609581](52810 'typeof' domInst[52755]))
      unknown call_tmp[609586] "expr temp" "maybe param" "maybe type" "temp"
      (609589 'move' call_tmp[609586](52812 call _cast string[26] call_tmp[609581]))
      (52833 call compilerError "unexpected argument of type " call_tmp[609586] " for chpl_buildStandInRTT()")
    }
    (506926 return _void[55])
  }
  function chpl_trivialLeader[52846]() : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[506930] "RVV" "temp"
    unknown yret[506934] "YVV" "temp"
    (506937 'move' yret[506934](506936 'deref' 0))
    (506939 yield yret[506934])
    (506932 return ret[506930])
  }
  function chpl_computeIteratorShape[52862](arg arg[52859]:_array[133588](?)) : _unknown[51] "inline"
  {
    unknown ret[506943] "RVV" "temp"
    unknown call_tmp[609593] "expr temp" "maybe param" "maybe type" "temp"
    (609596 'move' call_tmp[609593](52868 call _dom _mt[243] arg[52859]))
    unknown call_tmp[609598] "expr temp" "maybe param" "maybe type" "temp"
    (609601 'move' call_tmp[609598](52872 call chpl_computeIteratorShape call_tmp[609593]))
    (506948 'move' ret[506943](506947 'deref' call_tmp[609598]))
    (506945 return ret[506943])
  }
  function chpl_computeIteratorShape[52884](arg arg[52881]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[506952] "RVV" "temp"
    unknown call_tmp[609605] "expr temp" "maybe param" "maybe type" "temp"
    (609608 'move' call_tmp[609605](52887 call _instance _mt[243] arg[52881]))
    (506957 'move' ret[506952](506956 'deref' call_tmp[609605]))
    (506954 return ret[506952])
  }
  function chpl_computeIteratorShape[52904](arg arg[52901]:range[64316](?)) : _unknown[51] "inline"
  {
    unknown ret[506961] "RVV" "temp"
    (506966 'move' ret[506961](506965 'deref' arg[52901]))
    (506963 return ret[506961])
  }
  function chpl_computeIteratorShape[52918](arg arg[52915]:_iteratorRecord[205](?)) : _unknown[51] "inline"
  {
    unknown ret[506970] "RVV" "temp"
    unknown call_tmp[609610] "expr temp" "maybe param" "maybe type" "temp"
    (609613 'move' call_tmp[609610](52923 call chpl_iteratorHasShape arg[52915]))
    unknown call_tmp[609615] "expr temp" "maybe param" "maybe type" "temp"
    (609618 'move' call_tmp[609615](52941 call _cond_test call_tmp[609610]))
    if call_tmp[609615]
    {
      unknown call_tmp[609622] "expr temp" "maybe param" "maybe type" "temp"
      (609625 'move' call_tmp[609622](52927 call _shape_ _mt[243] arg[52915]))
      (506975 'move' ret[506970](506974 'deref' call_tmp[609622]))
      gotoReturn _end_chpl_computeIteratorShape[506968] _end_chpl_computeIteratorShape[506968]
    }
    {
      const myvoid[52933] "dead at end of block" "const" "insert auto destroy"
      (540664 'init var' myvoid[52933] none[57])
      (52936 'end of statement')
      (506980 'move' ret[506970](506979 'deref' myvoid[52933]))
      gotoReturn _end_chpl_computeIteratorShape[506968] _end_chpl_computeIteratorShape[506968]
      (474500 'end of statement' myvoid[52933])
    }
    label _end_chpl_computeIteratorShape[506968]
    (506972 return ret[506970])
  }
  function chpl_computeIteratorShape[52953](arg arg[52951]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[506986] "RVV" "temp"
    (506991 'move' ret[506986](506990 'deref' none[57]))
    (506988 return ret[506986])
  }
  function chpl_iteratorHasShape[52967](arg ir[52964]:_iteratorRecord[205](?)) param : _unknown[51]
  {
    unknown ret[506995] "RVV" "param" "temp"
    unknown call_tmp[609627] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609630 'move' call_tmp[609627](52971 'typeof' ir[52964]))
    unknown call_tmp[609632] "expr temp" "maybe param" "maybe type" "temp"
    (609635 'move' call_tmp[609632](52988 call hasField call_tmp[609627] "_shape_"))
    unknown call_tmp[609637] "expr temp" "maybe param" "maybe type" "temp"
    (609640 'move' call_tmp[609637](53002 call _cond_test call_tmp[609632]))
    if call_tmp[609637]
    {
      { scopeless type
        unknown call_type_tmp[491464] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609644] "expr temp" "maybe param" "maybe type" "temp"
        (609647 'move' call_tmp[609644](52990 call _shape_ _mt[243] ir[52964]))
        (491468 'move' call_type_tmp[491464](52993 'typeof' call_tmp[609644]))
      }
      unknown call_tmp[609649] "expr temp" "maybe param" "maybe type" "temp"
      (609652 'move' call_tmp[609649](52995 call != call_type_tmp[491464] void[4]))
      (507000 'move' ret[506995](506999 'deref' call_tmp[609649]))
      gotoReturn _end_chpl_iteratorHasShape[506993] _end_chpl_iteratorHasShape[506993]
    }
    {
      (507005 'move' ret[506995](507004 'deref' 0))
      gotoReturn _end_chpl_iteratorHasShape[506993] _end_chpl_iteratorHasShape[506993]
    }
    label _end_chpl_iteratorHasShape[506993]
    (506997 return ret[506995])
  }
  function chpl_iteratorHasDomainShape[53017](arg ir[53014]:_iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    unknown ret[507011] "RVV" "param" "temp"
    unknown call_tmp[609654] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609657 'move' call_tmp[609654](53021 'typeof' ir[53014]))
    unknown call_tmp[609659] "expr temp" "maybe param" "maybe type" "temp"
    (609662 'move' call_tmp[609659](53024 call hasField call_tmp[609654] "_shape_"))
    unknown call_tmp[609664] "expr temp" "maybe param" "maybe type" "temp"
    (609667 'move' call_tmp[609664](53039 call _cond_test call_tmp[609659]))
    if call_tmp[609664]
    {
      { scopeless type
        unknown call_type_tmp[491470] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609671] "expr temp" "maybe param" "maybe type" "temp"
        (609674 'move' call_tmp[609671](53027 call _shape_ _mt[243] ir[53014]))
        (491474 'move' call_type_tmp[491470](53030 'typeof' call_tmp[609671]))
      }
      unknown call_tmp[609676] "expr temp" "maybe param" "maybe type" "temp"
      (609679 'move' call_tmp[609676](354122 'is_subtype' BaseDom[372655](?) call_type_tmp[491470]))
      (507016 'move' ret[507011](507015 'deref' call_tmp[609676]))
      gotoReturn _end_chpl_iteratorHasDomainShape[507009] _end_chpl_iteratorHasDomainShape[507009]
    }
    {
      (507021 'move' ret[507011](507020 'deref' 0))
      gotoReturn _end_chpl_iteratorHasDomainShape[507009] _end_chpl_iteratorHasDomainShape[507009]
    }
    label _end_chpl_iteratorHasDomainShape[507009]
    (507013 return ret[507011])
  }
  function chpl_iteratorHasRangeShape[53054](arg ir[53051]:_iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    unknown ret[507027] "RVV" "param" "temp"
    unknown call_tmp[609681] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609684 'move' call_tmp[609681](53058 'typeof' ir[53051]))
    unknown call_tmp[609686] "expr temp" "maybe param" "maybe type" "temp"
    (609689 'move' call_tmp[609686](53061 call hasField call_tmp[609681] "_shape_"))
    unknown call_tmp[609691] "expr temp" "maybe param" "maybe type" "temp"
    (609694 'move' call_tmp[609691](53075 call _cond_test call_tmp[609686]))
    if call_tmp[609691]
    {
      { scopeless type
        unknown call_type_tmp[491476] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609698] "expr temp" "maybe param" "maybe type" "temp"
        (609701 'move' call_tmp[609698](53064 call _shape_ _mt[243] ir[53051]))
        (491480 'move' call_type_tmp[491476](53067 'typeof' call_tmp[609698]))
      }
      unknown call_tmp[609703] "expr temp" "maybe param" "maybe type" "temp"
      (609706 'move' call_tmp[609703](53069 call isRange call_type_tmp[491476]))
      (507032 'move' ret[507027](507031 'deref' call_tmp[609703]))
      gotoReturn _end_chpl_iteratorHasRangeShape[507025] _end_chpl_iteratorHasRangeShape[507025]
    }
    {
      (507037 'move' ret[507027](507036 'deref' 0))
      gotoReturn _end_chpl_iteratorHasRangeShape[507025] _end_chpl_iteratorHasRangeShape[507025]
    }
    label _end_chpl_iteratorHasRangeShape[507025]
    (507029 return ret[507027])
  }
  function chpl_iteratorShapeStaticTypeOrNothing[53090](arg ir[53087]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[507043] "RVV" "temp" "type variable"
    unknown call_tmp[609708] "expr temp" "maybe param" "maybe type" "temp"
    (609711 'move' call_tmp[609708](53096 call hasField ir[53087] "_shape_"))
    unknown call_tmp[609713] "expr temp" "maybe param" "maybe type" "temp"
    (609716 'move' call_tmp[609713](53107 call _cond_test call_tmp[609708]))
    if call_tmp[609713]
    {
      unknown call_tmp[609718] "expr temp" "maybe param" "maybe type" "temp"
      (609721 'move' call_tmp[609718](53101 'static field type' ir[53087] "_shape_"))
      (507048 'move' ret[507043](507047 'deref' call_tmp[609718]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrNothing[507041] _end_chpl_iteratorShapeStaticTypeOrNothing[507041]
    }
    {
      (507053 'move' ret[507043](507052 'deref' nothing[7]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrNothing[507041] _end_chpl_iteratorShapeStaticTypeOrNothing[507041]
    }
    label _end_chpl_iteratorShapeStaticTypeOrNothing[507041]
    (507045 return ret[507043])
  }
  function chpl_iteratorFromForExpr[53122](arg ir[53119]:_iteratorRecord[205](?)) param : _unknown[51]
  {
    unknown ret[507059] "RVV" "param" "temp"
    unknown call_tmp[609723] "expr temp" "maybe param" "maybe type" "temp"
    (609726 'move' call_tmp[609723](53149 call canResolveMethod module=[255] Reflection[224794] ir[53119] "_fromForExpr_"))
    unknown call_tmp[609728] "expr temp" "maybe param" "maybe type" "temp"
    (609731 'move' call_tmp[609728](53159 call _cond_test call_tmp[609723]))
    if call_tmp[609728]
    {
      unknown call_tmp[609735] "expr temp" "maybe param" "maybe type" "temp"
      (609738 'move' call_tmp[609735](53151 call _fromForExpr_ _mt[243] ir[53119]))
      (507064 'move' ret[507059](507063 'deref' call_tmp[609735]))
      gotoReturn _end_chpl_iteratorFromForExpr[507057] _end_chpl_iteratorFromForExpr[507057]
    }
    {
      (507069 'move' ret[507059](507068 'deref' 0))
      gotoReturn _end_chpl_iteratorFromForExpr[507057] _end_chpl_iteratorFromForExpr[507057]
    }
    label _end_chpl_iteratorFromForExpr[507057]
    (507061 return ret[507059])
    (357154 'referenced modules list' Reflection[224794])
  }
  function chpl_iteratorFromForExpr[53172](arg arg[53170]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507075] "RVV" "param" "temp"
    (507080 'move' ret[507075](507079 'deref' 0))
    (507077 return ret[507075])
  }
  function _iteratorRecord[205](?).writeThis[53185](arg _mt[53190]:_MT[238], arg this[53187]:_iteratorRecord[205](?) :
  _iteratorRecord[205](?), arg f[53183]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown first[53194] "dead at end of block" "insert auto destroy"
    (540666 'init var' first[53194] 1 bool[10])
    (53197 'end of statement')
    {
      unknown _indexOfInterest[53242] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53243] "expr temp" "temp"
      (53252 'move' _iterator[53243](53250 call _getIterator this[53187]))
      Defer
      {
        {
          (53268 call _freeIterator _iterator[53243])
        }
      }
      { scopeless type
        (53257 'move' _indexOfInterest[53242](53254 call iteratorIndex _iterator[53243]))
      }
      ForLoop[53244]
      {
        unknown e[53261] "index var" "insert auto destroy"
        (474515 'end of statement')
        (53263 'move' e[53261] _indexOfInterest[53242])
        (474516 'end of statement' e[53261])
        {
          unknown call_tmp[609740] "expr temp" "maybe param" "maybe type" "temp"
          (609743 'move' call_tmp[609740](53202 call ! first[53194]))
          unknown call_tmp[609745] "expr temp" "maybe param" "maybe type" "temp"
          (609748 'move' call_tmp[609745](53230 call _cond_test call_tmp[609740]))
          if call_tmp[609745]
          {
            (53222 call <~> f[53183] " ")
          }
          {
            (53227 call = first[53194] 0)
            (474519 'end of statement' first[53194])
          }
          (53239 call <~> f[53183] e[53261])
          (474521 'end of statement' e[53261])
        }
        label _continueLabel[53247]
        _indexOfInterest[53242]
        _iterator[53243]
      }
      label _breakLabel[53248]
    }
    (507082 return _void[55])
  }
  function =[53283](ref arg ic[53280]:_iteratorRecord[205](?), arg xs[53285]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[53301] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53302] "expr temp" "temp"
      unknown call_tmp[609750] "expr temp" "maybe param" "maybe type" "temp"
      (609753 'move' call_tmp[609750](53311 call _getIterator ic[53280]))
      unknown call_tmp[609755] "expr temp" "maybe param" "maybe type" "temp"
      (609758 'move' call_tmp[609755](53314 call _getIterator xs[53285]))
      (53316 'move' _iterator[53302](53295 call _build_tuple call_tmp[609750] call_tmp[609755]))
      Defer
      {
        {
          (53346 call _freeIterator _iterator[53302])
        }
      }
      { scopeless type
        (53321 'move' _indexOfInterest[53301](53318 call iteratorIndex _iterator[53302]))
      }
      ForLoop[53303]
      {
        (53326 call _check_tuple_var_decl _indexOfInterest[53301] 2)
        (474524 'end of statement')
        unknown e[53332] "index var" "insert auto destroy"
        (474525 'end of statement')
        (53334 'move' e[53332](53330 call _indexOfInterest[53301] 0))
        (474526 'end of statement' e[53332])
        unknown x[53339] "index var" "insert auto destroy"
        (474528 'end of statement')
        (53341 'move' x[53339](53337 call _indexOfInterest[53301] 1))
        (474529 'end of statement' x[53339])
        (53298 call = e[53332] x[53339])
        (474531 'end of statement' e[53332] x[53339])
        label _continueLabel[53306]
        _indexOfInterest[53301]
        _iterator[53302]
      }
      label _breakLabel[53307]
    }
    (507084 return _void[55])
  }
  function =[53362](ref arg ic[53359]:_iteratorRecord[205](?), arg x[53368] :
  (53367 call iteratorIndexType ic[53359])) : _unknown[51] "assignop" "suppress lvalue error" "no return value for void"
  {
    {
      unknown _indexOfInterest[53378] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53379] "expr temp" "temp"
      (53388 'move' _iterator[53379](53386 call _getIterator ic[53359]))
      Defer
      {
        {
          (53404 call _freeIterator _iterator[53379])
        }
      }
      { scopeless type
        (53393 'move' _indexOfInterest[53378](53390 call iteratorIndex _iterator[53379]))
      }
      ForLoop[53380]
      {
        unknown e[53397] "index var" "insert auto destroy"
        (474535 'end of statement')
        (53399 'move' e[53397] _indexOfInterest[53378])
        (474536 'end of statement' e[53397])
        (53375 call = e[53397] x[53368])
        (474538 'end of statement' e[53397])
        label _continueLabel[53383]
        _indexOfInterest[53378]
        _iterator[53379]
      }
      label _breakLabel[53384]
    }
    (507086 return _void[55])
  }
  function _getIterator[53418](const  ref arg x[53416]:_any[178](?)) : _unknown[51] "inline" "no borrow convert" "suppress lvalue error"
  {
    unknown ret[507090] "RVV" "temp"
    unknown call_tmp[609762] "expr temp" "maybe param" "maybe type" "temp"
    (609765 'move' call_tmp[609762](53428 call(53424 call (partial) these _mt[243] x[53416])))
    unknown call_tmp[609767] "expr temp" "maybe param" "maybe type" "temp"
    (609770 'move' call_tmp[609767](53430 call _getIterator call_tmp[609762]))
    (507095 'move' ret[507090](507094 'deref' call_tmp[609767]))
    (507092 return ret[507090])
  }
  function _getIterator[53440](arg t[53438]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507099] "RVV" "temp"
    unknown call_tmp[609774] "expr temp" "maybe param" "maybe type" "temp"
    (609777 'move' call_tmp[609774](53448 call(53444 call (partial) these _mt[243] t[53438])))
    unknown call_tmp[609779] "expr temp" "maybe param" "maybe type" "temp"
    (609782 'move' call_tmp[609779](53450 call _getIterator call_tmp[609774]))
    (507104 'move' ret[507099](507103 'deref' call_tmp[609779]))
    (507101 return ret[507099])
  }
  function _getIteratorZip[53460](arg x[53458]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507108] "RVV" "temp"
    unknown call_tmp[609784] "expr temp" "maybe param" "maybe type" "temp"
    (609787 'move' call_tmp[609784](53465 call _getIterator x[53458]))
    (507113 'move' ret[507108](507112 'deref' call_tmp[609784]))
    (507110 return ret[507108])
  }
  function _getIteratorZip[53475](arg t[53473]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507117] "RVV" "temp"
    unknown call_tmp[609789] "expr temp" "maybe param" "maybe type" "temp"
    (609792 'move' call_tmp[609789](53480 call _getIterator t[53473]))
    (507122 'move' ret[507117](507121 'deref' call_tmp[609789]))
    (507119 return ret[507117])
  }
  function _getIteratorZip[53492](arg x[53489]:_tuple[56199](?)) : _unknown[51] "inline"
  {
    unknown ret[507142] "RVV" "temp"
    function _getIteratorZipInternal[53500](arg x[53497]:_tuple[56199](?), param arg dim[53503]:int(64)[13]) : _unknown[51] "inline"
    {
      unknown ret[507126] "RVV" "temp"
      unknown tmp[418390] "maybe param" "temp"
      unknown call_tmp[609794] "expr temp" "maybe param" "maybe type" "temp"
      (609797 'move' call_tmp[609794](53510 call x[53497] dim[53503]))
      (418401 'move' tmp[418390](53512 call isTuple call_tmp[609794]))
      unknown call_tmp[609799] "expr temp" "maybe param" "maybe type" "temp"
      (609802 'move' call_tmp[609799](418403 call _cond_invalid tmp[418390]))
      if call_tmp[609799]
      {
        (418406 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554347] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554348] "maybe param" "temp"
      unknown call_tmp[609804] "expr temp" "maybe param" "maybe type" "temp"
      (609807 'move' call_tmp[609804](418391 call isTrue tmp[418390]))
      (554353 'move' tmp[554348](554351 call _cond_test call_tmp[609804]))
      if tmp[554348]
      {
        unknown tmp[554355] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[609809] "expr temp" "maybe param" "maybe type" "temp"
        (609812 'move' call_tmp[609809](53517 call x[53497] dim[53503]))
        unknown call_tmp[609814] "expr temp" "maybe param" "maybe type" "temp"
        (609817 'move' call_tmp[609814](53519 call isHomogeneousTuple call_tmp[609809]))
        unknown call_tmp[609819] "expr temp" "maybe param" "maybe type" "temp"
        (609822 'move' call_tmp[609819](53520 call ! call_tmp[609814]))
        (554357 'move' tmp[554355](418394 call isTrue call_tmp[609819]))
        (554362 'move' tmp[554347](554359 '_paramFoldLogical' tmp[554348] tmp[554355]))
      }
      {
        (554367 'move' tmp[554347](554364 '_paramFoldLogical' tmp[554348] 0))
      }
      unknown call_tmp[609824] "expr temp" "maybe param" "maybe type" "temp"
      (609827 'move' call_tmp[609824](53545 call _cond_test tmp[554347]))
      if call_tmp[609824]
      {
        (53543 call compilerError "Heterogeneous tuples don't support zippered iteration yet")
      }
      unknown call_tmp[609831] "expr temp" "maybe param" "maybe type" "temp"
      (609834 'move' call_tmp[609831](53553 call size _mt[243] x[53497]))
      unknown call_tmp[609836] "expr temp" "maybe param" "maybe type" "temp"
      (609839 'move' call_tmp[609836](53557 call - call_tmp[609831] 1))
      unknown call_tmp[609841] "expr temp" "maybe param" "maybe type" "temp"
      (609844 'move' call_tmp[609841](53559 call == dim[53503] call_tmp[609836]))
      unknown call_tmp[609846] "expr temp" "maybe param" "maybe type" "temp"
      (609849 'move' call_tmp[609846](53593 call _cond_test call_tmp[609841]))
      if call_tmp[609846]
      {
        unknown call_tmp[609851] "expr temp" "maybe param" "maybe type" "temp"
        (609854 'move' call_tmp[609851](53565 call x[53497] dim[53503]))
        unknown call_tmp[609856] "expr temp" "maybe param" "maybe type" "temp"
        (609859 'move' call_tmp[609856](53567 call _getIterator call_tmp[609851]))
        unknown call_tmp[609861] "expr temp" "maybe param" "maybe type" "temp"
        (609864 'move' call_tmp[609861](53568 call _build_tuple call_tmp[609856]))
        (507131 'move' ret[507126](507130 'deref' call_tmp[609861]))
        gotoReturn _end__getIteratorZipInternal[507124] _end__getIteratorZipInternal[507124]
      }
      {
        unknown call_tmp[609866] "expr temp" "maybe param" "maybe type" "temp"
        (609869 'move' call_tmp[609866](53576 call x[53497] dim[53503]))
        unknown call_tmp[609871] "expr temp" "maybe param" "maybe type" "temp"
        (609874 'move' call_tmp[609871](53578 call _getIterator call_tmp[609866]))
        unknown call_tmp[609876] "expr temp" "maybe param" "maybe type" "temp"
        (609879 'move' call_tmp[609876](53584 call + dim[53503] 1))
        unknown call_tmp[609881] "expr temp" "maybe param" "maybe type" "temp"
        (609884 'move' call_tmp[609881](53586 call _getIteratorZipInternal x[53497] call_tmp[609876]))
        unknown call_tmp[609886] "expr temp" "maybe param" "maybe type" "temp"
        (609889 'move' call_tmp[609886](53589 call _build_tuple call_tmp[609871](53587 'expand_tuple' call_tmp[609881])))
        (507136 'move' ret[507126](507135 'deref' call_tmp[609886]))
        gotoReturn _end__getIteratorZipInternal[507124] _end__getIteratorZipInternal[507124]
      }
      label _end__getIteratorZipInternal[507124]
      (507128 return ret[507126])
    }
    unknown call_tmp[609893] "expr temp" "maybe param" "maybe type" "temp"
    (609896 'move' call_tmp[609893](53603 call size _mt[243] x[53489]))
    unknown call_tmp[609898] "expr temp" "maybe param" "maybe type" "temp"
    (609901 'move' call_tmp[609898](53607 call == call_tmp[609893] 1))
    unknown call_tmp[609903] "expr temp" "maybe param" "maybe type" "temp"
    (609906 'move' call_tmp[609903](53625 call _cond_test call_tmp[609898]))
    if call_tmp[609903]
    {
      unknown call_tmp[609908] "expr temp" "maybe param" "maybe type" "temp"
      (609911 'move' call_tmp[609908](53613 call x[53489] 0))
      unknown call_tmp[609913] "expr temp" "maybe param" "maybe type" "temp"
      (609916 'move' call_tmp[609913](53615 call _getIterator call_tmp[609908]))
      (507147 'move' ret[507142](507146 'deref' call_tmp[609913]))
      gotoReturn _end__getIteratorZip[507140] _end__getIteratorZip[507140]
    }
    {
      unknown call_tmp[609918] "expr temp" "maybe param" "maybe type" "temp"
      (609921 'move' call_tmp[609918](53622 call _getIteratorZipInternal x[53489] 0))
      (507152 'move' ret[507142](507151 'deref' call_tmp[609918]))
      gotoReturn _end__getIteratorZip[507140] _end__getIteratorZip[507140]
    }
    label _end__getIteratorZip[507140]
    (507144 return ret[507142])
  }
  function _getIteratorZip[53639](arg t[53636]:_tuple[56199](?)) : _unknown[51] "inline"
  {
    unknown ret[507174] "RVV" "temp"
    function _getIteratorZipInternal[53647](arg t[53644]:_tuple[56199](?), param arg dim[53650]:int(64)[13]) : _unknown[51] "inline"
    {
      unknown ret[507158] "RVV" "temp"
      unknown call_tmp[609925] "expr temp" "maybe param" "maybe type" "temp"
      (609928 'move' call_tmp[609925](53655 call size _mt[243] t[53644]))
      unknown call_tmp[609930] "expr temp" "maybe param" "maybe type" "temp"
      (609933 'move' call_tmp[609930](53659 call - call_tmp[609925] 1))
      unknown call_tmp[609935] "expr temp" "maybe param" "maybe type" "temp"
      (609938 'move' call_tmp[609935](53661 call == dim[53650] call_tmp[609930]))
      unknown call_tmp[609940] "expr temp" "maybe param" "maybe type" "temp"
      (609943 'move' call_tmp[609940](53695 call _cond_test call_tmp[609935]))
      if call_tmp[609940]
      {
        unknown call_tmp[609945] "expr temp" "maybe param" "maybe type" "temp"
        (609948 'move' call_tmp[609945](53667 call t[53644] dim[53650]))
        unknown call_tmp[609950] "expr temp" "maybe param" "maybe type" "temp"
        (609953 'move' call_tmp[609950](53669 call _getIterator call_tmp[609945]))
        unknown call_tmp[609955] "expr temp" "maybe param" "maybe type" "temp"
        (609958 'move' call_tmp[609955](53670 call _build_tuple call_tmp[609950]))
        (507163 'move' ret[507158](507162 'deref' call_tmp[609955]))
        gotoReturn _end__getIteratorZipInternal[507156] _end__getIteratorZipInternal[507156]
      }
      {
        unknown call_tmp[609960] "expr temp" "maybe param" "maybe type" "temp"
        (609963 'move' call_tmp[609960](53678 call t[53644] dim[53650]))
        unknown call_tmp[609965] "expr temp" "maybe param" "maybe type" "temp"
        (609968 'move' call_tmp[609965](53680 call _getIterator call_tmp[609960]))
        unknown call_tmp[609970] "expr temp" "maybe param" "maybe type" "temp"
        (609973 'move' call_tmp[609970](53686 call + dim[53650] 1))
        unknown call_tmp[609975] "expr temp" "maybe param" "maybe type" "temp"
        (609978 'move' call_tmp[609975](53688 call _getIteratorZipInternal t[53644] call_tmp[609970]))
        unknown call_tmp[609980] "expr temp" "maybe param" "maybe type" "temp"
        (609983 'move' call_tmp[609980](53691 call _build_tuple call_tmp[609965](53689 'expand_tuple' call_tmp[609975])))
        (507168 'move' ret[507158](507167 'deref' call_tmp[609980]))
        gotoReturn _end__getIteratorZipInternal[507156] _end__getIteratorZipInternal[507156]
      }
      label _end__getIteratorZipInternal[507156]
      (507160 return ret[507158])
    }
    unknown call_tmp[609987] "expr temp" "maybe param" "maybe type" "temp"
    (609990 'move' call_tmp[609987](53706 call size _mt[243] t[53636]))
    unknown call_tmp[609992] "expr temp" "maybe param" "maybe type" "temp"
    (609995 'move' call_tmp[609992](53710 call == call_tmp[609987] 1))
    unknown call_tmp[609997] "expr temp" "maybe param" "maybe type" "temp"
    (610000 'move' call_tmp[609997](53728 call _cond_test call_tmp[609992]))
    if call_tmp[609997]
    {
      unknown call_tmp[610002] "expr temp" "maybe param" "maybe type" "temp"
      (610005 'move' call_tmp[610002](53716 call t[53636] 0))
      unknown call_tmp[610007] "expr temp" "maybe param" "maybe type" "temp"
      (610010 'move' call_tmp[610007](53718 call _getIterator call_tmp[610002]))
      (507179 'move' ret[507174](507178 'deref' call_tmp[610007]))
      gotoReturn _end__getIteratorZip[507172] _end__getIteratorZip[507172]
    }
    {
      unknown call_tmp[610012] "expr temp" "maybe param" "maybe type" "temp"
      (610015 'move' call_tmp[610012](53725 call _getIteratorZipInternal t[53636] 0))
      (507184 'move' ret[507174](507183 'deref' call_tmp[610012]))
      gotoReturn _end__getIteratorZip[507172] _end__getIteratorZip[507172]
    }
    label _end__getIteratorZip[507172]
    (507176 return ret[507174])
  }
  function _freeIterator[53742](arg ic[53739]:_iteratorClass[208](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[610017] "expr temp" "maybe param" "maybe type" "temp"
    (610020 'move' call_tmp[610017](53764 'cast_to_void_star' ic[53739]))
    (53766 call chpl_here_free call_tmp[610017])
    (507188 return _void[55])
  }
  function _freeIterator[53777](arg x[53774]:_tuple[56199](?)) : _unknown[51] "inline" "no return value for void"
  {
    {
      unknown i[53797] "dead at end of block" "insert auto destroy"
      (540668 'init var' i[53797] 0)
      (474555 'end of statement')
      unknown tmp[53798] "maybe param" "temp"
      unknown call_tmp[610024] "expr temp" "maybe param" "maybe type" "temp"
      (610027 'move' call_tmp[610024](53781 call size _mt[243] x[53774]))
      unknown call_tmp[610029] "expr temp" "maybe param" "maybe type" "temp"
      (610032 'move' call_tmp[610029](53785 call - call_tmp[610024] 1))
      (53810 'move' tmp[53798](53808 call chpl_compute_low_param_loop_bound 0 call_tmp[610029]))
      unknown tmp[53799] "maybe param" "temp"
      unknown call_tmp[610036] "expr temp" "maybe param" "maybe type" "temp"
      (610039 'move' call_tmp[610036](53817 call size _mt[243] x[53774]))
      unknown call_tmp[610041] "expr temp" "maybe param" "maybe type" "temp"
      (610044 'move' call_tmp[610041](53815 call - call_tmp[610036] 1))
      (53823 'move' tmp[53799](53821 call chpl_compute_high_param_loop_bound 0 call_tmp[610041]))
      unknown tmp[53800] "maybe param" "temp"
      (53826 'move' tmp[53800] 1)
      ParamForLoop[53828]
      { i[53797] tmp[53798] tmp[53799] tmp[53800]
        unknown call_tmp[610046] "expr temp" "maybe param" "maybe type" "temp"
        (610049 'move' call_tmp[610046](53793 call x[53774] i[53797]))
        (53795 call _freeIterator call_tmp[610046])
        (474556 'end of statement' i[53797])
      }
      label _unused_continueLabel[53802]
      label _breakLabel[53801]
    }
    (507190 return _void[55])
  }
  function _toLeader[53846](arg ir[53843]:_iteratorRecord[205](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507194] "RVV" "temp"
    unknown call_tmp[610051] "expr temp" "maybe param" "maybe type" "temp"
    (610054 'move' call_tmp[610051](53888 'to leader' ir[53843]))
    unknown call_tmp[610056] "expr temp" "maybe param" "maybe type" "temp"
    (610059 'move' call_tmp[610056](53890 call chpl__autoCopy call_tmp[610051]))
    (507199 'move' ret[507194](507198 'deref' call_tmp[610056]))
    (507196 return ret[507194])
  }
  where {
    (53867 'has leader' ir[53843])
  }
  function _toLeader[53901](arg x[53899]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507203] "RVV" "temp"
    unknown call_tmp[610063] "expr temp" "maybe param" "maybe type" "temp"
    (610066 'move' call_tmp[610063](53928 call(53924 call (partial) these _mt[243] x[53899])))
    unknown call_tmp[610068] "expr temp" "maybe param" "maybe type" "temp"
    (610071 'move' call_tmp[610068](53930 call _toLeader call_tmp[610063]))
    (507208 'move' ret[507203](507207 'deref' call_tmp[610068]))
    (507205 return ret[507203])
  }
  where {
    unknown tmp[418411] "maybe param" "temp"
    unknown call_tmp[610073] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (610076 'move' call_tmp[610073](53905 'typeof' x[53899]))
    unknown call_tmp[610078] "expr temp" "maybe param" "maybe type" "temp"
    (610081 'move' call_tmp[610078](354123 'is_subtype' _iteratorRecord[205](?) call_tmp[610073]))
    (418422 'move' tmp[418411](53909 call ! call_tmp[610078]))
    unknown call_tmp[610083] "expr temp" "maybe param" "maybe type" "temp"
    (610086 'move' call_tmp[610083](418424 call _cond_invalid tmp[418411]))
    if call_tmp[610083]
    {
      (418427 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554374] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554375] "maybe param" "temp"
    unknown call_tmp[610088] "expr temp" "maybe param" "maybe type" "temp"
    (610091 'move' call_tmp[610088](418412 call isTrue tmp[418411]))
    (554380 'move' tmp[554375](554378 call _cond_test call_tmp[610088]))
    if tmp[554375]
    {
      unknown tmp[554382] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610095] "expr temp" "maybe param" "maybe type" "temp"
      (610098 'move' call_tmp[610095](53918 call(53914 call (partial) these _mt[243] x[53899])))
      unknown call_tmp[610100] "expr temp" "maybe param" "maybe type" "temp"
      (610103 'move' call_tmp[610100](53919 'has leader' call_tmp[610095]))
      (554384 'move' tmp[554382](418415 call isTrue call_tmp[610100]))
      (554389 'move' tmp[554374](554386 '_paramFoldLogical' tmp[554375] tmp[554382]))
    }
    {
      (554394 'move' tmp[554374](554391 '_paramFoldLogical' tmp[554375] 0))
    }
    (748091 call chpl_statementLevelSymbol tmp[554374])
  }
  function _toLeaderZip[53941](arg x[53939]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507212] "RVV" "temp"
    unknown call_tmp[610105] "expr temp" "maybe param" "maybe type" "temp"
    (610108 'move' call_tmp[610105](53980 call _toLeader x[53939]))
    (507217 'move' ret[507212](507216 'deref' call_tmp[610105]))
    (507214 return ret[507212])
  }
  where {
    unknown tmp[418432] "maybe param" "temp"
    unknown call_tmp[610110] "expr temp" "maybe param" "maybe type" "temp"
    (610113 'move' call_tmp[610110](53946 call isTuple x[53939]))
    (418443 'move' tmp[418432](53947 call ! call_tmp[610110]))
    unknown call_tmp[610115] "expr temp" "maybe param" "maybe type" "temp"
    (610118 'move' call_tmp[610115](418445 call _cond_invalid tmp[418432]))
    if call_tmp[610115]
    {
      (418448 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554401] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554402] "maybe param" "temp"
    unknown call_tmp[610120] "expr temp" "maybe param" "maybe type" "temp"
    (610123 'move' call_tmp[610120](418433 call isTrue tmp[418432]))
    (554407 'move' tmp[554402](554405 call _cond_test call_tmp[610120]))
    if tmp[554402]
    {
      unknown tmp[554409] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610125] "expr temp" "maybe param" "maybe type" "temp"
      (610128 'move' call_tmp[610125](53974 call canResolve module=[255] Reflection[224794] "_toLeader" x[53939]))
      (554411 'move' tmp[554409](418436 call isTrue call_tmp[610125]))
      (554416 'move' tmp[554401](554413 '_paramFoldLogical' tmp[554402] tmp[554409]))
    }
    {
      (554421 'move' tmp[554401](554418 '_paramFoldLogical' tmp[554402] 0))
    }
    (748093 call chpl_statementLevelSymbol tmp[554401])
    (357171 'referenced modules list' Reflection[224794])
  }
  function _toLeaderZip[53993](arg x[53990]:_tuple[56199](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507221] "RVV" "temp"
    unknown call_tmp[610130] "expr temp" "maybe param" "maybe type" "temp"
    (610133 'move' call_tmp[610130](54010 call x[53990] 0))
    unknown call_tmp[610135] "expr temp" "maybe param" "maybe type" "temp"
    (610138 'move' call_tmp[610135](54012 call _toLeader call_tmp[610130]))
    (507226 'move' ret[507221](507225 'deref' call_tmp[610135]))
    (507223 return ret[507221])
  }
  where {
    unknown call_tmp[610140] "expr temp" "maybe param" "maybe type" "temp"
    (610143 'move' call_tmp[610140](54004 call x[53990] 0))
    (54005 call canResolve module=[255] Reflection[224794] "_toLeader" call_tmp[610140])
    (357177 'referenced modules list' Reflection[224794])
  }
  function _toStandalone[54025](arg iterator[54022]:_iteratorClass[208](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507230] "RVV" "temp"
    unknown call_tmp[610145] "expr temp" "maybe param" "maybe type" "temp"
    (610148 'move' call_tmp[610145](54047 'to standalone' iterator[54022]))
    unknown call_tmp[610150] "expr temp" "maybe param" "maybe type" "temp"
    (610153 'move' call_tmp[610150](54049 call chpl__autoCopy call_tmp[610145]))
    (507235 'move' ret[507230](507234 'deref' call_tmp[610150]))
    (507232 return ret[507230])
  }
  function _toStandalone[54061](arg ir[54058]:_iteratorRecord[205](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507239] "RVV" "temp"
    unknown call_tmp[610155] "maybe param" "maybe type" "temp"
    (610158 'move' call_tmp[610155](54066 call _getIterator ir[54058]))
    unknown ic[54067] "dead at end of block" "insert auto destroy" "no copy"
    (540670 'init var' ic[54067] call_tmp[610155])
    (54070 'end of statement')
    unknown call_tmp[610160] "maybe param" "maybe type" "temp"
    (610163 'move' call_tmp[610160](54075 call _toStandalone ic[54067]))
    unknown standalone[54076] "dead at end of block" "insert auto destroy" "no copy"
    (540672 'init var' standalone[54076] call_tmp[610160])
    (54079 'end of statement' ic[54067])
    (54083 call _freeIterator ic[54067])
    (474564 'end of statement' ic[54067])
    (507244 'move' ret[507239](507243 'deref' standalone[54076]))
    gotoReturn _end__toStandalone[507237] _end__toStandalone[507237]
    (474566 'end of statement' standalone[54076])
    label _end__toStandalone[507237]
    (507241 return ret[507239])
  }
  function _toStandalone[54094](arg x[54092]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507250] "RVV" "temp"
    unknown call_tmp[610167] "expr temp" "maybe param" "maybe type" "temp"
    (610170 'move' call_tmp[610167](54102 call(54098 call (partial) these _mt[243] x[54092])))
    unknown call_tmp[610172] "expr temp" "maybe param" "maybe type" "temp"
    (610175 'move' call_tmp[610172](54104 call _toStandalone call_tmp[610167]))
    (507255 'move' ret[507250](507254 'deref' call_tmp[610172]))
    (507252 return ret[507250])
  }
  function _toLeader[54116](arg ir[54113]:_iteratorRecord[205](?), arg args[54119]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507259] "RVV" "temp"
    unknown call_tmp[610177] "expr temp" "maybe param" "maybe type" "temp"
    (610180 'move' call_tmp[610177](54128 'to leader' ir[54113](54127 'expand_tuple' args[54119])))
    unknown call_tmp[610182] "expr temp" "maybe param" "maybe type" "temp"
    (610185 'move' call_tmp[610182](54130 call chpl__autoCopy call_tmp[610177]))
    (507264 'move' ret[507259](507263 'deref' call_tmp[610182]))
    (507261 return ret[507259])
  }
  function _toLeader[54140](arg x[54138]:_any[178](?), arg args[54143]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507268] "RVV" "temp"
    unknown call_tmp[610189] "expr temp" "maybe param" "maybe type" "temp"
    (610192 'move' call_tmp[610189](54152 call(54148 call (partial) these _mt[243] x[54138])))
    unknown call_tmp[610194] "expr temp" "maybe param" "maybe type" "temp"
    (610197 'move' call_tmp[610194](54156 call _toLeader call_tmp[610189](54155 'expand_tuple' args[54143])))
    (507273 'move' ret[507268](507272 'deref' call_tmp[610194]))
    (507270 return ret[507268])
  }
  function _toLeaderZip[54166](arg x[54164]:_any[178](?), arg args[54169]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507277] "RVV" "temp"
    unknown call_tmp[610199] "expr temp" "maybe param" "maybe type" "temp"
    (610202 'move' call_tmp[610199](54177 call _toLeader x[54164](54176 'expand_tuple' args[54169])))
    (507282 'move' ret[507277](507281 'deref' call_tmp[610199]))
    (507279 return ret[507277])
  }
  function _toLeaderZip[54189](arg x[54186]:_tuple[56199](?), arg args[54192]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507286] "RVV" "temp"
    unknown call_tmp[610204] "expr temp" "maybe param" "maybe type" "temp"
    (610207 'move' call_tmp[610204](54199 call x[54186] 0))
    unknown call_tmp[610209] "expr temp" "maybe param" "maybe type" "temp"
    (610212 'move' call_tmp[610209](54203 call _toLeader call_tmp[610204](54202 'expand_tuple' args[54192])))
    (507291 'move' ret[507286](507290 'deref' call_tmp[610209]))
    (507288 return ret[507286])
  }
  function _toStandalone[54215](arg iterator[54212]:_iteratorClass[208](?), arg args[54218]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507295] "RVV" "temp"
    unknown call_tmp[610214] "expr temp" "maybe param" "maybe type" "temp"
    (610217 'move' call_tmp[610214](54227 'to standalone' iterator[54212](54226 'expand_tuple' args[54218])))
    unknown call_tmp[610219] "expr temp" "maybe param" "maybe type" "temp"
    (610222 'move' call_tmp[610219](54229 call chpl__autoCopy call_tmp[610214]))
    (507300 'move' ret[507295](507299 'deref' call_tmp[610219]))
    (507297 return ret[507295])
  }
  function _toStandalone[54241](arg ir[54238]:_iteratorRecord[205](?), arg args[54244]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507304] "RVV" "temp"
    unknown call_tmp[610224] "maybe param" "maybe type" "temp"
    (610227 'move' call_tmp[610224](54250 call _getIterator ir[54238]))
    unknown ic[54251] "dead at end of block" "insert auto destroy" "no copy"
    (540674 'init var' ic[54251] call_tmp[610224])
    (54254 'end of statement')
    unknown call_tmp[610229] "maybe param" "maybe type" "temp"
    (610232 'move' call_tmp[610229](54261 call _toStandalone ic[54251](54260 'expand_tuple' args[54244])))
    unknown standalone[54262] "dead at end of block" "insert auto destroy" "no copy"
    (540676 'init var' standalone[54262] call_tmp[610229])
    (54265 'end of statement' ic[54251])
    (54269 call _freeIterator ic[54251])
    (474575 'end of statement' ic[54251])
    (507309 'move' ret[507304](507308 'deref' standalone[54262]))
    gotoReturn _end__toStandalone[507302] _end__toStandalone[507302]
    (474577 'end of statement' standalone[54262])
    label _end__toStandalone[507302]
    (507306 return ret[507304])
  }
  function _toStandalone[54280](arg x[54278]:_any[178](?), arg args[54283]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507315] "RVV" "temp"
    unknown call_tmp[610236] "expr temp" "maybe param" "maybe type" "temp"
    (610239 'move' call_tmp[610236](54292 call(54288 call (partial) these _mt[243] x[54278])))
    unknown call_tmp[610241] "expr temp" "maybe param" "maybe type" "temp"
    (610244 'move' call_tmp[610241](54296 call _toStandalone call_tmp[610236](54295 'expand_tuple' args[54283])))
    (507320 'move' ret[507315](507319 'deref' call_tmp[610241]))
    (507317 return ret[507315])
  }
  function chpl__canHaveFastFollowers[54306](arg x[54304]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507324] "RVV" "param" "temp"
    (507329 'move' ret[507324](507328 'deref' 0))
    (507326 return ret[507324])
  }
  function chpl__canHaveFastFollowers[54322](arg x[54319]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[507333] "RVV" "param" "temp"
    (507338 'move' ret[507333](507337 'deref' 1))
    (507335 return ret[507333])
  }
  function chpl__canHaveFastFollowersZip[54336](arg x[54333]:_tuple[56199](?)) param : _unknown[51]
  {
    unknown ret[507342] "RVV" "param" "temp"
    unknown call_tmp[610246] "expr temp" "maybe param" "maybe type" "temp"
    (610249 'move' call_tmp[610246](54342 call chpl__canHaveFastFollowersZipHelp x[54333] 0))
    (507347 'move' ret[507342](507346 'deref' call_tmp[610246]))
    (507344 return ret[507342])
  }
  function chpl__canHaveFastFollowersZipHelp[54354](arg x[54351]:_tuple[56199](?), param arg dim[54356]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507351] "RVV" "param" "temp"
    unknown call_tmp[610253] "expr temp" "maybe param" "maybe type" "temp"
    (610256 'move' call_tmp[610253](54359 call size _mt[243] x[54351]))
    unknown call_tmp[610258] "expr temp" "maybe param" "maybe type" "temp"
    (610261 'move' call_tmp[610258](54363 call - call_tmp[610253] 1))
    unknown call_tmp[610263] "expr temp" "maybe param" "maybe type" "temp"
    (610266 'move' call_tmp[610263](54366 call == call_tmp[610258] dim[54356]))
    unknown call_tmp[610268] "expr temp" "maybe param" "maybe type" "temp"
    (610271 'move' call_tmp[610268](54396 call _cond_test call_tmp[610263]))
    if call_tmp[610268]
    {
      unknown call_tmp[610273] "expr temp" "maybe param" "maybe type" "temp"
      (610276 'move' call_tmp[610273](54372 call x[54351] dim[54356]))
      unknown call_tmp[610278] "expr temp" "maybe param" "maybe type" "temp"
      (610281 'move' call_tmp[610278](54374 call chpl__canHaveFastFollowers call_tmp[610273]))
      (507356 'move' ret[507351](507355 'deref' call_tmp[610278]))
      gotoReturn _end_chpl__canHaveFastFollowersZipHelp[507349] _end_chpl__canHaveFastFollowersZipHelp[507349]
    }
    {
      unknown tmp[418453] "maybe param" "temp"
      unknown call_tmp[610283] "expr temp" "maybe param" "maybe type" "temp"
      (610286 'move' call_tmp[610283](54381 call x[54351] dim[54356]))
      (418464 'move' tmp[418453](54383 call chpl__canHaveFastFollowers call_tmp[610283]))
      unknown call_tmp[610288] "expr temp" "maybe param" "maybe type" "temp"
      (610291 'move' call_tmp[610288](418466 call _cond_invalid tmp[418453]))
      if call_tmp[610288]
      {
        (418469 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[554428] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554429] "maybe param" "temp"
      unknown call_tmp[610293] "expr temp" "maybe param" "maybe type" "temp"
      (610296 'move' call_tmp[610293](418454 call isTrue tmp[418453]))
      (554434 'move' tmp[554429](554432 call _cond_test call_tmp[610293]))
      if tmp[554429]
      {
        (554439 'move' tmp[554428](554436 '_paramFoldLogical' tmp[554429] 1))
      }
      {
        unknown tmp[554441] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610298] "expr temp" "maybe param" "maybe type" "temp"
        (610301 'move' call_tmp[610298](54389 call + dim[54356] 1))
        unknown call_tmp[610303] "expr temp" "maybe param" "maybe type" "temp"
        (610306 'move' call_tmp[610303](54391 call chpl__canHaveFastFollowersZipHelp x[54351] call_tmp[610298]))
        (554443 'move' tmp[554441](418458 call isTrue call_tmp[610303]))
        (554448 'move' tmp[554428](554445 '_paramFoldLogical' tmp[554429] tmp[554441]))
      }
      (507361 'move' ret[507351](507360 'deref' tmp[554428]))
      gotoReturn _end_chpl__canHaveFastFollowersZipHelp[507349] _end_chpl__canHaveFastFollowersZipHelp[507349]
    }
    label _end_chpl__canHaveFastFollowersZipHelp[507349]
    (507353 return ret[507351])
  }
  function chpl__canLeadFastFollowers[54409](arg x[54407]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507367] "RVV" "param" "temp"
    unknown tmp[418474] "maybe param" "temp"
    (418485 'move' tmp[418474](54414 call isDomain x[54407]))
    unknown call_tmp[610308] "expr temp" "maybe param" "maybe type" "temp"
    (610311 'move' call_tmp[610308](418487 call _cond_invalid tmp[418474]))
    if call_tmp[610308]
    {
      (418490 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[554455] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554456] "maybe param" "temp"
    unknown call_tmp[610313] "expr temp" "maybe param" "maybe type" "temp"
    (610316 'move' call_tmp[610313](418475 call isTrue tmp[418474]))
    (554461 'move' tmp[554456](554459 call _cond_test call_tmp[610313]))
    if tmp[554456]
    {
      (554466 'move' tmp[554455](554463 '_paramFoldLogical' tmp[554456] 1))
    }
    {
      unknown tmp[554468] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610318] "expr temp" "maybe param" "maybe type" "temp"
      (610321 'move' call_tmp[610318](54418 call isArray x[54407]))
      (554470 'move' tmp[554468](418479 call isTrue call_tmp[610318]))
      (554475 'move' tmp[554455](554472 '_paramFoldLogical' tmp[554456] tmp[554468]))
    }
    (507372 'move' ret[507367](507371 'deref' tmp[554455]))
    (507369 return ret[507367])
  }
  function chpl__hasInertFastFollowers[54430](arg x[54428]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507376] "RVV" "param" "temp"
    (507381 'move' ret[507376](507380 'deref' 1))
    (507378 return ret[507376])
  }
  function chpl__hasInertFastFollowers[54446](arg x[54443]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[507385] "RVV" "param" "temp"
    (507390 'move' ret[507385](507389 'deref' 0))
    (507387 return ret[507385])
  }
  function chpl__hasInertFastFollowersZip[54460](arg x[54457]:_tuple[56199](?)) param : _unknown[51]
  {
    unknown ret[507394] "RVV" "param" "temp"
    unknown call_tmp[610323] "expr temp" "maybe param" "maybe type" "temp"
    (610326 'move' call_tmp[610323](54466 call chpl__hasInertFastFollowersZipHelp x[54457] 0))
    (507399 'move' ret[507394](507398 'deref' call_tmp[610323]))
    (507396 return ret[507394])
  }
  function chpl__hasInertFastFollowersZipHelp[54478](arg x[54475]:_tuple[56199](?), param arg dim[54480]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507403] "RVV" "param" "temp"
    unknown call_tmp[610330] "expr temp" "maybe param" "maybe type" "temp"
    (610333 'move' call_tmp[610330](54483 call size _mt[243] x[54475]))
    unknown call_tmp[610335] "expr temp" "maybe param" "maybe type" "temp"
    (610338 'move' call_tmp[610335](54487 call - call_tmp[610330] 1))
    unknown call_tmp[610340] "expr temp" "maybe param" "maybe type" "temp"
    (610343 'move' call_tmp[610340](54490 call == call_tmp[610335] dim[54480]))
    unknown call_tmp[610345] "expr temp" "maybe param" "maybe type" "temp"
    (610348 'move' call_tmp[610345](54522 call _cond_test call_tmp[610340]))
    if call_tmp[610345]
    {
      unknown call_tmp[610350] "expr temp" "maybe param" "maybe type" "temp"
      (610353 'move' call_tmp[610350](54496 call x[54475] dim[54480]))
      unknown call_tmp[610355] "expr temp" "maybe param" "maybe type" "temp"
      (610358 'move' call_tmp[610355](54498 call chpl__hasInertFastFollowers call_tmp[610350]))
      (507408 'move' ret[507403](507407 'deref' call_tmp[610355]))
      gotoReturn _end_chpl__hasInertFastFollowersZipHelp[507401] _end_chpl__hasInertFastFollowersZipHelp[507401]
    }
    {
      unknown tmp[418495] "maybe param" "temp"
      unknown call_tmp[610360] "expr temp" "maybe param" "maybe type" "temp"
      (610363 'move' call_tmp[610360](54506 call x[54475] dim[54480]))
      (418506 'move' tmp[418495](54508 call chpl__hasInertFastFollowers call_tmp[610360]))
      unknown call_tmp[610365] "expr temp" "maybe param" "maybe type" "temp"
      (610368 'move' call_tmp[610365](418508 call _cond_invalid tmp[418495]))
      if call_tmp[610365]
      {
        (418511 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554482] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554483] "maybe param" "temp"
      unknown call_tmp[610370] "expr temp" "maybe param" "maybe type" "temp"
      (610373 'move' call_tmp[610370](418496 call isTrue tmp[418495]))
      (554488 'move' tmp[554483](554486 call _cond_test call_tmp[610370]))
      if tmp[554483]
      {
        unknown tmp[554490] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610375] "expr temp" "maybe param" "maybe type" "temp"
        (610378 'move' call_tmp[610375](54514 call + dim[54480] 1))
        unknown call_tmp[610380] "expr temp" "maybe param" "maybe type" "temp"
        (610383 'move' call_tmp[610380](54516 call chpl__hasInertFastFollowersZipHelp x[54475] call_tmp[610375]))
        (554492 'move' tmp[554490](418499 call isTrue call_tmp[610380]))
        (554497 'move' tmp[554482](554494 '_paramFoldLogical' tmp[554483] tmp[554490]))
      }
      {
        (554502 'move' tmp[554482](554499 '_paramFoldLogical' tmp[554483] 0))
      }
      (507413 'move' ret[507403](507412 'deref' tmp[554482]))
      gotoReturn _end_chpl__hasInertFastFollowersZipHelp[507401] _end_chpl__hasInertFastFollowersZipHelp[507401]
    }
    label _end_chpl__hasInertFastFollowersZipHelp[507401]
    (507405 return ret[507403])
  }
  function chpl__staticFastFollowCheck[54533](arg x[54531]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507419] "RVV" "param" "temp"
    const lead[54536] "dead at end of block" "const" "insert auto destroy" "no copy"
    (540678 'init var' lead[54536] x[54531])
    (54539 'end of statement')
    unknown call_tmp[610385] "expr temp" "maybe param" "maybe type" "temp"
    (610388 'move' call_tmp[610385](54544 call chpl__canHaveFastFollowers lead[54536]))
    unknown call_tmp[610390] "expr temp" "maybe param" "maybe type" "temp"
    (610393 'move' call_tmp[610390](54556 call _cond_test call_tmp[610385]))
    if call_tmp[610390]
    {
      unknown call_tmp[610395] "expr temp" "maybe param" "maybe type" "temp"
      (610398 'move' call_tmp[610395](54549 call chpl__staticFastFollowCheck x[54531] lead[54536]))
      (507424 'move' ret[507419](507423 'deref' call_tmp[610395]))
      gotoReturn _end_chpl__staticFastFollowCheck[507417] _end_chpl__staticFastFollowCheck[507417]
      (474594 'end of statement' lead[54536])
    }
    {
      (507429 'move' ret[507419](507428 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheck[507417] _end_chpl__staticFastFollowCheck[507417]
    }
    label _end_chpl__staticFastFollowCheck[507417]
    (507421 return ret[507419])
  }
  function chpl__staticFastFollowCheck[54567](arg x[54565]:_any[178](?), arg lead[54569]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507435] "RVV" "param" "temp"
    unknown call_tmp[610400] "expr temp" "maybe param" "maybe type" "temp"
    (610403 'move' call_tmp[610400](54574 call chpl__hasInertFastFollowers x[54565]))
    (507440 'move' ret[507435](507439 'deref' call_tmp[610400]))
    (507437 return ret[507435])
  }
  function chpl__staticFastFollowCheck[54588](arg x[54585]:_array[133588](?), arg lead[54590]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507444] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[491482] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610407] "expr temp" "maybe param" "maybe type" "temp"
      (610410 'move' call_tmp[610407](54604 call _value _mt[243] lead[54590]))
      (491486 'move' call_type_tmp[491482](54607 'typeof' call_tmp[610407]))
    }
    unknown call_tmp[610414] "expr temp" "maybe param" "maybe type" "temp"
    (610417 'move' call_tmp[610414](54595 call _value _mt[243] x[54585]))
    unknown call_tmp[610421] "expr temp" "maybe param" "maybe type" "temp"
    (610424 'move' call_tmp[610421](54609 call(54600 call (partial) dsiStaticFastFollowCheck _mt[243] call_tmp[610414]) call_type_tmp[491482]))
    (507449 'move' ret[507444](507448 'deref' call_tmp[610421]))
    (507446 return ret[507444])
  }
  function chpl__staticFastFollowCheckZip[54621](arg x[54618]:_tuple[56199](?)) param : _unknown[51]
  {
    unknown ret[507453] "RVV" "param" "temp"
    unknown call_tmp[610426] "expr temp" "maybe param" "maybe type" "temp"
    (610429 'move' call_tmp[610426](54626 call chpl__canHaveFastFollowersZip x[54618]))
    unknown call_tmp[610431] "expr temp" "maybe param" "maybe type" "temp"
    (610434 'move' call_tmp[610431](54627 call ! call_tmp[610426]))
    unknown call_tmp[610436] "expr temp" "maybe param" "maybe type" "temp"
    (610439 'move' call_tmp[610436](54662 call _cond_test call_tmp[610431]))
    if call_tmp[610436]
    {
      (507458 'move' ret[507453](507457 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507451] _end_chpl__staticFastFollowCheckZip[507451]
    }
    {
      unknown call_tmp[610441] "maybe param" "maybe type" "temp"
      (610444 'move' call_tmp[610441](54636 call x[54618] 0))
      const lead[54637] "dead at end of block" "const" "insert auto destroy" "no copy"
      (540680 'init var' lead[54637] call_tmp[610441])
      (54640 'end of statement')
      unknown call_tmp[610446] "expr temp" "maybe param" "maybe type" "temp"
      (610449 'move' call_tmp[610446](54645 call chpl__canLeadFastFollowers lead[54637]))
      unknown call_tmp[610451] "expr temp" "maybe param" "maybe type" "temp"
      (610454 'move' call_tmp[610451](54656 call _cond_test call_tmp[610446]))
      if call_tmp[610451]
      {
        unknown call_tmp[610456] "expr temp" "maybe param" "maybe type" "temp"
        (610459 'move' call_tmp[610456](54650 call chpl__staticFastFollowCheckZip x[54618] lead[54637]))
        (507463 'move' ret[507453](507462 'deref' call_tmp[610456]))
        gotoReturn _end_chpl__staticFastFollowCheckZip[507451] _end_chpl__staticFastFollowCheckZip[507451]
        (474600 'end of statement' lead[54637])
      }
      {
        (507468 'move' ret[507453](507467 'deref' 0))
        gotoReturn _end_chpl__staticFastFollowCheckZip[507451] _end_chpl__staticFastFollowCheckZip[507451]
      }
    }
    label _end_chpl__staticFastFollowCheckZip[507451]
    (507455 return ret[507453])
  }
  function chpl__staticFastFollowCheckZip[54675](arg x[54672]:_tuple[56199](?), arg lead[54677]:_any[178](?), param arg dim[54680] :
  0 =
  0) param : _unknown[51]
  {
    unknown ret[507474] "RVV" "param" "temp"
    unknown call_tmp[610463] "expr temp" "maybe param" "maybe type" "temp"
    (610466 'move' call_tmp[610463](54684 call size _mt[243] x[54672]))
    unknown call_tmp[610468] "expr temp" "maybe param" "maybe type" "temp"
    (610471 'move' call_tmp[610468](54688 call - call_tmp[610463] 1))
    unknown call_tmp[610473] "expr temp" "maybe param" "maybe type" "temp"
    (610476 'move' call_tmp[610473](54691 call == call_tmp[610468] dim[54680]))
    unknown call_tmp[610478] "expr temp" "maybe param" "maybe type" "temp"
    (610481 'move' call_tmp[610478](54724 call _cond_test call_tmp[610473]))
    if call_tmp[610478]
    {
      unknown call_tmp[610483] "expr temp" "maybe param" "maybe type" "temp"
      (610486 'move' call_tmp[610483](54697 call x[54672] dim[54680]))
      unknown call_tmp[610488] "expr temp" "maybe param" "maybe type" "temp"
      (610491 'move' call_tmp[610488](54700 call chpl__staticFastFollowCheck call_tmp[610483] lead[54677]))
      (507479 'move' ret[507474](507478 'deref' call_tmp[610488]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507472] _end_chpl__staticFastFollowCheckZip[507472]
    }
    {
      unknown tmp[418516] "maybe param" "temp"
      unknown call_tmp[610493] "expr temp" "maybe param" "maybe type" "temp"
      (610496 'move' call_tmp[610493](54707 call x[54672] dim[54680]))
      (418527 'move' tmp[418516](54710 call chpl__staticFastFollowCheck call_tmp[610493] lead[54677]))
      unknown call_tmp[610498] "expr temp" "maybe param" "maybe type" "temp"
      (610501 'move' call_tmp[610498](418529 call _cond_invalid tmp[418516]))
      if call_tmp[610498]
      {
        (418532 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554509] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554510] "maybe param" "temp"
      unknown call_tmp[610503] "expr temp" "maybe param" "maybe type" "temp"
      (610506 'move' call_tmp[610503](418517 call isTrue tmp[418516]))
      (554515 'move' tmp[554510](554513 call _cond_test call_tmp[610503]))
      if tmp[554510]
      {
        unknown tmp[554517] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610508] "expr temp" "maybe param" "maybe type" "temp"
        (610511 'move' call_tmp[610508](54717 call + dim[54680] 1))
        unknown call_tmp[610513] "expr temp" "maybe param" "maybe type" "temp"
        (610516 'move' call_tmp[610513](54719 call chpl__staticFastFollowCheckZip x[54672] lead[54677] call_tmp[610508]))
        (554519 'move' tmp[554517](418520 call isTrue call_tmp[610513]))
        (554524 'move' tmp[554509](554521 '_paramFoldLogical' tmp[554510] tmp[554517]))
      }
      {
        (554529 'move' tmp[554509](554526 '_paramFoldLogical' tmp[554510] 0))
      }
      (507484 'move' ret[507474](507483 'deref' tmp[554509]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507472] _end_chpl__staticFastFollowCheckZip[507472]
    }
    label _end_chpl__staticFastFollowCheckZip[507472]
    (507476 return ret[507474])
  }
  function chpl__dynamicFastFollowCheck[54737](arg x[54735]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507490] "RVV" "temp"
    unknown call_tmp[610518] "expr temp" "maybe param" "maybe type" "temp"
    (610521 'move' call_tmp[610518](54742 call chpl__canHaveFastFollowers x[54735]))
    unknown call_tmp[610523] "expr temp" "maybe param" "maybe type" "temp"
    (610526 'move' call_tmp[610523](54755 call _cond_test call_tmp[610518]))
    if call_tmp[610523]
    {
      unknown call_tmp[610528] "expr temp" "maybe param" "maybe type" "temp"
      (610531 'move' call_tmp[610528](54747 call chpl__dynamicFastFollowCheck x[54735] x[54735]))
      (507495 'move' ret[507490](507494 'deref' call_tmp[610528]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507488] _end_chpl__dynamicFastFollowCheck[507488]
    }
    {
      (507500 'move' ret[507490](507499 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507488] _end_chpl__dynamicFastFollowCheck[507488]
    }
    label _end_chpl__dynamicFastFollowCheck[507488]
    (507492 return ret[507490])
  }
  function chpl__dynamicFastFollowCheck[54766](arg x[54764]:_any[178](?), arg lead[54768]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507506] "RVV" "temp"
    unknown call_tmp[610533] "expr temp" "maybe param" "maybe type" "temp"
    (610536 'move' call_tmp[610533](54773 call chpl__hasInertFastFollowers x[54764]))
    (507511 'move' ret[507506](507510 'deref' call_tmp[610533]))
    (507508 return ret[507506])
  }
  function chpl__dynamicFastFollowCheck[54787](arg x[54784]:_array[133588](?), arg lead[54789]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507515] "RVV" "temp"
    unknown call_tmp[610538] "expr temp" "maybe param" "maybe type" "temp"
    (610541 'move' call_tmp[610538](54795 call chpl__staticFastFollowCheck x[54784] lead[54789]))
    unknown call_tmp[610543] "expr temp" "maybe param" "maybe type" "temp"
    (610546 'move' call_tmp[610543](54813 call _cond_test call_tmp[610538]))
    if call_tmp[610543]
    {
      unknown call_tmp[610550] "expr temp" "maybe param" "maybe type" "temp"
      (610553 'move' call_tmp[610550](54797 call _value _mt[243] x[54784]))
      unknown call_tmp[610557] "expr temp" "maybe param" "maybe type" "temp"
      (610560 'move' call_tmp[610557](54807 call(54802 call (partial) dsiDynamicFastFollowCheck _mt[243] call_tmp[610550]) lead[54789]))
      (507520 'move' ret[507515](507519 'deref' call_tmp[610557]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507513] _end_chpl__dynamicFastFollowCheck[507513]
    }
    {
      (507525 'move' ret[507515](507524 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507513] _end_chpl__dynamicFastFollowCheck[507513]
    }
    label _end_chpl__dynamicFastFollowCheck[507513]
    (507517 return ret[507515])
  }
  function chpl__dynamicFastFollowCheckZip[54828](arg x[54825]:_tuple[56199](?)) : _unknown[51]
  {
    unknown ret[507531] "RVV" "temp"
    unknown call_tmp[610562] "expr temp" "maybe param" "maybe type" "temp"
    (610565 'move' call_tmp[610562](54833 call chpl__canHaveFastFollowersZip x[54825]))
    unknown call_tmp[610567] "expr temp" "maybe param" "maybe type" "temp"
    (610570 'move' call_tmp[610567](54834 call ! call_tmp[610562]))
    unknown call_tmp[610572] "expr temp" "maybe param" "maybe type" "temp"
    (610575 'move' call_tmp[610572](54840 call _cond_test call_tmp[610567]))
    if call_tmp[610572]
    {
      (507536 'move' ret[507531](507535 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507529] _end_chpl__dynamicFastFollowCheckZip[507529]
    }
    unknown call_tmp[610577] "expr temp" "maybe param" "maybe type" "temp"
    (610580 'move' call_tmp[610577](54849 call x[54825] 0))
    unknown call_tmp[610582] "expr temp" "maybe param" "maybe type" "temp"
    (610585 'move' call_tmp[610582](54851 call chpl__canLeadFastFollowers call_tmp[610577]))
    unknown call_tmp[610587] "expr temp" "maybe param" "maybe type" "temp"
    (610590 'move' call_tmp[610587](54867 call _cond_test call_tmp[610582]))
    if call_tmp[610587]
    {
      unknown call_tmp[610592] "expr temp" "maybe param" "maybe type" "temp"
      (610595 'move' call_tmp[610592](54858 call x[54825] 0))
      unknown call_tmp[610597] "expr temp" "maybe param" "maybe type" "temp"
      (610600 'move' call_tmp[610597](54859 call chpl__dynamicFastFollowCheckZip x[54825] call_tmp[610592]))
      (507541 'move' ret[507531](507540 'deref' call_tmp[610597]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507529] _end_chpl__dynamicFastFollowCheckZip[507529]
    }
    {
      (507546 'move' ret[507531](507545 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507529] _end_chpl__dynamicFastFollowCheckZip[507529]
    }
    label _end_chpl__dynamicFastFollowCheckZip[507529]
    (507533 return ret[507531])
  }
  function chpl__dynamicFastFollowCheckZip[54879](arg x[54876]:_tuple[56199](?), arg lead[54881]:_any[178](?), param arg dim[54884] :
  0 =
  0) : _unknown[51]
  {
    unknown ret[507552] "RVV" "temp"
    unknown call_tmp[610604] "expr temp" "maybe param" "maybe type" "temp"
    (610607 'move' call_tmp[610604](54888 call size _mt[243] x[54876]))
    unknown call_tmp[610609] "expr temp" "maybe param" "maybe type" "temp"
    (610612 'move' call_tmp[610609](54892 call - call_tmp[610604] 1))
    unknown call_tmp[610614] "expr temp" "maybe param" "maybe type" "temp"
    (610617 'move' call_tmp[610614](54895 call == call_tmp[610609] dim[54884]))
    unknown call_tmp[610619] "expr temp" "maybe param" "maybe type" "temp"
    (610622 'move' call_tmp[610619](54928 call _cond_test call_tmp[610614]))
    if call_tmp[610619]
    {
      unknown call_tmp[610624] "expr temp" "maybe param" "maybe type" "temp"
      (610627 'move' call_tmp[610624](54901 call x[54876] dim[54884]))
      unknown call_tmp[610629] "expr temp" "maybe param" "maybe type" "temp"
      (610632 'move' call_tmp[610629](54904 call chpl__dynamicFastFollowCheck call_tmp[610624] lead[54881]))
      (507557 'move' ret[507552](507556 'deref' call_tmp[610629]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507550] _end_chpl__dynamicFastFollowCheckZip[507550]
    }
    {
      unknown tmp[418537] "maybe param" "temp"
      unknown call_tmp[610634] "expr temp" "maybe param" "maybe type" "temp"
      (610637 'move' call_tmp[610634](54911 call x[54876] dim[54884]))
      (418548 'move' tmp[418537](54914 call chpl__dynamicFastFollowCheck call_tmp[610634] lead[54881]))
      unknown call_tmp[610639] "expr temp" "maybe param" "maybe type" "temp"
      (610642 'move' call_tmp[610639](418550 call _cond_invalid tmp[418537]))
      if call_tmp[610639]
      {
        (418553 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554536] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554537] "maybe param" "temp"
      unknown call_tmp[610644] "expr temp" "maybe param" "maybe type" "temp"
      (610647 'move' call_tmp[610644](418538 call isTrue tmp[418537]))
      (554542 'move' tmp[554537](554540 call _cond_test call_tmp[610644]))
      if tmp[554537]
      {
        unknown tmp[554544] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610649] "expr temp" "maybe param" "maybe type" "temp"
        (610652 'move' call_tmp[610649](54921 call + dim[54884] 1))
        unknown call_tmp[610654] "expr temp" "maybe param" "maybe type" "temp"
        (610657 'move' call_tmp[610654](54923 call chpl__dynamicFastFollowCheckZip x[54876] lead[54881] call_tmp[610649]))
        (554546 'move' tmp[554544](418541 call isTrue call_tmp[610654]))
        (554551 'move' tmp[554536](554548 '_paramFoldLogical' tmp[554537] tmp[554544]))
      }
      {
        (554556 'move' tmp[554536](554553 '_paramFoldLogical' tmp[554537] 0))
      }
      (507562 'move' ret[507552](507561 'deref' tmp[554536]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507550] _end_chpl__dynamicFastFollowCheckZip[507550]
    }
    label _end_chpl__dynamicFastFollowCheckZip[507550]
    (507554 return ret[507552])
  }
  function _toFollower[54943](arg iterator[54940]:_iteratorClass[208](?), arg leaderIndex[54945]:_any[178](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507568] "RVV" "temp"
    unknown call_tmp[610659] "expr temp" "maybe param" "maybe type" "temp"
    (610662 'move' call_tmp[610659](54968 'to follower' iterator[54940] leaderIndex[54945]))
    unknown call_tmp[610664] "expr temp" "maybe param" "maybe type" "temp"
    (610667 'move' call_tmp[610664](54970 call chpl__autoCopy call_tmp[610659]))
    (507573 'move' ret[507568](507572 'deref' call_tmp[610664]))
    (507570 return ret[507568])
  }
  function _toFollower[54982](arg ir[54979]:_iteratorRecord[205](?), arg leaderIndex[54984]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507577] "RVV" "temp"
    unknown call_tmp[610669] "maybe param" "maybe type" "temp"
    (610672 'move' call_tmp[610669](54989 call _getIterator ir[54979]))
    unknown ic[54990] "dead at end of block" "insert auto destroy" "no copy"
    (540682 'init var' ic[54990] call_tmp[610669])
    (54993 'end of statement')
    unknown call_tmp[610674] "maybe param" "maybe type" "temp"
    (610677 'move' call_tmp[610674](54999 call _toFollower ic[54990] leaderIndex[54984]))
    unknown follower[55000] "dead at end of block" "insert auto destroy" "no copy"
    (540684 'init var' follower[55000] call_tmp[610674])
    (55003 'end of statement' ic[54990])
    (55007 call _freeIterator ic[54990])
    (474619 'end of statement' ic[54990])
    (507582 'move' ret[507577](507581 'deref' follower[55000]))
    gotoReturn _end__toFollower[507575] _end__toFollower[507575]
    (474621 'end of statement' follower[55000])
    label _end__toFollower[507575]
    (507579 return ret[507577])
  }
  function _toFollower[55018](arg x[55016]:_any[178](?), arg leaderIndex[55020]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507588] "RVV" "temp"
    unknown call_tmp[610681] "expr temp" "maybe param" "maybe type" "temp"
    (610684 'move' call_tmp[610681](55028 call(55024 call (partial) these _mt[243] x[55016])))
    unknown call_tmp[610686] "expr temp" "maybe param" "maybe type" "temp"
    (610689 'move' call_tmp[610686](55031 call _toFollower call_tmp[610681] leaderIndex[55020]))
    (507593 'move' ret[507588](507592 'deref' call_tmp[610686]))
    (507590 return ret[507588])
  }
  function _toFollowerZip[55041](arg x[55039]:_any[178](?), arg leaderIndex[55043]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507597] "RVV" "temp"
    unknown call_tmp[610691] "expr temp" "maybe param" "maybe type" "temp"
    (610694 'move' call_tmp[610691](55049 call _toFollower x[55039] leaderIndex[55043]))
    (507602 'move' ret[507597](507601 'deref' call_tmp[610691]))
    (507599 return ret[507597])
  }
  function _toFollowerZip[55061](arg x[55058]:_tuple[56199](?), arg leaderIndex[55063]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507606] "RVV" "temp"
    unknown call_tmp[610696] "expr temp" "maybe param" "maybe type" "temp"
    (610699 'move' call_tmp[610696](55070 call _toFollowerZipInternal x[55058] leaderIndex[55063] 0))
    (507611 'move' ret[507606](507610 'deref' call_tmp[610696]))
    (507608 return ret[507606])
  }
  function _toFollowerZipInternal[55082](arg x[55079]:_tuple[56199](?), arg leaderIndex[55084]:_any[178](?), param arg dim[55087]:int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507615] "RVV" "temp"
    unknown call_tmp[610703] "expr temp" "maybe param" "maybe type" "temp"
    (610706 'move' call_tmp[610703](55092 call size _mt[243] x[55079]))
    unknown call_tmp[610708] "expr temp" "maybe param" "maybe type" "temp"
    (610711 'move' call_tmp[610708](55096 call - call_tmp[610703] 1))
    unknown call_tmp[610713] "expr temp" "maybe param" "maybe type" "temp"
    (610716 'move' call_tmp[610713](55098 call == dim[55087] call_tmp[610708]))
    unknown call_tmp[610718] "expr temp" "maybe param" "maybe type" "temp"
    (610721 'move' call_tmp[610718](55135 call _cond_test call_tmp[610713]))
    if call_tmp[610718]
    {
      unknown call_tmp[610723] "expr temp" "maybe param" "maybe type" "temp"
      (610726 'move' call_tmp[610723](55104 call x[55079] dim[55087]))
      unknown call_tmp[610728] "expr temp" "maybe param" "maybe type" "temp"
      (610731 'move' call_tmp[610728](55107 call _toFollower call_tmp[610723] leaderIndex[55084]))
      unknown call_tmp[610733] "expr temp" "maybe param" "maybe type" "temp"
      (610736 'move' call_tmp[610733](55108 call _build_tuple call_tmp[610728]))
      (507620 'move' ret[507615](507619 'deref' call_tmp[610733]))
      gotoReturn _end__toFollowerZipInternal[507613] _end__toFollowerZipInternal[507613]
    }
    {
      unknown call_tmp[610738] "expr temp" "maybe param" "maybe type" "temp"
      (610741 'move' call_tmp[610738](55116 call x[55079] dim[55087]))
      unknown call_tmp[610743] "expr temp" "maybe param" "maybe type" "temp"
      (610746 'move' call_tmp[610743](55119 call _toFollower call_tmp[610738] leaderIndex[55084]))
      unknown call_tmp[610748] "expr temp" "maybe param" "maybe type" "temp"
      (610751 'move' call_tmp[610748](55126 call + dim[55087] 1))
      unknown call_tmp[610753] "expr temp" "maybe param" "maybe type" "temp"
      (610756 'move' call_tmp[610753](55128 call _toFollowerZipInternal x[55079] leaderIndex[55084] call_tmp[610748]))
      unknown call_tmp[610758] "expr temp" "maybe param" "maybe type" "temp"
      (610761 'move' call_tmp[610758](55131 call _build_tuple call_tmp[610743](55129 'expand_tuple' call_tmp[610753])))
      (507625 'move' ret[507615](507624 'deref' call_tmp[610758]))
      gotoReturn _end__toFollowerZipInternal[507613] _end__toFollowerZipInternal[507613]
    }
    label _end__toFollowerZipInternal[507613]
    (507617 return ret[507615])
  }
  function _toFastFollower[55150](arg iterator[55147]:_iteratorClass[208](?), arg leaderIndex[55152]:_any[178](?), arg fast[55155]:bool[10]) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507631] "RVV" "temp"
    unknown call_tmp[610763] "expr temp" "maybe param" "maybe type" "temp"
    (610766 'move' call_tmp[610763](55164 'to follower' iterator[55147] leaderIndex[55152] 1))
    unknown call_tmp[610768] "expr temp" "maybe param" "maybe type" "temp"
    (610771 'move' call_tmp[610768](55166 call chpl__autoCopy call_tmp[610763]))
    (507636 'move' ret[507631](507635 'deref' call_tmp[610768]))
    (507633 return ret[507631])
  }
  function _toFastFollower[55178](arg ir[55175]:_iteratorRecord[205](?), arg leaderIndex[55180]:_any[178](?), arg fast[55183]:bool[10]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507640] "RVV" "temp"
    unknown call_tmp[610773] "maybe param" "maybe type" "temp"
    (610776 'move' call_tmp[610773](55189 call _getIterator ir[55175]))
    unknown ic[55190] "dead at end of block" "insert auto destroy" "no copy"
    (540686 'init var' ic[55190] call_tmp[610773])
    (55193 'end of statement')
    unknown call_tmp[610778] "maybe param" "maybe type" "temp"
    (610781 'move' call_tmp[610778](55201 call _toFastFollower ic[55190] leaderIndex[55180](fast = 1)))
    unknown follower[55202] "dead at end of block" "insert auto destroy" "no copy"
    (540688 'init var' follower[55202] call_tmp[610778])
    (55205 'end of statement' ic[55190])
    (55209 call _freeIterator ic[55190])
    (474630 'end of statement' ic[55190])
    (507645 'move' ret[507640](507644 'deref' follower[55202]))
    gotoReturn _end__toFastFollower[507638] _end__toFastFollower[507638]
    (474632 'end of statement' follower[55202])
    label _end__toFastFollower[507638]
    (507642 return ret[507640])
  }
  function _toFastFollower[55220](arg x[55218]:_any[178](?), arg leaderIndex[55222]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507651] "RVV" "temp"
    unknown call_tmp[610783] "expr temp" "maybe param" "maybe type" "temp"
    (610786 'move' call_tmp[610783](55227 call chpl__canHaveFastFollowers x[55218]))
    unknown call_tmp[610788] "expr temp" "maybe param" "maybe type" "temp"
    (610791 'move' call_tmp[610788](55250 call _cond_test call_tmp[610783]))
    if call_tmp[610788]
    {
      unknown call_tmp[610793] "expr temp" "maybe param" "maybe type" "temp"
      (610796 'move' call_tmp[610793](55232 call _getIterator x[55218]))
      unknown call_tmp[610798] "expr temp" "maybe param" "maybe type" "temp"
      (610801 'move' call_tmp[610798](55237 call _toFastFollower call_tmp[610793] leaderIndex[55222](fast = 1)))
      (507656 'move' ret[507651](507655 'deref' call_tmp[610798]))
      gotoReturn _end__toFastFollower[507649] _end__toFastFollower[507649]
    }
    {
      unknown call_tmp[610803] "expr temp" "maybe param" "maybe type" "temp"
      (610806 'move' call_tmp[610803](55244 call _getIterator x[55218]))
      unknown call_tmp[610808] "expr temp" "maybe param" "maybe type" "temp"
      (610811 'move' call_tmp[610808](55247 call _toFollower call_tmp[610803] leaderIndex[55222]))
      (507661 'move' ret[507651](507660 'deref' call_tmp[610808]))
      gotoReturn _end__toFastFollower[507649] _end__toFastFollower[507649]
    }
    label _end__toFastFollower[507649]
    (507653 return ret[507651])
  }
  function _toFastFollowerZip[55263](arg x[55261]:_any[178](?), arg leaderIndex[55265]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507667] "RVV" "temp"
    unknown call_tmp[610813] "expr temp" "maybe param" "maybe type" "temp"
    (610816 'move' call_tmp[610813](55271 call _toFastFollower x[55261] leaderIndex[55265]))
    (507672 'move' ret[507667](507671 'deref' call_tmp[610813]))
    (507669 return ret[507667])
  }
  function _toFastFollowerZip[55283](arg x[55280]:_tuple[56199](?), arg leaderIndex[55285]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507676] "RVV" "temp"
    unknown call_tmp[610818] "expr temp" "maybe param" "maybe type" "temp"
    (610821 'move' call_tmp[610818](55292 call _toFastFollowerZip x[55280] leaderIndex[55285] 0))
    (507681 'move' ret[507676](507680 'deref' call_tmp[610818]))
    (507678 return ret[507676])
  }
  function _toFastFollowerZip[55304](arg x[55301]:_tuple[56199](?), arg leaderIndex[55306]:_any[178](?), param arg dim[55309]:int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507685] "RVV" "temp"
    unknown call_tmp[610825] "expr temp" "maybe param" "maybe type" "temp"
    (610828 'move' call_tmp[610825](55314 call size _mt[243] x[55301]))
    unknown call_tmp[610830] "expr temp" "maybe param" "maybe type" "temp"
    (610833 'move' call_tmp[610830](55318 call - call_tmp[610825] 2))
    unknown call_tmp[610835] "expr temp" "maybe param" "maybe type" "temp"
    (610838 'move' call_tmp[610835](55320 call == dim[55309] call_tmp[610830]))
    unknown call_tmp[610840] "expr temp" "maybe param" "maybe type" "temp"
    (610843 'move' call_tmp[610840](55369 call _cond_test call_tmp[610835]))
    if call_tmp[610840]
    {
      unknown call_tmp[610845] "expr temp" "maybe param" "maybe type" "temp"
      (610848 'move' call_tmp[610845](55326 call x[55301] dim[55309]))
      unknown call_tmp[610850] "expr temp" "maybe param" "maybe type" "temp"
      (610853 'move' call_tmp[610850](55329 call _toFastFollowerZip call_tmp[610845] leaderIndex[55306]))
      unknown call_tmp[610855] "expr temp" "maybe param" "maybe type" "temp"
      (610858 'move' call_tmp[610855](55334 call + dim[55309] 1))
      unknown call_tmp[610860] "expr temp" "maybe param" "maybe type" "temp"
      (610863 'move' call_tmp[610860](55337 call x[55301] call_tmp[610855]))
      unknown call_tmp[610865] "expr temp" "maybe param" "maybe type" "temp"
      (610868 'move' call_tmp[610865](55340 call _toFastFollowerZip call_tmp[610860] leaderIndex[55306]))
      unknown call_tmp[610870] "expr temp" "maybe param" "maybe type" "temp"
      (610873 'move' call_tmp[610870](55342 call _build_tuple call_tmp[610850] call_tmp[610865]))
      (507690 'move' ret[507685](507689 'deref' call_tmp[610870]))
      gotoReturn _end__toFastFollowerZip[507683] _end__toFastFollowerZip[507683]
    }
    {
      unknown call_tmp[610875] "expr temp" "maybe param" "maybe type" "temp"
      (610878 'move' call_tmp[610875](55350 call x[55301] dim[55309]))
      unknown call_tmp[610880] "expr temp" "maybe param" "maybe type" "temp"
      (610883 'move' call_tmp[610880](55353 call _toFastFollowerZip call_tmp[610875] leaderIndex[55306]))
      unknown call_tmp[610885] "expr temp" "maybe param" "maybe type" "temp"
      (610888 'move' call_tmp[610885](55360 call + dim[55309] 1))
      unknown call_tmp[610890] "expr temp" "maybe param" "maybe type" "temp"
      (610893 'move' call_tmp[610890](55362 call _toFastFollowerZip x[55301] leaderIndex[55306] call_tmp[610885]))
      unknown call_tmp[610895] "expr temp" "maybe param" "maybe type" "temp"
      (610898 'move' call_tmp[610895](55365 call _build_tuple call_tmp[610880](55363 'expand_tuple' call_tmp[610890])))
      (507695 'move' ret[507685](507694 'deref' call_tmp[610895]))
      gotoReturn _end__toFastFollowerZip[507683] _end__toFastFollowerZip[507683]
    }
    label _end__toFastFollowerZip[507683]
    (507687 return ret[507685])
  }
  function singleValIter[55384](arg iterables[55381]:_tuple[56199](?)) param : _unknown[51] "no doc"
  {
    unknown ret[507701] "RVV" "param" "temp"
    unknown tmp[418558] "maybe param" "temp"
    unknown call_tmp[610902] "expr temp" "maybe param" "maybe type" "temp"
    (610905 'move' call_tmp[610902](55387 call size _mt[243] iterables[55381]))
    (418569 'move' tmp[418558](55391 call == call_tmp[610902] 1))
    unknown call_tmp[610907] "expr temp" "maybe param" "maybe type" "temp"
    (610910 'move' call_tmp[610907](418571 call _cond_invalid tmp[418558]))
    if call_tmp[610907]
    {
      (418574 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554563] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554564] "maybe param" "temp"
    unknown call_tmp[610912] "expr temp" "maybe param" "maybe type" "temp"
    (610915 'move' call_tmp[610912](418559 call isTrue tmp[418558]))
    (554569 'move' tmp[554564](554567 call _cond_test call_tmp[610912]))
    if tmp[554564]
    {
      unknown tmp[554571] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610917] "expr temp" "maybe param" "maybe type" "temp"
      (610920 'move' call_tmp[610917](55398 call iterables[55381] 0))
      unknown call_tmp[610922] "expr temp" "maybe param" "maybe type" "temp"
      (610925 'move' call_tmp[610922](55400 call _getIterator call_tmp[610917]))
      unknown call_tmp[610927] "expr temp" "maybe param" "maybe type" "temp"
      (610930 'move' call_tmp[610927](55402 call isRefIter call_tmp[610922]))
      unknown call_tmp[610932] "expr temp" "maybe param" "maybe type" "temp"
      (610935 'move' call_tmp[610932](55403 call ! call_tmp[610927]))
      (554573 'move' tmp[554571](418562 call isTrue call_tmp[610932]))
      (554578 'move' tmp[554563](554575 '_paramFoldLogical' tmp[554564] tmp[554571]))
    }
    {
      (554583 'move' tmp[554563](554580 '_paramFoldLogical' tmp[554564] 0))
    }
    (507706 'move' ret[507701](507705 'deref' tmp[554563]))
    (507703 return ret[507701])
  }
  function singleRefIter[55418](arg iterables[55415]:_tuple[56199](?)) param : _unknown[51] "no doc"
  {
    unknown ret[507710] "RVV" "param" "temp"
    unknown tmp[418579] "maybe param" "temp"
    unknown call_tmp[610939] "expr temp" "maybe param" "maybe type" "temp"
    (610942 'move' call_tmp[610939](55421 call size _mt[243] iterables[55415]))
    (418590 'move' tmp[418579](55425 call == call_tmp[610939] 1))
    unknown call_tmp[610944] "expr temp" "maybe param" "maybe type" "temp"
    (610947 'move' call_tmp[610944](418592 call _cond_invalid tmp[418579]))
    if call_tmp[610944]
    {
      (418595 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554590] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554591] "maybe param" "temp"
    unknown call_tmp[610949] "expr temp" "maybe param" "maybe type" "temp"
    (610952 'move' call_tmp[610949](418580 call isTrue tmp[418579]))
    (554596 'move' tmp[554591](554594 call _cond_test call_tmp[610949]))
    if tmp[554591]
    {
      unknown tmp[554598] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610954] "expr temp" "maybe param" "maybe type" "temp"
      (610957 'move' call_tmp[610954](55432 call iterables[55415] 0))
      unknown call_tmp[610959] "expr temp" "maybe param" "maybe type" "temp"
      (610962 'move' call_tmp[610959](55434 call _getIterator call_tmp[610954]))
      unknown call_tmp[610964] "expr temp" "maybe param" "maybe type" "temp"
      (610967 'move' call_tmp[610964](55436 call isRefIter call_tmp[610959]))
      (554600 'move' tmp[554598](418583 call isTrue call_tmp[610964]))
      (554605 'move' tmp[554590](554602 '_paramFoldLogical' tmp[554591] tmp[554598]))
    }
    {
      (554610 'move' tmp[554590](554607 '_paramFoldLogical' tmp[554591] 0))
    }
    (507715 'move' ret[507710](507714 'deref' tmp[554590]))
    (507712 return ret[507710])
  }
  function vectorizeOnly[55450](arg iterables[55447]:_any[178](?) ...) : _unknown[51] "iterator fn" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507719] "RVV" "temp"
    {
      unknown _indexOfInterest[55464] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55465] "expr temp" "temp"
      unknown call_tmp[610969] "expr temp" "maybe param" "maybe type" "temp"
      (610972 'move' call_tmp[610969](55460 call iterables[55447] 0))
      (55474 'move' _iterator[55465](55472 call _getIterator call_tmp[610969]))
      Defer
      {
        {
          (55491 call _freeIterator _iterator[55465])
        }
      }
      { scopeless type
        (55480 'move' _indexOfInterest[55464](55477 call iteratorIndex _iterator[55465]))
      }
      ForLoop[55466]
      {
        unknown i[55484] "index var" "insert auto destroy"
        (474645 'end of statement')
        (55486 'move' i[55484] _indexOfInterest[55464])
        (474646 'end of statement' i[55484])
        unknown yret[507723] "YVV" "temp"
        (507726 'move' yret[507723](507725 'deref' i[55484]))
        (507728 yield yret[507723])
        (474648 'end of statement' i[55484])
        label _continueLabel[55469]
        _indexOfInterest[55464]
        _iterator[55465]
      }
      label _breakLabel[55470]
    }
    (507721 return ret[507719])
  }
  where {
    (55455 call singleValIter iterables[55447])
  }
  function vectorizeOnly[55508](arg iterables[55505]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507732] "RVV" "temp"
    {
      unknown _indexOfInterest[55522] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55523] "expr temp" "temp"
      unknown call_tmp[610974] "expr temp" "maybe param" "maybe type" "temp"
      (610977 'move' call_tmp[610974](55518 call iterables[55505] 0))
      (55532 'move' _iterator[55523](55530 call _getIterator call_tmp[610974]))
      Defer
      {
        {
          (55549 call _freeIterator _iterator[55523])
        }
      }
      { scopeless type
        (55538 'move' _indexOfInterest[55522](55535 call iteratorIndex _iterator[55523]))
      }
      ForLoop[55524]
      {
        unknown i[55542] "index var" "insert auto destroy"
        (474651 'end of statement')
        (55544 'move' i[55542] _indexOfInterest[55522])
        (474652 'end of statement' i[55542])
        unknown yret[507736] "YVV" "temp"
        (507739 'move' yret[507736](507738 'addr of' i[55542]))
        (507741 yield yret[507736])
        (474654 'end of statement' i[55542])
        label _continueLabel[55527]
        _indexOfInterest[55522]
        _iterator[55523]
      }
      label _breakLabel[55528]
    }
    (507734 return ret[507732])
  }
  where {
    (55513 call singleRefIter iterables[55505])
  }
  function vectorizeOnly[55567](arg iterables[55564]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507745] "RVV" "temp"
    {
      unknown _indexOfInterest[55581] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55582] "expr temp" "temp"
      (55590 'move' _iterator[55582](55577 call _getIteratorZip iterables[55564]))
      Defer
      {
        {
          (55606 call _freeIterator _iterator[55582])
        }
      }
      { scopeless type
        (55595 'move' _indexOfInterest[55581](55592 call iteratorIndex _iterator[55582]))
      }
      ForLoop[55583]
      {
        unknown i[55599] "index var" "insert auto destroy"
        (474657 'end of statement')
        (55601 'move' i[55599] _indexOfInterest[55581])
        (474658 'end of statement' i[55599])
        unknown yret[507749] "YVV" "temp"
        (507752 'move' yret[507749](507751 'deref' i[55599]))
        (507754 yield yret[507749])
        (474660 'end of statement' i[55599])
        label _continueLabel[55586]
        _indexOfInterest[55581]
        _iterator[55582]
      }
      label _breakLabel[55587]
    }
    (507747 return ret[507745])
  }
  where {
    (55571 call > numiterables[55562] 1)
  }
  function vectorizeOnly[55623](param arg tag[55620]:iterKind[453], arg iterables[55626]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507758] "RVV" "temp"
    {
      unknown _indexOfInterest[55652] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55653] "expr temp" "temp"
      unknown call_tmp[610979] "expr temp" "maybe param" "maybe type" "temp"
      (610982 'move' call_tmp[610979](55648 call iterables[55626] 0))
      (55662 'move' _iterator[55653](55660 call _getIterator call_tmp[610979]))
      Defer
      {
        {
          (55679 call _freeIterator _iterator[55653])
        }
      }
      { scopeless type
        (55668 'move' _indexOfInterest[55652](55665 call iteratorIndex _iterator[55653]))
      }
      ForLoop[55654]
      {
        unknown i[55672] "index var" "insert auto destroy"
        (474663 'end of statement')
        (55674 'move' i[55672] _indexOfInterest[55652])
        (474664 'end of statement' i[55672])
        unknown yret[507762] "YVV" "temp"
        (507765 'move' yret[507762](507764 'deref' i[55672]))
        (507767 yield yret[507762])
        (474666 'end of statement' i[55672])
        label _continueLabel[55657]
        _indexOfInterest[55652]
        _iterator[55653]
      }
      label _breakLabel[55658]
    }
    (507760 return ret[507758])
  }
  where {
    unknown tmp[418600] "maybe param" "temp"
    (418611 'move' tmp[418600](55636 call == tag[55620] standalone[451]))
    unknown call_tmp[610984] "expr temp" "maybe param" "maybe type" "temp"
    (610987 'move' call_tmp[610984](418613 call _cond_invalid tmp[418600]))
    if call_tmp[610984]
    {
      (418616 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554617] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554618] "maybe param" "temp"
    unknown call_tmp[610989] "expr temp" "maybe param" "maybe type" "temp"
    (610992 'move' call_tmp[610989](418601 call isTrue tmp[418600]))
    (554623 'move' tmp[554618](554621 call _cond_test call_tmp[610989]))
    if tmp[554618]
    {
      unknown tmp[554625] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610994] "expr temp" "maybe param" "maybe type" "temp"
      (610997 'move' call_tmp[610994](55641 call singleValIter iterables[55626]))
      (554627 'move' tmp[554625](418604 call isTrue call_tmp[610994]))
      (554632 'move' tmp[554617](554629 '_paramFoldLogical' tmp[554618] tmp[554625]))
    }
    {
      (554637 'move' tmp[554617](554634 '_paramFoldLogical' tmp[554618] 0))
    }
    (748095 call chpl_statementLevelSymbol tmp[554617])
  }
  function vectorizeOnly[55696](param arg tag[55693]:iterKind[453], arg iterables[55699]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507771] "RVV" "temp"
    {
      unknown _indexOfInterest[55723] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55724] "expr temp" "temp"
      unknown call_tmp[610999] "expr temp" "maybe param" "maybe type" "temp"
      (611002 'move' call_tmp[610999](55719 call iterables[55699] 0))
      (55733 'move' _iterator[55724](55731 call _getIterator call_tmp[610999]))
      Defer
      {
        {
          (55750 call _freeIterator _iterator[55724])
        }
      }
      { scopeless type
        (55739 'move' _indexOfInterest[55723](55736 call iteratorIndex _iterator[55724]))
      }
      ForLoop[55725]
      {
        unknown i[55743] "index var" "insert auto destroy"
        (474669 'end of statement')
        (55745 'move' i[55743] _indexOfInterest[55723])
        (474670 'end of statement' i[55743])
        unknown yret[507775] "YVV" "temp"
        (507778 'move' yret[507775](507777 'addr of' i[55743]))
        (507780 yield yret[507775])
        (474672 'end of statement' i[55743])
        label _continueLabel[55728]
        _indexOfInterest[55723]
        _iterator[55724]
      }
      label _breakLabel[55729]
    }
    (507773 return ret[507771])
  }
  where {
    unknown tmp[418621] "maybe param" "temp"
    (418632 'move' tmp[418621](55707 call == tag[55693] standalone[451]))
    unknown call_tmp[611004] "expr temp" "maybe param" "maybe type" "temp"
    (611007 'move' call_tmp[611004](418634 call _cond_invalid tmp[418621]))
    if call_tmp[611004]
    {
      (418637 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554644] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554645] "maybe param" "temp"
    unknown call_tmp[611009] "expr temp" "maybe param" "maybe type" "temp"
    (611012 'move' call_tmp[611009](418622 call isTrue tmp[418621]))
    (554650 'move' tmp[554645](554648 call _cond_test call_tmp[611009]))
    if tmp[554645]
    {
      unknown tmp[554652] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611014] "expr temp" "maybe param" "maybe type" "temp"
      (611017 'move' call_tmp[611014](55712 call singleRefIter iterables[55699]))
      (554654 'move' tmp[554652](418625 call isTrue call_tmp[611014]))
      (554659 'move' tmp[554644](554656 '_paramFoldLogical' tmp[554645] tmp[554652]))
    }
    {
      (554664 'move' tmp[554644](554661 '_paramFoldLogical' tmp[554645] 0))
    }
    (748097 call chpl_statementLevelSymbol tmp[554644])
  }
  function vectorizeOnly[55767](param arg tag[55764]:iterKind[453], arg iterables[55771]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507784] "RVV" "temp"
    {
      unknown _indexOfInterest[55795] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55796] "expr temp" "temp"
      (55804 'move' _iterator[55796](55791 call _getIteratorZip iterables[55771]))
      Defer
      {
        {
          (55820 call _freeIterator _iterator[55796])
        }
      }
      { scopeless type
        (55809 'move' _indexOfInterest[55795](55806 call iteratorIndex _iterator[55796]))
      }
      ForLoop[55797]
      {
        unknown i[55813] "index var" "insert auto destroy"
        (474675 'end of statement')
        (55815 'move' i[55813] _indexOfInterest[55795])
        (474676 'end of statement' i[55813])
        unknown yret[507788] "YVV" "temp"
        (507791 'move' yret[507788](507790 'deref' i[55813]))
        (507793 yield yret[507788])
        (474678 'end of statement' i[55813])
        label _continueLabel[55800]
        _indexOfInterest[55795]
        _iterator[55796]
      }
      label _breakLabel[55801]
    }
    (507786 return ret[507784])
  }
  where {
    unknown tmp[418642] "maybe param" "temp"
    (418653 'move' tmp[418642](55779 call == tag[55764] standalone[451]))
    unknown call_tmp[611019] "expr temp" "maybe param" "maybe type" "temp"
    (611022 'move' call_tmp[611019](418655 call _cond_invalid tmp[418642]))
    if call_tmp[611019]
    {
      (418658 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554671] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554672] "maybe param" "temp"
    unknown call_tmp[611024] "expr temp" "maybe param" "maybe type" "temp"
    (611027 'move' call_tmp[611024](418643 call isTrue tmp[418642]))
    (554677 'move' tmp[554672](554675 call _cond_test call_tmp[611024]))
    if tmp[554672]
    {
      unknown tmp[554679] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611029] "expr temp" "maybe param" "maybe type" "temp"
      (611032 'move' call_tmp[611029](55783 call > numiterables[55769] 1))
      (554681 'move' tmp[554679](418646 call isTrue call_tmp[611029]))
      (554686 'move' tmp[554671](554683 '_paramFoldLogical' tmp[554672] tmp[554679]))
    }
    {
      (554691 'move' tmp[554671](554688 '_paramFoldLogical' tmp[554672] 0))
    }
    (748099 call chpl_statementLevelSymbol tmp[554671])
  }
  function vectorizeOnly[55837](param arg tag[55834]:iterKind[453], arg iterables[55840]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507797] "RVV" "temp"
    unknown yret[507801] "YVV" "temp"
    unknown call_tmp[611034] "expr temp" "maybe param" "maybe type" "temp"
    (611037 'move' call_tmp[611034](55861 call iterables[55840] 0))
    (507804 'move' yret[507801](507803 'deref' call_tmp[611034]))
    (507806 yield yret[507801])
    (507799 return ret[507797])
  }
  where {
    unknown tmp[418663] "maybe param" "temp"
    (418674 'move' tmp[418663](55850 call == tag[55834] leader[447]))
    unknown call_tmp[611039] "expr temp" "maybe param" "maybe type" "temp"
    (611042 'move' call_tmp[611039](418676 call _cond_invalid tmp[418663]))
    if call_tmp[611039]
    {
      (418679 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554698] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554699] "maybe param" "temp"
    unknown call_tmp[611044] "expr temp" "maybe param" "maybe type" "temp"
    (611047 'move' call_tmp[611044](418664 call isTrue tmp[418663]))
    (554704 'move' tmp[554699](554702 call _cond_test call_tmp[611044]))
    if tmp[554699]
    {
      unknown tmp[554706] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611049] "expr temp" "maybe param" "maybe type" "temp"
      (611052 'move' call_tmp[611049](55855 call singleValIter iterables[55840]))
      (554708 'move' tmp[554706](418667 call isTrue call_tmp[611049]))
      (554713 'move' tmp[554698](554710 '_paramFoldLogical' tmp[554699] tmp[554706]))
    }
    {
      (554718 'move' tmp[554698](554715 '_paramFoldLogical' tmp[554699] 0))
    }
    (748101 call chpl_statementLevelSymbol tmp[554698])
  }
  function vectorizeOnly[55874](param arg tag[55871]:iterKind[453], arg iterables[55877]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507810] "RVV" "temp"
    unknown yret[507814] "YVV" "temp"
    unknown call_tmp[611054] "expr temp" "maybe param" "maybe type" "temp"
    (611057 'move' call_tmp[611054](55896 call iterables[55877] 0))
    (507817 'move' yret[507814](507816 'addr of' call_tmp[611054]))
    (507819 yield yret[507814])
    (507812 return ret[507810])
  }
  where {
    unknown tmp[418684] "maybe param" "temp"
    (418695 'move' tmp[418684](55885 call == tag[55871] leader[447]))
    unknown call_tmp[611059] "expr temp" "maybe param" "maybe type" "temp"
    (611062 'move' call_tmp[611059](418697 call _cond_invalid tmp[418684]))
    if call_tmp[611059]
    {
      (418700 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554725] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554726] "maybe param" "temp"
    unknown call_tmp[611064] "expr temp" "maybe param" "maybe type" "temp"
    (611067 'move' call_tmp[611064](418685 call isTrue tmp[418684]))
    (554731 'move' tmp[554726](554729 call _cond_test call_tmp[611064]))
    if tmp[554726]
    {
      unknown tmp[554733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611069] "expr temp" "maybe param" "maybe type" "temp"
      (611072 'move' call_tmp[611069](55890 call singleRefIter iterables[55877]))
      (554735 'move' tmp[554733](418688 call isTrue call_tmp[611069]))
      (554740 'move' tmp[554725](554737 '_paramFoldLogical' tmp[554726] tmp[554733]))
    }
    {
      (554745 'move' tmp[554725](554742 '_paramFoldLogical' tmp[554726] 0))
    }
    (748103 call chpl_statementLevelSymbol tmp[554725])
  }
  function vectorizeOnly[55909](param arg tag[55906]:iterKind[453], arg iterables[55913]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507823] "RVV" "temp"
    unknown yret[507827] "YVV" "temp"
    (507830 'move' yret[507827](507829 'deref' iterables[55913]))
    (507832 yield yret[507827])
    (507825 return ret[507823])
  }
  where {
    unknown tmp[418705] "maybe param" "temp"
    (418716 'move' tmp[418705](55921 call == tag[55906] leader[447]))
    unknown call_tmp[611074] "expr temp" "maybe param" "maybe type" "temp"
    (611077 'move' call_tmp[611074](418718 call _cond_invalid tmp[418705]))
    if call_tmp[611074]
    {
      (418721 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554752] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554753] "maybe param" "temp"
    unknown call_tmp[611079] "expr temp" "maybe param" "maybe type" "temp"
    (611082 'move' call_tmp[611079](418706 call isTrue tmp[418705]))
    (554758 'move' tmp[554753](554756 call _cond_test call_tmp[611079]))
    if tmp[554753]
    {
      unknown tmp[554760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611084] "expr temp" "maybe param" "maybe type" "temp"
      (611087 'move' call_tmp[611084](55925 call > numiterables[55911] 1))
      (554762 'move' tmp[554760](418709 call isTrue call_tmp[611084]))
      (554767 'move' tmp[554752](554764 '_paramFoldLogical' tmp[554753] tmp[554760]))
    }
    {
      (554772 'move' tmp[554752](554769 '_paramFoldLogical' tmp[554753] 0))
    }
    (748105 call chpl_statementLevelSymbol tmp[554752])
  }
  function vectorizeOnly[55942](param arg tag[55939]:iterKind[453], arg followThis[55944]:_any[178](?), arg iterables[55947]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507836] "RVV" "temp"
    {
      unknown _indexOfInterest[55973] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55974] "expr temp" "temp"
      unknown call_tmp[611089] "expr temp" "maybe param" "maybe type" "temp"
      (611092 'move' call_tmp[611089](55969 call iterables[55947] 0))
      (55983 'move' _iterator[55974](55981 call _getIterator call_tmp[611089]))
      Defer
      {
        {
          (56000 call _freeIterator _iterator[55974])
        }
      }
      { scopeless type
        (55989 'move' _indexOfInterest[55973](55986 call iteratorIndex _iterator[55974]))
      }
      ForLoop[55975]
      {
        unknown i[55993] "index var" "insert auto destroy"
        (474684 'end of statement')
        (55995 'move' i[55993] _indexOfInterest[55973])
        (474685 'end of statement' i[55993])
        unknown yret[507840] "YVV" "temp"
        (507843 'move' yret[507840](507842 'deref' i[55993]))
        (507845 yield yret[507840])
        (474687 'end of statement' i[55993])
        label _continueLabel[55978]
        _indexOfInterest[55973]
        _iterator[55974]
      }
      label _breakLabel[55979]
    }
    (507838 return ret[507836])
  }
  where {
    unknown tmp[418726] "maybe param" "temp"
    (418737 'move' tmp[418726](55957 call == tag[55939] follower[449]))
    unknown call_tmp[611094] "expr temp" "maybe param" "maybe type" "temp"
    (611097 'move' call_tmp[611094](418739 call _cond_invalid tmp[418726]))
    if call_tmp[611094]
    {
      (418742 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554779] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554780] "maybe param" "temp"
    unknown call_tmp[611099] "expr temp" "maybe param" "maybe type" "temp"
    (611102 'move' call_tmp[611099](418727 call isTrue tmp[418726]))
    (554785 'move' tmp[554780](554783 call _cond_test call_tmp[611099]))
    if tmp[554780]
    {
      unknown tmp[554787] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611104] "expr temp" "maybe param" "maybe type" "temp"
      (611107 'move' call_tmp[611104](55962 call singleValIter iterables[55947]))
      (554789 'move' tmp[554787](418730 call isTrue call_tmp[611104]))
      (554794 'move' tmp[554779](554791 '_paramFoldLogical' tmp[554780] tmp[554787]))
    }
    {
      (554799 'move' tmp[554779](554796 '_paramFoldLogical' tmp[554780] 0))
    }
    (748107 call chpl_statementLevelSymbol tmp[554779])
  }
  function vectorizeOnly[56017](param arg tag[56014]:iterKind[453], arg followThis[56019]:_any[178](?), arg iterables[56022]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507849] "RVV" "temp"
    {
      unknown _indexOfInterest[56046] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56047] "expr temp" "temp"
      unknown call_tmp[611109] "expr temp" "maybe param" "maybe type" "temp"
      (611112 'move' call_tmp[611109](56042 call iterables[56022] 0))
      (56056 'move' _iterator[56047](56054 call _getIterator call_tmp[611109]))
      Defer
      {
        {
          (56073 call _freeIterator _iterator[56047])
        }
      }
      { scopeless type
        (56062 'move' _indexOfInterest[56046](56059 call iteratorIndex _iterator[56047]))
      }
      ForLoop[56048]
      {
        unknown i[56066] "index var" "insert auto destroy"
        (474690 'end of statement')
        (56068 'move' i[56066] _indexOfInterest[56046])
        (474691 'end of statement' i[56066])
        unknown yret[507853] "YVV" "temp"
        (507856 'move' yret[507853](507855 'addr of' i[56066]))
        (507858 yield yret[507853])
        (474693 'end of statement' i[56066])
        label _continueLabel[56051]
        _indexOfInterest[56046]
        _iterator[56047]
      }
      label _breakLabel[56052]
    }
    (507851 return ret[507849])
  }
  where {
    unknown tmp[418747] "maybe param" "temp"
    (418758 'move' tmp[418747](56030 call == tag[56014] follower[449]))
    unknown call_tmp[611114] "expr temp" "maybe param" "maybe type" "temp"
    (611117 'move' call_tmp[611114](418760 call _cond_invalid tmp[418747]))
    if call_tmp[611114]
    {
      (418763 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554806] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554807] "maybe param" "temp"
    unknown call_tmp[611119] "expr temp" "maybe param" "maybe type" "temp"
    (611122 'move' call_tmp[611119](418748 call isTrue tmp[418747]))
    (554812 'move' tmp[554807](554810 call _cond_test call_tmp[611119]))
    if tmp[554807]
    {
      unknown tmp[554814] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611124] "expr temp" "maybe param" "maybe type" "temp"
      (611127 'move' call_tmp[611124](56035 call singleRefIter iterables[56022]))
      (554816 'move' tmp[554814](418751 call isTrue call_tmp[611124]))
      (554821 'move' tmp[554806](554818 '_paramFoldLogical' tmp[554807] tmp[554814]))
    }
    {
      (554826 'move' tmp[554806](554823 '_paramFoldLogical' tmp[554807] 0))
    }
    (748109 call chpl_statementLevelSymbol tmp[554806])
  }
  function vectorizeOnly[56090](param arg tag[56087]:iterKind[453], arg followThis[56092]:_any[178](?), arg iterables[56096]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507862] "RVV" "temp"
    {
      unknown _indexOfInterest[56120] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56121] "expr temp" "temp"
      (56129 'move' _iterator[56121](56116 call _getIteratorZip iterables[56096]))
      Defer
      {
        {
          (56145 call _freeIterator _iterator[56121])
        }
      }
      { scopeless type
        (56134 'move' _indexOfInterest[56120](56131 call iteratorIndex _iterator[56121]))
      }
      ForLoop[56122]
      {
        unknown i[56138] "index var" "insert auto destroy"
        (474696 'end of statement')
        (56140 'move' i[56138] _indexOfInterest[56120])
        (474697 'end of statement' i[56138])
        unknown yret[507866] "YVV" "temp"
        (507869 'move' yret[507866](507868 'deref' i[56138]))
        (507871 yield yret[507866])
        (474699 'end of statement' i[56138])
        label _continueLabel[56125]
        _indexOfInterest[56120]
        _iterator[56121]
      }
      label _breakLabel[56126]
    }
    (507864 return ret[507862])
  }
  where {
    unknown tmp[418768] "maybe param" "temp"
    (418779 'move' tmp[418768](56104 call == tag[56087] follower[449]))
    unknown call_tmp[611129] "expr temp" "maybe param" "maybe type" "temp"
    (611132 'move' call_tmp[611129](418781 call _cond_invalid tmp[418768]))
    if call_tmp[611129]
    {
      (418784 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554833] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554834] "maybe param" "temp"
    unknown call_tmp[611134] "expr temp" "maybe param" "maybe type" "temp"
    (611137 'move' call_tmp[611134](418769 call isTrue tmp[418768]))
    (554839 'move' tmp[554834](554837 call _cond_test call_tmp[611134]))
    if tmp[554834]
    {
      unknown tmp[554841] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611139] "expr temp" "maybe param" "maybe type" "temp"
      (611142 'move' call_tmp[611139](56108 call > numiterables[56094] 1))
      (554843 'move' tmp[554841](418772 call isTrue call_tmp[611139]))
      (554848 'move' tmp[554833](554845 '_paramFoldLogical' tmp[554834] tmp[554841]))
    }
    {
      (554853 'move' tmp[554833](554850 '_paramFoldLogical' tmp[554834] 0))
    }
    (748111 call chpl_statementLevelSymbol tmp[554833])
  }
  (354955 'used modules list'(52120 'use' ChapelStandard[20264])(52124 'use' Reflection[224794]))
}