AST dump for ChapelIteratorSupport after pass normalize.
Module use list: ChapelStandard Reflection 

{
  function chpl__init_ChapelIteratorSupport[415985]() : void[4] "insert line file info" "module init"
  {
    (508010 return _void[55])
  }
  function iteratorIndex[52135](arg ic[52132]:_iteratorClass[208](?)) : _unknown[51] "allow ref" "no doc" "fn returns iterator"
  {
    unknown ret[506908] "RVV" "temp"
    (52144 call(52140 call (partial) advance _mt[243] ic[52132]))
    (474589 'end of statement')
    (506912 'move' ret[506908](52154 call(52150 call (partial) getValue _mt[243] ic[52132])))
    (506910 return ret[506908])
  }
  function iteratorIndex[52165](arg t[52162]:_tuple[56202](?)) : _unknown[51] "expand tuples with values" "no doc" "fn returns iterator"
  {
    unknown ret[506930] "RVV" "temp"
    function iteratorIndexHelp[52173](arg t[52170]:_tuple[56202](?), param arg dim[52176]:int(64)[13]) : _unknown[51] "expand tuples with values"
    {
      unknown ret[506916] "RVV" "temp"
      unknown call_tmp[609343] "expr temp" "maybe param" "maybe type" "temp"
      (609346 'move' call_tmp[609343](52181 call size _mt[243] t[52170]))
      unknown call_tmp[609348] "expr temp" "maybe param" "maybe type" "temp"
      (609351 'move' call_tmp[609348](52185 call - call_tmp[609343] 1))
      unknown call_tmp[609353] "expr temp" "maybe param" "maybe type" "temp"
      (609356 'move' call_tmp[609353](52187 call == dim[52176] call_tmp[609348]))
      unknown call_tmp[609358] "expr temp" "maybe param" "maybe type" "temp"
      (609361 'move' call_tmp[609358](52222 call _cond_test call_tmp[609353]))
      if call_tmp[609358]
      {
        unknown call_tmp[609363] "expr temp" "maybe param" "maybe type" "temp"
        (609366 'move' call_tmp[609363](52194 call t[52170] dim[52176]))
        unknown call_tmp[609368] "expr temp" "maybe param" "maybe type" "temp"
        (609371 'move' call_tmp[609368](52196 call iteratorIndex call_tmp[609363]))
        (506920 'move' ret[506916](52198 call _build_tuple_always_allow_ref call_tmp[609368]))
        gotoReturn _end_iteratorIndexHelp[506914] _end_iteratorIndexHelp[506914]
      }
      {
        unknown call_tmp[609373] "expr temp" "maybe param" "maybe type" "temp"
        (609376 'move' call_tmp[609373](52206 call t[52170] dim[52176]))
        unknown call_tmp[609378] "expr temp" "maybe param" "maybe type" "temp"
        (609381 'move' call_tmp[609378](52208 call iteratorIndex call_tmp[609373]))
        unknown call_tmp[609383] "expr temp" "maybe param" "maybe type" "temp"
        (609386 'move' call_tmp[609383](52215 call + dim[52176] 1))
        unknown call_tmp[609388] "expr temp" "maybe param" "maybe type" "temp"
        (609391 'move' call_tmp[609388](52217 call iteratorIndexHelp t[52170] call_tmp[609383]))
        (506924 'move' ret[506916](52219 call _build_tuple_always_allow_ref call_tmp[609378](52218 'expand_tuple' call_tmp[609388])))
        gotoReturn _end_iteratorIndexHelp[506914] _end_iteratorIndexHelp[506914]
      }
      label _end_iteratorIndexHelp[506914]
      (506918 return ret[506916])
    }
    (506934 'move' ret[506930](52236 call iteratorIndexHelp t[52162] 0))
    (506932 return ret[506930])
  }
  function iteratorIndexType[52245](arg x[52243]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[506938] "RVV" "temp" "type variable"
    unknown call_tmp[609393] "expr temp" "maybe param" "maybe type" "temp"
    (609396 'move' call_tmp[609393](52250 call isArray x[52243]))
    unknown call_tmp[609398] "expr temp" "maybe param" "maybe type" "temp"
    (609401 'move' call_tmp[609398](52323 call _cond_test call_tmp[609393]))
    if call_tmp[609398]
    {
      unknown call_tmp[609405] "expr temp" "maybe param" "maybe type" "temp"
      (609408 'move' call_tmp[609405](52252 call eltType _mt[243] x[52243]))
      (506943 'move' ret[506938](506942 'deref' call_tmp[609405]))
      gotoReturn _end_iteratorIndexType[506936] _end_iteratorIndexType[506936]
    }
    {
      unknown call_tmp[609410] "expr temp" "maybe param" "maybe type" "temp"
      (609413 'move' call_tmp[609410](52261 call isDomain x[52243]))
      unknown call_tmp[609415] "expr temp" "maybe param" "maybe type" "temp"
      (609418 'move' call_tmp[609415](52319 call _cond_test call_tmp[609410]))
      if call_tmp[609415]
      {
        unknown tmp[554418] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[554419] "maybe param" "temp"
        unknown call_tmp[609422] "expr temp" "maybe param" "maybe type" "temp"
        (609425 'move' call_tmp[609422](52265 call rank _mt[243] x[52243]))
        unknown call_tmp[609427] "expr temp" "maybe param" "maybe type" "temp"
        (609430 'move' call_tmp[609427](52269 call == call_tmp[609422] 1))
        (554424 'move' tmp[554419](554422 call _cond_test call_tmp[609427]))
        if tmp[554419]
        {
          unknown tmp[554426] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (554428 'move' tmp[554426](52274 call idxType _mt[243] x[52243]))
          (554433 'move' tmp[554418](554430 '_paramFoldLogical' tmp[554419] tmp[554426]))
        }
        {
          unknown tmp[554435] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[609436] "expr temp" "maybe param" "maybe type" "temp"
          (609439 'move' call_tmp[609436](52278 call rank _mt[243] x[52243]))
          unknown call_tmp[609443] "expr temp" "maybe param" "maybe type" "temp"
          (609446 'move' call_tmp[609443](52282 call idxType _mt[243] x[52243]))
          (554437 'move' tmp[554435](52285 call * call_tmp[609436] call_tmp[609443]))
          (554442 'move' tmp[554418](554439 '_paramFoldLogical' tmp[554419] tmp[554435]))
        }
        (506948 'move' ret[506938](506947 'deref' tmp[554418]))
        gotoReturn _end_iteratorIndexType[506936] _end_iteratorIndexType[506936]
      }
      {
        unknown call_tmp[609448] "maybe param" "maybe type" "temp"
        (609451 'move' call_tmp[609448](52296 call _getIterator x[52243]))
        unknown ic[52297] "dead at end of block" "insert auto destroy" "no copy"
        (540772 'init var' ic[52297] call_tmp[609448])
        (52300 'end of statement')
        unknown call_tmp[609453] "maybe param" "maybe type" "temp"
        (609456 'move' call_tmp[609453](52305 call iteratorIndex ic[52297]))
        unknown i[52306] "dead at end of block" "insert auto destroy" "no copy"
        (540774 'init var' i[52306] call_tmp[609453])
        (52309 'end of statement' ic[52297])
        (52313 call _freeIterator ic[52297])
        (474597 'end of statement' ic[52297])
        unknown call_tmp[609458] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (609461 'move' call_tmp[609458](52316 'typeof' i[52306]))
        (506953 'move' ret[506938](506952 'deref' call_tmp[609458]))
        gotoReturn _end_iteratorIndexType[506936] _end_iteratorIndexType[506936]
        (474599 'end of statement' i[52306])
      }
    }
    label _end_iteratorIndexType[506936]
    (506940 return ret[506938])
  }
  function iteratorIndexTypeZip[52337](arg xs[52334]:_any[178](?) ...) type : _unknown[51] "no doc"
  {
    unknown ret[506975] "RVV" "temp" "type variable"
    function iteratorIndexTypeZipHelp[52343](param arg dim[52341]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[506959] "RVV" "temp" "type variable"
      unknown call_tmp[609465] "expr temp" "maybe param" "maybe type" "temp"
      (609468 'move' call_tmp[609465](52347 call size _mt[243] xs[52334]))
      unknown call_tmp[609470] "expr temp" "maybe param" "maybe type" "temp"
      (609473 'move' call_tmp[609470](52351 call - call_tmp[609465] 1))
      unknown call_tmp[609475] "expr temp" "maybe param" "maybe type" "temp"
      (609478 'move' call_tmp[609475](52353 call == dim[52341] call_tmp[609470]))
      unknown call_tmp[609480] "expr temp" "maybe param" "maybe type" "temp"
      (609483 'move' call_tmp[609480](52386 call _cond_test call_tmp[609475]))
      if call_tmp[609480]
      {
        unknown call_tmp[609485] "expr temp" "maybe param" "maybe type" "temp"
        (609488 'move' call_tmp[609485](52359 call xs[52334] dim[52341]))
        unknown call_tmp[609490] "expr temp" "maybe param" "maybe type" "temp"
        (609493 'move' call_tmp[609490](52361 call iteratorIndexType call_tmp[609485]))
        unknown call_tmp[609495] "expr temp" "maybe param" "maybe type" "temp"
        (609498 'move' call_tmp[609495](52362 call _build_tuple call_tmp[609490]))
        (506964 'move' ret[506959](506963 'deref' call_tmp[609495]))
        gotoReturn _end_iteratorIndexTypeZipHelp[506957] _end_iteratorIndexTypeZipHelp[506957]
      }
      {
        unknown call_tmp[609500] "expr temp" "maybe param" "maybe type" "temp"
        (609503 'move' call_tmp[609500](52370 call xs[52334] dim[52341]))
        unknown call_tmp[609505] "expr temp" "maybe param" "maybe type" "temp"
        (609508 'move' call_tmp[609505](52372 call iteratorIndexType call_tmp[609500]))
        unknown call_tmp[609510] "expr temp" "maybe param" "maybe type" "temp"
        (609513 'move' call_tmp[609510](52376 call + dim[52341] 1))
        unknown call_tmp[609515] "expr temp" "maybe param" "maybe type" "temp"
        (609518 'move' call_tmp[609515](52379 call iteratorIndexTypeZipHelp call_tmp[609510]))
        unknown call_tmp[609520] "expr temp" "maybe param" "maybe type" "temp"
        (609523 'move' call_tmp[609520](52382 call _build_tuple call_tmp[609505](52380 'expand_tuple' call_tmp[609515])))
        (506969 'move' ret[506959](506968 'deref' call_tmp[609520]))
        gotoReturn _end_iteratorIndexTypeZipHelp[506957] _end_iteratorIndexTypeZipHelp[506957]
      }
      label _end_iteratorIndexTypeZipHelp[506957]
      (506961 return ret[506959])
    }
    unknown call_tmp[609525] "expr temp" "maybe param" "maybe type" "temp"
    (609528 'move' call_tmp[609525](52399 call iteratorIndexTypeZipHelp 0))
    (506980 'move' ret[506975](506979 'deref' call_tmp[609525]))
    (506977 return ret[506975])
  }
  function iteratorToArrayElementType[52410](arg t[52407]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[506984] "RVV" "temp" "type variable"
    unknown call_tmp[609530] "expr temp" "maybe param" "maybe type" "temp"
    (609533 'move' call_tmp[609530](52433 'scalar promotion type' t[52407]))
    unknown call_tmp[609535] "expr temp" "maybe param" "maybe type" "temp"
    (609538 'move' call_tmp[609535](52435 call chpl_buildStandInRTT call_tmp[609530]))
    unknown call_tmp[609540] "expr temp" "maybe param" "maybe type" "temp"
    (609543 'move' call_tmp[609540](52437 call chpl__unref call_tmp[609535]))
    (506989 'move' ret[506984](506988 'deref' call_tmp[609540]))
    (506986 return ret[506984])
  }
  function chpl_buildStandInRTT[52449](arg domType[52446]:_domain[125908](?)) type : _unknown[51] "unsafe"
  {
    unknown ret[506993] "RVV" "temp" "type variable"
    unknown instanceObj[52488] "dead at end of block" "insert auto destroy"
    unknown call_tmp[609545] "expr temp" "maybe param" "maybe type" "temp"
    (609548 'move' call_tmp[609545](52487 'static field type' domType[52446] "_instance"))
    (540776 'default init var' instanceObj[52488] call_tmp[609545])
    (52491 'end of statement')
    unknown call_tmp[609550] "expr temp" "maybe param" "maybe type" "temp"
    (609553 'move' call_tmp[609550](52496 call chpl_buildStandInRTT instanceObj[52488]))
    (506998 'move' ret[506993](506997 'deref' call_tmp[609550]))
    gotoReturn _end_chpl_buildStandInRTT[506991] _end_chpl_buildStandInRTT[506991]
    (474605 'end of statement' instanceObj[52488])
    label _end_chpl_buildStandInRTT[506991]
    (506995 return ret[506993])
  }
  function chpl_buildStandInRTT[52509](arg arrType[52506]:_array[133594](?)) type : _unknown[51] "unsafe"
  {
    unknown ret[507004] "RVV" "temp" "type variable"
    unknown arrInstType[52516] "dead at end of block" "insert auto destroy" "type variable"(52515 'static field type' arrType[52506] "_instance")
    (540781 'move' arrInstType[52516](540778 'static field type' arrType[52506] "_instance"))
    unknown domInstType[52541] "dead at end of block" "insert auto destroy" "type variable"(52540 'static field type' arrInstType[52516] "dom")
    (540786 'move' domInstType[52541](540783 'static field type' arrInstType[52516] "dom"))
    unknown domInstance[52545] "dead at end of block" "insert auto destroy"
    (540788 'default init var' domInstance[52545] domInstType[52541])
    (52548 'end of statement')
    unknown standinDomain[52553] "dead at end of block" "no auto destroy"
    unknown call_tmp[609555] "expr temp" "maybe param" "maybe type" "temp"
    (609558 'move' call_tmp[609555](52552 call chpl_buildStandInRTT domInstance[52545]))
    (540790 'default init var' standinDomain[52553] call_tmp[609555])
    (52556 'end of statement')
    unknown instanceObj[52558] "dead at end of block" "insert auto destroy"
    (540792 'default init var' instanceObj[52558] arrInstType[52516])
    (52561 'end of statement' arrInstType[52516] domInstType[52541] domInstance[52545] arrInstType[52516])
    unknown call_tmp[609562] "expr temp" "maybe param" "maybe type" "temp"
    (609565 'move' call_tmp[609562](52581 call eltType _mt[243] instanceObj[52558]))
    unknown instanceEltType[52585] "dead at end of block" "insert auto destroy" "type variable"(52584 'static typeof' call_tmp[609562])
    unknown call_tmp[609569] "expr temp" "maybe param" "maybe type" "temp"
    (609572 'move' call_tmp[609569](540796 call eltType _mt[243] instanceObj[52558]))
    (540799 'move' instanceEltType[52585](540794 'static typeof' call_tmp[609569]))
    (474611 'end of statement' instanceObj[52558])
    unknown call_tmp[609574] "expr temp" "maybe param" "maybe type" "temp"
    (609577 'move' call_tmp[609574](52594 call chpl_buildStandInRTT instanceEltType[52585]))
    unknown call_tmp[609579] "expr temp" "maybe param" "maybe type" "temp"
    (609582 'move' call_tmp[609579](52595 call chpl__buildArrayRuntimeType standinDomain[52553] call_tmp[609574]))
    (507009 'move' ret[507004](507008 'deref' call_tmp[609579]))
    gotoReturn _end_chpl_buildStandInRTT[507002] _end_chpl_buildStandInRTT[507002]
    (474613 'end of statement' standinDomain[52553] instanceEltType[52585])
    label _end_chpl_buildStandInRTT[507002]
    (507006 return ret[507004])
  }
  function chpl_buildStandInRTT[52606](arg irType[52603]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[507036] "RVV" "temp" "type variable"
    unknown shapeType[52612] "dead at end of block" "insert auto destroy" "type variable"(52611 call chpl_iteratorShapeStaticTypeOrNothing irType[52603])
    (540804 'move' shapeType[52612](540802 call chpl_iteratorShapeStaticTypeOrNothing irType[52603]))
    function standinType[52618]() type : _unknown[51] "unsafe"
    {
      unknown ret[507015] "RVV" "temp" "type variable"
      unknown call_tmp[609584] "expr temp" "maybe param" "maybe type" "temp"
      (609587 'move' call_tmp[609584](52622 call == shapeType[52612] nothing[7]))
      unknown call_tmp[609589] "expr temp" "maybe param" "maybe type" "temp"
      (609592 'move' call_tmp[609589](52678 call _cond_test call_tmp[609584]))
      if call_tmp[609589]
      {
        unknown call_tmp[609594] "expr temp" "maybe param" "maybe type" "temp"
        (609597 'move' call_tmp[609594](52627 call chpl__buildDomainRuntimeType defaultDist[94053] 1))
        (507020 'move' ret[507015](507019 'deref' call_tmp[609594]))
        gotoReturn _end_standinType[507013] _end_standinType[507013]
      }
      {
        unknown call_tmp[609599] "expr temp" "maybe param" "maybe type" "temp"
        (609602 'move' call_tmp[609599](52635 call isRange shapeType[52612]))
        unknown call_tmp[609604] "expr temp" "maybe param" "maybe type" "temp"
        (609607 'move' call_tmp[609604](52674 call _cond_test call_tmp[609599]))
        if call_tmp[609604]
        {
          unknown call_tmp[609609] "expr temp" "maybe param" "maybe type" "temp"
          (609612 'move' call_tmp[609609](52639 call chpl__buildDomainRuntimeType defaultDist[94053] 1))
          (507025 'move' ret[507015](507024 'deref' call_tmp[609609]))
          gotoReturn _end_standinType[507013] _end_standinType[507013]
        }
        {
          unknown domInstance[52645] "dead at end of block" "insert auto destroy"
          (540806 'default init var' domInstance[52645] shapeType[52612])
          (52648 'end of statement')
          unknown tmp[418501] "maybe param" "temp"
          unknown call_tmp[609614] "expr temp" "maybe param" "maybe type" "temp"
          (609617 'move' call_tmp[609614](52654 call isDomain domInstance[52645]))
          (418512 'move' tmp[418501](52655 call ! call_tmp[609614]))
          unknown call_tmp[609619] "expr temp" "maybe param" "maybe type" "temp"
          (609622 'move' call_tmp[609619](418514 call _cond_invalid tmp[418501]))
          if call_tmp[609619]
          {
            (418517 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[554449] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[554450] "maybe param" "temp"
          unknown call_tmp[609624] "expr temp" "maybe param" "maybe type" "temp"
          (609627 'move' call_tmp[609624](418502 call isTrue tmp[418501]))
          (554455 'move' tmp[554450](554453 call _cond_test call_tmp[609624]))
          if tmp[554450]
          {
            unknown tmp[554457] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[609629] "expr temp" "maybe param" "maybe type" "temp"
            (609632 'move' call_tmp[609629](52660 call isArray domInstance[52645]))
            unknown call_tmp[609634] "expr temp" "maybe param" "maybe type" "temp"
            (609637 'move' call_tmp[609634](52661 call ! call_tmp[609629]))
            (554459 'move' tmp[554457](418505 call isTrue call_tmp[609634]))
            (554464 'move' tmp[554449](554461 '_paramFoldLogical' tmp[554450] tmp[554457]))
          }
          {
            (554469 'move' tmp[554449](554466 '_paramFoldLogical' tmp[554450] 0))
          }
          (52666 call compilerAssert tmp[554449])
          (474619 'end of statement' domInstance[52645])
          unknown call_tmp[609639] "expr temp" "maybe param" "maybe type" "temp"
          (609642 'move' call_tmp[609639](52671 call chpl_buildStandInRTT domInstance[52645]))
          (507030 'move' ret[507015](507029 'deref' call_tmp[609639]))
          gotoReturn _end_standinType[507013] _end_standinType[507013]
          (474621 'end of statement' domInstance[52645])
        }
      }
      label _end_standinType[507013]
      (507017 return ret[507015])
    }
    unknown standinDomain[52689] "dead at end of block" "no auto destroy"
    unknown call_tmp[609644] "expr temp" "maybe param" "maybe type" "temp"
    (609647 'move' call_tmp[609644](52688 call standinType))
    (540808 'default init var' standinDomain[52689] call_tmp[609644])
    (52692 'end of statement')
    unknown call_tmp[609649] "expr temp" "maybe param" "maybe type" "temp"
    (609652 'move' call_tmp[609649](52700 'scalar promotion type' irType[52603]))
    unknown call_tmp[609654] "expr temp" "maybe param" "maybe type" "temp"
    (609657 'move' call_tmp[609654](52702 call chpl_buildStandInRTT call_tmp[609649]))
    unknown call_tmp[609659] "expr temp" "maybe param" "maybe type" "temp"
    (609662 'move' call_tmp[609659](52703 call chpl__buildArrayRuntimeType standinDomain[52689] call_tmp[609654]))
    (507041 'move' ret[507036](507040 'deref' call_tmp[609659]))
    gotoReturn _end_chpl_buildStandInRTT[507034] _end_chpl_buildStandInRTT[507034]
    (474623 'end of statement' standinDomain[52689])
    label _end_chpl_buildStandInRTT[507034]
    (507038 return ret[507036])
  }
  function chpl_buildStandInRTT[52712](arg nonRTtype[52710]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[507047] "RVV" "temp" "type variable"
    (507052 'move' ret[507047](507051 'deref' nonRTtype[52710]))
    (507049 return ret[507047])
  }
  function chpl_buildStandInRTT[52724](arg domInst[52722]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[507056] "RVV" "temp" "type variable"
    unknown call_tmp[609666] "expr temp" "maybe param" "maybe type" "temp"
    (609669 'move' call_tmp[609666](52736 call rank _mt[243] domInst[52722]))
    unknown call_tmp[609673] "expr temp" "maybe param" "maybe type" "temp"
    (609676 'move' call_tmp[609673](52740 call idxType _mt[243] domInst[52722]))
    unknown call_tmp[609680] "expr temp" "maybe param" "maybe type" "temp"
    (609683 'move' call_tmp[609680](52746 call stridable _mt[243] domInst[52722]))
    unknown call_tmp[609685] "expr temp" "maybe param" "maybe type" "temp"
    (609688 'move' call_tmp[609685](52749 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[609666] call_tmp[609673] call_tmp[609680]))
    (507061 'move' ret[507056](507060 'deref' call_tmp[609685]))
    (507058 return ret[507056])
  }
  where {
    unknown call_tmp[609690] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609693 'move' call_tmp[609690](52727 'typeof' domInst[52722]))
    (52730 call <= call_tmp[609690] unmanaged DefaultRectangularDom[415445](?))
  }
  function chpl_buildStandInRTT[52760](arg domInst[52758]:_any[178](?)) type : _unknown[51] "no return value for void"
  {
    unknown call_tmp[609695] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609698 'move' call_tmp[609695](52763 'typeof' domInst[52758]))
    unknown call_tmp[609700] "expr temp" "maybe param" "maybe type" "temp"
    (609703 'move' call_tmp[609700](52766 call <= call_tmp[609695] unmanaged BaseDom[415448]))
    unknown call_tmp[609705] "expr temp" "maybe param" "maybe type" "temp"
    (609708 'move' call_tmp[609705](52838 call _cond_test call_tmp[609700]))
    if call_tmp[609705]
    {
      (52789 call compilerError "for/forall/promoted expressions are not implemented when the elements are or contain non-DefaultRectangular domains or arrays")
    }
    {
      unknown call_tmp[609710] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (609713 'move' call_tmp[609710](52813 'typeof' domInst[52758]))
      unknown call_tmp[609715] "expr temp" "maybe param" "maybe type" "temp"
      (609718 'move' call_tmp[609715](52815 call _cast string[26] call_tmp[609710]))
      (52836 call compilerError "unexpected argument of type " call_tmp[609715] " for chpl_buildStandInRTT()")
    }
    (507063 return _void[55])
  }
  function chpl_trivialLeader[52849]() : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[507067] "RVV" "temp"
    unknown yret[507071] "YVV" "temp"
    (507074 'move' yret[507071](507073 'deref' 0))
    (507076 yield yret[507071])
    (507069 return ret[507067])
  }
  function chpl_computeIteratorShape[52865](arg arg[52862]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[507080] "RVV" "temp"
    unknown call_tmp[609722] "expr temp" "maybe param" "maybe type" "temp"
    (609725 'move' call_tmp[609722](52871 call _dom _mt[243] arg[52862]))
    unknown call_tmp[609727] "expr temp" "maybe param" "maybe type" "temp"
    (609730 'move' call_tmp[609727](52875 call chpl_computeIteratorShape call_tmp[609722]))
    (507085 'move' ret[507080](507084 'deref' call_tmp[609727]))
    (507082 return ret[507080])
  }
  function chpl_computeIteratorShape[52887](arg arg[52884]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[507089] "RVV" "temp"
    unknown call_tmp[609734] "expr temp" "maybe param" "maybe type" "temp"
    (609737 'move' call_tmp[609734](52890 call _instance _mt[243] arg[52884]))
    (507094 'move' ret[507089](507093 'deref' call_tmp[609734]))
    (507091 return ret[507089])
  }
  function chpl_computeIteratorShape[52907](arg arg[52904]:range[64319](?)) : _unknown[51] "inline"
  {
    unknown ret[507098] "RVV" "temp"
    (507103 'move' ret[507098](507102 'deref' arg[52904]))
    (507100 return ret[507098])
  }
  function chpl_computeIteratorShape[52921](arg arg[52918]:_iteratorRecord[205](?)) : _unknown[51] "inline"
  {
    unknown ret[507107] "RVV" "temp"
    unknown call_tmp[609739] "expr temp" "maybe param" "maybe type" "temp"
    (609742 'move' call_tmp[609739](52926 call chpl_iteratorHasShape arg[52918]))
    unknown call_tmp[609744] "expr temp" "maybe param" "maybe type" "temp"
    (609747 'move' call_tmp[609744](52944 call _cond_test call_tmp[609739]))
    if call_tmp[609744]
    {
      unknown call_tmp[609751] "expr temp" "maybe param" "maybe type" "temp"
      (609754 'move' call_tmp[609751](52930 call _shape_ _mt[243] arg[52918]))
      (507112 'move' ret[507107](507111 'deref' call_tmp[609751]))
      gotoReturn _end_chpl_computeIteratorShape[507105] _end_chpl_computeIteratorShape[507105]
    }
    {
      const myvoid[52936] "dead at end of block" "const" "insert auto destroy"
      (540810 'init var' myvoid[52936] none[57])
      (52939 'end of statement')
      (507117 'move' ret[507107](507116 'deref' myvoid[52936]))
      gotoReturn _end_chpl_computeIteratorShape[507105] _end_chpl_computeIteratorShape[507105]
      (474634 'end of statement' myvoid[52936])
    }
    label _end_chpl_computeIteratorShape[507105]
    (507109 return ret[507107])
  }
  function chpl_computeIteratorShape[52956](arg arg[52954]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507123] "RVV" "temp"
    (507128 'move' ret[507123](507127 'deref' none[57]))
    (507125 return ret[507123])
  }
  function chpl_iteratorHasShape[52970](arg ir[52967]:_iteratorRecord[205](?)) param : _unknown[51]
  {
    unknown ret[507132] "RVV" "param" "temp"
    unknown call_tmp[609756] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609759 'move' call_tmp[609756](52974 'typeof' ir[52967]))
    unknown call_tmp[609761] "expr temp" "maybe param" "maybe type" "temp"
    (609764 'move' call_tmp[609761](52991 call hasField call_tmp[609756] "_shape_"))
    unknown call_tmp[609766] "expr temp" "maybe param" "maybe type" "temp"
    (609769 'move' call_tmp[609766](53005 call _cond_test call_tmp[609761]))
    if call_tmp[609766]
    {
      { scopeless type
        unknown call_type_tmp[491601] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609773] "expr temp" "maybe param" "maybe type" "temp"
        (609776 'move' call_tmp[609773](52993 call _shape_ _mt[243] ir[52967]))
        (491605 'move' call_type_tmp[491601](52996 'typeof' call_tmp[609773]))
      }
      unknown call_tmp[609778] "expr temp" "maybe param" "maybe type" "temp"
      (609781 'move' call_tmp[609778](52998 call != call_type_tmp[491601] void[4]))
      (507137 'move' ret[507132](507136 'deref' call_tmp[609778]))
      gotoReturn _end_chpl_iteratorHasShape[507130] _end_chpl_iteratorHasShape[507130]
    }
    {
      (507142 'move' ret[507132](507141 'deref' 0))
      gotoReturn _end_chpl_iteratorHasShape[507130] _end_chpl_iteratorHasShape[507130]
    }
    label _end_chpl_iteratorHasShape[507130]
    (507134 return ret[507132])
  }
  function chpl_iteratorHasDomainShape[53020](arg ir[53017]:_iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    unknown ret[507148] "RVV" "param" "temp"
    unknown call_tmp[609783] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609786 'move' call_tmp[609783](53024 'typeof' ir[53017]))
    unknown call_tmp[609788] "expr temp" "maybe param" "maybe type" "temp"
    (609791 'move' call_tmp[609788](53027 call hasField call_tmp[609783] "_shape_"))
    unknown call_tmp[609793] "expr temp" "maybe param" "maybe type" "temp"
    (609796 'move' call_tmp[609793](53042 call _cond_test call_tmp[609788]))
    if call_tmp[609793]
    {
      { scopeless type
        unknown call_type_tmp[491607] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609800] "expr temp" "maybe param" "maybe type" "temp"
        (609803 'move' call_tmp[609800](53030 call _shape_ _mt[243] ir[53017]))
        (491611 'move' call_type_tmp[491607](53033 'typeof' call_tmp[609800]))
      }
      unknown call_tmp[609805] "expr temp" "maybe param" "maybe type" "temp"
      (609808 'move' call_tmp[609805](354252 'is_subtype' BaseDom[372786](?) call_type_tmp[491607]))
      (507153 'move' ret[507148](507152 'deref' call_tmp[609805]))
      gotoReturn _end_chpl_iteratorHasDomainShape[507146] _end_chpl_iteratorHasDomainShape[507146]
    }
    {
      (507158 'move' ret[507148](507157 'deref' 0))
      gotoReturn _end_chpl_iteratorHasDomainShape[507146] _end_chpl_iteratorHasDomainShape[507146]
    }
    label _end_chpl_iteratorHasDomainShape[507146]
    (507150 return ret[507148])
  }
  function chpl_iteratorHasRangeShape[53057](arg ir[53054]:_iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    unknown ret[507164] "RVV" "param" "temp"
    unknown call_tmp[609810] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609813 'move' call_tmp[609810](53061 'typeof' ir[53054]))
    unknown call_tmp[609815] "expr temp" "maybe param" "maybe type" "temp"
    (609818 'move' call_tmp[609815](53064 call hasField call_tmp[609810] "_shape_"))
    unknown call_tmp[609820] "expr temp" "maybe param" "maybe type" "temp"
    (609823 'move' call_tmp[609820](53078 call _cond_test call_tmp[609815]))
    if call_tmp[609820]
    {
      { scopeless type
        unknown call_type_tmp[491613] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609827] "expr temp" "maybe param" "maybe type" "temp"
        (609830 'move' call_tmp[609827](53067 call _shape_ _mt[243] ir[53054]))
        (491617 'move' call_type_tmp[491613](53070 'typeof' call_tmp[609827]))
      }
      unknown call_tmp[609832] "expr temp" "maybe param" "maybe type" "temp"
      (609835 'move' call_tmp[609832](53072 call isRange call_type_tmp[491613]))
      (507169 'move' ret[507164](507168 'deref' call_tmp[609832]))
      gotoReturn _end_chpl_iteratorHasRangeShape[507162] _end_chpl_iteratorHasRangeShape[507162]
    }
    {
      (507174 'move' ret[507164](507173 'deref' 0))
      gotoReturn _end_chpl_iteratorHasRangeShape[507162] _end_chpl_iteratorHasRangeShape[507162]
    }
    label _end_chpl_iteratorHasRangeShape[507162]
    (507166 return ret[507164])
  }
  function chpl_iteratorShapeStaticTypeOrNothing[53093](arg ir[53090]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[507180] "RVV" "temp" "type variable"
    unknown call_tmp[609837] "expr temp" "maybe param" "maybe type" "temp"
    (609840 'move' call_tmp[609837](53099 call hasField ir[53090] "_shape_"))
    unknown call_tmp[609842] "expr temp" "maybe param" "maybe type" "temp"
    (609845 'move' call_tmp[609842](53110 call _cond_test call_tmp[609837]))
    if call_tmp[609842]
    {
      unknown call_tmp[609847] "expr temp" "maybe param" "maybe type" "temp"
      (609850 'move' call_tmp[609847](53104 'static field type' ir[53090] "_shape_"))
      (507185 'move' ret[507180](507184 'deref' call_tmp[609847]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrNothing[507178] _end_chpl_iteratorShapeStaticTypeOrNothing[507178]
    }
    {
      (507190 'move' ret[507180](507189 'deref' nothing[7]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrNothing[507178] _end_chpl_iteratorShapeStaticTypeOrNothing[507178]
    }
    label _end_chpl_iteratorShapeStaticTypeOrNothing[507178]
    (507182 return ret[507180])
  }
  function chpl_iteratorFromForExpr[53125](arg ir[53122]:_iteratorRecord[205](?)) param : _unknown[51]
  {
    unknown ret[507196] "RVV" "param" "temp"
    unknown call_tmp[609852] "expr temp" "maybe param" "maybe type" "temp"
    (609855 'move' call_tmp[609852](53152 call canResolveMethod module=[255] Reflection[224903] ir[53122] "_fromForExpr_"))
    unknown call_tmp[609857] "expr temp" "maybe param" "maybe type" "temp"
    (609860 'move' call_tmp[609857](53162 call _cond_test call_tmp[609852]))
    if call_tmp[609857]
    {
      unknown call_tmp[609864] "expr temp" "maybe param" "maybe type" "temp"
      (609867 'move' call_tmp[609864](53154 call _fromForExpr_ _mt[243] ir[53122]))
      (507201 'move' ret[507196](507200 'deref' call_tmp[609864]))
      gotoReturn _end_chpl_iteratorFromForExpr[507194] _end_chpl_iteratorFromForExpr[507194]
    }
    {
      (507206 'move' ret[507196](507205 'deref' 0))
      gotoReturn _end_chpl_iteratorFromForExpr[507194] _end_chpl_iteratorFromForExpr[507194]
    }
    label _end_chpl_iteratorFromForExpr[507194]
    (507198 return ret[507196])
    (357285 'referenced modules list' Reflection[224903])
  }
  function chpl_iteratorFromForExpr[53175](arg arg[53173]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507212] "RVV" "param" "temp"
    (507217 'move' ret[507212](507216 'deref' 0))
    (507214 return ret[507212])
  }
  function _iteratorRecord[205](?).writeThis[53188](arg _mt[53193]:_MT[238], arg this[53190]:_iteratorRecord[205](?) :
  _iteratorRecord[205](?), arg f[53186]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown first[53197] "dead at end of block" "insert auto destroy"
    (540812 'init var' first[53197] 1 bool[10])
    (53200 'end of statement')
    {
      unknown _indexOfInterest[53245] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53246] "expr temp" "temp"
      (53255 'move' _iterator[53246](53253 call _getIterator this[53190]))
      Defer
      {
        {
          (53271 call _freeIterator _iterator[53246])
        }
      }
      { scopeless type
        (53260 'move' _indexOfInterest[53245](53257 call iteratorIndex _iterator[53246]))
      }
      ForLoop[53247]
      {
        unknown e[53264] "index var" "insert auto destroy"
        (474649 'end of statement')
        (53266 'move' e[53264] _indexOfInterest[53245])
        (474650 'end of statement' e[53264])
        {
          unknown call_tmp[609869] "expr temp" "maybe param" "maybe type" "temp"
          (609872 'move' call_tmp[609869](53205 call ! first[53197]))
          unknown call_tmp[609874] "expr temp" "maybe param" "maybe type" "temp"
          (609877 'move' call_tmp[609874](53233 call _cond_test call_tmp[609869]))
          if call_tmp[609874]
          {
            (53225 call <~> f[53186] " ")
          }
          {
            (53230 call = first[53197] 0)
            (474653 'end of statement' first[53197])
          }
          (53242 call <~> f[53186] e[53264])
          (474655 'end of statement' e[53264])
        }
        label _continueLabel[53250]
        _indexOfInterest[53245]
        _iterator[53246]
      }
      label _breakLabel[53251]
    }
    (507219 return _void[55])
  }
  function =[53286](ref arg ic[53283]:_iteratorRecord[205](?), arg xs[53288]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[53304] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53305] "expr temp" "temp"
      unknown call_tmp[609879] "expr temp" "maybe param" "maybe type" "temp"
      (609882 'move' call_tmp[609879](53314 call _getIterator ic[53283]))
      unknown call_tmp[609884] "expr temp" "maybe param" "maybe type" "temp"
      (609887 'move' call_tmp[609884](53317 call _getIterator xs[53288]))
      (53319 'move' _iterator[53305](53298 call _build_tuple call_tmp[609879] call_tmp[609884]))
      Defer
      {
        {
          (53349 call _freeIterator _iterator[53305])
        }
      }
      { scopeless type
        (53324 'move' _indexOfInterest[53304](53321 call iteratorIndex _iterator[53305]))
      }
      ForLoop[53306]
      {
        (53329 call _check_tuple_var_decl _indexOfInterest[53304] 2)
        (474658 'end of statement')
        unknown e[53335] "index var" "insert auto destroy"
        (474659 'end of statement')
        (53337 'move' e[53335](53333 call _indexOfInterest[53304] 0))
        (474660 'end of statement' e[53335])
        unknown x[53342] "index var" "insert auto destroy"
        (474662 'end of statement')
        (53344 'move' x[53342](53340 call _indexOfInterest[53304] 1))
        (474663 'end of statement' x[53342])
        (53301 call = e[53335] x[53342])
        (474665 'end of statement' e[53335] x[53342])
        label _continueLabel[53309]
        _indexOfInterest[53304]
        _iterator[53305]
      }
      label _breakLabel[53310]
    }
    (507221 return _void[55])
  }
  function =[53365](ref arg ic[53362]:_iteratorRecord[205](?), arg x[53371] :
  (53370 call iteratorIndexType ic[53362])) : _unknown[51] "assignop" "suppress lvalue error" "no return value for void"
  {
    {
      unknown _indexOfInterest[53381] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53382] "expr temp" "temp"
      (53391 'move' _iterator[53382](53389 call _getIterator ic[53362]))
      Defer
      {
        {
          (53407 call _freeIterator _iterator[53382])
        }
      }
      { scopeless type
        (53396 'move' _indexOfInterest[53381](53393 call iteratorIndex _iterator[53382]))
      }
      ForLoop[53383]
      {
        unknown e[53400] "index var" "insert auto destroy"
        (474669 'end of statement')
        (53402 'move' e[53400] _indexOfInterest[53381])
        (474670 'end of statement' e[53400])
        (53378 call = e[53400] x[53371])
        (474672 'end of statement' e[53400])
        label _continueLabel[53386]
        _indexOfInterest[53381]
        _iterator[53382]
      }
      label _breakLabel[53387]
    }
    (507223 return _void[55])
  }
  function _getIterator[53421](const  ref arg x[53419]:_any[178](?)) : _unknown[51] "inline" "no borrow convert" "suppress lvalue error"
  {
    unknown ret[507227] "RVV" "temp"
    unknown call_tmp[609891] "expr temp" "maybe param" "maybe type" "temp"
    (609894 'move' call_tmp[609891](53431 call(53427 call (partial) these _mt[243] x[53419])))
    unknown call_tmp[609896] "expr temp" "maybe param" "maybe type" "temp"
    (609899 'move' call_tmp[609896](53433 call _getIterator call_tmp[609891]))
    (507232 'move' ret[507227](507231 'deref' call_tmp[609896]))
    (507229 return ret[507227])
  }
  function _getIterator[53443](arg t[53441]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507236] "RVV" "temp"
    unknown call_tmp[609903] "expr temp" "maybe param" "maybe type" "temp"
    (609906 'move' call_tmp[609903](53451 call(53447 call (partial) these _mt[243] t[53441])))
    unknown call_tmp[609908] "expr temp" "maybe param" "maybe type" "temp"
    (609911 'move' call_tmp[609908](53453 call _getIterator call_tmp[609903]))
    (507241 'move' ret[507236](507240 'deref' call_tmp[609908]))
    (507238 return ret[507236])
  }
  function _getIteratorZip[53463](arg x[53461]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507245] "RVV" "temp"
    unknown call_tmp[609913] "expr temp" "maybe param" "maybe type" "temp"
    (609916 'move' call_tmp[609913](53468 call _getIterator x[53461]))
    (507250 'move' ret[507245](507249 'deref' call_tmp[609913]))
    (507247 return ret[507245])
  }
  function _getIteratorZip[53478](arg t[53476]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507254] "RVV" "temp"
    unknown call_tmp[609918] "expr temp" "maybe param" "maybe type" "temp"
    (609921 'move' call_tmp[609918](53483 call _getIterator t[53476]))
    (507259 'move' ret[507254](507258 'deref' call_tmp[609918]))
    (507256 return ret[507254])
  }
  function _getIteratorZip[53495](arg x[53492]:_tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown ret[507279] "RVV" "temp"
    function _getIteratorZipInternal[53503](arg x[53500]:_tuple[56202](?), param arg dim[53506]:int(64)[13]) : _unknown[51] "inline"
    {
      unknown ret[507263] "RVV" "temp"
      unknown tmp[418522] "maybe param" "temp"
      unknown call_tmp[609923] "expr temp" "maybe param" "maybe type" "temp"
      (609926 'move' call_tmp[609923](53513 call x[53500] dim[53506]))
      (418533 'move' tmp[418522](53515 call isTuple call_tmp[609923]))
      unknown call_tmp[609928] "expr temp" "maybe param" "maybe type" "temp"
      (609931 'move' call_tmp[609928](418535 call _cond_invalid tmp[418522]))
      if call_tmp[609928]
      {
        (418538 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554476] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554477] "maybe param" "temp"
      unknown call_tmp[609933] "expr temp" "maybe param" "maybe type" "temp"
      (609936 'move' call_tmp[609933](418523 call isTrue tmp[418522]))
      (554482 'move' tmp[554477](554480 call _cond_test call_tmp[609933]))
      if tmp[554477]
      {
        unknown tmp[554484] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[609938] "expr temp" "maybe param" "maybe type" "temp"
        (609941 'move' call_tmp[609938](53520 call x[53500] dim[53506]))
        unknown call_tmp[609943] "expr temp" "maybe param" "maybe type" "temp"
        (609946 'move' call_tmp[609943](53522 call isHomogeneousTuple call_tmp[609938]))
        unknown call_tmp[609948] "expr temp" "maybe param" "maybe type" "temp"
        (609951 'move' call_tmp[609948](53523 call ! call_tmp[609943]))
        (554486 'move' tmp[554484](418526 call isTrue call_tmp[609948]))
        (554491 'move' tmp[554476](554488 '_paramFoldLogical' tmp[554477] tmp[554484]))
      }
      {
        (554496 'move' tmp[554476](554493 '_paramFoldLogical' tmp[554477] 0))
      }
      unknown call_tmp[609953] "expr temp" "maybe param" "maybe type" "temp"
      (609956 'move' call_tmp[609953](53548 call _cond_test tmp[554476]))
      if call_tmp[609953]
      {
        (53546 call compilerError "Heterogeneous tuples don't support zippered iteration yet")
      }
      unknown call_tmp[609960] "expr temp" "maybe param" "maybe type" "temp"
      (609963 'move' call_tmp[609960](53556 call size _mt[243] x[53500]))
      unknown call_tmp[609965] "expr temp" "maybe param" "maybe type" "temp"
      (609968 'move' call_tmp[609965](53560 call - call_tmp[609960] 1))
      unknown call_tmp[609970] "expr temp" "maybe param" "maybe type" "temp"
      (609973 'move' call_tmp[609970](53562 call == dim[53506] call_tmp[609965]))
      unknown call_tmp[609975] "expr temp" "maybe param" "maybe type" "temp"
      (609978 'move' call_tmp[609975](53596 call _cond_test call_tmp[609970]))
      if call_tmp[609975]
      {
        unknown call_tmp[609980] "expr temp" "maybe param" "maybe type" "temp"
        (609983 'move' call_tmp[609980](53568 call x[53500] dim[53506]))
        unknown call_tmp[609985] "expr temp" "maybe param" "maybe type" "temp"
        (609988 'move' call_tmp[609985](53570 call _getIterator call_tmp[609980]))
        unknown call_tmp[609990] "expr temp" "maybe param" "maybe type" "temp"
        (609993 'move' call_tmp[609990](53571 call _build_tuple call_tmp[609985]))
        (507268 'move' ret[507263](507267 'deref' call_tmp[609990]))
        gotoReturn _end__getIteratorZipInternal[507261] _end__getIteratorZipInternal[507261]
      }
      {
        unknown call_tmp[609995] "expr temp" "maybe param" "maybe type" "temp"
        (609998 'move' call_tmp[609995](53579 call x[53500] dim[53506]))
        unknown call_tmp[610000] "expr temp" "maybe param" "maybe type" "temp"
        (610003 'move' call_tmp[610000](53581 call _getIterator call_tmp[609995]))
        unknown call_tmp[610005] "expr temp" "maybe param" "maybe type" "temp"
        (610008 'move' call_tmp[610005](53587 call + dim[53506] 1))
        unknown call_tmp[610010] "expr temp" "maybe param" "maybe type" "temp"
        (610013 'move' call_tmp[610010](53589 call _getIteratorZipInternal x[53500] call_tmp[610005]))
        unknown call_tmp[610015] "expr temp" "maybe param" "maybe type" "temp"
        (610018 'move' call_tmp[610015](53592 call _build_tuple call_tmp[610000](53590 'expand_tuple' call_tmp[610010])))
        (507273 'move' ret[507263](507272 'deref' call_tmp[610015]))
        gotoReturn _end__getIteratorZipInternal[507261] _end__getIteratorZipInternal[507261]
      }
      label _end__getIteratorZipInternal[507261]
      (507265 return ret[507263])
    }
    unknown call_tmp[610022] "expr temp" "maybe param" "maybe type" "temp"
    (610025 'move' call_tmp[610022](53606 call size _mt[243] x[53492]))
    unknown call_tmp[610027] "expr temp" "maybe param" "maybe type" "temp"
    (610030 'move' call_tmp[610027](53610 call == call_tmp[610022] 1))
    unknown call_tmp[610032] "expr temp" "maybe param" "maybe type" "temp"
    (610035 'move' call_tmp[610032](53628 call _cond_test call_tmp[610027]))
    if call_tmp[610032]
    {
      unknown call_tmp[610037] "expr temp" "maybe param" "maybe type" "temp"
      (610040 'move' call_tmp[610037](53616 call x[53492] 0))
      unknown call_tmp[610042] "expr temp" "maybe param" "maybe type" "temp"
      (610045 'move' call_tmp[610042](53618 call _getIterator call_tmp[610037]))
      (507284 'move' ret[507279](507283 'deref' call_tmp[610042]))
      gotoReturn _end__getIteratorZip[507277] _end__getIteratorZip[507277]
    }
    {
      unknown call_tmp[610047] "expr temp" "maybe param" "maybe type" "temp"
      (610050 'move' call_tmp[610047](53625 call _getIteratorZipInternal x[53492] 0))
      (507289 'move' ret[507279](507288 'deref' call_tmp[610047]))
      gotoReturn _end__getIteratorZip[507277] _end__getIteratorZip[507277]
    }
    label _end__getIteratorZip[507277]
    (507281 return ret[507279])
  }
  function _getIteratorZip[53642](arg t[53639]:_tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown ret[507311] "RVV" "temp"
    function _getIteratorZipInternal[53650](arg t[53647]:_tuple[56202](?), param arg dim[53653]:int(64)[13]) : _unknown[51] "inline"
    {
      unknown ret[507295] "RVV" "temp"
      unknown call_tmp[610054] "expr temp" "maybe param" "maybe type" "temp"
      (610057 'move' call_tmp[610054](53658 call size _mt[243] t[53647]))
      unknown call_tmp[610059] "expr temp" "maybe param" "maybe type" "temp"
      (610062 'move' call_tmp[610059](53662 call - call_tmp[610054] 1))
      unknown call_tmp[610064] "expr temp" "maybe param" "maybe type" "temp"
      (610067 'move' call_tmp[610064](53664 call == dim[53653] call_tmp[610059]))
      unknown call_tmp[610069] "expr temp" "maybe param" "maybe type" "temp"
      (610072 'move' call_tmp[610069](53698 call _cond_test call_tmp[610064]))
      if call_tmp[610069]
      {
        unknown call_tmp[610074] "expr temp" "maybe param" "maybe type" "temp"
        (610077 'move' call_tmp[610074](53670 call t[53647] dim[53653]))
        unknown call_tmp[610079] "expr temp" "maybe param" "maybe type" "temp"
        (610082 'move' call_tmp[610079](53672 call _getIterator call_tmp[610074]))
        unknown call_tmp[610084] "expr temp" "maybe param" "maybe type" "temp"
        (610087 'move' call_tmp[610084](53673 call _build_tuple call_tmp[610079]))
        (507300 'move' ret[507295](507299 'deref' call_tmp[610084]))
        gotoReturn _end__getIteratorZipInternal[507293] _end__getIteratorZipInternal[507293]
      }
      {
        unknown call_tmp[610089] "expr temp" "maybe param" "maybe type" "temp"
        (610092 'move' call_tmp[610089](53681 call t[53647] dim[53653]))
        unknown call_tmp[610094] "expr temp" "maybe param" "maybe type" "temp"
        (610097 'move' call_tmp[610094](53683 call _getIterator call_tmp[610089]))
        unknown call_tmp[610099] "expr temp" "maybe param" "maybe type" "temp"
        (610102 'move' call_tmp[610099](53689 call + dim[53653] 1))
        unknown call_tmp[610104] "expr temp" "maybe param" "maybe type" "temp"
        (610107 'move' call_tmp[610104](53691 call _getIteratorZipInternal t[53647] call_tmp[610099]))
        unknown call_tmp[610109] "expr temp" "maybe param" "maybe type" "temp"
        (610112 'move' call_tmp[610109](53694 call _build_tuple call_tmp[610094](53692 'expand_tuple' call_tmp[610104])))
        (507305 'move' ret[507295](507304 'deref' call_tmp[610109]))
        gotoReturn _end__getIteratorZipInternal[507293] _end__getIteratorZipInternal[507293]
      }
      label _end__getIteratorZipInternal[507293]
      (507297 return ret[507295])
    }
    unknown call_tmp[610116] "expr temp" "maybe param" "maybe type" "temp"
    (610119 'move' call_tmp[610116](53709 call size _mt[243] t[53639]))
    unknown call_tmp[610121] "expr temp" "maybe param" "maybe type" "temp"
    (610124 'move' call_tmp[610121](53713 call == call_tmp[610116] 1))
    unknown call_tmp[610126] "expr temp" "maybe param" "maybe type" "temp"
    (610129 'move' call_tmp[610126](53731 call _cond_test call_tmp[610121]))
    if call_tmp[610126]
    {
      unknown call_tmp[610131] "expr temp" "maybe param" "maybe type" "temp"
      (610134 'move' call_tmp[610131](53719 call t[53639] 0))
      unknown call_tmp[610136] "expr temp" "maybe param" "maybe type" "temp"
      (610139 'move' call_tmp[610136](53721 call _getIterator call_tmp[610131]))
      (507316 'move' ret[507311](507315 'deref' call_tmp[610136]))
      gotoReturn _end__getIteratorZip[507309] _end__getIteratorZip[507309]
    }
    {
      unknown call_tmp[610141] "expr temp" "maybe param" "maybe type" "temp"
      (610144 'move' call_tmp[610141](53728 call _getIteratorZipInternal t[53639] 0))
      (507321 'move' ret[507311](507320 'deref' call_tmp[610141]))
      gotoReturn _end__getIteratorZip[507309] _end__getIteratorZip[507309]
    }
    label _end__getIteratorZip[507309]
    (507313 return ret[507311])
  }
  function _freeIterator[53745](arg ic[53742]:_iteratorClass[208](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[610146] "expr temp" "maybe param" "maybe type" "temp"
    (610149 'move' call_tmp[610146](53767 'cast_to_void_star' ic[53742]))
    (53769 call chpl_here_free call_tmp[610146])
    (507325 return _void[55])
  }
  function _freeIterator[53780](arg x[53777]:_tuple[56202](?)) : _unknown[51] "inline" "no return value for void"
  {
    {
      unknown i[53800] "dead at end of block" "insert auto destroy"
      (540814 'init var' i[53800] 0)
      (474689 'end of statement')
      unknown tmp[53801] "maybe param" "temp"
      unknown call_tmp[610153] "expr temp" "maybe param" "maybe type" "temp"
      (610156 'move' call_tmp[610153](53784 call size _mt[243] x[53777]))
      unknown call_tmp[610158] "expr temp" "maybe param" "maybe type" "temp"
      (610161 'move' call_tmp[610158](53788 call - call_tmp[610153] 1))
      (53813 'move' tmp[53801](53811 call chpl_compute_low_param_loop_bound 0 call_tmp[610158]))
      unknown tmp[53802] "maybe param" "temp"
      unknown call_tmp[610165] "expr temp" "maybe param" "maybe type" "temp"
      (610168 'move' call_tmp[610165](53820 call size _mt[243] x[53777]))
      unknown call_tmp[610170] "expr temp" "maybe param" "maybe type" "temp"
      (610173 'move' call_tmp[610170](53818 call - call_tmp[610165] 1))
      (53826 'move' tmp[53802](53824 call chpl_compute_high_param_loop_bound 0 call_tmp[610170]))
      unknown tmp[53803] "maybe param" "temp"
      (53829 'move' tmp[53803] 1)
      ParamForLoop[53831]
      { i[53800] tmp[53801] tmp[53802] tmp[53803]
        unknown call_tmp[610175] "expr temp" "maybe param" "maybe type" "temp"
        (610178 'move' call_tmp[610175](53796 call x[53777] i[53800]))
        (53798 call _freeIterator call_tmp[610175])
        (474690 'end of statement' i[53800])
      }
      label _unused_continueLabel[53805]
      label _breakLabel[53804]
    }
    (507327 return _void[55])
  }
  function _toLeader[53849](arg ir[53846]:_iteratorRecord[205](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507331] "RVV" "temp"
    unknown call_tmp[610180] "expr temp" "maybe param" "maybe type" "temp"
    (610183 'move' call_tmp[610180](53891 'to leader' ir[53846]))
    unknown call_tmp[610185] "expr temp" "maybe param" "maybe type" "temp"
    (610188 'move' call_tmp[610185](53893 call chpl__autoCopy call_tmp[610180]))
    (507336 'move' ret[507331](507335 'deref' call_tmp[610185]))
    (507333 return ret[507331])
  }
  where {
    (53870 'has leader' ir[53846])
  }
  function _toLeader[53904](arg x[53902]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507340] "RVV" "temp"
    unknown call_tmp[610192] "expr temp" "maybe param" "maybe type" "temp"
    (610195 'move' call_tmp[610192](53931 call(53927 call (partial) these _mt[243] x[53902])))
    unknown call_tmp[610197] "expr temp" "maybe param" "maybe type" "temp"
    (610200 'move' call_tmp[610197](53933 call _toLeader call_tmp[610192]))
    (507345 'move' ret[507340](507344 'deref' call_tmp[610197]))
    (507342 return ret[507340])
  }
  where {
    unknown tmp[418543] "maybe param" "temp"
    unknown call_tmp[610202] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (610205 'move' call_tmp[610202](53908 'typeof' x[53902]))
    unknown call_tmp[610207] "expr temp" "maybe param" "maybe type" "temp"
    (610210 'move' call_tmp[610207](354253 'is_subtype' _iteratorRecord[205](?) call_tmp[610202]))
    (418554 'move' tmp[418543](53912 call ! call_tmp[610207]))
    unknown call_tmp[610212] "expr temp" "maybe param" "maybe type" "temp"
    (610215 'move' call_tmp[610212](418556 call _cond_invalid tmp[418543]))
    if call_tmp[610212]
    {
      (418559 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554503] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554504] "maybe param" "temp"
    unknown call_tmp[610217] "expr temp" "maybe param" "maybe type" "temp"
    (610220 'move' call_tmp[610217](418544 call isTrue tmp[418543]))
    (554509 'move' tmp[554504](554507 call _cond_test call_tmp[610217]))
    if tmp[554504]
    {
      unknown tmp[554511] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610224] "expr temp" "maybe param" "maybe type" "temp"
      (610227 'move' call_tmp[610224](53921 call(53917 call (partial) these _mt[243] x[53902])))
      unknown call_tmp[610229] "expr temp" "maybe param" "maybe type" "temp"
      (610232 'move' call_tmp[610229](53922 'has leader' call_tmp[610224]))
      (554513 'move' tmp[554511](418547 call isTrue call_tmp[610229]))
      (554518 'move' tmp[554503](554515 '_paramFoldLogical' tmp[554504] tmp[554511]))
    }
    {
      (554523 'move' tmp[554503](554520 '_paramFoldLogical' tmp[554504] 0))
    }
    (748241 call chpl_statementLevelSymbol tmp[554503])
  }
  function _toLeaderZip[53944](arg x[53942]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507349] "RVV" "temp"
    unknown call_tmp[610234] "expr temp" "maybe param" "maybe type" "temp"
    (610237 'move' call_tmp[610234](53983 call _toLeader x[53942]))
    (507354 'move' ret[507349](507353 'deref' call_tmp[610234]))
    (507351 return ret[507349])
  }
  where {
    unknown tmp[418564] "maybe param" "temp"
    unknown call_tmp[610239] "expr temp" "maybe param" "maybe type" "temp"
    (610242 'move' call_tmp[610239](53949 call isTuple x[53942]))
    (418575 'move' tmp[418564](53950 call ! call_tmp[610239]))
    unknown call_tmp[610244] "expr temp" "maybe param" "maybe type" "temp"
    (610247 'move' call_tmp[610244](418577 call _cond_invalid tmp[418564]))
    if call_tmp[610244]
    {
      (418580 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554530] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554531] "maybe param" "temp"
    unknown call_tmp[610249] "expr temp" "maybe param" "maybe type" "temp"
    (610252 'move' call_tmp[610249](418565 call isTrue tmp[418564]))
    (554536 'move' tmp[554531](554534 call _cond_test call_tmp[610249]))
    if tmp[554531]
    {
      unknown tmp[554538] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610254] "expr temp" "maybe param" "maybe type" "temp"
      (610257 'move' call_tmp[610254](53977 call canResolve module=[255] Reflection[224903] "_toLeader" x[53942]))
      (554540 'move' tmp[554538](418568 call isTrue call_tmp[610254]))
      (554545 'move' tmp[554530](554542 '_paramFoldLogical' tmp[554531] tmp[554538]))
    }
    {
      (554550 'move' tmp[554530](554547 '_paramFoldLogical' tmp[554531] 0))
    }
    (748243 call chpl_statementLevelSymbol tmp[554530])
    (357302 'referenced modules list' Reflection[224903])
  }
  function _toLeaderZip[53996](arg x[53993]:_tuple[56202](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507358] "RVV" "temp"
    unknown call_tmp[610259] "expr temp" "maybe param" "maybe type" "temp"
    (610262 'move' call_tmp[610259](54013 call x[53993] 0))
    unknown call_tmp[610264] "expr temp" "maybe param" "maybe type" "temp"
    (610267 'move' call_tmp[610264](54015 call _toLeader call_tmp[610259]))
    (507363 'move' ret[507358](507362 'deref' call_tmp[610264]))
    (507360 return ret[507358])
  }
  where {
    unknown call_tmp[610269] "expr temp" "maybe param" "maybe type" "temp"
    (610272 'move' call_tmp[610269](54007 call x[53993] 0))
    (54008 call canResolve module=[255] Reflection[224903] "_toLeader" call_tmp[610269])
    (357308 'referenced modules list' Reflection[224903])
  }
  function _toStandalone[54028](arg iterator[54025]:_iteratorClass[208](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507367] "RVV" "temp"
    unknown call_tmp[610274] "expr temp" "maybe param" "maybe type" "temp"
    (610277 'move' call_tmp[610274](54050 'to standalone' iterator[54025]))
    unknown call_tmp[610279] "expr temp" "maybe param" "maybe type" "temp"
    (610282 'move' call_tmp[610279](54052 call chpl__autoCopy call_tmp[610274]))
    (507372 'move' ret[507367](507371 'deref' call_tmp[610279]))
    (507369 return ret[507367])
  }
  function _toStandalone[54064](arg ir[54061]:_iteratorRecord[205](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507376] "RVV" "temp"
    unknown call_tmp[610284] "maybe param" "maybe type" "temp"
    (610287 'move' call_tmp[610284](54069 call _getIterator ir[54061]))
    unknown ic[54070] "dead at end of block" "insert auto destroy" "no copy"
    (540816 'init var' ic[54070] call_tmp[610284])
    (54073 'end of statement')
    unknown call_tmp[610289] "maybe param" "maybe type" "temp"
    (610292 'move' call_tmp[610289](54078 call _toStandalone ic[54070]))
    unknown standalone[54079] "dead at end of block" "insert auto destroy" "no copy"
    (540818 'init var' standalone[54079] call_tmp[610289])
    (54082 'end of statement' ic[54070])
    (54086 call _freeIterator ic[54070])
    (474698 'end of statement' ic[54070])
    (507381 'move' ret[507376](507380 'deref' standalone[54079]))
    gotoReturn _end__toStandalone[507374] _end__toStandalone[507374]
    (474700 'end of statement' standalone[54079])
    label _end__toStandalone[507374]
    (507378 return ret[507376])
  }
  function _toStandalone[54097](arg x[54095]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507387] "RVV" "temp"
    unknown call_tmp[610296] "expr temp" "maybe param" "maybe type" "temp"
    (610299 'move' call_tmp[610296](54105 call(54101 call (partial) these _mt[243] x[54095])))
    unknown call_tmp[610301] "expr temp" "maybe param" "maybe type" "temp"
    (610304 'move' call_tmp[610301](54107 call _toStandalone call_tmp[610296]))
    (507392 'move' ret[507387](507391 'deref' call_tmp[610301]))
    (507389 return ret[507387])
  }
  function _toLeader[54119](arg ir[54116]:_iteratorRecord[205](?), arg args[54122]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507396] "RVV" "temp"
    unknown call_tmp[610306] "expr temp" "maybe param" "maybe type" "temp"
    (610309 'move' call_tmp[610306](54131 'to leader' ir[54116](54130 'expand_tuple' args[54122])))
    unknown call_tmp[610311] "expr temp" "maybe param" "maybe type" "temp"
    (610314 'move' call_tmp[610311](54133 call chpl__autoCopy call_tmp[610306]))
    (507401 'move' ret[507396](507400 'deref' call_tmp[610311]))
    (507398 return ret[507396])
  }
  function _toLeader[54143](arg x[54141]:_any[178](?), arg args[54146]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507405] "RVV" "temp"
    unknown call_tmp[610318] "expr temp" "maybe param" "maybe type" "temp"
    (610321 'move' call_tmp[610318](54155 call(54151 call (partial) these _mt[243] x[54141])))
    unknown call_tmp[610323] "expr temp" "maybe param" "maybe type" "temp"
    (610326 'move' call_tmp[610323](54159 call _toLeader call_tmp[610318](54158 'expand_tuple' args[54146])))
    (507410 'move' ret[507405](507409 'deref' call_tmp[610323]))
    (507407 return ret[507405])
  }
  function _toLeaderZip[54169](arg x[54167]:_any[178](?), arg args[54172]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507414] "RVV" "temp"
    unknown call_tmp[610328] "expr temp" "maybe param" "maybe type" "temp"
    (610331 'move' call_tmp[610328](54180 call _toLeader x[54167](54179 'expand_tuple' args[54172])))
    (507419 'move' ret[507414](507418 'deref' call_tmp[610328]))
    (507416 return ret[507414])
  }
  function _toLeaderZip[54192](arg x[54189]:_tuple[56202](?), arg args[54195]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507423] "RVV" "temp"
    unknown call_tmp[610333] "expr temp" "maybe param" "maybe type" "temp"
    (610336 'move' call_tmp[610333](54202 call x[54189] 0))
    unknown call_tmp[610338] "expr temp" "maybe param" "maybe type" "temp"
    (610341 'move' call_tmp[610338](54206 call _toLeader call_tmp[610333](54205 'expand_tuple' args[54195])))
    (507428 'move' ret[507423](507427 'deref' call_tmp[610338]))
    (507425 return ret[507423])
  }
  function _toStandalone[54218](arg iterator[54215]:_iteratorClass[208](?), arg args[54221]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507432] "RVV" "temp"
    unknown call_tmp[610343] "expr temp" "maybe param" "maybe type" "temp"
    (610346 'move' call_tmp[610343](54230 'to standalone' iterator[54215](54229 'expand_tuple' args[54221])))
    unknown call_tmp[610348] "expr temp" "maybe param" "maybe type" "temp"
    (610351 'move' call_tmp[610348](54232 call chpl__autoCopy call_tmp[610343]))
    (507437 'move' ret[507432](507436 'deref' call_tmp[610348]))
    (507434 return ret[507432])
  }
  function _toStandalone[54244](arg ir[54241]:_iteratorRecord[205](?), arg args[54247]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507441] "RVV" "temp"
    unknown call_tmp[610353] "maybe param" "maybe type" "temp"
    (610356 'move' call_tmp[610353](54253 call _getIterator ir[54241]))
    unknown ic[54254] "dead at end of block" "insert auto destroy" "no copy"
    (540820 'init var' ic[54254] call_tmp[610353])
    (54257 'end of statement')
    unknown call_tmp[610358] "maybe param" "maybe type" "temp"
    (610361 'move' call_tmp[610358](54264 call _toStandalone ic[54254](54263 'expand_tuple' args[54247])))
    unknown standalone[54265] "dead at end of block" "insert auto destroy" "no copy"
    (540822 'init var' standalone[54265] call_tmp[610358])
    (54268 'end of statement' ic[54254])
    (54272 call _freeIterator ic[54254])
    (474709 'end of statement' ic[54254])
    (507446 'move' ret[507441](507445 'deref' standalone[54265]))
    gotoReturn _end__toStandalone[507439] _end__toStandalone[507439]
    (474711 'end of statement' standalone[54265])
    label _end__toStandalone[507439]
    (507443 return ret[507441])
  }
  function _toStandalone[54283](arg x[54281]:_any[178](?), arg args[54286]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507452] "RVV" "temp"
    unknown call_tmp[610365] "expr temp" "maybe param" "maybe type" "temp"
    (610368 'move' call_tmp[610365](54295 call(54291 call (partial) these _mt[243] x[54281])))
    unknown call_tmp[610370] "expr temp" "maybe param" "maybe type" "temp"
    (610373 'move' call_tmp[610370](54299 call _toStandalone call_tmp[610365](54298 'expand_tuple' args[54286])))
    (507457 'move' ret[507452](507456 'deref' call_tmp[610370]))
    (507454 return ret[507452])
  }
  function chpl__canHaveFastFollowers[54309](arg x[54307]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507461] "RVV" "param" "temp"
    (507466 'move' ret[507461](507465 'deref' 0))
    (507463 return ret[507461])
  }
  function chpl__canHaveFastFollowers[54325](arg x[54322]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[507470] "RVV" "param" "temp"
    (507475 'move' ret[507470](507474 'deref' 1))
    (507472 return ret[507470])
  }
  function chpl__canHaveFastFollowersZip[54339](arg x[54336]:_tuple[56202](?)) param : _unknown[51]
  {
    unknown ret[507479] "RVV" "param" "temp"
    unknown call_tmp[610375] "expr temp" "maybe param" "maybe type" "temp"
    (610378 'move' call_tmp[610375](54345 call chpl__canHaveFastFollowersZipHelp x[54336] 0))
    (507484 'move' ret[507479](507483 'deref' call_tmp[610375]))
    (507481 return ret[507479])
  }
  function chpl__canHaveFastFollowersZipHelp[54357](arg x[54354]:_tuple[56202](?), param arg dim[54359]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507488] "RVV" "param" "temp"
    unknown call_tmp[610382] "expr temp" "maybe param" "maybe type" "temp"
    (610385 'move' call_tmp[610382](54362 call size _mt[243] x[54354]))
    unknown call_tmp[610387] "expr temp" "maybe param" "maybe type" "temp"
    (610390 'move' call_tmp[610387](54366 call - call_tmp[610382] 1))
    unknown call_tmp[610392] "expr temp" "maybe param" "maybe type" "temp"
    (610395 'move' call_tmp[610392](54369 call == call_tmp[610387] dim[54359]))
    unknown call_tmp[610397] "expr temp" "maybe param" "maybe type" "temp"
    (610400 'move' call_tmp[610397](54399 call _cond_test call_tmp[610392]))
    if call_tmp[610397]
    {
      unknown call_tmp[610402] "expr temp" "maybe param" "maybe type" "temp"
      (610405 'move' call_tmp[610402](54375 call x[54354] dim[54359]))
      unknown call_tmp[610407] "expr temp" "maybe param" "maybe type" "temp"
      (610410 'move' call_tmp[610407](54377 call chpl__canHaveFastFollowers call_tmp[610402]))
      (507493 'move' ret[507488](507492 'deref' call_tmp[610407]))
      gotoReturn _end_chpl__canHaveFastFollowersZipHelp[507486] _end_chpl__canHaveFastFollowersZipHelp[507486]
    }
    {
      unknown tmp[418585] "maybe param" "temp"
      unknown call_tmp[610412] "expr temp" "maybe param" "maybe type" "temp"
      (610415 'move' call_tmp[610412](54384 call x[54354] dim[54359]))
      (418596 'move' tmp[418585](54386 call chpl__canHaveFastFollowers call_tmp[610412]))
      unknown call_tmp[610417] "expr temp" "maybe param" "maybe type" "temp"
      (610420 'move' call_tmp[610417](418598 call _cond_invalid tmp[418585]))
      if call_tmp[610417]
      {
        (418601 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[554557] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554558] "maybe param" "temp"
      unknown call_tmp[610422] "expr temp" "maybe param" "maybe type" "temp"
      (610425 'move' call_tmp[610422](418586 call isTrue tmp[418585]))
      (554563 'move' tmp[554558](554561 call _cond_test call_tmp[610422]))
      if tmp[554558]
      {
        (554568 'move' tmp[554557](554565 '_paramFoldLogical' tmp[554558] 1))
      }
      {
        unknown tmp[554570] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610427] "expr temp" "maybe param" "maybe type" "temp"
        (610430 'move' call_tmp[610427](54392 call + dim[54359] 1))
        unknown call_tmp[610432] "expr temp" "maybe param" "maybe type" "temp"
        (610435 'move' call_tmp[610432](54394 call chpl__canHaveFastFollowersZipHelp x[54354] call_tmp[610427]))
        (554572 'move' tmp[554570](418590 call isTrue call_tmp[610432]))
        (554577 'move' tmp[554557](554574 '_paramFoldLogical' tmp[554558] tmp[554570]))
      }
      (507498 'move' ret[507488](507497 'deref' tmp[554557]))
      gotoReturn _end_chpl__canHaveFastFollowersZipHelp[507486] _end_chpl__canHaveFastFollowersZipHelp[507486]
    }
    label _end_chpl__canHaveFastFollowersZipHelp[507486]
    (507490 return ret[507488])
  }
  function chpl__canLeadFastFollowers[54412](arg x[54410]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507504] "RVV" "param" "temp"
    unknown tmp[418606] "maybe param" "temp"
    (418617 'move' tmp[418606](54417 call isDomain x[54410]))
    unknown call_tmp[610437] "expr temp" "maybe param" "maybe type" "temp"
    (610440 'move' call_tmp[610437](418619 call _cond_invalid tmp[418606]))
    if call_tmp[610437]
    {
      (418622 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[554584] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554585] "maybe param" "temp"
    unknown call_tmp[610442] "expr temp" "maybe param" "maybe type" "temp"
    (610445 'move' call_tmp[610442](418607 call isTrue tmp[418606]))
    (554590 'move' tmp[554585](554588 call _cond_test call_tmp[610442]))
    if tmp[554585]
    {
      (554595 'move' tmp[554584](554592 '_paramFoldLogical' tmp[554585] 1))
    }
    {
      unknown tmp[554597] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610447] "expr temp" "maybe param" "maybe type" "temp"
      (610450 'move' call_tmp[610447](54421 call isArray x[54410]))
      (554599 'move' tmp[554597](418611 call isTrue call_tmp[610447]))
      (554604 'move' tmp[554584](554601 '_paramFoldLogical' tmp[554585] tmp[554597]))
    }
    (507509 'move' ret[507504](507508 'deref' tmp[554584]))
    (507506 return ret[507504])
  }
  function chpl__hasInertFastFollowers[54433](arg x[54431]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507513] "RVV" "param" "temp"
    (507518 'move' ret[507513](507517 'deref' 1))
    (507515 return ret[507513])
  }
  function chpl__hasInertFastFollowers[54449](arg x[54446]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[507522] "RVV" "param" "temp"
    (507527 'move' ret[507522](507526 'deref' 0))
    (507524 return ret[507522])
  }
  function chpl__hasInertFastFollowersZip[54463](arg x[54460]:_tuple[56202](?)) param : _unknown[51]
  {
    unknown ret[507531] "RVV" "param" "temp"
    unknown call_tmp[610452] "expr temp" "maybe param" "maybe type" "temp"
    (610455 'move' call_tmp[610452](54469 call chpl__hasInertFastFollowersZipHelp x[54460] 0))
    (507536 'move' ret[507531](507535 'deref' call_tmp[610452]))
    (507533 return ret[507531])
  }
  function chpl__hasInertFastFollowersZipHelp[54481](arg x[54478]:_tuple[56202](?), param arg dim[54483]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507540] "RVV" "param" "temp"
    unknown call_tmp[610459] "expr temp" "maybe param" "maybe type" "temp"
    (610462 'move' call_tmp[610459](54486 call size _mt[243] x[54478]))
    unknown call_tmp[610464] "expr temp" "maybe param" "maybe type" "temp"
    (610467 'move' call_tmp[610464](54490 call - call_tmp[610459] 1))
    unknown call_tmp[610469] "expr temp" "maybe param" "maybe type" "temp"
    (610472 'move' call_tmp[610469](54493 call == call_tmp[610464] dim[54483]))
    unknown call_tmp[610474] "expr temp" "maybe param" "maybe type" "temp"
    (610477 'move' call_tmp[610474](54525 call _cond_test call_tmp[610469]))
    if call_tmp[610474]
    {
      unknown call_tmp[610479] "expr temp" "maybe param" "maybe type" "temp"
      (610482 'move' call_tmp[610479](54499 call x[54478] dim[54483]))
      unknown call_tmp[610484] "expr temp" "maybe param" "maybe type" "temp"
      (610487 'move' call_tmp[610484](54501 call chpl__hasInertFastFollowers call_tmp[610479]))
      (507545 'move' ret[507540](507544 'deref' call_tmp[610484]))
      gotoReturn _end_chpl__hasInertFastFollowersZipHelp[507538] _end_chpl__hasInertFastFollowersZipHelp[507538]
    }
    {
      unknown tmp[418627] "maybe param" "temp"
      unknown call_tmp[610489] "expr temp" "maybe param" "maybe type" "temp"
      (610492 'move' call_tmp[610489](54509 call x[54478] dim[54483]))
      (418638 'move' tmp[418627](54511 call chpl__hasInertFastFollowers call_tmp[610489]))
      unknown call_tmp[610494] "expr temp" "maybe param" "maybe type" "temp"
      (610497 'move' call_tmp[610494](418640 call _cond_invalid tmp[418627]))
      if call_tmp[610494]
      {
        (418643 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554611] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554612] "maybe param" "temp"
      unknown call_tmp[610499] "expr temp" "maybe param" "maybe type" "temp"
      (610502 'move' call_tmp[610499](418628 call isTrue tmp[418627]))
      (554617 'move' tmp[554612](554615 call _cond_test call_tmp[610499]))
      if tmp[554612]
      {
        unknown tmp[554619] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610504] "expr temp" "maybe param" "maybe type" "temp"
        (610507 'move' call_tmp[610504](54517 call + dim[54483] 1))
        unknown call_tmp[610509] "expr temp" "maybe param" "maybe type" "temp"
        (610512 'move' call_tmp[610509](54519 call chpl__hasInertFastFollowersZipHelp x[54478] call_tmp[610504]))
        (554621 'move' tmp[554619](418631 call isTrue call_tmp[610509]))
        (554626 'move' tmp[554611](554623 '_paramFoldLogical' tmp[554612] tmp[554619]))
      }
      {
        (554631 'move' tmp[554611](554628 '_paramFoldLogical' tmp[554612] 0))
      }
      (507550 'move' ret[507540](507549 'deref' tmp[554611]))
      gotoReturn _end_chpl__hasInertFastFollowersZipHelp[507538] _end_chpl__hasInertFastFollowersZipHelp[507538]
    }
    label _end_chpl__hasInertFastFollowersZipHelp[507538]
    (507542 return ret[507540])
  }
  function chpl__staticFastFollowCheck[54536](arg x[54534]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507556] "RVV" "param" "temp"
    const lead[54539] "dead at end of block" "const" "insert auto destroy" "no copy"
    (540824 'init var' lead[54539] x[54534])
    (54542 'end of statement')
    unknown call_tmp[610514] "expr temp" "maybe param" "maybe type" "temp"
    (610517 'move' call_tmp[610514](54547 call chpl__canHaveFastFollowers lead[54539]))
    unknown call_tmp[610519] "expr temp" "maybe param" "maybe type" "temp"
    (610522 'move' call_tmp[610519](54559 call _cond_test call_tmp[610514]))
    if call_tmp[610519]
    {
      unknown call_tmp[610524] "expr temp" "maybe param" "maybe type" "temp"
      (610527 'move' call_tmp[610524](54552 call chpl__staticFastFollowCheck x[54534] lead[54539]))
      (507561 'move' ret[507556](507560 'deref' call_tmp[610524]))
      gotoReturn _end_chpl__staticFastFollowCheck[507554] _end_chpl__staticFastFollowCheck[507554]
      (474728 'end of statement' lead[54539])
    }
    {
      (507566 'move' ret[507556](507565 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheck[507554] _end_chpl__staticFastFollowCheck[507554]
    }
    label _end_chpl__staticFastFollowCheck[507554]
    (507558 return ret[507556])
  }
  function chpl__staticFastFollowCheck[54570](arg x[54568]:_any[178](?), arg lead[54572]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507572] "RVV" "param" "temp"
    unknown call_tmp[610529] "expr temp" "maybe param" "maybe type" "temp"
    (610532 'move' call_tmp[610529](54577 call chpl__hasInertFastFollowers x[54568]))
    (507577 'move' ret[507572](507576 'deref' call_tmp[610529]))
    (507574 return ret[507572])
  }
  function chpl__staticFastFollowCheck[54591](arg x[54588]:_array[133594](?), arg lead[54593]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507581] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[491619] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610536] "expr temp" "maybe param" "maybe type" "temp"
      (610539 'move' call_tmp[610536](54607 call _value _mt[243] lead[54593]))
      (491623 'move' call_type_tmp[491619](54610 'typeof' call_tmp[610536]))
    }
    unknown call_tmp[610543] "expr temp" "maybe param" "maybe type" "temp"
    (610546 'move' call_tmp[610543](54598 call _value _mt[243] x[54588]))
    unknown call_tmp[610550] "expr temp" "maybe param" "maybe type" "temp"
    (610553 'move' call_tmp[610550](54612 call(54603 call (partial) dsiStaticFastFollowCheck _mt[243] call_tmp[610543]) call_type_tmp[491619]))
    (507586 'move' ret[507581](507585 'deref' call_tmp[610550]))
    (507583 return ret[507581])
  }
  function chpl__staticFastFollowCheckZip[54624](arg x[54621]:_tuple[56202](?)) param : _unknown[51]
  {
    unknown ret[507590] "RVV" "param" "temp"
    unknown call_tmp[610555] "expr temp" "maybe param" "maybe type" "temp"
    (610558 'move' call_tmp[610555](54629 call chpl__canHaveFastFollowersZip x[54621]))
    unknown call_tmp[610560] "expr temp" "maybe param" "maybe type" "temp"
    (610563 'move' call_tmp[610560](54630 call ! call_tmp[610555]))
    unknown call_tmp[610565] "expr temp" "maybe param" "maybe type" "temp"
    (610568 'move' call_tmp[610565](54665 call _cond_test call_tmp[610560]))
    if call_tmp[610565]
    {
      (507595 'move' ret[507590](507594 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507588] _end_chpl__staticFastFollowCheckZip[507588]
    }
    {
      unknown call_tmp[610570] "maybe param" "maybe type" "temp"
      (610573 'move' call_tmp[610570](54639 call x[54621] 0))
      const lead[54640] "dead at end of block" "const" "insert auto destroy" "no copy"
      (540826 'init var' lead[54640] call_tmp[610570])
      (54643 'end of statement')
      unknown call_tmp[610575] "expr temp" "maybe param" "maybe type" "temp"
      (610578 'move' call_tmp[610575](54648 call chpl__canLeadFastFollowers lead[54640]))
      unknown call_tmp[610580] "expr temp" "maybe param" "maybe type" "temp"
      (610583 'move' call_tmp[610580](54659 call _cond_test call_tmp[610575]))
      if call_tmp[610580]
      {
        unknown call_tmp[610585] "expr temp" "maybe param" "maybe type" "temp"
        (610588 'move' call_tmp[610585](54653 call chpl__staticFastFollowCheckZip x[54621] lead[54640]))
        (507600 'move' ret[507590](507599 'deref' call_tmp[610585]))
        gotoReturn _end_chpl__staticFastFollowCheckZip[507588] _end_chpl__staticFastFollowCheckZip[507588]
        (474734 'end of statement' lead[54640])
      }
      {
        (507605 'move' ret[507590](507604 'deref' 0))
        gotoReturn _end_chpl__staticFastFollowCheckZip[507588] _end_chpl__staticFastFollowCheckZip[507588]
      }
    }
    label _end_chpl__staticFastFollowCheckZip[507588]
    (507592 return ret[507590])
  }
  function chpl__staticFastFollowCheckZip[54678](arg x[54675]:_tuple[56202](?), arg lead[54680]:_any[178](?), param arg dim[54683] :
  0 =
  0) param : _unknown[51]
  {
    unknown ret[507611] "RVV" "param" "temp"
    unknown call_tmp[610592] "expr temp" "maybe param" "maybe type" "temp"
    (610595 'move' call_tmp[610592](54687 call size _mt[243] x[54675]))
    unknown call_tmp[610597] "expr temp" "maybe param" "maybe type" "temp"
    (610600 'move' call_tmp[610597](54691 call - call_tmp[610592] 1))
    unknown call_tmp[610602] "expr temp" "maybe param" "maybe type" "temp"
    (610605 'move' call_tmp[610602](54694 call == call_tmp[610597] dim[54683]))
    unknown call_tmp[610607] "expr temp" "maybe param" "maybe type" "temp"
    (610610 'move' call_tmp[610607](54727 call _cond_test call_tmp[610602]))
    if call_tmp[610607]
    {
      unknown call_tmp[610612] "expr temp" "maybe param" "maybe type" "temp"
      (610615 'move' call_tmp[610612](54700 call x[54675] dim[54683]))
      unknown call_tmp[610617] "expr temp" "maybe param" "maybe type" "temp"
      (610620 'move' call_tmp[610617](54703 call chpl__staticFastFollowCheck call_tmp[610612] lead[54680]))
      (507616 'move' ret[507611](507615 'deref' call_tmp[610617]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507609] _end_chpl__staticFastFollowCheckZip[507609]
    }
    {
      unknown tmp[418648] "maybe param" "temp"
      unknown call_tmp[610622] "expr temp" "maybe param" "maybe type" "temp"
      (610625 'move' call_tmp[610622](54710 call x[54675] dim[54683]))
      (418659 'move' tmp[418648](54713 call chpl__staticFastFollowCheck call_tmp[610622] lead[54680]))
      unknown call_tmp[610627] "expr temp" "maybe param" "maybe type" "temp"
      (610630 'move' call_tmp[610627](418661 call _cond_invalid tmp[418648]))
      if call_tmp[610627]
      {
        (418664 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554638] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554639] "maybe param" "temp"
      unknown call_tmp[610632] "expr temp" "maybe param" "maybe type" "temp"
      (610635 'move' call_tmp[610632](418649 call isTrue tmp[418648]))
      (554644 'move' tmp[554639](554642 call _cond_test call_tmp[610632]))
      if tmp[554639]
      {
        unknown tmp[554646] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610637] "expr temp" "maybe param" "maybe type" "temp"
        (610640 'move' call_tmp[610637](54720 call + dim[54683] 1))
        unknown call_tmp[610642] "expr temp" "maybe param" "maybe type" "temp"
        (610645 'move' call_tmp[610642](54722 call chpl__staticFastFollowCheckZip x[54675] lead[54680] call_tmp[610637]))
        (554648 'move' tmp[554646](418652 call isTrue call_tmp[610642]))
        (554653 'move' tmp[554638](554650 '_paramFoldLogical' tmp[554639] tmp[554646]))
      }
      {
        (554658 'move' tmp[554638](554655 '_paramFoldLogical' tmp[554639] 0))
      }
      (507621 'move' ret[507611](507620 'deref' tmp[554638]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507609] _end_chpl__staticFastFollowCheckZip[507609]
    }
    label _end_chpl__staticFastFollowCheckZip[507609]
    (507613 return ret[507611])
  }
  function chpl__dynamicFastFollowCheck[54740](arg x[54738]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507627] "RVV" "temp"
    unknown call_tmp[610647] "expr temp" "maybe param" "maybe type" "temp"
    (610650 'move' call_tmp[610647](54745 call chpl__canHaveFastFollowers x[54738]))
    unknown call_tmp[610652] "expr temp" "maybe param" "maybe type" "temp"
    (610655 'move' call_tmp[610652](54758 call _cond_test call_tmp[610647]))
    if call_tmp[610652]
    {
      unknown call_tmp[610657] "expr temp" "maybe param" "maybe type" "temp"
      (610660 'move' call_tmp[610657](54750 call chpl__dynamicFastFollowCheck x[54738] x[54738]))
      (507632 'move' ret[507627](507631 'deref' call_tmp[610657]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507625] _end_chpl__dynamicFastFollowCheck[507625]
    }
    {
      (507637 'move' ret[507627](507636 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507625] _end_chpl__dynamicFastFollowCheck[507625]
    }
    label _end_chpl__dynamicFastFollowCheck[507625]
    (507629 return ret[507627])
  }
  function chpl__dynamicFastFollowCheck[54769](arg x[54767]:_any[178](?), arg lead[54771]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507643] "RVV" "temp"
    unknown call_tmp[610662] "expr temp" "maybe param" "maybe type" "temp"
    (610665 'move' call_tmp[610662](54776 call chpl__hasInertFastFollowers x[54767]))
    (507648 'move' ret[507643](507647 'deref' call_tmp[610662]))
    (507645 return ret[507643])
  }
  function chpl__dynamicFastFollowCheck[54790](arg x[54787]:_array[133594](?), arg lead[54792]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507652] "RVV" "temp"
    unknown call_tmp[610667] "expr temp" "maybe param" "maybe type" "temp"
    (610670 'move' call_tmp[610667](54798 call chpl__staticFastFollowCheck x[54787] lead[54792]))
    unknown call_tmp[610672] "expr temp" "maybe param" "maybe type" "temp"
    (610675 'move' call_tmp[610672](54816 call _cond_test call_tmp[610667]))
    if call_tmp[610672]
    {
      unknown call_tmp[610679] "expr temp" "maybe param" "maybe type" "temp"
      (610682 'move' call_tmp[610679](54800 call _value _mt[243] x[54787]))
      unknown call_tmp[610686] "expr temp" "maybe param" "maybe type" "temp"
      (610689 'move' call_tmp[610686](54810 call(54805 call (partial) dsiDynamicFastFollowCheck _mt[243] call_tmp[610679]) lead[54792]))
      (507657 'move' ret[507652](507656 'deref' call_tmp[610686]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507650] _end_chpl__dynamicFastFollowCheck[507650]
    }
    {
      (507662 'move' ret[507652](507661 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507650] _end_chpl__dynamicFastFollowCheck[507650]
    }
    label _end_chpl__dynamicFastFollowCheck[507650]
    (507654 return ret[507652])
  }
  function chpl__dynamicFastFollowCheckZip[54831](arg x[54828]:_tuple[56202](?)) : _unknown[51]
  {
    unknown ret[507668] "RVV" "temp"
    unknown call_tmp[610691] "expr temp" "maybe param" "maybe type" "temp"
    (610694 'move' call_tmp[610691](54836 call chpl__canHaveFastFollowersZip x[54828]))
    unknown call_tmp[610696] "expr temp" "maybe param" "maybe type" "temp"
    (610699 'move' call_tmp[610696](54837 call ! call_tmp[610691]))
    unknown call_tmp[610701] "expr temp" "maybe param" "maybe type" "temp"
    (610704 'move' call_tmp[610701](54843 call _cond_test call_tmp[610696]))
    if call_tmp[610701]
    {
      (507673 'move' ret[507668](507672 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507666] _end_chpl__dynamicFastFollowCheckZip[507666]
    }
    unknown call_tmp[610706] "expr temp" "maybe param" "maybe type" "temp"
    (610709 'move' call_tmp[610706](54852 call x[54828] 0))
    unknown call_tmp[610711] "expr temp" "maybe param" "maybe type" "temp"
    (610714 'move' call_tmp[610711](54854 call chpl__canLeadFastFollowers call_tmp[610706]))
    unknown call_tmp[610716] "expr temp" "maybe param" "maybe type" "temp"
    (610719 'move' call_tmp[610716](54870 call _cond_test call_tmp[610711]))
    if call_tmp[610716]
    {
      unknown call_tmp[610721] "expr temp" "maybe param" "maybe type" "temp"
      (610724 'move' call_tmp[610721](54861 call x[54828] 0))
      unknown call_tmp[610726] "expr temp" "maybe param" "maybe type" "temp"
      (610729 'move' call_tmp[610726](54862 call chpl__dynamicFastFollowCheckZip x[54828] call_tmp[610721]))
      (507678 'move' ret[507668](507677 'deref' call_tmp[610726]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507666] _end_chpl__dynamicFastFollowCheckZip[507666]
    }
    {
      (507683 'move' ret[507668](507682 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507666] _end_chpl__dynamicFastFollowCheckZip[507666]
    }
    label _end_chpl__dynamicFastFollowCheckZip[507666]
    (507670 return ret[507668])
  }
  function chpl__dynamicFastFollowCheckZip[54882](arg x[54879]:_tuple[56202](?), arg lead[54884]:_any[178](?), param arg dim[54887] :
  0 =
  0) : _unknown[51]
  {
    unknown ret[507689] "RVV" "temp"
    unknown call_tmp[610733] "expr temp" "maybe param" "maybe type" "temp"
    (610736 'move' call_tmp[610733](54891 call size _mt[243] x[54879]))
    unknown call_tmp[610738] "expr temp" "maybe param" "maybe type" "temp"
    (610741 'move' call_tmp[610738](54895 call - call_tmp[610733] 1))
    unknown call_tmp[610743] "expr temp" "maybe param" "maybe type" "temp"
    (610746 'move' call_tmp[610743](54898 call == call_tmp[610738] dim[54887]))
    unknown call_tmp[610748] "expr temp" "maybe param" "maybe type" "temp"
    (610751 'move' call_tmp[610748](54931 call _cond_test call_tmp[610743]))
    if call_tmp[610748]
    {
      unknown call_tmp[610753] "expr temp" "maybe param" "maybe type" "temp"
      (610756 'move' call_tmp[610753](54904 call x[54879] dim[54887]))
      unknown call_tmp[610758] "expr temp" "maybe param" "maybe type" "temp"
      (610761 'move' call_tmp[610758](54907 call chpl__dynamicFastFollowCheck call_tmp[610753] lead[54884]))
      (507694 'move' ret[507689](507693 'deref' call_tmp[610758]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507687] _end_chpl__dynamicFastFollowCheckZip[507687]
    }
    {
      unknown tmp[418669] "maybe param" "temp"
      unknown call_tmp[610763] "expr temp" "maybe param" "maybe type" "temp"
      (610766 'move' call_tmp[610763](54914 call x[54879] dim[54887]))
      (418680 'move' tmp[418669](54917 call chpl__dynamicFastFollowCheck call_tmp[610763] lead[54884]))
      unknown call_tmp[610768] "expr temp" "maybe param" "maybe type" "temp"
      (610771 'move' call_tmp[610768](418682 call _cond_invalid tmp[418669]))
      if call_tmp[610768]
      {
        (418685 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554665] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554666] "maybe param" "temp"
      unknown call_tmp[610773] "expr temp" "maybe param" "maybe type" "temp"
      (610776 'move' call_tmp[610773](418670 call isTrue tmp[418669]))
      (554671 'move' tmp[554666](554669 call _cond_test call_tmp[610773]))
      if tmp[554666]
      {
        unknown tmp[554673] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610778] "expr temp" "maybe param" "maybe type" "temp"
        (610781 'move' call_tmp[610778](54924 call + dim[54887] 1))
        unknown call_tmp[610783] "expr temp" "maybe param" "maybe type" "temp"
        (610786 'move' call_tmp[610783](54926 call chpl__dynamicFastFollowCheckZip x[54879] lead[54884] call_tmp[610778]))
        (554675 'move' tmp[554673](418673 call isTrue call_tmp[610783]))
        (554680 'move' tmp[554665](554677 '_paramFoldLogical' tmp[554666] tmp[554673]))
      }
      {
        (554685 'move' tmp[554665](554682 '_paramFoldLogical' tmp[554666] 0))
      }
      (507699 'move' ret[507689](507698 'deref' tmp[554665]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507687] _end_chpl__dynamicFastFollowCheckZip[507687]
    }
    label _end_chpl__dynamicFastFollowCheckZip[507687]
    (507691 return ret[507689])
  }
  function _toFollower[54946](arg iterator[54943]:_iteratorClass[208](?), arg leaderIndex[54948]:_any[178](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507705] "RVV" "temp"
    unknown call_tmp[610788] "expr temp" "maybe param" "maybe type" "temp"
    (610791 'move' call_tmp[610788](54971 'to follower' iterator[54943] leaderIndex[54948]))
    unknown call_tmp[610793] "expr temp" "maybe param" "maybe type" "temp"
    (610796 'move' call_tmp[610793](54973 call chpl__autoCopy call_tmp[610788]))
    (507710 'move' ret[507705](507709 'deref' call_tmp[610793]))
    (507707 return ret[507705])
  }
  function _toFollower[54985](arg ir[54982]:_iteratorRecord[205](?), arg leaderIndex[54987]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507714] "RVV" "temp"
    unknown call_tmp[610798] "maybe param" "maybe type" "temp"
    (610801 'move' call_tmp[610798](54992 call _getIterator ir[54982]))
    unknown ic[54993] "dead at end of block" "insert auto destroy" "no copy"
    (540828 'init var' ic[54993] call_tmp[610798])
    (54996 'end of statement')
    unknown call_tmp[610803] "maybe param" "maybe type" "temp"
    (610806 'move' call_tmp[610803](55002 call _toFollower ic[54993] leaderIndex[54987]))
    unknown follower[55003] "dead at end of block" "insert auto destroy" "no copy"
    (540830 'init var' follower[55003] call_tmp[610803])
    (55006 'end of statement' ic[54993])
    (55010 call _freeIterator ic[54993])
    (474753 'end of statement' ic[54993])
    (507719 'move' ret[507714](507718 'deref' follower[55003]))
    gotoReturn _end__toFollower[507712] _end__toFollower[507712]
    (474755 'end of statement' follower[55003])
    label _end__toFollower[507712]
    (507716 return ret[507714])
  }
  function _toFollower[55021](arg x[55019]:_any[178](?), arg leaderIndex[55023]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507725] "RVV" "temp"
    unknown call_tmp[610810] "expr temp" "maybe param" "maybe type" "temp"
    (610813 'move' call_tmp[610810](55031 call(55027 call (partial) these _mt[243] x[55019])))
    unknown call_tmp[610815] "expr temp" "maybe param" "maybe type" "temp"
    (610818 'move' call_tmp[610815](55034 call _toFollower call_tmp[610810] leaderIndex[55023]))
    (507730 'move' ret[507725](507729 'deref' call_tmp[610815]))
    (507727 return ret[507725])
  }
  function _toFollowerZip[55044](arg x[55042]:_any[178](?), arg leaderIndex[55046]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507734] "RVV" "temp"
    unknown call_tmp[610820] "expr temp" "maybe param" "maybe type" "temp"
    (610823 'move' call_tmp[610820](55052 call _toFollower x[55042] leaderIndex[55046]))
    (507739 'move' ret[507734](507738 'deref' call_tmp[610820]))
    (507736 return ret[507734])
  }
  function _toFollowerZip[55064](arg x[55061]:_tuple[56202](?), arg leaderIndex[55066]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507743] "RVV" "temp"
    unknown call_tmp[610825] "expr temp" "maybe param" "maybe type" "temp"
    (610828 'move' call_tmp[610825](55073 call _toFollowerZipInternal x[55061] leaderIndex[55066] 0))
    (507748 'move' ret[507743](507747 'deref' call_tmp[610825]))
    (507745 return ret[507743])
  }
  function _toFollowerZipInternal[55085](arg x[55082]:_tuple[56202](?), arg leaderIndex[55087]:_any[178](?), param arg dim[55090]:int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507752] "RVV" "temp"
    unknown call_tmp[610832] "expr temp" "maybe param" "maybe type" "temp"
    (610835 'move' call_tmp[610832](55095 call size _mt[243] x[55082]))
    unknown call_tmp[610837] "expr temp" "maybe param" "maybe type" "temp"
    (610840 'move' call_tmp[610837](55099 call - call_tmp[610832] 1))
    unknown call_tmp[610842] "expr temp" "maybe param" "maybe type" "temp"
    (610845 'move' call_tmp[610842](55101 call == dim[55090] call_tmp[610837]))
    unknown call_tmp[610847] "expr temp" "maybe param" "maybe type" "temp"
    (610850 'move' call_tmp[610847](55138 call _cond_test call_tmp[610842]))
    if call_tmp[610847]
    {
      unknown call_tmp[610852] "expr temp" "maybe param" "maybe type" "temp"
      (610855 'move' call_tmp[610852](55107 call x[55082] dim[55090]))
      unknown call_tmp[610857] "expr temp" "maybe param" "maybe type" "temp"
      (610860 'move' call_tmp[610857](55110 call _toFollower call_tmp[610852] leaderIndex[55087]))
      unknown call_tmp[610862] "expr temp" "maybe param" "maybe type" "temp"
      (610865 'move' call_tmp[610862](55111 call _build_tuple call_tmp[610857]))
      (507757 'move' ret[507752](507756 'deref' call_tmp[610862]))
      gotoReturn _end__toFollowerZipInternal[507750] _end__toFollowerZipInternal[507750]
    }
    {
      unknown call_tmp[610867] "expr temp" "maybe param" "maybe type" "temp"
      (610870 'move' call_tmp[610867](55119 call x[55082] dim[55090]))
      unknown call_tmp[610872] "expr temp" "maybe param" "maybe type" "temp"
      (610875 'move' call_tmp[610872](55122 call _toFollower call_tmp[610867] leaderIndex[55087]))
      unknown call_tmp[610877] "expr temp" "maybe param" "maybe type" "temp"
      (610880 'move' call_tmp[610877](55129 call + dim[55090] 1))
      unknown call_tmp[610882] "expr temp" "maybe param" "maybe type" "temp"
      (610885 'move' call_tmp[610882](55131 call _toFollowerZipInternal x[55082] leaderIndex[55087] call_tmp[610877]))
      unknown call_tmp[610887] "expr temp" "maybe param" "maybe type" "temp"
      (610890 'move' call_tmp[610887](55134 call _build_tuple call_tmp[610872](55132 'expand_tuple' call_tmp[610882])))
      (507762 'move' ret[507752](507761 'deref' call_tmp[610887]))
      gotoReturn _end__toFollowerZipInternal[507750] _end__toFollowerZipInternal[507750]
    }
    label _end__toFollowerZipInternal[507750]
    (507754 return ret[507752])
  }
  function _toFastFollower[55153](arg iterator[55150]:_iteratorClass[208](?), arg leaderIndex[55155]:_any[178](?), arg fast[55158]:bool[10]) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507768] "RVV" "temp"
    unknown call_tmp[610892] "expr temp" "maybe param" "maybe type" "temp"
    (610895 'move' call_tmp[610892](55167 'to follower' iterator[55150] leaderIndex[55155] 1))
    unknown call_tmp[610897] "expr temp" "maybe param" "maybe type" "temp"
    (610900 'move' call_tmp[610897](55169 call chpl__autoCopy call_tmp[610892]))
    (507773 'move' ret[507768](507772 'deref' call_tmp[610897]))
    (507770 return ret[507768])
  }
  function _toFastFollower[55181](arg ir[55178]:_iteratorRecord[205](?), arg leaderIndex[55183]:_any[178](?), arg fast[55186]:bool[10]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507777] "RVV" "temp"
    unknown call_tmp[610902] "maybe param" "maybe type" "temp"
    (610905 'move' call_tmp[610902](55192 call _getIterator ir[55178]))
    unknown ic[55193] "dead at end of block" "insert auto destroy" "no copy"
    (540832 'init var' ic[55193] call_tmp[610902])
    (55196 'end of statement')
    unknown call_tmp[610907] "maybe param" "maybe type" "temp"
    (610910 'move' call_tmp[610907](55204 call _toFastFollower ic[55193] leaderIndex[55183](fast = 1)))
    unknown follower[55205] "dead at end of block" "insert auto destroy" "no copy"
    (540834 'init var' follower[55205] call_tmp[610907])
    (55208 'end of statement' ic[55193])
    (55212 call _freeIterator ic[55193])
    (474764 'end of statement' ic[55193])
    (507782 'move' ret[507777](507781 'deref' follower[55205]))
    gotoReturn _end__toFastFollower[507775] _end__toFastFollower[507775]
    (474766 'end of statement' follower[55205])
    label _end__toFastFollower[507775]
    (507779 return ret[507777])
  }
  function _toFastFollower[55223](arg x[55221]:_any[178](?), arg leaderIndex[55225]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507788] "RVV" "temp"
    unknown call_tmp[610912] "expr temp" "maybe param" "maybe type" "temp"
    (610915 'move' call_tmp[610912](55230 call chpl__canHaveFastFollowers x[55221]))
    unknown call_tmp[610917] "expr temp" "maybe param" "maybe type" "temp"
    (610920 'move' call_tmp[610917](55253 call _cond_test call_tmp[610912]))
    if call_tmp[610917]
    {
      unknown call_tmp[610922] "expr temp" "maybe param" "maybe type" "temp"
      (610925 'move' call_tmp[610922](55235 call _getIterator x[55221]))
      unknown call_tmp[610927] "expr temp" "maybe param" "maybe type" "temp"
      (610930 'move' call_tmp[610927](55240 call _toFastFollower call_tmp[610922] leaderIndex[55225](fast = 1)))
      (507793 'move' ret[507788](507792 'deref' call_tmp[610927]))
      gotoReturn _end__toFastFollower[507786] _end__toFastFollower[507786]
    }
    {
      unknown call_tmp[610932] "expr temp" "maybe param" "maybe type" "temp"
      (610935 'move' call_tmp[610932](55247 call _getIterator x[55221]))
      unknown call_tmp[610937] "expr temp" "maybe param" "maybe type" "temp"
      (610940 'move' call_tmp[610937](55250 call _toFollower call_tmp[610932] leaderIndex[55225]))
      (507798 'move' ret[507788](507797 'deref' call_tmp[610937]))
      gotoReturn _end__toFastFollower[507786] _end__toFastFollower[507786]
    }
    label _end__toFastFollower[507786]
    (507790 return ret[507788])
  }
  function _toFastFollowerZip[55266](arg x[55264]:_any[178](?), arg leaderIndex[55268]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507804] "RVV" "temp"
    unknown call_tmp[610942] "expr temp" "maybe param" "maybe type" "temp"
    (610945 'move' call_tmp[610942](55274 call _toFastFollower x[55264] leaderIndex[55268]))
    (507809 'move' ret[507804](507808 'deref' call_tmp[610942]))
    (507806 return ret[507804])
  }
  function _toFastFollowerZip[55286](arg x[55283]:_tuple[56202](?), arg leaderIndex[55288]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507813] "RVV" "temp"
    unknown call_tmp[610947] "expr temp" "maybe param" "maybe type" "temp"
    (610950 'move' call_tmp[610947](55295 call _toFastFollowerZip x[55283] leaderIndex[55288] 0))
    (507818 'move' ret[507813](507817 'deref' call_tmp[610947]))
    (507815 return ret[507813])
  }
  function _toFastFollowerZip[55307](arg x[55304]:_tuple[56202](?), arg leaderIndex[55309]:_any[178](?), param arg dim[55312]:int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507822] "RVV" "temp"
    unknown call_tmp[610954] "expr temp" "maybe param" "maybe type" "temp"
    (610957 'move' call_tmp[610954](55317 call size _mt[243] x[55304]))
    unknown call_tmp[610959] "expr temp" "maybe param" "maybe type" "temp"
    (610962 'move' call_tmp[610959](55321 call - call_tmp[610954] 2))
    unknown call_tmp[610964] "expr temp" "maybe param" "maybe type" "temp"
    (610967 'move' call_tmp[610964](55323 call == dim[55312] call_tmp[610959]))
    unknown call_tmp[610969] "expr temp" "maybe param" "maybe type" "temp"
    (610972 'move' call_tmp[610969](55372 call _cond_test call_tmp[610964]))
    if call_tmp[610969]
    {
      unknown call_tmp[610974] "expr temp" "maybe param" "maybe type" "temp"
      (610977 'move' call_tmp[610974](55329 call x[55304] dim[55312]))
      unknown call_tmp[610979] "expr temp" "maybe param" "maybe type" "temp"
      (610982 'move' call_tmp[610979](55332 call _toFastFollowerZip call_tmp[610974] leaderIndex[55309]))
      unknown call_tmp[610984] "expr temp" "maybe param" "maybe type" "temp"
      (610987 'move' call_tmp[610984](55337 call + dim[55312] 1))
      unknown call_tmp[610989] "expr temp" "maybe param" "maybe type" "temp"
      (610992 'move' call_tmp[610989](55340 call x[55304] call_tmp[610984]))
      unknown call_tmp[610994] "expr temp" "maybe param" "maybe type" "temp"
      (610997 'move' call_tmp[610994](55343 call _toFastFollowerZip call_tmp[610989] leaderIndex[55309]))
      unknown call_tmp[610999] "expr temp" "maybe param" "maybe type" "temp"
      (611002 'move' call_tmp[610999](55345 call _build_tuple call_tmp[610979] call_tmp[610994]))
      (507827 'move' ret[507822](507826 'deref' call_tmp[610999]))
      gotoReturn _end__toFastFollowerZip[507820] _end__toFastFollowerZip[507820]
    }
    {
      unknown call_tmp[611004] "expr temp" "maybe param" "maybe type" "temp"
      (611007 'move' call_tmp[611004](55353 call x[55304] dim[55312]))
      unknown call_tmp[611009] "expr temp" "maybe param" "maybe type" "temp"
      (611012 'move' call_tmp[611009](55356 call _toFastFollowerZip call_tmp[611004] leaderIndex[55309]))
      unknown call_tmp[611014] "expr temp" "maybe param" "maybe type" "temp"
      (611017 'move' call_tmp[611014](55363 call + dim[55312] 1))
      unknown call_tmp[611019] "expr temp" "maybe param" "maybe type" "temp"
      (611022 'move' call_tmp[611019](55365 call _toFastFollowerZip x[55304] leaderIndex[55309] call_tmp[611014]))
      unknown call_tmp[611024] "expr temp" "maybe param" "maybe type" "temp"
      (611027 'move' call_tmp[611024](55368 call _build_tuple call_tmp[611009](55366 'expand_tuple' call_tmp[611019])))
      (507832 'move' ret[507822](507831 'deref' call_tmp[611024]))
      gotoReturn _end__toFastFollowerZip[507820] _end__toFastFollowerZip[507820]
    }
    label _end__toFastFollowerZip[507820]
    (507824 return ret[507822])
  }
  function singleValIter[55387](arg iterables[55384]:_tuple[56202](?)) param : _unknown[51] "no doc"
  {
    unknown ret[507838] "RVV" "param" "temp"
    unknown tmp[418690] "maybe param" "temp"
    unknown call_tmp[611031] "expr temp" "maybe param" "maybe type" "temp"
    (611034 'move' call_tmp[611031](55390 call size _mt[243] iterables[55384]))
    (418701 'move' tmp[418690](55394 call == call_tmp[611031] 1))
    unknown call_tmp[611036] "expr temp" "maybe param" "maybe type" "temp"
    (611039 'move' call_tmp[611036](418703 call _cond_invalid tmp[418690]))
    if call_tmp[611036]
    {
      (418706 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554692] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554693] "maybe param" "temp"
    unknown call_tmp[611041] "expr temp" "maybe param" "maybe type" "temp"
    (611044 'move' call_tmp[611041](418691 call isTrue tmp[418690]))
    (554698 'move' tmp[554693](554696 call _cond_test call_tmp[611041]))
    if tmp[554693]
    {
      unknown tmp[554700] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611046] "expr temp" "maybe param" "maybe type" "temp"
      (611049 'move' call_tmp[611046](55401 call iterables[55384] 0))
      unknown call_tmp[611051] "expr temp" "maybe param" "maybe type" "temp"
      (611054 'move' call_tmp[611051](55403 call _getIterator call_tmp[611046]))
      unknown call_tmp[611056] "expr temp" "maybe param" "maybe type" "temp"
      (611059 'move' call_tmp[611056](55405 call isRefIter call_tmp[611051]))
      unknown call_tmp[611061] "expr temp" "maybe param" "maybe type" "temp"
      (611064 'move' call_tmp[611061](55406 call ! call_tmp[611056]))
      (554702 'move' tmp[554700](418694 call isTrue call_tmp[611061]))
      (554707 'move' tmp[554692](554704 '_paramFoldLogical' tmp[554693] tmp[554700]))
    }
    {
      (554712 'move' tmp[554692](554709 '_paramFoldLogical' tmp[554693] 0))
    }
    (507843 'move' ret[507838](507842 'deref' tmp[554692]))
    (507840 return ret[507838])
  }
  function singleRefIter[55421](arg iterables[55418]:_tuple[56202](?)) param : _unknown[51] "no doc"
  {
    unknown ret[507847] "RVV" "param" "temp"
    unknown tmp[418711] "maybe param" "temp"
    unknown call_tmp[611068] "expr temp" "maybe param" "maybe type" "temp"
    (611071 'move' call_tmp[611068](55424 call size _mt[243] iterables[55418]))
    (418722 'move' tmp[418711](55428 call == call_tmp[611068] 1))
    unknown call_tmp[611073] "expr temp" "maybe param" "maybe type" "temp"
    (611076 'move' call_tmp[611073](418724 call _cond_invalid tmp[418711]))
    if call_tmp[611073]
    {
      (418727 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554719] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554720] "maybe param" "temp"
    unknown call_tmp[611078] "expr temp" "maybe param" "maybe type" "temp"
    (611081 'move' call_tmp[611078](418712 call isTrue tmp[418711]))
    (554725 'move' tmp[554720](554723 call _cond_test call_tmp[611078]))
    if tmp[554720]
    {
      unknown tmp[554727] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611083] "expr temp" "maybe param" "maybe type" "temp"
      (611086 'move' call_tmp[611083](55435 call iterables[55418] 0))
      unknown call_tmp[611088] "expr temp" "maybe param" "maybe type" "temp"
      (611091 'move' call_tmp[611088](55437 call _getIterator call_tmp[611083]))
      unknown call_tmp[611093] "expr temp" "maybe param" "maybe type" "temp"
      (611096 'move' call_tmp[611093](55439 call isRefIter call_tmp[611088]))
      (554729 'move' tmp[554727](418715 call isTrue call_tmp[611093]))
      (554734 'move' tmp[554719](554731 '_paramFoldLogical' tmp[554720] tmp[554727]))
    }
    {
      (554739 'move' tmp[554719](554736 '_paramFoldLogical' tmp[554720] 0))
    }
    (507852 'move' ret[507847](507851 'deref' tmp[554719]))
    (507849 return ret[507847])
  }
  function vectorizeOnly[55453](arg iterables[55450]:_any[178](?) ...) : _unknown[51] "iterator fn" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507856] "RVV" "temp"
    {
      unknown _indexOfInterest[55467] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55468] "expr temp" "temp"
      unknown call_tmp[611098] "expr temp" "maybe param" "maybe type" "temp"
      (611101 'move' call_tmp[611098](55463 call iterables[55450] 0))
      (55477 'move' _iterator[55468](55475 call _getIterator call_tmp[611098]))
      Defer
      {
        {
          (55494 call _freeIterator _iterator[55468])
        }
      }
      { scopeless type
        (55483 'move' _indexOfInterest[55467](55480 call iteratorIndex _iterator[55468]))
      }
      ForLoop[55469]
      {
        unknown i[55487] "index var" "insert auto destroy"
        (474779 'end of statement')
        (55489 'move' i[55487] _indexOfInterest[55467])
        (474780 'end of statement' i[55487])
        unknown yret[507860] "YVV" "temp"
        (507863 'move' yret[507860](507862 'deref' i[55487]))
        (507865 yield yret[507860])
        (474782 'end of statement' i[55487])
        label _continueLabel[55472]
        _indexOfInterest[55467]
        _iterator[55468]
      }
      label _breakLabel[55473]
    }
    (507858 return ret[507856])
  }
  where {
    (55458 call singleValIter iterables[55450])
  }
  function vectorizeOnly[55511](arg iterables[55508]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507869] "RVV" "temp"
    {
      unknown _indexOfInterest[55525] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55526] "expr temp" "temp"
      unknown call_tmp[611103] "expr temp" "maybe param" "maybe type" "temp"
      (611106 'move' call_tmp[611103](55521 call iterables[55508] 0))
      (55535 'move' _iterator[55526](55533 call _getIterator call_tmp[611103]))
      Defer
      {
        {
          (55552 call _freeIterator _iterator[55526])
        }
      }
      { scopeless type
        (55541 'move' _indexOfInterest[55525](55538 call iteratorIndex _iterator[55526]))
      }
      ForLoop[55527]
      {
        unknown i[55545] "index var" "insert auto destroy"
        (474785 'end of statement')
        (55547 'move' i[55545] _indexOfInterest[55525])
        (474786 'end of statement' i[55545])
        unknown yret[507873] "YVV" "temp"
        (507876 'move' yret[507873](507875 'addr of' i[55545]))
        (507878 yield yret[507873])
        (474788 'end of statement' i[55545])
        label _continueLabel[55530]
        _indexOfInterest[55525]
        _iterator[55526]
      }
      label _breakLabel[55531]
    }
    (507871 return ret[507869])
  }
  where {
    (55516 call singleRefIter iterables[55508])
  }
  function vectorizeOnly[55570](arg iterables[55567]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507882] "RVV" "temp"
    {
      unknown _indexOfInterest[55584] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55585] "expr temp" "temp"
      (55593 'move' _iterator[55585](55580 call _getIteratorZip iterables[55567]))
      Defer
      {
        {
          (55609 call _freeIterator _iterator[55585])
        }
      }
      { scopeless type
        (55598 'move' _indexOfInterest[55584](55595 call iteratorIndex _iterator[55585]))
      }
      ForLoop[55586]
      {
        unknown i[55602] "index var" "insert auto destroy"
        (474791 'end of statement')
        (55604 'move' i[55602] _indexOfInterest[55584])
        (474792 'end of statement' i[55602])
        unknown yret[507886] "YVV" "temp"
        (507889 'move' yret[507886](507888 'deref' i[55602]))
        (507891 yield yret[507886])
        (474794 'end of statement' i[55602])
        label _continueLabel[55589]
        _indexOfInterest[55584]
        _iterator[55585]
      }
      label _breakLabel[55590]
    }
    (507884 return ret[507882])
  }
  where {
    (55574 call > numiterables[55565] 1)
  }
  function vectorizeOnly[55626](param arg tag[55623]:iterKind[453], arg iterables[55629]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507895] "RVV" "temp"
    {
      unknown _indexOfInterest[55655] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55656] "expr temp" "temp"
      unknown call_tmp[611108] "expr temp" "maybe param" "maybe type" "temp"
      (611111 'move' call_tmp[611108](55651 call iterables[55629] 0))
      (55665 'move' _iterator[55656](55663 call _getIterator call_tmp[611108]))
      Defer
      {
        {
          (55682 call _freeIterator _iterator[55656])
        }
      }
      { scopeless type
        (55671 'move' _indexOfInterest[55655](55668 call iteratorIndex _iterator[55656]))
      }
      ForLoop[55657]
      {
        unknown i[55675] "index var" "insert auto destroy"
        (474797 'end of statement')
        (55677 'move' i[55675] _indexOfInterest[55655])
        (474798 'end of statement' i[55675])
        unknown yret[507899] "YVV" "temp"
        (507902 'move' yret[507899](507901 'deref' i[55675]))
        (507904 yield yret[507899])
        (474800 'end of statement' i[55675])
        label _continueLabel[55660]
        _indexOfInterest[55655]
        _iterator[55656]
      }
      label _breakLabel[55661]
    }
    (507897 return ret[507895])
  }
  where {
    unknown tmp[418732] "maybe param" "temp"
    (418743 'move' tmp[418732](55639 call == tag[55623] standalone[451]))
    unknown call_tmp[611113] "expr temp" "maybe param" "maybe type" "temp"
    (611116 'move' call_tmp[611113](418745 call _cond_invalid tmp[418732]))
    if call_tmp[611113]
    {
      (418748 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554746] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554747] "maybe param" "temp"
    unknown call_tmp[611118] "expr temp" "maybe param" "maybe type" "temp"
    (611121 'move' call_tmp[611118](418733 call isTrue tmp[418732]))
    (554752 'move' tmp[554747](554750 call _cond_test call_tmp[611118]))
    if tmp[554747]
    {
      unknown tmp[554754] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611123] "expr temp" "maybe param" "maybe type" "temp"
      (611126 'move' call_tmp[611123](55644 call singleValIter iterables[55629]))
      (554756 'move' tmp[554754](418736 call isTrue call_tmp[611123]))
      (554761 'move' tmp[554746](554758 '_paramFoldLogical' tmp[554747] tmp[554754]))
    }
    {
      (554766 'move' tmp[554746](554763 '_paramFoldLogical' tmp[554747] 0))
    }
    (748245 call chpl_statementLevelSymbol tmp[554746])
  }
  function vectorizeOnly[55699](param arg tag[55696]:iterKind[453], arg iterables[55702]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507908] "RVV" "temp"
    {
      unknown _indexOfInterest[55726] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55727] "expr temp" "temp"
      unknown call_tmp[611128] "expr temp" "maybe param" "maybe type" "temp"
      (611131 'move' call_tmp[611128](55722 call iterables[55702] 0))
      (55736 'move' _iterator[55727](55734 call _getIterator call_tmp[611128]))
      Defer
      {
        {
          (55753 call _freeIterator _iterator[55727])
        }
      }
      { scopeless type
        (55742 'move' _indexOfInterest[55726](55739 call iteratorIndex _iterator[55727]))
      }
      ForLoop[55728]
      {
        unknown i[55746] "index var" "insert auto destroy"
        (474803 'end of statement')
        (55748 'move' i[55746] _indexOfInterest[55726])
        (474804 'end of statement' i[55746])
        unknown yret[507912] "YVV" "temp"
        (507915 'move' yret[507912](507914 'addr of' i[55746]))
        (507917 yield yret[507912])
        (474806 'end of statement' i[55746])
        label _continueLabel[55731]
        _indexOfInterest[55726]
        _iterator[55727]
      }
      label _breakLabel[55732]
    }
    (507910 return ret[507908])
  }
  where {
    unknown tmp[418753] "maybe param" "temp"
    (418764 'move' tmp[418753](55710 call == tag[55696] standalone[451]))
    unknown call_tmp[611133] "expr temp" "maybe param" "maybe type" "temp"
    (611136 'move' call_tmp[611133](418766 call _cond_invalid tmp[418753]))
    if call_tmp[611133]
    {
      (418769 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554773] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554774] "maybe param" "temp"
    unknown call_tmp[611138] "expr temp" "maybe param" "maybe type" "temp"
    (611141 'move' call_tmp[611138](418754 call isTrue tmp[418753]))
    (554779 'move' tmp[554774](554777 call _cond_test call_tmp[611138]))
    if tmp[554774]
    {
      unknown tmp[554781] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611143] "expr temp" "maybe param" "maybe type" "temp"
      (611146 'move' call_tmp[611143](55715 call singleRefIter iterables[55702]))
      (554783 'move' tmp[554781](418757 call isTrue call_tmp[611143]))
      (554788 'move' tmp[554773](554785 '_paramFoldLogical' tmp[554774] tmp[554781]))
    }
    {
      (554793 'move' tmp[554773](554790 '_paramFoldLogical' tmp[554774] 0))
    }
    (748247 call chpl_statementLevelSymbol tmp[554773])
  }
  function vectorizeOnly[55770](param arg tag[55767]:iterKind[453], arg iterables[55774]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507921] "RVV" "temp"
    {
      unknown _indexOfInterest[55798] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55799] "expr temp" "temp"
      (55807 'move' _iterator[55799](55794 call _getIteratorZip iterables[55774]))
      Defer
      {
        {
          (55823 call _freeIterator _iterator[55799])
        }
      }
      { scopeless type
        (55812 'move' _indexOfInterest[55798](55809 call iteratorIndex _iterator[55799]))
      }
      ForLoop[55800]
      {
        unknown i[55816] "index var" "insert auto destroy"
        (474809 'end of statement')
        (55818 'move' i[55816] _indexOfInterest[55798])
        (474810 'end of statement' i[55816])
        unknown yret[507925] "YVV" "temp"
        (507928 'move' yret[507925](507927 'deref' i[55816]))
        (507930 yield yret[507925])
        (474812 'end of statement' i[55816])
        label _continueLabel[55803]
        _indexOfInterest[55798]
        _iterator[55799]
      }
      label _breakLabel[55804]
    }
    (507923 return ret[507921])
  }
  where {
    unknown tmp[418774] "maybe param" "temp"
    (418785 'move' tmp[418774](55782 call == tag[55767] standalone[451]))
    unknown call_tmp[611148] "expr temp" "maybe param" "maybe type" "temp"
    (611151 'move' call_tmp[611148](418787 call _cond_invalid tmp[418774]))
    if call_tmp[611148]
    {
      (418790 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554800] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554801] "maybe param" "temp"
    unknown call_tmp[611153] "expr temp" "maybe param" "maybe type" "temp"
    (611156 'move' call_tmp[611153](418775 call isTrue tmp[418774]))
    (554806 'move' tmp[554801](554804 call _cond_test call_tmp[611153]))
    if tmp[554801]
    {
      unknown tmp[554808] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611158] "expr temp" "maybe param" "maybe type" "temp"
      (611161 'move' call_tmp[611158](55786 call > numiterables[55772] 1))
      (554810 'move' tmp[554808](418778 call isTrue call_tmp[611158]))
      (554815 'move' tmp[554800](554812 '_paramFoldLogical' tmp[554801] tmp[554808]))
    }
    {
      (554820 'move' tmp[554800](554817 '_paramFoldLogical' tmp[554801] 0))
    }
    (748249 call chpl_statementLevelSymbol tmp[554800])
  }
  function vectorizeOnly[55840](param arg tag[55837]:iterKind[453], arg iterables[55843]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507934] "RVV" "temp"
    unknown yret[507938] "YVV" "temp"
    unknown call_tmp[611163] "expr temp" "maybe param" "maybe type" "temp"
    (611166 'move' call_tmp[611163](55864 call iterables[55843] 0))
    (507941 'move' yret[507938](507940 'deref' call_tmp[611163]))
    (507943 yield yret[507938])
    (507936 return ret[507934])
  }
  where {
    unknown tmp[418795] "maybe param" "temp"
    (418806 'move' tmp[418795](55853 call == tag[55837] leader[447]))
    unknown call_tmp[611168] "expr temp" "maybe param" "maybe type" "temp"
    (611171 'move' call_tmp[611168](418808 call _cond_invalid tmp[418795]))
    if call_tmp[611168]
    {
      (418811 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554827] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554828] "maybe param" "temp"
    unknown call_tmp[611173] "expr temp" "maybe param" "maybe type" "temp"
    (611176 'move' call_tmp[611173](418796 call isTrue tmp[418795]))
    (554833 'move' tmp[554828](554831 call _cond_test call_tmp[611173]))
    if tmp[554828]
    {
      unknown tmp[554835] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611178] "expr temp" "maybe param" "maybe type" "temp"
      (611181 'move' call_tmp[611178](55858 call singleValIter iterables[55843]))
      (554837 'move' tmp[554835](418799 call isTrue call_tmp[611178]))
      (554842 'move' tmp[554827](554839 '_paramFoldLogical' tmp[554828] tmp[554835]))
    }
    {
      (554847 'move' tmp[554827](554844 '_paramFoldLogical' tmp[554828] 0))
    }
    (748251 call chpl_statementLevelSymbol tmp[554827])
  }
  function vectorizeOnly[55877](param arg tag[55874]:iterKind[453], arg iterables[55880]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507947] "RVV" "temp"
    unknown yret[507951] "YVV" "temp"
    unknown call_tmp[611183] "expr temp" "maybe param" "maybe type" "temp"
    (611186 'move' call_tmp[611183](55899 call iterables[55880] 0))
    (507954 'move' yret[507951](507953 'addr of' call_tmp[611183]))
    (507956 yield yret[507951])
    (507949 return ret[507947])
  }
  where {
    unknown tmp[418816] "maybe param" "temp"
    (418827 'move' tmp[418816](55888 call == tag[55874] leader[447]))
    unknown call_tmp[611188] "expr temp" "maybe param" "maybe type" "temp"
    (611191 'move' call_tmp[611188](418829 call _cond_invalid tmp[418816]))
    if call_tmp[611188]
    {
      (418832 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554854] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554855] "maybe param" "temp"
    unknown call_tmp[611193] "expr temp" "maybe param" "maybe type" "temp"
    (611196 'move' call_tmp[611193](418817 call isTrue tmp[418816]))
    (554860 'move' tmp[554855](554858 call _cond_test call_tmp[611193]))
    if tmp[554855]
    {
      unknown tmp[554862] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611198] "expr temp" "maybe param" "maybe type" "temp"
      (611201 'move' call_tmp[611198](55893 call singleRefIter iterables[55880]))
      (554864 'move' tmp[554862](418820 call isTrue call_tmp[611198]))
      (554869 'move' tmp[554854](554866 '_paramFoldLogical' tmp[554855] tmp[554862]))
    }
    {
      (554874 'move' tmp[554854](554871 '_paramFoldLogical' tmp[554855] 0))
    }
    (748253 call chpl_statementLevelSymbol tmp[554854])
  }
  function vectorizeOnly[55912](param arg tag[55909]:iterKind[453], arg iterables[55916]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507960] "RVV" "temp"
    unknown yret[507964] "YVV" "temp"
    (507967 'move' yret[507964](507966 'deref' iterables[55916]))
    (507969 yield yret[507964])
    (507962 return ret[507960])
  }
  where {
    unknown tmp[418837] "maybe param" "temp"
    (418848 'move' tmp[418837](55924 call == tag[55909] leader[447]))
    unknown call_tmp[611203] "expr temp" "maybe param" "maybe type" "temp"
    (611206 'move' call_tmp[611203](418850 call _cond_invalid tmp[418837]))
    if call_tmp[611203]
    {
      (418853 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554881] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554882] "maybe param" "temp"
    unknown call_tmp[611208] "expr temp" "maybe param" "maybe type" "temp"
    (611211 'move' call_tmp[611208](418838 call isTrue tmp[418837]))
    (554887 'move' tmp[554882](554885 call _cond_test call_tmp[611208]))
    if tmp[554882]
    {
      unknown tmp[554889] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611213] "expr temp" "maybe param" "maybe type" "temp"
      (611216 'move' call_tmp[611213](55928 call > numiterables[55914] 1))
      (554891 'move' tmp[554889](418841 call isTrue call_tmp[611213]))
      (554896 'move' tmp[554881](554893 '_paramFoldLogical' tmp[554882] tmp[554889]))
    }
    {
      (554901 'move' tmp[554881](554898 '_paramFoldLogical' tmp[554882] 0))
    }
    (748255 call chpl_statementLevelSymbol tmp[554881])
  }
  function vectorizeOnly[55945](param arg tag[55942]:iterKind[453], arg followThis[55947]:_any[178](?), arg iterables[55950]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507973] "RVV" "temp"
    {
      unknown _indexOfInterest[55976] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55977] "expr temp" "temp"
      unknown call_tmp[611218] "expr temp" "maybe param" "maybe type" "temp"
      (611221 'move' call_tmp[611218](55972 call iterables[55950] 0))
      (55986 'move' _iterator[55977](55984 call _getIterator call_tmp[611218]))
      Defer
      {
        {
          (56003 call _freeIterator _iterator[55977])
        }
      }
      { scopeless type
        (55992 'move' _indexOfInterest[55976](55989 call iteratorIndex _iterator[55977]))
      }
      ForLoop[55978]
      {
        unknown i[55996] "index var" "insert auto destroy"
        (474818 'end of statement')
        (55998 'move' i[55996] _indexOfInterest[55976])
        (474819 'end of statement' i[55996])
        unknown yret[507977] "YVV" "temp"
        (507980 'move' yret[507977](507979 'deref' i[55996]))
        (507982 yield yret[507977])
        (474821 'end of statement' i[55996])
        label _continueLabel[55981]
        _indexOfInterest[55976]
        _iterator[55977]
      }
      label _breakLabel[55982]
    }
    (507975 return ret[507973])
  }
  where {
    unknown tmp[418858] "maybe param" "temp"
    (418869 'move' tmp[418858](55960 call == tag[55942] follower[449]))
    unknown call_tmp[611223] "expr temp" "maybe param" "maybe type" "temp"
    (611226 'move' call_tmp[611223](418871 call _cond_invalid tmp[418858]))
    if call_tmp[611223]
    {
      (418874 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554908] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554909] "maybe param" "temp"
    unknown call_tmp[611228] "expr temp" "maybe param" "maybe type" "temp"
    (611231 'move' call_tmp[611228](418859 call isTrue tmp[418858]))
    (554914 'move' tmp[554909](554912 call _cond_test call_tmp[611228]))
    if tmp[554909]
    {
      unknown tmp[554916] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611233] "expr temp" "maybe param" "maybe type" "temp"
      (611236 'move' call_tmp[611233](55965 call singleValIter iterables[55950]))
      (554918 'move' tmp[554916](418862 call isTrue call_tmp[611233]))
      (554923 'move' tmp[554908](554920 '_paramFoldLogical' tmp[554909] tmp[554916]))
    }
    {
      (554928 'move' tmp[554908](554925 '_paramFoldLogical' tmp[554909] 0))
    }
    (748257 call chpl_statementLevelSymbol tmp[554908])
  }
  function vectorizeOnly[56020](param arg tag[56017]:iterKind[453], arg followThis[56022]:_any[178](?), arg iterables[56025]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507986] "RVV" "temp"
    {
      unknown _indexOfInterest[56049] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56050] "expr temp" "temp"
      unknown call_tmp[611238] "expr temp" "maybe param" "maybe type" "temp"
      (611241 'move' call_tmp[611238](56045 call iterables[56025] 0))
      (56059 'move' _iterator[56050](56057 call _getIterator call_tmp[611238]))
      Defer
      {
        {
          (56076 call _freeIterator _iterator[56050])
        }
      }
      { scopeless type
        (56065 'move' _indexOfInterest[56049](56062 call iteratorIndex _iterator[56050]))
      }
      ForLoop[56051]
      {
        unknown i[56069] "index var" "insert auto destroy"
        (474824 'end of statement')
        (56071 'move' i[56069] _indexOfInterest[56049])
        (474825 'end of statement' i[56069])
        unknown yret[507990] "YVV" "temp"
        (507993 'move' yret[507990](507992 'addr of' i[56069]))
        (507995 yield yret[507990])
        (474827 'end of statement' i[56069])
        label _continueLabel[56054]
        _indexOfInterest[56049]
        _iterator[56050]
      }
      label _breakLabel[56055]
    }
    (507988 return ret[507986])
  }
  where {
    unknown tmp[418879] "maybe param" "temp"
    (418890 'move' tmp[418879](56033 call == tag[56017] follower[449]))
    unknown call_tmp[611243] "expr temp" "maybe param" "maybe type" "temp"
    (611246 'move' call_tmp[611243](418892 call _cond_invalid tmp[418879]))
    if call_tmp[611243]
    {
      (418895 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554935] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554936] "maybe param" "temp"
    unknown call_tmp[611248] "expr temp" "maybe param" "maybe type" "temp"
    (611251 'move' call_tmp[611248](418880 call isTrue tmp[418879]))
    (554941 'move' tmp[554936](554939 call _cond_test call_tmp[611248]))
    if tmp[554936]
    {
      unknown tmp[554943] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611253] "expr temp" "maybe param" "maybe type" "temp"
      (611256 'move' call_tmp[611253](56038 call singleRefIter iterables[56025]))
      (554945 'move' tmp[554943](418883 call isTrue call_tmp[611253]))
      (554950 'move' tmp[554935](554947 '_paramFoldLogical' tmp[554936] tmp[554943]))
    }
    {
      (554955 'move' tmp[554935](554952 '_paramFoldLogical' tmp[554936] 0))
    }
    (748259 call chpl_statementLevelSymbol tmp[554935])
  }
  function vectorizeOnly[56093](param arg tag[56090]:iterKind[453], arg followThis[56095]:_any[178](?), arg iterables[56099]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507999] "RVV" "temp"
    {
      unknown _indexOfInterest[56123] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56124] "expr temp" "temp"
      (56132 'move' _iterator[56124](56119 call _getIteratorZip iterables[56099]))
      Defer
      {
        {
          (56148 call _freeIterator _iterator[56124])
        }
      }
      { scopeless type
        (56137 'move' _indexOfInterest[56123](56134 call iteratorIndex _iterator[56124]))
      }
      ForLoop[56125]
      {
        unknown i[56141] "index var" "insert auto destroy"
        (474830 'end of statement')
        (56143 'move' i[56141] _indexOfInterest[56123])
        (474831 'end of statement' i[56141])
        unknown yret[508003] "YVV" "temp"
        (508006 'move' yret[508003](508005 'deref' i[56141]))
        (508008 yield yret[508003])
        (474833 'end of statement' i[56141])
        label _continueLabel[56128]
        _indexOfInterest[56123]
        _iterator[56124]
      }
      label _breakLabel[56129]
    }
    (508001 return ret[507999])
  }
  where {
    unknown tmp[418900] "maybe param" "temp"
    (418911 'move' tmp[418900](56107 call == tag[56090] follower[449]))
    unknown call_tmp[611258] "expr temp" "maybe param" "maybe type" "temp"
    (611261 'move' call_tmp[611258](418913 call _cond_invalid tmp[418900]))
    if call_tmp[611258]
    {
      (418916 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554962] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554963] "maybe param" "temp"
    unknown call_tmp[611263] "expr temp" "maybe param" "maybe type" "temp"
    (611266 'move' call_tmp[611263](418901 call isTrue tmp[418900]))
    (554968 'move' tmp[554963](554966 call _cond_test call_tmp[611263]))
    if tmp[554963]
    {
      unknown tmp[554970] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611268] "expr temp" "maybe param" "maybe type" "temp"
      (611271 'move' call_tmp[611268](56111 call > numiterables[56097] 1))
      (554972 'move' tmp[554970](418904 call isTrue call_tmp[611268]))
      (554977 'move' tmp[554962](554974 '_paramFoldLogical' tmp[554963] tmp[554970]))
    }
    {
      (554982 'move' tmp[554962](554979 '_paramFoldLogical' tmp[554963] 0))
    }
    (748261 call chpl_statementLevelSymbol tmp[554962])
  }
  (355086 'used modules list'(52123 'use' ChapelStandard[20267])(52127 'use' Reflection[224903]))
}