AST dump for ChapelIteratorSupport after pass normalize.
Module use list: ChapelStandard Reflection 

{
  function chpl__init_ChapelIteratorSupport[416058]() : void[4] "insert line file info" "module init"
  {
    (508088 return _void[55])
  }
  function iteratorIndex[52135](arg ic[52132]:_iteratorClass[208](?)) : _unknown[51] "allow ref" "no doc" "fn returns iterator"
  {
    unknown ret[506986] "RVV" "temp"
    (52144 call(52140 call (partial) advance _mt[243] ic[52132]))
    (474662 'end of statement')
    (506990 'move' ret[506986](52154 call(52150 call (partial) getValue _mt[243] ic[52132])))
    (506988 return ret[506986])
  }
  function iteratorIndex[52165](arg t[52162]:_tuple[56202](?)) : _unknown[51] "expand tuples with values" "no doc" "fn returns iterator"
  {
    unknown ret[507008] "RVV" "temp"
    function iteratorIndexHelp[52173](arg t[52170]:_tuple[56202](?), param arg dim[52176]:int(64)[13]) : _unknown[51] "expand tuples with values"
    {
      unknown ret[506994] "RVV" "temp"
      unknown call_tmp[609430] "expr temp" "maybe param" "maybe type" "temp"
      (609433 'move' call_tmp[609430](52181 call size _mt[243] t[52170]))
      unknown call_tmp[609435] "expr temp" "maybe param" "maybe type" "temp"
      (609438 'move' call_tmp[609435](52185 call - call_tmp[609430] 1))
      unknown call_tmp[609440] "expr temp" "maybe param" "maybe type" "temp"
      (609443 'move' call_tmp[609440](52187 call == dim[52176] call_tmp[609435]))
      unknown call_tmp[609445] "expr temp" "maybe param" "maybe type" "temp"
      (609448 'move' call_tmp[609445](52222 call _cond_test call_tmp[609440]))
      if call_tmp[609445]
      {
        unknown call_tmp[609450] "expr temp" "maybe param" "maybe type" "temp"
        (609453 'move' call_tmp[609450](52194 call t[52170] dim[52176]))
        unknown call_tmp[609455] "expr temp" "maybe param" "maybe type" "temp"
        (609458 'move' call_tmp[609455](52196 call iteratorIndex call_tmp[609450]))
        (506998 'move' ret[506994](52198 call _build_tuple_always_allow_ref call_tmp[609455]))
        gotoReturn _end_iteratorIndexHelp[506992] _end_iteratorIndexHelp[506992]
      }
      {
        unknown call_tmp[609460] "expr temp" "maybe param" "maybe type" "temp"
        (609463 'move' call_tmp[609460](52206 call t[52170] dim[52176]))
        unknown call_tmp[609465] "expr temp" "maybe param" "maybe type" "temp"
        (609468 'move' call_tmp[609465](52208 call iteratorIndex call_tmp[609460]))
        unknown call_tmp[609470] "expr temp" "maybe param" "maybe type" "temp"
        (609473 'move' call_tmp[609470](52215 call + dim[52176] 1))
        unknown call_tmp[609475] "expr temp" "maybe param" "maybe type" "temp"
        (609478 'move' call_tmp[609475](52217 call iteratorIndexHelp t[52170] call_tmp[609470]))
        (507002 'move' ret[506994](52219 call _build_tuple_always_allow_ref call_tmp[609465](52218 'expand_tuple' call_tmp[609475])))
        gotoReturn _end_iteratorIndexHelp[506992] _end_iteratorIndexHelp[506992]
      }
      label _end_iteratorIndexHelp[506992]
      (506996 return ret[506994])
    }
    (507012 'move' ret[507008](52236 call iteratorIndexHelp t[52162] 0))
    (507010 return ret[507008])
  }
  function iteratorIndexType[52245](arg x[52243]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[507016] "RVV" "temp" "type variable"
    unknown call_tmp[609480] "expr temp" "maybe param" "maybe type" "temp"
    (609483 'move' call_tmp[609480](52250 call isArray x[52243]))
    unknown call_tmp[609485] "expr temp" "maybe param" "maybe type" "temp"
    (609488 'move' call_tmp[609485](52323 call _cond_test call_tmp[609480]))
    if call_tmp[609485]
    {
      unknown call_tmp[609492] "expr temp" "maybe param" "maybe type" "temp"
      (609495 'move' call_tmp[609492](52252 call eltType _mt[243] x[52243]))
      (507021 'move' ret[507016](507020 'deref' call_tmp[609492]))
      gotoReturn _end_iteratorIndexType[507014] _end_iteratorIndexType[507014]
    }
    {
      unknown call_tmp[609497] "expr temp" "maybe param" "maybe type" "temp"
      (609500 'move' call_tmp[609497](52261 call isDomain x[52243]))
      unknown call_tmp[609502] "expr temp" "maybe param" "maybe type" "temp"
      (609505 'move' call_tmp[609502](52319 call _cond_test call_tmp[609497]))
      if call_tmp[609502]
      {
        unknown tmp[554505] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[554506] "maybe param" "temp"
        unknown call_tmp[609509] "expr temp" "maybe param" "maybe type" "temp"
        (609512 'move' call_tmp[609509](52265 call rank _mt[243] x[52243]))
        unknown call_tmp[609514] "expr temp" "maybe param" "maybe type" "temp"
        (609517 'move' call_tmp[609514](52269 call == call_tmp[609509] 1))
        (554511 'move' tmp[554506](554509 call _cond_test call_tmp[609514]))
        if tmp[554506]
        {
          unknown tmp[554513] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (554515 'move' tmp[554513](52274 call idxType _mt[243] x[52243]))
          (554520 'move' tmp[554505](554517 '_paramFoldLogical' tmp[554506] tmp[554513]))
        }
        {
          unknown tmp[554522] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[609523] "expr temp" "maybe param" "maybe type" "temp"
          (609526 'move' call_tmp[609523](52278 call rank _mt[243] x[52243]))
          unknown call_tmp[609530] "expr temp" "maybe param" "maybe type" "temp"
          (609533 'move' call_tmp[609530](52282 call idxType _mt[243] x[52243]))
          (554524 'move' tmp[554522](52285 call * call_tmp[609523] call_tmp[609530]))
          (554529 'move' tmp[554505](554526 '_paramFoldLogical' tmp[554506] tmp[554522]))
        }
        (507026 'move' ret[507016](507025 'deref' tmp[554505]))
        gotoReturn _end_iteratorIndexType[507014] _end_iteratorIndexType[507014]
      }
      {
        unknown call_tmp[609535] "maybe param" "maybe type" "temp"
        (609538 'move' call_tmp[609535](52296 call _getIterator x[52243]))
        unknown ic[52297] "dead at end of block" "insert auto destroy" "no copy"
        (540859 'init var' ic[52297] call_tmp[609535])
        (52300 'end of statement')
        unknown call_tmp[609540] "maybe param" "maybe type" "temp"
        (609543 'move' call_tmp[609540](52305 call iteratorIndex ic[52297]))
        unknown i[52306] "dead at end of block" "insert auto destroy" "no copy"
        (540861 'init var' i[52306] call_tmp[609540])
        (52309 'end of statement' ic[52297])
        (52313 call _freeIterator ic[52297])
        (474670 'end of statement' ic[52297])
        unknown call_tmp[609545] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (609548 'move' call_tmp[609545](52316 'typeof' i[52306]))
        (507031 'move' ret[507016](507030 'deref' call_tmp[609545]))
        gotoReturn _end_iteratorIndexType[507014] _end_iteratorIndexType[507014]
        (474672 'end of statement' i[52306])
      }
    }
    label _end_iteratorIndexType[507014]
    (507018 return ret[507016])
  }
  function iteratorIndexTypeZip[52337](arg xs[52334]:_any[178](?) ...) type : _unknown[51] "no doc"
  {
    unknown ret[507053] "RVV" "temp" "type variable"
    function iteratorIndexTypeZipHelp[52343](param arg dim[52341]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[507037] "RVV" "temp" "type variable"
      unknown call_tmp[609552] "expr temp" "maybe param" "maybe type" "temp"
      (609555 'move' call_tmp[609552](52347 call size _mt[243] xs[52334]))
      unknown call_tmp[609557] "expr temp" "maybe param" "maybe type" "temp"
      (609560 'move' call_tmp[609557](52351 call - call_tmp[609552] 1))
      unknown call_tmp[609562] "expr temp" "maybe param" "maybe type" "temp"
      (609565 'move' call_tmp[609562](52353 call == dim[52341] call_tmp[609557]))
      unknown call_tmp[609567] "expr temp" "maybe param" "maybe type" "temp"
      (609570 'move' call_tmp[609567](52386 call _cond_test call_tmp[609562]))
      if call_tmp[609567]
      {
        unknown call_tmp[609572] "expr temp" "maybe param" "maybe type" "temp"
        (609575 'move' call_tmp[609572](52359 call xs[52334] dim[52341]))
        unknown call_tmp[609577] "expr temp" "maybe param" "maybe type" "temp"
        (609580 'move' call_tmp[609577](52361 call iteratorIndexType call_tmp[609572]))
        unknown call_tmp[609582] "expr temp" "maybe param" "maybe type" "temp"
        (609585 'move' call_tmp[609582](52362 call _build_tuple call_tmp[609577]))
        (507042 'move' ret[507037](507041 'deref' call_tmp[609582]))
        gotoReturn _end_iteratorIndexTypeZipHelp[507035] _end_iteratorIndexTypeZipHelp[507035]
      }
      {
        unknown call_tmp[609587] "expr temp" "maybe param" "maybe type" "temp"
        (609590 'move' call_tmp[609587](52370 call xs[52334] dim[52341]))
        unknown call_tmp[609592] "expr temp" "maybe param" "maybe type" "temp"
        (609595 'move' call_tmp[609592](52372 call iteratorIndexType call_tmp[609587]))
        unknown call_tmp[609597] "expr temp" "maybe param" "maybe type" "temp"
        (609600 'move' call_tmp[609597](52376 call + dim[52341] 1))
        unknown call_tmp[609602] "expr temp" "maybe param" "maybe type" "temp"
        (609605 'move' call_tmp[609602](52379 call iteratorIndexTypeZipHelp call_tmp[609597]))
        unknown call_tmp[609607] "expr temp" "maybe param" "maybe type" "temp"
        (609610 'move' call_tmp[609607](52382 call _build_tuple call_tmp[609592](52380 'expand_tuple' call_tmp[609602])))
        (507047 'move' ret[507037](507046 'deref' call_tmp[609607]))
        gotoReturn _end_iteratorIndexTypeZipHelp[507035] _end_iteratorIndexTypeZipHelp[507035]
      }
      label _end_iteratorIndexTypeZipHelp[507035]
      (507039 return ret[507037])
    }
    unknown call_tmp[609612] "expr temp" "maybe param" "maybe type" "temp"
    (609615 'move' call_tmp[609612](52399 call iteratorIndexTypeZipHelp 0))
    (507058 'move' ret[507053](507057 'deref' call_tmp[609612]))
    (507055 return ret[507053])
  }
  function iteratorToArrayElementType[52410](arg t[52407]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[507062] "RVV" "temp" "type variable"
    unknown call_tmp[609617] "expr temp" "maybe param" "maybe type" "temp"
    (609620 'move' call_tmp[609617](52433 'scalar promotion type' t[52407]))
    unknown call_tmp[609622] "expr temp" "maybe param" "maybe type" "temp"
    (609625 'move' call_tmp[609622](52435 call chpl_buildStandInRTT call_tmp[609617]))
    unknown call_tmp[609627] "expr temp" "maybe param" "maybe type" "temp"
    (609630 'move' call_tmp[609627](52437 call chpl__unref call_tmp[609622]))
    (507067 'move' ret[507062](507066 'deref' call_tmp[609627]))
    (507064 return ret[507062])
  }
  function chpl_buildStandInRTT[52449](arg domType[52446]:_domain[125908](?)) type : _unknown[51] "unsafe"
  {
    unknown ret[507071] "RVV" "temp" "type variable"
    unknown instanceObj[52488] "dead at end of block" "insert auto destroy"
    unknown call_tmp[609632] "expr temp" "maybe param" "maybe type" "temp"
    (609635 'move' call_tmp[609632](52487 'static field type' domType[52446] "_instance"))
    (540863 'default init var' instanceObj[52488] call_tmp[609632])
    (52491 'end of statement')
    unknown call_tmp[609637] "expr temp" "maybe param" "maybe type" "temp"
    (609640 'move' call_tmp[609637](52496 call chpl_buildStandInRTT instanceObj[52488]))
    (507076 'move' ret[507071](507075 'deref' call_tmp[609637]))
    gotoReturn _end_chpl_buildStandInRTT[507069] _end_chpl_buildStandInRTT[507069]
    (474678 'end of statement' instanceObj[52488])
    label _end_chpl_buildStandInRTT[507069]
    (507073 return ret[507071])
  }
  function chpl_buildStandInRTT[52509](arg arrType[52506]:_array[133594](?)) type : _unknown[51] "unsafe"
  {
    unknown ret[507082] "RVV" "temp" "type variable"
    unknown arrInstType[52516] "dead at end of block" "insert auto destroy" "type variable"(52515 'static field type' arrType[52506] "_instance")
    (540868 'move' arrInstType[52516](540865 'static field type' arrType[52506] "_instance"))
    unknown domInstType[52541] "dead at end of block" "insert auto destroy" "type variable"(52540 'static field type' arrInstType[52516] "dom")
    (540873 'move' domInstType[52541](540870 'static field type' arrInstType[52516] "dom"))
    unknown domInstance[52545] "dead at end of block" "insert auto destroy"
    (540875 'default init var' domInstance[52545] domInstType[52541])
    (52548 'end of statement')
    unknown standinDomain[52553] "dead at end of block" "no auto destroy"
    unknown call_tmp[609642] "expr temp" "maybe param" "maybe type" "temp"
    (609645 'move' call_tmp[609642](52552 call chpl_buildStandInRTT domInstance[52545]))
    (540877 'default init var' standinDomain[52553] call_tmp[609642])
    (52556 'end of statement')
    unknown instanceObj[52558] "dead at end of block" "insert auto destroy"
    (540879 'default init var' instanceObj[52558] arrInstType[52516])
    (52561 'end of statement' arrInstType[52516] domInstType[52541] domInstance[52545] arrInstType[52516])
    unknown call_tmp[609649] "expr temp" "maybe param" "maybe type" "temp"
    (609652 'move' call_tmp[609649](52581 call eltType _mt[243] instanceObj[52558]))
    unknown instanceEltType[52585] "dead at end of block" "insert auto destroy" "type variable"(52584 'static typeof' call_tmp[609649])
    unknown call_tmp[609656] "expr temp" "maybe param" "maybe type" "temp"
    (609659 'move' call_tmp[609656](540883 call eltType _mt[243] instanceObj[52558]))
    (540886 'move' instanceEltType[52585](540881 'static typeof' call_tmp[609656]))
    (474684 'end of statement' instanceObj[52558])
    unknown call_tmp[609661] "expr temp" "maybe param" "maybe type" "temp"
    (609664 'move' call_tmp[609661](52594 call chpl_buildStandInRTT instanceEltType[52585]))
    unknown call_tmp[609666] "expr temp" "maybe param" "maybe type" "temp"
    (609669 'move' call_tmp[609666](52595 call chpl__buildArrayRuntimeType standinDomain[52553] call_tmp[609661]))
    (507087 'move' ret[507082](507086 'deref' call_tmp[609666]))
    gotoReturn _end_chpl_buildStandInRTT[507080] _end_chpl_buildStandInRTT[507080]
    (474686 'end of statement' standinDomain[52553] instanceEltType[52585])
    label _end_chpl_buildStandInRTT[507080]
    (507084 return ret[507082])
  }
  function chpl_buildStandInRTT[52606](arg irType[52603]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[507114] "RVV" "temp" "type variable"
    unknown shapeType[52612] "dead at end of block" "insert auto destroy" "type variable"(52611 call chpl_iteratorShapeStaticTypeOrNothing irType[52603])
    (540891 'move' shapeType[52612](540889 call chpl_iteratorShapeStaticTypeOrNothing irType[52603]))
    function standinType[52618]() type : _unknown[51] "unsafe"
    {
      unknown ret[507093] "RVV" "temp" "type variable"
      unknown call_tmp[609671] "expr temp" "maybe param" "maybe type" "temp"
      (609674 'move' call_tmp[609671](52622 call == shapeType[52612] nothing[7]))
      unknown call_tmp[609676] "expr temp" "maybe param" "maybe type" "temp"
      (609679 'move' call_tmp[609676](52678 call _cond_test call_tmp[609671]))
      if call_tmp[609676]
      {
        unknown call_tmp[609681] "expr temp" "maybe param" "maybe type" "temp"
        (609684 'move' call_tmp[609681](52627 call chpl__buildDomainRuntimeType defaultDist[94053] 1))
        (507098 'move' ret[507093](507097 'deref' call_tmp[609681]))
        gotoReturn _end_standinType[507091] _end_standinType[507091]
      }
      {
        unknown call_tmp[609686] "expr temp" "maybe param" "maybe type" "temp"
        (609689 'move' call_tmp[609686](52635 call isRange shapeType[52612]))
        unknown call_tmp[609691] "expr temp" "maybe param" "maybe type" "temp"
        (609694 'move' call_tmp[609691](52674 call _cond_test call_tmp[609686]))
        if call_tmp[609691]
        {
          unknown call_tmp[609696] "expr temp" "maybe param" "maybe type" "temp"
          (609699 'move' call_tmp[609696](52639 call chpl__buildDomainRuntimeType defaultDist[94053] 1))
          (507103 'move' ret[507093](507102 'deref' call_tmp[609696]))
          gotoReturn _end_standinType[507091] _end_standinType[507091]
        }
        {
          unknown domInstance[52645] "dead at end of block" "insert auto destroy"
          (540893 'default init var' domInstance[52645] shapeType[52612])
          (52648 'end of statement')
          unknown tmp[418574] "maybe param" "temp"
          unknown call_tmp[609701] "expr temp" "maybe param" "maybe type" "temp"
          (609704 'move' call_tmp[609701](52654 call isDomain domInstance[52645]))
          (418585 'move' tmp[418574](52655 call ! call_tmp[609701]))
          unknown call_tmp[609706] "expr temp" "maybe param" "maybe type" "temp"
          (609709 'move' call_tmp[609706](418587 call _cond_invalid tmp[418574]))
          if call_tmp[609706]
          {
            (418590 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[554536] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[554537] "maybe param" "temp"
          unknown call_tmp[609711] "expr temp" "maybe param" "maybe type" "temp"
          (609714 'move' call_tmp[609711](418575 call isTrue tmp[418574]))
          (554542 'move' tmp[554537](554540 call _cond_test call_tmp[609711]))
          if tmp[554537]
          {
            unknown tmp[554544] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[609716] "expr temp" "maybe param" "maybe type" "temp"
            (609719 'move' call_tmp[609716](52660 call isArray domInstance[52645]))
            unknown call_tmp[609721] "expr temp" "maybe param" "maybe type" "temp"
            (609724 'move' call_tmp[609721](52661 call ! call_tmp[609716]))
            (554546 'move' tmp[554544](418578 call isTrue call_tmp[609721]))
            (554551 'move' tmp[554536](554548 '_paramFoldLogical' tmp[554537] tmp[554544]))
          }
          {
            (554556 'move' tmp[554536](554553 '_paramFoldLogical' tmp[554537] 0))
          }
          (52666 call compilerAssert tmp[554536])
          (474692 'end of statement' domInstance[52645])
          unknown call_tmp[609726] "expr temp" "maybe param" "maybe type" "temp"
          (609729 'move' call_tmp[609726](52671 call chpl_buildStandInRTT domInstance[52645]))
          (507108 'move' ret[507093](507107 'deref' call_tmp[609726]))
          gotoReturn _end_standinType[507091] _end_standinType[507091]
          (474694 'end of statement' domInstance[52645])
        }
      }
      label _end_standinType[507091]
      (507095 return ret[507093])
    }
    unknown standinDomain[52689] "dead at end of block" "no auto destroy"
    unknown call_tmp[609731] "expr temp" "maybe param" "maybe type" "temp"
    (609734 'move' call_tmp[609731](52688 call standinType))
    (540895 'default init var' standinDomain[52689] call_tmp[609731])
    (52692 'end of statement')
    unknown call_tmp[609736] "expr temp" "maybe param" "maybe type" "temp"
    (609739 'move' call_tmp[609736](52700 'scalar promotion type' irType[52603]))
    unknown call_tmp[609741] "expr temp" "maybe param" "maybe type" "temp"
    (609744 'move' call_tmp[609741](52702 call chpl_buildStandInRTT call_tmp[609736]))
    unknown call_tmp[609746] "expr temp" "maybe param" "maybe type" "temp"
    (609749 'move' call_tmp[609746](52703 call chpl__buildArrayRuntimeType standinDomain[52689] call_tmp[609741]))
    (507119 'move' ret[507114](507118 'deref' call_tmp[609746]))
    gotoReturn _end_chpl_buildStandInRTT[507112] _end_chpl_buildStandInRTT[507112]
    (474696 'end of statement' standinDomain[52689])
    label _end_chpl_buildStandInRTT[507112]
    (507116 return ret[507114])
  }
  function chpl_buildStandInRTT[52712](arg nonRTtype[52710]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[507125] "RVV" "temp" "type variable"
    (507130 'move' ret[507125](507129 'deref' nonRTtype[52710]))
    (507127 return ret[507125])
  }
  function chpl_buildStandInRTT[52724](arg domInst[52722]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[507134] "RVV" "temp" "type variable"
    unknown call_tmp[609753] "expr temp" "maybe param" "maybe type" "temp"
    (609756 'move' call_tmp[609753](52736 call rank _mt[243] domInst[52722]))
    unknown call_tmp[609760] "expr temp" "maybe param" "maybe type" "temp"
    (609763 'move' call_tmp[609760](52740 call idxType _mt[243] domInst[52722]))
    unknown call_tmp[609767] "expr temp" "maybe param" "maybe type" "temp"
    (609770 'move' call_tmp[609767](52746 call stridable _mt[243] domInst[52722]))
    unknown call_tmp[609772] "expr temp" "maybe param" "maybe type" "temp"
    (609775 'move' call_tmp[609772](52749 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[609753] call_tmp[609760] call_tmp[609767]))
    (507139 'move' ret[507134](507138 'deref' call_tmp[609772]))
    (507136 return ret[507134])
  }
  where {
    unknown call_tmp[609777] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609780 'move' call_tmp[609777](52727 'typeof' domInst[52722]))
    (52730 call <= call_tmp[609777] unmanaged DefaultRectangularDom[415518](?))
  }
  function chpl_buildStandInRTT[52760](arg domInst[52758]:_any[178](?)) type : _unknown[51] "no return value for void"
  {
    unknown call_tmp[609782] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609785 'move' call_tmp[609782](52763 'typeof' domInst[52758]))
    unknown call_tmp[609787] "expr temp" "maybe param" "maybe type" "temp"
    (609790 'move' call_tmp[609787](52766 call <= call_tmp[609782] unmanaged BaseDom[415521]))
    unknown call_tmp[609792] "expr temp" "maybe param" "maybe type" "temp"
    (609795 'move' call_tmp[609792](52838 call _cond_test call_tmp[609787]))
    if call_tmp[609792]
    {
      (52789 call compilerError "for/forall/promoted expressions are not implemented when the elements are or contain non-DefaultRectangular domains or arrays")
    }
    {
      unknown call_tmp[609797] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (609800 'move' call_tmp[609797](52813 'typeof' domInst[52758]))
      unknown call_tmp[609802] "expr temp" "maybe param" "maybe type" "temp"
      (609805 'move' call_tmp[609802](52815 call _cast string[26] call_tmp[609797]))
      (52836 call compilerError "unexpected argument of type " call_tmp[609802] " for chpl_buildStandInRTT()")
    }
    (507141 return _void[55])
  }
  function chpl_trivialLeader[52849]() : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[507145] "RVV" "temp"
    unknown yret[507149] "YVV" "temp"
    (507152 'move' yret[507149](507151 'deref' 0))
    (507154 yield yret[507149])
    (507147 return ret[507145])
  }
  function chpl_computeIteratorShape[52865](arg arg[52862]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[507158] "RVV" "temp"
    unknown call_tmp[609809] "expr temp" "maybe param" "maybe type" "temp"
    (609812 'move' call_tmp[609809](52871 call _dom _mt[243] arg[52862]))
    unknown call_tmp[609814] "expr temp" "maybe param" "maybe type" "temp"
    (609817 'move' call_tmp[609814](52875 call chpl_computeIteratorShape call_tmp[609809]))
    (507163 'move' ret[507158](507162 'deref' call_tmp[609814]))
    (507160 return ret[507158])
  }
  function chpl_computeIteratorShape[52887](arg arg[52884]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[507167] "RVV" "temp"
    unknown call_tmp[609821] "expr temp" "maybe param" "maybe type" "temp"
    (609824 'move' call_tmp[609821](52890 call _instance _mt[243] arg[52884]))
    (507172 'move' ret[507167](507171 'deref' call_tmp[609821]))
    (507169 return ret[507167])
  }
  function chpl_computeIteratorShape[52907](arg arg[52904]:range[64319](?)) : _unknown[51] "inline"
  {
    unknown ret[507176] "RVV" "temp"
    (507181 'move' ret[507176](507180 'deref' arg[52904]))
    (507178 return ret[507176])
  }
  function chpl_computeIteratorShape[52921](arg arg[52918]:_iteratorRecord[205](?)) : _unknown[51] "inline"
  {
    unknown ret[507185] "RVV" "temp"
    unknown call_tmp[609826] "expr temp" "maybe param" "maybe type" "temp"
    (609829 'move' call_tmp[609826](52926 call chpl_iteratorHasShape arg[52918]))
    unknown call_tmp[609831] "expr temp" "maybe param" "maybe type" "temp"
    (609834 'move' call_tmp[609831](52944 call _cond_test call_tmp[609826]))
    if call_tmp[609831]
    {
      unknown call_tmp[609838] "expr temp" "maybe param" "maybe type" "temp"
      (609841 'move' call_tmp[609838](52930 call _shape_ _mt[243] arg[52918]))
      (507190 'move' ret[507185](507189 'deref' call_tmp[609838]))
      gotoReturn _end_chpl_computeIteratorShape[507183] _end_chpl_computeIteratorShape[507183]
    }
    {
      const myvoid[52936] "dead at end of block" "const" "insert auto destroy"
      (540897 'init var' myvoid[52936] none[57])
      (52939 'end of statement')
      (507195 'move' ret[507185](507194 'deref' myvoid[52936]))
      gotoReturn _end_chpl_computeIteratorShape[507183] _end_chpl_computeIteratorShape[507183]
      (474707 'end of statement' myvoid[52936])
    }
    label _end_chpl_computeIteratorShape[507183]
    (507187 return ret[507185])
  }
  function chpl_computeIteratorShape[52956](arg arg[52954]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507201] "RVV" "temp"
    (507206 'move' ret[507201](507205 'deref' none[57]))
    (507203 return ret[507201])
  }
  function chpl_iteratorHasShape[52970](arg ir[52967]:_iteratorRecord[205](?)) param : _unknown[51]
  {
    unknown ret[507210] "RVV" "param" "temp"
    unknown call_tmp[609843] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609846 'move' call_tmp[609843](52974 'typeof' ir[52967]))
    unknown call_tmp[609848] "expr temp" "maybe param" "maybe type" "temp"
    (609851 'move' call_tmp[609848](52991 call hasField call_tmp[609843] "_shape_"))
    unknown call_tmp[609853] "expr temp" "maybe param" "maybe type" "temp"
    (609856 'move' call_tmp[609853](53005 call _cond_test call_tmp[609848]))
    if call_tmp[609853]
    {
      { scopeless type
        unknown call_type_tmp[491679] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609860] "expr temp" "maybe param" "maybe type" "temp"
        (609863 'move' call_tmp[609860](52993 call _shape_ _mt[243] ir[52967]))
        (491683 'move' call_type_tmp[491679](52996 'typeof' call_tmp[609860]))
      }
      unknown call_tmp[609865] "expr temp" "maybe param" "maybe type" "temp"
      (609868 'move' call_tmp[609865](52998 call != call_type_tmp[491679] void[4]))
      (507215 'move' ret[507210](507214 'deref' call_tmp[609865]))
      gotoReturn _end_chpl_iteratorHasShape[507208] _end_chpl_iteratorHasShape[507208]
    }
    {
      (507220 'move' ret[507210](507219 'deref' 0))
      gotoReturn _end_chpl_iteratorHasShape[507208] _end_chpl_iteratorHasShape[507208]
    }
    label _end_chpl_iteratorHasShape[507208]
    (507212 return ret[507210])
  }
  function chpl_iteratorHasDomainShape[53020](arg ir[53017]:_iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    unknown ret[507226] "RVV" "param" "temp"
    unknown call_tmp[609870] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609873 'move' call_tmp[609870](53024 'typeof' ir[53017]))
    unknown call_tmp[609875] "expr temp" "maybe param" "maybe type" "temp"
    (609878 'move' call_tmp[609875](53027 call hasField call_tmp[609870] "_shape_"))
    unknown call_tmp[609880] "expr temp" "maybe param" "maybe type" "temp"
    (609883 'move' call_tmp[609880](53042 call _cond_test call_tmp[609875]))
    if call_tmp[609880]
    {
      { scopeless type
        unknown call_type_tmp[491685] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609887] "expr temp" "maybe param" "maybe type" "temp"
        (609890 'move' call_tmp[609887](53030 call _shape_ _mt[243] ir[53017]))
        (491689 'move' call_type_tmp[491685](53033 'typeof' call_tmp[609887]))
      }
      unknown call_tmp[609892] "expr temp" "maybe param" "maybe type" "temp"
      (609895 'move' call_tmp[609892](354319 'is_subtype' BaseDom[372854](?) call_type_tmp[491685]))
      (507231 'move' ret[507226](507230 'deref' call_tmp[609892]))
      gotoReturn _end_chpl_iteratorHasDomainShape[507224] _end_chpl_iteratorHasDomainShape[507224]
    }
    {
      (507236 'move' ret[507226](507235 'deref' 0))
      gotoReturn _end_chpl_iteratorHasDomainShape[507224] _end_chpl_iteratorHasDomainShape[507224]
    }
    label _end_chpl_iteratorHasDomainShape[507224]
    (507228 return ret[507226])
  }
  function chpl_iteratorHasRangeShape[53057](arg ir[53054]:_iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    unknown ret[507242] "RVV" "param" "temp"
    unknown call_tmp[609897] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609900 'move' call_tmp[609897](53061 'typeof' ir[53054]))
    unknown call_tmp[609902] "expr temp" "maybe param" "maybe type" "temp"
    (609905 'move' call_tmp[609902](53064 call hasField call_tmp[609897] "_shape_"))
    unknown call_tmp[609907] "expr temp" "maybe param" "maybe type" "temp"
    (609910 'move' call_tmp[609907](53078 call _cond_test call_tmp[609902]))
    if call_tmp[609907]
    {
      { scopeless type
        unknown call_type_tmp[491691] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609914] "expr temp" "maybe param" "maybe type" "temp"
        (609917 'move' call_tmp[609914](53067 call _shape_ _mt[243] ir[53054]))
        (491695 'move' call_type_tmp[491691](53070 'typeof' call_tmp[609914]))
      }
      unknown call_tmp[609919] "expr temp" "maybe param" "maybe type" "temp"
      (609922 'move' call_tmp[609919](53072 call isRange call_type_tmp[491691]))
      (507247 'move' ret[507242](507246 'deref' call_tmp[609919]))
      gotoReturn _end_chpl_iteratorHasRangeShape[507240] _end_chpl_iteratorHasRangeShape[507240]
    }
    {
      (507252 'move' ret[507242](507251 'deref' 0))
      gotoReturn _end_chpl_iteratorHasRangeShape[507240] _end_chpl_iteratorHasRangeShape[507240]
    }
    label _end_chpl_iteratorHasRangeShape[507240]
    (507244 return ret[507242])
  }
  function chpl_iteratorShapeStaticTypeOrNothing[53093](arg ir[53090]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[507258] "RVV" "temp" "type variable"
    unknown call_tmp[609924] "expr temp" "maybe param" "maybe type" "temp"
    (609927 'move' call_tmp[609924](53099 call hasField ir[53090] "_shape_"))
    unknown call_tmp[609929] "expr temp" "maybe param" "maybe type" "temp"
    (609932 'move' call_tmp[609929](53110 call _cond_test call_tmp[609924]))
    if call_tmp[609929]
    {
      unknown call_tmp[609934] "expr temp" "maybe param" "maybe type" "temp"
      (609937 'move' call_tmp[609934](53104 'static field type' ir[53090] "_shape_"))
      (507263 'move' ret[507258](507262 'deref' call_tmp[609934]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrNothing[507256] _end_chpl_iteratorShapeStaticTypeOrNothing[507256]
    }
    {
      (507268 'move' ret[507258](507267 'deref' nothing[7]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrNothing[507256] _end_chpl_iteratorShapeStaticTypeOrNothing[507256]
    }
    label _end_chpl_iteratorShapeStaticTypeOrNothing[507256]
    (507260 return ret[507258])
  }
  function chpl_iteratorFromForExpr[53125](arg ir[53122]:_iteratorRecord[205](?)) param : _unknown[51]
  {
    unknown ret[507274] "RVV" "param" "temp"
    unknown call_tmp[609939] "expr temp" "maybe param" "maybe type" "temp"
    (609942 'move' call_tmp[609939](53152 call canResolveMethod module=[255] Reflection[224970] ir[53122] "_fromForExpr_"))
    unknown call_tmp[609944] "expr temp" "maybe param" "maybe type" "temp"
    (609947 'move' call_tmp[609944](53162 call _cond_test call_tmp[609939]))
    if call_tmp[609944]
    {
      unknown call_tmp[609951] "expr temp" "maybe param" "maybe type" "temp"
      (609954 'move' call_tmp[609951](53154 call _fromForExpr_ _mt[243] ir[53122]))
      (507279 'move' ret[507274](507278 'deref' call_tmp[609951]))
      gotoReturn _end_chpl_iteratorFromForExpr[507272] _end_chpl_iteratorFromForExpr[507272]
    }
    {
      (507284 'move' ret[507274](507283 'deref' 0))
      gotoReturn _end_chpl_iteratorFromForExpr[507272] _end_chpl_iteratorFromForExpr[507272]
    }
    label _end_chpl_iteratorFromForExpr[507272]
    (507276 return ret[507274])
    (357353 'referenced modules list' Reflection[224970])
  }
  function chpl_iteratorFromForExpr[53175](arg arg[53173]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507290] "RVV" "param" "temp"
    (507295 'move' ret[507290](507294 'deref' 0))
    (507292 return ret[507290])
  }
  function _iteratorRecord[205](?).writeThis[53188](arg _mt[53193]:_MT[238], arg this[53190]:_iteratorRecord[205](?) :
  _iteratorRecord[205](?), arg f[53186]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown first[53197] "dead at end of block" "insert auto destroy"
    (540899 'init var' first[53197] 1 bool[10])
    (53200 'end of statement')
    {
      unknown _indexOfInterest[53245] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53246] "expr temp" "temp"
      (53255 'move' _iterator[53246](53253 call _getIterator this[53190]))
      Defer
      {
        {
          (53271 call _freeIterator _iterator[53246])
        }
      }
      { scopeless type
        (53260 'move' _indexOfInterest[53245](53257 call iteratorIndex _iterator[53246]))
      }
      ForLoop[53247]
      {
        unknown e[53264] "index var" "insert auto destroy"
        (474722 'end of statement')
        (53266 'move' e[53264] _indexOfInterest[53245])
        (474723 'end of statement' e[53264])
        {
          unknown call_tmp[609956] "expr temp" "maybe param" "maybe type" "temp"
          (609959 'move' call_tmp[609956](53205 call ! first[53197]))
          unknown call_tmp[609961] "expr temp" "maybe param" "maybe type" "temp"
          (609964 'move' call_tmp[609961](53233 call _cond_test call_tmp[609956]))
          if call_tmp[609961]
          {
            (53225 call <~> f[53186] " ")
          }
          {
            (53230 call = first[53197] 0)
            (474726 'end of statement' first[53197])
          }
          (53242 call <~> f[53186] e[53264])
          (474728 'end of statement' e[53264])
        }
        label _continueLabel[53250]
        _indexOfInterest[53245]
        _iterator[53246]
      }
      label _breakLabel[53251]
    }
    (507297 return _void[55])
  }
  function =[53286](ref arg ic[53283]:_iteratorRecord[205](?), arg xs[53288]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[53304] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53305] "expr temp" "temp"
      unknown call_tmp[609966] "expr temp" "maybe param" "maybe type" "temp"
      (609969 'move' call_tmp[609966](53314 call _getIterator ic[53283]))
      unknown call_tmp[609971] "expr temp" "maybe param" "maybe type" "temp"
      (609974 'move' call_tmp[609971](53317 call _getIterator xs[53288]))
      (53319 'move' _iterator[53305](53298 call _build_tuple call_tmp[609966] call_tmp[609971]))
      Defer
      {
        {
          (53349 call _freeIterator _iterator[53305])
        }
      }
      { scopeless type
        (53324 'move' _indexOfInterest[53304](53321 call iteratorIndex _iterator[53305]))
      }
      ForLoop[53306]
      {
        (53329 call _check_tuple_var_decl _indexOfInterest[53304] 2)
        (474731 'end of statement')
        unknown e[53335] "index var" "insert auto destroy"
        (474732 'end of statement')
        (53337 'move' e[53335](53333 call _indexOfInterest[53304] 0))
        (474733 'end of statement' e[53335])
        unknown x[53342] "index var" "insert auto destroy"
        (474735 'end of statement')
        (53344 'move' x[53342](53340 call _indexOfInterest[53304] 1))
        (474736 'end of statement' x[53342])
        (53301 call = e[53335] x[53342])
        (474738 'end of statement' e[53335] x[53342])
        label _continueLabel[53309]
        _indexOfInterest[53304]
        _iterator[53305]
      }
      label _breakLabel[53310]
    }
    (507299 return _void[55])
  }
  function =[53365](ref arg ic[53362]:_iteratorRecord[205](?), arg x[53371] :
  (53370 call iteratorIndexType ic[53362])) : _unknown[51] "assignop" "suppress lvalue error" "no return value for void"
  {
    {
      unknown _indexOfInterest[53381] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53382] "expr temp" "temp"
      (53391 'move' _iterator[53382](53389 call _getIterator ic[53362]))
      Defer
      {
        {
          (53407 call _freeIterator _iterator[53382])
        }
      }
      { scopeless type
        (53396 'move' _indexOfInterest[53381](53393 call iteratorIndex _iterator[53382]))
      }
      ForLoop[53383]
      {
        unknown e[53400] "index var" "insert auto destroy"
        (474742 'end of statement')
        (53402 'move' e[53400] _indexOfInterest[53381])
        (474743 'end of statement' e[53400])
        (53378 call = e[53400] x[53371])
        (474745 'end of statement' e[53400])
        label _continueLabel[53386]
        _indexOfInterest[53381]
        _iterator[53382]
      }
      label _breakLabel[53387]
    }
    (507301 return _void[55])
  }
  function _getIterator[53421](const  ref arg x[53419]:_any[178](?)) : _unknown[51] "inline" "no borrow convert" "suppress lvalue error"
  {
    unknown ret[507305] "RVV" "temp"
    unknown call_tmp[609978] "expr temp" "maybe param" "maybe type" "temp"
    (609981 'move' call_tmp[609978](53431 call(53427 call (partial) these _mt[243] x[53419])))
    unknown call_tmp[609983] "expr temp" "maybe param" "maybe type" "temp"
    (609986 'move' call_tmp[609983](53433 call _getIterator call_tmp[609978]))
    (507310 'move' ret[507305](507309 'deref' call_tmp[609983]))
    (507307 return ret[507305])
  }
  function _getIterator[53443](arg t[53441]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507314] "RVV" "temp"
    unknown call_tmp[609990] "expr temp" "maybe param" "maybe type" "temp"
    (609993 'move' call_tmp[609990](53451 call(53447 call (partial) these _mt[243] t[53441])))
    unknown call_tmp[609995] "expr temp" "maybe param" "maybe type" "temp"
    (609998 'move' call_tmp[609995](53453 call _getIterator call_tmp[609990]))
    (507319 'move' ret[507314](507318 'deref' call_tmp[609995]))
    (507316 return ret[507314])
  }
  function _getIteratorZip[53463](arg x[53461]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507323] "RVV" "temp"
    unknown call_tmp[610000] "expr temp" "maybe param" "maybe type" "temp"
    (610003 'move' call_tmp[610000](53468 call _getIterator x[53461]))
    (507328 'move' ret[507323](507327 'deref' call_tmp[610000]))
    (507325 return ret[507323])
  }
  function _getIteratorZip[53478](arg t[53476]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507332] "RVV" "temp"
    unknown call_tmp[610005] "expr temp" "maybe param" "maybe type" "temp"
    (610008 'move' call_tmp[610005](53483 call _getIterator t[53476]))
    (507337 'move' ret[507332](507336 'deref' call_tmp[610005]))
    (507334 return ret[507332])
  }
  function _getIteratorZip[53495](arg x[53492]:_tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown ret[507357] "RVV" "temp"
    function _getIteratorZipInternal[53503](arg x[53500]:_tuple[56202](?), param arg dim[53506]:int(64)[13]) : _unknown[51] "inline"
    {
      unknown ret[507341] "RVV" "temp"
      unknown tmp[418595] "maybe param" "temp"
      unknown call_tmp[610010] "expr temp" "maybe param" "maybe type" "temp"
      (610013 'move' call_tmp[610010](53513 call x[53500] dim[53506]))
      (418606 'move' tmp[418595](53515 call isTuple call_tmp[610010]))
      unknown call_tmp[610015] "expr temp" "maybe param" "maybe type" "temp"
      (610018 'move' call_tmp[610015](418608 call _cond_invalid tmp[418595]))
      if call_tmp[610015]
      {
        (418611 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554563] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554564] "maybe param" "temp"
      unknown call_tmp[610020] "expr temp" "maybe param" "maybe type" "temp"
      (610023 'move' call_tmp[610020](418596 call isTrue tmp[418595]))
      (554569 'move' tmp[554564](554567 call _cond_test call_tmp[610020]))
      if tmp[554564]
      {
        unknown tmp[554571] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610025] "expr temp" "maybe param" "maybe type" "temp"
        (610028 'move' call_tmp[610025](53520 call x[53500] dim[53506]))
        unknown call_tmp[610030] "expr temp" "maybe param" "maybe type" "temp"
        (610033 'move' call_tmp[610030](53522 call isHomogeneousTuple call_tmp[610025]))
        unknown call_tmp[610035] "expr temp" "maybe param" "maybe type" "temp"
        (610038 'move' call_tmp[610035](53523 call ! call_tmp[610030]))
        (554573 'move' tmp[554571](418599 call isTrue call_tmp[610035]))
        (554578 'move' tmp[554563](554575 '_paramFoldLogical' tmp[554564] tmp[554571]))
      }
      {
        (554583 'move' tmp[554563](554580 '_paramFoldLogical' tmp[554564] 0))
      }
      unknown call_tmp[610040] "expr temp" "maybe param" "maybe type" "temp"
      (610043 'move' call_tmp[610040](53548 call _cond_test tmp[554563]))
      if call_tmp[610040]
      {
        (53546 call compilerError "Heterogeneous tuples don't support zippered iteration yet")
      }
      unknown call_tmp[610047] "expr temp" "maybe param" "maybe type" "temp"
      (610050 'move' call_tmp[610047](53556 call size _mt[243] x[53500]))
      unknown call_tmp[610052] "expr temp" "maybe param" "maybe type" "temp"
      (610055 'move' call_tmp[610052](53560 call - call_tmp[610047] 1))
      unknown call_tmp[610057] "expr temp" "maybe param" "maybe type" "temp"
      (610060 'move' call_tmp[610057](53562 call == dim[53506] call_tmp[610052]))
      unknown call_tmp[610062] "expr temp" "maybe param" "maybe type" "temp"
      (610065 'move' call_tmp[610062](53596 call _cond_test call_tmp[610057]))
      if call_tmp[610062]
      {
        unknown call_tmp[610067] "expr temp" "maybe param" "maybe type" "temp"
        (610070 'move' call_tmp[610067](53568 call x[53500] dim[53506]))
        unknown call_tmp[610072] "expr temp" "maybe param" "maybe type" "temp"
        (610075 'move' call_tmp[610072](53570 call _getIterator call_tmp[610067]))
        unknown call_tmp[610077] "expr temp" "maybe param" "maybe type" "temp"
        (610080 'move' call_tmp[610077](53571 call _build_tuple call_tmp[610072]))
        (507346 'move' ret[507341](507345 'deref' call_tmp[610077]))
        gotoReturn _end__getIteratorZipInternal[507339] _end__getIteratorZipInternal[507339]
      }
      {
        unknown call_tmp[610082] "expr temp" "maybe param" "maybe type" "temp"
        (610085 'move' call_tmp[610082](53579 call x[53500] dim[53506]))
        unknown call_tmp[610087] "expr temp" "maybe param" "maybe type" "temp"
        (610090 'move' call_tmp[610087](53581 call _getIterator call_tmp[610082]))
        unknown call_tmp[610092] "expr temp" "maybe param" "maybe type" "temp"
        (610095 'move' call_tmp[610092](53587 call + dim[53506] 1))
        unknown call_tmp[610097] "expr temp" "maybe param" "maybe type" "temp"
        (610100 'move' call_tmp[610097](53589 call _getIteratorZipInternal x[53500] call_tmp[610092]))
        unknown call_tmp[610102] "expr temp" "maybe param" "maybe type" "temp"
        (610105 'move' call_tmp[610102](53592 call _build_tuple call_tmp[610087](53590 'expand_tuple' call_tmp[610097])))
        (507351 'move' ret[507341](507350 'deref' call_tmp[610102]))
        gotoReturn _end__getIteratorZipInternal[507339] _end__getIteratorZipInternal[507339]
      }
      label _end__getIteratorZipInternal[507339]
      (507343 return ret[507341])
    }
    unknown call_tmp[610109] "expr temp" "maybe param" "maybe type" "temp"
    (610112 'move' call_tmp[610109](53606 call size _mt[243] x[53492]))
    unknown call_tmp[610114] "expr temp" "maybe param" "maybe type" "temp"
    (610117 'move' call_tmp[610114](53610 call == call_tmp[610109] 1))
    unknown call_tmp[610119] "expr temp" "maybe param" "maybe type" "temp"
    (610122 'move' call_tmp[610119](53628 call _cond_test call_tmp[610114]))
    if call_tmp[610119]
    {
      unknown call_tmp[610124] "expr temp" "maybe param" "maybe type" "temp"
      (610127 'move' call_tmp[610124](53616 call x[53492] 0))
      unknown call_tmp[610129] "expr temp" "maybe param" "maybe type" "temp"
      (610132 'move' call_tmp[610129](53618 call _getIterator call_tmp[610124]))
      (507362 'move' ret[507357](507361 'deref' call_tmp[610129]))
      gotoReturn _end__getIteratorZip[507355] _end__getIteratorZip[507355]
    }
    {
      unknown call_tmp[610134] "expr temp" "maybe param" "maybe type" "temp"
      (610137 'move' call_tmp[610134](53625 call _getIteratorZipInternal x[53492] 0))
      (507367 'move' ret[507357](507366 'deref' call_tmp[610134]))
      gotoReturn _end__getIteratorZip[507355] _end__getIteratorZip[507355]
    }
    label _end__getIteratorZip[507355]
    (507359 return ret[507357])
  }
  function _getIteratorZip[53642](arg t[53639]:_tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown ret[507389] "RVV" "temp"
    function _getIteratorZipInternal[53650](arg t[53647]:_tuple[56202](?), param arg dim[53653]:int(64)[13]) : _unknown[51] "inline"
    {
      unknown ret[507373] "RVV" "temp"
      unknown call_tmp[610141] "expr temp" "maybe param" "maybe type" "temp"
      (610144 'move' call_tmp[610141](53658 call size _mt[243] t[53647]))
      unknown call_tmp[610146] "expr temp" "maybe param" "maybe type" "temp"
      (610149 'move' call_tmp[610146](53662 call - call_tmp[610141] 1))
      unknown call_tmp[610151] "expr temp" "maybe param" "maybe type" "temp"
      (610154 'move' call_tmp[610151](53664 call == dim[53653] call_tmp[610146]))
      unknown call_tmp[610156] "expr temp" "maybe param" "maybe type" "temp"
      (610159 'move' call_tmp[610156](53698 call _cond_test call_tmp[610151]))
      if call_tmp[610156]
      {
        unknown call_tmp[610161] "expr temp" "maybe param" "maybe type" "temp"
        (610164 'move' call_tmp[610161](53670 call t[53647] dim[53653]))
        unknown call_tmp[610166] "expr temp" "maybe param" "maybe type" "temp"
        (610169 'move' call_tmp[610166](53672 call _getIterator call_tmp[610161]))
        unknown call_tmp[610171] "expr temp" "maybe param" "maybe type" "temp"
        (610174 'move' call_tmp[610171](53673 call _build_tuple call_tmp[610166]))
        (507378 'move' ret[507373](507377 'deref' call_tmp[610171]))
        gotoReturn _end__getIteratorZipInternal[507371] _end__getIteratorZipInternal[507371]
      }
      {
        unknown call_tmp[610176] "expr temp" "maybe param" "maybe type" "temp"
        (610179 'move' call_tmp[610176](53681 call t[53647] dim[53653]))
        unknown call_tmp[610181] "expr temp" "maybe param" "maybe type" "temp"
        (610184 'move' call_tmp[610181](53683 call _getIterator call_tmp[610176]))
        unknown call_tmp[610186] "expr temp" "maybe param" "maybe type" "temp"
        (610189 'move' call_tmp[610186](53689 call + dim[53653] 1))
        unknown call_tmp[610191] "expr temp" "maybe param" "maybe type" "temp"
        (610194 'move' call_tmp[610191](53691 call _getIteratorZipInternal t[53647] call_tmp[610186]))
        unknown call_tmp[610196] "expr temp" "maybe param" "maybe type" "temp"
        (610199 'move' call_tmp[610196](53694 call _build_tuple call_tmp[610181](53692 'expand_tuple' call_tmp[610191])))
        (507383 'move' ret[507373](507382 'deref' call_tmp[610196]))
        gotoReturn _end__getIteratorZipInternal[507371] _end__getIteratorZipInternal[507371]
      }
      label _end__getIteratorZipInternal[507371]
      (507375 return ret[507373])
    }
    unknown call_tmp[610203] "expr temp" "maybe param" "maybe type" "temp"
    (610206 'move' call_tmp[610203](53709 call size _mt[243] t[53639]))
    unknown call_tmp[610208] "expr temp" "maybe param" "maybe type" "temp"
    (610211 'move' call_tmp[610208](53713 call == call_tmp[610203] 1))
    unknown call_tmp[610213] "expr temp" "maybe param" "maybe type" "temp"
    (610216 'move' call_tmp[610213](53731 call _cond_test call_tmp[610208]))
    if call_tmp[610213]
    {
      unknown call_tmp[610218] "expr temp" "maybe param" "maybe type" "temp"
      (610221 'move' call_tmp[610218](53719 call t[53639] 0))
      unknown call_tmp[610223] "expr temp" "maybe param" "maybe type" "temp"
      (610226 'move' call_tmp[610223](53721 call _getIterator call_tmp[610218]))
      (507394 'move' ret[507389](507393 'deref' call_tmp[610223]))
      gotoReturn _end__getIteratorZip[507387] _end__getIteratorZip[507387]
    }
    {
      unknown call_tmp[610228] "expr temp" "maybe param" "maybe type" "temp"
      (610231 'move' call_tmp[610228](53728 call _getIteratorZipInternal t[53639] 0))
      (507399 'move' ret[507389](507398 'deref' call_tmp[610228]))
      gotoReturn _end__getIteratorZip[507387] _end__getIteratorZip[507387]
    }
    label _end__getIteratorZip[507387]
    (507391 return ret[507389])
  }
  function _freeIterator[53745](arg ic[53742]:_iteratorClass[208](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[610233] "expr temp" "maybe param" "maybe type" "temp"
    (610236 'move' call_tmp[610233](53767 'cast_to_void_star' ic[53742]))
    (53769 call chpl_here_free call_tmp[610233])
    (507403 return _void[55])
  }
  function _freeIterator[53780](arg x[53777]:_tuple[56202](?)) : _unknown[51] "inline" "no return value for void"
  {
    {
      unknown i[53800] "dead at end of block" "insert auto destroy"
      (540901 'init var' i[53800] 0)
      (474762 'end of statement')
      unknown tmp[53801] "maybe param" "temp"
      unknown call_tmp[610240] "expr temp" "maybe param" "maybe type" "temp"
      (610243 'move' call_tmp[610240](53784 call size _mt[243] x[53777]))
      unknown call_tmp[610245] "expr temp" "maybe param" "maybe type" "temp"
      (610248 'move' call_tmp[610245](53788 call - call_tmp[610240] 1))
      (53813 'move' tmp[53801](53811 call chpl_compute_low_param_loop_bound 0 call_tmp[610245]))
      unknown tmp[53802] "maybe param" "temp"
      unknown call_tmp[610252] "expr temp" "maybe param" "maybe type" "temp"
      (610255 'move' call_tmp[610252](53820 call size _mt[243] x[53777]))
      unknown call_tmp[610257] "expr temp" "maybe param" "maybe type" "temp"
      (610260 'move' call_tmp[610257](53818 call - call_tmp[610252] 1))
      (53826 'move' tmp[53802](53824 call chpl_compute_high_param_loop_bound 0 call_tmp[610257]))
      unknown tmp[53803] "maybe param" "temp"
      (53829 'move' tmp[53803] 1)
      ParamForLoop[53831]
      { i[53800] tmp[53801] tmp[53802] tmp[53803]
        unknown call_tmp[610262] "expr temp" "maybe param" "maybe type" "temp"
        (610265 'move' call_tmp[610262](53796 call x[53777] i[53800]))
        (53798 call _freeIterator call_tmp[610262])
        (474763 'end of statement' i[53800])
      }
      label _unused_continueLabel[53805]
      label _breakLabel[53804]
    }
    (507405 return _void[55])
  }
  function _toLeader[53849](arg ir[53846]:_iteratorRecord[205](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507409] "RVV" "temp"
    unknown call_tmp[610267] "expr temp" "maybe param" "maybe type" "temp"
    (610270 'move' call_tmp[610267](53891 'to leader' ir[53846]))
    unknown call_tmp[610272] "expr temp" "maybe param" "maybe type" "temp"
    (610275 'move' call_tmp[610272](53893 call chpl__autoCopy call_tmp[610267]))
    (507414 'move' ret[507409](507413 'deref' call_tmp[610272]))
    (507411 return ret[507409])
  }
  where {
    (53870 'has leader' ir[53846])
  }
  function _toLeader[53904](arg x[53902]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507418] "RVV" "temp"
    unknown call_tmp[610279] "expr temp" "maybe param" "maybe type" "temp"
    (610282 'move' call_tmp[610279](53931 call(53927 call (partial) these _mt[243] x[53902])))
    unknown call_tmp[610284] "expr temp" "maybe param" "maybe type" "temp"
    (610287 'move' call_tmp[610284](53933 call _toLeader call_tmp[610279]))
    (507423 'move' ret[507418](507422 'deref' call_tmp[610284]))
    (507420 return ret[507418])
  }
  where {
    unknown tmp[418616] "maybe param" "temp"
    unknown call_tmp[610289] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (610292 'move' call_tmp[610289](53908 'typeof' x[53902]))
    unknown call_tmp[610294] "expr temp" "maybe param" "maybe type" "temp"
    (610297 'move' call_tmp[610294](354320 'is_subtype' _iteratorRecord[205](?) call_tmp[610289]))
    (418627 'move' tmp[418616](53912 call ! call_tmp[610294]))
    unknown call_tmp[610299] "expr temp" "maybe param" "maybe type" "temp"
    (610302 'move' call_tmp[610299](418629 call _cond_invalid tmp[418616]))
    if call_tmp[610299]
    {
      (418632 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554590] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554591] "maybe param" "temp"
    unknown call_tmp[610304] "expr temp" "maybe param" "maybe type" "temp"
    (610307 'move' call_tmp[610304](418617 call isTrue tmp[418616]))
    (554596 'move' tmp[554591](554594 call _cond_test call_tmp[610304]))
    if tmp[554591]
    {
      unknown tmp[554598] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610311] "expr temp" "maybe param" "maybe type" "temp"
      (610314 'move' call_tmp[610311](53921 call(53917 call (partial) these _mt[243] x[53902])))
      unknown call_tmp[610316] "expr temp" "maybe param" "maybe type" "temp"
      (610319 'move' call_tmp[610316](53922 'has leader' call_tmp[610311]))
      (554600 'move' tmp[554598](418620 call isTrue call_tmp[610316]))
      (554605 'move' tmp[554590](554602 '_paramFoldLogical' tmp[554591] tmp[554598]))
    }
    {
      (554610 'move' tmp[554590](554607 '_paramFoldLogical' tmp[554591] 0))
    }
    (748369 call chpl_statementLevelSymbol tmp[554590])
  }
  function _toLeaderZip[53944](arg x[53942]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507427] "RVV" "temp"
    unknown call_tmp[610321] "expr temp" "maybe param" "maybe type" "temp"
    (610324 'move' call_tmp[610321](53983 call _toLeader x[53942]))
    (507432 'move' ret[507427](507431 'deref' call_tmp[610321]))
    (507429 return ret[507427])
  }
  where {
    unknown tmp[418637] "maybe param" "temp"
    unknown call_tmp[610326] "expr temp" "maybe param" "maybe type" "temp"
    (610329 'move' call_tmp[610326](53949 call isTuple x[53942]))
    (418648 'move' tmp[418637](53950 call ! call_tmp[610326]))
    unknown call_tmp[610331] "expr temp" "maybe param" "maybe type" "temp"
    (610334 'move' call_tmp[610331](418650 call _cond_invalid tmp[418637]))
    if call_tmp[610331]
    {
      (418653 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554617] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554618] "maybe param" "temp"
    unknown call_tmp[610336] "expr temp" "maybe param" "maybe type" "temp"
    (610339 'move' call_tmp[610336](418638 call isTrue tmp[418637]))
    (554623 'move' tmp[554618](554621 call _cond_test call_tmp[610336]))
    if tmp[554618]
    {
      unknown tmp[554625] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610341] "expr temp" "maybe param" "maybe type" "temp"
      (610344 'move' call_tmp[610341](53977 call canResolve module=[255] Reflection[224970] "_toLeader" x[53942]))
      (554627 'move' tmp[554625](418641 call isTrue call_tmp[610341]))
      (554632 'move' tmp[554617](554629 '_paramFoldLogical' tmp[554618] tmp[554625]))
    }
    {
      (554637 'move' tmp[554617](554634 '_paramFoldLogical' tmp[554618] 0))
    }
    (748371 call chpl_statementLevelSymbol tmp[554617])
    (357370 'referenced modules list' Reflection[224970])
  }
  function _toLeaderZip[53996](arg x[53993]:_tuple[56202](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507436] "RVV" "temp"
    unknown call_tmp[610346] "expr temp" "maybe param" "maybe type" "temp"
    (610349 'move' call_tmp[610346](54013 call x[53993] 0))
    unknown call_tmp[610351] "expr temp" "maybe param" "maybe type" "temp"
    (610354 'move' call_tmp[610351](54015 call _toLeader call_tmp[610346]))
    (507441 'move' ret[507436](507440 'deref' call_tmp[610351]))
    (507438 return ret[507436])
  }
  where {
    unknown call_tmp[610356] "expr temp" "maybe param" "maybe type" "temp"
    (610359 'move' call_tmp[610356](54007 call x[53993] 0))
    (54008 call canResolve module=[255] Reflection[224970] "_toLeader" call_tmp[610356])
    (357376 'referenced modules list' Reflection[224970])
  }
  function _toStandalone[54028](arg iterator[54025]:_iteratorClass[208](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507445] "RVV" "temp"
    unknown call_tmp[610361] "expr temp" "maybe param" "maybe type" "temp"
    (610364 'move' call_tmp[610361](54050 'to standalone' iterator[54025]))
    unknown call_tmp[610366] "expr temp" "maybe param" "maybe type" "temp"
    (610369 'move' call_tmp[610366](54052 call chpl__autoCopy call_tmp[610361]))
    (507450 'move' ret[507445](507449 'deref' call_tmp[610366]))
    (507447 return ret[507445])
  }
  function _toStandalone[54064](arg ir[54061]:_iteratorRecord[205](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507454] "RVV" "temp"
    unknown call_tmp[610371] "maybe param" "maybe type" "temp"
    (610374 'move' call_tmp[610371](54069 call _getIterator ir[54061]))
    unknown ic[54070] "dead at end of block" "insert auto destroy" "no copy"
    (540903 'init var' ic[54070] call_tmp[610371])
    (54073 'end of statement')
    unknown call_tmp[610376] "maybe param" "maybe type" "temp"
    (610379 'move' call_tmp[610376](54078 call _toStandalone ic[54070]))
    unknown standalone[54079] "dead at end of block" "insert auto destroy" "no copy"
    (540905 'init var' standalone[54079] call_tmp[610376])
    (54082 'end of statement' ic[54070])
    (54086 call _freeIterator ic[54070])
    (474771 'end of statement' ic[54070])
    (507459 'move' ret[507454](507458 'deref' standalone[54079]))
    gotoReturn _end__toStandalone[507452] _end__toStandalone[507452]
    (474773 'end of statement' standalone[54079])
    label _end__toStandalone[507452]
    (507456 return ret[507454])
  }
  function _toStandalone[54097](arg x[54095]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507465] "RVV" "temp"
    unknown call_tmp[610383] "expr temp" "maybe param" "maybe type" "temp"
    (610386 'move' call_tmp[610383](54105 call(54101 call (partial) these _mt[243] x[54095])))
    unknown call_tmp[610388] "expr temp" "maybe param" "maybe type" "temp"
    (610391 'move' call_tmp[610388](54107 call _toStandalone call_tmp[610383]))
    (507470 'move' ret[507465](507469 'deref' call_tmp[610388]))
    (507467 return ret[507465])
  }
  function _toLeader[54119](arg ir[54116]:_iteratorRecord[205](?), arg args[54122]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507474] "RVV" "temp"
    unknown call_tmp[610393] "expr temp" "maybe param" "maybe type" "temp"
    (610396 'move' call_tmp[610393](54131 'to leader' ir[54116](54130 'expand_tuple' args[54122])))
    unknown call_tmp[610398] "expr temp" "maybe param" "maybe type" "temp"
    (610401 'move' call_tmp[610398](54133 call chpl__autoCopy call_tmp[610393]))
    (507479 'move' ret[507474](507478 'deref' call_tmp[610398]))
    (507476 return ret[507474])
  }
  function _toLeader[54143](arg x[54141]:_any[178](?), arg args[54146]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507483] "RVV" "temp"
    unknown call_tmp[610405] "expr temp" "maybe param" "maybe type" "temp"
    (610408 'move' call_tmp[610405](54155 call(54151 call (partial) these _mt[243] x[54141])))
    unknown call_tmp[610410] "expr temp" "maybe param" "maybe type" "temp"
    (610413 'move' call_tmp[610410](54159 call _toLeader call_tmp[610405](54158 'expand_tuple' args[54146])))
    (507488 'move' ret[507483](507487 'deref' call_tmp[610410]))
    (507485 return ret[507483])
  }
  function _toLeaderZip[54169](arg x[54167]:_any[178](?), arg args[54172]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507492] "RVV" "temp"
    unknown call_tmp[610415] "expr temp" "maybe param" "maybe type" "temp"
    (610418 'move' call_tmp[610415](54180 call _toLeader x[54167](54179 'expand_tuple' args[54172])))
    (507497 'move' ret[507492](507496 'deref' call_tmp[610415]))
    (507494 return ret[507492])
  }
  function _toLeaderZip[54192](arg x[54189]:_tuple[56202](?), arg args[54195]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507501] "RVV" "temp"
    unknown call_tmp[610420] "expr temp" "maybe param" "maybe type" "temp"
    (610423 'move' call_tmp[610420](54202 call x[54189] 0))
    unknown call_tmp[610425] "expr temp" "maybe param" "maybe type" "temp"
    (610428 'move' call_tmp[610425](54206 call _toLeader call_tmp[610420](54205 'expand_tuple' args[54195])))
    (507506 'move' ret[507501](507505 'deref' call_tmp[610425]))
    (507503 return ret[507501])
  }
  function _toStandalone[54218](arg iterator[54215]:_iteratorClass[208](?), arg args[54221]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507510] "RVV" "temp"
    unknown call_tmp[610430] "expr temp" "maybe param" "maybe type" "temp"
    (610433 'move' call_tmp[610430](54230 'to standalone' iterator[54215](54229 'expand_tuple' args[54221])))
    unknown call_tmp[610435] "expr temp" "maybe param" "maybe type" "temp"
    (610438 'move' call_tmp[610435](54232 call chpl__autoCopy call_tmp[610430]))
    (507515 'move' ret[507510](507514 'deref' call_tmp[610435]))
    (507512 return ret[507510])
  }
  function _toStandalone[54244](arg ir[54241]:_iteratorRecord[205](?), arg args[54247]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507519] "RVV" "temp"
    unknown call_tmp[610440] "maybe param" "maybe type" "temp"
    (610443 'move' call_tmp[610440](54253 call _getIterator ir[54241]))
    unknown ic[54254] "dead at end of block" "insert auto destroy" "no copy"
    (540907 'init var' ic[54254] call_tmp[610440])
    (54257 'end of statement')
    unknown call_tmp[610445] "maybe param" "maybe type" "temp"
    (610448 'move' call_tmp[610445](54264 call _toStandalone ic[54254](54263 'expand_tuple' args[54247])))
    unknown standalone[54265] "dead at end of block" "insert auto destroy" "no copy"
    (540909 'init var' standalone[54265] call_tmp[610445])
    (54268 'end of statement' ic[54254])
    (54272 call _freeIterator ic[54254])
    (474782 'end of statement' ic[54254])
    (507524 'move' ret[507519](507523 'deref' standalone[54265]))
    gotoReturn _end__toStandalone[507517] _end__toStandalone[507517]
    (474784 'end of statement' standalone[54265])
    label _end__toStandalone[507517]
    (507521 return ret[507519])
  }
  function _toStandalone[54283](arg x[54281]:_any[178](?), arg args[54286]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507530] "RVV" "temp"
    unknown call_tmp[610452] "expr temp" "maybe param" "maybe type" "temp"
    (610455 'move' call_tmp[610452](54295 call(54291 call (partial) these _mt[243] x[54281])))
    unknown call_tmp[610457] "expr temp" "maybe param" "maybe type" "temp"
    (610460 'move' call_tmp[610457](54299 call _toStandalone call_tmp[610452](54298 'expand_tuple' args[54286])))
    (507535 'move' ret[507530](507534 'deref' call_tmp[610457]))
    (507532 return ret[507530])
  }
  function chpl__canHaveFastFollowers[54309](arg x[54307]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507539] "RVV" "param" "temp"
    (507544 'move' ret[507539](507543 'deref' 0))
    (507541 return ret[507539])
  }
  function chpl__canHaveFastFollowers[54325](arg x[54322]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[507548] "RVV" "param" "temp"
    (507553 'move' ret[507548](507552 'deref' 1))
    (507550 return ret[507548])
  }
  function chpl__canHaveFastFollowersZip[54339](arg x[54336]:_tuple[56202](?)) param : _unknown[51]
  {
    unknown ret[507557] "RVV" "param" "temp"
    unknown call_tmp[610462] "expr temp" "maybe param" "maybe type" "temp"
    (610465 'move' call_tmp[610462](54345 call chpl__canHaveFastFollowersZipHelp x[54336] 0))
    (507562 'move' ret[507557](507561 'deref' call_tmp[610462]))
    (507559 return ret[507557])
  }
  function chpl__canHaveFastFollowersZipHelp[54357](arg x[54354]:_tuple[56202](?), param arg dim[54359]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507566] "RVV" "param" "temp"
    unknown call_tmp[610469] "expr temp" "maybe param" "maybe type" "temp"
    (610472 'move' call_tmp[610469](54362 call size _mt[243] x[54354]))
    unknown call_tmp[610474] "expr temp" "maybe param" "maybe type" "temp"
    (610477 'move' call_tmp[610474](54366 call - call_tmp[610469] 1))
    unknown call_tmp[610479] "expr temp" "maybe param" "maybe type" "temp"
    (610482 'move' call_tmp[610479](54369 call == call_tmp[610474] dim[54359]))
    unknown call_tmp[610484] "expr temp" "maybe param" "maybe type" "temp"
    (610487 'move' call_tmp[610484](54399 call _cond_test call_tmp[610479]))
    if call_tmp[610484]
    {
      unknown call_tmp[610489] "expr temp" "maybe param" "maybe type" "temp"
      (610492 'move' call_tmp[610489](54375 call x[54354] dim[54359]))
      unknown call_tmp[610494] "expr temp" "maybe param" "maybe type" "temp"
      (610497 'move' call_tmp[610494](54377 call chpl__canHaveFastFollowers call_tmp[610489]))
      (507571 'move' ret[507566](507570 'deref' call_tmp[610494]))
      gotoReturn _end_chpl__canHaveFastFollowersZipHelp[507564] _end_chpl__canHaveFastFollowersZipHelp[507564]
    }
    {
      unknown tmp[418658] "maybe param" "temp"
      unknown call_tmp[610499] "expr temp" "maybe param" "maybe type" "temp"
      (610502 'move' call_tmp[610499](54384 call x[54354] dim[54359]))
      (418669 'move' tmp[418658](54386 call chpl__canHaveFastFollowers call_tmp[610499]))
      unknown call_tmp[610504] "expr temp" "maybe param" "maybe type" "temp"
      (610507 'move' call_tmp[610504](418671 call _cond_invalid tmp[418658]))
      if call_tmp[610504]
      {
        (418674 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[554644] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554645] "maybe param" "temp"
      unknown call_tmp[610509] "expr temp" "maybe param" "maybe type" "temp"
      (610512 'move' call_tmp[610509](418659 call isTrue tmp[418658]))
      (554650 'move' tmp[554645](554648 call _cond_test call_tmp[610509]))
      if tmp[554645]
      {
        (554655 'move' tmp[554644](554652 '_paramFoldLogical' tmp[554645] 1))
      }
      {
        unknown tmp[554657] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610514] "expr temp" "maybe param" "maybe type" "temp"
        (610517 'move' call_tmp[610514](54392 call + dim[54359] 1))
        unknown call_tmp[610519] "expr temp" "maybe param" "maybe type" "temp"
        (610522 'move' call_tmp[610519](54394 call chpl__canHaveFastFollowersZipHelp x[54354] call_tmp[610514]))
        (554659 'move' tmp[554657](418663 call isTrue call_tmp[610519]))
        (554664 'move' tmp[554644](554661 '_paramFoldLogical' tmp[554645] tmp[554657]))
      }
      (507576 'move' ret[507566](507575 'deref' tmp[554644]))
      gotoReturn _end_chpl__canHaveFastFollowersZipHelp[507564] _end_chpl__canHaveFastFollowersZipHelp[507564]
    }
    label _end_chpl__canHaveFastFollowersZipHelp[507564]
    (507568 return ret[507566])
  }
  function chpl__canLeadFastFollowers[54412](arg x[54410]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507582] "RVV" "param" "temp"
    unknown tmp[418679] "maybe param" "temp"
    (418690 'move' tmp[418679](54417 call isDomain x[54410]))
    unknown call_tmp[610524] "expr temp" "maybe param" "maybe type" "temp"
    (610527 'move' call_tmp[610524](418692 call _cond_invalid tmp[418679]))
    if call_tmp[610524]
    {
      (418695 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[554671] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554672] "maybe param" "temp"
    unknown call_tmp[610529] "expr temp" "maybe param" "maybe type" "temp"
    (610532 'move' call_tmp[610529](418680 call isTrue tmp[418679]))
    (554677 'move' tmp[554672](554675 call _cond_test call_tmp[610529]))
    if tmp[554672]
    {
      (554682 'move' tmp[554671](554679 '_paramFoldLogical' tmp[554672] 1))
    }
    {
      unknown tmp[554684] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610534] "expr temp" "maybe param" "maybe type" "temp"
      (610537 'move' call_tmp[610534](54421 call isArray x[54410]))
      (554686 'move' tmp[554684](418684 call isTrue call_tmp[610534]))
      (554691 'move' tmp[554671](554688 '_paramFoldLogical' tmp[554672] tmp[554684]))
    }
    (507587 'move' ret[507582](507586 'deref' tmp[554671]))
    (507584 return ret[507582])
  }
  function chpl__hasInertFastFollowers[54433](arg x[54431]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507591] "RVV" "param" "temp"
    (507596 'move' ret[507591](507595 'deref' 1))
    (507593 return ret[507591])
  }
  function chpl__hasInertFastFollowers[54449](arg x[54446]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[507600] "RVV" "param" "temp"
    (507605 'move' ret[507600](507604 'deref' 0))
    (507602 return ret[507600])
  }
  function chpl__hasInertFastFollowersZip[54463](arg x[54460]:_tuple[56202](?)) param : _unknown[51]
  {
    unknown ret[507609] "RVV" "param" "temp"
    unknown call_tmp[610539] "expr temp" "maybe param" "maybe type" "temp"
    (610542 'move' call_tmp[610539](54469 call chpl__hasInertFastFollowersZipHelp x[54460] 0))
    (507614 'move' ret[507609](507613 'deref' call_tmp[610539]))
    (507611 return ret[507609])
  }
  function chpl__hasInertFastFollowersZipHelp[54481](arg x[54478]:_tuple[56202](?), param arg dim[54483]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507618] "RVV" "param" "temp"
    unknown call_tmp[610546] "expr temp" "maybe param" "maybe type" "temp"
    (610549 'move' call_tmp[610546](54486 call size _mt[243] x[54478]))
    unknown call_tmp[610551] "expr temp" "maybe param" "maybe type" "temp"
    (610554 'move' call_tmp[610551](54490 call - call_tmp[610546] 1))
    unknown call_tmp[610556] "expr temp" "maybe param" "maybe type" "temp"
    (610559 'move' call_tmp[610556](54493 call == call_tmp[610551] dim[54483]))
    unknown call_tmp[610561] "expr temp" "maybe param" "maybe type" "temp"
    (610564 'move' call_tmp[610561](54525 call _cond_test call_tmp[610556]))
    if call_tmp[610561]
    {
      unknown call_tmp[610566] "expr temp" "maybe param" "maybe type" "temp"
      (610569 'move' call_tmp[610566](54499 call x[54478] dim[54483]))
      unknown call_tmp[610571] "expr temp" "maybe param" "maybe type" "temp"
      (610574 'move' call_tmp[610571](54501 call chpl__hasInertFastFollowers call_tmp[610566]))
      (507623 'move' ret[507618](507622 'deref' call_tmp[610571]))
      gotoReturn _end_chpl__hasInertFastFollowersZipHelp[507616] _end_chpl__hasInertFastFollowersZipHelp[507616]
    }
    {
      unknown tmp[418700] "maybe param" "temp"
      unknown call_tmp[610576] "expr temp" "maybe param" "maybe type" "temp"
      (610579 'move' call_tmp[610576](54509 call x[54478] dim[54483]))
      (418711 'move' tmp[418700](54511 call chpl__hasInertFastFollowers call_tmp[610576]))
      unknown call_tmp[610581] "expr temp" "maybe param" "maybe type" "temp"
      (610584 'move' call_tmp[610581](418713 call _cond_invalid tmp[418700]))
      if call_tmp[610581]
      {
        (418716 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554698] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554699] "maybe param" "temp"
      unknown call_tmp[610586] "expr temp" "maybe param" "maybe type" "temp"
      (610589 'move' call_tmp[610586](418701 call isTrue tmp[418700]))
      (554704 'move' tmp[554699](554702 call _cond_test call_tmp[610586]))
      if tmp[554699]
      {
        unknown tmp[554706] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610591] "expr temp" "maybe param" "maybe type" "temp"
        (610594 'move' call_tmp[610591](54517 call + dim[54483] 1))
        unknown call_tmp[610596] "expr temp" "maybe param" "maybe type" "temp"
        (610599 'move' call_tmp[610596](54519 call chpl__hasInertFastFollowersZipHelp x[54478] call_tmp[610591]))
        (554708 'move' tmp[554706](418704 call isTrue call_tmp[610596]))
        (554713 'move' tmp[554698](554710 '_paramFoldLogical' tmp[554699] tmp[554706]))
      }
      {
        (554718 'move' tmp[554698](554715 '_paramFoldLogical' tmp[554699] 0))
      }
      (507628 'move' ret[507618](507627 'deref' tmp[554698]))
      gotoReturn _end_chpl__hasInertFastFollowersZipHelp[507616] _end_chpl__hasInertFastFollowersZipHelp[507616]
    }
    label _end_chpl__hasInertFastFollowersZipHelp[507616]
    (507620 return ret[507618])
  }
  function chpl__staticFastFollowCheck[54536](arg x[54534]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507634] "RVV" "param" "temp"
    const lead[54539] "dead at end of block" "const" "insert auto destroy" "no copy"
    (540911 'init var' lead[54539] x[54534])
    (54542 'end of statement')
    unknown call_tmp[610601] "expr temp" "maybe param" "maybe type" "temp"
    (610604 'move' call_tmp[610601](54547 call chpl__canHaveFastFollowers lead[54539]))
    unknown call_tmp[610606] "expr temp" "maybe param" "maybe type" "temp"
    (610609 'move' call_tmp[610606](54559 call _cond_test call_tmp[610601]))
    if call_tmp[610606]
    {
      unknown call_tmp[610611] "expr temp" "maybe param" "maybe type" "temp"
      (610614 'move' call_tmp[610611](54552 call chpl__staticFastFollowCheck x[54534] lead[54539]))
      (507639 'move' ret[507634](507638 'deref' call_tmp[610611]))
      gotoReturn _end_chpl__staticFastFollowCheck[507632] _end_chpl__staticFastFollowCheck[507632]
      (474801 'end of statement' lead[54539])
    }
    {
      (507644 'move' ret[507634](507643 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheck[507632] _end_chpl__staticFastFollowCheck[507632]
    }
    label _end_chpl__staticFastFollowCheck[507632]
    (507636 return ret[507634])
  }
  function chpl__staticFastFollowCheck[54570](arg x[54568]:_any[178](?), arg lead[54572]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507650] "RVV" "param" "temp"
    unknown call_tmp[610616] "expr temp" "maybe param" "maybe type" "temp"
    (610619 'move' call_tmp[610616](54577 call chpl__hasInertFastFollowers x[54568]))
    (507655 'move' ret[507650](507654 'deref' call_tmp[610616]))
    (507652 return ret[507650])
  }
  function chpl__staticFastFollowCheck[54591](arg x[54588]:_array[133594](?), arg lead[54593]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507659] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[491697] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610623] "expr temp" "maybe param" "maybe type" "temp"
      (610626 'move' call_tmp[610623](54607 call _value _mt[243] lead[54593]))
      (491701 'move' call_type_tmp[491697](54610 'typeof' call_tmp[610623]))
    }
    unknown call_tmp[610630] "expr temp" "maybe param" "maybe type" "temp"
    (610633 'move' call_tmp[610630](54598 call _value _mt[243] x[54588]))
    unknown call_tmp[610637] "expr temp" "maybe param" "maybe type" "temp"
    (610640 'move' call_tmp[610637](54612 call(54603 call (partial) dsiStaticFastFollowCheck _mt[243] call_tmp[610630]) call_type_tmp[491697]))
    (507664 'move' ret[507659](507663 'deref' call_tmp[610637]))
    (507661 return ret[507659])
  }
  function chpl__staticFastFollowCheckZip[54624](arg x[54621]:_tuple[56202](?)) param : _unknown[51]
  {
    unknown ret[507668] "RVV" "param" "temp"
    unknown call_tmp[610642] "expr temp" "maybe param" "maybe type" "temp"
    (610645 'move' call_tmp[610642](54629 call chpl__canHaveFastFollowersZip x[54621]))
    unknown call_tmp[610647] "expr temp" "maybe param" "maybe type" "temp"
    (610650 'move' call_tmp[610647](54630 call ! call_tmp[610642]))
    unknown call_tmp[610652] "expr temp" "maybe param" "maybe type" "temp"
    (610655 'move' call_tmp[610652](54665 call _cond_test call_tmp[610647]))
    if call_tmp[610652]
    {
      (507673 'move' ret[507668](507672 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507666] _end_chpl__staticFastFollowCheckZip[507666]
    }
    {
      unknown call_tmp[610657] "maybe param" "maybe type" "temp"
      (610660 'move' call_tmp[610657](54639 call x[54621] 0))
      const lead[54640] "dead at end of block" "const" "insert auto destroy" "no copy"
      (540913 'init var' lead[54640] call_tmp[610657])
      (54643 'end of statement')
      unknown call_tmp[610662] "expr temp" "maybe param" "maybe type" "temp"
      (610665 'move' call_tmp[610662](54648 call chpl__canLeadFastFollowers lead[54640]))
      unknown call_tmp[610667] "expr temp" "maybe param" "maybe type" "temp"
      (610670 'move' call_tmp[610667](54659 call _cond_test call_tmp[610662]))
      if call_tmp[610667]
      {
        unknown call_tmp[610672] "expr temp" "maybe param" "maybe type" "temp"
        (610675 'move' call_tmp[610672](54653 call chpl__staticFastFollowCheckZip x[54621] lead[54640]))
        (507678 'move' ret[507668](507677 'deref' call_tmp[610672]))
        gotoReturn _end_chpl__staticFastFollowCheckZip[507666] _end_chpl__staticFastFollowCheckZip[507666]
        (474807 'end of statement' lead[54640])
      }
      {
        (507683 'move' ret[507668](507682 'deref' 0))
        gotoReturn _end_chpl__staticFastFollowCheckZip[507666] _end_chpl__staticFastFollowCheckZip[507666]
      }
    }
    label _end_chpl__staticFastFollowCheckZip[507666]
    (507670 return ret[507668])
  }
  function chpl__staticFastFollowCheckZip[54678](arg x[54675]:_tuple[56202](?), arg lead[54680]:_any[178](?), param arg dim[54683] :
  0 =
  0) param : _unknown[51]
  {
    unknown ret[507689] "RVV" "param" "temp"
    unknown call_tmp[610679] "expr temp" "maybe param" "maybe type" "temp"
    (610682 'move' call_tmp[610679](54687 call size _mt[243] x[54675]))
    unknown call_tmp[610684] "expr temp" "maybe param" "maybe type" "temp"
    (610687 'move' call_tmp[610684](54691 call - call_tmp[610679] 1))
    unknown call_tmp[610689] "expr temp" "maybe param" "maybe type" "temp"
    (610692 'move' call_tmp[610689](54694 call == call_tmp[610684] dim[54683]))
    unknown call_tmp[610694] "expr temp" "maybe param" "maybe type" "temp"
    (610697 'move' call_tmp[610694](54727 call _cond_test call_tmp[610689]))
    if call_tmp[610694]
    {
      unknown call_tmp[610699] "expr temp" "maybe param" "maybe type" "temp"
      (610702 'move' call_tmp[610699](54700 call x[54675] dim[54683]))
      unknown call_tmp[610704] "expr temp" "maybe param" "maybe type" "temp"
      (610707 'move' call_tmp[610704](54703 call chpl__staticFastFollowCheck call_tmp[610699] lead[54680]))
      (507694 'move' ret[507689](507693 'deref' call_tmp[610704]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507687] _end_chpl__staticFastFollowCheckZip[507687]
    }
    {
      unknown tmp[418721] "maybe param" "temp"
      unknown call_tmp[610709] "expr temp" "maybe param" "maybe type" "temp"
      (610712 'move' call_tmp[610709](54710 call x[54675] dim[54683]))
      (418732 'move' tmp[418721](54713 call chpl__staticFastFollowCheck call_tmp[610709] lead[54680]))
      unknown call_tmp[610714] "expr temp" "maybe param" "maybe type" "temp"
      (610717 'move' call_tmp[610714](418734 call _cond_invalid tmp[418721]))
      if call_tmp[610714]
      {
        (418737 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554725] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554726] "maybe param" "temp"
      unknown call_tmp[610719] "expr temp" "maybe param" "maybe type" "temp"
      (610722 'move' call_tmp[610719](418722 call isTrue tmp[418721]))
      (554731 'move' tmp[554726](554729 call _cond_test call_tmp[610719]))
      if tmp[554726]
      {
        unknown tmp[554733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610724] "expr temp" "maybe param" "maybe type" "temp"
        (610727 'move' call_tmp[610724](54720 call + dim[54683] 1))
        unknown call_tmp[610729] "expr temp" "maybe param" "maybe type" "temp"
        (610732 'move' call_tmp[610729](54722 call chpl__staticFastFollowCheckZip x[54675] lead[54680] call_tmp[610724]))
        (554735 'move' tmp[554733](418725 call isTrue call_tmp[610729]))
        (554740 'move' tmp[554725](554737 '_paramFoldLogical' tmp[554726] tmp[554733]))
      }
      {
        (554745 'move' tmp[554725](554742 '_paramFoldLogical' tmp[554726] 0))
      }
      (507699 'move' ret[507689](507698 'deref' tmp[554725]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507687] _end_chpl__staticFastFollowCheckZip[507687]
    }
    label _end_chpl__staticFastFollowCheckZip[507687]
    (507691 return ret[507689])
  }
  function chpl__dynamicFastFollowCheck[54740](arg x[54738]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507705] "RVV" "temp"
    unknown call_tmp[610734] "expr temp" "maybe param" "maybe type" "temp"
    (610737 'move' call_tmp[610734](54745 call chpl__canHaveFastFollowers x[54738]))
    unknown call_tmp[610739] "expr temp" "maybe param" "maybe type" "temp"
    (610742 'move' call_tmp[610739](54758 call _cond_test call_tmp[610734]))
    if call_tmp[610739]
    {
      unknown call_tmp[610744] "expr temp" "maybe param" "maybe type" "temp"
      (610747 'move' call_tmp[610744](54750 call chpl__dynamicFastFollowCheck x[54738] x[54738]))
      (507710 'move' ret[507705](507709 'deref' call_tmp[610744]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507703] _end_chpl__dynamicFastFollowCheck[507703]
    }
    {
      (507715 'move' ret[507705](507714 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507703] _end_chpl__dynamicFastFollowCheck[507703]
    }
    label _end_chpl__dynamicFastFollowCheck[507703]
    (507707 return ret[507705])
  }
  function chpl__dynamicFastFollowCheck[54769](arg x[54767]:_any[178](?), arg lead[54771]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507721] "RVV" "temp"
    unknown call_tmp[610749] "expr temp" "maybe param" "maybe type" "temp"
    (610752 'move' call_tmp[610749](54776 call chpl__hasInertFastFollowers x[54767]))
    (507726 'move' ret[507721](507725 'deref' call_tmp[610749]))
    (507723 return ret[507721])
  }
  function chpl__dynamicFastFollowCheck[54790](arg x[54787]:_array[133594](?), arg lead[54792]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507730] "RVV" "temp"
    unknown call_tmp[610754] "expr temp" "maybe param" "maybe type" "temp"
    (610757 'move' call_tmp[610754](54798 call chpl__staticFastFollowCheck x[54787] lead[54792]))
    unknown call_tmp[610759] "expr temp" "maybe param" "maybe type" "temp"
    (610762 'move' call_tmp[610759](54816 call _cond_test call_tmp[610754]))
    if call_tmp[610759]
    {
      unknown call_tmp[610766] "expr temp" "maybe param" "maybe type" "temp"
      (610769 'move' call_tmp[610766](54800 call _value _mt[243] x[54787]))
      unknown call_tmp[610773] "expr temp" "maybe param" "maybe type" "temp"
      (610776 'move' call_tmp[610773](54810 call(54805 call (partial) dsiDynamicFastFollowCheck _mt[243] call_tmp[610766]) lead[54792]))
      (507735 'move' ret[507730](507734 'deref' call_tmp[610773]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507728] _end_chpl__dynamicFastFollowCheck[507728]
    }
    {
      (507740 'move' ret[507730](507739 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507728] _end_chpl__dynamicFastFollowCheck[507728]
    }
    label _end_chpl__dynamicFastFollowCheck[507728]
    (507732 return ret[507730])
  }
  function chpl__dynamicFastFollowCheckZip[54831](arg x[54828]:_tuple[56202](?)) : _unknown[51]
  {
    unknown ret[507746] "RVV" "temp"
    unknown call_tmp[610778] "expr temp" "maybe param" "maybe type" "temp"
    (610781 'move' call_tmp[610778](54836 call chpl__canHaveFastFollowersZip x[54828]))
    unknown call_tmp[610783] "expr temp" "maybe param" "maybe type" "temp"
    (610786 'move' call_tmp[610783](54837 call ! call_tmp[610778]))
    unknown call_tmp[610788] "expr temp" "maybe param" "maybe type" "temp"
    (610791 'move' call_tmp[610788](54843 call _cond_test call_tmp[610783]))
    if call_tmp[610788]
    {
      (507751 'move' ret[507746](507750 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507744] _end_chpl__dynamicFastFollowCheckZip[507744]
    }
    unknown call_tmp[610793] "expr temp" "maybe param" "maybe type" "temp"
    (610796 'move' call_tmp[610793](54852 call x[54828] 0))
    unknown call_tmp[610798] "expr temp" "maybe param" "maybe type" "temp"
    (610801 'move' call_tmp[610798](54854 call chpl__canLeadFastFollowers call_tmp[610793]))
    unknown call_tmp[610803] "expr temp" "maybe param" "maybe type" "temp"
    (610806 'move' call_tmp[610803](54870 call _cond_test call_tmp[610798]))
    if call_tmp[610803]
    {
      unknown call_tmp[610808] "expr temp" "maybe param" "maybe type" "temp"
      (610811 'move' call_tmp[610808](54861 call x[54828] 0))
      unknown call_tmp[610813] "expr temp" "maybe param" "maybe type" "temp"
      (610816 'move' call_tmp[610813](54862 call chpl__dynamicFastFollowCheckZip x[54828] call_tmp[610808]))
      (507756 'move' ret[507746](507755 'deref' call_tmp[610813]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507744] _end_chpl__dynamicFastFollowCheckZip[507744]
    }
    {
      (507761 'move' ret[507746](507760 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507744] _end_chpl__dynamicFastFollowCheckZip[507744]
    }
    label _end_chpl__dynamicFastFollowCheckZip[507744]
    (507748 return ret[507746])
  }
  function chpl__dynamicFastFollowCheckZip[54882](arg x[54879]:_tuple[56202](?), arg lead[54884]:_any[178](?), param arg dim[54887] :
  0 =
  0) : _unknown[51]
  {
    unknown ret[507767] "RVV" "temp"
    unknown call_tmp[610820] "expr temp" "maybe param" "maybe type" "temp"
    (610823 'move' call_tmp[610820](54891 call size _mt[243] x[54879]))
    unknown call_tmp[610825] "expr temp" "maybe param" "maybe type" "temp"
    (610828 'move' call_tmp[610825](54895 call - call_tmp[610820] 1))
    unknown call_tmp[610830] "expr temp" "maybe param" "maybe type" "temp"
    (610833 'move' call_tmp[610830](54898 call == call_tmp[610825] dim[54887]))
    unknown call_tmp[610835] "expr temp" "maybe param" "maybe type" "temp"
    (610838 'move' call_tmp[610835](54931 call _cond_test call_tmp[610830]))
    if call_tmp[610835]
    {
      unknown call_tmp[610840] "expr temp" "maybe param" "maybe type" "temp"
      (610843 'move' call_tmp[610840](54904 call x[54879] dim[54887]))
      unknown call_tmp[610845] "expr temp" "maybe param" "maybe type" "temp"
      (610848 'move' call_tmp[610845](54907 call chpl__dynamicFastFollowCheck call_tmp[610840] lead[54884]))
      (507772 'move' ret[507767](507771 'deref' call_tmp[610845]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507765] _end_chpl__dynamicFastFollowCheckZip[507765]
    }
    {
      unknown tmp[418742] "maybe param" "temp"
      unknown call_tmp[610850] "expr temp" "maybe param" "maybe type" "temp"
      (610853 'move' call_tmp[610850](54914 call x[54879] dim[54887]))
      (418753 'move' tmp[418742](54917 call chpl__dynamicFastFollowCheck call_tmp[610850] lead[54884]))
      unknown call_tmp[610855] "expr temp" "maybe param" "maybe type" "temp"
      (610858 'move' call_tmp[610855](418755 call _cond_invalid tmp[418742]))
      if call_tmp[610855]
      {
        (418758 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554752] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554753] "maybe param" "temp"
      unknown call_tmp[610860] "expr temp" "maybe param" "maybe type" "temp"
      (610863 'move' call_tmp[610860](418743 call isTrue tmp[418742]))
      (554758 'move' tmp[554753](554756 call _cond_test call_tmp[610860]))
      if tmp[554753]
      {
        unknown tmp[554760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610865] "expr temp" "maybe param" "maybe type" "temp"
        (610868 'move' call_tmp[610865](54924 call + dim[54887] 1))
        unknown call_tmp[610870] "expr temp" "maybe param" "maybe type" "temp"
        (610873 'move' call_tmp[610870](54926 call chpl__dynamicFastFollowCheckZip x[54879] lead[54884] call_tmp[610865]))
        (554762 'move' tmp[554760](418746 call isTrue call_tmp[610870]))
        (554767 'move' tmp[554752](554764 '_paramFoldLogical' tmp[554753] tmp[554760]))
      }
      {
        (554772 'move' tmp[554752](554769 '_paramFoldLogical' tmp[554753] 0))
      }
      (507777 'move' ret[507767](507776 'deref' tmp[554752]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507765] _end_chpl__dynamicFastFollowCheckZip[507765]
    }
    label _end_chpl__dynamicFastFollowCheckZip[507765]
    (507769 return ret[507767])
  }
  function _toFollower[54946](arg iterator[54943]:_iteratorClass[208](?), arg leaderIndex[54948]:_any[178](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507783] "RVV" "temp"
    unknown call_tmp[610875] "expr temp" "maybe param" "maybe type" "temp"
    (610878 'move' call_tmp[610875](54971 'to follower' iterator[54943] leaderIndex[54948]))
    unknown call_tmp[610880] "expr temp" "maybe param" "maybe type" "temp"
    (610883 'move' call_tmp[610880](54973 call chpl__autoCopy call_tmp[610875]))
    (507788 'move' ret[507783](507787 'deref' call_tmp[610880]))
    (507785 return ret[507783])
  }
  function _toFollower[54985](arg ir[54982]:_iteratorRecord[205](?), arg leaderIndex[54987]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507792] "RVV" "temp"
    unknown call_tmp[610885] "maybe param" "maybe type" "temp"
    (610888 'move' call_tmp[610885](54992 call _getIterator ir[54982]))
    unknown ic[54993] "dead at end of block" "insert auto destroy" "no copy"
    (540915 'init var' ic[54993] call_tmp[610885])
    (54996 'end of statement')
    unknown call_tmp[610890] "maybe param" "maybe type" "temp"
    (610893 'move' call_tmp[610890](55002 call _toFollower ic[54993] leaderIndex[54987]))
    unknown follower[55003] "dead at end of block" "insert auto destroy" "no copy"
    (540917 'init var' follower[55003] call_tmp[610890])
    (55006 'end of statement' ic[54993])
    (55010 call _freeIterator ic[54993])
    (474826 'end of statement' ic[54993])
    (507797 'move' ret[507792](507796 'deref' follower[55003]))
    gotoReturn _end__toFollower[507790] _end__toFollower[507790]
    (474828 'end of statement' follower[55003])
    label _end__toFollower[507790]
    (507794 return ret[507792])
  }
  function _toFollower[55021](arg x[55019]:_any[178](?), arg leaderIndex[55023]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507803] "RVV" "temp"
    unknown call_tmp[610897] "expr temp" "maybe param" "maybe type" "temp"
    (610900 'move' call_tmp[610897](55031 call(55027 call (partial) these _mt[243] x[55019])))
    unknown call_tmp[610902] "expr temp" "maybe param" "maybe type" "temp"
    (610905 'move' call_tmp[610902](55034 call _toFollower call_tmp[610897] leaderIndex[55023]))
    (507808 'move' ret[507803](507807 'deref' call_tmp[610902]))
    (507805 return ret[507803])
  }
  function _toFollowerZip[55044](arg x[55042]:_any[178](?), arg leaderIndex[55046]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507812] "RVV" "temp"
    unknown call_tmp[610907] "expr temp" "maybe param" "maybe type" "temp"
    (610910 'move' call_tmp[610907](55052 call _toFollower x[55042] leaderIndex[55046]))
    (507817 'move' ret[507812](507816 'deref' call_tmp[610907]))
    (507814 return ret[507812])
  }
  function _toFollowerZip[55064](arg x[55061]:_tuple[56202](?), arg leaderIndex[55066]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507821] "RVV" "temp"
    unknown call_tmp[610912] "expr temp" "maybe param" "maybe type" "temp"
    (610915 'move' call_tmp[610912](55073 call _toFollowerZipInternal x[55061] leaderIndex[55066] 0))
    (507826 'move' ret[507821](507825 'deref' call_tmp[610912]))
    (507823 return ret[507821])
  }
  function _toFollowerZipInternal[55085](arg x[55082]:_tuple[56202](?), arg leaderIndex[55087]:_any[178](?), param arg dim[55090]:int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507830] "RVV" "temp"
    unknown call_tmp[610919] "expr temp" "maybe param" "maybe type" "temp"
    (610922 'move' call_tmp[610919](55095 call size _mt[243] x[55082]))
    unknown call_tmp[610924] "expr temp" "maybe param" "maybe type" "temp"
    (610927 'move' call_tmp[610924](55099 call - call_tmp[610919] 1))
    unknown call_tmp[610929] "expr temp" "maybe param" "maybe type" "temp"
    (610932 'move' call_tmp[610929](55101 call == dim[55090] call_tmp[610924]))
    unknown call_tmp[610934] "expr temp" "maybe param" "maybe type" "temp"
    (610937 'move' call_tmp[610934](55138 call _cond_test call_tmp[610929]))
    if call_tmp[610934]
    {
      unknown call_tmp[610939] "expr temp" "maybe param" "maybe type" "temp"
      (610942 'move' call_tmp[610939](55107 call x[55082] dim[55090]))
      unknown call_tmp[610944] "expr temp" "maybe param" "maybe type" "temp"
      (610947 'move' call_tmp[610944](55110 call _toFollower call_tmp[610939] leaderIndex[55087]))
      unknown call_tmp[610949] "expr temp" "maybe param" "maybe type" "temp"
      (610952 'move' call_tmp[610949](55111 call _build_tuple call_tmp[610944]))
      (507835 'move' ret[507830](507834 'deref' call_tmp[610949]))
      gotoReturn _end__toFollowerZipInternal[507828] _end__toFollowerZipInternal[507828]
    }
    {
      unknown call_tmp[610954] "expr temp" "maybe param" "maybe type" "temp"
      (610957 'move' call_tmp[610954](55119 call x[55082] dim[55090]))
      unknown call_tmp[610959] "expr temp" "maybe param" "maybe type" "temp"
      (610962 'move' call_tmp[610959](55122 call _toFollower call_tmp[610954] leaderIndex[55087]))
      unknown call_tmp[610964] "expr temp" "maybe param" "maybe type" "temp"
      (610967 'move' call_tmp[610964](55129 call + dim[55090] 1))
      unknown call_tmp[610969] "expr temp" "maybe param" "maybe type" "temp"
      (610972 'move' call_tmp[610969](55131 call _toFollowerZipInternal x[55082] leaderIndex[55087] call_tmp[610964]))
      unknown call_tmp[610974] "expr temp" "maybe param" "maybe type" "temp"
      (610977 'move' call_tmp[610974](55134 call _build_tuple call_tmp[610959](55132 'expand_tuple' call_tmp[610969])))
      (507840 'move' ret[507830](507839 'deref' call_tmp[610974]))
      gotoReturn _end__toFollowerZipInternal[507828] _end__toFollowerZipInternal[507828]
    }
    label _end__toFollowerZipInternal[507828]
    (507832 return ret[507830])
  }
  function _toFastFollower[55153](arg iterator[55150]:_iteratorClass[208](?), arg leaderIndex[55155]:_any[178](?), arg fast[55158]:bool[10]) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507846] "RVV" "temp"
    unknown call_tmp[610979] "expr temp" "maybe param" "maybe type" "temp"
    (610982 'move' call_tmp[610979](55167 'to follower' iterator[55150] leaderIndex[55155] 1))
    unknown call_tmp[610984] "expr temp" "maybe param" "maybe type" "temp"
    (610987 'move' call_tmp[610984](55169 call chpl__autoCopy call_tmp[610979]))
    (507851 'move' ret[507846](507850 'deref' call_tmp[610984]))
    (507848 return ret[507846])
  }
  function _toFastFollower[55181](arg ir[55178]:_iteratorRecord[205](?), arg leaderIndex[55183]:_any[178](?), arg fast[55186]:bool[10]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507855] "RVV" "temp"
    unknown call_tmp[610989] "maybe param" "maybe type" "temp"
    (610992 'move' call_tmp[610989](55192 call _getIterator ir[55178]))
    unknown ic[55193] "dead at end of block" "insert auto destroy" "no copy"
    (540919 'init var' ic[55193] call_tmp[610989])
    (55196 'end of statement')
    unknown call_tmp[610994] "maybe param" "maybe type" "temp"
    (610997 'move' call_tmp[610994](55204 call _toFastFollower ic[55193] leaderIndex[55183](fast = 1)))
    unknown follower[55205] "dead at end of block" "insert auto destroy" "no copy"
    (540921 'init var' follower[55205] call_tmp[610994])
    (55208 'end of statement' ic[55193])
    (55212 call _freeIterator ic[55193])
    (474837 'end of statement' ic[55193])
    (507860 'move' ret[507855](507859 'deref' follower[55205]))
    gotoReturn _end__toFastFollower[507853] _end__toFastFollower[507853]
    (474839 'end of statement' follower[55205])
    label _end__toFastFollower[507853]
    (507857 return ret[507855])
  }
  function _toFastFollower[55223](arg x[55221]:_any[178](?), arg leaderIndex[55225]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507866] "RVV" "temp"
    unknown call_tmp[610999] "expr temp" "maybe param" "maybe type" "temp"
    (611002 'move' call_tmp[610999](55230 call chpl__canHaveFastFollowers x[55221]))
    unknown call_tmp[611004] "expr temp" "maybe param" "maybe type" "temp"
    (611007 'move' call_tmp[611004](55253 call _cond_test call_tmp[610999]))
    if call_tmp[611004]
    {
      unknown call_tmp[611009] "expr temp" "maybe param" "maybe type" "temp"
      (611012 'move' call_tmp[611009](55235 call _getIterator x[55221]))
      unknown call_tmp[611014] "expr temp" "maybe param" "maybe type" "temp"
      (611017 'move' call_tmp[611014](55240 call _toFastFollower call_tmp[611009] leaderIndex[55225](fast = 1)))
      (507871 'move' ret[507866](507870 'deref' call_tmp[611014]))
      gotoReturn _end__toFastFollower[507864] _end__toFastFollower[507864]
    }
    {
      unknown call_tmp[611019] "expr temp" "maybe param" "maybe type" "temp"
      (611022 'move' call_tmp[611019](55247 call _getIterator x[55221]))
      unknown call_tmp[611024] "expr temp" "maybe param" "maybe type" "temp"
      (611027 'move' call_tmp[611024](55250 call _toFollower call_tmp[611019] leaderIndex[55225]))
      (507876 'move' ret[507866](507875 'deref' call_tmp[611024]))
      gotoReturn _end__toFastFollower[507864] _end__toFastFollower[507864]
    }
    label _end__toFastFollower[507864]
    (507868 return ret[507866])
  }
  function _toFastFollowerZip[55266](arg x[55264]:_any[178](?), arg leaderIndex[55268]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507882] "RVV" "temp"
    unknown call_tmp[611029] "expr temp" "maybe param" "maybe type" "temp"
    (611032 'move' call_tmp[611029](55274 call _toFastFollower x[55264] leaderIndex[55268]))
    (507887 'move' ret[507882](507886 'deref' call_tmp[611029]))
    (507884 return ret[507882])
  }
  function _toFastFollowerZip[55286](arg x[55283]:_tuple[56202](?), arg leaderIndex[55288]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507891] "RVV" "temp"
    unknown call_tmp[611034] "expr temp" "maybe param" "maybe type" "temp"
    (611037 'move' call_tmp[611034](55295 call _toFastFollowerZip x[55283] leaderIndex[55288] 0))
    (507896 'move' ret[507891](507895 'deref' call_tmp[611034]))
    (507893 return ret[507891])
  }
  function _toFastFollowerZip[55307](arg x[55304]:_tuple[56202](?), arg leaderIndex[55309]:_any[178](?), param arg dim[55312]:int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507900] "RVV" "temp"
    unknown call_tmp[611041] "expr temp" "maybe param" "maybe type" "temp"
    (611044 'move' call_tmp[611041](55317 call size _mt[243] x[55304]))
    unknown call_tmp[611046] "expr temp" "maybe param" "maybe type" "temp"
    (611049 'move' call_tmp[611046](55321 call - call_tmp[611041] 2))
    unknown call_tmp[611051] "expr temp" "maybe param" "maybe type" "temp"
    (611054 'move' call_tmp[611051](55323 call == dim[55312] call_tmp[611046]))
    unknown call_tmp[611056] "expr temp" "maybe param" "maybe type" "temp"
    (611059 'move' call_tmp[611056](55372 call _cond_test call_tmp[611051]))
    if call_tmp[611056]
    {
      unknown call_tmp[611061] "expr temp" "maybe param" "maybe type" "temp"
      (611064 'move' call_tmp[611061](55329 call x[55304] dim[55312]))
      unknown call_tmp[611066] "expr temp" "maybe param" "maybe type" "temp"
      (611069 'move' call_tmp[611066](55332 call _toFastFollowerZip call_tmp[611061] leaderIndex[55309]))
      unknown call_tmp[611071] "expr temp" "maybe param" "maybe type" "temp"
      (611074 'move' call_tmp[611071](55337 call + dim[55312] 1))
      unknown call_tmp[611076] "expr temp" "maybe param" "maybe type" "temp"
      (611079 'move' call_tmp[611076](55340 call x[55304] call_tmp[611071]))
      unknown call_tmp[611081] "expr temp" "maybe param" "maybe type" "temp"
      (611084 'move' call_tmp[611081](55343 call _toFastFollowerZip call_tmp[611076] leaderIndex[55309]))
      unknown call_tmp[611086] "expr temp" "maybe param" "maybe type" "temp"
      (611089 'move' call_tmp[611086](55345 call _build_tuple call_tmp[611066] call_tmp[611081]))
      (507905 'move' ret[507900](507904 'deref' call_tmp[611086]))
      gotoReturn _end__toFastFollowerZip[507898] _end__toFastFollowerZip[507898]
    }
    {
      unknown call_tmp[611091] "expr temp" "maybe param" "maybe type" "temp"
      (611094 'move' call_tmp[611091](55353 call x[55304] dim[55312]))
      unknown call_tmp[611096] "expr temp" "maybe param" "maybe type" "temp"
      (611099 'move' call_tmp[611096](55356 call _toFastFollowerZip call_tmp[611091] leaderIndex[55309]))
      unknown call_tmp[611101] "expr temp" "maybe param" "maybe type" "temp"
      (611104 'move' call_tmp[611101](55363 call + dim[55312] 1))
      unknown call_tmp[611106] "expr temp" "maybe param" "maybe type" "temp"
      (611109 'move' call_tmp[611106](55365 call _toFastFollowerZip x[55304] leaderIndex[55309] call_tmp[611101]))
      unknown call_tmp[611111] "expr temp" "maybe param" "maybe type" "temp"
      (611114 'move' call_tmp[611111](55368 call _build_tuple call_tmp[611096](55366 'expand_tuple' call_tmp[611106])))
      (507910 'move' ret[507900](507909 'deref' call_tmp[611111]))
      gotoReturn _end__toFastFollowerZip[507898] _end__toFastFollowerZip[507898]
    }
    label _end__toFastFollowerZip[507898]
    (507902 return ret[507900])
  }
  function singleValIter[55387](arg iterables[55384]:_tuple[56202](?)) param : _unknown[51] "no doc"
  {
    unknown ret[507916] "RVV" "param" "temp"
    unknown tmp[418763] "maybe param" "temp"
    unknown call_tmp[611118] "expr temp" "maybe param" "maybe type" "temp"
    (611121 'move' call_tmp[611118](55390 call size _mt[243] iterables[55384]))
    (418774 'move' tmp[418763](55394 call == call_tmp[611118] 1))
    unknown call_tmp[611123] "expr temp" "maybe param" "maybe type" "temp"
    (611126 'move' call_tmp[611123](418776 call _cond_invalid tmp[418763]))
    if call_tmp[611123]
    {
      (418779 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554779] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554780] "maybe param" "temp"
    unknown call_tmp[611128] "expr temp" "maybe param" "maybe type" "temp"
    (611131 'move' call_tmp[611128](418764 call isTrue tmp[418763]))
    (554785 'move' tmp[554780](554783 call _cond_test call_tmp[611128]))
    if tmp[554780]
    {
      unknown tmp[554787] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611133] "expr temp" "maybe param" "maybe type" "temp"
      (611136 'move' call_tmp[611133](55401 call iterables[55384] 0))
      unknown call_tmp[611138] "expr temp" "maybe param" "maybe type" "temp"
      (611141 'move' call_tmp[611138](55403 call _getIterator call_tmp[611133]))
      unknown call_tmp[611143] "expr temp" "maybe param" "maybe type" "temp"
      (611146 'move' call_tmp[611143](55405 call isRefIter call_tmp[611138]))
      unknown call_tmp[611148] "expr temp" "maybe param" "maybe type" "temp"
      (611151 'move' call_tmp[611148](55406 call ! call_tmp[611143]))
      (554789 'move' tmp[554787](418767 call isTrue call_tmp[611148]))
      (554794 'move' tmp[554779](554791 '_paramFoldLogical' tmp[554780] tmp[554787]))
    }
    {
      (554799 'move' tmp[554779](554796 '_paramFoldLogical' tmp[554780] 0))
    }
    (507921 'move' ret[507916](507920 'deref' tmp[554779]))
    (507918 return ret[507916])
  }
  function singleRefIter[55421](arg iterables[55418]:_tuple[56202](?)) param : _unknown[51] "no doc"
  {
    unknown ret[507925] "RVV" "param" "temp"
    unknown tmp[418784] "maybe param" "temp"
    unknown call_tmp[611155] "expr temp" "maybe param" "maybe type" "temp"
    (611158 'move' call_tmp[611155](55424 call size _mt[243] iterables[55418]))
    (418795 'move' tmp[418784](55428 call == call_tmp[611155] 1))
    unknown call_tmp[611160] "expr temp" "maybe param" "maybe type" "temp"
    (611163 'move' call_tmp[611160](418797 call _cond_invalid tmp[418784]))
    if call_tmp[611160]
    {
      (418800 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554806] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554807] "maybe param" "temp"
    unknown call_tmp[611165] "expr temp" "maybe param" "maybe type" "temp"
    (611168 'move' call_tmp[611165](418785 call isTrue tmp[418784]))
    (554812 'move' tmp[554807](554810 call _cond_test call_tmp[611165]))
    if tmp[554807]
    {
      unknown tmp[554814] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611170] "expr temp" "maybe param" "maybe type" "temp"
      (611173 'move' call_tmp[611170](55435 call iterables[55418] 0))
      unknown call_tmp[611175] "expr temp" "maybe param" "maybe type" "temp"
      (611178 'move' call_tmp[611175](55437 call _getIterator call_tmp[611170]))
      unknown call_tmp[611180] "expr temp" "maybe param" "maybe type" "temp"
      (611183 'move' call_tmp[611180](55439 call isRefIter call_tmp[611175]))
      (554816 'move' tmp[554814](418788 call isTrue call_tmp[611180]))
      (554821 'move' tmp[554806](554818 '_paramFoldLogical' tmp[554807] tmp[554814]))
    }
    {
      (554826 'move' tmp[554806](554823 '_paramFoldLogical' tmp[554807] 0))
    }
    (507930 'move' ret[507925](507929 'deref' tmp[554806]))
    (507927 return ret[507925])
  }
  function vectorizeOnly[55453](arg iterables[55450]:_any[178](?) ...) : _unknown[51] "iterator fn" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507934] "RVV" "temp"
    {
      unknown _indexOfInterest[55467] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55468] "expr temp" "temp"
      unknown call_tmp[611185] "expr temp" "maybe param" "maybe type" "temp"
      (611188 'move' call_tmp[611185](55463 call iterables[55450] 0))
      (55477 'move' _iterator[55468](55475 call _getIterator call_tmp[611185]))
      Defer
      {
        {
          (55494 call _freeIterator _iterator[55468])
        }
      }
      { scopeless type
        (55483 'move' _indexOfInterest[55467](55480 call iteratorIndex _iterator[55468]))
      }
      ForLoop[55469]
      {
        unknown i[55487] "index var" "insert auto destroy"
        (474852 'end of statement')
        (55489 'move' i[55487] _indexOfInterest[55467])
        (474853 'end of statement' i[55487])
        unknown yret[507938] "YVV" "temp"
        (507941 'move' yret[507938](507940 'deref' i[55487]))
        (507943 yield yret[507938])
        (474855 'end of statement' i[55487])
        label _continueLabel[55472]
        _indexOfInterest[55467]
        _iterator[55468]
      }
      label _breakLabel[55473]
    }
    (507936 return ret[507934])
  }
  where {
    (55458 call singleValIter iterables[55450])
  }
  function vectorizeOnly[55511](arg iterables[55508]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507947] "RVV" "temp"
    {
      unknown _indexOfInterest[55525] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55526] "expr temp" "temp"
      unknown call_tmp[611190] "expr temp" "maybe param" "maybe type" "temp"
      (611193 'move' call_tmp[611190](55521 call iterables[55508] 0))
      (55535 'move' _iterator[55526](55533 call _getIterator call_tmp[611190]))
      Defer
      {
        {
          (55552 call _freeIterator _iterator[55526])
        }
      }
      { scopeless type
        (55541 'move' _indexOfInterest[55525](55538 call iteratorIndex _iterator[55526]))
      }
      ForLoop[55527]
      {
        unknown i[55545] "index var" "insert auto destroy"
        (474858 'end of statement')
        (55547 'move' i[55545] _indexOfInterest[55525])
        (474859 'end of statement' i[55545])
        unknown yret[507951] "YVV" "temp"
        (507954 'move' yret[507951](507953 'addr of' i[55545]))
        (507956 yield yret[507951])
        (474861 'end of statement' i[55545])
        label _continueLabel[55530]
        _indexOfInterest[55525]
        _iterator[55526]
      }
      label _breakLabel[55531]
    }
    (507949 return ret[507947])
  }
  where {
    (55516 call singleRefIter iterables[55508])
  }
  function vectorizeOnly[55570](arg iterables[55567]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507960] "RVV" "temp"
    {
      unknown _indexOfInterest[55584] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55585] "expr temp" "temp"
      (55593 'move' _iterator[55585](55580 call _getIteratorZip iterables[55567]))
      Defer
      {
        {
          (55609 call _freeIterator _iterator[55585])
        }
      }
      { scopeless type
        (55598 'move' _indexOfInterest[55584](55595 call iteratorIndex _iterator[55585]))
      }
      ForLoop[55586]
      {
        unknown i[55602] "index var" "insert auto destroy"
        (474864 'end of statement')
        (55604 'move' i[55602] _indexOfInterest[55584])
        (474865 'end of statement' i[55602])
        unknown yret[507964] "YVV" "temp"
        (507967 'move' yret[507964](507966 'deref' i[55602]))
        (507969 yield yret[507964])
        (474867 'end of statement' i[55602])
        label _continueLabel[55589]
        _indexOfInterest[55584]
        _iterator[55585]
      }
      label _breakLabel[55590]
    }
    (507962 return ret[507960])
  }
  where {
    (55574 call > numiterables[55565] 1)
  }
  function vectorizeOnly[55626](param arg tag[55623]:iterKind[453], arg iterables[55629]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507973] "RVV" "temp"
    {
      unknown _indexOfInterest[55655] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55656] "expr temp" "temp"
      unknown call_tmp[611195] "expr temp" "maybe param" "maybe type" "temp"
      (611198 'move' call_tmp[611195](55651 call iterables[55629] 0))
      (55665 'move' _iterator[55656](55663 call _getIterator call_tmp[611195]))
      Defer
      {
        {
          (55682 call _freeIterator _iterator[55656])
        }
      }
      { scopeless type
        (55671 'move' _indexOfInterest[55655](55668 call iteratorIndex _iterator[55656]))
      }
      ForLoop[55657]
      {
        unknown i[55675] "index var" "insert auto destroy"
        (474870 'end of statement')
        (55677 'move' i[55675] _indexOfInterest[55655])
        (474871 'end of statement' i[55675])
        unknown yret[507977] "YVV" "temp"
        (507980 'move' yret[507977](507979 'deref' i[55675]))
        (507982 yield yret[507977])
        (474873 'end of statement' i[55675])
        label _continueLabel[55660]
        _indexOfInterest[55655]
        _iterator[55656]
      }
      label _breakLabel[55661]
    }
    (507975 return ret[507973])
  }
  where {
    unknown tmp[418805] "maybe param" "temp"
    (418816 'move' tmp[418805](55639 call == tag[55623] standalone[451]))
    unknown call_tmp[611200] "expr temp" "maybe param" "maybe type" "temp"
    (611203 'move' call_tmp[611200](418818 call _cond_invalid tmp[418805]))
    if call_tmp[611200]
    {
      (418821 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554833] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554834] "maybe param" "temp"
    unknown call_tmp[611205] "expr temp" "maybe param" "maybe type" "temp"
    (611208 'move' call_tmp[611205](418806 call isTrue tmp[418805]))
    (554839 'move' tmp[554834](554837 call _cond_test call_tmp[611205]))
    if tmp[554834]
    {
      unknown tmp[554841] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611210] "expr temp" "maybe param" "maybe type" "temp"
      (611213 'move' call_tmp[611210](55644 call singleValIter iterables[55629]))
      (554843 'move' tmp[554841](418809 call isTrue call_tmp[611210]))
      (554848 'move' tmp[554833](554845 '_paramFoldLogical' tmp[554834] tmp[554841]))
    }
    {
      (554853 'move' tmp[554833](554850 '_paramFoldLogical' tmp[554834] 0))
    }
    (748373 call chpl_statementLevelSymbol tmp[554833])
  }
  function vectorizeOnly[55699](param arg tag[55696]:iterKind[453], arg iterables[55702]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507986] "RVV" "temp"
    {
      unknown _indexOfInterest[55726] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55727] "expr temp" "temp"
      unknown call_tmp[611215] "expr temp" "maybe param" "maybe type" "temp"
      (611218 'move' call_tmp[611215](55722 call iterables[55702] 0))
      (55736 'move' _iterator[55727](55734 call _getIterator call_tmp[611215]))
      Defer
      {
        {
          (55753 call _freeIterator _iterator[55727])
        }
      }
      { scopeless type
        (55742 'move' _indexOfInterest[55726](55739 call iteratorIndex _iterator[55727]))
      }
      ForLoop[55728]
      {
        unknown i[55746] "index var" "insert auto destroy"
        (474876 'end of statement')
        (55748 'move' i[55746] _indexOfInterest[55726])
        (474877 'end of statement' i[55746])
        unknown yret[507990] "YVV" "temp"
        (507993 'move' yret[507990](507992 'addr of' i[55746]))
        (507995 yield yret[507990])
        (474879 'end of statement' i[55746])
        label _continueLabel[55731]
        _indexOfInterest[55726]
        _iterator[55727]
      }
      label _breakLabel[55732]
    }
    (507988 return ret[507986])
  }
  where {
    unknown tmp[418826] "maybe param" "temp"
    (418837 'move' tmp[418826](55710 call == tag[55696] standalone[451]))
    unknown call_tmp[611220] "expr temp" "maybe param" "maybe type" "temp"
    (611223 'move' call_tmp[611220](418839 call _cond_invalid tmp[418826]))
    if call_tmp[611220]
    {
      (418842 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554860] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554861] "maybe param" "temp"
    unknown call_tmp[611225] "expr temp" "maybe param" "maybe type" "temp"
    (611228 'move' call_tmp[611225](418827 call isTrue tmp[418826]))
    (554866 'move' tmp[554861](554864 call _cond_test call_tmp[611225]))
    if tmp[554861]
    {
      unknown tmp[554868] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611230] "expr temp" "maybe param" "maybe type" "temp"
      (611233 'move' call_tmp[611230](55715 call singleRefIter iterables[55702]))
      (554870 'move' tmp[554868](418830 call isTrue call_tmp[611230]))
      (554875 'move' tmp[554860](554872 '_paramFoldLogical' tmp[554861] tmp[554868]))
    }
    {
      (554880 'move' tmp[554860](554877 '_paramFoldLogical' tmp[554861] 0))
    }
    (748375 call chpl_statementLevelSymbol tmp[554860])
  }
  function vectorizeOnly[55770](param arg tag[55767]:iterKind[453], arg iterables[55774]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507999] "RVV" "temp"
    {
      unknown _indexOfInterest[55798] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55799] "expr temp" "temp"
      (55807 'move' _iterator[55799](55794 call _getIteratorZip iterables[55774]))
      Defer
      {
        {
          (55823 call _freeIterator _iterator[55799])
        }
      }
      { scopeless type
        (55812 'move' _indexOfInterest[55798](55809 call iteratorIndex _iterator[55799]))
      }
      ForLoop[55800]
      {
        unknown i[55816] "index var" "insert auto destroy"
        (474882 'end of statement')
        (55818 'move' i[55816] _indexOfInterest[55798])
        (474883 'end of statement' i[55816])
        unknown yret[508003] "YVV" "temp"
        (508006 'move' yret[508003](508005 'deref' i[55816]))
        (508008 yield yret[508003])
        (474885 'end of statement' i[55816])
        label _continueLabel[55803]
        _indexOfInterest[55798]
        _iterator[55799]
      }
      label _breakLabel[55804]
    }
    (508001 return ret[507999])
  }
  where {
    unknown tmp[418847] "maybe param" "temp"
    (418858 'move' tmp[418847](55782 call == tag[55767] standalone[451]))
    unknown call_tmp[611235] "expr temp" "maybe param" "maybe type" "temp"
    (611238 'move' call_tmp[611235](418860 call _cond_invalid tmp[418847]))
    if call_tmp[611235]
    {
      (418863 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554887] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554888] "maybe param" "temp"
    unknown call_tmp[611240] "expr temp" "maybe param" "maybe type" "temp"
    (611243 'move' call_tmp[611240](418848 call isTrue tmp[418847]))
    (554893 'move' tmp[554888](554891 call _cond_test call_tmp[611240]))
    if tmp[554888]
    {
      unknown tmp[554895] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611245] "expr temp" "maybe param" "maybe type" "temp"
      (611248 'move' call_tmp[611245](55786 call > numiterables[55772] 1))
      (554897 'move' tmp[554895](418851 call isTrue call_tmp[611245]))
      (554902 'move' tmp[554887](554899 '_paramFoldLogical' tmp[554888] tmp[554895]))
    }
    {
      (554907 'move' tmp[554887](554904 '_paramFoldLogical' tmp[554888] 0))
    }
    (748377 call chpl_statementLevelSymbol tmp[554887])
  }
  function vectorizeOnly[55840](param arg tag[55837]:iterKind[453], arg iterables[55843]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[508012] "RVV" "temp"
    unknown yret[508016] "YVV" "temp"
    unknown call_tmp[611250] "expr temp" "maybe param" "maybe type" "temp"
    (611253 'move' call_tmp[611250](55864 call iterables[55843] 0))
    (508019 'move' yret[508016](508018 'deref' call_tmp[611250]))
    (508021 yield yret[508016])
    (508014 return ret[508012])
  }
  where {
    unknown tmp[418868] "maybe param" "temp"
    (418879 'move' tmp[418868](55853 call == tag[55837] leader[447]))
    unknown call_tmp[611255] "expr temp" "maybe param" "maybe type" "temp"
    (611258 'move' call_tmp[611255](418881 call _cond_invalid tmp[418868]))
    if call_tmp[611255]
    {
      (418884 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554914] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554915] "maybe param" "temp"
    unknown call_tmp[611260] "expr temp" "maybe param" "maybe type" "temp"
    (611263 'move' call_tmp[611260](418869 call isTrue tmp[418868]))
    (554920 'move' tmp[554915](554918 call _cond_test call_tmp[611260]))
    if tmp[554915]
    {
      unknown tmp[554922] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611265] "expr temp" "maybe param" "maybe type" "temp"
      (611268 'move' call_tmp[611265](55858 call singleValIter iterables[55843]))
      (554924 'move' tmp[554922](418872 call isTrue call_tmp[611265]))
      (554929 'move' tmp[554914](554926 '_paramFoldLogical' tmp[554915] tmp[554922]))
    }
    {
      (554934 'move' tmp[554914](554931 '_paramFoldLogical' tmp[554915] 0))
    }
    (748379 call chpl_statementLevelSymbol tmp[554914])
  }
  function vectorizeOnly[55877](param arg tag[55874]:iterKind[453], arg iterables[55880]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[508025] "RVV" "temp"
    unknown yret[508029] "YVV" "temp"
    unknown call_tmp[611270] "expr temp" "maybe param" "maybe type" "temp"
    (611273 'move' call_tmp[611270](55899 call iterables[55880] 0))
    (508032 'move' yret[508029](508031 'addr of' call_tmp[611270]))
    (508034 yield yret[508029])
    (508027 return ret[508025])
  }
  where {
    unknown tmp[418889] "maybe param" "temp"
    (418900 'move' tmp[418889](55888 call == tag[55874] leader[447]))
    unknown call_tmp[611275] "expr temp" "maybe param" "maybe type" "temp"
    (611278 'move' call_tmp[611275](418902 call _cond_invalid tmp[418889]))
    if call_tmp[611275]
    {
      (418905 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554941] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554942] "maybe param" "temp"
    unknown call_tmp[611280] "expr temp" "maybe param" "maybe type" "temp"
    (611283 'move' call_tmp[611280](418890 call isTrue tmp[418889]))
    (554947 'move' tmp[554942](554945 call _cond_test call_tmp[611280]))
    if tmp[554942]
    {
      unknown tmp[554949] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611285] "expr temp" "maybe param" "maybe type" "temp"
      (611288 'move' call_tmp[611285](55893 call singleRefIter iterables[55880]))
      (554951 'move' tmp[554949](418893 call isTrue call_tmp[611285]))
      (554956 'move' tmp[554941](554953 '_paramFoldLogical' tmp[554942] tmp[554949]))
    }
    {
      (554961 'move' tmp[554941](554958 '_paramFoldLogical' tmp[554942] 0))
    }
    (748381 call chpl_statementLevelSymbol tmp[554941])
  }
  function vectorizeOnly[55912](param arg tag[55909]:iterKind[453], arg iterables[55916]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[508038] "RVV" "temp"
    unknown yret[508042] "YVV" "temp"
    (508045 'move' yret[508042](508044 'deref' iterables[55916]))
    (508047 yield yret[508042])
    (508040 return ret[508038])
  }
  where {
    unknown tmp[418910] "maybe param" "temp"
    (418921 'move' tmp[418910](55924 call == tag[55909] leader[447]))
    unknown call_tmp[611290] "expr temp" "maybe param" "maybe type" "temp"
    (611293 'move' call_tmp[611290](418923 call _cond_invalid tmp[418910]))
    if call_tmp[611290]
    {
      (418926 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554968] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554969] "maybe param" "temp"
    unknown call_tmp[611295] "expr temp" "maybe param" "maybe type" "temp"
    (611298 'move' call_tmp[611295](418911 call isTrue tmp[418910]))
    (554974 'move' tmp[554969](554972 call _cond_test call_tmp[611295]))
    if tmp[554969]
    {
      unknown tmp[554976] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611300] "expr temp" "maybe param" "maybe type" "temp"
      (611303 'move' call_tmp[611300](55928 call > numiterables[55914] 1))
      (554978 'move' tmp[554976](418914 call isTrue call_tmp[611300]))
      (554983 'move' tmp[554968](554980 '_paramFoldLogical' tmp[554969] tmp[554976]))
    }
    {
      (554988 'move' tmp[554968](554985 '_paramFoldLogical' tmp[554969] 0))
    }
    (748383 call chpl_statementLevelSymbol tmp[554968])
  }
  function vectorizeOnly[55945](param arg tag[55942]:iterKind[453], arg followThis[55947]:_any[178](?), arg iterables[55950]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[508051] "RVV" "temp"
    {
      unknown _indexOfInterest[55976] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55977] "expr temp" "temp"
      unknown call_tmp[611305] "expr temp" "maybe param" "maybe type" "temp"
      (611308 'move' call_tmp[611305](55972 call iterables[55950] 0))
      (55986 'move' _iterator[55977](55984 call _getIterator call_tmp[611305]))
      Defer
      {
        {
          (56003 call _freeIterator _iterator[55977])
        }
      }
      { scopeless type
        (55992 'move' _indexOfInterest[55976](55989 call iteratorIndex _iterator[55977]))
      }
      ForLoop[55978]
      {
        unknown i[55996] "index var" "insert auto destroy"
        (474891 'end of statement')
        (55998 'move' i[55996] _indexOfInterest[55976])
        (474892 'end of statement' i[55996])
        unknown yret[508055] "YVV" "temp"
        (508058 'move' yret[508055](508057 'deref' i[55996]))
        (508060 yield yret[508055])
        (474894 'end of statement' i[55996])
        label _continueLabel[55981]
        _indexOfInterest[55976]
        _iterator[55977]
      }
      label _breakLabel[55982]
    }
    (508053 return ret[508051])
  }
  where {
    unknown tmp[418931] "maybe param" "temp"
    (418942 'move' tmp[418931](55960 call == tag[55942] follower[449]))
    unknown call_tmp[611310] "expr temp" "maybe param" "maybe type" "temp"
    (611313 'move' call_tmp[611310](418944 call _cond_invalid tmp[418931]))
    if call_tmp[611310]
    {
      (418947 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554995] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554996] "maybe param" "temp"
    unknown call_tmp[611315] "expr temp" "maybe param" "maybe type" "temp"
    (611318 'move' call_tmp[611315](418932 call isTrue tmp[418931]))
    (555001 'move' tmp[554996](554999 call _cond_test call_tmp[611315]))
    if tmp[554996]
    {
      unknown tmp[555003] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611320] "expr temp" "maybe param" "maybe type" "temp"
      (611323 'move' call_tmp[611320](55965 call singleValIter iterables[55950]))
      (555005 'move' tmp[555003](418935 call isTrue call_tmp[611320]))
      (555010 'move' tmp[554995](555007 '_paramFoldLogical' tmp[554996] tmp[555003]))
    }
    {
      (555015 'move' tmp[554995](555012 '_paramFoldLogical' tmp[554996] 0))
    }
    (748385 call chpl_statementLevelSymbol tmp[554995])
  }
  function vectorizeOnly[56020](param arg tag[56017]:iterKind[453], arg followThis[56022]:_any[178](?), arg iterables[56025]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[508064] "RVV" "temp"
    {
      unknown _indexOfInterest[56049] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56050] "expr temp" "temp"
      unknown call_tmp[611325] "expr temp" "maybe param" "maybe type" "temp"
      (611328 'move' call_tmp[611325](56045 call iterables[56025] 0))
      (56059 'move' _iterator[56050](56057 call _getIterator call_tmp[611325]))
      Defer
      {
        {
          (56076 call _freeIterator _iterator[56050])
        }
      }
      { scopeless type
        (56065 'move' _indexOfInterest[56049](56062 call iteratorIndex _iterator[56050]))
      }
      ForLoop[56051]
      {
        unknown i[56069] "index var" "insert auto destroy"
        (474897 'end of statement')
        (56071 'move' i[56069] _indexOfInterest[56049])
        (474898 'end of statement' i[56069])
        unknown yret[508068] "YVV" "temp"
        (508071 'move' yret[508068](508070 'addr of' i[56069]))
        (508073 yield yret[508068])
        (474900 'end of statement' i[56069])
        label _continueLabel[56054]
        _indexOfInterest[56049]
        _iterator[56050]
      }
      label _breakLabel[56055]
    }
    (508066 return ret[508064])
  }
  where {
    unknown tmp[418952] "maybe param" "temp"
    (418963 'move' tmp[418952](56033 call == tag[56017] follower[449]))
    unknown call_tmp[611330] "expr temp" "maybe param" "maybe type" "temp"
    (611333 'move' call_tmp[611330](418965 call _cond_invalid tmp[418952]))
    if call_tmp[611330]
    {
      (418968 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555022] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555023] "maybe param" "temp"
    unknown call_tmp[611335] "expr temp" "maybe param" "maybe type" "temp"
    (611338 'move' call_tmp[611335](418953 call isTrue tmp[418952]))
    (555028 'move' tmp[555023](555026 call _cond_test call_tmp[611335]))
    if tmp[555023]
    {
      unknown tmp[555030] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611340] "expr temp" "maybe param" "maybe type" "temp"
      (611343 'move' call_tmp[611340](56038 call singleRefIter iterables[56025]))
      (555032 'move' tmp[555030](418956 call isTrue call_tmp[611340]))
      (555037 'move' tmp[555022](555034 '_paramFoldLogical' tmp[555023] tmp[555030]))
    }
    {
      (555042 'move' tmp[555022](555039 '_paramFoldLogical' tmp[555023] 0))
    }
    (748387 call chpl_statementLevelSymbol tmp[555022])
  }
  function vectorizeOnly[56093](param arg tag[56090]:iterKind[453], arg followThis[56095]:_any[178](?), arg iterables[56099]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[508077] "RVV" "temp"
    {
      unknown _indexOfInterest[56123] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56124] "expr temp" "temp"
      (56132 'move' _iterator[56124](56119 call _getIteratorZip iterables[56099]))
      Defer
      {
        {
          (56148 call _freeIterator _iterator[56124])
        }
      }
      { scopeless type
        (56137 'move' _indexOfInterest[56123](56134 call iteratorIndex _iterator[56124]))
      }
      ForLoop[56125]
      {
        unknown i[56141] "index var" "insert auto destroy"
        (474903 'end of statement')
        (56143 'move' i[56141] _indexOfInterest[56123])
        (474904 'end of statement' i[56141])
        unknown yret[508081] "YVV" "temp"
        (508084 'move' yret[508081](508083 'deref' i[56141]))
        (508086 yield yret[508081])
        (474906 'end of statement' i[56141])
        label _continueLabel[56128]
        _indexOfInterest[56123]
        _iterator[56124]
      }
      label _breakLabel[56129]
    }
    (508079 return ret[508077])
  }
  where {
    unknown tmp[418973] "maybe param" "temp"
    (418984 'move' tmp[418973](56107 call == tag[56090] follower[449]))
    unknown call_tmp[611345] "expr temp" "maybe param" "maybe type" "temp"
    (611348 'move' call_tmp[611345](418986 call _cond_invalid tmp[418973]))
    if call_tmp[611345]
    {
      (418989 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555049] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555050] "maybe param" "temp"
    unknown call_tmp[611350] "expr temp" "maybe param" "maybe type" "temp"
    (611353 'move' call_tmp[611350](418974 call isTrue tmp[418973]))
    (555055 'move' tmp[555050](555053 call _cond_test call_tmp[611350]))
    if tmp[555050]
    {
      unknown tmp[555057] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611355] "expr temp" "maybe param" "maybe type" "temp"
      (611358 'move' call_tmp[611355](56111 call > numiterables[56097] 1))
      (555059 'move' tmp[555057](418977 call isTrue call_tmp[611355]))
      (555064 'move' tmp[555049](555061 '_paramFoldLogical' tmp[555050] tmp[555057]))
    }
    {
      (555069 'move' tmp[555049](555066 '_paramFoldLogical' tmp[555050] 0))
    }
    (748389 call chpl_statementLevelSymbol tmp[555049])
  }
  (355154 'used modules list'(52123 'use' ChapelStandard[20267])(52127 'use' Reflection[224970]))
}