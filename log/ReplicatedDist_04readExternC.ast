AST dump for ReplicatedDist after pass readExternC.
Module use list: 

{
  (353191 'use' ChapelStandard)
  { scopeless
    unknown traceReplicatedDist[348625] "config" "param" 0
    (348628 'end of statement')
  }
  type Replicated[348657] unknown targetLocDom[348641](348639 call chpl__buildDomainRuntimeType defaultDist(348636 'typeof'(348633 call . here c"id"))) const targetLocales[348652] "const"(348650 call chpl__buildArrayRuntimeType(348648 call chpl__ensureDomainExpr targetLocDom) locale[28]) BaseDist
  function _unknown[51].init[348672](arg _mt[348699]:_MT[238], arg this[348696] :
  Replicated, arg targetLocales[348668] :
  (348664 call chpl__buildArrayRuntimeType nil[44] locale[28]) =
  Locales, arg purposeMessage[348692] :
  string[26] =
  "used to create a Replicated") : _unknown[51] "method"
  {
    (348706 call(348702 call . this c"complete"))
    {
      unknown _indexOfInterest[348740] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[348741] "expr temp" "temp"
      (348750 'move' _iterator[348741](348748 call _getIterator targetLocales))
      Defer
      {
        {
          (348766 call _freeIterator _iterator[348741])
        }
      }
      { scopeless type
        (348755 'move' _indexOfInterest[348740](348752 call iteratorIndex _iterator[348741]))
      }
      ForLoop[348742]
      {
        unknown loc[348759] "index var" "insert auto destroy"
        (348761 'move' loc[348759] _indexOfInterest[348740])
        {
          (348723 call(348715 call .(348712 call . this c"targetLocDom") c"add")(348719 call . loc c"id"))
          (348737 call =(348735 call(348727 call . this c"targetLocales")(348731 call . loc c"id")) loc)
        }
        label _continueLabel[348745]
        _indexOfInterest[348740]
        _iterator[348741]
      }
      label _breakLabel[348746]
    }
    if(348796 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (348794 call writeln "Replicated initializer over " targetLocales)
      }
    }
  }
  function _unknown[51].dsiEqualDMaps[348813](arg _mt[348818]:_MT[238], arg this[348815] :
  Replicated, arg that[348810] :
  (348809 call Replicated ?[260])) : _unknown[51] "method"
  {
    (348833 return(348832 call(348824 call .(348821 call . this c"targetLocales") c"equals")(348828 call . that c"targetLocales")))
  }
  function _unknown[51].dsiEqualDMaps[348843](arg _mt[348848]:_MT[238], arg this[348845] :
  Replicated, arg that[348841]:_any[178](?)) param : _unknown[51] "method"
  {
    (348851 return 0)
  }
  function _unknown[51].dsiDestroyDist[348859](arg _mt[348864]:_MT[238], arg this[348861] :
  Replicated) : _unknown[51] "method" "method overrides"
  {
  }
  function _unknown[51].dsiSupportsPrivatization[348872](arg _mt[348877]:_MT[238], arg this[348874] :
  Replicated) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (348880 return 1)
    }
  }
  function _unknown[51].dsiGetPrivatizeData[348888](arg _mt[348893]:_MT[238], arg this[348890] :
  Replicated) : _unknown[51] "method"
  {
    if(348917 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (348915 call writeln "Replicated.dsiGetPrivatizeData")
      }
    }
    (348924 return 0)
  }
  function _unknown[51].dsiPrivatize[348933](arg _mt[348938]:_MT[238], arg this[348935] :
  Replicated, arg privatizeData[348931]:_any[178](?)) : _unknown[51] "method"
  {
    if(348963 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (348961 call writeln "Replicated.dsiPrivatize on " here)
      }
    }
    { scopeless
      const otherTargetLocales[348973] "const"(348970 call . this c"targetLocales")
      (348976 'end of statement')
    }
    { scopeless
      const privDom[348981] "const"(348978 call . otherTargetLocales c"_dom")
      (348984 'end of statement')
    }
    { scopeless
      const privTargetLocales[348993] "const" otherTargetLocales(348990 call chpl__buildArrayRuntimeType(348988 call chpl__ensureDomainExpr privDom) locale[28])
      (348996 'end of statement')
    }
    { scopeless
      const nonNilWrapper[349019] "const"(349015 for  loc  in  otherTargetLocales do
      {
        loc
      } )(349010 call chpl__buildArrayRuntimeType(349008 call chpl__ensureDomainExpr(349004 call #(348998 call chpl_build_low_bounded_range 0)(349001 call . privTargetLocales c"size"))) locale[28])
      (349022 'end of statement')
    }
    (349047 return(349025 'new'(_chpl_manager = unmanaged[220](?))(349046 call Replicated nonNilWrapper "used during privatization")))
  }
  type ReplicatedDom[349192] const dist[349056] "const"(349055 'to unmanaged class from unknown' Replicated) unknown domRep[349067](349065 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable) unknown localDoms[349088](349086 call chpl__buildArrayRuntimeType(349084 call chpl__ensureDomainExpr(349072 call . dist c"targetLocDom"))(349083 'to unmanaged class from unknown'(349082 'to nilable class from type'(349081 call LocReplicatedDom rank idxType stridable)))) function ReplicatedDom[349192].numReplicands[349094](arg _mt[349196]:_MT[238], arg this[349194]:ReplicatedDom[349192]) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (349100 return(349097 call . localDoms c"size"))
    }
  } function ReplicatedDom[349192].chpl_myLocDom[349107](arg _mt[349200]:_MT[238], arg this[349198]:ReplicatedDom[349192]) : _unknown[51] "method" "primary method" "no doc"
  {
    if(349172 call _cond_test boundsChecking)
    {
      { scopeless
        if(349167 call _cond_test(349123 call !(349122 call(349114 call .(349111 call . dist c"targetLocDom") c"contains")(349118 call . here c"id"))))
        {
          { scopeless
            (349165 call halt "locale "(349145 call . here c"id") " has no local replicand")
          }
        }
      }
    }
    (349187 return(349185 call postfix!(349184 call localDoms(349180 call . here c"id"))))
  } BaseRectangularDom
  type LocReplicatedDom[349229](?) unknown rank[349205] "param" int[13] unknown idxType[349209] "type variable" unknown stridable[349213] "param" bool[10] unknown domLocalRep[349224](349222 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  function _unknown[51].redirectee[349235](arg _mt[349240]:_MT[238], arg this[349237] :
  ReplicatedDom) : _unknown[51] "method"
  {
    { scopeless
      (349250 return domRep)
    }
  }
  { scopeless type
    (349247 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  }
  function _unknown[51].dsiMyDist[349259](arg _mt[349264]:_MT[238], arg this[349261] :
  ReplicatedDom) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (349267 return dist)
    }
  }
  function _unknown[51].dsiSupportsPrivatization[349275](arg _mt[349280]:_MT[238], arg this[349277] :
  ReplicatedDom) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (349283 return 1)
    }
  }
  type ReplicatedDomPrvData[349302](?) unknown distpid[349289] unknown domRep[349293] unknown localDoms[349297]
  function _unknown[51].dsiGetPrivatizeData[349308](arg _mt[349313]:_MT[238], arg this[349310] :
  ReplicatedDom) : _unknown[51] "method"
  {
    if(349337 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (349335 call writeln "ReplicatedDom.dsiGetPrivatizeData")
      }
    }
    (349353 return(349343 'new'(349352 call ReplicatedDomPrvData(349346 call . dist c"pid") domRep localDoms)))
  }
  function _unknown[51].dsiPrivatize[349362](arg _mt[349367]:_MT[238], arg this[349364] :
  ReplicatedDom, arg privatizeData[349360]:_any[178](?)) : _unknown[51] "method"
  {
    if(349392 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (349390 call writeln "ReplicatedDom.dsiPrivatize on " here)
      }
    }
    { scopeless
      unknown privdist[349410](349409 call chpl_getPrivatizedCopy(349403 'typeof'(349400 call . this c"dist"))(349406 call . privatizeData c"distpid"))
      (349413 'end of statement')
    }
    (349442 return(349416 'new'(_chpl_manager = unmanaged[220](?))(349441 call ReplicatedDom(rank = rank)(idxType = idxType)(stridable = stridable)(dist = privdist)(domRep =(349430 call . privatizeData c"domRep"))(localDoms =(349437 call . privatizeData c"localDoms")))))
  }
  function _unknown[51].dsiGetReprivatizeData[349449](arg _mt[349454]:_MT[238], arg this[349451] :
  ReplicatedDom) : _unknown[51] "method"
  {
    (349457 return domRep)
  }
  function _unknown[51].dsiReprivatize[349467](arg _mt[349474]:_MT[238], arg this[349471] :
  ReplicatedDom, arg other[349465]:_any[178](?), arg reprivatizeData[349469]:_any[178](?)) : _unknown[51] "method"
  {
    (349513 call assert(349510 call &&(349498 call &&(349486 call ==(349479 call . this c"rank")(349483 call . other c"rank"))(349496 call ==(349489 call . this c"idxType")(349493 call . other c"idxType")))(349508 call ==(349501 call . this c"stridable")(349505 call . other c"stridable"))))
    (349521 call =(349517 call . this c"domRep") reprivatizeData)
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiClone[349530](arg _mt[349535]:_MT[238], arg this[349532] :
  Replicated) : _unknown[51] "method"
  {
    if(349564 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (349562 call writeln "Replicated.dsiClone")
      }
    }
    { scopeless
      unknown nonNilWrapper[349592](349588 for  loc  in  targetLocales do
      {
        loc
      } )(349583 call chpl__buildArrayRuntimeType(349581 call chpl__ensureDomainExpr(349577 call #(349571 call chpl_build_low_bounded_range 0)(349574 call . targetLocales c"size"))) locale[28])
      (349595 'end of statement')
    }
    (349603 return(349598 'new'(_chpl_manager = unmanaged[220](?))(349602 call Replicated nonNilWrapper)))
  }
  { scopeless type
    (349541 call _to_unmanaged(349539 'typeof' this))
  }
  function _unknown[51].dsiNewRectangularDom[349615](arg _mt[349628]:_MT[238], arg this[349625] :
  Replicated, param arg rank[349612] :
  int[13], arg idxType[349617]:_any[178](?), param arg stridable[349620] :
  bool[10], arg inds[349623]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(349662 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (349660 call writeln "Replicated.dsiNewRectangularDom "(349658 call _build_tuple rank(349653 call _cast string[26] idxType) stridable inds))
      }
    }
    { scopeless
      unknown result[349685](349670 'new'(_chpl_manager = unmanaged[220](?))(349684 call ReplicatedDom(rank = rank)(idxType = idxType)(stridable = stridable)(dist =(349682 call _to_unmanaged this))))
      (349688 'end of statement')
    }
    {
      unknown tmpIter[349727] "expr temp" "maybe ref" "no copy" "temp"
      (349730 'move' tmpIter[349727](349700 call _build_tuple targetLocales(349697 call . result c"localDoms")))
      unknown isRngDomArr[349913] "maybe param" "temp"
      (349928 'move' isRngDomArr[349913](349926 call ||(349915 call isBoundedRange tmpIter[349727])(349924 call ||(349918 call isDomain tmpIter[349727])(349921 call isArray tmpIter[349727]))))
      if isRngDomArr[349913]
      {
        const _coforallCount[349757] "const" "end count" "temp"
        (349836 'move' _coforallCount[349757](349833 call _endCountAlloc 0))
        unknown numTasks[349758] "temp"
        (349820 'move' numTasks[349758](349816 call . tmpIter[349727] c"size"))
        (349811 call _upEndCount _coforallCount[349757] 0 numTasks[349758])
        unknown _indexOfInterest[349764] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[349765] "expr temp" "temp"
        (349774 'move' _iterator[349765](349772 call _getIteratorZip tmpIter[349727]))
        Defer
        {
          {
            (349804 call _freeIterator _iterator[349765])
          }
        }
        { scopeless type
          (349779 'move' _indexOfInterest[349764](349776 call iteratorIndex _iterator[349765]))
        }
        ForLoop[349766]
        {
          (349784 call _check_tuple_var_decl _indexOfInterest[349764] 2)
          unknown loc[349790] "coforall index var" "index var" "insert auto destroy"
          (349792 'move' loc[349790](349788 call _indexOfInterest[349764] 0))
          unknown locDom[349797] "coforall index var" "index var" "insert auto destroy"
          (349799 'move' locDom[349797](349795 call _indexOfInterest[349764] 1))
          { scopeless
            { scopeless
              const tmp[349733] "const" "temp"
              (349735 'move' tmp[349733](349737 'deref'(349738 '_wide_get_locale' loc)))
              {
                { scopeless
                  (349746 call = locDom(349748 'new'(_chpl_manager = unmanaged[220](?))(349752 call LocReplicatedDom rank idxType stridable)))
                }
                (349759 call _downEndCount _coforallCount[349757] nil[44])
                (349741 'coforall on block' 0 tmp[349733])
              }
            }
          }
          label _continueLabel[349769]
          _indexOfInterest[349764]
          _iterator[349765]
        }
        label _breakLabel[349770]
        Defer
        {
          {
            (349823 call _endCountFree _coforallCount[349757])
          }
        }
        (349828 call _waitEndCount _coforallCount[349757] 0 numTasks[349758])
      }
      {
        const _coforallCount[349840] "const" "end count" "temp"
        (349910 'move' _coforallCount[349840](349907 call _endCountAlloc 0))
        unknown _indexOfInterest[349847] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[349848] "expr temp" "temp"
        (349857 'move' _iterator[349848](349855 call _getIteratorZip tmpIter[349727]))
        Defer
        {
          {
            (349887 call _freeIterator _iterator[349848])
          }
        }
        { scopeless type
          (349862 'move' _indexOfInterest[349847](349859 call iteratorIndex _iterator[349848]))
        }
        ForLoop[349849]
        {
          (349867 call _check_tuple_var_decl _indexOfInterest[349847] 2)
          unknown loc[349873] "coforall index var" "index var" "insert auto destroy"
          (349875 'move' loc[349873](349871 call _indexOfInterest[349847] 0))
          unknown locDom[349880] "coforall index var" "index var" "insert auto destroy"
          (349882 'move' locDom[349880](349878 call _indexOfInterest[349847] 1))
          (349894 call _upEndCount _coforallCount[349840] 0)
          { scopeless
            { scopeless
              const tmp[349718] "const" "temp"
              (349720 'move' tmp[349718](349716 'deref'(349715 '_wide_get_locale' loc)))
              {
                { scopeless
                  (349712 call = locDom(349705 'new'(_chpl_manager = unmanaged[220](?))(349711 call LocReplicatedDom rank idxType stridable)))
                }
                (349842 call _downEndCount _coforallCount[349840] nil[44])
                (349723 'coforall on block' 0 tmp[349718])
              }
            }
          }
          label _continueLabel[349852]
          _indexOfInterest[349847]
          _iterator[349848]
        }
        label _breakLabel[349853]
        Defer
        {
          {
            (349898 call _endCountFree _coforallCount[349840])
          }
        }
        (349903 call _waitEndCount _coforallCount[349840] 0)
      }
    }
    (349938 call(349933 call . result c"dsiSetIndices") inds)
    (349941 return result)
  }
  function _unknown[51].dsiIndexToLocale[349950](arg _mt[349955]:_MT[238], arg this[349952] :
  Replicated, arg indexx[349948]:_any[178](?)) : _unknown[51] "method"
  {
    (349959 return here)
  }
  { scopeless type
    locale[28]
  }
  function _unknown[51].dsiSetIndices[349970](arg _mt[349975]:_MT[238], arg this[349972] :
  ReplicatedDom, arg x[349968]:_any[178](?)) : _unknown[51] "method"
  {
    if(350019 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (350017 call writeln "ReplicatedDom.dsiSetIndices on "(350013 call _cast string[26](350011 'typeof' x)) ": " x)
      }
    }
    (350032 call dsiSetIndices(350029 call chpl__buildDomainExpr(350027 'expand_tuple' x)))
  }
  where {
    (349988 call &&(349980 call isTuple x)(349987 call isRange(349985 call x 0)))
  }
  function _unknown[51].dsiSetIndices[350044](arg _mt[350049]:_MT[238], arg this[350046] :
  ReplicatedDom, arg domArg[350041] :
  _domain) : _unknown[51] "method"
  {
    if(350075 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (350073 call writeln "ReplicatedDom.dsiSetIndices on domain " domArg)
      }
    }
    (350083 call = domRep domArg)
    {
      unknown tmpIter[350112] "expr temp" "maybe ref" "no copy" "temp"
      (350115 'move' tmpIter[350112] localDoms)
      unknown isRngDomArr[350268] "maybe param" "temp"
      (350283 'move' isRngDomArr[350268](350281 call ||(350270 call isBoundedRange tmpIter[350112])(350279 call ||(350273 call isDomain tmpIter[350112])(350276 call isArray tmpIter[350112]))))
      if isRngDomArr[350268]
      {
        const _coforallCount[350140] "const" "end count" "temp"
        (350205 'move' _coforallCount[350140](350202 call _endCountAlloc 0))
        unknown numTasks[350141] "temp"
        (350189 'move' numTasks[350141](350185 call . tmpIter[350112] c"size"))
        (350180 call _upEndCount _coforallCount[350140] 0 numTasks[350141])
        unknown _indexOfInterest[350147] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[350148] "expr temp" "temp"
        (350157 'move' _iterator[350148](350155 call _getIterator tmpIter[350112]))
        Defer
        {
          {
            (350173 call _freeIterator _iterator[350148])
          }
        }
        { scopeless type
          (350162 'move' _indexOfInterest[350147](350159 call iteratorIndex _iterator[350148]))
        }
        ForLoop[350149]
        {
          unknown locDom[350166] "coforall index var" "index var" "insert auto destroy"
          (350168 'move' locDom[350166] _indexOfInterest[350147])
          { scopeless
            { scopeless
              const tmp[350118] "const" "temp"
              (350120 'move' tmp[350118](350122 'deref'(350123 '_wide_get_locale' locDom)))
              {
                { scopeless
                  (350131 call =(350133 call .(350135 call postfix! locDom) c"domLocalRep") domArg)
                }
                (350142 call _downEndCount _coforallCount[350140] nil[44])
                (350126 'coforall on block' 0 tmp[350118])
              }
            }
          }
          label _continueLabel[350152]
          _indexOfInterest[350147]
          _iterator[350148]
        }
        label _breakLabel[350153]
        Defer
        {
          {
            (350192 call _endCountFree _coforallCount[350140])
          }
        }
        (350197 call _waitEndCount _coforallCount[350140] 0 numTasks[350141])
      }
      {
        const _coforallCount[350209] "const" "end count" "temp"
        (350265 'move' _coforallCount[350209](350262 call _endCountAlloc 0))
        unknown _indexOfInterest[350216] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[350217] "expr temp" "temp"
        (350226 'move' _iterator[350217](350224 call _getIterator tmpIter[350112]))
        Defer
        {
          {
            (350242 call _freeIterator _iterator[350217])
          }
        }
        { scopeless type
          (350231 'move' _indexOfInterest[350216](350228 call iteratorIndex _iterator[350217]))
        }
        ForLoop[350218]
        {
          unknown locDom[350235] "coforall index var" "index var" "insert auto destroy"
          (350237 'move' locDom[350235] _indexOfInterest[350216])
          (350249 call _upEndCount _coforallCount[350209] 0)
          { scopeless
            { scopeless
              const tmp[350104] "const" "temp"
              (350106 'move' tmp[350104](350102 'deref'(350101 '_wide_get_locale' locDom)))
              {
                { scopeless
                  (350098 call =(350094 call .(350090 call postfix! locDom) c"domLocalRep") domArg)
                }
                (350211 call _downEndCount _coforallCount[350209] nil[44])
                (350109 'coforall on block' 0 tmp[350104])
              }
            }
          }
          label _continueLabel[350221]
          _indexOfInterest[350216]
          _iterator[350217]
        }
        label _breakLabel[350222]
        Defer
        {
          {
            (350253 call _endCountFree _coforallCount[350209])
          }
        }
        (350258 call _waitEndCount _coforallCount[350209] 0)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiGetIndices[350293](arg _mt[350298]:_MT[238], arg this[350295] :
  ReplicatedDom) : _unknown[51] "method"
  {
    if(350334 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (350332 call writeln "ReplicatedDom.dsiGetIndices")
      }
    }
    (350348 return(350347 call(350343 call .(350342 call redirectee) c"getIndices")))
  }
  { scopeless type
    (350310 call * rank(350309 call range idxType(350305 call . BoundedRangeType c"bounded") stridable))
  }
  function _unknown[51].these[350356](arg _mt[350361]:_MT[238], arg this[350358] :
  ReplicatedDom) : _unknown[51] "iterator fn" "method"
  {
    { scopeless
      unknown dom[350366](350365 call redirectee)
      (350369 'end of statement')
    }
    {
      unknown _indexOfInterest[350376] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350377] "expr temp" "temp"
      (350386 'move' _iterator[350377](350384 call _getIterator dom))
      Defer
      {
        {
          (350402 call _freeIterator _iterator[350377])
        }
      }
      { scopeless type
        (350391 'move' _indexOfInterest[350376](350388 call iteratorIndex _iterator[350377]))
      }
      ForLoop[350378]
      {
        unknown i[350395] "index var" "insert auto destroy"
        (350397 'move' i[350395] _indexOfInterest[350376])
        { scopeless
          (350374 yield i)
        }
        label _continueLabel[350381]
        _indexOfInterest[350376]
        _iterator[350377]
      }
      label _breakLabel[350382]
    }
  }
  function _unknown[51].these[350418](arg _mt[350423]:_MT[238], arg this[350420] :
  ReplicatedDom, param arg tag[350415] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[350448] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350449] "expr temp" "temp"
      (350458 'move' _iterator[350449](350456 call _getIterator(350444 call(350439 call .(350436 call .(350435 call chpl_myLocDom) c"domLocalRep") c"these") tag)))
      Defer
      {
        {
          (350475 call _freeIterator _iterator[350449])
        }
      }
      { scopeless type
        (350464 'move' _indexOfInterest[350448](350461 call iteratorIndex _iterator[350449]))
      }
      ForLoop[350450]
      {
        unknown follow[350468] "index var" "insert auto destroy"
        (350470 'move' follow[350468] _indexOfInterest[350448])
        { scopeless
          (350446 yield follow)
        }
        label _continueLabel[350453]
        _indexOfInterest[350448]
        _iterator[350449]
      }
      label _breakLabel[350454]
    }
  }
  where {
    (350430 call == tag(350427 call . iterKind c"leader"))
  }
  function _unknown[51].these[350493](arg _mt[350500]:_MT[238], arg this[350497] :
  ReplicatedDom, param arg tag[350490] :
  iterKind, arg followThis[350495]:_any[178](?)) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[350523] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350524] "expr temp" "temp"
      (350533 'move' _iterator[350524](350531 call _getIterator(350519 call(350513 call .(350512 call redirectee) c"these") tag followThis)))
      Defer
      {
        {
          (350550 call _freeIterator _iterator[350524])
        }
      }
      { scopeless type
        (350539 'move' _indexOfInterest[350523](350536 call iteratorIndex _iterator[350524]))
      }
      ForLoop[350525]
      {
        unknown i[350543] "index var" "insert auto destroy"
        (350545 'move' i[350543] _indexOfInterest[350523])
        { scopeless
          (350521 yield i)
        }
        label _continueLabel[350528]
        _indexOfInterest[350523]
        _iterator[350524]
      }
      label _breakLabel[350529]
    }
  }
  where {
    (350507 call == tag(350504 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialWrite[350566](arg _mt[350571]:_MT[238], arg this[350568] :
  ReplicatedDom, arg f[350564]:_any[178](?)) : _unknown[51] "method"
  {
    (350585 call(350580 call .(350577 call .(350576 call redirectee) c"_value") c"dsiSerialWrite") f)
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiDims[350594](arg _mt[350599]:_MT[238], arg this[350596] :
  ReplicatedDom) : _unknown[51] "method"
  {
    { scopeless
      (350621 return(350620 call(350616 call .(350615 call redirectee) c"dims")))
    }
  }
  { scopeless type
    (350611 call * rank(350610 call range idxType(350606 call . BoundedRangeType c"bounded") stridable))
  }
  function _unknown[51].dsiDim[350634](arg _mt[350639]:_MT[238], arg this[350636] :
  ReplicatedDom, arg dim[350631] :
  int[13]) : _unknown[51] "method"
  {
    { scopeless
      (350659 return(350658 call(350653 call .(350652 call redirectee) c"dim") dim))
    }
  }
  { scopeless type
    (350649 call range idxType(350645 call . BoundedRangeType c"bounded") stridable)
  }
  function _unknown[51].dsiLow[350668](arg _mt[350673]:_MT[238], arg this[350670] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350681 return(350678 call .(350677 call redirectee) c"low"))
    }
  }
  function _unknown[51].dsiHigh[350689](arg _mt[350694]:_MT[238], arg this[350691] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350702 return(350699 call .(350698 call redirectee) c"high"))
    }
  }
  function _unknown[51].dsiStride[350710](arg _mt[350715]:_MT[238], arg this[350712] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350723 return(350720 call .(350719 call redirectee) c"stride"))
    }
  }
  function _unknown[51].dsiAlignedLow[350731](arg _mt[350736]:_MT[238], arg this[350733] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350744 return(350741 call .(350740 call redirectee) c"alignedLow"))
    }
  }
  function _unknown[51].dsiAlignedHigh[350752](arg _mt[350757]:_MT[238], arg this[350754] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350765 return(350762 call .(350761 call redirectee) c"alignedHigh"))
    }
  }
  function _unknown[51].dsiAlignment[350773](arg _mt[350778]:_MT[238], arg this[350775] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350786 return(350783 call .(350782 call redirectee) c"alignment"))
    }
  }
  function _unknown[51].dsiNumIndices[350794](arg _mt[350799]:_MT[238], arg this[350796] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350807 return(350804 call .(350803 call redirectee) c"size"))
    }
  }
  function _unknown[51].dsiMember[350817](arg _mt[350822]:_MT[238], arg this[350819] :
  ReplicatedDom, arg indexx[350815]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (350833 return(350832 call(350827 call .(350826 call redirectee) c"contains") indexx))
    }
  }
  function _unknown[51].dsiIndexOrder[350843](arg _mt[350848]:_MT[238], arg this[350845] :
  ReplicatedDom, arg indexx[350841]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (350859 return(350858 call(350853 call .(350852 call redirectee) c"dsiIndexOrder") indexx))
    }
  }
  function _unknown[51].dsiDestroyDom[350867](arg _mt[350872]:_MT[238], arg this[350869] :
  ReplicatedDom) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[350906] "expr temp" "maybe ref" "no copy" "temp"
      (350909 'move' tmpIter[350906](350876 call . dist c"targetLocDom"))
      unknown isRngDomArr[351063] "maybe param" "temp"
      (351078 'move' isRngDomArr[351063](351076 call ||(351065 call isBoundedRange tmpIter[350906])(351074 call ||(351068 call isDomain tmpIter[350906])(351071 call isArray tmpIter[350906]))))
      if isRngDomArr[351063]
      {
        const _coforallCount[350935] "const" "end count" "temp"
        (351000 'move' _coforallCount[350935](350997 call _endCountAlloc 0))
        unknown numTasks[350936] "temp"
        (350984 'move' numTasks[350936](350980 call . tmpIter[350906] c"size"))
        (350975 call _upEndCount _coforallCount[350935] 0 numTasks[350936])
        unknown _indexOfInterest[350942] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[350943] "expr temp" "temp"
        (350952 'move' _iterator[350943](350950 call _getIterator tmpIter[350906]))
        Defer
        {
          {
            (350968 call _freeIterator _iterator[350943])
          }
        }
        { scopeless type
          (350957 'move' _indexOfInterest[350942](350954 call iteratorIndex _iterator[350943]))
        }
        ForLoop[350944]
        {
          unknown localeIdx[350961] "coforall index var" "index var" "insert auto destroy"
          (350963 'move' localeIdx[350961] _indexOfInterest[350942])
          { scopeless
            { scopeless
              const tmp[350912] "const" "temp"
              (350914 'move' tmp[350912](350916 'deref'(350917 '_wide_get_locale'(350922 call(350919 call . dist c"targetLocales") localeIdx))))
              {
                { scopeless
                  (350930 call chpl__delete(350932 call localDoms localeIdx))
                }
                (350937 call _downEndCount _coforallCount[350935] nil[44])
                (350925 'coforall on block' 0 tmp[350912])
              }
            }
          }
          label _continueLabel[350947]
          _indexOfInterest[350942]
          _iterator[350943]
        }
        label _breakLabel[350948]
        Defer
        {
          {
            (350987 call _endCountFree _coforallCount[350935])
          }
        }
        (350992 call _waitEndCount _coforallCount[350935] 0 numTasks[350936])
      }
      {
        const _coforallCount[351004] "const" "end count" "temp"
        (351060 'move' _coforallCount[351004](351057 call _endCountAlloc 0))
        unknown _indexOfInterest[351011] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[351012] "expr temp" "temp"
        (351021 'move' _iterator[351012](351019 call _getIterator tmpIter[350906]))
        Defer
        {
          {
            (351037 call _freeIterator _iterator[351012])
          }
        }
        { scopeless type
          (351026 'move' _indexOfInterest[351011](351023 call iteratorIndex _iterator[351012]))
        }
        ForLoop[351013]
        {
          unknown localeIdx[351030] "coforall index var" "index var" "insert auto destroy"
          (351032 'move' localeIdx[351030] _indexOfInterest[351011])
          (351044 call _upEndCount _coforallCount[351004] 0)
          { scopeless
            { scopeless
              const tmp[350897] "const" "temp"
              (350899 'move' tmp[350897](350895 'deref'(350894 '_wide_get_locale'(350885 call(350880 call . dist c"targetLocales") localeIdx))))
              {
                { scopeless
                  (350891 call chpl__delete(350889 call localDoms localeIdx))
                }
                (351006 call _downEndCount _coforallCount[351004] nil[44])
                (350902 'coforall on block' 0 tmp[350897])
              }
            }
          }
          label _continueLabel[351016]
          _indexOfInterest[351011]
          _iterator[351012]
        }
        label _breakLabel[351017]
        Defer
        {
          {
            (351048 call _endCountFree _coforallCount[351004])
          }
        }
        (351053 call _waitEndCount _coforallCount[351004] 0)
      }
    }
  }
  function _unknown[51].dsiAssignDomain[351092](arg _mt[351101]:_MT[238], arg this[351098] :
  ReplicatedDom, arg rhs[351089] :
  _domain, arg lhsPrivate[351095] :
  bool[10]) : _unknown[51] "method"
  {
    (351114 call(351104 call . this c"dsiSetIndices")(351112 call(351108 call . rhs c"getIndices")))
  }
  type ReplicatedArr[351245](?) const dom[351122] "const" unknown localArrs[351156](351154 call chpl__buildArrayRuntimeType(351152 call chpl__ensureDomainExpr(351130 call .(351127 call . dom c"dist") c"targetLocDom"))(351151 'to unmanaged class from unknown'(351150 'to nilable class from type'(351149 call LocReplicatedArr eltType(351138 call . dom c"rank")(351142 call . dom c"idxType")(351146 call . dom c"stridable"))))) function ReplicatedArr[351245](?).chpl_myLocArr[351162](arg _mt[351249]:_MT[238], arg this[351247]:ReplicatedArr[351245](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(351198 call _cond_test boundsChecking)
    {
      { scopeless
        if(351193 call _cond_test(351181 call !(351180 call(351172 call .(351169 call .(351166 call . dom c"dist") c"targetLocDom") c"contains")(351176 call . here c"id"))))
        {
          { scopeless
            (351191 call halt "locale "(351187 call . here c"id") " has no local replicand")
          }
        }
      }
    }
    (351213 return(351211 call postfix!(351210 call localArrs(351206 call . here c"id"))))
  } function ReplicatedArr[351245](?).replicand[351223](arg _mt[351253]:_MT[238], arg this[351251]:ReplicatedArr[351245](?), arg loc[351220] :
  locale[28]) ref : _unknown[51] "method" "primary method"
  {
    (351239 return(351236 call .(351232 call postfix!(351231 call localArrs(351227 call . loc c"id"))) c"arrLocalRep"))
  } AbsBaseArr
  function _unknown[51].replicand[351263](arg _mt[351268]:_MT[238], arg this[351265] :
  _array, arg loc[351260] :
  locale[28]) ref : _unknown[51] "method" "no doc"
  {
    (351277 return(351276 call(351271 call . _value c"replicand") loc))
  }
  type LocReplicatedArr[351529](?) unknown eltType[351283] "type variable" unknown rank[351287] "param" int[13] unknown idxType[351291] "type variable" unknown stridable[351295] "param" bool[10] unknown myDom[351306](351305 'to unmanaged class from unknown'(351304 call LocReplicatedDom rank idxType stridable)) unknown arrLocalRep[351320] "local field" "no auto destroy" "unsafe"(351318 call chpl__buildArrayRuntimeType(351316 call chpl__ensureDomainExpr(351311 call . myDom c"domLocalRep")) eltType) function LocReplicatedArr[351529](?).init[351328](arg _mt[351533]:_MT[238], arg this[351531]:LocReplicatedArr[351529](?), arg eltType[351326]:_any[178](?), param arg rank[351331] :
  int[13], arg idxType[351334]:_any[178](?), param arg stridable[351337] :
  bool[10], arg myDom[351347] :
  (351346 'to unmanaged class from unknown'(351345 call LocReplicatedDom rank idxType stridable)), param arg initElts[351351] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (351359 call =(351355 call . this c"eltType") eltType)
    (351368 call =(351364 call . this c"rank") rank)
    (351376 call =(351372 call . this c"idxType") idxType)
    (351384 call =(351380 call . this c"stridable") stridable)
    (351394 call =(351390 call . this c"myDom") myDom)
    (351416 call =(351398 call . this c"arrLocalRep")(351415 call(351408 call .(351405 call .(351402 call . this c"myDom") c"domLocalRep") c"buildArray") eltType(initElts = 1)))
    if(351478 call _cond_test(351429 call &&(351421 call == initElts 0)(351427 call !(351426 call isPODType eltType))))
    {
      (351475 call compilerError(351472 call +(351453 call + "ReplicatedDist array initialization is not currently supported for element type "(351451 call _cast string[26] eltType)) " - please default-initialize the array"))
    }
  } function LocReplicatedArr[351529](?).deinit[351486](arg _mt[351537]:_MT[238], arg this[351535]:LocReplicatedArr[351529](?)) : _unknown[51] "destructor" "method" "primary method"
  {
    (351493 call _do_destroy_array arrLocalRep(deinitElts = 1))
  } function LocReplicatedArr[351529](?).writeThis[351502](arg _mt[351541]:_MT[238], arg this[351539]:LocReplicatedArr[351529](?), arg f[351500]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides"
  {
    (351523 call halt "LocReplicatedArr.writeThis() is not implemented / should not be needed")
  }
  function _unknown[51].init[351549](arg _mt[351556]:_MT[238], arg this[351553] :
  ReplicatedArr, arg eltType[351547]:_any[178](?), arg dom[351551]:_any[178](?)) : _unknown[51] "method"
  {
    (351565 call(351559 call . super c"init")(eltType = eltType))
    (351573 call =(351569 call . this c"dom") dom)
  }
  function _unknown[51].stridable[351581](arg _mt[351586]:_MT[238], arg this[351583] :
  ReplicatedArr) param : _unknown[51] "method" "no parens"
  {
    (351592 return(351589 call . dom c"stridable"))
  }
  function _unknown[51].idxType[351600](arg _mt[351605]:_MT[238], arg this[351602] :
  ReplicatedArr) type : _unknown[51] "method" "no parens"
  {
    (351611 return(351608 call . dom c"idxType"))
  }
  function _unknown[51].rank[351619](arg _mt[351624]:_MT[238], arg this[351621] :
  ReplicatedArr) param : _unknown[51] "method" "no parens"
  {
    (351630 return(351627 call . dom c"rank"))
  }
  function _unknown[51].dsiGetBaseDom[351638](arg _mt[351643]:_MT[238], arg this[351640] :
  ReplicatedArr) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (351646 return dom)
    }
  }
  function _unknown[51].dsiSupportsPrivatization[351654](arg _mt[351659]:_MT[238], arg this[351656] :
  ReplicatedArr) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (351662 return 1)
    }
  }
  type ReplicatedArrPrvData[351677](?) unknown dompid[351668] unknown localArrs[351672]
  function _unknown[51].dsiGetPrivatizeData[351683](arg _mt[351688]:_MT[238], arg this[351685] :
  ReplicatedArr) : _unknown[51] "method"
  {
    if(351712 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (351710 call writeln "ReplicatedArr.dsiGetPrivatizeData")
      }
    }
    (351727 return(351718 'new'(351726 call ReplicatedArrPrvData(351721 call . dom c"pid") localArrs)))
  }
  function _unknown[51].dsiPrivatize[351736](arg _mt[351741]:_MT[238], arg this[351738] :
  ReplicatedArr, arg privatizeData[351734]:_any[178](?)) : _unknown[51] "method"
  {
    if(351766 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (351764 call writeln "ReplicatedArr.dsiPrivatize on " here)
      }
    }
    { scopeless
      unknown privdom[351784](351783 call chpl_getPrivatizedCopy(351777 'typeof'(351774 call . this c"dom"))(351780 call . privatizeData c"dompid"))
      (351787 'end of statement')
    }
    { scopeless
      unknown result[351796](351790 'new'(_chpl_manager = unmanaged[220](?))(351795 call ReplicatedArr eltType privdom))
      (351799 'end of statement')
    }
    (351810 call =(351803 call . result c"localArrs")(351807 call . privatizeData c"localArrs"))
    (351814 return result)
  }
  function _unknown[51].dsiBuildArray[351823](arg _mt[351832]:_MT[238], arg this[351829] :
  ReplicatedDom, arg eltType[351821]:_any[178](?), param arg initElts[351826] :
  bool[10]) : _unknown[51] "method"
  {
    if(351866 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (351864 call writeln "ReplicatedDom.dsiBuildArray")
      }
    }
    { scopeless
      unknown result[351883](351874 'new'(_chpl_manager = unmanaged[220](?))(351882 call ReplicatedArr eltType(351881 call _to_unmanaged this)))
      (351886 'end of statement')
    }
    {
      unknown tmpIter[351936] "expr temp" "maybe ref" "no copy" "temp"
      (351939 'move' tmpIter[351936](351903 call _build_tuple(351894 call . dist c"targetLocales") localDoms(351900 call . result c"localArrs")))
      unknown isRngDomArr[352142] "maybe param" "temp"
      (352157 'move' isRngDomArr[352142](352155 call ||(352144 call isBoundedRange tmpIter[351936])(352153 call ||(352147 call isDomain tmpIter[351936])(352150 call isArray tmpIter[351936]))))
      if isRngDomArr[352142]
      {
        const _coforallCount[351972] "const" "end count" "temp"
        (352058 'move' _coforallCount[351972](352055 call _endCountAlloc 0))
        unknown numTasks[351973] "temp"
        (352042 'move' numTasks[351973](352038 call . tmpIter[351936] c"size"))
        (352033 call _upEndCount _coforallCount[351972] 0 numTasks[351973])
        unknown _indexOfInterest[351979] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[351980] "expr temp" "temp"
        (351989 'move' _iterator[351980](351987 call _getIteratorZip tmpIter[351936]))
        Defer
        {
          {
            (352026 call _freeIterator _iterator[351980])
          }
        }
        { scopeless type
          (351994 'move' _indexOfInterest[351979](351991 call iteratorIndex _iterator[351980]))
        }
        ForLoop[351981]
        {
          (351999 call _check_tuple_var_decl _indexOfInterest[351979] 3)
          unknown loc[352005] "coforall index var" "index var" "insert auto destroy"
          (352007 'move' loc[352005](352003 call _indexOfInterest[351979] 0))
          unknown locDom[352012] "coforall index var" "index var" "insert auto destroy"
          (352014 'move' locDom[352012](352010 call _indexOfInterest[351979] 1))
          unknown locArr[352019] "coforall index var" "index var" "insert auto destroy"
          (352021 'move' locArr[352019](352017 call _indexOfInterest[351979] 2))
          { scopeless
            { scopeless
              const tmp[351942] "const" "temp"
              (351944 'move' tmp[351942](351946 'deref'(351947 '_wide_get_locale' loc)))
              {
                { scopeless
                  (351955 call = locArr(351957 'new'(_chpl_manager = unmanaged[220](?))(351961 call LocReplicatedArr eltType rank idxType stridable(351967 call postfix! locDom)(initElts = initElts))))
                }
                (351974 call _downEndCount _coforallCount[351972] nil[44])
                (351950 'coforall on block' 0 tmp[351942])
              }
            }
          }
          label _continueLabel[351984]
          _indexOfInterest[351979]
          _iterator[351980]
        }
        label _breakLabel[351985]
        Defer
        {
          {
            (352045 call _endCountFree _coforallCount[351972])
          }
        }
        (352050 call _waitEndCount _coforallCount[351972] 0 numTasks[351973])
      }
      {
        const _coforallCount[352062] "const" "end count" "temp"
        (352139 'move' _coforallCount[352062](352136 call _endCountAlloc 0))
        unknown _indexOfInterest[352069] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[352070] "expr temp" "temp"
        (352079 'move' _iterator[352070](352077 call _getIteratorZip tmpIter[351936]))
        Defer
        {
          {
            (352116 call _freeIterator _iterator[352070])
          }
        }
        { scopeless type
          (352084 'move' _indexOfInterest[352069](352081 call iteratorIndex _iterator[352070]))
        }
        ForLoop[352071]
        {
          (352089 call _check_tuple_var_decl _indexOfInterest[352069] 3)
          unknown loc[352095] "coforall index var" "index var" "insert auto destroy"
          (352097 'move' loc[352095](352093 call _indexOfInterest[352069] 0))
          unknown locDom[352102] "coforall index var" "index var" "insert auto destroy"
          (352104 'move' locDom[352102](352100 call _indexOfInterest[352069] 1))
          unknown locArr[352109] "coforall index var" "index var" "insert auto destroy"
          (352111 'move' locArr[352109](352107 call _indexOfInterest[352069] 2))
          (352123 call _upEndCount _coforallCount[352062] 0)
          { scopeless
            { scopeless
              const tmp[351927] "const" "temp"
              (351929 'move' tmp[351927](351925 'deref'(351924 '_wide_get_locale' loc)))
              {
                { scopeless
                  (351921 call = locArr(351908 'new'(_chpl_manager = unmanaged[220](?))(351920 call LocReplicatedArr eltType rank idxType stridable(351916 call postfix! locDom)(initElts = initElts))))
                }
                (352064 call _downEndCount _coforallCount[352062] nil[44])
                (351932 'coforall on block' 0 tmp[351927])
              }
            }
          }
          label _continueLabel[352074]
          _indexOfInterest[352069]
          _iterator[352070]
        }
        label _breakLabel[352075]
        Defer
        {
          {
            (352127 call _endCountFree _coforallCount[352062])
          }
        }
        (352132 call _waitEndCount _coforallCount[352062] 0)
      }
    }
    (352162 return result)
  }
  { scopeless type
    (351843 'to unmanaged class from unknown'(351842 call ReplicatedArr eltType(351841 call _to_unmanaged(351839 'typeof' this))))
  }
  function _unknown[51].dsiAccess[352172](arg _mt[352177]:_MT[238], arg this[352174] :
  ReplicatedArr, arg indexx[352170]:_any[178](?)) ref : _unknown[51] "method"
  {
    (352188 return(352187 call(352182 call .(352181 call chpl_myLocArr) c"arrLocalRep") indexx))
  }
  function _unknown[51].dsiBoundsCheck[352198](arg _mt[352203]:_MT[238], arg this[352200] :
  ReplicatedArr, arg indexx[352196]:_any[178](?)) : _unknown[51] "method"
  {
    (352221 return(352220 call(352212 call .(352209 call .(352206 call . dom c"dist") c"targetLocDom") c"contains")(352216 call . here c"id")))
  }
  function _unknown[51].dsiSerialWrite[352231](arg _mt[352236]:_MT[238], arg this[352233] :
  ReplicatedArr, arg f[352229]:_any[178](?)) : _unknown[51] "method"
  {
    (352264 call(352259 call .(352256 call .(352253 call .(352251 call postfix!(352250 call localArrs(352246 call .(352245 call(352241 call . f c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialWrite") f)
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiSerialRead[352275](arg _mt[352282]:_MT[238], arg this[352279] :
  ReplicatedArr, arg f[352273]:_any[178](?), arg loc[352277]:_any[178](?)) : _unknown[51] "method"
  {
    (352310 call(352305 call .(352302 call .(352299 call .(352297 call postfix!(352296 call localArrs(352292 call .(352291 call(352287 call . f c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialRead") f)
  }
  { scopeless type
    void[4]
  }
  function isReplicatedArr[352320](arg arr[352318]:_any[178](?)) param : _unknown[51]
  {
    (352334 return(352333 call isSubtype(352330 'typeof'(352329 call _to_borrowed(352327 call chpl__getActualArray arr))) ReplicatedArr))
  }
  function chpl_serialReadWriteRectangular[352343](arg f[352341]:_any[178](?), arg arr[352345]:_any[178](?), arg dom[352347]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      const origloc[352359] "const"(352358 call(352354 call . f c"readWriteThisFromLocale"))
      (352362 'end of statement')
    }
    { scopeless
      const tmp[352375] "const" "temp"
      (352377 'move' tmp[352375](352373 'deref'(352372 '_wide_get_locale' origloc)))
      {
        { scopeless
          (352370 call chpl_serialReadWriteRectangularHelper f arr dom)
        }
        (352380 'on block' 0 tmp[352375])
      }
    }
  }
  where {
    (352352 call isReplicatedArr arr)
  }
  function _unknown[51].dsiElementInitializationComplete[352389](arg _mt[352394]:_MT[238], arg this[352391] :
  ReplicatedArr) : _unknown[51] "method" "method overrides"
  {
  }
  function _unknown[51].dsiElementDeinitializationComplete[352402](arg _mt[352407]:_MT[238], arg this[352404] :
  ReplicatedArr) : _unknown[51] "method" "method overrides"
  {
  }
  function _unknown[51].dsiDestroyArr[352419](arg _mt[352424]:_MT[238], arg this[352421] :
  ReplicatedArr, arg deinitElts[352416] :
  bool[10]) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[352461] "expr temp" "maybe ref" "no copy" "temp"
      (352464 'move' tmpIter[352461](352440 call _build_tuple(352435 call .(352432 call . dom c"dist") c"targetLocales") localArrs))
      unknown isRngDomArr[352639] "maybe param" "temp"
      (352654 'move' isRngDomArr[352639](352652 call ||(352641 call isBoundedRange tmpIter[352461])(352650 call ||(352644 call isDomain tmpIter[352461])(352647 call isArray tmpIter[352461]))))
      if isRngDomArr[352639]
      {
        const _coforallCount[352483] "const" "end count" "temp"
        (352562 'move' _coforallCount[352483](352559 call _endCountAlloc 0))
        unknown numTasks[352484] "temp"
        (352546 'move' numTasks[352484](352542 call . tmpIter[352461] c"size"))
        (352537 call _upEndCount _coforallCount[352483] 0 numTasks[352484])
        unknown _indexOfInterest[352490] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[352491] "expr temp" "temp"
        (352500 'move' _iterator[352491](352498 call _getIteratorZip tmpIter[352461]))
        Defer
        {
          {
            (352530 call _freeIterator _iterator[352491])
          }
        }
        { scopeless type
          (352505 'move' _indexOfInterest[352490](352502 call iteratorIndex _iterator[352491]))
        }
        ForLoop[352492]
        {
          (352510 call _check_tuple_var_decl _indexOfInterest[352490] 2)
          unknown loc[352516] "coforall index var" "index var" "insert auto destroy"
          (352518 'move' loc[352516](352514 call _indexOfInterest[352490] 0))
          unknown locArr[352523] "coforall index var" "index var" "insert auto destroy"
          (352525 'move' locArr[352523](352521 call _indexOfInterest[352490] 1))
          { scopeless
            { scopeless
              const tmp[352467] "const" "temp"
              (352469 'move' tmp[352467](352471 'deref'(352472 '_wide_get_locale' loc)))
              {
                {
                  (352480 call chpl__delete locArr)
                }
                (352485 call _downEndCount _coforallCount[352483] nil[44])
                (352475 'coforall on block' 0 tmp[352467])
              }
            }
          }
          label _continueLabel[352495]
          _indexOfInterest[352490]
          _iterator[352491]
        }
        label _breakLabel[352496]
        Defer
        {
          {
            (352549 call _endCountFree _coforallCount[352483])
          }
        }
        (352554 call _waitEndCount _coforallCount[352483] 0 numTasks[352484])
      }
      {
        const _coforallCount[352566] "const" "end count" "temp"
        (352636 'move' _coforallCount[352566](352633 call _endCountAlloc 0))
        unknown _indexOfInterest[352573] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[352574] "expr temp" "temp"
        (352583 'move' _iterator[352574](352581 call _getIteratorZip tmpIter[352461]))
        Defer
        {
          {
            (352613 call _freeIterator _iterator[352574])
          }
        }
        { scopeless type
          (352588 'move' _indexOfInterest[352573](352585 call iteratorIndex _iterator[352574]))
        }
        ForLoop[352575]
        {
          (352593 call _check_tuple_var_decl _indexOfInterest[352573] 2)
          unknown loc[352599] "coforall index var" "index var" "insert auto destroy"
          (352601 'move' loc[352599](352597 call _indexOfInterest[352573] 0))
          unknown locArr[352606] "coforall index var" "index var" "insert auto destroy"
          (352608 'move' locArr[352606](352604 call _indexOfInterest[352573] 1))
          (352620 call _upEndCount _coforallCount[352566] 0)
          { scopeless
            { scopeless
              const tmp[352451] "const" "temp"
              (352453 'move' tmp[352451](352449 'deref'(352448 '_wide_get_locale' loc)))
              {
                {
                  (352444 call chpl__delete locArr)
                }
                (352568 call _downEndCount _coforallCount[352566] nil[44])
                (352456 'coforall on block' 0 tmp[352451])
              }
            }
          }
          label _continueLabel[352578]
          _indexOfInterest[352573]
          _iterator[352574]
        }
        label _breakLabel[352579]
        Defer
        {
          {
            (352624 call _endCountFree _coforallCount[352566])
          }
        }
        (352629 call _waitEndCount _coforallCount[352566] 0)
      }
    }
  }
  function _unknown[51].these[352664](arg _mt[352669]:_MT[238], arg this[352666] :
  ReplicatedArr) ref : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[352682] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352683] "expr temp" "temp"
      (352692 'move' _iterator[352683](352690 call _getIterator(352676 call .(352675 call chpl_myLocArr) c"arrLocalRep")))
      Defer
      {
        {
          (352709 call _freeIterator _iterator[352683])
        }
      }
      { scopeless type
        (352698 'move' _indexOfInterest[352682](352695 call iteratorIndex _iterator[352683]))
      }
      ForLoop[352684]
      {
        unknown a[352702] "index var" "insert auto destroy"
        (352704 'move' a[352702] _indexOfInterest[352682])
        { scopeless
          (352680 yield a)
        }
        label _continueLabel[352687]
        _indexOfInterest[352682]
        _iterator[352683]
      }
      label _breakLabel[352688]
    }
  }
  { scopeless type
    eltType
  }
  function _unknown[51].these[352727](arg _mt[352732]:_MT[238], arg this[352729] :
  ReplicatedArr, param arg tag[352724] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[352752] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352753] "expr temp" "temp"
      (352762 'move' _iterator[352753](352760 call _getIterator(352748 call(352743 call . dom c"these") tag)))
      Defer
      {
        {
          (352779 call _freeIterator _iterator[352753])
        }
      }
      { scopeless type
        (352768 'move' _indexOfInterest[352752](352765 call iteratorIndex _iterator[352753]))
      }
      ForLoop[352754]
      {
        unknown follow[352772] "index var" "insert auto destroy"
        (352774 'move' follow[352772] _indexOfInterest[352752])
        { scopeless
          (352750 yield follow)
        }
        label _continueLabel[352757]
        _indexOfInterest[352752]
        _iterator[352753]
      }
      label _breakLabel[352758]
    }
  }
  where {
    (352739 call == tag(352736 call . iterKind c"leader"))
  }
  function _unknown[51].these[352797](arg _mt[352804]:_MT[238], arg this[352801] :
  ReplicatedArr, param arg tag[352794] :
  iterKind, arg followThis[352799]:_any[178](?)) ref : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[352830] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352831] "expr temp" "temp"
      (352840 'move' _iterator[352831](352838 call _getIterator(352826 call(352820 call .(352817 call .(352816 call chpl_myLocArr) c"arrLocalRep") c"these") tag followThis)))
      Defer
      {
        {
          (352857 call _freeIterator _iterator[352831])
        }
      }
      { scopeless type
        (352846 'move' _indexOfInterest[352830](352843 call iteratorIndex _iterator[352831]))
      }
      ForLoop[352832]
      {
        unknown a[352850] "index var" "insert auto destroy"
        (352852 'move' a[352850] _indexOfInterest[352830])
        { scopeless
          (352828 yield a)
        }
        label _continueLabel[352835]
        _indexOfInterest[352830]
        _iterator[352831]
      }
      label _breakLabel[352836]
    }
  }
  where {
    (352811 call == tag(352808 call . iterKind c"follower"))
  }
  function _unknown[51].dsiTargetLocales[352871](arg _mt[352876]:_MT[238], arg this[352873] :
  Replicated) : _unknown[51] "method"
  {
    (352879 return targetLocales)
  }
  function _unknown[51].dsiTargetLocales[352887](arg _mt[352892]:_MT[238], arg this[352889] :
  ReplicatedDom) : _unknown[51] "method"
  {
    (352898 return(352895 call . dist c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[352906](arg _mt[352911]:_MT[238], arg this[352908] :
  ReplicatedArr) : _unknown[51] "method"
  {
    (352920 return(352917 call .(352914 call . dom c"dist") c"targetLocales"))
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[352928](arg _mt[352933]:_MT[238], arg this[352930] :
  ReplicatedDom) param : _unknown[51] "method"
  {
    { scopeless
      (352936 return 1)
    }
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[352944](arg _mt[352949]:_MT[238], arg this[352946] :
  ReplicatedArr) param : _unknown[51] "method"
  {
    { scopeless
      (352952 return 1)
    }
  }
  function _unknown[51].dsiLocalSubdomain[352964](arg _mt[352969]:_MT[238], arg this[352966] :
  ReplicatedDom, arg loc[352961] :
  locale[28]) : _unknown[51] "method"
  {
    if(353002 call _cond_test(352983 call(352975 call .(352972 call . localDoms c"_dom") c"contains")(352979 call . loc c"id")))
    {
      { scopeless
        (352985 return domRep)
      }
    }
    {
      { scopeless
        unknown d[352994](352992 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (352997 'end of statement')
      }
      (353000 return d)
    }
  }
  function _unknown[51].dsiLocalSubdomain[353017](arg _mt[353022]:_MT[238], arg this[353019] :
  ReplicatedArr, arg loc[353014] :
  locale[28]) : _unknown[51] "method"
  {
    if(353058 call _cond_test(353036 call(353028 call .(353025 call . localArrs c"_dom") c"contains")(353032 call . loc c"id")))
    {
      { scopeless
        (353041 return(353038 call . dom c"domRep"))
      }
    }
    {
      { scopeless
        unknown d[353050](353048 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (353053 'end of statement')
      }
      (353056 return d)
    }
  }
  function _unknown[51].dsiLocalSlice[353071](arg _mt[353076]:_MT[238], arg this[353073] :
  ReplicatedArr, arg ranges[353069]:_any[178](?)) : _unknown[51] "method"
  {
    (353088 return(353087 call(353081 call .(353080 call chpl_myLocArr) c"arrLocalRep")(353085 'expand_tuple' ranges)))
  }
}