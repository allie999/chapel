AST dump for ChapelUtil after pass flattenFunctions.
Module use list: ChapelStandard 

{
  function chpl__init_ChapelUtil[416072]() : void[4] "insert line file info" "module init" "resolved"
  {
    (167686 'end of statement')
    (522148 return _void[55])
  }
  function safeAdd[976700](const in arg a[976702]:int(64)[13], const in arg b[976707]:int(64)[13]) : bool[10] "instantiated generic" "invisible fn" "resolved"
  {
    val ret[976709]:bool[10] "dead after last mention" "RVV" "temp"
    val call_tmp[976717]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp" "type variable"
    (976945 'end of statement')
    val call_tmp[976750]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (976752 'move' call_tmp[976750](976755 call <[946327] a[976702]))
    val call_tmp[976758]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (976760 'move' call_tmp[976758] call_tmp[976750])
    if call_tmp[976758]
    {
      val call_tmp[976767]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (976769 'move' call_tmp[976767](976772 call >=[976947] b[976707]))
      val call_tmp[976775]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (976777 'move' call_tmp[976775] call_tmp[976767])
      if call_tmp[976775]
      {
        (976784 'move' ret[976709] 1)
        gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
      }
      {
        val call_tmp[976791]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp" "type variable"
        val call_tmp[976804]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (976806 'move' call_tmp[976804](976809 call -[977171] a[976702]))
        val call_tmp[976812]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (976814 'move' call_tmp[976812](976817 call <[437510] b[976707] call_tmp[976804]))
        val call_tmp[976820]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (976822 'move' call_tmp[976820] call_tmp[976812])
        if call_tmp[976820]
        {
          (976829 'move' ret[976709] 0)
          gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
        }
        {
          (976836 'move' ret[976709] 1)
          gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
        }
      }
    }
    {
      val call_tmp[976845]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (976847 'move' call_tmp[976845](976850 call <=[437070] b[976707] 0))
      val call_tmp[976853]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (976855 'move' call_tmp[976853] call_tmp[976845])
      if call_tmp[976853]
      {
        (976862 'move' ret[976709] 1)
        gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
      }
      {
        val call_tmp[976869]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp" "type variable"
        val call_tmp[976882]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (976884 'move' call_tmp[976882](976887 call -[977319] a[976702]))
        val call_tmp[976890]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (976892 'move' call_tmp[976890](976895 call >[437730] b[976707] call_tmp[976882]))
        val call_tmp[976898]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (976900 'move' call_tmp[976898] call_tmp[976890])
        if call_tmp[976898]
        {
          (976907 'move' ret[976709] 0)
          gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
        }
        {
          (976914 'move' ret[976709] 1)
          gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
        }
      }
    }
    label _end_safeAdd[976923]
    (976925 return ret[976709])
  }
  function _ref(chpl_main_argument)[1397654].deinit[811615](const?  ref arg this[811619]:_ref(chpl_main_argument)[1397654]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method" "resolved"
  {
    (811627 return _void[55])
  }
  type chpl_main_argument[167374] val argc[167361]:int(64)[13] val return_value[167369]:int(32)[95]
  function chpl_rt_preUserCodeHook[167672]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522134 return _void[55])
  }
  function chpl_rt_postUserCodeHook[167678]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522136 return _void[55])
  }
  function chpl_addModule[167693](const in arg moduleName[167690]:c_string[19], const in arg deinitFun[167696]:c_fn_ptr[152]) : void[4] "resolved" "no return value for void"
  {
    val call_tmp[679404]:unmanaged chpl_ModuleDeinit[1379140] "dead after last mention" "insert auto destroy for explicit new" "maybe param" "temp"
    val new_temp[1380544]:unmanaged chpl_ModuleDeinit[1379140] "dead after last mention" "temp"
    (1380546 'move' new_temp[1380544](1380415 call _new[1380480] moduleName[167690] deinitFun[167696] chpl_moduleDeinitFuns[19837]))
    (679407 'move' call_tmp[679404] new_temp[1380544])
    val coerce_tmp[1380562]:unmanaged chpl_ModuleDeinit?[415407] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (1380568 'move' coerce_tmp[1380562](1380564 'cast' unmanaged chpl_ModuleDeinit?[415407] call_tmp[679404]))
    (167709 call =[1379234] chpl_moduleDeinitFuns[19837] coerce_tmp[1380562])
    (522138 return _void[55])
  }
  function chpl_deinitModules[167717]() : void[4] "export" "local args" "resolved" "no return value for void"
  {
    (1378842 'end of statement')
    val prev[167768]:unmanaged chpl_ModuleDeinit?[415407] "dead at end of block" "insert auto destroy"
    (544614 'move' prev[167768](1378843 call chpl__initCopy[979689] chpl_moduleDeinitFuns[19837]))
    (167771 'end of statement')
    {
      val tmp[167825]:bool[10] "dead after last mention" "temp"
      val coerce_tmp[1378853]:borrowed object?[415395] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1378858 'move' coerce_tmp[1378853](1378855 'cast' borrowed object?[415395] prev[167768]))
      (167843 'move' tmp[167825](167841 call _cond_test[9881] coerce_tmp[1378853]))
      WhileDo[167830]
      {
        {
          val call_tmp[679414]:unmanaged chpl_ModuleDeinit[1379140] "dead at end of block" "maybe param" "temp"
          (679417 'move' call_tmp[679414](167774 call postfix![1378861] prev[167768]))
          const curr[167776]:unmanaged chpl_ModuleDeinit[1379140] "dead at end of block" "const" "insert auto destroy"
          (544616 'move' curr[167776](1379176 call chpl__initCopy[1379157] call_tmp[679414]))
          (167779 'end of statement' prev[167768])
          (1379180 'end of statement' curr[167776] curr[167776])
          ref call_tmp[679433]:_ref(c_fn_ptr)[946787] "dead after last mention" "maybe param" "reference to a const" "temp"
          val coerce_tmp[1379183]:chpl_ModuleDeinit[19824] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1379188 'move' coerce_tmp[1379183](1379185 'cast' chpl_ModuleDeinit[19824] curr[167776]))
          (679436 'move' call_tmp[679433](167804 call deinitFun[752667] coerce_tmp[1379183]))
          val coerce_tmp[1379191]:c_fn_ptr[152] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1379195 'move' coerce_tmp[1379191](1379193 'deref' call_tmp[679433]))
          (167808 call chpl_execute_module_deinit[167750] coerce_tmp[1379191])
          (483018 'end of statement' curr[167776])
          ref call_tmp[679440]:_ref(unmanaged chpl_ModuleDeinit?)[979654] "dead after last mention" "maybe param" "reference to a const" "temp"
          val coerce_tmp[1379198]:chpl_ModuleDeinit[19824] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1379203 'move' coerce_tmp[1379198](1379200 'cast' chpl_ModuleDeinit[19824] curr[167776]))
          (679443 'move' call_tmp[679440](167814 call prevModule[752693] coerce_tmp[1379198]))
          val coerce_tmp[1379269]:unmanaged chpl_ModuleDeinit?[415407] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1379273 'move' coerce_tmp[1379269](1379271 'deref' call_tmp[679440]))
          (167817 call =[1379234] prev[167768] coerce_tmp[1379269])
          (483020 'end of statement' prev[167768] curr[167776])
          (167822 call chpl__delete[1379276] curr[167776])
          (483023 'end of statement' curr[167776])
        }
        label _continueLabel[167828]
        val coerce_tmp[1380326]:borrowed object?[415395] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (1380331 'move' coerce_tmp[1380326](1380328 'cast' borrowed object?[415395] prev[167768]))
        (167836 'move' tmp[167825](167834 call _cond_test[9881] coerce_tmp[1380326]))
        tmp[167825]
      }
      label _breakLabel[167829]
    }
    (167848 call =[1380362] chpl_moduleDeinitFuns[19837] nil[44])
    (522146 return _void[55])
  }
  function chpl_execute_module_deinit[167750](const in arg deinitFun[167747]:c_fn_ptr[152]) : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522144 return _void[55])
  }
}