AST dump for ChapelIO after pass parse.
Module use list: 

{
  (151534 'use' ChapelBase)
  (151538 'use' ChapelLocale)
  (151541 'use' SysBasic)
  (151544 'use' SysError)
  function _isNilObject[151550](arg val[151548]:_any[178](?)) : _unknown[51] "no doc"
  {
    function helper[151559](arg o[151556] :
    (151555 'to borrowed class from unknown' object)) : _unknown[51]
    {
      { scopeless
        (151565 return(151563 call == o nil[44]))
      }
    }
    function helper[151575](arg o[151573]:_any[178](?)) : _unknown[51]
    {
      { scopeless
        (151578 return 0)
      }
    }
    (151587 return(151586 call helper val))
  }
  (151592 'use' IO)
  function isIoField[151598](arg x[151596]:_any[178](?), param arg i[151600]:_any[178](?)) param : _unknown[51] "private"
  {
    if(151655 call _cond_test(151645 call ||(151634 call ||(151625 call isType(151623 'field by num' x i))(151633 call isParam(151631 'field by num' x i)))(151643 call ==(151641 'typeof'(151640 'field by num' x i)) nothing[7])))
    {
      (151648 return 0)
    }
    {
      (151652 return 1)
    }
  }
  function ioFieldNameEqLiteral[151666](arg ch[151664]:_any[178](?), arg t[151668]:_any[178](?), param arg i[151670]:_any[178](?)) : _unknown[51] "private"
  {
    { scopeless
      unknown st[151679](151678 call(151673 call . ch c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE)
      (151682 'end of statement')
    }
    if(151785 call _cond_test(151686 call == st QIO_AGGREGATE_FORMAT_JSON))
    {
      (151751 return(151688 'new'(151750 call ioLiteral(151747 call +(151728 call + "\""(151727 'field num to name' t i)) "\":"))))
    }
    {
      (151782 return(151754 'new'(151781 call ioLiteral(151778 call +(151760 'field num to name' t i) " = "))))
    }
  }
  function ioFieldNameLiteral[151795](arg ch[151793]:_any[178](?), arg t[151797]:_any[178](?), param arg i[151799]:_any[178](?)) : _unknown[51] "private"
  {
    { scopeless
      unknown st[151808](151807 call(151802 call . ch c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE)
      (151811 'end of statement')
    }
    if(151847 call _cond_test(151815 call == st QIO_AGGREGATE_FORMAT_JSON))
    {
      (151832 return(151817 'new'(151831 call ioLiteral(151828 call +(151825 call + "\""(151824 'field num to name' t i)) "\""))))
    }
    {
      (151844 return(151835 'new'(151843 call ioLiteral(151841 'field num to name' t i))))
    }
  }
  function writeThisFieldsDefaultImpl[151857](arg writer[151855]:_any[178](?), arg x[151861] :
  unknown t[151859], inout arg first[151865] :
  bool[10]) : _unknown[51] throws "no doc"
  {
    { scopeless
      unknown num_fields[151888] "param"(151887 'num fields' t)
      (151891 'end of statement')
    }
    { scopeless
      unknown isBinary[151899](151898 call(151894 call . writer c"binary"))
      (151902 'end of statement')
    }
    if(151933 call _cond_test(151906 call isClassType t))
    {
      if(151928 call _cond_test(151913 call !=(151910 call _to_borrowed t)(151912 'to borrowed class from unknown' object)))
      {
        (151925 call writeThisFieldsDefaultImpl writer(151921 call . x c"super") first)
      }
    }
    if(152187 call _cond_test(151941 call !(151940 call isUnionType t)))
    {
      {
        unknown i[152029] 0
        unknown tmp[152030] "maybe param" "temp"
        (152042 'move' tmp[152030](152040 call chpl_compute_low_param_loop_bound 1 num_fields))
        unknown tmp[152031] "maybe param" "temp"
        (152049 'move' tmp[152031](152047 call chpl_compute_high_param_loop_bound 1 num_fields))
        unknown tmp[152032] "maybe param" "temp"
        (152052 'move' tmp[152032] 1)
        ParamForLoop[152054]
        { i[152029] tmp[152030] tmp[152031] tmp[152032]
          {
            if(152024 call _cond_test(151951 call isIoField x i))
            {
              if(152002 call _cond_test(151953 call ! isBinary))
              {
                { scopeless
                  unknown comma[151960](151955 'new'(151959 call ioLiteral ", "))
                  (151963 'end of statement')
                }
                if(151978 call _cond_test(151966 call ! first))
                {
                  { scopeless
                    (151976 call(151971 call . writer c"readwrite") comma)
                  }
                }
                { scopeless
                  unknown eq[151990](151989 call ioFieldNameEqLiteral writer t i) ioLiteral
                  (151993 'end of statement')
                }
                (152000 call(151995 call . writer c"readwrite") eq)
              }
              (152017 call(152008 call . writer c"readwrite")(152015 'field by num' x i))
              (152021 call = first 0)
            }
          }
        }
        label _unused_continueLabel[152034]
        label _breakLabel[152033]
      }
    }
    {
      { scopeless
        unknown id[152084](152083 'get_union_id' x)
        (152087 'end of statement')
      }
      {
        unknown i[152153] 0
        unknown tmp[152154] "maybe param" "temp"
        (152166 'move' tmp[152154](152164 call chpl_compute_low_param_loop_bound 1 num_fields))
        unknown tmp[152155] "maybe param" "temp"
        (152173 'move' tmp[152155](152171 call chpl_compute_high_param_loop_bound 1 num_fields))
        unknown tmp[152156] "maybe param" "temp"
        (152176 'move' tmp[152156] 1)
        ParamForLoop[152178]
        { i[152153] tmp[152154] tmp[152155] tmp[152156]
          {
            if(152148 call _cond_test(152102 call &&(152097 call isIoField x i)(152100 call == i id)))
            {
              if(152131 call _cond_test isBinary)
              {
                (152108 call write id)
              }
              {
                { scopeless
                  unknown eq[152118](152117 call ioFieldNameEqLiteral writer t i) ioLiteral
                  (152121 'end of statement')
                }
                (152129 call(152124 call . writer c"readwrite") eq)
              }
              (152146 call(152137 call . writer c"readwrite")(152144 'field by num' x i))
            }
          }
        }
        label _unused_continueLabel[152158]
        label _breakLabel[152157]
      }
    }
  }
  function writeThisDefaultImpl[152197](arg writer[152195]:_any[178](?), arg x[152201] :
  unknown t[152199]) : _unknown[51] throws "no doc"
  {
    if(152328 call _cond_test(152210 call !(152209 call(152205 call . writer c"binary"))))
    {
      { scopeless
        unknown st[152219](152218 call(152213 call . writer c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE)
        (152222 'end of statement')
      }
      { scopeless
        unknown start[152225] ioLiteral
        (152228 'end of statement')
      }
      if(152315 call _cond_test(152231 call == st QIO_AGGREGATE_FORMAT_JSON))
      {
        (152239 call = start(152234 'new'(152238 call ioLiteral "{")))
      }
      {
        { scopeless
          if(152311 call _cond_test(152245 call == st QIO_AGGREGATE_FORMAT_CHPL))
          {
            (152278 call = start(152248 'new'(152277 call ioLiteral(152274 call +(152271 call + "new "(152269 call _cast string[26] t)) "("))))
          }
          {
            if(152306 call _cond_test(152285 call isClassType t))
            {
              (152292 call = start(152287 'new'(152291 call ioLiteral "{")))
            }
            {
              (152302 call = start(152297 'new'(152301 call ioLiteral "(")))
            }
          }
        }
      }
      (152326 call(152321 call . writer c"readwrite") start)
    }
    { scopeless
      unknown first[152334] 1
      (152337 'end of statement')
    }
    (152343 call writeThisFieldsDefaultImpl writer x first)
    if(152444 call _cond_test(152351 call !(152350 call(152346 call . writer c"binary"))))
    {
      { scopeless
        unknown st[152360](152359 call(152354 call . writer c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE)
        (152363 'end of statement')
      }
      { scopeless
        unknown end[152366] ioLiteral
        (152369 'end of statement')
      }
      if(152431 call _cond_test(152372 call == st QIO_AGGREGATE_FORMAT_JSON))
      {
        (152380 call = end(152375 'new'(152379 call ioLiteral "}")))
      }
      {
        { scopeless
          if(152427 call _cond_test(152386 call == st QIO_AGGREGATE_FORMAT_CHPL))
          {
            (152394 call = end(152389 'new'(152393 call ioLiteral ")")))
          }
          {
            if(152422 call _cond_test(152401 call isClassType t))
            {
              (152408 call = end(152403 'new'(152407 call ioLiteral "}")))
            }
            {
              (152418 call = end(152413 'new'(152417 call ioLiteral ")")))
            }
          }
        }
      }
      (152442 call(152437 call . writer c"readwrite") end)
    }
  }
  function skipFieldsAtEnd[152454](arg reader[152452]:_any[178](?), inout arg needsComma[152457] :
  bool[10]) : _unknown[51] throws "private"
  {
    { scopeless
      const qioFmt[152467] "const"(152466 call(152461 call . reader c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE)
      (152470 'end of statement')
    }
    { scopeless
      const isJson[152476] "const"(152474 call == qioFmt QIO_AGGREGATE_FORMAT_JSON)
      (152479 'end of statement')
    }
    { scopeless
      const qioSkipUnknown[152481] "const" QIO_STYLE_ELEMENT_SKIP_UNKNOWN_FIELDS
      (152484 'end of statement')
    }
    { scopeless
      const isSkipUnknown[152495] "const"(152493 call !=(152491 call(152486 call . reader c"styleElement") qioSkipUnknown) 0)
      (152498 'end of statement')
    }
    if(152509 call _cond_test(152505 call ||(152500 call ! isSkipUnknown)(152503 call ! isJson)))
    {
      { scopeless
        (152507 return)
      }
    }
    {
      unknown tmp[152579] "temp"
      (152597 'move' tmp[152579](152595 call _cond_test 1))
      WhileDo[152584]
      {
        {
          if(152552 call _cond_test needsComma)
          {
            { scopeless
              unknown comma[152522](152516 'new'(152521 call ioLiteral "," 1))
              (152525 'end of statement')
            }
            Try
            {
              {
                (152533 call(152528 call . reader c"readwrite") comma)
                (152538 call = needsComma 0)
              }
            }
            Catch err : BadFormatError
            {
              break nil[44]
            }
          }
          { scopeless
            unknown err[152559] ENOERR syserr
            (152562 'end of statement')
          }
          Try
          {
            {
              (152570 call(152566 call . reader c"skipField"))
            }
          }
          (152576 call = needsComma 1)
        }
        label _continueLabel[152582]
        (152590 'move' tmp[152579](152588 call _cond_test 1))
        tmp[152579]
      }
      label _breakLabel[152583]
    }
  }
  function readThisFieldsDefaultImpl[152606](arg reader[152604]:_any[178](?), arg t[152608]:_any[178](?), ref arg x[152610]:_any[178](?), inout arg needsComma[152613] :
  bool[10]) : _unknown[51] throws "no doc"
  {
    { scopeless
      unknown numFields[152626] "param"(152625 'num fields' t)
      (152629 'end of statement')
    }
    { scopeless
      unknown isBinary[152637](152636 call(152632 call . reader c"binary"))
      (152640 'end of statement')
    }
    if(152690 call _cond_test(152653 call &&(152644 call isClassType t)(152651 call !=(152648 call _to_borrowed t)(152650 'to borrowed class from unknown' object))))
    {
      unknown superType[152660] "type variable"(152659 'typeof'(152656 call . x c"super"))
      { scopeless
        unknown castTmp[152666] x superType
        (152669 'end of statement')
      }
      Try
      {
        {
          (152676 call readThisFieldsDefaultImpl reader superType castTmp needsComma)
        }
      }
      Catch err : Error
      {
        (152684 'throw' err)
      }
    }
    if(153369 call _cond_test isBinary)
    {
      {
        unknown i[152723] 0
        unknown tmp[152724] "maybe param" "temp"
        (152736 'move' tmp[152724](152734 call chpl_compute_low_param_loop_bound 1 numFields))
        unknown tmp[152725] "maybe param" "temp"
        (152743 'move' tmp[152725](152741 call chpl_compute_high_param_loop_bound 1 numFields))
        unknown tmp[152726] "maybe param" "temp"
        (152746 'move' tmp[152726] 1)
        ParamForLoop[152748]
        { i[152723] tmp[152724] tmp[152725] tmp[152726]
          { scopeless
            if(152718 call _cond_test(152703 call isIoField x i))
            {
              { scopeless
                Try
                {
                  {
                    (152714 call(152705 call . reader c"readwrite")(152712 'field by num' x i))
                  }
                }
              }
            }
          }
        }
        label _unused_continueLabel[152728]
        label _breakLabel[152727]
      }
    }
    {
      { scopeless
        if(153365 call _cond_test(152760 call > numFields 0))
        {
          { scopeless
            unknown readField[152766](152764 call * numFields bool[10])
            (152769 'end of statement')
          }
          { scopeless
            unknown numToRead[152772] 0
            (152775 'end of statement')
          }
          { scopeless
            unknown numRead[152777] 0
            (152780 'end of statement')
          }
          {
            unknown i[152800] 0
            unknown tmp[152801] "maybe param" "temp"
            (152813 'move' tmp[152801](152811 call chpl_compute_low_param_loop_bound 1 numFields))
            unknown tmp[152802] "maybe param" "temp"
            (152820 'move' tmp[152802](152818 call chpl_compute_high_param_loop_bound 1 numFields))
            unknown tmp[152803] "maybe param" "temp"
            (152823 'move' tmp[152803] 1)
            ParamForLoop[152825]
            { i[152800] tmp[152801] tmp[152802] tmp[152803]
              { scopeless
                if(152795 call _cond_test(152789 call isIoField x i))
                {
                  { scopeless
                    (152792 call += numToRead 1)
                  }
                }
              }
            }
            label _unused_continueLabel[152805]
            label _breakLabel[152804]
          }
          {
            unknown tmp[153191] "temp"
            (153215 'move' tmp[153191](153210 call _cond_test(153212 call < numRead numToRead)))
            WhileDo[153196]
            {
              {
                if(152874 call _cond_test needsComma)
                {
                  { scopeless
                    Try
                    {
                      {
                        { scopeless
                          unknown comma[152845](152839 'new'(152844 call ioLiteral "," 1))
                          (152848 'end of statement')
                        }
                        (152856 call(152851 call . reader c"readwrite") comma)
                        (152860 call = needsComma 0)
                      }
                    }
                    Catch err : BadFormatError
                    {
                      break nil[44]
                    }
                  }
                }
                { scopeless
                  unknown st[152887](152886 call(152881 call . reader c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE)
                  (152890 'end of statement')
                }
                { scopeless
                  const qioSkipUnknown[152892] "const" QIO_STYLE_ELEMENT_SKIP_UNKNOWN_FIELDS
                  (152895 'end of statement')
                }
                { scopeless
                  unknown isSkipUnknown[152906](152904 call !=(152902 call(152897 call . reader c"styleElement") qioSkipUnknown) 0)
                  (152909 'end of statement')
                }
                { scopeless
                  unknown hasReadFieldName[152911] 0
                  (152914 'end of statement')
                }
                {
                  unknown i[153092] 0
                  unknown tmp[153093] "maybe param" "temp"
                  (153105 'move' tmp[153093](153103 call chpl_compute_low_param_loop_bound 1 numFields))
                  unknown tmp[153094] "maybe param" "temp"
                  (153112 'move' tmp[153094](153110 call chpl_compute_high_param_loop_bound 1 numFields))
                  unknown tmp[153095] "maybe param" "temp"
                  (153115 'move' tmp[153095] 1)
                  ParamForLoop[153117]
                  { i[153092] tmp[153093] tmp[153094] tmp[153095]
                    {
                      if(152941 call _cond_test(152936 call ||(152927 call ||(152924 call !(152923 call isIoField x i)) hasReadFieldName)(152935 call readField(152932 call - i 1))))
                      {
                        { scopeless
                          continue nil[44]
                        }
                      }
                      { scopeless
                        unknown fieldName[152953](152952 call ioFieldNameLiteral reader t i)
                        (152956 'end of statement')
                      }
                      Try
                      {
                        {
                          (152963 call(152958 call . reader c"readwrite") fieldName)
                        }
                      }
                      Catch err : SystemError
                      {
                        if(152991 call _cond_test(152986 call ||(152977 call ==(152973 call . err c"err") EFORMAT)(152984 call ==(152980 call . err c"err") EEOF)))
                        {
                          { scopeless
                            continue nil[44]
                          }
                        }
                        (152998 'throw' err)
                      }
                      (153005 call = hasReadFieldName 1)
                      (153010 call = needsComma 1)
                      { scopeless
                        unknown equalSign[153048](153045 IfExpr (153015 call == st QIO_AGGREGATE_FORMAT_JSON) then
                        { scopeless
                          (153017 'new'(153038 call ioLiteral ":" 1))
                        } else
                        { scopeless
                          (153039 'new'(153044 call ioLiteral "=" 1))
                        } )
                        (153051 'end of statement')
                      }
                      Try
                      {
                        {
                          (153058 call(153053 call . reader c"readwrite") equalSign)
                        }
                      }
                      Try
                      {
                        {
                          (153072 call(153063 call . reader c"readwrite")(153070 'field by num' x i))
                        }
                      }
                      (153084 call =(153082 call readField(153079 call - i 1)) 1)
                      (153089 call += numRead 1)
                    }
                  }
                  label _unused_continueLabel[153097]
                  label _breakLabel[153096]
                }
                { scopeless
                  const isJson[153130] "const"(153128 call == st QIO_AGGREGATE_FORMAT_JSON)
                  (153133 'end of statement')
                }
                if(153186 call _cond_test(153135 call ! hasReadFieldName))
                {
                  { scopeless
                    if(153182 call _cond_test(153139 call && isSkipUnknown isJson))
                    {
                      Try
                      {
                        {
                          (153146 call(153142 call . reader c"skipField"))
                        }
                      }
                      (153153 call = needsComma 1)
                    }
                    {
                      (153179 'throw'(153158 'new'(_chpl_manager = _owned[30](?))(153178 call BadFormatError "Failed to read field, could not skip")))
                    }
                  }
                }
              }
              label _continueLabel[153194]
              (153205 'move' tmp[153191](153200 call _cond_test(153202 call < numRead numToRead)))
              tmp[153191]
            }
            label _breakLabel[153195]
          }
          if(153361 call _cond_test(153220 call == numRead numToRead))
          {
          }
          {
            { scopeless
              unknown tag[153264] "param"(153261 IfExpr (153226 call isClassType t) then
              { scopeless
                "class"
              } else
              { scopeless
                "record"
              } )
              (153267 'end of statement')
            }
            { scopeless
              const msg[153348] "const"(153346 call +(153340 call +(153337 call +(153334 call +(153315 call +(153309 call +(153290 call + "Read only "(153288 call _cast string[26] numRead)) " out of ")(153313 call _cast string[26] numToRead)) " fields of ") tag) " ")(153344 call _cast string[26] t))
              (153351 'end of statement')
            }
            (153359 'throw'(153354 'new'(_chpl_manager = _owned[30](?))(153358 call BadFormatError msg)))
          }
        }
      }
    }
  }
  where {
    (152620 call !(152619 call isUnionType t))
  }
  function readThisFieldsDefaultImpl[153381](arg reader[153379]:_any[178](?), arg t[153383]:_any[178](?), ref arg x[153385]:_any[178](?), inout arg needsComma[153388] :
  bool[10]) : _unknown[51] throws "no doc"
  {
    { scopeless
      unknown numFields[153399] "param"(153398 'num fields' t)
      (153402 'end of statement')
    }
    { scopeless
      unknown isBinary[153410](153409 call(153405 call . reader c"binary"))
      (153413 'end of statement')
    }
    { scopeless
      unknown superclassError[153416] ENOERR syserr
      (153419 'end of statement')
    }
    if(153715 call _cond_test isBinary)
    {
      { scopeless
        unknown id[153425](153424 'get_union_id' x)
        (153428 'end of statement')
      }
      Try
      {
        {
          (153436 call(153431 call . reader c"readwrite") id)
        }
      }
      {
        unknown i[153474] 0
        unknown tmp[153475] "maybe param" "temp"
        (153487 'move' tmp[153475](153485 call chpl_compute_low_param_loop_bound 1 numFields))
        unknown tmp[153476] "maybe param" "temp"
        (153494 'move' tmp[153476](153492 call chpl_compute_high_param_loop_bound 1 numFields))
        unknown tmp[153477] "maybe param" "temp"
        (153497 'move' tmp[153477] 1)
        ParamForLoop[153499]
        { i[153474] tmp[153475] tmp[153476] tmp[153477]
          { scopeless
            if(153469 call _cond_test(153453 call &&(153448 call isIoField x i)(153451 call == i id)))
            {
              { scopeless
                Try
                {
                  {
                    (153465 call(153456 call . reader c"readwrite")(153463 'field by num' x i))
                  }
                }
              }
            }
          }
        }
        label _unused_continueLabel[153479]
        label _breakLabel[153478]
      }
    }
    {
      { scopeless
        unknown hasFoundAtLeastOneField[153509] 0
        (153512 'end of statement')
      }
      {
        unknown i[153648] 0
        unknown tmp[153649] "maybe param" "temp"
        (153661 'move' tmp[153649](153659 call chpl_compute_low_param_loop_bound 1 numFields))
        unknown tmp[153650] "maybe param" "temp"
        (153668 'move' tmp[153650](153666 call chpl_compute_high_param_loop_bound 1 numFields))
        unknown tmp[153651] "maybe param" "temp"
        (153671 'move' tmp[153651] 1)
        ParamForLoop[153673]
        { i[153648] tmp[153649] tmp[153650] tmp[153651]
          {
            if(153528 call _cond_test(153523 call !(153522 call isIoField x i)))
            {
              { scopeless
                continue nil[44]
              }
            }
            { scopeless
              unknown st[153541](153540 call(153535 call . reader c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE)
              (153544 'end of statement')
            }
            { scopeless
              unknown fieldName[153551](153550 call ioFieldNameLiteral reader t i)
              (153554 'end of statement')
            }
            Try
            {
              {
                (153561 call(153556 call . reader c"readwrite") fieldName)
              }
            }
            Catch err : SystemError
            {
              if(153587 call _cond_test(153582 call ||(153573 call ==(153569 call . err c"err") EFORMAT)(153580 call ==(153576 call . err c"err") EEOF)))
              {
                { scopeless
                  continue nil[44]
                }
              }
              (153594 'throw' err)
            }
            (153601 call = hasFoundAtLeastOneField 1)
            { scopeless
              unknown eq[153623](153620 IfExpr (153606 call == st QIO_AGGREGATE_FORMAT_JSON) then
              { scopeless
                (153608 'new'(153613 call ioLiteral ":" 1))
              } else
              { scopeless
                (153614 'new'(153619 call ioLiteral "=" 1))
              } )
              (153626 'end of statement')
            }
            Try
            {
              {
                (153630 call readIt eq)
              }
            }
            Try
            {
              {
                (153644 call(153635 call . reader c"readwrite")(153642 'field by num' x i))
              }
            }
          }
        }
        label _unused_continueLabel[153653]
        label _breakLabel[153652]
      }
      if(153710 call _cond_test(153683 call ! hasFoundAtLeastOneField))
      {
        { scopeless
          (153708 'throw'(153687 'new'(_chpl_manager = _owned[30](?))(153707 call BadFormatError "Failed to find any union fields")))
        }
      }
    }
  }
  where {
    (153394 call isUnionType t)
  }
  function readThisDefaultImpl[153726](arg reader[153724]:_any[178](?), arg x[153730] :
  unknown t[153728]) : _unknown[51] throws "no doc"
  {
    { scopeless
      const st[153744] "const"(153743 call(153738 call . reader c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE)
      (153747 'end of statement')
    }
    if(153798 call _cond_test(153755 call !(153754 call(153750 call . reader c"binary"))))
    {
      { scopeless
        unknown start[153783](153780 IfExpr (153759 call == st QIO_AGGREGATE_FORMAT_CHPL) then
        { scopeless
          (153761 'new'(153774 call ioLiteral(153771 call +(153768 call + "new "(153766 call _cast string[26] t)) "(")))
        } else
        { scopeless
          (153775 'new'(153779 call ioLiteral "{"))
        } )
        (153786 'end of statement')
      }
      Try
      {
        {
          (153794 call(153789 call . reader c"readwrite") start)
        }
      }
    }
    { scopeless
      unknown needsComma[153803] 0
      (153806 'end of statement')
    }
    { scopeless
      unknown obj[153808] x
      (153811 'end of statement')
    }
    Try
    {
      {
        (153818 call readThisFieldsDefaultImpl reader t obj needsComma)
      }
    }
    Try
    {
      {
        (153826 call skipFieldsAtEnd reader needsComma)
      }
    }
    if(153870 call _cond_test(153836 call !(153835 call(153831 call . reader c"binary"))))
    {
      { scopeless
        unknown end[153855](153852 IfExpr (153840 call == st QIO_AGGREGATE_FORMAT_CHPL) then
        { scopeless
          (153842 'new'(153846 call ioLiteral ")"))
        } else
        { scopeless
          (153847 'new'(153851 call ioLiteral "}"))
        } )
        (153858 'end of statement')
      }
      Try
      {
        {
          (153866 call(153861 call . reader c"readwrite") end)
        }
      }
    }
  }
  where {
    (153736 call isClassType t)
  }
  function readThisDefaultImpl[153881](arg reader[153879]:_any[178](?), ref arg x[153885] :
  unknown t[153883]) : _unknown[51] throws "no doc"
  {
    { scopeless
      const st[153901] "const"(153900 call(153895 call . reader c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE)
      (153904 'end of statement')
    }
    if(154000 call _cond_test(153912 call !(153911 call(153907 call . reader c"binary"))))
    {
      { scopeless
        unknown start[153915] ioLiteral
        (153918 'end of statement')
      }
      {
        unknown tmp[153972] "expr temp" "maybe param" "maybe type" "temp"
        (153974 'move' tmp[153972] st)
        if(153979 call _cond_test(153976 call == tmp[153972] QIO_AGGREGATE_FORMAT_CHPL))
        {
          { scopeless
            (153939 call = start(153925 'new'(153938 call ioLiteral(153935 call +(153932 call + "new "(153930 call _cast string[26] t)) "("))))
          }
        }
        {
          if(153985 call _cond_test(153982 call == tmp[153972] QIO_AGGREGATE_FORMAT_JSON))
          {
            { scopeless
              (153953 call = start(153948 'new'(153952 call ioLiteral "{")))
            }
          }
          {
            { scopeless
              (153965 call = start(153960 'new'(153964 call ioLiteral "(")))
            }
          }
        }
      }
      Try
      {
        {
          (153996 call(153991 call . reader c"readwrite") start)
        }
      }
    }
    { scopeless
      unknown needsComma[154005] 0
      (154008 'end of statement')
    }
    Try
    {
      {
        (154015 call readThisFieldsDefaultImpl reader t x needsComma)
      }
    }
    Try
    {
      {
        (154023 call skipFieldsAtEnd reader needsComma)
      }
    }
    if(154068 call _cond_test(154033 call !(154032 call(154028 call . reader c"binary"))))
    {
      { scopeless
        unknown end[154053](154050 IfExpr (154038 call == st QIO_AGGREGATE_FORMAT_JSON) then
        { scopeless
          (154040 'new'(154044 call ioLiteral "}"))
        } else
        { scopeless
          (154045 'new'(154049 call ioLiteral ")"))
        } ) ioLiteral
        (154056 'end of statement')
      }
      Try
      {
        {
          (154064 call(154059 call . reader c"readwrite") end)
        }
      }
    }
  }
  where {
    (153892 call !(153891 call isClassType t))
  }
  function halt[154077]() : _unknown[51] "always propagate line file info" "function terminates program"
  {
    (154100 'chpl_error' c"halt reached")
  }
  function halt[154111](arg s[154108] :
  string[26]) : _unknown[51] "always propagate line file info" "function terminates program"
  {
    (154126 call halt(154124 call(154120 call .(154119 call(154115 call . s c"localize")) c"c_str")))
  }
  function halt[154138](arg args[154135]:_any[178](?) ...) : _unknown[51] "always propagate line file info" "function terminates program"
  {
    { scopeless
      unknown tmpstring[154164](154162 call + "halt reached - "(154161 call stringify(154159 'expand_tuple' args)))
      (154167 'end of statement')
    }
    (154177 'chpl_error'(154176 call(154172 call . tmpstring c"c_str")))
  }
  function warning[154187](arg s[154184] :
  string[26]) : _unknown[51] "always propagate line file info"
  {
    (154202 'chpl_warning'(154201 call(154197 call .(154196 call(154192 call . s c"localize")) c"c_str")))
  }
  function warning[154214](arg args[154211]:_any[178](?) ...) : _unknown[51] "always propagate line file info"
  {
    { scopeless
      unknown tmpstring[154221](154220 call stringify(154218 'expand_tuple' args))
      (154224 'end of statement')
    }
    (154229 call warning tmpstring)
  }
  function _unknown[51].writeThis[154238](arg _mt[154243]:_MT[238], arg this[154240] :
  locale[28], arg f[154236]:_any[178](?)) : _unknown[51] throws "method" "no doc"
  {
    (154250 call <~> f(154247 call . this c"_instance"))
  }
  function _unknown[51].writeThis[154261](arg _mt[154266]:_MT[238], arg this[154263] :
  _ddata, arg f[154259]:_any[178](?)) : _unknown[51] throws "method" "no doc"
  {
    (154287 call compilerWarning "printing _ddata class")
    (154308 call <~> f "<_ddata class cannot be printed>")
  }
  function _unknown[51].writeThis[154318](arg _mt[154323]:_MT[238], arg this[154320] :
  chpl_taskID_t, arg f[154316]:_any[178](?)) : _unknown[51] throws "method" "no doc"
  {
    { scopeless
      unknown tmp[154336](154334 call _cast(154333 call uint[115] 64) this)(154328 call uint[115] 64)
      (154339 'end of statement')
    }
    (154343 call <~> f tmp)
  }
  function _unknown[51].readThis[154353](arg _mt[154358]:_MT[238], arg this[154355] :
  chpl_taskID_t, arg f[154351]:_any[178](?)) : _unknown[51] throws "method" "no doc"
  {
    { scopeless
      unknown tmp[154364](154363 call uint[115] 64)
      (154367 'end of statement')
    }
    (154371 call <~> f tmp)
    (154379 call = this(154377 call _cast chpl_taskID_t tmp))
  }
  function _unknown[51].writeThis[154389](arg _mt[154394]:_MT[238], arg this[154391] :
  nothing[7], arg f[154387]:_any[178](?)) : _unknown[51] "method" "no doc"
  {
  }
  function _unknown[51].readWriteThis[154404](arg _mt[154409]:_MT[238], arg this[154406] :
  _tuple, arg f[154402]:_any[178](?)) : _unknown[51] throws "method" "no doc"
  {
    { scopeless
      unknown st[154418](154417 call(154412 call . f c"styleElement") QIO_STYLE_ELEMENT_TUPLE)
      (154421 'end of statement')
    }
    { scopeless
      unknown start[154424] ioLiteral
      (154427 'end of statement')
    }
    { scopeless
      unknown comma[154429] ioLiteral
      (154432 'end of statement')
    }
    { scopeless
      unknown end[154434] ioLiteral
      (154437 'end of statement')
    }
    { scopeless
      unknown binary[154444](154443 call(154439 call . f c"binary"))
      (154447 'end of statement')
    }
    if(154576 call _cond_test(154450 call == st QIO_TUPLE_FORMAT_SPACE))
    {
      (154474 call = start(154453 'new'(154473 call ioLiteral "")))
      (154484 call = comma(154479 'new'(154483 call ioLiteral " ")))
      (154509 call = end(154488 'new'(154508 call ioLiteral "")))
    }
    {
      { scopeless
        if(154572 call _cond_test(154514 call == st QIO_TUPLE_FORMAT_JSON))
        {
          (154522 call = start(154517 'new'(154521 call ioLiteral "[")))
          (154532 call = comma(154527 'new'(154531 call ioLiteral ", ")))
          (154541 call = end(154536 'new'(154540 call ioLiteral "]")))
        }
        {
          (154550 call = start(154545 'new'(154549 call ioLiteral "(")))
          (154560 call = comma(154555 'new'(154559 call ioLiteral ", ")))
          (154569 call = end(154564 'new'(154568 call ioLiteral ")")))
        }
      }
    }
    if(154590 call _cond_test(154582 call ! binary))
    {
      (154586 call <~> f start)
    }
    if(154673 call _cond_test(154596 call != size 0))
    {
      (154603 call <~> f(154602 call this 0))
      {
        unknown i[154636] 0
        unknown tmp[154637] "maybe param" "temp"
        (154649 'move' tmp[154637](154647 call chpl_compute_low_param_loop_bound 1(154610 call - size 1)))
        unknown tmp[154638] "maybe param" "temp"
        (154659 'move' tmp[154638](154657 call chpl_compute_high_param_loop_bound 1(154654 call - size 1)))
        unknown tmp[154639] "maybe param" "temp"
        (154662 'move' tmp[154639] 1)
        ParamForLoop[154664]
        { i[154636] tmp[154637] tmp[154638] tmp[154639]
          {
            if(154623 call _cond_test(154615 call ! binary))
            {
              (154619 call <~> f comma)
            }
            (154633 call <~> f(154632 call this i))
          }
        }
        label _unused_continueLabel[154641]
        label _breakLabel[154640]
      }
    }
    if(154686 call _cond_test(154678 call ! binary))
    {
      (154682 call <~> f end)
    }
  }
  function _unknown[51].writeThis[154697](arg _mt[154702]:_MT[238], arg this[154699] :
  range, arg f[154695]:_any[178](?)) : _unknown[51] throws "method" "no doc"
  {
    { scopeless
      unknown alignCheckRange[154705] this
      (154708 'end of statement')
    }
    if(154722 call _cond_test(154711 call . f c"writing"))
    {
      (154719 call(154715 call . alignCheckRange c"normalizeAlignment"))
    }
    if(154734 call _cond_test(154728 call hasLowBound))
    {
      { scopeless
        (154731 call <~> f low)
      }
    }
    (154745 call <~> f(154740 'new'(154744 call ioLiteral "..")))
    if(154756 call _cond_test(154750 call hasHighBound))
    {
      { scopeless
        (154753 call <~> f high)
      }
    }
    if(154777 call _cond_test(154763 call != stride 1))
    {
      { scopeless
        (154774 call <~>(154771 call <~> f(154766 'new'(154770 call ioLiteral " by "))) stride)
      }
    }
    if(154815 call _cond_test(154791 call &&(154788 call !(154787 call(154783 call . alignCheckRange c"isNaturallyAligned"))) aligned))
    {
      { scopeless
        (154812 call <~>(154799 call <~> f(154794 'new'(154798 call ioLiteral " align ")))(154811 call chpl_intToIdx(154809 call chpl__mod(154806 call chpl__idxToInt alignment) stride)))
      }
    }
  }
  function _unknown[51].readThis[154827](arg _mt[154832]:_MT[238], ref arg this[154829] :
  range, arg f[154825]:_any[178](?)) : _unknown[51] throws "method" "no doc"
  {
    if(154842 call _cond_test(154836 call hasLowBound))
    {
      { scopeless
        (154839 call <~> f _low)
      }
    }
    (154854 call <~> f(154849 'new'(154853 call ioLiteral "..")))
    if(154865 call _cond_test(154859 call hasHighBound))
    {
      { scopeless
        (154862 call <~> f _high)
      }
    }
    if(154886 call _cond_test(154872 call != stride 1))
    {
      { scopeless
        (154883 call <~>(154880 call <~> f(154875 'new'(154879 call ioLiteral " by "))) stride)
      }
    }
    Try
    {
      {
        (154897 call <~> f(154892 'new'(154896 call ioLiteral " align ")))
        if(154944 call _cond_test stridable)
        {
          { scopeless
            unknown a[154903] intIdxType
            (154906 'end of statement')
          }
          (154910 call <~> f a)
          (154915 call = _alignment a)
        }
        {
          (154941 'throw'(154920 'new'(_chpl_manager = _owned[30](?))(154940 call BadFormatError "Range is not stridable, cannot store alignment")))
        }
      }
    }
    Catch err : BadFormatError
    {
    }
  }
  function _unknown[51].writeThis[154963](arg _mt[154968]:_MT[238], arg this[154965] :
  LocaleModel, arg f[154961]:_any[178](?)) : _unknown[51] throws "method" "no doc" "method overrides"
  {
    (154997 call <~>(154992 call <~> f(154971 'new'(154991 call ioLiteral "LOCALE")))(154996 call chpl_id))
  }
  function _unknown[51].writeThis[155008](arg _mt[155013]:_MT[238], arg this[155010] :
  Error, arg f[155006]:_any[178](?)) : _unknown[51] throws "method" "no doc" "method overrides"
  {
    { scopeless
      unknown description[155019](155018 call chpl_describe_error this)
      (155022 'end of statement')
    }
    (155026 call <~> f description)
  }
  function write[155038](const arg args[155035]:_any[178](?) ...) : _unknown[51]
  {
    Try!
    {
      {
        (155047 call(155041 call . stdout c"write")(155045 'expand_tuple' args))
      }
    }
  }
  function writeln[155061](const arg args[155058]:_any[178](?) ...) : _unknown[51]
  {
    Try!
    {
      {
        (155070 call(155064 call . stdout c"writeln")(155068 'expand_tuple' args))
      }
    }
  }
  function writeln[155079]() : _unknown[51] "no doc"
  {
    Try!
    {
      {
        (155086 call(155082 call . stdout c"writeln"))
      }
    }
  }
  function writef[155100](arg fmt[155097] :
  unknown t[155095], const arg args[155104]:_any[178](?) ...) : _unknown[51]
  {
    Try!
    {
      {
        (155127 return(155126 call(155119 call . stdout c"writef") fmt(155125 'expand_tuple' args)))
      }
    }
  }
  where {
    (155116 call ||(155111 call isStringType t)(155115 call isBytesType t))
  }
  { scopeless type
    bool[10]
  }
  function writef[155145](arg fmt[155142] :
  unknown t[155140]) : _unknown[51] "no doc"
  {
    Try!
    {
      {
        (155165 return(155164 call(155159 call . stdout c"writef") fmt))
      }
    }
  }
  where {
    (155156 call ||(155151 call isStringType t)(155155 call isBytesType t))
  }
  { scopeless type
    bool[10]
  }
  function _cast[155180](arg t[155178]:_any[178](?), arg x[155182]:_any[178](?)) : _unknown[51] "last resort" "no doc"
  {
    (155201 return(155200 call stringify x))
  }
  where {
    (155195 call &&(155186 call == t string[26])(155193 call !(155192 call isPrimitiveType(155190 'typeof' x))))
  }
}