AST dump for ChapelHashing after pass buildDefaultFunctions.
Module use list: ChapelBase Reflection 

{
  function chpl__init_ChapelHashing[416112]() : void[4] "insert line file info" "module init"
  {
    (520989 return _void[55])
  }
  function chpl__defaultHashWrapper[155418](arg x[155416]:_any[178](?)) : _unknown[51]
  {
    unknown ret[520790] "RVV" "temp"
    unknown call_tmp[672394] "maybe param" "maybe type" "temp"
    (672397 'move' call_tmp[672394](155424 call chpl__defaultHash x[155416]))
    const hash[155425] "dead at end of block" "const" "insert auto destroy"
    (544077 'init var' hash[155425] call_tmp[672394])
    (155428 'end of statement')
    unknown call_tmp[672399] "expr temp" "maybe param" "maybe type" "temp"
    (672402 'move' call_tmp[672399](155434 call max int(64)[13]))
    unknown call_tmp[672404] "expr temp" "maybe param" "maybe type" "temp"
    (672407 'move' call_tmp[672404](155435 call & hash[155425] call_tmp[672399]))
    unknown call_tmp[672409] "expr temp" "maybe param" "maybe type" "temp"
    (672412 'move' call_tmp[672409](155438 call _cast int(64)[13] call_tmp[672404]))
    (520796 'move' ret[520790](520795 'coerce' call_tmp[672409] int(64)[13]))
    gotoReturn _end_chpl__defaultHashWrapper[520788] _end_chpl__defaultHashWrapper[520788]
    (482111 'end of statement' hash[155425])
    label _end_chpl__defaultHashWrapper[520788]
    (520792 return ret[520790])
  }
  { scopeless type
    int(64)[13]
  }
  function _gen_key[155451](arg i[155448]:uint(64)[115]) : _unknown[51]
  {
    unknown ret[520802] "RVV" "temp"
    unknown key[155455] "dead at end of block" "insert auto destroy"
    (544079 'init var' key[155455] i[155448])
    (155458 'end of statement')
    unknown call_tmp[672414] "expr temp" "maybe param" "maybe type" "temp"
    (672417 'move' call_tmp[672414](155462 call ~ key[155455]))
    unknown call_tmp[672419] "expr temp" "maybe param" "maybe type" "temp"
    (672422 'move' call_tmp[672419](155466 call << key[155455] 21))
    unknown call_tmp[672424] "expr temp" "maybe param" "maybe type" "temp"
    (672427 'move' call_tmp[672424](155468 call + call_tmp[672414] call_tmp[672419]))
    (155470 call = key[155455] call_tmp[672424])
    (482113 'end of statement' key[155455] key[155455] key[155455])
    unknown call_tmp[672429] "expr temp" "maybe param" "maybe type" "temp"
    (672432 'move' call_tmp[672429](155477 call >> key[155455] 24))
    unknown call_tmp[672434] "expr temp" "maybe param" "maybe type" "temp"
    (672437 'move' call_tmp[672434](155479 call ^ key[155455] call_tmp[672429]))
    (155481 call = key[155455] call_tmp[672434])
    (482117 'end of statement' key[155455] key[155455] key[155455])
    unknown call_tmp[672439] "expr temp" "maybe param" "maybe type" "temp"
    (672442 'move' call_tmp[672439](155488 call << key[155455] 3))
    unknown call_tmp[672444] "expr temp" "maybe param" "maybe type" "temp"
    (672447 'move' call_tmp[672444](155490 call + key[155455] call_tmp[672439]))
    unknown call_tmp[672449] "expr temp" "maybe param" "maybe type" "temp"
    (672452 'move' call_tmp[672449](155494 call << key[155455] 8))
    unknown call_tmp[672454] "expr temp" "maybe param" "maybe type" "temp"
    (672457 'move' call_tmp[672454](155496 call + call_tmp[672444] call_tmp[672449]))
    (155498 call = key[155455] call_tmp[672454])
    (482121 'end of statement' key[155455] key[155455] key[155455] key[155455])
    unknown call_tmp[672459] "expr temp" "maybe param" "maybe type" "temp"
    (672462 'move' call_tmp[672459](155505 call >> key[155455] 14))
    unknown call_tmp[672464] "expr temp" "maybe param" "maybe type" "temp"
    (672467 'move' call_tmp[672464](155507 call ^ key[155455] call_tmp[672459]))
    (155509 call = key[155455] call_tmp[672464])
    (482126 'end of statement' key[155455] key[155455] key[155455])
    unknown call_tmp[672469] "expr temp" "maybe param" "maybe type" "temp"
    (672472 'move' call_tmp[672469](155516 call << key[155455] 2))
    unknown call_tmp[672474] "expr temp" "maybe param" "maybe type" "temp"
    (672477 'move' call_tmp[672474](155518 call + key[155455] call_tmp[672469]))
    unknown call_tmp[672479] "expr temp" "maybe param" "maybe type" "temp"
    (672482 'move' call_tmp[672479](155522 call << key[155455] 4))
    unknown call_tmp[672484] "expr temp" "maybe param" "maybe type" "temp"
    (672487 'move' call_tmp[672484](155524 call + call_tmp[672474] call_tmp[672479]))
    (155526 call = key[155455] call_tmp[672484])
    (482130 'end of statement' key[155455] key[155455] key[155455] key[155455])
    unknown call_tmp[672489] "expr temp" "maybe param" "maybe type" "temp"
    (672492 'move' call_tmp[672489](155533 call >> key[155455] 28))
    unknown call_tmp[672494] "expr temp" "maybe param" "maybe type" "temp"
    (672497 'move' call_tmp[672494](155535 call ^ key[155455] call_tmp[672489]))
    (155537 call = key[155455] call_tmp[672494])
    (482135 'end of statement' key[155455] key[155455] key[155455])
    unknown call_tmp[672499] "expr temp" "maybe param" "maybe type" "temp"
    (672502 'move' call_tmp[672499](155544 call << key[155455] 31))
    unknown call_tmp[672504] "expr temp" "maybe param" "maybe type" "temp"
    (672507 'move' call_tmp[672504](155546 call + key[155455] call_tmp[672499]))
    (155548 call = key[155455] call_tmp[672504])
    (482139 'end of statement' key[155455] key[155455] key[155455])
    (520808 'move' ret[520802](520807 'coerce' key[155455] uint(64)[115]))
    gotoReturn _end__gen_key[520800] _end__gen_key[520800]
    (482143 'end of statement' key[155455])
    label _end__gen_key[520800]
    (520804 return ret[520802])
  }
  { scopeless type
    uint(64)[115]
  }
  function _gen_key[155563](arg i[155560]:int(64)[13]) : _unknown[51]
  {
    unknown ret[520814] "RVV" "temp"
    unknown call_tmp[672509] "expr temp" "maybe param" "maybe type" "temp"
    (672512 'move' call_tmp[672509](155569 call _cast uint(64)[115] i[155560]))
    unknown call_tmp[672514] "expr temp" "maybe param" "maybe type" "temp"
    (672517 'move' call_tmp[672514](155572 call _gen_key call_tmp[672509]))
    (520820 'move' ret[520814](520819 'coerce' call_tmp[672514] uint(64)[115]))
    (520816 return ret[520814])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHashCombine[155585](arg a[155582]:uint(64)[115], arg b[155588]:uint(64)[115], arg fieldnum[155592]:int(64)[13]) : _unknown[51] "inline"
  {
    unknown ret[520830] "RVV" "temp"
    function chpl_bitops_rotl_64[155605](arg x[155602] :
    (155601 call uint(64)[115] 64), arg n[155611] :
    (155610 call uint(64)[115] 64)) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[520824] "RVV" "temp"
      (520826 return ret[520824])
    }
    { scopeless type
      (155617 call uint(64)[115] 64)
    }
    unknown call_tmp[672519] "expr temp" "maybe param" "maybe type" "temp"
    (672522 'move' call_tmp[672519](155625 call + 17 fieldnum[155592]))
    unknown call_tmp[672524] "maybe param" "maybe type" "temp"
    (672527 'move' call_tmp[672524](155628 call _cast uint(64)[115] call_tmp[672519]))
    unknown n[155630] "dead at end of block" "insert auto destroy"
    (544081 'init var' n[155630] call_tmp[672524] uint(64)[115])
    (155633 'end of statement')
    unknown call_tmp[672529] "expr temp" "maybe param" "maybe type" "temp"
    (672532 'move' call_tmp[672529](155640 call chpl_bitops_rotl_64 b[155588] n[155630]))
    unknown call_tmp[672534] "expr temp" "maybe param" "maybe type" "temp"
    (672537 'move' call_tmp[672534](155641 call ^ a[155582] call_tmp[672529]))
    unknown call_tmp[672539] "expr temp" "maybe param" "maybe type" "temp"
    (672542 'move' call_tmp[672539](155644 call _gen_key call_tmp[672534]))
    (520836 'move' ret[520830](520835 'coerce' call_tmp[672539] uint(64)[115]))
    gotoReturn _end_chpl__defaultHashCombine[520828] _end_chpl__defaultHashCombine[520828]
    (482146 'end of statement' n[155630])
    label _end_chpl__defaultHashCombine[520828]
    (520832 return ret[520830])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155656](arg b[155653]:bool[10]) : _unknown[51] "inline"
  {
    unknown ret[520842] "RVV" "temp"
    unknown call_tmp[672544] "expr temp" "maybe param" "maybe type" "temp"
    (672547 'move' call_tmp[672544](155666 call _cond_test b[155653]))
    if call_tmp[672544]
    {
      (520848 'move' ret[520842](520847 'coerce' 0 uint(64)[115]))
      gotoReturn _end_chpl__defaultHash[520840] _end_chpl__defaultHash[520840]
    }
    {
      (520854 'move' ret[520842](520853 'coerce' 1 uint(64)[115]))
      gotoReturn _end_chpl__defaultHash[520840] _end_chpl__defaultHash[520840]
    }
    label _end_chpl__defaultHash[520840]
    (520844 return ret[520842])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155685](arg i[155682] :
  (155681 call int(64)[13] 64)) : _unknown[51] "inline"
  {
    unknown ret[520860] "RVV" "temp"
    unknown call_tmp[672549] "expr temp" "maybe param" "maybe type" "temp"
    (672552 'move' call_tmp[672549](155691 call _gen_key i[155682]))
    (520866 'move' ret[520860](520865 'coerce' call_tmp[672549] uint(64)[115]))
    (520862 return ret[520860])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155707](arg u[155704] :
  (155703 call uint(64)[115] 64)) : _unknown[51] "inline"
  {
    unknown ret[520870] "RVV" "temp"
    unknown call_tmp[672554] "expr temp" "maybe param" "maybe type" "temp"
    (672557 'move' call_tmp[672554](155713 call _gen_key u[155704]))
    (520876 'move' ret[520870](520875 'coerce' call_tmp[672554] uint(64)[115]))
    (520872 return ret[520870])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155724](arg e[155722]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[520880] "RVV" "temp"
    unknown call_tmp[672559] "expr temp" "maybe param" "maybe type" "temp"
    (672562 'move' call_tmp[672559](155734 call chpl__enumToOrder e[155722]))
    unknown call_tmp[672564] "expr temp" "maybe param" "maybe type" "temp"
    (672567 'move' call_tmp[672564](155736 call _gen_key call_tmp[672559]))
    (520885 'move' ret[520880](520884 'deref' call_tmp[672564]))
    (520882 return ret[520880])
  }
  where {
    (155729 call isEnum e[155722])
  }
  function chpl__defaultHash[155749](arg f[155746]:real(64)[16]) : _unknown[51] "inline"
  {
    unknown ret[520889] "RVV" "temp"
    unknown call_tmp[672569] "expr temp" "maybe param" "maybe type" "temp"
    (672572 'move' call_tmp[672569](155772 'real2int' f[155746]))
    unknown call_tmp[672574] "expr temp" "maybe param" "maybe type" "temp"
    (672577 'move' call_tmp[672574](155774 call _gen_key call_tmp[672569]))
    (520895 'move' ret[520889](520894 'coerce' call_tmp[672574] uint(64)[115]))
    (520891 return ret[520889])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155787](arg c[155784]:complex(128)[140]) : _unknown[51] "inline"
  {
    unknown ret[520899] "RVV" "temp"
    unknown call_tmp[672581] "expr temp" "maybe param" "maybe type" "temp"
    (672584 'move' call_tmp[672581](155794 call re _mt[243] c[155784]))
    unknown call_tmp[672586] "expr temp" "maybe param" "maybe type" "temp"
    (672589 'move' call_tmp[672586](155797 'real2int' call_tmp[672581]))
    unknown call_tmp[672593] "expr temp" "maybe param" "maybe type" "temp"
    (672596 'move' call_tmp[672593](155801 call im _mt[243] c[155784]))
    unknown call_tmp[672598] "expr temp" "maybe param" "maybe type" "temp"
    (672601 'move' call_tmp[672598](155804 'real2int' call_tmp[672593]))
    unknown call_tmp[672603] "expr temp" "maybe param" "maybe type" "temp"
    (672606 'move' call_tmp[672603](155805 call ^ call_tmp[672586] call_tmp[672598]))
    unknown call_tmp[672608] "expr temp" "maybe param" "maybe type" "temp"
    (672611 'move' call_tmp[672608](155808 call _gen_key call_tmp[672603]))
    (520905 'move' ret[520899](520904 'coerce' call_tmp[672608] uint(64)[115]))
    (520901 return ret[520899])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155821](arg a[155818]:imag(64)[130]) : _unknown[51] "inline"
  {
    unknown ret[520909] "RVV" "temp"
    unknown call_tmp[672613] "expr temp" "maybe param" "maybe type" "temp"
    (672616 'move' call_tmp[672613](155830 call _i2r a[155818]))
    unknown call_tmp[672618] "expr temp" "maybe param" "maybe type" "temp"
    (672621 'move' call_tmp[672618](155831 'real2int' call_tmp[672613]))
    unknown call_tmp[672623] "expr temp" "maybe param" "maybe type" "temp"
    (672626 'move' call_tmp[672623](155833 call _gen_key call_tmp[672618]))
    (520915 'move' ret[520909](520914 'coerce' call_tmp[672623] uint(64)[115]))
    (520911 return ret[520909])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155846](arg u[155843]:chpl_taskID_t[163]) : _unknown[51] "inline"
  {
    unknown ret[520919] "RVV" "temp"
    unknown call_tmp[672628] "expr temp" "maybe param" "maybe type" "temp"
    (672631 'move' call_tmp[672628](155854 call int(64)[13] 64))
    unknown call_tmp[672633] "expr temp" "maybe param" "maybe type" "temp"
    (672636 'move' call_tmp[672633](155855 call _cast call_tmp[672628] u[155843]))
    unknown call_tmp[672638] "expr temp" "maybe param" "maybe type" "temp"
    (672641 'move' call_tmp[672638](155858 call _gen_key call_tmp[672633]))
    (520925 'move' ret[520919](520924 'coerce' call_tmp[672638] uint(64)[115]))
    (520921 return ret[520919])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155873](arg l[155870]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[520929] "RVV" "temp"
    unknown hash[155878] "dead at end of block" "insert auto destroy"
    (544083 'init var' hash[155878] 0 uint(64)[115])
    (155881 'end of statement')
    unknown i[155884] "dead at end of block" "insert auto destroy"
    (544085 'init var' i[155884] 1)
    (155887 'end of statement')
    {
      unknown _indexOfInterest[155909] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[155910] "expr temp" "temp"
      (155919 'move' _iterator[155910](155917 call _getIterator l[155870]))
      Defer
      {
        {
          (155935 call _freeIterator _iterator[155910])
        }
      }
      { scopeless type
        (155924 'move' _indexOfInterest[155909](155921 call iteratorIndex _iterator[155910]))
      }
      ForLoop[155911]
      {
        unknown obj[155928] "index var" "insert auto destroy"
        (482158 'end of statement')
        (155930 'move' obj[155928] _indexOfInterest[155909])
        (482159 'end of statement' obj[155928])
        {
          unknown call_tmp[672643] "expr temp" "maybe param" "maybe type" "temp"
          (672646 'move' call_tmp[672643](155895 call chpl__defaultHash obj[155928]))
          unknown call_tmp[672648] "expr temp" "maybe param" "maybe type" "temp"
          (672651 'move' call_tmp[672648](155899 call chpl__defaultHashCombine call_tmp[672643] hash[155878] i[155884]))
          (155900 call = hash[155878] call_tmp[672648])
          (482161 'end of statement' hash[155878] obj[155928] hash[155878] i[155884])
          (155906 call += i[155884] 1)
          (482166 'end of statement' i[155884])
        }
        label _continueLabel[155914]
        _indexOfInterest[155909]
        _iterator[155910]
      }
      label _breakLabel[155915]
    }
    (520935 'move' ret[520929](520934 'coerce' hash[155878] uint(64)[115]))
    gotoReturn _end_chpl__defaultHash[520927] _end_chpl__defaultHash[520927]
    (482168 'end of statement' hash[155878])
    label _end_chpl__defaultHash[520927]
    (520931 return ret[520929])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155956](arg o[155953]:borrowed object?[415453]) : _unknown[51] "inline"
  {
    unknown ret[520941] "RVV" "temp"
    unknown call_tmp[672653] "expr temp" "maybe param" "maybe type" "temp"
    (672656 'move' call_tmp[672653](155979 'object2int' o[155953]))
    unknown call_tmp[672658] "expr temp" "maybe param" "maybe type" "temp"
    (672661 'move' call_tmp[672658](155981 call _gen_key call_tmp[672653]))
    (520947 'move' ret[520941](520946 'coerce' call_tmp[672658] uint(64)[115]))
    (520943 return ret[520941])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155994](arg l[155991]:locale[28]) : _unknown[51] "inline"
  {
    unknown ret[520951] "RVV" "temp"
    unknown call_tmp[672665] "expr temp" "maybe param" "maybe type" "temp"
    (672668 'move' call_tmp[672665](156001 call _value _mt[243] l[155991]))
    unknown call_tmp[672670] "expr temp" "maybe param" "maybe type" "temp"
    (672673 'move' call_tmp[672670](156004 'object2int' call_tmp[672665]))
    unknown call_tmp[672675] "expr temp" "maybe param" "maybe type" "temp"
    (672678 'move' call_tmp[672675](156006 call _gen_key call_tmp[672670]))
    (520957 'move' ret[520951](520956 'coerce' call_tmp[672675] uint(64)[115]))
    (520953 return ret[520951])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[156019](arg r[156016]:range[64319](?)) : _unknown[51] "inline"
  {
    unknown ret[520961] "RVV" "temp"
    unknown ret[156027] "dead at end of block" "insert auto destroy"
    (544087 'default init var' ret[156027] uint(64)[115])
    (156030 'end of statement')
    {
      unknown i[156125] "dead at end of block" "insert auto destroy"
      (544089 'init var' i[156125] 0)
      (482172 'end of statement')
      unknown tmp[156126] "maybe param" "temp"
      unknown call_tmp[672680] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (672683 'move' call_tmp[672680](156034 'typeof' r[156016]))
      unknown call_tmp[672685] "expr temp" "maybe param" "maybe type" "temp"
      (672688 'move' call_tmp[672685](156036 call numImplementationFields call_tmp[672680]))
      (156138 'move' tmp[156126](156136 call chpl_compute_low_param_loop_bound 1 call_tmp[672685]))
      unknown tmp[156127] "maybe param" "temp"
      unknown call_tmp[672690] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (672693 'move' call_tmp[672690](156144 'typeof' r[156016]))
      unknown call_tmp[672695] "expr temp" "maybe param" "maybe type" "temp"
      (672698 'move' call_tmp[672695](156143 call numImplementationFields call_tmp[672690]))
      (156148 'move' tmp[156127](156146 call chpl_compute_high_param_loop_bound 1 call_tmp[672695]))
      unknown tmp[156128] "maybe param" "temp"
      (156151 'move' tmp[156128] 1)
      ParamForLoop[156153]
      { i[156125] tmp[156126] tmp[156127] tmp[156128]
        {
          unknown tmp[427709] "maybe param" "temp"
          unknown tmp[427730] "maybe param" "temp"
          unknown call_tmp[672700] "expr temp" "maybe param" "maybe type" "temp"
          (672703 'move' call_tmp[672700](156044 call getImplementationField r[156016] i[156125]))
          unknown call_tmp[672705] "expr temp" "maybe param" "maybe type" "temp"
          (672708 'move' call_tmp[672705](156046 call isParam call_tmp[672700]))
          (427741 'move' tmp[427730](156048 call == call_tmp[672705] 0))
          unknown call_tmp[672710] "expr temp" "maybe param" "maybe type" "temp"
          (672713 'move' call_tmp[672710](427743 call _cond_invalid tmp[427730]))
          if call_tmp[672710]
          {
            (427746 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[569546] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[569547] "maybe param" "temp"
          unknown call_tmp[672715] "expr temp" "maybe param" "maybe type" "temp"
          (672718 'move' call_tmp[672715](427731 call isTrue tmp[427730]))
          (569552 'move' tmp[569547](569550 call _cond_test call_tmp[672715]))
          if tmp[569547]
          {
            unknown tmp[569554] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[672720] "expr temp" "maybe param" "maybe type" "temp"
            (672723 'move' call_tmp[672720](156055 call getImplementationField r[156016] i[156125]))
            unknown call_tmp[672725] "expr temp" "maybe param" "maybe type" "temp"
            (672728 'move' call_tmp[672725](156057 call isType call_tmp[672720]))
            unknown call_tmp[672730] "expr temp" "maybe param" "maybe type" "temp"
            (672733 'move' call_tmp[672730](156059 call == call_tmp[672725] 0))
            (569556 'move' tmp[569554](427734 call isTrue call_tmp[672730]))
            (569561 'move' tmp[569546](569558 '_paramFoldLogical' tmp[569547] tmp[569554]))
          }
          {
            (569566 'move' tmp[569546](569563 '_paramFoldLogical' tmp[569547] 0))
          }
          (427720 'move' tmp[427709] tmp[569546])
          unknown call_tmp[672735] "expr temp" "maybe param" "maybe type" "temp"
          (672738 'move' call_tmp[672735](427722 call _cond_invalid tmp[427709]))
          if call_tmp[672735]
          {
            (427725 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[569573] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[569574] "maybe param" "temp"
          unknown call_tmp[672740] "expr temp" "maybe param" "maybe type" "temp"
          (672743 'move' call_tmp[672740](427710 call isTrue tmp[427709]))
          (569579 'move' tmp[569574](569577 call _cond_test call_tmp[672740]))
          if tmp[569574]
          {
            { scopeless type
              unknown call_type_tmp[492469] "expr temp" "maybe type" "temp" "type variable"
              unknown call_tmp[672745] "expr temp" "maybe param" "maybe type" "temp"
              (672748 'move' call_tmp[672745](156068 call getImplementationField r[156016] i[156125]))
              (492473 'move' call_type_tmp[492469](156069 'typeof' call_tmp[672745]))
            }
            unknown tmp[569581] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[672750] "expr temp" "maybe param" "maybe type" "temp"
            (672753 'move' call_tmp[672750](156071 call isNothingType call_type_tmp[492469]))
            unknown call_tmp[672755] "expr temp" "maybe param" "maybe type" "temp"
            (672758 'move' call_tmp[672755](156073 call == call_tmp[672750] 0))
            (569583 'move' tmp[569581](427713 call isTrue call_tmp[672755]))
            (569588 'move' tmp[569573](569585 '_paramFoldLogical' tmp[569574] tmp[569581]))
          }
          {
            (569593 'move' tmp[569573](569590 '_paramFoldLogical' tmp[569574] 0))
          }
          unknown call_tmp[672760] "expr temp" "maybe param" "maybe type" "temp"
          (672763 'move' call_tmp[672760](156120 call _cond_test tmp[569573]))
          if call_tmp[672760]
          {
            const field[156082] "dead at end of block" "const" "ref var"
            unknown call_tmp[672765] "expr temp" "maybe param" "maybe type" "temp"
            (672768 'move' call_tmp[672765](156081 call getImplementationField r[156016] i[156125]))
            (544092 'move' field[156082](544091 'addr of' call_tmp[672765]))
            (156085 'end of statement')
            unknown call_tmp[672770] "maybe param" "maybe type" "temp"
            (672773 'move' call_tmp[672770](156090 call chpl__defaultHash field[156082]))
            const fieldHash[156091] "dead at end of block" "const" "insert auto destroy"
            (544094 'init var' fieldHash[156091] call_tmp[672770])
            (156094 'end of statement' i[156125] field[156082])
            unknown call_tmp[672775] "expr temp" "maybe param" "maybe type" "temp"
            (672778 'move' call_tmp[672775](156097 call == i[156125] 1))
            unknown call_tmp[672780] "expr temp" "maybe param" "maybe type" "temp"
            (672783 'move' call_tmp[672780](156114 call _cond_test call_tmp[672775]))
            if call_tmp[672780]
            {
              (156101 call = ret[156027] fieldHash[156091])
              (482177 'end of statement' ret[156027] fieldHash[156091])
            }
            {
              unknown call_tmp[672785] "expr temp" "maybe param" "maybe type" "temp"
              (672788 'move' call_tmp[672785](156110 call chpl__defaultHashCombine fieldHash[156091] ret[156027] i[156125]))
              (156111 call = ret[156027] call_tmp[672785])
              (482180 'end of statement' ret[156027] fieldHash[156091] ret[156027] i[156125])
            }
          }
        }
      }
      label _unused_continueLabel[156130]
      label _breakLabel[156129]
    }
    (520967 'move' ret[520961](520966 'coerce' ret[156027] uint(64)[115]))
    gotoReturn _end_chpl__defaultHash[520959] _end_chpl__defaultHash[520959]
    (482185 'end of statement' ret[156027])
    label _end_chpl__defaultHash[520959]
    (520963 return ret[520961])
    (355254 'used modules list'(156023 'use' Reflection[224970]))
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__validDefaultAssocDomIdxType[156172](arg idxType[156170]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[520973] "RVV" "param" "temp"
    (520978 'move' ret[520973](520977 'deref' 0))
    (520975 return ret[520973])
  }
  function chpl__validDefaultAssocDomIdxType[156184](arg idxType[156182]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[520982] "RVV" "param" "temp"
    (520987 'move' ret[520982](520986 'deref' 1))
    (520984 return ret[520982])
  }
  where {
    unknown tmp[427751] "maybe param" "temp"
    unknown tmp[427772] "maybe param" "temp"
    unknown tmp[427793] "maybe param" "temp"
    unknown tmp[427814] "maybe param" "temp"
    unknown tmp[427835] "maybe param" "temp"
    unknown tmp[427856] "maybe param" "temp"
    unknown tmp[427877] "maybe param" "temp"
    unknown tmp[427898] "maybe param" "temp"
    unknown tmp[427919] "maybe param" "temp"
    unknown tmp[427940] "maybe param" "temp"
    unknown tmp[427961] "maybe param" "temp"
    unknown tmp[427982] "maybe param" "temp"
    unknown tmp[428003] "maybe param" "temp"
    (428014 'move' tmp[428003](156189 call isBoolType idxType[156182]))
    unknown call_tmp[672790] "expr temp" "maybe param" "maybe type" "temp"
    (672793 'move' call_tmp[672790](428016 call _cond_invalid tmp[428003]))
    if call_tmp[672790]
    {
      (428019 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569600] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569601] "maybe param" "temp"
    unknown call_tmp[672795] "expr temp" "maybe param" "maybe type" "temp"
    (672798 'move' call_tmp[672795](428004 call isTrue tmp[428003]))
    (569606 'move' tmp[569601](569604 call _cond_test call_tmp[672795]))
    if tmp[569601]
    {
      (569611 'move' tmp[569600](569608 '_paramFoldLogical' tmp[569601] 1))
    }
    {
      unknown tmp[569613] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672800] "expr temp" "maybe param" "maybe type" "temp"
      (672803 'move' call_tmp[672800](156193 call isIntType idxType[156182]))
      (569615 'move' tmp[569613](428008 call isTrue call_tmp[672800]))
      (569620 'move' tmp[569600](569617 '_paramFoldLogical' tmp[569601] tmp[569613]))
    }
    (427993 'move' tmp[427982] tmp[569600])
    unknown call_tmp[672805] "expr temp" "maybe param" "maybe type" "temp"
    (672808 'move' call_tmp[672805](427995 call _cond_invalid tmp[427982]))
    if call_tmp[672805]
    {
      (427998 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569627] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569628] "maybe param" "temp"
    unknown call_tmp[672810] "expr temp" "maybe param" "maybe type" "temp"
    (672813 'move' call_tmp[672810](427983 call isTrue tmp[427982]))
    (569633 'move' tmp[569628](569631 call _cond_test call_tmp[672810]))
    if tmp[569628]
    {
      (569638 'move' tmp[569627](569635 '_paramFoldLogical' tmp[569628] 1))
    }
    {
      unknown tmp[569640] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672815] "expr temp" "maybe param" "maybe type" "temp"
      (672818 'move' call_tmp[672815](156199 call isUintType idxType[156182]))
      (569642 'move' tmp[569640](427987 call isTrue call_tmp[672815]))
      (569647 'move' tmp[569627](569644 '_paramFoldLogical' tmp[569628] tmp[569640]))
    }
    (427972 'move' tmp[427961] tmp[569627])
    unknown call_tmp[672820] "expr temp" "maybe param" "maybe type" "temp"
    (672823 'move' call_tmp[672820](427974 call _cond_invalid tmp[427961]))
    if call_tmp[672820]
    {
      (427977 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569654] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569655] "maybe param" "temp"
    unknown call_tmp[672825] "expr temp" "maybe param" "maybe type" "temp"
    (672828 'move' call_tmp[672825](427962 call isTrue tmp[427961]))
    (569660 'move' tmp[569655](569658 call _cond_test call_tmp[672825]))
    if tmp[569655]
    {
      (569665 'move' tmp[569654](569662 '_paramFoldLogical' tmp[569655] 1))
    }
    {
      unknown tmp[569667] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672830] "expr temp" "maybe param" "maybe type" "temp"
      (672833 'move' call_tmp[672830](156205 call isRealType idxType[156182]))
      (569669 'move' tmp[569667](427966 call isTrue call_tmp[672830]))
      (569674 'move' tmp[569654](569671 '_paramFoldLogical' tmp[569655] tmp[569667]))
    }
    (427951 'move' tmp[427940] tmp[569654])
    unknown call_tmp[672835] "expr temp" "maybe param" "maybe type" "temp"
    (672838 'move' call_tmp[672835](427953 call _cond_invalid tmp[427940]))
    if call_tmp[672835]
    {
      (427956 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569681] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569682] "maybe param" "temp"
    unknown call_tmp[672840] "expr temp" "maybe param" "maybe type" "temp"
    (672843 'move' call_tmp[672840](427941 call isTrue tmp[427940]))
    (569687 'move' tmp[569682](569685 call _cond_test call_tmp[672840]))
    if tmp[569682]
    {
      (569692 'move' tmp[569681](569689 '_paramFoldLogical' tmp[569682] 1))
    }
    {
      unknown tmp[569694] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672845] "expr temp" "maybe param" "maybe type" "temp"
      (672848 'move' call_tmp[672845](156211 call isImagType idxType[156182]))
      (569696 'move' tmp[569694](427945 call isTrue call_tmp[672845]))
      (569701 'move' tmp[569681](569698 '_paramFoldLogical' tmp[569682] tmp[569694]))
    }
    (427930 'move' tmp[427919] tmp[569681])
    unknown call_tmp[672850] "expr temp" "maybe param" "maybe type" "temp"
    (672853 'move' call_tmp[672850](427932 call _cond_invalid tmp[427919]))
    if call_tmp[672850]
    {
      (427935 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569708] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569709] "maybe param" "temp"
    unknown call_tmp[672855] "expr temp" "maybe param" "maybe type" "temp"
    (672858 'move' call_tmp[672855](427920 call isTrue tmp[427919]))
    (569714 'move' tmp[569709](569712 call _cond_test call_tmp[672855]))
    if tmp[569709]
    {
      (569719 'move' tmp[569708](569716 '_paramFoldLogical' tmp[569709] 1))
    }
    {
      unknown tmp[569721] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672860] "expr temp" "maybe param" "maybe type" "temp"
      (672863 'move' call_tmp[672860](156217 call isComplexType idxType[156182]))
      (569723 'move' tmp[569721](427924 call isTrue call_tmp[672860]))
      (569728 'move' tmp[569708](569725 '_paramFoldLogical' tmp[569709] tmp[569721]))
    }
    (427909 'move' tmp[427898] tmp[569708])
    unknown call_tmp[672865] "expr temp" "maybe param" "maybe type" "temp"
    (672868 'move' call_tmp[672865](427911 call _cond_invalid tmp[427898]))
    if call_tmp[672865]
    {
      (427914 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569735] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569736] "maybe param" "temp"
    unknown call_tmp[672870] "expr temp" "maybe param" "maybe type" "temp"
    (672873 'move' call_tmp[672870](427899 call isTrue tmp[427898]))
    (569741 'move' tmp[569736](569739 call _cond_test call_tmp[672870]))
    if tmp[569736]
    {
      (569746 'move' tmp[569735](569743 '_paramFoldLogical' tmp[569736] 1))
    }
    {
      unknown tmp[569748] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672875] "expr temp" "maybe param" "maybe type" "temp"
      (672878 'move' call_tmp[672875](156222 call == idxType[156182] chpl_taskID_t[163]))
      (569750 'move' tmp[569748](427903 call isTrue call_tmp[672875]))
      (569755 'move' tmp[569735](569752 '_paramFoldLogical' tmp[569736] tmp[569748]))
    }
    (427888 'move' tmp[427877] tmp[569735])
    unknown call_tmp[672880] "expr temp" "maybe param" "maybe type" "temp"
    (672883 'move' call_tmp[672880](427890 call _cond_invalid tmp[427877]))
    if call_tmp[672880]
    {
      (427893 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569762] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569763] "maybe param" "temp"
    unknown call_tmp[672885] "expr temp" "maybe param" "maybe type" "temp"
    (672888 'move' call_tmp[672885](427878 call isTrue tmp[427877]))
    (569768 'move' tmp[569763](569766 call _cond_test call_tmp[672885]))
    if tmp[569763]
    {
      (569773 'move' tmp[569762](569770 '_paramFoldLogical' tmp[569763] 1))
    }
    {
      unknown tmp[569775] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672890] "expr temp" "maybe param" "maybe type" "temp"
      (672893 'move' call_tmp[672890](156228 call == idxType[156182] string[26]))
      (569777 'move' tmp[569775](427882 call isTrue call_tmp[672890]))
      (569782 'move' tmp[569762](569779 '_paramFoldLogical' tmp[569763] tmp[569775]))
    }
    (427867 'move' tmp[427856] tmp[569762])
    unknown call_tmp[672895] "expr temp" "maybe param" "maybe type" "temp"
    (672898 'move' call_tmp[672895](427869 call _cond_invalid tmp[427856]))
    if call_tmp[672895]
    {
      (427872 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569789] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569790] "maybe param" "temp"
    unknown call_tmp[672900] "expr temp" "maybe param" "maybe type" "temp"
    (672903 'move' call_tmp[672900](427857 call isTrue tmp[427856]))
    (569795 'move' tmp[569790](569793 call _cond_test call_tmp[672900]))
    if tmp[569790]
    {
      (569800 'move' tmp[569789](569797 '_paramFoldLogical' tmp[569790] 1))
    }
    {
      unknown tmp[569802] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672905] "expr temp" "maybe param" "maybe type" "temp"
      (672908 'move' call_tmp[672905](156234 call == idxType[156182] bytes[24]))
      (569804 'move' tmp[569802](427861 call isTrue call_tmp[672905]))
      (569809 'move' tmp[569789](569806 '_paramFoldLogical' tmp[569790] tmp[569802]))
    }
    (427846 'move' tmp[427835] tmp[569789])
    unknown call_tmp[672910] "expr temp" "maybe param" "maybe type" "temp"
    (672913 'move' call_tmp[672910](427848 call _cond_invalid tmp[427835]))
    if call_tmp[672910]
    {
      (427851 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569816] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569817] "maybe param" "temp"
    unknown call_tmp[672915] "expr temp" "maybe param" "maybe type" "temp"
    (672918 'move' call_tmp[672915](427836 call isTrue tmp[427835]))
    (569822 'move' tmp[569817](569820 call _cond_test call_tmp[672915]))
    if tmp[569817]
    {
      (569827 'move' tmp[569816](569824 '_paramFoldLogical' tmp[569817] 1))
    }
    {
      unknown tmp[569829] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672920] "expr temp" "maybe param" "maybe type" "temp"
      (672923 'move' call_tmp[672920](156240 call == idxType[156182] c_string[19]))
      (569831 'move' tmp[569829](427840 call isTrue call_tmp[672920]))
      (569836 'move' tmp[569816](569833 '_paramFoldLogical' tmp[569817] tmp[569829]))
    }
    (427825 'move' tmp[427814] tmp[569816])
    unknown call_tmp[672925] "expr temp" "maybe param" "maybe type" "temp"
    (672928 'move' call_tmp[672925](427827 call _cond_invalid tmp[427814]))
    if call_tmp[672925]
    {
      (427830 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569843] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569844] "maybe param" "temp"
    unknown call_tmp[672930] "expr temp" "maybe param" "maybe type" "temp"
    (672933 'move' call_tmp[672930](427815 call isTrue tmp[427814]))
    (569849 'move' tmp[569844](569847 call _cond_test call_tmp[672930]))
    if tmp[569844]
    {
      (569854 'move' tmp[569843](569851 '_paramFoldLogical' tmp[569844] 1))
    }
    {
      unknown tmp[569856] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672935] "expr temp" "maybe param" "maybe type" "temp"
      (672938 'move' call_tmp[672935](156247 call isClassType idxType[156182]))
      (569858 'move' tmp[569856](427819 call isTrue call_tmp[672935]))
      (569863 'move' tmp[569843](569860 '_paramFoldLogical' tmp[569844] tmp[569856]))
    }
    (427804 'move' tmp[427793] tmp[569843])
    unknown call_tmp[672940] "expr temp" "maybe param" "maybe type" "temp"
    (672943 'move' call_tmp[672940](427806 call _cond_invalid tmp[427793]))
    if call_tmp[672940]
    {
      (427809 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569870] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569871] "maybe param" "temp"
    unknown call_tmp[672945] "expr temp" "maybe param" "maybe type" "temp"
    (672948 'move' call_tmp[672945](427794 call isTrue tmp[427793]))
    (569876 'move' tmp[569871](569874 call _cond_test call_tmp[672945]))
    if tmp[569871]
    {
      (569881 'move' tmp[569870](569878 '_paramFoldLogical' tmp[569871] 1))
    }
    {
      unknown tmp[569883] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672950] "expr temp" "maybe param" "maybe type" "temp"
      (672953 'move' call_tmp[672950](156253 call isEnumType idxType[156182]))
      (569885 'move' tmp[569883](427798 call isTrue call_tmp[672950]))
      (569890 'move' tmp[569870](569887 '_paramFoldLogical' tmp[569871] tmp[569883]))
    }
    (427783 'move' tmp[427772] tmp[569870])
    unknown call_tmp[672955] "expr temp" "maybe param" "maybe type" "temp"
    (672958 'move' call_tmp[672955](427785 call _cond_invalid tmp[427772]))
    if call_tmp[672955]
    {
      (427788 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569897] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569898] "maybe param" "temp"
    unknown call_tmp[672960] "expr temp" "maybe param" "maybe type" "temp"
    (672963 'move' call_tmp[672960](427773 call isTrue tmp[427772]))
    (569903 'move' tmp[569898](569901 call _cond_test call_tmp[672960]))
    if tmp[569898]
    {
      (569908 'move' tmp[569897](569905 '_paramFoldLogical' tmp[569898] 1))
    }
    {
      unknown tmp[569910] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672965] "expr temp" "maybe param" "maybe type" "temp"
      (672968 'move' call_tmp[672965](156259 call isTupleType idxType[156182]))
      (569912 'move' tmp[569910](427777 call isTrue call_tmp[672965]))
      (569917 'move' tmp[569897](569914 '_paramFoldLogical' tmp[569898] tmp[569910]))
    }
    (427762 'move' tmp[427751] tmp[569897])
    unknown call_tmp[672970] "expr temp" "maybe param" "maybe type" "temp"
    (672973 'move' call_tmp[672970](427764 call _cond_invalid tmp[427751]))
    if call_tmp[672970]
    {
      (427767 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569924] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569925] "maybe param" "temp"
    unknown call_tmp[672975] "expr temp" "maybe param" "maybe type" "temp"
    (672978 'move' call_tmp[672975](427752 call isTrue tmp[427751]))
    (569930 'move' tmp[569925](569928 call _cond_test call_tmp[672975]))
    if tmp[569925]
    {
      (569935 'move' tmp[569924](569932 '_paramFoldLogical' tmp[569925] 1))
    }
    {
      unknown tmp[569937] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672980] "expr temp" "maybe param" "maybe type" "temp"
      (672983 'move' call_tmp[672980](156265 call isRecordType idxType[156182]))
      (569939 'move' tmp[569937](427756 call isTrue call_tmp[672980]))
      (569944 'move' tmp[569924](569941 '_paramFoldLogical' tmp[569925] tmp[569937]))
    }
    (748529 call chpl_statementLevelSymbol tmp[569924])
  }
  (355252 'used modules list'(155411 'use' ChapelBase[307]))
}