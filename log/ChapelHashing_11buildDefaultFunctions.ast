AST dump for ChapelHashing after pass buildDefaultFunctions.
Module use list: ChapelBase Reflection 

{
  function chpl__init_ChapelHashing[416034]() : void[4] "insert line file info" "module init"
  {
    (520906 return _void[55])
  }
  function chpl__defaultHashWrapper[155418](arg x[155416]:_any[178](?)) : _unknown[51]
  {
    unknown ret[520707] "RVV" "temp"
    unknown call_tmp[672291] "maybe param" "maybe type" "temp"
    (672294 'move' call_tmp[672291](155424 call chpl__defaultHash x[155416]))
    const hash[155425] "dead at end of block" "const" "insert auto destroy"
    (543976 'init var' hash[155425] call_tmp[672291])
    (155428 'end of statement')
    unknown call_tmp[672296] "expr temp" "maybe param" "maybe type" "temp"
    (672299 'move' call_tmp[672296](155434 call max int(64)[13]))
    unknown call_tmp[672301] "expr temp" "maybe param" "maybe type" "temp"
    (672304 'move' call_tmp[672301](155435 call & hash[155425] call_tmp[672296]))
    unknown call_tmp[672306] "expr temp" "maybe param" "maybe type" "temp"
    (672309 'move' call_tmp[672306](155438 call _cast int(64)[13] call_tmp[672301]))
    (520713 'move' ret[520707](520712 'coerce' call_tmp[672306] int(64)[13]))
    gotoReturn _end_chpl__defaultHashWrapper[520705] _end_chpl__defaultHashWrapper[520705]
    (482035 'end of statement' hash[155425])
    label _end_chpl__defaultHashWrapper[520705]
    (520709 return ret[520707])
  }
  { scopeless type
    int(64)[13]
  }
  function _gen_key[155451](arg i[155448]:uint(64)[115]) : _unknown[51]
  {
    unknown ret[520719] "RVV" "temp"
    unknown key[155455] "dead at end of block" "insert auto destroy"
    (543978 'init var' key[155455] i[155448])
    (155458 'end of statement')
    unknown call_tmp[672311] "expr temp" "maybe param" "maybe type" "temp"
    (672314 'move' call_tmp[672311](155462 call ~ key[155455]))
    unknown call_tmp[672316] "expr temp" "maybe param" "maybe type" "temp"
    (672319 'move' call_tmp[672316](155466 call << key[155455] 21))
    unknown call_tmp[672321] "expr temp" "maybe param" "maybe type" "temp"
    (672324 'move' call_tmp[672321](155468 call + call_tmp[672311] call_tmp[672316]))
    (155470 call = key[155455] call_tmp[672321])
    (482037 'end of statement' key[155455] key[155455] key[155455])
    unknown call_tmp[672326] "expr temp" "maybe param" "maybe type" "temp"
    (672329 'move' call_tmp[672326](155477 call >> key[155455] 24))
    unknown call_tmp[672331] "expr temp" "maybe param" "maybe type" "temp"
    (672334 'move' call_tmp[672331](155479 call ^ key[155455] call_tmp[672326]))
    (155481 call = key[155455] call_tmp[672331])
    (482041 'end of statement' key[155455] key[155455] key[155455])
    unknown call_tmp[672336] "expr temp" "maybe param" "maybe type" "temp"
    (672339 'move' call_tmp[672336](155488 call << key[155455] 3))
    unknown call_tmp[672341] "expr temp" "maybe param" "maybe type" "temp"
    (672344 'move' call_tmp[672341](155490 call + key[155455] call_tmp[672336]))
    unknown call_tmp[672346] "expr temp" "maybe param" "maybe type" "temp"
    (672349 'move' call_tmp[672346](155494 call << key[155455] 8))
    unknown call_tmp[672351] "expr temp" "maybe param" "maybe type" "temp"
    (672354 'move' call_tmp[672351](155496 call + call_tmp[672341] call_tmp[672346]))
    (155498 call = key[155455] call_tmp[672351])
    (482045 'end of statement' key[155455] key[155455] key[155455] key[155455])
    unknown call_tmp[672356] "expr temp" "maybe param" "maybe type" "temp"
    (672359 'move' call_tmp[672356](155505 call >> key[155455] 14))
    unknown call_tmp[672361] "expr temp" "maybe param" "maybe type" "temp"
    (672364 'move' call_tmp[672361](155507 call ^ key[155455] call_tmp[672356]))
    (155509 call = key[155455] call_tmp[672361])
    (482050 'end of statement' key[155455] key[155455] key[155455])
    unknown call_tmp[672366] "expr temp" "maybe param" "maybe type" "temp"
    (672369 'move' call_tmp[672366](155516 call << key[155455] 2))
    unknown call_tmp[672371] "expr temp" "maybe param" "maybe type" "temp"
    (672374 'move' call_tmp[672371](155518 call + key[155455] call_tmp[672366]))
    unknown call_tmp[672376] "expr temp" "maybe param" "maybe type" "temp"
    (672379 'move' call_tmp[672376](155522 call << key[155455] 4))
    unknown call_tmp[672381] "expr temp" "maybe param" "maybe type" "temp"
    (672384 'move' call_tmp[672381](155524 call + call_tmp[672371] call_tmp[672376]))
    (155526 call = key[155455] call_tmp[672381])
    (482054 'end of statement' key[155455] key[155455] key[155455] key[155455])
    unknown call_tmp[672386] "expr temp" "maybe param" "maybe type" "temp"
    (672389 'move' call_tmp[672386](155533 call >> key[155455] 28))
    unknown call_tmp[672391] "expr temp" "maybe param" "maybe type" "temp"
    (672394 'move' call_tmp[672391](155535 call ^ key[155455] call_tmp[672386]))
    (155537 call = key[155455] call_tmp[672391])
    (482059 'end of statement' key[155455] key[155455] key[155455])
    unknown call_tmp[672396] "expr temp" "maybe param" "maybe type" "temp"
    (672399 'move' call_tmp[672396](155544 call << key[155455] 31))
    unknown call_tmp[672401] "expr temp" "maybe param" "maybe type" "temp"
    (672404 'move' call_tmp[672401](155546 call + key[155455] call_tmp[672396]))
    (155548 call = key[155455] call_tmp[672401])
    (482063 'end of statement' key[155455] key[155455] key[155455])
    (520725 'move' ret[520719](520724 'coerce' key[155455] uint(64)[115]))
    gotoReturn _end__gen_key[520717] _end__gen_key[520717]
    (482067 'end of statement' key[155455])
    label _end__gen_key[520717]
    (520721 return ret[520719])
  }
  { scopeless type
    uint(64)[115]
  }
  function _gen_key[155563](arg i[155560]:int(64)[13]) : _unknown[51]
  {
    unknown ret[520731] "RVV" "temp"
    unknown call_tmp[672406] "expr temp" "maybe param" "maybe type" "temp"
    (672409 'move' call_tmp[672406](155569 call _cast uint(64)[115] i[155560]))
    unknown call_tmp[672411] "expr temp" "maybe param" "maybe type" "temp"
    (672414 'move' call_tmp[672411](155572 call _gen_key call_tmp[672406]))
    (520737 'move' ret[520731](520736 'coerce' call_tmp[672411] uint(64)[115]))
    (520733 return ret[520731])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHashCombine[155585](arg a[155582]:uint(64)[115], arg b[155588]:uint(64)[115], arg fieldnum[155592]:int(64)[13]) : _unknown[51] "inline"
  {
    unknown ret[520747] "RVV" "temp"
    function chpl_bitops_rotl_64[155605](arg x[155602] :
    (155601 call uint(64)[115] 64), arg n[155611] :
    (155610 call uint(64)[115] 64)) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[520741] "RVV" "temp"
      (520743 return ret[520741])
    }
    { scopeless type
      (155617 call uint(64)[115] 64)
    }
    unknown call_tmp[672416] "expr temp" "maybe param" "maybe type" "temp"
    (672419 'move' call_tmp[672416](155625 call + 17 fieldnum[155592]))
    unknown call_tmp[672421] "maybe param" "maybe type" "temp"
    (672424 'move' call_tmp[672421](155628 call _cast uint(64)[115] call_tmp[672416]))
    unknown n[155630] "dead at end of block" "insert auto destroy"
    (543980 'init var' n[155630] call_tmp[672421] uint(64)[115])
    (155633 'end of statement')
    unknown call_tmp[672426] "expr temp" "maybe param" "maybe type" "temp"
    (672429 'move' call_tmp[672426](155640 call chpl_bitops_rotl_64 b[155588] n[155630]))
    unknown call_tmp[672431] "expr temp" "maybe param" "maybe type" "temp"
    (672434 'move' call_tmp[672431](155641 call ^ a[155582] call_tmp[672426]))
    unknown call_tmp[672436] "expr temp" "maybe param" "maybe type" "temp"
    (672439 'move' call_tmp[672436](155644 call _gen_key call_tmp[672431]))
    (520753 'move' ret[520747](520752 'coerce' call_tmp[672436] uint(64)[115]))
    gotoReturn _end_chpl__defaultHashCombine[520745] _end_chpl__defaultHashCombine[520745]
    (482070 'end of statement' n[155630])
    label _end_chpl__defaultHashCombine[520745]
    (520749 return ret[520747])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155656](arg b[155653]:bool[10]) : _unknown[51] "inline"
  {
    unknown ret[520759] "RVV" "temp"
    unknown call_tmp[672441] "expr temp" "maybe param" "maybe type" "temp"
    (672444 'move' call_tmp[672441](155666 call _cond_test b[155653]))
    if call_tmp[672441]
    {
      (520765 'move' ret[520759](520764 'coerce' 0 uint(64)[115]))
      gotoReturn _end_chpl__defaultHash[520757] _end_chpl__defaultHash[520757]
    }
    {
      (520771 'move' ret[520759](520770 'coerce' 1 uint(64)[115]))
      gotoReturn _end_chpl__defaultHash[520757] _end_chpl__defaultHash[520757]
    }
    label _end_chpl__defaultHash[520757]
    (520761 return ret[520759])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155685](arg i[155682] :
  (155681 call int(64)[13] 64)) : _unknown[51] "inline"
  {
    unknown ret[520777] "RVV" "temp"
    unknown call_tmp[672446] "expr temp" "maybe param" "maybe type" "temp"
    (672449 'move' call_tmp[672446](155691 call _gen_key i[155682]))
    (520783 'move' ret[520777](520782 'coerce' call_tmp[672446] uint(64)[115]))
    (520779 return ret[520777])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155707](arg u[155704] :
  (155703 call uint(64)[115] 64)) : _unknown[51] "inline"
  {
    unknown ret[520787] "RVV" "temp"
    unknown call_tmp[672451] "expr temp" "maybe param" "maybe type" "temp"
    (672454 'move' call_tmp[672451](155713 call _gen_key u[155704]))
    (520793 'move' ret[520787](520792 'coerce' call_tmp[672451] uint(64)[115]))
    (520789 return ret[520787])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155724](arg e[155722]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[520797] "RVV" "temp"
    unknown call_tmp[672456] "expr temp" "maybe param" "maybe type" "temp"
    (672459 'move' call_tmp[672456](155734 call chpl__enumToOrder e[155722]))
    unknown call_tmp[672461] "expr temp" "maybe param" "maybe type" "temp"
    (672464 'move' call_tmp[672461](155736 call _gen_key call_tmp[672456]))
    (520802 'move' ret[520797](520801 'deref' call_tmp[672461]))
    (520799 return ret[520797])
  }
  where {
    (155729 call isEnum e[155722])
  }
  function chpl__defaultHash[155749](arg f[155746]:real(64)[16]) : _unknown[51] "inline"
  {
    unknown ret[520806] "RVV" "temp"
    unknown call_tmp[672466] "expr temp" "maybe param" "maybe type" "temp"
    (672469 'move' call_tmp[672466](155772 'real2int' f[155746]))
    unknown call_tmp[672471] "expr temp" "maybe param" "maybe type" "temp"
    (672474 'move' call_tmp[672471](155774 call _gen_key call_tmp[672466]))
    (520812 'move' ret[520806](520811 'coerce' call_tmp[672471] uint(64)[115]))
    (520808 return ret[520806])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155787](arg c[155784]:complex(128)[140]) : _unknown[51] "inline"
  {
    unknown ret[520816] "RVV" "temp"
    unknown call_tmp[672478] "expr temp" "maybe param" "maybe type" "temp"
    (672481 'move' call_tmp[672478](155794 call re _mt[243] c[155784]))
    unknown call_tmp[672483] "expr temp" "maybe param" "maybe type" "temp"
    (672486 'move' call_tmp[672483](155797 'real2int' call_tmp[672478]))
    unknown call_tmp[672490] "expr temp" "maybe param" "maybe type" "temp"
    (672493 'move' call_tmp[672490](155801 call im _mt[243] c[155784]))
    unknown call_tmp[672495] "expr temp" "maybe param" "maybe type" "temp"
    (672498 'move' call_tmp[672495](155804 'real2int' call_tmp[672490]))
    unknown call_tmp[672500] "expr temp" "maybe param" "maybe type" "temp"
    (672503 'move' call_tmp[672500](155805 call ^ call_tmp[672483] call_tmp[672495]))
    unknown call_tmp[672505] "expr temp" "maybe param" "maybe type" "temp"
    (672508 'move' call_tmp[672505](155808 call _gen_key call_tmp[672500]))
    (520822 'move' ret[520816](520821 'coerce' call_tmp[672505] uint(64)[115]))
    (520818 return ret[520816])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155821](arg a[155818]:imag(64)[130]) : _unknown[51] "inline"
  {
    unknown ret[520826] "RVV" "temp"
    unknown call_tmp[672510] "expr temp" "maybe param" "maybe type" "temp"
    (672513 'move' call_tmp[672510](155830 call _i2r a[155818]))
    unknown call_tmp[672515] "expr temp" "maybe param" "maybe type" "temp"
    (672518 'move' call_tmp[672515](155831 'real2int' call_tmp[672510]))
    unknown call_tmp[672520] "expr temp" "maybe param" "maybe type" "temp"
    (672523 'move' call_tmp[672520](155833 call _gen_key call_tmp[672515]))
    (520832 'move' ret[520826](520831 'coerce' call_tmp[672520] uint(64)[115]))
    (520828 return ret[520826])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155846](arg u[155843]:chpl_taskID_t[163]) : _unknown[51] "inline"
  {
    unknown ret[520836] "RVV" "temp"
    unknown call_tmp[672525] "expr temp" "maybe param" "maybe type" "temp"
    (672528 'move' call_tmp[672525](155854 call int(64)[13] 64))
    unknown call_tmp[672530] "expr temp" "maybe param" "maybe type" "temp"
    (672533 'move' call_tmp[672530](155855 call _cast call_tmp[672525] u[155843]))
    unknown call_tmp[672535] "expr temp" "maybe param" "maybe type" "temp"
    (672538 'move' call_tmp[672535](155858 call _gen_key call_tmp[672530]))
    (520842 'move' ret[520836](520841 'coerce' call_tmp[672535] uint(64)[115]))
    (520838 return ret[520836])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155873](arg l[155870]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[520846] "RVV" "temp"
    unknown hash[155878] "dead at end of block" "insert auto destroy"
    (543982 'init var' hash[155878] 0 uint(64)[115])
    (155881 'end of statement')
    unknown i[155884] "dead at end of block" "insert auto destroy"
    (543984 'init var' i[155884] 1)
    (155887 'end of statement')
    {
      unknown _indexOfInterest[155909] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[155910] "expr temp" "temp"
      (155919 'move' _iterator[155910](155917 call _getIterator l[155870]))
      Defer
      {
        {
          (155935 call _freeIterator _iterator[155910])
        }
      }
      { scopeless type
        (155924 'move' _indexOfInterest[155909](155921 call iteratorIndex _iterator[155910]))
      }
      ForLoop[155911]
      {
        unknown obj[155928] "index var" "insert auto destroy"
        (482082 'end of statement')
        (155930 'move' obj[155928] _indexOfInterest[155909])
        (482083 'end of statement' obj[155928])
        {
          unknown call_tmp[672540] "expr temp" "maybe param" "maybe type" "temp"
          (672543 'move' call_tmp[672540](155895 call chpl__defaultHash obj[155928]))
          unknown call_tmp[672545] "expr temp" "maybe param" "maybe type" "temp"
          (672548 'move' call_tmp[672545](155899 call chpl__defaultHashCombine call_tmp[672540] hash[155878] i[155884]))
          (155900 call = hash[155878] call_tmp[672545])
          (482085 'end of statement' hash[155878] obj[155928] hash[155878] i[155884])
          (155906 call += i[155884] 1)
          (482090 'end of statement' i[155884])
        }
        label _continueLabel[155914]
        _indexOfInterest[155909]
        _iterator[155910]
      }
      label _breakLabel[155915]
    }
    (520852 'move' ret[520846](520851 'coerce' hash[155878] uint(64)[115]))
    gotoReturn _end_chpl__defaultHash[520844] _end_chpl__defaultHash[520844]
    (482092 'end of statement' hash[155878])
    label _end_chpl__defaultHash[520844]
    (520848 return ret[520846])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155956](arg o[155953]:borrowed object?[415375]) : _unknown[51] "inline"
  {
    unknown ret[520858] "RVV" "temp"
    unknown call_tmp[672550] "expr temp" "maybe param" "maybe type" "temp"
    (672553 'move' call_tmp[672550](155979 'object2int' o[155953]))
    unknown call_tmp[672555] "expr temp" "maybe param" "maybe type" "temp"
    (672558 'move' call_tmp[672555](155981 call _gen_key call_tmp[672550]))
    (520864 'move' ret[520858](520863 'coerce' call_tmp[672555] uint(64)[115]))
    (520860 return ret[520858])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155994](arg l[155991]:locale[28]) : _unknown[51] "inline"
  {
    unknown ret[520868] "RVV" "temp"
    unknown call_tmp[672562] "expr temp" "maybe param" "maybe type" "temp"
    (672565 'move' call_tmp[672562](156001 call _value _mt[243] l[155991]))
    unknown call_tmp[672567] "expr temp" "maybe param" "maybe type" "temp"
    (672570 'move' call_tmp[672567](156004 'object2int' call_tmp[672562]))
    unknown call_tmp[672572] "expr temp" "maybe param" "maybe type" "temp"
    (672575 'move' call_tmp[672572](156006 call _gen_key call_tmp[672567]))
    (520874 'move' ret[520868](520873 'coerce' call_tmp[672572] uint(64)[115]))
    (520870 return ret[520868])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[156019](arg r[156016]:range[64319](?)) : _unknown[51] "inline"
  {
    unknown ret[520878] "RVV" "temp"
    unknown ret[156027] "dead at end of block" "insert auto destroy"
    (543986 'default init var' ret[156027] uint(64)[115])
    (156030 'end of statement')
    {
      unknown i[156125] "dead at end of block" "insert auto destroy"
      (543988 'init var' i[156125] 0)
      (482096 'end of statement')
      unknown tmp[156126] "maybe param" "temp"
      unknown call_tmp[672577] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (672580 'move' call_tmp[672577](156034 'typeof' r[156016]))
      unknown call_tmp[672582] "expr temp" "maybe param" "maybe type" "temp"
      (672585 'move' call_tmp[672582](156036 call numImplementationFields call_tmp[672577]))
      (156138 'move' tmp[156126](156136 call chpl_compute_low_param_loop_bound 1 call_tmp[672582]))
      unknown tmp[156127] "maybe param" "temp"
      unknown call_tmp[672587] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (672590 'move' call_tmp[672587](156144 'typeof' r[156016]))
      unknown call_tmp[672592] "expr temp" "maybe param" "maybe type" "temp"
      (672595 'move' call_tmp[672592](156143 call numImplementationFields call_tmp[672587]))
      (156148 'move' tmp[156127](156146 call chpl_compute_high_param_loop_bound 1 call_tmp[672592]))
      unknown tmp[156128] "maybe param" "temp"
      (156151 'move' tmp[156128] 1)
      ParamForLoop[156153]
      { i[156125] tmp[156126] tmp[156127] tmp[156128]
        {
          unknown tmp[427631] "maybe param" "temp"
          unknown tmp[427652] "maybe param" "temp"
          unknown call_tmp[672597] "expr temp" "maybe param" "maybe type" "temp"
          (672600 'move' call_tmp[672597](156044 call getImplementationField r[156016] i[156125]))
          unknown call_tmp[672602] "expr temp" "maybe param" "maybe type" "temp"
          (672605 'move' call_tmp[672602](156046 call isParam call_tmp[672597]))
          (427663 'move' tmp[427652](156048 call == call_tmp[672602] 0))
          unknown call_tmp[672607] "expr temp" "maybe param" "maybe type" "temp"
          (672610 'move' call_tmp[672607](427665 call _cond_invalid tmp[427652]))
          if call_tmp[672607]
          {
            (427668 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[569443] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[569444] "maybe param" "temp"
          unknown call_tmp[672612] "expr temp" "maybe param" "maybe type" "temp"
          (672615 'move' call_tmp[672612](427653 call isTrue tmp[427652]))
          (569449 'move' tmp[569444](569447 call _cond_test call_tmp[672612]))
          if tmp[569444]
          {
            unknown tmp[569451] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[672617] "expr temp" "maybe param" "maybe type" "temp"
            (672620 'move' call_tmp[672617](156055 call getImplementationField r[156016] i[156125]))
            unknown call_tmp[672622] "expr temp" "maybe param" "maybe type" "temp"
            (672625 'move' call_tmp[672622](156057 call isType call_tmp[672617]))
            unknown call_tmp[672627] "expr temp" "maybe param" "maybe type" "temp"
            (672630 'move' call_tmp[672627](156059 call == call_tmp[672622] 0))
            (569453 'move' tmp[569451](427656 call isTrue call_tmp[672627]))
            (569458 'move' tmp[569443](569455 '_paramFoldLogical' tmp[569444] tmp[569451]))
          }
          {
            (569463 'move' tmp[569443](569460 '_paramFoldLogical' tmp[569444] 0))
          }
          (427642 'move' tmp[427631] tmp[569443])
          unknown call_tmp[672632] "expr temp" "maybe param" "maybe type" "temp"
          (672635 'move' call_tmp[672632](427644 call _cond_invalid tmp[427631]))
          if call_tmp[672632]
          {
            (427647 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[569470] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[569471] "maybe param" "temp"
          unknown call_tmp[672637] "expr temp" "maybe param" "maybe type" "temp"
          (672640 'move' call_tmp[672637](427632 call isTrue tmp[427631]))
          (569476 'move' tmp[569471](569474 call _cond_test call_tmp[672637]))
          if tmp[569471]
          {
            { scopeless type
              unknown call_type_tmp[492386] "expr temp" "maybe type" "temp" "type variable"
              unknown call_tmp[672642] "expr temp" "maybe param" "maybe type" "temp"
              (672645 'move' call_tmp[672642](156068 call getImplementationField r[156016] i[156125]))
              (492390 'move' call_type_tmp[492386](156069 'typeof' call_tmp[672642]))
            }
            unknown tmp[569478] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[672647] "expr temp" "maybe param" "maybe type" "temp"
            (672650 'move' call_tmp[672647](156071 call isNothingType call_type_tmp[492386]))
            unknown call_tmp[672652] "expr temp" "maybe param" "maybe type" "temp"
            (672655 'move' call_tmp[672652](156073 call == call_tmp[672647] 0))
            (569480 'move' tmp[569478](427635 call isTrue call_tmp[672652]))
            (569485 'move' tmp[569470](569482 '_paramFoldLogical' tmp[569471] tmp[569478]))
          }
          {
            (569490 'move' tmp[569470](569487 '_paramFoldLogical' tmp[569471] 0))
          }
          unknown call_tmp[672657] "expr temp" "maybe param" "maybe type" "temp"
          (672660 'move' call_tmp[672657](156120 call _cond_test tmp[569470]))
          if call_tmp[672657]
          {
            const field[156082] "dead at end of block" "const" "ref var"
            unknown call_tmp[672662] "expr temp" "maybe param" "maybe type" "temp"
            (672665 'move' call_tmp[672662](156081 call getImplementationField r[156016] i[156125]))
            (543991 'move' field[156082](543990 'addr of' call_tmp[672662]))
            (156085 'end of statement')
            unknown call_tmp[672667] "maybe param" "maybe type" "temp"
            (672670 'move' call_tmp[672667](156090 call chpl__defaultHash field[156082]))
            const fieldHash[156091] "dead at end of block" "const" "insert auto destroy"
            (543993 'init var' fieldHash[156091] call_tmp[672667])
            (156094 'end of statement' i[156125] field[156082])
            unknown call_tmp[672672] "expr temp" "maybe param" "maybe type" "temp"
            (672675 'move' call_tmp[672672](156097 call == i[156125] 1))
            unknown call_tmp[672677] "expr temp" "maybe param" "maybe type" "temp"
            (672680 'move' call_tmp[672677](156114 call _cond_test call_tmp[672672]))
            if call_tmp[672677]
            {
              (156101 call = ret[156027] fieldHash[156091])
              (482101 'end of statement' ret[156027] fieldHash[156091])
            }
            {
              unknown call_tmp[672682] "expr temp" "maybe param" "maybe type" "temp"
              (672685 'move' call_tmp[672682](156110 call chpl__defaultHashCombine fieldHash[156091] ret[156027] i[156125]))
              (156111 call = ret[156027] call_tmp[672682])
              (482104 'end of statement' ret[156027] fieldHash[156091] ret[156027] i[156125])
            }
          }
        }
      }
      label _unused_continueLabel[156130]
      label _breakLabel[156129]
    }
    (520884 'move' ret[520878](520883 'coerce' ret[156027] uint(64)[115]))
    gotoReturn _end_chpl__defaultHash[520876] _end_chpl__defaultHash[520876]
    (482109 'end of statement' ret[156027])
    label _end_chpl__defaultHash[520876]
    (520880 return ret[520878])
    (355183 'used modules list'(156023 'use' Reflection[224901]))
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__validDefaultAssocDomIdxType[156172](arg idxType[156170]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[520890] "RVV" "param" "temp"
    (520895 'move' ret[520890](520894 'deref' 0))
    (520892 return ret[520890])
  }
  function chpl__validDefaultAssocDomIdxType[156184](arg idxType[156182]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[520899] "RVV" "param" "temp"
    (520904 'move' ret[520899](520903 'deref' 1))
    (520901 return ret[520899])
  }
  where {
    unknown tmp[427673] "maybe param" "temp"
    unknown tmp[427694] "maybe param" "temp"
    unknown tmp[427715] "maybe param" "temp"
    unknown tmp[427736] "maybe param" "temp"
    unknown tmp[427757] "maybe param" "temp"
    unknown tmp[427778] "maybe param" "temp"
    unknown tmp[427799] "maybe param" "temp"
    unknown tmp[427820] "maybe param" "temp"
    unknown tmp[427841] "maybe param" "temp"
    unknown tmp[427862] "maybe param" "temp"
    unknown tmp[427883] "maybe param" "temp"
    unknown tmp[427904] "maybe param" "temp"
    unknown tmp[427925] "maybe param" "temp"
    (427936 'move' tmp[427925](156189 call isBoolType idxType[156182]))
    unknown call_tmp[672687] "expr temp" "maybe param" "maybe type" "temp"
    (672690 'move' call_tmp[672687](427938 call _cond_invalid tmp[427925]))
    if call_tmp[672687]
    {
      (427941 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569497] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569498] "maybe param" "temp"
    unknown call_tmp[672692] "expr temp" "maybe param" "maybe type" "temp"
    (672695 'move' call_tmp[672692](427926 call isTrue tmp[427925]))
    (569503 'move' tmp[569498](569501 call _cond_test call_tmp[672692]))
    if tmp[569498]
    {
      (569508 'move' tmp[569497](569505 '_paramFoldLogical' tmp[569498] 1))
    }
    {
      unknown tmp[569510] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672697] "expr temp" "maybe param" "maybe type" "temp"
      (672700 'move' call_tmp[672697](156193 call isIntType idxType[156182]))
      (569512 'move' tmp[569510](427930 call isTrue call_tmp[672697]))
      (569517 'move' tmp[569497](569514 '_paramFoldLogical' tmp[569498] tmp[569510]))
    }
    (427915 'move' tmp[427904] tmp[569497])
    unknown call_tmp[672702] "expr temp" "maybe param" "maybe type" "temp"
    (672705 'move' call_tmp[672702](427917 call _cond_invalid tmp[427904]))
    if call_tmp[672702]
    {
      (427920 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569524] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569525] "maybe param" "temp"
    unknown call_tmp[672707] "expr temp" "maybe param" "maybe type" "temp"
    (672710 'move' call_tmp[672707](427905 call isTrue tmp[427904]))
    (569530 'move' tmp[569525](569528 call _cond_test call_tmp[672707]))
    if tmp[569525]
    {
      (569535 'move' tmp[569524](569532 '_paramFoldLogical' tmp[569525] 1))
    }
    {
      unknown tmp[569537] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672712] "expr temp" "maybe param" "maybe type" "temp"
      (672715 'move' call_tmp[672712](156199 call isUintType idxType[156182]))
      (569539 'move' tmp[569537](427909 call isTrue call_tmp[672712]))
      (569544 'move' tmp[569524](569541 '_paramFoldLogical' tmp[569525] tmp[569537]))
    }
    (427894 'move' tmp[427883] tmp[569524])
    unknown call_tmp[672717] "expr temp" "maybe param" "maybe type" "temp"
    (672720 'move' call_tmp[672717](427896 call _cond_invalid tmp[427883]))
    if call_tmp[672717]
    {
      (427899 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569551] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569552] "maybe param" "temp"
    unknown call_tmp[672722] "expr temp" "maybe param" "maybe type" "temp"
    (672725 'move' call_tmp[672722](427884 call isTrue tmp[427883]))
    (569557 'move' tmp[569552](569555 call _cond_test call_tmp[672722]))
    if tmp[569552]
    {
      (569562 'move' tmp[569551](569559 '_paramFoldLogical' tmp[569552] 1))
    }
    {
      unknown tmp[569564] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672727] "expr temp" "maybe param" "maybe type" "temp"
      (672730 'move' call_tmp[672727](156205 call isRealType idxType[156182]))
      (569566 'move' tmp[569564](427888 call isTrue call_tmp[672727]))
      (569571 'move' tmp[569551](569568 '_paramFoldLogical' tmp[569552] tmp[569564]))
    }
    (427873 'move' tmp[427862] tmp[569551])
    unknown call_tmp[672732] "expr temp" "maybe param" "maybe type" "temp"
    (672735 'move' call_tmp[672732](427875 call _cond_invalid tmp[427862]))
    if call_tmp[672732]
    {
      (427878 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569578] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569579] "maybe param" "temp"
    unknown call_tmp[672737] "expr temp" "maybe param" "maybe type" "temp"
    (672740 'move' call_tmp[672737](427863 call isTrue tmp[427862]))
    (569584 'move' tmp[569579](569582 call _cond_test call_tmp[672737]))
    if tmp[569579]
    {
      (569589 'move' tmp[569578](569586 '_paramFoldLogical' tmp[569579] 1))
    }
    {
      unknown tmp[569591] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672742] "expr temp" "maybe param" "maybe type" "temp"
      (672745 'move' call_tmp[672742](156211 call isImagType idxType[156182]))
      (569593 'move' tmp[569591](427867 call isTrue call_tmp[672742]))
      (569598 'move' tmp[569578](569595 '_paramFoldLogical' tmp[569579] tmp[569591]))
    }
    (427852 'move' tmp[427841] tmp[569578])
    unknown call_tmp[672747] "expr temp" "maybe param" "maybe type" "temp"
    (672750 'move' call_tmp[672747](427854 call _cond_invalid tmp[427841]))
    if call_tmp[672747]
    {
      (427857 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569605] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569606] "maybe param" "temp"
    unknown call_tmp[672752] "expr temp" "maybe param" "maybe type" "temp"
    (672755 'move' call_tmp[672752](427842 call isTrue tmp[427841]))
    (569611 'move' tmp[569606](569609 call _cond_test call_tmp[672752]))
    if tmp[569606]
    {
      (569616 'move' tmp[569605](569613 '_paramFoldLogical' tmp[569606] 1))
    }
    {
      unknown tmp[569618] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672757] "expr temp" "maybe param" "maybe type" "temp"
      (672760 'move' call_tmp[672757](156217 call isComplexType idxType[156182]))
      (569620 'move' tmp[569618](427846 call isTrue call_tmp[672757]))
      (569625 'move' tmp[569605](569622 '_paramFoldLogical' tmp[569606] tmp[569618]))
    }
    (427831 'move' tmp[427820] tmp[569605])
    unknown call_tmp[672762] "expr temp" "maybe param" "maybe type" "temp"
    (672765 'move' call_tmp[672762](427833 call _cond_invalid tmp[427820]))
    if call_tmp[672762]
    {
      (427836 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569632] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569633] "maybe param" "temp"
    unknown call_tmp[672767] "expr temp" "maybe param" "maybe type" "temp"
    (672770 'move' call_tmp[672767](427821 call isTrue tmp[427820]))
    (569638 'move' tmp[569633](569636 call _cond_test call_tmp[672767]))
    if tmp[569633]
    {
      (569643 'move' tmp[569632](569640 '_paramFoldLogical' tmp[569633] 1))
    }
    {
      unknown tmp[569645] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672772] "expr temp" "maybe param" "maybe type" "temp"
      (672775 'move' call_tmp[672772](156222 call == idxType[156182] chpl_taskID_t[163]))
      (569647 'move' tmp[569645](427825 call isTrue call_tmp[672772]))
      (569652 'move' tmp[569632](569649 '_paramFoldLogical' tmp[569633] tmp[569645]))
    }
    (427810 'move' tmp[427799] tmp[569632])
    unknown call_tmp[672777] "expr temp" "maybe param" "maybe type" "temp"
    (672780 'move' call_tmp[672777](427812 call _cond_invalid tmp[427799]))
    if call_tmp[672777]
    {
      (427815 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569659] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569660] "maybe param" "temp"
    unknown call_tmp[672782] "expr temp" "maybe param" "maybe type" "temp"
    (672785 'move' call_tmp[672782](427800 call isTrue tmp[427799]))
    (569665 'move' tmp[569660](569663 call _cond_test call_tmp[672782]))
    if tmp[569660]
    {
      (569670 'move' tmp[569659](569667 '_paramFoldLogical' tmp[569660] 1))
    }
    {
      unknown tmp[569672] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672787] "expr temp" "maybe param" "maybe type" "temp"
      (672790 'move' call_tmp[672787](156228 call == idxType[156182] string[26]))
      (569674 'move' tmp[569672](427804 call isTrue call_tmp[672787]))
      (569679 'move' tmp[569659](569676 '_paramFoldLogical' tmp[569660] tmp[569672]))
    }
    (427789 'move' tmp[427778] tmp[569659])
    unknown call_tmp[672792] "expr temp" "maybe param" "maybe type" "temp"
    (672795 'move' call_tmp[672792](427791 call _cond_invalid tmp[427778]))
    if call_tmp[672792]
    {
      (427794 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569686] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569687] "maybe param" "temp"
    unknown call_tmp[672797] "expr temp" "maybe param" "maybe type" "temp"
    (672800 'move' call_tmp[672797](427779 call isTrue tmp[427778]))
    (569692 'move' tmp[569687](569690 call _cond_test call_tmp[672797]))
    if tmp[569687]
    {
      (569697 'move' tmp[569686](569694 '_paramFoldLogical' tmp[569687] 1))
    }
    {
      unknown tmp[569699] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672802] "expr temp" "maybe param" "maybe type" "temp"
      (672805 'move' call_tmp[672802](156234 call == idxType[156182] bytes[24]))
      (569701 'move' tmp[569699](427783 call isTrue call_tmp[672802]))
      (569706 'move' tmp[569686](569703 '_paramFoldLogical' tmp[569687] tmp[569699]))
    }
    (427768 'move' tmp[427757] tmp[569686])
    unknown call_tmp[672807] "expr temp" "maybe param" "maybe type" "temp"
    (672810 'move' call_tmp[672807](427770 call _cond_invalid tmp[427757]))
    if call_tmp[672807]
    {
      (427773 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569713] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569714] "maybe param" "temp"
    unknown call_tmp[672812] "expr temp" "maybe param" "maybe type" "temp"
    (672815 'move' call_tmp[672812](427758 call isTrue tmp[427757]))
    (569719 'move' tmp[569714](569717 call _cond_test call_tmp[672812]))
    if tmp[569714]
    {
      (569724 'move' tmp[569713](569721 '_paramFoldLogical' tmp[569714] 1))
    }
    {
      unknown tmp[569726] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672817] "expr temp" "maybe param" "maybe type" "temp"
      (672820 'move' call_tmp[672817](156240 call == idxType[156182] c_string[19]))
      (569728 'move' tmp[569726](427762 call isTrue call_tmp[672817]))
      (569733 'move' tmp[569713](569730 '_paramFoldLogical' tmp[569714] tmp[569726]))
    }
    (427747 'move' tmp[427736] tmp[569713])
    unknown call_tmp[672822] "expr temp" "maybe param" "maybe type" "temp"
    (672825 'move' call_tmp[672822](427749 call _cond_invalid tmp[427736]))
    if call_tmp[672822]
    {
      (427752 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569740] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569741] "maybe param" "temp"
    unknown call_tmp[672827] "expr temp" "maybe param" "maybe type" "temp"
    (672830 'move' call_tmp[672827](427737 call isTrue tmp[427736]))
    (569746 'move' tmp[569741](569744 call _cond_test call_tmp[672827]))
    if tmp[569741]
    {
      (569751 'move' tmp[569740](569748 '_paramFoldLogical' tmp[569741] 1))
    }
    {
      unknown tmp[569753] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672832] "expr temp" "maybe param" "maybe type" "temp"
      (672835 'move' call_tmp[672832](156247 call isClassType idxType[156182]))
      (569755 'move' tmp[569753](427741 call isTrue call_tmp[672832]))
      (569760 'move' tmp[569740](569757 '_paramFoldLogical' tmp[569741] tmp[569753]))
    }
    (427726 'move' tmp[427715] tmp[569740])
    unknown call_tmp[672837] "expr temp" "maybe param" "maybe type" "temp"
    (672840 'move' call_tmp[672837](427728 call _cond_invalid tmp[427715]))
    if call_tmp[672837]
    {
      (427731 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569767] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569768] "maybe param" "temp"
    unknown call_tmp[672842] "expr temp" "maybe param" "maybe type" "temp"
    (672845 'move' call_tmp[672842](427716 call isTrue tmp[427715]))
    (569773 'move' tmp[569768](569771 call _cond_test call_tmp[672842]))
    if tmp[569768]
    {
      (569778 'move' tmp[569767](569775 '_paramFoldLogical' tmp[569768] 1))
    }
    {
      unknown tmp[569780] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672847] "expr temp" "maybe param" "maybe type" "temp"
      (672850 'move' call_tmp[672847](156253 call isEnumType idxType[156182]))
      (569782 'move' tmp[569780](427720 call isTrue call_tmp[672847]))
      (569787 'move' tmp[569767](569784 '_paramFoldLogical' tmp[569768] tmp[569780]))
    }
    (427705 'move' tmp[427694] tmp[569767])
    unknown call_tmp[672852] "expr temp" "maybe param" "maybe type" "temp"
    (672855 'move' call_tmp[672852](427707 call _cond_invalid tmp[427694]))
    if call_tmp[672852]
    {
      (427710 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569794] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569795] "maybe param" "temp"
    unknown call_tmp[672857] "expr temp" "maybe param" "maybe type" "temp"
    (672860 'move' call_tmp[672857](427695 call isTrue tmp[427694]))
    (569800 'move' tmp[569795](569798 call _cond_test call_tmp[672857]))
    if tmp[569795]
    {
      (569805 'move' tmp[569794](569802 '_paramFoldLogical' tmp[569795] 1))
    }
    {
      unknown tmp[569807] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672862] "expr temp" "maybe param" "maybe type" "temp"
      (672865 'move' call_tmp[672862](156259 call isTupleType idxType[156182]))
      (569809 'move' tmp[569807](427699 call isTrue call_tmp[672862]))
      (569814 'move' tmp[569794](569811 '_paramFoldLogical' tmp[569795] tmp[569807]))
    }
    (427684 'move' tmp[427673] tmp[569794])
    unknown call_tmp[672867] "expr temp" "maybe param" "maybe type" "temp"
    (672870 'move' call_tmp[672867](427686 call _cond_invalid tmp[427673]))
    if call_tmp[672867]
    {
      (427689 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569821] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569822] "maybe param" "temp"
    unknown call_tmp[672872] "expr temp" "maybe param" "maybe type" "temp"
    (672875 'move' call_tmp[672872](427674 call isTrue tmp[427673]))
    (569827 'move' tmp[569822](569825 call _cond_test call_tmp[672872]))
    if tmp[569822]
    {
      (569832 'move' tmp[569821](569829 '_paramFoldLogical' tmp[569822] 1))
    }
    {
      unknown tmp[569834] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672877] "expr temp" "maybe param" "maybe type" "temp"
      (672880 'move' call_tmp[672877](156265 call isRecordType idxType[156182]))
      (569836 'move' tmp[569834](427678 call isTrue call_tmp[672877]))
      (569841 'move' tmp[569821](569838 '_paramFoldLogical' tmp[569822] tmp[569834]))
    }
    (748359 call chpl_statementLevelSymbol tmp[569821])
  }
  (355181 'used modules list'(155411 'use' ChapelBase[307]))
}