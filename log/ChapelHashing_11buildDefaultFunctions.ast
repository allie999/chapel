AST dump for ChapelHashing after pass buildDefaultFunctions.
Module use list: ChapelBase Reflection 

{
  function chpl__init_ChapelHashing[416054]() : void[4] "insert line file info" "module init"
  {
    (520929 return _void[55])
  }
  function chpl__defaultHashWrapper[155378](arg x[155376]:_any[178](?)) : _unknown[51]
  {
    unknown ret[520730] "RVV" "temp"
    unknown call_tmp[672316] "maybe param" "maybe type" "temp"
    (672319 'move' call_tmp[672316](155384 call chpl__defaultHash x[155376]))
    const hash[155385] "dead at end of block" "const" "insert auto destroy"
    (543999 'init var' hash[155385] call_tmp[672316])
    (155388 'end of statement')
    unknown call_tmp[672321] "expr temp" "maybe param" "maybe type" "temp"
    (672324 'move' call_tmp[672321](155394 call max int(64)[13]))
    unknown call_tmp[672326] "expr temp" "maybe param" "maybe type" "temp"
    (672329 'move' call_tmp[672326](155395 call & hash[155385] call_tmp[672321]))
    unknown call_tmp[672331] "expr temp" "maybe param" "maybe type" "temp"
    (672334 'move' call_tmp[672331](155398 call _cast int(64)[13] call_tmp[672326]))
    (520736 'move' ret[520730](520735 'coerce' call_tmp[672331] int(64)[13]))
    gotoReturn _end_chpl__defaultHashWrapper[520728] _end_chpl__defaultHashWrapper[520728]
    (482054 'end of statement' hash[155385])
    label _end_chpl__defaultHashWrapper[520728]
    (520732 return ret[520730])
  }
  { scopeless type
    int(64)[13]
  }
  function _gen_key[155411](arg i[155408]:uint(64)[115]) : _unknown[51]
  {
    unknown ret[520742] "RVV" "temp"
    unknown key[155415] "dead at end of block" "insert auto destroy"
    (544001 'init var' key[155415] i[155408])
    (155418 'end of statement')
    unknown call_tmp[672336] "expr temp" "maybe param" "maybe type" "temp"
    (672339 'move' call_tmp[672336](155422 call ~ key[155415]))
    unknown call_tmp[672341] "expr temp" "maybe param" "maybe type" "temp"
    (672344 'move' call_tmp[672341](155426 call << key[155415] 21))
    unknown call_tmp[672346] "expr temp" "maybe param" "maybe type" "temp"
    (672349 'move' call_tmp[672346](155428 call + call_tmp[672336] call_tmp[672341]))
    (155430 call = key[155415] call_tmp[672346])
    (482056 'end of statement' key[155415] key[155415] key[155415])
    unknown call_tmp[672351] "expr temp" "maybe param" "maybe type" "temp"
    (672354 'move' call_tmp[672351](155437 call >> key[155415] 24))
    unknown call_tmp[672356] "expr temp" "maybe param" "maybe type" "temp"
    (672359 'move' call_tmp[672356](155439 call ^ key[155415] call_tmp[672351]))
    (155441 call = key[155415] call_tmp[672356])
    (482060 'end of statement' key[155415] key[155415] key[155415])
    unknown call_tmp[672361] "expr temp" "maybe param" "maybe type" "temp"
    (672364 'move' call_tmp[672361](155448 call << key[155415] 3))
    unknown call_tmp[672366] "expr temp" "maybe param" "maybe type" "temp"
    (672369 'move' call_tmp[672366](155450 call + key[155415] call_tmp[672361]))
    unknown call_tmp[672371] "expr temp" "maybe param" "maybe type" "temp"
    (672374 'move' call_tmp[672371](155454 call << key[155415] 8))
    unknown call_tmp[672376] "expr temp" "maybe param" "maybe type" "temp"
    (672379 'move' call_tmp[672376](155456 call + call_tmp[672366] call_tmp[672371]))
    (155458 call = key[155415] call_tmp[672376])
    (482064 'end of statement' key[155415] key[155415] key[155415] key[155415])
    unknown call_tmp[672381] "expr temp" "maybe param" "maybe type" "temp"
    (672384 'move' call_tmp[672381](155465 call >> key[155415] 14))
    unknown call_tmp[672386] "expr temp" "maybe param" "maybe type" "temp"
    (672389 'move' call_tmp[672386](155467 call ^ key[155415] call_tmp[672381]))
    (155469 call = key[155415] call_tmp[672386])
    (482069 'end of statement' key[155415] key[155415] key[155415])
    unknown call_tmp[672391] "expr temp" "maybe param" "maybe type" "temp"
    (672394 'move' call_tmp[672391](155476 call << key[155415] 2))
    unknown call_tmp[672396] "expr temp" "maybe param" "maybe type" "temp"
    (672399 'move' call_tmp[672396](155478 call + key[155415] call_tmp[672391]))
    unknown call_tmp[672401] "expr temp" "maybe param" "maybe type" "temp"
    (672404 'move' call_tmp[672401](155482 call << key[155415] 4))
    unknown call_tmp[672406] "expr temp" "maybe param" "maybe type" "temp"
    (672409 'move' call_tmp[672406](155484 call + call_tmp[672396] call_tmp[672401]))
    (155486 call = key[155415] call_tmp[672406])
    (482073 'end of statement' key[155415] key[155415] key[155415] key[155415])
    unknown call_tmp[672411] "expr temp" "maybe param" "maybe type" "temp"
    (672414 'move' call_tmp[672411](155493 call >> key[155415] 28))
    unknown call_tmp[672416] "expr temp" "maybe param" "maybe type" "temp"
    (672419 'move' call_tmp[672416](155495 call ^ key[155415] call_tmp[672411]))
    (155497 call = key[155415] call_tmp[672416])
    (482078 'end of statement' key[155415] key[155415] key[155415])
    unknown call_tmp[672421] "expr temp" "maybe param" "maybe type" "temp"
    (672424 'move' call_tmp[672421](155504 call << key[155415] 31))
    unknown call_tmp[672426] "expr temp" "maybe param" "maybe type" "temp"
    (672429 'move' call_tmp[672426](155506 call + key[155415] call_tmp[672421]))
    (155508 call = key[155415] call_tmp[672426])
    (482082 'end of statement' key[155415] key[155415] key[155415])
    (520748 'move' ret[520742](520747 'coerce' key[155415] uint(64)[115]))
    gotoReturn _end__gen_key[520740] _end__gen_key[520740]
    (482086 'end of statement' key[155415])
    label _end__gen_key[520740]
    (520744 return ret[520742])
  }
  { scopeless type
    uint(64)[115]
  }
  function _gen_key[155523](arg i[155520]:int(64)[13]) : _unknown[51]
  {
    unknown ret[520754] "RVV" "temp"
    unknown call_tmp[672431] "expr temp" "maybe param" "maybe type" "temp"
    (672434 'move' call_tmp[672431](155529 call _cast uint(64)[115] i[155520]))
    unknown call_tmp[672436] "expr temp" "maybe param" "maybe type" "temp"
    (672439 'move' call_tmp[672436](155532 call _gen_key call_tmp[672431]))
    (520760 'move' ret[520754](520759 'coerce' call_tmp[672436] uint(64)[115]))
    (520756 return ret[520754])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHashCombine[155545](arg a[155542]:uint(64)[115], arg b[155548]:uint(64)[115], arg fieldnum[155552]:int(64)[13]) : _unknown[51] "inline"
  {
    unknown ret[520770] "RVV" "temp"
    function chpl_bitops_rotl_64[155565](arg x[155562] :
    (155561 call uint(64)[115] 64), arg n[155571] :
    (155570 call uint(64)[115] 64)) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[520764] "RVV" "temp"
      (520766 return ret[520764])
    }
    { scopeless type
      (155577 call uint(64)[115] 64)
    }
    unknown call_tmp[672441] "expr temp" "maybe param" "maybe type" "temp"
    (672444 'move' call_tmp[672441](155585 call + 17 fieldnum[155552]))
    unknown call_tmp[672446] "maybe param" "maybe type" "temp"
    (672449 'move' call_tmp[672446](155588 call _cast uint(64)[115] call_tmp[672441]))
    unknown n[155590] "dead at end of block" "insert auto destroy"
    (544003 'init var' n[155590] call_tmp[672446] uint(64)[115])
    (155593 'end of statement')
    unknown call_tmp[672451] "expr temp" "maybe param" "maybe type" "temp"
    (672454 'move' call_tmp[672451](155600 call chpl_bitops_rotl_64 b[155548] n[155590]))
    unknown call_tmp[672456] "expr temp" "maybe param" "maybe type" "temp"
    (672459 'move' call_tmp[672456](155601 call ^ a[155542] call_tmp[672451]))
    unknown call_tmp[672461] "expr temp" "maybe param" "maybe type" "temp"
    (672464 'move' call_tmp[672461](155604 call _gen_key call_tmp[672456]))
    (520776 'move' ret[520770](520775 'coerce' call_tmp[672461] uint(64)[115]))
    gotoReturn _end_chpl__defaultHashCombine[520768] _end_chpl__defaultHashCombine[520768]
    (482089 'end of statement' n[155590])
    label _end_chpl__defaultHashCombine[520768]
    (520772 return ret[520770])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155616](arg b[155613]:bool[10]) : _unknown[51] "inline"
  {
    unknown ret[520782] "RVV" "temp"
    unknown call_tmp[672466] "expr temp" "maybe param" "maybe type" "temp"
    (672469 'move' call_tmp[672466](155626 call _cond_test b[155613]))
    if call_tmp[672466]
    {
      (520788 'move' ret[520782](520787 'coerce' 0 uint(64)[115]))
      gotoReturn _end_chpl__defaultHash[520780] _end_chpl__defaultHash[520780]
    }
    {
      (520794 'move' ret[520782](520793 'coerce' 1 uint(64)[115]))
      gotoReturn _end_chpl__defaultHash[520780] _end_chpl__defaultHash[520780]
    }
    label _end_chpl__defaultHash[520780]
    (520784 return ret[520782])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155645](arg i[155642] :
  (155641 call int(64)[13] 64)) : _unknown[51] "inline"
  {
    unknown ret[520800] "RVV" "temp"
    unknown call_tmp[672471] "expr temp" "maybe param" "maybe type" "temp"
    (672474 'move' call_tmp[672471](155651 call _gen_key i[155642]))
    (520806 'move' ret[520800](520805 'coerce' call_tmp[672471] uint(64)[115]))
    (520802 return ret[520800])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155667](arg u[155664] :
  (155663 call uint(64)[115] 64)) : _unknown[51] "inline"
  {
    unknown ret[520810] "RVV" "temp"
    unknown call_tmp[672476] "expr temp" "maybe param" "maybe type" "temp"
    (672479 'move' call_tmp[672476](155673 call _gen_key u[155664]))
    (520816 'move' ret[520810](520815 'coerce' call_tmp[672476] uint(64)[115]))
    (520812 return ret[520810])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155684](arg e[155682]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[520820] "RVV" "temp"
    unknown call_tmp[672481] "expr temp" "maybe param" "maybe type" "temp"
    (672484 'move' call_tmp[672481](155694 call chpl__enumToOrder e[155682]))
    unknown call_tmp[672486] "expr temp" "maybe param" "maybe type" "temp"
    (672489 'move' call_tmp[672486](155696 call _gen_key call_tmp[672481]))
    (520825 'move' ret[520820](520824 'deref' call_tmp[672486]))
    (520822 return ret[520820])
  }
  where {
    (155689 call isEnum e[155682])
  }
  function chpl__defaultHash[155709](arg f[155706]:real(64)[16]) : _unknown[51] "inline"
  {
    unknown ret[520829] "RVV" "temp"
    unknown call_tmp[672491] "expr temp" "maybe param" "maybe type" "temp"
    (672494 'move' call_tmp[672491](155732 'real2int' f[155706]))
    unknown call_tmp[672496] "expr temp" "maybe param" "maybe type" "temp"
    (672499 'move' call_tmp[672496](155734 call _gen_key call_tmp[672491]))
    (520835 'move' ret[520829](520834 'coerce' call_tmp[672496] uint(64)[115]))
    (520831 return ret[520829])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155747](arg c[155744]:complex(128)[140]) : _unknown[51] "inline"
  {
    unknown ret[520839] "RVV" "temp"
    unknown call_tmp[672503] "expr temp" "maybe param" "maybe type" "temp"
    (672506 'move' call_tmp[672503](155754 call re _mt[243] c[155744]))
    unknown call_tmp[672508] "expr temp" "maybe param" "maybe type" "temp"
    (672511 'move' call_tmp[672508](155757 'real2int' call_tmp[672503]))
    unknown call_tmp[672515] "expr temp" "maybe param" "maybe type" "temp"
    (672518 'move' call_tmp[672515](155761 call im _mt[243] c[155744]))
    unknown call_tmp[672520] "expr temp" "maybe param" "maybe type" "temp"
    (672523 'move' call_tmp[672520](155764 'real2int' call_tmp[672515]))
    unknown call_tmp[672525] "expr temp" "maybe param" "maybe type" "temp"
    (672528 'move' call_tmp[672525](155765 call ^ call_tmp[672508] call_tmp[672520]))
    unknown call_tmp[672530] "expr temp" "maybe param" "maybe type" "temp"
    (672533 'move' call_tmp[672530](155768 call _gen_key call_tmp[672525]))
    (520845 'move' ret[520839](520844 'coerce' call_tmp[672530] uint(64)[115]))
    (520841 return ret[520839])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155781](arg a[155778]:imag(64)[130]) : _unknown[51] "inline"
  {
    unknown ret[520849] "RVV" "temp"
    unknown call_tmp[672535] "expr temp" "maybe param" "maybe type" "temp"
    (672538 'move' call_tmp[672535](155790 call _i2r a[155778]))
    unknown call_tmp[672540] "expr temp" "maybe param" "maybe type" "temp"
    (672543 'move' call_tmp[672540](155791 'real2int' call_tmp[672535]))
    unknown call_tmp[672545] "expr temp" "maybe param" "maybe type" "temp"
    (672548 'move' call_tmp[672545](155793 call _gen_key call_tmp[672540]))
    (520855 'move' ret[520849](520854 'coerce' call_tmp[672545] uint(64)[115]))
    (520851 return ret[520849])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155806](arg u[155803]:chpl_taskID_t[163]) : _unknown[51] "inline"
  {
    unknown ret[520859] "RVV" "temp"
    unknown call_tmp[672550] "expr temp" "maybe param" "maybe type" "temp"
    (672553 'move' call_tmp[672550](155814 call int(64)[13] 64))
    unknown call_tmp[672555] "expr temp" "maybe param" "maybe type" "temp"
    (672558 'move' call_tmp[672555](155815 call _cast call_tmp[672550] u[155803]))
    unknown call_tmp[672560] "expr temp" "maybe param" "maybe type" "temp"
    (672563 'move' call_tmp[672560](155818 call _gen_key call_tmp[672555]))
    (520865 'move' ret[520859](520864 'coerce' call_tmp[672560] uint(64)[115]))
    (520861 return ret[520859])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155833](arg l[155830]:_array[133600](?)) : _unknown[51] "inline"
  {
    unknown ret[520869] "RVV" "temp"
    unknown hash[155838] "dead at end of block" "insert auto destroy"
    (544005 'init var' hash[155838] 0 uint(64)[115])
    (155841 'end of statement')
    unknown i[155844] "dead at end of block" "insert auto destroy"
    (544007 'init var' i[155844] 1)
    (155847 'end of statement')
    {
      unknown _indexOfInterest[155869] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[155870] "expr temp" "temp"
      (155879 'move' _iterator[155870](155877 call _getIterator l[155830]))
      Defer
      {
        {
          (155895 call _freeIterator _iterator[155870])
        }
      }
      { scopeless type
        (155884 'move' _indexOfInterest[155869](155881 call iteratorIndex _iterator[155870]))
      }
      ForLoop[155871]
      {
        unknown obj[155888] "index var" "insert auto destroy"
        (482101 'end of statement')
        (155890 'move' obj[155888] _indexOfInterest[155869])
        (482102 'end of statement' obj[155888])
        {
          unknown call_tmp[672565] "expr temp" "maybe param" "maybe type" "temp"
          (672568 'move' call_tmp[672565](155855 call chpl__defaultHash obj[155888]))
          unknown call_tmp[672570] "expr temp" "maybe param" "maybe type" "temp"
          (672573 'move' call_tmp[672570](155859 call chpl__defaultHashCombine call_tmp[672565] hash[155838] i[155844]))
          (155860 call = hash[155838] call_tmp[672570])
          (482104 'end of statement' hash[155838] obj[155888] hash[155838] i[155844])
          (155866 call += i[155844] 1)
          (482109 'end of statement' i[155844])
        }
        label _continueLabel[155874]
        _indexOfInterest[155869]
        _iterator[155870]
      }
      label _breakLabel[155875]
    }
    (520875 'move' ret[520869](520874 'coerce' hash[155838] uint(64)[115]))
    gotoReturn _end_chpl__defaultHash[520867] _end_chpl__defaultHash[520867]
    (482111 'end of statement' hash[155838])
    label _end_chpl__defaultHash[520867]
    (520871 return ret[520869])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155916](arg o[155913]:borrowed object?[415395]) : _unknown[51] "inline"
  {
    unknown ret[520881] "RVV" "temp"
    unknown call_tmp[672575] "expr temp" "maybe param" "maybe type" "temp"
    (672578 'move' call_tmp[672575](155939 'object2int' o[155913]))
    unknown call_tmp[672580] "expr temp" "maybe param" "maybe type" "temp"
    (672583 'move' call_tmp[672580](155941 call _gen_key call_tmp[672575]))
    (520887 'move' ret[520881](520886 'coerce' call_tmp[672580] uint(64)[115]))
    (520883 return ret[520881])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155954](arg l[155951]:locale[28]) : _unknown[51] "inline"
  {
    unknown ret[520891] "RVV" "temp"
    unknown call_tmp[672587] "expr temp" "maybe param" "maybe type" "temp"
    (672590 'move' call_tmp[672587](155961 call _value _mt[243] l[155951]))
    unknown call_tmp[672592] "expr temp" "maybe param" "maybe type" "temp"
    (672595 'move' call_tmp[672592](155964 'object2int' call_tmp[672587]))
    unknown call_tmp[672597] "expr temp" "maybe param" "maybe type" "temp"
    (672600 'move' call_tmp[672597](155966 call _gen_key call_tmp[672592]))
    (520897 'move' ret[520891](520896 'coerce' call_tmp[672597] uint(64)[115]))
    (520893 return ret[520891])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155979](arg r[155976]:range[64316](?)) : _unknown[51] "inline"
  {
    unknown ret[520901] "RVV" "temp"
    unknown ret[155987] "dead at end of block" "insert auto destroy"
    (544009 'default init var' ret[155987] uint(64)[115])
    (155990 'end of statement')
    {
      unknown i[156085] "dead at end of block" "insert auto destroy"
      (544011 'init var' i[156085] 0)
      (482115 'end of statement')
      unknown tmp[156086] "maybe param" "temp"
      unknown call_tmp[672602] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (672605 'move' call_tmp[672602](155994 'typeof' r[155976]))
      unknown call_tmp[672607] "expr temp" "maybe param" "maybe type" "temp"
      (672610 'move' call_tmp[672607](155996 call numImplementationFields call_tmp[672602]))
      (156098 'move' tmp[156086](156096 call chpl_compute_low_param_loop_bound 1 call_tmp[672607]))
      unknown tmp[156087] "maybe param" "temp"
      unknown call_tmp[672612] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (672615 'move' call_tmp[672612](156104 'typeof' r[155976]))
      unknown call_tmp[672617] "expr temp" "maybe param" "maybe type" "temp"
      (672620 'move' call_tmp[672617](156103 call numImplementationFields call_tmp[672612]))
      (156108 'move' tmp[156087](156106 call chpl_compute_high_param_loop_bound 1 call_tmp[672617]))
      unknown tmp[156088] "maybe param" "temp"
      (156111 'move' tmp[156088] 1)
      ParamForLoop[156113]
      { i[156085] tmp[156086] tmp[156087] tmp[156088]
        {
          unknown tmp[427651] "maybe param" "temp"
          unknown tmp[427672] "maybe param" "temp"
          unknown call_tmp[672622] "expr temp" "maybe param" "maybe type" "temp"
          (672625 'move' call_tmp[672622](156004 call getImplementationField r[155976] i[156085]))
          unknown call_tmp[672627] "expr temp" "maybe param" "maybe type" "temp"
          (672630 'move' call_tmp[672627](156006 call isParam call_tmp[672622]))
          (427683 'move' tmp[427672](156008 call == call_tmp[672627] 0))
          unknown call_tmp[672632] "expr temp" "maybe param" "maybe type" "temp"
          (672635 'move' call_tmp[672632](427685 call _cond_invalid tmp[427672]))
          if call_tmp[672632]
          {
            (427688 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[569468] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[569469] "maybe param" "temp"
          unknown call_tmp[672637] "expr temp" "maybe param" "maybe type" "temp"
          (672640 'move' call_tmp[672637](427673 call isTrue tmp[427672]))
          (569474 'move' tmp[569469](569472 call _cond_test call_tmp[672637]))
          if tmp[569469]
          {
            unknown tmp[569476] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[672642] "expr temp" "maybe param" "maybe type" "temp"
            (672645 'move' call_tmp[672642](156015 call getImplementationField r[155976] i[156085]))
            unknown call_tmp[672647] "expr temp" "maybe param" "maybe type" "temp"
            (672650 'move' call_tmp[672647](156017 call isType call_tmp[672642]))
            unknown call_tmp[672652] "expr temp" "maybe param" "maybe type" "temp"
            (672655 'move' call_tmp[672652](156019 call == call_tmp[672647] 0))
            (569478 'move' tmp[569476](427676 call isTrue call_tmp[672652]))
            (569483 'move' tmp[569468](569480 '_paramFoldLogical' tmp[569469] tmp[569476]))
          }
          {
            (569488 'move' tmp[569468](569485 '_paramFoldLogical' tmp[569469] 0))
          }
          (427662 'move' tmp[427651] tmp[569468])
          unknown call_tmp[672657] "expr temp" "maybe param" "maybe type" "temp"
          (672660 'move' call_tmp[672657](427664 call _cond_invalid tmp[427651]))
          if call_tmp[672657]
          {
            (427667 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[569495] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[569496] "maybe param" "temp"
          unknown call_tmp[672662] "expr temp" "maybe param" "maybe type" "temp"
          (672665 'move' call_tmp[672662](427652 call isTrue tmp[427651]))
          (569501 'move' tmp[569496](569499 call _cond_test call_tmp[672662]))
          if tmp[569496]
          {
            { scopeless type
              unknown call_type_tmp[492409] "expr temp" "maybe type" "temp" "type variable"
              unknown call_tmp[672667] "expr temp" "maybe param" "maybe type" "temp"
              (672670 'move' call_tmp[672667](156028 call getImplementationField r[155976] i[156085]))
              (492413 'move' call_type_tmp[492409](156029 'typeof' call_tmp[672667]))
            }
            unknown tmp[569503] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[672672] "expr temp" "maybe param" "maybe type" "temp"
            (672675 'move' call_tmp[672672](156031 call isNothingType call_type_tmp[492409]))
            unknown call_tmp[672677] "expr temp" "maybe param" "maybe type" "temp"
            (672680 'move' call_tmp[672677](156033 call == call_tmp[672672] 0))
            (569505 'move' tmp[569503](427655 call isTrue call_tmp[672677]))
            (569510 'move' tmp[569495](569507 '_paramFoldLogical' tmp[569496] tmp[569503]))
          }
          {
            (569515 'move' tmp[569495](569512 '_paramFoldLogical' tmp[569496] 0))
          }
          unknown call_tmp[672682] "expr temp" "maybe param" "maybe type" "temp"
          (672685 'move' call_tmp[672682](156080 call _cond_test tmp[569495]))
          if call_tmp[672682]
          {
            const field[156042] "dead at end of block" "const" "ref var"
            unknown call_tmp[672687] "expr temp" "maybe param" "maybe type" "temp"
            (672690 'move' call_tmp[672687](156041 call getImplementationField r[155976] i[156085]))
            (544014 'move' field[156042](544013 'addr of' call_tmp[672687]))
            (156045 'end of statement')
            unknown call_tmp[672692] "maybe param" "maybe type" "temp"
            (672695 'move' call_tmp[672692](156050 call chpl__defaultHash field[156042]))
            const fieldHash[156051] "dead at end of block" "const" "insert auto destroy"
            (544016 'init var' fieldHash[156051] call_tmp[672692])
            (156054 'end of statement' i[156085] field[156042])
            unknown call_tmp[672697] "expr temp" "maybe param" "maybe type" "temp"
            (672700 'move' call_tmp[672697](156057 call == i[156085] 1))
            unknown call_tmp[672702] "expr temp" "maybe param" "maybe type" "temp"
            (672705 'move' call_tmp[672702](156074 call _cond_test call_tmp[672697]))
            if call_tmp[672702]
            {
              (156061 call = ret[155987] fieldHash[156051])
              (482120 'end of statement' ret[155987] fieldHash[156051])
            }
            {
              unknown call_tmp[672707] "expr temp" "maybe param" "maybe type" "temp"
              (672710 'move' call_tmp[672707](156070 call chpl__defaultHashCombine fieldHash[156051] ret[155987] i[156085]))
              (156071 call = ret[155987] call_tmp[672707])
              (482123 'end of statement' ret[155987] fieldHash[156051] ret[155987] i[156085])
            }
          }
        }
      }
      label _unused_continueLabel[156090]
      label _breakLabel[156089]
    }
    (520907 'move' ret[520901](520906 'coerce' ret[155987] uint(64)[115]))
    gotoReturn _end_chpl__defaultHash[520899] _end_chpl__defaultHash[520899]
    (482128 'end of statement' ret[155987])
    label _end_chpl__defaultHash[520899]
    (520903 return ret[520901])
    (355200 'used modules list'(155983 'use' Reflection[224799]))
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__validDefaultAssocDomIdxType[156132](arg idxType[156130]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[520913] "RVV" "param" "temp"
    (520918 'move' ret[520913](520917 'deref' 0))
    (520915 return ret[520913])
  }
  function chpl__validDefaultAssocDomIdxType[156144](arg idxType[156142]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[520922] "RVV" "param" "temp"
    (520927 'move' ret[520922](520926 'deref' 1))
    (520924 return ret[520922])
  }
  where {
    unknown tmp[427693] "maybe param" "temp"
    unknown tmp[427714] "maybe param" "temp"
    unknown tmp[427735] "maybe param" "temp"
    unknown tmp[427756] "maybe param" "temp"
    unknown tmp[427777] "maybe param" "temp"
    unknown tmp[427798] "maybe param" "temp"
    unknown tmp[427819] "maybe param" "temp"
    unknown tmp[427840] "maybe param" "temp"
    unknown tmp[427861] "maybe param" "temp"
    unknown tmp[427882] "maybe param" "temp"
    unknown tmp[427903] "maybe param" "temp"
    unknown tmp[427924] "maybe param" "temp"
    unknown tmp[427945] "maybe param" "temp"
    (427956 'move' tmp[427945](156149 call isBoolType idxType[156142]))
    unknown call_tmp[672712] "expr temp" "maybe param" "maybe type" "temp"
    (672715 'move' call_tmp[672712](427958 call _cond_invalid tmp[427945]))
    if call_tmp[672712]
    {
      (427961 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569522] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569523] "maybe param" "temp"
    unknown call_tmp[672717] "expr temp" "maybe param" "maybe type" "temp"
    (672720 'move' call_tmp[672717](427946 call isTrue tmp[427945]))
    (569528 'move' tmp[569523](569526 call _cond_test call_tmp[672717]))
    if tmp[569523]
    {
      (569533 'move' tmp[569522](569530 '_paramFoldLogical' tmp[569523] 1))
    }
    {
      unknown tmp[569535] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672722] "expr temp" "maybe param" "maybe type" "temp"
      (672725 'move' call_tmp[672722](156153 call isIntType idxType[156142]))
      (569537 'move' tmp[569535](427950 call isTrue call_tmp[672722]))
      (569542 'move' tmp[569522](569539 '_paramFoldLogical' tmp[569523] tmp[569535]))
    }
    (427935 'move' tmp[427924] tmp[569522])
    unknown call_tmp[672727] "expr temp" "maybe param" "maybe type" "temp"
    (672730 'move' call_tmp[672727](427937 call _cond_invalid tmp[427924]))
    if call_tmp[672727]
    {
      (427940 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569549] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569550] "maybe param" "temp"
    unknown call_tmp[672732] "expr temp" "maybe param" "maybe type" "temp"
    (672735 'move' call_tmp[672732](427925 call isTrue tmp[427924]))
    (569555 'move' tmp[569550](569553 call _cond_test call_tmp[672732]))
    if tmp[569550]
    {
      (569560 'move' tmp[569549](569557 '_paramFoldLogical' tmp[569550] 1))
    }
    {
      unknown tmp[569562] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672737] "expr temp" "maybe param" "maybe type" "temp"
      (672740 'move' call_tmp[672737](156159 call isUintType idxType[156142]))
      (569564 'move' tmp[569562](427929 call isTrue call_tmp[672737]))
      (569569 'move' tmp[569549](569566 '_paramFoldLogical' tmp[569550] tmp[569562]))
    }
    (427914 'move' tmp[427903] tmp[569549])
    unknown call_tmp[672742] "expr temp" "maybe param" "maybe type" "temp"
    (672745 'move' call_tmp[672742](427916 call _cond_invalid tmp[427903]))
    if call_tmp[672742]
    {
      (427919 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569576] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569577] "maybe param" "temp"
    unknown call_tmp[672747] "expr temp" "maybe param" "maybe type" "temp"
    (672750 'move' call_tmp[672747](427904 call isTrue tmp[427903]))
    (569582 'move' tmp[569577](569580 call _cond_test call_tmp[672747]))
    if tmp[569577]
    {
      (569587 'move' tmp[569576](569584 '_paramFoldLogical' tmp[569577] 1))
    }
    {
      unknown tmp[569589] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672752] "expr temp" "maybe param" "maybe type" "temp"
      (672755 'move' call_tmp[672752](156165 call isRealType idxType[156142]))
      (569591 'move' tmp[569589](427908 call isTrue call_tmp[672752]))
      (569596 'move' tmp[569576](569593 '_paramFoldLogical' tmp[569577] tmp[569589]))
    }
    (427893 'move' tmp[427882] tmp[569576])
    unknown call_tmp[672757] "expr temp" "maybe param" "maybe type" "temp"
    (672760 'move' call_tmp[672757](427895 call _cond_invalid tmp[427882]))
    if call_tmp[672757]
    {
      (427898 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569603] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569604] "maybe param" "temp"
    unknown call_tmp[672762] "expr temp" "maybe param" "maybe type" "temp"
    (672765 'move' call_tmp[672762](427883 call isTrue tmp[427882]))
    (569609 'move' tmp[569604](569607 call _cond_test call_tmp[672762]))
    if tmp[569604]
    {
      (569614 'move' tmp[569603](569611 '_paramFoldLogical' tmp[569604] 1))
    }
    {
      unknown tmp[569616] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672767] "expr temp" "maybe param" "maybe type" "temp"
      (672770 'move' call_tmp[672767](156171 call isImagType idxType[156142]))
      (569618 'move' tmp[569616](427887 call isTrue call_tmp[672767]))
      (569623 'move' tmp[569603](569620 '_paramFoldLogical' tmp[569604] tmp[569616]))
    }
    (427872 'move' tmp[427861] tmp[569603])
    unknown call_tmp[672772] "expr temp" "maybe param" "maybe type" "temp"
    (672775 'move' call_tmp[672772](427874 call _cond_invalid tmp[427861]))
    if call_tmp[672772]
    {
      (427877 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569630] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569631] "maybe param" "temp"
    unknown call_tmp[672777] "expr temp" "maybe param" "maybe type" "temp"
    (672780 'move' call_tmp[672777](427862 call isTrue tmp[427861]))
    (569636 'move' tmp[569631](569634 call _cond_test call_tmp[672777]))
    if tmp[569631]
    {
      (569641 'move' tmp[569630](569638 '_paramFoldLogical' tmp[569631] 1))
    }
    {
      unknown tmp[569643] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672782] "expr temp" "maybe param" "maybe type" "temp"
      (672785 'move' call_tmp[672782](156177 call isComplexType idxType[156142]))
      (569645 'move' tmp[569643](427866 call isTrue call_tmp[672782]))
      (569650 'move' tmp[569630](569647 '_paramFoldLogical' tmp[569631] tmp[569643]))
    }
    (427851 'move' tmp[427840] tmp[569630])
    unknown call_tmp[672787] "expr temp" "maybe param" "maybe type" "temp"
    (672790 'move' call_tmp[672787](427853 call _cond_invalid tmp[427840]))
    if call_tmp[672787]
    {
      (427856 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569657] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569658] "maybe param" "temp"
    unknown call_tmp[672792] "expr temp" "maybe param" "maybe type" "temp"
    (672795 'move' call_tmp[672792](427841 call isTrue tmp[427840]))
    (569663 'move' tmp[569658](569661 call _cond_test call_tmp[672792]))
    if tmp[569658]
    {
      (569668 'move' tmp[569657](569665 '_paramFoldLogical' tmp[569658] 1))
    }
    {
      unknown tmp[569670] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672797] "expr temp" "maybe param" "maybe type" "temp"
      (672800 'move' call_tmp[672797](156182 call == idxType[156142] chpl_taskID_t[163]))
      (569672 'move' tmp[569670](427845 call isTrue call_tmp[672797]))
      (569677 'move' tmp[569657](569674 '_paramFoldLogical' tmp[569658] tmp[569670]))
    }
    (427830 'move' tmp[427819] tmp[569657])
    unknown call_tmp[672802] "expr temp" "maybe param" "maybe type" "temp"
    (672805 'move' call_tmp[672802](427832 call _cond_invalid tmp[427819]))
    if call_tmp[672802]
    {
      (427835 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569684] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569685] "maybe param" "temp"
    unknown call_tmp[672807] "expr temp" "maybe param" "maybe type" "temp"
    (672810 'move' call_tmp[672807](427820 call isTrue tmp[427819]))
    (569690 'move' tmp[569685](569688 call _cond_test call_tmp[672807]))
    if tmp[569685]
    {
      (569695 'move' tmp[569684](569692 '_paramFoldLogical' tmp[569685] 1))
    }
    {
      unknown tmp[569697] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672812] "expr temp" "maybe param" "maybe type" "temp"
      (672815 'move' call_tmp[672812](156188 call == idxType[156142] string[26]))
      (569699 'move' tmp[569697](427824 call isTrue call_tmp[672812]))
      (569704 'move' tmp[569684](569701 '_paramFoldLogical' tmp[569685] tmp[569697]))
    }
    (427809 'move' tmp[427798] tmp[569684])
    unknown call_tmp[672817] "expr temp" "maybe param" "maybe type" "temp"
    (672820 'move' call_tmp[672817](427811 call _cond_invalid tmp[427798]))
    if call_tmp[672817]
    {
      (427814 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569711] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569712] "maybe param" "temp"
    unknown call_tmp[672822] "expr temp" "maybe param" "maybe type" "temp"
    (672825 'move' call_tmp[672822](427799 call isTrue tmp[427798]))
    (569717 'move' tmp[569712](569715 call _cond_test call_tmp[672822]))
    if tmp[569712]
    {
      (569722 'move' tmp[569711](569719 '_paramFoldLogical' tmp[569712] 1))
    }
    {
      unknown tmp[569724] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672827] "expr temp" "maybe param" "maybe type" "temp"
      (672830 'move' call_tmp[672827](156194 call == idxType[156142] bytes[24]))
      (569726 'move' tmp[569724](427803 call isTrue call_tmp[672827]))
      (569731 'move' tmp[569711](569728 '_paramFoldLogical' tmp[569712] tmp[569724]))
    }
    (427788 'move' tmp[427777] tmp[569711])
    unknown call_tmp[672832] "expr temp" "maybe param" "maybe type" "temp"
    (672835 'move' call_tmp[672832](427790 call _cond_invalid tmp[427777]))
    if call_tmp[672832]
    {
      (427793 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569738] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569739] "maybe param" "temp"
    unknown call_tmp[672837] "expr temp" "maybe param" "maybe type" "temp"
    (672840 'move' call_tmp[672837](427778 call isTrue tmp[427777]))
    (569744 'move' tmp[569739](569742 call _cond_test call_tmp[672837]))
    if tmp[569739]
    {
      (569749 'move' tmp[569738](569746 '_paramFoldLogical' tmp[569739] 1))
    }
    {
      unknown tmp[569751] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672842] "expr temp" "maybe param" "maybe type" "temp"
      (672845 'move' call_tmp[672842](156200 call == idxType[156142] c_string[19]))
      (569753 'move' tmp[569751](427782 call isTrue call_tmp[672842]))
      (569758 'move' tmp[569738](569755 '_paramFoldLogical' tmp[569739] tmp[569751]))
    }
    (427767 'move' tmp[427756] tmp[569738])
    unknown call_tmp[672847] "expr temp" "maybe param" "maybe type" "temp"
    (672850 'move' call_tmp[672847](427769 call _cond_invalid tmp[427756]))
    if call_tmp[672847]
    {
      (427772 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569765] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569766] "maybe param" "temp"
    unknown call_tmp[672852] "expr temp" "maybe param" "maybe type" "temp"
    (672855 'move' call_tmp[672852](427757 call isTrue tmp[427756]))
    (569771 'move' tmp[569766](569769 call _cond_test call_tmp[672852]))
    if tmp[569766]
    {
      (569776 'move' tmp[569765](569773 '_paramFoldLogical' tmp[569766] 1))
    }
    {
      unknown tmp[569778] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672857] "expr temp" "maybe param" "maybe type" "temp"
      (672860 'move' call_tmp[672857](156207 call isClassType idxType[156142]))
      (569780 'move' tmp[569778](427761 call isTrue call_tmp[672857]))
      (569785 'move' tmp[569765](569782 '_paramFoldLogical' tmp[569766] tmp[569778]))
    }
    (427746 'move' tmp[427735] tmp[569765])
    unknown call_tmp[672862] "expr temp" "maybe param" "maybe type" "temp"
    (672865 'move' call_tmp[672862](427748 call _cond_invalid tmp[427735]))
    if call_tmp[672862]
    {
      (427751 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569792] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569793] "maybe param" "temp"
    unknown call_tmp[672867] "expr temp" "maybe param" "maybe type" "temp"
    (672870 'move' call_tmp[672867](427736 call isTrue tmp[427735]))
    (569798 'move' tmp[569793](569796 call _cond_test call_tmp[672867]))
    if tmp[569793]
    {
      (569803 'move' tmp[569792](569800 '_paramFoldLogical' tmp[569793] 1))
    }
    {
      unknown tmp[569805] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672872] "expr temp" "maybe param" "maybe type" "temp"
      (672875 'move' call_tmp[672872](156213 call isEnumType idxType[156142]))
      (569807 'move' tmp[569805](427740 call isTrue call_tmp[672872]))
      (569812 'move' tmp[569792](569809 '_paramFoldLogical' tmp[569793] tmp[569805]))
    }
    (427725 'move' tmp[427714] tmp[569792])
    unknown call_tmp[672877] "expr temp" "maybe param" "maybe type" "temp"
    (672880 'move' call_tmp[672877](427727 call _cond_invalid tmp[427714]))
    if call_tmp[672877]
    {
      (427730 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569819] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569820] "maybe param" "temp"
    unknown call_tmp[672882] "expr temp" "maybe param" "maybe type" "temp"
    (672885 'move' call_tmp[672882](427715 call isTrue tmp[427714]))
    (569825 'move' tmp[569820](569823 call _cond_test call_tmp[672882]))
    if tmp[569820]
    {
      (569830 'move' tmp[569819](569827 '_paramFoldLogical' tmp[569820] 1))
    }
    {
      unknown tmp[569832] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672887] "expr temp" "maybe param" "maybe type" "temp"
      (672890 'move' call_tmp[672887](156219 call isTupleType idxType[156142]))
      (569834 'move' tmp[569832](427719 call isTrue call_tmp[672887]))
      (569839 'move' tmp[569819](569836 '_paramFoldLogical' tmp[569820] tmp[569832]))
    }
    (427704 'move' tmp[427693] tmp[569819])
    unknown call_tmp[672892] "expr temp" "maybe param" "maybe type" "temp"
    (672895 'move' call_tmp[672892](427706 call _cond_invalid tmp[427693]))
    if call_tmp[672892]
    {
      (427709 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569846] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569847] "maybe param" "temp"
    unknown call_tmp[672897] "expr temp" "maybe param" "maybe type" "temp"
    (672900 'move' call_tmp[672897](427694 call isTrue tmp[427693]))
    (569852 'move' tmp[569847](569850 call _cond_test call_tmp[672897]))
    if tmp[569847]
    {
      (569857 'move' tmp[569846](569854 '_paramFoldLogical' tmp[569847] 1))
    }
    {
      unknown tmp[569859] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672902] "expr temp" "maybe param" "maybe type" "temp"
      (672905 'move' call_tmp[672902](156225 call isRecordType idxType[156142]))
      (569861 'move' tmp[569859](427698 call isTrue call_tmp[672902]))
      (569866 'move' tmp[569846](569863 '_paramFoldLogical' tmp[569847] tmp[569859]))
    }
    (748379 call chpl_statementLevelSymbol tmp[569846])
  }
  (355198 'used modules list'(155371 'use' ChapelBase[307]))
}