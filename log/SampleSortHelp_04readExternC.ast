AST dump for SampleSortHelp after pass readExternC.
Module use list: 

{
  (353076 'use' ChapelStandard)
  (273919 'use' Sort)
  { scopeless
    unknown maxLogBuckets[273923] "param" 8
    (273926 'end of statement')
  }
  { scopeless
    unknown classifyUnrollFactor[273928] "param" 7
    (273931 'end of statement')
  }
  { scopeless
    const equalBucketThreshold[273933] "const" 5
    (273936 'end of statement')
  }
  { scopeless
    const maxInline[273938] "const" 16
    (273941 'end of statement')
  }
  { scopeless
    const oversampleFactor[273945] "const" 0.2
    (273948 'end of statement')
  }
  function log2int[273955](arg n[273952] :
  int[13]) : _unknown[51]
  {
    if(273964 call _cond_test(273959 call <= n 0))
    {
      { scopeless
        (273962 return 0)
      }
    }
    (273974 return(273973 call log2 n))
  }
  function computeLogBucketSize[273984](arg n[273981] :
  int[13]) : _unknown[51]
  {
    { scopeless
      const LogBuckets[273987] "const" 8
      (273990 'end of statement')
    }
    { scopeless
      const BaseCaseSize[273993] "const" 16
      (273996 'end of statement')
    }
    { scopeless
      const BaseCaseMultiplier[273998] "const" 16
      (274001 'end of statement')
    }
    { scopeless
      const SingleLevelThreshold[274006] "const"(274004 call * maxInline LogBuckets)
      (274009 'end of statement')
    }
    { scopeless
      const TwoLevelThreshold[274014] "const"(274012 call * SingleLevelThreshold LogBuckets)
      (274017 'end of statement')
    }
    { scopeless
      unknown ret[274019] 0
      (274022 'end of statement')
    }
    if(274077 call _cond_test(274025 call <= n SingleLevelThreshold))
    {
      (274038 call = ret(274037 call log2int(274034 call /(274031 call / n maxInline) 2)))
    }
    {
      { scopeless
        if(274073 call _cond_test(274044 call <= n TwoLevelThreshold))
        {
          (274063 call = ret(274061 call /(274058 call +(274056 call log2int(274053 call /(274050 call / n maxInline) 2)) 1) 2))
        }
        {
          (274069 call = ret maxLogBuckets)
        }
      }
    }
    (274088 call = ret(274087 call max 1 ret))
    (274097 call = ret(274096 call min maxLogBuckets ret))
    (274101 return ret)
  }
  function chooseSampleStep[274111](arg n[274108] :
  int[13], arg logNumBuckets[274114] :
  int[13]) : _unknown[51]
  {
    { scopeless
      unknown oversample[274128](274127 call min 1.0(274125 call * oversampleFactor(274124 call log2int n)))
      (274131 'end of statement')
    }
    { scopeless
      unknown step[274141](274140 call max 1(274138 call _cast int[13] oversample))
      (274144 'end of statement')
    }
    (274146 return step)
  }
  type SampleBucketizer[275547](?) unknown eltType[274151] "type variable" unknown storage[274162](274161 call c_array eltType(274159 call << 1 maxLogBuckets)) unknown sortedStorage[274174](274173 call c_array eltType(274171 call << 1 maxLogBuckets)) unknown logBuckets[274179] int[13] unknown numBuckets[274184] int[13] unknown equalBuckets[274189] bool[10] function SampleBucketizer[275547](?).writeThis[274197](arg _mt[275551]:_MT[238], arg this[275549]:SampleBucketizer[275547](?), arg ch[274195]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (274217 call <~> ch "SampleBucketizer(")
    (274242 call <~>(274239 call <~> ch "\n logBuckets=") logBuckets)
    (274266 call <~>(274263 call <~> ch "\n numBuckets=") numBuckets)
    (274290 call <~>(274287 call <~> ch "\n equalBuckets=") equalBuckets)
    (274311 call <~> ch "\n storage=")
    {
      unknown _indexOfInterest[274353] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274354] "expr temp" "temp"
      (274363 'move' _iterator[274354](274361 call _getIterator(274368 call chpl_direct_range_iter 0 numBuckets 1)))
      Defer
      {
        {
          (274384 call _freeIterator _iterator[274354])
        }
      }
      { scopeless type
        (274373 'move' _indexOfInterest[274353](274370 call iteratorIndex _iterator[274354]))
      }
      ForLoop[274355]
      {
        unknown i[274377] "index var" "insert auto destroy"
        (274379 'move' i[274377] _indexOfInterest[274353])
        {
          (274349 call <~> ch(274348 'try!-expr'(274347 call(274339 call . " %xt" c"format")(274345 call storage i))))
        }
        label _continueLabel[274358]
        _indexOfInterest[274353]
        _iterator[274354]
      }
      label _breakLabel[274359]
    }
    (274409 call <~> ch "\n sortedStorage=")
    {
      unknown _indexOfInterest[274433] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274434] "expr temp" "temp"
      (274443 'move' _iterator[274434](274441 call _getIterator(274448 call chpl_direct_range_iter 0 numBuckets 1)))
      Defer
      {
        {
          (274464 call _freeIterator _iterator[274434])
        }
      }
      { scopeless type
        (274453 'move' _indexOfInterest[274433](274450 call iteratorIndex _iterator[274434]))
      }
      ForLoop[274435]
      {
        unknown i[274457] "index var" "insert auto destroy"
        (274459 'move' i[274457] _indexOfInterest[274433])
        {
          (274429 call <~> ch(274428 'try!-expr'(274427 call(274419 call . " %xt" c"format")(274425 call sortedStorage i))))
        }
        label _continueLabel[274438]
        _indexOfInterest[274433]
        _iterator[274434]
      }
      label _breakLabel[274439]
    }
    (274473 call <~> ch ")\n")
  } function SampleBucketizer[275547](?).getNumBuckets[274480](arg _mt[275555]:_MT[238], arg this[275553]:SampleBucketizer[275547](?)) : _unknown[51] "method" "primary method"
  {
    (274492 return(274490 call * numBuckets(274488 call + 1(274486 call _cast int[13] equalBuckets))))
  } function SampleBucketizer[275547](?).getBinsToRecursivelySort[274499](arg _mt[275559]:_MT[238], arg this[275557]:SampleBucketizer[275547](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown r[274506](274505 call range(stridable = 1))
      (274509 'end of statement')
    }
    if(274543 call _cond_test equalBuckets)
    {
      (274525 call = r(274523 call chpl_by(274520 call chpl_build_bounded_range 0(274518 call -(274516 call getNumBuckets) 1)) 2))
    }
    {
      (274539 call = r(274537 call chpl_build_bounded_range 0(274535 call -(274533 call getNumBuckets) 1)))
    }
    (274548 return r)
  } function SampleBucketizer[275547](?).getNextStartBit[274558](arg _mt[275563]:_MT[238], arg this[275561]:SampleBucketizer[275547](?), arg start_bit[274555] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (274561 return start_bit)
  } function SampleBucketizer[275547](?).build[274572](arg _mt[275567]:_MT[238], arg this[275565]:SampleBucketizer[275547](?), arg logBuckets[274569] :
  int[13], arg equalBuckets[274575] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (274585 call =(274581 call . this c"logBuckets") logBuckets)
    (274599 call =(274592 call . this c"numBuckets")(274597 call << 1 logBuckets))
    (274609 call =(274605 call . this c"equalBuckets") equalBuckets)
    { scopeless
      unknown numSplitters[274619](274617 call -(274613 call . this c"numBuckets") 1)
      (274622 'end of statement')
    }
    (274634 call =(274626 call sortedStorage numSplitters)(274633 call sortedStorage(274630 call - numSplitters 1)))
    (274642 call build 0 numSplitters 1)
  } function SampleBucketizer[275547](?).build[274652](arg _mt[275571]:_MT[238], arg this[275569]:SampleBucketizer[275547](?), arg left[274649] :
  int[13], arg right[274655] :
  int[13], arg pos[274659] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown mid[274672](274670 call + left(274668 call /(274665 call - right left) 2))
      (274675 'end of statement')
    }
    (274685 call =(274680 call storage pos)(274684 call sortedStorage mid))
    if(274719 call _cond_test(274693 call <(274690 call * 2 pos) numBuckets))
    {
      (274703 call build left mid(274701 call * 2 pos))
      (274717 call build mid right(274715 call +(274712 call * 2 pos) 1))
    }
  } function SampleBucketizer[275547](?).splitter[274731](arg _mt[275575]:_MT[238], arg this[275573]:SampleBucketizer[275547](?), arg i[274728] :
  int[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (274738 return(274737 call storage i))
  }
  { scopeless type
    eltType
  } function SampleBucketizer[275547](?).sortedSplitter[274750](arg _mt[275579]:_MT[238], arg this[275577]:SampleBucketizer[275547](?), arg i[274747] :
  int[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (274757 return(274756 call sortedStorage i))
  }
  { scopeless type
    eltType
  } function SampleBucketizer[275547](?).bucketForRecord[274767](arg _mt[275583]:_MT[238], arg this[275581]:SampleBucketizer[275547](?), arg a[274765]:_any[178](?), arg criterion[274769]:_any[178](?), arg startbit[274771]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown bk[274774] 1
      (274777 'end of statement')
    }
    {
      unknown _indexOfInterest[274812] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274813] "expr temp" "temp"
      (274822 'move' _iterator[274813](274820 call _getIterator(274829 call chpl_direct_counted_range_iter 0 logBuckets)))
      Defer
      {
        {
          (274845 call _freeIterator _iterator[274813])
        }
      }
      { scopeless type
        (274834 'move' _indexOfInterest[274812](274831 call iteratorIndex _iterator[274813]))
      }
      ForLoop[274814]
      {
        unknown lg[274838] "index var" "insert auto destroy"
        (274840 'move' lg[274838] _indexOfInterest[274812])
        {
          (274808 call = bk(274806 call +(274789 call * 2 bk)(274804 call _cast int[13](274801 call <(274799 call chpl_compare(274795 call splitter bk) a criterion) 0))))
        }
        label _continueLabel[274817]
        _indexOfInterest[274812]
        _iterator[274813]
      }
      label _breakLabel[274818]
    }
    if(274882 call _cond_test equalBuckets)
    {
      (274878 call = bk(274876 call +(274856 call * 2 bk)(274874 call _cast int[13](274871 call ==(274869 call chpl_compare a(274867 call sortedSplitter(274864 call - bk numBuckets)) criterion) 0))))
    }
    (274898 return(274896 call - bk(274893 IfExpr  equalBuckets then
    { scopeless
      (274890 call * 2 numBuckets)
    } else
    { scopeless
      numBuckets
    } )))
  } function SampleBucketizer[275547](?).classify[274906](arg _mt[275587]:_MT[238], arg this[275585]:SampleBucketizer[275547](?), arg A[274904]:_any[178](?), arg start_n[274908]:_any[178](?), arg end_n[274910]:_any[178](?), arg criterion[274912]:_any[178](?), arg startbit[274914]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      const paramEqualBuckets[274917] "const" equalBuckets
      (274920 'end of statement')
    }
    { scopeless
      const paramLogBuckets[274923] "const" logBuckets
      (274926 'end of statement')
    }
    { scopeless
      const paramNumBuckets[274937] "const"(274935 call << 1(274933 call + paramLogBuckets(274931 call _cast int[13] paramEqualBuckets)))
      (274940 'end of statement')
    }
    { scopeless
      unknown b[274946](274945 call c_array int[13] classifyUnrollFactor)
      (274949 'end of statement')
    }
    { scopeless
      unknown cur[274951] start_n
      (274954 'end of statement')
    }
    {
      unknown tmp[275337] "temp"
      (275373 'move' tmp[275337](275362 call _cond_test(275364 call <= cur(275367 call - end_n(275370 call - classifyUnrollFactor 1)))))
      WhileDo[275342]
      {
        {
          {
            unknown _indexOfInterest[274982] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[274983] "expr temp" "temp"
            (274992 'move' _iterator[274983](274990 call _getIterator(275000 call chpl_direct_range_iter 0(274997 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (275016 call _freeIterator _iterator[274983])
              }
            }
            { scopeless type
              (275005 'move' _indexOfInterest[274982](275002 call iteratorIndex _iterator[274983]))
            }
            ForLoop[274984]
            {
              unknown i[275009] "index var" "insert auto destroy"
              (275011 'move' i[275009] _indexOfInterest[274982])
              {
                (274978 call =(274976 call b i) 1)
              }
              label _continueLabel[274987]
              _indexOfInterest[274982]
              _iterator[274983]
            }
            label _breakLabel[274988]
          }
          {
            unknown _indexOfInterest[275123] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[275124] "expr temp" "temp"
            (275133 'move' _iterator[275124](275131 call _getIterator(275141 call chpl_direct_range_iter 0(275138 call - paramLogBuckets 1) 1)))
            Defer
            {
              {
                (275157 call _freeIterator _iterator[275124])
              }
            }
            { scopeless type
              (275146 'move' _indexOfInterest[275123](275143 call iteratorIndex _iterator[275124]))
            }
            ForLoop[275125]
            {
              unknown lg[275150] "index var" "insert auto destroy"
              (275152 'move' lg[275150] _indexOfInterest[275123])
              {
                {
                  unknown _indexOfInterest[275081] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[275082] "expr temp" "temp"
                  (275091 'move' _iterator[275082](275089 call _getIterator(275099 call chpl_direct_range_iter 0(275096 call - classifyUnrollFactor 1) 1)))
                  Defer
                  {
                    {
                      (275115 call _freeIterator _iterator[275082])
                    }
                  }
                  { scopeless type
                    (275104 'move' _indexOfInterest[275081](275101 call iteratorIndex _iterator[275082]))
                  }
                  ForLoop[275083]
                  {
                    unknown i[275108] "index var" "insert auto destroy"
                    (275110 'move' i[275108] _indexOfInterest[275081])
                    {
                      (275077 call =(275043 call b i)(275075 call +(275049 call * 2(275048 call b i))(275073 call _cast int[13](275070 call <(275068 call chpl_compare(275058 call splitter(275056 call b i))(275066 call A(275063 call + cur i)) criterion) 0))))
                    }
                    label _continueLabel[275086]
                    _indexOfInterest[275081]
                    _iterator[275082]
                  }
                  label _breakLabel[275087]
                }
              }
              label _continueLabel[275128]
              _indexOfInterest[275123]
              _iterator[275124]
            }
            label _breakLabel[275129]
          }
          if(275262 call _cond_test paramEqualBuckets)
          {
            {
              unknown _indexOfInterest[275220] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[275221] "expr temp" "temp"
              (275230 'move' _iterator[275221](275228 call _getIterator(275238 call chpl_direct_range_iter 0(275235 call - classifyUnrollFactor 1) 1)))
              Defer
              {
                {
                  (275254 call _freeIterator _iterator[275221])
                }
              }
              { scopeless type
                (275243 'move' _indexOfInterest[275220](275240 call iteratorIndex _iterator[275221]))
              }
              ForLoop[275222]
              {
                unknown i[275247] "index var" "insert auto destroy"
                (275249 'move' i[275247] _indexOfInterest[275220])
                {
                  (275216 call =(275176 call b i)(275214 call +(275182 call * 2(275181 call b i))(275212 call _cast int[13](275209 call ==(275207 call chpl_compare(275191 call A(275188 call + cur i))(275205 call sortedSplitter(275202 call -(275197 call b i)(275200 call / paramNumBuckets 2))) criterion) 0))))
                }
                label _continueLabel[275225]
                _indexOfInterest[275220]
                _iterator[275221]
              }
              label _breakLabel[275226]
            }
          }
          {
            unknown _indexOfInterest[275291] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[275292] "expr temp" "temp"
            (275301 'move' _iterator[275292](275299 call _getIterator(275309 call chpl_direct_range_iter 0(275306 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (275325 call _freeIterator _iterator[275292])
              }
            }
            { scopeless type
              (275314 'move' _indexOfInterest[275291](275311 call iteratorIndex _iterator[275292]))
            }
            ForLoop[275293]
            {
              unknown i[275318] "index var" "insert auto destroy"
              (275320 'move' i[275318] _indexOfInterest[275291])
              {
                (275288 yield(275286 call _build_tuple(275276 call + cur i)(275283 call -(275281 call b i) paramNumBuckets)))
              }
              label _continueLabel[275296]
              _indexOfInterest[275291]
              _iterator[275292]
            }
            label _breakLabel[275297]
          }
          (275334 call += cur classifyUnrollFactor)
        }
        label _continueLabel[275340]
        (275357 'move' tmp[275337](275346 call _cond_test(275348 call <= cur(275351 call - end_n(275354 call - classifyUnrollFactor 1)))))
        tmp[275337]
      }
      label _breakLabel[275341]
    }
    {
      unknown tmp[275517] "temp"
      (275541 'move' tmp[275517](275536 call _cond_test(275538 call <= cur end_n)))
      WhileDo[275522]
      {
        {
          { scopeless
            unknown bk[275381] 1
            (275384 'end of statement')
          }
          {
            unknown _indexOfInterest[275422] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[275423] "expr temp" "temp"
            (275432 'move' _iterator[275423](275430 call _getIterator(275439 call chpl_direct_counted_range_iter 0 paramLogBuckets)))
            Defer
            {
              {
                (275455 call _freeIterator _iterator[275423])
              }
            }
            { scopeless type
              (275444 'move' _indexOfInterest[275422](275441 call iteratorIndex _iterator[275423]))
            }
            ForLoop[275424]
            {
              unknown lg[275448] "index var" "insert auto destroy"
              (275450 'move' lg[275448] _indexOfInterest[275422])
              {
                (275418 call = bk(275416 call +(275396 call * 2 bk)(275414 call _cast int[13](275411 call <(275409 call chpl_compare(275402 call splitter bk)(275407 call A cur) criterion) 0))))
              }
              label _continueLabel[275427]
              _indexOfInterest[275422]
              _iterator[275423]
            }
            label _breakLabel[275428]
          }
          if(275498 call _cond_test paramEqualBuckets)
          {
            (275494 call = bk(275492 call +(275466 call * 2 bk)(275490 call _cast int[13](275487 call ==(275485 call chpl_compare(275472 call A cur)(275483 call sortedSplitter(275480 call - bk(275478 call / paramNumBuckets 2))) criterion) 0))))
          }
          (275510 yield(275508 call _build_tuple cur(275505 call - bk paramNumBuckets)))
          (275514 call += cur 1)
        }
        label _continueLabel[275520]
        (275531 'move' tmp[275517](275526 call _cond_test(275528 call <= cur end_n)))
        tmp[275517]
      }
      label _breakLabel[275521]
    }
  }
  function createSplittersFromSample[275594](arg A[275592]:_any[178](?), ref arg splitterBucketizer[275597] :
  SampleBucketizer, arg criterion[275600]:_any[178](?), arg start_n[275603] :
  int[13], arg sampleSize[275607] :
  int[13], arg sampleStep[275611] :
  int[13], in arg numBuckets[275615] :
  int[13], arg forceEqualBuckets[275620] :
  ?[260] =
  none[57]) : _unknown[51]
  {
    { scopeless
      unknown splitters[275630] "ref var"(275627 call . splitterBucketizer c"sortedStorage")
      (275633 'end of statement')
    }
    { scopeless
      unknown arrayIndex[275642](275640 call -(275637 call + start_n sampleStep) 1)
      (275645 'end of statement')
    }
    { scopeless
      unknown splitterIndex[275647] 0
      (275650 'end of statement')
    }
    (275659 call =(275654 call splitters splitterIndex)(275658 call A arrayIndex))
    {
      unknown _indexOfInterest[275712] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[275713] "expr temp" "temp"
      (275722 'move' _iterator[275713](275720 call _getIterator(275730 call chpl_direct_range_iter 2(275727 call - numBuckets 1) 1)))
      Defer
      {
        {
          (275746 call _freeIterator _iterator[275713])
        }
      }
      { scopeless type
        (275735 'move' _indexOfInterest[275712](275732 call iteratorIndex _iterator[275713]))
      }
      ForLoop[275714]
      {
        unknown i[275739] "index var" "insert auto destroy"
        (275741 'move' i[275739] _indexOfInterest[275712])
        {
          (275672 call += arrayIndex sampleStep)
          if(275708 call _cond_test(275689 call !=(275687 call chpl_compare(275680 call splitters splitterIndex)(275685 call A arrayIndex) criterion) 0))
          {
            (275693 call += splitterIndex 1)
            (275705 call =(275700 call splitters splitterIndex)(275704 call A arrayIndex))
          }
        }
        label _continueLabel[275717]
        _indexOfInterest[275712]
        _iterator[275713]
      }
      label _breakLabel[275718]
    }
    { scopeless
      unknown uniqueSplitters[275757](275755 call + 1 splitterIndex)
      (275760 'end of statement')
    }
    { scopeless
      unknown myUseEqualBuckets[275771](275769 call >=(275766 call -(275763 call - numBuckets 1) uniqueSplitters) equalBucketThreshold)
      (275774 'end of statement')
    }
    if(275794 call _cond_test(275786 call <(275780 call + 1(275778 call * 2 uniqueSplitters))(275784 call << 1 maxLogBuckets)))
    {
      (275790 call = myUseEqualBuckets 1)
    }
    if(275808 call _cond_test(275801 call !=(275799 'typeof' forceEqualBuckets) nothing[7]))
    {
      { scopeless
        (275805 call = myUseEqualBuckets forceEqualBuckets)
      }
    }
    { scopeless
      unknown logBuckets[275820](275818 call +(275816 call log2 uniqueSplitters) 1)
      (275823 'end of statement')
    }
    (275829 call = numBuckets(275827 call << 1 logBuckets))
    {
      unknown _indexOfInterest[275860] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[275861] "expr temp" "temp"
      (275870 'move' _iterator[275861](275868 call _getIterator(275881 call chpl_direct_range_iter(275874 call + uniqueSplitters 1)(275878 call - numBuckets 1) 1)))
      Defer
      {
        {
          (275897 call _freeIterator _iterator[275861])
        }
      }
      { scopeless type
        (275886 'move' _indexOfInterest[275860](275883 call iteratorIndex _iterator[275861]))
      }
      ForLoop[275862]
      {
        unknown i[275890] "index var" "insert auto destroy"
        (275892 'move' i[275890] _indexOfInterest[275860])
        {
          (275845 call += splitterIndex 1)
          (275857 call =(275852 call splitters splitterIndex)(275856 call A arrayIndex))
        }
        label _continueLabel[275865]
        _indexOfInterest[275860]
        _iterator[275861]
      }
      label _breakLabel[275866]
    }
    (275913 call(275907 call . splitterBucketizer c"build") logBuckets myUseEqualBuckets)
  }
  function putRandomSampleAtArrayStart[275923](in arg start_n[275920] :
  int[13], arg end_n[275926] :
  int[13], arg A[275932] :
  (275929 call chpl__buildArrayRuntimeType nil[44]), in arg numSamples[275936] :
  int[13], arg seed[275940] =
  1) : _unknown[51]
  {
    (275944 'use' Random)
    (275951 'import'(275948 call . Sort c"ShallowCopy"))
    { scopeless
      unknown Tmp[275966](275964 call chpl__buildArrayRuntimeType(275962 call chpl__ensureDomainExpr(275955 call chpl_build_bounded_range 1 1))(275959 call . A c"eltType"))
      (275969 'end of statement')
    }
    { scopeless
      unknown randNums[275979](275978 call createRandomStream(seed = seed)(eltType = int[13])(parSafe = 0))
      (275982 'end of statement')
    }
    {
      unknown tmp[276064] "temp"
      (276088 'move' tmp[276064](276083 call _cond_test(276085 call > numSamples 0)))
      WhileDo[276069]
      {
        {
          (275989 call -= numSamples 1)
          { scopeless
            unknown offset[276003](276002 call(275996 call . randNums c"getNext") start_n end_n)
            (276006 'end of statement')
          }
          if(276055 call _cond_test(276009 call != offset start_n))
          {
            { scopeless
              unknown tmp[276015](276012 call . A c"eltType")
              (276018 'end of statement')
            }
            (276030 call(276021 call . ShallowCopy c"shallowCopy") Tmp 1 A start_n 1)
            (276041 call(276033 call . ShallowCopy c"shallowCopy") A start_n offset 1)
            (276053 call(276044 call . ShallowCopy c"shallowCopy") A offset Tmp 1 1)
          }
          (276061 call += start_n 1)
        }
        label _continueLabel[276067]
        (276078 'move' tmp[276064](276073 call _cond_test(276075 call > numSamples 0)))
        tmp[276064]
      }
      label _breakLabel[276068]
    }
  }
}