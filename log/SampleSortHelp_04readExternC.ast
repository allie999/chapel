AST dump for SampleSortHelp after pass readExternC.
Module use list: 

{
  (353078 'use' ChapelStandard)
  (273921 'use' Sort)
  { scopeless
    unknown maxLogBuckets[273925] "param" 8
    (273928 'end of statement')
  }
  { scopeless
    unknown classifyUnrollFactor[273930] "param" 7
    (273933 'end of statement')
  }
  { scopeless
    const equalBucketThreshold[273935] "const" 5
    (273938 'end of statement')
  }
  { scopeless
    const maxInline[273940] "const" 16
    (273943 'end of statement')
  }
  { scopeless
    const oversampleFactor[273947] "const" 0.2
    (273950 'end of statement')
  }
  function log2int[273957](arg n[273954] :
  int[13]) : _unknown[51]
  {
    if(273966 call _cond_test(273961 call <= n 0))
    {
      { scopeless
        (273964 return 0)
      }
    }
    (273976 return(273975 call log2 n))
  }
  function computeLogBucketSize[273986](arg n[273983] :
  int[13]) : _unknown[51]
  {
    { scopeless
      const LogBuckets[273989] "const" 8
      (273992 'end of statement')
    }
    { scopeless
      const BaseCaseSize[273995] "const" 16
      (273998 'end of statement')
    }
    { scopeless
      const BaseCaseMultiplier[274000] "const" 16
      (274003 'end of statement')
    }
    { scopeless
      const SingleLevelThreshold[274008] "const"(274006 call * maxInline LogBuckets)
      (274011 'end of statement')
    }
    { scopeless
      const TwoLevelThreshold[274016] "const"(274014 call * SingleLevelThreshold LogBuckets)
      (274019 'end of statement')
    }
    { scopeless
      unknown ret[274021] 0
      (274024 'end of statement')
    }
    if(274079 call _cond_test(274027 call <= n SingleLevelThreshold))
    {
      (274040 call = ret(274039 call log2int(274036 call /(274033 call / n maxInline) 2)))
    }
    {
      { scopeless
        if(274075 call _cond_test(274046 call <= n TwoLevelThreshold))
        {
          (274065 call = ret(274063 call /(274060 call +(274058 call log2int(274055 call /(274052 call / n maxInline) 2)) 1) 2))
        }
        {
          (274071 call = ret maxLogBuckets)
        }
      }
    }
    (274090 call = ret(274089 call max 1 ret))
    (274099 call = ret(274098 call min maxLogBuckets ret))
    (274103 return ret)
  }
  function chooseSampleStep[274113](arg n[274110] :
  int[13], arg logNumBuckets[274116] :
  int[13]) : _unknown[51]
  {
    { scopeless
      unknown oversample[274130](274129 call min 1.0(274127 call * oversampleFactor(274126 call log2int n)))
      (274133 'end of statement')
    }
    { scopeless
      unknown step[274143](274142 call max 1(274140 call _cast int[13] oversample))
      (274146 'end of statement')
    }
    (274148 return step)
  }
  type SampleBucketizer[275549](?) unknown eltType[274153] "type variable" unknown storage[274164](274163 call c_array eltType(274161 call << 1 maxLogBuckets)) unknown sortedStorage[274176](274175 call c_array eltType(274173 call << 1 maxLogBuckets)) unknown logBuckets[274181] int[13] unknown numBuckets[274186] int[13] unknown equalBuckets[274191] bool[10] function SampleBucketizer[275549](?).writeThis[274199](arg _mt[275553]:_MT[238], arg this[275551]:SampleBucketizer[275549](?), arg ch[274197]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (274219 call <~> ch "SampleBucketizer(")
    (274244 call <~>(274241 call <~> ch "\n logBuckets=") logBuckets)
    (274268 call <~>(274265 call <~> ch "\n numBuckets=") numBuckets)
    (274292 call <~>(274289 call <~> ch "\n equalBuckets=") equalBuckets)
    (274313 call <~> ch "\n storage=")
    {
      unknown _indexOfInterest[274355] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274356] "expr temp" "temp"
      (274365 'move' _iterator[274356](274363 call _getIterator(274370 call chpl_direct_range_iter 0 numBuckets 1)))
      Defer
      {
        {
          (274386 call _freeIterator _iterator[274356])
        }
      }
      { scopeless type
        (274375 'move' _indexOfInterest[274355](274372 call iteratorIndex _iterator[274356]))
      }
      ForLoop[274357]
      {
        unknown i[274379] "index var" "insert auto destroy"
        (274381 'move' i[274379] _indexOfInterest[274355])
        {
          (274351 call <~> ch(274350 'try!-expr'(274349 call(274341 call . " %xt" c"format")(274347 call storage i))))
        }
        label _continueLabel[274360]
        _indexOfInterest[274355]
        _iterator[274356]
      }
      label _breakLabel[274361]
    }
    (274411 call <~> ch "\n sortedStorage=")
    {
      unknown _indexOfInterest[274435] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274436] "expr temp" "temp"
      (274445 'move' _iterator[274436](274443 call _getIterator(274450 call chpl_direct_range_iter 0 numBuckets 1)))
      Defer
      {
        {
          (274466 call _freeIterator _iterator[274436])
        }
      }
      { scopeless type
        (274455 'move' _indexOfInterest[274435](274452 call iteratorIndex _iterator[274436]))
      }
      ForLoop[274437]
      {
        unknown i[274459] "index var" "insert auto destroy"
        (274461 'move' i[274459] _indexOfInterest[274435])
        {
          (274431 call <~> ch(274430 'try!-expr'(274429 call(274421 call . " %xt" c"format")(274427 call sortedStorage i))))
        }
        label _continueLabel[274440]
        _indexOfInterest[274435]
        _iterator[274436]
      }
      label _breakLabel[274441]
    }
    (274475 call <~> ch ")\n")
  } function SampleBucketizer[275549](?).getNumBuckets[274482](arg _mt[275557]:_MT[238], arg this[275555]:SampleBucketizer[275549](?)) : _unknown[51] "method" "primary method"
  {
    (274494 return(274492 call * numBuckets(274490 call + 1(274488 call _cast int[13] equalBuckets))))
  } function SampleBucketizer[275549](?).getBinsToRecursivelySort[274501](arg _mt[275561]:_MT[238], arg this[275559]:SampleBucketizer[275549](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown r[274508](274507 call range(stridable = 1))
      (274511 'end of statement')
    }
    if(274545 call _cond_test equalBuckets)
    {
      (274527 call = r(274525 call chpl_by(274522 call chpl_build_bounded_range 0(274520 call -(274518 call getNumBuckets) 1)) 2))
    }
    {
      (274541 call = r(274539 call chpl_build_bounded_range 0(274537 call -(274535 call getNumBuckets) 1)))
    }
    (274550 return r)
  } function SampleBucketizer[275549](?).getNextStartBit[274560](arg _mt[275565]:_MT[238], arg this[275563]:SampleBucketizer[275549](?), arg start_bit[274557] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (274563 return start_bit)
  } function SampleBucketizer[275549](?).build[274574](arg _mt[275569]:_MT[238], arg this[275567]:SampleBucketizer[275549](?), arg logBuckets[274571] :
  int[13], arg equalBuckets[274577] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (274587 call =(274583 call . this c"logBuckets") logBuckets)
    (274601 call =(274594 call . this c"numBuckets")(274599 call << 1 logBuckets))
    (274611 call =(274607 call . this c"equalBuckets") equalBuckets)
    { scopeless
      unknown numSplitters[274621](274619 call -(274615 call . this c"numBuckets") 1)
      (274624 'end of statement')
    }
    (274636 call =(274628 call sortedStorage numSplitters)(274635 call sortedStorage(274632 call - numSplitters 1)))
    (274644 call build 0 numSplitters 1)
  } function SampleBucketizer[275549](?).build[274654](arg _mt[275573]:_MT[238], arg this[275571]:SampleBucketizer[275549](?), arg left[274651] :
  int[13], arg right[274657] :
  int[13], arg pos[274661] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown mid[274674](274672 call + left(274670 call /(274667 call - right left) 2))
      (274677 'end of statement')
    }
    (274687 call =(274682 call storage pos)(274686 call sortedStorage mid))
    if(274721 call _cond_test(274695 call <(274692 call * 2 pos) numBuckets))
    {
      (274705 call build left mid(274703 call * 2 pos))
      (274719 call build mid right(274717 call +(274714 call * 2 pos) 1))
    }
  } function SampleBucketizer[275549](?).splitter[274733](arg _mt[275577]:_MT[238], arg this[275575]:SampleBucketizer[275549](?), arg i[274730] :
  int[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (274740 return(274739 call storage i))
  }
  { scopeless type
    eltType
  } function SampleBucketizer[275549](?).sortedSplitter[274752](arg _mt[275581]:_MT[238], arg this[275579]:SampleBucketizer[275549](?), arg i[274749] :
  int[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (274759 return(274758 call sortedStorage i))
  }
  { scopeless type
    eltType
  } function SampleBucketizer[275549](?).bucketForRecord[274769](arg _mt[275585]:_MT[238], arg this[275583]:SampleBucketizer[275549](?), arg a[274767]:_any[178](?), arg criterion[274771]:_any[178](?), arg startbit[274773]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown bk[274776] 1
      (274779 'end of statement')
    }
    {
      unknown _indexOfInterest[274814] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274815] "expr temp" "temp"
      (274824 'move' _iterator[274815](274822 call _getIterator(274831 call chpl_direct_counted_range_iter 0 logBuckets)))
      Defer
      {
        {
          (274847 call _freeIterator _iterator[274815])
        }
      }
      { scopeless type
        (274836 'move' _indexOfInterest[274814](274833 call iteratorIndex _iterator[274815]))
      }
      ForLoop[274816]
      {
        unknown lg[274840] "index var" "insert auto destroy"
        (274842 'move' lg[274840] _indexOfInterest[274814])
        {
          (274810 call = bk(274808 call +(274791 call * 2 bk)(274806 call _cast int[13](274803 call <(274801 call chpl_compare(274797 call splitter bk) a criterion) 0))))
        }
        label _continueLabel[274819]
        _indexOfInterest[274814]
        _iterator[274815]
      }
      label _breakLabel[274820]
    }
    if(274884 call _cond_test equalBuckets)
    {
      (274880 call = bk(274878 call +(274858 call * 2 bk)(274876 call _cast int[13](274873 call ==(274871 call chpl_compare a(274869 call sortedSplitter(274866 call - bk numBuckets)) criterion) 0))))
    }
    (274900 return(274898 call - bk(274895 IfExpr  equalBuckets then
    { scopeless
      (274892 call * 2 numBuckets)
    } else
    { scopeless
      numBuckets
    } )))
  } function SampleBucketizer[275549](?).classify[274908](arg _mt[275589]:_MT[238], arg this[275587]:SampleBucketizer[275549](?), arg A[274906]:_any[178](?), arg start_n[274910]:_any[178](?), arg end_n[274912]:_any[178](?), arg criterion[274914]:_any[178](?), arg startbit[274916]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      const paramEqualBuckets[274919] "const" equalBuckets
      (274922 'end of statement')
    }
    { scopeless
      const paramLogBuckets[274925] "const" logBuckets
      (274928 'end of statement')
    }
    { scopeless
      const paramNumBuckets[274939] "const"(274937 call << 1(274935 call + paramLogBuckets(274933 call _cast int[13] paramEqualBuckets)))
      (274942 'end of statement')
    }
    { scopeless
      unknown b[274948](274947 call c_array int[13] classifyUnrollFactor)
      (274951 'end of statement')
    }
    { scopeless
      unknown cur[274953] start_n
      (274956 'end of statement')
    }
    {
      unknown tmp[275339] "temp"
      (275375 'move' tmp[275339](275364 call _cond_test(275366 call <= cur(275369 call - end_n(275372 call - classifyUnrollFactor 1)))))
      WhileDo[275344]
      {
        {
          {
            unknown _indexOfInterest[274984] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[274985] "expr temp" "temp"
            (274994 'move' _iterator[274985](274992 call _getIterator(275002 call chpl_direct_range_iter 0(274999 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (275018 call _freeIterator _iterator[274985])
              }
            }
            { scopeless type
              (275007 'move' _indexOfInterest[274984](275004 call iteratorIndex _iterator[274985]))
            }
            ForLoop[274986]
            {
              unknown i[275011] "index var" "insert auto destroy"
              (275013 'move' i[275011] _indexOfInterest[274984])
              {
                (274980 call =(274978 call b i) 1)
              }
              label _continueLabel[274989]
              _indexOfInterest[274984]
              _iterator[274985]
            }
            label _breakLabel[274990]
          }
          {
            unknown _indexOfInterest[275125] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[275126] "expr temp" "temp"
            (275135 'move' _iterator[275126](275133 call _getIterator(275143 call chpl_direct_range_iter 0(275140 call - paramLogBuckets 1) 1)))
            Defer
            {
              {
                (275159 call _freeIterator _iterator[275126])
              }
            }
            { scopeless type
              (275148 'move' _indexOfInterest[275125](275145 call iteratorIndex _iterator[275126]))
            }
            ForLoop[275127]
            {
              unknown lg[275152] "index var" "insert auto destroy"
              (275154 'move' lg[275152] _indexOfInterest[275125])
              {
                {
                  unknown _indexOfInterest[275083] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[275084] "expr temp" "temp"
                  (275093 'move' _iterator[275084](275091 call _getIterator(275101 call chpl_direct_range_iter 0(275098 call - classifyUnrollFactor 1) 1)))
                  Defer
                  {
                    {
                      (275117 call _freeIterator _iterator[275084])
                    }
                  }
                  { scopeless type
                    (275106 'move' _indexOfInterest[275083](275103 call iteratorIndex _iterator[275084]))
                  }
                  ForLoop[275085]
                  {
                    unknown i[275110] "index var" "insert auto destroy"
                    (275112 'move' i[275110] _indexOfInterest[275083])
                    {
                      (275079 call =(275045 call b i)(275077 call +(275051 call * 2(275050 call b i))(275075 call _cast int[13](275072 call <(275070 call chpl_compare(275060 call splitter(275058 call b i))(275068 call A(275065 call + cur i)) criterion) 0))))
                    }
                    label _continueLabel[275088]
                    _indexOfInterest[275083]
                    _iterator[275084]
                  }
                  label _breakLabel[275089]
                }
              }
              label _continueLabel[275130]
              _indexOfInterest[275125]
              _iterator[275126]
            }
            label _breakLabel[275131]
          }
          if(275264 call _cond_test paramEqualBuckets)
          {
            {
              unknown _indexOfInterest[275222] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[275223] "expr temp" "temp"
              (275232 'move' _iterator[275223](275230 call _getIterator(275240 call chpl_direct_range_iter 0(275237 call - classifyUnrollFactor 1) 1)))
              Defer
              {
                {
                  (275256 call _freeIterator _iterator[275223])
                }
              }
              { scopeless type
                (275245 'move' _indexOfInterest[275222](275242 call iteratorIndex _iterator[275223]))
              }
              ForLoop[275224]
              {
                unknown i[275249] "index var" "insert auto destroy"
                (275251 'move' i[275249] _indexOfInterest[275222])
                {
                  (275218 call =(275178 call b i)(275216 call +(275184 call * 2(275183 call b i))(275214 call _cast int[13](275211 call ==(275209 call chpl_compare(275193 call A(275190 call + cur i))(275207 call sortedSplitter(275204 call -(275199 call b i)(275202 call / paramNumBuckets 2))) criterion) 0))))
                }
                label _continueLabel[275227]
                _indexOfInterest[275222]
                _iterator[275223]
              }
              label _breakLabel[275228]
            }
          }
          {
            unknown _indexOfInterest[275293] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[275294] "expr temp" "temp"
            (275303 'move' _iterator[275294](275301 call _getIterator(275311 call chpl_direct_range_iter 0(275308 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (275327 call _freeIterator _iterator[275294])
              }
            }
            { scopeless type
              (275316 'move' _indexOfInterest[275293](275313 call iteratorIndex _iterator[275294]))
            }
            ForLoop[275295]
            {
              unknown i[275320] "index var" "insert auto destroy"
              (275322 'move' i[275320] _indexOfInterest[275293])
              {
                (275290 yield(275288 call _build_tuple(275278 call + cur i)(275285 call -(275283 call b i) paramNumBuckets)))
              }
              label _continueLabel[275298]
              _indexOfInterest[275293]
              _iterator[275294]
            }
            label _breakLabel[275299]
          }
          (275336 call += cur classifyUnrollFactor)
        }
        label _continueLabel[275342]
        (275359 'move' tmp[275339](275348 call _cond_test(275350 call <= cur(275353 call - end_n(275356 call - classifyUnrollFactor 1)))))
        tmp[275339]
      }
      label _breakLabel[275343]
    }
    {
      unknown tmp[275519] "temp"
      (275543 'move' tmp[275519](275538 call _cond_test(275540 call <= cur end_n)))
      WhileDo[275524]
      {
        {
          { scopeless
            unknown bk[275383] 1
            (275386 'end of statement')
          }
          {
            unknown _indexOfInterest[275424] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[275425] "expr temp" "temp"
            (275434 'move' _iterator[275425](275432 call _getIterator(275441 call chpl_direct_counted_range_iter 0 paramLogBuckets)))
            Defer
            {
              {
                (275457 call _freeIterator _iterator[275425])
              }
            }
            { scopeless type
              (275446 'move' _indexOfInterest[275424](275443 call iteratorIndex _iterator[275425]))
            }
            ForLoop[275426]
            {
              unknown lg[275450] "index var" "insert auto destroy"
              (275452 'move' lg[275450] _indexOfInterest[275424])
              {
                (275420 call = bk(275418 call +(275398 call * 2 bk)(275416 call _cast int[13](275413 call <(275411 call chpl_compare(275404 call splitter bk)(275409 call A cur) criterion) 0))))
              }
              label _continueLabel[275429]
              _indexOfInterest[275424]
              _iterator[275425]
            }
            label _breakLabel[275430]
          }
          if(275500 call _cond_test paramEqualBuckets)
          {
            (275496 call = bk(275494 call +(275468 call * 2 bk)(275492 call _cast int[13](275489 call ==(275487 call chpl_compare(275474 call A cur)(275485 call sortedSplitter(275482 call - bk(275480 call / paramNumBuckets 2))) criterion) 0))))
          }
          (275512 yield(275510 call _build_tuple cur(275507 call - bk paramNumBuckets)))
          (275516 call += cur 1)
        }
        label _continueLabel[275522]
        (275533 'move' tmp[275519](275528 call _cond_test(275530 call <= cur end_n)))
        tmp[275519]
      }
      label _breakLabel[275523]
    }
  }
  function createSplittersFromSample[275596](arg A[275594]:_any[178](?), ref arg splitterBucketizer[275599] :
  SampleBucketizer, arg criterion[275602]:_any[178](?), arg start_n[275605] :
  int[13], arg sampleSize[275609] :
  int[13], arg sampleStep[275613] :
  int[13], in arg numBuckets[275617] :
  int[13], arg forceEqualBuckets[275622] :
  ?[260] =
  none[57]) : _unknown[51]
  {
    { scopeless
      unknown splitters[275632] "ref var"(275629 call . splitterBucketizer c"sortedStorage")
      (275635 'end of statement')
    }
    { scopeless
      unknown arrayIndex[275644](275642 call -(275639 call + start_n sampleStep) 1)
      (275647 'end of statement')
    }
    { scopeless
      unknown splitterIndex[275649] 0
      (275652 'end of statement')
    }
    (275661 call =(275656 call splitters splitterIndex)(275660 call A arrayIndex))
    {
      unknown _indexOfInterest[275714] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[275715] "expr temp" "temp"
      (275724 'move' _iterator[275715](275722 call _getIterator(275732 call chpl_direct_range_iter 2(275729 call - numBuckets 1) 1)))
      Defer
      {
        {
          (275748 call _freeIterator _iterator[275715])
        }
      }
      { scopeless type
        (275737 'move' _indexOfInterest[275714](275734 call iteratorIndex _iterator[275715]))
      }
      ForLoop[275716]
      {
        unknown i[275741] "index var" "insert auto destroy"
        (275743 'move' i[275741] _indexOfInterest[275714])
        {
          (275674 call += arrayIndex sampleStep)
          if(275710 call _cond_test(275691 call !=(275689 call chpl_compare(275682 call splitters splitterIndex)(275687 call A arrayIndex) criterion) 0))
          {
            (275695 call += splitterIndex 1)
            (275707 call =(275702 call splitters splitterIndex)(275706 call A arrayIndex))
          }
        }
        label _continueLabel[275719]
        _indexOfInterest[275714]
        _iterator[275715]
      }
      label _breakLabel[275720]
    }
    { scopeless
      unknown uniqueSplitters[275759](275757 call + 1 splitterIndex)
      (275762 'end of statement')
    }
    { scopeless
      unknown myUseEqualBuckets[275773](275771 call >=(275768 call -(275765 call - numBuckets 1) uniqueSplitters) equalBucketThreshold)
      (275776 'end of statement')
    }
    if(275796 call _cond_test(275788 call <(275782 call + 1(275780 call * 2 uniqueSplitters))(275786 call << 1 maxLogBuckets)))
    {
      (275792 call = myUseEqualBuckets 1)
    }
    if(275810 call _cond_test(275803 call !=(275801 'typeof' forceEqualBuckets) nothing[7]))
    {
      { scopeless
        (275807 call = myUseEqualBuckets forceEqualBuckets)
      }
    }
    { scopeless
      unknown logBuckets[275822](275820 call +(275818 call log2 uniqueSplitters) 1)
      (275825 'end of statement')
    }
    (275831 call = numBuckets(275829 call << 1 logBuckets))
    {
      unknown _indexOfInterest[275862] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[275863] "expr temp" "temp"
      (275872 'move' _iterator[275863](275870 call _getIterator(275883 call chpl_direct_range_iter(275876 call + uniqueSplitters 1)(275880 call - numBuckets 1) 1)))
      Defer
      {
        {
          (275899 call _freeIterator _iterator[275863])
        }
      }
      { scopeless type
        (275888 'move' _indexOfInterest[275862](275885 call iteratorIndex _iterator[275863]))
      }
      ForLoop[275864]
      {
        unknown i[275892] "index var" "insert auto destroy"
        (275894 'move' i[275892] _indexOfInterest[275862])
        {
          (275847 call += splitterIndex 1)
          (275859 call =(275854 call splitters splitterIndex)(275858 call A arrayIndex))
        }
        label _continueLabel[275867]
        _indexOfInterest[275862]
        _iterator[275863]
      }
      label _breakLabel[275868]
    }
    (275915 call(275909 call . splitterBucketizer c"build") logBuckets myUseEqualBuckets)
  }
  function putRandomSampleAtArrayStart[275925](in arg start_n[275922] :
  int[13], arg end_n[275928] :
  int[13], arg A[275934] :
  (275931 call chpl__buildArrayRuntimeType nil[44]), in arg numSamples[275938] :
  int[13], arg seed[275942] =
  1) : _unknown[51]
  {
    (275946 'use' Random)
    (275953 'import'(275950 call . Sort c"ShallowCopy"))
    { scopeless
      unknown Tmp[275968](275966 call chpl__buildArrayRuntimeType(275964 call chpl__ensureDomainExpr(275957 call chpl_build_bounded_range 1 1))(275961 call . A c"eltType"))
      (275971 'end of statement')
    }
    { scopeless
      unknown randNums[275981](275980 call createRandomStream(seed = seed)(eltType = int[13])(parSafe = 0))
      (275984 'end of statement')
    }
    {
      unknown tmp[276066] "temp"
      (276090 'move' tmp[276066](276085 call _cond_test(276087 call > numSamples 0)))
      WhileDo[276071]
      {
        {
          (275991 call -= numSamples 1)
          { scopeless
            unknown offset[276005](276004 call(275998 call . randNums c"getNext") start_n end_n)
            (276008 'end of statement')
          }
          if(276057 call _cond_test(276011 call != offset start_n))
          {
            { scopeless
              unknown tmp[276017](276014 call . A c"eltType")
              (276020 'end of statement')
            }
            (276032 call(276023 call . ShallowCopy c"shallowCopy") Tmp 1 A start_n 1)
            (276043 call(276035 call . ShallowCopy c"shallowCopy") A start_n offset 1)
            (276055 call(276046 call . ShallowCopy c"shallowCopy") A offset Tmp 1 1)
          }
          (276063 call += start_n 1)
        }
        label _continueLabel[276069]
        (276080 'move' tmp[276066](276075 call _cond_test(276077 call > numSamples 0)))
        tmp[276066]
      }
      label _breakLabel[276070]
    }
  }
}