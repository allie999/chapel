AST dump for ChapelError after pass cleanup.
Module use list: 

{
  (167855 'use' ChapelStandard)
  (167859 'use' ChapelLocks)
  function Error[167938].init[167896](arg _mt[167942]:_MT[238], arg this[167940]:Error[167938]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (167900 call = _next nil[44])
  }
  function Error[167938].init[167912](arg _mt[167946]:_MT[238], arg this[167944]:Error[167938], arg msg[167909] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (167921 call =(167917 call . this c"_msg") msg)
  }
  function Error[167938].message[167929](arg _mt[167950]:_MT[238], arg this[167948]:Error[167938]) : _unknown[51] "method" "primary method"
  {
    (167932 return _msg)
  }
  type Error[167938] unknown _next[167866] "no doc" nil[44](167864 'to unmanaged class from unknown'(167863 'to nilable class from type' Error)) unknown thrownLine[167871] "no doc" int[13] unknown thrownFileId[167879] "no doc"(167878 call int[13] 32) unknown _msg[167884] "no doc" string[26] unknown _hasThrowInfo[167890] "no doc" 0 bool[10]
  function NilThrownError[167983].message[167958](arg _mt[167987]:_MT[238], arg this[167985]:NilThrownError[167983]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (167977 return "thrown error was nil")
  }
  type NilThrownError[167983] Error
  function NilClassError[168020].message[167995](arg _mt[168024]:_MT[238], arg this[168022]:NilClassError[168020]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (168014 return "cannot convert nil class to non nilable type")
  }
  type NilClassError[168020] Error
  function ClassCastError[168057].message[168032](arg _mt[168061]:_MT[238], arg this[168059]:ClassCastError[168057]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (168051 return "cannot cast class to type - runtime types not compatible")
  }
  type ClassCastError[168057] Error
  function DecodeError[168094].message[168069](arg _mt[168098]:_MT[238], arg this[168096]:DecodeError[168094]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (168088 return "Invalid UTF-8 character encountered.")
  }
  type DecodeError[168094] Error
  function IllegalArgumentError[168200].init[168106](arg _mt[168204]:_MT[238], arg this[168202]:IllegalArgumentError[168200]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function IllegalArgumentError[168200].init[168117](arg _mt[168208]:_MT[238], arg this[168206]:IllegalArgumentError[168200], arg info[168114] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (168125 call(168120 call . super c"init") info)
  }
  function IllegalArgumentError[168200].init[168136](arg _mt[168212]:_MT[238], arg this[168210]:IllegalArgumentError[168200], arg formal[168133] :
  string[26], arg info[168139] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown msg[168184](168182 call +(168179 call +(168160 call + "illegal argument '" formal) "': ") info)
    (168187 'end of statement')
    (168195 call(168190 call . super c"init") msg)
  }
  type IllegalArgumentError[168200] Error
  function chpl_TaskErrors[168302].append[168236](arg _mt[168306]:_MT[238], arg this[168304]:chpl_TaskErrors[168302], arg err[168233] :
  (168232 'to unmanaged class from unknown' Error)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[168277] "const" "temp"
    (168279 'move' tmp[168277](168275 'deref'(168274 '_wide_get_locale' this)))
    {
      {
        (168244 call(168240 call . _errorsLock c"lock"))
        unknown tmp[168248] _head
        (168251 'end of statement')
        (168259 call =(168255 call . err c"_next") tmp)
        (168264 call = _head err)
        (168272 call(168268 call . _errorsLock c"unlock"))
      }
      (168282 'on block' 0 tmp[168277])
    }
  }
  function chpl_TaskErrors[168302].empty[168290](arg _mt[168310]:_MT[238], arg this[168308]:chpl_TaskErrors[168302]) : _unknown[51] "method" "primary method"
  {
    (168296 return(168294 call == _head nil[44]))
  }
  type chpl_TaskErrors[168302] unknown _head[168220] nil[44](168218 'to unmanaged class from unknown'(168217 'to nilable class from type' Error)) unknown _errorsLock[168225] chpl_LocalSpinlock
  function TaskErrors[169656].init[168338](arg _mt[169660]:_MT[238], arg this[169658]:TaskErrors[169656], ref arg group[168335] :
  chpl_TaskErrors) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown head[168349](168346 call . group c"_head")(168342 'to unmanaged class from unknown'(168341 'to nilable class from type' Error))
    (168352 'end of statement')
    (168359 call =(168355 call . group c"_head") nil[44])
    (168367 call(168363 call . this c"complete"))
    unknown cur[168372](168371 'to unmanaged class from unknown'(168370 'to nilable class from type' Error))
    (168375 'end of statement')
    unknown n[168377] 0
    (168380 'end of statement')
    (168383 call = cur head)
    {
      unknown tmp[168487] "temp"
      (168511 'move' tmp[168487](168506 call _cond_test(168508 call != cur nil[44])))
      WhileDo[168492]
      {
        {
          unknown curnext[168396](168393 call .(168391 call postfix! cur) c"_next")
          (168399 'end of statement')
          unknown asTaskErr[168410](168408 call _cast(168407 'to unmanaged class from unknown'(168406 'to nilable class from type' TaskErrors)) cur)(168403 'to unmanaged class from unknown'(168402 'to nilable class from type' TaskErrors))
          (168413 'end of statement')
          if(168478 call _cond_test(168416 call == asTaskErr nil[44]))
          {
            (168420 call += n 1)
          }
          {
            {
              unknown _indexOfInterest[168443] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[168444] "expr temp" "temp"
              (168453 'move' _iterator[168444](168451 call _getIterator(168426 call postfix! asTaskErr)))
              Defer
              {
                {
                  (168470 call _freeIterator _iterator[168444])
                }
              }
              { scopeless type
                (168459 'move' _indexOfInterest[168443](168456 call iteratorIndex _iterator[168444]))
              }
              ForLoop[168445]
              {
                unknown e[168463] "index var" "insert auto destroy"
                (168465 'move' e[168463] _indexOfInterest[168443])
                {
                  if(168437 call _cond_test(168430 call != e nil[44]))
                  {
                    (168434 call += n 1)
                  }
                }
                label _continueLabel[168448]
                _indexOfInterest[168443]
                _iterator[168444]
              }
              label _breakLabel[168449]
            }
          }
          (168484 call = cur curnext)
        }
        label _continueLabel[168490]
        (168501 'move' tmp[168487](168496 call _cond_test(168498 call != cur nil[44])))
        tmp[168487]
      }
      label _breakLabel[168491]
    }
    (168516 call = nErrors n)
    (168528 call = errorsArray(168527 call c_calloc(168523 call _owned(168522 'to nilable class from type' Error)) n))
    unknown idx[168532] 0
    (168535 'end of statement')
    (168538 call = cur head)
    {
      unknown tmp[168683] "temp"
      (168707 'move' tmp[168683](168702 call _cond_test(168704 call != cur nil[44])))
      WhileDo[168688]
      {
        {
          unknown curnext[168551](168548 call .(168546 call postfix! cur) c"_next")
          (168554 'end of statement')
          (168563 call =(168559 call .(168557 call postfix! cur) c"_next") nil[44])
          unknown asTaskErr[168575](168573 call _cast(168572 'to unmanaged class from unknown'(168571 'to nilable class from type' TaskErrors)) cur)(168568 'to unmanaged class from unknown'(168567 'to nilable class from type' TaskErrors))
          (168578 'end of statement')
          if(168674 call _cond_test(168581 call == asTaskErr nil[44]))
          {
            (168594 call(168587 call .(168586 call errorsArray idx) c"retain")(168591 call postfix! cur))
            (168599 call += idx 1)
          }
          {
            {
              unknown _indexOfInterest[168634] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[168635] "expr temp" "temp"
              (168644 'move' _iterator[168635](168642 call _getIterator(168610 call(168606 call .(168604 call postfix! asTaskErr) c"these"))))
              Defer
              {
                {
                  (168661 call _freeIterator _iterator[168635])
                }
              }
              { scopeless type
                (168650 'move' _indexOfInterest[168634](168647 call iteratorIndex _iterator[168635]))
              }
              ForLoop[168636]
              {
                unknown e[168654] "index var" "insert auto destroy"
                (168656 'move' e[168654] _indexOfInterest[168634])
                {
                  if(168629 call _cond_test(168613 call != e nil[44]))
                  {
                    (168620 call =(168618 call errorsArray idx) e)
                    (168626 call += idx 1)
                  }
                }
                label _continueLabel[168639]
                _indexOfInterest[168634]
                _iterator[168635]
              }
              label _breakLabel[168640]
            }
            (168671 call chpl__delete asTaskErr)
          }
          (168680 call = cur curnext)
        }
        label _continueLabel[168686]
        (168697 'move' tmp[168683](168692 call _cond_test(168694 call != cur nil[44])))
        tmp[168683]
      }
      label _breakLabel[168687]
    }
  }
  function TaskErrors[169656].init[168719](arg _mt[169664]:_MT[238], arg this[169662]:TaskErrors[169656], arg err[168716] :
  (168715 'to unmanaged class from unknown' Error)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (168723 call = nErrors 1)
    (168736 call = errorsArray(168735 call c_calloc(168731 call _owned(168730 'to nilable class from type' Error)) 1))
    (168744 call(168740 call . this c"complete"))
    (168751 call =(168747 call . err c"_next") nil[44])
    (168763 call(168758 call .(168757 call errorsArray 0) c"retain") err)
  }
  function TaskErrors[169656].init[168769](arg _mt[169668]:_MT[238], arg this[169666]:TaskErrors[169656]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (168773 call = nErrors 0)
    (168779 call = errorsArray nil[44])
  }
  function TaskErrors[169656].deinit[168786](arg _mt[169672]:_MT[238], arg this[169670]:TaskErrors[169656]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    if(168853 call _cond_test errorsArray)
    {
      {
        unknown _indexOfInterest[168807] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[168808] "expr temp" "temp"
        (168817 'move' _iterator[168808](168815 call _getIterator(168824 call chpl_direct_counted_range_iter 0 nErrors)))
        Defer
        {
          {
            (168840 call _freeIterator _iterator[168808])
          }
        }
        { scopeless type
          (168829 'move' _indexOfInterest[168807](168826 call iteratorIndex _iterator[168808]))
        }
        ForLoop[168809]
        {
          unknown i[168833] "index var" "insert auto destroy"
          (168835 'move' i[168833] _indexOfInterest[168807])
          {
            (168804 call(168800 call .(168799 call errorsArray i) c"clear"))
          }
          label _continueLabel[168812]
          _indexOfInterest[168807]
          _iterator[168808]
        }
        label _breakLabel[168813]
      }
      (168851 call c_free errorsArray)
    }
  }
  function TaskErrors[169656].these[168862](arg _mt[169676]:_MT[238], arg this[169674]:TaskErrors[169656]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[168894] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[168895] "expr temp" "temp"
      (168904 'move' _iterator[168895](168902 call _getIterator(168911 call chpl_direct_counted_range_iter 0 nErrors)))
      Defer
      {
        {
          (168927 call _freeIterator _iterator[168895])
        }
      }
      { scopeless type
        (168916 'move' _indexOfInterest[168894](168913 call iteratorIndex _iterator[168895]))
      }
      ForLoop[168896]
      {
        unknown i[168920] "index var" "insert auto destroy"
        (168922 'move' i[168920] _indexOfInterest[168894])
        {
          if(168889 call _cond_test(168880 call !=(168878 call errorsArray i) nil[44]))
          {
            (168886 yield(168885 call errorsArray i))
          }
        }
        label _continueLabel[168899]
        _indexOfInterest[168894]
        _iterator[168895]
      }
      label _breakLabel[168900]
    }
  }
  { scopeless type
    (168866 call _owned(168865 'to nilable class from type' Error))
  }
  function TaskErrors[169656].first[168940](arg _mt[169680]:_MT[238], arg this[169678]:TaskErrors[169656]) ref : _unknown[51] "method" "primary method"
  {
    unknown first[168947] 0
    (168950 'end of statement')
    {
      unknown _indexOfInterest[168980] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[168981] "expr temp" "temp"
      (168990 'move' _iterator[168981](168988 call _getIterator(168997 call chpl_direct_counted_range_iter 0 nErrors)))
      Defer
      {
        {
          (169013 call _freeIterator _iterator[168981])
        }
      }
      { scopeless type
        (169002 'move' _indexOfInterest[168980](168999 call iteratorIndex _iterator[168981]))
      }
      ForLoop[168982]
      {
        unknown i[169006] "index var" "insert auto destroy"
        (169008 'move' i[169006] _indexOfInterest[168980])
        {
          if(168975 call _cond_test(168964 call !=(168962 call errorsArray i) nil[44]))
          {
            (168968 call = first i)
            break nil[44]
          }
        }
        label _continueLabel[168985]
        _indexOfInterest[168980]
        _iterator[168981]
      }
      label _breakLabel[168986]
    }
    (169024 return(169023 call errorsArray first))
  }
  { scopeless type
    (168944 call _owned(168943 'to nilable class from type' Error))
  }
  function TaskErrors[169656].message[169031](arg _mt[169684]:_MT[238], arg this[169682]:TaskErrors[169656]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown n[169035] 0
    (169038 'end of statement')
    unknown minMsg[169041] string[26]
    (169044 'end of statement')
    unknown maxMsg[169046] string[26]
    (169049 'end of statement')
    unknown first[169053](169052 'to borrowed class from unknown'(169051 'to nilable class from type' Error))
    (169056 'end of statement')
    unknown last[169060](169059 'to borrowed class from unknown'(169058 'to nilable class from type' Error))
    (169063 'end of statement')
    {
      unknown _indexOfInterest[169175] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[169176] "expr temp" "temp"
      (169185 'move' _iterator[169176](169183 call _getIterator(169067 call these)))
      Defer
      {
        {
          (169202 call _freeIterator _iterator[169176])
        }
      }
      { scopeless type
        (169191 'move' _indexOfInterest[169175](169188 call iteratorIndex _iterator[169176]))
      }
      ForLoop[169177]
      {
        unknown err[169195] "index var" "insert auto destroy"
        (169197 'move' err[169195] _indexOfInterest[169175])
        {
          unknown e[169071](169069 call postfix! err)
          (169074 'end of statement')
          if(169119 call _cond_test(169107 call ||(169094 call == minMsg "")(169105 call <(169103 call(169099 call . e c"message")) minMsg)))
          {
            (169116 call = minMsg(169115 call(169111 call . e c"message")))
          }
          if(169165 call _cond_test(169153 call ||(169142 call == maxMsg "")(169151 call >(169149 call(169145 call . e c"message")) maxMsg)))
          {
            (169162 call = maxMsg(169161 call(169157 call . e c"message")))
          }
          (169172 call += n 1)
        }
        label _continueLabel[169180]
        _indexOfInterest[169175]
        _iterator[169176]
      }
      label _breakLabel[169181]
    }
    {
      {
        unknown _indexOfInterest[169254] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[169255] "expr temp" "temp"
        (169264 'move' _iterator[169255](169262 call _getIterator(169212 call these)))
        Defer
        {
          {
            (169281 call _freeIterator _iterator[169255])
          }
        }
        { scopeless type
          (169270 'move' _indexOfInterest[169254](169267 call iteratorIndex _iterator[169255]))
        }
        ForLoop[169256]
        {
          unknown err[169274] "index var" "insert auto destroy"
          (169276 'move' err[169274] _indexOfInterest[169254])
          {
            unknown e[169216](169214 call postfix! err)
            (169219 'end of statement')
            if(169250 call _cond_test(169228 call ==(169226 call(169222 call . e c"message")) minMsg))
            {
              if(169239 call _cond_test(169232 call == first nil[44]))
              {
                (169236 call = first e)
              }
              (169247 call = last e)
            }
          }
          label _continueLabel[169259]
          _indexOfInterest[169254]
          _iterator[169255]
        }
        label _breakLabel[169260]
      }
      if(169359 call _cond_test(169291 call != minMsg maxMsg))
      {
        {
          unknown _indexOfInterest[169324] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[169325] "expr temp" "temp"
          (169334 'move' _iterator[169325](169332 call _getIterator(169296 call these)))
          Defer
          {
            {
              (169351 call _freeIterator _iterator[169325])
            }
          }
          { scopeless type
            (169340 'move' _indexOfInterest[169324](169337 call iteratorIndex _iterator[169325]))
          }
          ForLoop[169326]
          {
            unknown err[169344] "index var" "insert auto destroy"
            (169346 'move' err[169344] _indexOfInterest[169324])
            {
              unknown e[169300](169298 call postfix! err)
              (169303 'end of statement')
              if(169320 call _cond_test(169312 call ==(169310 call(169306 call . e c"message")) maxMsg))
              {
                (169316 call = last e)
              }
            }
            label _continueLabel[169329]
            _indexOfInterest[169324]
            _iterator[169325]
          }
          label _breakLabel[169330]
        }
      }
    }
    unknown ret[169386](169384 call +(169365 call _cast string[26] n) " errors: ")
    (169389 'end of statement')
    if(169462 call _cond_test(169404 call &&(169398 call &&(169392 call != first nil[44])(169396 call != last nil[44]))(169402 call != first last)))
    {
      (169440 call += ret(169438 call +(169430 call +(169412 call chpl_describe_error(169409 call postfix! first)) " ... ")(169437 call chpl_describe_error(169434 call postfix! last))))
    }
    {
      if(169457 call _cond_test(169445 call != first nil[44]))
      {
        (169454 call += ret(169453 call chpl_describe_error(169450 call postfix! first)))
      }
    }
    (169469 return ret)
  }
  { scopeless type
    string[26]
  }
  function TaskErrors[169656].filter[169478](arg _mt[169688]:_MT[238], arg this[169686]:TaskErrors[169656], arg t[169476]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[169531] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[169532] "expr temp" "temp"
      (169541 'move' _iterator[169532](169539 call _getIterator(169497 call these)))
      Defer
      {
        {
          (169558 call _freeIterator _iterator[169532])
        }
      }
      { scopeless type
        (169547 'move' _indexOfInterest[169531](169544 call iteratorIndex _iterator[169532]))
      }
      ForLoop[169533]
      {
        unknown e[169551] "index var" "insert auto destroy"
        (169553 'move' e[169551] _indexOfInterest[169531])
        {
          unknown tmp[169517](169515 call _cast(169513 call _cast(169512 'to borrowed class from unknown'(169511 'to nilable class from type' class[232](?))) t)(169507 call _cast(169506 'to borrowed class from unknown'(169505 'to nilable class from type' class[232](?)))(169503 call(169499 call . e c"borrow"))))
          (169520 'end of statement')
          if(169526 call _cond_test tmp)
          {
            (169524 yield e)
          }
        }
        label _continueLabel[169536]
        _indexOfInterest[169531]
        _iterator[169532]
      }
      label _breakLabel[169537]
    }
  }
  where {
    (354430 'is_subtype'(169492 'to borrowed class from unknown' Error)(169488 call _cast(169487 'to borrowed class from unknown' class[232](?)) t))
  }
  { scopeless type
    (169482 call _owned(169481 'to nilable class from type' Error))
  }
  function TaskErrors[169656].filter[169574](arg _mt[169692]:_MT[238], arg this[169690]:TaskErrors[169656], arg t[169572]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    (169595 call compilerError "Filtered iterator only supports subclasses of Error")
  }
  function TaskErrors[169656].contains[169604](arg _mt[169696]:_MT[238], arg this[169694]:TaskErrors[169656], arg t[169602]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown _indexOfInterest[169615] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[169616] "expr temp" "temp"
      (169625 'move' _iterator[169616](169623 call _getIterator(169610 call filter t)))
      Defer
      {
        {
          (169642 call _freeIterator _iterator[169616])
        }
      }
      { scopeless type
        (169631 'move' _indexOfInterest[169615](169628 call iteratorIndex _iterator[169616]))
      }
      ForLoop[169617]
      {
        unknown e[169635] "index var" "insert auto destroy"
        (169637 'move' e[169635] _indexOfInterest[169615])
        {
          (169612 return 1)
        }
        label _continueLabel[169620]
        _indexOfInterest[169615]
        _iterator[169616]
      }
      label _breakLabel[169621]
    }
    (169651 return 0)
  }
  type TaskErrors[169656] unknown nErrors[168317] "no doc" int[13] unknown errorsArray[168328] "no doc"(168327 call c_ptr(168324 call _owned(168323 'to nilable class from type' Error))) Error
  function chpl_error_type_name[169706](arg err[169703] :
  (169702 'to borrowed class from unknown' Error)) : _unknown[51] "no doc"
  {
    unknown cid[169729](169728 'getcid' err)
    (169732 'end of statement')
    unknown nameC[169755](169754 'class name by id' cid) c_string
    (169758 'end of statement')
    unknown nameS[169760] string[26]
    (169763 'end of statement')
    Try!
    {
      {
        (169769 call = nameS(169768 call createStringWithNewBuffer nameC))
      }
    }
    (169777 return nameS)
  }
  { scopeless type
    string[26]
  }
  function chpl_describe_error[169789](arg err[169786] :
  (169785 'to borrowed class from unknown' Error)) : _unknown[51] "no doc"
  {
    unknown nameS[169796](169795 call chpl_error_type_name err)
    (169799 'end of statement')
    unknown ret[169813](169811 call +(169803 call + nameS ": ")(169810 call(169806 call . err c"message")))
    (169816 'end of statement')
    (169818 return ret)
  }
  { scopeless type
    string[26]
  }
  function chpl_do_fix_thrown_error[169831](arg err[169828] :
  (169827 'to unmanaged class from unknown'(169826 'to nilable class from type' Error))) : _unknown[51] "always propagate line file info" "insert line file info" "no doc"
  {
    unknown fixErr[169839] err(169837 'to unmanaged class from unknown'(169836 'to nilable class from type' Error))
    (169842 'end of statement')
    if(169858 call _cond_test(169846 call == fixErr nil[44]))
    {
      (169855 call = fixErr(169851 'new'(_chpl_manager = unmanaged[220](?))(169854 call NilThrownError)))
    }
    const line[169882] "const"(169881 '_get_user_line')
    (169885 'end of statement')
    const fileId[169905] "const"(169904 '_get_user_file')
    (169908 'end of statement')
    if(169954 call _cond_test(169917 call !(169914 call .(169910 call postfix! fixErr) c"_hasThrowInfo")))
    {
      (169926 call =(169922 call .(169920 call postfix! fixErr) c"_hasThrowInfo") 1)
      (169939 call =(169935 call .(169931 call postfix! fixErr) c"thrownLine") line)
      (169951 call =(169947 call .(169943 call postfix! fixErr) c"thrownFileId") fileId)
    }
    (169962 return(169961 call _to_nonnil fixErr))
  }
  { scopeless type
    (169834 'to unmanaged class from unknown' Error)
  }
  function chpl_fix_thrown_error[169976](in arg err[169973] :
  (169971 call _owned(169970 'to nilable class from type' Error))) : _unknown[51] "always propagate line file info" "ignore in global analysis" "insert line file info" "no doc"
  {
    (169989 return(169988 call chpl_do_fix_thrown_error(169986 call(169982 call . err c"release"))))
  }
  { scopeless type
    (169979 'to unmanaged class from unknown' Error)
  }
  function chpl_fix_thrown_error[170003](in arg err[170000] :
  (169998 call _owned Error)) : _unknown[51] "always propagate line file info" "ignore in global analysis" "insert line file info" "no doc" "ignore transfer errors"
  {
    (170016 return(170015 call chpl_do_fix_thrown_error(170013 call(170009 call . err c"release"))))
  }
  { scopeless type
    (170006 'to unmanaged class from unknown' Error)
  }
  function chpl_fix_thrown_error[170028](arg err[170025] :
  _nilType) : _unknown[51] "always propagate line file info" "insert line file info" "no doc"
  {
    (170034 return(170033 call chpl_do_fix_thrown_error nil[44]))
  }
  function chpl_fix_thrown_error[170043](arg err[170041]:_any[178](?)) : _unknown[51] "last resort" "no doc" "no return value for void"
  {
    unknown t[170047] "type variable"(170046 'typeof' err)
    if(170151 call _cond_test(354431 'is_coercible'(170056 'to borrowed class from unknown'(170055 'to nilable class from type' Error)) t))
    {
      (170099 call compilerError "Cannot throw an instance of type \'"(170079 call _cast string[26] t) "\' - please throw owned" 1)
    }
    {
      if(170147 call _cond_test(170105 call isClassType t))
      {
        (170133 call compilerError "Cannot throw an instance of type \'"(170114 call _cast string[26](170111 call _cast borrowed[211](?) t)) "\', not a subtype of Error")
      }
      {
        (170144 call compilerError "Cannot throw an instance of type \'"(170141 call _cast string[26] t) "\', not a subtype of Error")
      }
    }
  }
  function chpl_fix_thrown_error[170162](arg errType[170160]:_any[178](?)) : _unknown[51] "last resort" "no doc" "no return value for void"
  {
    (170204 call compilerError "Cannot throw a type: '"(170185 call _cast string[26] errType) "'. Did you forget the keyword 'new'\?")
  }
  function chpl_delete_error[170217](arg err[170214] :
  (170213 'to unmanaged class from unknown'(170212 'to nilable class from type' Error))) : _unknown[51] "no doc" "no return value for void"
  {
    if(170228 call _cond_test(170221 call != err nil[44]))
    {
      (170225 call chpl__delete err)
    }
  }
  function chpl_uncaught_error[170243](arg err[170240] :
  (170239 'to unmanaged class from unknown' Error)) : _unknown[51] "always propagate line file info" "function terminates program" "insert line file info" "no doc" "no return value for void"
  {
    function chpl_error_preformatted[170249](arg c_string[170247]:_any[178](?)) : void[4] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    const myFileC[170277] "const"(170276 'chpl_lookupFilename'(170275 '_get_user_file')) c_string
    (170280 'end of statement')
    unknown myFileS[170282] string[26]
    (170285 'end of statement')
    Try!
    {
      {
        (170291 call = myFileS(170290 call createStringWithNewBuffer myFileC))
      }
    }
    const myLine[170301] "const"(170300 '_get_user_line')
    (170304 'end of statement')
    const thrownFileC[170313] "const"(170312 'chpl_lookupFilename'(170309 call . err c"thrownFileId")) c_string
    (170316 'end of statement')
    unknown thrownFileS[170318] string[26]
    (170321 'end of statement')
    Try!
    {
      {
        (170327 call = thrownFileS(170326 call createStringWithNewBuffer thrownFileC))
      }
    }
    const thrownLine[170338] "const"(170335 call . err c"thrownLine")
    (170341 'end of statement')
    unknown s[170449](170447 call +(170428 call +(170422 call +(170419 call +(170416 call +(170413 call +(170394 call +(170388 call +(170385 call +(170382 call +(170363 call + "uncaught "(170362 call chpl_describe_error err)) "\n  ") thrownFileS) ":")(170392 call _cast string[26] thrownLine)) ": thrown here") "\n  ") myFileS) ":")(170426 call _cast string[26] myLine)) ": uncaught here")
    (170452 'end of statement')
    (170461 call chpl_error_preformatted(170459 call(170455 call . s c"c_str")))
  }
  function chpl_propagate_error[170472](arg err[170469] :
  (170468 'to unmanaged class from unknown' Error)) : _unknown[51] "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    (170477 call chpl_uncaught_error err)
  }
  function chpl_forall_error[170489](arg err[170486] :
  (170485 'to unmanaged class from unknown' Error)) : _unknown[51] "no doc"
  {
    if(170502 call _cond_test(170497 call _cast(170496 'to unmanaged class from unknown'(170495 'to nilable class from type' TaskErrors)) err))
    {
      (170500 return err)
    }
    (170515 return(170510 'new'(_chpl_manager = unmanaged[220](?))(170514 call TaskErrors err)))
  }
  { scopeless type
    (170492 'to unmanaged class from unknown' Error)
  }
  function chpl_enum_cast_error[170526](arg casted[170523] :
  string[26], arg enumName[170529] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    if(170622 call _cond_test(170537 call(170533 call . casted c"isEmpty")))
    {
      (170567 'throw'(170540 'new'(_chpl_manager = _owned[30](?))(170566 call IllegalArgumentError(170563 call +(170560 call + "bad cast from empty string to enum '" enumName) "'"))))
    }
    {
      (170620 'throw'(170571 'new'(_chpl_manager = _owned[30](?))(170619 call IllegalArgumentError(170616 call +(170613 call +(170610 call +(170591 call + "bad cast from string '" casted) "' to enum '") enumName) "'"))))
    }
  }
  function chpl_enum_cast_error[170637](arg casted[170634] :
  integral, arg enumName[170640] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    (170679 'throw'(170645 'new'(_chpl_manager = _owned[30](?))(170678 call IllegalArgumentError(170674 call +(170671 call +(170668 call + "bad cast from int '"(170666 call _cast string[26] casted)) "' to enum '") enumName) "'")))
  }
  function chpl_enum_cast_error_no_int[170690](arg enumName[170687] :
  string[26], arg constName[170693] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc"
  {
    (170763 'throw'(170698 'new'(_chpl_manager = _owned[30](?))(170762 call IllegalArgumentError(170759 call +(170740 call +(170737 call +(170718 call + "bad cast: enum '" enumName) ".") constName) "' has no integer value"))))
    (170767 return 0)
  }
  function chpl_enum_cast_error[170777](arg casted[170774] :
  bytes[24], arg enumName[170780] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    if(170868 call _cond_test(170788 call(170784 call . casted c"isEmpty")))
    {
      (170818 'throw'(170791 'new'(_chpl_manager = _owned[30](?))(170817 call IllegalArgumentError(170814 call +(170811 call + "bad cast from empty bytes to enum '" enumName) "'"))))
    }
    {
      (170866 'throw'(170822 'new'(_chpl_manager = _owned[30](?))(170865 call IllegalArgumentError(170862 call +(170859 call +(170856 call +(170853 call + "bad cast from bytes '"(170852 call(170842 call . casted c"decode")(170848 call . decodePolicy c"replace"))) "' to enum '") enumName) "'"))))
    }
  }
}