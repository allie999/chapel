AST dump for BlockDist after pass scopeResolve.
Module use list: ChapelStandard DSIUtil ChapelUtil CommDiagnostics ChapelLocks ChapelDebugPrint LayoutCS SparseBlockDist Reflection ReplicatedDist 

{ unknown debugBlockDist[316480] "config" "param" 0(316483 'end of statement') unknown debugBlockDistBulkTransfer[316485] "config" "param" 0(316488 'end of statement') const disableAliasedBulkTransfer[316490] "config" "const" 1(316493 'end of statement') unknown disableBlockDistBulkTransfer[316495] "config" "param" 0(316498 'end of statement') unknown sanityCheckDistribution[316500] "config" "param" 0(316503 'end of statement') unknown testFastFollowerOptimization[316505] "config" "param" 0(316508 'end of statement') unknown disableBlockLazyRAD[316510] "config" "param" defaultDisableLazyRADOpt[93435](316513 'end of statement') type Block[316593](?) val super[355837]:BaseDist[145934] "super class" unknown rank[316518] "param" int(64)[13] unknown idxType[316523] "type variable" int(64)[13] unknown boundingBox[316532](316530 call chpl__buildDomainRuntimeType defaultDist[94058] rank[316518] idxType[316523]) unknown targetLocDom[316541](316539 call chpl__buildDomainRuntimeType defaultDist[94058] rank[316518]) unknown targetLocales[316552](316550 call chpl__buildArrayRuntimeType(316548 call chpl__ensureDomainExpr targetLocDom[316541]) locale[28]) unknown locDist[316568](316566 call chpl__buildArrayRuntimeType(316564 call chpl__ensureDomainExpr targetLocDom[316541])(316562 call unmanaged LocBlock[415586](?) rank[316518] idxType[316523])) unknown dataParTasksPerLocale[316573] int(64)[13] unknown dataParIgnoreRunningTasks[316578] bool[10] unknown dataParMinGranularity[316583] int(64)[13] unknown sparseLayoutType[316589] "type variable" unmanaged DefaultDist[415502] type unmanaged Block[415589](?) type Block[408866](?) type LocBlock[316616](?) val super[355839]:object[22] "super class" unknown rank[316598] "param" int(64)[13] unknown idxType[316602] "type variable" const myChunk[316611] "const"(316609 call chpl__buildDomainRuntimeType defaultDist[94058] rank[316598] idxType[316602]) type unmanaged LocBlock[415586](?) type LocBlock[408856](?) type BlockDom[316673](?) val super[355841]:BaseRectangularDom[146897](?) "super class" unknown sparseLayoutType[316622] "type variable" const dist[316632] "const"(316630 call unmanaged Block[415589](?) rank[146816] idxType[146820] sparseLayoutType[316622]) unknown locDoms[316654](316652 call chpl__buildArrayRuntimeType(316650 call chpl__ensureDomainExpr(316639 call . dist[316632] c"targetLocDom"))(316648 call unmanaged LocBlockDom[415592](?) rank[146816] idxType[146820] stridable[146824])) unknown whole[316668](316666 call chpl__buildDomainRuntimeType defaultDist[94058](rank = rank[146816])(idxType = idxType[146820])(stridable = stridable[146824])) type unmanaged BlockDom[415595](?) type BlockDom[415370](?) type BlockDom[408889](?) type LocBlockDom[316702](?) val super[355843]:object[22] "super class" unknown rank[316678] "param" int(64)[13] unknown idxType[316682] "type variable" unknown stridable[316686] "param" bool[10] unknown myBlock[316697](316695 call chpl__buildDomainRuntimeType defaultDist[94058] rank[316678] idxType[316682] stridable[316686]) type unmanaged LocBlockDom[415592](?) type LocBlockDom[408873](?) type BlockArr[316778](?) val super[355845]:BaseRectangularArr[149817](?) "super class" unknown sparseLayoutType[316708] "type variable" unknown doRADOpt[316713] defaultDoRADOpt[93430] bool[10] unknown dom[316725](316723 call unmanaged BlockDom[415595](?) rank[149712] idxType[149716] stridable[149720] sparseLayoutType[316708]) unknown locArr[316749](316747 call chpl__buildArrayRuntimeType(316745 call chpl__ensureDomainExpr(316733 call .(316730 call . dom[316725] c"dist") c"targetLocDom"))(316743 call unmanaged LocBlockArr[415598](?) eltType[149784] rank[149712] idxType[149716] stridable[149720])) unknown myLocArr[316762] "local field"(316759 call unmanaged LocBlockArr?[415604](?) eltType[149784] rank[149712] idxType[149716] stridable[149720]) const SENTINEL[316773] "const"(316772 call max(316769 call * rank[149712] idxType[149716])) type unmanaged BlockArr[415613](?) type BlockArr[415373](?) type BlockArr[409908](?) function LocBlockArr[316994](?).init[316847](arg _mt[316998]:_MT[238], arg this[316996]:LocBlockArr[316994](?), arg eltType[316845]:_any[178](?), param arg rank[316850] : int(64)[13], arg idxType[316853]:_any[178](?), param arg stridable[316856] : bool[10], const arg locDom[316866] :(316864 call unmanaged LocBlockDom[415592](?) rank[316850] idxType[316853] stridable[316856]), param arg initElts[316870] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(316878 call =(316874 call . this[316996] c"eltType") eltType[316845])(316887 call =(316883 call . this[316996] c"rank") rank[316850])(316895 call =(316891 call . this[316996] c"idxType") idxType[316853])(316903 call =(316899 call . this[316996] c"stridable") stridable[316856])(316913 call =(316909 call . this[316996] c"locDom") locDom[316866])(316937 call =(316919 call . this[316996] c"myElems")(316936 call(316929 call .(316926 call .(316923 call . this[316996] c"locDom") c"myBlock") c"buildArray") eltType[316845](initElts = initElts[316870])))
  } function LocBlockArr[316994](?).writeThis[316946](arg _mt[317002]:_MT[238], arg this[317000]:LocBlockArr[316994](?), arg f[316944]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(316967 call halt "LocBlockArr.writeThis() is not implemented / should not be needed")
  } function LocBlockArr[316994](?).deinit[316974](arg _mt[317006]:_MT[238], arg this[317004]:LocBlockArr[316994](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    if(316985 call _cond_test(316978 call !=(408938 call . this[317004] c"locRAD") nil[44]))
    {(316982 call chpl__delete(408943 call . this[317004] c"locRAD"))
    }
  } type LocBlockArr[316994](?) val super[355847]:object[22] "super class" unknown eltType[316782] "type variable" unknown rank[316786] "param" int(64)[13] unknown idxType[316790] "type variable" unknown stridable[316794] "param" bool[10] const locDom[316805] "const"(316803 call unmanaged LocBlockDom[415592](?) rank[316786] idxType[316790] stridable[316794]) unknown locRAD[316818](316815 call unmanaged LocRADCache?[415610](?) eltType[316782] rank[316786] idxType[316790] stridable[316794]) unknown myElems[316834] "local field" "unsafe"(316832 call chpl__buildArrayRuntimeType(316830 call chpl__ensureDomainExpr(316825 call . locDom[316805] c"myBlock")) eltType[316782]) unknown locRADLock[316839] chpl_LocalSpinlock[187398] type unmanaged LocBlockArr?[415604](?) type LocBlockArr?[415601](?) type unmanaged LocBlockArr[415598](?) type LocBlockArr[408897](?) function Block[316593](?).init[317016](arg _mt[317067]:_MT[238], arg this[317064]:Block[316593](?) : Block[316593](?), arg boundingBox[317013] : _domain[125914](?), arg targetLocales[317023] :(317019 call chpl__buildArrayRuntimeType nil[44] locale[28]) = Locales[113668], arg dataParTasksPerLocale[317030] =(317029 call getDataParTasksPerLocale), arg dataParIgnoreRunningTasks[317036] =(317035 call getDataParIgnoreRunningTasks), arg dataParMinGranularity[317042] =(317041 call getDataParMinGranularity), param arg rank[317049] =(317046 call . boundingBox[317013] c"rank"), arg idxType[317056]:_any[178](?) =(317053 call . boundingBox[317013] c"idxType"), arg sparseLayoutType[317061]:_any[178](?) = unmanaged DefaultDist[415502]) : _unknown[51] "method" "no return value for void"
  {(317074 call =(317070 call . this[317064] c"rank") rank[317049])(317083 call =(317079 call . this[317064] c"idxType") idxType[317056])
    if(317114 call _cond_test(317091 call != rank[317049](317088 call . boundingBox[317013] c"rank")))
    {(317112 call compilerError "specified Block rank != rank of specified bounding box")
    }
    if(317147 call _cond_test(317124 call != idxType[317056](317121 call . boundingBox[317013] c"idxType")))
    {(317145 call compilerError "specified Block index type != index type of specified bounding box")
    }
    if(317183 call _cond_test(317160 call &&(317154 call != rank[317049] 2)(317159 call isCSType sparseLayoutType[317061])))
    {(317181 call compilerError "CS layout is only supported for 2 dimensional domains")
    }
    if(317216 call _cond_test(317193 call ==(317189 call . boundingBox[317013] c"size") 0))
    {(317214 call halt "Block() requires a non-empty boundingBox")
    }(317238 call =(317224 call . this[317064] c"boundingBox")(317236 call _cast(317234 call chpl__buildDomainRuntimeType defaultDist[94058] rank[317049] idxType[317056](stridable = 0)) boundingBox[317013])) const ranges[317246] "const"(317245 call setupTargetLocRanges rank[317049] targetLocales[317023])(317249 'end of statement')(317259 call =(317251 call . this[317064] c"targetLocDom")(317257 call chpl__buildDomainExpr(317255 'expand_tuple' ranges[317246])))(317274 call =(317263 call . this[317064] c"targetLocales")(317273 call reshape targetLocales[317023](317270 call . this[317064] c"targetLocDom"))) const dummyLB[317287] "const"(317279 'new'(_chpl_manager = unmanaged[220](?))(317286 call LocBlock[408856](?) rank[317049] idxType[317056](dummy = 1)))(317290 'end of statement') unknown locDistTemp[317304] dummyLB[317287](317301 call chpl__buildArrayRuntimeType(317299 call chpl__ensureDomainExpr(408968 call . this[317064] c"targetLocDom"))(317297 call unmanaged LocBlock[415586](?) rank[317049] idxType[317056]))(317307 'end of statement')
    { unknown tmpIter[317346] "expr temp" "maybe ref" "no copy" "temp"(317349 'move' tmpIter[317346](408977 call . this[317064] c"targetLocDom")) unknown isRngDomArr[317517] "maybe param" "temp"(317532 'move' isRngDomArr[317517](317530 call ||(317519 call isBoundedRange tmpIter[317346])(317528 call ||(317522 call isDomain tmpIter[317346])(317525 call isArray tmpIter[317346]))))
      if isRngDomArr[317517]
      { const _coforallCount[317384] "const" "end count" "temp"(317453 'move' _coforallCount[317384](317450 call _endCountAlloc 1)) unknown numTasks[317385] "temp"(317437 'move' numTasks[317385](317433 call . tmpIter[317346] c"size"))(317428 call _upEndCount _coforallCount[317384] 1 numTasks[317385])(317425 call chpl_resetTaskSpawn numTasks[317385]) unknown _indexOfInterest[317392] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317393] "expr temp" "temp"(317402 'move' _iterator[317393](317400 call _getIterator tmpIter[317346]))
        Defer
        {
          {(317418 call _freeIterator _iterator[317393])
          }
        }
        { scopeless type(317407 'move' _indexOfInterest[317392](317404 call iteratorIndex _iterator[317393]))
        }
        ForLoop[317394]
        { unknown locid[317411] "coforall index var" "index var" "insert auto destroy"(317413 'move' locid[317411] _indexOfInterest[317392])
          {
            { const tmp[317355] "const" "temp"(317357 'move' tmp[317355](317359 'deref'(317360 '_wide_get_locale'(317365 call(317362 call . this[317064] c"targetLocales") locid[317411]))))(317369 call =(317371 call locDistTemp[317304] locid[317411])(317373 'new'(_chpl_manager = unmanaged[220](?))(317377 call LocBlock[408856](?) rank[317049] idxType[317056] locid[317411] boundingBox[317013](409003 call . this[317064] c"targetLocDom"))))(317352 'elided on block' 0 tmp[317355])
            }(317387 call _downEndCount _coforallCount[317384] nil[44])(317386 'coforall loop')
          } label _continueLabel[317397] _indexOfInterest[317392] _iterator[317393]
        } label _breakLabel[317398]
        Defer
        {
          {(317440 call _endCountFree _coforallCount[317384])
          }
        }(317445 call _waitEndCount _coforallCount[317384] 1 numTasks[317385])
      }
      { const _coforallCount[317457] "const" "end count" "temp"(317514 'move' _coforallCount[317457](317511 call _endCountAlloc 1)) unknown _indexOfInterest[317465] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317466] "expr temp" "temp"(317475 'move' _iterator[317466](317473 call _getIterator tmpIter[317346]))
        Defer
        {
          {(317491 call _freeIterator _iterator[317466])
          }
        }
        { scopeless type(317480 'move' _indexOfInterest[317465](317477 call iteratorIndex _iterator[317466]))
        }
        ForLoop[317467]
        { unknown locid[317484] "coforall index var" "index var" "insert auto destroy"(317486 'move' locid[317484] _indexOfInterest[317465])(317498 call _upEndCount _coforallCount[317457] 1)
          {
            { const tmp[317338] "const" "temp"(317339 'move' tmp[317338](317336 'deref'(317335 '_wide_get_locale'(317316 call(317311 call . this[317064] c"targetLocales") locid[317484]))))(317332 call =(317320 call locDistTemp[317304] locid[317484])(317323 'new'(_chpl_manager = unmanaged[220](?))(317331 call LocBlock[408856](?) rank[317049] idxType[317056] locid[317484] boundingBox[317013](408990 call . this[317064] c"targetLocDom"))))(317342 'elided on block' 0 tmp[317338])
            }(317460 call _downEndCount _coforallCount[317457] nil[44])(317459 'coforall loop')
          } label _continueLabel[317470] _indexOfInterest[317465] _iterator[317466]
        } label _breakLabel[317471]
        Defer
        {
          {(317502 call _endCountFree _coforallCount[317457])
          }
        }(317507 call _waitEndCount _coforallCount[317457] 1)
      }
    }(317538 call chpl__delete dummyLB[317287])(317548 call =(317544 call . this[317064] c"locDist") locDistTemp[317304])(317569 call =(317554 call . this[317064] c"dataParTasksPerLocale")(317566 IfExpr (317559 call == dataParTasksPerLocale[317030] 0) then
    { scopeless(317562 call .(365270 call here[90439]) c"maxTaskPar")
    } else
    { scopeless dataParTasksPerLocale[317030]
    } ))(317579 call =(317575 call . this[317064] c"dataParIgnoreRunningTasks") dataParIgnoreRunningTasks[317036])(317589 call =(317585 call . this[317064] c"dataParMinGranularity") dataParMinGranularity[317042])(317602 call =(317595 call . this[317064] c"sparseLayoutType")(317601 call _to_unmanaged sparseLayoutType[317061]))(317610 call(317606 call . this[317064] c"complete"))
    if(317639 call _cond_test debugBlockDist[316480])
    {(317632 call writeln "Creating new Block distribution:")(317637 call(409015 call . this[317064] c"dsiDisplayRepresentation"))
    }
  } function Block[316593](?).dsiAssign[317653](arg _mt[317658]:_MT[238], arg this[317655]:Block[316593](?) : Block[316593](?), arg other[317650] :(317649 'typeof' this[317655])) : _unknown[51] "method" "no return value for void"
  {
    { unknown tmpIter[317685] "expr temp" "maybe ref" "no copy" "temp"(317688 'move' tmpIter[317685](409021 call . this[317655] c"targetLocDom")) unknown isRngDomArr[317843] "maybe param" "temp"(317858 'move' isRngDomArr[317843](317856 call ||(317845 call isBoundedRange tmpIter[317685])(317854 call ||(317848 call isDomain tmpIter[317685])(317851 call isArray tmpIter[317685]))))
      if isRngDomArr[317843]
      { const _coforallCount[317710] "const" "end count" "temp"(317779 'move' _coforallCount[317710](317776 call _endCountAlloc 1)) unknown numTasks[317711] "temp"(317763 'move' numTasks[317711](317759 call . tmpIter[317685] c"size"))(317754 call _upEndCount _coforallCount[317710] 1 numTasks[317711])(317751 call chpl_resetTaskSpawn numTasks[317711]) unknown _indexOfInterest[317718] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317719] "expr temp" "temp"(317728 'move' _iterator[317719](317726 call _getIterator tmpIter[317685]))
        Defer
        {
          {(317744 call _freeIterator _iterator[317719])
          }
        }
        { scopeless type(317733 'move' _indexOfInterest[317718](317730 call iteratorIndex _iterator[317719]))
        }
        ForLoop[317720]
        { unknown locid[317737] "coforall index var" "index var" "insert auto destroy"(317739 'move' locid[317737] _indexOfInterest[317718])
          {
            { const tmp[317694] "const" "temp"(317696 'move' tmp[317694](317698 'deref'(317699 '_wide_get_locale'(317701 call(409038 call . this[317655] c"targetLocales") locid[317737]))))(317705 call chpl__delete(317707 call(409044 call . this[317655] c"locDist") locid[317737]))(317691 'elided on block' 0 tmp[317694])
            }(317713 call _downEndCount _coforallCount[317710] nil[44])(317712 'coforall loop')
          } label _continueLabel[317723] _indexOfInterest[317718] _iterator[317719]
        } label _breakLabel[317724]
        Defer
        {
          {(317766 call _endCountFree _coforallCount[317710])
          }
        }(317771 call _waitEndCount _coforallCount[317710] 1 numTasks[317711])
      }
      { const _coforallCount[317783] "const" "end count" "temp"(317840 'move' _coforallCount[317783](317837 call _endCountAlloc 1)) unknown _indexOfInterest[317791] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317792] "expr temp" "temp"(317801 'move' _iterator[317792](317799 call _getIterator tmpIter[317685]))
        Defer
        {
          {(317817 call _freeIterator _iterator[317792])
          }
        }
        { scopeless type(317806 'move' _indexOfInterest[317791](317803 call iteratorIndex _iterator[317792]))
        }
        ForLoop[317793]
        { unknown locid[317810] "coforall index var" "index var" "insert auto destroy"(317812 'move' locid[317810] _indexOfInterest[317791])(317824 call _upEndCount _coforallCount[317783] 1)
          {
            { const tmp[317677] "const" "temp"(317678 'move' tmp[317677](317675 'deref'(317674 '_wide_get_locale'(317665 call(409026 call . this[317655] c"targetLocales") locid[317810]))))(317671 call chpl__delete(317669 call(409032 call . this[317655] c"locDist") locid[317810]))(317681 'elided on block' 0 tmp[317677])
            }(317786 call _downEndCount _coforallCount[317783] nil[44])(317785 'coforall loop')
          } label _continueLabel[317796] _indexOfInterest[317791] _iterator[317792]
        } label _breakLabel[317797]
        Defer
        {
          {(317828 call _endCountFree _coforallCount[317783])
          }
        }(317833 call _waitEndCount _coforallCount[317783] 1)
      }
    }(317868 call =(409050 call . this[317655] c"boundingBox")(317865 call . other[317650] c"boundingBox"))(317876 call =(409055 call . this[317655] c"targetLocDom")(317873 call . other[317650] c"targetLocDom"))(317884 call =(409060 call . this[317655] c"targetLocales")(317881 call . other[317650] c"targetLocales"))(317892 call =(409065 call . this[317655] c"dataParTasksPerLocale")(317889 call . other[317650] c"dataParTasksPerLocale"))(317900 call =(409070 call . this[317655] c"dataParIgnoreRunningTasks")(317897 call . other[317650] c"dataParIgnoreRunningTasks"))(317908 call =(409075 call . this[317655] c"dataParMinGranularity")(317905 call . other[317650] c"dataParMinGranularity"))
    { unknown tmpIter[317946] "expr temp" "maybe ref" "no copy" "temp"(317949 'move' tmpIter[317946](409080 call . this[317655] c"targetLocDom")) unknown isRngDomArr[318114] "maybe param" "temp"(318129 'move' isRngDomArr[318114](318127 call ||(318116 call isBoundedRange tmpIter[317946])(318125 call ||(318119 call isDomain tmpIter[317946])(318122 call isArray tmpIter[317946]))))
      if isRngDomArr[318114]
      { const _coforallCount[317981] "const" "end count" "temp"(318050 'move' _coforallCount[317981](318047 call _endCountAlloc 1)) unknown numTasks[317982] "temp"(318034 'move' numTasks[317982](318030 call . tmpIter[317946] c"size"))(318025 call _upEndCount _coforallCount[317981] 1 numTasks[317982])(318022 call chpl_resetTaskSpawn numTasks[317982]) unknown _indexOfInterest[317989] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317990] "expr temp" "temp"(317999 'move' _iterator[317990](317997 call _getIterator tmpIter[317946]))
        Defer
        {
          {(318015 call _freeIterator _iterator[317990])
          }
        }
        { scopeless type(318004 'move' _indexOfInterest[317989](318001 call iteratorIndex _iterator[317990]))
        }
        ForLoop[317991]
        { unknown locid[318008] "coforall index var" "index var" "insert auto destroy"(318010 'move' locid[318008] _indexOfInterest[317989])
          {
            { const tmp[317955] "const" "temp"(317957 'move' tmp[317955](317959 'deref'(317960 '_wide_get_locale'(317962 call(409119 call . this[317655] c"targetLocales") locid[318008]))))(317966 call =(317968 call(409125 call . this[317655] c"locDist") locid[318008])(317970 'new'(_chpl_manager = unmanaged[220](?))(317974 call LocBlock[408856](?)(409132 call . this[317655] c"rank")(409137 call . this[317655] c"idxType") locid[318008](409143 call . this[317655] c"boundingBox")(409148 call . this[317655] c"targetLocDom"))))(317952 'elided on block' 0 tmp[317955])
            }(317984 call _downEndCount _coforallCount[317981] nil[44])(317983 'coforall loop')
          } label _continueLabel[317994] _indexOfInterest[317989] _iterator[317990]
        } label _breakLabel[317995]
        Defer
        {
          {(318037 call _endCountFree _coforallCount[317981])
          }
        }(318042 call _waitEndCount _coforallCount[317981] 1 numTasks[317982])
      }
      { const _coforallCount[318054] "const" "end count" "temp"(318111 'move' _coforallCount[318054](318108 call _endCountAlloc 1)) unknown _indexOfInterest[318062] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318063] "expr temp" "temp"(318072 'move' _iterator[318063](318070 call _getIterator tmpIter[317946]))
        Defer
        {
          {(318088 call _freeIterator _iterator[318063])
          }
        }
        { scopeless type(318077 'move' _indexOfInterest[318062](318074 call iteratorIndex _iterator[318063]))
        }
        ForLoop[318064]
        { unknown locid[318081] "coforall index var" "index var" "insert auto destroy"(318083 'move' locid[318081] _indexOfInterest[318062])(318095 call _upEndCount _coforallCount[318054] 1)
          {
            { const tmp[317938] "const" "temp"(317939 'move' tmp[317938](317936 'deref'(317935 '_wide_get_locale'(317916 call(409085 call . this[317655] c"targetLocales") locid[318081]))))(317932 call =(317920 call(409091 call . this[317655] c"locDist") locid[318081])(317923 'new'(_chpl_manager = unmanaged[220](?))(317931 call LocBlock[408856](?)(409098 call . this[317655] c"rank")(409103 call . this[317655] c"idxType") locid[318081](409109 call . this[317655] c"boundingBox")(409114 call . this[317655] c"targetLocDom"))))(317942 'elided on block' 0 tmp[317938])
            }(318057 call _downEndCount _coforallCount[318054] nil[44])(318056 'coforall loop')
          } label _continueLabel[318067] _indexOfInterest[318062] _iterator[318063]
        } label _breakLabel[318068]
        Defer
        {
          {(318099 call _endCountFree _coforallCount[318054])
          }
        }(318104 call _waitEndCount _coforallCount[318054] 1)
      }
    }
  } function Block[316593](?).dsiEqualDMaps[318145](arg _mt[318150]:_MT[238], arg this[318147]:Block[316593](?) : Block[316593](?), arg that[318142] :(318141 call Block[408866](?) ?[260])) : _unknown[51] "method"
  {(318189 return(318187 call &&(318172 call &&(318160 call ==(318153 call . this[318147] c"rank")(318157 call . that[318142] c"rank"))(318170 call ==(318163 call . this[318147] c"boundingBox")(318167 call . that[318142] c"boundingBox")))(318186 call(318178 call .(318175 call . this[318147] c"targetLocales") c"equals")(318182 call . that[318142] c"targetLocales"))))
  } function Block[316593](?).dsiEqualDMaps[318199](arg _mt[318204]:_MT[238], arg this[318201]:Block[316593](?) : Block[316593](?), arg that[318197]:_any[178](?)) param : _unknown[51] "method"
  {(318207 return 0)
  } function Block[316593](?).dsiClone[318215](arg _mt[318220]:_MT[238], arg this[318217]:Block[316593](?) : Block[316593](?)) : _unknown[51] "method"
  {(318236 return(318224 'new'(_chpl_manager = unmanaged[220](?))(318235 call Block[408866](?)(409155 call . this[318217] c"boundingBox")(409160 call . this[318217] c"targetLocales")(409165 call . this[318217] c"dataParTasksPerLocale")(409170 call . this[318217] c"dataParIgnoreRunningTasks")(409175 call . this[318217] c"dataParMinGranularity")(409180 call . this[318217] c"rank")(409185 call . this[318217] c"idxType")(409190 call . this[318217] c"sparseLayoutType"))))
  } function Block[316593](?).dsiDestroyDist[318244](arg _mt[318249]:_MT[238], arg this[318246]:Block[316593](?) : Block[316593](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[318271] "expr temp" "maybe ref" "no copy" "temp"(318274 'move' tmpIter[318271](409195 call . this[318246] c"locDist")) unknown isRngDomArr[318425] "maybe param" "temp"(318440 'move' isRngDomArr[318425](318438 call ||(318427 call isBoundedRange tmpIter[318271])(318436 call ||(318430 call isDomain tmpIter[318271])(318433 call isArray tmpIter[318271]))))
      if isRngDomArr[318425]
      { const _coforallCount[318292] "const" "end count" "temp"(318361 'move' _coforallCount[318292](318358 call _endCountAlloc 1)) unknown numTasks[318293] "temp"(318345 'move' numTasks[318293](318341 call . tmpIter[318271] c"size"))(318336 call _upEndCount _coforallCount[318292] 1 numTasks[318293])(318333 call chpl_resetTaskSpawn numTasks[318293]) unknown _indexOfInterest[318300] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318301] "expr temp" "temp"(318310 'move' _iterator[318301](318308 call _getIterator tmpIter[318271]))
        Defer
        {
          {(318326 call _freeIterator _iterator[318301])
          }
        }
        { scopeless type(318315 'move' _indexOfInterest[318300](318312 call iteratorIndex _iterator[318301]))
        }
        ForLoop[318302]
        { unknown ld[318319] "coforall index var" "index var" "insert auto destroy"(318321 'move' ld[318319] _indexOfInterest[318300])
          {
            { const tmp[318280] "const" "temp"(318282 'move' tmp[318280](318284 'deref'(318285 '_wide_get_locale' ld[318319])))(318289 call chpl__delete ld[318319])(318277 'elided on block' 0 tmp[318280])
            }(318295 call _downEndCount _coforallCount[318292] nil[44])(318294 'coforall loop')
          } label _continueLabel[318305] _indexOfInterest[318300] _iterator[318301]
        } label _breakLabel[318306]
        Defer
        {
          {(318348 call _endCountFree _coforallCount[318292])
          }
        }(318353 call _waitEndCount _coforallCount[318292] 1 numTasks[318293])
      }
      { const _coforallCount[318365] "const" "end count" "temp"(318422 'move' _coforallCount[318365](318419 call _endCountAlloc 1)) unknown _indexOfInterest[318373] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318374] "expr temp" "temp"(318383 'move' _iterator[318374](318381 call _getIterator tmpIter[318271]))
        Defer
        {
          {(318399 call _freeIterator _iterator[318374])
          }
        }
        { scopeless type(318388 'move' _indexOfInterest[318373](318385 call iteratorIndex _iterator[318374]))
        }
        ForLoop[318375]
        { unknown ld[318392] "coforall index var" "index var" "insert auto destroy"(318394 'move' ld[318392] _indexOfInterest[318373])(318406 call _upEndCount _coforallCount[318365] 1)
          {
            { const tmp[318262] "const" "temp"(318263 'move' tmp[318262](318260 'deref'(318259 '_wide_get_locale' ld[318392])))(318256 call chpl__delete ld[318392])(318266 'elided on block' 0 tmp[318262])
            }(318368 call _downEndCount _coforallCount[318365] nil[44])(318367 'coforall loop')
          } label _continueLabel[318378] _indexOfInterest[318373] _iterator[318374]
        } label _breakLabel[318379]
        Defer
        {
          {(318410 call _endCountFree _coforallCount[318365])
          }
        }(318415 call _waitEndCount _coforallCount[318365] 1)
      }
    }
  } function Block[316593](?).dsiDisplayRepresentation[318450](arg _mt[318455]:_MT[238], arg this[318452]:Block[316593](?) : Block[316593](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {(318477 call writeln "boundingBox = "(409204 call . this[318452] c"boundingBox"))(318500 call writeln "targetLocDom = "(409209 call . this[318452] c"targetLocDom"))(318531 call writeln "targetLocales = "(318527 for  tl[318529]  in (409215 call . this[318452] c"targetLocales") do
    {(318524 call . tl[318529] c"id")
    } ))(318553 call writeln "dataParTasksPerLocale = "(409220 call . this[318452] c"dataParTasksPerLocale"))(318575 call writeln "dataParIgnoreRunningTasks = "(409225 call . this[318452] c"dataParIgnoreRunningTasks"))(318597 call writeln "dataParMinGranularity = "(409230 call . this[318452] c"dataParMinGranularity"))
    { unknown _indexOfInterest[318649] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318650] "expr temp" "temp"(318659 'move' _iterator[318650](318657 call _getIterator(409235 call . this[318452] c"targetLocDom")))
      Defer
      {
        {(318675 call _freeIterator _iterator[318650])
        }
      }
      { scopeless type(318664 'move' _indexOfInterest[318649](318661 call iteratorIndex _iterator[318650]))
      }
      ForLoop[318651]
      { unknown tli[318668] "index var" "insert auto destroy"(318670 'move' tli[318668] _indexOfInterest[318649])(318647 call writeln "locDist[" tli[318668] "].myChunk = "(318644 call .(318641 call(409241 call . this[318452] c"locDist") tli[318668]) c"myChunk")) label _continueLabel[318654] _indexOfInterest[318649] _iterator[318650]
      } label _breakLabel[318655]
    }
  } function Block[316593](?).dsiNewRectangularDom[318691](arg _mt[318704]:_MT[238], arg this[318701]:Block[316593](?) : Block[316593](?), param arg rank[318688] : int(64)[13], arg idxType[318693]:_any[178](?), param arg stridable[318696] : bool[10], arg inds[318699]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(318734 call _cond_test(318711 call != idxType[318693](318708 call . this[318701] c"idxType")))
    {(318732 call compilerError "Block domain index type does not match distribution's")
    }
    if(318768 call _cond_test(318745 call != rank[318688](318742 call . this[318701] c"rank")))
    {(318766 call compilerError "Block domain rank does not match distribution's")
    } const whole[318780] "const"(318779 call createWholeDomainForInds rank[318688] idxType[318693] stridable[318696] inds[318699])(318783 'end of statement') const dummyLBD[318793] "const"(318786 'new'(_chpl_manager = unmanaged[220](?))(318792 call LocBlockDom[408873](?) rank[318688] idxType[318693] stridable[318696]))(318796 'end of statement') unknown locDomsTemp[318814] dummyLBD[318793](318811 call chpl__buildArrayRuntimeType(318809 call chpl__ensureDomainExpr(318798 call . this[318701] c"targetLocDom"))(318807 call unmanaged LocBlockDom[415592](?) rank[318688] idxType[318693] stridable[318696]))(318817 'end of statement')
    { unknown tmpIter[318865] "expr temp" "maybe ref" "no copy" "temp"(318868 'move' tmpIter[318865](318820 call . this[318701] c"targetLocDom")) unknown isRngDomArr[319041] "maybe param" "temp"(319056 'move' isRngDomArr[319041](319054 call ||(319043 call isBoundedRange tmpIter[318865])(319052 call ||(319046 call isDomain tmpIter[318865])(319049 call isArray tmpIter[318865]))))
      if isRngDomArr[319041]
      { const _coforallCount[318908] "const" "end count" "temp"(318977 'move' _coforallCount[318908](318974 call _endCountAlloc 1)) unknown numTasks[318909] "temp"(318961 'move' numTasks[318909](318957 call . tmpIter[318865] c"size"))(318952 call _upEndCount _coforallCount[318908] 1 numTasks[318909])(318949 call chpl_resetTaskSpawn numTasks[318909]) unknown _indexOfInterest[318916] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318917] "expr temp" "temp"(318926 'move' _iterator[318917](318924 call _getIterator tmpIter[318865]))
        Defer
        {
          {(318942 call _freeIterator _iterator[318917])
          }
        }
        { scopeless type(318931 'move' _indexOfInterest[318916](318928 call iteratorIndex _iterator[318917]))
        }
        ForLoop[318918]
        { unknown localeIdx[318935] "coforall index var" "index var" "insert auto destroy"(318937 'move' localeIdx[318935] _indexOfInterest[318916])
          {
            { const tmp[318874] "const" "temp"(318876 'move' tmp[318874](318878 'deref'(318879 '_wide_get_locale'(318884 call(318881 call . this[318701] c"targetLocales") localeIdx[318935]))))(318888 call =(318890 call locDomsTemp[318814] localeIdx[318935])(318892 'new'(_chpl_manager = unmanaged[220](?))(318896 call LocBlockDom[408873](?) rank[318688] idxType[318693] stridable[318696](318904 call(318901 call . this[318701] c"getChunk") whole[318780] localeIdx[318935]))))(318871 'elided on block' 0 tmp[318874])
            }(318911 call _downEndCount _coforallCount[318908] nil[44])(318910 'coforall loop')
          } label _continueLabel[318921] _indexOfInterest[318916] _iterator[318917]
        } label _breakLabel[318922]
        Defer
        {
          {(318964 call _endCountFree _coforallCount[318908])
          }
        }(318969 call _waitEndCount _coforallCount[318908] 1 numTasks[318909])
      }
      { const _coforallCount[318981] "const" "end count" "temp"(319038 'move' _coforallCount[318981](319035 call _endCountAlloc 1)) unknown _indexOfInterest[318989] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318990] "expr temp" "temp"(318999 'move' _iterator[318990](318997 call _getIterator tmpIter[318865]))
        Defer
        {
          {(319015 call _freeIterator _iterator[318990])
          }
        }
        { scopeless type(319004 'move' _indexOfInterest[318989](319001 call iteratorIndex _iterator[318990]))
        }
        ForLoop[318991]
        { unknown localeIdx[319008] "coforall index var" "index var" "insert auto destroy"(319010 'move' localeIdx[319008] _indexOfInterest[318989])(319022 call _upEndCount _coforallCount[318981] 1)
          {
            { const tmp[318857] "const" "temp"(318858 'move' tmp[318857](318855 'deref'(318854 '_wide_get_locale'(318829 call(318824 call . this[318701] c"targetLocales") localeIdx[319008]))))(318851 call =(318833 call locDomsTemp[318814] localeIdx[319008])(318836 'new'(_chpl_manager = unmanaged[220](?))(318850 call LocBlockDom[408873](?) rank[318688] idxType[318693] stridable[318696](318849 call(318843 call . this[318701] c"getChunk") whole[318780] localeIdx[319008]))))(318861 'elided on block' 0 tmp[318857])
            }(318984 call _downEndCount _coforallCount[318981] nil[44])(318983 'coforall loop')
          } label _continueLabel[318994] _indexOfInterest[318989] _iterator[318990]
        } label _breakLabel[318995]
        Defer
        {
          {(319026 call _endCountFree _coforallCount[318981])
          }
        }(319031 call _waitEndCount _coforallCount[318981] 1)
      }
    }(319062 call chpl__delete dummyLBD[318793]) unknown dom[319081](319067 'new'(_chpl_manager = unmanaged[220](?))(319080 call BlockDom[408889](?) rank[318688] idxType[318693] stridable[318696](409285 call . this[318701] c"sparseLayoutType")(319076 call _cast unmanaged[220](?) this[318701]) locDomsTemp[318814] whole[318780]))(319084 'end of statement')
    if(319115 call _cond_test debugBlockDist[316480])
    {(319105 call writeln "Creating new Block domain:")(319113 call(319109 call . dom[319081] c"dsiDisplayRepresentation"))
    }(319120 return dom[319081])
  } function Block[316593](?).dsiNewSparseDom[319131](arg _mt[319142]:_MT[238], arg this[319139]:Block[316593](?) : Block[316593](?), param arg rank[319128] : int(64)[13], arg idxType[319133]:_any[178](?), arg dom[319136] : _domain[125914](?)) : _unknown[51] "method" "method overrides"
  { unknown ret[319178](319146 'new'(_chpl_manager = unmanaged[220](?))(319177 call SparseBlockDom[409295](?)(rank = rank[319128])(idxType = idxType[319133])(sparseLayoutType =(409302 call . this[319139] c"sparseLayoutType"))(stridable =(319156 call . dom[319136] c"stridable"))(dist =(319163 call _to_unmanaged this[319139]))(whole =(319171 call .(319166 call . dom[319136] c"_value") c"whole"))(parentDom = dom[319136])))(319181 'end of statement')(319188 call(319184 call . ret[319178] c"setup"))(319191 return ret[319178])
  } function Block[316593](?).writeThis[319200](arg _mt[319205]:_MT[238], arg this[319202]:Block[316593](?) : Block[316593](?), arg x[319198]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {(319228 call <~>(319225 call <~> x[319198] "Block") "\n")(319253 call <~>(319250 call <~> x[319198] "-------") "\n")(319280 call <~>(319277 call <~>(319274 call <~> x[319198] "distributes: ")(409313 call . this[319202] c"boundingBox")) "\n")(319307 call <~>(319304 call <~>(319301 call <~> x[319198] "across locales: ")(409319 call . this[319202] c"targetLocales")) "\n")(319334 call <~>(319331 call <~>(319328 call <~> x[319198] "indexed via: ")(409325 call . this[319202] c"targetLocDom")) "\n")(319358 call <~>(319355 call <~> x[319198] "resulting in: ") "\n")
    { unknown _indexOfInterest[319447] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[319448] "expr temp" "temp"(319457 'move' _iterator[319448](319455 call _getIterator(409331 call . this[319202] c"targetLocDom")))
      Defer
      {
        {(319473 call _freeIterator _iterator[319448])
        }
      }
      { scopeless type(319462 'move' _indexOfInterest[319447](319459 call iteratorIndex _iterator[319448]))
      }
      ForLoop[319449]
      { unknown locid[319466] "index var" "insert auto destroy"(319468 'move' locid[319466] _indexOfInterest[319447])(319444 call <~>(319441 call <~>(319432 call <~>(319413 call <~>(319403 call <~>(319384 call <~>(319381 call <~> x[319198] "  [") locid[319466]) "] locale ")(319412 '_wide_get_node'(319408 call(409338 call . this[319202] c"locDist") locid[319466]))) " owns chunk: ")(319438 call .(319437 call(409344 call . this[319202] c"locDist") locid[319466]) c"myChunk")) "\n") label _continueLabel[319452] _indexOfInterest[319447] _iterator[319448]
      } label _breakLabel[319453]
    }
  } function Block[316593](?).dsiIndexToLocale[319489](arg _mt[319494]:_MT[238], arg this[319491]:Block[316593](?) : Block[316593](?), arg ind[319486] :(409350 call . this[319491] c"idxType")) : _unknown[51] "method"
  {(319507 return(319506 call(409360 call . this[319491] c"targetLocales")(319504 call(409364 call . this[319491] c"targetLocsIdx") ind[319486])))
  }
  {(319498 call ==(409355 call . this[319491] c"rank") 1)
  } function Block[316593](?).dsiIndexToLocale[319523](arg _mt[319528]:_MT[238], arg this[319525]:Block[316593](?) : Block[316593](?), arg ind[319520] :(319518 call *(409370 call . this[319525] c"rank")(409375 call . this[319525] c"idxType"))) : _unknown[51] "method"
  {(319537 return(319536 call(409380 call . this[319525] c"targetLocales")(319534 call(409384 call . this[319525] c"targetLocsIdx") ind[319520])))
  } function Block[316593](?).getChunk[319547](arg _mt[319554]:_MT[238], arg this[319551]:Block[316593](?) : Block[316593](?), arg inds[319545]:_any[178](?), arg locid[319549]:_any[178](?)) : _unknown[51] "method"
  { const chunk[319572] "const"(319571 call(319560 call .(319559 call(409390 call . this[319551] c"locDist") locid[319549]) c"myChunk")(319569 'expand_tuple'(319568 call(319564 call . inds[319545] c"getIndices"))))(319575 'end of statement')
    if(319696 call _cond_test sanityCheckDistribution[316500])
    {
      if(319692 call _cond_test(319583 call >(319579 call . chunk[319572] c"size") 0))
      {
        if(319649 call _cond_test(319593 call !=(319591 call(409396 call . this[319551] c"targetLocsIdx")(319587 call . chunk[319572] c"low")) locid[319549]))
        {(319647 call writeln "["(319599 call .(365304 call here[90439]) c"id") "] "(319620 call . chunk[319572] c"low") " is in my chunk but maps to "(319646 call(409401 call . this[319551] c"targetLocsIdx")(319642 call . chunk[319572] c"low")))
        }
        if(319687 call _cond_test(319663 call !=(319661 call(409405 call . this[319551] c"targetLocsIdx")(319657 call . chunk[319572] c"high")) locid[319549]))
        {(319685 call writeln "["(319669 call .(365309 call here[90439]) c"id") "] "(319674 call . chunk[319572] c"high") " is in my chunk but maps to "(319684 call(409410 call . this[319551] c"targetLocsIdx")(319680 call . chunk[319572] c"high")))
        }
      }
    }(319702 return chunk[319572])
  } function Block[316593](?).targetLocsIdx[319713](arg _mt[319718]:_MT[238], arg this[319715]:Block[316593](?) : Block[316593](?), arg ind[319710] :(409416 call . this[319715] c"idxType")) : _unknown[51] "method"
  {(319730 return(319729 call(409425 call . this[319715] c"targetLocsIdx")(319726 call _build_tuple ind[319710])))
  }
  {(319722 call ==(409421 call . this[319715] c"rank") 1)
  } function Block[316593](?).targetLocsIdx[319746](arg _mt[319751]:_MT[238], arg this[319748]:Block[316593](?) : Block[316593](?), arg ind[319743] :(319741 call *(409431 call . this[319748] c"rank")(409436 call . this[319748] c"idxType"))) : _unknown[51] "method"
  { unknown result[319757](319755 call *(409441 call . this[319748] c"rank") int(64)[13])(319760 'end of statement')
    { unknown i[319845] 0 unknown tmp[319846] "maybe param" "temp"(319858 'move' tmp[319846](319856 call chpl_compute_low_param_loop_bound 0(319765 call -(409446 call . this[319748] c"rank") 1))) unknown tmp[319847] "maybe param" "temp"(319868 'move' tmp[319847](319866 call chpl_compute_high_param_loop_bound 0(319863 call -(409464 call . this[319748] c"rank") 1))) unknown tmp[319848] "maybe param" "temp"(319871 'move' tmp[319848] 1)
      ParamForLoop[319873]
      { i[319845] tmp[319846] tmp[319847] tmp[319848](319842 call =(319772 call result[319757] i[319845])(319841 call max 0(319840 call min(319791 call _cast int(64)[13](319788 call -(319784 call .(319783 call(319778 call .(365315 call . this[319748] c"targetLocDom") c"dim") i[319845]) c"size") 1))(319838 call _cast int(64)[13](319835 call /(319823 call *(319808 call -(319797 call ind[319743] i[319845])(319805 call .(319804 call(319799 call .(365320 call . this[319748] c"boundingBox") c"dim") i[319845]) c"low"))(319821 call _cast(409458 call . this[319748] c"idxType")(319817 call .(319816 call(319811 call .(365325 call . this[319748] c"targetLocDom") c"dim") i[319845]) c"size")))(319832 call .(319831 call(319826 call .(365330 call . this[319748] c"boundingBox") c"dim") i[319845]) c"size"))))))
      } label _unused_continueLabel[319850] label _breakLabel[319849]
    }(319894 return(319891 IfExpr (319884 call ==(409469 call . this[319748] c"rank") 1) then
    { scopeless(319889 call result[319757] 0)
    } else
    { scopeless result[319757]
    } ))
  } function Block[316593](?).activeTargetLocales[319907](arg _mt[319912]:_MT[238], arg this[319909]:Block[316593](?) : Block[316593](?), const arg space[319903] : _domain[125914](?) =(409477 call . this[319909] c"boundingBox")) : _unknown[51] "iterator fn" "method" "no return value for void"
  { const locSpace[319924] "const"(319922 call chpl__buildDomainExpr(319920 'expand_tuple'(319919 call(319915 call . space[319903] c"dims"))))(319927 'end of statement') const low[319939] "const"(319938 call chpl__tuplify(319936 call(409481 call . this[319909] c"targetLocsIdx")(319932 call . locSpace[319924] c"first")))(319942 'end of statement') const high[319953] "const"(319952 call chpl__tuplify(319950 call(409485 call . this[319909] c"targetLocsIdx")(319946 call . locSpace[319924] c"last")))(319956 'end of statement') unknown dims[319968](319966 call *(409490 call . this[319909] c"rank")(319965 call range[64316](?)(319963 'typeof'(319962 call low[319939] 0))))(319971 'end of statement')
    { unknown i[319997] 0 unknown tmp[319998] "maybe param" "temp"(320010 'move' tmp[319998](320008 call chpl_compute_low_param_loop_bound 0(319975 call -(409497 call . this[319909] c"rank") 1))) unknown tmp[319999] "maybe param" "temp"(320020 'move' tmp[319999](320018 call chpl_compute_high_param_loop_bound 0(320015 call -(409508 call . this[319909] c"rank") 1))) unknown tmp[320000] "maybe param" "temp"(320023 'move' tmp[320000] 1)
      ParamForLoop[320025]
      { i[319997] tmp[319998] tmp[319999] tmp[320000]
        {(319993 call =(319982 call dims[319968] i[319997])(319991 call chpl_build_bounded_range(319986 call low[319939] i[319997])(319990 call high[319953] i[319997])))
        }
      } label _unused_continueLabel[320002] label _breakLabel[320001]
    }
    { unknown _indexOfInterest[320070] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[320071] "expr temp" "temp"(320080 'move' _iterator[320071](320078 call _getIterator(320038 call chpl__buildDomainExpr(320036 'expand_tuple' dims[319968]))))
      Defer
      {
        {(320097 call _freeIterator _iterator[320071])
        }
      }
      { scopeless type(320086 'move' _indexOfInterest[320070](320083 call iteratorIndex _iterator[320071]))
      }
      ForLoop[320072]
      { unknown i[320090] "index var" "insert auto destroy"(320092 'move' i[320090] _indexOfInterest[320070])
        { const chunk[320046] "const"(320045 call chpl__computeBlock i[320090](409515 call . this[319909] c"targetLocDom")(409520 call . this[319909] c"boundingBox"))(320049 'end of statement')
          if(320065 call _cond_test(320060 call >(320056 call .(320055 call locSpace[319924](320053 'expand_tuple' chunk[320046])) c"size") 0))
          {(320063 yield i[320090])
          }
        } label _continueLabel[320075] _indexOfInterest[320070] _iterator[320071]
      } label _breakLabel[320076]
    }
  } function chpl__computeBlock[320110](arg locid[320108]:_any[178](?), arg targetLocBox[320112]:_any[178](?), arg boundingBox[320114]:_any[178](?)) : _unknown[51]
  { unknown rank[320120] "param"(320117 call . targetLocBox[320112] c"rank")(320123 'end of statement') unknown idxType[320135] "type variable"(320132 call .(320131 call(320128 call chpl__tuplify boundingBox[320114]) 0) c"idxType") unknown inds[320145](320143 call * rank[320120](320142 call range[64316](?) idxType[320135]))(320148 'end of statement')
    { unknown i[320260] 0 unknown tmp[320261] "maybe param" "temp"(320273 'move' tmp[320261](320271 call chpl_compute_low_param_loop_bound 0(320152 call - rank[320120] 1))) unknown tmp[320262] "maybe param" "temp"(320283 'move' tmp[320262](320281 call chpl_compute_high_param_loop_bound 0(320278 call - rank[320120] 1))) unknown tmp[320263] "maybe param" "temp"(320286 'move' tmp[320263] 1)
      ParamForLoop[320288]
      { i[320260] tmp[320261] tmp[320262] tmp[320263]
        { const lo[320166] "const"(320163 call .(320162 call(320157 call . boundingBox[320114] c"dim") i[320260]) c"low")(320169 'end of statement') const hi[320181] "const"(320178 call .(320177 call(320172 call . boundingBox[320114] c"dim") i[320260]) c"high")(320184 'end of statement') const numelems[320192] "const"(320190 call +(320187 call - hi[320181] lo[320166]) 1)(320195 'end of statement') const numlocs[320206] "const"(320203 call .(320202 call(320197 call . targetLocBox[320112] c"dim") i[320260]) c"size")(320209 'end of statement') const tmp[320236] "const" "temp"(320235 call _computeBlock numelems[320192] numlocs[320206](320225 call(320222 call chpl__tuplify locid[320108]) i[320260])(320229 call max idxType[320135])(320233 call min idxType[320135]) lo[320166])(320243 call _check_tuple_var_decl tmp[320236] 2) const blo[320210] "const"(320237 call tmp[320236] 0) const bhi[320212] "const"(320240 call tmp[320236] 1)(320248 'end of statement')(320257 call =(320252 call inds[320145] i[320260])(320255 call chpl_build_bounded_range blo[320210] bhi[320212]))
        }
      } label _unused_continueLabel[320265] label _breakLabel[320264]
    }(320298 return inds[320145])
  } function LocBlock[316616](?).init[320309](arg _mt[320328]:_MT[238], arg this[320325]:LocBlock[316616](?) : LocBlock[316616](?), param arg rank[320306] : int(64)[13], arg idxType[320311]:_any[178](?), arg locid[320313]:_any[178](?), arg boundingBox[320315]:_any[178](?), arg targetLocDom[320322] :(320320 call chpl__buildDomainRuntimeType defaultDist[94058] rank[320306])) : _unknown[51] "method" "no return value for void"
  {(320335 call =(320331 call . this[320325] c"rank") rank[320306])(320344 call =(320340 call . this[320325] c"idxType") idxType[320311]) const inds[320356] "const"(320355 call chpl__computeBlock(320351 call chpl__tuplify locid[320313]) targetLocDom[320322] boundingBox[320315])(320359 'end of statement')(320366 call =(409558 call . this[320325] c"myChunk")(320364 call chpl__buildDomainExpr(320362 'expand_tuple' inds[320356])))
  } function LocBlock[316616](?).init[320376](arg _mt[320387]:_MT[238], arg this[320384]:LocBlock[316616](?) : LocBlock[316616](?), param arg rank[320374]:_any[178](?), arg idxType[320378]:_any[178](?), param arg dummy[320381] : bool[10]) : _unknown[51] "method" "no return value for void"
  {(320395 call =(320391 call . this[320384] c"rank") rank[320374])(320404 call =(320400 call . this[320384] c"idxType") idxType[320378])
  }
  { dummy[320381]
  } function BlockDom[316673](?).dsiMyDist[320413](arg _mt[320418]:_MT[238], arg this[320415]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "method overrides"
  {(320421 return(409567 call . this[320415] c"dist"))
  } function BlockDom[316673](?).dsiDisplayRepresentation[320429](arg _mt[320434]:_MT[238], arg this[320431]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {(320456 call writeln "whole = "(409572 call . this[320431] c"whole"))
    { unknown _indexOfInterest[320510] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[320511] "expr temp" "temp"(320520 'move' _iterator[320511](320518 call _getIterator(320461 call .(365346 call . this[320431] c"dist") c"targetLocDom")))
      Defer
      {
        {(320537 call _freeIterator _iterator[320511])
        }
      }
      { scopeless type(320526 'move' _indexOfInterest[320510](320523 call iteratorIndex _iterator[320511]))
      }
      ForLoop[320512]
      { unknown tli[320530] "index var" "insert auto destroy"(320532 'move' tli[320530] _indexOfInterest[320510])(320508 call writeln "locDoms[" tli[320530] "].myBlock = "(320505 call .(320504 call(409578 call . this[320431] c"locDoms") tli[320530]) c"myBlock")) label _continueLabel[320515] _indexOfInterest[320510] _iterator[320511]
      } label _breakLabel[320516]
    }
  } function BlockDom[316673](?).dsiDims[320549](arg _mt[320554]:_MT[238], arg this[320551]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method"
  {(320562 return(320561 call(320557 call .(365351 call . this[320551] c"whole") c"dims")))
  } function BlockDom[316673](?).dsiDim[320574](arg _mt[320579]:_MT[238], arg this[320576]:BlockDom[316673](?) : BlockDom[316673](?), arg d[320571] : int(64)[13]) : _unknown[51] "method"
  {(320588 return(320587 call(320582 call .(365356 call . this[320576] c"whole") c"dim") d[320571]))
  } function BlockDom[316673](?).getLocDom[320598](arg _mt[320603]:_MT[238], arg this[320600]:BlockDom[316673](?) : BlockDom[316673](?), arg localeIdx[320596]:_any[178](?)) : _unknown[51] "method"
  {(320609 return(320608 call(409585 call . this[320600] c"locDoms") localeIdx[320596]))
  } function _matchArgsShape[320618](arg rangeType[320616]:_any[178](?), arg scalarType[320620]:_any[178](?), arg args[320622]:_any[178](?)) type : _unknown[51]
  { function helper[320630](param arg i[320627] : int(64)[13]) type : _unknown[51]
    {
      if(320705 call _cond_test(320637 call == i[320627](320634 call . args[320622] c"size")))
      {
        if(320656 call _cond_test(320645 call isCollapsedDimension(320643 call args[320622] i[320627])))
        {(320649 return(320647 call _build_tuple scalarType[320620]))
        }
        {(320654 return(320652 call _build_tuple rangeType[320616]))
        }
      }
      {
        if(320698 call _cond_test(320669 call isCollapsedDimension(320667 call args[320622] i[320627])))
        {(320682 return(320680 call _build_tuple scalarType[320620](320678 'expand_tuple'(320677 call helper(320674 call + i[320627] 1)))))
        }
        {(320696 return(320694 call _build_tuple rangeType[320616](320692 'expand_tuple'(320691 call helper(320688 call + i[320627] 1)))))
        }
      }
    }(320717 return(320716 call helper 0))
  } function BlockDom[316673](?).these[320724](arg _mt[320729]:_MT[238], arg this[320726]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[320736] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[320737] "expr temp" "temp"(320746 'move' _iterator[320737](320744 call _getIterator(409602 call . this[320726] c"whole")))
      Defer
      {
        {(320762 call _freeIterator _iterator[320737])
        }
      }
      { scopeless type(320751 'move' _indexOfInterest[320736](320748 call iteratorIndex _iterator[320737]))
      }
      ForLoop[320738]
      { unknown i[320755] "index var" "insert auto destroy"(320757 'move' i[320755] _indexOfInterest[320736])(320734 yield i[320755]) label _continueLabel[320741] _indexOfInterest[320736] _iterator[320737]
      } label _breakLabel[320742]
    }
  } function BlockDom[316673](?).these[320779](arg _mt[320784]:_MT[238], arg this[320781]:BlockDom[316673](?) : BlockDom[316673](?), param arg tag[320776] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  { const maxTasks[320797] "const"(320794 call .(365363 call . this[320781] c"dist") c"dataParTasksPerLocale")(320800 'end of statement') const ignoreRunning[320806] "const"(320803 call .(365368 call . this[320781] c"dist") c"dataParIgnoreRunningTasks")(320809 'end of statement') const minSize[320814] "const"(320811 call .(365373 call . this[320781] c"dist") c"dataParMinGranularity")(320817 'end of statement') const wholeLow[320822] "const"(320819 call .(365378 call . this[320781] c"whole") c"low")(320825 'end of statement') const hereId[320830] "const"(320827 call .(365381 call here[90439]) c"id")(320833 'end of statement') const hereIgnoreRunning[320848] "const"(320845 IfExpr (320841 call ==(320839 call(320835 call .(365383 call here[90439]) c"runningTasks")) 1) then
    { scopeless 1
    } else
    { scopeless ignoreRunning[320806]
    } )(320851 'end of statement')
    { unknown tmpIter[321088] "expr temp" "maybe ref" "no copy" "temp"(321091 'move' tmpIter[321088](409611 call . this[320781] c"locDoms")) unknown isRngDomArr[321428] "maybe param" "temp"(321443 'move' isRngDomArr[321428](321441 call ||(321430 call isBoundedRange tmpIter[321088])(321439 call ||(321433 call isDomain tmpIter[321088])(321436 call isArray tmpIter[321088]))))
      if isRngDomArr[321428]
      { const _coforallCount[321295] "const" "end count" "temp"(321364 'move' _coforallCount[321295](321361 call _endCountAlloc 1)) unknown numTasks[321296] "temp"(321348 'move' numTasks[321296](321344 call . tmpIter[321088] c"size"))(321339 call _upEndCount _coforallCount[321295] 1 numTasks[321296])(321336 call chpl_resetTaskSpawn numTasks[321296]) unknown _indexOfInterest[321303] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[321304] "expr temp" "temp"(321313 'move' _iterator[321304](321311 call _getIterator tmpIter[321088]))
        Defer
        {
          {(321329 call _freeIterator _iterator[321304])
          }
        }
        { scopeless type(321318 'move' _indexOfInterest[321303](321315 call iteratorIndex _iterator[321304]))
        }
        ForLoop[321305]
        { unknown locDom[321322] "coforall index var" "index var" "insert auto destroy"(321324 'move' locDom[321322] _indexOfInterest[321303])
          {
            { const tmp[321097] "const" "temp"(321099 'move' tmp[321097](321101 'deref'(321102 '_wide_get_locale' locDom[321322])))
              { const myIgnoreRunning[321106] "const"(321118 IfExpr (321108 call ==(321110 call .(365394 call here[90439]) c"id") hereId[320830]) then
                { scopeless hereIgnoreRunning[320848]
                } else
                { scopeless ignoreRunning[320806]
                } )(321120 'end of statement') unknown strType[321121] "type variable"(321123 call chpl__signedType(409662 call . this[320781] c"idxType")) const tmpBlock[321127] "const"(321135 call(321129 call .(321131 call . locDom[321322] c"myBlock") c"chpl__unTranslate") wholeLow[320822])(321138 'end of statement') unknown locOffset[321140](321142 call *(409668 call . this[320781] c"rank")(409673 call . this[320781] c"idxType"))(321146 'end of statement')
                { unknown i[321148] 0 unknown tmp[321151] "maybe param" "temp"(321153 'move' tmp[321151](321156 call chpl_compute_low_param_loop_bound 0(321159 call -(321161 call . tmpBlock[321127] c"rank") 1))) unknown tmp[321165] "maybe param" "temp"(321167 'move' tmp[321165](321170 call chpl_compute_high_param_loop_bound 0(321173 call -(321175 call . tmpBlock[321127] c"rank") 1))) unknown tmp[321179] "maybe param" "temp"(321181 'move' tmp[321179] 1)
                  ParamForLoop[321184]
                  { i[321148] tmp[321151] tmp[321165] tmp[321179]
                    { const stride[321192] "const"(321194 call .(321199 call(321196 call . tmpBlock[321127] c"dim") i[321148]) c"stride")(321203 'end of statement')
                      if(321205 call _cond_test(321207 call &&(321209 call < stride[321192] 0)(321213 call != strType[321121](409681 call . this[320781] c"idxType"))))
                      {(321219 call halt "negative stride not supported with unsigned idxType")
                      }(321223 call =(321225 call locOffset[321140] i[321148])(321228 call /(321230 call .(321235 call(321232 call . tmpBlock[321127] c"dim") i[321148]) c"first")(321239 call _cast(409689 call . this[320781] c"idxType") stride[321192])))
                    }
                  } label _unused_continueLabel[321242] label _breakLabel[321244]
                }
                { unknown _indexOfInterest[321247] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[321249] "expr temp" "temp"(321251 'move' _iterator[321249](321254 call _getIterator(321259 call(321256 call . tmpBlock[321127] c"these") leader[447] maxTasks[320797] myIgnoreRunning[321106] minSize[320814] locOffset[321140])))
                  Defer
                  {
                    {(321270 call _freeIterator _iterator[321249])
                    }
                  }
                  { scopeless type(321274 'move' _indexOfInterest[321247](321277 call iteratorIndex _iterator[321249]))
                  }
                  ForLoop[321279]
                  { unknown followThis[321282] "index var" "insert auto destroy"(321284 'move' followThis[321282] _indexOfInterest[321247])(321288 yield followThis[321282]) label _continueLabel[321290] _indexOfInterest[321247] _iterator[321249]
                  } label _breakLabel[321292]
                }
              }(321094 'elided on block' 0 tmp[321097])
            }(321298 call _downEndCount _coforallCount[321295] nil[44])(321297 'coforall loop')
          } label _continueLabel[321308] _indexOfInterest[321303] _iterator[321304]
        } label _breakLabel[321309]
        Defer
        {
          {(321351 call _endCountFree _coforallCount[321295])
          }
        }(321356 call _waitEndCount _coforallCount[321295] 1 numTasks[321296])
      }
      { const _coforallCount[321368] "const" "end count" "temp"(321425 'move' _coforallCount[321368](321422 call _endCountAlloc 1)) unknown _indexOfInterest[321376] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[321377] "expr temp" "temp"(321386 'move' _iterator[321377](321384 call _getIterator tmpIter[321088]))
        Defer
        {
          {(321402 call _freeIterator _iterator[321377])
          }
        }
        { scopeless type(321391 'move' _indexOfInterest[321376](321388 call iteratorIndex _iterator[321377]))
        }
        ForLoop[321378]
        { unknown locDom[321395] "coforall index var" "index var" "insert auto destroy"(321397 'move' locDom[321395] _indexOfInterest[321376])(321409 call _upEndCount _coforallCount[321368] 1)
          {
            { const tmp[321080] "const" "temp"(321081 'move' tmp[321080](321078 'deref'(321077 '_wide_get_locale' locDom[321395])))
              { const myIgnoreRunning[320867] "const"(320864 IfExpr (320860 call ==(320856 call .(365385 call here[90439]) c"id") hereId[320830]) then
                { scopeless hereIgnoreRunning[320848]
                } else
                { scopeless ignoreRunning[320806]
                } )(320870 'end of statement') unknown strType[320876] "type variable"(320875 call chpl__signedType(409620 call . this[320781] c"idxType")) const tmpBlock[320889] "const"(320888 call(320883 call .(320880 call . locDom[321395] c"myBlock") c"chpl__unTranslate") wholeLow[320822])(320892 'end of statement') unknown locOffset[320897](320895 call *(409626 call . this[320781] c"rank")(409631 call . this[320781] c"idxType"))(320900 'end of statement')
                { unknown i[320985] 0 unknown tmp[320986] "maybe param" "temp"(320998 'move' tmp[320986](320996 call chpl_compute_low_param_loop_bound 0(320907 call -(320903 call . tmpBlock[320889] c"rank") 1))) unknown tmp[320987] "maybe param" "temp"(321011 'move' tmp[320987](321009 call chpl_compute_high_param_loop_bound 0(321003 call -(321005 call . tmpBlock[320889] c"rank") 1))) unknown tmp[320988] "maybe param" "temp"(321014 'move' tmp[320988] 1)
                  ParamForLoop[321016]
                  { i[320985] tmp[320986] tmp[320987] tmp[320988]
                    { const stride[320921] "const"(320918 call .(320917 call(320912 call . tmpBlock[320889] c"dim") i[320985]) c"stride")(320924 'end of statement')
                      if(320957 call _cond_test(320934 call &&(320928 call < stride[320921] 0)(320932 call != strType[320876](409639 call . this[320781] c"idxType"))))
                      {(320955 call halt "negative stride not supported with unsigned idxType")
                      }(320982 call =(320965 call locOffset[320897] i[320985])(320980 call /(320973 call .(320972 call(320967 call . tmpBlock[320889] c"dim") i[320985]) c"first")(320978 call _cast(409648 call . this[320781] c"idxType") stride[320921])))
                    }
                  } label _unused_continueLabel[320990] label _breakLabel[320989]
                }
                { unknown _indexOfInterest[321043] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[321044] "expr temp" "temp"(321053 'move' _iterator[321044](321051 call _getIterator(321039 call(321027 call . tmpBlock[320889] c"these") leader[447] maxTasks[320797] myIgnoreRunning[320867] minSize[320814] locOffset[320897])))
                  Defer
                  {
                    {(321070 call _freeIterator _iterator[321044])
                    }
                  }
                  { scopeless type(321059 'move' _indexOfInterest[321043](321056 call iteratorIndex _iterator[321044]))
                  }
                  ForLoop[321045]
                  { unknown followThis[321063] "index var" "insert auto destroy"(321065 'move' followThis[321063] _indexOfInterest[321043])(321041 yield followThis[321063]) label _continueLabel[321048] _indexOfInterest[321043] _iterator[321044]
                  } label _breakLabel[321049]
                }
              }(321084 'elided on block' 0 tmp[321080])
            }(321371 call _downEndCount _coforallCount[321368] nil[44])(321370 'coforall loop')
          } label _continueLabel[321381] _indexOfInterest[321376] _iterator[321377]
        } label _breakLabel[321382]
        Defer
        {
          {(321413 call _endCountFree _coforallCount[321368])
          }
        }(321418 call _waitEndCount _coforallCount[321368] 1)
      }
    }
  }
  {(320791 call == tag[320776] leader[447])
  } function BlockDom[316673](?).these[321457](arg _mt[321464]:_MT[238], arg this[321461]:BlockDom[316673](?) : BlockDom[316673](?), param arg tag[321454] : iterKind[453], arg followThis[321459]:_any[178](?)) : _unknown[51] "iterator fn" "method"
  { function anyStridable[321477](arg rangeTuple[321475]:_any[178](?), param arg i[321481] : int(64)[13] = 0) param : _unknown[51]
    {(321522 return(321519 IfExpr (321493 call == i[321481](321491 call -(321487 call . rangeTuple[321475] c"size") 1)) then
      { scopeless(321499 call .(321498 call rangeTuple[321475] i[321481]) c"stridable")
      } else
      { scopeless(321517 call ||(321506 call .(321505 call rangeTuple[321475] i[321481]) c"stridable")(321516 call anyStridable rangeTuple[321475](321514 call + i[321481] 1)))
      } ))
    }
    if(321551 call _cond_test chpl__testParFlag[188312])
    {(321549 call chpl__testParWriteln "Block domain follower invoked on " followThis[321459])
    } unknown t[321571](321569 call *(409711 call . this[321461] c"rank")(321568 call range[64316](?)(409717 call . this[321461] c"idxType")(stridable =(321565 call ||(409722 call . this[321461] c"stridable")(321564 call anyStridable followThis[321459])))))(321574 'end of statement') unknown strType[321579] "type variable"(321578 call chpl__signedType(409728 call . this[321461] c"idxType"))
    { unknown i[321698] 0 unknown tmp[321699] "maybe param" "temp"(321711 'move' tmp[321699](321709 call chpl_compute_low_param_loop_bound 0(321585 call -(409733 call . this[321461] c"rank") 1))) unknown tmp[321700] "maybe param" "temp"(321721 'move' tmp[321700](321719 call chpl_compute_high_param_loop_bound 0(321716 call -(409770 call . this[321461] c"rank") 1))) unknown tmp[321701] "maybe param" "temp"(321724 'move' tmp[321701] 1)
      ParamForLoop[321726]
      { i[321698] tmp[321699] tmp[321700] tmp[321701]
        { unknown stride[321602](321600 call _cast strType[321579](321596 call .(321595 call(321590 call .(365407 call . this[321461] c"whole") c"dim") i[321698]) c"stride"))(321605 'end of statement') unknown low[321623](321621 call _cast(409744 call . this[321461] c"idxType")(321618 call * stride[321602](321616 call _cast strType[321579](321612 call .(321611 call followThis[321459] i[321698]) c"low"))))(321626 'end of statement') unknown high[321643](321641 call _cast(409753 call . this[321461] c"idxType")(321638 call * stride[321602](321636 call _cast strType[321579](321632 call .(321631 call followThis[321459] i[321698]) c"high"))))(321646 'end of statement')(321695 call =(321650 call t[321571] i[321698])(321694 call(321685 call .(321683 call chpl_by(321671 call +(321659 call chpl_by(321653 call chpl_build_bounded_range low[321623] high[321643])(321657 call _cast strType[321579] stride[321602]))(321668 call .(321667 call(321662 call .(365412 call . this[321461] c"whole") c"dim") i[321698]) c"alignedLow"))(321681 call _cast strType[321579](321677 call .(321676 call followThis[321459] i[321698]) c"stride"))) c"safeCast")(321692 'typeof'(321691 call t[321571] i[321698]))))
        }
      } label _unused_continueLabel[321703] label _breakLabel[321702]
    }
    { unknown _indexOfInterest[321745] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[321746] "expr temp" "temp"(321755 'move' _iterator[321746](321753 call _getIterator(321739 call chpl__buildDomainExpr(321737 'expand_tuple' t[321571]))))
      Defer
      {
        {(321772 call _freeIterator _iterator[321746])
        }
      }
      { scopeless type(321761 'move' _indexOfInterest[321745](321758 call iteratorIndex _iterator[321746]))
      }
      ForLoop[321747]
      { unknown i[321765] "index var" "insert auto destroy"(321767 'move' i[321765] _indexOfInterest[321745])
        {(321742 yield i[321765])
        } label _continueLabel[321750] _indexOfInterest[321745] _iterator[321746]
      } label _breakLabel[321751]
    }
  }
  {(321471 call == tag[321454] follower[449])
  } function BlockDom[316673](?).dsiSerialWrite[321787](arg _mt[321792]:_MT[238], arg this[321789]:BlockDom[316673](?) : BlockDom[316673](?), arg x[321785]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(321796 call <~> x[321785](409778 call . this[321789] c"whole"))
  } function BlockDom[316673](?).dsiBuildArray[321807](arg _mt[321816]:_MT[238], arg this[321813]:BlockDom[316673](?) : BlockDom[316673](?), arg eltType[321805]:_any[178](?), param arg initElts[321810] : bool[10]) : _unknown[51] "method"
  { const dom[321819] "const" this[321813](321822 'end of statement') const creationLocale[321828] "const"(321825 call .(365415 call here[90439]) c"id")(321831 'end of statement') const dummyLBD[321841] "const"(321834 'new'(_chpl_manager = unmanaged[220](?))(321840 call LocBlockDom[408873](?)(409785 call . this[321813] c"rank")(409790 call . this[321813] c"idxType")(409795 call . this[321813] c"stridable")))(321844 'end of statement') const dummyLBA[321857] "const"(321847 'new'(_chpl_manager = unmanaged[220](?))(321856 call LocBlockArr[408897](?) eltType[321805](409802 call . this[321813] c"rank")(409807 call . this[321813] c"idxType")(409812 call . this[321813] c"stridable") dummyLBD[321841] 0))(321860 'end of statement') unknown locArrTemp[321882] dummyLBA[321857](321879 call chpl__buildArrayRuntimeType(321877 call chpl__ensureDomainExpr(321865 call .(321862 call . dom[321819] c"dist") c"targetLocDom"))(321875 call unmanaged LocBlockArr[415598](?) eltType[321805](409820 call . this[321813] c"rank")(409825 call . this[321813] c"idxType")(409830 call . this[321813] c"stridable")))(321885 'end of statement') unknown myLocArrTemp[321895](321892 call unmanaged LocBlockArr?[415604](?) eltType[321805](409838 call . this[321813] c"rank")(409843 call . this[321813] c"idxType")(409848 call . this[321813] c"stridable"))(321898 'end of statement')
    { unknown tmpIter[321988] "expr temp" "maybe ref" "no copy" "temp"(321991 'move' tmpIter[321988](321904 call .(321901 call . dom[321819] c"dist") c"targetLocDom")) unknown isRngDomArr[322193] "maybe param" "temp"(322208 'move' isRngDomArr[322193](322206 call ||(322195 call isBoundedRange tmpIter[321988])(322204 call ||(322198 call isDomain tmpIter[321988])(322201 call isArray tmpIter[321988]))))
      if isRngDomArr[322193]
      { const _coforallCount[322060] "const" "end count" "temp"(322129 'move' _coforallCount[322060](322126 call _endCountAlloc 1)) unknown numTasks[322061] "temp"(322113 'move' numTasks[322061](322109 call . tmpIter[321988] c"size"))(322104 call _upEndCount _coforallCount[322060] 1 numTasks[322061])(322101 call chpl_resetTaskSpawn numTasks[322061]) unknown _indexOfInterest[322068] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[322069] "expr temp" "temp"(322078 'move' _iterator[322069](322076 call _getIterator tmpIter[321988]))
        Defer
        {
          {(322094 call _freeIterator _iterator[322069])
          }
        }
        { scopeless type(322083 'move' _indexOfInterest[322068](322080 call iteratorIndex _iterator[322069]))
        }
        ForLoop[322070]
        { unknown localeIdx[322087] "coforall index var" "index var" "insert auto destroy"(322089 'move' localeIdx[322087] _indexOfInterest[322068])
          {
            { const tmp[322000] "const" "temp"(322002 'move' tmp[322000](322004 'deref'(322005 '_wide_get_locale'(322013 call(322007 call .(322009 call . dom[321819] c"dist") c"targetLocales") localeIdx[322087]))))
              { const LBA[322017] "const"(322018 'new'(_chpl_manager = unmanaged[220](?))(322022 call LocBlockArr[408897](?) eltType[321805](409884 call . this[321813] c"rank")(409889 call . this[321813] c"idxType")(409894 call . this[321813] c"stridable")(322031 call(322028 call . dom[321819] c"getLocDom") localeIdx[322087])(initElts = initElts[321810])))(322036 'end of statement')(322038 call =(322040 call locArrTemp[321882] localeIdx[322087]) LBA[322017])
                if(322044 call _cond_test(322046 call ==(322048 call .(365425 call here[90439]) c"id") creationLocale[321828]))
                {(322055 call = myLocArrTemp[321895] LBA[322017])
                }
              }(321997 'elided on block' 0 tmp[322000])
            }(322063 call _downEndCount _coforallCount[322060] nil[44])(322062 'coforall loop')(321993 'actuals list' tiMarkRef[294] myLocArrTemp[321895])
          } label _continueLabel[322073] _indexOfInterest[322068] _iterator[322069]
        } label _breakLabel[322074]
        Defer
        {
          {(322116 call _endCountFree _coforallCount[322060])
          }
        }(322121 call _waitEndCount _coforallCount[322060] 1 numTasks[322061])
      }
      { const _coforallCount[322133] "const" "end count" "temp"(322190 'move' _coforallCount[322133](322187 call _endCountAlloc 1)) unknown _indexOfInterest[322141] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[322142] "expr temp" "temp"(322151 'move' _iterator[322142](322149 call _getIterator tmpIter[321988]))
        Defer
        {
          {(322167 call _freeIterator _iterator[322142])
          }
        }
        { scopeless type(322156 'move' _indexOfInterest[322141](322153 call iteratorIndex _iterator[322142]))
        }
        ForLoop[322143]
        { unknown localeIdx[322160] "coforall index var" "index var" "insert auto destroy"(322162 'move' localeIdx[322160] _indexOfInterest[322141])(322174 call _upEndCount _coforallCount[322133] 1)
          {
            { const tmp[321979] "const" "temp"(321980 'move' tmp[321979](321977 'deref'(321976 '_wide_get_locale'(321924 call(321919 call .(321916 call . dom[321819] c"dist") c"targetLocales") localeIdx[322160]))))
              { const LBA[321946] "const"(321927 'new'(_chpl_manager = unmanaged[220](?))(321945 call LocBlockArr[408897](?) eltType[321805](409857 call . this[321813] c"rank")(409862 call . this[321813] c"idxType")(409867 call . this[321813] c"stridable")(321942 call(321937 call . dom[321819] c"getLocDom") localeIdx[322160])(initElts = initElts[321810])))(321949 'end of statement')(321956 call =(321954 call locArrTemp[321882] localeIdx[322160]) LBA[321946])
                if(321971 call _cond_test(321964 call ==(321960 call .(365421 call here[90439]) c"id") creationLocale[321828]))
                {(321968 call = myLocArrTemp[321895] LBA[321946])
                }
              }(321983 'elided on block' 0 tmp[321979])
            }(322136 call _downEndCount _coforallCount[322133] nil[44])(322135 'coforall loop')(321912 'actuals list' tiMarkRef[294] myLocArrTemp[321895])
          } label _continueLabel[322146] _indexOfInterest[322141] _iterator[322142]
        } label _breakLabel[322147]
        Defer
        {
          {(322178 call _endCountFree _coforallCount[322133])
          }
        }(322183 call _waitEndCount _coforallCount[322133] 1)
      }
    }(322215 call chpl__delete dummyLBA[321857] dummyLBD[321841]) unknown arr[322243](322220 'new'(_chpl_manager = unmanaged[220](?))(322242 call BlockArr[409908](?)(eltType = eltType[321805])(rank =(409914 call . this[321813] c"rank"))(idxType =(409919 call . this[321813] c"idxType"))(stridable =(409924 call . this[321813] c"stridable"))(sparseLayoutType =(409929 call . this[321813] c"sparseLayoutType"))(dom =(322236 call _to_unmanaged dom[321819]))(locArr = locArrTemp[321882])(myLocArr = myLocArrTemp[321895])))(322246 'end of statement')
    if(322265 call _cond_test(322254 call &&(322250 call . arr[322243] c"doRADOpt") disableBlockLazyRAD[316510]))
    {(322263 call(322259 call . arr[322243] c"setupRADOpt"))
    }(322271 return arr[322243])
  } function BlockDom[316673](?).dsiNumIndices[322278](arg _mt[322283]:_MT[238], arg this[322280]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "no parens"
  {(322289 return(322286 call .(365431 call . this[322280] c"whole") c"size"))
  } function BlockDom[316673](?).dsiLow[322297](arg _mt[322302]:_MT[238], arg this[322299]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "no parens"
  {(322308 return(322305 call .(365436 call . this[322299] c"whole") c"low"))
  } function BlockDom[316673](?).dsiHigh[322316](arg _mt[322321]:_MT[238], arg this[322318]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "no parens"
  {(322327 return(322324 call .(365441 call . this[322318] c"whole") c"high"))
  } function BlockDom[316673](?).dsiStride[322335](arg _mt[322340]:_MT[238], arg this[322337]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "no parens"
  {(322346 return(322343 call .(365446 call . this[322337] c"whole") c"stride"))
  } function BlockDom[316673](?).dsiAlignedLow[322354](arg _mt[322359]:_MT[238], arg this[322356]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "no parens"
  {(322365 return(322362 call .(365451 call . this[322356] c"whole") c"alignedLow"))
  } function BlockDom[316673](?).dsiAlignedHigh[322373](arg _mt[322378]:_MT[238], arg this[322375]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "no parens"
  {(322384 return(322381 call .(365456 call . this[322375] c"whole") c"alignedHigh"))
  } function BlockDom[316673](?).dsiAlignment[322392](arg _mt[322397]:_MT[238], arg this[322394]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "no parens"
  {(322403 return(322400 call .(365461 call . this[322394] c"whole") c"alignment"))
  } function BlockDom[316673](?).dsiSetIndices[322415](arg _mt[322420]:_MT[238], arg this[322417]:BlockDom[316673](?) : BlockDom[316673](?), arg x[322412] : _domain[125914](?)) : _unknown[51] "method" "no return value for void"
  {
    if(322434 call _cond_test(322427 call !=(322423 call . x[322412] c"rank")(409940 call . this[322417] c"rank")))
    {(322432 call compilerError "rank mismatch in domain assignment")
    }
    if(322455 call _cond_test(322448 call !=(322444 call .(322441 call . x[322412] c"_value") c"idxType")(409945 call . this[322417] c"idxType")))
    {(322453 call compilerError "index type mismatch in domain assignment")
    }(322462 call =(409950 call . this[322417] c"whole") x[322412])(322467 call(409955 call . this[322417] c"setup"))
    if(322496 call _cond_test debugBlockDist[316480])
    {(322489 call writeln "Setting indices of Block domain:")(322494 call(409960 call . this[322417] c"dsiDisplayRepresentation"))
    }
  } function BlockDom[316673](?).dsiSetIndices[322507](arg _mt[322512]:_MT[238], arg this[322509]:BlockDom[316673](?) : BlockDom[316673](?), arg x[322505]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(322526 call _cond_test(322519 call !=(322515 call . x[322505] c"size")(409965 call . this[322509] c"rank")))
    {(322524 call compilerError "rank mismatch in domain assignment")
    }
    if(322547 call _cond_test(322540 call !=(322536 call .(322535 call x[322505] 0) c"idxType")(409971 call . this[322509] c"idxType")))
    {(322545 call compilerError "index type mismatch in domain assignment")
    }(322558 call(322553 call .(365469 call . this[322509] c"whole") c"setIndices") x[322505])(322562 call(409976 call . this[322509] c"setup"))
    if(322575 call _cond_test debugBlockDist[316480])
    {(322568 call writeln "Setting indices of Block domain:")(322573 call(409981 call . this[322509] c"dsiDisplayRepresentation"))
    }
  } function BlockDom[316673](?).dsiGetIndices[322584](arg _mt[322589]:_MT[238], arg this[322586]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method"
  {(322597 return(322596 call(322592 call .(365474 call . this[322586] c"whole") c"getIndices")))
  } function BlockDom[316673](?).dsiAssignDomain[322609](arg _mt[322618]:_MT[238], arg this[322615]:BlockDom[316673](?) : BlockDom[316673](?), arg rhs[322606] : _domain[125914](?), arg lhsPrivate[322612] : bool[10]) : _unknown[51] "method" "no return value for void"
  {(322624 call chpl_assignDomainWithGetSetIndices this[322615] rhs[322606])
  } function BlockDom[316673](?).dsiLocalSlice[322636](arg _mt[322643]:_MT[238], arg this[322640]:BlockDom[316673](?) : BlockDom[316673](?), param arg stridable[322633] : bool[10], arg ranges[322638]:_any[178](?)) : _unknown[51] "method"
  {(322650 return(322649 call(409989 call . this[322640] c"whole")(322647 'expand_tuple' ranges[322638])))
  } function BlockDom[316673](?).setup[322658](arg _mt[322663]:_MT[238], arg this[322660]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "no return value for void"
  {
    { unknown tmpIter[322707] "expr temp" "maybe ref" "no copy" "temp"(322710 'move' tmpIter[322707](322667 call .(365479 call . this[322660] c"dist") c"targetLocDom")) unknown isRngDomArr[322878] "maybe param" "temp"(322893 'move' isRngDomArr[322878](322891 call ||(322880 call isBoundedRange tmpIter[322707])(322889 call ||(322883 call isDomain tmpIter[322707])(322886 call isArray tmpIter[322707]))))
      if isRngDomArr[322878]
      { const _coforallCount[322745] "const" "end count" "temp"(322814 'move' _coforallCount[322745](322811 call _endCountAlloc 1)) unknown numTasks[322746] "temp"(322798 'move' numTasks[322746](322794 call . tmpIter[322707] c"size"))(322789 call _upEndCount _coforallCount[322745] 1 numTasks[322746])(322786 call chpl_resetTaskSpawn numTasks[322746]) unknown _indexOfInterest[322753] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[322754] "expr temp" "temp"(322763 'move' _iterator[322754](322761 call _getIterator tmpIter[322707]))
        Defer
        {
          {(322779 call _freeIterator _iterator[322754])
          }
        }
        { scopeless type(322768 'move' _indexOfInterest[322753](322765 call iteratorIndex _iterator[322754]))
        }
        ForLoop[322755]
        { unknown localeIdx[322772] "coforall index var" "index var" "insert auto destroy"(322774 'move' localeIdx[322772] _indexOfInterest[322753])
          {
            { const tmp[322716] "const" "temp"(322718 'move' tmp[322716](322720 'deref'(322721 '_wide_get_locale'(322726 call(322723 call .(365494 call . this[322660] c"dist") c"targetLocales") localeIdx[322772]))))(322730 call =(322732 call .(322734 call(410009 call . this[322660] c"locDoms") localeIdx[322772]) c"myBlock")(322741 call(322738 call .(365499 call . this[322660] c"dist") c"getChunk")(410015 call . this[322660] c"whole") localeIdx[322772]))(322713 'elided on block' 0 tmp[322716])
            }(322748 call _downEndCount _coforallCount[322745] nil[44])(322747 'coforall loop')
          } label _continueLabel[322758] _indexOfInterest[322753] _iterator[322754]
        } label _breakLabel[322759]
        Defer
        {
          {(322801 call _endCountFree _coforallCount[322745])
          }
        }(322806 call _waitEndCount _coforallCount[322745] 1 numTasks[322746])
      }
      { const _coforallCount[322818] "const" "end count" "temp"(322875 'move' _coforallCount[322818](322872 call _endCountAlloc 1)) unknown _indexOfInterest[322826] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[322827] "expr temp" "temp"(322836 'move' _iterator[322827](322834 call _getIterator tmpIter[322707]))
        Defer
        {
          {(322852 call _freeIterator _iterator[322827])
          }
        }
        { scopeless type(322841 'move' _indexOfInterest[322826](322838 call iteratorIndex _iterator[322827]))
        }
        ForLoop[322828]
        { unknown localeIdx[322845] "coforall index var" "index var" "insert auto destroy"(322847 'move' localeIdx[322845] _indexOfInterest[322826])(322859 call _upEndCount _coforallCount[322818] 1)
          {
            { const tmp[322698] "const" "temp"(322699 'move' tmp[322698](322696 'deref'(322695 '_wide_get_locale'(322676 call(322671 call .(365484 call . this[322660] c"dist") c"targetLocales") localeIdx[322845]))))(322692 call =(322681 call .(322680 call(409996 call . this[322660] c"locDoms") localeIdx[322845]) c"myBlock")(322691 call(322685 call .(365489 call . this[322660] c"dist") c"getChunk")(410002 call . this[322660] c"whole") localeIdx[322845]))(322702 'elided on block' 0 tmp[322698])
            }(322821 call _downEndCount _coforallCount[322818] nil[44])(322820 'coforall loop')
          } label _continueLabel[322831] _indexOfInterest[322826] _iterator[322827]
        } label _breakLabel[322832]
        Defer
        {
          {(322863 call _endCountFree _coforallCount[322818])
          }
        }(322868 call _waitEndCount _coforallCount[322818] 1)
      }
    }
  } function BlockDom[316673](?).dsiDestroyDom[322903](arg _mt[322908]:_MT[238], arg this[322905]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[322939] "expr temp" "maybe ref" "no copy" "temp"(322942 'move' tmpIter[322939](322912 call .(365504 call . this[322905] c"dist") c"targetLocDom")) unknown isRngDomArr[323097] "maybe param" "temp"(323112 'move' isRngDomArr[323097](323110 call ||(323099 call isBoundedRange tmpIter[322939])(323108 call ||(323102 call isDomain tmpIter[322939])(323105 call isArray tmpIter[322939]))))
      if isRngDomArr[323097]
      { const _coforallCount[322964] "const" "end count" "temp"(323033 'move' _coforallCount[322964](323030 call _endCountAlloc 1)) unknown numTasks[322965] "temp"(323017 'move' numTasks[322965](323013 call . tmpIter[322939] c"size"))(323008 call _upEndCount _coforallCount[322964] 1 numTasks[322965])(323005 call chpl_resetTaskSpawn numTasks[322965]) unknown _indexOfInterest[322972] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[322973] "expr temp" "temp"(322982 'move' _iterator[322973](322980 call _getIterator tmpIter[322939]))
        Defer
        {
          {(322998 call _freeIterator _iterator[322973])
          }
        }
        { scopeless type(322987 'move' _indexOfInterest[322972](322984 call iteratorIndex _iterator[322973]))
        }
        ForLoop[322974]
        { unknown localeIdx[322991] "coforall index var" "index var" "insert auto destroy"(322993 'move' localeIdx[322991] _indexOfInterest[322972])
          {
            { const tmp[322948] "const" "temp"(322950 'move' tmp[322948](322952 'deref'(322953 '_wide_get_locale'(322955 call(410033 call . this[322905] c"locDoms") localeIdx[322991]))))(322959 call chpl__delete(322961 call(410039 call . this[322905] c"locDoms") localeIdx[322991]))(322945 'elided on block' 0 tmp[322948])
            }(322967 call _downEndCount _coforallCount[322964] nil[44])(322966 'coforall loop')
          } label _continueLabel[322977] _indexOfInterest[322972] _iterator[322973]
        } label _breakLabel[322978]
        Defer
        {
          {(323020 call _endCountFree _coforallCount[322964])
          }
        }(323025 call _waitEndCount _coforallCount[322964] 1 numTasks[322965])
      }
      { const _coforallCount[323037] "const" "end count" "temp"(323094 'move' _coforallCount[323037](323091 call _endCountAlloc 1)) unknown _indexOfInterest[323045] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323046] "expr temp" "temp"(323055 'move' _iterator[323046](323053 call _getIterator tmpIter[322939]))
        Defer
        {
          {(323071 call _freeIterator _iterator[323046])
          }
        }
        { scopeless type(323060 'move' _indexOfInterest[323045](323057 call iteratorIndex _iterator[323046]))
        }
        ForLoop[323047]
        { unknown localeIdx[323064] "coforall index var" "index var" "insert auto destroy"(323066 'move' localeIdx[323064] _indexOfInterest[323045])(323078 call _upEndCount _coforallCount[323037] 1)
          {
            { const tmp[322930] "const" "temp"(322931 'move' tmp[322930](322928 'deref'(322927 '_wide_get_locale'(322918 call(410021 call . this[322905] c"locDoms") localeIdx[323064]))))(322924 call chpl__delete(322922 call(410027 call . this[322905] c"locDoms") localeIdx[323064]))(322934 'elided on block' 0 tmp[322930])
            }(323040 call _downEndCount _coforallCount[323037] nil[44])(323039 'coforall loop')
          } label _continueLabel[323050] _indexOfInterest[323045] _iterator[323046]
        } label _breakLabel[323051]
        Defer
        {
          {(323082 call _endCountFree _coforallCount[323037])
          }
        }(323087 call _waitEndCount _coforallCount[323037] 1)
      }
    }
  } function BlockDom[316673](?).dsiMember[323124](arg _mt[323129]:_MT[238], arg this[323126]:BlockDom[316673](?) : BlockDom[316673](?), arg i[323122]:_any[178](?)) : _unknown[51] "method"
  {(323138 return(323137 call(323132 call .(365509 call . this[323126] c"whole") c"contains") i[323122]))
  } function BlockDom[316673](?).dsiIndexOrder[323148](arg _mt[323153]:_MT[238], arg this[323150]:BlockDom[316673](?) : BlockDom[316673](?), arg i[323146]:_any[178](?)) : _unknown[51] "method"
  {(323162 return(323161 call(323156 call .(365514 call . this[323150] c"whole") c"indexOrder") i[323146]))
  } function LocBlockDom[316702](?).contains[323172](arg _mt[323177]:_MT[238], arg this[323174]:LocBlockDom[316702](?) : LocBlockDom[316702](?), arg i[323170]:_any[178](?)) : _unknown[51] "method"
  {(323186 return(323185 call(323180 call .(365519 call . this[323174] c"myBlock") c"contains") i[323170]))
  } function BlockArr[316778](?).dsiDisplayRepresentation[323194](arg _mt[323199]:_MT[238], arg this[323196]:BlockArr[316778](?) : BlockArr[316778](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown _indexOfInterest[323307] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323308] "expr temp" "temp"(323317 'move' _iterator[323308](323315 call _getIterator(323206 call .(323203 call .(365524 call . this[323196] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(323334 call _freeIterator _iterator[323308])
        }
      }
      { scopeless type(323323 'move' _indexOfInterest[323307](323320 call iteratorIndex _iterator[323308]))
      }
      ForLoop[323309]
      { unknown tli[323327] "index var" "insert auto destroy"(323329 'move' tli[323327] _indexOfInterest[323307])
        {(323259 call writeln "locArr[" tli[323327] "].myElems = "(323255 for  e[323257]  in (323251 call .(323250 call(410050 call . this[323196] c"locArr") tli[323327]) c"myElems") do
          { e[323257]
          } ))
          if(323302 call _cond_test(410057 call . this[323196] c"doRADOpt"))
          {(323300 call writeln "locArr[" tli[323327] "].locRAD = "(323297 call .(323293 call postfix!(323290 call .(323287 call(410063 call . this[323196] c"locArr") tli[323327]) c"locRAD")) c"RAD"))
          }
        } label _continueLabel[323312] _indexOfInterest[323307] _iterator[323308]
      } label _breakLabel[323313]
    }
  } function BlockArr[316778](?).dsiGetBaseDom[323347](arg _mt[323352]:_MT[238], arg this[323349]:BlockArr[316778](?) : BlockArr[316778](?)) : _unknown[51] "method" "method overrides"
  {(323355 return(410069 call . this[323349] c"dom"))
  } function BlockArr[316778](?).setupRADOpt[323363](arg _mt[323368]:_MT[238], arg this[323365]:BlockArr[316778](?) : BlockArr[316778](?)) : _unknown[51] "method" "no return value for void"
  {
    { unknown _indexOfInterest[323549] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323550] "expr temp" "temp"(323559 'move' _iterator[323550](323557 call _getIterator(323375 call .(323372 call .(365529 call . this[323365] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(323576 call _freeIterator _iterator[323550])
        }
      }
      { scopeless type(323565 'move' _indexOfInterest[323549](323562 call iteratorIndex _iterator[323550]))
      }
      ForLoop[323551]
      { unknown localeIdx[323569] "index var" "insert auto destroy"(323571 'move' localeIdx[323569] _indexOfInterest[323549])
        {
          { const tmp[323540] "const" "temp"(323541 'move' tmp[323540](323538 'deref'(323537 '_wide_get_locale'(323387 call(323382 call .(323379 call .(365534 call . this[323365] c"dom") c"dist") c"targetLocales") localeIdx[323569]))))
            { const myLocArr[323392] "const"(323391 call(410075 call . this[323365] c"locArr") localeIdx[323569])(323395 'end of statement')
              if(323421 call _cond_test(323402 call !=(323398 call . myLocArr[323392] c"locRAD") nil[44]))
              {(323409 call chpl__delete(323405 call . myLocArr[323392] c"locRAD"))(323418 call =(323414 call . myLocArr[323392] c"locRAD") nil[44])
              }
              if(323533 call _cond_test disableBlockLazyRAD[316510])
              {(323447 call =(323427 call . myLocArr[323392] c"locRAD")(323432 'new'(_chpl_manager = unmanaged[220](?))(323446 call LocRADCache[408916](?)(410083 call . this[323365] c"eltType")(410088 call . this[323365] c"rank")(410093 call . this[323365] c"idxType")(410098 call . this[323365] c"stridable")(323443 call .(323440 call .(365543 call . this[323365] c"dom") c"dist") c"targetLocDom"))))
                { unknown _indexOfInterest[323499] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323500] "expr temp" "temp"(323509 'move' _iterator[323500](323507 call _getIterator(323456 call .(323453 call .(365548 call . this[323365] c"dom") c"dist") c"targetLocDom")))
                  Defer
                  {
                    {(323526 call _freeIterator _iterator[323500])
                    }
                  }
                  { scopeless type(323515 'move' _indexOfInterest[323499](323512 call iteratorIndex _iterator[323500]))
                  }
                  ForLoop[323501]
                  { unknown l[323519] "index var" "insert auto destroy"(323521 'move' l[323519] _indexOfInterest[323499])
                    {
                      if(323494 call _cond_test(323461 call != l[323519] localeIdx[323569]))
                      {(323490 call =(323474 call(323469 call .(323467 call postfix!(323464 call . myLocArr[323392] c"locRAD")) c"RAD") l[323519])(323489 call(323485 call .(323482 call .(323479 call .(323478 call(410106 call . this[323365] c"locArr") l[323519]) c"myElems") c"_value") c"dsiGetRAD")))
                      }
                    } label _continueLabel[323504] _indexOfInterest[323499] _iterator[323500]
                  } label _breakLabel[323505]
                }
              }
            }(323544 'elided on block' 0 tmp[323540])
          }
        } label _continueLabel[323554] _indexOfInterest[323549] _iterator[323550]
      } label _breakLabel[323555]
    }
  } function BlockArr[316778](?).dsiElementInitializationComplete[323589](arg _mt[323594]:_MT[238], arg this[323591]:BlockArr[316778](?) : BlockArr[316778](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[323634] "expr temp" "maybe ref" "no copy" "temp"(323637 'move' tmpIter[323634](323601 call .(323598 call .(365554 call . this[323591] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[323797] "maybe param" "temp"(323812 'move' isRngDomArr[323797](323810 call ||(323799 call isBoundedRange tmpIter[323634])(323808 call ||(323802 call isDomain tmpIter[323634])(323805 call isArray tmpIter[323634]))))
      if isRngDomArr[323797]
      { const _coforallCount[323664] "const" "end count" "temp"(323733 'move' _coforallCount[323664](323730 call _endCountAlloc 1)) unknown numTasks[323665] "temp"(323717 'move' numTasks[323665](323713 call . tmpIter[323634] c"size"))(323708 call _upEndCount _coforallCount[323664] 1 numTasks[323665])(323705 call chpl_resetTaskSpawn numTasks[323665]) unknown _indexOfInterest[323672] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323673] "expr temp" "temp"(323682 'move' _iterator[323673](323680 call _getIterator tmpIter[323634]))
        Defer
        {
          {(323698 call _freeIterator _iterator[323673])
          }
        }
        { scopeless type(323687 'move' _indexOfInterest[323672](323684 call iteratorIndex _iterator[323673]))
        }
        ForLoop[323674]
        { unknown localeIdx[323691] "coforall index var" "index var" "insert auto destroy"(323693 'move' localeIdx[323691] _indexOfInterest[323672])
          {
            { const tmp[323643] "const" "temp"(323645 'move' tmp[323643](323647 'deref'(323648 '_wide_get_locale'(323650 call(410124 call . this[323591] c"locArr") localeIdx[323691]))))
              {(323662 call(323654 call .(323656 call .(323658 call(410130 call . this[323591] c"locArr") localeIdx[323691]) c"myElems") c"dsiElementInitializationComplete"))
              }(323640 'elided on block' 0 tmp[323643])
            }(323667 call _downEndCount _coforallCount[323664] nil[44])(323666 'coforall loop')
          } label _continueLabel[323677] _indexOfInterest[323672] _iterator[323673]
        } label _breakLabel[323678]
        Defer
        {
          {(323720 call _endCountFree _coforallCount[323664])
          }
        }(323725 call _waitEndCount _coforallCount[323664] 1 numTasks[323665])
      }
      { const _coforallCount[323737] "const" "end count" "temp"(323794 'move' _coforallCount[323737](323791 call _endCountAlloc 1)) unknown _indexOfInterest[323745] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323746] "expr temp" "temp"(323755 'move' _iterator[323746](323753 call _getIterator tmpIter[323634]))
        Defer
        {
          {(323771 call _freeIterator _iterator[323746])
          }
        }
        { scopeless type(323760 'move' _indexOfInterest[323745](323757 call iteratorIndex _iterator[323746]))
        }
        ForLoop[323747]
        { unknown localeIdx[323764] "coforall index var" "index var" "insert auto destroy"(323766 'move' localeIdx[323764] _indexOfInterest[323745])(323778 call _upEndCount _coforallCount[323737] 1)
          {
            { const tmp[323625] "const" "temp"(323626 'move' tmp[323625](323623 'deref'(323622 '_wide_get_locale'(323607 call(410112 call . this[323591] c"locArr") localeIdx[323764]))))
              {(323619 call(323615 call .(323612 call .(323611 call(410118 call . this[323591] c"locArr") localeIdx[323764]) c"myElems") c"dsiElementInitializationComplete"))
              }(323629 'elided on block' 0 tmp[323625])
            }(323740 call _downEndCount _coforallCount[323737] nil[44])(323739 'coforall loop')
          } label _continueLabel[323750] _indexOfInterest[323745] _iterator[323746]
        } label _breakLabel[323751]
        Defer
        {
          {(323782 call _endCountFree _coforallCount[323737])
          }
        }(323787 call _waitEndCount _coforallCount[323737] 1)
      }
    }
  } function BlockArr[316778](?).dsiElementDeinitializationComplete[323822](arg _mt[323827]:_MT[238], arg this[323824]:BlockArr[316778](?) : BlockArr[316778](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[323867] "expr temp" "maybe ref" "no copy" "temp"(323870 'move' tmpIter[323867](323834 call .(323831 call .(365559 call . this[323824] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[324030] "maybe param" "temp"(324045 'move' isRngDomArr[324030](324043 call ||(324032 call isBoundedRange tmpIter[323867])(324041 call ||(324035 call isDomain tmpIter[323867])(324038 call isArray tmpIter[323867]))))
      if isRngDomArr[324030]
      { const _coforallCount[323897] "const" "end count" "temp"(323966 'move' _coforallCount[323897](323963 call _endCountAlloc 1)) unknown numTasks[323898] "temp"(323950 'move' numTasks[323898](323946 call . tmpIter[323867] c"size"))(323941 call _upEndCount _coforallCount[323897] 1 numTasks[323898])(323938 call chpl_resetTaskSpawn numTasks[323898]) unknown _indexOfInterest[323905] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323906] "expr temp" "temp"(323915 'move' _iterator[323906](323913 call _getIterator tmpIter[323867]))
        Defer
        {
          {(323931 call _freeIterator _iterator[323906])
          }
        }
        { scopeless type(323920 'move' _indexOfInterest[323905](323917 call iteratorIndex _iterator[323906]))
        }
        ForLoop[323907]
        { unknown localeIdx[323924] "coforall index var" "index var" "insert auto destroy"(323926 'move' localeIdx[323924] _indexOfInterest[323905])
          {
            { const tmp[323876] "const" "temp"(323878 'move' tmp[323876](323880 'deref'(323881 '_wide_get_locale'(323883 call(410148 call . this[323824] c"locArr") localeIdx[323924]))))
              {(323895 call(323887 call .(323889 call .(323891 call(410154 call . this[323824] c"locArr") localeIdx[323924]) c"myElems") c"dsiElementDeinitializationComplete"))
              }(323873 'elided on block' 0 tmp[323876])
            }(323900 call _downEndCount _coforallCount[323897] nil[44])(323899 'coforall loop')
          } label _continueLabel[323910] _indexOfInterest[323905] _iterator[323906]
        } label _breakLabel[323911]
        Defer
        {
          {(323953 call _endCountFree _coforallCount[323897])
          }
        }(323958 call _waitEndCount _coforallCount[323897] 1 numTasks[323898])
      }
      { const _coforallCount[323970] "const" "end count" "temp"(324027 'move' _coforallCount[323970](324024 call _endCountAlloc 1)) unknown _indexOfInterest[323978] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323979] "expr temp" "temp"(323988 'move' _iterator[323979](323986 call _getIterator tmpIter[323867]))
        Defer
        {
          {(324004 call _freeIterator _iterator[323979])
          }
        }
        { scopeless type(323993 'move' _indexOfInterest[323978](323990 call iteratorIndex _iterator[323979]))
        }
        ForLoop[323980]
        { unknown localeIdx[323997] "coforall index var" "index var" "insert auto destroy"(323999 'move' localeIdx[323997] _indexOfInterest[323978])(324011 call _upEndCount _coforallCount[323970] 1)
          {
            { const tmp[323858] "const" "temp"(323859 'move' tmp[323858](323856 'deref'(323855 '_wide_get_locale'(323840 call(410136 call . this[323824] c"locArr") localeIdx[323997]))))
              {(323852 call(323848 call .(323845 call .(323844 call(410142 call . this[323824] c"locArr") localeIdx[323997]) c"myElems") c"dsiElementDeinitializationComplete"))
              }(323862 'elided on block' 0 tmp[323858])
            }(323973 call _downEndCount _coforallCount[323970] nil[44])(323972 'coforall loop')
          } label _continueLabel[323983] _indexOfInterest[323978] _iterator[323979]
        } label _breakLabel[323984]
        Defer
        {
          {(324015 call _endCountFree _coforallCount[323970])
          }
        }(324020 call _waitEndCount _coforallCount[323970] 1)
      }
    }
  } function BlockArr[316778](?).dsiDestroyArr[324059](arg _mt[324064]:_MT[238], arg this[324061]:BlockArr[316778](?) : BlockArr[316778](?), arg deinitElts[324056] : bool[10]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[324128] "expr temp" "maybe ref" "no copy" "temp"(324131 'move' tmpIter[324128](324071 call .(324068 call .(365564 call . this[324061] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[324311] "maybe param" "temp"(324326 'move' isRngDomArr[324311](324324 call ||(324313 call isBoundedRange tmpIter[324128])(324322 call ||(324316 call isDomain tmpIter[324128])(324319 call isArray tmpIter[324128]))))
      if isRngDomArr[324311]
      { const _coforallCount[324178] "const" "end count" "temp"(324247 'move' _coforallCount[324178](324244 call _endCountAlloc 1)) unknown numTasks[324179] "temp"(324231 'move' numTasks[324179](324227 call . tmpIter[324128] c"size"))(324222 call _upEndCount _coforallCount[324178] 1 numTasks[324179])(324219 call chpl_resetTaskSpawn numTasks[324179]) unknown _indexOfInterest[324186] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[324187] "expr temp" "temp"(324196 'move' _iterator[324187](324194 call _getIterator tmpIter[324128]))
        Defer
        {
          {(324212 call _freeIterator _iterator[324187])
          }
        }
        { scopeless type(324201 'move' _indexOfInterest[324186](324198 call iteratorIndex _iterator[324187]))
        }
        ForLoop[324188]
        { unknown localeIdx[324205] "coforall index var" "index var" "insert auto destroy"(324207 'move' localeIdx[324205] _indexOfInterest[324186])
          {
            { const tmp[324137] "const" "temp"(324139 'move' tmp[324137](324141 'deref'(324142 '_wide_get_locale'(324144 call(410174 call . this[324061] c"locArr") localeIdx[324205]))))
              { unknown arr[324148](324150 call(410180 call . this[324061] c"locArr") localeIdx[324205])(324153 'end of statement')
                if(324155 call _cond_test deinitElts[324056])
                {(324160 call _deinitElements(324162 call . arr[324148] c"myElems"))
                }(324173 call(324167 call .(324169 call . arr[324148] c"myElems") c"dsiElementDeinitializationComplete"))(324175 call chpl__delete arr[324148])
              }(324134 'elided on block' 0 tmp[324137])
            }(324181 call _downEndCount _coforallCount[324178] nil[44])(324180 'coforall loop')
          } label _continueLabel[324191] _indexOfInterest[324186] _iterator[324187]
        } label _breakLabel[324192]
        Defer
        {
          {(324234 call _endCountFree _coforallCount[324178])
          }
        }(324239 call _waitEndCount _coforallCount[324178] 1 numTasks[324179])
      }
      { const _coforallCount[324251] "const" "end count" "temp"(324308 'move' _coforallCount[324251](324305 call _endCountAlloc 1)) unknown _indexOfInterest[324259] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[324260] "expr temp" "temp"(324269 'move' _iterator[324260](324267 call _getIterator tmpIter[324128]))
        Defer
        {
          {(324285 call _freeIterator _iterator[324260])
          }
        }
        { scopeless type(324274 'move' _indexOfInterest[324259](324271 call iteratorIndex _iterator[324260]))
        }
        ForLoop[324261]
        { unknown localeIdx[324278] "coforall index var" "index var" "insert auto destroy"(324280 'move' localeIdx[324278] _indexOfInterest[324259])(324292 call _upEndCount _coforallCount[324251] 1)
          {
            { const tmp[324119] "const" "temp"(324120 'move' tmp[324119](324117 'deref'(324116 '_wide_get_locale'(324077 call(410160 call . this[324061] c"locArr") localeIdx[324278]))))
              { unknown arr[324082](324081 call(410166 call . this[324061] c"locArr") localeIdx[324278])(324085 'end of statement')
                if(324096 call _cond_test deinitElts[324056])
                {(324094 call _deinitElements(324090 call . arr[324082] c"myElems"))
                }(324109 call(324105 call .(324102 call . arr[324082] c"myElems") c"dsiElementDeinitializationComplete"))(324113 call chpl__delete arr[324082])
              }(324123 'elided on block' 0 tmp[324119])
            }(324254 call _downEndCount _coforallCount[324251] nil[44])(324253 'coforall loop')
          } label _continueLabel[324264] _indexOfInterest[324259] _iterator[324260]
        } label _breakLabel[324265]
        Defer
        {
          {(324296 call _endCountFree _coforallCount[324251])
          }
        }(324301 call _waitEndCount _coforallCount[324251] 1)
      }
    }
  } function BlockArr[316778](?).dsiLocalAccess[324343](arg _mt[324348]:_MT[238], arg this[324345]:BlockArr[316778](?) : BlockArr[316778](?), arg i[324340] :(324338 call *(410188 call . this[324345] c"rank")(410193 call . this[324345] c"idxType"))) ref : _unknown[51] "inline" "method"
  {(324362 return(324361 call(324356 call .(324353 call _to_nonnil(410198 call . this[324345] c"myLocArr")) c"this") i[324340]))
  } function BlockArr[316778](?).dsiAccess[324377](arg _mt[324382]:_MT[238], arg this[324379]:BlockArr[316778](?) : BlockArr[316778](?), const in arg idx[324374] :(324372 call *(410204 call . this[324379] c"rank")(410209 call . this[324379] c"idxType"))) ref : _unknown[51] "inline" "method"
  {
    {
      if(324415 call _cond_test(324401 call &&(324386 call !=(410214 call . this[324379] c"myLocArr") nil[44])(324400 call(324395 call .(324392 call .(324391 call _to_nonnil(410219 call . this[324379] c"myLocArr")) c"locDom") c"contains") idx[324374])))
      {(324413 return(324412 call(324407 call .(324406 call _to_nonnil(410225 call . this[324379] c"myLocArr")) c"this") idx[324374]))
      }
    }(324427 return(324426 call(410232 call . this[324379] c"nonLocalAccess") idx[324374]))
  } function BlockArr[316778](?).dsiBoundsCheck[324441](arg _mt[324446]:_MT[238], arg this[324443]:BlockArr[316778](?) : BlockArr[316778](?), arg i[324438] :(324436 call *(410238 call . this[324443] c"rank")(410243 call . this[324443] c"idxType"))) : _unknown[51] "inline" "method"
  {(324455 return(324454 call(324449 call .(365573 call . this[324443] c"dom") c"dsiMember") i[324438]))
  } function BlockArr[316778](?).nonLocalAccess[324470](arg _mt[324475]:_MT[238], arg this[324472]:BlockArr[316778](?) : BlockArr[316778](?), arg i[324467] :(324465 call *(410249 call . this[324472] c"rank")(410254 call . this[324472] c"idxType"))) ref : _unknown[51] "method" "fn unordered safe"
  {
    if(324763 call _cond_test(410259 call . this[324472] c"doRADOpt"))
    {
      if(324758 call _cond_test(324481 call . this[324472] c"myLocArr"))
      { const myLocArr[324491] "const"(324490 call _to_nonnil(324486 call . this[324472] c"myLocArr"))(324494 'end of statement') unknown rlocIdx[324508](324507 call(324502 call .(324497 call .(365580 call . this[324472] c"dom") c"dist") c"targetLocsIdx") i[324467])(324511 'end of statement')
        if(324694 call _cond_test(324513 call ! disableBlockLazyRAD[316510]))
        {
          if(324597 call _cond_test(324520 call ==(324516 call . myLocArr[324491] c"locRAD") nil[44]))
          {(324532 call(324528 call .(324525 call . myLocArr[324491] c"locRADLock") c"lock"))
            if(324583 call _cond_test(324540 call ==(324536 call . myLocArr[324491] c"locRAD") nil[44]))
            { unknown tempLocRAD[324559](324544 'new'(_chpl_manager = unmanaged[220](?))(324558 call LocRADCache[408916](?)(410267 call . this[324472] c"eltType")(410272 call . this[324472] c"rank")(410277 call . this[324472] c"idxType")(410282 call . this[324472] c"stridable")(324555 call .(324552 call .(365588 call . this[324472] c"dom") c"dist") c"targetLocDom")))(324562 'end of statement')(324572 call =(324568 call .(324565 call . tempLocRAD[324559] c"RAD") c"blk")(410289 call . this[324472] c"SENTINEL"))(324580 call =(324576 call . myLocArr[324491] c"locRAD") tempLocRAD[324559])
            }(324595 call(324591 call .(324588 call . myLocArr[324491] c"locRADLock") c"unlock"))
          } const locRAD[324609] "const"(324608 call _to_nonnil(324604 call . myLocArr[324491] c"locRAD"))(324612 'end of statement')
          if(324690 call _cond_test(324624 call ==(324620 call .(324619 call(324614 call . locRAD[324609] c"RAD") rlocIdx[324508]) c"blk")(410296 call . this[324472] c"SENTINEL")))
          {(324634 call(324629 call . locRAD[324609] c"lockRAD") rlocIdx[324508])
            if(324676 call _cond_test(324648 call ==(324644 call .(324643 call(324638 call . locRAD[324609] c"RAD") rlocIdx[324508]) c"blk")(410303 call . this[324472] c"SENTINEL")))
            {(324672 call =(324656 call(324651 call . locRAD[324609] c"RAD") rlocIdx[324508])(324671 call(324667 call .(324664 call .(324661 call .(324660 call(410309 call . this[324472] c"locArr") rlocIdx[324508]) c"myElems") c"_value") c"dsiGetRAD")))
            }(324688 call(324683 call . locRAD[324609] c"unlockRAD") rlocIdx[324508])
          }
        } unknown myLocRAD[324702] "no auto destroy" "no copy"(324699 call . myLocArr[324491] c"locRAD")(324705 'end of statement') unknown radata[324713] "no auto destroy" "no copy"(324710 call .(324709 call _to_nonnil myLocRAD[324702]) c"RAD")(324716 'end of statement')
        if(324754 call _cond_test(324725 call !=(324721 call .(324720 call radata[324713] rlocIdx[324508]) c"shiftedData") nil[44]))
        { unknown dataIdx[324737](324736 call(324731 call .(324730 call radata[324713] rlocIdx[324508]) c"getDataIndex") i[324467])(324740 'end of statement')(324752 return(324751 call(324746 call .(324745 call radata[324713] rlocIdx[324508]) c"getDataElem") dataIdx[324737]))
        }
      }
    }(324784 return(324783 call(324780 call(410325 call . this[324472] c"locArr")(324778 call(324773 call .(324770 call .(365603 call . this[324472] c"dom") c"dist") c"targetLocsIdx") i[324467])) i[324467]))
  } function BlockArr[316778](?).dsiAccess[324797](arg _mt[324802]:_MT[238], arg this[324799]:BlockArr[316778](?) : BlockArr[316778](?), arg i[324793] ... :(410332 call . this[324799] c"idxType")) ref : _unknown[51] "method"
  {(324808 return(324807 call(410341 call . this[324799] c"dsiAccess") i[324793]))
  } function BlockArr[316778](?).these[324816](arg _mt[324821]:_MT[238], arg this[324818]:BlockArr[316778](?) : BlockArr[316778](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[324831] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[324832] "expr temp" "temp"(324841 'move' _iterator[324832](324839 call _getIterator(410347 call . this[324818] c"dom")))
      Defer
      {
        {(324857 call _freeIterator _iterator[324832])
        }
      }
      { scopeless type(324846 'move' _indexOfInterest[324831](324843 call iteratorIndex _iterator[324832]))
      }
      ForLoop[324833]
      { unknown i[324850] "index var" "insert auto destroy"(324852 'move' i[324850] _indexOfInterest[324831])(324829 yield(324828 call(410351 call . this[324818] c"dsiAccess") i[324850])) label _continueLabel[324836] _indexOfInterest[324831] _iterator[324832]
      } label _breakLabel[324837]
    }
  } function BlockArr[316778](?).these[324874](arg _mt[324879]:_MT[238], arg this[324876]:BlockArr[316778](?) : BlockArr[316778](?), param arg tag[324871] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[324899] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[324900] "expr temp" "temp"(324909 'move' _iterator[324900](324907 call _getIterator(324895 call(324890 call .(365609 call . this[324876] c"dom") c"these") tag[324871])))
      Defer
      {
        {(324926 call _freeIterator _iterator[324900])
        }
      }
      { scopeless type(324915 'move' _indexOfInterest[324899](324912 call iteratorIndex _iterator[324900]))
      }
      ForLoop[324901]
      { unknown followThis[324919] "index var" "insert auto destroy"(324921 'move' followThis[324919] _indexOfInterest[324899])(324897 yield followThis[324919]) label _continueLabel[324904] _indexOfInterest[324899] _iterator[324900]
      } label _breakLabel[324905]
    }
  }
  {(324886 call == tag[324871] leader[447])
  } function BlockArr[316778](?).dsiStaticFastFollowCheck[324942](arg _mt[324947]:_MT[238], arg this[324944]:BlockArr[316778](?) : BlockArr[316778](?), arg leadType[324940]:_any[178](?)) param : _unknown[51] "method" "method overrides"
  {
    if(325000 call _cond_test(354988 'is_subtype' BlockArr[409908](?) leadType[324940]))
    { unknown x[324956](324955 'to nilable class from type' leadType[324940])(324959 'end of statement')(324981 return(324979 call ==(324970 call _to_borrowed(324968 'typeof'(324965 call .(324963 call postfix! x[324956]) c"dom")))(324978 call _to_borrowed(324976 'typeof'(324973 call . this[324944] c"dom")))))
    }
    {(324997 return(324995 call ==(324986 call _to_borrowed leadType[324940])(324994 call _to_borrowed(324992 'typeof'(324989 call . this[324944] c"dom")))))
    }
  } function BlockArr[316778](?).dsiDynamicFastFollowCheck[325016](arg _mt[325021]:_MT[238], arg this[325018]:BlockArr[316778](?) : BlockArr[316778](?), arg lead[325013] :(325010 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method"
  {(325033 return(325032 call(325024 call . this[325018] c"dsiDynamicFastFollowCheck")(325028 call . lead[325013] c"_dom")))
  } function BlockArr[316778](?).dsiDynamicFastFollowCheck[325045](arg _mt[325050]:_MT[238], arg this[325047]:BlockArr[316778](?) : BlockArr[316778](?), arg lead[325042] : _domain[125914](?)) : _unknown[51] "method"
  {(325086 return(325084 call &&(325067 call(325056 call .(325053 call . lead[325042] c"dist") c"dsiEqualDMaps")(325063 call .(325060 call . this[325047] c"dom") c"dist"))(325082 call ==(325072 call .(325069 call . lead[325042] c"_value") c"whole")(325079 call .(325076 call . this[325047] c"dom") c"whole"))))
  } function BlockArr[316778](?).these[325098](arg _mt[325111]:_MT[238], arg this[325108]:BlockArr[316778](?) : BlockArr[316778](?), param arg tag[325095] : iterKind[453], arg followThis[325100]:_any[178](?), param arg fast[325104] : bool[10] = 0) ref : _unknown[51] "iterator fn" "method"
  { function anyStridable[325124](arg rangeTuple[325122]:_any[178](?), param arg i[325128] : int(64)[13] = 0) param : _unknown[51]
    {(325169 return(325166 IfExpr (325140 call == i[325128](325138 call -(325134 call . rangeTuple[325122] c"size") 1)) then
      { scopeless(325146 call .(325145 call rangeTuple[325122] i[325128]) c"stridable")
      } else
      { scopeless(325164 call ||(325153 call .(325152 call rangeTuple[325122] i[325128]) c"stridable")(325163 call anyStridable rangeTuple[325122](325161 call + i[325128] 1)))
      } ))
    }
    if(325228 call _cond_test chpl__testParFlag[188312])
    {
      if(325221 call _cond_test fast[325104])
      {(325197 call chpl__testParWriteln "Block array fast follower invoked on " followThis[325100])
      }
      {(325219 call chpl__testParWriteln "Block array non-fast follower invoked on " followThis[325100])
      }
    }
    if(325292 call _cond_test testFastFollowerOptimization[316505])
    {(325290 call writeln(325287 call +(325267 IfExpr  fast[325104] then
      { scopeless "fast"
      } else
      { scopeless "regular"
      } ) " follower invoked for Block array"))
    } unknown myFollowThis[325313](325311 call *(410382 call . this[325108] c"rank")(325310 call range[64316](?)(idxType =(410388 call . this[325108] c"idxType"))(stridable =(325307 call ||(410393 call . this[325108] c"stridable")(325306 call anyStridable followThis[325100])))))(325316 'end of statement') unknown lowIdx[325321](325319 call *(410399 call . this[325108] c"rank")(410404 call . this[325108] c"idxType"))(325324 'end of statement')
    { unknown i[325452] 0 unknown tmp[325453] "maybe param" "temp"(325465 'move' tmp[325453](325463 call chpl_compute_low_param_loop_bound 0(325328 call -(410409 call . this[325108] c"rank") 1))) unknown tmp[325454] "maybe param" "temp"(325475 'move' tmp[325454](325473 call chpl_compute_high_param_loop_bound 0(325470 call -(410445 call . this[325108] c"rank") 1))) unknown tmp[325455] "maybe param" "temp"(325478 'move' tmp[325455] 1)
      ParamForLoop[325480]
      { i[325452] tmp[325453] tmp[325454] tmp[325455]
        { unknown stride[325345](325342 call .(325341 call(325336 call .(325333 call .(365624 call . this[325108] c"dom") c"whole") c"dim") i[325452]) c"stride")(325348 'end of statement') unknown low[325366](325364 call *(325354 call .(325353 call followThis[325100] i[325452]) c"low")(325362 call _cast(410418 call . this[325108] c"idxType")(325360 call abs stride[325345])))(325369 'end of statement') unknown high[325386](325384 call *(325374 call .(325373 call followThis[325100] i[325452]) c"high")(325382 call _cast(410426 call . this[325108] c"idxType")(325380 call abs stride[325345])))(325389 'end of statement')(325435 call =(325393 call myFollowThis[325313] i[325452])(325434 call(325425 call .(325423 call chpl_by(325414 call +(325399 call chpl_by(325396 call chpl_build_bounded_range low[325366] high[325386]) stride[325345])(325411 call .(325410 call(325405 call .(325402 call .(365629 call . this[325108] c"dom") c"whole") c"dim") i[325452]) c"alignedLow"))(325420 call .(325419 call followThis[325100] i[325452]) c"stride")) c"safeCast")(325432 'typeof'(325431 call myFollowThis[325313] i[325452]))))(325449 call =(325441 call lowIdx[325321] i[325452])(325446 call .(325445 call myFollowThis[325313] i[325452]) c"low"))
        }
      } label _unused_continueLabel[325457] label _breakLabel[325456]
    } const myFollowThisDom[325494] "const"(325492 call chpl__buildDomainExpr(325490 'expand_tuple' myFollowThis[325313]))(325497 'end of statement')
    if(325651 call _cond_test fast[325104])
    { unknown arrSection[325512](325511 call(410452 call . this[325108] c"locArr")(325509 call(325504 call .(325501 call .(365634 call . this[325108] c"dom") c"dist") c"targetLocsIdx") lowIdx[325321]))(325515 'end of statement')
      if(325536 call _cond_test(325526 call !=(325521 '_wide_get_node' arrSection[325512])(325523 call .(365637 call here[90439]) c"id")))
      {(325533 call = arrSection[325512](325532 call _to_nonnil(410460 call . this[325108] c"myLocArr")))
      }
      { const narrowArrSection[325550] "const"(325548 call _cast(325547 'to nilable class from type'(325546 'typeof' arrSection[325512]))(325544 '_wide_get_addr' arrSection[325512]))(325553 'end of statement') unknown myElems[325562] "ref var"(325559 call .(325558 call _to_nonnil narrowArrSection[325550]) c"myElems")(325565 'end of statement')
        { unknown _indexOfInterest[325574] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[325575] "expr temp" "temp"(325584 'move' _iterator[325575](325582 call _getIterator myFollowThisDom[325494]))
          Defer
          {
            {(325600 call _freeIterator _iterator[325575])
            }
          }
          { scopeless type(325589 'move' _indexOfInterest[325574](325586 call iteratorIndex _iterator[325575]))
          }
          ForLoop[325576]
          { unknown i[325593] "index var" "insert auto destroy"(325595 'move' i[325593] _indexOfInterest[325574])(325572 yield(325571 call myElems[325562] i[325593])) label _continueLabel[325579] _indexOfInterest[325574] _iterator[325575]
          } label _breakLabel[325580]
        }
      }
    }
    {
      { unknown _indexOfInterest[325617] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[325618] "expr temp" "temp"(325627 'move' _iterator[325618](325625 call _getIterator myFollowThisDom[325494]))
        Defer
        {
          {(325643 call _freeIterator _iterator[325618])
          }
        }
        { scopeless type(325632 'move' _indexOfInterest[325617](325629 call iteratorIndex _iterator[325618]))
        }
        ForLoop[325619]
        { unknown i[325636] "index var" "insert auto destroy"(325638 'move' i[325636] _indexOfInterest[325617])
          {(325614 yield(325613 call(410471 call . this[325108] c"dsiAccess") i[325636]))
          } label _continueLabel[325622] _indexOfInterest[325617] _iterator[325618]
        } label _breakLabel[325623]
      }
    }
  }
  {(325118 call == tag[325095] follower[449])
  } function BlockArr[316778](?).dsiSerialRead[325663](arg _mt[325668]:_MT[238], arg this[325665]:BlockArr[316778](?) : BlockArr[316778](?), arg f[325661]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(325674 call chpl_serialReadWriteRectangular f[325661] this[325665])
  } function BlockArr[316778](?).dsiSerialWrite[325684](arg _mt[325689]:_MT[238], arg this[325686]:BlockArr[316778](?) : BlockArr[316778](?), arg f[325682]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(325695 call chpl_serialReadWriteRectangular f[325682] this[325686])
  } function BlockArr[316778](?).dsiLocalSlice[325705](arg _mt[325710]:_MT[238], arg this[325707]:BlockArr[316778](?) : BlockArr[316778](?), arg ranges[325703]:_any[178](?)) : _unknown[51] "method" "no copy return"
  { unknown low[325716](325714 call *(410481 call . this[325707] c"rank")(410486 call . this[325707] c"idxType"))(325719 'end of statement')
    { unknown i[325743] 0 unknown tmp[325744] "maybe param" "temp"(325756 'move' tmp[325744](325754 call chpl_compute_low_param_loop_bound 0(325724 call -(410491 call . this[325707] c"rank") 1))) unknown tmp[325745] "maybe param" "temp"(325766 'move' tmp[325745](325764 call chpl_compute_high_param_loop_bound 0(325761 call -(410500 call . this[325707] c"rank") 1))) unknown tmp[325746] "maybe param" "temp"(325769 'move' tmp[325746] 1)
      ParamForLoop[325771]
      { i[325743] tmp[325744] tmp[325745] tmp[325746]
        {(325739 call =(325731 call low[325716] i[325743])(325736 call .(325735 call ranges[325703] i[325743]) c"alignedLow"))
        }
      } label _unused_continueLabel[325748] label _breakLabel[325747]
    }(325800 return(325799 call(325793 call .(325792 call(410505 call . this[325707] c"locArr")(325790 call(325785 call .(325782 call .(365641 call . this[325707] c"dom") c"dist") c"targetLocsIdx") low[325716])) c"myElems")(325797 'expand_tuple' ranges[325703])))
  } function _extendTuple[325808](arg t[325806]:_any[178](?), arg idx[325811] : _tuple[56199](?), arg args[325814]:_any[178](?)) : _unknown[51]
  { unknown tup[325823](325821 call *(325817 call . args[325814] c"size") t[325806])(325826 'end of statement') unknown j[325830] 1 int(64)[13](325833 'end of statement')
    { unknown i[325885] 0 unknown tmp[325886] "maybe param" "temp"(325898 'move' tmp[325886](325896 call chpl_compute_low_param_loop_bound 0(325840 call -(325836 call . args[325814] c"size") 1))) unknown tmp[325887] "maybe param" "temp"(325911 'move' tmp[325887](325909 call chpl_compute_high_param_loop_bound 0(325903 call -(325905 call . args[325814] c"size") 1))) unknown tmp[325888] "maybe param" "temp"(325914 'move' tmp[325888] 1)
      ParamForLoop[325916]
      { i[325885] tmp[325886] tmp[325887] tmp[325888]
        {
          if(325879 call _cond_test(325850 call isCollapsedDimension(325848 call args[325814] i[325885])))
          {(325859 call =(325854 call tup[325823] i[325885])(325858 call args[325814] i[325885]))
          }
          {(325870 call =(325865 call tup[325823] i[325885])(325869 call idx[325811] j[325830]))(325876 call += j[325830] 1)
          }
        }
      } label _unused_continueLabel[325890] label _breakLabel[325889]
    }(325926 return tup[325823])
  } function _extendTuple[325934](arg t[325932]:_any[178](?), arg idx[325936]:_any[178](?), arg args[325938]:_any[178](?)) : _unknown[51]
  { unknown tup[325947](325945 call *(325941 call . args[325938] c"size") t[325932])(325950 'end of statement') unknown idxTup[325955](325953 call _build_tuple idx[325936])(325958 'end of statement') unknown j[325961] 1 int(64)[13](325964 'end of statement')
    { unknown i[326016] 0 unknown tmp[326017] "maybe param" "temp"(326029 'move' tmp[326017](326027 call chpl_compute_low_param_loop_bound 0(325971 call -(325967 call . args[325938] c"size") 1))) unknown tmp[326018] "maybe param" "temp"(326042 'move' tmp[326018](326040 call chpl_compute_high_param_loop_bound 0(326034 call -(326036 call . args[325938] c"size") 1))) unknown tmp[326019] "maybe param" "temp"(326045 'move' tmp[326019] 1)
      ParamForLoop[326047]
      { i[326016] tmp[326017] tmp[326018] tmp[326019]
        {
          if(326010 call _cond_test(325981 call isCollapsedDimension(325979 call args[325938] i[326016])))
          {(325990 call =(325985 call tup[325947] i[326016])(325989 call args[325938] i[326016]))
          }
          {(326001 call =(325996 call tup[325947] i[326016])(326000 call idxTup[325955] j[325961]))(326007 call += j[325961] 1)
          }
        }
      } label _unused_continueLabel[326021] label _breakLabel[326020]
    }(326057 return tup[325947])
  } function BlockArr[316778](?).dsiReallocate[326079](arg _mt[326084]:_MT[238], arg this[326081]:BlockArr[316778](?) : BlockArr[316778](?), arg bounds[326076] :(326074 call *(410540 call . this[326081] c"rank")(326073 call range[64316](?)(410546 call . this[326081] c"idxType") bounded[64205](410551 call . this[326081] c"stridable")))) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function BlockArr[316778](?).dsiPostReallocate[326092](arg _mt[326097]:_MT[238], arg this[326094]:BlockArr[316778](?) : BlockArr[316778](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    if(326104 call _cond_test(410556 call . this[326094] c"doRADOpt"))
    {(326102 call(410560 call . this[326094] c"setupRADOpt"))
    }
  } function BlockArr[316778](?).setRADOpt[326119](arg _mt[326124]:_MT[238], arg this[326121]:BlockArr[316778](?) : BlockArr[316778](?), arg val[326116] = 1) : _unknown[51] "method" "no return value for void"
  {(326128 call =(410565 call . this[326121] c"doRADOpt") val[326116])
    if(326137 call _cond_test(410571 call . this[326121] c"doRADOpt"))
    {(326135 call(410575 call . this[326121] c"setupRADOpt"))
    }
  } function LocBlockArr[316994](?).this[326149](arg _mt[326154]:_MT[238], arg this[326151]:LocBlockArr[316994](?) : LocBlockArr[316994](?), arg i[326147]:_any[178](?)) ref : _unknown[51] "inline" "method"
  {(326160 return(326159 call(410580 call . this[326151] c"myElems") i[326147]))
  } function BlockDom[316673](?).dsiSupportsAutoLocalAccess[326168](arg _mt[326173]:_MT[238], arg this[326170]:BlockDom[316673](?) : BlockDom[316673](?)) param : _unknown[51] "method" "method overrides"
  {(326176 return 1)
  } function Block[316593](?).init[326188](arg _mt[326216]:_MT[238], arg this[326213]:Block[316593](?) : Block[316593](?), arg other[326185] : Block[408866](?), arg privateData[326190]:_any[178](?), param arg rank[326196] =(326193 call . other[326185] c"rank"), arg idxType[326203]:_any[178](?) =(326200 call . other[326185] c"idxType"), arg sparseLayoutType[326210]:_any[178](?) =(326207 call . other[326185] c"sparseLayoutType")) : _unknown[51] "method" "no return value for void"
  {(326223 call =(326219 call . this[326213] c"rank") rank[326196])(326232 call =(326228 call . this[326213] c"idxType") idxType[326203])(326244 call =(410589 call . this[326213] c"boundingBox")(326242 call chpl__buildDomainExpr(326240 'expand_tuple'(326239 call privateData[326190] 0))))(326256 call =(410595 call . this[326213] c"targetLocDom")(326254 call chpl__buildDomainExpr(326252 'expand_tuple'(326251 call privateData[326190] 1))))(326264 call =(410601 call . this[326213] c"targetLocales")(326261 call . other[326185] c"targetLocales"))(326272 call =(410606 call . this[326213] c"locDist")(326269 call . other[326185] c"locDist"))(326280 call =(410611 call . this[326213] c"dataParTasksPerLocale")(326279 call privateData[326190] 2))(326288 call =(410617 call . this[326213] c"dataParIgnoreRunningTasks")(326287 call privateData[326190] 3))(326296 call =(410623 call . this[326213] c"dataParMinGranularity")(326295 call privateData[326190] 4))(326304 call =(326300 call . this[326213] c"sparseLayoutType") sparseLayoutType[326210])
  } function Block[316593](?).dsiSupportsPrivatization[326312](arg _mt[326317]:_MT[238], arg this[326314]:Block[316593](?) : Block[316593](?)) param : _unknown[51] "method" "method overrides"
  {(326320 return 1)
  } function Block[316593](?).dsiGetPrivatizeData[326328](arg _mt[326333]:_MT[238], arg this[326330]:Block[316593](?) : Block[316593](?)) : _unknown[51] "method"
  {(326353 return(326351 call _build_tuple(326340 call(326336 call .(365661 call . this[326330] c"boundingBox") c"dims"))(326346 call(326342 call .(365666 call . this[326330] c"targetLocDom") c"dims"))(410630 call . this[326330] c"dataParTasksPerLocale")(410635 call . this[326330] c"dataParIgnoreRunningTasks")(410640 call . this[326330] c"dataParMinGranularity")))
  } function Block[316593](?).dsiPrivatize[326363](arg _mt[326368]:_MT[238], arg this[326365]:Block[316593](?) : Block[316593](?), arg privatizeData[326361]:_any[178](?)) : _unknown[51] "method"
  {(326381 return(326372 'new'(_chpl_manager = unmanaged[220](?))(326380 call Block[408866](?)(326377 call _to_unmanaged this[326365]) privatizeData[326361])))
  } function Block[316593](?).dsiGetReprivatizeData[326389](arg _mt[326394]:_MT[238], arg this[326391]:Block[316593](?) : Block[316593](?)) : _unknown[51] "method"
  {(326402 return(326401 call(326397 call .(365671 call . this[326391] c"boundingBox") c"dims")))
  } function Block[316593](?).dsiReprivatize[326412](arg _mt[326419]:_MT[238], arg this[326416]:Block[316593](?) : Block[316593](?), arg other[326410]:_any[178](?), arg reprivatizeData[326414]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(326427 call =(410648 call . this[326416] c"boundingBox")(326425 call chpl__buildDomainExpr(326423 'expand_tuple' reprivatizeData[326414])))(326436 call =(410654 call . this[326416] c"targetLocDom")(326433 call . other[326410] c"targetLocDom"))(326444 call =(410659 call . this[326416] c"targetLocales")(326441 call . other[326410] c"targetLocales"))(326452 call =(410664 call . this[326416] c"locDist")(326449 call . other[326410] c"locDist"))(326460 call =(410669 call . this[326416] c"dataParTasksPerLocale")(326457 call . other[326410] c"dataParTasksPerLocale"))(326468 call =(410674 call . this[326416] c"dataParIgnoreRunningTasks")(326465 call . other[326410] c"dataParIgnoreRunningTasks"))(326476 call =(410679 call . this[326416] c"dataParMinGranularity")(326473 call . other[326410] c"dataParMinGranularity"))
  } function BlockDom[316673](?).chpl__serialize[326484](arg _mt[326489]:_MT[238], arg this[326486]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method"
  {(326492 return(410684 call . this[326486] c"pid"))
  } function BlockDom[415370](?).chpl__deserialize[326502](arg _mt[326507]:_MT[238], arg this[326504]:BlockDom[415370](?), arg data[326500]:_any[178](?)) : _unknown[51] "method"
  {(326537 return(326536 call chpl_getPrivatizedCopy(326532 call unmanaged BlockDom[415595](?)(rank =(326512 call . this[326504] c"rank"))(idxType =(326518 call . this[326504] c"idxType"))(stridable =(326523 call . this[326504] c"stridable"))(sparseLayoutType =(326528 call . this[326504] c"sparseLayoutType"))) data[326500]))
  } function BlockDom[316673](?).dsiSupportsPrivatization[326545](arg _mt[326550]:_MT[238], arg this[326547]:BlockDom[316673](?) : BlockDom[316673](?)) param : _unknown[51] "method" "method overrides"
  {(326553 return 1)
  } type BlockDomPrvData[326572](?) unknown distpid[326559] unknown dims[326563] unknown locdoms[326567] function BlockDom[316673](?).dsiGetPrivatizeData[326578](arg _mt[326583]:_MT[238], arg this[326580]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method"
  {(326600 return(326585 'new'(326599 call BlockDomPrvData[326572](?)(326588 call .(365686 call . this[326580] c"dist") c"pid")(326597 call(326593 call .(365691 call . this[326580] c"whole") c"dims"))(410692 call . this[326580] c"locDoms"))))
  } function BlockDom[316673](?).dsiPrivatize[326610](arg _mt[326615]:_MT[238], arg this[326612]:BlockDom[316673](?) : BlockDom[316673](?), arg privatizeData[326608]:_any[178](?)) : _unknown[51] "method"
  { unknown privdist[326628](326627 call chpl_getPrivatizedCopy(326619 'typeof'(410697 call . this[326612] c"dist"))(326624 call . privatizeData[326608] c"distpid"))(326631 'end of statement') unknown locDomsTemp[326655](326652 call . privatizeData[326608] c"locdoms")(326647 call chpl__buildArrayRuntimeType(326645 call chpl__ensureDomainExpr(326634 call . privdist[326628] c"targetLocDom"))(326643 call unmanaged LocBlockDom[415592](?)(410703 call . this[326612] c"rank")(410708 call . this[326612] c"idxType")(410713 call . this[326612] c"stridable")))(326658 'end of statement') const c[326682] "const"(326661 'new'(_chpl_manager = unmanaged[220](?))(326681 call BlockDom[408889](?)(410719 call . this[326612] c"rank")(410724 call . this[326612] c"idxType")(410729 call . this[326612] c"stridable")(326668 call . privdist[326628] c"sparseLayoutType") privdist[326628] locDomsTemp[326655](326679 call chpl__buildDomainExpr(326677 'expand_tuple'(326674 call . privatizeData[326608] c"dims")))))(326685 'end of statement')(326687 return c[326682])
  } function BlockDom[316673](?).dsiGetReprivatizeData[326694](arg _mt[326699]:_MT[238], arg this[326696]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method"
  {(326707 return(326706 call(326702 call .(365701 call . this[326696] c"whole") c"dims")))
  } function BlockDom[316673](?).dsiReprivatize[326717](arg _mt[326724]:_MT[238], arg this[326721]:BlockDom[316673](?) : BlockDom[316673](?), arg other[326715]:_any[178](?), arg reprivatizeData[326719]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(326733 call =(410737 call . this[326721] c"locDoms")(326730 call . other[326715] c"locDoms"))(326743 call =(410742 call . this[326721] c"whole")(326741 call chpl__buildDomainExpr(326739 'expand_tuple' reprivatizeData[326719])))
  } function BlockArr[316778](?).chpl__serialize[326751](arg _mt[326756]:_MT[238], arg this[326753]:BlockArr[316778](?) : BlockArr[316778](?)) : _unknown[51] "method"
  {(326759 return(410748 call . this[326753] c"pid"))
  } function BlockArr[415373](?).chpl__deserialize[326769](arg _mt[326774]:_MT[238], arg this[326771]:BlockArr[415373](?), arg data[326767]:_any[178](?)) : _unknown[51] "method"
  {(326809 return(326808 call chpl_getPrivatizedCopy(326804 call unmanaged BlockArr[415613](?)(rank =(326779 call . this[326771] c"rank"))(idxType =(326785 call . this[326771] c"idxType"))(stridable =(326790 call . this[326771] c"stridable"))(eltType =(326795 call . this[326771] c"eltType"))(sparseLayoutType =(326800 call . this[326771] c"sparseLayoutType"))) data[326767]))
  } function BlockArr[316778](?).dsiSupportsPrivatization[326817](arg _mt[326822]:_MT[238], arg this[326819]:BlockArr[316778](?) : BlockArr[316778](?)) param : _unknown[51] "method" "method overrides"
  {(326825 return 1)
  } type BlockArrPrvData[326840](?) unknown dompid[326831] unknown locarr[326835] function BlockArr[316778](?).dsiGetPrivatizeData[326846](arg _mt[326851]:_MT[238], arg this[326848]:BlockArr[316778](?) : BlockArr[316778](?)) : _unknown[51] "method"
  {(326862 return(326853 'new'(326861 call BlockArrPrvData[326840](?)(326856 call .(365712 call . this[326848] c"dom") c"pid")(410756 call . this[326848] c"locArr"))))
  } function BlockArr[316778](?).dsiPrivatize[326872](arg _mt[326877]:_MT[238], arg this[326874]:BlockArr[316778](?) : BlockArr[316778](?), arg privatizeData[326870]:_any[178](?)) : _unknown[51] "method"
  { unknown privdom[326890](326889 call chpl_getPrivatizedCopy(326881 'typeof'(410761 call . this[326874] c"dom"))(326886 call . privatizeData[326870] c"dompid"))(326893 'end of statement') unknown locArrTemp[326921](326918 call . privatizeData[326870] c"locarr")(326913 call chpl__buildArrayRuntimeType(326911 call chpl__ensureDomainExpr(326899 call .(326896 call . privdom[326890] c"dist") c"targetLocDom"))(326909 call unmanaged LocBlockArr[415598](?)(410767 call . this[326874] c"eltType")(410772 call . this[326874] c"rank")(410777 call . this[326874] c"idxType")(410782 call . this[326874] c"stridable")))(326924 'end of statement') unknown myLocArrTemp[326934](326931 call unmanaged LocBlockArr?[415604](?)(410788 call . this[326874] c"eltType")(410793 call . this[326874] c"rank")(410798 call . this[326874] c"idxType")(410803 call . this[326874] c"stridable"))(326937 'end of statement')
    { unknown _indexOfInterest[326973] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[326974] "expr temp" "temp"(326983 'move' _iterator[326974](326981 call _getIterator(326943 call .(326940 call . privdom[326890] c"dist") c"targetLocDom")))
      Defer
      {
        {(327000 call _freeIterator _iterator[326974])
        }
      }
      { scopeless type(326989 'move' _indexOfInterest[326973](326986 call iteratorIndex _iterator[326974]))
      }
      ForLoop[326975]
      { unknown localeIdx[326993] "index var" "insert auto destroy"(326995 'move' localeIdx[326993] _indexOfInterest[326973])
        if(326968 call _cond_test(326958 call ==(326953 '_wide_get_node'(326949 call locArrTemp[326921] localeIdx[326993]))(326955 call .(365719 call here[90439]) c"id")))
        {(326965 call = myLocArrTemp[326934](326964 call locArrTemp[326921] localeIdx[326993]))
        } label _continueLabel[326978] _indexOfInterest[326973] _iterator[326974]
      } label _breakLabel[326979]
    } const c[327029] "const"(327009 'new'(_chpl_manager = unmanaged[220](?))(327028 call BlockArr[409908](?)(eltType =(410814 call . this[326874] c"eltType"))(rank =(410819 call . this[326874] c"rank"))(idxType =(410824 call . this[326874] c"idxType"))(stridable =(410829 call . this[326874] c"stridable"))(sparseLayoutType =(410834 call . this[326874] c"sparseLayoutType"))(dom = privdom[326890])(locArr = locArrTemp[326921])(myLocArr = myLocArrTemp[326934])))(327032 'end of statement')(327034 return c[327029])
  } function BlockArr[316778](?).dsiTargetLocales[327041](arg _mt[327046]:_MT[238], arg this[327043]:BlockArr[316778](?) : BlockArr[316778](?)) : _unknown[51] "method"
  {(327055 return(327052 call .(327049 call .(365723 call . this[327043] c"dom") c"dist") c"targetLocales"))
  } function BlockDom[316673](?).dsiTargetLocales[327063](arg _mt[327068]:_MT[238], arg this[327065]:BlockDom[316673](?) : BlockDom[316673](?)) : _unknown[51] "method"
  {(327074 return(327071 call .(365728 call . this[327065] c"dist") c"targetLocales"))
  } function Block[316593](?).dsiTargetLocales[327082](arg _mt[327087]:_MT[238], arg this[327084]:Block[316593](?) : Block[316593](?)) : _unknown[51] "method"
  {(327090 return(410843 call . this[327084] c"targetLocales"))
  } function Block[316593](?).chpl__locToLocIdx[327102](arg _mt[327107]:_MT[238], arg this[327104]:Block[316593](?) : Block[316593](?), arg loc[327099] : locale[28]) : _unknown[51] "method"
  {
    { unknown _indexOfInterest[327130] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327131] "expr temp" "temp"(327140 'move' _iterator[327131](327138 call _getIterator(410848 call . this[327104] c"targetLocDom")))
      Defer
      {
        {(327156 call _freeIterator _iterator[327131])
        }
      }
      { scopeless type(327145 'move' _indexOfInterest[327130](327142 call iteratorIndex _iterator[327131]))
      }
      ForLoop[327132]
      { unknown locIdx[327149] "index var" "insert auto destroy"(327151 'move' locIdx[327149] _indexOfInterest[327130])
        if(327125 call _cond_test(327116 call ==(327114 call(410853 call . this[327104] c"targetLocales") locIdx[327149]) loc[327099]))
        {(327123 return(327121 call _build_tuple 1 locIdx[327149]))
        } label _continueLabel[327135] _indexOfInterest[327130] _iterator[327131]
      } label _breakLabel[327136]
    }(327172 return(327170 call _build_tuple 0(327166 call .(365733 call . this[327104] c"targetLocDom") c"first")))
  } function BlockArr[316778](?).dsiHasSingleLocalSubdomain[327179](arg _mt[327184]:_MT[238], arg this[327181]:BlockArr[316778](?) : BlockArr[316778](?)) param : _unknown[51] "method"
  {(327187 return 1)
  } function BlockDom[316673](?).dsiHasSingleLocalSubdomain[327195](arg _mt[327200]:_MT[238], arg this[327197]:BlockDom[316673](?) : BlockDom[316673](?)) param : _unknown[51] "method"
  {(327203 return 1)
  } function BlockArr[316778](?).dsiLocalSubdomain[327215](arg _mt[327220]:_MT[238], arg this[327217]:BlockArr[316778](?) : BlockArr[316778](?), arg loc[327212] : locale[28]) : _unknown[51] "method"
  {
    if(327272 call _cond_test(327224 call == loc[327212](410860 call here[90439])))
    {
      if(327242 call _cond_test(327228 call !=(410864 call . this[327217] c"myLocArr") nil[44]))
      {(327240 return(327237 call .(327234 call .(327233 call _to_nonnil(410869 call . this[327217] c"myLocArr")) c"locDom") c"myBlock"))
      } unknown d[327255](327253 call chpl__buildDomainRuntimeType defaultDist[94058](410874 call . this[327217] c"rank")(410879 call . this[327217] c"idxType")(410884 call . this[327217] c"stridable"))(327258 'end of statement')(327260 return d[327255])
    }
    {(327269 return(327268 call(327263 call .(365738 call . this[327217] c"dom") c"dsiLocalSubdomain") loc[327212]))
    }
  } function BlockDom[316673](?).dsiLocalSubdomain[327286](arg _mt[327291]:_MT[238], arg this[327288]:BlockDom[316673](?) : BlockDom[316673](?), arg loc[327283] : locale[28]) : _unknown[51] "method"
  { const tmp[327307] "const" "temp"(327306 call(327301 call .(365743 call . this[327288] c"dist") c"chpl__locToLocIdx") loc[327283])(327314 call _check_tuple_var_decl tmp[327307] 2) const gotit[327293] "const"(327308 call tmp[327307] 0) const locid[327295] "const"(327311 call tmp[327307] 1)(327319 'end of statement')
    if(327361 call _cond_test gotit[327293])
    { unknown inds[327334](327333 call chpl__computeBlock locid[327295](327326 call .(365748 call . this[327288] c"dist") c"targetLocDom")(327330 call .(365753 call . this[327288] c"dist") c"boundingBox"))(327337 'end of statement')(327344 return(327343 call(410895 call . this[327288] c"whole")(327341 'expand_tuple' inds[327334])))
    }
    { unknown d[327353](327351 call chpl__buildDomainRuntimeType defaultDist[94058](410901 call . this[327288] c"rank")(410906 call . this[327288] c"idxType")(410911 call . this[327288] c"stridable"))(327356 'end of statement')(327359 return d[327353])
    }
  } function BlockDom[316673](?).numRemoteElems[327372](arg _mt[327381]:_MT[238], arg this[327378]:BlockDom[316673](?) : BlockDom[316673](?), arg viewDom[327370]:_any[178](?), arg rlo[327374]:_any[178](?), arg rid[327376]:_any[178](?)) : _unknown[51] "method"
  { unknown blo[327383](327387 call .(365758 call . this[327378] c"dist") c"idxType") unknown bhi[327390](327394 'typeof' blo[327383])(327395 'end of statement')
    if(327533 call _cond_test(327417 call == rid[327376](327415 call -(327411 call .(327410 call(327402 call .(327399 call .(365763 call . this[327378] c"dist") c"targetLocDom") c"dim")(327407 call -(410920 call . this[327378] c"rank") 1)) c"size") 1)))
    {(327433 call = bhi[327390](327430 call .(327429 call(327421 call . viewDom[327370] c"dim")(327426 call -(410926 call . this[327378] c"rank") 1)) c"high"))
    }
    {(327529 call = bhi[327390](327527 call -(327521 call +(327450 call .(327449 call(327441 call .(327438 call .(365769 call . this[327378] c"dist") c"boundingBox") c"dim")(327446 call -(410932 call . this[327378] c"rank") 1)) c"low")(327520 call intCeilXDivByY(327498 call *(327489 call +(327486 call -(327467 call .(327466 call(327458 call .(327455 call .(365774 call . this[327378] c"dist") c"boundingBox") c"dim")(327463 call -(410937 call . this[327378] c"rank") 1)) c"high")(327483 call .(327482 call(327474 call .(327471 call .(365779 call . this[327378] c"dist") c"boundingBox") c"dim")(327479 call -(410942 call . this[327378] c"rank") 1)) c"low")) 1)(327496 call _cast(410948 call . this[327378] c"idxType")(327493 call + rid[327376] 1)))(327518 call _cast(410958 call . this[327378] c"idxType")(327514 call .(327513 call(327505 call .(327502 call .(365784 call . this[327378] c"dist") c"targetLocDom") c"dim")(327510 call -(410953 call . this[327378] c"rank") 1)) c"size"))))(327525 call _cast(410963 call . this[327378] c"idxType") 1)))
    }(327548 return(327546 call - bhi[327390](327544 call _cast(410970 call . this[327378] c"idxType")(327541 call - rlo[327374] 1))))
  } function canDoAnyToBlock[327556](arg Dest[327554]:_any[178](?), arg destDom[327558]:_any[178](?), arg Src[327560]:_any[178](?), arg srcDom[327562]:_any[178](?)) param : _unknown[51] "private"
  {
    if(327589 call _cond_test(327584 call &&(327572 call ==(327570 call(327566 call . Src[327560] c"doiCanBulkTransferRankChange")) 0)(327582 call !=(327575 call . Dest[327554] c"rank")(327579 call . Src[327560] c"rank"))))
    {(327587 return 0)
    }
    if(327635 call _cond_test(327629 call !(327628 call canResolveMethod Src[327560] "doiBulkTransferToKnown" srcDom[327562](327624 call .(327621 call .(327620 call(327606 call . Dest[327554] c"locArr")(327616 call .(327613 call .(327610 call . Dest[327554] c"locArr") c"_dom") c"first")) c"myElems") c"_value") destDom[327558])))
    {(327632 return 0)
    }(327642 return(327640 call ! disableBlockDistBulkTransfer[316495]))(355620 'used modules list'(327596 'use' Reflection[224799]))
  }
  { scopeless type bool[10]
  } function BlockArr[316778](?).doiBulkTransferToKnown[327652](arg _mt[327663]:_MT[238], arg this[327660]:BlockArr[316778](?) : BlockArr[316778](?), arg srcDom[327650]:_any[178](?), arg destClass[327655] : BlockArr[409908](?), arg destDom[327658]:_any[178](?)) : _unknown[51] "method"
  {(327695 call _doSimpleBlockTransfer destClass[327655] destDom[327658] this[327660] srcDom[327650])(327699 return 1)
  }
  {(327687 call &&(327682 call &&(327672 call ==(327667 call . this[327660] c"sparseLayoutType") unmanaged DefaultDist[415502])(327680 call ==(327675 call . destClass[327655] c"sparseLayoutType") unmanaged DefaultDist[415502]))(327685 call ! disableBlockDistBulkTransfer[316495]))
  }
  { scopeless type bool[10]
  } function BlockArr[316778](?).doiBulkTransferFromKnown[327710](arg _mt[327721]:_MT[238], arg this[327718]:BlockArr[316778](?) : BlockArr[316778](?), arg destDom[327708]:_any[178](?), arg srcClass[327713] : BlockArr[409908](?), arg srcDom[327716]:_any[178](?)) : _unknown[51] "method"
  {(327753 call _doSimpleBlockTransfer this[327718] destDom[327708] srcClass[327713] srcDom[327716])(327757 return 1)
  }
  {(327745 call &&(327740 call &&(327730 call ==(327725 call . this[327718] c"sparseLayoutType") unmanaged DefaultDist[415502])(327738 call ==(327733 call . srcClass[327713] c"sparseLayoutType") unmanaged DefaultDist[415502]))(327743 call ! disableBlockDistBulkTransfer[316495]))
  }
  { scopeless type bool[10]
  } function BlockArr[316778](?).doiSwap[327768](arg _mt[327773]:_MT[238], arg this[327770]:BlockArr[316778](?) : BlockArr[316778](?), arg arr[327766]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    { unknown tmpIter[327827] "expr temp" "maybe ref" "no copy" "temp"(327830 'move' tmpIter[327827](327789 call _build_tuple(327781 call . this[327770] c"locArr")(327786 call . arr[327766] c"locArr"))) unknown isRngDomArr[328026] "maybe param" "temp"(328041 'move' isRngDomArr[328026](328039 call ||(328028 call isBoundedRange tmpIter[327827])(328037 call ||(328031 call isDomain tmpIter[327827])(328034 call isArray tmpIter[327827]))))
      if isRngDomArr[328026]
      { const _coforallCount[327865] "const" "end count" "temp"(327948 'move' _coforallCount[327865](327945 call _endCountAlloc 1)) unknown numTasks[327866] "temp"(327932 'move' numTasks[327866](327928 call . tmpIter[327827] c"size"))(327923 call _upEndCount _coforallCount[327865] 1 numTasks[327866])(327920 call chpl_resetTaskSpawn numTasks[327866]) unknown _indexOfInterest[327873] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327874] "expr temp" "temp"(327883 'move' _iterator[327874](327881 call _getIteratorZip tmpIter[327827]))
        Defer
        {
          {(327913 call _freeIterator _iterator[327874])
          }
        }
        { scopeless type(327888 'move' _indexOfInterest[327873](327885 call iteratorIndex _iterator[327874]))
        }
        ForLoop[327875]
        {(327893 call _check_tuple_var_decl _indexOfInterest[327873] 2) unknown locarr1[327899] "coforall index var" "index var" "insert auto destroy"(327901 'move' locarr1[327899](327897 call _indexOfInterest[327873] 0)) unknown locarr2[327906] "coforall index var" "index var" "insert auto destroy"(327908 'move' locarr2[327906](327904 call _indexOfInterest[327873] 1))
          {
            { const tmp[327836] "const" "temp"(327838 'move' tmp[327836](327840 'deref'(327841 '_wide_get_locale' locarr1[327899])))
              {(327845 call <=>(327847 call . locarr1[327899] c"myElems")(327851 call . locarr2[327906] c"myElems"))(327855 call <=>(327857 call . locarr1[327899] c"locRAD")(327861 call . locarr2[327906] c"locRAD"))
              }(327833 'elided on block' 0 tmp[327836])
            }(327868 call _downEndCount _coforallCount[327865] nil[44])(327867 'coforall loop')
          } label _continueLabel[327878] _indexOfInterest[327873] _iterator[327874]
        } label _breakLabel[327879]
        Defer
        {
          {(327935 call _endCountFree _coforallCount[327865])
          }
        }(327940 call _waitEndCount _coforallCount[327865] 1 numTasks[327866])
      }
      { const _coforallCount[327952] "const" "end count" "temp"(328023 'move' _coforallCount[327952](328020 call _endCountAlloc 1)) unknown _indexOfInterest[327960] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327961] "expr temp" "temp"(327970 'move' _iterator[327961](327968 call _getIteratorZip tmpIter[327827]))
        Defer
        {
          {(328000 call _freeIterator _iterator[327961])
          }
        }
        { scopeless type(327975 'move' _indexOfInterest[327960](327972 call iteratorIndex _iterator[327961]))
        }
        ForLoop[327962]
        {(327980 call _check_tuple_var_decl _indexOfInterest[327960] 2) unknown locarr1[327986] "coforall index var" "index var" "insert auto destroy"(327988 'move' locarr1[327986](327984 call _indexOfInterest[327960] 0)) unknown locarr2[327993] "coforall index var" "index var" "insert auto destroy"(327995 'move' locarr2[327993](327991 call _indexOfInterest[327960] 1))(328007 call _upEndCount _coforallCount[327952] 1)
          {
            { const tmp[327817] "const" "temp"(327818 'move' tmp[327817](327815 'deref'(327814 '_wide_get_locale' locarr1[327986])))
              {(327799 call <=>(327792 call . locarr1[327986] c"myElems")(327796 call . locarr2[327993] c"myElems"))(327811 call <=>(327804 call . locarr1[327986] c"locRAD")(327808 call . locarr2[327993] c"locRAD"))
              }(327821 'elided on block' 0 tmp[327817])
            }(327955 call _downEndCount _coforallCount[327952] nil[44])(327954 'coforall loop')
          } label _continueLabel[327965] _indexOfInterest[327960] _iterator[327961]
        } label _breakLabel[327966]
        Defer
        {
          {(328011 call _endCountFree _coforallCount[327952])
          }
        }(328016 call _waitEndCount _coforallCount[327952] 1)
      }
    }
  } function _doSimpleBlockTransfer[328052](arg Dest[328050]:_any[178](?), arg destDom[328054]:_any[178](?), arg Src[328056]:_any[178](?), arg srcDom[328058]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(328102 call _cond_test debugBlockDistBulkTransfer[316485])
    {(328100 call writeln "In Block=Block Bulk Transfer: Dest[" destDom[328054] "] = Src[" srcDom[328058] "]")
    } const DestPID[328112] "const"(328109 call . Dest[328050] c"pid")(328115 'end of statement') const SrcPID[328120] "const"(328117 call . Src[328056] c"pid")(328123 'end of statement')
    { unknown tmpIter[328379] "expr temp" "maybe ref" "no copy" "temp"(328382 'move' tmpIter[328379](328139 call(328134 call .(328129 call .(328126 call . Dest[328050] c"dom") c"dist") c"activeTargetLocales") destDom[328054])) unknown isRngDomArr[328718] "maybe param" "temp"(328733 'move' isRngDomArr[328718](328731 call ||(328720 call isBoundedRange tmpIter[328379])(328729 call ||(328723 call isDomain tmpIter[328379])(328726 call isArray tmpIter[328379]))))
      if isRngDomArr[328718]
      { const _coforallCount[328585] "const" "end count" "temp"(328654 'move' _coforallCount[328585](328651 call _endCountAlloc 1)) unknown numTasks[328586] "temp"(328638 'move' numTasks[328586](328634 call . tmpIter[328379] c"size"))(328629 call _upEndCount _coforallCount[328585] 1 numTasks[328586])(328626 call chpl_resetTaskSpawn numTasks[328586]) unknown _indexOfInterest[328593] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[328594] "expr temp" "temp"(328603 'move' _iterator[328594](328601 call _getIterator tmpIter[328379]))
        Defer
        {
          {(328619 call _freeIterator _iterator[328594])
          }
        }
        { scopeless type(328608 'move' _indexOfInterest[328593](328605 call iteratorIndex _iterator[328594]))
        }
        ForLoop[328595]
        { unknown i[328612] "coforall index var" "index var" "insert auto destroy"(328614 'move' i[328612] _indexOfInterest[328593])
          {
            { const tmp[328388] "const" "temp"(328390 'move' tmp[328388](328392 'deref'(328393 '_wide_get_locale'(328404 call(328395 call .(328397 call .(328399 call . Dest[328050] c"dom") c"dist") c"targetLocales") i[328612]))))
              { const dst[328408] "const"(328418 IfExpr  0 then
                { scopeless(328412 call chpl_getPrivatizedCopy(328413 'typeof' Dest[328050]) DestPID[328112])
                } else
                { scopeless Dest[328050]
                } )(328420 'end of statement') const src[328422] "const"(328432 IfExpr  0 then
                { scopeless(328426 call chpl_getPrivatizedCopy(328427 'typeof' Src[328056]) SrcPID[328120])
                } else
                { scopeless Src[328056]
                } )(328434 'end of statement') const localDestBlock[328436] "const"(328449 call(328438 call .(328446 call(328440 call .(328442 call . dst[328408] c"dom") c"locDoms") i[328612]) c"myBlock") destDom[328054])(328452 'end of statement')(328454 call assert(328456 call >(328458 call . localDestBlock[328436] c"size") 0)) const corSrcBlock[328463] "const"(328465 call bulkCommTranslateDomain localDestBlock[328436] destDom[328054] srcDom[328058])(328470 'end of statement')
                if(328472 call _cond_test debugBlockDistBulkTransfer[316485])
                {(328477 call writeln "  Dest[" localDestBlock[328436] "] = Src[" corSrcBlock[328463] "]")
                }
                { unknown _indexOfInterest[328485] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[328487] "expr temp" "temp"(328489 'move' _iterator[328487](328492 call _getIterator(328503 call(328494 call .(328496 call .(328498 call . src[328422] c"dom") c"dist") c"activeTargetLocales") corSrcBlock[328463])))
                  Defer
                  {
                    {(328507 call _freeIterator _iterator[328487])
                    }
                  }
                  { scopeless type(328511 'move' _indexOfInterest[328485](328514 call iteratorIndex _iterator[328487]))
                  }
                  ForLoop[328516]
                  { unknown srcLoc[328519] "index var" "insert auto destroy"(328521 'move' srcLoc[328519] _indexOfInterest[328485])
                    { const localSrcChunk[328526] "const"(328528 call corSrcBlock[328463](328530 call .(328538 call(328532 call .(328534 call . src[328422] c"dom") c"locDoms") srcLoc[328519]) c"myBlock"))(328542 'end of statement') const localDestChunk[328544] "const"(328546 call bulkCommTranslateDomain localSrcChunk[328526] corSrcBlock[328463] localDestBlock[328436])(328551 'end of statement')(328553 call chpl__bulkTransferArray(328555 call .(328557 call .(328562 call(328559 call . dst[328408] c"locArr") i[328612]) c"myElems") c"_value") localDestChunk[328544](328568 call .(328570 call .(328575 call(328572 call . src[328422] c"locArr") srcLoc[328519]) c"myElems") c"_value") localSrcChunk[328526])
                    } label _continueLabel[328580] _indexOfInterest[328485] _iterator[328487]
                  } label _breakLabel[328582]
                }
              }(328385 'elided on block' 0 tmp[328388])
            }(328588 call _downEndCount _coforallCount[328585] nil[44])(328587 'coforall loop')
          } label _continueLabel[328598] _indexOfInterest[328593] _iterator[328594]
        } label _breakLabel[328599]
        Defer
        {
          {(328641 call _endCountFree _coforallCount[328585])
          }
        }(328646 call _waitEndCount _coforallCount[328585] 1 numTasks[328586])
      }
      { const _coforallCount[328658] "const" "end count" "temp"(328715 'move' _coforallCount[328658](328712 call _endCountAlloc 1)) unknown _indexOfInterest[328666] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[328667] "expr temp" "temp"(328676 'move' _iterator[328667](328674 call _getIterator tmpIter[328379]))
        Defer
        {
          {(328692 call _freeIterator _iterator[328667])
          }
        }
        { scopeless type(328681 'move' _indexOfInterest[328666](328678 call iteratorIndex _iterator[328667]))
        }
        ForLoop[328668]
        { unknown i[328685] "coforall index var" "index var" "insert auto destroy"(328687 'move' i[328685] _indexOfInterest[328666])(328699 call _upEndCount _coforallCount[328658] 1)
          {
            { const tmp[328370] "const" "temp"(328371 'move' tmp[328370](328368 'deref'(328367 '_wide_get_locale'(328152 call(328147 call .(328144 call .(328141 call . Dest[328050] c"dom") c"dist") c"targetLocales") i[328685]))))
              { const dst[328164] "const"(328161 IfExpr  0 then
                { scopeless(328159 call chpl_getPrivatizedCopy(328156 'typeof' Dest[328050]) DestPID[328112])
                } else
                { scopeless Dest[328050]
                } )(328167 'end of statement') const src[328180] "const"(328177 IfExpr  0 then
                { scopeless(328175 call chpl_getPrivatizedCopy(328172 'typeof' Src[328056]) SrcPID[328120])
                } else
                { scopeless Src[328056]
                } )(328183 'end of statement') const localDestBlock[328200] "const"(328199 call(328194 call .(328193 call(328188 call .(328185 call . dst[328164] c"dom") c"locDoms") i[328685]) c"myBlock") destDom[328054])(328203 'end of statement')(328213 call assert(328210 call >(328206 call . localDestBlock[328200] c"size") 0)) const corSrcBlock[328221] "const"(328220 call bulkCommTranslateDomain localDestBlock[328200] destDom[328054] srcDom[328058])(328224 'end of statement')
                if(328251 call _cond_test debugBlockDistBulkTransfer[316485])
                {(328249 call writeln "  Dest[" localDestBlock[328200] "] = Src[" corSrcBlock[328221] "]")
                }
                { unknown _indexOfInterest[328333] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[328334] "expr temp" "temp"(328343 'move' _iterator[328334](328341 call _getIterator(328269 call(328264 call .(328261 call .(328258 call . src[328180] c"dom") c"dist") c"activeTargetLocales") corSrcBlock[328221])))
                  Defer
                  {
                    {(328360 call _freeIterator _iterator[328334])
                    }
                  }
                  { scopeless type(328349 'move' _indexOfInterest[328333](328346 call iteratorIndex _iterator[328334]))
                  }
                  ForLoop[328335]
                  { unknown srcLoc[328353] "index var" "insert auto destroy"(328355 'move' srcLoc[328353] _indexOfInterest[328333])
                    { const localSrcChunk[328286] "const"(328285 call corSrcBlock[328221](328281 call .(328280 call(328275 call .(328272 call . src[328180] c"dom") c"locDoms") srcLoc[328353]) c"myBlock"))(328289 'end of statement') const localDestChunk[328297] "const"(328296 call bulkCommTranslateDomain localSrcChunk[328286] corSrcBlock[328221] localDestBlock[328200])(328300 'end of statement')(328331 call chpl__bulkTransferArray(328312 call .(328309 call .(328308 call(328303 call . dst[328164] c"locArr") i[328685]) c"myElems") c"_value") localDestChunk[328297](328327 call .(328324 call .(328323 call(328318 call . src[328180] c"locArr") srcLoc[328353]) c"myElems") c"_value") localSrcChunk[328286])
                    } label _continueLabel[328338] _indexOfInterest[328333] _iterator[328334]
                  } label _breakLabel[328339]
                }
              }(328374 'elided on block' 0 tmp[328370])
            }(328661 call _downEndCount _coforallCount[328658] nil[44])(328660 'coforall loop')
          } label _continueLabel[328671] _indexOfInterest[328666] _iterator[328667]
        } label _breakLabel[328672]
        Defer
        {
          {(328703 call _endCountFree _coforallCount[328658])
          }
        }(328708 call _waitEndCount _coforallCount[328658] 1)
      }
    }
  } function BlockArr[316778](?).doiBulkTransferFromAny[328744](arg _mt[328753]:_MT[238], arg this[328750]:BlockArr[316778](?) : BlockArr[316778](?), arg destDom[328742]:_any[178](?), arg Src[328746]:_any[178](?), arg srcDom[328748]:_any[178](?)) : _unknown[51] "method"
  {
    if(328785 call _cond_test debugBlockDistBulkTransfer[316485])
    {(328783 call writeln "In BlockDist.doiBulkTransferFromAny")
    }
    { unknown tmpIter[328939] "expr temp" "maybe ref" "no copy" "temp"(328942 'move' tmpIter[328939](328801 call(328796 call .(328793 call .(365825 call . this[328750] c"dom") c"dist") c"activeTargetLocales") destDom[328742])) unknown isRngDomArr[329171] "maybe param" "temp"(329186 'move' isRngDomArr[329171](329184 call ||(329173 call isBoundedRange tmpIter[328939])(329182 call ||(329176 call isDomain tmpIter[328939])(329179 call isArray tmpIter[328939]))))
      if isRngDomArr[329171]
      { const _coforallCount[329038] "const" "end count" "temp"(329107 'move' _coforallCount[329038](329104 call _endCountAlloc 1)) unknown numTasks[329039] "temp"(329091 'move' numTasks[329039](329087 call . tmpIter[328939] c"size"))(329082 call _upEndCount _coforallCount[329038] 1 numTasks[329039])(329079 call chpl_resetTaskSpawn numTasks[329039]) unknown _indexOfInterest[329046] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[329047] "expr temp" "temp"(329056 'move' _iterator[329047](329054 call _getIterator tmpIter[328939]))
        Defer
        {
          {(329072 call _freeIterator _iterator[329047])
          }
        }
        { scopeless type(329061 'move' _indexOfInterest[329046](329058 call iteratorIndex _iterator[329047]))
        }
        ForLoop[329048]
        { unknown j[329065] "coforall index var" "index var" "insert auto destroy"(329067 'move' j[329065] _indexOfInterest[329046])
          {
            { const tmp[328948] "const" "temp"(328950 'move' tmp[328948](328952 'deref'(328953 '_wide_get_locale'(328961 call(328955 call .(328957 call .(365837 call . this[328750] c"dom") c"dist") c"targetLocales") j[329065]))))
              { const Dest[328965] "const"(328975 IfExpr  0 then
                { scopeless(328969 call chpl_getPrivatizedCopy(328970 'typeof' this[328750])(411086 call . this[328750] c"pid"))
                } else
                { scopeless this[328750]
                } )(328977 'end of statement') const inters[328979] "const"(328992 call(328981 call .(328989 call(328983 call .(328985 call . Dest[328965] c"dom") c"locDoms") j[329065]) c"myBlock") destDom[328742])(328995 'end of statement') const srcChunk[328997] "const"(328999 call bulkCommTranslateDomain inters[328979] destDom[328742] srcDom[328748])(329004 'end of statement')
                if(329006 call _cond_test debugBlockDistBulkTransfer[316485])
                {(329011 call writeln "Dest.locArr[" j[329065] "][" inters[328979] "] = Src[" srcDom[328748] "]")
                }(329021 call chpl__bulkTransferArray(329023 call .(329025 call .(329030 call(329027 call . Dest[328965] c"locArr") j[329065]) c"myElems") c"_value") inters[328979] Src[328746] srcChunk[328997])
              }(328945 'elided on block' 0 tmp[328948])
            }(329041 call _downEndCount _coforallCount[329038] nil[44])(329040 'coforall loop')
          } label _continueLabel[329051] _indexOfInterest[329046] _iterator[329047]
        } label _breakLabel[329052]
        Defer
        {
          {(329094 call _endCountFree _coforallCount[329038])
          }
        }(329099 call _waitEndCount _coforallCount[329038] 1 numTasks[329039])
      }
      { const _coforallCount[329111] "const" "end count" "temp"(329168 'move' _coforallCount[329111](329165 call _endCountAlloc 1)) unknown _indexOfInterest[329119] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[329120] "expr temp" "temp"(329129 'move' _iterator[329120](329127 call _getIterator tmpIter[328939]))
        Defer
        {
          {(329145 call _freeIterator _iterator[329120])
          }
        }
        { scopeless type(329134 'move' _indexOfInterest[329119](329131 call iteratorIndex _iterator[329120]))
        }
        ForLoop[329121]
        { unknown j[329138] "coforall index var" "index var" "insert auto destroy"(329140 'move' j[329138] _indexOfInterest[329119])(329152 call _upEndCount _coforallCount[329111] 1)
          {
            { const tmp[328930] "const" "temp"(328931 'move' tmp[328930](328928 'deref'(328927 '_wide_get_locale'(328811 call(328806 call .(328803 call .(365830 call . this[328750] c"dom") c"dist") c"targetLocales") j[329138]))))
              { const Dest[328823] "const"(328820 IfExpr  0 then
                { scopeless(328818 call chpl_getPrivatizedCopy(328815 'typeof' this[328750])(411064 call . this[328750] c"pid"))
                } else
                { scopeless this[328750]
                } )(328826 'end of statement') const inters[328844] "const"(328843 call(328838 call .(328837 call(328832 call .(328829 call . Dest[328823] c"dom") c"locDoms") j[329138]) c"myBlock") destDom[328742])(328847 'end of statement') const srcChunk[328854] "const"(328853 call bulkCommTranslateDomain inters[328844] destDom[328742] srcDom[328748])(328857 'end of statement')
                if(328902 call _cond_test debugBlockDistBulkTransfer[316485])
                {(328900 call writeln "Dest.locArr[" j[329138] "][" inters[328844] "] = Src[" srcDom[328748] "]")
                }(328925 call chpl__bulkTransferArray(328918 call .(328915 call .(328914 call(328909 call . Dest[328823] c"locArr") j[329138]) c"myElems") c"_value") inters[328844] Src[328746] srcChunk[328854])
              }(328934 'elided on block' 0 tmp[328930])
            }(329114 call _downEndCount _coforallCount[329111] nil[44])(329113 'coforall loop')
          } label _continueLabel[329124] _indexOfInterest[329119] _iterator[329120]
        } label _breakLabel[329125]
        Defer
        {
          {(329156 call _endCountFree _coforallCount[329111])
          }
        }(329161 call _waitEndCount _coforallCount[329111] 1)
      }
    }(329191 return 1)
  }
  {(328762 call canDoAnyToBlock this[328750] destDom[328742] Src[328746] srcDom[328748])
  }
  { scopeless type bool[10]
  } function BlockArr[316778](?).doiBulkTransferToKnown[329202](arg _mt[329213]:_MT[238], arg this[329210]:BlockArr[316778](?) : BlockArr[316778](?), arg srcDom[329200]:_any[178](?), arg Dest[329205] : DefaultRectangularArr[379750](?), arg destDom[329208]:_any[178](?)) : _unknown[51] "method"
  {
    if(329241 call _cond_test debugBlockDistBulkTransfer[316485])
    {(329239 call writeln "In BlockDist.doiBulkTransferToKnown(DefaultRectangular)")
    }
    { unknown tmpIter[329398] "expr temp" "maybe ref" "no copy" "temp"(329401 'move' tmpIter[329398](329257 call(329252 call .(329249 call .(365844 call . this[329210] c"dom") c"dist") c"activeTargetLocales") srcDom[329200])) unknown isRngDomArr[329633] "maybe param" "temp"(329648 'move' isRngDomArr[329633](329646 call ||(329635 call isBoundedRange tmpIter[329398])(329644 call ||(329638 call isDomain tmpIter[329398])(329641 call isArray tmpIter[329398]))))
      if isRngDomArr[329633]
      { const _coforallCount[329500] "const" "end count" "temp"(329569 'move' _coforallCount[329500](329566 call _endCountAlloc 1)) unknown numTasks[329501] "temp"(329553 'move' numTasks[329501](329549 call . tmpIter[329398] c"size"))(329544 call _upEndCount _coforallCount[329500] 1 numTasks[329501])(329541 call chpl_resetTaskSpawn numTasks[329501]) unknown _indexOfInterest[329508] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[329509] "expr temp" "temp"(329518 'move' _iterator[329509](329516 call _getIterator tmpIter[329398]))
        Defer
        {
          {(329534 call _freeIterator _iterator[329509])
          }
        }
        { scopeless type(329523 'move' _indexOfInterest[329508](329520 call iteratorIndex _iterator[329509]))
        }
        ForLoop[329510]
        { unknown j[329527] "coforall index var" "index var" "insert auto destroy"(329529 'move' j[329527] _indexOfInterest[329508])
          {
            { const tmp[329407] "const" "temp"(329409 'move' tmp[329407](329411 'deref'(329412 '_wide_get_locale'(329420 call(329414 call .(329416 call .(365856 call . this[329210] c"dom") c"dist") c"targetLocales") j[329527]))))
              { const Src[329424] "const"(329434 IfExpr  0 then
                { scopeless(329428 call chpl_getPrivatizedCopy(329429 'typeof' this[329210])(411134 call . this[329210] c"pid"))
                } else
                { scopeless this[329210]
                } )(329436 'end of statement') const inters[329438] "const"(329451 call(329440 call .(329448 call(329442 call .(329444 call . Src[329424] c"dom") c"locDoms") j[329527]) c"myBlock") srcDom[329200])(329454 'end of statement') const destChunk[329456] "const"(329458 call bulkCommTranslateDomain inters[329438] srcDom[329200] destDom[329208])(329463 'end of statement')
                if(329465 call _cond_test debugBlockDistBulkTransfer[316485])
                {(329470 call writeln "  A[" destChunk[329456] "] = B[" inters[329438] "]")
                } const elemActual[329478] "const"(329480 call .(329482 call .(329487 call(329484 call . Src[329424] c"locArr") j[329527]) c"myElems") c"_value")(329492 'end of statement')(329494 call chpl__bulkTransferArray Dest[329205] destChunk[329456] elemActual[329478] inters[329438])
              }(329404 'elided on block' 0 tmp[329407])
            }(329503 call _downEndCount _coforallCount[329500] nil[44])(329502 'coforall loop')
          } label _continueLabel[329513] _indexOfInterest[329508] _iterator[329509]
        } label _breakLabel[329514]
        Defer
        {
          {(329556 call _endCountFree _coforallCount[329500])
          }
        }(329561 call _waitEndCount _coforallCount[329500] 1 numTasks[329501])
      }
      { const _coforallCount[329573] "const" "end count" "temp"(329630 'move' _coforallCount[329573](329627 call _endCountAlloc 1)) unknown _indexOfInterest[329581] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[329582] "expr temp" "temp"(329591 'move' _iterator[329582](329589 call _getIterator tmpIter[329398]))
        Defer
        {
          {(329607 call _freeIterator _iterator[329582])
          }
        }
        { scopeless type(329596 'move' _indexOfInterest[329581](329593 call iteratorIndex _iterator[329582]))
        }
        ForLoop[329583]
        { unknown j[329600] "coforall index var" "index var" "insert auto destroy"(329602 'move' j[329600] _indexOfInterest[329581])(329614 call _upEndCount _coforallCount[329573] 1)
          {
            { const tmp[329389] "const" "temp"(329390 'move' tmp[329389](329387 'deref'(329386 '_wide_get_locale'(329267 call(329262 call .(329259 call .(365849 call . this[329210] c"dom") c"dist") c"targetLocales") j[329600]))))
              { const Src[329279] "const"(329276 IfExpr  0 then
                { scopeless(329274 call chpl_getPrivatizedCopy(329271 'typeof' this[329210])(411112 call . this[329210] c"pid"))
                } else
                { scopeless this[329210]
                } )(329282 'end of statement') const inters[329300] "const"(329299 call(329294 call .(329293 call(329288 call .(329285 call . Src[329279] c"dom") c"locDoms") j[329600]) c"myBlock") srcDom[329200])(329303 'end of statement') const destChunk[329310] "const"(329309 call bulkCommTranslateDomain inters[329300] srcDom[329200] destDom[329208])(329313 'end of statement')
                if(329356 call _cond_test debugBlockDistBulkTransfer[316485])
                {(329354 call writeln "  A[" destChunk[329310] "] = B[" inters[329300] "]")
                } const elemActual[329374] "const"(329371 call .(329368 call .(329367 call(329362 call . Src[329279] c"locArr") j[329600]) c"myElems") c"_value")(329377 'end of statement')(329384 call chpl__bulkTransferArray Dest[329205] destChunk[329310] elemActual[329374] inters[329300])
              }(329393 'elided on block' 0 tmp[329389])
            }(329576 call _downEndCount _coforallCount[329573] nil[44])(329575 'coforall loop')
          } label _continueLabel[329586] _indexOfInterest[329581] _iterator[329582]
        } label _breakLabel[329587]
        Defer
        {
          {(329618 call _endCountFree _coforallCount[329573])
          }
        }(329623 call _waitEndCount _coforallCount[329573] 1)
      }
    }(329653 return 1)
  }
  {(329217 call ! disableBlockDistBulkTransfer[316495])
  }
  { scopeless type bool[10]
  } function BlockArr[316778](?).doiBulkTransferFromKnown[329664](arg _mt[329675]:_MT[238], arg this[329672]:BlockArr[316778](?) : BlockArr[316778](?), arg destDom[329662]:_any[178](?), arg Src[329667] : DefaultRectangularArr[379750](?), arg srcDom[329670]:_any[178](?)) : _unknown[51] "method"
  {
    if(329703 call _cond_test debugBlockDistBulkTransfer[316485])
    {(329701 call writeln "In BlockArr.doiBulkTransferFromKnown(DefaultRectangular)")
    }
    { unknown tmpIter[329839] "expr temp" "maybe ref" "no copy" "temp"(329842 'move' tmpIter[329839](329719 call(329714 call .(329711 call .(365863 call . this[329672] c"dom") c"dist") c"activeTargetLocales") destDom[329662])) unknown isRngDomArr[330083] "maybe param" "temp"(330098 'move' isRngDomArr[330083](330096 call ||(330085 call isBoundedRange tmpIter[329839])(330094 call ||(330088 call isDomain tmpIter[329839])(330091 call isArray tmpIter[329839]))))
      if isRngDomArr[330083]
      { const _coforallCount[329950] "const" "end count" "temp"(330019 'move' _coforallCount[329950](330016 call _endCountAlloc 1)) unknown numTasks[329951] "temp"(330003 'move' numTasks[329951](329999 call . tmpIter[329839] c"size"))(329994 call _upEndCount _coforallCount[329950] 1 numTasks[329951])(329991 call chpl_resetTaskSpawn numTasks[329951]) unknown _indexOfInterest[329958] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[329959] "expr temp" "temp"(329968 'move' _iterator[329959](329966 call _getIterator tmpIter[329839]))
        Defer
        {
          {(329984 call _freeIterator _iterator[329959])
          }
        }
        { scopeless type(329973 'move' _indexOfInterest[329958](329970 call iteratorIndex _iterator[329959]))
        }
        ForLoop[329960]
        { unknown j[329977] "coforall index var" "index var" "insert auto destroy"(329979 'move' j[329977] _indexOfInterest[329958])
          {
            { const tmp[329848] "const" "temp"(329850 'move' tmp[329848](329852 'deref'(329853 '_wide_get_locale'(329861 call(329855 call .(329857 call .(365876 call . this[329672] c"dom") c"dist") c"targetLocales") j[329977]))))
              { const Dest[329865] "const"(329875 IfExpr  0 then
                { scopeless(329869 call chpl_getPrivatizedCopy(329870 'typeof' this[329672])(411182 call . this[329672] c"pid"))
                } else
                { scopeless this[329672]
                } )(329877 'end of statement') const inters[329879] "const"(329892 call(329881 call .(329889 call(329883 call .(329885 call . Dest[329865] c"dom") c"locDoms") j[329977]) c"myBlock") destDom[329662])(329895 'end of statement')(329897 call assert(329899 call >(329901 call . inters[329879] c"size") 0)) const srcChunk[329906] "const"(329908 call bulkCommTranslateDomain inters[329879] destDom[329662] srcDom[329670])(329913 'end of statement')
                if(329915 call _cond_test debugBlockDistBulkTransfer[316485])
                {(329920 call writeln "  A[" inters[329879] "] = B[" srcChunk[329906] "]")
                } const elemActual[329928] "const"(329930 call .(329932 call .(329937 call(329934 call . Dest[329865] c"locArr") j[329977]) c"myElems") c"_value")(329942 'end of statement')(329944 call chpl__bulkTransferArray elemActual[329928] inters[329879] Src[329667] srcChunk[329906])
              }(329845 'elided on block' 0 tmp[329848])
            }(329953 call _downEndCount _coforallCount[329950] nil[44])(329952 'coforall loop')
          } label _continueLabel[329963] _indexOfInterest[329958] _iterator[329959]
        } label _breakLabel[329964]
        Defer
        {
          {(330006 call _endCountFree _coforallCount[329950])
          }
        }(330011 call _waitEndCount _coforallCount[329950] 1 numTasks[329951])
      }
      { const _coforallCount[330023] "const" "end count" "temp"(330080 'move' _coforallCount[330023](330077 call _endCountAlloc 1)) unknown _indexOfInterest[330031] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[330032] "expr temp" "temp"(330041 'move' _iterator[330032](330039 call _getIterator tmpIter[329839]))
        Defer
        {
          {(330057 call _freeIterator _iterator[330032])
          }
        }
        { scopeless type(330046 'move' _indexOfInterest[330031](330043 call iteratorIndex _iterator[330032]))
        }
        ForLoop[330033]
        { unknown j[330050] "coforall index var" "index var" "insert auto destroy"(330052 'move' j[330050] _indexOfInterest[330031])(330064 call _upEndCount _coforallCount[330023] 1)
          {
            { const tmp[329830] "const" "temp"(329831 'move' tmp[329830](329828 'deref'(329827 '_wide_get_locale'(329729 call(329724 call .(329721 call .(365868 call . this[329672] c"dom") c"dist") c"targetLocales") j[330050]))))
              { const Dest[329741] "const"(329738 IfExpr  0 then
                { scopeless(329736 call chpl_getPrivatizedCopy(329733 'typeof' this[329672])(411160 call . this[329672] c"pid"))
                } else
                { scopeless this[329672]
                } )(329744 'end of statement') const inters[329762] "const"(329761 call(329756 call .(329755 call(329750 call .(329747 call . Dest[329741] c"dom") c"locDoms") j[330050]) c"myBlock") destDom[329662])(329765 'end of statement')(329775 call assert(329772 call >(329768 call . inters[329762] c"size") 0)) const srcChunk[329783] "const"(329782 call bulkCommTranslateDomain inters[329762] destDom[329662] srcDom[329670])(329786 'end of statement')
                if(329797 call _cond_test debugBlockDistBulkTransfer[316485])
                {(329795 call writeln "  A[" inters[329762] "] = B[" srcChunk[329783] "]")
                } const elemActual[329815] "const"(329812 call .(329809 call .(329808 call(329803 call . Dest[329741] c"locArr") j[330050]) c"myElems") c"_value")(329818 'end of statement')(329825 call chpl__bulkTransferArray elemActual[329815] inters[329762] Src[329667] srcChunk[329783])
              }(329834 'elided on block' 0 tmp[329830])
            }(330026 call _downEndCount _coforallCount[330023] nil[44])(330025 'coforall loop')
          } label _continueLabel[330036] _indexOfInterest[330031] _iterator[330032]
        } label _breakLabel[330037]
        Defer
        {
          {(330068 call _endCountFree _coforallCount[330023])
          }
        }(330073 call _waitEndCount _coforallCount[330023] 1)
      }
    }(330103 return 1)
  }
  {(329679 call ! disableBlockDistBulkTransfer[316495])
  }
  { scopeless type bool[10]
  } function BlockArr[316778](?).doiCanBulkTransferRankChange[330112](arg _mt[330117]:_MT[238], arg this[330114]:BlockArr[316778](?) : BlockArr[316778](?)) param : _unknown[51] "method" "method overrides"
  {(330120 return 1)
  } unknown debugBlockScan[330126] "config" "param" 0(330129 'end of statement') function BlockArr[316778](?).doiScan[330135](arg _mt[330142]:_MT[238], arg this[330139]:BlockArr[316778](?) : BlockArr[316778](?), arg op[330133]:_any[178](?), arg dom[330137]:_any[178](?)) : _unknown[51] "method"
  { unknown resType[330161] "type variable"(330160 'typeof'(330159 call(330155 call . op[330133] c"generate"))) unknown res[330172](330170 call chpl__buildArrayRuntimeType(330168 call chpl__ensureDomainExpr dom[330137]) resType[330161])(330175 'end of statement') unknown targetLocs[330185] "ref var"(330184 call(330180 call . this[330139] c"dsiTargetLocales"))(330188 'end of statement') const elemPerLocDom[330202] "const"(330200 call chpl__distributed(330199 call Replicated[411208](?) targetLocs[330185])(330194 call chpl__buildDomainExpr(330191 call chpl_build_bounded_range 1 1)))(330205 'end of statement') unknown elemPerLoc[330213](330211 call chpl__buildArrayRuntimeType(330209 call chpl__ensureDomainExpr elemPerLocDom[330202]) resType[330161])(330216 'end of statement') unknown inputReady$[330226](330224 call chpl__buildArrayRuntimeType(330222 call chpl__ensureDomainExpr elemPerLocDom[330202])(330220 call _syncvar[84948](?) bool[10]))(330229 'end of statement') unknown outputReady$[330239](330237 call chpl__buildArrayRuntimeType(330235 call chpl__ensureDomainExpr elemPerLocDom[330202])(330233 call _syncvar[84948](?) bool[10]))(330242 'end of statement')
    { unknown tmpIter[330682] "expr temp" "maybe ref" "no copy" "temp"(330685 'move' tmpIter[330682](330248 call .(330245 call . dom[330137] c"dist") c"targetLocDom")) unknown isRngDomArr[331171] "maybe param" "temp"(331186 'move' isRngDomArr[331171](331184 call ||(331173 call isBoundedRange tmpIter[330682])(331182 call ||(331176 call isDomain tmpIter[330682])(331179 call isArray tmpIter[330682]))))
      if isRngDomArr[331171]
      { const _coforallCount[331038] "const" "end count" "temp"(331107 'move' _coforallCount[331038](331104 call _endCountAlloc 1)) unknown numTasks[331039] "temp"(331091 'move' numTasks[331039](331087 call . tmpIter[330682] c"size"))(331082 call _upEndCount _coforallCount[331038] 1 numTasks[331039])(331079 call chpl_resetTaskSpawn numTasks[331039]) unknown _indexOfInterest[331046] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[331047] "expr temp" "temp"(331056 'move' _iterator[331047](331054 call _getIterator tmpIter[330682]))
        Defer
        {
          {(331072 call _freeIterator _iterator[331047])
          }
        }
        { scopeless type(331061 'move' _indexOfInterest[331046](331058 call iteratorIndex _iterator[331047]))
        }
        ForLoop[331048]
        { unknown locid[331065] "coforall index var" "index var" "insert auto destroy"(331067 'move' locid[331065] _indexOfInterest[331046])
          {
            { const tmp[330691] "const" "temp"(330693 'move' tmp[330691](330695 'deref'(330696 '_wide_get_locale'(330698 call targetLocs[330185] locid[331065]))))
              { const myop[330702] "const"(330707 call(330704 call . op[330133] c"clone"))(330709 'end of statement') unknown myLocArrDesc[330711] "ref var"(330713 call(411275 call . this[330139] c"locArr") locid[331065])(330716 'end of statement') unknown myLocArr[330718] "ref var"(330720 call . myLocArrDesc[330711] c"myElems")(330724 'end of statement') const myLocDom[330726] "const" "ref var"(330728 call . myLocArr[330718] c"_dom")(330732 'end of statement') unknown tmp[330734] "temp"(330742 call(330736 call .(330738 call . myLocArr[330718] c"_value") c"chpl__preScan") myop[330702] res[330172](330746 call myLocDom[330726] dom[330137]))(330750 call _check_tuple_var_decl tmp[330734] 4) unknown numTasks[330753](330755 call tmp[330734] 0) unknown rngs[330758](330760 call tmp[330734] 1) unknown state[330763](330765 call tmp[330734] 2) unknown tot[330768](330770 call tmp[330734] 3)(330773 'end of statement')
                if(330775 call _cond_test debugBlockScan[330126])
                {(330780 call writeln locid[331065] ": "(330784 call _build_tuple numTasks[330753] rngs[330758] state[330763] tot[330768]))
                }(330791 call =(330793 call elemPerLoc[330213] 1) tot[330768])(330797 call =(330799 call inputReady$[330226] 1) 1)
                if(330803 call _cond_test(330805 call == locid[331065](330808 call .(330810 call .(330812 call . dom[330137] c"dist") c"targetLocDom") c"low")))
                { const metaop[330819] "const"(330824 call(330821 call . op[330133] c"clone"))(330826 'end of statement') unknown next[330828](330830 call . metaop[330819] c"identity") resType[330161](330835 'end of statement')
                  { unknown _indexOfInterest[330837] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[330839] "expr temp" "temp"(330841 'move' _iterator[330839](330844 call _getIterator(330846 call .(330848 call . dom[330137] c"dist") c"targetLocDom")))
                    Defer
                    {
                      {(330854 call _freeIterator _iterator[330839])
                      }
                    }
                    { scopeless type(330858 'move' _indexOfInterest[330837](330861 call iteratorIndex _iterator[330839]))
                    }
                    ForLoop[330863]
                    { unknown locid[330866] "index var" "insert auto destroy"(330868 'move' locid[330866] _indexOfInterest[330837])
                      { const targetloc[330873] "const"(330875 call targetLocs[330185] locid[330866])(330878 'end of statement') const locready[330880] "const"(330887 call(330885 call(330882 call . inputReady$[330226] c"replicand") targetloc[330873]) 1)(330890 'end of statement') unknown locVal[330892] "ref var"(330899 call(330897 call(330894 call . elemPerLoc[330213] c"replicand") targetloc[330873]) 1)(330902 'end of statement')(330904 call <=> locVal[330892] next[330828])(330908 call =(330915 call(330913 call(330910 call . outputReady$[330239] c"replicand") targetloc[330873]) 1) 1)(330922 call(330919 call . metaop[330819] c"accumulateOntoState") next[330828] locVal[330892])
                      } label _continueLabel[330925] _indexOfInterest[330837] _iterator[330839]
                    } label _breakLabel[330927]
                  }(330930 call chpl__delete metaop[330819])
                } const resready[330934] "const"(330936 call outputReady$[330239] 1)(330939 'end of statement') const myadjust[330941] "const"(330943 call elemPerLoc[330213] 1)(330946 'end of statement')
                if(330948 call _cond_test debugBlockScan[330126])
                {(330953 call writeln locid[331065] ": myadjust = " myadjust[330941])
                }
                { unknown _indexOfInterest[330959] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[330961] "expr temp" "temp"(330963 'move' _iterator[330961](330966 call _getIterator state[330763]))
                  Defer
                  {
                    {(330970 call _freeIterator _iterator[330961])
                    }
                  }
                  { scopeless type(330974 'move' _indexOfInterest[330959](330977 call iteratorIndex _iterator[330961]))
                  }
                  ForLoop[330979]
                  { unknown s[330982] "index var" "insert auto destroy"(330984 'move' s[330982] _indexOfInterest[330959])(330992 call(330989 call . myop[330702] c"accumulateOntoState") s[330982] myadjust[330941]) label _continueLabel[330995] _indexOfInterest[330959] _iterator[330961]
                  } label _breakLabel[330997]
                }
                if(331000 call _cond_test debugBlockScan[330126])
                {(331005 call writeln locid[331065] ": state = " state[330763])
                }(331017 call(331011 call .(331013 call . myLocArr[330718] c"_value") c"chpl__postScan") op[330133] res[330172] numTasks[330753] rngs[330758] state[330763])
                if(331024 call _cond_test debugBlockScan[330126])
                {(331029 call writeln locid[331065] ": " myLocArr[330718])
                }(331035 call chpl__delete myop[330702])
              }(330688 'elided on block' 0 tmp[330691])
            }(331041 call _downEndCount _coforallCount[331038] nil[44])(331040 'coforall loop')
          } label _continueLabel[331051] _indexOfInterest[331046] _iterator[331047]
        } label _breakLabel[331052]
        Defer
        {
          {(331094 call _endCountFree _coforallCount[331038])
          }
        }(331099 call _waitEndCount _coforallCount[331038] 1 numTasks[331039])
      }
      { const _coforallCount[331111] "const" "end count" "temp"(331168 'move' _coforallCount[331111](331165 call _endCountAlloc 1)) unknown _indexOfInterest[331119] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[331120] "expr temp" "temp"(331129 'move' _iterator[331120](331127 call _getIterator tmpIter[330682]))
        Defer
        {
          {(331145 call _freeIterator _iterator[331120])
          }
        }
        { scopeless type(331134 'move' _indexOfInterest[331119](331131 call iteratorIndex _iterator[331120]))
        }
        ForLoop[331121]
        { unknown locid[331138] "coforall index var" "index var" "insert auto destroy"(331140 'move' locid[331138] _indexOfInterest[331119])(331152 call _upEndCount _coforallCount[331111] 1)
          {
            { const tmp[330673] "const" "temp"(330674 'move' tmp[330673](330671 'deref'(330670 '_wide_get_locale'(330254 call targetLocs[330185] locid[331138]))))
              { const myop[330261] "const"(330260 call(330256 call . op[330133] c"clone"))(330264 'end of statement') unknown myLocArrDesc[330270] "ref var"(330269 call(411222 call . this[330139] c"locArr") locid[331138])(330273 'end of statement') unknown myLocArr[330278] "ref var"(330275 call . myLocArrDesc[330270] c"myElems")(330281 'end of statement') const myLocDom[330286] "const" "ref var"(330283 call . myLocArr[330278] c"_dom")(330289 'end of statement') unknown tmp[330314] "temp"(330313 call(330303 call .(330300 call . myLocArr[330278] c"_value") c"chpl__preScan") myop[330261] res[330172](330312 call myLocDom[330286] dom[330137]))(330327 call _check_tuple_var_decl tmp[330314] 4) unknown numTasks[330290](330315 call tmp[330314] 0) unknown rngs[330292](330318 call tmp[330314] 1) unknown state[330294](330321 call tmp[330314] 2) unknown tot[330296](330324 call tmp[330314] 3)(330332 'end of statement')
                if(330347 call _cond_test debugBlockScan[330126])
                {(330345 call writeln locid[331138] ": "(330343 call _build_tuple numTasks[330290] rngs[330292] state[330294] tot[330296]))
                }(330357 call =(330355 call elemPerLoc[330213] 1) tot[330296])(330365 call =(330363 call inputReady$[330226] 1) 1)
                if(330515 call _cond_test(330379 call == locid[331138](330376 call .(330373 call .(330370 call . dom[330137] c"dist") c"targetLocDom") c"low")))
                { const metaop[330387] "const"(330386 call(330382 call . op[330133] c"clone"))(330390 'end of statement') unknown next[330397](330394 call . metaop[330387] c"identity") resType[330161](330400 'end of statement')
                  { unknown _indexOfInterest[330476] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[330477] "expr temp" "temp"(330486 'move' _iterator[330477](330484 call _getIterator(330406 call .(330403 call . dom[330137] c"dist") c"targetLocDom")))
                    Defer
                    {
                      {(330503 call _freeIterator _iterator[330477])
                      }
                    }
                    { scopeless type(330492 'move' _indexOfInterest[330476](330489 call iteratorIndex _iterator[330477]))
                    }
                    ForLoop[330478]
                    { unknown locid[330496] "index var" "insert auto destroy"(330498 'move' locid[330496] _indexOfInterest[330476])
                      { const targetloc[330413] "const"(330412 call targetLocs[330185] locid[330496])(330416 'end of statement') const locready[330430] "const"(330429 call(330426 call(330421 call . inputReady$[330226] c"replicand") targetloc[330413]) 1)(330433 'end of statement') unknown locVal[330444] "ref var"(330443 call(330440 call(330435 call . elemPerLoc[330213] c"replicand") targetloc[330413]) 1)(330447 'end of statement')(330450 call <=> locVal[330444] next[330397])(330464 call =(330462 call(330459 call(330454 call . outputReady$[330239] c"replicand") targetloc[330413]) 1) 1)(330474 call(330468 call . metaop[330387] c"accumulateOntoState") next[330397] locVal[330444])
                      } label _continueLabel[330481] _indexOfInterest[330476] _iterator[330477]
                    } label _breakLabel[330482]
                  }(330512 call chpl__delete metaop[330387])
                } const resready[330523] "const"(330522 call outputReady$[330239] 1)(330526 'end of statement') const myadjust[330531] "const"(330530 call elemPerLoc[330213] 1)(330534 'end of statement')
                if(330559 call _cond_test debugBlockScan[330126])
                {(330557 call writeln locid[331138] ": myadjust = " myadjust[330531])
                }
                { unknown _indexOfInterest[330575] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[330576] "expr temp" "temp"(330585 'move' _iterator[330576](330583 call _getIterator state[330294]))
                  Defer
                  {
                    {(330601 call _freeIterator _iterator[330576])
                    }
                  }
                  { scopeless type(330590 'move' _indexOfInterest[330575](330587 call iteratorIndex _iterator[330576]))
                  }
                  ForLoop[330577]
                  { unknown s[330594] "index var" "insert auto destroy"(330596 'move' s[330594] _indexOfInterest[330575])(330573 call(330567 call . myop[330261] c"accumulateOntoState") s[330594] myadjust[330531]) label _continueLabel[330580] _indexOfInterest[330575] _iterator[330576]
                  } label _breakLabel[330581]
                }
                if(330632 call _cond_test debugBlockScan[330126])
                {(330630 call writeln locid[331138] ": state = " state[330294])
                }(330650 call(330641 call .(330638 call . myLocArr[330278] c"_value") c"chpl__postScan") op[330133] res[330172] numTasks[330290] rngs[330292] state[330294])
                if(330660 call _cond_test debugBlockScan[330126])
                {(330658 call writeln locid[331138] ": " myLocArr[330278])
                }(330667 call chpl__delete myop[330261])
              }(330677 'elided on block' 0 tmp[330673])
            }(331114 call _downEndCount _coforallCount[331111] nil[44])(331113 'coforall loop')
          } label _continueLabel[331124] _indexOfInterest[331119] _iterator[331120]
        } label _breakLabel[331125]
        Defer
        {
          {(331156 call _endCountFree _coforallCount[331111])
          }
        }(331161 call _waitEndCount _coforallCount[331111] 1)
      }
    }(331192 call chpl__delete op[330133])(331196 return res[330172])(355622 'used modules list'(330177 'use' ReplicatedDist[353041]))
  }
  {(330152 call &&(330146 call ==(411201 call . this[330139] c"rank") 1)(330151 call chpl__scanStateResTypesMatch op[330133]))
  } function newBlockDom[331207](arg dom[331204] : _domain[125914](?)) : _unknown[51]
  {(331216 return(331214 call chpl__distributed(331213 call Block[408866](?) dom[331204]) dom[331204]))
  } function newBlockArr[331227](arg dom[331224] : _domain[125914](?), arg eltType[331229]:_any[178](?)) : _unknown[51]
  { unknown D[331235](331234 call newBlockDom dom[331224])(331238 'end of statement') unknown A[331247](331245 call chpl__buildArrayRuntimeType(331243 call chpl__ensureDomainExpr D[331235]) eltType[331229])(331250 'end of statement')(331252 return A[331247])
  } function newBlockDom[331264](arg rng[331260] ... : range[64316](?)) : _unknown[51]
  {(331274 return(331273 call newBlockDom(331270 call chpl__buildDomainExpr(331268 'expand_tuple' rng[331260]))))
  } function newBlockArr[331287](arg rng[331283] ... : range[64316](?), arg eltType[331289]:_any[178](?)) : _unknown[51]
  {(331300 return(331299 call newBlockArr(331295 call chpl__buildDomainExpr(331293 'expand_tuple' rng[331283])) eltType[331289]))
  }(355611 'used modules list'(353129 'use' ChapelStandard[20264])(316459 'use' DSIUtil[230805])(316462 'use' ChapelUtil[166922])(316465 'use' CommDiagnostics[222186])(316468 'use' ChapelLocks[187268])(316471 'use' ChapelDebugPrint[188121])(316474 'use' LayoutCS[341882])(316477 'use' SparseBlockDist[348549]))
}