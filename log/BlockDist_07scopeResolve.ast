AST dump for BlockDist after pass scopeResolve.
Module use list: ChapelStandard DSIUtil ChapelUtil CommDiagnostics ChapelLocks ChapelDebugPrint LayoutCS SparseBlockDist Reflection ReplicatedDist 

{ unknown debugBlockDist[316580] "config" "param" 0(316583 'end of statement') unknown debugBlockDistBulkTransfer[316585] "config" "param" 0(316588 'end of statement') const disableAliasedBulkTransfer[316590] "config" "const" 1(316593 'end of statement') unknown disableBlockDistBulkTransfer[316595] "config" "param" 0(316598 'end of statement') unknown sanityCheckDistribution[316600] "config" "param" 0(316603 'end of statement') unknown testFastFollowerOptimization[316605] "config" "param" 0(316608 'end of statement') unknown disableBlockLazyRAD[316610] "config" "param" defaultDisableLazyRADOpt[93430](316613 'end of statement') type Block[316693](?) val super[355823]:BaseDist[145968] "super class" unknown rank[316618] "param" int(64)[13] unknown idxType[316623] "type variable" int(64)[13] unknown boundingBox[316632](316630 call chpl__buildDomainRuntimeType defaultDist[94053] rank[316618] idxType[316623]) unknown targetLocDom[316641](316639 call chpl__buildDomainRuntimeType defaultDist[94053] rank[316618]) unknown targetLocales[316652](316650 call chpl__buildArrayRuntimeType(316648 call chpl__ensureDomainExpr targetLocDom[316641]) locale[28]) unknown locDist[316668](316666 call chpl__buildArrayRuntimeType(316664 call chpl__ensureDomainExpr targetLocDom[316641])(316662 call unmanaged LocBlock[415571](?) rank[316618] idxType[316623])) unknown dataParTasksPerLocale[316673] int(64)[13] unknown dataParIgnoreRunningTasks[316678] bool[10] unknown dataParMinGranularity[316683] int(64)[13] unknown sparseLayoutType[316689] "type variable" unmanaged DefaultDist[415487] type unmanaged Block[415574](?) type Block[408851](?) type LocBlock[316716](?) val super[355825]:object[22] "super class" unknown rank[316698] "param" int(64)[13] unknown idxType[316702] "type variable" const myChunk[316711] "const"(316709 call chpl__buildDomainRuntimeType defaultDist[94053] rank[316698] idxType[316702]) type unmanaged LocBlock[415571](?) type LocBlock[408841](?) type BlockDom[316773](?) val super[355827]:BaseRectangularDom[146935](?) "super class" unknown sparseLayoutType[316722] "type variable" const dist[316732] "const"(316730 call unmanaged Block[415574](?) rank[146854] idxType[146858] sparseLayoutType[316722]) unknown locDoms[316754](316752 call chpl__buildArrayRuntimeType(316750 call chpl__ensureDomainExpr(316739 call . dist[316732] c"targetLocDom"))(316748 call unmanaged LocBlockDom[415577](?) rank[146854] idxType[146858] stridable[146862])) unknown whole[316768](316766 call chpl__buildDomainRuntimeType defaultDist[94053](rank = rank[146854])(idxType = idxType[146858])(stridable = stridable[146862])) type unmanaged BlockDom[415580](?) type BlockDom[415355](?) type BlockDom[408874](?) type LocBlockDom[316802](?) val super[355829]:object[22] "super class" unknown rank[316778] "param" int(64)[13] unknown idxType[316782] "type variable" unknown stridable[316786] "param" bool[10] unknown myBlock[316797](316795 call chpl__buildDomainRuntimeType defaultDist[94053] rank[316778] idxType[316782] stridable[316786]) type unmanaged LocBlockDom[415577](?) type LocBlockDom[408858](?) type BlockArr[316878](?) val super[355831]:BaseRectangularArr[149856](?) "super class" unknown sparseLayoutType[316808] "type variable" unknown doRADOpt[316813] defaultDoRADOpt[93425] bool[10] unknown dom[316825](316823 call unmanaged BlockDom[415580](?) rank[149751] idxType[149755] stridable[149759] sparseLayoutType[316808]) unknown locArr[316849](316847 call chpl__buildArrayRuntimeType(316845 call chpl__ensureDomainExpr(316833 call .(316830 call . dom[316825] c"dist") c"targetLocDom"))(316843 call unmanaged LocBlockArr[415583](?) eltType[149823] rank[149751] idxType[149755] stridable[149759])) unknown myLocArr[316862] "local field"(316859 call unmanaged LocBlockArr?[415589](?) eltType[149823] rank[149751] idxType[149755] stridable[149759]) const SENTINEL[316873] "const"(316872 call max(316869 call * rank[149751] idxType[149755])) type unmanaged BlockArr[415598](?) type BlockArr[415358](?) type BlockArr[409893](?) function LocBlockArr[317094](?).init[316947](arg _mt[317098]:_MT[238], arg this[317096]:LocBlockArr[317094](?), arg eltType[316945]:_any[178](?), param arg rank[316950] : int(64)[13], arg idxType[316953]:_any[178](?), param arg stridable[316956] : bool[10], const arg locDom[316966] :(316964 call unmanaged LocBlockDom[415577](?) rank[316950] idxType[316953] stridable[316956]), param arg initElts[316970] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(316978 call =(316974 call . this[317096] c"eltType") eltType[316945])(316987 call =(316983 call . this[317096] c"rank") rank[316950])(316995 call =(316991 call . this[317096] c"idxType") idxType[316953])(317003 call =(316999 call . this[317096] c"stridable") stridable[316956])(317013 call =(317009 call . this[317096] c"locDom") locDom[316966])(317037 call =(317019 call . this[317096] c"myElems")(317036 call(317029 call .(317026 call .(317023 call . this[317096] c"locDom") c"myBlock") c"buildArray") eltType[316945](initElts = initElts[316970])))
  } function LocBlockArr[317094](?).writeThis[317046](arg _mt[317102]:_MT[238], arg this[317100]:LocBlockArr[317094](?), arg f[317044]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(317067 call halt "LocBlockArr.writeThis() is not implemented / should not be needed")
  } function LocBlockArr[317094](?).deinit[317074](arg _mt[317106]:_MT[238], arg this[317104]:LocBlockArr[317094](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    if(317085 call _cond_test(317078 call !=(408923 call . this[317104] c"locRAD") nil[44]))
    {(317082 call chpl__delete(408928 call . this[317104] c"locRAD"))
    }
  } type LocBlockArr[317094](?) val super[355833]:object[22] "super class" unknown eltType[316882] "type variable" unknown rank[316886] "param" int(64)[13] unknown idxType[316890] "type variable" unknown stridable[316894] "param" bool[10] const locDom[316905] "const"(316903 call unmanaged LocBlockDom[415577](?) rank[316886] idxType[316890] stridable[316894]) unknown locRAD[316918](316915 call unmanaged LocRADCache?[415595](?) eltType[316882] rank[316886] idxType[316890] stridable[316894]) unknown myElems[316934] "local field" "unsafe"(316932 call chpl__buildArrayRuntimeType(316930 call chpl__ensureDomainExpr(316925 call . locDom[316905] c"myBlock")) eltType[316882]) unknown locRADLock[316939] chpl_LocalSpinlock[187432] type unmanaged LocBlockArr?[415589](?) type LocBlockArr?[415586](?) type unmanaged LocBlockArr[415583](?) type LocBlockArr[408882](?) function Block[316693](?).init[317116](arg _mt[317167]:_MT[238], arg this[317164]:Block[316693](?) : Block[316693](?), arg boundingBox[317113] : _domain[125908](?), arg targetLocales[317123] :(317119 call chpl__buildArrayRuntimeType nil[44] locale[28]) = Locales[113662], arg dataParTasksPerLocale[317130] =(317129 call getDataParTasksPerLocale), arg dataParIgnoreRunningTasks[317136] =(317135 call getDataParIgnoreRunningTasks), arg dataParMinGranularity[317142] =(317141 call getDataParMinGranularity), param arg rank[317149] =(317146 call . boundingBox[317113] c"rank"), arg idxType[317156]:_any[178](?) =(317153 call . boundingBox[317113] c"idxType"), arg sparseLayoutType[317161]:_any[178](?) = unmanaged DefaultDist[415487]) : _unknown[51] "method" "no return value for void"
  {(317174 call =(317170 call . this[317164] c"rank") rank[317149])(317183 call =(317179 call . this[317164] c"idxType") idxType[317156])
    if(317214 call _cond_test(317191 call != rank[317149](317188 call . boundingBox[317113] c"rank")))
    {(317212 call compilerError "specified Block rank != rank of specified bounding box")
    }
    if(317247 call _cond_test(317224 call != idxType[317156](317221 call . boundingBox[317113] c"idxType")))
    {(317245 call compilerError "specified Block index type != index type of specified bounding box")
    }
    if(317283 call _cond_test(317260 call &&(317254 call != rank[317149] 2)(317259 call isCSType sparseLayoutType[317161])))
    {(317281 call compilerError "CS layout is only supported for 2 dimensional domains")
    }
    if(317316 call _cond_test(317293 call ==(317289 call . boundingBox[317113] c"size") 0))
    {(317314 call halt "Block() requires a non-empty boundingBox")
    }(317338 call =(317324 call . this[317164] c"boundingBox")(317336 call _cast(317334 call chpl__buildDomainRuntimeType defaultDist[94053] rank[317149] idxType[317156](stridable = 0)) boundingBox[317113])) const ranges[317346] "const"(317345 call setupTargetLocRanges rank[317149] targetLocales[317123])(317349 'end of statement')(317359 call =(317351 call . this[317164] c"targetLocDom")(317357 call chpl__buildDomainExpr(317355 'expand_tuple' ranges[317346])))(317374 call =(317363 call . this[317164] c"targetLocales")(317373 call reshape targetLocales[317123](317370 call . this[317164] c"targetLocDom"))) const dummyLB[317387] "const"(317379 'new'(_chpl_manager = unmanaged[220](?))(317386 call LocBlock[408841](?) rank[317149] idxType[317156](dummy = 1)))(317390 'end of statement') unknown locDistTemp[317404] dummyLB[317387](317401 call chpl__buildArrayRuntimeType(317399 call chpl__ensureDomainExpr(408953 call . this[317164] c"targetLocDom"))(317397 call unmanaged LocBlock[415571](?) rank[317149] idxType[317156]))(317407 'end of statement')
    { unknown tmpIter[317446] "expr temp" "maybe ref" "no copy" "temp"(317449 'move' tmpIter[317446](408962 call . this[317164] c"targetLocDom")) unknown isRngDomArr[317613] "maybe param" "temp"(317628 'move' isRngDomArr[317613](317626 call ||(317615 call isBoundedRange tmpIter[317446])(317624 call ||(317618 call isDomain tmpIter[317446])(317621 call isArray tmpIter[317446]))))
      if isRngDomArr[317613]
      { const _coforallCount[317485] "const" "end count" "temp"(317550 'move' _coforallCount[317485](317547 call _endCountAlloc 0)) unknown numTasks[317486] "temp"(317534 'move' numTasks[317486](317530 call . tmpIter[317446] c"size"))(317525 call _upEndCount _coforallCount[317485] 0 numTasks[317486]) unknown _indexOfInterest[317492] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317493] "expr temp" "temp"(317502 'move' _iterator[317493](317500 call _getIterator tmpIter[317446]))
        Defer
        {
          {(317518 call _freeIterator _iterator[317493])
          }
        }
        { scopeless type(317507 'move' _indexOfInterest[317492](317504 call iteratorIndex _iterator[317493]))
        }
        ForLoop[317494]
        { unknown locid[317511] "coforall index var" "index var" "insert auto destroy"(317513 'move' locid[317511] _indexOfInterest[317492]) const tmp[317452] "const" "temp"(317454 'move' tmp[317452](317456 'deref'(317457 '_wide_get_locale'(317462 call(317459 call . this[317164] c"targetLocales") locid[317511]))))
          {(317470 call =(317472 call locDistTemp[317404] locid[317511])(317474 'new'(_chpl_manager = unmanaged[220](?))(317478 call LocBlock[408841](?) rank[317149] idxType[317156] locid[317511] boundingBox[317113](408988 call . this[317164] c"targetLocDom"))))(317487 call _downEndCount _coforallCount[317485] nil[44])(317465 'coforall on block' 0 tmp[317452])
          } label _continueLabel[317497] _indexOfInterest[317492] _iterator[317493]
        } label _breakLabel[317498]
        Defer
        {
          {(317537 call _endCountFree _coforallCount[317485])
          }
        }(317542 call _waitEndCount _coforallCount[317485] 0 numTasks[317486])
      }
      { const _coforallCount[317554] "const" "end count" "temp"(317610 'move' _coforallCount[317554](317607 call _endCountAlloc 0)) unknown _indexOfInterest[317561] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317562] "expr temp" "temp"(317571 'move' _iterator[317562](317569 call _getIterator tmpIter[317446]))
        Defer
        {
          {(317587 call _freeIterator _iterator[317562])
          }
        }
        { scopeless type(317576 'move' _indexOfInterest[317561](317573 call iteratorIndex _iterator[317562]))
        }
        ForLoop[317563]
        { unknown locid[317580] "coforall index var" "index var" "insert auto destroy"(317582 'move' locid[317580] _indexOfInterest[317561])(317594 call _upEndCount _coforallCount[317554] 0) const tmp[317438] "const" "temp"(317440 'move' tmp[317438](317436 'deref'(317435 '_wide_get_locale'(317416 call(317411 call . this[317164] c"targetLocales") locid[317580]))))
          {(317432 call =(317420 call locDistTemp[317404] locid[317580])(317423 'new'(_chpl_manager = unmanaged[220](?))(317431 call LocBlock[408841](?) rank[317149] idxType[317156] locid[317580] boundingBox[317113](408975 call . this[317164] c"targetLocDom"))))(317556 call _downEndCount _coforallCount[317554] nil[44])(317443 'coforall on block' 0 tmp[317438])
          } label _continueLabel[317566] _indexOfInterest[317561] _iterator[317562]
        } label _breakLabel[317567]
        Defer
        {
          {(317598 call _endCountFree _coforallCount[317554])
          }
        }(317603 call _waitEndCount _coforallCount[317554] 0)
      }
    }(317634 call chpl__delete dummyLB[317387])(317644 call =(317640 call . this[317164] c"locDist") locDistTemp[317404])(317665 call =(317650 call . this[317164] c"dataParTasksPerLocale")(317662 IfExpr (317655 call == dataParTasksPerLocale[317130] 0) then
    { scopeless(317658 call .(365256 call here[90438]) c"maxTaskPar")
    } else
    { scopeless dataParTasksPerLocale[317130]
    } ))(317675 call =(317671 call . this[317164] c"dataParIgnoreRunningTasks") dataParIgnoreRunningTasks[317136])(317685 call =(317681 call . this[317164] c"dataParMinGranularity") dataParMinGranularity[317142])(317698 call =(317691 call . this[317164] c"sparseLayoutType")(317697 call _to_unmanaged sparseLayoutType[317161]))(317706 call(317702 call . this[317164] c"complete"))
    if(317735 call _cond_test debugBlockDist[316580])
    {(317728 call writeln "Creating new Block distribution:")(317733 call(409000 call . this[317164] c"dsiDisplayRepresentation"))
    }
  } function Block[316693](?).dsiAssign[317749](arg _mt[317754]:_MT[238], arg this[317751]:Block[316693](?) : Block[316693](?), arg other[317746] :(317745 'typeof' this[317751])) : _unknown[51] "method" "no return value for void"
  {
    { unknown tmpIter[317781] "expr temp" "maybe ref" "no copy" "temp"(317784 'move' tmpIter[317781](409006 call . this[317751] c"targetLocDom")) unknown isRngDomArr[317935] "maybe param" "temp"(317950 'move' isRngDomArr[317935](317948 call ||(317937 call isBoundedRange tmpIter[317781])(317946 call ||(317940 call isDomain tmpIter[317781])(317943 call isArray tmpIter[317781]))))
      if isRngDomArr[317935]
      { const _coforallCount[317807] "const" "end count" "temp"(317872 'move' _coforallCount[317807](317869 call _endCountAlloc 0)) unknown numTasks[317808] "temp"(317856 'move' numTasks[317808](317852 call . tmpIter[317781] c"size"))(317847 call _upEndCount _coforallCount[317807] 0 numTasks[317808]) unknown _indexOfInterest[317814] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317815] "expr temp" "temp"(317824 'move' _iterator[317815](317822 call _getIterator tmpIter[317781]))
        Defer
        {
          {(317840 call _freeIterator _iterator[317815])
          }
        }
        { scopeless type(317829 'move' _indexOfInterest[317814](317826 call iteratorIndex _iterator[317815]))
        }
        ForLoop[317816]
        { unknown locid[317833] "coforall index var" "index var" "insert auto destroy"(317835 'move' locid[317833] _indexOfInterest[317814]) const tmp[317787] "const" "temp"(317789 'move' tmp[317787](317791 'deref'(317792 '_wide_get_locale'(317794 call(409023 call . this[317751] c"targetLocales") locid[317833]))))
          {(317802 call chpl__delete(317804 call(409029 call . this[317751] c"locDist") locid[317833]))(317809 call _downEndCount _coforallCount[317807] nil[44])(317797 'coforall on block' 0 tmp[317787])
          } label _continueLabel[317819] _indexOfInterest[317814] _iterator[317815]
        } label _breakLabel[317820]
        Defer
        {
          {(317859 call _endCountFree _coforallCount[317807])
          }
        }(317864 call _waitEndCount _coforallCount[317807] 0 numTasks[317808])
      }
      { const _coforallCount[317876] "const" "end count" "temp"(317932 'move' _coforallCount[317876](317929 call _endCountAlloc 0)) unknown _indexOfInterest[317883] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317884] "expr temp" "temp"(317893 'move' _iterator[317884](317891 call _getIterator tmpIter[317781]))
        Defer
        {
          {(317909 call _freeIterator _iterator[317884])
          }
        }
        { scopeless type(317898 'move' _indexOfInterest[317883](317895 call iteratorIndex _iterator[317884]))
        }
        ForLoop[317885]
        { unknown locid[317902] "coforall index var" "index var" "insert auto destroy"(317904 'move' locid[317902] _indexOfInterest[317883])(317916 call _upEndCount _coforallCount[317876] 0) const tmp[317773] "const" "temp"(317775 'move' tmp[317773](317771 'deref'(317770 '_wide_get_locale'(317761 call(409011 call . this[317751] c"targetLocales") locid[317902]))))
          {(317767 call chpl__delete(317765 call(409017 call . this[317751] c"locDist") locid[317902]))(317878 call _downEndCount _coforallCount[317876] nil[44])(317778 'coforall on block' 0 tmp[317773])
          } label _continueLabel[317888] _indexOfInterest[317883] _iterator[317884]
        } label _breakLabel[317889]
        Defer
        {
          {(317920 call _endCountFree _coforallCount[317876])
          }
        }(317925 call _waitEndCount _coforallCount[317876] 0)
      }
    }(317960 call =(409035 call . this[317751] c"boundingBox")(317957 call . other[317746] c"boundingBox"))(317968 call =(409040 call . this[317751] c"targetLocDom")(317965 call . other[317746] c"targetLocDom"))(317976 call =(409045 call . this[317751] c"targetLocales")(317973 call . other[317746] c"targetLocales"))(317984 call =(409050 call . this[317751] c"dataParTasksPerLocale")(317981 call . other[317746] c"dataParTasksPerLocale"))(317992 call =(409055 call . this[317751] c"dataParIgnoreRunningTasks")(317989 call . other[317746] c"dataParIgnoreRunningTasks"))(318000 call =(409060 call . this[317751] c"dataParMinGranularity")(317997 call . other[317746] c"dataParMinGranularity"))
    { unknown tmpIter[318038] "expr temp" "maybe ref" "no copy" "temp"(318041 'move' tmpIter[318038](409065 call . this[317751] c"targetLocDom")) unknown isRngDomArr[318202] "maybe param" "temp"(318217 'move' isRngDomArr[318202](318215 call ||(318204 call isBoundedRange tmpIter[318038])(318213 call ||(318207 call isDomain tmpIter[318038])(318210 call isArray tmpIter[318038]))))
      if isRngDomArr[318202]
      { const _coforallCount[318074] "const" "end count" "temp"(318139 'move' _coforallCount[318074](318136 call _endCountAlloc 0)) unknown numTasks[318075] "temp"(318123 'move' numTasks[318075](318119 call . tmpIter[318038] c"size"))(318114 call _upEndCount _coforallCount[318074] 0 numTasks[318075]) unknown _indexOfInterest[318081] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318082] "expr temp" "temp"(318091 'move' _iterator[318082](318089 call _getIterator tmpIter[318038]))
        Defer
        {
          {(318107 call _freeIterator _iterator[318082])
          }
        }
        { scopeless type(318096 'move' _indexOfInterest[318081](318093 call iteratorIndex _iterator[318082]))
        }
        ForLoop[318083]
        { unknown locid[318100] "coforall index var" "index var" "insert auto destroy"(318102 'move' locid[318100] _indexOfInterest[318081]) const tmp[318044] "const" "temp"(318046 'move' tmp[318044](318048 'deref'(318049 '_wide_get_locale'(318051 call(409104 call . this[317751] c"targetLocales") locid[318100]))))
          {(318059 call =(318061 call(409110 call . this[317751] c"locDist") locid[318100])(318063 'new'(_chpl_manager = unmanaged[220](?))(318067 call LocBlock[408841](?)(409117 call . this[317751] c"rank")(409122 call . this[317751] c"idxType") locid[318100](409128 call . this[317751] c"boundingBox")(409133 call . this[317751] c"targetLocDom"))))(318076 call _downEndCount _coforallCount[318074] nil[44])(318054 'coforall on block' 0 tmp[318044])
          } label _continueLabel[318086] _indexOfInterest[318081] _iterator[318082]
        } label _breakLabel[318087]
        Defer
        {
          {(318126 call _endCountFree _coforallCount[318074])
          }
        }(318131 call _waitEndCount _coforallCount[318074] 0 numTasks[318075])
      }
      { const _coforallCount[318143] "const" "end count" "temp"(318199 'move' _coforallCount[318143](318196 call _endCountAlloc 0)) unknown _indexOfInterest[318150] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318151] "expr temp" "temp"(318160 'move' _iterator[318151](318158 call _getIterator tmpIter[318038]))
        Defer
        {
          {(318176 call _freeIterator _iterator[318151])
          }
        }
        { scopeless type(318165 'move' _indexOfInterest[318150](318162 call iteratorIndex _iterator[318151]))
        }
        ForLoop[318152]
        { unknown locid[318169] "coforall index var" "index var" "insert auto destroy"(318171 'move' locid[318169] _indexOfInterest[318150])(318183 call _upEndCount _coforallCount[318143] 0) const tmp[318030] "const" "temp"(318032 'move' tmp[318030](318028 'deref'(318027 '_wide_get_locale'(318008 call(409070 call . this[317751] c"targetLocales") locid[318169]))))
          {(318024 call =(318012 call(409076 call . this[317751] c"locDist") locid[318169])(318015 'new'(_chpl_manager = unmanaged[220](?))(318023 call LocBlock[408841](?)(409083 call . this[317751] c"rank")(409088 call . this[317751] c"idxType") locid[318169](409094 call . this[317751] c"boundingBox")(409099 call . this[317751] c"targetLocDom"))))(318145 call _downEndCount _coforallCount[318143] nil[44])(318035 'coforall on block' 0 tmp[318030])
          } label _continueLabel[318155] _indexOfInterest[318150] _iterator[318151]
        } label _breakLabel[318156]
        Defer
        {
          {(318187 call _endCountFree _coforallCount[318143])
          }
        }(318192 call _waitEndCount _coforallCount[318143] 0)
      }
    }
  } function Block[316693](?).dsiEqualDMaps[318233](arg _mt[318238]:_MT[238], arg this[318235]:Block[316693](?) : Block[316693](?), arg that[318230] :(318229 call Block[408851](?) ?[260])) : _unknown[51] "method"
  {(318277 return(318275 call &&(318260 call &&(318248 call ==(318241 call . this[318235] c"rank")(318245 call . that[318230] c"rank"))(318258 call ==(318251 call . this[318235] c"boundingBox")(318255 call . that[318230] c"boundingBox")))(318274 call(318266 call .(318263 call . this[318235] c"targetLocales") c"equals")(318270 call . that[318230] c"targetLocales"))))
  } function Block[316693](?).dsiEqualDMaps[318287](arg _mt[318292]:_MT[238], arg this[318289]:Block[316693](?) : Block[316693](?), arg that[318285]:_any[178](?)) param : _unknown[51] "method"
  {(318295 return 0)
  } function Block[316693](?).dsiClone[318303](arg _mt[318308]:_MT[238], arg this[318305]:Block[316693](?) : Block[316693](?)) : _unknown[51] "method"
  {(318324 return(318312 'new'(_chpl_manager = unmanaged[220](?))(318323 call Block[408851](?)(409140 call . this[318305] c"boundingBox")(409145 call . this[318305] c"targetLocales")(409150 call . this[318305] c"dataParTasksPerLocale")(409155 call . this[318305] c"dataParIgnoreRunningTasks")(409160 call . this[318305] c"dataParMinGranularity")(409165 call . this[318305] c"rank")(409170 call . this[318305] c"idxType")(409175 call . this[318305] c"sparseLayoutType"))))
  } function Block[316693](?).dsiDestroyDist[318332](arg _mt[318337]:_MT[238], arg this[318334]:Block[316693](?) : Block[316693](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[318359] "expr temp" "maybe ref" "no copy" "temp"(318362 'move' tmpIter[318359](409180 call . this[318334] c"locDist")) unknown isRngDomArr[318509] "maybe param" "temp"(318524 'move' isRngDomArr[318509](318522 call ||(318511 call isBoundedRange tmpIter[318359])(318520 call ||(318514 call isDomain tmpIter[318359])(318517 call isArray tmpIter[318359]))))
      if isRngDomArr[318509]
      { const _coforallCount[318381] "const" "end count" "temp"(318446 'move' _coforallCount[318381](318443 call _endCountAlloc 0)) unknown numTasks[318382] "temp"(318430 'move' numTasks[318382](318426 call . tmpIter[318359] c"size"))(318421 call _upEndCount _coforallCount[318381] 0 numTasks[318382]) unknown _indexOfInterest[318388] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318389] "expr temp" "temp"(318398 'move' _iterator[318389](318396 call _getIterator tmpIter[318359]))
        Defer
        {
          {(318414 call _freeIterator _iterator[318389])
          }
        }
        { scopeless type(318403 'move' _indexOfInterest[318388](318400 call iteratorIndex _iterator[318389]))
        }
        ForLoop[318390]
        { unknown ld[318407] "coforall index var" "index var" "insert auto destroy"(318409 'move' ld[318407] _indexOfInterest[318388]) const tmp[318365] "const" "temp"(318367 'move' tmp[318365](318369 'deref'(318370 '_wide_get_locale' ld[318407])))
          {(318378 call chpl__delete ld[318407])(318383 call _downEndCount _coforallCount[318381] nil[44])(318373 'coforall on block' 0 tmp[318365])
          } label _continueLabel[318393] _indexOfInterest[318388] _iterator[318389]
        } label _breakLabel[318394]
        Defer
        {
          {(318433 call _endCountFree _coforallCount[318381])
          }
        }(318438 call _waitEndCount _coforallCount[318381] 0 numTasks[318382])
      }
      { const _coforallCount[318450] "const" "end count" "temp"(318506 'move' _coforallCount[318450](318503 call _endCountAlloc 0)) unknown _indexOfInterest[318457] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318458] "expr temp" "temp"(318467 'move' _iterator[318458](318465 call _getIterator tmpIter[318359]))
        Defer
        {
          {(318483 call _freeIterator _iterator[318458])
          }
        }
        { scopeless type(318472 'move' _indexOfInterest[318457](318469 call iteratorIndex _iterator[318458]))
        }
        ForLoop[318459]
        { unknown ld[318476] "coforall index var" "index var" "insert auto destroy"(318478 'move' ld[318476] _indexOfInterest[318457])(318490 call _upEndCount _coforallCount[318450] 0) const tmp[318350] "const" "temp"(318352 'move' tmp[318350](318348 'deref'(318347 '_wide_get_locale' ld[318476])))
          {(318344 call chpl__delete ld[318476])(318452 call _downEndCount _coforallCount[318450] nil[44])(318355 'coforall on block' 0 tmp[318350])
          } label _continueLabel[318462] _indexOfInterest[318457] _iterator[318458]
        } label _breakLabel[318463]
        Defer
        {
          {(318494 call _endCountFree _coforallCount[318450])
          }
        }(318499 call _waitEndCount _coforallCount[318450] 0)
      }
    }
  } function Block[316693](?).dsiDisplayRepresentation[318534](arg _mt[318539]:_MT[238], arg this[318536]:Block[316693](?) : Block[316693](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {(318561 call writeln "boundingBox = "(409189 call . this[318536] c"boundingBox"))(318584 call writeln "targetLocDom = "(409194 call . this[318536] c"targetLocDom"))(318615 call writeln "targetLocales = "(318611 for  tl[318613]  in (409200 call . this[318536] c"targetLocales") do
    {(318608 call . tl[318613] c"id")
    } ))(318637 call writeln "dataParTasksPerLocale = "(409205 call . this[318536] c"dataParTasksPerLocale"))(318659 call writeln "dataParIgnoreRunningTasks = "(409210 call . this[318536] c"dataParIgnoreRunningTasks"))(318681 call writeln "dataParMinGranularity = "(409215 call . this[318536] c"dataParMinGranularity"))
    { unknown _indexOfInterest[318733] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318734] "expr temp" "temp"(318743 'move' _iterator[318734](318741 call _getIterator(409220 call . this[318536] c"targetLocDom")))
      Defer
      {
        {(318759 call _freeIterator _iterator[318734])
        }
      }
      { scopeless type(318748 'move' _indexOfInterest[318733](318745 call iteratorIndex _iterator[318734]))
      }
      ForLoop[318735]
      { unknown tli[318752] "index var" "insert auto destroy"(318754 'move' tli[318752] _indexOfInterest[318733])(318731 call writeln "locDist[" tli[318752] "].myChunk = "(318728 call .(318725 call(409226 call . this[318536] c"locDist") tli[318752]) c"myChunk")) label _continueLabel[318738] _indexOfInterest[318733] _iterator[318734]
      } label _breakLabel[318739]
    }
  } function Block[316693](?).dsiNewRectangularDom[318775](arg _mt[318788]:_MT[238], arg this[318785]:Block[316693](?) : Block[316693](?), param arg rank[318772] : int(64)[13], arg idxType[318777]:_any[178](?), param arg stridable[318780] : bool[10], arg inds[318783]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(318818 call _cond_test(318795 call != idxType[318777](318792 call . this[318785] c"idxType")))
    {(318816 call compilerError "Block domain index type does not match distribution's")
    }
    if(318852 call _cond_test(318829 call != rank[318772](318826 call . this[318785] c"rank")))
    {(318850 call compilerError "Block domain rank does not match distribution's")
    } const whole[318864] "const"(318863 call createWholeDomainForInds rank[318772] idxType[318777] stridable[318780] inds[318783])(318867 'end of statement') const dummyLBD[318877] "const"(318870 'new'(_chpl_manager = unmanaged[220](?))(318876 call LocBlockDom[408858](?) rank[318772] idxType[318777] stridable[318780]))(318880 'end of statement') unknown locDomsTemp[318898] dummyLBD[318877](318895 call chpl__buildArrayRuntimeType(318893 call chpl__ensureDomainExpr(318882 call . this[318785] c"targetLocDom"))(318891 call unmanaged LocBlockDom[415577](?) rank[318772] idxType[318777] stridable[318780]))(318901 'end of statement')
    { unknown tmpIter[318949] "expr temp" "maybe ref" "no copy" "temp"(318952 'move' tmpIter[318949](318904 call . this[318785] c"targetLocDom")) unknown isRngDomArr[319121] "maybe param" "temp"(319136 'move' isRngDomArr[319121](319134 call ||(319123 call isBoundedRange tmpIter[318949])(319132 call ||(319126 call isDomain tmpIter[318949])(319129 call isArray tmpIter[318949]))))
      if isRngDomArr[319121]
      { const _coforallCount[318993] "const" "end count" "temp"(319058 'move' _coforallCount[318993](319055 call _endCountAlloc 0)) unknown numTasks[318994] "temp"(319042 'move' numTasks[318994](319038 call . tmpIter[318949] c"size"))(319033 call _upEndCount _coforallCount[318993] 0 numTasks[318994]) unknown _indexOfInterest[319000] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[319001] "expr temp" "temp"(319010 'move' _iterator[319001](319008 call _getIterator tmpIter[318949]))
        Defer
        {
          {(319026 call _freeIterator _iterator[319001])
          }
        }
        { scopeless type(319015 'move' _indexOfInterest[319000](319012 call iteratorIndex _iterator[319001]))
        }
        ForLoop[319002]
        { unknown localeIdx[319019] "coforall index var" "index var" "insert auto destroy"(319021 'move' localeIdx[319019] _indexOfInterest[319000]) const tmp[318955] "const" "temp"(318957 'move' tmp[318955](318959 'deref'(318960 '_wide_get_locale'(318965 call(318962 call . this[318785] c"targetLocales") localeIdx[319019]))))
          {(318973 call =(318975 call locDomsTemp[318898] localeIdx[319019])(318977 'new'(_chpl_manager = unmanaged[220](?))(318981 call LocBlockDom[408858](?) rank[318772] idxType[318777] stridable[318780](318989 call(318986 call . this[318785] c"getChunk") whole[318864] localeIdx[319019]))))(318995 call _downEndCount _coforallCount[318993] nil[44])(318968 'coforall on block' 0 tmp[318955])
          } label _continueLabel[319005] _indexOfInterest[319000] _iterator[319001]
        } label _breakLabel[319006]
        Defer
        {
          {(319045 call _endCountFree _coforallCount[318993])
          }
        }(319050 call _waitEndCount _coforallCount[318993] 0 numTasks[318994])
      }
      { const _coforallCount[319062] "const" "end count" "temp"(319118 'move' _coforallCount[319062](319115 call _endCountAlloc 0)) unknown _indexOfInterest[319069] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[319070] "expr temp" "temp"(319079 'move' _iterator[319070](319077 call _getIterator tmpIter[318949]))
        Defer
        {
          {(319095 call _freeIterator _iterator[319070])
          }
        }
        { scopeless type(319084 'move' _indexOfInterest[319069](319081 call iteratorIndex _iterator[319070]))
        }
        ForLoop[319071]
        { unknown localeIdx[319088] "coforall index var" "index var" "insert auto destroy"(319090 'move' localeIdx[319088] _indexOfInterest[319069])(319102 call _upEndCount _coforallCount[319062] 0) const tmp[318941] "const" "temp"(318943 'move' tmp[318941](318939 'deref'(318938 '_wide_get_locale'(318913 call(318908 call . this[318785] c"targetLocales") localeIdx[319088]))))
          {(318935 call =(318917 call locDomsTemp[318898] localeIdx[319088])(318920 'new'(_chpl_manager = unmanaged[220](?))(318934 call LocBlockDom[408858](?) rank[318772] idxType[318777] stridable[318780](318933 call(318927 call . this[318785] c"getChunk") whole[318864] localeIdx[319088]))))(319064 call _downEndCount _coforallCount[319062] nil[44])(318946 'coforall on block' 0 tmp[318941])
          } label _continueLabel[319074] _indexOfInterest[319069] _iterator[319070]
        } label _breakLabel[319075]
        Defer
        {
          {(319106 call _endCountFree _coforallCount[319062])
          }
        }(319111 call _waitEndCount _coforallCount[319062] 0)
      }
    }(319142 call chpl__delete dummyLBD[318877]) unknown dom[319161](319147 'new'(_chpl_manager = unmanaged[220](?))(319160 call BlockDom[408874](?) rank[318772] idxType[318777] stridable[318780](409270 call . this[318785] c"sparseLayoutType")(319156 call _cast unmanaged[220](?) this[318785]) locDomsTemp[318898] whole[318864]))(319164 'end of statement')
    if(319195 call _cond_test debugBlockDist[316580])
    {(319185 call writeln "Creating new Block domain:")(319193 call(319189 call . dom[319161] c"dsiDisplayRepresentation"))
    }(319200 return dom[319161])
  } function Block[316693](?).dsiNewSparseDom[319211](arg _mt[319222]:_MT[238], arg this[319219]:Block[316693](?) : Block[316693](?), param arg rank[319208] : int(64)[13], arg idxType[319213]:_any[178](?), arg dom[319216] : _domain[125908](?)) : _unknown[51] "method" "method overrides"
  { unknown ret[319258](319226 'new'(_chpl_manager = unmanaged[220](?))(319257 call SparseBlockDom[409280](?)(rank = rank[319208])(idxType = idxType[319213])(sparseLayoutType =(409287 call . this[319219] c"sparseLayoutType"))(stridable =(319236 call . dom[319216] c"stridable"))(dist =(319243 call _to_unmanaged this[319219]))(whole =(319251 call .(319246 call . dom[319216] c"_value") c"whole"))(parentDom = dom[319216])))(319261 'end of statement')(319268 call(319264 call . ret[319258] c"setup"))(319271 return ret[319258])
  } function Block[316693](?).writeThis[319280](arg _mt[319285]:_MT[238], arg this[319282]:Block[316693](?) : Block[316693](?), arg x[319278]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {(319308 call <~>(319305 call <~> x[319278] "Block") "\n")(319333 call <~>(319330 call <~> x[319278] "-------") "\n")(319360 call <~>(319357 call <~>(319354 call <~> x[319278] "distributes: ")(409298 call . this[319282] c"boundingBox")) "\n")(319387 call <~>(319384 call <~>(319381 call <~> x[319278] "across locales: ")(409304 call . this[319282] c"targetLocales")) "\n")(319414 call <~>(319411 call <~>(319408 call <~> x[319278] "indexed via: ")(409310 call . this[319282] c"targetLocDom")) "\n")(319438 call <~>(319435 call <~> x[319278] "resulting in: ") "\n")
    { unknown _indexOfInterest[319527] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[319528] "expr temp" "temp"(319537 'move' _iterator[319528](319535 call _getIterator(409316 call . this[319282] c"targetLocDom")))
      Defer
      {
        {(319553 call _freeIterator _iterator[319528])
        }
      }
      { scopeless type(319542 'move' _indexOfInterest[319527](319539 call iteratorIndex _iterator[319528]))
      }
      ForLoop[319529]
      { unknown locid[319546] "index var" "insert auto destroy"(319548 'move' locid[319546] _indexOfInterest[319527])(319524 call <~>(319521 call <~>(319512 call <~>(319493 call <~>(319483 call <~>(319464 call <~>(319461 call <~> x[319278] "  [") locid[319546]) "] locale ")(319492 '_wide_get_node'(319488 call(409323 call . this[319282] c"locDist") locid[319546]))) " owns chunk: ")(319518 call .(319517 call(409329 call . this[319282] c"locDist") locid[319546]) c"myChunk")) "\n") label _continueLabel[319532] _indexOfInterest[319527] _iterator[319528]
      } label _breakLabel[319533]
    }
  } function Block[316693](?).dsiIndexToLocale[319569](arg _mt[319574]:_MT[238], arg this[319571]:Block[316693](?) : Block[316693](?), arg ind[319566] :(409335 call . this[319571] c"idxType")) : _unknown[51] "method"
  {(319587 return(319586 call(409345 call . this[319571] c"targetLocales")(319584 call(409349 call . this[319571] c"targetLocsIdx") ind[319566])))
  }
  {(319578 call ==(409340 call . this[319571] c"rank") 1)
  } function Block[316693](?).dsiIndexToLocale[319603](arg _mt[319608]:_MT[238], arg this[319605]:Block[316693](?) : Block[316693](?), arg ind[319600] :(319598 call *(409355 call . this[319605] c"rank")(409360 call . this[319605] c"idxType"))) : _unknown[51] "method"
  {(319617 return(319616 call(409365 call . this[319605] c"targetLocales")(319614 call(409369 call . this[319605] c"targetLocsIdx") ind[319600])))
  } function Block[316693](?).getChunk[319627](arg _mt[319634]:_MT[238], arg this[319631]:Block[316693](?) : Block[316693](?), arg inds[319625]:_any[178](?), arg locid[319629]:_any[178](?)) : _unknown[51] "method"
  { const chunk[319652] "const"(319651 call(319640 call .(319639 call(409375 call . this[319631] c"locDist") locid[319629]) c"myChunk")(319649 'expand_tuple'(319648 call(319644 call . inds[319625] c"getIndices"))))(319655 'end of statement')
    if(319776 call _cond_test sanityCheckDistribution[316600])
    {
      if(319772 call _cond_test(319663 call >(319659 call . chunk[319652] c"size") 0))
      {
        if(319729 call _cond_test(319673 call !=(319671 call(409381 call . this[319631] c"targetLocsIdx")(319667 call . chunk[319652] c"low")) locid[319629]))
        {(319727 call writeln "["(319679 call .(365290 call here[90438]) c"id") "] "(319700 call . chunk[319652] c"low") " is in my chunk but maps to "(319726 call(409386 call . this[319631] c"targetLocsIdx")(319722 call . chunk[319652] c"low")))
        }
        if(319767 call _cond_test(319743 call !=(319741 call(409390 call . this[319631] c"targetLocsIdx")(319737 call . chunk[319652] c"high")) locid[319629]))
        {(319765 call writeln "["(319749 call .(365295 call here[90438]) c"id") "] "(319754 call . chunk[319652] c"high") " is in my chunk but maps to "(319764 call(409395 call . this[319631] c"targetLocsIdx")(319760 call . chunk[319652] c"high")))
        }
      }
    }(319782 return chunk[319652])
  } function Block[316693](?).targetLocsIdx[319793](arg _mt[319798]:_MT[238], arg this[319795]:Block[316693](?) : Block[316693](?), arg ind[319790] :(409401 call . this[319795] c"idxType")) : _unknown[51] "method"
  {(319810 return(319809 call(409410 call . this[319795] c"targetLocsIdx")(319806 call _build_tuple ind[319790])))
  }
  {(319802 call ==(409406 call . this[319795] c"rank") 1)
  } function Block[316693](?).targetLocsIdx[319826](arg _mt[319831]:_MT[238], arg this[319828]:Block[316693](?) : Block[316693](?), arg ind[319823] :(319821 call *(409416 call . this[319828] c"rank")(409421 call . this[319828] c"idxType"))) : _unknown[51] "method"
  { unknown result[319837](319835 call *(409426 call . this[319828] c"rank") int(64)[13])(319840 'end of statement')
    { unknown i[319925] 0 unknown tmp[319926] "maybe param" "temp"(319938 'move' tmp[319926](319936 call chpl_compute_low_param_loop_bound 0(319845 call -(409431 call . this[319828] c"rank") 1))) unknown tmp[319927] "maybe param" "temp"(319948 'move' tmp[319927](319946 call chpl_compute_high_param_loop_bound 0(319943 call -(409449 call . this[319828] c"rank") 1))) unknown tmp[319928] "maybe param" "temp"(319951 'move' tmp[319928] 1)
      ParamForLoop[319953]
      { i[319925] tmp[319926] tmp[319927] tmp[319928](319922 call =(319852 call result[319837] i[319925])(319921 call max 0(319920 call min(319871 call _cast int(64)[13](319868 call -(319864 call .(319863 call(319858 call .(365301 call . this[319828] c"targetLocDom") c"dim") i[319925]) c"size") 1))(319918 call _cast int(64)[13](319915 call /(319903 call *(319888 call -(319877 call ind[319823] i[319925])(319885 call .(319884 call(319879 call .(365306 call . this[319828] c"boundingBox") c"dim") i[319925]) c"low"))(319901 call _cast(409443 call . this[319828] c"idxType")(319897 call .(319896 call(319891 call .(365311 call . this[319828] c"targetLocDom") c"dim") i[319925]) c"size")))(319912 call .(319911 call(319906 call .(365316 call . this[319828] c"boundingBox") c"dim") i[319925]) c"size"))))))
      } label _unused_continueLabel[319930] label _breakLabel[319929]
    }(319974 return(319971 IfExpr (319964 call ==(409454 call . this[319828] c"rank") 1) then
    { scopeless(319969 call result[319837] 0)
    } else
    { scopeless result[319837]
    } ))
  } function Block[316693](?).activeTargetLocales[319987](arg _mt[319992]:_MT[238], arg this[319989]:Block[316693](?) : Block[316693](?), const arg space[319983] : _domain[125908](?) =(409462 call . this[319989] c"boundingBox")) : _unknown[51] "iterator fn" "method" "no return value for void"
  { const locSpace[320004] "const"(320002 call chpl__buildDomainExpr(320000 'expand_tuple'(319999 call(319995 call . space[319983] c"dims"))))(320007 'end of statement') const low[320019] "const"(320018 call chpl__tuplify(320016 call(409466 call . this[319989] c"targetLocsIdx")(320012 call . locSpace[320004] c"first")))(320022 'end of statement') const high[320033] "const"(320032 call chpl__tuplify(320030 call(409470 call . this[319989] c"targetLocsIdx")(320026 call . locSpace[320004] c"last")))(320036 'end of statement') unknown dims[320048](320046 call *(409475 call . this[319989] c"rank")(320045 call range[64319](?)(320043 'typeof'(320042 call low[320019] 0))))(320051 'end of statement')
    { unknown i[320077] 0 unknown tmp[320078] "maybe param" "temp"(320090 'move' tmp[320078](320088 call chpl_compute_low_param_loop_bound 0(320055 call -(409482 call . this[319989] c"rank") 1))) unknown tmp[320079] "maybe param" "temp"(320100 'move' tmp[320079](320098 call chpl_compute_high_param_loop_bound 0(320095 call -(409493 call . this[319989] c"rank") 1))) unknown tmp[320080] "maybe param" "temp"(320103 'move' tmp[320080] 1)
      ParamForLoop[320105]
      { i[320077] tmp[320078] tmp[320079] tmp[320080]
        {(320073 call =(320062 call dims[320048] i[320077])(320071 call chpl_build_bounded_range(320066 call low[320019] i[320077])(320070 call high[320033] i[320077])))
        }
      } label _unused_continueLabel[320082] label _breakLabel[320081]
    }
    { unknown _indexOfInterest[320150] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[320151] "expr temp" "temp"(320160 'move' _iterator[320151](320158 call _getIterator(320118 call chpl__buildDomainExpr(320116 'expand_tuple' dims[320048]))))
      Defer
      {
        {(320177 call _freeIterator _iterator[320151])
        }
      }
      { scopeless type(320166 'move' _indexOfInterest[320150](320163 call iteratorIndex _iterator[320151]))
      }
      ForLoop[320152]
      { unknown i[320170] "index var" "insert auto destroy"(320172 'move' i[320170] _indexOfInterest[320150])
        { const chunk[320126] "const"(320125 call chpl__computeBlock i[320170](409500 call . this[319989] c"targetLocDom")(409505 call . this[319989] c"boundingBox"))(320129 'end of statement')
          if(320145 call _cond_test(320140 call >(320136 call .(320135 call locSpace[320004](320133 'expand_tuple' chunk[320126])) c"size") 0))
          {(320143 yield i[320170])
          }
        } label _continueLabel[320155] _indexOfInterest[320150] _iterator[320151]
      } label _breakLabel[320156]
    }
  } function chpl__computeBlock[320190](arg locid[320188]:_any[178](?), arg targetLocBox[320192]:_any[178](?), arg boundingBox[320194]:_any[178](?)) : _unknown[51]
  { unknown rank[320200] "param"(320197 call . targetLocBox[320192] c"rank")(320203 'end of statement') unknown idxType[320215] "type variable"(320212 call .(320211 call(320208 call chpl__tuplify boundingBox[320194]) 0) c"idxType") unknown inds[320225](320223 call * rank[320200](320222 call range[64319](?) idxType[320215]))(320228 'end of statement')
    { unknown i[320340] 0 unknown tmp[320341] "maybe param" "temp"(320353 'move' tmp[320341](320351 call chpl_compute_low_param_loop_bound 0(320232 call - rank[320200] 1))) unknown tmp[320342] "maybe param" "temp"(320363 'move' tmp[320342](320361 call chpl_compute_high_param_loop_bound 0(320358 call - rank[320200] 1))) unknown tmp[320343] "maybe param" "temp"(320366 'move' tmp[320343] 1)
      ParamForLoop[320368]
      { i[320340] tmp[320341] tmp[320342] tmp[320343]
        { const lo[320246] "const"(320243 call .(320242 call(320237 call . boundingBox[320194] c"dim") i[320340]) c"low")(320249 'end of statement') const hi[320261] "const"(320258 call .(320257 call(320252 call . boundingBox[320194] c"dim") i[320340]) c"high")(320264 'end of statement') const numelems[320272] "const"(320270 call +(320267 call - hi[320261] lo[320246]) 1)(320275 'end of statement') const numlocs[320286] "const"(320283 call .(320282 call(320277 call . targetLocBox[320192] c"dim") i[320340]) c"size")(320289 'end of statement') const tmp[320316] "const" "temp"(320315 call _computeBlock numelems[320272] numlocs[320286](320305 call(320302 call chpl__tuplify locid[320188]) i[320340])(320309 call max idxType[320215])(320313 call min idxType[320215]) lo[320246])(320323 call _check_tuple_var_decl tmp[320316] 2) const blo[320290] "const"(320317 call tmp[320316] 0) const bhi[320292] "const"(320320 call tmp[320316] 1)(320328 'end of statement')(320337 call =(320332 call inds[320225] i[320340])(320335 call chpl_build_bounded_range blo[320290] bhi[320292]))
        }
      } label _unused_continueLabel[320345] label _breakLabel[320344]
    }(320378 return inds[320225])
  } function LocBlock[316716](?).init[320389](arg _mt[320408]:_MT[238], arg this[320405]:LocBlock[316716](?) : LocBlock[316716](?), param arg rank[320386] : int(64)[13], arg idxType[320391]:_any[178](?), arg locid[320393]:_any[178](?), arg boundingBox[320395]:_any[178](?), arg targetLocDom[320402] :(320400 call chpl__buildDomainRuntimeType defaultDist[94053] rank[320386])) : _unknown[51] "method" "no return value for void"
  {(320415 call =(320411 call . this[320405] c"rank") rank[320386])(320424 call =(320420 call . this[320405] c"idxType") idxType[320391]) const inds[320436] "const"(320435 call chpl__computeBlock(320431 call chpl__tuplify locid[320393]) targetLocDom[320402] boundingBox[320395])(320439 'end of statement')(320446 call =(409543 call . this[320405] c"myChunk")(320444 call chpl__buildDomainExpr(320442 'expand_tuple' inds[320436])))
  } function LocBlock[316716](?).init[320456](arg _mt[320467]:_MT[238], arg this[320464]:LocBlock[316716](?) : LocBlock[316716](?), param arg rank[320454]:_any[178](?), arg idxType[320458]:_any[178](?), param arg dummy[320461] : bool[10]) : _unknown[51] "method" "no return value for void"
  {(320475 call =(320471 call . this[320464] c"rank") rank[320454])(320484 call =(320480 call . this[320464] c"idxType") idxType[320458])
  }
  { dummy[320461]
  } function BlockDom[316773](?).dsiMyDist[320493](arg _mt[320498]:_MT[238], arg this[320495]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "method overrides"
  {(320501 return(409552 call . this[320495] c"dist"))
  } function BlockDom[316773](?).dsiDisplayRepresentation[320509](arg _mt[320514]:_MT[238], arg this[320511]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {(320536 call writeln "whole = "(409557 call . this[320511] c"whole"))
    { unknown _indexOfInterest[320590] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[320591] "expr temp" "temp"(320600 'move' _iterator[320591](320598 call _getIterator(320541 call .(365332 call . this[320511] c"dist") c"targetLocDom")))
      Defer
      {
        {(320617 call _freeIterator _iterator[320591])
        }
      }
      { scopeless type(320606 'move' _indexOfInterest[320590](320603 call iteratorIndex _iterator[320591]))
      }
      ForLoop[320592]
      { unknown tli[320610] "index var" "insert auto destroy"(320612 'move' tli[320610] _indexOfInterest[320590])(320588 call writeln "locDoms[" tli[320610] "].myBlock = "(320585 call .(320584 call(409563 call . this[320511] c"locDoms") tli[320610]) c"myBlock")) label _continueLabel[320595] _indexOfInterest[320590] _iterator[320591]
      } label _breakLabel[320596]
    }
  } function BlockDom[316773](?).dsiDims[320629](arg _mt[320634]:_MT[238], arg this[320631]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method"
  {(320642 return(320641 call(320637 call .(365337 call . this[320631] c"whole") c"dims")))
  } function BlockDom[316773](?).dsiDim[320654](arg _mt[320659]:_MT[238], arg this[320656]:BlockDom[316773](?) : BlockDom[316773](?), arg d[320651] : int(64)[13]) : _unknown[51] "method"
  {(320668 return(320667 call(320662 call .(365342 call . this[320656] c"whole") c"dim") d[320651]))
  } function BlockDom[316773](?).getLocDom[320678](arg _mt[320683]:_MT[238], arg this[320680]:BlockDom[316773](?) : BlockDom[316773](?), arg localeIdx[320676]:_any[178](?)) : _unknown[51] "method"
  {(320689 return(320688 call(409570 call . this[320680] c"locDoms") localeIdx[320676]))
  } function _matchArgsShape[320698](arg rangeType[320696]:_any[178](?), arg scalarType[320700]:_any[178](?), arg args[320702]:_any[178](?)) type : _unknown[51]
  { function helper[320710](param arg i[320707] : int(64)[13]) type : _unknown[51]
    {
      if(320785 call _cond_test(320717 call == i[320707](320714 call . args[320702] c"size")))
      {
        if(320736 call _cond_test(320725 call isCollapsedDimension(320723 call args[320702] i[320707])))
        {(320729 return(320727 call _build_tuple scalarType[320700]))
        }
        {(320734 return(320732 call _build_tuple rangeType[320696]))
        }
      }
      {
        if(320778 call _cond_test(320749 call isCollapsedDimension(320747 call args[320702] i[320707])))
        {(320762 return(320760 call _build_tuple scalarType[320700](320758 'expand_tuple'(320757 call helper(320754 call + i[320707] 1)))))
        }
        {(320776 return(320774 call _build_tuple rangeType[320696](320772 'expand_tuple'(320771 call helper(320768 call + i[320707] 1)))))
        }
      }
    }(320797 return(320796 call helper 0))
  } function BlockDom[316773](?).these[320804](arg _mt[320809]:_MT[238], arg this[320806]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[320816] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[320817] "expr temp" "temp"(320826 'move' _iterator[320817](320824 call _getIterator(409587 call . this[320806] c"whole")))
      Defer
      {
        {(320842 call _freeIterator _iterator[320817])
        }
      }
      { scopeless type(320831 'move' _indexOfInterest[320816](320828 call iteratorIndex _iterator[320817]))
      }
      ForLoop[320818]
      { unknown i[320835] "index var" "insert auto destroy"(320837 'move' i[320835] _indexOfInterest[320816])(320814 yield i[320835]) label _continueLabel[320821] _indexOfInterest[320816] _iterator[320817]
      } label _breakLabel[320822]
    }
  } function BlockDom[316773](?).these[320859](arg _mt[320864]:_MT[238], arg this[320861]:BlockDom[316773](?) : BlockDom[316773](?), param arg tag[320856] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  { const maxTasks[320877] "const"(320874 call .(365349 call . this[320861] c"dist") c"dataParTasksPerLocale")(320880 'end of statement') const ignoreRunning[320886] "const"(320883 call .(365354 call . this[320861] c"dist") c"dataParIgnoreRunningTasks")(320889 'end of statement') const minSize[320894] "const"(320891 call .(365359 call . this[320861] c"dist") c"dataParMinGranularity")(320897 'end of statement') const wholeLow[320902] "const"(320899 call .(365364 call . this[320861] c"whole") c"low")(320905 'end of statement') const hereId[320910] "const"(320907 call .(365367 call here[90438]) c"id")(320913 'end of statement') const hereIgnoreRunning[320928] "const"(320925 IfExpr (320921 call ==(320919 call(320915 call .(365369 call here[90438]) c"runningTasks")) 1) then
    { scopeless 1
    } else
    { scopeless ignoreRunning[320886]
    } )(320931 'end of statement')
    { unknown tmpIter[321168] "expr temp" "maybe ref" "no copy" "temp"(321171 'move' tmpIter[321168](409596 call . this[320861] c"locDoms")) unknown isRngDomArr[321504] "maybe param" "temp"(321519 'move' isRngDomArr[321504](321517 call ||(321506 call isBoundedRange tmpIter[321168])(321515 call ||(321509 call isDomain tmpIter[321168])(321512 call isArray tmpIter[321168]))))
      if isRngDomArr[321504]
      { const _coforallCount[321376] "const" "end count" "temp"(321441 'move' _coforallCount[321376](321438 call _endCountAlloc 0)) unknown numTasks[321377] "temp"(321425 'move' numTasks[321377](321421 call . tmpIter[321168] c"size"))(321416 call _upEndCount _coforallCount[321376] 0 numTasks[321377]) unknown _indexOfInterest[321383] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[321384] "expr temp" "temp"(321393 'move' _iterator[321384](321391 call _getIterator tmpIter[321168]))
        Defer
        {
          {(321409 call _freeIterator _iterator[321384])
          }
        }
        { scopeless type(321398 'move' _indexOfInterest[321383](321395 call iteratorIndex _iterator[321384]))
        }
        ForLoop[321385]
        { unknown locDom[321402] "coforall index var" "index var" "insert auto destroy"(321404 'move' locDom[321402] _indexOfInterest[321383]) const tmp[321174] "const" "temp"(321176 'move' tmp[321174](321178 'deref'(321179 '_wide_get_locale' locDom[321402])))
          {
            { const myIgnoreRunning[321187] "const"(321199 IfExpr (321189 call ==(321191 call .(365380 call here[90438]) c"id") hereId[320910]) then
              { scopeless hereIgnoreRunning[320928]
              } else
              { scopeless ignoreRunning[320886]
              } )(321201 'end of statement') unknown strType[321202] "type variable"(321204 call chpl__signedType(409647 call . this[320861] c"idxType")) const tmpBlock[321208] "const"(321216 call(321210 call .(321212 call . locDom[321402] c"myBlock") c"chpl__unTranslate") wholeLow[320902])(321219 'end of statement') unknown locOffset[321221](321223 call *(409653 call . this[320861] c"rank")(409658 call . this[320861] c"idxType"))(321227 'end of statement')
              { unknown i[321229] 0 unknown tmp[321232] "maybe param" "temp"(321234 'move' tmp[321232](321237 call chpl_compute_low_param_loop_bound 0(321240 call -(321242 call . tmpBlock[321208] c"rank") 1))) unknown tmp[321246] "maybe param" "temp"(321248 'move' tmp[321246](321251 call chpl_compute_high_param_loop_bound 0(321254 call -(321256 call . tmpBlock[321208] c"rank") 1))) unknown tmp[321260] "maybe param" "temp"(321262 'move' tmp[321260] 1)
                ParamForLoop[321265]
                { i[321229] tmp[321232] tmp[321246] tmp[321260]
                  { const stride[321273] "const"(321275 call .(321280 call(321277 call . tmpBlock[321208] c"dim") i[321229]) c"stride")(321284 'end of statement')
                    if(321286 call _cond_test(321288 call &&(321290 call < stride[321273] 0)(321294 call != strType[321202](409666 call . this[320861] c"idxType"))))
                    {(321300 call halt "negative stride not supported with unsigned idxType")
                    }(321304 call =(321306 call locOffset[321221] i[321229])(321309 call /(321311 call .(321316 call(321313 call . tmpBlock[321208] c"dim") i[321229]) c"first")(321320 call _cast(409674 call . this[320861] c"idxType") stride[321273])))
                  }
                } label _unused_continueLabel[321323] label _breakLabel[321325]
              }
              { unknown _indexOfInterest[321328] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[321330] "expr temp" "temp"(321332 'move' _iterator[321330](321335 call _getIterator(321340 call(321337 call . tmpBlock[321208] c"these") leader[447] maxTasks[320877] myIgnoreRunning[321187] minSize[320894] locOffset[321221])))
                Defer
                {
                  {(321351 call _freeIterator _iterator[321330])
                  }
                }
                { scopeless type(321355 'move' _indexOfInterest[321328](321358 call iteratorIndex _iterator[321330]))
                }
                ForLoop[321360]
                { unknown followThis[321363] "index var" "insert auto destroy"(321365 'move' followThis[321363] _indexOfInterest[321328])(321369 yield followThis[321363]) label _continueLabel[321371] _indexOfInterest[321328] _iterator[321330]
                } label _breakLabel[321373]
              }
            }(321378 call _downEndCount _coforallCount[321376] nil[44])(321182 'coforall on block' 0 tmp[321174])
          } label _continueLabel[321388] _indexOfInterest[321383] _iterator[321384]
        } label _breakLabel[321389]
        Defer
        {
          {(321428 call _endCountFree _coforallCount[321376])
          }
        }(321433 call _waitEndCount _coforallCount[321376] 0 numTasks[321377])
      }
      { const _coforallCount[321445] "const" "end count" "temp"(321501 'move' _coforallCount[321445](321498 call _endCountAlloc 0)) unknown _indexOfInterest[321452] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[321453] "expr temp" "temp"(321462 'move' _iterator[321453](321460 call _getIterator tmpIter[321168]))
        Defer
        {
          {(321478 call _freeIterator _iterator[321453])
          }
        }
        { scopeless type(321467 'move' _indexOfInterest[321452](321464 call iteratorIndex _iterator[321453]))
        }
        ForLoop[321454]
        { unknown locDom[321471] "coforall index var" "index var" "insert auto destroy"(321473 'move' locDom[321471] _indexOfInterest[321452])(321485 call _upEndCount _coforallCount[321445] 0) const tmp[321160] "const" "temp"(321162 'move' tmp[321160](321158 'deref'(321157 '_wide_get_locale' locDom[321471])))
          {
            { const myIgnoreRunning[320947] "const"(320944 IfExpr (320940 call ==(320936 call .(365371 call here[90438]) c"id") hereId[320910]) then
              { scopeless hereIgnoreRunning[320928]
              } else
              { scopeless ignoreRunning[320886]
              } )(320950 'end of statement') unknown strType[320956] "type variable"(320955 call chpl__signedType(409605 call . this[320861] c"idxType")) const tmpBlock[320969] "const"(320968 call(320963 call .(320960 call . locDom[321471] c"myBlock") c"chpl__unTranslate") wholeLow[320902])(320972 'end of statement') unknown locOffset[320977](320975 call *(409611 call . this[320861] c"rank")(409616 call . this[320861] c"idxType"))(320980 'end of statement')
              { unknown i[321065] 0 unknown tmp[321066] "maybe param" "temp"(321078 'move' tmp[321066](321076 call chpl_compute_low_param_loop_bound 0(320987 call -(320983 call . tmpBlock[320969] c"rank") 1))) unknown tmp[321067] "maybe param" "temp"(321091 'move' tmp[321067](321089 call chpl_compute_high_param_loop_bound 0(321083 call -(321085 call . tmpBlock[320969] c"rank") 1))) unknown tmp[321068] "maybe param" "temp"(321094 'move' tmp[321068] 1)
                ParamForLoop[321096]
                { i[321065] tmp[321066] tmp[321067] tmp[321068]
                  { const stride[321001] "const"(320998 call .(320997 call(320992 call . tmpBlock[320969] c"dim") i[321065]) c"stride")(321004 'end of statement')
                    if(321037 call _cond_test(321014 call &&(321008 call < stride[321001] 0)(321012 call != strType[320956](409624 call . this[320861] c"idxType"))))
                    {(321035 call halt "negative stride not supported with unsigned idxType")
                    }(321062 call =(321045 call locOffset[320977] i[321065])(321060 call /(321053 call .(321052 call(321047 call . tmpBlock[320969] c"dim") i[321065]) c"first")(321058 call _cast(409633 call . this[320861] c"idxType") stride[321001])))
                  }
                } label _unused_continueLabel[321070] label _breakLabel[321069]
              }
              { unknown _indexOfInterest[321123] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[321124] "expr temp" "temp"(321133 'move' _iterator[321124](321131 call _getIterator(321119 call(321107 call . tmpBlock[320969] c"these") leader[447] maxTasks[320877] myIgnoreRunning[320947] minSize[320894] locOffset[320977])))
                Defer
                {
                  {(321150 call _freeIterator _iterator[321124])
                  }
                }
                { scopeless type(321139 'move' _indexOfInterest[321123](321136 call iteratorIndex _iterator[321124]))
                }
                ForLoop[321125]
                { unknown followThis[321143] "index var" "insert auto destroy"(321145 'move' followThis[321143] _indexOfInterest[321123])(321121 yield followThis[321143]) label _continueLabel[321128] _indexOfInterest[321123] _iterator[321124]
                } label _breakLabel[321129]
              }
            }(321447 call _downEndCount _coforallCount[321445] nil[44])(321165 'coforall on block' 0 tmp[321160])
          } label _continueLabel[321457] _indexOfInterest[321452] _iterator[321453]
        } label _breakLabel[321458]
        Defer
        {
          {(321489 call _endCountFree _coforallCount[321445])
          }
        }(321494 call _waitEndCount _coforallCount[321445] 0)
      }
    }
  }
  {(320871 call == tag[320856] leader[447])
  } function BlockDom[316773](?).these[321533](arg _mt[321540]:_MT[238], arg this[321537]:BlockDom[316773](?) : BlockDom[316773](?), param arg tag[321530] : iterKind[453], arg followThis[321535]:_any[178](?)) : _unknown[51] "iterator fn" "method"
  { function anyStridable[321553](arg rangeTuple[321551]:_any[178](?), param arg i[321557] : int(64)[13] = 0) param : _unknown[51]
    {(321598 return(321595 IfExpr (321569 call == i[321557](321567 call -(321563 call . rangeTuple[321551] c"size") 1)) then
      { scopeless(321575 call .(321574 call rangeTuple[321551] i[321557]) c"stridable")
      } else
      { scopeless(321593 call ||(321582 call .(321581 call rangeTuple[321551] i[321557]) c"stridable")(321592 call anyStridable rangeTuple[321551](321590 call + i[321557] 1)))
      } ))
    }
    if(321627 call _cond_test chpl__testParFlag[188346])
    {(321625 call chpl__testParWriteln "Block domain follower invoked on " followThis[321535])
    } unknown t[321647](321645 call *(409696 call . this[321537] c"rank")(321644 call range[64319](?)(409702 call . this[321537] c"idxType")(stridable =(321641 call ||(409707 call . this[321537] c"stridable")(321640 call anyStridable followThis[321535])))))(321650 'end of statement') unknown strType[321655] "type variable"(321654 call chpl__signedType(409713 call . this[321537] c"idxType"))
    { unknown i[321774] 0 unknown tmp[321775] "maybe param" "temp"(321787 'move' tmp[321775](321785 call chpl_compute_low_param_loop_bound 0(321661 call -(409718 call . this[321537] c"rank") 1))) unknown tmp[321776] "maybe param" "temp"(321797 'move' tmp[321776](321795 call chpl_compute_high_param_loop_bound 0(321792 call -(409755 call . this[321537] c"rank") 1))) unknown tmp[321777] "maybe param" "temp"(321800 'move' tmp[321777] 1)
      ParamForLoop[321802]
      { i[321774] tmp[321775] tmp[321776] tmp[321777]
        { unknown stride[321678](321676 call _cast strType[321655](321672 call .(321671 call(321666 call .(365393 call . this[321537] c"whole") c"dim") i[321774]) c"stride"))(321681 'end of statement') unknown low[321699](321697 call _cast(409729 call . this[321537] c"idxType")(321694 call * stride[321678](321692 call _cast strType[321655](321688 call .(321687 call followThis[321535] i[321774]) c"low"))))(321702 'end of statement') unknown high[321719](321717 call _cast(409738 call . this[321537] c"idxType")(321714 call * stride[321678](321712 call _cast strType[321655](321708 call .(321707 call followThis[321535] i[321774]) c"high"))))(321722 'end of statement')(321771 call =(321726 call t[321647] i[321774])(321770 call(321761 call .(321759 call chpl_by(321747 call +(321735 call chpl_by(321729 call chpl_build_bounded_range low[321699] high[321719])(321733 call _cast strType[321655] stride[321678]))(321744 call .(321743 call(321738 call .(365398 call . this[321537] c"whole") c"dim") i[321774]) c"alignedLow"))(321757 call _cast strType[321655](321753 call .(321752 call followThis[321535] i[321774]) c"stride"))) c"safeCast")(321768 'typeof'(321767 call t[321647] i[321774]))))
        }
      } label _unused_continueLabel[321779] label _breakLabel[321778]
    }
    { unknown _indexOfInterest[321821] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[321822] "expr temp" "temp"(321831 'move' _iterator[321822](321829 call _getIterator(321815 call chpl__buildDomainExpr(321813 'expand_tuple' t[321647]))))
      Defer
      {
        {(321848 call _freeIterator _iterator[321822])
        }
      }
      { scopeless type(321837 'move' _indexOfInterest[321821](321834 call iteratorIndex _iterator[321822]))
      }
      ForLoop[321823]
      { unknown i[321841] "index var" "insert auto destroy"(321843 'move' i[321841] _indexOfInterest[321821])
        {(321818 yield i[321841])
        } label _continueLabel[321826] _indexOfInterest[321821] _iterator[321822]
      } label _breakLabel[321827]
    }
  }
  {(321547 call == tag[321530] follower[449])
  } function BlockDom[316773](?).dsiSerialWrite[321863](arg _mt[321868]:_MT[238], arg this[321865]:BlockDom[316773](?) : BlockDom[316773](?), arg x[321861]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(321872 call <~> x[321861](409763 call . this[321865] c"whole"))
  } function BlockDom[316773](?).dsiBuildArray[321883](arg _mt[321892]:_MT[238], arg this[321889]:BlockDom[316773](?) : BlockDom[316773](?), arg eltType[321881]:_any[178](?), param arg initElts[321886] : bool[10]) : _unknown[51] "method"
  { const dom[321895] "const" this[321889](321898 'end of statement') const creationLocale[321904] "const"(321901 call .(365401 call here[90438]) c"id")(321907 'end of statement') const dummyLBD[321917] "const"(321910 'new'(_chpl_manager = unmanaged[220](?))(321916 call LocBlockDom[408858](?)(409770 call . this[321889] c"rank")(409775 call . this[321889] c"idxType")(409780 call . this[321889] c"stridable")))(321920 'end of statement') const dummyLBA[321933] "const"(321923 'new'(_chpl_manager = unmanaged[220](?))(321932 call LocBlockArr[408882](?) eltType[321881](409787 call . this[321889] c"rank")(409792 call . this[321889] c"idxType")(409797 call . this[321889] c"stridable") dummyLBD[321917] 0))(321936 'end of statement') unknown locArrTemp[321958] dummyLBA[321933](321955 call chpl__buildArrayRuntimeType(321953 call chpl__ensureDomainExpr(321941 call .(321938 call . dom[321895] c"dist") c"targetLocDom"))(321951 call unmanaged LocBlockArr[415583](?) eltType[321881](409805 call . this[321889] c"rank")(409810 call . this[321889] c"idxType")(409815 call . this[321889] c"stridable")))(321961 'end of statement') unknown myLocArrTemp[321971](321968 call unmanaged LocBlockArr?[415589](?) eltType[321881](409823 call . this[321889] c"rank")(409828 call . this[321889] c"idxType")(409833 call . this[321889] c"stridable"))(321974 'end of statement')
    { unknown tmpIter[322064] "expr temp" "maybe ref" "no copy" "temp"(322067 'move' tmpIter[322064](321980 call .(321977 call . dom[321895] c"dist") c"targetLocDom")) unknown isRngDomArr[322265] "maybe param" "temp"(322280 'move' isRngDomArr[322265](322278 call ||(322267 call isBoundedRange tmpIter[322064])(322276 call ||(322270 call isDomain tmpIter[322064])(322273 call isArray tmpIter[322064]))))
      if isRngDomArr[322265]
      { const _coforallCount[322137] "const" "end count" "temp"(322202 'move' _coforallCount[322137](322199 call _endCountAlloc 0)) unknown numTasks[322138] "temp"(322186 'move' numTasks[322138](322182 call . tmpIter[322064] c"size"))(322177 call _upEndCount _coforallCount[322137] 0 numTasks[322138]) unknown _indexOfInterest[322144] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[322145] "expr temp" "temp"(322154 'move' _iterator[322145](322152 call _getIterator tmpIter[322064]))
        Defer
        {
          {(322170 call _freeIterator _iterator[322145])
          }
        }
        { scopeless type(322159 'move' _indexOfInterest[322144](322156 call iteratorIndex _iterator[322145]))
        }
        ForLoop[322146]
        { unknown localeIdx[322163] "coforall index var" "index var" "insert auto destroy"(322165 'move' localeIdx[322163] _indexOfInterest[322144]) const tmp[322073] "const" "temp"(322075 'move' tmp[322073](322077 'deref'(322078 '_wide_get_locale'(322086 call(322080 call .(322082 call . dom[321895] c"dist") c"targetLocales") localeIdx[322163]))))
          {
            { const LBA[322094] "const"(322095 'new'(_chpl_manager = unmanaged[220](?))(322099 call LocBlockArr[408882](?) eltType[321881](409869 call . this[321889] c"rank")(409874 call . this[321889] c"idxType")(409879 call . this[321889] c"stridable")(322108 call(322105 call . dom[321895] c"getLocDom") localeIdx[322163])(initElts = initElts[321886])))(322113 'end of statement')(322115 call =(322117 call locArrTemp[321958] localeIdx[322163]) LBA[322094])
              if(322121 call _cond_test(322123 call ==(322125 call .(365411 call here[90438]) c"id") creationLocale[321904]))
              {(322132 call = myLocArrTemp[321971] LBA[322094])
              }
            }(322139 call _downEndCount _coforallCount[322137] nil[44])(322089 'coforall on block' 0 tmp[322073])(322069 'actuals list' tiMarkRef[294] myLocArrTemp[321971])
          } label _continueLabel[322149] _indexOfInterest[322144] _iterator[322145]
        } label _breakLabel[322150]
        Defer
        {
          {(322189 call _endCountFree _coforallCount[322137])
          }
        }(322194 call _waitEndCount _coforallCount[322137] 0 numTasks[322138])
      }
      { const _coforallCount[322206] "const" "end count" "temp"(322262 'move' _coforallCount[322206](322259 call _endCountAlloc 0)) unknown _indexOfInterest[322213] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[322214] "expr temp" "temp"(322223 'move' _iterator[322214](322221 call _getIterator tmpIter[322064]))
        Defer
        {
          {(322239 call _freeIterator _iterator[322214])
          }
        }
        { scopeless type(322228 'move' _indexOfInterest[322213](322225 call iteratorIndex _iterator[322214]))
        }
        ForLoop[322215]
        { unknown localeIdx[322232] "coforall index var" "index var" "insert auto destroy"(322234 'move' localeIdx[322232] _indexOfInterest[322213])(322246 call _upEndCount _coforallCount[322206] 0) const tmp[322055] "const" "temp"(322057 'move' tmp[322055](322053 'deref'(322052 '_wide_get_locale'(322000 call(321995 call .(321992 call . dom[321895] c"dist") c"targetLocales") localeIdx[322232]))))
          {
            { const LBA[322022] "const"(322003 'new'(_chpl_manager = unmanaged[220](?))(322021 call LocBlockArr[408882](?) eltType[321881](409842 call . this[321889] c"rank")(409847 call . this[321889] c"idxType")(409852 call . this[321889] c"stridable")(322018 call(322013 call . dom[321895] c"getLocDom") localeIdx[322232])(initElts = initElts[321886])))(322025 'end of statement')(322032 call =(322030 call locArrTemp[321958] localeIdx[322232]) LBA[322022])
              if(322047 call _cond_test(322040 call ==(322036 call .(365407 call here[90438]) c"id") creationLocale[321904]))
              {(322044 call = myLocArrTemp[321971] LBA[322022])
              }
            }(322208 call _downEndCount _coforallCount[322206] nil[44])(322060 'coforall on block' 0 tmp[322055])(321988 'actuals list' tiMarkRef[294] myLocArrTemp[321971])
          } label _continueLabel[322218] _indexOfInterest[322213] _iterator[322214]
        } label _breakLabel[322219]
        Defer
        {
          {(322250 call _endCountFree _coforallCount[322206])
          }
        }(322255 call _waitEndCount _coforallCount[322206] 0)
      }
    }(322287 call chpl__delete dummyLBA[321933] dummyLBD[321917]) unknown arr[322315](322292 'new'(_chpl_manager = unmanaged[220](?))(322314 call BlockArr[409893](?)(eltType = eltType[321881])(rank =(409899 call . this[321889] c"rank"))(idxType =(409904 call . this[321889] c"idxType"))(stridable =(409909 call . this[321889] c"stridable"))(sparseLayoutType =(409914 call . this[321889] c"sparseLayoutType"))(dom =(322308 call _to_unmanaged dom[321895]))(locArr = locArrTemp[321958])(myLocArr = myLocArrTemp[321971])))(322318 'end of statement')
    if(322337 call _cond_test(322326 call &&(322322 call . arr[322315] c"doRADOpt") disableBlockLazyRAD[316610]))
    {(322335 call(322331 call . arr[322315] c"setupRADOpt"))
    }(322343 return arr[322315])
  } function BlockDom[316773](?).dsiNumIndices[322350](arg _mt[322355]:_MT[238], arg this[322352]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "no parens"
  {(322361 return(322358 call .(365417 call . this[322352] c"whole") c"size"))
  } function BlockDom[316773](?).dsiLow[322369](arg _mt[322374]:_MT[238], arg this[322371]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "no parens"
  {(322380 return(322377 call .(365422 call . this[322371] c"whole") c"low"))
  } function BlockDom[316773](?).dsiHigh[322388](arg _mt[322393]:_MT[238], arg this[322390]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "no parens"
  {(322399 return(322396 call .(365427 call . this[322390] c"whole") c"high"))
  } function BlockDom[316773](?).dsiStride[322407](arg _mt[322412]:_MT[238], arg this[322409]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "no parens"
  {(322418 return(322415 call .(365432 call . this[322409] c"whole") c"stride"))
  } function BlockDom[316773](?).dsiAlignedLow[322426](arg _mt[322431]:_MT[238], arg this[322428]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "no parens"
  {(322437 return(322434 call .(365437 call . this[322428] c"whole") c"alignedLow"))
  } function BlockDom[316773](?).dsiAlignedHigh[322445](arg _mt[322450]:_MT[238], arg this[322447]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "no parens"
  {(322456 return(322453 call .(365442 call . this[322447] c"whole") c"alignedHigh"))
  } function BlockDom[316773](?).dsiAlignment[322464](arg _mt[322469]:_MT[238], arg this[322466]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "no parens"
  {(322475 return(322472 call .(365447 call . this[322466] c"whole") c"alignment"))
  } function BlockDom[316773](?).dsiSetIndices[322487](arg _mt[322492]:_MT[238], arg this[322489]:BlockDom[316773](?) : BlockDom[316773](?), arg x[322484] : _domain[125908](?)) : _unknown[51] "method" "no return value for void"
  {
    if(322506 call _cond_test(322499 call !=(322495 call . x[322484] c"rank")(409925 call . this[322489] c"rank")))
    {(322504 call compilerError "rank mismatch in domain assignment")
    }
    if(322527 call _cond_test(322520 call !=(322516 call .(322513 call . x[322484] c"_value") c"idxType")(409930 call . this[322489] c"idxType")))
    {(322525 call compilerError "index type mismatch in domain assignment")
    }(322534 call =(409935 call . this[322489] c"whole") x[322484])(322539 call(409940 call . this[322489] c"setup"))
    if(322568 call _cond_test debugBlockDist[316580])
    {(322561 call writeln "Setting indices of Block domain:")(322566 call(409945 call . this[322489] c"dsiDisplayRepresentation"))
    }
  } function BlockDom[316773](?).dsiSetIndices[322579](arg _mt[322584]:_MT[238], arg this[322581]:BlockDom[316773](?) : BlockDom[316773](?), arg x[322577]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(322598 call _cond_test(322591 call !=(322587 call . x[322577] c"size")(409950 call . this[322581] c"rank")))
    {(322596 call compilerError "rank mismatch in domain assignment")
    }
    if(322619 call _cond_test(322612 call !=(322608 call .(322607 call x[322577] 0) c"idxType")(409956 call . this[322581] c"idxType")))
    {(322617 call compilerError "index type mismatch in domain assignment")
    }(322630 call(322625 call .(365455 call . this[322581] c"whole") c"setIndices") x[322577])(322634 call(409961 call . this[322581] c"setup"))
    if(322647 call _cond_test debugBlockDist[316580])
    {(322640 call writeln "Setting indices of Block domain:")(322645 call(409966 call . this[322581] c"dsiDisplayRepresentation"))
    }
  } function BlockDom[316773](?).dsiGetIndices[322656](arg _mt[322661]:_MT[238], arg this[322658]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method"
  {(322669 return(322668 call(322664 call .(365460 call . this[322658] c"whole") c"getIndices")))
  } function BlockDom[316773](?).dsiAssignDomain[322681](arg _mt[322690]:_MT[238], arg this[322687]:BlockDom[316773](?) : BlockDom[316773](?), arg rhs[322678] : _domain[125908](?), arg lhsPrivate[322684] : bool[10]) : _unknown[51] "method" "no return value for void"
  {(322696 call chpl_assignDomainWithGetSetIndices this[322687] rhs[322678])
  } function BlockDom[316773](?).dsiLocalSlice[322708](arg _mt[322715]:_MT[238], arg this[322712]:BlockDom[316773](?) : BlockDom[316773](?), param arg stridable[322705] : bool[10], arg ranges[322710]:_any[178](?)) : _unknown[51] "method"
  {(322722 return(322721 call(409974 call . this[322712] c"whole")(322719 'expand_tuple' ranges[322710])))
  } function BlockDom[316773](?).setup[322730](arg _mt[322735]:_MT[238], arg this[322732]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "no return value for void"
  {
    { unknown tmpIter[322779] "expr temp" "maybe ref" "no copy" "temp"(322782 'move' tmpIter[322779](322739 call .(365465 call . this[322732] c"dist") c"targetLocDom")) unknown isRngDomArr[322946] "maybe param" "temp"(322961 'move' isRngDomArr[322946](322959 call ||(322948 call isBoundedRange tmpIter[322779])(322957 call ||(322951 call isDomain tmpIter[322779])(322954 call isArray tmpIter[322779]))))
      if isRngDomArr[322946]
      { const _coforallCount[322818] "const" "end count" "temp"(322883 'move' _coforallCount[322818](322880 call _endCountAlloc 0)) unknown numTasks[322819] "temp"(322867 'move' numTasks[322819](322863 call . tmpIter[322779] c"size"))(322858 call _upEndCount _coforallCount[322818] 0 numTasks[322819]) unknown _indexOfInterest[322825] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[322826] "expr temp" "temp"(322835 'move' _iterator[322826](322833 call _getIterator tmpIter[322779]))
        Defer
        {
          {(322851 call _freeIterator _iterator[322826])
          }
        }
        { scopeless type(322840 'move' _indexOfInterest[322825](322837 call iteratorIndex _iterator[322826]))
        }
        ForLoop[322827]
        { unknown localeIdx[322844] "coforall index var" "index var" "insert auto destroy"(322846 'move' localeIdx[322844] _indexOfInterest[322825]) const tmp[322785] "const" "temp"(322787 'move' tmp[322785](322789 'deref'(322790 '_wide_get_locale'(322795 call(322792 call .(365480 call . this[322732] c"dist") c"targetLocales") localeIdx[322844]))))
          {(322803 call =(322805 call .(322807 call(409994 call . this[322732] c"locDoms") localeIdx[322844]) c"myBlock")(322814 call(322811 call .(365485 call . this[322732] c"dist") c"getChunk")(410000 call . this[322732] c"whole") localeIdx[322844]))(322820 call _downEndCount _coforallCount[322818] nil[44])(322798 'coforall on block' 0 tmp[322785])
          } label _continueLabel[322830] _indexOfInterest[322825] _iterator[322826]
        } label _breakLabel[322831]
        Defer
        {
          {(322870 call _endCountFree _coforallCount[322818])
          }
        }(322875 call _waitEndCount _coforallCount[322818] 0 numTasks[322819])
      }
      { const _coforallCount[322887] "const" "end count" "temp"(322943 'move' _coforallCount[322887](322940 call _endCountAlloc 0)) unknown _indexOfInterest[322894] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[322895] "expr temp" "temp"(322904 'move' _iterator[322895](322902 call _getIterator tmpIter[322779]))
        Defer
        {
          {(322920 call _freeIterator _iterator[322895])
          }
        }
        { scopeless type(322909 'move' _indexOfInterest[322894](322906 call iteratorIndex _iterator[322895]))
        }
        ForLoop[322896]
        { unknown localeIdx[322913] "coforall index var" "index var" "insert auto destroy"(322915 'move' localeIdx[322913] _indexOfInterest[322894])(322927 call _upEndCount _coforallCount[322887] 0) const tmp[322770] "const" "temp"(322772 'move' tmp[322770](322768 'deref'(322767 '_wide_get_locale'(322748 call(322743 call .(365470 call . this[322732] c"dist") c"targetLocales") localeIdx[322913]))))
          {(322764 call =(322753 call .(322752 call(409981 call . this[322732] c"locDoms") localeIdx[322913]) c"myBlock")(322763 call(322757 call .(365475 call . this[322732] c"dist") c"getChunk")(409987 call . this[322732] c"whole") localeIdx[322913]))(322889 call _downEndCount _coforallCount[322887] nil[44])(322775 'coforall on block' 0 tmp[322770])
          } label _continueLabel[322899] _indexOfInterest[322894] _iterator[322895]
        } label _breakLabel[322900]
        Defer
        {
          {(322931 call _endCountFree _coforallCount[322887])
          }
        }(322936 call _waitEndCount _coforallCount[322887] 0)
      }
    }
  } function BlockDom[316773](?).dsiDestroyDom[322971](arg _mt[322976]:_MT[238], arg this[322973]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[323007] "expr temp" "maybe ref" "no copy" "temp"(323010 'move' tmpIter[323007](322980 call .(365490 call . this[322973] c"dist") c"targetLocDom")) unknown isRngDomArr[323161] "maybe param" "temp"(323176 'move' isRngDomArr[323161](323174 call ||(323163 call isBoundedRange tmpIter[323007])(323172 call ||(323166 call isDomain tmpIter[323007])(323169 call isArray tmpIter[323007]))))
      if isRngDomArr[323161]
      { const _coforallCount[323033] "const" "end count" "temp"(323098 'move' _coforallCount[323033](323095 call _endCountAlloc 0)) unknown numTasks[323034] "temp"(323082 'move' numTasks[323034](323078 call . tmpIter[323007] c"size"))(323073 call _upEndCount _coforallCount[323033] 0 numTasks[323034]) unknown _indexOfInterest[323040] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323041] "expr temp" "temp"(323050 'move' _iterator[323041](323048 call _getIterator tmpIter[323007]))
        Defer
        {
          {(323066 call _freeIterator _iterator[323041])
          }
        }
        { scopeless type(323055 'move' _indexOfInterest[323040](323052 call iteratorIndex _iterator[323041]))
        }
        ForLoop[323042]
        { unknown localeIdx[323059] "coforall index var" "index var" "insert auto destroy"(323061 'move' localeIdx[323059] _indexOfInterest[323040]) const tmp[323013] "const" "temp"(323015 'move' tmp[323013](323017 'deref'(323018 '_wide_get_locale'(323020 call(410018 call . this[322973] c"locDoms") localeIdx[323059]))))
          {(323028 call chpl__delete(323030 call(410024 call . this[322973] c"locDoms") localeIdx[323059]))(323035 call _downEndCount _coforallCount[323033] nil[44])(323023 'coforall on block' 0 tmp[323013])
          } label _continueLabel[323045] _indexOfInterest[323040] _iterator[323041]
        } label _breakLabel[323046]
        Defer
        {
          {(323085 call _endCountFree _coforallCount[323033])
          }
        }(323090 call _waitEndCount _coforallCount[323033] 0 numTasks[323034])
      }
      { const _coforallCount[323102] "const" "end count" "temp"(323158 'move' _coforallCount[323102](323155 call _endCountAlloc 0)) unknown _indexOfInterest[323109] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323110] "expr temp" "temp"(323119 'move' _iterator[323110](323117 call _getIterator tmpIter[323007]))
        Defer
        {
          {(323135 call _freeIterator _iterator[323110])
          }
        }
        { scopeless type(323124 'move' _indexOfInterest[323109](323121 call iteratorIndex _iterator[323110]))
        }
        ForLoop[323111]
        { unknown localeIdx[323128] "coforall index var" "index var" "insert auto destroy"(323130 'move' localeIdx[323128] _indexOfInterest[323109])(323142 call _upEndCount _coforallCount[323102] 0) const tmp[322998] "const" "temp"(323000 'move' tmp[322998](322996 'deref'(322995 '_wide_get_locale'(322986 call(410006 call . this[322973] c"locDoms") localeIdx[323128]))))
          {(322992 call chpl__delete(322990 call(410012 call . this[322973] c"locDoms") localeIdx[323128]))(323104 call _downEndCount _coforallCount[323102] nil[44])(323003 'coforall on block' 0 tmp[322998])
          } label _continueLabel[323114] _indexOfInterest[323109] _iterator[323110]
        } label _breakLabel[323115]
        Defer
        {
          {(323146 call _endCountFree _coforallCount[323102])
          }
        }(323151 call _waitEndCount _coforallCount[323102] 0)
      }
    }
  } function BlockDom[316773](?).dsiMember[323188](arg _mt[323193]:_MT[238], arg this[323190]:BlockDom[316773](?) : BlockDom[316773](?), arg i[323186]:_any[178](?)) : _unknown[51] "method"
  {(323202 return(323201 call(323196 call .(365495 call . this[323190] c"whole") c"contains") i[323186]))
  } function BlockDom[316773](?).dsiIndexOrder[323212](arg _mt[323217]:_MT[238], arg this[323214]:BlockDom[316773](?) : BlockDom[316773](?), arg i[323210]:_any[178](?)) : _unknown[51] "method"
  {(323226 return(323225 call(323220 call .(365500 call . this[323214] c"whole") c"indexOrder") i[323210]))
  } function LocBlockDom[316802](?).contains[323236](arg _mt[323241]:_MT[238], arg this[323238]:LocBlockDom[316802](?) : LocBlockDom[316802](?), arg i[323234]:_any[178](?)) : _unknown[51] "method"
  {(323250 return(323249 call(323244 call .(365505 call . this[323238] c"myBlock") c"contains") i[323234]))
  } function BlockArr[316878](?).dsiDisplayRepresentation[323258](arg _mt[323263]:_MT[238], arg this[323260]:BlockArr[316878](?) : BlockArr[316878](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown _indexOfInterest[323371] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323372] "expr temp" "temp"(323381 'move' _iterator[323372](323379 call _getIterator(323270 call .(323267 call .(365510 call . this[323260] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(323398 call _freeIterator _iterator[323372])
        }
      }
      { scopeless type(323387 'move' _indexOfInterest[323371](323384 call iteratorIndex _iterator[323372]))
      }
      ForLoop[323373]
      { unknown tli[323391] "index var" "insert auto destroy"(323393 'move' tli[323391] _indexOfInterest[323371])
        {(323323 call writeln "locArr[" tli[323391] "].myElems = "(323319 for  e[323321]  in (323315 call .(323314 call(410035 call . this[323260] c"locArr") tli[323391]) c"myElems") do
          { e[323321]
          } ))
          if(323366 call _cond_test(410042 call . this[323260] c"doRADOpt"))
          {(323364 call writeln "locArr[" tli[323391] "].locRAD = "(323361 call .(323357 call postfix!(323354 call .(323351 call(410048 call . this[323260] c"locArr") tli[323391]) c"locRAD")) c"RAD"))
          }
        } label _continueLabel[323376] _indexOfInterest[323371] _iterator[323372]
      } label _breakLabel[323377]
    }
  } function BlockArr[316878](?).dsiGetBaseDom[323411](arg _mt[323416]:_MT[238], arg this[323413]:BlockArr[316878](?) : BlockArr[316878](?)) : _unknown[51] "method" "method overrides"
  {(323419 return(410054 call . this[323413] c"dom"))
  } function BlockArr[316878](?).setupRADOpt[323427](arg _mt[323432]:_MT[238], arg this[323429]:BlockArr[316878](?) : BlockArr[316878](?)) : _unknown[51] "method" "no return value for void"
  {
    { unknown _indexOfInterest[323613] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323614] "expr temp" "temp"(323623 'move' _iterator[323614](323621 call _getIterator(323439 call .(323436 call .(365515 call . this[323429] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(323640 call _freeIterator _iterator[323614])
        }
      }
      { scopeless type(323629 'move' _indexOfInterest[323613](323626 call iteratorIndex _iterator[323614]))
      }
      ForLoop[323615]
      { unknown localeIdx[323633] "index var" "insert auto destroy"(323635 'move' localeIdx[323633] _indexOfInterest[323613])
        { const tmp[323604] "const" "temp"(323606 'move' tmp[323604](323602 'deref'(323601 '_wide_get_locale'(323451 call(323446 call .(323443 call .(365520 call . this[323429] c"dom") c"dist") c"targetLocales") localeIdx[323633]))))
          {
            { const myLocArr[323456] "const"(323455 call(410060 call . this[323429] c"locArr") localeIdx[323633])(323459 'end of statement')
              if(323485 call _cond_test(323466 call !=(323462 call . myLocArr[323456] c"locRAD") nil[44]))
              {(323473 call chpl__delete(323469 call . myLocArr[323456] c"locRAD"))(323482 call =(323478 call . myLocArr[323456] c"locRAD") nil[44])
              }
              if(323597 call _cond_test disableBlockLazyRAD[316610])
              {(323511 call =(323491 call . myLocArr[323456] c"locRAD")(323496 'new'(_chpl_manager = unmanaged[220](?))(323510 call LocRADCache[408901](?)(410068 call . this[323429] c"eltType")(410073 call . this[323429] c"rank")(410078 call . this[323429] c"idxType")(410083 call . this[323429] c"stridable")(323507 call .(323504 call .(365529 call . this[323429] c"dom") c"dist") c"targetLocDom"))))
                { unknown _indexOfInterest[323563] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323564] "expr temp" "temp"(323573 'move' _iterator[323564](323571 call _getIterator(323520 call .(323517 call .(365534 call . this[323429] c"dom") c"dist") c"targetLocDom")))
                  Defer
                  {
                    {(323590 call _freeIterator _iterator[323564])
                    }
                  }
                  { scopeless type(323579 'move' _indexOfInterest[323563](323576 call iteratorIndex _iterator[323564]))
                  }
                  ForLoop[323565]
                  { unknown l[323583] "index var" "insert auto destroy"(323585 'move' l[323583] _indexOfInterest[323563])
                    {
                      if(323558 call _cond_test(323525 call != l[323583] localeIdx[323633]))
                      {(323554 call =(323538 call(323533 call .(323531 call postfix!(323528 call . myLocArr[323456] c"locRAD")) c"RAD") l[323583])(323553 call(323549 call .(323546 call .(323543 call .(323542 call(410091 call . this[323429] c"locArr") l[323583]) c"myElems") c"_value") c"dsiGetRAD")))
                      }
                    } label _continueLabel[323568] _indexOfInterest[323563] _iterator[323564]
                  } label _breakLabel[323569]
                }
              }
            }(323609 'on block' 0 tmp[323604])
          }
        } label _continueLabel[323618] _indexOfInterest[323613] _iterator[323614]
      } label _breakLabel[323619]
    }
  } function BlockArr[316878](?).dsiElementInitializationComplete[323653](arg _mt[323658]:_MT[238], arg this[323655]:BlockArr[316878](?) : BlockArr[316878](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[323698] "expr temp" "maybe ref" "no copy" "temp"(323701 'move' tmpIter[323698](323665 call .(323662 call .(365540 call . this[323655] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[323857] "maybe param" "temp"(323872 'move' isRngDomArr[323857](323870 call ||(323859 call isBoundedRange tmpIter[323698])(323868 call ||(323862 call isDomain tmpIter[323698])(323865 call isArray tmpIter[323698]))))
      if isRngDomArr[323857]
      { const _coforallCount[323729] "const" "end count" "temp"(323794 'move' _coforallCount[323729](323791 call _endCountAlloc 0)) unknown numTasks[323730] "temp"(323778 'move' numTasks[323730](323774 call . tmpIter[323698] c"size"))(323769 call _upEndCount _coforallCount[323729] 0 numTasks[323730]) unknown _indexOfInterest[323736] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323737] "expr temp" "temp"(323746 'move' _iterator[323737](323744 call _getIterator tmpIter[323698]))
        Defer
        {
          {(323762 call _freeIterator _iterator[323737])
          }
        }
        { scopeless type(323751 'move' _indexOfInterest[323736](323748 call iteratorIndex _iterator[323737]))
        }
        ForLoop[323738]
        { unknown localeIdx[323755] "coforall index var" "index var" "insert auto destroy"(323757 'move' localeIdx[323755] _indexOfInterest[323736]) const tmp[323704] "const" "temp"(323706 'move' tmp[323704](323708 'deref'(323709 '_wide_get_locale'(323711 call(410109 call . this[323655] c"locArr") localeIdx[323755]))))
          {
            {(323727 call(323719 call .(323721 call .(323723 call(410115 call . this[323655] c"locArr") localeIdx[323755]) c"myElems") c"dsiElementInitializationComplete"))
            }(323731 call _downEndCount _coforallCount[323729] nil[44])(323714 'coforall on block' 0 tmp[323704])
          } label _continueLabel[323741] _indexOfInterest[323736] _iterator[323737]
        } label _breakLabel[323742]
        Defer
        {
          {(323781 call _endCountFree _coforallCount[323729])
          }
        }(323786 call _waitEndCount _coforallCount[323729] 0 numTasks[323730])
      }
      { const _coforallCount[323798] "const" "end count" "temp"(323854 'move' _coforallCount[323798](323851 call _endCountAlloc 0)) unknown _indexOfInterest[323805] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323806] "expr temp" "temp"(323815 'move' _iterator[323806](323813 call _getIterator tmpIter[323698]))
        Defer
        {
          {(323831 call _freeIterator _iterator[323806])
          }
        }
        { scopeless type(323820 'move' _indexOfInterest[323805](323817 call iteratorIndex _iterator[323806]))
        }
        ForLoop[323807]
        { unknown localeIdx[323824] "coforall index var" "index var" "insert auto destroy"(323826 'move' localeIdx[323824] _indexOfInterest[323805])(323838 call _upEndCount _coforallCount[323798] 0) const tmp[323689] "const" "temp"(323691 'move' tmp[323689](323687 'deref'(323686 '_wide_get_locale'(323671 call(410097 call . this[323655] c"locArr") localeIdx[323824]))))
          {
            {(323683 call(323679 call .(323676 call .(323675 call(410103 call . this[323655] c"locArr") localeIdx[323824]) c"myElems") c"dsiElementInitializationComplete"))
            }(323800 call _downEndCount _coforallCount[323798] nil[44])(323694 'coforall on block' 0 tmp[323689])
          } label _continueLabel[323810] _indexOfInterest[323805] _iterator[323806]
        } label _breakLabel[323811]
        Defer
        {
          {(323842 call _endCountFree _coforallCount[323798])
          }
        }(323847 call _waitEndCount _coforallCount[323798] 0)
      }
    }
  } function BlockArr[316878](?).dsiElementDeinitializationComplete[323882](arg _mt[323887]:_MT[238], arg this[323884]:BlockArr[316878](?) : BlockArr[316878](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[323927] "expr temp" "maybe ref" "no copy" "temp"(323930 'move' tmpIter[323927](323894 call .(323891 call .(365545 call . this[323884] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[324086] "maybe param" "temp"(324101 'move' isRngDomArr[324086](324099 call ||(324088 call isBoundedRange tmpIter[323927])(324097 call ||(324091 call isDomain tmpIter[323927])(324094 call isArray tmpIter[323927]))))
      if isRngDomArr[324086]
      { const _coforallCount[323958] "const" "end count" "temp"(324023 'move' _coforallCount[323958](324020 call _endCountAlloc 0)) unknown numTasks[323959] "temp"(324007 'move' numTasks[323959](324003 call . tmpIter[323927] c"size"))(323998 call _upEndCount _coforallCount[323958] 0 numTasks[323959]) unknown _indexOfInterest[323965] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[323966] "expr temp" "temp"(323975 'move' _iterator[323966](323973 call _getIterator tmpIter[323927]))
        Defer
        {
          {(323991 call _freeIterator _iterator[323966])
          }
        }
        { scopeless type(323980 'move' _indexOfInterest[323965](323977 call iteratorIndex _iterator[323966]))
        }
        ForLoop[323967]
        { unknown localeIdx[323984] "coforall index var" "index var" "insert auto destroy"(323986 'move' localeIdx[323984] _indexOfInterest[323965]) const tmp[323933] "const" "temp"(323935 'move' tmp[323933](323937 'deref'(323938 '_wide_get_locale'(323940 call(410133 call . this[323884] c"locArr") localeIdx[323984]))))
          {
            {(323956 call(323948 call .(323950 call .(323952 call(410139 call . this[323884] c"locArr") localeIdx[323984]) c"myElems") c"dsiElementDeinitializationComplete"))
            }(323960 call _downEndCount _coforallCount[323958] nil[44])(323943 'coforall on block' 0 tmp[323933])
          } label _continueLabel[323970] _indexOfInterest[323965] _iterator[323966]
        } label _breakLabel[323971]
        Defer
        {
          {(324010 call _endCountFree _coforallCount[323958])
          }
        }(324015 call _waitEndCount _coforallCount[323958] 0 numTasks[323959])
      }
      { const _coforallCount[324027] "const" "end count" "temp"(324083 'move' _coforallCount[324027](324080 call _endCountAlloc 0)) unknown _indexOfInterest[324034] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[324035] "expr temp" "temp"(324044 'move' _iterator[324035](324042 call _getIterator tmpIter[323927]))
        Defer
        {
          {(324060 call _freeIterator _iterator[324035])
          }
        }
        { scopeless type(324049 'move' _indexOfInterest[324034](324046 call iteratorIndex _iterator[324035]))
        }
        ForLoop[324036]
        { unknown localeIdx[324053] "coforall index var" "index var" "insert auto destroy"(324055 'move' localeIdx[324053] _indexOfInterest[324034])(324067 call _upEndCount _coforallCount[324027] 0) const tmp[323918] "const" "temp"(323920 'move' tmp[323918](323916 'deref'(323915 '_wide_get_locale'(323900 call(410121 call . this[323884] c"locArr") localeIdx[324053]))))
          {
            {(323912 call(323908 call .(323905 call .(323904 call(410127 call . this[323884] c"locArr") localeIdx[324053]) c"myElems") c"dsiElementDeinitializationComplete"))
            }(324029 call _downEndCount _coforallCount[324027] nil[44])(323923 'coforall on block' 0 tmp[323918])
          } label _continueLabel[324039] _indexOfInterest[324034] _iterator[324035]
        } label _breakLabel[324040]
        Defer
        {
          {(324071 call _endCountFree _coforallCount[324027])
          }
        }(324076 call _waitEndCount _coforallCount[324027] 0)
      }
    }
  } function BlockArr[316878](?).dsiDestroyArr[324115](arg _mt[324120]:_MT[238], arg this[324117]:BlockArr[316878](?) : BlockArr[316878](?), arg deinitElts[324112] : bool[10]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[324184] "expr temp" "maybe ref" "no copy" "temp"(324187 'move' tmpIter[324184](324127 call .(324124 call .(365550 call . this[324117] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[324363] "maybe param" "temp"(324378 'move' isRngDomArr[324363](324376 call ||(324365 call isBoundedRange tmpIter[324184])(324374 call ||(324368 call isDomain tmpIter[324184])(324371 call isArray tmpIter[324184]))))
      if isRngDomArr[324363]
      { const _coforallCount[324235] "const" "end count" "temp"(324300 'move' _coforallCount[324235](324297 call _endCountAlloc 0)) unknown numTasks[324236] "temp"(324284 'move' numTasks[324236](324280 call . tmpIter[324184] c"size"))(324275 call _upEndCount _coforallCount[324235] 0 numTasks[324236]) unknown _indexOfInterest[324242] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[324243] "expr temp" "temp"(324252 'move' _iterator[324243](324250 call _getIterator tmpIter[324184]))
        Defer
        {
          {(324268 call _freeIterator _iterator[324243])
          }
        }
        { scopeless type(324257 'move' _indexOfInterest[324242](324254 call iteratorIndex _iterator[324243]))
        }
        ForLoop[324244]
        { unknown localeIdx[324261] "coforall index var" "index var" "insert auto destroy"(324263 'move' localeIdx[324261] _indexOfInterest[324242]) const tmp[324190] "const" "temp"(324192 'move' tmp[324190](324194 'deref'(324195 '_wide_get_locale'(324197 call(410159 call . this[324117] c"locArr") localeIdx[324261]))))
          {
            { unknown arr[324205](324207 call(410165 call . this[324117] c"locArr") localeIdx[324261])(324210 'end of statement')
              if(324212 call _cond_test deinitElts[324112])
              {(324217 call _deinitElements(324219 call . arr[324205] c"myElems"))
              }(324230 call(324224 call .(324226 call . arr[324205] c"myElems") c"dsiElementDeinitializationComplete"))(324232 call chpl__delete arr[324205])
            }(324237 call _downEndCount _coforallCount[324235] nil[44])(324200 'coforall on block' 0 tmp[324190])
          } label _continueLabel[324247] _indexOfInterest[324242] _iterator[324243]
        } label _breakLabel[324248]
        Defer
        {
          {(324287 call _endCountFree _coforallCount[324235])
          }
        }(324292 call _waitEndCount _coforallCount[324235] 0 numTasks[324236])
      }
      { const _coforallCount[324304] "const" "end count" "temp"(324360 'move' _coforallCount[324304](324357 call _endCountAlloc 0)) unknown _indexOfInterest[324311] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[324312] "expr temp" "temp"(324321 'move' _iterator[324312](324319 call _getIterator tmpIter[324184]))
        Defer
        {
          {(324337 call _freeIterator _iterator[324312])
          }
        }
        { scopeless type(324326 'move' _indexOfInterest[324311](324323 call iteratorIndex _iterator[324312]))
        }
        ForLoop[324313]
        { unknown localeIdx[324330] "coforall index var" "index var" "insert auto destroy"(324332 'move' localeIdx[324330] _indexOfInterest[324311])(324344 call _upEndCount _coforallCount[324304] 0) const tmp[324175] "const" "temp"(324177 'move' tmp[324175](324173 'deref'(324172 '_wide_get_locale'(324133 call(410145 call . this[324117] c"locArr") localeIdx[324330]))))
          {
            { unknown arr[324138](324137 call(410151 call . this[324117] c"locArr") localeIdx[324330])(324141 'end of statement')
              if(324152 call _cond_test deinitElts[324112])
              {(324150 call _deinitElements(324146 call . arr[324138] c"myElems"))
              }(324165 call(324161 call .(324158 call . arr[324138] c"myElems") c"dsiElementDeinitializationComplete"))(324169 call chpl__delete arr[324138])
            }(324306 call _downEndCount _coforallCount[324304] nil[44])(324180 'coforall on block' 0 tmp[324175])
          } label _continueLabel[324316] _indexOfInterest[324311] _iterator[324312]
        } label _breakLabel[324317]
        Defer
        {
          {(324348 call _endCountFree _coforallCount[324304])
          }
        }(324353 call _waitEndCount _coforallCount[324304] 0)
      }
    }
  } function BlockArr[316878](?).dsiLocalAccess[324395](arg _mt[324400]:_MT[238], arg this[324397]:BlockArr[316878](?) : BlockArr[316878](?), arg i[324392] :(324390 call *(410173 call . this[324397] c"rank")(410178 call . this[324397] c"idxType"))) ref : _unknown[51] "inline" "method"
  {(324414 return(324413 call(324408 call .(324405 call _to_nonnil(410183 call . this[324397] c"myLocArr")) c"this") i[324392]))
  } function BlockArr[316878](?).dsiAccess[324429](arg _mt[324434]:_MT[238], arg this[324431]:BlockArr[316878](?) : BlockArr[316878](?), const in arg idx[324426] :(324424 call *(410189 call . this[324431] c"rank")(410194 call . this[324431] c"idxType"))) ref : _unknown[51] "inline" "method"
  {
    {
      {
        if(324467 call _cond_test(324453 call &&(324438 call !=(410199 call . this[324431] c"myLocArr") nil[44])(324452 call(324447 call .(324444 call .(324443 call _to_nonnil(410204 call . this[324431] c"myLocArr")) c"locDom") c"contains") idx[324426])))
        {(324465 return(324464 call(324459 call .(324458 call _to_nonnil(410210 call . this[324431] c"myLocArr")) c"this") idx[324426]))
        }
      }(324475 'local block')
    }(324481 return(324480 call(410217 call . this[324431] c"nonLocalAccess") idx[324426]))
  } function BlockArr[316878](?).dsiBoundsCheck[324495](arg _mt[324500]:_MT[238], arg this[324497]:BlockArr[316878](?) : BlockArr[316878](?), arg i[324492] :(324490 call *(410223 call . this[324497] c"rank")(410228 call . this[324497] c"idxType"))) : _unknown[51] "inline" "method"
  {(324509 return(324508 call(324503 call .(365559 call . this[324497] c"dom") c"dsiMember") i[324492]))
  } function BlockArr[316878](?).nonLocalAccess[324524](arg _mt[324529]:_MT[238], arg this[324526]:BlockArr[316878](?) : BlockArr[316878](?), arg i[324521] :(324519 call *(410234 call . this[324526] c"rank")(410239 call . this[324526] c"idxType"))) ref : _unknown[51] "method" "fn unordered safe"
  {
    if(324817 call _cond_test(410244 call . this[324526] c"doRADOpt"))
    {
      if(324812 call _cond_test(324535 call . this[324526] c"myLocArr"))
      { const myLocArr[324545] "const"(324544 call _to_nonnil(324540 call . this[324526] c"myLocArr"))(324548 'end of statement') unknown rlocIdx[324562](324561 call(324556 call .(324551 call .(365566 call . this[324526] c"dom") c"dist") c"targetLocsIdx") i[324521])(324565 'end of statement')
        if(324748 call _cond_test(324567 call ! disableBlockLazyRAD[316610]))
        {
          if(324651 call _cond_test(324574 call ==(324570 call . myLocArr[324545] c"locRAD") nil[44]))
          {(324586 call(324582 call .(324579 call . myLocArr[324545] c"locRADLock") c"lock"))
            if(324637 call _cond_test(324594 call ==(324590 call . myLocArr[324545] c"locRAD") nil[44]))
            { unknown tempLocRAD[324613](324598 'new'(_chpl_manager = unmanaged[220](?))(324612 call LocRADCache[408901](?)(410252 call . this[324526] c"eltType")(410257 call . this[324526] c"rank")(410262 call . this[324526] c"idxType")(410267 call . this[324526] c"stridable")(324609 call .(324606 call .(365574 call . this[324526] c"dom") c"dist") c"targetLocDom")))(324616 'end of statement')(324626 call =(324622 call .(324619 call . tempLocRAD[324613] c"RAD") c"blk")(410274 call . this[324526] c"SENTINEL"))(324634 call =(324630 call . myLocArr[324545] c"locRAD") tempLocRAD[324613])
            }(324649 call(324645 call .(324642 call . myLocArr[324545] c"locRADLock") c"unlock"))
          } const locRAD[324663] "const"(324662 call _to_nonnil(324658 call . myLocArr[324545] c"locRAD"))(324666 'end of statement')
          if(324744 call _cond_test(324678 call ==(324674 call .(324673 call(324668 call . locRAD[324663] c"RAD") rlocIdx[324562]) c"blk")(410281 call . this[324526] c"SENTINEL")))
          {(324688 call(324683 call . locRAD[324663] c"lockRAD") rlocIdx[324562])
            if(324730 call _cond_test(324702 call ==(324698 call .(324697 call(324692 call . locRAD[324663] c"RAD") rlocIdx[324562]) c"blk")(410288 call . this[324526] c"SENTINEL")))
            {(324726 call =(324710 call(324705 call . locRAD[324663] c"RAD") rlocIdx[324562])(324725 call(324721 call .(324718 call .(324715 call .(324714 call(410294 call . this[324526] c"locArr") rlocIdx[324562]) c"myElems") c"_value") c"dsiGetRAD")))
            }(324742 call(324737 call . locRAD[324663] c"unlockRAD") rlocIdx[324562])
          }
        } unknown myLocRAD[324756] "no auto destroy" "no copy"(324753 call . myLocArr[324545] c"locRAD")(324759 'end of statement') unknown radata[324767] "no auto destroy" "no copy"(324764 call .(324763 call _to_nonnil myLocRAD[324756]) c"RAD")(324770 'end of statement')
        if(324808 call _cond_test(324779 call !=(324775 call .(324774 call radata[324767] rlocIdx[324562]) c"shiftedData") nil[44]))
        { unknown dataIdx[324791](324790 call(324785 call .(324784 call radata[324767] rlocIdx[324562]) c"getDataIndex") i[324521])(324794 'end of statement')(324806 return(324805 call(324800 call .(324799 call radata[324767] rlocIdx[324562]) c"getDataElem") dataIdx[324791]))
        }
      }
    }(324838 return(324837 call(324834 call(410310 call . this[324526] c"locArr")(324832 call(324827 call .(324824 call .(365589 call . this[324526] c"dom") c"dist") c"targetLocsIdx") i[324521])) i[324521]))
  } function BlockArr[316878](?).dsiAccess[324851](arg _mt[324856]:_MT[238], arg this[324853]:BlockArr[316878](?) : BlockArr[316878](?), arg i[324847] ... :(410317 call . this[324853] c"idxType")) ref : _unknown[51] "method"
  {(324862 return(324861 call(410326 call . this[324853] c"dsiAccess") i[324847]))
  } function BlockArr[316878](?).these[324870](arg _mt[324875]:_MT[238], arg this[324872]:BlockArr[316878](?) : BlockArr[316878](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[324885] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[324886] "expr temp" "temp"(324895 'move' _iterator[324886](324893 call _getIterator(410332 call . this[324872] c"dom")))
      Defer
      {
        {(324911 call _freeIterator _iterator[324886])
        }
      }
      { scopeless type(324900 'move' _indexOfInterest[324885](324897 call iteratorIndex _iterator[324886]))
      }
      ForLoop[324887]
      { unknown i[324904] "index var" "insert auto destroy"(324906 'move' i[324904] _indexOfInterest[324885])(324883 yield(324882 call(410336 call . this[324872] c"dsiAccess") i[324904])) label _continueLabel[324890] _indexOfInterest[324885] _iterator[324886]
      } label _breakLabel[324891]
    }
  } function BlockArr[316878](?).these[324928](arg _mt[324933]:_MT[238], arg this[324930]:BlockArr[316878](?) : BlockArr[316878](?), param arg tag[324925] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[324953] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[324954] "expr temp" "temp"(324963 'move' _iterator[324954](324961 call _getIterator(324949 call(324944 call .(365595 call . this[324930] c"dom") c"these") tag[324925])))
      Defer
      {
        {(324980 call _freeIterator _iterator[324954])
        }
      }
      { scopeless type(324969 'move' _indexOfInterest[324953](324966 call iteratorIndex _iterator[324954]))
      }
      ForLoop[324955]
      { unknown followThis[324973] "index var" "insert auto destroy"(324975 'move' followThis[324973] _indexOfInterest[324953])(324951 yield followThis[324973]) label _continueLabel[324958] _indexOfInterest[324953] _iterator[324954]
      } label _breakLabel[324959]
    }
  }
  {(324940 call == tag[324925] leader[447])
  } function BlockArr[316878](?).dsiStaticFastFollowCheck[324996](arg _mt[325001]:_MT[238], arg this[324998]:BlockArr[316878](?) : BlockArr[316878](?), arg leadType[324994]:_any[178](?)) param : _unknown[51] "method" "method overrides"
  {
    if(325054 call _cond_test(354974 'is_subtype' BlockArr[409893](?) leadType[324994]))
    { unknown x[325010](325009 'to nilable class from type' leadType[324994])(325013 'end of statement')(325035 return(325033 call ==(325024 call _to_borrowed(325022 'typeof'(325019 call .(325017 call postfix! x[325010]) c"dom")))(325032 call _to_borrowed(325030 'typeof'(325027 call . this[324998] c"dom")))))
    }
    {(325051 return(325049 call ==(325040 call _to_borrowed leadType[324994])(325048 call _to_borrowed(325046 'typeof'(325043 call . this[324998] c"dom")))))
    }
  } function BlockArr[316878](?).dsiDynamicFastFollowCheck[325070](arg _mt[325075]:_MT[238], arg this[325072]:BlockArr[316878](?) : BlockArr[316878](?), arg lead[325067] :(325064 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method"
  {(325087 return(325086 call(325078 call . this[325072] c"dsiDynamicFastFollowCheck")(325082 call . lead[325067] c"_dom")))
  } function BlockArr[316878](?).dsiDynamicFastFollowCheck[325099](arg _mt[325104]:_MT[238], arg this[325101]:BlockArr[316878](?) : BlockArr[316878](?), arg lead[325096] : _domain[125908](?)) : _unknown[51] "method"
  {(325140 return(325138 call &&(325121 call(325110 call .(325107 call . lead[325096] c"dist") c"dsiEqualDMaps")(325117 call .(325114 call . this[325101] c"dom") c"dist"))(325136 call ==(325126 call .(325123 call . lead[325096] c"_value") c"whole")(325133 call .(325130 call . this[325101] c"dom") c"whole"))))
  } function BlockArr[316878](?).these[325152](arg _mt[325165]:_MT[238], arg this[325162]:BlockArr[316878](?) : BlockArr[316878](?), param arg tag[325149] : iterKind[453], arg followThis[325154]:_any[178](?), param arg fast[325158] : bool[10] = 0) ref : _unknown[51] "iterator fn" "method"
  { function anyStridable[325178](arg rangeTuple[325176]:_any[178](?), param arg i[325182] : int(64)[13] = 0) param : _unknown[51]
    {(325223 return(325220 IfExpr (325194 call == i[325182](325192 call -(325188 call . rangeTuple[325176] c"size") 1)) then
      { scopeless(325200 call .(325199 call rangeTuple[325176] i[325182]) c"stridable")
      } else
      { scopeless(325218 call ||(325207 call .(325206 call rangeTuple[325176] i[325182]) c"stridable")(325217 call anyStridable rangeTuple[325176](325215 call + i[325182] 1)))
      } ))
    }
    if(325282 call _cond_test chpl__testParFlag[188346])
    {
      if(325275 call _cond_test fast[325158])
      {(325251 call chpl__testParWriteln "Block array fast follower invoked on " followThis[325154])
      }
      {(325273 call chpl__testParWriteln "Block array non-fast follower invoked on " followThis[325154])
      }
    }
    if(325346 call _cond_test testFastFollowerOptimization[316605])
    {(325344 call writeln(325341 call +(325321 IfExpr  fast[325158] then
      { scopeless "fast"
      } else
      { scopeless "regular"
      } ) " follower invoked for Block array"))
    } unknown myFollowThis[325367](325365 call *(410367 call . this[325162] c"rank")(325364 call range[64319](?)(idxType =(410373 call . this[325162] c"idxType"))(stridable =(325361 call ||(410378 call . this[325162] c"stridable")(325360 call anyStridable followThis[325154])))))(325370 'end of statement') unknown lowIdx[325375](325373 call *(410384 call . this[325162] c"rank")(410389 call . this[325162] c"idxType"))(325378 'end of statement')
    { unknown i[325506] 0 unknown tmp[325507] "maybe param" "temp"(325519 'move' tmp[325507](325517 call chpl_compute_low_param_loop_bound 0(325382 call -(410394 call . this[325162] c"rank") 1))) unknown tmp[325508] "maybe param" "temp"(325529 'move' tmp[325508](325527 call chpl_compute_high_param_loop_bound 0(325524 call -(410430 call . this[325162] c"rank") 1))) unknown tmp[325509] "maybe param" "temp"(325532 'move' tmp[325509] 1)
      ParamForLoop[325534]
      { i[325506] tmp[325507] tmp[325508] tmp[325509]
        { unknown stride[325399](325396 call .(325395 call(325390 call .(325387 call .(365610 call . this[325162] c"dom") c"whole") c"dim") i[325506]) c"stride")(325402 'end of statement') unknown low[325420](325418 call *(325408 call .(325407 call followThis[325154] i[325506]) c"low")(325416 call _cast(410403 call . this[325162] c"idxType")(325414 call abs stride[325399])))(325423 'end of statement') unknown high[325440](325438 call *(325428 call .(325427 call followThis[325154] i[325506]) c"high")(325436 call _cast(410411 call . this[325162] c"idxType")(325434 call abs stride[325399])))(325443 'end of statement')(325489 call =(325447 call myFollowThis[325367] i[325506])(325488 call(325479 call .(325477 call chpl_by(325468 call +(325453 call chpl_by(325450 call chpl_build_bounded_range low[325420] high[325440]) stride[325399])(325465 call .(325464 call(325459 call .(325456 call .(365615 call . this[325162] c"dom") c"whole") c"dim") i[325506]) c"alignedLow"))(325474 call .(325473 call followThis[325154] i[325506]) c"stride")) c"safeCast")(325486 'typeof'(325485 call myFollowThis[325367] i[325506]))))(325503 call =(325495 call lowIdx[325375] i[325506])(325500 call .(325499 call myFollowThis[325367] i[325506]) c"low"))
        }
      } label _unused_continueLabel[325511] label _breakLabel[325510]
    } const myFollowThisDom[325548] "const"(325546 call chpl__buildDomainExpr(325544 'expand_tuple' myFollowThis[325367]))(325551 'end of statement')
    if(325707 call _cond_test fast[325158])
    { unknown arrSection[325566](325565 call(410437 call . this[325162] c"locArr")(325563 call(325558 call .(325555 call .(365620 call . this[325162] c"dom") c"dist") c"targetLocsIdx") lowIdx[325375]))(325569 'end of statement')
      if(325590 call _cond_test(325580 call !=(325575 '_wide_get_node' arrSection[325566])(325577 call .(365623 call here[90438]) c"id")))
      {(325587 call = arrSection[325566](325586 call _to_nonnil(410445 call . this[325162] c"myLocArr")))
      }
      {
        { const narrowArrSection[325604] "const"(325602 call _cast(325601 'to nilable class from type'(325600 'typeof' arrSection[325566]))(325598 '_wide_get_addr' arrSection[325566]))(325607 'end of statement') unknown myElems[325616] "ref var"(325613 call .(325612 call _to_nonnil narrowArrSection[325604]) c"myElems")(325619 'end of statement')
          { unknown _indexOfInterest[325628] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[325629] "expr temp" "temp"(325638 'move' _iterator[325629](325636 call _getIterator myFollowThisDom[325548]))
            Defer
            {
              {(325654 call _freeIterator _iterator[325629])
              }
            }
            { scopeless type(325643 'move' _indexOfInterest[325628](325640 call iteratorIndex _iterator[325629]))
            }
            ForLoop[325630]
            { unknown i[325647] "index var" "insert auto destroy"(325649 'move' i[325647] _indexOfInterest[325628])(325626 yield(325625 call myElems[325616] i[325647])) label _continueLabel[325633] _indexOfInterest[325628] _iterator[325629]
            } label _breakLabel[325634]
          }
        }(325663 'local block')
      }
    }
    {
      { unknown _indexOfInterest[325673] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[325674] "expr temp" "temp"(325683 'move' _iterator[325674](325681 call _getIterator myFollowThisDom[325548]))
        Defer
        {
          {(325699 call _freeIterator _iterator[325674])
          }
        }
        { scopeless type(325688 'move' _indexOfInterest[325673](325685 call iteratorIndex _iterator[325674]))
        }
        ForLoop[325675]
        { unknown i[325692] "index var" "insert auto destroy"(325694 'move' i[325692] _indexOfInterest[325673])
          {(325670 yield(325669 call(410456 call . this[325162] c"dsiAccess") i[325692]))
          } label _continueLabel[325678] _indexOfInterest[325673] _iterator[325674]
        } label _breakLabel[325679]
      }
    }
  }
  {(325172 call == tag[325149] follower[449])
  } function BlockArr[316878](?).dsiSerialRead[325719](arg _mt[325724]:_MT[238], arg this[325721]:BlockArr[316878](?) : BlockArr[316878](?), arg f[325717]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(325730 call chpl_serialReadWriteRectangular f[325717] this[325721])
  } function BlockArr[316878](?).dsiSerialWrite[325740](arg _mt[325745]:_MT[238], arg this[325742]:BlockArr[316878](?) : BlockArr[316878](?), arg f[325738]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(325751 call chpl_serialReadWriteRectangular f[325738] this[325742])
  } function BlockArr[316878](?).dsiLocalSlice[325761](arg _mt[325766]:_MT[238], arg this[325763]:BlockArr[316878](?) : BlockArr[316878](?), arg ranges[325759]:_any[178](?)) : _unknown[51] "method" "no copy return"
  { unknown low[325772](325770 call *(410466 call . this[325763] c"rank")(410471 call . this[325763] c"idxType"))(325775 'end of statement')
    { unknown i[325799] 0 unknown tmp[325800] "maybe param" "temp"(325812 'move' tmp[325800](325810 call chpl_compute_low_param_loop_bound 0(325780 call -(410476 call . this[325763] c"rank") 1))) unknown tmp[325801] "maybe param" "temp"(325822 'move' tmp[325801](325820 call chpl_compute_high_param_loop_bound 0(325817 call -(410485 call . this[325763] c"rank") 1))) unknown tmp[325802] "maybe param" "temp"(325825 'move' tmp[325802] 1)
      ParamForLoop[325827]
      { i[325799] tmp[325800] tmp[325801] tmp[325802]
        {(325795 call =(325787 call low[325772] i[325799])(325792 call .(325791 call ranges[325759] i[325799]) c"alignedLow"))
        }
      } label _unused_continueLabel[325804] label _breakLabel[325803]
    }(325856 return(325855 call(325849 call .(325848 call(410490 call . this[325763] c"locArr")(325846 call(325841 call .(325838 call .(365627 call . this[325763] c"dom") c"dist") c"targetLocsIdx") low[325772])) c"myElems")(325853 'expand_tuple' ranges[325759])))
  } function _extendTuple[325864](arg t[325862]:_any[178](?), arg idx[325867] : _tuple[56202](?), arg args[325870]:_any[178](?)) : _unknown[51]
  { unknown tup[325879](325877 call *(325873 call . args[325870] c"size") t[325862])(325882 'end of statement') unknown j[325886] 1 int(64)[13](325889 'end of statement')
    { unknown i[325941] 0 unknown tmp[325942] "maybe param" "temp"(325954 'move' tmp[325942](325952 call chpl_compute_low_param_loop_bound 0(325896 call -(325892 call . args[325870] c"size") 1))) unknown tmp[325943] "maybe param" "temp"(325967 'move' tmp[325943](325965 call chpl_compute_high_param_loop_bound 0(325959 call -(325961 call . args[325870] c"size") 1))) unknown tmp[325944] "maybe param" "temp"(325970 'move' tmp[325944] 1)
      ParamForLoop[325972]
      { i[325941] tmp[325942] tmp[325943] tmp[325944]
        {
          if(325935 call _cond_test(325906 call isCollapsedDimension(325904 call args[325870] i[325941])))
          {(325915 call =(325910 call tup[325879] i[325941])(325914 call args[325870] i[325941]))
          }
          {(325926 call =(325921 call tup[325879] i[325941])(325925 call idx[325867] j[325886]))(325932 call += j[325886] 1)
          }
        }
      } label _unused_continueLabel[325946] label _breakLabel[325945]
    }(325982 return tup[325879])
  } function _extendTuple[325990](arg t[325988]:_any[178](?), arg idx[325992]:_any[178](?), arg args[325994]:_any[178](?)) : _unknown[51]
  { unknown tup[326003](326001 call *(325997 call . args[325994] c"size") t[325988])(326006 'end of statement') unknown idxTup[326011](326009 call _build_tuple idx[325992])(326014 'end of statement') unknown j[326017] 1 int(64)[13](326020 'end of statement')
    { unknown i[326072] 0 unknown tmp[326073] "maybe param" "temp"(326085 'move' tmp[326073](326083 call chpl_compute_low_param_loop_bound 0(326027 call -(326023 call . args[325994] c"size") 1))) unknown tmp[326074] "maybe param" "temp"(326098 'move' tmp[326074](326096 call chpl_compute_high_param_loop_bound 0(326090 call -(326092 call . args[325994] c"size") 1))) unknown tmp[326075] "maybe param" "temp"(326101 'move' tmp[326075] 1)
      ParamForLoop[326103]
      { i[326072] tmp[326073] tmp[326074] tmp[326075]
        {
          if(326066 call _cond_test(326037 call isCollapsedDimension(326035 call args[325994] i[326072])))
          {(326046 call =(326041 call tup[326003] i[326072])(326045 call args[325994] i[326072]))
          }
          {(326057 call =(326052 call tup[326003] i[326072])(326056 call idxTup[326011] j[326017]))(326063 call += j[326017] 1)
          }
        }
      } label _unused_continueLabel[326077] label _breakLabel[326076]
    }(326113 return tup[326003])
  } function BlockArr[316878](?).dsiReallocate[326135](arg _mt[326140]:_MT[238], arg this[326137]:BlockArr[316878](?) : BlockArr[316878](?), arg bounds[326132] :(326130 call *(410525 call . this[326137] c"rank")(326129 call range[64319](?)(410531 call . this[326137] c"idxType") bounded[64208](410536 call . this[326137] c"stridable")))) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function BlockArr[316878](?).dsiPostReallocate[326148](arg _mt[326153]:_MT[238], arg this[326150]:BlockArr[316878](?) : BlockArr[316878](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    if(326160 call _cond_test(410541 call . this[326150] c"doRADOpt"))
    {(326158 call(410545 call . this[326150] c"setupRADOpt"))
    }
  } function BlockArr[316878](?).setRADOpt[326175](arg _mt[326180]:_MT[238], arg this[326177]:BlockArr[316878](?) : BlockArr[316878](?), arg val[326172] = 1) : _unknown[51] "method" "no return value for void"
  {(326184 call =(410550 call . this[326177] c"doRADOpt") val[326172])
    if(326193 call _cond_test(410556 call . this[326177] c"doRADOpt"))
    {(326191 call(410560 call . this[326177] c"setupRADOpt"))
    }
  } function LocBlockArr[317094](?).this[326205](arg _mt[326210]:_MT[238], arg this[326207]:LocBlockArr[317094](?) : LocBlockArr[317094](?), arg i[326203]:_any[178](?)) ref : _unknown[51] "inline" "method"
  {(326216 return(326215 call(410565 call . this[326207] c"myElems") i[326203]))
  } function BlockDom[316773](?).dsiSupportsAutoLocalAccess[326224](arg _mt[326229]:_MT[238], arg this[326226]:BlockDom[316773](?) : BlockDom[316773](?)) param : _unknown[51] "method" "method overrides"
  {(326232 return 1)
  } function Block[316693](?).init[326244](arg _mt[326272]:_MT[238], arg this[326269]:Block[316693](?) : Block[316693](?), arg other[326241] : Block[408851](?), arg privateData[326246]:_any[178](?), param arg rank[326252] =(326249 call . other[326241] c"rank"), arg idxType[326259]:_any[178](?) =(326256 call . other[326241] c"idxType"), arg sparseLayoutType[326266]:_any[178](?) =(326263 call . other[326241] c"sparseLayoutType")) : _unknown[51] "method" "no return value for void"
  {(326279 call =(326275 call . this[326269] c"rank") rank[326252])(326288 call =(326284 call . this[326269] c"idxType") idxType[326259])(326300 call =(410574 call . this[326269] c"boundingBox")(326298 call chpl__buildDomainExpr(326296 'expand_tuple'(326295 call privateData[326246] 0))))(326312 call =(410580 call . this[326269] c"targetLocDom")(326310 call chpl__buildDomainExpr(326308 'expand_tuple'(326307 call privateData[326246] 1))))(326320 call =(410586 call . this[326269] c"targetLocales")(326317 call . other[326241] c"targetLocales"))(326328 call =(410591 call . this[326269] c"locDist")(326325 call . other[326241] c"locDist"))(326336 call =(410596 call . this[326269] c"dataParTasksPerLocale")(326335 call privateData[326246] 2))(326344 call =(410602 call . this[326269] c"dataParIgnoreRunningTasks")(326343 call privateData[326246] 3))(326352 call =(410608 call . this[326269] c"dataParMinGranularity")(326351 call privateData[326246] 4))(326360 call =(326356 call . this[326269] c"sparseLayoutType") sparseLayoutType[326266])
  } function Block[316693](?).dsiSupportsPrivatization[326368](arg _mt[326373]:_MT[238], arg this[326370]:Block[316693](?) : Block[316693](?)) param : _unknown[51] "method" "method overrides"
  {(326376 return 1)
  } function Block[316693](?).dsiGetPrivatizeData[326384](arg _mt[326389]:_MT[238], arg this[326386]:Block[316693](?) : Block[316693](?)) : _unknown[51] "method"
  {(326409 return(326407 call _build_tuple(326396 call(326392 call .(365647 call . this[326386] c"boundingBox") c"dims"))(326402 call(326398 call .(365652 call . this[326386] c"targetLocDom") c"dims"))(410615 call . this[326386] c"dataParTasksPerLocale")(410620 call . this[326386] c"dataParIgnoreRunningTasks")(410625 call . this[326386] c"dataParMinGranularity")))
  } function Block[316693](?).dsiPrivatize[326419](arg _mt[326424]:_MT[238], arg this[326421]:Block[316693](?) : Block[316693](?), arg privatizeData[326417]:_any[178](?)) : _unknown[51] "method"
  {(326437 return(326428 'new'(_chpl_manager = unmanaged[220](?))(326436 call Block[408851](?)(326433 call _to_unmanaged this[326421]) privatizeData[326417])))
  } function Block[316693](?).dsiGetReprivatizeData[326445](arg _mt[326450]:_MT[238], arg this[326447]:Block[316693](?) : Block[316693](?)) : _unknown[51] "method"
  {(326458 return(326457 call(326453 call .(365657 call . this[326447] c"boundingBox") c"dims")))
  } function Block[316693](?).dsiReprivatize[326468](arg _mt[326475]:_MT[238], arg this[326472]:Block[316693](?) : Block[316693](?), arg other[326466]:_any[178](?), arg reprivatizeData[326470]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(326483 call =(410633 call . this[326472] c"boundingBox")(326481 call chpl__buildDomainExpr(326479 'expand_tuple' reprivatizeData[326470])))(326492 call =(410639 call . this[326472] c"targetLocDom")(326489 call . other[326466] c"targetLocDom"))(326500 call =(410644 call . this[326472] c"targetLocales")(326497 call . other[326466] c"targetLocales"))(326508 call =(410649 call . this[326472] c"locDist")(326505 call . other[326466] c"locDist"))(326516 call =(410654 call . this[326472] c"dataParTasksPerLocale")(326513 call . other[326466] c"dataParTasksPerLocale"))(326524 call =(410659 call . this[326472] c"dataParIgnoreRunningTasks")(326521 call . other[326466] c"dataParIgnoreRunningTasks"))(326532 call =(410664 call . this[326472] c"dataParMinGranularity")(326529 call . other[326466] c"dataParMinGranularity"))
  } function BlockDom[316773](?).chpl__serialize[326540](arg _mt[326545]:_MT[238], arg this[326542]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method"
  {(326548 return(410669 call . this[326542] c"pid"))
  } function BlockDom[415355](?).chpl__deserialize[326558](arg _mt[326563]:_MT[238], arg this[326560]:BlockDom[415355](?), arg data[326556]:_any[178](?)) : _unknown[51] "method"
  {(326593 return(326592 call chpl_getPrivatizedCopy(326588 call unmanaged BlockDom[415580](?)(rank =(326568 call . this[326560] c"rank"))(idxType =(326574 call . this[326560] c"idxType"))(stridable =(326579 call . this[326560] c"stridable"))(sparseLayoutType =(326584 call . this[326560] c"sparseLayoutType"))) data[326556]))
  } function BlockDom[316773](?).dsiSupportsPrivatization[326601](arg _mt[326606]:_MT[238], arg this[326603]:BlockDom[316773](?) : BlockDom[316773](?)) param : _unknown[51] "method" "method overrides"
  {(326609 return 1)
  } type BlockDomPrvData[326628](?) unknown distpid[326615] unknown dims[326619] unknown locdoms[326623] function BlockDom[316773](?).dsiGetPrivatizeData[326634](arg _mt[326639]:_MT[238], arg this[326636]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method"
  {(326656 return(326641 'new'(326655 call BlockDomPrvData[326628](?)(326644 call .(365672 call . this[326636] c"dist") c"pid")(326653 call(326649 call .(365677 call . this[326636] c"whole") c"dims"))(410677 call . this[326636] c"locDoms"))))
  } function BlockDom[316773](?).dsiPrivatize[326666](arg _mt[326671]:_MT[238], arg this[326668]:BlockDom[316773](?) : BlockDom[316773](?), arg privatizeData[326664]:_any[178](?)) : _unknown[51] "method"
  { unknown privdist[326684](326683 call chpl_getPrivatizedCopy(326675 'typeof'(410682 call . this[326668] c"dist"))(326680 call . privatizeData[326664] c"distpid"))(326687 'end of statement') unknown locDomsTemp[326711](326708 call . privatizeData[326664] c"locdoms")(326703 call chpl__buildArrayRuntimeType(326701 call chpl__ensureDomainExpr(326690 call . privdist[326684] c"targetLocDom"))(326699 call unmanaged LocBlockDom[415577](?)(410688 call . this[326668] c"rank")(410693 call . this[326668] c"idxType")(410698 call . this[326668] c"stridable")))(326714 'end of statement') const c[326738] "const"(326717 'new'(_chpl_manager = unmanaged[220](?))(326737 call BlockDom[408874](?)(410704 call . this[326668] c"rank")(410709 call . this[326668] c"idxType")(410714 call . this[326668] c"stridable")(326724 call . privdist[326684] c"sparseLayoutType") privdist[326684] locDomsTemp[326711](326735 call chpl__buildDomainExpr(326733 'expand_tuple'(326730 call . privatizeData[326664] c"dims")))))(326741 'end of statement')(326743 return c[326738])
  } function BlockDom[316773](?).dsiGetReprivatizeData[326750](arg _mt[326755]:_MT[238], arg this[326752]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method"
  {(326763 return(326762 call(326758 call .(365687 call . this[326752] c"whole") c"dims")))
  } function BlockDom[316773](?).dsiReprivatize[326773](arg _mt[326780]:_MT[238], arg this[326777]:BlockDom[316773](?) : BlockDom[316773](?), arg other[326771]:_any[178](?), arg reprivatizeData[326775]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(326789 call =(410722 call . this[326777] c"locDoms")(326786 call . other[326771] c"locDoms"))(326799 call =(410727 call . this[326777] c"whole")(326797 call chpl__buildDomainExpr(326795 'expand_tuple' reprivatizeData[326775])))
  } function BlockArr[316878](?).chpl__serialize[326807](arg _mt[326812]:_MT[238], arg this[326809]:BlockArr[316878](?) : BlockArr[316878](?)) : _unknown[51] "method"
  {(326815 return(410733 call . this[326809] c"pid"))
  } function BlockArr[415358](?).chpl__deserialize[326825](arg _mt[326830]:_MT[238], arg this[326827]:BlockArr[415358](?), arg data[326823]:_any[178](?)) : _unknown[51] "method"
  {(326865 return(326864 call chpl_getPrivatizedCopy(326860 call unmanaged BlockArr[415598](?)(rank =(326835 call . this[326827] c"rank"))(idxType =(326841 call . this[326827] c"idxType"))(stridable =(326846 call . this[326827] c"stridable"))(eltType =(326851 call . this[326827] c"eltType"))(sparseLayoutType =(326856 call . this[326827] c"sparseLayoutType"))) data[326823]))
  } function BlockArr[316878](?).dsiSupportsPrivatization[326873](arg _mt[326878]:_MT[238], arg this[326875]:BlockArr[316878](?) : BlockArr[316878](?)) param : _unknown[51] "method" "method overrides"
  {(326881 return 1)
  } type BlockArrPrvData[326896](?) unknown dompid[326887] unknown locarr[326891] function BlockArr[316878](?).dsiGetPrivatizeData[326902](arg _mt[326907]:_MT[238], arg this[326904]:BlockArr[316878](?) : BlockArr[316878](?)) : _unknown[51] "method"
  {(326918 return(326909 'new'(326917 call BlockArrPrvData[326896](?)(326912 call .(365698 call . this[326904] c"dom") c"pid")(410741 call . this[326904] c"locArr"))))
  } function BlockArr[316878](?).dsiPrivatize[326928](arg _mt[326933]:_MT[238], arg this[326930]:BlockArr[316878](?) : BlockArr[316878](?), arg privatizeData[326926]:_any[178](?)) : _unknown[51] "method"
  { unknown privdom[326946](326945 call chpl_getPrivatizedCopy(326937 'typeof'(410746 call . this[326930] c"dom"))(326942 call . privatizeData[326926] c"dompid"))(326949 'end of statement') unknown locArrTemp[326977](326974 call . privatizeData[326926] c"locarr")(326969 call chpl__buildArrayRuntimeType(326967 call chpl__ensureDomainExpr(326955 call .(326952 call . privdom[326946] c"dist") c"targetLocDom"))(326965 call unmanaged LocBlockArr[415583](?)(410752 call . this[326930] c"eltType")(410757 call . this[326930] c"rank")(410762 call . this[326930] c"idxType")(410767 call . this[326930] c"stridable")))(326980 'end of statement') unknown myLocArrTemp[326990](326987 call unmanaged LocBlockArr?[415589](?)(410773 call . this[326930] c"eltType")(410778 call . this[326930] c"rank")(410783 call . this[326930] c"idxType")(410788 call . this[326930] c"stridable"))(326993 'end of statement')
    { unknown _indexOfInterest[327029] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327030] "expr temp" "temp"(327039 'move' _iterator[327030](327037 call _getIterator(326999 call .(326996 call . privdom[326946] c"dist") c"targetLocDom")))
      Defer
      {
        {(327056 call _freeIterator _iterator[327030])
        }
      }
      { scopeless type(327045 'move' _indexOfInterest[327029](327042 call iteratorIndex _iterator[327030]))
      }
      ForLoop[327031]
      { unknown localeIdx[327049] "index var" "insert auto destroy"(327051 'move' localeIdx[327049] _indexOfInterest[327029])
        if(327024 call _cond_test(327014 call ==(327009 '_wide_get_node'(327005 call locArrTemp[326977] localeIdx[327049]))(327011 call .(365705 call here[90438]) c"id")))
        {(327021 call = myLocArrTemp[326990](327020 call locArrTemp[326977] localeIdx[327049]))
        } label _continueLabel[327034] _indexOfInterest[327029] _iterator[327030]
      } label _breakLabel[327035]
    } const c[327085] "const"(327065 'new'(_chpl_manager = unmanaged[220](?))(327084 call BlockArr[409893](?)(eltType =(410799 call . this[326930] c"eltType"))(rank =(410804 call . this[326930] c"rank"))(idxType =(410809 call . this[326930] c"idxType"))(stridable =(410814 call . this[326930] c"stridable"))(sparseLayoutType =(410819 call . this[326930] c"sparseLayoutType"))(dom = privdom[326946])(locArr = locArrTemp[326977])(myLocArr = myLocArrTemp[326990])))(327088 'end of statement')(327090 return c[327085])
  } function BlockArr[316878](?).dsiTargetLocales[327097](arg _mt[327102]:_MT[238], arg this[327099]:BlockArr[316878](?) : BlockArr[316878](?)) : _unknown[51] "method"
  {(327111 return(327108 call .(327105 call .(365709 call . this[327099] c"dom") c"dist") c"targetLocales"))
  } function BlockDom[316773](?).dsiTargetLocales[327119](arg _mt[327124]:_MT[238], arg this[327121]:BlockDom[316773](?) : BlockDom[316773](?)) : _unknown[51] "method"
  {(327130 return(327127 call .(365714 call . this[327121] c"dist") c"targetLocales"))
  } function Block[316693](?).dsiTargetLocales[327138](arg _mt[327143]:_MT[238], arg this[327140]:Block[316693](?) : Block[316693](?)) : _unknown[51] "method"
  {(327146 return(410828 call . this[327140] c"targetLocales"))
  } function Block[316693](?).chpl__locToLocIdx[327158](arg _mt[327163]:_MT[238], arg this[327160]:Block[316693](?) : Block[316693](?), arg loc[327155] : locale[28]) : _unknown[51] "method"
  {
    { unknown _indexOfInterest[327186] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327187] "expr temp" "temp"(327196 'move' _iterator[327187](327194 call _getIterator(410833 call . this[327160] c"targetLocDom")))
      Defer
      {
        {(327212 call _freeIterator _iterator[327187])
        }
      }
      { scopeless type(327201 'move' _indexOfInterest[327186](327198 call iteratorIndex _iterator[327187]))
      }
      ForLoop[327188]
      { unknown locIdx[327205] "index var" "insert auto destroy"(327207 'move' locIdx[327205] _indexOfInterest[327186])
        if(327181 call _cond_test(327172 call ==(327170 call(410838 call . this[327160] c"targetLocales") locIdx[327205]) loc[327155]))
        {(327179 return(327177 call _build_tuple 1 locIdx[327205]))
        } label _continueLabel[327191] _indexOfInterest[327186] _iterator[327187]
      } label _breakLabel[327192]
    }(327228 return(327226 call _build_tuple 0(327222 call .(365719 call . this[327160] c"targetLocDom") c"first")))
  } function BlockArr[316878](?).dsiHasSingleLocalSubdomain[327235](arg _mt[327240]:_MT[238], arg this[327237]:BlockArr[316878](?) : BlockArr[316878](?)) param : _unknown[51] "method"
  {(327243 return 1)
  } function BlockDom[316773](?).dsiHasSingleLocalSubdomain[327251](arg _mt[327256]:_MT[238], arg this[327253]:BlockDom[316773](?) : BlockDom[316773](?)) param : _unknown[51] "method"
  {(327259 return 1)
  } function BlockArr[316878](?).dsiLocalSubdomain[327271](arg _mt[327276]:_MT[238], arg this[327273]:BlockArr[316878](?) : BlockArr[316878](?), arg loc[327268] : locale[28]) : _unknown[51] "method"
  {
    if(327328 call _cond_test(327280 call == loc[327268](410845 call here[90438])))
    {
      if(327298 call _cond_test(327284 call !=(410849 call . this[327273] c"myLocArr") nil[44]))
      {(327296 return(327293 call .(327290 call .(327289 call _to_nonnil(410854 call . this[327273] c"myLocArr")) c"locDom") c"myBlock"))
      } unknown d[327311](327309 call chpl__buildDomainRuntimeType defaultDist[94053](410859 call . this[327273] c"rank")(410864 call . this[327273] c"idxType")(410869 call . this[327273] c"stridable"))(327314 'end of statement')(327316 return d[327311])
    }
    {(327325 return(327324 call(327319 call .(365724 call . this[327273] c"dom") c"dsiLocalSubdomain") loc[327268]))
    }
  } function BlockDom[316773](?).dsiLocalSubdomain[327342](arg _mt[327347]:_MT[238], arg this[327344]:BlockDom[316773](?) : BlockDom[316773](?), arg loc[327339] : locale[28]) : _unknown[51] "method"
  { const tmp[327363] "const" "temp"(327362 call(327357 call .(365729 call . this[327344] c"dist") c"chpl__locToLocIdx") loc[327339])(327370 call _check_tuple_var_decl tmp[327363] 2) const gotit[327349] "const"(327364 call tmp[327363] 0) const locid[327351] "const"(327367 call tmp[327363] 1)(327375 'end of statement')
    if(327417 call _cond_test gotit[327349])
    { unknown inds[327390](327389 call chpl__computeBlock locid[327351](327382 call .(365734 call . this[327344] c"dist") c"targetLocDom")(327386 call .(365739 call . this[327344] c"dist") c"boundingBox"))(327393 'end of statement')(327400 return(327399 call(410880 call . this[327344] c"whole")(327397 'expand_tuple' inds[327390])))
    }
    { unknown d[327409](327407 call chpl__buildDomainRuntimeType defaultDist[94053](410886 call . this[327344] c"rank")(410891 call . this[327344] c"idxType")(410896 call . this[327344] c"stridable"))(327412 'end of statement')(327415 return d[327409])
    }
  } function BlockDom[316773](?).numRemoteElems[327428](arg _mt[327437]:_MT[238], arg this[327434]:BlockDom[316773](?) : BlockDom[316773](?), arg viewDom[327426]:_any[178](?), arg rlo[327430]:_any[178](?), arg rid[327432]:_any[178](?)) : _unknown[51] "method"
  { unknown blo[327439](327443 call .(365744 call . this[327434] c"dist") c"idxType") unknown bhi[327446](327450 'typeof' blo[327439])(327451 'end of statement')
    if(327589 call _cond_test(327473 call == rid[327432](327471 call -(327467 call .(327466 call(327458 call .(327455 call .(365749 call . this[327434] c"dist") c"targetLocDom") c"dim")(327463 call -(410905 call . this[327434] c"rank") 1)) c"size") 1)))
    {(327489 call = bhi[327446](327486 call .(327485 call(327477 call . viewDom[327426] c"dim")(327482 call -(410911 call . this[327434] c"rank") 1)) c"high"))
    }
    {(327585 call = bhi[327446](327583 call -(327577 call +(327506 call .(327505 call(327497 call .(327494 call .(365755 call . this[327434] c"dist") c"boundingBox") c"dim")(327502 call -(410917 call . this[327434] c"rank") 1)) c"low")(327576 call intCeilXDivByY(327554 call *(327545 call +(327542 call -(327523 call .(327522 call(327514 call .(327511 call .(365760 call . this[327434] c"dist") c"boundingBox") c"dim")(327519 call -(410922 call . this[327434] c"rank") 1)) c"high")(327539 call .(327538 call(327530 call .(327527 call .(365765 call . this[327434] c"dist") c"boundingBox") c"dim")(327535 call -(410927 call . this[327434] c"rank") 1)) c"low")) 1)(327552 call _cast(410933 call . this[327434] c"idxType")(327549 call + rid[327432] 1)))(327574 call _cast(410943 call . this[327434] c"idxType")(327570 call .(327569 call(327561 call .(327558 call .(365770 call . this[327434] c"dist") c"targetLocDom") c"dim")(327566 call -(410938 call . this[327434] c"rank") 1)) c"size"))))(327581 call _cast(410948 call . this[327434] c"idxType") 1)))
    }(327604 return(327602 call - bhi[327446](327600 call _cast(410955 call . this[327434] c"idxType")(327597 call - rlo[327430] 1))))
  } function canDoAnyToBlock[327612](arg Dest[327610]:_any[178](?), arg destDom[327614]:_any[178](?), arg Src[327616]:_any[178](?), arg srcDom[327618]:_any[178](?)) param : _unknown[51] "private"
  {
    if(327645 call _cond_test(327640 call &&(327628 call ==(327626 call(327622 call . Src[327616] c"doiCanBulkTransferRankChange")) 0)(327638 call !=(327631 call . Dest[327610] c"rank")(327635 call . Src[327616] c"rank"))))
    {(327643 return 0)
    }
    if(327691 call _cond_test(327685 call !(327684 call canResolveMethod Src[327616] "doiBulkTransferToKnown" srcDom[327618](327680 call .(327677 call .(327676 call(327662 call . Dest[327610] c"locArr")(327672 call .(327669 call .(327666 call . Dest[327610] c"locArr") c"_dom") c"first")) c"myElems") c"_value") destDom[327614])))
    {(327688 return 0)
    }(327698 return(327696 call ! disableBlockDistBulkTransfer[316595]))(355606 'used modules list'(327652 'use' Reflection[224903]))
  }
  { scopeless type bool[10]
  } function BlockArr[316878](?).doiBulkTransferToKnown[327708](arg _mt[327719]:_MT[238], arg this[327716]:BlockArr[316878](?) : BlockArr[316878](?), arg srcDom[327706]:_any[178](?), arg destClass[327711] : BlockArr[409893](?), arg destDom[327714]:_any[178](?)) : _unknown[51] "method"
  {(327751 call _doSimpleBlockTransfer destClass[327711] destDom[327714] this[327716] srcDom[327706])(327755 return 1)
  }
  {(327743 call &&(327738 call &&(327728 call ==(327723 call . this[327716] c"sparseLayoutType") unmanaged DefaultDist[415487])(327736 call ==(327731 call . destClass[327711] c"sparseLayoutType") unmanaged DefaultDist[415487]))(327741 call ! disableBlockDistBulkTransfer[316595]))
  }
  { scopeless type bool[10]
  } function BlockArr[316878](?).doiBulkTransferFromKnown[327766](arg _mt[327777]:_MT[238], arg this[327774]:BlockArr[316878](?) : BlockArr[316878](?), arg destDom[327764]:_any[178](?), arg srcClass[327769] : BlockArr[409893](?), arg srcDom[327772]:_any[178](?)) : _unknown[51] "method"
  {(327809 call _doSimpleBlockTransfer this[327774] destDom[327764] srcClass[327769] srcDom[327772])(327813 return 1)
  }
  {(327801 call &&(327796 call &&(327786 call ==(327781 call . this[327774] c"sparseLayoutType") unmanaged DefaultDist[415487])(327794 call ==(327789 call . srcClass[327769] c"sparseLayoutType") unmanaged DefaultDist[415487]))(327799 call ! disableBlockDistBulkTransfer[316595]))
  }
  { scopeless type bool[10]
  } function BlockArr[316878](?).doiSwap[327824](arg _mt[327829]:_MT[238], arg this[327826]:BlockArr[316878](?) : BlockArr[316878](?), arg arr[327822]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    { unknown tmpIter[327883] "expr temp" "maybe ref" "no copy" "temp"(327886 'move' tmpIter[327883](327845 call _build_tuple(327837 call . this[327826] c"locArr")(327842 call . arr[327822] c"locArr"))) unknown isRngDomArr[328078] "maybe param" "temp"(328093 'move' isRngDomArr[328078](328091 call ||(328080 call isBoundedRange tmpIter[327883])(328089 call ||(328083 call isDomain tmpIter[327883])(328086 call isArray tmpIter[327883]))))
      if isRngDomArr[328078]
      { const _coforallCount[327922] "const" "end count" "temp"(328001 'move' _coforallCount[327922](327998 call _endCountAlloc 0)) unknown numTasks[327923] "temp"(327985 'move' numTasks[327923](327981 call . tmpIter[327883] c"size"))(327976 call _upEndCount _coforallCount[327922] 0 numTasks[327923]) unknown _indexOfInterest[327929] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327930] "expr temp" "temp"(327939 'move' _iterator[327930](327937 call _getIteratorZip tmpIter[327883]))
        Defer
        {
          {(327969 call _freeIterator _iterator[327930])
          }
        }
        { scopeless type(327944 'move' _indexOfInterest[327929](327941 call iteratorIndex _iterator[327930]))
        }
        ForLoop[327931]
        {(327949 call _check_tuple_var_decl _indexOfInterest[327929] 2) unknown locarr1[327955] "coforall index var" "index var" "insert auto destroy"(327957 'move' locarr1[327955](327953 call _indexOfInterest[327929] 0)) unknown locarr2[327962] "coforall index var" "index var" "insert auto destroy"(327964 'move' locarr2[327962](327960 call _indexOfInterest[327929] 1)) const tmp[327889] "const" "temp"(327891 'move' tmp[327889](327893 'deref'(327894 '_wide_get_locale' locarr1[327955])))
          {
            {(327902 call <=>(327904 call . locarr1[327955] c"myElems")(327908 call . locarr2[327962] c"myElems"))(327912 call <=>(327914 call . locarr1[327955] c"locRAD")(327918 call . locarr2[327962] c"locRAD"))
            }(327924 call _downEndCount _coforallCount[327922] nil[44])(327897 'coforall on block' 0 tmp[327889])
          } label _continueLabel[327934] _indexOfInterest[327929] _iterator[327930]
        } label _breakLabel[327935]
        Defer
        {
          {(327988 call _endCountFree _coforallCount[327922])
          }
        }(327993 call _waitEndCount _coforallCount[327922] 0 numTasks[327923])
      }
      { const _coforallCount[328005] "const" "end count" "temp"(328075 'move' _coforallCount[328005](328072 call _endCountAlloc 0)) unknown _indexOfInterest[328012] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[328013] "expr temp" "temp"(328022 'move' _iterator[328013](328020 call _getIteratorZip tmpIter[327883]))
        Defer
        {
          {(328052 call _freeIterator _iterator[328013])
          }
        }
        { scopeless type(328027 'move' _indexOfInterest[328012](328024 call iteratorIndex _iterator[328013]))
        }
        ForLoop[328014]
        {(328032 call _check_tuple_var_decl _indexOfInterest[328012] 2) unknown locarr1[328038] "coforall index var" "index var" "insert auto destroy"(328040 'move' locarr1[328038](328036 call _indexOfInterest[328012] 0)) unknown locarr2[328045] "coforall index var" "index var" "insert auto destroy"(328047 'move' locarr2[328045](328043 call _indexOfInterest[328012] 1))(328059 call _upEndCount _coforallCount[328005] 0) const tmp[327873] "const" "temp"(327875 'move' tmp[327873](327871 'deref'(327870 '_wide_get_locale' locarr1[328038])))
          {
            {(327855 call <=>(327848 call . locarr1[328038] c"myElems")(327852 call . locarr2[328045] c"myElems"))(327867 call <=>(327860 call . locarr1[328038] c"locRAD")(327864 call . locarr2[328045] c"locRAD"))
            }(328007 call _downEndCount _coforallCount[328005] nil[44])(327878 'coforall on block' 0 tmp[327873])
          } label _continueLabel[328017] _indexOfInterest[328012] _iterator[328013]
        } label _breakLabel[328018]
        Defer
        {
          {(328063 call _endCountFree _coforallCount[328005])
          }
        }(328068 call _waitEndCount _coforallCount[328005] 0)
      }
    }
  } function _doSimpleBlockTransfer[328104](arg Dest[328102]:_any[178](?), arg destDom[328106]:_any[178](?), arg Src[328108]:_any[178](?), arg srcDom[328110]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(328154 call _cond_test debugBlockDistBulkTransfer[316585])
    {(328152 call writeln "In Block=Block Bulk Transfer: Dest[" destDom[328106] "] = Src[" srcDom[328110] "]")
    } const DestPID[328164] "const"(328161 call . Dest[328102] c"pid")(328167 'end of statement') const SrcPID[328172] "const"(328169 call . Src[328108] c"pid")(328175 'end of statement')
    { unknown tmpIter[328431] "expr temp" "maybe ref" "no copy" "temp"(328434 'move' tmpIter[328431](328191 call(328186 call .(328181 call .(328178 call . Dest[328102] c"dom") c"dist") c"activeTargetLocales") destDom[328106])) unknown isRngDomArr[328766] "maybe param" "temp"(328781 'move' isRngDomArr[328766](328779 call ||(328768 call isBoundedRange tmpIter[328431])(328777 call ||(328771 call isDomain tmpIter[328431])(328774 call isArray tmpIter[328431]))))
      if isRngDomArr[328766]
      { const _coforallCount[328638] "const" "end count" "temp"(328703 'move' _coforallCount[328638](328700 call _endCountAlloc 0)) unknown numTasks[328639] "temp"(328687 'move' numTasks[328639](328683 call . tmpIter[328431] c"size"))(328678 call _upEndCount _coforallCount[328638] 0 numTasks[328639]) unknown _indexOfInterest[328645] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[328646] "expr temp" "temp"(328655 'move' _iterator[328646](328653 call _getIterator tmpIter[328431]))
        Defer
        {
          {(328671 call _freeIterator _iterator[328646])
          }
        }
        { scopeless type(328660 'move' _indexOfInterest[328645](328657 call iteratorIndex _iterator[328646]))
        }
        ForLoop[328647]
        { unknown i[328664] "coforall index var" "index var" "insert auto destroy"(328666 'move' i[328664] _indexOfInterest[328645]) const tmp[328437] "const" "temp"(328439 'move' tmp[328437](328441 'deref'(328442 '_wide_get_locale'(328453 call(328444 call .(328446 call .(328448 call . Dest[328102] c"dom") c"dist") c"targetLocales") i[328664]))))
          {
            { const dst[328461] "const"(328471 IfExpr  1 then
              { scopeless(328465 call chpl_getPrivatizedCopy(328466 'typeof' Dest[328102]) DestPID[328164])
              } else
              { scopeless Dest[328102]
              } )(328473 'end of statement') const src[328475] "const"(328485 IfExpr  1 then
              { scopeless(328479 call chpl_getPrivatizedCopy(328480 'typeof' Src[328108]) SrcPID[328172])
              } else
              { scopeless Src[328108]
              } )(328487 'end of statement') const localDestBlock[328489] "const"(328502 call(328491 call .(328499 call(328493 call .(328495 call . dst[328461] c"dom") c"locDoms") i[328664]) c"myBlock") destDom[328106])(328505 'end of statement')(328507 call assert(328509 call >(328511 call . localDestBlock[328489] c"size") 0)) const corSrcBlock[328516] "const"(328518 call bulkCommTranslateDomain localDestBlock[328489] destDom[328106] srcDom[328110])(328523 'end of statement')
              if(328525 call _cond_test debugBlockDistBulkTransfer[316585])
              {(328530 call writeln "  Dest[" localDestBlock[328489] "] = Src[" corSrcBlock[328516] "]")
              }
              { unknown _indexOfInterest[328538] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[328540] "expr temp" "temp"(328542 'move' _iterator[328540](328545 call _getIterator(328556 call(328547 call .(328549 call .(328551 call . src[328475] c"dom") c"dist") c"activeTargetLocales") corSrcBlock[328516])))
                Defer
                {
                  {(328560 call _freeIterator _iterator[328540])
                  }
                }
                { scopeless type(328564 'move' _indexOfInterest[328538](328567 call iteratorIndex _iterator[328540]))
                }
                ForLoop[328569]
                { unknown srcLoc[328572] "index var" "insert auto destroy"(328574 'move' srcLoc[328572] _indexOfInterest[328538])
                  { const localSrcChunk[328579] "const"(328581 call corSrcBlock[328516](328583 call .(328591 call(328585 call .(328587 call . src[328475] c"dom") c"locDoms") srcLoc[328572]) c"myBlock"))(328595 'end of statement') const localDestChunk[328597] "const"(328599 call bulkCommTranslateDomain localSrcChunk[328579] corSrcBlock[328516] localDestBlock[328489])(328604 'end of statement')(328606 call chpl__bulkTransferArray(328608 call .(328610 call .(328615 call(328612 call . dst[328461] c"locArr") i[328664]) c"myElems") c"_value") localDestChunk[328597](328621 call .(328623 call .(328628 call(328625 call . src[328475] c"locArr") srcLoc[328572]) c"myElems") c"_value") localSrcChunk[328579])
                  } label _continueLabel[328633] _indexOfInterest[328538] _iterator[328540]
                } label _breakLabel[328635]
              }
            }(328640 call _downEndCount _coforallCount[328638] nil[44])(328456 'coforall on block' 0 tmp[328437])
          } label _continueLabel[328650] _indexOfInterest[328645] _iterator[328646]
        } label _breakLabel[328651]
        Defer
        {
          {(328690 call _endCountFree _coforallCount[328638])
          }
        }(328695 call _waitEndCount _coforallCount[328638] 0 numTasks[328639])
      }
      { const _coforallCount[328707] "const" "end count" "temp"(328763 'move' _coforallCount[328707](328760 call _endCountAlloc 0)) unknown _indexOfInterest[328714] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[328715] "expr temp" "temp"(328724 'move' _iterator[328715](328722 call _getIterator tmpIter[328431]))
        Defer
        {
          {(328740 call _freeIterator _iterator[328715])
          }
        }
        { scopeless type(328729 'move' _indexOfInterest[328714](328726 call iteratorIndex _iterator[328715]))
        }
        ForLoop[328716]
        { unknown i[328733] "coforall index var" "index var" "insert auto destroy"(328735 'move' i[328733] _indexOfInterest[328714])(328747 call _upEndCount _coforallCount[328707] 0) const tmp[328422] "const" "temp"(328424 'move' tmp[328422](328420 'deref'(328419 '_wide_get_locale'(328204 call(328199 call .(328196 call .(328193 call . Dest[328102] c"dom") c"dist") c"targetLocales") i[328733]))))
          {
            { const dst[328216] "const"(328213 IfExpr  1 then
              { scopeless(328211 call chpl_getPrivatizedCopy(328208 'typeof' Dest[328102]) DestPID[328164])
              } else
              { scopeless Dest[328102]
              } )(328219 'end of statement') const src[328232] "const"(328229 IfExpr  1 then
              { scopeless(328227 call chpl_getPrivatizedCopy(328224 'typeof' Src[328108]) SrcPID[328172])
              } else
              { scopeless Src[328108]
              } )(328235 'end of statement') const localDestBlock[328252] "const"(328251 call(328246 call .(328245 call(328240 call .(328237 call . dst[328216] c"dom") c"locDoms") i[328733]) c"myBlock") destDom[328106])(328255 'end of statement')(328265 call assert(328262 call >(328258 call . localDestBlock[328252] c"size") 0)) const corSrcBlock[328273] "const"(328272 call bulkCommTranslateDomain localDestBlock[328252] destDom[328106] srcDom[328110])(328276 'end of statement')
              if(328303 call _cond_test debugBlockDistBulkTransfer[316585])
              {(328301 call writeln "  Dest[" localDestBlock[328252] "] = Src[" corSrcBlock[328273] "]")
              }
              { unknown _indexOfInterest[328385] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[328386] "expr temp" "temp"(328395 'move' _iterator[328386](328393 call _getIterator(328321 call(328316 call .(328313 call .(328310 call . src[328232] c"dom") c"dist") c"activeTargetLocales") corSrcBlock[328273])))
                Defer
                {
                  {(328412 call _freeIterator _iterator[328386])
                  }
                }
                { scopeless type(328401 'move' _indexOfInterest[328385](328398 call iteratorIndex _iterator[328386]))
                }
                ForLoop[328387]
                { unknown srcLoc[328405] "index var" "insert auto destroy"(328407 'move' srcLoc[328405] _indexOfInterest[328385])
                  { const localSrcChunk[328338] "const"(328337 call corSrcBlock[328273](328333 call .(328332 call(328327 call .(328324 call . src[328232] c"dom") c"locDoms") srcLoc[328405]) c"myBlock"))(328341 'end of statement') const localDestChunk[328349] "const"(328348 call bulkCommTranslateDomain localSrcChunk[328338] corSrcBlock[328273] localDestBlock[328252])(328352 'end of statement')(328383 call chpl__bulkTransferArray(328364 call .(328361 call .(328360 call(328355 call . dst[328216] c"locArr") i[328733]) c"myElems") c"_value") localDestChunk[328349](328379 call .(328376 call .(328375 call(328370 call . src[328232] c"locArr") srcLoc[328405]) c"myElems") c"_value") localSrcChunk[328338])
                  } label _continueLabel[328390] _indexOfInterest[328385] _iterator[328386]
                } label _breakLabel[328391]
              }
            }(328709 call _downEndCount _coforallCount[328707] nil[44])(328427 'coforall on block' 0 tmp[328422])
          } label _continueLabel[328719] _indexOfInterest[328714] _iterator[328715]
        } label _breakLabel[328720]
        Defer
        {
          {(328751 call _endCountFree _coforallCount[328707])
          }
        }(328756 call _waitEndCount _coforallCount[328707] 0)
      }
    }
  } function BlockArr[316878](?).doiBulkTransferFromAny[328792](arg _mt[328801]:_MT[238], arg this[328798]:BlockArr[316878](?) : BlockArr[316878](?), arg destDom[328790]:_any[178](?), arg Src[328794]:_any[178](?), arg srcDom[328796]:_any[178](?)) : _unknown[51] "method"
  {
    if(328833 call _cond_test debugBlockDistBulkTransfer[316585])
    {(328831 call writeln "In BlockDist.doiBulkTransferFromAny")
    }
    { unknown tmpIter[328987] "expr temp" "maybe ref" "no copy" "temp"(328990 'move' tmpIter[328987](328849 call(328844 call .(328841 call .(365811 call . this[328798] c"dom") c"dist") c"activeTargetLocales") destDom[328790])) unknown isRngDomArr[329215] "maybe param" "temp"(329230 'move' isRngDomArr[329215](329228 call ||(329217 call isBoundedRange tmpIter[328987])(329226 call ||(329220 call isDomain tmpIter[328987])(329223 call isArray tmpIter[328987]))))
      if isRngDomArr[329215]
      { const _coforallCount[329087] "const" "end count" "temp"(329152 'move' _coforallCount[329087](329149 call _endCountAlloc 0)) unknown numTasks[329088] "temp"(329136 'move' numTasks[329088](329132 call . tmpIter[328987] c"size"))(329127 call _upEndCount _coforallCount[329087] 0 numTasks[329088]) unknown _indexOfInterest[329094] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[329095] "expr temp" "temp"(329104 'move' _iterator[329095](329102 call _getIterator tmpIter[328987]))
        Defer
        {
          {(329120 call _freeIterator _iterator[329095])
          }
        }
        { scopeless type(329109 'move' _indexOfInterest[329094](329106 call iteratorIndex _iterator[329095]))
        }
        ForLoop[329096]
        { unknown j[329113] "coforall index var" "index var" "insert auto destroy"(329115 'move' j[329113] _indexOfInterest[329094]) const tmp[328993] "const" "temp"(328995 'move' tmp[328993](328997 'deref'(328998 '_wide_get_locale'(329006 call(329000 call .(329002 call .(365823 call . this[328798] c"dom") c"dist") c"targetLocales") j[329113]))))
          {
            { const Dest[329014] "const"(329024 IfExpr  1 then
              { scopeless(329018 call chpl_getPrivatizedCopy(329019 'typeof' this[328798])(411071 call . this[328798] c"pid"))
              } else
              { scopeless this[328798]
              } )(329026 'end of statement') const inters[329028] "const"(329041 call(329030 call .(329038 call(329032 call .(329034 call . Dest[329014] c"dom") c"locDoms") j[329113]) c"myBlock") destDom[328790])(329044 'end of statement') const srcChunk[329046] "const"(329048 call bulkCommTranslateDomain inters[329028] destDom[328790] srcDom[328796])(329053 'end of statement')
              if(329055 call _cond_test debugBlockDistBulkTransfer[316585])
              {(329060 call writeln "Dest.locArr[" j[329113] "][" inters[329028] "] = Src[" srcDom[328796] "]")
              }(329070 call chpl__bulkTransferArray(329072 call .(329074 call .(329079 call(329076 call . Dest[329014] c"locArr") j[329113]) c"myElems") c"_value") inters[329028] Src[328794] srcChunk[329046])
            }(329089 call _downEndCount _coforallCount[329087] nil[44])(329009 'coforall on block' 0 tmp[328993])
          } label _continueLabel[329099] _indexOfInterest[329094] _iterator[329095]
        } label _breakLabel[329100]
        Defer
        {
          {(329139 call _endCountFree _coforallCount[329087])
          }
        }(329144 call _waitEndCount _coforallCount[329087] 0 numTasks[329088])
      }
      { const _coforallCount[329156] "const" "end count" "temp"(329212 'move' _coforallCount[329156](329209 call _endCountAlloc 0)) unknown _indexOfInterest[329163] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[329164] "expr temp" "temp"(329173 'move' _iterator[329164](329171 call _getIterator tmpIter[328987]))
        Defer
        {
          {(329189 call _freeIterator _iterator[329164])
          }
        }
        { scopeless type(329178 'move' _indexOfInterest[329163](329175 call iteratorIndex _iterator[329164]))
        }
        ForLoop[329165]
        { unknown j[329182] "coforall index var" "index var" "insert auto destroy"(329184 'move' j[329182] _indexOfInterest[329163])(329196 call _upEndCount _coforallCount[329156] 0) const tmp[328978] "const" "temp"(328980 'move' tmp[328978](328976 'deref'(328975 '_wide_get_locale'(328859 call(328854 call .(328851 call .(365816 call . this[328798] c"dom") c"dist") c"targetLocales") j[329182]))))
          {
            { const Dest[328871] "const"(328868 IfExpr  1 then
              { scopeless(328866 call chpl_getPrivatizedCopy(328863 'typeof' this[328798])(411049 call . this[328798] c"pid"))
              } else
              { scopeless this[328798]
              } )(328874 'end of statement') const inters[328892] "const"(328891 call(328886 call .(328885 call(328880 call .(328877 call . Dest[328871] c"dom") c"locDoms") j[329182]) c"myBlock") destDom[328790])(328895 'end of statement') const srcChunk[328902] "const"(328901 call bulkCommTranslateDomain inters[328892] destDom[328790] srcDom[328796])(328905 'end of statement')
              if(328950 call _cond_test debugBlockDistBulkTransfer[316585])
              {(328948 call writeln "Dest.locArr[" j[329182] "][" inters[328892] "] = Src[" srcDom[328796] "]")
              }(328973 call chpl__bulkTransferArray(328966 call .(328963 call .(328962 call(328957 call . Dest[328871] c"locArr") j[329182]) c"myElems") c"_value") inters[328892] Src[328794] srcChunk[328902])
            }(329158 call _downEndCount _coforallCount[329156] nil[44])(328983 'coforall on block' 0 tmp[328978])
          } label _continueLabel[329168] _indexOfInterest[329163] _iterator[329164]
        } label _breakLabel[329169]
        Defer
        {
          {(329200 call _endCountFree _coforallCount[329156])
          }
        }(329205 call _waitEndCount _coforallCount[329156] 0)
      }
    }(329235 return 1)
  }
  {(328810 call canDoAnyToBlock this[328798] destDom[328790] Src[328794] srcDom[328796])
  }
  { scopeless type bool[10]
  } function BlockArr[316878](?).doiBulkTransferToKnown[329246](arg _mt[329257]:_MT[238], arg this[329254]:BlockArr[316878](?) : BlockArr[316878](?), arg srcDom[329244]:_any[178](?), arg Dest[329249] : DefaultRectangularArr[379736](?), arg destDom[329252]:_any[178](?)) : _unknown[51] "method"
  {
    if(329285 call _cond_test debugBlockDistBulkTransfer[316585])
    {(329283 call writeln "In BlockDist.doiBulkTransferToKnown(DefaultRectangular)")
    }
    { unknown tmpIter[329442] "expr temp" "maybe ref" "no copy" "temp"(329445 'move' tmpIter[329442](329301 call(329296 call .(329293 call .(365830 call . this[329254] c"dom") c"dist") c"activeTargetLocales") srcDom[329244])) unknown isRngDomArr[329673] "maybe param" "temp"(329688 'move' isRngDomArr[329673](329686 call ||(329675 call isBoundedRange tmpIter[329442])(329684 call ||(329678 call isDomain tmpIter[329442])(329681 call isArray tmpIter[329442]))))
      if isRngDomArr[329673]
      { const _coforallCount[329545] "const" "end count" "temp"(329610 'move' _coforallCount[329545](329607 call _endCountAlloc 0)) unknown numTasks[329546] "temp"(329594 'move' numTasks[329546](329590 call . tmpIter[329442] c"size"))(329585 call _upEndCount _coforallCount[329545] 0 numTasks[329546]) unknown _indexOfInterest[329552] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[329553] "expr temp" "temp"(329562 'move' _iterator[329553](329560 call _getIterator tmpIter[329442]))
        Defer
        {
          {(329578 call _freeIterator _iterator[329553])
          }
        }
        { scopeless type(329567 'move' _indexOfInterest[329552](329564 call iteratorIndex _iterator[329553]))
        }
        ForLoop[329554]
        { unknown j[329571] "coforall index var" "index var" "insert auto destroy"(329573 'move' j[329571] _indexOfInterest[329552]) const tmp[329448] "const" "temp"(329450 'move' tmp[329448](329452 'deref'(329453 '_wide_get_locale'(329461 call(329455 call .(329457 call .(365842 call . this[329254] c"dom") c"dist") c"targetLocales") j[329571]))))
          {
            { const Src[329469] "const"(329479 IfExpr  1 then
              { scopeless(329473 call chpl_getPrivatizedCopy(329474 'typeof' this[329254])(411119 call . this[329254] c"pid"))
              } else
              { scopeless this[329254]
              } )(329481 'end of statement') const inters[329483] "const"(329496 call(329485 call .(329493 call(329487 call .(329489 call . Src[329469] c"dom") c"locDoms") j[329571]) c"myBlock") srcDom[329244])(329499 'end of statement') const destChunk[329501] "const"(329503 call bulkCommTranslateDomain inters[329483] srcDom[329244] destDom[329252])(329508 'end of statement')
              if(329510 call _cond_test debugBlockDistBulkTransfer[316585])
              {(329515 call writeln "  A[" destChunk[329501] "] = B[" inters[329483] "]")
              } const elemActual[329523] "const"(329525 call .(329527 call .(329532 call(329529 call . Src[329469] c"locArr") j[329571]) c"myElems") c"_value")(329537 'end of statement')(329539 call chpl__bulkTransferArray Dest[329249] destChunk[329501] elemActual[329523] inters[329483])
            }(329547 call _downEndCount _coforallCount[329545] nil[44])(329464 'coforall on block' 0 tmp[329448])
          } label _continueLabel[329557] _indexOfInterest[329552] _iterator[329553]
        } label _breakLabel[329558]
        Defer
        {
          {(329597 call _endCountFree _coforallCount[329545])
          }
        }(329602 call _waitEndCount _coforallCount[329545] 0 numTasks[329546])
      }
      { const _coforallCount[329614] "const" "end count" "temp"(329670 'move' _coforallCount[329614](329667 call _endCountAlloc 0)) unknown _indexOfInterest[329621] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[329622] "expr temp" "temp"(329631 'move' _iterator[329622](329629 call _getIterator tmpIter[329442]))
        Defer
        {
          {(329647 call _freeIterator _iterator[329622])
          }
        }
        { scopeless type(329636 'move' _indexOfInterest[329621](329633 call iteratorIndex _iterator[329622]))
        }
        ForLoop[329623]
        { unknown j[329640] "coforall index var" "index var" "insert auto destroy"(329642 'move' j[329640] _indexOfInterest[329621])(329654 call _upEndCount _coforallCount[329614] 0) const tmp[329433] "const" "temp"(329435 'move' tmp[329433](329431 'deref'(329430 '_wide_get_locale'(329311 call(329306 call .(329303 call .(365835 call . this[329254] c"dom") c"dist") c"targetLocales") j[329640]))))
          {
            { const Src[329323] "const"(329320 IfExpr  1 then
              { scopeless(329318 call chpl_getPrivatizedCopy(329315 'typeof' this[329254])(411097 call . this[329254] c"pid"))
              } else
              { scopeless this[329254]
              } )(329326 'end of statement') const inters[329344] "const"(329343 call(329338 call .(329337 call(329332 call .(329329 call . Src[329323] c"dom") c"locDoms") j[329640]) c"myBlock") srcDom[329244])(329347 'end of statement') const destChunk[329354] "const"(329353 call bulkCommTranslateDomain inters[329344] srcDom[329244] destDom[329252])(329357 'end of statement')
              if(329400 call _cond_test debugBlockDistBulkTransfer[316585])
              {(329398 call writeln "  A[" destChunk[329354] "] = B[" inters[329344] "]")
              } const elemActual[329418] "const"(329415 call .(329412 call .(329411 call(329406 call . Src[329323] c"locArr") j[329640]) c"myElems") c"_value")(329421 'end of statement')(329428 call chpl__bulkTransferArray Dest[329249] destChunk[329354] elemActual[329418] inters[329344])
            }(329616 call _downEndCount _coforallCount[329614] nil[44])(329438 'coforall on block' 0 tmp[329433])
          } label _continueLabel[329626] _indexOfInterest[329621] _iterator[329622]
        } label _breakLabel[329627]
        Defer
        {
          {(329658 call _endCountFree _coforallCount[329614])
          }
        }(329663 call _waitEndCount _coforallCount[329614] 0)
      }
    }(329693 return 1)
  }
  {(329261 call ! disableBlockDistBulkTransfer[316595])
  }
  { scopeless type bool[10]
  } function BlockArr[316878](?).doiBulkTransferFromKnown[329704](arg _mt[329715]:_MT[238], arg this[329712]:BlockArr[316878](?) : BlockArr[316878](?), arg destDom[329702]:_any[178](?), arg Src[329707] : DefaultRectangularArr[379736](?), arg srcDom[329710]:_any[178](?)) : _unknown[51] "method"
  {
    if(329743 call _cond_test debugBlockDistBulkTransfer[316585])
    {(329741 call writeln "In BlockArr.doiBulkTransferFromKnown(DefaultRectangular)")
    }
    { unknown tmpIter[329879] "expr temp" "maybe ref" "no copy" "temp"(329882 'move' tmpIter[329879](329759 call(329754 call .(329751 call .(365849 call . this[329712] c"dom") c"dist") c"activeTargetLocales") destDom[329702])) unknown isRngDomArr[330119] "maybe param" "temp"(330134 'move' isRngDomArr[330119](330132 call ||(330121 call isBoundedRange tmpIter[329879])(330130 call ||(330124 call isDomain tmpIter[329879])(330127 call isArray tmpIter[329879]))))
      if isRngDomArr[330119]
      { const _coforallCount[329991] "const" "end count" "temp"(330056 'move' _coforallCount[329991](330053 call _endCountAlloc 0)) unknown numTasks[329992] "temp"(330040 'move' numTasks[329992](330036 call . tmpIter[329879] c"size"))(330031 call _upEndCount _coforallCount[329991] 0 numTasks[329992]) unknown _indexOfInterest[329998] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[329999] "expr temp" "temp"(330008 'move' _iterator[329999](330006 call _getIterator tmpIter[329879]))
        Defer
        {
          {(330024 call _freeIterator _iterator[329999])
          }
        }
        { scopeless type(330013 'move' _indexOfInterest[329998](330010 call iteratorIndex _iterator[329999]))
        }
        ForLoop[330000]
        { unknown j[330017] "coforall index var" "index var" "insert auto destroy"(330019 'move' j[330017] _indexOfInterest[329998]) const tmp[329885] "const" "temp"(329887 'move' tmp[329885](329889 'deref'(329890 '_wide_get_locale'(329898 call(329892 call .(329894 call .(365862 call . this[329712] c"dom") c"dist") c"targetLocales") j[330017]))))
          {
            { const Dest[329906] "const"(329916 IfExpr  1 then
              { scopeless(329910 call chpl_getPrivatizedCopy(329911 'typeof' this[329712])(411167 call . this[329712] c"pid"))
              } else
              { scopeless this[329712]
              } )(329918 'end of statement') const inters[329920] "const"(329933 call(329922 call .(329930 call(329924 call .(329926 call . Dest[329906] c"dom") c"locDoms") j[330017]) c"myBlock") destDom[329702])(329936 'end of statement')(329938 call assert(329940 call >(329942 call . inters[329920] c"size") 0)) const srcChunk[329947] "const"(329949 call bulkCommTranslateDomain inters[329920] destDom[329702] srcDom[329710])(329954 'end of statement')
              if(329956 call _cond_test debugBlockDistBulkTransfer[316585])
              {(329961 call writeln "  A[" inters[329920] "] = B[" srcChunk[329947] "]")
              } const elemActual[329969] "const"(329971 call .(329973 call .(329978 call(329975 call . Dest[329906] c"locArr") j[330017]) c"myElems") c"_value")(329983 'end of statement')(329985 call chpl__bulkTransferArray elemActual[329969] inters[329920] Src[329707] srcChunk[329947])
            }(329993 call _downEndCount _coforallCount[329991] nil[44])(329901 'coforall on block' 0 tmp[329885])
          } label _continueLabel[330003] _indexOfInterest[329998] _iterator[329999]
        } label _breakLabel[330004]
        Defer
        {
          {(330043 call _endCountFree _coforallCount[329991])
          }
        }(330048 call _waitEndCount _coforallCount[329991] 0 numTasks[329992])
      }
      { const _coforallCount[330060] "const" "end count" "temp"(330116 'move' _coforallCount[330060](330113 call _endCountAlloc 0)) unknown _indexOfInterest[330067] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[330068] "expr temp" "temp"(330077 'move' _iterator[330068](330075 call _getIterator tmpIter[329879]))
        Defer
        {
          {(330093 call _freeIterator _iterator[330068])
          }
        }
        { scopeless type(330082 'move' _indexOfInterest[330067](330079 call iteratorIndex _iterator[330068]))
        }
        ForLoop[330069]
        { unknown j[330086] "coforall index var" "index var" "insert auto destroy"(330088 'move' j[330086] _indexOfInterest[330067])(330100 call _upEndCount _coforallCount[330060] 0) const tmp[329870] "const" "temp"(329872 'move' tmp[329870](329868 'deref'(329867 '_wide_get_locale'(329769 call(329764 call .(329761 call .(365854 call . this[329712] c"dom") c"dist") c"targetLocales") j[330086]))))
          {
            { const Dest[329781] "const"(329778 IfExpr  1 then
              { scopeless(329776 call chpl_getPrivatizedCopy(329773 'typeof' this[329712])(411145 call . this[329712] c"pid"))
              } else
              { scopeless this[329712]
              } )(329784 'end of statement') const inters[329802] "const"(329801 call(329796 call .(329795 call(329790 call .(329787 call . Dest[329781] c"dom") c"locDoms") j[330086]) c"myBlock") destDom[329702])(329805 'end of statement')(329815 call assert(329812 call >(329808 call . inters[329802] c"size") 0)) const srcChunk[329823] "const"(329822 call bulkCommTranslateDomain inters[329802] destDom[329702] srcDom[329710])(329826 'end of statement')
              if(329837 call _cond_test debugBlockDistBulkTransfer[316585])
              {(329835 call writeln "  A[" inters[329802] "] = B[" srcChunk[329823] "]")
              } const elemActual[329855] "const"(329852 call .(329849 call .(329848 call(329843 call . Dest[329781] c"locArr") j[330086]) c"myElems") c"_value")(329858 'end of statement')(329865 call chpl__bulkTransferArray elemActual[329855] inters[329802] Src[329707] srcChunk[329823])
            }(330062 call _downEndCount _coforallCount[330060] nil[44])(329875 'coforall on block' 0 tmp[329870])
          } label _continueLabel[330072] _indexOfInterest[330067] _iterator[330068]
        } label _breakLabel[330073]
        Defer
        {
          {(330104 call _endCountFree _coforallCount[330060])
          }
        }(330109 call _waitEndCount _coforallCount[330060] 0)
      }
    }(330139 return 1)
  }
  {(329719 call ! disableBlockDistBulkTransfer[316595])
  }
  { scopeless type bool[10]
  } function BlockArr[316878](?).doiCanBulkTransferRankChange[330148](arg _mt[330153]:_MT[238], arg this[330150]:BlockArr[316878](?) : BlockArr[316878](?)) param : _unknown[51] "method" "method overrides"
  {(330156 return 1)
  } unknown debugBlockScan[330162] "config" "param" 0(330165 'end of statement') function BlockArr[316878](?).doiScan[330171](arg _mt[330178]:_MT[238], arg this[330175]:BlockArr[316878](?) : BlockArr[316878](?), arg op[330169]:_any[178](?), arg dom[330173]:_any[178](?)) : _unknown[51] "method"
  { unknown resType[330197] "type variable"(330196 'typeof'(330195 call(330191 call . op[330169] c"generate"))) unknown res[330208](330206 call chpl__buildArrayRuntimeType(330204 call chpl__ensureDomainExpr dom[330173]) resType[330197])(330211 'end of statement') unknown targetLocs[330221] "ref var"(330220 call(330216 call . this[330175] c"dsiTargetLocales"))(330224 'end of statement') const elemPerLocDom[330238] "const"(330236 call chpl__distributed(330235 call Replicated[411193](?) targetLocs[330221])(330230 call chpl__buildDomainExpr(330227 call chpl_build_bounded_range 1 1)))(330241 'end of statement') unknown elemPerLoc[330249](330247 call chpl__buildArrayRuntimeType(330245 call chpl__ensureDomainExpr elemPerLocDom[330238]) resType[330197])(330252 'end of statement') unknown inputReady$[330262](330260 call chpl__buildArrayRuntimeType(330258 call chpl__ensureDomainExpr elemPerLocDom[330238])(330256 call _syncvar[84947](?) bool[10]))(330265 'end of statement') unknown outputReady$[330275](330273 call chpl__buildArrayRuntimeType(330271 call chpl__ensureDomainExpr elemPerLocDom[330238])(330269 call _syncvar[84947](?) bool[10]))(330278 'end of statement')
    { unknown tmpIter[330718] "expr temp" "maybe ref" "no copy" "temp"(330721 'move' tmpIter[330718](330284 call .(330281 call . dom[330173] c"dist") c"targetLocDom")) unknown isRngDomArr[331203] "maybe param" "temp"(331218 'move' isRngDomArr[331203](331216 call ||(331205 call isBoundedRange tmpIter[330718])(331214 call ||(331208 call isDomain tmpIter[330718])(331211 call isArray tmpIter[330718]))))
      if isRngDomArr[331203]
      { const _coforallCount[331075] "const" "end count" "temp"(331140 'move' _coforallCount[331075](331137 call _endCountAlloc 0)) unknown numTasks[331076] "temp"(331124 'move' numTasks[331076](331120 call . tmpIter[330718] c"size"))(331115 call _upEndCount _coforallCount[331075] 0 numTasks[331076]) unknown _indexOfInterest[331082] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[331083] "expr temp" "temp"(331092 'move' _iterator[331083](331090 call _getIterator tmpIter[330718]))
        Defer
        {
          {(331108 call _freeIterator _iterator[331083])
          }
        }
        { scopeless type(331097 'move' _indexOfInterest[331082](331094 call iteratorIndex _iterator[331083]))
        }
        ForLoop[331084]
        { unknown locid[331101] "coforall index var" "index var" "insert auto destroy"(331103 'move' locid[331101] _indexOfInterest[331082]) const tmp[330724] "const" "temp"(330726 'move' tmp[330724](330728 'deref'(330729 '_wide_get_locale'(330731 call targetLocs[330221] locid[331101]))))
          {
            { const myop[330739] "const"(330744 call(330741 call . op[330169] c"clone"))(330746 'end of statement') unknown myLocArrDesc[330748] "ref var"(330750 call(411260 call . this[330175] c"locArr") locid[331101])(330753 'end of statement') unknown myLocArr[330755] "ref var"(330757 call . myLocArrDesc[330748] c"myElems")(330761 'end of statement') const myLocDom[330763] "const" "ref var"(330765 call . myLocArr[330755] c"_dom")(330769 'end of statement') unknown tmp[330771] "temp"(330779 call(330773 call .(330775 call . myLocArr[330755] c"_value") c"chpl__preScan") myop[330739] res[330208](330783 call myLocDom[330763] dom[330173]))(330787 call _check_tuple_var_decl tmp[330771] 4) unknown numTasks[330790](330792 call tmp[330771] 0) unknown rngs[330795](330797 call tmp[330771] 1) unknown state[330800](330802 call tmp[330771] 2) unknown tot[330805](330807 call tmp[330771] 3)(330810 'end of statement')
              if(330812 call _cond_test debugBlockScan[330162])
              {(330817 call writeln locid[331101] ": "(330821 call _build_tuple numTasks[330790] rngs[330795] state[330800] tot[330805]))
              }(330828 call =(330830 call elemPerLoc[330249] 1) tot[330805])(330834 call =(330836 call inputReady$[330262] 1) 1)
              if(330840 call _cond_test(330842 call == locid[331101](330845 call .(330847 call .(330849 call . dom[330173] c"dist") c"targetLocDom") c"low")))
              { const metaop[330856] "const"(330861 call(330858 call . op[330169] c"clone"))(330863 'end of statement') unknown next[330865](330867 call . metaop[330856] c"identity") resType[330197](330872 'end of statement')
                { unknown _indexOfInterest[330874] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[330876] "expr temp" "temp"(330878 'move' _iterator[330876](330881 call _getIterator(330883 call .(330885 call . dom[330173] c"dist") c"targetLocDom")))
                  Defer
                  {
                    {(330891 call _freeIterator _iterator[330876])
                    }
                  }
                  { scopeless type(330895 'move' _indexOfInterest[330874](330898 call iteratorIndex _iterator[330876]))
                  }
                  ForLoop[330900]
                  { unknown locid[330903] "index var" "insert auto destroy"(330905 'move' locid[330903] _indexOfInterest[330874])
                    { const targetloc[330910] "const"(330912 call targetLocs[330221] locid[330903])(330915 'end of statement') const locready[330917] "const"(330924 call(330922 call(330919 call . inputReady$[330262] c"replicand") targetloc[330910]) 1)(330927 'end of statement') unknown locVal[330929] "ref var"(330936 call(330934 call(330931 call . elemPerLoc[330249] c"replicand") targetloc[330910]) 1)(330939 'end of statement')(330941 call <=> locVal[330929] next[330865])(330945 call =(330952 call(330950 call(330947 call . outputReady$[330275] c"replicand") targetloc[330910]) 1) 1)(330959 call(330956 call . metaop[330856] c"accumulateOntoState") next[330865] locVal[330929])
                    } label _continueLabel[330962] _indexOfInterest[330874] _iterator[330876]
                  } label _breakLabel[330964]
                }(330967 call chpl__delete metaop[330856])
              } const resready[330971] "const"(330973 call outputReady$[330275] 1)(330976 'end of statement') const myadjust[330978] "const"(330980 call elemPerLoc[330249] 1)(330983 'end of statement')
              if(330985 call _cond_test debugBlockScan[330162])
              {(330990 call writeln locid[331101] ": myadjust = " myadjust[330978])
              }
              { unknown _indexOfInterest[330996] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[330998] "expr temp" "temp"(331000 'move' _iterator[330998](331003 call _getIterator state[330800]))
                Defer
                {
                  {(331007 call _freeIterator _iterator[330998])
                  }
                }
                { scopeless type(331011 'move' _indexOfInterest[330996](331014 call iteratorIndex _iterator[330998]))
                }
                ForLoop[331016]
                { unknown s[331019] "index var" "insert auto destroy"(331021 'move' s[331019] _indexOfInterest[330996])(331029 call(331026 call . myop[330739] c"accumulateOntoState") s[331019] myadjust[330978]) label _continueLabel[331032] _indexOfInterest[330996] _iterator[330998]
                } label _breakLabel[331034]
              }
              if(331037 call _cond_test debugBlockScan[330162])
              {(331042 call writeln locid[331101] ": state = " state[330800])
              }(331054 call(331048 call .(331050 call . myLocArr[330755] c"_value") c"chpl__postScan") op[330169] res[330208] numTasks[330790] rngs[330795] state[330800])
              if(331061 call _cond_test debugBlockScan[330162])
              {(331066 call writeln locid[331101] ": " myLocArr[330755])
              }(331072 call chpl__delete myop[330739])
            }(331077 call _downEndCount _coforallCount[331075] nil[44])(330734 'coforall on block' 0 tmp[330724])
          } label _continueLabel[331087] _indexOfInterest[331082] _iterator[331083]
        } label _breakLabel[331088]
        Defer
        {
          {(331127 call _endCountFree _coforallCount[331075])
          }
        }(331132 call _waitEndCount _coforallCount[331075] 0 numTasks[331076])
      }
      { const _coforallCount[331144] "const" "end count" "temp"(331200 'move' _coforallCount[331144](331197 call _endCountAlloc 0)) unknown _indexOfInterest[331151] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[331152] "expr temp" "temp"(331161 'move' _iterator[331152](331159 call _getIterator tmpIter[330718]))
        Defer
        {
          {(331177 call _freeIterator _iterator[331152])
          }
        }
        { scopeless type(331166 'move' _indexOfInterest[331151](331163 call iteratorIndex _iterator[331152]))
        }
        ForLoop[331153]
        { unknown locid[331170] "coforall index var" "index var" "insert auto destroy"(331172 'move' locid[331170] _indexOfInterest[331151])(331184 call _upEndCount _coforallCount[331144] 0) const tmp[330709] "const" "temp"(330711 'move' tmp[330709](330707 'deref'(330706 '_wide_get_locale'(330290 call targetLocs[330221] locid[331170]))))
          {
            { const myop[330297] "const"(330296 call(330292 call . op[330169] c"clone"))(330300 'end of statement') unknown myLocArrDesc[330306] "ref var"(330305 call(411207 call . this[330175] c"locArr") locid[331170])(330309 'end of statement') unknown myLocArr[330314] "ref var"(330311 call . myLocArrDesc[330306] c"myElems")(330317 'end of statement') const myLocDom[330322] "const" "ref var"(330319 call . myLocArr[330314] c"_dom")(330325 'end of statement') unknown tmp[330350] "temp"(330349 call(330339 call .(330336 call . myLocArr[330314] c"_value") c"chpl__preScan") myop[330297] res[330208](330348 call myLocDom[330322] dom[330173]))(330363 call _check_tuple_var_decl tmp[330350] 4) unknown numTasks[330326](330351 call tmp[330350] 0) unknown rngs[330328](330354 call tmp[330350] 1) unknown state[330330](330357 call tmp[330350] 2) unknown tot[330332](330360 call tmp[330350] 3)(330368 'end of statement')
              if(330383 call _cond_test debugBlockScan[330162])
              {(330381 call writeln locid[331170] ": "(330379 call _build_tuple numTasks[330326] rngs[330328] state[330330] tot[330332]))
              }(330393 call =(330391 call elemPerLoc[330249] 1) tot[330332])(330401 call =(330399 call inputReady$[330262] 1) 1)
              if(330551 call _cond_test(330415 call == locid[331170](330412 call .(330409 call .(330406 call . dom[330173] c"dist") c"targetLocDom") c"low")))
              { const metaop[330423] "const"(330422 call(330418 call . op[330169] c"clone"))(330426 'end of statement') unknown next[330433](330430 call . metaop[330423] c"identity") resType[330197](330436 'end of statement')
                { unknown _indexOfInterest[330512] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[330513] "expr temp" "temp"(330522 'move' _iterator[330513](330520 call _getIterator(330442 call .(330439 call . dom[330173] c"dist") c"targetLocDom")))
                  Defer
                  {
                    {(330539 call _freeIterator _iterator[330513])
                    }
                  }
                  { scopeless type(330528 'move' _indexOfInterest[330512](330525 call iteratorIndex _iterator[330513]))
                  }
                  ForLoop[330514]
                  { unknown locid[330532] "index var" "insert auto destroy"(330534 'move' locid[330532] _indexOfInterest[330512])
                    { const targetloc[330449] "const"(330448 call targetLocs[330221] locid[330532])(330452 'end of statement') const locready[330466] "const"(330465 call(330462 call(330457 call . inputReady$[330262] c"replicand") targetloc[330449]) 1)(330469 'end of statement') unknown locVal[330480] "ref var"(330479 call(330476 call(330471 call . elemPerLoc[330249] c"replicand") targetloc[330449]) 1)(330483 'end of statement')(330486 call <=> locVal[330480] next[330433])(330500 call =(330498 call(330495 call(330490 call . outputReady$[330275] c"replicand") targetloc[330449]) 1) 1)(330510 call(330504 call . metaop[330423] c"accumulateOntoState") next[330433] locVal[330480])
                    } label _continueLabel[330517] _indexOfInterest[330512] _iterator[330513]
                  } label _breakLabel[330518]
                }(330548 call chpl__delete metaop[330423])
              } const resready[330559] "const"(330558 call outputReady$[330275] 1)(330562 'end of statement') const myadjust[330567] "const"(330566 call elemPerLoc[330249] 1)(330570 'end of statement')
              if(330595 call _cond_test debugBlockScan[330162])
              {(330593 call writeln locid[331170] ": myadjust = " myadjust[330567])
              }
              { unknown _indexOfInterest[330611] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[330612] "expr temp" "temp"(330621 'move' _iterator[330612](330619 call _getIterator state[330330]))
                Defer
                {
                  {(330637 call _freeIterator _iterator[330612])
                  }
                }
                { scopeless type(330626 'move' _indexOfInterest[330611](330623 call iteratorIndex _iterator[330612]))
                }
                ForLoop[330613]
                { unknown s[330630] "index var" "insert auto destroy"(330632 'move' s[330630] _indexOfInterest[330611])(330609 call(330603 call . myop[330297] c"accumulateOntoState") s[330630] myadjust[330567]) label _continueLabel[330616] _indexOfInterest[330611] _iterator[330612]
                } label _breakLabel[330617]
              }
              if(330668 call _cond_test debugBlockScan[330162])
              {(330666 call writeln locid[331170] ": state = " state[330330])
              }(330686 call(330677 call .(330674 call . myLocArr[330314] c"_value") c"chpl__postScan") op[330169] res[330208] numTasks[330326] rngs[330328] state[330330])
              if(330696 call _cond_test debugBlockScan[330162])
              {(330694 call writeln locid[331170] ": " myLocArr[330314])
              }(330703 call chpl__delete myop[330297])
            }(331146 call _downEndCount _coforallCount[331144] nil[44])(330714 'coforall on block' 0 tmp[330709])
          } label _continueLabel[331156] _indexOfInterest[331151] _iterator[331152]
        } label _breakLabel[331157]
        Defer
        {
          {(331188 call _endCountFree _coforallCount[331144])
          }
        }(331193 call _waitEndCount _coforallCount[331144] 0)
      }
    }(331224 call chpl__delete op[330169])(331228 return res[330208])(355608 'used modules list'(330213 'use' ReplicatedDist[353026]))
  }
  {(330188 call &&(330182 call ==(411186 call . this[330175] c"rank") 1)(330187 call chpl__scanStateResTypesMatch op[330169]))
  } function newBlockDom[331239](arg dom[331236] : _domain[125908](?)) : _unknown[51]
  {(331248 return(331246 call chpl__distributed(331245 call Block[408851](?) dom[331236]) dom[331236]))
  } function newBlockArr[331259](arg dom[331256] : _domain[125908](?), arg eltType[331261]:_any[178](?)) : _unknown[51]
  { unknown D[331267](331266 call newBlockDom dom[331256])(331270 'end of statement') unknown A[331279](331277 call chpl__buildArrayRuntimeType(331275 call chpl__ensureDomainExpr D[331267]) eltType[331261])(331282 'end of statement')(331284 return A[331279])
  } function newBlockDom[331296](arg rng[331292] ... : range[64319](?)) : _unknown[51]
  {(331306 return(331305 call newBlockDom(331302 call chpl__buildDomainExpr(331300 'expand_tuple' rng[331292]))))
  } function newBlockArr[331319](arg rng[331315] ... : range[64319](?), arg eltType[331321]:_any[178](?)) : _unknown[51]
  {(331332 return(331331 call newBlockArr(331327 call chpl__buildDomainExpr(331325 'expand_tuple' rng[331315])) eltType[331321]))
  }(355597 'used modules list'(353114 'use' ChapelStandard[20267])(316559 'use' DSIUtil[230909])(316562 'use' ChapelUtil[166964])(316565 'use' CommDiagnostics[222290])(316568 'use' ChapelLocks[187302])(316571 'use' ChapelDebugPrint[188155])(316574 'use' LayoutCS[341923])(316577 'use' SparseBlockDist[348554]))
}