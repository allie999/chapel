AST dump for SampleSortHelp after pass scopeResolve.
Module use list: ChapelStandard Sort Random ShallowCopy 

{ unknown maxLogBuckets[273814] "param" 8(273817 'end of statement') unknown classifyUnrollFactor[273819] "param" 7(273822 'end of statement') const equalBucketThreshold[273824] "const" 5(273827 'end of statement') const maxInline[273829] "const" 16(273832 'end of statement') const oversampleFactor[273836] "const" 0.2(273839 'end of statement') function log2int[273846](arg n[273843] : int(64)[13]) : _unknown[51]
  {
    if(273855 call _cond_test(273850 call <= n[273843] 0))
    {(273853 return 0)
    }(273865 return(273864 call log2 n[273843]))
  } function computeLogBucketSize[273875](arg n[273872] : int(64)[13]) : _unknown[51]
  { const LogBuckets[273878] "const" 8(273881 'end of statement') const BaseCaseSize[273884] "const" 16(273887 'end of statement') const BaseCaseMultiplier[273889] "const" 16(273892 'end of statement') const SingleLevelThreshold[273897] "const"(273895 call * maxInline[273829] LogBuckets[273878])(273900 'end of statement') const TwoLevelThreshold[273905] "const"(273903 call * SingleLevelThreshold[273897] LogBuckets[273878])(273908 'end of statement') unknown ret[273910] 0(273913 'end of statement')
    if(273968 call _cond_test(273916 call <= n[273872] SingleLevelThreshold[273897]))
    {(273929 call = ret[273910](273928 call log2int(273925 call /(273922 call / n[273872] maxInline[273829]) 2)))
    }
    {
      if(273964 call _cond_test(273935 call <= n[273872] TwoLevelThreshold[273905]))
      {(273954 call = ret[273910](273952 call /(273949 call +(273947 call log2int(273944 call /(273941 call / n[273872] maxInline[273829]) 2)) 1) 2))
      }
      {(273960 call = ret[273910] maxLogBuckets[273814])
      }
    }(273979 call = ret[273910](273978 call max 1 ret[273910]))(273988 call = ret[273910](273987 call min maxLogBuckets[273814] ret[273910]))(273992 return ret[273910])
  } function chooseSampleStep[274002](arg n[273999] : int(64)[13], arg logNumBuckets[274005] : int(64)[13]) : _unknown[51]
  { unknown oversample[274019](274018 call min 1.0(274016 call * oversampleFactor[273836](274015 call log2int n[273999])))(274022 'end of statement') unknown step[274032](274031 call max 1(274029 call _cast int(64)[13] oversample[274019]))(274035 'end of statement')(274037 return step[274032])
  } function SampleBucketizer[275438](?).writeThis[274088](arg _mt[275442]:_MT[238], arg this[275440]:SampleBucketizer[275438](?), arg ch[274086]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(274108 call <~> ch[274086] "SampleBucketizer(")(274133 call <~>(274130 call <~> ch[274086] "\n logBuckets=")(401992 call . this[275440] c"logBuckets"))(274157 call <~>(274154 call <~> ch[274086] "\n numBuckets=")(401998 call . this[275440] c"numBuckets"))(274181 call <~>(274178 call <~> ch[274086] "\n equalBuckets=")(402004 call . this[275440] c"equalBuckets"))(274202 call <~> ch[274086] "\n storage=")
    { unknown _indexOfInterest[274244] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274245] "expr temp" "temp"(274254 'move' _iterator[274245](274252 call _getIterator(274259 call chpl_direct_range_iter 0(402019 call . this[275440] c"numBuckets") 1)))
      Defer
      {
        {(274275 call _freeIterator _iterator[274245])
        }
      }
      { scopeless type(274264 'move' _indexOfInterest[274244](274261 call iteratorIndex _iterator[274245]))
      }
      ForLoop[274246]
      { unknown i[274268] "index var" "insert auto destroy"(274270 'move' i[274268] _indexOfInterest[274244])
        {(274240 call <~> ch[274086](274239 'try!-expr'(274238 call(274230 call . " %xt" c"format")(274236 call(402013 call . this[275440] c"storage") i[274268]))))
        } label _continueLabel[274249] _indexOfInterest[274244] _iterator[274245]
      } label _breakLabel[274250]
    }(274300 call <~> ch[274086] "\n sortedStorage=")
    { unknown _indexOfInterest[274324] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274325] "expr temp" "temp"(274334 'move' _iterator[274325](274332 call _getIterator(274339 call chpl_direct_range_iter 0(402032 call . this[275440] c"numBuckets") 1)))
      Defer
      {
        {(274355 call _freeIterator _iterator[274325])
        }
      }
      { scopeless type(274344 'move' _indexOfInterest[274324](274341 call iteratorIndex _iterator[274325]))
      }
      ForLoop[274326]
      { unknown i[274348] "index var" "insert auto destroy"(274350 'move' i[274348] _indexOfInterest[274324])
        {(274320 call <~> ch[274086](274319 'try!-expr'(274318 call(274310 call . " %xt" c"format")(274316 call(402026 call . this[275440] c"sortedStorage") i[274348]))))
        } label _continueLabel[274329] _indexOfInterest[274324] _iterator[274325]
      } label _breakLabel[274330]
    }(274364 call <~> ch[274086] ")\n")
  } function SampleBucketizer[275438](?).getNumBuckets[274371](arg _mt[275446]:_MT[238], arg this[275444]:SampleBucketizer[275438](?)) : _unknown[51] "method" "primary method"
  {(274383 return(274381 call *(402038 call . this[275444] c"numBuckets")(274379 call + 1(274377 call _cast int(64)[13](402043 call . this[275444] c"equalBuckets")))))
  } function SampleBucketizer[275438](?).getBinsToRecursivelySort[274390](arg _mt[275450]:_MT[238], arg this[275448]:SampleBucketizer[275438](?)) : _unknown[51] "method" "primary method"
  { unknown r[274397](274396 call range[64316](?)(stridable = 1))(274400 'end of statement')
    if(274434 call _cond_test(402049 call . this[275448] c"equalBuckets"))
    {(274416 call = r[274397](274414 call chpl_by(274411 call chpl_build_bounded_range 0(274409 call -(274407 call(402054 call . this[275448] c"getNumBuckets")) 1)) 2))
    }
    {(274430 call = r[274397](274428 call chpl_build_bounded_range 0(274426 call -(274424 call(402059 call . this[275448] c"getNumBuckets")) 1)))
    }(274439 return r[274397])
  } function SampleBucketizer[275438](?).getNextStartBit[274449](arg _mt[275454]:_MT[238], arg this[275452]:SampleBucketizer[275438](?), arg start_bit[274446] : int(64)[13]) : _unknown[51] "method" "primary method"
  {(274452 return start_bit[274446])
  } function SampleBucketizer[275438](?).build[274463](arg _mt[275458]:_MT[238], arg this[275456]:SampleBucketizer[275438](?), arg logBuckets[274460] : int(64)[13], arg equalBuckets[274466] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(274476 call =(274472 call . this[275456] c"logBuckets") logBuckets[274460])(274490 call =(274483 call . this[275456] c"numBuckets")(274488 call << 1 logBuckets[274460]))(274500 call =(274496 call . this[275456] c"equalBuckets") equalBuckets[274466]) unknown numSplitters[274510](274508 call -(274504 call . this[275456] c"numBuckets") 1)(274513 'end of statement')(274525 call =(274517 call(402069 call . this[275456] c"sortedStorage") numSplitters[274510])(274524 call(402075 call . this[275456] c"sortedStorage")(274521 call - numSplitters[274510] 1)))(274533 call(402080 call . this[275456] c"build") 0 numSplitters[274510] 1)
  } function SampleBucketizer[275438](?).build[274543](arg _mt[275462]:_MT[238], arg this[275460]:SampleBucketizer[275438](?), arg left[274540] : int(64)[13], arg right[274546] : int(64)[13], arg pos[274550] : int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown mid[274563](274561 call + left[274540](274559 call /(274556 call - right[274546] left[274540]) 2))(274566 'end of statement')(274576 call =(274571 call(402089 call . this[275460] c"storage") pos[274550])(274575 call(402095 call . this[275460] c"sortedStorage") mid[274563]))
    if(274610 call _cond_test(274584 call <(274581 call * 2 pos[274550])(402102 call . this[275460] c"numBuckets")))
    {(274594 call(402106 call . this[275460] c"build") left[274540] mid[274563](274592 call * 2 pos[274550]))(274608 call(402113 call . this[275460] c"build") mid[274563] right[274546](274606 call +(274603 call * 2 pos[274550]) 1))
    }
  } function SampleBucketizer[275438](?).splitter[274622](arg _mt[275466]:_MT[238], arg this[275464]:SampleBucketizer[275438](?), arg i[274619] : int(64)[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {(274629 return(274628 call(402126 call . this[275464] c"storage") i[274619]))
  }
  { scopeless type(402121 call . this[275464] c"eltType")
  } function SampleBucketizer[275438](?).sortedSplitter[274641](arg _mt[275470]:_MT[238], arg this[275468]:SampleBucketizer[275438](?), arg i[274638] : int(64)[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {(274648 return(274647 call(402137 call . this[275468] c"sortedStorage") i[274638]))
  }
  { scopeless type(402132 call . this[275468] c"eltType")
  } function SampleBucketizer[275438](?).bucketForRecord[274658](arg _mt[275474]:_MT[238], arg this[275472]:SampleBucketizer[275438](?), arg a[274656]:_any[178](?), arg criterion[274660]:_any[178](?), arg startbit[274662]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown bk[274665] 1(274668 'end of statement')
    { unknown _indexOfInterest[274703] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274704] "expr temp" "temp"(274713 'move' _iterator[274704](274711 call _getIterator(274720 call chpl_direct_counted_range_iter 0(402154 call . this[275472] c"logBuckets"))))
      Defer
      {
        {(274736 call _freeIterator _iterator[274704])
        }
      }
      { scopeless type(274725 'move' _indexOfInterest[274703](274722 call iteratorIndex _iterator[274704]))
      }
      ForLoop[274705]
      { unknown lg[274729] "index var" "insert auto destroy"(274731 'move' lg[274729] _indexOfInterest[274703])
        {(274699 call = bk[274665](274697 call +(274680 call * 2 bk[274665])(274695 call _cast int(64)[13](274692 call <(274690 call chpl_compare(274686 call(402146 call . this[275472] c"splitter") bk[274665]) a[274656] criterion[274660]) 0))))
        } label _continueLabel[274708] _indexOfInterest[274703] _iterator[274704]
      } label _breakLabel[274709]
    }
    if(274773 call _cond_test(402159 call . this[275472] c"equalBuckets"))
    {(274769 call = bk[274665](274767 call +(274747 call * 2 bk[274665])(274765 call _cast int(64)[13](274762 call ==(274760 call chpl_compare a[274656](274758 call(402168 call . this[275472] c"sortedSplitter")(274755 call - bk[274665](402174 call . this[275472] c"numBuckets"))) criterion[274660]) 0))))
    }(274789 return(274787 call - bk[274665](274784 IfExpr (402181 call . this[275472] c"equalBuckets") then
    { scopeless(274781 call * 2(402186 call . this[275472] c"numBuckets"))
    } else
    { scopeless(402191 call . this[275472] c"numBuckets")
    } )))
  } function SampleBucketizer[275438](?).classify[274797](arg _mt[275478]:_MT[238], arg this[275476]:SampleBucketizer[275438](?), arg A[274795]:_any[178](?), arg start_n[274799]:_any[178](?), arg end_n[274801]:_any[178](?), arg criterion[274803]:_any[178](?), arg startbit[274805]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { const paramEqualBuckets[274808] "const"(402196 call . this[275476] c"equalBuckets")(274811 'end of statement') const paramLogBuckets[274814] "const"(402201 call . this[275476] c"logBuckets")(274817 'end of statement') const paramNumBuckets[274828] "const"(274826 call << 1(274824 call + paramLogBuckets[274814](274822 call _cast int(64)[13] paramEqualBuckets[274808])))(274831 'end of statement') unknown b[274837](274836 call c_array[205785](?) int(64)[13] classifyUnrollFactor[273819])(274840 'end of statement') unknown cur[274842] start_n[274799](274845 'end of statement')
    { unknown tmp[275228] "temp"(275264 'move' tmp[275228](275253 call _cond_test(275255 call <= cur[274842](275258 call - end_n[274801](275261 call - classifyUnrollFactor[273819] 1)))))
      WhileDo[275233]
      {
        {
          { unknown _indexOfInterest[274873] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274874] "expr temp" "temp"(274883 'move' _iterator[274874](274881 call _getIterator(274891 call chpl_direct_range_iter 0(274888 call - classifyUnrollFactor[273819] 1) 1)))
            Defer
            {
              {(274907 call _freeIterator _iterator[274874])
              }
            }
            { scopeless type(274896 'move' _indexOfInterest[274873](274893 call iteratorIndex _iterator[274874]))
            }
            ForLoop[274875]
            { unknown i[274900] "index var" "insert auto destroy"(274902 'move' i[274900] _indexOfInterest[274873])
              {(274869 call =(274867 call b[274837] i[274900]) 1)
              } label _continueLabel[274878] _indexOfInterest[274873] _iterator[274874]
            } label _breakLabel[274879]
          }
          { unknown _indexOfInterest[275014] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275015] "expr temp" "temp"(275024 'move' _iterator[275015](275022 call _getIterator(275032 call chpl_direct_range_iter 0(275029 call - paramLogBuckets[274814] 1) 1)))
            Defer
            {
              {(275048 call _freeIterator _iterator[275015])
              }
            }
            { scopeless type(275037 'move' _indexOfInterest[275014](275034 call iteratorIndex _iterator[275015]))
            }
            ForLoop[275016]
            { unknown lg[275041] "index var" "insert auto destroy"(275043 'move' lg[275041] _indexOfInterest[275014])
              {
                { unknown _indexOfInterest[274972] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274973] "expr temp" "temp"(274982 'move' _iterator[274973](274980 call _getIterator(274990 call chpl_direct_range_iter 0(274987 call - classifyUnrollFactor[273819] 1) 1)))
                  Defer
                  {
                    {(275006 call _freeIterator _iterator[274973])
                    }
                  }
                  { scopeless type(274995 'move' _indexOfInterest[274972](274992 call iteratorIndex _iterator[274973]))
                  }
                  ForLoop[274974]
                  { unknown i[274999] "index var" "insert auto destroy"(275001 'move' i[274999] _indexOfInterest[274972])
                    {(274968 call =(274934 call b[274837] i[274999])(274966 call +(274940 call * 2(274939 call b[274837] i[274999]))(274964 call _cast int(64)[13](274961 call <(274959 call chpl_compare(274949 call(402217 call . this[275476] c"splitter")(274947 call b[274837] i[274999]))(274957 call A[274795](274954 call + cur[274842] i[274999])) criterion[274803]) 0))))
                    } label _continueLabel[274977] _indexOfInterest[274972] _iterator[274973]
                  } label _breakLabel[274978]
                }
              } label _continueLabel[275019] _indexOfInterest[275014] _iterator[275015]
            } label _breakLabel[275020]
          }
          if(275153 call _cond_test paramEqualBuckets[274808])
          {
            { unknown _indexOfInterest[275111] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275112] "expr temp" "temp"(275121 'move' _iterator[275112](275119 call _getIterator(275129 call chpl_direct_range_iter 0(275126 call - classifyUnrollFactor[273819] 1) 1)))
              Defer
              {
                {(275145 call _freeIterator _iterator[275112])
                }
              }
              { scopeless type(275134 'move' _indexOfInterest[275111](275131 call iteratorIndex _iterator[275112]))
              }
              ForLoop[275113]
              { unknown i[275138] "index var" "insert auto destroy"(275140 'move' i[275138] _indexOfInterest[275111])
                {(275107 call =(275067 call b[274837] i[275138])(275105 call +(275073 call * 2(275072 call b[274837] i[275138]))(275103 call _cast int(64)[13](275100 call ==(275098 call chpl_compare(275082 call A[274795](275079 call + cur[274842] i[275138]))(275096 call(402237 call . this[275476] c"sortedSplitter")(275093 call -(275088 call b[274837] i[275138])(275091 call / paramNumBuckets[274828] 2))) criterion[274803]) 0))))
                } label _continueLabel[275116] _indexOfInterest[275111] _iterator[275112]
              } label _breakLabel[275117]
            }
          }
          { unknown _indexOfInterest[275182] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275183] "expr temp" "temp"(275192 'move' _iterator[275183](275190 call _getIterator(275200 call chpl_direct_range_iter 0(275197 call - classifyUnrollFactor[273819] 1) 1)))
            Defer
            {
              {(275216 call _freeIterator _iterator[275183])
              }
            }
            { scopeless type(275205 'move' _indexOfInterest[275182](275202 call iteratorIndex _iterator[275183]))
            }
            ForLoop[275184]
            { unknown i[275209] "index var" "insert auto destroy"(275211 'move' i[275209] _indexOfInterest[275182])
              {(275179 yield(275177 call _build_tuple(275167 call + cur[274842] i[275209])(275174 call -(275172 call b[274837] i[275209]) paramNumBuckets[274828])))
              } label _continueLabel[275187] _indexOfInterest[275182] _iterator[275183]
            } label _breakLabel[275188]
          }(275225 call += cur[274842] classifyUnrollFactor[273819])
        } label _continueLabel[275231](275248 'move' tmp[275228](275237 call _cond_test(275239 call <= cur[274842](275242 call - end_n[274801](275245 call - classifyUnrollFactor[273819] 1))))) tmp[275228]
      } label _breakLabel[275232]
    }
    { unknown tmp[275408] "temp"(275432 'move' tmp[275408](275427 call _cond_test(275429 call <= cur[274842] end_n[274801])))
      WhileDo[275413]
      {
        { unknown bk[275272] 1(275275 'end of statement')
          { unknown _indexOfInterest[275313] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275314] "expr temp" "temp"(275323 'move' _iterator[275314](275321 call _getIterator(275330 call chpl_direct_counted_range_iter 0 paramLogBuckets[274814])))
            Defer
            {
              {(275346 call _freeIterator _iterator[275314])
              }
            }
            { scopeless type(275335 'move' _indexOfInterest[275313](275332 call iteratorIndex _iterator[275314]))
            }
            ForLoop[275315]
            { unknown lg[275339] "index var" "insert auto destroy"(275341 'move' lg[275339] _indexOfInterest[275313])
              {(275309 call = bk[275272](275307 call +(275287 call * 2 bk[275272])(275305 call _cast int(64)[13](275302 call <(275300 call chpl_compare(275293 call(402262 call . this[275476] c"splitter") bk[275272])(275298 call A[274795] cur[274842]) criterion[274803]) 0))))
              } label _continueLabel[275318] _indexOfInterest[275313] _iterator[275314]
            } label _breakLabel[275319]
          }
          if(275389 call _cond_test paramEqualBuckets[274808])
          {(275385 call = bk[275272](275383 call +(275357 call * 2 bk[275272])(275381 call _cast int(64)[13](275378 call ==(275376 call chpl_compare(275363 call A[274795] cur[274842])(275374 call(402276 call . this[275476] c"sortedSplitter")(275371 call - bk[275272](275369 call / paramNumBuckets[274828] 2))) criterion[274803]) 0))))
          }(275401 yield(275399 call _build_tuple cur[274842](275396 call - bk[275272] paramNumBuckets[274828])))(275405 call += cur[274842] 1)
        } label _continueLabel[275411](275422 'move' tmp[275408](275417 call _cond_test(275419 call <= cur[274842] end_n[274801]))) tmp[275408]
      } label _breakLabel[275412]
    }
  } type SampleBucketizer[275438](?) unknown eltType[274042] "type variable" unknown storage[274053](274052 call c_array[205785](?) eltType[274042](274050 call << 1 maxLogBuckets[273814])) unknown sortedStorage[274065](274064 call c_array[205785](?) eltType[274042](274062 call << 1 maxLogBuckets[273814])) unknown logBuckets[274070] int(64)[13] unknown numBuckets[274075] int(64)[13] unknown equalBuckets[274080] bool[10] function createSplittersFromSample[275485](arg A[275483]:_any[178](?), ref arg splitterBucketizer[275488] : SampleBucketizer[275438](?), arg criterion[275491]:_any[178](?), arg start_n[275494] : int(64)[13], arg sampleSize[275498] : int(64)[13], arg sampleStep[275502] : int(64)[13], in arg numBuckets[275506] : int(64)[13], arg forceEqualBuckets[275511] : ?[260] = none[57]) : _unknown[51] "no return value for void"
  { unknown splitters[275521] "ref var"(275518 call . splitterBucketizer[275488] c"sortedStorage")(275524 'end of statement') unknown arrayIndex[275533](275531 call -(275528 call + start_n[275494] sampleStep[275502]) 1)(275536 'end of statement') unknown splitterIndex[275538] 0(275541 'end of statement')(275550 call =(275545 call splitters[275521] splitterIndex[275538])(275549 call A[275483] arrayIndex[275533]))
    { unknown _indexOfInterest[275603] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275604] "expr temp" "temp"(275613 'move' _iterator[275604](275611 call _getIterator(275621 call chpl_direct_range_iter 2(275618 call - numBuckets[275506] 1) 1)))
      Defer
      {
        {(275637 call _freeIterator _iterator[275604])
        }
      }
      { scopeless type(275626 'move' _indexOfInterest[275603](275623 call iteratorIndex _iterator[275604]))
      }
      ForLoop[275605]
      { unknown i[275630] "index var" "insert auto destroy"(275632 'move' i[275630] _indexOfInterest[275603])
        {(275563 call += arrayIndex[275533] sampleStep[275502])
          if(275599 call _cond_test(275580 call !=(275578 call chpl_compare(275571 call splitters[275521] splitterIndex[275538])(275576 call A[275483] arrayIndex[275533]) criterion[275491]) 0))
          {(275584 call += splitterIndex[275538] 1)(275596 call =(275591 call splitters[275521] splitterIndex[275538])(275595 call A[275483] arrayIndex[275533]))
          }
        } label _continueLabel[275608] _indexOfInterest[275603] _iterator[275604]
      } label _breakLabel[275609]
    } unknown uniqueSplitters[275648](275646 call + 1 splitterIndex[275538])(275651 'end of statement') unknown myUseEqualBuckets[275662](275660 call >=(275657 call -(275654 call - numBuckets[275506] 1) uniqueSplitters[275648]) equalBucketThreshold[273824])(275665 'end of statement')
    if(275685 call _cond_test(275677 call <(275671 call + 1(275669 call * 2 uniqueSplitters[275648]))(275675 call << 1 maxLogBuckets[273814])))
    {(275681 call = myUseEqualBuckets[275662] 1)
    }
    if(275699 call _cond_test(275692 call !=(275690 'typeof' forceEqualBuckets[275511]) nothing[7]))
    {(275696 call = myUseEqualBuckets[275662] forceEqualBuckets[275511])
    } unknown logBuckets[275711](275709 call +(275707 call log2 uniqueSplitters[275648]) 1)(275714 'end of statement')(275720 call = numBuckets[275506](275718 call << 1 logBuckets[275711]))
    { unknown _indexOfInterest[275751] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275752] "expr temp" "temp"(275761 'move' _iterator[275752](275759 call _getIterator(275772 call chpl_direct_range_iter(275765 call + uniqueSplitters[275648] 1)(275769 call - numBuckets[275506] 1) 1)))
      Defer
      {
        {(275788 call _freeIterator _iterator[275752])
        }
      }
      { scopeless type(275777 'move' _indexOfInterest[275751](275774 call iteratorIndex _iterator[275752]))
      }
      ForLoop[275753]
      { unknown i[275781] "index var" "insert auto destroy"(275783 'move' i[275781] _indexOfInterest[275751])
        {(275736 call += splitterIndex[275538] 1)(275748 call =(275743 call splitters[275521] splitterIndex[275538])(275747 call A[275483] arrayIndex[275533]))
        } label _continueLabel[275756] _indexOfInterest[275751] _iterator[275752]
      } label _breakLabel[275757]
    }(275804 call(275798 call . splitterBucketizer[275488] c"build") logBuckets[275711] myUseEqualBuckets[275662])
  } function putRandomSampleAtArrayStart[275814](in arg start_n[275811] : int(64)[13], arg end_n[275817] : int(64)[13], arg A[275823] :(275820 call chpl__buildArrayRuntimeType nil[44]), in arg numSamples[275827] : int(64)[13], arg seed[275831] = 1) : _unknown[51] "no return value for void"
  { unknown Tmp[275857](275855 call chpl__buildArrayRuntimeType(275853 call chpl__ensureDomainExpr(275846 call chpl_build_bounded_range 1 1))(275850 call . A[275823] c"eltType"))(275860 'end of statement') unknown randNums[275870](275869 call createRandomStream(seed = seed[275831])(eltType = int(64)[13])(parSafe = 0))(275873 'end of statement')
    { unknown tmp[275955] "temp"(275979 'move' tmp[275955](275974 call _cond_test(275976 call > numSamples[275827] 0)))
      WhileDo[275960]
      {
        {(275880 call -= numSamples[275827] 1) unknown offset[275894](275893 call(275887 call . randNums[275870] c"getNext") start_n[275811] end_n[275817])(275897 'end of statement')
          if(275946 call _cond_test(275900 call != offset[275894] start_n[275811]))
          { unknown tmp[275906](275903 call . A[275823] c"eltType")(275909 'end of statement')(275921 call shallowCopy module=[255] ShallowCopy[277293] Tmp[275857] 1 A[275823] start_n[275811] 1)(275932 call shallowCopy module=[255] ShallowCopy[277293] A[275823] start_n[275811] offset[275894] 1)(275944 call shallowCopy module=[255] ShallowCopy[277293] A[275823] offset[275894] Tmp[275857] 1 1)(364193 'referenced modules list' ShallowCopy[277293] ShallowCopy[277293] ShallowCopy[277293])
          }(275952 call += start_n[275811] 1)
        } label _continueLabel[275958](275969 'move' tmp[275955](275964 call _cond_test(275966 call > numSamples[275827] 0))) tmp[275955]
      } label _breakLabel[275959]
    }(355276 'used modules list'(275835 'use' Random[304561])(275842 'import' ShallowCopy[277293]))
  }(355273 'used modules list'(352948 'use' ChapelStandard[20264])(273810 'use' Sort[267880]))
}