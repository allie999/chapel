AST dump for SampleSortHelp after pass scopeResolve.
Module use list: ChapelStandard Sort Random ShallowCopy 

{ unknown maxLogBuckets[273902] "param" 8(273905 'end of statement') unknown classifyUnrollFactor[273907] "param" 7(273910 'end of statement') const equalBucketThreshold[273912] "const" 5(273915 'end of statement') const maxInline[273917] "const" 16(273920 'end of statement') const oversampleFactor[273924] "const" 0.2(273927 'end of statement') function log2int[273934](arg n[273931] : int(64)[13]) : _unknown[51]
  {
    if(273943 call _cond_test(273938 call <= n[273931] 0))
    {(273941 return 0)
    }(273953 return(273952 call log2 n[273931]))
  } function computeLogBucketSize[273963](arg n[273960] : int(64)[13]) : _unknown[51]
  { const LogBuckets[273966] "const" 8(273969 'end of statement') const BaseCaseSize[273972] "const" 16(273975 'end of statement') const BaseCaseMultiplier[273977] "const" 16(273980 'end of statement') const SingleLevelThreshold[273985] "const"(273983 call * maxInline[273917] LogBuckets[273966])(273988 'end of statement') const TwoLevelThreshold[273993] "const"(273991 call * SingleLevelThreshold[273985] LogBuckets[273966])(273996 'end of statement') unknown ret[273998] 0(274001 'end of statement')
    if(274056 call _cond_test(274004 call <= n[273960] SingleLevelThreshold[273985]))
    {(274017 call = ret[273998](274016 call log2int(274013 call /(274010 call / n[273960] maxInline[273917]) 2)))
    }
    {
      if(274052 call _cond_test(274023 call <= n[273960] TwoLevelThreshold[273993]))
      {(274042 call = ret[273998](274040 call /(274037 call +(274035 call log2int(274032 call /(274029 call / n[273960] maxInline[273917]) 2)) 1) 2))
      }
      {(274048 call = ret[273998] maxLogBuckets[273902])
      }
    }(274067 call = ret[273998](274066 call max 1 ret[273998]))(274076 call = ret[273998](274075 call min maxLogBuckets[273902] ret[273998]))(274080 return ret[273998])
  } function chooseSampleStep[274090](arg n[274087] : int(64)[13], arg logNumBuckets[274093] : int(64)[13]) : _unknown[51]
  { unknown oversample[274107](274106 call min 1.0(274104 call * oversampleFactor[273924](274103 call log2int n[274087])))(274110 'end of statement') unknown step[274120](274119 call max 1(274117 call _cast int(64)[13] oversample[274107]))(274123 'end of statement')(274125 return step[274120])
  } function SampleBucketizer[275526](?).writeThis[274176](arg _mt[275530]:_MT[238], arg this[275528]:SampleBucketizer[275526](?), arg ch[274174]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(274196 call <~> ch[274174] "SampleBucketizer(")(274221 call <~>(274218 call <~> ch[274174] "\n logBuckets=")(402081 call . this[275528] c"logBuckets"))(274245 call <~>(274242 call <~> ch[274174] "\n numBuckets=")(402087 call . this[275528] c"numBuckets"))(274269 call <~>(274266 call <~> ch[274174] "\n equalBuckets=")(402093 call . this[275528] c"equalBuckets"))(274290 call <~> ch[274174] "\n storage=")
    { unknown _indexOfInterest[274332] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274333] "expr temp" "temp"(274342 'move' _iterator[274333](274340 call _getIterator(274347 call chpl_direct_range_iter 0(402108 call . this[275528] c"numBuckets") 1)))
      Defer
      {
        {(274363 call _freeIterator _iterator[274333])
        }
      }
      { scopeless type(274352 'move' _indexOfInterest[274332](274349 call iteratorIndex _iterator[274333]))
      }
      ForLoop[274334]
      { unknown i[274356] "index var" "insert auto destroy"(274358 'move' i[274356] _indexOfInterest[274332])
        {(274328 call <~> ch[274174](274327 'try!-expr'(274326 call(274318 call . " %xt" c"format")(274324 call(402102 call . this[275528] c"storage") i[274356]))))
        } label _continueLabel[274337] _indexOfInterest[274332] _iterator[274333]
      } label _breakLabel[274338]
    }(274388 call <~> ch[274174] "\n sortedStorage=")
    { unknown _indexOfInterest[274412] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274413] "expr temp" "temp"(274422 'move' _iterator[274413](274420 call _getIterator(274427 call chpl_direct_range_iter 0(402121 call . this[275528] c"numBuckets") 1)))
      Defer
      {
        {(274443 call _freeIterator _iterator[274413])
        }
      }
      { scopeless type(274432 'move' _indexOfInterest[274412](274429 call iteratorIndex _iterator[274413]))
      }
      ForLoop[274414]
      { unknown i[274436] "index var" "insert auto destroy"(274438 'move' i[274436] _indexOfInterest[274412])
        {(274408 call <~> ch[274174](274407 'try!-expr'(274406 call(274398 call . " %xt" c"format")(274404 call(402115 call . this[275528] c"sortedStorage") i[274436]))))
        } label _continueLabel[274417] _indexOfInterest[274412] _iterator[274413]
      } label _breakLabel[274418]
    }(274452 call <~> ch[274174] ")\n")
  } function SampleBucketizer[275526](?).getNumBuckets[274459](arg _mt[275534]:_MT[238], arg this[275532]:SampleBucketizer[275526](?)) : _unknown[51] "method" "primary method"
  {(274471 return(274469 call *(402127 call . this[275532] c"numBuckets")(274467 call + 1(274465 call _cast int(64)[13](402132 call . this[275532] c"equalBuckets")))))
  } function SampleBucketizer[275526](?).getBinsToRecursivelySort[274478](arg _mt[275538]:_MT[238], arg this[275536]:SampleBucketizer[275526](?)) : _unknown[51] "method" "primary method"
  { unknown r[274485](274484 call range[64316](?)(stridable = 1))(274488 'end of statement')
    if(274522 call _cond_test(402138 call . this[275536] c"equalBuckets"))
    {(274504 call = r[274485](274502 call chpl_by(274499 call chpl_build_bounded_range 0(274497 call -(274495 call(402143 call . this[275536] c"getNumBuckets")) 1)) 2))
    }
    {(274518 call = r[274485](274516 call chpl_build_bounded_range 0(274514 call -(274512 call(402148 call . this[275536] c"getNumBuckets")) 1)))
    }(274527 return r[274485])
  } function SampleBucketizer[275526](?).getNextStartBit[274537](arg _mt[275542]:_MT[238], arg this[275540]:SampleBucketizer[275526](?), arg start_bit[274534] : int(64)[13]) : _unknown[51] "method" "primary method"
  {(274540 return start_bit[274534])
  } function SampleBucketizer[275526](?).build[274551](arg _mt[275546]:_MT[238], arg this[275544]:SampleBucketizer[275526](?), arg logBuckets[274548] : int(64)[13], arg equalBuckets[274554] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(274564 call =(274560 call . this[275544] c"logBuckets") logBuckets[274548])(274578 call =(274571 call . this[275544] c"numBuckets")(274576 call << 1 logBuckets[274548]))(274588 call =(274584 call . this[275544] c"equalBuckets") equalBuckets[274554]) unknown numSplitters[274598](274596 call -(274592 call . this[275544] c"numBuckets") 1)(274601 'end of statement')(274613 call =(274605 call(402158 call . this[275544] c"sortedStorage") numSplitters[274598])(274612 call(402164 call . this[275544] c"sortedStorage")(274609 call - numSplitters[274598] 1)))(274621 call(402169 call . this[275544] c"build") 0 numSplitters[274598] 1)
  } function SampleBucketizer[275526](?).build[274631](arg _mt[275550]:_MT[238], arg this[275548]:SampleBucketizer[275526](?), arg left[274628] : int(64)[13], arg right[274634] : int(64)[13], arg pos[274638] : int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown mid[274651](274649 call + left[274628](274647 call /(274644 call - right[274634] left[274628]) 2))(274654 'end of statement')(274664 call =(274659 call(402178 call . this[275548] c"storage") pos[274638])(274663 call(402184 call . this[275548] c"sortedStorage") mid[274651]))
    if(274698 call _cond_test(274672 call <(274669 call * 2 pos[274638])(402191 call . this[275548] c"numBuckets")))
    {(274682 call(402195 call . this[275548] c"build") left[274628] mid[274651](274680 call * 2 pos[274638]))(274696 call(402202 call . this[275548] c"build") mid[274651] right[274634](274694 call +(274691 call * 2 pos[274638]) 1))
    }
  } function SampleBucketizer[275526](?).splitter[274710](arg _mt[275554]:_MT[238], arg this[275552]:SampleBucketizer[275526](?), arg i[274707] : int(64)[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {(274717 return(274716 call(402215 call . this[275552] c"storage") i[274707]))
  }
  { scopeless type(402210 call . this[275552] c"eltType")
  } function SampleBucketizer[275526](?).sortedSplitter[274729](arg _mt[275558]:_MT[238], arg this[275556]:SampleBucketizer[275526](?), arg i[274726] : int(64)[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {(274736 return(274735 call(402226 call . this[275556] c"sortedStorage") i[274726]))
  }
  { scopeless type(402221 call . this[275556] c"eltType")
  } function SampleBucketizer[275526](?).bucketForRecord[274746](arg _mt[275562]:_MT[238], arg this[275560]:SampleBucketizer[275526](?), arg a[274744]:_any[178](?), arg criterion[274748]:_any[178](?), arg startbit[274750]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown bk[274753] 1(274756 'end of statement')
    { unknown _indexOfInterest[274791] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274792] "expr temp" "temp"(274801 'move' _iterator[274792](274799 call _getIterator(274808 call chpl_direct_counted_range_iter 0(402243 call . this[275560] c"logBuckets"))))
      Defer
      {
        {(274824 call _freeIterator _iterator[274792])
        }
      }
      { scopeless type(274813 'move' _indexOfInterest[274791](274810 call iteratorIndex _iterator[274792]))
      }
      ForLoop[274793]
      { unknown lg[274817] "index var" "insert auto destroy"(274819 'move' lg[274817] _indexOfInterest[274791])
        {(274787 call = bk[274753](274785 call +(274768 call * 2 bk[274753])(274783 call _cast int(64)[13](274780 call <(274778 call chpl_compare(274774 call(402235 call . this[275560] c"splitter") bk[274753]) a[274744] criterion[274748]) 0))))
        } label _continueLabel[274796] _indexOfInterest[274791] _iterator[274792]
      } label _breakLabel[274797]
    }
    if(274861 call _cond_test(402248 call . this[275560] c"equalBuckets"))
    {(274857 call = bk[274753](274855 call +(274835 call * 2 bk[274753])(274853 call _cast int(64)[13](274850 call ==(274848 call chpl_compare a[274744](274846 call(402257 call . this[275560] c"sortedSplitter")(274843 call - bk[274753](402263 call . this[275560] c"numBuckets"))) criterion[274748]) 0))))
    }(274877 return(274875 call - bk[274753](274872 IfExpr (402270 call . this[275560] c"equalBuckets") then
    { scopeless(274869 call * 2(402275 call . this[275560] c"numBuckets"))
    } else
    { scopeless(402280 call . this[275560] c"numBuckets")
    } )))
  } function SampleBucketizer[275526](?).classify[274885](arg _mt[275566]:_MT[238], arg this[275564]:SampleBucketizer[275526](?), arg A[274883]:_any[178](?), arg start_n[274887]:_any[178](?), arg end_n[274889]:_any[178](?), arg criterion[274891]:_any[178](?), arg startbit[274893]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { const paramEqualBuckets[274896] "const"(402285 call . this[275564] c"equalBuckets")(274899 'end of statement') const paramLogBuckets[274902] "const"(402290 call . this[275564] c"logBuckets")(274905 'end of statement') const paramNumBuckets[274916] "const"(274914 call << 1(274912 call + paramLogBuckets[274902](274910 call _cast int(64)[13] paramEqualBuckets[274896])))(274919 'end of statement') unknown b[274925](274924 call c_array[205785](?) int(64)[13] classifyUnrollFactor[273907])(274928 'end of statement') unknown cur[274930] start_n[274887](274933 'end of statement')
    { unknown tmp[275316] "temp"(275352 'move' tmp[275316](275341 call _cond_test(275343 call <= cur[274930](275346 call - end_n[274889](275349 call - classifyUnrollFactor[273907] 1)))))
      WhileDo[275321]
      {
        {
          { unknown _indexOfInterest[274961] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274962] "expr temp" "temp"(274971 'move' _iterator[274962](274969 call _getIterator(274979 call chpl_direct_range_iter 0(274976 call - classifyUnrollFactor[273907] 1) 1)))
            Defer
            {
              {(274995 call _freeIterator _iterator[274962])
              }
            }
            { scopeless type(274984 'move' _indexOfInterest[274961](274981 call iteratorIndex _iterator[274962]))
            }
            ForLoop[274963]
            { unknown i[274988] "index var" "insert auto destroy"(274990 'move' i[274988] _indexOfInterest[274961])
              {(274957 call =(274955 call b[274925] i[274988]) 1)
              } label _continueLabel[274966] _indexOfInterest[274961] _iterator[274962]
            } label _breakLabel[274967]
          }
          { unknown _indexOfInterest[275102] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275103] "expr temp" "temp"(275112 'move' _iterator[275103](275110 call _getIterator(275120 call chpl_direct_range_iter 0(275117 call - paramLogBuckets[274902] 1) 1)))
            Defer
            {
              {(275136 call _freeIterator _iterator[275103])
              }
            }
            { scopeless type(275125 'move' _indexOfInterest[275102](275122 call iteratorIndex _iterator[275103]))
            }
            ForLoop[275104]
            { unknown lg[275129] "index var" "insert auto destroy"(275131 'move' lg[275129] _indexOfInterest[275102])
              {
                { unknown _indexOfInterest[275060] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275061] "expr temp" "temp"(275070 'move' _iterator[275061](275068 call _getIterator(275078 call chpl_direct_range_iter 0(275075 call - classifyUnrollFactor[273907] 1) 1)))
                  Defer
                  {
                    {(275094 call _freeIterator _iterator[275061])
                    }
                  }
                  { scopeless type(275083 'move' _indexOfInterest[275060](275080 call iteratorIndex _iterator[275061]))
                  }
                  ForLoop[275062]
                  { unknown i[275087] "index var" "insert auto destroy"(275089 'move' i[275087] _indexOfInterest[275060])
                    {(275056 call =(275022 call b[274925] i[275087])(275054 call +(275028 call * 2(275027 call b[274925] i[275087]))(275052 call _cast int(64)[13](275049 call <(275047 call chpl_compare(275037 call(402306 call . this[275564] c"splitter")(275035 call b[274925] i[275087]))(275045 call A[274883](275042 call + cur[274930] i[275087])) criterion[274891]) 0))))
                    } label _continueLabel[275065] _indexOfInterest[275060] _iterator[275061]
                  } label _breakLabel[275066]
                }
              } label _continueLabel[275107] _indexOfInterest[275102] _iterator[275103]
            } label _breakLabel[275108]
          }
          if(275241 call _cond_test paramEqualBuckets[274896])
          {
            { unknown _indexOfInterest[275199] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275200] "expr temp" "temp"(275209 'move' _iterator[275200](275207 call _getIterator(275217 call chpl_direct_range_iter 0(275214 call - classifyUnrollFactor[273907] 1) 1)))
              Defer
              {
                {(275233 call _freeIterator _iterator[275200])
                }
              }
              { scopeless type(275222 'move' _indexOfInterest[275199](275219 call iteratorIndex _iterator[275200]))
              }
              ForLoop[275201]
              { unknown i[275226] "index var" "insert auto destroy"(275228 'move' i[275226] _indexOfInterest[275199])
                {(275195 call =(275155 call b[274925] i[275226])(275193 call +(275161 call * 2(275160 call b[274925] i[275226]))(275191 call _cast int(64)[13](275188 call ==(275186 call chpl_compare(275170 call A[274883](275167 call + cur[274930] i[275226]))(275184 call(402326 call . this[275564] c"sortedSplitter")(275181 call -(275176 call b[274925] i[275226])(275179 call / paramNumBuckets[274916] 2))) criterion[274891]) 0))))
                } label _continueLabel[275204] _indexOfInterest[275199] _iterator[275200]
              } label _breakLabel[275205]
            }
          }
          { unknown _indexOfInterest[275270] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275271] "expr temp" "temp"(275280 'move' _iterator[275271](275278 call _getIterator(275288 call chpl_direct_range_iter 0(275285 call - classifyUnrollFactor[273907] 1) 1)))
            Defer
            {
              {(275304 call _freeIterator _iterator[275271])
              }
            }
            { scopeless type(275293 'move' _indexOfInterest[275270](275290 call iteratorIndex _iterator[275271]))
            }
            ForLoop[275272]
            { unknown i[275297] "index var" "insert auto destroy"(275299 'move' i[275297] _indexOfInterest[275270])
              {(275267 yield(275265 call _build_tuple(275255 call + cur[274930] i[275297])(275262 call -(275260 call b[274925] i[275297]) paramNumBuckets[274916])))
              } label _continueLabel[275275] _indexOfInterest[275270] _iterator[275271]
            } label _breakLabel[275276]
          }(275313 call += cur[274930] classifyUnrollFactor[273907])
        } label _continueLabel[275319](275336 'move' tmp[275316](275325 call _cond_test(275327 call <= cur[274930](275330 call - end_n[274889](275333 call - classifyUnrollFactor[273907] 1))))) tmp[275316]
      } label _breakLabel[275320]
    }
    { unknown tmp[275496] "temp"(275520 'move' tmp[275496](275515 call _cond_test(275517 call <= cur[274930] end_n[274889])))
      WhileDo[275501]
      {
        { unknown bk[275360] 1(275363 'end of statement')
          { unknown _indexOfInterest[275401] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275402] "expr temp" "temp"(275411 'move' _iterator[275402](275409 call _getIterator(275418 call chpl_direct_counted_range_iter 0 paramLogBuckets[274902])))
            Defer
            {
              {(275434 call _freeIterator _iterator[275402])
              }
            }
            { scopeless type(275423 'move' _indexOfInterest[275401](275420 call iteratorIndex _iterator[275402]))
            }
            ForLoop[275403]
            { unknown lg[275427] "index var" "insert auto destroy"(275429 'move' lg[275427] _indexOfInterest[275401])
              {(275397 call = bk[275360](275395 call +(275375 call * 2 bk[275360])(275393 call _cast int(64)[13](275390 call <(275388 call chpl_compare(275381 call(402351 call . this[275564] c"splitter") bk[275360])(275386 call A[274883] cur[274930]) criterion[274891]) 0))))
              } label _continueLabel[275406] _indexOfInterest[275401] _iterator[275402]
            } label _breakLabel[275407]
          }
          if(275477 call _cond_test paramEqualBuckets[274896])
          {(275473 call = bk[275360](275471 call +(275445 call * 2 bk[275360])(275469 call _cast int(64)[13](275466 call ==(275464 call chpl_compare(275451 call A[274883] cur[274930])(275462 call(402365 call . this[275564] c"sortedSplitter")(275459 call - bk[275360](275457 call / paramNumBuckets[274916] 2))) criterion[274891]) 0))))
          }(275489 yield(275487 call _build_tuple cur[274930](275484 call - bk[275360] paramNumBuckets[274916])))(275493 call += cur[274930] 1)
        } label _continueLabel[275499](275510 'move' tmp[275496](275505 call _cond_test(275507 call <= cur[274930] end_n[274889]))) tmp[275496]
      } label _breakLabel[275500]
    }
  } type SampleBucketizer[275526](?) unknown eltType[274130] "type variable" unknown storage[274141](274140 call c_array[205785](?) eltType[274130](274138 call << 1 maxLogBuckets[273902])) unknown sortedStorage[274153](274152 call c_array[205785](?) eltType[274130](274150 call << 1 maxLogBuckets[273902])) unknown logBuckets[274158] int(64)[13] unknown numBuckets[274163] int(64)[13] unknown equalBuckets[274168] bool[10] function createSplittersFromSample[275573](arg A[275571]:_any[178](?), ref arg splitterBucketizer[275576] : SampleBucketizer[275526](?), arg criterion[275579]:_any[178](?), arg start_n[275582] : int(64)[13], arg sampleSize[275586] : int(64)[13], arg sampleStep[275590] : int(64)[13], in arg numBuckets[275594] : int(64)[13], arg forceEqualBuckets[275599] : ?[260] = none[57]) : _unknown[51] "no return value for void"
  { unknown splitters[275609] "ref var"(275606 call . splitterBucketizer[275576] c"sortedStorage")(275612 'end of statement') unknown arrayIndex[275621](275619 call -(275616 call + start_n[275582] sampleStep[275590]) 1)(275624 'end of statement') unknown splitterIndex[275626] 0(275629 'end of statement')(275638 call =(275633 call splitters[275609] splitterIndex[275626])(275637 call A[275571] arrayIndex[275621]))
    { unknown _indexOfInterest[275691] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275692] "expr temp" "temp"(275701 'move' _iterator[275692](275699 call _getIterator(275709 call chpl_direct_range_iter 2(275706 call - numBuckets[275594] 1) 1)))
      Defer
      {
        {(275725 call _freeIterator _iterator[275692])
        }
      }
      { scopeless type(275714 'move' _indexOfInterest[275691](275711 call iteratorIndex _iterator[275692]))
      }
      ForLoop[275693]
      { unknown i[275718] "index var" "insert auto destroy"(275720 'move' i[275718] _indexOfInterest[275691])
        {(275651 call += arrayIndex[275621] sampleStep[275590])
          if(275687 call _cond_test(275668 call !=(275666 call chpl_compare(275659 call splitters[275609] splitterIndex[275626])(275664 call A[275571] arrayIndex[275621]) criterion[275579]) 0))
          {(275672 call += splitterIndex[275626] 1)(275684 call =(275679 call splitters[275609] splitterIndex[275626])(275683 call A[275571] arrayIndex[275621]))
          }
        } label _continueLabel[275696] _indexOfInterest[275691] _iterator[275692]
      } label _breakLabel[275697]
    } unknown uniqueSplitters[275736](275734 call + 1 splitterIndex[275626])(275739 'end of statement') unknown myUseEqualBuckets[275750](275748 call >=(275745 call -(275742 call - numBuckets[275594] 1) uniqueSplitters[275736]) equalBucketThreshold[273912])(275753 'end of statement')
    if(275773 call _cond_test(275765 call <(275759 call + 1(275757 call * 2 uniqueSplitters[275736]))(275763 call << 1 maxLogBuckets[273902])))
    {(275769 call = myUseEqualBuckets[275750] 1)
    }
    if(275787 call _cond_test(275780 call !=(275778 'typeof' forceEqualBuckets[275599]) nothing[7]))
    {(275784 call = myUseEqualBuckets[275750] forceEqualBuckets[275599])
    } unknown logBuckets[275799](275797 call +(275795 call log2 uniqueSplitters[275736]) 1)(275802 'end of statement')(275808 call = numBuckets[275594](275806 call << 1 logBuckets[275799]))
    { unknown _indexOfInterest[275839] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275840] "expr temp" "temp"(275849 'move' _iterator[275840](275847 call _getIterator(275860 call chpl_direct_range_iter(275853 call + uniqueSplitters[275736] 1)(275857 call - numBuckets[275594] 1) 1)))
      Defer
      {
        {(275876 call _freeIterator _iterator[275840])
        }
      }
      { scopeless type(275865 'move' _indexOfInterest[275839](275862 call iteratorIndex _iterator[275840]))
      }
      ForLoop[275841]
      { unknown i[275869] "index var" "insert auto destroy"(275871 'move' i[275869] _indexOfInterest[275839])
        {(275824 call += splitterIndex[275626] 1)(275836 call =(275831 call splitters[275609] splitterIndex[275626])(275835 call A[275571] arrayIndex[275621]))
        } label _continueLabel[275844] _indexOfInterest[275839] _iterator[275840]
      } label _breakLabel[275845]
    }(275892 call(275886 call . splitterBucketizer[275576] c"build") logBuckets[275799] myUseEqualBuckets[275750])
  } function putRandomSampleAtArrayStart[275902](in arg start_n[275899] : int(64)[13], arg end_n[275905] : int(64)[13], arg A[275911] :(275908 call chpl__buildArrayRuntimeType nil[44]), in arg numSamples[275915] : int(64)[13], arg seed[275919] = 1) : _unknown[51] "no return value for void"
  { unknown Tmp[275945](275943 call chpl__buildArrayRuntimeType(275941 call chpl__ensureDomainExpr(275934 call chpl_build_bounded_range 1 1))(275938 call . A[275911] c"eltType"))(275948 'end of statement') unknown randNums[275958](275957 call createRandomStream(seed = seed[275919])(eltType = int(64)[13])(parSafe = 0))(275961 'end of statement')
    { unknown tmp[276043] "temp"(276067 'move' tmp[276043](276062 call _cond_test(276064 call > numSamples[275915] 0)))
      WhileDo[276048]
      {
        {(275968 call -= numSamples[275915] 1) unknown offset[275982](275981 call(275975 call . randNums[275958] c"getNext") start_n[275899] end_n[275905])(275985 'end of statement')
          if(276034 call _cond_test(275988 call != offset[275982] start_n[275899]))
          { unknown tmp[275994](275991 call . A[275911] c"eltType")(275997 'end of statement')(276009 call shallowCopy module=[255] ShallowCopy[277381] Tmp[275945] 1 A[275911] start_n[275899] 1)(276020 call shallowCopy module=[255] ShallowCopy[277381] A[275911] start_n[275899] offset[275982] 1)(276032 call shallowCopy module=[255] ShallowCopy[277381] A[275911] offset[275982] Tmp[275945] 1 1)(364281 'referenced modules list' ShallowCopy[277381] ShallowCopy[277381] ShallowCopy[277381])
          }(276040 call += start_n[275899] 1)
        } label _continueLabel[276046](276057 'move' tmp[276043](276052 call _cond_test(276054 call > numSamples[275915] 0))) tmp[276043]
      } label _breakLabel[276047]
    }(355364 'used modules list'(275923 'use' Random[304649])(275930 'import' ShallowCopy[277381]))
  }(355361 'used modules list'(353036 'use' ChapelStandard[20264])(273898 'use' Sort[267968]))
}