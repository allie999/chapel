AST dump for SampleSortHelp after pass scopeResolve.
Module use list: ChapelStandard Sort Random ShallowCopy 

{ unknown maxLogBuckets[273925] "param" 8(273928 'end of statement') unknown classifyUnrollFactor[273930] "param" 7(273933 'end of statement') const equalBucketThreshold[273935] "const" 5(273938 'end of statement') const maxInline[273940] "const" 16(273943 'end of statement') const oversampleFactor[273947] "const" 0.2(273950 'end of statement') function log2int[273957](arg n[273954] : int(64)[13]) : _unknown[51]
  {
    if(273966 call _cond_test(273961 call <= n[273954] 0))
    {(273964 return 0)
    }(273976 return(273975 call log2 n[273954]))
  } function computeLogBucketSize[273986](arg n[273983] : int(64)[13]) : _unknown[51]
  { const LogBuckets[273989] "const" 8(273992 'end of statement') const BaseCaseSize[273995] "const" 16(273998 'end of statement') const BaseCaseMultiplier[274000] "const" 16(274003 'end of statement') const SingleLevelThreshold[274008] "const"(274006 call * maxInline[273940] LogBuckets[273989])(274011 'end of statement') const TwoLevelThreshold[274016] "const"(274014 call * SingleLevelThreshold[274008] LogBuckets[273989])(274019 'end of statement') unknown ret[274021] 0(274024 'end of statement')
    if(274079 call _cond_test(274027 call <= n[273983] SingleLevelThreshold[274008]))
    {(274040 call = ret[274021](274039 call log2int(274036 call /(274033 call / n[273983] maxInline[273940]) 2)))
    }
    {
      if(274075 call _cond_test(274046 call <= n[273983] TwoLevelThreshold[274016]))
      {(274065 call = ret[274021](274063 call /(274060 call +(274058 call log2int(274055 call /(274052 call / n[273983] maxInline[273940]) 2)) 1) 2))
      }
      {(274071 call = ret[274021] maxLogBuckets[273925])
      }
    }(274090 call = ret[274021](274089 call max 1 ret[274021]))(274099 call = ret[274021](274098 call min maxLogBuckets[273925] ret[274021]))(274103 return ret[274021])
  } function chooseSampleStep[274113](arg n[274110] : int(64)[13], arg logNumBuckets[274116] : int(64)[13]) : _unknown[51]
  { unknown oversample[274130](274129 call min 1.0(274127 call * oversampleFactor[273947](274126 call log2int n[274110])))(274133 'end of statement') unknown step[274143](274142 call max 1(274140 call _cast int(64)[13] oversample[274130]))(274146 'end of statement')(274148 return step[274143])
  } function SampleBucketizer[275549](?).writeThis[274199](arg _mt[275553]:_MT[238], arg this[275551]:SampleBucketizer[275549](?), arg ch[274197]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(274219 call <~> ch[274197] "SampleBucketizer(")(274244 call <~>(274241 call <~> ch[274197] "\n logBuckets=")(402124 call . this[275551] c"logBuckets"))(274268 call <~>(274265 call <~> ch[274197] "\n numBuckets=")(402130 call . this[275551] c"numBuckets"))(274292 call <~>(274289 call <~> ch[274197] "\n equalBuckets=")(402136 call . this[275551] c"equalBuckets"))(274313 call <~> ch[274197] "\n storage=")
    { unknown _indexOfInterest[274355] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274356] "expr temp" "temp"(274365 'move' _iterator[274356](274363 call _getIterator(274370 call chpl_direct_range_iter 0(402151 call . this[275551] c"numBuckets") 1)))
      Defer
      {
        {(274386 call _freeIterator _iterator[274356])
        }
      }
      { scopeless type(274375 'move' _indexOfInterest[274355](274372 call iteratorIndex _iterator[274356]))
      }
      ForLoop[274357]
      { unknown i[274379] "index var" "insert auto destroy"(274381 'move' i[274379] _indexOfInterest[274355])
        {(274351 call <~> ch[274197](274350 'try!-expr'(274349 call(274341 call . " %xt" c"format")(274347 call(402145 call . this[275551] c"storage") i[274379]))))
        } label _continueLabel[274360] _indexOfInterest[274355] _iterator[274356]
      } label _breakLabel[274361]
    }(274411 call <~> ch[274197] "\n sortedStorage=")
    { unknown _indexOfInterest[274435] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274436] "expr temp" "temp"(274445 'move' _iterator[274436](274443 call _getIterator(274450 call chpl_direct_range_iter 0(402164 call . this[275551] c"numBuckets") 1)))
      Defer
      {
        {(274466 call _freeIterator _iterator[274436])
        }
      }
      { scopeless type(274455 'move' _indexOfInterest[274435](274452 call iteratorIndex _iterator[274436]))
      }
      ForLoop[274437]
      { unknown i[274459] "index var" "insert auto destroy"(274461 'move' i[274459] _indexOfInterest[274435])
        {(274431 call <~> ch[274197](274430 'try!-expr'(274429 call(274421 call . " %xt" c"format")(274427 call(402158 call . this[275551] c"sortedStorage") i[274459]))))
        } label _continueLabel[274440] _indexOfInterest[274435] _iterator[274436]
      } label _breakLabel[274441]
    }(274475 call <~> ch[274197] ")\n")
  } function SampleBucketizer[275549](?).getNumBuckets[274482](arg _mt[275557]:_MT[238], arg this[275555]:SampleBucketizer[275549](?)) : _unknown[51] "method" "primary method"
  {(274494 return(274492 call *(402170 call . this[275555] c"numBuckets")(274490 call + 1(274488 call _cast int(64)[13](402175 call . this[275555] c"equalBuckets")))))
  } function SampleBucketizer[275549](?).getBinsToRecursivelySort[274501](arg _mt[275561]:_MT[238], arg this[275559]:SampleBucketizer[275549](?)) : _unknown[51] "method" "primary method"
  { unknown r[274508](274507 call range[64319](?)(stridable = 1))(274511 'end of statement')
    if(274545 call _cond_test(402181 call . this[275559] c"equalBuckets"))
    {(274527 call = r[274508](274525 call chpl_by(274522 call chpl_build_bounded_range 0(274520 call -(274518 call(402186 call . this[275559] c"getNumBuckets")) 1)) 2))
    }
    {(274541 call = r[274508](274539 call chpl_build_bounded_range 0(274537 call -(274535 call(402191 call . this[275559] c"getNumBuckets")) 1)))
    }(274550 return r[274508])
  } function SampleBucketizer[275549](?).getNextStartBit[274560](arg _mt[275565]:_MT[238], arg this[275563]:SampleBucketizer[275549](?), arg start_bit[274557] : int(64)[13]) : _unknown[51] "method" "primary method"
  {(274563 return start_bit[274557])
  } function SampleBucketizer[275549](?).build[274574](arg _mt[275569]:_MT[238], arg this[275567]:SampleBucketizer[275549](?), arg logBuckets[274571] : int(64)[13], arg equalBuckets[274577] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(274587 call =(274583 call . this[275567] c"logBuckets") logBuckets[274571])(274601 call =(274594 call . this[275567] c"numBuckets")(274599 call << 1 logBuckets[274571]))(274611 call =(274607 call . this[275567] c"equalBuckets") equalBuckets[274577]) unknown numSplitters[274621](274619 call -(274615 call . this[275567] c"numBuckets") 1)(274624 'end of statement')(274636 call =(274628 call(402201 call . this[275567] c"sortedStorage") numSplitters[274621])(274635 call(402207 call . this[275567] c"sortedStorage")(274632 call - numSplitters[274621] 1)))(274644 call(402212 call . this[275567] c"build") 0 numSplitters[274621] 1)
  } function SampleBucketizer[275549](?).build[274654](arg _mt[275573]:_MT[238], arg this[275571]:SampleBucketizer[275549](?), arg left[274651] : int(64)[13], arg right[274657] : int(64)[13], arg pos[274661] : int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown mid[274674](274672 call + left[274651](274670 call /(274667 call - right[274657] left[274651]) 2))(274677 'end of statement')(274687 call =(274682 call(402221 call . this[275571] c"storage") pos[274661])(274686 call(402227 call . this[275571] c"sortedStorage") mid[274674]))
    if(274721 call _cond_test(274695 call <(274692 call * 2 pos[274661])(402234 call . this[275571] c"numBuckets")))
    {(274705 call(402238 call . this[275571] c"build") left[274651] mid[274674](274703 call * 2 pos[274661]))(274719 call(402245 call . this[275571] c"build") mid[274674] right[274657](274717 call +(274714 call * 2 pos[274661]) 1))
    }
  } function SampleBucketizer[275549](?).splitter[274733](arg _mt[275577]:_MT[238], arg this[275575]:SampleBucketizer[275549](?), arg i[274730] : int(64)[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {(274740 return(274739 call(402258 call . this[275575] c"storage") i[274730]))
  }
  { scopeless type(402253 call . this[275575] c"eltType")
  } function SampleBucketizer[275549](?).sortedSplitter[274752](arg _mt[275581]:_MT[238], arg this[275579]:SampleBucketizer[275549](?), arg i[274749] : int(64)[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {(274759 return(274758 call(402269 call . this[275579] c"sortedStorage") i[274749]))
  }
  { scopeless type(402264 call . this[275579] c"eltType")
  } function SampleBucketizer[275549](?).bucketForRecord[274769](arg _mt[275585]:_MT[238], arg this[275583]:SampleBucketizer[275549](?), arg a[274767]:_any[178](?), arg criterion[274771]:_any[178](?), arg startbit[274773]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown bk[274776] 1(274779 'end of statement')
    { unknown _indexOfInterest[274814] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274815] "expr temp" "temp"(274824 'move' _iterator[274815](274822 call _getIterator(274831 call chpl_direct_counted_range_iter 0(402286 call . this[275583] c"logBuckets"))))
      Defer
      {
        {(274847 call _freeIterator _iterator[274815])
        }
      }
      { scopeless type(274836 'move' _indexOfInterest[274814](274833 call iteratorIndex _iterator[274815]))
      }
      ForLoop[274816]
      { unknown lg[274840] "index var" "insert auto destroy"(274842 'move' lg[274840] _indexOfInterest[274814])
        {(274810 call = bk[274776](274808 call +(274791 call * 2 bk[274776])(274806 call _cast int(64)[13](274803 call <(274801 call chpl_compare(274797 call(402278 call . this[275583] c"splitter") bk[274776]) a[274767] criterion[274771]) 0))))
        } label _continueLabel[274819] _indexOfInterest[274814] _iterator[274815]
      } label _breakLabel[274820]
    }
    if(274884 call _cond_test(402291 call . this[275583] c"equalBuckets"))
    {(274880 call = bk[274776](274878 call +(274858 call * 2 bk[274776])(274876 call _cast int(64)[13](274873 call ==(274871 call chpl_compare a[274767](274869 call(402300 call . this[275583] c"sortedSplitter")(274866 call - bk[274776](402306 call . this[275583] c"numBuckets"))) criterion[274771]) 0))))
    }(274900 return(274898 call - bk[274776](274895 IfExpr (402313 call . this[275583] c"equalBuckets") then
    { scopeless(274892 call * 2(402318 call . this[275583] c"numBuckets"))
    } else
    { scopeless(402323 call . this[275583] c"numBuckets")
    } )))
  } function SampleBucketizer[275549](?).classify[274908](arg _mt[275589]:_MT[238], arg this[275587]:SampleBucketizer[275549](?), arg A[274906]:_any[178](?), arg start_n[274910]:_any[178](?), arg end_n[274912]:_any[178](?), arg criterion[274914]:_any[178](?), arg startbit[274916]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { const paramEqualBuckets[274919] "const"(402328 call . this[275587] c"equalBuckets")(274922 'end of statement') const paramLogBuckets[274925] "const"(402333 call . this[275587] c"logBuckets")(274928 'end of statement') const paramNumBuckets[274939] "const"(274937 call << 1(274935 call + paramLogBuckets[274925](274933 call _cast int(64)[13] paramEqualBuckets[274919])))(274942 'end of statement') unknown b[274948](274947 call c_array[205840](?) int(64)[13] classifyUnrollFactor[273930])(274951 'end of statement') unknown cur[274953] start_n[274910](274956 'end of statement')
    { unknown tmp[275339] "temp"(275375 'move' tmp[275339](275364 call _cond_test(275366 call <= cur[274953](275369 call - end_n[274912](275372 call - classifyUnrollFactor[273930] 1)))))
      WhileDo[275344]
      {
        {
          { unknown _indexOfInterest[274984] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274985] "expr temp" "temp"(274994 'move' _iterator[274985](274992 call _getIterator(275002 call chpl_direct_range_iter 0(274999 call - classifyUnrollFactor[273930] 1) 1)))
            Defer
            {
              {(275018 call _freeIterator _iterator[274985])
              }
            }
            { scopeless type(275007 'move' _indexOfInterest[274984](275004 call iteratorIndex _iterator[274985]))
            }
            ForLoop[274986]
            { unknown i[275011] "index var" "insert auto destroy"(275013 'move' i[275011] _indexOfInterest[274984])
              {(274980 call =(274978 call b[274948] i[275011]) 1)
              } label _continueLabel[274989] _indexOfInterest[274984] _iterator[274985]
            } label _breakLabel[274990]
          }
          { unknown _indexOfInterest[275125] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275126] "expr temp" "temp"(275135 'move' _iterator[275126](275133 call _getIterator(275143 call chpl_direct_range_iter 0(275140 call - paramLogBuckets[274925] 1) 1)))
            Defer
            {
              {(275159 call _freeIterator _iterator[275126])
              }
            }
            { scopeless type(275148 'move' _indexOfInterest[275125](275145 call iteratorIndex _iterator[275126]))
            }
            ForLoop[275127]
            { unknown lg[275152] "index var" "insert auto destroy"(275154 'move' lg[275152] _indexOfInterest[275125])
              {
                { unknown _indexOfInterest[275083] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275084] "expr temp" "temp"(275093 'move' _iterator[275084](275091 call _getIterator(275101 call chpl_direct_range_iter 0(275098 call - classifyUnrollFactor[273930] 1) 1)))
                  Defer
                  {
                    {(275117 call _freeIterator _iterator[275084])
                    }
                  }
                  { scopeless type(275106 'move' _indexOfInterest[275083](275103 call iteratorIndex _iterator[275084]))
                  }
                  ForLoop[275085]
                  { unknown i[275110] "index var" "insert auto destroy"(275112 'move' i[275110] _indexOfInterest[275083])
                    {(275079 call =(275045 call b[274948] i[275110])(275077 call +(275051 call * 2(275050 call b[274948] i[275110]))(275075 call _cast int(64)[13](275072 call <(275070 call chpl_compare(275060 call(402349 call . this[275587] c"splitter")(275058 call b[274948] i[275110]))(275068 call A[274906](275065 call + cur[274953] i[275110])) criterion[274914]) 0))))
                    } label _continueLabel[275088] _indexOfInterest[275083] _iterator[275084]
                  } label _breakLabel[275089]
                }
              } label _continueLabel[275130] _indexOfInterest[275125] _iterator[275126]
            } label _breakLabel[275131]
          }
          if(275264 call _cond_test paramEqualBuckets[274919])
          {
            { unknown _indexOfInterest[275222] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275223] "expr temp" "temp"(275232 'move' _iterator[275223](275230 call _getIterator(275240 call chpl_direct_range_iter 0(275237 call - classifyUnrollFactor[273930] 1) 1)))
              Defer
              {
                {(275256 call _freeIterator _iterator[275223])
                }
              }
              { scopeless type(275245 'move' _indexOfInterest[275222](275242 call iteratorIndex _iterator[275223]))
              }
              ForLoop[275224]
              { unknown i[275249] "index var" "insert auto destroy"(275251 'move' i[275249] _indexOfInterest[275222])
                {(275218 call =(275178 call b[274948] i[275249])(275216 call +(275184 call * 2(275183 call b[274948] i[275249]))(275214 call _cast int(64)[13](275211 call ==(275209 call chpl_compare(275193 call A[274906](275190 call + cur[274953] i[275249]))(275207 call(402369 call . this[275587] c"sortedSplitter")(275204 call -(275199 call b[274948] i[275249])(275202 call / paramNumBuckets[274939] 2))) criterion[274914]) 0))))
                } label _continueLabel[275227] _indexOfInterest[275222] _iterator[275223]
              } label _breakLabel[275228]
            }
          }
          { unknown _indexOfInterest[275293] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275294] "expr temp" "temp"(275303 'move' _iterator[275294](275301 call _getIterator(275311 call chpl_direct_range_iter 0(275308 call - classifyUnrollFactor[273930] 1) 1)))
            Defer
            {
              {(275327 call _freeIterator _iterator[275294])
              }
            }
            { scopeless type(275316 'move' _indexOfInterest[275293](275313 call iteratorIndex _iterator[275294]))
            }
            ForLoop[275295]
            { unknown i[275320] "index var" "insert auto destroy"(275322 'move' i[275320] _indexOfInterest[275293])
              {(275290 yield(275288 call _build_tuple(275278 call + cur[274953] i[275320])(275285 call -(275283 call b[274948] i[275320]) paramNumBuckets[274939])))
              } label _continueLabel[275298] _indexOfInterest[275293] _iterator[275294]
            } label _breakLabel[275299]
          }(275336 call += cur[274953] classifyUnrollFactor[273930])
        } label _continueLabel[275342](275359 'move' tmp[275339](275348 call _cond_test(275350 call <= cur[274953](275353 call - end_n[274912](275356 call - classifyUnrollFactor[273930] 1))))) tmp[275339]
      } label _breakLabel[275343]
    }
    { unknown tmp[275519] "temp"(275543 'move' tmp[275519](275538 call _cond_test(275540 call <= cur[274953] end_n[274912])))
      WhileDo[275524]
      {
        { unknown bk[275383] 1(275386 'end of statement')
          { unknown _indexOfInterest[275424] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275425] "expr temp" "temp"(275434 'move' _iterator[275425](275432 call _getIterator(275441 call chpl_direct_counted_range_iter 0 paramLogBuckets[274925])))
            Defer
            {
              {(275457 call _freeIterator _iterator[275425])
              }
            }
            { scopeless type(275446 'move' _indexOfInterest[275424](275443 call iteratorIndex _iterator[275425]))
            }
            ForLoop[275426]
            { unknown lg[275450] "index var" "insert auto destroy"(275452 'move' lg[275450] _indexOfInterest[275424])
              {(275420 call = bk[275383](275418 call +(275398 call * 2 bk[275383])(275416 call _cast int(64)[13](275413 call <(275411 call chpl_compare(275404 call(402394 call . this[275587] c"splitter") bk[275383])(275409 call A[274906] cur[274953]) criterion[274914]) 0))))
              } label _continueLabel[275429] _indexOfInterest[275424] _iterator[275425]
            } label _breakLabel[275430]
          }
          if(275500 call _cond_test paramEqualBuckets[274919])
          {(275496 call = bk[275383](275494 call +(275468 call * 2 bk[275383])(275492 call _cast int(64)[13](275489 call ==(275487 call chpl_compare(275474 call A[274906] cur[274953])(275485 call(402408 call . this[275587] c"sortedSplitter")(275482 call - bk[275383](275480 call / paramNumBuckets[274939] 2))) criterion[274914]) 0))))
          }(275512 yield(275510 call _build_tuple cur[274953](275507 call - bk[275383] paramNumBuckets[274939])))(275516 call += cur[274953] 1)
        } label _continueLabel[275522](275533 'move' tmp[275519](275528 call _cond_test(275530 call <= cur[274953] end_n[274912]))) tmp[275519]
      } label _breakLabel[275523]
    }
  } type SampleBucketizer[275549](?) unknown eltType[274153] "type variable" unknown storage[274164](274163 call c_array[205840](?) eltType[274153](274161 call << 1 maxLogBuckets[273925])) unknown sortedStorage[274176](274175 call c_array[205840](?) eltType[274153](274173 call << 1 maxLogBuckets[273925])) unknown logBuckets[274181] int(64)[13] unknown numBuckets[274186] int(64)[13] unknown equalBuckets[274191] bool[10] function createSplittersFromSample[275596](arg A[275594]:_any[178](?), ref arg splitterBucketizer[275599] : SampleBucketizer[275549](?), arg criterion[275602]:_any[178](?), arg start_n[275605] : int(64)[13], arg sampleSize[275609] : int(64)[13], arg sampleStep[275613] : int(64)[13], in arg numBuckets[275617] : int(64)[13], arg forceEqualBuckets[275622] : ?[260] = none[57]) : _unknown[51] "no return value for void"
  { unknown splitters[275632] "ref var"(275629 call . splitterBucketizer[275599] c"sortedStorage")(275635 'end of statement') unknown arrayIndex[275644](275642 call -(275639 call + start_n[275605] sampleStep[275613]) 1)(275647 'end of statement') unknown splitterIndex[275649] 0(275652 'end of statement')(275661 call =(275656 call splitters[275632] splitterIndex[275649])(275660 call A[275594] arrayIndex[275644]))
    { unknown _indexOfInterest[275714] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275715] "expr temp" "temp"(275724 'move' _iterator[275715](275722 call _getIterator(275732 call chpl_direct_range_iter 2(275729 call - numBuckets[275617] 1) 1)))
      Defer
      {
        {(275748 call _freeIterator _iterator[275715])
        }
      }
      { scopeless type(275737 'move' _indexOfInterest[275714](275734 call iteratorIndex _iterator[275715]))
      }
      ForLoop[275716]
      { unknown i[275741] "index var" "insert auto destroy"(275743 'move' i[275741] _indexOfInterest[275714])
        {(275674 call += arrayIndex[275644] sampleStep[275613])
          if(275710 call _cond_test(275691 call !=(275689 call chpl_compare(275682 call splitters[275632] splitterIndex[275649])(275687 call A[275594] arrayIndex[275644]) criterion[275602]) 0))
          {(275695 call += splitterIndex[275649] 1)(275707 call =(275702 call splitters[275632] splitterIndex[275649])(275706 call A[275594] arrayIndex[275644]))
          }
        } label _continueLabel[275719] _indexOfInterest[275714] _iterator[275715]
      } label _breakLabel[275720]
    } unknown uniqueSplitters[275759](275757 call + 1 splitterIndex[275649])(275762 'end of statement') unknown myUseEqualBuckets[275773](275771 call >=(275768 call -(275765 call - numBuckets[275617] 1) uniqueSplitters[275759]) equalBucketThreshold[273935])(275776 'end of statement')
    if(275796 call _cond_test(275788 call <(275782 call + 1(275780 call * 2 uniqueSplitters[275759]))(275786 call << 1 maxLogBuckets[273925])))
    {(275792 call = myUseEqualBuckets[275773] 1)
    }
    if(275810 call _cond_test(275803 call !=(275801 'typeof' forceEqualBuckets[275622]) nothing[7]))
    {(275807 call = myUseEqualBuckets[275773] forceEqualBuckets[275622])
    } unknown logBuckets[275822](275820 call +(275818 call log2 uniqueSplitters[275759]) 1)(275825 'end of statement')(275831 call = numBuckets[275617](275829 call << 1 logBuckets[275822]))
    { unknown _indexOfInterest[275862] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275863] "expr temp" "temp"(275872 'move' _iterator[275863](275870 call _getIterator(275883 call chpl_direct_range_iter(275876 call + uniqueSplitters[275759] 1)(275880 call - numBuckets[275617] 1) 1)))
      Defer
      {
        {(275899 call _freeIterator _iterator[275863])
        }
      }
      { scopeless type(275888 'move' _indexOfInterest[275862](275885 call iteratorIndex _iterator[275863]))
      }
      ForLoop[275864]
      { unknown i[275892] "index var" "insert auto destroy"(275894 'move' i[275892] _indexOfInterest[275862])
        {(275847 call += splitterIndex[275649] 1)(275859 call =(275854 call splitters[275632] splitterIndex[275649])(275858 call A[275594] arrayIndex[275644]))
        } label _continueLabel[275867] _indexOfInterest[275862] _iterator[275863]
      } label _breakLabel[275868]
    }(275915 call(275909 call . splitterBucketizer[275599] c"build") logBuckets[275822] myUseEqualBuckets[275773])
  } function putRandomSampleAtArrayStart[275925](in arg start_n[275922] : int(64)[13], arg end_n[275928] : int(64)[13], arg A[275934] :(275931 call chpl__buildArrayRuntimeType nil[44]), in arg numSamples[275938] : int(64)[13], arg seed[275942] = 1) : _unknown[51] "no return value for void"
  { unknown Tmp[275968](275966 call chpl__buildArrayRuntimeType(275964 call chpl__ensureDomainExpr(275957 call chpl_build_bounded_range 1 1))(275961 call . A[275934] c"eltType"))(275971 'end of statement') unknown randNums[275981](275980 call createRandomStream(seed = seed[275942])(eltType = int(64)[13])(parSafe = 0))(275984 'end of statement')
    { unknown tmp[276066] "temp"(276090 'move' tmp[276066](276085 call _cond_test(276087 call > numSamples[275938] 0)))
      WhileDo[276071]
      {
        {(275991 call -= numSamples[275938] 1) unknown offset[276005](276004 call(275998 call . randNums[275981] c"getNext") start_n[275922] end_n[275928])(276008 'end of statement')
          if(276057 call _cond_test(276011 call != offset[276005] start_n[275922]))
          { unknown tmp[276017](276014 call . A[275934] c"eltType")(276020 'end of statement')(276032 call shallowCopy module=[255] ShallowCopy[277404] Tmp[275968] 1 A[275934] start_n[275922] 1)(276043 call shallowCopy module=[255] ShallowCopy[277404] A[275934] start_n[275922] offset[276005] 1)(276055 call shallowCopy module=[255] ShallowCopy[277404] A[275934] offset[276005] Tmp[275968] 1 1)(364324 'referenced modules list' ShallowCopy[277404] ShallowCopy[277404] ShallowCopy[277404])
          }(276063 call += start_n[275922] 1)
        } label _continueLabel[276069](276080 'move' tmp[276066](276075 call _cond_test(276077 call > numSamples[275938] 0))) tmp[276066]
      } label _breakLabel[276070]
    }(355407 'used modules list'(275946 'use' Random[304678])(275953 'import' ShallowCopy[277404]))
  }(355404 'used modules list'(353078 'use' ChapelStandard[20267])(273921 'use' Sort[267989]))
}