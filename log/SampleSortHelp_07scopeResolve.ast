AST dump for SampleSortHelp after pass scopeResolve.
Module use list: ChapelStandard Sort Random ShallowCopy 

{ unknown maxLogBuckets[273923] "param" 8(273926 'end of statement') unknown classifyUnrollFactor[273928] "param" 7(273931 'end of statement') const equalBucketThreshold[273933] "const" 5(273936 'end of statement') const maxInline[273938] "const" 16(273941 'end of statement') const oversampleFactor[273945] "const" 0.2(273948 'end of statement') function log2int[273955](arg n[273952] : int(64)[13]) : _unknown[51]
  {
    if(273964 call _cond_test(273959 call <= n[273952] 0))
    {(273962 return 0)
    }(273974 return(273973 call log2 n[273952]))
  } function computeLogBucketSize[273984](arg n[273981] : int(64)[13]) : _unknown[51]
  { const LogBuckets[273987] "const" 8(273990 'end of statement') const BaseCaseSize[273993] "const" 16(273996 'end of statement') const BaseCaseMultiplier[273998] "const" 16(274001 'end of statement') const SingleLevelThreshold[274006] "const"(274004 call * maxInline[273938] LogBuckets[273987])(274009 'end of statement') const TwoLevelThreshold[274014] "const"(274012 call * SingleLevelThreshold[274006] LogBuckets[273987])(274017 'end of statement') unknown ret[274019] 0(274022 'end of statement')
    if(274077 call _cond_test(274025 call <= n[273981] SingleLevelThreshold[274006]))
    {(274038 call = ret[274019](274037 call log2int(274034 call /(274031 call / n[273981] maxInline[273938]) 2)))
    }
    {
      if(274073 call _cond_test(274044 call <= n[273981] TwoLevelThreshold[274014]))
      {(274063 call = ret[274019](274061 call /(274058 call +(274056 call log2int(274053 call /(274050 call / n[273981] maxInline[273938]) 2)) 1) 2))
      }
      {(274069 call = ret[274019] maxLogBuckets[273923])
      }
    }(274088 call = ret[274019](274087 call max 1 ret[274019]))(274097 call = ret[274019](274096 call min maxLogBuckets[273923] ret[274019]))(274101 return ret[274019])
  } function chooseSampleStep[274111](arg n[274108] : int(64)[13], arg logNumBuckets[274114] : int(64)[13]) : _unknown[51]
  { unknown oversample[274128](274127 call min 1.0(274125 call * oversampleFactor[273945](274124 call log2int n[274108])))(274131 'end of statement') unknown step[274141](274140 call max 1(274138 call _cast int(64)[13] oversample[274128]))(274144 'end of statement')(274146 return step[274141])
  } function SampleBucketizer[275547](?).writeThis[274197](arg _mt[275551]:_MT[238], arg this[275549]:SampleBucketizer[275547](?), arg ch[274195]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(274217 call <~> ch[274195] "SampleBucketizer(")(274242 call <~>(274239 call <~> ch[274195] "\n logBuckets=")(402119 call . this[275549] c"logBuckets"))(274266 call <~>(274263 call <~> ch[274195] "\n numBuckets=")(402125 call . this[275549] c"numBuckets"))(274290 call <~>(274287 call <~> ch[274195] "\n equalBuckets=")(402131 call . this[275549] c"equalBuckets"))(274311 call <~> ch[274195] "\n storage=")
    { unknown _indexOfInterest[274353] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274354] "expr temp" "temp"(274363 'move' _iterator[274354](274361 call _getIterator(274368 call chpl_direct_range_iter 0(402146 call . this[275549] c"numBuckets") 1)))
      Defer
      {
        {(274384 call _freeIterator _iterator[274354])
        }
      }
      { scopeless type(274373 'move' _indexOfInterest[274353](274370 call iteratorIndex _iterator[274354]))
      }
      ForLoop[274355]
      { unknown i[274377] "index var" "insert auto destroy"(274379 'move' i[274377] _indexOfInterest[274353])
        {(274349 call <~> ch[274195](274348 'try!-expr'(274347 call(274339 call . " %xt" c"format")(274345 call(402140 call . this[275549] c"storage") i[274377]))))
        } label _continueLabel[274358] _indexOfInterest[274353] _iterator[274354]
      } label _breakLabel[274359]
    }(274409 call <~> ch[274195] "\n sortedStorage=")
    { unknown _indexOfInterest[274433] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274434] "expr temp" "temp"(274443 'move' _iterator[274434](274441 call _getIterator(274448 call chpl_direct_range_iter 0(402159 call . this[275549] c"numBuckets") 1)))
      Defer
      {
        {(274464 call _freeIterator _iterator[274434])
        }
      }
      { scopeless type(274453 'move' _indexOfInterest[274433](274450 call iteratorIndex _iterator[274434]))
      }
      ForLoop[274435]
      { unknown i[274457] "index var" "insert auto destroy"(274459 'move' i[274457] _indexOfInterest[274433])
        {(274429 call <~> ch[274195](274428 'try!-expr'(274427 call(274419 call . " %xt" c"format")(274425 call(402153 call . this[275549] c"sortedStorage") i[274457]))))
        } label _continueLabel[274438] _indexOfInterest[274433] _iterator[274434]
      } label _breakLabel[274439]
    }(274473 call <~> ch[274195] ")\n")
  } function SampleBucketizer[275547](?).getNumBuckets[274480](arg _mt[275555]:_MT[238], arg this[275553]:SampleBucketizer[275547](?)) : _unknown[51] "method" "primary method"
  {(274492 return(274490 call *(402165 call . this[275553] c"numBuckets")(274488 call + 1(274486 call _cast int(64)[13](402170 call . this[275553] c"equalBuckets")))))
  } function SampleBucketizer[275547](?).getBinsToRecursivelySort[274499](arg _mt[275559]:_MT[238], arg this[275557]:SampleBucketizer[275547](?)) : _unknown[51] "method" "primary method"
  { unknown r[274506](274505 call range[64319](?)(stridable = 1))(274509 'end of statement')
    if(274543 call _cond_test(402176 call . this[275557] c"equalBuckets"))
    {(274525 call = r[274506](274523 call chpl_by(274520 call chpl_build_bounded_range 0(274518 call -(274516 call(402181 call . this[275557] c"getNumBuckets")) 1)) 2))
    }
    {(274539 call = r[274506](274537 call chpl_build_bounded_range 0(274535 call -(274533 call(402186 call . this[275557] c"getNumBuckets")) 1)))
    }(274548 return r[274506])
  } function SampleBucketizer[275547](?).getNextStartBit[274558](arg _mt[275563]:_MT[238], arg this[275561]:SampleBucketizer[275547](?), arg start_bit[274555] : int(64)[13]) : _unknown[51] "method" "primary method"
  {(274561 return start_bit[274555])
  } function SampleBucketizer[275547](?).build[274572](arg _mt[275567]:_MT[238], arg this[275565]:SampleBucketizer[275547](?), arg logBuckets[274569] : int(64)[13], arg equalBuckets[274575] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(274585 call =(274581 call . this[275565] c"logBuckets") logBuckets[274569])(274599 call =(274592 call . this[275565] c"numBuckets")(274597 call << 1 logBuckets[274569]))(274609 call =(274605 call . this[275565] c"equalBuckets") equalBuckets[274575]) unknown numSplitters[274619](274617 call -(274613 call . this[275565] c"numBuckets") 1)(274622 'end of statement')(274634 call =(274626 call(402196 call . this[275565] c"sortedStorage") numSplitters[274619])(274633 call(402202 call . this[275565] c"sortedStorage")(274630 call - numSplitters[274619] 1)))(274642 call(402207 call . this[275565] c"build") 0 numSplitters[274619] 1)
  } function SampleBucketizer[275547](?).build[274652](arg _mt[275571]:_MT[238], arg this[275569]:SampleBucketizer[275547](?), arg left[274649] : int(64)[13], arg right[274655] : int(64)[13], arg pos[274659] : int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown mid[274672](274670 call + left[274649](274668 call /(274665 call - right[274655] left[274649]) 2))(274675 'end of statement')(274685 call =(274680 call(402216 call . this[275569] c"storage") pos[274659])(274684 call(402222 call . this[275569] c"sortedStorage") mid[274672]))
    if(274719 call _cond_test(274693 call <(274690 call * 2 pos[274659])(402229 call . this[275569] c"numBuckets")))
    {(274703 call(402233 call . this[275569] c"build") left[274649] mid[274672](274701 call * 2 pos[274659]))(274717 call(402240 call . this[275569] c"build") mid[274672] right[274655](274715 call +(274712 call * 2 pos[274659]) 1))
    }
  } function SampleBucketizer[275547](?).splitter[274731](arg _mt[275575]:_MT[238], arg this[275573]:SampleBucketizer[275547](?), arg i[274728] : int(64)[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {(274738 return(274737 call(402253 call . this[275573] c"storage") i[274728]))
  }
  { scopeless type(402248 call . this[275573] c"eltType")
  } function SampleBucketizer[275547](?).sortedSplitter[274750](arg _mt[275579]:_MT[238], arg this[275577]:SampleBucketizer[275547](?), arg i[274747] : int(64)[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {(274757 return(274756 call(402264 call . this[275577] c"sortedStorage") i[274747]))
  }
  { scopeless type(402259 call . this[275577] c"eltType")
  } function SampleBucketizer[275547](?).bucketForRecord[274767](arg _mt[275583]:_MT[238], arg this[275581]:SampleBucketizer[275547](?), arg a[274765]:_any[178](?), arg criterion[274769]:_any[178](?), arg startbit[274771]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown bk[274774] 1(274777 'end of statement')
    { unknown _indexOfInterest[274812] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274813] "expr temp" "temp"(274822 'move' _iterator[274813](274820 call _getIterator(274829 call chpl_direct_counted_range_iter 0(402281 call . this[275581] c"logBuckets"))))
      Defer
      {
        {(274845 call _freeIterator _iterator[274813])
        }
      }
      { scopeless type(274834 'move' _indexOfInterest[274812](274831 call iteratorIndex _iterator[274813]))
      }
      ForLoop[274814]
      { unknown lg[274838] "index var" "insert auto destroy"(274840 'move' lg[274838] _indexOfInterest[274812])
        {(274808 call = bk[274774](274806 call +(274789 call * 2 bk[274774])(274804 call _cast int(64)[13](274801 call <(274799 call chpl_compare(274795 call(402273 call . this[275581] c"splitter") bk[274774]) a[274765] criterion[274769]) 0))))
        } label _continueLabel[274817] _indexOfInterest[274812] _iterator[274813]
      } label _breakLabel[274818]
    }
    if(274882 call _cond_test(402286 call . this[275581] c"equalBuckets"))
    {(274878 call = bk[274774](274876 call +(274856 call * 2 bk[274774])(274874 call _cast int(64)[13](274871 call ==(274869 call chpl_compare a[274765](274867 call(402295 call . this[275581] c"sortedSplitter")(274864 call - bk[274774](402301 call . this[275581] c"numBuckets"))) criterion[274769]) 0))))
    }(274898 return(274896 call - bk[274774](274893 IfExpr (402308 call . this[275581] c"equalBuckets") then
    { scopeless(274890 call * 2(402313 call . this[275581] c"numBuckets"))
    } else
    { scopeless(402318 call . this[275581] c"numBuckets")
    } )))
  } function SampleBucketizer[275547](?).classify[274906](arg _mt[275587]:_MT[238], arg this[275585]:SampleBucketizer[275547](?), arg A[274904]:_any[178](?), arg start_n[274908]:_any[178](?), arg end_n[274910]:_any[178](?), arg criterion[274912]:_any[178](?), arg startbit[274914]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { const paramEqualBuckets[274917] "const"(402323 call . this[275585] c"equalBuckets")(274920 'end of statement') const paramLogBuckets[274923] "const"(402328 call . this[275585] c"logBuckets")(274926 'end of statement') const paramNumBuckets[274937] "const"(274935 call << 1(274933 call + paramLogBuckets[274923](274931 call _cast int(64)[13] paramEqualBuckets[274917])))(274940 'end of statement') unknown b[274946](274945 call c_array[205840](?) int(64)[13] classifyUnrollFactor[273928])(274949 'end of statement') unknown cur[274951] start_n[274908](274954 'end of statement')
    { unknown tmp[275337] "temp"(275373 'move' tmp[275337](275362 call _cond_test(275364 call <= cur[274951](275367 call - end_n[274910](275370 call - classifyUnrollFactor[273928] 1)))))
      WhileDo[275342]
      {
        {
          { unknown _indexOfInterest[274982] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[274983] "expr temp" "temp"(274992 'move' _iterator[274983](274990 call _getIterator(275000 call chpl_direct_range_iter 0(274997 call - classifyUnrollFactor[273928] 1) 1)))
            Defer
            {
              {(275016 call _freeIterator _iterator[274983])
              }
            }
            { scopeless type(275005 'move' _indexOfInterest[274982](275002 call iteratorIndex _iterator[274983]))
            }
            ForLoop[274984]
            { unknown i[275009] "index var" "insert auto destroy"(275011 'move' i[275009] _indexOfInterest[274982])
              {(274978 call =(274976 call b[274946] i[275009]) 1)
              } label _continueLabel[274987] _indexOfInterest[274982] _iterator[274983]
            } label _breakLabel[274988]
          }
          { unknown _indexOfInterest[275123] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275124] "expr temp" "temp"(275133 'move' _iterator[275124](275131 call _getIterator(275141 call chpl_direct_range_iter 0(275138 call - paramLogBuckets[274923] 1) 1)))
            Defer
            {
              {(275157 call _freeIterator _iterator[275124])
              }
            }
            { scopeless type(275146 'move' _indexOfInterest[275123](275143 call iteratorIndex _iterator[275124]))
            }
            ForLoop[275125]
            { unknown lg[275150] "index var" "insert auto destroy"(275152 'move' lg[275150] _indexOfInterest[275123])
              {
                { unknown _indexOfInterest[275081] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275082] "expr temp" "temp"(275091 'move' _iterator[275082](275089 call _getIterator(275099 call chpl_direct_range_iter 0(275096 call - classifyUnrollFactor[273928] 1) 1)))
                  Defer
                  {
                    {(275115 call _freeIterator _iterator[275082])
                    }
                  }
                  { scopeless type(275104 'move' _indexOfInterest[275081](275101 call iteratorIndex _iterator[275082]))
                  }
                  ForLoop[275083]
                  { unknown i[275108] "index var" "insert auto destroy"(275110 'move' i[275108] _indexOfInterest[275081])
                    {(275077 call =(275043 call b[274946] i[275108])(275075 call +(275049 call * 2(275048 call b[274946] i[275108]))(275073 call _cast int(64)[13](275070 call <(275068 call chpl_compare(275058 call(402344 call . this[275585] c"splitter")(275056 call b[274946] i[275108]))(275066 call A[274904](275063 call + cur[274951] i[275108])) criterion[274912]) 0))))
                    } label _continueLabel[275086] _indexOfInterest[275081] _iterator[275082]
                  } label _breakLabel[275087]
                }
              } label _continueLabel[275128] _indexOfInterest[275123] _iterator[275124]
            } label _breakLabel[275129]
          }
          if(275262 call _cond_test paramEqualBuckets[274917])
          {
            { unknown _indexOfInterest[275220] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275221] "expr temp" "temp"(275230 'move' _iterator[275221](275228 call _getIterator(275238 call chpl_direct_range_iter 0(275235 call - classifyUnrollFactor[273928] 1) 1)))
              Defer
              {
                {(275254 call _freeIterator _iterator[275221])
                }
              }
              { scopeless type(275243 'move' _indexOfInterest[275220](275240 call iteratorIndex _iterator[275221]))
              }
              ForLoop[275222]
              { unknown i[275247] "index var" "insert auto destroy"(275249 'move' i[275247] _indexOfInterest[275220])
                {(275216 call =(275176 call b[274946] i[275247])(275214 call +(275182 call * 2(275181 call b[274946] i[275247]))(275212 call _cast int(64)[13](275209 call ==(275207 call chpl_compare(275191 call A[274904](275188 call + cur[274951] i[275247]))(275205 call(402364 call . this[275585] c"sortedSplitter")(275202 call -(275197 call b[274946] i[275247])(275200 call / paramNumBuckets[274937] 2))) criterion[274912]) 0))))
                } label _continueLabel[275225] _indexOfInterest[275220] _iterator[275221]
              } label _breakLabel[275226]
            }
          }
          { unknown _indexOfInterest[275291] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275292] "expr temp" "temp"(275301 'move' _iterator[275292](275299 call _getIterator(275309 call chpl_direct_range_iter 0(275306 call - classifyUnrollFactor[273928] 1) 1)))
            Defer
            {
              {(275325 call _freeIterator _iterator[275292])
              }
            }
            { scopeless type(275314 'move' _indexOfInterest[275291](275311 call iteratorIndex _iterator[275292]))
            }
            ForLoop[275293]
            { unknown i[275318] "index var" "insert auto destroy"(275320 'move' i[275318] _indexOfInterest[275291])
              {(275288 yield(275286 call _build_tuple(275276 call + cur[274951] i[275318])(275283 call -(275281 call b[274946] i[275318]) paramNumBuckets[274937])))
              } label _continueLabel[275296] _indexOfInterest[275291] _iterator[275292]
            } label _breakLabel[275297]
          }(275334 call += cur[274951] classifyUnrollFactor[273928])
        } label _continueLabel[275340](275357 'move' tmp[275337](275346 call _cond_test(275348 call <= cur[274951](275351 call - end_n[274910](275354 call - classifyUnrollFactor[273928] 1))))) tmp[275337]
      } label _breakLabel[275341]
    }
    { unknown tmp[275517] "temp"(275541 'move' tmp[275517](275536 call _cond_test(275538 call <= cur[274951] end_n[274910])))
      WhileDo[275522]
      {
        { unknown bk[275381] 1(275384 'end of statement')
          { unknown _indexOfInterest[275422] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275423] "expr temp" "temp"(275432 'move' _iterator[275423](275430 call _getIterator(275439 call chpl_direct_counted_range_iter 0 paramLogBuckets[274923])))
            Defer
            {
              {(275455 call _freeIterator _iterator[275423])
              }
            }
            { scopeless type(275444 'move' _indexOfInterest[275422](275441 call iteratorIndex _iterator[275423]))
            }
            ForLoop[275424]
            { unknown lg[275448] "index var" "insert auto destroy"(275450 'move' lg[275448] _indexOfInterest[275422])
              {(275418 call = bk[275381](275416 call +(275396 call * 2 bk[275381])(275414 call _cast int(64)[13](275411 call <(275409 call chpl_compare(275402 call(402389 call . this[275585] c"splitter") bk[275381])(275407 call A[274904] cur[274951]) criterion[274912]) 0))))
              } label _continueLabel[275427] _indexOfInterest[275422] _iterator[275423]
            } label _breakLabel[275428]
          }
          if(275498 call _cond_test paramEqualBuckets[274917])
          {(275494 call = bk[275381](275492 call +(275466 call * 2 bk[275381])(275490 call _cast int(64)[13](275487 call ==(275485 call chpl_compare(275472 call A[274904] cur[274951])(275483 call(402403 call . this[275585] c"sortedSplitter")(275480 call - bk[275381](275478 call / paramNumBuckets[274937] 2))) criterion[274912]) 0))))
          }(275510 yield(275508 call _build_tuple cur[274951](275505 call - bk[275381] paramNumBuckets[274937])))(275514 call += cur[274951] 1)
        } label _continueLabel[275520](275531 'move' tmp[275517](275526 call _cond_test(275528 call <= cur[274951] end_n[274910]))) tmp[275517]
      } label _breakLabel[275521]
    }
  } type SampleBucketizer[275547](?) unknown eltType[274151] "type variable" unknown storage[274162](274161 call c_array[205840](?) eltType[274151](274159 call << 1 maxLogBuckets[273923])) unknown sortedStorage[274174](274173 call c_array[205840](?) eltType[274151](274171 call << 1 maxLogBuckets[273923])) unknown logBuckets[274179] int(64)[13] unknown numBuckets[274184] int(64)[13] unknown equalBuckets[274189] bool[10] function createSplittersFromSample[275594](arg A[275592]:_any[178](?), ref arg splitterBucketizer[275597] : SampleBucketizer[275547](?), arg criterion[275600]:_any[178](?), arg start_n[275603] : int(64)[13], arg sampleSize[275607] : int(64)[13], arg sampleStep[275611] : int(64)[13], in arg numBuckets[275615] : int(64)[13], arg forceEqualBuckets[275620] : ?[260] = none[57]) : _unknown[51] "no return value for void"
  { unknown splitters[275630] "ref var"(275627 call . splitterBucketizer[275597] c"sortedStorage")(275633 'end of statement') unknown arrayIndex[275642](275640 call -(275637 call + start_n[275603] sampleStep[275611]) 1)(275645 'end of statement') unknown splitterIndex[275647] 0(275650 'end of statement')(275659 call =(275654 call splitters[275630] splitterIndex[275647])(275658 call A[275592] arrayIndex[275642]))
    { unknown _indexOfInterest[275712] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275713] "expr temp" "temp"(275722 'move' _iterator[275713](275720 call _getIterator(275730 call chpl_direct_range_iter 2(275727 call - numBuckets[275615] 1) 1)))
      Defer
      {
        {(275746 call _freeIterator _iterator[275713])
        }
      }
      { scopeless type(275735 'move' _indexOfInterest[275712](275732 call iteratorIndex _iterator[275713]))
      }
      ForLoop[275714]
      { unknown i[275739] "index var" "insert auto destroy"(275741 'move' i[275739] _indexOfInterest[275712])
        {(275672 call += arrayIndex[275642] sampleStep[275611])
          if(275708 call _cond_test(275689 call !=(275687 call chpl_compare(275680 call splitters[275630] splitterIndex[275647])(275685 call A[275592] arrayIndex[275642]) criterion[275600]) 0))
          {(275693 call += splitterIndex[275647] 1)(275705 call =(275700 call splitters[275630] splitterIndex[275647])(275704 call A[275592] arrayIndex[275642]))
          }
        } label _continueLabel[275717] _indexOfInterest[275712] _iterator[275713]
      } label _breakLabel[275718]
    } unknown uniqueSplitters[275757](275755 call + 1 splitterIndex[275647])(275760 'end of statement') unknown myUseEqualBuckets[275771](275769 call >=(275766 call -(275763 call - numBuckets[275615] 1) uniqueSplitters[275757]) equalBucketThreshold[273933])(275774 'end of statement')
    if(275794 call _cond_test(275786 call <(275780 call + 1(275778 call * 2 uniqueSplitters[275757]))(275784 call << 1 maxLogBuckets[273923])))
    {(275790 call = myUseEqualBuckets[275771] 1)
    }
    if(275808 call _cond_test(275801 call !=(275799 'typeof' forceEqualBuckets[275620]) nothing[7]))
    {(275805 call = myUseEqualBuckets[275771] forceEqualBuckets[275620])
    } unknown logBuckets[275820](275818 call +(275816 call log2 uniqueSplitters[275757]) 1)(275823 'end of statement')(275829 call = numBuckets[275615](275827 call << 1 logBuckets[275820]))
    { unknown _indexOfInterest[275860] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[275861] "expr temp" "temp"(275870 'move' _iterator[275861](275868 call _getIterator(275881 call chpl_direct_range_iter(275874 call + uniqueSplitters[275757] 1)(275878 call - numBuckets[275615] 1) 1)))
      Defer
      {
        {(275897 call _freeIterator _iterator[275861])
        }
      }
      { scopeless type(275886 'move' _indexOfInterest[275860](275883 call iteratorIndex _iterator[275861]))
      }
      ForLoop[275862]
      { unknown i[275890] "index var" "insert auto destroy"(275892 'move' i[275890] _indexOfInterest[275860])
        {(275845 call += splitterIndex[275647] 1)(275857 call =(275852 call splitters[275630] splitterIndex[275647])(275856 call A[275592] arrayIndex[275642]))
        } label _continueLabel[275865] _indexOfInterest[275860] _iterator[275861]
      } label _breakLabel[275866]
    }(275913 call(275907 call . splitterBucketizer[275597] c"build") logBuckets[275820] myUseEqualBuckets[275771])
  } function putRandomSampleAtArrayStart[275923](in arg start_n[275920] : int(64)[13], arg end_n[275926] : int(64)[13], arg A[275932] :(275929 call chpl__buildArrayRuntimeType nil[44]), in arg numSamples[275936] : int(64)[13], arg seed[275940] = 1) : _unknown[51] "no return value for void"
  { unknown Tmp[275966](275964 call chpl__buildArrayRuntimeType(275962 call chpl__ensureDomainExpr(275955 call chpl_build_bounded_range 1 1))(275959 call . A[275932] c"eltType"))(275969 'end of statement') unknown randNums[275979](275978 call createRandomStream(seed = seed[275940])(eltType = int(64)[13])(parSafe = 0))(275982 'end of statement')
    { unknown tmp[276064] "temp"(276088 'move' tmp[276064](276083 call _cond_test(276085 call > numSamples[275936] 0)))
      WhileDo[276069]
      {
        {(275989 call -= numSamples[275936] 1) unknown offset[276003](276002 call(275996 call . randNums[275979] c"getNext") start_n[275920] end_n[275926])(276006 'end of statement')
          if(276055 call _cond_test(276009 call != offset[276003] start_n[275920]))
          { unknown tmp[276015](276012 call . A[275932] c"eltType")(276018 'end of statement')(276030 call shallowCopy module=[255] ShallowCopy[277402] Tmp[275966] 1 A[275932] start_n[275920] 1)(276041 call shallowCopy module=[255] ShallowCopy[277402] A[275932] start_n[275920] offset[276003] 1)(276053 call shallowCopy module=[255] ShallowCopy[277402] A[275932] offset[276003] Tmp[275966] 1 1)(364321 'referenced modules list' ShallowCopy[277402] ShallowCopy[277402] ShallowCopy[277402])
          }(276061 call += start_n[275920] 1)
        } label _continueLabel[276067](276078 'move' tmp[276064](276073 call _cond_test(276075 call > numSamples[275936] 0))) tmp[276064]
      } label _breakLabel[276068]
    }(355404 'used modules list'(275944 'use' Random[304676])(275951 'import' ShallowCopy[277402]))
  }(355401 'used modules list'(353076 'use' ChapelStandard[20267])(273919 'use' Sort[267987]))
}