AST dump for Time after pass cleanup.
Module use list: 

{
  (353118 'use' ChapelStandard)
  (335012 'use' SysBasic)
  (335016 'import' HaltWrappers)
  function chpl_now_time[335020]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type
    real[16]
  }
  type _timevalue[335030]
  function chpl_null_timevalue[335034]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_now_timevalue[335042]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_timevalue_parts[335054](arg t[335051] :
  _timevalue, out arg seconds[335060] :
  (335059 call int[13] 32), out arg minutes[335067] :
  (335066 call int[13] 32), out arg hours[335074] :
  (335073 call int[13] 32), out arg mday[335081] :
  (335080 call int[13] 32), out arg month[335088] :
  (335087 call int[13] 32), out arg year[335095] :
  (335094 call int[13] 32), out arg wday[335102] :
  (335101 call int[13] 32), out arg yday[335109] :
  (335108 call int[13] 32), out arg isdst[335116] :
  (335115 call int[13] 32)) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  type TimeUnits[335132] def microseconds[335122]:TimeUnits[335132] def milliseconds[335124]:TimeUnits[335132] def seconds[335126]:TimeUnits[335132] def minutes[335128]:TimeUnits[335132] def hours[335130]:TimeUnits[335132]
  type Day[335151] def sunday[335137]:Day[335151] 0 def monday[335139]:Day[335151] def tuesday[335141]:Day[335151] def wednesday[335143]:Day[335151] def thursday[335145]:Day[335151] def friday[335147]:Day[335151] def saturday[335149]:Day[335151]
  function getCurrentTime[335167](arg unit[335163] :
  TimeUnits =
  (335160 call . TimeUnits c"seconds")) : _unknown[51]
  {
    (335180 return(335179 call _convert_microseconds unit(335178 call chpl_now_time)))
  }
  { scopeless type
    (335172 call real[16] 64)
  }
  function getCurrentDate[335188]() : _unknown[51]
  {
    unknown now[335193](335192 call chpl_now_timevalue)
    (335196 'end of statement')
    unknown seconds[335198](335225 call int[13] 32)
    unknown minutes[335201](335244 'typeof' seconds)
    unknown hours[335204](335242 'typeof' minutes)
    unknown mday[335207](335240 'typeof' hours)
    unknown month[335210](335238 'typeof' mday)
    unknown year[335213](335236 'typeof' month)
    unknown wday[335216](335234 'typeof' year)
    unknown yday[335219](335232 'typeof' wday)
    unknown isdst[335226](335230 'typeof' yday)
    (335245 'end of statement')
    (335258 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (335274 return(335272 call _build_tuple(335264 call + year 1900)(335268 call + month 1) mday))
  }
  function getCurrentDayOfWeek[335280]() : _unknown[51]
  {
    unknown now[335286](335285 call chpl_now_timevalue)
    (335289 'end of statement')
    unknown seconds[335291](335318 call int[13] 32)
    unknown minutes[335294](335337 'typeof' seconds)
    unknown hours[335297](335335 'typeof' minutes)
    unknown mday[335300](335333 'typeof' hours)
    unknown month[335303](335331 'typeof' mday)
    unknown year[335306](335329 'typeof' month)
    unknown wday[335309](335327 'typeof' year)
    unknown yday[335312](335325 'typeof' wday)
    unknown isdst[335319](335323 'typeof' yday)
    (335338 'end of statement')
    (335351 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (335358 return(335357 'try!-expr'(335355 call _cast Day wday)))
  }
  { scopeless type
    Day
  }
  function sleep[335369](arg t[335366] :
  real[16], arg unit[335376] :
  TimeUnits =
  (335373 call . TimeUnits c"seconds")) : _unknown[51] "inline" "no return value for void"
  {
    function chpl_task_sleep[335387](arg s[335384] :
    c_double) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      void[4]
    }
    if(335424 call _cond_test(335396 call < t 0))
    {
      (335419 call warning "sleep() called with negative time parameter: '" t "'")
      (335422 return _void[55])
    }
    (335441 call chpl_task_sleep(335438 call _cast c_double(335436 call _convert_to_seconds unit(335434 call _cast real[16] t))))
  }
  { scopeless type
    void[4]
  }
  function Timer[335659].clear[335469](arg _mt[335663]:_MT[238], arg this[335661]:Timer[335659]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (335474 call = accumulated 0.0)
    if(335487 call _cond_test running)
    {
      (335483 call = time(335482 call chpl_now_timevalue))
    }
  }
  { scopeless type
    void[4]
  }
  function Timer[335659].start[335496](arg _mt[335667]:_MT[238], arg this[335665]:Timer[335659]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335537 call _cond_test(335500 call ! running))
    {
      (335504 call = running 1)
      (335512 call = time(335511 call chpl_now_timevalue))
    }
    {
      (335534 call warning "start called on a timer that has not been stopped")
    }
  }
  { scopeless type
    void[4]
  }
  function Timer[335659].stop[335547](arg _mt[335671]:_MT[238], arg this[335669]:Timer[335659]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335596 call _cond_test running)
    {
      unknown time2[335555](335554 call chpl_now_timevalue) _timevalue
      (335558 'end of statement')
      (335566 call += accumulated(335565 call _diff_time time2 time))
      (335571 call = running 0)
    }
    {
      (335593 call warning "stop called on a timer that has not been started")
    }
  }
  { scopeless type
    void[4]
  }
  function Timer[335659].elapsed[335615](arg _mt[335675]:_MT[238], arg this[335673]:Timer[335659], arg unit[335611] :
  TimeUnits =
  (335608 call . TimeUnits c"seconds")) : _unknown[51] "method" "primary method"
  {
    if(335650 call _cond_test running)
    {
      unknown time2[335623](335622 call chpl_now_timevalue) _timevalue
      (335626 'end of statement')
      (335640 return(335639 call _convert_microseconds unit(335637 call + accumulated(335636 call _diff_time time2 time))))
    }
    {
      (335647 return(335646 call _convert_microseconds unit accumulated))
    }
  }
  { scopeless type
    real[16]
  }
  type Timer[335659] unknown time[335451] "no doc"(335450 call chpl_null_timevalue) _timevalue unknown accumulated[335457] "no doc" 0.0 real[16] unknown running[335463] "no doc" 0 bool[10]
  function _diff_time[335684](arg t1[335681] :
  _timevalue, arg t2[335687] :
  _timevalue) : _unknown[51] "inline" "private"
  {
    function chpl_timevalue_seconds[335696](arg t[335693] :
    _timevalue) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      (335701 call int[13] 64)
    }
    function chpl_timevalue_microseconds[335712](arg t[335709] :
    _timevalue) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      (335717 call int[13] 64)
    }
    unknown s1[335725](335724 call chpl_timevalue_seconds t1)
    (335728 'end of statement')
    unknown us1[335733](335732 call chpl_timevalue_microseconds t1)
    (335736 'end of statement')
    unknown s2[335741](335740 call chpl_timevalue_seconds t2)
    (335744 'end of statement')
    unknown us2[335749](335748 call chpl_timevalue_microseconds t2)
    (335752 'end of statement')
    (335771 return(335769 call -(335760 call +(335757 call * s1 1e+06) us1)(335767 call +(335764 call * s2 1e+06) us2)))
  }
  function _convert_to_seconds[335781](arg unit[335778] :
  TimeUnits, arg us[335784] :
  real[16]) : _unknown[51] "private"
  {
    {
      unknown tmp[335871] "expr temp" "maybe param" "maybe type" "temp"
      (335873 'move' tmp[335871] unit)
      if(335878 call _cond_test(335875 call == tmp[335871](335790 call . TimeUnits c"microseconds")))
      {
        (335800 return(335798 call * us 1e-06))
      }
      {
        if(335884 call _cond_test(335881 call == tmp[335871](335808 call . TimeUnits c"milliseconds")))
        {
          (335818 return(335816 call * us 0.001))
        }
        {
          if(335891 call _cond_test(335888 call == tmp[335871](335824 call . TimeUnits c"seconds")))
          {
            (335829 return us)
          }
          {
            if(335898 call _cond_test(335895 call == tmp[335871](335837 call . TimeUnits c"minutes")))
            {
              (335847 return(335845 call * us 60.0))
            }
            {
              if(335905 call _cond_test(335902 call == tmp[335871](335855 call . TimeUnits c"hours")))
              {
                (335865 return(335863 call * us 3600.0))
              }
            }
          }
        }
      }
    }
    (335933 call(335912 call . HaltWrappers c"exhaustiveSelectHalt") "unknown timeunits type")
    (335938 return(335936 call - 1.0))
  }
  function _convert_microseconds[335948](arg unit[335945] :
  TimeUnits, arg us[335951] :
  real[16]) : _unknown[51] "private"
  {
    {
      unknown tmp[336030] "expr temp" "maybe param" "maybe type" "temp"
      (336032 'move' tmp[336030] unit)
      if(336037 call _cond_test(336034 call == tmp[336030](335957 call . TimeUnits c"microseconds")))
      {
        (335962 return us)
      }
      {
        if(336043 call _cond_test(336040 call == tmp[336030](335968 call . TimeUnits c"milliseconds")))
        {
          (335978 return(335976 call / us 1000.0))
        }
        {
          if(336050 call _cond_test(336047 call == tmp[336030](335984 call . TimeUnits c"seconds")))
          {
            (335992 return(335990 call / us 1e+06))
          }
          {
            if(336057 call _cond_test(336054 call == tmp[336030](335998 call . TimeUnits c"minutes")))
            {
              (336008 return(336006 call / us 6e+07))
            }
            {
              if(336064 call _cond_test(336061 call == tmp[336030](336014 call . TimeUnits c"hours")))
              {
                (336024 return(336022 call / us 3.6e+09))
              }
            }
          }
        }
      }
    }
    (336076 call(336071 call . HaltWrappers c"exhaustiveSelectHalt") "unknown timeunits type")
    (336081 return(336079 call - 1.0))
  }
}