AST dump for Time after pass cleanup.
Module use list: 

{
  (353185 'use' ChapelStandard)
  (335079 'use' SysBasic)
  (335083 'import' HaltWrappers)
  function chpl_now_time[335087]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type
    real[16]
  }
  type _timevalue[335097]
  function chpl_null_timevalue[335101]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_now_timevalue[335109]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_timevalue_parts[335121](arg t[335118] :
  _timevalue, out arg seconds[335127] :
  (335126 call int[13] 32), out arg minutes[335134] :
  (335133 call int[13] 32), out arg hours[335141] :
  (335140 call int[13] 32), out arg mday[335148] :
  (335147 call int[13] 32), out arg month[335155] :
  (335154 call int[13] 32), out arg year[335162] :
  (335161 call int[13] 32), out arg wday[335169] :
  (335168 call int[13] 32), out arg yday[335176] :
  (335175 call int[13] 32), out arg isdst[335183] :
  (335182 call int[13] 32)) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  type TimeUnits[335199] def microseconds[335189]:TimeUnits[335199] def milliseconds[335191]:TimeUnits[335199] def seconds[335193]:TimeUnits[335199] def minutes[335195]:TimeUnits[335199] def hours[335197]:TimeUnits[335199]
  type Day[335218] def sunday[335204]:Day[335218] 0 def monday[335206]:Day[335218] def tuesday[335208]:Day[335218] def wednesday[335210]:Day[335218] def thursday[335212]:Day[335218] def friday[335214]:Day[335218] def saturday[335216]:Day[335218]
  function getCurrentTime[335234](arg unit[335230] :
  TimeUnits =
  (335227 call . TimeUnits c"seconds")) : _unknown[51]
  {
    (335247 return(335246 call _convert_microseconds unit(335245 call chpl_now_time)))
  }
  { scopeless type
    (335239 call real[16] 64)
  }
  function getCurrentDate[335255]() : _unknown[51]
  {
    unknown now[335260](335259 call chpl_now_timevalue)
    (335263 'end of statement')
    unknown seconds[335265](335292 call int[13] 32)
    unknown minutes[335268](335311 'typeof' seconds)
    unknown hours[335271](335309 'typeof' minutes)
    unknown mday[335274](335307 'typeof' hours)
    unknown month[335277](335305 'typeof' mday)
    unknown year[335280](335303 'typeof' month)
    unknown wday[335283](335301 'typeof' year)
    unknown yday[335286](335299 'typeof' wday)
    unknown isdst[335293](335297 'typeof' yday)
    (335312 'end of statement')
    (335325 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (335341 return(335339 call _build_tuple(335331 call + year 1900)(335335 call + month 1) mday))
  }
  function getCurrentDayOfWeek[335347]() : _unknown[51]
  {
    unknown now[335353](335352 call chpl_now_timevalue)
    (335356 'end of statement')
    unknown seconds[335358](335385 call int[13] 32)
    unknown minutes[335361](335404 'typeof' seconds)
    unknown hours[335364](335402 'typeof' minutes)
    unknown mday[335367](335400 'typeof' hours)
    unknown month[335370](335398 'typeof' mday)
    unknown year[335373](335396 'typeof' month)
    unknown wday[335376](335394 'typeof' year)
    unknown yday[335379](335392 'typeof' wday)
    unknown isdst[335386](335390 'typeof' yday)
    (335405 'end of statement')
    (335418 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (335425 return(335424 'try!-expr'(335422 call _cast Day wday)))
  }
  { scopeless type
    Day
  }
  function sleep[335436](arg t[335433] :
  real[16], arg unit[335443] :
  TimeUnits =
  (335440 call . TimeUnits c"seconds")) : _unknown[51] "inline" "no return value for void"
  {
    function chpl_task_sleep[335454](arg s[335451] :
    c_double) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      void[4]
    }
    if(335491 call _cond_test(335463 call < t 0))
    {
      (335486 call warning "sleep() called with negative time parameter: '" t "'")
      (335489 return _void[55])
    }
    (335508 call chpl_task_sleep(335505 call _cast c_double(335503 call _convert_to_seconds unit(335501 call _cast real[16] t))))
  }
  { scopeless type
    void[4]
  }
  function Timer[335726].clear[335536](arg _mt[335730]:_MT[238], arg this[335728]:Timer[335726]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (335541 call = accumulated 0.0)
    if(335554 call _cond_test running)
    {
      (335550 call = time(335549 call chpl_now_timevalue))
    }
  }
  { scopeless type
    void[4]
  }
  function Timer[335726].start[335563](arg _mt[335734]:_MT[238], arg this[335732]:Timer[335726]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335604 call _cond_test(335567 call ! running))
    {
      (335571 call = running 1)
      (335579 call = time(335578 call chpl_now_timevalue))
    }
    {
      (335601 call warning "start called on a timer that has not been stopped")
    }
  }
  { scopeless type
    void[4]
  }
  function Timer[335726].stop[335614](arg _mt[335738]:_MT[238], arg this[335736]:Timer[335726]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335663 call _cond_test running)
    {
      unknown time2[335622](335621 call chpl_now_timevalue) _timevalue
      (335625 'end of statement')
      (335633 call += accumulated(335632 call _diff_time time2 time))
      (335638 call = running 0)
    }
    {
      (335660 call warning "stop called on a timer that has not been started")
    }
  }
  { scopeless type
    void[4]
  }
  function Timer[335726].elapsed[335682](arg _mt[335742]:_MT[238], arg this[335740]:Timer[335726], arg unit[335678] :
  TimeUnits =
  (335675 call . TimeUnits c"seconds")) : _unknown[51] "method" "primary method"
  {
    if(335717 call _cond_test running)
    {
      unknown time2[335690](335689 call chpl_now_timevalue) _timevalue
      (335693 'end of statement')
      (335707 return(335706 call _convert_microseconds unit(335704 call + accumulated(335703 call _diff_time time2 time))))
    }
    {
      (335714 return(335713 call _convert_microseconds unit accumulated))
    }
  }
  { scopeless type
    real[16]
  }
  type Timer[335726] unknown time[335518] "no doc"(335517 call chpl_null_timevalue) _timevalue unknown accumulated[335524] "no doc" 0.0 real[16] unknown running[335530] "no doc" 0 bool[10]
  function _diff_time[335751](arg t1[335748] :
  _timevalue, arg t2[335754] :
  _timevalue) : _unknown[51] "inline" "private"
  {
    function chpl_timevalue_seconds[335763](arg t[335760] :
    _timevalue) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      (335768 call int[13] 64)
    }
    function chpl_timevalue_microseconds[335779](arg t[335776] :
    _timevalue) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      (335784 call int[13] 64)
    }
    unknown s1[335792](335791 call chpl_timevalue_seconds t1)
    (335795 'end of statement')
    unknown us1[335800](335799 call chpl_timevalue_microseconds t1)
    (335803 'end of statement')
    unknown s2[335808](335807 call chpl_timevalue_seconds t2)
    (335811 'end of statement')
    unknown us2[335816](335815 call chpl_timevalue_microseconds t2)
    (335819 'end of statement')
    (335838 return(335836 call -(335827 call +(335824 call * s1 1e+06) us1)(335834 call +(335831 call * s2 1e+06) us2)))
  }
  function _convert_to_seconds[335848](arg unit[335845] :
  TimeUnits, arg us[335851] :
  real[16]) : _unknown[51] "private"
  {
    {
      unknown tmp[335938] "expr temp" "maybe param" "maybe type" "temp"
      (335940 'move' tmp[335938] unit)
      if(335945 call _cond_test(335942 call == tmp[335938](335857 call . TimeUnits c"microseconds")))
      {
        (335867 return(335865 call * us 1e-06))
      }
      {
        if(335951 call _cond_test(335948 call == tmp[335938](335875 call . TimeUnits c"milliseconds")))
        {
          (335885 return(335883 call * us 0.001))
        }
        {
          if(335958 call _cond_test(335955 call == tmp[335938](335891 call . TimeUnits c"seconds")))
          {
            (335896 return us)
          }
          {
            if(335965 call _cond_test(335962 call == tmp[335938](335904 call . TimeUnits c"minutes")))
            {
              (335914 return(335912 call * us 60.0))
            }
            {
              if(335972 call _cond_test(335969 call == tmp[335938](335922 call . TimeUnits c"hours")))
              {
                (335932 return(335930 call * us 3600.0))
              }
            }
          }
        }
      }
    }
    (336000 call(335979 call . HaltWrappers c"exhaustiveSelectHalt") "unknown timeunits type")
    (336005 return(336003 call - 1.0))
  }
  function _convert_microseconds[336015](arg unit[336012] :
  TimeUnits, arg us[336018] :
  real[16]) : _unknown[51] "private"
  {
    {
      unknown tmp[336097] "expr temp" "maybe param" "maybe type" "temp"
      (336099 'move' tmp[336097] unit)
      if(336104 call _cond_test(336101 call == tmp[336097](336024 call . TimeUnits c"microseconds")))
      {
        (336029 return us)
      }
      {
        if(336110 call _cond_test(336107 call == tmp[336097](336035 call . TimeUnits c"milliseconds")))
        {
          (336045 return(336043 call / us 1000.0))
        }
        {
          if(336117 call _cond_test(336114 call == tmp[336097](336051 call . TimeUnits c"seconds")))
          {
            (336059 return(336057 call / us 1e+06))
          }
          {
            if(336124 call _cond_test(336121 call == tmp[336097](336065 call . TimeUnits c"minutes")))
            {
              (336075 return(336073 call / us 6e+07))
            }
            {
              if(336131 call _cond_test(336128 call == tmp[336097](336081 call . TimeUnits c"hours")))
              {
                (336091 return(336089 call / us 3.6e+09))
              }
            }
          }
        }
      }
    }
    (336143 call(336138 call . HaltWrappers c"exhaustiveSelectHalt") "unknown timeunits type")
    (336148 return(336146 call - 1.0))
  }
}