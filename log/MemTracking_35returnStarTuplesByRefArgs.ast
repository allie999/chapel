AST dump for MemTracking after pass returnStarTuplesByRefArgs.
Module use list: ChapelStandard SysCTypes 

{
  function chpl__init_MemTracking[416011]() : void[4] "insert line file info" "module init" "resolved"
  {
    const-val call_tmp[678427]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678430 'move' call_tmp[678427](544267 call chpl_config_has_value[334] c"memTrack" c"Built-in"))
    const-val call_tmp[2114428]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114430 'move' call_tmp[2114428](2114432 '!' call_tmp[678427]))
    if call_tmp[2114428]
    {
      (544286 'move' tmp[544258] 0)
    }
    {
      const-val call_tmp[678442]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678445 'move' call_tmp[678442](544277 call chpl_config_get_value[350] c"memTrack" c"Built-in"))
      (544282 'move' tmp[544258](544280 call _command_line_cast[1353815] call_tmp[678442]))
    }
    (544260 'move' memTrack[166611] tmp[544258])
    (2085021 '_private_broadcast' memTrack[166611])
    const-val call_tmp[678447]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678450 'move' call_tmp[678447](544297 call chpl_config_has_value[334] c"memStats" c"Built-in"))
    const-val call_tmp[2114437]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114439 'move' call_tmp[2114437](2114441 '!' call_tmp[678447]))
    if call_tmp[2114437]
    {
      (544316 'move' tmp[544288] 0)
    }
    {
      const-val call_tmp[678462]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678465 'move' call_tmp[678462](544307 call chpl_config_get_value[350] c"memStats" c"Built-in"))
      (544312 'move' tmp[544288](544310 call _command_line_cast[1353858] call_tmp[678462]))
    }
    (544290 'move' memStats[166616] tmp[544288])
    (2085023 '_private_broadcast' memStats[166616])
    const-val call_tmp[678467]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678470 'move' call_tmp[678467](544327 call chpl_config_has_value[334] c"memLeaksByType" c"Built-in"))
    const-val call_tmp[2114446]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114448 'move' call_tmp[2114446](2114450 '!' call_tmp[678467]))
    if call_tmp[2114446]
    {
      (544346 'move' tmp[544318] 0)
    }
    {
      const-val call_tmp[678482]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678485 'move' call_tmp[678482](544337 call chpl_config_get_value[350] c"memLeaksByType" c"Built-in"))
      (544342 'move' tmp[544318](544340 call _command_line_cast[1353901] call_tmp[678482]))
    }
    (544320 'move' memLeaksByType[166621] tmp[544318])
    (2085025 '_private_broadcast' memLeaksByType[166621])
    const-val call_tmp[678487]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678490 'move' call_tmp[678487](544357 call chpl_config_has_value[334] c"memLeaks" c"Built-in"))
    const-val call_tmp[2114455]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114457 'move' call_tmp[2114455](2114459 '!' call_tmp[678487]))
    if call_tmp[2114455]
    {
      (544376 'move' tmp[544348] 0)
    }
    {
      const-val call_tmp[678502]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678505 'move' call_tmp[678502](544367 call chpl_config_get_value[350] c"memLeaks" c"Built-in"))
      (544372 'move' tmp[544348](544370 call _command_line_cast[1353944] call_tmp[678502]))
    }
    (544350 'move' memLeaks[166626] tmp[544348])
    (2085027 '_private_broadcast' memLeaks[166626])
    const-val call_tmp[678507]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678510 'move' call_tmp[678507](544387 call chpl_config_has_value[334] c"memMax" c"Built-in"))
    const-val call_tmp[2114464]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114466 'move' call_tmp[2114464](2114468 '!' call_tmp[678507]))
    if call_tmp[2114464]
    {
      const-val init_coerce_tmp[1353986]:uint(64)[115] "dead at end of block" "temp"
      (1353989 'move' init_coerce_tmp[1353986](1356765 'cast' uint(64)[115] 0))
      (544406 'move' tmp[544378] init_coerce_tmp[1353986])
    }
    {
      const-val call_tmp[678522]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678525 'move' call_tmp[678522](544397 call chpl_config_get_value[350] c"memMax" c"Built-in"))
      (544402 'move' tmp[544378](544400 call _command_line_cast[1353995] call_tmp[678522]))
    }
    (544380 'move' memMax[166631] tmp[544378])
    (2085029 '_private_broadcast' memMax[166631])
    const-val call_tmp[678527]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678530 'move' call_tmp[678527](544417 call chpl_config_has_value[334] c"memThreshold" c"Built-in"))
    const-val call_tmp[2114473]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114475 'move' call_tmp[2114473](2114477 '!' call_tmp[678527]))
    if call_tmp[2114473]
    {
      const-val init_coerce_tmp[1356320]:uint(64)[115] "dead at end of block" "temp"
      (1356323 'move' init_coerce_tmp[1356320](1356769 'cast' uint(64)[115] 0))
      (544436 'move' tmp[544408] init_coerce_tmp[1356320])
    }
    {
      const-val call_tmp[678542]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678545 'move' call_tmp[678542](544427 call chpl_config_get_value[350] c"memThreshold" c"Built-in"))
      (544432 'move' tmp[544408](544430 call _command_line_cast[1356329] call_tmp[678542]))
    }
    (544410 'move' memThreshold[166636] tmp[544408])
    (2085031 '_private_broadcast' memThreshold[166636])
    const-val call_tmp[678547]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678550 'move' call_tmp[678547](544447 call chpl_config_has_value[334] c"memLog" c"Built-in"))
    const-val call_tmp[2114482]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114484 'move' call_tmp[2114482](2114486 '!' call_tmp[678547]))
    if call_tmp[2114482]
    {
      (1356773 call init[30760] tmp[544438])
    }
    {
      const-val call_tmp[678562]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678565 'move' call_tmp[678562](544457 call chpl_config_get_value[350] c"memLog" c"Built-in"))
      const-val ret_tmp[1837977]:string[26] "temp"
      (544460 call _command_line_cast[1356373] call_tmp[678562] ret_tmp[1837977])
      (1837980 'move' tmp[544438] ret_tmp[1837977])
    }
    (544440 'move' memLog[166640] tmp[544438])
    (2085033 '_private_broadcast' memLog[166640])
    const-val call_tmp[678567]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678570 'move' call_tmp[678567](544477 call chpl_config_has_value[334] c"memLeaksLog" c"Built-in"))
    const-val call_tmp[2114491]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114493 'move' call_tmp[2114491](2114495 '!' call_tmp[678567]))
    if call_tmp[2114491]
    {
      (1356778 call init[30760] tmp[544468])
    }
    {
      const-val call_tmp[678582]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678585 'move' call_tmp[678582](544487 call chpl_config_get_value[350] c"memLeaksLog" c"Built-in"))
      const-val ret_tmp[1838013]:string[26] "temp"
      (544490 call _command_line_cast[1356679] call_tmp[678582] ret_tmp[1838013])
      (1838016 'move' tmp[544468] ret_tmp[1838013])
    }
    (544470 'move' memLeaksLog[166645] tmp[544468])
    (2085035 '_private_broadcast' memLeaksLog[166645])
    const-val call_tmp[678587]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678590 'move' call_tmp[678587](544507 call chpl_config_has_value[334] c"memLeaksByDesc" c"Built-in"))
    const-val call_tmp[2114500]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114502 'move' call_tmp[2114500](2114504 '!' call_tmp[678587]))
    if call_tmp[2114500]
    {
      (1356783 call init[30760] tmp[544498])
    }
    {
      const-val call_tmp[678602]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678605 'move' call_tmp[678602](544517 call chpl_config_get_value[350] c"memLeaksByDesc" c"Built-in"))
      const-val ret_tmp[1838025]:string[26] "temp"
      (544520 call _command_line_cast[1356723] call_tmp[678602] ret_tmp[1838025])
      (1838028 'move' tmp[544498] ret_tmp[1838025])
    }
    (544500 'move' memLeaksByDesc[166650] tmp[544498])
    (2085037 '_private_broadcast' memLeaksByDesc[166650])
    (678612 'move' call_tmp[678609] memMax[166631])
    (544528 'move' cMemMax[166661] call_tmp[678609])
    (2085039 '_private_broadcast' cMemMax[166661])
    (678619 'move' call_tmp[678616] memThreshold[166636])
    (544530 'move' cMemThreshold[166671] call_tmp[678616])
    (2085041 '_private_broadcast' cMemThreshold[166671])
    (521918 return _void[55])
  }
  const-val memTrack[166611]:bool[10] "config" "const" "insert auto destroy"
  const-val memStats[166616]:bool[10] "config" "const" "insert auto destroy"
  const-val memLeaksByType[166621]:bool[10] "config" "const" "insert auto destroy"
  const-val memLeaks[166626]:bool[10] "config" "const" "insert auto destroy"
  const-val memMax[166631]:uint(64)[115] "config" "const" "insert auto destroy"
  const-val memThreshold[166636]:uint(64)[115] "config" "const" "insert auto destroy"
  const-val memLog[166640]:string[26] "config" "const" "insert auto destroy"
  const-val memLeaksLog[166645]:string[26] "config" "const" "insert auto destroy" "no auto destroy"
  const-val memLeaksByDesc[166650]:string[26] "config" "const" "insert auto destroy" "no auto destroy"
  const-val cMemMax[166661]:uint(64)[115] "dead at end of block" "const" "insert auto destroy"
  const-val cMemThreshold[166671]:uint(64)[115] "dead at end of block" "const" "insert auto destroy"
  function chpl_memTracking_returnConfigVals[166681](ref arg ret_memTrack[166678]:bool[10], ref arg ret_memStats[166684]:bool[10], ref arg ret_memLeaksByType[166688]:bool[10], ref arg ret_memLeaksByDesc[166692]:c_string[19], ref arg ret_memLeaks[166696]:bool[10], ref arg ret_memMax[166700]:uint(64)[115], ref arg ret_memThreshold[166704]:uint(64)[115], ref arg ret_memLog[166708]:c_string[19], ref arg ret_memLeaksLog[166712]:c_string[19]) : void[4] "export" "local args" "resolved" "no return value for void"
  {
    const-val local_memLeaksLog[2377175]:string[26] "temp"
    (2377176 'move' local_memLeaksLog[2377175] memLeaksLog[166645])
    const-val local_memLog[2377166]:string[26] "temp"
    (2377167 'move' local_memLog[2377166] memLog[166640])
    const-val local__str_literal_4795[2377160]:string[26] "temp"
    (2377161 'move' "Cannot call .c_str() on a remote string" "Cannot call .c_str() on a remote string")
    const-val local__str_literal_503[2377153]:string[26] "temp"
    (2377154 'move' "Encountered corrupt string metadata" "Encountered corrupt string metadata")
    const-val local_memLeaksByDesc[2377147]:string[26] "temp"
    (2377148 'move' local_memLeaksByDesc[2377147] memLeaksByDesc[166650])
    const-val local__str_literal_129[2377141]:string[26] "temp"
    (2377142 'move' "argument to ! is nil" "argument to ! is nil")
    const-val local_cMemThreshold[2377135]:uint(64)[115] "temp"
    (2377136 'move' local_cMemThreshold[2377135] cMemThreshold[166671])
    const-val local_cMemMax[2377129]:uint(64)[115] "temp"
    (2377130 'move' local_cMemMax[2377129] cMemMax[166661])
    const-val local_memLeaks[2377123]:bool[10] "temp"
    (2377124 'move' local_memLeaks[2377123] memLeaks[166626])
    const-val local_memLeaksByType[2377117]:bool[10] "temp"
    (2377118 'move' local_memLeaksByType[2377117] memLeaksByType[166621])
    const-val local_memStats[2377111]:bool[10] "temp"
    (2377112 'move' local_memStats[2377111] memStats[166616])
    const-val local_memTrack[2377105]:bool[10] "temp"
    (2377106 'move' local_memTrack[2377105] memTrack[166611])
    (2135121 '=' ret_memTrack[166678] local_memTrack[2377105])
    (2135127 '=' ret_memStats[166684] local_memStats[2377111])
    (2135133 '=' ret_memLeaksByType[166688] local_memLeaksByType[2377117])
    (2135139 '=' ret_memLeaks[166696] local_memLeaks[2377123])
    (2212033 '=' ret_memMax[166700] local_cMemMax[2377129])
    (2212039 '=' ret_memThreshold[166704] local_cMemThreshold[2377135])
    const-val call_tmp[678621]:locale[28] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val call_tmp[2167351]:chpl_localeID_t[209294] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val call_tmp[2167353]:chpl_localeID_t[209294] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    (2167355 'move' call_tmp[2167353](2167358 call chpl_rt_buildLocaleID[209372] chpl_nodeID[208152] c_sublocid_any[89875]))
    (2167361 'move' call_tmp[2167351] call_tmp[2167353])
    const-val call_tmp[2167364]:locale[28] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val ret_tmp[2167366]:locale[28] "temp"
    (2167369 call chpl_localeID_to_locale[92849] call_tmp[2167351] ret_tmp[2167366])
    (2167372 'move' call_tmp[2167364] ret_tmp[2167366])
    (1830484 'move' call_tmp[678621] call_tmp[2167364])
    val coerce_tmp[2168827]:BaseLocale[91201] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (2168829 'move' coerce_tmp[2168827](2168831 '.v' call_tmp[678621] _instance[89975]))
    val coerce_tmp[2168834]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (2168836 'move' coerce_tmp[2168834](2168838 'cast' object[22] coerce_tmp[2168827]))
    const-val call_tmp[2168841]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2168843 'move' call_tmp[2168841](2168845 'ptr_eq' coerce_tmp[2168834] nil[44]))
    if call_tmp[2168841]
    {
      (2168851 call nilCheckHalt[210151] "argument to ! is nil")
    }
    const-val call_tmp[2168854]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
    (2168856 'move' call_tmp[2168854](2168859 call id[90754] coerce_tmp[2168827]))
    const-val call_tmp[2115450]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2115452 'move' call_tmp[2115450](2115454 '!=' call_tmp[2168854] 0))
    if call_tmp[2115450]
    {
      ref i_this[2146209]:string[26] "temp"
      (2146213 'move' i_this[2146209](2146211 'set reference' memLeaksByDesc[166650]))
      const-val coerce_tmp[2146218]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2146220 'move' coerce_tmp[2146218](2146222 '.v' local_memLeaksByDesc[2377147] cachedNumCodepoints[30731]))
      (2146228 'noop')
      const-val call_tmp[2146229]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2146231 'move' call_tmp[2146229](2146234 call countNumCodepoints[181334] i_this[2146209]))
      const-val call_tmp[2146236]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2146238 'move' call_tmp[2146236](2146240 '!=' coerce_tmp[2146218] call_tmp[2146229]))
      if call_tmp[2146236]
      {
        (2146246 call halt[154067] "Encountered corrupt string metadata")
      }
      const-val call_tmp[2115465]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2115467 'move' call_tmp[2115465](2115469 '!=' coerce_tmp[2146218] 0))
      if call_tmp[2115465]
      {
        val local_memLeaksByDesc[166761]:string[26] "dead at end of block" "insert auto destroy"
        (544532 call init=[30771] local_memLeaksByDesc[166761] local_memLeaksByDesc[2377147])
        (2366933 '.=' local_memLeaksByDesc[166761] isOwned[30743] 0)
        const-val coerce_tmp[2151956]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2151958 'move' coerce_tmp[2151956](2151960 '.v' local_memLeaksByDesc[166761] locale_id[30754]))
        const-val call_tmp[2151963]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2151965 'move' call_tmp[2151963](2151967 '!=' coerce_tmp[2151956] chpl_nodeID[208152]))
        if call_tmp[2151963]
        {
          (2151973 call halt[154067] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2151976]:c_ptr(uint(8))[937423] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2151978 'move' coerce_tmp[2151976](2151980 '.v' local_memLeaksByDesc[166761] buff[30737]))
        const-val call_tmp[2151983]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2151985 'move' call_tmp[2151983](2151987 'cast' c_string[19] coerce_tmp[2151976]))
        (2119797 '=' ret_memLeaksByDesc[166692] call_tmp[2151983])
        ref i_x[2129577]:string[26] "temp"
        (2129581 'move' i_x[2129577](2129579 'set reference' local_memLeaksByDesc[166761]))
        (2129585 call deinit[30831] i_x[2129577])
      }
      {
        const-val call_tmp[2119925]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2119927 'move' call_tmp[2119925](2119929 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2119932]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2119934 'move' call_tmp[2119932](2119936 'cast' c_string[19] call_tmp[2119925]))
        (2119939 '=' ret_memLeaksByDesc[166692] call_tmp[2119932])
      }
      ref i_this[2146251]:string[26] "temp"
      (2146255 'move' i_this[2146251](2146253 'set reference' memLog[166640]))
      const-val coerce_tmp[2146260]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2146262 'move' coerce_tmp[2146260](2146264 '.v' local_memLog[2377166] cachedNumCodepoints[30731]))
      (2146270 'noop')
      const-val call_tmp[2146271]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2146273 'move' call_tmp[2146271](2146276 call countNumCodepoints[181334] i_this[2146251]))
      const-val call_tmp[2146278]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2146280 'move' call_tmp[2146278](2146282 '!=' coerce_tmp[2146260] call_tmp[2146271]))
      if call_tmp[2146278]
      {
        (2146288 call halt[154067] "Encountered corrupt string metadata")
      }
      const-val call_tmp[2115480]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2115482 'move' call_tmp[2115480](2115484 '!=' coerce_tmp[2146260] 0))
      if call_tmp[2115480]
      {
        val local_memLog[166803]:string[26] "dead at end of block" "insert auto destroy"
        (544534 call init=[30771] local_memLog[166803] local_memLog[2377166])
        (2366943 '.=' local_memLog[166803] isOwned[30743] 0)
        const-val coerce_tmp[2151999]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2152001 'move' coerce_tmp[2151999](2152003 '.v' local_memLog[166803] locale_id[30754]))
        const-val call_tmp[2152006]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2152008 'move' call_tmp[2152006](2152010 '!=' coerce_tmp[2151999] chpl_nodeID[208152]))
        if call_tmp[2152006]
        {
          (2152016 call halt[154067] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2152019]:c_ptr(uint(8))[937423] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2152021 'move' coerce_tmp[2152019](2152023 '.v' local_memLog[166803] buff[30737]))
        const-val call_tmp[2152026]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2152028 'move' call_tmp[2152026](2152030 'cast' c_string[19] coerce_tmp[2152019]))
        (2119809 '=' ret_memLog[166708] call_tmp[2152026])
        ref i_x[2129589]:string[26] "temp"
        (2129593 'move' i_x[2129589](2129591 'set reference' local_memLog[166803]))
        (2129597 call deinit[30831] i_x[2129589])
      }
      {
        const-val call_tmp[2119945]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2119947 'move' call_tmp[2119945](2119949 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2119952]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2119954 'move' call_tmp[2119952](2119956 'cast' c_string[19] call_tmp[2119945]))
        (2119959 '=' ret_memLog[166708] call_tmp[2119952])
      }
      ref i_this[2146293]:string[26] "temp"
      (2146297 'move' i_this[2146293](2146295 'set reference' memLeaksLog[166645]))
      const-val coerce_tmp[2146302]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2146304 'move' coerce_tmp[2146302](2146306 '.v' local_memLeaksLog[2377175] cachedNumCodepoints[30731]))
      (2146312 'noop')
      const-val call_tmp[2146313]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2146315 'move' call_tmp[2146313](2146318 call countNumCodepoints[181334] i_this[2146293]))
      const-val call_tmp[2146320]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2146322 'move' call_tmp[2146320](2146324 '!=' coerce_tmp[2146302] call_tmp[2146313]))
      if call_tmp[2146320]
      {
        (2146330 call halt[154067] "Encountered corrupt string metadata")
      }
      const-val call_tmp[2115495]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2115497 'move' call_tmp[2115495](2115499 '!=' coerce_tmp[2146302] 0))
      if call_tmp[2115495]
      {
        val local_memLeaksLog[166844]:string[26] "dead at end of block" "insert auto destroy"
        (544536 call init=[30771] local_memLeaksLog[166844] local_memLeaksLog[2377175])
        (2366953 '.=' local_memLeaksLog[166844] isOwned[30743] 0)
        const-val coerce_tmp[2152042]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2152044 'move' coerce_tmp[2152042](2152046 '.v' local_memLeaksLog[166844] locale_id[30754]))
        const-val call_tmp[2152049]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2152051 'move' call_tmp[2152049](2152053 '!=' coerce_tmp[2152042] chpl_nodeID[208152]))
        if call_tmp[2152049]
        {
          (2152059 call halt[154067] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2152062]:c_ptr(uint(8))[937423] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2152064 'move' coerce_tmp[2152062](2152066 '.v' local_memLeaksLog[166844] buff[30737]))
        const-val call_tmp[2152069]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2152071 'move' call_tmp[2152069](2152073 'cast' c_string[19] coerce_tmp[2152062]))
        (2119815 '=' ret_memLeaksLog[166712] call_tmp[2152069])
        ref i_x[2129601]:string[26] "temp"
        (2129605 'move' i_x[2129601](2129603 'set reference' local_memLeaksLog[166844]))
        (2129609 call deinit[30831] i_x[2129601])
      }
      {
        const-val call_tmp[2119965]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2119967 'move' call_tmp[2119965](2119969 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2119972]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2119974 'move' call_tmp[2119972](2119976 'cast' c_string[19] call_tmp[2119965]))
        (2119979 '=' ret_memLeaksLog[166712] call_tmp[2119972])
      }
    }
    {
      const-val coerce_tmp[2152085]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2152087 'move' coerce_tmp[2152085](2152089 '.v' local_memLeaksByDesc[2377147] locale_id[30754]))
      const-val call_tmp[2152092]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2152094 'move' call_tmp[2152092](2152096 '!=' coerce_tmp[2152085] chpl_nodeID[208152]))
      if call_tmp[2152092]
      {
        (2152102 call halt[154067] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2152105]:c_ptr(uint(8))[937423] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2152107 'move' coerce_tmp[2152105](2152109 '.v' local_memLeaksByDesc[2377147] buff[30737]))
      const-val call_tmp[2152112]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2152114 'move' call_tmp[2152112](2152116 'cast' c_string[19] coerce_tmp[2152105]))
      (2119821 '=' ret_memLeaksByDesc[166692] call_tmp[2152112])
      const-val coerce_tmp[2152128]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2152130 'move' coerce_tmp[2152128](2152132 '.v' local_memLog[2377166] locale_id[30754]))
      const-val call_tmp[2152135]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2152137 'move' call_tmp[2152135](2152139 '!=' coerce_tmp[2152128] chpl_nodeID[208152]))
      if call_tmp[2152135]
      {
        (2152145 call halt[154067] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2152148]:c_ptr(uint(8))[937423] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2152150 'move' coerce_tmp[2152148](2152152 '.v' local_memLog[2377166] buff[30737]))
      const-val call_tmp[2152155]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2152157 'move' call_tmp[2152155](2152159 'cast' c_string[19] coerce_tmp[2152148]))
      (2119827 '=' ret_memLog[166708] call_tmp[2152155])
      const-val coerce_tmp[2152171]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2152173 'move' coerce_tmp[2152171](2152175 '.v' local_memLeaksLog[2377175] locale_id[30754]))
      const-val call_tmp[2152178]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2152180 'move' call_tmp[2152178](2152182 '!=' coerce_tmp[2152171] chpl_nodeID[208152]))
      if call_tmp[2152178]
      {
        (2152188 call halt[154067] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2152191]:c_ptr(uint(8))[937423] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2152193 'move' coerce_tmp[2152191](2152195 '.v' local_memLeaksLog[2377175] buff[30737]))
      const-val call_tmp[2152198]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2152200 'move' call_tmp[2152198](2152202 'cast' c_string[19] coerce_tmp[2152191]))
      (2119833 '=' ret_memLeaksLog[166712] call_tmp[2152198])
    }
    ref i_x[2264183]:locale[28] "temp"
    (2264187 'move' i_x[2264183](2264185 'set reference' call_tmp[678621]))
    (2264191 call deinit[90185] i_x[2264183])
    (521916 return _void[55])
  }
  val tmp[544258]:bool[10] "dead at end of block" "temp"
  val tmp[544288]:bool[10] "dead at end of block" "temp"
  val tmp[544318]:bool[10] "dead at end of block" "temp"
  val tmp[544348]:bool[10] "dead at end of block" "temp"
  val tmp[544378]:uint(64)[115] "dead at end of block" "temp"
  val tmp[544408]:uint(64)[115] "dead at end of block" "temp"
  val tmp[544438]:string[26] "dead at end of block" "temp"
  val tmp[544468]:string[26] "dead at end of block" "temp"
  val tmp[544498]:string[26] "dead at end of block" "temp"
  const-val call_tmp[678609]:uint(64)[115] "dead at end of block" "maybe param" "temp"
  const-val call_tmp[678616]:uint(64)[115] "dead at end of block" "maybe param" "temp"
  function chpl__deinit_MemTracking[1852128]() : void[4] "resolved"
  {
    label _endchpl__deinit_MemTracking[1852134]
    ref i_x[2133093]:string[26] "temp"
    (2133097 'move' i_x[2133093](2133095 'set reference' memLog[166640]))
    (2133101 call deinit[30831] i_x[2133093])
    (1852131 return _void[55])
  }
}