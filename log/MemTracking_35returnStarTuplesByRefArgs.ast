AST dump for MemTracking after pass returnStarTuplesByRefArgs.
Module use list: ChapelStandard SysCTypes 

{
  function chpl__init_MemTracking[416054]() : void[4] "insert line file info" "module init" "resolved"
  {
    const-val call_tmp[678482]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678485 'move' call_tmp[678482](544322 call chpl_config_has_value[334] c"memTrack" c"Built-in"))
    const-val call_tmp[2176070]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176072 'move' call_tmp[2176070](2176074 '!' call_tmp[678482]))
    if call_tmp[2176070]
    {
      (544341 'move' tmp[544313] 0)
    }
    {
      const-val call_tmp[678497]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678500 'move' call_tmp[678497](544332 call chpl_config_get_value[350] c"memTrack" c"Built-in"))
      (544337 'move' tmp[544313](544335 call _command_line_cast[1353876] call_tmp[678497]))
    }
    (544315 'move' memTrack[166657] tmp[544313])
    (2146803 '_private_broadcast' memTrack[166657])
    const-val call_tmp[678502]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678505 'move' call_tmp[678502](544352 call chpl_config_has_value[334] c"memStats" c"Built-in"))
    const-val call_tmp[2176079]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176081 'move' call_tmp[2176079](2176083 '!' call_tmp[678502]))
    if call_tmp[2176079]
    {
      (544371 'move' tmp[544343] 0)
    }
    {
      const-val call_tmp[678517]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678520 'move' call_tmp[678517](544362 call chpl_config_get_value[350] c"memStats" c"Built-in"))
      (544367 'move' tmp[544343](544365 call _command_line_cast[1353919] call_tmp[678517]))
    }
    (544345 'move' memStats[166662] tmp[544343])
    (2146805 '_private_broadcast' memStats[166662])
    const-val call_tmp[678522]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678525 'move' call_tmp[678522](544382 call chpl_config_has_value[334] c"memLeaksByType" c"Built-in"))
    const-val call_tmp[2176088]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176090 'move' call_tmp[2176088](2176092 '!' call_tmp[678522]))
    if call_tmp[2176088]
    {
      (544401 'move' tmp[544373] 0)
    }
    {
      const-val call_tmp[678537]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678540 'move' call_tmp[678537](544392 call chpl_config_get_value[350] c"memLeaksByType" c"Built-in"))
      (544397 'move' tmp[544373](544395 call _command_line_cast[1353962] call_tmp[678537]))
    }
    (544375 'move' memLeaksByType[166667] tmp[544373])
    (2146807 '_private_broadcast' memLeaksByType[166667])
    const-val call_tmp[678542]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678545 'move' call_tmp[678542](544412 call chpl_config_has_value[334] c"memLeaks" c"Built-in"))
    const-val call_tmp[2176097]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176099 'move' call_tmp[2176097](2176101 '!' call_tmp[678542]))
    if call_tmp[2176097]
    {
      (544431 'move' tmp[544403] 0)
    }
    {
      const-val call_tmp[678557]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678560 'move' call_tmp[678557](544422 call chpl_config_get_value[350] c"memLeaks" c"Built-in"))
      (544427 'move' tmp[544403](544425 call _command_line_cast[1354005] call_tmp[678557]))
    }
    (544405 'move' memLeaks[166672] tmp[544403])
    (2146809 '_private_broadcast' memLeaks[166672])
    const-val call_tmp[678562]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678565 'move' call_tmp[678562](544442 call chpl_config_has_value[334] c"memMax" c"Built-in"))
    const-val call_tmp[2176106]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176108 'move' call_tmp[2176106](2176110 '!' call_tmp[678562]))
    if call_tmp[2176106]
    {
      const-val init_coerce_tmp[1354047]:uint(64)[115] "dead at end of block" "temp"
      (1354050 'move' init_coerce_tmp[1354047](1356826 'cast' uint(64)[115] 0))
      (544461 'move' tmp[544433] init_coerce_tmp[1354047])
    }
    {
      const-val call_tmp[678577]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678580 'move' call_tmp[678577](544452 call chpl_config_get_value[350] c"memMax" c"Built-in"))
      (544457 'move' tmp[544433](544455 call _command_line_cast[1354056] call_tmp[678577]))
    }
    (544435 'move' memMax[166677] tmp[544433])
    (2146811 '_private_broadcast' memMax[166677])
    const-val call_tmp[678582]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678585 'move' call_tmp[678582](544472 call chpl_config_has_value[334] c"memThreshold" c"Built-in"))
    const-val call_tmp[2176115]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176117 'move' call_tmp[2176115](2176119 '!' call_tmp[678582]))
    if call_tmp[2176115]
    {
      const-val init_coerce_tmp[1356381]:uint(64)[115] "dead at end of block" "temp"
      (1356384 'move' init_coerce_tmp[1356381](1356830 'cast' uint(64)[115] 0))
      (544491 'move' tmp[544463] init_coerce_tmp[1356381])
    }
    {
      const-val call_tmp[678597]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678600 'move' call_tmp[678597](544482 call chpl_config_get_value[350] c"memThreshold" c"Built-in"))
      (544487 'move' tmp[544463](544485 call _command_line_cast[1356390] call_tmp[678597]))
    }
    (544465 'move' memThreshold[166682] tmp[544463])
    (2146813 '_private_broadcast' memThreshold[166682])
    const-val call_tmp[678602]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678605 'move' call_tmp[678602](544502 call chpl_config_has_value[334] c"memLog" c"Built-in"))
    const-val call_tmp[2176124]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176126 'move' call_tmp[2176124](2176128 '!' call_tmp[678602]))
    if call_tmp[2176124]
    {
      (1356834 call init[30763] tmp[544493])
    }
    {
      const-val call_tmp[678617]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678620 'move' call_tmp[678617](544512 call chpl_config_get_value[350] c"memLog" c"Built-in"))
      const-val ret_tmp[1871928]:string[26] "temp"
      (544515 call _command_line_cast[1356434] call_tmp[678617] ret_tmp[1871928])
      (1871931 'move' tmp[544493] ret_tmp[1871928])
    }
    (544495 'move' memLog[166686] tmp[544493])
    (2146815 '_private_broadcast' memLog[166686])
    const-val call_tmp[678622]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678625 'move' call_tmp[678622](544532 call chpl_config_has_value[334] c"memLeaksLog" c"Built-in"))
    const-val call_tmp[2176133]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176135 'move' call_tmp[2176133](2176137 '!' call_tmp[678622]))
    if call_tmp[2176133]
    {
      (1356839 call init[30763] tmp[544523])
    }
    {
      const-val call_tmp[678637]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678640 'move' call_tmp[678637](544542 call chpl_config_get_value[350] c"memLeaksLog" c"Built-in"))
      const-val ret_tmp[1871964]:string[26] "temp"
      (544545 call _command_line_cast[1356740] call_tmp[678637] ret_tmp[1871964])
      (1871967 'move' tmp[544523] ret_tmp[1871964])
    }
    (544525 'move' memLeaksLog[166691] tmp[544523])
    (2146817 '_private_broadcast' memLeaksLog[166691])
    const-val call_tmp[678642]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678645 'move' call_tmp[678642](544562 call chpl_config_has_value[334] c"memLeaksByDesc" c"Built-in"))
    const-val call_tmp[2176142]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176144 'move' call_tmp[2176142](2176146 '!' call_tmp[678642]))
    if call_tmp[2176142]
    {
      (1356844 call init[30763] tmp[544553])
    }
    {
      const-val call_tmp[678657]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678660 'move' call_tmp[678657](544572 call chpl_config_get_value[350] c"memLeaksByDesc" c"Built-in"))
      const-val ret_tmp[1871976]:string[26] "temp"
      (544575 call _command_line_cast[1356784] call_tmp[678657] ret_tmp[1871976])
      (1871979 'move' tmp[544553] ret_tmp[1871976])
    }
    (544555 'move' memLeaksByDesc[166696] tmp[544553])
    (2146819 '_private_broadcast' memLeaksByDesc[166696])
    (678667 'move' call_tmp[678664] memMax[166677])
    (544583 'move' cMemMax[166707] call_tmp[678664])
    (2146821 '_private_broadcast' cMemMax[166707])
    (678674 'move' call_tmp[678671] memThreshold[166682])
    (544585 'move' cMemThreshold[166717] call_tmp[678671])
    (2146823 '_private_broadcast' cMemThreshold[166717])
    (521964 return _void[55])
  }
  const-val memTrack[166657]:bool[10] "config" "const" "insert auto destroy"
  const-val memStats[166662]:bool[10] "config" "const" "insert auto destroy"
  const-val memLeaksByType[166667]:bool[10] "config" "const" "insert auto destroy"
  const-val memLeaks[166672]:bool[10] "config" "const" "insert auto destroy"
  const-val memMax[166677]:uint(64)[115] "config" "const" "insert auto destroy"
  const-val memThreshold[166682]:uint(64)[115] "config" "const" "insert auto destroy"
  const-val memLog[166686]:string[26] "config" "const" "insert auto destroy"
  const-val memLeaksLog[166691]:string[26] "config" "const" "insert auto destroy" "no auto destroy"
  const-val memLeaksByDesc[166696]:string[26] "config" "const" "insert auto destroy" "no auto destroy"
  const-val cMemMax[166707]:uint(64)[115] "dead at end of block" "const" "insert auto destroy"
  const-val cMemThreshold[166717]:uint(64)[115] "dead at end of block" "const" "insert auto destroy"
  function chpl_memTracking_returnConfigVals[166727](ref arg ret_memTrack[166724]:bool[10], ref arg ret_memStats[166730]:bool[10], ref arg ret_memLeaksByType[166734]:bool[10], ref arg ret_memLeaksByDesc[166738]:c_string[19], ref arg ret_memLeaks[166742]:bool[10], ref arg ret_memMax[166746]:uint(64)[115], ref arg ret_memThreshold[166750]:uint(64)[115], ref arg ret_memLog[166754]:c_string[19], ref arg ret_memLeaksLog[166758]:c_string[19]) : void[4] "export" "local args" "resolved" "no return value for void"
  {
    const-val local_memLeaksLog[2514836]:string[26] "temp"
    (2514837 'move' local_memLeaksLog[2514836] memLeaksLog[166691])
    const-val local_memLog[2514827]:string[26] "temp"
    (2514828 'move' local_memLog[2514827] memLog[166686])
    const-val local__str_literal_4796[2514821]:string[26] "temp"
    (2514822 'move' "Cannot call .c_str() on a remote string" "Cannot call .c_str() on a remote string")
    const-val local__str_literal_503[2514814]:string[26] "temp"
    (2514815 'move' "Encountered corrupt string metadata" "Encountered corrupt string metadata")
    const-val local_memLeaksByDesc[2514808]:string[26] "temp"
    (2514809 'move' local_memLeaksByDesc[2514808] memLeaksByDesc[166696])
    const-val local__str_literal_129[2514802]:string[26] "temp"
    (2514803 'move' "argument to ! is nil" "argument to ! is nil")
    const-val local_cMemThreshold[2514796]:uint(64)[115] "temp"
    (2514797 'move' local_cMemThreshold[2514796] cMemThreshold[166717])
    const-val local_cMemMax[2514790]:uint(64)[115] "temp"
    (2514791 'move' local_cMemMax[2514790] cMemMax[166707])
    const-val local_memLeaks[2514784]:bool[10] "temp"
    (2514785 'move' local_memLeaks[2514784] memLeaks[166672])
    const-val local_memLeaksByType[2514778]:bool[10] "temp"
    (2514779 'move' local_memLeaksByType[2514778] memLeaksByType[166667])
    const-val local_memStats[2514772]:bool[10] "temp"
    (2514773 'move' local_memStats[2514772] memStats[166662])
    const-val local_memTrack[2514766]:bool[10] "temp"
    (2514767 'move' local_memTrack[2514766] memTrack[166657])
    (2198659 '=' ret_memTrack[166724] local_memTrack[2514766])
    (2198665 '=' ret_memStats[166730] local_memStats[2514772])
    (2198671 '=' ret_memLeaksByType[166734] local_memLeaksByType[2514778])
    (2198677 '=' ret_memLeaks[166742] local_memLeaks[2514784])
    (2278658 '=' ret_memMax[166746] local_cMemMax[2514790])
    (2278664 '=' ret_memThreshold[166750] local_cMemThreshold[2514796])
    const-val call_tmp[678676]:locale[28] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val call_tmp[2231912]:chpl_localeID_t[209352] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val call_tmp[2231914]:chpl_localeID_t[209352] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    (2231916 'move' call_tmp[2231914](2231919 call chpl_rt_buildLocaleID[209430] chpl_nodeID[208207] c_sublocid_any[89878]))
    (2231922 'move' call_tmp[2231912] call_tmp[2231914])
    const-val call_tmp[2231925]:locale[28] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val ret_tmp[2231927]:locale[28] "temp"
    (2231930 call chpl_localeID_to_locale[92852] call_tmp[2231912] ret_tmp[2231927])
    (2231933 'move' call_tmp[2231925] ret_tmp[2231927])
    (1863997 'move' call_tmp[678676] call_tmp[2231925])
    val coerce_tmp[2234322]:BaseLocale[91204] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (2234324 'move' coerce_tmp[2234322](2234326 '.v' call_tmp[678676] _instance[89978]))
    val coerce_tmp[2234329]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (2234331 'move' coerce_tmp[2234329](2234333 'cast' object[22] coerce_tmp[2234322]))
    const-val call_tmp[2234336]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2234338 'move' call_tmp[2234336](2234340 'ptr_eq' coerce_tmp[2234329] nil[44]))
    if call_tmp[2234336]
    {
      (2234346 call nilCheckHalt[210171] "argument to ! is nil")
    }
    const-val call_tmp[2234349]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
    (2234351 'move' call_tmp[2234349](2234354 call id[90757] coerce_tmp[2234322]))
    const-val call_tmp[2177302]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2177304 'move' call_tmp[2177302](2177306 '!=' call_tmp[2234349] 0))
    if call_tmp[2177302]
    {
      ref i_this[2210048]:string[26] "temp"
      (2210052 'move' i_this[2210048](2210050 'set reference' memLeaksByDesc[166696]))
      const-val coerce_tmp[2210057]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2210059 'move' coerce_tmp[2210057](2210061 '.v' local_memLeaksByDesc[2514808] cachedNumCodepoints[30734]))
      (2210067 'noop')
      const-val call_tmp[2210068]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2210070 'move' call_tmp[2210068](2210073 call countNumCodepoints[181380] i_this[2210048]))
      const-val call_tmp[2210075]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2210077 'move' call_tmp[2210075](2210079 '!=' coerce_tmp[2210057] call_tmp[2210068]))
      if call_tmp[2210075]
      {
        (2210085 call halt[154111] "Encountered corrupt string metadata")
      }
      const-val call_tmp[2177317]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2177319 'move' call_tmp[2177317](2177321 '!=' coerce_tmp[2210057] 0))
      if call_tmp[2177317]
      {
        val local_memLeaksByDesc[166807]:string[26] "dead at end of block" "insert auto destroy"
        (544587 call init=[30774] local_memLeaksByDesc[166807] local_memLeaksByDesc[2514808])
        (2502455 '.=' local_memLeaksByDesc[166807] isOwned[30746] 0)
        const-val coerce_tmp[2215763]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2215765 'move' coerce_tmp[2215763](2215767 '.v' local_memLeaksByDesc[166807] locale_id[30757]))
        const-val call_tmp[2215770]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2215772 'move' call_tmp[2215770](2215774 '!=' coerce_tmp[2215763] chpl_nodeID[208207]))
        if call_tmp[2215770]
        {
          (2215780 call halt[154111] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2215783]:c_ptr(uint(8))[937484] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2215785 'move' coerce_tmp[2215783](2215787 '.v' local_memLeaksByDesc[166807] buff[30740]))
        const-val call_tmp[2215790]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2215792 'move' call_tmp[2215790](2215794 'cast' c_string[19] coerce_tmp[2215783]))
        (2182666 '=' ret_memLeaksByDesc[166738] call_tmp[2215790])
        ref i_x[2192983]:string[26] "temp"
        (2192987 'move' i_x[2192983](2192985 'set reference' local_memLeaksByDesc[166807]))
        (2192991 call deinit[30834] i_x[2192983])
      }
      {
        const-val call_tmp[2182794]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2182796 'move' call_tmp[2182794](2182798 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2182801]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2182803 'move' call_tmp[2182801](2182805 'cast' c_string[19] call_tmp[2182794]))
        (2182808 '=' ret_memLeaksByDesc[166738] call_tmp[2182801])
      }
      ref i_this[2210090]:string[26] "temp"
      (2210094 'move' i_this[2210090](2210092 'set reference' memLog[166686]))
      const-val coerce_tmp[2210099]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2210101 'move' coerce_tmp[2210099](2210103 '.v' local_memLog[2514827] cachedNumCodepoints[30734]))
      (2210109 'noop')
      const-val call_tmp[2210110]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2210112 'move' call_tmp[2210110](2210115 call countNumCodepoints[181380] i_this[2210090]))
      const-val call_tmp[2210117]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2210119 'move' call_tmp[2210117](2210121 '!=' coerce_tmp[2210099] call_tmp[2210110]))
      if call_tmp[2210117]
      {
        (2210127 call halt[154111] "Encountered corrupt string metadata")
      }
      const-val call_tmp[2177332]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2177334 'move' call_tmp[2177332](2177336 '!=' coerce_tmp[2210099] 0))
      if call_tmp[2177332]
      {
        val local_memLog[166849]:string[26] "dead at end of block" "insert auto destroy"
        (544589 call init=[30774] local_memLog[166849] local_memLog[2514827])
        (2502465 '.=' local_memLog[166849] isOwned[30746] 0)
        const-val coerce_tmp[2215806]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2215808 'move' coerce_tmp[2215806](2215810 '.v' local_memLog[166849] locale_id[30757]))
        const-val call_tmp[2215813]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2215815 'move' call_tmp[2215813](2215817 '!=' coerce_tmp[2215806] chpl_nodeID[208207]))
        if call_tmp[2215813]
        {
          (2215823 call halt[154111] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2215826]:c_ptr(uint(8))[937484] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2215828 'move' coerce_tmp[2215826](2215830 '.v' local_memLog[166849] buff[30740]))
        const-val call_tmp[2215833]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2215835 'move' call_tmp[2215833](2215837 'cast' c_string[19] coerce_tmp[2215826]))
        (2182678 '=' ret_memLog[166754] call_tmp[2215833])
        ref i_x[2192995]:string[26] "temp"
        (2192999 'move' i_x[2192995](2192997 'set reference' local_memLog[166849]))
        (2193003 call deinit[30834] i_x[2192995])
      }
      {
        const-val call_tmp[2182814]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2182816 'move' call_tmp[2182814](2182818 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2182821]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2182823 'move' call_tmp[2182821](2182825 'cast' c_string[19] call_tmp[2182814]))
        (2182828 '=' ret_memLog[166754] call_tmp[2182821])
      }
      ref i_this[2210132]:string[26] "temp"
      (2210136 'move' i_this[2210132](2210134 'set reference' memLeaksLog[166691]))
      const-val coerce_tmp[2210141]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2210143 'move' coerce_tmp[2210141](2210145 '.v' local_memLeaksLog[2514836] cachedNumCodepoints[30734]))
      (2210151 'noop')
      const-val call_tmp[2210152]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2210154 'move' call_tmp[2210152](2210157 call countNumCodepoints[181380] i_this[2210132]))
      const-val call_tmp[2210159]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2210161 'move' call_tmp[2210159](2210163 '!=' coerce_tmp[2210141] call_tmp[2210152]))
      if call_tmp[2210159]
      {
        (2210169 call halt[154111] "Encountered corrupt string metadata")
      }
      const-val call_tmp[2177347]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2177349 'move' call_tmp[2177347](2177351 '!=' coerce_tmp[2210141] 0))
      if call_tmp[2177347]
      {
        val local_memLeaksLog[166890]:string[26] "dead at end of block" "insert auto destroy"
        (544591 call init=[30774] local_memLeaksLog[166890] local_memLeaksLog[2514836])
        (2502475 '.=' local_memLeaksLog[166890] isOwned[30746] 0)
        const-val coerce_tmp[2215849]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2215851 'move' coerce_tmp[2215849](2215853 '.v' local_memLeaksLog[166890] locale_id[30757]))
        const-val call_tmp[2215856]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2215858 'move' call_tmp[2215856](2215860 '!=' coerce_tmp[2215849] chpl_nodeID[208207]))
        if call_tmp[2215856]
        {
          (2215866 call halt[154111] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2215869]:c_ptr(uint(8))[937484] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2215871 'move' coerce_tmp[2215869](2215873 '.v' local_memLeaksLog[166890] buff[30740]))
        const-val call_tmp[2215876]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2215878 'move' call_tmp[2215876](2215880 'cast' c_string[19] coerce_tmp[2215869]))
        (2182684 '=' ret_memLeaksLog[166758] call_tmp[2215876])
        ref i_x[2193007]:string[26] "temp"
        (2193011 'move' i_x[2193007](2193009 'set reference' local_memLeaksLog[166890]))
        (2193015 call deinit[30834] i_x[2193007])
      }
      {
        const-val call_tmp[2182834]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2182836 'move' call_tmp[2182834](2182838 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2182841]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2182843 'move' call_tmp[2182841](2182845 'cast' c_string[19] call_tmp[2182834]))
        (2182848 '=' ret_memLeaksLog[166758] call_tmp[2182841])
      }
    }
    {
      const-val coerce_tmp[2215892]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2215894 'move' coerce_tmp[2215892](2215896 '.v' local_memLeaksByDesc[2514808] locale_id[30757]))
      const-val call_tmp[2215899]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2215901 'move' call_tmp[2215899](2215903 '!=' coerce_tmp[2215892] chpl_nodeID[208207]))
      if call_tmp[2215899]
      {
        (2215909 call halt[154111] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2215912]:c_ptr(uint(8))[937484] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2215914 'move' coerce_tmp[2215912](2215916 '.v' local_memLeaksByDesc[2514808] buff[30740]))
      const-val call_tmp[2215919]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2215921 'move' call_tmp[2215919](2215923 'cast' c_string[19] coerce_tmp[2215912]))
      (2182690 '=' ret_memLeaksByDesc[166738] call_tmp[2215919])
      const-val coerce_tmp[2215935]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2215937 'move' coerce_tmp[2215935](2215939 '.v' local_memLog[2514827] locale_id[30757]))
      const-val call_tmp[2215942]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2215944 'move' call_tmp[2215942](2215946 '!=' coerce_tmp[2215935] chpl_nodeID[208207]))
      if call_tmp[2215942]
      {
        (2215952 call halt[154111] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2215955]:c_ptr(uint(8))[937484] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2215957 'move' coerce_tmp[2215955](2215959 '.v' local_memLog[2514827] buff[30740]))
      const-val call_tmp[2215962]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2215964 'move' call_tmp[2215962](2215966 'cast' c_string[19] coerce_tmp[2215955]))
      (2182696 '=' ret_memLog[166754] call_tmp[2215962])
      const-val coerce_tmp[2215978]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2215980 'move' coerce_tmp[2215978](2215982 '.v' local_memLeaksLog[2514836] locale_id[30757]))
      const-val call_tmp[2215985]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2215987 'move' call_tmp[2215985](2215989 '!=' coerce_tmp[2215978] chpl_nodeID[208207]))
      if call_tmp[2215985]
      {
        (2215995 call halt[154111] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2215998]:c_ptr(uint(8))[937484] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2216000 'move' coerce_tmp[2215998](2216002 '.v' local_memLeaksLog[2514836] buff[30740]))
      const-val call_tmp[2216005]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2216007 'move' call_tmp[2216005](2216009 'cast' c_string[19] coerce_tmp[2215998]))
      (2182702 '=' ret_memLeaksLog[166758] call_tmp[2216005])
    }
    ref i_x[2332118]:locale[28] "temp"
    (2332122 'move' i_x[2332118](2332120 'set reference' call_tmp[678676]))
    (2332126 call deinit[90188] i_x[2332118])
    (521962 return _void[55])
  }
  val tmp[544313]:bool[10] "dead at end of block" "temp"
  val tmp[544343]:bool[10] "dead at end of block" "temp"
  val tmp[544373]:bool[10] "dead at end of block" "temp"
  val tmp[544403]:bool[10] "dead at end of block" "temp"
  val tmp[544433]:uint(64)[115] "dead at end of block" "temp"
  val tmp[544463]:uint(64)[115] "dead at end of block" "temp"
  val tmp[544493]:string[26] "dead at end of block" "temp"
  val tmp[544523]:string[26] "dead at end of block" "temp"
  val tmp[544553]:string[26] "dead at end of block" "temp"
  const-val call_tmp[678664]:uint(64)[115] "dead at end of block" "maybe param" "temp"
  const-val call_tmp[678671]:uint(64)[115] "dead at end of block" "maybe param" "temp"
  function chpl__deinit_MemTracking[1887212]() : void[4] "resolved"
  {
    label _endchpl__deinit_MemTracking[1887218]
    ref i_x[2196439]:string[26] "temp"
    (2196443 'move' i_x[2196439](2196441 'set reference' memLog[166686]))
    (2196447 call deinit[30834] i_x[2196439])
    (1887215 return _void[55])
  }
}