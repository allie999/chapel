AST dump for CommDiagnostics after pass scopeResolve.
Module use list: ChapelStandard Reflection 

{
  unknown commDiagsPrintUnstable[222292] "config" "param" 0
  (222295 'end of statement')
  function chpl_commDiagnostics[222574].writeThis[222390](arg _mt[222578]:_MT[238], arg this[222576]:chpl_commDiagnostics[222574], arg c[222388]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown first[222397] 1
    (222400 'end of statement')
    (222403 call <~> c[222388] "(")
    {
      unknown i[222500] 0
      unknown tmp[222501] "maybe param" "temp"
      (222513 'move' tmp[222501](222511 call chpl_compute_low_param_loop_bound 0(222412 call -(222410 call numFields chpl_commDiagnostics[222574]) 1)))
      unknown tmp[222502] "maybe param" "temp"
      (222525 'move' tmp[222502](222523 call chpl_compute_high_param_loop_bound 0(222518 call -(222520 call numFields chpl_commDiagnostics[222574]) 1)))
      unknown tmp[222503] "maybe param" "temp"
      (222528 'move' tmp[222503] 1)
      ParamForLoop[222530]
      { i[222500] tmp[222501] tmp[222502] tmp[222503]
        {
          unknown name[222421] "param"(222420 call getFieldName chpl_commDiagnostics[222574] i[222500])
          (222424 'end of statement')
          const val[222431] "const"(222430 call getField this[222576] i[222500])
          (222434 'end of statement')
          if(222496 call _cond_test(222437 call != val[222431] 0))
          {
            if(222491 call _cond_test(222460 call || commDiagsPrintUnstable[222292](222458 call != name[222421] "amo")))
            {
              if(222473 call _cond_test first[222397])
              {
                (222465 call = first[222397] 0)
              }
              {
                (222470 call <~> c[222388] ", ")
              }
              (222488 call <~>(222485 call <~>(222482 call <~> c[222388] name[222421]) " = ") val[222431])
            }
          }
        }
      }
      label _unused_continueLabel[222505]
      label _breakLabel[222504]
    }
    if(222561 call _cond_test first[222397])
    {
      (222558 call <~> c[222388] "<no communication>")
    }
    (222568 call <~> c[222388] ")")
    (355335 'used modules list'(222393 'use' Reflection[224903]))
  }
  type chpl_commDiagnostics[222574] unknown get[222302](222301 call uint(64)[115] 64) unknown get_nb[222310](222309 call uint(64)[115] 64) unknown put[222318](222317 call uint(64)[115] 64) unknown put_nb[222326](222325 call uint(64)[115] 64) unknown test_nb[222334](222333 call uint(64)[115] 64) unknown wait_nb[222342](222341 call uint(64)[115] 64) unknown try_nb[222350](222349 call uint(64)[115] 64) unknown amo[222358](222357 call uint(64)[115] 64) unknown execute_on[222366](222365 call uint(64)[115] 64) unknown execute_on_fast[222374](222373 call uint(64)[115] 64) unknown execute_on_nb[222382](222381 call uint(64)[115] 64)
  {
  }
  unknown commDiagnostics[222584] "type variable" chpl_commDiagnostics[222574]
  function chpl_comm_startVerbose[222593](arg print_unstable[222590] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopVerbose[222599]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_startVerboseHere[222609](arg print_unstable[222606] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopVerboseHere[222615]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_startDiagnostics[222625](arg print_unstable[222622] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopDiagnostics[222631]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_startDiagnosticsHere[222641](arg print_unstable[222638] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopDiagnosticsHere[222647]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_resetDiagnosticsHere[222653]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_getDiagnosticsHere[222663](out arg cd[222660] :
  commDiagnostics[222584]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function startVerboseComm[222669]() : _unknown[51] "no return value for void"
  {
    (222674 call chpl_comm_startVerbose commDiagsPrintUnstable[222292])
  }
  function stopVerboseComm[222681]() : _unknown[51] "no return value for void"
  {
    (222685 call chpl_comm_stopVerbose)
  }
  function startVerboseCommHere[222692]() : _unknown[51] "no return value for void"
  {
    (222697 call chpl_comm_startVerboseHere commDiagsPrintUnstable[222292])
  }
  function stopVerboseCommHere[222704]() : _unknown[51] "no return value for void"
  {
    (222708 call chpl_comm_stopVerboseHere)
  }
  function startCommDiagnostics[222715]() : _unknown[51] "no return value for void"
  {
    (222720 call chpl_comm_startDiagnostics commDiagsPrintUnstable[222292])
  }
  function stopCommDiagnostics[222727]() : _unknown[51] "no return value for void"
  {
    (222731 call chpl_comm_stopDiagnostics)
  }
  function startCommDiagnosticsHere[222738]() : _unknown[51] "no return value for void"
  {
    (222743 call chpl_comm_startDiagnosticsHere commDiagsPrintUnstable[222292])
  }
  function stopCommDiagnosticsHere[222750]() : _unknown[51] "no return value for void"
  {
    (222754 call chpl_comm_stopDiagnosticsHere)
  }
  function resetCommDiagnostics[222761]() : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[222781] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222782] "expr temp" "temp"
      (222791 'move' _iterator[222782](222789 call _getIterator Locales[113662]))
      Defer
      {
        {
          (222807 call _freeIterator _iterator[222782])
        }
      }
      { scopeless type
        (222796 'move' _indexOfInterest[222781](222793 call iteratorIndex _iterator[222782]))
      }
      ForLoop[222783]
      {
        unknown loc[222800] "index var" "insert auto destroy"
        (222802 'move' loc[222800] _indexOfInterest[222781])
        const tmp[222773] "const" "temp"
        (222775 'move' tmp[222773](222771 'deref'(222770 '_wide_get_locale' loc[222800])))
        {
          (222768 call resetCommDiagnosticsHere)
          (222778 'on block' 0 tmp[222773])
        }
        label _continueLabel[222786]
        _indexOfInterest[222781]
        _iterator[222782]
      }
      label _breakLabel[222787]
    }
  }
  function resetCommDiagnosticsHere[222819]() : _unknown[51] "inline" "no return value for void"
  {
    (222823 call chpl_comm_resetDiagnosticsHere)
  }
  function getCommDiagnostics[222830]() : _unknown[51]
  {
    unknown D[222839](222837 call chpl__buildArrayRuntimeType(222835 call chpl__ensureDomainExpr LocaleSpace[113670]) commDiagnostics[222584])
    (222842 'end of statement')
    {
      unknown _indexOfInterest[222872] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222873] "expr temp" "temp"
      (222882 'move' _iterator[222873](222880 call _getIterator Locales[113662]))
      Defer
      {
        {
          (222898 call _freeIterator _iterator[222873])
        }
      }
      { scopeless type
        (222887 'move' _indexOfInterest[222872](222884 call iteratorIndex _iterator[222873]))
      }
      ForLoop[222874]
      {
        unknown loc[222891] "index var" "insert auto destroy"
        (222893 'move' loc[222891] _indexOfInterest[222872])
        const tmp[222864] "const" "temp"
        (222866 'move' tmp[222864](222862 'deref'(222861 '_wide_get_locale' loc[222891])))
        {
          {
            (222857 call =(222853 call D[222839](222849 call . loc[222891] c"id"))(222856 call getCommDiagnosticsHere))
          }
          (222869 'on block' 0 tmp[222864])
        }
        label _continueLabel[222877]
        _indexOfInterest[222872]
        _iterator[222873]
      }
      label _breakLabel[222878]
    }
    (222906 return D[222839])
  }
  function getCommDiagnosticsHere[222912]() : _unknown[51]
  {
    unknown cd[222915] commDiagnostics[222584]
    (222918 'end of statement')
    (222923 call chpl_comm_getDiagnosticsHere cd[222915])
    (222926 return cd[222915])
  }
  function printCommDiagnosticsTable[222936](arg printEmptyColumns[222933] =
  0) : _unknown[51] "no return value for void"
  {
    unknown unstable[222959] "param" "unstable"
    (222962 'end of statement')
    unknown CommDiags[222966](222965 call getCommDiagnostics)
    (222969 'end of statement')
    unknown nFields[222974] "param"(222973 call numFields chpl_commDiagnostics[222574])
    (222977 'end of statement')
    unknown fieldWidth[222991](222989 call chpl__buildArrayRuntimeType(222987 call chpl__ensureDomainExpr(222983 call chpl_build_bounded_range 0(222981 call - nFields[222974] 1))) int(64)[13])
    (222994 'end of statement')
    (223031 call writef "| %6s " "locale")
    {
      unknown fieldID[223201] 0
      unknown tmp[223202] "maybe param" "temp"
      (223214 'move' tmp[223202](223212 call chpl_compute_low_param_loop_bound 0(223036 call - nFields[222974] 1)))
      unknown tmp[223203] "maybe param" "temp"
      (223224 'move' tmp[223203](223222 call chpl_compute_high_param_loop_bound 0(223219 call - nFields[222974] 1)))
      unknown tmp[223204] "maybe param" "temp"
      (223227 'move' tmp[223204] 1)
      ParamForLoop[223229]
      { fieldID[223201] tmp[223202] tmp[223203] tmp[223204]
        {
          unknown name[223045] "param"(223044 call getFieldName chpl_commDiagnostics[222574] fieldID[223201])
          (223048 'end of statement')
          unknown maxval[223051] 0
          (223054 'end of statement')
          {
            unknown _indexOfInterest[223079] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[223080] "expr temp" "temp"
            (223089 'move' _iterator[223080](223087 call _getIterator LocaleSpace[113670]))
            Defer
            {
              {
                (223105 call _freeIterator _iterator[223080])
              }
            }
            { scopeless type
              (223094 'move' _indexOfInterest[223079](223091 call iteratorIndex _iterator[223080]))
            }
            ForLoop[223081]
            {
              unknown locID[223098] "index var" "insert auto destroy"
              (223100 'move' locID[223098] _indexOfInterest[223079])
              (223076 call = maxval[223051](223075 call max maxval[223051](223074 call(223069 call .(223068 call getField(223065 call CommDiags[222966] locID[223098]) fieldID[223201]) c"safeCast") int(64)[13])))
              label _continueLabel[223084]
              _indexOfInterest[223079]
              _iterator[223080]
            }
            label _breakLabel[223085]
          }
          if(223197 call _cond_test(223117 call || printEmptyColumns[222933](223115 call != maxval[223051] 0)))
          {
            const width[223158] "const"(223155 IfExpr (223127 call &&(223121 call == commDiagsPrintUnstable[222292] 0)(223125 call == name[223045] "amo")) then
            { scopeless
              (223133 call -(223130 call . unstable[222959] c"size"))
            } else
            { scopeless
              (223154 call max(223137 call . name[223045] c"size")(223152 call _cast int(64)[13](223150 call ceil(223148 call log10(223145 call + maxval[223051] 1)))))
            } )
            (223161 'end of statement')
            (223168 call =(223166 call fieldWidth[222991] fieldID[223201]) width[223158])
            (223195 call writef "| %*s "(223193 call abs width[223158]) name[223045])
          }
        }
      }
      label _unused_continueLabel[223206]
      label _breakLabel[223205]
    }
    (223241 call writeln "|")
    (223262 call writef "| -----: ")
    {
      unknown fieldID[223334] 0
      unknown tmp[223335] "maybe param" "temp"
      (223347 'move' tmp[223335](223345 call chpl_compute_low_param_loop_bound 0(223267 call - nFields[222974] 1)))
      unknown tmp[223336] "maybe param" "temp"
      (223357 'move' tmp[223336](223355 call chpl_compute_high_param_loop_bound 0(223352 call - nFields[222974] 1)))
      unknown tmp[223337] "maybe param" "temp"
      (223360 'move' tmp[223337] 1)
      ParamForLoop[223362]
      { fieldID[223334] tmp[223335] tmp[223336] tmp[223337]
        {
          const width[223278] "const"(223277 call abs(223275 call fieldWidth[222991] fieldID[223334]))
          (223281 'end of statement')
          if(223330 call _cond_test(223285 call != width[223278] 0))
          {
            (223327 call writef "| %.*s: "(223308 call - width[223278] 1) "------------------")
          }
        }
      }
      label _unused_continueLabel[223339]
      label _breakLabel[223338]
    }
    (223374 call writeln "|")
    {
      unknown _indexOfInterest[223488] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223489] "expr temp" "temp"
      (223498 'move' _iterator[223489](223496 call _getIterator LocaleSpace[113670]))
      Defer
      {
        {
          (223514 call _freeIterator _iterator[223489])
        }
      }
      { scopeless type
        (223503 'move' _indexOfInterest[223488](223500 call iteratorIndex _iterator[223489]))
      }
      ForLoop[223490]
      {
        unknown locID[223507] "index var" "insert auto destroy"
        (223509 'move' locID[223507] _indexOfInterest[223488])
        {
          (223385 call writef "| %6s "(223383 call _cast string[26] locID[223507]))
          {
            unknown fieldID[223446] 0
            unknown tmp[223447] "maybe param" "temp"
            (223459 'move' tmp[223447](223457 call chpl_compute_low_param_loop_bound 0(223391 call - nFields[222974] 1)))
            unknown tmp[223448] "maybe param" "temp"
            (223469 'move' tmp[223448](223467 call chpl_compute_high_param_loop_bound 0(223464 call - nFields[222974] 1)))
            unknown tmp[223449] "maybe param" "temp"
            (223472 'move' tmp[223449] 1)
            ParamForLoop[223474]
            { fieldID[223446] tmp[223447] tmp[223448] tmp[223449]
              {
                unknown width[223399](223398 call fieldWidth[222991] fieldID[223446])
                (223402 'end of statement')
                const count[223423] "const"(223420 IfExpr (223406 call < width[223399] 0) then
                { scopeless
                  unstable[222959]
                } else
                { scopeless
                  (223418 call _cast string[26](223416 call getField(223413 call CommDiags[222966] locID[223507]) fieldID[223446]))
                } )
                (223426 'end of statement')
                if(223441 call _cond_test(223429 call != width[223399] 0))
                {
                  (223439 call writef "| %*s "(223437 call abs width[223399]) count[223423])
                }
              }
            }
            label _unused_continueLabel[223451]
            label _breakLabel[223450]
          }
          (223486 call writeln "|")
        }
        label _continueLabel[223493]
        _indexOfInterest[223488]
        _iterator[223489]
      }
      label _breakLabel[223494]
    }
    (355337 'used modules list'(222939 'use' Reflection[224903]))
  }
  unknown printInitVerboseComm[223524] "config" "param" 0
  (223527 'end of statement')
  unknown printInitCommCounts[223529] "config" "param" 0
  (223532 'end of statement')
  (355333 'used modules list'(353044 'use' ChapelStandard[20267]))
}