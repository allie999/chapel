AST dump for CommDiagnostics after pass scopeResolve.
Module use list: ChapelStandard Reflection 

{
  unknown commDiagsPrintUnstable[222183] "config" "param" 0
  (222186 'end of statement')
  function chpl_commDiagnostics[222465].writeThis[222281](arg _mt[222469]:_MT[238], arg this[222467]:chpl_commDiagnostics[222465], arg c[222279]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown first[222288] 1
    (222291 'end of statement')
    (222294 call <~> c[222279] "(")
    {
      unknown i[222391] 0
      unknown tmp[222392] "maybe param" "temp"
      (222404 'move' tmp[222392](222402 call chpl_compute_low_param_loop_bound 0(222303 call -(222301 call numFields chpl_commDiagnostics[222465]) 1)))
      unknown tmp[222393] "maybe param" "temp"
      (222416 'move' tmp[222393](222414 call chpl_compute_high_param_loop_bound 0(222409 call -(222411 call numFields chpl_commDiagnostics[222465]) 1)))
      unknown tmp[222394] "maybe param" "temp"
      (222419 'move' tmp[222394] 1)
      ParamForLoop[222421]
      { i[222391] tmp[222392] tmp[222393] tmp[222394]
        {
          unknown name[222312] "param"(222311 call getFieldName chpl_commDiagnostics[222465] i[222391])
          (222315 'end of statement')
          const val[222322] "const"(222321 call getField this[222467] i[222391])
          (222325 'end of statement')
          if(222387 call _cond_test(222328 call != val[222322] 0))
          {
            if(222382 call _cond_test(222351 call || commDiagsPrintUnstable[222183](222349 call != name[222312] "amo")))
            {
              if(222364 call _cond_test first[222288])
              {
                (222356 call = first[222288] 0)
              }
              {
                (222361 call <~> c[222279] ", ")
              }
              (222379 call <~>(222376 call <~>(222373 call <~> c[222279] name[222312]) " = ") val[222322])
            }
          }
        }
      }
      label _unused_continueLabel[222396]
      label _breakLabel[222395]
    }
    if(222452 call _cond_test first[222288])
    {
      (222449 call <~> c[222279] "<no communication>")
    }
    (222459 call <~> c[222279] ")")
    (355204 'used modules list'(222284 'use' Reflection[224794]))
  }
  type chpl_commDiagnostics[222465] unknown get[222193](222192 call uint(64)[115] 64) unknown get_nb[222201](222200 call uint(64)[115] 64) unknown put[222209](222208 call uint(64)[115] 64) unknown put_nb[222217](222216 call uint(64)[115] 64) unknown test_nb[222225](222224 call uint(64)[115] 64) unknown wait_nb[222233](222232 call uint(64)[115] 64) unknown try_nb[222241](222240 call uint(64)[115] 64) unknown amo[222249](222248 call uint(64)[115] 64) unknown execute_on[222257](222256 call uint(64)[115] 64) unknown execute_on_fast[222265](222264 call uint(64)[115] 64) unknown execute_on_nb[222273](222272 call uint(64)[115] 64)
  {
  }
  unknown commDiagnostics[222475] "type variable" chpl_commDiagnostics[222465]
  function chpl_comm_startVerbose[222484](arg print_unstable[222481] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopVerbose[222490]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_startVerboseHere[222500](arg print_unstable[222497] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopVerboseHere[222506]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_startDiagnostics[222516](arg print_unstable[222513] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopDiagnostics[222522]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_startDiagnosticsHere[222532](arg print_unstable[222529] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopDiagnosticsHere[222538]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_resetDiagnosticsHere[222544]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_getDiagnosticsHere[222554](out arg cd[222551] :
  commDiagnostics[222475]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function startVerboseComm[222560]() : _unknown[51] "no return value for void"
  {
    (222565 call chpl_comm_startVerbose commDiagsPrintUnstable[222183])
  }
  function stopVerboseComm[222572]() : _unknown[51] "no return value for void"
  {
    (222576 call chpl_comm_stopVerbose)
  }
  function startVerboseCommHere[222583]() : _unknown[51] "no return value for void"
  {
    (222588 call chpl_comm_startVerboseHere commDiagsPrintUnstable[222183])
  }
  function stopVerboseCommHere[222595]() : _unknown[51] "no return value for void"
  {
    (222599 call chpl_comm_stopVerboseHere)
  }
  function startCommDiagnostics[222606]() : _unknown[51] "no return value for void"
  {
    (222611 call chpl_comm_startDiagnostics commDiagsPrintUnstable[222183])
  }
  function stopCommDiagnostics[222618]() : _unknown[51] "no return value for void"
  {
    (222622 call chpl_comm_stopDiagnostics)
  }
  function startCommDiagnosticsHere[222629]() : _unknown[51] "no return value for void"
  {
    (222634 call chpl_comm_startDiagnosticsHere commDiagsPrintUnstable[222183])
  }
  function stopCommDiagnosticsHere[222641]() : _unknown[51] "no return value for void"
  {
    (222645 call chpl_comm_stopDiagnosticsHere)
  }
  function resetCommDiagnostics[222652]() : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[222672] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222673] "expr temp" "temp"
      (222682 'move' _iterator[222673](222680 call _getIterator Locales[113656]))
      Defer
      {
        {
          (222698 call _freeIterator _iterator[222673])
        }
      }
      { scopeless type
        (222687 'move' _indexOfInterest[222672](222684 call iteratorIndex _iterator[222673]))
      }
      ForLoop[222674]
      {
        unknown loc[222691] "index var" "insert auto destroy"
        (222693 'move' loc[222691] _indexOfInterest[222672])
        const tmp[222664] "const" "temp"
        (222666 'move' tmp[222664](222662 'deref'(222661 '_wide_get_locale' loc[222691])))
        {
          (222659 call resetCommDiagnosticsHere)
          (222669 'on block' 0 tmp[222664])
        }
        label _continueLabel[222677]
        _indexOfInterest[222672]
        _iterator[222673]
      }
      label _breakLabel[222678]
    }
  }
  function resetCommDiagnosticsHere[222710]() : _unknown[51] "inline" "no return value for void"
  {
    (222714 call chpl_comm_resetDiagnosticsHere)
  }
  function getCommDiagnostics[222721]() : _unknown[51]
  {
    unknown D[222730](222728 call chpl__buildArrayRuntimeType(222726 call chpl__ensureDomainExpr LocaleSpace[113664]) commDiagnostics[222475])
    (222733 'end of statement')
    {
      unknown _indexOfInterest[222763] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222764] "expr temp" "temp"
      (222773 'move' _iterator[222764](222771 call _getIterator Locales[113656]))
      Defer
      {
        {
          (222789 call _freeIterator _iterator[222764])
        }
      }
      { scopeless type
        (222778 'move' _indexOfInterest[222763](222775 call iteratorIndex _iterator[222764]))
      }
      ForLoop[222765]
      {
        unknown loc[222782] "index var" "insert auto destroy"
        (222784 'move' loc[222782] _indexOfInterest[222763])
        const tmp[222755] "const" "temp"
        (222757 'move' tmp[222755](222753 'deref'(222752 '_wide_get_locale' loc[222782])))
        {
          {
            (222748 call =(222744 call D[222730](222740 call . loc[222782] c"id"))(222747 call getCommDiagnosticsHere))
          }
          (222760 'on block' 0 tmp[222755])
        }
        label _continueLabel[222768]
        _indexOfInterest[222763]
        _iterator[222764]
      }
      label _breakLabel[222769]
    }
    (222797 return D[222730])
  }
  function getCommDiagnosticsHere[222803]() : _unknown[51]
  {
    unknown cd[222806] commDiagnostics[222475]
    (222809 'end of statement')
    (222814 call chpl_comm_getDiagnosticsHere cd[222806])
    (222817 return cd[222806])
  }
  function printCommDiagnosticsTable[222827](arg printEmptyColumns[222824] =
  0) : _unknown[51] "no return value for void"
  {
    unknown unstable[222850] "param" "unstable"
    (222853 'end of statement')
    unknown CommDiags[222857](222856 call getCommDiagnostics)
    (222860 'end of statement')
    unknown nFields[222865] "param"(222864 call numFields chpl_commDiagnostics[222465])
    (222868 'end of statement')
    unknown fieldWidth[222882](222880 call chpl__buildArrayRuntimeType(222878 call chpl__ensureDomainExpr(222874 call chpl_build_bounded_range 0(222872 call - nFields[222865] 1))) int(64)[13])
    (222885 'end of statement')
    (222922 call writef "| %6s " "locale")
    {
      unknown fieldID[223092] 0
      unknown tmp[223093] "maybe param" "temp"
      (223105 'move' tmp[223093](223103 call chpl_compute_low_param_loop_bound 0(222927 call - nFields[222865] 1)))
      unknown tmp[223094] "maybe param" "temp"
      (223115 'move' tmp[223094](223113 call chpl_compute_high_param_loop_bound 0(223110 call - nFields[222865] 1)))
      unknown tmp[223095] "maybe param" "temp"
      (223118 'move' tmp[223095] 1)
      ParamForLoop[223120]
      { fieldID[223092] tmp[223093] tmp[223094] tmp[223095]
        {
          unknown name[222936] "param"(222935 call getFieldName chpl_commDiagnostics[222465] fieldID[223092])
          (222939 'end of statement')
          unknown maxval[222942] 0
          (222945 'end of statement')
          {
            unknown _indexOfInterest[222970] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[222971] "expr temp" "temp"
            (222980 'move' _iterator[222971](222978 call _getIterator LocaleSpace[113664]))
            Defer
            {
              {
                (222996 call _freeIterator _iterator[222971])
              }
            }
            { scopeless type
              (222985 'move' _indexOfInterest[222970](222982 call iteratorIndex _iterator[222971]))
            }
            ForLoop[222972]
            {
              unknown locID[222989] "index var" "insert auto destroy"
              (222991 'move' locID[222989] _indexOfInterest[222970])
              (222967 call = maxval[222942](222966 call max maxval[222942](222965 call(222960 call .(222959 call getField(222956 call CommDiags[222857] locID[222989]) fieldID[223092]) c"safeCast") int(64)[13])))
              label _continueLabel[222975]
              _indexOfInterest[222970]
              _iterator[222971]
            }
            label _breakLabel[222976]
          }
          if(223088 call _cond_test(223008 call || printEmptyColumns[222824](223006 call != maxval[222942] 0)))
          {
            const width[223049] "const"(223046 IfExpr (223018 call &&(223012 call == commDiagsPrintUnstable[222183] 0)(223016 call == name[222936] "amo")) then
            { scopeless
              (223024 call -(223021 call . unstable[222850] c"size"))
            } else
            { scopeless
              (223045 call max(223028 call . name[222936] c"size")(223043 call _cast int(64)[13](223041 call ceil(223039 call log10(223036 call + maxval[222942] 1)))))
            } )
            (223052 'end of statement')
            (223059 call =(223057 call fieldWidth[222882] fieldID[223092]) width[223049])
            (223086 call writef "| %*s "(223084 call abs width[223049]) name[222936])
          }
        }
      }
      label _unused_continueLabel[223097]
      label _breakLabel[223096]
    }
    (223132 call writeln "|")
    (223153 call writef "| -----: ")
    {
      unknown fieldID[223225] 0
      unknown tmp[223226] "maybe param" "temp"
      (223238 'move' tmp[223226](223236 call chpl_compute_low_param_loop_bound 0(223158 call - nFields[222865] 1)))
      unknown tmp[223227] "maybe param" "temp"
      (223248 'move' tmp[223227](223246 call chpl_compute_high_param_loop_bound 0(223243 call - nFields[222865] 1)))
      unknown tmp[223228] "maybe param" "temp"
      (223251 'move' tmp[223228] 1)
      ParamForLoop[223253]
      { fieldID[223225] tmp[223226] tmp[223227] tmp[223228]
        {
          const width[223169] "const"(223168 call abs(223166 call fieldWidth[222882] fieldID[223225]))
          (223172 'end of statement')
          if(223221 call _cond_test(223176 call != width[223169] 0))
          {
            (223218 call writef "| %.*s: "(223199 call - width[223169] 1) "------------------")
          }
        }
      }
      label _unused_continueLabel[223230]
      label _breakLabel[223229]
    }
    (223265 call writeln "|")
    {
      unknown _indexOfInterest[223379] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223380] "expr temp" "temp"
      (223389 'move' _iterator[223380](223387 call _getIterator LocaleSpace[113664]))
      Defer
      {
        {
          (223405 call _freeIterator _iterator[223380])
        }
      }
      { scopeless type
        (223394 'move' _indexOfInterest[223379](223391 call iteratorIndex _iterator[223380]))
      }
      ForLoop[223381]
      {
        unknown locID[223398] "index var" "insert auto destroy"
        (223400 'move' locID[223398] _indexOfInterest[223379])
        {
          (223276 call writef "| %6s "(223274 call _cast string[26] locID[223398]))
          {
            unknown fieldID[223337] 0
            unknown tmp[223338] "maybe param" "temp"
            (223350 'move' tmp[223338](223348 call chpl_compute_low_param_loop_bound 0(223282 call - nFields[222865] 1)))
            unknown tmp[223339] "maybe param" "temp"
            (223360 'move' tmp[223339](223358 call chpl_compute_high_param_loop_bound 0(223355 call - nFields[222865] 1)))
            unknown tmp[223340] "maybe param" "temp"
            (223363 'move' tmp[223340] 1)
            ParamForLoop[223365]
            { fieldID[223337] tmp[223338] tmp[223339] tmp[223340]
              {
                unknown width[223290](223289 call fieldWidth[222882] fieldID[223337])
                (223293 'end of statement')
                const count[223314] "const"(223311 IfExpr (223297 call < width[223290] 0) then
                { scopeless
                  unstable[222850]
                } else
                { scopeless
                  (223309 call _cast string[26](223307 call getField(223304 call CommDiags[222857] locID[223398]) fieldID[223337]))
                } )
                (223317 'end of statement')
                if(223332 call _cond_test(223320 call != width[223290] 0))
                {
                  (223330 call writef "| %*s "(223328 call abs width[223290]) count[223314])
                }
              }
            }
            label _unused_continueLabel[223342]
            label _breakLabel[223341]
          }
          (223377 call writeln "|")
        }
        label _continueLabel[223384]
        _indexOfInterest[223379]
        _iterator[223380]
      }
      label _breakLabel[223385]
    }
    (355206 'used modules list'(222830 'use' Reflection[224794]))
  }
  unknown printInitVerboseComm[223415] "config" "param" 0
  (223418 'end of statement')
  unknown printInitCommCounts[223420] "config" "param" 0
  (223423 'end of statement')
  (355202 'used modules list'(352914 'use' ChapelStandard[20264]))
}