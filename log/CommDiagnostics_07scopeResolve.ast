AST dump for CommDiagnostics after pass scopeResolve.
Module use list: ChapelStandard Reflection 

{
  unknown commDiagsPrintUnstable[222290] "config" "param" 0
  (222293 'end of statement')
  function chpl_commDiagnostics[222572].writeThis[222388](arg _mt[222576]:_MT[238], arg this[222574]:chpl_commDiagnostics[222572], arg c[222386]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown first[222395] 1
    (222398 'end of statement')
    (222401 call <~> c[222386] "(")
    {
      unknown i[222498] 0
      unknown tmp[222499] "maybe param" "temp"
      (222511 'move' tmp[222499](222509 call chpl_compute_low_param_loop_bound 0(222410 call -(222408 call numFields chpl_commDiagnostics[222572]) 1)))
      unknown tmp[222500] "maybe param" "temp"
      (222523 'move' tmp[222500](222521 call chpl_compute_high_param_loop_bound 0(222516 call -(222518 call numFields chpl_commDiagnostics[222572]) 1)))
      unknown tmp[222501] "maybe param" "temp"
      (222526 'move' tmp[222501] 1)
      ParamForLoop[222528]
      { i[222498] tmp[222499] tmp[222500] tmp[222501]
        {
          unknown name[222419] "param"(222418 call getFieldName chpl_commDiagnostics[222572] i[222498])
          (222422 'end of statement')
          const val[222429] "const"(222428 call getField this[222574] i[222498])
          (222432 'end of statement')
          if(222494 call _cond_test(222435 call != val[222429] 0))
          {
            if(222489 call _cond_test(222458 call || commDiagsPrintUnstable[222290](222456 call != name[222419] "amo")))
            {
              if(222471 call _cond_test first[222395])
              {
                (222463 call = first[222395] 0)
              }
              {
                (222468 call <~> c[222386] ", ")
              }
              (222486 call <~>(222483 call <~>(222480 call <~> c[222386] name[222419]) " = ") val[222429])
            }
          }
        }
      }
      label _unused_continueLabel[222503]
      label _breakLabel[222502]
    }
    if(222559 call _cond_test first[222395])
    {
      (222556 call <~> c[222386] "<no communication>")
    }
    (222566 call <~> c[222386] ")")
    (355332 'used modules list'(222391 'use' Reflection[224901]))
  }
  type chpl_commDiagnostics[222572] unknown get[222300](222299 call uint(64)[115] 64) unknown get_nb[222308](222307 call uint(64)[115] 64) unknown put[222316](222315 call uint(64)[115] 64) unknown put_nb[222324](222323 call uint(64)[115] 64) unknown test_nb[222332](222331 call uint(64)[115] 64) unknown wait_nb[222340](222339 call uint(64)[115] 64) unknown try_nb[222348](222347 call uint(64)[115] 64) unknown amo[222356](222355 call uint(64)[115] 64) unknown execute_on[222364](222363 call uint(64)[115] 64) unknown execute_on_fast[222372](222371 call uint(64)[115] 64) unknown execute_on_nb[222380](222379 call uint(64)[115] 64)
  {
  }
  unknown commDiagnostics[222582] "type variable" chpl_commDiagnostics[222572]
  function chpl_comm_startVerbose[222591](arg print_unstable[222588] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopVerbose[222597]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_startVerboseHere[222607](arg print_unstable[222604] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopVerboseHere[222613]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_startDiagnostics[222623](arg print_unstable[222620] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopDiagnostics[222629]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_startDiagnosticsHere[222639](arg print_unstable[222636] :
  bool[10]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_stopDiagnosticsHere[222645]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_resetDiagnosticsHere[222651]() : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function chpl_comm_getDiagnosticsHere[222661](out arg cd[222658] :
  commDiagnostics[222582]) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  function startVerboseComm[222667]() : _unknown[51] "no return value for void"
  {
    (222672 call chpl_comm_startVerbose commDiagsPrintUnstable[222290])
  }
  function stopVerboseComm[222679]() : _unknown[51] "no return value for void"
  {
    (222683 call chpl_comm_stopVerbose)
  }
  function startVerboseCommHere[222690]() : _unknown[51] "no return value for void"
  {
    (222695 call chpl_comm_startVerboseHere commDiagsPrintUnstable[222290])
  }
  function stopVerboseCommHere[222702]() : _unknown[51] "no return value for void"
  {
    (222706 call chpl_comm_stopVerboseHere)
  }
  function startCommDiagnostics[222713]() : _unknown[51] "no return value for void"
  {
    (222718 call chpl_comm_startDiagnostics commDiagsPrintUnstable[222290])
  }
  function stopCommDiagnostics[222725]() : _unknown[51] "no return value for void"
  {
    (222729 call chpl_comm_stopDiagnostics)
  }
  function startCommDiagnosticsHere[222736]() : _unknown[51] "no return value for void"
  {
    (222741 call chpl_comm_startDiagnosticsHere commDiagsPrintUnstable[222290])
  }
  function stopCommDiagnosticsHere[222748]() : _unknown[51] "no return value for void"
  {
    (222752 call chpl_comm_stopDiagnosticsHere)
  }
  function resetCommDiagnostics[222759]() : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[222779] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222780] "expr temp" "temp"
      (222789 'move' _iterator[222780](222787 call _getIterator Locales[113662]))
      Defer
      {
        {
          (222805 call _freeIterator _iterator[222780])
        }
      }
      { scopeless type
        (222794 'move' _indexOfInterest[222779](222791 call iteratorIndex _iterator[222780]))
      }
      ForLoop[222781]
      {
        unknown loc[222798] "index var" "insert auto destroy"
        (222800 'move' loc[222798] _indexOfInterest[222779])
        const tmp[222771] "const" "temp"
        (222773 'move' tmp[222771](222769 'deref'(222768 '_wide_get_locale' loc[222798])))
        {
          (222766 call resetCommDiagnosticsHere)
          (222776 'on block' 0 tmp[222771])
        }
        label _continueLabel[222784]
        _indexOfInterest[222779]
        _iterator[222780]
      }
      label _breakLabel[222785]
    }
  }
  function resetCommDiagnosticsHere[222817]() : _unknown[51] "inline" "no return value for void"
  {
    (222821 call chpl_comm_resetDiagnosticsHere)
  }
  function getCommDiagnostics[222828]() : _unknown[51]
  {
    unknown D[222837](222835 call chpl__buildArrayRuntimeType(222833 call chpl__ensureDomainExpr LocaleSpace[113670]) commDiagnostics[222582])
    (222840 'end of statement')
    {
      unknown _indexOfInterest[222870] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222871] "expr temp" "temp"
      (222880 'move' _iterator[222871](222878 call _getIterator Locales[113662]))
      Defer
      {
        {
          (222896 call _freeIterator _iterator[222871])
        }
      }
      { scopeless type
        (222885 'move' _indexOfInterest[222870](222882 call iteratorIndex _iterator[222871]))
      }
      ForLoop[222872]
      {
        unknown loc[222889] "index var" "insert auto destroy"
        (222891 'move' loc[222889] _indexOfInterest[222870])
        const tmp[222862] "const" "temp"
        (222864 'move' tmp[222862](222860 'deref'(222859 '_wide_get_locale' loc[222889])))
        {
          {
            (222855 call =(222851 call D[222837](222847 call . loc[222889] c"id"))(222854 call getCommDiagnosticsHere))
          }
          (222867 'on block' 0 tmp[222862])
        }
        label _continueLabel[222875]
        _indexOfInterest[222870]
        _iterator[222871]
      }
      label _breakLabel[222876]
    }
    (222904 return D[222837])
  }
  function getCommDiagnosticsHere[222910]() : _unknown[51]
  {
    unknown cd[222913] commDiagnostics[222582]
    (222916 'end of statement')
    (222921 call chpl_comm_getDiagnosticsHere cd[222913])
    (222924 return cd[222913])
  }
  function printCommDiagnosticsTable[222934](arg printEmptyColumns[222931] =
  0) : _unknown[51] "no return value for void"
  {
    unknown unstable[222957] "param" "unstable"
    (222960 'end of statement')
    unknown CommDiags[222964](222963 call getCommDiagnostics)
    (222967 'end of statement')
    unknown nFields[222972] "param"(222971 call numFields chpl_commDiagnostics[222572])
    (222975 'end of statement')
    unknown fieldWidth[222989](222987 call chpl__buildArrayRuntimeType(222985 call chpl__ensureDomainExpr(222981 call chpl_build_bounded_range 0(222979 call - nFields[222972] 1))) int(64)[13])
    (222992 'end of statement')
    (223029 call writef "| %6s " "locale")
    {
      unknown fieldID[223199] 0
      unknown tmp[223200] "maybe param" "temp"
      (223212 'move' tmp[223200](223210 call chpl_compute_low_param_loop_bound 0(223034 call - nFields[222972] 1)))
      unknown tmp[223201] "maybe param" "temp"
      (223222 'move' tmp[223201](223220 call chpl_compute_high_param_loop_bound 0(223217 call - nFields[222972] 1)))
      unknown tmp[223202] "maybe param" "temp"
      (223225 'move' tmp[223202] 1)
      ParamForLoop[223227]
      { fieldID[223199] tmp[223200] tmp[223201] tmp[223202]
        {
          unknown name[223043] "param"(223042 call getFieldName chpl_commDiagnostics[222572] fieldID[223199])
          (223046 'end of statement')
          unknown maxval[223049] 0
          (223052 'end of statement')
          {
            unknown _indexOfInterest[223077] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[223078] "expr temp" "temp"
            (223087 'move' _iterator[223078](223085 call _getIterator LocaleSpace[113670]))
            Defer
            {
              {
                (223103 call _freeIterator _iterator[223078])
              }
            }
            { scopeless type
              (223092 'move' _indexOfInterest[223077](223089 call iteratorIndex _iterator[223078]))
            }
            ForLoop[223079]
            {
              unknown locID[223096] "index var" "insert auto destroy"
              (223098 'move' locID[223096] _indexOfInterest[223077])
              (223074 call = maxval[223049](223073 call max maxval[223049](223072 call(223067 call .(223066 call getField(223063 call CommDiags[222964] locID[223096]) fieldID[223199]) c"safeCast") int(64)[13])))
              label _continueLabel[223082]
              _indexOfInterest[223077]
              _iterator[223078]
            }
            label _breakLabel[223083]
          }
          if(223195 call _cond_test(223115 call || printEmptyColumns[222931](223113 call != maxval[223049] 0)))
          {
            const width[223156] "const"(223153 IfExpr (223125 call &&(223119 call == commDiagsPrintUnstable[222290] 0)(223123 call == name[223043] "amo")) then
            { scopeless
              (223131 call -(223128 call . unstable[222957] c"size"))
            } else
            { scopeless
              (223152 call max(223135 call . name[223043] c"size")(223150 call _cast int(64)[13](223148 call ceil(223146 call log10(223143 call + maxval[223049] 1)))))
            } )
            (223159 'end of statement')
            (223166 call =(223164 call fieldWidth[222989] fieldID[223199]) width[223156])
            (223193 call writef "| %*s "(223191 call abs width[223156]) name[223043])
          }
        }
      }
      label _unused_continueLabel[223204]
      label _breakLabel[223203]
    }
    (223239 call writeln "|")
    (223260 call writef "| -----: ")
    {
      unknown fieldID[223332] 0
      unknown tmp[223333] "maybe param" "temp"
      (223345 'move' tmp[223333](223343 call chpl_compute_low_param_loop_bound 0(223265 call - nFields[222972] 1)))
      unknown tmp[223334] "maybe param" "temp"
      (223355 'move' tmp[223334](223353 call chpl_compute_high_param_loop_bound 0(223350 call - nFields[222972] 1)))
      unknown tmp[223335] "maybe param" "temp"
      (223358 'move' tmp[223335] 1)
      ParamForLoop[223360]
      { fieldID[223332] tmp[223333] tmp[223334] tmp[223335]
        {
          const width[223276] "const"(223275 call abs(223273 call fieldWidth[222989] fieldID[223332]))
          (223279 'end of statement')
          if(223328 call _cond_test(223283 call != width[223276] 0))
          {
            (223325 call writef "| %.*s: "(223306 call - width[223276] 1) "------------------")
          }
        }
      }
      label _unused_continueLabel[223337]
      label _breakLabel[223336]
    }
    (223372 call writeln "|")
    {
      unknown _indexOfInterest[223486] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223487] "expr temp" "temp"
      (223496 'move' _iterator[223487](223494 call _getIterator LocaleSpace[113670]))
      Defer
      {
        {
          (223512 call _freeIterator _iterator[223487])
        }
      }
      { scopeless type
        (223501 'move' _indexOfInterest[223486](223498 call iteratorIndex _iterator[223487]))
      }
      ForLoop[223488]
      {
        unknown locID[223505] "index var" "insert auto destroy"
        (223507 'move' locID[223505] _indexOfInterest[223486])
        {
          (223383 call writef "| %6s "(223381 call _cast string[26] locID[223505]))
          {
            unknown fieldID[223444] 0
            unknown tmp[223445] "maybe param" "temp"
            (223457 'move' tmp[223445](223455 call chpl_compute_low_param_loop_bound 0(223389 call - nFields[222972] 1)))
            unknown tmp[223446] "maybe param" "temp"
            (223467 'move' tmp[223446](223465 call chpl_compute_high_param_loop_bound 0(223462 call - nFields[222972] 1)))
            unknown tmp[223447] "maybe param" "temp"
            (223470 'move' tmp[223447] 1)
            ParamForLoop[223472]
            { fieldID[223444] tmp[223445] tmp[223446] tmp[223447]
              {
                unknown width[223397](223396 call fieldWidth[222989] fieldID[223444])
                (223400 'end of statement')
                const count[223421] "const"(223418 IfExpr (223404 call < width[223397] 0) then
                { scopeless
                  unstable[222957]
                } else
                { scopeless
                  (223416 call _cast string[26](223414 call getField(223411 call CommDiags[222964] locID[223505]) fieldID[223444]))
                } )
                (223424 'end of statement')
                if(223439 call _cond_test(223427 call != width[223397] 0))
                {
                  (223437 call writef "| %*s "(223435 call abs width[223397]) count[223421])
                }
              }
            }
            label _unused_continueLabel[223449]
            label _breakLabel[223448]
          }
          (223484 call writeln "|")
        }
        label _continueLabel[223491]
        _indexOfInterest[223486]
        _iterator[223487]
      }
      label _breakLabel[223492]
    }
    (355334 'used modules list'(222937 'use' Reflection[224901]))
  }
  unknown printInitVerboseComm[223522] "config" "param" 0
  (223525 'end of statement')
  unknown printInitCommCounts[223527] "config" "param" 0
  (223530 'end of statement')
  (355330 'used modules list'(353042 'use' ChapelStandard[20267]))
}