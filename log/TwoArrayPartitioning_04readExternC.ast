AST dump for TwoArrayPartitioning after pass readExternC.
Module use list: 

{
  (352956 'use' ChapelStandard)
  (279108 'use' BlockDist)
  (279117 'use'(279114 call . super c"MSBRadixSort"))
  (279121 'use' List 'only' list)
  (279128 'import' Sort.{ShellSort, RadixSortHelp, SampleSortHelp, ShallowCopy})
  { scopeless
    unknown debug[279131] "param" "private" 0
    (279134 'end of statement')
  }
  { scopeless
    unknown maxBuckets[279138] "param" 512
    (279141 'end of statement')
  }
  type TwoArraySortTask[279251] unknown start[279144] int[13] unknown size[279149] int[13] unknown startbit[279154] int[13] unknown inA[279159] bool[10] unknown doSort[279164] bool[10] function TwoArraySortTask[279251].init[279170](arg _mt[279255]:_MT[238], arg this[279253]:TwoArraySortTask[279251]) : _unknown[51] "method" "primary method"
  {
  } function TwoArraySortTask[279251].init[279181](arg _mt[279259]:_MT[238], arg this[279257]:TwoArraySortTask[279251], arg start[279178] :
  int[13], arg size[279184] :
  int[13], arg startbit[279188] :
  int[13], arg inA[279192] :
  bool[10], arg doSort[279196] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (279206 call =(279202 call . this c"start") start)
    (279215 call =(279211 call . this c"size") size)
    (279225 call =(279221 call . this c"startbit") startbit)
    (279235 call =(279231 call . this c"inA") inA)
    (279245 call =(279241 call . this c"doSort") doSort)
  }
  type TwoArrayBucketizerPerTaskState[279280] unknown localCounts[279275](279273 call chpl__buildArrayRuntimeType(279271 call chpl__ensureDomainExpr(279267 call #(279264 call chpl_build_low_bounded_range 0) maxBuckets)) int[13])
  type TwoArrayBucketizerSharedState[279450](?) unknown nTasks[279297](279294 IfExpr (279287 call > dataParTasksPerLocale 0) then
  { scopeless
    dataParTasksPerLocale
  } else
  { scopeless
    (279291 call . here c"maxTaskPar")
  } ) int[13] unknown countsSize[279306](279304 call * nTasks maxBuckets) int[13] unknown bucketizer[279310] unknown globalCounts[279326](279324 call chpl__buildArrayRuntimeType(279322 call chpl__ensureDomainExpr(279318 call #(279315 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown globalEnds[279342](279340 call chpl__buildArrayRuntimeType(279338 call chpl__ensureDomainExpr(279334 call #(279331 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown localState[279358](279356 call chpl__buildArrayRuntimeType(279354 call chpl__ensureDomainExpr(279350 call #(279347 call chpl_build_low_bounded_range 0) nTasks)) TwoArrayBucketizerPerTaskState) unknown counts[279374](279372 call chpl__buildArrayRuntimeType(279370 call chpl__ensureDomainExpr(279366 call #(279363 call chpl_build_low_bounded_range 0) maxBuckets)) int[13]) unknown ends[279390](279388 call chpl__buildArrayRuntimeType(279386 call chpl__ensureDomainExpr(279382 call #(279379 call chpl_build_low_bounded_range 0) maxBuckets)) int[13]) unknown outputInA[279406](279404 call chpl__buildArrayRuntimeType(279402 call chpl__ensureDomainExpr(279398 call #(279395 call chpl_build_low_bounded_range 0) maxBuckets)) bool[10]) unknown bigTasks[279414](279413 call list TwoArraySortTask) unknown smallTasks[279422](279421 call list TwoArraySortTask) unknown baseCaseSize[279428] 16 int[13] unknown sequentialSizePerTask[279436] 4096 int[13] unknown endbit[279445](279444 call max int[13]) int[13]
  type TwoArrayDistributedBucketizerStatePerLocale[279507](?) unknown bucketizerType[279454] "type variable" unknown compat[279461](279460 call TwoArrayBucketizerSharedState bucketizerType) unknown countsSize[279470](279468 call * numLocales maxBuckets) int[13] unknown globalCounts[279486](279484 call chpl__buildArrayRuntimeType(279482 call chpl__ensureDomainExpr(279478 call #(279475 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown globalEnds[279502](279500 call chpl__buildArrayRuntimeType(279498 call chpl__ensureDomainExpr(279494 call #(279491 call chpl_build_low_bounded_range 0) countsSize)) int[13])
  type TasksForLocale[279520] unknown localTasks[279515](279514 call list TwoArraySortTask)
  type TwoArrayDistributedBucketizerSharedState[279732](?) unknown bucketizerType[279524] "type variable" unknown numLocales[279528] int[13] unknown perLocale[279545](279544 call newBlockArr(279537 call #(279534 call chpl_build_low_bounded_range 0) numLocales)(279543 call TwoArrayDistributedBucketizerStatePerLocale bucketizerType)) const baseCaseSize[279550] "const" int[13] const endbit[279559] "const"(279558 call max int[13]) int[13] const countsSize[279568] "const"(279566 call * numLocales maxBuckets) int[13] unknown globalCounts[279584](279582 call chpl__buildArrayRuntimeType(279580 call chpl__ensureDomainExpr(279576 call #(279573 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown globalEnds[279600](279598 call chpl__buildArrayRuntimeType(279596 call chpl__ensureDomainExpr(279592 call #(279589 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown distTasks[279608](279607 call list TwoArraySortTask) unknown localTasks[279624](279622 call chpl__buildArrayRuntimeType(279620 call chpl__ensureDomainExpr(279616 call #(279613 call chpl_build_low_bounded_range 0) numLocales)) TasksForLocale) function TwoArrayDistributedBucketizerSharedState[279732](?).postinit[279630](arg _mt[279736]:_MT[238], arg this[279734]:TwoArrayDistributedBucketizerSharedState[279732](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown _indexOfInterest[279695] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[279696] "expr temp" "temp"
      (279705 'move' _iterator[279696](279703 call _getIterator perLocale))
      Defer
      {
        {
          (279721 call _freeIterator _iterator[279696])
        }
      }
      { scopeless type
        (279710 'move' _indexOfInterest[279695](279707 call iteratorIndex _iterator[279696]))
      }
      ForLoop[279697]
      {
        unknown p[279714] "index var" "insert auto destroy"
        (279716 'move' p[279714] _indexOfInterest[279695])
        {
          (279646 call =(279642 call .(279637 call . p c"compat") c"baseCaseSize") baseCaseSize)
          (279660 call =(279656 call .(279651 call . p c"compat") c"endbit") endbit)
          (279677 call assert(279674 call >(279670 call .(279665 call . p c"compat") c"nTasks") 0))
          (279693 call assert(279690 call >(279686 call .(279681 call . p c"compat") c"countsSize") 0))
        }
        label _continueLabel[279700]
        _indexOfInterest[279695]
        _iterator[279696]
      }
      label _breakLabel[279701]
    }
  }
  function bucketize[279745](arg start_n[279742] :
  int[13], arg end_n[279748] :
  int[13], arg dst[279754] :
  (279751 call chpl__buildArrayRuntimeType nil[44]), arg src[279760] :
  (279757 call chpl__buildArrayRuntimeType nil[44]), ref arg state[279764] :
  TwoArrayBucketizerSharedState, arg criterion[279767]:_any[178](?), arg startbit[279770] :
  int[13]) : _unknown[51]
  {
    if(279817 call _cond_test debug)
    {
      { scopeless
        (279815 call writeln "bucketize "(279795 call chpl_build_bounded_range start_n end_n) " startbit=" startbit)
      }
    }
    { scopeless
      const nBuckets[279834] "const"(279833 call(279829 call .(279826 call . state c"bucketizer") c"getNumBuckets"))
      (279837 'end of statement')
    }
    { scopeless
      const n[279845] "const"(279843 call +(279840 call - end_n start_n) 1)
      (279848 'end of statement')
    }
    { scopeless
      const nTasks[279864] "const"(279861 IfExpr (279854 call >= n(279851 call . state c"nTasks")) then
      { scopeless
        (279857 call . state c"nTasks")
      } else
      { scopeless
        1
      } )
      (279867 'end of statement')
    }
    (279874 call assert(279871 call > nTasks 0))
    if(279893 call _cond_test(279878 call == n 0))
    {
      (279887 call =(279883 call . state c"counts") 0)
      (279891 return)
    }
    { scopeless
      const countsSize[279901] "const"(279899 call * nTasks nBuckets)
      (279904 'end of statement')
    }
    { scopeless
      const blockSize[279910] "const"(279909 call divceil n nTasks)
      (279913 'end of statement')
    }
    { scopeless
      const nBlocks[279919] "const"(279918 call divceil n blockSize)
      (279922 'end of statement')
    }
    {
      unknown tmpIter[280241] "expr temp" "maybe ref" "no copy" "temp"
      (280244 'move' tmpIter[280241](279928 call #(279925 call chpl_build_low_bounded_range 0) nTasks))
      unknown isRngDomArr[280612] "maybe param" "temp"
      (280627 'move' isRngDomArr[280612](280625 call ||(280614 call isBoundedRange tmpIter[280241])(280623 call ||(280617 call isDomain tmpIter[280241])(280620 call isArray tmpIter[280241]))))
      if isRngDomArr[280612]
      {
        const _coforallCount[280479] "const" "end count" "temp"
        (280548 'move' _coforallCount[280479](280545 call _endCountAlloc 1))
        unknown numTasks[280480] "temp"
        (280532 'move' numTasks[280480](280528 call . tmpIter[280241] c"size"))
        (280523 call _upEndCount _coforallCount[280479] 1 numTasks[280480])
        (280520 call chpl_resetTaskSpawn numTasks[280480])
        unknown _indexOfInterest[280487] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[280488] "expr temp" "temp"
        (280497 'move' _iterator[280488](280495 call _getIterator tmpIter[280241]))
        Defer
        {
          {
            (280513 call _freeIterator _iterator[280488])
          }
        }
        { scopeless type
          (280502 'move' _indexOfInterest[280487](280499 call iteratorIndex _iterator[280488]))
        }
        ForLoop[280489]
        {
          unknown tid[280506] "coforall index var" "index var" "insert auto destroy"
          (280508 'move' tid[280506] _indexOfInterest[280487])
          {
            {
              { scopeless
                unknown start[280251](280253 call + start_n(280256 call * tid blockSize))
                (280260 'end of statement')
              }
              { scopeless
                unknown end[280262](280264 call -(280266 call + start blockSize) 1)
                (280271 'end of statement')
              }
              if(280273 call _cond_test(280275 call > end end_n))
              {
                (280280 call = end end_n)
              }
              if(280285 call _cond_test debug)
              {
                { scopeless
                  (280290 call writeln "tid " tid " considering "(280295 call chpl_build_bounded_range start end))
                }
              }
              { scopeless
                unknown counts[280300] "ref var"(280302 call .(280307 call(280304 call . state c"localState") tid) c"localCounts")
                (280311 'end of statement')
              }
              {
                unknown _indexOfInterest[280313] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280315] "expr temp" "temp"
                (280317 'move' _iterator[280315](280320 call _getIterator(280322 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (280327 call _freeIterator _iterator[280315])
                  }
                }
                { scopeless type
                  (280331 'move' _indexOfInterest[280313](280334 call iteratorIndex _iterator[280315]))
                }
                ForLoop[280336]
                {
                  unknown bin[280339] "index var" "insert auto destroy"
                  (280341 'move' bin[280339] _indexOfInterest[280313])
                  {
                    (280346 call =(280348 call counts bin) 0)
                  }
                  label _continueLabel[280351]
                  _indexOfInterest[280313]
                  _iterator[280315]
                }
                label _breakLabel[280353]
              }
              {
                unknown _indexOfInterest[280356] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280358] "expr temp" "temp"
                (280360 'move' _iterator[280358](280363 call _getIterator(280371 call(280365 call .(280367 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (280379 call _freeIterator _iterator[280358])
                  }
                }
                { scopeless type
                  (280383 'move' _indexOfInterest[280356](280386 call iteratorIndex _iterator[280358]))
                }
                ForLoop[280388]
                {
                  (280392 call _check_tuple_var_decl _indexOfInterest[280356] 2)
                  unknown i[280395] "index var" "insert auto destroy"
                  (280397 'move' i[280395](280400 call _indexOfInterest[280356] 0))
                  unknown bin[280402] "index var" "insert auto destroy"
                  (280404 'move' bin[280402](280407 call _indexOfInterest[280356] 1))
                  {
                    (280411 call +=(280413 call counts bin) 1)
                  }
                  label _continueLabel[280416]
                  _indexOfInterest[280356]
                  _iterator[280358]
                }
                label _breakLabel[280418]
              }
              {
                unknown _indexOfInterest[280421] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280423] "expr temp" "temp"
                (280425 'move' _iterator[280423](280428 call _getIterator(280430 call vectorizeOnly(280432 call #(280434 call chpl_build_low_bounded_range 0) nBuckets))))
                Defer
                {
                  {
                    (280439 call _freeIterator _iterator[280423])
                  }
                }
                { scopeless type
                  (280443 'move' _indexOfInterest[280421](280446 call iteratorIndex _iterator[280423]))
                }
                ForLoop[280448]
                {
                  unknown bin[280451] "index var" "insert auto destroy"
                  (280453 'move' bin[280451] _indexOfInterest[280421])
                  {
                    (280458 call =(280463 call(280460 call . state c"globalCounts")(280465 call +(280467 call * bin nTasks) tid))(280472 call counts bin))
                  }
                  label _continueLabel[280474]
                  _indexOfInterest[280421]
                  _iterator[280423]
                }
                label _breakLabel[280476]
              }
            }
            (280482 call _downEndCount _coforallCount[280479] nil[44])
            (280481 'coforall loop')
            (280246 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[280492]
          _indexOfInterest[280487]
          _iterator[280488]
        }
        label _breakLabel[280493]
        Defer
        {
          {
            (280535 call _endCountFree _coforallCount[280479])
          }
        }
        (280540 call _waitEndCount _coforallCount[280479] 1 numTasks[280480])
      }
      {
        const _coforallCount[280552] "const" "end count" "temp"
        (280609 'move' _coforallCount[280552](280606 call _endCountAlloc 1))
        unknown _indexOfInterest[280560] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[280561] "expr temp" "temp"
        (280570 'move' _iterator[280561](280568 call _getIterator tmpIter[280241]))
        Defer
        {
          {
            (280586 call _freeIterator _iterator[280561])
          }
        }
        { scopeless type
          (280575 'move' _indexOfInterest[280560](280572 call iteratorIndex _iterator[280561]))
        }
        ForLoop[280562]
        {
          unknown tid[280579] "coforall index var" "index var" "insert auto destroy"
          (280581 'move' tid[280579] _indexOfInterest[280560])
          (280593 call _upEndCount _coforallCount[280552] 1)
          {
            {
              { scopeless
                unknown start[279945](279943 call + start_n(279941 call * tid blockSize))
                (279948 'end of statement')
              }
              { scopeless
                unknown end[279957](279955 call -(279952 call + start blockSize) 1)
                (279960 'end of statement')
              }
              if(279971 call _cond_test(279963 call > end end_n))
              {
                (279967 call = end end_n)
              }
              if(280019 call _cond_test debug)
              {
                { scopeless
                  (280017 call writeln "tid " tid " considering "(280015 call chpl_build_bounded_range start end))
                }
              }
              { scopeless
                unknown counts[280038] "ref var"(280035 call .(280032 call(280027 call . state c"localState") tid) c"localCounts")
                (280041 'end of statement')
              }
              {
                unknown _indexOfInterest[280058] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280059] "expr temp" "temp"
                (280068 'move' _iterator[280059](280066 call _getIterator(280075 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (280091 call _freeIterator _iterator[280059])
                  }
                }
                { scopeless type
                  (280080 'move' _indexOfInterest[280058](280077 call iteratorIndex _iterator[280059]))
                }
                ForLoop[280060]
                {
                  unknown bin[280084] "index var" "insert auto destroy"
                  (280086 'move' bin[280084] _indexOfInterest[280058])
                  {
                    (280054 call =(280052 call counts bin) 0)
                  }
                  label _continueLabel[280063]
                  _indexOfInterest[280058]
                  _iterator[280059]
                }
                label _breakLabel[280064]
              }
              {
                unknown _indexOfInterest[280126] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280127] "expr temp" "temp"
                (280136 'move' _iterator[280127](280134 call _getIterator(280116 call(280107 call .(280104 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (280167 call _freeIterator _iterator[280127])
                  }
                }
                { scopeless type
                  (280142 'move' _indexOfInterest[280126](280139 call iteratorIndex _iterator[280127]))
                }
                ForLoop[280128]
                {
                  (280147 call _check_tuple_var_decl _indexOfInterest[280126] 2)
                  unknown i[280153] "index var" "insert auto destroy"
                  (280155 'move' i[280153](280151 call _indexOfInterest[280126] 0))
                  unknown bin[280160] "index var" "insert auto destroy"
                  (280162 'move' bin[280160](280158 call _indexOfInterest[280126] 1))
                  {
                    (280122 call +=(280120 call counts bin) 1)
                  }
                  label _continueLabel[280131]
                  _indexOfInterest[280126]
                  _iterator[280127]
                }
                label _breakLabel[280132]
              }
              {
                unknown _indexOfInterest[280207] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280208] "expr temp" "temp"
                (280217 'move' _iterator[280208](280215 call _getIterator(280183 call vectorizeOnly(280180 call #(280177 call chpl_build_low_bounded_range 0) nBuckets))))
                Defer
                {
                  {
                    (280234 call _freeIterator _iterator[280208])
                  }
                }
                { scopeless type
                  (280223 'move' _indexOfInterest[280207](280220 call iteratorIndex _iterator[280208]))
                }
                ForLoop[280209]
                {
                  unknown bin[280227] "index var" "insert auto destroy"
                  (280229 'move' bin[280227] _indexOfInterest[280207])
                  {
                    (280203 call =(280198 call(280187 call . state c"globalCounts")(280195 call +(280192 call * bin nTasks) tid))(280202 call counts bin))
                  }
                  label _continueLabel[280212]
                  _indexOfInterest[280207]
                  _iterator[280208]
                }
                label _breakLabel[280213]
              }
            }
            (280555 call _downEndCount _coforallCount[280552] nil[44])
            (280554 'coforall loop')
            (279935 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[280565]
          _indexOfInterest[280560]
          _iterator[280561]
        }
        label _breakLabel[280566]
        Defer
        {
          {
            (280597 call _endCountFree _coforallCount[280552])
          }
        }
        (280602 call _waitEndCount _coforallCount[280552] 1)
      }
    }
    (280679 call =(280634 call . state c"globalEnds")(280677 call +(280675 'scan' function chpl__scan2[280642](arg chpl_toScan[280644]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
    {
      unknown chpl_eltType[280646] "maybe type" "temp"
      { scopeless type
        (280650 'move' chpl_eltType[280646](280652 'typeof'(280654 call chpl__initCopy(280656 call iteratorIndex(280658 call _getIterator chpl_toScan[280644])))))
      }
      const tmp[280647] "const" "temp"
      (280667 'move' tmp[280647](280666 'new'(280665 call SumReduceScanOp(eltType = chpl_eltType[280646])(_chpl_manager = unmanaged[220](?)))))
      (280669 return(280671 call chpl__scanIterator tmp[280647] chpl_toScan[280644]))
    }(280639 call . state c"globalCounts")) start_n))
    if(280881 call _cond_test debug)
    {
      {
        unknown _indexOfInterest[280840] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[280841] "expr temp" "temp"
        (280850 'move' _iterator[280841](280848 call _getIterator(280857 call chpl_direct_counted_range_iter 0 nBuckets)))
        Defer
        {
          {
            (280873 call _freeIterator _iterator[280841])
          }
        }
        { scopeless type
          (280862 'move' _indexOfInterest[280840](280859 call iteratorIndex _iterator[280841]))
        }
        ForLoop[280842]
        {
          unknown bin[280866] "index var" "insert auto destroy"
          (280868 'move' bin[280866] _indexOfInterest[280840])
          {
            {
              unknown _indexOfInterest[280799] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[280800] "expr temp" "temp"
              (280809 'move' _iterator[280800](280807 call _getIterator(280816 call chpl_direct_counted_range_iter 0 nTasks)))
              Defer
              {
                {
                  (280832 call _freeIterator _iterator[280800])
                }
              }
              { scopeless type
                (280821 'move' _indexOfInterest[280799](280818 call iteratorIndex _iterator[280800]))
              }
              ForLoop[280801]
              {
                unknown tid[280825] "index var" "insert auto destroy"
                (280827 'move' tid[280825] _indexOfInterest[280799])
                {
                  { scopeless
                    unknown gb[280704](280702 call +(280699 call * bin nTasks) tid)
                    (280707 'end of statement')
                  }
                  if(280795 call _cond_test(280717 call !=(280715 call(280710 call . state c"globalCounts") gb) 0))
                  {
                    (280792 call writeln "tid " tid " count[" bin "] = "(280764 call(280759 call . state c"globalCounts") gb) " end = "(280790 call -(280788 call(280783 call . state c"globalEnds") gb) 1))
                  }
                }
                label _continueLabel[280804]
                _indexOfInterest[280799]
                _iterator[280800]
              }
              label _breakLabel[280805]
            }
          }
          label _continueLabel[280845]
          _indexOfInterest[280840]
          _iterator[280841]
        }
        label _breakLabel[280846]
      }
    }
    {
      unknown tmpIter[281244] "expr temp" "maybe ref" "no copy" "temp"
      (281247 'move' tmpIter[281244](280890 call #(280887 call chpl_build_low_bounded_range 0) nTasks))
      unknown isRngDomArr[281627] "maybe param" "temp"
      (281642 'move' isRngDomArr[281627](281640 call ||(281629 call isBoundedRange tmpIter[281244])(281638 call ||(281632 call isDomain tmpIter[281244])(281635 call isArray tmpIter[281244]))))
      if isRngDomArr[281627]
      {
        const _coforallCount[281494] "const" "end count" "temp"
        (281563 'move' _coforallCount[281494](281560 call _endCountAlloc 1))
        unknown numTasks[281495] "temp"
        (281547 'move' numTasks[281495](281543 call . tmpIter[281244] c"size"))
        (281538 call _upEndCount _coforallCount[281494] 1 numTasks[281495])
        (281535 call chpl_resetTaskSpawn numTasks[281495])
        unknown _indexOfInterest[281502] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[281503] "expr temp" "temp"
        (281512 'move' _iterator[281503](281510 call _getIterator tmpIter[281244]))
        Defer
        {
          {
            (281528 call _freeIterator _iterator[281503])
          }
        }
        { scopeless type
          (281517 'move' _indexOfInterest[281502](281514 call iteratorIndex _iterator[281503]))
        }
        ForLoop[281504]
        {
          unknown tid[281521] "coforall index var" "index var" "insert auto destroy"
          (281523 'move' tid[281521] _indexOfInterest[281502])
          {
            {
              { scopeless
                unknown start[281254](281256 call + start_n(281259 call * tid blockSize))
                (281263 'end of statement')
              }
              { scopeless
                unknown end[281265](281267 call -(281269 call + start blockSize) 1)
                (281274 'end of statement')
              }
              if(281276 call _cond_test(281278 call > end end_n))
              {
                (281283 call = end end_n)
              }
              { scopeless
                unknown nextOffsets[281288] "ref var"(281290 call .(281295 call(281292 call . state c"localState") tid) c"localCounts")
                (281299 'end of statement')
              }
              {
                unknown _indexOfInterest[281301] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281303] "expr temp" "temp"
                (281305 'move' _iterator[281303](281308 call _getIterator(281310 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (281315 call _freeIterator _iterator[281303])
                  }
                }
                { scopeless type
                  (281319 'move' _indexOfInterest[281301](281322 call iteratorIndex _iterator[281303]))
                }
                ForLoop[281324]
                {
                  unknown bin[281327] "index var" "insert auto destroy"
                  (281329 'move' bin[281327] _indexOfInterest[281301])
                  {
                    { scopeless
                      unknown globalBin[281334](281336 call +(281338 call * bin nTasks) tid)
                      (281343 'end of statement')
                    }
                    (281345 call =(281347 call nextOffsets bin)(281365 IfExpr (281350 call > globalBin 0) then
                    { scopeless
                      (281358 call(281355 call . state c"globalEnds")(281360 call - globalBin 1))
                    } else
                    { scopeless
                      start_n
                    } ))
                    if(281367 call _cond_test debug)
                    {
                      if(281371 call _cond_test(281373 call !=(281378 call(281375 call . state c"globalCounts") globalBin) 0))
                      {
                        (281383 call writeln "tid " tid " nextOffsets[" bin "] = "(281390 call nextOffsets bin))
                      }
                    }
                  }
                  label _continueLabel[281394]
                  _indexOfInterest[281301]
                  _iterator[281303]
                }
                label _breakLabel[281396]
              }
              {
                unknown _indexOfInterest[281399] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281401] "expr temp" "temp"
                (281403 'move' _iterator[281401](281406 call _getIterator(281414 call(281408 call .(281410 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (281422 call _freeIterator _iterator[281401])
                  }
                }
                { scopeless type
                  (281426 'move' _indexOfInterest[281399](281429 call iteratorIndex _iterator[281401]))
                }
                ForLoop[281431]
                {
                  (281435 call _check_tuple_var_decl _indexOfInterest[281399] 2)
                  unknown i[281438] "index var" "insert auto destroy"
                  (281440 'move' i[281438](281443 call _indexOfInterest[281399] 0))
                  unknown bin[281445] "index var" "insert auto destroy"
                  (281447 'move' bin[281445](281450 call _indexOfInterest[281399] 1))
                  {
                    { scopeless
                      unknown next[281454] "ref var"(281456 call nextOffsets bin)
                      (281459 'end of statement')
                    }
                    if(281461 call _cond_test debug)
                    {
                      (281465 call writeln "tid " tid " dst[" next "] = src[" i "] bin " bin)
                    }
                    (281479 call(281476 call . ShallowCopy c"shallowCopy") dst next src i 1)
                    (281486 call += next 1)
                  }
                  label _continueLabel[281489]
                  _indexOfInterest[281399]
                  _iterator[281401]
                }
                label _breakLabel[281491]
              }
            }
            (281497 call _downEndCount _coforallCount[281494] nil[44])
            (281496 'coforall loop')
            (281249 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[281507]
          _indexOfInterest[281502]
          _iterator[281503]
        }
        label _breakLabel[281508]
        Defer
        {
          {
            (281550 call _endCountFree _coforallCount[281494])
          }
        }
        (281555 call _waitEndCount _coforallCount[281494] 1 numTasks[281495])
      }
      {
        const _coforallCount[281567] "const" "end count" "temp"
        (281624 'move' _coforallCount[281567](281621 call _endCountAlloc 1))
        unknown _indexOfInterest[281575] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[281576] "expr temp" "temp"
        (281585 'move' _iterator[281576](281583 call _getIterator tmpIter[281244]))
        Defer
        {
          {
            (281601 call _freeIterator _iterator[281576])
          }
        }
        { scopeless type
          (281590 'move' _indexOfInterest[281575](281587 call iteratorIndex _iterator[281576]))
        }
        ForLoop[281577]
        {
          unknown tid[281594] "coforall index var" "index var" "insert auto destroy"
          (281596 'move' tid[281594] _indexOfInterest[281575])
          (281608 call _upEndCount _coforallCount[281567] 1)
          {
            {
              { scopeless
                unknown start[280907](280905 call + start_n(280903 call * tid blockSize))
                (280910 'end of statement')
              }
              { scopeless
                unknown end[280919](280917 call -(280914 call + start blockSize) 1)
                (280922 'end of statement')
              }
              if(280933 call _cond_test(280925 call > end end_n))
              {
                (280929 call = end end_n)
              }
              { scopeless
                unknown nextOffsets[280947] "ref var"(280944 call .(280943 call(280938 call . state c"localState") tid) c"localCounts")
                (280950 'end of statement')
              }
              {
                unknown _indexOfInterest[281045] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281046] "expr temp" "temp"
                (281055 'move' _iterator[281046](281053 call _getIterator(281062 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (281078 call _freeIterator _iterator[281046])
                  }
                }
                { scopeless type
                  (281067 'move' _indexOfInterest[281045](281064 call iteratorIndex _iterator[281046]))
                }
                ForLoop[281047]
                {
                  unknown bin[281071] "index var" "insert auto destroy"
                  (281073 'move' bin[281071] _indexOfInterest[281045])
                  {
                    { scopeless
                      unknown globalBin[280965](280963 call +(280960 call * bin nTasks) tid)
                      (280968 'end of statement')
                    }
                    (280992 call =(280973 call nextOffsets bin)(280989 IfExpr (280976 call > globalBin 0) then
                    { scopeless
                      (280987 call(280979 call . state c"globalEnds")(280984 call - globalBin 1))
                    } else
                    { scopeless
                      start_n
                    } ))
                    if(281041 call _cond_test debug)
                    {
                      if(281036 call _cond_test(281004 call !=(281002 call(280997 call . state c"globalCounts") globalBin) 0))
                      {
                        (281033 call writeln "tid " tid " nextOffsets[" bin "] = "(281032 call nextOffsets bin))
                      }
                    }
                  }
                  label _continueLabel[281050]
                  _indexOfInterest[281045]
                  _iterator[281046]
                }
                label _breakLabel[281051]
              }
              {
                unknown _indexOfInterest[281196] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281197] "expr temp" "temp"
                (281206 'move' _iterator[281197](281204 call _getIterator(281103 call(281094 call .(281091 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (281237 call _freeIterator _iterator[281197])
                  }
                }
                { scopeless type
                  (281212 'move' _indexOfInterest[281196](281209 call iteratorIndex _iterator[281197]))
                }
                ForLoop[281198]
                {
                  (281217 call _check_tuple_var_decl _indexOfInterest[281196] 2)
                  unknown i[281223] "index var" "insert auto destroy"
                  (281225 'move' i[281223](281221 call _indexOfInterest[281196] 0))
                  unknown bin[281230] "index var" "insert auto destroy"
                  (281232 'move' bin[281230](281228 call _indexOfInterest[281196] 1))
                  {
                    { scopeless
                      unknown next[281108] "ref var"(281107 call nextOffsets bin)
                      (281111 'end of statement')
                    }
                    if(281175 call _cond_test debug)
                    {
                      (281172 call writeln "tid " tid " dst[" next "] = src[" i "] bin " bin)
                    }
                    (281189 call(281180 call . ShallowCopy c"shallowCopy") dst next src i 1)
                    (281193 call += next 1)
                  }
                  label _continueLabel[281201]
                  _indexOfInterest[281196]
                  _iterator[281197]
                }
                label _breakLabel[281202]
              }
            }
            (281570 call _downEndCount _coforallCount[281567] nil[44])
            (281569 'coforall loop')
            (280897 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[281580]
          _indexOfInterest[281575]
          _iterator[281576]
        }
        label _breakLabel[281581]
        Defer
        {
          {
            (281612 call _endCountFree _coforallCount[281567])
          }
        }
        (281617 call _waitEndCount _coforallCount[281567] 1)
      }
    }
    { scopeless
      unknown counts[281650] "ref var"(281647 call . state c"counts")
      (281653 'end of statement')
    }
    Forall {
      induction variables:
        
        unknown bin[281741] "index var" "insert auto destroy"
      iterated expressions:
        (281659 call #(281656 call chpl_build_low_bounded_range 0) nBuckets)
      shadow variables:
      other variables
        forall body
      {
        { scopeless
          unknown total[281662] 0
          (281665 'end of statement')
        }
        {
          unknown _indexOfInterest[281692] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[281693] "expr temp" "temp"
          (281702 'move' _iterator[281693](281700 call _getIterator(281709 call chpl_direct_counted_range_iter 0 nTasks)))
          Defer
          {
            {
              (281725 call _freeIterator _iterator[281693])
            }
          }
          { scopeless type
            (281714 'move' _indexOfInterest[281692](281711 call iteratorIndex _iterator[281693]))
          }
          ForLoop[281694]
          {
            unknown tid[281718] "index var" "insert auto destroy"
            (281720 'move' tid[281718] _indexOfInterest[281692])
            {
              (281688 call += total(281687 call(281676 call . state c"globalCounts")(281684 call +(281681 call * bin nTasks) tid)))
            }
            label _continueLabel[281697]
            _indexOfInterest[281692]
            _iterator[281693]
          }
          label _breakLabel[281698]
        }
        (281737 call =(281735 call counts bin) total)
      }
    }
  }
  function testBucketize[281752](arg start_n[281749] :
  int[13], arg end_n[281755] :
  int[13], arg dst[281761] :
  (281758 call chpl__buildArrayRuntimeType nil[44]), arg src[281767] :
  (281764 call chpl__buildArrayRuntimeType nil[44]), arg bucketizer[281770]:_any[178](?), arg criterion[281772]:_any[178](?), arg startbit[281775] :
  int[13]) : _unknown[51]
  {
    { scopeless
      unknown state[281784](281778 'new'(281783 call TwoArrayBucketizerSharedState(bucketizer = bucketizer)))
      (281787 'end of statement')
    }
    (281798 call bucketize start_n end_n dst src state criterion startbit)
    (281804 return(281801 call . state c"counts"))
  }
  function partitioningSortWithScratchSpaceHandleSampling[281814](arg start_n[281811] :
  int[13], arg end_n[281817] :
  int[13], arg A[281823] :
  (281820 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[281829] :
  (281826 call chpl__buildArrayRuntimeType nil[44]), ref arg state[281833] :
  TwoArrayBucketizerSharedState, arg criterion[281836]:_any[178](?), arg startbit[281839] :
  int[13]) : _unknown[51] "private"
  {
    if(282158 call _cond_test(281856 call isSubtype(281848 'typeof'(281845 call . state c"bucketizer"))(281853 call . SampleSortHelp c"SampleBucketizer")))
    {
      { scopeless
        unknown n[281864](281862 call -(281859 call + 1 end_n) start_n)
        (281867 'end of statement')
      }
      { scopeless
        unknown logNumBuckets[281878](281877 call(281872 call . SampleSortHelp c"computeLogBucketSize") n)
        (281881 'end of statement')
      }
      { scopeless
        unknown numBuckets[281886](281884 call << 1 logNumBuckets)
        (281889 'end of statement')
      }
      { scopeless
        unknown sampleStep[281900](281899 call(281893 call . SampleSortHelp c"chooseSampleStep") n logNumBuckets)
        (281903 'end of statement')
      }
      { scopeless
        unknown sampleSize[281911](281909 call -(281906 call * sampleStep numBuckets) 1)
        (281914 'end of statement')
      }
      if(281959 call _cond_test(281917 call >= sampleSize n))
      {
        if(281941 call _cond_test debug)
        {
          { scopeless
            (281939 call writeln "Reducing sample size because it was too big")
          }
        }
        (281956 call = sampleSize(281955 call max 1(281953 call / n 2)))
      }
      (281974 call(281966 call . SampleSortHelp c"putRandomSampleAtArrayStart") start_n end_n A sampleSize)
      if(281998 call _cond_test debug)
      {
        { scopeless
          (281996 call writeln "recursing to sort the sample")
        }
      }
      if(282053 call _cond_test(282008 call <= sampleSize(282006 call * 1024 1024)))
      {
        (282032 call msbRadixSort start_n(282018 call -(282015 call + start_n sampleSize) 1) A criterion startbit(282024 call . state c"endbit")(settings =(282027 'new'(282030 call MSBRadixSortSettings))))
      }
      {
        (282050 call partitioningSortWithScratchSpace start_n(282043 call -(282040 call + start_n sampleSize) 1) A Scratch state criterion startbit)
      }
      if(282079 call _cond_test debug)
      {
        (282076 call(282061 call . RadixSortHelp c"checkSorted") start_n(282071 call -(282068 call + start_n sampleSize) 1) A criterion startbit)
      }
      (282095 call createSplittersFromSample A(282087 call . state c"bucketizer") criterion start_n sampleSize sampleStep numBuckets)
      if(282154 call _cond_test debug)
      {
        (282121 call writeln "sample bucketizer "(282118 call . state c"bucketizer"))
        (282152 call writef "A %i %i A=%xt\n" start_n end_n(282151 call A(282148 call chpl_build_bounded_range start_n end_n)))
      }
    }
  }
  { scopeless type
    void[4]
  }
  function partitioningSortWithScratchSpace[282172](arg start_n[282169] :
  int[13], arg end_n[282175] :
  int[13], arg A[282181] :
  (282178 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[282187] :
  (282184 call chpl__buildArrayRuntimeType nil[44]), ref arg state[282191] :
  TwoArrayBucketizerSharedState, arg criterion[282194]:_any[178](?), arg startbit[282197] :
  int[13]) : _unknown[51]
  {
    if(282210 call _cond_test(282206 call > startbit(282203 call . state c"endbit")))
    {
      { scopeless
        (282208 return)
      }
    }
    if(282244 call _cond_test(282224 call <(282218 call - end_n start_n)(282221 call . state c"baseCaseSize")))
    {
      (282239 call(282229 call . ShellSort c"shellSort") A criterion(start = start_n)(end = end_n))
      (282242 return)
    }
    if(282289 call _cond_test debug)
    {
      (282272 call writeln "partitioningSortWithScratchSpace(" start_n "," end_n ")")
      (282287 call writef "A %i %i A=%xt\n" start_n end_n(282286 call A(282283 call chpl_build_bounded_range start_n end_n)))
    }
    { scopeless
      const n[282300] "const"(282298 call +(282295 call - end_n start_n) 1)
      (282303 'end of statement')
    }
    { scopeless
      const maxSequentialSize[282326] "const"(282325 call max(282310 call / n(282307 call . state c"nTasks"))(282323 call *(282314 call . state c"nTasks")(282320 call . state c"sequentialSizePerTask")))
      (282329 'end of statement')
    }
    (282351 call(282336 call .(282333 call . state c"bigTasks") c"append")(282339 'new'(282349 call TwoArraySortTask start_n n startbit(inA = 1)(doSort = 1))))
    (282365 call assert(282362 call ==(282358 call .(282355 call . state c"bigTasks") c"size") 1))
    (282381 call assert(282378 call ==(282374 call .(282371 call . state c"smallTasks") c"size") 0))
    {
      unknown tmp[283034] "temp"
      (283070 'move' tmp[283034](283059 call _cond_test(283061 call !(283069 call(283063 call .(283065 call . state c"bigTasks") c"isEmpty")))))
      WhileDo[283039]
      {
        {
          { scopeless
            const task[282405] "const"(282404 call(282400 call .(282395 call . state c"bigTasks") c"pop"))
            (282408 'end of statement')
          }
          { scopeless
            const taskEnd[282423] "const"(282421 call -(282418 call +(282411 call . task c"start")(282415 call . task c"size")) 1)
            (282426 'end of statement')
          }
          (282433 call assert(282429 call . task c"doSort"))
          if(282465 call _cond_test debug)
          {
            (282462 call writeln "doing big task "(282460 call chpl_build_bounded_range(282456 call . task c"start") taskEnd))
          }
          if(282627 call _cond_test(282470 call . task c"inA"))
          {
            (282488 call partitioningSortWithScratchSpaceHandleSampling(282475 call . task c"start") taskEnd A Scratch state criterion(282485 call . task c"startbit"))
            (282506 call bucketize(282493 call . task c"start") taskEnd Scratch A state criterion(282503 call . task c"startbit"))
            if(282546 call _cond_test debug)
            {
              (282543 call writef "pb %i %i Scratch=%xt\n"(282529 call . task c"start") taskEnd(282542 call Scratch(282539 call chpl_build_bounded_range(282535 call . task c"start") taskEnd)))
            }
          }
          {
            (282565 call partitioningSortWithScratchSpaceHandleSampling(282552 call . task c"start") taskEnd Scratch A state criterion(282562 call . task c"startbit"))
            (282583 call bucketize(282570 call . task c"start") taskEnd A Scratch state criterion(282580 call . task c"startbit"))
            if(282623 call _cond_test debug)
            {
              (282620 call writef "pb %i %i A=%xt\n"(282606 call . task c"start") taskEnd(282619 call A(282616 call chpl_build_bounded_range(282612 call . task c"start") taskEnd)))
            }
          }
          { scopeless
            const nowInA[282637] "const"(282635 call !(282632 call . task c"inA"))
            (282640 'end of statement')
          }
          (282692 call =(282644 call . state c"ends")(282690 call +(282685 'scan' function chpl__scan3[282652](arg chpl_toScan[282654]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
          {
            unknown chpl_eltType[282656] "maybe type" "temp"
            { scopeless type
              (282660 'move' chpl_eltType[282656](282662 'typeof'(282664 call chpl__initCopy(282666 call iteratorIndex(282668 call _getIterator chpl_toScan[282654])))))
            }
            const tmp[282657] "const" "temp"
            (282677 'move' tmp[282657](282676 'new'(282675 call SumReduceScanOp(eltType = chpl_eltType[282656])(_chpl_manager = unmanaged[220](?)))))
            (282679 return(282681 call chpl__scanIterator tmp[282657] chpl_toScan[282654]))
          }(282649 call . state c"counts"))(282687 call . task c"start")))
          { scopeless
            const nBuckets[282704] "const"(282703 call(282699 call .(282696 call . state c"bucketizer") c"getNumBuckets"))
            (282707 'end of statement')
          }
          {
            unknown _indexOfInterest[282994] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[282995] "expr temp" "temp"
            (283004 'move' _iterator[282995](283002 call _getIterator(283011 call chpl_direct_counted_range_iter 0 nBuckets)))
            Defer
            {
              {
                (283027 call _freeIterator _iterator[282995])
              }
            }
            { scopeless type
              (283016 'move' _indexOfInterest[282994](283013 call iteratorIndex _iterator[282995]))
            }
            ForLoop[282996]
            {
              unknown bin[283020] "index var" "insert auto destroy"
              (283022 'move' bin[283020] _indexOfInterest[282994])
              {
                { scopeless
                  const binSize[282722] "const"(282721 call(282716 call . state c"counts") bin)
                  (282725 'end of statement')
                }
                { scopeless
                  const binStart[282737] "const"(282735 call -(282733 call(282728 call . state c"ends") bin) binSize)
                  (282740 'end of statement')
                }
                { scopeless
                  const binEnd[282748] "const"(282746 call -(282743 call + binStart binSize) 1)
                  (282751 'end of statement')
                }
                { scopeless
                  const binStartBit[282767] "const"(282766 call(282758 call .(282753 call . state c"bucketizer") c"getNextStartBit")(282762 call . task c"startbit"))
                  (282770 'end of statement')
                }
                { scopeless
                  const sortit[282788] "const"(282787 call(282782 call .(282781 call(282777 call .(282772 call . state c"bucketizer") c"getBinsToRecursivelySort")) c"contains") bin)
                  (282791 'end of statement')
                }
                if(282989 call _cond_test(282794 call == binSize 0))
                {
                }
                {
                  { scopeless
                    if(282984 call _cond_test(282803 call &&(282798 call ! nowInA)(282801 call ! sortit)))
                    {
                      (282822 call(282809 call .(282806 call . state c"smallTasks") c"append")(282812 'new'(282820 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                    }
                    {
                      { scopeless
                        if(282980 call _cond_test(282842 call ||(282836 call ||(282830 call > binStartBit(282827 call . state c"endbit"))(282834 call >= binStart binEnd))(282840 call <= binSize maxSequentialSize)))
                        {
                          if(282896 call _cond_test(282849 call && debug(282847 call > binSize 0)))
                          {
                            (282893 call writeln "handling bin " bin " "(282874 call chpl_build_bounded_range binStart binEnd) " as small")
                          }
                          (282918 call(282905 call .(282902 call . state c"smallTasks") c"append")(282908 'new'(282916 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                        }
                        {
                          if(282956 call _cond_test(282925 call && debug(282923 call > binSize 0)))
                          {
                            (282953 call writeln "handling bin " bin " "(282934 call chpl_build_bounded_range binStart binEnd) " as big")
                          }
                          (282978 call(282965 call .(282962 call . state c"bigTasks") c"append")(282968 'new'(282976 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                        }
                      }
                    }
                  }
                }
              }
              label _continueLabel[282999]
              _indexOfInterest[282994]
              _iterator[282995]
            }
            label _breakLabel[283000]
          }
        }
        label _continueLabel[283037]
        (283054 'move' tmp[283034](283043 call _cond_test(283045 call !(283053 call(283047 call .(283049 call . state c"bigTasks") c"isEmpty")))))
        tmp[283034]
      }
      label _breakLabel[283038]
    }
    Forall {
      induction variables:
        
        unknown task[283217] "index var" "insert auto destroy"
      iterated expressions:
        (283075 call . state c"smallTasks")
      shadow variables:
      other variables
        forall body
      {
        { scopeless
          const size[283082] "const"(283079 call . task c"size")
          (283085 'end of statement')
        }
        { scopeless
          const taskEnd[283097] "const"(283095 call -(283092 call +(283088 call . task c"start") size) 1)
          (283100 'end of statement')
        }
        if(283212 call _cond_test(283103 call > size 0))
        {
          if(283130 call _cond_test(283109 call !(283106 call . task c"inA")))
          {
            (283127 call(283112 call . ShallowCopy c"shallowCopy") A(283118 call . task c"start") Scratch(283123 call . task c"start") size)
          }
          if(283173 call _cond_test debug)
          {
            (283170 call writef "doing small task %i %i A=%xt\n"(283156 call . task c"start") taskEnd(283169 call A(283166 call chpl_build_bounded_range(283162 call . task c"start") taskEnd)))
          }
          if(283208 call _cond_test(283178 call . task c"doSort"))
          {
            (283205 call msbRadixSort(283183 call . task c"start") taskEnd A criterion(283191 call . task c"startbit")(283195 call . state c"endbit")(settings =(283198 'new'(283203 call MSBRadixSortSettings(alwaysSerial = 1)))))
          }
        }
      }
    }
    if(283294 call _cond_test debug)
    {
      (283249 call writef "ps %i %i A=%xt\n" start_n end_n(283248 call A(283245 call chpl_build_bounded_range start_n end_n)))
      (283280 call writef "ps %i %i Scratch=%xt\n" start_n end_n(283279 call Scratch(283276 call chpl_build_bounded_range start_n end_n)))
      (283292 call(283283 call . RadixSortHelp c"checkSorted") start_n end_n A criterion startbit)
    }
  }
  { scopeless type
    void[4]
  }
  function distributedPartitioningSortWithScratchSpaceBaseCase[283307](arg start_n[283304] :
  int[13], arg end_n[283310] :
  int[13], arg A[283316] :
  (283313 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283322] :
  (283319 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283326] :
  TwoArrayDistributedBucketizerSharedState, arg criterion[283329]:_any[178](?), arg startbit[283332] :
  int[13]) : _unknown[51] "private"
  {
    if(283345 call _cond_test(283341 call > startbit(283338 call . state c"endbit")))
    {
      { scopeless
        (283343 return)
      }
    }
    { scopeless
      const n[283358] "const"(283356 call +(283353 call - end_n start_n) 1)
      (283361 'end of statement')
    }
    { scopeless
      const localSubdomain[283370] "const"(283369 call(283365 call . A c"localSubdomain"))
      (283373 'end of statement')
    }
    { scopeless
      const curDomain[283381] "const"(283379 call chpl__buildDomainExpr(283376 call chpl_build_bounded_range start_n end_n))
      (283384 'end of statement')
    }
    { scopeless
      const intersect[283389] "const"(283388 call curDomain localSubdomain)
      (283392 'end of statement')
    }
    if(283553 call _cond_test(283395 call == curDomain intersect))
    {
      if(283451 call _cond_test(283402 call > n(283399 call . state c"baseCaseSize")))
      {
        (283428 call msbRadixSort start_n end_n(283416 call(283411 call . A c"localSlice") curDomain) criterion startbit(283420 call . state c"endbit")(settings =(283423 'new'(283426 call MSBRadixSortSettings))))
      }
      {
        (283448 call(283432 call . ShellSort c"shellSort")(283441 call(283436 call . A c"localSlice") curDomain) criterion(start = start_n)(end = end_n))
      }
    }
    {
      { scopeless
        const size[283463] "const"(283461 call +(283458 call - end_n start_n) 1)
        (283466 'end of statement')
      }
      { scopeless
        unknown LocalA[283481](283479 call chpl__buildArrayRuntimeType(283477 call chpl__ensureDomainExpr(283470 call chpl_build_bounded_range start_n end_n))(283474 call . A c"eltType"))
        (283484 'end of statement')
      }
      (283495 call(283486 call . ShallowCopy c"shallowCopy") LocalA start_n A start_n size)
      if(283537 call _cond_test(283502 call > n(283499 call . state c"baseCaseSize")))
      {
        (283520 call msbRadixSort start_n end_n LocalA criterion startbit(283512 call . state c"endbit")(settings =(283515 'new'(283518 call MSBRadixSortSettings))))
      }
      {
        (283534 call(283524 call . ShellSort c"shellSort") LocalA criterion(start = start_n)(end = end_n))
      }
      (283551 call(283542 call . ShallowCopy c"shallowCopy") A start_n LocalA start_n size)
    }
    if(283570 call _cond_test debug)
    {
      (283567 call(283559 call . RadixSortHelp c"checkSorted") start_n end_n A criterion)
    }
    (283574 return)
  }
  { scopeless type
    void[4]
  }
  function distributedPartitioningSortWithScratchSpaceHandleSampling[283585](arg start_n[283582] :
  int[13], arg end_n[283588] :
  int[13], arg A[283594] :
  (283591 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283600] :
  (283597 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283604] :
  TwoArrayDistributedBucketizerSharedState, arg criterion[283607]:_any[178](?), arg startbit[283610] :
  int[13]) : _unknown[51] "private"
  {
    if(283952 call _cond_test(283636 call isSubtype(283630 'typeof'(283627 call .(283624 call .(283623 call(283618 call . state c"perLocale") 0) c"compat") c"bucketizer"))(283633 call . SampleSortHelp c"SampleBucketizer")))
    {
      { scopeless
        unknown n[283644](283642 call -(283639 call + 1 end_n) start_n)
        (283647 'end of statement')
      }
      { scopeless
        unknown logNumBuckets[283656](283655 call(283650 call . SampleSortHelp c"computeLogBucketSize") n)
        (283659 'end of statement')
      }
      { scopeless
        unknown numBuckets[283664](283662 call << 1 logNumBuckets)
        (283667 'end of statement')
      }
      { scopeless
        unknown sampleStep[283676](283675 call(283669 call . SampleSortHelp c"chooseSampleStep") n logNumBuckets)
        (283679 'end of statement')
      }
      { scopeless
        unknown sampleSize[283687](283685 call -(283682 call * sampleStep numBuckets) 1)
        (283690 'end of statement')
      }
      if(283719 call _cond_test(283693 call >= sampleSize n))
      {
        if(283701 call _cond_test debug)
        {
          { scopeless
            (283699 call writeln "Reducing sample size because it was too big")
          }
        }
        (283716 call = sampleSize(283715 call max 1(283713 call / n 2)))
      }
      (283732 call(283724 call . SampleSortHelp c"putRandomSampleAtArrayStart") start_n end_n A sampleSize)
      if(283740 call _cond_test debug)
      {
        { scopeless
          (283738 call writeln "recursing to sort the sample")
        }
      }
      if(283788 call _cond_test(283750 call <= sampleSize(283748 call * 1024 1024)))
      {
        (283767 call distributedPartitioningSortWithScratchSpaceBaseCase start_n(283760 call -(283757 call + start_n sampleSize) 1) A Scratch state criterion startbit)
      }
      {
        (283785 call distributedPartitioningSortWithScratchSpace start_n(283778 call -(283775 call + start_n sampleSize) 1) A Scratch state criterion startbit)
      }
      if(283812 call _cond_test debug)
      {
        (283809 call(283794 call . RadixSortHelp c"checkSorted") start_n(283804 call -(283801 call + start_n sampleSize) 1) A criterion startbit)
      }
      (283837 call createSplittersFromSample A(283829 call .(283826 call .(283825 call(283820 call . state c"perLocale") 0) c"compat") c"bucketizer") criterion start_n sampleSize sampleStep numBuckets)
      if(283873 call _cond_test debug)
      {
        (283856 call writeln "sample bucketizer "(283853 call .(283850 call .(283849 call(283844 call . state c"perLocale") 0) c"compat") c"bucketizer"))
        (283871 call writef "A %i %i A=%xt\n" start_n end_n(283870 call A(283867 call chpl_build_bounded_range start_n end_n)))
      }
      {
        unknown _indexOfInterest[283911] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[283912] "expr temp" "temp"
        (283921 'move' _iterator[283912](283919 call _getIterator(283929 call chpl_direct_range_iter 1(283926 call . state c"numLocales") 1)))
        Defer
        {
          {
            (283945 call _freeIterator _iterator[283912])
          }
        }
        { scopeless type
          (283934 'move' _indexOfInterest[283911](283931 call iteratorIndex _iterator[283912]))
        }
        ForLoop[283913]
        {
          unknown lid[283938] "index var" "insert auto destroy"
          (283940 'move' lid[283938] _indexOfInterest[283911])
          {
            (283907 call =(283894 call .(283893 call(283888 call . state c"perLocale") lid) c"bucketizer")(283904 call .(283903 call(283898 call . state c"perLocale") 0) c"bucketizer"))
          }
          label _continueLabel[283916]
          _indexOfInterest[283911]
          _iterator[283912]
        }
        label _breakLabel[283917]
      }
    }
  }
  { scopeless type
    void[4]
  }
  function distributedPartitioningSortWithScratchSpace[283966](arg start_n[283963] :
  int[13], arg end_n[283969] :
  int[13], arg A[283975] :
  (283972 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283981] :
  (283978 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283985] :
  TwoArrayDistributedBucketizerSharedState, arg criterion[283988]:_any[178](?), arg startbit[283991] :
  int[13]) : _unknown[51]
  {
    if(284027 call _cond_test(284003 call !(284002 call(283998 call . A c"hasSingleLocalSubdomain"))))
    {
      (284024 call compilerError "distributedPartitioningSortWithScratchSpace needs single local subdomain")
    }
    if(284041 call _cond_test(284037 call > startbit(284034 call . state c"endbit")))
    {
      { scopeless
        (284039 return)
      }
    }
    if(284070 call _cond_test(284054 call <(284048 call - end_n start_n)(284051 call . state c"baseCaseSize")))
    {
      (284065 call distributedPartitioningSortWithScratchSpaceBaseCase start_n end_n A Scratch state criterion startbit)
      (284068 return)
    }
    if(284139 call _cond_test debug)
    {
      (284136 call writeln "in distributed radix sort " start_n ".." end_n " startbit " startbit " endbit "(284133 call . state c"endbit"))
    }
    { scopeless
      const n[284150] "const"(284148 call +(284145 call - end_n start_n) 1)
      (284153 'end of statement')
    }
    (284173 call(284160 call .(284157 call . state c"distTasks") c"append")(284163 'new'(284171 call TwoArraySortTask start_n n startbit 1 1)))
    (284187 call assert(284184 call ==(284180 call .(284177 call . state c"distTasks") c"size") 1))
    {
      unknown tmp[286811] "temp"
      (286847 'move' tmp[286811](286836 call _cond_test(286838 call !(286846 call(286840 call .(286842 call . state c"distTasks") c"isEmpty")))))
      WhileDo[286816]
      {
        {
          { scopeless
            const task[284209] "const"(284208 call(284204 call .(284201 call . state c"distTasks") c"pop"))
            (284212 'end of statement')
          }
          { scopeless
            const taskStart[284218] "const"(284215 call . task c"start")
            (284221 'end of statement')
          }
          { scopeless
            const taskEnd[284235] "const"(284233 call -(284230 call +(284223 call . task c"start")(284227 call . task c"size")) 1)
            (284238 'end of statement')
          }
          (284245 call assert(284241 call . task c"doSort"))
          (284253 call assert(284249 call . task c"inA"))
          (284270 call distributedPartitioningSortWithScratchSpaceHandleSampling(284257 call . task c"start") taskEnd A Scratch state criterion(284267 call . task c"startbit"))
          { scopeless
            const nBuckets[284290] "const"(284289 call(284285 call .(284282 call .(284279 call .(284278 call(284273 call . state c"perLocale") 0) c"compat") c"bucketizer") c"getNumBuckets"))
            (284293 'end of statement')
          }
          { scopeless
            const nTasks[284298] "const"(284295 call . state c"numLocales")
            (284301 'end of statement')
          }
          {
            unknown tmpIter[284634] "expr temp" "maybe ref" "no copy" "temp"
            (284637 'move' tmpIter[284634](284319 call _build_tuple(284314 call(284310 call . A c"targetLocales"))(284317 call chpl_build_low_bounded_range 0)))
            unknown isRngDomArr[285034] "maybe param" "temp"
            (285049 'move' isRngDomArr[285034](285047 call ||(285036 call isBoundedRange tmpIter[284634])(285045 call ||(285039 call isDomain tmpIter[284634])(285042 call isArray tmpIter[284634]))))
            if isRngDomArr[285034]
            {
              const _coforallCount[284878] "const" "end count" "temp"
              (284957 'move' _coforallCount[284878](284954 call _endCountAlloc 0))
              unknown numTasks[284879] "temp"
              (284941 'move' numTasks[284879](284937 call . tmpIter[284634] c"size"))
              (284932 call _upEndCount _coforallCount[284878] 0 numTasks[284879])
              unknown _indexOfInterest[284885] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[284886] "expr temp" "temp"
              (284895 'move' _iterator[284886](284893 call _getIteratorZip tmpIter[284634]))
              Defer
              {
                {
                  (284925 call _freeIterator _iterator[284886])
                }
              }
              { scopeless type
                (284900 'move' _indexOfInterest[284885](284897 call iteratorIndex _iterator[284886]))
              }
              ForLoop[284887]
              {
                (284905 call _check_tuple_var_decl _indexOfInterest[284885] 2)
                unknown loc[284911] "coforall index var" "index var" "insert auto destroy"
                (284913 'move' loc[284911](284909 call _indexOfInterest[284885] 0))
                unknown tid[284918] "coforall index var" "index var" "insert auto destroy"
                (284920 'move' tid[284918](284916 call _indexOfInterest[284885] 1))
                { scopeless
                  { scopeless
                    const tmp[284643] "const" "temp"
                    (284645 'move' tmp[284643](284647 'deref'(284648 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const localDomain[284656] "const"(284662 call(284661 call(284658 call . A c"localSubdomain"))(284664 call chpl_build_bounded_range(284666 call . task c"start") taskEnd))
                          (284671 'end of statement')
                        }
                        { scopeless
                          unknown localSrc[284673] "ref var"(284678 call(284675 call . A c"localSlice") localDomain)
                          (284681 'end of statement')
                        }
                        { scopeless
                          unknown localDst[284683] "ref var"(284688 call(284685 call . Scratch c"localSlice") localDomain)
                          (284691 'end of statement')
                        }
                        (284693 call bucketize(284695 call . localDomain c"alignedLow")(284699 call . localDomain c"alignedHigh") localDst localSrc(284705 call .(284710 call(284707 call . state c"perLocale") tid) c"compat") criterion(284715 call . task c"startbit"))
                        { scopeless
                          unknown localCounts[284719] "ref var"(284721 call .(284723 call .(284728 call(284725 call . state c"perLocale") tid) c"compat") c"counts")
                          (284733 'end of statement')
                        }
                        if(284735 call _cond_test debug)
                        {
                          { scopeless
                            unknown total[284739] 0
                            (284742 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[284744] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[284746] "expr temp" "temp"
                            (284748 'move' _iterator[284746](284751 call _getIterator(284753 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (284758 call _freeIterator _iterator[284746])
                              }
                            }
                            { scopeless type
                              (284762 'move' _indexOfInterest[284744](284765 call iteratorIndex _iterator[284746]))
                            }
                            ForLoop[284767]
                            {
                              unknown bin[284770] "index var" "insert auto destroy"
                              (284772 'move' bin[284770] _indexOfInterest[284744])
                              {
                                if(284777 call _cond_test(284779 call >(284781 call localCounts bin) 0))
                                {
                                  (284786 call writeln "localCounts[" bin "]="(284791 call localCounts bin))
                                  (284794 call += total(284797 call localCounts bin))
                                }
                              }
                              label _continueLabel[284800]
                              _indexOfInterest[284744]
                              _iterator[284746]
                            }
                            label _breakLabel[284802]
                          }
                          (284805 call assert(284807 call == total(284810 call . localDomain c"size")))
                        }
                        {
                          unknown _indexOfInterest[284815] "an _indexOfInterest or chpl__followIdx variable" "temp"
                          unknown _iterator[284817] "expr temp" "temp"
                          (284819 'move' _iterator[284817](284822 call _getIterator(284824 call vectorizeOnly(284826 call #(284828 call chpl_build_low_bounded_range 0) nBuckets))))
                          Defer
                          {
                            {
                              (284833 call _freeIterator _iterator[284817])
                            }
                          }
                          { scopeless type
                            (284837 'move' _indexOfInterest[284815](284840 call iteratorIndex _iterator[284817]))
                          }
                          ForLoop[284842]
                          {
                            unknown bin[284845] "index var" "insert auto destroy"
                            (284847 'move' bin[284845] _indexOfInterest[284815])
                            {
                              (284852 call =(284862 call(284854 call .(284859 call(284856 call . state c"perLocale") 0) c"globalCounts")(284864 call +(284866 call * bin nTasks) tid))(284871 call localCounts bin))
                            }
                            label _continueLabel[284873]
                            _indexOfInterest[284815]
                            _iterator[284817]
                          }
                          label _breakLabel[284875]
                        }
                      }
                      (284880 call _downEndCount _coforallCount[284878] nil[44])
                      (284651 'coforall on block' 0 tmp[284643])
                      (284639 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[284890]
                _indexOfInterest[284885]
                _iterator[284886]
              }
              label _breakLabel[284891]
              Defer
              {
                {
                  (284944 call _endCountFree _coforallCount[284878])
                }
              }
              (284949 call _waitEndCount _coforallCount[284878] 0 numTasks[284879])
            }
            {
              const _coforallCount[284961] "const" "end count" "temp"
              (285031 'move' _coforallCount[284961](285028 call _endCountAlloc 0))
              unknown _indexOfInterest[284968] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[284969] "expr temp" "temp"
              (284978 'move' _iterator[284969](284976 call _getIteratorZip tmpIter[284634]))
              Defer
              {
                {
                  (285008 call _freeIterator _iterator[284969])
                }
              }
              { scopeless type
                (284983 'move' _indexOfInterest[284968](284980 call iteratorIndex _iterator[284969]))
              }
              ForLoop[284970]
              {
                (284988 call _check_tuple_var_decl _indexOfInterest[284968] 2)
                unknown loc[284994] "coforall index var" "index var" "insert auto destroy"
                (284996 'move' loc[284994](284992 call _indexOfInterest[284968] 0))
                unknown tid[285001] "coforall index var" "index var" "insert auto destroy"
                (285003 'move' tid[285001](284999 call _indexOfInterest[284968] 1))
                (285015 call _upEndCount _coforallCount[284961] 0)
                { scopeless
                  { scopeless
                    const tmp[284624] "const" "temp"
                    (284626 'move' tmp[284624](284622 'deref'(284621 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const localDomain[284344] "const"(284343 call(284334 call(284330 call . A c"localSubdomain"))(284340 call chpl_build_bounded_range(284336 call . task c"start") taskEnd))
                          (284347 'end of statement')
                        }
                        { scopeless
                          unknown localSrc[284356] "ref var"(284355 call(284350 call . A c"localSlice") localDomain)
                          (284359 'end of statement')
                        }
                        { scopeless
                          unknown localDst[284367] "ref var"(284366 call(284361 call . Scratch c"localSlice") localDomain)
                          (284370 'end of statement')
                        }
                        (284398 call bucketize(284373 call . localDomain c"alignedLow")(284378 call . localDomain c"alignedHigh") localDst localSrc(284390 call .(284389 call(284384 call . state c"perLocale") tid) c"compat") criterion(284395 call . task c"startbit"))
                        { scopeless
                          unknown localCounts[284413] "ref var"(284410 call .(284407 call .(284406 call(284401 call . state c"perLocale") tid) c"compat") c"counts")
                          (284416 'end of statement')
                        }
                        if(284546 call _cond_test debug)
                        {
                          { scopeless
                            unknown total[284419] 0
                            (284422 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[284495] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[284496] "expr temp" "temp"
                            (284505 'move' _iterator[284496](284503 call _getIterator(284512 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (284528 call _freeIterator _iterator[284496])
                              }
                            }
                            { scopeless type
                              (284517 'move' _indexOfInterest[284495](284514 call iteratorIndex _iterator[284496]))
                            }
                            ForLoop[284497]
                            {
                              unknown bin[284521] "index var" "insert auto destroy"
                              (284523 'move' bin[284521] _indexOfInterest[284495])
                              {
                                if(284490 call _cond_test(284436 call >(284434 call localCounts bin) 0))
                                {
                                  (284479 call writeln "localCounts[" bin "]="(284478 call localCounts bin))
                                  (284487 call += total(284486 call localCounts bin))
                                }
                              }
                              label _continueLabel[284500]
                              _indexOfInterest[284495]
                              _iterator[284496]
                            }
                            label _breakLabel[284501]
                          }
                          (284544 call assert(284541 call == total(284538 call . localDomain c"size")))
                        }
                        {
                          unknown _indexOfInterest[284587] "an _indexOfInterest or chpl__followIdx variable" "temp"
                          unknown _iterator[284588] "expr temp" "temp"
                          (284597 'move' _iterator[284588](284595 call _getIterator(284559 call vectorizeOnly(284556 call #(284553 call chpl_build_low_bounded_range 0) nBuckets))))
                          Defer
                          {
                            {
                              (284614 call _freeIterator _iterator[284588])
                            }
                          }
                          { scopeless type
                            (284603 'move' _indexOfInterest[284587](284600 call iteratorIndex _iterator[284588]))
                          }
                          ForLoop[284589]
                          {
                            unknown bin[284607] "index var" "insert auto destroy"
                            (284609 'move' bin[284607] _indexOfInterest[284587])
                            {
                              (284583 call =(284578 call(284567 call .(284566 call(284561 call . state c"perLocale") 0) c"globalCounts")(284575 call +(284572 call * bin nTasks) tid))(284582 call localCounts bin))
                            }
                            label _continueLabel[284592]
                            _indexOfInterest[284587]
                            _iterator[284588]
                          }
                          label _breakLabel[284593]
                        }
                      }
                      (284963 call _downEndCount _coforallCount[284961] nil[44])
                      (284629 'coforall on block' 0 tmp[284624])
                      (284325 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[284973]
                _indexOfInterest[284968]
                _iterator[284969]
              }
              label _breakLabel[284974]
              Defer
              {
                {
                  (285019 call _endCountFree _coforallCount[284961])
                }
              }
              (285024 call _waitEndCount _coforallCount[284961] 0)
            }
          }
          if(285086 call _cond_test debug)
          {
            (285083 call writef "after bucketize local portions, Scratch is %xt\n"(285082 call Scratch(285079 call chpl_build_bounded_range(285075 call . task c"start") taskEnd)))
          }
          (285151 call =(285097 call .(285096 call(285091 call . state c"perLocale") 0) c"globalEnds")(285149 call +(285144 'scan' function chpl__scan4[285111](arg chpl_toScan[285113]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
          {
            unknown chpl_eltType[285115] "maybe type" "temp"
            { scopeless type
              (285119 'move' chpl_eltType[285115](285121 'typeof'(285123 call chpl__initCopy(285125 call iteratorIndex(285127 call _getIterator chpl_toScan[285113])))))
            }
            const tmp[285116] "const" "temp"
            (285136 'move' tmp[285116](285135 'new'(285134 call SumReduceScanOp(eltType = chpl_eltType[285115])(_chpl_manager = unmanaged[220](?)))))
            (285138 return(285140 call chpl__scanIterator tmp[285116] chpl_toScan[285113]))
          }(285108 call .(285107 call(285102 call . state c"perLocale") 0) c"globalCounts"))(285146 call . task c"start")))
          Forall {
            induction variables:
              
              unknown loc[285233] "index var" "insert auto destroy"
              
              unknown tid[285235] "index var" "insert auto destroy"
            iterated expressions:
              (285164 call(285160 call . A c"targetLocales"))
              (285167 call chpl_build_low_bounded_range 0)
            shadow variables:
              state[285171] 'ref' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              if(285227 call _cond_test(285178 call != tid 0))
              {
                (285200 call =(285187 call .(285186 call(285181 call . state c"perLocale") tid) c"globalCounts")(285197 call .(285196 call(285191 call . state c"perLocale") 0) c"globalCounts"))
                (285224 call =(285211 call .(285210 call(285205 call . state c"perLocale") tid) c"globalEnds")(285221 call .(285220 call(285215 call . state c"perLocale") 0) c"globalEnds"))
              }
            }
          }
          if(285420 call _cond_test debug)
          {
            { scopeless
              unknown total[285240] 0
              (285243 'end of statement')
            }
            {
              unknown _indexOfInterest[285366] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[285367] "expr temp" "temp"
              (285376 'move' _iterator[285367](285374 call _getIterator(285386 call chpl_direct_counted_range_iter 0(285382 call . state c"countsSize"))))
              Defer
              {
                {
                  (285402 call _freeIterator _iterator[285367])
                }
              }
              { scopeless type
                (285391 'move' _indexOfInterest[285366](285388 call iteratorIndex _iterator[285367]))
              }
              ForLoop[285368]
              {
                unknown i[285395] "index var" "insert auto destroy"
                (285397 'move' i[285395] _indexOfInterest[285366])
                {
                  if(285361 call _cond_test(285269 call !=(285267 call(285262 call .(285261 call(285256 call . state c"perLocale") 0) c"globalCounts") i) 0))
                  {
                    (285285 call += total(285284 call(285279 call .(285278 call(285273 call . state c"perLocale") 0) c"globalCounts") i))
                    (285323 call writeln "state.globalCounts[" i "]="(285322 call(285317 call .(285316 call(285311 call . state c"perLocale") 0) c"globalCounts") i))
                    (285359 call writeln "state.globalEnds[" i "]="(285358 call(285353 call .(285352 call(285347 call . state c"perLocale") 0) c"globalEnds") i))
                  }
                }
                label _continueLabel[285371]
                _indexOfInterest[285366]
                _iterator[285367]
              }
              label _breakLabel[285372]
            }
            (285418 call assert(285415 call == total(285412 call . task c"size")))
          }
          {
            unknown tmpIter[285898] "expr temp" "maybe ref" "no copy" "temp"
            (285901 'move' tmpIter[285898](285439 call _build_tuple(285434 call(285430 call . A c"targetLocales"))(285437 call chpl_build_low_bounded_range 0)))
            unknown isRngDomArr[286389] "maybe param" "temp"
            (286404 'move' isRngDomArr[286389](286402 call ||(286391 call isBoundedRange tmpIter[285898])(286400 call ||(286394 call isDomain tmpIter[285898])(286397 call isArray tmpIter[285898]))))
            if isRngDomArr[286389]
            {
              const _coforallCount[286233] "const" "end count" "temp"
              (286312 'move' _coforallCount[286233](286309 call _endCountAlloc 0))
              unknown numTasks[286234] "temp"
              (286296 'move' numTasks[286234](286292 call . tmpIter[285898] c"size"))
              (286287 call _upEndCount _coforallCount[286233] 0 numTasks[286234])
              unknown _indexOfInterest[286240] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[286241] "expr temp" "temp"
              (286250 'move' _iterator[286241](286248 call _getIteratorZip tmpIter[285898]))
              Defer
              {
                {
                  (286280 call _freeIterator _iterator[286241])
                }
              }
              { scopeless type
                (286255 'move' _indexOfInterest[286240](286252 call iteratorIndex _iterator[286241]))
              }
              ForLoop[286242]
              {
                (286260 call _check_tuple_var_decl _indexOfInterest[286240] 2)
                unknown loc[286266] "coforall index var" "index var" "insert auto destroy"
                (286268 'move' loc[286266](286264 call _indexOfInterest[286240] 0))
                unknown tid[286273] "coforall index var" "index var" "insert auto destroy"
                (286275 'move' tid[286273](286271 call _indexOfInterest[286240] 1))
                { scopeless
                  { scopeless
                    const tmp[285907] "const" "temp"
                    (285909 'move' tmp[285907](285911 'deref'(285912 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const globalCounts[285920] "const" "ref var"(285922 call .(285927 call(285924 call . state c"perLocale") tid) c"globalCounts")
                          (285931 'end of statement')
                        }
                        { scopeless
                          const globalEnds[285933] "const" "ref var"(285935 call .(285940 call(285937 call . state c"perLocale") tid) c"globalEnds")
                          (285944 'end of statement')
                        }
                        { scopeless
                          const localSubdomain[285946] "const"(285952 call(285951 call(285948 call . A c"localSubdomain"))(285954 call chpl_build_bounded_range(285956 call . task c"start") taskEnd))
                          (285961 'end of statement')
                        }
                        { scopeless
                          unknown localOffsets[285963] "ref var"(285965 call .(285967 call .(285972 call(285969 call . state c"perLocale") tid) c"compat") c"counts")
                          (285977 'end of statement')
                        }
                        {
                          { scopeless
                            unknown offset[285980](285982 call . localSubdomain c"low")
                            (285986 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[285988] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[285990] "expr temp" "temp"
                            (285992 'move' _iterator[285990](285995 call _getIterator(285997 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (286002 call _freeIterator _iterator[285990])
                              }
                            }
                            { scopeless type
                              (286006 'move' _indexOfInterest[285988](286009 call iteratorIndex _iterator[285990]))
                            }
                            ForLoop[286011]
                            {
                              unknown bin[286014] "index var" "insert auto destroy"
                              (286016 'move' bin[286014] _indexOfInterest[285988])
                              {
                                (286021 call =(286023 call localOffsets bin) offset)
                                (286027 call += offset(286030 call globalCounts(286032 call +(286034 call * bin nTasks) tid)))
                              }
                              label _continueLabel[286038]
                              _indexOfInterest[285988]
                              _iterator[285990]
                            }
                            label _breakLabel[286040]
                          }
                        }
                        Forall {
                          induction variables:
                            
                            unknown bin[286224] "index var" "insert auto destroy"
                          iterated expressions:
                            (286227 call #(286229 call chpl_build_low_bounded_range 0) nBuckets)
                          shadow variables:
                          other variables
                            forall body
                          {
                            { scopeless
                              unknown size[286044](286046 call globalCounts(286048 call +(286050 call * bin nTasks) tid))
                              (286055 'end of statement')
                            }
                            if(286057 call _cond_test(286059 call > size 0))
                            {
                              { scopeless
                                unknown localStart[286064](286066 call localOffsets bin)
                                (286069 'end of statement')
                              }
                              { scopeless
                                unknown localEnd[286071](286073 call -(286075 call + localStart size) 1)
                                (286080 'end of statement')
                              }
                              { scopeless
                                unknown globalStart[286082](286108 IfExpr (286084 call >(286086 call +(286088 call * bin nTasks) tid) 0) then
                                { scopeless
                                  (286095 call globalEnds(286097 call -(286099 call +(286101 call * bin nTasks) tid) 1))
                                } else
                                { scopeless
                                  taskStart
                                } )
                                (286110 'end of statement')
                              }
                              { scopeless
                                unknown globalEnd[286112](286114 call -(286116 call globalEnds(286118 call +(286120 call * bin nTasks) tid)) 1)
                                (286126 'end of statement')
                              }
                              if(286128 call _cond_test debug)
                              {
                                (286132 call writeln "bin " bin " tid " tid " range "(286139 call chpl_build_bounded_range taskStart taskEnd) " A[" globalStart ".." globalEnd "] = Scratch[" localStart ".." localEnd "]")
                                (286152 call assert(286154 call ==(286156 call globalCounts(286158 call +(286160 call * bin nTasks) tid))(286173 call(286165 call .(286170 call(286167 call . state c"perLocale") 0) c"globalCounts")(286175 call +(286177 call * bin nTasks) tid))))
                                (286182 call assert(286184 call ==(286186 call globalEnds(286188 call +(286190 call * bin nTasks) tid))(286203 call(286195 call .(286200 call(286197 call . state c"perLocale") 0) c"globalEnds")(286205 call +(286207 call * bin nTasks) tid))))
                              }
                              (286216 call(286213 call . ShallowCopy c"shallowCopy") A globalStart Scratch localStart size)
                            }
                          }
                        }
                      }
                      (286235 call _downEndCount _coforallCount[286233] nil[44])
                      (285915 'coforall on block' 0 tmp[285907])
                      (285903 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[286245]
                _indexOfInterest[286240]
                _iterator[286241]
              }
              label _breakLabel[286246]
              Defer
              {
                {
                  (286299 call _endCountFree _coforallCount[286233])
                }
              }
              (286304 call _waitEndCount _coforallCount[286233] 0 numTasks[286234])
            }
            {
              const _coforallCount[286316] "const" "end count" "temp"
              (286386 'move' _coforallCount[286316](286383 call _endCountAlloc 0))
              unknown _indexOfInterest[286323] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[286324] "expr temp" "temp"
              (286333 'move' _iterator[286324](286331 call _getIteratorZip tmpIter[285898]))
              Defer
              {
                {
                  (286363 call _freeIterator _iterator[286324])
                }
              }
              { scopeless type
                (286338 'move' _indexOfInterest[286323](286335 call iteratorIndex _iterator[286324]))
              }
              ForLoop[286325]
              {
                (286343 call _check_tuple_var_decl _indexOfInterest[286323] 2)
                unknown loc[286349] "coforall index var" "index var" "insert auto destroy"
                (286351 'move' loc[286349](286347 call _indexOfInterest[286323] 0))
                unknown tid[286356] "coforall index var" "index var" "insert auto destroy"
                (286358 'move' tid[286356](286354 call _indexOfInterest[286323] 1))
                (286370 call _upEndCount _coforallCount[286316] 0)
                { scopeless
                  { scopeless
                    const tmp[285888] "const" "temp"
                    (285890 'move' tmp[285888](285886 'deref'(285885 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const globalCounts[285459] "const" "ref var"(285456 call .(285455 call(285450 call . state c"perLocale") tid) c"globalCounts")
                          (285462 'end of statement')
                        }
                        { scopeless
                          const globalEnds[285474] "const" "ref var"(285471 call .(285470 call(285465 call . state c"perLocale") tid) c"globalEnds")
                          (285477 'end of statement')
                        }
                        { scopeless
                          const localSubdomain[285493] "const"(285492 call(285483 call(285479 call . A c"localSubdomain"))(285489 call chpl_build_bounded_range(285485 call . task c"start") taskEnd))
                          (285496 'end of statement')
                        }
                        { scopeless
                          unknown localOffsets[285510] "ref var"(285507 call .(285504 call .(285503 call(285498 call . state c"perLocale") tid) c"compat") c"counts")
                          (285513 'end of statement')
                        }
                        {
                          { scopeless
                            unknown offset[285518](285515 call . localSubdomain c"low")
                            (285521 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[285553] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[285554] "expr temp" "temp"
                            (285563 'move' _iterator[285554](285561 call _getIterator(285570 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (285586 call _freeIterator _iterator[285554])
                              }
                            }
                            { scopeless type
                              (285575 'move' _indexOfInterest[285553](285572 call iteratorIndex _iterator[285554]))
                            }
                            ForLoop[285555]
                            {
                              unknown bin[285579] "index var" "insert auto destroy"
                              (285581 'move' bin[285579] _indexOfInterest[285553])
                              {
                                (285535 call =(285533 call localOffsets bin) offset)
                                (285550 call += offset(285549 call globalCounts(285546 call +(285543 call * bin nTasks) tid)))
                              }
                              label _continueLabel[285558]
                              _indexOfInterest[285553]
                              _iterator[285554]
                            }
                            label _breakLabel[285559]
                          }
                        }
                        Forall {
                          induction variables:
                            
                            unknown bin[285882] "index var" "insert auto destroy"
                          iterated expressions:
                            (285598 call #(285595 call chpl_build_low_bounded_range 0) nBuckets)
                          shadow variables:
                          other variables
                            forall body
                          {
                            { scopeless
                              unknown size[285610](285609 call globalCounts(285606 call +(285603 call * bin nTasks) tid))
                              (285613 'end of statement')
                            }
                            if(285877 call _cond_test(285617 call > size 0))
                            {
                              { scopeless
                                unknown localStart[285623](285622 call localOffsets bin)
                                (285626 'end of statement')
                              }
                              { scopeless
                                unknown localEnd[285635](285633 call -(285630 call + localStart size) 1)
                                (285638 'end of statement')
                              }
                              { scopeless
                                unknown globalStart[285666](285663 IfExpr (285647 call >(285644 call +(285641 call * bin nTasks) tid) 0) then
                                { scopeless
                                  (285661 call globalEnds(285658 call -(285655 call +(285652 call * bin nTasks) tid) 1))
                                } else
                                { scopeless
                                  taskStart
                                } )
                                (285669 'end of statement')
                              }
                              { scopeless
                                unknown globalEnd[285683](285681 call -(285679 call globalEnds(285676 call +(285673 call * bin nTasks) tid)) 1)
                                (285686 'end of statement')
                              }
                              if(285861 call _cond_test debug)
                              {
                                (285788 call writeln "bin " bin " tid " tid " range "(285745 call chpl_build_bounded_range taskStart taskEnd) " A[" globalStart ".." globalEnd "] = Scratch[" localStart ".." localEnd "]")
                                (285824 call assert(285821 call ==(285801 call globalCounts(285798 call +(285795 call * bin nTasks) tid))(285820 call(285809 call .(285808 call(285803 call . state c"perLocale") 0) c"globalCounts")(285817 call +(285814 call * bin nTasks) tid))))
                                (285859 call assert(285856 call ==(285836 call globalEnds(285833 call +(285830 call * bin nTasks) tid))(285855 call(285844 call .(285843 call(285838 call . state c"perLocale") 0) c"globalEnds")(285852 call +(285849 call * bin nTasks) tid))))
                              }
                              (285875 call(285866 call . ShallowCopy c"shallowCopy") A globalStart Scratch localStart size)
                            }
                          }
                        }
                      }
                      (286318 call _downEndCount _coforallCount[286316] nil[44])
                      (285893 'coforall on block' 0 tmp[285888])
                      (285445 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[286328]
                _indexOfInterest[286323]
                _iterator[286324]
              }
              label _breakLabel[286329]
              Defer
              {
                {
                  (286374 call _endCountFree _coforallCount[286316])
                }
              }
              (286379 call _waitEndCount _coforallCount[286316] 0)
            }
          }
          if(286441 call _cond_test debug)
          {
            (286438 call writef "after distribute, A is %xt\n"(286437 call A(286434 call chpl_build_bounded_range(286430 call . task c"start") taskEnd)))
          }
          {
            unknown _indexOfInterest[286777] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[286778] "expr temp" "temp"
            (286787 'move' _iterator[286778](286785 call _getIterator(286463 call(286459 call .(286456 call .(286453 call .(286452 call(286447 call . state c"perLocale") 0) c"compat") c"bucketizer") c"getBinsToRecursivelySort"))))
            Defer
            {
              {
                (286804 call _freeIterator _iterator[286778])
              }
            }
            { scopeless type
              (286793 'move' _indexOfInterest[286777](286790 call iteratorIndex _iterator[286778]))
            }
            ForLoop[286779]
            {
              unknown bin[286797] "index var" "insert auto destroy"
              (286799 'move' bin[286797] _indexOfInterest[286777])
              {
                { scopeless
                  const binStart[286497] "const"(286494 IfExpr (286469 call >(286466 call * bin nTasks) 0) then
                  { scopeless
                    (286489 call(286478 call .(286477 call(286472 call . state c"perLocale") 0) c"globalEnds")(286486 call -(286483 call * bin nTasks) 1))
                  } else
                  { scopeless
                    (286491 call . task c"start")
                  } )
                  (286500 'end of statement')
                }
                { scopeless
                  const binEnd[286527] "const"(286525 call -(286523 call(286509 call .(286508 call(286503 call . state c"perLocale") 0) c"globalEnds")(286520 call -(286517 call +(286514 call * bin nTasks) nTasks) 1)) 1)
                  (286530 'end of statement')
                }
                { scopeless
                  const binSize[286538] "const"(286536 call +(286533 call - binEnd binStart) 1)
                  (286541 'end of statement')
                }
                { scopeless
                  const binStartBit[286564] "const"(286563 call(286555 call .(286552 call .(286549 call .(286548 call(286543 call . state c"perLocale") 0) c"compat") c"bucketizer") c"getNextStartBit")(286559 call . task c"startbit"))
                  (286567 'end of statement')
                }
                if(286773 call _cond_test(286570 call > binSize 1))
                {
                  { scopeless
                    unknown isOnOneLocale[286573] 0
                    (286576 'end of statement')
                  }
                  { scopeless
                    unknown theLocaleId[286581](286579 call - 1)
                    (286584 'end of statement')
                  }
                  {
                    unknown _indexOfInterest[286660] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[286661] "expr temp" "temp"
                    (286683 'move' _iterator[286661](286600 call _build_tuple(286674 call _getIterator(286673 call(286670 call . A c"targetLocales")))(286680 call _getIterator(286678 call chpl_build_low_bounded_range 0))))
                    Defer
                    {
                      {
                        (286713 call _freeIterator _iterator[286661])
                      }
                    }
                    { scopeless type
                      (286688 'move' _indexOfInterest[286660](286685 call iteratorIndex _iterator[286661]))
                    }
                    ForLoop[286662]
                    {
                      (286693 call _check_tuple_var_decl _indexOfInterest[286660] 2)
                      unknown loc[286699] "index var" "insert auto destroy"
                      (286701 'move' loc[286699](286697 call _indexOfInterest[286660] 0))
                      unknown tid[286706] "index var" "insert auto destroy"
                      (286708 'move' tid[286706](286704 call _indexOfInterest[286660] 1))
                      {
                        { scopeless
                          const localSubdomain[286617] "const"(286616 call(286607 call(286602 call . A c"localSubdomain") loc)(286613 call chpl_build_bounded_range(286609 call . task c"start") taskEnd))
                          (286620 'end of statement')
                        }
                        { scopeless
                          const curDomain[286629] "const"(286627 call chpl__buildDomainExpr(286624 call chpl_build_bounded_range binStart binEnd))
                          (286632 'end of statement')
                        }
                        { scopeless
                          const intersect[286637] "const"(286636 call curDomain localSubdomain)
                          (286640 'end of statement')
                        }
                        if(286656 call _cond_test(286643 call == curDomain intersect))
                        {
                          (286647 call = isOnOneLocale 1)
                          (286653 call = theLocaleId tid)
                        }
                      }
                      label _continueLabel[286665]
                      _indexOfInterest[286660]
                      _iterator[286661]
                    }
                    label _breakLabel[286666]
                  }
                  if(286769 call _cond_test isOnOneLocale)
                  {
                    (286746 call(286733 call .(286730 call .(286729 call(286724 call . state c"localTasks") theLocaleId) c"localTasks") c"append")(286736 'new'(286744 call TwoArraySortTask binStart binSize binStartBit 1 1)))
                  }
                  {
                    (286766 call(286753 call .(286750 call . state c"distTasks") c"append")(286756 'new'(286764 call TwoArraySortTask binStart binSize binStartBit 1 1)))
                  }
                }
              }
              label _continueLabel[286782]
              _indexOfInterest[286777]
              _iterator[286778]
            }
            label _breakLabel[286783]
          }
        }
        label _continueLabel[286814]
        (286831 'move' tmp[286811](286820 call _cond_test(286822 call !(286830 call(286824 call .(286826 call . state c"distTasks") c"isEmpty")))))
        tmp[286811]
      }
      label _breakLabel[286815]
    }
    {
      unknown tmpIter[287110] "expr temp" "maybe ref" "no copy" "temp"
      (287113 'move' tmpIter[287110](286865 call _build_tuple(286860 call(286856 call . A c"targetLocales"))(286863 call chpl_build_low_bounded_range 0)))
      unknown isRngDomArr[287472] "maybe param" "temp"
      (287487 'move' isRngDomArr[287472](287485 call ||(287474 call isBoundedRange tmpIter[287110])(287483 call ||(287477 call isDomain tmpIter[287110])(287480 call isArray tmpIter[287110]))))
      if isRngDomArr[287472]
      {
        const _coforallCount[287316] "const" "end count" "temp"
        (287395 'move' _coforallCount[287316](287392 call _endCountAlloc 0))
        unknown numTasks[287317] "temp"
        (287379 'move' numTasks[287317](287375 call . tmpIter[287110] c"size"))
        (287370 call _upEndCount _coforallCount[287316] 0 numTasks[287317])
        unknown _indexOfInterest[287323] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[287324] "expr temp" "temp"
        (287333 'move' _iterator[287324](287331 call _getIteratorZip tmpIter[287110]))
        Defer
        {
          {
            (287363 call _freeIterator _iterator[287324])
          }
        }
        { scopeless type
          (287338 'move' _indexOfInterest[287323](287335 call iteratorIndex _iterator[287324]))
        }
        ForLoop[287325]
        {
          (287343 call _check_tuple_var_decl _indexOfInterest[287323] 2)
          unknown loc[287349] "coforall index var" "index var" "insert auto destroy"
          (287351 'move' loc[287349](287347 call _indexOfInterest[287323] 0))
          unknown tid[287356] "coforall index var" "index var" "insert auto destroy"
          (287358 'move' tid[287356](287354 call _indexOfInterest[287323] 1))
          { scopeless
            { scopeless
              const tmp[287119] "const" "temp"
              (287121 'move' tmp[287119](287123 'deref'(287124 '_wide_get_locale' loc)))
              {
                {
                  { scopeless
                    unknown myTasks[287132](287134 call .(287139 call(287136 call . state c"localTasks") tid) c"localTasks")
                    (287143 'end of statement')
                  }
                  { scopeless
                    unknown baseCaseSize[287145](287147 call . state c"baseCaseSize")
                    (287151 'end of statement')
                  }
                  { scopeless
                    unknown compat[287153] "ref var"(287155 call .(287160 call(287157 call . state c"perLocale") tid) c"compat")
                    (287164 'end of statement')
                  }
                  {
                    unknown _indexOfInterest[287166] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[287168] "expr temp" "temp"
                    (287170 'move' _iterator[287168](287173 call _getIterator myTasks))
                    Defer
                    {
                      {
                        (287177 call _freeIterator _iterator[287168])
                      }
                    }
                    { scopeless type
                      (287181 'move' _indexOfInterest[287166](287184 call iteratorIndex _iterator[287168]))
                    }
                    ForLoop[287186]
                    {
                      unknown task[287189] "index var" "insert auto destroy"
                      (287191 'move' task[287189] _indexOfInterest[287166])
                      {
                        { scopeless
                          const taskEnd[287196] "const"(287198 call -(287200 call +(287202 call . task c"start")(287206 call . task c"size")) 1)
                          (287211 'end of statement')
                        }
                        { scopeless
                          const curDomain[287213] "const"(287215 call chpl__buildDomainExpr(287217 call chpl_build_bounded_range(287219 call . task c"start") taskEnd))
                          (287224 'end of statement')
                        }
                        if(287226 call _cond_test(287228 call > n baseCaseSize))
                        {
                          (287239 call(287233 call .(287235 call . compat c"bigTasks") c"clear"))
                          (287247 call(287241 call .(287243 call . compat c"smallTasks") c"clear"))
                          (287249 call partitioningSortWithScratchSpace(287251 call . task c"start") taskEnd(287259 call(287256 call . A c"localSlice") curDomain)(287265 call(287262 call . Scratch c"localSlice") curDomain) compat criterion(287270 call . task c"startbit"))
                        }
                        {
                          (287278 call(287275 call . ShellSort c"shellSort")(287283 call(287280 call . A c"localSlice") curDomain) criterion(start =(287287 call . task c"start"))(end = taskEnd))
                        }
                        if(287295 call _cond_test debug)
                        {
                          (287299 call writef "after recursive sorts, dst is %xt\n"(287302 call A(287304 call chpl_build_bounded_range(287306 call . task c"start") taskEnd)))
                        }
                      }
                      label _continueLabel[287311]
                      _indexOfInterest[287166]
                      _iterator[287168]
                    }
                    label _breakLabel[287313]
                  }
                }
                (287318 call _downEndCount _coforallCount[287316] nil[44])
                (287127 'coforall on block' 0 tmp[287119])
                (287115 'actuals list' tiMarkRef[294] state)
              }
            }
          }
          label _continueLabel[287328]
          _indexOfInterest[287323]
          _iterator[287324]
        }
        label _breakLabel[287329]
        Defer
        {
          {
            (287382 call _endCountFree _coforallCount[287316])
          }
        }
        (287387 call _waitEndCount _coforallCount[287316] 0 numTasks[287317])
      }
      {
        const _coforallCount[287399] "const" "end count" "temp"
        (287469 'move' _coforallCount[287399](287466 call _endCountAlloc 0))
        unknown _indexOfInterest[287406] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[287407] "expr temp" "temp"
        (287416 'move' _iterator[287407](287414 call _getIteratorZip tmpIter[287110]))
        Defer
        {
          {
            (287446 call _freeIterator _iterator[287407])
          }
        }
        { scopeless type
          (287421 'move' _indexOfInterest[287406](287418 call iteratorIndex _iterator[287407]))
        }
        ForLoop[287408]
        {
          (287426 call _check_tuple_var_decl _indexOfInterest[287406] 2)
          unknown loc[287432] "coforall index var" "index var" "insert auto destroy"
          (287434 'move' loc[287432](287430 call _indexOfInterest[287406] 0))
          unknown tid[287439] "coforall index var" "index var" "insert auto destroy"
          (287441 'move' tid[287439](287437 call _indexOfInterest[287406] 1))
          (287453 call _upEndCount _coforallCount[287399] 0)
          { scopeless
            { scopeless
              const tmp[287100] "const" "temp"
              (287102 'move' tmp[287100](287098 'deref'(287097 '_wide_get_locale' loc)))
              {
                {
                  { scopeless
                    unknown myTasks[286885](286882 call .(286881 call(286876 call . state c"localTasks") tid) c"localTasks")
                    (286888 'end of statement')
                  }
                  { scopeless
                    unknown baseCaseSize[286894](286891 call . state c"baseCaseSize")
                    (286897 'end of statement')
                  }
                  { scopeless
                    unknown compat[286908] "ref var"(286905 call .(286904 call(286899 call . state c"perLocale") tid) c"compat")
                    (286911 'end of statement')
                  }
                  {
                    unknown _indexOfInterest[287064] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[287065] "expr temp" "temp"
                    (287074 'move' _iterator[287065](287072 call _getIterator myTasks))
                    Defer
                    {
                      {
                        (287090 call _freeIterator _iterator[287065])
                      }
                    }
                    { scopeless type
                      (287079 'move' _indexOfInterest[287064](287076 call iteratorIndex _iterator[287065]))
                    }
                    ForLoop[287066]
                    {
                      unknown task[287083] "index var" "insert auto destroy"
                      (287085 'move' task[287083] _indexOfInterest[287064])
                      {
                        { scopeless
                          const taskEnd[286927] "const"(286925 call -(286922 call +(286915 call . task c"start")(286919 call . task c"size")) 1)
                          (286930 'end of statement')
                        }
                        { scopeless
                          const curDomain[286942] "const"(286940 call chpl__buildDomainExpr(286937 call chpl_build_bounded_range(286933 call . task c"start") taskEnd))
                          (286945 'end of statement')
                        }
                        if(287023 call _cond_test(286948 call > n baseCaseSize))
                        {
                          (286958 call(286954 call .(286951 call . compat c"bigTasks") c"clear"))
                          (286969 call(286965 call .(286962 call . compat c"smallTasks") c"clear"))
                          (286998 call partitioningSortWithScratchSpace(286973 call . task c"start") taskEnd(286984 call(286979 call . A c"localSlice") curDomain)(286991 call(286986 call . Scratch c"localSlice") curDomain) compat criterion(286995 call . task c"startbit"))
                        }
                        {
                          (287020 call(287001 call . ShellSort c"shellSort")(287010 call(287005 call . A c"localSlice") curDomain) criterion(start =(287014 call . task c"start"))(end = taskEnd))
                        }
                        if(287060 call _cond_test debug)
                        {
                          (287057 call writef "after recursive sorts, dst is %xt\n"(287056 call A(287053 call chpl_build_bounded_range(287049 call . task c"start") taskEnd)))
                        }
                      }
                      label _continueLabel[287069]
                      _indexOfInterest[287064]
                      _iterator[287065]
                    }
                    label _breakLabel[287070]
                  }
                }
                (287401 call _downEndCount _coforallCount[287399] nil[44])
                (287105 'coforall on block' 0 tmp[287100])
                (286871 'actuals list' tiMarkRef[294] state)
              }
            }
          }
          label _continueLabel[287411]
          _indexOfInterest[287406]
          _iterator[287407]
        }
        label _breakLabel[287412]
        Defer
        {
          {
            (287457 call _endCountFree _coforallCount[287399])
          }
        }
        (287462 call _waitEndCount _coforallCount[287399] 0)
      }
    }
  }
  { scopeless type
    void[4]
  }
}