AST dump for Reflection after pass readExternC.
Module use list: 

{
  (352918 'use' ChapelStandard)
  function checkQueryT[224799](arg t[224797]:_any[178](?)) type : _unknown[51] "private"
  {
    if(224857 call _cond_test(224804 call isClassType t))
    {
      { scopeless
        (224810 return(224808 call _cast(224807 'to borrowed class from unknown' class[232](?)) t))
      }
    }
    {
      { scopeless
        if(224851 call _cond_test(224820 call ||(224815 call isRecordType t)(224819 call isUnionType t)))
        {
          { scopeless
            (224823 return t)
          }
        }
        {
          { scopeless
            (224849 call compilerError(224828 call _cast string[26] t) " is not a class, record, or union type" 2)
          }
        }
      }
    }
  }
  function numFields[224871](arg t[224869]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      (224881 return(224880 'num fields'(224879 call checkQueryT t)))
    }
  }
  { scopeless type
    int[13]
  }
  function getFieldName[224891](arg t[224889]:_any[178](?), param arg i[224894] :
  int[13]) param : _unknown[51]
  {
    { scopeless
      (224909 return(224908 'field num to name'(224903 call checkQueryT t)(224906 call + i 1)))
    }
  }
  { scopeless type
    string[26]
  }
  function getField[224922](const  ref arg x[224919] :
  unknown t[224917], param arg i[224925] :
  int[13]) param : _unknown[51]
  {
    (224962 return(224961 'field by num' x(224959 call + i 1)))
  }
  where {
    (224952 call &&(224939 call &&(224930 call >= i 0)(224937 call < i(224936 call numFields t)))(224951 call isParam(224949 'field by num' x(224947 call + i 1))))
  }
  function getField[224975](const  ref arg x[224972] :
  unknown t[224970], param arg i[224978] :
  int[13]) type : _unknown[51]
  {
    (225015 return(225014 'field by num' x(225012 call + i 1)))
  }
  where {
    (225005 call &&(224992 call &&(224983 call >= i 0)(224990 call < i(224989 call numFields t)))(225004 call isType(225002 'field by num' x(225000 call + i 1))))
  }
  function getField[225028](const  ref arg x[225025] :
  unknown t[225023], param arg i[225031] :
  int[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    { scopeless
      (225042 return(225041 'field by num' x(225039 call + i 1)))
    }
  }
  function getField[225054](const  ref arg x[225051] :
  unknown t[225049], param arg s[225057] :
  string[26]) param : _unknown[51]
  {
    (225093 return(225092 call getField x(225091 call getFieldIndex t s)))
  }
  where {
    (225082 call &&(225068 call !=(225064 call getFieldIndex t s)(225066 call - 1))(225081 call isParam(225079 call getField x(225078 call getFieldIndex t s))))
  }
  function getField[225106](const  ref arg x[225103] :
  unknown t[225101], param arg s[225109] :
  string[26]) type : _unknown[51]
  {
    (225145 return(225144 call getField x(225143 call getFieldIndex t s)))
  }
  where {
    (225134 call &&(225120 call !=(225116 call getFieldIndex t s)(225118 call - 1))(225133 call isType(225131 call getField x(225130 call getFieldIndex t s))))
  }
  function getField[225158](const  ref arg x[225155] :
  unknown t[225153], param arg s[225161] :
  string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    { scopeless
      unknown i[225185] "param"(225184 'field name to num' t s)
      (225188 'end of statement')
    }
    if(225237 call _cond_test(225192 call == i 0))
    {
      { scopeless
        (225235 call compilerError "field " s " not found in "(225233 call _cast string[26] t))
      }
    }
    (225247 return(225246 'field by num' x i))
  }
  function isImplementedWithRecords[225255](arg t[225253]:_any[178](?)) param : _unknown[51] "no doc"
  {
    { scopeless
      (225267 return(225265 call ||(225260 call isRangeType t)(225264 call isStringType t)))
    }
  }
  function numImplementationFields[225276](arg t[225274]:_any[178](?)) param : _unknown[51] "no doc"
  {
    { scopeless
      (225287 return(225286 'num fields' t))
    }
  }
  where {
    (225282 call isImplementedWithRecords t)
  }
  { scopeless type
    int[13]
  }
  function getImplementationField[225301](const  ref arg x[225298] :
  unknown t[225296], param arg i[225304] :
  int[13]) type : _unknown[51] "no doc"
  {
    { scopeless
      (225326 return(225325 'field by num' x i))
    }
  }
  where {
    (225319 call &&(225310 call isImplementedWithRecords t)(225318 call isType(225316 'field by num' x i)))
  }
  function getImplementationField[225339](const  ref arg x[225336] :
  unknown t[225334], param arg i[225342] :
  int[13]) param : _unknown[51] "no doc"
  {
    { scopeless
      (225364 return(225363 'field by num' x i))
    }
  }
  where {
    (225357 call &&(225348 call isImplementedWithRecords t)(225356 call isParam(225354 'field by num' x i)))
  }
  function getImplementationField[225377](const  ref arg x[225374] :
  unknown t[225372], param arg i[225380] :
  int[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    if(225431 call _cond_test(225387 call !(225386 call isImplementedWithRecords t)))
    {
      { scopeless
        (225429 call compilerError "an argument of the type "(225410 call _cast string[26] t) " is not valid for getImplementationField()")
      }
    }
    (225442 return(225441 'field by num' x i))
  }
  function getFieldRef[225453](ref arg x[225450] :
  unknown t[225448], param arg i[225456] :
  int[13]) ref : _unknown[51] "inline" "unsafe"
  {
    { scopeless
      (225467 return(225466 'field by num' x(225464 call + i 1)))
    }
  }
  function getFieldRef[225479](ref arg x[225476] :
  unknown t[225474], param arg s[225482] :
  string[26]) ref : _unknown[51] "unsafe"
  {
    { scopeless
      unknown i[225490] "param"(225489 'field name to num' t s)
      (225493 'end of statement')
    }
    if(225510 call _cond_test(225497 call == i 0))
    {
      { scopeless
        (225508 call compilerError "field " s " not found in "(225506 call _cast string[26] t))
      }
    }
    (225520 return(225519 'field by num' x i))
  }
  function getFieldIndex[225528](arg t[225526]:_any[178](?), param arg s[225531] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (225546 return(225544 call -(225542 'field name to num'(225540 call checkQueryT t) s) 1))
    }
  }
  { scopeless type
    int[13]
  }
  function hasField[225556](arg t[225554]:_any[178](?), param arg s[225559] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (225571 return(225569 call >=(225567 call getFieldIndex t s) 0))
    }
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225581](arg t[225579]:_any[178](?), param arg i[225584] :
  int[13]) param : _unknown[51]
  {
    (225619 return(225618 'is bound'(225609 call checkQueryT t)(225617 call getFieldName(225614 call checkQueryT t) i)))
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225629](arg t[225627]:_any[178](?), param arg s[225632] :
  string[26]) param : _unknown[51]
  {
    (225644 return(225643 'is bound'(225641 call checkQueryT t) s))
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225656](param arg fname[225653] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (225679 return(225678 'call and fn resolves' fname))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225691](param arg fname[225688] :
  string[26], arg args[225694]:_any[178](?) ...) param : _unknown[51]
  {
    { scopeless
      (225704 return(225703 'call and fn resolves' fname(225702 'expand_tuple' args)))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225714](arg obj[225712]:_any[178](?), param arg fname[225717] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (225742 return(225741 'method call and fn resolves' obj fname))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225752](arg obj[225750]:_any[178](?), param arg fname[225755] :
  string[26], arg args[225759]:_any[178](?) ...) param : _unknown[51]
  {
    { scopeless
      (225770 return(225769 'method call and fn resolves' obj fname(225768 'expand_tuple' args)))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225780](arg t[225778]:_any[178](?), param arg fname[225783] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (225792 return(225791 'method call and fn resolves' t fname))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225802](arg t[225800]:_any[178](?), param arg fname[225805] :
  string[26], arg args[225809]:_any[178](?) ...) param : _unknown[51]
  {
    { scopeless
      (225820 return(225819 'method call and fn resolves' t fname(225818 'expand_tuple' args)))
    }
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[225828]() param : _unknown[51] "get line number"
  {
  }
  { scopeless type
    int[13]
  }
  function getFileName[225837]() param : _unknown[51] "get file name"
  {
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[225846]() param : _unknown[51] "get function name"
  {
  }
  { scopeless type
    string[26]
  }
  function getModuleName[225855]() param : _unknown[51] "get module name"
  {
  }
  { scopeless type
    string[26]
  }
}