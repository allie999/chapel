AST dump for ChapelIteratorSupport after pass buildDefaultFunctions.
Module use list: ChapelStandard Reflection 

{
  function chpl__init_ChapelIteratorSupport[415980]() : void[4] "insert line file info" "module init"
  {
    (508005 return _void[55])
  }
  function iteratorIndex[52135](arg ic[52132]:_iteratorClass[208](?)) : _unknown[51] "allow ref" "no doc" "fn returns iterator"
  {
    unknown ret[506903] "RVV" "temp"
    (52144 call(52140 call (partial) advance _mt[243] ic[52132]))
    (474586 'end of statement')
    (506907 'move' ret[506903](52154 call(52150 call (partial) getValue _mt[243] ic[52132])))
    (506905 return ret[506903])
  }
  function iteratorIndex[52165](arg t[52162]:_tuple[56202](?)) : _unknown[51] "expand tuples with values" "no doc" "fn returns iterator"
  {
    unknown ret[506925] "RVV" "temp"
    function iteratorIndexHelp[52173](arg t[52170]:_tuple[56202](?), param arg dim[52176]:int(64)[13]) : _unknown[51] "expand tuples with values"
    {
      unknown ret[506911] "RVV" "temp"
      unknown call_tmp[609327] "expr temp" "maybe param" "maybe type" "temp"
      (609330 'move' call_tmp[609327](52181 call size _mt[243] t[52170]))
      unknown call_tmp[609332] "expr temp" "maybe param" "maybe type" "temp"
      (609335 'move' call_tmp[609332](52185 call - call_tmp[609327] 1))
      unknown call_tmp[609337] "expr temp" "maybe param" "maybe type" "temp"
      (609340 'move' call_tmp[609337](52187 call == dim[52176] call_tmp[609332]))
      unknown call_tmp[609342] "expr temp" "maybe param" "maybe type" "temp"
      (609345 'move' call_tmp[609342](52222 call _cond_test call_tmp[609337]))
      if call_tmp[609342]
      {
        unknown call_tmp[609347] "expr temp" "maybe param" "maybe type" "temp"
        (609350 'move' call_tmp[609347](52194 call t[52170] dim[52176]))
        unknown call_tmp[609352] "expr temp" "maybe param" "maybe type" "temp"
        (609355 'move' call_tmp[609352](52196 call iteratorIndex call_tmp[609347]))
        (506915 'move' ret[506911](52198 call _build_tuple_always_allow_ref call_tmp[609352]))
        gotoReturn _end_iteratorIndexHelp[506909] _end_iteratorIndexHelp[506909]
      }
      {
        unknown call_tmp[609357] "expr temp" "maybe param" "maybe type" "temp"
        (609360 'move' call_tmp[609357](52206 call t[52170] dim[52176]))
        unknown call_tmp[609362] "expr temp" "maybe param" "maybe type" "temp"
        (609365 'move' call_tmp[609362](52208 call iteratorIndex call_tmp[609357]))
        unknown call_tmp[609367] "expr temp" "maybe param" "maybe type" "temp"
        (609370 'move' call_tmp[609367](52215 call + dim[52176] 1))
        unknown call_tmp[609372] "expr temp" "maybe param" "maybe type" "temp"
        (609375 'move' call_tmp[609372](52217 call iteratorIndexHelp t[52170] call_tmp[609367]))
        (506919 'move' ret[506911](52219 call _build_tuple_always_allow_ref call_tmp[609362](52218 'expand_tuple' call_tmp[609372])))
        gotoReturn _end_iteratorIndexHelp[506909] _end_iteratorIndexHelp[506909]
      }
      label _end_iteratorIndexHelp[506909]
      (506913 return ret[506911])
    }
    (506929 'move' ret[506925](52236 call iteratorIndexHelp t[52162] 0))
    (506927 return ret[506925])
  }
  function iteratorIndexType[52245](arg x[52243]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[506933] "RVV" "temp" "type variable"
    unknown call_tmp[609377] "expr temp" "maybe param" "maybe type" "temp"
    (609380 'move' call_tmp[609377](52250 call isArray x[52243]))
    unknown call_tmp[609382] "expr temp" "maybe param" "maybe type" "temp"
    (609385 'move' call_tmp[609382](52323 call _cond_test call_tmp[609377]))
    if call_tmp[609382]
    {
      unknown call_tmp[609389] "expr temp" "maybe param" "maybe type" "temp"
      (609392 'move' call_tmp[609389](52252 call eltType _mt[243] x[52243]))
      (506938 'move' ret[506933](506937 'deref' call_tmp[609389]))
      gotoReturn _end_iteratorIndexType[506931] _end_iteratorIndexType[506931]
    }
    {
      unknown call_tmp[609394] "expr temp" "maybe param" "maybe type" "temp"
      (609397 'move' call_tmp[609394](52261 call isDomain x[52243]))
      unknown call_tmp[609399] "expr temp" "maybe param" "maybe type" "temp"
      (609402 'move' call_tmp[609399](52319 call _cond_test call_tmp[609394]))
      if call_tmp[609399]
      {
        unknown tmp[554402] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[554403] "maybe param" "temp"
        unknown call_tmp[609406] "expr temp" "maybe param" "maybe type" "temp"
        (609409 'move' call_tmp[609406](52265 call rank _mt[243] x[52243]))
        unknown call_tmp[609411] "expr temp" "maybe param" "maybe type" "temp"
        (609414 'move' call_tmp[609411](52269 call == call_tmp[609406] 1))
        (554408 'move' tmp[554403](554406 call _cond_test call_tmp[609411]))
        if tmp[554403]
        {
          unknown tmp[554410] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (554412 'move' tmp[554410](52274 call idxType _mt[243] x[52243]))
          (554417 'move' tmp[554402](554414 '_paramFoldLogical' tmp[554403] tmp[554410]))
        }
        {
          unknown tmp[554419] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[609420] "expr temp" "maybe param" "maybe type" "temp"
          (609423 'move' call_tmp[609420](52278 call rank _mt[243] x[52243]))
          unknown call_tmp[609427] "expr temp" "maybe param" "maybe type" "temp"
          (609430 'move' call_tmp[609427](52282 call idxType _mt[243] x[52243]))
          (554421 'move' tmp[554419](52285 call * call_tmp[609420] call_tmp[609427]))
          (554426 'move' tmp[554402](554423 '_paramFoldLogical' tmp[554403] tmp[554419]))
        }
        (506943 'move' ret[506933](506942 'deref' tmp[554402]))
        gotoReturn _end_iteratorIndexType[506931] _end_iteratorIndexType[506931]
      }
      {
        unknown call_tmp[609432] "maybe param" "maybe type" "temp"
        (609435 'move' call_tmp[609432](52296 call _getIterator x[52243]))
        unknown ic[52297] "dead at end of block" "insert auto destroy" "no copy"
        (540758 'init var' ic[52297] call_tmp[609432])
        (52300 'end of statement')
        unknown call_tmp[609437] "maybe param" "maybe type" "temp"
        (609440 'move' call_tmp[609437](52305 call iteratorIndex ic[52297]))
        unknown i[52306] "dead at end of block" "insert auto destroy" "no copy"
        (540760 'init var' i[52306] call_tmp[609437])
        (52309 'end of statement' ic[52297])
        (52313 call _freeIterator ic[52297])
        (474594 'end of statement' ic[52297])
        unknown call_tmp[609442] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (609445 'move' call_tmp[609442](52316 'typeof' i[52306]))
        (506948 'move' ret[506933](506947 'deref' call_tmp[609442]))
        gotoReturn _end_iteratorIndexType[506931] _end_iteratorIndexType[506931]
        (474596 'end of statement' i[52306])
      }
    }
    label _end_iteratorIndexType[506931]
    (506935 return ret[506933])
  }
  function iteratorIndexTypeZip[52337](arg xs[52334]:_any[178](?) ...) type : _unknown[51] "no doc"
  {
    unknown ret[506970] "RVV" "temp" "type variable"
    function iteratorIndexTypeZipHelp[52343](param arg dim[52341]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[506954] "RVV" "temp" "type variable"
      unknown call_tmp[609449] "expr temp" "maybe param" "maybe type" "temp"
      (609452 'move' call_tmp[609449](52347 call size _mt[243] xs[52334]))
      unknown call_tmp[609454] "expr temp" "maybe param" "maybe type" "temp"
      (609457 'move' call_tmp[609454](52351 call - call_tmp[609449] 1))
      unknown call_tmp[609459] "expr temp" "maybe param" "maybe type" "temp"
      (609462 'move' call_tmp[609459](52353 call == dim[52341] call_tmp[609454]))
      unknown call_tmp[609464] "expr temp" "maybe param" "maybe type" "temp"
      (609467 'move' call_tmp[609464](52386 call _cond_test call_tmp[609459]))
      if call_tmp[609464]
      {
        unknown call_tmp[609469] "expr temp" "maybe param" "maybe type" "temp"
        (609472 'move' call_tmp[609469](52359 call xs[52334] dim[52341]))
        unknown call_tmp[609474] "expr temp" "maybe param" "maybe type" "temp"
        (609477 'move' call_tmp[609474](52361 call iteratorIndexType call_tmp[609469]))
        unknown call_tmp[609479] "expr temp" "maybe param" "maybe type" "temp"
        (609482 'move' call_tmp[609479](52362 call _build_tuple call_tmp[609474]))
        (506959 'move' ret[506954](506958 'deref' call_tmp[609479]))
        gotoReturn _end_iteratorIndexTypeZipHelp[506952] _end_iteratorIndexTypeZipHelp[506952]
      }
      {
        unknown call_tmp[609484] "expr temp" "maybe param" "maybe type" "temp"
        (609487 'move' call_tmp[609484](52370 call xs[52334] dim[52341]))
        unknown call_tmp[609489] "expr temp" "maybe param" "maybe type" "temp"
        (609492 'move' call_tmp[609489](52372 call iteratorIndexType call_tmp[609484]))
        unknown call_tmp[609494] "expr temp" "maybe param" "maybe type" "temp"
        (609497 'move' call_tmp[609494](52376 call + dim[52341] 1))
        unknown call_tmp[609499] "expr temp" "maybe param" "maybe type" "temp"
        (609502 'move' call_tmp[609499](52379 call iteratorIndexTypeZipHelp call_tmp[609494]))
        unknown call_tmp[609504] "expr temp" "maybe param" "maybe type" "temp"
        (609507 'move' call_tmp[609504](52382 call _build_tuple call_tmp[609489](52380 'expand_tuple' call_tmp[609499])))
        (506964 'move' ret[506954](506963 'deref' call_tmp[609504]))
        gotoReturn _end_iteratorIndexTypeZipHelp[506952] _end_iteratorIndexTypeZipHelp[506952]
      }
      label _end_iteratorIndexTypeZipHelp[506952]
      (506956 return ret[506954])
    }
    unknown call_tmp[609509] "expr temp" "maybe param" "maybe type" "temp"
    (609512 'move' call_tmp[609509](52399 call iteratorIndexTypeZipHelp 0))
    (506975 'move' ret[506970](506974 'deref' call_tmp[609509]))
    (506972 return ret[506970])
  }
  function iteratorToArrayElementType[52410](arg t[52407]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[506979] "RVV" "temp" "type variable"
    unknown call_tmp[609514] "expr temp" "maybe param" "maybe type" "temp"
    (609517 'move' call_tmp[609514](52433 'scalar promotion type' t[52407]))
    unknown call_tmp[609519] "expr temp" "maybe param" "maybe type" "temp"
    (609522 'move' call_tmp[609519](52435 call chpl_buildStandInRTT call_tmp[609514]))
    unknown call_tmp[609524] "expr temp" "maybe param" "maybe type" "temp"
    (609527 'move' call_tmp[609524](52437 call chpl__unref call_tmp[609519]))
    (506984 'move' ret[506979](506983 'deref' call_tmp[609524]))
    (506981 return ret[506979])
  }
  function chpl_buildStandInRTT[52449](arg domType[52446]:_domain[125908](?)) type : _unknown[51] "unsafe"
  {
    unknown ret[506988] "RVV" "temp" "type variable"
    unknown instanceObj[52488] "dead at end of block" "insert auto destroy"
    unknown call_tmp[609529] "expr temp" "maybe param" "maybe type" "temp"
    (609532 'move' call_tmp[609529](52487 'static field type' domType[52446] "_instance"))
    (540762 'default init var' instanceObj[52488] call_tmp[609529])
    (52491 'end of statement')
    unknown call_tmp[609534] "expr temp" "maybe param" "maybe type" "temp"
    (609537 'move' call_tmp[609534](52496 call chpl_buildStandInRTT instanceObj[52488]))
    (506993 'move' ret[506988](506992 'deref' call_tmp[609534]))
    gotoReturn _end_chpl_buildStandInRTT[506986] _end_chpl_buildStandInRTT[506986]
    (474602 'end of statement' instanceObj[52488])
    label _end_chpl_buildStandInRTT[506986]
    (506990 return ret[506988])
  }
  function chpl_buildStandInRTT[52509](arg arrType[52506]:_array[133594](?)) type : _unknown[51] "unsafe"
  {
    unknown ret[506999] "RVV" "temp" "type variable"
    unknown arrInstType[52516] "dead at end of block" "insert auto destroy" "type variable"(52515 'static field type' arrType[52506] "_instance")
    (540767 'move' arrInstType[52516](540764 'static field type' arrType[52506] "_instance"))
    unknown domInstType[52541] "dead at end of block" "insert auto destroy" "type variable"(52540 'static field type' arrInstType[52516] "dom")
    (540772 'move' domInstType[52541](540769 'static field type' arrInstType[52516] "dom"))
    unknown domInstance[52545] "dead at end of block" "insert auto destroy"
    (540774 'default init var' domInstance[52545] domInstType[52541])
    (52548 'end of statement')
    unknown standinDomain[52553] "dead at end of block" "no auto destroy"
    unknown call_tmp[609539] "expr temp" "maybe param" "maybe type" "temp"
    (609542 'move' call_tmp[609539](52552 call chpl_buildStandInRTT domInstance[52545]))
    (540776 'default init var' standinDomain[52553] call_tmp[609539])
    (52556 'end of statement')
    unknown instanceObj[52558] "dead at end of block" "insert auto destroy"
    (540778 'default init var' instanceObj[52558] arrInstType[52516])
    (52561 'end of statement' arrInstType[52516] domInstType[52541] domInstance[52545] arrInstType[52516])
    unknown call_tmp[609546] "expr temp" "maybe param" "maybe type" "temp"
    (609549 'move' call_tmp[609546](52581 call eltType _mt[243] instanceObj[52558]))
    unknown instanceEltType[52585] "dead at end of block" "insert auto destroy" "type variable"(52584 'static typeof' call_tmp[609546])
    unknown call_tmp[609553] "expr temp" "maybe param" "maybe type" "temp"
    (609556 'move' call_tmp[609553](540782 call eltType _mt[243] instanceObj[52558]))
    (540785 'move' instanceEltType[52585](540780 'static typeof' call_tmp[609553]))
    (474608 'end of statement' instanceObj[52558])
    unknown call_tmp[609558] "expr temp" "maybe param" "maybe type" "temp"
    (609561 'move' call_tmp[609558](52594 call chpl_buildStandInRTT instanceEltType[52585]))
    unknown call_tmp[609563] "expr temp" "maybe param" "maybe type" "temp"
    (609566 'move' call_tmp[609563](52595 call chpl__buildArrayRuntimeType standinDomain[52553] call_tmp[609558]))
    (507004 'move' ret[506999](507003 'deref' call_tmp[609563]))
    gotoReturn _end_chpl_buildStandInRTT[506997] _end_chpl_buildStandInRTT[506997]
    (474610 'end of statement' standinDomain[52553] instanceEltType[52585])
    label _end_chpl_buildStandInRTT[506997]
    (507001 return ret[506999])
  }
  function chpl_buildStandInRTT[52606](arg irType[52603]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[507031] "RVV" "temp" "type variable"
    unknown shapeType[52612] "dead at end of block" "insert auto destroy" "type variable"(52611 call chpl_iteratorShapeStaticTypeOrNothing irType[52603])
    (540790 'move' shapeType[52612](540788 call chpl_iteratorShapeStaticTypeOrNothing irType[52603]))
    function standinType[52618]() type : _unknown[51] "unsafe"
    {
      unknown ret[507010] "RVV" "temp" "type variable"
      unknown call_tmp[609568] "expr temp" "maybe param" "maybe type" "temp"
      (609571 'move' call_tmp[609568](52622 call == shapeType[52612] nothing[7]))
      unknown call_tmp[609573] "expr temp" "maybe param" "maybe type" "temp"
      (609576 'move' call_tmp[609573](52678 call _cond_test call_tmp[609568]))
      if call_tmp[609573]
      {
        unknown call_tmp[609578] "expr temp" "maybe param" "maybe type" "temp"
        (609581 'move' call_tmp[609578](52627 call chpl__buildDomainRuntimeType defaultDist[94053] 1))
        (507015 'move' ret[507010](507014 'deref' call_tmp[609578]))
        gotoReturn _end_standinType[507008] _end_standinType[507008]
      }
      {
        unknown call_tmp[609583] "expr temp" "maybe param" "maybe type" "temp"
        (609586 'move' call_tmp[609583](52635 call isRange shapeType[52612]))
        unknown call_tmp[609588] "expr temp" "maybe param" "maybe type" "temp"
        (609591 'move' call_tmp[609588](52674 call _cond_test call_tmp[609583]))
        if call_tmp[609588]
        {
          unknown call_tmp[609593] "expr temp" "maybe param" "maybe type" "temp"
          (609596 'move' call_tmp[609593](52639 call chpl__buildDomainRuntimeType defaultDist[94053] 1))
          (507020 'move' ret[507010](507019 'deref' call_tmp[609593]))
          gotoReturn _end_standinType[507008] _end_standinType[507008]
        }
        {
          unknown domInstance[52645] "dead at end of block" "insert auto destroy"
          (540792 'default init var' domInstance[52645] shapeType[52612])
          (52648 'end of statement')
          unknown tmp[418496] "maybe param" "temp"
          unknown call_tmp[609598] "expr temp" "maybe param" "maybe type" "temp"
          (609601 'move' call_tmp[609598](52654 call isDomain domInstance[52645]))
          (418507 'move' tmp[418496](52655 call ! call_tmp[609598]))
          unknown call_tmp[609603] "expr temp" "maybe param" "maybe type" "temp"
          (609606 'move' call_tmp[609603](418509 call _cond_invalid tmp[418496]))
          if call_tmp[609603]
          {
            (418512 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[554433] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[554434] "maybe param" "temp"
          unknown call_tmp[609608] "expr temp" "maybe param" "maybe type" "temp"
          (609611 'move' call_tmp[609608](418497 call isTrue tmp[418496]))
          (554439 'move' tmp[554434](554437 call _cond_test call_tmp[609608]))
          if tmp[554434]
          {
            unknown tmp[554441] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[609613] "expr temp" "maybe param" "maybe type" "temp"
            (609616 'move' call_tmp[609613](52660 call isArray domInstance[52645]))
            unknown call_tmp[609618] "expr temp" "maybe param" "maybe type" "temp"
            (609621 'move' call_tmp[609618](52661 call ! call_tmp[609613]))
            (554443 'move' tmp[554441](418500 call isTrue call_tmp[609618]))
            (554448 'move' tmp[554433](554445 '_paramFoldLogical' tmp[554434] tmp[554441]))
          }
          {
            (554453 'move' tmp[554433](554450 '_paramFoldLogical' tmp[554434] 0))
          }
          (52666 call compilerAssert tmp[554433])
          (474616 'end of statement' domInstance[52645])
          unknown call_tmp[609623] "expr temp" "maybe param" "maybe type" "temp"
          (609626 'move' call_tmp[609623](52671 call chpl_buildStandInRTT domInstance[52645]))
          (507025 'move' ret[507010](507024 'deref' call_tmp[609623]))
          gotoReturn _end_standinType[507008] _end_standinType[507008]
          (474618 'end of statement' domInstance[52645])
        }
      }
      label _end_standinType[507008]
      (507012 return ret[507010])
    }
    unknown standinDomain[52689] "dead at end of block" "no auto destroy"
    unknown call_tmp[609628] "expr temp" "maybe param" "maybe type" "temp"
    (609631 'move' call_tmp[609628](52688 call standinType))
    (540794 'default init var' standinDomain[52689] call_tmp[609628])
    (52692 'end of statement')
    unknown call_tmp[609633] "expr temp" "maybe param" "maybe type" "temp"
    (609636 'move' call_tmp[609633](52700 'scalar promotion type' irType[52603]))
    unknown call_tmp[609638] "expr temp" "maybe param" "maybe type" "temp"
    (609641 'move' call_tmp[609638](52702 call chpl_buildStandInRTT call_tmp[609633]))
    unknown call_tmp[609643] "expr temp" "maybe param" "maybe type" "temp"
    (609646 'move' call_tmp[609643](52703 call chpl__buildArrayRuntimeType standinDomain[52689] call_tmp[609638]))
    (507036 'move' ret[507031](507035 'deref' call_tmp[609643]))
    gotoReturn _end_chpl_buildStandInRTT[507029] _end_chpl_buildStandInRTT[507029]
    (474620 'end of statement' standinDomain[52689])
    label _end_chpl_buildStandInRTT[507029]
    (507033 return ret[507031])
  }
  function chpl_buildStandInRTT[52712](arg nonRTtype[52710]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[507042] "RVV" "temp" "type variable"
    (507047 'move' ret[507042](507046 'deref' nonRTtype[52710]))
    (507044 return ret[507042])
  }
  function chpl_buildStandInRTT[52724](arg domInst[52722]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[507051] "RVV" "temp" "type variable"
    unknown call_tmp[609650] "expr temp" "maybe param" "maybe type" "temp"
    (609653 'move' call_tmp[609650](52736 call rank _mt[243] domInst[52722]))
    unknown call_tmp[609657] "expr temp" "maybe param" "maybe type" "temp"
    (609660 'move' call_tmp[609657](52740 call idxType _mt[243] domInst[52722]))
    unknown call_tmp[609664] "expr temp" "maybe param" "maybe type" "temp"
    (609667 'move' call_tmp[609664](52746 call stridable _mt[243] domInst[52722]))
    unknown call_tmp[609669] "expr temp" "maybe param" "maybe type" "temp"
    (609672 'move' call_tmp[609669](52749 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[609650] call_tmp[609657] call_tmp[609664]))
    (507056 'move' ret[507051](507055 'deref' call_tmp[609669]))
    (507053 return ret[507051])
  }
  where {
    unknown call_tmp[609674] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609677 'move' call_tmp[609674](52727 'typeof' domInst[52722]))
    (52730 call <= call_tmp[609674] unmanaged DefaultRectangularDom[415440](?))
  }
  function chpl_buildStandInRTT[52760](arg domInst[52758]:_any[178](?)) type : _unknown[51] "no return value for void"
  {
    unknown call_tmp[609679] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609682 'move' call_tmp[609679](52763 'typeof' domInst[52758]))
    unknown call_tmp[609684] "expr temp" "maybe param" "maybe type" "temp"
    (609687 'move' call_tmp[609684](52766 call <= call_tmp[609679] unmanaged BaseDom[415443]))
    unknown call_tmp[609689] "expr temp" "maybe param" "maybe type" "temp"
    (609692 'move' call_tmp[609689](52838 call _cond_test call_tmp[609684]))
    if call_tmp[609689]
    {
      (52789 call compilerError "for/forall/promoted expressions are not implemented when the elements are or contain non-DefaultRectangular domains or arrays")
    }
    {
      unknown call_tmp[609694] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (609697 'move' call_tmp[609694](52813 'typeof' domInst[52758]))
      unknown call_tmp[609699] "expr temp" "maybe param" "maybe type" "temp"
      (609702 'move' call_tmp[609699](52815 call _cast string[26] call_tmp[609694]))
      (52836 call compilerError "unexpected argument of type " call_tmp[609699] " for chpl_buildStandInRTT()")
    }
    (507058 return _void[55])
  }
  function chpl_trivialLeader[52849]() : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[507062] "RVV" "temp"
    unknown yret[507066] "YVV" "temp"
    (507069 'move' yret[507066](507068 'deref' 0))
    (507071 yield yret[507066])
    (507064 return ret[507062])
  }
  function chpl_computeIteratorShape[52865](arg arg[52862]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[507075] "RVV" "temp"
    unknown call_tmp[609706] "expr temp" "maybe param" "maybe type" "temp"
    (609709 'move' call_tmp[609706](52871 call _dom _mt[243] arg[52862]))
    unknown call_tmp[609711] "expr temp" "maybe param" "maybe type" "temp"
    (609714 'move' call_tmp[609711](52875 call chpl_computeIteratorShape call_tmp[609706]))
    (507080 'move' ret[507075](507079 'deref' call_tmp[609711]))
    (507077 return ret[507075])
  }
  function chpl_computeIteratorShape[52887](arg arg[52884]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[507084] "RVV" "temp"
    unknown call_tmp[609718] "expr temp" "maybe param" "maybe type" "temp"
    (609721 'move' call_tmp[609718](52890 call _instance _mt[243] arg[52884]))
    (507089 'move' ret[507084](507088 'deref' call_tmp[609718]))
    (507086 return ret[507084])
  }
  function chpl_computeIteratorShape[52907](arg arg[52904]:range[64319](?)) : _unknown[51] "inline"
  {
    unknown ret[507093] "RVV" "temp"
    (507098 'move' ret[507093](507097 'deref' arg[52904]))
    (507095 return ret[507093])
  }
  function chpl_computeIteratorShape[52921](arg arg[52918]:_iteratorRecord[205](?)) : _unknown[51] "inline"
  {
    unknown ret[507102] "RVV" "temp"
    unknown call_tmp[609723] "expr temp" "maybe param" "maybe type" "temp"
    (609726 'move' call_tmp[609723](52926 call chpl_iteratorHasShape arg[52918]))
    unknown call_tmp[609728] "expr temp" "maybe param" "maybe type" "temp"
    (609731 'move' call_tmp[609728](52944 call _cond_test call_tmp[609723]))
    if call_tmp[609728]
    {
      unknown call_tmp[609735] "expr temp" "maybe param" "maybe type" "temp"
      (609738 'move' call_tmp[609735](52930 call _shape_ _mt[243] arg[52918]))
      (507107 'move' ret[507102](507106 'deref' call_tmp[609735]))
      gotoReturn _end_chpl_computeIteratorShape[507100] _end_chpl_computeIteratorShape[507100]
    }
    {
      const myvoid[52936] "dead at end of block" "const" "insert auto destroy"
      (540796 'init var' myvoid[52936] none[57])
      (52939 'end of statement')
      (507112 'move' ret[507102](507111 'deref' myvoid[52936]))
      gotoReturn _end_chpl_computeIteratorShape[507100] _end_chpl_computeIteratorShape[507100]
      (474631 'end of statement' myvoid[52936])
    }
    label _end_chpl_computeIteratorShape[507100]
    (507104 return ret[507102])
  }
  function chpl_computeIteratorShape[52956](arg arg[52954]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507118] "RVV" "temp"
    (507123 'move' ret[507118](507122 'deref' none[57]))
    (507120 return ret[507118])
  }
  function chpl_iteratorHasShape[52970](arg ir[52967]:_iteratorRecord[205](?)) param : _unknown[51]
  {
    unknown ret[507127] "RVV" "param" "temp"
    unknown call_tmp[609740] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609743 'move' call_tmp[609740](52974 'typeof' ir[52967]))
    unknown call_tmp[609745] "expr temp" "maybe param" "maybe type" "temp"
    (609748 'move' call_tmp[609745](52991 call hasField call_tmp[609740] "_shape_"))
    unknown call_tmp[609750] "expr temp" "maybe param" "maybe type" "temp"
    (609753 'move' call_tmp[609750](53005 call _cond_test call_tmp[609745]))
    if call_tmp[609750]
    {
      { scopeless type
        unknown call_type_tmp[491596] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609757] "expr temp" "maybe param" "maybe type" "temp"
        (609760 'move' call_tmp[609757](52993 call _shape_ _mt[243] ir[52967]))
        (491600 'move' call_type_tmp[491596](52996 'typeof' call_tmp[609757]))
      }
      unknown call_tmp[609762] "expr temp" "maybe param" "maybe type" "temp"
      (609765 'move' call_tmp[609762](52998 call != call_type_tmp[491596] void[4]))
      (507132 'move' ret[507127](507131 'deref' call_tmp[609762]))
      gotoReturn _end_chpl_iteratorHasShape[507125] _end_chpl_iteratorHasShape[507125]
    }
    {
      (507137 'move' ret[507127](507136 'deref' 0))
      gotoReturn _end_chpl_iteratorHasShape[507125] _end_chpl_iteratorHasShape[507125]
    }
    label _end_chpl_iteratorHasShape[507125]
    (507129 return ret[507127])
  }
  function chpl_iteratorHasDomainShape[53020](arg ir[53017]:_iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    unknown ret[507143] "RVV" "param" "temp"
    unknown call_tmp[609767] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609770 'move' call_tmp[609767](53024 'typeof' ir[53017]))
    unknown call_tmp[609772] "expr temp" "maybe param" "maybe type" "temp"
    (609775 'move' call_tmp[609772](53027 call hasField call_tmp[609767] "_shape_"))
    unknown call_tmp[609777] "expr temp" "maybe param" "maybe type" "temp"
    (609780 'move' call_tmp[609777](53042 call _cond_test call_tmp[609772]))
    if call_tmp[609777]
    {
      { scopeless type
        unknown call_type_tmp[491602] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609784] "expr temp" "maybe param" "maybe type" "temp"
        (609787 'move' call_tmp[609784](53030 call _shape_ _mt[243] ir[53017]))
        (491606 'move' call_type_tmp[491602](53033 'typeof' call_tmp[609784]))
      }
      unknown call_tmp[609789] "expr temp" "maybe param" "maybe type" "temp"
      (609792 'move' call_tmp[609789](354250 'is_subtype' BaseDom[372783](?) call_type_tmp[491602]))
      (507148 'move' ret[507143](507147 'deref' call_tmp[609789]))
      gotoReturn _end_chpl_iteratorHasDomainShape[507141] _end_chpl_iteratorHasDomainShape[507141]
    }
    {
      (507153 'move' ret[507143](507152 'deref' 0))
      gotoReturn _end_chpl_iteratorHasDomainShape[507141] _end_chpl_iteratorHasDomainShape[507141]
    }
    label _end_chpl_iteratorHasDomainShape[507141]
    (507145 return ret[507143])
  }
  function chpl_iteratorHasRangeShape[53057](arg ir[53054]:_iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    unknown ret[507159] "RVV" "param" "temp"
    unknown call_tmp[609794] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (609797 'move' call_tmp[609794](53061 'typeof' ir[53054]))
    unknown call_tmp[609799] "expr temp" "maybe param" "maybe type" "temp"
    (609802 'move' call_tmp[609799](53064 call hasField call_tmp[609794] "_shape_"))
    unknown call_tmp[609804] "expr temp" "maybe param" "maybe type" "temp"
    (609807 'move' call_tmp[609804](53078 call _cond_test call_tmp[609799]))
    if call_tmp[609804]
    {
      { scopeless type
        unknown call_type_tmp[491608] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[609811] "expr temp" "maybe param" "maybe type" "temp"
        (609814 'move' call_tmp[609811](53067 call _shape_ _mt[243] ir[53054]))
        (491612 'move' call_type_tmp[491608](53070 'typeof' call_tmp[609811]))
      }
      unknown call_tmp[609816] "expr temp" "maybe param" "maybe type" "temp"
      (609819 'move' call_tmp[609816](53072 call isRange call_type_tmp[491608]))
      (507164 'move' ret[507159](507163 'deref' call_tmp[609816]))
      gotoReturn _end_chpl_iteratorHasRangeShape[507157] _end_chpl_iteratorHasRangeShape[507157]
    }
    {
      (507169 'move' ret[507159](507168 'deref' 0))
      gotoReturn _end_chpl_iteratorHasRangeShape[507157] _end_chpl_iteratorHasRangeShape[507157]
    }
    label _end_chpl_iteratorHasRangeShape[507157]
    (507161 return ret[507159])
  }
  function chpl_iteratorShapeStaticTypeOrNothing[53093](arg ir[53090]:_iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown ret[507175] "RVV" "temp" "type variable"
    unknown call_tmp[609821] "expr temp" "maybe param" "maybe type" "temp"
    (609824 'move' call_tmp[609821](53099 call hasField ir[53090] "_shape_"))
    unknown call_tmp[609826] "expr temp" "maybe param" "maybe type" "temp"
    (609829 'move' call_tmp[609826](53110 call _cond_test call_tmp[609821]))
    if call_tmp[609826]
    {
      unknown call_tmp[609831] "expr temp" "maybe param" "maybe type" "temp"
      (609834 'move' call_tmp[609831](53104 'static field type' ir[53090] "_shape_"))
      (507180 'move' ret[507175](507179 'deref' call_tmp[609831]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrNothing[507173] _end_chpl_iteratorShapeStaticTypeOrNothing[507173]
    }
    {
      (507185 'move' ret[507175](507184 'deref' nothing[7]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrNothing[507173] _end_chpl_iteratorShapeStaticTypeOrNothing[507173]
    }
    label _end_chpl_iteratorShapeStaticTypeOrNothing[507173]
    (507177 return ret[507175])
  }
  function chpl_iteratorFromForExpr[53125](arg ir[53122]:_iteratorRecord[205](?)) param : _unknown[51]
  {
    unknown ret[507191] "RVV" "param" "temp"
    unknown call_tmp[609836] "expr temp" "maybe param" "maybe type" "temp"
    (609839 'move' call_tmp[609836](53152 call canResolveMethod module=[255] Reflection[224901] ir[53122] "_fromForExpr_"))
    unknown call_tmp[609841] "expr temp" "maybe param" "maybe type" "temp"
    (609844 'move' call_tmp[609841](53162 call _cond_test call_tmp[609836]))
    if call_tmp[609841]
    {
      unknown call_tmp[609848] "expr temp" "maybe param" "maybe type" "temp"
      (609851 'move' call_tmp[609848](53154 call _fromForExpr_ _mt[243] ir[53122]))
      (507196 'move' ret[507191](507195 'deref' call_tmp[609848]))
      gotoReturn _end_chpl_iteratorFromForExpr[507189] _end_chpl_iteratorFromForExpr[507189]
    }
    {
      (507201 'move' ret[507191](507200 'deref' 0))
      gotoReturn _end_chpl_iteratorFromForExpr[507189] _end_chpl_iteratorFromForExpr[507189]
    }
    label _end_chpl_iteratorFromForExpr[507189]
    (507193 return ret[507191])
    (357282 'referenced modules list' Reflection[224901])
  }
  function chpl_iteratorFromForExpr[53175](arg arg[53173]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507207] "RVV" "param" "temp"
    (507212 'move' ret[507207](507211 'deref' 0))
    (507209 return ret[507207])
  }
  function _iteratorRecord[205](?).writeThis[53188](arg _mt[53193]:_MT[238], arg this[53190]:_iteratorRecord[205](?) :
  _iteratorRecord[205](?), arg f[53186]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown first[53197] "dead at end of block" "insert auto destroy"
    (540798 'init var' first[53197] 1 bool[10])
    (53200 'end of statement')
    {
      unknown _indexOfInterest[53245] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53246] "expr temp" "temp"
      (53255 'move' _iterator[53246](53253 call _getIterator this[53190]))
      Defer
      {
        {
          (53271 call _freeIterator _iterator[53246])
        }
      }
      { scopeless type
        (53260 'move' _indexOfInterest[53245](53257 call iteratorIndex _iterator[53246]))
      }
      ForLoop[53247]
      {
        unknown e[53264] "index var" "insert auto destroy"
        (474646 'end of statement')
        (53266 'move' e[53264] _indexOfInterest[53245])
        (474647 'end of statement' e[53264])
        {
          unknown call_tmp[609853] "expr temp" "maybe param" "maybe type" "temp"
          (609856 'move' call_tmp[609853](53205 call ! first[53197]))
          unknown call_tmp[609858] "expr temp" "maybe param" "maybe type" "temp"
          (609861 'move' call_tmp[609858](53233 call _cond_test call_tmp[609853]))
          if call_tmp[609858]
          {
            (53225 call <~> f[53186] " ")
          }
          {
            (53230 call = first[53197] 0)
            (474650 'end of statement' first[53197])
          }
          (53242 call <~> f[53186] e[53264])
          (474652 'end of statement' e[53264])
        }
        label _continueLabel[53250]
        _indexOfInterest[53245]
        _iterator[53246]
      }
      label _breakLabel[53251]
    }
    (507214 return _void[55])
  }
  function =[53286](ref arg ic[53283]:_iteratorRecord[205](?), arg xs[53288]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[53304] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53305] "expr temp" "temp"
      unknown call_tmp[609863] "expr temp" "maybe param" "maybe type" "temp"
      (609866 'move' call_tmp[609863](53314 call _getIterator ic[53283]))
      unknown call_tmp[609868] "expr temp" "maybe param" "maybe type" "temp"
      (609871 'move' call_tmp[609868](53317 call _getIterator xs[53288]))
      (53319 'move' _iterator[53305](53298 call _build_tuple call_tmp[609863] call_tmp[609868]))
      Defer
      {
        {
          (53349 call _freeIterator _iterator[53305])
        }
      }
      { scopeless type
        (53324 'move' _indexOfInterest[53304](53321 call iteratorIndex _iterator[53305]))
      }
      ForLoop[53306]
      {
        (53329 call _check_tuple_var_decl _indexOfInterest[53304] 2)
        (474655 'end of statement')
        unknown e[53335] "index var" "insert auto destroy"
        (474656 'end of statement')
        (53337 'move' e[53335](53333 call _indexOfInterest[53304] 0))
        (474657 'end of statement' e[53335])
        unknown x[53342] "index var" "insert auto destroy"
        (474659 'end of statement')
        (53344 'move' x[53342](53340 call _indexOfInterest[53304] 1))
        (474660 'end of statement' x[53342])
        (53301 call = e[53335] x[53342])
        (474662 'end of statement' e[53335] x[53342])
        label _continueLabel[53309]
        _indexOfInterest[53304]
        _iterator[53305]
      }
      label _breakLabel[53310]
    }
    (507216 return _void[55])
  }
  function =[53365](ref arg ic[53362]:_iteratorRecord[205](?), arg x[53371] :
  (53370 call iteratorIndexType ic[53362])) : _unknown[51] "assignop" "suppress lvalue error" "no return value for void"
  {
    {
      unknown _indexOfInterest[53381] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53382] "expr temp" "temp"
      (53391 'move' _iterator[53382](53389 call _getIterator ic[53362]))
      Defer
      {
        {
          (53407 call _freeIterator _iterator[53382])
        }
      }
      { scopeless type
        (53396 'move' _indexOfInterest[53381](53393 call iteratorIndex _iterator[53382]))
      }
      ForLoop[53383]
      {
        unknown e[53400] "index var" "insert auto destroy"
        (474666 'end of statement')
        (53402 'move' e[53400] _indexOfInterest[53381])
        (474667 'end of statement' e[53400])
        (53378 call = e[53400] x[53371])
        (474669 'end of statement' e[53400])
        label _continueLabel[53386]
        _indexOfInterest[53381]
        _iterator[53382]
      }
      label _breakLabel[53387]
    }
    (507218 return _void[55])
  }
  function _getIterator[53421](const  ref arg x[53419]:_any[178](?)) : _unknown[51] "inline" "no borrow convert" "suppress lvalue error"
  {
    unknown ret[507222] "RVV" "temp"
    unknown call_tmp[609875] "expr temp" "maybe param" "maybe type" "temp"
    (609878 'move' call_tmp[609875](53431 call(53427 call (partial) these _mt[243] x[53419])))
    unknown call_tmp[609880] "expr temp" "maybe param" "maybe type" "temp"
    (609883 'move' call_tmp[609880](53433 call _getIterator call_tmp[609875]))
    (507227 'move' ret[507222](507226 'deref' call_tmp[609880]))
    (507224 return ret[507222])
  }
  function _getIterator[53443](arg t[53441]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507231] "RVV" "temp"
    unknown call_tmp[609887] "expr temp" "maybe param" "maybe type" "temp"
    (609890 'move' call_tmp[609887](53451 call(53447 call (partial) these _mt[243] t[53441])))
    unknown call_tmp[609892] "expr temp" "maybe param" "maybe type" "temp"
    (609895 'move' call_tmp[609892](53453 call _getIterator call_tmp[609887]))
    (507236 'move' ret[507231](507235 'deref' call_tmp[609892]))
    (507233 return ret[507231])
  }
  function _getIteratorZip[53463](arg x[53461]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507240] "RVV" "temp"
    unknown call_tmp[609897] "expr temp" "maybe param" "maybe type" "temp"
    (609900 'move' call_tmp[609897](53468 call _getIterator x[53461]))
    (507245 'move' ret[507240](507244 'deref' call_tmp[609897]))
    (507242 return ret[507240])
  }
  function _getIteratorZip[53478](arg t[53476]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[507249] "RVV" "temp"
    unknown call_tmp[609902] "expr temp" "maybe param" "maybe type" "temp"
    (609905 'move' call_tmp[609902](53483 call _getIterator t[53476]))
    (507254 'move' ret[507249](507253 'deref' call_tmp[609902]))
    (507251 return ret[507249])
  }
  function _getIteratorZip[53495](arg x[53492]:_tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown ret[507274] "RVV" "temp"
    function _getIteratorZipInternal[53503](arg x[53500]:_tuple[56202](?), param arg dim[53506]:int(64)[13]) : _unknown[51] "inline"
    {
      unknown ret[507258] "RVV" "temp"
      unknown tmp[418517] "maybe param" "temp"
      unknown call_tmp[609907] "expr temp" "maybe param" "maybe type" "temp"
      (609910 'move' call_tmp[609907](53513 call x[53500] dim[53506]))
      (418528 'move' tmp[418517](53515 call isTuple call_tmp[609907]))
      unknown call_tmp[609912] "expr temp" "maybe param" "maybe type" "temp"
      (609915 'move' call_tmp[609912](418530 call _cond_invalid tmp[418517]))
      if call_tmp[609912]
      {
        (418533 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554460] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554461] "maybe param" "temp"
      unknown call_tmp[609917] "expr temp" "maybe param" "maybe type" "temp"
      (609920 'move' call_tmp[609917](418518 call isTrue tmp[418517]))
      (554466 'move' tmp[554461](554464 call _cond_test call_tmp[609917]))
      if tmp[554461]
      {
        unknown tmp[554468] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[609922] "expr temp" "maybe param" "maybe type" "temp"
        (609925 'move' call_tmp[609922](53520 call x[53500] dim[53506]))
        unknown call_tmp[609927] "expr temp" "maybe param" "maybe type" "temp"
        (609930 'move' call_tmp[609927](53522 call isHomogeneousTuple call_tmp[609922]))
        unknown call_tmp[609932] "expr temp" "maybe param" "maybe type" "temp"
        (609935 'move' call_tmp[609932](53523 call ! call_tmp[609927]))
        (554470 'move' tmp[554468](418521 call isTrue call_tmp[609932]))
        (554475 'move' tmp[554460](554472 '_paramFoldLogical' tmp[554461] tmp[554468]))
      }
      {
        (554480 'move' tmp[554460](554477 '_paramFoldLogical' tmp[554461] 0))
      }
      unknown call_tmp[609937] "expr temp" "maybe param" "maybe type" "temp"
      (609940 'move' call_tmp[609937](53548 call _cond_test tmp[554460]))
      if call_tmp[609937]
      {
        (53546 call compilerError "Heterogeneous tuples don't support zippered iteration yet")
      }
      unknown call_tmp[609944] "expr temp" "maybe param" "maybe type" "temp"
      (609947 'move' call_tmp[609944](53556 call size _mt[243] x[53500]))
      unknown call_tmp[609949] "expr temp" "maybe param" "maybe type" "temp"
      (609952 'move' call_tmp[609949](53560 call - call_tmp[609944] 1))
      unknown call_tmp[609954] "expr temp" "maybe param" "maybe type" "temp"
      (609957 'move' call_tmp[609954](53562 call == dim[53506] call_tmp[609949]))
      unknown call_tmp[609959] "expr temp" "maybe param" "maybe type" "temp"
      (609962 'move' call_tmp[609959](53596 call _cond_test call_tmp[609954]))
      if call_tmp[609959]
      {
        unknown call_tmp[609964] "expr temp" "maybe param" "maybe type" "temp"
        (609967 'move' call_tmp[609964](53568 call x[53500] dim[53506]))
        unknown call_tmp[609969] "expr temp" "maybe param" "maybe type" "temp"
        (609972 'move' call_tmp[609969](53570 call _getIterator call_tmp[609964]))
        unknown call_tmp[609974] "expr temp" "maybe param" "maybe type" "temp"
        (609977 'move' call_tmp[609974](53571 call _build_tuple call_tmp[609969]))
        (507263 'move' ret[507258](507262 'deref' call_tmp[609974]))
        gotoReturn _end__getIteratorZipInternal[507256] _end__getIteratorZipInternal[507256]
      }
      {
        unknown call_tmp[609979] "expr temp" "maybe param" "maybe type" "temp"
        (609982 'move' call_tmp[609979](53579 call x[53500] dim[53506]))
        unknown call_tmp[609984] "expr temp" "maybe param" "maybe type" "temp"
        (609987 'move' call_tmp[609984](53581 call _getIterator call_tmp[609979]))
        unknown call_tmp[609989] "expr temp" "maybe param" "maybe type" "temp"
        (609992 'move' call_tmp[609989](53587 call + dim[53506] 1))
        unknown call_tmp[609994] "expr temp" "maybe param" "maybe type" "temp"
        (609997 'move' call_tmp[609994](53589 call _getIteratorZipInternal x[53500] call_tmp[609989]))
        unknown call_tmp[609999] "expr temp" "maybe param" "maybe type" "temp"
        (610002 'move' call_tmp[609999](53592 call _build_tuple call_tmp[609984](53590 'expand_tuple' call_tmp[609994])))
        (507268 'move' ret[507258](507267 'deref' call_tmp[609999]))
        gotoReturn _end__getIteratorZipInternal[507256] _end__getIteratorZipInternal[507256]
      }
      label _end__getIteratorZipInternal[507256]
      (507260 return ret[507258])
    }
    unknown call_tmp[610006] "expr temp" "maybe param" "maybe type" "temp"
    (610009 'move' call_tmp[610006](53606 call size _mt[243] x[53492]))
    unknown call_tmp[610011] "expr temp" "maybe param" "maybe type" "temp"
    (610014 'move' call_tmp[610011](53610 call == call_tmp[610006] 1))
    unknown call_tmp[610016] "expr temp" "maybe param" "maybe type" "temp"
    (610019 'move' call_tmp[610016](53628 call _cond_test call_tmp[610011]))
    if call_tmp[610016]
    {
      unknown call_tmp[610021] "expr temp" "maybe param" "maybe type" "temp"
      (610024 'move' call_tmp[610021](53616 call x[53492] 0))
      unknown call_tmp[610026] "expr temp" "maybe param" "maybe type" "temp"
      (610029 'move' call_tmp[610026](53618 call _getIterator call_tmp[610021]))
      (507279 'move' ret[507274](507278 'deref' call_tmp[610026]))
      gotoReturn _end__getIteratorZip[507272] _end__getIteratorZip[507272]
    }
    {
      unknown call_tmp[610031] "expr temp" "maybe param" "maybe type" "temp"
      (610034 'move' call_tmp[610031](53625 call _getIteratorZipInternal x[53492] 0))
      (507284 'move' ret[507274](507283 'deref' call_tmp[610031]))
      gotoReturn _end__getIteratorZip[507272] _end__getIteratorZip[507272]
    }
    label _end__getIteratorZip[507272]
    (507276 return ret[507274])
  }
  function _getIteratorZip[53642](arg t[53639]:_tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown ret[507306] "RVV" "temp"
    function _getIteratorZipInternal[53650](arg t[53647]:_tuple[56202](?), param arg dim[53653]:int(64)[13]) : _unknown[51] "inline"
    {
      unknown ret[507290] "RVV" "temp"
      unknown call_tmp[610038] "expr temp" "maybe param" "maybe type" "temp"
      (610041 'move' call_tmp[610038](53658 call size _mt[243] t[53647]))
      unknown call_tmp[610043] "expr temp" "maybe param" "maybe type" "temp"
      (610046 'move' call_tmp[610043](53662 call - call_tmp[610038] 1))
      unknown call_tmp[610048] "expr temp" "maybe param" "maybe type" "temp"
      (610051 'move' call_tmp[610048](53664 call == dim[53653] call_tmp[610043]))
      unknown call_tmp[610053] "expr temp" "maybe param" "maybe type" "temp"
      (610056 'move' call_tmp[610053](53698 call _cond_test call_tmp[610048]))
      if call_tmp[610053]
      {
        unknown call_tmp[610058] "expr temp" "maybe param" "maybe type" "temp"
        (610061 'move' call_tmp[610058](53670 call t[53647] dim[53653]))
        unknown call_tmp[610063] "expr temp" "maybe param" "maybe type" "temp"
        (610066 'move' call_tmp[610063](53672 call _getIterator call_tmp[610058]))
        unknown call_tmp[610068] "expr temp" "maybe param" "maybe type" "temp"
        (610071 'move' call_tmp[610068](53673 call _build_tuple call_tmp[610063]))
        (507295 'move' ret[507290](507294 'deref' call_tmp[610068]))
        gotoReturn _end__getIteratorZipInternal[507288] _end__getIteratorZipInternal[507288]
      }
      {
        unknown call_tmp[610073] "expr temp" "maybe param" "maybe type" "temp"
        (610076 'move' call_tmp[610073](53681 call t[53647] dim[53653]))
        unknown call_tmp[610078] "expr temp" "maybe param" "maybe type" "temp"
        (610081 'move' call_tmp[610078](53683 call _getIterator call_tmp[610073]))
        unknown call_tmp[610083] "expr temp" "maybe param" "maybe type" "temp"
        (610086 'move' call_tmp[610083](53689 call + dim[53653] 1))
        unknown call_tmp[610088] "expr temp" "maybe param" "maybe type" "temp"
        (610091 'move' call_tmp[610088](53691 call _getIteratorZipInternal t[53647] call_tmp[610083]))
        unknown call_tmp[610093] "expr temp" "maybe param" "maybe type" "temp"
        (610096 'move' call_tmp[610093](53694 call _build_tuple call_tmp[610078](53692 'expand_tuple' call_tmp[610088])))
        (507300 'move' ret[507290](507299 'deref' call_tmp[610093]))
        gotoReturn _end__getIteratorZipInternal[507288] _end__getIteratorZipInternal[507288]
      }
      label _end__getIteratorZipInternal[507288]
      (507292 return ret[507290])
    }
    unknown call_tmp[610100] "expr temp" "maybe param" "maybe type" "temp"
    (610103 'move' call_tmp[610100](53709 call size _mt[243] t[53639]))
    unknown call_tmp[610105] "expr temp" "maybe param" "maybe type" "temp"
    (610108 'move' call_tmp[610105](53713 call == call_tmp[610100] 1))
    unknown call_tmp[610110] "expr temp" "maybe param" "maybe type" "temp"
    (610113 'move' call_tmp[610110](53731 call _cond_test call_tmp[610105]))
    if call_tmp[610110]
    {
      unknown call_tmp[610115] "expr temp" "maybe param" "maybe type" "temp"
      (610118 'move' call_tmp[610115](53719 call t[53639] 0))
      unknown call_tmp[610120] "expr temp" "maybe param" "maybe type" "temp"
      (610123 'move' call_tmp[610120](53721 call _getIterator call_tmp[610115]))
      (507311 'move' ret[507306](507310 'deref' call_tmp[610120]))
      gotoReturn _end__getIteratorZip[507304] _end__getIteratorZip[507304]
    }
    {
      unknown call_tmp[610125] "expr temp" "maybe param" "maybe type" "temp"
      (610128 'move' call_tmp[610125](53728 call _getIteratorZipInternal t[53639] 0))
      (507316 'move' ret[507306](507315 'deref' call_tmp[610125]))
      gotoReturn _end__getIteratorZip[507304] _end__getIteratorZip[507304]
    }
    label _end__getIteratorZip[507304]
    (507308 return ret[507306])
  }
  function _freeIterator[53745](arg ic[53742]:_iteratorClass[208](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[610130] "expr temp" "maybe param" "maybe type" "temp"
    (610133 'move' call_tmp[610130](53767 'cast_to_void_star' ic[53742]))
    (53769 call chpl_here_free call_tmp[610130])
    (507320 return _void[55])
  }
  function _freeIterator[53780](arg x[53777]:_tuple[56202](?)) : _unknown[51] "inline" "no return value for void"
  {
    {
      unknown i[53800] "dead at end of block" "insert auto destroy"
      (540800 'init var' i[53800] 0)
      (474686 'end of statement')
      unknown tmp[53801] "maybe param" "temp"
      unknown call_tmp[610137] "expr temp" "maybe param" "maybe type" "temp"
      (610140 'move' call_tmp[610137](53784 call size _mt[243] x[53777]))
      unknown call_tmp[610142] "expr temp" "maybe param" "maybe type" "temp"
      (610145 'move' call_tmp[610142](53788 call - call_tmp[610137] 1))
      (53813 'move' tmp[53801](53811 call chpl_compute_low_param_loop_bound 0 call_tmp[610142]))
      unknown tmp[53802] "maybe param" "temp"
      unknown call_tmp[610149] "expr temp" "maybe param" "maybe type" "temp"
      (610152 'move' call_tmp[610149](53820 call size _mt[243] x[53777]))
      unknown call_tmp[610154] "expr temp" "maybe param" "maybe type" "temp"
      (610157 'move' call_tmp[610154](53818 call - call_tmp[610149] 1))
      (53826 'move' tmp[53802](53824 call chpl_compute_high_param_loop_bound 0 call_tmp[610154]))
      unknown tmp[53803] "maybe param" "temp"
      (53829 'move' tmp[53803] 1)
      ParamForLoop[53831]
      { i[53800] tmp[53801] tmp[53802] tmp[53803]
        unknown call_tmp[610159] "expr temp" "maybe param" "maybe type" "temp"
        (610162 'move' call_tmp[610159](53796 call x[53777] i[53800]))
        (53798 call _freeIterator call_tmp[610159])
        (474687 'end of statement' i[53800])
      }
      label _unused_continueLabel[53805]
      label _breakLabel[53804]
    }
    (507322 return _void[55])
  }
  function _toLeader[53849](arg ir[53846]:_iteratorRecord[205](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507326] "RVV" "temp"
    unknown call_tmp[610164] "expr temp" "maybe param" "maybe type" "temp"
    (610167 'move' call_tmp[610164](53891 'to leader' ir[53846]))
    unknown call_tmp[610169] "expr temp" "maybe param" "maybe type" "temp"
    (610172 'move' call_tmp[610169](53893 call chpl__autoCopy call_tmp[610164]))
    (507331 'move' ret[507326](507330 'deref' call_tmp[610169]))
    (507328 return ret[507326])
  }
  where {
    (53870 'has leader' ir[53846])
  }
  function _toLeader[53904](arg x[53902]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507335] "RVV" "temp"
    unknown call_tmp[610176] "expr temp" "maybe param" "maybe type" "temp"
    (610179 'move' call_tmp[610176](53931 call(53927 call (partial) these _mt[243] x[53902])))
    unknown call_tmp[610181] "expr temp" "maybe param" "maybe type" "temp"
    (610184 'move' call_tmp[610181](53933 call _toLeader call_tmp[610176]))
    (507340 'move' ret[507335](507339 'deref' call_tmp[610181]))
    (507337 return ret[507335])
  }
  where {
    unknown tmp[418538] "maybe param" "temp"
    unknown call_tmp[610186] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (610189 'move' call_tmp[610186](53908 'typeof' x[53902]))
    unknown call_tmp[610191] "expr temp" "maybe param" "maybe type" "temp"
    (610194 'move' call_tmp[610191](354251 'is_subtype' _iteratorRecord[205](?) call_tmp[610186]))
    (418549 'move' tmp[418538](53912 call ! call_tmp[610191]))
    unknown call_tmp[610196] "expr temp" "maybe param" "maybe type" "temp"
    (610199 'move' call_tmp[610196](418551 call _cond_invalid tmp[418538]))
    if call_tmp[610196]
    {
      (418554 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554487] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554488] "maybe param" "temp"
    unknown call_tmp[610201] "expr temp" "maybe param" "maybe type" "temp"
    (610204 'move' call_tmp[610201](418539 call isTrue tmp[418538]))
    (554493 'move' tmp[554488](554491 call _cond_test call_tmp[610201]))
    if tmp[554488]
    {
      unknown tmp[554495] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610208] "expr temp" "maybe param" "maybe type" "temp"
      (610211 'move' call_tmp[610208](53921 call(53917 call (partial) these _mt[243] x[53902])))
      unknown call_tmp[610213] "expr temp" "maybe param" "maybe type" "temp"
      (610216 'move' call_tmp[610213](53922 'has leader' call_tmp[610208]))
      (554497 'move' tmp[554495](418542 call isTrue call_tmp[610213]))
      (554502 'move' tmp[554487](554499 '_paramFoldLogical' tmp[554488] tmp[554495]))
    }
    {
      (554507 'move' tmp[554487](554504 '_paramFoldLogical' tmp[554488] 0))
    }
    (748199 call chpl_statementLevelSymbol tmp[554487])
  }
  function _toLeaderZip[53944](arg x[53942]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507344] "RVV" "temp"
    unknown call_tmp[610218] "expr temp" "maybe param" "maybe type" "temp"
    (610221 'move' call_tmp[610218](53983 call _toLeader x[53942]))
    (507349 'move' ret[507344](507348 'deref' call_tmp[610218]))
    (507346 return ret[507344])
  }
  where {
    unknown tmp[418559] "maybe param" "temp"
    unknown call_tmp[610223] "expr temp" "maybe param" "maybe type" "temp"
    (610226 'move' call_tmp[610223](53949 call isTuple x[53942]))
    (418570 'move' tmp[418559](53950 call ! call_tmp[610223]))
    unknown call_tmp[610228] "expr temp" "maybe param" "maybe type" "temp"
    (610231 'move' call_tmp[610228](418572 call _cond_invalid tmp[418559]))
    if call_tmp[610228]
    {
      (418575 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554514] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554515] "maybe param" "temp"
    unknown call_tmp[610233] "expr temp" "maybe param" "maybe type" "temp"
    (610236 'move' call_tmp[610233](418560 call isTrue tmp[418559]))
    (554520 'move' tmp[554515](554518 call _cond_test call_tmp[610233]))
    if tmp[554515]
    {
      unknown tmp[554522] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610238] "expr temp" "maybe param" "maybe type" "temp"
      (610241 'move' call_tmp[610238](53977 call canResolve module=[255] Reflection[224901] "_toLeader" x[53942]))
      (554524 'move' tmp[554522](418563 call isTrue call_tmp[610238]))
      (554529 'move' tmp[554514](554526 '_paramFoldLogical' tmp[554515] tmp[554522]))
    }
    {
      (554534 'move' tmp[554514](554531 '_paramFoldLogical' tmp[554515] 0))
    }
    (748201 call chpl_statementLevelSymbol tmp[554514])
    (357299 'referenced modules list' Reflection[224901])
  }
  function _toLeaderZip[53996](arg x[53993]:_tuple[56202](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507353] "RVV" "temp"
    unknown call_tmp[610243] "expr temp" "maybe param" "maybe type" "temp"
    (610246 'move' call_tmp[610243](54013 call x[53993] 0))
    unknown call_tmp[610248] "expr temp" "maybe param" "maybe type" "temp"
    (610251 'move' call_tmp[610248](54015 call _toLeader call_tmp[610243]))
    (507358 'move' ret[507353](507357 'deref' call_tmp[610248]))
    (507355 return ret[507353])
  }
  where {
    unknown call_tmp[610253] "expr temp" "maybe param" "maybe type" "temp"
    (610256 'move' call_tmp[610253](54007 call x[53993] 0))
    (54008 call canResolve module=[255] Reflection[224901] "_toLeader" call_tmp[610253])
    (357305 'referenced modules list' Reflection[224901])
  }
  function _toStandalone[54028](arg iterator[54025]:_iteratorClass[208](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507362] "RVV" "temp"
    unknown call_tmp[610258] "expr temp" "maybe param" "maybe type" "temp"
    (610261 'move' call_tmp[610258](54050 'to standalone' iterator[54025]))
    unknown call_tmp[610263] "expr temp" "maybe param" "maybe type" "temp"
    (610266 'move' call_tmp[610263](54052 call chpl__autoCopy call_tmp[610258]))
    (507367 'move' ret[507362](507366 'deref' call_tmp[610263]))
    (507364 return ret[507362])
  }
  function _toStandalone[54064](arg ir[54061]:_iteratorRecord[205](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507371] "RVV" "temp"
    unknown call_tmp[610268] "maybe param" "maybe type" "temp"
    (610271 'move' call_tmp[610268](54069 call _getIterator ir[54061]))
    unknown ic[54070] "dead at end of block" "insert auto destroy" "no copy"
    (540802 'init var' ic[54070] call_tmp[610268])
    (54073 'end of statement')
    unknown call_tmp[610273] "maybe param" "maybe type" "temp"
    (610276 'move' call_tmp[610273](54078 call _toStandalone ic[54070]))
    unknown standalone[54079] "dead at end of block" "insert auto destroy" "no copy"
    (540804 'init var' standalone[54079] call_tmp[610273])
    (54082 'end of statement' ic[54070])
    (54086 call _freeIterator ic[54070])
    (474695 'end of statement' ic[54070])
    (507376 'move' ret[507371](507375 'deref' standalone[54079]))
    gotoReturn _end__toStandalone[507369] _end__toStandalone[507369]
    (474697 'end of statement' standalone[54079])
    label _end__toStandalone[507369]
    (507373 return ret[507371])
  }
  function _toStandalone[54097](arg x[54095]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507382] "RVV" "temp"
    unknown call_tmp[610280] "expr temp" "maybe param" "maybe type" "temp"
    (610283 'move' call_tmp[610280](54105 call(54101 call (partial) these _mt[243] x[54095])))
    unknown call_tmp[610285] "expr temp" "maybe param" "maybe type" "temp"
    (610288 'move' call_tmp[610285](54107 call _toStandalone call_tmp[610280]))
    (507387 'move' ret[507382](507386 'deref' call_tmp[610285]))
    (507384 return ret[507382])
  }
  function _toLeader[54119](arg ir[54116]:_iteratorRecord[205](?), arg args[54122]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507391] "RVV" "temp"
    unknown call_tmp[610290] "expr temp" "maybe param" "maybe type" "temp"
    (610293 'move' call_tmp[610290](54131 'to leader' ir[54116](54130 'expand_tuple' args[54122])))
    unknown call_tmp[610295] "expr temp" "maybe param" "maybe type" "temp"
    (610298 'move' call_tmp[610295](54133 call chpl__autoCopy call_tmp[610290]))
    (507396 'move' ret[507391](507395 'deref' call_tmp[610295]))
    (507393 return ret[507391])
  }
  function _toLeader[54143](arg x[54141]:_any[178](?), arg args[54146]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507400] "RVV" "temp"
    unknown call_tmp[610302] "expr temp" "maybe param" "maybe type" "temp"
    (610305 'move' call_tmp[610302](54155 call(54151 call (partial) these _mt[243] x[54141])))
    unknown call_tmp[610307] "expr temp" "maybe param" "maybe type" "temp"
    (610310 'move' call_tmp[610307](54159 call _toLeader call_tmp[610302](54158 'expand_tuple' args[54146])))
    (507405 'move' ret[507400](507404 'deref' call_tmp[610307]))
    (507402 return ret[507400])
  }
  function _toLeaderZip[54169](arg x[54167]:_any[178](?), arg args[54172]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507409] "RVV" "temp"
    unknown call_tmp[610312] "expr temp" "maybe param" "maybe type" "temp"
    (610315 'move' call_tmp[610312](54180 call _toLeader x[54167](54179 'expand_tuple' args[54172])))
    (507414 'move' ret[507409](507413 'deref' call_tmp[610312]))
    (507411 return ret[507409])
  }
  function _toLeaderZip[54192](arg x[54189]:_tuple[56202](?), arg args[54195]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507418] "RVV" "temp"
    unknown call_tmp[610317] "expr temp" "maybe param" "maybe type" "temp"
    (610320 'move' call_tmp[610317](54202 call x[54189] 0))
    unknown call_tmp[610322] "expr temp" "maybe param" "maybe type" "temp"
    (610325 'move' call_tmp[610322](54206 call _toLeader call_tmp[610317](54205 'expand_tuple' args[54195])))
    (507423 'move' ret[507418](507422 'deref' call_tmp[610322]))
    (507420 return ret[507418])
  }
  function _toStandalone[54218](arg iterator[54215]:_iteratorClass[208](?), arg args[54221]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507427] "RVV" "temp"
    unknown call_tmp[610327] "expr temp" "maybe param" "maybe type" "temp"
    (610330 'move' call_tmp[610327](54230 'to standalone' iterator[54215](54229 'expand_tuple' args[54221])))
    unknown call_tmp[610332] "expr temp" "maybe param" "maybe type" "temp"
    (610335 'move' call_tmp[610332](54232 call chpl__autoCopy call_tmp[610327]))
    (507432 'move' ret[507427](507431 'deref' call_tmp[610332]))
    (507429 return ret[507427])
  }
  function _toStandalone[54244](arg ir[54241]:_iteratorRecord[205](?), arg args[54247]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[507436] "RVV" "temp"
    unknown call_tmp[610337] "maybe param" "maybe type" "temp"
    (610340 'move' call_tmp[610337](54253 call _getIterator ir[54241]))
    unknown ic[54254] "dead at end of block" "insert auto destroy" "no copy"
    (540806 'init var' ic[54254] call_tmp[610337])
    (54257 'end of statement')
    unknown call_tmp[610342] "maybe param" "maybe type" "temp"
    (610345 'move' call_tmp[610342](54264 call _toStandalone ic[54254](54263 'expand_tuple' args[54247])))
    unknown standalone[54265] "dead at end of block" "insert auto destroy" "no copy"
    (540808 'init var' standalone[54265] call_tmp[610342])
    (54268 'end of statement' ic[54254])
    (54272 call _freeIterator ic[54254])
    (474706 'end of statement' ic[54254])
    (507441 'move' ret[507436](507440 'deref' standalone[54265]))
    gotoReturn _end__toStandalone[507434] _end__toStandalone[507434]
    (474708 'end of statement' standalone[54265])
    label _end__toStandalone[507434]
    (507438 return ret[507436])
  }
  function _toStandalone[54283](arg x[54281]:_any[178](?), arg args[54286]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507447] "RVV" "temp"
    unknown call_tmp[610349] "expr temp" "maybe param" "maybe type" "temp"
    (610352 'move' call_tmp[610349](54295 call(54291 call (partial) these _mt[243] x[54281])))
    unknown call_tmp[610354] "expr temp" "maybe param" "maybe type" "temp"
    (610357 'move' call_tmp[610354](54299 call _toStandalone call_tmp[610349](54298 'expand_tuple' args[54286])))
    (507452 'move' ret[507447](507451 'deref' call_tmp[610354]))
    (507449 return ret[507447])
  }
  function chpl__canHaveFastFollowers[54309](arg x[54307]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507456] "RVV" "param" "temp"
    (507461 'move' ret[507456](507460 'deref' 0))
    (507458 return ret[507456])
  }
  function chpl__canHaveFastFollowers[54325](arg x[54322]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[507465] "RVV" "param" "temp"
    (507470 'move' ret[507465](507469 'deref' 1))
    (507467 return ret[507465])
  }
  function chpl__canHaveFastFollowersZip[54339](arg x[54336]:_tuple[56202](?)) param : _unknown[51]
  {
    unknown ret[507474] "RVV" "param" "temp"
    unknown call_tmp[610359] "expr temp" "maybe param" "maybe type" "temp"
    (610362 'move' call_tmp[610359](54345 call chpl__canHaveFastFollowersZipHelp x[54336] 0))
    (507479 'move' ret[507474](507478 'deref' call_tmp[610359]))
    (507476 return ret[507474])
  }
  function chpl__canHaveFastFollowersZipHelp[54357](arg x[54354]:_tuple[56202](?), param arg dim[54359]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507483] "RVV" "param" "temp"
    unknown call_tmp[610366] "expr temp" "maybe param" "maybe type" "temp"
    (610369 'move' call_tmp[610366](54362 call size _mt[243] x[54354]))
    unknown call_tmp[610371] "expr temp" "maybe param" "maybe type" "temp"
    (610374 'move' call_tmp[610371](54366 call - call_tmp[610366] 1))
    unknown call_tmp[610376] "expr temp" "maybe param" "maybe type" "temp"
    (610379 'move' call_tmp[610376](54369 call == call_tmp[610371] dim[54359]))
    unknown call_tmp[610381] "expr temp" "maybe param" "maybe type" "temp"
    (610384 'move' call_tmp[610381](54399 call _cond_test call_tmp[610376]))
    if call_tmp[610381]
    {
      unknown call_tmp[610386] "expr temp" "maybe param" "maybe type" "temp"
      (610389 'move' call_tmp[610386](54375 call x[54354] dim[54359]))
      unknown call_tmp[610391] "expr temp" "maybe param" "maybe type" "temp"
      (610394 'move' call_tmp[610391](54377 call chpl__canHaveFastFollowers call_tmp[610386]))
      (507488 'move' ret[507483](507487 'deref' call_tmp[610391]))
      gotoReturn _end_chpl__canHaveFastFollowersZipHelp[507481] _end_chpl__canHaveFastFollowersZipHelp[507481]
    }
    {
      unknown tmp[418580] "maybe param" "temp"
      unknown call_tmp[610396] "expr temp" "maybe param" "maybe type" "temp"
      (610399 'move' call_tmp[610396](54384 call x[54354] dim[54359]))
      (418591 'move' tmp[418580](54386 call chpl__canHaveFastFollowers call_tmp[610396]))
      unknown call_tmp[610401] "expr temp" "maybe param" "maybe type" "temp"
      (610404 'move' call_tmp[610401](418593 call _cond_invalid tmp[418580]))
      if call_tmp[610401]
      {
        (418596 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[554541] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554542] "maybe param" "temp"
      unknown call_tmp[610406] "expr temp" "maybe param" "maybe type" "temp"
      (610409 'move' call_tmp[610406](418581 call isTrue tmp[418580]))
      (554547 'move' tmp[554542](554545 call _cond_test call_tmp[610406]))
      if tmp[554542]
      {
        (554552 'move' tmp[554541](554549 '_paramFoldLogical' tmp[554542] 1))
      }
      {
        unknown tmp[554554] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610411] "expr temp" "maybe param" "maybe type" "temp"
        (610414 'move' call_tmp[610411](54392 call + dim[54359] 1))
        unknown call_tmp[610416] "expr temp" "maybe param" "maybe type" "temp"
        (610419 'move' call_tmp[610416](54394 call chpl__canHaveFastFollowersZipHelp x[54354] call_tmp[610411]))
        (554556 'move' tmp[554554](418585 call isTrue call_tmp[610416]))
        (554561 'move' tmp[554541](554558 '_paramFoldLogical' tmp[554542] tmp[554554]))
      }
      (507493 'move' ret[507483](507492 'deref' tmp[554541]))
      gotoReturn _end_chpl__canHaveFastFollowersZipHelp[507481] _end_chpl__canHaveFastFollowersZipHelp[507481]
    }
    label _end_chpl__canHaveFastFollowersZipHelp[507481]
    (507485 return ret[507483])
  }
  function chpl__canLeadFastFollowers[54412](arg x[54410]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507499] "RVV" "param" "temp"
    unknown tmp[418601] "maybe param" "temp"
    (418612 'move' tmp[418601](54417 call isDomain x[54410]))
    unknown call_tmp[610421] "expr temp" "maybe param" "maybe type" "temp"
    (610424 'move' call_tmp[610421](418614 call _cond_invalid tmp[418601]))
    if call_tmp[610421]
    {
      (418617 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[554568] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554569] "maybe param" "temp"
    unknown call_tmp[610426] "expr temp" "maybe param" "maybe type" "temp"
    (610429 'move' call_tmp[610426](418602 call isTrue tmp[418601]))
    (554574 'move' tmp[554569](554572 call _cond_test call_tmp[610426]))
    if tmp[554569]
    {
      (554579 'move' tmp[554568](554576 '_paramFoldLogical' tmp[554569] 1))
    }
    {
      unknown tmp[554581] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610431] "expr temp" "maybe param" "maybe type" "temp"
      (610434 'move' call_tmp[610431](54421 call isArray x[54410]))
      (554583 'move' tmp[554581](418606 call isTrue call_tmp[610431]))
      (554588 'move' tmp[554568](554585 '_paramFoldLogical' tmp[554569] tmp[554581]))
    }
    (507504 'move' ret[507499](507503 'deref' tmp[554568]))
    (507501 return ret[507499])
  }
  function chpl__hasInertFastFollowers[54433](arg x[54431]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507508] "RVV" "param" "temp"
    (507513 'move' ret[507508](507512 'deref' 1))
    (507510 return ret[507508])
  }
  function chpl__hasInertFastFollowers[54449](arg x[54446]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[507517] "RVV" "param" "temp"
    (507522 'move' ret[507517](507521 'deref' 0))
    (507519 return ret[507517])
  }
  function chpl__hasInertFastFollowersZip[54463](arg x[54460]:_tuple[56202](?)) param : _unknown[51]
  {
    unknown ret[507526] "RVV" "param" "temp"
    unknown call_tmp[610436] "expr temp" "maybe param" "maybe type" "temp"
    (610439 'move' call_tmp[610436](54469 call chpl__hasInertFastFollowersZipHelp x[54460] 0))
    (507531 'move' ret[507526](507530 'deref' call_tmp[610436]))
    (507528 return ret[507526])
  }
  function chpl__hasInertFastFollowersZipHelp[54481](arg x[54478]:_tuple[56202](?), param arg dim[54483]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507535] "RVV" "param" "temp"
    unknown call_tmp[610443] "expr temp" "maybe param" "maybe type" "temp"
    (610446 'move' call_tmp[610443](54486 call size _mt[243] x[54478]))
    unknown call_tmp[610448] "expr temp" "maybe param" "maybe type" "temp"
    (610451 'move' call_tmp[610448](54490 call - call_tmp[610443] 1))
    unknown call_tmp[610453] "expr temp" "maybe param" "maybe type" "temp"
    (610456 'move' call_tmp[610453](54493 call == call_tmp[610448] dim[54483]))
    unknown call_tmp[610458] "expr temp" "maybe param" "maybe type" "temp"
    (610461 'move' call_tmp[610458](54525 call _cond_test call_tmp[610453]))
    if call_tmp[610458]
    {
      unknown call_tmp[610463] "expr temp" "maybe param" "maybe type" "temp"
      (610466 'move' call_tmp[610463](54499 call x[54478] dim[54483]))
      unknown call_tmp[610468] "expr temp" "maybe param" "maybe type" "temp"
      (610471 'move' call_tmp[610468](54501 call chpl__hasInertFastFollowers call_tmp[610463]))
      (507540 'move' ret[507535](507539 'deref' call_tmp[610468]))
      gotoReturn _end_chpl__hasInertFastFollowersZipHelp[507533] _end_chpl__hasInertFastFollowersZipHelp[507533]
    }
    {
      unknown tmp[418622] "maybe param" "temp"
      unknown call_tmp[610473] "expr temp" "maybe param" "maybe type" "temp"
      (610476 'move' call_tmp[610473](54509 call x[54478] dim[54483]))
      (418633 'move' tmp[418622](54511 call chpl__hasInertFastFollowers call_tmp[610473]))
      unknown call_tmp[610478] "expr temp" "maybe param" "maybe type" "temp"
      (610481 'move' call_tmp[610478](418635 call _cond_invalid tmp[418622]))
      if call_tmp[610478]
      {
        (418638 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554595] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554596] "maybe param" "temp"
      unknown call_tmp[610483] "expr temp" "maybe param" "maybe type" "temp"
      (610486 'move' call_tmp[610483](418623 call isTrue tmp[418622]))
      (554601 'move' tmp[554596](554599 call _cond_test call_tmp[610483]))
      if tmp[554596]
      {
        unknown tmp[554603] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610488] "expr temp" "maybe param" "maybe type" "temp"
        (610491 'move' call_tmp[610488](54517 call + dim[54483] 1))
        unknown call_tmp[610493] "expr temp" "maybe param" "maybe type" "temp"
        (610496 'move' call_tmp[610493](54519 call chpl__hasInertFastFollowersZipHelp x[54478] call_tmp[610488]))
        (554605 'move' tmp[554603](418626 call isTrue call_tmp[610493]))
        (554610 'move' tmp[554595](554607 '_paramFoldLogical' tmp[554596] tmp[554603]))
      }
      {
        (554615 'move' tmp[554595](554612 '_paramFoldLogical' tmp[554596] 0))
      }
      (507545 'move' ret[507535](507544 'deref' tmp[554595]))
      gotoReturn _end_chpl__hasInertFastFollowersZipHelp[507533] _end_chpl__hasInertFastFollowersZipHelp[507533]
    }
    label _end_chpl__hasInertFastFollowersZipHelp[507533]
    (507537 return ret[507535])
  }
  function chpl__staticFastFollowCheck[54536](arg x[54534]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507551] "RVV" "param" "temp"
    const lead[54539] "dead at end of block" "const" "insert auto destroy" "no copy"
    (540810 'init var' lead[54539] x[54534])
    (54542 'end of statement')
    unknown call_tmp[610498] "expr temp" "maybe param" "maybe type" "temp"
    (610501 'move' call_tmp[610498](54547 call chpl__canHaveFastFollowers lead[54539]))
    unknown call_tmp[610503] "expr temp" "maybe param" "maybe type" "temp"
    (610506 'move' call_tmp[610503](54559 call _cond_test call_tmp[610498]))
    if call_tmp[610503]
    {
      unknown call_tmp[610508] "expr temp" "maybe param" "maybe type" "temp"
      (610511 'move' call_tmp[610508](54552 call chpl__staticFastFollowCheck x[54534] lead[54539]))
      (507556 'move' ret[507551](507555 'deref' call_tmp[610508]))
      gotoReturn _end_chpl__staticFastFollowCheck[507549] _end_chpl__staticFastFollowCheck[507549]
      (474725 'end of statement' lead[54539])
    }
    {
      (507561 'move' ret[507551](507560 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheck[507549] _end_chpl__staticFastFollowCheck[507549]
    }
    label _end_chpl__staticFastFollowCheck[507549]
    (507553 return ret[507551])
  }
  function chpl__staticFastFollowCheck[54570](arg x[54568]:_any[178](?), arg lead[54572]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507567] "RVV" "param" "temp"
    unknown call_tmp[610513] "expr temp" "maybe param" "maybe type" "temp"
    (610516 'move' call_tmp[610513](54577 call chpl__hasInertFastFollowers x[54568]))
    (507572 'move' ret[507567](507571 'deref' call_tmp[610513]))
    (507569 return ret[507567])
  }
  function chpl__staticFastFollowCheck[54591](arg x[54588]:_array[133594](?), arg lead[54593]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[507576] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[491614] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610520] "expr temp" "maybe param" "maybe type" "temp"
      (610523 'move' call_tmp[610520](54607 call _value _mt[243] lead[54593]))
      (491618 'move' call_type_tmp[491614](54610 'typeof' call_tmp[610520]))
    }
    unknown call_tmp[610527] "expr temp" "maybe param" "maybe type" "temp"
    (610530 'move' call_tmp[610527](54598 call _value _mt[243] x[54588]))
    unknown call_tmp[610534] "expr temp" "maybe param" "maybe type" "temp"
    (610537 'move' call_tmp[610534](54612 call(54603 call (partial) dsiStaticFastFollowCheck _mt[243] call_tmp[610527]) call_type_tmp[491614]))
    (507581 'move' ret[507576](507580 'deref' call_tmp[610534]))
    (507578 return ret[507576])
  }
  function chpl__staticFastFollowCheckZip[54624](arg x[54621]:_tuple[56202](?)) param : _unknown[51]
  {
    unknown ret[507585] "RVV" "param" "temp"
    unknown call_tmp[610539] "expr temp" "maybe param" "maybe type" "temp"
    (610542 'move' call_tmp[610539](54629 call chpl__canHaveFastFollowersZip x[54621]))
    unknown call_tmp[610544] "expr temp" "maybe param" "maybe type" "temp"
    (610547 'move' call_tmp[610544](54630 call ! call_tmp[610539]))
    unknown call_tmp[610549] "expr temp" "maybe param" "maybe type" "temp"
    (610552 'move' call_tmp[610549](54665 call _cond_test call_tmp[610544]))
    if call_tmp[610549]
    {
      (507590 'move' ret[507585](507589 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507583] _end_chpl__staticFastFollowCheckZip[507583]
    }
    {
      unknown call_tmp[610554] "maybe param" "maybe type" "temp"
      (610557 'move' call_tmp[610554](54639 call x[54621] 0))
      const lead[54640] "dead at end of block" "const" "insert auto destroy" "no copy"
      (540812 'init var' lead[54640] call_tmp[610554])
      (54643 'end of statement')
      unknown call_tmp[610559] "expr temp" "maybe param" "maybe type" "temp"
      (610562 'move' call_tmp[610559](54648 call chpl__canLeadFastFollowers lead[54640]))
      unknown call_tmp[610564] "expr temp" "maybe param" "maybe type" "temp"
      (610567 'move' call_tmp[610564](54659 call _cond_test call_tmp[610559]))
      if call_tmp[610564]
      {
        unknown call_tmp[610569] "expr temp" "maybe param" "maybe type" "temp"
        (610572 'move' call_tmp[610569](54653 call chpl__staticFastFollowCheckZip x[54621] lead[54640]))
        (507595 'move' ret[507585](507594 'deref' call_tmp[610569]))
        gotoReturn _end_chpl__staticFastFollowCheckZip[507583] _end_chpl__staticFastFollowCheckZip[507583]
        (474731 'end of statement' lead[54640])
      }
      {
        (507600 'move' ret[507585](507599 'deref' 0))
        gotoReturn _end_chpl__staticFastFollowCheckZip[507583] _end_chpl__staticFastFollowCheckZip[507583]
      }
    }
    label _end_chpl__staticFastFollowCheckZip[507583]
    (507587 return ret[507585])
  }
  function chpl__staticFastFollowCheckZip[54678](arg x[54675]:_tuple[56202](?), arg lead[54680]:_any[178](?), param arg dim[54683] :
  0 =
  0) param : _unknown[51]
  {
    unknown ret[507606] "RVV" "param" "temp"
    unknown call_tmp[610576] "expr temp" "maybe param" "maybe type" "temp"
    (610579 'move' call_tmp[610576](54687 call size _mt[243] x[54675]))
    unknown call_tmp[610581] "expr temp" "maybe param" "maybe type" "temp"
    (610584 'move' call_tmp[610581](54691 call - call_tmp[610576] 1))
    unknown call_tmp[610586] "expr temp" "maybe param" "maybe type" "temp"
    (610589 'move' call_tmp[610586](54694 call == call_tmp[610581] dim[54683]))
    unknown call_tmp[610591] "expr temp" "maybe param" "maybe type" "temp"
    (610594 'move' call_tmp[610591](54727 call _cond_test call_tmp[610586]))
    if call_tmp[610591]
    {
      unknown call_tmp[610596] "expr temp" "maybe param" "maybe type" "temp"
      (610599 'move' call_tmp[610596](54700 call x[54675] dim[54683]))
      unknown call_tmp[610601] "expr temp" "maybe param" "maybe type" "temp"
      (610604 'move' call_tmp[610601](54703 call chpl__staticFastFollowCheck call_tmp[610596] lead[54680]))
      (507611 'move' ret[507606](507610 'deref' call_tmp[610601]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507604] _end_chpl__staticFastFollowCheckZip[507604]
    }
    {
      unknown tmp[418643] "maybe param" "temp"
      unknown call_tmp[610606] "expr temp" "maybe param" "maybe type" "temp"
      (610609 'move' call_tmp[610606](54710 call x[54675] dim[54683]))
      (418654 'move' tmp[418643](54713 call chpl__staticFastFollowCheck call_tmp[610606] lead[54680]))
      unknown call_tmp[610611] "expr temp" "maybe param" "maybe type" "temp"
      (610614 'move' call_tmp[610611](418656 call _cond_invalid tmp[418643]))
      if call_tmp[610611]
      {
        (418659 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554622] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554623] "maybe param" "temp"
      unknown call_tmp[610616] "expr temp" "maybe param" "maybe type" "temp"
      (610619 'move' call_tmp[610616](418644 call isTrue tmp[418643]))
      (554628 'move' tmp[554623](554626 call _cond_test call_tmp[610616]))
      if tmp[554623]
      {
        unknown tmp[554630] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610621] "expr temp" "maybe param" "maybe type" "temp"
        (610624 'move' call_tmp[610621](54720 call + dim[54683] 1))
        unknown call_tmp[610626] "expr temp" "maybe param" "maybe type" "temp"
        (610629 'move' call_tmp[610626](54722 call chpl__staticFastFollowCheckZip x[54675] lead[54680] call_tmp[610621]))
        (554632 'move' tmp[554630](418647 call isTrue call_tmp[610626]))
        (554637 'move' tmp[554622](554634 '_paramFoldLogical' tmp[554623] tmp[554630]))
      }
      {
        (554642 'move' tmp[554622](554639 '_paramFoldLogical' tmp[554623] 0))
      }
      (507616 'move' ret[507606](507615 'deref' tmp[554622]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[507604] _end_chpl__staticFastFollowCheckZip[507604]
    }
    label _end_chpl__staticFastFollowCheckZip[507604]
    (507608 return ret[507606])
  }
  function chpl__dynamicFastFollowCheck[54740](arg x[54738]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507622] "RVV" "temp"
    unknown call_tmp[610631] "expr temp" "maybe param" "maybe type" "temp"
    (610634 'move' call_tmp[610631](54745 call chpl__canHaveFastFollowers x[54738]))
    unknown call_tmp[610636] "expr temp" "maybe param" "maybe type" "temp"
    (610639 'move' call_tmp[610636](54758 call _cond_test call_tmp[610631]))
    if call_tmp[610636]
    {
      unknown call_tmp[610641] "expr temp" "maybe param" "maybe type" "temp"
      (610644 'move' call_tmp[610641](54750 call chpl__dynamicFastFollowCheck x[54738] x[54738]))
      (507627 'move' ret[507622](507626 'deref' call_tmp[610641]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507620] _end_chpl__dynamicFastFollowCheck[507620]
    }
    {
      (507632 'move' ret[507622](507631 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507620] _end_chpl__dynamicFastFollowCheck[507620]
    }
    label _end_chpl__dynamicFastFollowCheck[507620]
    (507624 return ret[507622])
  }
  function chpl__dynamicFastFollowCheck[54769](arg x[54767]:_any[178](?), arg lead[54771]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507638] "RVV" "temp"
    unknown call_tmp[610646] "expr temp" "maybe param" "maybe type" "temp"
    (610649 'move' call_tmp[610646](54776 call chpl__hasInertFastFollowers x[54767]))
    (507643 'move' ret[507638](507642 'deref' call_tmp[610646]))
    (507640 return ret[507638])
  }
  function chpl__dynamicFastFollowCheck[54790](arg x[54787]:_array[133594](?), arg lead[54792]:_any[178](?)) : _unknown[51]
  {
    unknown ret[507647] "RVV" "temp"
    unknown call_tmp[610651] "expr temp" "maybe param" "maybe type" "temp"
    (610654 'move' call_tmp[610651](54798 call chpl__staticFastFollowCheck x[54787] lead[54792]))
    unknown call_tmp[610656] "expr temp" "maybe param" "maybe type" "temp"
    (610659 'move' call_tmp[610656](54816 call _cond_test call_tmp[610651]))
    if call_tmp[610656]
    {
      unknown call_tmp[610663] "expr temp" "maybe param" "maybe type" "temp"
      (610666 'move' call_tmp[610663](54800 call _value _mt[243] x[54787]))
      unknown call_tmp[610670] "expr temp" "maybe param" "maybe type" "temp"
      (610673 'move' call_tmp[610670](54810 call(54805 call (partial) dsiDynamicFastFollowCheck _mt[243] call_tmp[610663]) lead[54792]))
      (507652 'move' ret[507647](507651 'deref' call_tmp[610670]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507645] _end_chpl__dynamicFastFollowCheck[507645]
    }
    {
      (507657 'move' ret[507647](507656 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[507645] _end_chpl__dynamicFastFollowCheck[507645]
    }
    label _end_chpl__dynamicFastFollowCheck[507645]
    (507649 return ret[507647])
  }
  function chpl__dynamicFastFollowCheckZip[54831](arg x[54828]:_tuple[56202](?)) : _unknown[51]
  {
    unknown ret[507663] "RVV" "temp"
    unknown call_tmp[610675] "expr temp" "maybe param" "maybe type" "temp"
    (610678 'move' call_tmp[610675](54836 call chpl__canHaveFastFollowersZip x[54828]))
    unknown call_tmp[610680] "expr temp" "maybe param" "maybe type" "temp"
    (610683 'move' call_tmp[610680](54837 call ! call_tmp[610675]))
    unknown call_tmp[610685] "expr temp" "maybe param" "maybe type" "temp"
    (610688 'move' call_tmp[610685](54843 call _cond_test call_tmp[610680]))
    if call_tmp[610685]
    {
      (507668 'move' ret[507663](507667 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507661] _end_chpl__dynamicFastFollowCheckZip[507661]
    }
    unknown call_tmp[610690] "expr temp" "maybe param" "maybe type" "temp"
    (610693 'move' call_tmp[610690](54852 call x[54828] 0))
    unknown call_tmp[610695] "expr temp" "maybe param" "maybe type" "temp"
    (610698 'move' call_tmp[610695](54854 call chpl__canLeadFastFollowers call_tmp[610690]))
    unknown call_tmp[610700] "expr temp" "maybe param" "maybe type" "temp"
    (610703 'move' call_tmp[610700](54870 call _cond_test call_tmp[610695]))
    if call_tmp[610700]
    {
      unknown call_tmp[610705] "expr temp" "maybe param" "maybe type" "temp"
      (610708 'move' call_tmp[610705](54861 call x[54828] 0))
      unknown call_tmp[610710] "expr temp" "maybe param" "maybe type" "temp"
      (610713 'move' call_tmp[610710](54862 call chpl__dynamicFastFollowCheckZip x[54828] call_tmp[610705]))
      (507673 'move' ret[507663](507672 'deref' call_tmp[610710]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507661] _end_chpl__dynamicFastFollowCheckZip[507661]
    }
    {
      (507678 'move' ret[507663](507677 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507661] _end_chpl__dynamicFastFollowCheckZip[507661]
    }
    label _end_chpl__dynamicFastFollowCheckZip[507661]
    (507665 return ret[507663])
  }
  function chpl__dynamicFastFollowCheckZip[54882](arg x[54879]:_tuple[56202](?), arg lead[54884]:_any[178](?), param arg dim[54887] :
  0 =
  0) : _unknown[51]
  {
    unknown ret[507684] "RVV" "temp"
    unknown call_tmp[610717] "expr temp" "maybe param" "maybe type" "temp"
    (610720 'move' call_tmp[610717](54891 call size _mt[243] x[54879]))
    unknown call_tmp[610722] "expr temp" "maybe param" "maybe type" "temp"
    (610725 'move' call_tmp[610722](54895 call - call_tmp[610717] 1))
    unknown call_tmp[610727] "expr temp" "maybe param" "maybe type" "temp"
    (610730 'move' call_tmp[610727](54898 call == call_tmp[610722] dim[54887]))
    unknown call_tmp[610732] "expr temp" "maybe param" "maybe type" "temp"
    (610735 'move' call_tmp[610732](54931 call _cond_test call_tmp[610727]))
    if call_tmp[610732]
    {
      unknown call_tmp[610737] "expr temp" "maybe param" "maybe type" "temp"
      (610740 'move' call_tmp[610737](54904 call x[54879] dim[54887]))
      unknown call_tmp[610742] "expr temp" "maybe param" "maybe type" "temp"
      (610745 'move' call_tmp[610742](54907 call chpl__dynamicFastFollowCheck call_tmp[610737] lead[54884]))
      (507689 'move' ret[507684](507688 'deref' call_tmp[610742]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507682] _end_chpl__dynamicFastFollowCheckZip[507682]
    }
    {
      unknown tmp[418664] "maybe param" "temp"
      unknown call_tmp[610747] "expr temp" "maybe param" "maybe type" "temp"
      (610750 'move' call_tmp[610747](54914 call x[54879] dim[54887]))
      (418675 'move' tmp[418664](54917 call chpl__dynamicFastFollowCheck call_tmp[610747] lead[54884]))
      unknown call_tmp[610752] "expr temp" "maybe param" "maybe type" "temp"
      (610755 'move' call_tmp[610752](418677 call _cond_invalid tmp[418664]))
      if call_tmp[610752]
      {
        (418680 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[554649] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[554650] "maybe param" "temp"
      unknown call_tmp[610757] "expr temp" "maybe param" "maybe type" "temp"
      (610760 'move' call_tmp[610757](418665 call isTrue tmp[418664]))
      (554655 'move' tmp[554650](554653 call _cond_test call_tmp[610757]))
      if tmp[554650]
      {
        unknown tmp[554657] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[610762] "expr temp" "maybe param" "maybe type" "temp"
        (610765 'move' call_tmp[610762](54924 call + dim[54887] 1))
        unknown call_tmp[610767] "expr temp" "maybe param" "maybe type" "temp"
        (610770 'move' call_tmp[610767](54926 call chpl__dynamicFastFollowCheckZip x[54879] lead[54884] call_tmp[610762]))
        (554659 'move' tmp[554657](418668 call isTrue call_tmp[610767]))
        (554664 'move' tmp[554649](554661 '_paramFoldLogical' tmp[554650] tmp[554657]))
      }
      {
        (554669 'move' tmp[554649](554666 '_paramFoldLogical' tmp[554650] 0))
      }
      (507694 'move' ret[507684](507693 'deref' tmp[554649]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[507682] _end_chpl__dynamicFastFollowCheckZip[507682]
    }
    label _end_chpl__dynamicFastFollowCheckZip[507682]
    (507686 return ret[507684])
  }
  function _toFollower[54946](arg iterator[54943]:_iteratorClass[208](?), arg leaderIndex[54948]:_any[178](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507700] "RVV" "temp"
    unknown call_tmp[610772] "expr temp" "maybe param" "maybe type" "temp"
    (610775 'move' call_tmp[610772](54971 'to follower' iterator[54943] leaderIndex[54948]))
    unknown call_tmp[610777] "expr temp" "maybe param" "maybe type" "temp"
    (610780 'move' call_tmp[610777](54973 call chpl__autoCopy call_tmp[610772]))
    (507705 'move' ret[507700](507704 'deref' call_tmp[610777]))
    (507702 return ret[507700])
  }
  function _toFollower[54985](arg ir[54982]:_iteratorRecord[205](?), arg leaderIndex[54987]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507709] "RVV" "temp"
    unknown call_tmp[610782] "maybe param" "maybe type" "temp"
    (610785 'move' call_tmp[610782](54992 call _getIterator ir[54982]))
    unknown ic[54993] "dead at end of block" "insert auto destroy" "no copy"
    (540814 'init var' ic[54993] call_tmp[610782])
    (54996 'end of statement')
    unknown call_tmp[610787] "maybe param" "maybe type" "temp"
    (610790 'move' call_tmp[610787](55002 call _toFollower ic[54993] leaderIndex[54987]))
    unknown follower[55003] "dead at end of block" "insert auto destroy" "no copy"
    (540816 'init var' follower[55003] call_tmp[610787])
    (55006 'end of statement' ic[54993])
    (55010 call _freeIterator ic[54993])
    (474750 'end of statement' ic[54993])
    (507714 'move' ret[507709](507713 'deref' follower[55003]))
    gotoReturn _end__toFollower[507707] _end__toFollower[507707]
    (474752 'end of statement' follower[55003])
    label _end__toFollower[507707]
    (507711 return ret[507709])
  }
  function _toFollower[55021](arg x[55019]:_any[178](?), arg leaderIndex[55023]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[507720] "RVV" "temp"
    unknown call_tmp[610794] "expr temp" "maybe param" "maybe type" "temp"
    (610797 'move' call_tmp[610794](55031 call(55027 call (partial) these _mt[243] x[55019])))
    unknown call_tmp[610799] "expr temp" "maybe param" "maybe type" "temp"
    (610802 'move' call_tmp[610799](55034 call _toFollower call_tmp[610794] leaderIndex[55023]))
    (507725 'move' ret[507720](507724 'deref' call_tmp[610799]))
    (507722 return ret[507720])
  }
  function _toFollowerZip[55044](arg x[55042]:_any[178](?), arg leaderIndex[55046]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507729] "RVV" "temp"
    unknown call_tmp[610804] "expr temp" "maybe param" "maybe type" "temp"
    (610807 'move' call_tmp[610804](55052 call _toFollower x[55042] leaderIndex[55046]))
    (507734 'move' ret[507729](507733 'deref' call_tmp[610804]))
    (507731 return ret[507729])
  }
  function _toFollowerZip[55064](arg x[55061]:_tuple[56202](?), arg leaderIndex[55066]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507738] "RVV" "temp"
    unknown call_tmp[610809] "expr temp" "maybe param" "maybe type" "temp"
    (610812 'move' call_tmp[610809](55073 call _toFollowerZipInternal x[55061] leaderIndex[55066] 0))
    (507743 'move' ret[507738](507742 'deref' call_tmp[610809]))
    (507740 return ret[507738])
  }
  function _toFollowerZipInternal[55085](arg x[55082]:_tuple[56202](?), arg leaderIndex[55087]:_any[178](?), param arg dim[55090]:int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507747] "RVV" "temp"
    unknown call_tmp[610816] "expr temp" "maybe param" "maybe type" "temp"
    (610819 'move' call_tmp[610816](55095 call size _mt[243] x[55082]))
    unknown call_tmp[610821] "expr temp" "maybe param" "maybe type" "temp"
    (610824 'move' call_tmp[610821](55099 call - call_tmp[610816] 1))
    unknown call_tmp[610826] "expr temp" "maybe param" "maybe type" "temp"
    (610829 'move' call_tmp[610826](55101 call == dim[55090] call_tmp[610821]))
    unknown call_tmp[610831] "expr temp" "maybe param" "maybe type" "temp"
    (610834 'move' call_tmp[610831](55138 call _cond_test call_tmp[610826]))
    if call_tmp[610831]
    {
      unknown call_tmp[610836] "expr temp" "maybe param" "maybe type" "temp"
      (610839 'move' call_tmp[610836](55107 call x[55082] dim[55090]))
      unknown call_tmp[610841] "expr temp" "maybe param" "maybe type" "temp"
      (610844 'move' call_tmp[610841](55110 call _toFollower call_tmp[610836] leaderIndex[55087]))
      unknown call_tmp[610846] "expr temp" "maybe param" "maybe type" "temp"
      (610849 'move' call_tmp[610846](55111 call _build_tuple call_tmp[610841]))
      (507752 'move' ret[507747](507751 'deref' call_tmp[610846]))
      gotoReturn _end__toFollowerZipInternal[507745] _end__toFollowerZipInternal[507745]
    }
    {
      unknown call_tmp[610851] "expr temp" "maybe param" "maybe type" "temp"
      (610854 'move' call_tmp[610851](55119 call x[55082] dim[55090]))
      unknown call_tmp[610856] "expr temp" "maybe param" "maybe type" "temp"
      (610859 'move' call_tmp[610856](55122 call _toFollower call_tmp[610851] leaderIndex[55087]))
      unknown call_tmp[610861] "expr temp" "maybe param" "maybe type" "temp"
      (610864 'move' call_tmp[610861](55129 call + dim[55090] 1))
      unknown call_tmp[610866] "expr temp" "maybe param" "maybe type" "temp"
      (610869 'move' call_tmp[610866](55131 call _toFollowerZipInternal x[55082] leaderIndex[55087] call_tmp[610861]))
      unknown call_tmp[610871] "expr temp" "maybe param" "maybe type" "temp"
      (610874 'move' call_tmp[610871](55134 call _build_tuple call_tmp[610856](55132 'expand_tuple' call_tmp[610866])))
      (507757 'move' ret[507747](507756 'deref' call_tmp[610871]))
      gotoReturn _end__toFollowerZipInternal[507745] _end__toFollowerZipInternal[507745]
    }
    label _end__toFollowerZipInternal[507745]
    (507749 return ret[507747])
  }
  function _toFastFollower[55153](arg iterator[55150]:_iteratorClass[208](?), arg leaderIndex[55155]:_any[178](?), arg fast[55158]:bool[10]) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[507763] "RVV" "temp"
    unknown call_tmp[610876] "expr temp" "maybe param" "maybe type" "temp"
    (610879 'move' call_tmp[610876](55167 'to follower' iterator[55150] leaderIndex[55155] 1))
    unknown call_tmp[610881] "expr temp" "maybe param" "maybe type" "temp"
    (610884 'move' call_tmp[610881](55169 call chpl__autoCopy call_tmp[610876]))
    (507768 'move' ret[507763](507767 'deref' call_tmp[610881]))
    (507765 return ret[507763])
  }
  function _toFastFollower[55181](arg ir[55178]:_iteratorRecord[205](?), arg leaderIndex[55183]:_any[178](?), arg fast[55186]:bool[10]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507772] "RVV" "temp"
    unknown call_tmp[610886] "maybe param" "maybe type" "temp"
    (610889 'move' call_tmp[610886](55192 call _getIterator ir[55178]))
    unknown ic[55193] "dead at end of block" "insert auto destroy" "no copy"
    (540818 'init var' ic[55193] call_tmp[610886])
    (55196 'end of statement')
    unknown call_tmp[610891] "maybe param" "maybe type" "temp"
    (610894 'move' call_tmp[610891](55204 call _toFastFollower ic[55193] leaderIndex[55183](fast = 1)))
    unknown follower[55205] "dead at end of block" "insert auto destroy" "no copy"
    (540820 'init var' follower[55205] call_tmp[610891])
    (55208 'end of statement' ic[55193])
    (55212 call _freeIterator ic[55193])
    (474761 'end of statement' ic[55193])
    (507777 'move' ret[507772](507776 'deref' follower[55205]))
    gotoReturn _end__toFastFollower[507770] _end__toFastFollower[507770]
    (474763 'end of statement' follower[55205])
    label _end__toFastFollower[507770]
    (507774 return ret[507772])
  }
  function _toFastFollower[55223](arg x[55221]:_any[178](?), arg leaderIndex[55225]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507783] "RVV" "temp"
    unknown call_tmp[610896] "expr temp" "maybe param" "maybe type" "temp"
    (610899 'move' call_tmp[610896](55230 call chpl__canHaveFastFollowers x[55221]))
    unknown call_tmp[610901] "expr temp" "maybe param" "maybe type" "temp"
    (610904 'move' call_tmp[610901](55253 call _cond_test call_tmp[610896]))
    if call_tmp[610901]
    {
      unknown call_tmp[610906] "expr temp" "maybe param" "maybe type" "temp"
      (610909 'move' call_tmp[610906](55235 call _getIterator x[55221]))
      unknown call_tmp[610911] "expr temp" "maybe param" "maybe type" "temp"
      (610914 'move' call_tmp[610911](55240 call _toFastFollower call_tmp[610906] leaderIndex[55225](fast = 1)))
      (507788 'move' ret[507783](507787 'deref' call_tmp[610911]))
      gotoReturn _end__toFastFollower[507781] _end__toFastFollower[507781]
    }
    {
      unknown call_tmp[610916] "expr temp" "maybe param" "maybe type" "temp"
      (610919 'move' call_tmp[610916](55247 call _getIterator x[55221]))
      unknown call_tmp[610921] "expr temp" "maybe param" "maybe type" "temp"
      (610924 'move' call_tmp[610921](55250 call _toFollower call_tmp[610916] leaderIndex[55225]))
      (507793 'move' ret[507783](507792 'deref' call_tmp[610921]))
      gotoReturn _end__toFastFollower[507781] _end__toFastFollower[507781]
    }
    label _end__toFastFollower[507781]
    (507785 return ret[507783])
  }
  function _toFastFollowerZip[55266](arg x[55264]:_any[178](?), arg leaderIndex[55268]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507799] "RVV" "temp"
    unknown call_tmp[610926] "expr temp" "maybe param" "maybe type" "temp"
    (610929 'move' call_tmp[610926](55274 call _toFastFollower x[55264] leaderIndex[55268]))
    (507804 'move' ret[507799](507803 'deref' call_tmp[610926]))
    (507801 return ret[507799])
  }
  function _toFastFollowerZip[55286](arg x[55283]:_tuple[56202](?), arg leaderIndex[55288]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507808] "RVV" "temp"
    unknown call_tmp[610931] "expr temp" "maybe param" "maybe type" "temp"
    (610934 'move' call_tmp[610931](55295 call _toFastFollowerZip x[55283] leaderIndex[55288] 0))
    (507813 'move' ret[507808](507812 'deref' call_tmp[610931]))
    (507810 return ret[507808])
  }
  function _toFastFollowerZip[55307](arg x[55304]:_tuple[56202](?), arg leaderIndex[55309]:_any[178](?), param arg dim[55312]:int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ret[507817] "RVV" "temp"
    unknown call_tmp[610938] "expr temp" "maybe param" "maybe type" "temp"
    (610941 'move' call_tmp[610938](55317 call size _mt[243] x[55304]))
    unknown call_tmp[610943] "expr temp" "maybe param" "maybe type" "temp"
    (610946 'move' call_tmp[610943](55321 call - call_tmp[610938] 2))
    unknown call_tmp[610948] "expr temp" "maybe param" "maybe type" "temp"
    (610951 'move' call_tmp[610948](55323 call == dim[55312] call_tmp[610943]))
    unknown call_tmp[610953] "expr temp" "maybe param" "maybe type" "temp"
    (610956 'move' call_tmp[610953](55372 call _cond_test call_tmp[610948]))
    if call_tmp[610953]
    {
      unknown call_tmp[610958] "expr temp" "maybe param" "maybe type" "temp"
      (610961 'move' call_tmp[610958](55329 call x[55304] dim[55312]))
      unknown call_tmp[610963] "expr temp" "maybe param" "maybe type" "temp"
      (610966 'move' call_tmp[610963](55332 call _toFastFollowerZip call_tmp[610958] leaderIndex[55309]))
      unknown call_tmp[610968] "expr temp" "maybe param" "maybe type" "temp"
      (610971 'move' call_tmp[610968](55337 call + dim[55312] 1))
      unknown call_tmp[610973] "expr temp" "maybe param" "maybe type" "temp"
      (610976 'move' call_tmp[610973](55340 call x[55304] call_tmp[610968]))
      unknown call_tmp[610978] "expr temp" "maybe param" "maybe type" "temp"
      (610981 'move' call_tmp[610978](55343 call _toFastFollowerZip call_tmp[610973] leaderIndex[55309]))
      unknown call_tmp[610983] "expr temp" "maybe param" "maybe type" "temp"
      (610986 'move' call_tmp[610983](55345 call _build_tuple call_tmp[610963] call_tmp[610978]))
      (507822 'move' ret[507817](507821 'deref' call_tmp[610983]))
      gotoReturn _end__toFastFollowerZip[507815] _end__toFastFollowerZip[507815]
    }
    {
      unknown call_tmp[610988] "expr temp" "maybe param" "maybe type" "temp"
      (610991 'move' call_tmp[610988](55353 call x[55304] dim[55312]))
      unknown call_tmp[610993] "expr temp" "maybe param" "maybe type" "temp"
      (610996 'move' call_tmp[610993](55356 call _toFastFollowerZip call_tmp[610988] leaderIndex[55309]))
      unknown call_tmp[610998] "expr temp" "maybe param" "maybe type" "temp"
      (611001 'move' call_tmp[610998](55363 call + dim[55312] 1))
      unknown call_tmp[611003] "expr temp" "maybe param" "maybe type" "temp"
      (611006 'move' call_tmp[611003](55365 call _toFastFollowerZip x[55304] leaderIndex[55309] call_tmp[610998]))
      unknown call_tmp[611008] "expr temp" "maybe param" "maybe type" "temp"
      (611011 'move' call_tmp[611008](55368 call _build_tuple call_tmp[610993](55366 'expand_tuple' call_tmp[611003])))
      (507827 'move' ret[507817](507826 'deref' call_tmp[611008]))
      gotoReturn _end__toFastFollowerZip[507815] _end__toFastFollowerZip[507815]
    }
    label _end__toFastFollowerZip[507815]
    (507819 return ret[507817])
  }
  function singleValIter[55387](arg iterables[55384]:_tuple[56202](?)) param : _unknown[51] "no doc"
  {
    unknown ret[507833] "RVV" "param" "temp"
    unknown tmp[418685] "maybe param" "temp"
    unknown call_tmp[611015] "expr temp" "maybe param" "maybe type" "temp"
    (611018 'move' call_tmp[611015](55390 call size _mt[243] iterables[55384]))
    (418696 'move' tmp[418685](55394 call == call_tmp[611015] 1))
    unknown call_tmp[611020] "expr temp" "maybe param" "maybe type" "temp"
    (611023 'move' call_tmp[611020](418698 call _cond_invalid tmp[418685]))
    if call_tmp[611020]
    {
      (418701 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554676] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554677] "maybe param" "temp"
    unknown call_tmp[611025] "expr temp" "maybe param" "maybe type" "temp"
    (611028 'move' call_tmp[611025](418686 call isTrue tmp[418685]))
    (554682 'move' tmp[554677](554680 call _cond_test call_tmp[611025]))
    if tmp[554677]
    {
      unknown tmp[554684] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611030] "expr temp" "maybe param" "maybe type" "temp"
      (611033 'move' call_tmp[611030](55401 call iterables[55384] 0))
      unknown call_tmp[611035] "expr temp" "maybe param" "maybe type" "temp"
      (611038 'move' call_tmp[611035](55403 call _getIterator call_tmp[611030]))
      unknown call_tmp[611040] "expr temp" "maybe param" "maybe type" "temp"
      (611043 'move' call_tmp[611040](55405 call isRefIter call_tmp[611035]))
      unknown call_tmp[611045] "expr temp" "maybe param" "maybe type" "temp"
      (611048 'move' call_tmp[611045](55406 call ! call_tmp[611040]))
      (554686 'move' tmp[554684](418689 call isTrue call_tmp[611045]))
      (554691 'move' tmp[554676](554688 '_paramFoldLogical' tmp[554677] tmp[554684]))
    }
    {
      (554696 'move' tmp[554676](554693 '_paramFoldLogical' tmp[554677] 0))
    }
    (507838 'move' ret[507833](507837 'deref' tmp[554676]))
    (507835 return ret[507833])
  }
  function singleRefIter[55421](arg iterables[55418]:_tuple[56202](?)) param : _unknown[51] "no doc"
  {
    unknown ret[507842] "RVV" "param" "temp"
    unknown tmp[418706] "maybe param" "temp"
    unknown call_tmp[611052] "expr temp" "maybe param" "maybe type" "temp"
    (611055 'move' call_tmp[611052](55424 call size _mt[243] iterables[55418]))
    (418717 'move' tmp[418706](55428 call == call_tmp[611052] 1))
    unknown call_tmp[611057] "expr temp" "maybe param" "maybe type" "temp"
    (611060 'move' call_tmp[611057](418719 call _cond_invalid tmp[418706]))
    if call_tmp[611057]
    {
      (418722 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554703] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554704] "maybe param" "temp"
    unknown call_tmp[611062] "expr temp" "maybe param" "maybe type" "temp"
    (611065 'move' call_tmp[611062](418707 call isTrue tmp[418706]))
    (554709 'move' tmp[554704](554707 call _cond_test call_tmp[611062]))
    if tmp[554704]
    {
      unknown tmp[554711] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611067] "expr temp" "maybe param" "maybe type" "temp"
      (611070 'move' call_tmp[611067](55435 call iterables[55418] 0))
      unknown call_tmp[611072] "expr temp" "maybe param" "maybe type" "temp"
      (611075 'move' call_tmp[611072](55437 call _getIterator call_tmp[611067]))
      unknown call_tmp[611077] "expr temp" "maybe param" "maybe type" "temp"
      (611080 'move' call_tmp[611077](55439 call isRefIter call_tmp[611072]))
      (554713 'move' tmp[554711](418710 call isTrue call_tmp[611077]))
      (554718 'move' tmp[554703](554715 '_paramFoldLogical' tmp[554704] tmp[554711]))
    }
    {
      (554723 'move' tmp[554703](554720 '_paramFoldLogical' tmp[554704] 0))
    }
    (507847 'move' ret[507842](507846 'deref' tmp[554703]))
    (507844 return ret[507842])
  }
  function vectorizeOnly[55453](arg iterables[55450]:_any[178](?) ...) : _unknown[51] "iterator fn" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507851] "RVV" "temp"
    {
      unknown _indexOfInterest[55467] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55468] "expr temp" "temp"
      unknown call_tmp[611082] "expr temp" "maybe param" "maybe type" "temp"
      (611085 'move' call_tmp[611082](55463 call iterables[55450] 0))
      (55477 'move' _iterator[55468](55475 call _getIterator call_tmp[611082]))
      Defer
      {
        {
          (55494 call _freeIterator _iterator[55468])
        }
      }
      { scopeless type
        (55483 'move' _indexOfInterest[55467](55480 call iteratorIndex _iterator[55468]))
      }
      ForLoop[55469]
      {
        unknown i[55487] "index var" "insert auto destroy"
        (474776 'end of statement')
        (55489 'move' i[55487] _indexOfInterest[55467])
        (474777 'end of statement' i[55487])
        unknown yret[507855] "YVV" "temp"
        (507858 'move' yret[507855](507857 'deref' i[55487]))
        (507860 yield yret[507855])
        (474779 'end of statement' i[55487])
        label _continueLabel[55472]
        _indexOfInterest[55467]
        _iterator[55468]
      }
      label _breakLabel[55473]
    }
    (507853 return ret[507851])
  }
  where {
    (55458 call singleValIter iterables[55450])
  }
  function vectorizeOnly[55511](arg iterables[55508]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507864] "RVV" "temp"
    {
      unknown _indexOfInterest[55525] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55526] "expr temp" "temp"
      unknown call_tmp[611087] "expr temp" "maybe param" "maybe type" "temp"
      (611090 'move' call_tmp[611087](55521 call iterables[55508] 0))
      (55535 'move' _iterator[55526](55533 call _getIterator call_tmp[611087]))
      Defer
      {
        {
          (55552 call _freeIterator _iterator[55526])
        }
      }
      { scopeless type
        (55541 'move' _indexOfInterest[55525](55538 call iteratorIndex _iterator[55526]))
      }
      ForLoop[55527]
      {
        unknown i[55545] "index var" "insert auto destroy"
        (474782 'end of statement')
        (55547 'move' i[55545] _indexOfInterest[55525])
        (474783 'end of statement' i[55545])
        unknown yret[507868] "YVV" "temp"
        (507871 'move' yret[507868](507870 'addr of' i[55545]))
        (507873 yield yret[507868])
        (474785 'end of statement' i[55545])
        label _continueLabel[55530]
        _indexOfInterest[55525]
        _iterator[55526]
      }
      label _breakLabel[55531]
    }
    (507866 return ret[507864])
  }
  where {
    (55516 call singleRefIter iterables[55508])
  }
  function vectorizeOnly[55570](arg iterables[55567]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[507877] "RVV" "temp"
    {
      unknown _indexOfInterest[55584] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55585] "expr temp" "temp"
      (55593 'move' _iterator[55585](55580 call _getIteratorZip iterables[55567]))
      Defer
      {
        {
          (55609 call _freeIterator _iterator[55585])
        }
      }
      { scopeless type
        (55598 'move' _indexOfInterest[55584](55595 call iteratorIndex _iterator[55585]))
      }
      ForLoop[55586]
      {
        unknown i[55602] "index var" "insert auto destroy"
        (474788 'end of statement')
        (55604 'move' i[55602] _indexOfInterest[55584])
        (474789 'end of statement' i[55602])
        unknown yret[507881] "YVV" "temp"
        (507884 'move' yret[507881](507883 'deref' i[55602]))
        (507886 yield yret[507881])
        (474791 'end of statement' i[55602])
        label _continueLabel[55589]
        _indexOfInterest[55584]
        _iterator[55585]
      }
      label _breakLabel[55590]
    }
    (507879 return ret[507877])
  }
  where {
    (55574 call > numiterables[55565] 1)
  }
  function vectorizeOnly[55626](param arg tag[55623]:iterKind[453], arg iterables[55629]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507890] "RVV" "temp"
    {
      unknown _indexOfInterest[55655] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55656] "expr temp" "temp"
      unknown call_tmp[611092] "expr temp" "maybe param" "maybe type" "temp"
      (611095 'move' call_tmp[611092](55651 call iterables[55629] 0))
      (55665 'move' _iterator[55656](55663 call _getIterator call_tmp[611092]))
      Defer
      {
        {
          (55682 call _freeIterator _iterator[55656])
        }
      }
      { scopeless type
        (55671 'move' _indexOfInterest[55655](55668 call iteratorIndex _iterator[55656]))
      }
      ForLoop[55657]
      {
        unknown i[55675] "index var" "insert auto destroy"
        (474794 'end of statement')
        (55677 'move' i[55675] _indexOfInterest[55655])
        (474795 'end of statement' i[55675])
        unknown yret[507894] "YVV" "temp"
        (507897 'move' yret[507894](507896 'deref' i[55675]))
        (507899 yield yret[507894])
        (474797 'end of statement' i[55675])
        label _continueLabel[55660]
        _indexOfInterest[55655]
        _iterator[55656]
      }
      label _breakLabel[55661]
    }
    (507892 return ret[507890])
  }
  where {
    unknown tmp[418727] "maybe param" "temp"
    (418738 'move' tmp[418727](55639 call == tag[55623] standalone[451]))
    unknown call_tmp[611097] "expr temp" "maybe param" "maybe type" "temp"
    (611100 'move' call_tmp[611097](418740 call _cond_invalid tmp[418727]))
    if call_tmp[611097]
    {
      (418743 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554730] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554731] "maybe param" "temp"
    unknown call_tmp[611102] "expr temp" "maybe param" "maybe type" "temp"
    (611105 'move' call_tmp[611102](418728 call isTrue tmp[418727]))
    (554736 'move' tmp[554731](554734 call _cond_test call_tmp[611102]))
    if tmp[554731]
    {
      unknown tmp[554738] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611107] "expr temp" "maybe param" "maybe type" "temp"
      (611110 'move' call_tmp[611107](55644 call singleValIter iterables[55629]))
      (554740 'move' tmp[554738](418731 call isTrue call_tmp[611107]))
      (554745 'move' tmp[554730](554742 '_paramFoldLogical' tmp[554731] tmp[554738]))
    }
    {
      (554750 'move' tmp[554730](554747 '_paramFoldLogical' tmp[554731] 0))
    }
    (748203 call chpl_statementLevelSymbol tmp[554730])
  }
  function vectorizeOnly[55699](param arg tag[55696]:iterKind[453], arg iterables[55702]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507903] "RVV" "temp"
    {
      unknown _indexOfInterest[55726] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55727] "expr temp" "temp"
      unknown call_tmp[611112] "expr temp" "maybe param" "maybe type" "temp"
      (611115 'move' call_tmp[611112](55722 call iterables[55702] 0))
      (55736 'move' _iterator[55727](55734 call _getIterator call_tmp[611112]))
      Defer
      {
        {
          (55753 call _freeIterator _iterator[55727])
        }
      }
      { scopeless type
        (55742 'move' _indexOfInterest[55726](55739 call iteratorIndex _iterator[55727]))
      }
      ForLoop[55728]
      {
        unknown i[55746] "index var" "insert auto destroy"
        (474800 'end of statement')
        (55748 'move' i[55746] _indexOfInterest[55726])
        (474801 'end of statement' i[55746])
        unknown yret[507907] "YVV" "temp"
        (507910 'move' yret[507907](507909 'addr of' i[55746]))
        (507912 yield yret[507907])
        (474803 'end of statement' i[55746])
        label _continueLabel[55731]
        _indexOfInterest[55726]
        _iterator[55727]
      }
      label _breakLabel[55732]
    }
    (507905 return ret[507903])
  }
  where {
    unknown tmp[418748] "maybe param" "temp"
    (418759 'move' tmp[418748](55710 call == tag[55696] standalone[451]))
    unknown call_tmp[611117] "expr temp" "maybe param" "maybe type" "temp"
    (611120 'move' call_tmp[611117](418761 call _cond_invalid tmp[418748]))
    if call_tmp[611117]
    {
      (418764 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554757] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554758] "maybe param" "temp"
    unknown call_tmp[611122] "expr temp" "maybe param" "maybe type" "temp"
    (611125 'move' call_tmp[611122](418749 call isTrue tmp[418748]))
    (554763 'move' tmp[554758](554761 call _cond_test call_tmp[611122]))
    if tmp[554758]
    {
      unknown tmp[554765] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611127] "expr temp" "maybe param" "maybe type" "temp"
      (611130 'move' call_tmp[611127](55715 call singleRefIter iterables[55702]))
      (554767 'move' tmp[554765](418752 call isTrue call_tmp[611127]))
      (554772 'move' tmp[554757](554769 '_paramFoldLogical' tmp[554758] tmp[554765]))
    }
    {
      (554777 'move' tmp[554757](554774 '_paramFoldLogical' tmp[554758] 0))
    }
    (748205 call chpl_statementLevelSymbol tmp[554757])
  }
  function vectorizeOnly[55770](param arg tag[55767]:iterKind[453], arg iterables[55774]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507916] "RVV" "temp"
    {
      unknown _indexOfInterest[55798] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55799] "expr temp" "temp"
      (55807 'move' _iterator[55799](55794 call _getIteratorZip iterables[55774]))
      Defer
      {
        {
          (55823 call _freeIterator _iterator[55799])
        }
      }
      { scopeless type
        (55812 'move' _indexOfInterest[55798](55809 call iteratorIndex _iterator[55799]))
      }
      ForLoop[55800]
      {
        unknown i[55816] "index var" "insert auto destroy"
        (474806 'end of statement')
        (55818 'move' i[55816] _indexOfInterest[55798])
        (474807 'end of statement' i[55816])
        unknown yret[507920] "YVV" "temp"
        (507923 'move' yret[507920](507922 'deref' i[55816]))
        (507925 yield yret[507920])
        (474809 'end of statement' i[55816])
        label _continueLabel[55803]
        _indexOfInterest[55798]
        _iterator[55799]
      }
      label _breakLabel[55804]
    }
    (507918 return ret[507916])
  }
  where {
    unknown tmp[418769] "maybe param" "temp"
    (418780 'move' tmp[418769](55782 call == tag[55767] standalone[451]))
    unknown call_tmp[611132] "expr temp" "maybe param" "maybe type" "temp"
    (611135 'move' call_tmp[611132](418782 call _cond_invalid tmp[418769]))
    if call_tmp[611132]
    {
      (418785 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554784] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554785] "maybe param" "temp"
    unknown call_tmp[611137] "expr temp" "maybe param" "maybe type" "temp"
    (611140 'move' call_tmp[611137](418770 call isTrue tmp[418769]))
    (554790 'move' tmp[554785](554788 call _cond_test call_tmp[611137]))
    if tmp[554785]
    {
      unknown tmp[554792] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611142] "expr temp" "maybe param" "maybe type" "temp"
      (611145 'move' call_tmp[611142](55786 call > numiterables[55772] 1))
      (554794 'move' tmp[554792](418773 call isTrue call_tmp[611142]))
      (554799 'move' tmp[554784](554796 '_paramFoldLogical' tmp[554785] tmp[554792]))
    }
    {
      (554804 'move' tmp[554784](554801 '_paramFoldLogical' tmp[554785] 0))
    }
    (748207 call chpl_statementLevelSymbol tmp[554784])
  }
  function vectorizeOnly[55840](param arg tag[55837]:iterKind[453], arg iterables[55843]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507929] "RVV" "temp"
    unknown yret[507933] "YVV" "temp"
    unknown call_tmp[611147] "expr temp" "maybe param" "maybe type" "temp"
    (611150 'move' call_tmp[611147](55864 call iterables[55843] 0))
    (507936 'move' yret[507933](507935 'deref' call_tmp[611147]))
    (507938 yield yret[507933])
    (507931 return ret[507929])
  }
  where {
    unknown tmp[418790] "maybe param" "temp"
    (418801 'move' tmp[418790](55853 call == tag[55837] leader[447]))
    unknown call_tmp[611152] "expr temp" "maybe param" "maybe type" "temp"
    (611155 'move' call_tmp[611152](418803 call _cond_invalid tmp[418790]))
    if call_tmp[611152]
    {
      (418806 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554811] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554812] "maybe param" "temp"
    unknown call_tmp[611157] "expr temp" "maybe param" "maybe type" "temp"
    (611160 'move' call_tmp[611157](418791 call isTrue tmp[418790]))
    (554817 'move' tmp[554812](554815 call _cond_test call_tmp[611157]))
    if tmp[554812]
    {
      unknown tmp[554819] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611162] "expr temp" "maybe param" "maybe type" "temp"
      (611165 'move' call_tmp[611162](55858 call singleValIter iterables[55843]))
      (554821 'move' tmp[554819](418794 call isTrue call_tmp[611162]))
      (554826 'move' tmp[554811](554823 '_paramFoldLogical' tmp[554812] tmp[554819]))
    }
    {
      (554831 'move' tmp[554811](554828 '_paramFoldLogical' tmp[554812] 0))
    }
    (748209 call chpl_statementLevelSymbol tmp[554811])
  }
  function vectorizeOnly[55877](param arg tag[55874]:iterKind[453], arg iterables[55880]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507942] "RVV" "temp"
    unknown yret[507946] "YVV" "temp"
    unknown call_tmp[611167] "expr temp" "maybe param" "maybe type" "temp"
    (611170 'move' call_tmp[611167](55899 call iterables[55880] 0))
    (507949 'move' yret[507946](507948 'addr of' call_tmp[611167]))
    (507951 yield yret[507946])
    (507944 return ret[507942])
  }
  where {
    unknown tmp[418811] "maybe param" "temp"
    (418822 'move' tmp[418811](55888 call == tag[55874] leader[447]))
    unknown call_tmp[611172] "expr temp" "maybe param" "maybe type" "temp"
    (611175 'move' call_tmp[611172](418824 call _cond_invalid tmp[418811]))
    if call_tmp[611172]
    {
      (418827 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554838] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554839] "maybe param" "temp"
    unknown call_tmp[611177] "expr temp" "maybe param" "maybe type" "temp"
    (611180 'move' call_tmp[611177](418812 call isTrue tmp[418811]))
    (554844 'move' tmp[554839](554842 call _cond_test call_tmp[611177]))
    if tmp[554839]
    {
      unknown tmp[554846] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611182] "expr temp" "maybe param" "maybe type" "temp"
      (611185 'move' call_tmp[611182](55893 call singleRefIter iterables[55880]))
      (554848 'move' tmp[554846](418815 call isTrue call_tmp[611182]))
      (554853 'move' tmp[554838](554850 '_paramFoldLogical' tmp[554839] tmp[554846]))
    }
    {
      (554858 'move' tmp[554838](554855 '_paramFoldLogical' tmp[554839] 0))
    }
    (748211 call chpl_statementLevelSymbol tmp[554838])
  }
  function vectorizeOnly[55912](param arg tag[55909]:iterKind[453], arg iterables[55916]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507955] "RVV" "temp"
    unknown yret[507959] "YVV" "temp"
    (507962 'move' yret[507959](507961 'deref' iterables[55916]))
    (507964 yield yret[507959])
    (507957 return ret[507955])
  }
  where {
    unknown tmp[418832] "maybe param" "temp"
    (418843 'move' tmp[418832](55924 call == tag[55909] leader[447]))
    unknown call_tmp[611187] "expr temp" "maybe param" "maybe type" "temp"
    (611190 'move' call_tmp[611187](418845 call _cond_invalid tmp[418832]))
    if call_tmp[611187]
    {
      (418848 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554865] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554866] "maybe param" "temp"
    unknown call_tmp[611192] "expr temp" "maybe param" "maybe type" "temp"
    (611195 'move' call_tmp[611192](418833 call isTrue tmp[418832]))
    (554871 'move' tmp[554866](554869 call _cond_test call_tmp[611192]))
    if tmp[554866]
    {
      unknown tmp[554873] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611197] "expr temp" "maybe param" "maybe type" "temp"
      (611200 'move' call_tmp[611197](55928 call > numiterables[55914] 1))
      (554875 'move' tmp[554873](418836 call isTrue call_tmp[611197]))
      (554880 'move' tmp[554865](554877 '_paramFoldLogical' tmp[554866] tmp[554873]))
    }
    {
      (554885 'move' tmp[554865](554882 '_paramFoldLogical' tmp[554866] 0))
    }
    (748213 call chpl_statementLevelSymbol tmp[554865])
  }
  function vectorizeOnly[55945](param arg tag[55942]:iterKind[453], arg followThis[55947]:_any[178](?), arg iterables[55950]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507968] "RVV" "temp"
    {
      unknown _indexOfInterest[55976] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55977] "expr temp" "temp"
      unknown call_tmp[611202] "expr temp" "maybe param" "maybe type" "temp"
      (611205 'move' call_tmp[611202](55972 call iterables[55950] 0))
      (55986 'move' _iterator[55977](55984 call _getIterator call_tmp[611202]))
      Defer
      {
        {
          (56003 call _freeIterator _iterator[55977])
        }
      }
      { scopeless type
        (55992 'move' _indexOfInterest[55976](55989 call iteratorIndex _iterator[55977]))
      }
      ForLoop[55978]
      {
        unknown i[55996] "index var" "insert auto destroy"
        (474815 'end of statement')
        (55998 'move' i[55996] _indexOfInterest[55976])
        (474816 'end of statement' i[55996])
        unknown yret[507972] "YVV" "temp"
        (507975 'move' yret[507972](507974 'deref' i[55996]))
        (507977 yield yret[507972])
        (474818 'end of statement' i[55996])
        label _continueLabel[55981]
        _indexOfInterest[55976]
        _iterator[55977]
      }
      label _breakLabel[55982]
    }
    (507970 return ret[507968])
  }
  where {
    unknown tmp[418853] "maybe param" "temp"
    (418864 'move' tmp[418853](55960 call == tag[55942] follower[449]))
    unknown call_tmp[611207] "expr temp" "maybe param" "maybe type" "temp"
    (611210 'move' call_tmp[611207](418866 call _cond_invalid tmp[418853]))
    if call_tmp[611207]
    {
      (418869 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554892] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554893] "maybe param" "temp"
    unknown call_tmp[611212] "expr temp" "maybe param" "maybe type" "temp"
    (611215 'move' call_tmp[611212](418854 call isTrue tmp[418853]))
    (554898 'move' tmp[554893](554896 call _cond_test call_tmp[611212]))
    if tmp[554893]
    {
      unknown tmp[554900] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611217] "expr temp" "maybe param" "maybe type" "temp"
      (611220 'move' call_tmp[611217](55965 call singleValIter iterables[55950]))
      (554902 'move' tmp[554900](418857 call isTrue call_tmp[611217]))
      (554907 'move' tmp[554892](554904 '_paramFoldLogical' tmp[554893] tmp[554900]))
    }
    {
      (554912 'move' tmp[554892](554909 '_paramFoldLogical' tmp[554893] 0))
    }
    (748215 call chpl_statementLevelSymbol tmp[554892])
  }
  function vectorizeOnly[56020](param arg tag[56017]:iterKind[453], arg followThis[56022]:_any[178](?), arg iterables[56025]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507981] "RVV" "temp"
    {
      unknown _indexOfInterest[56049] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56050] "expr temp" "temp"
      unknown call_tmp[611222] "expr temp" "maybe param" "maybe type" "temp"
      (611225 'move' call_tmp[611222](56045 call iterables[56025] 0))
      (56059 'move' _iterator[56050](56057 call _getIterator call_tmp[611222]))
      Defer
      {
        {
          (56076 call _freeIterator _iterator[56050])
        }
      }
      { scopeless type
        (56065 'move' _indexOfInterest[56049](56062 call iteratorIndex _iterator[56050]))
      }
      ForLoop[56051]
      {
        unknown i[56069] "index var" "insert auto destroy"
        (474821 'end of statement')
        (56071 'move' i[56069] _indexOfInterest[56049])
        (474822 'end of statement' i[56069])
        unknown yret[507985] "YVV" "temp"
        (507988 'move' yret[507985](507987 'addr of' i[56069]))
        (507990 yield yret[507985])
        (474824 'end of statement' i[56069])
        label _continueLabel[56054]
        _indexOfInterest[56049]
        _iterator[56050]
      }
      label _breakLabel[56055]
    }
    (507983 return ret[507981])
  }
  where {
    unknown tmp[418874] "maybe param" "temp"
    (418885 'move' tmp[418874](56033 call == tag[56017] follower[449]))
    unknown call_tmp[611227] "expr temp" "maybe param" "maybe type" "temp"
    (611230 'move' call_tmp[611227](418887 call _cond_invalid tmp[418874]))
    if call_tmp[611227]
    {
      (418890 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554919] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554920] "maybe param" "temp"
    unknown call_tmp[611232] "expr temp" "maybe param" "maybe type" "temp"
    (611235 'move' call_tmp[611232](418875 call isTrue tmp[418874]))
    (554925 'move' tmp[554920](554923 call _cond_test call_tmp[611232]))
    if tmp[554920]
    {
      unknown tmp[554927] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611237] "expr temp" "maybe param" "maybe type" "temp"
      (611240 'move' call_tmp[611237](56038 call singleRefIter iterables[56025]))
      (554929 'move' tmp[554927](418878 call isTrue call_tmp[611237]))
      (554934 'move' tmp[554919](554931 '_paramFoldLogical' tmp[554920] tmp[554927]))
    }
    {
      (554939 'move' tmp[554919](554936 '_paramFoldLogical' tmp[554920] 0))
    }
    (748217 call chpl_statementLevelSymbol tmp[554919])
  }
  function vectorizeOnly[56093](param arg tag[56090]:iterKind[453], arg followThis[56095]:_any[178](?), arg iterables[56099]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[507994] "RVV" "temp"
    {
      unknown _indexOfInterest[56123] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56124] "expr temp" "temp"
      (56132 'move' _iterator[56124](56119 call _getIteratorZip iterables[56099]))
      Defer
      {
        {
          (56148 call _freeIterator _iterator[56124])
        }
      }
      { scopeless type
        (56137 'move' _indexOfInterest[56123](56134 call iteratorIndex _iterator[56124]))
      }
      ForLoop[56125]
      {
        unknown i[56141] "index var" "insert auto destroy"
        (474827 'end of statement')
        (56143 'move' i[56141] _indexOfInterest[56123])
        (474828 'end of statement' i[56141])
        unknown yret[507998] "YVV" "temp"
        (508001 'move' yret[507998](508000 'deref' i[56141]))
        (508003 yield yret[507998])
        (474830 'end of statement' i[56141])
        label _continueLabel[56128]
        _indexOfInterest[56123]
        _iterator[56124]
      }
      label _breakLabel[56129]
    }
    (507996 return ret[507994])
  }
  where {
    unknown tmp[418895] "maybe param" "temp"
    (418906 'move' tmp[418895](56107 call == tag[56090] follower[449]))
    unknown call_tmp[611242] "expr temp" "maybe param" "maybe type" "temp"
    (611245 'move' call_tmp[611242](418908 call _cond_invalid tmp[418895]))
    if call_tmp[611242]
    {
      (418911 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554946] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554947] "maybe param" "temp"
    unknown call_tmp[611247] "expr temp" "maybe param" "maybe type" "temp"
    (611250 'move' call_tmp[611247](418896 call isTrue tmp[418895]))
    (554952 'move' tmp[554947](554950 call _cond_test call_tmp[611247]))
    if tmp[554947]
    {
      unknown tmp[554954] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611252] "expr temp" "maybe param" "maybe type" "temp"
      (611255 'move' call_tmp[611252](56111 call > numiterables[56097] 1))
      (554956 'move' tmp[554954](418899 call isTrue call_tmp[611252]))
      (554961 'move' tmp[554946](554958 '_paramFoldLogical' tmp[554947] tmp[554954]))
    }
    {
      (554966 'move' tmp[554946](554963 '_paramFoldLogical' tmp[554947] 0))
    }
    (748219 call chpl_statementLevelSymbol tmp[554946])
  }
  (355083 'used modules list'(52123 'use' ChapelStandard[20267])(52127 'use' Reflection[224901]))
}