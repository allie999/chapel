AST dump for SyncVarRuntimeSupport after pass buildDefaultFunctions.
Module use list: ChapelStandard SysCTypes AlignedTSupport 

{
  function chpl__init_SyncVarRuntimeSupport[416003]() : void[4] "insert line file info" "module init"
  {
    {
    }
    {
    }
    (513291 return _void[55])
  }
  function chpl_sync_aux_t[87955].init[779980](arg _mt[779982]:_MT[238], ref arg this[779983]:chpl_sync_aux_t[87955]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (779987 return _void[55])
  }
  function chpl_sync_aux_t[87955].init=[779989](arg _mt[779992]:_MT[238], arg this[779993]:chpl_sync_aux_t[87955], arg other[779994]:chpl_sync_aux_t[87955]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (779998 '=' this[779993] other[779994])
    (780002 return _void[55])
  }
  function chpl_sync_aux_t[87955].deinit[780004](arg _mt[780006]:_MT[238], arg this[780008]:chpl_sync_aux_t[87955]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (780016 return _void[55])
  }
  function chpl_sync_aux_t[87955].writeThis[780018](arg _mt[780022]:_MT[238], arg this[780020]:chpl_sync_aux_t[87955], arg f[780021]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780027 call writeThisDefaultImpl f[780021] this[780020])
    (780032 return _void[55])
  }
  function chpl_sync_aux_t[87955].readThis[780034](arg _mt[780038]:_MT[238], arg this[780036]:chpl_sync_aux_t[87955], arg f[780037]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780042 call readThisDefaultImpl f[780037] this[780036])
    (780048 return _void[55])
  }
  function chpl_fields_are_comparable[780062](arg _arg1[780064]:chpl_sync_aux_t[87955], arg _arg2[780065]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780074]:bool[10] "RVV" "param" "temp"
    (780079 'move' ret[780074](780078 'deref' 1))
    (780076 return ret[780074])
  }
  function ==[780050](arg _arg1[780052]:chpl_sync_aux_t[87955], arg _arg2[780053]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780093]:bool[10] "RVV" "temp"
    (780098 'move' ret[780093](780097 'deref' 1))
    (780095 return ret[780093])
  }
  where {
    unknown call_tmp[780100] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780103 'move' call_tmp[780100](780056 'typeof' _arg1[780052]))
    unknown call_tmp[780105] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780108 'move' call_tmp[780105](780058 'typeof' _arg2[780053]))
    unknown call_tmp[780110] "expr temp" "maybe param" "maybe type" "temp"
    (780113 'move' call_tmp[780110](780060 call == call_tmp[780100] call_tmp[780105]))
    unknown call_tmp[780115] "expr temp" "maybe param" "maybe type" "temp"
    (780118 'move' call_tmp[780115](780081 call chpl_fields_are_comparable[780062] _arg1[780052] _arg2[780053]))
    (780085 '&' call_tmp[780110] call_tmp[780115])
  }
  function chpl_fields_are_comparable[780132](arg _arg1[780134]:chpl_sync_aux_t[87955], arg _arg2[780135]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780144]:bool[10] "RVV" "param" "temp"
    (780149 'move' ret[780144](780148 'deref' 1))
    (780146 return ret[780144])
  }
  function !=[780120](arg _arg1[780122]:chpl_sync_aux_t[87955], arg _arg2[780123]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780163]:bool[10] "RVV" "temp"
    (780168 'move' ret[780163](780167 'deref' 0))
    (780165 return ret[780163])
  }
  where {
    unknown call_tmp[780170] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780173 'move' call_tmp[780170](780126 'typeof' _arg1[780122]))
    unknown call_tmp[780175] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780178 'move' call_tmp[780175](780128 'typeof' _arg2[780123]))
    unknown call_tmp[780180] "expr temp" "maybe param" "maybe type" "temp"
    (780183 'move' call_tmp[780180](780130 call == call_tmp[780170] call_tmp[780175]))
    unknown call_tmp[780185] "expr temp" "maybe param" "maybe type" "temp"
    (780188 'move' call_tmp[780185](780151 call chpl_fields_are_comparable[780132] _arg1[780122] _arg2[780123]))
    (780155 '&' call_tmp[780180] call_tmp[780185])
  }
  function chpl_fields_are_comparable[780202](arg _arg1[780204]:chpl_sync_aux_t[87955], arg _arg2[780205]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780214]:bool[10] "RVV" "param" "temp"
    (780219 'move' ret[780214](780218 'deref' 1))
    (780216 return ret[780214])
  }
  function <[780190](arg _arg1[780192]:chpl_sync_aux_t[87955], arg _arg2[780193]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780233]:bool[10] "RVV" "temp"
    (780238 'move' ret[780233](780237 'deref' 0))
    (780235 return ret[780233])
  }
  where {
    unknown call_tmp[780240] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780243 'move' call_tmp[780240](780196 'typeof' _arg1[780192]))
    unknown call_tmp[780245] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780248 'move' call_tmp[780245](780198 'typeof' _arg2[780193]))
    unknown call_tmp[780250] "expr temp" "maybe param" "maybe type" "temp"
    (780253 'move' call_tmp[780250](780200 call == call_tmp[780240] call_tmp[780245]))
    unknown call_tmp[780255] "expr temp" "maybe param" "maybe type" "temp"
    (780258 'move' call_tmp[780255](780221 call chpl_fields_are_comparable[780202] _arg1[780192] _arg2[780193]))
    (780225 '&' call_tmp[780250] call_tmp[780255])
  }
  function chpl_fields_are_comparable[780272](arg _arg1[780274]:chpl_sync_aux_t[87955], arg _arg2[780275]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780284]:bool[10] "RVV" "param" "temp"
    (780289 'move' ret[780284](780288 'deref' 1))
    (780286 return ret[780284])
  }
  function <=[780260](arg _arg1[780262]:chpl_sync_aux_t[87955], arg _arg2[780263]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780303]:bool[10] "RVV" "temp"
    (780308 'move' ret[780303](780307 'deref' 1))
    (780305 return ret[780303])
  }
  where {
    unknown call_tmp[780310] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780313 'move' call_tmp[780310](780266 'typeof' _arg1[780262]))
    unknown call_tmp[780315] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780318 'move' call_tmp[780315](780268 'typeof' _arg2[780263]))
    unknown call_tmp[780320] "expr temp" "maybe param" "maybe type" "temp"
    (780323 'move' call_tmp[780320](780270 call == call_tmp[780310] call_tmp[780315]))
    unknown call_tmp[780325] "expr temp" "maybe param" "maybe type" "temp"
    (780328 'move' call_tmp[780325](780291 call chpl_fields_are_comparable[780272] _arg1[780262] _arg2[780263]))
    (780295 '&' call_tmp[780320] call_tmp[780325])
  }
  function chpl_fields_are_comparable[780342](arg _arg1[780344]:chpl_sync_aux_t[87955], arg _arg2[780345]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780354]:bool[10] "RVV" "param" "temp"
    (780359 'move' ret[780354](780358 'deref' 1))
    (780356 return ret[780354])
  }
  function >[780330](arg _arg1[780332]:chpl_sync_aux_t[87955], arg _arg2[780333]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780373]:bool[10] "RVV" "temp"
    (780378 'move' ret[780373](780377 'deref' 0))
    (780375 return ret[780373])
  }
  where {
    unknown call_tmp[780380] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780383 'move' call_tmp[780380](780336 'typeof' _arg1[780332]))
    unknown call_tmp[780385] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780388 'move' call_tmp[780385](780338 'typeof' _arg2[780333]))
    unknown call_tmp[780390] "expr temp" "maybe param" "maybe type" "temp"
    (780393 'move' call_tmp[780390](780340 call == call_tmp[780380] call_tmp[780385]))
    unknown call_tmp[780395] "expr temp" "maybe param" "maybe type" "temp"
    (780398 'move' call_tmp[780395](780361 call chpl_fields_are_comparable[780342] _arg1[780332] _arg2[780333]))
    (780365 '&' call_tmp[780390] call_tmp[780395])
  }
  function chpl_fields_are_comparable[780412](arg _arg1[780414]:chpl_sync_aux_t[87955], arg _arg2[780415]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780424]:bool[10] "RVV" "param" "temp"
    (780429 'move' ret[780424](780428 'deref' 1))
    (780426 return ret[780424])
  }
  function >=[780400](arg _arg1[780402]:chpl_sync_aux_t[87955], arg _arg2[780403]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780443]:bool[10] "RVV" "temp"
    (780448 'move' ret[780443](780447 'deref' 1))
    (780445 return ret[780443])
  }
  where {
    unknown call_tmp[780450] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780453 'move' call_tmp[780450](780406 'typeof' _arg1[780402]))
    unknown call_tmp[780455] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780458 'move' call_tmp[780455](780408 'typeof' _arg2[780403]))
    unknown call_tmp[780460] "expr temp" "maybe param" "maybe type" "temp"
    (780463 'move' call_tmp[780460](780410 call == call_tmp[780450] call_tmp[780455]))
    unknown call_tmp[780465] "expr temp" "maybe param" "maybe type" "temp"
    (780468 'move' call_tmp[780465](780431 call chpl_fields_are_comparable[780412] _arg1[780402] _arg2[780403]))
    (780435 '&' call_tmp[780460] call_tmp[780465])
  }
  function =[780470](ref arg _arg1[780472]:chpl_sync_aux_t[87955], const?  ref arg _arg2[780473]:chpl_sync_aux_t[87955]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (780483 '=' _arg1[780472] _arg2[780473])
    (780488 return _void[55])
  }
  where {
    unknown call_tmp[780490] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780493 'move' call_tmp[780490](780476 'typeof' _arg1[780472]))
    unknown call_tmp[780495] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780498 'move' call_tmp[780495](780478 'typeof' _arg2[780473]))
    (780480 call == call_tmp[780490] call_tmp[780495])
  }
  function chpl__defaultHash[780500](arg r[780502]:chpl_sync_aux_t[87955]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[780510] "RVV" "temp"
    (780515 'move' ret[780510](780514 'deref' 0))
    (780512 return ret[780510])
  }
  type chpl_sync_aux_t[87955]
  function chpl_sync_initAux[87966](ref arg aux[87963]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513182 return _void[55])
  }
  function chpl_sync_destroyAux[87976](ref arg aux[87973]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513184 return _void[55])
  }
  function chpl_sync_waitEmptyAndLock[87986](ref arg aux[87983]:chpl_sync_aux_t[87955]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513186 return _void[55])
  }
  function chpl_sync_waitFullAndLock[87996](ref arg aux[87993]:chpl_sync_aux_t[87955]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513188 return _void[55])
  }
  function chpl_sync_lock[88006](ref arg aux[88003]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513190 return _void[55])
  }
  function chpl_sync_unlock[88016](ref arg aux[88013]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513192 return _void[55])
  }
  function chpl_sync_markAndSignalEmpty[88026](ref arg aux[88023]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513194 return _void[55])
  }
  function chpl_sync_markAndSignalFull[88036](ref arg aux[88033]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513196 return _void[55])
  }
  function chpl_sync_isFull[88046](arg value[88043]:c_void_ptr[149], ref arg aux[88049]:chpl_sync_aux_t[87955]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513200] "RVV" "temp"
    (513202 return ret[513200])
  }
  { scopeless type
    bool[10]
  }
  function chpl_single_aux_t[88058].init[780517](arg _mt[780519]:_MT[238], ref arg this[780520]:chpl_single_aux_t[88058]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780524 return _void[55])
  }
  function chpl_single_aux_t[88058].init=[780526](arg _mt[780529]:_MT[238], arg this[780530]:chpl_single_aux_t[88058], arg other[780531]:chpl_single_aux_t[88058]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780535 '=' this[780530] other[780531])
    (780539 return _void[55])
  }
  function chpl_single_aux_t[88058].deinit[780541](arg _mt[780543]:_MT[238], arg this[780545]:chpl_single_aux_t[88058]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (780553 return _void[55])
  }
  function chpl_single_aux_t[88058].writeThis[780555](arg _mt[780559]:_MT[238], arg this[780557]:chpl_single_aux_t[88058], arg f[780558]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780564 call writeThisDefaultImpl f[780558] this[780557])
    (780569 return _void[55])
  }
  function chpl_single_aux_t[88058].readThis[780571](arg _mt[780575]:_MT[238], arg this[780573]:chpl_single_aux_t[88058], arg f[780574]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780579 call readThisDefaultImpl f[780574] this[780573])
    (780585 return _void[55])
  }
  function chpl_fields_are_comparable[780599](arg _arg1[780601]:chpl_single_aux_t[88058], arg _arg2[780602]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780611]:bool[10] "RVV" "param" "temp"
    (780616 'move' ret[780611](780615 'deref' 1))
    (780613 return ret[780611])
  }
  function ==[780587](arg _arg1[780589]:chpl_single_aux_t[88058], arg _arg2[780590]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780630]:bool[10] "RVV" "temp"
    (780635 'move' ret[780630](780634 'deref' 1))
    (780632 return ret[780630])
  }
  where {
    unknown call_tmp[780637] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780640 'move' call_tmp[780637](780593 'typeof' _arg1[780589]))
    unknown call_tmp[780642] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780645 'move' call_tmp[780642](780595 'typeof' _arg2[780590]))
    unknown call_tmp[780647] "expr temp" "maybe param" "maybe type" "temp"
    (780650 'move' call_tmp[780647](780597 call == call_tmp[780637] call_tmp[780642]))
    unknown call_tmp[780652] "expr temp" "maybe param" "maybe type" "temp"
    (780655 'move' call_tmp[780652](780618 call chpl_fields_are_comparable[780599] _arg1[780589] _arg2[780590]))
    (780622 '&' call_tmp[780647] call_tmp[780652])
  }
  function chpl_fields_are_comparable[780669](arg _arg1[780671]:chpl_single_aux_t[88058], arg _arg2[780672]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780681]:bool[10] "RVV" "param" "temp"
    (780686 'move' ret[780681](780685 'deref' 1))
    (780683 return ret[780681])
  }
  function !=[780657](arg _arg1[780659]:chpl_single_aux_t[88058], arg _arg2[780660]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780700]:bool[10] "RVV" "temp"
    (780705 'move' ret[780700](780704 'deref' 0))
    (780702 return ret[780700])
  }
  where {
    unknown call_tmp[780707] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780710 'move' call_tmp[780707](780663 'typeof' _arg1[780659]))
    unknown call_tmp[780712] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780715 'move' call_tmp[780712](780665 'typeof' _arg2[780660]))
    unknown call_tmp[780717] "expr temp" "maybe param" "maybe type" "temp"
    (780720 'move' call_tmp[780717](780667 call == call_tmp[780707] call_tmp[780712]))
    unknown call_tmp[780722] "expr temp" "maybe param" "maybe type" "temp"
    (780725 'move' call_tmp[780722](780688 call chpl_fields_are_comparable[780669] _arg1[780659] _arg2[780660]))
    (780692 '&' call_tmp[780717] call_tmp[780722])
  }
  function chpl_fields_are_comparable[780739](arg _arg1[780741]:chpl_single_aux_t[88058], arg _arg2[780742]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780751]:bool[10] "RVV" "param" "temp"
    (780756 'move' ret[780751](780755 'deref' 1))
    (780753 return ret[780751])
  }
  function <[780727](arg _arg1[780729]:chpl_single_aux_t[88058], arg _arg2[780730]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780770]:bool[10] "RVV" "temp"
    (780775 'move' ret[780770](780774 'deref' 0))
    (780772 return ret[780770])
  }
  where {
    unknown call_tmp[780777] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780780 'move' call_tmp[780777](780733 'typeof' _arg1[780729]))
    unknown call_tmp[780782] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780785 'move' call_tmp[780782](780735 'typeof' _arg2[780730]))
    unknown call_tmp[780787] "expr temp" "maybe param" "maybe type" "temp"
    (780790 'move' call_tmp[780787](780737 call == call_tmp[780777] call_tmp[780782]))
    unknown call_tmp[780792] "expr temp" "maybe param" "maybe type" "temp"
    (780795 'move' call_tmp[780792](780758 call chpl_fields_are_comparable[780739] _arg1[780729] _arg2[780730]))
    (780762 '&' call_tmp[780787] call_tmp[780792])
  }
  function chpl_fields_are_comparable[780809](arg _arg1[780811]:chpl_single_aux_t[88058], arg _arg2[780812]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780821]:bool[10] "RVV" "param" "temp"
    (780826 'move' ret[780821](780825 'deref' 1))
    (780823 return ret[780821])
  }
  function <=[780797](arg _arg1[780799]:chpl_single_aux_t[88058], arg _arg2[780800]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780840]:bool[10] "RVV" "temp"
    (780845 'move' ret[780840](780844 'deref' 1))
    (780842 return ret[780840])
  }
  where {
    unknown call_tmp[780847] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780850 'move' call_tmp[780847](780803 'typeof' _arg1[780799]))
    unknown call_tmp[780852] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780855 'move' call_tmp[780852](780805 'typeof' _arg2[780800]))
    unknown call_tmp[780857] "expr temp" "maybe param" "maybe type" "temp"
    (780860 'move' call_tmp[780857](780807 call == call_tmp[780847] call_tmp[780852]))
    unknown call_tmp[780862] "expr temp" "maybe param" "maybe type" "temp"
    (780865 'move' call_tmp[780862](780828 call chpl_fields_are_comparable[780809] _arg1[780799] _arg2[780800]))
    (780832 '&' call_tmp[780857] call_tmp[780862])
  }
  function chpl_fields_are_comparable[780879](arg _arg1[780881]:chpl_single_aux_t[88058], arg _arg2[780882]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780891]:bool[10] "RVV" "param" "temp"
    (780896 'move' ret[780891](780895 'deref' 1))
    (780893 return ret[780891])
  }
  function >[780867](arg _arg1[780869]:chpl_single_aux_t[88058], arg _arg2[780870]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780910]:bool[10] "RVV" "temp"
    (780915 'move' ret[780910](780914 'deref' 0))
    (780912 return ret[780910])
  }
  where {
    unknown call_tmp[780917] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780920 'move' call_tmp[780917](780873 'typeof' _arg1[780869]))
    unknown call_tmp[780922] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780925 'move' call_tmp[780922](780875 'typeof' _arg2[780870]))
    unknown call_tmp[780927] "expr temp" "maybe param" "maybe type" "temp"
    (780930 'move' call_tmp[780927](780877 call == call_tmp[780917] call_tmp[780922]))
    unknown call_tmp[780932] "expr temp" "maybe param" "maybe type" "temp"
    (780935 'move' call_tmp[780932](780898 call chpl_fields_are_comparable[780879] _arg1[780869] _arg2[780870]))
    (780902 '&' call_tmp[780927] call_tmp[780932])
  }
  function chpl_fields_are_comparable[780949](arg _arg1[780951]:chpl_single_aux_t[88058], arg _arg2[780952]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780961]:bool[10] "RVV" "param" "temp"
    (780966 'move' ret[780961](780965 'deref' 1))
    (780963 return ret[780961])
  }
  function >=[780937](arg _arg1[780939]:chpl_single_aux_t[88058], arg _arg2[780940]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780980]:bool[10] "RVV" "temp"
    (780985 'move' ret[780980](780984 'deref' 1))
    (780982 return ret[780980])
  }
  where {
    unknown call_tmp[780987] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780990 'move' call_tmp[780987](780943 'typeof' _arg1[780939]))
    unknown call_tmp[780992] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780995 'move' call_tmp[780992](780945 'typeof' _arg2[780940]))
    unknown call_tmp[780997] "expr temp" "maybe param" "maybe type" "temp"
    (781000 'move' call_tmp[780997](780947 call == call_tmp[780987] call_tmp[780992]))
    unknown call_tmp[781002] "expr temp" "maybe param" "maybe type" "temp"
    (781005 'move' call_tmp[781002](780968 call chpl_fields_are_comparable[780949] _arg1[780939] _arg2[780940]))
    (780972 '&' call_tmp[780997] call_tmp[781002])
  }
  function =[781007](ref arg _arg1[781009]:chpl_single_aux_t[88058], const?  ref arg _arg2[781010]:chpl_single_aux_t[88058]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (781020 '=' _arg1[781009] _arg2[781010])
    (781025 return _void[55])
  }
  where {
    unknown call_tmp[781027] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (781030 'move' call_tmp[781027](781013 'typeof' _arg1[781009]))
    unknown call_tmp[781032] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (781035 'move' call_tmp[781032](781015 'typeof' _arg2[781010]))
    (781017 call == call_tmp[781027] call_tmp[781032])
  }
  function chpl__defaultHash[781037](arg r[781039]:chpl_single_aux_t[88058]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[781047] "RVV" "temp"
    (781052 'move' ret[781047](781051 'deref' 0))
    (781049 return ret[781047])
  }
  type chpl_single_aux_t[88058]
  function chpl_single_initAux[88069](ref arg aux[88066]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513204 return _void[55])
  }
  function chpl_single_destroyAux[88079](ref arg aux[88076]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513206 return _void[55])
  }
  function chpl_single_waitFullAndLock[88089](ref arg aux[88086]:chpl_single_aux_t[88058]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513208 return _void[55])
  }
  function chpl_single_lock[88099](ref arg aux[88096]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513210 return _void[55])
  }
  function chpl_single_unlock[88109](ref arg aux[88106]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513212 return _void[55])
  }
  function chpl_single_markAndSignalFull[88119](ref arg aux[88116]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513214 return _void[55])
  }
  function chpl_single_isFull[88129](arg value[88126]:c_void_ptr[149], ref arg aux[88132]:chpl_single_aux_t[88058]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513218] "RVV" "temp"
    (513220 return ret[513218])
  }
  { scopeless type
    bool[10]
  }
  function supportsNativeSyncVar[88143](arg t[88141]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[513224] "RVV" "param" "temp"
    unknown tmp[422260] "maybe param" "temp"
    unknown tmp[422281] "maybe param" "temp"
    unknown tmp[422302] "maybe param" "temp"
    (422313 'move' tmp[422302](88163 call == CHPL_TASKS[21343] "qthreads"))
    unknown call_tmp[631853] "expr temp" "maybe param" "maybe type" "temp"
    (631856 'move' call_tmp[631853](422315 call _cond_invalid tmp[422302]))
    if call_tmp[631853]
    {
      (422318 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560820] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560821] "maybe param" "temp"
    unknown call_tmp[631858] "expr temp" "maybe param" "maybe type" "temp"
    (631861 'move' call_tmp[631858](422303 call isTrue tmp[422302]))
    (560826 'move' tmp[560821](560824 call _cond_test call_tmp[631858]))
    if tmp[560821]
    {
      unknown tmp[560828] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631863] "expr temp" "maybe param" "maybe type" "temp"
      (631866 'move' call_tmp[631863](88183 call != CHPL_TARGET_ARCH[21166] "aarch64"))
      (560830 'move' tmp[560828](422306 call isTrue call_tmp[631863]))
      (560835 'move' tmp[560820](560832 '_paramFoldLogical' tmp[560821] tmp[560828]))
    }
    {
      (560840 'move' tmp[560820](560837 '_paramFoldLogical' tmp[560821] 0))
    }
    (422292 'move' tmp[422281] tmp[560820])
    unknown call_tmp[631868] "expr temp" "maybe param" "maybe type" "temp"
    (631871 'move' call_tmp[631868](422294 call _cond_invalid tmp[422281]))
    if call_tmp[631868]
    {
      (422297 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560847] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560848] "maybe param" "temp"
    unknown call_tmp[631873] "expr temp" "maybe param" "maybe type" "temp"
    (631876 'move' call_tmp[631873](422282 call isTrue tmp[422281]))
    (560853 'move' tmp[560848](560851 call _cond_test call_tmp[631873]))
    if tmp[560848]
    {
      unknown tmp[560855] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631878] "expr temp" "maybe param" "maybe type" "temp"
      (631881 'move' call_tmp[631878](88190 call castableToAlignedT t[88141]))
      (560857 'move' tmp[560855](422285 call isTrue call_tmp[631878]))
      (560862 'move' tmp[560847](560859 '_paramFoldLogical' tmp[560848] tmp[560855]))
    }
    {
      (560867 'move' tmp[560847](560864 '_paramFoldLogical' tmp[560848] 0))
    }
    (422271 'move' tmp[422260] tmp[560847])
    unknown call_tmp[631883] "expr temp" "maybe param" "maybe type" "temp"
    (631886 'move' call_tmp[631883](422273 call _cond_invalid tmp[422260]))
    if call_tmp[631883]
    {
      (422276 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560874] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560875] "maybe param" "temp"
    unknown call_tmp[631888] "expr temp" "maybe param" "maybe type" "temp"
    (631891 'move' call_tmp[631888](422261 call isTrue tmp[422260]))
    (560880 'move' tmp[560875](560878 call _cond_test call_tmp[631888]))
    if tmp[560875]
    {
      unknown tmp[560882] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631893] "expr temp" "maybe param" "maybe type" "temp"
      (631896 'move' call_tmp[631893](88196 call numBits c_uintptr[20636]))
      unknown call_tmp[631898] "expr temp" "maybe param" "maybe type" "temp"
      (631901 'move' call_tmp[631898](88198 call == call_tmp[631893] 64))
      (560884 'move' tmp[560882](422264 call isTrue call_tmp[631898]))
      (560889 'move' tmp[560874](560886 '_paramFoldLogical' tmp[560875] tmp[560882]))
    }
    {
      (560894 'move' tmp[560874](560891 '_paramFoldLogical' tmp[560875] 0))
    }
    (513229 'move' ret[513224](513228 'deref' tmp[560874]))
    (513226 return ret[513224])
  }
  function qthread_readFE[88213](ref arg dest[88210]:aligned_t[88362], const  ref arg src[88216]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513233] "RVV" "temp"
    (513235 return ret[513233])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_readFF[88229](ref arg dest[88226]:aligned_t[88362], const  ref arg src[88232]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513239] "RVV" "temp"
    (513241 return ret[513239])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_readXX[88245](ref arg dest[88242]:aligned_t[88362], const  ref arg src[88248]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513245] "RVV" "temp"
    (513247 return ret[513245])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_writeEF[88261](ref arg dest[88258]:aligned_t[88362], const  ref arg src[88264]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513251] "RVV" "temp"
    (513253 return ret[513251])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_writeFF[88277](ref arg dest[88274]:aligned_t[88362], const  ref arg src[88280]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513257] "RVV" "temp"
    (513259 return ret[513257])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_writeF[88293](ref arg dest[88290]:aligned_t[88362], const  ref arg src[88296]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513263] "RVV" "temp"
    (513265 return ret[513263])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_purge_to[88309](ref arg dest[88306]:aligned_t[88362], const  ref arg src[88312]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513269] "RVV" "temp"
    (513271 return ret[513269])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_empty[88325](const  ref arg dest[88322]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513275] "RVV" "temp"
    (513277 return ret[513275])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_fill[88337](const  ref arg dest[88334]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513281] "RVV" "temp"
    (513283 return ret[513281])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_feb_status[88349](const  ref arg dest[88346]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513287] "RVV" "temp"
    (513289 return ret[513287])
  }
  { scopeless type
    c_int[20552]
  }
  (355110 'used modules list'(87946 'use' ChapelStandard[20267])(87948 'use' SysCTypes[20943])(87951 'use' AlignedTSupport[88357]))
}