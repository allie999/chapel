AST dump for SyncVarRuntimeSupport after pass buildDefaultFunctions.
Module use list: ChapelStandard SysCTypes AlignedTSupport 

{
  function chpl__init_SyncVarRuntimeSupport[415871]() : void[4] "insert line file info" "module init"
  {
    {
    }
    {
    }
    (513154 return _void[55])
  }
  function chpl_sync_aux_t[87952].init[779830](arg _mt[779832]:_MT[238], ref arg this[779833]:chpl_sync_aux_t[87952]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (779837 return _void[55])
  }
  function chpl_sync_aux_t[87952].init=[779839](arg _mt[779842]:_MT[238], arg this[779843]:chpl_sync_aux_t[87952], arg other[779844]:chpl_sync_aux_t[87952]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (779848 '=' this[779843] other[779844])
    (779852 return _void[55])
  }
  function chpl_sync_aux_t[87952].deinit[779854](arg _mt[779856]:_MT[238], arg this[779858]:chpl_sync_aux_t[87952]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (779866 return _void[55])
  }
  function chpl_sync_aux_t[87952].writeThis[779868](arg _mt[779872]:_MT[238], arg this[779870]:chpl_sync_aux_t[87952], arg f[779871]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (779877 call writeThisDefaultImpl f[779871] this[779870])
    (779882 return _void[55])
  }
  function chpl_sync_aux_t[87952].readThis[779884](arg _mt[779888]:_MT[238], arg this[779886]:chpl_sync_aux_t[87952], arg f[779887]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (779892 call readThisDefaultImpl f[779887] this[779886])
    (779898 return _void[55])
  }
  function chpl_fields_are_comparable[779912](arg _arg1[779914]:chpl_sync_aux_t[87952], arg _arg2[779915]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779924]:bool[10] "RVV" "param" "temp"
    (779929 'move' ret[779924](779928 'deref' 1))
    (779926 return ret[779924])
  }
  function ==[779900](arg _arg1[779902]:chpl_sync_aux_t[87952], arg _arg2[779903]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[779943]:bool[10] "RVV" "temp"
    (779948 'move' ret[779943](779947 'deref' 1))
    (779945 return ret[779943])
  }
  where {
    unknown call_tmp[779950] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779953 'move' call_tmp[779950](779906 'typeof' _arg1[779902]))
    unknown call_tmp[779955] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779958 'move' call_tmp[779955](779908 'typeof' _arg2[779903]))
    unknown call_tmp[779960] "expr temp" "maybe param" "maybe type" "temp"
    (779963 'move' call_tmp[779960](779910 call == call_tmp[779950] call_tmp[779955]))
    unknown call_tmp[779965] "expr temp" "maybe param" "maybe type" "temp"
    (779968 'move' call_tmp[779965](779931 call chpl_fields_are_comparable[779912] _arg1[779902] _arg2[779903]))
    (779935 '&' call_tmp[779960] call_tmp[779965])
  }
  function chpl_fields_are_comparable[779982](arg _arg1[779984]:chpl_sync_aux_t[87952], arg _arg2[779985]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779994]:bool[10] "RVV" "param" "temp"
    (779999 'move' ret[779994](779998 'deref' 1))
    (779996 return ret[779994])
  }
  function !=[779970](arg _arg1[779972]:chpl_sync_aux_t[87952], arg _arg2[779973]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780013]:bool[10] "RVV" "temp"
    (780018 'move' ret[780013](780017 'deref' 0))
    (780015 return ret[780013])
  }
  where {
    unknown call_tmp[780020] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780023 'move' call_tmp[780020](779976 'typeof' _arg1[779972]))
    unknown call_tmp[780025] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780028 'move' call_tmp[780025](779978 'typeof' _arg2[779973]))
    unknown call_tmp[780030] "expr temp" "maybe param" "maybe type" "temp"
    (780033 'move' call_tmp[780030](779980 call == call_tmp[780020] call_tmp[780025]))
    unknown call_tmp[780035] "expr temp" "maybe param" "maybe type" "temp"
    (780038 'move' call_tmp[780035](780001 call chpl_fields_are_comparable[779982] _arg1[779972] _arg2[779973]))
    (780005 '&' call_tmp[780030] call_tmp[780035])
  }
  function chpl_fields_are_comparable[780052](arg _arg1[780054]:chpl_sync_aux_t[87952], arg _arg2[780055]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780064]:bool[10] "RVV" "param" "temp"
    (780069 'move' ret[780064](780068 'deref' 1))
    (780066 return ret[780064])
  }
  function <[780040](arg _arg1[780042]:chpl_sync_aux_t[87952], arg _arg2[780043]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780083]:bool[10] "RVV" "temp"
    (780088 'move' ret[780083](780087 'deref' 0))
    (780085 return ret[780083])
  }
  where {
    unknown call_tmp[780090] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780093 'move' call_tmp[780090](780046 'typeof' _arg1[780042]))
    unknown call_tmp[780095] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780098 'move' call_tmp[780095](780048 'typeof' _arg2[780043]))
    unknown call_tmp[780100] "expr temp" "maybe param" "maybe type" "temp"
    (780103 'move' call_tmp[780100](780050 call == call_tmp[780090] call_tmp[780095]))
    unknown call_tmp[780105] "expr temp" "maybe param" "maybe type" "temp"
    (780108 'move' call_tmp[780105](780071 call chpl_fields_are_comparable[780052] _arg1[780042] _arg2[780043]))
    (780075 '&' call_tmp[780100] call_tmp[780105])
  }
  function chpl_fields_are_comparable[780122](arg _arg1[780124]:chpl_sync_aux_t[87952], arg _arg2[780125]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780134]:bool[10] "RVV" "param" "temp"
    (780139 'move' ret[780134](780138 'deref' 1))
    (780136 return ret[780134])
  }
  function <=[780110](arg _arg1[780112]:chpl_sync_aux_t[87952], arg _arg2[780113]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780153]:bool[10] "RVV" "temp"
    (780158 'move' ret[780153](780157 'deref' 1))
    (780155 return ret[780153])
  }
  where {
    unknown call_tmp[780160] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780163 'move' call_tmp[780160](780116 'typeof' _arg1[780112]))
    unknown call_tmp[780165] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780168 'move' call_tmp[780165](780118 'typeof' _arg2[780113]))
    unknown call_tmp[780170] "expr temp" "maybe param" "maybe type" "temp"
    (780173 'move' call_tmp[780170](780120 call == call_tmp[780160] call_tmp[780165]))
    unknown call_tmp[780175] "expr temp" "maybe param" "maybe type" "temp"
    (780178 'move' call_tmp[780175](780141 call chpl_fields_are_comparable[780122] _arg1[780112] _arg2[780113]))
    (780145 '&' call_tmp[780170] call_tmp[780175])
  }
  function chpl_fields_are_comparable[780192](arg _arg1[780194]:chpl_sync_aux_t[87952], arg _arg2[780195]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780204]:bool[10] "RVV" "param" "temp"
    (780209 'move' ret[780204](780208 'deref' 1))
    (780206 return ret[780204])
  }
  function >[780180](arg _arg1[780182]:chpl_sync_aux_t[87952], arg _arg2[780183]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780223]:bool[10] "RVV" "temp"
    (780228 'move' ret[780223](780227 'deref' 0))
    (780225 return ret[780223])
  }
  where {
    unknown call_tmp[780230] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780233 'move' call_tmp[780230](780186 'typeof' _arg1[780182]))
    unknown call_tmp[780235] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780238 'move' call_tmp[780235](780188 'typeof' _arg2[780183]))
    unknown call_tmp[780240] "expr temp" "maybe param" "maybe type" "temp"
    (780243 'move' call_tmp[780240](780190 call == call_tmp[780230] call_tmp[780235]))
    unknown call_tmp[780245] "expr temp" "maybe param" "maybe type" "temp"
    (780248 'move' call_tmp[780245](780211 call chpl_fields_are_comparable[780192] _arg1[780182] _arg2[780183]))
    (780215 '&' call_tmp[780240] call_tmp[780245])
  }
  function chpl_fields_are_comparable[780262](arg _arg1[780264]:chpl_sync_aux_t[87952], arg _arg2[780265]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780274]:bool[10] "RVV" "param" "temp"
    (780279 'move' ret[780274](780278 'deref' 1))
    (780276 return ret[780274])
  }
  function >=[780250](arg _arg1[780252]:chpl_sync_aux_t[87952], arg _arg2[780253]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780293]:bool[10] "RVV" "temp"
    (780298 'move' ret[780293](780297 'deref' 1))
    (780295 return ret[780293])
  }
  where {
    unknown call_tmp[780300] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780303 'move' call_tmp[780300](780256 'typeof' _arg1[780252]))
    unknown call_tmp[780305] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780308 'move' call_tmp[780305](780258 'typeof' _arg2[780253]))
    unknown call_tmp[780310] "expr temp" "maybe param" "maybe type" "temp"
    (780313 'move' call_tmp[780310](780260 call == call_tmp[780300] call_tmp[780305]))
    unknown call_tmp[780315] "expr temp" "maybe param" "maybe type" "temp"
    (780318 'move' call_tmp[780315](780281 call chpl_fields_are_comparable[780262] _arg1[780252] _arg2[780253]))
    (780285 '&' call_tmp[780310] call_tmp[780315])
  }
  function =[780320](ref arg _arg1[780322]:chpl_sync_aux_t[87952], const?  ref arg _arg2[780323]:chpl_sync_aux_t[87952]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (780333 '=' _arg1[780322] _arg2[780323])
    (780338 return _void[55])
  }
  where {
    unknown call_tmp[780340] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780343 'move' call_tmp[780340](780326 'typeof' _arg1[780322]))
    unknown call_tmp[780345] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780348 'move' call_tmp[780345](780328 'typeof' _arg2[780323]))
    (780330 call == call_tmp[780340] call_tmp[780345])
  }
  function chpl__defaultHash[780350](arg r[780352]:chpl_sync_aux_t[87952]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[780360] "RVV" "temp"
    (780365 'move' ret[780360](780364 'deref' 0))
    (780362 return ret[780360])
  }
  type chpl_sync_aux_t[87952]
  function chpl_sync_initAux[87963](ref arg aux[87960]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513045 return _void[55])
  }
  function chpl_sync_destroyAux[87973](ref arg aux[87970]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513047 return _void[55])
  }
  function chpl_sync_waitEmptyAndLock[87983](ref arg aux[87980]:chpl_sync_aux_t[87952]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513049 return _void[55])
  }
  function chpl_sync_waitFullAndLock[87993](ref arg aux[87990]:chpl_sync_aux_t[87952]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513051 return _void[55])
  }
  function chpl_sync_lock[88003](ref arg aux[88000]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513053 return _void[55])
  }
  function chpl_sync_unlock[88013](ref arg aux[88010]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513055 return _void[55])
  }
  function chpl_sync_markAndSignalEmpty[88023](ref arg aux[88020]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513057 return _void[55])
  }
  function chpl_sync_markAndSignalFull[88033](ref arg aux[88030]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513059 return _void[55])
  }
  function chpl_sync_isFull[88043](arg value[88040]:c_void_ptr[149], ref arg aux[88046]:chpl_sync_aux_t[87952]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513063] "RVV" "temp"
    (513065 return ret[513063])
  }
  { scopeless type
    bool[10]
  }
  function chpl_single_aux_t[88055].init[780367](arg _mt[780369]:_MT[238], ref arg this[780370]:chpl_single_aux_t[88055]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780374 return _void[55])
  }
  function chpl_single_aux_t[88055].init=[780376](arg _mt[780379]:_MT[238], arg this[780380]:chpl_single_aux_t[88055], arg other[780381]:chpl_single_aux_t[88055]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780385 '=' this[780380] other[780381])
    (780389 return _void[55])
  }
  function chpl_single_aux_t[88055].deinit[780391](arg _mt[780393]:_MT[238], arg this[780395]:chpl_single_aux_t[88055]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (780403 return _void[55])
  }
  function chpl_single_aux_t[88055].writeThis[780405](arg _mt[780409]:_MT[238], arg this[780407]:chpl_single_aux_t[88055], arg f[780408]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780414 call writeThisDefaultImpl f[780408] this[780407])
    (780419 return _void[55])
  }
  function chpl_single_aux_t[88055].readThis[780421](arg _mt[780425]:_MT[238], arg this[780423]:chpl_single_aux_t[88055], arg f[780424]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780429 call readThisDefaultImpl f[780424] this[780423])
    (780435 return _void[55])
  }
  function chpl_fields_are_comparable[780449](arg _arg1[780451]:chpl_single_aux_t[88055], arg _arg2[780452]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780461]:bool[10] "RVV" "param" "temp"
    (780466 'move' ret[780461](780465 'deref' 1))
    (780463 return ret[780461])
  }
  function ==[780437](arg _arg1[780439]:chpl_single_aux_t[88055], arg _arg2[780440]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780480]:bool[10] "RVV" "temp"
    (780485 'move' ret[780480](780484 'deref' 1))
    (780482 return ret[780480])
  }
  where {
    unknown call_tmp[780487] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780490 'move' call_tmp[780487](780443 'typeof' _arg1[780439]))
    unknown call_tmp[780492] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780495 'move' call_tmp[780492](780445 'typeof' _arg2[780440]))
    unknown call_tmp[780497] "expr temp" "maybe param" "maybe type" "temp"
    (780500 'move' call_tmp[780497](780447 call == call_tmp[780487] call_tmp[780492]))
    unknown call_tmp[780502] "expr temp" "maybe param" "maybe type" "temp"
    (780505 'move' call_tmp[780502](780468 call chpl_fields_are_comparable[780449] _arg1[780439] _arg2[780440]))
    (780472 '&' call_tmp[780497] call_tmp[780502])
  }
  function chpl_fields_are_comparable[780519](arg _arg1[780521]:chpl_single_aux_t[88055], arg _arg2[780522]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780531]:bool[10] "RVV" "param" "temp"
    (780536 'move' ret[780531](780535 'deref' 1))
    (780533 return ret[780531])
  }
  function !=[780507](arg _arg1[780509]:chpl_single_aux_t[88055], arg _arg2[780510]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780550]:bool[10] "RVV" "temp"
    (780555 'move' ret[780550](780554 'deref' 0))
    (780552 return ret[780550])
  }
  where {
    unknown call_tmp[780557] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780560 'move' call_tmp[780557](780513 'typeof' _arg1[780509]))
    unknown call_tmp[780562] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780565 'move' call_tmp[780562](780515 'typeof' _arg2[780510]))
    unknown call_tmp[780567] "expr temp" "maybe param" "maybe type" "temp"
    (780570 'move' call_tmp[780567](780517 call == call_tmp[780557] call_tmp[780562]))
    unknown call_tmp[780572] "expr temp" "maybe param" "maybe type" "temp"
    (780575 'move' call_tmp[780572](780538 call chpl_fields_are_comparable[780519] _arg1[780509] _arg2[780510]))
    (780542 '&' call_tmp[780567] call_tmp[780572])
  }
  function chpl_fields_are_comparable[780589](arg _arg1[780591]:chpl_single_aux_t[88055], arg _arg2[780592]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780601]:bool[10] "RVV" "param" "temp"
    (780606 'move' ret[780601](780605 'deref' 1))
    (780603 return ret[780601])
  }
  function <[780577](arg _arg1[780579]:chpl_single_aux_t[88055], arg _arg2[780580]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780620]:bool[10] "RVV" "temp"
    (780625 'move' ret[780620](780624 'deref' 0))
    (780622 return ret[780620])
  }
  where {
    unknown call_tmp[780627] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780630 'move' call_tmp[780627](780583 'typeof' _arg1[780579]))
    unknown call_tmp[780632] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780635 'move' call_tmp[780632](780585 'typeof' _arg2[780580]))
    unknown call_tmp[780637] "expr temp" "maybe param" "maybe type" "temp"
    (780640 'move' call_tmp[780637](780587 call == call_tmp[780627] call_tmp[780632]))
    unknown call_tmp[780642] "expr temp" "maybe param" "maybe type" "temp"
    (780645 'move' call_tmp[780642](780608 call chpl_fields_are_comparable[780589] _arg1[780579] _arg2[780580]))
    (780612 '&' call_tmp[780637] call_tmp[780642])
  }
  function chpl_fields_are_comparable[780659](arg _arg1[780661]:chpl_single_aux_t[88055], arg _arg2[780662]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780671]:bool[10] "RVV" "param" "temp"
    (780676 'move' ret[780671](780675 'deref' 1))
    (780673 return ret[780671])
  }
  function <=[780647](arg _arg1[780649]:chpl_single_aux_t[88055], arg _arg2[780650]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780690]:bool[10] "RVV" "temp"
    (780695 'move' ret[780690](780694 'deref' 1))
    (780692 return ret[780690])
  }
  where {
    unknown call_tmp[780697] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780700 'move' call_tmp[780697](780653 'typeof' _arg1[780649]))
    unknown call_tmp[780702] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780705 'move' call_tmp[780702](780655 'typeof' _arg2[780650]))
    unknown call_tmp[780707] "expr temp" "maybe param" "maybe type" "temp"
    (780710 'move' call_tmp[780707](780657 call == call_tmp[780697] call_tmp[780702]))
    unknown call_tmp[780712] "expr temp" "maybe param" "maybe type" "temp"
    (780715 'move' call_tmp[780712](780678 call chpl_fields_are_comparable[780659] _arg1[780649] _arg2[780650]))
    (780682 '&' call_tmp[780707] call_tmp[780712])
  }
  function chpl_fields_are_comparable[780729](arg _arg1[780731]:chpl_single_aux_t[88055], arg _arg2[780732]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780741]:bool[10] "RVV" "param" "temp"
    (780746 'move' ret[780741](780745 'deref' 1))
    (780743 return ret[780741])
  }
  function >[780717](arg _arg1[780719]:chpl_single_aux_t[88055], arg _arg2[780720]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780760]:bool[10] "RVV" "temp"
    (780765 'move' ret[780760](780764 'deref' 0))
    (780762 return ret[780760])
  }
  where {
    unknown call_tmp[780767] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780770 'move' call_tmp[780767](780723 'typeof' _arg1[780719]))
    unknown call_tmp[780772] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780775 'move' call_tmp[780772](780725 'typeof' _arg2[780720]))
    unknown call_tmp[780777] "expr temp" "maybe param" "maybe type" "temp"
    (780780 'move' call_tmp[780777](780727 call == call_tmp[780767] call_tmp[780772]))
    unknown call_tmp[780782] "expr temp" "maybe param" "maybe type" "temp"
    (780785 'move' call_tmp[780782](780748 call chpl_fields_are_comparable[780729] _arg1[780719] _arg2[780720]))
    (780752 '&' call_tmp[780777] call_tmp[780782])
  }
  function chpl_fields_are_comparable[780799](arg _arg1[780801]:chpl_single_aux_t[88055], arg _arg2[780802]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780811]:bool[10] "RVV" "param" "temp"
    (780816 'move' ret[780811](780815 'deref' 1))
    (780813 return ret[780811])
  }
  function >=[780787](arg _arg1[780789]:chpl_single_aux_t[88055], arg _arg2[780790]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780830]:bool[10] "RVV" "temp"
    (780835 'move' ret[780830](780834 'deref' 1))
    (780832 return ret[780830])
  }
  where {
    unknown call_tmp[780837] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780840 'move' call_tmp[780837](780793 'typeof' _arg1[780789]))
    unknown call_tmp[780842] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780845 'move' call_tmp[780842](780795 'typeof' _arg2[780790]))
    unknown call_tmp[780847] "expr temp" "maybe param" "maybe type" "temp"
    (780850 'move' call_tmp[780847](780797 call == call_tmp[780837] call_tmp[780842]))
    unknown call_tmp[780852] "expr temp" "maybe param" "maybe type" "temp"
    (780855 'move' call_tmp[780852](780818 call chpl_fields_are_comparable[780799] _arg1[780789] _arg2[780790]))
    (780822 '&' call_tmp[780847] call_tmp[780852])
  }
  function =[780857](ref arg _arg1[780859]:chpl_single_aux_t[88055], const?  ref arg _arg2[780860]:chpl_single_aux_t[88055]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (780870 '=' _arg1[780859] _arg2[780860])
    (780875 return _void[55])
  }
  where {
    unknown call_tmp[780877] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780880 'move' call_tmp[780877](780863 'typeof' _arg1[780859]))
    unknown call_tmp[780882] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780885 'move' call_tmp[780882](780865 'typeof' _arg2[780860]))
    (780867 call == call_tmp[780877] call_tmp[780882])
  }
  function chpl__defaultHash[780887](arg r[780889]:chpl_single_aux_t[88055]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[780897] "RVV" "temp"
    (780902 'move' ret[780897](780901 'deref' 0))
    (780899 return ret[780897])
  }
  type chpl_single_aux_t[88055]
  function chpl_single_initAux[88066](ref arg aux[88063]:chpl_single_aux_t[88055]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513067 return _void[55])
  }
  function chpl_single_destroyAux[88076](ref arg aux[88073]:chpl_single_aux_t[88055]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513069 return _void[55])
  }
  function chpl_single_waitFullAndLock[88086](ref arg aux[88083]:chpl_single_aux_t[88055]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513071 return _void[55])
  }
  function chpl_single_lock[88096](ref arg aux[88093]:chpl_single_aux_t[88055]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513073 return _void[55])
  }
  function chpl_single_unlock[88106](ref arg aux[88103]:chpl_single_aux_t[88055]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513075 return _void[55])
  }
  function chpl_single_markAndSignalFull[88116](ref arg aux[88113]:chpl_single_aux_t[88055]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513077 return _void[55])
  }
  function chpl_single_isFull[88126](arg value[88123]:c_void_ptr[149], ref arg aux[88129]:chpl_single_aux_t[88055]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513081] "RVV" "temp"
    (513083 return ret[513081])
  }
  { scopeless type
    bool[10]
  }
  function supportsNativeSyncVar[88140](arg t[88138]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[513087] "RVV" "param" "temp"
    unknown tmp[422128] "maybe param" "temp"
    unknown tmp[422149] "maybe param" "temp"
    unknown tmp[422170] "maybe param" "temp"
    (422181 'move' tmp[422170](88160 call == CHPL_TASKS[21340] "qthreads"))
    unknown call_tmp[631724] "expr temp" "maybe param" "maybe type" "temp"
    (631727 'move' call_tmp[631724](422183 call _cond_invalid tmp[422170]))
    if call_tmp[631724]
    {
      (422186 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560691] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560692] "maybe param" "temp"
    unknown call_tmp[631729] "expr temp" "maybe param" "maybe type" "temp"
    (631732 'move' call_tmp[631729](422171 call isTrue tmp[422170]))
    (560697 'move' tmp[560692](560695 call _cond_test call_tmp[631729]))
    if tmp[560692]
    {
      unknown tmp[560699] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631734] "expr temp" "maybe param" "maybe type" "temp"
      (631737 'move' call_tmp[631734](88180 call != CHPL_TARGET_ARCH[21163] "aarch64"))
      (560701 'move' tmp[560699](422174 call isTrue call_tmp[631734]))
      (560706 'move' tmp[560691](560703 '_paramFoldLogical' tmp[560692] tmp[560699]))
    }
    {
      (560711 'move' tmp[560691](560708 '_paramFoldLogical' tmp[560692] 0))
    }
    (422160 'move' tmp[422149] tmp[560691])
    unknown call_tmp[631739] "expr temp" "maybe param" "maybe type" "temp"
    (631742 'move' call_tmp[631739](422162 call _cond_invalid tmp[422149]))
    if call_tmp[631739]
    {
      (422165 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560718] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560719] "maybe param" "temp"
    unknown call_tmp[631744] "expr temp" "maybe param" "maybe type" "temp"
    (631747 'move' call_tmp[631744](422150 call isTrue tmp[422149]))
    (560724 'move' tmp[560719](560722 call _cond_test call_tmp[631744]))
    if tmp[560719]
    {
      unknown tmp[560726] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631749] "expr temp" "maybe param" "maybe type" "temp"
      (631752 'move' call_tmp[631749](88187 call castableToAlignedT t[88138]))
      (560728 'move' tmp[560726](422153 call isTrue call_tmp[631749]))
      (560733 'move' tmp[560718](560730 '_paramFoldLogical' tmp[560719] tmp[560726]))
    }
    {
      (560738 'move' tmp[560718](560735 '_paramFoldLogical' tmp[560719] 0))
    }
    (422139 'move' tmp[422128] tmp[560718])
    unknown call_tmp[631754] "expr temp" "maybe param" "maybe type" "temp"
    (631757 'move' call_tmp[631754](422141 call _cond_invalid tmp[422128]))
    if call_tmp[631754]
    {
      (422144 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560745] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560746] "maybe param" "temp"
    unknown call_tmp[631759] "expr temp" "maybe param" "maybe type" "temp"
    (631762 'move' call_tmp[631759](422129 call isTrue tmp[422128]))
    (560751 'move' tmp[560746](560749 call _cond_test call_tmp[631759]))
    if tmp[560746]
    {
      unknown tmp[560753] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631764] "expr temp" "maybe param" "maybe type" "temp"
      (631767 'move' call_tmp[631764](88193 call numBits c_uintptr[20633]))
      unknown call_tmp[631769] "expr temp" "maybe param" "maybe type" "temp"
      (631772 'move' call_tmp[631769](88195 call == call_tmp[631764] 64))
      (560755 'move' tmp[560753](422132 call isTrue call_tmp[631769]))
      (560760 'move' tmp[560745](560757 '_paramFoldLogical' tmp[560746] tmp[560753]))
    }
    {
      (560765 'move' tmp[560745](560762 '_paramFoldLogical' tmp[560746] 0))
    }
    (513092 'move' ret[513087](513091 'deref' tmp[560745]))
    (513089 return ret[513087])
  }
  function qthread_readFE[88210](ref arg dest[88207]:aligned_t[88359], const  ref arg src[88213]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513096] "RVV" "temp"
    (513098 return ret[513096])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_readFF[88226](ref arg dest[88223]:aligned_t[88359], const  ref arg src[88229]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513102] "RVV" "temp"
    (513104 return ret[513102])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_readXX[88242](ref arg dest[88239]:aligned_t[88359], const  ref arg src[88245]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513108] "RVV" "temp"
    (513110 return ret[513108])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_writeEF[88258](ref arg dest[88255]:aligned_t[88359], const  ref arg src[88261]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513114] "RVV" "temp"
    (513116 return ret[513114])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_writeFF[88274](ref arg dest[88271]:aligned_t[88359], const  ref arg src[88277]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513120] "RVV" "temp"
    (513122 return ret[513120])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_writeF[88290](ref arg dest[88287]:aligned_t[88359], const  ref arg src[88293]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513126] "RVV" "temp"
    (513128 return ret[513126])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_purge_to[88306](ref arg dest[88303]:aligned_t[88359], const  ref arg src[88309]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513132] "RVV" "temp"
    (513134 return ret[513132])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_empty[88322](const  ref arg dest[88319]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513138] "RVV" "temp"
    (513140 return ret[513138])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_fill[88334](const  ref arg dest[88331]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513144] "RVV" "temp"
    (513146 return ret[513144])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_feb_status[88346](const  ref arg dest[88343]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513150] "RVV" "temp"
    (513152 return ret[513150])
  }
  { scopeless type
    c_int[20549]
  }
  (354979 'used modules list'(87943 'use' ChapelStandard[20264])(87945 'use' SysCTypes[20940])(87948 'use' AlignedTSupport[88354]))
}