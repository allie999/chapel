AST dump for SyncVarRuntimeSupport after pass buildDefaultFunctions.
Module use list: ChapelStandard SysCTypes AlignedTSupport 

{
  function chpl__init_SyncVarRuntimeSupport[415960]() : void[4] "insert line file info" "module init"
  {
    {
    }
    {
    }
    (513245 return _void[55])
  }
  function chpl_sync_aux_t[87952].init[779919](arg _mt[779921]:_MT[238], ref arg this[779922]:chpl_sync_aux_t[87952]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (779926 return _void[55])
  }
  function chpl_sync_aux_t[87952].init=[779928](arg _mt[779931]:_MT[238], arg this[779932]:chpl_sync_aux_t[87952], arg other[779933]:chpl_sync_aux_t[87952]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (779937 '=' this[779932] other[779933])
    (779941 return _void[55])
  }
  function chpl_sync_aux_t[87952].deinit[779943](arg _mt[779945]:_MT[238], arg this[779947]:chpl_sync_aux_t[87952]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (779955 return _void[55])
  }
  function chpl_sync_aux_t[87952].writeThis[779957](arg _mt[779961]:_MT[238], arg this[779959]:chpl_sync_aux_t[87952], arg f[779960]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (779966 call writeThisDefaultImpl f[779960] this[779959])
    (779971 return _void[55])
  }
  function chpl_sync_aux_t[87952].readThis[779973](arg _mt[779977]:_MT[238], arg this[779975]:chpl_sync_aux_t[87952], arg f[779976]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (779981 call readThisDefaultImpl f[779976] this[779975])
    (779987 return _void[55])
  }
  function chpl_fields_are_comparable[780001](arg _arg1[780003]:chpl_sync_aux_t[87952], arg _arg2[780004]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780013]:bool[10] "RVV" "param" "temp"
    (780018 'move' ret[780013](780017 'deref' 1))
    (780015 return ret[780013])
  }
  function ==[779989](arg _arg1[779991]:chpl_sync_aux_t[87952], arg _arg2[779992]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780032]:bool[10] "RVV" "temp"
    (780037 'move' ret[780032](780036 'deref' 1))
    (780034 return ret[780032])
  }
  where {
    unknown call_tmp[780039] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780042 'move' call_tmp[780039](779995 'typeof' _arg1[779991]))
    unknown call_tmp[780044] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780047 'move' call_tmp[780044](779997 'typeof' _arg2[779992]))
    unknown call_tmp[780049] "expr temp" "maybe param" "maybe type" "temp"
    (780052 'move' call_tmp[780049](779999 call == call_tmp[780039] call_tmp[780044]))
    unknown call_tmp[780054] "expr temp" "maybe param" "maybe type" "temp"
    (780057 'move' call_tmp[780054](780020 call chpl_fields_are_comparable[780001] _arg1[779991] _arg2[779992]))
    (780024 '&' call_tmp[780049] call_tmp[780054])
  }
  function chpl_fields_are_comparable[780071](arg _arg1[780073]:chpl_sync_aux_t[87952], arg _arg2[780074]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780083]:bool[10] "RVV" "param" "temp"
    (780088 'move' ret[780083](780087 'deref' 1))
    (780085 return ret[780083])
  }
  function !=[780059](arg _arg1[780061]:chpl_sync_aux_t[87952], arg _arg2[780062]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780102]:bool[10] "RVV" "temp"
    (780107 'move' ret[780102](780106 'deref' 0))
    (780104 return ret[780102])
  }
  where {
    unknown call_tmp[780109] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780112 'move' call_tmp[780109](780065 'typeof' _arg1[780061]))
    unknown call_tmp[780114] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780117 'move' call_tmp[780114](780067 'typeof' _arg2[780062]))
    unknown call_tmp[780119] "expr temp" "maybe param" "maybe type" "temp"
    (780122 'move' call_tmp[780119](780069 call == call_tmp[780109] call_tmp[780114]))
    unknown call_tmp[780124] "expr temp" "maybe param" "maybe type" "temp"
    (780127 'move' call_tmp[780124](780090 call chpl_fields_are_comparable[780071] _arg1[780061] _arg2[780062]))
    (780094 '&' call_tmp[780119] call_tmp[780124])
  }
  function chpl_fields_are_comparable[780141](arg _arg1[780143]:chpl_sync_aux_t[87952], arg _arg2[780144]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780153]:bool[10] "RVV" "param" "temp"
    (780158 'move' ret[780153](780157 'deref' 1))
    (780155 return ret[780153])
  }
  function <[780129](arg _arg1[780131]:chpl_sync_aux_t[87952], arg _arg2[780132]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780172]:bool[10] "RVV" "temp"
    (780177 'move' ret[780172](780176 'deref' 0))
    (780174 return ret[780172])
  }
  where {
    unknown call_tmp[780179] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780182 'move' call_tmp[780179](780135 'typeof' _arg1[780131]))
    unknown call_tmp[780184] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780187 'move' call_tmp[780184](780137 'typeof' _arg2[780132]))
    unknown call_tmp[780189] "expr temp" "maybe param" "maybe type" "temp"
    (780192 'move' call_tmp[780189](780139 call == call_tmp[780179] call_tmp[780184]))
    unknown call_tmp[780194] "expr temp" "maybe param" "maybe type" "temp"
    (780197 'move' call_tmp[780194](780160 call chpl_fields_are_comparable[780141] _arg1[780131] _arg2[780132]))
    (780164 '&' call_tmp[780189] call_tmp[780194])
  }
  function chpl_fields_are_comparable[780211](arg _arg1[780213]:chpl_sync_aux_t[87952], arg _arg2[780214]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780223]:bool[10] "RVV" "param" "temp"
    (780228 'move' ret[780223](780227 'deref' 1))
    (780225 return ret[780223])
  }
  function <=[780199](arg _arg1[780201]:chpl_sync_aux_t[87952], arg _arg2[780202]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780242]:bool[10] "RVV" "temp"
    (780247 'move' ret[780242](780246 'deref' 1))
    (780244 return ret[780242])
  }
  where {
    unknown call_tmp[780249] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780252 'move' call_tmp[780249](780205 'typeof' _arg1[780201]))
    unknown call_tmp[780254] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780257 'move' call_tmp[780254](780207 'typeof' _arg2[780202]))
    unknown call_tmp[780259] "expr temp" "maybe param" "maybe type" "temp"
    (780262 'move' call_tmp[780259](780209 call == call_tmp[780249] call_tmp[780254]))
    unknown call_tmp[780264] "expr temp" "maybe param" "maybe type" "temp"
    (780267 'move' call_tmp[780264](780230 call chpl_fields_are_comparable[780211] _arg1[780201] _arg2[780202]))
    (780234 '&' call_tmp[780259] call_tmp[780264])
  }
  function chpl_fields_are_comparable[780281](arg _arg1[780283]:chpl_sync_aux_t[87952], arg _arg2[780284]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780293]:bool[10] "RVV" "param" "temp"
    (780298 'move' ret[780293](780297 'deref' 1))
    (780295 return ret[780293])
  }
  function >[780269](arg _arg1[780271]:chpl_sync_aux_t[87952], arg _arg2[780272]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780312]:bool[10] "RVV" "temp"
    (780317 'move' ret[780312](780316 'deref' 0))
    (780314 return ret[780312])
  }
  where {
    unknown call_tmp[780319] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780322 'move' call_tmp[780319](780275 'typeof' _arg1[780271]))
    unknown call_tmp[780324] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780327 'move' call_tmp[780324](780277 'typeof' _arg2[780272]))
    unknown call_tmp[780329] "expr temp" "maybe param" "maybe type" "temp"
    (780332 'move' call_tmp[780329](780279 call == call_tmp[780319] call_tmp[780324]))
    unknown call_tmp[780334] "expr temp" "maybe param" "maybe type" "temp"
    (780337 'move' call_tmp[780334](780300 call chpl_fields_are_comparable[780281] _arg1[780271] _arg2[780272]))
    (780304 '&' call_tmp[780329] call_tmp[780334])
  }
  function chpl_fields_are_comparable[780351](arg _arg1[780353]:chpl_sync_aux_t[87952], arg _arg2[780354]:chpl_sync_aux_t[87952]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780363]:bool[10] "RVV" "param" "temp"
    (780368 'move' ret[780363](780367 'deref' 1))
    (780365 return ret[780363])
  }
  function >=[780339](arg _arg1[780341]:chpl_sync_aux_t[87952], arg _arg2[780342]:chpl_sync_aux_t[87952]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780382]:bool[10] "RVV" "temp"
    (780387 'move' ret[780382](780386 'deref' 1))
    (780384 return ret[780382])
  }
  where {
    unknown call_tmp[780389] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780392 'move' call_tmp[780389](780345 'typeof' _arg1[780341]))
    unknown call_tmp[780394] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780397 'move' call_tmp[780394](780347 'typeof' _arg2[780342]))
    unknown call_tmp[780399] "expr temp" "maybe param" "maybe type" "temp"
    (780402 'move' call_tmp[780399](780349 call == call_tmp[780389] call_tmp[780394]))
    unknown call_tmp[780404] "expr temp" "maybe param" "maybe type" "temp"
    (780407 'move' call_tmp[780404](780370 call chpl_fields_are_comparable[780351] _arg1[780341] _arg2[780342]))
    (780374 '&' call_tmp[780399] call_tmp[780404])
  }
  function =[780409](ref arg _arg1[780411]:chpl_sync_aux_t[87952], const?  ref arg _arg2[780412]:chpl_sync_aux_t[87952]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (780422 '=' _arg1[780411] _arg2[780412])
    (780427 return _void[55])
  }
  where {
    unknown call_tmp[780429] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780432 'move' call_tmp[780429](780415 'typeof' _arg1[780411]))
    unknown call_tmp[780434] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780437 'move' call_tmp[780434](780417 'typeof' _arg2[780412]))
    (780419 call == call_tmp[780429] call_tmp[780434])
  }
  function chpl__defaultHash[780439](arg r[780441]:chpl_sync_aux_t[87952]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[780449] "RVV" "temp"
    (780454 'move' ret[780449](780453 'deref' 0))
    (780451 return ret[780449])
  }
  type chpl_sync_aux_t[87952]
  function chpl_sync_initAux[87963](ref arg aux[87960]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513136 return _void[55])
  }
  function chpl_sync_destroyAux[87973](ref arg aux[87970]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513138 return _void[55])
  }
  function chpl_sync_waitEmptyAndLock[87983](ref arg aux[87980]:chpl_sync_aux_t[87952]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513140 return _void[55])
  }
  function chpl_sync_waitFullAndLock[87993](ref arg aux[87990]:chpl_sync_aux_t[87952]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513142 return _void[55])
  }
  function chpl_sync_lock[88003](ref arg aux[88000]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513144 return _void[55])
  }
  function chpl_sync_unlock[88013](ref arg aux[88010]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513146 return _void[55])
  }
  function chpl_sync_markAndSignalEmpty[88023](ref arg aux[88020]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513148 return _void[55])
  }
  function chpl_sync_markAndSignalFull[88033](ref arg aux[88030]:chpl_sync_aux_t[87952]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513150 return _void[55])
  }
  function chpl_sync_isFull[88043](arg value[88040]:c_void_ptr[149], ref arg aux[88046]:chpl_sync_aux_t[87952]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513154] "RVV" "temp"
    (513156 return ret[513154])
  }
  { scopeless type
    bool[10]
  }
  function chpl_single_aux_t[88055].init[780456](arg _mt[780458]:_MT[238], ref arg this[780459]:chpl_single_aux_t[88055]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780463 return _void[55])
  }
  function chpl_single_aux_t[88055].init=[780465](arg _mt[780468]:_MT[238], arg this[780469]:chpl_single_aux_t[88055], arg other[780470]:chpl_single_aux_t[88055]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780474 '=' this[780469] other[780470])
    (780478 return _void[55])
  }
  function chpl_single_aux_t[88055].deinit[780480](arg _mt[780482]:_MT[238], arg this[780484]:chpl_single_aux_t[88055]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (780492 return _void[55])
  }
  function chpl_single_aux_t[88055].writeThis[780494](arg _mt[780498]:_MT[238], arg this[780496]:chpl_single_aux_t[88055], arg f[780497]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780503 call writeThisDefaultImpl f[780497] this[780496])
    (780508 return _void[55])
  }
  function chpl_single_aux_t[88055].readThis[780510](arg _mt[780514]:_MT[238], arg this[780512]:chpl_single_aux_t[88055], arg f[780513]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780518 call readThisDefaultImpl f[780513] this[780512])
    (780524 return _void[55])
  }
  function chpl_fields_are_comparable[780538](arg _arg1[780540]:chpl_single_aux_t[88055], arg _arg2[780541]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780550]:bool[10] "RVV" "param" "temp"
    (780555 'move' ret[780550](780554 'deref' 1))
    (780552 return ret[780550])
  }
  function ==[780526](arg _arg1[780528]:chpl_single_aux_t[88055], arg _arg2[780529]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780569]:bool[10] "RVV" "temp"
    (780574 'move' ret[780569](780573 'deref' 1))
    (780571 return ret[780569])
  }
  where {
    unknown call_tmp[780576] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780579 'move' call_tmp[780576](780532 'typeof' _arg1[780528]))
    unknown call_tmp[780581] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780584 'move' call_tmp[780581](780534 'typeof' _arg2[780529]))
    unknown call_tmp[780586] "expr temp" "maybe param" "maybe type" "temp"
    (780589 'move' call_tmp[780586](780536 call == call_tmp[780576] call_tmp[780581]))
    unknown call_tmp[780591] "expr temp" "maybe param" "maybe type" "temp"
    (780594 'move' call_tmp[780591](780557 call chpl_fields_are_comparable[780538] _arg1[780528] _arg2[780529]))
    (780561 '&' call_tmp[780586] call_tmp[780591])
  }
  function chpl_fields_are_comparable[780608](arg _arg1[780610]:chpl_single_aux_t[88055], arg _arg2[780611]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780620]:bool[10] "RVV" "param" "temp"
    (780625 'move' ret[780620](780624 'deref' 1))
    (780622 return ret[780620])
  }
  function !=[780596](arg _arg1[780598]:chpl_single_aux_t[88055], arg _arg2[780599]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780639]:bool[10] "RVV" "temp"
    (780644 'move' ret[780639](780643 'deref' 0))
    (780641 return ret[780639])
  }
  where {
    unknown call_tmp[780646] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780649 'move' call_tmp[780646](780602 'typeof' _arg1[780598]))
    unknown call_tmp[780651] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780654 'move' call_tmp[780651](780604 'typeof' _arg2[780599]))
    unknown call_tmp[780656] "expr temp" "maybe param" "maybe type" "temp"
    (780659 'move' call_tmp[780656](780606 call == call_tmp[780646] call_tmp[780651]))
    unknown call_tmp[780661] "expr temp" "maybe param" "maybe type" "temp"
    (780664 'move' call_tmp[780661](780627 call chpl_fields_are_comparable[780608] _arg1[780598] _arg2[780599]))
    (780631 '&' call_tmp[780656] call_tmp[780661])
  }
  function chpl_fields_are_comparable[780678](arg _arg1[780680]:chpl_single_aux_t[88055], arg _arg2[780681]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780690]:bool[10] "RVV" "param" "temp"
    (780695 'move' ret[780690](780694 'deref' 1))
    (780692 return ret[780690])
  }
  function <[780666](arg _arg1[780668]:chpl_single_aux_t[88055], arg _arg2[780669]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780709]:bool[10] "RVV" "temp"
    (780714 'move' ret[780709](780713 'deref' 0))
    (780711 return ret[780709])
  }
  where {
    unknown call_tmp[780716] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780719 'move' call_tmp[780716](780672 'typeof' _arg1[780668]))
    unknown call_tmp[780721] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780724 'move' call_tmp[780721](780674 'typeof' _arg2[780669]))
    unknown call_tmp[780726] "expr temp" "maybe param" "maybe type" "temp"
    (780729 'move' call_tmp[780726](780676 call == call_tmp[780716] call_tmp[780721]))
    unknown call_tmp[780731] "expr temp" "maybe param" "maybe type" "temp"
    (780734 'move' call_tmp[780731](780697 call chpl_fields_are_comparable[780678] _arg1[780668] _arg2[780669]))
    (780701 '&' call_tmp[780726] call_tmp[780731])
  }
  function chpl_fields_are_comparable[780748](arg _arg1[780750]:chpl_single_aux_t[88055], arg _arg2[780751]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780760]:bool[10] "RVV" "param" "temp"
    (780765 'move' ret[780760](780764 'deref' 1))
    (780762 return ret[780760])
  }
  function <=[780736](arg _arg1[780738]:chpl_single_aux_t[88055], arg _arg2[780739]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780779]:bool[10] "RVV" "temp"
    (780784 'move' ret[780779](780783 'deref' 1))
    (780781 return ret[780779])
  }
  where {
    unknown call_tmp[780786] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780789 'move' call_tmp[780786](780742 'typeof' _arg1[780738]))
    unknown call_tmp[780791] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780794 'move' call_tmp[780791](780744 'typeof' _arg2[780739]))
    unknown call_tmp[780796] "expr temp" "maybe param" "maybe type" "temp"
    (780799 'move' call_tmp[780796](780746 call == call_tmp[780786] call_tmp[780791]))
    unknown call_tmp[780801] "expr temp" "maybe param" "maybe type" "temp"
    (780804 'move' call_tmp[780801](780767 call chpl_fields_are_comparable[780748] _arg1[780738] _arg2[780739]))
    (780771 '&' call_tmp[780796] call_tmp[780801])
  }
  function chpl_fields_are_comparable[780818](arg _arg1[780820]:chpl_single_aux_t[88055], arg _arg2[780821]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780830]:bool[10] "RVV" "param" "temp"
    (780835 'move' ret[780830](780834 'deref' 1))
    (780832 return ret[780830])
  }
  function >[780806](arg _arg1[780808]:chpl_single_aux_t[88055], arg _arg2[780809]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780849]:bool[10] "RVV" "temp"
    (780854 'move' ret[780849](780853 'deref' 0))
    (780851 return ret[780849])
  }
  where {
    unknown call_tmp[780856] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780859 'move' call_tmp[780856](780812 'typeof' _arg1[780808]))
    unknown call_tmp[780861] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780864 'move' call_tmp[780861](780814 'typeof' _arg2[780809]))
    unknown call_tmp[780866] "expr temp" "maybe param" "maybe type" "temp"
    (780869 'move' call_tmp[780866](780816 call == call_tmp[780856] call_tmp[780861]))
    unknown call_tmp[780871] "expr temp" "maybe param" "maybe type" "temp"
    (780874 'move' call_tmp[780871](780837 call chpl_fields_are_comparable[780818] _arg1[780808] _arg2[780809]))
    (780841 '&' call_tmp[780866] call_tmp[780871])
  }
  function chpl_fields_are_comparable[780888](arg _arg1[780890]:chpl_single_aux_t[88055], arg _arg2[780891]:chpl_single_aux_t[88055]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780900]:bool[10] "RVV" "param" "temp"
    (780905 'move' ret[780900](780904 'deref' 1))
    (780902 return ret[780900])
  }
  function >=[780876](arg _arg1[780878]:chpl_single_aux_t[88055], arg _arg2[780879]:chpl_single_aux_t[88055]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780919]:bool[10] "RVV" "temp"
    (780924 'move' ret[780919](780923 'deref' 1))
    (780921 return ret[780919])
  }
  where {
    unknown call_tmp[780926] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780929 'move' call_tmp[780926](780882 'typeof' _arg1[780878]))
    unknown call_tmp[780931] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780934 'move' call_tmp[780931](780884 'typeof' _arg2[780879]))
    unknown call_tmp[780936] "expr temp" "maybe param" "maybe type" "temp"
    (780939 'move' call_tmp[780936](780886 call == call_tmp[780926] call_tmp[780931]))
    unknown call_tmp[780941] "expr temp" "maybe param" "maybe type" "temp"
    (780944 'move' call_tmp[780941](780907 call chpl_fields_are_comparable[780888] _arg1[780878] _arg2[780879]))
    (780911 '&' call_tmp[780936] call_tmp[780941])
  }
  function =[780946](ref arg _arg1[780948]:chpl_single_aux_t[88055], const?  ref arg _arg2[780949]:chpl_single_aux_t[88055]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (780959 '=' _arg1[780948] _arg2[780949])
    (780964 return _void[55])
  }
  where {
    unknown call_tmp[780966] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780969 'move' call_tmp[780966](780952 'typeof' _arg1[780948]))
    unknown call_tmp[780971] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780974 'move' call_tmp[780971](780954 'typeof' _arg2[780949]))
    (780956 call == call_tmp[780966] call_tmp[780971])
  }
  function chpl__defaultHash[780976](arg r[780978]:chpl_single_aux_t[88055]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[780986] "RVV" "temp"
    (780991 'move' ret[780986](780990 'deref' 0))
    (780988 return ret[780986])
  }
  type chpl_single_aux_t[88055]
  function chpl_single_initAux[88066](ref arg aux[88063]:chpl_single_aux_t[88055]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513158 return _void[55])
  }
  function chpl_single_destroyAux[88076](ref arg aux[88073]:chpl_single_aux_t[88055]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513160 return _void[55])
  }
  function chpl_single_waitFullAndLock[88086](ref arg aux[88083]:chpl_single_aux_t[88055]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513162 return _void[55])
  }
  function chpl_single_lock[88096](ref arg aux[88093]:chpl_single_aux_t[88055]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513164 return _void[55])
  }
  function chpl_single_unlock[88106](ref arg aux[88103]:chpl_single_aux_t[88055]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513166 return _void[55])
  }
  function chpl_single_markAndSignalFull[88116](ref arg aux[88113]:chpl_single_aux_t[88055]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513168 return _void[55])
  }
  function chpl_single_isFull[88126](arg value[88123]:c_void_ptr[149], ref arg aux[88129]:chpl_single_aux_t[88055]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513172] "RVV" "temp"
    (513174 return ret[513172])
  }
  { scopeless type
    bool[10]
  }
  function supportsNativeSyncVar[88140](arg t[88138]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[513178] "RVV" "param" "temp"
    unknown tmp[422217] "maybe param" "temp"
    unknown tmp[422238] "maybe param" "temp"
    unknown tmp[422259] "maybe param" "temp"
    (422270 'move' tmp[422259](88160 call == CHPL_TASKS[21340] "qthreads"))
    unknown call_tmp[631798] "expr temp" "maybe param" "maybe type" "temp"
    (631801 'move' call_tmp[631798](422272 call _cond_invalid tmp[422259]))
    if call_tmp[631798]
    {
      (422275 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560765] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560766] "maybe param" "temp"
    unknown call_tmp[631803] "expr temp" "maybe param" "maybe type" "temp"
    (631806 'move' call_tmp[631803](422260 call isTrue tmp[422259]))
    (560771 'move' tmp[560766](560769 call _cond_test call_tmp[631803]))
    if tmp[560766]
    {
      unknown tmp[560773] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631808] "expr temp" "maybe param" "maybe type" "temp"
      (631811 'move' call_tmp[631808](88180 call != CHPL_TARGET_ARCH[21163] "aarch64"))
      (560775 'move' tmp[560773](422263 call isTrue call_tmp[631808]))
      (560780 'move' tmp[560765](560777 '_paramFoldLogical' tmp[560766] tmp[560773]))
    }
    {
      (560785 'move' tmp[560765](560782 '_paramFoldLogical' tmp[560766] 0))
    }
    (422249 'move' tmp[422238] tmp[560765])
    unknown call_tmp[631813] "expr temp" "maybe param" "maybe type" "temp"
    (631816 'move' call_tmp[631813](422251 call _cond_invalid tmp[422238]))
    if call_tmp[631813]
    {
      (422254 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560792] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560793] "maybe param" "temp"
    unknown call_tmp[631818] "expr temp" "maybe param" "maybe type" "temp"
    (631821 'move' call_tmp[631818](422239 call isTrue tmp[422238]))
    (560798 'move' tmp[560793](560796 call _cond_test call_tmp[631818]))
    if tmp[560793]
    {
      unknown tmp[560800] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631823] "expr temp" "maybe param" "maybe type" "temp"
      (631826 'move' call_tmp[631823](88187 call castableToAlignedT t[88138]))
      (560802 'move' tmp[560800](422242 call isTrue call_tmp[631823]))
      (560807 'move' tmp[560792](560804 '_paramFoldLogical' tmp[560793] tmp[560800]))
    }
    {
      (560812 'move' tmp[560792](560809 '_paramFoldLogical' tmp[560793] 0))
    }
    (422228 'move' tmp[422217] tmp[560792])
    unknown call_tmp[631828] "expr temp" "maybe param" "maybe type" "temp"
    (631831 'move' call_tmp[631828](422230 call _cond_invalid tmp[422217]))
    if call_tmp[631828]
    {
      (422233 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560819] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560820] "maybe param" "temp"
    unknown call_tmp[631833] "expr temp" "maybe param" "maybe type" "temp"
    (631836 'move' call_tmp[631833](422218 call isTrue tmp[422217]))
    (560825 'move' tmp[560820](560823 call _cond_test call_tmp[631833]))
    if tmp[560820]
    {
      unknown tmp[560827] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631838] "expr temp" "maybe param" "maybe type" "temp"
      (631841 'move' call_tmp[631838](88193 call numBits c_uintptr[20633]))
      unknown call_tmp[631843] "expr temp" "maybe param" "maybe type" "temp"
      (631846 'move' call_tmp[631843](88195 call == call_tmp[631838] 64))
      (560829 'move' tmp[560827](422221 call isTrue call_tmp[631843]))
      (560834 'move' tmp[560819](560831 '_paramFoldLogical' tmp[560820] tmp[560827]))
    }
    {
      (560839 'move' tmp[560819](560836 '_paramFoldLogical' tmp[560820] 0))
    }
    (513183 'move' ret[513178](513182 'deref' tmp[560819]))
    (513180 return ret[513178])
  }
  function qthread_readFE[88210](ref arg dest[88207]:aligned_t[88359], const  ref arg src[88213]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513187] "RVV" "temp"
    (513189 return ret[513187])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_readFF[88226](ref arg dest[88223]:aligned_t[88359], const  ref arg src[88229]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513193] "RVV" "temp"
    (513195 return ret[513193])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_readXX[88242](ref arg dest[88239]:aligned_t[88359], const  ref arg src[88245]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513199] "RVV" "temp"
    (513201 return ret[513199])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_writeEF[88258](ref arg dest[88255]:aligned_t[88359], const  ref arg src[88261]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513205] "RVV" "temp"
    (513207 return ret[513205])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_writeFF[88274](ref arg dest[88271]:aligned_t[88359], const  ref arg src[88277]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513211] "RVV" "temp"
    (513213 return ret[513211])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_writeF[88290](ref arg dest[88287]:aligned_t[88359], const  ref arg src[88293]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513217] "RVV" "temp"
    (513219 return ret[513217])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_purge_to[88306](ref arg dest[88303]:aligned_t[88359], const  ref arg src[88309]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513223] "RVV" "temp"
    (513225 return ret[513223])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_empty[88322](const  ref arg dest[88319]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513229] "RVV" "temp"
    (513231 return ret[513229])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_fill[88334](const  ref arg dest[88331]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513235] "RVV" "temp"
    (513237 return ret[513235])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_feb_status[88346](const  ref arg dest[88343]:aligned_t[88359]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513241] "RVV" "temp"
    (513243 return ret[513241])
  }
  { scopeless type
    c_int[20549]
  }
  (355067 'used modules list'(87943 'use' ChapelStandard[20264])(87945 'use' SysCTypes[20940])(87948 'use' AlignedTSupport[88354]))
}