AST dump for SyncVarRuntimeSupport after pass buildDefaultFunctions.
Module use list: ChapelStandard SysCTypes AlignedTSupport 

{
  function chpl__init_SyncVarRuntimeSupport[416076]() : void[4] "insert line file info" "module init"
  {
    {
    }
    {
    }
    (513369 return _void[55])
  }
  function chpl_sync_aux_t[87955].init[780108](arg _mt[780110]:_MT[238], ref arg this[780111]:chpl_sync_aux_t[87955]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780115 return _void[55])
  }
  function chpl_sync_aux_t[87955].init=[780117](arg _mt[780120]:_MT[238], arg this[780121]:chpl_sync_aux_t[87955], arg other[780122]:chpl_sync_aux_t[87955]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780126 '=' this[780121] other[780122])
    (780130 return _void[55])
  }
  function chpl_sync_aux_t[87955].deinit[780132](arg _mt[780134]:_MT[238], arg this[780136]:chpl_sync_aux_t[87955]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (780144 return _void[55])
  }
  function chpl_sync_aux_t[87955].writeThis[780146](arg _mt[780150]:_MT[238], arg this[780148]:chpl_sync_aux_t[87955], arg f[780149]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780155 call writeThisDefaultImpl f[780149] this[780148])
    (780160 return _void[55])
  }
  function chpl_sync_aux_t[87955].readThis[780162](arg _mt[780166]:_MT[238], arg this[780164]:chpl_sync_aux_t[87955], arg f[780165]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780170 call readThisDefaultImpl f[780165] this[780164])
    (780176 return _void[55])
  }
  function chpl_fields_are_comparable[780190](arg _arg1[780192]:chpl_sync_aux_t[87955], arg _arg2[780193]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780202]:bool[10] "RVV" "param" "temp"
    (780207 'move' ret[780202](780206 'deref' 1))
    (780204 return ret[780202])
  }
  function ==[780178](arg _arg1[780180]:chpl_sync_aux_t[87955], arg _arg2[780181]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780221]:bool[10] "RVV" "temp"
    (780226 'move' ret[780221](780225 'deref' 1))
    (780223 return ret[780221])
  }
  where {
    unknown call_tmp[780228] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780231 'move' call_tmp[780228](780184 'typeof' _arg1[780180]))
    unknown call_tmp[780233] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780236 'move' call_tmp[780233](780186 'typeof' _arg2[780181]))
    unknown call_tmp[780238] "expr temp" "maybe param" "maybe type" "temp"
    (780241 'move' call_tmp[780238](780188 call == call_tmp[780228] call_tmp[780233]))
    unknown call_tmp[780243] "expr temp" "maybe param" "maybe type" "temp"
    (780246 'move' call_tmp[780243](780209 call chpl_fields_are_comparable[780190] _arg1[780180] _arg2[780181]))
    (780213 '&' call_tmp[780238] call_tmp[780243])
  }
  function chpl_fields_are_comparable[780260](arg _arg1[780262]:chpl_sync_aux_t[87955], arg _arg2[780263]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780272]:bool[10] "RVV" "param" "temp"
    (780277 'move' ret[780272](780276 'deref' 1))
    (780274 return ret[780272])
  }
  function !=[780248](arg _arg1[780250]:chpl_sync_aux_t[87955], arg _arg2[780251]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780291]:bool[10] "RVV" "temp"
    (780296 'move' ret[780291](780295 'deref' 0))
    (780293 return ret[780291])
  }
  where {
    unknown call_tmp[780298] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780301 'move' call_tmp[780298](780254 'typeof' _arg1[780250]))
    unknown call_tmp[780303] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780306 'move' call_tmp[780303](780256 'typeof' _arg2[780251]))
    unknown call_tmp[780308] "expr temp" "maybe param" "maybe type" "temp"
    (780311 'move' call_tmp[780308](780258 call == call_tmp[780298] call_tmp[780303]))
    unknown call_tmp[780313] "expr temp" "maybe param" "maybe type" "temp"
    (780316 'move' call_tmp[780313](780279 call chpl_fields_are_comparable[780260] _arg1[780250] _arg2[780251]))
    (780283 '&' call_tmp[780308] call_tmp[780313])
  }
  function chpl_fields_are_comparable[780330](arg _arg1[780332]:chpl_sync_aux_t[87955], arg _arg2[780333]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780342]:bool[10] "RVV" "param" "temp"
    (780347 'move' ret[780342](780346 'deref' 1))
    (780344 return ret[780342])
  }
  function <[780318](arg _arg1[780320]:chpl_sync_aux_t[87955], arg _arg2[780321]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780361]:bool[10] "RVV" "temp"
    (780366 'move' ret[780361](780365 'deref' 0))
    (780363 return ret[780361])
  }
  where {
    unknown call_tmp[780368] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780371 'move' call_tmp[780368](780324 'typeof' _arg1[780320]))
    unknown call_tmp[780373] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780376 'move' call_tmp[780373](780326 'typeof' _arg2[780321]))
    unknown call_tmp[780378] "expr temp" "maybe param" "maybe type" "temp"
    (780381 'move' call_tmp[780378](780328 call == call_tmp[780368] call_tmp[780373]))
    unknown call_tmp[780383] "expr temp" "maybe param" "maybe type" "temp"
    (780386 'move' call_tmp[780383](780349 call chpl_fields_are_comparable[780330] _arg1[780320] _arg2[780321]))
    (780353 '&' call_tmp[780378] call_tmp[780383])
  }
  function chpl_fields_are_comparable[780400](arg _arg1[780402]:chpl_sync_aux_t[87955], arg _arg2[780403]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780412]:bool[10] "RVV" "param" "temp"
    (780417 'move' ret[780412](780416 'deref' 1))
    (780414 return ret[780412])
  }
  function <=[780388](arg _arg1[780390]:chpl_sync_aux_t[87955], arg _arg2[780391]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780431]:bool[10] "RVV" "temp"
    (780436 'move' ret[780431](780435 'deref' 1))
    (780433 return ret[780431])
  }
  where {
    unknown call_tmp[780438] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780441 'move' call_tmp[780438](780394 'typeof' _arg1[780390]))
    unknown call_tmp[780443] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780446 'move' call_tmp[780443](780396 'typeof' _arg2[780391]))
    unknown call_tmp[780448] "expr temp" "maybe param" "maybe type" "temp"
    (780451 'move' call_tmp[780448](780398 call == call_tmp[780438] call_tmp[780443]))
    unknown call_tmp[780453] "expr temp" "maybe param" "maybe type" "temp"
    (780456 'move' call_tmp[780453](780419 call chpl_fields_are_comparable[780400] _arg1[780390] _arg2[780391]))
    (780423 '&' call_tmp[780448] call_tmp[780453])
  }
  function chpl_fields_are_comparable[780470](arg _arg1[780472]:chpl_sync_aux_t[87955], arg _arg2[780473]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780482]:bool[10] "RVV" "param" "temp"
    (780487 'move' ret[780482](780486 'deref' 1))
    (780484 return ret[780482])
  }
  function >[780458](arg _arg1[780460]:chpl_sync_aux_t[87955], arg _arg2[780461]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780501]:bool[10] "RVV" "temp"
    (780506 'move' ret[780501](780505 'deref' 0))
    (780503 return ret[780501])
  }
  where {
    unknown call_tmp[780508] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780511 'move' call_tmp[780508](780464 'typeof' _arg1[780460]))
    unknown call_tmp[780513] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780516 'move' call_tmp[780513](780466 'typeof' _arg2[780461]))
    unknown call_tmp[780518] "expr temp" "maybe param" "maybe type" "temp"
    (780521 'move' call_tmp[780518](780468 call == call_tmp[780508] call_tmp[780513]))
    unknown call_tmp[780523] "expr temp" "maybe param" "maybe type" "temp"
    (780526 'move' call_tmp[780523](780489 call chpl_fields_are_comparable[780470] _arg1[780460] _arg2[780461]))
    (780493 '&' call_tmp[780518] call_tmp[780523])
  }
  function chpl_fields_are_comparable[780540](arg _arg1[780542]:chpl_sync_aux_t[87955], arg _arg2[780543]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780552]:bool[10] "RVV" "param" "temp"
    (780557 'move' ret[780552](780556 'deref' 1))
    (780554 return ret[780552])
  }
  function >=[780528](arg _arg1[780530]:chpl_sync_aux_t[87955], arg _arg2[780531]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780571]:bool[10] "RVV" "temp"
    (780576 'move' ret[780571](780575 'deref' 1))
    (780573 return ret[780571])
  }
  where {
    unknown call_tmp[780578] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780581 'move' call_tmp[780578](780534 'typeof' _arg1[780530]))
    unknown call_tmp[780583] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780586 'move' call_tmp[780583](780536 'typeof' _arg2[780531]))
    unknown call_tmp[780588] "expr temp" "maybe param" "maybe type" "temp"
    (780591 'move' call_tmp[780588](780538 call == call_tmp[780578] call_tmp[780583]))
    unknown call_tmp[780593] "expr temp" "maybe param" "maybe type" "temp"
    (780596 'move' call_tmp[780593](780559 call chpl_fields_are_comparable[780540] _arg1[780530] _arg2[780531]))
    (780563 '&' call_tmp[780588] call_tmp[780593])
  }
  function =[780598](ref arg _arg1[780600]:chpl_sync_aux_t[87955], const?  ref arg _arg2[780601]:chpl_sync_aux_t[87955]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (780611 '=' _arg1[780600] _arg2[780601])
    (780616 return _void[55])
  }
  where {
    unknown call_tmp[780618] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780621 'move' call_tmp[780618](780604 'typeof' _arg1[780600]))
    unknown call_tmp[780623] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780626 'move' call_tmp[780623](780606 'typeof' _arg2[780601]))
    (780608 call == call_tmp[780618] call_tmp[780623])
  }
  function chpl__defaultHash[780628](arg r[780630]:chpl_sync_aux_t[87955]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[780638] "RVV" "temp"
    (780643 'move' ret[780638](780642 'deref' 0))
    (780640 return ret[780638])
  }
  type chpl_sync_aux_t[87955]
  function chpl_sync_initAux[87966](ref arg aux[87963]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513260 return _void[55])
  }
  function chpl_sync_destroyAux[87976](ref arg aux[87973]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513262 return _void[55])
  }
  function chpl_sync_waitEmptyAndLock[87986](ref arg aux[87983]:chpl_sync_aux_t[87955]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513264 return _void[55])
  }
  function chpl_sync_waitFullAndLock[87996](ref arg aux[87993]:chpl_sync_aux_t[87955]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513266 return _void[55])
  }
  function chpl_sync_lock[88006](ref arg aux[88003]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513268 return _void[55])
  }
  function chpl_sync_unlock[88016](ref arg aux[88013]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513270 return _void[55])
  }
  function chpl_sync_markAndSignalEmpty[88026](ref arg aux[88023]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513272 return _void[55])
  }
  function chpl_sync_markAndSignalFull[88036](ref arg aux[88033]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513274 return _void[55])
  }
  function chpl_sync_isFull[88046](arg value[88043]:c_void_ptr[149], ref arg aux[88049]:chpl_sync_aux_t[87955]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513278] "RVV" "temp"
    (513280 return ret[513278])
  }
  { scopeless type
    bool[10]
  }
  function chpl_single_aux_t[88058].init[780645](arg _mt[780647]:_MT[238], ref arg this[780648]:chpl_single_aux_t[88058]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780652 return _void[55])
  }
  function chpl_single_aux_t[88058].init=[780654](arg _mt[780657]:_MT[238], arg this[780658]:chpl_single_aux_t[88058], arg other[780659]:chpl_single_aux_t[88058]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780663 '=' this[780658] other[780659])
    (780667 return _void[55])
  }
  function chpl_single_aux_t[88058].deinit[780669](arg _mt[780671]:_MT[238], arg this[780673]:chpl_single_aux_t[88058]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (780681 return _void[55])
  }
  function chpl_single_aux_t[88058].writeThis[780683](arg _mt[780687]:_MT[238], arg this[780685]:chpl_single_aux_t[88058], arg f[780686]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780692 call writeThisDefaultImpl f[780686] this[780685])
    (780697 return _void[55])
  }
  function chpl_single_aux_t[88058].readThis[780699](arg _mt[780703]:_MT[238], arg this[780701]:chpl_single_aux_t[88058], arg f[780702]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780707 call readThisDefaultImpl f[780702] this[780701])
    (780713 return _void[55])
  }
  function chpl_fields_are_comparable[780727](arg _arg1[780729]:chpl_single_aux_t[88058], arg _arg2[780730]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780739]:bool[10] "RVV" "param" "temp"
    (780744 'move' ret[780739](780743 'deref' 1))
    (780741 return ret[780739])
  }
  function ==[780715](arg _arg1[780717]:chpl_single_aux_t[88058], arg _arg2[780718]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780758]:bool[10] "RVV" "temp"
    (780763 'move' ret[780758](780762 'deref' 1))
    (780760 return ret[780758])
  }
  where {
    unknown call_tmp[780765] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780768 'move' call_tmp[780765](780721 'typeof' _arg1[780717]))
    unknown call_tmp[780770] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780773 'move' call_tmp[780770](780723 'typeof' _arg2[780718]))
    unknown call_tmp[780775] "expr temp" "maybe param" "maybe type" "temp"
    (780778 'move' call_tmp[780775](780725 call == call_tmp[780765] call_tmp[780770]))
    unknown call_tmp[780780] "expr temp" "maybe param" "maybe type" "temp"
    (780783 'move' call_tmp[780780](780746 call chpl_fields_are_comparable[780727] _arg1[780717] _arg2[780718]))
    (780750 '&' call_tmp[780775] call_tmp[780780])
  }
  function chpl_fields_are_comparable[780797](arg _arg1[780799]:chpl_single_aux_t[88058], arg _arg2[780800]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780809]:bool[10] "RVV" "param" "temp"
    (780814 'move' ret[780809](780813 'deref' 1))
    (780811 return ret[780809])
  }
  function !=[780785](arg _arg1[780787]:chpl_single_aux_t[88058], arg _arg2[780788]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780828]:bool[10] "RVV" "temp"
    (780833 'move' ret[780828](780832 'deref' 0))
    (780830 return ret[780828])
  }
  where {
    unknown call_tmp[780835] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780838 'move' call_tmp[780835](780791 'typeof' _arg1[780787]))
    unknown call_tmp[780840] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780843 'move' call_tmp[780840](780793 'typeof' _arg2[780788]))
    unknown call_tmp[780845] "expr temp" "maybe param" "maybe type" "temp"
    (780848 'move' call_tmp[780845](780795 call == call_tmp[780835] call_tmp[780840]))
    unknown call_tmp[780850] "expr temp" "maybe param" "maybe type" "temp"
    (780853 'move' call_tmp[780850](780816 call chpl_fields_are_comparable[780797] _arg1[780787] _arg2[780788]))
    (780820 '&' call_tmp[780845] call_tmp[780850])
  }
  function chpl_fields_are_comparable[780867](arg _arg1[780869]:chpl_single_aux_t[88058], arg _arg2[780870]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780879]:bool[10] "RVV" "param" "temp"
    (780884 'move' ret[780879](780883 'deref' 1))
    (780881 return ret[780879])
  }
  function <[780855](arg _arg1[780857]:chpl_single_aux_t[88058], arg _arg2[780858]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780898]:bool[10] "RVV" "temp"
    (780903 'move' ret[780898](780902 'deref' 0))
    (780900 return ret[780898])
  }
  where {
    unknown call_tmp[780905] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780908 'move' call_tmp[780905](780861 'typeof' _arg1[780857]))
    unknown call_tmp[780910] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780913 'move' call_tmp[780910](780863 'typeof' _arg2[780858]))
    unknown call_tmp[780915] "expr temp" "maybe param" "maybe type" "temp"
    (780918 'move' call_tmp[780915](780865 call == call_tmp[780905] call_tmp[780910]))
    unknown call_tmp[780920] "expr temp" "maybe param" "maybe type" "temp"
    (780923 'move' call_tmp[780920](780886 call chpl_fields_are_comparable[780867] _arg1[780857] _arg2[780858]))
    (780890 '&' call_tmp[780915] call_tmp[780920])
  }
  function chpl_fields_are_comparable[780937](arg _arg1[780939]:chpl_single_aux_t[88058], arg _arg2[780940]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780949]:bool[10] "RVV" "param" "temp"
    (780954 'move' ret[780949](780953 'deref' 1))
    (780951 return ret[780949])
  }
  function <=[780925](arg _arg1[780927]:chpl_single_aux_t[88058], arg _arg2[780928]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780968]:bool[10] "RVV" "temp"
    (780973 'move' ret[780968](780972 'deref' 1))
    (780970 return ret[780968])
  }
  where {
    unknown call_tmp[780975] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780978 'move' call_tmp[780975](780931 'typeof' _arg1[780927]))
    unknown call_tmp[780980] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780983 'move' call_tmp[780980](780933 'typeof' _arg2[780928]))
    unknown call_tmp[780985] "expr temp" "maybe param" "maybe type" "temp"
    (780988 'move' call_tmp[780985](780935 call == call_tmp[780975] call_tmp[780980]))
    unknown call_tmp[780990] "expr temp" "maybe param" "maybe type" "temp"
    (780993 'move' call_tmp[780990](780956 call chpl_fields_are_comparable[780937] _arg1[780927] _arg2[780928]))
    (780960 '&' call_tmp[780985] call_tmp[780990])
  }
  function chpl_fields_are_comparable[781007](arg _arg1[781009]:chpl_single_aux_t[88058], arg _arg2[781010]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[781019]:bool[10] "RVV" "param" "temp"
    (781024 'move' ret[781019](781023 'deref' 1))
    (781021 return ret[781019])
  }
  function >[780995](arg _arg1[780997]:chpl_single_aux_t[88058], arg _arg2[780998]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[781038]:bool[10] "RVV" "temp"
    (781043 'move' ret[781038](781042 'deref' 0))
    (781040 return ret[781038])
  }
  where {
    unknown call_tmp[781045] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (781048 'move' call_tmp[781045](781001 'typeof' _arg1[780997]))
    unknown call_tmp[781050] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (781053 'move' call_tmp[781050](781003 'typeof' _arg2[780998]))
    unknown call_tmp[781055] "expr temp" "maybe param" "maybe type" "temp"
    (781058 'move' call_tmp[781055](781005 call == call_tmp[781045] call_tmp[781050]))
    unknown call_tmp[781060] "expr temp" "maybe param" "maybe type" "temp"
    (781063 'move' call_tmp[781060](781026 call chpl_fields_are_comparable[781007] _arg1[780997] _arg2[780998]))
    (781030 '&' call_tmp[781055] call_tmp[781060])
  }
  function chpl_fields_are_comparable[781077](arg _arg1[781079]:chpl_single_aux_t[88058], arg _arg2[781080]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[781089]:bool[10] "RVV" "param" "temp"
    (781094 'move' ret[781089](781093 'deref' 1))
    (781091 return ret[781089])
  }
  function >=[781065](arg _arg1[781067]:chpl_single_aux_t[88058], arg _arg2[781068]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[781108]:bool[10] "RVV" "temp"
    (781113 'move' ret[781108](781112 'deref' 1))
    (781110 return ret[781108])
  }
  where {
    unknown call_tmp[781115] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (781118 'move' call_tmp[781115](781071 'typeof' _arg1[781067]))
    unknown call_tmp[781120] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (781123 'move' call_tmp[781120](781073 'typeof' _arg2[781068]))
    unknown call_tmp[781125] "expr temp" "maybe param" "maybe type" "temp"
    (781128 'move' call_tmp[781125](781075 call == call_tmp[781115] call_tmp[781120]))
    unknown call_tmp[781130] "expr temp" "maybe param" "maybe type" "temp"
    (781133 'move' call_tmp[781130](781096 call chpl_fields_are_comparable[781077] _arg1[781067] _arg2[781068]))
    (781100 '&' call_tmp[781125] call_tmp[781130])
  }
  function =[781135](ref arg _arg1[781137]:chpl_single_aux_t[88058], const?  ref arg _arg2[781138]:chpl_single_aux_t[88058]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (781148 '=' _arg1[781137] _arg2[781138])
    (781153 return _void[55])
  }
  where {
    unknown call_tmp[781155] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (781158 'move' call_tmp[781155](781141 'typeof' _arg1[781137]))
    unknown call_tmp[781160] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (781163 'move' call_tmp[781160](781143 'typeof' _arg2[781138]))
    (781145 call == call_tmp[781155] call_tmp[781160])
  }
  function chpl__defaultHash[781165](arg r[781167]:chpl_single_aux_t[88058]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[781175] "RVV" "temp"
    (781180 'move' ret[781175](781179 'deref' 0))
    (781177 return ret[781175])
  }
  type chpl_single_aux_t[88058]
  function chpl_single_initAux[88069](ref arg aux[88066]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513282 return _void[55])
  }
  function chpl_single_destroyAux[88079](ref arg aux[88076]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513284 return _void[55])
  }
  function chpl_single_waitFullAndLock[88089](ref arg aux[88086]:chpl_single_aux_t[88058]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513286 return _void[55])
  }
  function chpl_single_lock[88099](ref arg aux[88096]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513288 return _void[55])
  }
  function chpl_single_unlock[88109](ref arg aux[88106]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513290 return _void[55])
  }
  function chpl_single_markAndSignalFull[88119](ref arg aux[88116]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513292 return _void[55])
  }
  function chpl_single_isFull[88129](arg value[88126]:c_void_ptr[149], ref arg aux[88132]:chpl_single_aux_t[88058]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513296] "RVV" "temp"
    (513298 return ret[513296])
  }
  { scopeless type
    bool[10]
  }
  function supportsNativeSyncVar[88143](arg t[88141]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[513302] "RVV" "param" "temp"
    unknown tmp[422333] "maybe param" "temp"
    unknown tmp[422354] "maybe param" "temp"
    unknown tmp[422375] "maybe param" "temp"
    (422386 'move' tmp[422375](88163 call == CHPL_TASKS[21343] "qthreads"))
    unknown call_tmp[631940] "expr temp" "maybe param" "maybe type" "temp"
    (631943 'move' call_tmp[631940](422388 call _cond_invalid tmp[422375]))
    if call_tmp[631940]
    {
      (422391 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560907] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560908] "maybe param" "temp"
    unknown call_tmp[631945] "expr temp" "maybe param" "maybe type" "temp"
    (631948 'move' call_tmp[631945](422376 call isTrue tmp[422375]))
    (560913 'move' tmp[560908](560911 call _cond_test call_tmp[631945]))
    if tmp[560908]
    {
      unknown tmp[560915] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631950] "expr temp" "maybe param" "maybe type" "temp"
      (631953 'move' call_tmp[631950](88183 call != CHPL_TARGET_ARCH[21166] "aarch64"))
      (560917 'move' tmp[560915](422379 call isTrue call_tmp[631950]))
      (560922 'move' tmp[560907](560919 '_paramFoldLogical' tmp[560908] tmp[560915]))
    }
    {
      (560927 'move' tmp[560907](560924 '_paramFoldLogical' tmp[560908] 0))
    }
    (422365 'move' tmp[422354] tmp[560907])
    unknown call_tmp[631955] "expr temp" "maybe param" "maybe type" "temp"
    (631958 'move' call_tmp[631955](422367 call _cond_invalid tmp[422354]))
    if call_tmp[631955]
    {
      (422370 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560934] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560935] "maybe param" "temp"
    unknown call_tmp[631960] "expr temp" "maybe param" "maybe type" "temp"
    (631963 'move' call_tmp[631960](422355 call isTrue tmp[422354]))
    (560940 'move' tmp[560935](560938 call _cond_test call_tmp[631960]))
    if tmp[560935]
    {
      unknown tmp[560942] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631965] "expr temp" "maybe param" "maybe type" "temp"
      (631968 'move' call_tmp[631965](88190 call castableToAlignedT t[88141]))
      (560944 'move' tmp[560942](422358 call isTrue call_tmp[631965]))
      (560949 'move' tmp[560934](560946 '_paramFoldLogical' tmp[560935] tmp[560942]))
    }
    {
      (560954 'move' tmp[560934](560951 '_paramFoldLogical' tmp[560935] 0))
    }
    (422344 'move' tmp[422333] tmp[560934])
    unknown call_tmp[631970] "expr temp" "maybe param" "maybe type" "temp"
    (631973 'move' call_tmp[631970](422346 call _cond_invalid tmp[422333]))
    if call_tmp[631970]
    {
      (422349 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560961] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560962] "maybe param" "temp"
    unknown call_tmp[631975] "expr temp" "maybe param" "maybe type" "temp"
    (631978 'move' call_tmp[631975](422334 call isTrue tmp[422333]))
    (560967 'move' tmp[560962](560965 call _cond_test call_tmp[631975]))
    if tmp[560962]
    {
      unknown tmp[560969] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631980] "expr temp" "maybe param" "maybe type" "temp"
      (631983 'move' call_tmp[631980](88196 call numBits c_uintptr[20636]))
      unknown call_tmp[631985] "expr temp" "maybe param" "maybe type" "temp"
      (631988 'move' call_tmp[631985](88198 call == call_tmp[631980] 64))
      (560971 'move' tmp[560969](422337 call isTrue call_tmp[631985]))
      (560976 'move' tmp[560961](560973 '_paramFoldLogical' tmp[560962] tmp[560969]))
    }
    {
      (560981 'move' tmp[560961](560978 '_paramFoldLogical' tmp[560962] 0))
    }
    (513307 'move' ret[513302](513306 'deref' tmp[560961]))
    (513304 return ret[513302])
  }
  function qthread_readFE[88213](ref arg dest[88210]:aligned_t[88362], const  ref arg src[88216]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513311] "RVV" "temp"
    (513313 return ret[513311])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_readFF[88229](ref arg dest[88226]:aligned_t[88362], const  ref arg src[88232]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513317] "RVV" "temp"
    (513319 return ret[513317])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_readXX[88245](ref arg dest[88242]:aligned_t[88362], const  ref arg src[88248]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513323] "RVV" "temp"
    (513325 return ret[513323])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_writeEF[88261](ref arg dest[88258]:aligned_t[88362], const  ref arg src[88264]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513329] "RVV" "temp"
    (513331 return ret[513329])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_writeFF[88277](ref arg dest[88274]:aligned_t[88362], const  ref arg src[88280]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513335] "RVV" "temp"
    (513337 return ret[513335])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_writeF[88293](ref arg dest[88290]:aligned_t[88362], const  ref arg src[88296]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513341] "RVV" "temp"
    (513343 return ret[513341])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_purge_to[88309](ref arg dest[88306]:aligned_t[88362], const  ref arg src[88312]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513347] "RVV" "temp"
    (513349 return ret[513347])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_empty[88325](const  ref arg dest[88322]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513353] "RVV" "temp"
    (513355 return ret[513353])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_fill[88337](const  ref arg dest[88334]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513359] "RVV" "temp"
    (513361 return ret[513359])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_feb_status[88349](const  ref arg dest[88346]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513365] "RVV" "temp"
    (513367 return ret[513365])
  }
  { scopeless type
    c_int[20552]
  }
  (355178 'used modules list'(87946 'use' ChapelStandard[20267])(87948 'use' SysCTypes[20943])(87951 'use' AlignedTSupport[88357]))
}