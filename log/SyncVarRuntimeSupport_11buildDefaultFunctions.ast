AST dump for SyncVarRuntimeSupport after pass buildDefaultFunctions.
Module use list: ChapelStandard SysCTypes AlignedTSupport 

{
  function chpl__init_SyncVarRuntimeSupport[415998]() : void[4] "insert line file info" "module init"
  {
    {
    }
    {
    }
    (513286 return _void[55])
  }
  function chpl_sync_aux_t[87955].init[779938](arg _mt[779940]:_MT[238], ref arg this[779941]:chpl_sync_aux_t[87955]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (779945 return _void[55])
  }
  function chpl_sync_aux_t[87955].init=[779947](arg _mt[779950]:_MT[238], arg this[779951]:chpl_sync_aux_t[87955], arg other[779952]:chpl_sync_aux_t[87955]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (779956 '=' this[779951] other[779952])
    (779960 return _void[55])
  }
  function chpl_sync_aux_t[87955].deinit[779962](arg _mt[779964]:_MT[238], arg this[779966]:chpl_sync_aux_t[87955]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (779974 return _void[55])
  }
  function chpl_sync_aux_t[87955].writeThis[779976](arg _mt[779980]:_MT[238], arg this[779978]:chpl_sync_aux_t[87955], arg f[779979]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (779985 call writeThisDefaultImpl f[779979] this[779978])
    (779990 return _void[55])
  }
  function chpl_sync_aux_t[87955].readThis[779992](arg _mt[779996]:_MT[238], arg this[779994]:chpl_sync_aux_t[87955], arg f[779995]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780000 call readThisDefaultImpl f[779995] this[779994])
    (780006 return _void[55])
  }
  function chpl_fields_are_comparable[780020](arg _arg1[780022]:chpl_sync_aux_t[87955], arg _arg2[780023]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780032]:bool[10] "RVV" "param" "temp"
    (780037 'move' ret[780032](780036 'deref' 1))
    (780034 return ret[780032])
  }
  function ==[780008](arg _arg1[780010]:chpl_sync_aux_t[87955], arg _arg2[780011]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780051]:bool[10] "RVV" "temp"
    (780056 'move' ret[780051](780055 'deref' 1))
    (780053 return ret[780051])
  }
  where {
    unknown call_tmp[780058] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780061 'move' call_tmp[780058](780014 'typeof' _arg1[780010]))
    unknown call_tmp[780063] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780066 'move' call_tmp[780063](780016 'typeof' _arg2[780011]))
    unknown call_tmp[780068] "expr temp" "maybe param" "maybe type" "temp"
    (780071 'move' call_tmp[780068](780018 call == call_tmp[780058] call_tmp[780063]))
    unknown call_tmp[780073] "expr temp" "maybe param" "maybe type" "temp"
    (780076 'move' call_tmp[780073](780039 call chpl_fields_are_comparable[780020] _arg1[780010] _arg2[780011]))
    (780043 '&' call_tmp[780068] call_tmp[780073])
  }
  function chpl_fields_are_comparable[780090](arg _arg1[780092]:chpl_sync_aux_t[87955], arg _arg2[780093]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780102]:bool[10] "RVV" "param" "temp"
    (780107 'move' ret[780102](780106 'deref' 1))
    (780104 return ret[780102])
  }
  function !=[780078](arg _arg1[780080]:chpl_sync_aux_t[87955], arg _arg2[780081]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780121]:bool[10] "RVV" "temp"
    (780126 'move' ret[780121](780125 'deref' 0))
    (780123 return ret[780121])
  }
  where {
    unknown call_tmp[780128] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780131 'move' call_tmp[780128](780084 'typeof' _arg1[780080]))
    unknown call_tmp[780133] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780136 'move' call_tmp[780133](780086 'typeof' _arg2[780081]))
    unknown call_tmp[780138] "expr temp" "maybe param" "maybe type" "temp"
    (780141 'move' call_tmp[780138](780088 call == call_tmp[780128] call_tmp[780133]))
    unknown call_tmp[780143] "expr temp" "maybe param" "maybe type" "temp"
    (780146 'move' call_tmp[780143](780109 call chpl_fields_are_comparable[780090] _arg1[780080] _arg2[780081]))
    (780113 '&' call_tmp[780138] call_tmp[780143])
  }
  function chpl_fields_are_comparable[780160](arg _arg1[780162]:chpl_sync_aux_t[87955], arg _arg2[780163]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780172]:bool[10] "RVV" "param" "temp"
    (780177 'move' ret[780172](780176 'deref' 1))
    (780174 return ret[780172])
  }
  function <[780148](arg _arg1[780150]:chpl_sync_aux_t[87955], arg _arg2[780151]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780191]:bool[10] "RVV" "temp"
    (780196 'move' ret[780191](780195 'deref' 0))
    (780193 return ret[780191])
  }
  where {
    unknown call_tmp[780198] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780201 'move' call_tmp[780198](780154 'typeof' _arg1[780150]))
    unknown call_tmp[780203] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780206 'move' call_tmp[780203](780156 'typeof' _arg2[780151]))
    unknown call_tmp[780208] "expr temp" "maybe param" "maybe type" "temp"
    (780211 'move' call_tmp[780208](780158 call == call_tmp[780198] call_tmp[780203]))
    unknown call_tmp[780213] "expr temp" "maybe param" "maybe type" "temp"
    (780216 'move' call_tmp[780213](780179 call chpl_fields_are_comparable[780160] _arg1[780150] _arg2[780151]))
    (780183 '&' call_tmp[780208] call_tmp[780213])
  }
  function chpl_fields_are_comparable[780230](arg _arg1[780232]:chpl_sync_aux_t[87955], arg _arg2[780233]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780242]:bool[10] "RVV" "param" "temp"
    (780247 'move' ret[780242](780246 'deref' 1))
    (780244 return ret[780242])
  }
  function <=[780218](arg _arg1[780220]:chpl_sync_aux_t[87955], arg _arg2[780221]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780261]:bool[10] "RVV" "temp"
    (780266 'move' ret[780261](780265 'deref' 1))
    (780263 return ret[780261])
  }
  where {
    unknown call_tmp[780268] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780271 'move' call_tmp[780268](780224 'typeof' _arg1[780220]))
    unknown call_tmp[780273] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780276 'move' call_tmp[780273](780226 'typeof' _arg2[780221]))
    unknown call_tmp[780278] "expr temp" "maybe param" "maybe type" "temp"
    (780281 'move' call_tmp[780278](780228 call == call_tmp[780268] call_tmp[780273]))
    unknown call_tmp[780283] "expr temp" "maybe param" "maybe type" "temp"
    (780286 'move' call_tmp[780283](780249 call chpl_fields_are_comparable[780230] _arg1[780220] _arg2[780221]))
    (780253 '&' call_tmp[780278] call_tmp[780283])
  }
  function chpl_fields_are_comparable[780300](arg _arg1[780302]:chpl_sync_aux_t[87955], arg _arg2[780303]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780312]:bool[10] "RVV" "param" "temp"
    (780317 'move' ret[780312](780316 'deref' 1))
    (780314 return ret[780312])
  }
  function >[780288](arg _arg1[780290]:chpl_sync_aux_t[87955], arg _arg2[780291]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780331]:bool[10] "RVV" "temp"
    (780336 'move' ret[780331](780335 'deref' 0))
    (780333 return ret[780331])
  }
  where {
    unknown call_tmp[780338] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780341 'move' call_tmp[780338](780294 'typeof' _arg1[780290]))
    unknown call_tmp[780343] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780346 'move' call_tmp[780343](780296 'typeof' _arg2[780291]))
    unknown call_tmp[780348] "expr temp" "maybe param" "maybe type" "temp"
    (780351 'move' call_tmp[780348](780298 call == call_tmp[780338] call_tmp[780343]))
    unknown call_tmp[780353] "expr temp" "maybe param" "maybe type" "temp"
    (780356 'move' call_tmp[780353](780319 call chpl_fields_are_comparable[780300] _arg1[780290] _arg2[780291]))
    (780323 '&' call_tmp[780348] call_tmp[780353])
  }
  function chpl_fields_are_comparable[780370](arg _arg1[780372]:chpl_sync_aux_t[87955], arg _arg2[780373]:chpl_sync_aux_t[87955]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780382]:bool[10] "RVV" "param" "temp"
    (780387 'move' ret[780382](780386 'deref' 1))
    (780384 return ret[780382])
  }
  function >=[780358](arg _arg1[780360]:chpl_sync_aux_t[87955], arg _arg2[780361]:chpl_sync_aux_t[87955]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780401]:bool[10] "RVV" "temp"
    (780406 'move' ret[780401](780405 'deref' 1))
    (780403 return ret[780401])
  }
  where {
    unknown call_tmp[780408] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780411 'move' call_tmp[780408](780364 'typeof' _arg1[780360]))
    unknown call_tmp[780413] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780416 'move' call_tmp[780413](780366 'typeof' _arg2[780361]))
    unknown call_tmp[780418] "expr temp" "maybe param" "maybe type" "temp"
    (780421 'move' call_tmp[780418](780368 call == call_tmp[780408] call_tmp[780413]))
    unknown call_tmp[780423] "expr temp" "maybe param" "maybe type" "temp"
    (780426 'move' call_tmp[780423](780389 call chpl_fields_are_comparable[780370] _arg1[780360] _arg2[780361]))
    (780393 '&' call_tmp[780418] call_tmp[780423])
  }
  function =[780428](ref arg _arg1[780430]:chpl_sync_aux_t[87955], const?  ref arg _arg2[780431]:chpl_sync_aux_t[87955]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (780441 '=' _arg1[780430] _arg2[780431])
    (780446 return _void[55])
  }
  where {
    unknown call_tmp[780448] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780451 'move' call_tmp[780448](780434 'typeof' _arg1[780430]))
    unknown call_tmp[780453] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780456 'move' call_tmp[780453](780436 'typeof' _arg2[780431]))
    (780438 call == call_tmp[780448] call_tmp[780453])
  }
  function chpl__defaultHash[780458](arg r[780460]:chpl_sync_aux_t[87955]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[780468] "RVV" "temp"
    (780473 'move' ret[780468](780472 'deref' 0))
    (780470 return ret[780468])
  }
  type chpl_sync_aux_t[87955]
  function chpl_sync_initAux[87966](ref arg aux[87963]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513177 return _void[55])
  }
  function chpl_sync_destroyAux[87976](ref arg aux[87973]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513179 return _void[55])
  }
  function chpl_sync_waitEmptyAndLock[87986](ref arg aux[87983]:chpl_sync_aux_t[87955]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513181 return _void[55])
  }
  function chpl_sync_waitFullAndLock[87996](ref arg aux[87993]:chpl_sync_aux_t[87955]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513183 return _void[55])
  }
  function chpl_sync_lock[88006](ref arg aux[88003]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513185 return _void[55])
  }
  function chpl_sync_unlock[88016](ref arg aux[88013]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513187 return _void[55])
  }
  function chpl_sync_markAndSignalEmpty[88026](ref arg aux[88023]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513189 return _void[55])
  }
  function chpl_sync_markAndSignalFull[88036](ref arg aux[88033]:chpl_sync_aux_t[87955]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513191 return _void[55])
  }
  function chpl_sync_isFull[88046](arg value[88043]:c_void_ptr[149], ref arg aux[88049]:chpl_sync_aux_t[87955]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513195] "RVV" "temp"
    (513197 return ret[513195])
  }
  { scopeless type
    bool[10]
  }
  function chpl_single_aux_t[88058].init[780475](arg _mt[780477]:_MT[238], ref arg this[780478]:chpl_single_aux_t[88058]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780482 return _void[55])
  }
  function chpl_single_aux_t[88058].init=[780484](arg _mt[780487]:_MT[238], arg this[780488]:chpl_single_aux_t[88058], arg other[780489]:chpl_single_aux_t[88058]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780493 '=' this[780488] other[780489])
    (780497 return _void[55])
  }
  function chpl_single_aux_t[88058].deinit[780499](arg _mt[780501]:_MT[238], arg this[780503]:chpl_single_aux_t[88058]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (780511 return _void[55])
  }
  function chpl_single_aux_t[88058].writeThis[780513](arg _mt[780517]:_MT[238], arg this[780515]:chpl_single_aux_t[88058], arg f[780516]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780522 call writeThisDefaultImpl f[780516] this[780515])
    (780527 return _void[55])
  }
  function chpl_single_aux_t[88058].readThis[780529](arg _mt[780533]:_MT[238], arg this[780531]:chpl_single_aux_t[88058], arg f[780532]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780537 call readThisDefaultImpl f[780532] this[780531])
    (780543 return _void[55])
  }
  function chpl_fields_are_comparable[780557](arg _arg1[780559]:chpl_single_aux_t[88058], arg _arg2[780560]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780569]:bool[10] "RVV" "param" "temp"
    (780574 'move' ret[780569](780573 'deref' 1))
    (780571 return ret[780569])
  }
  function ==[780545](arg _arg1[780547]:chpl_single_aux_t[88058], arg _arg2[780548]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780588]:bool[10] "RVV" "temp"
    (780593 'move' ret[780588](780592 'deref' 1))
    (780590 return ret[780588])
  }
  where {
    unknown call_tmp[780595] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780598 'move' call_tmp[780595](780551 'typeof' _arg1[780547]))
    unknown call_tmp[780600] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780603 'move' call_tmp[780600](780553 'typeof' _arg2[780548]))
    unknown call_tmp[780605] "expr temp" "maybe param" "maybe type" "temp"
    (780608 'move' call_tmp[780605](780555 call == call_tmp[780595] call_tmp[780600]))
    unknown call_tmp[780610] "expr temp" "maybe param" "maybe type" "temp"
    (780613 'move' call_tmp[780610](780576 call chpl_fields_are_comparable[780557] _arg1[780547] _arg2[780548]))
    (780580 '&' call_tmp[780605] call_tmp[780610])
  }
  function chpl_fields_are_comparable[780627](arg _arg1[780629]:chpl_single_aux_t[88058], arg _arg2[780630]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780639]:bool[10] "RVV" "param" "temp"
    (780644 'move' ret[780639](780643 'deref' 1))
    (780641 return ret[780639])
  }
  function !=[780615](arg _arg1[780617]:chpl_single_aux_t[88058], arg _arg2[780618]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780658]:bool[10] "RVV" "temp"
    (780663 'move' ret[780658](780662 'deref' 0))
    (780660 return ret[780658])
  }
  where {
    unknown call_tmp[780665] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780668 'move' call_tmp[780665](780621 'typeof' _arg1[780617]))
    unknown call_tmp[780670] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780673 'move' call_tmp[780670](780623 'typeof' _arg2[780618]))
    unknown call_tmp[780675] "expr temp" "maybe param" "maybe type" "temp"
    (780678 'move' call_tmp[780675](780625 call == call_tmp[780665] call_tmp[780670]))
    unknown call_tmp[780680] "expr temp" "maybe param" "maybe type" "temp"
    (780683 'move' call_tmp[780680](780646 call chpl_fields_are_comparable[780627] _arg1[780617] _arg2[780618]))
    (780650 '&' call_tmp[780675] call_tmp[780680])
  }
  function chpl_fields_are_comparable[780697](arg _arg1[780699]:chpl_single_aux_t[88058], arg _arg2[780700]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780709]:bool[10] "RVV" "param" "temp"
    (780714 'move' ret[780709](780713 'deref' 1))
    (780711 return ret[780709])
  }
  function <[780685](arg _arg1[780687]:chpl_single_aux_t[88058], arg _arg2[780688]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780728]:bool[10] "RVV" "temp"
    (780733 'move' ret[780728](780732 'deref' 0))
    (780730 return ret[780728])
  }
  where {
    unknown call_tmp[780735] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780738 'move' call_tmp[780735](780691 'typeof' _arg1[780687]))
    unknown call_tmp[780740] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780743 'move' call_tmp[780740](780693 'typeof' _arg2[780688]))
    unknown call_tmp[780745] "expr temp" "maybe param" "maybe type" "temp"
    (780748 'move' call_tmp[780745](780695 call == call_tmp[780735] call_tmp[780740]))
    unknown call_tmp[780750] "expr temp" "maybe param" "maybe type" "temp"
    (780753 'move' call_tmp[780750](780716 call chpl_fields_are_comparable[780697] _arg1[780687] _arg2[780688]))
    (780720 '&' call_tmp[780745] call_tmp[780750])
  }
  function chpl_fields_are_comparable[780767](arg _arg1[780769]:chpl_single_aux_t[88058], arg _arg2[780770]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780779]:bool[10] "RVV" "param" "temp"
    (780784 'move' ret[780779](780783 'deref' 1))
    (780781 return ret[780779])
  }
  function <=[780755](arg _arg1[780757]:chpl_single_aux_t[88058], arg _arg2[780758]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780798]:bool[10] "RVV" "temp"
    (780803 'move' ret[780798](780802 'deref' 1))
    (780800 return ret[780798])
  }
  where {
    unknown call_tmp[780805] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780808 'move' call_tmp[780805](780761 'typeof' _arg1[780757]))
    unknown call_tmp[780810] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780813 'move' call_tmp[780810](780763 'typeof' _arg2[780758]))
    unknown call_tmp[780815] "expr temp" "maybe param" "maybe type" "temp"
    (780818 'move' call_tmp[780815](780765 call == call_tmp[780805] call_tmp[780810]))
    unknown call_tmp[780820] "expr temp" "maybe param" "maybe type" "temp"
    (780823 'move' call_tmp[780820](780786 call chpl_fields_are_comparable[780767] _arg1[780757] _arg2[780758]))
    (780790 '&' call_tmp[780815] call_tmp[780820])
  }
  function chpl_fields_are_comparable[780837](arg _arg1[780839]:chpl_single_aux_t[88058], arg _arg2[780840]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780849]:bool[10] "RVV" "param" "temp"
    (780854 'move' ret[780849](780853 'deref' 1))
    (780851 return ret[780849])
  }
  function >[780825](arg _arg1[780827]:chpl_single_aux_t[88058], arg _arg2[780828]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780868]:bool[10] "RVV" "temp"
    (780873 'move' ret[780868](780872 'deref' 0))
    (780870 return ret[780868])
  }
  where {
    unknown call_tmp[780875] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780878 'move' call_tmp[780875](780831 'typeof' _arg1[780827]))
    unknown call_tmp[780880] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780883 'move' call_tmp[780880](780833 'typeof' _arg2[780828]))
    unknown call_tmp[780885] "expr temp" "maybe param" "maybe type" "temp"
    (780888 'move' call_tmp[780885](780835 call == call_tmp[780875] call_tmp[780880]))
    unknown call_tmp[780890] "expr temp" "maybe param" "maybe type" "temp"
    (780893 'move' call_tmp[780890](780856 call chpl_fields_are_comparable[780837] _arg1[780827] _arg2[780828]))
    (780860 '&' call_tmp[780885] call_tmp[780890])
  }
  function chpl_fields_are_comparable[780907](arg _arg1[780909]:chpl_single_aux_t[88058], arg _arg2[780910]:chpl_single_aux_t[88058]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780919]:bool[10] "RVV" "param" "temp"
    (780924 'move' ret[780919](780923 'deref' 1))
    (780921 return ret[780919])
  }
  function >=[780895](arg _arg1[780897]:chpl_single_aux_t[88058], arg _arg2[780898]:chpl_single_aux_t[88058]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780938]:bool[10] "RVV" "temp"
    (780943 'move' ret[780938](780942 'deref' 1))
    (780940 return ret[780938])
  }
  where {
    unknown call_tmp[780945] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780948 'move' call_tmp[780945](780901 'typeof' _arg1[780897]))
    unknown call_tmp[780950] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780953 'move' call_tmp[780950](780903 'typeof' _arg2[780898]))
    unknown call_tmp[780955] "expr temp" "maybe param" "maybe type" "temp"
    (780958 'move' call_tmp[780955](780905 call == call_tmp[780945] call_tmp[780950]))
    unknown call_tmp[780960] "expr temp" "maybe param" "maybe type" "temp"
    (780963 'move' call_tmp[780960](780926 call chpl_fields_are_comparable[780907] _arg1[780897] _arg2[780898]))
    (780930 '&' call_tmp[780955] call_tmp[780960])
  }
  function =[780965](ref arg _arg1[780967]:chpl_single_aux_t[88058], const?  ref arg _arg2[780968]:chpl_single_aux_t[88058]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (780978 '=' _arg1[780967] _arg2[780968])
    (780983 return _void[55])
  }
  where {
    unknown call_tmp[780985] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780988 'move' call_tmp[780985](780971 'typeof' _arg1[780967]))
    unknown call_tmp[780990] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780993 'move' call_tmp[780990](780973 'typeof' _arg2[780968]))
    (780975 call == call_tmp[780985] call_tmp[780990])
  }
  function chpl__defaultHash[780995](arg r[780997]:chpl_single_aux_t[88058]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[781005] "RVV" "temp"
    (781010 'move' ret[781005](781009 'deref' 0))
    (781007 return ret[781005])
  }
  type chpl_single_aux_t[88058]
  function chpl_single_initAux[88069](ref arg aux[88066]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513199 return _void[55])
  }
  function chpl_single_destroyAux[88079](ref arg aux[88076]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513201 return _void[55])
  }
  function chpl_single_waitFullAndLock[88089](ref arg aux[88086]:chpl_single_aux_t[88058]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513203 return _void[55])
  }
  function chpl_single_lock[88099](ref arg aux[88096]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513205 return _void[55])
  }
  function chpl_single_unlock[88109](ref arg aux[88106]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513207 return _void[55])
  }
  function chpl_single_markAndSignalFull[88119](ref arg aux[88116]:chpl_single_aux_t[88058]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513209 return _void[55])
  }
  function chpl_single_isFull[88129](arg value[88126]:c_void_ptr[149], ref arg aux[88132]:chpl_single_aux_t[88058]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513213] "RVV" "temp"
    (513215 return ret[513213])
  }
  { scopeless type
    bool[10]
  }
  function supportsNativeSyncVar[88143](arg t[88141]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[513219] "RVV" "param" "temp"
    unknown tmp[422255] "maybe param" "temp"
    unknown tmp[422276] "maybe param" "temp"
    unknown tmp[422297] "maybe param" "temp"
    (422308 'move' tmp[422297](88163 call == CHPL_TASKS[21343] "qthreads"))
    unknown call_tmp[631837] "expr temp" "maybe param" "maybe type" "temp"
    (631840 'move' call_tmp[631837](422310 call _cond_invalid tmp[422297]))
    if call_tmp[631837]
    {
      (422313 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560804] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560805] "maybe param" "temp"
    unknown call_tmp[631842] "expr temp" "maybe param" "maybe type" "temp"
    (631845 'move' call_tmp[631842](422298 call isTrue tmp[422297]))
    (560810 'move' tmp[560805](560808 call _cond_test call_tmp[631842]))
    if tmp[560805]
    {
      unknown tmp[560812] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631847] "expr temp" "maybe param" "maybe type" "temp"
      (631850 'move' call_tmp[631847](88183 call != CHPL_TARGET_ARCH[21166] "aarch64"))
      (560814 'move' tmp[560812](422301 call isTrue call_tmp[631847]))
      (560819 'move' tmp[560804](560816 '_paramFoldLogical' tmp[560805] tmp[560812]))
    }
    {
      (560824 'move' tmp[560804](560821 '_paramFoldLogical' tmp[560805] 0))
    }
    (422287 'move' tmp[422276] tmp[560804])
    unknown call_tmp[631852] "expr temp" "maybe param" "maybe type" "temp"
    (631855 'move' call_tmp[631852](422289 call _cond_invalid tmp[422276]))
    if call_tmp[631852]
    {
      (422292 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560831] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560832] "maybe param" "temp"
    unknown call_tmp[631857] "expr temp" "maybe param" "maybe type" "temp"
    (631860 'move' call_tmp[631857](422277 call isTrue tmp[422276]))
    (560837 'move' tmp[560832](560835 call _cond_test call_tmp[631857]))
    if tmp[560832]
    {
      unknown tmp[560839] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631862] "expr temp" "maybe param" "maybe type" "temp"
      (631865 'move' call_tmp[631862](88190 call castableToAlignedT t[88141]))
      (560841 'move' tmp[560839](422280 call isTrue call_tmp[631862]))
      (560846 'move' tmp[560831](560843 '_paramFoldLogical' tmp[560832] tmp[560839]))
    }
    {
      (560851 'move' tmp[560831](560848 '_paramFoldLogical' tmp[560832] 0))
    }
    (422266 'move' tmp[422255] tmp[560831])
    unknown call_tmp[631867] "expr temp" "maybe param" "maybe type" "temp"
    (631870 'move' call_tmp[631867](422268 call _cond_invalid tmp[422255]))
    if call_tmp[631867]
    {
      (422271 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560858] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560859] "maybe param" "temp"
    unknown call_tmp[631872] "expr temp" "maybe param" "maybe type" "temp"
    (631875 'move' call_tmp[631872](422256 call isTrue tmp[422255]))
    (560864 'move' tmp[560859](560862 call _cond_test call_tmp[631872]))
    if tmp[560859]
    {
      unknown tmp[560866] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631877] "expr temp" "maybe param" "maybe type" "temp"
      (631880 'move' call_tmp[631877](88196 call numBits c_uintptr[20636]))
      unknown call_tmp[631882] "expr temp" "maybe param" "maybe type" "temp"
      (631885 'move' call_tmp[631882](88198 call == call_tmp[631877] 64))
      (560868 'move' tmp[560866](422259 call isTrue call_tmp[631882]))
      (560873 'move' tmp[560858](560870 '_paramFoldLogical' tmp[560859] tmp[560866]))
    }
    {
      (560878 'move' tmp[560858](560875 '_paramFoldLogical' tmp[560859] 0))
    }
    (513224 'move' ret[513219](513223 'deref' tmp[560858]))
    (513221 return ret[513219])
  }
  function qthread_readFE[88213](ref arg dest[88210]:aligned_t[88362], const  ref arg src[88216]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513228] "RVV" "temp"
    (513230 return ret[513228])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_readFF[88229](ref arg dest[88226]:aligned_t[88362], const  ref arg src[88232]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513234] "RVV" "temp"
    (513236 return ret[513234])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_readXX[88245](ref arg dest[88242]:aligned_t[88362], const  ref arg src[88248]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513240] "RVV" "temp"
    (513242 return ret[513240])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_writeEF[88261](ref arg dest[88258]:aligned_t[88362], const  ref arg src[88264]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513246] "RVV" "temp"
    (513248 return ret[513246])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_writeFF[88277](ref arg dest[88274]:aligned_t[88362], const  ref arg src[88280]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513252] "RVV" "temp"
    (513254 return ret[513252])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_writeF[88293](ref arg dest[88290]:aligned_t[88362], const  ref arg src[88296]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513258] "RVV" "temp"
    (513260 return ret[513258])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_purge_to[88309](ref arg dest[88306]:aligned_t[88362], const  ref arg src[88312]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513264] "RVV" "temp"
    (513266 return ret[513264])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_empty[88325](const  ref arg dest[88322]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513270] "RVV" "temp"
    (513272 return ret[513270])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_fill[88337](const  ref arg dest[88334]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513276] "RVV" "temp"
    (513278 return ret[513276])
  }
  { scopeless type
    c_int[20552]
  }
  function qthread_feb_status[88349](const  ref arg dest[88346]:aligned_t[88362]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513282] "RVV" "temp"
    (513284 return ret[513282])
  }
  { scopeless type
    c_int[20552]
  }
  (355107 'used modules list'(87946 'use' ChapelStandard[20267])(87948 'use' SysCTypes[20943])(87951 'use' AlignedTSupport[88357]))
}