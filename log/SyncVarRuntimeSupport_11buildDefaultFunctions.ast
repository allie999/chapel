AST dump for SyncVarRuntimeSupport after pass buildDefaultFunctions.
Module use list: ChapelStandard SysCTypes AlignedTSupport 

{
  function chpl__init_SyncVarRuntimeSupport[416018]() : void[4] "insert line file info" "module init"
  {
    {
    }
    {
    }
    (513309 return _void[55])
  }
  function chpl_sync_aux_t[87956].init[779958](arg _mt[779960]:_MT[238], ref arg this[779961]:chpl_sync_aux_t[87956]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (779965 return _void[55])
  }
  function chpl_sync_aux_t[87956].init=[779967](arg _mt[779970]:_MT[238], arg this[779971]:chpl_sync_aux_t[87956], arg other[779972]:chpl_sync_aux_t[87956]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (779976 '=' this[779971] other[779972])
    (779980 return _void[55])
  }
  function chpl_sync_aux_t[87956].deinit[779982](arg _mt[779984]:_MT[238], arg this[779986]:chpl_sync_aux_t[87956]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (779994 return _void[55])
  }
  function chpl_sync_aux_t[87956].writeThis[779996](arg _mt[780000]:_MT[238], arg this[779998]:chpl_sync_aux_t[87956], arg f[779999]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780005 call writeThisDefaultImpl f[779999] this[779998])
    (780010 return _void[55])
  }
  function chpl_sync_aux_t[87956].readThis[780012](arg _mt[780016]:_MT[238], arg this[780014]:chpl_sync_aux_t[87956], arg f[780015]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780020 call readThisDefaultImpl f[780015] this[780014])
    (780026 return _void[55])
  }
  function chpl_fields_are_comparable[780040](arg _arg1[780042]:chpl_sync_aux_t[87956], arg _arg2[780043]:chpl_sync_aux_t[87956]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780052]:bool[10] "RVV" "param" "temp"
    (780057 'move' ret[780052](780056 'deref' 1))
    (780054 return ret[780052])
  }
  function ==[780028](arg _arg1[780030]:chpl_sync_aux_t[87956], arg _arg2[780031]:chpl_sync_aux_t[87956]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780071]:bool[10] "RVV" "temp"
    (780076 'move' ret[780071](780075 'deref' 1))
    (780073 return ret[780071])
  }
  where {
    unknown call_tmp[780078] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780081 'move' call_tmp[780078](780034 'typeof' _arg1[780030]))
    unknown call_tmp[780083] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780086 'move' call_tmp[780083](780036 'typeof' _arg2[780031]))
    unknown call_tmp[780088] "expr temp" "maybe param" "maybe type" "temp"
    (780091 'move' call_tmp[780088](780038 call == call_tmp[780078] call_tmp[780083]))
    unknown call_tmp[780093] "expr temp" "maybe param" "maybe type" "temp"
    (780096 'move' call_tmp[780093](780059 call chpl_fields_are_comparable[780040] _arg1[780030] _arg2[780031]))
    (780063 '&' call_tmp[780088] call_tmp[780093])
  }
  function chpl_fields_are_comparable[780110](arg _arg1[780112]:chpl_sync_aux_t[87956], arg _arg2[780113]:chpl_sync_aux_t[87956]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780122]:bool[10] "RVV" "param" "temp"
    (780127 'move' ret[780122](780126 'deref' 1))
    (780124 return ret[780122])
  }
  function !=[780098](arg _arg1[780100]:chpl_sync_aux_t[87956], arg _arg2[780101]:chpl_sync_aux_t[87956]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780141]:bool[10] "RVV" "temp"
    (780146 'move' ret[780141](780145 'deref' 0))
    (780143 return ret[780141])
  }
  where {
    unknown call_tmp[780148] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780151 'move' call_tmp[780148](780104 'typeof' _arg1[780100]))
    unknown call_tmp[780153] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780156 'move' call_tmp[780153](780106 'typeof' _arg2[780101]))
    unknown call_tmp[780158] "expr temp" "maybe param" "maybe type" "temp"
    (780161 'move' call_tmp[780158](780108 call == call_tmp[780148] call_tmp[780153]))
    unknown call_tmp[780163] "expr temp" "maybe param" "maybe type" "temp"
    (780166 'move' call_tmp[780163](780129 call chpl_fields_are_comparable[780110] _arg1[780100] _arg2[780101]))
    (780133 '&' call_tmp[780158] call_tmp[780163])
  }
  function chpl_fields_are_comparable[780180](arg _arg1[780182]:chpl_sync_aux_t[87956], arg _arg2[780183]:chpl_sync_aux_t[87956]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780192]:bool[10] "RVV" "param" "temp"
    (780197 'move' ret[780192](780196 'deref' 1))
    (780194 return ret[780192])
  }
  function <[780168](arg _arg1[780170]:chpl_sync_aux_t[87956], arg _arg2[780171]:chpl_sync_aux_t[87956]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780211]:bool[10] "RVV" "temp"
    (780216 'move' ret[780211](780215 'deref' 0))
    (780213 return ret[780211])
  }
  where {
    unknown call_tmp[780218] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780221 'move' call_tmp[780218](780174 'typeof' _arg1[780170]))
    unknown call_tmp[780223] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780226 'move' call_tmp[780223](780176 'typeof' _arg2[780171]))
    unknown call_tmp[780228] "expr temp" "maybe param" "maybe type" "temp"
    (780231 'move' call_tmp[780228](780178 call == call_tmp[780218] call_tmp[780223]))
    unknown call_tmp[780233] "expr temp" "maybe param" "maybe type" "temp"
    (780236 'move' call_tmp[780233](780199 call chpl_fields_are_comparable[780180] _arg1[780170] _arg2[780171]))
    (780203 '&' call_tmp[780228] call_tmp[780233])
  }
  function chpl_fields_are_comparable[780250](arg _arg1[780252]:chpl_sync_aux_t[87956], arg _arg2[780253]:chpl_sync_aux_t[87956]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780262]:bool[10] "RVV" "param" "temp"
    (780267 'move' ret[780262](780266 'deref' 1))
    (780264 return ret[780262])
  }
  function <=[780238](arg _arg1[780240]:chpl_sync_aux_t[87956], arg _arg2[780241]:chpl_sync_aux_t[87956]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780281]:bool[10] "RVV" "temp"
    (780286 'move' ret[780281](780285 'deref' 1))
    (780283 return ret[780281])
  }
  where {
    unknown call_tmp[780288] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780291 'move' call_tmp[780288](780244 'typeof' _arg1[780240]))
    unknown call_tmp[780293] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780296 'move' call_tmp[780293](780246 'typeof' _arg2[780241]))
    unknown call_tmp[780298] "expr temp" "maybe param" "maybe type" "temp"
    (780301 'move' call_tmp[780298](780248 call == call_tmp[780288] call_tmp[780293]))
    unknown call_tmp[780303] "expr temp" "maybe param" "maybe type" "temp"
    (780306 'move' call_tmp[780303](780269 call chpl_fields_are_comparable[780250] _arg1[780240] _arg2[780241]))
    (780273 '&' call_tmp[780298] call_tmp[780303])
  }
  function chpl_fields_are_comparable[780320](arg _arg1[780322]:chpl_sync_aux_t[87956], arg _arg2[780323]:chpl_sync_aux_t[87956]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780332]:bool[10] "RVV" "param" "temp"
    (780337 'move' ret[780332](780336 'deref' 1))
    (780334 return ret[780332])
  }
  function >[780308](arg _arg1[780310]:chpl_sync_aux_t[87956], arg _arg2[780311]:chpl_sync_aux_t[87956]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780351]:bool[10] "RVV" "temp"
    (780356 'move' ret[780351](780355 'deref' 0))
    (780353 return ret[780351])
  }
  where {
    unknown call_tmp[780358] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780361 'move' call_tmp[780358](780314 'typeof' _arg1[780310]))
    unknown call_tmp[780363] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780366 'move' call_tmp[780363](780316 'typeof' _arg2[780311]))
    unknown call_tmp[780368] "expr temp" "maybe param" "maybe type" "temp"
    (780371 'move' call_tmp[780368](780318 call == call_tmp[780358] call_tmp[780363]))
    unknown call_tmp[780373] "expr temp" "maybe param" "maybe type" "temp"
    (780376 'move' call_tmp[780373](780339 call chpl_fields_are_comparable[780320] _arg1[780310] _arg2[780311]))
    (780343 '&' call_tmp[780368] call_tmp[780373])
  }
  function chpl_fields_are_comparable[780390](arg _arg1[780392]:chpl_sync_aux_t[87956], arg _arg2[780393]:chpl_sync_aux_t[87956]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780402]:bool[10] "RVV" "param" "temp"
    (780407 'move' ret[780402](780406 'deref' 1))
    (780404 return ret[780402])
  }
  function >=[780378](arg _arg1[780380]:chpl_sync_aux_t[87956], arg _arg2[780381]:chpl_sync_aux_t[87956]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780421]:bool[10] "RVV" "temp"
    (780426 'move' ret[780421](780425 'deref' 1))
    (780423 return ret[780421])
  }
  where {
    unknown call_tmp[780428] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780431 'move' call_tmp[780428](780384 'typeof' _arg1[780380]))
    unknown call_tmp[780433] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780436 'move' call_tmp[780433](780386 'typeof' _arg2[780381]))
    unknown call_tmp[780438] "expr temp" "maybe param" "maybe type" "temp"
    (780441 'move' call_tmp[780438](780388 call == call_tmp[780428] call_tmp[780433]))
    unknown call_tmp[780443] "expr temp" "maybe param" "maybe type" "temp"
    (780446 'move' call_tmp[780443](780409 call chpl_fields_are_comparable[780390] _arg1[780380] _arg2[780381]))
    (780413 '&' call_tmp[780438] call_tmp[780443])
  }
  function =[780448](ref arg _arg1[780450]:chpl_sync_aux_t[87956], const?  ref arg _arg2[780451]:chpl_sync_aux_t[87956]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (780461 '=' _arg1[780450] _arg2[780451])
    (780466 return _void[55])
  }
  where {
    unknown call_tmp[780468] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780471 'move' call_tmp[780468](780454 'typeof' _arg1[780450]))
    unknown call_tmp[780473] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780476 'move' call_tmp[780473](780456 'typeof' _arg2[780451]))
    (780458 call == call_tmp[780468] call_tmp[780473])
  }
  function chpl__defaultHash[780478](arg r[780480]:chpl_sync_aux_t[87956]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[780488] "RVV" "temp"
    (780493 'move' ret[780488](780492 'deref' 0))
    (780490 return ret[780488])
  }
  type chpl_sync_aux_t[87956]
  function chpl_sync_initAux[87967](ref arg aux[87964]:chpl_sync_aux_t[87956]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513200 return _void[55])
  }
  function chpl_sync_destroyAux[87977](ref arg aux[87974]:chpl_sync_aux_t[87956]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513202 return _void[55])
  }
  function chpl_sync_waitEmptyAndLock[87987](ref arg aux[87984]:chpl_sync_aux_t[87956]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513204 return _void[55])
  }
  function chpl_sync_waitFullAndLock[87997](ref arg aux[87994]:chpl_sync_aux_t[87956]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513206 return _void[55])
  }
  function chpl_sync_lock[88007](ref arg aux[88004]:chpl_sync_aux_t[87956]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513208 return _void[55])
  }
  function chpl_sync_unlock[88017](ref arg aux[88014]:chpl_sync_aux_t[87956]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513210 return _void[55])
  }
  function chpl_sync_markAndSignalEmpty[88027](ref arg aux[88024]:chpl_sync_aux_t[87956]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513212 return _void[55])
  }
  function chpl_sync_markAndSignalFull[88037](ref arg aux[88034]:chpl_sync_aux_t[87956]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513214 return _void[55])
  }
  function chpl_sync_isFull[88047](arg value[88044]:c_void_ptr[149], ref arg aux[88050]:chpl_sync_aux_t[87956]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513218] "RVV" "temp"
    (513220 return ret[513218])
  }
  { scopeless type
    bool[10]
  }
  function chpl_single_aux_t[88059].init[780495](arg _mt[780497]:_MT[238], ref arg this[780498]:chpl_single_aux_t[88059]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780502 return _void[55])
  }
  function chpl_single_aux_t[88059].init=[780504](arg _mt[780507]:_MT[238], arg this[780508]:chpl_single_aux_t[88059], arg other[780509]:chpl_single_aux_t[88059]) : _unknown[51] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (780513 '=' this[780508] other[780509])
    (780517 return _void[55])
  }
  function chpl_single_aux_t[88059].deinit[780519](arg _mt[780521]:_MT[238], arg this[780523]:chpl_single_aux_t[88059]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (780531 return _void[55])
  }
  function chpl_single_aux_t[88059].writeThis[780533](arg _mt[780537]:_MT[238], arg this[780535]:chpl_single_aux_t[88059], arg f[780536]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780542 call writeThisDefaultImpl f[780536] this[780535])
    (780547 return _void[55])
  }
  function chpl_single_aux_t[88059].readThis[780549](arg _mt[780553]:_MT[238], arg this[780551]:chpl_single_aux_t[88059], arg f[780552]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (780557 call readThisDefaultImpl f[780552] this[780551])
    (780563 return _void[55])
  }
  function chpl_fields_are_comparable[780577](arg _arg1[780579]:chpl_single_aux_t[88059], arg _arg2[780580]:chpl_single_aux_t[88059]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780589]:bool[10] "RVV" "param" "temp"
    (780594 'move' ret[780589](780593 'deref' 1))
    (780591 return ret[780589])
  }
  function ==[780565](arg _arg1[780567]:chpl_single_aux_t[88059], arg _arg2[780568]:chpl_single_aux_t[88059]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780608]:bool[10] "RVV" "temp"
    (780613 'move' ret[780608](780612 'deref' 1))
    (780610 return ret[780608])
  }
  where {
    unknown call_tmp[780615] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780618 'move' call_tmp[780615](780571 'typeof' _arg1[780567]))
    unknown call_tmp[780620] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780623 'move' call_tmp[780620](780573 'typeof' _arg2[780568]))
    unknown call_tmp[780625] "expr temp" "maybe param" "maybe type" "temp"
    (780628 'move' call_tmp[780625](780575 call == call_tmp[780615] call_tmp[780620]))
    unknown call_tmp[780630] "expr temp" "maybe param" "maybe type" "temp"
    (780633 'move' call_tmp[780630](780596 call chpl_fields_are_comparable[780577] _arg1[780567] _arg2[780568]))
    (780600 '&' call_tmp[780625] call_tmp[780630])
  }
  function chpl_fields_are_comparable[780647](arg _arg1[780649]:chpl_single_aux_t[88059], arg _arg2[780650]:chpl_single_aux_t[88059]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780659]:bool[10] "RVV" "param" "temp"
    (780664 'move' ret[780659](780663 'deref' 1))
    (780661 return ret[780659])
  }
  function !=[780635](arg _arg1[780637]:chpl_single_aux_t[88059], arg _arg2[780638]:chpl_single_aux_t[88059]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780678]:bool[10] "RVV" "temp"
    (780683 'move' ret[780678](780682 'deref' 0))
    (780680 return ret[780678])
  }
  where {
    unknown call_tmp[780685] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780688 'move' call_tmp[780685](780641 'typeof' _arg1[780637]))
    unknown call_tmp[780690] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780693 'move' call_tmp[780690](780643 'typeof' _arg2[780638]))
    unknown call_tmp[780695] "expr temp" "maybe param" "maybe type" "temp"
    (780698 'move' call_tmp[780695](780645 call == call_tmp[780685] call_tmp[780690]))
    unknown call_tmp[780700] "expr temp" "maybe param" "maybe type" "temp"
    (780703 'move' call_tmp[780700](780666 call chpl_fields_are_comparable[780647] _arg1[780637] _arg2[780638]))
    (780670 '&' call_tmp[780695] call_tmp[780700])
  }
  function chpl_fields_are_comparable[780717](arg _arg1[780719]:chpl_single_aux_t[88059], arg _arg2[780720]:chpl_single_aux_t[88059]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780729]:bool[10] "RVV" "param" "temp"
    (780734 'move' ret[780729](780733 'deref' 1))
    (780731 return ret[780729])
  }
  function <[780705](arg _arg1[780707]:chpl_single_aux_t[88059], arg _arg2[780708]:chpl_single_aux_t[88059]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780748]:bool[10] "RVV" "temp"
    (780753 'move' ret[780748](780752 'deref' 0))
    (780750 return ret[780748])
  }
  where {
    unknown call_tmp[780755] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780758 'move' call_tmp[780755](780711 'typeof' _arg1[780707]))
    unknown call_tmp[780760] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780763 'move' call_tmp[780760](780713 'typeof' _arg2[780708]))
    unknown call_tmp[780765] "expr temp" "maybe param" "maybe type" "temp"
    (780768 'move' call_tmp[780765](780715 call == call_tmp[780755] call_tmp[780760]))
    unknown call_tmp[780770] "expr temp" "maybe param" "maybe type" "temp"
    (780773 'move' call_tmp[780770](780736 call chpl_fields_are_comparable[780717] _arg1[780707] _arg2[780708]))
    (780740 '&' call_tmp[780765] call_tmp[780770])
  }
  function chpl_fields_are_comparable[780787](arg _arg1[780789]:chpl_single_aux_t[88059], arg _arg2[780790]:chpl_single_aux_t[88059]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780799]:bool[10] "RVV" "param" "temp"
    (780804 'move' ret[780799](780803 'deref' 1))
    (780801 return ret[780799])
  }
  function <=[780775](arg _arg1[780777]:chpl_single_aux_t[88059], arg _arg2[780778]:chpl_single_aux_t[88059]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780818]:bool[10] "RVV" "temp"
    (780823 'move' ret[780818](780822 'deref' 1))
    (780820 return ret[780818])
  }
  where {
    unknown call_tmp[780825] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780828 'move' call_tmp[780825](780781 'typeof' _arg1[780777]))
    unknown call_tmp[780830] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780833 'move' call_tmp[780830](780783 'typeof' _arg2[780778]))
    unknown call_tmp[780835] "expr temp" "maybe param" "maybe type" "temp"
    (780838 'move' call_tmp[780835](780785 call == call_tmp[780825] call_tmp[780830]))
    unknown call_tmp[780840] "expr temp" "maybe param" "maybe type" "temp"
    (780843 'move' call_tmp[780840](780806 call chpl_fields_are_comparable[780787] _arg1[780777] _arg2[780778]))
    (780810 '&' call_tmp[780835] call_tmp[780840])
  }
  function chpl_fields_are_comparable[780857](arg _arg1[780859]:chpl_single_aux_t[88059], arg _arg2[780860]:chpl_single_aux_t[88059]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780869]:bool[10] "RVV" "param" "temp"
    (780874 'move' ret[780869](780873 'deref' 1))
    (780871 return ret[780869])
  }
  function >[780845](arg _arg1[780847]:chpl_single_aux_t[88059], arg _arg2[780848]:chpl_single_aux_t[88059]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780888]:bool[10] "RVV" "temp"
    (780893 'move' ret[780888](780892 'deref' 0))
    (780890 return ret[780888])
  }
  where {
    unknown call_tmp[780895] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780898 'move' call_tmp[780895](780851 'typeof' _arg1[780847]))
    unknown call_tmp[780900] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780903 'move' call_tmp[780900](780853 'typeof' _arg2[780848]))
    unknown call_tmp[780905] "expr temp" "maybe param" "maybe type" "temp"
    (780908 'move' call_tmp[780905](780855 call == call_tmp[780895] call_tmp[780900]))
    unknown call_tmp[780910] "expr temp" "maybe param" "maybe type" "temp"
    (780913 'move' call_tmp[780910](780876 call chpl_fields_are_comparable[780857] _arg1[780847] _arg2[780848]))
    (780880 '&' call_tmp[780905] call_tmp[780910])
  }
  function chpl_fields_are_comparable[780927](arg _arg1[780929]:chpl_single_aux_t[88059], arg _arg2[780930]:chpl_single_aux_t[88059]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[780939]:bool[10] "RVV" "param" "temp"
    (780944 'move' ret[780939](780943 'deref' 1))
    (780941 return ret[780939])
  }
  function >=[780915](arg _arg1[780917]:chpl_single_aux_t[88059], arg _arg2[780918]:chpl_single_aux_t[88059]) : bool[10] "compiler generated" "last resort"
  {
    val ret[780958]:bool[10] "RVV" "temp"
    (780963 'move' ret[780958](780962 'deref' 1))
    (780960 return ret[780958])
  }
  where {
    unknown call_tmp[780965] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780968 'move' call_tmp[780965](780921 'typeof' _arg1[780917]))
    unknown call_tmp[780970] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (780973 'move' call_tmp[780970](780923 'typeof' _arg2[780918]))
    unknown call_tmp[780975] "expr temp" "maybe param" "maybe type" "temp"
    (780978 'move' call_tmp[780975](780925 call == call_tmp[780965] call_tmp[780970]))
    unknown call_tmp[780980] "expr temp" "maybe param" "maybe type" "temp"
    (780983 'move' call_tmp[780980](780946 call chpl_fields_are_comparable[780927] _arg1[780917] _arg2[780918]))
    (780950 '&' call_tmp[780975] call_tmp[780980])
  }
  function =[780985](ref arg _arg1[780987]:chpl_single_aux_t[88059], const?  ref arg _arg2[780988]:chpl_single_aux_t[88059]) : void[4] "assignop" "compiler generated" "inline" "last resort"
  {
    (780998 '=' _arg1[780987] _arg2[780988])
    (781003 return _void[55])
  }
  where {
    unknown call_tmp[781005] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (781008 'move' call_tmp[781005](780991 'typeof' _arg1[780987]))
    unknown call_tmp[781010] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (781013 'move' call_tmp[781010](780993 'typeof' _arg2[780988]))
    (780995 call == call_tmp[781005] call_tmp[781010])
  }
  function chpl__defaultHash[781015](arg r[781017]:chpl_single_aux_t[88059]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[781025] "RVV" "temp"
    (781030 'move' ret[781025](781029 'deref' 0))
    (781027 return ret[781025])
  }
  type chpl_single_aux_t[88059]
  function chpl_single_initAux[88070](ref arg aux[88067]:chpl_single_aux_t[88059]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513222 return _void[55])
  }
  function chpl_single_destroyAux[88080](ref arg aux[88077]:chpl_single_aux_t[88059]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513224 return _void[55])
  }
  function chpl_single_waitFullAndLock[88090](ref arg aux[88087]:chpl_single_aux_t[88059]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
  {
    (513226 return _void[55])
  }
  function chpl_single_lock[88100](ref arg aux[88097]:chpl_single_aux_t[88059]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513228 return _void[55])
  }
  function chpl_single_unlock[88110](ref arg aux[88107]:chpl_single_aux_t[88059]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513230 return _void[55])
  }
  function chpl_single_markAndSignalFull[88120](ref arg aux[88117]:chpl_single_aux_t[88059]) : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
    (513232 return _void[55])
  }
  function chpl_single_isFull[88130](arg value[88127]:c_void_ptr[149], ref arg aux[88133]:chpl_single_aux_t[88059]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513236] "RVV" "temp"
    (513238 return ret[513236])
  }
  { scopeless type
    bool[10]
  }
  function supportsNativeSyncVar[88144](arg t[88142]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[513242] "RVV" "param" "temp"
    unknown tmp[422275] "maybe param" "temp"
    unknown tmp[422296] "maybe param" "temp"
    unknown tmp[422317] "maybe param" "temp"
    (422328 'move' tmp[422317](88164 call == CHPL_TASKS[21340] "qthreads"))
    unknown call_tmp[631862] "expr temp" "maybe param" "maybe type" "temp"
    (631865 'move' call_tmp[631862](422330 call _cond_invalid tmp[422317]))
    if call_tmp[631862]
    {
      (422333 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560829] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560830] "maybe param" "temp"
    unknown call_tmp[631867] "expr temp" "maybe param" "maybe type" "temp"
    (631870 'move' call_tmp[631867](422318 call isTrue tmp[422317]))
    (560835 'move' tmp[560830](560833 call _cond_test call_tmp[631867]))
    if tmp[560830]
    {
      unknown tmp[560837] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631872] "expr temp" "maybe param" "maybe type" "temp"
      (631875 'move' call_tmp[631872](88184 call != CHPL_TARGET_ARCH[21163] "aarch64"))
      (560839 'move' tmp[560837](422321 call isTrue call_tmp[631872]))
      (560844 'move' tmp[560829](560841 '_paramFoldLogical' tmp[560830] tmp[560837]))
    }
    {
      (560849 'move' tmp[560829](560846 '_paramFoldLogical' tmp[560830] 0))
    }
    (422307 'move' tmp[422296] tmp[560829])
    unknown call_tmp[631877] "expr temp" "maybe param" "maybe type" "temp"
    (631880 'move' call_tmp[631877](422309 call _cond_invalid tmp[422296]))
    if call_tmp[631877]
    {
      (422312 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560856] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560857] "maybe param" "temp"
    unknown call_tmp[631882] "expr temp" "maybe param" "maybe type" "temp"
    (631885 'move' call_tmp[631882](422297 call isTrue tmp[422296]))
    (560862 'move' tmp[560857](560860 call _cond_test call_tmp[631882]))
    if tmp[560857]
    {
      unknown tmp[560864] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631887] "expr temp" "maybe param" "maybe type" "temp"
      (631890 'move' call_tmp[631887](88191 call castableToAlignedT t[88142]))
      (560866 'move' tmp[560864](422300 call isTrue call_tmp[631887]))
      (560871 'move' tmp[560856](560868 '_paramFoldLogical' tmp[560857] tmp[560864]))
    }
    {
      (560876 'move' tmp[560856](560873 '_paramFoldLogical' tmp[560857] 0))
    }
    (422286 'move' tmp[422275] tmp[560856])
    unknown call_tmp[631892] "expr temp" "maybe param" "maybe type" "temp"
    (631895 'move' call_tmp[631892](422288 call _cond_invalid tmp[422275]))
    if call_tmp[631892]
    {
      (422291 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560883] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560884] "maybe param" "temp"
    unknown call_tmp[631897] "expr temp" "maybe param" "maybe type" "temp"
    (631900 'move' call_tmp[631897](422276 call isTrue tmp[422275]))
    (560889 'move' tmp[560884](560887 call _cond_test call_tmp[631897]))
    if tmp[560884]
    {
      unknown tmp[560891] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[631902] "expr temp" "maybe param" "maybe type" "temp"
      (631905 'move' call_tmp[631902](88197 call numBits c_uintptr[20633]))
      unknown call_tmp[631907] "expr temp" "maybe param" "maybe type" "temp"
      (631910 'move' call_tmp[631907](88199 call == call_tmp[631902] 64))
      (560893 'move' tmp[560891](422279 call isTrue call_tmp[631907]))
      (560898 'move' tmp[560883](560895 '_paramFoldLogical' tmp[560884] tmp[560891]))
    }
    {
      (560903 'move' tmp[560883](560900 '_paramFoldLogical' tmp[560884] 0))
    }
    (513247 'move' ret[513242](513246 'deref' tmp[560883]))
    (513244 return ret[513242])
  }
  function qthread_readFE[88214](ref arg dest[88211]:aligned_t[88363], const  ref arg src[88217]:aligned_t[88363]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513251] "RVV" "temp"
    (513253 return ret[513251])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_readFF[88230](ref arg dest[88227]:aligned_t[88363], const  ref arg src[88233]:aligned_t[88363]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513257] "RVV" "temp"
    (513259 return ret[513257])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_readXX[88246](ref arg dest[88243]:aligned_t[88363], const  ref arg src[88249]:aligned_t[88363]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513263] "RVV" "temp"
    (513265 return ret[513263])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_writeEF[88262](ref arg dest[88259]:aligned_t[88363], const  ref arg src[88265]:aligned_t[88363]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513269] "RVV" "temp"
    (513271 return ret[513269])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_writeFF[88278](ref arg dest[88275]:aligned_t[88363], const  ref arg src[88281]:aligned_t[88363]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513275] "RVV" "temp"
    (513277 return ret[513275])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_writeF[88294](ref arg dest[88291]:aligned_t[88363], const  ref arg src[88297]:aligned_t[88363]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513281] "RVV" "temp"
    (513283 return ret[513281])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_purge_to[88310](ref arg dest[88307]:aligned_t[88363], const  ref arg src[88313]:aligned_t[88363]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513287] "RVV" "temp"
    (513289 return ret[513287])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_empty[88326](const  ref arg dest[88323]:aligned_t[88363]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513293] "RVV" "temp"
    (513295 return ret[513293])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_fill[88338](const  ref arg dest[88335]:aligned_t[88363]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513299] "RVV" "temp"
    (513301 return ret[513299])
  }
  { scopeless type
    c_int[20549]
  }
  function qthread_feb_status[88350](const  ref arg dest[88347]:aligned_t[88363]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[513305] "RVV" "temp"
    (513307 return ret[513305])
  }
  { scopeless type
    c_int[20549]
  }
  (355124 'used modules list'(87947 'use' ChapelStandard[20264])(87949 'use' SysCTypes[20940])(87952 'use' AlignedTSupport[88358]))
}