AST dump for SharedObject after pass createTaskFunctions.
Module use list: ChapelError Atomics ChapelBase OwnedObject HaltWrappers 

{
  function chpl__init_SharedObject[415927]() : void[4] "insert line file info" "module init"
  {
    (505556 return _void[55])
  }
  function ReferenceCount[41751].init[41687](arg _mt[41755]:_MT[238], arg this[41753]:ReferenceCount[41751]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[454264] "temporary of super field" "temp"
    (454272 'move' super_tmp[454264](454265 '.v' this[41753] c"super"))
    (454268 call init _mt[243] super_tmp[454264])
    (474112 'end of statement')
    unknown tmp[454235] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491549] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[604352] "expr temp" "maybe param" "maybe type" "temp"
      (604355 'move' call_tmp[604352](454237 '.v' this[41753] c"super"))
      (491553 'move' call_type_tmp[491549](454240 'typeof' call_tmp[604352]))
    }
    (454241 'move' tmp[454235] call_type_tmp[491549])
    unknown call_tmp[604357] "maybe param" "maybe type" "temp"
    (604360 'move' call_tmp[604357](454246 'cast' tmp[454235] this[41753]))
    unknown chpl__thisAsParent[454243] "dead at end of block" "insert auto destroy" "temp"
    (540551 'init var' chpl__thisAsParent[454243] call_tmp[604357] tmp[454235])
    (454249 'setcid' chpl__thisAsParent[454243])
    (474113 'end of statement')
    unknown tmp[454251] "temp"
    unknown call_tmp[604362] "expr temp" "maybe param" "maybe type" "temp"
    (604365 'move' call_tmp[604362](454254 call chpl__atomicType int(64)[13]))
    (454256 'default init var' tmp[454251] call_tmp[604362])
    (454258 '.=' this[41753] c"count" tmp[454251])
    (474114 'end of statement')
    (454263 'setcid' this[41753])
    (474115 'end of statement')
    unknown call_tmp[604369] "expr temp" "maybe param" "maybe type" "temp"
    (604372 'move' call_tmp[604369](356964 call count _mt[243] this[41753]))
    (41705 call(41700 call (partial) write _mt[243] call_tmp[604369]) 1)
    (505331 return _void[55])
  }
  function ReferenceCount[41751].retain[41711](arg _mt[41759]:_MT[238], arg this[41757]:ReferenceCount[41751]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[604378] "expr temp" "maybe param" "maybe type" "temp"
    (604381 'move' call_tmp[604378](356969 call count _mt[243] this[41757]))
    (41719 call(41714 call (partial) add _mt[243] call_tmp[604378]) 1)
    (505333 return _void[55])
  }
  function ReferenceCount[41751].release[41726](arg _mt[41763]:_MT[238], arg this[41761]:ReferenceCount[41751]) : _unknown[51] "method" "primary method"
  {
    unknown ret[505337] "RVV" "temp"
    unknown call_tmp[604387] "expr temp" "maybe param" "maybe type" "temp"
    (604390 'move' call_tmp[604387](356974 call count _mt[243] this[41761]))
    unknown call_tmp[604394] "maybe param" "maybe type" "temp"
    (604397 'move' call_tmp[604394](41736 call(41731 call (partial) fetchSub _mt[243] call_tmp[604387]) 1))
    unknown oldValue[41737] "dead at end of block" "insert auto destroy"
    (540553 'init var' oldValue[41737] call_tmp[604394])
    (41740 'end of statement')
    unknown call_tmp[604399] "expr temp" "maybe param" "maybe type" "temp"
    (604402 'move' call_tmp[604399](41744 call - oldValue[41737] 1))
    (505342 'move' ret[505337](505341 'deref' call_tmp[604399]))
    gotoReturn _end_release[505335] _end_release[505335]
    (474118 'end of statement' oldValue[41737])
    label _end_release[505335]
    (505339 return ret[505337])
  }
  function ReferenceCount[41751].super[759200](arg _mt[759202]:_MT[238], arg this[759204]:ReferenceCount[41751]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759214] "RVV" "temp"
    unknown call_tmp[759221] "expr temp" "maybe param" "maybe type" "temp"
    (759224 'move' call_tmp[759221](759208 '.v' this[759204] c"super"))
    (759219 'move' ret[759214](759218 'deref' call_tmp[759221]))
    (759216 return ret[759214])
  }
  function ReferenceCount[41751].count[759226](arg _mt[759228]:_MT[238], arg this[759230]:ReferenceCount[41751]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759240] "RVV" "temp"
    unknown call_tmp[759247] "expr temp" "maybe param" "maybe type" "temp"
    (759250 'move' call_tmp[759247](759234 '.' this[759230] c"count"))
    (759245 'move' ret[759240](759244 'addr of' call_tmp[759247]))
    (759242 return ret[759240])
  }
  function ReferenceCount[41751].deinit[759252](arg _mt[759254]:_MT[238], arg this[759256]:ReferenceCount[41751]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (759264 return _void[55])
  }
  function ReferenceCount[41751].writeThis[759266](arg _mt[759270]:_MT[238], arg this[759268]:ReferenceCount[41751], arg f[759269]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (759275 call writeThisDefaultImpl f[759269] this[759268])
    (759280 return _void[55])
  }
  function ReferenceCount[41751].readThis[759282](arg _mt[759286]:_MT[238], arg this[759284]:ReferenceCount[41751], arg f[759285]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (759290 call readThisDefaultImpl f[759285] this[759284])
    (759296 return _void[55])
  }
  type ReferenceCount[41751] val super[355604]:object[22] "super class" unknown count[41681](41679 call chpl__atomicType int(64)[13])
  type unmanaged ReferenceCount?[415377]
  type ReferenceCount?[415374](?)
  type ReferenceCount[370602](?)
  function _shared[32](?).chpl_forwarding_expr2[41781](arg _mt[42956]:_MT[238], arg this[42954]:_shared[32](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[505348] "RVV" "temp"
    (505352 'move' ret[505348](41780 call(370598 call (partial) borrow _mt[243] this[42954])))
    (505350 return ret[505348])
  }
  function _shared[32](?).init[41798](arg _mt[42960]:_MT[238], ref arg this[42958]:_shared[32](?), arg chpl_t[41796]:_any[178](?)) : void[4] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[604406] "expr temp" "maybe param" "maybe type" "temp"
    (604409 'move' call_tmp[604406](41803 call isClass chpl_t[41796]))
    unknown call_tmp[604411] "expr temp" "maybe param" "maybe type" "temp"
    (604414 'move' call_tmp[604411](41804 call ! call_tmp[604406]))
    unknown call_tmp[604416] "expr temp" "maybe param" "maybe type" "temp"
    (604419 'move' call_tmp[604416](41827 call _cond_test call_tmp[604411]))
    if call_tmp[604416]
    {
      (41825 call compilerError "shared only works with classes")
    }
    unknown tmp[454275] "temp" "type variable"
    (454277 'move' tmp[454275](41840 call _to_borrowed chpl_t[41796]))
    (454279 'init field' this[42958] c"chpl_t" tmp[454275])
    (474121 'end of statement')
    unknown call_tmp[604421] "expr temp" "maybe param" "maybe type" "temp"
    (604424 'move' call_tmp[604421](454293 '.v' this[42958] c"chpl_t"))
    unknown call_tmp[604426] "maybe param" "maybe type" "temp"
    (604429 'move' call_tmp[604426](454285 'to nilable class' call_tmp[604421]))
    unknown tmp[454283] "temp"
    (454287 'init var' tmp[454283] nil[44] call_tmp[604426])
    (454289 'init field' this[42958] c"chpl_p" tmp[454283])
    (474122 'end of statement')
    unknown tmp[454296] "temp"
    (454299 'init var' tmp[454296] nil[44] unmanaged ReferenceCount?[415377])
    (454301 'init field' this[42958] c"chpl_pn" tmp[454296])
    (474123 'end of statement')
    (505354 return _void[55])
  }
  function _shared[32](?).init[41870](arg _mt[42964]:_MT[238], ref arg this[42962]:_shared[32](?), arg p[41867]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (41891 call compilerError "cannot initialize shared from a borrow")
    (474124 'end of statement')
    unknown call_tmp[604433] "expr temp" "maybe param" "maybe type" "temp"
    (604436 'move' call_tmp[604433](41901 call _to_unmanaged p[41867]))
    (41903 call(41895 call (partial) init _mt[243] this[42962]) call_tmp[604433])
    (505356 return _void[55])
  }
  function _shared[32](?).init[41913](arg _mt[42968]:_MT[238], ref arg this[42966]:_shared[32](?), arg p[41910]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454305] "temp" "type variable"
    unknown call_tmp[604438] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604441 'move' call_tmp[604438](41921 'typeof' p[41910]))
    (454307 'move' tmp[454305](41923 call _to_borrowed call_tmp[604438]))
    (454309 'init field' this[42966] c"chpl_t" tmp[454305])
    (474126 'end of statement')
    unknown rc[41932] "dead at end of block" "insert auto destroy"
    (540555 'init var' rc[41932] nil[44] unmanaged ReferenceCount?[415377])
    (41935 'end of statement')
    unknown call_tmp[604443] "expr temp" "maybe param" "maybe type" "temp"
    (604446 'move' call_tmp[604443](41938 call != p[41910] nil[44]))
    unknown call_tmp[604448] "expr temp" "maybe param" "maybe type" "temp"
    (604451 'move' call_tmp[604448](41950 call _cond_test call_tmp[604443]))
    if call_tmp[604448]
    {
      unknown call_tmp[604453] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (604456 'move' call_tmp[604453](747747 'new' ReferenceCount[370602](?)(_chpl_manager = unmanaged[220](?))))
      (41947 call = rc[41932] call_tmp[604453])
      (474127 'end of statement' rc[41932])
    }
    unknown call_tmp[604458] "maybe param" "maybe type" "temp"
    (604461 'move' call_tmp[604458](41962 call _to_borrowed p[41910]))
    unknown call_tmp[604463] "expr temp" "maybe param" "maybe type" "temp"
    (604466 'move' call_tmp[604463](454323 '.v' this[42966] c"chpl_t"))
    unknown call_tmp[604468] "maybe param" "maybe type" "temp"
    (604471 'move' call_tmp[604468](454315 'to nilable class' call_tmp[604463]))
    unknown tmp[454313] "temp"
    (454317 'init var' tmp[454313] call_tmp[604458] call_tmp[604468])
    (454319 'init field' this[42966] c"chpl_p" tmp[454313])
    (474129 'end of statement')
    unknown tmp[454326] "temp"
    (454329 'init var' tmp[454326] rc[41932] unmanaged ReferenceCount?[415377])
    (454331 'init field' this[42966] c"chpl_pn" tmp[454326])
    (474130 'end of statement' rc[41932])
    (505358 return _void[55])
  }
  function _shared[32](?).init[41990](arg _mt[42972]:_MT[238], ref arg this[42970]:_shared[32](?), arg p[41987]:_any[178](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (42021 call compilerError "shared only works with classes")
    (474132 'end of statement')
    unknown tmp[454341] "temp" "type variable"
    (454343 'move' tmp[454341](454335 'typeof' p[41987]))
    (454345 'init field' this[42970] c"chpl_t" tmp[454341])
    (474133 'end of statement')
    unknown call_tmp[604473] "expr temp" "maybe param" "maybe type" "temp"
    (604476 'move' call_tmp[604473](454359 '.v' this[42970] c"chpl_t"))
    unknown call_tmp[604478] "maybe param" "maybe type" "temp"
    (604481 'move' call_tmp[604478](454351 'to nilable class' call_tmp[604473]))
    unknown tmp[454349] "temp"
    (454353 'init var' tmp[454349] p[41987] call_tmp[604478])
    (454355 'init field' this[42970] c"chpl_p" tmp[454349])
    (474134 'end of statement')
    val tmp[454363]:unmanaged ReferenceCount?[415377] "temp"
    (454366 'default init var' tmp[454363] unmanaged ReferenceCount?[415377])
    (454368 '.=' this[42970] c"chpl_pn" tmp[454363])
    (474135 'end of statement')
    (505360 return _void[55])
  }
  where {
    unknown tmp[418227] "maybe param" "temp"
    unknown tmp[418248] "maybe param" "temp"
    unknown call_tmp[604483] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604486 'move' call_tmp[604483](454337 'typeof' p[41987]))
    unknown call_tmp[604488] "expr temp" "maybe param" "maybe type" "temp"
    (604491 'move' call_tmp[604488](41995 call isClass call_tmp[604483]))
    (418259 'move' tmp[418248](41997 call == call_tmp[604488] 0))
    unknown call_tmp[604493] "expr temp" "maybe param" "maybe type" "temp"
    (604496 'move' call_tmp[604493](418261 call _cond_invalid tmp[418248]))
    if call_tmp[604493]
    {
      (418264 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554035] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554036] "maybe param" "temp"
    unknown call_tmp[604498] "expr temp" "maybe param" "maybe type" "temp"
    (604501 'move' call_tmp[604498](418249 call isTrue tmp[418248]))
    (554041 'move' tmp[554036](554039 call _cond_test call_tmp[604498]))
    if tmp[554036]
    {
      unknown tmp[554043] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604503] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (604506 'move' call_tmp[604503](454339 'typeof' p[41987]))
      unknown call_tmp[604508] "expr temp" "maybe param" "maybe type" "temp"
      (604511 'move' call_tmp[604508](354198 'is_subtype' _shared[32](?) call_tmp[604503]))
      unknown call_tmp[604513] "expr temp" "maybe param" "maybe type" "temp"
      (604516 'move' call_tmp[604513](42005 call == call_tmp[604508] 0))
      (554045 'move' tmp[554043](418252 call isTrue call_tmp[604513]))
      (554050 'move' tmp[554035](554047 '_paramFoldLogical' tmp[554036] tmp[554043]))
    }
    {
      (554055 'move' tmp[554035](554052 '_paramFoldLogical' tmp[554036] 0))
    }
    (418238 'move' tmp[418227] tmp[554035])
    unknown call_tmp[604518] "expr temp" "maybe param" "maybe type" "temp"
    (604521 'move' call_tmp[604518](418240 call _cond_invalid tmp[418227]))
    if call_tmp[604518]
    {
      (418243 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554062] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554063] "maybe param" "temp"
    unknown call_tmp[604523] "expr temp" "maybe param" "maybe type" "temp"
    (604526 'move' call_tmp[604523](418228 call isTrue tmp[418227]))
    (554068 'move' tmp[554063](554066 call _cond_test call_tmp[604523]))
    if tmp[554063]
    {
      unknown tmp[554070] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604528] "expr temp" "maybe param" "maybe type" "temp"
      (604531 'move' call_tmp[604528](42012 call isIterator p[41987]))
      unknown call_tmp[604533] "expr temp" "maybe param" "maybe type" "temp"
      (604536 'move' call_tmp[604533](42014 call == call_tmp[604528] 0))
      (554072 'move' tmp[554070](418231 call isTrue call_tmp[604533]))
      (554077 'move' tmp[554062](554074 '_paramFoldLogical' tmp[554063] tmp[554070]))
    }
    {
      (554082 'move' tmp[554062](554079 '_paramFoldLogical' tmp[554063] 0))
    }
    (748178 call chpl_statementLevelSymbol tmp[554062])
  }
  function _shared[32](?).init[42049](arg _mt[42976]:_MT[238], ref arg this[42974]:_shared[32](?), in arg take[42046]:_owned[30](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[604540] "maybe param" "maybe type" "temp"
    (604543 'move' call_tmp[604540](42056 call(42052 call (partial) release _mt[243] take[42046])))
    unknown p[42057] "dead at end of block" "insert auto destroy"
    (540557 'init var' p[42057] call_tmp[604540])
    (42060 'end of statement')
    unknown tmp[454372] "temp" "type variable"
    unknown tmp[554089] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554090] "maybe param" "temp"
    unknown call_tmp[604545] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604548 'move' call_tmp[604545](42067 'typeof' this[42974]))
    unknown call_tmp[604552] "expr temp" "maybe param" "maybe type" "temp"
    (604555 'move' call_tmp[604552](42068 call chpl_t _mt[243] call_tmp[604545]))
    unknown call_tmp[604557] "expr temp" "maybe param" "maybe type" "temp"
    (604560 'move' call_tmp[604557](42072 call == call_tmp[604552] ?[260]))
    (554095 'move' tmp[554090](554093 call _cond_test call_tmp[604557]))
    if tmp[554090]
    {
      unknown tmp[554097] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604562] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (604565 'move' call_tmp[604562](42076 'typeof' p[42057]))
      (554099 'move' tmp[554097](42078 call _to_borrowed call_tmp[604562]))
      (554104 'move' tmp[554089](554101 '_paramFoldLogical' tmp[554090] tmp[554097]))
    }
    {
      unknown tmp[554106] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604567] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (604570 'move' call_tmp[604567](42080 'typeof' this[42974]))
      (554108 'move' tmp[554106](42081 call chpl_t _mt[243] call_tmp[604567]))
      (554113 'move' tmp[554089](554110 '_paramFoldLogical' tmp[554090] tmp[554106]))
    }
    (454374 'move' tmp[454372] tmp[554089])
    (454376 'init field' this[42974] c"chpl_t" tmp[454372])
    (474136 'end of statement')
    unknown call_tmp[604574] "expr temp" "maybe param" "maybe type" "temp"
    (604577 'move' call_tmp[604574](42093 call isClass p[42057]))
    unknown call_tmp[604579] "expr temp" "maybe param" "maybe type" "temp"
    (604582 'move' call_tmp[604579](42094 call ! call_tmp[604574]))
    unknown call_tmp[604584] "expr temp" "maybe param" "maybe type" "temp"
    (604587 'move' call_tmp[604584](42101 call _cond_test call_tmp[604579]))
    if call_tmp[604584]
    {
      (42099 call compilerError "shared only works with classes")
    }
    unknown rc[42110] "dead at end of block" "insert auto destroy"
    (540559 'init var' rc[42110] nil[44] unmanaged ReferenceCount?[415377])
    (42113 'end of statement')
    unknown call_tmp[604589] "expr temp" "maybe param" "maybe type" "temp"
    (604592 'move' call_tmp[604589](42116 call != p[42057] nil[44]))
    unknown call_tmp[604594] "expr temp" "maybe param" "maybe type" "temp"
    (604597 'move' call_tmp[604594](42128 call _cond_test call_tmp[604589]))
    if call_tmp[604594]
    {
      unknown call_tmp[604599] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (604602 'move' call_tmp[604599](747748 'new' ReferenceCount[370602](?)(_chpl_manager = unmanaged[220](?))))
      (42125 call = rc[42110] call_tmp[604599])
      (474138 'end of statement' rc[42110])
    }
    unknown call_tmp[604604] "expr temp" "maybe param" "maybe type" "temp"
    (604607 'move' call_tmp[604604](454390 '.v' this[42974] c"chpl_t"))
    unknown call_tmp[604609] "maybe param" "maybe type" "temp"
    (604612 'move' call_tmp[604609](454382 'to nilable class' call_tmp[604604]))
    unknown tmp[454380] "temp"
    (454384 'init var' tmp[454380] p[42057] call_tmp[604609])
    (454386 'init field' this[42974] c"chpl_p" tmp[454380])
    (474140 'end of statement' p[42057])
    unknown tmp[454393] "temp"
    (454396 'init var' tmp[454393] rc[42110] unmanaged ReferenceCount?[415377])
    (454398 'init field' this[42974] c"chpl_pn" tmp[454393])
    (474142 'end of statement' rc[42110])
    (505362 return _void[55])
  }
  function _shared[32](?).init[42164](arg _mt[42980]:_MT[238], ref arg this[42978]:_shared[32](?), arg _private[42161]:bool[10], arg t[42166]:_any[178](?), ref arg src[42169]:_shared[32](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454402] "temp" "type variable"
    (454404 'move' tmp[454402] t[42166])
    (454406 'init field' this[42978] c"chpl_t" tmp[454402])
    (474144 'end of statement')
    unknown call_tmp[604614] "expr temp" "maybe param" "maybe type" "temp"
    (604617 'move' call_tmp[604614](42193 call _to_unmanaged t[42166]))
    unknown call_tmp[604619] "expr temp" "maybe param" "maybe type" "temp"
    (604622 'move' call_tmp[604619](42195 call _to_nilable call_tmp[604614]))
    unknown call_tmp[604626] "expr temp" "maybe param" "maybe type" "temp"
    (604629 'move' call_tmp[604626](42186 call chpl_p _mt[243] src[42169]))
    unknown call_tmp[604631] "maybe param" "maybe type" "temp"
    (604634 'move' call_tmp[604631](42196 call _cast call_tmp[604619] call_tmp[604626]))
    unknown call_tmp[604636] "expr temp" "maybe param" "maybe type" "temp"
    (604639 'move' call_tmp[604636](454420 '.v' this[42978] c"chpl_t"))
    unknown call_tmp[604641] "maybe param" "maybe type" "temp"
    (604644 'move' call_tmp[604641](454412 'to nilable class' call_tmp[604636]))
    unknown tmp[454410] "temp"
    (454414 'init var' tmp[454410] call_tmp[604631] call_tmp[604641])
    (454416 'init field' this[42978] c"chpl_p" tmp[454410])
    (474145 'end of statement')
    unknown call_tmp[604648] "maybe param" "maybe type" "temp"
    (604651 'move' call_tmp[604648](42206 call chpl_pn _mt[243] src[42169]))
    unknown tmp[454423] "temp"
    (454426 'init var' tmp[454423] call_tmp[604648] unmanaged ReferenceCount?[415377])
    (454428 'init field' this[42978] c"chpl_pn" tmp[454423])
    (474146 'end of statement')
    unknown call_tmp[604655] "expr temp" "maybe param" "maybe type" "temp"
    (604658 'move' call_tmp[604655](42213 call chpl_p _mt[243] src[42169]))
    (42217 call = call_tmp[604655] nil[44])
    (474147 'end of statement')
    unknown call_tmp[604662] "expr temp" "maybe param" "maybe type" "temp"
    (604665 'move' call_tmp[604662](42221 call chpl_pn _mt[243] src[42169]))
    (42225 call = call_tmp[604662] nil[44])
    (505364 return _void[55])
  }
  function _shared[32](?).init[42236](arg _mt[42984]:_MT[238], ref arg this[42982]:_shared[32](?), arg _private[42233]:bool[10], arg t[42238]:_any[178](?), arg p[42240]:_any[178](?), arg pn[42242]:_any[178](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[604667] "expr temp" "maybe param" "maybe type" "temp"
    (604670 'move' call_tmp[604667](42249 call _to_unmanaged t[42238]))
    unknown call_tmp[604672] "expr temp" "maybe param" "maybe type" "temp"
    (604675 'move' call_tmp[604672](42251 call _to_nilable call_tmp[604667]))
    unknown call_tmp[604677] "maybe param" "maybe type" "temp"
    (604680 'move' call_tmp[604677](42252 call _cast call_tmp[604672] p[42240]))
    unknown ptr[42254] "dead at end of block" "insert auto destroy"
    (540561 'init var' ptr[42254] call_tmp[604677])
    (42257 'end of statement')
    unknown count[42260] "dead at end of block" "insert auto destroy"
    (540563 'init var' count[42260] pn[42242])
    (42263 'end of statement')
    unknown call_tmp[604682] "expr temp" "maybe param" "maybe type" "temp"
    (604685 'move' call_tmp[604682](42266 call != ptr[42254] nil[44]))
    unknown call_tmp[604687] "expr temp" "maybe param" "maybe type" "temp"
    (604690 'move' call_tmp[604687](42284 call _cond_test call_tmp[604682]))
    if call_tmp[604687]
    {
      unknown call_tmp[604692] "expr temp" "maybe param" "maybe type" "temp"
      (604695 'move' call_tmp[604692](42269 call postfix! count[42260]))
      (42275 call(42271 call (partial) retain _mt[243] call_tmp[604692]))
      (474149 'end of statement' count[42260])
    }
    {
      (42280 call = count[42260] nil[44])
      (474151 'end of statement' count[42260])
    }
    unknown tmp[454432] "temp" "type variable"
    (454434 'move' tmp[454432] t[42238])
    (454436 'init field' this[42982] c"chpl_t" tmp[454432])
    (474153 'end of statement')
    unknown call_tmp[604699] "expr temp" "maybe param" "maybe type" "temp"
    (604702 'move' call_tmp[604699](454450 '.v' this[42982] c"chpl_t"))
    unknown call_tmp[604704] "maybe param" "maybe type" "temp"
    (604707 'move' call_tmp[604704](454442 'to nilable class' call_tmp[604699]))
    unknown tmp[454440] "temp"
    (454444 'init var' tmp[454440] ptr[42254] call_tmp[604704])
    (454446 'init field' this[42982] c"chpl_p" tmp[454440])
    (474154 'end of statement' ptr[42254])
    unknown tmp[454453] "temp"
    (454456 'init var' tmp[454453] count[42260] unmanaged ReferenceCount?[415377])
    (454458 'init field' this[42982] c"chpl_pn" tmp[454453])
    (474156 'end of statement' count[42260])
    (505366 return _void[55])
  }
  function _shared[32](?).init=[42320](arg _mt[42988]:_MT[238], ref arg this[42986]:_shared[32](?), in arg take[42317]:_owned[30](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[418269] "maybe param" "temp"
    unknown call_tmp[604709] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604712 'move' call_tmp[604709](42324 'typeof' this[42986]))
    (418280 'move' tmp[418269](42326 call isNonNilableClass call_tmp[604709]))
    unknown call_tmp[604714] "expr temp" "maybe param" "maybe type" "temp"
    (604717 'move' call_tmp[604714](418282 call _cond_invalid tmp[418269]))
    if call_tmp[604714]
    {
      (418285 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554120] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554121] "maybe param" "temp"
    unknown call_tmp[604719] "expr temp" "maybe param" "maybe type" "temp"
    (604722 'move' call_tmp[604719](418270 call isTrue tmp[418269]))
    (554126 'move' tmp[554121](554124 call _cond_test call_tmp[604719]))
    if tmp[554121]
    {
      unknown tmp[554128] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604724] "expr temp" "maybe param" "maybe type" "temp"
      (604727 'move' call_tmp[604724](42330 call isNilableClass take[42317]))
      (554130 'move' tmp[554128](418273 call isTrue call_tmp[604724]))
      (554135 'move' tmp[554120](554132 '_paramFoldLogical' tmp[554121] tmp[554128]))
    }
    {
      (554140 'move' tmp[554120](554137 '_paramFoldLogical' tmp[554121] 0))
    }
    unknown call_tmp[604729] "expr temp" "maybe param" "maybe type" "temp"
    (604732 'move' call_tmp[604729](42356 call _cond_test tmp[554120]))
    if call_tmp[604729]
    {
      (42354 call compilerError "cannot create a non-nilable shared variable from a nilable class instance")
    }
    (42368 call(42363 call (partial) init _mt[243] this[42986]) take[42317])
    (505368 return _void[55])
  }
  function _shared[32](?).init=[42378](arg _mt[42992]:_MT[238], ref arg this[42990]:_shared[32](?), const  ref arg src[42375]:_shared[32](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[418290] "maybe param" "temp"
    unknown call_tmp[604736] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604739 'move' call_tmp[604736](42382 'typeof' this[42990]))
    (418301 'move' tmp[418290](42384 call isNonNilableClass call_tmp[604736]))
    unknown call_tmp[604741] "expr temp" "maybe param" "maybe type" "temp"
    (604744 'move' call_tmp[604741](418303 call _cond_invalid tmp[418290]))
    if call_tmp[604741]
    {
      (418306 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554147] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554148] "maybe param" "temp"
    unknown call_tmp[604746] "expr temp" "maybe param" "maybe type" "temp"
    (604749 'move' call_tmp[604746](418291 call isTrue tmp[418290]))
    (554153 'move' tmp[554148](554151 call _cond_test call_tmp[604746]))
    if tmp[554148]
    {
      unknown tmp[554155] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604751] "expr temp" "maybe param" "maybe type" "temp"
      (604754 'move' call_tmp[604751](42388 call isNilableClass src[42375]))
      (554157 'move' tmp[554155](418294 call isTrue call_tmp[604751]))
      (554162 'move' tmp[554147](554159 '_paramFoldLogical' tmp[554148] tmp[554155]))
    }
    {
      (554167 'move' tmp[554147](554164 '_paramFoldLogical' tmp[554148] 0))
    }
    unknown call_tmp[604756] "expr temp" "maybe param" "maybe type" "temp"
    (604759 'move' call_tmp[604756](42396 call _cond_test tmp[554147]))
    if call_tmp[604756]
    {
      (42394 call compilerError "cannot create a non-nilable shared variable from a nilable class instance")
    }
    unknown call_tmp[604761] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604764 'move' call_tmp[604761](42409 'typeof' this[42990]))
    unknown call_tmp[604768] "expr temp" "maybe param" "maybe type" "temp"
    (604771 'move' call_tmp[604768](42410 call chpl_t _mt[243] call_tmp[604761]))
    unknown call_tmp[604775] "expr temp" "maybe param" "maybe type" "temp"
    (604778 'move' call_tmp[604775](42404 call chpl_t _mt[243] src[42375]))
    unknown call_tmp[604780] "expr temp" "maybe param" "maybe type" "temp"
    (604783 'move' call_tmp[604780](354199 'is_coercible' call_tmp[604768] call_tmp[604775]))
    unknown call_tmp[604785] "expr temp" "maybe param" "maybe type" "temp"
    (604788 'move' call_tmp[604785](42415 call == call_tmp[604780] 0))
    unknown call_tmp[604790] "expr temp" "maybe param" "maybe type" "temp"
    (604793 'move' call_tmp[604790](42434 call _cond_test call_tmp[604785]))
    if call_tmp[604790]
    {
      unknown call_tmp[604795] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (604798 'move' call_tmp[604795](42421 'typeof' src[42375]))
      unknown call_tmp[604800] "expr temp" "maybe param" "maybe type" "temp"
      (604803 'move' call_tmp[604800](42423 call _cast string[26] call_tmp[604795]))
      unknown call_tmp[604805] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (604808 'move' call_tmp[604805](42427 'typeof' this[42990]))
      unknown call_tmp[604810] "expr temp" "maybe param" "maybe type" "temp"
      (604813 'move' call_tmp[604810](42429 call _cast string[26] call_tmp[604805]))
      (42432 call compilerError "cannot coerce '" call_tmp[604800] "' to '" call_tmp[604810] "' in initialization")
    }
    unknown tmp[454462] "temp" "type variable"
    unknown call_tmp[604815] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604818 'move' call_tmp[604815](42444 'typeof' this[42990]))
    (454464 'move' tmp[454462](42445 call chpl_t _mt[243] call_tmp[604815]))
    (454466 'init field' this[42990] c"chpl_t" tmp[454462])
    (474164 'end of statement')
    unknown call_tmp[604824] "maybe param" "maybe type" "temp"
    (604827 'move' call_tmp[604824](42456 call chpl_p _mt[243] src[42375]))
    unknown call_tmp[604829] "expr temp" "maybe param" "maybe type" "temp"
    (604832 'move' call_tmp[604829](454480 '.v' this[42990] c"chpl_t"))
    unknown call_tmp[604834] "maybe param" "maybe type" "temp"
    (604837 'move' call_tmp[604834](454472 'to nilable class' call_tmp[604829]))
    unknown tmp[454470] "temp"
    (454474 'init var' tmp[454470] call_tmp[604824] call_tmp[604834])
    (454476 'init field' this[42990] c"chpl_p" tmp[454470])
    (474165 'end of statement')
    unknown call_tmp[604841] "maybe param" "maybe type" "temp"
    (604844 'move' call_tmp[604841](42467 call chpl_pn _mt[243] src[42375]))
    unknown tmp[454483] "temp"
    (454486 'init var' tmp[454483] call_tmp[604841] unmanaged ReferenceCount?[415377])
    (454488 'init field' this[42990] c"chpl_pn" tmp[454483])
    (474166 'end of statement')
    unknown call_tmp[604848] "expr temp" "maybe param" "maybe type" "temp"
    (604851 'move' call_tmp[604848](42481 call chpl_pn _mt[243] this[42990]))
    unknown call_tmp[604853] "expr temp" "maybe param" "maybe type" "temp"
    (604856 'move' call_tmp[604853](42485 call != call_tmp[604848] nil[44]))
    unknown call_tmp[604858] "expr temp" "maybe param" "maybe type" "temp"
    (604861 'move' call_tmp[604858](42499 call _cond_test call_tmp[604853]))
    if call_tmp[604858]
    {
      unknown call_tmp[604865] "expr temp" "maybe param" "maybe type" "temp"
      (604868 'move' call_tmp[604865](42488 call chpl_pn _mt[243] this[42990]))
      unknown call_tmp[604870] "expr temp" "maybe param" "maybe type" "temp"
      (604873 'move' call_tmp[604870](42491 call postfix! call_tmp[604865]))
      (42497 call(42493 call (partial) retain _mt[243] call_tmp[604870]))
    }
    (505370 return _void[55])
  }
  function _shared[32](?).init=[42512](arg _mt[42996]:_MT[238], ref arg this[42994]:_shared[32](?), arg src[42509]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (42533 call compilerError "cannot create a shared variable from a borrowed class instance")
    (474168 'end of statement')
    unknown tmp[454492] "temp" "type variable"
    (454494 'move' tmp[454492] int(64)[13])
    (454496 'init field' this[42994] c"chpl_t" tmp[454492])
    (474169 'end of statement')
    unknown tmp[454501] "temp"
    unknown call_tmp[604877] "expr temp" "maybe param" "maybe type" "temp"
    (604880 'move' call_tmp[604877](454511 '.v' this[42994] c"chpl_t"))
    unknown call_tmp[604882] "expr temp" "maybe param" "maybe type" "temp"
    (604885 'move' call_tmp[604882](454503 'to nilable class' call_tmp[604877]))
    (454505 'default init var' tmp[454501] call_tmp[604882])
    (454507 '.=' this[42994] c"chpl_p" tmp[454501])
    (474170 'end of statement')
    val tmp[454514]:unmanaged ReferenceCount?[415377] "temp"
    (454517 'default init var' tmp[454514] unmanaged ReferenceCount?[415377])
    (454519 '.=' this[42994] c"chpl_pn" tmp[454514])
    (474171 'end of statement')
    (505372 return _void[55])
  }
  function _shared[32](?).init=[42552](arg _mt[43000]:_MT[238], ref arg this[42998]:_shared[32](?), arg src[42549]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (42573 call compilerError "cannot create a shared variable from an unmanaged class instance")
    (474172 'end of statement')
    unknown tmp[454523] "temp" "type variable"
    (454525 'move' tmp[454523] int(64)[13])
    (454527 'init field' this[42998] c"chpl_t" tmp[454523])
    (474173 'end of statement')
    unknown tmp[454532] "temp"
    unknown call_tmp[604887] "expr temp" "maybe param" "maybe type" "temp"
    (604890 'move' call_tmp[604887](454542 '.v' this[42998] c"chpl_t"))
    unknown call_tmp[604892] "expr temp" "maybe param" "maybe type" "temp"
    (604895 'move' call_tmp[604892](454534 'to nilable class' call_tmp[604887]))
    (454536 'default init var' tmp[454532] call_tmp[604892])
    (454538 '.=' this[42998] c"chpl_p" tmp[454532])
    (474174 'end of statement')
    val tmp[454545]:unmanaged ReferenceCount?[415377] "temp"
    (454548 'default init var' tmp[454545] unmanaged ReferenceCount?[415377])
    (454550 '.=' this[42998] c"chpl_pn" tmp[454545])
    (474175 'end of statement')
    (505374 return _void[55])
  }
  function _shared[32](?).init=[42592](arg _mt[43004]:_MT[238], ref arg this[43002]:_shared[32](?), arg src[42589]:_nilType[42]) : void[4] "leaves this nil" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[604899] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604902 'move' call_tmp[604899](42599 'typeof' this[43002]))
    unknown call_tmp[604906] "expr temp" "maybe param" "maybe type" "temp"
    (604909 'move' call_tmp[604906](42600 call chpl_t _mt[243] call_tmp[604899]))
    (42604 call(42595 call (partial) init _mt[243] this[43002]) call_tmp[604906])
    (474176 'end of statement')
    unknown call_tmp[604913] "expr temp" "maybe param" "maybe type" "temp"
    (604916 'move' call_tmp[604913](370659 call chpl_t _mt[243] this[43002]))
    unknown call_tmp[604918] "expr temp" "maybe param" "maybe type" "temp"
    (604921 'move' call_tmp[604918](42610 call isNonNilableClass call_tmp[604913]))
    unknown call_tmp[604923] "expr temp" "maybe param" "maybe type" "temp"
    (604926 'move' call_tmp[604923](42632 call _cond_test call_tmp[604918]))
    if call_tmp[604923]
    {
      (42630 call compilerError "Assigning non-nilable shared to nil")
    }
    (505376 return _void[55])
  }
  function _shared[32](?).doClear[42641](arg _mt[43008]:_MT[238], ref arg this[43006]:_shared[32](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[418311] "maybe param" "temp"
    unknown call_tmp[604930] "expr temp" "maybe param" "maybe type" "temp"
    (604933 'move' call_tmp[604930](370664 call chpl_p _mt[243] this[43006]))
    (418322 'move' tmp[418311](42645 call != call_tmp[604930] nil[44]))
    unknown call_tmp[604935] "expr temp" "maybe param" "maybe type" "temp"
    (604938 'move' call_tmp[604935](418324 call _cond_invalid tmp[418311]))
    if call_tmp[604935]
    {
      (418327 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554174] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554175] "maybe param" "temp"
    unknown call_tmp[604940] "expr temp" "maybe param" "maybe type" "temp"
    (604943 'move' call_tmp[604940](418312 call isTrue tmp[418311]))
    (554180 'move' tmp[554175](554178 call _cond_test call_tmp[604940]))
    if tmp[554175]
    {
      unknown tmp[554182] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604947] "expr temp" "maybe param" "maybe type" "temp"
      (604950 'move' call_tmp[604947](370669 call chpl_pn _mt[243] this[43006]))
      unknown call_tmp[604952] "expr temp" "maybe param" "maybe type" "temp"
      (604955 'move' call_tmp[604952](42649 call != call_tmp[604947] nil[44]))
      (554184 'move' tmp[554182](418315 call isTrue call_tmp[604952]))
      (554189 'move' tmp[554174](554186 '_paramFoldLogical' tmp[554175] tmp[554182]))
    }
    {
      (554194 'move' tmp[554174](554191 '_paramFoldLogical' tmp[554175] 0))
    }
    unknown call_tmp[604957] "expr temp" "maybe param" "maybe type" "temp"
    (604960 'move' call_tmp[604957](42688 call _cond_test tmp[554174]))
    if call_tmp[604957]
    {
      unknown call_tmp[604964] "expr temp" "maybe param" "maybe type" "temp"
      (604967 'move' call_tmp[604964](370674 call chpl_pn _mt[243] this[43006]))
      unknown call_tmp[604969] "expr temp" "maybe param" "maybe type" "temp"
      (604972 'move' call_tmp[604969](42654 call postfix! call_tmp[604964]))
      unknown call_tmp[604976] "maybe param" "maybe type" "temp"
      (604979 'move' call_tmp[604976](42660 call(42656 call (partial) release _mt[243] call_tmp[604969])))
      unknown count[42661] "dead at end of block" "insert auto destroy"
      (540565 'init var' count[42661] call_tmp[604976])
      (42664 'end of statement')
      unknown call_tmp[604981] "expr temp" "maybe param" "maybe type" "temp"
      (604984 'move' call_tmp[604981](42668 call == count[42661] 0))
      unknown call_tmp[604986] "expr temp" "maybe param" "maybe type" "temp"
      (604989 'move' call_tmp[604986](42684 call _cond_test call_tmp[604981]))
      if call_tmp[604986]
      {
        unknown call_tmp[604993] "expr temp" "maybe param" "maybe type" "temp"
        (604996 'move' call_tmp[604993](370680 call chpl_p _mt[243] this[43006]))
        unknown call_tmp[604998] "expr temp" "maybe param" "maybe type" "temp"
        (605001 'move' call_tmp[604998](42673 call _to_unmanaged call_tmp[604993]))
        (42675 call chpl__delete call_tmp[604998])
        (474179 'end of statement')
        unknown call_tmp[605005] "expr temp" "maybe param" "maybe type" "temp"
        (605008 'move' call_tmp[605005](370685 call chpl_pn _mt[243] this[43006]))
        (42681 call chpl__delete call_tmp[605005])
      }
    }
    unknown call_tmp[605012] "expr temp" "maybe param" "maybe type" "temp"
    (605015 'move' call_tmp[605012](370690 call chpl_p _mt[243] this[43006]))
    (42695 call = call_tmp[605012] nil[44])
    (474181 'end of statement')
    unknown call_tmp[605019] "expr temp" "maybe param" "maybe type" "temp"
    (605022 'move' call_tmp[605019](370695 call chpl_pn _mt[243] this[43006]))
    (42700 call = call_tmp[605019] nil[44])
    (505378 return _void[55])
  }
  function _shared[32](?).create[42709](arg _mt[43012]:_MT[238], arg this[43010]:_shared[32](?), arg source[42707]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[605024] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605027 'move' call_tmp[605024](42731 'typeof' source[42707]))
    unknown call_tmp[605029] "expr temp" "maybe param" "maybe type" "temp"
    (605032 'move' call_tmp[605029](42733 call _cast string[26] call_tmp[605024]))
    (42735 call compilerError "cannot create a 'shared' from " call_tmp[605029])
    (505380 return _void[55])
  }
  function _shared[32](?).create[42746](arg _mt[43016]:_MT[238], arg this[43014]:_shared[32](?), in arg take[42743]:_owned[30](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[505384] "RVV" "temp"
    unknown result[42750] "dead at end of block" "insert auto destroy"
    (540567 'init var' result[42750] take[42743] _shared[32](?))
    (42753 'end of statement')
    (505389 'move' ret[505384](505388 'deref' result[42750]))
    gotoReturn _end_create[505382] _end_create[505382]
    (474184 'end of statement' result[42750])
    label _end_create[505382]
    (505386 return ret[505384])
  }
  function _shared[32](?).create[42766](arg _mt[43020]:_MT[238], arg this[43018]:_shared[32](?), in arg src[42763]:_shared[32](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[505395] "RVV" "temp"
    (505400 'move' ret[505395](505399 'deref' src[42763]))
    (505397 return ret[505395])
  }
  function _shared[32](?).create[42780](arg _mt[43024]:_MT[238], arg this[43022]:_shared[32](?), arg p[42777]:unmanaged[220](?)) : _unknown[51] "inline" "method" "primary method" "unsafe"
  {
    unknown ret[505404] "RVV" "temp"
    unknown result[42787] "dead at end of block" "insert auto destroy"
    unknown call_tmp[605034] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605037 'move' call_tmp[605034](42783 'typeof' p[42777]))
    unknown call_tmp[605039] "expr temp" "maybe param" "maybe type" "temp"
    (605042 'move' call_tmp[605039](42785 call _cast _shared[32](?) call_tmp[605034]))
    (540569 'default init var' result[42787] call_tmp[605039])
    (42790 'end of statement')
    (42798 call(42793 call (partial) retain _mt[243] result[42787]) p[42777])
    (474187 'end of statement' result[42787])
    (505409 'move' ret[505404](505408 'deref' result[42787]))
    gotoReturn _end_create[505402] _end_create[505402]
    (474189 'end of statement' result[42787])
    label _end_create[505402]
    (505406 return ret[505404])
  }
  function _shared[32](?).deinit[42807](arg _mt[43028]:_MT[238], arg this[43026]:_shared[32](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[605048] "expr temp" "maybe param" "maybe type" "temp"
    (605051 'move' call_tmp[605048](370711 call chpl_p _mt[243] this[43026]))
    unknown call_tmp[605053] "expr temp" "maybe param" "maybe type" "temp"
    (605056 'move' call_tmp[605053](42812 call isClass call_tmp[605048]))
    unknown call_tmp[605058] "expr temp" "maybe param" "maybe type" "temp"
    (605061 'move' call_tmp[605058](42818 call _cond_test call_tmp[605053]))
    if call_tmp[605058]
    {
      (42815 call(370715 call (partial) doClear _mt[243] this[43026]))
    }
    (505413 return _void[55])
  }
  function _shared[32](?).retain[42831](arg _mt[43032]:_MT[238], ref arg this[43030]:_shared[32](?), arg newPtr[42828]:unmanaged[220](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[605067] "expr temp" "maybe param" "maybe type" "temp"
    (605070 'move' call_tmp[605067](370721 call chpl_t _mt[243] this[43030]))
    unknown call_tmp[605072] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605075 'move' call_tmp[605072](42835 'typeof' newPtr[42828]))
    unknown call_tmp[605077] "expr temp" "maybe param" "maybe type" "temp"
    (605080 'move' call_tmp[605077](354200 'is_coercible' call_tmp[605067] call_tmp[605072]))
    unknown call_tmp[605082] "expr temp" "maybe param" "maybe type" "temp"
    (605085 'move' call_tmp[605082](42839 call ! call_tmp[605077]))
    unknown call_tmp[605087] "expr temp" "maybe param" "maybe type" "temp"
    (605090 'move' call_tmp[605087](42871 call _cond_test call_tmp[605082]))
    if call_tmp[605087]
    {
      unknown call_tmp[605092] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (605095 'move' call_tmp[605092](42844 'typeof' newPtr[42828]))
      unknown call_tmp[605097] "expr temp" "maybe param" "maybe type" "temp"
      (605100 'move' call_tmp[605097](42846 call _cast string[26] call_tmp[605092]))
      unknown call_tmp[605102] "expr temp" "maybe param" "maybe type" "temp"
      (605105 'move' call_tmp[605102](42848 call + "cannot retain '" call_tmp[605097]))
      unknown call_tmp[605107] "expr temp" "maybe param" "maybe type" "temp"
      (605110 'move' call_tmp[605107](42851 call + call_tmp[605102] "' "))
      unknown call_tmp[605112] "expr temp" "maybe param" "maybe type" "temp"
      (605115 'move' call_tmp[605112](42854 call + call_tmp[605107] "(expected '"))
      unknown call_tmp[605119] "expr temp" "maybe param" "maybe type" "temp"
      (605122 'move' call_tmp[605119](370727 call chpl_t _mt[243] this[43030]))
      unknown call_tmp[605124] "expr temp" "maybe param" "maybe type" "temp"
      (605127 'move' call_tmp[605124](42859 call _to_unmanaged call_tmp[605119]))
      unknown call_tmp[605129] "expr temp" "maybe param" "maybe type" "temp"
      (605132 'move' call_tmp[605129](42861 call _cast string[26] call_tmp[605124]))
      unknown call_tmp[605134] "expr temp" "maybe param" "maybe type" "temp"
      (605137 'move' call_tmp[605134](42863 call + call_tmp[605112] call_tmp[605129]))
      unknown call_tmp[605139] "expr temp" "maybe param" "maybe type" "temp"
      (605142 'move' call_tmp[605139](42866 call + call_tmp[605134] "')"))
      (42869 call compilerError call_tmp[605139])
    }
    (42879 call(370731 call (partial) doClear _mt[243] this[43030]))
    (474193 'end of statement')
    unknown call_tmp[605148] "expr temp" "maybe param" "maybe type" "temp"
    (605151 'move' call_tmp[605148](42882 call chpl_p _mt[243] this[43030]))
    (42886 call = call_tmp[605148] newPtr[42828])
    (474194 'end of statement')
    unknown call_tmp[605153] "expr temp" "maybe param" "maybe type" "temp"
    (605156 'move' call_tmp[605153](42891 call != newPtr[42828] nil[44]))
    unknown call_tmp[605158] "expr temp" "maybe param" "maybe type" "temp"
    (605161 'move' call_tmp[605158](42907 call _cond_test call_tmp[605153]))
    if call_tmp[605158]
    {
      unknown call_tmp[605165] "expr temp" "maybe param" "maybe type" "temp"
      (605168 'move' call_tmp[605165](42894 call chpl_pn _mt[243] this[43030]))
      unknown call_tmp[605170] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (605173 'move' call_tmp[605170](747749 'new' ReferenceCount[370602](?)(_chpl_manager = unmanaged[220](?))))
      (42903 call = call_tmp[605165] call_tmp[605170])
    }
    (505415 return _void[55])
  }
  function _shared[32](?).clear[42915](arg _mt[43036]:_MT[238], ref arg this[43034]:_shared[32](?)) : _unknown[51] "leaves this nil" "method" "primary method" "no return value for void"
  {
    (42919 call(370738 call (partial) doClear _mt[243] this[43034]))
    (505417 return _void[55])
  }
  function _shared[32](?).borrow[42926](arg _mt[43040]:_MT[238], arg this[43038]:_shared[32](?)) : _unknown[51] "nil from this" "method" "primary method"
  {
    unknown ret[505421] "RVV" "temp"
    unknown call_tmp[605179] "expr temp" "maybe param" "maybe type" "temp"
    (605182 'move' call_tmp[605179](370743 call chpl_t _mt[243] this[43038]))
    unknown call_tmp[605184] "expr temp" "maybe param" "maybe type" "temp"
    (605187 'move' call_tmp[605184](42931 call _to_nilable call_tmp[605179]))
    unknown call_tmp[605191] "expr temp" "maybe param" "maybe type" "temp"
    (605194 'move' call_tmp[605191](370748 call chpl_t _mt[243] this[43038]))
    unknown call_tmp[605196] "expr temp" "maybe param" "maybe type" "temp"
    (605199 'move' call_tmp[605196](42933 call == call_tmp[605184] call_tmp[605191]))
    unknown call_tmp[605201] "expr temp" "maybe param" "maybe type" "temp"
    (605204 'move' call_tmp[605201](42945 call _cond_test call_tmp[605196]))
    if call_tmp[605201]
    {
      unknown call_tmp[605208] "expr temp" "maybe param" "maybe type" "temp"
      (605211 'move' call_tmp[605208](370753 call chpl_p _mt[243] this[43038]))
      (505426 'move' ret[505421](505425 'deref' call_tmp[605208]))
      gotoReturn _end_borrow[505419] _end_borrow[505419]
    }
    {
      unknown call_tmp[605215] "expr temp" "maybe param" "maybe type" "temp"
      (605218 'move' call_tmp[605215](370758 call chpl_p _mt[243] this[43038]))
      unknown call_tmp[605220] "expr temp" "maybe param" "maybe type" "temp"
      (605223 'move' call_tmp[605220](42940 call postfix! call_tmp[605215]))
      (505431 'move' ret[505421](505430 'deref' call_tmp[605220]))
      gotoReturn _end_borrow[505419] _end_borrow[505419]
    }
    label _end_borrow[505419]
    (505423 return ret[505421])
  }
  function _shared[32](?).chpl_t[759298](arg _mt[759300]:_MT[238], arg this[759302]:_shared[32](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[759321] "RVV" "temp" "type variable"
    unknown call_tmp[759335] "expr temp" "maybe param" "maybe type" "temp"
    (759338 'move' call_tmp[759335](759307 'is bound' this[759302] c"chpl_t"))
    if call_tmp[759335]
    {
      unknown call_tmp[759340] "expr temp" "maybe param" "maybe type" "temp"
      (759343 'move' call_tmp[759340](759306 '.v' this[759302] c"chpl_t"))
      (759326 'move' ret[759321](759325 'deref' call_tmp[759340]))
      gotoReturn _end_chpl_t[759319] _end_chpl_t[759319]
    }
    {
      (759331 'move' ret[759321](759330 'deref' _uninstantiated[258]))
      gotoReturn _end_chpl_t[759319] _end_chpl_t[759319]
    }
    label _end_chpl_t[759319]
    (759323 return ret[759321])
  }
  function _shared[32](?).chpl_t[759345](arg _mt[759347]:_MT[238], arg this[759349]:_shared[32](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759368] "RVV" "temp" "type variable"
    unknown call_tmp[759382] "expr temp" "maybe param" "maybe type" "temp"
    (759385 'move' call_tmp[759382](759354 'is bound' this[759349] c"chpl_t"))
    if call_tmp[759382]
    {
      unknown call_tmp[759387] "expr temp" "maybe param" "maybe type" "temp"
      (759390 'move' call_tmp[759387](759353 '.v' this[759349] c"chpl_t"))
      (759373 'move' ret[759368](759372 'deref' call_tmp[759387]))
      gotoReturn _end_chpl_t[759366] _end_chpl_t[759366]
    }
    {
      (759378 'move' ret[759368](759377 'deref' _uninstantiated[258]))
      gotoReturn _end_chpl_t[759366] _end_chpl_t[759366]
    }
    label _end_chpl_t[759366]
    (759370 return ret[759368])
  }
  function _shared[32](?).chpl_p[759392](arg _mt[759394]:_MT[238], ref arg this[759396]:_shared[32](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[759406] "RVV" "temp"
    unknown call_tmp[759413] "expr temp" "maybe param" "maybe type" "temp"
    (759416 'move' call_tmp[759413](759400 '.' this[759396] c"chpl_p"))
    (759411 'move' ret[759406](759410 'addr of' call_tmp[759413]))
    (759408 return ret[759406])
  }
  function _shared[32](?).chpl_pn[759418](arg _mt[759420]:_MT[238], ref arg this[759422]:_shared[32](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[759432] "RVV" "temp"
    unknown call_tmp[759439] "expr temp" "maybe param" "maybe type" "temp"
    (759442 'move' call_tmp[759439](759426 '.' this[759422] c"chpl_pn"))
    (759437 'move' ret[759432](759436 'addr of' call_tmp[759439]))
    (759434 return ret[759432])
  }
  function _shared[32](?).writeThis[759444](arg _mt[759448]:_MT[238], arg this[759446]:_shared[32](?), arg f[759447]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (759457 call(759453 call (partial) readWriteThis _mt[243] this[759446]) f[759447])
    (759460 return _void[55])
  }
  function _shared[32](?).readThis[759464](arg _mt[759468]:_MT[238], arg this[759466]:_shared[32](?), arg f[759467]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (759476 call(759472 call (partial) readWriteThis _mt[243] this[759466]) f[759467])
    (759480 return _void[55])
  }
  function chpl_fields_are_comparable[759496](arg _arg1[759498]:_shared[32](?), arg _arg2[759499]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[759528]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[759535] "expr temp" "maybe param" "maybe type" "temp"
    (759538 'move' call_tmp[759535](759502 call chpl_p _mt[243] _arg1[759498]))
    unknown call_tmp[759540] "expr temp" "maybe param" "maybe type" "temp"
    (759543 'move' call_tmp[759540](759506 call chpl_p _mt[243] _arg2[759499]))
    unknown call_tmp[759545] "expr temp" "maybe param" "maybe type" "temp"
    (759548 'move' call_tmp[759545](759510 'call resolves' c"==" call_tmp[759535] call_tmp[759540]))
    unknown call_tmp[759550] "expr temp" "maybe param" "maybe type" "temp"
    (759553 'move' call_tmp[759550](759512 call chpl_pn _mt[243] _arg1[759498]))
    unknown call_tmp[759555] "expr temp" "maybe param" "maybe type" "temp"
    (759558 'move' call_tmp[759555](759516 call chpl_pn _mt[243] _arg2[759499]))
    unknown call_tmp[759560] "expr temp" "maybe param" "maybe type" "temp"
    (759563 'move' call_tmp[759560](759520 'call resolves' c"==" call_tmp[759550] call_tmp[759555]))
    unknown call_tmp[759565] "expr temp" "maybe param" "maybe type" "temp"
    (759568 'move' call_tmp[759565](759522 '&' call_tmp[759545] call_tmp[759560]))
    (759533 'move' ret[759528](759532 'deref' call_tmp[759565]))
    (759530 return ret[759528])
  }
  function ==[759484](arg _arg1[759486]:_shared[32](?), arg _arg2[759487]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[759612]:bool[10] "RVV" "temp"
    unknown call_tmp[759629] "expr temp" "maybe param" "maybe type" "temp"
    (759632 'move' call_tmp[759629](759576 call chpl_p _mt[243] _arg1[759486]))
    unknown call_tmp[759634] "expr temp" "maybe param" "maybe type" "temp"
    (759637 'move' call_tmp[759634](759580 call chpl_p _mt[243] _arg2[759487]))
    unknown call_tmp[759639] "expr temp" "maybe param" "maybe type" "temp"
    (759642 'move' call_tmp[759639](759584 call != call_tmp[759629] call_tmp[759634]))
    if call_tmp[759639]
    {
      (759617 'move' ret[759612](759616 'deref' 0))
      gotoReturn _end_==[759610] _end_==[759610]
    }
    unknown call_tmp[759644] "expr temp" "maybe param" "maybe type" "temp"
    (759647 'move' call_tmp[759644](759590 call chpl_pn _mt[243] _arg1[759486]))
    unknown call_tmp[759649] "expr temp" "maybe param" "maybe type" "temp"
    (759652 'move' call_tmp[759649](759594 call chpl_pn _mt[243] _arg2[759487]))
    unknown call_tmp[759654] "expr temp" "maybe param" "maybe type" "temp"
    (759657 'move' call_tmp[759654](759598 call != call_tmp[759644] call_tmp[759649]))
    if call_tmp[759654]
    {
      (759622 'move' ret[759612](759621 'deref' 0))
      gotoReturn _end_==[759610] _end_==[759610]
    }
    (759627 'move' ret[759612](759626 'deref' 1))
    label _end_==[759610]
    (759614 return ret[759612])
  }
  where {
    unknown call_tmp[759659] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759662 'move' call_tmp[759659](759490 'typeof' _arg1[759486]))
    unknown call_tmp[759664] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759667 'move' call_tmp[759664](759492 'typeof' _arg2[759487]))
    unknown call_tmp[759669] "expr temp" "maybe param" "maybe type" "temp"
    (759672 'move' call_tmp[759669](759494 call == call_tmp[759659] call_tmp[759664]))
    unknown call_tmp[759674] "expr temp" "maybe param" "maybe type" "temp"
    (759677 'move' call_tmp[759674](759570 call chpl_fields_are_comparable[759496] _arg1[759486] _arg2[759487]))
    (759574 '&' call_tmp[759669] call_tmp[759674])
  }
  function chpl_fields_are_comparable[759691](arg _arg1[759693]:_shared[32](?), arg _arg2[759694]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[759723]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[759730] "expr temp" "maybe param" "maybe type" "temp"
    (759733 'move' call_tmp[759730](759697 call chpl_p _mt[243] _arg1[759693]))
    unknown call_tmp[759735] "expr temp" "maybe param" "maybe type" "temp"
    (759738 'move' call_tmp[759735](759701 call chpl_p _mt[243] _arg2[759694]))
    unknown call_tmp[759740] "expr temp" "maybe param" "maybe type" "temp"
    (759743 'move' call_tmp[759740](759705 'call resolves' c"!=" call_tmp[759730] call_tmp[759735]))
    unknown call_tmp[759745] "expr temp" "maybe param" "maybe type" "temp"
    (759748 'move' call_tmp[759745](759707 call chpl_pn _mt[243] _arg1[759693]))
    unknown call_tmp[759750] "expr temp" "maybe param" "maybe type" "temp"
    (759753 'move' call_tmp[759750](759711 call chpl_pn _mt[243] _arg2[759694]))
    unknown call_tmp[759755] "expr temp" "maybe param" "maybe type" "temp"
    (759758 'move' call_tmp[759755](759715 'call resolves' c"!=" call_tmp[759745] call_tmp[759750]))
    unknown call_tmp[759760] "expr temp" "maybe param" "maybe type" "temp"
    (759763 'move' call_tmp[759760](759717 '&' call_tmp[759740] call_tmp[759755]))
    (759728 'move' ret[759723](759727 'deref' call_tmp[759760]))
    (759725 return ret[759723])
  }
  function !=[759679](arg _arg1[759681]:_shared[32](?), arg _arg2[759682]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[759807]:bool[10] "RVV" "temp"
    unknown call_tmp[759824] "expr temp" "maybe param" "maybe type" "temp"
    (759827 'move' call_tmp[759824](759771 call chpl_p _mt[243] _arg1[759681]))
    unknown call_tmp[759829] "expr temp" "maybe param" "maybe type" "temp"
    (759832 'move' call_tmp[759829](759775 call chpl_p _mt[243] _arg2[759682]))
    unknown call_tmp[759834] "expr temp" "maybe param" "maybe type" "temp"
    (759837 'move' call_tmp[759834](759779 call != call_tmp[759824] call_tmp[759829]))
    if call_tmp[759834]
    {
      (759812 'move' ret[759807](759811 'deref' 1))
      gotoReturn _end_!=[759805] _end_!=[759805]
    }
    unknown call_tmp[759839] "expr temp" "maybe param" "maybe type" "temp"
    (759842 'move' call_tmp[759839](759785 call chpl_pn _mt[243] _arg1[759681]))
    unknown call_tmp[759844] "expr temp" "maybe param" "maybe type" "temp"
    (759847 'move' call_tmp[759844](759789 call chpl_pn _mt[243] _arg2[759682]))
    unknown call_tmp[759849] "expr temp" "maybe param" "maybe type" "temp"
    (759852 'move' call_tmp[759849](759793 call != call_tmp[759839] call_tmp[759844]))
    if call_tmp[759849]
    {
      (759817 'move' ret[759807](759816 'deref' 1))
      gotoReturn _end_!=[759805] _end_!=[759805]
    }
    (759822 'move' ret[759807](759821 'deref' 0))
    label _end_!=[759805]
    (759809 return ret[759807])
  }
  where {
    unknown call_tmp[759854] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759857 'move' call_tmp[759854](759685 'typeof' _arg1[759681]))
    unknown call_tmp[759859] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759862 'move' call_tmp[759859](759687 'typeof' _arg2[759682]))
    unknown call_tmp[759864] "expr temp" "maybe param" "maybe type" "temp"
    (759867 'move' call_tmp[759864](759689 call == call_tmp[759854] call_tmp[759859]))
    unknown call_tmp[759869] "expr temp" "maybe param" "maybe type" "temp"
    (759872 'move' call_tmp[759869](759765 call chpl_fields_are_comparable[759691] _arg1[759681] _arg2[759682]))
    (759769 '&' call_tmp[759864] call_tmp[759869])
  }
  function chpl_fields_are_comparable[759886](arg _arg1[759888]:_shared[32](?), arg _arg2[759889]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[759918]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[759925] "expr temp" "maybe param" "maybe type" "temp"
    (759928 'move' call_tmp[759925](759892 call chpl_p _mt[243] _arg1[759888]))
    unknown call_tmp[759930] "expr temp" "maybe param" "maybe type" "temp"
    (759933 'move' call_tmp[759930](759896 call chpl_p _mt[243] _arg2[759889]))
    unknown call_tmp[759935] "expr temp" "maybe param" "maybe type" "temp"
    (759938 'move' call_tmp[759935](759900 'call resolves' c"<" call_tmp[759925] call_tmp[759930]))
    unknown call_tmp[759940] "expr temp" "maybe param" "maybe type" "temp"
    (759943 'move' call_tmp[759940](759902 call chpl_pn _mt[243] _arg1[759888]))
    unknown call_tmp[759945] "expr temp" "maybe param" "maybe type" "temp"
    (759948 'move' call_tmp[759945](759906 call chpl_pn _mt[243] _arg2[759889]))
    unknown call_tmp[759950] "expr temp" "maybe param" "maybe type" "temp"
    (759953 'move' call_tmp[759950](759910 'call resolves' c"<" call_tmp[759940] call_tmp[759945]))
    unknown call_tmp[759955] "expr temp" "maybe param" "maybe type" "temp"
    (759958 'move' call_tmp[759955](759912 '&' call_tmp[759935] call_tmp[759950]))
    (759923 'move' ret[759918](759922 'deref' call_tmp[759955]))
    (759920 return ret[759918])
  }
  function <[759874](arg _arg1[759876]:_shared[32](?), arg _arg2[759877]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[760032]:bool[10] "RVV" "temp"
    unknown call_tmp[760059] "expr temp" "maybe param" "maybe type" "temp"
    (760062 'move' call_tmp[760059](759966 call chpl_p _mt[243] _arg1[759876]))
    unknown call_tmp[760064] "expr temp" "maybe param" "maybe type" "temp"
    (760067 'move' call_tmp[760064](759970 call chpl_p _mt[243] _arg2[759877]))
    unknown call_tmp[760069] "expr temp" "maybe param" "maybe type" "temp"
    (760072 'move' call_tmp[760069](759974 call < call_tmp[760059] call_tmp[760064]))
    if call_tmp[760069]
    {
      (760037 'move' ret[760032](760036 'deref' 1))
      gotoReturn _end_<[760030] _end_<[760030]
    }
    unknown call_tmp[760074] "expr temp" "maybe param" "maybe type" "temp"
    (760077 'move' call_tmp[760074](759980 call chpl_p _mt[243] _arg1[759876]))
    unknown call_tmp[760079] "expr temp" "maybe param" "maybe type" "temp"
    (760082 'move' call_tmp[760079](759984 call chpl_p _mt[243] _arg2[759877]))
    unknown call_tmp[760084] "expr temp" "maybe param" "maybe type" "temp"
    (760087 'move' call_tmp[760084](759988 call > call_tmp[760074] call_tmp[760079]))
    if call_tmp[760084]
    {
      (760042 'move' ret[760032](760041 'deref' 0))
      gotoReturn _end_<[760030] _end_<[760030]
    }
    unknown call_tmp[760089] "expr temp" "maybe param" "maybe type" "temp"
    (760092 'move' call_tmp[760089](759994 call chpl_pn _mt[243] _arg1[759876]))
    unknown call_tmp[760094] "expr temp" "maybe param" "maybe type" "temp"
    (760097 'move' call_tmp[760094](759998 call chpl_pn _mt[243] _arg2[759877]))
    unknown call_tmp[760099] "expr temp" "maybe param" "maybe type" "temp"
    (760102 'move' call_tmp[760099](760002 call < call_tmp[760089] call_tmp[760094]))
    if call_tmp[760099]
    {
      (760047 'move' ret[760032](760046 'deref' 1))
      gotoReturn _end_<[760030] _end_<[760030]
    }
    unknown call_tmp[760104] "expr temp" "maybe param" "maybe type" "temp"
    (760107 'move' call_tmp[760104](760008 call chpl_pn _mt[243] _arg1[759876]))
    unknown call_tmp[760109] "expr temp" "maybe param" "maybe type" "temp"
    (760112 'move' call_tmp[760109](760012 call chpl_pn _mt[243] _arg2[759877]))
    unknown call_tmp[760114] "expr temp" "maybe param" "maybe type" "temp"
    (760117 'move' call_tmp[760114](760016 call > call_tmp[760104] call_tmp[760109]))
    if call_tmp[760114]
    {
      (760052 'move' ret[760032](760051 'deref' 0))
      gotoReturn _end_<[760030] _end_<[760030]
    }
    (760057 'move' ret[760032](760056 'deref' 0))
    label _end_<[760030]
    (760034 return ret[760032])
  }
  where {
    unknown call_tmp[760119] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760122 'move' call_tmp[760119](759880 'typeof' _arg1[759876]))
    unknown call_tmp[760124] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760127 'move' call_tmp[760124](759882 'typeof' _arg2[759877]))
    unknown call_tmp[760129] "expr temp" "maybe param" "maybe type" "temp"
    (760132 'move' call_tmp[760129](759884 call == call_tmp[760119] call_tmp[760124]))
    unknown call_tmp[760134] "expr temp" "maybe param" "maybe type" "temp"
    (760137 'move' call_tmp[760134](759960 call chpl_fields_are_comparable[759886] _arg1[759876] _arg2[759877]))
    (759964 '&' call_tmp[760129] call_tmp[760134])
  }
  function chpl_fields_are_comparable[760151](arg _arg1[760153]:_shared[32](?), arg _arg2[760154]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[760183]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[760190] "expr temp" "maybe param" "maybe type" "temp"
    (760193 'move' call_tmp[760190](760157 call chpl_p _mt[243] _arg1[760153]))
    unknown call_tmp[760195] "expr temp" "maybe param" "maybe type" "temp"
    (760198 'move' call_tmp[760195](760161 call chpl_p _mt[243] _arg2[760154]))
    unknown call_tmp[760200] "expr temp" "maybe param" "maybe type" "temp"
    (760203 'move' call_tmp[760200](760165 'call resolves' c"<=" call_tmp[760190] call_tmp[760195]))
    unknown call_tmp[760205] "expr temp" "maybe param" "maybe type" "temp"
    (760208 'move' call_tmp[760205](760167 call chpl_pn _mt[243] _arg1[760153]))
    unknown call_tmp[760210] "expr temp" "maybe param" "maybe type" "temp"
    (760213 'move' call_tmp[760210](760171 call chpl_pn _mt[243] _arg2[760154]))
    unknown call_tmp[760215] "expr temp" "maybe param" "maybe type" "temp"
    (760218 'move' call_tmp[760215](760175 'call resolves' c"<=" call_tmp[760205] call_tmp[760210]))
    unknown call_tmp[760220] "expr temp" "maybe param" "maybe type" "temp"
    (760223 'move' call_tmp[760220](760177 '&' call_tmp[760200] call_tmp[760215]))
    (760188 'move' ret[760183](760187 'deref' call_tmp[760220]))
    (760185 return ret[760183])
  }
  function <=[760139](arg _arg1[760141]:_shared[32](?), arg _arg2[760142]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[760297]:bool[10] "RVV" "temp"
    unknown call_tmp[760324] "expr temp" "maybe param" "maybe type" "temp"
    (760327 'move' call_tmp[760324](760231 call chpl_p _mt[243] _arg1[760141]))
    unknown call_tmp[760329] "expr temp" "maybe param" "maybe type" "temp"
    (760332 'move' call_tmp[760329](760235 call chpl_p _mt[243] _arg2[760142]))
    unknown call_tmp[760334] "expr temp" "maybe param" "maybe type" "temp"
    (760337 'move' call_tmp[760334](760239 call < call_tmp[760324] call_tmp[760329]))
    if call_tmp[760334]
    {
      (760302 'move' ret[760297](760301 'deref' 1))
      gotoReturn _end_<=[760295] _end_<=[760295]
    }
    unknown call_tmp[760339] "expr temp" "maybe param" "maybe type" "temp"
    (760342 'move' call_tmp[760339](760245 call chpl_p _mt[243] _arg1[760141]))
    unknown call_tmp[760344] "expr temp" "maybe param" "maybe type" "temp"
    (760347 'move' call_tmp[760344](760249 call chpl_p _mt[243] _arg2[760142]))
    unknown call_tmp[760349] "expr temp" "maybe param" "maybe type" "temp"
    (760352 'move' call_tmp[760349](760253 call > call_tmp[760339] call_tmp[760344]))
    if call_tmp[760349]
    {
      (760307 'move' ret[760297](760306 'deref' 0))
      gotoReturn _end_<=[760295] _end_<=[760295]
    }
    unknown call_tmp[760354] "expr temp" "maybe param" "maybe type" "temp"
    (760357 'move' call_tmp[760354](760259 call chpl_pn _mt[243] _arg1[760141]))
    unknown call_tmp[760359] "expr temp" "maybe param" "maybe type" "temp"
    (760362 'move' call_tmp[760359](760263 call chpl_pn _mt[243] _arg2[760142]))
    unknown call_tmp[760364] "expr temp" "maybe param" "maybe type" "temp"
    (760367 'move' call_tmp[760364](760267 call < call_tmp[760354] call_tmp[760359]))
    if call_tmp[760364]
    {
      (760312 'move' ret[760297](760311 'deref' 1))
      gotoReturn _end_<=[760295] _end_<=[760295]
    }
    unknown call_tmp[760369] "expr temp" "maybe param" "maybe type" "temp"
    (760372 'move' call_tmp[760369](760273 call chpl_pn _mt[243] _arg1[760141]))
    unknown call_tmp[760374] "expr temp" "maybe param" "maybe type" "temp"
    (760377 'move' call_tmp[760374](760277 call chpl_pn _mt[243] _arg2[760142]))
    unknown call_tmp[760379] "expr temp" "maybe param" "maybe type" "temp"
    (760382 'move' call_tmp[760379](760281 call > call_tmp[760369] call_tmp[760374]))
    if call_tmp[760379]
    {
      (760317 'move' ret[760297](760316 'deref' 0))
      gotoReturn _end_<=[760295] _end_<=[760295]
    }
    (760322 'move' ret[760297](760321 'deref' 1))
    label _end_<=[760295]
    (760299 return ret[760297])
  }
  where {
    unknown call_tmp[760384] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760387 'move' call_tmp[760384](760145 'typeof' _arg1[760141]))
    unknown call_tmp[760389] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760392 'move' call_tmp[760389](760147 'typeof' _arg2[760142]))
    unknown call_tmp[760394] "expr temp" "maybe param" "maybe type" "temp"
    (760397 'move' call_tmp[760394](760149 call == call_tmp[760384] call_tmp[760389]))
    unknown call_tmp[760399] "expr temp" "maybe param" "maybe type" "temp"
    (760402 'move' call_tmp[760399](760225 call chpl_fields_are_comparable[760151] _arg1[760141] _arg2[760142]))
    (760229 '&' call_tmp[760394] call_tmp[760399])
  }
  function chpl_fields_are_comparable[760416](arg _arg1[760418]:_shared[32](?), arg _arg2[760419]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[760448]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[760455] "expr temp" "maybe param" "maybe type" "temp"
    (760458 'move' call_tmp[760455](760422 call chpl_p _mt[243] _arg1[760418]))
    unknown call_tmp[760460] "expr temp" "maybe param" "maybe type" "temp"
    (760463 'move' call_tmp[760460](760426 call chpl_p _mt[243] _arg2[760419]))
    unknown call_tmp[760465] "expr temp" "maybe param" "maybe type" "temp"
    (760468 'move' call_tmp[760465](760430 'call resolves' c">" call_tmp[760455] call_tmp[760460]))
    unknown call_tmp[760470] "expr temp" "maybe param" "maybe type" "temp"
    (760473 'move' call_tmp[760470](760432 call chpl_pn _mt[243] _arg1[760418]))
    unknown call_tmp[760475] "expr temp" "maybe param" "maybe type" "temp"
    (760478 'move' call_tmp[760475](760436 call chpl_pn _mt[243] _arg2[760419]))
    unknown call_tmp[760480] "expr temp" "maybe param" "maybe type" "temp"
    (760483 'move' call_tmp[760480](760440 'call resolves' c">" call_tmp[760470] call_tmp[760475]))
    unknown call_tmp[760485] "expr temp" "maybe param" "maybe type" "temp"
    (760488 'move' call_tmp[760485](760442 '&' call_tmp[760465] call_tmp[760480]))
    (760453 'move' ret[760448](760452 'deref' call_tmp[760485]))
    (760450 return ret[760448])
  }
  function >[760404](arg _arg1[760406]:_shared[32](?), arg _arg2[760407]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[760562]:bool[10] "RVV" "temp"
    unknown call_tmp[760589] "expr temp" "maybe param" "maybe type" "temp"
    (760592 'move' call_tmp[760589](760496 call chpl_p _mt[243] _arg1[760406]))
    unknown call_tmp[760594] "expr temp" "maybe param" "maybe type" "temp"
    (760597 'move' call_tmp[760594](760500 call chpl_p _mt[243] _arg2[760407]))
    unknown call_tmp[760599] "expr temp" "maybe param" "maybe type" "temp"
    (760602 'move' call_tmp[760599](760504 call > call_tmp[760589] call_tmp[760594]))
    if call_tmp[760599]
    {
      (760567 'move' ret[760562](760566 'deref' 1))
      gotoReturn _end_>[760560] _end_>[760560]
    }
    unknown call_tmp[760604] "expr temp" "maybe param" "maybe type" "temp"
    (760607 'move' call_tmp[760604](760510 call chpl_p _mt[243] _arg1[760406]))
    unknown call_tmp[760609] "expr temp" "maybe param" "maybe type" "temp"
    (760612 'move' call_tmp[760609](760514 call chpl_p _mt[243] _arg2[760407]))
    unknown call_tmp[760614] "expr temp" "maybe param" "maybe type" "temp"
    (760617 'move' call_tmp[760614](760518 call < call_tmp[760604] call_tmp[760609]))
    if call_tmp[760614]
    {
      (760572 'move' ret[760562](760571 'deref' 0))
      gotoReturn _end_>[760560] _end_>[760560]
    }
    unknown call_tmp[760619] "expr temp" "maybe param" "maybe type" "temp"
    (760622 'move' call_tmp[760619](760524 call chpl_pn _mt[243] _arg1[760406]))
    unknown call_tmp[760624] "expr temp" "maybe param" "maybe type" "temp"
    (760627 'move' call_tmp[760624](760528 call chpl_pn _mt[243] _arg2[760407]))
    unknown call_tmp[760629] "expr temp" "maybe param" "maybe type" "temp"
    (760632 'move' call_tmp[760629](760532 call > call_tmp[760619] call_tmp[760624]))
    if call_tmp[760629]
    {
      (760577 'move' ret[760562](760576 'deref' 1))
      gotoReturn _end_>[760560] _end_>[760560]
    }
    unknown call_tmp[760634] "expr temp" "maybe param" "maybe type" "temp"
    (760637 'move' call_tmp[760634](760538 call chpl_pn _mt[243] _arg1[760406]))
    unknown call_tmp[760639] "expr temp" "maybe param" "maybe type" "temp"
    (760642 'move' call_tmp[760639](760542 call chpl_pn _mt[243] _arg2[760407]))
    unknown call_tmp[760644] "expr temp" "maybe param" "maybe type" "temp"
    (760647 'move' call_tmp[760644](760546 call < call_tmp[760634] call_tmp[760639]))
    if call_tmp[760644]
    {
      (760582 'move' ret[760562](760581 'deref' 0))
      gotoReturn _end_>[760560] _end_>[760560]
    }
    (760587 'move' ret[760562](760586 'deref' 0))
    label _end_>[760560]
    (760564 return ret[760562])
  }
  where {
    unknown call_tmp[760649] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760652 'move' call_tmp[760649](760410 'typeof' _arg1[760406]))
    unknown call_tmp[760654] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760657 'move' call_tmp[760654](760412 'typeof' _arg2[760407]))
    unknown call_tmp[760659] "expr temp" "maybe param" "maybe type" "temp"
    (760662 'move' call_tmp[760659](760414 call == call_tmp[760649] call_tmp[760654]))
    unknown call_tmp[760664] "expr temp" "maybe param" "maybe type" "temp"
    (760667 'move' call_tmp[760664](760490 call chpl_fields_are_comparable[760416] _arg1[760406] _arg2[760407]))
    (760494 '&' call_tmp[760659] call_tmp[760664])
  }
  function chpl_fields_are_comparable[760681](arg _arg1[760683]:_shared[32](?), arg _arg2[760684]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[760713]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[760720] "expr temp" "maybe param" "maybe type" "temp"
    (760723 'move' call_tmp[760720](760687 call chpl_p _mt[243] _arg1[760683]))
    unknown call_tmp[760725] "expr temp" "maybe param" "maybe type" "temp"
    (760728 'move' call_tmp[760725](760691 call chpl_p _mt[243] _arg2[760684]))
    unknown call_tmp[760730] "expr temp" "maybe param" "maybe type" "temp"
    (760733 'move' call_tmp[760730](760695 'call resolves' c">=" call_tmp[760720] call_tmp[760725]))
    unknown call_tmp[760735] "expr temp" "maybe param" "maybe type" "temp"
    (760738 'move' call_tmp[760735](760697 call chpl_pn _mt[243] _arg1[760683]))
    unknown call_tmp[760740] "expr temp" "maybe param" "maybe type" "temp"
    (760743 'move' call_tmp[760740](760701 call chpl_pn _mt[243] _arg2[760684]))
    unknown call_tmp[760745] "expr temp" "maybe param" "maybe type" "temp"
    (760748 'move' call_tmp[760745](760705 'call resolves' c">=" call_tmp[760735] call_tmp[760740]))
    unknown call_tmp[760750] "expr temp" "maybe param" "maybe type" "temp"
    (760753 'move' call_tmp[760750](760707 '&' call_tmp[760730] call_tmp[760745]))
    (760718 'move' ret[760713](760717 'deref' call_tmp[760750]))
    (760715 return ret[760713])
  }
  function >=[760669](arg _arg1[760671]:_shared[32](?), arg _arg2[760672]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[760827]:bool[10] "RVV" "temp"
    unknown call_tmp[760854] "expr temp" "maybe param" "maybe type" "temp"
    (760857 'move' call_tmp[760854](760761 call chpl_p _mt[243] _arg1[760671]))
    unknown call_tmp[760859] "expr temp" "maybe param" "maybe type" "temp"
    (760862 'move' call_tmp[760859](760765 call chpl_p _mt[243] _arg2[760672]))
    unknown call_tmp[760864] "expr temp" "maybe param" "maybe type" "temp"
    (760867 'move' call_tmp[760864](760769 call > call_tmp[760854] call_tmp[760859]))
    if call_tmp[760864]
    {
      (760832 'move' ret[760827](760831 'deref' 1))
      gotoReturn _end_>=[760825] _end_>=[760825]
    }
    unknown call_tmp[760869] "expr temp" "maybe param" "maybe type" "temp"
    (760872 'move' call_tmp[760869](760775 call chpl_p _mt[243] _arg1[760671]))
    unknown call_tmp[760874] "expr temp" "maybe param" "maybe type" "temp"
    (760877 'move' call_tmp[760874](760779 call chpl_p _mt[243] _arg2[760672]))
    unknown call_tmp[760879] "expr temp" "maybe param" "maybe type" "temp"
    (760882 'move' call_tmp[760879](760783 call < call_tmp[760869] call_tmp[760874]))
    if call_tmp[760879]
    {
      (760837 'move' ret[760827](760836 'deref' 0))
      gotoReturn _end_>=[760825] _end_>=[760825]
    }
    unknown call_tmp[760884] "expr temp" "maybe param" "maybe type" "temp"
    (760887 'move' call_tmp[760884](760789 call chpl_pn _mt[243] _arg1[760671]))
    unknown call_tmp[760889] "expr temp" "maybe param" "maybe type" "temp"
    (760892 'move' call_tmp[760889](760793 call chpl_pn _mt[243] _arg2[760672]))
    unknown call_tmp[760894] "expr temp" "maybe param" "maybe type" "temp"
    (760897 'move' call_tmp[760894](760797 call > call_tmp[760884] call_tmp[760889]))
    if call_tmp[760894]
    {
      (760842 'move' ret[760827](760841 'deref' 1))
      gotoReturn _end_>=[760825] _end_>=[760825]
    }
    unknown call_tmp[760899] "expr temp" "maybe param" "maybe type" "temp"
    (760902 'move' call_tmp[760899](760803 call chpl_pn _mt[243] _arg1[760671]))
    unknown call_tmp[760904] "expr temp" "maybe param" "maybe type" "temp"
    (760907 'move' call_tmp[760904](760807 call chpl_pn _mt[243] _arg2[760672]))
    unknown call_tmp[760909] "expr temp" "maybe param" "maybe type" "temp"
    (760912 'move' call_tmp[760909](760811 call < call_tmp[760899] call_tmp[760904]))
    if call_tmp[760909]
    {
      (760847 'move' ret[760827](760846 'deref' 0))
      gotoReturn _end_>=[760825] _end_>=[760825]
    }
    (760852 'move' ret[760827](760851 'deref' 1))
    label _end_>=[760825]
    (760829 return ret[760827])
  }
  where {
    unknown call_tmp[760914] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760917 'move' call_tmp[760914](760675 'typeof' _arg1[760671]))
    unknown call_tmp[760919] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760922 'move' call_tmp[760919](760677 'typeof' _arg2[760672]))
    unknown call_tmp[760924] "expr temp" "maybe param" "maybe type" "temp"
    (760927 'move' call_tmp[760924](760679 call == call_tmp[760914] call_tmp[760919]))
    unknown call_tmp[760929] "expr temp" "maybe param" "maybe type" "temp"
    (760932 'move' call_tmp[760929](760755 call chpl_fields_are_comparable[760681] _arg1[760671] _arg2[760672]))
    (760759 '&' call_tmp[760924] call_tmp[760929])
  }
  function chpl__defaultHash[760934](arg r[760936]:_shared[32](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[760967] "RVV" "temp"
    unknown call_tmp[760974] "expr temp" "maybe param" "maybe type" "temp"
    (760977 'move' call_tmp[760974](760953 call chpl_pn _mt[243] r[760936]))
    unknown call_tmp[760979] "expr temp" "maybe param" "maybe type" "temp"
    (760982 'move' call_tmp[760979](760957 call chpl__defaultHash call_tmp[760974]))
    unknown call_tmp[760984] "expr temp" "maybe param" "maybe type" "temp"
    (760987 'move' call_tmp[760984](760944 call chpl_p _mt[243] r[760936]))
    unknown call_tmp[760989] "expr temp" "maybe param" "maybe type" "temp"
    (760992 'move' call_tmp[760989](760948 call chpl__defaultHash call_tmp[760984]))
    unknown call_tmp[760994] "expr temp" "maybe param" "maybe type" "temp"
    (760997 'move' call_tmp[760994](760938 call chpl_t _mt[243] r[760936]))
    unknown call_tmp[760999] "expr temp" "maybe param" "maybe type" "temp"
    (761002 'move' call_tmp[760999](760942 call chpl__defaultHash call_tmp[760994]))
    unknown call_tmp[761004] "expr temp" "maybe param" "maybe type" "temp"
    (761007 'move' call_tmp[761004](760950 call chpl__defaultHashCombine call_tmp[760989] call_tmp[760999] 2))
    unknown call_tmp[761009] "expr temp" "maybe param" "maybe type" "temp"
    (761012 'move' call_tmp[761009](760959 call chpl__defaultHashCombine call_tmp[760979] call_tmp[761004] 3))
    (760972 'move' ret[760967](760971 'deref' call_tmp[761009]))
    (760969 return ret[760967])
  }
  type _shared[32](?) unknown chpl_t[41767] "no doc" "type variable" unknown chpl_p[41774] "no doc" "owned"(41773 'to nilable class' chpl_t[41767]) val chpl_pn[41790]:unmanaged ReferenceCount?[415377] "no doc" "owned" unmanaged ReferenceCount?[415377] forwarding ( )
  type shared[415384](?)
  type shared?[415380](?)
  function =[43049](ref arg lhs[43046]:_shared[32](?), arg rhs[43052]:_shared[32](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[605227] "expr temp" "maybe param" "maybe type" "temp"
    (605230 'move' call_tmp[605227](43068 call chpl_pn _mt[243] rhs[43052]))
    unknown call_tmp[605232] "expr temp" "maybe param" "maybe type" "temp"
    (605235 'move' call_tmp[605232](43072 call != call_tmp[605227] nil[44]))
    unknown call_tmp[605237] "expr temp" "maybe param" "maybe type" "temp"
    (605240 'move' call_tmp[605237](43086 call _cond_test call_tmp[605232]))
    if call_tmp[605237]
    {
      unknown call_tmp[605244] "expr temp" "maybe param" "maybe type" "temp"
      (605247 'move' call_tmp[605244](43075 call chpl_pn _mt[243] rhs[43052]))
      unknown call_tmp[605249] "expr temp" "maybe param" "maybe type" "temp"
      (605252 'move' call_tmp[605249](43078 call postfix! call_tmp[605244]))
      (43084 call(43080 call (partial) retain _mt[243] call_tmp[605249]))
    }
    unknown call_tmp[605258] "maybe param" "maybe type" "temp"
    (605261 'move' call_tmp[605258](43093 call chpl_p _mt[243] rhs[43052]))
    const chpl_p_tmp[43096] "dead at end of block" "const" "insert auto destroy"
    (540571 'init var' chpl_p_tmp[43096] call_tmp[605258])
    (43099 'end of statement')
    unknown call_tmp[605265] "maybe param" "maybe type" "temp"
    (605268 'move' call_tmp[605265](43101 call chpl_pn _mt[243] rhs[43052]))
    const chpl_pn_tmp[43104] "dead at end of block" "const" "insert auto destroy"
    (540573 'init var' chpl_pn_tmp[43104] call_tmp[605265])
    (43107 'end of statement')
    (43115 call(43111 call (partial) doClear _mt[243] lhs[43046]))
    (474200 'end of statement')
    unknown call_tmp[605274] "expr temp" "maybe param" "maybe type" "temp"
    (605277 'move' call_tmp[605274](43118 call chpl_p _mt[243] lhs[43046]))
    (43122 call = call_tmp[605274] chpl_p_tmp[43096])
    (474201 'end of statement' chpl_p_tmp[43096])
    unknown call_tmp[605281] "expr temp" "maybe param" "maybe type" "temp"
    (605284 'move' call_tmp[605281](43126 call chpl_pn _mt[243] lhs[43046]))
    (43130 call = call_tmp[605281] chpl_pn_tmp[43104])
    (474203 'end of statement' chpl_pn_tmp[43104])
    (505435 return _void[55])
  }
  where {
    unknown tmp[418332] "maybe param" "temp"
    (418343 'move' tmp[418332](43058 call isNonNilableClass lhs[43046]))
    unknown call_tmp[605286] "expr temp" "maybe param" "maybe type" "temp"
    (605289 'move' call_tmp[605286](418345 call _cond_invalid tmp[418332]))
    if call_tmp[605286]
    {
      (418348 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554201] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554202] "maybe param" "temp"
    unknown call_tmp[605291] "expr temp" "maybe param" "maybe type" "temp"
    (605294 'move' call_tmp[605291](418333 call isTrue tmp[418332]))
    (554207 'move' tmp[554202](554205 call _cond_test call_tmp[605291]))
    if tmp[554202]
    {
      unknown tmp[554209] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605296] "expr temp" "maybe param" "maybe type" "temp"
      (605299 'move' call_tmp[605296](43062 call isNilableClass rhs[43052]))
      (554211 'move' tmp[554209](418336 call isTrue call_tmp[605296]))
      (554216 'move' tmp[554201](554213 '_paramFoldLogical' tmp[554202] tmp[554209]))
    }
    {
      (554221 'move' tmp[554201](554218 '_paramFoldLogical' tmp[554202] 0))
    }
    (43065 call ! tmp[554201])
  }
  function =[43142](ref arg lhs[43139]:_shared[32](?), in arg rhs[43145]:_owned[30](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[605305] "expr temp" "maybe param" "maybe type" "temp"
    (605308 'move' call_tmp[605305](43169 call(43165 call (partial) release _mt[243] rhs[43145])))
    (43171 call(43161 call (partial) retain _mt[243] lhs[43139]) call_tmp[605305])
    (505437 return _void[55])
  }
  where {
    unknown tmp[418353] "maybe param" "temp"
    (418364 'move' tmp[418353](43151 call isNonNilableClass lhs[43139]))
    unknown call_tmp[605310] "expr temp" "maybe param" "maybe type" "temp"
    (605313 'move' call_tmp[605310](418366 call _cond_invalid tmp[418353]))
    if call_tmp[605310]
    {
      (418369 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554228] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554229] "maybe param" "temp"
    unknown call_tmp[605315] "expr temp" "maybe param" "maybe type" "temp"
    (605318 'move' call_tmp[605315](418354 call isTrue tmp[418353]))
    (554234 'move' tmp[554229](554232 call _cond_test call_tmp[605315]))
    if tmp[554229]
    {
      unknown tmp[554236] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605320] "expr temp" "maybe param" "maybe type" "temp"
      (605323 'move' call_tmp[605320](43155 call isNilableClass rhs[43145]))
      (554238 'move' tmp[554236](418357 call isTrue call_tmp[605320]))
      (554243 'move' tmp[554228](554240 '_paramFoldLogical' tmp[554229] tmp[554236]))
    }
    {
      (554248 'move' tmp[554228](554245 '_paramFoldLogical' tmp[554229] 0))
    }
    (43158 call ! tmp[554228])
  }
  function =[43183](ref arg lhs[43180]:_shared[32](?), arg rhs[43186]:_nilType[42]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (43200 call(43196 call (partial) clear _mt[243] lhs[43180]))
    (505439 return _void[55])
  }
  where {
    unknown call_tmp[605327] "expr temp" "maybe param" "maybe type" "temp"
    (605330 'move' call_tmp[605327](43192 call isNonNilableClass lhs[43180]))
    (43193 call ! call_tmp[605327])
  }
  function <=>[43212](ref arg lhs[43209]:_shared[32](?), ref arg rhs[43215]:_shared[32](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[605334] "expr temp" "maybe param" "maybe type" "temp"
    (605337 'move' call_tmp[605334](43219 call chpl_pn _mt[243] lhs[43209]))
    unknown call_tmp[605341] "expr temp" "maybe param" "maybe type" "temp"
    (605344 'move' call_tmp[605341](43223 call chpl_pn _mt[243] rhs[43215]))
    (43226 call <=> call_tmp[605334] call_tmp[605341])
    (474207 'end of statement')
    unknown call_tmp[605348] "expr temp" "maybe param" "maybe type" "temp"
    (605351 'move' call_tmp[605348](43231 call chpl_p _mt[243] lhs[43209]))
    unknown call_tmp[605355] "expr temp" "maybe param" "maybe type" "temp"
    (605358 'move' call_tmp[605355](43235 call chpl_p _mt[243] rhs[43215]))
    (43238 call <=> call_tmp[605348] call_tmp[605355])
    (505441 return _void[55])
  }
  function chpl__autoDestroy[43249](ref arg x[43246]:_shared[32](?)) : _unknown[51] "auto destroy fn" "no doc" "no return value for void"
  {
    unknown call_tmp[605360] "expr temp" "maybe param" "maybe type" "temp"
    (605363 'move' call_tmp[605360](43256 'deref' x[43246]))
    (43257 'call destructor' call_tmp[605360])
    (505443 return _void[55])
  }
  function _shared[32](?).readWriteThis[43267](arg _mt[43272]:_MT[238], arg this[43269]:_shared[32](?) :
  _shared[32](?), arg f[43265]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown call_tmp[605367] "expr temp" "maybe param" "maybe type" "temp"
    (605370 'move' call_tmp[605367](43276 call chpl_p _mt[243] this[43269]))
    (43279 call <~> f[43265] call_tmp[605367])
    (505445 return _void[55])
  }
  function _cast[43291](arg t[43288]:borrowed[211](?), const  ref arg x[43294]:_shared[32](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505449] "RVV" "temp"
    unknown call_tmp[605374] "expr temp" "maybe param" "maybe type" "temp"
    (605377 'move' call_tmp[605374](43312 call(43308 call (partial) borrow _mt[243] x[43294])))
    (505454 'move' ret[505449](505453 'deref' call_tmp[605374]))
    (505451 return ret[505449])
  }
  where {
    unknown call_tmp[605381] "expr temp" "maybe param" "maybe type" "temp"
    (605384 'move' call_tmp[605381](43301 call chpl_t _mt[243] x[43294]))
    (354201 'is_subtype' call_tmp[605381] t[43288])
  }
  function _cast[43328](arg t[43325]:shared?[415380](?), in arg x[43333]:shared[415384](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505458] "RVV" "temp"
    unknown call_tmp[605388] "expr temp" "maybe param" "maybe type" "temp"
    (605391 'move' call_tmp[605388](43356 call chpl_t _mt[243] t[43325]))
    unknown call_tmp[605393] "expr temp" "maybe param" "maybe type" "temp"
    (605396 'move' call_tmp[605393](43360 call _to_nilable call_tmp[605388]))
    unknown call_tmp[605398] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605401 'move' call_tmp[605398](747750 'new' _shared[32](?) 1 call_tmp[605393] x[43333]))
    (505463 'move' ret[505458](505462 'deref' call_tmp[605398]))
    (505460 return ret[505458])
  }
  where {
    unknown call_tmp[605405] "expr temp" "maybe param" "maybe type" "temp"
    (605408 'move' call_tmp[605405](43344 call chpl_t _mt[243] t[43325]))
    unknown call_tmp[605410] "expr temp" "maybe param" "maybe type" "temp"
    (605413 'move' call_tmp[605410](43348 call _to_nonnil call_tmp[605405]))
    unknown call_tmp[605417] "expr temp" "maybe param" "maybe type" "temp"
    (605420 'move' call_tmp[605417](43338 call chpl_t _mt[243] x[43333]))
    (354202 'is_subtype' call_tmp[605410] call_tmp[605417])
  }
  function _cast[43378](arg t[43375]:shared?[415380](?), in arg x[43384]:shared?[415380](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505467] "RVV" "temp"
    unknown call_tmp[605424] "expr temp" "maybe param" "maybe type" "temp"
    (605427 'move' call_tmp[605424](43403 call chpl_t _mt[243] t[43375]))
    unknown call_tmp[605429] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605432 'move' call_tmp[605429](747751 'new' _shared[32](?) 1 call_tmp[605424] x[43384]))
    (505472 'move' ret[505467](505471 'deref' call_tmp[605429]))
    (505469 return ret[505467])
  }
  where {
    unknown call_tmp[605436] "expr temp" "maybe param" "maybe type" "temp"
    (605439 'move' call_tmp[605436](43394 call chpl_t _mt[243] t[43375]))
    unknown call_tmp[605443] "expr temp" "maybe param" "maybe type" "temp"
    (605446 'move' call_tmp[605443](43389 call chpl_t _mt[243] x[43384]))
    (354203 'is_subtype' call_tmp[605436] call_tmp[605443])
  }
  function _cast[43422](arg t[43419]:shared[415384](?), in arg x[43427]:shared[415384](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505476] "RVV" "temp"
    unknown call_tmp[605450] "expr temp" "maybe param" "maybe type" "temp"
    (605453 'move' call_tmp[605450](43446 call chpl_t _mt[243] t[43419]))
    unknown call_tmp[605455] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605458 'move' call_tmp[605455](747752 'new' _shared[32](?) 1 call_tmp[605450] x[43427]))
    (505481 'move' ret[505476](505480 'deref' call_tmp[605455]))
    (505478 return ret[505476])
  }
  where {
    unknown call_tmp[605462] "expr temp" "maybe param" "maybe type" "temp"
    (605465 'move' call_tmp[605462](43437 call chpl_t _mt[243] t[43419]))
    unknown call_tmp[605469] "expr temp" "maybe param" "maybe type" "temp"
    (605472 'move' call_tmp[605469](43432 call chpl_t _mt[243] x[43427]))
    (354204 'is_subtype' call_tmp[605462] call_tmp[605469])
  }
  function _cast[43465](arg t[43462]:shared[415384](?), in arg x[43471]:shared?[415380](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505485] "RVV" "temp"
    unknown call_tmp[605476] "expr temp" "maybe param" "maybe type" "temp"
    (605479 'move' call_tmp[605476](43489 call chpl_p _mt[243] x[43471]))
    unknown call_tmp[605481] "expr temp" "maybe param" "maybe type" "temp"
    (605484 'move' call_tmp[605481](43493 call == call_tmp[605476] nil[44]))
    unknown call_tmp[605486] "expr temp" "maybe param" "maybe type" "temp"
    (605489 'move' call_tmp[605486](43504 call _cond_test call_tmp[605481]))
    if call_tmp[605486]
    {
      unknown call_tmp[605491] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (605494 'move' call_tmp[605491](747753 'new' NilClassError[368285](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[605496] "expr temp" "maybe param" "maybe type" "temp"
      (605499 'move' call_tmp[605496](468033 call chpl_fix_thrown_error call_tmp[605491]))
      (43501 'throw' call_tmp[605496])
    }
    unknown call_tmp[605503] "expr temp" "maybe param" "maybe type" "temp"
    (605506 'move' call_tmp[605503](43515 call chpl_t _mt[243] t[43462]))
    unknown call_tmp[605508] "expr temp" "maybe param" "maybe type" "temp"
    (605511 'move' call_tmp[605508](43519 call _to_nonnil call_tmp[605503]))
    unknown call_tmp[605513] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605516 'move' call_tmp[605513](747754 'new' _shared[32](?) 1 call_tmp[605508] x[43471]))
    (505490 'move' ret[505485](505489 'deref' call_tmp[605513]))
    (505487 return ret[505485])
  }
  where {
    unknown call_tmp[605520] "expr temp" "maybe param" "maybe type" "temp"
    (605523 'move' call_tmp[605520](43484 call chpl_t _mt[243] t[43462]))
    unknown call_tmp[605527] "expr temp" "maybe param" "maybe type" "temp"
    (605530 'move' call_tmp[605527](43477 call chpl_t _mt[243] x[43471]))
    unknown call_tmp[605532] "expr temp" "maybe param" "maybe type" "temp"
    (605535 'move' call_tmp[605532](43481 call _to_nonnil call_tmp[605527]))
    (354205 'is_subtype' call_tmp[605520] call_tmp[605532])
  }
  function _cast[43535](arg t[43532]:shared[415384](?), const  ref arg x[43541]:shared?[415380](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505494] "RVV" "temp"
    unknown call_tmp[605539] "expr temp" "maybe param" "maybe type" "temp"
    (605542 'move' call_tmp[605539](43559 call chpl_p _mt[243] x[43541]))
    unknown call_tmp[605544] "expr temp" "maybe param" "maybe type" "temp"
    (605547 'move' call_tmp[605544](43563 call == call_tmp[605539] nil[44]))
    unknown call_tmp[605549] "expr temp" "maybe param" "maybe type" "temp"
    (605552 'move' call_tmp[605549](43574 call _cond_test call_tmp[605544]))
    if call_tmp[605549]
    {
      unknown call_tmp[605554] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (605557 'move' call_tmp[605554](747755 'new' NilClassError[368285](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[605559] "expr temp" "maybe param" "maybe type" "temp"
      (605562 'move' call_tmp[605559](468035 call chpl_fix_thrown_error call_tmp[605554]))
      (43571 'throw' call_tmp[605559])
    }
    unknown call_tmp[605566] "expr temp" "maybe param" "maybe type" "temp"
    (605569 'move' call_tmp[605566](43586 call chpl_t _mt[243] t[43532]))
    unknown call_tmp[605571] "expr temp" "maybe param" "maybe type" "temp"
    (605574 'move' call_tmp[605571](43590 call _to_unmanaged call_tmp[605566]))
    unknown call_tmp[605576] "expr temp" "maybe param" "maybe type" "temp"
    (605579 'move' call_tmp[605576](43592 call _to_nonnil call_tmp[605571]))
    unknown call_tmp[605583] "expr temp" "maybe param" "maybe type" "temp"
    (605586 'move' call_tmp[605583](43580 call chpl_p _mt[243] x[43541]))
    unknown call_tmp[605588] "maybe param" "maybe type" "temp"
    (605591 'move' call_tmp[605588](43593 call _cast call_tmp[605576] call_tmp[605583]))
    unknown p[43596] "dead at end of block" "insert auto destroy"
    (540575 'init var' p[43596] call_tmp[605588])
    (43599 'end of statement')
    unknown call_tmp[605593] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605596 'move' call_tmp[605593](43606 'typeof' p[43596]))
    unknown call_tmp[605598] "expr temp" "maybe param" "maybe type" "temp"
    (605601 'move' call_tmp[605598](43608 call _to_borrowed call_tmp[605593]))
    unknown call_tmp[605605] "expr temp" "maybe param" "maybe type" "temp"
    (605608 'move' call_tmp[605605](43611 call chpl_pn _mt[243] x[43541]))
    unknown call_tmp[605610] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605613 'move' call_tmp[605610](747756 'new' _shared[32](?) 1 call_tmp[605598] p[43596] call_tmp[605605]))
    (505499 'move' ret[505494](505498 'deref' call_tmp[605610]))
    gotoReturn _end__cast[505492] _end__cast[505492]
    (474218 'end of statement' p[43596] p[43596])
    label _end__cast[505492]
    (505496 return ret[505494])
  }
  where {
    unknown call_tmp[605617] "expr temp" "maybe param" "maybe type" "temp"
    (605620 'move' call_tmp[605617](43552 call chpl_t _mt[243] x[43541]))
    unknown call_tmp[605622] "expr temp" "maybe param" "maybe type" "temp"
    (605625 'move' call_tmp[605622](43556 call _to_nonnil call_tmp[605617]))
    unknown call_tmp[605629] "expr temp" "maybe param" "maybe type" "temp"
    (605632 'move' call_tmp[605629](43546 call chpl_t _mt[243] t[43532]))
    (354206 'is_proper_subtype' call_tmp[605622] call_tmp[605629])
  }
  function _cast[43628](arg t[43625]:shared[415384](?), const  ref arg x[43633]:shared[415384](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505505] "RVV" "temp"
    unknown call_tmp[605636] "expr temp" "maybe param" "maybe type" "temp"
    (605639 'move' call_tmp[605636](43654 call chpl_t _mt[243] t[43625]))
    unknown call_tmp[605641] "expr temp" "maybe param" "maybe type" "temp"
    (605644 'move' call_tmp[605641](43658 call _to_unmanaged call_tmp[605636]))
    unknown call_tmp[605646] "expr temp" "maybe param" "maybe type" "temp"
    (605649 'move' call_tmp[605646](43660 call _to_nonnil call_tmp[605641]))
    unknown call_tmp[605653] "expr temp" "maybe param" "maybe type" "temp"
    (605656 'move' call_tmp[605653](43648 call chpl_p _mt[243] x[43633]))
    unknown call_tmp[605658] "maybe param" "maybe type" "temp"
    (605661 'move' call_tmp[605658](43661 call _cast call_tmp[605646] call_tmp[605653]))
    unknown p[43664] "dead at end of block" "insert auto destroy"
    (540577 'init var' p[43664] call_tmp[605658])
    (43667 'end of statement')
    unknown call_tmp[605663] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605666 'move' call_tmp[605663](43675 'typeof' p[43664]))
    unknown call_tmp[605668] "expr temp" "maybe param" "maybe type" "temp"
    (605671 'move' call_tmp[605668](43677 call _to_borrowed call_tmp[605663]))
    unknown call_tmp[605675] "expr temp" "maybe param" "maybe type" "temp"
    (605678 'move' call_tmp[605675](43680 call chpl_pn _mt[243] x[43633]))
    unknown call_tmp[605680] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605683 'move' call_tmp[605680](747757 'new' _shared[32](?) 1 call_tmp[605668] p[43664] call_tmp[605675]))
    (505510 'move' ret[505505](505509 'deref' call_tmp[605680]))
    gotoReturn _end__cast[505503] _end__cast[505503]
    (474221 'end of statement' p[43664] p[43664])
    label _end__cast[505503]
    (505507 return ret[505505])
  }
  where {
    unknown call_tmp[605687] "expr temp" "maybe param" "maybe type" "temp"
    (605690 'move' call_tmp[605687](43643 call chpl_t _mt[243] x[43633]))
    unknown call_tmp[605694] "expr temp" "maybe param" "maybe type" "temp"
    (605697 'move' call_tmp[605694](43638 call chpl_t _mt[243] t[43625]))
    (354207 'is_proper_subtype' call_tmp[605687] call_tmp[605694])
  }
  function _cast[43698](arg t[43695]:shared?[415380](?), const  ref arg x[43704]:shared?[415380](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505516] "RVV" "temp"
    unknown call_tmp[605701] "expr temp" "maybe param" "maybe type" "temp"
    (605704 'move' call_tmp[605701](43725 call chpl_t _mt[243] t[43695]))
    unknown call_tmp[605706] "expr temp" "maybe param" "maybe type" "temp"
    (605709 'move' call_tmp[605706](43729 call _to_unmanaged call_tmp[605701]))
    unknown call_tmp[605711] "expr temp" "maybe param" "maybe type" "temp"
    (605714 'move' call_tmp[605711](43731 call _to_nilable call_tmp[605706]))
    unknown call_tmp[605718] "expr temp" "maybe param" "maybe type" "temp"
    (605721 'move' call_tmp[605718](43719 call chpl_p _mt[243] x[43704]))
    unknown call_tmp[605723] "maybe param" "maybe type" "temp"
    (605726 'move' call_tmp[605723](43732 call _cast call_tmp[605711] call_tmp[605718]))
    unknown p[43734] "dead at end of block" "insert auto destroy"
    (540579 'init var' p[43734] call_tmp[605723])
    (43737 'end of statement')
    unknown call_tmp[605728] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605731 'move' call_tmp[605728](43745 'typeof' p[43734]))
    unknown call_tmp[605733] "expr temp" "maybe param" "maybe type" "temp"
    (605736 'move' call_tmp[605733](43747 call _to_borrowed call_tmp[605728]))
    unknown call_tmp[605740] "expr temp" "maybe param" "maybe type" "temp"
    (605743 'move' call_tmp[605740](43750 call chpl_pn _mt[243] x[43704]))
    unknown call_tmp[605745] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605748 'move' call_tmp[605745](747758 'new' _shared[32](?) 1 call_tmp[605733] p[43734] call_tmp[605740]))
    (505521 'move' ret[505516](505520 'deref' call_tmp[605745]))
    gotoReturn _end__cast[505514] _end__cast[505514]
    (474224 'end of statement' p[43734] p[43734])
    label _end__cast[505514]
    (505518 return ret[505516])
  }
  where {
    unknown call_tmp[605752] "expr temp" "maybe param" "maybe type" "temp"
    (605755 'move' call_tmp[605752](43714 call chpl_t _mt[243] x[43704]))
    unknown call_tmp[605759] "expr temp" "maybe param" "maybe type" "temp"
    (605762 'move' call_tmp[605759](43709 call chpl_t _mt[243] t[43695]))
    (354208 'is_proper_subtype' call_tmp[605752] call_tmp[605759])
  }
  function _cast[43768](arg t[43765]:shared?[415380](?), const  ref arg x[43773]:shared[415384](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505527] "RVV" "temp"
    unknown call_tmp[605766] "expr temp" "maybe param" "maybe type" "temp"
    (605769 'move' call_tmp[605766](43797 call chpl_t _mt[243] t[43765]))
    unknown call_tmp[605771] "expr temp" "maybe param" "maybe type" "temp"
    (605774 'move' call_tmp[605771](43801 call _to_unmanaged call_tmp[605766]))
    unknown call_tmp[605776] "expr temp" "maybe param" "maybe type" "temp"
    (605779 'move' call_tmp[605776](43803 call _to_nilable call_tmp[605771]))
    unknown call_tmp[605783] "expr temp" "maybe param" "maybe type" "temp"
    (605786 'move' call_tmp[605783](43791 call chpl_p _mt[243] x[43773]))
    unknown call_tmp[605788] "maybe param" "maybe type" "temp"
    (605791 'move' call_tmp[605788](43804 call _cast call_tmp[605776] call_tmp[605783]))
    unknown p[43806] "dead at end of block" "insert auto destroy"
    (540581 'init var' p[43806] call_tmp[605788])
    (43809 'end of statement')
    unknown call_tmp[605793] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605796 'move' call_tmp[605793](43817 'typeof' p[43806]))
    unknown call_tmp[605798] "expr temp" "maybe param" "maybe type" "temp"
    (605801 'move' call_tmp[605798](43819 call _to_borrowed call_tmp[605793]))
    unknown call_tmp[605805] "expr temp" "maybe param" "maybe type" "temp"
    (605808 'move' call_tmp[605805](43822 call chpl_pn _mt[243] x[43773]))
    unknown call_tmp[605810] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605813 'move' call_tmp[605810](747759 'new' _shared[32](?) 1 call_tmp[605798] p[43806] call_tmp[605805]))
    (505532 'move' ret[505527](505531 'deref' call_tmp[605810]))
    gotoReturn _end__cast[505525] _end__cast[505525]
    (474227 'end of statement' p[43806] p[43806])
    label _end__cast[505525]
    (505529 return ret[505527])
  }
  where {
    unknown call_tmp[605817] "expr temp" "maybe param" "maybe type" "temp"
    (605820 'move' call_tmp[605817](43784 call chpl_t _mt[243] x[43773]))
    unknown call_tmp[605822] "expr temp" "maybe param" "maybe type" "temp"
    (605825 'move' call_tmp[605822](43788 call _to_nilable call_tmp[605817]))
    unknown call_tmp[605829] "expr temp" "maybe param" "maybe type" "temp"
    (605832 'move' call_tmp[605829](43778 call chpl_t _mt[243] t[43765]))
    (354209 'is_proper_subtype' call_tmp[605822] call_tmp[605829])
  }
  function _cast[43837](arg t[43834]:_shared[32](?), arg x[43840]:_nilType[42]) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505538] "RVV" "temp"
    unknown call_tmp[605836] "expr temp" "maybe param" "maybe type" "temp"
    (605839 'move' call_tmp[605836](43845 call chpl_t _mt[243] t[43834]))
    unknown call_tmp[605841] "expr temp" "maybe param" "maybe type" "temp"
    (605844 'move' call_tmp[605841](43849 call isNonNilableClass call_tmp[605836]))
    unknown call_tmp[605846] "expr temp" "maybe param" "maybe type" "temp"
    (605849 'move' call_tmp[605846](43871 call _cond_test call_tmp[605841]))
    if call_tmp[605846]
    {
      (43869 call compilerError "Illegal cast from nil to non-nilable shared type")
    }
    unknown tmp[43878] "dead at end of block" "insert auto destroy"
    (540583 'default init var' tmp[43878] t[43834])
    (43881 'end of statement')
    (505543 'move' ret[505538](505542 'deref' tmp[43878]))
    gotoReturn _end__cast[505536] _end__cast[505536]
    (474231 'end of statement' tmp[43878])
    label _end__cast[505536]
    (505540 return ret[505538])
  }
  function postfix![43893](arg x[43890]:_shared[32](?)) : _unknown[51] "always propagate line file info" "inline" "no doc"
  {
    unknown ret[505549] "RVV" "temp"
    unknown tmp[418374] "maybe param" "temp"
    (418385 'move' tmp[418374] 1)
    unknown call_tmp[605851] "expr temp" "maybe param" "maybe type" "temp"
    (605854 'move' call_tmp[605851](418387 call _cond_invalid tmp[418374]))
    if call_tmp[605851]
    {
      (418390 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[554255] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554256] "maybe param" "temp"
    unknown call_tmp[605856] "expr temp" "maybe param" "maybe type" "temp"
    (605859 'move' call_tmp[605856](418375 call isTrue tmp[418374]))
    (554261 'move' tmp[554256](554259 call _cond_test call_tmp[605856]))
    if tmp[554256]
    {
      (554266 'move' tmp[554255](554263 '_paramFoldLogical' tmp[554256] 1))
    }
    {
      unknown tmp[554268] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (554270 'move' tmp[554268](418379 call isTrue enablePostfixBangChecks[324]))
      (554275 'move' tmp[554255](554272 '_paramFoldLogical' tmp[554256] tmp[554268]))
    }
    unknown call_tmp[605861] "expr temp" "maybe param" "maybe type" "temp"
    (605864 'move' call_tmp[605861](43942 call _cond_test tmp[554255]))
    if call_tmp[605861]
    {
      unknown call_tmp[605868] "expr temp" "maybe param" "maybe type" "temp"
      (605871 'move' call_tmp[605868](43905 call chpl_t _mt[243] x[43890]))
      unknown call_tmp[605873] "expr temp" "maybe param" "maybe type" "temp"
      (605876 'move' call_tmp[605873](43909 call _to_nilable call_tmp[605868]))
      unknown call_tmp[605880] "expr temp" "maybe param" "maybe type" "temp"
      (605883 'move' call_tmp[605880](43911 call chpl_t _mt[243] x[43890]))
      unknown call_tmp[605885] "expr temp" "maybe param" "maybe type" "temp"
      (605888 'move' call_tmp[605885](43914 call == call_tmp[605873] call_tmp[605880]))
      unknown call_tmp[605890] "expr temp" "maybe param" "maybe type" "temp"
      (605893 'move' call_tmp[605890](43937 call _cond_test call_tmp[605885]))
      if call_tmp[605890]
      {
        unknown call_tmp[605897] "expr temp" "maybe param" "maybe type" "temp"
        (605900 'move' call_tmp[605897](43917 call chpl_p _mt[243] x[43890]))
        unknown call_tmp[605902] "expr temp" "maybe param" "maybe type" "temp"
        (605905 'move' call_tmp[605902](43921 call == call_tmp[605897] nil[44]))
        unknown call_tmp[605907] "expr temp" "maybe param" "maybe type" "temp"
        (605910 'move' call_tmp[605907](43932 call _cond_test call_tmp[605902]))
        if call_tmp[605907]
        {
          (43929 call nilCheckHalt module=[255] HaltWrappers[209998] "argument to ! is nil")
          (357074 'referenced modules list' HaltWrappers[209998])
        }
      }
    }
    unknown call_tmp[605914] "expr temp" "maybe param" "maybe type" "temp"
    (605917 'move' call_tmp[605914](43948 call chpl_p _mt[243] x[43890]))
    unknown call_tmp[605919] "expr temp" "maybe param" "maybe type" "temp"
    (605922 'move' call_tmp[605919](43952 call _to_nonnil call_tmp[605914]))
    (505554 'move' ret[505549](505553 'deref' call_tmp[605919]))
    (505551 return ret[505549])
    (355033 'used modules list'(43896 'import' HaltWrappers[209998]))
  }
  (355028 'used modules list'(41669 'use' ChapelError[167853])(41671 'use' Atomics[43961])(41672 'use' ChapelBase[307])(41675 'use' OwnedObject[39583]))
}