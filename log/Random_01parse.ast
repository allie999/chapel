AST dump for Random after pass parse.
Module use list: 

{
  (353102 'use' ChapelStandard)
  (304678 'use' RandomSupport)
  (304682 'use' NPBRandom)
  (304685 'use' PCGRandom)
  (304693 'import'(304690 call . Set c"set"))
  type RNG[304702] def PCG[304697]:RNG[304702] 1 def NPB[304700]:RNG[304702] 2
  { scopeless
    unknown defaultRNG[304711] "param"(304708 call . RNG c"PCG")
    (304714 'end of statement')
  }
  unknown RandomStream[304727] "type variable"(304724 IfExpr (304720 call == defaultRNG(304717 call . RNG c"PCG")) then
  { scopeless
    PCGRandomStream
  } else
  { scopeless
    NPBRandomStream
  } )
  function isSupportedNumericType[304734](arg t[304732]:_any[178](?)) param : _unknown[51] "private"
  {
    { scopeless
      (304746 return(304744 call ||(304739 call isNumericType t)(304743 call isBoolType t)))
    }
  }
  function fillRandom[304759](arg arr[304756] :
  (304753 call chpl__buildArrayRuntimeType nil[44]), arg seed[304771] :
  (304764 call int[13] 64) =
  (304768 call . SeedGenerator c"oddCurrentTime"), param arg algorithm[304776] =
  defaultRNG) : _unknown[51]
  {
    { scopeless
      unknown randNums[304800](304799 call createRandomStream(seed = seed)(eltType =(304791 call . arr c"eltType"))(parSafe = 0)(algorithm = algorithm))
      (304803 'end of statement')
    }
    (304813 call(304808 call . randNums c"fillRandom") arr)
  }
  where {
    (304785 call isSupportedNumericType(304781 call . arr c"eltType"))
  }
  function fillRandom[304826](arg arr[304823] :
  (304820 call chpl__buildArrayRuntimeType nil[44]), arg seed[304836] :
  (304831 call int[13] 64) =
  (304833 call . SeedGenerator c"oddCurrentTime"), param arg algorithm[304841] =
  defaultRNG) : _unknown[51] "no doc"
  {
    (304863 call compilerError "Random.fillRandom is only defined for numeric arrays")
  }
  function shuffle[304876](arg arr[304873] :
  (304870 call chpl__buildArrayRuntimeType nil[44]), arg seed[304886] :
  (304881 call int[13] 64) =
  (304883 call . SeedGenerator c"oddCurrentTime"), param arg algorithm[304894] =
  (304891 call . RNG c"PCG")) : _unknown[51]
  {
    { scopeless
      unknown randNums[304914](304913 call createRandomStream(seed = seed)(eltType =(304905 call .(304902 call . arr c"_dom") c"idxType"))(parSafe = 0)(algorithm = algorithm))
      (304917 'end of statement')
    }
    (304925 call(304920 call . randNums c"shuffle") arr)
  }
  function permutation[304937](arg arr[304934] :
  (304931 call chpl__buildArrayRuntimeType nil[44]), arg seed[304947] :
  (304942 call int[13] 64) =
  (304944 call . SeedGenerator c"oddCurrentTime"), param arg algorithm[304955] =
  (304952 call . RNG c"PCG")) : _unknown[51]
  {
    { scopeless
      unknown randNums[304972](304971 call createRandomStream(seed = seed)(eltType =(304963 call . arr c"eltType"))(parSafe = 0)(algorithm = algorithm))
      (304975 'end of statement')
    }
    (304985 call(304980 call . randNums c"permutation") arr)
  }
  function makeRandomStream[304993](arg eltType[304991]:_any[178](?), arg seed[305003] :
  (304998 call int[13] 64) =
  (305000 call . SeedGenerator c"oddCurrentTime"), param arg parSafe[305009] :
  bool[10] =
  1, param arg algorithm[305014] =
  defaultRNG) : _unknown[51] "no doc"
  {
    (305055 call compilerWarning(305052 call + "makeRandomStream is deprecated - " "please use createRandomStream instead"))
    (305065 return(305064 call createRandomStream eltType seed parSafe algorithm))
  }
  function createRandomStream[305073](arg eltType[305071]:_any[178](?), arg seed[305083] :
  (305078 call int[13] 64) =
  (305080 call . SeedGenerator c"oddCurrentTime"), param arg parSafe[305089] :
  bool[10] =
  1, param arg algorithm[305094] =
  defaultRNG) : _unknown[51]
  {
    if(305168 call _cond_test(305102 call == algorithm(305099 call . RNG c"PCG")))
    {
      { scopeless
        (305116 return(305106 'new'(_chpl_manager = _owned[30](?))(305115 call PCGRandomStream(seed = seed)(parSafe = parSafe)(eltType = eltType))))
      }
    }
    {
      { scopeless
        if(305162 call _cond_test(305125 call == algorithm(305122 call . RNG c"NPB")))
        {
          { scopeless
            (305139 return(305129 'new'(_chpl_manager = _owned[30](?))(305138 call NPBRandomStream(seed = seed)(parSafe = parSafe)(eltType = eltType))))
          }
        }
        {
          { scopeless
            (305160 call compilerError "Unknown random number generator")
          }
        }
      }
    }
  }
  function _choice[305181](arg stream[305179]:_any[178](?), arg X[305184] :
  _domain, arg size[305189] :
  unknown sizeType[305187], arg replace[305193] :
  bool[10], arg prob[305198] :
  unknown probType[305196]) : _unknown[51] throws "no doc"
  {
    if(305230 call _cond_test(305206 call !=(305202 call . X c"rank") 1))
    {
      (305227 call compilerError "choice() argument x must be 1 dimensional")
    }
    if(305268 call _cond_test(305240 call <(305236 call . X c"size") 1))
    {
      (305265 'throw'(305244 'new'(_chpl_manager = _owned[30](?))(305264 call IllegalArgumentError "choice() x.size must be greater than 0")))
    }
    if(305428 call _cond_test(305276 call !(305275 call isNothingType probType)))
    {
      if(305305 call _cond_test(305282 call !(305281 call isArrayType probType)))
      {
        { scopeless
          (305303 call compilerError "choice() prob must be an array")
        }
      }
      if(305350 call _cond_test(305327 call !(305325 call ||(305317 call isIntegralType(305313 call . prob c"eltType"))(305324 call isRealType(305320 call . prob c"eltType")))))
      {
        { scopeless
          (305348 call compilerError "choice() prob.eltType must be real or integral")
        }
      }
      if(305384 call _cond_test(305360 call !=(305356 call . prob c"rank") 1))
      {
        (305381 call compilerError "choice() prob array must be 1 dimensional")
      }
      if(305424 call _cond_test(305396 call !=(305389 call . prob c"size")(305393 call . X c"size")))
      {
        (305421 'throw'(305400 'new'(_chpl_manager = _owned[30](?))(305420 call IllegalArgumentError "choice() x.size must be equal to prob.size")))
      }
    }
    if(305622 call _cond_test(305436 call !(305435 call isNothingType sizeType)))
    {
      if(305616 call _cond_test(305441 call isIntegralType sizeType))
      {
        if(305471 call _cond_test(305444 call <= size 0))
        {
          { scopeless
            (305469 'throw'(305448 'new'(_chpl_manager = _owned[30](?))(305468 call IllegalArgumentError "choice() size must be greater than 0")))
          }
        }
        if(305514 call _cond_test(305487 call &&(305478 call ! replace)(305485 call > size(305482 call . X c"size"))))
        {
          { scopeless
            (305512 'throw'(305491 'new'(_chpl_manager = _owned[30](?))(305511 call IllegalArgumentError "choice() size must be smaller than x.size when replace=false")))
          }
        }
      }
      {
        { scopeless
          if(305612 call _cond_test(305522 call isDomainType sizeType))
          {
            if(305555 call _cond_test(305528 call <=(305524 call . size c"size") 0))
            {
              { scopeless
                (305553 'throw'(305532 'new'(_chpl_manager = _owned[30](?))(305552 call IllegalArgumentError "choice() size domain can not be empty")))
              }
            }
            if(305585 call _cond_test(305574 call &&(305562 call ! replace)(305572 call >(305565 call . size c"size")(305569 call . X c"size"))))
            {
              { scopeless
                (305583 'throw'(305578 'new'(_chpl_manager = _owned[30](?))(305582 call IllegalArgumentError "choice() size must be smaller than x.size when replace=false")))
              }
            }
          }
          {
            (305609 call compilerError "choice() size must be integral or domain")
          }
        }
      }
    }
    if(305651 call _cond_test(305629 call isNothingType probType))
    {
      (305637 return(305636 call _choiceUniform stream X size replace))
    }
    {
      (305648 return(305647 call _choiceProbabilities stream X size replace prob))
    }
  }
  function _choiceUniform[305661](arg stream[305659]:_any[178](?), arg X[305664] :
  _domain, arg size[305669] :
  unknown sizeType[305667], arg replace[305673] :
  bool[10]) : _unknown[51] throws "no doc"
  {
    { scopeless
      const low[305680] "const"(305677 call . X c"alignedLow")
      const stride[305690] "const"(305689 call abs(305685 call . X c"stride"))
      (305693 'end of statement')
    }
    if(306151 call _cond_test(305698 call isNothingType sizeType))
    {
      { scopeless
        unknown randVal[305715](305714 call(305700 call . stream c"getNext")(resultType = int[13]) 0(305712 call -(305708 call . X c"size") 1))
        (305718 'end of statement')
      }
      { scopeless
        unknown randIdx[305733](305732 call(305727 call .(305726 call(305721 call . X c"dim") 0) c"orderToIndex") randVal)
        (305736 'end of statement')
      }
      (305738 return randIdx)
    }
    {
      { scopeless
        unknown m[305741] 1
        (305744 'end of statement')
      }
      if(305758 call _cond_test(305749 call isDomainType sizeType))
      {
        { scopeless
          (305755 call = m(305752 call . size c"size"))
        }
      }
      { scopeless
        unknown numElements[305802](305799 IfExpr (305766 call isDomainType sizeType) then
        { scopeless
          m
        } else
        { scopeless(305796 IfExpr (305771 call isIntegralType sizeType) then
          { scopeless
            (305774 call _cast int[13] size)
          } else
          { scopeless
            (305795 call compilerError "choice() size type must be integral or tuple of ranges")
          } )
        } )
        (305805 'end of statement')
      }
      { scopeless
        unknown samples[305819](305817 call chpl__buildArrayRuntimeType(305815 call chpl__ensureDomainExpr(305811 call chpl_build_bounded_range 0(305809 call - numElements 1))) int[13])
        (305822 'end of statement')
      }
      if(306118 call _cond_test replace)
      {
        {
          unknown _indexOfInterest[305869] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[305870] "expr temp" "temp"
          (305879 'move' _iterator[305870](305877 call _getIterator samples))
          Defer
          {
            {
              (305895 call _freeIterator _iterator[305870])
            }
          }
          { scopeless type
            (305884 'move' _indexOfInterest[305869](305881 call iteratorIndex _iterator[305870]))
          }
          ForLoop[305871]
          {
            unknown sample[305888] "index var" "insert auto destroy"
            (305890 'move' sample[305888] _indexOfInterest[305869])
            {
              { scopeless
                unknown randVal[305842](305841 call(305827 call . stream c"getNext")(resultType = int[13]) 0(305839 call -(305835 call . X c"size") 1))
                (305845 'end of statement')
              }
              { scopeless
                unknown randIdx[305860](305859 call(305854 call .(305853 call(305848 call . X c"dim") 0) c"orderToIndex") randVal)
                (305863 'end of statement')
              }
              (305866 call = sample randIdx)
            }
            label _continueLabel[305874]
            _indexOfInterest[305869]
            _iterator[305870]
          }
          label _breakLabel[305875]
        }
      }
      {
        if(306113 call _cond_test(305911 call < numElements(305910 call log2(305906 call . X c"size"))))
        {
          { scopeless
            unknown indices[305917](305916 call set int[13])
            (305920 'end of statement')
          }
          { scopeless
            unknown i[305924] 0 int[13]
            (305927 'end of statement')
          }
          {
            unknown tmp[306005] "temp"
            (306029 'move' tmp[306005](306024 call _cond_test(306026 call < i numElements)))
            WhileDo[306010]
            {
              {
                { scopeless
                  unknown randVal[305948](305947 call(305933 call . stream c"getNext")(resultType = int[13]) 0(305945 call -(305941 call . X c"size") 1))
                  (305951 'end of statement')
                }
                if(306001 call _cond_test(305960 call !(305959 call(305954 call . indices c"contains") randVal)))
                {
                  { scopeless
                    unknown randIdx[305975](305974 call(305969 call .(305968 call(305963 call . X c"dim") 0) c"orderToIndex") randVal)
                    (305978 'end of statement')
                  }
                  (305985 call =(305983 call samples i) randIdx)
                  (305994 call(305989 call . indices c"add") randVal)
                  (305998 call += i 1)
                }
              }
              label _continueLabel[306008]
              (306019 'move' tmp[306005](306014 call _cond_test(306016 call < i numElements)))
              tmp[306005]
            }
            label _breakLabel[306009]
          }
        }
        {
          { scopeless
            unknown indices[306040] X(306037 call chpl__buildArrayRuntimeType(306035 call chpl__ensureDomainExpr X) int[13])
            (306043 'end of statement')
          }
          (306048 call shuffle indices)
          {
            unknown _indexOfInterest[306079] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[306080] "expr temp" "temp"
            (306089 'move' _iterator[306080](306087 call _getIterator(306052 call . samples c"_dom")))
            Defer
            {
              {
                (306106 call _freeIterator _iterator[306080])
              }
            }
            { scopeless type
              (306095 'move' _indexOfInterest[306079](306092 call iteratorIndex _iterator[306080]))
            }
            ForLoop[306081]
            {
              unknown i[306099] "index var" "insert auto destroy"
              (306101 'move' i[306099] _indexOfInterest[306079])
              {
                (306075 call =(306058 call samples i)(306074 call indices(306072 call(306067 call .(306066 call(306061 call . X c"dim") 0) c"orderToIndex") i)))
              }
              label _continueLabel[306084]
              _indexOfInterest[306079]
              _iterator[306080]
            }
            label _breakLabel[306085]
          }
        }
      }
      if(306146 call _cond_test(306125 call isIntegralType sizeType))
      {
        (306127 return samples)
      }
      {
        { scopeless
          if(306142 call _cond_test(306133 call isDomainType sizeType))
          {
            (306139 return(306138 call reshape samples size))
          }
        }
      }
    }
  }
  function _choiceProbabilities[306161](arg stream[306159]:_any[178](?), arg X[306164] :
  _domain, arg size[306169] :
  unknown sizeType[306167], arg replace[306172]:_any[178](?), arg prob[306176] :
  unknown probType[306174]) : _unknown[51] throws "no doc"
  {
    (306180 'import' Search)
    (306184 'import' Sort)
    if(306206 call _cond_test(306194 call !=(306187 call . prob c"size")(306191 call . X c"size")))
    {
      (306203 'throw'(306198 'new'(_chpl_manager = _owned[30](?))(306202 call IllegalArgumentError "choice() x.size must be equal to prob.size")))
    }
    if(306242 call _cond_test(306215 call ==(306211 call . prob c"size") 0))
    {
      { scopeless
        (306240 'throw'(306219 'new'(_chpl_manager = _owned[30](?))(306239 call IllegalArgumentError "choice() prob array cannot be empty")))
      }
    }
    { scopeless
      const low[306251] "const"(306248 call . X c"alignedLow")
      const stride[306261] "const"(306260 call abs(306256 call . X c"stride"))
      (306264 'end of statement')
    }
    { scopeless
      unknown P[306281] "ref var"(306280 call(306266 call . prob c"reindex")(306277 call chpl_build_bounded_range 0(306275 call -(306271 call . X c"size") 1)))
      (306284 'end of statement')
    }
    { scopeless
      unknown cumulativeArr[306324](306322 call _cast real[16](306320 call function chpl__scan5[306287](arg chpl_toScan[306289]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
      {
        unknown chpl_eltType[306291] "maybe type" "temp"
        { scopeless type
          (306295 'move' chpl_eltType[306291](306297 'typeof'(306299 call chpl__initCopy(306301 call iteratorIndex(306303 call _getIterator chpl_toScan[306289])))))
        }
        const tmp[306292] "const" "temp"
        (306312 'move' tmp[306292](306311 'new'(306310 call SumReduceScanOp(eltType = chpl_eltType[306291])(_chpl_manager = unmanaged[220](?)))))
        (306314 return(306316 call chpl__scanIterator tmp[306292] chpl_toScan[306289]))
      } P))
      (306327 'end of statement')
    }
    if(306364 call _cond_test(306337 call !(306336 call(306331 call . Sort c"isSorted") cumulativeArr)))
    {
      { scopeless
        (306362 'throw'(306341 'new'(_chpl_manager = _owned[30](?))(306361 call IllegalArgumentError "choice() prob array cannot contain negative values")))
      }
    }
    if(306407 call _cond_test(306380 call <=(306378 call cumulativeArr(306374 call .(306371 call . P c"_dom") c"last")) 0))
    {
      { scopeless
        (306405 'throw'(306384 'new'(_chpl_manager = _owned[30](?))(306404 call IllegalArgumentError "choice() prob array requires a value greater than 0")))
      }
    }
    { scopeless
      unknown total[306422](306421 call cumulativeArr(306417 call .(306414 call . P c"_dom") c"last"))
      (306425 'end of statement')
    }
    (306428 call /= cumulativeArr total)
    if(306979 call _cond_test(306434 call isNothingType sizeType))
    {
      { scopeless
        unknown randNum[306443](306442 call(306436 call . stream c"getNext")(resultType = real[16]))
        (306446 'end of statement')
      }
      { scopeless
        unknown tmp[306463] "temp"(306462 call(306456 call . Search c"binarySearch") cumulativeArr randNum)
        (306470 call _check_tuple_var_decl tmp[306463] 2)
        unknown found[306448](306464 call tmp[306463] 0)
        unknown idx[306450](306467 call tmp[306463] 1)
        (306475 'end of statement')
      }
      (306489 return(306488 call(306483 call .(306482 call(306477 call . X c"dim") 0) c"orderToIndex") idx))
    }
    {
      { scopeless
        unknown m[306492] 1
        (306495 'end of statement')
      }
      if(306509 call _cond_test(306500 call isDomainType sizeType))
      {
        { scopeless
          (306506 call = m(306503 call . size c"size"))
        }
      }
      { scopeless
        unknown numElements[306537](306534 IfExpr (306517 call isDomainType sizeType) then
        { scopeless
          m
        } else
        { scopeless(306531 IfExpr (306522 call isIntegralType sizeType) then
          { scopeless
            (306525 call _cast int[13] size)
          } else
          { scopeless
            (306530 call compilerError "choice() size type must be integral or tuple of ranges")
          } )
        } )
        (306540 'end of statement')
      }
      { scopeless
        unknown samples[306554](306552 call chpl__buildArrayRuntimeType(306550 call chpl__ensureDomainExpr(306546 call chpl_build_bounded_range 0(306544 call - numElements 1))) int[13])
        (306557 'end of statement')
      }
      if(306946 call _cond_test replace)
      {
        {
          unknown _indexOfInterest[306617] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[306618] "expr temp" "temp"
          (306627 'move' _iterator[306618](306625 call _getIterator samples))
          Defer
          {
            {
              (306643 call _freeIterator _iterator[306618])
            }
          }
          { scopeless type
            (306632 'move' _indexOfInterest[306617](306629 call iteratorIndex _iterator[306618]))
          }
          ForLoop[306619]
          {
            unknown sample[306636] "index var" "insert auto destroy"
            (306638 'move' sample[306636] _indexOfInterest[306617])
            {
              { scopeless
                unknown randNum[306569](306568 call(306562 call . stream c"getNext")(resultType = real[16]))
                (306572 'end of statement')
              }
              { scopeless
                unknown tmp[306587] "temp"(306586 call(306580 call . Search c"binarySearch") cumulativeArr randNum)
                (306594 call _check_tuple_var_decl tmp[306587] 2)
                unknown found[306574](306588 call tmp[306587] 0)
                unknown idx[306576](306591 call tmp[306587] 1)
                (306599 'end of statement')
              }
              (306614 call = sample(306613 call(306608 call .(306607 call(306602 call . X c"dim") 0) c"orderToIndex") idx))
            }
            label _continueLabel[306622]
            _indexOfInterest[306617]
            _iterator[306618]
          }
          label _breakLabel[306623]
        }
      }
      {
        { scopeless
          unknown indicesChosen[306656](306654 call chpl__buildDomainRuntimeType defaultDist int[13])
          (306659 'end of statement')
        }
        { scopeless
          unknown i[306662] 0
          (306665 'end of statement')
        }
        {
          unknown tmp[306907] "temp"
          (306943 'move' tmp[306907](306932 call _cond_test(306934 call <(306936 call . indicesChosen c"size")(306940 call . samples c"size"))))
          WhileDo[306912]
          {
            {
              if(306746 call _cond_test(306681 call >(306677 call . indicesChosen c"size") 0))
              {
                (306723 call = cumulativeArr(306721 call _cast real[16](306719 call function chpl__scan6[306686](arg chpl_toScan[306688]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
                {
                  unknown chpl_eltType[306690] "maybe type" "temp"
                  { scopeless type
                    (306694 'move' chpl_eltType[306690](306696 'typeof'(306698 call chpl__initCopy(306700 call iteratorIndex(306702 call _getIterator chpl_toScan[306688])))))
                  }
                  const tmp[306691] "const" "temp"
                  (306711 'move' tmp[306691](306710 'new'(306709 call SumReduceScanOp(eltType = chpl_eltType[306690])(_chpl_manager = unmanaged[220](?)))))
                  (306713 return(306715 call chpl__scanIterator tmp[306691] chpl_toScan[306688]))
                } P)))
                (306738 call = total(306737 call cumulativeArr(306733 call .(306730 call . P c"_dom") c"last")))
                (306743 call /= cumulativeArr total)
              }
              { scopeless
                unknown remainingSamples[306761](306759 call -(306752 call . samples c"size")(306756 call . indicesChosen c"size"))
                (306764 'end of statement')
              }
              {
                unknown _indexOfInterest[306873] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[306874] "expr temp" "temp"
                (306883 'move' _iterator[306874](306881 call _getIterator(306791 call(306769 call . stream c"iterate")(306786 call chpl__buildDomainExpr(306783 call chpl_build_bounded_range 1(306781 call -(306774 call . samples c"size")(306778 call . indicesChosen c"size"))))(resultType = real[16]))))
                Defer
                {
                  {
                    (306900 call _freeIterator _iterator[306874])
                  }
                }
                { scopeless type
                  (306889 'move' _indexOfInterest[306873](306886 call iteratorIndex _iterator[306874]))
                }
                ForLoop[306875]
                {
                  unknown randNum[306893] "index var" "insert auto destroy"
                  (306895 'move' randNum[306893] _indexOfInterest[306873])
                  {
                    { scopeless
                      unknown tmp[306805] "temp"(306804 call(306798 call . Search c"binarySearch") cumulativeArr randNum)
                      (306812 call _check_tuple_var_decl tmp[306805] 2)
                      unknown found[306792](306806 call tmp[306805] 0)
                      unknown indexChosen[306794](306809 call tmp[306805] 1)
                      (306817 'end of statement')
                    }
                    if(306861 call _cond_test(306826 call !(306825 call(306820 call . indicesChosen c"contains") indexChosen)))
                    {
                      (306830 call += indicesChosen indexChosen)
                      (306851 call =(306837 call samples i)(306850 call(306845 call .(306844 call(306839 call . X c"dim") 0) c"orderToIndex") indexChosen))
                      {
                      }
                      (306858 call += i 1)
                    }
                    (306870 call =(306868 call P indexChosen) 0)
                  }
                  label _continueLabel[306878]
                  _indexOfInterest[306873]
                  _iterator[306874]
                }
                label _breakLabel[306879]
              }
            }
            label _continueLabel[306910]
            (306927 'move' tmp[306907](306916 call _cond_test(306918 call <(306920 call . indicesChosen c"size")(306924 call . samples c"size"))))
            tmp[306907]
          }
          label _breakLabel[306911]
        }
      }
      if(306974 call _cond_test(306953 call isIntegralType sizeType))
      {
        (306955 return samples)
      }
      {
        { scopeless
          if(306970 call _cond_test(306961 call isDomainType sizeType))
          {
            (306967 return(306966 call reshape samples size))
          }
        }
      }
    }
  }
  type RandomStreamInterface[307420](?) unknown eltType[306990] "type variable"(306989 call real[16] 64) unknown parSafe[306995] "param" 1 bool[10] const seed[307003] "const"(307002 call int[13] 64) function RandomStreamInterface[307420](?).getNext[307009](arg _mt[307424]:_MT[238], arg this[307422]:RandomStreamInterface[307420](?)) : _unknown[51] "method" "primary method"
  {
    (307031 call compilerError "RandomStreamInterface.getNext called")
    { scopeless
      unknown x[307035] eltType
      (307038 'end of statement')
    }
    (307040 return x)
  }
  { scopeless type
    eltType
  } function RandomStreamInterface[307420](?).skipToNth[307051](arg _mt[307428]:_MT[238], arg this[307426]:RandomStreamInterface[307420](?), arg n[307048] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    (307072 call compilerError "RandomStreamInterface.skipToNth called")
  } function RandomStreamInterface[307420](?).getNth[307083](arg _mt[307432]:_MT[238], arg this[307430]:RandomStreamInterface[307420](?), arg n[307080] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    (307105 call compilerError "RandomStreamInterface.getNth called")
  }
  { scopeless type
    eltType
  } function RandomStreamInterface[307420](?).fillRandom[307120](arg _mt[307436]:_MT[238], arg this[307434]:RandomStreamInterface[307420](?), arg arr[307117] :
  (307114 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method"
  {
    (307141 call compilerError "RandomStreamInterface.fillRandom called")
  } function RandomStreamInterface[307420](?).fillRandom[307154](arg _mt[307440]:_MT[238], arg this[307438]:RandomStreamInterface[307420](?), arg arr[307151] :
  (307148 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc"
  {
    (307159 call compilerError "RandomStreamInterface.fillRandom called")
  } function RandomStreamInterface[307420](?).choice[307172](arg _mt[307444]:_MT[238], arg this[307442]:RandomStreamInterface[307420](?), arg x[307169] :
  (307166 call chpl__buildArrayRuntimeType nil[44]), arg size[307177] :
  unknown sizeType[307174] =
  none[57], arg replace[307182] =
  1, arg prob[307188] :
  unknown probType[307185] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    (307211 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307420](?).choice[307226](arg _mt[307448]:_MT[238], arg this[307446]:RandomStreamInterface[307420](?), arg x[307223] :
  (307222 call range(stridable = ?[260])), arg size[307231] :
  unknown sizeType[307228] =
  none[57], arg replace[307236] =
  1, arg prob[307242] :
  unknown probType[307239] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    (307249 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307420](?).choice[307260](arg _mt[307452]:_MT[238], arg this[307450]:RandomStreamInterface[307420](?), arg x[307257] :
  _domain, arg size[307265] :
  unknown sizeType[307262] =
  none[57], arg replace[307270] =
  1, arg prob[307276] :
  unknown probType[307273] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    (307283 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307420](?).iterate[307294](arg _mt[307456]:_MT[238], arg this[307454]:RandomStreamInterface[307420](?), arg D[307291] :
  _domain, arg resultType[307297]:_any[178](?) =
  eltType) : _unknown[51] "method" "primary method"
  {
    (307319 call compilerError "RandomStreamInterface.iterate called")
  } function RandomStreamInterface[307420](?).writeThis[307328](arg _mt[307460]:_MT[238], arg this[307458]:RandomStreamInterface[307420](?), arg f[307326]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (307348 call <~> f "RandomStreamInterface(eltType=")
    (307357 call <~> f(307355 call _cast string[26] eltType))
    (307378 call <~> f ", parSafe=")
    (307383 call <~> f parSafe)
    (307404 call <~> f ", seed=")
    (307409 call <~> f seed)
    (307414 call <~> f ")")
  }
  def module RandomSupport[307463]  
  def module PCGRandom[307573]  
  def module PCGRandomLib[311797]  
  def module NPBRandom[314411]  
}