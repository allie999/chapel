AST dump for Time after pass scopeResolve.
Module use list: ChapelStandard SysBasic HaltWrappers 

{ function chpl_now_time[335020]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type real(64)[16]
  } type _timevalue[335030] function chpl_null_timevalue[335034]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type _timevalue[335030]
  } function chpl_now_timevalue[335042]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type _timevalue[335030]
  } function chpl_timevalue_parts[335054](arg t[335051] : _timevalue[335030], out arg seconds[335060] :(335059 call int(64)[13] 32), out arg minutes[335067] :(335066 call int(64)[13] 32), out arg hours[335074] :(335073 call int(64)[13] 32), out arg mday[335081] :(335080 call int(64)[13] 32), out arg month[335088] :(335087 call int(64)[13] 32), out arg year[335095] :(335094 call int(64)[13] 32), out arg wday[335102] :(335101 call int(64)[13] 32), out arg yday[335109] :(335108 call int(64)[13] 32), out arg isdst[335116] :(335115 call int(64)[13] 32)) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  } type TimeUnits[335132] def microseconds[335122]:TimeUnits[335132] def milliseconds[335124]:TimeUnits[335132] def seconds[335126]:TimeUnits[335132] def minutes[335128]:TimeUnits[335132] def hours[335130]:TimeUnits[335132] type Day[335151] def sunday[335137]:Day[335151] 0 def monday[335139]:Day[335151] def tuesday[335141]:Day[335151] def wednesday[335143]:Day[335151] def thursday[335145]:Day[335151] def friday[335147]:Day[335151] def saturday[335149]:Day[335151] function getCurrentTime[335167](arg unit[335163] : TimeUnits[335132] = seconds[335126]) : _unknown[51]
  {(335180 return(335179 call _convert_microseconds unit[335163](335178 call chpl_now_time)))
  }
  { scopeless type(335172 call real(64)[16] 64)
  } function getCurrentDate[335188]() : _unknown[51]
  { unknown now[335193](335192 call chpl_now_timevalue)(335196 'end of statement') unknown seconds[335198](335225 call int(64)[13] 32) unknown minutes[335201](335244 'typeof' seconds[335198]) unknown hours[335204](335242 'typeof' minutes[335201]) unknown mday[335207](335240 'typeof' hours[335204]) unknown month[335210](335238 'typeof' mday[335207]) unknown year[335213](335236 'typeof' month[335210]) unknown wday[335216](335234 'typeof' year[335213]) unknown yday[335219](335232 'typeof' wday[335216]) unknown isdst[335226](335230 'typeof' yday[335219])(335245 'end of statement')(335258 call chpl_timevalue_parts now[335193] seconds[335198] minutes[335201] hours[335204] mday[335207] month[335210] year[335213] wday[335216] yday[335219] isdst[335226])(335274 return(335272 call _build_tuple(335264 call + year[335213] 1900)(335268 call + month[335210] 1) mday[335207]))
  } function getCurrentDayOfWeek[335280]() : _unknown[51]
  { unknown now[335286](335285 call chpl_now_timevalue)(335289 'end of statement') unknown seconds[335291](335318 call int(64)[13] 32) unknown minutes[335294](335337 'typeof' seconds[335291]) unknown hours[335297](335335 'typeof' minutes[335294]) unknown mday[335300](335333 'typeof' hours[335297]) unknown month[335303](335331 'typeof' mday[335300]) unknown year[335306](335329 'typeof' month[335303]) unknown wday[335309](335327 'typeof' year[335306]) unknown yday[335312](335325 'typeof' wday[335309]) unknown isdst[335319](335323 'typeof' yday[335312])(335338 'end of statement')(335351 call chpl_timevalue_parts now[335286] seconds[335291] minutes[335294] hours[335297] mday[335300] month[335303] year[335306] wday[335309] yday[335312] isdst[335319])(335358 return(335357 'try!-expr'(335355 call _cast Day[335151] wday[335309])))
  }
  { scopeless type Day[335151]
  } function sleep[335369](arg t[335366] : real(64)[16], arg unit[335376] : TimeUnits[335132] = seconds[335126]) : _unknown[51] "inline" "no return value for void"
  { function chpl_task_sleep[335387](arg s[335384] : c_double[223553]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type void[4]
    }
    if(335424 call _cond_test(335396 call < t[335366] 0))
    {(335419 call warning "sleep() called with negative time parameter: '" t[335366] "'")(335422 return _void[55])
    }(335441 call chpl_task_sleep(335438 call _cast c_double[223553](335436 call _convert_to_seconds unit[335376](335434 call _cast real(64)[16] t[335366]))))
  }
  { scopeless type void[4]
  } function Timer[335659].clear[335469](arg _mt[335663]:_MT[238], arg this[335661]:Timer[335659]) : _unknown[51] "method" "primary method" "no return value for void"
  {(335474 call =(411827 call . this[335661] c"accumulated") 0.0)
    if(335487 call _cond_test(411834 call . this[335661] c"running"))
    {(335483 call =(411841 call . this[335661] c"time")(335482 call chpl_now_timevalue))
    }
  }
  { scopeless type void[4]
  } function Timer[335659].start[335496](arg _mt[335667]:_MT[238], arg this[335665]:Timer[335659]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335537 call _cond_test(335500 call !(411846 call . this[335665] c"running")))
    {(335504 call =(411851 call . this[335665] c"running") 1)(335512 call =(411856 call . this[335665] c"time")(335511 call chpl_now_timevalue))
    }
    {(335534 call warning "start called on a timer that has not been stopped")
    }
  }
  { scopeless type void[4]
  } function Timer[335659].stop[335547](arg _mt[335671]:_MT[238], arg this[335669]:Timer[335659]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335596 call _cond_test(411861 call . this[335669] c"running"))
    { unknown time2[335555](335554 call chpl_now_timevalue) _timevalue[335030](335558 'end of statement')(335566 call +=(411867 call . this[335669] c"accumulated")(335565 call _diff_time time2[335555](411873 call . this[335669] c"time")))(335571 call =(411878 call . this[335669] c"running") 0)
    }
    {(335593 call warning "stop called on a timer that has not been started")
    }
  }
  { scopeless type void[4]
  } function Timer[335659].elapsed[335615](arg _mt[335675]:_MT[238], arg this[335673]:Timer[335659], arg unit[335611] : TimeUnits[335132] = seconds[335126]) : _unknown[51] "method" "primary method"
  {
    if(335650 call _cond_test(411884 call . this[335673] c"running"))
    { unknown time2[335623](335622 call chpl_now_timevalue) _timevalue[335030](335626 'end of statement')(335640 return(335639 call _convert_microseconds unit[335611](335637 call +(411891 call . this[335673] c"accumulated")(335636 call _diff_time time2[335623](411897 call . this[335673] c"time")))))
    }
    {(335647 return(335646 call _convert_microseconds unit[335611](411903 call . this[335673] c"accumulated")))
    }
  }
  { scopeless type real(64)[16]
  } type Timer[335659] unknown time[335451] "no doc"(335450 call chpl_null_timevalue) _timevalue[335030] unknown accumulated[335457] "no doc" 0.0 real(64)[16] unknown running[335463] "no doc" 0 bool[10] function _diff_time[335684](arg t1[335681] : _timevalue[335030], arg t2[335687] : _timevalue[335030]) : _unknown[51] "inline" "private"
  { function chpl_timevalue_seconds[335696](arg t[335693] : _timevalue[335030]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type(335701 call int(64)[13] 64)
    } function chpl_timevalue_microseconds[335712](arg t[335709] : _timevalue[335030]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type(335717 call int(64)[13] 64)
    } unknown s1[335725](335724 call chpl_timevalue_seconds t1[335681])(335728 'end of statement') unknown us1[335733](335732 call chpl_timevalue_microseconds t1[335681])(335736 'end of statement') unknown s2[335741](335740 call chpl_timevalue_seconds t2[335687])(335744 'end of statement') unknown us2[335749](335748 call chpl_timevalue_microseconds t2[335687])(335752 'end of statement')(335771 return(335769 call -(335760 call +(335757 call * s1[335725] 1e+06) us1[335733])(335767 call +(335764 call * s2[335741] 1e+06) us2[335749])))
  } function _convert_to_seconds[335781](arg unit[335778] : TimeUnits[335132], arg us[335784] : real(64)[16]) : _unknown[51] "private"
  {
    { unknown tmp[335871] "expr temp" "maybe param" "maybe type" "temp"(335873 'move' tmp[335871] unit[335778])
      if(335878 call _cond_test(335875 call == tmp[335871] microseconds[335122]))
      {(335800 return(335798 call * us[335784] 1e-06))
      }
      {
        if(335884 call _cond_test(335881 call == tmp[335871] milliseconds[335124]))
        {(335818 return(335816 call * us[335784] 0.001))
        }
        {
          if(335891 call _cond_test(335888 call == tmp[335871] seconds[335126]))
          {(335829 return us[335784])
          }
          {
            if(335898 call _cond_test(335895 call == tmp[335871] minutes[335128]))
            {(335847 return(335845 call * us[335784] 60.0))
            }
            {
              if(335905 call _cond_test(335902 call == tmp[335871] hours[335130]))
              {(335865 return(335863 call * us[335784] 3600.0))
              }
            }
          }
        }
      }
    }(335933 call exhaustiveSelectHalt module=[255] HaltWrappers[210018] "unknown timeunits type")(335938 return(335936 call - 1.0))(366150 'referenced modules list' HaltWrappers[210018])
  } function _convert_microseconds[335948](arg unit[335945] : TimeUnits[335132], arg us[335951] : real(64)[16]) : _unknown[51] "private"
  {
    { unknown tmp[336030] "expr temp" "maybe param" "maybe type" "temp"(336032 'move' tmp[336030] unit[335945])
      if(336037 call _cond_test(336034 call == tmp[336030] microseconds[335122]))
      {(335962 return us[335951])
      }
      {
        if(336043 call _cond_test(336040 call == tmp[336030] milliseconds[335124]))
        {(335978 return(335976 call / us[335951] 1000.0))
        }
        {
          if(336050 call _cond_test(336047 call == tmp[336030] seconds[335126]))
          {(335992 return(335990 call / us[335951] 1e+06))
          }
          {
            if(336057 call _cond_test(336054 call == tmp[336030] minutes[335128]))
            {(336008 return(336006 call / us[335951] 6e+07))
            }
            {
              if(336064 call _cond_test(336061 call == tmp[336030] hours[335130]))
              {(336024 return(336022 call / us[335951] 3.6e+09))
              }
            }
          }
        }
      }
    }(336076 call exhaustiveSelectHalt module=[255] HaltWrappers[210018] "unknown timeunits type")(336081 return(336079 call - 1.0))(366161 'referenced modules list' HaltWrappers[210018])
  }(355616 'used modules list'(353118 'use' ChapelStandard[20267])(335012 'use' SysBasic[223537])(335016 'import' HaltWrappers[210018]))
}