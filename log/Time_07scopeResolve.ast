AST dump for Time after pass scopeResolve.
Module use list: ChapelStandard SysBasic HaltWrappers 

{ function chpl_now_time[334892]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type real(64)[16]
  } type _timevalue[334902] function chpl_null_timevalue[334906]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type _timevalue[334902]
  } function chpl_now_timevalue[334914]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type _timevalue[334902]
  } function chpl_timevalue_parts[334926](arg t[334923] : _timevalue[334902], out arg seconds[334932] :(334931 call int(64)[13] 32), out arg minutes[334939] :(334938 call int(64)[13] 32), out arg hours[334946] :(334945 call int(64)[13] 32), out arg mday[334953] :(334952 call int(64)[13] 32), out arg month[334960] :(334959 call int(64)[13] 32), out arg year[334967] :(334966 call int(64)[13] 32), out arg wday[334974] :(334973 call int(64)[13] 32), out arg yday[334981] :(334980 call int(64)[13] 32), out arg isdst[334988] :(334987 call int(64)[13] 32)) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  } type TimeUnits[335004] def microseconds[334994]:TimeUnits[335004] def milliseconds[334996]:TimeUnits[335004] def seconds[334998]:TimeUnits[335004] def minutes[335000]:TimeUnits[335004] def hours[335002]:TimeUnits[335004] type Day[335023] def sunday[335009]:Day[335023] 0 def monday[335011]:Day[335023] def tuesday[335013]:Day[335023] def wednesday[335015]:Day[335023] def thursday[335017]:Day[335023] def friday[335019]:Day[335023] def saturday[335021]:Day[335023] function getCurrentTime[335039](arg unit[335035] : TimeUnits[335004] = seconds[334998]) : _unknown[51]
  {(335052 return(335051 call _convert_microseconds unit[335035](335050 call chpl_now_time)))
  }
  { scopeless type(335044 call real(64)[16] 64)
  } function getCurrentDate[335060]() : _unknown[51]
  { unknown now[335065](335064 call chpl_now_timevalue)(335068 'end of statement') unknown seconds[335070](335097 call int(64)[13] 32) unknown minutes[335073](335116 'typeof' seconds[335070]) unknown hours[335076](335114 'typeof' minutes[335073]) unknown mday[335079](335112 'typeof' hours[335076]) unknown month[335082](335110 'typeof' mday[335079]) unknown year[335085](335108 'typeof' month[335082]) unknown wday[335088](335106 'typeof' year[335085]) unknown yday[335091](335104 'typeof' wday[335088]) unknown isdst[335098](335102 'typeof' yday[335091])(335117 'end of statement')(335130 call chpl_timevalue_parts now[335065] seconds[335070] minutes[335073] hours[335076] mday[335079] month[335082] year[335085] wday[335088] yday[335091] isdst[335098])(335146 return(335144 call _build_tuple(335136 call + year[335085] 1900)(335140 call + month[335082] 1) mday[335079]))
  } function getCurrentDayOfWeek[335152]() : _unknown[51]
  { unknown now[335158](335157 call chpl_now_timevalue)(335161 'end of statement') unknown seconds[335163](335190 call int(64)[13] 32) unknown minutes[335166](335209 'typeof' seconds[335163]) unknown hours[335169](335207 'typeof' minutes[335166]) unknown mday[335172](335205 'typeof' hours[335169]) unknown month[335175](335203 'typeof' mday[335172]) unknown year[335178](335201 'typeof' month[335175]) unknown wday[335181](335199 'typeof' year[335178]) unknown yday[335184](335197 'typeof' wday[335181]) unknown isdst[335191](335195 'typeof' yday[335184])(335210 'end of statement')(335223 call chpl_timevalue_parts now[335158] seconds[335163] minutes[335166] hours[335169] mday[335172] month[335175] year[335178] wday[335181] yday[335184] isdst[335191])(335230 return(335229 'try!-expr'(335227 call _cast Day[335023] wday[335181])))
  }
  { scopeless type Day[335023]
  } function sleep[335241](arg t[335238] : real(64)[16], arg unit[335248] : TimeUnits[335004] = seconds[334998]) : _unknown[51] "inline" "no return value for void"
  { function chpl_task_sleep[335259](arg s[335256] : c_double[223444]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type void[4]
    }
    if(335296 call _cond_test(335268 call < t[335238] 0))
    {(335291 call warning "sleep() called with negative time parameter: '" t[335238] "'")(335294 return _void[55])
    }(335313 call chpl_task_sleep(335310 call _cast c_double[223444](335308 call _convert_to_seconds unit[335248](335306 call _cast real(64)[16] t[335238]))))
  }
  { scopeless type void[4]
  } function Timer[335531].clear[335341](arg _mt[335535]:_MT[238], arg this[335533]:Timer[335531]) : _unknown[51] "method" "primary method" "no return value for void"
  {(335346 call =(411695 call . this[335533] c"accumulated") 0.0)
    if(335359 call _cond_test(411702 call . this[335533] c"running"))
    {(335355 call =(411709 call . this[335533] c"time")(335354 call chpl_now_timevalue))
    }
  }
  { scopeless type void[4]
  } function Timer[335531].start[335368](arg _mt[335539]:_MT[238], arg this[335537]:Timer[335531]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335409 call _cond_test(335372 call !(411714 call . this[335537] c"running")))
    {(335376 call =(411719 call . this[335537] c"running") 1)(335384 call =(411724 call . this[335537] c"time")(335383 call chpl_now_timevalue))
    }
    {(335406 call warning "start called on a timer that has not been stopped")
    }
  }
  { scopeless type void[4]
  } function Timer[335531].stop[335419](arg _mt[335543]:_MT[238], arg this[335541]:Timer[335531]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335468 call _cond_test(411729 call . this[335541] c"running"))
    { unknown time2[335427](335426 call chpl_now_timevalue) _timevalue[334902](335430 'end of statement')(335438 call +=(411735 call . this[335541] c"accumulated")(335437 call _diff_time time2[335427](411741 call . this[335541] c"time")))(335443 call =(411746 call . this[335541] c"running") 0)
    }
    {(335465 call warning "stop called on a timer that has not been started")
    }
  }
  { scopeless type void[4]
  } function Timer[335531].elapsed[335487](arg _mt[335547]:_MT[238], arg this[335545]:Timer[335531], arg unit[335483] : TimeUnits[335004] = seconds[334998]) : _unknown[51] "method" "primary method"
  {
    if(335522 call _cond_test(411752 call . this[335545] c"running"))
    { unknown time2[335495](335494 call chpl_now_timevalue) _timevalue[334902](335498 'end of statement')(335512 return(335511 call _convert_microseconds unit[335483](335509 call +(411759 call . this[335545] c"accumulated")(335508 call _diff_time time2[335495](411765 call . this[335545] c"time")))))
    }
    {(335519 return(335518 call _convert_microseconds unit[335483](411771 call . this[335545] c"accumulated")))
    }
  }
  { scopeless type real(64)[16]
  } type Timer[335531] unknown time[335323] "no doc"(335322 call chpl_null_timevalue) _timevalue[334902] unknown accumulated[335329] "no doc" 0.0 real(64)[16] unknown running[335335] "no doc" 0 bool[10] function _diff_time[335556](arg t1[335553] : _timevalue[334902], arg t2[335559] : _timevalue[334902]) : _unknown[51] "inline" "private"
  { function chpl_timevalue_seconds[335568](arg t[335565] : _timevalue[334902]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type(335573 call int(64)[13] 64)
    } function chpl_timevalue_microseconds[335584](arg t[335581] : _timevalue[334902]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type(335589 call int(64)[13] 64)
    } unknown s1[335597](335596 call chpl_timevalue_seconds t1[335553])(335600 'end of statement') unknown us1[335605](335604 call chpl_timevalue_microseconds t1[335553])(335608 'end of statement') unknown s2[335613](335612 call chpl_timevalue_seconds t2[335559])(335616 'end of statement') unknown us2[335621](335620 call chpl_timevalue_microseconds t2[335559])(335624 'end of statement')(335643 return(335641 call -(335632 call +(335629 call * s1[335597] 1e+06) us1[335605])(335639 call +(335636 call * s2[335613] 1e+06) us2[335621])))
  } function _convert_to_seconds[335653](arg unit[335650] : TimeUnits[335004], arg us[335656] : real(64)[16]) : _unknown[51] "private"
  {
    { unknown tmp[335743] "expr temp" "maybe param" "maybe type" "temp"(335745 'move' tmp[335743] unit[335650])
      if(335750 call _cond_test(335747 call == tmp[335743] microseconds[334994]))
      {(335672 return(335670 call * us[335656] 1e-06))
      }
      {
        if(335756 call _cond_test(335753 call == tmp[335743] milliseconds[334996]))
        {(335690 return(335688 call * us[335656] 0.001))
        }
        {
          if(335763 call _cond_test(335760 call == tmp[335743] seconds[334998]))
          {(335701 return us[335656])
          }
          {
            if(335770 call _cond_test(335767 call == tmp[335743] minutes[335000]))
            {(335719 return(335717 call * us[335656] 60.0))
            }
            {
              if(335777 call _cond_test(335774 call == tmp[335743] hours[335002]))
              {(335737 return(335735 call * us[335656] 3600.0))
              }
            }
          }
        }
      }
    }(335805 call exhaustiveSelectHalt module=[255] HaltWrappers[209910] "unknown timeunits type")(335810 return(335808 call - 1.0))(366019 'referenced modules list' HaltWrappers[209910])
  } function _convert_microseconds[335820](arg unit[335817] : TimeUnits[335004], arg us[335823] : real(64)[16]) : _unknown[51] "private"
  {
    { unknown tmp[335902] "expr temp" "maybe param" "maybe type" "temp"(335904 'move' tmp[335902] unit[335817])
      if(335909 call _cond_test(335906 call == tmp[335902] microseconds[334994]))
      {(335834 return us[335823])
      }
      {
        if(335915 call _cond_test(335912 call == tmp[335902] milliseconds[334996]))
        {(335850 return(335848 call / us[335823] 1000.0))
        }
        {
          if(335922 call _cond_test(335919 call == tmp[335902] seconds[334998]))
          {(335864 return(335862 call / us[335823] 1e+06))
          }
          {
            if(335929 call _cond_test(335926 call == tmp[335902] minutes[335000]))
            {(335880 return(335878 call / us[335823] 6e+07))
            }
            {
              if(335936 call _cond_test(335933 call == tmp[335902] hours[335002]))
              {(335896 return(335894 call / us[335823] 3.6e+09))
              }
            }
          }
        }
      }
    }(335948 call exhaustiveSelectHalt module=[255] HaltWrappers[209910] "unknown timeunits type")(335953 return(335951 call - 1.0))(366030 'referenced modules list' HaltWrappers[209910])
  }(355485 'used modules list'(352988 'use' ChapelStandard[20264])(334884 'use' SysBasic[223428])(334888 'import' HaltWrappers[209910]))
}