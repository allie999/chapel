AST dump for Time after pass scopeResolve.
Module use list: ChapelStandard SysBasic HaltWrappers 

{ function chpl_now_time[335018]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type real(64)[16]
  } type _timevalue[335028] function chpl_null_timevalue[335032]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type _timevalue[335028]
  } function chpl_now_timevalue[335040]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type _timevalue[335028]
  } function chpl_timevalue_parts[335052](arg t[335049] : _timevalue[335028], out arg seconds[335058] :(335057 call int(64)[13] 32), out arg minutes[335065] :(335064 call int(64)[13] 32), out arg hours[335072] :(335071 call int(64)[13] 32), out arg mday[335079] :(335078 call int(64)[13] 32), out arg month[335086] :(335085 call int(64)[13] 32), out arg year[335093] :(335092 call int(64)[13] 32), out arg wday[335100] :(335099 call int(64)[13] 32), out arg yday[335107] :(335106 call int(64)[13] 32), out arg isdst[335114] :(335113 call int(64)[13] 32)) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  } type TimeUnits[335130] def microseconds[335120]:TimeUnits[335130] def milliseconds[335122]:TimeUnits[335130] def seconds[335124]:TimeUnits[335130] def minutes[335126]:TimeUnits[335130] def hours[335128]:TimeUnits[335130] type Day[335149] def sunday[335135]:Day[335149] 0 def monday[335137]:Day[335149] def tuesday[335139]:Day[335149] def wednesday[335141]:Day[335149] def thursday[335143]:Day[335149] def friday[335145]:Day[335149] def saturday[335147]:Day[335149] function getCurrentTime[335165](arg unit[335161] : TimeUnits[335130] = seconds[335124]) : _unknown[51]
  {(335178 return(335177 call _convert_microseconds unit[335161](335176 call chpl_now_time)))
  }
  { scopeless type(335170 call real(64)[16] 64)
  } function getCurrentDate[335186]() : _unknown[51]
  { unknown now[335191](335190 call chpl_now_timevalue)(335194 'end of statement') unknown seconds[335196](335223 call int(64)[13] 32) unknown minutes[335199](335242 'typeof' seconds[335196]) unknown hours[335202](335240 'typeof' minutes[335199]) unknown mday[335205](335238 'typeof' hours[335202]) unknown month[335208](335236 'typeof' mday[335205]) unknown year[335211](335234 'typeof' month[335208]) unknown wday[335214](335232 'typeof' year[335211]) unknown yday[335217](335230 'typeof' wday[335214]) unknown isdst[335224](335228 'typeof' yday[335217])(335243 'end of statement')(335256 call chpl_timevalue_parts now[335191] seconds[335196] minutes[335199] hours[335202] mday[335205] month[335208] year[335211] wday[335214] yday[335217] isdst[335224])(335272 return(335270 call _build_tuple(335262 call + year[335211] 1900)(335266 call + month[335208] 1) mday[335205]))
  } function getCurrentDayOfWeek[335278]() : _unknown[51]
  { unknown now[335284](335283 call chpl_now_timevalue)(335287 'end of statement') unknown seconds[335289](335316 call int(64)[13] 32) unknown minutes[335292](335335 'typeof' seconds[335289]) unknown hours[335295](335333 'typeof' minutes[335292]) unknown mday[335298](335331 'typeof' hours[335295]) unknown month[335301](335329 'typeof' mday[335298]) unknown year[335304](335327 'typeof' month[335301]) unknown wday[335307](335325 'typeof' year[335304]) unknown yday[335310](335323 'typeof' wday[335307]) unknown isdst[335317](335321 'typeof' yday[335310])(335336 'end of statement')(335349 call chpl_timevalue_parts now[335284] seconds[335289] minutes[335292] hours[335295] mday[335298] month[335301] year[335304] wday[335307] yday[335310] isdst[335317])(335356 return(335355 'try!-expr'(335353 call _cast Day[335149] wday[335307])))
  }
  { scopeless type Day[335149]
  } function sleep[335367](arg t[335364] : real(64)[16], arg unit[335374] : TimeUnits[335130] = seconds[335124]) : _unknown[51] "inline" "no return value for void"
  { function chpl_task_sleep[335385](arg s[335382] : c_double[223551]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type void[4]
    }
    if(335422 call _cond_test(335394 call < t[335364] 0))
    {(335417 call warning "sleep() called with negative time parameter: '" t[335364] "'")(335420 return _void[55])
    }(335439 call chpl_task_sleep(335436 call _cast c_double[223551](335434 call _convert_to_seconds unit[335374](335432 call _cast real(64)[16] t[335364]))))
  }
  { scopeless type void[4]
  } function Timer[335657].clear[335467](arg _mt[335661]:_MT[238], arg this[335659]:Timer[335657]) : _unknown[51] "method" "primary method" "no return value for void"
  {(335472 call =(411822 call . this[335659] c"accumulated") 0.0)
    if(335485 call _cond_test(411829 call . this[335659] c"running"))
    {(335481 call =(411836 call . this[335659] c"time")(335480 call chpl_now_timevalue))
    }
  }
  { scopeless type void[4]
  } function Timer[335657].start[335494](arg _mt[335665]:_MT[238], arg this[335663]:Timer[335657]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335535 call _cond_test(335498 call !(411841 call . this[335663] c"running")))
    {(335502 call =(411846 call . this[335663] c"running") 1)(335510 call =(411851 call . this[335663] c"time")(335509 call chpl_now_timevalue))
    }
    {(335532 call warning "start called on a timer that has not been stopped")
    }
  }
  { scopeless type void[4]
  } function Timer[335657].stop[335545](arg _mt[335669]:_MT[238], arg this[335667]:Timer[335657]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335594 call _cond_test(411856 call . this[335667] c"running"))
    { unknown time2[335553](335552 call chpl_now_timevalue) _timevalue[335028](335556 'end of statement')(335564 call +=(411862 call . this[335667] c"accumulated")(335563 call _diff_time time2[335553](411868 call . this[335667] c"time")))(335569 call =(411873 call . this[335667] c"running") 0)
    }
    {(335591 call warning "stop called on a timer that has not been started")
    }
  }
  { scopeless type void[4]
  } function Timer[335657].elapsed[335613](arg _mt[335673]:_MT[238], arg this[335671]:Timer[335657], arg unit[335609] : TimeUnits[335130] = seconds[335124]) : _unknown[51] "method" "primary method"
  {
    if(335648 call _cond_test(411879 call . this[335671] c"running"))
    { unknown time2[335621](335620 call chpl_now_timevalue) _timevalue[335028](335624 'end of statement')(335638 return(335637 call _convert_microseconds unit[335609](335635 call +(411886 call . this[335671] c"accumulated")(335634 call _diff_time time2[335621](411892 call . this[335671] c"time")))))
    }
    {(335645 return(335644 call _convert_microseconds unit[335609](411898 call . this[335671] c"accumulated")))
    }
  }
  { scopeless type real(64)[16]
  } type Timer[335657] unknown time[335449] "no doc"(335448 call chpl_null_timevalue) _timevalue[335028] unknown accumulated[335455] "no doc" 0.0 real(64)[16] unknown running[335461] "no doc" 0 bool[10] function _diff_time[335682](arg t1[335679] : _timevalue[335028], arg t2[335685] : _timevalue[335028]) : _unknown[51] "inline" "private"
  { function chpl_timevalue_seconds[335694](arg t[335691] : _timevalue[335028]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type(335699 call int(64)[13] 64)
    } function chpl_timevalue_microseconds[335710](arg t[335707] : _timevalue[335028]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type(335715 call int(64)[13] 64)
    } unknown s1[335723](335722 call chpl_timevalue_seconds t1[335679])(335726 'end of statement') unknown us1[335731](335730 call chpl_timevalue_microseconds t1[335679])(335734 'end of statement') unknown s2[335739](335738 call chpl_timevalue_seconds t2[335685])(335742 'end of statement') unknown us2[335747](335746 call chpl_timevalue_microseconds t2[335685])(335750 'end of statement')(335769 return(335767 call -(335758 call +(335755 call * s1[335723] 1e+06) us1[335731])(335765 call +(335762 call * s2[335739] 1e+06) us2[335747])))
  } function _convert_to_seconds[335779](arg unit[335776] : TimeUnits[335130], arg us[335782] : real(64)[16]) : _unknown[51] "private"
  {
    { unknown tmp[335869] "expr temp" "maybe param" "maybe type" "temp"(335871 'move' tmp[335869] unit[335776])
      if(335876 call _cond_test(335873 call == tmp[335869] microseconds[335120]))
      {(335798 return(335796 call * us[335782] 1e-06))
      }
      {
        if(335882 call _cond_test(335879 call == tmp[335869] milliseconds[335122]))
        {(335816 return(335814 call * us[335782] 0.001))
        }
        {
          if(335889 call _cond_test(335886 call == tmp[335869] seconds[335124]))
          {(335827 return us[335782])
          }
          {
            if(335896 call _cond_test(335893 call == tmp[335869] minutes[335126]))
            {(335845 return(335843 call * us[335782] 60.0))
            }
            {
              if(335903 call _cond_test(335900 call == tmp[335869] hours[335128]))
              {(335863 return(335861 call * us[335782] 3600.0))
              }
            }
          }
        }
      }
    }(335931 call exhaustiveSelectHalt module=[255] HaltWrappers[210016] "unknown timeunits type")(335936 return(335934 call - 1.0))(366147 'referenced modules list' HaltWrappers[210016])
  } function _convert_microseconds[335946](arg unit[335943] : TimeUnits[335130], arg us[335949] : real(64)[16]) : _unknown[51] "private"
  {
    { unknown tmp[336028] "expr temp" "maybe param" "maybe type" "temp"(336030 'move' tmp[336028] unit[335943])
      if(336035 call _cond_test(336032 call == tmp[336028] microseconds[335120]))
      {(335960 return us[335949])
      }
      {
        if(336041 call _cond_test(336038 call == tmp[336028] milliseconds[335122]))
        {(335976 return(335974 call / us[335949] 1000.0))
        }
        {
          if(336048 call _cond_test(336045 call == tmp[336028] seconds[335124]))
          {(335990 return(335988 call / us[335949] 1e+06))
          }
          {
            if(336055 call _cond_test(336052 call == tmp[336028] minutes[335126]))
            {(336006 return(336004 call / us[335949] 6e+07))
            }
            {
              if(336062 call _cond_test(336059 call == tmp[336028] hours[335128]))
              {(336022 return(336020 call / us[335949] 3.6e+09))
              }
            }
          }
        }
      }
    }(336074 call exhaustiveSelectHalt module=[255] HaltWrappers[210016] "unknown timeunits type")(336079 return(336077 call - 1.0))(366158 'referenced modules list' HaltWrappers[210016])
  }(355613 'used modules list'(353116 'use' ChapelStandard[20267])(335010 'use' SysBasic[223535])(335014 'import' HaltWrappers[210016]))
}