AST dump for Time after pass scopeResolve.
Module use list: ChapelStandard SysBasic HaltWrappers 

{ function chpl_now_time[334980]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type real(64)[16]
  } type _timevalue[334990] function chpl_null_timevalue[334994]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type _timevalue[334990]
  } function chpl_now_timevalue[335002]() : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type _timevalue[334990]
  } function chpl_timevalue_parts[335014](arg t[335011] : _timevalue[334990], out arg seconds[335020] :(335019 call int(64)[13] 32), out arg minutes[335027] :(335026 call int(64)[13] 32), out arg hours[335034] :(335033 call int(64)[13] 32), out arg mday[335041] :(335040 call int(64)[13] 32), out arg month[335048] :(335047 call int(64)[13] 32), out arg year[335055] :(335054 call int(64)[13] 32), out arg wday[335062] :(335061 call int(64)[13] 32), out arg yday[335069] :(335068 call int(64)[13] 32), out arg isdst[335076] :(335075 call int(64)[13] 32)) : void[4] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  } type TimeUnits[335092] def microseconds[335082]:TimeUnits[335092] def milliseconds[335084]:TimeUnits[335092] def seconds[335086]:TimeUnits[335092] def minutes[335088]:TimeUnits[335092] def hours[335090]:TimeUnits[335092] type Day[335111] def sunday[335097]:Day[335111] 0 def monday[335099]:Day[335111] def tuesday[335101]:Day[335111] def wednesday[335103]:Day[335111] def thursday[335105]:Day[335111] def friday[335107]:Day[335111] def saturday[335109]:Day[335111] function getCurrentTime[335127](arg unit[335123] : TimeUnits[335092] = seconds[335086]) : _unknown[51]
  {(335140 return(335139 call _convert_microseconds unit[335123](335138 call chpl_now_time)))
  }
  { scopeless type(335132 call real(64)[16] 64)
  } function getCurrentDate[335148]() : _unknown[51]
  { unknown now[335153](335152 call chpl_now_timevalue)(335156 'end of statement') unknown seconds[335158](335185 call int(64)[13] 32) unknown minutes[335161](335204 'typeof' seconds[335158]) unknown hours[335164](335202 'typeof' minutes[335161]) unknown mday[335167](335200 'typeof' hours[335164]) unknown month[335170](335198 'typeof' mday[335167]) unknown year[335173](335196 'typeof' month[335170]) unknown wday[335176](335194 'typeof' year[335173]) unknown yday[335179](335192 'typeof' wday[335176]) unknown isdst[335186](335190 'typeof' yday[335179])(335205 'end of statement')(335218 call chpl_timevalue_parts now[335153] seconds[335158] minutes[335161] hours[335164] mday[335167] month[335170] year[335173] wday[335176] yday[335179] isdst[335186])(335234 return(335232 call _build_tuple(335224 call + year[335173] 1900)(335228 call + month[335170] 1) mday[335167]))
  } function getCurrentDayOfWeek[335240]() : _unknown[51]
  { unknown now[335246](335245 call chpl_now_timevalue)(335249 'end of statement') unknown seconds[335251](335278 call int(64)[13] 32) unknown minutes[335254](335297 'typeof' seconds[335251]) unknown hours[335257](335295 'typeof' minutes[335254]) unknown mday[335260](335293 'typeof' hours[335257]) unknown month[335263](335291 'typeof' mday[335260]) unknown year[335266](335289 'typeof' month[335263]) unknown wday[335269](335287 'typeof' year[335266]) unknown yday[335272](335285 'typeof' wday[335269]) unknown isdst[335279](335283 'typeof' yday[335272])(335298 'end of statement')(335311 call chpl_timevalue_parts now[335246] seconds[335251] minutes[335254] hours[335257] mday[335260] month[335263] year[335266] wday[335269] yday[335272] isdst[335279])(335318 return(335317 'try!-expr'(335315 call _cast Day[335111] wday[335269])))
  }
  { scopeless type Day[335111]
  } function sleep[335329](arg t[335326] : real(64)[16], arg unit[335336] : TimeUnits[335092] = seconds[335086]) : _unknown[51] "inline" "no return value for void"
  { function chpl_task_sleep[335347](arg s[335344] : c_double[223532]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type void[4]
    }
    if(335384 call _cond_test(335356 call < t[335326] 0))
    {(335379 call warning "sleep() called with negative time parameter: '" t[335326] "'")(335382 return _void[55])
    }(335401 call chpl_task_sleep(335398 call _cast c_double[223532](335396 call _convert_to_seconds unit[335336](335394 call _cast real(64)[16] t[335326]))))
  }
  { scopeless type void[4]
  } function Timer[335619].clear[335429](arg _mt[335623]:_MT[238], arg this[335621]:Timer[335619]) : _unknown[51] "method" "primary method" "no return value for void"
  {(335434 call =(411784 call . this[335621] c"accumulated") 0.0)
    if(335447 call _cond_test(411791 call . this[335621] c"running"))
    {(335443 call =(411798 call . this[335621] c"time")(335442 call chpl_now_timevalue))
    }
  }
  { scopeless type void[4]
  } function Timer[335619].start[335456](arg _mt[335627]:_MT[238], arg this[335625]:Timer[335619]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335497 call _cond_test(335460 call !(411803 call . this[335625] c"running")))
    {(335464 call =(411808 call . this[335625] c"running") 1)(335472 call =(411813 call . this[335625] c"time")(335471 call chpl_now_timevalue))
    }
    {(335494 call warning "start called on a timer that has not been stopped")
    }
  }
  { scopeless type void[4]
  } function Timer[335619].stop[335507](arg _mt[335631]:_MT[238], arg this[335629]:Timer[335619]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(335556 call _cond_test(411818 call . this[335629] c"running"))
    { unknown time2[335515](335514 call chpl_now_timevalue) _timevalue[334990](335518 'end of statement')(335526 call +=(411824 call . this[335629] c"accumulated")(335525 call _diff_time time2[335515](411830 call . this[335629] c"time")))(335531 call =(411835 call . this[335629] c"running") 0)
    }
    {(335553 call warning "stop called on a timer that has not been started")
    }
  }
  { scopeless type void[4]
  } function Timer[335619].elapsed[335575](arg _mt[335635]:_MT[238], arg this[335633]:Timer[335619], arg unit[335571] : TimeUnits[335092] = seconds[335086]) : _unknown[51] "method" "primary method"
  {
    if(335610 call _cond_test(411841 call . this[335633] c"running"))
    { unknown time2[335583](335582 call chpl_now_timevalue) _timevalue[334990](335586 'end of statement')(335600 return(335599 call _convert_microseconds unit[335571](335597 call +(411848 call . this[335633] c"accumulated")(335596 call _diff_time time2[335583](411854 call . this[335633] c"time")))))
    }
    {(335607 return(335606 call _convert_microseconds unit[335571](411860 call . this[335633] c"accumulated")))
    }
  }
  { scopeless type real(64)[16]
  } type Timer[335619] unknown time[335411] "no doc"(335410 call chpl_null_timevalue) _timevalue[334990] unknown accumulated[335417] "no doc" 0.0 real(64)[16] unknown running[335423] "no doc" 0 bool[10] function _diff_time[335644](arg t1[335641] : _timevalue[334990], arg t2[335647] : _timevalue[334990]) : _unknown[51] "inline" "private"
  { function chpl_timevalue_seconds[335656](arg t[335653] : _timevalue[334990]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type(335661 call int(64)[13] 64)
    } function chpl_timevalue_microseconds[335672](arg t[335669] : _timevalue[334990]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type(335677 call int(64)[13] 64)
    } unknown s1[335685](335684 call chpl_timevalue_seconds t1[335641])(335688 'end of statement') unknown us1[335693](335692 call chpl_timevalue_microseconds t1[335641])(335696 'end of statement') unknown s2[335701](335700 call chpl_timevalue_seconds t2[335647])(335704 'end of statement') unknown us2[335709](335708 call chpl_timevalue_microseconds t2[335647])(335712 'end of statement')(335731 return(335729 call -(335720 call +(335717 call * s1[335685] 1e+06) us1[335693])(335727 call +(335724 call * s2[335701] 1e+06) us2[335709])))
  } function _convert_to_seconds[335741](arg unit[335738] : TimeUnits[335092], arg us[335744] : real(64)[16]) : _unknown[51] "private"
  {
    { unknown tmp[335831] "expr temp" "maybe param" "maybe type" "temp"(335833 'move' tmp[335831] unit[335738])
      if(335838 call _cond_test(335835 call == tmp[335831] microseconds[335082]))
      {(335760 return(335758 call * us[335744] 1e-06))
      }
      {
        if(335844 call _cond_test(335841 call == tmp[335831] milliseconds[335084]))
        {(335778 return(335776 call * us[335744] 0.001))
        }
        {
          if(335851 call _cond_test(335848 call == tmp[335831] seconds[335086]))
          {(335789 return us[335744])
          }
          {
            if(335858 call _cond_test(335855 call == tmp[335831] minutes[335088]))
            {(335807 return(335805 call * us[335744] 60.0))
            }
            {
              if(335865 call _cond_test(335862 call == tmp[335831] hours[335090]))
              {(335825 return(335823 call * us[335744] 3600.0))
              }
            }
          }
        }
      }
    }(335893 call exhaustiveSelectHalt module=[255] HaltWrappers[209998] "unknown timeunits type")(335898 return(335896 call - 1.0))(366107 'referenced modules list' HaltWrappers[209998])
  } function _convert_microseconds[335908](arg unit[335905] : TimeUnits[335092], arg us[335911] : real(64)[16]) : _unknown[51] "private"
  {
    { unknown tmp[335990] "expr temp" "maybe param" "maybe type" "temp"(335992 'move' tmp[335990] unit[335905])
      if(335997 call _cond_test(335994 call == tmp[335990] microseconds[335082]))
      {(335922 return us[335911])
      }
      {
        if(336003 call _cond_test(336000 call == tmp[335990] milliseconds[335084]))
        {(335938 return(335936 call / us[335911] 1000.0))
        }
        {
          if(336010 call _cond_test(336007 call == tmp[335990] seconds[335086]))
          {(335952 return(335950 call / us[335911] 1e+06))
          }
          {
            if(336017 call _cond_test(336014 call == tmp[335990] minutes[335088]))
            {(335968 return(335966 call / us[335911] 6e+07))
            }
            {
              if(336024 call _cond_test(336021 call == tmp[335990] hours[335090]))
              {(335984 return(335982 call / us[335911] 3.6e+09))
              }
            }
          }
        }
      }
    }(336036 call exhaustiveSelectHalt module=[255] HaltWrappers[209998] "unknown timeunits type")(336041 return(336039 call - 1.0))(366118 'referenced modules list' HaltWrappers[209998])
  }(355573 'used modules list'(353076 'use' ChapelStandard[20264])(334972 'use' SysBasic[223516])(334976 'import' HaltWrappers[209998]))
}