AST dump for HeapSort after pass expandExternArrayCalls.
Module use list: 

{
  (353064 'use' ChapelStandard)
  (269665 'import' Sort.{defaultComparator, chpl_check_comparator, chpl_compare})
  function heapSort[269680](arg Data[269677] :
  (269675 call chpl__buildArrayRuntimeType unknown Dom[269670] unknown eltType[269673]), arg comparator[269685] :
  unknown rec[269682] =
  defaultComparator) : _unknown[51]
  {
    (269693 call chpl_check_comparator comparator eltType)
    if(269725 call _cond_test(269701 call !=(269697 call . Dom c"rank") 1))
    {
      (269722 call compilerError "heapSort() requires 1-D array")
    }
    { scopeless
      const low[269733] "const"(269730 call . Dom c"alignedLow")
      const high[269740] "const"(269737 call . Dom c"alignedHigh")
      const size[269747] "const"(269744 call . Dom c"size")
      const stride[269757] "const"(269756 call abs(269752 call . Dom c"stride"))
      (269760 'end of statement')
    }
    { scopeless
      unknown start[269802](269799 IfExpr (269763 call == high low) then
      { scopeless
        high
      } else
      { scopeless(269796 IfExpr (269768 call % size 2) then
        { scopeless
          (269781 call + low(269779 call *(269776 call /(269773 call - size 1) 2) stride))
        } else
        { scopeless
          (269794 call + low(269792 call *(269789 call -(269786 call / size 2) 1) stride))
        } )
      } )
      (269805 'end of statement')
    }
    {
      unknown tmp[269826] "temp"
      (269850 'move' tmp[269826](269845 call _cond_test(269847 call >= start low)))
      WhileDo[269831]
      {
        {
          (269815 call SiftDown start high comparator)
          (269823 call = start(269821 call - start stride))
        }
        label _continueLabel[269829]
        (269840 'move' tmp[269826](269835 call _cond_test(269837 call >= start low)))
        tmp[269826]
      }
      label _breakLabel[269830]
    }
    { scopeless
      unknown end[269854] high
      (269857 'end of statement')
    }
    {
      unknown tmp[269889] "temp"
      (269913 'move' tmp[269889](269908 call _cond_test(269910 call > end low)))
      WhileDo[269894]
      {
        {
          (269870 call <=>(269865 call Data end)(269869 call Data low))
          (269879 call = end(269877 call - end stride))
          (269887 call SiftDown low end comparator)
        }
        label _continueLabel[269892]
        (269903 'move' tmp[269889](269898 call _cond_test(269900 call > end low)))
        tmp[269889]
      }
      label _breakLabel[269893]
    }
    function SiftDown[269920](arg start[269918]:_any[178](?), arg end[269922]:_any[178](?), arg comparator[269927] :
    unknown rec[269924] =
    defaultComparator) : _unknown[51]
    {
      { scopeless
        unknown root[269932] start
        (269935 'end of statement')
      }
      {
        unknown tmp[270063] "temp"
        (270105 'move' tmp[270063](270091 call _cond_test(270093 call <=(270095 call +(270097 call -(270099 call * 2 root) low) stride) end)))
        WhileDo[270068]
        {
          {
            { scopeless
              const child[269960] "const"(269958 call +(269955 call -(269952 call * 2 root) low) stride)
              (269963 'end of statement')
            }
            { scopeless
              unknown swap[269966] root
              (269969 'end of statement')
            }
            if(269990 call _cond_test(269983 call <(269981 call chpl_compare(269974 call Data swap)(269979 call Data child) comparator) 0))
            {
              { scopeless
                (269987 call = swap child)
              }
            }
            if(270030 call _cond_test(270020 call &&(270000 call <=(269997 call + child stride) end)(270018 call <(270016 call chpl_compare(270006 call Data swap)(270014 call Data(270011 call + child stride)) comparator) 0)))
            {
              { scopeless
                (270027 call = swap(270025 call + child stride))
              }
            }
            if(270059 call _cond_test(270037 call != swap root))
            {
              (270047 call <=>(270042 call Data root)(270046 call Data swap))
              (270053 call = root swap)
            }
            {
              (270056 return)
            }
          }
          label _continueLabel[270066]
          (270086 'move' tmp[270063](270072 call _cond_test(270074 call <=(270076 call +(270078 call -(270080 call * 2 root) low) stride) end)))
          tmp[270063]
        }
        label _breakLabel[270067]
      }
    }
  }
}