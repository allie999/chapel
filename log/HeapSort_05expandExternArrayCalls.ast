AST dump for HeapSort after pass expandExternArrayCalls.
Module use list: 

{
  (353079 'use' ChapelStandard)
  (269560 'import' Sort.{defaultComparator, chpl_check_comparator, chpl_compare})
  function heapSort[269575](arg Data[269572] :
  (269570 call chpl__buildArrayRuntimeType unknown Dom[269565] unknown eltType[269568]), arg comparator[269580] :
  unknown rec[269577] =
  defaultComparator) : _unknown[51]
  {
    (269588 call chpl_check_comparator comparator eltType)
    if(269620 call _cond_test(269596 call !=(269592 call . Dom c"rank") 1))
    {
      (269617 call compilerError "heapSort() requires 1-D array")
    }
    { scopeless
      const low[269628] "const"(269625 call . Dom c"alignedLow")
      const high[269635] "const"(269632 call . Dom c"alignedHigh")
      const size[269642] "const"(269639 call . Dom c"size")
      const stride[269652] "const"(269651 call abs(269647 call . Dom c"stride"))
      (269655 'end of statement')
    }
    { scopeless
      unknown start[269697](269694 IfExpr (269658 call == high low) then
      { scopeless
        high
      } else
      { scopeless(269691 IfExpr (269663 call % size 2) then
        { scopeless
          (269676 call + low(269674 call *(269671 call /(269668 call - size 1) 2) stride))
        } else
        { scopeless
          (269689 call + low(269687 call *(269684 call -(269681 call / size 2) 1) stride))
        } )
      } )
      (269700 'end of statement')
    }
    {
      unknown tmp[269721] "temp"
      (269745 'move' tmp[269721](269740 call _cond_test(269742 call >= start low)))
      WhileDo[269726]
      {
        {
          (269710 call SiftDown start high comparator)
          (269718 call = start(269716 call - start stride))
        }
        label _continueLabel[269724]
        (269735 'move' tmp[269721](269730 call _cond_test(269732 call >= start low)))
        tmp[269721]
      }
      label _breakLabel[269725]
    }
    { scopeless
      unknown end[269749] high
      (269752 'end of statement')
    }
    {
      unknown tmp[269784] "temp"
      (269808 'move' tmp[269784](269803 call _cond_test(269805 call > end low)))
      WhileDo[269789]
      {
        {
          (269765 call <=>(269760 call Data end)(269764 call Data low))
          (269774 call = end(269772 call - end stride))
          (269782 call SiftDown low end comparator)
        }
        label _continueLabel[269787]
        (269798 'move' tmp[269784](269793 call _cond_test(269795 call > end low)))
        tmp[269784]
      }
      label _breakLabel[269788]
    }
    function SiftDown[269815](arg start[269813]:_any[178](?), arg end[269817]:_any[178](?), arg comparator[269822] :
    unknown rec[269819] =
    defaultComparator) : _unknown[51]
    {
      { scopeless
        unknown root[269827] start
        (269830 'end of statement')
      }
      {
        unknown tmp[269958] "temp"
        (270000 'move' tmp[269958](269986 call _cond_test(269988 call <=(269990 call +(269992 call -(269994 call * 2 root) low) stride) end)))
        WhileDo[269963]
        {
          {
            { scopeless
              const child[269855] "const"(269853 call +(269850 call -(269847 call * 2 root) low) stride)
              (269858 'end of statement')
            }
            { scopeless
              unknown swap[269861] root
              (269864 'end of statement')
            }
            if(269885 call _cond_test(269878 call <(269876 call chpl_compare(269869 call Data swap)(269874 call Data child) comparator) 0))
            {
              { scopeless
                (269882 call = swap child)
              }
            }
            if(269925 call _cond_test(269915 call &&(269895 call <=(269892 call + child stride) end)(269913 call <(269911 call chpl_compare(269901 call Data swap)(269909 call Data(269906 call + child stride)) comparator) 0)))
            {
              { scopeless
                (269922 call = swap(269920 call + child stride))
              }
            }
            if(269954 call _cond_test(269932 call != swap root))
            {
              (269942 call <=>(269937 call Data root)(269941 call Data swap))
              (269948 call = root swap)
            }
            {
              (269951 return)
            }
          }
          label _continueLabel[269961]
          (269981 'move' tmp[269958](269967 call _cond_test(269969 call <=(269971 call +(269973 call -(269975 call * 2 root) low) stride) end)))
          tmp[269958]
        }
        label _breakLabel[269962]
      }
    }
  }
}