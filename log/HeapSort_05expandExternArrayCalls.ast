AST dump for HeapSort after pass expandExternArrayCalls.
Module use list: 

{
  (353062 'use' ChapelStandard)
  (269663 'import' Sort.{defaultComparator, chpl_check_comparator, chpl_compare})
  function heapSort[269678](arg Data[269675] :
  (269673 call chpl__buildArrayRuntimeType unknown Dom[269668] unknown eltType[269671]), arg comparator[269683] :
  unknown rec[269680] =
  defaultComparator) : _unknown[51]
  {
    (269691 call chpl_check_comparator comparator eltType)
    if(269723 call _cond_test(269699 call !=(269695 call . Dom c"rank") 1))
    {
      (269720 call compilerError "heapSort() requires 1-D array")
    }
    { scopeless
      const low[269731] "const"(269728 call . Dom c"alignedLow")
      const high[269738] "const"(269735 call . Dom c"alignedHigh")
      const size[269745] "const"(269742 call . Dom c"size")
      const stride[269755] "const"(269754 call abs(269750 call . Dom c"stride"))
      (269758 'end of statement')
    }
    { scopeless
      unknown start[269800](269797 IfExpr (269761 call == high low) then
      { scopeless
        high
      } else
      { scopeless(269794 IfExpr (269766 call % size 2) then
        { scopeless
          (269779 call + low(269777 call *(269774 call /(269771 call - size 1) 2) stride))
        } else
        { scopeless
          (269792 call + low(269790 call *(269787 call -(269784 call / size 2) 1) stride))
        } )
      } )
      (269803 'end of statement')
    }
    {
      unknown tmp[269824] "temp"
      (269848 'move' tmp[269824](269843 call _cond_test(269845 call >= start low)))
      WhileDo[269829]
      {
        {
          (269813 call SiftDown start high comparator)
          (269821 call = start(269819 call - start stride))
        }
        label _continueLabel[269827]
        (269838 'move' tmp[269824](269833 call _cond_test(269835 call >= start low)))
        tmp[269824]
      }
      label _breakLabel[269828]
    }
    { scopeless
      unknown end[269852] high
      (269855 'end of statement')
    }
    {
      unknown tmp[269887] "temp"
      (269911 'move' tmp[269887](269906 call _cond_test(269908 call > end low)))
      WhileDo[269892]
      {
        {
          (269868 call <=>(269863 call Data end)(269867 call Data low))
          (269877 call = end(269875 call - end stride))
          (269885 call SiftDown low end comparator)
        }
        label _continueLabel[269890]
        (269901 'move' tmp[269887](269896 call _cond_test(269898 call > end low)))
        tmp[269887]
      }
      label _breakLabel[269891]
    }
    function SiftDown[269918](arg start[269916]:_any[178](?), arg end[269920]:_any[178](?), arg comparator[269925] :
    unknown rec[269922] =
    defaultComparator) : _unknown[51]
    {
      { scopeless
        unknown root[269930] start
        (269933 'end of statement')
      }
      {
        unknown tmp[270061] "temp"
        (270103 'move' tmp[270061](270089 call _cond_test(270091 call <=(270093 call +(270095 call -(270097 call * 2 root) low) stride) end)))
        WhileDo[270066]
        {
          {
            { scopeless
              const child[269958] "const"(269956 call +(269953 call -(269950 call * 2 root) low) stride)
              (269961 'end of statement')
            }
            { scopeless
              unknown swap[269964] root
              (269967 'end of statement')
            }
            if(269988 call _cond_test(269981 call <(269979 call chpl_compare(269972 call Data swap)(269977 call Data child) comparator) 0))
            {
              { scopeless
                (269985 call = swap child)
              }
            }
            if(270028 call _cond_test(270018 call &&(269998 call <=(269995 call + child stride) end)(270016 call <(270014 call chpl_compare(270004 call Data swap)(270012 call Data(270009 call + child stride)) comparator) 0)))
            {
              { scopeless
                (270025 call = swap(270023 call + child stride))
              }
            }
            if(270057 call _cond_test(270035 call != swap root))
            {
              (270045 call <=>(270040 call Data root)(270044 call Data swap))
              (270051 call = root swap)
            }
            {
              (270054 return)
            }
          }
          label _continueLabel[270064]
          (270084 'move' tmp[270061](270070 call _cond_test(270072 call <=(270074 call +(270076 call -(270078 call * 2 root) low) stride) end)))
          tmp[270061]
        }
        label _breakLabel[270065]
      }
    }
  }
}