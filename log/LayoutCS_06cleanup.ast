AST dump for LayoutCS after pass cleanup.
Module use list: 

{
  (353135 'use' ChapelStandard)
  (336049 'import' RangeChunk)
  unknown debugCS[336052] "config" "no doc" "param" 0
  (336055 'end of statement')
  unknown LayoutCSDefaultToSorted[336057] "config" "param" 1
  (336060 'end of statement')
  function _ColumnComparator[336087].key[336068](arg _mt[336091]:_MT[238], arg this[336089]:_ColumnComparator[336087], arg idx[336065] :
  _tuple) : _unknown[51] "method" "primary method"
  {
    (336081 return(336079 call _build_tuple(336073 call idx 1)(336077 call idx 0)))
  }
  type _ColumnComparator[336087]
  const _columnComparator[336095] "const" "no doc" _ColumnComparator
  (336098 'end of statement')
  function isCSType[336103](arg t[336101]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (336113 return(354990 'is_subtype' CS(336109 call _to_borrowed t)))
  }
  function CS[336253](?).dsiNewSparseDom[336139](arg _mt[336257]:_MT[238], arg this[336255]:CS[336253](?), param arg rank[336136] :
  int[13], arg idxType[336141]:_any[178](?), arg dom[336144] :
  _domain) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336176 return(336149 'new'(_chpl_manager = unmanaged[220](?))(336175 call CSDom rank idxType(336157 call . this c"compressRows")(336163 call . this c"sortedIndices")(336167 call . dom c"stridable")(336173 call _to_unmanaged this) dom)))
  }
  function CS[336253](?).dsiClone[336183](arg _mt[336261]:_MT[238], arg this[336259]:CS[336253](?)) : _unknown[51] "method" "primary method"
  {
    (336201 return(336187 'new'(_chpl_manager = unmanaged[220](?))(336200 call CS(compressRows =(336190 call . this c"compressRows"))(sortedIndices =(336196 call . this c"sortedIndices")))))
  }
  function CS[336253](?).dsiEqualDMaps[336222](arg _mt[336265]:_MT[238], arg this[336263]:CS[336253](?), arg that[336219] :
  (336218 call CS(336210 call . this c"compressRows")(336215 call . this c"sortedIndices"))) param : _unknown[51] "method" "primary method"
  {
    (336225 return 1)
  }
  function CS[336253](?).dsiEqualDMaps[336234](arg _mt[336269]:_MT[238], arg this[336267]:CS[336253](?), arg that[336232]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (336237 return 0)
  }
  function CS[336253](?).dsiIsLayout[336244](arg _mt[336273]:_MT[238], arg this[336271]:CS[336253](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (336247 return 1)
  }
  type CS[336253](?) unknown compressRows[336123] "param" 1 bool[10] unknown sortedIndices[336129] "param" LayoutCSDefaultToSorted bool[10] BaseDist
  function CSDom[340915](?).init[336362](arg _mt[340919]:_MT[238], arg this[340917]:CSDom[340915](?), param arg rank[336360]:_any[178](?), arg idxType[336364]:_any[178](?), param arg compressRows[336366]:_any[178](?), param arg sortedIndices[336368]:_any[178](?), param arg stridable[336370]:_any[178](?), arg dist[336378] :
  (336377 'to unmanaged class from unknown'(336376 call CS compressRows sortedIndices)), arg parentDom[336382] :
  _domain) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336419 call _cond_test(336396 call ||(336387 call != rank 2)(336394 call !=(336390 call . parentDom c"rank") 2)))
    {
      (336417 call compilerError "Only 2D sparse domains are supported by the CS distribution")
    }
    if(336471 call _cond_test(336430 call !=(336426 call . parentDom c"idxType") idxType))
    {
      (336469 call compilerError(336466 call +(336457 call +(336454 call + "idxType mismatch in CSDom.init(): "(336452 call _cast string[26] idxType)) " != ")(336464 call _cast string[26](336460 call . parentDom c"idxType"))))
    }
    (336484 call(336477 call . super c"init") rank idxType parentDom)
    (336491 call =(336487 call . this c"compressRows") compressRows)
    (336499 call =(336495 call . this c"sortedIndices") sortedIndices)
    (336507 call =(336503 call . this c"stridable") stridable)
    (336515 call =(336511 call . this c"dist") dist)
    (336526 call = rowRange(336525 call(336520 call . parentDom c"dim") 0))
    (336537 call = colRange(336536 call(336531 call . parentDom c"dim") 1))
    (336577 call = startIdxDom(336574 IfExpr  compressRows then
    { scopeless
      (336556 call chpl__buildDomainExpr(336553 call chpl_build_bounded_range(336543 call . rowRange c"low")(336551 call +(336547 call . rowRange c"high") 1)))
    } else
    { scopeless
      (336572 call chpl__buildDomainExpr(336569 call chpl_build_bounded_range(336559 call . colRange c"low")(336567 call +(336563 call . colRange c"high") 1)))
    } ))
    (336585 call(336581 call . this c"complete"))
    (336595 call = nnzDom(336593 call chpl__buildDomainExpr(336590 call chpl_build_bounded_range 1 _nnz)))
    (336600 call dsiClear)
  }
  function CSDom[340915](?).getNNZ[336606](arg _mt[340923]:_MT[238], arg this[340921]:CSDom[340915](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336610 return _nnz)
  }
  { scopeless type
    int[13]
  }
  function CSDom[340915](?).dsiMyDist[336618](arg _mt[340927]:_MT[238], arg this[340925]:CSDom[340915](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336621 return dist)
  }
  function CSDom[340915](?).dsiAssignDomain[336632](arg _mt[340931]:_MT[238], arg this[340929]:CSDom[340915](?), arg rhs[336629] :
  _domain, arg lhsPrivate[336635] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336767 call _cond_test(336657 call &&(336648 call ==(336645 call _to_borrowed(336643 'typeof'(336640 call . rhs c"_instance")))(336647 'typeof' this))(336655 call ==(336651 call . this c"dsiNumIndices") 0)))
    {
      (336667 call =(336660 call . this c"_nnz")(336664 call . rhs c"_nnz"))
      (336679 call =(336672 call . this c"nnzDom")(336676 call . rhs c"nnzDom"))
      (336692 call =(336685 call . this c"startIdx")(336689 call . rhs c"startIdx"))
      (336703 call =(336696 call . this c"idx")(336700 call . rhs c"idx"))
    }
    {
      if(336763 call _cond_test(336715 call <(336713 call _to_borrowed(336711 'typeof'(336708 call . rhs c"_instance"))) DefaultSparseDom))
      {
        (336753 call(336718 call . this c"dsiBulkAdd")(336744 call(336725 call .(336722 call . rhs c"_instance") c"_indices")(336741 call #(336735 call chpl_build_low_bounded_range(336732 call .(336729 call . rhs c"nnzDom") c"low"))(336738 call . rhs c"_nnz")))(dataSorted =(336747 call . this c"compressRows"))(isUnique = 1))
      }
      {
        (336760 call chpl_assignDomainWithIndsIterSafeForRemoving this rhs)
      }
    }
  }
  function CSDom[340915](?).dsiBuildArray[336779](arg _mt[340935]:_MT[238], arg this[340933]:CSDom[340915](?), arg eltType[336777]:_any[178](?), param arg initElts[336782] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (336804 return(336787 'new'(_chpl_manager = unmanaged[220](?))(336803 call CSArr(eltType = eltType)(rank = rank)(idxType = idxType)(dom =(336799 call _to_unmanaged this))(initElts = initElts))))
  }
  function CSDom[340915](?).dsiIndsIterSafeForRemoving[336811](arg _mt[340939]:_MT[238], arg this[340937]:CSDom[340915](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown cursor[336828](336825 IfExpr (336814 call . this c"compressRows") then
    { scopeless
      (336818 call . rowRange c"high")
    } else
    { scopeless
      (336822 call . colRange c"high")
    } )
    (336831 'end of statement')
    {
      unknown _indexOfInterest[336918] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[336919] "expr temp" "temp"
      (336928 'move' _iterator[336919](336926 call _getIterator(336939 call chpl_direct_range_iter 1 _nnz(336935 call - 1))))
      Defer
      {
        {
          (336955 call _freeIterator _iterator[336919])
        }
      }
      { scopeless type
        (336944 'move' _indexOfInterest[336918](336941 call iteratorIndex _iterator[336919]))
      }
      ForLoop[336920]
      {
        unknown i[336948] "index var" "insert auto destroy"
        (336950 'move' i[336948] _indexOfInterest[336918])
        {
          {
            unknown tmp[336856] "temp"
            (336884 'move' tmp[336856](336877 call _cond_test(336879 call >(336881 call startIdx cursor) i)))
            WhileDo[336861]
            {
              {
                (336852 call -= cursor 1)
              }
              label _continueLabel[336859]
              (336872 'move' tmp[336856](336865 call _cond_test(336867 call >(336869 call startIdx cursor) i)))
              tmp[336856]
            }
            label _breakLabel[336860]
          }
          if(336914 call _cond_test(336889 call . this c"compressRows"))
          {
            (336900 yield(336898 call _build_tuple cursor(336896 call idx i)))
          }
          {
            (336911 yield(336909 call _build_tuple(336906 call idx i) cursor))
          }
        }
        label _continueLabel[336923]
        _indexOfInterest[336918]
        _iterator[336919]
      }
      label _breakLabel[336924]
    }
  }
  function CSDom[340915](?).these[336966](arg _mt[340943]:_MT[238], arg this[340941]:CSDom[340915](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown cursor[336983](336980 IfExpr (336969 call . this c"compressRows") then
    { scopeless
      (336973 call . rowRange c"low")
    } else
    { scopeless
      (336977 call . colRange c"low")
    } )
    (336986 'end of statement')
    {
      unknown _indexOfInterest[337077] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[337078] "expr temp" "temp"
      (337087 'move' _iterator[337078](337085 call _getIterator(337092 call chpl_direct_range_iter 1 _nnz 1)))
      Defer
      {
        {
          (337108 call _freeIterator _iterator[337078])
        }
      }
      { scopeless type
        (337097 'move' _indexOfInterest[337077](337094 call iteratorIndex _iterator[337078]))
      }
      ForLoop[337079]
      {
        unknown i[337101] "index var" "insert auto destroy"
        (337103 'move' i[337101] _indexOfInterest[337077])
        {
          {
            unknown tmp[337009] "temp"
            (337043 'move' tmp[337009](337033 call _cond_test(337035 call <=(337037 call startIdx(337039 call + cursor 1)) i)))
            WhileDo[337014]
            {
              {
                (337005 call += cursor 1)
              }
              label _continueLabel[337012]
              (337028 'move' tmp[337009](337018 call _cond_test(337020 call <=(337022 call startIdx(337024 call + cursor 1)) i)))
              tmp[337009]
            }
            label _breakLabel[337013]
          }
          if(337071 call _cond_test(337048 call . this c"compressRows"))
          {
            (337059 yield(337057 call _build_tuple cursor(337055 call idx i)))
          }
          {
            (337069 yield(337067 call _build_tuple(337064 call idx i) cursor))
          }
        }
        label _continueLabel[337082]
        _indexOfInterest[337077]
        _iterator[337078]
      }
      label _breakLabel[337083]
    }
  }
  function CSDom[340915](?).these[337123](arg _mt[340947]:_MT[238], arg this[340945]:CSDom[340915](?), param arg tag[337120] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (337133 'use' DSIUtil)
    const numElems[337137] "const" _nnz
    (337140 'end of statement')
    const numChunks[337145] "const"(337144 call _computeNumChunks numElems)
    (337148 'end of statement')
    if(337175 call _cond_test debugCS)
    {
      (337173 call writeln "CSDom leader: " numChunks " chunks, " numElems " elems")
    }
    if(337389 call _cond_test(337182 call == numChunks 1))
    {
      (337190 yield(337188 call _build_tuple this 1 numElems))
    }
    {
      unknown tmpIter[337218] "expr temp" "maybe ref" "no copy" "temp"
      (337221 'move' tmpIter[337218](337203 call(337194 call . RangeChunk c"chunks")(337199 call chpl_build_bounded_range 1 numElems) numChunks))
      unknown isRngDomArr[337370] "maybe param" "temp"
      (337385 'move' isRngDomArr[337370](337383 call ||(337372 call isBoundedRange tmpIter[337218])(337381 call ||(337375 call isDomain tmpIter[337218])(337378 call isArray tmpIter[337218]))))
      if isRngDomArr[337370]
      {
        const _coforallCount[337237] "const" "end count" "temp"
        (337306 'move' _coforallCount[337237](337303 call _endCountAlloc 1))
        unknown numTasks[337238] "temp"
        (337290 'move' numTasks[337238](337286 call . tmpIter[337218] c"size"))
        (337281 call _upEndCount _coforallCount[337237] 1 numTasks[337238])
        (337278 call chpl_resetTaskSpawn numTasks[337238])
        unknown _indexOfInterest[337245] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[337246] "expr temp" "temp"
        (337255 'move' _iterator[337246](337253 call _getIterator tmpIter[337218]))
        Defer
        {
          {
            (337271 call _freeIterator _iterator[337246])
          }
        }
        { scopeless type
          (337260 'move' _indexOfInterest[337245](337257 call iteratorIndex _iterator[337246]))
        }
        ForLoop[337247]
        {
          unknown chunk[337264] "coforall index var" "index var" "insert auto destroy"
          (337266 'move' chunk[337264] _indexOfInterest[337245])
          {
            (337224 yield(337226 call _build_tuple this(337229 call . chunk c"first")(337233 call . chunk c"last")))
            (337240 call _downEndCount _coforallCount[337237] nil[44])
            (337239 'coforall loop')
          }
          label _continueLabel[337250]
          _indexOfInterest[337245]
          _iterator[337246]
        }
        label _breakLabel[337251]
        Defer
        {
          {
            (337293 call _endCountFree _coforallCount[337237])
          }
        }
        (337298 call _waitEndCount _coforallCount[337237] 1 numTasks[337238])
      }
      {
        const _coforallCount[337310] "const" "end count" "temp"
        (337367 'move' _coforallCount[337310](337364 call _endCountAlloc 1))
        unknown _indexOfInterest[337318] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[337319] "expr temp" "temp"
        (337328 'move' _iterator[337319](337326 call _getIterator tmpIter[337218]))
        Defer
        {
          {
            (337344 call _freeIterator _iterator[337319])
          }
        }
        { scopeless type
          (337333 'move' _indexOfInterest[337318](337330 call iteratorIndex _iterator[337319]))
        }
        ForLoop[337320]
        {
          unknown chunk[337337] "coforall index var" "index var" "insert auto destroy"
          (337339 'move' chunk[337337] _indexOfInterest[337318])
          (337351 call _upEndCount _coforallCount[337310] 1)
          {
            (337216 yield(337214 call _build_tuple this(337206 call . chunk c"first")(337211 call . chunk c"last")))
            (337313 call _downEndCount _coforallCount[337310] nil[44])
            (337312 'coforall loop')
          }
          label _continueLabel[337323]
          _indexOfInterest[337318]
          _iterator[337319]
        }
        label _breakLabel[337324]
        Defer
        {
          {
            (337355 call _endCountFree _coforallCount[337310])
          }
        }
        (337360 call _waitEndCount _coforallCount[337310] 1)
      }
    }
  }
  where {
    (337130 call == tag(337127 call . iterKind c"leader"))
  }
  function CSDom[340915](?).these[337403](arg _mt[340951]:_MT[238], arg this[340949]:CSDom[340915](?), param arg tag[337400] :
  iterKind, arg followThis[337411] :
  (337409 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[337429] "temp" followThis
    (337439 call _check_tuple_var_decl tmp[337429] 3)
    unknown followThisDom[337421](337430 call tmp[337429] 0)
    unknown startIx[337423](337433 call tmp[337429] 1)
    unknown endIx[337425](337436 call tmp[337429] 2)
    (337444 'end of statement')
    if(337472 call _cond_test boundsChecking)
    {
      (337470 call assert(337450 call <= startIx endIx) "CSDom follower - got nothing to iterate over")
    }
    if(337504 call _cond_test(337479 call != followThisDom this))
    {
      (337502 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays (CS layout)")
    }
    unknown cursor[337513](337512 call _private_findStart startIx)
    (337516 'end of statement')
    if(337581 call _cond_test debugCS)
    {
      (337579 call writeln "CSDom follower: " startIx ".." endIx "  startIdx(" cursor ")="(337578 call startIdx cursor))
    }
    {
      unknown _indexOfInterest[337674] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[337675] "expr temp" "temp"
      (337684 'move' _iterator[337675](337682 call _getIterator(337689 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (337705 call _freeIterator _iterator[337675])
        }
      }
      { scopeless type
        (337694 'move' _indexOfInterest[337674](337691 call iteratorIndex _iterator[337675]))
      }
      ForLoop[337676]
      {
        unknown i[337698] "index var" "insert auto destroy"
        (337700 'move' i[337698] _indexOfInterest[337674])
        {
          {
            unknown tmp[337606] "temp"
            (337640 'move' tmp[337606](337630 call _cond_test(337632 call <=(337634 call startIdx(337636 call + cursor 1)) i)))
            WhileDo[337611]
            {
              (337603 call += cursor 1)
              label _continueLabel[337609]
              (337625 'move' tmp[337606](337615 call _cond_test(337617 call <=(337619 call startIdx(337621 call + cursor 1)) i)))
              tmp[337606]
            }
            label _breakLabel[337610]
          }
          if(337668 call _cond_test(337645 call . this c"compressRows"))
          {
            (337656 yield(337654 call _build_tuple cursor(337652 call idx i)))
          }
          {
            (337666 yield(337664 call _build_tuple(337661 call idx i) cursor))
          }
        }
        label _continueLabel[337679]
        _indexOfInterest[337674]
        _iterator[337675]
      }
      label _breakLabel[337680]
    }
  }
  where {
    (337419 call == tag(337416 call . iterKind c"follower"))
  }
  function CSDom[340915](?).these[337721](arg _mt[340955]:_MT[238], arg this[340953]:CSDom[340915](?), param arg tag[337718] :
  iterKind, arg followThis[337723]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (337751 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")
    (337755 yield 0)
  }
  where {
    (337730 call == tag(337727 call . iterKind c"follower"))
  }
  function CSDom[340915](?)._private_findStart[337764](arg _mt[340959]:_MT[238], arg this[340957]:CSDom[340915](?), arg startIx[337762]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (337778 return(337777 call _private_findStart startIx(337770 call . startIdxDom c"low")(337774 call . startIdxDom c"high")))
  }
  function CSDom[340915](?)._private_findStart[337787](arg _mt[340963]:_MT[238], arg this[340961]:CSDom[340915](?), arg startIx[337785]:_any[178](?), arg low[337789]:_any[178](?), arg high[337791]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown approx[337794] 2
    (337797 'end of statement')
    unknown l[337800] low
    unknown h[337804] high
    (337807 'end of statement')
    {
      unknown tmp[337850] "temp"
      (337880 'move' tmp[337850](337872 call _cond_test(337874 call > h(337877 call + l approx))))
      WhileDo[337855]
      {
        {
          unknown m[337822](337820 call /(337817 call + h l) 2)
          (337825 'end of statement')
          if(337844 call _cond_test(337832 call <=(337830 call startIdx m) startIx))
          {
            (337836 call = l m)
          }
          {
            (337841 call = h m)
          }
        }
        label _continueLabel[337853]
        (337867 'move' tmp[337850](337859 call _cond_test(337861 call > h(337864 call + l approx))))
        tmp[337850]
      }
      label _breakLabel[337854]
    }
    unknown hh[337891](337890 call min(337886 call + l approx) high)
    (337894 'end of statement')
    if(337953 call _cond_test boundsChecking)
    {
      (337922 call assert(337902 call <=(337900 call startIdx l) startIx) "CSDom.findStart-1")
      (337951 call assert(337931 call < startIx(337930 call startIdx hh)) "CSDom.findStart-2")
    }
    (337958 return l)
  }
  function CSDom[340915](?).stopIdx[337966](arg _mt[340967]:_MT[238], arg this[340965]:CSDom[340915](?), arg i[337964]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (337978 return(337976 call -(337974 call startIdx(337971 call + i 1)) 1))
  }
  function CSDom[340915](?).find[337992](arg _mt[340971]:_MT[238], arg this[340969]:CSDom[340915](?), arg ind[337989] :
  (337987 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (337995 'use' Search)
    const tmp[338004] "const" "temp" ind
    (338011 call _check_tuple_var_decl tmp[338004] 2)
    const row[337998] "const"(338005 call tmp[338004] 0)
    const col[338000] "const"(338008 call tmp[338004] 1)
    (338016 'end of statement')
    unknown ret[338022](338020 call _build_tuple bool[10] idxType)
    (338025 'end of statement')
    if(338128 call _cond_test(338027 call . this c"compressRows"))
    {
      if(338073 call _cond_test(338031 call . this c"sortedIndices"))
      {
        (338050 call = ret(338049 call binarySearch idx col(lo =(338042 call startIdx row))(hi =(338047 call stopIdx row))))
      }
      {
        (338069 call = ret(338068 call linearSearch idx col(lo =(338061 call startIdx row))(hi =(338066 call stopIdx row))))
      }
    }
    {
      if(338122 call _cond_test(338080 call . this c"sortedIndices"))
      {
        (338099 call = ret(338098 call binarySearch idx row(lo =(338091 call startIdx col))(hi =(338096 call stopIdx col))))
      }
      {
        (338118 call = ret(338117 call linearSearch idx row(lo =(338110 call startIdx col))(hi =(338115 call stopIdx col))))
      }
    }
    (338133 return ret)
  }
  function CSDom[340915](?).dsiMember[338146](arg _mt[340975]:_MT[238], arg this[340973]:CSDom[340915](?), arg ind[338143] :
  (338141 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    if(338181 call _cond_test(338154 call(338149 call . parentDom c"contains") ind))
    {
      const tmp[338164] "const" "temp"(338163 call find ind)
      (338171 call _check_tuple_var_decl tmp[338164] 2)
      const found[338155] "const"(338165 call tmp[338164] 0)
      const loc[338157] "const"(338168 call tmp[338164] 1)
      (338176 'end of statement')
      (338179 return found)
    }
    (338187 return 0)
  }
  function CSDom[340915](?).dsiFirst[338193](arg _mt[340979]:_MT[238], arg this[340977]:CSDom[340915](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338212 call _cond_test(338197 call == _nnz 0))
    {
      (338210 return(338208 call -(338200 call . parentDom c"low")(338206 call _build_tuple 1 1)))
    }
    const _low[338222] "const"(338219 call . nnzDom c"low")
    (338225 'end of statement')
    {
      unknown _indexOfInterest[338289] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338290] "expr temp" "temp"
      (338299 'move' _iterator[338290](338297 call _getIterator startIdxDom))
      Defer
      {
        {
          (338315 call _freeIterator _iterator[338290])
        }
      }
      { scopeless type
        (338304 'move' _indexOfInterest[338289](338301 call iteratorIndex _iterator[338290]))
      }
      ForLoop[338291]
      {
        unknown i[338308] "index var" "insert auto destroy"
        (338310 'move' i[338308] _indexOfInterest[338289])
        {
          if(338284 call _cond_test(338233 call >(338231 call startIdx i) _low))
          {
            if(338277 call _cond_test(338236 call . this c"compressRows"))
            {
              (338256 return(338254 call _build_tuple(338241 call - i 1)(338252 call idx(338248 call .(338245 call . idx c"_dom") c"low"))))
            }
            {
              (338275 return(338273 call _build_tuple(338267 call idx(338263 call .(338260 call . idx c"_dom") c"low"))(338270 call - i 1)))
            }
          }
        }
        label _continueLabel[338294]
        _indexOfInterest[338289]
        _iterator[338290]
      }
      label _breakLabel[338295]
    }
    (338341 call halt "Something went wrong in dsiFirst")
    (338348 return(338346 call _build_tuple 0 0))
  }
  function CSDom[340915](?).dsiLast[338354](arg _mt[340983]:_MT[238], arg this[340981]:CSDom[340915](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338373 call _cond_test(338358 call == _nnz 0))
    {
      (338371 return(338369 call -(338361 call . parentDom c"low")(338367 call _build_tuple 1 1)))
    }
    unknown _last[338389](338387 call -(338385 call(338380 call . parentDom c"low") 1) 1)
    (338392 'end of statement')
    {
      unknown _indexOfInterest[338415] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338416] "expr temp" "temp"
      (338425 'move' _iterator[338416](338423 call _getIterator startIdxDom))
      Defer
      {
        {
          (338441 call _freeIterator _iterator[338416])
        }
      }
      { scopeless type
        (338430 'move' _indexOfInterest[338415](338427 call iteratorIndex _iterator[338416]))
      }
      ForLoop[338417]
      {
        unknown i[338434] "index var" "insert auto destroy"
        (338436 'move' i[338434] _indexOfInterest[338415])
        if(338410 call _cond_test(338400 call >(338398 call startIdx i) _last))
        {
          (338407 call = _last(338405 call - i 1))
        }
        label _continueLabel[338420]
        _indexOfInterest[338415]
        _iterator[338416]
      }
      label _breakLabel[338421]
    }
    if(338472 call _cond_test(338449 call . this c"compressRows"))
    {
      (338460 return(338458 call _build_tuple _last(338456 call idx _nnz)))
    }
    {
      (338470 return(338468 call _build_tuple(338465 call idx _nnz) _last))
    }
  }
  function CSDom[340915](?).dsiAdd[338489](arg _mt[340987]:_MT[238], arg this[340985]:CSDom[340915](?), arg ind[338486] :
  (338484 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (338494 call boundsCheck ind)
    const tmp[338506] "const" "temp"(338505 call find ind)
    (338513 call _check_tuple_var_decl tmp[338506] 2)
    const found[338497] "const"(338507 call tmp[338506] 0)
    const insertPt[338499] "const"(338510 call tmp[338506] 1)
    (338518 'end of statement')
    if(338523 call _cond_test found)
    {
      (338521 return 0)
    }
    (338530 call += _nnz 1)
    unknown oldNNZDomSize[338537](338534 call . nnzDom c"size")
    (338540 'end of statement')
    (338544 call _grow _nnz)
    const tmp[338552] "const" "temp" ind
    (338559 call _check_tuple_var_decl tmp[338552] 2)
    const row[338546] "const"(338553 call tmp[338552] 0)
    const col[338548] "const"(338556 call tmp[338552] 1)
    (338564 'end of statement')
    {
      unknown _indexOfInterest[338593] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338594] "expr temp" "temp"
      (338603 'move' _iterator[338594](338601 call _getIterator(338620 call chpl_direct_range_iter insertPt(338617 call - _nnz 1)(338613 call - 1))))
      Defer
      {
        {
          (338636 call _freeIterator _iterator[338594])
        }
      }
      { scopeless type
        (338625 'move' _indexOfInterest[338593](338622 call iteratorIndex _iterator[338594]))
      }
      ForLoop[338595]
      {
        unknown i[338629] "index var" "insert auto destroy"
        (338631 'move' i[338629] _indexOfInterest[338593])
        {
          (338589 call =(338584 call idx(338581 call + i 1))(338588 call idx i))
        }
        label _continueLabel[338598]
        _indexOfInterest[338593]
        _iterator[338594]
      }
      label _breakLabel[338599]
    }
    if(338663 call _cond_test(338644 call . this c"compressRows"))
    {
      (338652 call =(338650 call idx insertPt) col)
    }
    {
      (338660 call =(338658 call idx insertPt) row)
    }
    unknown start[338678](338675 IfExpr (338670 call . this c"compressRows") then
    { scopeless
      row
    } else
    { scopeless
      col
    } )
    (338681 'end of statement')
    {
      unknown _indexOfInterest[338702] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338703] "expr temp" "temp"
      (338712 'move' _iterator[338703](338710 call _getIterator(338723 call chpl_direct_range_iter(338716 call + start 1)(338720 call . startIdxDom c"high") 1)))
      Defer
      {
        {
          (338739 call _freeIterator _iterator[338703])
        }
      }
      { scopeless type
        (338728 'move' _indexOfInterest[338702](338725 call iteratorIndex _iterator[338703]))
      }
      ForLoop[338704]
      {
        unknown rc[338732] "index var" "insert auto destroy"
        (338734 'move' rc[338732] _indexOfInterest[338702])
        {
          (338698 call +=(338696 call startIdx rc) 1)
        }
        label _continueLabel[338707]
        _indexOfInterest[338702]
        _iterator[338703]
      }
      label _breakLabel[338708]
    }
    {
      unknown _indexOfInterest[338773] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338774] "expr temp" "temp"
      (338783 'move' _iterator[338774](338781 call _getIterator _arrs))
      Defer
      {
        {
          (338799 call _freeIterator _iterator[338774])
        }
      }
      { scopeless type
        (338788 'move' _indexOfInterest[338773](338785 call iteratorIndex _iterator[338774]))
      }
      ForLoop[338775]
      {
        unknown a[338792] "index var" "insert auto destroy"
        (338794 'move' a[338792] _indexOfInterest[338773])
        {
          (338770 call(338749 call . a c"sparseShiftArray")(338757 call chpl_build_bounded_range insertPt(338755 call - _nnz 1))(338768 call chpl_build_bounded_range(338762 call + oldNNZDomSize 1)(338765 call . nnzDom c"size")))
        }
        label _continueLabel[338778]
        _indexOfInterest[338773]
        _iterator[338774]
      }
      label _breakLabel[338779]
    }
    (338807 return 1)
  }
  function CSDom[340915](?).bulkAdd_help[338825](arg _mt[340991]:_MT[238], arg this[340989]:CSDom[340915](?), arg inds[338822] :
  (338820 call chpl__buildArrayRuntimeType unknown indsDom[338813](338818 call * rank idxType)), arg dataSorted[338828] =
  0, arg isUnique[338832] =
  0, arg addOn[338836] =
  nilLocale) : _unknown[51] "method" "primary method" "method overrides"
  {
    (338840 'import' Sort)
    if(338881 call _cond_test(338845 call != addOn nilLocale))
    {
      if(338876 call _cond_test(338852 call != addOn(338850 call chpl_localeID_to_locale(338849 '_wide_get_locale' this))))
      {
        (338873 call halt "Bulk index addition is only possible on the locale where the\n            sparse domain is created")
      }
    }
    if(338911 call _cond_test(338886 call . this c"compressRows"))
    {
      (338899 call bulkAdd_prepareInds inds dataSorted isUnique(cmp =(338895 call . Sort c"defaultComparator")))
    }
    {
      (338908 call bulkAdd_prepareInds inds dataSorted isUnique(cmp = _columnComparator))
    }
    if(339344 call _cond_test(338918 call == _nnz 0))
    {
      const dupCount[338929] "const"(338926 IfExpr  isUnique then
      { scopeless
        0
      } else
      { scopeless
        (338925 call _countDuplicates inds)
      } )
      (338932 'end of statement')
      (338942 call += _nnz(338940 call -(338936 call . inds c"size") dupCount))
      (338947 call _bulkGrow)
      unknown idxIdx[338950] 1
      (338953 'end of statement')
      unknown prevIdx[338965](338963 call -(338955 call . parentDom c"low")(338961 call _build_tuple 1 1))
      (338968 'end of statement')
      unknown current[338970] idxType
      (338973 'end of statement')
      if(339006 call _cond_test(338975 call . this c"compressRows"))
      {
        (338989 call = current(338986 call .(338985 call(338980 call . parentDom c"dim") 0) c"low"))
      }
      {
        (339003 call = current(339000 call .(338999 call(338994 call . parentDom c"dim") 1) c"low"))
      }
      {
        unknown _indexOfInterest[339210] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[339211] "expr temp" "temp"
        (339220 'move' _iterator[339211](339218 call _getIterator inds))
        Defer
        {
          {
            (339250 call _freeIterator _iterator[339211])
          }
        }
        { scopeless type
          (339225 'move' _indexOfInterest[339210](339222 call iteratorIndex _iterator[339211]))
        }
        ForLoop[339212]
        {
          (339230 call _check_tuple_var_decl _indexOfInterest[339210] 2)
          unknown i[339236] "index var" "insert auto destroy"
          (339238 'move' i[339236](339234 call _indexOfInterest[339210] 0))
          unknown j[339243] "index var" "insert auto destroy"
          (339245 'move' j[339243](339241 call _indexOfInterest[339210] 1))
          {
            if(339043 call _cond_test(339029 call &&(339019 call ! isUnique)(339027 call ==(339024 call _build_tuple i j) prevIdx)))
            {
              continue nil[44]
            }
            {
              (339040 call = prevIdx(339038 call _build_tuple i j))
            }
            if(339206 call _cond_test(339051 call . this c"compressRows"))
            {
              {
                unknown tmp[339078] "temp"
                (339102 'move' tmp[339078](339097 call _cond_test(339099 call != i current)))
                WhileDo[339083]
                {
                  {
                    (339060 call += current 1)
                    (339075 call =(339070 call startIdx(339067 call + current 1))(339074 call startIdx current))
                  }
                  label _continueLabel[339081]
                  (339092 'move' tmp[339078](339087 call _cond_test(339089 call != i current)))
                  tmp[339078]
                }
                label _breakLabel[339082]
              }
              (339114 call +=(339112 call startIdx(339109 call + i 1)) 1)
              (339122 call =(339120 call idx idxIdx) j)
              (339127 call += idxIdx 1)
            }
            {
              {
                unknown tmp[339154] "temp"
                (339178 'move' tmp[339154](339173 call _cond_test(339175 call != j current)))
                WhileDo[339159]
                {
                  {
                    (339136 call += current 1)
                    (339151 call =(339146 call startIdx(339143 call + current 1))(339150 call startIdx current))
                  }
                  label _continueLabel[339157]
                  (339168 'move' tmp[339154](339163 call _cond_test(339165 call != j current)))
                  tmp[339154]
                }
                label _breakLabel[339158]
              }
              (339190 call +=(339188 call startIdx(339185 call + j 1)) 1)
              (339198 call =(339196 call idx idxIdx) i)
              (339203 call += idxIdx 1)
            }
          }
          label _continueLabel[339215]
          _indexOfInterest[339210]
          _iterator[339211]
        }
        label _breakLabel[339216]
      }
      const startIdxHigh[339264] "const"(339263 call startIdx(339260 call + current 1))
      (339267 'end of statement')
      {
        unknown _indexOfInterest[339291] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[339292] "expr temp" "temp"
        (339301 'move' _iterator[339292](339299 call _getIterator(339315 call chpl_direct_range_iter(339305 call + current 2)(339309 call .(339311 call . startIdx c"_dom") c"high") 1)))
        Defer
        {
          {
            (339331 call _freeIterator _iterator[339292])
          }
        }
        { scopeless type
          (339320 'move' _indexOfInterest[339291](339317 call iteratorIndex _iterator[339292]))
        }
        ForLoop[339293]
        {
          unknown r[339324] "index var" "insert auto destroy"
          (339326 'move' r[339324] _indexOfInterest[339291])
          {
            (339287 call =(339285 call startIdx r) startIdxHigh)
          }
          label _continueLabel[339296]
          _indexOfInterest[339291]
          _iterator[339292]
        }
        label _breakLabel[339297]
      }
      (339342 return(339340 call - idxIdx 1))
    }
    const tmp[339359] "const" "temp"(339358 call __getActualInsertPts this inds isUnique)
    (339366 call _check_tuple_var_decl tmp[339359] 2)
    const actualInsertPts[339348] "const"(339360 call tmp[339359] 0)
    const actualAddCnt[339350] "const"(339363 call tmp[339359] 1)
    (339371 'end of statement')
    const oldnnz[339373] "const" _nnz
    (339376 'end of statement')
    (339379 call += _nnz actualAddCnt)
    (339384 call _bulkGrow)
    unknown newIndIdx[339390](339387 call . indsDom c"high")
    (339393 'end of statement')
    unknown oldIndIdx[339395] oldnnz
    (339398 'end of statement')
    unknown newLoc[339403](339402 call actualInsertPts newIndIdx)
    (339406 'end of statement')
    {
      unknown tmp[339445] "temp"
      (339473 'move' tmp[339445](339466 call _cond_test(339468 call == newLoc(339471 call - 1))))
      WhileDo[339450]
      {
        {
          (339415 call -= newIndIdx 1)
          if(339432 call _cond_test(339427 call == newIndIdx(339425 call -(339421 call . indsDom c"low") 1)))
          {
            break nil[44]
          }
          (339442 call = newLoc(339441 call actualInsertPts newIndIdx))
        }
        label _continueLabel[339448]
        (339461 'move' tmp[339445](339454 call _cond_test(339456 call == newLoc(339459 call - 1))))
        tmp[339445]
      }
      label _breakLabel[339449]
    }
    unknown arrShiftMap[339489](339487 call chpl__buildArrayRuntimeType(339485 call chpl__ensureDomainExpr(339481 call chpl__buildDomainExpr(339478 call chpl_build_bounded_range 1 oldnnz))) int[13])
    (339492 'end of statement')
    {
      unknown _indexOfInterest[339708] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339709] "expr temp" "temp"
      (339718 'move' _iterator[339709](339716 call _getIterator(339729 call chpl_direct_range_iter 1 _nnz(339725 call - 1))))
      Defer
      {
        {
          (339745 call _freeIterator _iterator[339709])
        }
      }
      { scopeless type
        (339734 'move' _indexOfInterest[339708](339731 call iteratorIndex _iterator[339709]))
      }
      ForLoop[339710]
      {
        unknown i[339738] "index var" "insert auto destroy"
        (339740 'move' i[339738] _indexOfInterest[339708])
        {
          if(339702 call _cond_test(339511 call &&(339505 call >= oldIndIdx 1)(339509 call > i newLoc)))
          {
            (339521 call =(339516 call idx i)(339520 call idx oldIndIdx))
            (339530 call =(339528 call arrShiftMap oldIndIdx) i)
            (339535 call -= oldIndIdx 1)
          }
          {
            if(339697 call _cond_test(339549 call &&(339543 call >= newIndIdx(339540 call . indsDom c"low"))(339547 call == i newLoc)))
            {
              if(339585 call _cond_test(339552 call . this c"compressRows"))
              {
                (339566 call =(339558 call idx i)(339565 call(339562 call inds newIndIdx) 1))
              }
              {
                (339581 call =(339573 call idx i)(339580 call(339577 call inds newIndIdx) 0))
              }
              (339592 call -= newIndIdx 1)
              if(339617 call _cond_test(339600 call >= newIndIdx(339597 call . indsDom c"low")))
              {
                (339607 call = newLoc(339606 call actualInsertPts newIndIdx))
              }
              {
                (339614 call = newLoc(339612 call - 2))
              }
              {
                unknown tmp[339661] "temp"
                (339689 'move' tmp[339661](339682 call _cond_test(339684 call == newLoc(339687 call - 1))))
                WhileDo[339666]
                {
                  {
                    (339631 call -= newIndIdx 1)
                    if(339648 call _cond_test(339643 call == newIndIdx(339641 call -(339637 call . indsDom c"low") 1)))
                    {
                      break nil[44]
                    }
                    (339658 call = newLoc(339657 call actualInsertPts newIndIdx))
                  }
                  label _continueLabel[339664]
                  (339677 'move' tmp[339661](339670 call _cond_test(339672 call == newLoc(339675 call - 1))))
                  tmp[339661]
                }
                label _breakLabel[339665]
              }
            }
            {
              (339695 call halt "Something went wrong")
            }
          }
        }
        label _continueLabel[339713]
        _indexOfInterest[339708]
        _iterator[339709]
      }
      label _breakLabel[339714]
    }
    unknown prevCursor[339779](339776 IfExpr (339753 call . this c"compressRows") then
    { scopeless
      (339763 call .(339762 call(339757 call . parentDom c"dim") 0) c"low")
    } else
    { scopeless
      (339773 call .(339772 call(339767 call . parentDom c"dim") 1) c"low")
    } )
    (339782 'end of statement')
    unknown cursor[339784] int[13]
    (339787 'end of statement')
    unknown cursorCnt[339789] 0
    (339792 'end of statement')
    {
      unknown _indexOfInterest[339949] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339950] "expr temp" "temp"
      (339964 'move' _iterator[339950](339801 call _build_tuple(339959 call _getIterator inds)(339962 call _getIterator actualInsertPts)))
      Defer
      {
        {
          (339994 call _freeIterator _iterator[339950])
        }
      }
      { scopeless type
        (339969 'move' _indexOfInterest[339949](339966 call iteratorIndex _iterator[339950]))
      }
      ForLoop[339951]
      {
        (339974 call _check_tuple_var_decl _indexOfInterest[339949] 2)
        unknown ind[339980] "index var" "insert auto destroy"
        (339982 'move' ind[339980](339978 call _indexOfInterest[339949] 0))
        unknown p[339987] "index var" "insert auto destroy"
        (339989 'move' p[339987](339985 call _indexOfInterest[339949] 1))
        {
          if(339811 call _cond_test(339806 call == p(339804 call - 1)))
          {
            continue nil[44]
          }
          if(339839 call _cond_test(339818 call . this c"compressRows"))
          {
            (339826 call = cursor(339825 call ind 0))
          }
          {
            (339835 call = cursor(339834 call ind 1))
          }
          if(339944 call _cond_test(339845 call == cursor prevCursor))
          {
            (339849 call += cursorCnt 1)
          }
          {
            (339860 call +=(339858 call startIdx(339855 call + prevCursor 1)) cursorCnt)
            if(339930 call _cond_test(339869 call >(339866 call - cursor prevCursor) 1))
            {
              {
                unknown _indexOfInterest[339888] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[339889] "expr temp" "temp"
                (339898 'move' _iterator[339889](339896 call _getIterator(339906 call chpl_direct_range_iter(339902 call + prevCursor 2) cursor 1)))
                Defer
                {
                  {
                    (339922 call _freeIterator _iterator[339889])
                  }
                }
                { scopeless type
                  (339911 'move' _indexOfInterest[339888](339908 call iteratorIndex _iterator[339889]))
                }
                ForLoop[339890]
                {
                  unknown i[339915] "index var" "insert auto destroy"
                  (339917 'move' i[339915] _indexOfInterest[339888])
                  {
                    (339884 call +=(339882 call startIdx i) cursorCnt)
                  }
                  label _continueLabel[339893]
                  _indexOfInterest[339888]
                  _iterator[339889]
                }
                label _breakLabel[339894]
              }
            }
            (339936 call += cursorCnt 1)
            (339941 call = prevCursor cursor)
          }
        }
        label _continueLabel[339954]
        _indexOfInterest[339949]
        _iterator[339950]
      }
      label _breakLabel[339955]
    }
    {
      unknown _indexOfInterest[340021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340022] "expr temp" "temp"
      (340031 'move' _iterator[340022](340029 call _getIterator(340042 call chpl_direct_range_iter(340035 call + prevCursor 1)(340039 call . startIdxDom c"high") 1)))
      Defer
      {
        {
          (340058 call _freeIterator _iterator[340022])
        }
      }
      { scopeless type
        (340047 'move' _indexOfInterest[340021](340044 call iteratorIndex _iterator[340022]))
      }
      ForLoop[340023]
      {
        unknown i[340051] "index var" "insert auto destroy"
        (340053 'move' i[340051] _indexOfInterest[340021])
        {
          (340017 call +=(340015 call startIdx i) cursorCnt)
        }
        label _continueLabel[340026]
        _indexOfInterest[340021]
        _iterator[340022]
      }
      label _breakLabel[340027]
    }
    {
      unknown _indexOfInterest[340076] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340077] "expr temp" "temp"
      (340086 'move' _iterator[340077](340084 call _getIterator _arrs))
      Defer
      {
        {
          (340102 call _freeIterator _iterator[340077])
        }
      }
      { scopeless type
        (340091 'move' _indexOfInterest[340076](340088 call iteratorIndex _iterator[340077]))
      }
      ForLoop[340078]
      {
        unknown a[340095] "index var" "insert auto destroy"
        (340097 'move' a[340095] _indexOfInterest[340076])
        (340074 call(340068 call . a c"sparseBulkShiftArray") arrShiftMap oldnnz)
        label _continueLabel[340081]
        _indexOfInterest[340076]
        _iterator[340077]
      }
      label _breakLabel[340082]
    }
    (340110 return actualAddCnt)
  }
  function CSDom[340915](?).dsiRemove[340123](arg _mt[340995]:_MT[238], arg this[340993]:CSDom[340915](?), arg ind[340120] :
  (340118 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    const tmp[340134] "const" "temp"(340133 call find ind)
    (340141 call _check_tuple_var_decl tmp[340134] 2)
    const found[340125] "const"(340135 call tmp[340134] 0)
    const insertPt[340127] "const"(340138 call tmp[340134] 1)
    (340146 'end of statement')
    if(340154 call _cond_test(340149 call ! found))
    {
      (340152 return 0)
    }
    (340161 call -= _nnz 1)
    (340167 call _shrink _nnz)
    const tmp[340175] "const" "temp" ind
    (340182 call _check_tuple_var_decl tmp[340175] 2)
    const row[340169] "const"(340176 call tmp[340175] 0)
    const col[340171] "const"(340179 call tmp[340175] 1)
    (340187 'end of statement')
    {
      unknown _indexOfInterest[340208] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340209] "expr temp" "temp"
      (340218 'move' _iterator[340209](340216 call _getIterator(340223 call chpl_direct_range_iter insertPt _nnz 1)))
      Defer
      {
        {
          (340239 call _freeIterator _iterator[340209])
        }
      }
      { scopeless type
        (340228 'move' _indexOfInterest[340208](340225 call iteratorIndex _iterator[340209]))
      }
      ForLoop[340210]
      {
        unknown i[340232] "index var" "insert auto destroy"
        (340234 'move' i[340232] _indexOfInterest[340208])
        {
          (340204 call =(340196 call idx i)(340203 call idx(340200 call + i 1)))
        }
        label _continueLabel[340213]
        _indexOfInterest[340208]
        _iterator[340209]
      }
      label _breakLabel[340214]
    }
    if(340380 call _cond_test(340247 call . this c"compressRows"))
    {
      {
        unknown _indexOfInterest[340270] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340271] "expr temp" "temp"
        (340280 'move' _iterator[340271](340278 call _getIterator(340291 call chpl_direct_range_iter(340284 call + row 1)(340288 call . startIdxDom c"high") 1)))
        Defer
        {
          {
            (340307 call _freeIterator _iterator[340271])
          }
        }
        { scopeless type
          (340296 'move' _indexOfInterest[340270](340293 call iteratorIndex _iterator[340271]))
        }
        ForLoop[340272]
        {
          unknown r[340300] "index var" "insert auto destroy"
          (340302 'move' r[340300] _indexOfInterest[340270])
          {
            (340266 call -=(340264 call startIdx r) 1)
          }
          label _continueLabel[340275]
          _indexOfInterest[340270]
          _iterator[340271]
        }
        label _breakLabel[340276]
      }
    }
    {
      {
        unknown _indexOfInterest[340335] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340336] "expr temp" "temp"
        (340345 'move' _iterator[340336](340343 call _getIterator(340356 call chpl_direct_range_iter(340349 call + col 1)(340353 call . startIdxDom c"high") 1)))
        Defer
        {
          {
            (340372 call _freeIterator _iterator[340336])
          }
        }
        { scopeless type
          (340361 'move' _indexOfInterest[340335](340358 call iteratorIndex _iterator[340336]))
        }
        ForLoop[340337]
        {
          unknown r[340365] "index var" "insert auto destroy"
          (340367 'move' r[340365] _indexOfInterest[340335])
          {
            (340331 call -=(340329 call startIdx r) 1)
          }
          label _continueLabel[340340]
          _indexOfInterest[340335]
          _iterator[340336]
        }
        label _breakLabel[340341]
      }
    }
    {
      unknown _indexOfInterest[340401] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340402] "expr temp" "temp"
      (340411 'move' _iterator[340402](340409 call _getIterator _arrs))
      Defer
      {
        {
          (340427 call _freeIterator _iterator[340402])
        }
      }
      { scopeless type
        (340416 'move' _indexOfInterest[340401](340413 call iteratorIndex _iterator[340402]))
      }
      ForLoop[340403]
      {
        unknown a[340420] "index var" "insert auto destroy"
        (340422 'move' a[340420] _indexOfInterest[340401])
        {
          (340398 call(340387 call . a c"sparseShiftArrayBack")(340395 call chpl_build_bounded_range insertPt(340393 call - _nnz 1)))
        }
        label _continueLabel[340406]
        _indexOfInterest[340401]
        _iterator[340402]
      }
      label _breakLabel[340407]
    }
    (340435 return 1)
  }
  function CSDom[340915](?).dsiClear[340441](arg _mt[340999]:_MT[238], arg this[340997]:CSDom[340915](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (340445 call = _nnz 0)
    (340451 call = startIdx 1)
  }
  function CSDom[340915](?).dimIter[340460](arg _mt[341003]:_MT[238], arg this[341001]:CSDom[340915](?), param arg d[340458]:_any[178](?), arg ind[340462]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(340534 call _cond_test(340472 call &&(340466 call != d 1)(340469 call . this c"compressRows")))
    {
      (340493 call compilerError "dimIter(0, ..) not supported on CS(compressRows=true) domains")
    }
    {
      if(340530 call _cond_test(340506 call &&(340498 call != d 0)(340504 call !(340501 call . this c"compressRows"))))
      {
        (340527 call compilerError "dimIter(1, ..) not supported on CS(compressRows=false) domains")
      }
    }
    {
      unknown _indexOfInterest[340557] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340558] "expr temp" "temp"
      (340567 'move' _iterator[340558](340565 call _getIterator(340576 call chpl_direct_range_iter(340571 call startIdx ind)(340574 call stopIdx ind) 1)))
      Defer
      {
        {
          (340592 call _freeIterator _iterator[340558])
        }
      }
      { scopeless type
        (340581 'move' _indexOfInterest[340557](340578 call iteratorIndex _iterator[340558]))
      }
      ForLoop[340559]
      {
        unknown i[340585] "index var" "insert auto destroy"
        (340587 'move' i[340585] _indexOfInterest[340557])
        (340555 yield(340554 call idx i))
        label _continueLabel[340562]
        _indexOfInterest[340557]
        _iterator[340558]
      }
      label _breakLabel[340563]
    }
  }
  function CSDom[340915](?).dsiSerialWrite[340605](arg _mt[341007]:_MT[238], arg this[341005]:CSDom[340915](?), arg f[340603]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (340609 call <~> f "{\n")
    if(340903 call _cond_test(340614 call . this c"compressRows"))
    {
      {
        unknown _indexOfInterest[340726] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340727] "expr temp" "temp"
        (340736 'move' _iterator[340727](340734 call _getIterator rowRange))
        Defer
        {
          {
            (340752 call _freeIterator _iterator[340727])
          }
        }
        { scopeless type
          (340741 'move' _indexOfInterest[340726](340738 call iteratorIndex _iterator[340727]))
        }
        ForLoop[340728]
        {
          unknown r[340745] "index var" "insert auto destroy"
          (340747 'move' r[340745] _indexOfInterest[340726])
          {
            const lo[340623] "const"(340622 call startIdx r)
            const hi[340630] "const"(340629 call stopIdx r)
            (340633 'end of statement')
            {
              unknown _indexOfInterest[340688] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[340689] "expr temp" "temp"
              (340698 'move' _iterator[340689](340696 call _getIterator(340703 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (340719 call _freeIterator _iterator[340689])
                }
              }
              { scopeless type
                (340708 'move' _indexOfInterest[340688](340705 call iteratorIndex _iterator[340689]))
              }
              ForLoop[340690]
              {
                unknown c[340712] "index var" "insert auto destroy"
                (340714 'move' c[340712] _indexOfInterest[340688])
                {
                  (340684 call <~>(340657 call <~>(340654 call <~>(340648 call <~>(340645 call <~>(340642 call <~> f " (") r) ", ")(340653 call idx c)) ")")(340681 IfExpr (340661 call == c hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    ""
                  } ))
                }
                label _continueLabel[340693]
                _indexOfInterest[340688]
                _iterator[340689]
              }
              label _breakLabel[340694]
            }
          }
          label _continueLabel[340731]
          _indexOfInterest[340726]
          _iterator[340727]
        }
        label _breakLabel[340732]
      }
    }
    {
      {
        unknown _indexOfInterest[340869] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340870] "expr temp" "temp"
        (340879 'move' _iterator[340870](340877 call _getIterator colRange))
        Defer
        {
          {
            (340895 call _freeIterator _iterator[340870])
          }
        }
        { scopeless type
          (340884 'move' _indexOfInterest[340869](340881 call iteratorIndex _iterator[340870]))
        }
        ForLoop[340871]
        {
          unknown c[340888] "index var" "insert auto destroy"
          (340890 'move' c[340888] _indexOfInterest[340869])
          {
            const lo[340766] "const"(340765 call startIdx c)
            const hi[340773] "const"(340772 call stopIdx c)
            (340776 'end of statement')
            {
              unknown _indexOfInterest[340831] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[340832] "expr temp" "temp"
              (340841 'move' _iterator[340832](340839 call _getIterator(340846 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (340862 call _freeIterator _iterator[340832])
                }
              }
              { scopeless type
                (340851 'move' _indexOfInterest[340831](340848 call iteratorIndex _iterator[340832]))
              }
              ForLoop[340833]
              {
                unknown r[340855] "index var" "insert auto destroy"
                (340857 'move' r[340855] _indexOfInterest[340831])
                {
                  (340827 call <~>(340800 call <~>(340797 call <~>(340794 call <~>(340791 call <~>(340785 call <~> f " (")(340790 call idx r)) ", ") c) ")")(340824 IfExpr (340804 call == r hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    ""
                  } ))
                }
                label _continueLabel[340836]
                _indexOfInterest[340831]
                _iterator[340832]
              }
              label _breakLabel[340837]
            }
          }
          label _continueLabel[340874]
          _indexOfInterest[340869]
          _iterator[340870]
        }
        label _breakLabel[340875]
      }
    }
    (340909 call <~> f "}\n")
  }
  type CSDom[340915](?) unknown compressRows[336279] "param" unknown sortedIndices[336283] "param" unknown stridable[336287] "param" unknown dist[336297](336296 'to unmanaged class from unknown'(336295 call CS compressRows sortedIndices)) unknown rowRange[336307](336306 call range idxType(stridable = stridable)) unknown colRange[336317](336316 call range idxType(stridable = stridable)) unknown startIdxDom[336327](336325 call chpl__buildDomainRuntimeType defaultDist 1 idxType) unknown _nnz[336332] 0 unknown startIdx[336343] "local field"(336341 call chpl__buildArrayRuntimeType(336339 call chpl__ensureDomainExpr startIdxDom) idxType) unknown idx[336354] "local field"(336352 call chpl__buildArrayRuntimeType(336350 call chpl__ensureDomainExpr nnzDom) idxType) BaseSparseDomImpl
  function CSArr[341843].init[341017](arg _mt[341847]:_MT[238], arg this[341845]:CSArr[341843], arg eltType[341015]:_any[178](?), param arg rank[341020] :
  int[13], arg idxType[341023]:_any[178](?), arg dom[341025]:_any[178](?), param arg initElts[341028] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (341041 call(341032 call . super c"init") eltType rank idxType dom initElts)
  }
  function CSArr[341843].dsiAccess[341055](arg _mt[341851]:_MT[238], arg this[341849]:CSArr[341843], arg ind[341052] :
  (341050 call * rank idxType)) ref : _unknown[51] "method" "primary method"
  {
    (341063 call(341058 call . dom c"boundsCheck") ind)
    const tmp[341078] "const" "temp"(341077 call(341072 call . dom c"find") ind)
    (341085 call _check_tuple_var_decl tmp[341078] 2)
    const found[341066] "const"(341079 call tmp[341078] 0)
    const loc[341068] "const"(341082 call tmp[341078] 1)
    (341090 'end of statement')
    if(341104 call _cond_test found)
    {
      (341096 return(341095 call data loc))
    }
    {
      (341102 call halt "attempting to assign a 'zero' value in a sparse array: " ind)
    }
  }
  function CSArr[341843].dsiAccess[341121](arg _mt[341855]:_MT[238], arg this[341853]:CSArr[341843], arg ind[341118] :
  (341116 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (341133 call(341128 call . dom c"boundsCheck") ind)
    const tmp[341148] "const" "temp"(341147 call(341142 call . dom c"find") ind)
    (341155 call _check_tuple_var_decl tmp[341148] 2)
    const found[341136] "const"(341149 call tmp[341148] 0)
    const loc[341138] "const"(341152 call tmp[341148] 1)
    (341160 'end of statement')
    if(341171 call _cond_test found)
    {
      (341166 return(341165 call data loc))
    }
    {
      (341169 return irv)
    }
  }
  where {
    (341126 call shouldReturnRvalueByValue eltType)
  }
  function CSArr[341843].dsiAccess[341189](arg _mt[341859]:_MT[238], arg this[341857]:CSArr[341843], arg ind[341186] :
  (341184 call * rank idxType)) const ref : _unknown[51] "method" "primary method"
  {
    (341201 call(341196 call . dom c"boundsCheck") ind)
    const tmp[341216] "const" "temp"(341215 call(341210 call . dom c"find") ind)
    (341223 call _check_tuple_var_decl tmp[341216] 2)
    const found[341204] "const"(341217 call tmp[341216] 0)
    const loc[341206] "const"(341220 call tmp[341216] 1)
    (341228 'end of statement')
    if(341239 call _cond_test found)
    {
      (341234 return(341233 call data loc))
    }
    {
      (341237 return irv)
    }
  }
  where {
    (341194 call shouldReturnRvalueByConstRef eltType)
  }
  function CSArr[341843].these[341250](arg _mt[341863]:_MT[238], arg this[341861]:CSArr[341843]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[341266] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341267] "expr temp" "temp"
      (341276 'move' _iterator[341267](341274 call _getIterator(341284 call chpl_direct_range_iter 1(341281 call . dom c"_nnz") 1)))
      Defer
      {
        {
          (341300 call _freeIterator _iterator[341267])
        }
      }
      { scopeless type
        (341289 'move' _indexOfInterest[341266](341286 call iteratorIndex _iterator[341267]))
      }
      ForLoop[341268]
      {
        unknown i[341293] "index var" "insert auto destroy"
        (341295 'move' i[341293] _indexOfInterest[341266])
        (341264 yield(341263 call data i))
        label _continueLabel[341271]
        _indexOfInterest[341266]
        _iterator[341267]
      }
      label _breakLabel[341272]
    }
  }
  function CSArr[341843].these[341316](arg _mt[341867]:_MT[238], arg this[341865]:CSArr[341843], param arg tag[341313] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[341336] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341337] "expr temp" "temp"
      (341346 'move' _iterator[341337](341344 call _getIterator(341332 call(341327 call . dom c"these") tag)))
      Defer
      {
        {
          (341363 call _freeIterator _iterator[341337])
        }
      }
      { scopeless type
        (341352 'move' _indexOfInterest[341336](341349 call iteratorIndex _iterator[341337]))
      }
      ForLoop[341338]
      {
        unknown followThis[341356] "index var" "insert auto destroy"
        (341358 'move' followThis[341356] _indexOfInterest[341336])
        (341334 yield followThis)
        label _continueLabel[341341]
        _indexOfInterest[341336]
        _iterator[341337]
      }
      label _breakLabel[341342]
    }
  }
  where {
    (341323 call == tag(341320 call . iterKind c"leader"))
  }
  function CSArr[341843].these[341380](arg _mt[341871]:_MT[238], arg this[341869]:CSArr[341843], param arg tag[341377] :
  iterKind, arg followThis[341388] :
  (341386 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[341406] "temp" followThis
    (341416 call _check_tuple_var_decl tmp[341406] 3)
    unknown followThisDom[341398](341407 call tmp[341406] 0)
    unknown startIx[341400](341410 call tmp[341406] 1)
    unknown endIx[341402](341413 call tmp[341406] 2)
    (341421 'end of statement')
    if(341451 call _cond_test(341428 call != followThisDom(341425 call . this c"dom")))
    {
      (341449 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays (CS layout)")
    }
    if(341481 call _cond_test debugCS)
    {
      (341479 call writeln "CSArr follower: " startIx ".." endIx)
    }
    {
      unknown _indexOfInterest[341497] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341498] "expr temp" "temp"
      (341507 'move' _iterator[341498](341505 call _getIterator(341512 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (341528 call _freeIterator _iterator[341498])
        }
      }
      { scopeless type
        (341517 'move' _indexOfInterest[341497](341514 call iteratorIndex _iterator[341498]))
      }
      ForLoop[341499]
      {
        unknown i[341521] "index var" "insert auto destroy"
        (341523 'move' i[341521] _indexOfInterest[341497])
        (341495 yield(341494 call data i))
        label _continueLabel[341502]
        _indexOfInterest[341497]
        _iterator[341498]
      }
      label _breakLabel[341503]
    }
  }
  where {
    (341396 call == tag(341393 call . iterKind c"follower"))
  }
  function CSArr[341843].these[341544](arg _mt[341875]:_MT[238], arg this[341873]:CSArr[341843], param arg tag[341541] :
  iterKind, arg followThis[341546]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (341558 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")
    (341562 yield 0)
  }
  where {
    (341553 call == tag(341550 call . iterKind c"follower"))
  }
  function CSArr[341843].dsiSerialWrite[341571](arg _mt[341879]:_MT[238], arg this[341877]:CSArr[341843], arg f[341569]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(341835 call _cond_test(341574 call . dom c"compressRows"))
    {
      {
        unknown _indexOfInterest[341672] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[341673] "expr temp" "temp"
        (341682 'move' _iterator[341673](341680 call _getIterator(341581 call . dom c"rowRange")))
        Defer
        {
          {
            (341699 call _freeIterator _iterator[341673])
          }
        }
        { scopeless type
          (341688 'move' _indexOfInterest[341672](341685 call iteratorIndex _iterator[341673]))
        }
        ForLoop[341674]
        {
          unknown r[341692] "index var" "insert auto destroy"
          (341694 'move' r[341692] _indexOfInterest[341672])
          {
            const lo[341591] "const"(341590 call(341585 call . dom c"startIdx") r)
            (341594 'end of statement')
            const hi[341605] "const"(341604 call(341599 call . dom c"stopIdx") r)
            (341608 'end of statement')
            {
              unknown _indexOfInterest[341634] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[341635] "expr temp" "temp"
              (341644 'move' _iterator[341635](341642 call _getIterator(341649 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (341665 call _freeIterator _iterator[341635])
                }
              }
              { scopeless type
                (341654 'move' _indexOfInterest[341634](341651 call iteratorIndex _iterator[341635]))
              }
              ForLoop[341636]
              {
                unknown c[341658] "index var" "insert auto destroy"
                (341660 'move' c[341658] _indexOfInterest[341634])
                {
                  (341630 call <~>(341619 call <~> f(341618 call data c))(341627 IfExpr (341623 call == c hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    " "
                  } ))
                }
                label _continueLabel[341639]
                _indexOfInterest[341634]
                _iterator[341635]
              }
              label _breakLabel[341640]
            }
          }
          label _continueLabel[341677]
          _indexOfInterest[341672]
          _iterator[341673]
        }
        label _breakLabel[341678]
      }
    }
    {
      {
        unknown _indexOfInterest[341800] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[341801] "expr temp" "temp"
        (341810 'move' _iterator[341801](341808 call _getIterator(341711 call . dom c"colRange")))
        Defer
        {
          {
            (341827 call _freeIterator _iterator[341801])
          }
        }
        { scopeless type
          (341816 'move' _indexOfInterest[341800](341813 call iteratorIndex _iterator[341801]))
        }
        ForLoop[341802]
        {
          unknown c[341820] "index var" "insert auto destroy"
          (341822 'move' c[341820] _indexOfInterest[341800])
          {
            const lo[341721] "const"(341720 call(341715 call . dom c"startIdx") c)
            (341724 'end of statement')
            const hi[341733] "const"(341732 call(341727 call . dom c"stopIdx") c)
            (341736 'end of statement')
            {
              unknown _indexOfInterest[341762] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[341763] "expr temp" "temp"
              (341772 'move' _iterator[341763](341770 call _getIterator(341777 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (341793 call _freeIterator _iterator[341763])
                }
              }
              { scopeless type
                (341782 'move' _indexOfInterest[341762](341779 call iteratorIndex _iterator[341763]))
              }
              ForLoop[341764]
              {
                unknown r[341786] "index var" "insert auto destroy"
                (341788 'move' r[341786] _indexOfInterest[341762])
                {
                  (341758 call <~>(341747 call <~> f(341746 call data r))(341755 IfExpr (341751 call == r hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    " "
                  } ))
                }
                label _continueLabel[341767]
                _indexOfInterest[341762]
                _iterator[341763]
              }
              label _breakLabel[341768]
            }
          }
          label _continueLabel[341805]
          _indexOfInterest[341800]
          _iterator[341801]
        }
        label _breakLabel[341806]
      }
    }
  }
  type CSArr[341843] BaseSparseArrImpl
}