AST dump for LayoutCS after pass cleanup.
Module use list: 

{
  (353118 'use' ChapelStandard)
  (336088 'import' RangeChunk)
  unknown debugCS[336091] "config" "no doc" "param" 0
  (336094 'end of statement')
  unknown LayoutCSDefaultToSorted[336096] "config" "param" 1
  (336099 'end of statement')
  function _ColumnComparator[336126].key[336107](arg _mt[336130]:_MT[238], arg this[336128]:_ColumnComparator[336126], arg idx[336104] :
  _tuple) : _unknown[51] "method" "primary method"
  {
    (336120 return(336118 call _build_tuple(336112 call idx 1)(336116 call idx 0)))
  }
  type _ColumnComparator[336126]
  const _columnComparator[336134] "const" "no doc" _ColumnComparator
  (336137 'end of statement')
  function isCSType[336142](arg t[336140]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (336152 return(354973 'is_subtype' CS(336148 call _to_borrowed t)))
  }
  function CS[336292](?).dsiNewSparseDom[336178](arg _mt[336296]:_MT[238], arg this[336294]:CS[336292](?), param arg rank[336175] :
  int[13], arg idxType[336180]:_any[178](?), arg dom[336183] :
  _domain) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336215 return(336188 'new'(_chpl_manager = unmanaged[220](?))(336214 call CSDom rank idxType(336196 call . this c"compressRows")(336202 call . this c"sortedIndices")(336206 call . dom c"stridable")(336212 call _to_unmanaged this) dom)))
  }
  function CS[336292](?).dsiClone[336222](arg _mt[336300]:_MT[238], arg this[336298]:CS[336292](?)) : _unknown[51] "method" "primary method"
  {
    (336240 return(336226 'new'(_chpl_manager = unmanaged[220](?))(336239 call CS(compressRows =(336229 call . this c"compressRows"))(sortedIndices =(336235 call . this c"sortedIndices")))))
  }
  function CS[336292](?).dsiEqualDMaps[336261](arg _mt[336304]:_MT[238], arg this[336302]:CS[336292](?), arg that[336258] :
  (336257 call CS(336249 call . this c"compressRows")(336254 call . this c"sortedIndices"))) param : _unknown[51] "method" "primary method"
  {
    (336264 return 1)
  }
  function CS[336292](?).dsiEqualDMaps[336273](arg _mt[336308]:_MT[238], arg this[336306]:CS[336292](?), arg that[336271]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (336276 return 0)
  }
  function CS[336292](?).dsiIsLayout[336283](arg _mt[336312]:_MT[238], arg this[336310]:CS[336292](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (336286 return 1)
  }
  type CS[336292](?) unknown compressRows[336162] "param" 1 bool[10] unknown sortedIndices[336168] "param" LayoutCSDefaultToSorted bool[10] BaseDist
  function CSDom[340954](?).init[336401](arg _mt[340958]:_MT[238], arg this[340956]:CSDom[340954](?), param arg rank[336399]:_any[178](?), arg idxType[336403]:_any[178](?), param arg compressRows[336405]:_any[178](?), param arg sortedIndices[336407]:_any[178](?), param arg stridable[336409]:_any[178](?), arg dist[336417] :
  (336416 'to unmanaged class from unknown'(336415 call CS compressRows sortedIndices)), arg parentDom[336421] :
  _domain) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336458 call _cond_test(336435 call ||(336426 call != rank 2)(336433 call !=(336429 call . parentDom c"rank") 2)))
    {
      (336456 call compilerError "Only 2D sparse domains are supported by the CS distribution")
    }
    if(336510 call _cond_test(336469 call !=(336465 call . parentDom c"idxType") idxType))
    {
      (336508 call compilerError(336505 call +(336496 call +(336493 call + "idxType mismatch in CSDom.init(): "(336491 call _cast string[26] idxType)) " != ")(336503 call _cast string[26](336499 call . parentDom c"idxType"))))
    }
    (336523 call(336516 call . super c"init") rank idxType parentDom)
    (336530 call =(336526 call . this c"compressRows") compressRows)
    (336538 call =(336534 call . this c"sortedIndices") sortedIndices)
    (336546 call =(336542 call . this c"stridable") stridable)
    (336554 call =(336550 call . this c"dist") dist)
    (336565 call = rowRange(336564 call(336559 call . parentDom c"dim") 0))
    (336576 call = colRange(336575 call(336570 call . parentDom c"dim") 1))
    (336616 call = startIdxDom(336613 IfExpr  compressRows then
    { scopeless
      (336595 call chpl__buildDomainExpr(336592 call chpl_build_bounded_range(336582 call . rowRange c"low")(336590 call +(336586 call . rowRange c"high") 1)))
    } else
    { scopeless
      (336611 call chpl__buildDomainExpr(336608 call chpl_build_bounded_range(336598 call . colRange c"low")(336606 call +(336602 call . colRange c"high") 1)))
    } ))
    (336624 call(336620 call . this c"complete"))
    (336634 call = nnzDom(336632 call chpl__buildDomainExpr(336629 call chpl_build_bounded_range 1 _nnz)))
    (336639 call dsiClear)
  }
  function CSDom[340954](?).getNNZ[336645](arg _mt[340962]:_MT[238], arg this[340960]:CSDom[340954](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336649 return _nnz)
  }
  { scopeless type
    int[13]
  }
  function CSDom[340954](?).dsiMyDist[336657](arg _mt[340966]:_MT[238], arg this[340964]:CSDom[340954](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336660 return dist)
  }
  function CSDom[340954](?).dsiAssignDomain[336671](arg _mt[340970]:_MT[238], arg this[340968]:CSDom[340954](?), arg rhs[336668] :
  _domain, arg lhsPrivate[336674] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336806 call _cond_test(336696 call &&(336687 call ==(336684 call _to_borrowed(336682 'typeof'(336679 call . rhs c"_instance")))(336686 'typeof' this))(336694 call ==(336690 call . this c"dsiNumIndices") 0)))
    {
      (336706 call =(336699 call . this c"_nnz")(336703 call . rhs c"_nnz"))
      (336718 call =(336711 call . this c"nnzDom")(336715 call . rhs c"nnzDom"))
      (336731 call =(336724 call . this c"startIdx")(336728 call . rhs c"startIdx"))
      (336742 call =(336735 call . this c"idx")(336739 call . rhs c"idx"))
    }
    {
      if(336802 call _cond_test(336754 call <(336752 call _to_borrowed(336750 'typeof'(336747 call . rhs c"_instance"))) DefaultSparseDom))
      {
        (336792 call(336757 call . this c"dsiBulkAdd")(336783 call(336764 call .(336761 call . rhs c"_instance") c"_indices")(336780 call #(336774 call chpl_build_low_bounded_range(336771 call .(336768 call . rhs c"nnzDom") c"low"))(336777 call . rhs c"_nnz")))(dataSorted =(336786 call . this c"compressRows"))(isUnique = 1))
      }
      {
        (336799 call chpl_assignDomainWithIndsIterSafeForRemoving this rhs)
      }
    }
  }
  function CSDom[340954](?).dsiBuildArray[336818](arg _mt[340974]:_MT[238], arg this[340972]:CSDom[340954](?), arg eltType[336816]:_any[178](?), param arg initElts[336821] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (336843 return(336826 'new'(_chpl_manager = unmanaged[220](?))(336842 call CSArr(eltType = eltType)(rank = rank)(idxType = idxType)(dom =(336838 call _to_unmanaged this))(initElts = initElts))))
  }
  function CSDom[340954](?).dsiIndsIterSafeForRemoving[336850](arg _mt[340978]:_MT[238], arg this[340976]:CSDom[340954](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown cursor[336867](336864 IfExpr (336853 call . this c"compressRows") then
    { scopeless
      (336857 call . rowRange c"high")
    } else
    { scopeless
      (336861 call . colRange c"high")
    } )
    (336870 'end of statement')
    {
      unknown _indexOfInterest[336957] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[336958] "expr temp" "temp"
      (336967 'move' _iterator[336958](336965 call _getIterator(336978 call chpl_direct_range_iter 1 _nnz(336974 call - 1))))
      Defer
      {
        {
          (336994 call _freeIterator _iterator[336958])
        }
      }
      { scopeless type
        (336983 'move' _indexOfInterest[336957](336980 call iteratorIndex _iterator[336958]))
      }
      ForLoop[336959]
      {
        unknown i[336987] "index var" "insert auto destroy"
        (336989 'move' i[336987] _indexOfInterest[336957])
        {
          {
            unknown tmp[336895] "temp"
            (336923 'move' tmp[336895](336916 call _cond_test(336918 call >(336920 call startIdx cursor) i)))
            WhileDo[336900]
            {
              {
                (336891 call -= cursor 1)
              }
              label _continueLabel[336898]
              (336911 'move' tmp[336895](336904 call _cond_test(336906 call >(336908 call startIdx cursor) i)))
              tmp[336895]
            }
            label _breakLabel[336899]
          }
          if(336953 call _cond_test(336928 call . this c"compressRows"))
          {
            (336939 yield(336937 call _build_tuple cursor(336935 call idx i)))
          }
          {
            (336950 yield(336948 call _build_tuple(336945 call idx i) cursor))
          }
        }
        label _continueLabel[336962]
        _indexOfInterest[336957]
        _iterator[336958]
      }
      label _breakLabel[336963]
    }
  }
  function CSDom[340954](?).these[337005](arg _mt[340982]:_MT[238], arg this[340980]:CSDom[340954](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown cursor[337022](337019 IfExpr (337008 call . this c"compressRows") then
    { scopeless
      (337012 call . rowRange c"low")
    } else
    { scopeless
      (337016 call . colRange c"low")
    } )
    (337025 'end of statement')
    {
      unknown _indexOfInterest[337116] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[337117] "expr temp" "temp"
      (337126 'move' _iterator[337117](337124 call _getIterator(337131 call chpl_direct_range_iter 1 _nnz 1)))
      Defer
      {
        {
          (337147 call _freeIterator _iterator[337117])
        }
      }
      { scopeless type
        (337136 'move' _indexOfInterest[337116](337133 call iteratorIndex _iterator[337117]))
      }
      ForLoop[337118]
      {
        unknown i[337140] "index var" "insert auto destroy"
        (337142 'move' i[337140] _indexOfInterest[337116])
        {
          {
            unknown tmp[337048] "temp"
            (337082 'move' tmp[337048](337072 call _cond_test(337074 call <=(337076 call startIdx(337078 call + cursor 1)) i)))
            WhileDo[337053]
            {
              {
                (337044 call += cursor 1)
              }
              label _continueLabel[337051]
              (337067 'move' tmp[337048](337057 call _cond_test(337059 call <=(337061 call startIdx(337063 call + cursor 1)) i)))
              tmp[337048]
            }
            label _breakLabel[337052]
          }
          if(337110 call _cond_test(337087 call . this c"compressRows"))
          {
            (337098 yield(337096 call _build_tuple cursor(337094 call idx i)))
          }
          {
            (337108 yield(337106 call _build_tuple(337103 call idx i) cursor))
          }
        }
        label _continueLabel[337121]
        _indexOfInterest[337116]
        _iterator[337117]
      }
      label _breakLabel[337122]
    }
  }
  function CSDom[340954](?).these[337162](arg _mt[340986]:_MT[238], arg this[340984]:CSDom[340954](?), param arg tag[337159] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (337172 'use' DSIUtil)
    const numElems[337176] "const" _nnz
    (337179 'end of statement')
    const numChunks[337184] "const"(337183 call _computeNumChunks numElems)
    (337187 'end of statement')
    if(337214 call _cond_test debugCS)
    {
      (337212 call writeln "CSDom leader: " numChunks " chunks, " numElems " elems")
    }
    if(337428 call _cond_test(337221 call == numChunks 1))
    {
      (337229 yield(337227 call _build_tuple this 1 numElems))
    }
    {
      unknown tmpIter[337257] "expr temp" "maybe ref" "no copy" "temp"
      (337260 'move' tmpIter[337257](337242 call(337233 call . RangeChunk c"chunks")(337238 call chpl_build_bounded_range 1 numElems) numChunks))
      unknown isRngDomArr[337409] "maybe param" "temp"
      (337424 'move' isRngDomArr[337409](337422 call ||(337411 call isBoundedRange tmpIter[337257])(337420 call ||(337414 call isDomain tmpIter[337257])(337417 call isArray tmpIter[337257]))))
      if isRngDomArr[337409]
      {
        const _coforallCount[337276] "const" "end count" "temp"
        (337345 'move' _coforallCount[337276](337342 call _endCountAlloc 1))
        unknown numTasks[337277] "temp"
        (337329 'move' numTasks[337277](337325 call . tmpIter[337257] c"size"))
        (337320 call _upEndCount _coforallCount[337276] 1 numTasks[337277])
        (337317 call chpl_resetTaskSpawn numTasks[337277])
        unknown _indexOfInterest[337284] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[337285] "expr temp" "temp"
        (337294 'move' _iterator[337285](337292 call _getIterator tmpIter[337257]))
        Defer
        {
          {
            (337310 call _freeIterator _iterator[337285])
          }
        }
        { scopeless type
          (337299 'move' _indexOfInterest[337284](337296 call iteratorIndex _iterator[337285]))
        }
        ForLoop[337286]
        {
          unknown chunk[337303] "coforall index var" "index var" "insert auto destroy"
          (337305 'move' chunk[337303] _indexOfInterest[337284])
          {
            (337263 yield(337265 call _build_tuple this(337268 call . chunk c"first")(337272 call . chunk c"last")))
            (337279 call _downEndCount _coforallCount[337276] nil[44])
            (337278 'coforall loop')
          }
          label _continueLabel[337289]
          _indexOfInterest[337284]
          _iterator[337285]
        }
        label _breakLabel[337290]
        Defer
        {
          {
            (337332 call _endCountFree _coforallCount[337276])
          }
        }
        (337337 call _waitEndCount _coforallCount[337276] 1 numTasks[337277])
      }
      {
        const _coforallCount[337349] "const" "end count" "temp"
        (337406 'move' _coforallCount[337349](337403 call _endCountAlloc 1))
        unknown _indexOfInterest[337357] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[337358] "expr temp" "temp"
        (337367 'move' _iterator[337358](337365 call _getIterator tmpIter[337257]))
        Defer
        {
          {
            (337383 call _freeIterator _iterator[337358])
          }
        }
        { scopeless type
          (337372 'move' _indexOfInterest[337357](337369 call iteratorIndex _iterator[337358]))
        }
        ForLoop[337359]
        {
          unknown chunk[337376] "coforall index var" "index var" "insert auto destroy"
          (337378 'move' chunk[337376] _indexOfInterest[337357])
          (337390 call _upEndCount _coforallCount[337349] 1)
          {
            (337255 yield(337253 call _build_tuple this(337245 call . chunk c"first")(337250 call . chunk c"last")))
            (337352 call _downEndCount _coforallCount[337349] nil[44])
            (337351 'coforall loop')
          }
          label _continueLabel[337362]
          _indexOfInterest[337357]
          _iterator[337358]
        }
        label _breakLabel[337363]
        Defer
        {
          {
            (337394 call _endCountFree _coforallCount[337349])
          }
        }
        (337399 call _waitEndCount _coforallCount[337349] 1)
      }
    }
  }
  where {
    (337169 call == tag(337166 call . iterKind c"leader"))
  }
  function CSDom[340954](?).these[337442](arg _mt[340990]:_MT[238], arg this[340988]:CSDom[340954](?), param arg tag[337439] :
  iterKind, arg followThis[337450] :
  (337448 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[337468] "temp" followThis
    (337478 call _check_tuple_var_decl tmp[337468] 3)
    unknown followThisDom[337460](337469 call tmp[337468] 0)
    unknown startIx[337462](337472 call tmp[337468] 1)
    unknown endIx[337464](337475 call tmp[337468] 2)
    (337483 'end of statement')
    if(337511 call _cond_test boundsChecking)
    {
      (337509 call assert(337489 call <= startIx endIx) "CSDom follower - got nothing to iterate over")
    }
    if(337543 call _cond_test(337518 call != followThisDom this))
    {
      (337541 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays (CS layout)")
    }
    unknown cursor[337552](337551 call _private_findStart startIx)
    (337555 'end of statement')
    if(337620 call _cond_test debugCS)
    {
      (337618 call writeln "CSDom follower: " startIx ".." endIx "  startIdx(" cursor ")="(337617 call startIdx cursor))
    }
    {
      unknown _indexOfInterest[337713] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[337714] "expr temp" "temp"
      (337723 'move' _iterator[337714](337721 call _getIterator(337728 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (337744 call _freeIterator _iterator[337714])
        }
      }
      { scopeless type
        (337733 'move' _indexOfInterest[337713](337730 call iteratorIndex _iterator[337714]))
      }
      ForLoop[337715]
      {
        unknown i[337737] "index var" "insert auto destroy"
        (337739 'move' i[337737] _indexOfInterest[337713])
        {
          {
            unknown tmp[337645] "temp"
            (337679 'move' tmp[337645](337669 call _cond_test(337671 call <=(337673 call startIdx(337675 call + cursor 1)) i)))
            WhileDo[337650]
            {
              (337642 call += cursor 1)
              label _continueLabel[337648]
              (337664 'move' tmp[337645](337654 call _cond_test(337656 call <=(337658 call startIdx(337660 call + cursor 1)) i)))
              tmp[337645]
            }
            label _breakLabel[337649]
          }
          if(337707 call _cond_test(337684 call . this c"compressRows"))
          {
            (337695 yield(337693 call _build_tuple cursor(337691 call idx i)))
          }
          {
            (337705 yield(337703 call _build_tuple(337700 call idx i) cursor))
          }
        }
        label _continueLabel[337718]
        _indexOfInterest[337713]
        _iterator[337714]
      }
      label _breakLabel[337719]
    }
  }
  where {
    (337458 call == tag(337455 call . iterKind c"follower"))
  }
  function CSDom[340954](?).these[337760](arg _mt[340994]:_MT[238], arg this[340992]:CSDom[340954](?), param arg tag[337757] :
  iterKind, arg followThis[337762]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (337790 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")
    (337794 yield 0)
  }
  where {
    (337769 call == tag(337766 call . iterKind c"follower"))
  }
  function CSDom[340954](?)._private_findStart[337803](arg _mt[340998]:_MT[238], arg this[340996]:CSDom[340954](?), arg startIx[337801]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (337817 return(337816 call _private_findStart startIx(337809 call . startIdxDom c"low")(337813 call . startIdxDom c"high")))
  }
  function CSDom[340954](?)._private_findStart[337826](arg _mt[341002]:_MT[238], arg this[341000]:CSDom[340954](?), arg startIx[337824]:_any[178](?), arg low[337828]:_any[178](?), arg high[337830]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown approx[337833] 2
    (337836 'end of statement')
    unknown l[337839] low
    unknown h[337843] high
    (337846 'end of statement')
    {
      unknown tmp[337889] "temp"
      (337919 'move' tmp[337889](337911 call _cond_test(337913 call > h(337916 call + l approx))))
      WhileDo[337894]
      {
        {
          unknown m[337861](337859 call /(337856 call + h l) 2)
          (337864 'end of statement')
          if(337883 call _cond_test(337871 call <=(337869 call startIdx m) startIx))
          {
            (337875 call = l m)
          }
          {
            (337880 call = h m)
          }
        }
        label _continueLabel[337892]
        (337906 'move' tmp[337889](337898 call _cond_test(337900 call > h(337903 call + l approx))))
        tmp[337889]
      }
      label _breakLabel[337893]
    }
    unknown hh[337930](337929 call min(337925 call + l approx) high)
    (337933 'end of statement')
    if(337992 call _cond_test boundsChecking)
    {
      (337961 call assert(337941 call <=(337939 call startIdx l) startIx) "CSDom.findStart-1")
      (337990 call assert(337970 call < startIx(337969 call startIdx hh)) "CSDom.findStart-2")
    }
    (337997 return l)
  }
  function CSDom[340954](?).stopIdx[338005](arg _mt[341006]:_MT[238], arg this[341004]:CSDom[340954](?), arg i[338003]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (338017 return(338015 call -(338013 call startIdx(338010 call + i 1)) 1))
  }
  function CSDom[340954](?).find[338031](arg _mt[341010]:_MT[238], arg this[341008]:CSDom[340954](?), arg ind[338028] :
  (338026 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (338034 'use' Search)
    const tmp[338043] "const" "temp" ind
    (338050 call _check_tuple_var_decl tmp[338043] 2)
    const row[338037] "const"(338044 call tmp[338043] 0)
    const col[338039] "const"(338047 call tmp[338043] 1)
    (338055 'end of statement')
    unknown ret[338061](338059 call _build_tuple bool[10] idxType)
    (338064 'end of statement')
    if(338167 call _cond_test(338066 call . this c"compressRows"))
    {
      if(338112 call _cond_test(338070 call . this c"sortedIndices"))
      {
        (338089 call = ret(338088 call binarySearch idx col(lo =(338081 call startIdx row))(hi =(338086 call stopIdx row))))
      }
      {
        (338108 call = ret(338107 call linearSearch idx col(lo =(338100 call startIdx row))(hi =(338105 call stopIdx row))))
      }
    }
    {
      if(338161 call _cond_test(338119 call . this c"sortedIndices"))
      {
        (338138 call = ret(338137 call binarySearch idx row(lo =(338130 call startIdx col))(hi =(338135 call stopIdx col))))
      }
      {
        (338157 call = ret(338156 call linearSearch idx row(lo =(338149 call startIdx col))(hi =(338154 call stopIdx col))))
      }
    }
    (338172 return ret)
  }
  function CSDom[340954](?).dsiMember[338185](arg _mt[341014]:_MT[238], arg this[341012]:CSDom[340954](?), arg ind[338182] :
  (338180 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    if(338220 call _cond_test(338193 call(338188 call . parentDom c"contains") ind))
    {
      const tmp[338203] "const" "temp"(338202 call find ind)
      (338210 call _check_tuple_var_decl tmp[338203] 2)
      const found[338194] "const"(338204 call tmp[338203] 0)
      const loc[338196] "const"(338207 call tmp[338203] 1)
      (338215 'end of statement')
      (338218 return found)
    }
    (338226 return 0)
  }
  function CSDom[340954](?).dsiFirst[338232](arg _mt[341018]:_MT[238], arg this[341016]:CSDom[340954](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338251 call _cond_test(338236 call == _nnz 0))
    {
      (338249 return(338247 call -(338239 call . parentDom c"low")(338245 call _build_tuple 1 1)))
    }
    const _low[338261] "const"(338258 call . nnzDom c"low")
    (338264 'end of statement')
    {
      unknown _indexOfInterest[338328] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338329] "expr temp" "temp"
      (338338 'move' _iterator[338329](338336 call _getIterator startIdxDom))
      Defer
      {
        {
          (338354 call _freeIterator _iterator[338329])
        }
      }
      { scopeless type
        (338343 'move' _indexOfInterest[338328](338340 call iteratorIndex _iterator[338329]))
      }
      ForLoop[338330]
      {
        unknown i[338347] "index var" "insert auto destroy"
        (338349 'move' i[338347] _indexOfInterest[338328])
        {
          if(338323 call _cond_test(338272 call >(338270 call startIdx i) _low))
          {
            if(338316 call _cond_test(338275 call . this c"compressRows"))
            {
              (338295 return(338293 call _build_tuple(338280 call - i 1)(338291 call idx(338287 call .(338284 call . idx c"_dom") c"low"))))
            }
            {
              (338314 return(338312 call _build_tuple(338306 call idx(338302 call .(338299 call . idx c"_dom") c"low"))(338309 call - i 1)))
            }
          }
        }
        label _continueLabel[338333]
        _indexOfInterest[338328]
        _iterator[338329]
      }
      label _breakLabel[338334]
    }
    (338380 call halt "Something went wrong in dsiFirst")
    (338387 return(338385 call _build_tuple 0 0))
  }
  function CSDom[340954](?).dsiLast[338393](arg _mt[341022]:_MT[238], arg this[341020]:CSDom[340954](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338412 call _cond_test(338397 call == _nnz 0))
    {
      (338410 return(338408 call -(338400 call . parentDom c"low")(338406 call _build_tuple 1 1)))
    }
    unknown _last[338428](338426 call -(338424 call(338419 call . parentDom c"low") 1) 1)
    (338431 'end of statement')
    {
      unknown _indexOfInterest[338454] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338455] "expr temp" "temp"
      (338464 'move' _iterator[338455](338462 call _getIterator startIdxDom))
      Defer
      {
        {
          (338480 call _freeIterator _iterator[338455])
        }
      }
      { scopeless type
        (338469 'move' _indexOfInterest[338454](338466 call iteratorIndex _iterator[338455]))
      }
      ForLoop[338456]
      {
        unknown i[338473] "index var" "insert auto destroy"
        (338475 'move' i[338473] _indexOfInterest[338454])
        if(338449 call _cond_test(338439 call >(338437 call startIdx i) _last))
        {
          (338446 call = _last(338444 call - i 1))
        }
        label _continueLabel[338459]
        _indexOfInterest[338454]
        _iterator[338455]
      }
      label _breakLabel[338460]
    }
    if(338511 call _cond_test(338488 call . this c"compressRows"))
    {
      (338499 return(338497 call _build_tuple _last(338495 call idx _nnz)))
    }
    {
      (338509 return(338507 call _build_tuple(338504 call idx _nnz) _last))
    }
  }
  function CSDom[340954](?).dsiAdd[338528](arg _mt[341026]:_MT[238], arg this[341024]:CSDom[340954](?), arg ind[338525] :
  (338523 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (338533 call boundsCheck ind)
    const tmp[338545] "const" "temp"(338544 call find ind)
    (338552 call _check_tuple_var_decl tmp[338545] 2)
    const found[338536] "const"(338546 call tmp[338545] 0)
    const insertPt[338538] "const"(338549 call tmp[338545] 1)
    (338557 'end of statement')
    if(338562 call _cond_test found)
    {
      (338560 return 0)
    }
    (338569 call += _nnz 1)
    unknown oldNNZDomSize[338576](338573 call . nnzDom c"size")
    (338579 'end of statement')
    (338583 call _grow _nnz)
    const tmp[338591] "const" "temp" ind
    (338598 call _check_tuple_var_decl tmp[338591] 2)
    const row[338585] "const"(338592 call tmp[338591] 0)
    const col[338587] "const"(338595 call tmp[338591] 1)
    (338603 'end of statement')
    {
      unknown _indexOfInterest[338632] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338633] "expr temp" "temp"
      (338642 'move' _iterator[338633](338640 call _getIterator(338659 call chpl_direct_range_iter insertPt(338656 call - _nnz 1)(338652 call - 1))))
      Defer
      {
        {
          (338675 call _freeIterator _iterator[338633])
        }
      }
      { scopeless type
        (338664 'move' _indexOfInterest[338632](338661 call iteratorIndex _iterator[338633]))
      }
      ForLoop[338634]
      {
        unknown i[338668] "index var" "insert auto destroy"
        (338670 'move' i[338668] _indexOfInterest[338632])
        {
          (338628 call =(338623 call idx(338620 call + i 1))(338627 call idx i))
        }
        label _continueLabel[338637]
        _indexOfInterest[338632]
        _iterator[338633]
      }
      label _breakLabel[338638]
    }
    if(338702 call _cond_test(338683 call . this c"compressRows"))
    {
      (338691 call =(338689 call idx insertPt) col)
    }
    {
      (338699 call =(338697 call idx insertPt) row)
    }
    unknown start[338717](338714 IfExpr (338709 call . this c"compressRows") then
    { scopeless
      row
    } else
    { scopeless
      col
    } )
    (338720 'end of statement')
    {
      unknown _indexOfInterest[338741] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338742] "expr temp" "temp"
      (338751 'move' _iterator[338742](338749 call _getIterator(338762 call chpl_direct_range_iter(338755 call + start 1)(338759 call . startIdxDom c"high") 1)))
      Defer
      {
        {
          (338778 call _freeIterator _iterator[338742])
        }
      }
      { scopeless type
        (338767 'move' _indexOfInterest[338741](338764 call iteratorIndex _iterator[338742]))
      }
      ForLoop[338743]
      {
        unknown rc[338771] "index var" "insert auto destroy"
        (338773 'move' rc[338771] _indexOfInterest[338741])
        {
          (338737 call +=(338735 call startIdx rc) 1)
        }
        label _continueLabel[338746]
        _indexOfInterest[338741]
        _iterator[338742]
      }
      label _breakLabel[338747]
    }
    {
      unknown _indexOfInterest[338812] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338813] "expr temp" "temp"
      (338822 'move' _iterator[338813](338820 call _getIterator _arrs))
      Defer
      {
        {
          (338838 call _freeIterator _iterator[338813])
        }
      }
      { scopeless type
        (338827 'move' _indexOfInterest[338812](338824 call iteratorIndex _iterator[338813]))
      }
      ForLoop[338814]
      {
        unknown a[338831] "index var" "insert auto destroy"
        (338833 'move' a[338831] _indexOfInterest[338812])
        {
          (338809 call(338788 call . a c"sparseShiftArray")(338796 call chpl_build_bounded_range insertPt(338794 call - _nnz 1))(338807 call chpl_build_bounded_range(338801 call + oldNNZDomSize 1)(338804 call . nnzDom c"size")))
        }
        label _continueLabel[338817]
        _indexOfInterest[338812]
        _iterator[338813]
      }
      label _breakLabel[338818]
    }
    (338846 return 1)
  }
  function CSDom[340954](?).bulkAdd_help[338864](arg _mt[341030]:_MT[238], arg this[341028]:CSDom[340954](?), arg inds[338861] :
  (338859 call chpl__buildArrayRuntimeType unknown indsDom[338852](338857 call * rank idxType)), arg dataSorted[338867] =
  0, arg isUnique[338871] =
  0, arg addOn[338875] =
  nilLocale) : _unknown[51] "method" "primary method" "method overrides"
  {
    (338879 'import' Sort)
    if(338920 call _cond_test(338884 call != addOn nilLocale))
    {
      if(338915 call _cond_test(338891 call != addOn(338889 call chpl_localeID_to_locale(338888 '_wide_get_locale' this))))
      {
        (338912 call halt "Bulk index addition is only possible on the locale where the\n            sparse domain is created")
      }
    }
    if(338950 call _cond_test(338925 call . this c"compressRows"))
    {
      (338938 call bulkAdd_prepareInds inds dataSorted isUnique(cmp =(338934 call . Sort c"defaultComparator")))
    }
    {
      (338947 call bulkAdd_prepareInds inds dataSorted isUnique(cmp = _columnComparator))
    }
    if(339383 call _cond_test(338957 call == _nnz 0))
    {
      const dupCount[338968] "const"(338965 IfExpr  isUnique then
      { scopeless
        0
      } else
      { scopeless
        (338964 call _countDuplicates inds)
      } )
      (338971 'end of statement')
      (338981 call += _nnz(338979 call -(338975 call . inds c"size") dupCount))
      (338986 call _bulkGrow)
      unknown idxIdx[338989] 1
      (338992 'end of statement')
      unknown prevIdx[339004](339002 call -(338994 call . parentDom c"low")(339000 call _build_tuple 1 1))
      (339007 'end of statement')
      unknown current[339009] idxType
      (339012 'end of statement')
      if(339045 call _cond_test(339014 call . this c"compressRows"))
      {
        (339028 call = current(339025 call .(339024 call(339019 call . parentDom c"dim") 0) c"low"))
      }
      {
        (339042 call = current(339039 call .(339038 call(339033 call . parentDom c"dim") 1) c"low"))
      }
      {
        unknown _indexOfInterest[339249] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[339250] "expr temp" "temp"
        (339259 'move' _iterator[339250](339257 call _getIterator inds))
        Defer
        {
          {
            (339289 call _freeIterator _iterator[339250])
          }
        }
        { scopeless type
          (339264 'move' _indexOfInterest[339249](339261 call iteratorIndex _iterator[339250]))
        }
        ForLoop[339251]
        {
          (339269 call _check_tuple_var_decl _indexOfInterest[339249] 2)
          unknown i[339275] "index var" "insert auto destroy"
          (339277 'move' i[339275](339273 call _indexOfInterest[339249] 0))
          unknown j[339282] "index var" "insert auto destroy"
          (339284 'move' j[339282](339280 call _indexOfInterest[339249] 1))
          {
            if(339082 call _cond_test(339068 call &&(339058 call ! isUnique)(339066 call ==(339063 call _build_tuple i j) prevIdx)))
            {
              continue nil[44]
            }
            {
              (339079 call = prevIdx(339077 call _build_tuple i j))
            }
            if(339245 call _cond_test(339090 call . this c"compressRows"))
            {
              {
                unknown tmp[339117] "temp"
                (339141 'move' tmp[339117](339136 call _cond_test(339138 call != i current)))
                WhileDo[339122]
                {
                  {
                    (339099 call += current 1)
                    (339114 call =(339109 call startIdx(339106 call + current 1))(339113 call startIdx current))
                  }
                  label _continueLabel[339120]
                  (339131 'move' tmp[339117](339126 call _cond_test(339128 call != i current)))
                  tmp[339117]
                }
                label _breakLabel[339121]
              }
              (339153 call +=(339151 call startIdx(339148 call + i 1)) 1)
              (339161 call =(339159 call idx idxIdx) j)
              (339166 call += idxIdx 1)
            }
            {
              {
                unknown tmp[339193] "temp"
                (339217 'move' tmp[339193](339212 call _cond_test(339214 call != j current)))
                WhileDo[339198]
                {
                  {
                    (339175 call += current 1)
                    (339190 call =(339185 call startIdx(339182 call + current 1))(339189 call startIdx current))
                  }
                  label _continueLabel[339196]
                  (339207 'move' tmp[339193](339202 call _cond_test(339204 call != j current)))
                  tmp[339193]
                }
                label _breakLabel[339197]
              }
              (339229 call +=(339227 call startIdx(339224 call + j 1)) 1)
              (339237 call =(339235 call idx idxIdx) i)
              (339242 call += idxIdx 1)
            }
          }
          label _continueLabel[339254]
          _indexOfInterest[339249]
          _iterator[339250]
        }
        label _breakLabel[339255]
      }
      const startIdxHigh[339303] "const"(339302 call startIdx(339299 call + current 1))
      (339306 'end of statement')
      {
        unknown _indexOfInterest[339330] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[339331] "expr temp" "temp"
        (339340 'move' _iterator[339331](339338 call _getIterator(339354 call chpl_direct_range_iter(339344 call + current 2)(339348 call .(339350 call . startIdx c"_dom") c"high") 1)))
        Defer
        {
          {
            (339370 call _freeIterator _iterator[339331])
          }
        }
        { scopeless type
          (339359 'move' _indexOfInterest[339330](339356 call iteratorIndex _iterator[339331]))
        }
        ForLoop[339332]
        {
          unknown r[339363] "index var" "insert auto destroy"
          (339365 'move' r[339363] _indexOfInterest[339330])
          {
            (339326 call =(339324 call startIdx r) startIdxHigh)
          }
          label _continueLabel[339335]
          _indexOfInterest[339330]
          _iterator[339331]
        }
        label _breakLabel[339336]
      }
      (339381 return(339379 call - idxIdx 1))
    }
    const tmp[339398] "const" "temp"(339397 call __getActualInsertPts this inds isUnique)
    (339405 call _check_tuple_var_decl tmp[339398] 2)
    const actualInsertPts[339387] "const"(339399 call tmp[339398] 0)
    const actualAddCnt[339389] "const"(339402 call tmp[339398] 1)
    (339410 'end of statement')
    const oldnnz[339412] "const" _nnz
    (339415 'end of statement')
    (339418 call += _nnz actualAddCnt)
    (339423 call _bulkGrow)
    unknown newIndIdx[339429](339426 call . indsDom c"high")
    (339432 'end of statement')
    unknown oldIndIdx[339434] oldnnz
    (339437 'end of statement')
    unknown newLoc[339442](339441 call actualInsertPts newIndIdx)
    (339445 'end of statement')
    {
      unknown tmp[339484] "temp"
      (339512 'move' tmp[339484](339505 call _cond_test(339507 call == newLoc(339510 call - 1))))
      WhileDo[339489]
      {
        {
          (339454 call -= newIndIdx 1)
          if(339471 call _cond_test(339466 call == newIndIdx(339464 call -(339460 call . indsDom c"low") 1)))
          {
            break nil[44]
          }
          (339481 call = newLoc(339480 call actualInsertPts newIndIdx))
        }
        label _continueLabel[339487]
        (339500 'move' tmp[339484](339493 call _cond_test(339495 call == newLoc(339498 call - 1))))
        tmp[339484]
      }
      label _breakLabel[339488]
    }
    unknown arrShiftMap[339528](339526 call chpl__buildArrayRuntimeType(339524 call chpl__ensureDomainExpr(339520 call chpl__buildDomainExpr(339517 call chpl_build_bounded_range 1 oldnnz))) int[13])
    (339531 'end of statement')
    {
      unknown _indexOfInterest[339747] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339748] "expr temp" "temp"
      (339757 'move' _iterator[339748](339755 call _getIterator(339768 call chpl_direct_range_iter 1 _nnz(339764 call - 1))))
      Defer
      {
        {
          (339784 call _freeIterator _iterator[339748])
        }
      }
      { scopeless type
        (339773 'move' _indexOfInterest[339747](339770 call iteratorIndex _iterator[339748]))
      }
      ForLoop[339749]
      {
        unknown i[339777] "index var" "insert auto destroy"
        (339779 'move' i[339777] _indexOfInterest[339747])
        {
          if(339741 call _cond_test(339550 call &&(339544 call >= oldIndIdx 1)(339548 call > i newLoc)))
          {
            (339560 call =(339555 call idx i)(339559 call idx oldIndIdx))
            (339569 call =(339567 call arrShiftMap oldIndIdx) i)
            (339574 call -= oldIndIdx 1)
          }
          {
            if(339736 call _cond_test(339588 call &&(339582 call >= newIndIdx(339579 call . indsDom c"low"))(339586 call == i newLoc)))
            {
              if(339624 call _cond_test(339591 call . this c"compressRows"))
              {
                (339605 call =(339597 call idx i)(339604 call(339601 call inds newIndIdx) 1))
              }
              {
                (339620 call =(339612 call idx i)(339619 call(339616 call inds newIndIdx) 0))
              }
              (339631 call -= newIndIdx 1)
              if(339656 call _cond_test(339639 call >= newIndIdx(339636 call . indsDom c"low")))
              {
                (339646 call = newLoc(339645 call actualInsertPts newIndIdx))
              }
              {
                (339653 call = newLoc(339651 call - 2))
              }
              {
                unknown tmp[339700] "temp"
                (339728 'move' tmp[339700](339721 call _cond_test(339723 call == newLoc(339726 call - 1))))
                WhileDo[339705]
                {
                  {
                    (339670 call -= newIndIdx 1)
                    if(339687 call _cond_test(339682 call == newIndIdx(339680 call -(339676 call . indsDom c"low") 1)))
                    {
                      break nil[44]
                    }
                    (339697 call = newLoc(339696 call actualInsertPts newIndIdx))
                  }
                  label _continueLabel[339703]
                  (339716 'move' tmp[339700](339709 call _cond_test(339711 call == newLoc(339714 call - 1))))
                  tmp[339700]
                }
                label _breakLabel[339704]
              }
            }
            {
              (339734 call halt "Something went wrong")
            }
          }
        }
        label _continueLabel[339752]
        _indexOfInterest[339747]
        _iterator[339748]
      }
      label _breakLabel[339753]
    }
    unknown prevCursor[339818](339815 IfExpr (339792 call . this c"compressRows") then
    { scopeless
      (339802 call .(339801 call(339796 call . parentDom c"dim") 0) c"low")
    } else
    { scopeless
      (339812 call .(339811 call(339806 call . parentDom c"dim") 1) c"low")
    } )
    (339821 'end of statement')
    unknown cursor[339823] int[13]
    (339826 'end of statement')
    unknown cursorCnt[339828] 0
    (339831 'end of statement')
    {
      unknown _indexOfInterest[339988] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339989] "expr temp" "temp"
      (340003 'move' _iterator[339989](339840 call _build_tuple(339998 call _getIterator inds)(340001 call _getIterator actualInsertPts)))
      Defer
      {
        {
          (340033 call _freeIterator _iterator[339989])
        }
      }
      { scopeless type
        (340008 'move' _indexOfInterest[339988](340005 call iteratorIndex _iterator[339989]))
      }
      ForLoop[339990]
      {
        (340013 call _check_tuple_var_decl _indexOfInterest[339988] 2)
        unknown ind[340019] "index var" "insert auto destroy"
        (340021 'move' ind[340019](340017 call _indexOfInterest[339988] 0))
        unknown p[340026] "index var" "insert auto destroy"
        (340028 'move' p[340026](340024 call _indexOfInterest[339988] 1))
        {
          if(339850 call _cond_test(339845 call == p(339843 call - 1)))
          {
            continue nil[44]
          }
          if(339878 call _cond_test(339857 call . this c"compressRows"))
          {
            (339865 call = cursor(339864 call ind 0))
          }
          {
            (339874 call = cursor(339873 call ind 1))
          }
          if(339983 call _cond_test(339884 call == cursor prevCursor))
          {
            (339888 call += cursorCnt 1)
          }
          {
            (339899 call +=(339897 call startIdx(339894 call + prevCursor 1)) cursorCnt)
            if(339969 call _cond_test(339908 call >(339905 call - cursor prevCursor) 1))
            {
              {
                unknown _indexOfInterest[339927] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[339928] "expr temp" "temp"
                (339937 'move' _iterator[339928](339935 call _getIterator(339945 call chpl_direct_range_iter(339941 call + prevCursor 2) cursor 1)))
                Defer
                {
                  {
                    (339961 call _freeIterator _iterator[339928])
                  }
                }
                { scopeless type
                  (339950 'move' _indexOfInterest[339927](339947 call iteratorIndex _iterator[339928]))
                }
                ForLoop[339929]
                {
                  unknown i[339954] "index var" "insert auto destroy"
                  (339956 'move' i[339954] _indexOfInterest[339927])
                  {
                    (339923 call +=(339921 call startIdx i) cursorCnt)
                  }
                  label _continueLabel[339932]
                  _indexOfInterest[339927]
                  _iterator[339928]
                }
                label _breakLabel[339933]
              }
            }
            (339975 call += cursorCnt 1)
            (339980 call = prevCursor cursor)
          }
        }
        label _continueLabel[339993]
        _indexOfInterest[339988]
        _iterator[339989]
      }
      label _breakLabel[339994]
    }
    {
      unknown _indexOfInterest[340060] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340061] "expr temp" "temp"
      (340070 'move' _iterator[340061](340068 call _getIterator(340081 call chpl_direct_range_iter(340074 call + prevCursor 1)(340078 call . startIdxDom c"high") 1)))
      Defer
      {
        {
          (340097 call _freeIterator _iterator[340061])
        }
      }
      { scopeless type
        (340086 'move' _indexOfInterest[340060](340083 call iteratorIndex _iterator[340061]))
      }
      ForLoop[340062]
      {
        unknown i[340090] "index var" "insert auto destroy"
        (340092 'move' i[340090] _indexOfInterest[340060])
        {
          (340056 call +=(340054 call startIdx i) cursorCnt)
        }
        label _continueLabel[340065]
        _indexOfInterest[340060]
        _iterator[340061]
      }
      label _breakLabel[340066]
    }
    {
      unknown _indexOfInterest[340115] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340116] "expr temp" "temp"
      (340125 'move' _iterator[340116](340123 call _getIterator _arrs))
      Defer
      {
        {
          (340141 call _freeIterator _iterator[340116])
        }
      }
      { scopeless type
        (340130 'move' _indexOfInterest[340115](340127 call iteratorIndex _iterator[340116]))
      }
      ForLoop[340117]
      {
        unknown a[340134] "index var" "insert auto destroy"
        (340136 'move' a[340134] _indexOfInterest[340115])
        (340113 call(340107 call . a c"sparseBulkShiftArray") arrShiftMap oldnnz)
        label _continueLabel[340120]
        _indexOfInterest[340115]
        _iterator[340116]
      }
      label _breakLabel[340121]
    }
    (340149 return actualAddCnt)
  }
  function CSDom[340954](?).dsiRemove[340162](arg _mt[341034]:_MT[238], arg this[341032]:CSDom[340954](?), arg ind[340159] :
  (340157 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    const tmp[340173] "const" "temp"(340172 call find ind)
    (340180 call _check_tuple_var_decl tmp[340173] 2)
    const found[340164] "const"(340174 call tmp[340173] 0)
    const insertPt[340166] "const"(340177 call tmp[340173] 1)
    (340185 'end of statement')
    if(340193 call _cond_test(340188 call ! found))
    {
      (340191 return 0)
    }
    (340200 call -= _nnz 1)
    (340206 call _shrink _nnz)
    const tmp[340214] "const" "temp" ind
    (340221 call _check_tuple_var_decl tmp[340214] 2)
    const row[340208] "const"(340215 call tmp[340214] 0)
    const col[340210] "const"(340218 call tmp[340214] 1)
    (340226 'end of statement')
    {
      unknown _indexOfInterest[340247] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340248] "expr temp" "temp"
      (340257 'move' _iterator[340248](340255 call _getIterator(340262 call chpl_direct_range_iter insertPt _nnz 1)))
      Defer
      {
        {
          (340278 call _freeIterator _iterator[340248])
        }
      }
      { scopeless type
        (340267 'move' _indexOfInterest[340247](340264 call iteratorIndex _iterator[340248]))
      }
      ForLoop[340249]
      {
        unknown i[340271] "index var" "insert auto destroy"
        (340273 'move' i[340271] _indexOfInterest[340247])
        {
          (340243 call =(340235 call idx i)(340242 call idx(340239 call + i 1)))
        }
        label _continueLabel[340252]
        _indexOfInterest[340247]
        _iterator[340248]
      }
      label _breakLabel[340253]
    }
    if(340419 call _cond_test(340286 call . this c"compressRows"))
    {
      {
        unknown _indexOfInterest[340309] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340310] "expr temp" "temp"
        (340319 'move' _iterator[340310](340317 call _getIterator(340330 call chpl_direct_range_iter(340323 call + row 1)(340327 call . startIdxDom c"high") 1)))
        Defer
        {
          {
            (340346 call _freeIterator _iterator[340310])
          }
        }
        { scopeless type
          (340335 'move' _indexOfInterest[340309](340332 call iteratorIndex _iterator[340310]))
        }
        ForLoop[340311]
        {
          unknown r[340339] "index var" "insert auto destroy"
          (340341 'move' r[340339] _indexOfInterest[340309])
          {
            (340305 call -=(340303 call startIdx r) 1)
          }
          label _continueLabel[340314]
          _indexOfInterest[340309]
          _iterator[340310]
        }
        label _breakLabel[340315]
      }
    }
    {
      {
        unknown _indexOfInterest[340374] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340375] "expr temp" "temp"
        (340384 'move' _iterator[340375](340382 call _getIterator(340395 call chpl_direct_range_iter(340388 call + col 1)(340392 call . startIdxDom c"high") 1)))
        Defer
        {
          {
            (340411 call _freeIterator _iterator[340375])
          }
        }
        { scopeless type
          (340400 'move' _indexOfInterest[340374](340397 call iteratorIndex _iterator[340375]))
        }
        ForLoop[340376]
        {
          unknown r[340404] "index var" "insert auto destroy"
          (340406 'move' r[340404] _indexOfInterest[340374])
          {
            (340370 call -=(340368 call startIdx r) 1)
          }
          label _continueLabel[340379]
          _indexOfInterest[340374]
          _iterator[340375]
        }
        label _breakLabel[340380]
      }
    }
    {
      unknown _indexOfInterest[340440] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340441] "expr temp" "temp"
      (340450 'move' _iterator[340441](340448 call _getIterator _arrs))
      Defer
      {
        {
          (340466 call _freeIterator _iterator[340441])
        }
      }
      { scopeless type
        (340455 'move' _indexOfInterest[340440](340452 call iteratorIndex _iterator[340441]))
      }
      ForLoop[340442]
      {
        unknown a[340459] "index var" "insert auto destroy"
        (340461 'move' a[340459] _indexOfInterest[340440])
        {
          (340437 call(340426 call . a c"sparseShiftArrayBack")(340434 call chpl_build_bounded_range insertPt(340432 call - _nnz 1)))
        }
        label _continueLabel[340445]
        _indexOfInterest[340440]
        _iterator[340441]
      }
      label _breakLabel[340446]
    }
    (340474 return 1)
  }
  function CSDom[340954](?).dsiClear[340480](arg _mt[341038]:_MT[238], arg this[341036]:CSDom[340954](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (340484 call = _nnz 0)
    (340490 call = startIdx 1)
  }
  function CSDom[340954](?).dimIter[340499](arg _mt[341042]:_MT[238], arg this[341040]:CSDom[340954](?), param arg d[340497]:_any[178](?), arg ind[340501]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(340573 call _cond_test(340511 call &&(340505 call != d 1)(340508 call . this c"compressRows")))
    {
      (340532 call compilerError "dimIter(0, ..) not supported on CS(compressRows=true) domains")
    }
    {
      if(340569 call _cond_test(340545 call &&(340537 call != d 0)(340543 call !(340540 call . this c"compressRows"))))
      {
        (340566 call compilerError "dimIter(1, ..) not supported on CS(compressRows=false) domains")
      }
    }
    {
      unknown _indexOfInterest[340596] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340597] "expr temp" "temp"
      (340606 'move' _iterator[340597](340604 call _getIterator(340615 call chpl_direct_range_iter(340610 call startIdx ind)(340613 call stopIdx ind) 1)))
      Defer
      {
        {
          (340631 call _freeIterator _iterator[340597])
        }
      }
      { scopeless type
        (340620 'move' _indexOfInterest[340596](340617 call iteratorIndex _iterator[340597]))
      }
      ForLoop[340598]
      {
        unknown i[340624] "index var" "insert auto destroy"
        (340626 'move' i[340624] _indexOfInterest[340596])
        (340594 yield(340593 call idx i))
        label _continueLabel[340601]
        _indexOfInterest[340596]
        _iterator[340597]
      }
      label _breakLabel[340602]
    }
  }
  function CSDom[340954](?).dsiSerialWrite[340644](arg _mt[341046]:_MT[238], arg this[341044]:CSDom[340954](?), arg f[340642]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (340648 call <~> f "{\n")
    if(340942 call _cond_test(340653 call . this c"compressRows"))
    {
      {
        unknown _indexOfInterest[340765] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340766] "expr temp" "temp"
        (340775 'move' _iterator[340766](340773 call _getIterator rowRange))
        Defer
        {
          {
            (340791 call _freeIterator _iterator[340766])
          }
        }
        { scopeless type
          (340780 'move' _indexOfInterest[340765](340777 call iteratorIndex _iterator[340766]))
        }
        ForLoop[340767]
        {
          unknown r[340784] "index var" "insert auto destroy"
          (340786 'move' r[340784] _indexOfInterest[340765])
          {
            const lo[340662] "const"(340661 call startIdx r)
            const hi[340669] "const"(340668 call stopIdx r)
            (340672 'end of statement')
            {
              unknown _indexOfInterest[340727] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[340728] "expr temp" "temp"
              (340737 'move' _iterator[340728](340735 call _getIterator(340742 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (340758 call _freeIterator _iterator[340728])
                }
              }
              { scopeless type
                (340747 'move' _indexOfInterest[340727](340744 call iteratorIndex _iterator[340728]))
              }
              ForLoop[340729]
              {
                unknown c[340751] "index var" "insert auto destroy"
                (340753 'move' c[340751] _indexOfInterest[340727])
                {
                  (340723 call <~>(340696 call <~>(340693 call <~>(340687 call <~>(340684 call <~>(340681 call <~> f " (") r) ", ")(340692 call idx c)) ")")(340720 IfExpr (340700 call == c hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    ""
                  } ))
                }
                label _continueLabel[340732]
                _indexOfInterest[340727]
                _iterator[340728]
              }
              label _breakLabel[340733]
            }
          }
          label _continueLabel[340770]
          _indexOfInterest[340765]
          _iterator[340766]
        }
        label _breakLabel[340771]
      }
    }
    {
      {
        unknown _indexOfInterest[340908] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340909] "expr temp" "temp"
        (340918 'move' _iterator[340909](340916 call _getIterator colRange))
        Defer
        {
          {
            (340934 call _freeIterator _iterator[340909])
          }
        }
        { scopeless type
          (340923 'move' _indexOfInterest[340908](340920 call iteratorIndex _iterator[340909]))
        }
        ForLoop[340910]
        {
          unknown c[340927] "index var" "insert auto destroy"
          (340929 'move' c[340927] _indexOfInterest[340908])
          {
            const lo[340805] "const"(340804 call startIdx c)
            const hi[340812] "const"(340811 call stopIdx c)
            (340815 'end of statement')
            {
              unknown _indexOfInterest[340870] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[340871] "expr temp" "temp"
              (340880 'move' _iterator[340871](340878 call _getIterator(340885 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (340901 call _freeIterator _iterator[340871])
                }
              }
              { scopeless type
                (340890 'move' _indexOfInterest[340870](340887 call iteratorIndex _iterator[340871]))
              }
              ForLoop[340872]
              {
                unknown r[340894] "index var" "insert auto destroy"
                (340896 'move' r[340894] _indexOfInterest[340870])
                {
                  (340866 call <~>(340839 call <~>(340836 call <~>(340833 call <~>(340830 call <~>(340824 call <~> f " (")(340829 call idx r)) ", ") c) ")")(340863 IfExpr (340843 call == r hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    ""
                  } ))
                }
                label _continueLabel[340875]
                _indexOfInterest[340870]
                _iterator[340871]
              }
              label _breakLabel[340876]
            }
          }
          label _continueLabel[340913]
          _indexOfInterest[340908]
          _iterator[340909]
        }
        label _breakLabel[340914]
      }
    }
    (340948 call <~> f "}\n")
  }
  type CSDom[340954](?) unknown compressRows[336318] "param" unknown sortedIndices[336322] "param" unknown stridable[336326] "param" unknown dist[336336](336335 'to unmanaged class from unknown'(336334 call CS compressRows sortedIndices)) unknown rowRange[336346](336345 call range idxType(stridable = stridable)) unknown colRange[336356](336355 call range idxType(stridable = stridable)) unknown startIdxDom[336366](336364 call chpl__buildDomainRuntimeType defaultDist 1 idxType) unknown _nnz[336371] 0 unknown startIdx[336382] "local field"(336380 call chpl__buildArrayRuntimeType(336378 call chpl__ensureDomainExpr startIdxDom) idxType) unknown idx[336393] "local field"(336391 call chpl__buildArrayRuntimeType(336389 call chpl__ensureDomainExpr nnzDom) idxType) BaseSparseDomImpl
  function CSArr[341882].init[341056](arg _mt[341886]:_MT[238], arg this[341884]:CSArr[341882], arg eltType[341054]:_any[178](?), param arg rank[341059] :
  int[13], arg idxType[341062]:_any[178](?), arg dom[341064]:_any[178](?), param arg initElts[341067] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (341080 call(341071 call . super c"init") eltType rank idxType dom initElts)
  }
  function CSArr[341882].dsiAccess[341094](arg _mt[341890]:_MT[238], arg this[341888]:CSArr[341882], arg ind[341091] :
  (341089 call * rank idxType)) ref : _unknown[51] "method" "primary method"
  {
    (341102 call(341097 call . dom c"boundsCheck") ind)
    const tmp[341117] "const" "temp"(341116 call(341111 call . dom c"find") ind)
    (341124 call _check_tuple_var_decl tmp[341117] 2)
    const found[341105] "const"(341118 call tmp[341117] 0)
    const loc[341107] "const"(341121 call tmp[341117] 1)
    (341129 'end of statement')
    if(341143 call _cond_test found)
    {
      (341135 return(341134 call data loc))
    }
    {
      (341141 call halt "attempting to assign a 'zero' value in a sparse array: " ind)
    }
  }
  function CSArr[341882].dsiAccess[341160](arg _mt[341894]:_MT[238], arg this[341892]:CSArr[341882], arg ind[341157] :
  (341155 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (341172 call(341167 call . dom c"boundsCheck") ind)
    const tmp[341187] "const" "temp"(341186 call(341181 call . dom c"find") ind)
    (341194 call _check_tuple_var_decl tmp[341187] 2)
    const found[341175] "const"(341188 call tmp[341187] 0)
    const loc[341177] "const"(341191 call tmp[341187] 1)
    (341199 'end of statement')
    if(341210 call _cond_test found)
    {
      (341205 return(341204 call data loc))
    }
    {
      (341208 return irv)
    }
  }
  where {
    (341165 call shouldReturnRvalueByValue eltType)
  }
  function CSArr[341882].dsiAccess[341228](arg _mt[341898]:_MT[238], arg this[341896]:CSArr[341882], arg ind[341225] :
  (341223 call * rank idxType)) const ref : _unknown[51] "method" "primary method"
  {
    (341240 call(341235 call . dom c"boundsCheck") ind)
    const tmp[341255] "const" "temp"(341254 call(341249 call . dom c"find") ind)
    (341262 call _check_tuple_var_decl tmp[341255] 2)
    const found[341243] "const"(341256 call tmp[341255] 0)
    const loc[341245] "const"(341259 call tmp[341255] 1)
    (341267 'end of statement')
    if(341278 call _cond_test found)
    {
      (341273 return(341272 call data loc))
    }
    {
      (341276 return irv)
    }
  }
  where {
    (341233 call shouldReturnRvalueByConstRef eltType)
  }
  function CSArr[341882].these[341289](arg _mt[341902]:_MT[238], arg this[341900]:CSArr[341882]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[341305] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341306] "expr temp" "temp"
      (341315 'move' _iterator[341306](341313 call _getIterator(341323 call chpl_direct_range_iter 1(341320 call . dom c"_nnz") 1)))
      Defer
      {
        {
          (341339 call _freeIterator _iterator[341306])
        }
      }
      { scopeless type
        (341328 'move' _indexOfInterest[341305](341325 call iteratorIndex _iterator[341306]))
      }
      ForLoop[341307]
      {
        unknown i[341332] "index var" "insert auto destroy"
        (341334 'move' i[341332] _indexOfInterest[341305])
        (341303 yield(341302 call data i))
        label _continueLabel[341310]
        _indexOfInterest[341305]
        _iterator[341306]
      }
      label _breakLabel[341311]
    }
  }
  function CSArr[341882].these[341355](arg _mt[341906]:_MT[238], arg this[341904]:CSArr[341882], param arg tag[341352] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[341375] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341376] "expr temp" "temp"
      (341385 'move' _iterator[341376](341383 call _getIterator(341371 call(341366 call . dom c"these") tag)))
      Defer
      {
        {
          (341402 call _freeIterator _iterator[341376])
        }
      }
      { scopeless type
        (341391 'move' _indexOfInterest[341375](341388 call iteratorIndex _iterator[341376]))
      }
      ForLoop[341377]
      {
        unknown followThis[341395] "index var" "insert auto destroy"
        (341397 'move' followThis[341395] _indexOfInterest[341375])
        (341373 yield followThis)
        label _continueLabel[341380]
        _indexOfInterest[341375]
        _iterator[341376]
      }
      label _breakLabel[341381]
    }
  }
  where {
    (341362 call == tag(341359 call . iterKind c"leader"))
  }
  function CSArr[341882].these[341419](arg _mt[341910]:_MT[238], arg this[341908]:CSArr[341882], param arg tag[341416] :
  iterKind, arg followThis[341427] :
  (341425 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[341445] "temp" followThis
    (341455 call _check_tuple_var_decl tmp[341445] 3)
    unknown followThisDom[341437](341446 call tmp[341445] 0)
    unknown startIx[341439](341449 call tmp[341445] 1)
    unknown endIx[341441](341452 call tmp[341445] 2)
    (341460 'end of statement')
    if(341490 call _cond_test(341467 call != followThisDom(341464 call . this c"dom")))
    {
      (341488 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays (CS layout)")
    }
    if(341520 call _cond_test debugCS)
    {
      (341518 call writeln "CSArr follower: " startIx ".." endIx)
    }
    {
      unknown _indexOfInterest[341536] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341537] "expr temp" "temp"
      (341546 'move' _iterator[341537](341544 call _getIterator(341551 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (341567 call _freeIterator _iterator[341537])
        }
      }
      { scopeless type
        (341556 'move' _indexOfInterest[341536](341553 call iteratorIndex _iterator[341537]))
      }
      ForLoop[341538]
      {
        unknown i[341560] "index var" "insert auto destroy"
        (341562 'move' i[341560] _indexOfInterest[341536])
        (341534 yield(341533 call data i))
        label _continueLabel[341541]
        _indexOfInterest[341536]
        _iterator[341537]
      }
      label _breakLabel[341542]
    }
  }
  where {
    (341435 call == tag(341432 call . iterKind c"follower"))
  }
  function CSArr[341882].these[341583](arg _mt[341914]:_MT[238], arg this[341912]:CSArr[341882], param arg tag[341580] :
  iterKind, arg followThis[341585]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (341597 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")
    (341601 yield 0)
  }
  where {
    (341592 call == tag(341589 call . iterKind c"follower"))
  }
  function CSArr[341882].dsiSerialWrite[341610](arg _mt[341918]:_MT[238], arg this[341916]:CSArr[341882], arg f[341608]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(341874 call _cond_test(341613 call . dom c"compressRows"))
    {
      {
        unknown _indexOfInterest[341711] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[341712] "expr temp" "temp"
        (341721 'move' _iterator[341712](341719 call _getIterator(341620 call . dom c"rowRange")))
        Defer
        {
          {
            (341738 call _freeIterator _iterator[341712])
          }
        }
        { scopeless type
          (341727 'move' _indexOfInterest[341711](341724 call iteratorIndex _iterator[341712]))
        }
        ForLoop[341713]
        {
          unknown r[341731] "index var" "insert auto destroy"
          (341733 'move' r[341731] _indexOfInterest[341711])
          {
            const lo[341630] "const"(341629 call(341624 call . dom c"startIdx") r)
            (341633 'end of statement')
            const hi[341644] "const"(341643 call(341638 call . dom c"stopIdx") r)
            (341647 'end of statement')
            {
              unknown _indexOfInterest[341673] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[341674] "expr temp" "temp"
              (341683 'move' _iterator[341674](341681 call _getIterator(341688 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (341704 call _freeIterator _iterator[341674])
                }
              }
              { scopeless type
                (341693 'move' _indexOfInterest[341673](341690 call iteratorIndex _iterator[341674]))
              }
              ForLoop[341675]
              {
                unknown c[341697] "index var" "insert auto destroy"
                (341699 'move' c[341697] _indexOfInterest[341673])
                {
                  (341669 call <~>(341658 call <~> f(341657 call data c))(341666 IfExpr (341662 call == c hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    " "
                  } ))
                }
                label _continueLabel[341678]
                _indexOfInterest[341673]
                _iterator[341674]
              }
              label _breakLabel[341679]
            }
          }
          label _continueLabel[341716]
          _indexOfInterest[341711]
          _iterator[341712]
        }
        label _breakLabel[341717]
      }
    }
    {
      {
        unknown _indexOfInterest[341839] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[341840] "expr temp" "temp"
        (341849 'move' _iterator[341840](341847 call _getIterator(341750 call . dom c"colRange")))
        Defer
        {
          {
            (341866 call _freeIterator _iterator[341840])
          }
        }
        { scopeless type
          (341855 'move' _indexOfInterest[341839](341852 call iteratorIndex _iterator[341840]))
        }
        ForLoop[341841]
        {
          unknown c[341859] "index var" "insert auto destroy"
          (341861 'move' c[341859] _indexOfInterest[341839])
          {
            const lo[341760] "const"(341759 call(341754 call . dom c"startIdx") c)
            (341763 'end of statement')
            const hi[341772] "const"(341771 call(341766 call . dom c"stopIdx") c)
            (341775 'end of statement')
            {
              unknown _indexOfInterest[341801] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[341802] "expr temp" "temp"
              (341811 'move' _iterator[341802](341809 call _getIterator(341816 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (341832 call _freeIterator _iterator[341802])
                }
              }
              { scopeless type
                (341821 'move' _indexOfInterest[341801](341818 call iteratorIndex _iterator[341802]))
              }
              ForLoop[341803]
              {
                unknown r[341825] "index var" "insert auto destroy"
                (341827 'move' r[341825] _indexOfInterest[341801])
                {
                  (341797 call <~>(341786 call <~> f(341785 call data r))(341794 IfExpr (341790 call == r hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    " "
                  } ))
                }
                label _continueLabel[341806]
                _indexOfInterest[341801]
                _iterator[341802]
              }
              label _breakLabel[341807]
            }
          }
          label _continueLabel[341844]
          _indexOfInterest[341839]
          _iterator[341840]
        }
        label _breakLabel[341845]
      }
    }
  }
  type CSArr[341882] BaseSparseArrImpl
}