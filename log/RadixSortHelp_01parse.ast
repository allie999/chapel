AST dump for RadixSortHelp after pass parse.
Module use list: 

{
  (352950 'use' ChapelStandard)
  (275988 'use' Sort)
  (275995 'import'(275992 call . Reflection c"canResolveMethod"))
  { scopeless
    unknown RADIX_BITS[275998] "param" 8
    (276001 'end of statement')
  }
  { scopeless
    unknown classifyUnrollFactor[276003] "param" 7
    (276006 'end of statement')
  }
  function binForRecordKeyPart[276011](arg a[276009]:_any[178](?), arg criterion[276013]:_any[178](?), arg startbit[276016] :
  int[13]) : _unknown[51] "inline"
  {
    { scopeless
      const testRet[276028] "const"(276027 'typeof'(276026 call(276020 call . criterion c"keyPart") a 1))
      (276031 'end of statement')
    }
    { scopeless
      const testPart[276037] "const"(276036 call testRet 1)
      (276040 'end of statement')
    }
    { scopeless
      unknown bitsPerPart[276046] "param"(276045 call numBits(276043 'typeof' testPart))
      (276049 'end of statement')
    }
    { scopeless
      unknown bitsPerPartModRadixBits[276054] "param"(276052 call % bitsPerPart RADIX_BITS)
      (276057 'end of statement')
    }
    if(276083 call _cond_test(276060 call != bitsPerPartModRadixBits 0))
    {
      { scopeless
        (276081 call compilerError "part size must be a multiple of radix bits")
      }
    }
    { scopeless
      const whichpart[276092] "const"(276090 call / startbit bitsPerPart)
      (276095 'end of statement')
    }
    { scopeless
      const bitsinpart[276100] "const"(276098 call % startbit bitsPerPart)
      (276103 'end of statement')
    }
    { scopeless
      const tmp[276117] "const" "temp"(276116 call(276110 call . criterion c"keyPart") a whichpart)
      (276124 call _check_tuple_var_decl tmp[276117] 2)
      const section[276104] "const"(276118 call tmp[276117] 0)
      const part[276106] "const"(276121 call tmp[276117] 1)
      (276129 'end of statement')
    }
    { scopeless
      unknown ubits[276137](276135 call _cast(276134 call uint[115] bitsPerPart) part)
      (276140 'end of statement')
    }
    if(276167 call _cond_test(276144 call isInt part))
    {
      { scopeless
        const one[276148] "const" 1(276146 'typeof' ubits)
        (276151 'end of statement')
      }
      (276164 call = ubits(276162 call ^ ubits(276160 call << one(276158 call - bitsPerPart 1))))
    }
    { scopeless
      unknown mask[276179] "param"(276177 call -(276174 call << 1 RADIX_BITS) 1) uint[115]
      (276182 'end of statement')
    }
    { scopeless
      const ubin[276196] "const"(276194 call &(276191 call >> ubits(276189 call -(276186 call - bitsPerPart bitsinpart) RADIX_BITS)) mask)
      (276199 'end of statement')
    }
    if(276247 call _cond_test(276202 call == section 0))
    {
      { scopeless
        (276215 return(276213 call _build_tuple(276209 call +(276206 call _cast int[13] ubin) 1) ubits))
      }
    }
    {
      { scopeless
        if(276241 call _cond_test(276219 call < section 0))
        {
          { scopeless
            (276226 return(276224 call _build_tuple 0 ubits))
          }
        }
        {
          { scopeless
            (276239 return(276237 call _build_tuple(276233 call +(276230 call << 1 RADIX_BITS) 1) ubits))
          }
        }
      }
    }
  }
  function binForRecord[276259](arg a[276257]:_any[178](?), arg criterion[276261]:_any[178](?), arg startbit[276264] :
  int[13]) : _unknown[51] "inline"
  {
    if(276357 call _cond_test(276273 call canResolveMethod criterion "keyPart" a 0))
    {
      (276280 return(276279 call binForRecordKeyPart a criterion startbit))
    }
    {
      { scopeless
        if(276353 call _cond_test(276288 call canResolveMethod criterion "key" a))
        {
          (276301 return(276300 call binForRecordKeyPart(276296 call(276291 call . criterion c"key") a) defaultComparator startbit))
        }
        {
          (276350 call compilerError "Bad comparator for radix sort "(276326 call _cast string[26](276324 'typeof' criterion)) " with eltType "(276348 call _cast string[26](276346 'typeof' a)))
        }
      }
    }
  }
  function fixedWidth[276369](arg eltTy[276367]:_any[178](?)) param : _unknown[51]
  {
    if(276399 call _cond_test(276391 call ||(276385 call ||(276379 call ||(276374 call isUintType eltTy)(276378 call isIntType eltTy))(276384 call isRealType eltTy))(276390 call isImagType eltTy)))
    {
      { scopeless
        (276397 return(276396 call numBits eltTy))
      }
    }
    if(276431 call _cond_test(276408 call isHomogeneousTuple eltTy))
    {
      { scopeless
        unknown tmp[276410] eltTy
        (276413 'end of statement')
      }
      (276429 return(276427 call *(276416 call . tmp c"size")(276426 call numBits(276424 'typeof'(276423 call tmp 0)))))
    }
    (276438 return(276436 call - 1))
  }
  function msbRadixSortParamLastStartBit[276450](arg Data[276447] :
  (276444 call chpl__buildArrayRuntimeType nil[44]), arg comparator[276452]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      const element[276464] "const" "ref var"(276463 call Data(276459 call .(276456 call . Data c"_dom") c"low"))
      (276467 'end of statement')
    }
    if(276538 call _cond_test(276482 call &&(276472 call ==(276470 'typeof' comparator) DefaultComparator)(276480 call >(276478 call fixedWidth(276476 'typeof' element)) 0)))
    {
      (276492 return(276490 call -(276488 call fixedWidth(276486 'typeof' element)) RADIX_BITS))
    }
    {
      { scopeless
        if(276534 call _cond_test(276500 call canResolveMethod comparator "key" element))
        {
          unknown keyType[276509] "type variable"(276508 'typeof'(276507 call(276502 call . comparator c"key") element))
          if(276529 call _cond_test(276518 call >(276516 call fixedWidth keyType) 0))
          {
            { scopeless
              (276527 return(276525 call -(276523 call fixedWidth keyType) RADIX_BITS))
            }
          }
        }
      }
    }
    (276546 return(276544 call - 1))
  }
  function radixSortClz[276554](arg val[276552]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown nBits[276561] "param"(276560 call numBits(276558 'typeof' val))
      (276564 'end of statement')
    }
    if(276574 call _cond_test(276568 call == val 0))
    {
      (276571 return nBits)
    }
    { scopeless
      unknown cur[276579] val
      (276582 'end of statement')
    }
    { scopeless
      unknown one[276588](276586 call _cast(276585 'typeof' val) 1)
      (276591 'end of statement')
    }
    { scopeless
      unknown hi[276599](276597 call << one(276595 call - nBits 1))
      (276602 'end of statement')
    }
    { scopeless
      unknown n[276604] 0
      (276607 'end of statement')
    }
    {
      unknown tmp[276626] "temp"
      (276656 'move' tmp[276626](276648 call _cond_test(276650 call ==(276652 call & cur hi) 0)))
      WhileDo[276631]
      {
        {
          (276617 call += n 1)
          (276623 call <<= cur 1)
        }
        label _continueLabel[276629]
        (276643 'move' tmp[276626](276635 call _cond_test(276637 call ==(276639 call & cur hi) 0)))
        tmp[276626]
      }
      label _breakLabel[276630]
    }
    (276660 return n)
  }
  function findDataStartBit[276670](arg startbit[276667] :
  int[13], arg min_ubits[276672]:_any[178](?), arg max_ubits[276674]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown xor[276681](276679 call ^ min_ubits max_ubits)
      (276684 'end of statement')
    }
    { scopeless
      unknown bitsPerPart[276691] "param"(276690 call numBits(276688 'typeof' min_ubits))
      (276694 'end of statement')
    }
    { scopeless
      const bitsinpart[276699] "const"(276697 call % startbit bitsPerPart)
      (276702 'end of statement')
    }
    (276705 call <<= xor bitsinpart)
    (276710 call >>= xor bitsinpart)
    { scopeless
      unknown new_start[276717](276716 call radixSortClz xor)
      (276720 'end of statement')
    }
    { scopeless
      unknown new_digit[276725](276723 call / new_start RADIX_BITS)
      (276728 'end of statement')
    }
    { scopeless
      unknown new_start_bit_rounded[276733](276731 call * new_digit RADIX_BITS)
      (276736 'end of statement')
    }
    (276741 return(276739 call _cast int[13] new_start_bit_rounded))
  }
  { scopeless type
    int[13]
  }
  function checkSorted[276752](arg start_n[276749] :
  int[13], arg end_n[276755] :
  int[13], arg A[276761] :
  (276758 call chpl__buildArrayRuntimeType nil[44]), arg criterion[276764]:_any[178](?), arg startbit[276767] =
  0) : _unknown[51] "always propagate line file info" "insert line file info"
  {
    {
      unknown _indexOfInterest[276936] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[276937] "expr temp" "temp"
      (276946 'move' _iterator[276937](276944 call _getIterator(276954 call chpl_direct_range_iter(276950 call + start_n 1) end_n 1)))
      Defer
      {
        {
          (276970 call _freeIterator _iterator[276937])
        }
      }
      { scopeless type
        (276959 'move' _indexOfInterest[276936](276956 call iteratorIndex _iterator[276937]))
      }
      ForLoop[276938]
      {
        unknown i[276963] "index var" "insert auto destroy"
        (276965 'move' i[276963] _indexOfInterest[276936])
        {
          { scopeless
            unknown cmp[276793](276792 call chpl_compare(276785 call A(276782 call - i 1))(276790 call A i) criterion)
            (276796 'end of statement')
          }
          if(276932 call _cond_test(276800 call > cmp 0))
          {
            (276903 call writeln "Error: not sorted properly at i=" i " A[i-1]="(276845 call A(276842 call - i 1)) " A[i]="(276866 call A i) " in start=" start_n " end=" end_n)
            (276909 call writeln A)
            (276930 call halt "failed checkSorted")
          }
        }
        label _continueLabel[276941]
        _indexOfInterest[276936]
        _iterator[276937]
      }
      label _breakLabel[276942]
    }
  }
  type RadixBucketizer[277268] function RadixBucketizer[277268].getNumBuckets[276983](arg _mt[277272]:_MT[238], arg this[277270]:RadixBucketizer[277268]) : _unknown[51] "method" "primary method"
  {
    (276992 return(276990 call +(276987 call << 1 RADIX_BITS) 2))
  } function RadixBucketizer[277268].getBinsToRecursivelySort[276999](arg _mt[277276]:_MT[238], arg this[277274]:RadixBucketizer[277268]) : _unknown[51] "method" "primary method"
  {
    (277008 return(277006 call chpl_build_bounded_range 1(277004 call << 1 RADIX_BITS)))
  } function RadixBucketizer[277268].getNextStartBit[277019](arg _mt[277280]:_MT[238], arg this[277278]:RadixBucketizer[277268], arg start_bit[277016] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (277025 return(277023 call + start_bit 8))
  } function RadixBucketizer[277268].bucketForRecord[277034](arg _mt[277284]:_MT[238], arg this[277282]:RadixBucketizer[277268], arg a[277032]:_any[178](?), arg criterion[277036]:_any[178](?), arg startbit[277038]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      const tmp[277051] "const" "temp"(277050 call binForRecord a criterion startbit)
      (277055 call _check_tuple_var_decl tmp[277051] 2)
      const bin[277040] "const"(277052 call tmp[277051] 0)
      (277060 'end of statement')
    }
    (277063 return bin)
  } function RadixBucketizer[277268].classify[277071](arg _mt[277288]:_MT[238], arg this[277286]:RadixBucketizer[277268], arg A[277069]:_any[178](?), arg start_n[277073]:_any[178](?), arg end_n[277075]:_any[178](?), arg criterion[277077]:_any[178](?), arg startbit[277079]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown cur[277082] start_n
      (277085 'end of statement')
    }
    {
      unknown tmp[277174] "temp"
      (277210 'move' tmp[277174](277199 call _cond_test(277201 call <= cur(277204 call - end_n(277207 call - classifyUnrollFactor 1)))))
      WhileDo[277179]
      {
        {
          {
            unknown _indexOfInterest[277127] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[277128] "expr temp" "temp"
            (277137 'move' _iterator[277128](277135 call _getIterator(277145 call chpl_direct_range_iter 0(277142 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (277161 call _freeIterator _iterator[277128])
              }
            }
            { scopeless type
              (277150 'move' _indexOfInterest[277127](277147 call iteratorIndex _iterator[277128]))
            }
            ForLoop[277129]
            {
              unknown j[277154] "index var" "insert auto destroy"
              (277156 'move' j[277154] _indexOfInterest[277127])
              {
                (277124 yield(277122 call _build_tuple(277107 call + cur j)(277120 call bucketForRecord(277116 call A(277113 call + cur j)) criterion startbit)))
              }
              label _continueLabel[277132]
              _indexOfInterest[277127]
              _iterator[277128]
            }
            label _breakLabel[277133]
          }
          (277171 call += cur classifyUnrollFactor)
        }
        label _continueLabel[277177]
        (277194 'move' tmp[277174](277183 call _cond_test(277185 call <= cur(277188 call - end_n(277191 call - classifyUnrollFactor 1)))))
        tmp[277174]
      }
      label _breakLabel[277178]
    }
    {
      unknown tmp[277238] "temp"
      (277262 'move' tmp[277238](277257 call _cond_test(277259 call <= cur end_n)))
      WhileDo[277243]
      {
        {
          (277230 yield(277228 call _build_tuple cur(277226 call bucketForRecord(277222 call A cur) criterion startbit)))
          (277235 call += cur 1)
        }
        label _continueLabel[277241]
        (277252 'move' tmp[277238](277247 call _cond_test(277249 call <= cur end_n)))
        tmp[277238]
      }
      label _breakLabel[277242]
    }
  }
}