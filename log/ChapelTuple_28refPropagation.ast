AST dump for ChapelTuple after pass refPropagation.
Module use list: ChapelStandard DSIUtil 

{
  function chpl__init_ChapelTuple[415948]() : void[4] "insert line file info" "module init" "resolved"
  {
    (508974 return _void[55])
  }
  function 57*int(64)[1210485].this[1211603](ref arg this[1211609]:57*int(64)[1210485], const in arg i[1211611]:int(64)[13]) ref : _ref(int(64))[936572] "instantiated generic" "invisible fn" "method" "no doc" "reference to const when const this" "resolved" "star tuple accessor"
  {
    const-val tmp[1211659]:bool[10] "dead after last mention" "maybe param" "temp"
    const-val call_tmp[2116092]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2116094 'move' call_tmp[2116092](2116096 '<' i[1211611] 0))
    (1211661 'move' tmp[1211659] call_tmp[2116092])
    val tmp[1211680]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    const-val tmp[1211682]:bool[10] "dead after last mention" "maybe param" "temp"
    const-val call_tmp[1211684]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (1211686 'move' call_tmp[1211684] tmp[1211659])
    (1211691 'move' tmp[1211682] call_tmp[1211684])
    if tmp[1211682]
    {
      (1211698 'move' tmp[1211680] 1)
    }
    {
      const-val tmp[1211704]:bool[10] "dead after last mention" "expr temp" "maybe param" "no auto destroy" "temp"
      const-val call_tmp[1211722]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      val inlineImm[2124386]:int(64)[13] "temp"
      (2124389 'move' inlineImm[2124386] 56)
      const-val call_tmp[2124392]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2124394 'move' call_tmp[2124392](2124396 '>' i[1211611] inlineImm[2124386]))
      (1211724 'move' call_tmp[1211722] call_tmp[2124392])
      (1211730 'move' tmp[1211704] call_tmp[1211722])
      (1211735 'move' tmp[1211680] tmp[1211704])
    }
    const-val call_tmp[1211741]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (1211743 'move' call_tmp[1211741] tmp[1211680])
    if call_tmp[1211741]
    {
      (1211751 call halt[1212252] "tuple access out of bounds: " i[1211611])
    }
    ref call_tmp[1211756]:int(64)[13] "dead after last mention" "maybe param" "temp"
    (1211758 'move' call_tmp[1211756](1211760 'get svec member' this[1211609] i[1211611]))
    (1211767 return call_tmp[1211756])
  }
  function 1*range(int(64),bounded,false)[1244696].this[1368641](ref arg this[1368647]:1*range(int(64),bounded,false)[1244696], const in arg i[1368649]:int(64)[13]) ref : _ref(range(int(64),bounded,false))[1026858] "instantiated generic" "invisible fn" "method" "no doc" "reference to const when const this" "resolved" "fn synchronization free" "star tuple accessor"
  {
    const-val tmp[1368697]:bool[10] "dead after last mention" "maybe param" "temp"
    const-val call_tmp[2116142]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2116144 'move' call_tmp[2116142](2116146 '<' i[1368649] 0))
    (1368699 'move' tmp[1368697] call_tmp[2116142])
    val tmp[1368718]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    const-val tmp[1368720]:bool[10] "dead after last mention" "maybe param" "temp"
    const-val call_tmp[1368722]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (1368724 'move' call_tmp[1368722] tmp[1368697])
    (1368729 'move' tmp[1368720] call_tmp[1368722])
    if tmp[1368720]
    {
      (1368736 'move' tmp[1368718] 1)
    }
    {
      const-val tmp[1368742]:bool[10] "dead after last mention" "expr temp" "maybe param" "no auto destroy" "temp"
      const-val call_tmp[1368760]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      val inlineImm[2124716]:int(64)[13] "temp"
      (2124719 'move' inlineImm[2124716] 0)
      const-val call_tmp[2124722]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2124724 'move' call_tmp[2124722](2124726 '>' i[1368649] inlineImm[2124716]))
      (1368762 'move' call_tmp[1368760] call_tmp[2124722])
      (1368768 'move' tmp[1368742] call_tmp[1368760])
      (1368773 'move' tmp[1368718] tmp[1368742])
    }
    const-val call_tmp[1368779]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (1368781 'move' call_tmp[1368779] tmp[1368718])
    if call_tmp[1368779]
    {
      (1368789 call halt[1212252] "tuple access out of bounds: " i[1368649])
    }
    ref call_tmp[1368794]:range(int(64),bounded,false)[1026814] "dead after last mention" "maybe param" "temp"
    (1368796 'move' call_tmp[1368794](1368798 'get svec member' this[1368647] i[1368649]))
    (1368805 return call_tmp[1368794])
  }
  function 1*int(64)[1256525].this[1421336](ref arg this[1421342]:1*int(64)[1256525], const in arg i[1421344]:int(64)[13]) ref : _ref(int(64))[936572] "instantiated generic" "invisible fn" "method" "no doc" "reference to const when const this" "resolved" "fn synchronization free" "star tuple accessor"
  {
    const-val tmp[1421392]:bool[10] "dead after last mention" "maybe param" "temp"
    const-val call_tmp[2116162]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2116164 'move' call_tmp[2116162](2116166 '<' i[1421344] 0))
    (1421394 'move' tmp[1421392] call_tmp[2116162])
    val tmp[1421413]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    const-val tmp[1421415]:bool[10] "dead after last mention" "maybe param" "temp"
    const-val call_tmp[1421417]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (1421419 'move' call_tmp[1421417] tmp[1421392])
    (1421424 'move' tmp[1421415] call_tmp[1421417])
    if tmp[1421415]
    {
      (1421431 'move' tmp[1421413] 1)
    }
    {
      const-val tmp[1421437]:bool[10] "dead after last mention" "expr temp" "maybe param" "no auto destroy" "temp"
      const-val call_tmp[1421455]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      val inlineImm[2124821]:int(64)[13] "temp"
      (2124824 'move' inlineImm[2124821] 0)
      const-val call_tmp[2124827]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2124829 'move' call_tmp[2124827](2124831 '>' i[1421344] inlineImm[2124821]))
      (1421457 'move' call_tmp[1421455] call_tmp[2124827])
      (1421463 'move' tmp[1421437] call_tmp[1421455])
      (1421468 'move' tmp[1421413] tmp[1421437])
    }
    const-val call_tmp[1421474]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (1421476 'move' call_tmp[1421474] tmp[1421413])
    if call_tmp[1421474]
    {
      (1421484 call halt[1212252] "tuple access out of bounds: " i[1421344])
    }
    ref call_tmp[1421489]:int(64)[13] "dead after last mention" "maybe param" "temp"
    (1421491 'move' call_tmp[1421489](1421493 'get svec member' this[1421342] i[1421344]))
    (1421500 return call_tmp[1421489])
  }
  function 1*range(int(64),bounded,false)[1244696].indices[1771631](const  ref arg this[1771637]:1*range(int(64),bounded,false)[1244696], ref arg _retArg[1841455]:range(int(64),bounded,false)[1026814]) : void[4] "fn returns via _retArg" "instantiated generic" "invisible fn" "method" "no parens" "resolved"
  {
    const-val ret[1771639]:range(int(64),bounded,false)[1026814] "dead after last mention" "RVV" "temp"
    const-val call_tmp[1771663]:range(int(64),bounded,false)[1026814] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val ret_tmp[1831817]:range(int(64),bounded,false)[1026814] "temp"
    (1771668 call chpl_build_bounded_range[455137] 0 0 ret_tmp[1831817])
    (1831820 'move' call_tmp[1771663] ret_tmp[1831817])
    (1771671 'move' ret[1771639] call_tmp[1771663])
    (1841457 '=' _retArg[1841455] ret[1771639])
    (1841459 return _void[55])
  }
  type (c_ptr(uint(8)),int(64))[955208] val x0[955204]:c_ptr(uint(8))[937423] val x1[955206]:int(64)[13]
  type 1*c_string[959462] val x0[959460]:c_string[19]
  type (syserr,int(32),int(32))[964620] val x0[964614]:syserr[223584] val x1[964616]:int(32)[95] val x2[964618]:int(32)[95]
  type 2*int(32)[971678] val x0[971674]:int(32)[95] val x1[971676]:int(32)[95]
  type 6*string[985051] const-ref x0[985039]:string[26] const-ref x1[985041]:string[26] const-ref x2[985043]:string[26] const-ref x3[985045]:string[26] const-ref x4[985047]:string[26] const-ref x5[985049]:string[26]
  type 6*string[985217] val x0[985205]:string[26] val x1[985207]:string[26] val x2[985209]:string[26] val x3[985211]:string[26] val x4[985213]:string[26] val x5[985215]:string[26]
  type 2*int(64)[1040056] val x0[1040052]:int(64)[13] val x1[1040054]:int(64)[13]
  type (string,range(byteIndex,bounded,false),string,int(64))[1044401] const-ref x0[1044393]:string[26] val x1[1044395]:range(byteIndex,bounded,false)[1025792] const-ref x2[1044397]:string[26] val x3[1044399]:int(64)[13]
  type 1*byteIndex[1057081] const-ref x0[1057079]:byteIndex[28170]
  type (range(int(64),bounded,false),int(64))[1084924] val x0[1084920]:range(int(64),bounded,false)[1026814] val x1[1084922]:int(64)[13]
  type (_ic_these_range_int64_t_bounded_F,_ic_chpl_bytes__ref_string)[1108566] val x0[1108562]:_ic_these_range_int64_t_bounded_F[1096703] val x1[1108564]:_ic_chpl_bytes__ref_string[1108256]
  type (int(64),uint(8))[1111040] val x0[1111036]:int(64)[13] val x1[1111038]:uint(8)[100]
  type (string,range(int(64),bounded,false),string,int(64))[1114219] const-ref x0[1114211]:string[26] val x1[1114213]:range(int(64),bounded,false)[1026814] const-ref x2[1114215]:string[26] val x3[1114217]:int(64)[13]
  type (byteIndex,int(64))[1121233] const-ref x0[1121229]:byteIndex[28170] val x1[1121231]:int(64)[13]
  type (int(32),byteIndex,int(64))[1122142] val x0[1122136]:int(32)[95] const-ref x1[1122138]:byteIndex[28170] val x2[1122140]:int(64)[13]
  type (string,range(int(64),boundedLow,false),string,int(64))[1129043] const-ref x0[1129035]:string[26] val x1[1129037]:range(int(64),boundedLow,false)[1087565] const-ref x2[1129039]:string[26] val x3[1129041]:int(64)[13]
  type (string,range(byteIndex,boundedLow,false),string,int(64))[1147214] const-ref x0[1147206]:string[26] val x1[1147208]:range(byteIndex,boundedLow,false)[1143403] const-ref x2[1147210]:string[26] val x3[1147212]:int(64)[13]
  type (string,codepointIndex,string)[1158555] const-ref x0[1158549]:string[26] const-ref x1[1158551]:codepointIndex[28274] const-ref x2[1158553]:string[26]
  type (string,codepointIndex,string,int(64))[1176520] const-ref x0[1176512]:string[26] const-ref x1[1176514]:codepointIndex[28274] const-ref x2[1176516]:string[26] val x3[1176518]:int(64)[13]
  type (string,range(byteIndex,boundedHigh,false),string,int(64))[1191419] const-ref x0[1191411]:string[26] val x1[1191413]:range(byteIndex,boundedHigh,false)[1184919] const-ref x2[1191415]:string[26] val x3[1191417]:int(64)[13]
  type 57*int(64)[1210485] val x0[1210371]:int(64)[13] val x1[1210373]:int(64)[13] val x2[1210375]:int(64)[13] val x3[1210377]:int(64)[13] val x4[1210379]:int(64)[13] val x5[1210381]:int(64)[13] val x6[1210383]:int(64)[13] val x7[1210385]:int(64)[13] val x8[1210387]:int(64)[13] val x9[1210389]:int(64)[13] val x10[1210391]:int(64)[13] val x11[1210393]:int(64)[13] val x12[1210395]:int(64)[13] val x13[1210397]:int(64)[13] val x14[1210399]:int(64)[13] val x15[1210401]:int(64)[13] val x16[1210403]:int(64)[13] val x17[1210405]:int(64)[13] val x18[1210407]:int(64)[13] val x19[1210409]:int(64)[13] val x20[1210411]:int(64)[13] val x21[1210413]:int(64)[13] val x22[1210415]:int(64)[13] val x23[1210417]:int(64)[13] val x24[1210419]:int(64)[13] val x25[1210421]:int(64)[13] val x26[1210423]:int(64)[13] val x27[1210425]:int(64)[13] val x28[1210427]:int(64)[13] val x29[1210429]:int(64)[13] val x30[1210431]:int(64)[13] val x31[1210433]:int(64)[13] val x32[1210435]:int(64)[13] val x33[1210437]:int(64)[13] val x34[1210439]:int(64)[13] val x35[1210441]:int(64)[13] val x36[1210443]:int(64)[13] val x37[1210445]:int(64)[13] val x38[1210447]:int(64)[13] val x39[1210449]:int(64)[13] val x40[1210451]:int(64)[13] val x41[1210453]:int(64)[13] val x42[1210455]:int(64)[13] val x43[1210457]:int(64)[13] val x44[1210459]:int(64)[13] val x45[1210461]:int(64)[13] val x46[1210463]:int(64)[13] val x47[1210465]:int(64)[13] val x48[1210467]:int(64)[13] val x49[1210469]:int(64)[13] val x50[1210471]:int(64)[13] val x51[1210473]:int(64)[13] val x52[1210475]:int(64)[13] val x53[1210477]:int(64)[13] val x54[1210479]:int(64)[13] val x55[1210481]:int(64)[13] val x56[1210483]:int(64)[13]
  type (string,int(64))[1213661] const-ref x0[1213657]:string[26] val x1[1213659]:int(64)[13]
  type 1*range(int(64),bounded,false)[1244696] val x0[1244694]:range(int(64),bounded,false)[1026814]
  type 1*int(64)[1256525] val x0[1256523]:int(64)[13]
  type (bool,int(64))[1265132] val x0[1265128]:bool[10] val x1[1265130]:int(64)[13]
  type (string,int(64),string)[1273184] const-ref x0[1273178]:string[26] val x1[1273180]:int(64)[13] const-ref x2[1273182]:string[26]
  type (string,int(64),string,int(64),string)[1279697] const-ref x0[1279687]:string[26] val x1[1279689]:int(64)[13] const-ref x2[1279691]:string[26] val x3[1279693]:int(64)[13] const-ref x4[1279695]:string[26]
  type 4*string[1291837] const-ref x0[1291829]:string[26] const-ref x1[1291831]:string[26] const-ref x2[1291833]:string[26] const-ref x3[1291835]:string[26]
  type (string,string,int(64),string,range(int(64),bounded,false))[1338495] const-ref x0[1338485]:string[26] const-ref x1[1338487]:string[26] val x2[1338489]:int(64)[13] const-ref x3[1338491]:string[26] val x4[1338493]:range(int(64),bounded,false)[1026814]
  type ([domain(1,int(64),false)] real(64),ioNewline)[1392594] val x0[1392590]:[domain(1,int(64),false)] real(64)[1365840] const-ref x1[1392592]:ioNewline[238701]
  type 3*string[1403484] const-ref x0[1403478]:string[26] const-ref x1[1403480]:string[26] const-ref x2[1403482]:string[26]
  type (int(64),ioNewline)[1433256] val x0[1433252]:int(64)[13] const-ref x1[1433254]:ioNewline[238701]
  type (BaseArr,unmanaged BaseDom?)[1444340] val x0[1444336]:BaseArr[149541] val x1[1444338]:BaseDom[146725]
  type (unmanaged BaseDom?,unmanaged BaseDist?)[1445134] val x0[1445130]:BaseDom[146725] val x1[1445132]:BaseDist[145926]
}