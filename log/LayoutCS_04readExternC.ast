AST dump for LayoutCS after pass readExternC.
Module use list: 

{
  (353187 'use' ChapelStandard)
  (336157 'import' RangeChunk)
  { scopeless
    unknown debugCS[336160] "config" "no doc" "param" 0
    (336163 'end of statement')
  }
  { scopeless
    unknown LayoutCSDefaultToSorted[336165] "config" "param" 1
    (336168 'end of statement')
  }
  type _ColumnComparator[336195] function _ColumnComparator[336195].key[336176](arg _mt[336199]:_MT[238], arg this[336197]:_ColumnComparator[336195], arg idx[336173] :
  _tuple) : _unknown[51] "method" "primary method"
  {
    (336189 return(336187 call _build_tuple(336181 call idx 1)(336185 call idx 0)))
  }
  { scopeless
    const _columnComparator[336203] "const" "no doc" _ColumnComparator
    (336206 'end of statement')
  }
  function isCSType[336211](arg t[336209]:_any[178](?)) param : _unknown[51] "no doc"
  {
    { scopeless
      (336221 return(336220 call isSubtype(336217 call _to_borrowed t) CS))
    }
  }
  type CS[336361](?) unknown compressRows[336231] "param" 1 bool[10] unknown sortedIndices[336237] "param" LayoutCSDefaultToSorted bool[10] function CS[336361](?).dsiNewSparseDom[336247](arg _mt[336365]:_MT[238], arg this[336363]:CS[336361](?), param arg rank[336244] :
  int[13], arg idxType[336249]:_any[178](?), arg dom[336252] :
  _domain) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336284 return(336257 'new'(_chpl_manager = unmanaged[220](?))(336283 call CSDom rank idxType(336265 call . this c"compressRows")(336271 call . this c"sortedIndices")(336275 call . dom c"stridable")(336281 call _to_unmanaged this) dom)))
  } function CS[336361](?).dsiClone[336291](arg _mt[336369]:_MT[238], arg this[336367]:CS[336361](?)) : _unknown[51] "method" "primary method"
  {
    (336309 return(336295 'new'(_chpl_manager = unmanaged[220](?))(336308 call CS(compressRows =(336298 call . this c"compressRows"))(sortedIndices =(336304 call . this c"sortedIndices")))))
  } function CS[336361](?).dsiEqualDMaps[336330](arg _mt[336373]:_MT[238], arg this[336371]:CS[336361](?), arg that[336327] :
  (336326 call CS(336318 call . this c"compressRows")(336323 call . this c"sortedIndices"))) param : _unknown[51] "method" "primary method"
  {
    (336333 return 1)
  } function CS[336361](?).dsiEqualDMaps[336342](arg _mt[336377]:_MT[238], arg this[336375]:CS[336361](?), arg that[336340]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (336345 return 0)
  } function CS[336361](?).dsiIsLayout[336352](arg _mt[336381]:_MT[238], arg this[336379]:CS[336361](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (336355 return 1)
  } BaseDist
  type CSDom[341023](?) unknown compressRows[336387] "param" unknown sortedIndices[336391] "param" unknown stridable[336395] "param" unknown dist[336405](336404 'to unmanaged class from unknown'(336403 call CS compressRows sortedIndices)) unknown rowRange[336415](336414 call range idxType(stridable = stridable)) unknown colRange[336425](336424 call range idxType(stridable = stridable)) unknown startIdxDom[336435](336433 call chpl__buildDomainRuntimeType defaultDist 1 idxType) unknown _nnz[336440] 0 unknown startIdx[336451] "local field"(336449 call chpl__buildArrayRuntimeType(336447 call chpl__ensureDomainExpr startIdxDom) idxType) unknown idx[336462] "local field"(336460 call chpl__buildArrayRuntimeType(336458 call chpl__ensureDomainExpr nnzDom) idxType) function CSDom[341023](?).init[336470](arg _mt[341027]:_MT[238], arg this[341025]:CSDom[341023](?), param arg rank[336468]:_any[178](?), arg idxType[336472]:_any[178](?), param arg compressRows[336474]:_any[178](?), param arg sortedIndices[336476]:_any[178](?), param arg stridable[336478]:_any[178](?), arg dist[336486] :
  (336485 'to unmanaged class from unknown'(336484 call CS compressRows sortedIndices)), arg parentDom[336490] :
  _domain) : _unknown[51] "method" "primary method"
  {
    if(336527 call _cond_test(336504 call ||(336495 call != rank 2)(336502 call !=(336498 call . parentDom c"rank") 2)))
    {
      { scopeless
        (336525 call compilerError "Only 2D sparse domains are supported by the CS distribution")
      }
    }
    if(336579 call _cond_test(336538 call !=(336534 call . parentDom c"idxType") idxType))
    {
      { scopeless
        (336577 call compilerError(336574 call +(336565 call +(336562 call + "idxType mismatch in CSDom.init(): "(336560 call _cast string[26] idxType)) " != ")(336572 call _cast string[26](336568 call . parentDom c"idxType"))))
      }
    }
    (336592 call(336585 call . super c"init") rank idxType parentDom)
    (336599 call =(336595 call . this c"compressRows") compressRows)
    (336607 call =(336603 call . this c"sortedIndices") sortedIndices)
    (336615 call =(336611 call . this c"stridable") stridable)
    (336623 call =(336619 call . this c"dist") dist)
    (336634 call = rowRange(336633 call(336628 call . parentDom c"dim") 0))
    (336645 call = colRange(336644 call(336639 call . parentDom c"dim") 1))
    (336685 call = startIdxDom(336682 IfExpr  compressRows then
    { scopeless
      (336664 call chpl__buildDomainExpr(336661 call chpl_build_bounded_range(336651 call . rowRange c"low")(336659 call +(336655 call . rowRange c"high") 1)))
    } else
    { scopeless
      (336680 call chpl__buildDomainExpr(336677 call chpl_build_bounded_range(336667 call . colRange c"low")(336675 call +(336671 call . colRange c"high") 1)))
    } ))
    (336693 call(336689 call . this c"complete"))
    (336703 call = nnzDom(336701 call chpl__buildDomainExpr(336698 call chpl_build_bounded_range 1 _nnz)))
    (336708 call dsiClear)
  } function CSDom[341023](?).getNNZ[336714](arg _mt[341031]:_MT[238], arg this[341029]:CSDom[341023](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336718 return _nnz)
  }
  { scopeless type
    int[13]
  } function CSDom[341023](?).dsiMyDist[336726](arg _mt[341035]:_MT[238], arg this[341033]:CSDom[341023](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (336729 return dist)
    }
  } function CSDom[341023](?).dsiAssignDomain[336740](arg _mt[341039]:_MT[238], arg this[341037]:CSDom[341023](?), arg rhs[336737] :
  _domain, arg lhsPrivate[336743] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    if(336875 call _cond_test(336765 call &&(336756 call ==(336753 call _to_borrowed(336751 'typeof'(336748 call . rhs c"_instance")))(336755 'typeof' this))(336763 call ==(336759 call . this c"dsiNumIndices") 0)))
    {
      (336775 call =(336768 call . this c"_nnz")(336772 call . rhs c"_nnz"))
      (336787 call =(336780 call . this c"nnzDom")(336784 call . rhs c"nnzDom"))
      (336800 call =(336793 call . this c"startIdx")(336797 call . rhs c"startIdx"))
      (336811 call =(336804 call . this c"idx")(336808 call . rhs c"idx"))
    }
    {
      { scopeless
        if(336871 call _cond_test(336823 call <(336821 call _to_borrowed(336819 'typeof'(336816 call . rhs c"_instance"))) DefaultSparseDom))
        {
          (336861 call(336826 call . this c"dsiBulkAdd")(336852 call(336833 call .(336830 call . rhs c"_instance") c"_indices")(336849 call #(336843 call chpl_build_low_bounded_range(336840 call .(336837 call . rhs c"nnzDom") c"low"))(336846 call . rhs c"_nnz")))(dataSorted =(336855 call . this c"compressRows"))(isUnique = 1))
        }
        {
          (336868 call chpl_assignDomainWithIndsIterSafeForRemoving this rhs)
        }
      }
    }
  } function CSDom[341023](?).dsiBuildArray[336887](arg _mt[341043]:_MT[238], arg this[341041]:CSDom[341023](?), arg eltType[336885]:_any[178](?), param arg initElts[336890] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (336912 return(336895 'new'(_chpl_manager = unmanaged[220](?))(336911 call CSArr(eltType = eltType)(rank = rank)(idxType = idxType)(dom =(336907 call _to_unmanaged this))(initElts = initElts))))
  } function CSDom[341023](?).dsiIndsIterSafeForRemoving[336919](arg _mt[341047]:_MT[238], arg this[341045]:CSDom[341023](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown cursor[336936](336933 IfExpr (336922 call . this c"compressRows") then
      { scopeless
        (336926 call . rowRange c"high")
      } else
      { scopeless
        (336930 call . colRange c"high")
      } )
      (336939 'end of statement')
    }
    {
      unknown _indexOfInterest[337026] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[337027] "expr temp" "temp"
      (337036 'move' _iterator[337027](337034 call _getIterator(337047 call chpl_direct_range_iter 1 _nnz(337043 call - 1))))
      Defer
      {
        {
          (337063 call _freeIterator _iterator[337027])
        }
      }
      { scopeless type
        (337052 'move' _indexOfInterest[337026](337049 call iteratorIndex _iterator[337027]))
      }
      ForLoop[337028]
      {
        unknown i[337056] "index var" "insert auto destroy"
        (337058 'move' i[337056] _indexOfInterest[337026])
        {
          {
            unknown tmp[336964] "temp"
            (336992 'move' tmp[336964](336985 call _cond_test(336987 call >(336989 call startIdx cursor) i)))
            WhileDo[336969]
            {
              {
                (336960 call -= cursor 1)
              }
              label _continueLabel[336967]
              (336980 'move' tmp[336964](336973 call _cond_test(336975 call >(336977 call startIdx cursor) i)))
              tmp[336964]
            }
            label _breakLabel[336968]
          }
          if(337022 call _cond_test(336997 call . this c"compressRows"))
          {
            (337008 yield(337006 call _build_tuple cursor(337004 call idx i)))
          }
          {
            (337019 yield(337017 call _build_tuple(337014 call idx i) cursor))
          }
        }
        label _continueLabel[337031]
        _indexOfInterest[337026]
        _iterator[337027]
      }
      label _breakLabel[337032]
    }
  } function CSDom[341023](?).these[337074](arg _mt[341051]:_MT[238], arg this[341049]:CSDom[341023](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown cursor[337091](337088 IfExpr (337077 call . this c"compressRows") then
      { scopeless
        (337081 call . rowRange c"low")
      } else
      { scopeless
        (337085 call . colRange c"low")
      } )
      (337094 'end of statement')
    }
    {
      unknown _indexOfInterest[337185] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[337186] "expr temp" "temp"
      (337195 'move' _iterator[337186](337193 call _getIterator(337200 call chpl_direct_range_iter 1 _nnz 1)))
      Defer
      {
        {
          (337216 call _freeIterator _iterator[337186])
        }
      }
      { scopeless type
        (337205 'move' _indexOfInterest[337185](337202 call iteratorIndex _iterator[337186]))
      }
      ForLoop[337187]
      {
        unknown i[337209] "index var" "insert auto destroy"
        (337211 'move' i[337209] _indexOfInterest[337185])
        {
          {
            unknown tmp[337117] "temp"
            (337151 'move' tmp[337117](337141 call _cond_test(337143 call <=(337145 call startIdx(337147 call + cursor 1)) i)))
            WhileDo[337122]
            {
              {
                (337113 call += cursor 1)
              }
              label _continueLabel[337120]
              (337136 'move' tmp[337117](337126 call _cond_test(337128 call <=(337130 call startIdx(337132 call + cursor 1)) i)))
              tmp[337117]
            }
            label _breakLabel[337121]
          }
          if(337179 call _cond_test(337156 call . this c"compressRows"))
          {
            { scopeless
              (337167 yield(337165 call _build_tuple cursor(337163 call idx i)))
            }
          }
          {
            { scopeless
              (337177 yield(337175 call _build_tuple(337172 call idx i) cursor))
            }
          }
        }
        label _continueLabel[337190]
        _indexOfInterest[337185]
        _iterator[337186]
      }
      label _breakLabel[337191]
    }
  } function CSDom[341023](?).these[337231](arg _mt[341055]:_MT[238], arg this[341053]:CSDom[341023](?), param arg tag[337228] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (337241 'use' DSIUtil)
    { scopeless
      const numElems[337245] "const" _nnz
      (337248 'end of statement')
    }
    { scopeless
      const numChunks[337253] "const"(337252 call _computeNumChunks numElems)
      (337256 'end of statement')
    }
    if(337283 call _cond_test debugCS)
    {
      { scopeless
        (337281 call writeln "CSDom leader: " numChunks " chunks, " numElems " elems")
      }
    }
    if(337497 call _cond_test(337290 call == numChunks 1))
    {
      { scopeless
        (337298 yield(337296 call _build_tuple this 1 numElems))
      }
    }
    {
      unknown tmpIter[337326] "expr temp" "maybe ref" "no copy" "temp"
      (337329 'move' tmpIter[337326](337311 call(337302 call . RangeChunk c"chunks")(337307 call chpl_build_bounded_range 1 numElems) numChunks))
      unknown isRngDomArr[337478] "maybe param" "temp"
      (337493 'move' isRngDomArr[337478](337491 call ||(337480 call isBoundedRange tmpIter[337326])(337489 call ||(337483 call isDomain tmpIter[337326])(337486 call isArray tmpIter[337326]))))
      if isRngDomArr[337478]
      {
        const _coforallCount[337345] "const" "end count" "temp"
        (337414 'move' _coforallCount[337345](337411 call _endCountAlloc 1))
        unknown numTasks[337346] "temp"
        (337398 'move' numTasks[337346](337394 call . tmpIter[337326] c"size"))
        (337389 call _upEndCount _coforallCount[337345] 1 numTasks[337346])
        (337386 call chpl_resetTaskSpawn numTasks[337346])
        unknown _indexOfInterest[337353] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[337354] "expr temp" "temp"
        (337363 'move' _iterator[337354](337361 call _getIterator tmpIter[337326]))
        Defer
        {
          {
            (337379 call _freeIterator _iterator[337354])
          }
        }
        { scopeless type
          (337368 'move' _indexOfInterest[337353](337365 call iteratorIndex _iterator[337354]))
        }
        ForLoop[337355]
        {
          unknown chunk[337372] "coforall index var" "index var" "insert auto destroy"
          (337374 'move' chunk[337372] _indexOfInterest[337353])
          {
            { scopeless
              (337332 yield(337334 call _build_tuple this(337337 call . chunk c"first")(337341 call . chunk c"last")))
            }
            (337348 call _downEndCount _coforallCount[337345] nil[44])
            (337347 'coforall loop')
          }
          label _continueLabel[337358]
          _indexOfInterest[337353]
          _iterator[337354]
        }
        label _breakLabel[337359]
        Defer
        {
          {
            (337401 call _endCountFree _coforallCount[337345])
          }
        }
        (337406 call _waitEndCount _coforallCount[337345] 1 numTasks[337346])
      }
      {
        const _coforallCount[337418] "const" "end count" "temp"
        (337475 'move' _coforallCount[337418](337472 call _endCountAlloc 1))
        unknown _indexOfInterest[337426] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[337427] "expr temp" "temp"
        (337436 'move' _iterator[337427](337434 call _getIterator tmpIter[337326]))
        Defer
        {
          {
            (337452 call _freeIterator _iterator[337427])
          }
        }
        { scopeless type
          (337441 'move' _indexOfInterest[337426](337438 call iteratorIndex _iterator[337427]))
        }
        ForLoop[337428]
        {
          unknown chunk[337445] "coforall index var" "index var" "insert auto destroy"
          (337447 'move' chunk[337445] _indexOfInterest[337426])
          (337459 call _upEndCount _coforallCount[337418] 1)
          {
            { scopeless
              (337324 yield(337322 call _build_tuple this(337314 call . chunk c"first")(337319 call . chunk c"last")))
            }
            (337421 call _downEndCount _coforallCount[337418] nil[44])
            (337420 'coforall loop')
          }
          label _continueLabel[337431]
          _indexOfInterest[337426]
          _iterator[337427]
        }
        label _breakLabel[337432]
        Defer
        {
          {
            (337463 call _endCountFree _coforallCount[337418])
          }
        }
        (337468 call _waitEndCount _coforallCount[337418] 1)
      }
    }
  }
  where {
    (337238 call == tag(337235 call . iterKind c"leader"))
  } function CSDom[341023](?).these[337511](arg _mt[341059]:_MT[238], arg this[341057]:CSDom[341023](?), param arg tag[337508] :
  iterKind, arg followThis[337519] :
  (337517 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown tmp[337537] "temp" followThis
      (337547 call _check_tuple_var_decl tmp[337537] 3)
      unknown followThisDom[337529](337538 call tmp[337537] 0)
      unknown startIx[337531](337541 call tmp[337537] 1)
      unknown endIx[337533](337544 call tmp[337537] 2)
      (337552 'end of statement')
    }
    if(337580 call _cond_test boundsChecking)
    {
      { scopeless
        (337578 call assert(337558 call <= startIx endIx) "CSDom follower - got nothing to iterate over")
      }
    }
    if(337612 call _cond_test(337587 call != followThisDom this))
    {
      { scopeless
        (337610 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays (CS layout)")
      }
    }
    { scopeless
      unknown cursor[337621](337620 call _private_findStart startIx)
      (337624 'end of statement')
    }
    if(337689 call _cond_test debugCS)
    {
      { scopeless
        (337687 call writeln "CSDom follower: " startIx ".." endIx "  startIdx(" cursor ")="(337686 call startIdx cursor))
      }
    }
    {
      unknown _indexOfInterest[337782] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[337783] "expr temp" "temp"
      (337792 'move' _iterator[337783](337790 call _getIterator(337797 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (337813 call _freeIterator _iterator[337783])
        }
      }
      { scopeless type
        (337802 'move' _indexOfInterest[337782](337799 call iteratorIndex _iterator[337783]))
      }
      ForLoop[337784]
      {
        unknown i[337806] "index var" "insert auto destroy"
        (337808 'move' i[337806] _indexOfInterest[337782])
        {
          {
            unknown tmp[337714] "temp"
            (337748 'move' tmp[337714](337738 call _cond_test(337740 call <=(337742 call startIdx(337744 call + cursor 1)) i)))
            WhileDo[337719]
            {
              { scopeless
                (337711 call += cursor 1)
              }
              label _continueLabel[337717]
              (337733 'move' tmp[337714](337723 call _cond_test(337725 call <=(337727 call startIdx(337729 call + cursor 1)) i)))
              tmp[337714]
            }
            label _breakLabel[337718]
          }
          if(337776 call _cond_test(337753 call . this c"compressRows"))
          {
            { scopeless
              (337764 yield(337762 call _build_tuple cursor(337760 call idx i)))
            }
          }
          {
            { scopeless
              (337774 yield(337772 call _build_tuple(337769 call idx i) cursor))
            }
          }
        }
        label _continueLabel[337787]
        _indexOfInterest[337782]
        _iterator[337783]
      }
      label _breakLabel[337788]
    }
  }
  where {
    (337527 call == tag(337524 call . iterKind c"follower"))
  } function CSDom[341023](?).these[337829](arg _mt[341063]:_MT[238], arg this[341061]:CSDom[341023](?), param arg tag[337826] :
  iterKind, arg followThis[337831]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (337859 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")
    (337863 yield 0)
  }
  where {
    (337838 call == tag(337835 call . iterKind c"follower"))
  } function CSDom[341023](?)._private_findStart[337872](arg _mt[341067]:_MT[238], arg this[341065]:CSDom[341023](?), arg startIx[337870]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (337886 return(337885 call _private_findStart startIx(337878 call . startIdxDom c"low")(337882 call . startIdxDom c"high")))
  } function CSDom[341023](?)._private_findStart[337895](arg _mt[341071]:_MT[238], arg this[341069]:CSDom[341023](?), arg startIx[337893]:_any[178](?), arg low[337897]:_any[178](?), arg high[337899]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown approx[337902] 2
      (337905 'end of statement')
    }
    { scopeless
      unknown l[337908] low
      unknown h[337912] high
      (337915 'end of statement')
    }
    {
      unknown tmp[337958] "temp"
      (337988 'move' tmp[337958](337980 call _cond_test(337982 call > h(337985 call + l approx))))
      WhileDo[337963]
      {
        {
          { scopeless
            unknown m[337930](337928 call /(337925 call + h l) 2)
            (337933 'end of statement')
          }
          if(337952 call _cond_test(337940 call <=(337938 call startIdx m) startIx))
          {
            { scopeless
              (337944 call = l m)
            }
          }
          {
            { scopeless
              (337949 call = h m)
            }
          }
        }
        label _continueLabel[337961]
        (337975 'move' tmp[337958](337967 call _cond_test(337969 call > h(337972 call + l approx))))
        tmp[337958]
      }
      label _breakLabel[337962]
    }
    { scopeless
      unknown hh[337999](337998 call min(337994 call + l approx) high)
      (338002 'end of statement')
    }
    if(338061 call _cond_test boundsChecking)
    {
      (338030 call assert(338010 call <=(338008 call startIdx l) startIx) "CSDom.findStart-1")
      (338059 call assert(338039 call < startIx(338038 call startIdx hh)) "CSDom.findStart-2")
    }
    (338066 return l)
  } function CSDom[341023](?).stopIdx[338074](arg _mt[341075]:_MT[238], arg this[341073]:CSDom[341023](?), arg i[338072]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (338086 return(338084 call -(338082 call startIdx(338079 call + i 1)) 1))
  } function CSDom[341023](?).find[338100](arg _mt[341079]:_MT[238], arg this[341077]:CSDom[341023](?), arg ind[338097] :
  (338095 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (338103 'use' Search)
    { scopeless
      const tmp[338112] "const" "temp" ind
      (338119 call _check_tuple_var_decl tmp[338112] 2)
      const row[338106] "const"(338113 call tmp[338112] 0)
      const col[338108] "const"(338116 call tmp[338112] 1)
      (338124 'end of statement')
    }
    { scopeless
      unknown ret[338130](338128 call _build_tuple bool[10] idxType)
      (338133 'end of statement')
    }
    if(338236 call _cond_test(338135 call . this c"compressRows"))
    {
      if(338181 call _cond_test(338139 call . this c"sortedIndices"))
      {
        { scopeless
          (338158 call = ret(338157 call binarySearch idx col(lo =(338150 call startIdx row))(hi =(338155 call stopIdx row))))
        }
      }
      {
        (338177 call = ret(338176 call linearSearch idx col(lo =(338169 call startIdx row))(hi =(338174 call stopIdx row))))
      }
    }
    {
      if(338230 call _cond_test(338188 call . this c"sortedIndices"))
      {
        { scopeless
          (338207 call = ret(338206 call binarySearch idx row(lo =(338199 call startIdx col))(hi =(338204 call stopIdx col))))
        }
      }
      {
        (338226 call = ret(338225 call linearSearch idx row(lo =(338218 call startIdx col))(hi =(338223 call stopIdx col))))
      }
    }
    (338241 return ret)
  } function CSDom[341023](?).dsiMember[338254](arg _mt[341083]:_MT[238], arg this[341081]:CSDom[341023](?), arg ind[338251] :
  (338249 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    if(338289 call _cond_test(338262 call(338257 call . parentDom c"contains") ind))
    {
      { scopeless
        const tmp[338272] "const" "temp"(338271 call find ind)
        (338279 call _check_tuple_var_decl tmp[338272] 2)
        const found[338263] "const"(338273 call tmp[338272] 0)
        const loc[338265] "const"(338276 call tmp[338272] 1)
        (338284 'end of statement')
      }
      (338287 return found)
    }
    (338295 return 0)
  } function CSDom[341023](?).dsiFirst[338301](arg _mt[341087]:_MT[238], arg this[341085]:CSDom[341023](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338320 call _cond_test(338305 call == _nnz 0))
    {
      { scopeless
        (338318 return(338316 call -(338308 call . parentDom c"low")(338314 call _build_tuple 1 1)))
      }
    }
    { scopeless
      const _low[338330] "const"(338327 call . nnzDom c"low")
      (338333 'end of statement')
    }
    {
      unknown _indexOfInterest[338397] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338398] "expr temp" "temp"
      (338407 'move' _iterator[338398](338405 call _getIterator startIdxDom))
      Defer
      {
        {
          (338423 call _freeIterator _iterator[338398])
        }
      }
      { scopeless type
        (338412 'move' _indexOfInterest[338397](338409 call iteratorIndex _iterator[338398]))
      }
      ForLoop[338399]
      {
        unknown i[338416] "index var" "insert auto destroy"
        (338418 'move' i[338416] _indexOfInterest[338397])
        {
          if(338392 call _cond_test(338341 call >(338339 call startIdx i) _low))
          {
            if(338385 call _cond_test(338344 call . this c"compressRows"))
            {
              { scopeless
                (338364 return(338362 call _build_tuple(338349 call - i 1)(338360 call idx(338356 call .(338353 call . idx c"_dom") c"low"))))
              }
            }
            {
              { scopeless
                (338383 return(338381 call _build_tuple(338375 call idx(338371 call .(338368 call . idx c"_dom") c"low"))(338378 call - i 1)))
              }
            }
          }
        }
        label _continueLabel[338402]
        _indexOfInterest[338397]
        _iterator[338398]
      }
      label _breakLabel[338403]
    }
    (338449 call halt "Something went wrong in dsiFirst")
    (338456 return(338454 call _build_tuple 0 0))
  } function CSDom[341023](?).dsiLast[338462](arg _mt[341091]:_MT[238], arg this[341089]:CSDom[341023](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338481 call _cond_test(338466 call == _nnz 0))
    {
      { scopeless
        (338479 return(338477 call -(338469 call . parentDom c"low")(338475 call _build_tuple 1 1)))
      }
    }
    { scopeless
      unknown _last[338497](338495 call -(338493 call(338488 call . parentDom c"low") 1) 1)
      (338500 'end of statement')
    }
    {
      unknown _indexOfInterest[338523] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338524] "expr temp" "temp"
      (338533 'move' _iterator[338524](338531 call _getIterator startIdxDom))
      Defer
      {
        {
          (338549 call _freeIterator _iterator[338524])
        }
      }
      { scopeless type
        (338538 'move' _indexOfInterest[338523](338535 call iteratorIndex _iterator[338524]))
      }
      ForLoop[338525]
      {
        unknown i[338542] "index var" "insert auto destroy"
        (338544 'move' i[338542] _indexOfInterest[338523])
        { scopeless
          if(338518 call _cond_test(338508 call >(338506 call startIdx i) _last))
          {
            { scopeless
              (338515 call = _last(338513 call - i 1))
            }
          }
        }
        label _continueLabel[338528]
        _indexOfInterest[338523]
        _iterator[338524]
      }
      label _breakLabel[338529]
    }
    if(338580 call _cond_test(338557 call . this c"compressRows"))
    {
      { scopeless
        (338568 return(338566 call _build_tuple _last(338564 call idx _nnz)))
      }
    }
    {
      { scopeless
        (338578 return(338576 call _build_tuple(338573 call idx _nnz) _last))
      }
    }
  } function CSDom[341023](?).dsiAdd[338597](arg _mt[341095]:_MT[238], arg this[341093]:CSDom[341023](?), arg ind[338594] :
  (338592 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (338602 call boundsCheck ind)
    { scopeless
      const tmp[338614] "const" "temp"(338613 call find ind)
      (338621 call _check_tuple_var_decl tmp[338614] 2)
      const found[338605] "const"(338615 call tmp[338614] 0)
      const insertPt[338607] "const"(338618 call tmp[338614] 1)
      (338626 'end of statement')
    }
    if(338631 call _cond_test found)
    {
      { scopeless
        (338629 return 0)
      }
    }
    (338638 call += _nnz 1)
    { scopeless
      unknown oldNNZDomSize[338645](338642 call . nnzDom c"size")
      (338648 'end of statement')
    }
    (338652 call _grow _nnz)
    { scopeless
      const tmp[338660] "const" "temp" ind
      (338667 call _check_tuple_var_decl tmp[338660] 2)
      const row[338654] "const"(338661 call tmp[338660] 0)
      const col[338656] "const"(338664 call tmp[338660] 1)
      (338672 'end of statement')
    }
    {
      unknown _indexOfInterest[338701] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338702] "expr temp" "temp"
      (338711 'move' _iterator[338702](338709 call _getIterator(338728 call chpl_direct_range_iter insertPt(338725 call - _nnz 1)(338721 call - 1))))
      Defer
      {
        {
          (338744 call _freeIterator _iterator[338702])
        }
      }
      { scopeless type
        (338733 'move' _indexOfInterest[338701](338730 call iteratorIndex _iterator[338702]))
      }
      ForLoop[338703]
      {
        unknown i[338737] "index var" "insert auto destroy"
        (338739 'move' i[338737] _indexOfInterest[338701])
        {
          (338697 call =(338692 call idx(338689 call + i 1))(338696 call idx i))
        }
        label _continueLabel[338706]
        _indexOfInterest[338701]
        _iterator[338702]
      }
      label _breakLabel[338707]
    }
    if(338771 call _cond_test(338752 call . this c"compressRows"))
    {
      { scopeless
        (338760 call =(338758 call idx insertPt) col)
      }
    }
    {
      { scopeless
        (338768 call =(338766 call idx insertPt) row)
      }
    }
    { scopeless
      unknown start[338786](338783 IfExpr (338778 call . this c"compressRows") then
      { scopeless
        row
      } else
      { scopeless
        col
      } )
      (338789 'end of statement')
    }
    {
      unknown _indexOfInterest[338810] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338811] "expr temp" "temp"
      (338820 'move' _iterator[338811](338818 call _getIterator(338831 call chpl_direct_range_iter(338824 call + start 1)(338828 call . startIdxDom c"high") 1)))
      Defer
      {
        {
          (338847 call _freeIterator _iterator[338811])
        }
      }
      { scopeless type
        (338836 'move' _indexOfInterest[338810](338833 call iteratorIndex _iterator[338811]))
      }
      ForLoop[338812]
      {
        unknown rc[338840] "index var" "insert auto destroy"
        (338842 'move' rc[338840] _indexOfInterest[338810])
        {
          (338806 call +=(338804 call startIdx rc) 1)
        }
        label _continueLabel[338815]
        _indexOfInterest[338810]
        _iterator[338811]
      }
      label _breakLabel[338816]
    }
    {
      unknown _indexOfInterest[338881] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338882] "expr temp" "temp"
      (338891 'move' _iterator[338882](338889 call _getIterator _arrs))
      Defer
      {
        {
          (338907 call _freeIterator _iterator[338882])
        }
      }
      { scopeless type
        (338896 'move' _indexOfInterest[338881](338893 call iteratorIndex _iterator[338882]))
      }
      ForLoop[338883]
      {
        unknown a[338900] "index var" "insert auto destroy"
        (338902 'move' a[338900] _indexOfInterest[338881])
        {
          (338878 call(338857 call . a c"sparseShiftArray")(338865 call chpl_build_bounded_range insertPt(338863 call - _nnz 1))(338876 call chpl_build_bounded_range(338870 call + oldNNZDomSize 1)(338873 call . nnzDom c"size")))
        }
        label _continueLabel[338886]
        _indexOfInterest[338881]
        _iterator[338882]
      }
      label _breakLabel[338887]
    }
    (338915 return 1)
  } function CSDom[341023](?).bulkAdd_help[338933](arg _mt[341099]:_MT[238], arg this[341097]:CSDom[341023](?), arg inds[338930] :
  (338928 call chpl__buildArrayRuntimeType unknown indsDom[338921](338926 call * rank idxType)), arg dataSorted[338936] =
  0, arg isUnique[338940] =
  0, arg addOn[338944] =
  nilLocale) : _unknown[51] "method" "primary method" "method overrides"
  {
    (338948 'import' Sort)
    if(338989 call _cond_test(338953 call != addOn nilLocale))
    {
      if(338984 call _cond_test(338960 call != addOn(338958 call chpl_localeID_to_locale(338957 '_wide_get_locale' this))))
      {
        (338981 call halt "Bulk index addition is only possible on the locale where the\n            sparse domain is created")
      }
    }
    if(339019 call _cond_test(338994 call . this c"compressRows"))
    {
      { scopeless
        (339007 call bulkAdd_prepareInds inds dataSorted isUnique(cmp =(339003 call . Sort c"defaultComparator")))
      }
    }
    {
      (339016 call bulkAdd_prepareInds inds dataSorted isUnique(cmp = _columnComparator))
    }
    if(339452 call _cond_test(339026 call == _nnz 0))
    {
      { scopeless
        const dupCount[339037] "const"(339034 IfExpr  isUnique then
        { scopeless
          0
        } else
        { scopeless
          (339033 call _countDuplicates inds)
        } )
        (339040 'end of statement')
      }
      (339050 call += _nnz(339048 call -(339044 call . inds c"size") dupCount))
      (339055 call _bulkGrow)
      { scopeless
        unknown idxIdx[339058] 1
        (339061 'end of statement')
      }
      { scopeless
        unknown prevIdx[339073](339071 call -(339063 call . parentDom c"low")(339069 call _build_tuple 1 1))
        (339076 'end of statement')
      }
      { scopeless
        unknown current[339078] idxType
        (339081 'end of statement')
      }
      if(339114 call _cond_test(339083 call . this c"compressRows"))
      {
        { scopeless
          (339097 call = current(339094 call .(339093 call(339088 call . parentDom c"dim") 0) c"low"))
        }
      }
      {
        { scopeless
          (339111 call = current(339108 call .(339107 call(339102 call . parentDom c"dim") 1) c"low"))
        }
      }
      {
        unknown _indexOfInterest[339318] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[339319] "expr temp" "temp"
        (339328 'move' _iterator[339319](339326 call _getIterator inds))
        Defer
        {
          {
            (339358 call _freeIterator _iterator[339319])
          }
        }
        { scopeless type
          (339333 'move' _indexOfInterest[339318](339330 call iteratorIndex _iterator[339319]))
        }
        ForLoop[339320]
        {
          (339338 call _check_tuple_var_decl _indexOfInterest[339318] 2)
          unknown i[339344] "index var" "insert auto destroy"
          (339346 'move' i[339344](339342 call _indexOfInterest[339318] 0))
          unknown j[339351] "index var" "insert auto destroy"
          (339353 'move' j[339351](339349 call _indexOfInterest[339318] 1))
          {
            if(339151 call _cond_test(339137 call &&(339127 call ! isUnique)(339135 call ==(339132 call _build_tuple i j) prevIdx)))
            {
              { scopeless
                continue nil[44]
              }
            }
            {
              { scopeless
                (339148 call = prevIdx(339146 call _build_tuple i j))
              }
            }
            if(339314 call _cond_test(339159 call . this c"compressRows"))
            {
              {
                unknown tmp[339186] "temp"
                (339210 'move' tmp[339186](339205 call _cond_test(339207 call != i current)))
                WhileDo[339191]
                {
                  {
                    (339168 call += current 1)
                    (339183 call =(339178 call startIdx(339175 call + current 1))(339182 call startIdx current))
                  }
                  label _continueLabel[339189]
                  (339200 'move' tmp[339186](339195 call _cond_test(339197 call != i current)))
                  tmp[339186]
                }
                label _breakLabel[339190]
              }
              (339222 call +=(339220 call startIdx(339217 call + i 1)) 1)
              (339230 call =(339228 call idx idxIdx) j)
              (339235 call += idxIdx 1)
            }
            {
              {
                unknown tmp[339262] "temp"
                (339286 'move' tmp[339262](339281 call _cond_test(339283 call != j current)))
                WhileDo[339267]
                {
                  {
                    (339244 call += current 1)
                    (339259 call =(339254 call startIdx(339251 call + current 1))(339258 call startIdx current))
                  }
                  label _continueLabel[339265]
                  (339276 'move' tmp[339262](339271 call _cond_test(339273 call != j current)))
                  tmp[339262]
                }
                label _breakLabel[339266]
              }
              (339298 call +=(339296 call startIdx(339293 call + j 1)) 1)
              (339306 call =(339304 call idx idxIdx) i)
              (339311 call += idxIdx 1)
            }
          }
          label _continueLabel[339323]
          _indexOfInterest[339318]
          _iterator[339319]
        }
        label _breakLabel[339324]
      }
      { scopeless
        const startIdxHigh[339372] "const"(339371 call startIdx(339368 call + current 1))
        (339375 'end of statement')
      }
      {
        unknown _indexOfInterest[339399] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[339400] "expr temp" "temp"
        (339409 'move' _iterator[339400](339407 call _getIterator(339423 call chpl_direct_range_iter(339413 call + current 2)(339417 call .(339419 call . startIdx c"_dom") c"high") 1)))
        Defer
        {
          {
            (339439 call _freeIterator _iterator[339400])
          }
        }
        { scopeless type
          (339428 'move' _indexOfInterest[339399](339425 call iteratorIndex _iterator[339400]))
        }
        ForLoop[339401]
        {
          unknown r[339432] "index var" "insert auto destroy"
          (339434 'move' r[339432] _indexOfInterest[339399])
          {
            (339395 call =(339393 call startIdx r) startIdxHigh)
          }
          label _continueLabel[339404]
          _indexOfInterest[339399]
          _iterator[339400]
        }
        label _breakLabel[339405]
      }
      (339450 return(339448 call - idxIdx 1))
    }
    { scopeless
      const tmp[339467] "const" "temp"(339466 call __getActualInsertPts this inds isUnique)
      (339474 call _check_tuple_var_decl tmp[339467] 2)
      const actualInsertPts[339456] "const"(339468 call tmp[339467] 0)
      const actualAddCnt[339458] "const"(339471 call tmp[339467] 1)
      (339479 'end of statement')
    }
    { scopeless
      const oldnnz[339481] "const" _nnz
      (339484 'end of statement')
    }
    (339487 call += _nnz actualAddCnt)
    (339492 call _bulkGrow)
    { scopeless
      unknown newIndIdx[339498](339495 call . indsDom c"high")
      (339501 'end of statement')
    }
    { scopeless
      unknown oldIndIdx[339503] oldnnz
      (339506 'end of statement')
    }
    { scopeless
      unknown newLoc[339511](339510 call actualInsertPts newIndIdx)
      (339514 'end of statement')
    }
    {
      unknown tmp[339553] "temp"
      (339581 'move' tmp[339553](339574 call _cond_test(339576 call == newLoc(339579 call - 1))))
      WhileDo[339558]
      {
        {
          (339523 call -= newIndIdx 1)
          if(339540 call _cond_test(339535 call == newIndIdx(339533 call -(339529 call . indsDom c"low") 1)))
          {
            { scopeless
              break nil[44]
            }
          }
          (339550 call = newLoc(339549 call actualInsertPts newIndIdx))
        }
        label _continueLabel[339556]
        (339569 'move' tmp[339553](339562 call _cond_test(339564 call == newLoc(339567 call - 1))))
        tmp[339553]
      }
      label _breakLabel[339557]
    }
    { scopeless
      unknown arrShiftMap[339597](339595 call chpl__buildArrayRuntimeType(339593 call chpl__ensureDomainExpr(339589 call chpl__buildDomainExpr(339586 call chpl_build_bounded_range 1 oldnnz))) int[13])
      (339600 'end of statement')
    }
    {
      unknown _indexOfInterest[339816] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339817] "expr temp" "temp"
      (339826 'move' _iterator[339817](339824 call _getIterator(339837 call chpl_direct_range_iter 1 _nnz(339833 call - 1))))
      Defer
      {
        {
          (339853 call _freeIterator _iterator[339817])
        }
      }
      { scopeless type
        (339842 'move' _indexOfInterest[339816](339839 call iteratorIndex _iterator[339817]))
      }
      ForLoop[339818]
      {
        unknown i[339846] "index var" "insert auto destroy"
        (339848 'move' i[339846] _indexOfInterest[339816])
        {
          if(339810 call _cond_test(339619 call &&(339613 call >= oldIndIdx 1)(339617 call > i newLoc)))
          {
            (339629 call =(339624 call idx i)(339628 call idx oldIndIdx))
            (339638 call =(339636 call arrShiftMap oldIndIdx) i)
            (339643 call -= oldIndIdx 1)
          }
          {
            { scopeless
              if(339805 call _cond_test(339657 call &&(339651 call >= newIndIdx(339648 call . indsDom c"low"))(339655 call == i newLoc)))
              {
                if(339693 call _cond_test(339660 call . this c"compressRows"))
                {
                  (339674 call =(339666 call idx i)(339673 call(339670 call inds newIndIdx) 1))
                }
                {
                  (339689 call =(339681 call idx i)(339688 call(339685 call inds newIndIdx) 0))
                }
                (339700 call -= newIndIdx 1)
                if(339725 call _cond_test(339708 call >= newIndIdx(339705 call . indsDom c"low")))
                {
                  { scopeless
                    (339715 call = newLoc(339714 call actualInsertPts newIndIdx))
                  }
                }
                {
                  { scopeless
                    (339722 call = newLoc(339720 call - 2))
                  }
                }
                {
                  unknown tmp[339769] "temp"
                  (339797 'move' tmp[339769](339790 call _cond_test(339792 call == newLoc(339795 call - 1))))
                  WhileDo[339774]
                  {
                    {
                      (339739 call -= newIndIdx 1)
                      if(339756 call _cond_test(339751 call == newIndIdx(339749 call -(339745 call . indsDom c"low") 1)))
                      {
                        { scopeless
                          break nil[44]
                        }
                      }
                      (339766 call = newLoc(339765 call actualInsertPts newIndIdx))
                    }
                    label _continueLabel[339772]
                    (339785 'move' tmp[339769](339778 call _cond_test(339780 call == newLoc(339783 call - 1))))
                    tmp[339769]
                  }
                  label _breakLabel[339773]
                }
              }
              {
                { scopeless
                  (339803 call halt "Something went wrong")
                }
              }
            }
          }
        }
        label _continueLabel[339821]
        _indexOfInterest[339816]
        _iterator[339817]
      }
      label _breakLabel[339822]
    }
    { scopeless
      unknown prevCursor[339887](339884 IfExpr (339861 call . this c"compressRows") then
      { scopeless
        (339871 call .(339870 call(339865 call . parentDom c"dim") 0) c"low")
      } else
      { scopeless
        (339881 call .(339880 call(339875 call . parentDom c"dim") 1) c"low")
      } )
      (339890 'end of statement')
    }
    { scopeless
      unknown cursor[339892] int[13]
      (339895 'end of statement')
    }
    { scopeless
      unknown cursorCnt[339897] 0
      (339900 'end of statement')
    }
    {
      unknown _indexOfInterest[340057] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340058] "expr temp" "temp"
      (340072 'move' _iterator[340058](339909 call _build_tuple(340067 call _getIterator inds)(340070 call _getIterator actualInsertPts)))
      Defer
      {
        {
          (340102 call _freeIterator _iterator[340058])
        }
      }
      { scopeless type
        (340077 'move' _indexOfInterest[340057](340074 call iteratorIndex _iterator[340058]))
      }
      ForLoop[340059]
      {
        (340082 call _check_tuple_var_decl _indexOfInterest[340057] 2)
        unknown ind[340088] "index var" "insert auto destroy"
        (340090 'move' ind[340088](340086 call _indexOfInterest[340057] 0))
        unknown p[340095] "index var" "insert auto destroy"
        (340097 'move' p[340095](340093 call _indexOfInterest[340057] 1))
        {
          if(339919 call _cond_test(339914 call == p(339912 call - 1)))
          {
            { scopeless
              continue nil[44]
            }
          }
          if(339947 call _cond_test(339926 call . this c"compressRows"))
          {
            (339934 call = cursor(339933 call ind 0))
          }
          {
            (339943 call = cursor(339942 call ind 1))
          }
          if(340052 call _cond_test(339953 call == cursor prevCursor))
          {
            { scopeless
              (339957 call += cursorCnt 1)
            }
          }
          {
            (339968 call +=(339966 call startIdx(339963 call + prevCursor 1)) cursorCnt)
            if(340038 call _cond_test(339977 call >(339974 call - cursor prevCursor) 1))
            {
              {
                unknown _indexOfInterest[339996] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[339997] "expr temp" "temp"
                (340006 'move' _iterator[339997](340004 call _getIterator(340014 call chpl_direct_range_iter(340010 call + prevCursor 2) cursor 1)))
                Defer
                {
                  {
                    (340030 call _freeIterator _iterator[339997])
                  }
                }
                { scopeless type
                  (340019 'move' _indexOfInterest[339996](340016 call iteratorIndex _iterator[339997]))
                }
                ForLoop[339998]
                {
                  unknown i[340023] "index var" "insert auto destroy"
                  (340025 'move' i[340023] _indexOfInterest[339996])
                  {
                    (339992 call +=(339990 call startIdx i) cursorCnt)
                  }
                  label _continueLabel[340001]
                  _indexOfInterest[339996]
                  _iterator[339997]
                }
                label _breakLabel[340002]
              }
            }
            (340044 call += cursorCnt 1)
            (340049 call = prevCursor cursor)
          }
        }
        label _continueLabel[340062]
        _indexOfInterest[340057]
        _iterator[340058]
      }
      label _breakLabel[340063]
    }
    {
      unknown _indexOfInterest[340129] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340130] "expr temp" "temp"
      (340139 'move' _iterator[340130](340137 call _getIterator(340150 call chpl_direct_range_iter(340143 call + prevCursor 1)(340147 call . startIdxDom c"high") 1)))
      Defer
      {
        {
          (340166 call _freeIterator _iterator[340130])
        }
      }
      { scopeless type
        (340155 'move' _indexOfInterest[340129](340152 call iteratorIndex _iterator[340130]))
      }
      ForLoop[340131]
      {
        unknown i[340159] "index var" "insert auto destroy"
        (340161 'move' i[340159] _indexOfInterest[340129])
        {
          (340125 call +=(340123 call startIdx i) cursorCnt)
        }
        label _continueLabel[340134]
        _indexOfInterest[340129]
        _iterator[340130]
      }
      label _breakLabel[340135]
    }
    {
      unknown _indexOfInterest[340184] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340185] "expr temp" "temp"
      (340194 'move' _iterator[340185](340192 call _getIterator _arrs))
      Defer
      {
        {
          (340210 call _freeIterator _iterator[340185])
        }
      }
      { scopeless type
        (340199 'move' _indexOfInterest[340184](340196 call iteratorIndex _iterator[340185]))
      }
      ForLoop[340186]
      {
        unknown a[340203] "index var" "insert auto destroy"
        (340205 'move' a[340203] _indexOfInterest[340184])
        { scopeless
          (340182 call(340176 call . a c"sparseBulkShiftArray") arrShiftMap oldnnz)
        }
        label _continueLabel[340189]
        _indexOfInterest[340184]
        _iterator[340185]
      }
      label _breakLabel[340190]
    }
    (340218 return actualAddCnt)
  } function CSDom[341023](?).dsiRemove[340231](arg _mt[341103]:_MT[238], arg this[341101]:CSDom[341023](?), arg ind[340228] :
  (340226 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[340242] "const" "temp"(340241 call find ind)
      (340249 call _check_tuple_var_decl tmp[340242] 2)
      const found[340233] "const"(340243 call tmp[340242] 0)
      const insertPt[340235] "const"(340246 call tmp[340242] 1)
      (340254 'end of statement')
    }
    if(340262 call _cond_test(340257 call ! found))
    {
      { scopeless
        (340260 return 0)
      }
    }
    (340269 call -= _nnz 1)
    (340275 call _shrink _nnz)
    { scopeless
      const tmp[340283] "const" "temp" ind
      (340290 call _check_tuple_var_decl tmp[340283] 2)
      const row[340277] "const"(340284 call tmp[340283] 0)
      const col[340279] "const"(340287 call tmp[340283] 1)
      (340295 'end of statement')
    }
    {
      unknown _indexOfInterest[340316] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340317] "expr temp" "temp"
      (340326 'move' _iterator[340317](340324 call _getIterator(340331 call chpl_direct_range_iter insertPt _nnz 1)))
      Defer
      {
        {
          (340347 call _freeIterator _iterator[340317])
        }
      }
      { scopeless type
        (340336 'move' _indexOfInterest[340316](340333 call iteratorIndex _iterator[340317]))
      }
      ForLoop[340318]
      {
        unknown i[340340] "index var" "insert auto destroy"
        (340342 'move' i[340340] _indexOfInterest[340316])
        {
          (340312 call =(340304 call idx i)(340311 call idx(340308 call + i 1)))
        }
        label _continueLabel[340321]
        _indexOfInterest[340316]
        _iterator[340317]
      }
      label _breakLabel[340322]
    }
    if(340488 call _cond_test(340355 call . this c"compressRows"))
    {
      {
        unknown _indexOfInterest[340378] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340379] "expr temp" "temp"
        (340388 'move' _iterator[340379](340386 call _getIterator(340399 call chpl_direct_range_iter(340392 call + row 1)(340396 call . startIdxDom c"high") 1)))
        Defer
        {
          {
            (340415 call _freeIterator _iterator[340379])
          }
        }
        { scopeless type
          (340404 'move' _indexOfInterest[340378](340401 call iteratorIndex _iterator[340379]))
        }
        ForLoop[340380]
        {
          unknown r[340408] "index var" "insert auto destroy"
          (340410 'move' r[340408] _indexOfInterest[340378])
          {
            (340374 call -=(340372 call startIdx r) 1)
          }
          label _continueLabel[340383]
          _indexOfInterest[340378]
          _iterator[340379]
        }
        label _breakLabel[340384]
      }
    }
    {
      {
        unknown _indexOfInterest[340443] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340444] "expr temp" "temp"
        (340453 'move' _iterator[340444](340451 call _getIterator(340464 call chpl_direct_range_iter(340457 call + col 1)(340461 call . startIdxDom c"high") 1)))
        Defer
        {
          {
            (340480 call _freeIterator _iterator[340444])
          }
        }
        { scopeless type
          (340469 'move' _indexOfInterest[340443](340466 call iteratorIndex _iterator[340444]))
        }
        ForLoop[340445]
        {
          unknown r[340473] "index var" "insert auto destroy"
          (340475 'move' r[340473] _indexOfInterest[340443])
          {
            (340439 call -=(340437 call startIdx r) 1)
          }
          label _continueLabel[340448]
          _indexOfInterest[340443]
          _iterator[340444]
        }
        label _breakLabel[340449]
      }
    }
    {
      unknown _indexOfInterest[340509] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340510] "expr temp" "temp"
      (340519 'move' _iterator[340510](340517 call _getIterator _arrs))
      Defer
      {
        {
          (340535 call _freeIterator _iterator[340510])
        }
      }
      { scopeless type
        (340524 'move' _indexOfInterest[340509](340521 call iteratorIndex _iterator[340510]))
      }
      ForLoop[340511]
      {
        unknown a[340528] "index var" "insert auto destroy"
        (340530 'move' a[340528] _indexOfInterest[340509])
        {
          (340506 call(340495 call . a c"sparseShiftArrayBack")(340503 call chpl_build_bounded_range insertPt(340501 call - _nnz 1)))
        }
        label _continueLabel[340514]
        _indexOfInterest[340509]
        _iterator[340510]
      }
      label _breakLabel[340515]
    }
    (340543 return 1)
  } function CSDom[341023](?).dsiClear[340549](arg _mt[341107]:_MT[238], arg this[341105]:CSDom[341023](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (340553 call = _nnz 0)
    (340559 call = startIdx 1)
  } function CSDom[341023](?).dimIter[340568](arg _mt[341111]:_MT[238], arg this[341109]:CSDom[341023](?), param arg d[340566]:_any[178](?), arg ind[340570]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(340642 call _cond_test(340580 call &&(340574 call != d 1)(340577 call . this c"compressRows")))
    {
      (340601 call compilerError "dimIter(0, ..) not supported on CS(compressRows=true) domains")
    }
    {
      { scopeless
        if(340638 call _cond_test(340614 call &&(340606 call != d 0)(340612 call !(340609 call . this c"compressRows"))))
        {
          (340635 call compilerError "dimIter(1, ..) not supported on CS(compressRows=false) domains")
        }
      }
    }
    {
      unknown _indexOfInterest[340665] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340666] "expr temp" "temp"
      (340675 'move' _iterator[340666](340673 call _getIterator(340684 call chpl_direct_range_iter(340679 call startIdx ind)(340682 call stopIdx ind) 1)))
      Defer
      {
        {
          (340700 call _freeIterator _iterator[340666])
        }
      }
      { scopeless type
        (340689 'move' _indexOfInterest[340665](340686 call iteratorIndex _iterator[340666]))
      }
      ForLoop[340667]
      {
        unknown i[340693] "index var" "insert auto destroy"
        (340695 'move' i[340693] _indexOfInterest[340665])
        { scopeless
          (340663 yield(340662 call idx i))
        }
        label _continueLabel[340670]
        _indexOfInterest[340665]
        _iterator[340666]
      }
      label _breakLabel[340671]
    }
  } function CSDom[341023](?).dsiSerialWrite[340713](arg _mt[341115]:_MT[238], arg this[341113]:CSDom[341023](?), arg f[340711]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (340717 call <~> f "{\n")
    if(341011 call _cond_test(340722 call . this c"compressRows"))
    {
      {
        unknown _indexOfInterest[340834] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340835] "expr temp" "temp"
        (340844 'move' _iterator[340835](340842 call _getIterator rowRange))
        Defer
        {
          {
            (340860 call _freeIterator _iterator[340835])
          }
        }
        { scopeless type
          (340849 'move' _indexOfInterest[340834](340846 call iteratorIndex _iterator[340835]))
        }
        ForLoop[340836]
        {
          unknown r[340853] "index var" "insert auto destroy"
          (340855 'move' r[340853] _indexOfInterest[340834])
          {
            { scopeless
              const lo[340731] "const"(340730 call startIdx r)
              const hi[340738] "const"(340737 call stopIdx r)
              (340741 'end of statement')
            }
            {
              unknown _indexOfInterest[340796] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[340797] "expr temp" "temp"
              (340806 'move' _iterator[340797](340804 call _getIterator(340811 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (340827 call _freeIterator _iterator[340797])
                }
              }
              { scopeless type
                (340816 'move' _indexOfInterest[340796](340813 call iteratorIndex _iterator[340797]))
              }
              ForLoop[340798]
              {
                unknown c[340820] "index var" "insert auto destroy"
                (340822 'move' c[340820] _indexOfInterest[340796])
                {
                  (340792 call <~>(340765 call <~>(340762 call <~>(340756 call <~>(340753 call <~>(340750 call <~> f " (") r) ", ")(340761 call idx c)) ")")(340789 IfExpr (340769 call == c hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    ""
                  } ))
                }
                label _continueLabel[340801]
                _indexOfInterest[340796]
                _iterator[340797]
              }
              label _breakLabel[340802]
            }
          }
          label _continueLabel[340839]
          _indexOfInterest[340834]
          _iterator[340835]
        }
        label _breakLabel[340840]
      }
    }
    {
      {
        unknown _indexOfInterest[340977] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340978] "expr temp" "temp"
        (340987 'move' _iterator[340978](340985 call _getIterator colRange))
        Defer
        {
          {
            (341003 call _freeIterator _iterator[340978])
          }
        }
        { scopeless type
          (340992 'move' _indexOfInterest[340977](340989 call iteratorIndex _iterator[340978]))
        }
        ForLoop[340979]
        {
          unknown c[340996] "index var" "insert auto destroy"
          (340998 'move' c[340996] _indexOfInterest[340977])
          {
            { scopeless
              const lo[340874] "const"(340873 call startIdx c)
              const hi[340881] "const"(340880 call stopIdx c)
              (340884 'end of statement')
            }
            {
              unknown _indexOfInterest[340939] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[340940] "expr temp" "temp"
              (340949 'move' _iterator[340940](340947 call _getIterator(340954 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (340970 call _freeIterator _iterator[340940])
                }
              }
              { scopeless type
                (340959 'move' _indexOfInterest[340939](340956 call iteratorIndex _iterator[340940]))
              }
              ForLoop[340941]
              {
                unknown r[340963] "index var" "insert auto destroy"
                (340965 'move' r[340963] _indexOfInterest[340939])
                {
                  (340935 call <~>(340908 call <~>(340905 call <~>(340902 call <~>(340899 call <~>(340893 call <~> f " (")(340898 call idx r)) ", ") c) ")")(340932 IfExpr (340912 call == r hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    ""
                  } ))
                }
                label _continueLabel[340944]
                _indexOfInterest[340939]
                _iterator[340940]
              }
              label _breakLabel[340945]
            }
          }
          label _continueLabel[340982]
          _indexOfInterest[340977]
          _iterator[340978]
        }
        label _breakLabel[340983]
      }
    }
    (341017 call <~> f "}\n")
  } BaseSparseDomImpl
  type CSArr[341951] function CSArr[341951].init[341125](arg _mt[341955]:_MT[238], arg this[341953]:CSArr[341951], arg eltType[341123]:_any[178](?), param arg rank[341128] :
  int[13], arg idxType[341131]:_any[178](?), arg dom[341133]:_any[178](?), param arg initElts[341136] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (341149 call(341140 call . super c"init") eltType rank idxType dom initElts)
  } function CSArr[341951].dsiAccess[341163](arg _mt[341959]:_MT[238], arg this[341957]:CSArr[341951], arg ind[341160] :
  (341158 call * rank idxType)) ref : _unknown[51] "method" "primary method"
  {
    (341171 call(341166 call . dom c"boundsCheck") ind)
    { scopeless
      const tmp[341186] "const" "temp"(341185 call(341180 call . dom c"find") ind)
      (341193 call _check_tuple_var_decl tmp[341186] 2)
      const found[341174] "const"(341187 call tmp[341186] 0)
      const loc[341176] "const"(341190 call tmp[341186] 1)
      (341198 'end of statement')
    }
    if(341212 call _cond_test found)
    {
      { scopeless
        (341204 return(341203 call data loc))
      }
    }
    {
      { scopeless
        (341210 call halt "attempting to assign a 'zero' value in a sparse array: " ind)
      }
    }
  } function CSArr[341951].dsiAccess[341229](arg _mt[341963]:_MT[238], arg this[341961]:CSArr[341951], arg ind[341226] :
  (341224 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (341241 call(341236 call . dom c"boundsCheck") ind)
    { scopeless
      const tmp[341256] "const" "temp"(341255 call(341250 call . dom c"find") ind)
      (341263 call _check_tuple_var_decl tmp[341256] 2)
      const found[341244] "const"(341257 call tmp[341256] 0)
      const loc[341246] "const"(341260 call tmp[341256] 1)
      (341268 'end of statement')
    }
    if(341279 call _cond_test found)
    {
      { scopeless
        (341274 return(341273 call data loc))
      }
    }
    {
      { scopeless
        (341277 return irv)
      }
    }
  }
  where {
    (341234 call shouldReturnRvalueByValue eltType)
  } function CSArr[341951].dsiAccess[341297](arg _mt[341967]:_MT[238], arg this[341965]:CSArr[341951], arg ind[341294] :
  (341292 call * rank idxType)) const ref : _unknown[51] "method" "primary method"
  {
    (341309 call(341304 call . dom c"boundsCheck") ind)
    { scopeless
      const tmp[341324] "const" "temp"(341323 call(341318 call . dom c"find") ind)
      (341331 call _check_tuple_var_decl tmp[341324] 2)
      const found[341312] "const"(341325 call tmp[341324] 0)
      const loc[341314] "const"(341328 call tmp[341324] 1)
      (341336 'end of statement')
    }
    if(341347 call _cond_test found)
    {
      { scopeless
        (341342 return(341341 call data loc))
      }
    }
    {
      { scopeless
        (341345 return irv)
      }
    }
  }
  where {
    (341302 call shouldReturnRvalueByConstRef eltType)
  } function CSArr[341951].these[341358](arg _mt[341971]:_MT[238], arg this[341969]:CSArr[341951]) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[341374] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341375] "expr temp" "temp"
      (341384 'move' _iterator[341375](341382 call _getIterator(341392 call chpl_direct_range_iter 1(341389 call . dom c"_nnz") 1)))
      Defer
      {
        {
          (341408 call _freeIterator _iterator[341375])
        }
      }
      { scopeless type
        (341397 'move' _indexOfInterest[341374](341394 call iteratorIndex _iterator[341375]))
      }
      ForLoop[341376]
      {
        unknown i[341401] "index var" "insert auto destroy"
        (341403 'move' i[341401] _indexOfInterest[341374])
        { scopeless
          (341372 yield(341371 call data i))
        }
        label _continueLabel[341379]
        _indexOfInterest[341374]
        _iterator[341375]
      }
      label _breakLabel[341380]
    }
  } function CSArr[341951].these[341424](arg _mt[341975]:_MT[238], arg this[341973]:CSArr[341951], param arg tag[341421] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[341444] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341445] "expr temp" "temp"
      (341454 'move' _iterator[341445](341452 call _getIterator(341440 call(341435 call . dom c"these") tag)))
      Defer
      {
        {
          (341471 call _freeIterator _iterator[341445])
        }
      }
      { scopeless type
        (341460 'move' _indexOfInterest[341444](341457 call iteratorIndex _iterator[341445]))
      }
      ForLoop[341446]
      {
        unknown followThis[341464] "index var" "insert auto destroy"
        (341466 'move' followThis[341464] _indexOfInterest[341444])
        { scopeless
          (341442 yield followThis)
        }
        label _continueLabel[341449]
        _indexOfInterest[341444]
        _iterator[341445]
      }
      label _breakLabel[341450]
    }
  }
  where {
    (341431 call == tag(341428 call . iterKind c"leader"))
  } function CSArr[341951].these[341488](arg _mt[341979]:_MT[238], arg this[341977]:CSArr[341951], param arg tag[341485] :
  iterKind, arg followThis[341496] :
  (341494 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown tmp[341514] "temp" followThis
      (341524 call _check_tuple_var_decl tmp[341514] 3)
      unknown followThisDom[341506](341515 call tmp[341514] 0)
      unknown startIx[341508](341518 call tmp[341514] 1)
      unknown endIx[341510](341521 call tmp[341514] 2)
      (341529 'end of statement')
    }
    if(341559 call _cond_test(341536 call != followThisDom(341533 call . this c"dom")))
    {
      { scopeless
        (341557 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays (CS layout)")
      }
    }
    if(341589 call _cond_test debugCS)
    {
      { scopeless
        (341587 call writeln "CSArr follower: " startIx ".." endIx)
      }
    }
    {
      unknown _indexOfInterest[341605] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341606] "expr temp" "temp"
      (341615 'move' _iterator[341606](341613 call _getIterator(341620 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (341636 call _freeIterator _iterator[341606])
        }
      }
      { scopeless type
        (341625 'move' _indexOfInterest[341605](341622 call iteratorIndex _iterator[341606]))
      }
      ForLoop[341607]
      {
        unknown i[341629] "index var" "insert auto destroy"
        (341631 'move' i[341629] _indexOfInterest[341605])
        { scopeless
          (341603 yield(341602 call data i))
        }
        label _continueLabel[341610]
        _indexOfInterest[341605]
        _iterator[341606]
      }
      label _breakLabel[341611]
    }
  }
  where {
    (341504 call == tag(341501 call . iterKind c"follower"))
  } function CSArr[341951].these[341652](arg _mt[341983]:_MT[238], arg this[341981]:CSArr[341951], param arg tag[341649] :
  iterKind, arg followThis[341654]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (341666 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")
    (341670 yield 0)
  }
  where {
    (341661 call == tag(341658 call . iterKind c"follower"))
  } function CSArr[341951].dsiSerialWrite[341679](arg _mt[341987]:_MT[238], arg this[341985]:CSArr[341951], arg f[341677]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(341943 call _cond_test(341682 call . dom c"compressRows"))
    {
      {
        unknown _indexOfInterest[341780] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[341781] "expr temp" "temp"
        (341790 'move' _iterator[341781](341788 call _getIterator(341689 call . dom c"rowRange")))
        Defer
        {
          {
            (341807 call _freeIterator _iterator[341781])
          }
        }
        { scopeless type
          (341796 'move' _indexOfInterest[341780](341793 call iteratorIndex _iterator[341781]))
        }
        ForLoop[341782]
        {
          unknown r[341800] "index var" "insert auto destroy"
          (341802 'move' r[341800] _indexOfInterest[341780])
          {
            { scopeless
              const lo[341699] "const"(341698 call(341693 call . dom c"startIdx") r)
              (341702 'end of statement')
            }
            { scopeless
              const hi[341713] "const"(341712 call(341707 call . dom c"stopIdx") r)
              (341716 'end of statement')
            }
            {
              unknown _indexOfInterest[341742] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[341743] "expr temp" "temp"
              (341752 'move' _iterator[341743](341750 call _getIterator(341757 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (341773 call _freeIterator _iterator[341743])
                }
              }
              { scopeless type
                (341762 'move' _indexOfInterest[341742](341759 call iteratorIndex _iterator[341743]))
              }
              ForLoop[341744]
              {
                unknown c[341766] "index var" "insert auto destroy"
                (341768 'move' c[341766] _indexOfInterest[341742])
                {
                  (341738 call <~>(341727 call <~> f(341726 call data c))(341735 IfExpr (341731 call == c hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    " "
                  } ))
                }
                label _continueLabel[341747]
                _indexOfInterest[341742]
                _iterator[341743]
              }
              label _breakLabel[341748]
            }
          }
          label _continueLabel[341785]
          _indexOfInterest[341780]
          _iterator[341781]
        }
        label _breakLabel[341786]
      }
    }
    {
      {
        unknown _indexOfInterest[341908] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[341909] "expr temp" "temp"
        (341918 'move' _iterator[341909](341916 call _getIterator(341819 call . dom c"colRange")))
        Defer
        {
          {
            (341935 call _freeIterator _iterator[341909])
          }
        }
        { scopeless type
          (341924 'move' _indexOfInterest[341908](341921 call iteratorIndex _iterator[341909]))
        }
        ForLoop[341910]
        {
          unknown c[341928] "index var" "insert auto destroy"
          (341930 'move' c[341928] _indexOfInterest[341908])
          {
            { scopeless
              const lo[341829] "const"(341828 call(341823 call . dom c"startIdx") c)
              (341832 'end of statement')
            }
            { scopeless
              const hi[341841] "const"(341840 call(341835 call . dom c"stopIdx") c)
              (341844 'end of statement')
            }
            {
              unknown _indexOfInterest[341870] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[341871] "expr temp" "temp"
              (341880 'move' _iterator[341871](341878 call _getIterator(341885 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (341901 call _freeIterator _iterator[341871])
                }
              }
              { scopeless type
                (341890 'move' _indexOfInterest[341870](341887 call iteratorIndex _iterator[341871]))
              }
              ForLoop[341872]
              {
                unknown r[341894] "index var" "insert auto destroy"
                (341896 'move' r[341894] _indexOfInterest[341870])
                {
                  (341866 call <~>(341855 call <~> f(341854 call data r))(341863 IfExpr (341859 call == r hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    " "
                  } ))
                }
                label _continueLabel[341875]
                _indexOfInterest[341870]
                _iterator[341871]
              }
              label _breakLabel[341876]
            }
          }
          label _continueLabel[341913]
          _indexOfInterest[341908]
          _iterator[341909]
        }
        label _breakLabel[341914]
      }
    }
  } BaseSparseArrImpl
}