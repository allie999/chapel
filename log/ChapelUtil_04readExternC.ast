AST dump for ChapelUtil after pass readExternC.
Module use list: 

{
  (166920 'use' ChapelStandard)
  function safeAdd[166930](arg a[166927] :
  unknown t[166925], arg b[166933] :
  t) : _unknown[51]
  {
    if(166947 call _cond_test(166940 call !(166939 call isIntegralType t)))
    {
      { scopeless
        (166945 call compilerError "Values must be of integral type.")
      }
    }
    if(167029 call _cond_test(166955 call < a 0))
    {
      if(166988 call _cond_test(166959 call >= b 0))
      {
        (166962 return 1)
      }
      {
        if(166983 call _cond_test(166973 call < b(166971 call -(166969 call min t) a)))
        {
          (166976 return 0)
        }
        {
          (166980 return 1)
        }
      }
    }
    {
      if(167024 call _cond_test(166995 call <= b 0))
      {
        (166998 return 1)
      }
      {
        if(167019 call _cond_test(167009 call > b(167007 call -(167005 call max t) a)))
        {
          (167012 return 0)
        }
        {
          (167016 return 1)
        }
      }
    }
  }
  function safeSub[167042](arg a[167039] :
  unknown t[167037], arg b[167045] :
  t) : _unknown[51]
  {
    if(167059 call _cond_test(167052 call !(167051 call isIntegralType t)))
    {
      { scopeless
        (167057 call compilerError "Values must be of integral type.")
      }
    }
    if(167203 call _cond_test(167067 call < a 0))
    {
      if(167141 call _cond_test(167071 call <= b 0))
      {
        (167074 return 1)
      }
      {
        if(167136 call _cond_test(167085 call > b(167083 call +(167081 call max t) a)))
        {
          if(167124 call _cond_test(167097 call safeAdd(167093 call +(167091 call max t) a) 1))
          {
            if(167119 call _cond_test(167109 call > b(167107 call +(167104 call +(167102 call max t) a) 1)))
            {
              (167112 return 0)
            }
            {
              (167116 return 1)
            }
          }
          (167130 return 0)
        }
        {
          (167133 return 1)
        }
      }
    }
    {
      if(167198 call _cond_test(167148 call >= b 0))
      {
        if(167166 call _cond_test(167153 call isUintType t))
        {
          { scopeless
            if(167161 call _cond_test(167156 call > b a))
            {
              { scopeless
                (167159 return 0)
              }
            }
          }
        }
        (167173 return 1)
      }
      {
        if(167193 call _cond_test(167183 call <= b(167181 call +(167179 call min t) a)))
        {
          (167186 return 0)
        }
        {
          (167190 return 1)
        }
      }
    }
  }
  function safeMul[167216](arg a[167213] :
  unknown t[167211], arg b[167219] :
  t) : _unknown[51]
  {
    if(167233 call _cond_test(167226 call !(167225 call isIntegralType t)))
    {
      { scopeless
        (167231 call compilerError "Values must be of integral type.")
      }
    }
    if(167343 call _cond_test(167241 call > a 0))
    {
      if(167285 call _cond_test(167245 call > b 0))
      {
        if(167260 call _cond_test(167255 call > a(167253 call /(167251 call max t) b)))
        {
          { scopeless
            (167258 return 0)
          }
        }
      }
      {
        if(167279 call _cond_test(167274 call < b(167272 call /(167270 call min t) a)))
        {
          { scopeless
            (167277 return 0)
          }
        }
      }
    }
    {
      if(167338 call _cond_test(167292 call > b 0))
      {
        if(167307 call _cond_test(167302 call < a(167300 call /(167298 call min t) b)))
        {
          { scopeless
            (167305 return 0)
          }
        }
      }
      {
        if(167332 call _cond_test(167327 call &&(167315 call != a 0)(167325 call < b(167323 call /(167321 call max t) a))))
        {
          { scopeless
            (167330 return 0)
          }
        }
      }
    }
    (167348 return 1)
  }
  type chpl_main_argument[167370] unknown argc[167357](167356 call int[13] 64) unknown return_value[167365](167364 call int[13] 32)
  function chpl_convert_args[167379](arg arg[167376] :
  chpl_main_argument) : _unknown[51]
  {
    { scopeless
      unknown local_arg[167382] arg
      (167385 'end of statement')
    }
    function chpl_get_argument_i[167393](ref arg args[167390] :
    chpl_main_argument, arg i[167399] :
    (167398 call int[13] 32)) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_string
    }
    { scopeless
      unknown array[167423] "no auto destroy"(167421 call chpl__buildArrayRuntimeType(167419 call chpl__ensureDomainExpr(167415 call #(167407 call chpl_build_low_bounded_range 0)(167412 call . local_arg c"argc"))) string[26])
      (167426 'end of statement')
    }
    {
      unknown _indexOfInterest[167463] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[167464] "expr temp" "temp"
      (167473 'move' _iterator[167464](167471 call _getIterator(167483 call chpl_direct_counted_range_iter 0(167479 call . arg c"argc"))))
      Defer
      {
        {
          (167499 call _freeIterator _iterator[167464])
        }
      }
      { scopeless type
        (167488 'move' _indexOfInterest[167463](167485 call iteratorIndex _iterator[167464]))
      }
      ForLoop[167465]
      {
        unknown i[167492] "index var" "insert auto destroy"
        (167494 'move' i[167492] _indexOfInterest[167463])
        {
          Try!
          {
            {
              (167455 call =(167440 call array i)(167454 call createStringWithNewBuffer(167452 call chpl_get_argument_i local_arg(167450 call _cast(167449 call int[13] 32) i))))
            }
          }
        }
        label _continueLabel[167468]
        _indexOfInterest[167463]
        _iterator[167464]
      }
      label _breakLabel[167469]
    }
    (167507 return array)
  }
  function chpl_get_mli_connection[167517](arg arg[167514] :
  chpl_main_argument) : _unknown[51]
  {
    { scopeless
      unknown local_arg[167520] arg
      (167523 'end of statement')
    }
    function chpl_get_argument_i[167531](ref arg args[167528] :
    chpl_main_argument, arg i[167537] :
    (167536 call int[13] 32)) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_string
    }
    { scopeless
      unknown flag[167562](167561 call chpl_get_argument_i local_arg(167559 call _cast(167558 call int[13] 32)(167553 call -(167549 call . local_arg c"argc") 2))) c_string
      (167565 'end of statement')
    }
    if(167635 call _cond_test(167584 call != flag "--chpl-mli-socket-loc"))
    {
      Try!
      {
        {
          (167630 call halt(167627 call +(167621 call + "chpl_get_mli_connection called with unexpected arguments, missing " "'--chpl-mli-socket-loc <connection>', instead got ")(167626 call createStringWithNewBuffer flag)))
        }
      }
    }
    { scopeless
      unknown result[167657](167656 call chpl_get_argument_i local_arg(167654 call _cast(167653 call int[13] 32)(167648 call -(167644 call . local_arg c"argc") 1))) c_string
      (167660 'end of statement')
    }
    (167662 return result)
  }
  function chpl_rt_preUserCodeHook[167668]() : void[4] "extern" "local args" "no fn body"
  {
  }
  function chpl_rt_postUserCodeHook[167674]() : void[4] "extern" "local args" "no fn body"
  {
  }
  { scopeless
    unknown printModuleDeinitOrder[167679] "config" "param" 0
    (167682 'end of statement')
  }
  function chpl_addModule[167689](arg moduleName[167686] :
  c_string, arg deinitFun[167692] :
  c_fn_ptr) : _unknown[51]
  {
    (167705 call = chpl_moduleDeinitFuns(167698 'new'(_chpl_manager = unmanaged[220](?))(167704 call chpl_ModuleDeinit moduleName deinitFun chpl_moduleDeinitFuns)))
  }
  function chpl_deinitModules[167713]() : _unknown[51] "export" "local args"
  {
    function printf[167721](arg fmt[167718] :
    c_string) : void[4] "extern" "local args" "no fn body"
    {
    }
    function printf[167732](arg fmt[167729] :
    c_string, arg arg[167735] :
    c_string) : void[4] "extern" "local args" "no fn body"
    {
    }
    function chpl_execute_module_deinit[167746](arg deinitFun[167743] :
    c_fn_ptr) : void[4] "extern" "local args" "no fn body"
    {
    }
    if(167758 call _cond_test printModuleDeinitOrder)
    {
      { scopeless
        (167756 call printf c"Deinitializing Modules:\n")
      }
    }
    { scopeless
      unknown prev[167764] chpl_moduleDeinitFuns
      (167767 'end of statement')
    }
    {
      unknown tmp[167821] "temp"
      (167839 'move' tmp[167821](167837 call _cond_test prev))
      WhileDo[167826]
      {
        {
          { scopeless
            const curr[167772] "const"(167770 call postfix! prev)
            (167775 'end of statement')
          }
          if(167791 call _cond_test printModuleDeinitOrder)
          {
            { scopeless
              (167789 call printf c"  %s\n"(167786 call . curr c"moduleName"))
            }
          }
          (167804 call chpl_execute_module_deinit(167800 call . curr c"deinitFun"))
          (167813 call = prev(167810 call . curr c"prevModule"))
          (167818 call chpl__delete curr)
        }
        label _continueLabel[167824]
        (167832 'move' tmp[167821](167830 call _cond_test prev))
        tmp[167821]
      }
      label _breakLabel[167825]
    }
    (167844 call = chpl_moduleDeinitFuns nil[44])
  }
}