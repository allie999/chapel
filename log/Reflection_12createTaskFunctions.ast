AST dump for Reflection after pass createTaskFunctions.
Module use list: ChapelStandard 

{
  function chpl__init_Reflection[416018]() : void[4] "insert line file info" "module init"
  {
    (533024 return _void[55])
  }
  function checkQueryT[224799](arg t[224797]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[532748] "RVV" "temp" "type variable"
    unknown call_tmp[710695] "expr temp" "maybe param" "maybe type" "temp"
    (710698 'move' call_tmp[710695](224804 call isClassType t[224797]))
    unknown call_tmp[710700] "expr temp" "maybe param" "maybe type" "temp"
    (710703 'move' call_tmp[710700](224857 call _cond_test call_tmp[710695]))
    if call_tmp[710700]
    {
      unknown call_tmp[710705] "expr temp" "maybe param" "maybe type" "temp"
      (710708 'move' call_tmp[710705](224808 call _cast _borrowedNonNilable[214](?) t[224797]))
      (532753 'move' ret[532748](532752 'deref' call_tmp[710705]))
      gotoReturn _end_checkQueryT[532746] _end_checkQueryT[532746]
    }
    {
      unknown tmp[431599] "maybe param" "temp"
      (431610 'move' tmp[431599](224815 call isRecordType t[224797]))
      unknown call_tmp[710710] "expr temp" "maybe param" "maybe type" "temp"
      (710713 'move' call_tmp[710710](431612 call _cond_invalid tmp[431599]))
      if call_tmp[710710]
      {
        (431615 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[575706] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[575707] "maybe param" "temp"
      unknown call_tmp[710715] "expr temp" "maybe param" "maybe type" "temp"
      (710718 'move' call_tmp[710715](431600 call isTrue tmp[431599]))
      (575712 'move' tmp[575707](575710 call _cond_test call_tmp[710715]))
      if tmp[575707]
      {
        (575717 'move' tmp[575706](575714 '_paramFoldLogical' tmp[575707] 1))
      }
      {
        unknown tmp[575719] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[710720] "expr temp" "maybe param" "maybe type" "temp"
        (710723 'move' call_tmp[710720](224819 call isUnionType t[224797]))
        (575721 'move' tmp[575719](431604 call isTrue call_tmp[710720]))
        (575726 'move' tmp[575706](575723 '_paramFoldLogical' tmp[575707] tmp[575719]))
      }
      unknown call_tmp[710725] "expr temp" "maybe param" "maybe type" "temp"
      (710728 'move' call_tmp[710725](224851 call _cond_test tmp[575706]))
      if call_tmp[710725]
      {
        (532758 'move' ret[532748](532757 'deref' t[224797]))
        gotoReturn _end_checkQueryT[532746] _end_checkQueryT[532746]
      }
      {
        unknown call_tmp[710730] "expr temp" "maybe param" "maybe type" "temp"
        (710733 'move' call_tmp[710730](224828 call _cast string[26] t[224797]))
        (224849 call compilerError call_tmp[710730] " is not a class, record, or union type" 2)
      }
    }
    label _end_checkQueryT[532746]
    (532750 return ret[532748])
  }
  function numFields[224871](arg t[224869]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[532764] "RVV" "param" "temp"
    unknown call_tmp[710735] "expr temp" "maybe param" "maybe type" "temp"
    (710738 'move' call_tmp[710735](224879 call checkQueryT t[224869]))
    unknown call_tmp[710740] "expr temp" "maybe param" "maybe type" "temp"
    (710743 'move' call_tmp[710740](224880 'num fields' call_tmp[710735]))
    (532770 'move' ret[532764](532769 'coerce' call_tmp[710740] int(64)[13]))
    (532766 return ret[532764])
  }
  { scopeless type
    int(64)[13]
  }
  function getFieldName[224891](arg t[224889]:_any[178](?), param arg i[224894]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532774] "RVV" "param" "temp"
    unknown call_tmp[710745] "expr temp" "maybe param" "maybe type" "temp"
    (710748 'move' call_tmp[710745](224903 call checkQueryT t[224889]))
    unknown call_tmp[710750] "expr temp" "maybe param" "maybe type" "temp"
    (710753 'move' call_tmp[710750](224906 call + i[224894] 1))
    unknown call_tmp[710755] "expr temp" "maybe param" "maybe type" "temp"
    (710758 'move' call_tmp[710755](224908 'field num to name' call_tmp[710745] call_tmp[710750]))
    (532780 'move' ret[532774](532779 'coerce' call_tmp[710755] string[26]))
    (532776 return ret[532774])
  }
  { scopeless type
    string[26]
  }
  function getField[224922](const  ref arg x[224919]:_any[178](?), param arg i[224925]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532784] "RVV" "param" "temp"
    unknown call_tmp[710760] "expr temp" "maybe param" "maybe type" "temp"
    (710763 'move' call_tmp[710760](224959 call + i[224925] 1))
    unknown call_tmp[710765] "expr temp" "maybe param" "maybe type" "temp"
    (710768 'move' call_tmp[710765](224961 'field by num' x[224919] call_tmp[710760]))
    (532789 'move' ret[532784](532788 'deref' call_tmp[710765]))
    (532786 return ret[532784])
  }
  where {
    unknown tmp[431620] "maybe param" "temp"
    unknown tmp[431641] "maybe param" "temp"
    (431652 'move' tmp[431641](224930 call >= i[224925] 0))
    unknown call_tmp[710770] "expr temp" "maybe param" "maybe type" "temp"
    (710773 'move' call_tmp[710770](431654 call _cond_invalid tmp[431641]))
    if call_tmp[710770]
    {
      (431657 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575733] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575734] "maybe param" "temp"
    unknown call_tmp[710775] "expr temp" "maybe param" "maybe type" "temp"
    (710778 'move' call_tmp[710775](431642 call isTrue tmp[431641]))
    (575739 'move' tmp[575734](575737 call _cond_test call_tmp[710775]))
    if tmp[575734]
    {
      unknown tmp[575741] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710780] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710783 'move' call_tmp[710780](464860 'typeof' x[224919]))
      unknown call_tmp[710785] "expr temp" "maybe param" "maybe type" "temp"
      (710788 'move' call_tmp[710785](224936 call numFields call_tmp[710780]))
      unknown call_tmp[710790] "expr temp" "maybe param" "maybe type" "temp"
      (710793 'move' call_tmp[710790](224937 call < i[224925] call_tmp[710785]))
      (575743 'move' tmp[575741](431645 call isTrue call_tmp[710790]))
      (575748 'move' tmp[575733](575745 '_paramFoldLogical' tmp[575734] tmp[575741]))
    }
    {
      (575753 'move' tmp[575733](575750 '_paramFoldLogical' tmp[575734] 0))
    }
    (431631 'move' tmp[431620] tmp[575733])
    unknown call_tmp[710795] "expr temp" "maybe param" "maybe type" "temp"
    (710798 'move' call_tmp[710795](431633 call _cond_invalid tmp[431620]))
    if call_tmp[710795]
    {
      (431636 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575760] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575761] "maybe param" "temp"
    unknown call_tmp[710800] "expr temp" "maybe param" "maybe type" "temp"
    (710803 'move' call_tmp[710800](431621 call isTrue tmp[431620]))
    (575766 'move' tmp[575761](575764 call _cond_test call_tmp[710800]))
    if tmp[575761]
    {
      unknown tmp[575768] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710805] "expr temp" "maybe param" "maybe type" "temp"
      (710808 'move' call_tmp[710805](224947 call + i[224925] 1))
      unknown call_tmp[710810] "expr temp" "maybe param" "maybe type" "temp"
      (710813 'move' call_tmp[710810](224949 'field by num' x[224919] call_tmp[710805]))
      unknown call_tmp[710815] "expr temp" "maybe param" "maybe type" "temp"
      (710818 'move' call_tmp[710815](224951 call isParam call_tmp[710810]))
      (575770 'move' tmp[575768](431624 call isTrue call_tmp[710815]))
      (575775 'move' tmp[575760](575772 '_paramFoldLogical' tmp[575761] tmp[575768]))
    }
    {
      (575780 'move' tmp[575760](575777 '_paramFoldLogical' tmp[575761] 0))
    }
    (748273 call chpl_statementLevelSymbol tmp[575760])
  }
  function getField[224975](const  ref arg x[224972]:_any[178](?), param arg i[224978]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[532793] "RVV" "temp" "type variable"
    unknown call_tmp[710820] "expr temp" "maybe param" "maybe type" "temp"
    (710823 'move' call_tmp[710820](225012 call + i[224978] 1))
    unknown call_tmp[710825] "expr temp" "maybe param" "maybe type" "temp"
    (710828 'move' call_tmp[710825](225014 'field by num' x[224972] call_tmp[710820]))
    (532798 'move' ret[532793](532797 'deref' call_tmp[710825]))
    (532795 return ret[532793])
  }
  where {
    unknown tmp[431662] "maybe param" "temp"
    unknown tmp[431683] "maybe param" "temp"
    (431694 'move' tmp[431683](224983 call >= i[224978] 0))
    unknown call_tmp[710830] "expr temp" "maybe param" "maybe type" "temp"
    (710833 'move' call_tmp[710830](431696 call _cond_invalid tmp[431683]))
    if call_tmp[710830]
    {
      (431699 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575787] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575788] "maybe param" "temp"
    unknown call_tmp[710835] "expr temp" "maybe param" "maybe type" "temp"
    (710838 'move' call_tmp[710835](431684 call isTrue tmp[431683]))
    (575793 'move' tmp[575788](575791 call _cond_test call_tmp[710835]))
    if tmp[575788]
    {
      unknown tmp[575795] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710840] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710843 'move' call_tmp[710840](464862 'typeof' x[224972]))
      unknown call_tmp[710845] "expr temp" "maybe param" "maybe type" "temp"
      (710848 'move' call_tmp[710845](224989 call numFields call_tmp[710840]))
      unknown call_tmp[710850] "expr temp" "maybe param" "maybe type" "temp"
      (710853 'move' call_tmp[710850](224990 call < i[224978] call_tmp[710845]))
      (575797 'move' tmp[575795](431687 call isTrue call_tmp[710850]))
      (575802 'move' tmp[575787](575799 '_paramFoldLogical' tmp[575788] tmp[575795]))
    }
    {
      (575807 'move' tmp[575787](575804 '_paramFoldLogical' tmp[575788] 0))
    }
    (431673 'move' tmp[431662] tmp[575787])
    unknown call_tmp[710855] "expr temp" "maybe param" "maybe type" "temp"
    (710858 'move' call_tmp[710855](431675 call _cond_invalid tmp[431662]))
    if call_tmp[710855]
    {
      (431678 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575814] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575815] "maybe param" "temp"
    unknown call_tmp[710860] "expr temp" "maybe param" "maybe type" "temp"
    (710863 'move' call_tmp[710860](431663 call isTrue tmp[431662]))
    (575820 'move' tmp[575815](575818 call _cond_test call_tmp[710860]))
    if tmp[575815]
    {
      unknown tmp[575822] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710865] "expr temp" "maybe param" "maybe type" "temp"
      (710868 'move' call_tmp[710865](225000 call + i[224978] 1))
      unknown call_tmp[710870] "expr temp" "maybe param" "maybe type" "temp"
      (710873 'move' call_tmp[710870](225002 'field by num' x[224972] call_tmp[710865]))
      unknown call_tmp[710875] "expr temp" "maybe param" "maybe type" "temp"
      (710878 'move' call_tmp[710875](225004 call isType call_tmp[710870]))
      (575824 'move' tmp[575822](431666 call isTrue call_tmp[710875]))
      (575829 'move' tmp[575814](575826 '_paramFoldLogical' tmp[575815] tmp[575822]))
    }
    {
      (575834 'move' tmp[575814](575831 '_paramFoldLogical' tmp[575815] 0))
    }
    (748275 call chpl_statementLevelSymbol tmp[575814])
  }
  function getField[225028](const  ref arg x[225025]:_any[178](?), param arg i[225031]:int(64)[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532802] "RVV" "temp"
    unknown call_tmp[710880] "expr temp" "maybe param" "maybe type" "temp"
    (710883 'move' call_tmp[710880](225039 call + i[225031] 1))
    unknown call_tmp[710885] "expr temp" "maybe param" "maybe type" "temp"
    (710888 'move' call_tmp[710885](225041 'field by num' x[225025] call_tmp[710880]))
    (532807 'move' ret[532802](532806 'addr of' call_tmp[710885]))
    (532804 return ret[532802])
  }
  function getField[225054](const  ref arg x[225051]:_any[178](?), param arg s[225057]:string[26]) param : _unknown[51]
  {
    unknown ret[532811] "RVV" "param" "temp"
    unknown call_tmp[710890] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (710893 'move' call_tmp[710890](464864 'typeof' x[225051]))
    unknown call_tmp[710895] "expr temp" "maybe param" "maybe type" "temp"
    (710898 'move' call_tmp[710895](225091 call getFieldIndex call_tmp[710890] s[225057]))
    unknown call_tmp[710900] "expr temp" "maybe param" "maybe type" "temp"
    (710903 'move' call_tmp[710900](225092 call getField x[225051] call_tmp[710895]))
    (532816 'move' ret[532811](532815 'deref' call_tmp[710900]))
    (532813 return ret[532811])
  }
  where {
    unknown tmp[431704] "maybe param" "temp"
    unknown call_tmp[710905] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (710908 'move' call_tmp[710905](464866 'typeof' x[225051]))
    unknown call_tmp[710910] "expr temp" "maybe param" "maybe type" "temp"
    (710913 'move' call_tmp[710910](225064 call getFieldIndex call_tmp[710905] s[225057]))
    unknown call_tmp[710915] "expr temp" "maybe param" "maybe type" "temp"
    (710918 'move' call_tmp[710915](225066 call - 1))
    (431715 'move' tmp[431704](225068 call != call_tmp[710910] call_tmp[710915]))
    unknown call_tmp[710920] "expr temp" "maybe param" "maybe type" "temp"
    (710923 'move' call_tmp[710920](431717 call _cond_invalid tmp[431704]))
    if call_tmp[710920]
    {
      (431720 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575841] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575842] "maybe param" "temp"
    unknown call_tmp[710925] "expr temp" "maybe param" "maybe type" "temp"
    (710928 'move' call_tmp[710925](431705 call isTrue tmp[431704]))
    (575847 'move' tmp[575842](575845 call _cond_test call_tmp[710925]))
    if tmp[575842]
    {
      unknown tmp[575849] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710930] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710933 'move' call_tmp[710930](464868 'typeof' x[225051]))
      unknown call_tmp[710935] "expr temp" "maybe param" "maybe type" "temp"
      (710938 'move' call_tmp[710935](225078 call getFieldIndex call_tmp[710930] s[225057]))
      unknown call_tmp[710940] "expr temp" "maybe param" "maybe type" "temp"
      (710943 'move' call_tmp[710940](225079 call getField x[225051] call_tmp[710935]))
      unknown call_tmp[710945] "expr temp" "maybe param" "maybe type" "temp"
      (710948 'move' call_tmp[710945](225081 call isParam call_tmp[710940]))
      (575851 'move' tmp[575849](431708 call isTrue call_tmp[710945]))
      (575856 'move' tmp[575841](575853 '_paramFoldLogical' tmp[575842] tmp[575849]))
    }
    {
      (575861 'move' tmp[575841](575858 '_paramFoldLogical' tmp[575842] 0))
    }
    (748277 call chpl_statementLevelSymbol tmp[575841])
  }
  function getField[225106](const  ref arg x[225103]:_any[178](?), param arg s[225109]:string[26]) type : _unknown[51]
  {
    unknown ret[532820] "RVV" "temp" "type variable"
    unknown call_tmp[710950] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (710953 'move' call_tmp[710950](464870 'typeof' x[225103]))
    unknown call_tmp[710955] "expr temp" "maybe param" "maybe type" "temp"
    (710958 'move' call_tmp[710955](225143 call getFieldIndex call_tmp[710950] s[225109]))
    unknown call_tmp[710960] "expr temp" "maybe param" "maybe type" "temp"
    (710963 'move' call_tmp[710960](225144 call getField x[225103] call_tmp[710955]))
    (532825 'move' ret[532820](532824 'deref' call_tmp[710960]))
    (532822 return ret[532820])
  }
  where {
    unknown tmp[431725] "maybe param" "temp"
    unknown call_tmp[710965] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (710968 'move' call_tmp[710965](464872 'typeof' x[225103]))
    unknown call_tmp[710970] "expr temp" "maybe param" "maybe type" "temp"
    (710973 'move' call_tmp[710970](225116 call getFieldIndex call_tmp[710965] s[225109]))
    unknown call_tmp[710975] "expr temp" "maybe param" "maybe type" "temp"
    (710978 'move' call_tmp[710975](225118 call - 1))
    (431736 'move' tmp[431725](225120 call != call_tmp[710970] call_tmp[710975]))
    unknown call_tmp[710980] "expr temp" "maybe param" "maybe type" "temp"
    (710983 'move' call_tmp[710980](431738 call _cond_invalid tmp[431725]))
    if call_tmp[710980]
    {
      (431741 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575868] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575869] "maybe param" "temp"
    unknown call_tmp[710985] "expr temp" "maybe param" "maybe type" "temp"
    (710988 'move' call_tmp[710985](431726 call isTrue tmp[431725]))
    (575874 'move' tmp[575869](575872 call _cond_test call_tmp[710985]))
    if tmp[575869]
    {
      unknown tmp[575876] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710990] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710993 'move' call_tmp[710990](464874 'typeof' x[225103]))
      unknown call_tmp[710995] "expr temp" "maybe param" "maybe type" "temp"
      (710998 'move' call_tmp[710995](225130 call getFieldIndex call_tmp[710990] s[225109]))
      unknown call_tmp[711000] "expr temp" "maybe param" "maybe type" "temp"
      (711003 'move' call_tmp[711000](225131 call getField x[225103] call_tmp[710995]))
      unknown call_tmp[711005] "expr temp" "maybe param" "maybe type" "temp"
      (711008 'move' call_tmp[711005](225133 call isType call_tmp[711000]))
      (575878 'move' tmp[575876](431729 call isTrue call_tmp[711005]))
      (575883 'move' tmp[575868](575880 '_paramFoldLogical' tmp[575869] tmp[575876]))
    }
    {
      (575888 'move' tmp[575868](575885 '_paramFoldLogical' tmp[575869] 0))
    }
    (748279 call chpl_statementLevelSymbol tmp[575868])
  }
  function getField[225158](const  ref arg x[225155]:_any[178](?), param arg s[225161]:string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532829] "RVV" "temp"
    unknown call_tmp[711010] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711013 'move' call_tmp[711010](464876 'typeof' x[225155]))
    unknown call_tmp[711015] "maybe param" "maybe type" "temp"
    (711018 'move' call_tmp[711015](225184 'field name to num' call_tmp[711010] s[225161]))
    unknown i[225185] "dead at end of block" "param"
    (546428 'init var' i[225185] call_tmp[711015])
    (225188 'end of statement')
    unknown call_tmp[711020] "expr temp" "maybe param" "maybe type" "temp"
    (711023 'move' call_tmp[711020](225192 call == i[225185] 0))
    unknown call_tmp[711025] "expr temp" "maybe param" "maybe type" "temp"
    (711028 'move' call_tmp[711025](225237 call _cond_test call_tmp[711020]))
    if call_tmp[711025]
    {
      unknown call_tmp[711030] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711033 'move' call_tmp[711030](464878 'typeof' x[225155]))
      unknown call_tmp[711035] "expr temp" "maybe param" "maybe type" "temp"
      (711038 'move' call_tmp[711035](225233 call _cast string[26] call_tmp[711030]))
      (225235 call compilerError "field " s[225161] " not found in " call_tmp[711035])
    }
    unknown call_tmp[711040] "expr temp" "maybe param" "maybe type" "temp"
    (711043 'move' call_tmp[711040](225246 'field by num' x[225155] i[225185]))
    (532834 'move' ret[532829](532833 'addr of' call_tmp[711040]))
    (532831 return ret[532829])
  }
  function isImplementedWithRecords[225255](arg t[225253]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[532838] "RVV" "param" "temp"
    unknown tmp[431746] "maybe param" "temp"
    (431757 'move' tmp[431746](225260 call isRangeType t[225253]))
    unknown call_tmp[711045] "expr temp" "maybe param" "maybe type" "temp"
    (711048 'move' call_tmp[711045](431759 call _cond_invalid tmp[431746]))
    if call_tmp[711045]
    {
      (431762 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[575895] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575896] "maybe param" "temp"
    unknown call_tmp[711050] "expr temp" "maybe param" "maybe type" "temp"
    (711053 'move' call_tmp[711050](431747 call isTrue tmp[431746]))
    (575901 'move' tmp[575896](575899 call _cond_test call_tmp[711050]))
    if tmp[575896]
    {
      (575906 'move' tmp[575895](575903 '_paramFoldLogical' tmp[575896] 1))
    }
    {
      unknown tmp[575908] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711055] "expr temp" "maybe param" "maybe type" "temp"
      (711058 'move' call_tmp[711055](225264 call isStringType t[225253]))
      (575910 'move' tmp[575908](431751 call isTrue call_tmp[711055]))
      (575915 'move' tmp[575895](575912 '_paramFoldLogical' tmp[575896] tmp[575908]))
    }
    (532843 'move' ret[532838](532842 'deref' tmp[575895]))
    (532840 return ret[532838])
  }
  function numImplementationFields[225276](arg t[225274]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[532847] "RVV" "param" "temp"
    unknown call_tmp[711060] "expr temp" "maybe param" "maybe type" "temp"
    (711063 'move' call_tmp[711060](225286 'num fields' t[225274]))
    (532853 'move' ret[532847](532852 'coerce' call_tmp[711060] int(64)[13]))
    (532849 return ret[532847])
  }
  where {
    (225282 call isImplementedWithRecords t[225274])
  }
  { scopeless type
    int(64)[13]
  }
  function getImplementationField[225301](const  ref arg x[225298]:_any[178](?), param arg i[225304]:int(64)[13]) type : _unknown[51] "no doc"
  {
    unknown ret[532857] "RVV" "temp" "type variable"
    unknown call_tmp[711065] "expr temp" "maybe param" "maybe type" "temp"
    (711068 'move' call_tmp[711065](225325 'field by num' x[225298] i[225304]))
    (532862 'move' ret[532857](532861 'deref' call_tmp[711065]))
    (532859 return ret[532857])
  }
  where {
    unknown tmp[431767] "maybe param" "temp"
    unknown call_tmp[711070] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711073 'move' call_tmp[711070](464880 'typeof' x[225298]))
    (431778 'move' tmp[431767](225310 call isImplementedWithRecords call_tmp[711070]))
    unknown call_tmp[711075] "expr temp" "maybe param" "maybe type" "temp"
    (711078 'move' call_tmp[711075](431780 call _cond_invalid tmp[431767]))
    if call_tmp[711075]
    {
      (431783 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575922] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575923] "maybe param" "temp"
    unknown call_tmp[711080] "expr temp" "maybe param" "maybe type" "temp"
    (711083 'move' call_tmp[711080](431768 call isTrue tmp[431767]))
    (575928 'move' tmp[575923](575926 call _cond_test call_tmp[711080]))
    if tmp[575923]
    {
      unknown tmp[575930] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711085] "expr temp" "maybe param" "maybe type" "temp"
      (711088 'move' call_tmp[711085](225316 'field by num' x[225298] i[225304]))
      unknown call_tmp[711090] "expr temp" "maybe param" "maybe type" "temp"
      (711093 'move' call_tmp[711090](225318 call isType call_tmp[711085]))
      (575932 'move' tmp[575930](431771 call isTrue call_tmp[711090]))
      (575937 'move' tmp[575922](575934 '_paramFoldLogical' tmp[575923] tmp[575930]))
    }
    {
      (575942 'move' tmp[575922](575939 '_paramFoldLogical' tmp[575923] 0))
    }
    (748281 call chpl_statementLevelSymbol tmp[575922])
  }
  function getImplementationField[225339](const  ref arg x[225336]:_any[178](?), param arg i[225342]:int(64)[13]) param : _unknown[51] "no doc"
  {
    unknown ret[532866] "RVV" "param" "temp"
    unknown call_tmp[711095] "expr temp" "maybe param" "maybe type" "temp"
    (711098 'move' call_tmp[711095](225363 'field by num' x[225336] i[225342]))
    (532871 'move' ret[532866](532870 'deref' call_tmp[711095]))
    (532868 return ret[532866])
  }
  where {
    unknown tmp[431788] "maybe param" "temp"
    unknown call_tmp[711100] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711103 'move' call_tmp[711100](464882 'typeof' x[225336]))
    (431799 'move' tmp[431788](225348 call isImplementedWithRecords call_tmp[711100]))
    unknown call_tmp[711105] "expr temp" "maybe param" "maybe type" "temp"
    (711108 'move' call_tmp[711105](431801 call _cond_invalid tmp[431788]))
    if call_tmp[711105]
    {
      (431804 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575949] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575950] "maybe param" "temp"
    unknown call_tmp[711110] "expr temp" "maybe param" "maybe type" "temp"
    (711113 'move' call_tmp[711110](431789 call isTrue tmp[431788]))
    (575955 'move' tmp[575950](575953 call _cond_test call_tmp[711110]))
    if tmp[575950]
    {
      unknown tmp[575957] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711115] "expr temp" "maybe param" "maybe type" "temp"
      (711118 'move' call_tmp[711115](225354 'field by num' x[225336] i[225342]))
      unknown call_tmp[711120] "expr temp" "maybe param" "maybe type" "temp"
      (711123 'move' call_tmp[711120](225356 call isParam call_tmp[711115]))
      (575959 'move' tmp[575957](431792 call isTrue call_tmp[711120]))
      (575964 'move' tmp[575949](575961 '_paramFoldLogical' tmp[575950] tmp[575957]))
    }
    {
      (575969 'move' tmp[575949](575966 '_paramFoldLogical' tmp[575950] 0))
    }
    (748283 call chpl_statementLevelSymbol tmp[575949])
  }
  function getImplementationField[225377](const  ref arg x[225374]:_any[178](?), param arg i[225380]:int(64)[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    unknown ret[532875] "RVV" "temp"
    unknown call_tmp[711125] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711128 'move' call_tmp[711125](464884 'typeof' x[225374]))
    unknown call_tmp[711130] "expr temp" "maybe param" "maybe type" "temp"
    (711133 'move' call_tmp[711130](225386 call isImplementedWithRecords call_tmp[711125]))
    unknown call_tmp[711135] "expr temp" "maybe param" "maybe type" "temp"
    (711138 'move' call_tmp[711135](225387 call ! call_tmp[711130]))
    unknown call_tmp[711140] "expr temp" "maybe param" "maybe type" "temp"
    (711143 'move' call_tmp[711140](225431 call _cond_test call_tmp[711135]))
    if call_tmp[711140]
    {
      unknown call_tmp[711145] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711148 'move' call_tmp[711145](464886 'typeof' x[225374]))
      unknown call_tmp[711150] "expr temp" "maybe param" "maybe type" "temp"
      (711153 'move' call_tmp[711150](225410 call _cast string[26] call_tmp[711145]))
      (225429 call compilerError "an argument of the type " call_tmp[711150] " is not valid for getImplementationField()")
    }
    unknown call_tmp[711155] "expr temp" "maybe param" "maybe type" "temp"
    (711158 'move' call_tmp[711155](225441 'field by num' x[225374] i[225380]))
    (532880 'move' ret[532875](532879 'addr of' call_tmp[711155]))
    (532877 return ret[532875])
  }
  function getFieldRef[225453](ref arg x[225450]:_any[178](?), param arg i[225456]:int(64)[13]) ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532884] "RVV" "temp"
    unknown call_tmp[711160] "expr temp" "maybe param" "maybe type" "temp"
    (711163 'move' call_tmp[711160](225464 call + i[225456] 1))
    unknown call_tmp[711165] "expr temp" "maybe param" "maybe type" "temp"
    (711168 'move' call_tmp[711165](225466 'field by num' x[225450] call_tmp[711160]))
    (532889 'move' ret[532884](532888 'addr of' call_tmp[711165]))
    (532886 return ret[532884])
  }
  function getFieldRef[225479](ref arg x[225476]:_any[178](?), param arg s[225482]:string[26]) ref : _unknown[51] "unsafe"
  {
    unknown ret[532893] "RVV" "temp"
    unknown call_tmp[711170] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711173 'move' call_tmp[711170](464888 'typeof' x[225476]))
    unknown call_tmp[711175] "maybe param" "maybe type" "temp"
    (711178 'move' call_tmp[711175](225489 'field name to num' call_tmp[711170] s[225482]))
    unknown i[225490] "dead at end of block" "param"
    (546430 'init var' i[225490] call_tmp[711175])
    (225493 'end of statement')
    unknown call_tmp[711180] "expr temp" "maybe param" "maybe type" "temp"
    (711183 'move' call_tmp[711180](225497 call == i[225490] 0))
    unknown call_tmp[711185] "expr temp" "maybe param" "maybe type" "temp"
    (711188 'move' call_tmp[711185](225510 call _cond_test call_tmp[711180]))
    if call_tmp[711185]
    {
      unknown call_tmp[711190] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711193 'move' call_tmp[711190](464890 'typeof' x[225476]))
      unknown call_tmp[711195] "expr temp" "maybe param" "maybe type" "temp"
      (711198 'move' call_tmp[711195](225506 call _cast string[26] call_tmp[711190]))
      (225508 call compilerError "field " s[225482] " not found in " call_tmp[711195])
    }
    unknown call_tmp[711200] "expr temp" "maybe param" "maybe type" "temp"
    (711203 'move' call_tmp[711200](225519 'field by num' x[225476] i[225490]))
    (532898 'move' ret[532893](532897 'addr of' call_tmp[711200]))
    (532895 return ret[532893])
  }
  function getFieldIndex[225528](arg t[225526]:_any[178](?), param arg s[225531]:string[26]) param : _unknown[51]
  {
    unknown ret[532902] "RVV" "param" "temp"
    unknown call_tmp[711205] "expr temp" "maybe param" "maybe type" "temp"
    (711208 'move' call_tmp[711205](225540 call checkQueryT t[225526]))
    unknown call_tmp[711210] "expr temp" "maybe param" "maybe type" "temp"
    (711213 'move' call_tmp[711210](225542 'field name to num' call_tmp[711205] s[225531]))
    unknown call_tmp[711215] "expr temp" "maybe param" "maybe type" "temp"
    (711218 'move' call_tmp[711215](225544 call - call_tmp[711210] 1))
    (532908 'move' ret[532902](532907 'coerce' call_tmp[711215] int(64)[13]))
    (532904 return ret[532902])
  }
  { scopeless type
    int(64)[13]
  }
  function hasField[225556](arg t[225554]:_any[178](?), param arg s[225559]:string[26]) param : _unknown[51]
  {
    unknown ret[532912] "RVV" "param" "temp"
    unknown call_tmp[711220] "expr temp" "maybe param" "maybe type" "temp"
    (711223 'move' call_tmp[711220](225567 call getFieldIndex t[225554] s[225559]))
    unknown call_tmp[711225] "expr temp" "maybe param" "maybe type" "temp"
    (711228 'move' call_tmp[711225](225569 call >= call_tmp[711220] 0))
    (532918 'move' ret[532912](532917 'coerce' call_tmp[711225] bool[10]))
    (532914 return ret[532912])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225581](arg t[225579]:_any[178](?), param arg i[225584]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532922] "RVV" "param" "temp"
    unknown call_tmp[711230] "expr temp" "maybe param" "maybe type" "temp"
    (711233 'move' call_tmp[711230](225609 call checkQueryT t[225579]))
    unknown call_tmp[711235] "expr temp" "maybe param" "maybe type" "temp"
    (711238 'move' call_tmp[711235](225614 call checkQueryT t[225579]))
    unknown call_tmp[711240] "expr temp" "maybe param" "maybe type" "temp"
    (711243 'move' call_tmp[711240](225617 call getFieldName call_tmp[711235] i[225584]))
    unknown call_tmp[711245] "expr temp" "maybe param" "maybe type" "temp"
    (711248 'move' call_tmp[711245](225618 'is bound' call_tmp[711230] call_tmp[711240]))
    (532928 'move' ret[532922](532927 'coerce' call_tmp[711245] bool[10]))
    (532924 return ret[532922])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225629](arg t[225627]:_any[178](?), param arg s[225632]:string[26]) param : _unknown[51]
  {
    unknown ret[532932] "RVV" "param" "temp"
    unknown call_tmp[711250] "expr temp" "maybe param" "maybe type" "temp"
    (711253 'move' call_tmp[711250](225641 call checkQueryT t[225627]))
    unknown call_tmp[711255] "expr temp" "maybe param" "maybe type" "temp"
    (711258 'move' call_tmp[711255](225643 'is bound' call_tmp[711250] s[225632]))
    (532938 'move' ret[532932](532937 'coerce' call_tmp[711255] bool[10]))
    (532934 return ret[532932])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225656](param arg fname[225653]:string[26]) param : _unknown[51]
  {
    unknown ret[532942] "RVV" "param" "temp"
    unknown call_tmp[711260] "expr temp" "maybe param" "maybe type" "temp"
    (711263 'move' call_tmp[711260](225678 'call and fn resolves' fname[225653]))
    (532948 'move' ret[532942](532947 'coerce' call_tmp[711260] bool[10]))
    (532944 return ret[532942])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225691](param arg fname[225688]:string[26], arg args[225694]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[532952] "RVV" "param" "temp"
    unknown call_tmp[711265] "expr temp" "maybe param" "maybe type" "temp"
    (711268 'move' call_tmp[711265](225703 'call and fn resolves' fname[225688](225702 'expand_tuple' args[225694])))
    (532958 'move' ret[532952](532957 'coerce' call_tmp[711265] bool[10]))
    (532954 return ret[532952])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225714](arg obj[225712]:_any[178](?), param arg fname[225717]:string[26]) param : _unknown[51]
  {
    unknown ret[532962] "RVV" "param" "temp"
    unknown call_tmp[711270] "expr temp" "maybe param" "maybe type" "temp"
    (711273 'move' call_tmp[711270](225741 'method call and fn resolves' obj[225712] fname[225717]))
    (532968 'move' ret[532962](532967 'coerce' call_tmp[711270] bool[10]))
    (532964 return ret[532962])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225752](arg obj[225750]:_any[178](?), param arg fname[225755]:string[26], arg args[225759]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[532972] "RVV" "param" "temp"
    unknown call_tmp[711275] "expr temp" "maybe param" "maybe type" "temp"
    (711278 'move' call_tmp[711275](225769 'method call and fn resolves' obj[225750] fname[225755](225768 'expand_tuple' args[225759])))
    (532978 'move' ret[532972](532977 'coerce' call_tmp[711275] bool[10]))
    (532974 return ret[532972])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225780](arg t[225778]:_any[178](?), param arg fname[225783]:string[26]) param : _unknown[51]
  {
    unknown ret[532982] "RVV" "param" "temp"
    unknown call_tmp[711280] "expr temp" "maybe param" "maybe type" "temp"
    (711283 'move' call_tmp[711280](225791 'method call and fn resolves' t[225778] fname[225783]))
    (532988 'move' ret[532982](532987 'coerce' call_tmp[711280] bool[10]))
    (532984 return ret[532982])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225802](arg t[225800]:_any[178](?), param arg fname[225805]:string[26], arg args[225809]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[532992] "RVV" "param" "temp"
    unknown call_tmp[711285] "expr temp" "maybe param" "maybe type" "temp"
    (711288 'move' call_tmp[711285](225819 'method call and fn resolves' t[225800] fname[225805](225818 'expand_tuple' args[225809])))
    (532998 'move' ret[532992](532997 'coerce' call_tmp[711285] bool[10]))
    (532994 return ret[532992])
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[225828]() param : _unknown[51] "get line number" "no return value for void"
  {
    unknown ret[533002] "RVV" "param" "temp"
    (533004 return ret[533002])
  }
  { scopeless type
    int(64)[13]
  }
  function getFileName[225837]() param : _unknown[51] "get file name" "no return value for void"
  {
    unknown ret[533008] "RVV" "param" "temp"
    (533010 return ret[533008])
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[225846]() param : _unknown[51] "get function name" "no return value for void"
  {
    unknown ret[533014] "RVV" "param" "temp"
    (533016 return ret[533014])
  }
  { scopeless type
    string[26]
  }
  function getModuleName[225855]() param : _unknown[51] "get module name" "no return value for void"
  {
    unknown ret[533020] "RVV" "param" "temp"
    (533022 return ret[533020])
  }
  { scopeless type
    string[26]
  }
  (355211 'used modules list'(352918 'use' ChapelStandard[20264]))
}