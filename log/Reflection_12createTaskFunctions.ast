AST dump for Reflection after pass createTaskFunctions.
Module use list: ChapelStandard 

{
  function chpl__init_Reflection[416150]() : void[4] "insert line file info" "module init"
  {
    (533170 return _void[55])
  }
  function checkQueryT[224908](arg t[224906]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[532894] "RVV" "temp" "type variable"
    unknown call_tmp[710844] "expr temp" "maybe param" "maybe type" "temp"
    (710847 'move' call_tmp[710844](224913 call isClassType t[224906]))
    unknown call_tmp[710849] "expr temp" "maybe param" "maybe type" "temp"
    (710852 'move' call_tmp[710849](224966 call _cond_test call_tmp[710844]))
    if call_tmp[710849]
    {
      unknown call_tmp[710854] "expr temp" "maybe param" "maybe type" "temp"
      (710857 'move' call_tmp[710854](224917 call _cast _borrowedNonNilable[214](?) t[224906]))
      (532899 'move' ret[532894](532898 'deref' call_tmp[710854]))
      gotoReturn _end_checkQueryT[532892] _end_checkQueryT[532892]
    }
    {
      unknown tmp[431731] "maybe param" "temp"
      (431742 'move' tmp[431731](224924 call isRecordType t[224906]))
      unknown call_tmp[710859] "expr temp" "maybe param" "maybe type" "temp"
      (710862 'move' call_tmp[710859](431744 call _cond_invalid tmp[431731]))
      if call_tmp[710859]
      {
        (431747 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[575835] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[575836] "maybe param" "temp"
      unknown call_tmp[710864] "expr temp" "maybe param" "maybe type" "temp"
      (710867 'move' call_tmp[710864](431732 call isTrue tmp[431731]))
      (575841 'move' tmp[575836](575839 call _cond_test call_tmp[710864]))
      if tmp[575836]
      {
        (575846 'move' tmp[575835](575843 '_paramFoldLogical' tmp[575836] 1))
      }
      {
        unknown tmp[575848] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[710869] "expr temp" "maybe param" "maybe type" "temp"
        (710872 'move' call_tmp[710869](224928 call isUnionType t[224906]))
        (575850 'move' tmp[575848](431736 call isTrue call_tmp[710869]))
        (575855 'move' tmp[575835](575852 '_paramFoldLogical' tmp[575836] tmp[575848]))
      }
      unknown call_tmp[710874] "expr temp" "maybe param" "maybe type" "temp"
      (710877 'move' call_tmp[710874](224960 call _cond_test tmp[575835]))
      if call_tmp[710874]
      {
        (532904 'move' ret[532894](532903 'deref' t[224906]))
        gotoReturn _end_checkQueryT[532892] _end_checkQueryT[532892]
      }
      {
        unknown call_tmp[710879] "expr temp" "maybe param" "maybe type" "temp"
        (710882 'move' call_tmp[710879](224937 call _cast string[26] t[224906]))
        (224958 call compilerError call_tmp[710879] " is not a class, record, or union type" 2)
      }
    }
    label _end_checkQueryT[532892]
    (532896 return ret[532894])
  }
  function numFields[224980](arg t[224978]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[532910] "RVV" "param" "temp"
    unknown call_tmp[710884] "expr temp" "maybe param" "maybe type" "temp"
    (710887 'move' call_tmp[710884](224988 call checkQueryT t[224978]))
    unknown call_tmp[710889] "expr temp" "maybe param" "maybe type" "temp"
    (710892 'move' call_tmp[710889](224989 'num fields' call_tmp[710884]))
    (532916 'move' ret[532910](532915 'coerce' call_tmp[710889] int(64)[13]))
    (532912 return ret[532910])
  }
  { scopeless type
    int(64)[13]
  }
  function getFieldName[225000](arg t[224998]:_any[178](?), param arg i[225003]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532920] "RVV" "param" "temp"
    unknown call_tmp[710894] "expr temp" "maybe param" "maybe type" "temp"
    (710897 'move' call_tmp[710894](225012 call checkQueryT t[224998]))
    unknown call_tmp[710899] "expr temp" "maybe param" "maybe type" "temp"
    (710902 'move' call_tmp[710899](225015 call + i[225003] 1))
    unknown call_tmp[710904] "expr temp" "maybe param" "maybe type" "temp"
    (710907 'move' call_tmp[710904](225017 'field num to name' call_tmp[710894] call_tmp[710899]))
    (532926 'move' ret[532920](532925 'coerce' call_tmp[710904] string[26]))
    (532922 return ret[532920])
  }
  { scopeless type
    string[26]
  }
  function getField[225031](const  ref arg x[225028]:_any[178](?), param arg i[225034]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532930] "RVV" "param" "temp"
    unknown call_tmp[710909] "expr temp" "maybe param" "maybe type" "temp"
    (710912 'move' call_tmp[710909](225068 call + i[225034] 1))
    unknown call_tmp[710914] "expr temp" "maybe param" "maybe type" "temp"
    (710917 'move' call_tmp[710914](225070 'field by num' x[225028] call_tmp[710909]))
    (532935 'move' ret[532930](532934 'deref' call_tmp[710914]))
    (532932 return ret[532930])
  }
  where {
    unknown tmp[431752] "maybe param" "temp"
    unknown tmp[431773] "maybe param" "temp"
    (431784 'move' tmp[431773](225039 call >= i[225034] 0))
    unknown call_tmp[710919] "expr temp" "maybe param" "maybe type" "temp"
    (710922 'move' call_tmp[710919](431786 call _cond_invalid tmp[431773]))
    if call_tmp[710919]
    {
      (431789 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575862] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575863] "maybe param" "temp"
    unknown call_tmp[710924] "expr temp" "maybe param" "maybe type" "temp"
    (710927 'move' call_tmp[710924](431774 call isTrue tmp[431773]))
    (575868 'move' tmp[575863](575866 call _cond_test call_tmp[710924]))
    if tmp[575863]
    {
      unknown tmp[575870] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710929] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710932 'move' call_tmp[710929](464992 'typeof' x[225028]))
      unknown call_tmp[710934] "expr temp" "maybe param" "maybe type" "temp"
      (710937 'move' call_tmp[710934](225045 call numFields call_tmp[710929]))
      unknown call_tmp[710939] "expr temp" "maybe param" "maybe type" "temp"
      (710942 'move' call_tmp[710939](225046 call < i[225034] call_tmp[710934]))
      (575872 'move' tmp[575870](431777 call isTrue call_tmp[710939]))
      (575877 'move' tmp[575862](575874 '_paramFoldLogical' tmp[575863] tmp[575870]))
    }
    {
      (575882 'move' tmp[575862](575879 '_paramFoldLogical' tmp[575863] 0))
    }
    (431763 'move' tmp[431752] tmp[575862])
    unknown call_tmp[710944] "expr temp" "maybe param" "maybe type" "temp"
    (710947 'move' call_tmp[710944](431765 call _cond_invalid tmp[431752]))
    if call_tmp[710944]
    {
      (431768 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575889] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575890] "maybe param" "temp"
    unknown call_tmp[710949] "expr temp" "maybe param" "maybe type" "temp"
    (710952 'move' call_tmp[710949](431753 call isTrue tmp[431752]))
    (575895 'move' tmp[575890](575893 call _cond_test call_tmp[710949]))
    if tmp[575890]
    {
      unknown tmp[575897] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710954] "expr temp" "maybe param" "maybe type" "temp"
      (710957 'move' call_tmp[710954](225056 call + i[225034] 1))
      unknown call_tmp[710959] "expr temp" "maybe param" "maybe type" "temp"
      (710962 'move' call_tmp[710959](225058 'field by num' x[225028] call_tmp[710954]))
      unknown call_tmp[710964] "expr temp" "maybe param" "maybe type" "temp"
      (710967 'move' call_tmp[710964](225060 call isParam call_tmp[710959]))
      (575899 'move' tmp[575897](431756 call isTrue call_tmp[710964]))
      (575904 'move' tmp[575889](575901 '_paramFoldLogical' tmp[575890] tmp[575897]))
    }
    {
      (575909 'move' tmp[575889](575906 '_paramFoldLogical' tmp[575890] 0))
    }
    (748423 call chpl_statementLevelSymbol tmp[575889])
  }
  function getField[225084](const  ref arg x[225081]:_any[178](?), param arg i[225087]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[532939] "RVV" "temp" "type variable"
    unknown call_tmp[710969] "expr temp" "maybe param" "maybe type" "temp"
    (710972 'move' call_tmp[710969](225121 call + i[225087] 1))
    unknown call_tmp[710974] "expr temp" "maybe param" "maybe type" "temp"
    (710977 'move' call_tmp[710974](225123 'field by num' x[225081] call_tmp[710969]))
    (532944 'move' ret[532939](532943 'deref' call_tmp[710974]))
    (532941 return ret[532939])
  }
  where {
    unknown tmp[431794] "maybe param" "temp"
    unknown tmp[431815] "maybe param" "temp"
    (431826 'move' tmp[431815](225092 call >= i[225087] 0))
    unknown call_tmp[710979] "expr temp" "maybe param" "maybe type" "temp"
    (710982 'move' call_tmp[710979](431828 call _cond_invalid tmp[431815]))
    if call_tmp[710979]
    {
      (431831 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575916] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575917] "maybe param" "temp"
    unknown call_tmp[710984] "expr temp" "maybe param" "maybe type" "temp"
    (710987 'move' call_tmp[710984](431816 call isTrue tmp[431815]))
    (575922 'move' tmp[575917](575920 call _cond_test call_tmp[710984]))
    if tmp[575917]
    {
      unknown tmp[575924] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710989] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710992 'move' call_tmp[710989](464994 'typeof' x[225081]))
      unknown call_tmp[710994] "expr temp" "maybe param" "maybe type" "temp"
      (710997 'move' call_tmp[710994](225098 call numFields call_tmp[710989]))
      unknown call_tmp[710999] "expr temp" "maybe param" "maybe type" "temp"
      (711002 'move' call_tmp[710999](225099 call < i[225087] call_tmp[710994]))
      (575926 'move' tmp[575924](431819 call isTrue call_tmp[710999]))
      (575931 'move' tmp[575916](575928 '_paramFoldLogical' tmp[575917] tmp[575924]))
    }
    {
      (575936 'move' tmp[575916](575933 '_paramFoldLogical' tmp[575917] 0))
    }
    (431805 'move' tmp[431794] tmp[575916])
    unknown call_tmp[711004] "expr temp" "maybe param" "maybe type" "temp"
    (711007 'move' call_tmp[711004](431807 call _cond_invalid tmp[431794]))
    if call_tmp[711004]
    {
      (431810 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575943] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575944] "maybe param" "temp"
    unknown call_tmp[711009] "expr temp" "maybe param" "maybe type" "temp"
    (711012 'move' call_tmp[711009](431795 call isTrue tmp[431794]))
    (575949 'move' tmp[575944](575947 call _cond_test call_tmp[711009]))
    if tmp[575944]
    {
      unknown tmp[575951] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711014] "expr temp" "maybe param" "maybe type" "temp"
      (711017 'move' call_tmp[711014](225109 call + i[225087] 1))
      unknown call_tmp[711019] "expr temp" "maybe param" "maybe type" "temp"
      (711022 'move' call_tmp[711019](225111 'field by num' x[225081] call_tmp[711014]))
      unknown call_tmp[711024] "expr temp" "maybe param" "maybe type" "temp"
      (711027 'move' call_tmp[711024](225113 call isType call_tmp[711019]))
      (575953 'move' tmp[575951](431798 call isTrue call_tmp[711024]))
      (575958 'move' tmp[575943](575955 '_paramFoldLogical' tmp[575944] tmp[575951]))
    }
    {
      (575963 'move' tmp[575943](575960 '_paramFoldLogical' tmp[575944] 0))
    }
    (748425 call chpl_statementLevelSymbol tmp[575943])
  }
  function getField[225137](const  ref arg x[225134]:_any[178](?), param arg i[225140]:int(64)[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532948] "RVV" "temp"
    unknown call_tmp[711029] "expr temp" "maybe param" "maybe type" "temp"
    (711032 'move' call_tmp[711029](225148 call + i[225140] 1))
    unknown call_tmp[711034] "expr temp" "maybe param" "maybe type" "temp"
    (711037 'move' call_tmp[711034](225150 'field by num' x[225134] call_tmp[711029]))
    (532953 'move' ret[532948](532952 'addr of' call_tmp[711034]))
    (532950 return ret[532948])
  }
  function getField[225163](const  ref arg x[225160]:_any[178](?), param arg s[225166]:string[26]) param : _unknown[51]
  {
    unknown ret[532957] "RVV" "param" "temp"
    unknown call_tmp[711039] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711042 'move' call_tmp[711039](464996 'typeof' x[225160]))
    unknown call_tmp[711044] "expr temp" "maybe param" "maybe type" "temp"
    (711047 'move' call_tmp[711044](225200 call getFieldIndex call_tmp[711039] s[225166]))
    unknown call_tmp[711049] "expr temp" "maybe param" "maybe type" "temp"
    (711052 'move' call_tmp[711049](225201 call getField x[225160] call_tmp[711044]))
    (532962 'move' ret[532957](532961 'deref' call_tmp[711049]))
    (532959 return ret[532957])
  }
  where {
    unknown tmp[431836] "maybe param" "temp"
    unknown call_tmp[711054] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711057 'move' call_tmp[711054](464998 'typeof' x[225160]))
    unknown call_tmp[711059] "expr temp" "maybe param" "maybe type" "temp"
    (711062 'move' call_tmp[711059](225173 call getFieldIndex call_tmp[711054] s[225166]))
    unknown call_tmp[711064] "expr temp" "maybe param" "maybe type" "temp"
    (711067 'move' call_tmp[711064](225175 call - 1))
    (431847 'move' tmp[431836](225177 call != call_tmp[711059] call_tmp[711064]))
    unknown call_tmp[711069] "expr temp" "maybe param" "maybe type" "temp"
    (711072 'move' call_tmp[711069](431849 call _cond_invalid tmp[431836]))
    if call_tmp[711069]
    {
      (431852 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575970] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575971] "maybe param" "temp"
    unknown call_tmp[711074] "expr temp" "maybe param" "maybe type" "temp"
    (711077 'move' call_tmp[711074](431837 call isTrue tmp[431836]))
    (575976 'move' tmp[575971](575974 call _cond_test call_tmp[711074]))
    if tmp[575971]
    {
      unknown tmp[575978] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711079] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711082 'move' call_tmp[711079](465000 'typeof' x[225160]))
      unknown call_tmp[711084] "expr temp" "maybe param" "maybe type" "temp"
      (711087 'move' call_tmp[711084](225187 call getFieldIndex call_tmp[711079] s[225166]))
      unknown call_tmp[711089] "expr temp" "maybe param" "maybe type" "temp"
      (711092 'move' call_tmp[711089](225188 call getField x[225160] call_tmp[711084]))
      unknown call_tmp[711094] "expr temp" "maybe param" "maybe type" "temp"
      (711097 'move' call_tmp[711094](225190 call isParam call_tmp[711089]))
      (575980 'move' tmp[575978](431840 call isTrue call_tmp[711094]))
      (575985 'move' tmp[575970](575982 '_paramFoldLogical' tmp[575971] tmp[575978]))
    }
    {
      (575990 'move' tmp[575970](575987 '_paramFoldLogical' tmp[575971] 0))
    }
    (748427 call chpl_statementLevelSymbol tmp[575970])
  }
  function getField[225215](const  ref arg x[225212]:_any[178](?), param arg s[225218]:string[26]) type : _unknown[51]
  {
    unknown ret[532966] "RVV" "temp" "type variable"
    unknown call_tmp[711099] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711102 'move' call_tmp[711099](465002 'typeof' x[225212]))
    unknown call_tmp[711104] "expr temp" "maybe param" "maybe type" "temp"
    (711107 'move' call_tmp[711104](225252 call getFieldIndex call_tmp[711099] s[225218]))
    unknown call_tmp[711109] "expr temp" "maybe param" "maybe type" "temp"
    (711112 'move' call_tmp[711109](225253 call getField x[225212] call_tmp[711104]))
    (532971 'move' ret[532966](532970 'deref' call_tmp[711109]))
    (532968 return ret[532966])
  }
  where {
    unknown tmp[431857] "maybe param" "temp"
    unknown call_tmp[711114] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711117 'move' call_tmp[711114](465004 'typeof' x[225212]))
    unknown call_tmp[711119] "expr temp" "maybe param" "maybe type" "temp"
    (711122 'move' call_tmp[711119](225225 call getFieldIndex call_tmp[711114] s[225218]))
    unknown call_tmp[711124] "expr temp" "maybe param" "maybe type" "temp"
    (711127 'move' call_tmp[711124](225227 call - 1))
    (431868 'move' tmp[431857](225229 call != call_tmp[711119] call_tmp[711124]))
    unknown call_tmp[711129] "expr temp" "maybe param" "maybe type" "temp"
    (711132 'move' call_tmp[711129](431870 call _cond_invalid tmp[431857]))
    if call_tmp[711129]
    {
      (431873 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575997] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575998] "maybe param" "temp"
    unknown call_tmp[711134] "expr temp" "maybe param" "maybe type" "temp"
    (711137 'move' call_tmp[711134](431858 call isTrue tmp[431857]))
    (576003 'move' tmp[575998](576001 call _cond_test call_tmp[711134]))
    if tmp[575998]
    {
      unknown tmp[576005] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711139] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711142 'move' call_tmp[711139](465006 'typeof' x[225212]))
      unknown call_tmp[711144] "expr temp" "maybe param" "maybe type" "temp"
      (711147 'move' call_tmp[711144](225239 call getFieldIndex call_tmp[711139] s[225218]))
      unknown call_tmp[711149] "expr temp" "maybe param" "maybe type" "temp"
      (711152 'move' call_tmp[711149](225240 call getField x[225212] call_tmp[711144]))
      unknown call_tmp[711154] "expr temp" "maybe param" "maybe type" "temp"
      (711157 'move' call_tmp[711154](225242 call isType call_tmp[711149]))
      (576007 'move' tmp[576005](431861 call isTrue call_tmp[711154]))
      (576012 'move' tmp[575997](576009 '_paramFoldLogical' tmp[575998] tmp[576005]))
    }
    {
      (576017 'move' tmp[575997](576014 '_paramFoldLogical' tmp[575998] 0))
    }
    (748429 call chpl_statementLevelSymbol tmp[575997])
  }
  function getField[225267](const  ref arg x[225264]:_any[178](?), param arg s[225270]:string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532975] "RVV" "temp"
    unknown call_tmp[711159] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711162 'move' call_tmp[711159](465008 'typeof' x[225264]))
    unknown call_tmp[711164] "maybe param" "maybe type" "temp"
    (711167 'move' call_tmp[711164](225293 'field name to num' call_tmp[711159] s[225270]))
    unknown i[225294] "dead at end of block" "param"
    (546557 'init var' i[225294] call_tmp[711164])
    (225297 'end of statement')
    unknown call_tmp[711169] "expr temp" "maybe param" "maybe type" "temp"
    (711172 'move' call_tmp[711169](225301 call == i[225294] 0))
    unknown call_tmp[711174] "expr temp" "maybe param" "maybe type" "temp"
    (711177 'move' call_tmp[711174](225346 call _cond_test call_tmp[711169]))
    if call_tmp[711174]
    {
      unknown call_tmp[711179] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711182 'move' call_tmp[711179](465010 'typeof' x[225264]))
      unknown call_tmp[711184] "expr temp" "maybe param" "maybe type" "temp"
      (711187 'move' call_tmp[711184](225342 call _cast string[26] call_tmp[711179]))
      (225344 call compilerError "field " s[225270] " not found in " call_tmp[711184])
    }
    unknown call_tmp[711189] "expr temp" "maybe param" "maybe type" "temp"
    (711192 'move' call_tmp[711189](225355 'field by num' x[225264] i[225294]))
    (532980 'move' ret[532975](532979 'addr of' call_tmp[711189]))
    (532977 return ret[532975])
  }
  function isImplementedWithRecords[225364](arg t[225362]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[532984] "RVV" "param" "temp"
    unknown tmp[431878] "maybe param" "temp"
    (431889 'move' tmp[431878](225369 call isRangeType t[225362]))
    unknown call_tmp[711194] "expr temp" "maybe param" "maybe type" "temp"
    (711197 'move' call_tmp[711194](431891 call _cond_invalid tmp[431878]))
    if call_tmp[711194]
    {
      (431894 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[576024] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576025] "maybe param" "temp"
    unknown call_tmp[711199] "expr temp" "maybe param" "maybe type" "temp"
    (711202 'move' call_tmp[711199](431879 call isTrue tmp[431878]))
    (576030 'move' tmp[576025](576028 call _cond_test call_tmp[711199]))
    if tmp[576025]
    {
      (576035 'move' tmp[576024](576032 '_paramFoldLogical' tmp[576025] 1))
    }
    {
      unknown tmp[576037] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711204] "expr temp" "maybe param" "maybe type" "temp"
      (711207 'move' call_tmp[711204](225373 call isStringType t[225362]))
      (576039 'move' tmp[576037](431883 call isTrue call_tmp[711204]))
      (576044 'move' tmp[576024](576041 '_paramFoldLogical' tmp[576025] tmp[576037]))
    }
    (532989 'move' ret[532984](532988 'deref' tmp[576024]))
    (532986 return ret[532984])
  }
  function numImplementationFields[225385](arg t[225383]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[532993] "RVV" "param" "temp"
    unknown call_tmp[711209] "expr temp" "maybe param" "maybe type" "temp"
    (711212 'move' call_tmp[711209](225395 'num fields' t[225383]))
    (532999 'move' ret[532993](532998 'coerce' call_tmp[711209] int(64)[13]))
    (532995 return ret[532993])
  }
  where {
    (225391 call isImplementedWithRecords t[225383])
  }
  { scopeless type
    int(64)[13]
  }
  function getImplementationField[225410](const  ref arg x[225407]:_any[178](?), param arg i[225413]:int(64)[13]) type : _unknown[51] "no doc"
  {
    unknown ret[533003] "RVV" "temp" "type variable"
    unknown call_tmp[711214] "expr temp" "maybe param" "maybe type" "temp"
    (711217 'move' call_tmp[711214](225434 'field by num' x[225407] i[225413]))
    (533008 'move' ret[533003](533007 'deref' call_tmp[711214]))
    (533005 return ret[533003])
  }
  where {
    unknown tmp[431899] "maybe param" "temp"
    unknown call_tmp[711219] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711222 'move' call_tmp[711219](465012 'typeof' x[225407]))
    (431910 'move' tmp[431899](225419 call isImplementedWithRecords call_tmp[711219]))
    unknown call_tmp[711224] "expr temp" "maybe param" "maybe type" "temp"
    (711227 'move' call_tmp[711224](431912 call _cond_invalid tmp[431899]))
    if call_tmp[711224]
    {
      (431915 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576051] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576052] "maybe param" "temp"
    unknown call_tmp[711229] "expr temp" "maybe param" "maybe type" "temp"
    (711232 'move' call_tmp[711229](431900 call isTrue tmp[431899]))
    (576057 'move' tmp[576052](576055 call _cond_test call_tmp[711229]))
    if tmp[576052]
    {
      unknown tmp[576059] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711234] "expr temp" "maybe param" "maybe type" "temp"
      (711237 'move' call_tmp[711234](225425 'field by num' x[225407] i[225413]))
      unknown call_tmp[711239] "expr temp" "maybe param" "maybe type" "temp"
      (711242 'move' call_tmp[711239](225427 call isType call_tmp[711234]))
      (576061 'move' tmp[576059](431903 call isTrue call_tmp[711239]))
      (576066 'move' tmp[576051](576063 '_paramFoldLogical' tmp[576052] tmp[576059]))
    }
    {
      (576071 'move' tmp[576051](576068 '_paramFoldLogical' tmp[576052] 0))
    }
    (748431 call chpl_statementLevelSymbol tmp[576051])
  }
  function getImplementationField[225448](const  ref arg x[225445]:_any[178](?), param arg i[225451]:int(64)[13]) param : _unknown[51] "no doc"
  {
    unknown ret[533012] "RVV" "param" "temp"
    unknown call_tmp[711244] "expr temp" "maybe param" "maybe type" "temp"
    (711247 'move' call_tmp[711244](225472 'field by num' x[225445] i[225451]))
    (533017 'move' ret[533012](533016 'deref' call_tmp[711244]))
    (533014 return ret[533012])
  }
  where {
    unknown tmp[431920] "maybe param" "temp"
    unknown call_tmp[711249] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711252 'move' call_tmp[711249](465014 'typeof' x[225445]))
    (431931 'move' tmp[431920](225457 call isImplementedWithRecords call_tmp[711249]))
    unknown call_tmp[711254] "expr temp" "maybe param" "maybe type" "temp"
    (711257 'move' call_tmp[711254](431933 call _cond_invalid tmp[431920]))
    if call_tmp[711254]
    {
      (431936 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576078] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576079] "maybe param" "temp"
    unknown call_tmp[711259] "expr temp" "maybe param" "maybe type" "temp"
    (711262 'move' call_tmp[711259](431921 call isTrue tmp[431920]))
    (576084 'move' tmp[576079](576082 call _cond_test call_tmp[711259]))
    if tmp[576079]
    {
      unknown tmp[576086] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711264] "expr temp" "maybe param" "maybe type" "temp"
      (711267 'move' call_tmp[711264](225463 'field by num' x[225445] i[225451]))
      unknown call_tmp[711269] "expr temp" "maybe param" "maybe type" "temp"
      (711272 'move' call_tmp[711269](225465 call isParam call_tmp[711264]))
      (576088 'move' tmp[576086](431924 call isTrue call_tmp[711269]))
      (576093 'move' tmp[576078](576090 '_paramFoldLogical' tmp[576079] tmp[576086]))
    }
    {
      (576098 'move' tmp[576078](576095 '_paramFoldLogical' tmp[576079] 0))
    }
    (748433 call chpl_statementLevelSymbol tmp[576078])
  }
  function getImplementationField[225486](const  ref arg x[225483]:_any[178](?), param arg i[225489]:int(64)[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    unknown ret[533021] "RVV" "temp"
    unknown call_tmp[711274] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711277 'move' call_tmp[711274](465016 'typeof' x[225483]))
    unknown call_tmp[711279] "expr temp" "maybe param" "maybe type" "temp"
    (711282 'move' call_tmp[711279](225495 call isImplementedWithRecords call_tmp[711274]))
    unknown call_tmp[711284] "expr temp" "maybe param" "maybe type" "temp"
    (711287 'move' call_tmp[711284](225496 call ! call_tmp[711279]))
    unknown call_tmp[711289] "expr temp" "maybe param" "maybe type" "temp"
    (711292 'move' call_tmp[711289](225540 call _cond_test call_tmp[711284]))
    if call_tmp[711289]
    {
      unknown call_tmp[711294] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711297 'move' call_tmp[711294](465018 'typeof' x[225483]))
      unknown call_tmp[711299] "expr temp" "maybe param" "maybe type" "temp"
      (711302 'move' call_tmp[711299](225519 call _cast string[26] call_tmp[711294]))
      (225538 call compilerError "an argument of the type " call_tmp[711299] " is not valid for getImplementationField()")
    }
    unknown call_tmp[711304] "expr temp" "maybe param" "maybe type" "temp"
    (711307 'move' call_tmp[711304](225550 'field by num' x[225483] i[225489]))
    (533026 'move' ret[533021](533025 'addr of' call_tmp[711304]))
    (533023 return ret[533021])
  }
  function getFieldRef[225562](ref arg x[225559]:_any[178](?), param arg i[225565]:int(64)[13]) ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[533030] "RVV" "temp"
    unknown call_tmp[711309] "expr temp" "maybe param" "maybe type" "temp"
    (711312 'move' call_tmp[711309](225573 call + i[225565] 1))
    unknown call_tmp[711314] "expr temp" "maybe param" "maybe type" "temp"
    (711317 'move' call_tmp[711314](225575 'field by num' x[225559] call_tmp[711309]))
    (533035 'move' ret[533030](533034 'addr of' call_tmp[711314]))
    (533032 return ret[533030])
  }
  function getFieldRef[225588](ref arg x[225585]:_any[178](?), param arg s[225591]:string[26]) ref : _unknown[51] "unsafe"
  {
    unknown ret[533039] "RVV" "temp"
    unknown call_tmp[711319] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711322 'move' call_tmp[711319](465020 'typeof' x[225585]))
    unknown call_tmp[711324] "maybe param" "maybe type" "temp"
    (711327 'move' call_tmp[711324](225598 'field name to num' call_tmp[711319] s[225591]))
    unknown i[225599] "dead at end of block" "param"
    (546559 'init var' i[225599] call_tmp[711324])
    (225602 'end of statement')
    unknown call_tmp[711329] "expr temp" "maybe param" "maybe type" "temp"
    (711332 'move' call_tmp[711329](225606 call == i[225599] 0))
    unknown call_tmp[711334] "expr temp" "maybe param" "maybe type" "temp"
    (711337 'move' call_tmp[711334](225619 call _cond_test call_tmp[711329]))
    if call_tmp[711334]
    {
      unknown call_tmp[711339] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711342 'move' call_tmp[711339](465022 'typeof' x[225585]))
      unknown call_tmp[711344] "expr temp" "maybe param" "maybe type" "temp"
      (711347 'move' call_tmp[711344](225615 call _cast string[26] call_tmp[711339]))
      (225617 call compilerError "field " s[225591] " not found in " call_tmp[711344])
    }
    unknown call_tmp[711349] "expr temp" "maybe param" "maybe type" "temp"
    (711352 'move' call_tmp[711349](225628 'field by num' x[225585] i[225599]))
    (533044 'move' ret[533039](533043 'addr of' call_tmp[711349]))
    (533041 return ret[533039])
  }
  function getFieldIndex[225637](arg t[225635]:_any[178](?), param arg s[225640]:string[26]) param : _unknown[51]
  {
    unknown ret[533048] "RVV" "param" "temp"
    unknown call_tmp[711354] "expr temp" "maybe param" "maybe type" "temp"
    (711357 'move' call_tmp[711354](225649 call checkQueryT t[225635]))
    unknown call_tmp[711359] "expr temp" "maybe param" "maybe type" "temp"
    (711362 'move' call_tmp[711359](225651 'field name to num' call_tmp[711354] s[225640]))
    unknown call_tmp[711364] "expr temp" "maybe param" "maybe type" "temp"
    (711367 'move' call_tmp[711364](225653 call - call_tmp[711359] 1))
    (533054 'move' ret[533048](533053 'coerce' call_tmp[711364] int(64)[13]))
    (533050 return ret[533048])
  }
  { scopeless type
    int(64)[13]
  }
  function hasField[225665](arg t[225663]:_any[178](?), param arg s[225668]:string[26]) param : _unknown[51]
  {
    unknown ret[533058] "RVV" "param" "temp"
    unknown call_tmp[711369] "expr temp" "maybe param" "maybe type" "temp"
    (711372 'move' call_tmp[711369](225676 call getFieldIndex t[225663] s[225668]))
    unknown call_tmp[711374] "expr temp" "maybe param" "maybe type" "temp"
    (711377 'move' call_tmp[711374](225678 call >= call_tmp[711369] 0))
    (533064 'move' ret[533058](533063 'coerce' call_tmp[711374] bool[10]))
    (533060 return ret[533058])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225690](arg t[225688]:_any[178](?), param arg i[225693]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[533068] "RVV" "param" "temp"
    unknown call_tmp[711379] "expr temp" "maybe param" "maybe type" "temp"
    (711382 'move' call_tmp[711379](225718 call checkQueryT t[225688]))
    unknown call_tmp[711384] "expr temp" "maybe param" "maybe type" "temp"
    (711387 'move' call_tmp[711384](225723 call checkQueryT t[225688]))
    unknown call_tmp[711389] "expr temp" "maybe param" "maybe type" "temp"
    (711392 'move' call_tmp[711389](225726 call getFieldName call_tmp[711384] i[225693]))
    unknown call_tmp[711394] "expr temp" "maybe param" "maybe type" "temp"
    (711397 'move' call_tmp[711394](225727 'is bound' call_tmp[711379] call_tmp[711389]))
    (533074 'move' ret[533068](533073 'coerce' call_tmp[711394] bool[10]))
    (533070 return ret[533068])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225738](arg t[225736]:_any[178](?), param arg s[225741]:string[26]) param : _unknown[51]
  {
    unknown ret[533078] "RVV" "param" "temp"
    unknown call_tmp[711399] "expr temp" "maybe param" "maybe type" "temp"
    (711402 'move' call_tmp[711399](225750 call checkQueryT t[225736]))
    unknown call_tmp[711404] "expr temp" "maybe param" "maybe type" "temp"
    (711407 'move' call_tmp[711404](225752 'is bound' call_tmp[711399] s[225741]))
    (533084 'move' ret[533078](533083 'coerce' call_tmp[711404] bool[10]))
    (533080 return ret[533078])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225765](param arg fname[225762]:string[26]) param : _unknown[51]
  {
    unknown ret[533088] "RVV" "param" "temp"
    unknown call_tmp[711409] "expr temp" "maybe param" "maybe type" "temp"
    (711412 'move' call_tmp[711409](225787 'call and fn resolves' fname[225762]))
    (533094 'move' ret[533088](533093 'coerce' call_tmp[711409] bool[10]))
    (533090 return ret[533088])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225800](param arg fname[225797]:string[26], arg args[225803]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533098] "RVV" "param" "temp"
    unknown call_tmp[711414] "expr temp" "maybe param" "maybe type" "temp"
    (711417 'move' call_tmp[711414](225812 'call and fn resolves' fname[225797](225811 'expand_tuple' args[225803])))
    (533104 'move' ret[533098](533103 'coerce' call_tmp[711414] bool[10]))
    (533100 return ret[533098])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225823](arg obj[225821]:_any[178](?), param arg fname[225826]:string[26]) param : _unknown[51]
  {
    unknown ret[533108] "RVV" "param" "temp"
    unknown call_tmp[711419] "expr temp" "maybe param" "maybe type" "temp"
    (711422 'move' call_tmp[711419](225850 'method call and fn resolves' obj[225821] fname[225826]))
    (533114 'move' ret[533108](533113 'coerce' call_tmp[711419] bool[10]))
    (533110 return ret[533108])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225861](arg obj[225859]:_any[178](?), param arg fname[225864]:string[26], arg args[225868]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533118] "RVV" "param" "temp"
    unknown call_tmp[711424] "expr temp" "maybe param" "maybe type" "temp"
    (711427 'move' call_tmp[711424](225878 'method call and fn resolves' obj[225859] fname[225864](225877 'expand_tuple' args[225868])))
    (533124 'move' ret[533118](533123 'coerce' call_tmp[711424] bool[10]))
    (533120 return ret[533118])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225889](arg t[225887]:_any[178](?), param arg fname[225892]:string[26]) param : _unknown[51]
  {
    unknown ret[533128] "RVV" "param" "temp"
    unknown call_tmp[711429] "expr temp" "maybe param" "maybe type" "temp"
    (711432 'move' call_tmp[711429](225900 'method call and fn resolves' t[225887] fname[225892]))
    (533134 'move' ret[533128](533133 'coerce' call_tmp[711429] bool[10]))
    (533130 return ret[533128])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225911](arg t[225909]:_any[178](?), param arg fname[225914]:string[26], arg args[225918]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533138] "RVV" "param" "temp"
    unknown call_tmp[711434] "expr temp" "maybe param" "maybe type" "temp"
    (711437 'move' call_tmp[711434](225928 'method call and fn resolves' t[225909] fname[225914](225927 'expand_tuple' args[225918])))
    (533144 'move' ret[533138](533143 'coerce' call_tmp[711434] bool[10]))
    (533140 return ret[533138])
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[225937]() param : _unknown[51] "get line number" "no return value for void"
  {
    unknown ret[533148] "RVV" "param" "temp"
    (533150 return ret[533148])
  }
  { scopeless type
    int(64)[13]
  }
  function getFileName[225946]() param : _unknown[51] "get file name" "no return value for void"
  {
    unknown ret[533154] "RVV" "param" "temp"
    (533156 return ret[533154])
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[225955]() param : _unknown[51] "get function name" "no return value for void"
  {
    unknown ret[533160] "RVV" "param" "temp"
    (533162 return ret[533160])
  }
  { scopeless type
    string[26]
  }
  function getModuleName[225964]() param : _unknown[51] "get module name" "no return value for void"
  {
    unknown ret[533166] "RVV" "param" "temp"
    (533168 return ret[533166])
  }
  { scopeless type
    string[26]
  }
  (355342 'used modules list'(353048 'use' ChapelStandard[20267]))
}