AST dump for Reflection after pass createTaskFunctions.
Module use list: ChapelStandard 

{
  function chpl__init_Reflection[416223]() : void[4] "insert line file info" "module init"
  {
    (533257 return _void[55])
  }
  function checkQueryT[224975](arg t[224973]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[532981] "RVV" "temp" "type variable"
    unknown call_tmp[710971] "expr temp" "maybe param" "maybe type" "temp"
    (710974 'move' call_tmp[710971](224980 call isClassType t[224973]))
    unknown call_tmp[710976] "expr temp" "maybe param" "maybe type" "temp"
    (710979 'move' call_tmp[710976](225033 call _cond_test call_tmp[710971]))
    if call_tmp[710976]
    {
      unknown call_tmp[710981] "expr temp" "maybe param" "maybe type" "temp"
      (710984 'move' call_tmp[710981](224984 call _cast _borrowedNonNilable[214](?) t[224973]))
      (532986 'move' ret[532981](532985 'deref' call_tmp[710981]))
      gotoReturn _end_checkQueryT[532979] _end_checkQueryT[532979]
    }
    {
      unknown tmp[431804] "maybe param" "temp"
      (431815 'move' tmp[431804](224991 call isRecordType t[224973]))
      unknown call_tmp[710986] "expr temp" "maybe param" "maybe type" "temp"
      (710989 'move' call_tmp[710986](431817 call _cond_invalid tmp[431804]))
      if call_tmp[710986]
      {
        (431820 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[575922] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[575923] "maybe param" "temp"
      unknown call_tmp[710991] "expr temp" "maybe param" "maybe type" "temp"
      (710994 'move' call_tmp[710991](431805 call isTrue tmp[431804]))
      (575928 'move' tmp[575923](575926 call _cond_test call_tmp[710991]))
      if tmp[575923]
      {
        (575933 'move' tmp[575922](575930 '_paramFoldLogical' tmp[575923] 1))
      }
      {
        unknown tmp[575935] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[710996] "expr temp" "maybe param" "maybe type" "temp"
        (710999 'move' call_tmp[710996](224995 call isUnionType t[224973]))
        (575937 'move' tmp[575935](431809 call isTrue call_tmp[710996]))
        (575942 'move' tmp[575922](575939 '_paramFoldLogical' tmp[575923] tmp[575935]))
      }
      unknown call_tmp[711001] "expr temp" "maybe param" "maybe type" "temp"
      (711004 'move' call_tmp[711001](225027 call _cond_test tmp[575922]))
      if call_tmp[711001]
      {
        (532991 'move' ret[532981](532990 'deref' t[224973]))
        gotoReturn _end_checkQueryT[532979] _end_checkQueryT[532979]
      }
      {
        unknown call_tmp[711006] "expr temp" "maybe param" "maybe type" "temp"
        (711009 'move' call_tmp[711006](225004 call _cast string[26] t[224973]))
        (225025 call compilerError call_tmp[711006] " is not a class, record, or union type" 2)
      }
    }
    label _end_checkQueryT[532979]
    (532983 return ret[532981])
  }
  function numFields[225047](arg t[225045]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[532997] "RVV" "param" "temp"
    unknown call_tmp[711011] "expr temp" "maybe param" "maybe type" "temp"
    (711014 'move' call_tmp[711011](225055 call checkQueryT t[225045]))
    unknown call_tmp[711016] "expr temp" "maybe param" "maybe type" "temp"
    (711019 'move' call_tmp[711016](225056 'num fields' call_tmp[711011]))
    (533003 'move' ret[532997](533002 'coerce' call_tmp[711016] int(64)[13]))
    (532999 return ret[532997])
  }
  { scopeless type
    int(64)[13]
  }
  function getFieldName[225067](arg t[225065]:_any[178](?), param arg i[225070]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[533007] "RVV" "param" "temp"
    unknown call_tmp[711021] "expr temp" "maybe param" "maybe type" "temp"
    (711024 'move' call_tmp[711021](225079 call checkQueryT t[225065]))
    unknown call_tmp[711026] "expr temp" "maybe param" "maybe type" "temp"
    (711029 'move' call_tmp[711026](225082 call + i[225070] 1))
    unknown call_tmp[711031] "expr temp" "maybe param" "maybe type" "temp"
    (711034 'move' call_tmp[711031](225084 'field num to name' call_tmp[711021] call_tmp[711026]))
    (533013 'move' ret[533007](533012 'coerce' call_tmp[711031] string[26]))
    (533009 return ret[533007])
  }
  { scopeless type
    string[26]
  }
  function getField[225098](const  ref arg x[225095]:_any[178](?), param arg i[225101]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[533017] "RVV" "param" "temp"
    unknown call_tmp[711036] "expr temp" "maybe param" "maybe type" "temp"
    (711039 'move' call_tmp[711036](225135 call + i[225101] 1))
    unknown call_tmp[711041] "expr temp" "maybe param" "maybe type" "temp"
    (711044 'move' call_tmp[711041](225137 'field by num' x[225095] call_tmp[711036]))
    (533022 'move' ret[533017](533021 'deref' call_tmp[711041]))
    (533019 return ret[533017])
  }
  where {
    unknown tmp[431825] "maybe param" "temp"
    unknown tmp[431846] "maybe param" "temp"
    (431857 'move' tmp[431846](225106 call >= i[225101] 0))
    unknown call_tmp[711046] "expr temp" "maybe param" "maybe type" "temp"
    (711049 'move' call_tmp[711046](431859 call _cond_invalid tmp[431846]))
    if call_tmp[711046]
    {
      (431862 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575949] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575950] "maybe param" "temp"
    unknown call_tmp[711051] "expr temp" "maybe param" "maybe type" "temp"
    (711054 'move' call_tmp[711051](431847 call isTrue tmp[431846]))
    (575955 'move' tmp[575950](575953 call _cond_test call_tmp[711051]))
    if tmp[575950]
    {
      unknown tmp[575957] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711056] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711059 'move' call_tmp[711056](465065 'typeof' x[225095]))
      unknown call_tmp[711061] "expr temp" "maybe param" "maybe type" "temp"
      (711064 'move' call_tmp[711061](225112 call numFields call_tmp[711056]))
      unknown call_tmp[711066] "expr temp" "maybe param" "maybe type" "temp"
      (711069 'move' call_tmp[711066](225113 call < i[225101] call_tmp[711061]))
      (575959 'move' tmp[575957](431850 call isTrue call_tmp[711066]))
      (575964 'move' tmp[575949](575961 '_paramFoldLogical' tmp[575950] tmp[575957]))
    }
    {
      (575969 'move' tmp[575949](575966 '_paramFoldLogical' tmp[575950] 0))
    }
    (431836 'move' tmp[431825] tmp[575949])
    unknown call_tmp[711071] "expr temp" "maybe param" "maybe type" "temp"
    (711074 'move' call_tmp[711071](431838 call _cond_invalid tmp[431825]))
    if call_tmp[711071]
    {
      (431841 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575976] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575977] "maybe param" "temp"
    unknown call_tmp[711076] "expr temp" "maybe param" "maybe type" "temp"
    (711079 'move' call_tmp[711076](431826 call isTrue tmp[431825]))
    (575982 'move' tmp[575977](575980 call _cond_test call_tmp[711076]))
    if tmp[575977]
    {
      unknown tmp[575984] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711081] "expr temp" "maybe param" "maybe type" "temp"
      (711084 'move' call_tmp[711081](225123 call + i[225101] 1))
      unknown call_tmp[711086] "expr temp" "maybe param" "maybe type" "temp"
      (711089 'move' call_tmp[711086](225125 'field by num' x[225095] call_tmp[711081]))
      unknown call_tmp[711091] "expr temp" "maybe param" "maybe type" "temp"
      (711094 'move' call_tmp[711091](225127 call isParam call_tmp[711086]))
      (575986 'move' tmp[575984](431829 call isTrue call_tmp[711091]))
      (575991 'move' tmp[575976](575988 '_paramFoldLogical' tmp[575977] tmp[575984]))
    }
    {
      (575996 'move' tmp[575976](575993 '_paramFoldLogical' tmp[575977] 0))
    }
    (748551 call chpl_statementLevelSymbol tmp[575976])
  }
  function getField[225151](const  ref arg x[225148]:_any[178](?), param arg i[225154]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[533026] "RVV" "temp" "type variable"
    unknown call_tmp[711096] "expr temp" "maybe param" "maybe type" "temp"
    (711099 'move' call_tmp[711096](225188 call + i[225154] 1))
    unknown call_tmp[711101] "expr temp" "maybe param" "maybe type" "temp"
    (711104 'move' call_tmp[711101](225190 'field by num' x[225148] call_tmp[711096]))
    (533031 'move' ret[533026](533030 'deref' call_tmp[711101]))
    (533028 return ret[533026])
  }
  where {
    unknown tmp[431867] "maybe param" "temp"
    unknown tmp[431888] "maybe param" "temp"
    (431899 'move' tmp[431888](225159 call >= i[225154] 0))
    unknown call_tmp[711106] "expr temp" "maybe param" "maybe type" "temp"
    (711109 'move' call_tmp[711106](431901 call _cond_invalid tmp[431888]))
    if call_tmp[711106]
    {
      (431904 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576003] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576004] "maybe param" "temp"
    unknown call_tmp[711111] "expr temp" "maybe param" "maybe type" "temp"
    (711114 'move' call_tmp[711111](431889 call isTrue tmp[431888]))
    (576009 'move' tmp[576004](576007 call _cond_test call_tmp[711111]))
    if tmp[576004]
    {
      unknown tmp[576011] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711116] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711119 'move' call_tmp[711116](465067 'typeof' x[225148]))
      unknown call_tmp[711121] "expr temp" "maybe param" "maybe type" "temp"
      (711124 'move' call_tmp[711121](225165 call numFields call_tmp[711116]))
      unknown call_tmp[711126] "expr temp" "maybe param" "maybe type" "temp"
      (711129 'move' call_tmp[711126](225166 call < i[225154] call_tmp[711121]))
      (576013 'move' tmp[576011](431892 call isTrue call_tmp[711126]))
      (576018 'move' tmp[576003](576015 '_paramFoldLogical' tmp[576004] tmp[576011]))
    }
    {
      (576023 'move' tmp[576003](576020 '_paramFoldLogical' tmp[576004] 0))
    }
    (431878 'move' tmp[431867] tmp[576003])
    unknown call_tmp[711131] "expr temp" "maybe param" "maybe type" "temp"
    (711134 'move' call_tmp[711131](431880 call _cond_invalid tmp[431867]))
    if call_tmp[711131]
    {
      (431883 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576030] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576031] "maybe param" "temp"
    unknown call_tmp[711136] "expr temp" "maybe param" "maybe type" "temp"
    (711139 'move' call_tmp[711136](431868 call isTrue tmp[431867]))
    (576036 'move' tmp[576031](576034 call _cond_test call_tmp[711136]))
    if tmp[576031]
    {
      unknown tmp[576038] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711141] "expr temp" "maybe param" "maybe type" "temp"
      (711144 'move' call_tmp[711141](225176 call + i[225154] 1))
      unknown call_tmp[711146] "expr temp" "maybe param" "maybe type" "temp"
      (711149 'move' call_tmp[711146](225178 'field by num' x[225148] call_tmp[711141]))
      unknown call_tmp[711151] "expr temp" "maybe param" "maybe type" "temp"
      (711154 'move' call_tmp[711151](225180 call isType call_tmp[711146]))
      (576040 'move' tmp[576038](431871 call isTrue call_tmp[711151]))
      (576045 'move' tmp[576030](576042 '_paramFoldLogical' tmp[576031] tmp[576038]))
    }
    {
      (576050 'move' tmp[576030](576047 '_paramFoldLogical' tmp[576031] 0))
    }
    (748553 call chpl_statementLevelSymbol tmp[576030])
  }
  function getField[225204](const  ref arg x[225201]:_any[178](?), param arg i[225207]:int(64)[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[533035] "RVV" "temp"
    unknown call_tmp[711156] "expr temp" "maybe param" "maybe type" "temp"
    (711159 'move' call_tmp[711156](225215 call + i[225207] 1))
    unknown call_tmp[711161] "expr temp" "maybe param" "maybe type" "temp"
    (711164 'move' call_tmp[711161](225217 'field by num' x[225201] call_tmp[711156]))
    (533040 'move' ret[533035](533039 'addr of' call_tmp[711161]))
    (533037 return ret[533035])
  }
  function getField[225230](const  ref arg x[225227]:_any[178](?), param arg s[225233]:string[26]) param : _unknown[51]
  {
    unknown ret[533044] "RVV" "param" "temp"
    unknown call_tmp[711166] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711169 'move' call_tmp[711166](465069 'typeof' x[225227]))
    unknown call_tmp[711171] "expr temp" "maybe param" "maybe type" "temp"
    (711174 'move' call_tmp[711171](225267 call getFieldIndex call_tmp[711166] s[225233]))
    unknown call_tmp[711176] "expr temp" "maybe param" "maybe type" "temp"
    (711179 'move' call_tmp[711176](225268 call getField x[225227] call_tmp[711171]))
    (533049 'move' ret[533044](533048 'deref' call_tmp[711176]))
    (533046 return ret[533044])
  }
  where {
    unknown tmp[431909] "maybe param" "temp"
    unknown call_tmp[711181] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711184 'move' call_tmp[711181](465071 'typeof' x[225227]))
    unknown call_tmp[711186] "expr temp" "maybe param" "maybe type" "temp"
    (711189 'move' call_tmp[711186](225240 call getFieldIndex call_tmp[711181] s[225233]))
    unknown call_tmp[711191] "expr temp" "maybe param" "maybe type" "temp"
    (711194 'move' call_tmp[711191](225242 call - 1))
    (431920 'move' tmp[431909](225244 call != call_tmp[711186] call_tmp[711191]))
    unknown call_tmp[711196] "expr temp" "maybe param" "maybe type" "temp"
    (711199 'move' call_tmp[711196](431922 call _cond_invalid tmp[431909]))
    if call_tmp[711196]
    {
      (431925 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576057] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576058] "maybe param" "temp"
    unknown call_tmp[711201] "expr temp" "maybe param" "maybe type" "temp"
    (711204 'move' call_tmp[711201](431910 call isTrue tmp[431909]))
    (576063 'move' tmp[576058](576061 call _cond_test call_tmp[711201]))
    if tmp[576058]
    {
      unknown tmp[576065] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711206] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711209 'move' call_tmp[711206](465073 'typeof' x[225227]))
      unknown call_tmp[711211] "expr temp" "maybe param" "maybe type" "temp"
      (711214 'move' call_tmp[711211](225254 call getFieldIndex call_tmp[711206] s[225233]))
      unknown call_tmp[711216] "expr temp" "maybe param" "maybe type" "temp"
      (711219 'move' call_tmp[711216](225255 call getField x[225227] call_tmp[711211]))
      unknown call_tmp[711221] "expr temp" "maybe param" "maybe type" "temp"
      (711224 'move' call_tmp[711221](225257 call isParam call_tmp[711216]))
      (576067 'move' tmp[576065](431913 call isTrue call_tmp[711221]))
      (576072 'move' tmp[576057](576069 '_paramFoldLogical' tmp[576058] tmp[576065]))
    }
    {
      (576077 'move' tmp[576057](576074 '_paramFoldLogical' tmp[576058] 0))
    }
    (748555 call chpl_statementLevelSymbol tmp[576057])
  }
  function getField[225282](const  ref arg x[225279]:_any[178](?), param arg s[225285]:string[26]) type : _unknown[51]
  {
    unknown ret[533053] "RVV" "temp" "type variable"
    unknown call_tmp[711226] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711229 'move' call_tmp[711226](465075 'typeof' x[225279]))
    unknown call_tmp[711231] "expr temp" "maybe param" "maybe type" "temp"
    (711234 'move' call_tmp[711231](225319 call getFieldIndex call_tmp[711226] s[225285]))
    unknown call_tmp[711236] "expr temp" "maybe param" "maybe type" "temp"
    (711239 'move' call_tmp[711236](225320 call getField x[225279] call_tmp[711231]))
    (533058 'move' ret[533053](533057 'deref' call_tmp[711236]))
    (533055 return ret[533053])
  }
  where {
    unknown tmp[431930] "maybe param" "temp"
    unknown call_tmp[711241] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711244 'move' call_tmp[711241](465077 'typeof' x[225279]))
    unknown call_tmp[711246] "expr temp" "maybe param" "maybe type" "temp"
    (711249 'move' call_tmp[711246](225292 call getFieldIndex call_tmp[711241] s[225285]))
    unknown call_tmp[711251] "expr temp" "maybe param" "maybe type" "temp"
    (711254 'move' call_tmp[711251](225294 call - 1))
    (431941 'move' tmp[431930](225296 call != call_tmp[711246] call_tmp[711251]))
    unknown call_tmp[711256] "expr temp" "maybe param" "maybe type" "temp"
    (711259 'move' call_tmp[711256](431943 call _cond_invalid tmp[431930]))
    if call_tmp[711256]
    {
      (431946 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576084] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576085] "maybe param" "temp"
    unknown call_tmp[711261] "expr temp" "maybe param" "maybe type" "temp"
    (711264 'move' call_tmp[711261](431931 call isTrue tmp[431930]))
    (576090 'move' tmp[576085](576088 call _cond_test call_tmp[711261]))
    if tmp[576085]
    {
      unknown tmp[576092] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711266] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711269 'move' call_tmp[711266](465079 'typeof' x[225279]))
      unknown call_tmp[711271] "expr temp" "maybe param" "maybe type" "temp"
      (711274 'move' call_tmp[711271](225306 call getFieldIndex call_tmp[711266] s[225285]))
      unknown call_tmp[711276] "expr temp" "maybe param" "maybe type" "temp"
      (711279 'move' call_tmp[711276](225307 call getField x[225279] call_tmp[711271]))
      unknown call_tmp[711281] "expr temp" "maybe param" "maybe type" "temp"
      (711284 'move' call_tmp[711281](225309 call isType call_tmp[711276]))
      (576094 'move' tmp[576092](431934 call isTrue call_tmp[711281]))
      (576099 'move' tmp[576084](576096 '_paramFoldLogical' tmp[576085] tmp[576092]))
    }
    {
      (576104 'move' tmp[576084](576101 '_paramFoldLogical' tmp[576085] 0))
    }
    (748557 call chpl_statementLevelSymbol tmp[576084])
  }
  function getField[225334](const  ref arg x[225331]:_any[178](?), param arg s[225337]:string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[533062] "RVV" "temp"
    unknown call_tmp[711286] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711289 'move' call_tmp[711286](465081 'typeof' x[225331]))
    unknown call_tmp[711291] "maybe param" "maybe type" "temp"
    (711294 'move' call_tmp[711291](225360 'field name to num' call_tmp[711286] s[225337]))
    unknown i[225361] "dead at end of block" "param"
    (546644 'init var' i[225361] call_tmp[711291])
    (225364 'end of statement')
    unknown call_tmp[711296] "expr temp" "maybe param" "maybe type" "temp"
    (711299 'move' call_tmp[711296](225368 call == i[225361] 0))
    unknown call_tmp[711301] "expr temp" "maybe param" "maybe type" "temp"
    (711304 'move' call_tmp[711301](225413 call _cond_test call_tmp[711296]))
    if call_tmp[711301]
    {
      unknown call_tmp[711306] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711309 'move' call_tmp[711306](465083 'typeof' x[225331]))
      unknown call_tmp[711311] "expr temp" "maybe param" "maybe type" "temp"
      (711314 'move' call_tmp[711311](225409 call _cast string[26] call_tmp[711306]))
      (225411 call compilerError "field " s[225337] " not found in " call_tmp[711311])
    }
    unknown call_tmp[711316] "expr temp" "maybe param" "maybe type" "temp"
    (711319 'move' call_tmp[711316](225422 'field by num' x[225331] i[225361]))
    (533067 'move' ret[533062](533066 'addr of' call_tmp[711316]))
    (533064 return ret[533062])
  }
  function isImplementedWithRecords[225431](arg t[225429]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[533071] "RVV" "param" "temp"
    unknown tmp[431951] "maybe param" "temp"
    (431962 'move' tmp[431951](225436 call isRangeType t[225429]))
    unknown call_tmp[711321] "expr temp" "maybe param" "maybe type" "temp"
    (711324 'move' call_tmp[711321](431964 call _cond_invalid tmp[431951]))
    if call_tmp[711321]
    {
      (431967 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[576111] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576112] "maybe param" "temp"
    unknown call_tmp[711326] "expr temp" "maybe param" "maybe type" "temp"
    (711329 'move' call_tmp[711326](431952 call isTrue tmp[431951]))
    (576117 'move' tmp[576112](576115 call _cond_test call_tmp[711326]))
    if tmp[576112]
    {
      (576122 'move' tmp[576111](576119 '_paramFoldLogical' tmp[576112] 1))
    }
    {
      unknown tmp[576124] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711331] "expr temp" "maybe param" "maybe type" "temp"
      (711334 'move' call_tmp[711331](225440 call isStringType t[225429]))
      (576126 'move' tmp[576124](431956 call isTrue call_tmp[711331]))
      (576131 'move' tmp[576111](576128 '_paramFoldLogical' tmp[576112] tmp[576124]))
    }
    (533076 'move' ret[533071](533075 'deref' tmp[576111]))
    (533073 return ret[533071])
  }
  function numImplementationFields[225452](arg t[225450]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[533080] "RVV" "param" "temp"
    unknown call_tmp[711336] "expr temp" "maybe param" "maybe type" "temp"
    (711339 'move' call_tmp[711336](225462 'num fields' t[225450]))
    (533086 'move' ret[533080](533085 'coerce' call_tmp[711336] int(64)[13]))
    (533082 return ret[533080])
  }
  where {
    (225458 call isImplementedWithRecords t[225450])
  }
  { scopeless type
    int(64)[13]
  }
  function getImplementationField[225477](const  ref arg x[225474]:_any[178](?), param arg i[225480]:int(64)[13]) type : _unknown[51] "no doc"
  {
    unknown ret[533090] "RVV" "temp" "type variable"
    unknown call_tmp[711341] "expr temp" "maybe param" "maybe type" "temp"
    (711344 'move' call_tmp[711341](225501 'field by num' x[225474] i[225480]))
    (533095 'move' ret[533090](533094 'deref' call_tmp[711341]))
    (533092 return ret[533090])
  }
  where {
    unknown tmp[431972] "maybe param" "temp"
    unknown call_tmp[711346] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711349 'move' call_tmp[711346](465085 'typeof' x[225474]))
    (431983 'move' tmp[431972](225486 call isImplementedWithRecords call_tmp[711346]))
    unknown call_tmp[711351] "expr temp" "maybe param" "maybe type" "temp"
    (711354 'move' call_tmp[711351](431985 call _cond_invalid tmp[431972]))
    if call_tmp[711351]
    {
      (431988 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576138] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576139] "maybe param" "temp"
    unknown call_tmp[711356] "expr temp" "maybe param" "maybe type" "temp"
    (711359 'move' call_tmp[711356](431973 call isTrue tmp[431972]))
    (576144 'move' tmp[576139](576142 call _cond_test call_tmp[711356]))
    if tmp[576139]
    {
      unknown tmp[576146] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711361] "expr temp" "maybe param" "maybe type" "temp"
      (711364 'move' call_tmp[711361](225492 'field by num' x[225474] i[225480]))
      unknown call_tmp[711366] "expr temp" "maybe param" "maybe type" "temp"
      (711369 'move' call_tmp[711366](225494 call isType call_tmp[711361]))
      (576148 'move' tmp[576146](431976 call isTrue call_tmp[711366]))
      (576153 'move' tmp[576138](576150 '_paramFoldLogical' tmp[576139] tmp[576146]))
    }
    {
      (576158 'move' tmp[576138](576155 '_paramFoldLogical' tmp[576139] 0))
    }
    (748559 call chpl_statementLevelSymbol tmp[576138])
  }
  function getImplementationField[225515](const  ref arg x[225512]:_any[178](?), param arg i[225518]:int(64)[13]) param : _unknown[51] "no doc"
  {
    unknown ret[533099] "RVV" "param" "temp"
    unknown call_tmp[711371] "expr temp" "maybe param" "maybe type" "temp"
    (711374 'move' call_tmp[711371](225539 'field by num' x[225512] i[225518]))
    (533104 'move' ret[533099](533103 'deref' call_tmp[711371]))
    (533101 return ret[533099])
  }
  where {
    unknown tmp[431993] "maybe param" "temp"
    unknown call_tmp[711376] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711379 'move' call_tmp[711376](465087 'typeof' x[225512]))
    (432004 'move' tmp[431993](225524 call isImplementedWithRecords call_tmp[711376]))
    unknown call_tmp[711381] "expr temp" "maybe param" "maybe type" "temp"
    (711384 'move' call_tmp[711381](432006 call _cond_invalid tmp[431993]))
    if call_tmp[711381]
    {
      (432009 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576165] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576166] "maybe param" "temp"
    unknown call_tmp[711386] "expr temp" "maybe param" "maybe type" "temp"
    (711389 'move' call_tmp[711386](431994 call isTrue tmp[431993]))
    (576171 'move' tmp[576166](576169 call _cond_test call_tmp[711386]))
    if tmp[576166]
    {
      unknown tmp[576173] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711391] "expr temp" "maybe param" "maybe type" "temp"
      (711394 'move' call_tmp[711391](225530 'field by num' x[225512] i[225518]))
      unknown call_tmp[711396] "expr temp" "maybe param" "maybe type" "temp"
      (711399 'move' call_tmp[711396](225532 call isParam call_tmp[711391]))
      (576175 'move' tmp[576173](431997 call isTrue call_tmp[711396]))
      (576180 'move' tmp[576165](576177 '_paramFoldLogical' tmp[576166] tmp[576173]))
    }
    {
      (576185 'move' tmp[576165](576182 '_paramFoldLogical' tmp[576166] 0))
    }
    (748561 call chpl_statementLevelSymbol tmp[576165])
  }
  function getImplementationField[225553](const  ref arg x[225550]:_any[178](?), param arg i[225556]:int(64)[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    unknown ret[533108] "RVV" "temp"
    unknown call_tmp[711401] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711404 'move' call_tmp[711401](465089 'typeof' x[225550]))
    unknown call_tmp[711406] "expr temp" "maybe param" "maybe type" "temp"
    (711409 'move' call_tmp[711406](225562 call isImplementedWithRecords call_tmp[711401]))
    unknown call_tmp[711411] "expr temp" "maybe param" "maybe type" "temp"
    (711414 'move' call_tmp[711411](225563 call ! call_tmp[711406]))
    unknown call_tmp[711416] "expr temp" "maybe param" "maybe type" "temp"
    (711419 'move' call_tmp[711416](225607 call _cond_test call_tmp[711411]))
    if call_tmp[711416]
    {
      unknown call_tmp[711421] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711424 'move' call_tmp[711421](465091 'typeof' x[225550]))
      unknown call_tmp[711426] "expr temp" "maybe param" "maybe type" "temp"
      (711429 'move' call_tmp[711426](225586 call _cast string[26] call_tmp[711421]))
      (225605 call compilerError "an argument of the type " call_tmp[711426] " is not valid for getImplementationField()")
    }
    unknown call_tmp[711431] "expr temp" "maybe param" "maybe type" "temp"
    (711434 'move' call_tmp[711431](225617 'field by num' x[225550] i[225556]))
    (533113 'move' ret[533108](533112 'addr of' call_tmp[711431]))
    (533110 return ret[533108])
  }
  function getFieldRef[225629](ref arg x[225626]:_any[178](?), param arg i[225632]:int(64)[13]) ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[533117] "RVV" "temp"
    unknown call_tmp[711436] "expr temp" "maybe param" "maybe type" "temp"
    (711439 'move' call_tmp[711436](225640 call + i[225632] 1))
    unknown call_tmp[711441] "expr temp" "maybe param" "maybe type" "temp"
    (711444 'move' call_tmp[711441](225642 'field by num' x[225626] call_tmp[711436]))
    (533122 'move' ret[533117](533121 'addr of' call_tmp[711441]))
    (533119 return ret[533117])
  }
  function getFieldRef[225655](ref arg x[225652]:_any[178](?), param arg s[225658]:string[26]) ref : _unknown[51] "unsafe"
  {
    unknown ret[533126] "RVV" "temp"
    unknown call_tmp[711446] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711449 'move' call_tmp[711446](465093 'typeof' x[225652]))
    unknown call_tmp[711451] "maybe param" "maybe type" "temp"
    (711454 'move' call_tmp[711451](225665 'field name to num' call_tmp[711446] s[225658]))
    unknown i[225666] "dead at end of block" "param"
    (546646 'init var' i[225666] call_tmp[711451])
    (225669 'end of statement')
    unknown call_tmp[711456] "expr temp" "maybe param" "maybe type" "temp"
    (711459 'move' call_tmp[711456](225673 call == i[225666] 0))
    unknown call_tmp[711461] "expr temp" "maybe param" "maybe type" "temp"
    (711464 'move' call_tmp[711461](225686 call _cond_test call_tmp[711456]))
    if call_tmp[711461]
    {
      unknown call_tmp[711466] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711469 'move' call_tmp[711466](465095 'typeof' x[225652]))
      unknown call_tmp[711471] "expr temp" "maybe param" "maybe type" "temp"
      (711474 'move' call_tmp[711471](225682 call _cast string[26] call_tmp[711466]))
      (225684 call compilerError "field " s[225658] " not found in " call_tmp[711471])
    }
    unknown call_tmp[711476] "expr temp" "maybe param" "maybe type" "temp"
    (711479 'move' call_tmp[711476](225695 'field by num' x[225652] i[225666]))
    (533131 'move' ret[533126](533130 'addr of' call_tmp[711476]))
    (533128 return ret[533126])
  }
  function getFieldIndex[225704](arg t[225702]:_any[178](?), param arg s[225707]:string[26]) param : _unknown[51]
  {
    unknown ret[533135] "RVV" "param" "temp"
    unknown call_tmp[711481] "expr temp" "maybe param" "maybe type" "temp"
    (711484 'move' call_tmp[711481](225716 call checkQueryT t[225702]))
    unknown call_tmp[711486] "expr temp" "maybe param" "maybe type" "temp"
    (711489 'move' call_tmp[711486](225718 'field name to num' call_tmp[711481] s[225707]))
    unknown call_tmp[711491] "expr temp" "maybe param" "maybe type" "temp"
    (711494 'move' call_tmp[711491](225720 call - call_tmp[711486] 1))
    (533141 'move' ret[533135](533140 'coerce' call_tmp[711491] int(64)[13]))
    (533137 return ret[533135])
  }
  { scopeless type
    int(64)[13]
  }
  function hasField[225732](arg t[225730]:_any[178](?), param arg s[225735]:string[26]) param : _unknown[51]
  {
    unknown ret[533145] "RVV" "param" "temp"
    unknown call_tmp[711496] "expr temp" "maybe param" "maybe type" "temp"
    (711499 'move' call_tmp[711496](225743 call getFieldIndex t[225730] s[225735]))
    unknown call_tmp[711501] "expr temp" "maybe param" "maybe type" "temp"
    (711504 'move' call_tmp[711501](225745 call >= call_tmp[711496] 0))
    (533151 'move' ret[533145](533150 'coerce' call_tmp[711501] bool[10]))
    (533147 return ret[533145])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225757](arg t[225755]:_any[178](?), param arg i[225760]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[533155] "RVV" "param" "temp"
    unknown call_tmp[711506] "expr temp" "maybe param" "maybe type" "temp"
    (711509 'move' call_tmp[711506](225785 call checkQueryT t[225755]))
    unknown call_tmp[711511] "expr temp" "maybe param" "maybe type" "temp"
    (711514 'move' call_tmp[711511](225790 call checkQueryT t[225755]))
    unknown call_tmp[711516] "expr temp" "maybe param" "maybe type" "temp"
    (711519 'move' call_tmp[711516](225793 call getFieldName call_tmp[711511] i[225760]))
    unknown call_tmp[711521] "expr temp" "maybe param" "maybe type" "temp"
    (711524 'move' call_tmp[711521](225794 'is bound' call_tmp[711506] call_tmp[711516]))
    (533161 'move' ret[533155](533160 'coerce' call_tmp[711521] bool[10]))
    (533157 return ret[533155])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225805](arg t[225803]:_any[178](?), param arg s[225808]:string[26]) param : _unknown[51]
  {
    unknown ret[533165] "RVV" "param" "temp"
    unknown call_tmp[711526] "expr temp" "maybe param" "maybe type" "temp"
    (711529 'move' call_tmp[711526](225817 call checkQueryT t[225803]))
    unknown call_tmp[711531] "expr temp" "maybe param" "maybe type" "temp"
    (711534 'move' call_tmp[711531](225819 'is bound' call_tmp[711526] s[225808]))
    (533171 'move' ret[533165](533170 'coerce' call_tmp[711531] bool[10]))
    (533167 return ret[533165])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225832](param arg fname[225829]:string[26]) param : _unknown[51]
  {
    unknown ret[533175] "RVV" "param" "temp"
    unknown call_tmp[711536] "expr temp" "maybe param" "maybe type" "temp"
    (711539 'move' call_tmp[711536](225854 'call and fn resolves' fname[225829]))
    (533181 'move' ret[533175](533180 'coerce' call_tmp[711536] bool[10]))
    (533177 return ret[533175])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225867](param arg fname[225864]:string[26], arg args[225870]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533185] "RVV" "param" "temp"
    unknown call_tmp[711541] "expr temp" "maybe param" "maybe type" "temp"
    (711544 'move' call_tmp[711541](225879 'call and fn resolves' fname[225864](225878 'expand_tuple' args[225870])))
    (533191 'move' ret[533185](533190 'coerce' call_tmp[711541] bool[10]))
    (533187 return ret[533185])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225890](arg obj[225888]:_any[178](?), param arg fname[225893]:string[26]) param : _unknown[51]
  {
    unknown ret[533195] "RVV" "param" "temp"
    unknown call_tmp[711546] "expr temp" "maybe param" "maybe type" "temp"
    (711549 'move' call_tmp[711546](225917 'method call and fn resolves' obj[225888] fname[225893]))
    (533201 'move' ret[533195](533200 'coerce' call_tmp[711546] bool[10]))
    (533197 return ret[533195])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225928](arg obj[225926]:_any[178](?), param arg fname[225931]:string[26], arg args[225935]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533205] "RVV" "param" "temp"
    unknown call_tmp[711551] "expr temp" "maybe param" "maybe type" "temp"
    (711554 'move' call_tmp[711551](225945 'method call and fn resolves' obj[225926] fname[225931](225944 'expand_tuple' args[225935])))
    (533211 'move' ret[533205](533210 'coerce' call_tmp[711551] bool[10]))
    (533207 return ret[533205])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225956](arg t[225954]:_any[178](?), param arg fname[225959]:string[26]) param : _unknown[51]
  {
    unknown ret[533215] "RVV" "param" "temp"
    unknown call_tmp[711556] "expr temp" "maybe param" "maybe type" "temp"
    (711559 'move' call_tmp[711556](225967 'method call and fn resolves' t[225954] fname[225959]))
    (533221 'move' ret[533215](533220 'coerce' call_tmp[711556] bool[10]))
    (533217 return ret[533215])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225978](arg t[225976]:_any[178](?), param arg fname[225981]:string[26], arg args[225985]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533225] "RVV" "param" "temp"
    unknown call_tmp[711561] "expr temp" "maybe param" "maybe type" "temp"
    (711564 'move' call_tmp[711561](225995 'method call and fn resolves' t[225976] fname[225981](225994 'expand_tuple' args[225985])))
    (533231 'move' ret[533225](533230 'coerce' call_tmp[711561] bool[10]))
    (533227 return ret[533225])
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[226004]() param : _unknown[51] "get line number" "no return value for void"
  {
    unknown ret[533235] "RVV" "param" "temp"
    (533237 return ret[533235])
  }
  { scopeless type
    int(64)[13]
  }
  function getFileName[226013]() param : _unknown[51] "get file name" "no return value for void"
  {
    unknown ret[533241] "RVV" "param" "temp"
    (533243 return ret[533241])
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[226022]() param : _unknown[51] "get function name" "no return value for void"
  {
    unknown ret[533247] "RVV" "param" "temp"
    (533249 return ret[533247])
  }
  { scopeless type
    string[26]
  }
  function getModuleName[226031]() param : _unknown[51] "get module name" "no return value for void"
  {
    unknown ret[533253] "RVV" "param" "temp"
    (533255 return ret[533253])
  }
  { scopeless type
    string[26]
  }
  (355410 'used modules list'(353115 'use' ChapelStandard[20267]))
}