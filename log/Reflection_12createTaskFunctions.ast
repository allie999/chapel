AST dump for Reflection after pass createTaskFunctions.
Module use list: ChapelStandard 

{
  function chpl__init_Reflection[416145]() : void[4] "insert line file info" "module init"
  {
    (533156 return _void[55])
  }
  function checkQueryT[224906](arg t[224904]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[532880] "RVV" "temp" "type variable"
    unknown call_tmp[710803] "expr temp" "maybe param" "maybe type" "temp"
    (710806 'move' call_tmp[710803](224911 call isClassType t[224904]))
    unknown call_tmp[710808] "expr temp" "maybe param" "maybe type" "temp"
    (710811 'move' call_tmp[710808](224964 call _cond_test call_tmp[710803]))
    if call_tmp[710808]
    {
      unknown call_tmp[710813] "expr temp" "maybe param" "maybe type" "temp"
      (710816 'move' call_tmp[710813](224915 call _cast _borrowedNonNilable[214](?) t[224904]))
      (532885 'move' ret[532880](532884 'deref' call_tmp[710813]))
      gotoReturn _end_checkQueryT[532878] _end_checkQueryT[532878]
    }
    {
      unknown tmp[431726] "maybe param" "temp"
      (431737 'move' tmp[431726](224922 call isRecordType t[224904]))
      unknown call_tmp[710818] "expr temp" "maybe param" "maybe type" "temp"
      (710821 'move' call_tmp[710818](431739 call _cond_invalid tmp[431726]))
      if call_tmp[710818]
      {
        (431742 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[575819] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[575820] "maybe param" "temp"
      unknown call_tmp[710823] "expr temp" "maybe param" "maybe type" "temp"
      (710826 'move' call_tmp[710823](431727 call isTrue tmp[431726]))
      (575825 'move' tmp[575820](575823 call _cond_test call_tmp[710823]))
      if tmp[575820]
      {
        (575830 'move' tmp[575819](575827 '_paramFoldLogical' tmp[575820] 1))
      }
      {
        unknown tmp[575832] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[710828] "expr temp" "maybe param" "maybe type" "temp"
        (710831 'move' call_tmp[710828](224926 call isUnionType t[224904]))
        (575834 'move' tmp[575832](431731 call isTrue call_tmp[710828]))
        (575839 'move' tmp[575819](575836 '_paramFoldLogical' tmp[575820] tmp[575832]))
      }
      unknown call_tmp[710833] "expr temp" "maybe param" "maybe type" "temp"
      (710836 'move' call_tmp[710833](224958 call _cond_test tmp[575819]))
      if call_tmp[710833]
      {
        (532890 'move' ret[532880](532889 'deref' t[224904]))
        gotoReturn _end_checkQueryT[532878] _end_checkQueryT[532878]
      }
      {
        unknown call_tmp[710838] "expr temp" "maybe param" "maybe type" "temp"
        (710841 'move' call_tmp[710838](224935 call _cast string[26] t[224904]))
        (224956 call compilerError call_tmp[710838] " is not a class, record, or union type" 2)
      }
    }
    label _end_checkQueryT[532878]
    (532882 return ret[532880])
  }
  function numFields[224978](arg t[224976]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[532896] "RVV" "param" "temp"
    unknown call_tmp[710843] "expr temp" "maybe param" "maybe type" "temp"
    (710846 'move' call_tmp[710843](224986 call checkQueryT t[224976]))
    unknown call_tmp[710848] "expr temp" "maybe param" "maybe type" "temp"
    (710851 'move' call_tmp[710848](224987 'num fields' call_tmp[710843]))
    (532902 'move' ret[532896](532901 'coerce' call_tmp[710848] int(64)[13]))
    (532898 return ret[532896])
  }
  { scopeless type
    int(64)[13]
  }
  function getFieldName[224998](arg t[224996]:_any[178](?), param arg i[225001]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532906] "RVV" "param" "temp"
    unknown call_tmp[710853] "expr temp" "maybe param" "maybe type" "temp"
    (710856 'move' call_tmp[710853](225010 call checkQueryT t[224996]))
    unknown call_tmp[710858] "expr temp" "maybe param" "maybe type" "temp"
    (710861 'move' call_tmp[710858](225013 call + i[225001] 1))
    unknown call_tmp[710863] "expr temp" "maybe param" "maybe type" "temp"
    (710866 'move' call_tmp[710863](225015 'field num to name' call_tmp[710853] call_tmp[710858]))
    (532912 'move' ret[532906](532911 'coerce' call_tmp[710863] string[26]))
    (532908 return ret[532906])
  }
  { scopeless type
    string[26]
  }
  function getField[225029](const  ref arg x[225026]:_any[178](?), param arg i[225032]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[532916] "RVV" "param" "temp"
    unknown call_tmp[710868] "expr temp" "maybe param" "maybe type" "temp"
    (710871 'move' call_tmp[710868](225066 call + i[225032] 1))
    unknown call_tmp[710873] "expr temp" "maybe param" "maybe type" "temp"
    (710876 'move' call_tmp[710873](225068 'field by num' x[225026] call_tmp[710868]))
    (532921 'move' ret[532916](532920 'deref' call_tmp[710873]))
    (532918 return ret[532916])
  }
  where {
    unknown tmp[431747] "maybe param" "temp"
    unknown tmp[431768] "maybe param" "temp"
    (431779 'move' tmp[431768](225037 call >= i[225032] 0))
    unknown call_tmp[710878] "expr temp" "maybe param" "maybe type" "temp"
    (710881 'move' call_tmp[710878](431781 call _cond_invalid tmp[431768]))
    if call_tmp[710878]
    {
      (431784 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575846] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575847] "maybe param" "temp"
    unknown call_tmp[710883] "expr temp" "maybe param" "maybe type" "temp"
    (710886 'move' call_tmp[710883](431769 call isTrue tmp[431768]))
    (575852 'move' tmp[575847](575850 call _cond_test call_tmp[710883]))
    if tmp[575847]
    {
      unknown tmp[575854] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710888] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710891 'move' call_tmp[710888](464987 'typeof' x[225026]))
      unknown call_tmp[710893] "expr temp" "maybe param" "maybe type" "temp"
      (710896 'move' call_tmp[710893](225043 call numFields call_tmp[710888]))
      unknown call_tmp[710898] "expr temp" "maybe param" "maybe type" "temp"
      (710901 'move' call_tmp[710898](225044 call < i[225032] call_tmp[710893]))
      (575856 'move' tmp[575854](431772 call isTrue call_tmp[710898]))
      (575861 'move' tmp[575846](575858 '_paramFoldLogical' tmp[575847] tmp[575854]))
    }
    {
      (575866 'move' tmp[575846](575863 '_paramFoldLogical' tmp[575847] 0))
    }
    (431758 'move' tmp[431747] tmp[575846])
    unknown call_tmp[710903] "expr temp" "maybe param" "maybe type" "temp"
    (710906 'move' call_tmp[710903](431760 call _cond_invalid tmp[431747]))
    if call_tmp[710903]
    {
      (431763 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575873] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575874] "maybe param" "temp"
    unknown call_tmp[710908] "expr temp" "maybe param" "maybe type" "temp"
    (710911 'move' call_tmp[710908](431748 call isTrue tmp[431747]))
    (575879 'move' tmp[575874](575877 call _cond_test call_tmp[710908]))
    if tmp[575874]
    {
      unknown tmp[575881] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710913] "expr temp" "maybe param" "maybe type" "temp"
      (710916 'move' call_tmp[710913](225054 call + i[225032] 1))
      unknown call_tmp[710918] "expr temp" "maybe param" "maybe type" "temp"
      (710921 'move' call_tmp[710918](225056 'field by num' x[225026] call_tmp[710913]))
      unknown call_tmp[710923] "expr temp" "maybe param" "maybe type" "temp"
      (710926 'move' call_tmp[710923](225058 call isParam call_tmp[710918]))
      (575883 'move' tmp[575881](431751 call isTrue call_tmp[710923]))
      (575888 'move' tmp[575873](575885 '_paramFoldLogical' tmp[575874] tmp[575881]))
    }
    {
      (575893 'move' tmp[575873](575890 '_paramFoldLogical' tmp[575874] 0))
    }
    (748381 call chpl_statementLevelSymbol tmp[575873])
  }
  function getField[225082](const  ref arg x[225079]:_any[178](?), param arg i[225085]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[532925] "RVV" "temp" "type variable"
    unknown call_tmp[710928] "expr temp" "maybe param" "maybe type" "temp"
    (710931 'move' call_tmp[710928](225119 call + i[225085] 1))
    unknown call_tmp[710933] "expr temp" "maybe param" "maybe type" "temp"
    (710936 'move' call_tmp[710933](225121 'field by num' x[225079] call_tmp[710928]))
    (532930 'move' ret[532925](532929 'deref' call_tmp[710933]))
    (532927 return ret[532925])
  }
  where {
    unknown tmp[431789] "maybe param" "temp"
    unknown tmp[431810] "maybe param" "temp"
    (431821 'move' tmp[431810](225090 call >= i[225085] 0))
    unknown call_tmp[710938] "expr temp" "maybe param" "maybe type" "temp"
    (710941 'move' call_tmp[710938](431823 call _cond_invalid tmp[431810]))
    if call_tmp[710938]
    {
      (431826 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575900] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575901] "maybe param" "temp"
    unknown call_tmp[710943] "expr temp" "maybe param" "maybe type" "temp"
    (710946 'move' call_tmp[710943](431811 call isTrue tmp[431810]))
    (575906 'move' tmp[575901](575904 call _cond_test call_tmp[710943]))
    if tmp[575901]
    {
      unknown tmp[575908] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710948] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (710951 'move' call_tmp[710948](464989 'typeof' x[225079]))
      unknown call_tmp[710953] "expr temp" "maybe param" "maybe type" "temp"
      (710956 'move' call_tmp[710953](225096 call numFields call_tmp[710948]))
      unknown call_tmp[710958] "expr temp" "maybe param" "maybe type" "temp"
      (710961 'move' call_tmp[710958](225097 call < i[225085] call_tmp[710953]))
      (575910 'move' tmp[575908](431814 call isTrue call_tmp[710958]))
      (575915 'move' tmp[575900](575912 '_paramFoldLogical' tmp[575901] tmp[575908]))
    }
    {
      (575920 'move' tmp[575900](575917 '_paramFoldLogical' tmp[575901] 0))
    }
    (431800 'move' tmp[431789] tmp[575900])
    unknown call_tmp[710963] "expr temp" "maybe param" "maybe type" "temp"
    (710966 'move' call_tmp[710963](431802 call _cond_invalid tmp[431789]))
    if call_tmp[710963]
    {
      (431805 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575927] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575928] "maybe param" "temp"
    unknown call_tmp[710968] "expr temp" "maybe param" "maybe type" "temp"
    (710971 'move' call_tmp[710968](431790 call isTrue tmp[431789]))
    (575933 'move' tmp[575928](575931 call _cond_test call_tmp[710968]))
    if tmp[575928]
    {
      unknown tmp[575935] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[710973] "expr temp" "maybe param" "maybe type" "temp"
      (710976 'move' call_tmp[710973](225107 call + i[225085] 1))
      unknown call_tmp[710978] "expr temp" "maybe param" "maybe type" "temp"
      (710981 'move' call_tmp[710978](225109 'field by num' x[225079] call_tmp[710973]))
      unknown call_tmp[710983] "expr temp" "maybe param" "maybe type" "temp"
      (710986 'move' call_tmp[710983](225111 call isType call_tmp[710978]))
      (575937 'move' tmp[575935](431793 call isTrue call_tmp[710983]))
      (575942 'move' tmp[575927](575939 '_paramFoldLogical' tmp[575928] tmp[575935]))
    }
    {
      (575947 'move' tmp[575927](575944 '_paramFoldLogical' tmp[575928] 0))
    }
    (748383 call chpl_statementLevelSymbol tmp[575927])
  }
  function getField[225135](const  ref arg x[225132]:_any[178](?), param arg i[225138]:int(64)[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532934] "RVV" "temp"
    unknown call_tmp[710988] "expr temp" "maybe param" "maybe type" "temp"
    (710991 'move' call_tmp[710988](225146 call + i[225138] 1))
    unknown call_tmp[710993] "expr temp" "maybe param" "maybe type" "temp"
    (710996 'move' call_tmp[710993](225148 'field by num' x[225132] call_tmp[710988]))
    (532939 'move' ret[532934](532938 'addr of' call_tmp[710993]))
    (532936 return ret[532934])
  }
  function getField[225161](const  ref arg x[225158]:_any[178](?), param arg s[225164]:string[26]) param : _unknown[51]
  {
    unknown ret[532943] "RVV" "param" "temp"
    unknown call_tmp[710998] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711001 'move' call_tmp[710998](464991 'typeof' x[225158]))
    unknown call_tmp[711003] "expr temp" "maybe param" "maybe type" "temp"
    (711006 'move' call_tmp[711003](225198 call getFieldIndex call_tmp[710998] s[225164]))
    unknown call_tmp[711008] "expr temp" "maybe param" "maybe type" "temp"
    (711011 'move' call_tmp[711008](225199 call getField x[225158] call_tmp[711003]))
    (532948 'move' ret[532943](532947 'deref' call_tmp[711008]))
    (532945 return ret[532943])
  }
  where {
    unknown tmp[431831] "maybe param" "temp"
    unknown call_tmp[711013] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711016 'move' call_tmp[711013](464993 'typeof' x[225158]))
    unknown call_tmp[711018] "expr temp" "maybe param" "maybe type" "temp"
    (711021 'move' call_tmp[711018](225171 call getFieldIndex call_tmp[711013] s[225164]))
    unknown call_tmp[711023] "expr temp" "maybe param" "maybe type" "temp"
    (711026 'move' call_tmp[711023](225173 call - 1))
    (431842 'move' tmp[431831](225175 call != call_tmp[711018] call_tmp[711023]))
    unknown call_tmp[711028] "expr temp" "maybe param" "maybe type" "temp"
    (711031 'move' call_tmp[711028](431844 call _cond_invalid tmp[431831]))
    if call_tmp[711028]
    {
      (431847 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575954] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575955] "maybe param" "temp"
    unknown call_tmp[711033] "expr temp" "maybe param" "maybe type" "temp"
    (711036 'move' call_tmp[711033](431832 call isTrue tmp[431831]))
    (575960 'move' tmp[575955](575958 call _cond_test call_tmp[711033]))
    if tmp[575955]
    {
      unknown tmp[575962] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711038] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711041 'move' call_tmp[711038](464995 'typeof' x[225158]))
      unknown call_tmp[711043] "expr temp" "maybe param" "maybe type" "temp"
      (711046 'move' call_tmp[711043](225185 call getFieldIndex call_tmp[711038] s[225164]))
      unknown call_tmp[711048] "expr temp" "maybe param" "maybe type" "temp"
      (711051 'move' call_tmp[711048](225186 call getField x[225158] call_tmp[711043]))
      unknown call_tmp[711053] "expr temp" "maybe param" "maybe type" "temp"
      (711056 'move' call_tmp[711053](225188 call isParam call_tmp[711048]))
      (575964 'move' tmp[575962](431835 call isTrue call_tmp[711053]))
      (575969 'move' tmp[575954](575966 '_paramFoldLogical' tmp[575955] tmp[575962]))
    }
    {
      (575974 'move' tmp[575954](575971 '_paramFoldLogical' tmp[575955] 0))
    }
    (748385 call chpl_statementLevelSymbol tmp[575954])
  }
  function getField[225213](const  ref arg x[225210]:_any[178](?), param arg s[225216]:string[26]) type : _unknown[51]
  {
    unknown ret[532952] "RVV" "temp" "type variable"
    unknown call_tmp[711058] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711061 'move' call_tmp[711058](464997 'typeof' x[225210]))
    unknown call_tmp[711063] "expr temp" "maybe param" "maybe type" "temp"
    (711066 'move' call_tmp[711063](225250 call getFieldIndex call_tmp[711058] s[225216]))
    unknown call_tmp[711068] "expr temp" "maybe param" "maybe type" "temp"
    (711071 'move' call_tmp[711068](225251 call getField x[225210] call_tmp[711063]))
    (532957 'move' ret[532952](532956 'deref' call_tmp[711068]))
    (532954 return ret[532952])
  }
  where {
    unknown tmp[431852] "maybe param" "temp"
    unknown call_tmp[711073] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711076 'move' call_tmp[711073](464999 'typeof' x[225210]))
    unknown call_tmp[711078] "expr temp" "maybe param" "maybe type" "temp"
    (711081 'move' call_tmp[711078](225223 call getFieldIndex call_tmp[711073] s[225216]))
    unknown call_tmp[711083] "expr temp" "maybe param" "maybe type" "temp"
    (711086 'move' call_tmp[711083](225225 call - 1))
    (431863 'move' tmp[431852](225227 call != call_tmp[711078] call_tmp[711083]))
    unknown call_tmp[711088] "expr temp" "maybe param" "maybe type" "temp"
    (711091 'move' call_tmp[711088](431865 call _cond_invalid tmp[431852]))
    if call_tmp[711088]
    {
      (431868 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[575981] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[575982] "maybe param" "temp"
    unknown call_tmp[711093] "expr temp" "maybe param" "maybe type" "temp"
    (711096 'move' call_tmp[711093](431853 call isTrue tmp[431852]))
    (575987 'move' tmp[575982](575985 call _cond_test call_tmp[711093]))
    if tmp[575982]
    {
      unknown tmp[575989] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711098] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711101 'move' call_tmp[711098](465001 'typeof' x[225210]))
      unknown call_tmp[711103] "expr temp" "maybe param" "maybe type" "temp"
      (711106 'move' call_tmp[711103](225237 call getFieldIndex call_tmp[711098] s[225216]))
      unknown call_tmp[711108] "expr temp" "maybe param" "maybe type" "temp"
      (711111 'move' call_tmp[711108](225238 call getField x[225210] call_tmp[711103]))
      unknown call_tmp[711113] "expr temp" "maybe param" "maybe type" "temp"
      (711116 'move' call_tmp[711113](225240 call isType call_tmp[711108]))
      (575991 'move' tmp[575989](431856 call isTrue call_tmp[711113]))
      (575996 'move' tmp[575981](575993 '_paramFoldLogical' tmp[575982] tmp[575989]))
    }
    {
      (576001 'move' tmp[575981](575998 '_paramFoldLogical' tmp[575982] 0))
    }
    (748387 call chpl_statementLevelSymbol tmp[575981])
  }
  function getField[225265](const  ref arg x[225262]:_any[178](?), param arg s[225268]:string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[532961] "RVV" "temp"
    unknown call_tmp[711118] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711121 'move' call_tmp[711118](465003 'typeof' x[225262]))
    unknown call_tmp[711123] "maybe param" "maybe type" "temp"
    (711126 'move' call_tmp[711123](225291 'field name to num' call_tmp[711118] s[225268]))
    unknown i[225292] "dead at end of block" "param"
    (546541 'init var' i[225292] call_tmp[711123])
    (225295 'end of statement')
    unknown call_tmp[711128] "expr temp" "maybe param" "maybe type" "temp"
    (711131 'move' call_tmp[711128](225299 call == i[225292] 0))
    unknown call_tmp[711133] "expr temp" "maybe param" "maybe type" "temp"
    (711136 'move' call_tmp[711133](225344 call _cond_test call_tmp[711128]))
    if call_tmp[711133]
    {
      unknown call_tmp[711138] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711141 'move' call_tmp[711138](465005 'typeof' x[225262]))
      unknown call_tmp[711143] "expr temp" "maybe param" "maybe type" "temp"
      (711146 'move' call_tmp[711143](225340 call _cast string[26] call_tmp[711138]))
      (225342 call compilerError "field " s[225268] " not found in " call_tmp[711143])
    }
    unknown call_tmp[711148] "expr temp" "maybe param" "maybe type" "temp"
    (711151 'move' call_tmp[711148](225353 'field by num' x[225262] i[225292]))
    (532966 'move' ret[532961](532965 'addr of' call_tmp[711148]))
    (532963 return ret[532961])
  }
  function isImplementedWithRecords[225362](arg t[225360]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[532970] "RVV" "param" "temp"
    unknown tmp[431873] "maybe param" "temp"
    (431884 'move' tmp[431873](225367 call isRangeType t[225360]))
    unknown call_tmp[711153] "expr temp" "maybe param" "maybe type" "temp"
    (711156 'move' call_tmp[711153](431886 call _cond_invalid tmp[431873]))
    if call_tmp[711153]
    {
      (431889 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[576008] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576009] "maybe param" "temp"
    unknown call_tmp[711158] "expr temp" "maybe param" "maybe type" "temp"
    (711161 'move' call_tmp[711158](431874 call isTrue tmp[431873]))
    (576014 'move' tmp[576009](576012 call _cond_test call_tmp[711158]))
    if tmp[576009]
    {
      (576019 'move' tmp[576008](576016 '_paramFoldLogical' tmp[576009] 1))
    }
    {
      unknown tmp[576021] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711163] "expr temp" "maybe param" "maybe type" "temp"
      (711166 'move' call_tmp[711163](225371 call isStringType t[225360]))
      (576023 'move' tmp[576021](431878 call isTrue call_tmp[711163]))
      (576028 'move' tmp[576008](576025 '_paramFoldLogical' tmp[576009] tmp[576021]))
    }
    (532975 'move' ret[532970](532974 'deref' tmp[576008]))
    (532972 return ret[532970])
  }
  function numImplementationFields[225383](arg t[225381]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[532979] "RVV" "param" "temp"
    unknown call_tmp[711168] "expr temp" "maybe param" "maybe type" "temp"
    (711171 'move' call_tmp[711168](225393 'num fields' t[225381]))
    (532985 'move' ret[532979](532984 'coerce' call_tmp[711168] int(64)[13]))
    (532981 return ret[532979])
  }
  where {
    (225389 call isImplementedWithRecords t[225381])
  }
  { scopeless type
    int(64)[13]
  }
  function getImplementationField[225408](const  ref arg x[225405]:_any[178](?), param arg i[225411]:int(64)[13]) type : _unknown[51] "no doc"
  {
    unknown ret[532989] "RVV" "temp" "type variable"
    unknown call_tmp[711173] "expr temp" "maybe param" "maybe type" "temp"
    (711176 'move' call_tmp[711173](225432 'field by num' x[225405] i[225411]))
    (532994 'move' ret[532989](532993 'deref' call_tmp[711173]))
    (532991 return ret[532989])
  }
  where {
    unknown tmp[431894] "maybe param" "temp"
    unknown call_tmp[711178] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711181 'move' call_tmp[711178](465007 'typeof' x[225405]))
    (431905 'move' tmp[431894](225417 call isImplementedWithRecords call_tmp[711178]))
    unknown call_tmp[711183] "expr temp" "maybe param" "maybe type" "temp"
    (711186 'move' call_tmp[711183](431907 call _cond_invalid tmp[431894]))
    if call_tmp[711183]
    {
      (431910 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576035] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576036] "maybe param" "temp"
    unknown call_tmp[711188] "expr temp" "maybe param" "maybe type" "temp"
    (711191 'move' call_tmp[711188](431895 call isTrue tmp[431894]))
    (576041 'move' tmp[576036](576039 call _cond_test call_tmp[711188]))
    if tmp[576036]
    {
      unknown tmp[576043] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711193] "expr temp" "maybe param" "maybe type" "temp"
      (711196 'move' call_tmp[711193](225423 'field by num' x[225405] i[225411]))
      unknown call_tmp[711198] "expr temp" "maybe param" "maybe type" "temp"
      (711201 'move' call_tmp[711198](225425 call isType call_tmp[711193]))
      (576045 'move' tmp[576043](431898 call isTrue call_tmp[711198]))
      (576050 'move' tmp[576035](576047 '_paramFoldLogical' tmp[576036] tmp[576043]))
    }
    {
      (576055 'move' tmp[576035](576052 '_paramFoldLogical' tmp[576036] 0))
    }
    (748389 call chpl_statementLevelSymbol tmp[576035])
  }
  function getImplementationField[225446](const  ref arg x[225443]:_any[178](?), param arg i[225449]:int(64)[13]) param : _unknown[51] "no doc"
  {
    unknown ret[532998] "RVV" "param" "temp"
    unknown call_tmp[711203] "expr temp" "maybe param" "maybe type" "temp"
    (711206 'move' call_tmp[711203](225470 'field by num' x[225443] i[225449]))
    (533003 'move' ret[532998](533002 'deref' call_tmp[711203]))
    (533000 return ret[532998])
  }
  where {
    unknown tmp[431915] "maybe param" "temp"
    unknown call_tmp[711208] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711211 'move' call_tmp[711208](465009 'typeof' x[225443]))
    (431926 'move' tmp[431915](225455 call isImplementedWithRecords call_tmp[711208]))
    unknown call_tmp[711213] "expr temp" "maybe param" "maybe type" "temp"
    (711216 'move' call_tmp[711213](431928 call _cond_invalid tmp[431915]))
    if call_tmp[711213]
    {
      (431931 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[576062] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[576063] "maybe param" "temp"
    unknown call_tmp[711218] "expr temp" "maybe param" "maybe type" "temp"
    (711221 'move' call_tmp[711218](431916 call isTrue tmp[431915]))
    (576068 'move' tmp[576063](576066 call _cond_test call_tmp[711218]))
    if tmp[576063]
    {
      unknown tmp[576070] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[711223] "expr temp" "maybe param" "maybe type" "temp"
      (711226 'move' call_tmp[711223](225461 'field by num' x[225443] i[225449]))
      unknown call_tmp[711228] "expr temp" "maybe param" "maybe type" "temp"
      (711231 'move' call_tmp[711228](225463 call isParam call_tmp[711223]))
      (576072 'move' tmp[576070](431919 call isTrue call_tmp[711228]))
      (576077 'move' tmp[576062](576074 '_paramFoldLogical' tmp[576063] tmp[576070]))
    }
    {
      (576082 'move' tmp[576062](576079 '_paramFoldLogical' tmp[576063] 0))
    }
    (748391 call chpl_statementLevelSymbol tmp[576062])
  }
  function getImplementationField[225484](const  ref arg x[225481]:_any[178](?), param arg i[225487]:int(64)[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    unknown ret[533007] "RVV" "temp"
    unknown call_tmp[711233] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711236 'move' call_tmp[711233](465011 'typeof' x[225481]))
    unknown call_tmp[711238] "expr temp" "maybe param" "maybe type" "temp"
    (711241 'move' call_tmp[711238](225493 call isImplementedWithRecords call_tmp[711233]))
    unknown call_tmp[711243] "expr temp" "maybe param" "maybe type" "temp"
    (711246 'move' call_tmp[711243](225494 call ! call_tmp[711238]))
    unknown call_tmp[711248] "expr temp" "maybe param" "maybe type" "temp"
    (711251 'move' call_tmp[711248](225538 call _cond_test call_tmp[711243]))
    if call_tmp[711248]
    {
      unknown call_tmp[711253] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711256 'move' call_tmp[711253](465013 'typeof' x[225481]))
      unknown call_tmp[711258] "expr temp" "maybe param" "maybe type" "temp"
      (711261 'move' call_tmp[711258](225517 call _cast string[26] call_tmp[711253]))
      (225536 call compilerError "an argument of the type " call_tmp[711258] " is not valid for getImplementationField()")
    }
    unknown call_tmp[711263] "expr temp" "maybe param" "maybe type" "temp"
    (711266 'move' call_tmp[711263](225548 'field by num' x[225481] i[225487]))
    (533012 'move' ret[533007](533011 'addr of' call_tmp[711263]))
    (533009 return ret[533007])
  }
  function getFieldRef[225560](ref arg x[225557]:_any[178](?), param arg i[225563]:int(64)[13]) ref : _unknown[51] "inline" "unsafe"
  {
    unknown ret[533016] "RVV" "temp"
    unknown call_tmp[711268] "expr temp" "maybe param" "maybe type" "temp"
    (711271 'move' call_tmp[711268](225571 call + i[225563] 1))
    unknown call_tmp[711273] "expr temp" "maybe param" "maybe type" "temp"
    (711276 'move' call_tmp[711273](225573 'field by num' x[225557] call_tmp[711268]))
    (533021 'move' ret[533016](533020 'addr of' call_tmp[711273]))
    (533018 return ret[533016])
  }
  function getFieldRef[225586](ref arg x[225583]:_any[178](?), param arg s[225589]:string[26]) ref : _unknown[51] "unsafe"
  {
    unknown ret[533025] "RVV" "temp"
    unknown call_tmp[711278] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (711281 'move' call_tmp[711278](465015 'typeof' x[225583]))
    unknown call_tmp[711283] "maybe param" "maybe type" "temp"
    (711286 'move' call_tmp[711283](225596 'field name to num' call_tmp[711278] s[225589]))
    unknown i[225597] "dead at end of block" "param"
    (546543 'init var' i[225597] call_tmp[711283])
    (225600 'end of statement')
    unknown call_tmp[711288] "expr temp" "maybe param" "maybe type" "temp"
    (711291 'move' call_tmp[711288](225604 call == i[225597] 0))
    unknown call_tmp[711293] "expr temp" "maybe param" "maybe type" "temp"
    (711296 'move' call_tmp[711293](225617 call _cond_test call_tmp[711288]))
    if call_tmp[711293]
    {
      unknown call_tmp[711298] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (711301 'move' call_tmp[711298](465017 'typeof' x[225583]))
      unknown call_tmp[711303] "expr temp" "maybe param" "maybe type" "temp"
      (711306 'move' call_tmp[711303](225613 call _cast string[26] call_tmp[711298]))
      (225615 call compilerError "field " s[225589] " not found in " call_tmp[711303])
    }
    unknown call_tmp[711308] "expr temp" "maybe param" "maybe type" "temp"
    (711311 'move' call_tmp[711308](225626 'field by num' x[225583] i[225597]))
    (533030 'move' ret[533025](533029 'addr of' call_tmp[711308]))
    (533027 return ret[533025])
  }
  function getFieldIndex[225635](arg t[225633]:_any[178](?), param arg s[225638]:string[26]) param : _unknown[51]
  {
    unknown ret[533034] "RVV" "param" "temp"
    unknown call_tmp[711313] "expr temp" "maybe param" "maybe type" "temp"
    (711316 'move' call_tmp[711313](225647 call checkQueryT t[225633]))
    unknown call_tmp[711318] "expr temp" "maybe param" "maybe type" "temp"
    (711321 'move' call_tmp[711318](225649 'field name to num' call_tmp[711313] s[225638]))
    unknown call_tmp[711323] "expr temp" "maybe param" "maybe type" "temp"
    (711326 'move' call_tmp[711323](225651 call - call_tmp[711318] 1))
    (533040 'move' ret[533034](533039 'coerce' call_tmp[711323] int(64)[13]))
    (533036 return ret[533034])
  }
  { scopeless type
    int(64)[13]
  }
  function hasField[225663](arg t[225661]:_any[178](?), param arg s[225666]:string[26]) param : _unknown[51]
  {
    unknown ret[533044] "RVV" "param" "temp"
    unknown call_tmp[711328] "expr temp" "maybe param" "maybe type" "temp"
    (711331 'move' call_tmp[711328](225674 call getFieldIndex t[225661] s[225666]))
    unknown call_tmp[711333] "expr temp" "maybe param" "maybe type" "temp"
    (711336 'move' call_tmp[711333](225676 call >= call_tmp[711328] 0))
    (533050 'move' ret[533044](533049 'coerce' call_tmp[711333] bool[10]))
    (533046 return ret[533044])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225688](arg t[225686]:_any[178](?), param arg i[225691]:int(64)[13]) param : _unknown[51]
  {
    unknown ret[533054] "RVV" "param" "temp"
    unknown call_tmp[711338] "expr temp" "maybe param" "maybe type" "temp"
    (711341 'move' call_tmp[711338](225716 call checkQueryT t[225686]))
    unknown call_tmp[711343] "expr temp" "maybe param" "maybe type" "temp"
    (711346 'move' call_tmp[711343](225721 call checkQueryT t[225686]))
    unknown call_tmp[711348] "expr temp" "maybe param" "maybe type" "temp"
    (711351 'move' call_tmp[711348](225724 call getFieldName call_tmp[711343] i[225691]))
    unknown call_tmp[711353] "expr temp" "maybe param" "maybe type" "temp"
    (711356 'move' call_tmp[711353](225725 'is bound' call_tmp[711338] call_tmp[711348]))
    (533060 'move' ret[533054](533059 'coerce' call_tmp[711353] bool[10]))
    (533056 return ret[533054])
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225736](arg t[225734]:_any[178](?), param arg s[225739]:string[26]) param : _unknown[51]
  {
    unknown ret[533064] "RVV" "param" "temp"
    unknown call_tmp[711358] "expr temp" "maybe param" "maybe type" "temp"
    (711361 'move' call_tmp[711358](225748 call checkQueryT t[225734]))
    unknown call_tmp[711363] "expr temp" "maybe param" "maybe type" "temp"
    (711366 'move' call_tmp[711363](225750 'is bound' call_tmp[711358] s[225739]))
    (533070 'move' ret[533064](533069 'coerce' call_tmp[711363] bool[10]))
    (533066 return ret[533064])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225763](param arg fname[225760]:string[26]) param : _unknown[51]
  {
    unknown ret[533074] "RVV" "param" "temp"
    unknown call_tmp[711368] "expr temp" "maybe param" "maybe type" "temp"
    (711371 'move' call_tmp[711368](225785 'call and fn resolves' fname[225760]))
    (533080 'move' ret[533074](533079 'coerce' call_tmp[711368] bool[10]))
    (533076 return ret[533074])
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225798](param arg fname[225795]:string[26], arg args[225801]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533084] "RVV" "param" "temp"
    unknown call_tmp[711373] "expr temp" "maybe param" "maybe type" "temp"
    (711376 'move' call_tmp[711373](225810 'call and fn resolves' fname[225795](225809 'expand_tuple' args[225801])))
    (533090 'move' ret[533084](533089 'coerce' call_tmp[711373] bool[10]))
    (533086 return ret[533084])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225821](arg obj[225819]:_any[178](?), param arg fname[225824]:string[26]) param : _unknown[51]
  {
    unknown ret[533094] "RVV" "param" "temp"
    unknown call_tmp[711378] "expr temp" "maybe param" "maybe type" "temp"
    (711381 'move' call_tmp[711378](225848 'method call and fn resolves' obj[225819] fname[225824]))
    (533100 'move' ret[533094](533099 'coerce' call_tmp[711378] bool[10]))
    (533096 return ret[533094])
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225859](arg obj[225857]:_any[178](?), param arg fname[225862]:string[26], arg args[225866]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533104] "RVV" "param" "temp"
    unknown call_tmp[711383] "expr temp" "maybe param" "maybe type" "temp"
    (711386 'move' call_tmp[711383](225876 'method call and fn resolves' obj[225857] fname[225862](225875 'expand_tuple' args[225866])))
    (533110 'move' ret[533104](533109 'coerce' call_tmp[711383] bool[10]))
    (533106 return ret[533104])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225887](arg t[225885]:_any[178](?), param arg fname[225890]:string[26]) param : _unknown[51]
  {
    unknown ret[533114] "RVV" "param" "temp"
    unknown call_tmp[711388] "expr temp" "maybe param" "maybe type" "temp"
    (711391 'move' call_tmp[711388](225898 'method call and fn resolves' t[225885] fname[225890]))
    (533120 'move' ret[533114](533119 'coerce' call_tmp[711388] bool[10]))
    (533116 return ret[533114])
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225909](arg t[225907]:_any[178](?), param arg fname[225912]:string[26], arg args[225916]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[533124] "RVV" "param" "temp"
    unknown call_tmp[711393] "expr temp" "maybe param" "maybe type" "temp"
    (711396 'move' call_tmp[711393](225926 'method call and fn resolves' t[225907] fname[225912](225925 'expand_tuple' args[225916])))
    (533130 'move' ret[533124](533129 'coerce' call_tmp[711393] bool[10]))
    (533126 return ret[533124])
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[225935]() param : _unknown[51] "get line number" "no return value for void"
  {
    unknown ret[533134] "RVV" "param" "temp"
    (533136 return ret[533134])
  }
  { scopeless type
    int(64)[13]
  }
  function getFileName[225944]() param : _unknown[51] "get file name" "no return value for void"
  {
    unknown ret[533140] "RVV" "param" "temp"
    (533142 return ret[533140])
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[225953]() param : _unknown[51] "get function name" "no return value for void"
  {
    unknown ret[533146] "RVV" "param" "temp"
    (533148 return ret[533146])
  }
  { scopeless type
    string[26]
  }
  function getModuleName[225962]() param : _unknown[51] "get module name" "no return value for void"
  {
    unknown ret[533152] "RVV" "param" "temp"
    (533154 return ret[533152])
  }
  { scopeless type
    string[26]
  }
  (355339 'used modules list'(353046 'use' ChapelStandard[20267]))
}