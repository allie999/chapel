AST dump for DefaultSparse after pass scopeResolve.
Module use list: ChapelStandard RangeChunk DSIUtil Search Sort 

{
  unknown debugDefaultSparse[161565] "config" "param" 0
  (161568 'end of statement')
  function DefaultSparseDom[164332](?).linksDistribution[161600](arg _mt[164336]:_MT[238], arg this[164334]:DefaultSparseDom[164332](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (161603 return 0)
  }
  function DefaultSparseDom[164332](?).dsiLinksDistribution[161610](arg _mt[164340]:_MT[238], arg this[164338]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (161613 return 0)
  }
  function DefaultSparseDom[164332](?).init[161622](arg _mt[164344]:_MT[238], arg this[164342]:DefaultSparseDom[164332](?), param arg rank[161620]:_any[178](?), arg idxType[161624]:_any[178](?), arg dist[161628] :
  unmanaged DefaultDist[415444], arg parentDom[161632] :
  _domain[125902](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (161643 call(161636 call .(361156 call . this[164342] c"super") c"init") rank[161620] idxType[161624] parentDom[161632])
    (161651 call =(161647 call . this[164342] c"dist") dist[161628])
  }
  function DefaultSparseDom[164332](?).getNNZ[161658](arg _mt[164348]:_MT[238], arg this[164346]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (161662 return(387422 call . this[164346] c"_nnz"))
  }
  { scopeless type
    int(64)[13]
  }
  function DefaultSparseDom[164332](?).dsiBuildArray[161672](arg _mt[164352]:_MT[238], arg this[164350]:DefaultSparseDom[164332](?), arg eltType[161670]:_any[178](?), param arg initElts[161675] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (161697 return(161680 'new'(_chpl_manager = unmanaged[220](?))(161696 call DefaultSparseArr[387426](?)(eltType = eltType[161670])(rank =(387432 call . this[164350] c"rank"))(idxType =(387437 call . this[164350] c"idxType"))(dom =(161692 call _to_unmanaged this[164350]))(initElts = initElts[161675]))))
  }
  function DefaultSparseDom[164332](?).dsiIndsIterSafeForRemoving[161704](arg _mt[164356]:_MT[238], arg this[164354]:DefaultSparseDom[164332](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[161723] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161724] "expr temp" "temp"
      (161733 'move' _iterator[161724](161731 call _getIterator(161744 call chpl_direct_range_iter 1(387450 call . this[164354] c"_nnz")(161740 call - 1))))
      Defer
      {
        {
          (161760 call _freeIterator _iterator[161724])
        }
      }
      { scopeless type
        (161749 'move' _indexOfInterest[161723](161746 call iteratorIndex _iterator[161724]))
      }
      ForLoop[161725]
      {
        unknown i[161753] "index var" "insert auto destroy"
        (161755 'move' i[161753] _indexOfInterest[161723])
        {
          (161720 yield(161719 call(387444 call . this[164354] c"_indices") i[161753]))
        }
        label _continueLabel[161728]
        _indexOfInterest[161723]
        _iterator[161724]
      }
      label _breakLabel[161729]
    }
  }
  function DefaultSparseDom[164332](?).these[161772](arg _mt[164360]:_MT[238], arg this[164358]:DefaultSparseDom[164332](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[161786] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161787] "expr temp" "temp"
      (161796 'move' _iterator[161787](161794 call _getIterator(161801 call chpl_direct_range_iter 1(387461 call . this[164358] c"_nnz") 1)))
      Defer
      {
        {
          (161817 call _freeIterator _iterator[161787])
        }
      }
      { scopeless type
        (161806 'move' _indexOfInterest[161786](161803 call iteratorIndex _iterator[161787]))
      }
      ForLoop[161788]
      {
        unknown i[161810] "index var" "insert auto destroy"
        (161812 'move' i[161810] _indexOfInterest[161786])
        {
          (161783 yield(161782 call(387455 call . this[164358] c"_indices") i[161810]))
        }
        label _continueLabel[161791]
        _indexOfInterest[161786]
        _iterator[161787]
      }
      label _breakLabel[161792]
    }
  }
  function DefaultSparseDom[164332](?).these[161833](arg _mt[164364]:_MT[238], arg this[164362]:DefaultSparseDom[164332](?), param arg tag[161830] :
  iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    const numElems[161843] "const"(387468 call . this[164362] c"_nnz")
    (161846 'end of statement')
    const numChunks[161856] "const"(161854 call _cast(161853 'typeof' numElems[161843])(161851 call _computeNumChunks numElems[161843]))
    (161859 'end of statement')
    if(161919 call _cond_test debugDefaultSparse[161565])
    {
      (161916 call writeln "DefaultSparseDom standalone: " numChunks[161856] " chunks, " numElems[161843] " elems")
    }
    if(162229 call _cond_test(161925 call <= numChunks[161856] 1))
    {
      {
        unknown _indexOfInterest[161939] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[161940] "expr temp" "temp"
        (161949 'move' _iterator[161940](161947 call _getIterator(161954 call chpl_direct_range_iter 1 numElems[161843] 1)))
        Defer
        {
          {
            (161970 call _freeIterator _iterator[161940])
          }
        }
        { scopeless type
          (161959 'move' _indexOfInterest[161939](161956 call iteratorIndex _iterator[161940]))
        }
        ForLoop[161941]
        {
          unknown i[161963] "index var" "insert auto destroy"
          (161965 'move' i[161963] _indexOfInterest[161939])
          {
            (161936 yield(161935 call(387479 call . this[164362] c"_indices") i[161963]))
          }
          label _continueLabel[161944]
          _indexOfInterest[161939]
          _iterator[161940]
        }
        label _breakLabel[161945]
      }
    }
    {
      {
        unknown tmpIter[162032] "expr temp" "maybe ref" "no copy" "temp"
        (162035 'move' tmpIter[162032](161989 call chunks module=[255] RangeChunk[266458](161985 call chpl_build_bounded_range 1 numElems[161843]) numChunks[161856]))
        unknown isRngDomArr[162209] "maybe param" "temp"
        (162224 'move' isRngDomArr[162209](162222 call ||(162211 call isBoundedRange tmpIter[162032])(162220 call ||(162214 call isDomain tmpIter[162032])(162217 call isArray tmpIter[162032]))))
        if isRngDomArr[162209]
        {
          const _coforallCount[162076] "const" "end count" "temp"
          (162145 'move' _coforallCount[162076](162142 call _endCountAlloc 1))
          unknown numTasks[162077] "temp"
          (162129 'move' numTasks[162077](162125 call . tmpIter[162032] c"size"))
          (162120 call _upEndCount _coforallCount[162076] 1 numTasks[162077])
          (162117 call chpl_resetTaskSpawn numTasks[162077])
          unknown _indexOfInterest[162084] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162085] "expr temp" "temp"
          (162094 'move' _iterator[162085](162092 call _getIterator tmpIter[162032]))
          Defer
          {
            {
              (162110 call _freeIterator _iterator[162085])
            }
          }
          { scopeless type
            (162099 'move' _indexOfInterest[162084](162096 call iteratorIndex _iterator[162085]))
          }
          ForLoop[162086]
          {
            unknown chunk[162103] "coforall index var" "index var" "insert auto destroy"
            (162105 'move' chunk[162103] _indexOfInterest[162084])
            {
              {
                unknown _indexOfInterest[162038] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162040] "expr temp" "temp"
                (162042 'move' _iterator[162040](162045 call _getIterator chunk[162103]))
                Defer
                {
                  {
                    (162049 call _freeIterator _iterator[162040])
                  }
                }
                { scopeless type
                  (162053 'move' _indexOfInterest[162038](162056 call iteratorIndex _iterator[162040]))
                }
                ForLoop[162058]
                {
                  unknown i[162061] "index var" "insert auto destroy"
                  (162063 'move' i[162061] _indexOfInterest[162038])
                  (162067 yield(162069 call(387496 call . this[164362] c"_indices") i[162061]))
                  label _continueLabel[162071]
                  _indexOfInterest[162038]
                  _iterator[162040]
                }
                label _breakLabel[162073]
              }
              (162079 call _downEndCount _coforallCount[162076] nil[44])
              (162078 'coforall loop')
            }
            label _continueLabel[162089]
            _indexOfInterest[162084]
            _iterator[162085]
          }
          label _breakLabel[162090]
          Defer
          {
            {
              (162132 call _endCountFree _coforallCount[162076])
            }
          }
          (162137 call _waitEndCount _coforallCount[162076] 1 numTasks[162077])
        }
        {
          const _coforallCount[162149] "const" "end count" "temp"
          (162206 'move' _coforallCount[162149](162203 call _endCountAlloc 1))
          unknown _indexOfInterest[162157] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162158] "expr temp" "temp"
          (162167 'move' _iterator[162158](162165 call _getIterator tmpIter[162032]))
          Defer
          {
            {
              (162183 call _freeIterator _iterator[162158])
            }
          }
          { scopeless type
            (162172 'move' _indexOfInterest[162157](162169 call iteratorIndex _iterator[162158]))
          }
          ForLoop[162159]
          {
            unknown chunk[162176] "coforall index var" "index var" "insert auto destroy"
            (162178 'move' chunk[162176] _indexOfInterest[162157])
            (162190 call _upEndCount _coforallCount[162149] 1)
            {
              {
                unknown _indexOfInterest[161998] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[161999] "expr temp" "temp"
                (162008 'move' _iterator[161999](162006 call _getIterator chunk[162176]))
                Defer
                {
                  {
                    (162024 call _freeIterator _iterator[161999])
                  }
                }
                { scopeless type
                  (162013 'move' _indexOfInterest[161998](162010 call iteratorIndex _iterator[161999]))
                }
                ForLoop[162000]
                {
                  unknown i[162017] "index var" "insert auto destroy"
                  (162019 'move' i[162017] _indexOfInterest[161998])
                  (161996 yield(161995 call(387489 call . this[164362] c"_indices") i[162017]))
                  label _continueLabel[162003]
                  _indexOfInterest[161998]
                  _iterator[161999]
                }
                label _breakLabel[162004]
              }
              (162152 call _downEndCount _coforallCount[162149] nil[44])
              (162151 'coforall loop')
            }
            label _continueLabel[162162]
            _indexOfInterest[162157]
            _iterator[162158]
          }
          label _breakLabel[162163]
          Defer
          {
            {
              (162194 call _endCountFree _coforallCount[162149])
            }
          }
          (162199 call _waitEndCount _coforallCount[162149] 1)
        }
        (361162 'referenced modules list' RangeChunk[266458])
      }
    }
  }
  where {
    (161840 call == tag[161830] standalone[451])
  }
  function DefaultSparseDom[164332](?).these[162242](arg _mt[164368]:_MT[238], arg this[164366]:DefaultSparseDom[164332](?), param arg tag[162239] :
  iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    const numElems[162252] "const"(387504 call . this[164366] c"_nnz")
    (162255 'end of statement')
    const numChunks[162265] "const"(162263 call _cast(162262 'typeof' numElems[162252])(162260 call _computeNumChunks numElems[162252]))
    (162268 'end of statement')
    if(162295 call _cond_test debugDefaultSparse[161565])
    {
      (162293 call writeln "DefaultSparseDom leader: " numChunks[162265] " chunks, " numElems[162252] " elems")
    }
    if(162509 call _cond_test(162302 call <= numChunks[162265] 1))
    {
      (162310 yield(162308 call _build_tuple this[164366] 1 numElems[162252]))
    }
    {
      unknown tmpIter[162338] "expr temp" "maybe ref" "no copy" "temp"
      (162341 'move' tmpIter[162338](162323 call chunks module=[255] RangeChunk[266458](162319 call chpl_build_bounded_range 1 numElems[162252]) numChunks[162265]))
      unknown isRngDomArr[162490] "maybe param" "temp"
      (162505 'move' isRngDomArr[162490](162503 call ||(162492 call isBoundedRange tmpIter[162338])(162501 call ||(162495 call isDomain tmpIter[162338])(162498 call isArray tmpIter[162338]))))
      if isRngDomArr[162490]
      {
        const _coforallCount[162357] "const" "end count" "temp"
        (162426 'move' _coforallCount[162357](162423 call _endCountAlloc 1))
        unknown numTasks[162358] "temp"
        (162410 'move' numTasks[162358](162406 call . tmpIter[162338] c"size"))
        (162401 call _upEndCount _coforallCount[162357] 1 numTasks[162358])
        (162398 call chpl_resetTaskSpawn numTasks[162358])
        unknown _indexOfInterest[162365] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162366] "expr temp" "temp"
        (162375 'move' _iterator[162366](162373 call _getIterator tmpIter[162338]))
        Defer
        {
          {
            (162391 call _freeIterator _iterator[162366])
          }
        }
        { scopeless type
          (162380 'move' _indexOfInterest[162365](162377 call iteratorIndex _iterator[162366]))
        }
        ForLoop[162367]
        {
          unknown chunk[162384] "coforall index var" "index var" "insert auto destroy"
          (162386 'move' chunk[162384] _indexOfInterest[162365])
          {
            (162344 yield(162346 call _build_tuple this[164366](162349 call . chunk[162384] c"first")(162353 call . chunk[162384] c"last")))
            (162360 call _downEndCount _coforallCount[162357] nil[44])
            (162359 'coforall loop')
          }
          label _continueLabel[162370]
          _indexOfInterest[162365]
          _iterator[162366]
        }
        label _breakLabel[162371]
        Defer
        {
          {
            (162413 call _endCountFree _coforallCount[162357])
          }
        }
        (162418 call _waitEndCount _coforallCount[162357] 1 numTasks[162358])
      }
      {
        const _coforallCount[162430] "const" "end count" "temp"
        (162487 'move' _coforallCount[162430](162484 call _endCountAlloc 1))
        unknown _indexOfInterest[162438] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162439] "expr temp" "temp"
        (162448 'move' _iterator[162439](162446 call _getIterator tmpIter[162338]))
        Defer
        {
          {
            (162464 call _freeIterator _iterator[162439])
          }
        }
        { scopeless type
          (162453 'move' _indexOfInterest[162438](162450 call iteratorIndex _iterator[162439]))
        }
        ForLoop[162440]
        {
          unknown chunk[162457] "coforall index var" "index var" "insert auto destroy"
          (162459 'move' chunk[162457] _indexOfInterest[162438])
          (162471 call _upEndCount _coforallCount[162430] 1)
          {
            (162336 yield(162334 call _build_tuple this[164366](162326 call . chunk[162457] c"first")(162331 call . chunk[162457] c"last")))
            (162433 call _downEndCount _coforallCount[162430] nil[44])
            (162432 'coforall loop')
          }
          label _continueLabel[162443]
          _indexOfInterest[162438]
          _iterator[162439]
        }
        label _breakLabel[162444]
        Defer
        {
          {
            (162475 call _endCountFree _coforallCount[162430])
          }
        }
        (162480 call _waitEndCount _coforallCount[162430] 1)
      }
      (361169 'referenced modules list' RangeChunk[266458])
    }
  }
  where {
    (162249 call == tag[162239] leader[447])
  }
  function DefaultSparseDom[164332](?).these[162523](arg _mt[164372]:_MT[238], arg this[164370]:DefaultSparseDom[164332](?), param arg tag[162520] :
  iterKind[453], arg followThis[162531] :
  (162529 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[162549] "temp" followThis[162531]
    (162559 call _check_tuple_var_decl tmp[162549] 3)
    unknown followThisDom[162541](162550 call tmp[162549] 0)
    unknown startIx[162543](162553 call tmp[162549] 1)
    unknown endIx[162545](162556 call tmp[162549] 2)
    (162564 'end of statement')
    if(162593 call _cond_test(162568 call != followThisDom[162541] this[164370]))
    {
      (162591 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays")
    }
    if(162623 call _cond_test debugDefaultSparse[161565])
    {
      (162621 call writeln "DefaultSparseDom follower: " startIx[162543] ".." endIx[162545])
    }
    {
      unknown _indexOfInterest[162639] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162640] "expr temp" "temp"
      (162649 'move' _iterator[162640](162647 call _getIterator(162654 call chpl_direct_range_iter startIx[162543] endIx[162545] 1)))
      Defer
      {
        {
          (162670 call _freeIterator _iterator[162640])
        }
      }
      { scopeless type
        (162659 'move' _indexOfInterest[162639](162656 call iteratorIndex _iterator[162640]))
      }
      ForLoop[162641]
      {
        unknown i[162663] "index var" "insert auto destroy"
        (162665 'move' i[162663] _indexOfInterest[162639])
        (162637 yield(162636 call(387529 call . this[164370] c"_indices") i[162663]))
        label _continueLabel[162644]
        _indexOfInterest[162639]
        _iterator[162640]
      }
      label _breakLabel[162645]
    }
  }
  where {
    (162539 call == tag[162520] follower[449])
  }
  function DefaultSparseDom[164332](?).these[162686](arg _mt[164376]:_MT[238], arg this[164374]:DefaultSparseDom[164332](?), param arg tag[162683] :
  iterKind[453], arg followThis[162688]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (162716 call compilerError "Sparse iterators can't yet be zippered with others")
    unknown dummy[162723](162721 call *(387539 call . this[164374] c"rank")(387544 call . this[164374] c"idxType"))
    (162726 'end of statement')
    (162728 yield dummy[162723])
  }
  where {
    (162695 call == tag[162683] follower[449])
  }
  function DefaultSparseDom[164332](?).find[162737](arg _mt[164380]:_MT[238], arg this[164378]:DefaultSparseDom[164332](?), arg ind[162735]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(162787 call _cond_test(162760 call &&(162751 call &&(162745 call ==(387550 call . this[164378] c"rank") 1)(162750 call isTuple ind[162735]))(162758 call ==(162754 call . ind[162735] c"size") 1)))
    {
      (162774 return(162773 call binarySearch(387556 call . this[164378] c"_indices")(162768 call ind[162735] 0)(lo = 1)(hi =(387562 call . this[164378] c"_nnz"))))
    }
    {
      (162785 return(162784 call binarySearch(387567 call . this[164378] c"_indices") ind[162735](lo = 1)(hi =(387573 call . this[164378] c"_nnz"))))
    }
    (355165 'used modules list'(162740 'use' Search[291233]))
  }
  function DefaultSparseDom[164332](?).dsiMember[162799](arg _mt[164384]:_MT[238], arg this[164382]:DefaultSparseDom[164332](?), arg ind[162797]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    const tmp[162810] "const" "temp"(162809 call(387577 call . this[164382] c"find") ind[162797])
    (162817 call _check_tuple_var_decl tmp[162810] 2)
    const found[162801] "const"(162811 call tmp[162810] 0)
    const loc[162803] "const"(162814 call tmp[162810] 1)
    (162822 'end of statement')
    (162825 return found[162801])
  }
  function DefaultSparseDom[164332](?).dsiFirst[162831](arg _mt[164388]:_MT[238], arg this[164386]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (162843 return(162842 call(387584 call . this[164386] c"_indices")(162838 call .(162835 call .(361183 call . this[164386] c"_indices") c"_dom") c"first")))
  }
  function DefaultSparseDom[164332](?).dsiLast[162850](arg _mt[164392]:_MT[238], arg this[164390]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (162856 return(162855 call(387589 call . this[164390] c"_indices")(387594 call . this[164390] c"_nnz")))
  }
  function DefaultSparseDom[164332](?).add_help[162865](arg _mt[164396]:_MT[238], arg this[164394]:DefaultSparseDom[164332](?), arg ind[162863]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    const tmp[162876] "const" "temp"(162875 call(387598 call . this[164394] c"find") ind[162863])
    (162883 call _check_tuple_var_decl tmp[162876] 2)
    const found[162867] "const"(162877 call tmp[162876] 0)
    const insertPt[162869] "const"(162880 call tmp[162876] 1)
    (162888 'end of statement')
    if(162894 call _cond_test found[162867])
    {
      (162892 return 0)
    }
    if(162908 call _cond_test 1)
    {
      (162906 call(162901 call . this[164394] c"boundsCheck") ind[162863])
    }
    (162915 call +=(387607 call . this[164394] c"_nnz") 1)
    const oldNNZDomSize[162922] "const"(162919 call .(361189 call . this[164394] c"nnzDom") c"size")
    (162925 'end of statement')
    (162929 call(387613 call . this[164394] c"_grow")(387618 call . this[164394] c"_nnz"))
    {
      unknown _indexOfInterest[162959] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162960] "expr temp" "temp"
      (162969 'move' _iterator[162960](162967 call _getIterator(162986 call chpl_direct_range_iter insertPt[162869](162983 call -(387636 call . this[164394] c"_nnz") 1)(162979 call - 1))))
      Defer
      {
        {
          (163002 call _freeIterator _iterator[162960])
        }
      }
      { scopeless type
        (162991 'move' _indexOfInterest[162959](162988 call iteratorIndex _iterator[162960]))
      }
      ForLoop[162961]
      {
        unknown i[162995] "index var" "insert auto destroy"
        (162997 'move' i[162995] _indexOfInterest[162959])
        {
          (162955 call =(162950 call(387623 call . this[164394] c"_indices")(162947 call + i[162995] 1))(162954 call(387629 call . this[164394] c"_indices") i[162995]))
        }
        label _continueLabel[162964]
        _indexOfInterest[162959]
        _iterator[162960]
      }
      label _breakLabel[162965]
    }
    (163014 call =(163012 call(387641 call . this[164394] c"_indices") insertPt[162869]) ind[162863])
    {
      unknown _indexOfInterest[163046] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163047] "expr temp" "temp"
      (163056 'move' _iterator[163047](163054 call _getIterator(387648 call . this[164394] c"_arrs")))
      Defer
      {
        {
          (163072 call _freeIterator _iterator[163047])
        }
      }
      { scopeless type
        (163061 'move' _indexOfInterest[163046](163058 call iteratorIndex _iterator[163047]))
      }
      ForLoop[163048]
      {
        unknown a[163065] "index var" "insert auto destroy"
        (163067 'move' a[163065] _indexOfInterest[163046])
        {
          (163043 call(163022 call . a[163065] c"sparseShiftArray")(163030 call chpl_build_bounded_range insertPt[162869](163028 call -(387654 call . this[164394] c"_nnz") 1))(163041 call chpl_build_bounded_range(163035 call + oldNNZDomSize[162922] 1)(163038 call .(361195 call . this[164394] c"nnzDom") c"size")))
        }
        label _continueLabel[163051]
        _indexOfInterest[163046]
        _iterator[163047]
      }
      label _breakLabel[163052]
    }
    (163080 return 1)
  }
  function DefaultSparseDom[164332](?).rem_help[163088](arg _mt[164400]:_MT[238], arg this[164398]:DefaultSparseDom[164332](?), arg ind[163086]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    const tmp[163099] "const" "temp"(163098 call(387659 call . this[164398] c"find") ind[163086])
    (163106 call _check_tuple_var_decl tmp[163099] 2)
    const found[163090] "const"(163100 call tmp[163099] 0)
    const insertPt[163092] "const"(163103 call tmp[163099] 1)
    (163111 'end of statement')
    if(163138 call _cond_test(163114 call ! found[163090]))
    {
      (163136 call halt "index not in domain: " ind[163086])
    }
    (163145 call -=(387667 call . this[164398] c"_nnz") 1)
    {
      unknown _indexOfInterest[163168] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163169] "expr temp" "temp"
      (163178 'move' _iterator[163169](163176 call _getIterator(163183 call chpl_direct_range_iter insertPt[163092](387685 call . this[164398] c"_nnz") 1)))
      Defer
      {
        {
          (163199 call _freeIterator _iterator[163169])
        }
      }
      { scopeless type
        (163188 'move' _indexOfInterest[163168](163185 call iteratorIndex _iterator[163169]))
      }
      ForLoop[163170]
      {
        unknown i[163192] "index var" "insert auto destroy"
        (163194 'move' i[163192] _indexOfInterest[163168])
        {
          (163164 call =(163156 call(387672 call . this[164398] c"_indices") i[163192])(163163 call(387678 call . this[164398] c"_indices")(163160 call + i[163192] 1)))
        }
        label _continueLabel[163173]
        _indexOfInterest[163168]
        _iterator[163169]
      }
      label _breakLabel[163174]
    }
    {
      unknown _indexOfInterest[163225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163226] "expr temp" "temp"
      (163235 'move' _iterator[163226](163233 call _getIterator(387690 call . this[164398] c"_arrs")))
      Defer
      {
        {
          (163251 call _freeIterator _iterator[163226])
        }
      }
      { scopeless type
        (163240 'move' _indexOfInterest[163225](163237 call iteratorIndex _iterator[163226]))
      }
      ForLoop[163227]
      {
        unknown a[163244] "index var" "insert auto destroy"
        (163246 'move' a[163244] _indexOfInterest[163225])
        {
          (163222 call(163211 call . a[163244] c"sparseShiftArrayBack")(163219 call chpl_build_bounded_range insertPt[163092](163217 call -(387696 call . this[164398] c"_nnz") 1)))
        }
        label _continueLabel[163230]
        _indexOfInterest[163225]
        _iterator[163226]
      }
      label _breakLabel[163231]
    }
    (163259 return 1)
  }
  function DefaultSparseDom[164332](?).dsiAdd[163269](arg _mt[164404]:_MT[238], arg this[164402]:DefaultSparseDom[164332](?), arg ind[163266] :
  (387701 call . this[164402] c"idxType")) : _unknown[51] "method" "primary method"
  {
    (163279 return(163278 call(387712 call . this[164402] c"add_help") ind[163266]))
  }
  where {
    (163273 call ==(387706 call . this[164402] c"rank") 1)
  }
  function DefaultSparseDom[164332](?).dsiRemove[163291](arg _mt[164408]:_MT[238], arg this[164406]:DefaultSparseDom[164332](?), arg ind[163288] :
  (387718 call . this[164406] c"idxType")) : _unknown[51] "method" "primary method"
  {
    (163301 return(163300 call(387729 call . this[164406] c"rem_help") ind[163288]))
  }
  where {
    (163295 call ==(387723 call . this[164406] c"rank") 1)
  }
  function DefaultSparseDom[164332](?).dsiAdd[163316](arg _mt[164412]:_MT[238], arg this[164410]:DefaultSparseDom[164332](?), arg ind[163313] :
  (163311 call *(387735 call . this[164410] c"rank")(387740 call . this[164410] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(163339 call _cond_test(163320 call ==(387745 call . this[164410] c"rank") 1))
    {
      (163329 return(163328 call(387749 call . this[164410] c"add_help")(163326 call ind[163313] 0)))
    }
    {
      (163336 return(163335 call(387754 call . this[164410] c"add_help") ind[163313]))
    }
  }
  function DefaultSparseDom[164332](?).dsiRemove[163355](arg _mt[164416]:_MT[238], arg this[164414]:DefaultSparseDom[164332](?), arg ind[163352] :
  (163350 call *(387760 call . this[164414] c"rank")(387765 call . this[164414] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(163378 call _cond_test(163359 call ==(387770 call . this[164414] c"rank") 1))
    {
      (163368 return(163367 call(387774 call . this[164414] c"rem_help")(163365 call ind[163352] 0)))
    }
    {
      (163375 return(163374 call(387779 call . this[164414] c"rem_help") ind[163352]))
    }
  }
  function DefaultSparseDom[164332](?).bulkAdd_help[163400](arg _mt[164420]:_MT[238], arg this[164418]:DefaultSparseDom[164332](?), arg inds[163397] :
  (163395 call chpl__buildArrayRuntimeType unknown indsDom[163387](163393 call chpl__buildIndexType(387785 call . this[164418] c"rank")(387790 call . this[164418] c"idxType"))), arg dataSorted[163403] =
  0, arg isUnique[163407] =
  0, arg addOn[163411] =
  nilLocale[89939]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(163458 call _cond_test(163420 call != addOn[163411] nilLocale[89939]))
    {
      if(163453 call _cond_test(163427 call != addOn[163411](163425 call chpl_localeID_to_locale(163424 '_wide_get_locale' this[164418]))))
      {
        (163450 call halt "Bulk index addition is only possible on the locale where the\n              sparse domain is created")
      }
    }
    (163473 call(387801 call . this[164418] c"bulkAdd_prepareInds") inds[163397] dataSorted[163403] isUnique[163407] defaultComparator[267977])
    if(163638 call _cond_test(163477 call ==(387809 call . this[164418] c"_nnz") 0))
    {
      const dupCount[163488] "const"(163485 IfExpr  isUnique[163407] then
      { scopeless
        0
      } else
      { scopeless
        (163484 call(387816 call . this[164418] c"_countDuplicates") inds[163397])
      } )
      (163491 'end of statement')
      (163501 call +=(387822 call . this[164418] c"_nnz")(163499 call -(163495 call . inds[163397] c"size") dupCount[163488]))
      (163506 call(387829 call . this[164418] c"_bulkGrow"))
      unknown indIdx[163515](163512 call .(163509 call .(361206 call . this[164418] c"_indices") c"_dom") c"low")
      (163518 'end of statement')
      unknown prevIdx[163526](163524 call -(163520 call .(361211 call . this[164418] c"parentDom") c"low") 1)
      (163529 'end of statement')
      if(163634 call _cond_test isUnique[163407])
      {
        (163550 call =(163548 call(387835 call . this[164418] c"_indices")(163545 call #(163539 call chpl_build_low_bounded_range(163536 call .(163533 call .(361216 call . this[164418] c"_indices") c"_dom") c"low"))(163542 call . inds[163397] c"size"))) inds[163397])
        (163558 return(163555 call . inds[163397] c"size"))
      }
      {
        {
          unknown _indexOfInterest[163594] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[163595] "expr temp" "temp"
          (163604 'move' _iterator[163595](163602 call _getIterator inds[163397]))
          Defer
          {
            {
              (163620 call _freeIterator _iterator[163595])
            }
          }
          { scopeless type
            (163609 'move' _indexOfInterest[163594](163606 call iteratorIndex _iterator[163595]))
          }
          ForLoop[163596]
          {
            unknown i[163613] "index var" "insert auto destroy"
            (163615 'move' i[163613] _indexOfInterest[163594])
            {
              if(163574 call _cond_test(163564 call == i[163613] prevIdx[163526]))
              {
                continue _continueLabel[163599] _continueLabel[163599]
              }
              {
                (163571 call = prevIdx[163526] i[163613])
              }
              (163586 call =(163584 call(387846 call . this[164418] c"_indices") indIdx[163515]) i[163613])
              (163591 call += indIdx[163515] 1)
            }
            label _continueLabel[163599]
            _indexOfInterest[163594]
            _iterator[163595]
          }
          label _breakLabel[163600]
        }
        (163632 return(163630 call - indIdx[163515] 1))
      }
    }
    const tmp[163653] "const" "temp"(163652 call(387856 call . this[164418] c"__getActualInsertPts") this[164418] inds[163397] isUnique[163407])
    (163660 call _check_tuple_var_decl tmp[163653] 2)
    const actualInsertPts[163642] "const"(163654 call tmp[163653] 0)
    const actualAddCnt[163644] "const"(163657 call tmp[163653] 1)
    (163665 'end of statement')
    const oldnnz[163667] "const"(387864 call . this[164418] c"_nnz")
    (163670 'end of statement')
    (163673 call +=(387869 call . this[164418] c"_nnz") actualAddCnt[163644])
    (163678 call(387874 call . this[164418] c"_bulkGrow"))
    unknown newIndIdx[163684](163681 call . indsDom[163387] c"high")
    (163687 'end of statement')
    unknown oldIndIdx[163689] oldnnz[163667]
    (163692 'end of statement')
    unknown newLoc[163697](163696 call actualInsertPts[163642] newIndIdx[163684])
    (163700 'end of statement')
    {
      unknown tmp[163739] "temp"
      (163767 'move' tmp[163739](163760 call _cond_test(163762 call == newLoc[163697](163765 call - 1))))
      WhileDo[163744]
      {
        {
          (163709 call -= newIndIdx[163684] 1)
          if(163726 call _cond_test(163721 call == newIndIdx[163684](163719 call -(163715 call . indsDom[163387] c"low") 1)))
          {
            break _breakLabel[163743] _breakLabel[163743]
          }
          (163736 call = newLoc[163697](163735 call actualInsertPts[163642] newIndIdx[163684]))
        }
        label _continueLabel[163742]
        (163755 'move' tmp[163739](163748 call _cond_test(163750 call == newLoc[163697](163753 call - 1))))
        tmp[163739]
      }
      label _breakLabel[163743]
    }
    unknown arrShiftMap[163783](163781 call chpl__buildArrayRuntimeType(163779 call chpl__ensureDomainExpr(163775 call chpl__buildDomainExpr(163772 call chpl_build_bounded_range 1 oldnnz[163667]))) int(64)[13])
    (163786 'end of statement')
    {
      unknown _indexOfInterest[163991] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163992] "expr temp" "temp"
      (164001 'move' _iterator[163992](163999 call _getIterator(164012 call chpl_direct_range_iter 1(387933 call . this[164418] c"_nnz")(164008 call - 1))))
      Defer
      {
        {
          (164028 call _freeIterator _iterator[163992])
        }
      }
      { scopeless type
        (164017 'move' _indexOfInterest[163991](164014 call iteratorIndex _iterator[163992]))
      }
      ForLoop[163993]
      {
        unknown i[164021] "index var" "insert auto destroy"
        (164023 'move' i[164021] _indexOfInterest[163991])
        {
          if(163985 call _cond_test(163805 call &&(163799 call >= oldIndIdx[163689] 1)(163803 call > i[164021] newLoc[163697])))
          {
            (163815 call =(163810 call(387893 call . this[164418] c"_indices") i[164021])(163814 call(387899 call . this[164418] c"_indices") oldIndIdx[163689]))
            (163824 call =(163822 call arrShiftMap[163783] oldIndIdx[163689]) i[164021])
            (163829 call -= oldIndIdx[163689] 1)
          }
          {
            if(163980 call _cond_test(163843 call &&(163837 call >= newIndIdx[163684](163834 call . indsDom[163387] c"low"))(163841 call == i[164021] newLoc[163697])))
            {
              (163853 call =(163848 call(387912 call . this[164418] c"_indices") i[164021])(163852 call inds[163397] newIndIdx[163684]))
              (163859 call -= newIndIdx[163684] 1)
              if(163884 call _cond_test(163867 call >= newIndIdx[163684](163864 call . indsDom[163387] c"low")))
              {
                (163874 call = newLoc[163697](163873 call actualInsertPts[163642] newIndIdx[163684]))
              }
              {
                (163881 call = newLoc[163697](163879 call - 2))
              }
              {
                unknown tmp[163928] "temp"
                (163956 'move' tmp[163928](163949 call _cond_test(163951 call == newLoc[163697](163954 call - 1))))
                WhileDo[163933]
                {
                  {
                    (163898 call -= newIndIdx[163684] 1)
                    if(163915 call _cond_test(163910 call == newIndIdx[163684](163908 call -(163904 call . indsDom[163387] c"low") 1)))
                    {
                      break _breakLabel[163932] _breakLabel[163932]
                    }
                    (163925 call = newLoc[163697](163924 call actualInsertPts[163642] newIndIdx[163684]))
                  }
                  label _continueLabel[163931]
                  (163944 'move' tmp[163928](163937 call _cond_test(163939 call == newLoc[163697](163942 call - 1))))
                  tmp[163928]
                }
                label _breakLabel[163932]
              }
            }
            {
              (163978 call halt "Something went wrong")
            }
          }
        }
        label _continueLabel[163996]
        _indexOfInterest[163991]
        _iterator[163992]
      }
      label _breakLabel[163997]
    }
    {
      unknown _indexOfInterest[164048] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[164049] "expr temp" "temp"
      (164058 'move' _iterator[164049](164056 call _getIterator(387938 call . this[164418] c"_arrs")))
      Defer
      {
        {
          (164074 call _freeIterator _iterator[164049])
        }
      }
      { scopeless type
        (164063 'move' _indexOfInterest[164048](164060 call iteratorIndex _iterator[164049]))
      }
      ForLoop[164050]
      {
        unknown a[164067] "index var" "insert auto destroy"
        (164069 'move' a[164067] _indexOfInterest[164048])
        (164046 call(164040 call . a[164067] c"sparseBulkShiftArray") arrShiftMap[163783] oldnnz[163667])
        label _continueLabel[164053]
        _indexOfInterest[164048]
        _iterator[164049]
      }
      label _breakLabel[164054]
    }
    (164082 return actualAddCnt[163644])
    (355167 'used modules list'(163415 'import' Sort[267968]))
    (361200 'referenced modules list' Sort[267968])
  }
  function DefaultSparseDom[164332](?).dsiMyDist[164088](arg _mt[164424]:_MT[238], arg this[164422]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (164093 return(387947 call . this[164422] c"dist"))
  }
  { scopeless type
    unmanaged BaseDist[415468]
  }
  function DefaultSparseDom[164332](?).dsiClear[164101](arg _mt[164428]:_MT[238], arg this[164426]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (164105 call =(387952 call . this[164426] c"_nnz") 0)
  }
  function DefaultSparseDom[164332](?).dimIter[164115](arg _mt[164432]:_MT[238], arg this[164430]:DefaultSparseDom[164332](?), param arg d[164113]:_any[178](?), arg ind[164117]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(164148 call _cond_test(164124 call != d[164113](164122 call -(387958 call . this[164430] c"rank") 1)))
    {
      (164145 call compilerError "dimIter() not supported on sparse domains for dimensions other than the last")
    }
    (164172 call halt "dimIter() not yet implemented for sparse domains")
    (164178 yield(164177 call(387963 call . this[164430] c"_indices") 0))
  }
  function DefaultSparseDom[164332](?).dsiAssignDomain[164188](arg _mt[164436]:_MT[238], arg this[164434]:DefaultSparseDom[164332](?), arg rhs[164185] :
  _domain[125902](?), arg lhsPrivate[164191] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(164260 call _cond_test(164213 call &&(164204 call ==(164201 call _to_borrowed(164199 'typeof'(164196 call . rhs[164185] c"_instance")))(164203 'typeof' this[164434]))(164211 call ==(164207 call . this[164434] c"dsiNumIndices") 0)))
    {
      (164225 call =(164218 call . this[164434] c"_nnz")(164222 call . rhs[164185] c"_nnz"))
      (164237 call =(164230 call . this[164434] c"nnzDom")(164234 call . rhs[164185] c"nnzDom"))
      (164250 call =(164243 call . this[164434] c"_indices")(164247 call . rhs[164185] c"_indices"))
    }
    {
      (164257 call chpl_assignDomainWithIndsIterSafeForRemoving this[164434] rhs[164185])
    }
  }
  function DefaultSparseDom[164332](?).dsiHasSingleLocalSubdomain[164269](arg _mt[164440]:_MT[238], arg this[164438]:DefaultSparseDom[164332](?)) param : _unknown[51] "method" "primary method"
  {
    (164272 return 1)
  }
  function DefaultSparseDom[164332](?).dsiLocalSubdomain[164283](arg _mt[164444]:_MT[238], arg this[164442]:DefaultSparseDom[164332](?), arg loc[164280] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(164324 call _cond_test(164290 call ==(164287 call chpl_localeID_to_locale(164286 '_wide_get_locale' this[164442])) loc[164280]))
    {
      (164299 return(164298 call _getDomain(164296 call _to_unmanaged this[164442])))
    }
    {
      const copy[164312] "const"(164304 'new'(_chpl_manager = unmanaged[220](?))(164311 call DefaultSparseDom[378034](?)(387976 call . this[164442] c"rank")(387981 call . this[164442] c"idxType")(387986 call . this[164442] c"dist")(387991 call . this[164442] c"parentDom")))
      (164315 'end of statement')
      (164322 return(164317 'new'(164321 call _domain[125902](?) copy[164312])))
    }
  }
  type DefaultSparseDom[164332](?) val super[355692]:BaseSparseDomImpl[147961](?) "super class" unknown dist[161574] unmanaged DefaultDist[415444] unknown _nnz[161579] 0 unknown _indices[161594] "local field"(161592 call chpl__buildArrayRuntimeType(161590 call chpl__ensureDomainExpr nnzDom[146922])(161588 call chpl__buildIndexType rank[148211] idxType[148215]))
  type DefaultSparseDom[378034](?)
  function DefaultSparseArr[165794](?).init[164454](arg _mt[165798]:_MT[238], arg this[165796]:DefaultSparseArr[165794](?), arg eltType[164452]:_any[178](?), param arg rank[164457] :
  int(64)[13], arg idxType[164460]:_any[178](?), arg dom[164462]:_any[178](?), param arg initElts[164465] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (164478 call(164469 call .(361237 call . this[165796] c"super") c"init") eltType[164452] rank[164457] idxType[164460] dom[164462] initElts[164465])
  }
  function DefaultSparseArr[165794](?).dsiAccess[164489](arg _mt[165802]:_MT[238], arg this[165800]:DefaultSparseArr[165794](?), arg ind[164486] :
  (388003 call . this[165800] c"idxType")) ref : _unknown[51] "method" "primary method"
  {
    if(164597 call _cond_test 1)
    {
      if(164593 call _cond_test(164506 call !(164505 call(164500 call .(164497 call .(361242 call . this[165800] c"dom") c"parentDom") c"contains") ind[164486])))
      {
        if(164582 call _cond_test debugDefaultSparse[161565])
        {
          (164532 call writeln "On locale "(164529 call .(361245 call here[90435]) c"id"))
          (164555 call writeln "In dsiAccess, got index " ind[164486])
          (164580 call writeln "dom.parentDom = "(164577 call .(361249 call . this[165800] c"dom") c"parentDom"))
        }
        (164591 call halt "array index out of bounds: " ind[164486])
      }
    }
    const tmp[164615] "const" "temp"(164614 call(164609 call .(361254 call . this[165800] c"dom") c"find") ind[164486])
    (164622 call _check_tuple_var_decl tmp[164615] 2)
    const found[164603] "const"(164616 call tmp[164615] 0)
    const loc[164605] "const"(164619 call tmp[164615] 1)
    (164627 'end of statement')
    if(164657 call _cond_test found[164603])
    {
      (164633 return(164632 call(388020 call . this[165800] c"data") loc[164605]))
    }
    {
      (164655 call halt "attempting to assign a 'zero' value in a sparse array: " ind[164486])
    }
  }
  where {
    (164493 call ==(388008 call . this[165800] c"rank") 1)
  }
  function DefaultSparseArr[165794](?).dsiAccess[164672](arg _mt[165806]:_MT[238], arg this[165804]:DefaultSparseArr[165794](?), arg ind[164669] :
  (388027 call . this[165804] c"idxType")) const ref : _unknown[51] "method" "primary method"
  {
    if(164702 call _cond_test 1)
    {
      if(164697 call _cond_test(164689 call !(164688 call(164683 call .(164680 call .(361259 call . this[165804] c"dom") c"parentDom") c"contains") ind[164669])))
      {
        (164695 call halt "array index out of bounds: " ind[164669])
      }
    }
    const tmp[164720] "const" "temp"(164719 call(164714 call .(361264 call . this[165804] c"dom") c"find") ind[164669])
    (164727 call _check_tuple_var_decl tmp[164720] 2)
    const found[164708] "const"(164721 call tmp[164720] 0)
    const loc[164710] "const"(164724 call tmp[164720] 1)
    (164732 'end of statement')
    if(164743 call _cond_test found[164708])
    {
      (164738 return(164737 call(388042 call . this[165804] c"data") loc[164710]))
    }
    {
      (164741 return(388048 call . this[165804] c"irv"))
    }
  }
  where {
    (164676 call ==(388032 call . this[165804] c"rank") 1)
  }
  function DefaultSparseArr[165794](?).dsiAccess[164761](arg _mt[165810]:_MT[238], arg this[165808]:DefaultSparseArr[165794](?), arg ind[164758] :
  (164756 call *(388053 call . this[165808] c"rank")(388058 call . this[165808] c"idxType"))) ref : _unknown[51] "method" "primary method"
  {
    if(164787 call _cond_test 1)
    {
      if(164782 call _cond_test(164774 call !(164773 call(164768 call .(164765 call .(361269 call . this[165808] c"dom") c"parentDom") c"contains") ind[164758])))
      {
        (164780 call halt "array index out of bounds: " ind[164758])
      }
    }
    const tmp[164805] "const" "temp"(164804 call(164799 call .(361274 call . this[165808] c"dom") c"find") ind[164758])
    (164812 call _check_tuple_var_decl tmp[164805] 2)
    const found[164793] "const"(164806 call tmp[164805] 0)
    const loc[164795] "const"(164809 call tmp[164805] 1)
    (164817 'end of statement')
    if(164831 call _cond_test found[164793])
    {
      (164823 return(164822 call(388068 call . this[165808] c"data") loc[164795]))
    }
    {
      (164829 call halt "attempting to assign a 'zero' value in a sparse array: " ind[164758])
    }
  }
  function DefaultSparseArr[165794](?).dsiAccess[164848](arg _mt[165814]:_MT[238], arg this[165812]:DefaultSparseArr[165794](?), arg ind[164845] :
  (164843 call *(388075 call . this[165812] c"rank")(388080 call . this[165812] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(164878 call _cond_test 1)
    {
      if(164873 call _cond_test(164865 call !(164864 call(164859 call .(164856 call .(361279 call . this[165812] c"dom") c"parentDom") c"contains") ind[164845])))
      {
        (164871 call halt "array index out of bounds: " ind[164845])
      }
    }
    const tmp[164896] "const" "temp"(164895 call(164890 call .(361284 call . this[165812] c"dom") c"find") ind[164845])
    (164903 call _check_tuple_var_decl tmp[164896] 2)
    const found[164884] "const"(164897 call tmp[164896] 0)
    const loc[164886] "const"(164900 call tmp[164896] 1)
    (164908 'end of statement')
    if(164919 call _cond_test found[164884])
    {
      (164914 return(164913 call(388095 call . this[165812] c"data") loc[164886]))
    }
    {
      (164917 return(388101 call . this[165812] c"irv"))
    }
  }
  where {
    (164853 call shouldReturnRvalueByValue(388085 call . this[165812] c"eltType"))
  }
  function DefaultSparseArr[165794](?).dsiAccess[164937](arg _mt[165818]:_MT[238], arg this[165816]:DefaultSparseArr[165794](?), arg ind[164934] :
  (164932 call *(388106 call . this[165816] c"rank")(388111 call . this[165816] c"idxType"))) const ref : _unknown[51] "method" "primary method"
  {
    if(164967 call _cond_test 1)
    {
      if(164962 call _cond_test(164954 call !(164953 call(164948 call .(164945 call .(361289 call . this[165816] c"dom") c"parentDom") c"contains") ind[164934])))
      {
        (164960 call halt "array index out of bounds: " ind[164934])
      }
    }
    const tmp[164985] "const" "temp"(164984 call(164979 call .(361294 call . this[165816] c"dom") c"find") ind[164934])
    (164992 call _check_tuple_var_decl tmp[164985] 2)
    const found[164973] "const"(164986 call tmp[164985] 0)
    const loc[164975] "const"(164989 call tmp[164985] 1)
    (164997 'end of statement')
    if(165008 call _cond_test found[164973])
    {
      (165003 return(165002 call(388126 call . this[165816] c"data") loc[164975]))
    }
    {
      (165006 return(388132 call . this[165816] c"irv"))
    }
  }
  where {
    (164942 call shouldReturnRvalueByConstRef(388116 call . this[165816] c"eltType"))
  }
  function DefaultSparseArr[165794](?).these[165019](arg _mt[165822]:_MT[238], arg this[165820]:DefaultSparseArr[165794](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[165035] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165036] "expr temp" "temp"
      (165045 'move' _iterator[165036](165043 call _getIterator(165053 call chpl_direct_range_iter 1(165050 call .(361299 call . this[165820] c"dom") c"_nnz") 1)))
      Defer
      {
        {
          (165069 call _freeIterator _iterator[165036])
        }
      }
      { scopeless type
        (165058 'move' _indexOfInterest[165035](165055 call iteratorIndex _iterator[165036]))
      }
      ForLoop[165037]
      {
        unknown i[165062] "index var" "insert auto destroy"
        (165064 'move' i[165062] _indexOfInterest[165035])
        (165033 yield(165032 call(388137 call . this[165820] c"data") i[165062]))
        label _continueLabel[165040]
        _indexOfInterest[165035]
        _iterator[165036]
      }
      label _breakLabel[165041]
    }
  }
  function DefaultSparseArr[165794](?).these[165085](arg _mt[165826]:_MT[238], arg this[165824]:DefaultSparseArr[165794](?), param arg tag[165082] :
  iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    const numElems[165098] "const"(165095 call .(361305 call . this[165824] c"dom") c"_nnz")
    (165101 'end of statement')
    const numChunks[165111] "const"(165109 call _cast(165108 'typeof' numElems[165098])(165106 call _computeNumChunks numElems[165098]))
    (165114 'end of statement')
    if(165142 call _cond_test debugDefaultSparse[161565])
    {
      (165139 call writeln "DefaultSparseArr standalone: " numChunks[165111] " chunks, " numElems[165098] " elems")
    }
    if(165452 call _cond_test(165148 call <= numChunks[165111] 1))
    {
      {
        unknown _indexOfInterest[165162] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[165163] "expr temp" "temp"
        (165172 'move' _iterator[165163](165170 call _getIterator(165177 call chpl_direct_range_iter 1 numElems[165098] 1)))
        Defer
        {
          {
            (165193 call _freeIterator _iterator[165163])
          }
        }
        { scopeless type
          (165182 'move' _indexOfInterest[165162](165179 call iteratorIndex _iterator[165163]))
        }
        ForLoop[165164]
        {
          unknown i[165186] "index var" "insert auto destroy"
          (165188 'move' i[165186] _indexOfInterest[165162])
          {
            (165159 yield(165158 call(388151 call . this[165824] c"data") i[165186]))
          }
          label _continueLabel[165167]
          _indexOfInterest[165162]
          _iterator[165163]
        }
        label _breakLabel[165168]
      }
    }
    {
      {
        unknown tmpIter[165255] "expr temp" "maybe ref" "no copy" "temp"
        (165258 'move' tmpIter[165255](165212 call chunks module=[255] RangeChunk[266458](165208 call chpl_build_bounded_range 1 numElems[165098]) numChunks[165111]))
        unknown isRngDomArr[165432] "maybe param" "temp"
        (165447 'move' isRngDomArr[165432](165445 call ||(165434 call isBoundedRange tmpIter[165255])(165443 call ||(165437 call isDomain tmpIter[165255])(165440 call isArray tmpIter[165255]))))
        if isRngDomArr[165432]
        {
          const _coforallCount[165299] "const" "end count" "temp"
          (165368 'move' _coforallCount[165299](165365 call _endCountAlloc 1))
          unknown numTasks[165300] "temp"
          (165352 'move' numTasks[165300](165348 call . tmpIter[165255] c"size"))
          (165343 call _upEndCount _coforallCount[165299] 1 numTasks[165300])
          (165340 call chpl_resetTaskSpawn numTasks[165300])
          unknown _indexOfInterest[165307] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165308] "expr temp" "temp"
          (165317 'move' _iterator[165308](165315 call _getIterator tmpIter[165255]))
          Defer
          {
            {
              (165333 call _freeIterator _iterator[165308])
            }
          }
          { scopeless type
            (165322 'move' _indexOfInterest[165307](165319 call iteratorIndex _iterator[165308]))
          }
          ForLoop[165309]
          {
            unknown chunk[165326] "coforall index var" "index var" "insert auto destroy"
            (165328 'move' chunk[165326] _indexOfInterest[165307])
            {
              {
                unknown _indexOfInterest[165261] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165263] "expr temp" "temp"
                (165265 'move' _iterator[165263](165268 call _getIterator chunk[165326]))
                Defer
                {
                  {
                    (165272 call _freeIterator _iterator[165263])
                  }
                }
                { scopeless type
                  (165276 'move' _indexOfInterest[165261](165279 call iteratorIndex _iterator[165263]))
                }
                ForLoop[165281]
                {
                  unknown i[165284] "index var" "insert auto destroy"
                  (165286 'move' i[165284] _indexOfInterest[165261])
                  (165290 yield(165292 call(388168 call . this[165824] c"data") i[165284]))
                  label _continueLabel[165294]
                  _indexOfInterest[165261]
                  _iterator[165263]
                }
                label _breakLabel[165296]
              }
              (165302 call _downEndCount _coforallCount[165299] nil[44])
              (165301 'coforall loop')
            }
            label _continueLabel[165312]
            _indexOfInterest[165307]
            _iterator[165308]
          }
          label _breakLabel[165313]
          Defer
          {
            {
              (165355 call _endCountFree _coforallCount[165299])
            }
          }
          (165360 call _waitEndCount _coforallCount[165299] 1 numTasks[165300])
        }
        {
          const _coforallCount[165372] "const" "end count" "temp"
          (165429 'move' _coforallCount[165372](165426 call _endCountAlloc 1))
          unknown _indexOfInterest[165380] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165381] "expr temp" "temp"
          (165390 'move' _iterator[165381](165388 call _getIterator tmpIter[165255]))
          Defer
          {
            {
              (165406 call _freeIterator _iterator[165381])
            }
          }
          { scopeless type
            (165395 'move' _indexOfInterest[165380](165392 call iteratorIndex _iterator[165381]))
          }
          ForLoop[165382]
          {
            unknown chunk[165399] "coforall index var" "index var" "insert auto destroy"
            (165401 'move' chunk[165399] _indexOfInterest[165380])
            (165413 call _upEndCount _coforallCount[165372] 1)
            {
              {
                unknown _indexOfInterest[165221] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165222] "expr temp" "temp"
                (165231 'move' _iterator[165222](165229 call _getIterator chunk[165399]))
                Defer
                {
                  {
                    (165247 call _freeIterator _iterator[165222])
                  }
                }
                { scopeless type
                  (165236 'move' _indexOfInterest[165221](165233 call iteratorIndex _iterator[165222]))
                }
                ForLoop[165223]
                {
                  unknown i[165240] "index var" "insert auto destroy"
                  (165242 'move' i[165240] _indexOfInterest[165221])
                  (165219 yield(165218 call(388161 call . this[165824] c"data") i[165240]))
                  label _continueLabel[165226]
                  _indexOfInterest[165221]
                  _iterator[165222]
                }
                label _breakLabel[165227]
              }
              (165375 call _downEndCount _coforallCount[165372] nil[44])
              (165374 'coforall loop')
            }
            label _continueLabel[165385]
            _indexOfInterest[165380]
            _iterator[165381]
          }
          label _breakLabel[165386]
          Defer
          {
            {
              (165417 call _endCountFree _coforallCount[165372])
            }
          }
          (165422 call _waitEndCount _coforallCount[165372] 1)
        }
        (361309 'referenced modules list' RangeChunk[266458])
      }
    }
  }
  where {
    (165092 call == tag[165082] standalone[451])
  }
  function DefaultSparseArr[165794](?).these[165465](arg _mt[165830]:_MT[238], arg this[165828]:DefaultSparseArr[165794](?), param arg tag[165462] :
  iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[165485] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165486] "expr temp" "temp"
      (165495 'move' _iterator[165486](165493 call _getIterator(165481 call(165476 call .(361317 call . this[165828] c"dom") c"these") tag[165462])))
      Defer
      {
        {
          (165512 call _freeIterator _iterator[165486])
        }
      }
      { scopeless type
        (165501 'move' _indexOfInterest[165485](165498 call iteratorIndex _iterator[165486]))
      }
      ForLoop[165487]
      {
        unknown followThis[165505] "index var" "insert auto destroy"
        (165507 'move' followThis[165505] _indexOfInterest[165485])
        (165483 yield followThis[165505])
        label _continueLabel[165490]
        _indexOfInterest[165485]
        _iterator[165486]
      }
      label _breakLabel[165491]
    }
  }
  where {
    (165472 call == tag[165462] leader[447])
  }
  function DefaultSparseArr[165794](?).these[165529](arg _mt[165834]:_MT[238], arg this[165832]:DefaultSparseArr[165794](?), param arg tag[165526] :
  iterKind[453], arg followThis[165537] :
  (165535 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[165555] "temp" followThis[165537]
    (165565 call _check_tuple_var_decl tmp[165555] 3)
    unknown followThisDom[165547](165556 call tmp[165555] 0)
    unknown startIx[165549](165559 call tmp[165555] 1)
    unknown endIx[165551](165562 call tmp[165555] 2)
    (165570 'end of statement')
    if(165600 call _cond_test(165577 call != followThisDom[165547](165574 call . this[165832] c"dom")))
    {
      (165598 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays")
    }
    if(165630 call _cond_test debugDefaultSparse[161565])
    {
      (165628 call writeln "DefaultSparseArr follower: " startIx[165549] ".." endIx[165551])
    }
    {
      unknown _indexOfInterest[165646] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165647] "expr temp" "temp"
      (165656 'move' _iterator[165647](165654 call _getIterator(165661 call chpl_direct_range_iter startIx[165549] endIx[165551] 1)))
      Defer
      {
        {
          (165677 call _freeIterator _iterator[165647])
        }
      }
      { scopeless type
        (165666 'move' _indexOfInterest[165646](165663 call iteratorIndex _iterator[165647]))
      }
      ForLoop[165648]
      {
        unknown i[165670] "index var" "insert auto destroy"
        (165672 'move' i[165670] _indexOfInterest[165646])
        (165644 yield(165643 call(388185 call . this[165832] c"data") i[165670]))
        label _continueLabel[165651]
        _indexOfInterest[165646]
        _iterator[165647]
      }
      label _breakLabel[165652]
    }
  }
  where {
    (165545 call == tag[165526] follower[449])
  }
  function DefaultSparseArr[165794](?).these[165693](arg _mt[165838]:_MT[238], arg this[165836]:DefaultSparseArr[165794](?), param arg tag[165690] :
  iterKind[453], arg followThis[165695]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (165707 call compilerError "Sparse iterators can't yet be zippered with others")
    (165711 yield 0)
  }
  where {
    (165702 call == tag[165690] follower[449])
  }
  function DefaultSparseArr[165794](?).dsiTargetLocales[165718](arg _mt[165842]:_MT[238], arg this[165840]:DefaultSparseArr[165794](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (165739 call compilerError "targetLocales is unsupported by sparse domains")
  }
  function DefaultSparseArr[165794](?).dsiHasSingleLocalSubdomain[165746](arg _mt[165846]:_MT[238], arg this[165844]:DefaultSparseArr[165794](?)) param : _unknown[51] "method" "primary method"
  {
    (165749 return 1)
  }
  function DefaultSparseArr[165794](?).dsiLocalSubdomain[165760](arg _mt[165850]:_MT[238], arg this[165848]:DefaultSparseArr[165794](?), arg loc[165757] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(165786 call _cond_test(165767 call ==(165764 call chpl_localeID_to_locale(165763 '_wide_get_locale' this[165848])) loc[165757]))
    {
      (165773 return(165772 call _getDomain(388197 call . this[165848] c"dom")))
    }
    {
      (165783 return(165782 call(165777 call .(361325 call . this[165848] c"dom") c"dsiLocalSubdomain") loc[165757]))
    }
  }
  type DefaultSparseArr[165794](?) val super[355694]:BaseSparseArrImpl[150527](?) "super class"
  type DefaultSparseArr[387426](?)
  function DefaultSparseDom[164332](?).dsiSerialWrite[165858](arg _mt[165867]:_MT[238], arg this[165864]:DefaultSparseDom[164332](?) :
  DefaultSparseDom[164332](?), arg f[165856]:_any[178](?), arg printBrackets[165861] =
  1) : _unknown[51] throws "method" "no return value for void"
  {
    if(166136 call _cond_test(165871 call ==(388203 call . this[165864] c"rank") 1))
    {
      if(165879 call _cond_test printBrackets[165861])
      {
        (165876 call <~> f[165856] "{")
      }
      if(165953 call _cond_test(165887 call >=(388210 call . this[165864] c"_nnz") 1))
      {
        (165894 call <~> f[165856](165893 call(388216 call . this[165864] c"_indices") 1))
        {
          unknown _indexOfInterest[165915] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165916] "expr temp" "temp"
          (165925 'move' _iterator[165916](165923 call _getIterator(165930 call chpl_direct_range_iter 2(388228 call . this[165864] c"_nnz") 1)))
          Defer
          {
            {
              (165946 call _freeIterator _iterator[165916])
            }
          }
          { scopeless type
            (165935 'move' _indexOfInterest[165915](165932 call iteratorIndex _iterator[165916]))
          }
          ForLoop[165917]
          {
            unknown i[165939] "index var" "insert auto destroy"
            (165941 'move' i[165939] _indexOfInterest[165915])
            {
              (165911 call <~>(165905 call <~> f[165856] " ")(165910 call(388222 call . this[165864] c"_indices") i[165939]))
            }
            label _continueLabel[165920]
            _indexOfInterest[165915]
            _iterator[165916]
          }
          label _breakLabel[165921]
        }
      }
      if(165963 call _cond_test printBrackets[165861])
      {
        (165960 call <~> f[165856] "}")
      }
    }
    {
      if(165990 call _cond_test printBrackets[165861])
      {
        (165987 call <~> f[165856] "{\n")
      }
      if(166105 call _cond_test(165998 call >=(388237 call . this[165864] c"_nnz") 1))
      {
        unknown prevInd[166004](166003 call(388242 call . this[165864] c"_indices") 1)
        (166007 'end of statement')
        (166014 call <~>(166011 call <~> f[165856] " ") prevInd[166004])
        {
          unknown _indexOfInterest[166062] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166063] "expr temp" "temp"
          (166072 'move' _iterator[166063](166070 call _getIterator(166077 call chpl_direct_range_iter 2(388266 call . this[165864] c"_nnz") 1)))
          Defer
          {
            {
              (166093 call _freeIterator _iterator[166063])
            }
          }
          { scopeless type
            (166082 'move' _indexOfInterest[166062](166079 call iteratorIndex _iterator[166063]))
          }
          ForLoop[166064]
          {
            unknown i[166086] "index var" "insert auto destroy"
            (166088 'move' i[166086] _indexOfInterest[166062])
            {
              if(166041 call _cond_test(166033 call !=(166025 call prevInd[166004] 0)(166032 call(166029 call(388250 call . this[165864] c"_indices") i[166086]) 0)))
              {
                (166037 call <~> f[165856] "\n")
              }
              (166051 call = prevInd[166004](166050 call(388258 call . this[165864] c"_indices") i[166086]))
              (166059 call <~>(166056 call <~> f[165856] " ") prevInd[166004])
            }
            label _continueLabel[166067]
            _indexOfInterest[166062]
            _iterator[166063]
          }
          label _breakLabel[166068]
        }
        (166102 call <~> f[165856] "\n")
      }
      if(166131 call _cond_test printBrackets[165861])
      {
        (166128 call <~> f[165856] "}\n")
      }
    }
  }
  function DefaultSparseArr[165794](?).dsiSerialWrite[166148](arg _mt[166153]:_MT[238], arg this[166150]:DefaultSparseArr[165794](?) :
  DefaultSparseArr[165794](?), arg f[166146]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    if(166379 call _cond_test(166157 call ==(388274 call . this[166150] c"rank") 1))
    {
      if(166236 call _cond_test(166164 call >=(166160 call .(361330 call . this[166150] c"dom") c"_nnz") 1))
      {
        (166171 call <~> f[166146](166170 call(388280 call . this[166150] c"data") 1))
        {
          unknown _indexOfInterest[166195] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166196] "expr temp" "temp"
          (166205 'move' _iterator[166196](166203 call _getIterator(166213 call chpl_direct_range_iter 2(166210 call .(361335 call . this[166150] c"dom") c"_nnz") 1)))
          Defer
          {
            {
              (166229 call _freeIterator _iterator[166196])
            }
          }
          { scopeless type
            (166218 'move' _indexOfInterest[166195](166215 call iteratorIndex _iterator[166196]))
          }
          ForLoop[166197]
          {
            unknown i[166222] "index var" "insert auto destroy"
            (166224 'move' i[166222] _indexOfInterest[166195])
            {
              (166191 call <~>(166185 call <~> f[166146] " ")(166190 call(388286 call . this[166150] c"data") i[166222]))
            }
            label _continueLabel[166200]
            _indexOfInterest[166195]
            _iterator[166196]
          }
          label _breakLabel[166201]
        }
      }
    }
    {
      if(166374 call _cond_test(166246 call >=(166242 call .(361340 call . this[166150] c"dom") c"_nnz") 1))
      {
        unknown prevInd[166255](166254 call(166249 call .(361345 call . this[166150] c"dom") c"_indices") 1)
        (166258 'end of statement')
        (166265 call <~> f[166146](166264 call(388293 call . this[166150] c"data") 1))
        {
          unknown _indexOfInterest[166328] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166329] "expr temp" "temp"
          (166338 'move' _iterator[166329](166336 call _getIterator(166346 call chpl_direct_range_iter 2(166343 call .(361360 call . this[166150] c"dom") c"_nnz") 1)))
          Defer
          {
            {
              (166362 call _freeIterator _iterator[166329])
            }
          }
          { scopeless type
            (166351 'move' _indexOfInterest[166328](166348 call iteratorIndex _iterator[166329]))
          }
          ForLoop[166330]
          {
            unknown i[166355] "index var" "insert auto destroy"
            (166357 'move' i[166355] _indexOfInterest[166328])
            {
              if(166304 call _cond_test(166290 call !=(166279 call prevInd[166255] 0)(166289 call(166286 call(166281 call .(361350 call . this[166150] c"dom") c"_indices") i[166355]) 0)))
              {
                (166294 call <~> f[166146] "\n")
              }
              {
                (166300 call <~> f[166146] " ")
              }
              (166317 call = prevInd[166255](166316 call(166311 call .(361355 call . this[166150] c"dom") c"_indices") i[166355]))
              (166325 call <~> f[166146](166324 call(388305 call . this[166150] c"data") i[166355]))
            }
            label _continueLabel[166333]
            _indexOfInterest[166328]
            _iterator[166329]
          }
          label _breakLabel[166334]
        }
        (166371 call <~> f[166146] "\n")
      }
    }
  }
  (355161 'used modules list'(161555 'use' ChapelStandard[20264])(161559 'import' RangeChunk[266458])(161562 'use' DSIUtil[230888]))
}