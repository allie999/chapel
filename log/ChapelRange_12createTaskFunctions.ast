AST dump for ChapelRange after pass createTaskFunctions.
Module use list: ChapelBase SysBasic HaltWrappers Math DSIUtil 

{
  function chpl__init_ChapelRange[416067]() : void[4] "insert line file info" "module init"
  {
    (541127 'init var' debugChapelRange[64198] 0)
    (64201 'end of statement')
    (541129 'init var' useOptimizedRangeIterators[64203] 1)
    (64206 'end of statement')
    {
    }
    (512245 return _void[55])
  }
  unknown debugChapelRange[64198] "config" "no doc" "param"
  unknown useOptimizedRangeIterators[64203] "config" "no doc" "param"
  type BoundedRangeType[64216] def bounded[64208]:BoundedRangeType[64216] def boundedLow[64210]:BoundedRangeType[64216] def boundedHigh[64212]:BoundedRangeType[64216] def boundedNone[64214]:BoundedRangeType[64216]
  function range[64319](?).strType[64297](arg _mt[64323]:_MT[238], arg this[64321]:range[64319](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[509102] "RVV" "temp" "type variable"
    unknown call_tmp[616363] "expr temp" "maybe param" "maybe type" "temp"
    (616366 'move' call_tmp[616363](373798 call idxType _mt[243] this[64321]))
    unknown call_tmp[616368] "expr temp" "maybe param" "maybe type" "temp"
    (616371 'move' call_tmp[616368](64302 call chpl__rangeStrideType call_tmp[616363]))
    (509107 'move' ret[509102](509106 'deref' call_tmp[616368]))
    (509104 return ret[509102])
  }
  function range[64319](?).chpl__promotionType[64310](arg _mt[64327]:_MT[238], arg this[64325]:range[64319](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[509111] "RVV" "temp" "type variable"
    unknown call_tmp[616375] "expr temp" "maybe param" "maybe type" "temp"
    (616378 'move' call_tmp[616375](373803 call idxType _mt[243] this[64325]))
    (509116 'move' ret[509111](509115 'deref' call_tmp[616375]))
    (509113 return ret[509111])
  }
  function range[64319](?).idxType[768209](arg _mt[768211]:_MT[238], arg this[768213]:range[64319](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768232] "RVV" "temp" "type variable"
    unknown call_tmp[768246] "expr temp" "maybe param" "maybe type" "temp"
    (768249 'move' call_tmp[768246](768218 'is bound' this[768213] c"idxType"))
    if call_tmp[768246]
    {
      unknown call_tmp[768251] "expr temp" "maybe param" "maybe type" "temp"
      (768254 'move' call_tmp[768251](768217 '.v' this[768213] c"idxType"))
      (768237 'move' ret[768232](768236 'deref' call_tmp[768251]))
      gotoReturn _end_idxType[768230] _end_idxType[768230]
    }
    {
      (768242 'move' ret[768232](768241 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[768230] _end_idxType[768230]
    }
    label _end_idxType[768230]
    (768234 return ret[768232])
  }
  function range[64319](?).idxType[768256](arg _mt[768258]:_MT[238], arg this[768260]:range[64319](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768279] "RVV" "temp" "type variable"
    unknown call_tmp[768293] "expr temp" "maybe param" "maybe type" "temp"
    (768296 'move' call_tmp[768293](768265 'is bound' this[768260] c"idxType"))
    if call_tmp[768293]
    {
      unknown call_tmp[768298] "expr temp" "maybe param" "maybe type" "temp"
      (768301 'move' call_tmp[768298](768264 '.v' this[768260] c"idxType"))
      (768284 'move' ret[768279](768283 'deref' call_tmp[768298]))
      gotoReturn _end_idxType[768277] _end_idxType[768277]
    }
    {
      (768289 'move' ret[768279](768288 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[768277] _end_idxType[768277]
    }
    label _end_idxType[768277]
    (768281 return ret[768279])
  }
  function range[64319](?).boundedType[768303](arg _mt[768305]:_MT[238], arg this[768307]:range[64319](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768326] "RVV" "param" "temp"
    unknown call_tmp[768340] "expr temp" "maybe param" "maybe type" "temp"
    (768343 'move' call_tmp[768340](768312 'is bound' this[768307] c"boundedType"))
    if call_tmp[768340]
    {
      unknown call_tmp[768345] "expr temp" "maybe param" "maybe type" "temp"
      (768348 'move' call_tmp[768345](768311 '.' this[768307] c"boundedType"))
      (768331 'move' ret[768326](768330 'deref' call_tmp[768345]))
      gotoReturn _end_boundedType[768324] _end_boundedType[768324]
    }
    {
      (768336 'move' ret[768326](768335 'deref' ?[260]))
      gotoReturn _end_boundedType[768324] _end_boundedType[768324]
    }
    label _end_boundedType[768324]
    (768328 return ret[768326])
  }
  function range[64319](?).boundedType[768350](arg _mt[768352]:_MT[238], arg this[768354]:range[64319](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768373] "RVV" "param" "temp"
    unknown call_tmp[768387] "expr temp" "maybe param" "maybe type" "temp"
    (768390 'move' call_tmp[768387](768359 'is bound' this[768354] c"boundedType"))
    if call_tmp[768387]
    {
      unknown call_tmp[768392] "expr temp" "maybe param" "maybe type" "temp"
      (768395 'move' call_tmp[768392](768358 '.' this[768354] c"boundedType"))
      (768378 'move' ret[768373](768377 'deref' call_tmp[768392]))
      gotoReturn _end_boundedType[768371] _end_boundedType[768371]
    }
    {
      (768383 'move' ret[768373](768382 'deref' ?[260]))
      gotoReturn _end_boundedType[768371] _end_boundedType[768371]
    }
    label _end_boundedType[768371]
    (768375 return ret[768373])
  }
  function range[64319](?).stridable[768397](arg _mt[768399]:_MT[238], arg this[768401]:range[64319](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768420] "RVV" "param" "temp"
    unknown call_tmp[768434] "expr temp" "maybe param" "maybe type" "temp"
    (768437 'move' call_tmp[768434](768406 'is bound' this[768401] c"stridable"))
    if call_tmp[768434]
    {
      unknown call_tmp[768439] "expr temp" "maybe param" "maybe type" "temp"
      (768442 'move' call_tmp[768439](768405 '.' this[768401] c"stridable"))
      (768425 'move' ret[768420](768424 'deref' call_tmp[768439]))
      gotoReturn _end_stridable[768418] _end_stridable[768418]
    }
    {
      (768430 'move' ret[768420](768429 'deref' ?[260]))
      gotoReturn _end_stridable[768418] _end_stridable[768418]
    }
    label _end_stridable[768418]
    (768422 return ret[768420])
  }
  function range[64319](?).stridable[768444](arg _mt[768446]:_MT[238], arg this[768448]:range[64319](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768467] "RVV" "param" "temp"
    unknown call_tmp[768481] "expr temp" "maybe param" "maybe type" "temp"
    (768484 'move' call_tmp[768481](768453 'is bound' this[768448] c"stridable"))
    if call_tmp[768481]
    {
      unknown call_tmp[768486] "expr temp" "maybe param" "maybe type" "temp"
      (768489 'move' call_tmp[768486](768452 '.' this[768448] c"stridable"))
      (768472 'move' ret[768467](768471 'deref' call_tmp[768486]))
      gotoReturn _end_stridable[768465] _end_stridable[768465]
    }
    {
      (768477 'move' ret[768467](768476 'deref' ?[260]))
      gotoReturn _end_stridable[768465] _end_stridable[768465]
    }
    label _end_stridable[768465]
    (768469 return ret[768467])
  }
  function range[64319](?)._low[768491](arg _mt[768493]:_MT[238], ref arg this[768495]:range[64319](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768505] "RVV" "temp"
    unknown call_tmp[768512] "expr temp" "maybe param" "maybe type" "temp"
    (768515 'move' call_tmp[768512](768499 '.' this[768495] c"_low"))
    (768510 'move' ret[768505](768509 'addr of' call_tmp[768512]))
    (768507 return ret[768505])
  }
  function range[64319](?)._high[768517](arg _mt[768519]:_MT[238], ref arg this[768521]:range[64319](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768531] "RVV" "temp"
    unknown call_tmp[768538] "expr temp" "maybe param" "maybe type" "temp"
    (768541 'move' call_tmp[768538](768525 '.' this[768521] c"_high"))
    (768536 'move' ret[768531](768535 'addr of' call_tmp[768538]))
    (768533 return ret[768531])
  }
  function range[64319](?)._stride[768543](arg _mt[768545]:_MT[238], ref arg this[768547]:range[64319](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768557] "RVV" "temp"
    unknown call_tmp[768564] "expr temp" "maybe param" "maybe type" "temp"
    (768567 'move' call_tmp[768564](768551 '.' this[768547] c"_stride"))
    (768562 'move' ret[768557](768561 'addr of' call_tmp[768564]))
    (768559 return ret[768557])
  }
  function range[64319](?)._alignment[768569](arg _mt[768571]:_MT[238], ref arg this[768573]:range[64319](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768583] "RVV" "temp"
    unknown call_tmp[768590] "expr temp" "maybe param" "maybe type" "temp"
    (768593 'move' call_tmp[768590](768577 '.' this[768573] c"_alignment"))
    (768588 'move' ret[768583](768587 'addr of' call_tmp[768590]))
    (768585 return ret[768583])
  }
  function range[64319](?)._aligned[768595](arg _mt[768597]:_MT[238], ref arg this[768599]:range[64319](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768609] "RVV" "temp"
    unknown call_tmp[768616] "expr temp" "maybe param" "maybe type" "temp"
    (768619 'move' call_tmp[768616](768603 '.' this[768599] c"_aligned"))
    (768614 'move' ret[768609](768613 'addr of' call_tmp[768616]))
    (768611 return ret[768609])
  }
  function range[64319](?).deinit[768621](arg _mt[768623]:_MT[238], arg this[768625]:range[64319](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (768633 return _void[55])
  }
  function chpl_fields_are_comparable[768647](arg _arg1[768649]:range[64319](?), arg _arg2[768650]:range[64319](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[768729]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[768736] "expr temp" "maybe param" "maybe type" "temp"
    (768739 'move' call_tmp[768736](768653 call boundedType _mt[243] _arg1[768649]))
    unknown call_tmp[768741] "expr temp" "maybe param" "maybe type" "temp"
    (768744 'move' call_tmp[768741](768657 call boundedType _mt[243] _arg2[768650]))
    unknown call_tmp[768746] "expr temp" "maybe param" "maybe type" "temp"
    (768749 'move' call_tmp[768746](768661 'call resolves' c"<" call_tmp[768736] call_tmp[768741]))
    unknown call_tmp[768751] "expr temp" "maybe param" "maybe type" "temp"
    (768754 'move' call_tmp[768751](768663 call stridable _mt[243] _arg1[768649]))
    unknown call_tmp[768756] "expr temp" "maybe param" "maybe type" "temp"
    (768759 'move' call_tmp[768756](768667 call stridable _mt[243] _arg2[768650]))
    unknown call_tmp[768761] "expr temp" "maybe param" "maybe type" "temp"
    (768764 'move' call_tmp[768761](768671 'call resolves' c"<" call_tmp[768751] call_tmp[768756]))
    unknown call_tmp[768766] "expr temp" "maybe param" "maybe type" "temp"
    (768769 'move' call_tmp[768766](768673 call _low _mt[243] _arg1[768649]))
    unknown call_tmp[768771] "expr temp" "maybe param" "maybe type" "temp"
    (768774 'move' call_tmp[768771](768677 call _low _mt[243] _arg2[768650]))
    unknown call_tmp[768776] "expr temp" "maybe param" "maybe type" "temp"
    (768779 'move' call_tmp[768776](768681 'call resolves' c"<" call_tmp[768766] call_tmp[768771]))
    unknown call_tmp[768781] "expr temp" "maybe param" "maybe type" "temp"
    (768784 'move' call_tmp[768781](768683 call _high _mt[243] _arg1[768649]))
    unknown call_tmp[768786] "expr temp" "maybe param" "maybe type" "temp"
    (768789 'move' call_tmp[768786](768687 call _high _mt[243] _arg2[768650]))
    unknown call_tmp[768791] "expr temp" "maybe param" "maybe type" "temp"
    (768794 'move' call_tmp[768791](768691 'call resolves' c"<" call_tmp[768781] call_tmp[768786]))
    unknown call_tmp[768796] "expr temp" "maybe param" "maybe type" "temp"
    (768799 'move' call_tmp[768796](768693 call _stride _mt[243] _arg1[768649]))
    unknown call_tmp[768801] "expr temp" "maybe param" "maybe type" "temp"
    (768804 'move' call_tmp[768801](768697 call _stride _mt[243] _arg2[768650]))
    unknown call_tmp[768806] "expr temp" "maybe param" "maybe type" "temp"
    (768809 'move' call_tmp[768806](768701 'call resolves' c"<" call_tmp[768796] call_tmp[768801]))
    unknown call_tmp[768811] "expr temp" "maybe param" "maybe type" "temp"
    (768814 'move' call_tmp[768811](768703 call _alignment _mt[243] _arg1[768649]))
    unknown call_tmp[768816] "expr temp" "maybe param" "maybe type" "temp"
    (768819 'move' call_tmp[768816](768707 call _alignment _mt[243] _arg2[768650]))
    unknown call_tmp[768821] "expr temp" "maybe param" "maybe type" "temp"
    (768824 'move' call_tmp[768821](768711 'call resolves' c"<" call_tmp[768811] call_tmp[768816]))
    unknown call_tmp[768826] "expr temp" "maybe param" "maybe type" "temp"
    (768829 'move' call_tmp[768826](768713 call _aligned _mt[243] _arg1[768649]))
    unknown call_tmp[768831] "expr temp" "maybe param" "maybe type" "temp"
    (768834 'move' call_tmp[768831](768717 call _aligned _mt[243] _arg2[768650]))
    unknown call_tmp[768836] "expr temp" "maybe param" "maybe type" "temp"
    (768839 'move' call_tmp[768836](768721 'call resolves' c"<" call_tmp[768826] call_tmp[768831]))
    unknown call_tmp[768841] "expr temp" "maybe param" "maybe type" "temp"
    (768844 'move' call_tmp[768841](768723 '&' call_tmp[768746] call_tmp[768761] call_tmp[768776] call_tmp[768791] call_tmp[768806] call_tmp[768821] call_tmp[768836]))
    (768734 'move' ret[768729](768733 'deref' call_tmp[768841]))
    (768731 return ret[768729])
  }
  function <[768635](arg _arg1[768637]:range[64319](?), arg _arg2[768638]:range[64319](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[769068]:bool[10] "RVV" "temp"
    unknown call_tmp[769145] "expr temp" "maybe param" "maybe type" "temp"
    (769148 'move' call_tmp[769145](768852 call boundedType _mt[243] _arg1[768637]))
    unknown call_tmp[769150] "expr temp" "maybe param" "maybe type" "temp"
    (769153 'move' call_tmp[769150](768856 call boundedType _mt[243] _arg2[768638]))
    unknown call_tmp[769155] "expr temp" "maybe param" "maybe type" "temp"
    (769158 'move' call_tmp[769155](768860 call < call_tmp[769145] call_tmp[769150]))
    if call_tmp[769155]
    {
      (769073 'move' ret[769068](769072 'deref' 1))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769160] "expr temp" "maybe param" "maybe type" "temp"
    (769163 'move' call_tmp[769160](768866 call boundedType _mt[243] _arg1[768637]))
    unknown call_tmp[769165] "expr temp" "maybe param" "maybe type" "temp"
    (769168 'move' call_tmp[769165](768870 call boundedType _mt[243] _arg2[768638]))
    unknown call_tmp[769170] "expr temp" "maybe param" "maybe type" "temp"
    (769173 'move' call_tmp[769170](768874 call > call_tmp[769160] call_tmp[769165]))
    if call_tmp[769170]
    {
      (769078 'move' ret[769068](769077 'deref' 0))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769175] "expr temp" "maybe param" "maybe type" "temp"
    (769178 'move' call_tmp[769175](768880 call stridable _mt[243] _arg1[768637]))
    unknown call_tmp[769180] "expr temp" "maybe param" "maybe type" "temp"
    (769183 'move' call_tmp[769180](768884 call stridable _mt[243] _arg2[768638]))
    unknown call_tmp[769185] "expr temp" "maybe param" "maybe type" "temp"
    (769188 'move' call_tmp[769185](768888 call < call_tmp[769175] call_tmp[769180]))
    if call_tmp[769185]
    {
      (769083 'move' ret[769068](769082 'deref' 1))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769190] "expr temp" "maybe param" "maybe type" "temp"
    (769193 'move' call_tmp[769190](768894 call stridable _mt[243] _arg1[768637]))
    unknown call_tmp[769195] "expr temp" "maybe param" "maybe type" "temp"
    (769198 'move' call_tmp[769195](768898 call stridable _mt[243] _arg2[768638]))
    unknown call_tmp[769200] "expr temp" "maybe param" "maybe type" "temp"
    (769203 'move' call_tmp[769200](768902 call > call_tmp[769190] call_tmp[769195]))
    if call_tmp[769200]
    {
      (769088 'move' ret[769068](769087 'deref' 0))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769205] "expr temp" "maybe param" "maybe type" "temp"
    (769208 'move' call_tmp[769205](768908 call _low _mt[243] _arg1[768637]))
    unknown call_tmp[769210] "expr temp" "maybe param" "maybe type" "temp"
    (769213 'move' call_tmp[769210](768912 call _low _mt[243] _arg2[768638]))
    unknown call_tmp[769215] "expr temp" "maybe param" "maybe type" "temp"
    (769218 'move' call_tmp[769215](768916 call < call_tmp[769205] call_tmp[769210]))
    if call_tmp[769215]
    {
      (769093 'move' ret[769068](769092 'deref' 1))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769220] "expr temp" "maybe param" "maybe type" "temp"
    (769223 'move' call_tmp[769220](768922 call _low _mt[243] _arg1[768637]))
    unknown call_tmp[769225] "expr temp" "maybe param" "maybe type" "temp"
    (769228 'move' call_tmp[769225](768926 call _low _mt[243] _arg2[768638]))
    unknown call_tmp[769230] "expr temp" "maybe param" "maybe type" "temp"
    (769233 'move' call_tmp[769230](768930 call > call_tmp[769220] call_tmp[769225]))
    if call_tmp[769230]
    {
      (769098 'move' ret[769068](769097 'deref' 0))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769235] "expr temp" "maybe param" "maybe type" "temp"
    (769238 'move' call_tmp[769235](768936 call _high _mt[243] _arg1[768637]))
    unknown call_tmp[769240] "expr temp" "maybe param" "maybe type" "temp"
    (769243 'move' call_tmp[769240](768940 call _high _mt[243] _arg2[768638]))
    unknown call_tmp[769245] "expr temp" "maybe param" "maybe type" "temp"
    (769248 'move' call_tmp[769245](768944 call < call_tmp[769235] call_tmp[769240]))
    if call_tmp[769245]
    {
      (769103 'move' ret[769068](769102 'deref' 1))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769250] "expr temp" "maybe param" "maybe type" "temp"
    (769253 'move' call_tmp[769250](768950 call _high _mt[243] _arg1[768637]))
    unknown call_tmp[769255] "expr temp" "maybe param" "maybe type" "temp"
    (769258 'move' call_tmp[769255](768954 call _high _mt[243] _arg2[768638]))
    unknown call_tmp[769260] "expr temp" "maybe param" "maybe type" "temp"
    (769263 'move' call_tmp[769260](768958 call > call_tmp[769250] call_tmp[769255]))
    if call_tmp[769260]
    {
      (769108 'move' ret[769068](769107 'deref' 0))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769265] "expr temp" "maybe param" "maybe type" "temp"
    (769268 'move' call_tmp[769265](768964 call _stride _mt[243] _arg1[768637]))
    unknown call_tmp[769270] "expr temp" "maybe param" "maybe type" "temp"
    (769273 'move' call_tmp[769270](768968 call _stride _mt[243] _arg2[768638]))
    unknown call_tmp[769275] "expr temp" "maybe param" "maybe type" "temp"
    (769278 'move' call_tmp[769275](768972 call < call_tmp[769265] call_tmp[769270]))
    if call_tmp[769275]
    {
      (769113 'move' ret[769068](769112 'deref' 1))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769280] "expr temp" "maybe param" "maybe type" "temp"
    (769283 'move' call_tmp[769280](768978 call _stride _mt[243] _arg1[768637]))
    unknown call_tmp[769285] "expr temp" "maybe param" "maybe type" "temp"
    (769288 'move' call_tmp[769285](768982 call _stride _mt[243] _arg2[768638]))
    unknown call_tmp[769290] "expr temp" "maybe param" "maybe type" "temp"
    (769293 'move' call_tmp[769290](768986 call > call_tmp[769280] call_tmp[769285]))
    if call_tmp[769290]
    {
      (769118 'move' ret[769068](769117 'deref' 0))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769295] "expr temp" "maybe param" "maybe type" "temp"
    (769298 'move' call_tmp[769295](768992 call _alignment _mt[243] _arg1[768637]))
    unknown call_tmp[769300] "expr temp" "maybe param" "maybe type" "temp"
    (769303 'move' call_tmp[769300](768996 call _alignment _mt[243] _arg2[768638]))
    unknown call_tmp[769305] "expr temp" "maybe param" "maybe type" "temp"
    (769308 'move' call_tmp[769305](769000 call < call_tmp[769295] call_tmp[769300]))
    if call_tmp[769305]
    {
      (769123 'move' ret[769068](769122 'deref' 1))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769310] "expr temp" "maybe param" "maybe type" "temp"
    (769313 'move' call_tmp[769310](769006 call _alignment _mt[243] _arg1[768637]))
    unknown call_tmp[769315] "expr temp" "maybe param" "maybe type" "temp"
    (769318 'move' call_tmp[769315](769010 call _alignment _mt[243] _arg2[768638]))
    unknown call_tmp[769320] "expr temp" "maybe param" "maybe type" "temp"
    (769323 'move' call_tmp[769320](769014 call > call_tmp[769310] call_tmp[769315]))
    if call_tmp[769320]
    {
      (769128 'move' ret[769068](769127 'deref' 0))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769325] "expr temp" "maybe param" "maybe type" "temp"
    (769328 'move' call_tmp[769325](769020 call _aligned _mt[243] _arg1[768637]))
    unknown call_tmp[769330] "expr temp" "maybe param" "maybe type" "temp"
    (769333 'move' call_tmp[769330](769024 call _aligned _mt[243] _arg2[768638]))
    unknown call_tmp[769335] "expr temp" "maybe param" "maybe type" "temp"
    (769338 'move' call_tmp[769335](769028 call < call_tmp[769325] call_tmp[769330]))
    if call_tmp[769335]
    {
      (769133 'move' ret[769068](769132 'deref' 1))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    unknown call_tmp[769340] "expr temp" "maybe param" "maybe type" "temp"
    (769343 'move' call_tmp[769340](769034 call _aligned _mt[243] _arg1[768637]))
    unknown call_tmp[769345] "expr temp" "maybe param" "maybe type" "temp"
    (769348 'move' call_tmp[769345](769038 call _aligned _mt[243] _arg2[768638]))
    unknown call_tmp[769350] "expr temp" "maybe param" "maybe type" "temp"
    (769353 'move' call_tmp[769350](769042 call > call_tmp[769340] call_tmp[769345]))
    if call_tmp[769350]
    {
      (769138 'move' ret[769068](769137 'deref' 0))
      gotoReturn _end_<[769066] _end_<[769066]
    }
    (769143 'move' ret[769068](769142 'deref' 0))
    label _end_<[769066]
    (769070 return ret[769068])
  }
  where {
    unknown call_tmp[769355] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769358 'move' call_tmp[769355](768641 'typeof' _arg1[768637]))
    unknown call_tmp[769360] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769363 'move' call_tmp[769360](768643 'typeof' _arg2[768638]))
    unknown call_tmp[769365] "expr temp" "maybe param" "maybe type" "temp"
    (769368 'move' call_tmp[769365](768645 call == call_tmp[769355] call_tmp[769360]))
    unknown call_tmp[769370] "expr temp" "maybe param" "maybe type" "temp"
    (769373 'move' call_tmp[769370](768846 call chpl_fields_are_comparable[768647] _arg1[768637] _arg2[768638]))
    (768850 '&' call_tmp[769365] call_tmp[769370])
  }
  function chpl_fields_are_comparable[769387](arg _arg1[769389]:range[64319](?), arg _arg2[769390]:range[64319](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[769469]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[769476] "expr temp" "maybe param" "maybe type" "temp"
    (769479 'move' call_tmp[769476](769393 call boundedType _mt[243] _arg1[769389]))
    unknown call_tmp[769481] "expr temp" "maybe param" "maybe type" "temp"
    (769484 'move' call_tmp[769481](769397 call boundedType _mt[243] _arg2[769390]))
    unknown call_tmp[769486] "expr temp" "maybe param" "maybe type" "temp"
    (769489 'move' call_tmp[769486](769401 'call resolves' c"<=" call_tmp[769476] call_tmp[769481]))
    unknown call_tmp[769491] "expr temp" "maybe param" "maybe type" "temp"
    (769494 'move' call_tmp[769491](769403 call stridable _mt[243] _arg1[769389]))
    unknown call_tmp[769496] "expr temp" "maybe param" "maybe type" "temp"
    (769499 'move' call_tmp[769496](769407 call stridable _mt[243] _arg2[769390]))
    unknown call_tmp[769501] "expr temp" "maybe param" "maybe type" "temp"
    (769504 'move' call_tmp[769501](769411 'call resolves' c"<=" call_tmp[769491] call_tmp[769496]))
    unknown call_tmp[769506] "expr temp" "maybe param" "maybe type" "temp"
    (769509 'move' call_tmp[769506](769413 call _low _mt[243] _arg1[769389]))
    unknown call_tmp[769511] "expr temp" "maybe param" "maybe type" "temp"
    (769514 'move' call_tmp[769511](769417 call _low _mt[243] _arg2[769390]))
    unknown call_tmp[769516] "expr temp" "maybe param" "maybe type" "temp"
    (769519 'move' call_tmp[769516](769421 'call resolves' c"<=" call_tmp[769506] call_tmp[769511]))
    unknown call_tmp[769521] "expr temp" "maybe param" "maybe type" "temp"
    (769524 'move' call_tmp[769521](769423 call _high _mt[243] _arg1[769389]))
    unknown call_tmp[769526] "expr temp" "maybe param" "maybe type" "temp"
    (769529 'move' call_tmp[769526](769427 call _high _mt[243] _arg2[769390]))
    unknown call_tmp[769531] "expr temp" "maybe param" "maybe type" "temp"
    (769534 'move' call_tmp[769531](769431 'call resolves' c"<=" call_tmp[769521] call_tmp[769526]))
    unknown call_tmp[769536] "expr temp" "maybe param" "maybe type" "temp"
    (769539 'move' call_tmp[769536](769433 call _stride _mt[243] _arg1[769389]))
    unknown call_tmp[769541] "expr temp" "maybe param" "maybe type" "temp"
    (769544 'move' call_tmp[769541](769437 call _stride _mt[243] _arg2[769390]))
    unknown call_tmp[769546] "expr temp" "maybe param" "maybe type" "temp"
    (769549 'move' call_tmp[769546](769441 'call resolves' c"<=" call_tmp[769536] call_tmp[769541]))
    unknown call_tmp[769551] "expr temp" "maybe param" "maybe type" "temp"
    (769554 'move' call_tmp[769551](769443 call _alignment _mt[243] _arg1[769389]))
    unknown call_tmp[769556] "expr temp" "maybe param" "maybe type" "temp"
    (769559 'move' call_tmp[769556](769447 call _alignment _mt[243] _arg2[769390]))
    unknown call_tmp[769561] "expr temp" "maybe param" "maybe type" "temp"
    (769564 'move' call_tmp[769561](769451 'call resolves' c"<=" call_tmp[769551] call_tmp[769556]))
    unknown call_tmp[769566] "expr temp" "maybe param" "maybe type" "temp"
    (769569 'move' call_tmp[769566](769453 call _aligned _mt[243] _arg1[769389]))
    unknown call_tmp[769571] "expr temp" "maybe param" "maybe type" "temp"
    (769574 'move' call_tmp[769571](769457 call _aligned _mt[243] _arg2[769390]))
    unknown call_tmp[769576] "expr temp" "maybe param" "maybe type" "temp"
    (769579 'move' call_tmp[769576](769461 'call resolves' c"<=" call_tmp[769566] call_tmp[769571]))
    unknown call_tmp[769581] "expr temp" "maybe param" "maybe type" "temp"
    (769584 'move' call_tmp[769581](769463 '&' call_tmp[769486] call_tmp[769501] call_tmp[769516] call_tmp[769531] call_tmp[769546] call_tmp[769561] call_tmp[769576]))
    (769474 'move' ret[769469](769473 'deref' call_tmp[769581]))
    (769471 return ret[769469])
  }
  function <=[769375](arg _arg1[769377]:range[64319](?), arg _arg2[769378]:range[64319](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[769808]:bool[10] "RVV" "temp"
    unknown call_tmp[769885] "expr temp" "maybe param" "maybe type" "temp"
    (769888 'move' call_tmp[769885](769592 call boundedType _mt[243] _arg1[769377]))
    unknown call_tmp[769890] "expr temp" "maybe param" "maybe type" "temp"
    (769893 'move' call_tmp[769890](769596 call boundedType _mt[243] _arg2[769378]))
    unknown call_tmp[769895] "expr temp" "maybe param" "maybe type" "temp"
    (769898 'move' call_tmp[769895](769600 call < call_tmp[769885] call_tmp[769890]))
    if call_tmp[769895]
    {
      (769813 'move' ret[769808](769812 'deref' 1))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[769900] "expr temp" "maybe param" "maybe type" "temp"
    (769903 'move' call_tmp[769900](769606 call boundedType _mt[243] _arg1[769377]))
    unknown call_tmp[769905] "expr temp" "maybe param" "maybe type" "temp"
    (769908 'move' call_tmp[769905](769610 call boundedType _mt[243] _arg2[769378]))
    unknown call_tmp[769910] "expr temp" "maybe param" "maybe type" "temp"
    (769913 'move' call_tmp[769910](769614 call > call_tmp[769900] call_tmp[769905]))
    if call_tmp[769910]
    {
      (769818 'move' ret[769808](769817 'deref' 0))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[769915] "expr temp" "maybe param" "maybe type" "temp"
    (769918 'move' call_tmp[769915](769620 call stridable _mt[243] _arg1[769377]))
    unknown call_tmp[769920] "expr temp" "maybe param" "maybe type" "temp"
    (769923 'move' call_tmp[769920](769624 call stridable _mt[243] _arg2[769378]))
    unknown call_tmp[769925] "expr temp" "maybe param" "maybe type" "temp"
    (769928 'move' call_tmp[769925](769628 call < call_tmp[769915] call_tmp[769920]))
    if call_tmp[769925]
    {
      (769823 'move' ret[769808](769822 'deref' 1))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[769930] "expr temp" "maybe param" "maybe type" "temp"
    (769933 'move' call_tmp[769930](769634 call stridable _mt[243] _arg1[769377]))
    unknown call_tmp[769935] "expr temp" "maybe param" "maybe type" "temp"
    (769938 'move' call_tmp[769935](769638 call stridable _mt[243] _arg2[769378]))
    unknown call_tmp[769940] "expr temp" "maybe param" "maybe type" "temp"
    (769943 'move' call_tmp[769940](769642 call > call_tmp[769930] call_tmp[769935]))
    if call_tmp[769940]
    {
      (769828 'move' ret[769808](769827 'deref' 0))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[769945] "expr temp" "maybe param" "maybe type" "temp"
    (769948 'move' call_tmp[769945](769648 call _low _mt[243] _arg1[769377]))
    unknown call_tmp[769950] "expr temp" "maybe param" "maybe type" "temp"
    (769953 'move' call_tmp[769950](769652 call _low _mt[243] _arg2[769378]))
    unknown call_tmp[769955] "expr temp" "maybe param" "maybe type" "temp"
    (769958 'move' call_tmp[769955](769656 call < call_tmp[769945] call_tmp[769950]))
    if call_tmp[769955]
    {
      (769833 'move' ret[769808](769832 'deref' 1))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[769960] "expr temp" "maybe param" "maybe type" "temp"
    (769963 'move' call_tmp[769960](769662 call _low _mt[243] _arg1[769377]))
    unknown call_tmp[769965] "expr temp" "maybe param" "maybe type" "temp"
    (769968 'move' call_tmp[769965](769666 call _low _mt[243] _arg2[769378]))
    unknown call_tmp[769970] "expr temp" "maybe param" "maybe type" "temp"
    (769973 'move' call_tmp[769970](769670 call > call_tmp[769960] call_tmp[769965]))
    if call_tmp[769970]
    {
      (769838 'move' ret[769808](769837 'deref' 0))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[769975] "expr temp" "maybe param" "maybe type" "temp"
    (769978 'move' call_tmp[769975](769676 call _high _mt[243] _arg1[769377]))
    unknown call_tmp[769980] "expr temp" "maybe param" "maybe type" "temp"
    (769983 'move' call_tmp[769980](769680 call _high _mt[243] _arg2[769378]))
    unknown call_tmp[769985] "expr temp" "maybe param" "maybe type" "temp"
    (769988 'move' call_tmp[769985](769684 call < call_tmp[769975] call_tmp[769980]))
    if call_tmp[769985]
    {
      (769843 'move' ret[769808](769842 'deref' 1))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[769990] "expr temp" "maybe param" "maybe type" "temp"
    (769993 'move' call_tmp[769990](769690 call _high _mt[243] _arg1[769377]))
    unknown call_tmp[769995] "expr temp" "maybe param" "maybe type" "temp"
    (769998 'move' call_tmp[769995](769694 call _high _mt[243] _arg2[769378]))
    unknown call_tmp[770000] "expr temp" "maybe param" "maybe type" "temp"
    (770003 'move' call_tmp[770000](769698 call > call_tmp[769990] call_tmp[769995]))
    if call_tmp[770000]
    {
      (769848 'move' ret[769808](769847 'deref' 0))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[770005] "expr temp" "maybe param" "maybe type" "temp"
    (770008 'move' call_tmp[770005](769704 call _stride _mt[243] _arg1[769377]))
    unknown call_tmp[770010] "expr temp" "maybe param" "maybe type" "temp"
    (770013 'move' call_tmp[770010](769708 call _stride _mt[243] _arg2[769378]))
    unknown call_tmp[770015] "expr temp" "maybe param" "maybe type" "temp"
    (770018 'move' call_tmp[770015](769712 call < call_tmp[770005] call_tmp[770010]))
    if call_tmp[770015]
    {
      (769853 'move' ret[769808](769852 'deref' 1))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[770020] "expr temp" "maybe param" "maybe type" "temp"
    (770023 'move' call_tmp[770020](769718 call _stride _mt[243] _arg1[769377]))
    unknown call_tmp[770025] "expr temp" "maybe param" "maybe type" "temp"
    (770028 'move' call_tmp[770025](769722 call _stride _mt[243] _arg2[769378]))
    unknown call_tmp[770030] "expr temp" "maybe param" "maybe type" "temp"
    (770033 'move' call_tmp[770030](769726 call > call_tmp[770020] call_tmp[770025]))
    if call_tmp[770030]
    {
      (769858 'move' ret[769808](769857 'deref' 0))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[770035] "expr temp" "maybe param" "maybe type" "temp"
    (770038 'move' call_tmp[770035](769732 call _alignment _mt[243] _arg1[769377]))
    unknown call_tmp[770040] "expr temp" "maybe param" "maybe type" "temp"
    (770043 'move' call_tmp[770040](769736 call _alignment _mt[243] _arg2[769378]))
    unknown call_tmp[770045] "expr temp" "maybe param" "maybe type" "temp"
    (770048 'move' call_tmp[770045](769740 call < call_tmp[770035] call_tmp[770040]))
    if call_tmp[770045]
    {
      (769863 'move' ret[769808](769862 'deref' 1))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[770050] "expr temp" "maybe param" "maybe type" "temp"
    (770053 'move' call_tmp[770050](769746 call _alignment _mt[243] _arg1[769377]))
    unknown call_tmp[770055] "expr temp" "maybe param" "maybe type" "temp"
    (770058 'move' call_tmp[770055](769750 call _alignment _mt[243] _arg2[769378]))
    unknown call_tmp[770060] "expr temp" "maybe param" "maybe type" "temp"
    (770063 'move' call_tmp[770060](769754 call > call_tmp[770050] call_tmp[770055]))
    if call_tmp[770060]
    {
      (769868 'move' ret[769808](769867 'deref' 0))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[770065] "expr temp" "maybe param" "maybe type" "temp"
    (770068 'move' call_tmp[770065](769760 call _aligned _mt[243] _arg1[769377]))
    unknown call_tmp[770070] "expr temp" "maybe param" "maybe type" "temp"
    (770073 'move' call_tmp[770070](769764 call _aligned _mt[243] _arg2[769378]))
    unknown call_tmp[770075] "expr temp" "maybe param" "maybe type" "temp"
    (770078 'move' call_tmp[770075](769768 call < call_tmp[770065] call_tmp[770070]))
    if call_tmp[770075]
    {
      (769873 'move' ret[769808](769872 'deref' 1))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    unknown call_tmp[770080] "expr temp" "maybe param" "maybe type" "temp"
    (770083 'move' call_tmp[770080](769774 call _aligned _mt[243] _arg1[769377]))
    unknown call_tmp[770085] "expr temp" "maybe param" "maybe type" "temp"
    (770088 'move' call_tmp[770085](769778 call _aligned _mt[243] _arg2[769378]))
    unknown call_tmp[770090] "expr temp" "maybe param" "maybe type" "temp"
    (770093 'move' call_tmp[770090](769782 call > call_tmp[770080] call_tmp[770085]))
    if call_tmp[770090]
    {
      (769878 'move' ret[769808](769877 'deref' 0))
      gotoReturn _end_<=[769806] _end_<=[769806]
    }
    (769883 'move' ret[769808](769882 'deref' 1))
    label _end_<=[769806]
    (769810 return ret[769808])
  }
  where {
    unknown call_tmp[770095] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (770098 'move' call_tmp[770095](769381 'typeof' _arg1[769377]))
    unknown call_tmp[770100] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (770103 'move' call_tmp[770100](769383 'typeof' _arg2[769378]))
    unknown call_tmp[770105] "expr temp" "maybe param" "maybe type" "temp"
    (770108 'move' call_tmp[770105](769385 call == call_tmp[770095] call_tmp[770100]))
    unknown call_tmp[770110] "expr temp" "maybe param" "maybe type" "temp"
    (770113 'move' call_tmp[770110](769586 call chpl_fields_are_comparable[769387] _arg1[769377] _arg2[769378]))
    (769590 '&' call_tmp[770105] call_tmp[770110])
  }
  function chpl_fields_are_comparable[770127](arg _arg1[770129]:range[64319](?), arg _arg2[770130]:range[64319](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[770209]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[770216] "expr temp" "maybe param" "maybe type" "temp"
    (770219 'move' call_tmp[770216](770133 call boundedType _mt[243] _arg1[770129]))
    unknown call_tmp[770221] "expr temp" "maybe param" "maybe type" "temp"
    (770224 'move' call_tmp[770221](770137 call boundedType _mt[243] _arg2[770130]))
    unknown call_tmp[770226] "expr temp" "maybe param" "maybe type" "temp"
    (770229 'move' call_tmp[770226](770141 'call resolves' c">" call_tmp[770216] call_tmp[770221]))
    unknown call_tmp[770231] "expr temp" "maybe param" "maybe type" "temp"
    (770234 'move' call_tmp[770231](770143 call stridable _mt[243] _arg1[770129]))
    unknown call_tmp[770236] "expr temp" "maybe param" "maybe type" "temp"
    (770239 'move' call_tmp[770236](770147 call stridable _mt[243] _arg2[770130]))
    unknown call_tmp[770241] "expr temp" "maybe param" "maybe type" "temp"
    (770244 'move' call_tmp[770241](770151 'call resolves' c">" call_tmp[770231] call_tmp[770236]))
    unknown call_tmp[770246] "expr temp" "maybe param" "maybe type" "temp"
    (770249 'move' call_tmp[770246](770153 call _low _mt[243] _arg1[770129]))
    unknown call_tmp[770251] "expr temp" "maybe param" "maybe type" "temp"
    (770254 'move' call_tmp[770251](770157 call _low _mt[243] _arg2[770130]))
    unknown call_tmp[770256] "expr temp" "maybe param" "maybe type" "temp"
    (770259 'move' call_tmp[770256](770161 'call resolves' c">" call_tmp[770246] call_tmp[770251]))
    unknown call_tmp[770261] "expr temp" "maybe param" "maybe type" "temp"
    (770264 'move' call_tmp[770261](770163 call _high _mt[243] _arg1[770129]))
    unknown call_tmp[770266] "expr temp" "maybe param" "maybe type" "temp"
    (770269 'move' call_tmp[770266](770167 call _high _mt[243] _arg2[770130]))
    unknown call_tmp[770271] "expr temp" "maybe param" "maybe type" "temp"
    (770274 'move' call_tmp[770271](770171 'call resolves' c">" call_tmp[770261] call_tmp[770266]))
    unknown call_tmp[770276] "expr temp" "maybe param" "maybe type" "temp"
    (770279 'move' call_tmp[770276](770173 call _stride _mt[243] _arg1[770129]))
    unknown call_tmp[770281] "expr temp" "maybe param" "maybe type" "temp"
    (770284 'move' call_tmp[770281](770177 call _stride _mt[243] _arg2[770130]))
    unknown call_tmp[770286] "expr temp" "maybe param" "maybe type" "temp"
    (770289 'move' call_tmp[770286](770181 'call resolves' c">" call_tmp[770276] call_tmp[770281]))
    unknown call_tmp[770291] "expr temp" "maybe param" "maybe type" "temp"
    (770294 'move' call_tmp[770291](770183 call _alignment _mt[243] _arg1[770129]))
    unknown call_tmp[770296] "expr temp" "maybe param" "maybe type" "temp"
    (770299 'move' call_tmp[770296](770187 call _alignment _mt[243] _arg2[770130]))
    unknown call_tmp[770301] "expr temp" "maybe param" "maybe type" "temp"
    (770304 'move' call_tmp[770301](770191 'call resolves' c">" call_tmp[770291] call_tmp[770296]))
    unknown call_tmp[770306] "expr temp" "maybe param" "maybe type" "temp"
    (770309 'move' call_tmp[770306](770193 call _aligned _mt[243] _arg1[770129]))
    unknown call_tmp[770311] "expr temp" "maybe param" "maybe type" "temp"
    (770314 'move' call_tmp[770311](770197 call _aligned _mt[243] _arg2[770130]))
    unknown call_tmp[770316] "expr temp" "maybe param" "maybe type" "temp"
    (770319 'move' call_tmp[770316](770201 'call resolves' c">" call_tmp[770306] call_tmp[770311]))
    unknown call_tmp[770321] "expr temp" "maybe param" "maybe type" "temp"
    (770324 'move' call_tmp[770321](770203 '&' call_tmp[770226] call_tmp[770241] call_tmp[770256] call_tmp[770271] call_tmp[770286] call_tmp[770301] call_tmp[770316]))
    (770214 'move' ret[770209](770213 'deref' call_tmp[770321]))
    (770211 return ret[770209])
  }
  function >[770115](arg _arg1[770117]:range[64319](?), arg _arg2[770118]:range[64319](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[770548]:bool[10] "RVV" "temp"
    unknown call_tmp[770625] "expr temp" "maybe param" "maybe type" "temp"
    (770628 'move' call_tmp[770625](770332 call boundedType _mt[243] _arg1[770117]))
    unknown call_tmp[770630] "expr temp" "maybe param" "maybe type" "temp"
    (770633 'move' call_tmp[770630](770336 call boundedType _mt[243] _arg2[770118]))
    unknown call_tmp[770635] "expr temp" "maybe param" "maybe type" "temp"
    (770638 'move' call_tmp[770635](770340 call > call_tmp[770625] call_tmp[770630]))
    if call_tmp[770635]
    {
      (770553 'move' ret[770548](770552 'deref' 1))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770640] "expr temp" "maybe param" "maybe type" "temp"
    (770643 'move' call_tmp[770640](770346 call boundedType _mt[243] _arg1[770117]))
    unknown call_tmp[770645] "expr temp" "maybe param" "maybe type" "temp"
    (770648 'move' call_tmp[770645](770350 call boundedType _mt[243] _arg2[770118]))
    unknown call_tmp[770650] "expr temp" "maybe param" "maybe type" "temp"
    (770653 'move' call_tmp[770650](770354 call < call_tmp[770640] call_tmp[770645]))
    if call_tmp[770650]
    {
      (770558 'move' ret[770548](770557 'deref' 0))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770655] "expr temp" "maybe param" "maybe type" "temp"
    (770658 'move' call_tmp[770655](770360 call stridable _mt[243] _arg1[770117]))
    unknown call_tmp[770660] "expr temp" "maybe param" "maybe type" "temp"
    (770663 'move' call_tmp[770660](770364 call stridable _mt[243] _arg2[770118]))
    unknown call_tmp[770665] "expr temp" "maybe param" "maybe type" "temp"
    (770668 'move' call_tmp[770665](770368 call > call_tmp[770655] call_tmp[770660]))
    if call_tmp[770665]
    {
      (770563 'move' ret[770548](770562 'deref' 1))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770670] "expr temp" "maybe param" "maybe type" "temp"
    (770673 'move' call_tmp[770670](770374 call stridable _mt[243] _arg1[770117]))
    unknown call_tmp[770675] "expr temp" "maybe param" "maybe type" "temp"
    (770678 'move' call_tmp[770675](770378 call stridable _mt[243] _arg2[770118]))
    unknown call_tmp[770680] "expr temp" "maybe param" "maybe type" "temp"
    (770683 'move' call_tmp[770680](770382 call < call_tmp[770670] call_tmp[770675]))
    if call_tmp[770680]
    {
      (770568 'move' ret[770548](770567 'deref' 0))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770685] "expr temp" "maybe param" "maybe type" "temp"
    (770688 'move' call_tmp[770685](770388 call _low _mt[243] _arg1[770117]))
    unknown call_tmp[770690] "expr temp" "maybe param" "maybe type" "temp"
    (770693 'move' call_tmp[770690](770392 call _low _mt[243] _arg2[770118]))
    unknown call_tmp[770695] "expr temp" "maybe param" "maybe type" "temp"
    (770698 'move' call_tmp[770695](770396 call > call_tmp[770685] call_tmp[770690]))
    if call_tmp[770695]
    {
      (770573 'move' ret[770548](770572 'deref' 1))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770700] "expr temp" "maybe param" "maybe type" "temp"
    (770703 'move' call_tmp[770700](770402 call _low _mt[243] _arg1[770117]))
    unknown call_tmp[770705] "expr temp" "maybe param" "maybe type" "temp"
    (770708 'move' call_tmp[770705](770406 call _low _mt[243] _arg2[770118]))
    unknown call_tmp[770710] "expr temp" "maybe param" "maybe type" "temp"
    (770713 'move' call_tmp[770710](770410 call < call_tmp[770700] call_tmp[770705]))
    if call_tmp[770710]
    {
      (770578 'move' ret[770548](770577 'deref' 0))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770715] "expr temp" "maybe param" "maybe type" "temp"
    (770718 'move' call_tmp[770715](770416 call _high _mt[243] _arg1[770117]))
    unknown call_tmp[770720] "expr temp" "maybe param" "maybe type" "temp"
    (770723 'move' call_tmp[770720](770420 call _high _mt[243] _arg2[770118]))
    unknown call_tmp[770725] "expr temp" "maybe param" "maybe type" "temp"
    (770728 'move' call_tmp[770725](770424 call > call_tmp[770715] call_tmp[770720]))
    if call_tmp[770725]
    {
      (770583 'move' ret[770548](770582 'deref' 1))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770730] "expr temp" "maybe param" "maybe type" "temp"
    (770733 'move' call_tmp[770730](770430 call _high _mt[243] _arg1[770117]))
    unknown call_tmp[770735] "expr temp" "maybe param" "maybe type" "temp"
    (770738 'move' call_tmp[770735](770434 call _high _mt[243] _arg2[770118]))
    unknown call_tmp[770740] "expr temp" "maybe param" "maybe type" "temp"
    (770743 'move' call_tmp[770740](770438 call < call_tmp[770730] call_tmp[770735]))
    if call_tmp[770740]
    {
      (770588 'move' ret[770548](770587 'deref' 0))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770745] "expr temp" "maybe param" "maybe type" "temp"
    (770748 'move' call_tmp[770745](770444 call _stride _mt[243] _arg1[770117]))
    unknown call_tmp[770750] "expr temp" "maybe param" "maybe type" "temp"
    (770753 'move' call_tmp[770750](770448 call _stride _mt[243] _arg2[770118]))
    unknown call_tmp[770755] "expr temp" "maybe param" "maybe type" "temp"
    (770758 'move' call_tmp[770755](770452 call > call_tmp[770745] call_tmp[770750]))
    if call_tmp[770755]
    {
      (770593 'move' ret[770548](770592 'deref' 1))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770760] "expr temp" "maybe param" "maybe type" "temp"
    (770763 'move' call_tmp[770760](770458 call _stride _mt[243] _arg1[770117]))
    unknown call_tmp[770765] "expr temp" "maybe param" "maybe type" "temp"
    (770768 'move' call_tmp[770765](770462 call _stride _mt[243] _arg2[770118]))
    unknown call_tmp[770770] "expr temp" "maybe param" "maybe type" "temp"
    (770773 'move' call_tmp[770770](770466 call < call_tmp[770760] call_tmp[770765]))
    if call_tmp[770770]
    {
      (770598 'move' ret[770548](770597 'deref' 0))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770775] "expr temp" "maybe param" "maybe type" "temp"
    (770778 'move' call_tmp[770775](770472 call _alignment _mt[243] _arg1[770117]))
    unknown call_tmp[770780] "expr temp" "maybe param" "maybe type" "temp"
    (770783 'move' call_tmp[770780](770476 call _alignment _mt[243] _arg2[770118]))
    unknown call_tmp[770785] "expr temp" "maybe param" "maybe type" "temp"
    (770788 'move' call_tmp[770785](770480 call > call_tmp[770775] call_tmp[770780]))
    if call_tmp[770785]
    {
      (770603 'move' ret[770548](770602 'deref' 1))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770790] "expr temp" "maybe param" "maybe type" "temp"
    (770793 'move' call_tmp[770790](770486 call _alignment _mt[243] _arg1[770117]))
    unknown call_tmp[770795] "expr temp" "maybe param" "maybe type" "temp"
    (770798 'move' call_tmp[770795](770490 call _alignment _mt[243] _arg2[770118]))
    unknown call_tmp[770800] "expr temp" "maybe param" "maybe type" "temp"
    (770803 'move' call_tmp[770800](770494 call < call_tmp[770790] call_tmp[770795]))
    if call_tmp[770800]
    {
      (770608 'move' ret[770548](770607 'deref' 0))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770805] "expr temp" "maybe param" "maybe type" "temp"
    (770808 'move' call_tmp[770805](770500 call _aligned _mt[243] _arg1[770117]))
    unknown call_tmp[770810] "expr temp" "maybe param" "maybe type" "temp"
    (770813 'move' call_tmp[770810](770504 call _aligned _mt[243] _arg2[770118]))
    unknown call_tmp[770815] "expr temp" "maybe param" "maybe type" "temp"
    (770818 'move' call_tmp[770815](770508 call > call_tmp[770805] call_tmp[770810]))
    if call_tmp[770815]
    {
      (770613 'move' ret[770548](770612 'deref' 1))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    unknown call_tmp[770820] "expr temp" "maybe param" "maybe type" "temp"
    (770823 'move' call_tmp[770820](770514 call _aligned _mt[243] _arg1[770117]))
    unknown call_tmp[770825] "expr temp" "maybe param" "maybe type" "temp"
    (770828 'move' call_tmp[770825](770518 call _aligned _mt[243] _arg2[770118]))
    unknown call_tmp[770830] "expr temp" "maybe param" "maybe type" "temp"
    (770833 'move' call_tmp[770830](770522 call < call_tmp[770820] call_tmp[770825]))
    if call_tmp[770830]
    {
      (770618 'move' ret[770548](770617 'deref' 0))
      gotoReturn _end_>[770546] _end_>[770546]
    }
    (770623 'move' ret[770548](770622 'deref' 0))
    label _end_>[770546]
    (770550 return ret[770548])
  }
  where {
    unknown call_tmp[770835] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (770838 'move' call_tmp[770835](770121 'typeof' _arg1[770117]))
    unknown call_tmp[770840] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (770843 'move' call_tmp[770840](770123 'typeof' _arg2[770118]))
    unknown call_tmp[770845] "expr temp" "maybe param" "maybe type" "temp"
    (770848 'move' call_tmp[770845](770125 call == call_tmp[770835] call_tmp[770840]))
    unknown call_tmp[770850] "expr temp" "maybe param" "maybe type" "temp"
    (770853 'move' call_tmp[770850](770326 call chpl_fields_are_comparable[770127] _arg1[770117] _arg2[770118]))
    (770330 '&' call_tmp[770845] call_tmp[770850])
  }
  function chpl_fields_are_comparable[770867](arg _arg1[770869]:range[64319](?), arg _arg2[770870]:range[64319](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[770949]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[770956] "expr temp" "maybe param" "maybe type" "temp"
    (770959 'move' call_tmp[770956](770873 call boundedType _mt[243] _arg1[770869]))
    unknown call_tmp[770961] "expr temp" "maybe param" "maybe type" "temp"
    (770964 'move' call_tmp[770961](770877 call boundedType _mt[243] _arg2[770870]))
    unknown call_tmp[770966] "expr temp" "maybe param" "maybe type" "temp"
    (770969 'move' call_tmp[770966](770881 'call resolves' c">=" call_tmp[770956] call_tmp[770961]))
    unknown call_tmp[770971] "expr temp" "maybe param" "maybe type" "temp"
    (770974 'move' call_tmp[770971](770883 call stridable _mt[243] _arg1[770869]))
    unknown call_tmp[770976] "expr temp" "maybe param" "maybe type" "temp"
    (770979 'move' call_tmp[770976](770887 call stridable _mt[243] _arg2[770870]))
    unknown call_tmp[770981] "expr temp" "maybe param" "maybe type" "temp"
    (770984 'move' call_tmp[770981](770891 'call resolves' c">=" call_tmp[770971] call_tmp[770976]))
    unknown call_tmp[770986] "expr temp" "maybe param" "maybe type" "temp"
    (770989 'move' call_tmp[770986](770893 call _low _mt[243] _arg1[770869]))
    unknown call_tmp[770991] "expr temp" "maybe param" "maybe type" "temp"
    (770994 'move' call_tmp[770991](770897 call _low _mt[243] _arg2[770870]))
    unknown call_tmp[770996] "expr temp" "maybe param" "maybe type" "temp"
    (770999 'move' call_tmp[770996](770901 'call resolves' c">=" call_tmp[770986] call_tmp[770991]))
    unknown call_tmp[771001] "expr temp" "maybe param" "maybe type" "temp"
    (771004 'move' call_tmp[771001](770903 call _high _mt[243] _arg1[770869]))
    unknown call_tmp[771006] "expr temp" "maybe param" "maybe type" "temp"
    (771009 'move' call_tmp[771006](770907 call _high _mt[243] _arg2[770870]))
    unknown call_tmp[771011] "expr temp" "maybe param" "maybe type" "temp"
    (771014 'move' call_tmp[771011](770911 'call resolves' c">=" call_tmp[771001] call_tmp[771006]))
    unknown call_tmp[771016] "expr temp" "maybe param" "maybe type" "temp"
    (771019 'move' call_tmp[771016](770913 call _stride _mt[243] _arg1[770869]))
    unknown call_tmp[771021] "expr temp" "maybe param" "maybe type" "temp"
    (771024 'move' call_tmp[771021](770917 call _stride _mt[243] _arg2[770870]))
    unknown call_tmp[771026] "expr temp" "maybe param" "maybe type" "temp"
    (771029 'move' call_tmp[771026](770921 'call resolves' c">=" call_tmp[771016] call_tmp[771021]))
    unknown call_tmp[771031] "expr temp" "maybe param" "maybe type" "temp"
    (771034 'move' call_tmp[771031](770923 call _alignment _mt[243] _arg1[770869]))
    unknown call_tmp[771036] "expr temp" "maybe param" "maybe type" "temp"
    (771039 'move' call_tmp[771036](770927 call _alignment _mt[243] _arg2[770870]))
    unknown call_tmp[771041] "expr temp" "maybe param" "maybe type" "temp"
    (771044 'move' call_tmp[771041](770931 'call resolves' c">=" call_tmp[771031] call_tmp[771036]))
    unknown call_tmp[771046] "expr temp" "maybe param" "maybe type" "temp"
    (771049 'move' call_tmp[771046](770933 call _aligned _mt[243] _arg1[770869]))
    unknown call_tmp[771051] "expr temp" "maybe param" "maybe type" "temp"
    (771054 'move' call_tmp[771051](770937 call _aligned _mt[243] _arg2[770870]))
    unknown call_tmp[771056] "expr temp" "maybe param" "maybe type" "temp"
    (771059 'move' call_tmp[771056](770941 'call resolves' c">=" call_tmp[771046] call_tmp[771051]))
    unknown call_tmp[771061] "expr temp" "maybe param" "maybe type" "temp"
    (771064 'move' call_tmp[771061](770943 '&' call_tmp[770966] call_tmp[770981] call_tmp[770996] call_tmp[771011] call_tmp[771026] call_tmp[771041] call_tmp[771056]))
    (770954 'move' ret[770949](770953 'deref' call_tmp[771061]))
    (770951 return ret[770949])
  }
  function >=[770855](arg _arg1[770857]:range[64319](?), arg _arg2[770858]:range[64319](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[771288]:bool[10] "RVV" "temp"
    unknown call_tmp[771365] "expr temp" "maybe param" "maybe type" "temp"
    (771368 'move' call_tmp[771365](771072 call boundedType _mt[243] _arg1[770857]))
    unknown call_tmp[771370] "expr temp" "maybe param" "maybe type" "temp"
    (771373 'move' call_tmp[771370](771076 call boundedType _mt[243] _arg2[770858]))
    unknown call_tmp[771375] "expr temp" "maybe param" "maybe type" "temp"
    (771378 'move' call_tmp[771375](771080 call > call_tmp[771365] call_tmp[771370]))
    if call_tmp[771375]
    {
      (771293 'move' ret[771288](771292 'deref' 1))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771380] "expr temp" "maybe param" "maybe type" "temp"
    (771383 'move' call_tmp[771380](771086 call boundedType _mt[243] _arg1[770857]))
    unknown call_tmp[771385] "expr temp" "maybe param" "maybe type" "temp"
    (771388 'move' call_tmp[771385](771090 call boundedType _mt[243] _arg2[770858]))
    unknown call_tmp[771390] "expr temp" "maybe param" "maybe type" "temp"
    (771393 'move' call_tmp[771390](771094 call < call_tmp[771380] call_tmp[771385]))
    if call_tmp[771390]
    {
      (771298 'move' ret[771288](771297 'deref' 0))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771395] "expr temp" "maybe param" "maybe type" "temp"
    (771398 'move' call_tmp[771395](771100 call stridable _mt[243] _arg1[770857]))
    unknown call_tmp[771400] "expr temp" "maybe param" "maybe type" "temp"
    (771403 'move' call_tmp[771400](771104 call stridable _mt[243] _arg2[770858]))
    unknown call_tmp[771405] "expr temp" "maybe param" "maybe type" "temp"
    (771408 'move' call_tmp[771405](771108 call > call_tmp[771395] call_tmp[771400]))
    if call_tmp[771405]
    {
      (771303 'move' ret[771288](771302 'deref' 1))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771410] "expr temp" "maybe param" "maybe type" "temp"
    (771413 'move' call_tmp[771410](771114 call stridable _mt[243] _arg1[770857]))
    unknown call_tmp[771415] "expr temp" "maybe param" "maybe type" "temp"
    (771418 'move' call_tmp[771415](771118 call stridable _mt[243] _arg2[770858]))
    unknown call_tmp[771420] "expr temp" "maybe param" "maybe type" "temp"
    (771423 'move' call_tmp[771420](771122 call < call_tmp[771410] call_tmp[771415]))
    if call_tmp[771420]
    {
      (771308 'move' ret[771288](771307 'deref' 0))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771425] "expr temp" "maybe param" "maybe type" "temp"
    (771428 'move' call_tmp[771425](771128 call _low _mt[243] _arg1[770857]))
    unknown call_tmp[771430] "expr temp" "maybe param" "maybe type" "temp"
    (771433 'move' call_tmp[771430](771132 call _low _mt[243] _arg2[770858]))
    unknown call_tmp[771435] "expr temp" "maybe param" "maybe type" "temp"
    (771438 'move' call_tmp[771435](771136 call > call_tmp[771425] call_tmp[771430]))
    if call_tmp[771435]
    {
      (771313 'move' ret[771288](771312 'deref' 1))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771440] "expr temp" "maybe param" "maybe type" "temp"
    (771443 'move' call_tmp[771440](771142 call _low _mt[243] _arg1[770857]))
    unknown call_tmp[771445] "expr temp" "maybe param" "maybe type" "temp"
    (771448 'move' call_tmp[771445](771146 call _low _mt[243] _arg2[770858]))
    unknown call_tmp[771450] "expr temp" "maybe param" "maybe type" "temp"
    (771453 'move' call_tmp[771450](771150 call < call_tmp[771440] call_tmp[771445]))
    if call_tmp[771450]
    {
      (771318 'move' ret[771288](771317 'deref' 0))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771455] "expr temp" "maybe param" "maybe type" "temp"
    (771458 'move' call_tmp[771455](771156 call _high _mt[243] _arg1[770857]))
    unknown call_tmp[771460] "expr temp" "maybe param" "maybe type" "temp"
    (771463 'move' call_tmp[771460](771160 call _high _mt[243] _arg2[770858]))
    unknown call_tmp[771465] "expr temp" "maybe param" "maybe type" "temp"
    (771468 'move' call_tmp[771465](771164 call > call_tmp[771455] call_tmp[771460]))
    if call_tmp[771465]
    {
      (771323 'move' ret[771288](771322 'deref' 1))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771470] "expr temp" "maybe param" "maybe type" "temp"
    (771473 'move' call_tmp[771470](771170 call _high _mt[243] _arg1[770857]))
    unknown call_tmp[771475] "expr temp" "maybe param" "maybe type" "temp"
    (771478 'move' call_tmp[771475](771174 call _high _mt[243] _arg2[770858]))
    unknown call_tmp[771480] "expr temp" "maybe param" "maybe type" "temp"
    (771483 'move' call_tmp[771480](771178 call < call_tmp[771470] call_tmp[771475]))
    if call_tmp[771480]
    {
      (771328 'move' ret[771288](771327 'deref' 0))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771485] "expr temp" "maybe param" "maybe type" "temp"
    (771488 'move' call_tmp[771485](771184 call _stride _mt[243] _arg1[770857]))
    unknown call_tmp[771490] "expr temp" "maybe param" "maybe type" "temp"
    (771493 'move' call_tmp[771490](771188 call _stride _mt[243] _arg2[770858]))
    unknown call_tmp[771495] "expr temp" "maybe param" "maybe type" "temp"
    (771498 'move' call_tmp[771495](771192 call > call_tmp[771485] call_tmp[771490]))
    if call_tmp[771495]
    {
      (771333 'move' ret[771288](771332 'deref' 1))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771500] "expr temp" "maybe param" "maybe type" "temp"
    (771503 'move' call_tmp[771500](771198 call _stride _mt[243] _arg1[770857]))
    unknown call_tmp[771505] "expr temp" "maybe param" "maybe type" "temp"
    (771508 'move' call_tmp[771505](771202 call _stride _mt[243] _arg2[770858]))
    unknown call_tmp[771510] "expr temp" "maybe param" "maybe type" "temp"
    (771513 'move' call_tmp[771510](771206 call < call_tmp[771500] call_tmp[771505]))
    if call_tmp[771510]
    {
      (771338 'move' ret[771288](771337 'deref' 0))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771515] "expr temp" "maybe param" "maybe type" "temp"
    (771518 'move' call_tmp[771515](771212 call _alignment _mt[243] _arg1[770857]))
    unknown call_tmp[771520] "expr temp" "maybe param" "maybe type" "temp"
    (771523 'move' call_tmp[771520](771216 call _alignment _mt[243] _arg2[770858]))
    unknown call_tmp[771525] "expr temp" "maybe param" "maybe type" "temp"
    (771528 'move' call_tmp[771525](771220 call > call_tmp[771515] call_tmp[771520]))
    if call_tmp[771525]
    {
      (771343 'move' ret[771288](771342 'deref' 1))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771530] "expr temp" "maybe param" "maybe type" "temp"
    (771533 'move' call_tmp[771530](771226 call _alignment _mt[243] _arg1[770857]))
    unknown call_tmp[771535] "expr temp" "maybe param" "maybe type" "temp"
    (771538 'move' call_tmp[771535](771230 call _alignment _mt[243] _arg2[770858]))
    unknown call_tmp[771540] "expr temp" "maybe param" "maybe type" "temp"
    (771543 'move' call_tmp[771540](771234 call < call_tmp[771530] call_tmp[771535]))
    if call_tmp[771540]
    {
      (771348 'move' ret[771288](771347 'deref' 0))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771545] "expr temp" "maybe param" "maybe type" "temp"
    (771548 'move' call_tmp[771545](771240 call _aligned _mt[243] _arg1[770857]))
    unknown call_tmp[771550] "expr temp" "maybe param" "maybe type" "temp"
    (771553 'move' call_tmp[771550](771244 call _aligned _mt[243] _arg2[770858]))
    unknown call_tmp[771555] "expr temp" "maybe param" "maybe type" "temp"
    (771558 'move' call_tmp[771555](771248 call > call_tmp[771545] call_tmp[771550]))
    if call_tmp[771555]
    {
      (771353 'move' ret[771288](771352 'deref' 1))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    unknown call_tmp[771560] "expr temp" "maybe param" "maybe type" "temp"
    (771563 'move' call_tmp[771560](771254 call _aligned _mt[243] _arg1[770857]))
    unknown call_tmp[771565] "expr temp" "maybe param" "maybe type" "temp"
    (771568 'move' call_tmp[771565](771258 call _aligned _mt[243] _arg2[770858]))
    unknown call_tmp[771570] "expr temp" "maybe param" "maybe type" "temp"
    (771573 'move' call_tmp[771570](771262 call < call_tmp[771560] call_tmp[771565]))
    if call_tmp[771570]
    {
      (771358 'move' ret[771288](771357 'deref' 0))
      gotoReturn _end_>=[771286] _end_>=[771286]
    }
    (771363 'move' ret[771288](771362 'deref' 1))
    label _end_>=[771286]
    (771290 return ret[771288])
  }
  where {
    unknown call_tmp[771575] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (771578 'move' call_tmp[771575](770861 'typeof' _arg1[770857]))
    unknown call_tmp[771580] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (771583 'move' call_tmp[771580](770863 'typeof' _arg2[770858]))
    unknown call_tmp[771585] "expr temp" "maybe param" "maybe type" "temp"
    (771588 'move' call_tmp[771585](770865 call == call_tmp[771575] call_tmp[771580]))
    unknown call_tmp[771590] "expr temp" "maybe param" "maybe type" "temp"
    (771593 'move' call_tmp[771590](771066 call chpl_fields_are_comparable[770867] _arg1[770857] _arg2[770858]))
    (771070 '&' call_tmp[771585] call_tmp[771590])
  }
  type range[64319](?) unknown idxType[64223] "type variable" int(64)[13] unknown boundedType[64233] "param" bounded[64208] BoundedRangeType[64216] unknown stridable[64239] "param" 0 bool[10] unknown _low[64247](64246 call chpl__idxTypeToIntIdxType idxType[64223]) unknown _high[64255](64254 call chpl__idxTypeToIntIdxType idxType[64223]) unknown _stride[64268](64265 IfExpr  stridable[64239] then
  { scopeless
    (64263 call chpl__rangeStrideType idxType[64223])
  } else
  { scopeless
    nothing[7]
  } ) unknown _alignment[64281](64278 IfExpr  stridable[64239] then
  { scopeless
    (64276 call chpl__idxTypeToIntIdxType idxType[64223])
  } else
  { scopeless
    nothing[7]
  } ) unknown _aligned[64291](64288 IfExpr  stridable[64239] then
  { scopeless
    bool[10]
  } else
  { scopeless
    nothing[7]
  } )
  function range[64319](?).intIdxType[64333](arg _mt[64338]:_MT[238], arg this[64335]:range[64319](?) :
  range[64319](?)) type : _unknown[51] "method" "no parens"
  {
    unknown ret[509120] "RVV" "temp" "type variable"
    unknown call_tmp[616382] "expr temp" "maybe param" "maybe type" "temp"
    (616385 'move' call_tmp[616382](373808 call idxType _mt[243] this[64335]))
    unknown call_tmp[616387] "expr temp" "maybe param" "maybe type" "temp"
    (616390 'move' call_tmp[616387](64343 call chpl__idxTypeToIntIdxType call_tmp[616382]))
    (509125 'move' ret[509120](509124 'deref' call_tmp[616387]))
    (509122 return ret[509120])
  }
  function range[64319](?).init[64356](arg _mt[64421]:_MT[238], ref arg this[64418]:range[64319](?) :
  range[64319](?), arg idxType[64353]:_any[178](?) =
  int(64)[13], param arg boundedType[64363]:BoundedRangeType[64216] =
  bounded[64208], param arg stridable[64369]:bool[10] =
  0, arg _low[64379] :
  idxType[64353] =
  (64378 call chpl__intToIdx idxType[64353] 1), arg _high[64389] :
  idxType[64353] =
  (64388 call chpl__intToIdx idxType[64353] 0), arg _stride[64398] :
  (64396 call chpl__rangeStrideType idxType[64353]) =
  1, arg _alignment[64408] :
  idxType[64353] =
  (64407 call chpl__intToIdx idxType[64353] 0), arg _aligned[64414]:bool[10] =
  0) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454914] "temp" "type variable"
    (454916 'move' tmp[454914] idxType[64353])
    (454918 'init field' this[64418] c"idxType" tmp[454914])
    unknown call_tmp[616392] "expr temp" "maybe param" "maybe type" "temp"
    (616395 'move' call_tmp[616392](454923 call _cast BoundedRangeType[64216] boundedType[64363]))
    (454925 'init field' this[64418] c"boundedType" call_tmp[616392])
    (475345 'end of statement')
    unknown call_tmp[616397] "expr temp" "maybe param" "maybe type" "temp"
    (616400 'move' call_tmp[616397](454929 call _cast bool[10] stridable[64369]))
    (454931 'init field' this[64418] c"stridable" call_tmp[616397])
    (475346 'end of statement')
    unknown call_tmp[616402] "maybe param" "maybe type" "temp"
    (616405 'move' call_tmp[616402](64459 call chpl__idxToInt _low[64379]))
    unknown call_tmp[616407] "expr temp" "maybe param" "maybe type" "temp"
    (616410 'move' call_tmp[616407](454945 '.v' this[64418] c"idxType"))
    unknown call_tmp[616412] "maybe param" "maybe type" "temp"
    (616415 'move' call_tmp[616412](454937 call chpl__idxTypeToIntIdxType call_tmp[616407]))
    unknown tmp[454934] "temp"
    (454939 'init var' tmp[454934] call_tmp[616402] call_tmp[616412])
    (454941 'init field' this[64418] c"_low" tmp[454934])
    (475347 'end of statement')
    unknown call_tmp[616417] "maybe param" "maybe type" "temp"
    (616420 'move' call_tmp[616417](64472 call chpl__idxToInt _high[64389]))
    unknown call_tmp[616422] "expr temp" "maybe param" "maybe type" "temp"
    (616425 'move' call_tmp[616422](454959 '.v' this[64418] c"idxType"))
    unknown call_tmp[616427] "maybe param" "maybe type" "temp"
    (616430 'move' call_tmp[616427](454951 call chpl__idxTypeToIntIdxType call_tmp[616422]))
    unknown tmp[454948] "temp"
    (454953 'init var' tmp[454948] call_tmp[616417] call_tmp[616427])
    (454955 'init field' this[64418] c"_high" tmp[454948])
    (475348 'end of statement')
    unknown tmp[454962] "temp"
    unknown tmp[555508] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555509] "maybe param" "temp"
    unknown call_tmp[616432] "expr temp" "maybe param" "maybe type" "temp"
    (616435 'move' call_tmp[616432](454978 '.v' this[64418] c"stridable"))
    (555514 'move' tmp[555509](555512 call _cond_test call_tmp[616432]))
    if tmp[555509]
    {
      unknown tmp[555516] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616437] "expr temp" "maybe param" "maybe type" "temp"
      (616440 'move' call_tmp[616437](454981 '.v' this[64418] c"idxType"))
      (555518 'move' tmp[555516](454967 call chpl__rangeStrideType call_tmp[616437]))
      (555523 'move' tmp[555508](555520 '_paramFoldLogical' tmp[555509] tmp[555516]))
    }
    {
      (555528 'move' tmp[555508](555525 '_paramFoldLogical' tmp[555509] nothing[7]))
    }
    (454972 'default init var' tmp[454962] tmp[555508])
    (454974 '.=' this[64418] c"_stride" tmp[454962])
    (475349 'end of statement')
    unknown tmp[454984] "temp"
    unknown tmp[555535] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555536] "maybe param" "temp"
    unknown call_tmp[616442] "expr temp" "maybe param" "maybe type" "temp"
    (616445 'move' call_tmp[616442](455000 '.v' this[64418] c"stridable"))
    (555541 'move' tmp[555536](555539 call _cond_test call_tmp[616442]))
    if tmp[555536]
    {
      unknown tmp[555543] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616447] "expr temp" "maybe param" "maybe type" "temp"
      (616450 'move' call_tmp[616447](455003 '.v' this[64418] c"idxType"))
      (555545 'move' tmp[555543](454989 call chpl__idxTypeToIntIdxType call_tmp[616447]))
      (555550 'move' tmp[555535](555547 '_paramFoldLogical' tmp[555536] tmp[555543]))
    }
    {
      (555555 'move' tmp[555535](555552 '_paramFoldLogical' tmp[555536] nothing[7]))
    }
    (454994 'default init var' tmp[454984] tmp[555535])
    (454996 '.=' this[64418] c"_alignment" tmp[454984])
    (475350 'end of statement')
    unknown tmp[455006] "temp"
    unknown tmp[555562] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555563] "maybe param" "temp"
    unknown call_tmp[616452] "expr temp" "maybe param" "maybe type" "temp"
    (616455 'move' call_tmp[616452](455020 '.v' this[64418] c"stridable"))
    (555568 'move' tmp[555563](555566 call _cond_test call_tmp[616452]))
    if tmp[555563]
    {
      (555573 'move' tmp[555562](555570 '_paramFoldLogical' tmp[555563] bool[10]))
    }
    {
      (555578 'move' tmp[555562](555575 '_paramFoldLogical' tmp[555563] nothing[7]))
    }
    (455014 'default init var' tmp[455006] tmp[555562])
    (455016 '.=' this[64418] c"_aligned" tmp[455006])
    (475351 'end of statement')
    unknown call_tmp[616457] "expr temp" "maybe param" "maybe type" "temp"
    (616460 'move' call_tmp[616457](64518 call _cond_test stridable[64369]))
    if call_tmp[616457]
    {
      unknown call_tmp[616464] "expr temp" "maybe param" "maybe type" "temp"
      (616467 'move' call_tmp[616464](64487 call _stride _mt[243] this[64418]))
      (64491 call = call_tmp[616464] _stride[64398])
      (475352 'end of statement')
      unknown call_tmp[616471] "expr temp" "maybe param" "maybe type" "temp"
      (616474 'move' call_tmp[616471](64498 call _alignment _mt[243] this[64418]))
      unknown call_tmp[616476] "expr temp" "maybe param" "maybe type" "temp"
      (616479 'move' call_tmp[616476](64504 call chpl__idxToInt _alignment[64408]))
      (64505 call = call_tmp[616471] call_tmp[616476])
      (475353 'end of statement')
      unknown call_tmp[616483] "expr temp" "maybe param" "maybe type" "temp"
      (616486 'move' call_tmp[616483](64511 call _aligned _mt[243] this[64418]))
      (64515 call = call_tmp[616483] _aligned[64414])
    }
    unknown tmp[419309] "maybe param" "temp"
    (419320 'move' tmp[419309](64523 call ! stridable[64369]))
    unknown call_tmp[616488] "expr temp" "maybe param" "maybe type" "temp"
    (616491 'move' call_tmp[616488](419322 call _cond_invalid tmp[419309]))
    if call_tmp[616488]
    {
      (419325 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555585] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555586] "maybe param" "temp"
    unknown call_tmp[616493] "expr temp" "maybe param" "maybe type" "temp"
    (616496 'move' call_tmp[616493](419310 call isTrue tmp[419309]))
    (555591 'move' tmp[555586](555589 call _cond_test call_tmp[616493]))
    if tmp[555586]
    {
      unknown tmp[555593] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555595 'move' tmp[555593](419313 call isTrue 1))
      (555600 'move' tmp[555585](555597 '_paramFoldLogical' tmp[555586] tmp[555593]))
    }
    {
      (555605 'move' tmp[555585](555602 '_paramFoldLogical' tmp[555586] 0))
    }
    unknown call_tmp[616498] "expr temp" "maybe param" "maybe type" "temp"
    (616501 'move' call_tmp[616498](64536 call _cond_test tmp[555585]))
    if call_tmp[616498]
    {
      unknown call_tmp[616503] "expr temp" "maybe param" "maybe type" "temp"
      (616506 'move' call_tmp[616503](64531 call == _stride[64398] 1))
      (64534 call assert call_tmp[616503])
    }
    (509127 return _void[55])
  }
  function _isAnyNothing[64549](arg args[64546]:_any[178](?) ...) param : _unknown[51] "private"
  {
    unknown ret[509131] "RVV" "param" "temp"
    {
      unknown i[64579] "dead at end of block" "insert auto destroy"
      (541131 'init var' i[64579] 0)
      (475357 'end of statement')
      unknown tmp[64580] "maybe param" "temp"
      unknown call_tmp[616510] "expr temp" "maybe param" "maybe type" "temp"
      (616513 'move' call_tmp[616510](64554 call size _mt[243] args[64546]))
      unknown call_tmp[616515] "expr temp" "maybe param" "maybe type" "temp"
      (616518 'move' call_tmp[616515](64558 call - call_tmp[616510] 1))
      (64592 'move' tmp[64580](64590 call chpl_compute_low_param_loop_bound 0 call_tmp[616515]))
      unknown tmp[64581] "maybe param" "temp"
      unknown call_tmp[616522] "expr temp" "maybe param" "maybe type" "temp"
      (616525 'move' call_tmp[616522](64599 call size _mt[243] args[64546]))
      unknown call_tmp[616527] "expr temp" "maybe param" "maybe type" "temp"
      (616530 'move' call_tmp[616527](64597 call - call_tmp[616522] 1))
      (64605 'move' tmp[64581](64603 call chpl_compute_high_param_loop_bound 0 call_tmp[616527]))
      unknown tmp[64582] "maybe param" "temp"
      (64608 'move' tmp[64582] 1)
      ParamForLoop[64610]
      { i[64579] tmp[64580] tmp[64581] tmp[64582]
        {
          { scopeless type
            unknown call_type_tmp[491967] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[616532] "expr temp" "maybe param" "maybe type" "temp"
            (616535 'move' call_tmp[616532](64566 call args[64546] i[64579]))
            (491971 'move' call_type_tmp[491967](64567 'typeof' call_tmp[616532]))
          }
          unknown call_tmp[616537] "expr temp" "maybe param" "maybe type" "temp"
          (616540 'move' call_tmp[616537](64569 call isNothingType call_type_tmp[491967]))
          unknown call_tmp[616542] "expr temp" "maybe param" "maybe type" "temp"
          (616545 'move' call_tmp[616542](64573 call _cond_test call_tmp[616537]))
          if call_tmp[616542]
          {
            (509137 'move' ret[509131](509136 'coerce' 1 bool[10]))
            gotoReturn _end__isAnyNothing[509129] _end__isAnyNothing[509129]
          }
        }
      }
      label _unused_continueLabel[64584]
      label _breakLabel[64583]
    }
    (509143 'move' ret[509131](509142 'coerce' 0 bool[10]))
    label _end__isAnyNothing[509129]
    (509133 return ret[509131])
  }
  { scopeless type
    bool[10]
  }
  function range[64319](?).init[64633](arg _mt[64679]:_MT[238], ref arg this[64676]:range[64319](?) :
  range[64319](?), arg idxType[64630]:_any[178](?) =
  int(64)[13], param arg boundedType[64640]:BoundedRangeType[64216] =
  bounded[64208], param arg stridable[64646]:bool[10] =
  0, arg _low[64656] :
  idxType[64630] =
  (64655 call chpl__intToIdx idxType[64630] 1), arg _high[64666] :
  idxType[64630] =
  (64665 call chpl__intToIdx idxType[64630] 0), arg _stride[64670]:_any[178](?), arg _alignment[64672]:_any[178](?), arg _aligned[64674]:_any[178](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[455023] "temp" "type variable"
    (455025 'move' tmp[455023] idxType[64630])
    (455027 'init field' this[64676] c"idxType" tmp[455023])
    unknown call_tmp[616547] "expr temp" "maybe param" "maybe type" "temp"
    (616550 'move' call_tmp[616547](455032 call _cast BoundedRangeType[64216] boundedType[64640]))
    (455034 'init field' this[64676] c"boundedType" call_tmp[616547])
    (475360 'end of statement')
    unknown call_tmp[616552] "expr temp" "maybe param" "maybe type" "temp"
    (616555 'move' call_tmp[616552](455038 call _cast bool[10] stridable[64646]))
    (455040 'init field' this[64676] c"stridable" call_tmp[616552])
    (475361 'end of statement')
    unknown call_tmp[616557] "maybe param" "maybe type" "temp"
    (616560 'move' call_tmp[616557](64719 call chpl__idxToInt _low[64656]))
    unknown call_tmp[616562] "expr temp" "maybe param" "maybe type" "temp"
    (616565 'move' call_tmp[616562](455054 '.v' this[64676] c"idxType"))
    unknown call_tmp[616567] "maybe param" "maybe type" "temp"
    (616570 'move' call_tmp[616567](455046 call chpl__idxTypeToIntIdxType call_tmp[616562]))
    unknown tmp[455043] "temp"
    (455048 'init var' tmp[455043] call_tmp[616557] call_tmp[616567])
    (455050 'init field' this[64676] c"_low" tmp[455043])
    (475362 'end of statement')
    unknown call_tmp[616572] "maybe param" "maybe type" "temp"
    (616575 'move' call_tmp[616572](64730 call chpl__idxToInt _high[64666]))
    unknown call_tmp[616577] "expr temp" "maybe param" "maybe type" "temp"
    (616580 'move' call_tmp[616577](455068 '.v' this[64676] c"idxType"))
    unknown call_tmp[616582] "maybe param" "maybe type" "temp"
    (616585 'move' call_tmp[616582](455060 call chpl__idxTypeToIntIdxType call_tmp[616577]))
    unknown tmp[455057] "temp"
    (455062 'init var' tmp[455057] call_tmp[616572] call_tmp[616582])
    (455064 'init field' this[64676] c"_high" tmp[455057])
    (475363 'end of statement')
    unknown tmp[455071] "temp"
    unknown tmp[555612] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555613] "maybe param" "temp"
    unknown call_tmp[616587] "expr temp" "maybe param" "maybe type" "temp"
    (616590 'move' call_tmp[616587](455087 '.v' this[64676] c"stridable"))
    (555618 'move' tmp[555613](555616 call _cond_test call_tmp[616587]))
    if tmp[555613]
    {
      unknown tmp[555620] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616592] "expr temp" "maybe param" "maybe type" "temp"
      (616595 'move' call_tmp[616592](455090 '.v' this[64676] c"idxType"))
      (555622 'move' tmp[555620](455076 call chpl__rangeStrideType call_tmp[616592]))
      (555627 'move' tmp[555612](555624 '_paramFoldLogical' tmp[555613] tmp[555620]))
    }
    {
      (555632 'move' tmp[555612](555629 '_paramFoldLogical' tmp[555613] nothing[7]))
    }
    (455081 'default init var' tmp[455071] tmp[555612])
    (455083 '.=' this[64676] c"_stride" tmp[455071])
    (475364 'end of statement')
    unknown tmp[455093] "temp"
    unknown tmp[555639] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555640] "maybe param" "temp"
    unknown call_tmp[616597] "expr temp" "maybe param" "maybe type" "temp"
    (616600 'move' call_tmp[616597](455109 '.v' this[64676] c"stridable"))
    (555645 'move' tmp[555640](555643 call _cond_test call_tmp[616597]))
    if tmp[555640]
    {
      unknown tmp[555647] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616602] "expr temp" "maybe param" "maybe type" "temp"
      (616605 'move' call_tmp[616602](455112 '.v' this[64676] c"idxType"))
      (555649 'move' tmp[555647](455098 call chpl__idxTypeToIntIdxType call_tmp[616602]))
      (555654 'move' tmp[555639](555651 '_paramFoldLogical' tmp[555640] tmp[555647]))
    }
    {
      (555659 'move' tmp[555639](555656 '_paramFoldLogical' tmp[555640] nothing[7]))
    }
    (455103 'default init var' tmp[455093] tmp[555639])
    (455105 '.=' this[64676] c"_alignment" tmp[455093])
    (475365 'end of statement')
    unknown tmp[455115] "temp"
    unknown tmp[555666] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555667] "maybe param" "temp"
    unknown call_tmp[616607] "expr temp" "maybe param" "maybe type" "temp"
    (616610 'move' call_tmp[616607](455129 '.v' this[64676] c"stridable"))
    (555672 'move' tmp[555667](555670 call _cond_test call_tmp[616607]))
    if tmp[555667]
    {
      (555677 'move' tmp[555666](555674 '_paramFoldLogical' tmp[555667] bool[10]))
    }
    {
      (555682 'move' tmp[555666](555679 '_paramFoldLogical' tmp[555667] nothing[7]))
    }
    (455123 'default init var' tmp[455115] tmp[555666])
    (455125 '.=' this[64676] c"_aligned" tmp[455115])
    (475366 'end of statement')
    unknown call_tmp[616612] "expr temp" "maybe param" "maybe type" "temp"
    (616615 'move' call_tmp[616612](64763 call _cond_test stridable[64646]))
    if call_tmp[616612]
    {
      (64761 call compilerError "non-stridable range initializer called with stridable=true")
    }
    (509145 return _void[55])
  }
  where {
    (64686 call _isAnyNothing _stride[64670] _alignment[64672] _aligned[64674])
  }
  function range[64319](?).init=[64786](arg _mt[64791]:_MT[238], ref arg this[64788]:range[64319](?) :
  range[64319](?), arg other[64783]:range[64319](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown call_tmp[616617] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616620 'move' call_tmp[616617](64794 'typeof' this[64788]))
    unknown call_tmp[616624] "expr temp" "maybe param" "maybe type" "temp"
    (616627 'move' call_tmp[616624](64795 call idxType _mt[243] call_tmp[616617]))
    unknown call_tmp[616629] "expr temp" "maybe param" "maybe type" "temp"
    (616632 'move' call_tmp[616629](64799 call == call_tmp[616624] ?[260]))
    unknown idxType[64810] "dead at end of block" "insert auto destroy" "type variable"(64807 IfExpr  call_tmp[616629] then
    { scopeless
      (455138 'query' other[64783] 1)
    } else
    { scopeless
      unknown call_tmp[616634] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616637 'move' call_tmp[616634](64803 'typeof' this[64788]))
      (64804 call idxType _mt[243] call_tmp[616634])
    } )
    unknown tmp[555689] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555690] "maybe param" "temp"
    unknown call_tmp[616641] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616644 'move' call_tmp[616641](541137 'typeof' this[64788]))
    unknown call_tmp[616648] "expr temp" "maybe param" "maybe type" "temp"
    (616651 'move' call_tmp[616648](541136 call idxType _mt[243] call_tmp[616641]))
    unknown call_tmp[616653] "expr temp" "maybe param" "maybe type" "temp"
    (616656 'move' call_tmp[616653](541134 call == call_tmp[616648] ?[260]))
    (555695 'move' tmp[555690](555693 call _cond_test call_tmp[616653]))
    if tmp[555690]
    {
      unknown tmp[555697] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555699 'move' tmp[555697](541142 'query' other[64783] 1))
      (555704 'move' tmp[555689](555701 '_paramFoldLogical' tmp[555690] tmp[555697]))
    }
    {
      unknown tmp[555706] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616658] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616661 'move' call_tmp[616658](541148 'typeof' this[64788]))
      (555708 'move' tmp[555706](541147 call idxType _mt[243] call_tmp[616658]))
      (555713 'move' tmp[555689](555710 '_paramFoldLogical' tmp[555690] tmp[555706]))
    }
    (541152 'move' idxType[64810] tmp[555689])
    unknown boundedType[64831] "dead at end of block" "param"
    unknown tmp[555720] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555721] "maybe param" "temp"
    unknown call_tmp[616665] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616668 'move' call_tmp[616665](64815 'typeof' this[64788]))
    unknown call_tmp[616672] "expr temp" "maybe param" "maybe type" "temp"
    (616675 'move' call_tmp[616672](64816 call boundedType _mt[243] call_tmp[616665]))
    unknown call_tmp[616677] "expr temp" "maybe param" "maybe type" "temp"
    (616680 'move' call_tmp[616677](64820 call == call_tmp[616672] ?[260]))
    (555726 'move' tmp[555721](555724 call _cond_test call_tmp[616677]))
    if tmp[555721]
    {
      unknown tmp[555728] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555730 'move' tmp[555728](455144 'query' other[64783] 2))
      (555735 'move' tmp[555720](555732 '_paramFoldLogical' tmp[555721] tmp[555728]))
    }
    {
      unknown tmp[555737] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616682] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616685 'move' call_tmp[616682](64824 'typeof' this[64788]))
      (555739 'move' tmp[555737](64825 call boundedType _mt[243] call_tmp[616682]))
      (555744 'move' tmp[555720](555741 '_paramFoldLogical' tmp[555721] tmp[555737]))
    }
    (541154 'init var' boundedType[64831] tmp[555720])
    (64834 'end of statement')
    unknown stridable[64852] "dead at end of block" "param"
    unknown tmp[555751] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555752] "maybe param" "temp"
    unknown call_tmp[616689] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616692 'move' call_tmp[616689](64836 'typeof' this[64788]))
    unknown call_tmp[616696] "expr temp" "maybe param" "maybe type" "temp"
    (616699 'move' call_tmp[616696](64837 call stridable _mt[243] call_tmp[616689]))
    unknown call_tmp[616701] "expr temp" "maybe param" "maybe type" "temp"
    (616704 'move' call_tmp[616701](64841 call == call_tmp[616696] ?[260]))
    (555757 'move' tmp[555752](555755 call _cond_test call_tmp[616701]))
    if tmp[555752]
    {
      unknown tmp[555759] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555761 'move' tmp[555759](455156 'query' other[64783] 3))
      (555766 'move' tmp[555751](555763 '_paramFoldLogical' tmp[555752] tmp[555759]))
    }
    {
      unknown tmp[555768] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616706] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616709 'move' call_tmp[616706](64845 'typeof' this[64788]))
      (555770 'move' tmp[555768](64846 call stridable _mt[243] call_tmp[616706]))
      (555775 'move' tmp[555751](555772 '_paramFoldLogical' tmp[555752] tmp[555768]))
    }
    (541156 'init var' stridable[64852] tmp[555751])
    (64855 'end of statement')
    unknown call_tmp[616713] "expr temp" "maybe param" "maybe type" "temp"
    (616716 'move' call_tmp[616713](455147 'query' other[64783] 2))
    unknown call_tmp[616718] "expr temp" "maybe param" "maybe type" "temp"
    (616721 'move' call_tmp[616718](64858 call != boundedType[64831] call_tmp[616713]))
    unknown call_tmp[616723] "expr temp" "maybe param" "maybe type" "temp"
    (616726 'move' call_tmp[616723](64920 call _cond_test call_tmp[616718]))
    if call_tmp[616723]
    {
      unknown call_tmp[616728] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616731 'move' call_tmp[616728](64879 'typeof' this[64788]))
      unknown call_tmp[616735] "expr temp" "maybe param" "maybe type" "temp"
      (616738 'move' call_tmp[616735](64880 call boundedType _mt[243] call_tmp[616728]))
      unknown call_tmp[616740] "expr temp" "maybe param" "maybe type" "temp"
      (616743 'move' call_tmp[616740](64884 call _cast string[26] call_tmp[616735]))
      unknown call_tmp[616745] "expr temp" "maybe param" "maybe type" "temp"
      (616748 'move' call_tmp[616745](64886 call + "range(boundedType=" call_tmp[616740]))
      unknown call_tmp[616750] "expr temp" "maybe param" "maybe type" "temp"
      (616753 'move' call_tmp[616750](64905 call + call_tmp[616745] ") cannot be initialized from range(boundedType="))
      unknown call_tmp[616755] "expr temp" "maybe param" "maybe type" "temp"
      (616758 'move' call_tmp[616755](455150 'query' other[64783] 2))
      unknown call_tmp[616760] "expr temp" "maybe param" "maybe type" "temp"
      (616763 'move' call_tmp[616760](64909 call _cast string[26] call_tmp[616755]))
      unknown call_tmp[616765] "expr temp" "maybe param" "maybe type" "temp"
      (616768 'move' call_tmp[616765](64911 call + call_tmp[616750] call_tmp[616760]))
      unknown call_tmp[616770] "expr temp" "maybe param" "maybe type" "temp"
      (616773 'move' call_tmp[616770](64914 call + call_tmp[616765] ")"))
      (64917 call compilerError call_tmp[616770])
    }
    unknown tmp[419330] "maybe param" "temp"
    (419341 'move' tmp[419330](64925 call ! stridable[64852]))
    unknown call_tmp[616775] "expr temp" "maybe param" "maybe type" "temp"
    (616778 'move' call_tmp[616775](419343 call _cond_invalid tmp[419330]))
    if call_tmp[616775]
    {
      (419346 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555782] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555783] "maybe param" "temp"
    unknown call_tmp[616780] "expr temp" "maybe param" "maybe type" "temp"
    (616783 'move' call_tmp[616780](419331 call isTrue tmp[419330]))
    (555788 'move' tmp[555783](555786 call _cond_test call_tmp[616780]))
    if tmp[555783]
    {
      unknown tmp[555790] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616785] "expr temp" "maybe param" "maybe type" "temp"
      (616788 'move' call_tmp[616785](455159 'query' other[64783] 3))
      (555792 'move' tmp[555790](419334 call isTrue call_tmp[616785]))
      (555797 'move' tmp[555782](555794 '_paramFoldLogical' tmp[555783] tmp[555790]))
    }
    {
      (555802 'move' tmp[555782](555799 '_paramFoldLogical' tmp[555783] 0))
    }
    unknown call_tmp[616790] "expr temp" "maybe param" "maybe type" "temp"
    (616793 'move' call_tmp[616790](64951 call _cond_test tmp[555782]))
    if call_tmp[616790]
    {
      (64949 call compilerError "cannot initialize a non-stridable range from a stridable range")
    }
    unknown tmp[419351] "maybe param" "temp"
    (419362 'move' tmp[419351] stridable[64852])
    unknown call_tmp[616795] "expr temp" "maybe param" "maybe type" "temp"
    (616798 'move' call_tmp[616795](419364 call _cond_invalid tmp[419351]))
    if call_tmp[616795]
    {
      (419367 call compilerError "cannot promote short-circuiting && operator")
    }
    const str[64974] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[555809] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555810] "maybe param" "temp"
    unknown call_tmp[616800] "expr temp" "maybe param" "maybe type" "temp"
    (616803 'move' call_tmp[616800](419352 call isTrue tmp[419351]))
    (555815 'move' tmp[555810](555813 call _cond_test call_tmp[616800]))
    if tmp[555810]
    {
      unknown tmp[555817] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616805] "expr temp" "maybe param" "maybe type" "temp"
      (616808 'move' call_tmp[616805](455162 'query' other[64783] 3))
      (555819 'move' tmp[555817](419355 call isTrue call_tmp[616805]))
      (555824 'move' tmp[555809](555821 '_paramFoldLogical' tmp[555810] tmp[555817]))
    }
    {
      (555829 'move' tmp[555809](555826 '_paramFoldLogical' tmp[555810] 0))
    }
    unknown tmp[555836] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555837] "maybe param" "temp"
    (555842 'move' tmp[555837](555840 call _cond_test tmp[555809]))
    if tmp[555837]
    {
      unknown tmp[555844] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555846 'move' tmp[555844](64961 call stride _mt[243] other[64783]))
      (555851 'move' tmp[555836](555848 '_paramFoldLogical' tmp[555837] tmp[555844]))
    }
    {
      unknown tmp[555853] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616812] "expr temp" "maybe param" "maybe type" "temp"
      (616815 'move' call_tmp[616812](64968 call chpl__rangeStrideType idxType[64810]))
      (555855 'move' tmp[555853](64969 call _cast call_tmp[616812] 1))
      (555860 'move' tmp[555836](555857 '_paramFoldLogical' tmp[555837] tmp[555853]))
    }
    (541158 'init var' str[64974] tmp[555836])
    (64977 'end of statement' idxType[64810])
    unknown call_tmp[616821] "expr temp" "maybe param" "maybe type" "temp"
    (616824 'move' call_tmp[616821](64990 call _low _mt[243] other[64783]))
    unknown call_tmp[616826] "expr temp" "maybe param" "maybe type" "temp"
    (616829 'move' call_tmp[616826](64993 call chpl__intToIdx idxType[64810] call_tmp[616821]))
    unknown call_tmp[616833] "expr temp" "maybe param" "maybe type" "temp"
    (616836 'move' call_tmp[616833](64998 call _high _mt[243] other[64783]))
    unknown call_tmp[616838] "expr temp" "maybe param" "maybe type" "temp"
    (616841 'move' call_tmp[616838](65001 call chpl__intToIdx idxType[64810] call_tmp[616833]))
    unknown call_tmp[616845] "expr temp" "maybe param" "maybe type" "temp"
    (616848 'move' call_tmp[616845](65010 call alignment _mt[243] other[64783]))
    unknown call_tmp[616850] "expr temp" "maybe param" "maybe type" "temp"
    (616853 'move' call_tmp[616850](65014 call chpl__idxToInt call_tmp[616845]))
    unknown call_tmp[616855] "expr temp" "maybe param" "maybe type" "temp"
    (616858 'move' call_tmp[616855](65015 call chpl__intToIdx idxType[64810] call_tmp[616850]))
    unknown call_tmp[616862] "expr temp" "maybe param" "maybe type" "temp"
    (616865 'move' call_tmp[616862](65019 call aligned _mt[243] other[64783]))
    (65022 call(64979 call (partial) init _mt[243] this[64788]) idxType[64810] boundedType[64831] stridable[64852] call_tmp[616826] call_tmp[616838] str[64974] call_tmp[616855] call_tmp[616862])
    (475373 'end of statement' idxType[64810] idxType[64810] idxType[64810] str[64974] idxType[64810])
    (509147 return _void[55])
  }
  function range[64319](?).displayRepresentation[65051](arg _mt[65056]:_MT[238], arg this[65053]:range[64319](?) :
  range[64319](?), arg msg[65047]:string[26] =
  "") : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown ret[509151] "RVV" "temp"
    unknown tmp[555867] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555868] "maybe param" "temp"
    unknown call_tmp[616869] "expr temp" "maybe param" "maybe type" "temp"
    (616872 'move' call_tmp[616869](373902 call aligned _mt[243] this[65053]))
    (555873 'move' tmp[555868](555871 call _cond_test call_tmp[616869]))
    if tmp[555868]
    {
      unknown tmp[555875] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616876] "expr temp" "maybe param" "maybe type" "temp"
      (616879 'move' call_tmp[616876](373906 call alignment _mt[243] this[65053]))
      (555877 'move' tmp[555875](65129 call _cast string[26] call_tmp[616876]))
      (555882 'move' tmp[555867](555879 '_paramFoldLogical' tmp[555868] tmp[555875]))
    }
    {
      (555887 'move' tmp[555867](555884 '_paramFoldLogical' tmp[555868] "\?"))
    }
    unknown call_tmp[616883] "expr temp" "maybe param" "maybe type" "temp"
    (616886 'move' call_tmp[616883](373876 call idxType _mt[243] this[65053]))
    unknown call_tmp[616888] "expr temp" "maybe param" "maybe type" "temp"
    (616891 'move' call_tmp[616888](65081 call _cast string[26] call_tmp[616883]))
    unknown call_tmp[616895] "expr temp" "maybe param" "maybe type" "temp"
    (616898 'move' call_tmp[616895](373881 call boundedType _mt[243] this[65053]))
    unknown call_tmp[616902] "expr temp" "maybe param" "maybe type" "temp"
    (616905 'move' call_tmp[616902](373886 call stridable _mt[243] this[65053]))
    unknown call_tmp[616909] "expr temp" "maybe param" "maybe type" "temp"
    (616912 'move' call_tmp[616909](373890 call low _mt[243] this[65053]))
    unknown call_tmp[616916] "expr temp" "maybe param" "maybe type" "temp"
    (616919 'move' call_tmp[616916](373894 call high _mt[243] this[65053]))
    unknown call_tmp[616923] "expr temp" "maybe param" "maybe type" "temp"
    (616926 'move' call_tmp[616923](373898 call stride _mt[243] this[65053]))
    (65152 call chpl_debug_writeln msg[65047] "(" call_tmp[616888] "," call_tmp[616895] "," call_tmp[616902] " : " call_tmp[616909] "," call_tmp[616916] "," call_tmp[616923] "," tmp[555867] ")")
    (509153 return ret[509151])
  }
  { scopeless type
    void[4]
  }
  function chpl_build_bounded_range[455253](arg low[455260] :
  (455257 call int(64)[13] 64), arg high[455266] :
  (455264 call int(64)[13] 64)) : _unknown[51]
  {
    unknown ret[509157] "RVV" "temp"
    unknown call_tmp[616928] "expr temp" "maybe param" "maybe type" "temp"
    (616931 'move' call_tmp[616928](455274 call int(64)[13] 64))
    unknown call_tmp[616933] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616936 'move' call_tmp[616933](747947 'new' range[64319](?) call_tmp[616928](_low = low[455260])(_high = high[455266])))
    (509162 'move' ret[509157](509161 'deref' call_tmp[616933]))
    (509159 return ret[509157])
  }
  function chpl_build_bounded_range[455224](arg low[455231] :
  (455228 call int(64)[13] 32), arg high[455237] :
  (455235 call int(64)[13] 32)) : _unknown[51]
  {
    unknown ret[509166] "RVV" "temp"
    unknown call_tmp[616938] "expr temp" "maybe param" "maybe type" "temp"
    (616941 'move' call_tmp[616938](455245 call int(64)[13] 32))
    unknown call_tmp[616943] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616946 'move' call_tmp[616943](747948 'new' range[64319](?) call_tmp[616938](_low = low[455231])(_high = high[455237])))
    (509171 'move' ret[509166](509170 'deref' call_tmp[616943]))
    (509168 return ret[509166])
  }
  function chpl_build_bounded_range[455195](arg low[455202] :
  (455199 call int(64)[13] 16), arg high[455208] :
  (455206 call int(64)[13] 16)) : _unknown[51]
  {
    unknown ret[509175] "RVV" "temp"
    unknown call_tmp[616948] "expr temp" "maybe param" "maybe type" "temp"
    (616951 'move' call_tmp[616948](455216 call int(64)[13] 16))
    unknown call_tmp[616953] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616956 'move' call_tmp[616953](747949 'new' range[64319](?) call_tmp[616948](_low = low[455202])(_high = high[455208])))
    (509180 'move' ret[509175](509179 'deref' call_tmp[616953]))
    (509177 return ret[509175])
  }
  function chpl_build_bounded_range[455166](arg low[455173] :
  (455170 call int(64)[13] 8), arg high[455179] :
  (455177 call int(64)[13] 8)) : _unknown[51]
  {
    unknown ret[509184] "RVV" "temp"
    unknown call_tmp[616958] "expr temp" "maybe param" "maybe type" "temp"
    (616961 'move' call_tmp[616958](455187 call int(64)[13] 8))
    unknown call_tmp[616963] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616966 'move' call_tmp[616963](747950 'new' range[64319](?) call_tmp[616958](_low = low[455173])(_high = high[455179])))
    (509189 'move' ret[509184](509188 'deref' call_tmp[616963]))
    (509186 return ret[509184])
  }
  function chpl_build_bounded_range[455369](arg low[455376] :
  (455373 call uint(64)[115] 64), arg high[455382] :
  (455380 call uint(64)[115] 64)) : _unknown[51]
  {
    unknown ret[509193] "RVV" "temp"
    unknown call_tmp[616968] "expr temp" "maybe param" "maybe type" "temp"
    (616971 'move' call_tmp[616968](455390 call uint(64)[115] 64))
    unknown call_tmp[616973] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616976 'move' call_tmp[616973](747951 'new' range[64319](?) call_tmp[616968](_low = low[455376])(_high = high[455382])))
    (509198 'move' ret[509193](509197 'deref' call_tmp[616973]))
    (509195 return ret[509193])
  }
  function chpl_build_bounded_range[455340](arg low[455347] :
  (455344 call uint(64)[115] 32), arg high[455353] :
  (455351 call uint(64)[115] 32)) : _unknown[51]
  {
    unknown ret[509202] "RVV" "temp"
    unknown call_tmp[616978] "expr temp" "maybe param" "maybe type" "temp"
    (616981 'move' call_tmp[616978](455361 call uint(64)[115] 32))
    unknown call_tmp[616983] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616986 'move' call_tmp[616983](747952 'new' range[64319](?) call_tmp[616978](_low = low[455347])(_high = high[455353])))
    (509207 'move' ret[509202](509206 'deref' call_tmp[616983]))
    (509204 return ret[509202])
  }
  function chpl_build_bounded_range[455311](arg low[455318] :
  (455315 call uint(64)[115] 16), arg high[455324] :
  (455322 call uint(64)[115] 16)) : _unknown[51]
  {
    unknown ret[509211] "RVV" "temp"
    unknown call_tmp[616988] "expr temp" "maybe param" "maybe type" "temp"
    (616991 'move' call_tmp[616988](455332 call uint(64)[115] 16))
    unknown call_tmp[616993] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616996 'move' call_tmp[616993](747953 'new' range[64319](?) call_tmp[616988](_low = low[455318])(_high = high[455324])))
    (509216 'move' ret[509211](509215 'deref' call_tmp[616993]))
    (509213 return ret[509211])
  }
  function chpl_build_bounded_range[455282](arg low[455289] :
  (455286 call uint(64)[115] 8), arg high[455295] :
  (455293 call uint(64)[115] 8)) : _unknown[51]
  {
    unknown ret[509220] "RVV" "temp"
    unknown call_tmp[616998] "expr temp" "maybe param" "maybe type" "temp"
    (617001 'move' call_tmp[616998](455303 call uint(64)[115] 8))
    unknown call_tmp[617003] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617006 'move' call_tmp[617003](747954 'new' range[64319](?) call_tmp[616998](_low = low[455289])(_high = high[455295])))
    (509225 'move' ret[509220](509224 'deref' call_tmp[617003]))
    (509222 return ret[509220])
  }
  function chpl_build_bounded_range[65236](arg low[65233]:enum[187](?), arg high[65239]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509229] "RVV" "temp"
    unknown call_tmp[617008] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617011 'move' call_tmp[617008](65243 'typeof' low[65233]))
    unknown call_tmp[617013] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617016 'move' call_tmp[617013](65245 'typeof' high[65239]))
    unknown call_tmp[617018] "expr temp" "maybe param" "maybe type" "temp"
    (617021 'move' call_tmp[617018](65246 call != call_tmp[617008] call_tmp[617013]))
    unknown call_tmp[617023] "expr temp" "maybe param" "maybe type" "temp"
    (617026 'move' call_tmp[617023](65269 call _cond_test call_tmp[617018]))
    if call_tmp[617023]
    {
      (65267 call compilerError "ranges of enums must use a single enum type")
    }
    unknown call_tmp[617028] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617031 'move' call_tmp[617028](65278 'typeof' low[65233]))
    unknown call_tmp[617033] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617036 'move' call_tmp[617033](747955 'new' range[64319](?) call_tmp[617028](_low = low[65233])(_high = high[65239])))
    (509234 'move' ret[509229](509233 'deref' call_tmp[617033]))
    (509231 return ret[509229])
  }
  function chpl_build_bounded_range[65295](arg low[65292]:bool[10], arg high[65298]:bool[10]) : _unknown[51]
  {
    unknown ret[509238] "RVV" "temp"
    unknown call_tmp[617038] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617041 'move' call_tmp[617038](747956 'new' range[64319](?) bool[10](_low = low[65292])(_high = high[65298])))
    (509243 'move' ret[509238](509242 'deref' call_tmp[617038]))
    (509240 return ret[509238])
  }
  function chpl_build_bounded_range[65319](arg low[65317]:_any[178](?), arg high[65321]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65342 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (509245 return _void[55])
  }
  function chpl_build_low_bounded_range[65353](arg low[65350]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509249] "RVV" "temp"
    unknown call_tmp[617043] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617046 'move' call_tmp[617043](65358 'typeof' low[65350]))
    unknown call_tmp[617048] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617051 'move' call_tmp[617048](747957 'new' range[64319](?) call_tmp[617043] boundedLow[64210](_low = low[65350])))
    (509254 'move' ret[509249](509253 'deref' call_tmp[617048]))
    (509251 return ret[509249])
  }
  function chpl_build_low_bounded_range[65378](arg low[65375]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509258] "RVV" "temp"
    unknown call_tmp[617053] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617056 'move' call_tmp[617053](65383 'typeof' low[65375]))
    unknown call_tmp[617058] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617061 'move' call_tmp[617058](747958 'new' range[64319](?) call_tmp[617053] boundedLow[64210](_low = low[65375])))
    (509263 'move' ret[509258](509262 'deref' call_tmp[617058]))
    (509260 return ret[509258])
  }
  function chpl_build_low_bounded_range[65403](arg low[65400]:bool[10]) : _unknown[51]
  {
    unknown ret[509267] "RVV" "temp"
    unknown call_tmp[617063] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617066 'move' call_tmp[617063](65408 'typeof' low[65400]))
    unknown call_tmp[617068] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617071 'move' call_tmp[617068](747959 'new' range[64319](?) call_tmp[617063] boundedLow[64210](_low = low[65400])))
    (509272 'move' ret[509267](509271 'deref' call_tmp[617068]))
    (509269 return ret[509267])
  }
  function chpl_build_low_bounded_range[65426](arg low[65424]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65447 call compilerError "Bound of 'low..' must be an integer")
    (509274 return _void[55])
  }
  function chpl_build_high_bounded_range[65458](arg high[65455]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509278] "RVV" "temp"
    unknown call_tmp[617073] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617076 'move' call_tmp[617073](65463 'typeof' high[65455]))
    unknown call_tmp[617078] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617081 'move' call_tmp[617078](747960 'new' range[64319](?) call_tmp[617073] boundedHigh[64212](_high = high[65455])))
    (509283 'move' ret[509278](509282 'deref' call_tmp[617078]))
    (509280 return ret[509278])
  }
  function chpl_build_high_bounded_range[65483](arg high[65480]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509287] "RVV" "temp"
    unknown call_tmp[617083] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617086 'move' call_tmp[617083](65488 'typeof' high[65480]))
    unknown call_tmp[617088] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617091 'move' call_tmp[617088](747961 'new' range[64319](?) call_tmp[617083] boundedHigh[64212](_high = high[65480])))
    (509292 'move' ret[509287](509291 'deref' call_tmp[617088]))
    (509289 return ret[509287])
  }
  function chpl_build_high_bounded_range[65508](arg high[65505]:bool[10]) : _unknown[51]
  {
    unknown ret[509296] "RVV" "temp"
    unknown call_tmp[617093] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617096 'move' call_tmp[617093](65513 'typeof' high[65505]))
    unknown call_tmp[617098] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617101 'move' call_tmp[617098](747962 'new' range[64319](?) call_tmp[617093] boundedHigh[64212](_high = high[65505])))
    (509301 'move' ret[509296](509300 'deref' call_tmp[617098]))
    (509298 return ret[509296])
  }
  function chpl_build_high_bounded_range[65531](arg high[65529]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65552 call compilerError "Bound of '..high' must be an integer.")
    (509303 return _void[55])
  }
  function chpl_build_unbounded_range[65559]() : _unknown[51]
  {
    unknown ret[509307] "RVV" "temp"
    unknown call_tmp[617103] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617106 'move' call_tmp[617103](747963 'new' range[64319](?) int(64)[13] boundedNone[64214]))
    (509312 'move' ret[509307](509311 'deref' call_tmp[617103]))
    (509309 return ret[509307])
  }
  function chpl_compute_low_param_loop_bound[455458](param arg low[455465] :
  (455462 call int(64)[13] 64), param arg high[455471] :
  (455469 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509316] "RVV" "param" "temp"
    (509321 'move' ret[509316](509320 'deref' low[455465]))
    (509318 return ret[509316])
  }
  function chpl_compute_low_param_loop_bound[455438](param arg low[455445] :
  (455442 call int(64)[13] 32), param arg high[455451] :
  (455449 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509325] "RVV" "param" "temp"
    (509330 'move' ret[509325](509329 'deref' low[455445]))
    (509327 return ret[509325])
  }
  function chpl_compute_low_param_loop_bound[455418](param arg low[455425] :
  (455422 call int(64)[13] 16), param arg high[455431] :
  (455429 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509334] "RVV" "param" "temp"
    (509339 'move' ret[509334](509338 'deref' low[455425]))
    (509336 return ret[509334])
  }
  function chpl_compute_low_param_loop_bound[455398](param arg low[455405] :
  (455402 call int(64)[13] 8), param arg high[455411] :
  (455409 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509343] "RVV" "param" "temp"
    (509348 'move' ret[509343](509347 'deref' low[455405]))
    (509345 return ret[509343])
  }
  function chpl_compute_high_param_loop_bound[455538](param arg low[455545] :
  (455542 call int(64)[13] 64), param arg high[455551] :
  (455549 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509352] "RVV" "param" "temp"
    (509357 'move' ret[509352](509356 'deref' high[455551]))
    (509354 return ret[509352])
  }
  function chpl_compute_high_param_loop_bound[455518](param arg low[455525] :
  (455522 call int(64)[13] 32), param arg high[455531] :
  (455529 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509361] "RVV" "param" "temp"
    (509366 'move' ret[509361](509365 'deref' high[455531]))
    (509363 return ret[509361])
  }
  function chpl_compute_high_param_loop_bound[455498](param arg low[455505] :
  (455502 call int(64)[13] 16), param arg high[455511] :
  (455509 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509370] "RVV" "param" "temp"
    (509375 'move' ret[509370](509374 'deref' high[455511]))
    (509372 return ret[509370])
  }
  function chpl_compute_high_param_loop_bound[455478](param arg low[455485] :
  (455482 call int(64)[13] 8), param arg high[455491] :
  (455489 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509379] "RVV" "param" "temp"
    (509384 'move' ret[509379](509383 'deref' high[455491]))
    (509381 return ret[509379])
  }
  function chpl_compute_low_param_loop_bound[455618](param arg low[455625] :
  (455622 call uint(64)[115] 64), param arg high[455631] :
  (455629 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509388] "RVV" "param" "temp"
    (509393 'move' ret[509388](509392 'deref' low[455625]))
    (509390 return ret[509388])
  }
  function chpl_compute_low_param_loop_bound[455598](param arg low[455605] :
  (455602 call uint(64)[115] 32), param arg high[455611] :
  (455609 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509397] "RVV" "param" "temp"
    (509402 'move' ret[509397](509401 'deref' low[455605]))
    (509399 return ret[509397])
  }
  function chpl_compute_low_param_loop_bound[455578](param arg low[455585] :
  (455582 call uint(64)[115] 16), param arg high[455591] :
  (455589 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509406] "RVV" "param" "temp"
    (509411 'move' ret[509406](509410 'deref' low[455585]))
    (509408 return ret[509406])
  }
  function chpl_compute_low_param_loop_bound[455558](param arg low[455565] :
  (455562 call uint(64)[115] 8), param arg high[455571] :
  (455569 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509415] "RVV" "param" "temp"
    (509420 'move' ret[509415](509419 'deref' low[455565]))
    (509417 return ret[509415])
  }
  function chpl_compute_high_param_loop_bound[455698](param arg low[455705] :
  (455702 call uint(64)[115] 64), param arg high[455711] :
  (455709 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509424] "RVV" "param" "temp"
    (509429 'move' ret[509424](509428 'deref' high[455711]))
    (509426 return ret[509424])
  }
  function chpl_compute_high_param_loop_bound[455678](param arg low[455685] :
  (455682 call uint(64)[115] 32), param arg high[455691] :
  (455689 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509433] "RVV" "param" "temp"
    (509438 'move' ret[509433](509437 'deref' high[455691]))
    (509435 return ret[509433])
  }
  function chpl_compute_high_param_loop_bound[455658](param arg low[455665] :
  (455662 call uint(64)[115] 16), param arg high[455671] :
  (455669 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509442] "RVV" "param" "temp"
    (509447 'move' ret[509442](509446 'deref' high[455671]))
    (509444 return ret[509442])
  }
  function chpl_compute_high_param_loop_bound[455638](param arg low[455645] :
  (455642 call uint(64)[115] 8), param arg high[455651] :
  (455649 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509451] "RVV" "param" "temp"
    (509456 'move' ret[509451](509455 'deref' high[455651]))
    (509453 return ret[509451])
  }
  function chpl_compute_low_param_loop_bound[65683](param arg low[65680]:bool[10], param arg high[65686]:bool[10]) param : _unknown[51]
  {
    unknown ret[509460] "RVV" "param" "temp"
    (509465 'move' ret[509460](509464 'deref' low[65680]))
    (509462 return ret[509460])
  }
  function chpl_compute_high_param_loop_bound[65701](param arg low[65698]:bool[10], param arg high[65704]:bool[10]) param : _unknown[51]
  {
    unknown ret[509469] "RVV" "param" "temp"
    (509474 'move' ret[509469](509473 'deref' high[65704]))
    (509471 return ret[509469])
  }
  function chpl_compute_low_param_loop_bound[65717](param arg low[65715]:_any[178](?), param arg high[65719]:_any[178](?)) param : _unknown[51] "last resort" "no return value for void"
  {
    (65742 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509476 return _void[55])
  }
  function chpl_compute_low_param_loop_bound[65751](arg low[65749]:_any[178](?), arg high[65753]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65774 call compilerError "param for-loops must be defined over a bounded param range")
    (509478 return _void[55])
  }
  function chpl_compute_count_param_loop[65785](param arg count[65782]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509482] "RVV" "param" "temp"
    (509487 'move' ret[509482](509486 'deref' count[65782]))
    (509484 return ret[509482])
  }
  function chpl_compute_count_param_loop[65797](arg count[65795]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65820 call compilerError "in a param for-loop, the count operator requires a param integral value")
    (509489 return _void[55])
  }
  function chpl_low_bound_count_for_param_loop[65831](param arg high[65828]:integral[199](?), param arg count[65834]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509493] "RVV" "param" "temp"
    unknown call_tmp[617108] "expr temp" "maybe param" "maybe type" "temp"
    (617111 'move' call_tmp[617108](65839 call > count[65834] 0))
    unknown call_tmp[617113] "expr temp" "maybe param" "maybe type" "temp"
    (617116 'move' call_tmp[617113](65888 call _cond_test call_tmp[617108]))
    if call_tmp[617113]
    {
      (65860 call compilerError "count operators with positive count require the range to have a low bound")
    }
    {
      unknown call_tmp[617118] "expr temp" "maybe param" "maybe type" "temp"
      (617121 'move' call_tmp[617118](65865 call == count[65834] 0))
      unknown call_tmp[617123] "expr temp" "maybe param" "maybe type" "temp"
      (617126 'move' call_tmp[617123](65884 call _cond_test call_tmp[617118]))
      if call_tmp[617123]
      {
        unknown call_tmp[617128] "expr temp" "maybe param" "maybe type" "temp"
        (617131 'move' call_tmp[617128](65869 call + high[65828] 1))
        (509498 'move' ret[509493](509497 'deref' call_tmp[617128]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509491] _end_chpl_low_bound_count_for_param_loop[509491]
      }
      {
        unknown call_tmp[617133] "expr temp" "maybe param" "maybe type" "temp"
        (617136 'move' call_tmp[617133](65876 call + high[65828] count[65834]))
        unknown call_tmp[617138] "expr temp" "maybe param" "maybe type" "temp"
        (617141 'move' call_tmp[617138](65879 call + call_tmp[617133] 1))
        (509503 'move' ret[509493](509502 'deref' call_tmp[617138]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509491] _end_chpl_low_bound_count_for_param_loop[509491]
      }
    }
    label _end_chpl_low_bound_count_for_param_loop[509491]
    (509495 return ret[509493])
  }
  function chpl_low_bound_count_for_param_loop[65900](arg high[65898]:_any[178](?), arg count[65902]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65907 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509507 return _void[55])
  }
  function chpl_high_bound_count_for_param_loop[65918](param arg low[65915]:integral[199](?), param arg count[65921]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509511] "RVV" "param" "temp"
    unknown call_tmp[617143] "expr temp" "maybe param" "maybe type" "temp"
    (617146 'move' call_tmp[617143](65926 call < count[65921] 0))
    unknown call_tmp[617148] "expr temp" "maybe param" "maybe type" "temp"
    (617151 'move' call_tmp[617148](65977 call _cond_test call_tmp[617143]))
    if call_tmp[617148]
    {
      (65949 call compilerError "count operators with negative count require the range to have a high bound")
    }
    {
      unknown call_tmp[617153] "expr temp" "maybe param" "maybe type" "temp"
      (617156 'move' call_tmp[617153](65954 call == count[65921] 0))
      unknown call_tmp[617158] "expr temp" "maybe param" "maybe type" "temp"
      (617161 'move' call_tmp[617158](65973 call _cond_test call_tmp[617153]))
      if call_tmp[617158]
      {
        unknown call_tmp[617163] "expr temp" "maybe param" "maybe type" "temp"
        (617166 'move' call_tmp[617163](65958 call - low[65915] 1))
        (509516 'move' ret[509511](509515 'deref' call_tmp[617163]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509509] _end_chpl_high_bound_count_for_param_loop[509509]
      }
      {
        unknown call_tmp[617168] "expr temp" "maybe param" "maybe type" "temp"
        (617171 'move' call_tmp[617168](65965 call + low[65915] count[65921]))
        unknown call_tmp[617173] "expr temp" "maybe param" "maybe type" "temp"
        (617176 'move' call_tmp[617173](65968 call - call_tmp[617168] 1))
        (509521 'move' ret[509511](509520 'deref' call_tmp[617173]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509509] _end_chpl_high_bound_count_for_param_loop[509509]
      }
    }
    label _end_chpl_high_bound_count_for_param_loop[509509]
    (509513 return ret[509511])
  }
  function chpl_high_bound_count_for_param_loop[65989](arg low[65987]:_any[178](?), arg count[65991]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65996 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509525 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_low[66007](param arg low[66004]:integral[199](?), param arg high[66010]:integral[199](?), param arg count[66014]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509529] "RVV" "param" "temp"
    unknown abs_count[66028] "dead at end of block" "param"
    unknown tmp[555894] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555895] "maybe param" "temp"
    unknown call_tmp[617178] "expr temp" "maybe param" "maybe type" "temp"
    (617181 'move' call_tmp[617178](66019 call < count[66014] 0))
    (555900 'move' tmp[555895](555898 call _cond_test call_tmp[617178]))
    if tmp[555895]
    {
      unknown tmp[555902] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555904 'move' tmp[555902](66022 call - count[66014]))
      (555909 'move' tmp[555894](555906 '_paramFoldLogical' tmp[555895] tmp[555902]))
    }
    {
      (555914 'move' tmp[555894](555911 '_paramFoldLogical' tmp[555895] count[66014]))
    }
    (541160 'init var' abs_count[66028] tmp[555894])
    (66031 'end of statement')
    unknown call_tmp[617183] "expr temp" "maybe param" "maybe type" "temp"
    (617186 'move' call_tmp[617183](66035 call - high[66010] low[66004]))
    unknown call_tmp[617188] "maybe param" "maybe type" "temp"
    (617191 'move' call_tmp[617188](66038 call + call_tmp[617183] 1))
    unknown size[66040] "dead at end of block" "param"
    (541162 'init var' size[66040] call_tmp[617188])
    (66043 'end of statement')
    unknown call_tmp[617193] "expr temp" "maybe param" "maybe type" "temp"
    (617196 'move' call_tmp[617193](66046 call < size[66040] abs_count[66028]))
    unknown call_tmp[617198] "expr temp" "maybe param" "maybe type" "temp"
    (617201 'move' call_tmp[617198](66133 call _cond_test call_tmp[617193]))
    if call_tmp[617198]
    {
      unknown call_tmp[617203] "expr temp" "maybe param" "maybe type" "temp"
      (617206 'move' call_tmp[617203](66069 call _cast string[26] abs_count[66028]))
      unknown call_tmp[617208] "expr temp" "maybe param" "maybe type" "temp"
      (617211 'move' call_tmp[617208](66090 call _cast string[26] size[66040]))
      (66092 call compilerError "Count of " call_tmp[617203] " is too small for range of size " call_tmp[617208])
    }
    {
      unknown call_tmp[617213] "expr temp" "maybe param" "maybe type" "temp"
      (617216 'move' call_tmp[617213](66097 call == count[66014] 0))
      unknown call_tmp[617218] "expr temp" "maybe param" "maybe type" "temp"
      (617221 'move' call_tmp[617218](66128 call _cond_test call_tmp[617213]))
      if call_tmp[617218]
      {
        unknown call_tmp[617223] "expr temp" "maybe param" "maybe type" "temp"
        (617226 'move' call_tmp[617223](66101 call + high[66010] 1))
        (509534 'move' ret[509529](509533 'deref' call_tmp[617223]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_low[509527] _end_chpl_bounded_count_for_param_loop_low[509527]
      }
      {
        unknown call_tmp[617228] "expr temp" "maybe param" "maybe type" "temp"
        (617231 'move' call_tmp[617228](66108 call < count[66014] 0))
        unknown call_tmp[617233] "expr temp" "maybe param" "maybe type" "temp"
        (617236 'move' call_tmp[617233](66124 call _cond_test call_tmp[617228]))
        if call_tmp[617233]
        {
          unknown call_tmp[617238] "expr temp" "maybe param" "maybe type" "temp"
          (617241 'move' call_tmp[617238](66112 call + high[66010] count[66014]))
          unknown call_tmp[617243] "expr temp" "maybe param" "maybe type" "temp"
          (617246 'move' call_tmp[617243](66115 call + call_tmp[617238] 1))
          (509539 'move' ret[509529](509538 'deref' call_tmp[617243]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509527] _end_chpl_bounded_count_for_param_loop_low[509527]
        }
        {
          (509544 'move' ret[509529](509543 'deref' low[66004]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509527] _end_chpl_bounded_count_for_param_loop_low[509527]
        }
      }
    }
    label _end_chpl_bounded_count_for_param_loop_low[509527]
    (509531 return ret[509529])
  }
  function chpl_bounded_count_for_param_loop_low[66144](arg low[66142]:_any[178](?), arg high[66146]:_any[178](?), arg count[66148]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66171 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509548 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_high[66182](param arg low[66179]:integral[199](?), param arg high[66185]:integral[199](?), param arg count[66189]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509552] "RVV" "param" "temp"
    unknown call_tmp[617248] "expr temp" "maybe param" "maybe type" "temp"
    (617251 'move' call_tmp[617248](66194 call == count[66189] 0))
    unknown call_tmp[617253] "expr temp" "maybe param" "maybe type" "temp"
    (617256 'move' call_tmp[617253](66225 call _cond_test call_tmp[617248]))
    if call_tmp[617253]
    {
      unknown call_tmp[617258] "expr temp" "maybe param" "maybe type" "temp"
      (617261 'move' call_tmp[617258](66198 call - low[66179] 1))
      (509557 'move' ret[509552](509556 'deref' call_tmp[617258]))
      gotoReturn _end_chpl_bounded_count_for_param_loop_high[509550] _end_chpl_bounded_count_for_param_loop_high[509550]
    }
    {
      unknown call_tmp[617263] "expr temp" "maybe param" "maybe type" "temp"
      (617266 'move' call_tmp[617263](66205 call < count[66189] 0))
      unknown call_tmp[617268] "expr temp" "maybe param" "maybe type" "temp"
      (617271 'move' call_tmp[617268](66221 call _cond_test call_tmp[617263]))
      if call_tmp[617268]
      {
        (509562 'move' ret[509552](509561 'deref' high[66185]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509550] _end_chpl_bounded_count_for_param_loop_high[509550]
      }
      {
        unknown call_tmp[617273] "expr temp" "maybe param" "maybe type" "temp"
        (617276 'move' call_tmp[617273](66213 call + low[66179] count[66189]))
        unknown call_tmp[617278] "expr temp" "maybe param" "maybe type" "temp"
        (617281 'move' call_tmp[617278](66216 call - call_tmp[617273] 1))
        (509567 'move' ret[509552](509566 'deref' call_tmp[617278]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509550] _end_chpl_bounded_count_for_param_loop_high[509550]
      }
    }
    label _end_chpl_bounded_count_for_param_loop_high[509550]
    (509554 return ret[509552])
  }
  function chpl_bounded_count_for_param_loop_high[66237](arg low[66235]:_any[178](?), arg high[66239]:_any[178](?), arg count[66241]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66246 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509571 return _void[55])
  }
  function isRangeType[66255](arg t[66253]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[509593] "RVV" "param" "temp"
    function isRangeHelp[66266](arg t[66263]:range[64319](?)) param : _unknown[51]
    {
      unknown ret[509575] "RVV" "param" "temp"
      (509580 'move' ret[509575](509579 'deref' 1))
      (509577 return ret[509575])
    }
    function isRangeHelp[66279](arg t[66277]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[509584] "RVV" "param" "temp"
      (509589 'move' ret[509584](509588 'deref' 0))
      (509586 return ret[509584])
    }
    unknown call_tmp[617283] "expr temp" "maybe param" "maybe type" "temp"
    (617286 'move' call_tmp[617283](66290 call isRangeHelp t[66253]))
    (509598 'move' ret[509593](509597 'deref' call_tmp[617283]))
    (509595 return ret[509593])
  }
  function isRangeValue[66304](arg r[66301]:range[64319](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509602] "RVV" "param" "temp"
    (509607 'move' ret[509602](509606 'deref' 1))
    (509604 return ret[509602])
  }
  function isRangeValue[66316](arg r[66314]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509611] "RVV" "param" "temp"
    (509616 'move' ret[509611](509615 'deref' 0))
    (509613 return ret[509611])
  }
  function isBoundedRange[66328](arg r[66326]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509620] "RVV" "param" "temp"
    (509625 'move' ret[509620](509624 'deref' 0))
    (509622 return ret[509620])
  }
  function isBoundedRange[66345](arg r[66342]:range[64319](?)) param : _unknown[51]
  {
    unknown ret[509629] "RVV" "param" "temp"
    unknown call_tmp[617290] "expr temp" "maybe param" "maybe type" "temp"
    (617293 'move' call_tmp[617290](66349 call boundedType _mt[243] r[66342]))
    unknown call_tmp[617295] "expr temp" "maybe param" "maybe type" "temp"
    (617298 'move' call_tmp[617295](66353 call isBoundedRange call_tmp[617290]))
    (509634 'move' ret[509629](509633 'deref' call_tmp[617295]))
    (509631 return ret[509629])
  }
  function isBoundedRange[66365](param arg B[66362]:BoundedRangeType[64216]) param : _unknown[51] "no doc"
  {
    unknown ret[509638] "RVV" "param" "temp"
    unknown call_tmp[617300] "expr temp" "maybe param" "maybe type" "temp"
    (617303 'move' call_tmp[617300](66372 call == B[66362] bounded[64208]))
    (509643 'move' ret[509638](509642 'deref' call_tmp[617300]))
    (509640 return ret[509638])
  }
  function range[64319](?).isBounded[66382](arg _mt[66387]:_MT[238], arg this[66384]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509647] "RVV" "param" "temp"
    unknown call_tmp[617307] "expr temp" "maybe param" "maybe type" "temp"
    (617310 'move' call_tmp[617307](374010 call boundedType _mt[243] this[66384]))
    unknown call_tmp[617312] "expr temp" "maybe param" "maybe type" "temp"
    (617315 'move' call_tmp[617312](66394 call == call_tmp[617307] bounded[64208]))
    (509652 'move' ret[509647](509651 'deref' call_tmp[617312]))
    (509649 return ret[509647])
  }
  function range[64319](?).hasLowBound[66404](arg _mt[66409]:_MT[238], arg this[66406]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509656] "RVV" "param" "temp"
    unknown tmp[419372] "maybe param" "temp"
    unknown call_tmp[617319] "expr temp" "maybe param" "maybe type" "temp"
    (617322 'move' call_tmp[617319](374015 call boundedType _mt[243] this[66406]))
    (419383 'move' tmp[419372](66416 call == call_tmp[617319] bounded[64208]))
    unknown call_tmp[617324] "expr temp" "maybe param" "maybe type" "temp"
    (617327 'move' call_tmp[617324](419385 call _cond_invalid tmp[419372]))
    if call_tmp[617324]
    {
      (419388 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555921] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555922] "maybe param" "temp"
    unknown call_tmp[617329] "expr temp" "maybe param" "maybe type" "temp"
    (617332 'move' call_tmp[617329](419373 call isTrue tmp[419372]))
    (555927 'move' tmp[555922](555925 call _cond_test call_tmp[617329]))
    if tmp[555922]
    {
      (555932 'move' tmp[555921](555929 '_paramFoldLogical' tmp[555922] 1))
    }
    {
      unknown tmp[555934] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617336] "expr temp" "maybe param" "maybe type" "temp"
      (617339 'move' call_tmp[617336](374020 call boundedType _mt[243] this[66406]))
      unknown call_tmp[617341] "expr temp" "maybe param" "maybe type" "temp"
      (617344 'move' call_tmp[617341](66423 call == call_tmp[617336] boundedLow[64210]))
      (555936 'move' tmp[555934](419377 call isTrue call_tmp[617341]))
      (555941 'move' tmp[555921](555938 '_paramFoldLogical' tmp[555922] tmp[555934]))
    }
    (509661 'move' ret[509656](509660 'deref' tmp[555921]))
    (509658 return ret[509656])
  }
  function range[64319](?).hasHighBound[66435](arg _mt[66440]:_MT[238], arg this[66437]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509665] "RVV" "param" "temp"
    unknown tmp[419393] "maybe param" "temp"
    unknown call_tmp[617348] "expr temp" "maybe param" "maybe type" "temp"
    (617351 'move' call_tmp[617348](374025 call boundedType _mt[243] this[66437]))
    (419404 'move' tmp[419393](66447 call == call_tmp[617348] bounded[64208]))
    unknown call_tmp[617353] "expr temp" "maybe param" "maybe type" "temp"
    (617356 'move' call_tmp[617353](419406 call _cond_invalid tmp[419393]))
    if call_tmp[617353]
    {
      (419409 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555948] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555949] "maybe param" "temp"
    unknown call_tmp[617358] "expr temp" "maybe param" "maybe type" "temp"
    (617361 'move' call_tmp[617358](419394 call isTrue tmp[419393]))
    (555954 'move' tmp[555949](555952 call _cond_test call_tmp[617358]))
    if tmp[555949]
    {
      (555959 'move' tmp[555948](555956 '_paramFoldLogical' tmp[555949] 1))
    }
    {
      unknown tmp[555961] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617365] "expr temp" "maybe param" "maybe type" "temp"
      (617368 'move' call_tmp[617365](374030 call boundedType _mt[243] this[66437]))
      unknown call_tmp[617370] "expr temp" "maybe param" "maybe type" "temp"
      (617373 'move' call_tmp[617370](66454 call == call_tmp[617365] boundedHigh[64212]))
      (555963 'move' tmp[555961](419398 call isTrue call_tmp[617370]))
      (555968 'move' tmp[555948](555965 '_paramFoldLogical' tmp[555949] tmp[555961]))
    }
    (509670 'move' ret[509665](509669 'deref' tmp[555948]))
    (509667 return ret[509665])
  }
  function range[64319](?).stride[66466](arg _mt[66471]:_MT[238], arg this[66468]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509674] "RVV" "temp"
    unknown call_tmp[617377] "expr temp" "maybe param" "maybe type" "temp"
    (617380 'move' call_tmp[617377](374040 call _stride _mt[243] this[66468]))
    (509679 'move' ret[509674](509678 'deref' call_tmp[617377]))
    (509676 return ret[509674])
  }
  where {
    (374035 call stridable _mt[243] this[66468])
  }
  function range[64319](?).stride[66484](arg _mt[66489]:_MT[238], arg this[66486]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509683] "RVV" "param" "temp"
    unknown call_tmp[617386] "expr temp" "maybe param" "maybe type" "temp"
    (617389 'move' call_tmp[617386](374049 call strType _mt[243] this[66486]))
    unknown call_tmp[617391] "expr temp" "maybe param" "maybe type" "temp"
    (617394 'move' call_tmp[617391](66496 call _cast call_tmp[617386] 1))
    (509688 'move' ret[509683](509687 'deref' call_tmp[617391]))
    (509685 return ret[509683])
  }
  where {
    unknown call_tmp[617398] "expr temp" "maybe param" "maybe type" "temp"
    (617401 'move' call_tmp[617398](374045 call stridable _mt[243] this[66486]))
    (66492 call ! call_tmp[617398])
  }
  function range[64319](?).alignment[66507](arg _mt[66512]:_MT[238], arg this[66509]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509692] "RVV" "temp"
    unknown call_tmp[617407] "expr temp" "maybe param" "maybe type" "temp"
    (617410 'move' call_tmp[617407](374063 call _alignment _mt[243] this[66509]))
    unknown call_tmp[617412] "expr temp" "maybe param" "maybe type" "temp"
    (617415 'move' call_tmp[617412](66518 call(374058 call (partial) chpl_intToIdx _mt[243] this[66509]) call_tmp[617407]))
    (509697 'move' ret[509692](509696 'deref' call_tmp[617412]))
    (509694 return ret[509692])
  }
  where {
    (374054 call stridable _mt[243] this[66509])
  }
  function range[64319](?).alignment[66528](arg _mt[66533]:_MT[238], arg this[66530]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509701] "RVV" "temp"
    unknown call_tmp[617421] "expr temp" "maybe param" "maybe type" "temp"
    (617424 'move' call_tmp[617421](374076 call low _mt[243] this[66530]))
    (509706 'move' ret[509701](509705 'deref' call_tmp[617421]))
    (509703 return ret[509701])
  }
  where {
    unknown tmp[419414] "maybe param" "temp"
    unknown call_tmp[617428] "expr temp" "maybe param" "maybe type" "temp"
    (617431 'move' call_tmp[617428](374068 call stridable _mt[243] this[66530]))
    (419425 'move' tmp[419414](66536 call ! call_tmp[617428]))
    unknown call_tmp[617433] "expr temp" "maybe param" "maybe type" "temp"
    (617436 'move' call_tmp[617433](419427 call _cond_invalid tmp[419414]))
    if call_tmp[617433]
    {
      (419430 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555975] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555976] "maybe param" "temp"
    unknown call_tmp[617438] "expr temp" "maybe param" "maybe type" "temp"
    (617441 'move' call_tmp[617438](419415 call isTrue tmp[419414]))
    (555981 'move' tmp[555976](555979 call _cond_test call_tmp[617438]))
    if tmp[555976]
    {
      unknown tmp[555983] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617445] "expr temp" "maybe param" "maybe type" "temp"
      (617448 'move' call_tmp[617445](66540 call(374072 call (partial) hasLowBound _mt[243] this[66530])))
      (555985 'move' tmp[555983](419418 call isTrue call_tmp[617445]))
      (555990 'move' tmp[555975](555987 '_paramFoldLogical' tmp[555976] tmp[555983]))
    }
    {
      (555995 'move' tmp[555975](555992 '_paramFoldLogical' tmp[555976] 0))
    }
    (748413 call chpl_statementLevelSymbol tmp[555975])
  }
  function range[64319](?).alignment[66553](arg _mt[66558]:_MT[238], arg this[66555]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509710] "RVV" "temp"
    unknown call_tmp[617452] "expr temp" "maybe param" "maybe type" "temp"
    (617455 'move' call_tmp[617452](66563 call(374080 call (partial) chpl_intToIdx _mt[243] this[66555]) 0))
    (509715 'move' ret[509710](509714 'deref' call_tmp[617452]))
    (509712 return ret[509710])
  }
  function range[64319](?).aligned[66572](arg _mt[66577]:_MT[238], arg this[66574]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509719] "RVV" "temp"
    unknown call_tmp[617459] "expr temp" "maybe param" "maybe type" "temp"
    (617462 'move' call_tmp[617459](374090 call _aligned _mt[243] this[66574]))
    (509724 'move' ret[509719](509723 'deref' call_tmp[617459]))
    (509721 return ret[509719])
  }
  where {
    (374085 call stridable _mt[243] this[66574])
  }
  function range[64319](?).aligned[66590](arg _mt[66595]:_MT[238], arg this[66592]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509728] "RVV" "param" "temp"
    (509733 'move' ret[509728](509732 'deref' 1))
    (509730 return ret[509728])
  }
  where {
    unknown tmp[419435] "maybe param" "temp"
    unknown call_tmp[617468] "expr temp" "maybe param" "maybe type" "temp"
    (617471 'move' call_tmp[617468](374095 call stridable _mt[243] this[66592]))
    (419446 'move' tmp[419435](66598 call ! call_tmp[617468]))
    unknown call_tmp[617473] "expr temp" "maybe param" "maybe type" "temp"
    (617476 'move' call_tmp[617473](419448 call _cond_invalid tmp[419435]))
    if call_tmp[617473]
    {
      (419451 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556029] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556030] "maybe param" "temp"
    unknown call_tmp[617478] "expr temp" "maybe param" "maybe type" "temp"
    (617481 'move' call_tmp[617478](419436 call isTrue tmp[419435]))
    (556035 'move' tmp[556030](556033 call _cond_test call_tmp[617478]))
    if tmp[556030]
    {
      unknown tmp[419456] "maybe param" "temp"
      unknown call_tmp[617485] "expr temp" "maybe param" "maybe type" "temp"
      (617488 'move' call_tmp[617485](374100 call boundedType _mt[243] this[66592]))
      (419467 'move' tmp[419456](66605 call == call_tmp[617485] bounded[64208]))
      unknown call_tmp[617490] "expr temp" "maybe param" "maybe type" "temp"
      (617493 'move' call_tmp[617490](419469 call _cond_invalid tmp[419456]))
      if call_tmp[617490]
      {
        (419472 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556002] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556003] "maybe param" "temp"
      unknown call_tmp[617495] "expr temp" "maybe param" "maybe type" "temp"
      (617498 'move' call_tmp[617495](419457 call isTrue tmp[419456]))
      (556008 'move' tmp[556003](556006 call _cond_test call_tmp[617495]))
      if tmp[556003]
      {
        (556013 'move' tmp[556002](556010 '_paramFoldLogical' tmp[556003] 1))
      }
      {
        unknown tmp[556015] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617502] "expr temp" "maybe param" "maybe type" "temp"
        (617505 'move' call_tmp[617502](374105 call boundedType _mt[243] this[66592]))
        unknown call_tmp[617507] "expr temp" "maybe param" "maybe type" "temp"
        (617510 'move' call_tmp[617507](66612 call == call_tmp[617502] boundedLow[64210]))
        (556017 'move' tmp[556015](419461 call isTrue call_tmp[617507]))
        (556022 'move' tmp[556002](556019 '_paramFoldLogical' tmp[556003] tmp[556015]))
      }
      unknown tmp[556037] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556039 'move' tmp[556037](419439 call isTrue tmp[556002]))
      (556044 'move' tmp[556029](556041 '_paramFoldLogical' tmp[556030] tmp[556037]))
    }
    {
      (556049 'move' tmp[556029](556046 '_paramFoldLogical' tmp[556030] 0))
    }
    (748415 call chpl_statementLevelSymbol tmp[556029])
  }
  function range[64319](?).aligned[66628](arg _mt[66633]:_MT[238], arg this[66630]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509737] "RVV" "param" "temp"
    (509742 'move' ret[509737](509741 'deref' 0))
    (509739 return ret[509737])
  }
  function range[64319](?).first[66644](arg _mt[66649]:_MT[238], arg this[66646]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509746] "RVV" "temp"
    unknown call_tmp[617516] "expr temp" "maybe param" "maybe type" "temp"
    (617519 'move' call_tmp[617516](66655 call firstAsInt _mt[243] this[66646]))
    unknown call_tmp[617521] "expr temp" "maybe param" "maybe type" "temp"
    (617524 'move' call_tmp[617521](66659 call(374109 call (partial) chpl_intToIdx _mt[243] this[66646]) call_tmp[617516]))
    (509751 'move' ret[509746](509750 'deref' call_tmp[617521]))
    (509748 return ret[509746])
  }
  function range[64319](?).firstAsInt[66668](arg _mt[66673]:_MT[238], arg this[66670]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509755] "RVV" "temp"
    unknown call_tmp[617528] "expr temp" "maybe param" "maybe type" "temp"
    (617531 'move' call_tmp[617528](374114 call stridable _mt[243] this[66670]))
    unknown call_tmp[617533] "expr temp" "maybe param" "maybe type" "temp"
    (617536 'move' call_tmp[617533](66676 call ! call_tmp[617528]))
    unknown call_tmp[617538] "expr temp" "maybe param" "maybe type" "temp"
    (617541 'move' call_tmp[617538](66702 call _cond_test call_tmp[617533]))
    if call_tmp[617538]
    {
      unknown call_tmp[617545] "expr temp" "maybe param" "maybe type" "temp"
      (617548 'move' call_tmp[617545](374119 call _low _mt[243] this[66670]))
      (509760 'move' ret[509755](509759 'deref' call_tmp[617545]))
      gotoReturn _end_firstAsInt[509753] _end_firstAsInt[509753]
    }
    {
      unknown tmp[556056] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556057] "maybe param" "temp"
      unknown call_tmp[617552] "expr temp" "maybe param" "maybe type" "temp"
      (617555 'move' call_tmp[617552](374124 call _stride _mt[243] this[66670]))
      unknown call_tmp[617557] "expr temp" "maybe param" "maybe type" "temp"
      (617560 'move' call_tmp[617557](66683 call > call_tmp[617552] 0))
      (556062 'move' tmp[556057](556060 call _cond_test call_tmp[617557]))
      if tmp[556057]
      {
        unknown tmp[556064] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556066 'move' tmp[556064](66688 call alignedLowAsInt _mt[243] this[66670]))
        (556071 'move' tmp[556056](556068 '_paramFoldLogical' tmp[556057] tmp[556064]))
      }
      {
        unknown tmp[556073] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556075 'move' tmp[556073](66694 call alignedHighAsInt _mt[243] this[66670]))
        (556080 'move' tmp[556056](556077 '_paramFoldLogical' tmp[556057] tmp[556073]))
      }
      (509765 'move' ret[509755](509764 'deref' tmp[556056]))
      gotoReturn _end_firstAsInt[509753] _end_firstAsInt[509753]
    }
    label _end_firstAsInt[509753]
    (509757 return ret[509755])
  }
  function range[64319](?).last[66714](arg _mt[66719]:_MT[238], arg this[66716]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509771] "RVV" "temp"
    unknown call_tmp[617570] "expr temp" "maybe param" "maybe type" "temp"
    (617573 'move' call_tmp[617570](66725 call lastAsInt _mt[243] this[66716]))
    unknown call_tmp[617575] "expr temp" "maybe param" "maybe type" "temp"
    (617578 'move' call_tmp[617575](66729 call(374128 call (partial) chpl_intToIdx _mt[243] this[66716]) call_tmp[617570]))
    (509776 'move' ret[509771](509775 'deref' call_tmp[617575]))
    (509773 return ret[509771])
  }
  function range[64319](?).lastAsInt[66738](arg _mt[66743]:_MT[238], arg this[66740]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509780] "RVV" "temp"
    unknown call_tmp[617582] "expr temp" "maybe param" "maybe type" "temp"
    (617585 'move' call_tmp[617582](374133 call stridable _mt[243] this[66740]))
    unknown call_tmp[617587] "expr temp" "maybe param" "maybe type" "temp"
    (617590 'move' call_tmp[617587](66746 call ! call_tmp[617582]))
    unknown call_tmp[617592] "expr temp" "maybe param" "maybe type" "temp"
    (617595 'move' call_tmp[617592](66768 call _cond_test call_tmp[617587]))
    if call_tmp[617592]
    {
      unknown call_tmp[617599] "expr temp" "maybe param" "maybe type" "temp"
      (617602 'move' call_tmp[617599](374138 call _high _mt[243] this[66740]))
      (509785 'move' ret[509780](509784 'deref' call_tmp[617599]))
      gotoReturn _end_lastAsInt[509778] _end_lastAsInt[509778]
    }
    {
      unknown tmp[556087] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556088] "maybe param" "temp"
      unknown call_tmp[617606] "expr temp" "maybe param" "maybe type" "temp"
      (617609 'move' call_tmp[617606](374142 call stride _mt[243] this[66740]))
      unknown call_tmp[617611] "expr temp" "maybe param" "maybe type" "temp"
      (617614 'move' call_tmp[617611](66753 call > call_tmp[617606] 0))
      (556093 'move' tmp[556088](556091 call _cond_test call_tmp[617611]))
      if tmp[556088]
      {
        unknown tmp[556095] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556097 'move' tmp[556095](66756 call alignedHighAsInt _mt[243] this[66740]))
        (556102 'move' tmp[556087](556099 '_paramFoldLogical' tmp[556088] tmp[556095]))
      }
      {
        unknown tmp[556104] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556106 'move' tmp[556104](66760 call alignedLowAsInt _mt[243] this[66740]))
        (556111 'move' tmp[556087](556108 '_paramFoldLogical' tmp[556088] tmp[556104]))
      }
      (509790 'move' ret[509780](509789 'deref' tmp[556087]))
      gotoReturn _end_lastAsInt[509778] _end_lastAsInt[509778]
    }
    label _end_lastAsInt[509778]
    (509782 return ret[509780])
  }
  function range[64319](?).low[66780](arg _mt[66785]:_MT[238], arg this[66782]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509796] "RVV" "temp"
    unknown call_tmp[617624] "expr temp" "maybe param" "maybe type" "temp"
    (617627 'move' call_tmp[617624](374151 call _low _mt[243] this[66782]))
    unknown call_tmp[617629] "expr temp" "maybe param" "maybe type" "temp"
    (617632 'move' call_tmp[617629](66790 call(374146 call (partial) chpl_intToIdx _mt[243] this[66782]) call_tmp[617624]))
    (509801 'move' ret[509796](509800 'deref' call_tmp[617629]))
    (509798 return ret[509796])
  }
  function range[64319](?).high[66799](arg _mt[66804]:_MT[238], arg this[66801]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509805] "RVV" "temp"
    unknown call_tmp[617638] "expr temp" "maybe param" "maybe type" "temp"
    (617641 'move' call_tmp[617638](374160 call _high _mt[243] this[66801]))
    unknown call_tmp[617643] "expr temp" "maybe param" "maybe type" "temp"
    (617646 'move' call_tmp[617643](66809 call(374155 call (partial) chpl_intToIdx _mt[243] this[66801]) call_tmp[617638]))
    (509810 'move' ret[509805](509809 'deref' call_tmp[617643]))
    (509807 return ret[509805])
  }
  function range[64319](?).alignedLow[66818](arg _mt[66823]:_MT[238], arg this[66820]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509814] "RVV" "temp"
    unknown call_tmp[617652] "expr temp" "maybe param" "maybe type" "temp"
    (617655 'move' call_tmp[617652](66828 call alignedLowAsInt _mt[243] this[66820]))
    unknown call_tmp[617657] "expr temp" "maybe param" "maybe type" "temp"
    (617660 'move' call_tmp[617657](66832 call(374169 call (partial) chpl_intToIdx _mt[243] this[66820]) call_tmp[617652]))
    unknown call_tmp[617664] "expr temp" "maybe param" "maybe type" "temp"
    (617667 'move' call_tmp[617664](509819 call idxType _mt[243] this[66820]))
    (509823 'move' ret[509814](509822 'coerce' call_tmp[617657] call_tmp[617664]))
    (509816 return ret[509814])
  }
  { scopeless type
    (374165 call idxType _mt[243] this[66820])
  }
  function range[64319](?).alignedLowAsInt[66842](arg _mt[66847]:_MT[238], arg this[66844]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509827] "RVV" "temp"
    unknown call_tmp[617673] "expr temp" "maybe param" "maybe type" "temp"
    (617676 'move' call_tmp[617673](374174 call stridable _mt[243] this[66844]))
    unknown call_tmp[617678] "expr temp" "maybe param" "maybe type" "temp"
    (617681 'move' call_tmp[617678](66850 call ! call_tmp[617673]))
    unknown call_tmp[617683] "expr temp" "maybe param" "maybe type" "temp"
    (617686 'move' call_tmp[617683](66866 call _cond_test call_tmp[617678]))
    if call_tmp[617683]
    {
      unknown call_tmp[617690] "expr temp" "maybe param" "maybe type" "temp"
      (617693 'move' call_tmp[617690](374179 call _low _mt[243] this[66844]))
      (509832 'move' ret[509827](509831 'deref' call_tmp[617690]))
      gotoReturn _end_alignedLowAsInt[509825] _end_alignedLowAsInt[509825]
    }
    {
      unknown call_tmp[617697] "expr temp" "maybe param" "maybe type" "temp"
      (617700 'move' call_tmp[617697](374184 call _low _mt[243] this[66844]))
      unknown call_tmp[617704] "expr temp" "maybe param" "maybe type" "temp"
      (617707 'move' call_tmp[617704](374189 call _alignment _mt[243] this[66844]))
      unknown call_tmp[617711] "expr temp" "maybe param" "maybe type" "temp"
      (617714 'move' call_tmp[617711](374194 call _low _mt[243] this[66844]))
      unknown call_tmp[617718] "expr temp" "maybe param" "maybe type" "temp"
      (617721 'move' call_tmp[617718](374198 call stride _mt[243] this[66844]))
      unknown call_tmp[617723] "expr temp" "maybe param" "maybe type" "temp"
      (617726 'move' call_tmp[617723](66861 call chpl__diffMod call_tmp[617704] call_tmp[617711] call_tmp[617718]))
      unknown call_tmp[617728] "expr temp" "maybe param" "maybe type" "temp"
      (617731 'move' call_tmp[617728](66862 call + call_tmp[617697] call_tmp[617723]))
      (509837 'move' ret[509827](509836 'deref' call_tmp[617728]))
      gotoReturn _end_alignedLowAsInt[509825] _end_alignedLowAsInt[509825]
    }
    label _end_alignedLowAsInt[509825]
    (509829 return ret[509827])
  }
  function range[64319](?).alignedHigh[66878](arg _mt[66883]:_MT[238], arg this[66880]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509843] "RVV" "temp"
    unknown call_tmp[617737] "expr temp" "maybe param" "maybe type" "temp"
    (617740 'move' call_tmp[617737](66888 call alignedHighAsInt _mt[243] this[66880]))
    unknown call_tmp[617742] "expr temp" "maybe param" "maybe type" "temp"
    (617745 'move' call_tmp[617742](66892 call(374207 call (partial) chpl_intToIdx _mt[243] this[66880]) call_tmp[617737]))
    unknown call_tmp[617749] "expr temp" "maybe param" "maybe type" "temp"
    (617752 'move' call_tmp[617749](509848 call idxType _mt[243] this[66880]))
    (509852 'move' ret[509843](509851 'coerce' call_tmp[617742] call_tmp[617749]))
    (509845 return ret[509843])
  }
  { scopeless type
    (374203 call idxType _mt[243] this[66880])
  }
  function range[64319](?).alignedHighAsInt[66902](arg _mt[66907]:_MT[238], arg this[66904]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509856] "RVV" "temp"
    unknown call_tmp[617758] "expr temp" "maybe param" "maybe type" "temp"
    (617761 'move' call_tmp[617758](374212 call stridable _mt[243] this[66904]))
    unknown call_tmp[617763] "expr temp" "maybe param" "maybe type" "temp"
    (617766 'move' call_tmp[617763](66910 call ! call_tmp[617758]))
    unknown call_tmp[617768] "expr temp" "maybe param" "maybe type" "temp"
    (617771 'move' call_tmp[617768](66926 call _cond_test call_tmp[617763]))
    if call_tmp[617768]
    {
      unknown call_tmp[617775] "expr temp" "maybe param" "maybe type" "temp"
      (617778 'move' call_tmp[617775](374217 call _high _mt[243] this[66904]))
      (509861 'move' ret[509856](509860 'deref' call_tmp[617775]))
      gotoReturn _end_alignedHighAsInt[509854] _end_alignedHighAsInt[509854]
    }
    {
      unknown call_tmp[617782] "expr temp" "maybe param" "maybe type" "temp"
      (617785 'move' call_tmp[617782](374222 call _high _mt[243] this[66904]))
      unknown call_tmp[617789] "expr temp" "maybe param" "maybe type" "temp"
      (617792 'move' call_tmp[617789](374227 call _high _mt[243] this[66904]))
      unknown call_tmp[617796] "expr temp" "maybe param" "maybe type" "temp"
      (617799 'move' call_tmp[617796](374232 call _alignment _mt[243] this[66904]))
      unknown call_tmp[617803] "expr temp" "maybe param" "maybe type" "temp"
      (617806 'move' call_tmp[617803](374236 call stride _mt[243] this[66904]))
      unknown call_tmp[617808] "expr temp" "maybe param" "maybe type" "temp"
      (617811 'move' call_tmp[617808](66921 call chpl__diffMod call_tmp[617789] call_tmp[617796] call_tmp[617803]))
      unknown call_tmp[617813] "expr temp" "maybe param" "maybe type" "temp"
      (617816 'move' call_tmp[617813](66922 call - call_tmp[617782] call_tmp[617808]))
      (509866 'move' ret[509856](509865 'deref' call_tmp[617813]))
      gotoReturn _end_alignedHighAsInt[509854] _end_alignedHighAsInt[509854]
    }
    label _end_alignedHighAsInt[509854]
    (509858 return ret[509856])
  }
  function range[64319](?).isEmpty[66938](arg _mt[66943]:_MT[238], arg this[66940]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509872] "RVV" "temp"
    unknown tmp[419498] "maybe param" "temp"
    (419509 'move' tmp[419498] 1)
    unknown call_tmp[617818] "expr temp" "maybe param" "maybe type" "temp"
    (617821 'move' call_tmp[617818](419511 call _cond_invalid tmp[419498]))
    if call_tmp[617818]
    {
      (419514 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556118] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556119] "maybe param" "temp"
    unknown call_tmp[617823] "expr temp" "maybe param" "maybe type" "temp"
    (617826 'move' call_tmp[617823](419499 call isTrue tmp[419498]))
    (556124 'move' tmp[556119](556122 call _cond_test call_tmp[617823]))
    if tmp[556119]
    {
      unknown tmp[556126] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617830] "expr temp" "maybe param" "maybe type" "temp"
      (617833 'move' call_tmp[617830](66948 call(374241 call (partial) isAmbiguous _mt[243] this[66940])))
      (556128 'move' tmp[556126](419502 call isTrue call_tmp[617830]))
      (556133 'move' tmp[556118](556130 '_paramFoldLogical' tmp[556119] tmp[556126]))
    }
    {
      (556138 'move' tmp[556118](556135 '_paramFoldLogical' tmp[556119] 0))
    }
    unknown call_tmp[617835] "expr temp" "maybe param" "maybe type" "temp"
    (617838 'move' call_tmp[617835](66993 call _cond_test tmp[556118]))
    if call_tmp[617835]
    {
      (66973 call boundsCheckHalt module=[255] HaltWrappers[210085] "isEmpty() is invoked on an ambiguously-aligned range")
      (357660 'referenced modules list' HaltWrappers[210085])
    }
    {
      unknown tmp[419477] "maybe param" "temp"
      (419488 'move' tmp[419477](66978 call isBoundedRange this[66940]))
      unknown call_tmp[617840] "expr temp" "maybe param" "maybe type" "temp"
      (617843 'move' call_tmp[617840](419490 call _cond_invalid tmp[419477]))
      if call_tmp[617840]
      {
        (419493 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556145] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556146] "maybe param" "temp"
      unknown call_tmp[617845] "expr temp" "maybe param" "maybe type" "temp"
      (617848 'move' call_tmp[617845](419478 call isTrue tmp[419477]))
      (556151 'move' tmp[556146](556149 call _cond_test call_tmp[617845]))
      if tmp[556146]
      {
        unknown tmp[556153] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617852] "expr temp" "maybe param" "maybe type" "temp"
        (617855 'move' call_tmp[617852](66980 call alignedLow _mt[243] this[66940]))
        unknown call_tmp[617859] "expr temp" "maybe param" "maybe type" "temp"
        (617862 'move' call_tmp[617859](66984 call alignedHigh _mt[243] this[66940]))
        unknown call_tmp[617864] "expr temp" "maybe param" "maybe type" "temp"
        (617867 'move' call_tmp[617864](66987 call > call_tmp[617852] call_tmp[617859]))
        (556155 'move' tmp[556153](419481 call isTrue call_tmp[617864]))
        (556160 'move' tmp[556145](556157 '_paramFoldLogical' tmp[556146] tmp[556153]))
      }
      {
        (556165 'move' tmp[556145](556162 '_paramFoldLogical' tmp[556146] 0))
      }
      (509877 'move' ret[509872](509876 'deref' tmp[556145]))
      gotoReturn _end_isEmpty[509870] _end_isEmpty[509870]
    }
    label _end_isEmpty[509870]
    (509874 return ret[509872])
  }
  function range[64319](?).length[67005](arg _mt[67010]:_MT[238], arg this[67007]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509883] "RVV" "temp"
    unknown call_tmp[617869] "expr temp" "maybe param" "maybe type" "temp"
    (617872 'move' call_tmp[617869](67048 call + "'range.length' is deprecated - " "please use 'range.size' instead"))
    (67051 call compilerWarning call_tmp[617869])
    (475479 'end of statement')
    unknown call_tmp[617876] "expr temp" "maybe param" "maybe type" "temp"
    (617879 'move' call_tmp[617876](67055 call size _mt[243] this[67007]))
    unknown call_tmp[617883] "expr temp" "maybe param" "maybe type" "temp"
    (617886 'move' call_tmp[617883](509888 call intIdxType _mt[243] this[67007]))
    (509892 'move' ret[509883](509891 'coerce' call_tmp[617876] call_tmp[617883]))
    (509885 return ret[509883])
  }
  { scopeless type
    (374246 call intIdxType _mt[243] this[67007])
  }
  function range[64319](?).size[67066](arg _mt[67071]:_MT[238], arg this[67068]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[509896] "RVV" "temp"
    unknown call_tmp[617890] "expr temp" "maybe param" "maybe type" "temp"
    (617893 'move' call_tmp[617890](67077 call isBoundedRange this[67068]))
    unknown call_tmp[617895] "expr temp" "maybe param" "maybe type" "temp"
    (617898 'move' call_tmp[617895](67078 call ! call_tmp[617890]))
    unknown call_tmp[617900] "expr temp" "maybe param" "maybe type" "temp"
    (617903 'move' call_tmp[617900](67101 call _cond_test call_tmp[617895]))
    if call_tmp[617900]
    {
      (67099 call compilerError "'size' is not defined on unbounded ranges")
    }
    unknown call_tmp[617907] "maybe param" "maybe type" "temp"
    (617910 'move' call_tmp[617907](67108 call alignedHighAsInt _mt[243] this[67068]))
    const ah[67111] "dead at end of block" "const" "insert auto destroy"
    (541164 'init var' ah[67111] call_tmp[617907])
    unknown call_tmp[617914] "maybe param" "maybe type" "temp"
    (617917 'move' call_tmp[617914](67115 call alignedLowAsInt _mt[243] this[67068]))
    const al[67118] "dead at end of block" "const" "insert auto destroy"
    (541166 'init var' al[67118] call_tmp[617914])
    (67121 'end of statement')
    unknown call_tmp[617919] "expr temp" "maybe param" "maybe type" "temp"
    (617922 'move' call_tmp[617919](67124 call > al[67118] ah[67111]))
    unknown call_tmp[617924] "expr temp" "maybe param" "maybe type" "temp"
    (617927 'move' call_tmp[617924](67132 call _cond_test call_tmp[617919]))
    if call_tmp[617924]
    {
      unknown call_tmp[617931] "expr temp" "maybe param" "maybe type" "temp"
      (617934 'move' call_tmp[617931](374257 call intIdxType _mt[243] this[67068]))
      unknown call_tmp[617936] "expr temp" "maybe param" "maybe type" "temp"
      (617939 'move' call_tmp[617936](67128 call _cast call_tmp[617931] 0))
      unknown call_tmp[617943] "expr temp" "maybe param" "maybe type" "temp"
      (617946 'move' call_tmp[617943](509901 call intIdxType _mt[243] this[67068]))
      (509905 'move' ret[509896](509904 'coerce' call_tmp[617936] call_tmp[617943]))
      gotoReturn _end_size[509894] _end_size[509894]
    }
    unknown call_tmp[617950] "expr temp" "maybe param" "maybe type" "temp"
    (617953 'move' call_tmp[617950](374261 call intIdxType _mt[243] this[67068]))
    unknown call_tmp[617957] "expr temp" "maybe param" "maybe type" "temp"
    (617960 'move' call_tmp[617957](67139 call stride _mt[243] this[67068]))
    unknown call_tmp[617962] "expr temp" "maybe param" "maybe type" "temp"
    (617965 'move' call_tmp[617962](67143 call abs call_tmp[617957]))
    unknown call_tmp[617967] "maybe param" "maybe type" "temp"
    (617970 'move' call_tmp[617967](67145 call _cast call_tmp[617950] call_tmp[617962]))
    const s[67147] "dead at end of block" "const" "insert auto destroy"
    (541168 'init var' s[67147] call_tmp[617967])
    (67150 'end of statement')
    unknown call_tmp[617972] "expr temp" "maybe param" "maybe type" "temp"
    (617975 'move' call_tmp[617972](67153 call - ah[67111] al[67118]))
    unknown call_tmp[617977] "expr temp" "maybe param" "maybe type" "temp"
    (617980 'move' call_tmp[617977](67156 call / call_tmp[617972] s[67147]))
    unknown call_tmp[617984] "expr temp" "maybe param" "maybe type" "temp"
    (617987 'move' call_tmp[617984](374268 call intIdxType _mt[243] this[67068]))
    unknown call_tmp[617989] "expr temp" "maybe param" "maybe type" "temp"
    (617992 'move' call_tmp[617989](67160 call _cast call_tmp[617984] 1))
    unknown call_tmp[617994] "expr temp" "maybe param" "maybe type" "temp"
    (617997 'move' call_tmp[617994](67162 call + call_tmp[617977] call_tmp[617989]))
    unknown call_tmp[618001] "expr temp" "maybe param" "maybe type" "temp"
    (618004 'move' call_tmp[618001](509910 call intIdxType _mt[243] this[67068]))
    (509914 'move' ret[509896](509913 'coerce' call_tmp[617994] call_tmp[618001]))
    gotoReturn _end_size[509894] _end_size[509894]
    (475483 'end of statement' ah[67111] al[67118] s[67147])
    label _end_size[509894]
    (509898 return ret[509896])
  }
  { scopeless type
    (374250 call intIdxType _mt[243] this[67068])
  }
  function range[64319](?).hasFirst[67172](arg _mt[67177]:_MT[238], arg this[67174]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509920] "RVV" "param" "temp"
    unknown call_tmp[618010] "expr temp" "maybe param" "maybe type" "temp"
    (618013 'move' call_tmp[618010](67191 call(374281 call (partial) hasLowBound _mt[243] this[67174])))
    (509925 'move' ret[509920](509924 'deref' call_tmp[618010]))
    (509922 return ret[509920])
  }
  where {
    unknown tmp[419519] "maybe param" "temp"
    unknown call_tmp[618017] "expr temp" "maybe param" "maybe type" "temp"
    (618020 'move' call_tmp[618017](374273 call stridable _mt[243] this[67174]))
    (419530 'move' tmp[419519](67180 call ! call_tmp[618017]))
    unknown call_tmp[618022] "expr temp" "maybe param" "maybe type" "temp"
    (618025 'move' call_tmp[618022](419532 call _cond_invalid tmp[419519]))
    if call_tmp[618022]
    {
      (419535 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556172] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556173] "maybe param" "temp"
    unknown call_tmp[618027] "expr temp" "maybe param" "maybe type" "temp"
    (618030 'move' call_tmp[618027](419520 call isTrue tmp[419519]))
    (556178 'move' tmp[556173](556176 call _cond_test call_tmp[618027]))
    if tmp[556173]
    {
      unknown tmp[556180] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618034] "expr temp" "maybe param" "maybe type" "temp"
      (618037 'move' call_tmp[618034](67184 call(374277 call (partial) hasHighBound _mt[243] this[67174])))
      unknown call_tmp[618039] "expr temp" "maybe param" "maybe type" "temp"
      (618042 'move' call_tmp[618039](67185 call ! call_tmp[618034]))
      (556182 'move' tmp[556180](419523 call isTrue call_tmp[618039]))
      (556187 'move' tmp[556172](556184 '_paramFoldLogical' tmp[556173] tmp[556180]))
    }
    {
      (556192 'move' tmp[556172](556189 '_paramFoldLogical' tmp[556173] 0))
    }
    (748417 call chpl_statementLevelSymbol tmp[556172])
  }
  function range[64319](?).hasFirst[67201](arg _mt[67206]:_MT[238], arg this[67203]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509929] "RVV" "temp"
    unknown tmp[419540] "maybe param" "temp"
    (419551 'move' tmp[419540](67210 call(374285 call (partial) isAmbiguous _mt[243] this[67203])))
    unknown call_tmp[618046] "expr temp" "maybe param" "maybe type" "temp"
    (618049 'move' call_tmp[618046](419553 call _cond_invalid tmp[419540]))
    if call_tmp[618046]
    {
      (419556 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556199] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556200] "maybe param" "temp"
    unknown call_tmp[618051] "expr temp" "maybe param" "maybe type" "temp"
    (618054 'move' call_tmp[618051](419541 call isTrue tmp[419540]))
    (556205 'move' tmp[556200](556203 call _cond_test call_tmp[618051]))
    if tmp[556200]
    {
      (556210 'move' tmp[556199](556207 '_paramFoldLogical' tmp[556200] 1))
    }
    {
      unknown tmp[556212] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618058] "expr temp" "maybe param" "maybe type" "temp"
      (618061 'move' call_tmp[618058](67213 call(374289 call (partial) isEmpty _mt[243] this[67203])))
      (556214 'move' tmp[556212](419545 call isTrue call_tmp[618058]))
      (556219 'move' tmp[556199](556216 '_paramFoldLogical' tmp[556200] tmp[556212]))
    }
    unknown tmp[556257] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556258] "maybe param" "temp"
    (556263 'move' tmp[556258](556261 call _cond_test tmp[556199]))
    if tmp[556258]
    {
      (556268 'move' tmp[556257](556265 '_paramFoldLogical' tmp[556258] 0))
    }
    {
      unknown tmp[556226] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556227] "maybe param" "temp"
      unknown call_tmp[618065] "expr temp" "maybe param" "maybe type" "temp"
      (618068 'move' call_tmp[618065](374293 call stride _mt[243] this[67203]))
      unknown call_tmp[618070] "expr temp" "maybe param" "maybe type" "temp"
      (618073 'move' call_tmp[618070](67219 call > call_tmp[618065] 0))
      (556232 'move' tmp[556227](556230 call _cond_test call_tmp[618070]))
      if tmp[556227]
      {
        unknown tmp[556234] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556236 'move' tmp[556234](67223 call(374297 call (partial) hasLowBound _mt[243] this[67203])))
        (556241 'move' tmp[556226](556238 '_paramFoldLogical' tmp[556227] tmp[556234]))
      }
      {
        unknown tmp[556243] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556245 'move' tmp[556243](67226 call(374301 call (partial) hasHighBound _mt[243] this[67203])))
        (556250 'move' tmp[556226](556247 '_paramFoldLogical' tmp[556227] tmp[556243]))
      }
      (556273 'move' tmp[556257](556270 '_paramFoldLogical' tmp[556258] tmp[556226]))
    }
    (509934 'move' ret[509929](509933 'deref' tmp[556257]))
    (509931 return ret[509929])
  }
  function range[64319](?).hasLast[67241](arg _mt[67246]:_MT[238], arg this[67243]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509938] "RVV" "param" "temp"
    unknown call_tmp[618081] "expr temp" "maybe param" "maybe type" "temp"
    (618084 'move' call_tmp[618081](67260 call(374314 call (partial) hasHighBound _mt[243] this[67243])))
    (509943 'move' ret[509938](509942 'deref' call_tmp[618081]))
    (509940 return ret[509938])
  }
  where {
    unknown tmp[419561] "maybe param" "temp"
    unknown call_tmp[618088] "expr temp" "maybe param" "maybe type" "temp"
    (618091 'move' call_tmp[618088](374306 call stridable _mt[243] this[67243]))
    (419572 'move' tmp[419561](67249 call ! call_tmp[618088]))
    unknown call_tmp[618093] "expr temp" "maybe param" "maybe type" "temp"
    (618096 'move' call_tmp[618093](419574 call _cond_invalid tmp[419561]))
    if call_tmp[618093]
    {
      (419577 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556280] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556281] "maybe param" "temp"
    unknown call_tmp[618098] "expr temp" "maybe param" "maybe type" "temp"
    (618101 'move' call_tmp[618098](419562 call isTrue tmp[419561]))
    (556286 'move' tmp[556281](556284 call _cond_test call_tmp[618098]))
    if tmp[556281]
    {
      unknown tmp[556288] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618105] "expr temp" "maybe param" "maybe type" "temp"
      (618108 'move' call_tmp[618105](67253 call(374310 call (partial) hasLowBound _mt[243] this[67243])))
      unknown call_tmp[618110] "expr temp" "maybe param" "maybe type" "temp"
      (618113 'move' call_tmp[618110](67254 call ! call_tmp[618105]))
      (556290 'move' tmp[556288](419565 call isTrue call_tmp[618110]))
      (556295 'move' tmp[556280](556292 '_paramFoldLogical' tmp[556281] tmp[556288]))
    }
    {
      (556300 'move' tmp[556280](556297 '_paramFoldLogical' tmp[556281] 0))
    }
    (748419 call chpl_statementLevelSymbol tmp[556280])
  }
  function range[64319](?).hasLast[67270](arg _mt[67275]:_MT[238], arg this[67272]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509947] "RVV" "temp"
    unknown tmp[419582] "maybe param" "temp"
    (419593 'move' tmp[419582](67279 call(374318 call (partial) isAmbiguous _mt[243] this[67272])))
    unknown call_tmp[618117] "expr temp" "maybe param" "maybe type" "temp"
    (618120 'move' call_tmp[618117](419595 call _cond_invalid tmp[419582]))
    if call_tmp[618117]
    {
      (419598 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556307] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556308] "maybe param" "temp"
    unknown call_tmp[618122] "expr temp" "maybe param" "maybe type" "temp"
    (618125 'move' call_tmp[618122](419583 call isTrue tmp[419582]))
    (556313 'move' tmp[556308](556311 call _cond_test call_tmp[618122]))
    if tmp[556308]
    {
      (556318 'move' tmp[556307](556315 '_paramFoldLogical' tmp[556308] 1))
    }
    {
      unknown tmp[556320] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618129] "expr temp" "maybe param" "maybe type" "temp"
      (618132 'move' call_tmp[618129](67282 call(374322 call (partial) isEmpty _mt[243] this[67272])))
      (556322 'move' tmp[556320](419587 call isTrue call_tmp[618129]))
      (556327 'move' tmp[556307](556324 '_paramFoldLogical' tmp[556308] tmp[556320]))
    }
    unknown tmp[556365] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556366] "maybe param" "temp"
    (556371 'move' tmp[556366](556369 call _cond_test tmp[556307]))
    if tmp[556366]
    {
      (556376 'move' tmp[556365](556373 '_paramFoldLogical' tmp[556366] 0))
    }
    {
      unknown tmp[556334] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556335] "maybe param" "temp"
      unknown call_tmp[618136] "expr temp" "maybe param" "maybe type" "temp"
      (618139 'move' call_tmp[618136](374326 call stride _mt[243] this[67272]))
      unknown call_tmp[618141] "expr temp" "maybe param" "maybe type" "temp"
      (618144 'move' call_tmp[618141](67288 call > call_tmp[618136] 0))
      (556340 'move' tmp[556335](556338 call _cond_test call_tmp[618141]))
      if tmp[556335]
      {
        unknown tmp[556342] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556344 'move' tmp[556342](67292 call(374330 call (partial) hasHighBound _mt[243] this[67272])))
        (556349 'move' tmp[556334](556346 '_paramFoldLogical' tmp[556335] tmp[556342]))
      }
      {
        unknown tmp[556351] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556353 'move' tmp[556351](67295 call(374334 call (partial) hasLowBound _mt[243] this[67272])))
        (556358 'move' tmp[556334](556355 '_paramFoldLogical' tmp[556335] tmp[556351]))
      }
      (556381 'move' tmp[556365](556378 '_paramFoldLogical' tmp[556366] tmp[556334]))
    }
    (509952 'move' ret[509947](509951 'deref' tmp[556365]))
    (509949 return ret[509947])
  }
  function range[64319](?).isNaturallyAligned[67310](arg _mt[67315]:_MT[238], arg this[67312]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method"
  {
    unknown ret[509956] "RVV" "temp"
    unknown call_tmp[618152] "expr temp" "maybe param" "maybe type" "temp"
    (618155 'move' call_tmp[618152](374343 call stride _mt[243] this[67312]))
    unknown call_tmp[618157] "expr temp" "maybe param" "maybe type" "temp"
    (618160 'move' call_tmp[618157](67332 call > call_tmp[618152] 0))
    unknown call_tmp[618162] "expr temp" "maybe param" "maybe type" "temp"
    (618165 'move' call_tmp[618162](67343 call _cond_test call_tmp[618157]))
    if call_tmp[618162]
    {
      unknown call_tmp[618169] "expr temp" "maybe param" "maybe type" "temp"
      (618172 'move' call_tmp[618169](67335 call alignedLowAsInt _mt[243] this[67312]))
      unknown call_tmp[618176] "expr temp" "maybe param" "maybe type" "temp"
      (618179 'move' call_tmp[618176](374348 call _low _mt[243] this[67312]))
      unknown call_tmp[618181] "expr temp" "maybe param" "maybe type" "temp"
      (618184 'move' call_tmp[618181](67339 call == call_tmp[618169] call_tmp[618176]))
      (509961 'move' ret[509956](509960 'deref' call_tmp[618181]))
      gotoReturn _end_isNaturallyAligned[509954] _end_isNaturallyAligned[509954]
    }
    unknown call_tmp[618188] "expr temp" "maybe param" "maybe type" "temp"
    (618191 'move' call_tmp[618188](374352 call stride _mt[243] this[67312]))
    unknown call_tmp[618193] "expr temp" "maybe param" "maybe type" "temp"
    (618196 'move' call_tmp[618193](67351 call < call_tmp[618188] 0))
    unknown call_tmp[618198] "expr temp" "maybe param" "maybe type" "temp"
    (618201 'move' call_tmp[618198](67362 call _cond_test call_tmp[618193]))
    if call_tmp[618198]
    {
      unknown call_tmp[618205] "expr temp" "maybe param" "maybe type" "temp"
      (618208 'move' call_tmp[618205](67354 call alignedHighAsInt _mt[243] this[67312]))
      unknown call_tmp[618212] "expr temp" "maybe param" "maybe type" "temp"
      (618215 'move' call_tmp[618212](374357 call _high _mt[243] this[67312]))
      unknown call_tmp[618217] "expr temp" "maybe param" "maybe type" "temp"
      (618220 'move' call_tmp[618217](67358 call == call_tmp[618205] call_tmp[618212]))
      (509966 'move' ret[509956](509965 'deref' call_tmp[618217]))
      gotoReturn _end_isNaturallyAligned[509954] _end_isNaturallyAligned[509954]
    }
    (509971 'move' ret[509956](509970 'deref' 0))
    label _end_isNaturallyAligned[509954]
    (509958 return ret[509956])
  }
  where {
    unknown tmp[419603] "maybe param" "temp"
    (419614 'move' tmp[419603](374339 call stridable _mt[243] this[67312]))
    unknown call_tmp[618224] "expr temp" "maybe param" "maybe type" "temp"
    (618227 'move' call_tmp[618224](419616 call _cond_invalid tmp[419603]))
    if call_tmp[618224]
    {
      (419619 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556388] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556389] "maybe param" "temp"
    unknown call_tmp[618229] "expr temp" "maybe param" "maybe type" "temp"
    (618232 'move' call_tmp[618229](419604 call isTrue tmp[419603]))
    (556394 'move' tmp[556389](556392 call _cond_test call_tmp[618229]))
    if tmp[556389]
    {
      unknown tmp[556396] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618236] "expr temp" "maybe param" "maybe type" "temp"
      (618239 'move' call_tmp[618236](67319 call boundedType _mt[243] this[67312]))
      unknown call_tmp[618241] "expr temp" "maybe param" "maybe type" "temp"
      (618244 'move' call_tmp[618241](67326 call == call_tmp[618236] bounded[64208]))
      (556398 'move' tmp[556396](419607 call isTrue call_tmp[618241]))
      (556403 'move' tmp[556388](556400 '_paramFoldLogical' tmp[556389] tmp[556396]))
    }
    {
      (556408 'move' tmp[556388](556405 '_paramFoldLogical' tmp[556389] 0))
    }
    (748421 call chpl_statementLevelSymbol tmp[556388])
  }
  function range[64319](?).isNaturallyAligned[67376](arg _mt[67381]:_MT[238], arg this[67378]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509975] "RVV" "param" "temp"
    (509980 'move' ret[509975](509979 'deref' 1))
    (509977 return ret[509975])
  }
  where {
    unknown tmp[419624] "maybe param" "temp"
    unknown call_tmp[618248] "expr temp" "maybe param" "maybe type" "temp"
    (618251 'move' call_tmp[618248](374362 call stridable _mt[243] this[67378]))
    (419635 'move' tmp[419624](67384 call ! call_tmp[618248]))
    unknown call_tmp[618253] "expr temp" "maybe param" "maybe type" "temp"
    (618256 'move' call_tmp[618253](419637 call _cond_invalid tmp[419624]))
    if call_tmp[618253]
    {
      (419640 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556415] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556416] "maybe param" "temp"
    unknown call_tmp[618258] "expr temp" "maybe param" "maybe type" "temp"
    (618261 'move' call_tmp[618258](419625 call isTrue tmp[419624]))
    (556421 'move' tmp[556416](556419 call _cond_test call_tmp[618258]))
    if tmp[556416]
    {
      unknown tmp[556423] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618265] "expr temp" "maybe param" "maybe type" "temp"
      (618268 'move' call_tmp[618265](67387 call boundedType _mt[243] this[67378]))
      unknown call_tmp[618270] "expr temp" "maybe param" "maybe type" "temp"
      (618273 'move' call_tmp[618270](67394 call == call_tmp[618265] bounded[64208]))
      (556425 'move' tmp[556423](419628 call isTrue call_tmp[618270]))
      (556430 'move' tmp[556415](556427 '_paramFoldLogical' tmp[556416] tmp[556423]))
    }
    {
      (556435 'move' tmp[556415](556432 '_paramFoldLogical' tmp[556416] 0))
    }
    (748423 call chpl_statementLevelSymbol tmp[556415])
  }
  function range[64319](?).isNaturallyAligned[67408](arg _mt[67413]:_MT[238], arg this[67410]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509984] "RVV" "temp"
    unknown call_tmp[618277] "expr temp" "maybe param" "maybe type" "temp"
    (618280 'move' call_tmp[618277](67431 call alignedLowAsInt _mt[243] this[67410]))
    unknown call_tmp[618284] "expr temp" "maybe param" "maybe type" "temp"
    (618287 'move' call_tmp[618284](374372 call _low _mt[243] this[67410]))
    unknown call_tmp[618289] "expr temp" "maybe param" "maybe type" "temp"
    (618292 'move' call_tmp[618289](67435 call == call_tmp[618277] call_tmp[618284]))
    (509989 'move' ret[509984](509988 'deref' call_tmp[618289]))
    (509986 return ret[509984])
  }
  where {
    unknown tmp[419645] "maybe param" "temp"
    unknown call_tmp[618296] "expr temp" "maybe param" "maybe type" "temp"
    (618299 'move' call_tmp[618296](374367 call stridable _mt[243] this[67410]))
    (419656 'move' tmp[419645](67416 call ! call_tmp[618296]))
    unknown call_tmp[618301] "expr temp" "maybe param" "maybe type" "temp"
    (618304 'move' call_tmp[618301](419658 call _cond_invalid tmp[419645]))
    if call_tmp[618301]
    {
      (419661 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556442] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556443] "maybe param" "temp"
    unknown call_tmp[618306] "expr temp" "maybe param" "maybe type" "temp"
    (618309 'move' call_tmp[618306](419646 call isTrue tmp[419645]))
    (556448 'move' tmp[556443](556446 call _cond_test call_tmp[618306]))
    if tmp[556443]
    {
      unknown tmp[556450] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618313] "expr temp" "maybe param" "maybe type" "temp"
      (618316 'move' call_tmp[618313](67419 call boundedType _mt[243] this[67410]))
      unknown call_tmp[618318] "expr temp" "maybe param" "maybe type" "temp"
      (618321 'move' call_tmp[618318](67426 call == call_tmp[618313] boundedLow[64210]))
      (556452 'move' tmp[556450](419649 call isTrue call_tmp[618318]))
      (556457 'move' tmp[556442](556454 '_paramFoldLogical' tmp[556443] tmp[556450]))
    }
    {
      (556462 'move' tmp[556442](556459 '_paramFoldLogical' tmp[556443] 0))
    }
    (748425 call chpl_statementLevelSymbol tmp[556442])
  }
  function range[64319](?).isNaturallyAligned[67446](arg _mt[67451]:_MT[238], arg this[67448]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509993] "RVV" "temp"
    unknown tmp[419687] "maybe param" "temp"
    unknown call_tmp[618325] "expr temp" "maybe param" "maybe type" "temp"
    (618328 'move' call_tmp[618325](374381 call stride _mt[243] this[67448]))
    (419698 'move' tmp[419687](67468 call > call_tmp[618325] 0))
    unknown call_tmp[618330] "expr temp" "maybe param" "maybe type" "temp"
    (618333 'move' call_tmp[618330](419700 call _cond_invalid tmp[419687]))
    if call_tmp[618330]
    {
      (419703 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556469] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556470] "maybe param" "temp"
    unknown call_tmp[618335] "expr temp" "maybe param" "maybe type" "temp"
    (618338 'move' call_tmp[618335](419688 call isTrue tmp[419687]))
    (556475 'move' tmp[556470](556473 call _cond_test call_tmp[618335]))
    if tmp[556470]
    {
      unknown tmp[556477] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618342] "expr temp" "maybe param" "maybe type" "temp"
      (618345 'move' call_tmp[618342](67471 call alignedLowAsInt _mt[243] this[67448]))
      unknown call_tmp[618349] "expr temp" "maybe param" "maybe type" "temp"
      (618352 'move' call_tmp[618349](374386 call _low _mt[243] this[67448]))
      unknown call_tmp[618354] "expr temp" "maybe param" "maybe type" "temp"
      (618357 'move' call_tmp[618354](67475 call == call_tmp[618342] call_tmp[618349]))
      (556479 'move' tmp[556477](419691 call isTrue call_tmp[618354]))
      (556484 'move' tmp[556469](556481 '_paramFoldLogical' tmp[556470] tmp[556477]))
    }
    {
      (556489 'move' tmp[556469](556486 '_paramFoldLogical' tmp[556470] 0))
    }
    (509998 'move' ret[509993](509997 'deref' tmp[556469]))
    (509995 return ret[509993])
  }
  where {
    unknown tmp[419666] "maybe param" "temp"
    (419677 'move' tmp[419666](374377 call stridable _mt[243] this[67448]))
    unknown call_tmp[618361] "expr temp" "maybe param" "maybe type" "temp"
    (618364 'move' call_tmp[618361](419679 call _cond_invalid tmp[419666]))
    if call_tmp[618361]
    {
      (419682 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556496] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556497] "maybe param" "temp"
    unknown call_tmp[618366] "expr temp" "maybe param" "maybe type" "temp"
    (618369 'move' call_tmp[618366](419667 call isTrue tmp[419666]))
    (556502 'move' tmp[556497](556500 call _cond_test call_tmp[618366]))
    if tmp[556497]
    {
      unknown tmp[556504] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618373] "expr temp" "maybe param" "maybe type" "temp"
      (618376 'move' call_tmp[618373](67455 call boundedType _mt[243] this[67448]))
      unknown call_tmp[618378] "expr temp" "maybe param" "maybe type" "temp"
      (618381 'move' call_tmp[618378](67462 call == call_tmp[618373] boundedLow[64210]))
      (556506 'move' tmp[556504](419670 call isTrue call_tmp[618378]))
      (556511 'move' tmp[556496](556508 '_paramFoldLogical' tmp[556497] tmp[556504]))
    }
    {
      (556516 'move' tmp[556496](556513 '_paramFoldLogical' tmp[556497] 0))
    }
    (748427 call chpl_statementLevelSymbol tmp[556496])
  }
  function range[64319](?).isNaturallyAligned[67488](arg _mt[67493]:_MT[238], arg this[67490]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510002] "RVV" "param" "temp"
    (510007 'move' ret[510002](510006 'deref' 0))
    (510004 return ret[510002])
  }
  where {
    unknown tmp[419708] "maybe param" "temp"
    unknown call_tmp[618385] "expr temp" "maybe param" "maybe type" "temp"
    (618388 'move' call_tmp[618385](67496 call boundedType _mt[243] this[67490]))
    (419719 'move' tmp[419708](67503 call == call_tmp[618385] boundedNone[64214]))
    unknown call_tmp[618390] "expr temp" "maybe param" "maybe type" "temp"
    (618393 'move' call_tmp[618390](419721 call _cond_invalid tmp[419708]))
    if call_tmp[618390]
    {
      (419724 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556550] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556551] "maybe param" "temp"
    unknown call_tmp[618395] "expr temp" "maybe param" "maybe type" "temp"
    (618398 'move' call_tmp[618395](419709 call isTrue tmp[419708]))
    (556556 'move' tmp[556551](556554 call _cond_test call_tmp[618395]))
    if tmp[556551]
    {
      (556561 'move' tmp[556550](556558 '_paramFoldLogical' tmp[556551] 1))
    }
    {
      unknown tmp[419729] "maybe param" "temp"
      unknown call_tmp[618402] "expr temp" "maybe param" "maybe type" "temp"
      (618405 'move' call_tmp[618402](374391 call stridable _mt[243] this[67490]))
      (419740 'move' tmp[419729](67506 call ! call_tmp[618402]))
      unknown call_tmp[618407] "expr temp" "maybe param" "maybe type" "temp"
      (618410 'move' call_tmp[618407](419742 call _cond_invalid tmp[419729]))
      if call_tmp[618407]
      {
        (419745 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556523] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556524] "maybe param" "temp"
      unknown call_tmp[618412] "expr temp" "maybe param" "maybe type" "temp"
      (618415 'move' call_tmp[618412](419730 call isTrue tmp[419729]))
      (556529 'move' tmp[556524](556527 call _cond_test call_tmp[618412]))
      if tmp[556524]
      {
        unknown tmp[556531] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618419] "expr temp" "maybe param" "maybe type" "temp"
        (618422 'move' call_tmp[618419](67509 call boundedType _mt[243] this[67490]))
        unknown call_tmp[618424] "expr temp" "maybe param" "maybe type" "temp"
        (618427 'move' call_tmp[618424](67516 call == call_tmp[618419] boundedHigh[64212]))
        (556533 'move' tmp[556531](419733 call isTrue call_tmp[618424]))
        (556538 'move' tmp[556523](556535 '_paramFoldLogical' tmp[556524] tmp[556531]))
      }
      {
        (556543 'move' tmp[556523](556540 '_paramFoldLogical' tmp[556524] 0))
      }
      unknown tmp[556563] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556565 'move' tmp[556563](419713 call isTrue tmp[556523]))
      (556570 'move' tmp[556550](556567 '_paramFoldLogical' tmp[556551] tmp[556563]))
    }
    (748429 call chpl_statementLevelSymbol tmp[556550])
  }
  function range[64319](?).isNaturallyAligned[67532](arg _mt[67537]:_MT[238], arg this[67534]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510011] "RVV" "temp"
    unknown tmp[419771] "maybe param" "temp"
    unknown call_tmp[618431] "expr temp" "maybe param" "maybe type" "temp"
    (618434 'move' call_tmp[618431](374400 call stride _mt[243] this[67534]))
    (419782 'move' tmp[419771](67554 call < call_tmp[618431] 0))
    unknown call_tmp[618436] "expr temp" "maybe param" "maybe type" "temp"
    (618439 'move' call_tmp[618436](419784 call _cond_invalid tmp[419771]))
    if call_tmp[618436]
    {
      (419787 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556577] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556578] "maybe param" "temp"
    unknown call_tmp[618441] "expr temp" "maybe param" "maybe type" "temp"
    (618444 'move' call_tmp[618441](419772 call isTrue tmp[419771]))
    (556583 'move' tmp[556578](556581 call _cond_test call_tmp[618441]))
    if tmp[556578]
    {
      unknown tmp[556585] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618448] "expr temp" "maybe param" "maybe type" "temp"
      (618451 'move' call_tmp[618448](67557 call alignedHighAsInt _mt[243] this[67534]))
      unknown call_tmp[618455] "expr temp" "maybe param" "maybe type" "temp"
      (618458 'move' call_tmp[618455](374405 call _high _mt[243] this[67534]))
      unknown call_tmp[618460] "expr temp" "maybe param" "maybe type" "temp"
      (618463 'move' call_tmp[618460](67561 call == call_tmp[618448] call_tmp[618455]))
      (556587 'move' tmp[556585](419775 call isTrue call_tmp[618460]))
      (556592 'move' tmp[556577](556589 '_paramFoldLogical' tmp[556578] tmp[556585]))
    }
    {
      (556597 'move' tmp[556577](556594 '_paramFoldLogical' tmp[556578] 0))
    }
    (510016 'move' ret[510011](510015 'deref' tmp[556577]))
    (510013 return ret[510011])
  }
  where {
    unknown tmp[419750] "maybe param" "temp"
    (419761 'move' tmp[419750](374396 call stridable _mt[243] this[67534]))
    unknown call_tmp[618467] "expr temp" "maybe param" "maybe type" "temp"
    (618470 'move' call_tmp[618467](419763 call _cond_invalid tmp[419750]))
    if call_tmp[618467]
    {
      (419766 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556604] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556605] "maybe param" "temp"
    unknown call_tmp[618472] "expr temp" "maybe param" "maybe type" "temp"
    (618475 'move' call_tmp[618472](419751 call isTrue tmp[419750]))
    (556610 'move' tmp[556605](556608 call _cond_test call_tmp[618472]))
    if tmp[556605]
    {
      unknown tmp[556612] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618479] "expr temp" "maybe param" "maybe type" "temp"
      (618482 'move' call_tmp[618479](67541 call boundedType _mt[243] this[67534]))
      unknown call_tmp[618484] "expr temp" "maybe param" "maybe type" "temp"
      (618487 'move' call_tmp[618484](67548 call == call_tmp[618479] boundedHigh[64212]))
      (556614 'move' tmp[556612](419754 call isTrue call_tmp[618484]))
      (556619 'move' tmp[556604](556616 '_paramFoldLogical' tmp[556605] tmp[556612]))
    }
    {
      (556624 'move' tmp[556604](556621 '_paramFoldLogical' tmp[556605] 0))
    }
    (748431 call chpl_statementLevelSymbol tmp[556604])
  }
  function range[64319](?).isAmbiguous[67574](arg _mt[67579]:_MT[238], arg this[67576]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[510020] "RVV" "param" "temp"
    (510025 'move' ret[510020](510024 'deref' 0))
    (510022 return ret[510020])
  }
  where {
    unknown call_tmp[618491] "expr temp" "maybe param" "maybe type" "temp"
    (618494 'move' call_tmp[618491](374410 call stridable _mt[243] this[67576]))
    (67582 call ! call_tmp[618491])
  }
  function range[64319](?).isAmbiguous[67594](arg _mt[67599]:_MT[238], arg this[67596]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510029] "RVV" "temp"
    unknown tmp[419792] "maybe param" "temp"
    unknown call_tmp[618498] "expr temp" "maybe param" "maybe type" "temp"
    (618501 'move' call_tmp[618498](374419 call aligned _mt[243] this[67596]))
    (419803 'move' tmp[419792](67603 call ! call_tmp[618498]))
    unknown call_tmp[618503] "expr temp" "maybe param" "maybe type" "temp"
    (618506 'move' call_tmp[618503](419805 call _cond_invalid tmp[419792]))
    if call_tmp[618503]
    {
      (419808 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556658] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556659] "maybe param" "temp"
    unknown call_tmp[618508] "expr temp" "maybe param" "maybe type" "temp"
    (618511 'move' call_tmp[618508](419793 call isTrue tmp[419792]))
    (556664 'move' tmp[556659](556662 call _cond_test call_tmp[618508]))
    if tmp[556659]
    {
      unknown tmp[419813] "maybe param" "temp"
      unknown call_tmp[618515] "expr temp" "maybe param" "maybe type" "temp"
      (618518 'move' call_tmp[618515](374423 call stride _mt[243] this[67596]))
      (419824 'move' tmp[419813](67607 call > call_tmp[618515] 1))
      unknown call_tmp[618520] "expr temp" "maybe param" "maybe type" "temp"
      (618523 'move' call_tmp[618520](419826 call _cond_invalid tmp[419813]))
      if call_tmp[618520]
      {
        (419829 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556631] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556632] "maybe param" "temp"
      unknown call_tmp[618525] "expr temp" "maybe param" "maybe type" "temp"
      (618528 'move' call_tmp[618525](419814 call isTrue tmp[419813]))
      (556637 'move' tmp[556632](556635 call _cond_test call_tmp[618525]))
      if tmp[556632]
      {
        (556642 'move' tmp[556631](556639 '_paramFoldLogical' tmp[556632] 1))
      }
      {
        unknown tmp[556644] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618532] "expr temp" "maybe param" "maybe type" "temp"
        (618535 'move' call_tmp[618532](374427 call stride _mt[243] this[67596]))
        unknown call_tmp[618537] "expr temp" "maybe param" "maybe type" "temp"
        (618540 'move' call_tmp[618537](67611 call - 1))
        unknown call_tmp[618542] "expr temp" "maybe param" "maybe type" "temp"
        (618545 'move' call_tmp[618542](67613 call < call_tmp[618532] call_tmp[618537]))
        (556646 'move' tmp[556644](419818 call isTrue call_tmp[618542]))
        (556651 'move' tmp[556631](556648 '_paramFoldLogical' tmp[556632] tmp[556644]))
      }
      unknown tmp[556666] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556668 'move' tmp[556666](419796 call isTrue tmp[556631]))
      (556673 'move' tmp[556658](556670 '_paramFoldLogical' tmp[556659] tmp[556666]))
    }
    {
      (556678 'move' tmp[556658](556675 '_paramFoldLogical' tmp[556659] 0))
    }
    (510034 'move' ret[510029](510033 'deref' tmp[556658]))
    (510031 return ret[510029])
  }
  where {
    (374415 call stridable _mt[243] this[67596])
  }
  function range[64319](?).contains[67632](arg _mt[67637]:_MT[238], arg this[67634]:range[64319](?) :
  range[64319](?), arg ind[67629] :
  (374432 call idxType _mt[243] this[67634])) : _unknown[51] "inline" "method"
  {
    unknown ret[510038] "RVV" "temp"
    unknown call_tmp[618553] "expr temp" "maybe param" "maybe type" "temp"
    (618556 'move' call_tmp[618553](67646 call(67642 call (partial) isAmbiguous _mt[243] this[67634])))
    unknown call_tmp[618558] "expr temp" "maybe param" "maybe type" "temp"
    (618561 'move' call_tmp[618558](67650 call _cond_test call_tmp[618553]))
    if call_tmp[618558]
    {
      (510043 'move' ret[510038](510042 'deref' 0))
      gotoReturn _end_contains[510036] _end_contains[510036]
    }
    unknown call_tmp[618563] "maybe param" "maybe type" "temp"
    (618566 'move' call_tmp[618563](67659 call chpl__idxToInt ind[67629]))
    const i[67660] "dead at end of block" "const" "insert auto destroy"
    (541170 'init var' i[67660] call_tmp[618563])
    (67663 'end of statement')
    unknown call_tmp[618570] "expr temp" "maybe param" "maybe type" "temp"
    (618573 'move' call_tmp[618570](67666 call(374437 call (partial) hasHighBound _mt[243] this[67634])))
    unknown call_tmp[618575] "expr temp" "maybe param" "maybe type" "temp"
    (618578 'move' call_tmp[618575](67680 call _cond_test call_tmp[618570]))
    if call_tmp[618575]
    {
      unknown call_tmp[618582] "expr temp" "maybe param" "maybe type" "temp"
      (618585 'move' call_tmp[618582](374443 call _high _mt[243] this[67634]))
      unknown call_tmp[618587] "expr temp" "maybe param" "maybe type" "temp"
      (618590 'move' call_tmp[618587](67669 call > i[67660] call_tmp[618582]))
      unknown call_tmp[618592] "expr temp" "maybe param" "maybe type" "temp"
      (618595 'move' call_tmp[618592](67674 call _cond_test call_tmp[618587]))
      if call_tmp[618592]
      {
        (510048 'move' ret[510038](510047 'deref' 0))
        gotoReturn _end_contains[510036] _end_contains[510036]
      }
    }
    unknown call_tmp[618599] "expr temp" "maybe param" "maybe type" "temp"
    (618602 'move' call_tmp[618599](67686 call(374447 call (partial) hasLowBound _mt[243] this[67634])))
    unknown call_tmp[618604] "expr temp" "maybe param" "maybe type" "temp"
    (618607 'move' call_tmp[618604](67700 call _cond_test call_tmp[618599]))
    if call_tmp[618604]
    {
      unknown call_tmp[618611] "expr temp" "maybe param" "maybe type" "temp"
      (618614 'move' call_tmp[618611](374453 call _low _mt[243] this[67634]))
      unknown call_tmp[618616] "expr temp" "maybe param" "maybe type" "temp"
      (618619 'move' call_tmp[618616](67689 call < i[67660] call_tmp[618611]))
      unknown call_tmp[618621] "expr temp" "maybe param" "maybe type" "temp"
      (618624 'move' call_tmp[618621](67694 call _cond_test call_tmp[618616]))
      if call_tmp[618621]
      {
        (510053 'move' ret[510038](510052 'deref' 0))
        gotoReturn _end_contains[510036] _end_contains[510036]
      }
    }
    unknown call_tmp[618628] "expr temp" "maybe param" "maybe type" "temp"
    (618631 'move' call_tmp[618628](374458 call stridable _mt[243] this[67634]))
    unknown call_tmp[618633] "expr temp" "maybe param" "maybe type" "temp"
    (618636 'move' call_tmp[618633](67734 call _cond_test call_tmp[618628]))
    if call_tmp[618633]
    {
      unknown call_tmp[618640] "expr temp" "maybe param" "maybe type" "temp"
      (618643 'move' call_tmp[618640](374467 call intIdxType _mt[243] this[67634]))
      unknown call_tmp[618647] "expr temp" "maybe param" "maybe type" "temp"
      (618650 'move' call_tmp[618647](374463 call _stride _mt[243] this[67634]))
      unknown call_tmp[618652] "expr temp" "maybe param" "maybe type" "temp"
      (618655 'move' call_tmp[618652](67708 call abs call_tmp[618647]))
      unknown call_tmp[618657] "maybe param" "maybe type" "temp"
      (618660 'move' call_tmp[618657](67710 call _cast call_tmp[618640] call_tmp[618652]))
      unknown s[67712] "dead at end of block" "insert auto destroy"
      (541172 'init var' s[67712] call_tmp[618657])
      (67715 'end of statement')
      unknown call_tmp[618664] "expr temp" "maybe param" "maybe type" "temp"
      (618667 'move' call_tmp[618664](374473 call _alignment _mt[243] this[67634]))
      unknown call_tmp[618669] "expr temp" "maybe param" "maybe type" "temp"
      (618672 'move' call_tmp[618669](67722 call chpl__diffMod i[67660] call_tmp[618664] s[67712]))
      unknown call_tmp[618674] "expr temp" "maybe param" "maybe type" "temp"
      (618677 'move' call_tmp[618674](67724 call != call_tmp[618669] 0))
      unknown call_tmp[618679] "expr temp" "maybe param" "maybe type" "temp"
      (618682 'move' call_tmp[618679](67729 call _cond_test call_tmp[618674]))
      if call_tmp[618679]
      {
        (510058 'move' ret[510038](510057 'deref' 0))
        gotoReturn _end_contains[510036] _end_contains[510036]
      }
    }
    (510063 'move' ret[510038](510062 'deref' 1))
    label _end_contains[510036]
    (510040 return ret[510038])
  }
  function range[64319](?).contains[67753](arg _mt[67758]:_MT[238], arg this[67755]:range[64319](?) :
  range[64319](?), arg other[67750]:range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510067] "RVV" "temp"
    unknown tmp[419834] "maybe param" "temp"
    (419845 'move' tmp[419834](67765 call(67761 call (partial) isAmbiguous _mt[243] this[67755])))
    unknown call_tmp[618686] "expr temp" "maybe param" "maybe type" "temp"
    (618689 'move' call_tmp[618686](419847 call _cond_invalid tmp[419834]))
    if call_tmp[618686]
    {
      (419850 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556685] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556686] "maybe param" "temp"
    unknown call_tmp[618691] "expr temp" "maybe param" "maybe type" "temp"
    (618694 'move' call_tmp[618691](419835 call isTrue tmp[419834]))
    (556691 'move' tmp[556686](556689 call _cond_test call_tmp[618691]))
    if tmp[556686]
    {
      (556696 'move' tmp[556685](556693 '_paramFoldLogical' tmp[556686] 1))
    }
    {
      unknown tmp[556698] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618698] "expr temp" "maybe param" "maybe type" "temp"
      (618701 'move' call_tmp[618698](67771 call(67767 call (partial) isAmbiguous _mt[243] other[67750])))
      (556700 'move' tmp[556698](419839 call isTrue call_tmp[618698]))
      (556705 'move' tmp[556685](556702 '_paramFoldLogical' tmp[556686] tmp[556698]))
    }
    unknown call_tmp[618703] "expr temp" "maybe param" "maybe type" "temp"
    (618706 'move' call_tmp[618703](67777 call _cond_test tmp[556685]))
    if call_tmp[618703]
    {
      (510072 'move' ret[510067](510071 'deref' 0))
      gotoReturn _end_contains[510065] _end_contains[510065]
    }
    unknown call_tmp[618710] "expr temp" "maybe param" "maybe type" "temp"
    (618713 'move' call_tmp[618710](374480 call stridable _mt[243] this[67755]))
    unknown call_tmp[618715] "expr temp" "maybe param" "maybe type" "temp"
    (618718 'move' call_tmp[618715](67845 call _cond_test call_tmp[618710]))
    if call_tmp[618715]
    {
      unknown tmp[419855] "maybe param" "temp"
      unknown tmp[419876] "maybe param" "temp"
      unknown call_tmp[618722] "expr temp" "maybe param" "maybe type" "temp"
      (618725 'move' call_tmp[618722](374484 call stride _mt[243] this[67755]))
      (419887 'move' tmp[419876](67786 call > call_tmp[618722] 0))
      unknown call_tmp[618727] "expr temp" "maybe param" "maybe type" "temp"
      (618730 'move' call_tmp[618727](419889 call _cond_invalid tmp[419876]))
      if call_tmp[618727]
      {
        (419892 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556712] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556713] "maybe param" "temp"
      unknown call_tmp[618732] "expr temp" "maybe param" "maybe type" "temp"
      (618735 'move' call_tmp[618732](419877 call isTrue tmp[419876]))
      (556718 'move' tmp[556713](556716 call _cond_test call_tmp[618732]))
      if tmp[556713]
      {
        unknown tmp[556720] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618739] "expr temp" "maybe param" "maybe type" "temp"
        (618742 'move' call_tmp[618739](67789 call stride _mt[243] other[67750]))
        unknown call_tmp[618744] "expr temp" "maybe param" "maybe type" "temp"
        (618747 'move' call_tmp[618744](67793 call < call_tmp[618739] 0))
        (556722 'move' tmp[556720](419880 call isTrue call_tmp[618744]))
        (556727 'move' tmp[556712](556724 '_paramFoldLogical' tmp[556713] tmp[556720]))
      }
      {
        (556732 'move' tmp[556712](556729 '_paramFoldLogical' tmp[556713] 0))
      }
      (419866 'move' tmp[419855] tmp[556712])
      unknown call_tmp[618749] "expr temp" "maybe param" "maybe type" "temp"
      (618752 'move' call_tmp[618749](419868 call _cond_invalid tmp[419855]))
      if call_tmp[618749]
      {
        (419871 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556766] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556767] "maybe param" "temp"
      unknown call_tmp[618754] "expr temp" "maybe param" "maybe type" "temp"
      (618757 'move' call_tmp[618754](419856 call isTrue tmp[419855]))
      (556772 'move' tmp[556767](556770 call _cond_test call_tmp[618754]))
      if tmp[556767]
      {
        (556777 'move' tmp[556766](556774 '_paramFoldLogical' tmp[556767] 1))
      }
      {
        unknown tmp[419897] "maybe param" "temp"
        unknown call_tmp[618761] "expr temp" "maybe param" "maybe type" "temp"
        (618764 'move' call_tmp[618761](374488 call stride _mt[243] this[67755]))
        (419908 'move' tmp[419897](67799 call < call_tmp[618761] 0))
        unknown call_tmp[618766] "expr temp" "maybe param" "maybe type" "temp"
        (618769 'move' call_tmp[618766](419910 call _cond_invalid tmp[419897]))
        if call_tmp[618766]
        {
          (419913 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[556739] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[556740] "maybe param" "temp"
        unknown call_tmp[618771] "expr temp" "maybe param" "maybe type" "temp"
        (618774 'move' call_tmp[618771](419898 call isTrue tmp[419897]))
        (556745 'move' tmp[556740](556743 call _cond_test call_tmp[618771]))
        if tmp[556740]
        {
          unknown tmp[556747] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[618778] "expr temp" "maybe param" "maybe type" "temp"
          (618781 'move' call_tmp[618778](67802 call stride _mt[243] other[67750]))
          unknown call_tmp[618783] "expr temp" "maybe param" "maybe type" "temp"
          (618786 'move' call_tmp[618783](67806 call > call_tmp[618778] 0))
          (556749 'move' tmp[556747](419901 call isTrue call_tmp[618783]))
          (556754 'move' tmp[556739](556751 '_paramFoldLogical' tmp[556740] tmp[556747]))
        }
        {
          (556759 'move' tmp[556739](556756 '_paramFoldLogical' tmp[556740] 0))
        }
        unknown tmp[556779] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556781 'move' tmp[556779](419860 call isTrue tmp[556739]))
        (556786 'move' tmp[556766](556783 '_paramFoldLogical' tmp[556767] tmp[556779]))
      }
      unknown call_tmp[618788] "expr temp" "maybe param" "maybe type" "temp"
      (618791 'move' call_tmp[618788](67819 call _cond_test tmp[556766]))
      if call_tmp[618788]
      {
        unknown call_tmp[618793] "expr temp" "maybe param" "maybe type" "temp"
        (618796 'move' call_tmp[618793](67816 call _containsHelp this[67755] other[67750]))
        (510077 'move' ret[510067](510076 'deref' call_tmp[618793]))
        gotoReturn _end_contains[510065] _end_contains[510065]
      }
    }
    {
      unknown call_tmp[618800] "expr temp" "maybe param" "maybe type" "temp"
      (618803 'move' call_tmp[618800](67826 call stride _mt[243] other[67750]))
      unknown call_tmp[618805] "expr temp" "maybe param" "maybe type" "temp"
      (618808 'move' call_tmp[618805](67830 call < call_tmp[618800] 0))
      unknown call_tmp[618810] "expr temp" "maybe param" "maybe type" "temp"
      (618813 'move' call_tmp[618810](67839 call _cond_test call_tmp[618805]))
      if call_tmp[618810]
      {
        unknown call_tmp[618815] "expr temp" "maybe param" "maybe type" "temp"
        (618818 'move' call_tmp[618815](67836 call _containsHelp this[67755] other[67750]))
        (510082 'move' ret[510067](510081 'deref' call_tmp[618815]))
        gotoReturn _end_contains[510065] _end_contains[510065]
      }
    }
    unknown call_tmp[618820] "expr temp" "maybe param" "maybe type" "temp"
    (618823 'move' call_tmp[618820](67853 call this[67755] other[67750]))
    unknown call_tmp[618825] "expr temp" "maybe param" "maybe type" "temp"
    (618828 'move' call_tmp[618825](67854 call == other[67750] call_tmp[618820]))
    (510087 'move' ret[510067](510086 'deref' call_tmp[618825]))
    label _end_contains[510065]
    (510069 return ret[510067])
  }
  function range[64319](?).member[67867](arg _mt[67872]:_MT[238], arg this[67869]:range[64319](?) :
  range[64319](?), arg ind[67864] :
  (374500 call idxType _mt[243] this[67869])) : _unknown[51] "inline" "method"
  {
    unknown ret[510091] "RVV" "temp"
    unknown call_tmp[618832] "expr temp" "maybe param" "maybe type" "temp"
    (618835 'move' call_tmp[618832](67909 call + "range.member is deprecated - " "please use range.contains instead"))
    (67912 call compilerWarning call_tmp[618832])
    (475518 'end of statement')
    unknown call_tmp[618839] "expr temp" "maybe param" "maybe type" "temp"
    (618842 'move' call_tmp[618839](67923 call(67918 call (partial) contains _mt[243] this[67869]) ind[67864]))
    (510096 'move' ret[510091](510095 'deref' call_tmp[618839]))
    (510093 return ret[510091])
  }
  function range[64319](?).member[67938](arg _mt[67943]:_MT[238], arg this[67940]:range[64319](?) :
  range[64319](?), arg other[67935]:range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510100] "RVV" "temp"
    unknown call_tmp[618844] "expr temp" "maybe param" "maybe type" "temp"
    (618847 'move' call_tmp[618844](67948 call + "range.member is deprecated - " "please use range.contains instead"))
    (67951 call compilerWarning call_tmp[618844])
    (475520 'end of statement')
    unknown call_tmp[618851] "expr temp" "maybe param" "maybe type" "temp"
    (618854 'move' call_tmp[618851](67960 call(67955 call (partial) contains _mt[243] this[67940]) other[67935]))
    (510105 'move' ret[510100](510104 'deref' call_tmp[618851]))
    (510102 return ret[510100])
  }
  function _containsHelp[67974](in arg arg1[67971]:range[64319](?), in arg arg2[67980]:range[64319](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[510109] "RVV" "temp"
    unknown call_tmp[618858] "expr temp" "maybe param" "maybe type" "temp"
    (618861 'move' call_tmp[618858](67984 call stridable _mt[243] arg2[67980]))
    unknown call_tmp[618863] "expr temp" "maybe param" "maybe type" "temp"
    (618866 'move' call_tmp[618863](68013 call _cond_test call_tmp[618858]))
    if call_tmp[618863]
    {
      unknown call_tmp[618870] "expr temp" "maybe param" "maybe type" "temp"
      (618873 'move' call_tmp[618870](67988 call _stride _mt[243] arg2[67980]))
      unknown call_tmp[618877] "expr temp" "maybe param" "maybe type" "temp"
      (618880 'move' call_tmp[618877](67992 call _stride _mt[243] arg2[67980]))
      unknown call_tmp[618882] "expr temp" "maybe param" "maybe type" "temp"
      (618885 'move' call_tmp[618882](67995 call - call_tmp[618877]))
      (67997 call = call_tmp[618870] call_tmp[618882])
    }
    {
      unknown call_tmp[618889] "expr temp" "maybe param" "maybe type" "temp"
      (618892 'move' call_tmp[618889](68001 call _stride _mt[243] arg1[67971]))
      unknown call_tmp[618896] "expr temp" "maybe param" "maybe type" "temp"
      (618899 'move' call_tmp[618896](68005 call _stride _mt[243] arg1[67971]))
      unknown call_tmp[618901] "expr temp" "maybe param" "maybe type" "temp"
      (618904 'move' call_tmp[618901](68008 call - call_tmp[618896]))
      (68010 call = call_tmp[618889] call_tmp[618901])
    }
    unknown call_tmp[618906] "expr temp" "maybe param" "maybe type" "temp"
    (618909 'move' call_tmp[618906](68024 call arg1[67971] arg2[67980]))
    unknown call_tmp[618911] "expr temp" "maybe param" "maybe type" "temp"
    (618914 'move' call_tmp[618911](68025 call == arg2[67980] call_tmp[618906]))
    (510114 'move' ret[510109](510113 'deref' call_tmp[618911]))
    (510111 return ret[510109])
  }
  function ==[68040](arg r1[68037]:range[64319](?), arg r2[68046]:range[64319](?)) param : _unknown[51]
  {
    unknown ret[510118] "RVV" "param" "temp"
    (510123 'move' ret[510118](510122 'deref' 0))
    (510120 return ret[510118])
  }
  where {
    unknown call_tmp[618918] "expr temp" "maybe param" "maybe type" "temp"
    (618921 'move' call_tmp[618918](68050 call boundedType _mt[243] r1[68037]))
    unknown call_tmp[618925] "expr temp" "maybe param" "maybe type" "temp"
    (618928 'move' call_tmp[618925](68054 call boundedType _mt[243] r2[68046]))
    (68057 call != call_tmp[618918] call_tmp[618925])
  }
  function ==[68075](arg r1[68072]:range[64319](?), arg r2[68081]:range[64319](?)) : _unknown[51]
  {
    unknown ret[510127] "RVV" "temp"
    unknown call_tmp[618932] "expr temp" "maybe param" "maybe type" "temp"
    (618935 'move' call_tmp[618932](68100 call(68096 call (partial) isAmbiguous _mt[243] r1[68072])))
    unknown call_tmp[618939] "expr temp" "maybe param" "maybe type" "temp"
    (618942 'move' call_tmp[618939](68106 call(68102 call (partial) isAmbiguous _mt[243] r2[68081])))
    unknown call_tmp[618944] "expr temp" "maybe param" "maybe type" "temp"
    (618947 'move' call_tmp[618944](68107 call != call_tmp[618932] call_tmp[618939]))
    unknown call_tmp[618949] "expr temp" "maybe param" "maybe type" "temp"
    (618952 'move' call_tmp[618949](68112 call _cond_test call_tmp[618944]))
    if call_tmp[618949]
    {
      (510133 'move' ret[510127](510132 'coerce' 0 bool[10]))
      gotoReturn _end_==[510125] _end_==[510125]
    }
    unknown call_tmp[618956] "expr temp" "maybe param" "maybe type" "temp"
    (618959 'move' call_tmp[618956](68123 call(68119 call (partial) isAmbiguous _mt[243] r1[68072])))
    unknown call_tmp[618961] "expr temp" "maybe param" "maybe type" "temp"
    (618964 'move' call_tmp[618961](68131 call _cond_test call_tmp[618956]))
    if call_tmp[618961]
    {
      unknown call_tmp[618966] "expr temp" "maybe param" "maybe type" "temp"
      (618969 'move' call_tmp[618966](68128 call ident r1[68072] r2[68081]))
      (510139 'move' ret[510127](510138 'coerce' call_tmp[618966] bool[10]))
      gotoReturn _end_==[510125] _end_==[510125]
    }
    unknown call_tmp[618971] "expr temp" "maybe param" "maybe type" "temp"
    (618974 'move' call_tmp[618971](68139 call isBoundedRange r1[68072]))
    unknown call_tmp[618976] "expr temp" "maybe param" "maybe type" "temp"
    (618979 'move' call_tmp[618976](68313 call _cond_test call_tmp[618971]))
    if call_tmp[618976]
    {
      unknown call_tmp[618983] "maybe param" "maybe type" "temp"
      (618986 'move' call_tmp[618983](68141 call size _mt[243] r1[68072]))
      const len[68144] "dead at end of block" "const" "insert auto destroy"
      (541174 'init var' len[68144] call_tmp[618983])
      unknown call_tmp[618990] "maybe param" "maybe type" "temp"
      (618993 'move' call_tmp[618990](68148 call size _mt[243] r2[68081]))
      const l2[68151] "dead at end of block" "const" "insert auto destroy"
      (541176 'init var' l2[68151] call_tmp[618990])
      (68154 'end of statement')
      unknown call_tmp[618995] "expr temp" "maybe param" "maybe type" "temp"
      (618998 'move' call_tmp[618995](68158 call != len[68144] l2[68151]))
      unknown call_tmp[619000] "expr temp" "maybe param" "maybe type" "temp"
      (619003 'move' call_tmp[619000](68163 call _cond_test call_tmp[618995]))
      if call_tmp[619000]
      {
        (510145 'move' ret[510127](510144 'coerce' 0 bool[10]))
        gotoReturn _end_==[510125] _end_==[510125]
      }
      unknown call_tmp[619005] "expr temp" "maybe param" "maybe type" "temp"
      (619008 'move' call_tmp[619005](68170 call == len[68144] 0))
      unknown call_tmp[619010] "expr temp" "maybe param" "maybe type" "temp"
      (619013 'move' call_tmp[619010](68175 call _cond_test call_tmp[619005]))
      if call_tmp[619010]
      {
        (510151 'move' ret[510127](510150 'coerce' 1 bool[10]))
        gotoReturn _end_==[510125] _end_==[510125]
      }
      unknown call_tmp[619017] "expr temp" "maybe param" "maybe type" "temp"
      (619020 'move' call_tmp[619017](68183 call first _mt[243] r1[68072]))
      unknown call_tmp[619024] "expr temp" "maybe param" "maybe type" "temp"
      (619027 'move' call_tmp[619024](68187 call first _mt[243] r2[68081]))
      unknown call_tmp[619029] "expr temp" "maybe param" "maybe type" "temp"
      (619032 'move' call_tmp[619029](68190 call != call_tmp[619017] call_tmp[619024]))
      unknown call_tmp[619034] "expr temp" "maybe param" "maybe type" "temp"
      (619037 'move' call_tmp[619034](68195 call _cond_test call_tmp[619029]))
      if call_tmp[619034]
      {
        (510157 'move' ret[510127](510156 'coerce' 0 bool[10]))
        gotoReturn _end_==[510125] _end_==[510125]
      }
      unknown call_tmp[619039] "expr temp" "maybe param" "maybe type" "temp"
      (619042 'move' call_tmp[619039](68202 call == len[68144] 1))
      unknown call_tmp[619044] "expr temp" "maybe param" "maybe type" "temp"
      (619047 'move' call_tmp[619044](68207 call _cond_test call_tmp[619039]))
      if call_tmp[619044]
      {
        (510163 'move' ret[510127](510162 'coerce' 1 bool[10]))
        gotoReturn _end_==[510125] _end_==[510125]
      }
      unknown call_tmp[619051] "expr temp" "maybe param" "maybe type" "temp"
      (619054 'move' call_tmp[619051](68213 call stride _mt[243] r1[68072]))
      unknown call_tmp[619058] "expr temp" "maybe param" "maybe type" "temp"
      (619061 'move' call_tmp[619058](68217 call stride _mt[243] r2[68081]))
      unknown call_tmp[619063] "expr temp" "maybe param" "maybe type" "temp"
      (619066 'move' call_tmp[619063](68220 call != call_tmp[619051] call_tmp[619058]))
      unknown call_tmp[619068] "expr temp" "maybe param" "maybe type" "temp"
      (619071 'move' call_tmp[619068](68225 call _cond_test call_tmp[619063]))
      if call_tmp[619068]
      {
        (510169 'move' ret[510127](510168 'coerce' 0 bool[10]))
        gotoReturn _end_==[510125] _end_==[510125]
      }
      (510175 'move' ret[510127](510174 'coerce' 1 bool[10]))
      gotoReturn _end_==[510125] _end_==[510125]
    }
    {
      unknown call_tmp[619075] "expr temp" "maybe param" "maybe type" "temp"
      (619078 'move' call_tmp[619075](68234 call stride _mt[243] r1[68072]))
      unknown call_tmp[619082] "expr temp" "maybe param" "maybe type" "temp"
      (619085 'move' call_tmp[619082](68238 call stride _mt[243] r2[68081]))
      unknown call_tmp[619087] "expr temp" "maybe param" "maybe type" "temp"
      (619090 'move' call_tmp[619087](68241 call != call_tmp[619075] call_tmp[619082]))
      unknown call_tmp[619092] "expr temp" "maybe param" "maybe type" "temp"
      (619095 'move' call_tmp[619092](68246 call _cond_test call_tmp[619087]))
      if call_tmp[619092]
      {
        (510181 'move' ret[510127](510180 'coerce' 0 bool[10]))
        gotoReturn _end_==[510125] _end_==[510125]
      }
      unknown call_tmp[619099] "expr temp" "maybe param" "maybe type" "temp"
      (619102 'move' call_tmp[619099](68257 call(68253 call (partial) hasLowBound _mt[243] r1[68072])))
      unknown call_tmp[619104] "expr temp" "maybe param" "maybe type" "temp"
      (619107 'move' call_tmp[619104](68276 call _cond_test call_tmp[619099]))
      if call_tmp[619104]
      {
        unknown call_tmp[619111] "expr temp" "maybe param" "maybe type" "temp"
        (619114 'move' call_tmp[619111](68259 call alignedLow _mt[243] r1[68072]))
        unknown call_tmp[619118] "expr temp" "maybe param" "maybe type" "temp"
        (619121 'move' call_tmp[619118](68263 call alignedLow _mt[243] r2[68081]))
        unknown call_tmp[619123] "expr temp" "maybe param" "maybe type" "temp"
        (619126 'move' call_tmp[619123](68266 call != call_tmp[619111] call_tmp[619118]))
        unknown call_tmp[619128] "expr temp" "maybe param" "maybe type" "temp"
        (619131 'move' call_tmp[619128](68271 call _cond_test call_tmp[619123]))
        if call_tmp[619128]
        {
          (510187 'move' ret[510127](510186 'coerce' 0 bool[10]))
          gotoReturn _end_==[510125] _end_==[510125]
        }
      }
      unknown call_tmp[619135] "expr temp" "maybe param" "maybe type" "temp"
      (619138 'move' call_tmp[619135](68286 call(68282 call (partial) hasHighBound _mt[243] r1[68072])))
      unknown call_tmp[619140] "expr temp" "maybe param" "maybe type" "temp"
      (619143 'move' call_tmp[619140](68305 call _cond_test call_tmp[619135]))
      if call_tmp[619140]
      {
        unknown call_tmp[619147] "expr temp" "maybe param" "maybe type" "temp"
        (619150 'move' call_tmp[619147](68288 call alignedHigh _mt[243] r1[68072]))
        unknown call_tmp[619154] "expr temp" "maybe param" "maybe type" "temp"
        (619157 'move' call_tmp[619154](68292 call alignedHigh _mt[243] r2[68081]))
        unknown call_tmp[619159] "expr temp" "maybe param" "maybe type" "temp"
        (619162 'move' call_tmp[619159](68295 call != call_tmp[619147] call_tmp[619154]))
        unknown call_tmp[619164] "expr temp" "maybe param" "maybe type" "temp"
        (619167 'move' call_tmp[619164](68300 call _cond_test call_tmp[619159]))
        if call_tmp[619164]
        {
          (510193 'move' ret[510127](510192 'coerce' 0 bool[10]))
          gotoReturn _end_==[510125] _end_==[510125]
        }
      }
      (510199 'move' ret[510127](510198 'coerce' 1 bool[10]))
      gotoReturn _end_==[510125] _end_==[510125]
    }
    label _end_==[510125]
    (510129 return ret[510127])
  }
  where {
    unknown call_tmp[619171] "expr temp" "maybe param" "maybe type" "temp"
    (619174 'move' call_tmp[619171](68086 call boundedType _mt[243] r1[68072]))
    unknown call_tmp[619178] "expr temp" "maybe param" "maybe type" "temp"
    (619181 'move' call_tmp[619178](68090 call boundedType _mt[243] r2[68081]))
    (68093 call == call_tmp[619171] call_tmp[619178])
  }
  { scopeless type
    bool[10]
  }
  function !=[68330](arg r1[68327]:range[64319](?), arg r2[68336]:range[64319](?)) : _unknown[51]
  {
    unknown ret[510205] "RVV" "temp"
    unknown call_tmp[619183] "expr temp" "maybe param" "maybe type" "temp"
    (619186 'move' call_tmp[619183](68341 call == r1[68327] r2[68336]))
    unknown call_tmp[619188] "expr temp" "maybe param" "maybe type" "temp"
    (619191 'move' call_tmp[619188](68343 call ! call_tmp[619183]))
    (510210 'move' ret[510205](510209 'deref' call_tmp[619188]))
    (510207 return ret[510205])
  }
  function ident[68359](arg r1[68356]:range[64319](?), arg r2[68365]:range[64319](?)) : _unknown[51]
  {
    unknown ret[510214] "RVV" "temp"
    unknown call_tmp[619195] "expr temp" "maybe param" "maybe type" "temp"
    (619198 'move' call_tmp[619195](68403 call _low _mt[243] r1[68356]))
    unknown call_tmp[619202] "expr temp" "maybe param" "maybe type" "temp"
    (619205 'move' call_tmp[619202](68407 call _low _mt[243] r2[68365]))
    unknown call_tmp[619207] "expr temp" "maybe param" "maybe type" "temp"
    (619210 'move' call_tmp[619207](68410 call != call_tmp[619195] call_tmp[619202]))
    unknown call_tmp[619212] "expr temp" "maybe param" "maybe type" "temp"
    (619215 'move' call_tmp[619212](68415 call _cond_test call_tmp[619207]))
    if call_tmp[619212]
    {
      (510219 'move' ret[510214](510218 'deref' 0))
      gotoReturn _end_ident[510212] _end_ident[510212]
    }
    unknown call_tmp[619219] "expr temp" "maybe param" "maybe type" "temp"
    (619222 'move' call_tmp[619219](68422 call _high _mt[243] r1[68356]))
    unknown call_tmp[619226] "expr temp" "maybe param" "maybe type" "temp"
    (619229 'move' call_tmp[619226](68426 call _high _mt[243] r2[68365]))
    unknown call_tmp[619231] "expr temp" "maybe param" "maybe type" "temp"
    (619234 'move' call_tmp[619231](68429 call != call_tmp[619219] call_tmp[619226]))
    unknown call_tmp[619236] "expr temp" "maybe param" "maybe type" "temp"
    (619239 'move' call_tmp[619236](68434 call _cond_test call_tmp[619231]))
    if call_tmp[619236]
    {
      (510224 'move' ret[510214](510223 'deref' 0))
      gotoReturn _end_ident[510212] _end_ident[510212]
    }
    unknown call_tmp[619243] "expr temp" "maybe param" "maybe type" "temp"
    (619246 'move' call_tmp[619243](68440 call stridable _mt[243] r1[68356]))
    unknown call_tmp[619248] "expr temp" "maybe param" "maybe type" "temp"
    (619251 'move' call_tmp[619248](68511 call _cond_test call_tmp[619243]))
    if call_tmp[619248]
    {
      unknown call_tmp[619255] "expr temp" "maybe param" "maybe type" "temp"
      (619258 'move' call_tmp[619255](68444 call stridable _mt[243] r2[68365]))
      unknown call_tmp[619260] "expr temp" "maybe param" "maybe type" "temp"
      (619263 'move' call_tmp[619260](68506 call _cond_test call_tmp[619255]))
      if call_tmp[619260]
      {
        unknown call_tmp[619267] "expr temp" "maybe param" "maybe type" "temp"
        (619270 'move' call_tmp[619267](68448 call _stride _mt[243] r1[68356]))
        unknown call_tmp[619274] "expr temp" "maybe param" "maybe type" "temp"
        (619277 'move' call_tmp[619274](68452 call _stride _mt[243] r2[68365]))
        unknown call_tmp[619279] "expr temp" "maybe param" "maybe type" "temp"
        (619282 'move' call_tmp[619279](68455 call != call_tmp[619267] call_tmp[619274]))
        unknown call_tmp[619284] "expr temp" "maybe param" "maybe type" "temp"
        (619287 'move' call_tmp[619284](68460 call _cond_test call_tmp[619279]))
        if call_tmp[619284]
        {
          (510229 'move' ret[510214](510228 'deref' 0))
          gotoReturn _end_ident[510212] _end_ident[510212]
        }
        unknown call_tmp[619291] "expr temp" "maybe param" "maybe type" "temp"
        (619294 'move' call_tmp[619291](68467 call _alignment _mt[243] r1[68356]))
        unknown call_tmp[619298] "expr temp" "maybe param" "maybe type" "temp"
        (619301 'move' call_tmp[619298](68471 call _alignment _mt[243] r2[68365]))
        unknown call_tmp[619303] "expr temp" "maybe param" "maybe type" "temp"
        (619306 'move' call_tmp[619303](68474 call != call_tmp[619291] call_tmp[619298]))
        unknown call_tmp[619308] "expr temp" "maybe param" "maybe type" "temp"
        (619311 'move' call_tmp[619308](68479 call _cond_test call_tmp[619303]))
        if call_tmp[619308]
        {
          (510234 'move' ret[510214](510233 'deref' 0))
          gotoReturn _end_ident[510212] _end_ident[510212]
        }
        unknown call_tmp[619315] "expr temp" "maybe param" "maybe type" "temp"
        (619318 'move' call_tmp[619315](68485 call _aligned _mt[243] r1[68356]))
        unknown call_tmp[619322] "expr temp" "maybe param" "maybe type" "temp"
        (619325 'move' call_tmp[619322](68489 call _aligned _mt[243] r2[68365]))
        unknown call_tmp[619327] "expr temp" "maybe param" "maybe type" "temp"
        (619330 'move' call_tmp[619327](68492 call != call_tmp[619315] call_tmp[619322]))
        unknown call_tmp[619332] "expr temp" "maybe param" "maybe type" "temp"
        (619335 'move' call_tmp[619332](68497 call _cond_test call_tmp[619327]))
        if call_tmp[619332]
        {
          (510239 'move' ret[510214](510238 'deref' 0))
          gotoReturn _end_ident[510212] _end_ident[510212]
        }
      }
      {
        (510244 'move' ret[510214](510243 'deref' 0))
        gotoReturn _end_ident[510212] _end_ident[510212]
      }
    }
    (510249 'move' ret[510214](510248 'deref' 1))
    label _end_ident[510212]
    (510216 return ret[510214])
  }
  where {
    unknown tmp[419918] "maybe param" "temp"
    unknown tmp[419939] "maybe param" "temp"
    unknown call_tmp[619339] "expr temp" "maybe param" "maybe type" "temp"
    (619342 'move' call_tmp[619339](68369 call idxType _mt[243] r1[68356]))
    unknown call_tmp[619346] "expr temp" "maybe param" "maybe type" "temp"
    (619349 'move' call_tmp[619346](68373 call idxType _mt[243] r2[68365]))
    (419950 'move' tmp[419939](68376 call == call_tmp[619339] call_tmp[619346]))
    unknown call_tmp[619351] "expr temp" "maybe param" "maybe type" "temp"
    (619354 'move' call_tmp[619351](419952 call _cond_invalid tmp[419939]))
    if call_tmp[619351]
    {
      (419955 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556793] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556794] "maybe param" "temp"
    unknown call_tmp[619356] "expr temp" "maybe param" "maybe type" "temp"
    (619359 'move' call_tmp[619356](419940 call isTrue tmp[419939]))
    (556799 'move' tmp[556794](556797 call _cond_test call_tmp[619356]))
    if tmp[556794]
    {
      unknown tmp[556801] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619363] "expr temp" "maybe param" "maybe type" "temp"
      (619366 'move' call_tmp[619363](68379 call boundedType _mt[243] r1[68356]))
      unknown call_tmp[619370] "expr temp" "maybe param" "maybe type" "temp"
      (619373 'move' call_tmp[619370](68383 call boundedType _mt[243] r2[68365]))
      unknown call_tmp[619375] "expr temp" "maybe param" "maybe type" "temp"
      (619378 'move' call_tmp[619375](68386 call == call_tmp[619363] call_tmp[619370]))
      (556803 'move' tmp[556801](419943 call isTrue call_tmp[619375]))
      (556808 'move' tmp[556793](556805 '_paramFoldLogical' tmp[556794] tmp[556801]))
    }
    {
      (556813 'move' tmp[556793](556810 '_paramFoldLogical' tmp[556794] 0))
    }
    (419929 'move' tmp[419918] tmp[556793])
    unknown call_tmp[619380] "expr temp" "maybe param" "maybe type" "temp"
    (619383 'move' call_tmp[619380](419931 call _cond_invalid tmp[419918]))
    if call_tmp[619380]
    {
      (419934 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556820] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556821] "maybe param" "temp"
    unknown call_tmp[619385] "expr temp" "maybe param" "maybe type" "temp"
    (619388 'move' call_tmp[619385](419919 call isTrue tmp[419918]))
    (556826 'move' tmp[556821](556824 call _cond_test call_tmp[619385]))
    if tmp[556821]
    {
      unknown tmp[556828] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619392] "expr temp" "maybe param" "maybe type" "temp"
      (619395 'move' call_tmp[619392](68391 call stridable _mt[243] r1[68356]))
      unknown call_tmp[619399] "expr temp" "maybe param" "maybe type" "temp"
      (619402 'move' call_tmp[619399](68395 call stridable _mt[243] r2[68365]))
      unknown call_tmp[619404] "expr temp" "maybe param" "maybe type" "temp"
      (619407 'move' call_tmp[619404](68398 call == call_tmp[619392] call_tmp[619399]))
      (556830 'move' tmp[556828](419922 call isTrue call_tmp[619404]))
      (556835 'move' tmp[556820](556832 '_paramFoldLogical' tmp[556821] tmp[556828]))
    }
    {
      (556840 'move' tmp[556820](556837 '_paramFoldLogical' tmp[556821] 0))
    }
    (748433 call chpl_statementLevelSymbol tmp[556820])
  }
  function ident[68530](arg r1[68527]:range[64319](?), arg r2[68536]:range[64319](?)) param : _unknown[51] "no doc"
  {
    unknown ret[510253] "RVV" "param" "temp"
    (510258 'move' ret[510253](510257 'deref' 0))
    (510255 return ret[510253])
  }
  function range[64319](?).safeCast[68555](arg _mt[68560]:_MT[238], arg this[68557]:range[64319](?) :
  range[64319](?), arg t[68552]:range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510262] "RVV" "temp"
    unknown tmp[68563] "dead at end of block" "insert auto destroy"
    (541178 'default init var' tmp[68563] t[68552])
    (68566 'end of statement')
    unknown call_tmp[619411] "expr temp" "maybe param" "maybe type" "temp"
    (619414 'move' call_tmp[619411](68569 call boundedType _mt[243] tmp[68563]))
    unknown call_tmp[619418] "expr temp" "maybe param" "maybe type" "temp"
    (619421 'move' call_tmp[619418](68573 call boundedType _mt[243] this[68557]))
    unknown call_tmp[619423] "expr temp" "maybe param" "maybe type" "temp"
    (619426 'move' call_tmp[619423](68576 call != call_tmp[619411] call_tmp[619418]))
    unknown call_tmp[619428] "expr temp" "maybe param" "maybe type" "temp"
    (619431 'move' call_tmp[619428](68631 call _cond_test call_tmp[619423]))
    if call_tmp[619428]
    {
      unknown call_tmp[619435] "expr temp" "maybe param" "maybe type" "temp"
      (619438 'move' call_tmp[619435](68598 call boundedType _mt[243] this[68557]))
      unknown call_tmp[619440] "expr temp" "maybe param" "maybe type" "temp"
      (619443 'move' call_tmp[619440](68602 call _cast string[26] call_tmp[619435]))
      unknown call_tmp[619447] "expr temp" "maybe param" "maybe type" "temp"
      (619450 'move' call_tmp[619447](68622 call boundedType _mt[243] tmp[68563]))
      unknown call_tmp[619452] "expr temp" "maybe param" "maybe type" "temp"
      (619455 'move' call_tmp[619452](68626 call _cast string[26] call_tmp[619447]))
      (68628 call compilerError "cannot cast range from " call_tmp[619440] " to " call_tmp[619452])
      (475547 'end of statement' tmp[68563])
    }
    unknown call_tmp[619459] "expr temp" "maybe param" "maybe type" "temp"
    (619462 'move' call_tmp[619459](68636 call stridable _mt[243] tmp[68563]))
    unknown call_tmp[619464] "expr temp" "maybe param" "maybe type" "temp"
    (619467 'move' call_tmp[619464](68725 call _cond_test call_tmp[619459]))
    if call_tmp[619464]
    {
      unknown call_tmp[619471] "expr temp" "maybe param" "maybe type" "temp"
      (619474 'move' call_tmp[619471](68640 call _stride _mt[243] tmp[68563]))
      unknown call_tmp[619478] "expr temp" "maybe param" "maybe type" "temp"
      (619481 'move' call_tmp[619478](68644 call stride _mt[243] this[68557]))
      (68647 call = call_tmp[619471] call_tmp[619478])
      (475549 'end of statement' tmp[68563])
      unknown call_tmp[619485] "expr temp" "maybe param" "maybe type" "temp"
      (619488 'move' call_tmp[619485](68652 call _alignment _mt[243] tmp[68563]))
      unknown call_tmp[619492] "expr temp" "maybe param" "maybe type" "temp"
      (619495 'move' call_tmp[619492](68657 call alignment _mt[243] this[68557]))
      unknown call_tmp[619497] "expr temp" "maybe param" "maybe type" "temp"
      (619500 'move' call_tmp[619497](68661 call chpl__idxToInt call_tmp[619492]))
      unknown call_tmp[619506] "expr temp" "maybe param" "maybe type" "temp"
      (619509 'move' call_tmp[619506](68668 call intIdxType _mt[243] tmp[68563]))
      unknown call_tmp[619511] "expr temp" "maybe param" "maybe type" "temp"
      (619514 'move' call_tmp[619511](68672 call(68662 call (partial) safeCast _mt[243] call_tmp[619497]) call_tmp[619506]))
      (68673 call = call_tmp[619485] call_tmp[619511])
      (475551 'end of statement' tmp[68563] tmp[68563])
      unknown call_tmp[619518] "expr temp" "maybe param" "maybe type" "temp"
      (619521 'move' call_tmp[619518](68677 call _aligned _mt[243] tmp[68563]))
      unknown call_tmp[619525] "expr temp" "maybe param" "maybe type" "temp"
      (619528 'move' call_tmp[619525](68681 call aligned _mt[243] this[68557]))
      (68684 call = call_tmp[619518] call_tmp[619525])
      (475554 'end of statement' tmp[68563])
    }
    {
      unknown call_tmp[619532] "expr temp" "maybe param" "maybe type" "temp"
      (619535 'move' call_tmp[619532](68688 call stride _mt[243] this[68557]))
      unknown call_tmp[619537] "expr temp" "maybe param" "maybe type" "temp"
      (619540 'move' call_tmp[619537](68692 call != call_tmp[619532] 1))
      unknown call_tmp[619542] "expr temp" "maybe param" "maybe type" "temp"
      (619545 'move' call_tmp[619542](68721 call _cond_test call_tmp[619537]))
      if call_tmp[619542]
      {
        (68718 call safeCastCheckHalt module=[255] HaltWrappers[210085] "illegal safeCast from non-unit stride range to unstridable range")
        (357756 'referenced modules list' HaltWrappers[210085])
      }
    }
    unknown call_tmp[619549] "expr temp" "maybe param" "maybe type" "temp"
    (619552 'move' call_tmp[619549](68731 call _low _mt[243] tmp[68563]))
    unknown call_tmp[619556] "expr temp" "maybe param" "maybe type" "temp"
    (619559 'move' call_tmp[619556](68735 call _low _mt[243] this[68557]))
    unknown call_tmp[619565] "expr temp" "maybe param" "maybe type" "temp"
    (619568 'move' call_tmp[619565](68742 call intIdxType _mt[243] tmp[68563]))
    unknown call_tmp[619570] "expr temp" "maybe param" "maybe type" "temp"
    (619573 'move' call_tmp[619570](68746 call(68738 call (partial) safeCast _mt[243] call_tmp[619556]) call_tmp[619565]))
    (68747 call = call_tmp[619549] call_tmp[619570])
    (475557 'end of statement' tmp[68563] tmp[68563])
    unknown call_tmp[619577] "expr temp" "maybe param" "maybe type" "temp"
    (619580 'move' call_tmp[619577](68751 call _high _mt[243] tmp[68563]))
    unknown call_tmp[619584] "expr temp" "maybe param" "maybe type" "temp"
    (619587 'move' call_tmp[619584](68755 call _high _mt[243] this[68557]))
    unknown call_tmp[619593] "expr temp" "maybe param" "maybe type" "temp"
    (619596 'move' call_tmp[619593](68762 call intIdxType _mt[243] tmp[68563]))
    unknown call_tmp[619598] "expr temp" "maybe param" "maybe type" "temp"
    (619601 'move' call_tmp[619598](68766 call(68758 call (partial) safeCast _mt[243] call_tmp[619584]) call_tmp[619593]))
    (68767 call = call_tmp[619577] call_tmp[619598])
    (475560 'end of statement' tmp[68563] tmp[68563])
    (510267 'move' ret[510262](510266 'deref' tmp[68563]))
    gotoReturn _end_safeCast[510260] _end_safeCast[510260]
    (475563 'end of statement' tmp[68563])
    label _end_safeCast[510260]
    (510264 return ret[510262])
  }
  function _cast[68784](arg t[68781]:range[64319](?), arg r[68790]:range[64319](?)) : _unknown[51] "no doc"
  {
    unknown ret[510273] "RVV" "temp"
    unknown tmp[68794] "dead at end of block" "insert auto destroy"
    (541180 'default init var' tmp[68794] t[68781])
    (68797 'end of statement')
    unknown call_tmp[619605] "expr temp" "maybe param" "maybe type" "temp"
    (619608 'move' call_tmp[619605](68800 call boundedType _mt[243] tmp[68794]))
    unknown call_tmp[619612] "expr temp" "maybe param" "maybe type" "temp"
    (619615 'move' call_tmp[619612](68804 call boundedType _mt[243] r[68790]))
    unknown call_tmp[619617] "expr temp" "maybe param" "maybe type" "temp"
    (619620 'move' call_tmp[619617](68807 call != call_tmp[619605] call_tmp[619612]))
    unknown call_tmp[619622] "expr temp" "maybe param" "maybe type" "temp"
    (619625 'move' call_tmp[619622](68830 call _cond_test call_tmp[619617]))
    if call_tmp[619622]
    {
      unknown call_tmp[619629] "expr temp" "maybe param" "maybe type" "temp"
      (619632 'move' call_tmp[619629](68813 call boundedType _mt[243] r[68790]))
      unknown call_tmp[619634] "expr temp" "maybe param" "maybe type" "temp"
      (619637 'move' call_tmp[619634](68817 call _cast string[26] call_tmp[619629]))
      unknown call_tmp[619641] "expr temp" "maybe param" "maybe type" "temp"
      (619644 'move' call_tmp[619641](68821 call boundedType _mt[243] tmp[68794]))
      unknown call_tmp[619646] "expr temp" "maybe param" "maybe type" "temp"
      (619649 'move' call_tmp[619646](68825 call _cast string[26] call_tmp[619641]))
      (68827 call compilerError "cannot cast range from " call_tmp[619634] " to " call_tmp[619646])
      (475565 'end of statement' tmp[68794])
    }
    unknown call_tmp[619653] "expr temp" "maybe param" "maybe type" "temp"
    (619656 'move' call_tmp[619653](68835 call stridable _mt[243] tmp[68794]))
    unknown call_tmp[619658] "expr temp" "maybe param" "maybe type" "temp"
    (619661 'move' call_tmp[619658](68878 call _cond_test call_tmp[619653]))
    if call_tmp[619658]
    {
      unknown call_tmp[619665] "expr temp" "maybe param" "maybe type" "temp"
      (619668 'move' call_tmp[619665](68839 call _stride _mt[243] tmp[68794]))
      unknown call_tmp[619672] "expr temp" "maybe param" "maybe type" "temp"
      (619675 'move' call_tmp[619672](68843 call _stride _mt[243] r[68790]))
      (68846 call = call_tmp[619665] call_tmp[619672])
      (475567 'end of statement' tmp[68794])
      unknown call_tmp[619679] "expr temp" "maybe param" "maybe type" "temp"
      (619682 'move' call_tmp[619679](68851 call _alignment _mt[243] tmp[68794]))
      unknown call_tmp[619686] "expr temp" "maybe param" "maybe type" "temp"
      (619689 'move' call_tmp[619686](68859 call intIdxType _mt[243] tmp[68794]))
      unknown call_tmp[619693] "expr temp" "maybe param" "maybe type" "temp"
      (619696 'move' call_tmp[619693](68855 call _alignment _mt[243] r[68790]))
      unknown call_tmp[619698] "expr temp" "maybe param" "maybe type" "temp"
      (619701 'move' call_tmp[619698](68862 call _cast call_tmp[619686] call_tmp[619693]))
      (68864 call = call_tmp[619679] call_tmp[619698])
      (475569 'end of statement' tmp[68794] tmp[68794])
      unknown call_tmp[619705] "expr temp" "maybe param" "maybe type" "temp"
      (619708 'move' call_tmp[619705](68868 call _aligned _mt[243] tmp[68794]))
      unknown call_tmp[619712] "expr temp" "maybe param" "maybe type" "temp"
      (619715 'move' call_tmp[619712](68872 call _aligned _mt[243] r[68790]))
      (68875 call = call_tmp[619705] call_tmp[619712])
      (475572 'end of statement' tmp[68794])
    }
    unknown call_tmp[619719] "expr temp" "maybe param" "maybe type" "temp"
    (619722 'move' call_tmp[619719](68883 call _low _mt[243] tmp[68794]))
    unknown call_tmp[619726] "expr temp" "maybe param" "maybe type" "temp"
    (619729 'move' call_tmp[619726](68891 call intIdxType _mt[243] tmp[68794]))
    unknown call_tmp[619733] "expr temp" "maybe param" "maybe type" "temp"
    (619736 'move' call_tmp[619733](68887 call low _mt[243] r[68790]))
    unknown call_tmp[619738] "expr temp" "maybe param" "maybe type" "temp"
    (619741 'move' call_tmp[619738](68894 call _cast call_tmp[619726] call_tmp[619733]))
    (68896 call = call_tmp[619719] call_tmp[619738])
    (475574 'end of statement' tmp[68794] tmp[68794])
    unknown call_tmp[619745] "expr temp" "maybe param" "maybe type" "temp"
    (619748 'move' call_tmp[619745](68900 call _high _mt[243] tmp[68794]))
    unknown call_tmp[619752] "expr temp" "maybe param" "maybe type" "temp"
    (619755 'move' call_tmp[619752](68908 call intIdxType _mt[243] tmp[68794]))
    unknown call_tmp[619759] "expr temp" "maybe param" "maybe type" "temp"
    (619762 'move' call_tmp[619759](68904 call high _mt[243] r[68790]))
    unknown call_tmp[619764] "expr temp" "maybe param" "maybe type" "temp"
    (619767 'move' call_tmp[619764](68911 call _cast call_tmp[619752] call_tmp[619759]))
    (68913 call = call_tmp[619745] call_tmp[619764])
    (475577 'end of statement' tmp[68794] tmp[68794])
    (510278 'move' ret[510273](510277 'deref' tmp[68794]))
    gotoReturn _end__cast[510271] _end__cast[510271]
    (475580 'end of statement' tmp[68794])
    label _end__cast[510271]
    (510275 return ret[510273])
  }
  function range[64319](?).boundsCheck[68936](arg _mt[68941]:_MT[238], arg this[68938]:range[64319](?) :
  range[64319](?), arg other[68933]:range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510284] "RVV" "temp"
    unknown tmp[419960] "maybe param" "temp"
    (419971 'move' tmp[419960](68955 call(68951 call (partial) isAmbiguous _mt[243] this[68938])))
    unknown call_tmp[619771] "expr temp" "maybe param" "maybe type" "temp"
    (619774 'move' call_tmp[619771](419973 call _cond_invalid tmp[419960]))
    if call_tmp[619771]
    {
      (419976 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556847] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556848] "maybe param" "temp"
    unknown call_tmp[619776] "expr temp" "maybe param" "maybe type" "temp"
    (619779 'move' call_tmp[619776](419961 call isTrue tmp[419960]))
    (556853 'move' tmp[556848](556851 call _cond_test call_tmp[619776]))
    if tmp[556848]
    {
      (556858 'move' tmp[556847](556855 '_paramFoldLogical' tmp[556848] 1))
    }
    {
      unknown tmp[556860] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619783] "expr temp" "maybe param" "maybe type" "temp"
      (619786 'move' call_tmp[619783](68961 call(68957 call (partial) isAmbiguous _mt[243] other[68933])))
      (556862 'move' tmp[556860](419965 call isTrue call_tmp[619783]))
      (556867 'move' tmp[556847](556864 '_paramFoldLogical' tmp[556848] tmp[556860]))
    }
    unknown call_tmp[619788] "expr temp" "maybe param" "maybe type" "temp"
    (619791 'move' call_tmp[619788](68967 call _cond_test tmp[556847]))
    if call_tmp[619788]
    {
      (510289 'move' ret[510284](510288 'deref' 0))
      gotoReturn _end_boundsCheck[510282] _end_boundsCheck[510282]
    }
    (510294 'move' ret[510284](510293 'deref' 1))
    label _end_boundsCheck[510282]
    (510286 return ret[510284])
  }
  where {
    unknown call_tmp[619793] "expr temp" "maybe param" "maybe type" "temp"
    (619796 'move' call_tmp[619793](455867 'query' other[68933] 2))
    (68948 call == call_tmp[619793] boundedNone[64214])
  }
  function range[64319](?).boundsCheck[68994](arg _mt[68999]:_MT[238], arg this[68996]:range[64319](?) :
  range[64319](?), arg other[68991]:range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510298] "RVV" "temp"
    unknown tmp[419981] "maybe param" "temp"
    (419992 'move' tmp[419981](69006 call(69002 call (partial) isAmbiguous _mt[243] this[68996])))
    unknown call_tmp[619800] "expr temp" "maybe param" "maybe type" "temp"
    (619803 'move' call_tmp[619800](419994 call _cond_invalid tmp[419981]))
    if call_tmp[619800]
    {
      (419997 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556874] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556875] "maybe param" "temp"
    unknown call_tmp[619805] "expr temp" "maybe param" "maybe type" "temp"
    (619808 'move' call_tmp[619805](419982 call isTrue tmp[419981]))
    (556880 'move' tmp[556875](556878 call _cond_test call_tmp[619805]))
    if tmp[556875]
    {
      (556885 'move' tmp[556874](556882 '_paramFoldLogical' tmp[556875] 1))
    }
    {
      unknown tmp[556887] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619812] "expr temp" "maybe param" "maybe type" "temp"
      (619815 'move' call_tmp[619812](69012 call(69008 call (partial) isAmbiguous _mt[243] other[68991])))
      (556889 'move' tmp[556887](419986 call isTrue call_tmp[619812]))
      (556894 'move' tmp[556874](556891 '_paramFoldLogical' tmp[556875] tmp[556887]))
    }
    unknown call_tmp[619817] "expr temp" "maybe param" "maybe type" "temp"
    (619820 'move' call_tmp[619817](69018 call _cond_test tmp[556874]))
    if call_tmp[619817]
    {
      (510303 'move' ret[510298](510302 'deref' 0))
      gotoReturn _end_boundsCheck[510296] _end_boundsCheck[510296]
    }
    unknown tmp[420002] "maybe param" "temp"
    (420013 'move' tmp[420002](455886 'query' other[68991] 3))
    unknown call_tmp[619822] "expr temp" "maybe param" "maybe type" "temp"
    (619825 'move' call_tmp[619822](420015 call _cond_invalid tmp[420002]))
    if call_tmp[619822]
    {
      (420018 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown boundedOther[69077] "dead at end of block" "insert auto destroy"
    unknown tmp[556901] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556902] "maybe param" "temp"
    unknown call_tmp[619827] "expr temp" "maybe param" "maybe type" "temp"
    (619830 'move' call_tmp[619827](420003 call isTrue tmp[420002]))
    (556907 'move' tmp[556902](556905 call _cond_test call_tmp[619827]))
    if tmp[556902]
    {
      (556912 'move' tmp[556901](556909 '_paramFoldLogical' tmp[556902] 1))
    }
    {
      unknown tmp[556914] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619834] "expr temp" "maybe param" "maybe type" "temp"
      (619837 'move' call_tmp[619834](69034 call stridable _mt[243] this[68996]))
      (556916 'move' tmp[556914](420007 call isTrue call_tmp[619834]))
      (556921 'move' tmp[556901](556918 '_paramFoldLogical' tmp[556902] tmp[556914]))
    }
    unknown tmp[556928] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556929] "maybe param" "temp"
    unknown call_tmp[619841] "expr temp" "maybe param" "maybe type" "temp"
    (619844 'move' call_tmp[619841](69044 call(69040 call (partial) hasLowBound _mt[243] other[68991])))
    (556934 'move' tmp[556929](556932 call _cond_test call_tmp[619841]))
    if tmp[556929]
    {
      unknown tmp[556936] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556938 'move' tmp[556936](69046 call low _mt[243] other[68991]))
      (556943 'move' tmp[556928](556940 '_paramFoldLogical' tmp[556929] tmp[556936]))
    }
    {
      unknown tmp[556945] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556947 'move' tmp[556945](374548 call low _mt[243] this[68996]))
      (556952 'move' tmp[556928](556949 '_paramFoldLogical' tmp[556929] tmp[556945]))
    }
    unknown tmp[556959] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556960] "maybe param" "temp"
    unknown call_tmp[619852] "expr temp" "maybe param" "maybe type" "temp"
    (619855 'move' call_tmp[619852](69058 call(69054 call (partial) hasHighBound _mt[243] other[68991])))
    (556965 'move' tmp[556960](556963 call _cond_test call_tmp[619852]))
    if tmp[556960]
    {
      unknown tmp[556967] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556969 'move' tmp[556967](69060 call high _mt[243] other[68991]))
      (556974 'move' tmp[556959](556971 '_paramFoldLogical' tmp[556960] tmp[556967]))
    }
    {
      unknown tmp[556976] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556978 'move' tmp[556976](374552 call high _mt[243] this[68996]))
      (556983 'move' tmp[556959](556980 '_paramFoldLogical' tmp[556960] tmp[556976]))
    }
    unknown call_tmp[619863] "expr temp" "maybe param" "maybe type" "temp"
    (619866 'move' call_tmp[619863](374543 call idxType _mt[243] this[68996]))
    unknown call_tmp[619870] "expr temp" "maybe param" "maybe type" "temp"
    (619873 'move' call_tmp[619870](69068 call stride _mt[243] other[68991]))
    unknown call_tmp[619877] "expr temp" "maybe param" "maybe type" "temp"
    (619880 'move' call_tmp[619877](69072 call alignment _mt[243] other[68991]))
    unknown call_tmp[619882] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (619885 'move' call_tmp[619882](747964 'new' range[64319](?) call_tmp[619863] bounded[64208] tmp[556901] tmp[556928] tmp[556959] call_tmp[619870] call_tmp[619877] 1))
    (541182 'init var' boundedOther[69077] call_tmp[619882])
    (69080 'end of statement')
    unknown tmp[420023] "maybe param" "temp"
    unknown call_tmp[619889] "expr temp" "maybe param" "maybe type" "temp"
    (619892 'move' call_tmp[619889](69082 call size _mt[243] boundedOther[69077]))
    (420034 'move' tmp[420023](69086 call == call_tmp[619889] 0))
    unknown call_tmp[619894] "expr temp" "maybe param" "maybe type" "temp"
    (619897 'move' call_tmp[619894](420036 call _cond_invalid tmp[420023]))
    if call_tmp[619894]
    {
      (420039 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556990] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556991] "maybe param" "temp"
    unknown call_tmp[619899] "expr temp" "maybe param" "maybe type" "temp"
    (619902 'move' call_tmp[619899](420024 call isTrue tmp[420023]))
    (556996 'move' tmp[556991](556994 call _cond_test call_tmp[619899]))
    if tmp[556991]
    {
      (557001 'move' tmp[556990](556998 '_paramFoldLogical' tmp[556991] 1))
    }
    {
      unknown tmp[557003] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619906] "expr temp" "maybe param" "maybe type" "temp"
      (619909 'move' call_tmp[619906](69091 call(374556 call (partial) contains _mt[243] this[68996]) boundedOther[69077]))
      (557005 'move' tmp[557003](420028 call isTrue call_tmp[619906]))
      (557010 'move' tmp[556990](557007 '_paramFoldLogical' tmp[556991] tmp[557003]))
    }
    (510308 'move' ret[510298](510307 'deref' tmp[556990]))
    gotoReturn _end_boundsCheck[510296] _end_boundsCheck[510296]
    (475589 'end of statement' boundedOther[69077])
    label _end_boundsCheck[510296]
    (510300 return ret[510298])
  }
  function range[64319](?).boundsCheck[69105](arg _mt[69110]:_MT[238], arg this[69107]:range[64319](?) :
  range[64319](?), arg other[69102] :
  (374562 call idxType _mt[243] this[69107])) : _unknown[51] "inline" "method"
  {
    unknown ret[510314] "RVV" "temp"
    unknown call_tmp[619915] "expr temp" "maybe param" "maybe type" "temp"
    (619918 'move' call_tmp[619915](69115 call(374566 call (partial) contains _mt[243] this[69107]) other[69102]))
    (510319 'move' ret[510314](510318 'deref' call_tmp[619915]))
    (510316 return ret[510314])
  }
  function range[64319](?).alignLow[69124](arg _mt[69129]:_MT[238], ref arg this[69126]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510323] "RVV" "temp"
    unknown tmp[420044] "maybe param" "temp"
    (420055 'move' tmp[420044] 1)
    unknown call_tmp[619920] "expr temp" "maybe param" "maybe type" "temp"
    (619923 'move' call_tmp[619920](420057 call _cond_invalid tmp[420044]))
    if call_tmp[619920]
    {
      (420060 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557017] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557018] "maybe param" "temp"
    unknown call_tmp[619925] "expr temp" "maybe param" "maybe type" "temp"
    (619928 'move' call_tmp[619925](420045 call isTrue tmp[420044]))
    (557023 'move' tmp[557018](557021 call _cond_test call_tmp[619925]))
    if tmp[557018]
    {
      unknown tmp[557025] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619932] "expr temp" "maybe param" "maybe type" "temp"
      (619935 'move' call_tmp[619932](69137 call(69133 call (partial) isAmbiguous _mt[243] this[69126])))
      (557027 'move' tmp[557025](420048 call isTrue call_tmp[619932]))
      (557032 'move' tmp[557017](557029 '_paramFoldLogical' tmp[557018] tmp[557025]))
    }
    {
      (557037 'move' tmp[557017](557034 '_paramFoldLogical' tmp[557018] 0))
    }
    unknown call_tmp[619937] "expr temp" "maybe param" "maybe type" "temp"
    (619940 'move' call_tmp[619937](69166 call _cond_test tmp[557017]))
    if call_tmp[619937]
    {
      (69164 call boundsCheckHalt module=[255] HaltWrappers[210085] "alignLow -- Cannot be applied to a range with ambiguous alignment.")
      (357801 'referenced modules list' HaltWrappers[210085])
    }
    unknown call_tmp[619944] "expr temp" "maybe param" "maybe type" "temp"
    (619947 'move' call_tmp[619944](374573 call stridable _mt[243] this[69126]))
    unknown call_tmp[619949] "expr temp" "maybe param" "maybe type" "temp"
    (619952 'move' call_tmp[619949](69181 call _cond_test call_tmp[619944]))
    if call_tmp[619949]
    {
      unknown call_tmp[619956] "expr temp" "maybe param" "maybe type" "temp"
      (619959 'move' call_tmp[619956](374578 call _low _mt[243] this[69126]))
      unknown call_tmp[619963] "expr temp" "maybe param" "maybe type" "temp"
      (619966 'move' call_tmp[619963](69175 call alignedLowAsInt _mt[243] this[69126]))
      (69178 call = call_tmp[619956] call_tmp[619963])
    }
    (510328 'move' ret[510323](510327 'deref' this[69126]))
    (510325 return ret[510323])
  }
  function range[64319](?).alignHigh[69194](arg _mt[69199]:_MT[238], ref arg this[69196]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510332] "RVV" "temp"
    unknown tmp[420065] "maybe param" "temp"
    (420076 'move' tmp[420065] 1)
    unknown call_tmp[619968] "expr temp" "maybe param" "maybe type" "temp"
    (619971 'move' call_tmp[619968](420078 call _cond_invalid tmp[420065]))
    if call_tmp[619968]
    {
      (420081 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557044] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557045] "maybe param" "temp"
    unknown call_tmp[619973] "expr temp" "maybe param" "maybe type" "temp"
    (619976 'move' call_tmp[619973](420066 call isTrue tmp[420065]))
    (557050 'move' tmp[557045](557048 call _cond_test call_tmp[619973]))
    if tmp[557045]
    {
      unknown tmp[557052] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619980] "expr temp" "maybe param" "maybe type" "temp"
      (619983 'move' call_tmp[619980](69207 call(69203 call (partial) isAmbiguous _mt[243] this[69196])))
      (557054 'move' tmp[557052](420069 call isTrue call_tmp[619980]))
      (557059 'move' tmp[557044](557056 '_paramFoldLogical' tmp[557045] tmp[557052]))
    }
    {
      (557064 'move' tmp[557044](557061 '_paramFoldLogical' tmp[557045] 0))
    }
    unknown call_tmp[619985] "expr temp" "maybe param" "maybe type" "temp"
    (619988 'move' call_tmp[619985](69234 call _cond_test tmp[557044]))
    if call_tmp[619985]
    {
      (69232 call boundsCheckHalt module=[255] HaltWrappers[210085] "alignHigh -- Cannot be applied to a range with ambiguous alignment.")
      (357809 'referenced modules list' HaltWrappers[210085])
    }
    unknown call_tmp[619992] "expr temp" "maybe param" "maybe type" "temp"
    (619995 'move' call_tmp[619992](374585 call stridable _mt[243] this[69196]))
    unknown call_tmp[619997] "expr temp" "maybe param" "maybe type" "temp"
    (620000 'move' call_tmp[619997](69249 call _cond_test call_tmp[619992]))
    if call_tmp[619997]
    {
      unknown call_tmp[620004] "expr temp" "maybe param" "maybe type" "temp"
      (620007 'move' call_tmp[620004](374590 call _high _mt[243] this[69196]))
      unknown call_tmp[620011] "expr temp" "maybe param" "maybe type" "temp"
      (620014 'move' call_tmp[620011](69243 call alignedHighAsInt _mt[243] this[69196]))
      (69246 call = call_tmp[620004] call_tmp[620011])
    }
    (510337 'move' ret[510332](510336 'deref' this[69196]))
    (510334 return ret[510332])
  }
  function range[64319](?).indexOrder[69266](arg _mt[69271]:_MT[238], arg this[69268]:range[64319](?) :
  range[64319](?), arg ind[69263] :
  (374596 call idxType _mt[243] this[69268])) : _unknown[51] "method"
  {
    unknown ret[510341] "RVV" "temp"
    unknown tmp[420086] "maybe param" "temp"
    (420097 'move' tmp[420086] 1)
    unknown call_tmp[620018] "expr temp" "maybe param" "maybe type" "temp"
    (620021 'move' call_tmp[620018](420099 call _cond_invalid tmp[420086]))
    if call_tmp[620018]
    {
      (420102 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557071] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557072] "maybe param" "temp"
    unknown call_tmp[620023] "expr temp" "maybe param" "maybe type" "temp"
    (620026 'move' call_tmp[620023](420087 call isTrue tmp[420086]))
    (557077 'move' tmp[557072](557075 call _cond_test call_tmp[620023]))
    if tmp[557072]
    {
      unknown tmp[557079] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[620030] "expr temp" "maybe param" "maybe type" "temp"
      (620033 'move' call_tmp[620030](69279 call(69275 call (partial) isAmbiguous _mt[243] this[69268])))
      (557081 'move' tmp[557079](420090 call isTrue call_tmp[620030]))
      (557086 'move' tmp[557071](557083 '_paramFoldLogical' tmp[557072] tmp[557079]))
    }
    {
      (557091 'move' tmp[557071](557088 '_paramFoldLogical' tmp[557072] 0))
    }
    unknown call_tmp[620035] "expr temp" "maybe param" "maybe type" "temp"
    (620038 'move' call_tmp[620035](69306 call _cond_test tmp[557071]))
    if call_tmp[620035]
    {
      (69304 call boundsCheckHalt module=[255] HaltWrappers[210085] "indexOrder -- Undefined on a range with ambiguous alignment.")
      (357817 'referenced modules list' HaltWrappers[210085])
    }
    unknown call_tmp[620042] "expr temp" "maybe param" "maybe type" "temp"
    (620045 'move' call_tmp[620042](69315 call(374601 call (partial) contains _mt[243] this[69268]) ind[69263]))
    unknown call_tmp[620047] "expr temp" "maybe param" "maybe type" "temp"
    (620050 'move' call_tmp[620047](69316 call ! call_tmp[620042]))
    unknown call_tmp[620052] "expr temp" "maybe param" "maybe type" "temp"
    (620055 'move' call_tmp[620052](69326 call _cond_test call_tmp[620047]))
    if call_tmp[620052]
    {
      unknown call_tmp[620059] "expr temp" "maybe param" "maybe type" "temp"
      (620062 'move' call_tmp[620059](374606 call intIdxType _mt[243] this[69268]))
      unknown call_tmp[620064] "expr temp" "maybe param" "maybe type" "temp"
      (620067 'move' call_tmp[620064](69319 call - 1))
      unknown call_tmp[620069] "expr temp" "maybe param" "maybe type" "temp"
      (620072 'move' call_tmp[620069](69322 call _cast call_tmp[620059] call_tmp[620064]))
      (510346 'move' ret[510341](510345 'deref' call_tmp[620069]))
      gotoReturn _end_indexOrder[510339] _end_indexOrder[510339]
    }
    unknown call_tmp[620076] "expr temp" "maybe param" "maybe type" "temp"
    (620079 'move' call_tmp[620076](374611 call stridable _mt[243] this[69268]))
    unknown call_tmp[620081] "expr temp" "maybe param" "maybe type" "temp"
    (620084 'move' call_tmp[620081](69332 call ! call_tmp[620076]))
    unknown call_tmp[620086] "expr temp" "maybe param" "maybe type" "temp"
    (620089 'move' call_tmp[620086](69396 call _cond_test call_tmp[620081]))
    if call_tmp[620086]
    {
      unknown call_tmp[620093] "expr temp" "maybe param" "maybe type" "temp"
      (620096 'move' call_tmp[620093](69339 call(69335 call (partial) hasLowBound _mt[243] this[69268])))
      unknown call_tmp[620098] "expr temp" "maybe param" "maybe type" "temp"
      (620101 'move' call_tmp[620098](69349 call _cond_test call_tmp[620093]))
      if call_tmp[620098]
      {
        unknown call_tmp[620103] "expr temp" "maybe param" "maybe type" "temp"
        (620106 'move' call_tmp[620103](69343 call chpl__idxToInt ind[69263]))
        unknown call_tmp[620110] "expr temp" "maybe param" "maybe type" "temp"
        (620113 'move' call_tmp[620110](374617 call _low _mt[243] this[69268]))
        unknown call_tmp[620115] "expr temp" "maybe param" "maybe type" "temp"
        (620118 'move' call_tmp[620115](69345 call - call_tmp[620103] call_tmp[620110]))
        (510351 'move' ret[510341](510350 'deref' call_tmp[620115]))
        gotoReturn _end_indexOrder[510339] _end_indexOrder[510339]
      }
    }
    {
      unknown call_tmp[620122] "expr temp" "maybe param" "maybe type" "temp"
      (620125 'move' call_tmp[620122](69362 call(69358 call (partial) hasFirst _mt[243] this[69268])))
      unknown call_tmp[620127] "expr temp" "maybe param" "maybe type" "temp"
      (620130 'move' call_tmp[620127](69390 call _cond_test call_tmp[620122]))
      if call_tmp[620127]
      {
        unknown call_tmp[620134] "expr temp" "maybe param" "maybe type" "temp"
        (620137 'move' call_tmp[620134](374635 call intIdxType _mt[243] this[69268]))
        unknown call_tmp[620141] "expr temp" "maybe param" "maybe type" "temp"
        (620144 'move' call_tmp[620141](374622 call strType _mt[243] this[69268]))
        unknown call_tmp[620146] "expr temp" "maybe param" "maybe type" "temp"
        (620149 'move' call_tmp[620146](69366 call chpl__idxToInt ind[69263]))
        unknown call_tmp[620151] "expr temp" "maybe param" "maybe type" "temp"
        (620154 'move' call_tmp[620151](69368 call _cast call_tmp[620141] call_tmp[620146]))
        unknown call_tmp[620158] "expr temp" "maybe param" "maybe type" "temp"
        (620161 'move' call_tmp[620158](374626 call strType _mt[243] this[69268]))
        unknown call_tmp[620165] "expr temp" "maybe param" "maybe type" "temp"
        (620168 'move' call_tmp[620165](69372 call first _mt[243] this[69268]))
        unknown call_tmp[620170] "expr temp" "maybe param" "maybe type" "temp"
        (620173 'move' call_tmp[620170](69376 call chpl__idxToInt call_tmp[620165]))
        unknown call_tmp[620175] "expr temp" "maybe param" "maybe type" "temp"
        (620178 'move' call_tmp[620175](69378 call _cast call_tmp[620158] call_tmp[620170]))
        unknown call_tmp[620180] "expr temp" "maybe param" "maybe type" "temp"
        (620183 'move' call_tmp[620180](69380 call - call_tmp[620151] call_tmp[620175]))
        unknown call_tmp[620187] "expr temp" "maybe param" "maybe type" "temp"
        (620190 'move' call_tmp[620187](374631 call _stride _mt[243] this[69268]))
        unknown call_tmp[620192] "expr temp" "maybe param" "maybe type" "temp"
        (620195 'move' call_tmp[620192](69383 call / call_tmp[620180] call_tmp[620187]))
        unknown call_tmp[620197] "expr temp" "maybe param" "maybe type" "temp"
        (620200 'move' call_tmp[620197](69386 call _cast call_tmp[620134] call_tmp[620192]))
        (510356 'move' ret[510341](510355 'deref' call_tmp[620197]))
        gotoReturn _end_indexOrder[510339] _end_indexOrder[510339]
      }
    }
    unknown call_tmp[620204] "expr temp" "maybe param" "maybe type" "temp"
    (620207 'move' call_tmp[620204](374639 call intIdxType _mt[243] this[69268]))
    unknown call_tmp[620209] "expr temp" "maybe param" "maybe type" "temp"
    (620212 'move' call_tmp[620209](69401 call - 1))
    unknown call_tmp[620214] "expr temp" "maybe param" "maybe type" "temp"
    (620217 'move' call_tmp[620214](69404 call _cast call_tmp[620204] call_tmp[620209]))
    (510361 'move' ret[510341](510360 'deref' call_tmp[620214]))
    label _end_indexOrder[510339]
    (510343 return ret[510341])
  }
  function range[64319](?).orderToIndex[69417](arg _mt[69422]:_MT[238], arg this[69419]:range[64319](?) :
  range[64319](?), arg ord[69414]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510365] "RVV" "temp"
    unknown call_tmp[620219] "expr temp" "maybe param" "maybe type" "temp"
    (620222 'move' call_tmp[620219](69608 call _cond_test 1))
    if call_tmp[620219]
    {
      unknown call_tmp[620226] "expr temp" "maybe param" "maybe type" "temp"
      (620229 'move' call_tmp[620226](69428 call(374650 call (partial) hasFirst _mt[243] this[69419])))
      unknown call_tmp[620231] "expr temp" "maybe param" "maybe type" "temp"
      (620234 'move' call_tmp[620231](69429 call ! call_tmp[620226]))
      unknown call_tmp[620236] "expr temp" "maybe param" "maybe type" "temp"
      (620239 'move' call_tmp[620236](69455 call _cond_test call_tmp[620231]))
      if call_tmp[620236]
      {
        (69453 call boundsCheckHalt module=[255] HaltWrappers[210085] "invoking orderToIndex on a range that has no first index")
        (357826 'referenced modules list' HaltWrappers[210085])
      }
      unknown call_tmp[620243] "expr temp" "maybe param" "maybe type" "temp"
      (620246 'move' call_tmp[620243](69463 call(374654 call (partial) isAmbiguous _mt[243] this[69419])))
      unknown call_tmp[620248] "expr temp" "maybe param" "maybe type" "temp"
      (620251 'move' call_tmp[620248](69488 call _cond_test call_tmp[620243]))
      if call_tmp[620248]
      {
        (69486 call boundsCheckHalt module=[255] HaltWrappers[210085] "invoking orderToIndex on a range that is ambiguously aligned")
        (357832 'referenced modules list' HaltWrappers[210085])
      }
      unknown call_tmp[620253] "expr temp" "maybe param" "maybe type" "temp"
      (620256 'move' call_tmp[620253](69495 call < ord[69414] 0))
      unknown call_tmp[620258] "expr temp" "maybe param" "maybe type" "temp"
      (620261 'move' call_tmp[620258](69527 call _cond_test call_tmp[620253]))
      if call_tmp[620258]
      {
        unknown call_tmp[620263] "expr temp" "maybe param" "maybe type" "temp"
        (620266 'move' call_tmp[620263](69520 call _cast string[26] ord[69414]))
        unknown call_tmp[620268] "expr temp" "maybe param" "maybe type" "temp"
        (620271 'move' call_tmp[620268](69522 call + "invoking orderToIndex on a negative integer: " call_tmp[620263]))
        (69525 call boundsCheckHalt module=[255] HaltWrappers[210085] call_tmp[620268])
        (357838 'referenced modules list' HaltWrappers[210085])
      }
      unknown tmp[420107] "maybe param" "temp"
      (420118 'move' tmp[420107](69535 call isBoundedRange this[69419]))
      unknown call_tmp[620273] "expr temp" "maybe param" "maybe type" "temp"
      (620276 'move' call_tmp[620273](420120 call _cond_invalid tmp[420107]))
      if call_tmp[620273]
      {
        (420123 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557098] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557099] "maybe param" "temp"
      unknown call_tmp[620278] "expr temp" "maybe param" "maybe type" "temp"
      (620281 'move' call_tmp[620278](420108 call isTrue tmp[420107]))
      (557104 'move' tmp[557099](557102 call _cond_test call_tmp[620278]))
      if tmp[557099]
      {
        unknown tmp[557106] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[620285] "expr temp" "maybe param" "maybe type" "temp"
        (620288 'move' call_tmp[620285](69538 call size _mt[243] this[69419]))
        unknown call_tmp[620290] "expr temp" "maybe param" "maybe type" "temp"
        (620293 'move' call_tmp[620290](69541 call >= ord[69414] call_tmp[620285]))
        (557108 'move' tmp[557106](420111 call isTrue call_tmp[620290]))
        (557113 'move' tmp[557098](557110 '_paramFoldLogical' tmp[557099] tmp[557106]))
      }
      {
        (557118 'move' tmp[557098](557115 '_paramFoldLogical' tmp[557099] 0))
      }
      unknown call_tmp[620295] "expr temp" "maybe param" "maybe type" "temp"
      (620298 'move' call_tmp[620295](69603 call _cond_test tmp[557098]))
      if call_tmp[620295]
      {
        unknown call_tmp[620300] "expr temp" "maybe param" "maybe type" "temp"
        (620303 'move' call_tmp[620300](69568 call _cast string[26] ord[69414]))
        unknown call_tmp[620305] "expr temp" "maybe param" "maybe type" "temp"
        (620308 'move' call_tmp[620305](69570 call + "invoking orderToIndex on an integer " call_tmp[620300]))
        unknown call_tmp[620310] "expr temp" "maybe param" "maybe type" "temp"
        (620313 'move' call_tmp[620310](69589 call + call_tmp[620305] " that is larger than the range's number of indices "))
        unknown call_tmp[620317] "expr temp" "maybe param" "maybe type" "temp"
        (620320 'move' call_tmp[620317](69592 call size _mt[243] this[69419]))
        unknown call_tmp[620322] "expr temp" "maybe param" "maybe type" "temp"
        (620325 'move' call_tmp[620322](69596 call _cast string[26] call_tmp[620317]))
        unknown call_tmp[620327] "expr temp" "maybe param" "maybe type" "temp"
        (620330 'move' call_tmp[620327](69598 call + call_tmp[620310] call_tmp[620322]))
        (69601 call boundsCheckHalt module=[255] HaltWrappers[210085] call_tmp[620327])
        (357845 'referenced modules list' HaltWrappers[210085])
      }
    }
    unknown call_tmp[620336] "expr temp" "maybe param" "maybe type" "temp"
    (620339 'move' call_tmp[620336](69616 call firstAsInt _mt[243] this[69419]))
    unknown call_tmp[620343] "expr temp" "maybe param" "maybe type" "temp"
    (620346 'move' call_tmp[620343](69621 call stride _mt[243] this[69419]))
    unknown call_tmp[620348] "expr temp" "maybe param" "maybe type" "temp"
    (620351 'move' call_tmp[620348](69625 call chpl__addRangeStrides call_tmp[620336] call_tmp[620343] ord[69414]))
    unknown call_tmp[620353] "expr temp" "maybe param" "maybe type" "temp"
    (620356 'move' call_tmp[620353](69627 call(374663 call (partial) chpl_intToIdx _mt[243] this[69419]) call_tmp[620348]))
    unknown call_tmp[620360] "expr temp" "maybe param" "maybe type" "temp"
    (620363 'move' call_tmp[620360](510370 call idxType _mt[243] this[69419]))
    (510374 'move' ret[510365](510373 'coerce' call_tmp[620353] call_tmp[620360]))
    (510367 return ret[510365])
  }
  { scopeless type
    (374645 call idxType _mt[243] this[69419])
  }
  function range[64319](?).translate[69640](arg _mt[69645]:_MT[238], arg this[69642]:range[64319](?) :
  range[64319](?), arg offset[69637]:integral[199](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510378] "RVV" "temp"
    unknown call_tmp[620367] "expr temp" "maybe param" "maybe type" "temp"
    (620370 'move' call_tmp[620367](69649 call + this[69642] offset[69637]))
    (510383 'move' ret[510378](510382 'deref' call_tmp[620367]))
    (510380 return ret[510378])
  }
  function range[64319](?).translate[69661](arg _mt[69666]:_MT[238], arg this[69663]:range[64319](?) :
  range[64319](?), arg i[69659]:_any[178](?)) : _unknown[51] "inline" "method" "no doc" "no return value for void"
  {
    (69687 call compilerError "offsets must be of integral type")
    (510385 return _void[55])
  }
  function range[64319](?)._effAlmt[69695](arg _mt[69700]:_MT[238], arg this[69697]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510389] "RVV" "temp"
    unknown call_tmp[620374] "expr temp" "maybe param" "maybe type" "temp"
    (620377 'move' call_tmp[620374](374676 call alignment _mt[243] this[69697]))
    (510394 'move' ret[510389](510393 'deref' call_tmp[620374]))
    (510391 return ret[510389])
  }
  where {
    (374672 call stridable _mt[243] this[69697])
  }
  function range[64319](?)._effAlmt[69713](arg _mt[69718]:_MT[238], arg this[69715]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510398] "RVV" "temp"
    unknown call_tmp[620383] "expr temp" "maybe param" "maybe type" "temp"
    (620386 'move' call_tmp[620383](69726 call(374685 call (partial) chpl_intToIdx _mt[243] this[69715]) 0))
    (510403 'move' ret[510398](510402 'deref' call_tmp[620383]))
    (510400 return ret[510398])
  }
  where {
    unknown call_tmp[620390] "expr temp" "maybe param" "maybe type" "temp"
    (620393 'move' call_tmp[620390](374681 call stridable _mt[243] this[69715]))
    (69721 call ! call_tmp[620390])
  }
  function range[64319](?).interior[69740](arg _mt[69745]:_MT[238], arg this[69742]:range[64319](?) :
  range[64319](?), arg offset[69737]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69773 call compilerError "interior is not supported on unbounded ranges")
    (510405 return _void[55])
  }
  where {
    unknown call_tmp[620397] "expr temp" "maybe param" "maybe type" "temp"
    (620400 'move' call_tmp[620397](374691 call boundedType _mt[243] this[69742]))
    (69752 call != call_tmp[620397] bounded[64208])
  }
  function range[64319](?).interior[69786](arg _mt[69791]:_MT[238], arg this[69788]:range[64319](?) :
  range[64319](?), arg offset[69783]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510409] "RVV" "temp"
    unknown call_tmp[620406] "expr temp" "maybe param" "maybe type" "temp"
    (620409 'move' call_tmp[620406](374696 call intIdxType _mt[243] this[69788]))
    unknown call_tmp[620411] "maybe param" "maybe type" "temp"
    (620414 'move' call_tmp[620411](69799 call(69794 call (partial) safeCast _mt[243] offset[69783]) call_tmp[620406]))
    const i[69800] "dead at end of block" "const" "insert auto destroy"
    (541184 'init var' i[69800] call_tmp[620411])
    (69803 'end of statement')
    unknown call_tmp[620416] "expr temp" "maybe param" "maybe type" "temp"
    (620419 'move' call_tmp[620416](69807 call < i[69800] 0))
    unknown call_tmp[620421] "expr temp" "maybe param" "maybe type" "temp"
    (620424 'move' call_tmp[620421](69834 call _cond_test call_tmp[620416]))
    if call_tmp[620421]
    {
      unknown call_tmp[620428] "expr temp" "maybe param" "maybe type" "temp"
      (620431 'move' call_tmp[620428](374703 call idxType _mt[243] this[69788]))
      unknown call_tmp[620435] "expr temp" "maybe param" "maybe type" "temp"
      (620438 'move' call_tmp[620435](374708 call boundedType _mt[243] this[69788]))
      unknown call_tmp[620442] "expr temp" "maybe param" "maybe type" "temp"
      (620445 'move' call_tmp[620442](374713 call stridable _mt[243] this[69788]))
      unknown call_tmp[620449] "expr temp" "maybe param" "maybe type" "temp"
      (620452 'move' call_tmp[620449](374717 call low _mt[243] this[69788]))
      unknown call_tmp[620458] "expr temp" "maybe param" "maybe type" "temp"
      (620461 'move' call_tmp[620458](374726 call _low _mt[243] this[69788]))
      unknown call_tmp[620463] "expr temp" "maybe param" "maybe type" "temp"
      (620466 'move' call_tmp[620463](69819 call - call_tmp[620458] 1))
      unknown call_tmp[620468] "expr temp" "maybe param" "maybe type" "temp"
      (620471 'move' call_tmp[620468](69822 call - call_tmp[620463] i[69800]))
      unknown call_tmp[620473] "expr temp" "maybe param" "maybe type" "temp"
      (620476 'move' call_tmp[620473](69825 call(374721 call (partial) chpl_intToIdx _mt[243] this[69788]) call_tmp[620468]))
      unknown call_tmp[620480] "expr temp" "maybe param" "maybe type" "temp"
      (620483 'move' call_tmp[620480](374731 call stride _mt[243] this[69788]))
      unknown call_tmp[620487] "expr temp" "maybe param" "maybe type" "temp"
      (620490 'move' call_tmp[620487](69829 call(374737 call (partial) _effAlmt _mt[243] this[69788])))
      unknown call_tmp[620494] "expr temp" "maybe param" "maybe type" "temp"
      (620497 'move' call_tmp[620494](374741 call aligned _mt[243] this[69788]))
      unknown call_tmp[620499] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620502 'move' call_tmp[620499](747965 'new' range[64319](?) call_tmp[620428] call_tmp[620435] call_tmp[620442] call_tmp[620449] call_tmp[620473] call_tmp[620480] call_tmp[620487] call_tmp[620494]))
      (510414 'move' ret[510409](510413 'deref' call_tmp[620499]))
      gotoReturn _end_interior[510407] _end_interior[510407]
      (475617 'end of statement' i[69800])
    }
    unknown call_tmp[620504] "expr temp" "maybe param" "maybe type" "temp"
    (620507 'move' call_tmp[620504](69841 call > i[69800] 0))
    unknown call_tmp[620509] "expr temp" "maybe param" "maybe type" "temp"
    (620512 'move' call_tmp[620509](69868 call _cond_test call_tmp[620504]))
    if call_tmp[620509]
    {
      unknown call_tmp[620516] "expr temp" "maybe param" "maybe type" "temp"
      (620519 'move' call_tmp[620516](374748 call idxType _mt[243] this[69788]))
      unknown call_tmp[620523] "expr temp" "maybe param" "maybe type" "temp"
      (620526 'move' call_tmp[620523](374753 call boundedType _mt[243] this[69788]))
      unknown call_tmp[620530] "expr temp" "maybe param" "maybe type" "temp"
      (620533 'move' call_tmp[620530](374758 call stridable _mt[243] this[69788]))
      unknown call_tmp[620539] "expr temp" "maybe param" "maybe type" "temp"
      (620542 'move' call_tmp[620539](374767 call _high _mt[243] this[69788]))
      unknown call_tmp[620544] "expr temp" "maybe param" "maybe type" "temp"
      (620547 'move' call_tmp[620544](69852 call + call_tmp[620539] 1))
      unknown call_tmp[620549] "expr temp" "maybe param" "maybe type" "temp"
      (620552 'move' call_tmp[620549](69855 call - call_tmp[620544] i[69800]))
      unknown call_tmp[620554] "expr temp" "maybe param" "maybe type" "temp"
      (620557 'move' call_tmp[620554](69858 call(374762 call (partial) chpl_intToIdx _mt[243] this[69788]) call_tmp[620549]))
      unknown call_tmp[620561] "expr temp" "maybe param" "maybe type" "temp"
      (620564 'move' call_tmp[620561](374772 call high _mt[243] this[69788]))
      unknown call_tmp[620568] "expr temp" "maybe param" "maybe type" "temp"
      (620571 'move' call_tmp[620568](374776 call stride _mt[243] this[69788]))
      unknown call_tmp[620575] "expr temp" "maybe param" "maybe type" "temp"
      (620578 'move' call_tmp[620575](69863 call(374780 call (partial) _effAlmt _mt[243] this[69788])))
      unknown call_tmp[620582] "expr temp" "maybe param" "maybe type" "temp"
      (620585 'move' call_tmp[620582](374784 call aligned _mt[243] this[69788]))
      unknown call_tmp[620587] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620590 'move' call_tmp[620587](747966 'new' range[64319](?) call_tmp[620516] call_tmp[620523] call_tmp[620530] call_tmp[620554] call_tmp[620561] call_tmp[620568] call_tmp[620575] call_tmp[620582]))
      (510419 'move' ret[510409](510418 'deref' call_tmp[620587]))
      gotoReturn _end_interior[510407] _end_interior[510407]
      (475619 'end of statement' i[69800])
    }
    unknown call_tmp[620594] "expr temp" "maybe param" "maybe type" "temp"
    (620597 'move' call_tmp[620594](374790 call idxType _mt[243] this[69788]))
    unknown call_tmp[620601] "expr temp" "maybe param" "maybe type" "temp"
    (620604 'move' call_tmp[620601](374795 call boundedType _mt[243] this[69788]))
    unknown call_tmp[620608] "expr temp" "maybe param" "maybe type" "temp"
    (620611 'move' call_tmp[620608](374800 call stridable _mt[243] this[69788]))
    unknown call_tmp[620615] "expr temp" "maybe param" "maybe type" "temp"
    (620618 'move' call_tmp[620615](374804 call low _mt[243] this[69788]))
    unknown call_tmp[620622] "expr temp" "maybe param" "maybe type" "temp"
    (620625 'move' call_tmp[620622](374808 call high _mt[243] this[69788]))
    unknown call_tmp[620629] "expr temp" "maybe param" "maybe type" "temp"
    (620632 'move' call_tmp[620629](374812 call stride _mt[243] this[69788]))
    unknown call_tmp[620636] "expr temp" "maybe param" "maybe type" "temp"
    (620639 'move' call_tmp[620636](69884 call(374816 call (partial) _effAlmt _mt[243] this[69788])))
    unknown call_tmp[620643] "expr temp" "maybe param" "maybe type" "temp"
    (620646 'move' call_tmp[620643](374820 call aligned _mt[243] this[69788]))
    unknown call_tmp[620648] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620651 'move' call_tmp[620648](747967 'new' range[64319](?) call_tmp[620594] call_tmp[620601] call_tmp[620608] call_tmp[620615] call_tmp[620622] call_tmp[620629] call_tmp[620636] call_tmp[620643]))
    (510424 'move' ret[510409](510423 'deref' call_tmp[620648]))
    label _end_interior[510407]
    (510411 return ret[510409])
  }
  function range[64319](?).exterior[69898](arg _mt[69903]:_MT[238], arg this[69900]:range[64319](?) :
  range[64319](?), arg offset[69895]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69931 call compilerError "exterior is not supported on unbounded ranges")
    (510426 return _void[55])
  }
  where {
    unknown call_tmp[620655] "expr temp" "maybe param" "maybe type" "temp"
    (620658 'move' call_tmp[620655](374826 call boundedType _mt[243] this[69900]))
    (69910 call != call_tmp[620655] bounded[64208])
  }
  function range[64319](?).exterior[69944](arg _mt[69949]:_MT[238], arg this[69946]:range[64319](?) :
  range[64319](?), arg offset[69941]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510430] "RVV" "temp"
    unknown call_tmp[620664] "expr temp" "maybe param" "maybe type" "temp"
    (620667 'move' call_tmp[620664](374831 call intIdxType _mt[243] this[69946]))
    unknown call_tmp[620669] "maybe param" "maybe type" "temp"
    (620672 'move' call_tmp[620669](69957 call(69952 call (partial) safeCast _mt[243] offset[69941]) call_tmp[620664]))
    const i[69958] "dead at end of block" "const" "insert auto destroy"
    (541186 'init var' i[69958] call_tmp[620669])
    (69961 'end of statement')
    unknown call_tmp[620674] "expr temp" "maybe param" "maybe type" "temp"
    (620677 'move' call_tmp[620674](69965 call < i[69958] 0))
    unknown call_tmp[620679] "expr temp" "maybe param" "maybe type" "temp"
    (620682 'move' call_tmp[620679](69995 call _cond_test call_tmp[620674]))
    if call_tmp[620679]
    {
      unknown call_tmp[620686] "expr temp" "maybe param" "maybe type" "temp"
      (620689 'move' call_tmp[620686](374838 call idxType _mt[243] this[69946]))
      unknown call_tmp[620693] "expr temp" "maybe param" "maybe type" "temp"
      (620696 'move' call_tmp[620693](374843 call boundedType _mt[243] this[69946]))
      unknown call_tmp[620700] "expr temp" "maybe param" "maybe type" "temp"
      (620703 'move' call_tmp[620700](374848 call stridable _mt[243] this[69946]))
      unknown call_tmp[620709] "expr temp" "maybe param" "maybe type" "temp"
      (620712 'move' call_tmp[620709](374857 call _low _mt[243] this[69946]))
      unknown call_tmp[620714] "expr temp" "maybe param" "maybe type" "temp"
      (620717 'move' call_tmp[620714](69976 call + call_tmp[620709] i[69958]))
      unknown call_tmp[620719] "expr temp" "maybe param" "maybe type" "temp"
      (620722 'move' call_tmp[620719](69979 call(374852 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620714]))
      unknown call_tmp[620728] "expr temp" "maybe param" "maybe type" "temp"
      (620731 'move' call_tmp[620728](374867 call _low _mt[243] this[69946]))
      unknown call_tmp[620733] "expr temp" "maybe param" "maybe type" "temp"
      (620736 'move' call_tmp[620733](69983 call - call_tmp[620728] 1))
      unknown call_tmp[620738] "expr temp" "maybe param" "maybe type" "temp"
      (620741 'move' call_tmp[620738](69986 call(374862 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620733]))
      unknown call_tmp[620745] "expr temp" "maybe param" "maybe type" "temp"
      (620748 'move' call_tmp[620745](374871 call stride _mt[243] this[69946]))
      unknown call_tmp[620752] "expr temp" "maybe param" "maybe type" "temp"
      (620755 'move' call_tmp[620752](69990 call(374875 call (partial) _effAlmt _mt[243] this[69946])))
      unknown call_tmp[620759] "expr temp" "maybe param" "maybe type" "temp"
      (620762 'move' call_tmp[620759](374879 call aligned _mt[243] this[69946]))
      unknown call_tmp[620764] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620767 'move' call_tmp[620764](747968 'new' range[64319](?) call_tmp[620686] call_tmp[620693] call_tmp[620700] call_tmp[620719] call_tmp[620738] call_tmp[620745] call_tmp[620752] call_tmp[620759]))
      (510435 'move' ret[510430](510434 'deref' call_tmp[620764]))
      gotoReturn _end_exterior[510428] _end_exterior[510428]
      (475623 'end of statement' i[69958])
    }
    unknown call_tmp[620769] "expr temp" "maybe param" "maybe type" "temp"
    (620772 'move' call_tmp[620769](70002 call > i[69958] 0))
    unknown call_tmp[620774] "expr temp" "maybe param" "maybe type" "temp"
    (620777 'move' call_tmp[620774](70032 call _cond_test call_tmp[620769]))
    if call_tmp[620774]
    {
      unknown call_tmp[620781] "expr temp" "maybe param" "maybe type" "temp"
      (620784 'move' call_tmp[620781](374886 call idxType _mt[243] this[69946]))
      unknown call_tmp[620788] "expr temp" "maybe param" "maybe type" "temp"
      (620791 'move' call_tmp[620788](374891 call boundedType _mt[243] this[69946]))
      unknown call_tmp[620795] "expr temp" "maybe param" "maybe type" "temp"
      (620798 'move' call_tmp[620795](374896 call stridable _mt[243] this[69946]))
      unknown call_tmp[620804] "expr temp" "maybe param" "maybe type" "temp"
      (620807 'move' call_tmp[620804](374905 call _high _mt[243] this[69946]))
      unknown call_tmp[620809] "expr temp" "maybe param" "maybe type" "temp"
      (620812 'move' call_tmp[620809](70013 call + call_tmp[620804] 1))
      unknown call_tmp[620814] "expr temp" "maybe param" "maybe type" "temp"
      (620817 'move' call_tmp[620814](70016 call(374900 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620809]))
      unknown call_tmp[620823] "expr temp" "maybe param" "maybe type" "temp"
      (620826 'move' call_tmp[620823](374914 call _high _mt[243] this[69946]))
      unknown call_tmp[620828] "expr temp" "maybe param" "maybe type" "temp"
      (620831 'move' call_tmp[620828](70020 call + call_tmp[620823] i[69958]))
      unknown call_tmp[620833] "expr temp" "maybe param" "maybe type" "temp"
      (620836 'move' call_tmp[620833](70023 call(374909 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620828]))
      unknown call_tmp[620840] "expr temp" "maybe param" "maybe type" "temp"
      (620843 'move' call_tmp[620840](374919 call stride _mt[243] this[69946]))
      unknown call_tmp[620847] "expr temp" "maybe param" "maybe type" "temp"
      (620850 'move' call_tmp[620847](70027 call(374923 call (partial) _effAlmt _mt[243] this[69946])))
      unknown call_tmp[620854] "expr temp" "maybe param" "maybe type" "temp"
      (620857 'move' call_tmp[620854](374927 call aligned _mt[243] this[69946]))
      unknown call_tmp[620859] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620862 'move' call_tmp[620859](747969 'new' range[64319](?) call_tmp[620781] call_tmp[620788] call_tmp[620795] call_tmp[620814] call_tmp[620833] call_tmp[620840] call_tmp[620847] call_tmp[620854]))
      (510440 'move' ret[510430](510439 'deref' call_tmp[620859]))
      gotoReturn _end_exterior[510428] _end_exterior[510428]
      (475625 'end of statement' i[69958])
    }
    unknown call_tmp[620866] "expr temp" "maybe param" "maybe type" "temp"
    (620869 'move' call_tmp[620866](374933 call idxType _mt[243] this[69946]))
    unknown call_tmp[620873] "expr temp" "maybe param" "maybe type" "temp"
    (620876 'move' call_tmp[620873](374938 call boundedType _mt[243] this[69946]))
    unknown call_tmp[620880] "expr temp" "maybe param" "maybe type" "temp"
    (620883 'move' call_tmp[620880](374943 call stridable _mt[243] this[69946]))
    unknown call_tmp[620887] "expr temp" "maybe param" "maybe type" "temp"
    (620890 'move' call_tmp[620887](374947 call low _mt[243] this[69946]))
    unknown call_tmp[620894] "expr temp" "maybe param" "maybe type" "temp"
    (620897 'move' call_tmp[620894](374951 call high _mt[243] this[69946]))
    unknown call_tmp[620901] "expr temp" "maybe param" "maybe type" "temp"
    (620904 'move' call_tmp[620901](374955 call stride _mt[243] this[69946]))
    unknown call_tmp[620908] "expr temp" "maybe param" "maybe type" "temp"
    (620911 'move' call_tmp[620908](70048 call(374959 call (partial) _effAlmt _mt[243] this[69946])))
    unknown call_tmp[620915] "expr temp" "maybe param" "maybe type" "temp"
    (620918 'move' call_tmp[620915](374963 call aligned _mt[243] this[69946]))
    unknown call_tmp[620920] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620923 'move' call_tmp[620920](747970 'new' range[64319](?) call_tmp[620866] call_tmp[620873] call_tmp[620880] call_tmp[620887] call_tmp[620894] call_tmp[620901] call_tmp[620908] call_tmp[620915]))
    (510445 'move' ret[510430](510444 'deref' call_tmp[620920]))
    label _end_exterior[510428]
    (510432 return ret[510430])
  }
  function range[64319](?).expand[70062](arg _mt[70067]:_MT[238], arg this[70064]:range[64319](?) :
  range[64319](?), arg offset[70059]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (70095 call compilerError "expand() is not supported on unbounded ranges")
    (510447 return _void[55])
  }
  where {
    unknown call_tmp[620927] "expr temp" "maybe param" "maybe type" "temp"
    (620930 'move' call_tmp[620927](374969 call boundedType _mt[243] this[70064]))
    (70074 call != call_tmp[620927] bounded[64208])
  }
  function range[64319](?).expand[70108](arg _mt[70113]:_MT[238], arg this[70110]:range[64319](?) :
  range[64319](?), arg offset[70105]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510451] "RVV" "temp"
    unknown call_tmp[620936] "expr temp" "maybe param" "maybe type" "temp"
    (620939 'move' call_tmp[620936](374974 call intIdxType _mt[243] this[70110]))
    unknown call_tmp[620941] "maybe param" "maybe type" "temp"
    (620944 'move' call_tmp[620941](70121 call(70116 call (partial) safeCast _mt[243] offset[70105]) call_tmp[620936]))
    const i[70122] "dead at end of block" "const" "insert auto destroy"
    (541188 'init var' i[70122] call_tmp[620941])
    (70125 'end of statement')
    unknown call_tmp[620948] "expr temp" "maybe param" "maybe type" "temp"
    (620951 'move' call_tmp[620948](374980 call idxType _mt[243] this[70110]))
    unknown call_tmp[620955] "expr temp" "maybe param" "maybe type" "temp"
    (620958 'move' call_tmp[620955](374985 call boundedType _mt[243] this[70110]))
    unknown call_tmp[620962] "expr temp" "maybe param" "maybe type" "temp"
    (620965 'move' call_tmp[620962](374990 call stridable _mt[243] this[70110]))
    unknown call_tmp[620971] "expr temp" "maybe param" "maybe type" "temp"
    (620974 'move' call_tmp[620971](374999 call _low _mt[243] this[70110]))
    unknown call_tmp[620976] "expr temp" "maybe param" "maybe type" "temp"
    (620979 'move' call_tmp[620976](70136 call - call_tmp[620971] i[70122]))
    unknown call_tmp[620981] "expr temp" "maybe param" "maybe type" "temp"
    (620984 'move' call_tmp[620981](70139 call(374994 call (partial) chpl_intToIdx _mt[243] this[70110]) call_tmp[620976]))
    unknown call_tmp[620990] "expr temp" "maybe param" "maybe type" "temp"
    (620993 'move' call_tmp[620990](375009 call _high _mt[243] this[70110]))
    unknown call_tmp[620995] "expr temp" "maybe param" "maybe type" "temp"
    (620998 'move' call_tmp[620995](70143 call + call_tmp[620990] i[70122]))
    unknown call_tmp[621000] "expr temp" "maybe param" "maybe type" "temp"
    (621003 'move' call_tmp[621000](70146 call(375004 call (partial) chpl_intToIdx _mt[243] this[70110]) call_tmp[620995]))
    unknown call_tmp[621007] "expr temp" "maybe param" "maybe type" "temp"
    (621010 'move' call_tmp[621007](375014 call stride _mt[243] this[70110]))
    unknown call_tmp[621014] "expr temp" "maybe param" "maybe type" "temp"
    (621017 'move' call_tmp[621014](375018 call alignment _mt[243] this[70110]))
    unknown call_tmp[621021] "expr temp" "maybe param" "maybe type" "temp"
    (621024 'move' call_tmp[621021](375023 call _aligned _mt[243] this[70110]))
    unknown call_tmp[621026] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621029 'move' call_tmp[621026](747971 'new' range[64319](?) call_tmp[620948] call_tmp[620955] call_tmp[620962] call_tmp[620981] call_tmp[621000] call_tmp[621007] call_tmp[621014] call_tmp[621021]))
    (510456 'move' ret[510451](510455 'deref' call_tmp[621026]))
    gotoReturn _end_expand[510449] _end_expand[510449]
    (475629 'end of statement' i[70122] i[70122])
    label _end_expand[510449]
    (510453 return ret[510451])
  }
  function =[70166](ref arg r1[70163]:range[64319](?), arg r2[70174]:range[64319](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[621033] "expr temp" "maybe param" "maybe type" "temp"
    (621036 'move' call_tmp[621033](70178 call boundedType _mt[243] r1[70163]))
    unknown call_tmp[621040] "expr temp" "maybe param" "maybe type" "temp"
    (621043 'move' call_tmp[621040](70182 call boundedType _mt[243] r2[70174]))
    unknown call_tmp[621045] "expr temp" "maybe param" "maybe type" "temp"
    (621048 'move' call_tmp[621045](70185 call != call_tmp[621033] call_tmp[621040]))
    unknown call_tmp[621050] "expr temp" "maybe param" "maybe type" "temp"
    (621053 'move' call_tmp[621050](70210 call _cond_test call_tmp[621045]))
    if call_tmp[621050]
    {
      (70208 call compilerError "type mismatch in assignment of ranges with different boundedType parameters")
    }
    unknown tmp[420149] "maybe param" "temp"
    unknown call_tmp[621055] "expr temp" "maybe param" "maybe type" "temp"
    (621058 'move' call_tmp[621055](455897 'query' r1[70163] c"stridable"))
    (420160 'move' tmp[420149](70217 call ! call_tmp[621055]))
    unknown call_tmp[621060] "expr temp" "maybe param" "maybe type" "temp"
    (621063 'move' call_tmp[621060](420162 call _cond_invalid tmp[420149]))
    if call_tmp[621060]
    {
      (420165 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557125] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557126] "maybe param" "temp"
    unknown call_tmp[621065] "expr temp" "maybe param" "maybe type" "temp"
    (621068 'move' call_tmp[621065](420150 call isTrue tmp[420149]))
    (557131 'move' tmp[557126](557129 call _cond_test call_tmp[621065]))
    if tmp[557126]
    {
      unknown tmp[557133] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621070] "expr temp" "maybe param" "maybe type" "temp"
      (621073 'move' call_tmp[621070](455917 'query' r2[70174] c"stridable"))
      (557135 'move' tmp[557133](420153 call isTrue call_tmp[621070]))
      (557140 'move' tmp[557125](557137 '_paramFoldLogical' tmp[557126] tmp[557133]))
    }
    {
      (557145 'move' tmp[557125](557142 '_paramFoldLogical' tmp[557126] 0))
    }
    unknown call_tmp[621075] "expr temp" "maybe param" "maybe type" "temp"
    (621078 'move' call_tmp[621075](70278 call _cond_test tmp[557125]))
    if call_tmp[621075]
    {
      (70241 call compilerError "type mismatch in assignment of ranges with different stridable parameters")
    }
    {
      unknown tmp[420128] "maybe param" "temp"
      (420139 'move' tmp[420128](455900 'query' r1[70163] c"stridable"))
      unknown call_tmp[621080] "expr temp" "maybe param" "maybe type" "temp"
      (621083 'move' call_tmp[621080](420141 call _cond_invalid tmp[420128]))
      if call_tmp[621080]
      {
        (420144 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557152] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557153] "maybe param" "temp"
      unknown call_tmp[621085] "expr temp" "maybe param" "maybe type" "temp"
      (621088 'move' call_tmp[621085](420129 call isTrue tmp[420128]))
      (557158 'move' tmp[557153](557156 call _cond_test call_tmp[621085]))
      if tmp[557153]
      {
        unknown tmp[557160] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621090] "expr temp" "maybe param" "maybe type" "temp"
        (621093 'move' call_tmp[621090](455920 'query' r2[70174] c"stridable"))
        (557162 'move' tmp[557160](420132 call isTrue call_tmp[621090]))
        (557167 'move' tmp[557152](557164 '_paramFoldLogical' tmp[557153] tmp[557160]))
      }
      {
        (557172 'move' tmp[557152](557169 '_paramFoldLogical' tmp[557153] 0))
      }
      unknown call_tmp[621095] "expr temp" "maybe param" "maybe type" "temp"
      (621098 'move' call_tmp[621095](70272 call _cond_test tmp[557152]))
      if call_tmp[621095]
      {
        unknown call_tmp[621102] "expr temp" "maybe param" "maybe type" "temp"
        (621105 'move' call_tmp[621102](70248 call _stride _mt[243] r1[70163]))
        unknown call_tmp[621109] "expr temp" "maybe param" "maybe type" "temp"
        (621112 'move' call_tmp[621109](70252 call stride _mt[243] r2[70174]))
        (70255 call = call_tmp[621102] call_tmp[621109])
      }
      {
        unknown call_tmp[621114] "expr temp" "maybe param" "maybe type" "temp"
        (621117 'move' call_tmp[621114](455903 'query' r1[70163] c"stridable"))
        unknown call_tmp[621119] "expr temp" "maybe param" "maybe type" "temp"
        (621122 'move' call_tmp[621119](70267 call _cond_test call_tmp[621114]))
        if call_tmp[621119]
        {
          unknown call_tmp[621126] "expr temp" "maybe param" "maybe type" "temp"
          (621129 'move' call_tmp[621126](70260 call _stride _mt[243] r1[70163]))
          (70264 call = call_tmp[621126] 1)
        }
      }
    }
    unknown call_tmp[621133] "expr temp" "maybe param" "maybe type" "temp"
    (621136 'move' call_tmp[621133](70285 call _low _mt[243] r1[70163]))
    unknown call_tmp[621140] "expr temp" "maybe param" "maybe type" "temp"
    (621143 'move' call_tmp[621140](70289 call _low _mt[243] r2[70174]))
    (70292 call = call_tmp[621133] call_tmp[621140])
    (475638 'end of statement')
    unknown call_tmp[621147] "expr temp" "maybe param" "maybe type" "temp"
    (621150 'move' call_tmp[621147](70296 call _high _mt[243] r1[70163]))
    unknown call_tmp[621154] "expr temp" "maybe param" "maybe type" "temp"
    (621157 'move' call_tmp[621154](70300 call _high _mt[243] r2[70174]))
    (70303 call = call_tmp[621147] call_tmp[621154])
    (475639 'end of statement')
    unknown call_tmp[621159] "expr temp" "maybe param" "maybe type" "temp"
    (621162 'move' call_tmp[621159](455906 'query' r1[70163] c"stridable"))
    unknown call_tmp[621164] "expr temp" "maybe param" "maybe type" "temp"
    (621167 'move' call_tmp[621164](70333 call _cond_test call_tmp[621159]))
    if call_tmp[621164]
    {
      unknown call_tmp[621171] "expr temp" "maybe param" "maybe type" "temp"
      (621174 'move' call_tmp[621171](70308 call _alignment _mt[243] r1[70163]))
      unknown call_tmp[621178] "expr temp" "maybe param" "maybe type" "temp"
      (621181 'move' call_tmp[621178](70313 call alignment _mt[243] r2[70174]))
      unknown call_tmp[621183] "expr temp" "maybe param" "maybe type" "temp"
      (621186 'move' call_tmp[621183](70317 call chpl__idxToInt call_tmp[621178]))
      (70318 call = call_tmp[621171] call_tmp[621183])
      (475640 'end of statement')
      unknown call_tmp[621190] "expr temp" "maybe param" "maybe type" "temp"
      (621193 'move' call_tmp[621190](70323 call _aligned _mt[243] r1[70163]))
      unknown call_tmp[621197] "expr temp" "maybe param" "maybe type" "temp"
      (621200 'move' call_tmp[621197](70327 call aligned _mt[243] r2[70174]))
      (70330 call = call_tmp[621190] call_tmp[621197])
    }
    (510460 return _void[55])
  }
  function +[70353](arg r[70350]:range[64319](?), arg offset[70356]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510464] "RVV" "temp"
    unknown call_tmp[621204] "expr temp" "maybe param" "maybe type" "temp"
    (621207 'move' call_tmp[621204](70361 call intIdxType _mt[243] r[70350]))
    unknown call_tmp[621209] "maybe param" "maybe type" "temp"
    (621212 'move' call_tmp[621209](70364 call _cast call_tmp[621204] offset[70356]))
    const i[70366] "dead at end of block" "const" "insert auto destroy"
    (541190 'init var' i[70366] call_tmp[621209])
    (70369 'end of statement')
    unknown call_tmp[621214] "expr temp" "maybe param" "maybe type" "temp"
    (621217 'move' call_tmp[621214](455930 'query' r[70350] 1))
    unknown strType[70375] "dead at end of block" "insert auto destroy" "type variable"(70374 call chpl__rangeStrideType call_tmp[621214])
    unknown call_tmp[621219] "expr temp" "maybe param" "maybe type" "temp"
    (621222 'move' call_tmp[621219](541194 'query' r[70350] 1))
    (541197 'move' strType[70375](541193 call chpl__rangeStrideType call_tmp[621219]))
    (475642 'end of statement')
    unknown call_tmp[621224] "expr temp" "maybe param" "maybe type" "temp"
    (621227 'move' call_tmp[621224](455933 'query' r[70350] 1))
    unknown call_tmp[621229] "expr temp" "maybe param" "maybe type" "temp"
    (621232 'move' call_tmp[621229](455939 'query' r[70350] 2))
    unknown call_tmp[621234] "expr temp" "maybe param" "maybe type" "temp"
    (621237 'move' call_tmp[621234](455945 'query' r[70350] 3))
    unknown call_tmp[621243] "expr temp" "maybe param" "maybe type" "temp"
    (621246 'move' call_tmp[621243](70391 call _low _mt[243] r[70350]))
    unknown call_tmp[621248] "expr temp" "maybe param" "maybe type" "temp"
    (621251 'move' call_tmp[621248](70395 call + call_tmp[621243] i[70366]))
    unknown call_tmp[621253] "expr temp" "maybe param" "maybe type" "temp"
    (621256 'move' call_tmp[621253](70398 call(70387 call (partial) chpl_intToIdx _mt[243] r[70350]) call_tmp[621248]))
    unknown call_tmp[621262] "expr temp" "maybe param" "maybe type" "temp"
    (621265 'move' call_tmp[621262](70404 call _high _mt[243] r[70350]))
    unknown call_tmp[621267] "expr temp" "maybe param" "maybe type" "temp"
    (621270 'move' call_tmp[621267](70408 call + call_tmp[621262] i[70366]))
    unknown call_tmp[621272] "expr temp" "maybe param" "maybe type" "temp"
    (621275 'move' call_tmp[621272](70411 call(70400 call (partial) chpl_intToIdx _mt[243] r[70350]) call_tmp[621267]))
    unknown call_tmp[621279] "expr temp" "maybe param" "maybe type" "temp"
    (621282 'move' call_tmp[621279](70413 call stride _mt[243] r[70350]))
    unknown call_tmp[621284] "expr temp" "maybe param" "maybe type" "temp"
    (621287 'move' call_tmp[621284](70417 call _cast strType[70375] call_tmp[621279]))
    unknown call_tmp[621293] "expr temp" "maybe param" "maybe type" "temp"
    (621296 'move' call_tmp[621293](70425 call alignment _mt[243] r[70350]))
    unknown call_tmp[621298] "expr temp" "maybe param" "maybe type" "temp"
    (621301 'move' call_tmp[621298](70429 call chpl__idxToInt call_tmp[621293]))
    unknown call_tmp[621303] "expr temp" "maybe param" "maybe type" "temp"
    (621306 'move' call_tmp[621303](70431 call + call_tmp[621298] i[70366]))
    unknown call_tmp[621308] "expr temp" "maybe param" "maybe type" "temp"
    (621311 'move' call_tmp[621308](70434 call(70420 call (partial) chpl_intToIdx _mt[243] r[70350]) call_tmp[621303]))
    unknown call_tmp[621315] "expr temp" "maybe param" "maybe type" "temp"
    (621318 'move' call_tmp[621315](70436 call aligned _mt[243] r[70350]))
    unknown call_tmp[621320] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621323 'move' call_tmp[621320](747972 'new' range[64319](?) call_tmp[621224] call_tmp[621229] call_tmp[621234] call_tmp[621253] call_tmp[621272] call_tmp[621284] call_tmp[621308] call_tmp[621315]))
    (510469 'move' ret[510464](510468 'deref' call_tmp[621320]))
    gotoReturn _end_+[510462] _end_+[510462]
    (475643 'end of statement' i[70366] i[70366] strType[70375] i[70366])
    label _end_+[510462]
    (510466 return ret[510464])
  }
  function +[70450](arg i[70447]:integral[199](?), arg r[70461]:range[64319](?)) : _unknown[51] "inline"
  {
    unknown ret[510475] "RVV" "temp"
    unknown call_tmp[621325] "expr temp" "maybe param" "maybe type" "temp"
    (621328 'move' call_tmp[621325](70466 call + r[70461] i[70447]))
    (510480 'move' ret[510475](510479 'deref' call_tmp[621325]))
    (510477 return ret[510475])
  }
  function -[70487](arg r[70484]:range[64319](?), arg i[70490]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510484] "RVV" "temp"
    unknown call_tmp[621330] "expr temp" "maybe param" "maybe type" "temp"
    (621333 'move' call_tmp[621330](455968 'query' r[70484] 1))
    unknown strType[70497] "dead at end of block" "insert auto destroy" "type variable"(70496 call chpl__rangeStrideType call_tmp[621330])
    unknown call_tmp[621335] "expr temp" "maybe param" "maybe type" "temp"
    (621338 'move' call_tmp[621335](541201 'query' r[70484] 1))
    (541204 'move' strType[70497](541200 call chpl__rangeStrideType call_tmp[621335]))
    (475649 'end of statement')
    unknown call_tmp[621340] "expr temp" "maybe param" "maybe type" "temp"
    (621343 'move' call_tmp[621340](455971 'query' r[70484] 1))
    unknown call_tmp[621345] "expr temp" "maybe param" "maybe type" "temp"
    (621348 'move' call_tmp[621345](455977 'query' r[70484] 2))
    unknown call_tmp[621350] "expr temp" "maybe param" "maybe type" "temp"
    (621353 'move' call_tmp[621350](455983 'query' r[70484] 3))
    unknown call_tmp[621359] "expr temp" "maybe param" "maybe type" "temp"
    (621362 'move' call_tmp[621359](70512 call _low _mt[243] r[70484]))
    unknown call_tmp[621364] "expr temp" "maybe param" "maybe type" "temp"
    (621367 'move' call_tmp[621364](70516 call - call_tmp[621359] i[70490]))
    unknown call_tmp[621369] "expr temp" "maybe param" "maybe type" "temp"
    (621372 'move' call_tmp[621369](70519 call(70508 call (partial) chpl_intToIdx _mt[243] r[70484]) call_tmp[621364]))
    unknown call_tmp[621378] "expr temp" "maybe param" "maybe type" "temp"
    (621381 'move' call_tmp[621378](70525 call _high _mt[243] r[70484]))
    unknown call_tmp[621383] "expr temp" "maybe param" "maybe type" "temp"
    (621386 'move' call_tmp[621383](70529 call - call_tmp[621378] i[70490]))
    unknown call_tmp[621388] "expr temp" "maybe param" "maybe type" "temp"
    (621391 'move' call_tmp[621388](70532 call(70521 call (partial) chpl_intToIdx _mt[243] r[70484]) call_tmp[621383]))
    unknown call_tmp[621395] "expr temp" "maybe param" "maybe type" "temp"
    (621398 'move' call_tmp[621395](70534 call stride _mt[243] r[70484]))
    unknown call_tmp[621400] "expr temp" "maybe param" "maybe type" "temp"
    (621403 'move' call_tmp[621400](70538 call _cast strType[70497] call_tmp[621395]))
    unknown call_tmp[621409] "expr temp" "maybe param" "maybe type" "temp"
    (621412 'move' call_tmp[621409](70546 call alignment _mt[243] r[70484]))
    unknown call_tmp[621414] "expr temp" "maybe param" "maybe type" "temp"
    (621417 'move' call_tmp[621414](70550 call chpl__idxToInt call_tmp[621409]))
    unknown call_tmp[621419] "expr temp" "maybe param" "maybe type" "temp"
    (621422 'move' call_tmp[621419](70552 call - call_tmp[621414] i[70490]))
    unknown call_tmp[621424] "expr temp" "maybe param" "maybe type" "temp"
    (621427 'move' call_tmp[621424](70555 call(70541 call (partial) chpl_intToIdx _mt[243] r[70484]) call_tmp[621419]))
    unknown call_tmp[621431] "expr temp" "maybe param" "maybe type" "temp"
    (621434 'move' call_tmp[621431](70557 call aligned _mt[243] r[70484]))
    unknown call_tmp[621436] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621439 'move' call_tmp[621436](747973 'new' range[64319](?) call_tmp[621340] call_tmp[621345] call_tmp[621350] call_tmp[621369] call_tmp[621388] call_tmp[621400] call_tmp[621424] call_tmp[621431]))
    (510489 'move' ret[510484](510488 'deref' call_tmp[621436]))
    gotoReturn _end_-[510482] _end_-[510482]
    (475650 'end of statement' strType[70497])
    label _end_-[510482]
    (510486 return ret[510484])
  }
  function chpl_check_step_integral[70569](arg step[70567]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[621441] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621444 'move' call_tmp[621441](70573 'typeof' step[70567]))
    unknown call_tmp[621446] "expr temp" "maybe param" "maybe type" "temp"
    (621449 'move' call_tmp[621446](70575 call isIntegral call_tmp[621441]))
    unknown call_tmp[621451] "expr temp" "maybe param" "maybe type" "temp"
    (621454 'move' call_tmp[621451](70576 call ! call_tmp[621446]))
    unknown call_tmp[621456] "expr temp" "maybe param" "maybe type" "temp"
    (621459 'move' call_tmp[621456](70604 call _cond_test call_tmp[621451]))
    if call_tmp[621456]
    {
      unknown call_tmp[621461] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621464 'move' call_tmp[621461](70598 'typeof' step[70567]))
      unknown call_tmp[621466] "expr temp" "maybe param" "maybe type" "temp"
      (621469 'move' call_tmp[621466](70600 call _cast string[26] call_tmp[621461]))
      (70602 call compilerError "can't apply 'by' using step of a non-integral type " call_tmp[621466])
    }
    (510493 return _void[55])
  }
  function chpl_need_to_check_step[70616](arg step[70614]:_any[178](?), arg strType[70618]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[510497] "RVV" "param" "temp"
    unknown call_tmp[621471] "expr temp" "maybe param" "maybe type" "temp"
    (621474 'move' call_tmp[621471](70624 call isInt strType[70618]))
    (70626 call compilerAssert call_tmp[621471])
    (475653 'end of statement')
    unknown tmp[420170] "maybe param" "temp"
    unknown call_tmp[621476] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621479 'move' call_tmp[621476](70630 'typeof' step[70614]))
    (420181 'move' tmp[420170](70632 call != call_tmp[621476] strType[70618]))
    unknown call_tmp[621481] "expr temp" "maybe param" "maybe type" "temp"
    (621484 'move' call_tmp[621481](420183 call _cond_invalid tmp[420170]))
    if call_tmp[621481]
    {
      (420186 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557179] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557180] "maybe param" "temp"
    unknown call_tmp[621486] "expr temp" "maybe param" "maybe type" "temp"
    (621489 'move' call_tmp[621486](420171 call isTrue tmp[420170]))
    (557185 'move' tmp[557180](557183 call _cond_test call_tmp[621486]))
    if tmp[557180]
    {
      unknown tmp[557187] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621491] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621494 'move' call_tmp[621491](70636 'typeof' step[70614]))
      unknown call_tmp[621496] "expr temp" "maybe param" "maybe type" "temp"
      (621499 'move' call_tmp[621496](70638 call numBits call_tmp[621491]))
      unknown call_tmp[621501] "expr temp" "maybe param" "maybe type" "temp"
      (621504 'move' call_tmp[621501](70642 call numBits strType[70618]))
      unknown call_tmp[621506] "expr temp" "maybe param" "maybe type" "temp"
      (621509 'move' call_tmp[621506](70643 call >= call_tmp[621496] call_tmp[621501]))
      (557189 'move' tmp[557187](420174 call isTrue call_tmp[621506]))
      (557194 'move' tmp[557179](557191 '_paramFoldLogical' tmp[557180] tmp[557187]))
    }
    {
      (557199 'move' tmp[557179](557196 '_paramFoldLogical' tmp[557180] 0))
    }
    (510502 'move' ret[510497](510501 'deref' tmp[557179]))
    (510499 return ret[510497])
  }
  function chpl_range_check_stride[70655](arg step[70653]:_any[178](?), arg idxType[70657]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70662 call chpl_check_step_integral step[70653])
    (475656 'end of statement')
    unknown strType[70669] "dead at end of block" "insert auto destroy" "type variable"(70668 call chpl__rangeStrideType idxType[70657])
    (541209 'move' strType[70669](541207 call chpl__rangeStrideType idxType[70657]))
    (475657 'end of statement')
    unknown call_tmp[621511] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621514 'move' call_tmp[621511](70674 'typeof' step[70653]))
    unknown call_tmp[621516] "expr temp" "maybe param" "maybe type" "temp"
    (621519 'move' call_tmp[621516](70676 call numBits call_tmp[621511]))
    unknown call_tmp[621521] "expr temp" "maybe param" "maybe type" "temp"
    (621524 'move' call_tmp[621521](70680 call numBits strType[70669]))
    unknown call_tmp[621526] "expr temp" "maybe param" "maybe type" "temp"
    (621529 'move' call_tmp[621526](70681 call > call_tmp[621516] call_tmp[621521]))
    unknown call_tmp[621531] "expr temp" "maybe param" "maybe type" "temp"
    (621534 'move' call_tmp[621531](70730 call _cond_test call_tmp[621526]))
    if call_tmp[621531]
    {
      unknown call_tmp[621536] "expr temp" "maybe param" "maybe type" "temp"
      (621539 'move' call_tmp[621536](70704 call _cast string[26] idxType[70657]))
      unknown call_tmp[621541] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621544 'move' call_tmp[621541](70724 'typeof' step[70653]))
      unknown call_tmp[621546] "expr temp" "maybe param" "maybe type" "temp"
      (621549 'move' call_tmp[621546](70726 call _cast string[26] call_tmp[621541]))
      (70728 call compilerError "can't apply 'by' to a range with idxType " call_tmp[621536] " using a step of type " call_tmp[621546])
    }
    unknown call_tmp[621551] "expr temp" "maybe param" "maybe type" "temp"
    (621554 'move' call_tmp[621551](70825 call _cond_test 1))
    if call_tmp[621551]
    {
      unknown call_tmp[621556] "expr temp" "maybe param" "maybe type" "temp"
      (621559 'move' call_tmp[621556](70738 call == step[70653] 0))
      unknown call_tmp[621561] "expr temp" "maybe param" "maybe type" "temp"
      (621564 'move' call_tmp[621561](70764 call _cond_test call_tmp[621556]))
      if call_tmp[621561]
      {
        (70762 call boundsCheckHalt module=[255] HaltWrappers[210085] "the step argument of the 'by' operator is zero")
        (357890 'referenced modules list' HaltWrappers[210085])
      }
      unknown tmp[420191] "maybe param" "temp"
      (420202 'move' tmp[420191](70774 call chpl_need_to_check_step step[70653] strType[70669]))
      unknown call_tmp[621566] "expr temp" "maybe param" "maybe type" "temp"
      (621569 'move' call_tmp[621566](420204 call _cond_invalid tmp[420191]))
      if call_tmp[621566]
      {
        (420207 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557206] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557207] "maybe param" "temp"
      unknown call_tmp[621571] "expr temp" "maybe param" "maybe type" "temp"
      (621574 'move' call_tmp[621571](420192 call isTrue tmp[420191]))
      (557212 'move' tmp[557207](557210 call _cond_test call_tmp[621571]))
      if tmp[557207]
      {
        unknown tmp[557214] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621576] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (621579 'move' call_tmp[621576](70781 'typeof' step[70653]))
        unknown call_tmp[621581] "expr temp" "maybe param" "maybe type" "temp"
        (621584 'move' call_tmp[621581](70779 call max strType[70669]))
        unknown call_tmp[621586] "expr temp" "maybe param" "maybe type" "temp"
        (621589 'move' call_tmp[621586](70782 call _cast call_tmp[621576] call_tmp[621581]))
        unknown call_tmp[621591] "expr temp" "maybe param" "maybe type" "temp"
        (621594 'move' call_tmp[621591](70784 call > step[70653] call_tmp[621586]))
        (557216 'move' tmp[557214](420195 call isTrue call_tmp[621591]))
        (557221 'move' tmp[557206](557218 '_paramFoldLogical' tmp[557207] tmp[557214]))
      }
      {
        (557226 'move' tmp[557206](557223 '_paramFoldLogical' tmp[557207] 0))
      }
      unknown call_tmp[621596] "expr temp" "maybe param" "maybe type" "temp"
      (621599 'move' call_tmp[621596](70820 call _cond_test tmp[557206]))
      if call_tmp[621596]
      {
        unknown call_tmp[621601] "expr temp" "maybe param" "maybe type" "temp"
        (621604 'move' call_tmp[621601](70813 call _cast string[26] strType[70669]))
        unknown call_tmp[621606] "expr temp" "maybe param" "maybe type" "temp"
        (621609 'move' call_tmp[621606](70815 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621601]))
        (70818 call boundsCheckHalt module=[255] HaltWrappers[210085] call_tmp[621606])
        (475661 'end of statement' strType[70669])
        (357896 'referenced modules list' HaltWrappers[210085])
      }
    }
    (510504 return _void[55])
  }
  function chpl_range_check_stride[70835](param arg step[70833]:_any[178](?), arg idxType[70837]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70842 call chpl_check_step_integral step[70833])
    (475663 'end of statement')
    unknown strType[70849] "dead at end of block" "insert auto destroy" "type variable"(70848 call chpl__rangeStrideType idxType[70837])
    (541214 'move' strType[70849](541212 call chpl__rangeStrideType idxType[70837]))
    (475664 'end of statement')
    unknown call_tmp[621611] "expr temp" "maybe param" "maybe type" "temp"
    (621614 'move' call_tmp[621611](70854 call == step[70833] 0))
    unknown call_tmp[621616] "expr temp" "maybe param" "maybe type" "temp"
    (621619 'move' call_tmp[621616](70861 call _cond_test call_tmp[621611]))
    if call_tmp[621616]
    {
      (70859 call compilerError "the step argument of the 'by' operator is zero")
    }
    unknown tmp[420212] "maybe param" "temp"
    (420223 'move' tmp[420212](70870 call chpl_need_to_check_step step[70833] strType[70849]))
    unknown call_tmp[621621] "expr temp" "maybe param" "maybe type" "temp"
    (621624 'move' call_tmp[621621](420225 call _cond_invalid tmp[420212]))
    if call_tmp[621621]
    {
      (420228 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557233] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557234] "maybe param" "temp"
    unknown call_tmp[621626] "expr temp" "maybe param" "maybe type" "temp"
    (621629 'move' call_tmp[621626](420213 call isTrue tmp[420212]))
    (557239 'move' tmp[557234](557237 call _cond_test call_tmp[621626]))
    if tmp[557234]
    {
      unknown tmp[557241] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621631] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621634 'move' call_tmp[621631](70877 'typeof' step[70833]))
      unknown call_tmp[621636] "expr temp" "maybe param" "maybe type" "temp"
      (621639 'move' call_tmp[621636](70875 call max strType[70849]))
      unknown call_tmp[621641] "expr temp" "maybe param" "maybe type" "temp"
      (621644 'move' call_tmp[621641](70878 call _cast call_tmp[621631] call_tmp[621636]))
      unknown call_tmp[621646] "expr temp" "maybe param" "maybe type" "temp"
      (621649 'move' call_tmp[621646](70880 call > step[70833] call_tmp[621641]))
      (557243 'move' tmp[557241](420216 call isTrue call_tmp[621646]))
      (557248 'move' tmp[557233](557245 '_paramFoldLogical' tmp[557234] tmp[557241]))
    }
    {
      (557253 'move' tmp[557233](557250 '_paramFoldLogical' tmp[557234] 0))
    }
    unknown call_tmp[621651] "expr temp" "maybe param" "maybe type" "temp"
    (621654 'move' call_tmp[621651](70895 call _cond_test tmp[557233]))
    if call_tmp[621651]
    {
      unknown call_tmp[621656] "expr temp" "maybe param" "maybe type" "temp"
      (621659 'move' call_tmp[621656](70888 call _cast string[26] strType[70849]))
      unknown call_tmp[621661] "expr temp" "maybe param" "maybe type" "temp"
      (621664 'move' call_tmp[621661](70890 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621656]))
      (70893 call compilerError call_tmp[621661])
      (475667 'end of statement' strType[70849])
    }
    (510506 return _void[55])
  }
  function chpl_by_help[70916](arg r[70913]:range[64319](?), arg step[70918]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510510] "RVV" "temp"
    unknown call_tmp[621668] "maybe param" "maybe type" "temp"
    (621671 'move' call_tmp[621668](70922 call low _mt[243] r[70913]))
    unknown call_tmp[621673] "maybe param" "maybe type" "temp"
    (621676 'move' call_tmp[621673](455993 'query' r[70913] 1))
    const lw[70925] "dead at end of block" "const" "insert auto destroy"
    (541216 'init var' lw[70925] call_tmp[621668] call_tmp[621673])
    unknown call_tmp[621680] "maybe param" "maybe type" "temp"
    (621683 'move' call_tmp[621680](70930 call high _mt[243] r[70913]))
    unknown call_tmp[621685] "maybe param" "maybe type" "temp"
    (621688 'move' call_tmp[621685](455996 'query' r[70913] 1))
    const hh[70933] "dead at end of block" "const" "insert auto destroy"
    (541218 'init var' hh[70933] call_tmp[621680] call_tmp[621685])
    unknown call_tmp[621692] "expr temp" "maybe param" "maybe type" "temp"
    (621695 'move' call_tmp[621692](70943 call stride _mt[243] r[70913]))
    unknown call_tmp[621699] "expr temp" "maybe param" "maybe type" "temp"
    (621702 'move' call_tmp[621699](70948 call strType _mt[243] r[70913]))
    unknown call_tmp[621704] "expr temp" "maybe param" "maybe type" "temp"
    (621707 'move' call_tmp[621704](70951 call _cast call_tmp[621699] step[70918]))
    unknown call_tmp[621709] "maybe param" "maybe type" "temp"
    (621712 'move' call_tmp[621709](70953 call * call_tmp[621692] call_tmp[621704]))
    unknown call_tmp[621716] "maybe param" "maybe type" "temp"
    (621719 'move' call_tmp[621716](70939 call strType _mt[243] r[70913]))
    const st[70955] "dead at end of block" "const" "insert auto destroy"
    (541220 'init var' st[70955] call_tmp[621709] call_tmp[621716])
    (70958 'end of statement')
    const tmp[71080] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[557430] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557431] "maybe param" "temp"
    unknown call_tmp[621723] "expr temp" "maybe param" "maybe type" "temp"
    (621726 'move' call_tmp[621723](70975 call(70971 call (partial) isAmbiguous _mt[243] r[70913])))
    (557436 'move' tmp[557431](557434 call _cond_test call_tmp[621723]))
    if tmp[557431]
    {
      unknown tmp[557260] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557261] "maybe param" "temp"
      unknown call_tmp[621730] "expr temp" "maybe param" "maybe type" "temp"
      (621733 'move' call_tmp[621730](70977 call stridable _mt[243] r[70913]))
      (557266 'move' tmp[557261](557264 call _cond_test call_tmp[621730]))
      if tmp[557261]
      {
        unknown tmp[557268] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621737] "expr temp" "maybe param" "maybe type" "temp"
        (621740 'move' call_tmp[621737](70982 call alignment _mt[243] r[70913]))
        (557270 'move' tmp[557268](70986 call _build_tuple 0 call_tmp[621737]))
        (557275 'move' tmp[557260](557272 '_paramFoldLogical' tmp[557261] tmp[557268]))
      }
      {
        unknown tmp[557277] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621744] "expr temp" "maybe param" "maybe type" "temp"
        (621747 'move' call_tmp[621744](70995 call(70990 call (partial) chpl_intToIdx _mt[243] r[70913]) 0))
        (557279 'move' tmp[557277](70997 call _build_tuple 0 call_tmp[621744]))
        (557284 'move' tmp[557260](557281 '_paramFoldLogical' tmp[557261] tmp[557277]))
      }
      (557441 'move' tmp[557430](557438 '_paramFoldLogical' tmp[557431] tmp[557260]))
    }
    {
      unknown tmp[420254] "maybe param" "temp"
      (420265 'move' tmp[420254](71007 call(71003 call (partial) hasLowBound _mt[243] r[70913])))
      unknown call_tmp[621751] "expr temp" "maybe param" "maybe type" "temp"
      (621754 'move' call_tmp[621751](420267 call _cond_invalid tmp[420254]))
      if call_tmp[621751]
      {
        (420270 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557291] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557292] "maybe param" "temp"
      unknown call_tmp[621756] "expr temp" "maybe param" "maybe type" "temp"
      (621759 'move' call_tmp[621756](420255 call isTrue tmp[420254]))
      (557297 'move' tmp[557292](557295 call _cond_test call_tmp[621756]))
      if tmp[557292]
      {
        unknown tmp[557299] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621761] "expr temp" "maybe param" "maybe type" "temp"
        (621764 'move' call_tmp[621761](71010 call > st[70955] 0))
        (557301 'move' tmp[557299](420258 call isTrue call_tmp[621761]))
        (557306 'move' tmp[557291](557303 '_paramFoldLogical' tmp[557292] tmp[557299]))
      }
      {
        (557311 'move' tmp[557291](557308 '_paramFoldLogical' tmp[557292] 0))
      }
      unknown tmp[557403] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557404] "maybe param" "temp"
      (557409 'move' tmp[557404](557407 call _cond_test tmp[557291]))
      if tmp[557404]
      {
        unknown tmp[557411] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621768] "expr temp" "maybe param" "maybe type" "temp"
        (621771 'move' call_tmp[621768](71016 call alignedLow _mt[243] r[70913]))
        (557413 'move' tmp[557411](71020 call _build_tuple 1 call_tmp[621768]))
        (557418 'move' tmp[557403](557415 '_paramFoldLogical' tmp[557404] tmp[557411]))
      }
      {
        unknown tmp[420233] "maybe param" "temp"
        (420244 'move' tmp[420233](71027 call(71023 call (partial) hasHighBound _mt[243] r[70913])))
        unknown call_tmp[621775] "expr temp" "maybe param" "maybe type" "temp"
        (621778 'move' call_tmp[621775](420246 call _cond_invalid tmp[420233]))
        if call_tmp[621775]
        {
          (420249 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557318] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557319] "maybe param" "temp"
        unknown call_tmp[621780] "expr temp" "maybe param" "maybe type" "temp"
        (621783 'move' call_tmp[621780](420234 call isTrue tmp[420233]))
        (557324 'move' tmp[557319](557322 call _cond_test call_tmp[621780]))
        if tmp[557319]
        {
          unknown tmp[557326] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621785] "expr temp" "maybe param" "maybe type" "temp"
          (621788 'move' call_tmp[621785](71030 call < st[70955] 0))
          (557328 'move' tmp[557326](420237 call isTrue call_tmp[621785]))
          (557333 'move' tmp[557318](557330 '_paramFoldLogical' tmp[557319] tmp[557326]))
        }
        {
          (557338 'move' tmp[557318](557335 '_paramFoldLogical' tmp[557319] 0))
        }
        unknown tmp[557376] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[557377] "maybe param" "temp"
        (557382 'move' tmp[557377](557380 call _cond_test tmp[557318]))
        if tmp[557377]
        {
          unknown tmp[557384] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621792] "expr temp" "maybe param" "maybe type" "temp"
          (621795 'move' call_tmp[621792](71036 call alignedHigh _mt[243] r[70913]))
          (557386 'move' tmp[557384](71040 call _build_tuple 1 call_tmp[621792]))
          (557391 'move' tmp[557376](557388 '_paramFoldLogical' tmp[557377] tmp[557384]))
        }
        {
          unknown tmp[557345] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[557346] "maybe param" "temp"
          unknown call_tmp[621799] "expr temp" "maybe param" "maybe type" "temp"
          (621802 'move' call_tmp[621799](71043 call stridable _mt[243] r[70913]))
          (557351 'move' tmp[557346](557349 call _cond_test call_tmp[621799]))
          if tmp[557346]
          {
            unknown tmp[557353] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621806] "expr temp" "maybe param" "maybe type" "temp"
            (621809 'move' call_tmp[621806](71047 call aligned _mt[243] r[70913]))
            unknown call_tmp[621813] "expr temp" "maybe param" "maybe type" "temp"
            (621816 'move' call_tmp[621813](71051 call alignment _mt[243] r[70913]))
            (557355 'move' tmp[557353](71055 call _build_tuple call_tmp[621806] call_tmp[621813]))
            (557360 'move' tmp[557345](557357 '_paramFoldLogical' tmp[557346] tmp[557353]))
          }
          {
            unknown tmp[557362] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621820] "expr temp" "maybe param" "maybe type" "temp"
            (621823 'move' call_tmp[621820](71064 call(71059 call (partial) chpl_intToIdx _mt[243] r[70913]) 0))
            (557364 'move' tmp[557362](71066 call _build_tuple 0 call_tmp[621820]))
            (557369 'move' tmp[557345](557366 '_paramFoldLogical' tmp[557346] tmp[557362]))
          }
          (557396 'move' tmp[557376](557393 '_paramFoldLogical' tmp[557377] tmp[557345]))
        }
        (557423 'move' tmp[557403](557420 '_paramFoldLogical' tmp[557404] tmp[557376]))
      }
      (557446 'move' tmp[557430](557443 '_paramFoldLogical' tmp[557431] tmp[557403]))
    }
    unknown call_tmp[621825] "expr temp" "maybe param" "maybe type" "temp"
    (621828 'move' call_tmp[621825](455999 'query' r[70913] 1))
    unknown call_tmp[621830] "maybe param" "maybe type" "temp"
    (621833 'move' call_tmp[621830](70968 call _build_tuple bool[10] call_tmp[621825]))
    (541222 'init var' tmp[71080] tmp[557430] call_tmp[621830])
    (71087 call _check_tuple_var_decl tmp[71080] 2)
    (475669 'end of statement')
    unknown call_tmp[621835] "maybe param" "maybe type" "temp"
    (621838 'move' call_tmp[621835](71081 call tmp[71080] 0))
    const ald[70960] "dead at end of block" "const" "insert auto destroy"
    (541224 'init var' ald[70960] call_tmp[621835])
    unknown call_tmp[621840] "maybe param" "maybe type" "temp"
    (621843 'move' call_tmp[621840](71084 call tmp[71080] 1))
    const alt[70962] "dead at end of block" "const" "insert auto destroy"
    (541226 'init var' alt[70962] call_tmp[621840])
    (71092 'end of statement')
    unknown call_tmp[621845] "expr temp" "maybe param" "maybe type" "temp"
    (621848 'move' call_tmp[621845](456002 'query' r[70913] 1))
    unknown call_tmp[621850] "expr temp" "maybe param" "maybe type" "temp"
    (621853 'move' call_tmp[621850](456008 'query' r[70913] 2))
    unknown call_tmp[621855] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621858 'move' call_tmp[621855](747974 'new' range[64319](?) call_tmp[621845] call_tmp[621850] 1 lw[70925] hh[70933] st[70955] alt[70962] ald[70960]))
    (510515 'move' ret[510510](510514 'deref' call_tmp[621855]))
    gotoReturn _end_chpl_by_help[510508] _end_chpl_by_help[510508]
    (475670 'end of statement' lw[70925] hh[70933] st[70955] alt[70962] ald[70960])
    label _end_chpl_by_help[510508]
    (510512 return ret[510510])
  }
  function chpl_by[71113](arg r[71111]:_any[178](?), arg step[71115]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510521] "RVV" "temp"
    unknown call_tmp[621860] "expr temp" "maybe param" "maybe type" "temp"
    (621863 'move' call_tmp[621860](71120 call isRange r[71111]))
    unknown call_tmp[621865] "expr temp" "maybe param" "maybe type" "temp"
    (621868 'move' call_tmp[621865](71121 call ! call_tmp[621860]))
    unknown call_tmp[621870] "expr temp" "maybe param" "maybe type" "temp"
    (621873 'move' call_tmp[621870](71144 call _cond_test call_tmp[621865]))
    if call_tmp[621870]
    {
      (71142 call compilerError "the first argument of the 'by' operator is not a range")
    }
    unknown call_tmp[621877] "expr temp" "maybe param" "maybe type" "temp"
    (621880 'move' call_tmp[621877](71154 call idxType _mt[243] r[71111]))
    (71157 call chpl_range_check_stride step[71115] call_tmp[621877])
    (475677 'end of statement')
    unknown call_tmp[621882] "expr temp" "maybe param" "maybe type" "temp"
    (621885 'move' call_tmp[621882](71163 call chpl_by_help r[71111] step[71115]))
    (510526 'move' ret[510521](510525 'deref' call_tmp[621882]))
    (510523 return ret[510521])
  }
  function chpl_by[71177](arg r[71174]:range[64319](?), param arg step[71179]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510530] "RVV" "temp"
    unknown call_tmp[621889] "expr temp" "maybe param" "maybe type" "temp"
    (621892 'move' call_tmp[621889](71185 call idxType _mt[243] r[71174]))
    (71188 call chpl_range_check_stride step[71179] call_tmp[621889])
    (475679 'end of statement')
    unknown call_tmp[621896] "expr temp" "maybe param" "maybe type" "temp"
    (621899 'move' call_tmp[621896](71196 call strType _mt[243] r[71174]))
    unknown call_tmp[621901] "expr temp" "maybe param" "maybe type" "temp"
    (621904 'move' call_tmp[621901](71199 call _cast call_tmp[621896] step[71179]))
    unknown call_tmp[621906] "expr temp" "maybe param" "maybe type" "temp"
    (621909 'move' call_tmp[621906](71201 call chpl_by_help r[71174] call_tmp[621901]))
    (510535 'move' ret[510530](510534 'deref' call_tmp[621906]))
    (510532 return ret[510530])
  }
  function chpl_align[71220](arg r[71217]:range[64319](?), arg algn[71223] :
  (456028 'query' r[71217] 1)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510539] "RVV" "temp"
    unknown call_tmp[621911] "expr temp" "maybe param" "maybe type" "temp"
    (621914 'move' call_tmp[621911](456031 'query' r[71217] 1))
    unknown call_tmp[621916] "expr temp" "maybe param" "maybe type" "temp"
    (621919 'move' call_tmp[621916](456037 'query' r[71217] 2))
    unknown call_tmp[621925] "expr temp" "maybe param" "maybe type" "temp"
    (621928 'move' call_tmp[621925](71237 call _low _mt[243] r[71217]))
    unknown call_tmp[621930] "expr temp" "maybe param" "maybe type" "temp"
    (621933 'move' call_tmp[621930](71241 call(71233 call (partial) chpl_intToIdx _mt[243] r[71217]) call_tmp[621925]))
    unknown call_tmp[621939] "expr temp" "maybe param" "maybe type" "temp"
    (621942 'move' call_tmp[621939](71247 call _high _mt[243] r[71217]))
    unknown call_tmp[621944] "expr temp" "maybe param" "maybe type" "temp"
    (621947 'move' call_tmp[621944](71251 call(71243 call (partial) chpl_intToIdx _mt[243] r[71217]) call_tmp[621939]))
    unknown call_tmp[621951] "expr temp" "maybe param" "maybe type" "temp"
    (621954 'move' call_tmp[621951](71253 call stride _mt[243] r[71217]))
    unknown call_tmp[621956] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621959 'move' call_tmp[621956](747975 'new' range[64319](?) call_tmp[621911] call_tmp[621916] 1 call_tmp[621930] call_tmp[621944] call_tmp[621951] algn[71223] 1))
    (510544 'move' ret[510539](510543 'deref' call_tmp[621956]))
    (510541 return ret[510539])
  }
  function chpl_align[71278](arg r[71275]:range[64319](?), arg algn[71280]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510548] "RVV" "temp"
    unknown call_tmp[621961] "expr temp" "maybe param" "maybe type" "temp"
    (621964 'move' call_tmp[621961](456050 'query' r[71275] 1))
    unknown call_tmp[621966] "expr temp" "maybe param" "maybe type" "temp"
    (621969 'move' call_tmp[621966](71303 call _cast string[26] call_tmp[621961]))
    unknown call_tmp[621971] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621974 'move' call_tmp[621971](71323 'typeof' algn[71280]))
    unknown call_tmp[621976] "expr temp" "maybe param" "maybe type" "temp"
    (621979 'move' call_tmp[621976](71325 call _cast string[26] call_tmp[621971]))
    (71327 call compilerError "can't align a range with idxType " call_tmp[621966] " using a value of type " call_tmp[621976])
    (475682 'end of statement')
    (510553 'move' ret[510548](510552 'deref' r[71275]))
    (510550 return ret[510548])
  }
  function range[64319](?).offset[71342](arg _mt[71347]:_MT[238], arg this[71344]:range[64319](?) :
  range[64319](?), in arg offset[71339]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510557] "RVV" "temp"
    unknown call_tmp[621985] "expr temp" "maybe param" "maybe type" "temp"
    (621988 'move' call_tmp[621985](375126 call intIdxType _mt[243] this[71344]))
    unknown call_tmp[621990] "maybe param" "maybe type" "temp"
    (621993 'move' call_tmp[621990](71355 call(71350 call (partial) safeCast _mt[243] offset[71339]) call_tmp[621985]))
    unknown offs[71356] "dead at end of block" "insert auto destroy"
    (541228 'init var' offs[71356] call_tmp[621990])
    (71359 'end of statement')
    unknown call_tmp[621997] "expr temp" "maybe param" "maybe type" "temp"
    (622000 'move' call_tmp[621997](375131 call stridable _mt[243] this[71344]))
    unknown call_tmp[622002] "expr temp" "maybe param" "maybe type" "temp"
    (622005 'move' call_tmp[622002](71362 call ! call_tmp[621997]))
    unknown call_tmp[622007] "expr temp" "maybe param" "maybe type" "temp"
    (622010 'move' call_tmp[622007](71391 call _cond_test call_tmp[622002]))
    if call_tmp[622007]
    {
      (71383 call compilerWarning "invoking 'offset' on an unstrided range has no effect.")
      (475684 'end of statement')
      (71388 call = offs[71356] 0)
      (475685 'end of statement' offs[71356])
    }
    unknown tmp[420275] "maybe param" "temp"
    (420286 'move' tmp[420275] 1)
    unknown call_tmp[622012] "expr temp" "maybe param" "maybe type" "temp"
    (622015 'move' call_tmp[622012](420288 call _cond_invalid tmp[420275]))
    if call_tmp[622012]
    {
      (420291 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557453] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557454] "maybe param" "temp"
    unknown call_tmp[622017] "expr temp" "maybe param" "maybe type" "temp"
    (622020 'move' call_tmp[622017](420276 call isTrue tmp[420275]))
    (557459 'move' tmp[557454](557457 call _cond_test call_tmp[622017]))
    if tmp[557454]
    {
      unknown tmp[557461] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622024] "expr temp" "maybe param" "maybe type" "temp"
      (622027 'move' call_tmp[622024](71398 call(375137 call (partial) hasFirst _mt[243] this[71344])))
      unknown call_tmp[622029] "expr temp" "maybe param" "maybe type" "temp"
      (622032 'move' call_tmp[622029](71399 call ! call_tmp[622024]))
      (557463 'move' tmp[557461](420279 call isTrue call_tmp[622029]))
      (557468 'move' tmp[557453](557465 '_paramFoldLogical' tmp[557454] tmp[557461]))
    }
    {
      (557473 'move' tmp[557453](557470 '_paramFoldLogical' tmp[557454] 0))
    }
    unknown call_tmp[622034] "expr temp" "maybe param" "maybe type" "temp"
    (622037 'move' call_tmp[622034](71427 call _cond_test tmp[557453]))
    if call_tmp[622034]
    {
      (71425 call boundsCheckHalt module=[255] HaltWrappers[210085] "invoking 'offset' on a range without the first index")
      (357928 'referenced modules list' HaltWrappers[210085])
    }
    unknown call_tmp[622041] "expr temp" "maybe param" "maybe type" "temp"
    (622044 'move' call_tmp[622041](375143 call idxType _mt[243] this[71344]))
    unknown call_tmp[622048] "expr temp" "maybe param" "maybe type" "temp"
    (622051 'move' call_tmp[622048](375148 call boundedType _mt[243] this[71344]))
    unknown call_tmp[622055] "expr temp" "maybe param" "maybe type" "temp"
    (622058 'move' call_tmp[622055](375153 call stridable _mt[243] this[71344]))
    unknown call_tmp[622062] "expr temp" "maybe param" "maybe type" "temp"
    (622065 'move' call_tmp[622062](375157 call low _mt[243] this[71344]))
    unknown call_tmp[622069] "expr temp" "maybe param" "maybe type" "temp"
    (622072 'move' call_tmp[622069](375161 call high _mt[243] this[71344]))
    unknown call_tmp[622076] "expr temp" "maybe param" "maybe type" "temp"
    (622079 'move' call_tmp[622076](375165 call stride _mt[243] this[71344]))
    unknown call_tmp[622085] "expr temp" "maybe param" "maybe type" "temp"
    (622088 'move' call_tmp[622085](71443 call firstAsInt _mt[243] this[71344]))
    unknown call_tmp[622090] "expr temp" "maybe param" "maybe type" "temp"
    (622093 'move' call_tmp[622090](71447 call + call_tmp[622085] offs[71356]))
    unknown call_tmp[622095] "expr temp" "maybe param" "maybe type" "temp"
    (622098 'move' call_tmp[622095](71450 call(375169 call (partial) chpl_intToIdx _mt[243] this[71344]) call_tmp[622090]))
    unknown call_tmp[622100] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (622103 'move' call_tmp[622100](747976 'new' range[64319](?) call_tmp[622041] call_tmp[622048] call_tmp[622055] call_tmp[622062] call_tmp[622069] call_tmp[622076] call_tmp[622095] 1))
    (510562 'move' ret[510557](510561 'deref' call_tmp[622100]))
    gotoReturn _end_offset[510555] _end_offset[510555]
    (475689 'end of statement' offs[71356])
    label _end_offset[510555]
    (510559 return ret[510557])
  }
  function range[64319](?).this[71467](arg _mt[71472]:_MT[238], const arg this[71469]:range[64319](?) :
  range[64319](?), arg other[71464]:range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510650] "RVV" "temp"
    unknown ambig[71475] "dead at end of block" "insert auto destroy"
    (541230 'init var' ambig[71475] 0)
    (71478 'end of statement')
    unknown tmp[420317] "maybe param" "temp"
    (420328 'move' tmp[420317](71485 call(71481 call (partial) isAmbiguous _mt[243] this[71469])))
    unknown call_tmp[622107] "expr temp" "maybe param" "maybe type" "temp"
    (622110 'move' call_tmp[622107](420330 call _cond_invalid tmp[420317]))
    if call_tmp[622107]
    {
      (420333 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[557480] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557481] "maybe param" "temp"
    unknown call_tmp[622112] "expr temp" "maybe param" "maybe type" "temp"
    (622115 'move' call_tmp[622112](420318 call isTrue tmp[420317]))
    (557486 'move' tmp[557481](557484 call _cond_test call_tmp[622112]))
    if tmp[557481]
    {
      (557491 'move' tmp[557480](557488 '_paramFoldLogical' tmp[557481] 1))
    }
    {
      unknown tmp[557493] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622119] "expr temp" "maybe param" "maybe type" "temp"
      (622122 'move' call_tmp[622119](71491 call(71487 call (partial) isAmbiguous _mt[243] other[71464])))
      (557495 'move' tmp[557493](420322 call isTrue call_tmp[622119]))
      (557500 'move' tmp[557480](557497 '_paramFoldLogical' tmp[557481] tmp[557493]))
    }
    unknown call_tmp[622124] "expr temp" "maybe param" "maybe type" "temp"
    (622127 'move' call_tmp[622124](71583 call _cond_test tmp[557480]))
    if call_tmp[622124]
    {
      unknown call_tmp[622131] "expr temp" "maybe param" "maybe type" "temp"
      (622134 'move' call_tmp[622131](71496 call stride _mt[243] this[71469]))
      unknown call_tmp[622136] "maybe param" "maybe type" "temp"
      (622139 'move' call_tmp[622136](71500 call abs call_tmp[622131]))
      unknown st1[71501] "dead at end of block" "insert auto destroy"
      (541232 'init var' st1[71501] call_tmp[622136])
      (71504 'end of statement')
      unknown call_tmp[622143] "expr temp" "maybe param" "maybe type" "temp"
      (622146 'move' call_tmp[622143](71508 call stride _mt[243] other[71464]))
      unknown call_tmp[622148] "maybe param" "maybe type" "temp"
      (622151 'move' call_tmp[622148](71512 call abs call_tmp[622143]))
      unknown st2[71513] "dead at end of block" "insert auto destroy"
      (541234 'init var' st2[71513] call_tmp[622148])
      (71516 'end of statement')
      unknown call_tmp[622153] "maybe param" "maybe type" "temp"
      (622156 'move' call_tmp[622153](71526 call chpl__extendedEuclid st1[71501] st2[71513]))
      unknown tmp[71527] "dead at end of block" "insert auto destroy" "temp"
      (541236 'init var' tmp[71527] call_tmp[622153])
      (71534 call _check_tuple_var_decl tmp[71527] 2)
      (475692 'end of statement')
      unknown call_tmp[622158] "maybe param" "maybe type" "temp"
      (622161 'move' call_tmp[622158](71528 call tmp[71527] 0))
      unknown g[71517] "dead at end of block" "insert auto destroy"
      (541238 'init var' g[71517] call_tmp[622158])
      unknown call_tmp[622163] "maybe param" "maybe type" "temp"
      (622166 'move' call_tmp[622163](71531 call tmp[71527] 1))
      unknown x[71519] "dead at end of block" "insert auto destroy"
      (541240 'init var' x[71519] call_tmp[622163])
      (71539 'end of statement')
      unknown tmp[420296] "maybe param" "temp"
      (420307 'move' tmp[420296] 1)
      unknown call_tmp[622168] "expr temp" "maybe param" "maybe type" "temp"
      (622171 'move' call_tmp[622168](420309 call _cond_invalid tmp[420296]))
      if call_tmp[622168]
      {
        (420312 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557507] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557508] "maybe param" "temp"
      unknown call_tmp[622173] "expr temp" "maybe param" "maybe type" "temp"
      (622176 'move' call_tmp[622173](420297 call isTrue tmp[420296]))
      (557513 'move' tmp[557508](557511 call _cond_test call_tmp[622173]))
      if tmp[557508]
      {
        unknown tmp[557515] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622178] "expr temp" "maybe param" "maybe type" "temp"
        (622181 'move' call_tmp[622178](71543 call > g[71517] 1))
        (557517 'move' tmp[557515](420300 call isTrue call_tmp[622178]))
        (557522 'move' tmp[557507](557519 '_paramFoldLogical' tmp[557508] tmp[557515]))
      }
      {
        (557527 'move' tmp[557507](557524 '_paramFoldLogical' tmp[557508] 0))
      }
      unknown call_tmp[622183] "expr temp" "maybe param" "maybe type" "temp"
      (622186 'move' call_tmp[622183](71573 call _cond_test tmp[557507]))
      if call_tmp[622183]
      {
        (71571 call boundsCheckHalt module=[255] HaltWrappers[210085] "Cannot slice ranges with ambiguous alignments unless their strides are relatively prime.")
        (357939 'referenced modules list' HaltWrappers[210085])
      }
      (71580 call = ambig[71475] 1)
      (475695 'end of statement' ambig[71475])
    }
    function computeBoundedType[71591](arg r1[71589]:_any[178](?), arg r2[71593]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[510568] "RVV" "param" "temp"
      unknown tmp[420338] "maybe param" "temp"
      (420349 'move' tmp[420338](71600 call(71596 call (partial) hasLowBound _mt[243] r1[71589])))
      unknown call_tmp[622190] "expr temp" "maybe param" "maybe type" "temp"
      (622193 'move' call_tmp[622190](420351 call _cond_invalid tmp[420338]))
      if call_tmp[622190]
      {
        (420354 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown low[71609] "dead at end of block" "param"
      unknown tmp[557534] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557535] "maybe param" "temp"
      unknown call_tmp[622195] "expr temp" "maybe param" "maybe type" "temp"
      (622198 'move' call_tmp[622195](420339 call isTrue tmp[420338]))
      (557540 'move' tmp[557535](557538 call _cond_test call_tmp[622195]))
      if tmp[557535]
      {
        (557545 'move' tmp[557534](557542 '_paramFoldLogical' tmp[557535] 1))
      }
      {
        unknown tmp[557547] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622202] "expr temp" "maybe param" "maybe type" "temp"
        (622205 'move' call_tmp[622202](71606 call(71602 call (partial) hasLowBound _mt[243] r2[71593])))
        (557549 'move' tmp[557547](420343 call isTrue call_tmp[622202]))
        (557554 'move' tmp[557534](557551 '_paramFoldLogical' tmp[557535] tmp[557547]))
      }
      (541242 'init var' low[71609] tmp[557534])
      (71612 'end of statement')
      unknown tmp[420359] "maybe param" "temp"
      (420370 'move' tmp[420359](71619 call(71615 call (partial) hasHighBound _mt[243] r1[71589])))
      unknown call_tmp[622209] "expr temp" "maybe param" "maybe type" "temp"
      (622212 'move' call_tmp[622209](420372 call _cond_invalid tmp[420359]))
      if call_tmp[622209]
      {
        (420375 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown high[71628] "dead at end of block" "param"
      unknown tmp[557561] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557562] "maybe param" "temp"
      unknown call_tmp[622214] "expr temp" "maybe param" "maybe type" "temp"
      (622217 'move' call_tmp[622214](420360 call isTrue tmp[420359]))
      (557567 'move' tmp[557562](557565 call _cond_test call_tmp[622214]))
      if tmp[557562]
      {
        (557572 'move' tmp[557561](557569 '_paramFoldLogical' tmp[557562] 1))
      }
      {
        unknown tmp[557574] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622221] "expr temp" "maybe param" "maybe type" "temp"
        (622224 'move' call_tmp[622221](71625 call(71621 call (partial) hasHighBound _mt[243] r2[71593])))
        (557576 'move' tmp[557574](420364 call isTrue call_tmp[622221]))
        (557581 'move' tmp[557561](557578 '_paramFoldLogical' tmp[557562] tmp[557574]))
      }
      (541244 'init var' high[71628] tmp[557561])
      (71631 'end of statement')
      unknown tmp[420380] "maybe param" "temp"
      (420391 'move' tmp[420380] low[71609])
      unknown call_tmp[622226] "expr temp" "maybe param" "maybe type" "temp"
      (622229 'move' call_tmp[622226](420393 call _cond_invalid tmp[420380]))
      if call_tmp[622226]
      {
        (420396 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557588] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557589] "maybe param" "temp"
      unknown call_tmp[622231] "expr temp" "maybe param" "maybe type" "temp"
      (622234 'move' call_tmp[622231](420381 call isTrue tmp[420380]))
      (557594 'move' tmp[557589](557592 call _cond_test call_tmp[622231]))
      if tmp[557589]
      {
        unknown tmp[557596] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557598 'move' tmp[557596](420384 call isTrue high[71628]))
        (557603 'move' tmp[557588](557600 '_paramFoldLogical' tmp[557589] tmp[557596]))
      }
      {
        (557608 'move' tmp[557588](557605 '_paramFoldLogical' tmp[557589] 0))
      }
      unknown call_tmp[622236] "expr temp" "maybe param" "maybe type" "temp"
      (622239 'move' call_tmp[622236](71674 call _cond_test tmp[557588]))
      if call_tmp[622236]
      {
        (510573 'move' ret[510568](510572 'deref' bounded[64208]))
        gotoReturn _end_computeBoundedType[510566] _end_computeBoundedType[510566]
      }
      {
        unknown call_tmp[622241] "expr temp" "maybe param" "maybe type" "temp"
        (622244 'move' call_tmp[622241](71668 call _cond_test low[71609]))
        if call_tmp[622241]
        {
          (510578 'move' ret[510568](510577 'deref' boundedLow[64210]))
          gotoReturn _end_computeBoundedType[510566] _end_computeBoundedType[510566]
        }
        {
          unknown call_tmp[622246] "expr temp" "maybe param" "maybe type" "temp"
          (622249 'move' call_tmp[622246](71662 call _cond_test high[71628]))
          if call_tmp[622246]
          {
            (510583 'move' ret[510568](510582 'deref' boundedHigh[64212]))
            gotoReturn _end_computeBoundedType[510566] _end_computeBoundedType[510566]
          }
          {
            (510588 'move' ret[510568](510587 'deref' boundedNone[64214]))
            gotoReturn _end_computeBoundedType[510566] _end_computeBoundedType[510566]
          }
        }
      }
      label _end_computeBoundedType[510566]
      (510570 return ret[510568])
    }
    unknown lo1[71696] "dead at end of block" "insert auto destroy"
    unknown tmp[557615] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557616] "maybe param" "temp"
    unknown call_tmp[622253] "expr temp" "maybe param" "maybe type" "temp"
    (622256 'move' call_tmp[622253](71684 call(375184 call (partial) hasLowBound _mt[243] this[71469])))
    (557621 'move' tmp[557616](557619 call _cond_test call_tmp[622253]))
    if tmp[557616]
    {
      unknown tmp[557623] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557625 'move' tmp[557623](71686 call _low _mt[243] this[71469]))
      (557630 'move' tmp[557615](557627 '_paramFoldLogical' tmp[557616] tmp[557623]))
    }
    {
      unknown tmp[557632] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557634 'move' tmp[557632](71690 call _low _mt[243] other[71464]))
      (557639 'move' tmp[557615](557636 '_paramFoldLogical' tmp[557616] tmp[557632]))
    }
    (541246 'init var' lo1[71696] tmp[557615])
    (71699 'end of statement')
    unknown hi1[71714] "dead at end of block" "insert auto destroy"
    unknown tmp[557646] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557647] "maybe param" "temp"
    unknown call_tmp[622264] "expr temp" "maybe param" "maybe type" "temp"
    (622267 'move' call_tmp[622264](71702 call(375188 call (partial) hasHighBound _mt[243] this[71469])))
    (557652 'move' tmp[557647](557650 call _cond_test call_tmp[622264]))
    if tmp[557647]
    {
      unknown tmp[557654] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557656 'move' tmp[557654](71704 call _high _mt[243] this[71469]))
      (557661 'move' tmp[557646](557658 '_paramFoldLogical' tmp[557647] tmp[557654]))
    }
    {
      unknown tmp[557663] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557665 'move' tmp[557663](71708 call _high _mt[243] other[71464]))
      (557670 'move' tmp[557646](557667 '_paramFoldLogical' tmp[557647] tmp[557663]))
    }
    (541248 'init var' hi1[71714] tmp[557646])
    (71717 'end of statement')
    unknown call_tmp[622275] "expr temp" "maybe param" "maybe type" "temp"
    (622278 'move' call_tmp[622275](71720 call stride _mt[243] this[71469]))
    unknown call_tmp[622280] "maybe param" "maybe type" "temp"
    (622283 'move' call_tmp[622280](71724 call abs call_tmp[622275]))
    unknown st1[71725] "dead at end of block" "insert auto destroy"
    (541250 'init var' st1[71725] call_tmp[622280])
    (71728 'end of statement')
    unknown lo2[71746] "dead at end of block" "insert auto destroy"
    unknown tmp[557677] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557678] "maybe param" "temp"
    unknown call_tmp[622287] "expr temp" "maybe param" "maybe type" "temp"
    (622290 'move' call_tmp[622287](71734 call(71730 call (partial) hasLowBound _mt[243] other[71464])))
    (557683 'move' tmp[557678](557681 call _cond_test call_tmp[622287]))
    if tmp[557678]
    {
      unknown tmp[557685] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557687 'move' tmp[557685](71736 call _low _mt[243] other[71464]))
      (557692 'move' tmp[557677](557689 '_paramFoldLogical' tmp[557678] tmp[557685]))
    }
    {
      unknown tmp[557694] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557696 'move' tmp[557694](71740 call _low _mt[243] this[71469]))
      (557701 'move' tmp[557677](557698 '_paramFoldLogical' tmp[557678] tmp[557694]))
    }
    (541252 'init var' lo2[71746] tmp[557677])
    (71749 'end of statement')
    unknown hi2[71767] "dead at end of block" "insert auto destroy"
    unknown tmp[557708] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557709] "maybe param" "temp"
    unknown call_tmp[622298] "expr temp" "maybe param" "maybe type" "temp"
    (622301 'move' call_tmp[622298](71755 call(71751 call (partial) hasHighBound _mt[243] other[71464])))
    (557714 'move' tmp[557709](557712 call _cond_test call_tmp[622298]))
    if tmp[557709]
    {
      unknown tmp[557716] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557718 'move' tmp[557716](71757 call _high _mt[243] other[71464]))
      (557723 'move' tmp[557708](557720 '_paramFoldLogical' tmp[557709] tmp[557716]))
    }
    {
      unknown tmp[557725] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557727 'move' tmp[557725](71761 call _high _mt[243] this[71469]))
      (557732 'move' tmp[557708](557729 '_paramFoldLogical' tmp[557709] tmp[557725]))
    }
    (541254 'init var' hi2[71767] tmp[557708])
    (71770 'end of statement')
    unknown call_tmp[622309] "expr temp" "maybe param" "maybe type" "temp"
    (622312 'move' call_tmp[622309](71773 call stride _mt[243] other[71464]))
    unknown call_tmp[622314] "maybe param" "maybe type" "temp"
    (622317 'move' call_tmp[622314](71777 call abs call_tmp[622309]))
    unknown st2[71778] "dead at end of block" "insert auto destroy"
    (541256 'init var' st2[71778] call_tmp[622314])
    (71781 'end of statement')
    unknown call_tmp[622321] "expr temp" "maybe param" "maybe type" "temp"
    (622324 'move' call_tmp[622321](375192 call intIdxType _mt[243] this[71469]))
    unknown call_tmp[622326] "expr temp" "maybe param" "maybe type" "temp"
    (622329 'move' call_tmp[622326](71785 call isUintType call_tmp[622321]))
    unknown call_tmp[622331] "expr temp" "maybe param" "maybe type" "temp"
    (622334 'move' call_tmp[622331](71801 call _cond_test call_tmp[622326]))
    if call_tmp[622331]
    {
      unknown call_tmp[622336] "expr temp" "maybe param" "maybe type" "temp"
      (622339 'move' call_tmp[622336](71788 call < lo1[71696] 0))
      unknown call_tmp[622341] "expr temp" "maybe param" "maybe type" "temp"
      (622344 'move' call_tmp[622341](71795 call _cond_test call_tmp[622336]))
      if call_tmp[622341]
      {
        (71792 call = lo1[71696] 0)
        (475704 'end of statement' lo1[71696])
      }
    }
    unknown call_tmp[622348] "maybe param" "maybe type" "temp"
    (622351 'move' call_tmp[622348](71807 call stride _mt[243] this[71469]))
    unknown call_tmp[622355] "maybe param" "maybe type" "temp"
    (622358 'move' call_tmp[622355](375198 call strType _mt[243] this[71469]))
    unknown newStride[71810] "dead at end of block" "insert auto destroy"
    (541258 'init var' newStride[71810] call_tmp[622348] call_tmp[622355])
    (71813 'end of statement')
    unknown call_tmp[622362] "expr temp" "maybe param" "maybe type" "temp"
    (622365 'move' call_tmp[622362](71817 call stride _mt[243] this[71469]))
    unknown call_tmp[622367] "maybe param" "maybe type" "temp"
    (622370 'move' call_tmp[622367](71821 call abs call_tmp[622362]))
    unknown call_tmp[622374] "maybe param" "maybe type" "temp"
    (622377 'move' call_tmp[622374](375202 call strType _mt[243] this[71469]))
    unknown lcm[71822] "dead at end of block" "insert auto destroy"
    (541260 'init var' lcm[71822] call_tmp[622367] call_tmp[622374])
    (71825 'end of statement')
    unknown call_tmp[622381] "expr temp" "maybe param" "maybe type" "temp"
    (622384 'move' call_tmp[622381](375211 call strType _mt[243] this[71469]))
    unknown call_tmp[622386] "expr temp" "maybe param" "maybe type" "temp"
    (622389 'move' call_tmp[622386](71838 call _cast call_tmp[622381] 0))
    unknown call_tmp[622391] "maybe param" "maybe type" "temp"
    (622394 'move' call_tmp[622391](71841 call _build_tuple lcm[71822] call_tmp[622386]))
    unknown call_tmp[622398] "expr temp" "maybe param" "maybe type" "temp"
    (622401 'move' call_tmp[622398](375206 call strType _mt[243] this[71469]))
    unknown call_tmp[622403] "maybe param" "maybe type" "temp"
    (622406 'move' call_tmp[622403](71833 call * 2 call_tmp[622398]))
    unknown tmp[71843] "dead at end of block" "insert auto destroy" "temp"
    (541262 'init var' tmp[71843] call_tmp[622391] call_tmp[622403])
    (71850 call _check_tuple_var_decl tmp[71843] 2)
    (475706 'end of statement')
    unknown call_tmp[622408] "maybe param" "maybe type" "temp"
    (622411 'move' call_tmp[622408](71844 call tmp[71843] 0))
    unknown g[71826] "dead at end of block" "insert auto destroy"
    (541264 'init var' g[71826] call_tmp[622408])
    unknown call_tmp[622413] "maybe param" "maybe type" "temp"
    (622416 'move' call_tmp[622413](71847 call tmp[71843] 1))
    unknown x[71828] "dead at end of block" "insert auto destroy"
    (541266 'init var' x[71828] call_tmp[622413])
    (71855 'end of statement')
    unknown tmp[420401] "maybe param" "temp"
    unknown call_tmp[622420] "expr temp" "maybe param" "maybe type" "temp"
    (622423 'move' call_tmp[622420](71857 call stride _mt[243] this[71469]))
    unknown call_tmp[622427] "expr temp" "maybe param" "maybe type" "temp"
    (622430 'move' call_tmp[622427](71861 call stride _mt[243] other[71464]))
    (420412 'move' tmp[420401](71864 call != call_tmp[622420] call_tmp[622427]))
    unknown call_tmp[622432] "expr temp" "maybe param" "maybe type" "temp"
    (622435 'move' call_tmp[622432](420414 call _cond_invalid tmp[420401]))
    if call_tmp[622432]
    {
      (420417 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557739] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557740] "maybe param" "temp"
    unknown call_tmp[622437] "expr temp" "maybe param" "maybe type" "temp"
    (622440 'move' call_tmp[622437](420402 call isTrue tmp[420401]))
    (557745 'move' tmp[557740](557743 call _cond_test call_tmp[622437]))
    if tmp[557740]
    {
      unknown tmp[557747] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622444] "expr temp" "maybe param" "maybe type" "temp"
      (622447 'move' call_tmp[622444](71867 call stride _mt[243] this[71469]))
      unknown call_tmp[622451] "expr temp" "maybe param" "maybe type" "temp"
      (622454 'move' call_tmp[622451](71871 call stride _mt[243] other[71464]))
      unknown call_tmp[622456] "expr temp" "maybe param" "maybe type" "temp"
      (622459 'move' call_tmp[622456](71874 call - call_tmp[622451]))
      unknown call_tmp[622461] "expr temp" "maybe param" "maybe type" "temp"
      (622464 'move' call_tmp[622461](71876 call != call_tmp[622444] call_tmp[622456]))
      (557749 'move' tmp[557747](420405 call isTrue call_tmp[622461]))
      (557754 'move' tmp[557739](557751 '_paramFoldLogical' tmp[557740] tmp[557747]))
    }
    {
      (557759 'move' tmp[557739](557756 '_paramFoldLogical' tmp[557740] 0))
    }
    unknown call_tmp[622466] "expr temp" "maybe param" "maybe type" "temp"
    (622469 'move' call_tmp[622466](71958 call _cond_test tmp[557739]))
    if call_tmp[622466]
    {
      unknown call_tmp[622471] "maybe param" "maybe type" "temp"
      (622474 'move' call_tmp[622471](71889 call chpl__extendedEuclid st1[71725] st2[71778]))
      const tmp[71890] "dead at end of block" "const" "insert auto destroy" "temp"
      (541268 'init var' tmp[71890] call_tmp[622471])
      (71897 call _check_tuple_var_decl tmp[71890] 2)
      (475708 'end of statement')
      unknown call_tmp[622476] "maybe param" "maybe type" "temp"
      (622479 'move' call_tmp[622476](71891 call tmp[71890] 0))
      const tg[71880] "dead at end of block" "const" "insert auto destroy"
      (541270 'init var' tg[71880] call_tmp[622476])
      unknown call_tmp[622481] "maybe param" "maybe type" "temp"
      (622484 'move' call_tmp[622481](71894 call tmp[71890] 1))
      const tx[71882] "dead at end of block" "const" "insert auto destroy"
      (541272 'init var' tx[71882] call_tmp[622481])
      (71902 'end of statement')
      unknown tmp[491973] "expr temp" "maybe param" "maybe type" "temp"
      unknown tmp[492014] "maybe param" "temp"
      (492017 'move' tmp[492014](492015 'addr of' g[71826]))
      unknown tmp[492025] "maybe param" "temp"
      (492028 'move' tmp[492025](492026 'addr of' x[71828]))
      unknown call_tmp[622490] "expr temp" "maybe param" "maybe type" "temp"
      (622493 'move' call_tmp[622490](375219 call strType _mt[243] this[71469]))
      unknown call_tmp[622495] "expr temp" "maybe param" "maybe type" "temp"
      (622498 'move' call_tmp[622495](71915 call(71910 call (partial) safeCast _mt[243] tg[71880]) call_tmp[622490]))
      unknown call_tmp[622504] "expr temp" "maybe param" "maybe type" "temp"
      (622507 'move' call_tmp[622504](375223 call strType _mt[243] this[71469]))
      unknown call_tmp[622509] "expr temp" "maybe param" "maybe type" "temp"
      (622512 'move' call_tmp[622509](71922 call(71917 call (partial) safeCast _mt[243] tx[71882]) call_tmp[622504]))
      (491974 'move' tmp[491973](71924 call _build_tuple call_tmp[622495] call_tmp[622509]))
      { scopeless
        unknown call_tmp[622516] "expr temp" "maybe param" "maybe type" "temp"
        (622519 'move' call_tmp[622516](491980 call size _mt[243] tmp[491973]))
        unknown call_tmp[622521] "expr temp" "maybe param" "maybe type" "temp"
        (622524 'move' call_tmp[622521](491983 call != 2 call_tmp[622516]))
        unknown call_tmp[622526] "expr temp" "maybe param" "maybe type" "temp"
        (622529 'move' call_tmp[622526](492006 call _cond_test call_tmp[622521]))
        if call_tmp[622526]
        {
          (492002 call compilerError "tuple size must match the number of grouped variables" 0)
        }
      }
      unknown call_tmp[622531] "expr temp" "maybe param" "maybe type" "temp"
      (622534 'move' call_tmp[622531](492012 call tmp[491973] 0))
      (492019 call = tmp[492014] call_tmp[622531])
      unknown call_tmp[622536] "expr temp" "maybe param" "maybe type" "temp"
      (622539 'move' call_tmp[622536](492023 call tmp[491973] 1))
      (492030 call = tmp[492025] call_tmp[622536])
      (475709 'end of statement' g[71826] x[71828] tg[71880] tx[71882])
      unknown call_tmp[622541] "expr temp" "maybe param" "maybe type" "temp"
      (622544 'move' call_tmp[622541](71932 call / st1[71725] g[71826]))
      unknown call_tmp[622546] "expr temp" "maybe param" "maybe type" "temp"
      (622549 'move' call_tmp[622546](71935 call * call_tmp[622541] st2[71778]))
      (71937 call = lcm[71822] call_tmp[622546])
      (475714 'end of statement' lcm[71822] st1[71725] g[71826] st2[71778])
      unknown tmp[557766] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557767] "maybe param" "temp"
      unknown call_tmp[622553] "expr temp" "maybe param" "maybe type" "temp"
      (622556 'move' call_tmp[622553](71942 call stride _mt[243] this[71469]))
      unknown call_tmp[622558] "expr temp" "maybe param" "maybe type" "temp"
      (622561 'move' call_tmp[622558](71946 call > call_tmp[622553] 0))
      (557772 'move' tmp[557767](557770 call _cond_test call_tmp[622558]))
      if tmp[557767]
      {
        (557777 'move' tmp[557766](557774 '_paramFoldLogical' tmp[557767] lcm[71822]))
      }
      {
        unknown tmp[557779] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557781 'move' tmp[557779](71950 call - lcm[71822]))
        (557786 'move' tmp[557766](557783 '_paramFoldLogical' tmp[557767] tmp[557779]))
      }
      (71955 call = newStride[71810] tmp[557766])
      (475719 'end of statement' newStride[71810] lcm[71822] lcm[71822])
    }
    unknown emptyIntersection[71963] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[541274] "maybe param" "maybe type" "temp"
    (541280 'move' type_tmp[541274] bool[10])
    (541276 'init var split decl' emptyIntersection[71963] type_tmp[541274])
    (71966 'end of statement')
    function min[71973](arg x[71970]:int(64)[13], arg y[71976]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510594] "RVV" "temp"
      unknown call_tmp[622563] "expr temp" "maybe param" "maybe type" "temp"
      (622566 'move' call_tmp[622563](71983 call max int(64)[13]))
      unknown call_tmp[622568] "expr temp" "maybe param" "maybe type" "temp"
      (622571 'move' call_tmp[622568](71984 call > y[71976] call_tmp[622563]))
      unknown call_tmp[622573] "expr temp" "maybe param" "maybe type" "temp"
      (622576 'move' call_tmp[622573](71990 call _cond_test call_tmp[622568]))
      if call_tmp[622573]
      {
        (510599 'move' ret[510594](510598 'deref' x[71970]))
        gotoReturn _end_min[510592] _end_min[510592]
      }
      unknown call_tmp[622578] "expr temp" "maybe param" "maybe type" "temp"
      (622581 'move' call_tmp[622578](72000 call _cast int(64)[13] y[71976]))
      unknown call_tmp[622583] "expr temp" "maybe param" "maybe type" "temp"
      (622586 'move' call_tmp[622583](72002 call min x[71970] call_tmp[622578]))
      (510604 'move' ret[510594](510603 'deref' call_tmp[622583]))
      label _end_min[510592]
      (510596 return ret[510594])
    }
    function min[72013](arg x[72010]:uint(64)[115], arg y[72016]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510608] "RVV" "temp"
      unknown call_tmp[622588] "expr temp" "maybe param" "maybe type" "temp"
      (622591 'move' call_tmp[622588](72021 call < y[72016] 0))
      unknown call_tmp[622593] "expr temp" "maybe param" "maybe type" "temp"
      (622596 'move' call_tmp[622593](72032 call _cond_test call_tmp[622588]))
      if call_tmp[622593]
      {
        (72025 call = emptyIntersection[71963] 1)
        (475725 'end of statement')
        (510613 'move' ret[510608](510612 'deref' x[72010]))
        gotoReturn _end_min[510606] _end_min[510606]
      }
      unknown call_tmp[622598] "expr temp" "maybe param" "maybe type" "temp"
      (622601 'move' call_tmp[622598](72042 call _cast uint(64)[115] y[72016]))
      unknown call_tmp[622603] "expr temp" "maybe param" "maybe type" "temp"
      (622606 'move' call_tmp[622603](72044 call min x[72010] call_tmp[622598]))
      (510618 'move' ret[510608](510617 'deref' call_tmp[622603]))
      label _end_min[510606]
      (510610 return ret[510608])
    }
    function max[72055](arg x[72052]:int(64)[13], arg y[72058]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510622] "RVV" "temp"
      unknown call_tmp[622608] "expr temp" "maybe param" "maybe type" "temp"
      (622611 'move' call_tmp[622608](72065 call max int(64)[13]))
      unknown call_tmp[622613] "expr temp" "maybe param" "maybe type" "temp"
      (622616 'move' call_tmp[622613](72066 call > y[72058] call_tmp[622608]))
      unknown call_tmp[622618] "expr temp" "maybe param" "maybe type" "temp"
      (622621 'move' call_tmp[622618](72077 call _cond_test call_tmp[622613]))
      if call_tmp[622618]
      {
        (72070 call = emptyIntersection[71963] 1)
        (475728 'end of statement')
        (510627 'move' ret[510622](510626 'deref' x[72052]))
        gotoReturn _end_max[510620] _end_max[510620]
      }
      unknown call_tmp[622623] "expr temp" "maybe param" "maybe type" "temp"
      (622626 'move' call_tmp[622623](72087 call _cast int(64)[13] y[72058]))
      unknown call_tmp[622628] "expr temp" "maybe param" "maybe type" "temp"
      (622631 'move' call_tmp[622628](72089 call max x[72052] call_tmp[622623]))
      (510632 'move' ret[510622](510631 'deref' call_tmp[622628]))
      label _end_max[510620]
      (510624 return ret[510622])
    }
    function max[72100](arg x[72097]:uint(64)[115], arg y[72103]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510636] "RVV" "temp"
      unknown call_tmp[622633] "expr temp" "maybe param" "maybe type" "temp"
      (622636 'move' call_tmp[622633](72108 call < y[72103] 0))
      unknown call_tmp[622638] "expr temp" "maybe param" "maybe type" "temp"
      (622641 'move' call_tmp[622638](72114 call _cond_test call_tmp[622633]))
      if call_tmp[622638]
      {
        (510641 'move' ret[510636](510640 'deref' x[72097]))
        gotoReturn _end_max[510634] _end_max[510634]
      }
      unknown call_tmp[622643] "expr temp" "maybe param" "maybe type" "temp"
      (622646 'move' call_tmp[622643](72124 call _cast uint(64)[115] y[72103]))
      unknown call_tmp[622648] "expr temp" "maybe param" "maybe type" "temp"
      (622651 'move' call_tmp[622648](72126 call max x[72097] call_tmp[622643]))
      (510646 'move' ret[510636](510645 'deref' call_tmp[622648]))
      label _end_max[510634]
      (510638 return ret[510636])
    }
    (541282 'init var split init' emptyIntersection[71963] 0 type_tmp[541274])
    (475733 'end of statement' emptyIntersection[71963])
    unknown call_tmp[622655] "expr temp" "maybe param" "maybe type" "temp"
    (622658 'move' call_tmp[622655](375255 call intIdxType _mt[243] this[71469]))
    unknown call_tmp[622660] "expr temp" "maybe param" "maybe type" "temp"
    (622663 'move' call_tmp[622660](72140 call max lo1[71696] lo2[71746]))
    unknown call_tmp[622665] "maybe param" "maybe type" "temp"
    (622668 'move' call_tmp[622665](72142 call _cast call_tmp[622655] call_tmp[622660]))
    unknown newlo[72144] "dead at end of block" "insert auto destroy"
    (541285 'init var' newlo[72144] call_tmp[622665])
    (72147 'end of statement')
    unknown call_tmp[622672] "expr temp" "maybe param" "maybe type" "temp"
    (622675 'move' call_tmp[622672](375261 call intIdxType _mt[243] this[71469]))
    unknown call_tmp[622677] "expr temp" "maybe param" "maybe type" "temp"
    (622680 'move' call_tmp[622677](72152 call min hi1[71714] hi2[71767]))
    unknown call_tmp[622682] "maybe param" "maybe type" "temp"
    (622685 'move' call_tmp[622682](72154 call _cast call_tmp[622672] call_tmp[622677]))
    unknown newhi[72156] "dead at end of block" "insert auto destroy"
    (541287 'init var' newhi[72156] call_tmp[622682])
    (72159 'end of statement')
    unknown call_tmp[622687] "expr temp" "maybe param" "maybe type" "temp"
    (622690 'move' call_tmp[622687](72172 call _cond_test emptyIntersection[71963]))
    if call_tmp[622687]
    {
      (72163 call = newlo[72144] 1)
      (475739 'end of statement' newlo[72144])
      (72169 call = newhi[72156] 0)
      (475741 'end of statement' newhi[72156])
    }
    unknown tmp[420422] "maybe param" "temp"
    (420433 'move' tmp[420422](72209 call ! ambig[71475]))
    unknown call_tmp[622692] "expr temp" "maybe param" "maybe type" "temp"
    (622695 'move' call_tmp[622692](420435 call _cond_invalid tmp[420422]))
    if call_tmp[622692]
    {
      (420438 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown result[72224] "dead at end of block" "insert auto destroy"
    unknown tmp[557820] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557821] "maybe param" "temp"
    unknown call_tmp[622697] "expr temp" "maybe param" "maybe type" "temp"
    (622700 'move' call_tmp[622697](420423 call isTrue tmp[420422]))
    (557826 'move' tmp[557821](557824 call _cond_test call_tmp[622697]))
    if tmp[557821]
    {
      unknown tmp[420443] "maybe param" "temp"
      (420454 'move' tmp[420443](72212 call aligned _mt[243] this[71469]))
      unknown call_tmp[622704] "expr temp" "maybe param" "maybe type" "temp"
      (622707 'move' call_tmp[622704](420456 call _cond_invalid tmp[420443]))
      if call_tmp[622704]
      {
        (420459 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[557793] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557794] "maybe param" "temp"
      unknown call_tmp[622709] "expr temp" "maybe param" "maybe type" "temp"
      (622712 'move' call_tmp[622709](420444 call isTrue tmp[420443]))
      (557799 'move' tmp[557794](557797 call _cond_test call_tmp[622709]))
      if tmp[557794]
      {
        (557804 'move' tmp[557793](557801 '_paramFoldLogical' tmp[557794] 1))
      }
      {
        unknown tmp[557806] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622716] "expr temp" "maybe param" "maybe type" "temp"
        (622719 'move' call_tmp[622716](72216 call aligned _mt[243] other[71464]))
        (557808 'move' tmp[557806](420448 call isTrue call_tmp[622716]))
        (557813 'move' tmp[557793](557810 '_paramFoldLogical' tmp[557794] tmp[557806]))
      }
      unknown tmp[557828] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557830 'move' tmp[557828](420426 call isTrue tmp[557793]))
      (557835 'move' tmp[557820](557832 '_paramFoldLogical' tmp[557821] tmp[557828]))
    }
    {
      (557840 'move' tmp[557820](557837 '_paramFoldLogical' tmp[557821] 0))
    }
    unknown call_tmp[622723] "expr temp" "maybe param" "maybe type" "temp"
    (622726 'move' call_tmp[622723](375270 call idxType _mt[243] this[71469]))
    unknown call_tmp[622728] "expr temp" "maybe param" "maybe type" "temp"
    (622731 'move' call_tmp[622728](72184 call computeBoundedType this[71469] other[71464]))
    unknown call_tmp[622735] "expr temp" "maybe param" "maybe type" "temp"
    (622738 'move' call_tmp[622735](72186 call stridable _mt[243] this[71469]))
    unknown call_tmp[622742] "expr temp" "maybe param" "maybe type" "temp"
    (622745 'move' call_tmp[622742](72190 call stridable _mt[243] other[71464]))
    unknown call_tmp[622747] "expr temp" "maybe param" "maybe type" "temp"
    (622750 'move' call_tmp[622747](72193 call | call_tmp[622735] call_tmp[622742]))
    unknown call_tmp[622754] "expr temp" "maybe param" "maybe type" "temp"
    (622757 'move' call_tmp[622754](72198 call(375276 call (partial) chpl_intToIdx _mt[243] this[71469]) newlo[72144]))
    unknown call_tmp[622761] "expr temp" "maybe param" "maybe type" "temp"
    (622764 'move' call_tmp[622761](72202 call(375281 call (partial) chpl_intToIdx _mt[243] this[71469]) newhi[72156]))
    unknown call_tmp[622768] "expr temp" "maybe param" "maybe type" "temp"
    (622771 'move' call_tmp[622768](72207 call(375287 call (partial) chpl_intToIdx _mt[243] this[71469]) 0))
    unknown call_tmp[622773] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (622776 'move' call_tmp[622773](747977 'new' range[64319](?) call_tmp[622723] call_tmp[622728] call_tmp[622747] call_tmp[622754] call_tmp[622761] newStride[71810] call_tmp[622768] tmp[557820]))
    (541289 'init var' result[72224] call_tmp[622773])
    (72227 'end of statement' lo1[71696] lo2[71746] hi1[71714] hi2[71767] newlo[72144] newhi[72156] newStride[71810])
    unknown call_tmp[622780] "expr temp" "maybe param" "maybe type" "temp"
    (622783 'move' call_tmp[622780](72229 call stridable _mt[243] result[72224]))
    unknown call_tmp[622785] "expr temp" "maybe param" "maybe type" "temp"
    (622788 'move' call_tmp[622785](72433 call _cond_test call_tmp[622780]))
    if call_tmp[622785]
    {
      unknown call_tmp[622792] "expr temp" "maybe param" "maybe type" "temp"
      (622795 'move' call_tmp[622792](72234 call alignment _mt[243] this[71469]))
      unknown call_tmp[622797] "expr temp" "maybe param" "maybe type" "temp"
      (622800 'move' call_tmp[622797](72238 call chpl__idxToInt call_tmp[622792]))
      unknown call_tmp[622804] "expr temp" "maybe param" "maybe type" "temp"
      (622807 'move' call_tmp[622804](375293 call intIdxType _mt[243] this[71469]))
      unknown call_tmp[622809] "expr temp" "maybe param" "maybe type" "temp"
      (622812 'move' call_tmp[622809](72241 call _cast call_tmp[622804] st1[71725]))
      unknown call_tmp[622814] "expr temp" "maybe param" "maybe type" "temp"
      (622817 'move' call_tmp[622814](72243 call % call_tmp[622797] call_tmp[622809]))
      unknown call_tmp[622819] "maybe param" "maybe type" "temp"
      (622822 'move' call_tmp[622819](72246 call _cast int(64)[13] call_tmp[622814]))
      unknown al1[72248] "dead at end of block" "insert auto destroy"
      (541291 'init var' al1[72248] call_tmp[622819])
      (72251 'end of statement')
      unknown call_tmp[622826] "expr temp" "maybe param" "maybe type" "temp"
      (622829 'move' call_tmp[622826](72255 call alignment _mt[243] other[71464]))
      unknown call_tmp[622831] "expr temp" "maybe param" "maybe type" "temp"
      (622834 'move' call_tmp[622831](72259 call chpl__idxToInt call_tmp[622826]))
      unknown call_tmp[622838] "expr temp" "maybe param" "maybe type" "temp"
      (622841 'move' call_tmp[622838](72262 call intIdxType _mt[243] other[71464]))
      unknown call_tmp[622843] "expr temp" "maybe param" "maybe type" "temp"
      (622846 'move' call_tmp[622843](72265 call _cast call_tmp[622838] st2[71778]))
      unknown call_tmp[622848] "expr temp" "maybe param" "maybe type" "temp"
      (622851 'move' call_tmp[622848](72267 call % call_tmp[622831] call_tmp[622843]))
      unknown call_tmp[622853] "maybe param" "maybe type" "temp"
      (622856 'move' call_tmp[622853](72270 call _cast int(64)[13] call_tmp[622848]))
      unknown al2[72272] "dead at end of block" "insert auto destroy"
      (541293 'init var' al2[72272] call_tmp[622853])
      (72275 'end of statement' st1[71725] st2[71778])
      unknown call_tmp[622858] "expr temp" "maybe param" "maybe type" "temp"
      (622861 'move' call_tmp[622858](72278 call - al2[72272] al1[72248]))
      unknown call_tmp[622863] "expr temp" "maybe param" "maybe type" "temp"
      (622866 'move' call_tmp[622863](72281 call % call_tmp[622858] g[71826]))
      unknown call_tmp[622868] "expr temp" "maybe param" "maybe type" "temp"
      (622871 'move' call_tmp[622868](72284 call != call_tmp[622863] 0))
      unknown call_tmp[622873] "expr temp" "maybe param" "maybe type" "temp"
      (622876 'move' call_tmp[622873](72429 call _cond_test call_tmp[622868]))
      if call_tmp[622873]
      {
        unknown tmp[420464] "maybe param" "temp"
        (420475 'move' tmp[420464] 1)
        unknown call_tmp[622878] "expr temp" "maybe param" "maybe type" "temp"
        (622881 'move' call_tmp[622878](420477 call _cond_invalid tmp[420464]))
        if call_tmp[622878]
        {
          (420480 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557847] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557848] "maybe param" "temp"
        unknown call_tmp[622883] "expr temp" "maybe param" "maybe type" "temp"
        (622886 'move' call_tmp[622883](420465 call isTrue tmp[420464]))
        (557853 'move' tmp[557848](557851 call _cond_test call_tmp[622883]))
        if tmp[557848]
        {
          unknown tmp[557855] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622888] "expr temp" "maybe param" "maybe type" "temp"
          (622891 'move' call_tmp[622888](72290 call isBoundedRange result[72224]))
          unknown call_tmp[622893] "expr temp" "maybe param" "maybe type" "temp"
          (622896 'move' call_tmp[622893](72291 call ! call_tmp[622888]))
          (557857 'move' tmp[557855](420468 call isTrue call_tmp[622893]))
          (557862 'move' tmp[557847](557859 '_paramFoldLogical' tmp[557848] tmp[557855]))
        }
        {
          (557867 'move' tmp[557847](557864 '_paramFoldLogical' tmp[557848] 0))
        }
        unknown call_tmp[622898] "expr temp" "maybe param" "maybe type" "temp"
        (622901 'move' call_tmp[622898](72321 call _cond_test tmp[557847]))
        if call_tmp[622898]
        {
          (72319 call boundsCheckHalt module=[255] HaltWrappers[210085] "could not represent range slice - it needs to be empty, but the slice type is not bounded")
          (357982 'referenced modules list' HaltWrappers[210085])
        }
        unknown call_tmp[622905] "expr temp" "maybe param" "maybe type" "temp"
        (622908 'move' call_tmp[622905](72328 call _low _mt[243] result[72224]))
        unknown call_tmp[622912] "expr temp" "maybe param" "maybe type" "temp"
        (622915 'move' call_tmp[622912](375303 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622917] "expr temp" "maybe param" "maybe type" "temp"
        (622920 'move' call_tmp[622917](72333 call _cast call_tmp[622912] 1))
        (72335 call = call_tmp[622905] call_tmp[622917])
        (475751 'end of statement' result[72224])
        unknown call_tmp[622924] "expr temp" "maybe param" "maybe type" "temp"
        (622927 'move' call_tmp[622924](72339 call _high _mt[243] result[72224]))
        unknown call_tmp[622931] "expr temp" "maybe param" "maybe type" "temp"
        (622934 'move' call_tmp[622931](375307 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622936] "expr temp" "maybe param" "maybe type" "temp"
        (622939 'move' call_tmp[622936](72344 call _cast call_tmp[622931] 0))
        (72346 call = call_tmp[622924] call_tmp[622936])
        (475753 'end of statement' result[72224])
        unknown tmp[557874] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557875] "maybe param" "temp"
        unknown call_tmp[622943] "expr temp" "maybe param" "maybe type" "temp"
        (622946 'move' call_tmp[622943](72354 call stride _mt[243] this[71469]))
        unknown call_tmp[622948] "expr temp" "maybe param" "maybe type" "temp"
        (622951 'move' call_tmp[622948](72358 call > call_tmp[622943] 0))
        (557880 'move' tmp[557875](557878 call _cond_test call_tmp[622948]))
        if tmp[557875]
        {
          unknown tmp[557882] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622955] "expr temp" "maybe param" "maybe type" "temp"
          (622958 'move' call_tmp[622955](375311 call intIdxType _mt[243] this[71469]))
          (557884 'move' tmp[557882](72362 call _cast call_tmp[622955] 1))
          (557889 'move' tmp[557874](557886 '_paramFoldLogical' tmp[557875] tmp[557882]))
        }
        {
          unknown tmp[557891] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622962] "expr temp" "maybe param" "maybe type" "temp"
          (622965 'move' call_tmp[622962](375315 call intIdxType _mt[243] this[71469]))
          (557893 'move' tmp[557891](72366 call _cast call_tmp[622962] 0))
          (557898 'move' tmp[557874](557895 '_paramFoldLogical' tmp[557875] tmp[557891]))
        }
        unknown call_tmp[622969] "expr temp" "maybe param" "maybe type" "temp"
        (622972 'move' call_tmp[622969](72350 call _alignment _mt[243] result[72224]))
        (72371 call = call_tmp[622969] tmp[557874])
        (475755 'end of statement' result[72224])
      }
      {
        unknown call_tmp[622974] "expr temp" "maybe param" "maybe type" "temp"
        (622977 'move' call_tmp[622974](72376 call - al2[72272] al1[72248]))
        unknown call_tmp[622979] "maybe param" "maybe type" "temp"
        (622982 'move' call_tmp[622979](72379 call * call_tmp[622974] x[71828]))
        unknown offset[72381] "dead at end of block" "insert auto destroy"
        (541295 'init var' offset[72381] call_tmp[622979])
        (72384 'end of statement' al2[72272] al1[72248] x[71828])
        unknown call_tmp[622984] "expr temp" "maybe param" "maybe type" "temp"
        (622987 'move' call_tmp[622984](72388 call < offset[72381] 0))
        unknown call_tmp[622989] "expr temp" "maybe param" "maybe type" "temp"
        (622992 'move' call_tmp[622989](72395 call _cond_test call_tmp[622984]))
        if call_tmp[622989]
        {
          (72392 call += offset[72381] lcm[71822])
          (475760 'end of statement' offset[72381] lcm[71822])
        }
        unknown call_tmp[622996] "expr temp" "maybe param" "maybe type" "temp"
        (622999 'move' call_tmp[622996](72401 call _alignment _mt[243] result[72224]))
        unknown call_tmp[623003] "expr temp" "maybe param" "maybe type" "temp"
        (623006 'move' call_tmp[623003](375326 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[623008] "expr temp" "maybe param" "maybe type" "temp"
        (623011 'move' call_tmp[623008](72406 call _cast call_tmp[623003] al1[72248]))
        unknown call_tmp[623015] "expr temp" "maybe param" "maybe type" "temp"
        (623018 'move' call_tmp[623015](375331 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[623020] "expr temp" "maybe param" "maybe type" "temp"
        (623023 'move' call_tmp[623020](72410 call _cast call_tmp[623015] offset[72381]))
        unknown call_tmp[623027] "expr temp" "maybe param" "maybe type" "temp"
        (623030 'move' call_tmp[623027](375336 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[623032] "expr temp" "maybe param" "maybe type" "temp"
        (623035 'move' call_tmp[623032](72414 call _cast call_tmp[623027] st1[71725]))
        unknown call_tmp[623037] "expr temp" "maybe param" "maybe type" "temp"
        (623040 'move' call_tmp[623037](72416 call * call_tmp[623020] call_tmp[623032]))
        unknown call_tmp[623044] "expr temp" "maybe param" "maybe type" "temp"
        (623047 'move' call_tmp[623044](375341 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[623049] "expr temp" "maybe param" "maybe type" "temp"
        (623052 'move' call_tmp[623049](72420 call _cast call_tmp[623044] g[71826]))
        unknown call_tmp[623054] "expr temp" "maybe param" "maybe type" "temp"
        (623057 'move' call_tmp[623054](72422 call / call_tmp[623037] call_tmp[623049]))
        unknown call_tmp[623059] "expr temp" "maybe param" "maybe type" "temp"
        (623062 'move' call_tmp[623059](72424 call + call_tmp[623008] call_tmp[623054]))
        (72426 call = call_tmp[622996] call_tmp[623059])
        (475763 'end of statement' result[72224] al1[72248] offset[72381] st1[71725] g[71826])
      }
    }
    (510655 'move' ret[510650](510654 'deref' result[72224]))
    gotoReturn _end_this[510648] _end_this[510648]
    (475769 'end of statement' result[72224])
    label _end_this[510648]
    (510652 return ret[510650])
  }
  function chpl_count_help[72451](arg r[72448]:range[64319](?), arg i[72453]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (72486 call compilerError "count operator is not defined for unbounded ranges")
    (510659 return _void[55])
  }
  where {
    unknown call_tmp[623066] "expr temp" "maybe param" "maybe type" "temp"
    (623069 'move' call_tmp[623066](72456 call boundedType _mt[243] r[72448]))
    (72463 call == call_tmp[623066] boundedNone[64214])
  }
  function chpl_count_help[72496](arg r[72494]:_any[178](?), arg count[72499]:integral[199](?)) : _unknown[51]
  {
    unknown ret[510700] "RVV" "temp"
    unknown tmp[420485] "maybe param" "temp"
    (420496 'move' tmp[420485] 1)
    unknown call_tmp[623071] "expr temp" "maybe param" "maybe type" "temp"
    (623074 'move' call_tmp[623071](420498 call _cond_invalid tmp[420485]))
    if call_tmp[623071]
    {
      (420501 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557905] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557906] "maybe param" "temp"
    unknown call_tmp[623076] "expr temp" "maybe param" "maybe type" "temp"
    (623079 'move' call_tmp[623076](420486 call isTrue tmp[420485]))
    (557911 'move' tmp[557906](557909 call _cond_test call_tmp[623076]))
    if tmp[557906]
    {
      unknown tmp[557913] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623083] "expr temp" "maybe param" "maybe type" "temp"
      (623086 'move' call_tmp[623083](72508 call(72504 call (partial) isAmbiguous _mt[243] r[72494])))
      (557915 'move' tmp[557913](420489 call isTrue call_tmp[623083]))
      (557920 'move' tmp[557905](557917 '_paramFoldLogical' tmp[557906] tmp[557913]))
    }
    {
      (557925 'move' tmp[557905](557922 '_paramFoldLogical' tmp[557906] 0))
    }
    unknown call_tmp[623088] "expr temp" "maybe param" "maybe type" "temp"
    (623091 'move' call_tmp[623088](72534 call _cond_test tmp[557905]))
    if call_tmp[623088]
    {
      (72532 call boundsCheckHalt "count -- Cannot count off elements from a range which is ambiguously aligned.")
    }
    unknown resultType[72544] "dead at end of block" "insert auto destroy" "type variable"(72541 call intIdxType _mt[243] r[72494])
    (541301 'move' resultType[72544](541298 call intIdxType _mt[243] r[72494]))
    unknown strType[72551] "dead at end of block" "insert auto destroy" "type variable"(72550 call chpl__rangeStrideType resultType[72544])
    (541306 'move' strType[72551](541304 call chpl__rangeStrideType resultType[72544]))
    function absSameType[72558](arg str[72556]:_any[178](?)) : _unknown[51]
    {
      unknown ret[510663] "RVV" "temp"
      unknown call_tmp[623099] "expr temp" "maybe param" "maybe type" "temp"
      (623102 'move' call_tmp[623099](72561 call stride _mt[243] r[72494]))
      unknown call_tmp[623104] "expr temp" "maybe param" "maybe type" "temp"
      (623107 'move' call_tmp[623104](72565 call < call_tmp[623099] 0))
      unknown call_tmp[623109] "expr temp" "maybe param" "maybe type" "temp"
      (623112 'move' call_tmp[623109](72589 call _cond_test call_tmp[623104]))
      if call_tmp[623109]
      {
        unknown call_tmp[623116] "expr temp" "maybe param" "maybe type" "temp"
        (623119 'move' call_tmp[623116](72568 call stride _mt[243] r[72494]))
        unknown call_tmp[623121] "expr temp" "maybe param" "maybe type" "temp"
        (623124 'move' call_tmp[623121](72571 call - call_tmp[623116]))
        unknown call_tmp[623126] "expr temp" "maybe param" "maybe type" "temp"
        (623129 'move' call_tmp[623126](72574 call _cast resultType[72544] call_tmp[623121]))
        (510668 'move' ret[510663](510667 'deref' call_tmp[623126]))
        gotoReturn _end_absSameType[510661] _end_absSameType[510661]
      }
      {
        unknown call_tmp[623133] "expr temp" "maybe param" "maybe type" "temp"
        (623136 'move' call_tmp[623133](72580 call stride _mt[243] r[72494]))
        unknown call_tmp[623138] "expr temp" "maybe param" "maybe type" "temp"
        (623141 'move' call_tmp[623138](72584 call _cast resultType[72544] call_tmp[623133]))
        (510673 'move' ret[510663](510672 'deref' call_tmp[623138]))
        gotoReturn _end_absSameType[510661] _end_absSameType[510661]
      }
      label _end_absSameType[510661]
      (510665 return ret[510663])
    }
    unknown call_tmp[623143] "expr temp" "maybe param" "maybe type" "temp"
    (623146 'move' call_tmp[623143](72598 call == count[72499] 0))
    unknown call_tmp[623148] "expr temp" "maybe param" "maybe type" "temp"
    (623151 'move' call_tmp[623148](72798 call _cond_test call_tmp[623143]))
    if call_tmp[623148]
    {
      unknown call_tmp[623155] "expr temp" "maybe param" "maybe type" "temp"
      (623158 'move' call_tmp[623155](72605 call(72601 call (partial) hasLowBound _mt[243] r[72494])))
      unknown call_tmp[623160] "expr temp" "maybe param" "maybe type" "temp"
      (623163 'move' call_tmp[623160](72792 call _cond_test call_tmp[623155]))
      if call_tmp[623160]
      {
        unknown call_tmp[623167] "expr temp" "maybe param" "maybe type" "temp"
        (623170 'move' call_tmp[623167](72609 call idxType _mt[243] r[72494]))
        unknown call_tmp[623174] "expr temp" "maybe param" "maybe type" "temp"
        (623177 'move' call_tmp[623174](72620 call stridable _mt[243] r[72494]))
        unknown call_tmp[623181] "expr temp" "maybe param" "maybe type" "temp"
        (623184 'move' call_tmp[623181](72626 call idxType _mt[243] r[72494]))
        unknown call_tmp[623188] "expr temp" "maybe param" "maybe type" "temp"
        (623191 'move' call_tmp[623188](72631 call _low _mt[243] r[72494]))
        unknown call_tmp[623193] "expr temp" "maybe param" "maybe type" "temp"
        (623196 'move' call_tmp[623193](72634 call chpl__intToIdx call_tmp[623181] call_tmp[623188]))
        unknown call_tmp[623200] "expr temp" "maybe param" "maybe type" "temp"
        (623203 'move' call_tmp[623200](72638 call idxType _mt[243] r[72494]))
        unknown call_tmp[623207] "expr temp" "maybe param" "maybe type" "temp"
        (623210 'move' call_tmp[623207](72643 call _low _mt[243] r[72494]))
        unknown call_tmp[623214] "expr temp" "maybe param" "maybe type" "temp"
        (623217 'move' call_tmp[623214](72648 call stride _mt[243] r[72494]))
        unknown call_tmp[623219] "expr temp" "maybe param" "maybe type" "temp"
        (623222 'move' call_tmp[623219](72652 call absSameType call_tmp[623214]))
        unknown call_tmp[623224] "expr temp" "maybe param" "maybe type" "temp"
        (623227 'move' call_tmp[623224](72653 call - call_tmp[623207] call_tmp[623219]))
        unknown call_tmp[623229] "expr temp" "maybe param" "maybe type" "temp"
        (623232 'move' call_tmp[623229](72655 call chpl__intToIdx call_tmp[623200] call_tmp[623224]))
        unknown call_tmp[623236] "expr temp" "maybe param" "maybe type" "temp"
        (623239 'move' call_tmp[623236](72658 call stride _mt[243] r[72494]))
        unknown call_tmp[623243] "expr temp" "maybe param" "maybe type" "temp"
        (623246 'move' call_tmp[623243](72664 call idxType _mt[243] r[72494]))
        unknown call_tmp[623250] "expr temp" "maybe param" "maybe type" "temp"
        (623253 'move' call_tmp[623250](72669 call _alignment _mt[243] r[72494]))
        unknown call_tmp[623255] "expr temp" "maybe param" "maybe type" "temp"
        (623258 'move' call_tmp[623255](72672 call chpl__intToIdx call_tmp[623243] call_tmp[623250]))
        unknown call_tmp[623262] "expr temp" "maybe param" "maybe type" "temp"
        (623265 'move' call_tmp[623262](72675 call aligned _mt[243] r[72494]))
        unknown call_tmp[623267] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (623270 'move' call_tmp[623267](747978 'new' range[64319](?)(idxType = call_tmp[623167])(boundedType = bounded[64208])(stridable = call_tmp[623174])(_low = call_tmp[623193])(_high = call_tmp[623229])(_stride = call_tmp[623236])(_alignment = call_tmp[623255])(_aligned = call_tmp[623262])))
        (510705 'move' ret[510700](510704 'deref' call_tmp[623267]))
        gotoReturn _end_chpl_count_help[510698] _end_chpl_count_help[510698]
      }
      {
        unknown call_tmp[623274] "expr temp" "maybe param" "maybe type" "temp"
        (623277 'move' call_tmp[623274](72688 call(72684 call (partial) hasHighBound _mt[243] r[72494])))
        unknown call_tmp[623279] "expr temp" "maybe param" "maybe type" "temp"
        (623282 'move' call_tmp[623279](72788 call _cond_test call_tmp[623274]))
        if call_tmp[623279]
        {
          unknown call_tmp[623286] "expr temp" "maybe param" "maybe type" "temp"
          (623289 'move' call_tmp[623286](72692 call idxType _mt[243] r[72494]))
          unknown call_tmp[623293] "expr temp" "maybe param" "maybe type" "temp"
          (623296 'move' call_tmp[623293](72703 call stridable _mt[243] r[72494]))
          unknown call_tmp[623300] "expr temp" "maybe param" "maybe type" "temp"
          (623303 'move' call_tmp[623300](72709 call idxType _mt[243] r[72494]))
          unknown call_tmp[623307] "expr temp" "maybe param" "maybe type" "temp"
          (623310 'move' call_tmp[623307](72714 call _high _mt[243] r[72494]))
          unknown call_tmp[623314] "expr temp" "maybe param" "maybe type" "temp"
          (623317 'move' call_tmp[623314](72719 call stride _mt[243] r[72494]))
          unknown call_tmp[623319] "expr temp" "maybe param" "maybe type" "temp"
          (623322 'move' call_tmp[623319](72723 call absSameType call_tmp[623314]))
          unknown call_tmp[623324] "expr temp" "maybe param" "maybe type" "temp"
          (623327 'move' call_tmp[623324](72724 call + call_tmp[623307] call_tmp[623319]))
          unknown call_tmp[623329] "expr temp" "maybe param" "maybe type" "temp"
          (623332 'move' call_tmp[623329](72726 call chpl__intToIdx call_tmp[623300] call_tmp[623324]))
          unknown call_tmp[623336] "expr temp" "maybe param" "maybe type" "temp"
          (623339 'move' call_tmp[623336](72730 call idxType _mt[243] r[72494]))
          unknown call_tmp[623343] "expr temp" "maybe param" "maybe type" "temp"
          (623346 'move' call_tmp[623343](72735 call _high _mt[243] r[72494]))
          unknown call_tmp[623348] "expr temp" "maybe param" "maybe type" "temp"
          (623351 'move' call_tmp[623348](72738 call chpl__intToIdx call_tmp[623336] call_tmp[623343]))
          unknown call_tmp[623355] "expr temp" "maybe param" "maybe type" "temp"
          (623358 'move' call_tmp[623355](72741 call stride _mt[243] r[72494]))
          unknown call_tmp[623362] "expr temp" "maybe param" "maybe type" "temp"
          (623365 'move' call_tmp[623362](72747 call idxType _mt[243] r[72494]))
          unknown call_tmp[623369] "expr temp" "maybe param" "maybe type" "temp"
          (623372 'move' call_tmp[623369](72752 call _alignment _mt[243] r[72494]))
          unknown call_tmp[623374] "expr temp" "maybe param" "maybe type" "temp"
          (623377 'move' call_tmp[623374](72755 call chpl__intToIdx call_tmp[623362] call_tmp[623369]))
          unknown call_tmp[623381] "expr temp" "maybe param" "maybe type" "temp"
          (623384 'move' call_tmp[623381](72758 call aligned _mt[243] r[72494]))
          unknown call_tmp[623386] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (623389 'move' call_tmp[623386](747979 'new' range[64319](?)(idxType = call_tmp[623286])(boundedType = bounded[64208])(stridable = call_tmp[623293])(_low = call_tmp[623329])(_high = call_tmp[623348])(_stride = call_tmp[623355])(_alignment = call_tmp[623374])(_aligned = call_tmp[623381])))
          (510710 'move' ret[510700](510709 'deref' call_tmp[623386]))
          gotoReturn _end_chpl_count_help[510698] _end_chpl_count_help[510698]
        }
        {
          (72785 call halt "Internal error: Unexpected case in chpl_count_help")
        }
      }
    }
    unknown tmp[420506] "maybe param" "temp"
    unknown tmp[420527] "maybe param" "temp"
    (420538 'move' tmp[420527] 1)
    unknown call_tmp[623391] "expr temp" "maybe param" "maybe type" "temp"
    (623394 'move' call_tmp[623391](420540 call _cond_invalid tmp[420527]))
    if call_tmp[623391]
    {
      (420543 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557932] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557933] "maybe param" "temp"
    unknown call_tmp[623396] "expr temp" "maybe param" "maybe type" "temp"
    (623399 'move' call_tmp[623396](420528 call isTrue tmp[420527]))
    (557938 'move' tmp[557933](557936 call _cond_test call_tmp[623396]))
    if tmp[557933]
    {
      unknown tmp[557940] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623403] "expr temp" "maybe param" "maybe type" "temp"
      (623406 'move' call_tmp[623403](72808 call(72804 call (partial) hasFirst _mt[243] r[72494])))
      unknown call_tmp[623408] "expr temp" "maybe param" "maybe type" "temp"
      (623411 'move' call_tmp[623408](72809 call ! call_tmp[623403]))
      (557942 'move' tmp[557940](420531 call isTrue call_tmp[623408]))
      (557947 'move' tmp[557932](557944 '_paramFoldLogical' tmp[557933] tmp[557940]))
    }
    {
      (557952 'move' tmp[557932](557949 '_paramFoldLogical' tmp[557933] 0))
    }
    (420517 'move' tmp[420506] tmp[557932])
    unknown call_tmp[623413] "expr temp" "maybe param" "maybe type" "temp"
    (623416 'move' call_tmp[623413](420519 call _cond_invalid tmp[420506]))
    if call_tmp[623413]
    {
      (420522 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557959] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557960] "maybe param" "temp"
    unknown call_tmp[623418] "expr temp" "maybe param" "maybe type" "temp"
    (623421 'move' call_tmp[623418](420507 call isTrue tmp[420506]))
    (557965 'move' tmp[557960](557963 call _cond_test call_tmp[623418]))
    if tmp[557960]
    {
      unknown tmp[557967] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623423] "expr temp" "maybe param" "maybe type" "temp"
      (623426 'move' call_tmp[623423](72815 call > count[72499] 0))
      (557969 'move' tmp[557967](420510 call isTrue call_tmp[623423]))
      (557974 'move' tmp[557959](557971 '_paramFoldLogical' tmp[557960] tmp[557967]))
    }
    {
      (557979 'move' tmp[557959](557976 '_paramFoldLogical' tmp[557960] 0))
    }
    unknown call_tmp[623428] "expr temp" "maybe param" "maybe type" "temp"
    (623431 'move' call_tmp[623428](72840 call _cond_test tmp[557959]))
    if call_tmp[623428]
    {
      (72838 call boundsCheckHalt "With a positive count, the range must have a first index.")
    }
    unknown tmp[420548] "maybe param" "temp"
    unknown tmp[420569] "maybe param" "temp"
    (420580 'move' tmp[420569] 1)
    unknown call_tmp[623433] "expr temp" "maybe param" "maybe type" "temp"
    (623436 'move' call_tmp[623433](420582 call _cond_invalid tmp[420569]))
    if call_tmp[623433]
    {
      (420585 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557986] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557987] "maybe param" "temp"
    unknown call_tmp[623438] "expr temp" "maybe param" "maybe type" "temp"
    (623441 'move' call_tmp[623438](420570 call isTrue tmp[420569]))
    (557992 'move' tmp[557987](557990 call _cond_test call_tmp[623438]))
    if tmp[557987]
    {
      unknown tmp[557994] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623445] "expr temp" "maybe param" "maybe type" "temp"
      (623448 'move' call_tmp[623445](72853 call(72849 call (partial) hasLast _mt[243] r[72494])))
      unknown call_tmp[623450] "expr temp" "maybe param" "maybe type" "temp"
      (623453 'move' call_tmp[623450](72854 call ! call_tmp[623445]))
      (557996 'move' tmp[557994](420573 call isTrue call_tmp[623450]))
      (558001 'move' tmp[557986](557998 '_paramFoldLogical' tmp[557987] tmp[557994]))
    }
    {
      (558006 'move' tmp[557986](558003 '_paramFoldLogical' tmp[557987] 0))
    }
    (420559 'move' tmp[420548] tmp[557986])
    unknown call_tmp[623455] "expr temp" "maybe param" "maybe type" "temp"
    (623458 'move' call_tmp[623455](420561 call _cond_invalid tmp[420548]))
    if call_tmp[623455]
    {
      (420564 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558013] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558014] "maybe param" "temp"
    unknown call_tmp[623460] "expr temp" "maybe param" "maybe type" "temp"
    (623463 'move' call_tmp[623460](420549 call isTrue tmp[420548]))
    (558019 'move' tmp[558014](558017 call _cond_test call_tmp[623460]))
    if tmp[558014]
    {
      unknown tmp[558021] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623465] "expr temp" "maybe param" "maybe type" "temp"
      (623468 'move' call_tmp[623465](72860 call < count[72499] 0))
      (558023 'move' tmp[558021](420552 call isTrue call_tmp[623465]))
      (558028 'move' tmp[558013](558025 '_paramFoldLogical' tmp[558014] tmp[558021]))
    }
    {
      (558033 'move' tmp[558013](558030 '_paramFoldLogical' tmp[558014] 0))
    }
    unknown call_tmp[623470] "expr temp" "maybe param" "maybe type" "temp"
    (623473 'move' call_tmp[623470](72885 call _cond_test tmp[558013]))
    if call_tmp[623470]
    {
      (72883 call boundsCheckHalt "With a negative count, the range must have a last index.")
    }
    unknown tmp[420590] "maybe param" "temp"
    unknown tmp[420611] "maybe param" "temp"
    (420622 'move' tmp[420611] 1)
    unknown call_tmp[623475] "expr temp" "maybe param" "maybe type" "temp"
    (623478 'move' call_tmp[623475](420624 call _cond_invalid tmp[420611]))
    if call_tmp[623475]
    {
      (420627 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558040] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558041] "maybe param" "temp"
    unknown call_tmp[623480] "expr temp" "maybe param" "maybe type" "temp"
    (623483 'move' call_tmp[623480](420612 call isTrue tmp[420611]))
    (558046 'move' tmp[558041](558044 call _cond_test call_tmp[623480]))
    if tmp[558041]
    {
      unknown tmp[558048] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623487] "expr temp" "maybe param" "maybe type" "temp"
      (623490 'move' call_tmp[623487](72892 call boundedType _mt[243] r[72494]))
      unknown call_tmp[623492] "expr temp" "maybe param" "maybe type" "temp"
      (623495 'move' call_tmp[623492](72899 call == call_tmp[623487] bounded[64208]))
      (558050 'move' tmp[558048](420615 call isTrue call_tmp[623492]))
      (558055 'move' tmp[558040](558052 '_paramFoldLogical' tmp[558041] tmp[558048]))
    }
    {
      (558060 'move' tmp[558040](558057 '_paramFoldLogical' tmp[558041] 0))
    }
    (420601 'move' tmp[420590] tmp[558040])
    unknown call_tmp[623497] "expr temp" "maybe param" "maybe type" "temp"
    (623500 'move' call_tmp[623497](420603 call _cond_invalid tmp[420590]))
    if call_tmp[623497]
    {
      (420606 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558067] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558068] "maybe param" "temp"
    unknown call_tmp[623502] "expr temp" "maybe param" "maybe type" "temp"
    (623505 'move' call_tmp[623502](420591 call isTrue tmp[420590]))
    (558073 'move' tmp[558068](558071 call _cond_test call_tmp[623502]))
    if tmp[558068]
    {
      unknown tmp[558075] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623507] "expr temp" "maybe param" "maybe type" "temp"
      (623510 'move' call_tmp[623507](72917 call uint(64)[115] 64))
      unknown call_tmp[623512] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (623515 'move' call_tmp[623512](72907 'typeof' count[72499]))
      unknown call_tmp[623517] "expr temp" "maybe param" "maybe type" "temp"
      (623520 'move' call_tmp[623517](72909 call chpl__maxIntTypeSameSign call_tmp[623512]))
      unknown call_tmp[623522] "expr temp" "maybe param" "maybe type" "temp"
      (623525 'move' call_tmp[623522](72910 call _cast call_tmp[623517] count[72499]))
      unknown call_tmp[623527] "expr temp" "maybe param" "maybe type" "temp"
      (623530 'move' call_tmp[623527](72913 call abs call_tmp[623522]))
      unknown call_tmp[623532] "expr temp" "maybe param" "maybe type" "temp"
      (623535 'move' call_tmp[623532](72918 call _cast call_tmp[623507] call_tmp[623527]))
      unknown call_tmp[623537] "expr temp" "maybe param" "maybe type" "temp"
      (623540 'move' call_tmp[623537](72927 call uint(64)[115] 64))
      unknown call_tmp[623544] "expr temp" "maybe param" "maybe type" "temp"
      (623547 'move' call_tmp[623544](72921 call size _mt[243] r[72494]))
      unknown call_tmp[623549] "expr temp" "maybe param" "maybe type" "temp"
      (623552 'move' call_tmp[623549](72928 call _cast call_tmp[623537] call_tmp[623544]))
      unknown call_tmp[623554] "expr temp" "maybe param" "maybe type" "temp"
      (623557 'move' call_tmp[623554](72930 call > call_tmp[623532] call_tmp[623549]))
      (558077 'move' tmp[558075](420594 call isTrue call_tmp[623554]))
      (558082 'move' tmp[558067](558079 '_paramFoldLogical' tmp[558068] tmp[558075]))
    }
    {
      (558087 'move' tmp[558067](558084 '_paramFoldLogical' tmp[558068] 0))
    }
    unknown call_tmp[623559] "expr temp" "maybe param" "maybe type" "temp"
    (623562 'move' call_tmp[623559](72984 call _cond_test tmp[558067]))
    if call_tmp[623559]
    {
      unknown call_tmp[623564] "expr temp" "maybe param" "maybe type" "temp"
      (623567 'move' call_tmp[623564](72955 call abs count[72499]))
      unknown call_tmp[623569] "expr temp" "maybe param" "maybe type" "temp"
      (623572 'move' call_tmp[623569](72957 call _cast string[26] call_tmp[623564]))
      unknown call_tmp[623574] "expr temp" "maybe param" "maybe type" "temp"
      (623577 'move' call_tmp[623574](72959 call + "bounded range is too small to access " call_tmp[623569]))
      unknown call_tmp[623579] "expr temp" "maybe param" "maybe type" "temp"
      (623582 'move' call_tmp[623579](72978 call + call_tmp[623574] " elements"))
      (72981 call boundsCheckHalt call_tmp[623579])
    }
    function chpl__computeTypeForCountMath[72992](arg t1[72990]:_any[178](?), arg t2[72994]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[510679] "RVV" "temp" "type variable"
      unknown call_tmp[623584] "expr temp" "maybe param" "maybe type" "temp"
      (623587 'move' call_tmp[623584](72998 call == t1[72990] t2[72994]))
      unknown call_tmp[623589] "expr temp" "maybe param" "maybe type" "temp"
      (623592 'move' call_tmp[623589](73052 call _cond_test call_tmp[623584]))
      if call_tmp[623589]
      {
        unknown call_tmp[623594] "expr temp" "maybe param" "maybe type" "temp"
        (623597 'move' call_tmp[623594](73003 call chpl__idxTypeToIntIdxType t1[72990]))
        (510684 'move' ret[510679](510683 'deref' call_tmp[623594]))
        gotoReturn _end_chpl__computeTypeForCountMath[510677] _end_chpl__computeTypeForCountMath[510677]
      }
      {
        unknown tmp[420632] "maybe param" "temp"
        unknown call_tmp[623599] "expr temp" "maybe param" "maybe type" "temp"
        (623602 'move' call_tmp[623599](73010 call numBits t1[72990]))
        (420643 'move' tmp[420632](73012 call == call_tmp[623599] 64))
        unknown call_tmp[623604] "expr temp" "maybe param" "maybe type" "temp"
        (623607 'move' call_tmp[623604](420645 call _cond_invalid tmp[420632]))
        if call_tmp[623604]
        {
          (420648 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[558094] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558095] "maybe param" "temp"
        unknown call_tmp[623609] "expr temp" "maybe param" "maybe type" "temp"
        (623612 'move' call_tmp[623609](420633 call isTrue tmp[420632]))
        (558100 'move' tmp[558095](558098 call _cond_test call_tmp[623609]))
        if tmp[558095]
        {
          (558105 'move' tmp[558094](558102 '_paramFoldLogical' tmp[558095] 1))
        }
        {
          unknown tmp[558107] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623614] "expr temp" "maybe param" "maybe type" "temp"
          (623617 'move' call_tmp[623614](73017 call numBits t2[72994]))
          unknown call_tmp[623619] "expr temp" "maybe param" "maybe type" "temp"
          (623622 'move' call_tmp[623619](73019 call == call_tmp[623614] 64))
          (558109 'move' tmp[558107](420637 call isTrue call_tmp[623619]))
          (558114 'move' tmp[558094](558111 '_paramFoldLogical' tmp[558095] tmp[558107]))
        }
        unknown call_tmp[623624] "expr temp" "maybe param" "maybe type" "temp"
        (623627 'move' call_tmp[623624](73048 call _cond_test tmp[558094]))
        if call_tmp[623624]
        {
          unknown call_tmp[623629] "expr temp" "maybe param" "maybe type" "temp"
          (623632 'move' call_tmp[623629](73026 call int(64)[13] 64))
          (510689 'move' ret[510679](510688 'deref' call_tmp[623629]))
          gotoReturn _end_chpl__computeTypeForCountMath[510677] _end_chpl__computeTypeForCountMath[510677]
        }
        {
          unknown x1[73031] "dead at end of block" "insert auto destroy"
          (541308 'default init var' x1[73031] t1[72990])
          (73034 'end of statement')
          unknown x2[73037] "dead at end of block" "insert auto destroy"
          (541310 'default init var' x2[73037] t2[72994])
          (73040 'end of statement')
          { scopeless type
            unknown call_type_tmp[492033] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[623634] "expr temp" "maybe param" "maybe type" "temp"
            (623637 'move' call_tmp[623634](73043 call + x1[73031] x2[73037]))
            (492037 'move' call_type_tmp[492033](73045 'typeof' call_tmp[623634]))
          }
          (510694 'move' ret[510679](510693 'deref' call_type_tmp[492033]))
          gotoReturn _end_chpl__computeTypeForCountMath[510677] _end_chpl__computeTypeForCountMath[510677]
          (475792 'end of statement' x1[73031] x2[73037])
        }
      }
      label _end_chpl__computeTypeForCountMath[510677]
      (510681 return ret[510679])
    }
    unknown call_tmp[623639] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623642 'move' call_tmp[623639](73064 'typeof' count[72499]))
    unknown computeType[73066] "dead at end of block" "insert auto destroy" "type variable"(73065 call chpl__computeTypeForCountMath resultType[72544] call_tmp[623639])
    unknown call_tmp[623644] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623647 'move' call_tmp[623644](541315 'typeof' count[72499]))
    (541317 'move' computeType[73066](541313 call chpl__computeTypeForCountMath resultType[72544] call_tmp[623644]))
    unknown signedComputeType[73073] "dead at end of block" "insert auto destroy" "type variable"(73072 call chpl__signedType computeType[73066])
    (541322 'move' signedComputeType[73073](541320 call chpl__signedType computeType[73066]))
    unknown call_tmp[623649] "expr temp" "maybe param" "maybe type" "temp"
    (623652 'move' call_tmp[623649](73078 call _cast signedComputeType[73073] count[72499]))
    unknown call_tmp[623656] "expr temp" "maybe param" "maybe type" "temp"
    (623659 'move' call_tmp[623656](73081 call stride _mt[243] r[72494]))
    unknown call_tmp[623661] "expr temp" "maybe param" "maybe type" "temp"
    (623664 'move' call_tmp[623661](73085 call _cast signedComputeType[73073] call_tmp[623656]))
    unknown call_tmp[623666] "maybe param" "maybe type" "temp"
    (623669 'move' call_tmp[623666](73087 call * call_tmp[623649] call_tmp[623661]))
    unknown diff[73089] "dead at end of block" "insert auto destroy"
    (541324 'init var' diff[73089] call_tmp[623666])
    (73092 'end of statement')
    unknown lo[73123] "dead at end of block" "insert auto destroy"
    unknown tmp[558121] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558122] "maybe param" "temp"
    unknown call_tmp[623671] "expr temp" "maybe param" "maybe type" "temp"
    (623674 'move' call_tmp[623671](73096 call > diff[73089] 0))
    (558127 'move' tmp[558122](558125 call _cond_test call_tmp[623671]))
    if tmp[558122]
    {
      unknown tmp[558129] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558131 'move' tmp[558129](73099 call _low _mt[243] r[72494]))
      (558136 'move' tmp[558121](558133 '_paramFoldLogical' tmp[558122] tmp[558129]))
    }
    {
      unknown tmp[558138] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623680] "expr temp" "maybe param" "maybe type" "temp"
      (623683 'move' call_tmp[623680](73104 call _high _mt[243] r[72494]))
      unknown call_tmp[623685] "expr temp" "maybe param" "maybe type" "temp"
      (623688 'move' call_tmp[623685](73108 call _cast computeType[73066] call_tmp[623680]))
      unknown call_tmp[623690] "expr temp" "maybe param" "maybe type" "temp"
      (623693 'move' call_tmp[623690](73113 call + diff[73089] 1))
      unknown call_tmp[623695] "expr temp" "maybe param" "maybe type" "temp"
      (623698 'move' call_tmp[623695](73116 call _cast computeType[73066] call_tmp[623690]))
      (558140 'move' tmp[558138](73119 call chpl__add call_tmp[623685] call_tmp[623695] resultType[72544]))
      (558145 'move' tmp[558121](558142 '_paramFoldLogical' tmp[558122] tmp[558138]))
    }
    (541326 'init var' lo[73123] tmp[558121] resultType[72544])
    (73126 'end of statement')
    unknown hi[73157] "dead at end of block" "insert auto destroy"
    unknown tmp[558152] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558153] "maybe param" "temp"
    unknown call_tmp[623700] "expr temp" "maybe param" "maybe type" "temp"
    (623703 'move' call_tmp[623700](73130 call < diff[73089] 0))
    (558158 'move' tmp[558153](558156 call _cond_test call_tmp[623700]))
    if tmp[558153]
    {
      unknown tmp[558160] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558162 'move' tmp[558160](73133 call _high _mt[243] r[72494]))
      (558167 'move' tmp[558152](558164 '_paramFoldLogical' tmp[558153] tmp[558160]))
    }
    {
      unknown tmp[558169] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623709] "expr temp" "maybe param" "maybe type" "temp"
      (623712 'move' call_tmp[623709](73138 call _low _mt[243] r[72494]))
      unknown call_tmp[623714] "expr temp" "maybe param" "maybe type" "temp"
      (623717 'move' call_tmp[623714](73142 call _cast computeType[73066] call_tmp[623709]))
      unknown call_tmp[623719] "expr temp" "maybe param" "maybe type" "temp"
      (623722 'move' call_tmp[623719](73147 call _cast computeType[73066] diff[73089]))
      unknown call_tmp[623724] "expr temp" "maybe param" "maybe type" "temp"
      (623727 'move' call_tmp[623724](73150 call - call_tmp[623719] 1))
      (558171 'move' tmp[558169](73153 call chpl__add call_tmp[623714] call_tmp[623724] resultType[72544]))
      (558176 'move' tmp[558152](558173 '_paramFoldLogical' tmp[558153] tmp[558169]))
    }
    (541328 'init var' hi[73157] tmp[558152] resultType[72544])
    (73160 'end of statement' resultType[72544] resultType[72544] computeType[73066] signedComputeType[73073] signedComputeType[73073] diff[73089] computeType[73066] computeType[73066] diff[73089] resultType[72544] resultType[72544] diff[73089] computeType[73066] computeType[73066] diff[73089] resultType[72544] resultType[72544])
    unknown call_tmp[623731] "expr temp" "maybe param" "maybe type" "temp"
    (623734 'move' call_tmp[623731](73162 call stridable _mt[243] r[72494]))
    unknown call_tmp[623736] "expr temp" "maybe param" "maybe type" "temp"
    (623739 'move' call_tmp[623736](73222 call _cond_test call_tmp[623731]))
    if call_tmp[623736]
    {
      unknown tmp[420653] "maybe param" "temp"
      (420664 'move' tmp[420653](73170 call(73166 call (partial) hasLowBound _mt[243] r[72494])))
      unknown call_tmp[623743] "expr temp" "maybe param" "maybe type" "temp"
      (623746 'move' call_tmp[623743](420666 call _cond_invalid tmp[420653]))
      if call_tmp[623743]
      {
        (420669 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558183] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558184] "maybe param" "temp"
      unknown call_tmp[623748] "expr temp" "maybe param" "maybe type" "temp"
      (623751 'move' call_tmp[623748](420654 call isTrue tmp[420653]))
      (558189 'move' tmp[558184](558187 call _cond_test call_tmp[623748]))
      if tmp[558184]
      {
        unknown tmp[558191] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623755] "expr temp" "maybe param" "maybe type" "temp"
        (623758 'move' call_tmp[623755](73173 call _low _mt[243] r[72494]))
        unknown call_tmp[623760] "expr temp" "maybe param" "maybe type" "temp"
        (623763 'move' call_tmp[623760](73176 call < lo[73123] call_tmp[623755]))
        (558193 'move' tmp[558191](420657 call isTrue call_tmp[623760]))
        (558198 'move' tmp[558183](558195 '_paramFoldLogical' tmp[558184] tmp[558191]))
      }
      {
        (558203 'move' tmp[558183](558200 '_paramFoldLogical' tmp[558184] 0))
      }
      unknown call_tmp[623765] "expr temp" "maybe param" "maybe type" "temp"
      (623768 'move' call_tmp[623765](73188 call _cond_test tmp[558183]))
      if call_tmp[623765]
      {
        unknown call_tmp[623772] "expr temp" "maybe param" "maybe type" "temp"
        (623775 'move' call_tmp[623772](73182 call _low _mt[243] r[72494]))
        (73185 call = lo[73123] call_tmp[623772])
        (475812 'end of statement' lo[73123])
      }
      unknown tmp[420674] "maybe param" "temp"
      (420685 'move' tmp[420674](73199 call(73195 call (partial) hasHighBound _mt[243] r[72494])))
      unknown call_tmp[623779] "expr temp" "maybe param" "maybe type" "temp"
      (623782 'move' call_tmp[623779](420687 call _cond_invalid tmp[420674]))
      if call_tmp[623779]
      {
        (420690 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558210] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558211] "maybe param" "temp"
      unknown call_tmp[623784] "expr temp" "maybe param" "maybe type" "temp"
      (623787 'move' call_tmp[623784](420675 call isTrue tmp[420674]))
      (558216 'move' tmp[558211](558214 call _cond_test call_tmp[623784]))
      if tmp[558211]
      {
        unknown tmp[558218] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623791] "expr temp" "maybe param" "maybe type" "temp"
        (623794 'move' call_tmp[623791](73202 call _high _mt[243] r[72494]))
        unknown call_tmp[623796] "expr temp" "maybe param" "maybe type" "temp"
        (623799 'move' call_tmp[623796](73205 call > hi[73157] call_tmp[623791]))
        (558220 'move' tmp[558218](420678 call isTrue call_tmp[623796]))
        (558225 'move' tmp[558210](558222 '_paramFoldLogical' tmp[558211] tmp[558218]))
      }
      {
        (558230 'move' tmp[558210](558227 '_paramFoldLogical' tmp[558211] 0))
      }
      unknown call_tmp[623801] "expr temp" "maybe param" "maybe type" "temp"
      (623804 'move' call_tmp[623801](73217 call _cond_test tmp[558210]))
      if call_tmp[623801]
      {
        unknown call_tmp[623808] "expr temp" "maybe param" "maybe type" "temp"
        (623811 'move' call_tmp[623808](73211 call _high _mt[243] r[72494]))
        (73214 call = hi[73157] call_tmp[623808])
        (475815 'end of statement' hi[73157])
      }
    }
    unknown tmp[558237] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558238] "maybe param" "temp"
    unknown call_tmp[623815] "expr temp" "maybe param" "maybe type" "temp"
    (623818 'move' call_tmp[623815](73261 call stridable _mt[243] r[72494]))
    (558243 'move' tmp[558238](558241 call _cond_test call_tmp[623815]))
    if tmp[558238]
    {
      unknown tmp[558245] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623822] "expr temp" "maybe param" "maybe type" "temp"
      (623825 'move' call_tmp[623822](73265 call stride _mt[243] r[72494]))
      (558247 'move' tmp[558245](73269 call _cast strType[72551] call_tmp[623822]))
      (558252 'move' tmp[558237](558249 '_paramFoldLogical' tmp[558238] tmp[558245]))
    }
    {
      (558257 'move' tmp[558237](558254 '_paramFoldLogical' tmp[558238] none[57]))
    }
    unknown tmp[558264] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558265] "maybe param" "temp"
    unknown call_tmp[623829] "expr temp" "maybe param" "maybe type" "temp"
    (623832 'move' call_tmp[623829](73277 call stridable _mt[243] r[72494]))
    (558270 'move' tmp[558265](558268 call _cond_test call_tmp[623829]))
    if tmp[558265]
    {
      unknown tmp[558272] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558274 'move' tmp[558272](73281 call alignment _mt[243] r[72494]))
      (558279 'move' tmp[558264](558276 '_paramFoldLogical' tmp[558265] tmp[558272]))
    }
    {
      (558284 'move' tmp[558264](558281 '_paramFoldLogical' tmp[558265] none[57]))
    }
    unknown tmp[558291] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558292] "maybe param" "temp"
    unknown call_tmp[623838] "expr temp" "maybe param" "maybe type" "temp"
    (623841 'move' call_tmp[623838](73290 call stridable _mt[243] r[72494]))
    (558297 'move' tmp[558292](558295 call _cond_test call_tmp[623838]))
    if tmp[558292]
    {
      unknown tmp[558299] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558301 'move' tmp[558299](73294 call aligned _mt[243] r[72494]))
      (558306 'move' tmp[558291](558303 '_paramFoldLogical' tmp[558292] tmp[558299]))
    }
    {
      (558311 'move' tmp[558291](558308 '_paramFoldLogical' tmp[558292] none[57]))
    }
    unknown call_tmp[623847] "expr temp" "maybe param" "maybe type" "temp"
    (623850 'move' call_tmp[623847](73229 call idxType _mt[243] r[72494]))
    unknown call_tmp[623854] "expr temp" "maybe param" "maybe type" "temp"
    (623857 'move' call_tmp[623854](73240 call stridable _mt[243] r[72494]))
    unknown call_tmp[623861] "expr temp" "maybe param" "maybe type" "temp"
    (623864 'move' call_tmp[623861](73250 call(73245 call (partial) chpl_intToIdx _mt[243] r[72494]) lo[73123]))
    unknown call_tmp[623868] "expr temp" "maybe param" "maybe type" "temp"
    (623871 'move' call_tmp[623868](73258 call(73253 call (partial) chpl_intToIdx _mt[243] r[72494]) hi[73157]))
    unknown call_tmp[623873] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (623876 'move' call_tmp[623873](747980 'new' range[64319](?)(idxType = call_tmp[623847])(boundedType = bounded[64208])(stridable = call_tmp[623854])(_low = call_tmp[623861])(_high = call_tmp[623868])(_stride = tmp[558237])(_alignment = tmp[558264])(_aligned = tmp[558291])))
    (510715 'move' ret[510700](510714 'deref' call_tmp[623873]))
    gotoReturn _end_chpl_count_help[510698] _end_chpl_count_help[510698]
    (475817 'end of statement' lo[73123] hi[73157] strType[72551])
    label _end_chpl_count_help[510698]
    (510702 return ret[510700])
  }
  function #[73317](arg r[73314]:range[64319](?), arg count[73323] :
  unknown call_tmp[623878] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510721] "RVV" "temp"
    unknown call_tmp[623883] "expr temp" "maybe param" "maybe type" "temp"
    (623886 'move' call_tmp[623883](73330 call chpl_count_help r[73314] count[73323]))
    (510726 'move' ret[510721](510725 'deref' call_tmp[623883]))
    (510723 return ret[510721])
  }
  function #[73346](arg r[73343]:range[64319](?), arg count[73352] :
  unknown call_tmp[623888] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510730] "RVV" "temp"
    unknown call_tmp[623893] "expr temp" "maybe param" "maybe type" "temp"
    (623896 'move' call_tmp[623893](73359 call chpl_count_help r[73343] count[73352]))
    (510735 'move' ret[510730](510734 'deref' call_tmp[623893]))
    (510732 return ret[510730])
  }
  function #[73375](arg r[73372]:range[64319](?), arg count[73377]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510739] "RVV" "temp"
    unknown call_tmp[623898] "expr temp" "maybe param" "maybe type" "temp"
    (623901 'move' call_tmp[623898](456100 'query' r[73372] 1))
    unknown call_tmp[623903] "expr temp" "maybe param" "maybe type" "temp"
    (623906 'move' call_tmp[623903](73400 call _cast string[26] call_tmp[623898]))
    unknown call_tmp[623908] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623911 'move' call_tmp[623908](73420 'typeof' count[73377]))
    unknown call_tmp[623913] "expr temp" "maybe param" "maybe type" "temp"
    (623916 'move' call_tmp[623913](73422 call _cast string[26] call_tmp[623908]))
    (73424 call compilerError "can't apply '#' to a range with idxType " call_tmp[623903] " using a count of type " call_tmp[623913])
    (475823 'end of statement')
    (510744 'move' ret[510739](510743 'deref' r[73372]))
    (510741 return ret[510739])
  }
  function chpl_checkIfRangeIterWillOverflow[73436](arg idxType[73434]:_any[178](?), arg low[73438]:_any[178](?), arg high[73440]:_any[178](?), arg stride[73442]:_any[178](?), arg first[73445] :
  low[73438] =
  low[73438], arg last[73449] :
  high[73440] =
  high[73440], arg shouldHalt[73453] :
  1 =
  1) : _unknown[51]
  {
    unknown ret[510748] "RVV" "temp"
    unknown call_tmp[623918] "expr temp" "maybe param" "maybe type" "temp"
    (623921 'move' call_tmp[623918](73458 call > low[73438] high[73440]))
    unknown call_tmp[623923] "expr temp" "maybe param" "maybe type" "temp"
    (623926 'move' call_tmp[623923](73464 call _cond_test call_tmp[623918]))
    if call_tmp[623923]
    {
      (510753 'move' ret[510748](510752 'deref' 0))
      gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510746] _end_chpl_checkIfRangeIterWillOverflow[510746]
    }
    unknown willOverFlow[73470] "dead at end of block" "insert auto destroy"
    (541330 'init var' willOverFlow[73470] 0)
    (73473 'end of statement')
    unknown call_tmp[623928] "expr temp" "maybe param" "maybe type" "temp"
    (623931 'move' call_tmp[623928](73477 call isIntType idxType[73434]))
    unknown call_tmp[623933] "expr temp" "maybe param" "maybe type" "temp"
    (623936 'move' call_tmp[623933](73657 call _cond_test call_tmp[623928]))
    if call_tmp[623933]
    {
      unknown tmp[420716] "maybe param" "temp"
      (420727 'move' tmp[420716](73480 call > last[73449] 0))
      unknown call_tmp[623938] "expr temp" "maybe param" "maybe type" "temp"
      (623941 'move' call_tmp[623938](420729 call _cond_invalid tmp[420716]))
      if call_tmp[623938]
      {
        (420732 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558318] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558319] "maybe param" "temp"
      unknown call_tmp[623943] "expr temp" "maybe param" "maybe type" "temp"
      (623946 'move' call_tmp[623943](420717 call isTrue tmp[420716]))
      (558324 'move' tmp[558319](558322 call _cond_test call_tmp[623943]))
      if tmp[558319]
      {
        unknown tmp[558326] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623948] "expr temp" "maybe param" "maybe type" "temp"
        (623951 'move' call_tmp[623948](73484 call > stride[73442] 0))
        (558328 'move' tmp[558326](420720 call isTrue call_tmp[623948]))
        (558333 'move' tmp[558318](558330 '_paramFoldLogical' tmp[558319] tmp[558326]))
      }
      {
        (558338 'move' tmp[558318](558335 '_paramFoldLogical' tmp[558319] 0))
      }
      unknown call_tmp[623953] "expr temp" "maybe param" "maybe type" "temp"
      (623956 'move' call_tmp[623953](73544 call _cond_test tmp[558318]))
      if call_tmp[623953]
      {
        unknown call_tmp[623958] "expr temp" "maybe param" "maybe type" "temp"
        (623961 'move' call_tmp[623958](73492 call max idxType[73434]))
        unknown call_tmp[623963] "expr temp" "maybe param" "maybe type" "temp"
        (623966 'move' call_tmp[623963](73494 call - call_tmp[623958] last[73449]))
        unknown call_tmp[623968] "expr temp" "maybe param" "maybe type" "temp"
        (623971 'move' call_tmp[623968](73496 call > stride[73442] call_tmp[623963]))
        unknown call_tmp[623973] "expr temp" "maybe param" "maybe type" "temp"
        (623976 'move' call_tmp[623973](73504 call _cond_test call_tmp[623968]))
        if call_tmp[623973]
        {
          (73500 call = willOverFlow[73470] 1)
          (475827 'end of statement' willOverFlow[73470])
        }
      }
      {
        unknown tmp[420695] "maybe param" "temp"
        (420706 'move' tmp[420695](73511 call < last[73449] 0))
        unknown call_tmp[623978] "expr temp" "maybe param" "maybe type" "temp"
        (623981 'move' call_tmp[623978](420708 call _cond_invalid tmp[420695]))
        if call_tmp[623978]
        {
          (420711 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[558345] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558346] "maybe param" "temp"
        unknown call_tmp[623983] "expr temp" "maybe param" "maybe type" "temp"
        (623986 'move' call_tmp[623983](420696 call isTrue tmp[420695]))
        (558351 'move' tmp[558346](558349 call _cond_test call_tmp[623983]))
        if tmp[558346]
        {
          unknown tmp[558353] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623988] "expr temp" "maybe param" "maybe type" "temp"
          (623991 'move' call_tmp[623988](73515 call < stride[73442] 0))
          (558355 'move' tmp[558353](420699 call isTrue call_tmp[623988]))
          (558360 'move' tmp[558345](558357 '_paramFoldLogical' tmp[558346] tmp[558353]))
        }
        {
          (558365 'move' tmp[558345](558362 '_paramFoldLogical' tmp[558346] 0))
        }
        unknown call_tmp[623993] "expr temp" "maybe param" "maybe type" "temp"
        (623996 'move' call_tmp[623993](73540 call _cond_test tmp[558345]))
        if call_tmp[623993]
        {
          unknown call_tmp[623998] "expr temp" "maybe param" "maybe type" "temp"
          (624001 'move' call_tmp[623998](73523 call min idxType[73434]))
          unknown call_tmp[624003] "expr temp" "maybe param" "maybe type" "temp"
          (624006 'move' call_tmp[624003](73525 call - call_tmp[623998] last[73449]))
          unknown call_tmp[624008] "expr temp" "maybe param" "maybe type" "temp"
          (624011 'move' call_tmp[624008](73527 call < stride[73442] call_tmp[624003]))
          unknown call_tmp[624013] "expr temp" "maybe param" "maybe type" "temp"
          (624016 'move' call_tmp[624013](73535 call _cond_test call_tmp[624008]))
          if call_tmp[624013]
          {
            (73531 call = willOverFlow[73470] 1)
            (475830 'end of statement' willOverFlow[73470])
          }
        }
      }
    }
    {
      unknown call_tmp[624018] "expr temp" "maybe param" "maybe type" "temp"
      (624021 'move' call_tmp[624018](73553 call isUintType idxType[73434]))
      unknown call_tmp[624023] "expr temp" "maybe param" "maybe type" "temp"
      (624026 'move' call_tmp[624023](73653 call _cond_test call_tmp[624018]))
      if call_tmp[624023]
      {
        unknown call_tmp[624028] "expr temp" "maybe param" "maybe type" "temp"
        (624031 'move' call_tmp[624028](73556 call > stride[73442] 0))
        unknown call_tmp[624033] "expr temp" "maybe param" "maybe type" "temp"
        (624036 'move' call_tmp[624033](73608 call _cond_test call_tmp[624028]))
        if call_tmp[624033]
        {
          unknown call_tmp[624038] "expr temp" "maybe param" "maybe type" "temp"
          (624041 'move' call_tmp[624038](73561 call _cast idxType[73434] stride[73442]))
          unknown call_tmp[624043] "expr temp" "maybe param" "maybe type" "temp"
          (624046 'move' call_tmp[624043](73563 call + last[73449] call_tmp[624038]))
          unknown call_tmp[624048] "expr temp" "maybe param" "maybe type" "temp"
          (624051 'move' call_tmp[624048](73566 call < call_tmp[624043] last[73449]))
          unknown call_tmp[624053] "expr temp" "maybe param" "maybe type" "temp"
          (624056 'move' call_tmp[624053](73574 call _cond_test call_tmp[624048]))
          if call_tmp[624053]
          {
            (73570 call = willOverFlow[73470] 1)
            (475832 'end of statement' willOverFlow[73470])
          }
        }
        {
          unknown call_tmp[624058] "expr temp" "maybe param" "maybe type" "temp"
          (624061 'move' call_tmp[624058](73581 call < stride[73442] 0))
          unknown call_tmp[624063] "expr temp" "maybe param" "maybe type" "temp"
          (624066 'move' call_tmp[624063](73604 call _cond_test call_tmp[624058]))
          if call_tmp[624063]
          {
            unknown call_tmp[624068] "expr temp" "maybe param" "maybe type" "temp"
            (624071 'move' call_tmp[624068](73586 call _cast idxType[73434] stride[73442]))
            unknown call_tmp[624073] "expr temp" "maybe param" "maybe type" "temp"
            (624076 'move' call_tmp[624073](73588 call + last[73449] call_tmp[624068]))
            unknown call_tmp[624078] "expr temp" "maybe param" "maybe type" "temp"
            (624081 'move' call_tmp[624078](73591 call > call_tmp[624073] last[73449]))
            unknown call_tmp[624083] "expr temp" "maybe param" "maybe type" "temp"
            (624086 'move' call_tmp[624083](73599 call _cond_test call_tmp[624078]))
            if call_tmp[624083]
            {
              (73595 call = willOverFlow[73470] 1)
              (475834 'end of statement' willOverFlow[73470])
            }
          }
        }
      }
      {
        (73650 call compilerError "Iterator overflow checking is only supported " "for integral types")
      }
    }
    unknown tmp[420737] "maybe param" "temp"
    (420748 'move' tmp[420737] willOverFlow[73470])
    unknown call_tmp[624088] "expr temp" "maybe param" "maybe type" "temp"
    (624091 'move' call_tmp[624088](420750 call _cond_invalid tmp[420737]))
    if call_tmp[624088]
    {
      (420753 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558372] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558373] "maybe param" "temp"
    unknown call_tmp[624093] "expr temp" "maybe param" "maybe type" "temp"
    (624096 'move' call_tmp[624093](420738 call isTrue tmp[420737]))
    (558378 'move' tmp[558373](558376 call _cond_test call_tmp[624093]))
    if tmp[558373]
    {
      unknown tmp[558380] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558382 'move' tmp[558380](420741 call isTrue shouldHalt[73453]))
      (558387 'move' tmp[558372](558384 '_paramFoldLogical' tmp[558373] tmp[558380]))
    }
    {
      (558392 'move' tmp[558372](558389 '_paramFoldLogical' tmp[558373] 0))
    }
    unknown call_tmp[624098] "expr temp" "maybe param" "maybe type" "temp"
    (624101 'move' call_tmp[624098](73691 call _cond_test tmp[558372]))
    if call_tmp[624098]
    {
      (73688 call boundsCheckHalt module=[255] HaltWrappers[210085] "Iteration over a bounded range may be incorrect due to overflow.")
      (358054 'referenced modules list' HaltWrappers[210085])
    }
    (510758 'move' ret[510748](510757 'deref' willOverFlow[73470]))
    gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510746] _end_chpl_checkIfRangeIterWillOverflow[510746]
    (475839 'end of statement' willOverFlow[73470])
    label _end_chpl_checkIfRangeIterWillOverflow[510746]
    (510750 return ret[510748])
  }
  function range[64319](?).checkIfIterWillOverflow[73707](arg _mt[73712]:_MT[238], arg this[73709]:range[64319](?) :
  range[64319](?), arg shouldHalt[73704] :
  1 =
  1) : _unknown[51] "method" "no doc"
  {
    unknown ret[510764] "RVV" "temp"
    unknown call_tmp[624105] "expr temp" "maybe param" "maybe type" "temp"
    (624108 'move' call_tmp[624105](73716 call intIdxType _mt[243] this[73709]))
    unknown call_tmp[624112] "expr temp" "maybe param" "maybe type" "temp"
    (624115 'move' call_tmp[624112](73721 call _low _mt[243] this[73709]))
    unknown call_tmp[624119] "expr temp" "maybe param" "maybe type" "temp"
    (624122 'move' call_tmp[624119](73725 call _high _mt[243] this[73709]))
    unknown call_tmp[624126] "expr temp" "maybe param" "maybe type" "temp"
    (624129 'move' call_tmp[624126](73729 call stride _mt[243] this[73709]))
    unknown call_tmp[624133] "expr temp" "maybe param" "maybe type" "temp"
    (624136 'move' call_tmp[624133](73733 call firstAsInt _mt[243] this[73709]))
    unknown call_tmp[624140] "expr temp" "maybe param" "maybe type" "temp"
    (624143 'move' call_tmp[624140](73737 call lastAsInt _mt[243] this[73709]))
    unknown call_tmp[624145] "expr temp" "maybe param" "maybe type" "temp"
    (624148 'move' call_tmp[624145](73741 call chpl_checkIfRangeIterWillOverflow call_tmp[624105] call_tmp[624112] call_tmp[624119] call_tmp[624126] call_tmp[624133] call_tmp[624140] shouldHalt[73704]))
    (510769 'move' ret[510764](510768 'deref' call_tmp[624145]))
    (510766 return ret[510764])
  }
  function chpl_direct_range_iter[456311](arg low[456318] :
  (456315 call int(64)[13] 64), arg high[456324] :
  (456322 call int(64)[13] 64), arg stride[456330] :
  (456328 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510773] "RVV" "temp"
    unknown call_tmp[624150] "expr temp" "maybe param" "maybe type" "temp"
    (624153 'move' call_tmp[624150](456337 call chpl_build_bounded_range low[456318] high[456324]))
    unknown call_tmp[624155] "maybe param" "maybe type" "temp"
    (624158 'move' call_tmp[624155](456335 call chpl_by call_tmp[624150] stride[456330]))
    const r[456333] "dead at end of block" "const" "insert auto destroy"
    (541332 'init var' r[456333] call_tmp[624155])
    (456342 'end of statement')
    {
      unknown _indexOfInterest[456344] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456346] "expr temp" "temp"
      (456348 'move' _iterator[456346](456351 call _getIterator r[456333]))
      Defer
      {
        {
          (456355 call _freeIterator _iterator[456346])
        }
      }
      { scopeless type
        (456359 'move' _indexOfInterest[456344](456362 call iteratorIndex _iterator[456346]))
      }
      ForLoop[456364]
      {
        unknown i[456367] "index var" "insert auto destroy"
        (475843 'end of statement')
        (456369 'move' i[456367] _indexOfInterest[456344])
        (475844 'end of statement' i[456367])
        unknown yret[510777] "YVV" "temp"
        (510780 'move' yret[510777](510779 'deref' i[456367]))
        (510782 yield yret[510777])
        (475846 'end of statement' i[456367])
        label _continueLabel[456374]
        _indexOfInterest[456344]
        _iterator[456346]
      }
      label _breakLabel[456376]
    }
    (510775 return ret[510773])
  }
  function chpl_direct_range_iter[456242](arg low[456249] :
  (456246 call int(64)[13] 32), arg high[456255] :
  (456253 call int(64)[13] 32), arg stride[456261] :
  (456259 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510786] "RVV" "temp"
    unknown call_tmp[624160] "expr temp" "maybe param" "maybe type" "temp"
    (624163 'move' call_tmp[624160](456268 call chpl_build_bounded_range low[456249] high[456255]))
    unknown call_tmp[624165] "maybe param" "maybe type" "temp"
    (624168 'move' call_tmp[624165](456266 call chpl_by call_tmp[624160] stride[456261]))
    const r[456264] "dead at end of block" "const" "insert auto destroy"
    (541334 'init var' r[456264] call_tmp[624165])
    (456273 'end of statement')
    {
      unknown _indexOfInterest[456275] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456277] "expr temp" "temp"
      (456279 'move' _iterator[456277](456282 call _getIterator r[456264]))
      Defer
      {
        {
          (456286 call _freeIterator _iterator[456277])
        }
      }
      { scopeless type
        (456290 'move' _indexOfInterest[456275](456293 call iteratorIndex _iterator[456277]))
      }
      ForLoop[456295]
      {
        unknown i[456298] "index var" "insert auto destroy"
        (475849 'end of statement')
        (456300 'move' i[456298] _indexOfInterest[456275])
        (475850 'end of statement' i[456298])
        unknown yret[510790] "YVV" "temp"
        (510793 'move' yret[510790](510792 'deref' i[456298]))
        (510795 yield yret[510790])
        (475852 'end of statement' i[456298])
        label _continueLabel[456305]
        _indexOfInterest[456275]
        _iterator[456277]
      }
      label _breakLabel[456307]
    }
    (510788 return ret[510786])
  }
  function chpl_direct_range_iter[456173](arg low[456180] :
  (456177 call int(64)[13] 16), arg high[456186] :
  (456184 call int(64)[13] 16), arg stride[456192] :
  (456190 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510799] "RVV" "temp"
    unknown call_tmp[624170] "expr temp" "maybe param" "maybe type" "temp"
    (624173 'move' call_tmp[624170](456199 call chpl_build_bounded_range low[456180] high[456186]))
    unknown call_tmp[624175] "maybe param" "maybe type" "temp"
    (624178 'move' call_tmp[624175](456197 call chpl_by call_tmp[624170] stride[456192]))
    const r[456195] "dead at end of block" "const" "insert auto destroy"
    (541336 'init var' r[456195] call_tmp[624175])
    (456204 'end of statement')
    {
      unknown _indexOfInterest[456206] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456208] "expr temp" "temp"
      (456210 'move' _iterator[456208](456213 call _getIterator r[456195]))
      Defer
      {
        {
          (456217 call _freeIterator _iterator[456208])
        }
      }
      { scopeless type
        (456221 'move' _indexOfInterest[456206](456224 call iteratorIndex _iterator[456208]))
      }
      ForLoop[456226]
      {
        unknown i[456229] "index var" "insert auto destroy"
        (475855 'end of statement')
        (456231 'move' i[456229] _indexOfInterest[456206])
        (475856 'end of statement' i[456229])
        unknown yret[510803] "YVV" "temp"
        (510806 'move' yret[510803](510805 'deref' i[456229]))
        (510808 yield yret[510803])
        (475858 'end of statement' i[456229])
        label _continueLabel[456236]
        _indexOfInterest[456206]
        _iterator[456208]
      }
      label _breakLabel[456238]
    }
    (510801 return ret[510799])
  }
  function chpl_direct_range_iter[456104](arg low[456111] :
  (456108 call int(64)[13] 8), arg high[456117] :
  (456115 call int(64)[13] 8), arg stride[456123] :
  (456121 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510812] "RVV" "temp"
    unknown call_tmp[624180] "expr temp" "maybe param" "maybe type" "temp"
    (624183 'move' call_tmp[624180](456130 call chpl_build_bounded_range low[456111] high[456117]))
    unknown call_tmp[624185] "maybe param" "maybe type" "temp"
    (624188 'move' call_tmp[624185](456128 call chpl_by call_tmp[624180] stride[456123]))
    const r[456126] "dead at end of block" "const" "insert auto destroy"
    (541338 'init var' r[456126] call_tmp[624185])
    (456135 'end of statement')
    {
      unknown _indexOfInterest[456137] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456139] "expr temp" "temp"
      (456141 'move' _iterator[456139](456144 call _getIterator r[456126]))
      Defer
      {
        {
          (456148 call _freeIterator _iterator[456139])
        }
      }
      { scopeless type
        (456152 'move' _indexOfInterest[456137](456155 call iteratorIndex _iterator[456139]))
      }
      ForLoop[456157]
      {
        unknown i[456160] "index var" "insert auto destroy"
        (475861 'end of statement')
        (456162 'move' i[456160] _indexOfInterest[456137])
        (475862 'end of statement' i[456160])
        unknown yret[510816] "YVV" "temp"
        (510819 'move' yret[510816](510818 'deref' i[456160]))
        (510821 yield yret[510816])
        (475864 'end of statement' i[456160])
        label _continueLabel[456167]
        _indexOfInterest[456137]
        _iterator[456139]
      }
      label _breakLabel[456169]
    }
    (510814 return ret[510812])
  }
  function chpl_direct_range_iter[456587](arg low[456594] :
  (456591 call uint(64)[115] 64), arg high[456600] :
  (456598 call uint(64)[115] 64), arg stride[456606] :
  (456604 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510825] "RVV" "temp"
    unknown call_tmp[624190] "expr temp" "maybe param" "maybe type" "temp"
    (624193 'move' call_tmp[624190](456613 call chpl_build_bounded_range low[456594] high[456600]))
    unknown call_tmp[624195] "maybe param" "maybe type" "temp"
    (624198 'move' call_tmp[624195](456611 call chpl_by call_tmp[624190] stride[456606]))
    const r[456609] "dead at end of block" "const" "insert auto destroy"
    (541340 'init var' r[456609] call_tmp[624195])
    (456618 'end of statement')
    {
      unknown _indexOfInterest[456620] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456622] "expr temp" "temp"
      (456624 'move' _iterator[456622](456627 call _getIterator r[456609]))
      Defer
      {
        {
          (456631 call _freeIterator _iterator[456622])
        }
      }
      { scopeless type
        (456635 'move' _indexOfInterest[456620](456638 call iteratorIndex _iterator[456622]))
      }
      ForLoop[456640]
      {
        unknown i[456643] "index var" "insert auto destroy"
        (475867 'end of statement')
        (456645 'move' i[456643] _indexOfInterest[456620])
        (475868 'end of statement' i[456643])
        unknown yret[510829] "YVV" "temp"
        (510832 'move' yret[510829](510831 'deref' i[456643]))
        (510834 yield yret[510829])
        (475870 'end of statement' i[456643])
        label _continueLabel[456650]
        _indexOfInterest[456620]
        _iterator[456622]
      }
      label _breakLabel[456652]
    }
    (510827 return ret[510825])
  }
  function chpl_direct_range_iter[456518](arg low[456525] :
  (456522 call uint(64)[115] 32), arg high[456531] :
  (456529 call uint(64)[115] 32), arg stride[456537] :
  (456535 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510838] "RVV" "temp"
    unknown call_tmp[624200] "expr temp" "maybe param" "maybe type" "temp"
    (624203 'move' call_tmp[624200](456544 call chpl_build_bounded_range low[456525] high[456531]))
    unknown call_tmp[624205] "maybe param" "maybe type" "temp"
    (624208 'move' call_tmp[624205](456542 call chpl_by call_tmp[624200] stride[456537]))
    const r[456540] "dead at end of block" "const" "insert auto destroy"
    (541342 'init var' r[456540] call_tmp[624205])
    (456549 'end of statement')
    {
      unknown _indexOfInterest[456551] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456553] "expr temp" "temp"
      (456555 'move' _iterator[456553](456558 call _getIterator r[456540]))
      Defer
      {
        {
          (456562 call _freeIterator _iterator[456553])
        }
      }
      { scopeless type
        (456566 'move' _indexOfInterest[456551](456569 call iteratorIndex _iterator[456553]))
      }
      ForLoop[456571]
      {
        unknown i[456574] "index var" "insert auto destroy"
        (475873 'end of statement')
        (456576 'move' i[456574] _indexOfInterest[456551])
        (475874 'end of statement' i[456574])
        unknown yret[510842] "YVV" "temp"
        (510845 'move' yret[510842](510844 'deref' i[456574]))
        (510847 yield yret[510842])
        (475876 'end of statement' i[456574])
        label _continueLabel[456581]
        _indexOfInterest[456551]
        _iterator[456553]
      }
      label _breakLabel[456583]
    }
    (510840 return ret[510838])
  }
  function chpl_direct_range_iter[456449](arg low[456456] :
  (456453 call uint(64)[115] 16), arg high[456462] :
  (456460 call uint(64)[115] 16), arg stride[456468] :
  (456466 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510851] "RVV" "temp"
    unknown call_tmp[624210] "expr temp" "maybe param" "maybe type" "temp"
    (624213 'move' call_tmp[624210](456475 call chpl_build_bounded_range low[456456] high[456462]))
    unknown call_tmp[624215] "maybe param" "maybe type" "temp"
    (624218 'move' call_tmp[624215](456473 call chpl_by call_tmp[624210] stride[456468]))
    const r[456471] "dead at end of block" "const" "insert auto destroy"
    (541344 'init var' r[456471] call_tmp[624215])
    (456480 'end of statement')
    {
      unknown _indexOfInterest[456482] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456484] "expr temp" "temp"
      (456486 'move' _iterator[456484](456489 call _getIterator r[456471]))
      Defer
      {
        {
          (456493 call _freeIterator _iterator[456484])
        }
      }
      { scopeless type
        (456497 'move' _indexOfInterest[456482](456500 call iteratorIndex _iterator[456484]))
      }
      ForLoop[456502]
      {
        unknown i[456505] "index var" "insert auto destroy"
        (475879 'end of statement')
        (456507 'move' i[456505] _indexOfInterest[456482])
        (475880 'end of statement' i[456505])
        unknown yret[510855] "YVV" "temp"
        (510858 'move' yret[510855](510857 'deref' i[456505]))
        (510860 yield yret[510855])
        (475882 'end of statement' i[456505])
        label _continueLabel[456512]
        _indexOfInterest[456482]
        _iterator[456484]
      }
      label _breakLabel[456514]
    }
    (510853 return ret[510851])
  }
  function chpl_direct_range_iter[456380](arg low[456387] :
  (456384 call uint(64)[115] 8), arg high[456393] :
  (456391 call uint(64)[115] 8), arg stride[456399] :
  (456397 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510864] "RVV" "temp"
    unknown call_tmp[624220] "expr temp" "maybe param" "maybe type" "temp"
    (624223 'move' call_tmp[624220](456406 call chpl_build_bounded_range low[456387] high[456393]))
    unknown call_tmp[624225] "maybe param" "maybe type" "temp"
    (624228 'move' call_tmp[624225](456404 call chpl_by call_tmp[624220] stride[456399]))
    const r[456402] "dead at end of block" "const" "insert auto destroy"
    (541346 'init var' r[456402] call_tmp[624225])
    (456411 'end of statement')
    {
      unknown _indexOfInterest[456413] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456415] "expr temp" "temp"
      (456417 'move' _iterator[456415](456420 call _getIterator r[456402]))
      Defer
      {
        {
          (456424 call _freeIterator _iterator[456415])
        }
      }
      { scopeless type
        (456428 'move' _indexOfInterest[456413](456431 call iteratorIndex _iterator[456415]))
      }
      ForLoop[456433]
      {
        unknown i[456436] "index var" "insert auto destroy"
        (475885 'end of statement')
        (456438 'move' i[456436] _indexOfInterest[456413])
        (475886 'end of statement' i[456436])
        unknown yret[510868] "YVV" "temp"
        (510871 'move' yret[510868](510870 'deref' i[456436]))
        (510873 yield yret[510868])
        (475888 'end of statement' i[456436])
        label _continueLabel[456443]
        _indexOfInterest[456413]
        _iterator[456415]
      }
      label _breakLabel[456445]
    }
    (510866 return ret[510864])
  }
  function chpl_direct_range_iter[73909](arg low[73906]:enum[187](?), arg high[73912]:enum[187](?), arg stride[73916]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510877] "RVV" "temp"
    unknown call_tmp[624230] "expr temp" "maybe param" "maybe type" "temp"
    (624233 'move' call_tmp[624230](73921 call chpl_build_bounded_range low[73906] high[73912]))
    unknown call_tmp[624235] "maybe param" "maybe type" "temp"
    (624238 'move' call_tmp[624235](73924 call chpl_by call_tmp[624230] stride[73916]))
    const r[73926] "dead at end of block" "const" "insert auto destroy"
    (541348 'init var' r[73926] call_tmp[624235])
    (73929 'end of statement')
    {
      unknown _indexOfInterest[73936] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[73937] "expr temp" "temp"
      (73946 'move' _iterator[73937](73944 call _getIterator r[73926]))
      Defer
      {
        {
          (73962 call _freeIterator _iterator[73937])
        }
      }
      { scopeless type
        (73951 'move' _indexOfInterest[73936](73948 call iteratorIndex _iterator[73937]))
      }
      ForLoop[73938]
      {
        unknown i[73955] "index var" "insert auto destroy"
        (475891 'end of statement')
        (73957 'move' i[73955] _indexOfInterest[73936])
        (475892 'end of statement' i[73955])
        unknown yret[510881] "YVV" "temp"
        (510884 'move' yret[510881](510883 'deref' i[73955]))
        (510886 yield yret[510881])
        (475894 'end of statement' i[73955])
        label _continueLabel[73941]
        _indexOfInterest[73936]
        _iterator[73937]
      }
      label _breakLabel[73942]
    }
    (510879 return ret[510877])
  }
  function chpl_direct_range_iter[73977](arg low[73974]:bool[10], arg high[73980]:bool[10], arg stride[73984]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510890] "RVV" "temp"
    unknown call_tmp[624240] "expr temp" "maybe param" "maybe type" "temp"
    (624243 'move' call_tmp[624240](73989 call chpl_build_bounded_range low[73974] high[73980]))
    unknown call_tmp[624245] "maybe param" "maybe type" "temp"
    (624248 'move' call_tmp[624245](73992 call chpl_by call_tmp[624240] stride[73984]))
    const r[73994] "dead at end of block" "const" "insert auto destroy"
    (541350 'init var' r[73994] call_tmp[624245])
    (73997 'end of statement')
    {
      unknown _indexOfInterest[74004] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[74005] "expr temp" "temp"
      (74014 'move' _iterator[74005](74012 call _getIterator r[73994]))
      Defer
      {
        {
          (74030 call _freeIterator _iterator[74005])
        }
      }
      { scopeless type
        (74019 'move' _indexOfInterest[74004](74016 call iteratorIndex _iterator[74005]))
      }
      ForLoop[74006]
      {
        unknown i[74023] "index var" "insert auto destroy"
        (475897 'end of statement')
        (74025 'move' i[74023] _indexOfInterest[74004])
        (475898 'end of statement' i[74023])
        unknown yret[510894] "YVV" "temp"
        (510897 'move' yret[510894](510896 'deref' i[74023]))
        (510899 yield yret[510894])
        (475900 'end of statement' i[74023])
        label _continueLabel[74009]
        _indexOfInterest[74004]
        _iterator[74005]
      }
      label _breakLabel[74010]
    }
    (510892 return ret[510890])
  }
  function chpl_direct_range_iter[456845](arg low[456852] :
  (456849 call int(64)[13] 64), arg high[456858] :
  (456856 call int(64)[13] 64), param arg stride[456864] :
  (456862 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510903] "RVV" "temp"
    {
      unknown _indexOfInterest[456868] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456870] "expr temp" "temp"
      unknown call_tmp[624250] "expr temp" "maybe param" "maybe type" "temp"
      (624253 'move' call_tmp[624250](456877 call chpl_direct_param_stride_range_iter low[456852] high[456858] stride[456864]))
      (456872 'move' _iterator[456870](456875 call _getIterator call_tmp[624250]))
      Defer
      {
        {
          (456883 call _freeIterator _iterator[456870])
        }
      }
      { scopeless type
        (456887 'move' _indexOfInterest[456868](456890 call iteratorIndex _iterator[456870]))
      }
      ForLoop[456892]
      {
        unknown i[456895] "index var" "insert auto destroy"
        (475903 'end of statement')
        (456897 'move' i[456895] _indexOfInterest[456868])
        (475904 'end of statement' i[456895])
        unknown yret[510907] "YVV" "temp"
        (510910 'move' yret[510907](510909 'deref' i[456895]))
        (510912 yield yret[510907])
        (475906 'end of statement' i[456895])
        label _continueLabel[456902]
        _indexOfInterest[456868]
        _iterator[456870]
      }
      label _breakLabel[456904]
    }
    (510905 return ret[510903])
  }
  function chpl_direct_range_iter[456782](arg low[456789] :
  (456786 call int(64)[13] 32), arg high[456795] :
  (456793 call int(64)[13] 32), param arg stride[456801] :
  (456799 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510916] "RVV" "temp"
    {
      unknown _indexOfInterest[456805] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456807] "expr temp" "temp"
      unknown call_tmp[624255] "expr temp" "maybe param" "maybe type" "temp"
      (624258 'move' call_tmp[624255](456814 call chpl_direct_param_stride_range_iter low[456789] high[456795] stride[456801]))
      (456809 'move' _iterator[456807](456812 call _getIterator call_tmp[624255]))
      Defer
      {
        {
          (456820 call _freeIterator _iterator[456807])
        }
      }
      { scopeless type
        (456824 'move' _indexOfInterest[456805](456827 call iteratorIndex _iterator[456807]))
      }
      ForLoop[456829]
      {
        unknown i[456832] "index var" "insert auto destroy"
        (475909 'end of statement')
        (456834 'move' i[456832] _indexOfInterest[456805])
        (475910 'end of statement' i[456832])
        unknown yret[510920] "YVV" "temp"
        (510923 'move' yret[510920](510922 'deref' i[456832]))
        (510925 yield yret[510920])
        (475912 'end of statement' i[456832])
        label _continueLabel[456839]
        _indexOfInterest[456805]
        _iterator[456807]
      }
      label _breakLabel[456841]
    }
    (510918 return ret[510916])
  }
  function chpl_direct_range_iter[456719](arg low[456726] :
  (456723 call int(64)[13] 16), arg high[456732] :
  (456730 call int(64)[13] 16), param arg stride[456738] :
  (456736 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510929] "RVV" "temp"
    {
      unknown _indexOfInterest[456742] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456744] "expr temp" "temp"
      unknown call_tmp[624260] "expr temp" "maybe param" "maybe type" "temp"
      (624263 'move' call_tmp[624260](456751 call chpl_direct_param_stride_range_iter low[456726] high[456732] stride[456738]))
      (456746 'move' _iterator[456744](456749 call _getIterator call_tmp[624260]))
      Defer
      {
        {
          (456757 call _freeIterator _iterator[456744])
        }
      }
      { scopeless type
        (456761 'move' _indexOfInterest[456742](456764 call iteratorIndex _iterator[456744]))
      }
      ForLoop[456766]
      {
        unknown i[456769] "index var" "insert auto destroy"
        (475915 'end of statement')
        (456771 'move' i[456769] _indexOfInterest[456742])
        (475916 'end of statement' i[456769])
        unknown yret[510933] "YVV" "temp"
        (510936 'move' yret[510933](510935 'deref' i[456769]))
        (510938 yield yret[510933])
        (475918 'end of statement' i[456769])
        label _continueLabel[456776]
        _indexOfInterest[456742]
        _iterator[456744]
      }
      label _breakLabel[456778]
    }
    (510931 return ret[510929])
  }
  function chpl_direct_range_iter[456656](arg low[456663] :
  (456660 call int(64)[13] 8), arg high[456669] :
  (456667 call int(64)[13] 8), param arg stride[456675] :
  (456673 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510942] "RVV" "temp"
    {
      unknown _indexOfInterest[456679] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456681] "expr temp" "temp"
      unknown call_tmp[624265] "expr temp" "maybe param" "maybe type" "temp"
      (624268 'move' call_tmp[624265](456688 call chpl_direct_param_stride_range_iter low[456663] high[456669] stride[456675]))
      (456683 'move' _iterator[456681](456686 call _getIterator call_tmp[624265]))
      Defer
      {
        {
          (456694 call _freeIterator _iterator[456681])
        }
      }
      { scopeless type
        (456698 'move' _indexOfInterest[456679](456701 call iteratorIndex _iterator[456681]))
      }
      ForLoop[456703]
      {
        unknown i[456706] "index var" "insert auto destroy"
        (475921 'end of statement')
        (456708 'move' i[456706] _indexOfInterest[456679])
        (475922 'end of statement' i[456706])
        unknown yret[510946] "YVV" "temp"
        (510949 'move' yret[510946](510948 'deref' i[456706]))
        (510951 yield yret[510946])
        (475924 'end of statement' i[456706])
        label _continueLabel[456713]
        _indexOfInterest[456679]
        _iterator[456681]
      }
      label _breakLabel[456715]
    }
    (510944 return ret[510942])
  }
  function chpl_direct_range_iter[457097](arg low[457104] :
  (457101 call uint(64)[115] 64), arg high[457110] :
  (457108 call uint(64)[115] 64), param arg stride[457116] :
  (457114 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510955] "RVV" "temp"
    {
      unknown _indexOfInterest[457120] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457122] "expr temp" "temp"
      unknown call_tmp[624270] "expr temp" "maybe param" "maybe type" "temp"
      (624273 'move' call_tmp[624270](457129 call chpl_direct_param_stride_range_iter low[457104] high[457110] stride[457116]))
      (457124 'move' _iterator[457122](457127 call _getIterator call_tmp[624270]))
      Defer
      {
        {
          (457135 call _freeIterator _iterator[457122])
        }
      }
      { scopeless type
        (457139 'move' _indexOfInterest[457120](457142 call iteratorIndex _iterator[457122]))
      }
      ForLoop[457144]
      {
        unknown i[457147] "index var" "insert auto destroy"
        (475927 'end of statement')
        (457149 'move' i[457147] _indexOfInterest[457120])
        (475928 'end of statement' i[457147])
        unknown yret[510959] "YVV" "temp"
        (510962 'move' yret[510959](510961 'deref' i[457147]))
        (510964 yield yret[510959])
        (475930 'end of statement' i[457147])
        label _continueLabel[457154]
        _indexOfInterest[457120]
        _iterator[457122]
      }
      label _breakLabel[457156]
    }
    (510957 return ret[510955])
  }
  function chpl_direct_range_iter[457034](arg low[457041] :
  (457038 call uint(64)[115] 32), arg high[457047] :
  (457045 call uint(64)[115] 32), param arg stride[457053] :
  (457051 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510968] "RVV" "temp"
    {
      unknown _indexOfInterest[457057] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457059] "expr temp" "temp"
      unknown call_tmp[624275] "expr temp" "maybe param" "maybe type" "temp"
      (624278 'move' call_tmp[624275](457066 call chpl_direct_param_stride_range_iter low[457041] high[457047] stride[457053]))
      (457061 'move' _iterator[457059](457064 call _getIterator call_tmp[624275]))
      Defer
      {
        {
          (457072 call _freeIterator _iterator[457059])
        }
      }
      { scopeless type
        (457076 'move' _indexOfInterest[457057](457079 call iteratorIndex _iterator[457059]))
      }
      ForLoop[457081]
      {
        unknown i[457084] "index var" "insert auto destroy"
        (475933 'end of statement')
        (457086 'move' i[457084] _indexOfInterest[457057])
        (475934 'end of statement' i[457084])
        unknown yret[510972] "YVV" "temp"
        (510975 'move' yret[510972](510974 'deref' i[457084]))
        (510977 yield yret[510972])
        (475936 'end of statement' i[457084])
        label _continueLabel[457091]
        _indexOfInterest[457057]
        _iterator[457059]
      }
      label _breakLabel[457093]
    }
    (510970 return ret[510968])
  }
  function chpl_direct_range_iter[456971](arg low[456978] :
  (456975 call uint(64)[115] 16), arg high[456984] :
  (456982 call uint(64)[115] 16), param arg stride[456990] :
  (456988 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510981] "RVV" "temp"
    {
      unknown _indexOfInterest[456994] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456996] "expr temp" "temp"
      unknown call_tmp[624280] "expr temp" "maybe param" "maybe type" "temp"
      (624283 'move' call_tmp[624280](457003 call chpl_direct_param_stride_range_iter low[456978] high[456984] stride[456990]))
      (456998 'move' _iterator[456996](457001 call _getIterator call_tmp[624280]))
      Defer
      {
        {
          (457009 call _freeIterator _iterator[456996])
        }
      }
      { scopeless type
        (457013 'move' _indexOfInterest[456994](457016 call iteratorIndex _iterator[456996]))
      }
      ForLoop[457018]
      {
        unknown i[457021] "index var" "insert auto destroy"
        (475939 'end of statement')
        (457023 'move' i[457021] _indexOfInterest[456994])
        (475940 'end of statement' i[457021])
        unknown yret[510985] "YVV" "temp"
        (510988 'move' yret[510985](510987 'deref' i[457021]))
        (510990 yield yret[510985])
        (475942 'end of statement' i[457021])
        label _continueLabel[457028]
        _indexOfInterest[456994]
        _iterator[456996]
      }
      label _breakLabel[457030]
    }
    (510983 return ret[510981])
  }
  function chpl_direct_range_iter[456908](arg low[456915] :
  (456912 call uint(64)[115] 8), arg high[456921] :
  (456919 call uint(64)[115] 8), param arg stride[456927] :
  (456925 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510994] "RVV" "temp"
    {
      unknown _indexOfInterest[456931] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456933] "expr temp" "temp"
      unknown call_tmp[624285] "expr temp" "maybe param" "maybe type" "temp"
      (624288 'move' call_tmp[624285](456940 call chpl_direct_param_stride_range_iter low[456915] high[456921] stride[456927]))
      (456935 'move' _iterator[456933](456938 call _getIterator call_tmp[624285]))
      Defer
      {
        {
          (456946 call _freeIterator _iterator[456933])
        }
      }
      { scopeless type
        (456950 'move' _indexOfInterest[456931](456953 call iteratorIndex _iterator[456933]))
      }
      ForLoop[456955]
      {
        unknown i[456958] "index var" "insert auto destroy"
        (475945 'end of statement')
        (456960 'move' i[456958] _indexOfInterest[456931])
        (475946 'end of statement' i[456958])
        unknown yret[510998] "YVV" "temp"
        (511001 'move' yret[510998](511000 'deref' i[456958]))
        (511003 yield yret[510998])
        (475948 'end of statement' i[456958])
        label _continueLabel[456965]
        _indexOfInterest[456931]
        _iterator[456933]
      }
      label _breakLabel[456967]
    }
    (510996 return ret[510994])
  }
  function chpl_direct_range_iter[74191](arg low[74188]:enum[187](?), arg high[74194]:enum[187](?), param arg stride[74198]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511007] "RVV" "temp"
    unknown call_tmp[624290] "expr temp" "maybe param" "maybe type" "temp"
    (624293 'move' call_tmp[624290](74203 call == stride[74198] 1))
    unknown call_tmp[624295] "expr temp" "maybe param" "maybe type" "temp"
    (624298 'move' call_tmp[624295](74302 call _cond_test call_tmp[624290]))
    if call_tmp[624295]
    {
      unknown call_tmp[624300] "maybe param" "maybe type" "temp"
      (624303 'move' call_tmp[624300](74207 call chpl_build_bounded_range low[74188] high[74194]))
      const r[74209] "dead at end of block" "const" "insert auto destroy"
      (541352 'init var' r[74209] call_tmp[624300])
      (74212 'end of statement')
      {
        unknown _indexOfInterest[74219] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74220] "expr temp" "temp"
        (74229 'move' _iterator[74220](74227 call _getIterator r[74209]))
        Defer
        {
          {
            (74245 call _freeIterator _iterator[74220])
          }
        }
        { scopeless type
          (74234 'move' _indexOfInterest[74219](74231 call iteratorIndex _iterator[74220]))
        }
        ForLoop[74221]
        {
          unknown i[74238] "index var" "insert auto destroy"
          (475951 'end of statement')
          (74240 'move' i[74238] _indexOfInterest[74219])
          (475952 'end of statement' i[74238])
          unknown yret[511011] "YVV" "temp"
          (511014 'move' yret[511011](511013 'deref' i[74238]))
          (511016 yield yret[511011])
          (475954 'end of statement' i[74238])
          label _continueLabel[74224]
          _indexOfInterest[74219]
          _iterator[74220]
        }
        label _breakLabel[74225]
      }
    }
    {
      unknown call_tmp[624305] "expr temp" "maybe param" "maybe type" "temp"
      (624308 'move' call_tmp[624305](74254 call chpl_build_bounded_range low[74188] high[74194]))
      unknown call_tmp[624310] "maybe param" "maybe type" "temp"
      (624313 'move' call_tmp[624310](74257 call chpl_by call_tmp[624305] stride[74198]))
      const r[74259] "dead at end of block" "const" "insert auto destroy"
      (541354 'init var' r[74259] call_tmp[624310])
      (74262 'end of statement')
      {
        unknown _indexOfInterest[74269] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74270] "expr temp" "temp"
        (74279 'move' _iterator[74270](74277 call _getIterator r[74259]))
        Defer
        {
          {
            (74295 call _freeIterator _iterator[74270])
          }
        }
        { scopeless type
          (74284 'move' _indexOfInterest[74269](74281 call iteratorIndex _iterator[74270]))
        }
        ForLoop[74271]
        {
          unknown i[74288] "index var" "insert auto destroy"
          (475957 'end of statement')
          (74290 'move' i[74288] _indexOfInterest[74269])
          (475958 'end of statement' i[74288])
          unknown yret[511018] "YVV" "temp"
          (511021 'move' yret[511018](511020 'deref' i[74288]))
          (511023 yield yret[511018])
          (475960 'end of statement' i[74288])
          label _continueLabel[74274]
          _indexOfInterest[74269]
          _iterator[74270]
        }
        label _breakLabel[74275]
      }
    }
    (511009 return ret[511007])
  }
  function chpl_direct_range_iter[74315](arg low[74312]:bool[10], arg high[74318]:bool[10], param arg stride[74322]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511027] "RVV" "temp"
    unknown call_tmp[624315] "expr temp" "maybe param" "maybe type" "temp"
    (624318 'move' call_tmp[624315](74327 call == stride[74322] 1))
    unknown call_tmp[624320] "expr temp" "maybe param" "maybe type" "temp"
    (624323 'move' call_tmp[624320](74426 call _cond_test call_tmp[624315]))
    if call_tmp[624320]
    {
      unknown call_tmp[624325] "maybe param" "maybe type" "temp"
      (624328 'move' call_tmp[624325](74331 call chpl_build_bounded_range low[74312] high[74318]))
      const r[74333] "dead at end of block" "const" "insert auto destroy"
      (541356 'init var' r[74333] call_tmp[624325])
      (74336 'end of statement')
      {
        unknown _indexOfInterest[74343] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74344] "expr temp" "temp"
        (74353 'move' _iterator[74344](74351 call _getIterator r[74333]))
        Defer
        {
          {
            (74369 call _freeIterator _iterator[74344])
          }
        }
        { scopeless type
          (74358 'move' _indexOfInterest[74343](74355 call iteratorIndex _iterator[74344]))
        }
        ForLoop[74345]
        {
          unknown i[74362] "index var" "insert auto destroy"
          (475963 'end of statement')
          (74364 'move' i[74362] _indexOfInterest[74343])
          (475964 'end of statement' i[74362])
          unknown yret[511031] "YVV" "temp"
          (511034 'move' yret[511031](511033 'deref' i[74362]))
          (511036 yield yret[511031])
          (475966 'end of statement' i[74362])
          label _continueLabel[74348]
          _indexOfInterest[74343]
          _iterator[74344]
        }
        label _breakLabel[74349]
      }
    }
    {
      unknown call_tmp[624330] "expr temp" "maybe param" "maybe type" "temp"
      (624333 'move' call_tmp[624330](74378 call chpl_build_bounded_range low[74312] high[74318]))
      unknown call_tmp[624335] "maybe param" "maybe type" "temp"
      (624338 'move' call_tmp[624335](74381 call chpl_by call_tmp[624330] stride[74322]))
      const r[74383] "dead at end of block" "const" "insert auto destroy"
      (541358 'init var' r[74383] call_tmp[624335])
      (74386 'end of statement')
      {
        unknown _indexOfInterest[74393] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74394] "expr temp" "temp"
        (74403 'move' _iterator[74394](74401 call _getIterator r[74383]))
        Defer
        {
          {
            (74419 call _freeIterator _iterator[74394])
          }
        }
        { scopeless type
          (74408 'move' _indexOfInterest[74393](74405 call iteratorIndex _iterator[74394]))
        }
        ForLoop[74395]
        {
          unknown i[74412] "index var" "insert auto destroy"
          (475969 'end of statement')
          (74414 'move' i[74412] _indexOfInterest[74393])
          (475970 'end of statement' i[74412])
          unknown yret[511038] "YVV" "temp"
          (511041 'move' yret[511038](511040 'deref' i[74412]))
          (511043 yield yret[511038])
          (475972 'end of statement' i[74412])
          label _continueLabel[74398]
          _indexOfInterest[74393]
          _iterator[74394]
        }
        label _breakLabel[74399]
      }
    }
    (511029 return ret[511027])
  }
  function chpl_direct_range_iter[457349](arg low[457356] :
  (457353 call int(64)[13] 64), arg high[457362] :
  (457360 call int(64)[13] 64), arg stride[457368] :
  (457366 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511047] "RVV" "temp"
    {
      unknown _indexOfInterest[457372] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457374] "expr temp" "temp"
      unknown call_tmp[624340] "expr temp" "maybe param" "maybe type" "temp"
      (624343 'move' call_tmp[624340](457381 call chpl_direct_pos_stride_range_iter low[457356] high[457362] stride[457368]))
      (457376 'move' _iterator[457374](457379 call _getIterator call_tmp[624340]))
      Defer
      {
        {
          (457387 call _freeIterator _iterator[457374])
        }
      }
      { scopeless type
        (457391 'move' _indexOfInterest[457372](457394 call iteratorIndex _iterator[457374]))
      }
      ForLoop[457396]
      {
        unknown i[457399] "index var" "insert auto destroy"
        (475975 'end of statement')
        (457401 'move' i[457399] _indexOfInterest[457372])
        (475976 'end of statement' i[457399])
        unknown yret[511051] "YVV" "temp"
        (511054 'move' yret[511051](511053 'deref' i[457399]))
        (511056 yield yret[511051])
        (475978 'end of statement' i[457399])
        label _continueLabel[457406]
        _indexOfInterest[457372]
        _iterator[457374]
      }
      label _breakLabel[457408]
    }
    (511049 return ret[511047])
  }
  function chpl_direct_range_iter[457286](arg low[457293] :
  (457290 call int(64)[13] 32), arg high[457299] :
  (457297 call int(64)[13] 32), arg stride[457305] :
  (457303 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511060] "RVV" "temp"
    {
      unknown _indexOfInterest[457309] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457311] "expr temp" "temp"
      unknown call_tmp[624345] "expr temp" "maybe param" "maybe type" "temp"
      (624348 'move' call_tmp[624345](457318 call chpl_direct_pos_stride_range_iter low[457293] high[457299] stride[457305]))
      (457313 'move' _iterator[457311](457316 call _getIterator call_tmp[624345]))
      Defer
      {
        {
          (457324 call _freeIterator _iterator[457311])
        }
      }
      { scopeless type
        (457328 'move' _indexOfInterest[457309](457331 call iteratorIndex _iterator[457311]))
      }
      ForLoop[457333]
      {
        unknown i[457336] "index var" "insert auto destroy"
        (475981 'end of statement')
        (457338 'move' i[457336] _indexOfInterest[457309])
        (475982 'end of statement' i[457336])
        unknown yret[511064] "YVV" "temp"
        (511067 'move' yret[511064](511066 'deref' i[457336]))
        (511069 yield yret[511064])
        (475984 'end of statement' i[457336])
        label _continueLabel[457343]
        _indexOfInterest[457309]
        _iterator[457311]
      }
      label _breakLabel[457345]
    }
    (511062 return ret[511060])
  }
  function chpl_direct_range_iter[457223](arg low[457230] :
  (457227 call int(64)[13] 16), arg high[457236] :
  (457234 call int(64)[13] 16), arg stride[457242] :
  (457240 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511073] "RVV" "temp"
    {
      unknown _indexOfInterest[457246] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457248] "expr temp" "temp"
      unknown call_tmp[624350] "expr temp" "maybe param" "maybe type" "temp"
      (624353 'move' call_tmp[624350](457255 call chpl_direct_pos_stride_range_iter low[457230] high[457236] stride[457242]))
      (457250 'move' _iterator[457248](457253 call _getIterator call_tmp[624350]))
      Defer
      {
        {
          (457261 call _freeIterator _iterator[457248])
        }
      }
      { scopeless type
        (457265 'move' _indexOfInterest[457246](457268 call iteratorIndex _iterator[457248]))
      }
      ForLoop[457270]
      {
        unknown i[457273] "index var" "insert auto destroy"
        (475987 'end of statement')
        (457275 'move' i[457273] _indexOfInterest[457246])
        (475988 'end of statement' i[457273])
        unknown yret[511077] "YVV" "temp"
        (511080 'move' yret[511077](511079 'deref' i[457273]))
        (511082 yield yret[511077])
        (475990 'end of statement' i[457273])
        label _continueLabel[457280]
        _indexOfInterest[457246]
        _iterator[457248]
      }
      label _breakLabel[457282]
    }
    (511075 return ret[511073])
  }
  function chpl_direct_range_iter[457160](arg low[457167] :
  (457164 call int(64)[13] 8), arg high[457173] :
  (457171 call int(64)[13] 8), arg stride[457179] :
  (457177 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511086] "RVV" "temp"
    {
      unknown _indexOfInterest[457183] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457185] "expr temp" "temp"
      unknown call_tmp[624355] "expr temp" "maybe param" "maybe type" "temp"
      (624358 'move' call_tmp[624355](457192 call chpl_direct_pos_stride_range_iter low[457167] high[457173] stride[457179]))
      (457187 'move' _iterator[457185](457190 call _getIterator call_tmp[624355]))
      Defer
      {
        {
          (457198 call _freeIterator _iterator[457185])
        }
      }
      { scopeless type
        (457202 'move' _indexOfInterest[457183](457205 call iteratorIndex _iterator[457185]))
      }
      ForLoop[457207]
      {
        unknown i[457210] "index var" "insert auto destroy"
        (475993 'end of statement')
        (457212 'move' i[457210] _indexOfInterest[457183])
        (475994 'end of statement' i[457210])
        unknown yret[511090] "YVV" "temp"
        (511093 'move' yret[511090](511092 'deref' i[457210]))
        (511095 yield yret[511090])
        (475996 'end of statement' i[457210])
        label _continueLabel[457217]
        _indexOfInterest[457183]
        _iterator[457185]
      }
      label _breakLabel[457219]
    }
    (511088 return ret[511086])
  }
  function chpl_direct_range_iter[457601](arg low[457608] :
  (457605 call uint(64)[115] 64), arg high[457614] :
  (457612 call uint(64)[115] 64), arg stride[457620] :
  (457618 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511099] "RVV" "temp"
    {
      unknown _indexOfInterest[457624] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457626] "expr temp" "temp"
      unknown call_tmp[624360] "expr temp" "maybe param" "maybe type" "temp"
      (624363 'move' call_tmp[624360](457633 call chpl_direct_pos_stride_range_iter low[457608] high[457614] stride[457620]))
      (457628 'move' _iterator[457626](457631 call _getIterator call_tmp[624360]))
      Defer
      {
        {
          (457639 call _freeIterator _iterator[457626])
        }
      }
      { scopeless type
        (457643 'move' _indexOfInterest[457624](457646 call iteratorIndex _iterator[457626]))
      }
      ForLoop[457648]
      {
        unknown i[457651] "index var" "insert auto destroy"
        (475999 'end of statement')
        (457653 'move' i[457651] _indexOfInterest[457624])
        (476000 'end of statement' i[457651])
        unknown yret[511103] "YVV" "temp"
        (511106 'move' yret[511103](511105 'deref' i[457651]))
        (511108 yield yret[511103])
        (476002 'end of statement' i[457651])
        label _continueLabel[457658]
        _indexOfInterest[457624]
        _iterator[457626]
      }
      label _breakLabel[457660]
    }
    (511101 return ret[511099])
  }
  function chpl_direct_range_iter[457538](arg low[457545] :
  (457542 call uint(64)[115] 32), arg high[457551] :
  (457549 call uint(64)[115] 32), arg stride[457557] :
  (457555 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511112] "RVV" "temp"
    {
      unknown _indexOfInterest[457561] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457563] "expr temp" "temp"
      unknown call_tmp[624365] "expr temp" "maybe param" "maybe type" "temp"
      (624368 'move' call_tmp[624365](457570 call chpl_direct_pos_stride_range_iter low[457545] high[457551] stride[457557]))
      (457565 'move' _iterator[457563](457568 call _getIterator call_tmp[624365]))
      Defer
      {
        {
          (457576 call _freeIterator _iterator[457563])
        }
      }
      { scopeless type
        (457580 'move' _indexOfInterest[457561](457583 call iteratorIndex _iterator[457563]))
      }
      ForLoop[457585]
      {
        unknown i[457588] "index var" "insert auto destroy"
        (476005 'end of statement')
        (457590 'move' i[457588] _indexOfInterest[457561])
        (476006 'end of statement' i[457588])
        unknown yret[511116] "YVV" "temp"
        (511119 'move' yret[511116](511118 'deref' i[457588]))
        (511121 yield yret[511116])
        (476008 'end of statement' i[457588])
        label _continueLabel[457595]
        _indexOfInterest[457561]
        _iterator[457563]
      }
      label _breakLabel[457597]
    }
    (511114 return ret[511112])
  }
  function chpl_direct_range_iter[457475](arg low[457482] :
  (457479 call uint(64)[115] 16), arg high[457488] :
  (457486 call uint(64)[115] 16), arg stride[457494] :
  (457492 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511125] "RVV" "temp"
    {
      unknown _indexOfInterest[457498] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457500] "expr temp" "temp"
      unknown call_tmp[624370] "expr temp" "maybe param" "maybe type" "temp"
      (624373 'move' call_tmp[624370](457507 call chpl_direct_pos_stride_range_iter low[457482] high[457488] stride[457494]))
      (457502 'move' _iterator[457500](457505 call _getIterator call_tmp[624370]))
      Defer
      {
        {
          (457513 call _freeIterator _iterator[457500])
        }
      }
      { scopeless type
        (457517 'move' _indexOfInterest[457498](457520 call iteratorIndex _iterator[457500]))
      }
      ForLoop[457522]
      {
        unknown i[457525] "index var" "insert auto destroy"
        (476011 'end of statement')
        (457527 'move' i[457525] _indexOfInterest[457498])
        (476012 'end of statement' i[457525])
        unknown yret[511129] "YVV" "temp"
        (511132 'move' yret[511129](511131 'deref' i[457525]))
        (511134 yield yret[511129])
        (476014 'end of statement' i[457525])
        label _continueLabel[457532]
        _indexOfInterest[457498]
        _iterator[457500]
      }
      label _breakLabel[457534]
    }
    (511127 return ret[511125])
  }
  function chpl_direct_range_iter[457412](arg low[457419] :
  (457416 call uint(64)[115] 8), arg high[457425] :
  (457423 call uint(64)[115] 8), arg stride[457431] :
  (457429 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511138] "RVV" "temp"
    {
      unknown _indexOfInterest[457435] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457437] "expr temp" "temp"
      unknown call_tmp[624375] "expr temp" "maybe param" "maybe type" "temp"
      (624378 'move' call_tmp[624375](457444 call chpl_direct_pos_stride_range_iter low[457419] high[457425] stride[457431]))
      (457439 'move' _iterator[457437](457442 call _getIterator call_tmp[624375]))
      Defer
      {
        {
          (457450 call _freeIterator _iterator[457437])
        }
      }
      { scopeless type
        (457454 'move' _indexOfInterest[457435](457457 call iteratorIndex _iterator[457437]))
      }
      ForLoop[457459]
      {
        unknown i[457462] "index var" "insert auto destroy"
        (476017 'end of statement')
        (457464 'move' i[457462] _indexOfInterest[457435])
        (476018 'end of statement' i[457462])
        unknown yret[511142] "YVV" "temp"
        (511145 'move' yret[511142](511144 'deref' i[457462]))
        (511147 yield yret[511142])
        (476020 'end of statement' i[457462])
        label _continueLabel[457469]
        _indexOfInterest[457435]
        _iterator[457437]
      }
      label _breakLabel[457471]
    }
    (511140 return ret[511138])
  }
  function chpl_direct_range_iter[457769](arg low[457776] :
  (457773 call int(64)[13] 64), arg high[457782] :
  (457780 call int(64)[13] 64), arg stride[457784]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511151] "RVV" "temp"
    unknown call_tmp[624380] "expr temp" "maybe param" "maybe type" "temp"
    (624383 'move' call_tmp[624380](457794 call int(64)[13] 64))
    unknown call_tmp[624385] "expr temp" "maybe param" "maybe type" "temp"
    (624388 'move' call_tmp[624385](457791 call _cast string[26] call_tmp[624380]))
    unknown call_tmp[624390] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624393 'move' call_tmp[624390](457800 'typeof' stride[457784]))
    unknown call_tmp[624395] "expr temp" "maybe param" "maybe type" "temp"
    (624398 'move' call_tmp[624395](457798 call _cast string[26] call_tmp[624390]))
    (457788 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624385] " using a step of type " call_tmp[624395])
    (511153 return ret[511151])
  }
  function chpl_direct_range_iter[457734](arg low[457741] :
  (457738 call int(64)[13] 32), arg high[457747] :
  (457745 call int(64)[13] 32), arg stride[457749]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511157] "RVV" "temp"
    unknown call_tmp[624400] "expr temp" "maybe param" "maybe type" "temp"
    (624403 'move' call_tmp[624400](457759 call int(64)[13] 32))
    unknown call_tmp[624405] "expr temp" "maybe param" "maybe type" "temp"
    (624408 'move' call_tmp[624405](457756 call _cast string[26] call_tmp[624400]))
    unknown call_tmp[624410] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624413 'move' call_tmp[624410](457765 'typeof' stride[457749]))
    unknown call_tmp[624415] "expr temp" "maybe param" "maybe type" "temp"
    (624418 'move' call_tmp[624415](457763 call _cast string[26] call_tmp[624410]))
    (457753 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624405] " using a step of type " call_tmp[624415])
    (511159 return ret[511157])
  }
  function chpl_direct_range_iter[457699](arg low[457706] :
  (457703 call int(64)[13] 16), arg high[457712] :
  (457710 call int(64)[13] 16), arg stride[457714]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511163] "RVV" "temp"
    unknown call_tmp[624420] "expr temp" "maybe param" "maybe type" "temp"
    (624423 'move' call_tmp[624420](457724 call int(64)[13] 16))
    unknown call_tmp[624425] "expr temp" "maybe param" "maybe type" "temp"
    (624428 'move' call_tmp[624425](457721 call _cast string[26] call_tmp[624420]))
    unknown call_tmp[624430] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624433 'move' call_tmp[624430](457730 'typeof' stride[457714]))
    unknown call_tmp[624435] "expr temp" "maybe param" "maybe type" "temp"
    (624438 'move' call_tmp[624435](457728 call _cast string[26] call_tmp[624430]))
    (457718 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624425] " using a step of type " call_tmp[624435])
    (511165 return ret[511163])
  }
  function chpl_direct_range_iter[457664](arg low[457671] :
  (457668 call int(64)[13] 8), arg high[457677] :
  (457675 call int(64)[13] 8), arg stride[457679]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511169] "RVV" "temp"
    unknown call_tmp[624440] "expr temp" "maybe param" "maybe type" "temp"
    (624443 'move' call_tmp[624440](457689 call int(64)[13] 8))
    unknown call_tmp[624445] "expr temp" "maybe param" "maybe type" "temp"
    (624448 'move' call_tmp[624445](457686 call _cast string[26] call_tmp[624440]))
    unknown call_tmp[624450] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624453 'move' call_tmp[624450](457695 'typeof' stride[457679]))
    unknown call_tmp[624455] "expr temp" "maybe param" "maybe type" "temp"
    (624458 'move' call_tmp[624455](457693 call _cast string[26] call_tmp[624450]))
    (457683 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624445] " using a step of type " call_tmp[624455])
    (511171 return ret[511169])
  }
  function chpl_direct_range_iter[457909](arg low[457916] :
  (457913 call uint(64)[115] 64), arg high[457922] :
  (457920 call uint(64)[115] 64), arg stride[457924]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511175] "RVV" "temp"
    unknown call_tmp[624460] "expr temp" "maybe param" "maybe type" "temp"
    (624463 'move' call_tmp[624460](457934 call uint(64)[115] 64))
    unknown call_tmp[624465] "expr temp" "maybe param" "maybe type" "temp"
    (624468 'move' call_tmp[624465](457931 call _cast string[26] call_tmp[624460]))
    unknown call_tmp[624470] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624473 'move' call_tmp[624470](457940 'typeof' stride[457924]))
    unknown call_tmp[624475] "expr temp" "maybe param" "maybe type" "temp"
    (624478 'move' call_tmp[624475](457938 call _cast string[26] call_tmp[624470]))
    (457928 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624465] " using a step of type " call_tmp[624475])
    (511177 return ret[511175])
  }
  function chpl_direct_range_iter[457874](arg low[457881] :
  (457878 call uint(64)[115] 32), arg high[457887] :
  (457885 call uint(64)[115] 32), arg stride[457889]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511181] "RVV" "temp"
    unknown call_tmp[624480] "expr temp" "maybe param" "maybe type" "temp"
    (624483 'move' call_tmp[624480](457899 call uint(64)[115] 32))
    unknown call_tmp[624485] "expr temp" "maybe param" "maybe type" "temp"
    (624488 'move' call_tmp[624485](457896 call _cast string[26] call_tmp[624480]))
    unknown call_tmp[624490] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624493 'move' call_tmp[624490](457905 'typeof' stride[457889]))
    unknown call_tmp[624495] "expr temp" "maybe param" "maybe type" "temp"
    (624498 'move' call_tmp[624495](457903 call _cast string[26] call_tmp[624490]))
    (457893 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624485] " using a step of type " call_tmp[624495])
    (511183 return ret[511181])
  }
  function chpl_direct_range_iter[457839](arg low[457846] :
  (457843 call uint(64)[115] 16), arg high[457852] :
  (457850 call uint(64)[115] 16), arg stride[457854]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511187] "RVV" "temp"
    unknown call_tmp[624500] "expr temp" "maybe param" "maybe type" "temp"
    (624503 'move' call_tmp[624500](457864 call uint(64)[115] 16))
    unknown call_tmp[624505] "expr temp" "maybe param" "maybe type" "temp"
    (624508 'move' call_tmp[624505](457861 call _cast string[26] call_tmp[624500]))
    unknown call_tmp[624510] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624513 'move' call_tmp[624510](457870 'typeof' stride[457854]))
    unknown call_tmp[624515] "expr temp" "maybe param" "maybe type" "temp"
    (624518 'move' call_tmp[624515](457868 call _cast string[26] call_tmp[624510]))
    (457858 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624505] " using a step of type " call_tmp[624515])
    (511189 return ret[511187])
  }
  function chpl_direct_range_iter[457804](arg low[457811] :
  (457808 call uint(64)[115] 8), arg high[457817] :
  (457815 call uint(64)[115] 8), arg stride[457819]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511193] "RVV" "temp"
    unknown call_tmp[624520] "expr temp" "maybe param" "maybe type" "temp"
    (624523 'move' call_tmp[624520](457829 call uint(64)[115] 8))
    unknown call_tmp[624525] "expr temp" "maybe param" "maybe type" "temp"
    (624528 'move' call_tmp[624525](457826 call _cast string[26] call_tmp[624520]))
    unknown call_tmp[624530] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624533 'move' call_tmp[624530](457835 'typeof' stride[457819]))
    unknown call_tmp[624535] "expr temp" "maybe param" "maybe type" "temp"
    (624538 'move' call_tmp[624535](457833 call _cast string[26] call_tmp[624530]))
    (457823 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624525] " using a step of type " call_tmp[624535])
    (511195 return ret[511193])
  }
  function chpl_direct_range_iter[74667](arg low[74665]:_any[178](?), arg high[74669]:_any[178](?), arg stride[74671]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511199] "RVV" "temp"
    (74676 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (511201 return ret[511199])
  }
  function chpl_direct_counted_range_iter[458112](arg low[458119] :
  (458116 call int(64)[13] 64), arg count[458125] :
  (458123 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511205] "RVV" "temp"
    {
      unknown _indexOfInterest[458129] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458131] "expr temp" "temp"
      unknown call_tmp[624540] "expr temp" "maybe param" "maybe type" "temp"
      (624543 'move' call_tmp[624540](458138 call chpl_direct_counted_range_iter_helper low[458119] count[458125]))
      (458133 'move' _iterator[458131](458136 call _getIterator call_tmp[624540]))
      Defer
      {
        {
          (458143 call _freeIterator _iterator[458131])
        }
      }
      { scopeless type
        (458147 'move' _indexOfInterest[458129](458150 call iteratorIndex _iterator[458131]))
      }
      ForLoop[458152]
      {
        unknown i[458155] "index var" "insert auto destroy"
        (476032 'end of statement')
        (458157 'move' i[458155] _indexOfInterest[458129])
        (476033 'end of statement' i[458155])
        unknown yret[511209] "YVV" "temp"
        (511212 'move' yret[511209](511211 'deref' i[458155]))
        (511214 yield yret[511209])
        (476035 'end of statement' i[458155])
        label _continueLabel[458162]
        _indexOfInterest[458129]
        _iterator[458131]
      }
      label _breakLabel[458164]
    }
    (511207 return ret[511205])
  }
  function chpl_direct_counted_range_iter[458056](arg low[458063] :
  (458060 call int(64)[13] 32), arg count[458069] :
  (458067 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511218] "RVV" "temp"
    {
      unknown _indexOfInterest[458073] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458075] "expr temp" "temp"
      unknown call_tmp[624545] "expr temp" "maybe param" "maybe type" "temp"
      (624548 'move' call_tmp[624545](458082 call chpl_direct_counted_range_iter_helper low[458063] count[458069]))
      (458077 'move' _iterator[458075](458080 call _getIterator call_tmp[624545]))
      Defer
      {
        {
          (458087 call _freeIterator _iterator[458075])
        }
      }
      { scopeless type
        (458091 'move' _indexOfInterest[458073](458094 call iteratorIndex _iterator[458075]))
      }
      ForLoop[458096]
      {
        unknown i[458099] "index var" "insert auto destroy"
        (476038 'end of statement')
        (458101 'move' i[458099] _indexOfInterest[458073])
        (476039 'end of statement' i[458099])
        unknown yret[511222] "YVV" "temp"
        (511225 'move' yret[511222](511224 'deref' i[458099]))
        (511227 yield yret[511222])
        (476041 'end of statement' i[458099])
        label _continueLabel[458106]
        _indexOfInterest[458073]
        _iterator[458075]
      }
      label _breakLabel[458108]
    }
    (511220 return ret[511218])
  }
  function chpl_direct_counted_range_iter[458000](arg low[458007] :
  (458004 call int(64)[13] 16), arg count[458013] :
  (458011 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511231] "RVV" "temp"
    {
      unknown _indexOfInterest[458017] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458019] "expr temp" "temp"
      unknown call_tmp[624550] "expr temp" "maybe param" "maybe type" "temp"
      (624553 'move' call_tmp[624550](458026 call chpl_direct_counted_range_iter_helper low[458007] count[458013]))
      (458021 'move' _iterator[458019](458024 call _getIterator call_tmp[624550]))
      Defer
      {
        {
          (458031 call _freeIterator _iterator[458019])
        }
      }
      { scopeless type
        (458035 'move' _indexOfInterest[458017](458038 call iteratorIndex _iterator[458019]))
      }
      ForLoop[458040]
      {
        unknown i[458043] "index var" "insert auto destroy"
        (476044 'end of statement')
        (458045 'move' i[458043] _indexOfInterest[458017])
        (476045 'end of statement' i[458043])
        unknown yret[511235] "YVV" "temp"
        (511238 'move' yret[511235](511237 'deref' i[458043]))
        (511240 yield yret[511235])
        (476047 'end of statement' i[458043])
        label _continueLabel[458050]
        _indexOfInterest[458017]
        _iterator[458019]
      }
      label _breakLabel[458052]
    }
    (511233 return ret[511231])
  }
  function chpl_direct_counted_range_iter[457944](arg low[457951] :
  (457948 call int(64)[13] 8), arg count[457957] :
  (457955 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511244] "RVV" "temp"
    {
      unknown _indexOfInterest[457961] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457963] "expr temp" "temp"
      unknown call_tmp[624555] "expr temp" "maybe param" "maybe type" "temp"
      (624558 'move' call_tmp[624555](457970 call chpl_direct_counted_range_iter_helper low[457951] count[457957]))
      (457965 'move' _iterator[457963](457968 call _getIterator call_tmp[624555]))
      Defer
      {
        {
          (457975 call _freeIterator _iterator[457963])
        }
      }
      { scopeless type
        (457979 'move' _indexOfInterest[457961](457982 call iteratorIndex _iterator[457963]))
      }
      ForLoop[457984]
      {
        unknown i[457987] "index var" "insert auto destroy"
        (476050 'end of statement')
        (457989 'move' i[457987] _indexOfInterest[457961])
        (476051 'end of statement' i[457987])
        unknown yret[511248] "YVV" "temp"
        (511251 'move' yret[511248](511250 'deref' i[457987]))
        (511253 yield yret[511248])
        (476053 'end of statement' i[457987])
        label _continueLabel[457994]
        _indexOfInterest[457961]
        _iterator[457963]
      }
      label _breakLabel[457996]
    }
    (511246 return ret[511244])
  }
  function chpl_direct_counted_range_iter[458336](arg low[458343] :
  (458340 call int(64)[13] 64), arg count[458349] :
  (458347 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511257] "RVV" "temp"
    {
      unknown _indexOfInterest[458353] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458355] "expr temp" "temp"
      unknown call_tmp[624560] "expr temp" "maybe param" "maybe type" "temp"
      (624563 'move' call_tmp[624560](458362 call chpl_direct_counted_range_iter_helper low[458343] count[458349]))
      (458357 'move' _iterator[458355](458360 call _getIterator call_tmp[624560]))
      Defer
      {
        {
          (458367 call _freeIterator _iterator[458355])
        }
      }
      { scopeless type
        (458371 'move' _indexOfInterest[458353](458374 call iteratorIndex _iterator[458355]))
      }
      ForLoop[458376]
      {
        unknown i[458379] "index var" "insert auto destroy"
        (476056 'end of statement')
        (458381 'move' i[458379] _indexOfInterest[458353])
        (476057 'end of statement' i[458379])
        unknown yret[511261] "YVV" "temp"
        (511264 'move' yret[511261](511263 'deref' i[458379]))
        (511266 yield yret[511261])
        (476059 'end of statement' i[458379])
        label _continueLabel[458386]
        _indexOfInterest[458353]
        _iterator[458355]
      }
      label _breakLabel[458388]
    }
    (511259 return ret[511257])
  }
  function chpl_direct_counted_range_iter[458280](arg low[458287] :
  (458284 call int(64)[13] 32), arg count[458293] :
  (458291 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511270] "RVV" "temp"
    {
      unknown _indexOfInterest[458297] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458299] "expr temp" "temp"
      unknown call_tmp[624565] "expr temp" "maybe param" "maybe type" "temp"
      (624568 'move' call_tmp[624565](458306 call chpl_direct_counted_range_iter_helper low[458287] count[458293]))
      (458301 'move' _iterator[458299](458304 call _getIterator call_tmp[624565]))
      Defer
      {
        {
          (458311 call _freeIterator _iterator[458299])
        }
      }
      { scopeless type
        (458315 'move' _indexOfInterest[458297](458318 call iteratorIndex _iterator[458299]))
      }
      ForLoop[458320]
      {
        unknown i[458323] "index var" "insert auto destroy"
        (476062 'end of statement')
        (458325 'move' i[458323] _indexOfInterest[458297])
        (476063 'end of statement' i[458323])
        unknown yret[511274] "YVV" "temp"
        (511277 'move' yret[511274](511276 'deref' i[458323]))
        (511279 yield yret[511274])
        (476065 'end of statement' i[458323])
        label _continueLabel[458330]
        _indexOfInterest[458297]
        _iterator[458299]
      }
      label _breakLabel[458332]
    }
    (511272 return ret[511270])
  }
  function chpl_direct_counted_range_iter[458224](arg low[458231] :
  (458228 call int(64)[13] 16), arg count[458237] :
  (458235 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511283] "RVV" "temp"
    {
      unknown _indexOfInterest[458241] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458243] "expr temp" "temp"
      unknown call_tmp[624570] "expr temp" "maybe param" "maybe type" "temp"
      (624573 'move' call_tmp[624570](458250 call chpl_direct_counted_range_iter_helper low[458231] count[458237]))
      (458245 'move' _iterator[458243](458248 call _getIterator call_tmp[624570]))
      Defer
      {
        {
          (458255 call _freeIterator _iterator[458243])
        }
      }
      { scopeless type
        (458259 'move' _indexOfInterest[458241](458262 call iteratorIndex _iterator[458243]))
      }
      ForLoop[458264]
      {
        unknown i[458267] "index var" "insert auto destroy"
        (476068 'end of statement')
        (458269 'move' i[458267] _indexOfInterest[458241])
        (476069 'end of statement' i[458267])
        unknown yret[511287] "YVV" "temp"
        (511290 'move' yret[511287](511289 'deref' i[458267]))
        (511292 yield yret[511287])
        (476071 'end of statement' i[458267])
        label _continueLabel[458274]
        _indexOfInterest[458241]
        _iterator[458243]
      }
      label _breakLabel[458276]
    }
    (511285 return ret[511283])
  }
  function chpl_direct_counted_range_iter[458168](arg low[458175] :
  (458172 call int(64)[13] 8), arg count[458181] :
  (458179 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511296] "RVV" "temp"
    {
      unknown _indexOfInterest[458185] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458187] "expr temp" "temp"
      unknown call_tmp[624575] "expr temp" "maybe param" "maybe type" "temp"
      (624578 'move' call_tmp[624575](458194 call chpl_direct_counted_range_iter_helper low[458175] count[458181]))
      (458189 'move' _iterator[458187](458192 call _getIterator call_tmp[624575]))
      Defer
      {
        {
          (458199 call _freeIterator _iterator[458187])
        }
      }
      { scopeless type
        (458203 'move' _indexOfInterest[458185](458206 call iteratorIndex _iterator[458187]))
      }
      ForLoop[458208]
      {
        unknown i[458211] "index var" "insert auto destroy"
        (476074 'end of statement')
        (458213 'move' i[458211] _indexOfInterest[458185])
        (476075 'end of statement' i[458211])
        unknown yret[511300] "YVV" "temp"
        (511303 'move' yret[511300](511302 'deref' i[458211]))
        (511305 yield yret[511300])
        (476077 'end of statement' i[458211])
        label _continueLabel[458218]
        _indexOfInterest[458185]
        _iterator[458187]
      }
      label _breakLabel[458220]
    }
    (511298 return ret[511296])
  }
  function chpl_direct_counted_range_iter[458560](arg low[458567] :
  (458564 call uint(64)[115] 64), arg count[458573] :
  (458571 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511309] "RVV" "temp"
    {
      unknown _indexOfInterest[458577] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458579] "expr temp" "temp"
      unknown call_tmp[624580] "expr temp" "maybe param" "maybe type" "temp"
      (624583 'move' call_tmp[624580](458586 call chpl_direct_counted_range_iter_helper low[458567] count[458573]))
      (458581 'move' _iterator[458579](458584 call _getIterator call_tmp[624580]))
      Defer
      {
        {
          (458591 call _freeIterator _iterator[458579])
        }
      }
      { scopeless type
        (458595 'move' _indexOfInterest[458577](458598 call iteratorIndex _iterator[458579]))
      }
      ForLoop[458600]
      {
        unknown i[458603] "index var" "insert auto destroy"
        (476080 'end of statement')
        (458605 'move' i[458603] _indexOfInterest[458577])
        (476081 'end of statement' i[458603])
        unknown yret[511313] "YVV" "temp"
        (511316 'move' yret[511313](511315 'deref' i[458603]))
        (511318 yield yret[511313])
        (476083 'end of statement' i[458603])
        label _continueLabel[458610]
        _indexOfInterest[458577]
        _iterator[458579]
      }
      label _breakLabel[458612]
    }
    (511311 return ret[511309])
  }
  function chpl_direct_counted_range_iter[458504](arg low[458511] :
  (458508 call uint(64)[115] 32), arg count[458517] :
  (458515 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511322] "RVV" "temp"
    {
      unknown _indexOfInterest[458521] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458523] "expr temp" "temp"
      unknown call_tmp[624585] "expr temp" "maybe param" "maybe type" "temp"
      (624588 'move' call_tmp[624585](458530 call chpl_direct_counted_range_iter_helper low[458511] count[458517]))
      (458525 'move' _iterator[458523](458528 call _getIterator call_tmp[624585]))
      Defer
      {
        {
          (458535 call _freeIterator _iterator[458523])
        }
      }
      { scopeless type
        (458539 'move' _indexOfInterest[458521](458542 call iteratorIndex _iterator[458523]))
      }
      ForLoop[458544]
      {
        unknown i[458547] "index var" "insert auto destroy"
        (476086 'end of statement')
        (458549 'move' i[458547] _indexOfInterest[458521])
        (476087 'end of statement' i[458547])
        unknown yret[511326] "YVV" "temp"
        (511329 'move' yret[511326](511328 'deref' i[458547]))
        (511331 yield yret[511326])
        (476089 'end of statement' i[458547])
        label _continueLabel[458554]
        _indexOfInterest[458521]
        _iterator[458523]
      }
      label _breakLabel[458556]
    }
    (511324 return ret[511322])
  }
  function chpl_direct_counted_range_iter[458448](arg low[458455] :
  (458452 call uint(64)[115] 16), arg count[458461] :
  (458459 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511335] "RVV" "temp"
    {
      unknown _indexOfInterest[458465] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458467] "expr temp" "temp"
      unknown call_tmp[624590] "expr temp" "maybe param" "maybe type" "temp"
      (624593 'move' call_tmp[624590](458474 call chpl_direct_counted_range_iter_helper low[458455] count[458461]))
      (458469 'move' _iterator[458467](458472 call _getIterator call_tmp[624590]))
      Defer
      {
        {
          (458479 call _freeIterator _iterator[458467])
        }
      }
      { scopeless type
        (458483 'move' _indexOfInterest[458465](458486 call iteratorIndex _iterator[458467]))
      }
      ForLoop[458488]
      {
        unknown i[458491] "index var" "insert auto destroy"
        (476092 'end of statement')
        (458493 'move' i[458491] _indexOfInterest[458465])
        (476093 'end of statement' i[458491])
        unknown yret[511339] "YVV" "temp"
        (511342 'move' yret[511339](511341 'deref' i[458491]))
        (511344 yield yret[511339])
        (476095 'end of statement' i[458491])
        label _continueLabel[458498]
        _indexOfInterest[458465]
        _iterator[458467]
      }
      label _breakLabel[458500]
    }
    (511337 return ret[511335])
  }
  function chpl_direct_counted_range_iter[458392](arg low[458399] :
  (458396 call uint(64)[115] 8), arg count[458405] :
  (458403 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511348] "RVV" "temp"
    {
      unknown _indexOfInterest[458409] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458411] "expr temp" "temp"
      unknown call_tmp[624595] "expr temp" "maybe param" "maybe type" "temp"
      (624598 'move' call_tmp[624595](458418 call chpl_direct_counted_range_iter_helper low[458399] count[458405]))
      (458413 'move' _iterator[458411](458416 call _getIterator call_tmp[624595]))
      Defer
      {
        {
          (458423 call _freeIterator _iterator[458411])
        }
      }
      { scopeless type
        (458427 'move' _indexOfInterest[458409](458430 call iteratorIndex _iterator[458411]))
      }
      ForLoop[458432]
      {
        unknown i[458435] "index var" "insert auto destroy"
        (476098 'end of statement')
        (458437 'move' i[458435] _indexOfInterest[458409])
        (476099 'end of statement' i[458435])
        unknown yret[511352] "YVV" "temp"
        (511355 'move' yret[511352](511354 'deref' i[458435]))
        (511357 yield yret[511352])
        (476101 'end of statement' i[458435])
        label _continueLabel[458442]
        _indexOfInterest[458409]
        _iterator[458411]
      }
      label _breakLabel[458444]
    }
    (511350 return ret[511348])
  }
  function chpl_direct_counted_range_iter[458784](arg low[458791] :
  (458788 call uint(64)[115] 64), arg count[458797] :
  (458795 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511361] "RVV" "temp"
    {
      unknown _indexOfInterest[458801] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458803] "expr temp" "temp"
      unknown call_tmp[624600] "expr temp" "maybe param" "maybe type" "temp"
      (624603 'move' call_tmp[624600](458810 call chpl_direct_counted_range_iter_helper low[458791] count[458797]))
      (458805 'move' _iterator[458803](458808 call _getIterator call_tmp[624600]))
      Defer
      {
        {
          (458815 call _freeIterator _iterator[458803])
        }
      }
      { scopeless type
        (458819 'move' _indexOfInterest[458801](458822 call iteratorIndex _iterator[458803]))
      }
      ForLoop[458824]
      {
        unknown i[458827] "index var" "insert auto destroy"
        (476104 'end of statement')
        (458829 'move' i[458827] _indexOfInterest[458801])
        (476105 'end of statement' i[458827])
        unknown yret[511365] "YVV" "temp"
        (511368 'move' yret[511365](511367 'deref' i[458827]))
        (511370 yield yret[511365])
        (476107 'end of statement' i[458827])
        label _continueLabel[458834]
        _indexOfInterest[458801]
        _iterator[458803]
      }
      label _breakLabel[458836]
    }
    (511363 return ret[511361])
  }
  function chpl_direct_counted_range_iter[458728](arg low[458735] :
  (458732 call uint(64)[115] 32), arg count[458741] :
  (458739 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511374] "RVV" "temp"
    {
      unknown _indexOfInterest[458745] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458747] "expr temp" "temp"
      unknown call_tmp[624605] "expr temp" "maybe param" "maybe type" "temp"
      (624608 'move' call_tmp[624605](458754 call chpl_direct_counted_range_iter_helper low[458735] count[458741]))
      (458749 'move' _iterator[458747](458752 call _getIterator call_tmp[624605]))
      Defer
      {
        {
          (458759 call _freeIterator _iterator[458747])
        }
      }
      { scopeless type
        (458763 'move' _indexOfInterest[458745](458766 call iteratorIndex _iterator[458747]))
      }
      ForLoop[458768]
      {
        unknown i[458771] "index var" "insert auto destroy"
        (476110 'end of statement')
        (458773 'move' i[458771] _indexOfInterest[458745])
        (476111 'end of statement' i[458771])
        unknown yret[511378] "YVV" "temp"
        (511381 'move' yret[511378](511380 'deref' i[458771]))
        (511383 yield yret[511378])
        (476113 'end of statement' i[458771])
        label _continueLabel[458778]
        _indexOfInterest[458745]
        _iterator[458747]
      }
      label _breakLabel[458780]
    }
    (511376 return ret[511374])
  }
  function chpl_direct_counted_range_iter[458672](arg low[458679] :
  (458676 call uint(64)[115] 16), arg count[458685] :
  (458683 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511387] "RVV" "temp"
    {
      unknown _indexOfInterest[458689] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458691] "expr temp" "temp"
      unknown call_tmp[624610] "expr temp" "maybe param" "maybe type" "temp"
      (624613 'move' call_tmp[624610](458698 call chpl_direct_counted_range_iter_helper low[458679] count[458685]))
      (458693 'move' _iterator[458691](458696 call _getIterator call_tmp[624610]))
      Defer
      {
        {
          (458703 call _freeIterator _iterator[458691])
        }
      }
      { scopeless type
        (458707 'move' _indexOfInterest[458689](458710 call iteratorIndex _iterator[458691]))
      }
      ForLoop[458712]
      {
        unknown i[458715] "index var" "insert auto destroy"
        (476116 'end of statement')
        (458717 'move' i[458715] _indexOfInterest[458689])
        (476117 'end of statement' i[458715])
        unknown yret[511391] "YVV" "temp"
        (511394 'move' yret[511391](511393 'deref' i[458715]))
        (511396 yield yret[511391])
        (476119 'end of statement' i[458715])
        label _continueLabel[458722]
        _indexOfInterest[458689]
        _iterator[458691]
      }
      label _breakLabel[458724]
    }
    (511389 return ret[511387])
  }
  function chpl_direct_counted_range_iter[458616](arg low[458623] :
  (458620 call uint(64)[115] 8), arg count[458629] :
  (458627 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511400] "RVV" "temp"
    {
      unknown _indexOfInterest[458633] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458635] "expr temp" "temp"
      unknown call_tmp[624615] "expr temp" "maybe param" "maybe type" "temp"
      (624618 'move' call_tmp[624615](458642 call chpl_direct_counted_range_iter_helper low[458623] count[458629]))
      (458637 'move' _iterator[458635](458640 call _getIterator call_tmp[624615]))
      Defer
      {
        {
          (458647 call _freeIterator _iterator[458635])
        }
      }
      { scopeless type
        (458651 'move' _indexOfInterest[458633](458654 call iteratorIndex _iterator[458635]))
      }
      ForLoop[458656]
      {
        unknown i[458659] "index var" "insert auto destroy"
        (476122 'end of statement')
        (458661 'move' i[458659] _indexOfInterest[458633])
        (476123 'end of statement' i[458659])
        unknown yret[511404] "YVV" "temp"
        (511407 'move' yret[511404](511406 'deref' i[458659]))
        (511409 yield yret[511404])
        (476125 'end of statement' i[458659])
        label _continueLabel[458666]
        _indexOfInterest[458633]
        _iterator[458635]
      }
      label _breakLabel[458668]
    }
    (511402 return ret[511400])
  }
  function chpl_direct_counted_range_iter[459020](arg low[459024]:enum[187](?), arg count[459031] :
  (459028 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511413] "RVV" "temp"
    unknown call_tmp[624620] "maybe param" "maybe type" "temp"
    (624623 'move' call_tmp[624620](459036 call chpl_build_low_bounded_range low[459024]))
    const r[459034] "dead at end of block" "const" "insert auto destroy"
    (541360 'init var' r[459034] call_tmp[624620])
    (459039 'end of statement')
    {
      unknown _indexOfInterest[459041] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459043] "expr temp" "temp"
      unknown call_tmp[624625] "expr temp" "maybe param" "maybe type" "temp"
      (624628 'move' call_tmp[624625](459050 call # r[459034] count[459031]))
      (459045 'move' _iterator[459043](459048 call _getIterator call_tmp[624625]))
      Defer
      {
        {
          (459055 call _freeIterator _iterator[459043])
        }
      }
      { scopeless type
        (459059 'move' _indexOfInterest[459041](459062 call iteratorIndex _iterator[459043]))
      }
      ForLoop[459064]
      {
        unknown i[459067] "index var" "insert auto destroy"
        (476128 'end of statement')
        (459069 'move' i[459067] _indexOfInterest[459041])
        (476129 'end of statement' i[459067])
        unknown yret[511417] "YVV" "temp"
        (511420 'move' yret[511417](511419 'deref' i[459067]))
        (511422 yield yret[511417])
        (476131 'end of statement' i[459067])
        label _continueLabel[459074]
        _indexOfInterest[459041]
        _iterator[459043]
      }
      label _breakLabel[459076]
    }
    (511415 return ret[511413])
  }
  function chpl_direct_counted_range_iter[458960](arg low[458964]:enum[187](?), arg count[458971] :
  (458968 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511426] "RVV" "temp"
    unknown call_tmp[624630] "maybe param" "maybe type" "temp"
    (624633 'move' call_tmp[624630](458976 call chpl_build_low_bounded_range low[458964]))
    const r[458974] "dead at end of block" "const" "insert auto destroy"
    (541362 'init var' r[458974] call_tmp[624630])
    (458979 'end of statement')
    {
      unknown _indexOfInterest[458981] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458983] "expr temp" "temp"
      unknown call_tmp[624635] "expr temp" "maybe param" "maybe type" "temp"
      (624638 'move' call_tmp[624635](458990 call # r[458974] count[458971]))
      (458985 'move' _iterator[458983](458988 call _getIterator call_tmp[624635]))
      Defer
      {
        {
          (458995 call _freeIterator _iterator[458983])
        }
      }
      { scopeless type
        (458999 'move' _indexOfInterest[458981](459002 call iteratorIndex _iterator[458983]))
      }
      ForLoop[459004]
      {
        unknown i[459007] "index var" "insert auto destroy"
        (476134 'end of statement')
        (459009 'move' i[459007] _indexOfInterest[458981])
        (476135 'end of statement' i[459007])
        unknown yret[511430] "YVV" "temp"
        (511433 'move' yret[511430](511432 'deref' i[459007]))
        (511435 yield yret[511430])
        (476137 'end of statement' i[459007])
        label _continueLabel[459014]
        _indexOfInterest[458981]
        _iterator[458983]
      }
      label _breakLabel[459016]
    }
    (511428 return ret[511426])
  }
  function chpl_direct_counted_range_iter[458900](arg low[458904]:enum[187](?), arg count[458911] :
  (458908 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511439] "RVV" "temp"
    unknown call_tmp[624640] "maybe param" "maybe type" "temp"
    (624643 'move' call_tmp[624640](458916 call chpl_build_low_bounded_range low[458904]))
    const r[458914] "dead at end of block" "const" "insert auto destroy"
    (541364 'init var' r[458914] call_tmp[624640])
    (458919 'end of statement')
    {
      unknown _indexOfInterest[458921] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458923] "expr temp" "temp"
      unknown call_tmp[624645] "expr temp" "maybe param" "maybe type" "temp"
      (624648 'move' call_tmp[624645](458930 call # r[458914] count[458911]))
      (458925 'move' _iterator[458923](458928 call _getIterator call_tmp[624645]))
      Defer
      {
        {
          (458935 call _freeIterator _iterator[458923])
        }
      }
      { scopeless type
        (458939 'move' _indexOfInterest[458921](458942 call iteratorIndex _iterator[458923]))
      }
      ForLoop[458944]
      {
        unknown i[458947] "index var" "insert auto destroy"
        (476140 'end of statement')
        (458949 'move' i[458947] _indexOfInterest[458921])
        (476141 'end of statement' i[458947])
        unknown yret[511443] "YVV" "temp"
        (511446 'move' yret[511443](511445 'deref' i[458947]))
        (511448 yield yret[511443])
        (476143 'end of statement' i[458947])
        label _continueLabel[458954]
        _indexOfInterest[458921]
        _iterator[458923]
      }
      label _breakLabel[458956]
    }
    (511441 return ret[511439])
  }
  function chpl_direct_counted_range_iter[458840](arg low[458844]:enum[187](?), arg count[458851] :
  (458848 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511452] "RVV" "temp"
    unknown call_tmp[624650] "maybe param" "maybe type" "temp"
    (624653 'move' call_tmp[624650](458856 call chpl_build_low_bounded_range low[458844]))
    const r[458854] "dead at end of block" "const" "insert auto destroy"
    (541366 'init var' r[458854] call_tmp[624650])
    (458859 'end of statement')
    {
      unknown _indexOfInterest[458861] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458863] "expr temp" "temp"
      unknown call_tmp[624655] "expr temp" "maybe param" "maybe type" "temp"
      (624658 'move' call_tmp[624655](458870 call # r[458854] count[458851]))
      (458865 'move' _iterator[458863](458868 call _getIterator call_tmp[624655]))
      Defer
      {
        {
          (458875 call _freeIterator _iterator[458863])
        }
      }
      { scopeless type
        (458879 'move' _indexOfInterest[458861](458882 call iteratorIndex _iterator[458863]))
      }
      ForLoop[458884]
      {
        unknown i[458887] "index var" "insert auto destroy"
        (476146 'end of statement')
        (458889 'move' i[458887] _indexOfInterest[458861])
        (476147 'end of statement' i[458887])
        unknown yret[511456] "YVV" "temp"
        (511459 'move' yret[511456](511458 'deref' i[458887]))
        (511461 yield yret[511456])
        (476149 'end of statement' i[458887])
        label _continueLabel[458894]
        _indexOfInterest[458861]
        _iterator[458863]
      }
      label _breakLabel[458896]
    }
    (511454 return ret[511452])
  }
  function chpl_direct_counted_range_iter[459260](arg low[459264]:enum[187](?), arg count[459271] :
  (459268 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511465] "RVV" "temp"
    unknown call_tmp[624660] "maybe param" "maybe type" "temp"
    (624663 'move' call_tmp[624660](459276 call chpl_build_low_bounded_range low[459264]))
    const r[459274] "dead at end of block" "const" "insert auto destroy"
    (541368 'init var' r[459274] call_tmp[624660])
    (459279 'end of statement')
    {
      unknown _indexOfInterest[459281] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459283] "expr temp" "temp"
      unknown call_tmp[624665] "expr temp" "maybe param" "maybe type" "temp"
      (624668 'move' call_tmp[624665](459290 call # r[459274] count[459271]))
      (459285 'move' _iterator[459283](459288 call _getIterator call_tmp[624665]))
      Defer
      {
        {
          (459295 call _freeIterator _iterator[459283])
        }
      }
      { scopeless type
        (459299 'move' _indexOfInterest[459281](459302 call iteratorIndex _iterator[459283]))
      }
      ForLoop[459304]
      {
        unknown i[459307] "index var" "insert auto destroy"
        (476152 'end of statement')
        (459309 'move' i[459307] _indexOfInterest[459281])
        (476153 'end of statement' i[459307])
        unknown yret[511469] "YVV" "temp"
        (511472 'move' yret[511469](511471 'deref' i[459307]))
        (511474 yield yret[511469])
        (476155 'end of statement' i[459307])
        label _continueLabel[459314]
        _indexOfInterest[459281]
        _iterator[459283]
      }
      label _breakLabel[459316]
    }
    (511467 return ret[511465])
  }
  function chpl_direct_counted_range_iter[459200](arg low[459204]:enum[187](?), arg count[459211] :
  (459208 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511478] "RVV" "temp"
    unknown call_tmp[624670] "maybe param" "maybe type" "temp"
    (624673 'move' call_tmp[624670](459216 call chpl_build_low_bounded_range low[459204]))
    const r[459214] "dead at end of block" "const" "insert auto destroy"
    (541370 'init var' r[459214] call_tmp[624670])
    (459219 'end of statement')
    {
      unknown _indexOfInterest[459221] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459223] "expr temp" "temp"
      unknown call_tmp[624675] "expr temp" "maybe param" "maybe type" "temp"
      (624678 'move' call_tmp[624675](459230 call # r[459214] count[459211]))
      (459225 'move' _iterator[459223](459228 call _getIterator call_tmp[624675]))
      Defer
      {
        {
          (459235 call _freeIterator _iterator[459223])
        }
      }
      { scopeless type
        (459239 'move' _indexOfInterest[459221](459242 call iteratorIndex _iterator[459223]))
      }
      ForLoop[459244]
      {
        unknown i[459247] "index var" "insert auto destroy"
        (476158 'end of statement')
        (459249 'move' i[459247] _indexOfInterest[459221])
        (476159 'end of statement' i[459247])
        unknown yret[511482] "YVV" "temp"
        (511485 'move' yret[511482](511484 'deref' i[459247]))
        (511487 yield yret[511482])
        (476161 'end of statement' i[459247])
        label _continueLabel[459254]
        _indexOfInterest[459221]
        _iterator[459223]
      }
      label _breakLabel[459256]
    }
    (511480 return ret[511478])
  }
  function chpl_direct_counted_range_iter[459140](arg low[459144]:enum[187](?), arg count[459151] :
  (459148 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511491] "RVV" "temp"
    unknown call_tmp[624680] "maybe param" "maybe type" "temp"
    (624683 'move' call_tmp[624680](459156 call chpl_build_low_bounded_range low[459144]))
    const r[459154] "dead at end of block" "const" "insert auto destroy"
    (541372 'init var' r[459154] call_tmp[624680])
    (459159 'end of statement')
    {
      unknown _indexOfInterest[459161] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459163] "expr temp" "temp"
      unknown call_tmp[624685] "expr temp" "maybe param" "maybe type" "temp"
      (624688 'move' call_tmp[624685](459170 call # r[459154] count[459151]))
      (459165 'move' _iterator[459163](459168 call _getIterator call_tmp[624685]))
      Defer
      {
        {
          (459175 call _freeIterator _iterator[459163])
        }
      }
      { scopeless type
        (459179 'move' _indexOfInterest[459161](459182 call iteratorIndex _iterator[459163]))
      }
      ForLoop[459184]
      {
        unknown i[459187] "index var" "insert auto destroy"
        (476164 'end of statement')
        (459189 'move' i[459187] _indexOfInterest[459161])
        (476165 'end of statement' i[459187])
        unknown yret[511495] "YVV" "temp"
        (511498 'move' yret[511495](511497 'deref' i[459187]))
        (511500 yield yret[511495])
        (476167 'end of statement' i[459187])
        label _continueLabel[459194]
        _indexOfInterest[459161]
        _iterator[459163]
      }
      label _breakLabel[459196]
    }
    (511493 return ret[511491])
  }
  function chpl_direct_counted_range_iter[459080](arg low[459084]:enum[187](?), arg count[459091] :
  (459088 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511504] "RVV" "temp"
    unknown call_tmp[624690] "maybe param" "maybe type" "temp"
    (624693 'move' call_tmp[624690](459096 call chpl_build_low_bounded_range low[459084]))
    const r[459094] "dead at end of block" "const" "insert auto destroy"
    (541374 'init var' r[459094] call_tmp[624690])
    (459099 'end of statement')
    {
      unknown _indexOfInterest[459101] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459103] "expr temp" "temp"
      unknown call_tmp[624695] "expr temp" "maybe param" "maybe type" "temp"
      (624698 'move' call_tmp[624695](459110 call # r[459094] count[459091]))
      (459105 'move' _iterator[459103](459108 call _getIterator call_tmp[624695]))
      Defer
      {
        {
          (459115 call _freeIterator _iterator[459103])
        }
      }
      { scopeless type
        (459119 'move' _indexOfInterest[459101](459122 call iteratorIndex _iterator[459103]))
      }
      ForLoop[459124]
      {
        unknown i[459127] "index var" "insert auto destroy"
        (476170 'end of statement')
        (459129 'move' i[459127] _indexOfInterest[459101])
        (476171 'end of statement' i[459127])
        unknown yret[511508] "YVV" "temp"
        (511511 'move' yret[511508](511510 'deref' i[459127]))
        (511513 yield yret[511508])
        (476173 'end of statement' i[459127])
        label _continueLabel[459134]
        _indexOfInterest[459101]
        _iterator[459103]
      }
      label _breakLabel[459136]
    }
    (511506 return ret[511504])
  }
  function chpl_direct_counted_range_iter[459500](arg low[459504]:bool[10], arg count[459511] :
  (459508 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511517] "RVV" "temp"
    unknown call_tmp[624700] "maybe param" "maybe type" "temp"
    (624703 'move' call_tmp[624700](459516 call chpl_build_low_bounded_range low[459504]))
    const r[459514] "dead at end of block" "const" "insert auto destroy"
    (541376 'init var' r[459514] call_tmp[624700])
    (459519 'end of statement')
    {
      unknown _indexOfInterest[459521] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459523] "expr temp" "temp"
      unknown call_tmp[624705] "expr temp" "maybe param" "maybe type" "temp"
      (624708 'move' call_tmp[624705](459530 call # r[459514] count[459511]))
      (459525 'move' _iterator[459523](459528 call _getIterator call_tmp[624705]))
      Defer
      {
        {
          (459535 call _freeIterator _iterator[459523])
        }
      }
      { scopeless type
        (459539 'move' _indexOfInterest[459521](459542 call iteratorIndex _iterator[459523]))
      }
      ForLoop[459544]
      {
        unknown i[459547] "index var" "insert auto destroy"
        (476176 'end of statement')
        (459549 'move' i[459547] _indexOfInterest[459521])
        (476177 'end of statement' i[459547])
        unknown yret[511521] "YVV" "temp"
        (511524 'move' yret[511521](511523 'deref' i[459547]))
        (511526 yield yret[511521])
        (476179 'end of statement' i[459547])
        label _continueLabel[459554]
        _indexOfInterest[459521]
        _iterator[459523]
      }
      label _breakLabel[459556]
    }
    (511519 return ret[511517])
  }
  function chpl_direct_counted_range_iter[459440](arg low[459444]:bool[10], arg count[459451] :
  (459448 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511530] "RVV" "temp"
    unknown call_tmp[624710] "maybe param" "maybe type" "temp"
    (624713 'move' call_tmp[624710](459456 call chpl_build_low_bounded_range low[459444]))
    const r[459454] "dead at end of block" "const" "insert auto destroy"
    (541378 'init var' r[459454] call_tmp[624710])
    (459459 'end of statement')
    {
      unknown _indexOfInterest[459461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459463] "expr temp" "temp"
      unknown call_tmp[624715] "expr temp" "maybe param" "maybe type" "temp"
      (624718 'move' call_tmp[624715](459470 call # r[459454] count[459451]))
      (459465 'move' _iterator[459463](459468 call _getIterator call_tmp[624715]))
      Defer
      {
        {
          (459475 call _freeIterator _iterator[459463])
        }
      }
      { scopeless type
        (459479 'move' _indexOfInterest[459461](459482 call iteratorIndex _iterator[459463]))
      }
      ForLoop[459484]
      {
        unknown i[459487] "index var" "insert auto destroy"
        (476182 'end of statement')
        (459489 'move' i[459487] _indexOfInterest[459461])
        (476183 'end of statement' i[459487])
        unknown yret[511534] "YVV" "temp"
        (511537 'move' yret[511534](511536 'deref' i[459487]))
        (511539 yield yret[511534])
        (476185 'end of statement' i[459487])
        label _continueLabel[459494]
        _indexOfInterest[459461]
        _iterator[459463]
      }
      label _breakLabel[459496]
    }
    (511532 return ret[511530])
  }
  function chpl_direct_counted_range_iter[459380](arg low[459384]:bool[10], arg count[459391] :
  (459388 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511543] "RVV" "temp"
    unknown call_tmp[624720] "maybe param" "maybe type" "temp"
    (624723 'move' call_tmp[624720](459396 call chpl_build_low_bounded_range low[459384]))
    const r[459394] "dead at end of block" "const" "insert auto destroy"
    (541380 'init var' r[459394] call_tmp[624720])
    (459399 'end of statement')
    {
      unknown _indexOfInterest[459401] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459403] "expr temp" "temp"
      unknown call_tmp[624725] "expr temp" "maybe param" "maybe type" "temp"
      (624728 'move' call_tmp[624725](459410 call # r[459394] count[459391]))
      (459405 'move' _iterator[459403](459408 call _getIterator call_tmp[624725]))
      Defer
      {
        {
          (459415 call _freeIterator _iterator[459403])
        }
      }
      { scopeless type
        (459419 'move' _indexOfInterest[459401](459422 call iteratorIndex _iterator[459403]))
      }
      ForLoop[459424]
      {
        unknown i[459427] "index var" "insert auto destroy"
        (476188 'end of statement')
        (459429 'move' i[459427] _indexOfInterest[459401])
        (476189 'end of statement' i[459427])
        unknown yret[511547] "YVV" "temp"
        (511550 'move' yret[511547](511549 'deref' i[459427]))
        (511552 yield yret[511547])
        (476191 'end of statement' i[459427])
        label _continueLabel[459434]
        _indexOfInterest[459401]
        _iterator[459403]
      }
      label _breakLabel[459436]
    }
    (511545 return ret[511543])
  }
  function chpl_direct_counted_range_iter[459320](arg low[459324]:bool[10], arg count[459331] :
  (459328 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511556] "RVV" "temp"
    unknown call_tmp[624730] "maybe param" "maybe type" "temp"
    (624733 'move' call_tmp[624730](459336 call chpl_build_low_bounded_range low[459324]))
    const r[459334] "dead at end of block" "const" "insert auto destroy"
    (541382 'init var' r[459334] call_tmp[624730])
    (459339 'end of statement')
    {
      unknown _indexOfInterest[459341] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459343] "expr temp" "temp"
      unknown call_tmp[624735] "expr temp" "maybe param" "maybe type" "temp"
      (624738 'move' call_tmp[624735](459350 call # r[459334] count[459331]))
      (459345 'move' _iterator[459343](459348 call _getIterator call_tmp[624735]))
      Defer
      {
        {
          (459355 call _freeIterator _iterator[459343])
        }
      }
      { scopeless type
        (459359 'move' _indexOfInterest[459341](459362 call iteratorIndex _iterator[459343]))
      }
      ForLoop[459364]
      {
        unknown i[459367] "index var" "insert auto destroy"
        (476194 'end of statement')
        (459369 'move' i[459367] _indexOfInterest[459341])
        (476195 'end of statement' i[459367])
        unknown yret[511560] "YVV" "temp"
        (511563 'move' yret[511560](511562 'deref' i[459367]))
        (511565 yield yret[511560])
        (476197 'end of statement' i[459367])
        label _continueLabel[459374]
        _indexOfInterest[459341]
        _iterator[459343]
      }
      label _breakLabel[459376]
    }
    (511558 return ret[511556])
  }
  function chpl_direct_counted_range_iter[459740](arg low[459744]:bool[10], arg count[459751] :
  (459748 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511569] "RVV" "temp"
    unknown call_tmp[624740] "maybe param" "maybe type" "temp"
    (624743 'move' call_tmp[624740](459756 call chpl_build_low_bounded_range low[459744]))
    const r[459754] "dead at end of block" "const" "insert auto destroy"
    (541384 'init var' r[459754] call_tmp[624740])
    (459759 'end of statement')
    {
      unknown _indexOfInterest[459761] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459763] "expr temp" "temp"
      unknown call_tmp[624745] "expr temp" "maybe param" "maybe type" "temp"
      (624748 'move' call_tmp[624745](459770 call # r[459754] count[459751]))
      (459765 'move' _iterator[459763](459768 call _getIterator call_tmp[624745]))
      Defer
      {
        {
          (459775 call _freeIterator _iterator[459763])
        }
      }
      { scopeless type
        (459779 'move' _indexOfInterest[459761](459782 call iteratorIndex _iterator[459763]))
      }
      ForLoop[459784]
      {
        unknown i[459787] "index var" "insert auto destroy"
        (476200 'end of statement')
        (459789 'move' i[459787] _indexOfInterest[459761])
        (476201 'end of statement' i[459787])
        unknown yret[511573] "YVV" "temp"
        (511576 'move' yret[511573](511575 'deref' i[459787]))
        (511578 yield yret[511573])
        (476203 'end of statement' i[459787])
        label _continueLabel[459794]
        _indexOfInterest[459761]
        _iterator[459763]
      }
      label _breakLabel[459796]
    }
    (511571 return ret[511569])
  }
  function chpl_direct_counted_range_iter[459680](arg low[459684]:bool[10], arg count[459691] :
  (459688 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511582] "RVV" "temp"
    unknown call_tmp[624750] "maybe param" "maybe type" "temp"
    (624753 'move' call_tmp[624750](459696 call chpl_build_low_bounded_range low[459684]))
    const r[459694] "dead at end of block" "const" "insert auto destroy"
    (541386 'init var' r[459694] call_tmp[624750])
    (459699 'end of statement')
    {
      unknown _indexOfInterest[459701] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459703] "expr temp" "temp"
      unknown call_tmp[624755] "expr temp" "maybe param" "maybe type" "temp"
      (624758 'move' call_tmp[624755](459710 call # r[459694] count[459691]))
      (459705 'move' _iterator[459703](459708 call _getIterator call_tmp[624755]))
      Defer
      {
        {
          (459715 call _freeIterator _iterator[459703])
        }
      }
      { scopeless type
        (459719 'move' _indexOfInterest[459701](459722 call iteratorIndex _iterator[459703]))
      }
      ForLoop[459724]
      {
        unknown i[459727] "index var" "insert auto destroy"
        (476206 'end of statement')
        (459729 'move' i[459727] _indexOfInterest[459701])
        (476207 'end of statement' i[459727])
        unknown yret[511586] "YVV" "temp"
        (511589 'move' yret[511586](511588 'deref' i[459727]))
        (511591 yield yret[511586])
        (476209 'end of statement' i[459727])
        label _continueLabel[459734]
        _indexOfInterest[459701]
        _iterator[459703]
      }
      label _breakLabel[459736]
    }
    (511584 return ret[511582])
  }
  function chpl_direct_counted_range_iter[459620](arg low[459624]:bool[10], arg count[459631] :
  (459628 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511595] "RVV" "temp"
    unknown call_tmp[624760] "maybe param" "maybe type" "temp"
    (624763 'move' call_tmp[624760](459636 call chpl_build_low_bounded_range low[459624]))
    const r[459634] "dead at end of block" "const" "insert auto destroy"
    (541388 'init var' r[459634] call_tmp[624760])
    (459639 'end of statement')
    {
      unknown _indexOfInterest[459641] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459643] "expr temp" "temp"
      unknown call_tmp[624765] "expr temp" "maybe param" "maybe type" "temp"
      (624768 'move' call_tmp[624765](459650 call # r[459634] count[459631]))
      (459645 'move' _iterator[459643](459648 call _getIterator call_tmp[624765]))
      Defer
      {
        {
          (459655 call _freeIterator _iterator[459643])
        }
      }
      { scopeless type
        (459659 'move' _indexOfInterest[459641](459662 call iteratorIndex _iterator[459643]))
      }
      ForLoop[459664]
      {
        unknown i[459667] "index var" "insert auto destroy"
        (476212 'end of statement')
        (459669 'move' i[459667] _indexOfInterest[459641])
        (476213 'end of statement' i[459667])
        unknown yret[511599] "YVV" "temp"
        (511602 'move' yret[511599](511601 'deref' i[459667]))
        (511604 yield yret[511599])
        (476215 'end of statement' i[459667])
        label _continueLabel[459674]
        _indexOfInterest[459641]
        _iterator[459643]
      }
      label _breakLabel[459676]
    }
    (511597 return ret[511595])
  }
  function chpl_direct_counted_range_iter[459560](arg low[459564]:bool[10], arg count[459571] :
  (459568 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511608] "RVV" "temp"
    unknown call_tmp[624770] "maybe param" "maybe type" "temp"
    (624773 'move' call_tmp[624770](459576 call chpl_build_low_bounded_range low[459564]))
    const r[459574] "dead at end of block" "const" "insert auto destroy"
    (541390 'init var' r[459574] call_tmp[624770])
    (459579 'end of statement')
    {
      unknown _indexOfInterest[459581] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459583] "expr temp" "temp"
      unknown call_tmp[624775] "expr temp" "maybe param" "maybe type" "temp"
      (624778 'move' call_tmp[624775](459590 call # r[459574] count[459571]))
      (459585 'move' _iterator[459583](459588 call _getIterator call_tmp[624775]))
      Defer
      {
        {
          (459595 call _freeIterator _iterator[459583])
        }
      }
      { scopeless type
        (459599 'move' _indexOfInterest[459581](459602 call iteratorIndex _iterator[459583]))
      }
      ForLoop[459604]
      {
        unknown i[459607] "index var" "insert auto destroy"
        (476218 'end of statement')
        (459609 'move' i[459607] _indexOfInterest[459581])
        (476219 'end of statement' i[459607])
        unknown yret[511612] "YVV" "temp"
        (511615 'move' yret[511612](511614 'deref' i[459607]))
        (511617 yield yret[511612])
        (476221 'end of statement' i[459607])
        label _continueLabel[459614]
        _indexOfInterest[459581]
        _iterator[459583]
      }
      label _breakLabel[459616]
    }
    (511610 return ret[511608])
  }
  function chpl_direct_counted_range_iter[75223](arg low[75220]:integral[199](?), arg count[75225]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511621] "RVV" "temp"
    unknown call_tmp[624780] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624783 'move' call_tmp[624780](75231 'typeof' low[75220]))
    unknown call_tmp[624785] "expr temp" "maybe param" "maybe type" "temp"
    (624788 'move' call_tmp[624785](75233 call _cast string[26] call_tmp[624780]))
    unknown call_tmp[624790] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624793 'move' call_tmp[624790](75237 'typeof' count[75225]))
    unknown call_tmp[624795] "expr temp" "maybe param" "maybe type" "temp"
    (624798 'move' call_tmp[624795](75239 call _cast string[26] call_tmp[624790]))
    (75241 call compilerError "can't apply '#' to a range with idxType " call_tmp[624785] " using a count of type " call_tmp[624795])
    (511623 return ret[511621])
  }
  function chpl_direct_counted_range_iter[75250](arg low[75248]:_any[178](?), arg count[75252]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511627] "RVV" "temp"
    (75257 call compilerError "Bound of 'low..' must be an integer")
    (511629 return ret[511627])
  }
  function chpl_direct_counted_range_iter_helper[75266](arg low[75264]:_any[178](?), arg count[75268]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511633] "RVV" "temp"
    unknown tmp[420758] "maybe param" "temp"
    unknown tmp[420779] "maybe param" "temp"
    (420790 'move' tmp[420779] 1)
    unknown call_tmp[624800] "expr temp" "maybe param" "maybe type" "temp"
    (624803 'move' call_tmp[624800](420792 call _cond_invalid tmp[420779]))
    if call_tmp[624800]
    {
      (420795 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558399] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558400] "maybe param" "temp"
    unknown call_tmp[624805] "expr temp" "maybe param" "maybe type" "temp"
    (624808 'move' call_tmp[624805](420780 call isTrue tmp[420779]))
    (558405 'move' tmp[558400](558403 call _cond_test call_tmp[624805]))
    if tmp[558400]
    {
      unknown tmp[558407] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624810] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624813 'move' call_tmp[624810](75273 'typeof' count[75268]))
      unknown call_tmp[624815] "expr temp" "maybe param" "maybe type" "temp"
      (624818 'move' call_tmp[624815](75275 call isIntType call_tmp[624810]))
      (558409 'move' tmp[558407](420783 call isTrue call_tmp[624815]))
      (558414 'move' tmp[558399](558411 '_paramFoldLogical' tmp[558400] tmp[558407]))
    }
    {
      (558419 'move' tmp[558399](558416 '_paramFoldLogical' tmp[558400] 0))
    }
    (420769 'move' tmp[420758] tmp[558399])
    unknown call_tmp[624820] "expr temp" "maybe param" "maybe type" "temp"
    (624823 'move' call_tmp[624820](420771 call _cond_invalid tmp[420758]))
    if call_tmp[624820]
    {
      (420774 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558426] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558427] "maybe param" "temp"
    unknown call_tmp[624825] "expr temp" "maybe param" "maybe type" "temp"
    (624828 'move' call_tmp[624825](420759 call isTrue tmp[420758]))
    (558432 'move' tmp[558427](558430 call _cond_test call_tmp[624825]))
    if tmp[558427]
    {
      unknown tmp[558434] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624830] "expr temp" "maybe param" "maybe type" "temp"
      (624833 'move' call_tmp[624830](75280 call < count[75268] 0))
      (558436 'move' tmp[558434](420762 call isTrue call_tmp[624830]))
      (558441 'move' tmp[558426](558438 '_paramFoldLogical' tmp[558427] tmp[558434]))
    }
    {
      (558446 'move' tmp[558426](558443 '_paramFoldLogical' tmp[558427] 0))
    }
    unknown call_tmp[624835] "expr temp" "maybe param" "maybe type" "temp"
    (624838 'move' call_tmp[624835](75292 call _cond_test tmp[558426]))
    if call_tmp[624835]
    {
      (75290 call boundsCheckHalt module=[255] HaltWrappers[210085] "With a negative count, the range must have a last index.")
      (358066 'referenced modules list' HaltWrappers[210085])
    }
    const tmp[75340] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[558453] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558454] "maybe param" "temp"
    unknown call_tmp[624840] "expr temp" "maybe param" "maybe type" "temp"
    (624843 'move' call_tmp[624840](75305 call == count[75268] 0))
    (558459 'move' tmp[558454](558457 call _cond_test call_tmp[624840]))
    if tmp[558454]
    {
      unknown tmp[558461] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624845] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624848 'move' call_tmp[624845](75316 'typeof' low[75264]))
      unknown call_tmp[624850] "expr temp" "maybe param" "maybe type" "temp"
      (624853 'move' call_tmp[624850](75310 call _cast uint(64)[115] low[75264]))
      unknown call_tmp[624855] "expr temp" "maybe param" "maybe type" "temp"
      (624858 'move' call_tmp[624855](75313 call - call_tmp[624850] 1))
      unknown call_tmp[624860] "expr temp" "maybe param" "maybe type" "temp"
      (624863 'move' call_tmp[624860](75317 call _cast call_tmp[624845] call_tmp[624855]))
      (558463 'move' tmp[558461](75320 call _build_tuple low[75264] call_tmp[624860]))
      (558468 'move' tmp[558453](558465 '_paramFoldLogical' tmp[558454] tmp[558461]))
    }
    {
      unknown tmp[558470] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624865] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624868 'move' call_tmp[624865](75326 'typeof' low[75264]))
      unknown call_tmp[624870] "expr temp" "maybe param" "maybe type" "temp"
      (624873 'move' call_tmp[624870](75327 call _cast call_tmp[624865] count[75268]))
      unknown call_tmp[624875] "expr temp" "maybe param" "maybe type" "temp"
      (624878 'move' call_tmp[624875](75330 call - call_tmp[624870] 1))
      unknown call_tmp[624880] "expr temp" "maybe param" "maybe type" "temp"
      (624883 'move' call_tmp[624880](75332 call + low[75264] call_tmp[624875]))
      (558472 'move' tmp[558470](75335 call _build_tuple low[75264] call_tmp[624880]))
      (558477 'move' tmp[558453](558474 '_paramFoldLogical' tmp[558454] tmp[558470]))
    }
    (541392 'init var' tmp[75340] tmp[558453])
    (75347 call _check_tuple_var_decl tmp[75340] 2)
    (476228 'end of statement')
    unknown call_tmp[624885] "maybe param" "maybe type" "temp"
    (624888 'move' call_tmp[624885](75341 call tmp[75340] 0))
    const start[75298] "dead at end of block" "const" "insert auto destroy"
    (541394 'init var' start[75298] call_tmp[624885])
    unknown call_tmp[624890] "maybe param" "maybe type" "temp"
    (624893 'move' call_tmp[624890](75344 call tmp[75340] 1))
    const end[75300] "dead at end of block" "const" "insert auto destroy"
    (541396 'init var' end[75300] call_tmp[624890])
    (75352 'end of statement')
    {
      unknown _indexOfInterest[75363] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[75364] "expr temp" "temp"
      unknown call_tmp[624895] "expr temp" "maybe param" "maybe type" "temp"
      (624898 'move' call_tmp[624895](75359 call chpl_direct_param_stride_range_iter start[75298] end[75300] 1))
      (75373 'move' _iterator[75364](75371 call _getIterator call_tmp[624895]))
      Defer
      {
        {
          (75390 call _freeIterator _iterator[75364])
        }
      }
      { scopeless type
        (75379 'move' _indexOfInterest[75363](75376 call iteratorIndex _iterator[75364]))
      }
      ForLoop[75365]
      {
        unknown i[75383] "index var" "insert auto destroy"
        (476230 'end of statement')
        (75385 'move' i[75383] _indexOfInterest[75363])
        (476231 'end of statement' i[75383])
        unknown yret[511637] "YVV" "temp"
        (511640 'move' yret[511637](511639 'deref' i[75383]))
        (511642 yield yret[511637])
        (476233 'end of statement' i[75383])
        label _continueLabel[75368]
        _indexOfInterest[75363]
        _iterator[75364]
      }
      label _breakLabel[75369]
    }
    (511635 return ret[511633])
  }
  function chpl_direct_pos_stride_range_iter[75406](arg low[75403]:_any[178](?), arg high[75408]:_any[178](?), arg stride[75410]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511646] "RVV" "temp"
    unknown call_tmp[624900] "expr temp" "maybe param" "maybe type" "temp"
    (624903 'move' call_tmp[624900](75554 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[624900]
    {
      unknown call_tmp[624905] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624908 'move' call_tmp[624905](459800 'typeof' low[75403]))
      (75417 call chpl_range_check_stride stride[75410] call_tmp[624905])
      (476235 'end of statement')
      unknown call_tmp[624910] "expr temp" "maybe param" "maybe type" "temp"
      (624913 'move' call_tmp[624910](75429 call _cond_test 1))
      if call_tmp[624910]
      {
        unknown call_tmp[624915] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (624918 'move' call_tmp[624915](459802 'typeof' low[75403]))
        (75427 call chpl_checkIfRangeIterWillOverflow call_tmp[624915] low[75403] high[75408] stride[75410])
      }
      unknown i[75435] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624920] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624923 'move' call_tmp[624920](459804 'typeof' low[75403]))
      (541398 'default init var' i[75435] call_tmp[624920])
      (75438 'end of statement')
      CForLoop[75481]
      {
        {
          unknown yret[511650] "YVV" "temp"
          (511653 'move' yret[511650](511652 'deref' i[75435]))
          (511655 yield yret[511650])
          (476237 'end of statement' i[75435])
        }
        label _continueLabel[75497]
        {
          (75482 '=' i[75435] low[75403])
          (476239 'end of statement' i[75435])
        }
        {
          (75485 '<=' i[75435] high[75408])
          (476241 'end of statement' i[75435])
        }
        {
          unknown call_tmp[624925] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624928 'move' call_tmp[624925](459806 'typeof' low[75403]))
          unknown call_tmp[624930] "expr temp" "maybe param" "maybe type" "temp"
          (624933 'move' call_tmp[624930](75491 call _cast call_tmp[624925] stride[75410]))
          (75488 '+=' i[75435] call_tmp[624930])
          (476243 'end of statement' i[75435])
        }
      }
      label _breakLabel[75498]
    }
    {
      {
        unknown _indexOfInterest[75519] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75520] "expr temp" "temp"
        unknown call_tmp[624935] "expr temp" "maybe param" "maybe type" "temp"
        (624938 'move' call_tmp[624935](75504 call chpl_build_bounded_range low[75403] high[75408]))
        unknown call_tmp[624940] "expr temp" "maybe param" "maybe type" "temp"
        (624943 'move' call_tmp[624940](75507 call chpl_by call_tmp[624935] stride[75410]))
        unknown call_tmp[624947] "expr temp" "maybe param" "maybe type" "temp"
        (624950 'move' call_tmp[624947](75515 call(75511 call (partial) generalIterator _mt[243] call_tmp[624940])))
        (75529 'move' _iterator[75520](75527 call _getIterator call_tmp[624947]))
        Defer
        {
          {
            (75546 call _freeIterator _iterator[75520])
          }
        }
        { scopeless type
          (75535 'move' _indexOfInterest[75519](75532 call iteratorIndex _iterator[75520]))
        }
        ForLoop[75521]
        {
          unknown i[75539] "index var" "insert auto destroy"
          (476246 'end of statement')
          (75541 'move' i[75539] _indexOfInterest[75519])
          (476247 'end of statement' i[75539])
          unknown yret[511657] "YVV" "temp"
          (511660 'move' yret[511657](511659 'deref' i[75539]))
          (511662 yield yret[511657])
          (476249 'end of statement' i[75539])
          label _continueLabel[75524]
          _indexOfInterest[75519]
          _iterator[75520]
        }
        label _breakLabel[75525]
      }
    }
    (511648 return ret[511646])
  }
  function chpl_direct_param_stride_range_iter[75568](arg low[75565]:_any[178](?), arg high[75570]:_any[178](?), param arg stride[75572]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511666] "RVV" "temp"
    unknown call_tmp[624952] "expr temp" "maybe param" "maybe type" "temp"
    (624955 'move' call_tmp[624952](75779 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[624952]
    {
      unknown call_tmp[624957] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624960 'move' call_tmp[624957](459808 'typeof' low[75565]))
      (75579 call chpl_range_check_stride stride[75572] call_tmp[624957])
      (476251 'end of statement')
      unknown i[75583] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624962] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624965 'move' call_tmp[624962](459810 'typeof' low[75565]))
      (541400 'default init var' i[75583] call_tmp[624962])
      (75586 'end of statement')
      unknown call_tmp[624967] "expr temp" "maybe param" "maybe type" "temp"
      (624970 'move' call_tmp[624967](75589 call > stride[75572] 0))
      unknown call_tmp[624972] "expr temp" "maybe param" "maybe type" "temp"
      (624975 'move' call_tmp[624972](75723 call _cond_test call_tmp[624967]))
      if call_tmp[624972]
      {
        unknown call_tmp[624977] "expr temp" "maybe param" "maybe type" "temp"
        (624980 'move' call_tmp[624977](75600 call _cond_test 1))
        if call_tmp[624977]
        {
          unknown call_tmp[624982] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624985 'move' call_tmp[624982](459812 'typeof' low[75565]))
          (75598 call chpl_checkIfRangeIterWillOverflow call_tmp[624982] low[75565] high[75570] stride[75572])
        }
        CForLoop[75632]
        {
          {
            unknown yret[511670] "YVV" "temp"
            (511673 'move' yret[511670](511672 'deref' i[75583]))
            (511675 yield yret[511670])
            (476253 'end of statement' i[75583])
          }
          label _continueLabel[75648]
          {
            (75633 '=' i[75583] low[75565])
            (476255 'end of statement' i[75583])
          }
          {
            (75636 '<=' i[75583] high[75570])
            (476257 'end of statement' i[75583])
          }
          {
            unknown call_tmp[624987] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624990 'move' call_tmp[624987](459814 'typeof' low[75565]))
            unknown call_tmp[624992] "expr temp" "maybe param" "maybe type" "temp"
            (624995 'move' call_tmp[624992](75642 call _cast call_tmp[624987] stride[75572]))
            (75639 '+=' i[75583] call_tmp[624992])
            (476259 'end of statement' i[75583])
          }
        }
        label _breakLabel[75649]
      }
      {
        unknown call_tmp[624997] "expr temp" "maybe param" "maybe type" "temp"
        (625000 'move' call_tmp[624997](75654 call < stride[75572] 0))
        unknown call_tmp[625002] "expr temp" "maybe param" "maybe type" "temp"
        (625005 'move' call_tmp[625002](75719 call _cond_test call_tmp[624997]))
        if call_tmp[625002]
        {
          unknown call_tmp[625007] "expr temp" "maybe param" "maybe type" "temp"
          (625010 'move' call_tmp[625007](75667 call _cond_test 1))
          if call_tmp[625007]
          {
            unknown call_tmp[625012] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (625015 'move' call_tmp[625012](459816 'typeof' low[75565]))
            (75665 call chpl_checkIfRangeIterWillOverflow call_tmp[625012] low[75565] high[75570] stride[75572] high[75570] low[75565])
          }
          CForLoop[75699]
          {
            {
              unknown yret[511677] "YVV" "temp"
              (511680 'move' yret[511677](511679 'deref' i[75583]))
              (511682 yield yret[511677])
              (476262 'end of statement' i[75583])
            }
            label _continueLabel[75715]
            {
              (75700 '=' i[75583] high[75570])
              (476264 'end of statement' i[75583])
            }
            {
              (75703 '>=' i[75583] low[75565])
              (476266 'end of statement' i[75583])
            }
            {
              unknown call_tmp[625017] "expr temp" "maybe param" "maybe type" "temp" "type variable"
              (625020 'move' call_tmp[625017](459818 'typeof' low[75565]))
              unknown call_tmp[625022] "expr temp" "maybe param" "maybe type" "temp"
              (625025 'move' call_tmp[625022](75709 call _cast call_tmp[625017] stride[75572]))
              (75706 '+=' i[75583] call_tmp[625022])
              (476268 'end of statement' i[75583])
            }
          }
          label _breakLabel[75716]
        }
      }
    }
    {
      {
        unknown _indexOfInterest[75744] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75745] "expr temp" "temp"
        unknown call_tmp[625027] "expr temp" "maybe param" "maybe type" "temp"
        (625030 'move' call_tmp[625027](75731 call chpl_build_bounded_range low[75565] high[75570]))
        unknown call_tmp[625032] "expr temp" "maybe param" "maybe type" "temp"
        (625035 'move' call_tmp[625032](75734 call chpl_by call_tmp[625027] stride[75572]))
        unknown call_tmp[625039] "expr temp" "maybe param" "maybe type" "temp"
        (625042 'move' call_tmp[625039](75740 call(75736 call (partial) generalIterator _mt[243] call_tmp[625032])))
        (75754 'move' _iterator[75745](75752 call _getIterator call_tmp[625039]))
        Defer
        {
          {
            (75771 call _freeIterator _iterator[75745])
          }
        }
        { scopeless type
          (75760 'move' _indexOfInterest[75744](75757 call iteratorIndex _iterator[75745]))
        }
        ForLoop[75746]
        {
          unknown i[75764] "index var" "insert auto destroy"
          (476271 'end of statement')
          (75766 'move' i[75764] _indexOfInterest[75744])
          (476272 'end of statement' i[75764])
          unknown yret[511684] "YVV" "temp"
          (511687 'move' yret[511684](511686 'deref' i[75764]))
          (511689 yield yret[511684])
          (476274 'end of statement' i[75764])
          label _continueLabel[75749]
          _indexOfInterest[75744]
          _iterator[75745]
        }
        label _breakLabel[75750]
      }
    }
    (511668 return ret[511666])
  }
  function range[64319](?).these[75789](arg _mt[75794]:_MT[238], arg this[75791]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511693] "RVV" "temp"
    unknown call_tmp[625046] "expr temp" "maybe param" "maybe type" "temp"
    (625049 'move' call_tmp[625046](375636 call boundedType _mt[243] this[75791]))
    unknown call_tmp[625051] "expr temp" "maybe param" "maybe type" "temp"
    (625054 'move' call_tmp[625051](75808 call == call_tmp[625046] boundedNone[64214]))
    unknown call_tmp[625056] "expr temp" "maybe param" "maybe type" "temp"
    (625059 'move' call_tmp[625056](75831 call _cond_test call_tmp[625051]))
    if call_tmp[625056]
    {
      (75829 call compilerError "iteration over a range with no bounds")
    }
    unknown call_tmp[625061] "expr temp" "maybe param" "maybe type" "temp"
    (625064 'move' call_tmp[625061](75911 call _cond_test 1))
    if call_tmp[625061]
    {
      unknown call_tmp[625068] "expr temp" "maybe param" "maybe type" "temp"
      (625071 'move' call_tmp[625068](75843 call(75839 call (partial) hasFirst _mt[243] this[75791])))
      unknown call_tmp[625073] "expr temp" "maybe param" "maybe type" "temp"
      (625076 'move' call_tmp[625073](75844 call ! call_tmp[625068]))
      unknown call_tmp[625078] "expr temp" "maybe param" "maybe type" "temp"
      (625081 'move' call_tmp[625078](75870 call _cond_test call_tmp[625073]))
      if call_tmp[625078]
      {
        (75868 call boundsCheckHalt module=[255] HaltWrappers[210085] "iteration over range that has no first index")
        (358075 'referenced modules list' HaltWrappers[210085])
      }
      unknown call_tmp[625085] "expr temp" "maybe param" "maybe type" "temp"
      (625088 'move' call_tmp[625085](75881 call(75877 call (partial) isAmbiguous _mt[243] this[75791])))
      unknown call_tmp[625090] "expr temp" "maybe param" "maybe type" "temp"
      (625093 'move' call_tmp[625090](75906 call _cond_test call_tmp[625085]))
      if call_tmp[625090]
      {
        (75904 call boundsCheckHalt module=[255] HaltWrappers[210085] "these -- Attempt to iterate over a range with ambiguous alignment.")
        (358082 'referenced modules list' HaltWrappers[210085])
      }
    }
    unknown i[75916] "dead at end of block" "insert auto destroy"
    unknown call_tmp[625097] "expr temp" "maybe param" "maybe type" "temp"
    (625100 'move' call_tmp[625097](375641 call intIdxType _mt[243] this[75791]))
    (541402 'default init var' i[75916] call_tmp[625097])
    (75919 'end of statement')
    unknown call_tmp[625104] "expr temp" "maybe param" "maybe type" "temp"
    (625107 'move' call_tmp[625104](75922 call first _mt[243] this[75791]))
    unknown call_tmp[625109] "maybe param" "maybe type" "temp"
    (625112 'move' call_tmp[625109](75926 call chpl__idxToInt call_tmp[625104]))
    const start[75927] "dead at end of block" "const" "insert auto destroy"
    (541404 'init var' start[75927] call_tmp[625109])
    (75930 'end of statement')
    CForLoop[75956]
    {
      {
        unknown yret[511697] "YVV" "temp"
        unknown call_tmp[625116] "expr temp" "maybe param" "maybe type" "temp"
        (625119 'move' call_tmp[625116](75951 call(375645 call (partial) chpl_intToIdx _mt[243] this[75791]) i[75916]))
        (511700 'move' yret[511697](511699 'deref' call_tmp[625116]))
        (511702 yield yret[511697])
        (476279 'end of statement' i[75916])
      }
      label _continueLabel[75970]
      {
        (75957 '=' i[75916] start[75927])
        (476281 'end of statement' i[75916] start[75927])
      }
      {
        (748321 call chpl_statementLevelSymbol 1)
      }
      {
        unknown call_tmp[625123] "expr temp" "maybe param" "maybe type" "temp"
        (625126 'move' call_tmp[625123](375653 call intIdxType _mt[243] this[75791]))
        unknown call_tmp[625130] "expr temp" "maybe param" "maybe type" "temp"
        (625133 'move' call_tmp[625130](375657 call stride _mt[243] this[75791]))
        unknown call_tmp[625135] "expr temp" "maybe param" "maybe type" "temp"
        (625138 'move' call_tmp[625135](75964 call _cast call_tmp[625123] call_tmp[625130]))
        (75961 '+=' i[75916] call_tmp[625135])
        (476284 'end of statement' i[75916])
      }
    }
    label _breakLabel[75971]
    (511695 return ret[511693])
  }
  where {
    unknown call_tmp[625142] "expr temp" "maybe param" "maybe type" "temp"
    (625145 'move' call_tmp[625142](375631 call boundedType _mt[243] this[75791]))
    (75801 call != call_tmp[625142] bounded[64208])
  }
  function range[64319](?).these[75980](arg _mt[75985]:_MT[238], arg this[75982]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511706] "RVV" "temp"
    unknown call_tmp[625147] "expr temp" "maybe param" "maybe type" "temp"
    (625150 'move' call_tmp[625147](76167 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[625147]
    {
      unknown call_tmp[625152] "expr temp" "maybe param" "maybe type" "temp"
      (625155 'move' call_tmp[625152](76026 call _cond_test 1))
      if call_tmp[625152]
      {
        (76004 call(375675 call (partial) checkIfIterWillOverflow _mt[243] this[75982]))
        (476286 'end of statement')
        unknown call_tmp[625161] "expr temp" "maybe param" "maybe type" "temp"
        (625164 'move' call_tmp[625161](76012 call(76008 call (partial) isAmbiguous _mt[243] this[75982])))
        unknown call_tmp[625166] "expr temp" "maybe param" "maybe type" "temp"
        (625169 'move' call_tmp[625166](76021 call _cond_test call_tmp[625161]))
        if call_tmp[625166]
        {
          (76019 call boundsCheckHalt module=[255] HaltWrappers[210085] "these -- Attempt to iterate over a range with ambiguous alignment.")
          (358091 'referenced modules list' HaltWrappers[210085])
        }
      }
      unknown i[76032] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625173] "expr temp" "maybe param" "maybe type" "temp"
      (625176 'move' call_tmp[625173](375679 call intIdxType _mt[243] this[75982]))
      (541406 'default init var' i[76032] call_tmp[625173])
      (76035 'end of statement')
      unknown call_tmp[625180] "maybe param" "maybe type" "temp"
      (625183 'move' call_tmp[625180](76037 call firstAsInt _mt[243] this[75982]))
      const start[76040] "dead at end of block" "const" "insert auto destroy"
      (541408 'init var' start[76040] call_tmp[625180])
      (76043 'end of statement')
      const end[76069] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558484] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558485] "maybe param" "temp"
      unknown call_tmp[625187] "expr temp" "maybe param" "maybe type" "temp"
      (625190 'move' call_tmp[625187](76046 call low _mt[243] this[75982]))
      unknown call_tmp[625194] "expr temp" "maybe param" "maybe type" "temp"
      (625197 'move' call_tmp[625194](76050 call high _mt[243] this[75982]))
      unknown call_tmp[625199] "expr temp" "maybe param" "maybe type" "temp"
      (625202 'move' call_tmp[625199](76053 call > call_tmp[625187] call_tmp[625194]))
      (558490 'move' tmp[558485](558488 call _cond_test call_tmp[625199]))
      if tmp[558485]
      {
        (558495 'move' tmp[558484](558492 '_paramFoldLogical' tmp[558485] start[76040]))
      }
      {
        unknown tmp[558497] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[625206] "expr temp" "maybe param" "maybe type" "temp"
        (625209 'move' call_tmp[625206](76057 call lastAsInt _mt[243] this[75982]))
        unknown call_tmp[625213] "expr temp" "maybe param" "maybe type" "temp"
        (625216 'move' call_tmp[625213](375692 call intIdxType _mt[243] this[75982]))
        unknown call_tmp[625220] "expr temp" "maybe param" "maybe type" "temp"
        (625223 'move' call_tmp[625220](375688 call stride _mt[243] this[75982]))
        unknown call_tmp[625225] "expr temp" "maybe param" "maybe type" "temp"
        (625228 'move' call_tmp[625225](76062 call _cast call_tmp[625213] call_tmp[625220]))
        (558499 'move' tmp[558497](76064 call + call_tmp[625206] call_tmp[625225]))
        (558504 'move' tmp[558484](558501 '_paramFoldLogical' tmp[558485] tmp[558497]))
      }
      unknown call_tmp[625232] "maybe param" "maybe type" "temp"
      (625235 'move' call_tmp[625232](375683 call intIdxType _mt[243] this[75982]))
      (541410 'init var' end[76069] tmp[558484] call_tmp[625232])
      (76072 'end of statement' start[76040])
      CForLoop[76102]
      {
        {
          unknown yret[511710] "YVV" "temp"
          unknown call_tmp[625239] "expr temp" "maybe param" "maybe type" "temp"
          (625242 'move' call_tmp[625239](76097 call(375696 call (partial) chpl_intToIdx _mt[243] this[75982]) i[76032]))
          (511713 'move' yret[511710](511712 'deref' call_tmp[625239]))
          (511715 yield yret[511710])
          (476289 'end of statement' i[76032])
        }
        label _continueLabel[76118]
        {
          (76103 '=' i[76032] start[76040])
          (476291 'end of statement' i[76032] start[76040])
        }
        {
          (76106 '!=' i[76032] end[76069])
          (476294 'end of statement' i[76032] end[76069])
        }
        {
          unknown call_tmp[625246] "expr temp" "maybe param" "maybe type" "temp"
          (625249 'move' call_tmp[625246](375706 call intIdxType _mt[243] this[75982]))
          unknown call_tmp[625253] "expr temp" "maybe param" "maybe type" "temp"
          (625256 'move' call_tmp[625253](375710 call stride _mt[243] this[75982]))
          unknown call_tmp[625258] "expr temp" "maybe param" "maybe type" "temp"
          (625261 'move' call_tmp[625258](76112 call _cast call_tmp[625246] call_tmp[625253]))
          (76109 '+=' i[76032] call_tmp[625258])
          (476297 'end of statement' i[76032])
        }
      }
      label _breakLabel[76119]
    }
    {
      {
        unknown _indexOfInterest[76132] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76133] "expr temp" "temp"
        unknown call_tmp[625265] "expr temp" "maybe param" "maybe type" "temp"
        (625268 'move' call_tmp[625265](76128 call(76124 call (partial) generalIterator _mt[243] this[75982])))
        (76142 'move' _iterator[76133](76140 call _getIterator call_tmp[625265]))
        Defer
        {
          {
            (76159 call _freeIterator _iterator[76133])
          }
        }
        { scopeless type
          (76148 'move' _indexOfInterest[76132](76145 call iteratorIndex _iterator[76133]))
        }
        ForLoop[76134]
        {
          unknown i[76152] "index var" "insert auto destroy"
          (476300 'end of statement')
          (76154 'move' i[76152] _indexOfInterest[76132])
          (476301 'end of statement' i[76152])
          unknown yret[511717] "YVV" "temp"
          (511720 'move' yret[511717](511719 'deref' i[76152]))
          (511722 yield yret[511717])
          (476303 'end of statement' i[76152])
          label _continueLabel[76137]
          _indexOfInterest[76132]
          _iterator[76133]
        }
        label _breakLabel[76138]
      }
    }
    (511708 return ret[511706])
  }
  where {
    unknown tmp[420800] "maybe param" "temp"
    unknown call_tmp[625272] "expr temp" "maybe param" "maybe type" "temp"
    (625275 'move' call_tmp[625272](375662 call boundedType _mt[243] this[75982]))
    (420811 'move' tmp[420800](75992 call == call_tmp[625272] bounded[64208]))
    unknown call_tmp[625277] "expr temp" "maybe param" "maybe type" "temp"
    (625280 'move' call_tmp[625277](420813 call _cond_invalid tmp[420800]))
    if call_tmp[625277]
    {
      (420816 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558511] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558512] "maybe param" "temp"
    unknown call_tmp[625282] "expr temp" "maybe param" "maybe type" "temp"
    (625285 'move' call_tmp[625282](420801 call isTrue tmp[420800]))
    (558517 'move' tmp[558512](558515 call _cond_test call_tmp[625282]))
    if tmp[558512]
    {
      unknown tmp[558519] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625289] "expr temp" "maybe param" "maybe type" "temp"
      (625292 'move' call_tmp[625289](375667 call stridable _mt[243] this[75982]))
      unknown call_tmp[625294] "expr temp" "maybe param" "maybe type" "temp"
      (625297 'move' call_tmp[625294](75996 call == call_tmp[625289] 1))
      (558521 'move' tmp[558519](420804 call isTrue call_tmp[625294]))
      (558526 'move' tmp[558511](558523 '_paramFoldLogical' tmp[558512] tmp[558519]))
    }
    {
      (558531 'move' tmp[558511](558528 '_paramFoldLogical' tmp[558512] 0))
    }
    (748435 call chpl_statementLevelSymbol tmp[558511])
  }
  function range[64319](?).these[76178](arg _mt[76183]:_MT[238], arg this[76180]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511726] "RVV" "temp"
    unknown call_tmp[625299] "expr temp" "maybe param" "maybe type" "temp"
    (625302 'move' call_tmp[625299](76325 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[625299]
    {
      unknown call_tmp[625304] "expr temp" "maybe param" "maybe type" "temp"
      (625307 'move' call_tmp[625304](76204 call _cond_test 1))
      if call_tmp[625304]
      {
        (76202 call(375727 call (partial) checkIfIterWillOverflow _mt[243] this[76180]))
      }
      unknown i[76211] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625313] "expr temp" "maybe param" "maybe type" "temp"
      (625316 'move' call_tmp[625313](375731 call intIdxType _mt[243] this[76180]))
      (541412 'default init var' i[76211] call_tmp[625313])
      (76214 'end of statement')
      unknown call_tmp[625320] "maybe param" "maybe type" "temp"
      (625323 'move' call_tmp[625320](76216 call _low _mt[243] this[76180]))
      const start[76219] "dead at end of block" "const" "insert auto destroy"
      (541414 'init var' start[76219] call_tmp[625320])
      (76222 'end of statement')
      unknown call_tmp[625327] "maybe param" "maybe type" "temp"
      (625330 'move' call_tmp[625327](76224 call _high _mt[243] this[76180]))
      const end[76227] "dead at end of block" "const" "insert auto destroy"
      (541416 'init var' end[76227] call_tmp[625327])
      (76230 'end of statement')
      CForLoop[76260]
      {
        {
          unknown yret[511730] "YVV" "temp"
          unknown call_tmp[625334] "expr temp" "maybe param" "maybe type" "temp"
          (625337 'move' call_tmp[625334](76255 call(375735 call (partial) chpl_intToIdx _mt[243] this[76180]) i[76211]))
          (511733 'move' yret[511730](511732 'deref' call_tmp[625334]))
          (511735 yield yret[511730])
          (476306 'end of statement' i[76211])
        }
        label _continueLabel[76276]
        {
          (76261 '=' i[76211] start[76219])
          (476308 'end of statement' i[76211] start[76219])
        }
        {
          (76264 '<=' i[76211] end[76227])
          (476311 'end of statement' i[76211] end[76227])
        }
        {
          unknown call_tmp[625341] "expr temp" "maybe param" "maybe type" "temp"
          (625344 'move' call_tmp[625341](375745 call intIdxType _mt[243] this[76180]))
          unknown call_tmp[625348] "expr temp" "maybe param" "maybe type" "temp"
          (625351 'move' call_tmp[625348](375749 call stride _mt[243] this[76180]))
          unknown call_tmp[625353] "expr temp" "maybe param" "maybe type" "temp"
          (625356 'move' call_tmp[625353](76270 call _cast call_tmp[625341] call_tmp[625348]))
          (76267 '+=' i[76211] call_tmp[625353])
          (476314 'end of statement' i[76211])
        }
      }
      label _breakLabel[76277]
    }
    {
      {
        unknown _indexOfInterest[76290] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76291] "expr temp" "temp"
        unknown call_tmp[625360] "expr temp" "maybe param" "maybe type" "temp"
        (625363 'move' call_tmp[625360](76286 call(76282 call (partial) generalIterator _mt[243] this[76180])))
        (76300 'move' _iterator[76291](76298 call _getIterator call_tmp[625360]))
        Defer
        {
          {
            (76317 call _freeIterator _iterator[76291])
          }
        }
        { scopeless type
          (76306 'move' _indexOfInterest[76290](76303 call iteratorIndex _iterator[76291]))
        }
        ForLoop[76292]
        {
          unknown i[76310] "index var" "insert auto destroy"
          (476317 'end of statement')
          (76312 'move' i[76310] _indexOfInterest[76290])
          (476318 'end of statement' i[76310])
          unknown yret[511737] "YVV" "temp"
          (511740 'move' yret[511737](511739 'deref' i[76310]))
          (511742 yield yret[511737])
          (476320 'end of statement' i[76310])
          label _continueLabel[76295]
          _indexOfInterest[76290]
          _iterator[76291]
        }
        label _breakLabel[76296]
      }
    }
    (511728 return ret[511726])
  }
  where {
    unknown tmp[420821] "maybe param" "temp"
    unknown call_tmp[625367] "expr temp" "maybe param" "maybe type" "temp"
    (625370 'move' call_tmp[625367](375716 call boundedType _mt[243] this[76180]))
    (420832 'move' tmp[420821](76190 call == call_tmp[625367] bounded[64208]))
    unknown call_tmp[625372] "expr temp" "maybe param" "maybe type" "temp"
    (625375 'move' call_tmp[625372](420834 call _cond_invalid tmp[420821]))
    if call_tmp[625372]
    {
      (420837 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558538] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558539] "maybe param" "temp"
    unknown call_tmp[625377] "expr temp" "maybe param" "maybe type" "temp"
    (625380 'move' call_tmp[625377](420822 call isTrue tmp[420821]))
    (558544 'move' tmp[558539](558542 call _cond_test call_tmp[625377]))
    if tmp[558539]
    {
      unknown tmp[558546] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625384] "expr temp" "maybe param" "maybe type" "temp"
      (625387 'move' call_tmp[625384](375721 call stridable _mt[243] this[76180]))
      unknown call_tmp[625389] "expr temp" "maybe param" "maybe type" "temp"
      (625392 'move' call_tmp[625389](76194 call == call_tmp[625384] 0))
      (558548 'move' tmp[558546](420825 call isTrue call_tmp[625389]))
      (558553 'move' tmp[558538](558550 '_paramFoldLogical' tmp[558539] tmp[558546]))
    }
    {
      (558558 'move' tmp[558538](558555 '_paramFoldLogical' tmp[558539] 0))
    }
    (748437 call chpl_statementLevelSymbol tmp[558538])
  }
  function range[64319](?).generalIterator[76336](arg _mt[76341]:_MT[238], arg this[76338]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511746] "RVV" "temp"
    unknown tmp[420842] "maybe param" "temp"
    (420853 'move' tmp[420842] 1)
    unknown call_tmp[625394] "expr temp" "maybe param" "maybe type" "temp"
    (625397 'move' call_tmp[625394](420855 call _cond_invalid tmp[420842]))
    if call_tmp[625394]
    {
      (420858 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558565] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558566] "maybe param" "temp"
    unknown call_tmp[625399] "expr temp" "maybe param" "maybe type" "temp"
    (625402 'move' call_tmp[625399](420843 call isTrue tmp[420842]))
    (558571 'move' tmp[558566](558569 call _cond_test call_tmp[625399]))
    if tmp[558566]
    {
      unknown tmp[558573] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625406] "expr temp" "maybe param" "maybe type" "temp"
      (625409 'move' call_tmp[625406](76349 call(76345 call (partial) isAmbiguous _mt[243] this[76338])))
      (558575 'move' tmp[558573](420846 call isTrue call_tmp[625406]))
      (558580 'move' tmp[558565](558577 '_paramFoldLogical' tmp[558566] tmp[558573]))
    }
    {
      (558585 'move' tmp[558565](558582 '_paramFoldLogical' tmp[558566] 0))
    }
    unknown call_tmp[625411] "expr temp" "maybe param" "maybe type" "temp"
    (625414 'move' call_tmp[625411](76360 call _cond_test tmp[558565]))
    if call_tmp[625411]
    {
      (76358 call boundsCheckHalt module=[255] HaltWrappers[210085] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358107 'referenced modules list' HaltWrappers[210085])
    }
    unknown i[76367] "dead at end of block" "insert auto destroy"
    unknown call_tmp[625418] "expr temp" "maybe param" "maybe type" "temp"
    (625421 'move' call_tmp[625418](375755 call intIdxType _mt[243] this[76338]))
    (541418 'default init var' i[76367] call_tmp[625418])
    (76370 'end of statement')
    unknown call_tmp[625425] "maybe param" "maybe type" "temp"
    (625428 'move' call_tmp[625425](76372 call first _mt[243] this[76338]))
    const start[76375] "dead at end of block" "const" "insert auto destroy"
    (541420 'init var' start[76375] call_tmp[625425])
    (76378 'end of statement')
    const end[76399] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558592] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558593] "maybe param" "temp"
    unknown call_tmp[625432] "expr temp" "maybe param" "maybe type" "temp"
    (625435 'move' call_tmp[625432](76380 call low _mt[243] this[76338]))
    unknown call_tmp[625439] "expr temp" "maybe param" "maybe type" "temp"
    (625442 'move' call_tmp[625439](76384 call high _mt[243] this[76338]))
    unknown call_tmp[625444] "expr temp" "maybe param" "maybe type" "temp"
    (625447 'move' call_tmp[625444](76387 call > call_tmp[625432] call_tmp[625439]))
    (558598 'move' tmp[558593](558596 call _cond_test call_tmp[625444]))
    if tmp[558593]
    {
      (558603 'move' tmp[558592](558600 '_paramFoldLogical' tmp[558593] start[76375]))
    }
    {
      unknown tmp[558605] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558607 'move' tmp[558605](76393 call last _mt[243] this[76338]))
      (558612 'move' tmp[558592](558609 '_paramFoldLogical' tmp[558593] tmp[558605]))
    }
    (541422 'init var' end[76399] tmp[558592])
    (76402 'end of statement' start[76375])
    CForLoop[76441]
    {
      {
        unknown yret[511750] "YVV" "temp"
        (511753 'move' yret[511750](511752 'deref' i[76367]))
        (511755 yield yret[511750])
        (476325 'end of statement' i[76367])
        unknown call_tmp[625451] "expr temp" "maybe param" "maybe type" "temp"
        (625454 'move' call_tmp[625451](76430 call == i[76367] end[76399]))
        unknown call_tmp[625456] "expr temp" "maybe param" "maybe type" "temp"
        (625459 'move' call_tmp[625456](76435 call _cond_test call_tmp[625451]))
        if call_tmp[625456]
        {
          break _breakLabel[76458] _breakLabel[76458]
        }
      }
      label _continueLabel[76457]
      {
        (76442 '=' i[76367] start[76375])
        (476327 'end of statement' i[76367] start[76375])
      }
      {
        unknown call_tmp[625463] "expr temp" "maybe param" "maybe type" "temp"
        (625466 'move' call_tmp[625463](375765 call high _mt[243] this[76338]))
        unknown call_tmp[625470] "expr temp" "maybe param" "maybe type" "temp"
        (625473 'move' call_tmp[625470](375769 call low _mt[243] this[76338]))
        (76445 '>=' call_tmp[625463] call_tmp[625470])
      }
      {
        unknown call_tmp[625477] "expr temp" "maybe param" "maybe type" "temp"
        (625480 'move' call_tmp[625477](375774 call intIdxType _mt[243] this[76338]))
        unknown call_tmp[625484] "expr temp" "maybe param" "maybe type" "temp"
        (625487 'move' call_tmp[625484](375778 call stride _mt[243] this[76338]))
        unknown call_tmp[625489] "expr temp" "maybe param" "maybe type" "temp"
        (625492 'move' call_tmp[625489](76451 call _cast call_tmp[625477] call_tmp[625484]))
        (76448 '+=' i[76367] call_tmp[625489])
        (476331 'end of statement' i[76367])
      }
    }
    label _breakLabel[76458]
    (511748 return ret[511746])
  }
  function range[64319](?).these[76470](arg _mt[76475]:_MT[238], arg this[76472]:range[64319](?) :
  range[64319](?), param arg tag[76467]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511759] "RVV" "temp"
    unknown call_tmp[625494] "expr temp" "maybe param" "maybe type" "temp"
    (625497 'move' call_tmp[625494](76492 call isBoundedRange this[76472]))
    unknown call_tmp[625499] "expr temp" "maybe param" "maybe type" "temp"
    (625502 'move' call_tmp[625499](76493 call ! call_tmp[625494]))
    unknown call_tmp[625504] "expr temp" "maybe param" "maybe type" "temp"
    (625507 'move' call_tmp[625504](76517 call _cond_test call_tmp[625499]))
    if call_tmp[625504]
    {
      (76514 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420884] "maybe param" "temp"
    (420895 'move' tmp[420884] 1)
    unknown call_tmp[625509] "expr temp" "maybe param" "maybe type" "temp"
    (625512 'move' call_tmp[625509](420897 call _cond_invalid tmp[420884]))
    if call_tmp[625509]
    {
      (420900 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558619] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558620] "maybe param" "temp"
    unknown call_tmp[625514] "expr temp" "maybe param" "maybe type" "temp"
    (625517 'move' call_tmp[625514](420885 call isTrue tmp[420884]))
    (558625 'move' tmp[558620](558623 call _cond_test call_tmp[625514]))
    if tmp[558620]
    {
      unknown tmp[558627] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625521] "expr temp" "maybe param" "maybe type" "temp"
      (625524 'move' call_tmp[625521](76528 call(76524 call (partial) isAmbiguous _mt[243] this[76472])))
      (558629 'move' tmp[558627](420888 call isTrue call_tmp[625521]))
      (558634 'move' tmp[558619](558631 '_paramFoldLogical' tmp[558620] tmp[558627]))
    }
    {
      (558639 'move' tmp[558619](558636 '_paramFoldLogical' tmp[558620] 0))
    }
    unknown call_tmp[625526] "expr temp" "maybe param" "maybe type" "temp"
    (625529 'move' call_tmp[625526](76540 call _cond_test tmp[558619]))
    if call_tmp[625526]
    {
      (76537 call boundsCheckHalt module=[255] HaltWrappers[210085] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358119 'referenced modules list' HaltWrappers[210085])
    }
    unknown call_tmp[625531] "expr temp" "maybe param" "maybe type" "temp"
    (625534 'move' call_tmp[625531](76567 call _cond_test debugChapelRange[64198]))
    if call_tmp[625531]
    {
      (76564 call chpl_debug_writeln "*** In range standalone iterator:")
    }
    unknown call_tmp[625538] "maybe param" "maybe type" "temp"
    (625541 'move' call_tmp[625538](76572 call size _mt[243] this[76472]))
    const len[76575] "dead at end of block" "const" "insert auto destroy"
    (541424 'init var' len[76575] call_tmp[625538])
    (76578 'end of statement')
    const numChunks[76606] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558646] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558647] "maybe param" "temp"
    unknown call_tmp[625543] "expr temp" "maybe param" "maybe type" "temp"
    (625546 'move' call_tmp[625543](76597 'task_get_serial'))
    (558652 'move' tmp[558647](558650 call _cond_test call_tmp[625543]))
    if tmp[558647]
    {
      (558657 'move' tmp[558646](558654 '_paramFoldLogical' tmp[558647] 1))
    }
    {
      unknown tmp[558659] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558661 'move' tmp[558659](76602 call _computeNumChunks len[76575]))
      (558666 'move' tmp[558646](558663 '_paramFoldLogical' tmp[558647] tmp[558659]))
    }
    (541426 'init var' numChunks[76606] tmp[558646])
    (76609 'end of statement' len[76575])
    unknown call_tmp[625548] "expr temp" "maybe param" "maybe type" "temp"
    (625551 'move' call_tmp[625548](76652 call _cond_test debugChapelRange[64198]))
    if call_tmp[625548]
    {
      (76649 call chpl_debug_writeln "*** RI: length=" len[76575] " numChunks=" numChunks[76606])
      (476338 'end of statement' len[76575] numChunks[76606])
    }
    unknown call_tmp[625553] "expr temp" "maybe param" "maybe type" "temp"
    (625556 'move' call_tmp[625553](76658 call <= numChunks[76606] 1))
    unknown call_tmp[625558] "expr temp" "maybe param" "maybe type" "temp"
    (625561 'move' call_tmp[625558](77307 call _cond_test call_tmp[625553]))
    if call_tmp[625558]
    {
      {
        unknown _indexOfInterest[76666] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76667] "expr temp" "temp"
        (76676 'move' _iterator[76667](76674 call _getIterator this[76472]))
        Defer
        {
          {
            (76692 call _freeIterator _iterator[76667])
          }
        }
        { scopeless type
          (76681 'move' _indexOfInterest[76666](76678 call iteratorIndex _iterator[76667]))
        }
        ForLoop[76668]
        {
          unknown i[76685] "index var" "insert auto destroy"
          (476342 'end of statement')
          (76687 'move' i[76685] _indexOfInterest[76666])
          (476343 'end of statement' i[76685])
          {
            unknown yret[511763] "YVV" "temp"
            (511766 'move' yret[511763](511765 'deref' i[76685]))
            (511768 yield yret[511763])
            (476345 'end of statement' i[76685])
          }
          label _continueLabel[76671]
          _indexOfInterest[76666]
          _iterator[76667]
        }
        label _breakLabel[76672]
      }
    }
    {
      {
        unknown tmpIter[76942] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[625563] "expr temp" "maybe param" "maybe type" "temp"
        (625566 'move' call_tmp[625563](76702 call chpl_build_low_bounded_range 0))
        (76945 'move' tmpIter[76942](76705 call # call_tmp[625563] numChunks[76606]))
        unknown isRngDomArr[77287] "maybe param" "temp"
        unknown tmp[420905] "maybe param" "temp"
        (420916 'move' tmp[420905](77289 call isBoundedRange tmpIter[76942]))
        unknown call_tmp[625568] "expr temp" "maybe param" "maybe type" "temp"
        (625571 'move' call_tmp[625568](420918 call _cond_invalid tmp[420905]))
        if call_tmp[625568]
        {
          (420921 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[558700] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558701] "maybe param" "temp"
        unknown call_tmp[625573] "expr temp" "maybe param" "maybe type" "temp"
        (625576 'move' call_tmp[625573](420906 call isTrue tmp[420905]))
        (558706 'move' tmp[558701](558704 call _cond_test call_tmp[625573]))
        if tmp[558701]
        {
          (558711 'move' tmp[558700](558708 '_paramFoldLogical' tmp[558701] 1))
        }
        {
          unknown tmp[420926] "maybe param" "temp"
          (420937 'move' tmp[420926](77292 call isDomain tmpIter[76942]))
          unknown call_tmp[625578] "expr temp" "maybe param" "maybe type" "temp"
          (625581 'move' call_tmp[625578](420939 call _cond_invalid tmp[420926]))
          if call_tmp[625578]
          {
            (420942 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558673] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558674] "maybe param" "temp"
          unknown call_tmp[625583] "expr temp" "maybe param" "maybe type" "temp"
          (625586 'move' call_tmp[625583](420927 call isTrue tmp[420926]))
          (558679 'move' tmp[558674](558677 call _cond_test call_tmp[625583]))
          if tmp[558674]
          {
            (558684 'move' tmp[558673](558681 '_paramFoldLogical' tmp[558674] 1))
          }
          {
            unknown tmp[558686] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[625588] "expr temp" "maybe param" "maybe type" "temp"
            (625591 'move' call_tmp[625588](77295 call isArray tmpIter[76942]))
            (558688 'move' tmp[558686](420931 call isTrue call_tmp[625588]))
            (558693 'move' tmp[558673](558690 '_paramFoldLogical' tmp[558674] tmp[558686]))
          }
          unknown tmp[558713] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (558715 'move' tmp[558713](420910 call isTrue tmp[558673]))
          (558720 'move' tmp[558700](558717 '_paramFoldLogical' tmp[558701] tmp[558713]))
        }
        (77302 'move' isRngDomArr[77287] tmp[558700])
        if isRngDomArr[77287]
        {
          const _coforallCount[77154] "const" "end count" "temp"
          (77223 'move' _coforallCount[77154](77220 call _endCountAlloc 1))
          unknown numTasks[77155] "temp"
          (77207 'move' numTasks[77155](77203 call size _mt[243] tmpIter[76942]))
          (77198 call _upEndCount _coforallCount[77154] 1 numTasks[77155])
          (476348 'end of statement')
          (77195 call chpl_resetTaskSpawn numTasks[77155])
          (476349 'end of statement')
          unknown _indexOfInterest[77162] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77163] "expr temp" "temp"
          (77172 'move' _iterator[77163](77170 call _getIterator tmpIter[76942]))
          Defer
          {
            {
              (77188 call _freeIterator _iterator[77163])
            }
          }
          { scopeless type
            (77177 'move' _indexOfInterest[77162](77174 call iteratorIndex _iterator[77163]))
          }
          ForLoop[77164]
          {
            unknown chunk[77181] "coforall index var" "index var" "insert auto destroy"
            (476351 'end of statement')
            (77183 'move' chunk[77181] _indexOfInterest[77162])
            (476352 'end of statement' chunk[77181])
            (934345 call coforall_fn[934343] len[76575] numChunks[76606])
            function coforall_fn[934343](arg len[934350], arg numChunks[934353]) : void[4] "cobegin or coforall"
            {
              {
                unknown call_tmp[625597] "expr temp" "maybe param" "maybe type" "temp"
                (625600 'move' call_tmp[625597](375854 call stridable _mt[243] this[76472]))
                unknown call_tmp[625602] "expr temp" "maybe param" "maybe type" "temp"
                (625605 'move' call_tmp[625602](76949 call _cond_test call_tmp[625597]))
                if call_tmp[625602]
                {
                  unknown call_tmp[625607] "expr temp" "maybe param" "maybe type" "temp"
                  (625610 'move' call_tmp[625607](76960 call - len[934350] 1))
                  unknown call_tmp[625612] "maybe param" "maybe type" "temp"
                  (625615 'move' call_tmp[625612](76955 call _computeBlock len[934350] numChunks[934353] chunk[77181] call_tmp[625607]))
                  const tmp[76953] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541428 'init var' tmp[76953] call_tmp[625612])
                  (76965 call _check_tuple_var_decl tmp[76953] 2)
                  (476354 'end of statement')
                  unknown call_tmp[625617] "maybe param" "maybe type" "temp"
                  (625620 'move' call_tmp[625617](76970 call tmp[76953] 0))
                  const lo[76968] "dead at end of block" "const" "insert auto destroy"
                  (541430 'init var' lo[76968] call_tmp[625617])
                  unknown call_tmp[625622] "maybe param" "maybe type" "temp"
                  (625625 'move' call_tmp[625622](76975 call tmp[76953] 1))
                  const hi[76973] "dead at end of block" "const" "insert auto destroy"
                  (541432 'init var' hi[76973] call_tmp[625622])
                  (76978 'end of statement')
                  unknown call_tmp[625627] "expr temp" "maybe param" "maybe type" "temp"
                  (625630 'move' call_tmp[625627](76985 call - lo[76968] 1))
                  unknown call_tmp[625632] "maybe param" "maybe type" "temp"
                  (625635 'move' call_tmp[625632](76982 call - hi[76973] call_tmp[625627]))
                  const mylen[76980] "dead at end of block" "const" "insert auto destroy"
                  (541434 'init var' mylen[76980] call_tmp[625632])
                  (76989 'end of statement')
                  unknown call_tmp[625639] "maybe param" "maybe type" "temp"
                  (625642 'move' call_tmp[625639](76993 call(375864 call (partial) orderToIndex _mt[243] this[76472]) lo[76968]))
                  unknown low[76991] "dead at end of block" "insert auto destroy"
                  (541436 'init var' low[76991] call_tmp[625639])
                  (76996 'end of statement')
                  unknown call_tmp[625648] "expr temp" "maybe param" "maybe type" "temp"
                  (625651 'move' call_tmp[625648](375873 call strType _mt[243] this[76472]))
                  unknown call_tmp[625653] "expr temp" "maybe param" "maybe type" "temp"
                  (625656 'move' call_tmp[625653](77007 call chpl__idxToInt low[76991]))
                  unknown call_tmp[625658] "expr temp" "maybe param" "maybe type" "temp"
                  (625661 'move' call_tmp[625658](77004 call _cast call_tmp[625648] call_tmp[625653]))
                  unknown call_tmp[625665] "expr temp" "maybe param" "maybe type" "temp"
                  (625668 'move' call_tmp[625665](375878 call stride _mt[243] this[76472]))
                  unknown call_tmp[625672] "expr temp" "maybe param" "maybe type" "temp"
                  (625675 'move' call_tmp[625672](375882 call strType _mt[243] this[76472]))
                  unknown call_tmp[625677] "expr temp" "maybe param" "maybe type" "temp"
                  (625680 'move' call_tmp[625677](77016 call - mylen[76980] 1))
                  unknown call_tmp[625682] "expr temp" "maybe param" "maybe type" "temp"
                  (625685 'move' call_tmp[625682](77013 call _cast call_tmp[625672] call_tmp[625677]))
                  unknown call_tmp[625687] "expr temp" "maybe param" "maybe type" "temp"
                  (625690 'move' call_tmp[625687](77010 call * call_tmp[625665] call_tmp[625682]))
                  unknown call_tmp[625692] "expr temp" "maybe param" "maybe type" "temp"
                  (625695 'move' call_tmp[625692](77002 call + call_tmp[625658] call_tmp[625687]))
                  unknown call_tmp[625697] "maybe param" "maybe type" "temp"
                  (625700 'move' call_tmp[625697](77000 call(375869 call (partial) chpl_intToIdx _mt[243] this[76472]) call_tmp[625692]))
                  unknown high[76998] "dead at end of block" "insert auto destroy"
                  (541438 'init var' high[76998] call_tmp[625697])
                  (77020 'end of statement' hi[76973] lo[76968] lo[76968] low[76991] mylen[76980])
                  unknown call_tmp[625704] "expr temp" "maybe param" "maybe type" "temp"
                  (625707 'move' call_tmp[625704](375887 call stride _mt[243] this[76472]))
                  unknown call_tmp[625709] "expr temp" "maybe param" "maybe type" "temp"
                  (625712 'move' call_tmp[625709](77024 call < call_tmp[625704] 0))
                  unknown call_tmp[625714] "expr temp" "maybe param" "maybe type" "temp"
                  (625717 'move' call_tmp[625714](77022 call _cond_test call_tmp[625709]))
                  if call_tmp[625714]
                  {
                    (77030 call <=> low[76991] high[76998])
                    (476360 'end of statement' low[76991] high[76998])
                  }
                  {
                    unknown _indexOfInterest[77035] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77037] "expr temp" "temp"
                    unknown call_tmp[625721] "expr temp" "maybe param" "maybe type" "temp"
                    (625724 'move' call_tmp[625721](375895 call stride _mt[243] this[76472]))
                    unknown call_tmp[625726] "expr temp" "maybe param" "maybe type" "temp"
                    (625729 'move' call_tmp[625726](77044 call chpl_direct_range_iter low[76991] high[76998] call_tmp[625721]))
                    (77039 'move' _iterator[77037](77042 call _getIterator call_tmp[625726]))
                    Defer
                    {
                      {
                        (77050 call _freeIterator _iterator[77037])
                      }
                    }
                    { scopeless type
                      (77054 'move' _indexOfInterest[77035](77057 call iteratorIndex _iterator[77037]))
                    }
                    ForLoop[77059]
                    {
                      unknown i[77062] "index var" "insert auto destroy"
                      (476364 'end of statement')
                      (77064 'move' i[77062] _indexOfInterest[77035])
                      (476365 'end of statement' i[77062])
                      {
                        unknown yret[511770] "YVV" "temp"
                        (511773 'move' yret[511770](511772 'deref' i[77062]))
                        (511775 yield yret[511770])
                        (476367 'end of statement' i[77062])
                      }
                      label _continueLabel[77070]
                      _indexOfInterest[77035]
                      _iterator[77037]
                    }
                    label _breakLabel[77072]
                  }
                }
                {
                  unknown call_tmp[625733] "expr temp" "maybe param" "maybe type" "temp"
                  (625736 'move' call_tmp[625733](77083 call _high _mt[243] this[76472]))
                  unknown call_tmp[625740] "expr temp" "maybe param" "maybe type" "temp"
                  (625743 'move' call_tmp[625740](77087 call _low _mt[243] this[76472]))
                  unknown call_tmp[625747] "expr temp" "maybe param" "maybe type" "temp"
                  (625750 'move' call_tmp[625747](77091 call _low _mt[243] this[76472]))
                  unknown call_tmp[625752] "maybe param" "maybe type" "temp"
                  (625755 'move' call_tmp[625752](77078 call _computeBlock len[934350] numChunks[934353] chunk[77181] call_tmp[625733] call_tmp[625740] call_tmp[625747]))
                  const tmp[77076] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541440 'init var' tmp[77076] call_tmp[625752])
                  (77096 call _check_tuple_var_decl tmp[77076] 2)
                  (476369 'end of statement')
                  unknown call_tmp[625757] "maybe param" "maybe type" "temp"
                  (625760 'move' call_tmp[625757](77101 call tmp[77076] 0))
                  const lo[77099] "dead at end of block" "const" "insert auto destroy"
                  (541442 'init var' lo[77099] call_tmp[625757])
                  unknown call_tmp[625762] "maybe param" "maybe type" "temp"
                  (625765 'move' call_tmp[625762](77106 call tmp[77076] 1))
                  const hi[77104] "dead at end of block" "const" "insert auto destroy"
                  (541444 'init var' hi[77104] call_tmp[625762])
                  (77109 'end of statement')
                  {
                    unknown _indexOfInterest[77111] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77113] "expr temp" "temp"
                    unknown call_tmp[625767] "expr temp" "maybe param" "maybe type" "temp"
                    (625770 'move' call_tmp[625767](77120 call chpl_direct_range_iter lo[77099] hi[77104] 1))
                    (77115 'move' _iterator[77113](77118 call _getIterator call_tmp[625767]))
                    Defer
                    {
                      {
                        (77126 call _freeIterator _iterator[77113])
                      }
                    }
                    { scopeless type
                      (77130 'move' _indexOfInterest[77111](77133 call iteratorIndex _iterator[77113]))
                    }
                    ForLoop[77135]
                    {
                      unknown i[77138] "index var" "insert auto destroy"
                      (476371 'end of statement')
                      (77140 'move' i[77138] _indexOfInterest[77111])
                      (476372 'end of statement' i[77138])
                      {
                        unknown yret[511777] "YVV" "temp"
                        unknown call_tmp[625774] "expr temp" "maybe param" "maybe type" "temp"
                        (625777 'move' call_tmp[625774](77146 call(375905 call (partial) chpl_intToIdx _mt[243] this[76472]) i[77138]))
                        (511780 'move' yret[511777](511779 'deref' call_tmp[625774]))
                        (511782 yield yret[511777])
                        (476374 'end of statement' i[77138])
                      }
                      label _continueLabel[77148]
                      _indexOfInterest[77111]
                      _iterator[77113]
                    }
                    label _breakLabel[77150]
                  }
                }
              }
              (77157 call _downEndCount _coforallCount[77154] nil[44])
              (934348 return _void[55])
            }
            {
            }
            label _continueLabel[77167]
            _indexOfInterest[77162]
            _iterator[77163]
          }
          label _breakLabel[77168]
          Defer
          {
            {
              (77210 call _endCountFree _coforallCount[77154])
            }
          }
          (77215 call _waitEndCount _coforallCount[77154] 1 numTasks[77155])
        }
        {
          const _coforallCount[77227] "const" "end count" "temp"
          (77284 'move' _coforallCount[77227](77281 call _endCountAlloc 1))
          unknown _indexOfInterest[77235] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77236] "expr temp" "temp"
          (77245 'move' _iterator[77236](77243 call _getIterator tmpIter[76942]))
          Defer
          {
            {
              (77261 call _freeIterator _iterator[77236])
            }
          }
          { scopeless type
            (77250 'move' _indexOfInterest[77235](77247 call iteratorIndex _iterator[77236]))
          }
          ForLoop[77237]
          {
            unknown chunk[77254] "coforall index var" "index var" "insert auto destroy"
            (476380 'end of statement')
            (77256 'move' chunk[77254] _indexOfInterest[77235])
            (476381 'end of statement' chunk[77254])
            (77268 call _upEndCount _coforallCount[77227] 1)
            (476383 'end of statement')
            (934358 call coforall_fn[934356] len[76575] numChunks[76606])
            function coforall_fn[934356](arg len[934363], arg numChunks[934366]) : void[4] "cobegin or coforall"
            {
              {
                unknown call_tmp[625781] "expr temp" "maybe param" "maybe type" "temp"
                (625784 'move' call_tmp[625781](375797 call stridable _mt[243] this[76472]))
                unknown call_tmp[625786] "expr temp" "maybe param" "maybe type" "temp"
                (625789 'move' call_tmp[625786](76937 call _cond_test call_tmp[625781]))
                if call_tmp[625786]
                {
                  unknown call_tmp[625791] "expr temp" "maybe param" "maybe type" "temp"
                  (625794 'move' call_tmp[625791](76720 call - len[934363] 1))
                  unknown call_tmp[625796] "maybe param" "maybe type" "temp"
                  (625799 'move' call_tmp[625796](76722 call _computeBlock len[934363] numChunks[934366] chunk[77254] call_tmp[625791]))
                  const tmp[76723] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541446 'init var' tmp[76723] call_tmp[625796])
                  (76730 call _check_tuple_var_decl tmp[76723] 2)
                  (476384 'end of statement')
                  unknown call_tmp[625801] "maybe param" "maybe type" "temp"
                  (625804 'move' call_tmp[625801](76724 call tmp[76723] 0))
                  const lo[76708] "dead at end of block" "const" "insert auto destroy"
                  (541448 'init var' lo[76708] call_tmp[625801])
                  unknown call_tmp[625806] "maybe param" "maybe type" "temp"
                  (625809 'move' call_tmp[625806](76727 call tmp[76723] 1))
                  const hi[76710] "dead at end of block" "const" "insert auto destroy"
                  (541450 'init var' hi[76710] call_tmp[625806])
                  (76735 'end of statement')
                  unknown call_tmp[625811] "expr temp" "maybe param" "maybe type" "temp"
                  (625814 'move' call_tmp[625811](76740 call - lo[76708] 1))
                  unknown call_tmp[625816] "maybe param" "maybe type" "temp"
                  (625819 'move' call_tmp[625816](76742 call - hi[76710] call_tmp[625811]))
                  const mylen[76744] "dead at end of block" "const" "insert auto destroy"
                  (541452 'init var' mylen[76744] call_tmp[625816])
                  (76747 'end of statement')
                  unknown call_tmp[625823] "maybe param" "maybe type" "temp"
                  (625826 'move' call_tmp[625823](76751 call(375807 call (partial) orderToIndex _mt[243] this[76472]) lo[76708]))
                  unknown low[76752] "dead at end of block" "insert auto destroy"
                  (541454 'init var' low[76752] call_tmp[625823])
                  (76755 'end of statement')
                  unknown call_tmp[625832] "expr temp" "maybe param" "maybe type" "temp"
                  (625835 'move' call_tmp[625832](375817 call strType _mt[243] this[76472]))
                  unknown call_tmp[625837] "expr temp" "maybe param" "maybe type" "temp"
                  (625840 'move' call_tmp[625837](76760 call chpl__idxToInt low[76752]))
                  unknown call_tmp[625842] "expr temp" "maybe param" "maybe type" "temp"
                  (625845 'move' call_tmp[625842](76762 call _cast call_tmp[625832] call_tmp[625837]))
                  unknown call_tmp[625849] "expr temp" "maybe param" "maybe type" "temp"
                  (625852 'move' call_tmp[625849](375821 call stride _mt[243] this[76472]))
                  unknown call_tmp[625856] "expr temp" "maybe param" "maybe type" "temp"
                  (625859 'move' call_tmp[625856](375826 call strType _mt[243] this[76472]))
                  unknown call_tmp[625861] "expr temp" "maybe param" "maybe type" "temp"
                  (625864 'move' call_tmp[625861](76767 call - mylen[76744] 1))
                  unknown call_tmp[625866] "expr temp" "maybe param" "maybe type" "temp"
                  (625869 'move' call_tmp[625866](76770 call _cast call_tmp[625856] call_tmp[625861]))
                  unknown call_tmp[625871] "expr temp" "maybe param" "maybe type" "temp"
                  (625874 'move' call_tmp[625871](76772 call * call_tmp[625849] call_tmp[625866]))
                  unknown call_tmp[625876] "expr temp" "maybe param" "maybe type" "temp"
                  (625879 'move' call_tmp[625876](76774 call + call_tmp[625842] call_tmp[625871]))
                  unknown call_tmp[625881] "maybe param" "maybe type" "temp"
                  (625884 'move' call_tmp[625881](76777 call(375812 call (partial) chpl_intToIdx _mt[243] this[76472]) call_tmp[625876]))
                  unknown high[76778] "dead at end of block" "insert auto destroy"
                  (541456 'init var' high[76778] call_tmp[625881])
                  (76781 'end of statement' hi[76710] lo[76708] lo[76708] low[76752] mylen[76744])
                  unknown call_tmp[625888] "expr temp" "maybe param" "maybe type" "temp"
                  (625891 'move' call_tmp[625888](375830 call stride _mt[243] this[76472]))
                  unknown call_tmp[625893] "expr temp" "maybe param" "maybe type" "temp"
                  (625896 'move' call_tmp[625893](76784 call < call_tmp[625888] 0))
                  unknown call_tmp[625898] "expr temp" "maybe param" "maybe type" "temp"
                  (625901 'move' call_tmp[625898](76791 call _cond_test call_tmp[625893]))
                  if call_tmp[625898]
                  {
                    (76788 call <=> low[76752] high[76778])
                    (476390 'end of statement' low[76752] high[76778])
                  }
                  {
                    unknown _indexOfInterest[76808] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76809] "expr temp" "temp"
                    unknown call_tmp[625905] "expr temp" "maybe param" "maybe type" "temp"
                    (625908 'move' call_tmp[625905](375837 call stride _mt[243] this[76472]))
                    unknown call_tmp[625910] "expr temp" "maybe param" "maybe type" "temp"
                    (625913 'move' call_tmp[625910](76827 call chpl_direct_range_iter low[76752] high[76778] call_tmp[625905]))
                    (76818 'move' _iterator[76809](76816 call _getIterator call_tmp[625910]))
                    Defer
                    {
                      {
                        (76843 call _freeIterator _iterator[76809])
                      }
                    }
                    { scopeless type
                      (76832 'move' _indexOfInterest[76808](76829 call iteratorIndex _iterator[76809]))
                    }
                    ForLoop[76810]
                    {
                      unknown i[76836] "index var" "insert auto destroy"
                      (476394 'end of statement')
                      (76838 'move' i[76836] _indexOfInterest[76808])
                      (476395 'end of statement' i[76836])
                      {
                        unknown yret[511784] "YVV" "temp"
                        (511787 'move' yret[511784](511786 'deref' i[76836]))
                        (511789 yield yret[511784])
                        (476397 'end of statement' i[76836])
                      }
                      label _continueLabel[76813]
                      _indexOfInterest[76808]
                      _iterator[76809]
                    }
                    label _breakLabel[76814]
                  }
                }
                {
                  unknown call_tmp[625917] "expr temp" "maybe param" "maybe type" "temp"
                  (625920 'move' call_tmp[625917](76861 call _high _mt[243] this[76472]))
                  unknown call_tmp[625924] "expr temp" "maybe param" "maybe type" "temp"
                  (625927 'move' call_tmp[625924](76865 call _low _mt[243] this[76472]))
                  unknown call_tmp[625931] "expr temp" "maybe param" "maybe type" "temp"
                  (625934 'move' call_tmp[625931](76869 call _low _mt[243] this[76472]))
                  unknown call_tmp[625936] "maybe param" "maybe type" "temp"
                  (625939 'move' call_tmp[625936](76872 call _computeBlock len[934363] numChunks[934366] chunk[77254] call_tmp[625917] call_tmp[625924] call_tmp[625931]))
                  const tmp[76873] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541458 'init var' tmp[76873] call_tmp[625936])
                  (76880 call _check_tuple_var_decl tmp[76873] 2)
                  (476399 'end of statement')
                  unknown call_tmp[625941] "maybe param" "maybe type" "temp"
                  (625944 'move' call_tmp[625941](76874 call tmp[76873] 0))
                  const lo[76850] "dead at end of block" "const" "insert auto destroy"
                  (541460 'init var' lo[76850] call_tmp[625941])
                  unknown call_tmp[625946] "maybe param" "maybe type" "temp"
                  (625949 'move' call_tmp[625946](76877 call tmp[76873] 1))
                  const hi[76852] "dead at end of block" "const" "insert auto destroy"
                  (541462 'init var' hi[76852] call_tmp[625946])
                  (76885 'end of statement')
                  {
                    unknown _indexOfInterest[76899] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76900] "expr temp" "temp"
                    unknown call_tmp[625951] "expr temp" "maybe param" "maybe type" "temp"
                    (625954 'move' call_tmp[625951](76914 call chpl_direct_range_iter lo[76850] hi[76852] 1))
                    (76909 'move' _iterator[76900](76907 call _getIterator call_tmp[625951]))
                    Defer
                    {
                      {
                        (76930 call _freeIterator _iterator[76900])
                      }
                    }
                    { scopeless type
                      (76919 'move' _indexOfInterest[76899](76916 call iteratorIndex _iterator[76900]))
                    }
                    ForLoop[76901]
                    {
                      unknown i[76923] "index var" "insert auto destroy"
                      (476401 'end of statement')
                      (76925 'move' i[76923] _indexOfInterest[76899])
                      (476402 'end of statement' i[76923])
                      {
                        unknown yret[511791] "YVV" "temp"
                        unknown call_tmp[625958] "expr temp" "maybe param" "maybe type" "temp"
                        (625961 'move' call_tmp[625958](76895 call(375846 call (partial) chpl_intToIdx _mt[243] this[76472]) i[76923]))
                        (511794 'move' yret[511791](511793 'deref' call_tmp[625958]))
                        (511796 yield yret[511791])
                        (476404 'end of statement' i[76923])
                      }
                      label _continueLabel[76904]
                      _indexOfInterest[76899]
                      _iterator[76900]
                    }
                    label _breakLabel[76905]
                  }
                }
              }
              (77230 call _downEndCount _coforallCount[77227] nil[44])
              (934361 return _void[55])
            }
            {
            }
            label _continueLabel[77240]
            _indexOfInterest[77235]
            _iterator[77236]
          }
          label _breakLabel[77241]
          Defer
          {
            {
              (77272 call _endCountFree _coforallCount[77227])
            }
          }
          (77277 call _waitEndCount _coforallCount[77227] 1)
        }
      }
    }
    (511761 return ret[511759])
  }
  where {
    unknown tmp[420863] "maybe param" "temp"
    (420874 'move' tmp[420863](76482 call == tag[76467] standalone[451]))
    unknown call_tmp[625963] "expr temp" "maybe param" "maybe type" "temp"
    (625966 'move' call_tmp[625963](420876 call _cond_invalid tmp[420863]))
    if call_tmp[625963]
    {
      (420879 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558727] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558728] "maybe param" "temp"
    unknown call_tmp[625968] "expr temp" "maybe param" "maybe type" "temp"
    (625971 'move' call_tmp[625968](420864 call isTrue tmp[420863]))
    (558733 'move' tmp[558728](558731 call _cond_test call_tmp[625968]))
    if tmp[558728]
    {
      unknown tmp[558735] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625973] "expr temp" "maybe param" "maybe type" "temp"
      (625976 'move' call_tmp[625973](76485 call ! localeModelHasSublocales[187449]))
      (558737 'move' tmp[558735](420867 call isTrue call_tmp[625973]))
      (558742 'move' tmp[558727](558739 '_paramFoldLogical' tmp[558728] tmp[558735]))
    }
    {
      (558747 'move' tmp[558727](558744 '_paramFoldLogical' tmp[558728] 0))
    }
    (748439 call chpl_statementLevelSymbol tmp[558727])
  }
  function range[64319](?).these[77321](arg _mt[77326]:_MT[238], arg this[77323]:range[64319](?) :
  range[64319](?), param arg tag[77318]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511800] "RVV" "temp"
    unknown call_tmp[625978] "expr temp" "maybe param" "maybe type" "temp"
    (625981 'move' call_tmp[625978](77338 call isBoundedRange this[77323]))
    unknown call_tmp[625983] "expr temp" "maybe param" "maybe type" "temp"
    (625986 'move' call_tmp[625983](77339 call ! call_tmp[625978]))
    unknown call_tmp[625988] "expr temp" "maybe param" "maybe type" "temp"
    (625991 'move' call_tmp[625988](77346 call _cond_test call_tmp[625983]))
    if call_tmp[625988]
    {
      (77344 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420947] "maybe param" "temp"
    (420958 'move' tmp[420947] 1)
    unknown call_tmp[625993] "expr temp" "maybe param" "maybe type" "temp"
    (625996 'move' call_tmp[625993](420960 call _cond_invalid tmp[420947]))
    if call_tmp[625993]
    {
      (420963 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558754] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558755] "maybe param" "temp"
    unknown call_tmp[625998] "expr temp" "maybe param" "maybe type" "temp"
    (626001 'move' call_tmp[625998](420948 call isTrue tmp[420947]))
    (558760 'move' tmp[558755](558758 call _cond_test call_tmp[625998]))
    if tmp[558755]
    {
      unknown tmp[558762] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626005] "expr temp" "maybe param" "maybe type" "temp"
      (626008 'move' call_tmp[626005](77358 call(77354 call (partial) isAmbiguous _mt[243] this[77323])))
      (558764 'move' tmp[558762](420951 call isTrue call_tmp[626005]))
      (558769 'move' tmp[558754](558766 '_paramFoldLogical' tmp[558755] tmp[558762]))
    }
    {
      (558774 'move' tmp[558754](558771 '_paramFoldLogical' tmp[558755] 0))
    }
    unknown call_tmp[626010] "expr temp" "maybe param" "maybe type" "temp"
    (626013 'move' call_tmp[626010](77369 call _cond_test tmp[558754]))
    if call_tmp[626010]
    {
      (77367 call boundsCheckHalt module=[255] HaltWrappers[210085] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358134 'referenced modules list' HaltWrappers[210085])
    }
    unknown call_tmp[626015] "expr temp" "maybe param" "maybe type" "temp"
    (626018 'move' call_tmp[626015](77396 call _cond_test debugChapelRange[64198]))
    if call_tmp[626015]
    {
      (77394 call chpl_debug_writeln "*** In range leader:")
    }
    unknown call_tmp[626020] "expr temp" "maybe param" "maybe type" "temp"
    (626023 'move' call_tmp[626020](358139 call here[90438]))
    unknown call_tmp[626027] "maybe param" "maybe type" "temp"
    (626030 'move' call_tmp[626027](77408 call(77404 call (partial) getChildCount _mt[243] call_tmp[626020])))
    const numSublocs[77409] "dead at end of block" "const" "insert auto destroy"
    (541464 'init var' numSublocs[77409] call_tmp[626027])
    (77412 'end of statement')
    unknown tmp[421136] "maybe param" "temp"
    (421147 'move' tmp[421136] localeModelHasSublocales[187449])
    unknown call_tmp[626032] "expr temp" "maybe param" "maybe type" "temp"
    (626035 'move' call_tmp[626032](421149 call _cond_invalid tmp[421136]))
    if call_tmp[626032]
    {
      (421152 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558781] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558782] "maybe param" "temp"
    unknown call_tmp[626037] "expr temp" "maybe param" "maybe type" "temp"
    (626040 'move' call_tmp[626037](421137 call isTrue tmp[421136]))
    (558787 'move' tmp[558782](558785 call _cond_test call_tmp[626037]))
    if tmp[558782]
    {
      unknown tmp[558789] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626042] "expr temp" "maybe param" "maybe type" "temp"
      (626045 'move' call_tmp[626042](77416 call != numSublocs[77409] 0))
      (558791 'move' tmp[558789](421140 call isTrue call_tmp[626042]))
      (558796 'move' tmp[558781](558793 '_paramFoldLogical' tmp[558782] tmp[558789]))
    }
    {
      (558801 'move' tmp[558781](558798 '_paramFoldLogical' tmp[558782] 0))
    }
    unknown call_tmp[626047] "expr temp" "maybe param" "maybe type" "temp"
    (626050 'move' call_tmp[626047](79138 call _cond_test tmp[558781]))
    if call_tmp[626047]
    {
      unknown call_tmp[626054] "maybe param" "maybe type" "temp"
      (626057 'move' call_tmp[626054](77421 call size _mt[243] this[77323]))
      const len[77424] "dead at end of block" "const" "insert auto destroy"
      (541466 'init var' len[77424] call_tmp[626054])
      (77427 'end of statement')
      const tasksPerLocale[77430] "dead at end of block" "const" "insert auto destroy"
      (541468 'init var' tasksPerLocale[77430] dataParTasksPerLocale[93284])
      (77433 'end of statement')
      const ignoreRunning[77435] "dead at end of block" "const" "insert auto destroy"
      (541470 'init var' ignoreRunning[77435] dataParIgnoreRunningTasks[93290])
      (77438 'end of statement')
      const minIndicesPerTask[77440] "dead at end of block" "const" "insert auto destroy"
      (541472 'init var' minIndicesPerTask[77440] dataParMinGranularity[93296])
      (77443 'end of statement')
      unknown dptpl[77456] "dead at end of block" "insert auto destroy"
      unknown tmp[558808] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558809] "maybe param" "temp"
      unknown call_tmp[626059] "expr temp" "maybe param" "maybe type" "temp"
      (626062 'move' call_tmp[626059](77446 call == tasksPerLocale[77430] 0))
      (558814 'move' tmp[558809](558812 call _cond_test call_tmp[626059]))
      if tmp[558809]
      {
        unknown tmp[558816] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626064] "expr temp" "maybe param" "maybe type" "temp"
        (626067 'move' call_tmp[626064](358142 call here[90438]))
        (558818 'move' tmp[558816](77449 call maxTaskPar _mt[243] call_tmp[626064]))
        (558823 'move' tmp[558808](558820 '_paramFoldLogical' tmp[558809] tmp[558816]))
      }
      {
        (558828 'move' tmp[558808](558825 '_paramFoldLogical' tmp[558809] tasksPerLocale[77430]))
      }
      (541474 'init var' dptpl[77456] tmp[558808])
      (77459 'end of statement')
      unknown call_tmp[626071] "expr temp" "maybe param" "maybe type" "temp"
      (626074 'move' call_tmp[626071](77461 call ! ignoreRunning[77435]))
      unknown call_tmp[626076] "expr temp" "maybe param" "maybe type" "temp"
      (626079 'move' call_tmp[626076](77498 call _cond_test call_tmp[626071]))
      if call_tmp[626076]
      {
        unknown call_tmp[626081] "expr temp" "maybe param" "maybe type" "temp"
        (626084 'move' call_tmp[626081](358144 call here[90438]))
        unknown call_tmp[626088] "expr temp" "maybe param" "maybe type" "temp"
        (626091 'move' call_tmp[626088](77470 call(77466 call (partial) runningTasks _mt[243] call_tmp[626081])))
        unknown call_tmp[626093] "maybe param" "maybe type" "temp"
        (626096 'move' call_tmp[626093](77472 call - call_tmp[626088] 1))
        const otherTasks[77474] "dead at end of block" "const" "insert auto destroy"
        (541476 'init var' otherTasks[77474] call_tmp[626093])
        (77477 'end of statement')
        unknown tmp[558835] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558836] "maybe param" "temp"
        unknown call_tmp[626098] "expr temp" "maybe param" "maybe type" "temp"
        (626101 'move' call_tmp[626098](77482 call < otherTasks[77474] dptpl[77456]))
        (558841 'move' tmp[558836](558839 call _cond_test call_tmp[626098]))
        if tmp[558836]
        {
          unknown tmp[558843] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[626103] "expr temp" "maybe param" "maybe type" "temp"
          (626106 'move' call_tmp[626103](77486 call - dptpl[77456] otherTasks[77474]))
          (558845 'move' tmp[558843](77489 call _cast int(64)[13] call_tmp[626103]))
          (558850 'move' tmp[558835](558847 '_paramFoldLogical' tmp[558836] tmp[558843]))
        }
        {
          (558855 'move' tmp[558835](558852 '_paramFoldLogical' tmp[558836] 1))
        }
        (77495 call = dptpl[77456] tmp[558835])
        (476416 'end of statement' dptpl[77456] otherTasks[77474] dptpl[77456] dptpl[77456] otherTasks[77474])
      }
      unknown call_tmp[626108] "maybe param" "maybe type" "temp"
      (626111 'move' call_tmp[626108](77506 call min numSublocs[77409] dptpl[77456]))
      const numSublocTasks[77507] "dead at end of block" "const" "insert auto destroy"
      (541478 'init var' numSublocTasks[77507] call_tmp[626108])
      (77510 'end of statement')
      const numChunks[77526] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558862] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558863] "maybe param" "temp"
      unknown call_tmp[626113] "expr temp" "maybe param" "maybe type" "temp"
      (626116 'move' call_tmp[626113](77513 'task_get_serial'))
      (558868 'move' tmp[558863](558866 call _cond_test call_tmp[626113]))
      if tmp[558863]
      {
        (558873 'move' tmp[558862](558870 '_paramFoldLogical' tmp[558863] 1))
      }
      {
        unknown tmp[558875] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (558877 'move' tmp[558875](77522 call _computeNumChunks numSublocTasks[77507](ignoreRunning = 1) minIndicesPerTask[77440] len[77424]))
        (558882 'move' tmp[558862](558879 '_paramFoldLogical' tmp[558863] tmp[558875]))
      }
      (541480 'init var' numChunks[77526] tmp[558862])
      (77529 'end of statement' tasksPerLocale[77430] tasksPerLocale[77430] numSublocs[77409] dptpl[77456] numSublocTasks[77507] minIndicesPerTask[77440] len[77424])
      unknown call_tmp[626118] "expr temp" "maybe param" "maybe type" "temp"
      (626121 'move' call_tmp[626118](77646 call _cond_test debugDataParNuma[93410]))
      if call_tmp[626118]
      {
        (77643 call chpl_debug_writeln "### numSublocs = " numSublocs[77409] "\n" "### numTasksPerSubloc = " numSublocTasks[77507] "\n" "### ignoreRunning = " ignoreRunning[77435] "\n" "### minIndicesPerTask = " minIndicesPerTask[77440] "\n" "### numChunks = " numChunks[77526])
        (476427 'end of statement' numSublocs[77409] numSublocTasks[77507] ignoreRunning[77435] minIndicesPerTask[77440] numChunks[77526])
      }
      unknown call_tmp[626123] "expr temp" "maybe param" "maybe type" "temp"
      (626126 'move' call_tmp[626123](77652 call == numChunks[77526] 1))
      unknown call_tmp[626128] "expr temp" "maybe param" "maybe type" "temp"
      (626131 'move' call_tmp[626128](78751 call _cond_test call_tmp[626123]))
      if call_tmp[626128]
      {
        unknown yret[511804] "YVV" "temp"
        unknown call_tmp[626133] "expr temp" "maybe param" "maybe type" "temp"
        (626136 'move' call_tmp[626133](77657 call - len[77424] 1))
        unknown call_tmp[626138] "expr temp" "maybe param" "maybe type" "temp"
        (626141 'move' call_tmp[626138](77659 call chpl_build_bounded_range 0 call_tmp[626133]))
        unknown call_tmp[626143] "expr temp" "maybe param" "maybe type" "temp"
        (626146 'move' call_tmp[626143](77661 call _build_tuple call_tmp[626138]))
        (511807 'move' yret[511804](511806 'deref' call_tmp[626143]))
        (511809 yield yret[511804])
        (476433 'end of statement' len[77424])
      }
      {
        {
          unknown tmpIter[78210] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626148] "expr temp" "maybe param" "maybe type" "temp"
          (626151 'move' call_tmp[626148](77668 call chpl_build_low_bounded_range 0))
          (78213 'move' tmpIter[78210](77671 call # call_tmp[626148] numChunks[77526]))
          unknown isRngDomArr[78731] "maybe param" "temp"
          unknown tmp[421052] "maybe param" "temp"
          (421063 'move' tmp[421052](78733 call isBoundedRange tmpIter[78210]))
          unknown call_tmp[626153] "expr temp" "maybe param" "maybe type" "temp"
          (626156 'move' call_tmp[626153](421065 call _cond_invalid tmp[421052]))
          if call_tmp[626153]
          {
            (421068 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558916] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558917] "maybe param" "temp"
          unknown call_tmp[626158] "expr temp" "maybe param" "maybe type" "temp"
          (626161 'move' call_tmp[626158](421053 call isTrue tmp[421052]))
          (558922 'move' tmp[558917](558920 call _cond_test call_tmp[626158]))
          if tmp[558917]
          {
            (558927 'move' tmp[558916](558924 '_paramFoldLogical' tmp[558917] 1))
          }
          {
            unknown tmp[421073] "maybe param" "temp"
            (421084 'move' tmp[421073](78736 call isDomain tmpIter[78210]))
            unknown call_tmp[626163] "expr temp" "maybe param" "maybe type" "temp"
            (626166 'move' call_tmp[626163](421086 call _cond_invalid tmp[421073]))
            if call_tmp[626163]
            {
              (421089 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[558889] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[558890] "maybe param" "temp"
            unknown call_tmp[626168] "expr temp" "maybe param" "maybe type" "temp"
            (626171 'move' call_tmp[626168](421074 call isTrue tmp[421073]))
            (558895 'move' tmp[558890](558893 call _cond_test call_tmp[626168]))
            if tmp[558890]
            {
              (558900 'move' tmp[558889](558897 '_paramFoldLogical' tmp[558890] 1))
            }
            {
              unknown tmp[558902] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626173] "expr temp" "maybe param" "maybe type" "temp"
              (626176 'move' call_tmp[626173](78739 call isArray tmpIter[78210]))
              (558904 'move' tmp[558902](421078 call isTrue call_tmp[626173]))
              (558909 'move' tmp[558889](558906 '_paramFoldLogical' tmp[558890] tmp[558902]))
            }
            unknown tmp[558929] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (558931 'move' tmp[558929](421057 call isTrue tmp[558889]))
            (558936 'move' tmp[558916](558933 '_paramFoldLogical' tmp[558917] tmp[558929]))
          }
          (78746 'move' isRngDomArr[78731] tmp[558916])
          if isRngDomArr[78731]
          {
            const _coforallCount[78603] "const" "end count" "temp"
            (78668 'move' _coforallCount[78603](78665 call _endCountAlloc 0))
            unknown numTasks[78604] "temp"
            (78652 'move' numTasks[78604](78648 call size _mt[243] tmpIter[78210]))
            (78643 call _upEndCount _coforallCount[78603] 0 numTasks[78604])
            (476436 'end of statement')
            unknown _indexOfInterest[78610] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78611] "expr temp" "temp"
            (78620 'move' _iterator[78611](78618 call _getIterator tmpIter[78210]))
            Defer
            {
              {
                (78636 call _freeIterator _iterator[78611])
              }
            }
            { scopeless type
              (78625 'move' _indexOfInterest[78610](78622 call iteratorIndex _iterator[78611]))
            }
            ForLoop[78612]
            {
              unknown chunk[78629] "coforall index var" "index var" "insert auto destroy"
              (476438 'end of statement')
              (78631 'move' chunk[78629] _indexOfInterest[78610])
              (476439 'end of statement' chunk[78629])
              const tmp[78216] "const" "temp"
              unknown call_tmp[626180] "expr temp" "maybe param" "maybe type" "temp"
              (626183 'move' call_tmp[626180](358149 call here[90438]))
              unknown call_tmp[626187] "expr temp" "maybe param" "maybe type" "temp"
              (626190 'move' call_tmp[626187](78226 call(78223 call (partial) getChild _mt[243] call_tmp[626180]) chunk[78629]))
              unknown call_tmp[626192] "expr temp" "maybe param" "maybe type" "temp"
              (626195 'move' call_tmp[626192](78221 '_wide_get_locale' call_tmp[626187]))
              (78218 'move' tmp[78216](78220 'deref' call_tmp[626192]))
              val local_on_tmp[934459]:int(32)[95] "temp"
              (934464 'move' local_on_tmp[934459](934462 call chpl_nodeFromLocaleID tmp[78216]))
              if(934466 '!=' chpl_nodeID[287] local_on_tmp[934459])
              {
                (934468 'chpl_error' c"Local-on is not local")
              }
              (934474 call on_fn[934456] tmp[78216] len[77424] numChunks[77526] dptpl[77456] minIndicesPerTask[77440])
              function on_fn[934456](const in arg dummy_locale_arg[934472]:chpl_localeID_t[209352], arg len[934479], arg numChunks[934482], arg dptpl[934485], arg minIndicesPerTask[934488]) : void[4] "cobegin or coforall" "local on" "non blocking" "on"
              {
                {
                  unknown call_tmp[626197] "expr temp" "maybe param" "maybe type" "temp"
                  (626200 'move' call_tmp[626197](78234 call _cond_test debugDataParNuma[93410]))
                  if call_tmp[626197]
                  {
                    unknown call_tmp[626202] "expr temp" "maybe param" "maybe type" "temp"
                    (626205 'move' call_tmp[626202](78243 call chpl_getSubloc))
                    unknown call_tmp[626207] "expr temp" "maybe param" "maybe type" "temp"
                    (626210 'move' call_tmp[626207](78240 call != chunk[78629] call_tmp[626202]))
                    unknown call_tmp[626212] "expr temp" "maybe param" "maybe type" "temp"
                    (626215 'move' call_tmp[626212](78238 call _cond_test call_tmp[626207]))
                    if call_tmp[626212]
                    {
                      unknown call_tmp[626217] "expr temp" "maybe param" "maybe type" "temp"
                      (626220 'move' call_tmp[626217](78252 call chpl_getSubloc))
                      (78247 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78629] ", on " call_tmp[626217] ") ***")
                      (476441 'end of statement' chunk[78629])
                    }
                  }
                  unknown call_tmp[626222] "expr temp" "maybe param" "maybe type" "temp"
                  (626225 'move' call_tmp[626222](78264 call - len[934479] 1))
                  unknown call_tmp[626227] "maybe param" "maybe type" "temp"
                  (626230 'move' call_tmp[626227](78259 call _computeBlock len[934479] numChunks[934482] chunk[78629] call_tmp[626222]))
                  const tmp[78257] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541482 'init var' tmp[78257] call_tmp[626227])
                  (78269 call _check_tuple_var_decl tmp[78257] 2)
                  (476443 'end of statement')
                  unknown call_tmp[626232] "maybe param" "maybe type" "temp"
                  (626235 'move' call_tmp[626232](78274 call tmp[78257] 0))
                  const lo[78272] "dead at end of block" "const" "insert auto destroy"
                  (541484 'init var' lo[78272] call_tmp[626232])
                  unknown call_tmp[626237] "maybe param" "maybe type" "temp"
                  (626240 'move' call_tmp[626237](78279 call tmp[78257] 1))
                  const hi[78277] "dead at end of block" "const" "insert auto destroy"
                  (541486 'init var' hi[78277] call_tmp[626237])
                  (78282 'end of statement')
                  unknown call_tmp[626242] "maybe param" "maybe type" "temp"
                  (626245 'move' call_tmp[626242](78286 call chpl_build_bounded_range lo[78272] hi[78277]))
                  const locRange[78284] "dead at end of block" "const" "insert auto destroy"
                  (541488 'init var' locRange[78284] call_tmp[626242])
                  (78290 'end of statement')
                  unknown call_tmp[626249] "maybe param" "maybe type" "temp"
                  (626252 'move' call_tmp[626249](78294 call size _mt[243] locRange[78284]))
                  const locLen[78292] "dead at end of block" "const" "insert auto destroy"
                  (541490 'init var' locLen[78292] call_tmp[626249])
                  (78298 'end of statement')
                  const numSublocTasks[78300] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[558943] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[558944] "maybe param" "temp"
                  unknown call_tmp[626254] "expr temp" "maybe param" "maybe type" "temp"
                  (626257 'move' call_tmp[626254](78305 call % dptpl[934485] numChunks[934482]))
                  unknown call_tmp[626259] "expr temp" "maybe param" "maybe type" "temp"
                  (626262 'move' call_tmp[626259](78302 call < chunk[78629] call_tmp[626254]))
                  (558949 'move' tmp[558944](558947 call _cond_test call_tmp[626259]))
                  if tmp[558944]
                  {
                    unknown tmp[558951] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[626264] "expr temp" "maybe param" "maybe type" "temp"
                    (626267 'move' call_tmp[626264](78312 call / dptpl[934485] numChunks[934482]))
                    (558953 'move' tmp[558951](78310 call + call_tmp[626264] 1))
                    (558958 'move' tmp[558943](558955 '_paramFoldLogical' tmp[558944] tmp[558951]))
                  }
                  {
                    unknown tmp[558960] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (558962 'move' tmp[558960](78318 call / dptpl[934485] numChunks[934482]))
                    (558967 'move' tmp[558943](558964 '_paramFoldLogical' tmp[558944] tmp[558960]))
                  }
                  (541492 'init var' numSublocTasks[78300] tmp[558943])
                  (78323 'end of statement')
                  unknown call_tmp[626269] "maybe param" "maybe type" "temp"
                  (626272 'move' call_tmp[626269](78327 call _computeNumChunks numSublocTasks[78300](ignoreRunning = 1) minIndicesPerTask[934488] locLen[78292]))
                  const numTasks[78325] "dead at end of block" "const" "insert auto destroy"
                  (541494 'init var' numTasks[78325] call_tmp[626269])
                  (78334 'end of statement' lo[78272] hi[78277] locRange[78284] chunk[78629] dptpl[934485] numChunks[934482] dptpl[934485] numChunks[934482] dptpl[934485] numChunks[934482] numSublocTasks[78300] minIndicesPerTask[934488] locLen[78292])
                  {
                    unknown tmpIter[78336] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[626274] "expr temp" "maybe param" "maybe type" "temp"
                    (626277 'move' call_tmp[626274](78343 call chpl_build_low_bounded_range 0))
                    (78338 'move' tmpIter[78336](78341 call # call_tmp[626274] numTasks[78325]))
                    unknown isRngDomArr[78346] "maybe param" "temp"
                    unknown tmp[421010] "maybe param" "temp"
                    (421021 'move' tmp[421010](78353 call isBoundedRange tmpIter[78336]))
                    unknown call_tmp[626279] "expr temp" "maybe param" "maybe type" "temp"
                    (626282 'move' call_tmp[626279](421023 call _cond_invalid tmp[421010]))
                    if call_tmp[626279]
                    {
                      (421026 call compilerError "cannot promote short-circuiting || operator")
                    }
                    unknown tmp[559001] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[559002] "maybe param" "temp"
                    unknown call_tmp[626284] "expr temp" "maybe param" "maybe type" "temp"
                    (626287 'move' call_tmp[626284](421011 call isTrue tmp[421010]))
                    (559007 'move' tmp[559002](559005 call _cond_test call_tmp[626284]))
                    if tmp[559002]
                    {
                      (559012 'move' tmp[559001](559009 '_paramFoldLogical' tmp[559002] 1))
                    }
                    {
                      unknown tmp[421031] "maybe param" "temp"
                      (421042 'move' tmp[421031](78358 call isDomain tmpIter[78336]))
                      unknown call_tmp[626289] "expr temp" "maybe param" "maybe type" "temp"
                      (626292 'move' call_tmp[626289](421044 call _cond_invalid tmp[421031]))
                      if call_tmp[626289]
                      {
                        (421047 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[558974] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[558975] "maybe param" "temp"
                      unknown call_tmp[626294] "expr temp" "maybe param" "maybe type" "temp"
                      (626297 'move' call_tmp[626294](421032 call isTrue tmp[421031]))
                      (558980 'move' tmp[558975](558978 call _cond_test call_tmp[626294]))
                      if tmp[558975]
                      {
                        (558985 'move' tmp[558974](558982 '_paramFoldLogical' tmp[558975] 1))
                      }
                      {
                        unknown tmp[558987] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        unknown call_tmp[626299] "expr temp" "maybe param" "maybe type" "temp"
                        (626302 'move' call_tmp[626299](78361 call isArray tmpIter[78336]))
                        (558989 'move' tmp[558987](421036 call isTrue call_tmp[626299]))
                        (558994 'move' tmp[558974](558991 '_paramFoldLogical' tmp[558975] tmp[558987]))
                      }
                      unknown tmp[559014] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (559016 'move' tmp[559014](421015 call isTrue tmp[558974]))
                      (559021 'move' tmp[559001](559018 '_paramFoldLogical' tmp[559002] tmp[559014]))
                    }
                    (78348 'move' isRngDomArr[78346] tmp[559001])
                    if isRngDomArr[78346]
                    {
                      const _coforallCount[78365] "const" "end count" "temp"
                      (78367 'move' _coforallCount[78365](78370 call _endCountAlloc 1))
                      unknown numTasks[78372] "temp"
                      (78374 'move' numTasks[78372](78377 call size _mt[243] tmpIter[78336]))
                      (78381 call _upEndCount _coforallCount[78365] 1 numTasks[78372])
                      (476458 'end of statement')
                      (78386 call chpl_resetTaskSpawn numTasks[78372])
                      (476459 'end of statement')
                      unknown _indexOfInterest[78388] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78390] "expr temp" "temp"
                      (78392 'move' _iterator[78390](78395 call _getIterator tmpIter[78336]))
                      Defer
                      {
                        {
                          (78399 call _freeIterator _iterator[78390])
                        }
                      }
                      { scopeless type
                        (78403 'move' _indexOfInterest[78388](78406 call iteratorIndex _iterator[78390]))
                      }
                      ForLoop[78408]
                      {
                        unknown core[78411] "coforall index var" "index var" "insert auto destroy"
                        (476461 'end of statement')
                        (78413 'move' core[78411] _indexOfInterest[78388])
                        (476462 'end of statement' core[78411])
                        (934493 call coforall_fn[934491] numTasks[78325] hi[78277] chunk[78629] locLen[78292] locRange[78284] lo[78272])
                        function coforall_fn[934491](arg numTasks[934498], arg hi[934501], arg chunk[934504], arg locLen[934507], arg locRange[934510], arg lo[934513]) : void[4] "cobegin or coforall"
                        {
                          {
                            unknown call_tmp[626306] "maybe param" "maybe type" "temp"
                            (626309 'move' call_tmp[626306](78422 call _computeBlock locLen[934507] numTasks[934498] core[78411] hi[934501] lo[934513] lo[934513]))
                            const tmp[78420] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541496 'init var' tmp[78420] call_tmp[626306])
                            (78431 call _check_tuple_var_decl tmp[78420] 2)
                            (476464 'end of statement')
                            unknown call_tmp[626311] "maybe param" "maybe type" "temp"
                            (626314 'move' call_tmp[626311](78436 call tmp[78420] 0))
                            const low[78434] "dead at end of block" "const" "insert auto destroy"
                            (541498 'init var' low[78434] call_tmp[626311])
                            unknown call_tmp[626316] "maybe param" "maybe type" "temp"
                            (626319 'move' call_tmp[626316](78441 call tmp[78420] 1))
                            const high[78439] "dead at end of block" "const" "insert auto destroy"
                            (541500 'init var' high[78439] call_tmp[626316])
                            (78444 'end of statement')
                            unknown call_tmp[626321] "expr temp" "maybe param" "maybe type" "temp"
                            (626324 'move' call_tmp[626321](78446 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626321]
                            {
                              unknown call_tmp[626326] "expr temp" "maybe param" "maybe type" "temp"
                              (626329 'move' call_tmp[626326](78460 call chpl_build_bounded_range low[78434] high[78439]))
                              (78450 call chpl_debug_writeln "### chunk = " chunk[934504] "  core = " core[78411] "  " "locRange = " locRange[934510] "  coreRange = " call_tmp[626326])
                              (476465 'end of statement' chunk[934504] core[78411] locRange[934510] low[78434] high[78439])
                            }
                            unknown yret[511811] "YVV" "temp"
                            unknown call_tmp[626331] "expr temp" "maybe param" "maybe type" "temp"
                            (626334 'move' call_tmp[626331](78468 call chpl_build_bounded_range low[78434] high[78439]))
                            unknown call_tmp[626336] "expr temp" "maybe param" "maybe type" "temp"
                            (626339 'move' call_tmp[626336](78466 call _build_tuple call_tmp[626331]))
                            (511814 'move' yret[511811](511813 'deref' call_tmp[626336]))
                            (511816 yield yret[511811])
                            (476471 'end of statement' low[78434] high[78439])
                          }
                          (78472 call _downEndCount _coforallCount[78365] nil[44])
                          (934496 return _void[55])
                        }
                        {
                        }
                        label _continueLabel[78475]
                        _indexOfInterest[78388]
                        _iterator[78390]
                      }
                      label _breakLabel[78477]
                      Defer
                      {
                        {
                          (78481 call _endCountFree _coforallCount[78365])
                        }
                      }
                      (78485 call _waitEndCount _coforallCount[78365] 1 numTasks[78372])
                    }
                    {
                      const _coforallCount[78490] "const" "end count" "temp"
                      (78492 'move' _coforallCount[78490](78495 call _endCountAlloc 1))
                      unknown _indexOfInterest[78497] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78499] "expr temp" "temp"
                      (78501 'move' _iterator[78499](78504 call _getIterator tmpIter[78336]))
                      Defer
                      {
                        {
                          (78508 call _freeIterator _iterator[78499])
                        }
                      }
                      { scopeless type
                        (78512 'move' _indexOfInterest[78497](78515 call iteratorIndex _iterator[78499]))
                      }
                      ForLoop[78517]
                      {
                        unknown core[78520] "coforall index var" "index var" "insert auto destroy"
                        (476478 'end of statement')
                        (78522 'move' core[78520] _indexOfInterest[78497])
                        (476479 'end of statement' core[78520])
                        (78526 call _upEndCount _coforallCount[78490] 1)
                        (476481 'end of statement')
                        (934518 call coforall_fn[934516] numTasks[78325] hi[78277] chunk[78629] locLen[78292] locRange[78284] lo[78272])
                        function coforall_fn[934516](arg numTasks[934523], arg hi[934526], arg chunk[934529], arg locLen[934532], arg locRange[934535], arg lo[934538]) : void[4] "cobegin or coforall"
                        {
                          {
                            unknown call_tmp[626341] "maybe param" "maybe type" "temp"
                            (626344 'move' call_tmp[626341](78535 call _computeBlock locLen[934532] numTasks[934523] core[78520] hi[934526] lo[934538] lo[934538]))
                            const tmp[78533] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541502 'init var' tmp[78533] call_tmp[626341])
                            (78544 call _check_tuple_var_decl tmp[78533] 2)
                            (476482 'end of statement')
                            unknown call_tmp[626346] "maybe param" "maybe type" "temp"
                            (626349 'move' call_tmp[626346](78549 call tmp[78533] 0))
                            const low[78547] "dead at end of block" "const" "insert auto destroy"
                            (541504 'init var' low[78547] call_tmp[626346])
                            unknown call_tmp[626351] "maybe param" "maybe type" "temp"
                            (626354 'move' call_tmp[626351](78554 call tmp[78533] 1))
                            const high[78552] "dead at end of block" "const" "insert auto destroy"
                            (541506 'init var' high[78552] call_tmp[626351])
                            (78557 'end of statement')
                            unknown call_tmp[626356] "expr temp" "maybe param" "maybe type" "temp"
                            (626359 'move' call_tmp[626356](78559 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626356]
                            {
                              unknown call_tmp[626361] "expr temp" "maybe param" "maybe type" "temp"
                              (626364 'move' call_tmp[626361](78573 call chpl_build_bounded_range low[78547] high[78552]))
                              (78563 call chpl_debug_writeln "### chunk = " chunk[934529] "  core = " core[78520] "  " "locRange = " locRange[934535] "  coreRange = " call_tmp[626361])
                              (476483 'end of statement' chunk[934529] core[78520] locRange[934535] low[78547] high[78552])
                            }
                            unknown yret[511818] "YVV" "temp"
                            unknown call_tmp[626366] "expr temp" "maybe param" "maybe type" "temp"
                            (626369 'move' call_tmp[626366](78581 call chpl_build_bounded_range low[78547] high[78552]))
                            unknown call_tmp[626371] "expr temp" "maybe param" "maybe type" "temp"
                            (626374 'move' call_tmp[626371](78579 call _build_tuple call_tmp[626366]))
                            (511821 'move' yret[511818](511820 'deref' call_tmp[626371]))
                            (511823 yield yret[511818])
                            (476489 'end of statement' low[78547] high[78552])
                          }
                          (78585 call _downEndCount _coforallCount[78490] nil[44])
                          (934521 return _void[55])
                        }
                        {
                        }
                        label _continueLabel[78588]
                        _indexOfInterest[78497]
                        _iterator[78499]
                      }
                      label _breakLabel[78590]
                      Defer
                      {
                        {
                          (78594 call _endCountFree _coforallCount[78490])
                        }
                      }
                      (78598 call _waitEndCount _coforallCount[78490] 1)
                    }
                  }
                }
                (78605 call _downEndCount _coforallCount[78603] nil[44])
                (934477 return _void[55])
              }
              {
              }
              label _continueLabel[78615]
              _indexOfInterest[78610]
              _iterator[78611]
            }
            label _breakLabel[78616]
            Defer
            {
              {
                (78655 call _endCountFree _coforallCount[78603])
              }
            }
            (78660 call _waitEndCount _coforallCount[78603] 0 numTasks[78604])
          }
          {
            const _coforallCount[78672] "const" "end count" "temp"
            (78728 'move' _coforallCount[78672](78725 call _endCountAlloc 0))
            unknown _indexOfInterest[78679] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78680] "expr temp" "temp"
            (78689 'move' _iterator[78680](78687 call _getIterator tmpIter[78210]))
            Defer
            {
              {
                (78705 call _freeIterator _iterator[78680])
              }
            }
            { scopeless type
              (78694 'move' _indexOfInterest[78679](78691 call iteratorIndex _iterator[78680]))
            }
            ForLoop[78681]
            {
              unknown chunk[78698] "coforall index var" "index var" "insert auto destroy"
              (476499 'end of statement')
              (78700 'move' chunk[78698] _indexOfInterest[78679])
              (476500 'end of statement' chunk[78698])
              (78712 call _upEndCount _coforallCount[78672] 0)
              (476502 'end of statement')
              const tmp[78199] "const" "temp"
              unknown call_tmp[626376] "expr temp" "maybe param" "maybe type" "temp"
              (626379 'move' call_tmp[626376](358146 call here[90438]))
              unknown call_tmp[626383] "expr temp" "maybe param" "maybe type" "temp"
              (626386 'move' call_tmp[626383](77681 call(77676 call (partial) getChild _mt[243] call_tmp[626376]) chunk[78698]))
              unknown call_tmp[626388] "expr temp" "maybe param" "maybe type" "temp"
              (626391 'move' call_tmp[626388](78196 '_wide_get_locale' call_tmp[626383]))
              (78201 'move' tmp[78199](78197 'deref' call_tmp[626388]))
              val local_on_tmp[934422]:int(32)[95] "temp"
              (934427 'move' local_on_tmp[934422](934425 call chpl_nodeFromLocaleID tmp[78199]))
              if(934429 '!=' chpl_nodeID[287] local_on_tmp[934422])
              {
                (934433 'chpl_error' c"Local-on is not local")
              }
              (934439 call on_fn[934419] tmp[78199] len[77424] numChunks[77526] dptpl[77456] minIndicesPerTask[77440])
              function on_fn[934419](const in arg dummy_locale_arg[934437]:chpl_localeID_t[209352], arg len[934444], arg numChunks[934447], arg dptpl[934450], arg minIndicesPerTask[934453]) : void[4] "cobegin or coforall" "local on" "non blocking" "on"
              {
                {
                  unknown call_tmp[626393] "expr temp" "maybe param" "maybe type" "temp"
                  (626396 'move' call_tmp[626393](77754 call _cond_test debugDataParNuma[93410]))
                  if call_tmp[626393]
                  {
                    unknown call_tmp[626398] "expr temp" "maybe param" "maybe type" "temp"
                    (626401 'move' call_tmp[626398](77686 call chpl_getSubloc))
                    unknown call_tmp[626403] "expr temp" "maybe param" "maybe type" "temp"
                    (626406 'move' call_tmp[626403](77687 call != chunk[78698] call_tmp[626398]))
                    unknown call_tmp[626408] "expr temp" "maybe param" "maybe type" "temp"
                    (626411 'move' call_tmp[626408](77748 call _cond_test call_tmp[626403]))
                    if call_tmp[626408]
                    {
                      unknown call_tmp[626413] "expr temp" "maybe param" "maybe type" "temp"
                      (626416 'move' call_tmp[626413](77728 call chpl_getSubloc))
                      (77746 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78698] ", on " call_tmp[626413] ") ***")
                      (476503 'end of statement' chunk[78698])
                    }
                  }
                  unknown call_tmp[626418] "expr temp" "maybe param" "maybe type" "temp"
                  (626421 'move' call_tmp[626418](77771 call - len[934444] 1))
                  unknown call_tmp[626423] "maybe param" "maybe type" "temp"
                  (626426 'move' call_tmp[626423](77773 call _computeBlock len[934444] numChunks[934447] chunk[78698] call_tmp[626418]))
                  const tmp[77774] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541508 'init var' tmp[77774] call_tmp[626423])
                  (77781 call _check_tuple_var_decl tmp[77774] 2)
                  (476505 'end of statement')
                  unknown call_tmp[626428] "maybe param" "maybe type" "temp"
                  (626431 'move' call_tmp[626428](77775 call tmp[77774] 0))
                  const lo[77759] "dead at end of block" "const" "insert auto destroy"
                  (541510 'init var' lo[77759] call_tmp[626428])
                  unknown call_tmp[626433] "maybe param" "maybe type" "temp"
                  (626436 'move' call_tmp[626433](77778 call tmp[77774] 1))
                  const hi[77761] "dead at end of block" "const" "insert auto destroy"
                  (541512 'init var' hi[77761] call_tmp[626433])
                  (77786 'end of statement')
                  unknown call_tmp[626438] "maybe param" "maybe type" "temp"
                  (626441 'move' call_tmp[626438](77789 call chpl_build_bounded_range lo[77759] hi[77761]))
                  const locRange[77791] "dead at end of block" "const" "insert auto destroy"
                  (541514 'init var' locRange[77791] call_tmp[626438])
                  (77794 'end of statement')
                  unknown call_tmp[626445] "maybe param" "maybe type" "temp"
                  (626448 'move' call_tmp[626445](77796 call size _mt[243] locRange[77791]))
                  const locLen[77799] "dead at end of block" "const" "insert auto destroy"
                  (541516 'init var' locLen[77799] call_tmp[626445])
                  (77802 'end of statement')
                  const numSublocTasks[77824] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[559028] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[559029] "maybe param" "temp"
                  unknown call_tmp[626450] "expr temp" "maybe param" "maybe type" "temp"
                  (626453 'move' call_tmp[626450](77806 call % dptpl[934450] numChunks[934447]))
                  unknown call_tmp[626455] "expr temp" "maybe param" "maybe type" "temp"
                  (626458 'move' call_tmp[626455](77808 call < chunk[78698] call_tmp[626450]))
                  (559034 'move' tmp[559029](559032 call _cond_test call_tmp[626455]))
                  if tmp[559029]
                  {
                    unknown tmp[559036] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[626460] "expr temp" "maybe param" "maybe type" "temp"
                    (626463 'move' call_tmp[626460](77812 call / dptpl[934450] numChunks[934447]))
                    (559038 'move' tmp[559036](77815 call + call_tmp[626460] 1))
                    (559043 'move' tmp[559028](559040 '_paramFoldLogical' tmp[559029] tmp[559036]))
                  }
                  {
                    unknown tmp[559045] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (559047 'move' tmp[559045](77819 call / dptpl[934450] numChunks[934447]))
                    (559052 'move' tmp[559028](559049 '_paramFoldLogical' tmp[559029] tmp[559045]))
                  }
                  (541518 'init var' numSublocTasks[77824] tmp[559028])
                  (77827 'end of statement')
                  unknown call_tmp[626465] "maybe param" "maybe type" "temp"
                  (626468 'move' call_tmp[626465](77835 call _computeNumChunks numSublocTasks[77824](ignoreRunning = 1) minIndicesPerTask[934453] locLen[77799]))
                  const numTasks[77836] "dead at end of block" "const" "insert auto destroy"
                  (541520 'init var' numTasks[77836] call_tmp[626465])
                  (77839 'end of statement' lo[77759] hi[77761] locRange[77791] chunk[78698] dptpl[934450] numChunks[934447] dptpl[934450] numChunks[934447] dptpl[934450] numChunks[934447] numSublocTasks[77824] minIndicesPerTask[934453] locLen[77799])
                  {
                    unknown tmpIter[77985] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[626470] "expr temp" "maybe param" "maybe type" "temp"
                    (626473 'move' call_tmp[626470](77842 call chpl_build_low_bounded_range 0))
                    (77988 'move' tmpIter[77985](77845 call # call_tmp[626470] numTasks[77836]))
                    unknown isRngDomArr[78177] "maybe param" "temp"
                    unknown tmp[420968] "maybe param" "temp"
                    (420979 'move' tmp[420968](78179 call isBoundedRange tmpIter[77985]))
                    unknown call_tmp[626475] "expr temp" "maybe param" "maybe type" "temp"
                    (626478 'move' call_tmp[626475](420981 call _cond_invalid tmp[420968]))
                    if call_tmp[626475]
                    {
                      (420984 call compilerError "cannot promote short-circuiting || operator")
                    }
                    unknown tmp[559086] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[559087] "maybe param" "temp"
                    unknown call_tmp[626480] "expr temp" "maybe param" "maybe type" "temp"
                    (626483 'move' call_tmp[626480](420969 call isTrue tmp[420968]))
                    (559092 'move' tmp[559087](559090 call _cond_test call_tmp[626480]))
                    if tmp[559087]
                    {
                      (559097 'move' tmp[559086](559094 '_paramFoldLogical' tmp[559087] 1))
                    }
                    {
                      unknown tmp[420989] "maybe param" "temp"
                      (421000 'move' tmp[420989](78182 call isDomain tmpIter[77985]))
                      unknown call_tmp[626485] "expr temp" "maybe param" "maybe type" "temp"
                      (626488 'move' call_tmp[626485](421002 call _cond_invalid tmp[420989]))
                      if call_tmp[626485]
                      {
                        (421005 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[559059] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[559060] "maybe param" "temp"
                      unknown call_tmp[626490] "expr temp" "maybe param" "maybe type" "temp"
                      (626493 'move' call_tmp[626490](420990 call isTrue tmp[420989]))
                      (559065 'move' tmp[559060](559063 call _cond_test call_tmp[626490]))
                      if tmp[559060]
                      {
                        (559070 'move' tmp[559059](559067 '_paramFoldLogical' tmp[559060] 1))
                      }
                      {
                        unknown tmp[559072] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        unknown call_tmp[626495] "expr temp" "maybe param" "maybe type" "temp"
                        (626498 'move' call_tmp[626495](78185 call isArray tmpIter[77985]))
                        (559074 'move' tmp[559072](420994 call isTrue call_tmp[626495]))
                        (559079 'move' tmp[559059](559076 '_paramFoldLogical' tmp[559060] tmp[559072]))
                      }
                      unknown tmp[559099] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (559101 'move' tmp[559099](420973 call isTrue tmp[559059]))
                      (559106 'move' tmp[559086](559103 '_paramFoldLogical' tmp[559087] tmp[559099]))
                    }
                    (78192 'move' isRngDomArr[78177] tmp[559086])
                    if isRngDomArr[78177]
                    {
                      const _coforallCount[78044] "const" "end count" "temp"
                      (78113 'move' _coforallCount[78044](78110 call _endCountAlloc 1))
                      unknown numTasks[78045] "temp"
                      (78097 'move' numTasks[78045](78093 call size _mt[243] tmpIter[77985]))
                      (78088 call _upEndCount _coforallCount[78044] 1 numTasks[78045])
                      (476520 'end of statement')
                      (78085 call chpl_resetTaskSpawn numTasks[78045])
                      (476521 'end of statement')
                      unknown _indexOfInterest[78052] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78053] "expr temp" "temp"
                      (78062 'move' _iterator[78053](78060 call _getIterator tmpIter[77985]))
                      Defer
                      {
                        {
                          (78078 call _freeIterator _iterator[78053])
                        }
                      }
                      { scopeless type
                        (78067 'move' _indexOfInterest[78052](78064 call iteratorIndex _iterator[78053]))
                      }
                      ForLoop[78054]
                      {
                        unknown core[78071] "coforall index var" "index var" "insert auto destroy"
                        (476523 'end of statement')
                        (78073 'move' core[78071] _indexOfInterest[78052])
                        (476524 'end of statement' core[78071])
                        (934371 call coforall_fn[934369] chunk[78698] locLen[77799] numTasks[77836] lo[77759] hi[77761] locRange[77791])
                        function coforall_fn[934369](arg chunk[934376], arg locLen[934379], arg numTasks[934382], arg lo[934385], arg hi[934388], arg locRange[934391]) : void[4] "cobegin or coforall"
                        {
                          {
                            unknown call_tmp[626502] "maybe param" "maybe type" "temp"
                            (626505 'move' call_tmp[626502](77994 call _computeBlock locLen[934379] numTasks[934382] core[78071] hi[934388] lo[934385] lo[934385]))
                            const tmp[77992] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541522 'init var' tmp[77992] call_tmp[626502])
                            (78003 call _check_tuple_var_decl tmp[77992] 2)
                            (476526 'end of statement')
                            unknown call_tmp[626507] "maybe param" "maybe type" "temp"
                            (626510 'move' call_tmp[626507](78008 call tmp[77992] 0))
                            const low[78006] "dead at end of block" "const" "insert auto destroy"
                            (541524 'init var' low[78006] call_tmp[626507])
                            unknown call_tmp[626512] "maybe param" "maybe type" "temp"
                            (626515 'move' call_tmp[626512](78013 call tmp[77992] 1))
                            const high[78011] "dead at end of block" "const" "insert auto destroy"
                            (541526 'init var' high[78011] call_tmp[626512])
                            (78016 'end of statement')
                            unknown call_tmp[626517] "expr temp" "maybe param" "maybe type" "temp"
                            (626520 'move' call_tmp[626517](78018 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626517]
                            {
                              unknown call_tmp[626522] "expr temp" "maybe param" "maybe type" "temp"
                              (626525 'move' call_tmp[626522](78032 call chpl_build_bounded_range low[78006] high[78011]))
                              (78022 call chpl_debug_writeln "### chunk = " chunk[934376] "  core = " core[78071] "  " "locRange = " locRange[934391] "  coreRange = " call_tmp[626522])
                              (476527 'end of statement' chunk[934376] core[78071] locRange[934391] low[78006] high[78011])
                            }
                            unknown yret[511825] "YVV" "temp"
                            unknown call_tmp[626527] "expr temp" "maybe param" "maybe type" "temp"
                            (626530 'move' call_tmp[626527](78040 call chpl_build_bounded_range low[78006] high[78011]))
                            unknown call_tmp[626532] "expr temp" "maybe param" "maybe type" "temp"
                            (626535 'move' call_tmp[626532](78038 call _build_tuple call_tmp[626527]))
                            (511828 'move' yret[511825](511827 'deref' call_tmp[626532]))
                            (511830 yield yret[511825])
                            (476533 'end of statement' low[78006] high[78011])
                          }
                          (78047 call _downEndCount _coforallCount[78044] nil[44])
                          (934374 return _void[55])
                        }
                        {
                        }
                        label _continueLabel[78057]
                        _indexOfInterest[78052]
                        _iterator[78053]
                      }
                      label _breakLabel[78058]
                      Defer
                      {
                        {
                          (78100 call _endCountFree _coforallCount[78044])
                        }
                      }
                      (78105 call _waitEndCount _coforallCount[78044] 1 numTasks[78045])
                    }
                    {
                      const _coforallCount[78117] "const" "end count" "temp"
                      (78174 'move' _coforallCount[78117](78171 call _endCountAlloc 1))
                      unknown _indexOfInterest[78125] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78126] "expr temp" "temp"
                      (78135 'move' _iterator[78126](78133 call _getIterator tmpIter[77985]))
                      Defer
                      {
                        {
                          (78151 call _freeIterator _iterator[78126])
                        }
                      }
                      { scopeless type
                        (78140 'move' _indexOfInterest[78125](78137 call iteratorIndex _iterator[78126]))
                      }
                      ForLoop[78127]
                      {
                        unknown core[78144] "coforall index var" "index var" "insert auto destroy"
                        (476540 'end of statement')
                        (78146 'move' core[78144] _indexOfInterest[78125])
                        (476541 'end of statement' core[78144])
                        (78158 call _upEndCount _coforallCount[78117] 1)
                        (476543 'end of statement')
                        (934396 call coforall_fn[934394] chunk[78698] locLen[77799] numTasks[77836] lo[77759] hi[77761] locRange[77791])
                        function coforall_fn[934394](arg chunk[934401], arg locLen[934404], arg numTasks[934407], arg lo[934410], arg hi[934413], arg locRange[934416]) : void[4] "cobegin or coforall"
                        {
                          {
                            unknown call_tmp[626537] "maybe param" "maybe type" "temp"
                            (626540 'move' call_tmp[626537](77860 call _computeBlock locLen[934404] numTasks[934407] core[78144] hi[934413] lo[934410] lo[934410]))
                            const tmp[77861] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541528 'init var' tmp[77861] call_tmp[626537])
                            (77868 call _check_tuple_var_decl tmp[77861] 2)
                            (476544 'end of statement')
                            unknown call_tmp[626542] "maybe param" "maybe type" "temp"
                            (626545 'move' call_tmp[626542](77862 call tmp[77861] 0))
                            const low[77847] "dead at end of block" "const" "insert auto destroy"
                            (541530 'init var' low[77847] call_tmp[626542])
                            unknown call_tmp[626547] "maybe param" "maybe type" "temp"
                            (626550 'move' call_tmp[626547](77865 call tmp[77861] 1))
                            const high[77849] "dead at end of block" "const" "insert auto destroy"
                            (541532 'init var' high[77849] call_tmp[626547])
                            (77873 'end of statement')
                            unknown call_tmp[626552] "expr temp" "maybe param" "maybe type" "temp"
                            (626555 'move' call_tmp[626552](77973 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626552]
                            {
                              unknown call_tmp[626557] "expr temp" "maybe param" "maybe type" "temp"
                              (626560 'move' call_tmp[626557](77968 call chpl_build_bounded_range low[77847] high[77849]))
                              (77970 call chpl_debug_writeln "### chunk = " chunk[934401] "  core = " core[78144] "  " "locRange = " locRange[934416] "  coreRange = " call_tmp[626557])
                              (476545 'end of statement' chunk[934401] core[78144] locRange[934416] low[77847] high[77849])
                            }
                            unknown yret[511832] "YVV" "temp"
                            unknown call_tmp[626562] "expr temp" "maybe param" "maybe type" "temp"
                            (626565 'move' call_tmp[626562](77979 call chpl_build_bounded_range low[77847] high[77849]))
                            unknown call_tmp[626567] "expr temp" "maybe param" "maybe type" "temp"
                            (626570 'move' call_tmp[626567](77981 call _build_tuple call_tmp[626562]))
                            (511835 'move' yret[511832](511834 'deref' call_tmp[626567]))
                            (511837 yield yret[511832])
                            (476551 'end of statement' low[77847] high[77849])
                          }
                          (78120 call _downEndCount _coforallCount[78117] nil[44])
                          (934399 return _void[55])
                        }
                        {
                        }
                        label _continueLabel[78130]
                        _indexOfInterest[78125]
                        _iterator[78126]
                      }
                      label _breakLabel[78131]
                      Defer
                      {
                        {
                          (78162 call _endCountFree _coforallCount[78117])
                        }
                      }
                      (78167 call _waitEndCount _coforallCount[78117] 1)
                    }
                  }
                }
                (78674 call _downEndCount _coforallCount[78672] nil[44])
                (934442 return _void[55])
              }
              {
              }
              label _continueLabel[78684]
              _indexOfInterest[78679]
              _iterator[78680]
            }
            label _breakLabel[78685]
            Defer
            {
              {
                (78716 call _endCountFree _coforallCount[78672])
              }
            }
            (78721 call _waitEndCount _coforallCount[78672] 0)
          }
        }
      }
    }
    {
      unknown call_tmp[626574] "maybe param" "maybe type" "temp"
      (626577 'move' call_tmp[626574](78756 call size _mt[243] this[77323]))
      unknown v[78759] "dead at end of block" "insert auto destroy"
      (541534 'init var' v[78759] call_tmp[626574])
      (78762 'end of statement')
      const numChunks[78775] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[559113] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559114] "maybe param" "temp"
      unknown call_tmp[626579] "expr temp" "maybe param" "maybe type" "temp"
      (626582 'move' call_tmp[626579](78766 'task_get_serial'))
      (559119 'move' tmp[559114](559117 call _cond_test call_tmp[626579]))
      if tmp[559114]
      {
        (559124 'move' tmp[559113](559121 '_paramFoldLogical' tmp[559114] 1))
      }
      {
        unknown tmp[559126] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559128 'move' tmp[559126](78771 call _computeNumChunks v[78759]))
        (559133 'move' tmp[559113](559130 '_paramFoldLogical' tmp[559114] tmp[559126]))
      }
      (541536 'init var' numChunks[78775] tmp[559113])
      (78778 'end of statement' v[78759])
      unknown call_tmp[626584] "expr temp" "maybe param" "maybe type" "temp"
      (626587 'move' call_tmp[626584](78828 call _cond_test debugChapelRange[64198]))
      if call_tmp[626584]
      {
        (78786 call chpl_debug_writeln "*** RI: length=" v[78759] " numChunks=" numChunks[78775])
        (476561 'end of statement' v[78759] numChunks[78775])
        (78826 call chpl_debug_writeln "*** RI: Using " numChunks[78775] " chunk(s)")
        (476564 'end of statement' numChunks[78775])
      }
      unknown call_tmp[626589] "expr temp" "maybe param" "maybe type" "temp"
      (626592 'move' call_tmp[626589](78834 call == numChunks[78775] 1))
      unknown call_tmp[626594] "expr temp" "maybe param" "maybe type" "temp"
      (626597 'move' call_tmp[626594](79133 call _cond_test call_tmp[626589]))
      if call_tmp[626594]
      {
        unknown yret[511839] "YVV" "temp"
        unknown call_tmp[626599] "expr temp" "maybe param" "maybe type" "temp"
        (626602 'move' call_tmp[626599](78839 call - v[78759] 1))
        unknown call_tmp[626604] "expr temp" "maybe param" "maybe type" "temp"
        (626607 'move' call_tmp[626604](78841 call chpl_build_bounded_range 0 call_tmp[626599]))
        unknown call_tmp[626609] "expr temp" "maybe param" "maybe type" "temp"
        (626612 'move' call_tmp[626609](78843 call _build_tuple call_tmp[626604]))
        (511842 'move' yret[511839](511841 'deref' call_tmp[626609]))
        (511844 yield yret[511839])
        (476566 'end of statement' v[78759])
      }
      {
        {
          unknown tmpIter[78924] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626614] "expr temp" "maybe param" "maybe type" "temp"
          (626617 'move' call_tmp[626614](78849 call chpl_build_low_bounded_range 0))
          (78927 'move' tmpIter[78924](78852 call # call_tmp[626614] numChunks[78775]))
          unknown isRngDomArr[79113] "maybe param" "temp"
          unknown tmp[421094] "maybe param" "temp"
          (421105 'move' tmp[421094](79115 call isBoundedRange tmpIter[78924]))
          unknown call_tmp[626619] "expr temp" "maybe param" "maybe type" "temp"
          (626622 'move' call_tmp[626619](421107 call _cond_invalid tmp[421094]))
          if call_tmp[626619]
          {
            (421110 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559167] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559168] "maybe param" "temp"
          unknown call_tmp[626624] "expr temp" "maybe param" "maybe type" "temp"
          (626627 'move' call_tmp[626624](421095 call isTrue tmp[421094]))
          (559173 'move' tmp[559168](559171 call _cond_test call_tmp[626624]))
          if tmp[559168]
          {
            (559178 'move' tmp[559167](559175 '_paramFoldLogical' tmp[559168] 1))
          }
          {
            unknown tmp[421115] "maybe param" "temp"
            (421126 'move' tmp[421115](79118 call isDomain tmpIter[78924]))
            unknown call_tmp[626629] "expr temp" "maybe param" "maybe type" "temp"
            (626632 'move' call_tmp[626629](421128 call _cond_invalid tmp[421115]))
            if call_tmp[626629]
            {
              (421131 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[559140] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[559141] "maybe param" "temp"
            unknown call_tmp[626634] "expr temp" "maybe param" "maybe type" "temp"
            (626637 'move' call_tmp[626634](421116 call isTrue tmp[421115]))
            (559146 'move' tmp[559141](559144 call _cond_test call_tmp[626634]))
            if tmp[559141]
            {
              (559151 'move' tmp[559140](559148 '_paramFoldLogical' tmp[559141] 1))
            }
            {
              unknown tmp[559153] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626639] "expr temp" "maybe param" "maybe type" "temp"
              (626642 'move' call_tmp[626639](79121 call isArray tmpIter[78924]))
              (559155 'move' tmp[559153](421120 call isTrue call_tmp[626639]))
              (559160 'move' tmp[559140](559157 '_paramFoldLogical' tmp[559141] tmp[559153]))
            }
            unknown tmp[559180] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559182 'move' tmp[559180](421099 call isTrue tmp[559140]))
            (559187 'move' tmp[559167](559184 '_paramFoldLogical' tmp[559168] tmp[559180]))
          }
          (79128 'move' isRngDomArr[79113] tmp[559167])
          if isRngDomArr[79113]
          {
            const _coforallCount[78980] "const" "end count" "temp"
            (79049 'move' _coforallCount[78980](79046 call _endCountAlloc 1))
            unknown numTasks[78981] "temp"
            (79033 'move' numTasks[78981](79029 call size _mt[243] tmpIter[78924]))
            (79024 call _upEndCount _coforallCount[78980] 1 numTasks[78981])
            (476569 'end of statement')
            (79021 call chpl_resetTaskSpawn numTasks[78981])
            (476570 'end of statement')
            unknown _indexOfInterest[78988] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78989] "expr temp" "temp"
            (78998 'move' _iterator[78989](78996 call _getIterator tmpIter[78924]))
            Defer
            {
              {
                (79014 call _freeIterator _iterator[78989])
              }
            }
            { scopeless type
              (79003 'move' _indexOfInterest[78988](79000 call iteratorIndex _iterator[78989]))
            }
            ForLoop[78990]
            {
              unknown chunk[79007] "coforall index var" "index var" "insert auto destroy"
              (476572 'end of statement')
              (79009 'move' chunk[79007] _indexOfInterest[78988])
              (476573 'end of statement' chunk[79007])
              (934543 call coforall_fn[934541] v[78759] numChunks[78775])
              function coforall_fn[934541](arg v[934548], arg numChunks[934551]) : void[4] "cobegin or coforall"
              {
                {
                  unknown call_tmp[626646] "expr temp" "maybe param" "maybe type" "temp"
                  (626649 'move' call_tmp[626646](78938 call - v[934548] 1))
                  unknown call_tmp[626651] "maybe param" "maybe type" "temp"
                  (626654 'move' call_tmp[626651](78933 call _computeBlock v[934548] numChunks[934551] chunk[79007] call_tmp[626646]))
                  const tmp[78931] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541538 'init var' tmp[78931] call_tmp[626651])
                  (78943 call _check_tuple_var_decl tmp[78931] 2)
                  (476575 'end of statement')
                  unknown call_tmp[626656] "maybe param" "maybe type" "temp"
                  (626659 'move' call_tmp[626656](78948 call tmp[78931] 0))
                  const lo[78946] "dead at end of block" "const" "insert auto destroy"
                  (541540 'init var' lo[78946] call_tmp[626656])
                  unknown call_tmp[626661] "maybe param" "maybe type" "temp"
                  (626664 'move' call_tmp[626661](78953 call tmp[78931] 1))
                  const hi[78951] "dead at end of block" "const" "insert auto destroy"
                  (541542 'init var' hi[78951] call_tmp[626661])
                  (78956 'end of statement')
                  unknown call_tmp[626666] "expr temp" "maybe param" "maybe type" "temp"
                  (626669 'move' call_tmp[626666](78958 call _cond_test debugChapelRange[64198]))
                  if call_tmp[626666]
                  {
                    unknown call_tmp[626671] "expr temp" "maybe param" "maybe type" "temp"
                    (626674 'move' call_tmp[626671](78968 call chpl_build_bounded_range lo[78946] hi[78951]))
                    unknown call_tmp[626676] "expr temp" "maybe param" "maybe type" "temp"
                    (626679 'move' call_tmp[626676](78966 call _build_tuple call_tmp[626671]))
                    (78963 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626676])
                    (476576 'end of statement' lo[78946] hi[78951])
                  }
                  unknown yret[511846] "YVV" "temp"
                  unknown call_tmp[626681] "expr temp" "maybe param" "maybe type" "temp"
                  (626684 'move' call_tmp[626681](78976 call chpl_build_bounded_range lo[78946] hi[78951]))
                  unknown call_tmp[626686] "expr temp" "maybe param" "maybe type" "temp"
                  (626689 'move' call_tmp[626686](78974 call _build_tuple call_tmp[626681]))
                  (511849 'move' yret[511846](511848 'deref' call_tmp[626686]))
                  (511851 yield yret[511846])
                  (476579 'end of statement' lo[78946] hi[78951])
                }
                (78983 call _downEndCount _coforallCount[78980] nil[44])
                (934546 return _void[55])
              }
              {
              }
              label _continueLabel[78993]
              _indexOfInterest[78988]
              _iterator[78989]
            }
            label _breakLabel[78994]
            Defer
            {
              {
                (79036 call _endCountFree _coforallCount[78980])
              }
            }
            (79041 call _waitEndCount _coforallCount[78980] 1 numTasks[78981])
          }
          {
            const _coforallCount[79053] "const" "end count" "temp"
            (79110 'move' _coforallCount[79053](79107 call _endCountAlloc 1))
            unknown _indexOfInterest[79061] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[79062] "expr temp" "temp"
            (79071 'move' _iterator[79062](79069 call _getIterator tmpIter[78924]))
            Defer
            {
              {
                (79087 call _freeIterator _iterator[79062])
              }
            }
            { scopeless type
              (79076 'move' _indexOfInterest[79061](79073 call iteratorIndex _iterator[79062]))
            }
            ForLoop[79063]
            {
              unknown chunk[79080] "coforall index var" "index var" "insert auto destroy"
              (476586 'end of statement')
              (79082 'move' chunk[79080] _indexOfInterest[79061])
              (476587 'end of statement' chunk[79080])
              (79094 call _upEndCount _coforallCount[79053] 1)
              (476589 'end of statement')
              (934556 call coforall_fn[934554] v[78759] numChunks[78775])
              function coforall_fn[934554](arg v[934561], arg numChunks[934564]) : void[4] "cobegin or coforall"
              {
                {
                  unknown call_tmp[626691] "expr temp" "maybe param" "maybe type" "temp"
                  (626694 'move' call_tmp[626691](78866 call - v[934561] 1))
                  unknown call_tmp[626696] "maybe param" "maybe type" "temp"
                  (626699 'move' call_tmp[626696](78868 call _computeBlock v[934561] numChunks[934564] chunk[79080] call_tmp[626691]))
                  const tmp[78869] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541544 'init var' tmp[78869] call_tmp[626696])
                  (78876 call _check_tuple_var_decl tmp[78869] 2)
                  (476590 'end of statement')
                  unknown call_tmp[626701] "maybe param" "maybe type" "temp"
                  (626704 'move' call_tmp[626701](78870 call tmp[78869] 0))
                  const lo[78854] "dead at end of block" "const" "insert auto destroy"
                  (541546 'init var' lo[78854] call_tmp[626701])
                  unknown call_tmp[626706] "maybe param" "maybe type" "temp"
                  (626709 'move' call_tmp[626706](78873 call tmp[78869] 1))
                  const hi[78856] "dead at end of block" "const" "insert auto destroy"
                  (541548 'init var' hi[78856] call_tmp[626706])
                  (78881 'end of statement')
                  unknown call_tmp[626711] "expr temp" "maybe param" "maybe type" "temp"
                  (626714 'move' call_tmp[626711](78911 call _cond_test debugChapelRange[64198]))
                  if call_tmp[626711]
                  {
                    unknown call_tmp[626716] "expr temp" "maybe param" "maybe type" "temp"
                    (626719 'move' call_tmp[626716](78905 call chpl_build_bounded_range lo[78854] hi[78856]))
                    unknown call_tmp[626721] "expr temp" "maybe param" "maybe type" "temp"
                    (626724 'move' call_tmp[626721](78907 call _build_tuple call_tmp[626716]))
                    (78909 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626721])
                    (476591 'end of statement' lo[78854] hi[78856])
                  }
                  unknown yret[511853] "YVV" "temp"
                  unknown call_tmp[626726] "expr temp" "maybe param" "maybe type" "temp"
                  (626729 'move' call_tmp[626726](78918 call chpl_build_bounded_range lo[78854] hi[78856]))
                  unknown call_tmp[626731] "expr temp" "maybe param" "maybe type" "temp"
                  (626734 'move' call_tmp[626731](78920 call _build_tuple call_tmp[626726]))
                  (511856 'move' yret[511853](511855 'deref' call_tmp[626731]))
                  (511858 yield yret[511853])
                  (476594 'end of statement' lo[78854] hi[78856])
                }
                (79056 call _downEndCount _coforallCount[79053] nil[44])
                (934559 return _void[55])
              }
              {
              }
              label _continueLabel[79066]
              _indexOfInterest[79061]
              _iterator[79062]
            }
            label _breakLabel[79067]
            Defer
            {
              {
                (79098 call _endCountFree _coforallCount[79053])
              }
            }
            (79103 call _waitEndCount _coforallCount[79053] 1)
          }
        }
      }
    }
    (511802 return ret[511800])
  }
  where {
    (77333 call == tag[77318] leader[447])
  }
  function range[64319](?).these[79152](arg _mt[79159]:_MT[238], arg this[79156]:range[64319](?) :
  range[64319](?), param arg tag[79149]:iterKind[453], arg followThis[79154]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511862] "RVV" "temp"
    unknown tmp[421157] "maybe param" "temp"
    (421168 'move' tmp[421157] 1)
    unknown call_tmp[626736] "expr temp" "maybe param" "maybe type" "temp"
    (626739 'move' call_tmp[626736](421170 call _cond_invalid tmp[421157]))
    if call_tmp[626736]
    {
      (421173 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559194] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559195] "maybe param" "temp"
    unknown call_tmp[626741] "expr temp" "maybe param" "maybe type" "temp"
    (626744 'move' call_tmp[626741](421158 call isTrue tmp[421157]))
    (559200 'move' tmp[559195](559198 call _cond_test call_tmp[626741]))
    if tmp[559195]
    {
      unknown tmp[559202] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626748] "expr temp" "maybe param" "maybe type" "temp"
      (626751 'move' call_tmp[626748](79174 call(79170 call (partial) isAmbiguous _mt[243] this[79156])))
      (559204 'move' tmp[559202](421161 call isTrue call_tmp[626748]))
      (559209 'move' tmp[559194](559206 '_paramFoldLogical' tmp[559195] tmp[559202]))
    }
    {
      (559214 'move' tmp[559194](559211 '_paramFoldLogical' tmp[559195] 0))
    }
    unknown call_tmp[626753] "expr temp" "maybe param" "maybe type" "temp"
    (626756 'move' call_tmp[626753](79185 call _cond_test tmp[559194]))
    if call_tmp[626753]
    {
      (79183 call boundsCheckHalt module=[255] HaltWrappers[210085] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358156 'referenced modules list' HaltWrappers[210085])
    }
    unknown call_tmp[626760] "expr temp" "maybe param" "maybe type" "temp"
    (626763 'move' call_tmp[626760](376070 call boundedType _mt[243] this[79156]))
    unknown call_tmp[626765] "expr temp" "maybe param" "maybe type" "temp"
    (626768 'move' call_tmp[626765](79196 call == call_tmp[626760] boundedNone[64214]))
    unknown call_tmp[626770] "expr temp" "maybe param" "maybe type" "temp"
    (626773 'move' call_tmp[626770](79203 call _cond_test call_tmp[626765]))
    if call_tmp[626770]
    {
      (79201 call compilerError "iteration over a range with no bounds")
    }
    unknown tmp[421178] "maybe param" "temp"
    unknown call_tmp[626777] "expr temp" "maybe param" "maybe type" "temp"
    (626780 'move' call_tmp[626777](376075 call stridable _mt[243] this[79156]))
    (421189 'move' tmp[421178](79209 call ! call_tmp[626777]))
    unknown call_tmp[626782] "expr temp" "maybe param" "maybe type" "temp"
    (626785 'move' call_tmp[626782](421191 call _cond_invalid tmp[421178]))
    if call_tmp[626782]
    {
      (421194 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559221] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559222] "maybe param" "temp"
    unknown call_tmp[626787] "expr temp" "maybe param" "maybe type" "temp"
    (626790 'move' call_tmp[626787](421179 call isTrue tmp[421178]))
    (559227 'move' tmp[559222](559225 call _cond_test call_tmp[626787]))
    if tmp[559222]
    {
      unknown tmp[559229] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626794] "expr temp" "maybe param" "maybe type" "temp"
      (626797 'move' call_tmp[626794](376080 call boundedType _mt[243] this[79156]))
      unknown call_tmp[626799] "expr temp" "maybe param" "maybe type" "temp"
      (626802 'move' call_tmp[626799](79216 call == call_tmp[626794] boundedHigh[64212]))
      (559231 'move' tmp[559229](421182 call isTrue call_tmp[626799]))
      (559236 'move' tmp[559221](559233 '_paramFoldLogical' tmp[559222] tmp[559229]))
    }
    {
      (559241 'move' tmp[559221](559238 '_paramFoldLogical' tmp[559222] 0))
    }
    unknown call_tmp[626804] "expr temp" "maybe param" "maybe type" "temp"
    (626807 'move' call_tmp[626804](79241 call _cond_test tmp[559221]))
    if call_tmp[626804]
    {
      (79239 call compilerError "iteration over a range with no first index")
    }
    unknown call_tmp[626811] "expr temp" "maybe param" "maybe type" "temp"
    (626814 'move' call_tmp[626811](79247 call size _mt[243] followThis[79154]))
    unknown call_tmp[626816] "expr temp" "maybe param" "maybe type" "temp"
    (626819 'move' call_tmp[626816](79251 call != call_tmp[626811] 1))
    unknown call_tmp[626821] "expr temp" "maybe param" "maybe type" "temp"
    (626824 'move' call_tmp[626821](79274 call _cond_test call_tmp[626816]))
    if call_tmp[626821]
    {
      (79272 call compilerError "iteration over a range with multi-dimensional iterator")
    }
    unknown call_tmp[626826] "expr temp" "maybe param" "maybe type" "temp"
    (626829 'move' call_tmp[626826](79302 call _cond_test debugChapelRange[64198]))
    if call_tmp[626826]
    {
      (79300 call chpl_debug_writeln "In range follower code: Following " followThis[79154])
    }
    unknown call_tmp[626831] "maybe param" "maybe type" "temp"
    (626834 'move' call_tmp[626831](79310 call followThis[79154] 0))
    unknown myFollowThis[79311] "dead at end of block" "insert auto destroy"
    (541550 'init var' myFollowThis[79311] call_tmp[626831])
    (79314 'end of statement')
    unknown call_tmp[626836] "expr temp" "maybe param" "maybe type" "temp"
    (626839 'move' call_tmp[626836](79338 call _cond_test debugChapelRange[64198]))
    if call_tmp[626836]
    {
      (79336 call chpl_debug_writeln "Range = " myFollowThis[79311])
      (476607 'end of statement' myFollowThis[79311])
    }
    unknown tmp[421199] "maybe param" "temp"
    (421210 'move' tmp[421199] 1)
    unknown call_tmp[626841] "expr temp" "maybe param" "maybe type" "temp"
    (626844 'move' call_tmp[626841](421212 call _cond_invalid tmp[421199]))
    if call_tmp[626841]
    {
      (421215 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559248] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559249] "maybe param" "temp"
    unknown call_tmp[626846] "expr temp" "maybe param" "maybe type" "temp"
    (626849 'move' call_tmp[626846](421200 call isTrue tmp[421199]))
    (559254 'move' tmp[559249](559252 call _cond_test call_tmp[626846]))
    if tmp[559249]
    {
      unknown tmp[559256] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626853] "expr temp" "maybe param" "maybe type" "temp"
      (626856 'move' call_tmp[626853](79349 call(79345 call (partial) hasFirst _mt[243] this[79156])))
      unknown call_tmp[626858] "expr temp" "maybe param" "maybe type" "temp"
      (626861 'move' call_tmp[626858](79350 call ! call_tmp[626853]))
      (559258 'move' tmp[559256](421203 call isTrue call_tmp[626858]))
      (559263 'move' tmp[559248](559260 '_paramFoldLogical' tmp[559249] tmp[559256]))
    }
    {
      (559268 'move' tmp[559248](559265 '_paramFoldLogical' tmp[559249] 0))
    }
    unknown call_tmp[626863] "expr temp" "maybe param" "maybe type" "temp"
    (626866 'move' call_tmp[626863](79412 call _cond_test tmp[559248]))
    if call_tmp[626863]
    {
      unknown call_tmp[626870] "expr temp" "maybe param" "maybe type" "temp"
      (626873 'move' call_tmp[626870](79359 call(79355 call (partial) isEmpty _mt[243] this[79156])))
      unknown call_tmp[626875] "expr temp" "maybe param" "maybe type" "temp"
      (626878 'move' call_tmp[626875](79407 call _cond_test call_tmp[626870]))
      if call_tmp[626875]
      {
        unknown call_tmp[626882] "expr temp" "maybe param" "maybe type" "temp"
        (626885 'move' call_tmp[626882](79365 call(79361 call (partial) isEmpty _mt[243] myFollowThis[79311])))
        unknown call_tmp[626887] "expr temp" "maybe param" "maybe type" "temp"
        (626890 'move' call_tmp[626887](79366 call ! call_tmp[626882]))
        unknown call_tmp[626892] "expr temp" "maybe param" "maybe type" "temp"
        (626895 'move' call_tmp[626892](79392 call _cond_test call_tmp[626887]))
        if call_tmp[626892]
        {
          (79390 call boundsCheckHalt module=[255] HaltWrappers[210085] "size mismatch in zippered iteration")
          (358168 'referenced modules list' HaltWrappers[210085])
        }
      }
      {
        (79404 call boundsCheckHalt module=[255] HaltWrappers[210085] "iteration over a range with no first index")
        (358174 'referenced modules list' HaltWrappers[210085])
      }
    }
    unknown tmp[421241] "maybe param" "temp"
    (421252 'move' tmp[421241] 1)
    unknown call_tmp[626897] "expr temp" "maybe param" "maybe type" "temp"
    (626900 'move' call_tmp[626897](421254 call _cond_invalid tmp[421241]))
    if call_tmp[626897]
    {
      (421257 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559275] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559276] "maybe param" "temp"
    unknown call_tmp[626902] "expr temp" "maybe param" "maybe type" "temp"
    (626905 'move' call_tmp[626902](421242 call isTrue tmp[421241]))
    (559281 'move' tmp[559276](559279 call _cond_test call_tmp[626902]))
    if tmp[559276]
    {
      unknown tmp[559283] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626909] "expr temp" "maybe param" "maybe type" "temp"
      (626912 'move' call_tmp[626909](79422 call(79418 call (partial) hasFirst _mt[243] myFollowThis[79311])))
      unknown call_tmp[626914] "expr temp" "maybe param" "maybe type" "temp"
      (626917 'move' call_tmp[626914](79423 call ! call_tmp[626909]))
      (559285 'move' tmp[559283](421245 call isTrue call_tmp[626914]))
      (559290 'move' tmp[559275](559287 '_paramFoldLogical' tmp[559276] tmp[559283]))
    }
    {
      (559295 'move' tmp[559275](559292 '_paramFoldLogical' tmp[559276] 0))
    }
    unknown call_tmp[626919] "expr temp" "maybe param" "maybe type" "temp"
    (626922 'move' call_tmp[626919](79475 call _cond_test tmp[559275]))
    if call_tmp[626919]
    {
      unknown tmp[421220] "maybe param" "temp"
      unknown call_tmp[626926] "expr temp" "maybe param" "maybe type" "temp"
      (626929 'move' call_tmp[626926](79432 call(79428 call (partial) isAmbiguous _mt[243] myFollowThis[79311])))
      (421231 'move' tmp[421220](79433 call ! call_tmp[626926]))
      unknown call_tmp[626931] "expr temp" "maybe param" "maybe type" "temp"
      (626934 'move' call_tmp[626931](421233 call _cond_invalid tmp[421220]))
      if call_tmp[626931]
      {
        (421236 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559302] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559303] "maybe param" "temp"
      unknown call_tmp[626936] "expr temp" "maybe param" "maybe type" "temp"
      (626939 'move' call_tmp[626936](421221 call isTrue tmp[421220]))
      (559308 'move' tmp[559303](559306 call _cond_test call_tmp[626936]))
      if tmp[559303]
      {
        unknown tmp[559310] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626943] "expr temp" "maybe param" "maybe type" "temp"
        (626946 'move' call_tmp[626943](79440 call(79436 call (partial) isEmpty _mt[243] myFollowThis[79311])))
        (559312 'move' tmp[559310](421224 call isTrue call_tmp[626943]))
        (559317 'move' tmp[559302](559314 '_paramFoldLogical' tmp[559303] tmp[559310]))
      }
      {
        (559322 'move' tmp[559302](559319 '_paramFoldLogical' tmp[559303] 0))
      }
      unknown call_tmp[626948] "expr temp" "maybe param" "maybe type" "temp"
      (626951 'move' call_tmp[626948](79443 call ! tmp[559302]))
      unknown call_tmp[626953] "expr temp" "maybe param" "maybe type" "temp"
      (626956 'move' call_tmp[626953](79469 call _cond_test call_tmp[626948]))
      if call_tmp[626953]
      {
        (79467 call boundsCheckHalt module=[255] HaltWrappers[210085] "zippered iteration over a range with no first index")
        (358183 'referenced modules list' HaltWrappers[210085])
      }
    }
    unknown tmp[421325] "maybe param" "temp"
    unknown tmp[421346] "maybe param" "temp"
    (421357 'move' tmp[421346](79482 call isBoundedRange myFollowThis[79311]))
    unknown call_tmp[626958] "expr temp" "maybe param" "maybe type" "temp"
    (626961 'move' call_tmp[626958](421359 call _cond_invalid tmp[421346]))
    if call_tmp[626958]
    {
      (421362 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559329] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559330] "maybe param" "temp"
    unknown call_tmp[626963] "expr temp" "maybe param" "maybe type" "temp"
    (626966 'move' call_tmp[626963](421347 call isTrue tmp[421346]))
    (559335 'move' tmp[559330](559333 call _cond_test call_tmp[626963]))
    if tmp[559330]
    {
      unknown tmp[559337] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626970] "expr temp" "maybe param" "maybe type" "temp"
      (626973 'move' call_tmp[626970](79484 call stridable _mt[243] myFollowThis[79311]))
      unknown call_tmp[626975] "expr temp" "maybe param" "maybe type" "temp"
      (626978 'move' call_tmp[626975](79487 call ! call_tmp[626970]))
      (559339 'move' tmp[559337](421350 call isTrue call_tmp[626975]))
      (559344 'move' tmp[559329](559341 '_paramFoldLogical' tmp[559330] tmp[559337]))
    }
    {
      (559349 'move' tmp[559329](559346 '_paramFoldLogical' tmp[559330] 0))
    }
    (421336 'move' tmp[421325] tmp[559329])
    unknown call_tmp[626980] "expr temp" "maybe param" "maybe type" "temp"
    (626983 'move' call_tmp[626980](421338 call _cond_invalid tmp[421325]))
    if call_tmp[626980]
    {
      (421341 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[559356] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559357] "maybe param" "temp"
    unknown call_tmp[626985] "expr temp" "maybe param" "maybe type" "temp"
    (626988 'move' call_tmp[626985](421326 call isTrue tmp[421325]))
    (559362 'move' tmp[559357](559360 call _cond_test call_tmp[626985]))
    if tmp[559357]
    {
      (559367 'move' tmp[559356](559364 '_paramFoldLogical' tmp[559357] 1))
    }
    {
      unknown tmp[559369] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626992] "expr temp" "maybe param" "maybe type" "temp"
      (626995 'move' call_tmp[626992](79496 call(79492 call (partial) hasLast _mt[243] myFollowThis[79311])))
      (559371 'move' tmp[559369](421330 call isTrue call_tmp[626992]))
      (559376 'move' tmp[559356](559373 '_paramFoldLogical' tmp[559357] tmp[559369]))
    }
    unknown call_tmp[626997] "expr temp" "maybe param" "maybe type" "temp"
    (627000 'move' call_tmp[626997](80147 call _cond_test tmp[559356]))
    if call_tmp[626997]
    {
      unknown call_tmp[627004] "maybe param" "maybe type" "temp"
      (627007 'move' call_tmp[627004](79500 call size _mt[243] myFollowThis[79311]))
      const flwlen[79503] "dead at end of block" "const" "insert auto destroy"
      (541552 'init var' flwlen[79503] call_tmp[627004])
      (79506 'end of statement' myFollowThis[79311])
      unknown tmp[421262] "maybe param" "temp"
      (421273 'move' tmp[421262] 1)
      unknown call_tmp[627009] "expr temp" "maybe param" "maybe type" "temp"
      (627012 'move' call_tmp[627009](421275 call _cond_invalid tmp[421262]))
      if call_tmp[627009]
      {
        (421278 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559383] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559384] "maybe param" "temp"
      unknown call_tmp[627014] "expr temp" "maybe param" "maybe type" "temp"
      (627017 'move' call_tmp[627014](421263 call isTrue tmp[421262]))
      (559389 'move' tmp[559384](559387 call _cond_test call_tmp[627014]))
      if tmp[559384]
      {
        unknown tmp[559391] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627021] "expr temp" "maybe param" "maybe type" "temp"
        (627024 'move' call_tmp[627021](79514 call(79510 call (partial) hasLast _mt[243] this[79156])))
        (559393 'move' tmp[559391](421266 call isTrue call_tmp[627021]))
        (559398 'move' tmp[559383](559395 '_paramFoldLogical' tmp[559384] tmp[559391]))
      }
      {
        (559403 'move' tmp[559383](559400 '_paramFoldLogical' tmp[559384] 0))
      }
      unknown call_tmp[627026] "expr temp" "maybe param" "maybe type" "temp"
      (627029 'move' call_tmp[627026](79586 call _cond_test tmp[559383]))
      if call_tmp[627026]
      {
        unknown call_tmp[627031] "expr temp" "maybe param" "maybe type" "temp"
        (627034 'move' call_tmp[627031](79520 call isBoundedRange this[79156]))
        unknown call_tmp[627036] "expr temp" "maybe param" "maybe type" "temp"
        (627039 'move' call_tmp[627036](79580 call _cond_test call_tmp[627031]))
        if call_tmp[627036]
        {
          unknown call_tmp[627043] "expr temp" "maybe param" "maybe type" "temp"
          (627046 'move' call_tmp[627043](79522 call size _mt[243] this[79156]))
          unknown call_tmp[627048] "expr temp" "maybe param" "maybe type" "temp"
          (627051 'move' call_tmp[627048](79526 call < call_tmp[627043] flwlen[79503]))
          unknown call_tmp[627053] "expr temp" "maybe param" "maybe type" "temp"
          (627056 'move' call_tmp[627053](79552 call _cond_test call_tmp[627048]))
          if call_tmp[627053]
          {
            (79550 call boundsCheckHalt module=[255] HaltWrappers[210085] "zippered iteration over a range with too few indices")
            (358194 'referenced modules list' HaltWrappers[210085])
          }
        }
        {
          (79578 call assert 0 "hasFirst && hasLast do not imply isBoundedRange")
        }
      }
      unknown tmp[421283] "maybe param" "temp"
      (421294 'move' tmp[421283](79591 call stridable _mt[243] this[79156]))
      unknown call_tmp[627060] "expr temp" "maybe param" "maybe type" "temp"
      (627063 'move' call_tmp[627060](421296 call _cond_invalid tmp[421283]))
      if call_tmp[627060]
      {
        (421299 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559410] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559411] "maybe param" "temp"
      unknown call_tmp[627065] "expr temp" "maybe param" "maybe type" "temp"
      (627068 'move' call_tmp[627065](421284 call isTrue tmp[421283]))
      (559416 'move' tmp[559411](559414 call _cond_test call_tmp[627065]))
      if tmp[559411]
      {
        (559421 'move' tmp[559410](559418 '_paramFoldLogical' tmp[559411] 1))
      }
      {
        unknown tmp[559423] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627072] "expr temp" "maybe param" "maybe type" "temp"
        (627075 'move' call_tmp[627072](79595 call stridable _mt[243] myFollowThis[79311]))
        (559425 'move' tmp[559423](421288 call isTrue call_tmp[627072]))
        (559430 'move' tmp[559410](559427 '_paramFoldLogical' tmp[559411] tmp[559423]))
      }
      unknown call_tmp[627077] "expr temp" "maybe param" "maybe type" "temp"
      (627080 'move' call_tmp[627077](79936 call _cond_test tmp[559410]))
      if call_tmp[627077]
      {
        unknown call_tmp[627084] "expr temp" "maybe param" "maybe type" "temp"
        (627087 'move' call_tmp[627084](79603 call(376095 call (partial) chpl_intToIdx _mt[243] this[79156]) 1))
        unknown call_tmp[627091] "expr temp" "maybe param" "maybe type" "temp"
        (627094 'move' call_tmp[627091](79607 call(376099 call (partial) chpl_intToIdx _mt[243] this[79156]) 0))
        unknown call_tmp[627096] "expr temp" "maybe param" "maybe type" "temp"
        (627099 'move' call_tmp[627096](79608 call chpl_build_bounded_range call_tmp[627084] call_tmp[627091]))
        unknown call_tmp[627103] "expr temp" "maybe param" "maybe type" "temp"
        (627106 'move' call_tmp[627103](376103 call intIdxType _mt[243] this[79156]))
        unknown call_tmp[627108] "expr temp" "maybe param" "maybe type" "temp"
        (627111 'move' call_tmp[627108](79614 call chpl__rangeStrideType call_tmp[627103]))
        unknown call_tmp[627113] "expr temp" "maybe param" "maybe type" "temp"
        (627116 'move' call_tmp[627113](79615 call _cast call_tmp[627108] 1))
        unknown call_tmp[627118] "maybe param" "maybe type" "temp"
        (627121 'move' call_tmp[627118](79617 call chpl_by call_tmp[627096] call_tmp[627113]))
        unknown r[79619] "dead at end of block" "insert auto destroy"
        (541554 'init var' r[79619] call_tmp[627118])
        (79622 'end of statement')
        unknown call_tmp[627123] "expr temp" "maybe param" "maybe type" "temp"
        (627126 'move' call_tmp[627123](79626 call != flwlen[79503] 0))
        unknown call_tmp[627128] "expr temp" "maybe param" "maybe type" "temp"
        (627131 'move' call_tmp[627128](79728 call _cond_test call_tmp[627123]))
        if call_tmp[627128]
        {
          unknown call_tmp[627135] "expr temp" "maybe param" "maybe type" "temp"
          (627138 'move' call_tmp[627135](79629 call stride _mt[243] this[79156]))
          unknown call_tmp[627142] "expr temp" "maybe param" "maybe type" "temp"
          (627145 'move' call_tmp[627142](79633 call stride _mt[243] myFollowThis[79311]))
          unknown call_tmp[627147] "maybe param" "maybe type" "temp"
          (627150 'move' call_tmp[627147](79636 call * call_tmp[627135] call_tmp[627142]))
          const stride[79638] "dead at end of block" "const" "insert auto destroy"
          (541556 'init var' stride[79638] call_tmp[627147])
          (79641 'end of statement')
          unknown call_tmp[627156] "expr temp" "maybe param" "maybe type" "temp"
          (627159 'move' call_tmp[627156](79648 call first _mt[243] myFollowThis[79311]))
          unknown call_tmp[627161] "maybe param" "maybe type" "temp"
          (627164 'move' call_tmp[627161](79652 call(79644 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627156]))
          unknown low[79653] "dead at end of block" "insert auto destroy"
          (541558 'init var' low[79653] call_tmp[627161])
          (79656 'end of statement')
          unknown call_tmp[627170] "expr temp" "maybe param" "maybe type" "temp"
          (627173 'move' call_tmp[627170](376113 call strType _mt[243] this[79156]))
          unknown call_tmp[627175] "expr temp" "maybe param" "maybe type" "temp"
          (627178 'move' call_tmp[627175](79661 call chpl__idxToInt low[79653]))
          unknown call_tmp[627180] "expr temp" "maybe param" "maybe type" "temp"
          (627183 'move' call_tmp[627180](79663 call _cast call_tmp[627170] call_tmp[627175]))
          unknown call_tmp[627187] "expr temp" "maybe param" "maybe type" "temp"
          (627190 'move' call_tmp[627187](376119 call strType _mt[243] this[79156]))
          unknown call_tmp[627192] "expr temp" "maybe param" "maybe type" "temp"
          (627195 'move' call_tmp[627192](79668 call - flwlen[79503] 1))
          unknown call_tmp[627197] "expr temp" "maybe param" "maybe type" "temp"
          (627200 'move' call_tmp[627197](79671 call _cast call_tmp[627187] call_tmp[627192]))
          unknown call_tmp[627202] "expr temp" "maybe param" "maybe type" "temp"
          (627205 'move' call_tmp[627202](79673 call * stride[79638] call_tmp[627197]))
          unknown call_tmp[627207] "expr temp" "maybe param" "maybe type" "temp"
          (627210 'move' call_tmp[627207](79675 call + call_tmp[627180] call_tmp[627202]))
          unknown call_tmp[627212] "maybe param" "maybe type" "temp"
          (627215 'move' call_tmp[627212](79678 call(376108 call (partial) chpl_intToIdx _mt[243] this[79156]) call_tmp[627207]))
          unknown high[79679] "dead at end of block" "insert auto destroy"
          (541560 'init var' high[79679] call_tmp[627212])
          (79682 'end of statement' myFollowThis[79311] myFollowThis[79311] low[79653] stride[79638] flwlen[79503])
          unknown call_tmp[627221] "expr temp" "maybe param" "maybe type" "temp"
          (627224 'move' call_tmp[627221](79690 call last _mt[243] myFollowThis[79311]))
          unknown call_tmp[627226] "expr temp" "maybe param" "maybe type" "temp"
          (627229 'move' call_tmp[627226](79694 call(79686 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627221]))
          unknown call_tmp[627231] "expr temp" "maybe param" "maybe type" "temp"
          (627234 'move' call_tmp[627231](79695 call == high[79679] call_tmp[627226]))
          (79698 call assert call_tmp[627231])
          (476627 'end of statement' high[79679] myFollowThis[79311])
          unknown call_tmp[627236] "expr temp" "maybe param" "maybe type" "temp"
          (627239 'move' call_tmp[627236](79702 call < stride[79638] 0))
          unknown call_tmp[627241] "expr temp" "maybe param" "maybe type" "temp"
          (627244 'move' call_tmp[627241](79709 call _cond_test call_tmp[627236]))
          if call_tmp[627241]
          {
            (79706 call <=> low[79653] high[79679])
            (476630 'end of statement' low[79653] high[79679])
          }
          unknown call_tmp[627246] "expr temp" "maybe param" "maybe type" "temp"
          (627249 'move' call_tmp[627246](79717 call chpl_build_bounded_range low[79653] high[79679]))
          unknown call_tmp[627253] "expr temp" "maybe param" "maybe type" "temp"
          (627256 'move' call_tmp[627253](376131 call strType _mt[243] this[79156]))
          unknown call_tmp[627258] "expr temp" "maybe param" "maybe type" "temp"
          (627261 'move' call_tmp[627258](79721 call _cast call_tmp[627253] stride[79638]))
          unknown call_tmp[627263] "expr temp" "maybe param" "maybe type" "temp"
          (627266 'move' call_tmp[627263](79723 call chpl_by call_tmp[627246] call_tmp[627258]))
          (79725 call = r[79619] call_tmp[627263])
          (476633 'end of statement' r[79619] low[79653] high[79679] stride[79638])
        }
        unknown call_tmp[627268] "expr temp" "maybe param" "maybe type" "temp"
        (627271 'move' call_tmp[627268](79755 call _cond_test debugChapelRange[64198]))
        if call_tmp[627268]
        {
          (79753 call chpl_debug_writeln "Expanded range = " r[79619])
          (476638 'end of statement' r[79619])
        }
        {
          unknown _indexOfInterest[79765] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79766] "expr temp" "temp"
          (79775 'move' _iterator[79766](79773 call _getIterator r[79619]))
          Defer
          {
            {
              (79791 call _freeIterator _iterator[79766])
            }
          }
          { scopeless type
            (79780 'move' _indexOfInterest[79765](79777 call iteratorIndex _iterator[79766]))
          }
          ForLoop[79767]
          {
            unknown i[79784] "index var" "insert auto destroy"
            (476641 'end of statement')
            (79786 'move' i[79784] _indexOfInterest[79765])
            (476642 'end of statement' i[79784])
            unknown yret[511866] "YVV" "temp"
            (511869 'move' yret[511866](511868 'deref' i[79784]))
            (511871 yield yret[511866])
            (476644 'end of statement' i[79784])
            label _continueLabel[79770]
            _indexOfInterest[79765]
            _iterator[79766]
          }
          label _breakLabel[79771]
        }
      }
      {
        unknown call_tmp[627275] "expr temp" "maybe param" "maybe type" "temp"
        (627278 'move' call_tmp[627275](376140 call idxType _mt[243] this[79156]))
        unknown call_tmp[627280] "expr temp" "maybe param" "maybe type" "temp"
        (627283 'move' call_tmp[627280](79802 call chpl__intToIdx call_tmp[627275] 1))
        unknown call_tmp[627287] "expr temp" "maybe param" "maybe type" "temp"
        (627290 'move' call_tmp[627287](376145 call idxType _mt[243] this[79156]))
        unknown call_tmp[627292] "expr temp" "maybe param" "maybe type" "temp"
        (627295 'move' call_tmp[627292](79807 call chpl__intToIdx call_tmp[627287] 0))
        unknown call_tmp[627297] "maybe param" "maybe type" "temp"
        (627300 'move' call_tmp[627297](79808 call chpl_build_bounded_range call_tmp[627280] call_tmp[627292]))
        unknown r[79810] "dead at end of block" "insert auto destroy"
        (541562 'init var' r[79810] call_tmp[627297])
        (79813 'end of statement')
        unknown call_tmp[627302] "expr temp" "maybe param" "maybe type" "temp"
        (627305 'move' call_tmp[627302](79817 call != flwlen[79503] 0))
        unknown call_tmp[627307] "expr temp" "maybe param" "maybe type" "temp"
        (627310 'move' call_tmp[627307](79882 call _cond_test call_tmp[627302]))
        if call_tmp[627307]
        {
          unknown call_tmp[627316] "expr temp" "maybe param" "maybe type" "temp"
          (627319 'move' call_tmp[627316](79824 call first _mt[243] myFollowThis[79311]))
          unknown call_tmp[627321] "maybe param" "maybe type" "temp"
          (627324 'move' call_tmp[627321](79828 call(79820 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627316]))
          const low[79829] "dead at end of block" "const" "insert auto destroy"
          (541564 'init var' low[79829] call_tmp[627321])
          (79832 'end of statement')
          unknown call_tmp[627330] "expr temp" "maybe param" "maybe type" "temp"
          (627333 'move' call_tmp[627330](376155 call strType _mt[243] this[79156]))
          unknown call_tmp[627335] "expr temp" "maybe param" "maybe type" "temp"
          (627338 'move' call_tmp[627335](79838 call chpl__idxToInt low[79829]))
          unknown call_tmp[627340] "expr temp" "maybe param" "maybe type" "temp"
          (627343 'move' call_tmp[627340](79840 call _cast call_tmp[627330] call_tmp[627335]))
          unknown call_tmp[627347] "expr temp" "maybe param" "maybe type" "temp"
          (627350 'move' call_tmp[627347](376160 call strType _mt[243] this[79156]))
          unknown call_tmp[627352] "expr temp" "maybe param" "maybe type" "temp"
          (627355 'move' call_tmp[627352](79844 call - flwlen[79503] 1))
          unknown call_tmp[627357] "expr temp" "maybe param" "maybe type" "temp"
          (627360 'move' call_tmp[627357](79847 call _cast call_tmp[627347] call_tmp[627352]))
          unknown call_tmp[627362] "expr temp" "maybe param" "maybe type" "temp"
          (627365 'move' call_tmp[627362](79849 call + call_tmp[627340] call_tmp[627357]))
          unknown call_tmp[627367] "maybe param" "maybe type" "temp"
          (627370 'move' call_tmp[627367](79852 call(376150 call (partial) chpl_intToIdx _mt[243] this[79156]) call_tmp[627362]))
          const high[79853] "dead at end of block" "const" "insert auto destroy"
          (541566 'init var' high[79853] call_tmp[627367])
          (79856 'end of statement' myFollowThis[79311] low[79829] flwlen[79503])
          unknown call_tmp[627376] "expr temp" "maybe param" "maybe type" "temp"
          (627379 'move' call_tmp[627376](79864 call last _mt[243] myFollowThis[79311]))
          unknown call_tmp[627381] "expr temp" "maybe param" "maybe type" "temp"
          (627384 'move' call_tmp[627381](79868 call(79860 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627376]))
          unknown call_tmp[627386] "expr temp" "maybe param" "maybe type" "temp"
          (627389 'move' call_tmp[627386](79869 call == high[79853] call_tmp[627381]))
          (79872 call assert call_tmp[627386])
          (476649 'end of statement' high[79853] myFollowThis[79311])
          unknown call_tmp[627391] "expr temp" "maybe param" "maybe type" "temp"
          (627394 'move' call_tmp[627391](79877 call chpl_build_bounded_range low[79829] high[79853]))
          (79879 call = r[79810] call_tmp[627391])
          (476652 'end of statement' r[79810] low[79829] high[79853])
        }
        unknown call_tmp[627396] "expr temp" "maybe param" "maybe type" "temp"
        (627399 'move' call_tmp[627396](79893 call _cond_test debugChapelRange[64198]))
        if call_tmp[627396]
        {
          (79891 call chpl_debug_writeln "Expanded range = " r[79810])
          (476656 'end of statement' r[79810])
        }
        {
          unknown _indexOfInterest[79903] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79904] "expr temp" "temp"
          (79913 'move' _iterator[79904](79911 call _getIterator r[79810]))
          Defer
          {
            {
              (79929 call _freeIterator _iterator[79904])
            }
          }
          { scopeless type
            (79918 'move' _indexOfInterest[79903](79915 call iteratorIndex _iterator[79904]))
          }
          ForLoop[79905]
          {
            unknown i[79922] "index var" "insert auto destroy"
            (476659 'end of statement')
            (79924 'move' i[79922] _indexOfInterest[79903])
            (476660 'end of statement' i[79922])
            unknown yret[511873] "YVV" "temp"
            (511876 'move' yret[511873](511875 'deref' i[79922]))
            (511878 yield yret[511873])
            (476662 'end of statement' i[79922])
            label _continueLabel[79908]
            _indexOfInterest[79903]
            _iterator[79904]
          }
          label _breakLabel[79909]
        }
      }
    }
    {
      unknown tmp[421304] "maybe param" "temp"
      (421315 'move' tmp[421304] 1)
      unknown call_tmp[627401] "expr temp" "maybe param" "maybe type" "temp"
      (627404 'move' call_tmp[627401](421317 call _cond_invalid tmp[421304]))
      if call_tmp[627401]
      {
        (421320 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559437] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559438] "maybe param" "temp"
      unknown call_tmp[627406] "expr temp" "maybe param" "maybe type" "temp"
      (627409 'move' call_tmp[627406](421305 call isTrue tmp[421304]))
      (559443 'move' tmp[559438](559441 call _cond_test call_tmp[627406]))
      if tmp[559438]
      {
        unknown tmp[559445] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627413] "expr temp" "maybe param" "maybe type" "temp"
        (627416 'move' call_tmp[627413](79946 call(79942 call (partial) hasLast _mt[243] this[79156])))
        (559447 'move' tmp[559445](421308 call isTrue call_tmp[627413]))
        (559452 'move' tmp[559437](559449 '_paramFoldLogical' tmp[559438] tmp[559445]))
      }
      {
        (559457 'move' tmp[559437](559454 '_paramFoldLogical' tmp[559438] 0))
      }
      unknown call_tmp[627418] "expr temp" "maybe param" "maybe type" "temp"
      (627421 'move' call_tmp[627418](79977 call _cond_test tmp[559437]))
      if call_tmp[627418]
      {
        (79975 call zipLengthHalt module=[255] HaltWrappers[210085] "zippered iteration where a bounded range follows an unbounded iterator")
        (358213 'referenced modules list' HaltWrappers[210085])
      }
      unknown call_tmp[627427] "expr temp" "maybe param" "maybe type" "temp"
      (627430 'move' call_tmp[627427](79988 call first _mt[243] myFollowThis[79311]))
      unknown call_tmp[627432] "maybe param" "maybe type" "temp"
      (627435 'move' call_tmp[627432](79992 call(79984 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627427]))
      const first[79993] "dead at end of block" "const" "insert auto destroy"
      (541568 'init var' first[79993] call_tmp[627432])
      (79996 'end of statement')
      unknown call_tmp[627439] "expr temp" "maybe param" "maybe type" "temp"
      (627442 'move' call_tmp[627439](79998 call stride _mt[243] this[79156]))
      unknown call_tmp[627446] "expr temp" "maybe param" "maybe type" "temp"
      (627449 'move' call_tmp[627446](80002 call stride _mt[243] myFollowThis[79311]))
      unknown call_tmp[627451] "maybe param" "maybe type" "temp"
      (627454 'move' call_tmp[627451](80005 call * call_tmp[627439] call_tmp[627446]))
      const stride[80007] "dead at end of block" "const" "insert auto destroy"
      (541570 'init var' stride[80007] call_tmp[627451])
      (80010 'end of statement' myFollowThis[79311] myFollowThis[79311])
      unknown call_tmp[627456] "expr temp" "maybe param" "maybe type" "temp"
      (627459 'move' call_tmp[627456](80013 call > stride[80007] 0))
      unknown call_tmp[627461] "expr temp" "maybe param" "maybe type" "temp"
      (627464 'move' call_tmp[627461](80143 call _cond_test call_tmp[627456]))
      if call_tmp[627461]
      {
        unknown call_tmp[627466] "expr temp" "maybe param" "maybe type" "temp"
        (627469 'move' call_tmp[627466](80016 call chpl_build_low_bounded_range first[79993]))
        unknown call_tmp[627473] "expr temp" "maybe param" "maybe type" "temp"
        (627476 'move' call_tmp[627473](376176 call strType _mt[243] this[79156]))
        unknown call_tmp[627478] "expr temp" "maybe param" "maybe type" "temp"
        (627481 'move' call_tmp[627478](80020 call _cast call_tmp[627473] stride[80007]))
        unknown call_tmp[627483] "maybe param" "maybe type" "temp"
        (627486 'move' call_tmp[627483](80022 call chpl_by call_tmp[627466] call_tmp[627478]))
        const r[80024] "dead at end of block" "const" "insert auto destroy"
        (541572 'init var' r[80024] call_tmp[627483])
        (80027 'end of statement' first[79993] stride[80007])
        unknown call_tmp[627488] "expr temp" "maybe param" "maybe type" "temp"
        (627491 'move' call_tmp[627488](80036 call _cond_test debugChapelRange[64198]))
        if call_tmp[627488]
        {
          (80034 call chpl_debug_writeln "Expanded range = " r[80024])
          (476670 'end of statement' r[80024])
        }
        {
          unknown _indexOfInterest[80046] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80047] "expr temp" "temp"
          (80056 'move' _iterator[80047](80054 call _getIterator r[80024]))
          Defer
          {
            {
              (80072 call _freeIterator _iterator[80047])
            }
          }
          { scopeless type
            (80061 'move' _indexOfInterest[80046](80058 call iteratorIndex _iterator[80047]))
          }
          ForLoop[80048]
          {
            unknown i[80065] "index var" "insert auto destroy"
            (476673 'end of statement')
            (80067 'move' i[80065] _indexOfInterest[80046])
            (476674 'end of statement' i[80065])
            unknown yret[511880] "YVV" "temp"
            (511883 'move' yret[511880](511882 'deref' i[80065]))
            (511885 yield yret[511880])
            (476676 'end of statement' i[80065])
            label _continueLabel[80051]
            _indexOfInterest[80046]
            _iterator[80047]
          }
          label _breakLabel[80052]
        }
      }
      {
        unknown call_tmp[627493] "expr temp" "maybe param" "maybe type" "temp"
        (627496 'move' call_tmp[627493](80080 call chpl_build_high_bounded_range first[79993]))
        unknown call_tmp[627500] "expr temp" "maybe param" "maybe type" "temp"
        (627503 'move' call_tmp[627500](376186 call strType _mt[243] this[79156]))
        unknown call_tmp[627505] "expr temp" "maybe param" "maybe type" "temp"
        (627508 'move' call_tmp[627505](80084 call _cast call_tmp[627500] stride[80007]))
        unknown call_tmp[627510] "maybe param" "maybe type" "temp"
        (627513 'move' call_tmp[627510](80086 call chpl_by call_tmp[627493] call_tmp[627505]))
        const r[80088] "dead at end of block" "const" "insert auto destroy"
        (541574 'init var' r[80088] call_tmp[627510])
        (80091 'end of statement' first[79993] stride[80007])
        unknown call_tmp[627515] "expr temp" "maybe param" "maybe type" "temp"
        (627518 'move' call_tmp[627515](80100 call _cond_test debugChapelRange[64198]))
        if call_tmp[627515]
        {
          (80098 call chpl_debug_writeln "Expanded range = " r[80088])
          (476680 'end of statement' r[80088])
        }
        {
          unknown _indexOfInterest[80110] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80111] "expr temp" "temp"
          (80120 'move' _iterator[80111](80118 call _getIterator r[80088]))
          Defer
          {
            {
              (80136 call _freeIterator _iterator[80111])
            }
          }
          { scopeless type
            (80125 'move' _indexOfInterest[80110](80122 call iteratorIndex _iterator[80111]))
          }
          ForLoop[80112]
          {
            unknown i[80129] "index var" "insert auto destroy"
            (476683 'end of statement')
            (80131 'move' i[80129] _indexOfInterest[80110])
            (476684 'end of statement' i[80129])
            unknown yret[511887] "YVV" "temp"
            (511890 'move' yret[511887](511889 'deref' i[80129]))
            (511892 yield yret[511887])
            (476686 'end of statement' i[80129])
            label _continueLabel[80115]
            _indexOfInterest[80110]
            _iterator[80111]
          }
          label _breakLabel[80116]
        }
      }
    }
    (511864 return ret[511862])
  }
  where {
    (79166 call == tag[79149] follower[449])
  }
  function _cast[80160](arg t[80157]:string[26], arg x[80166]:range[64319](?)) : _unknown[51]
  {
    unknown ret[511896] "RVV" "temp"
    unknown ret[80170] "dead at end of block" "insert auto destroy"
    (541576 'default init var' ret[80170] string[26])
    (80173 'end of statement')
    unknown call_tmp[627522] "expr temp" "maybe param" "maybe type" "temp"
    (627525 'move' call_tmp[627522](80180 call(80176 call (partial) hasLowBound _mt[243] x[80166])))
    unknown call_tmp[627527] "expr temp" "maybe param" "maybe type" "temp"
    (627530 'move' call_tmp[627527](80192 call _cond_test call_tmp[627522]))
    if call_tmp[627527]
    {
      unknown call_tmp[627534] "expr temp" "maybe param" "maybe type" "temp"
      (627537 'move' call_tmp[627534](80183 call low _mt[243] x[80166]))
      unknown call_tmp[627539] "expr temp" "maybe param" "maybe type" "temp"
      (627542 'move' call_tmp[627539](80187 call _cast string[26] call_tmp[627534]))
      (80189 call += ret[80170] call_tmp[627539])
      (476688 'end of statement' ret[80170])
    }
    (80215 call += ret[80170] "..")
    (476690 'end of statement' ret[80170])
    unknown call_tmp[627546] "expr temp" "maybe param" "maybe type" "temp"
    (627549 'move' call_tmp[627546](80223 call(80219 call (partial) hasHighBound _mt[243] x[80166])))
    unknown call_tmp[627551] "expr temp" "maybe param" "maybe type" "temp"
    (627554 'move' call_tmp[627551](80235 call _cond_test call_tmp[627546]))
    if call_tmp[627551]
    {
      unknown call_tmp[627558] "expr temp" "maybe param" "maybe type" "temp"
      (627561 'move' call_tmp[627558](80226 call high _mt[243] x[80166]))
      unknown call_tmp[627563] "expr temp" "maybe param" "maybe type" "temp"
      (627566 'move' call_tmp[627563](80230 call _cast string[26] call_tmp[627558]))
      (80232 call += ret[80170] call_tmp[627563])
      (476692 'end of statement' ret[80170])
    }
    unknown call_tmp[627570] "expr temp" "maybe param" "maybe type" "temp"
    (627573 'move' call_tmp[627570](80241 call stride _mt[243] x[80166]))
    unknown call_tmp[627575] "expr temp" "maybe param" "maybe type" "temp"
    (627578 'move' call_tmp[627575](80245 call != call_tmp[627570] 1))
    unknown call_tmp[627580] "expr temp" "maybe param" "maybe type" "temp"
    (627583 'move' call_tmp[627580](80261 call _cond_test call_tmp[627575]))
    if call_tmp[627580]
    {
      unknown call_tmp[627587] "expr temp" "maybe param" "maybe type" "temp"
      (627590 'move' call_tmp[627587](80250 call stride _mt[243] x[80166]))
      unknown call_tmp[627592] "expr temp" "maybe param" "maybe type" "temp"
      (627595 'move' call_tmp[627592](80254 call _cast string[26] call_tmp[627587]))
      unknown call_tmp[627597] "expr temp" "maybe param" "maybe type" "temp"
      (627600 'move' call_tmp[627597](80256 call + " by " call_tmp[627592]))
      (80258 call += ret[80170] call_tmp[627597])
      (476694 'end of statement' ret[80170])
    }
    unknown alignCheckRange[80267] "dead at end of block" "insert auto destroy"
    (541578 'init var' alignCheckRange[80267] x[80166])
    (80270 'end of statement')
    (80278 call(80274 call (partial) normalizeAlignment _mt[243] alignCheckRange[80267]))
    (476696 'end of statement' alignCheckRange[80267])
    unknown call_tmp[627606] "expr temp" "maybe param" "maybe type" "temp"
    (627609 'move' call_tmp[627606](80287 call(80283 call (partial) isNaturallyAligned _mt[243] alignCheckRange[80267])))
    unknown call_tmp[627611] "expr temp" "maybe param" "maybe type" "temp"
    (627614 'move' call_tmp[627611](80288 call ! call_tmp[627606]))
    unknown call_tmp[627616] "expr temp" "maybe param" "maybe type" "temp"
    (627619 'move' call_tmp[627616](80330 call _cond_test call_tmp[627611]))
    if call_tmp[627616]
    {
      unknown call_tmp[627623] "expr temp" "maybe param" "maybe type" "temp"
      (627626 'move' call_tmp[627623](80311 call alignment _mt[243] x[80166]))
      unknown call_tmp[627628] "expr temp" "maybe param" "maybe type" "temp"
      (627631 'move' call_tmp[627628](80315 call chpl__idxToInt call_tmp[627623]))
      unknown call_tmp[627635] "expr temp" "maybe param" "maybe type" "temp"
      (627638 'move' call_tmp[627635](80318 call stride _mt[243] x[80166]))
      unknown call_tmp[627640] "expr temp" "maybe param" "maybe type" "temp"
      (627643 'move' call_tmp[627640](80321 call chpl__mod call_tmp[627628] call_tmp[627635]))
      unknown call_tmp[627645] "expr temp" "maybe param" "maybe type" "temp"
      (627648 'move' call_tmp[627645](80323 call _cast string[26] call_tmp[627640]))
      unknown call_tmp[627650] "expr temp" "maybe param" "maybe type" "temp"
      (627653 'move' call_tmp[627650](80325 call + " align " call_tmp[627645]))
      (80327 call += ret[80170] call_tmp[627650])
      (476698 'end of statement' ret[80170])
    }
    (511901 'move' ret[511896](511900 'deref' ret[80170]))
    gotoReturn _end__cast[511894] _end__cast[511894]
    (476700 'end of statement' ret[80170])
    label _end__cast[511894]
    (511898 return ret[511896])
  }
  function range[64319](?).normalizeAlignment[80343](arg _mt[80348]:_MT[238], ref arg this[80345]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown tmp[421367] "maybe param" "temp"
    (421378 'move' tmp[421367](376203 call stridable _mt[243] this[80345]))
    unknown call_tmp[627657] "expr temp" "maybe param" "maybe type" "temp"
    (627660 'move' call_tmp[627657](421380 call _cond_invalid tmp[421367]))
    if call_tmp[627657]
    {
      (421383 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559464] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559465] "maybe param" "temp"
    unknown call_tmp[627662] "expr temp" "maybe param" "maybe type" "temp"
    (627665 'move' call_tmp[627662](421368 call isTrue tmp[421367]))
    (559470 'move' tmp[559465](559468 call _cond_test call_tmp[627662]))
    if tmp[559465]
    {
      unknown tmp[559472] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627669] "expr temp" "maybe param" "maybe type" "temp"
      (627672 'move' call_tmp[627669](376207 call aligned _mt[243] this[80345]))
      unknown call_tmp[627674] "expr temp" "maybe param" "maybe type" "temp"
      (627677 'move' call_tmp[627674](80352 call ! call_tmp[627669]))
      (559474 'move' tmp[559472](421371 call isTrue call_tmp[627674]))
      (559479 'move' tmp[559464](559476 '_paramFoldLogical' tmp[559465] tmp[559472]))
    }
    {
      (559484 'move' tmp[559464](559481 '_paramFoldLogical' tmp[559465] 0))
    }
    unknown call_tmp[627679] "expr temp" "maybe param" "maybe type" "temp"
    (627682 'move' call_tmp[627679](80406 call _cond_test tmp[559464]))
    if call_tmp[627679]
    {
      unknown tmp[559576] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559577] "maybe param" "temp"
      unknown call_tmp[627684] "expr temp" "maybe param" "maybe type" "temp"
      (627687 'move' call_tmp[627684](80360 call isBoundedRange this[80345]))
      (559582 'move' tmp[559577](559580 call _cond_test call_tmp[627684]))
      if tmp[559577]
      {
        unknown tmp[559491] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559492] "maybe param" "temp"
        unknown call_tmp[627691] "expr temp" "maybe param" "maybe type" "temp"
        (627694 'move' call_tmp[627691](376217 call stride _mt[243] this[80345]))
        unknown call_tmp[627696] "expr temp" "maybe param" "maybe type" "temp"
        (627699 'move' call_tmp[627696](80363 call > call_tmp[627691] 0))
        (559497 'move' tmp[559492](559495 call _cond_test call_tmp[627696]))
        if tmp[559492]
        {
          unknown tmp[559499] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559501 'move' tmp[559499](376222 call _low _mt[243] this[80345]))
          (559506 'move' tmp[559491](559503 '_paramFoldLogical' tmp[559492] tmp[559499]))
        }
        {
          unknown tmp[559508] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559510 'move' tmp[559508](376227 call _high _mt[243] this[80345]))
          (559515 'move' tmp[559491](559512 '_paramFoldLogical' tmp[559492] tmp[559508]))
        }
        (559587 'move' tmp[559576](559584 '_paramFoldLogical' tmp[559577] tmp[559491]))
      }
      {
        unknown tmp[559549] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559550] "maybe param" "temp"
        unknown call_tmp[627707] "expr temp" "maybe param" "maybe type" "temp"
        (627710 'move' call_tmp[627707](80371 call boundedType _mt[243] this[80345]))
        unknown call_tmp[627712] "expr temp" "maybe param" "maybe type" "temp"
        (627715 'move' call_tmp[627712](80378 call == call_tmp[627707] boundedLow[64210]))
        (559555 'move' tmp[559550](559553 call _cond_test call_tmp[627712]))
        if tmp[559550]
        {
          unknown tmp[559557] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559559 'move' tmp[559557](376232 call _low _mt[243] this[80345]))
          (559564 'move' tmp[559549](559561 '_paramFoldLogical' tmp[559550] tmp[559557]))
        }
        {
          unknown tmp[559522] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[559523] "maybe param" "temp"
          unknown call_tmp[627721] "expr temp" "maybe param" "maybe type" "temp"
          (627724 'move' call_tmp[627721](80382 call boundedType _mt[243] this[80345]))
          unknown call_tmp[627726] "expr temp" "maybe param" "maybe type" "temp"
          (627729 'move' call_tmp[627726](80389 call == call_tmp[627721] boundedHigh[64212]))
          (559528 'move' tmp[559523](559526 call _cond_test call_tmp[627726]))
          if tmp[559523]
          {
            unknown tmp[559530] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559532 'move' tmp[559530](376237 call _high _mt[243] this[80345]))
            (559537 'move' tmp[559522](559534 '_paramFoldLogical' tmp[559523] tmp[559530]))
          }
          {
            (559542 'move' tmp[559522](559539 '_paramFoldLogical' tmp[559523] 0))
          }
          (559569 'move' tmp[559549](559566 '_paramFoldLogical' tmp[559550] tmp[559522]))
        }
        (559592 'move' tmp[559576](559589 '_paramFoldLogical' tmp[559577] tmp[559549]))
      }
      unknown call_tmp[627735] "expr temp" "maybe param" "maybe type" "temp"
      (627738 'move' call_tmp[627735](376212 call _alignment _mt[243] this[80345]))
      (80402 call = call_tmp[627735] tmp[559576])
    }
    (511905 return _void[55])
  }
  function range[64319](?).chpl__unTranslate[80420](arg _mt[80425]:_MT[238], arg this[80422]:range[64319](?) :
  range[64319](?), arg i[80417] :
  (376241 call intIdxType _mt[243] this[80422])) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511909] "RVV" "temp"
    unknown call_tmp[627742] "expr temp" "maybe param" "maybe type" "temp"
    (627745 'move' call_tmp[627742](80429 call - this[80422] i[80417]))
    (511914 'move' ret[511909](511913 'deref' call_tmp[627742]))
    (511911 return ret[511909])
  }
  function range[64319](?).chpl__unTranslate[80441](arg _mt[80446]:_MT[238], arg this[80443]:range[64319](?) :
  range[64319](?), arg i[80439]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511918] "RVV" "temp"
    unknown call_tmp[627747] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627750 'move' call_tmp[627747](80450 'typeof' i[80439]))
    unknown call_tmp[627752] "expr temp" "maybe param" "maybe type" "temp"
    (627755 'move' call_tmp[627752](80452 call isIntType call_tmp[627747]))
    unknown call_tmp[627757] "expr temp" "maybe param" "maybe type" "temp"
    (627760 'move' call_tmp[627757](80468 call _cond_test call_tmp[627752]))
    if call_tmp[627757]
    {
      unknown call_tmp[627762] "expr temp" "maybe param" "maybe type" "temp"
      (627765 'move' call_tmp[627762](80455 call - this[80443] i[80439]))
      (511923 'move' ret[511918](511922 'deref' call_tmp[627762]))
      gotoReturn _end_chpl__unTranslate[511916] _end_chpl__unTranslate[511916]
    }
    {
      unknown call_tmp[627767] "expr temp" "maybe param" "maybe type" "temp"
      (627770 'move' call_tmp[627767](80463 call abs i[80439]))
      unknown call_tmp[627772] "expr temp" "maybe param" "maybe type" "temp"
      (627775 'move' call_tmp[627772](80464 call + this[80443] call_tmp[627767]))
      (511928 'move' ret[511918](511927 'deref' call_tmp[627772]))
      gotoReturn _end_chpl__unTranslate[511916] _end_chpl__unTranslate[511916]
    }
    label _end_chpl__unTranslate[511916]
    (511920 return ret[511918])
  }
  function chpl__hasAlignment[80486](arg r[80483]:range[64319](?)) : _unknown[51]
  {
    unknown ret[511934] "RVV" "temp"
    unknown tmp[421388] "maybe param" "temp"
    (421399 'move' tmp[421388](80493 call(80489 call (partial) hasLowBound _mt[243] r[80483])))
    unknown call_tmp[627779] "expr temp" "maybe param" "maybe type" "temp"
    (627782 'move' call_tmp[627779](421401 call _cond_invalid tmp[421388]))
    if call_tmp[627779]
    {
      (421404 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559599] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559600] "maybe param" "temp"
    unknown call_tmp[627784] "expr temp" "maybe param" "maybe type" "temp"
    (627787 'move' call_tmp[627784](421389 call isTrue tmp[421388]))
    (559605 'move' tmp[559600](559603 call _cond_test call_tmp[627784]))
    if tmp[559600]
    {
      unknown tmp[559607] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627791] "expr temp" "maybe param" "maybe type" "temp"
      (627794 'move' call_tmp[627791](80495 call stride _mt[243] r[80483]))
      unknown call_tmp[627796] "expr temp" "maybe param" "maybe type" "temp"
      (627799 'move' call_tmp[627796](80499 call >= call_tmp[627791] 2))
      (559609 'move' tmp[559607](421392 call isTrue call_tmp[627796]))
      (559614 'move' tmp[559599](559611 '_paramFoldLogical' tmp[559600] tmp[559607]))
    }
    {
      (559619 'move' tmp[559599](559616 '_paramFoldLogical' tmp[559600] 0))
    }
    unknown call_tmp[627801] "expr temp" "maybe param" "maybe type" "temp"
    (627804 'move' call_tmp[627801](80506 call _cond_test tmp[559599]))
    if call_tmp[627801]
    {
      (511939 'move' ret[511934](511938 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511932] _end_chpl__hasAlignment[511932]
    }
    unknown tmp[421409] "maybe param" "temp"
    (421420 'move' tmp[421409](80517 call(80513 call (partial) hasHighBound _mt[243] r[80483])))
    unknown call_tmp[627808] "expr temp" "maybe param" "maybe type" "temp"
    (627811 'move' call_tmp[627808](421422 call _cond_invalid tmp[421409]))
    if call_tmp[627808]
    {
      (421425 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559626] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559627] "maybe param" "temp"
    unknown call_tmp[627813] "expr temp" "maybe param" "maybe type" "temp"
    (627816 'move' call_tmp[627813](421410 call isTrue tmp[421409]))
    (559632 'move' tmp[559627](559630 call _cond_test call_tmp[627813]))
    if tmp[559627]
    {
      unknown tmp[559634] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627820] "expr temp" "maybe param" "maybe type" "temp"
      (627823 'move' call_tmp[627820](80519 call stride _mt[243] r[80483]))
      unknown call_tmp[627825] "expr temp" "maybe param" "maybe type" "temp"
      (627828 'move' call_tmp[627825](80523 call - 2))
      unknown call_tmp[627830] "expr temp" "maybe param" "maybe type" "temp"
      (627833 'move' call_tmp[627830](80525 call <= call_tmp[627820] call_tmp[627825]))
      (559636 'move' tmp[559634](421413 call isTrue call_tmp[627830]))
      (559641 'move' tmp[559626](559638 '_paramFoldLogical' tmp[559627] tmp[559634]))
    }
    {
      (559646 'move' tmp[559626](559643 '_paramFoldLogical' tmp[559627] 0))
    }
    unknown call_tmp[627835] "expr temp" "maybe param" "maybe type" "temp"
    (627838 'move' call_tmp[627835](80532 call _cond_test tmp[559626]))
    if call_tmp[627835]
    {
      (511944 'move' ret[511934](511943 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511932] _end_chpl__hasAlignment[511932]
    }
    (511949 'move' ret[511934](511948 'deref' 0))
    label _end_chpl__hasAlignment[511932]
    (511936 return ret[511934])
  }
  function chpl__mod[80548](arg dividend[80545]:integral[199](?), arg modulus[80551]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511953] "RVV" "temp"
    unknown call_tmp[627840] "expr temp" "maybe param" "maybe type" "temp"
    (627843 'move' call_tmp[627840](80557 call abs modulus[80551]))
    unknown call_tmp[627847] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627850 'move' call_tmp[627847](80562 'typeof' dividend[80545]))
    unknown call_tmp[627852] "maybe param" "maybe type" "temp"
    (627855 'move' call_tmp[627852](80564 call(80558 call (partial) safeCast _mt[243] call_tmp[627840]) call_tmp[627847]))
    const m[80565] "dead at end of block" "const" "insert auto destroy"
    (541580 'init var' m[80565] call_tmp[627852])
    (80568 'end of statement')
    unknown call_tmp[627857] "maybe param" "maybe type" "temp"
    (627860 'move' call_tmp[627857](80572 call % dividend[80545] m[80565]))
    unknown tmp[80574] "dead at end of block" "insert auto destroy"
    (541582 'init var' tmp[80574] call_tmp[627857])
    (80577 'end of statement' m[80565])
    unknown call_tmp[627862] "expr temp" "maybe param" "maybe type" "temp"
    (627865 'move' call_tmp[627862](80581 call isInt dividend[80545]))
    unknown call_tmp[627867] "expr temp" "maybe param" "maybe type" "temp"
    (627870 'move' call_tmp[627867](80596 call _cond_test call_tmp[627862]))
    if call_tmp[627867]
    {
      unknown call_tmp[627872] "expr temp" "maybe param" "maybe type" "temp"
      (627875 'move' call_tmp[627872](80584 call < tmp[80574] 0))
      unknown call_tmp[627877] "expr temp" "maybe param" "maybe type" "temp"
      (627880 'move' call_tmp[627877](80591 call _cond_test call_tmp[627872]))
      if call_tmp[627877]
      {
        (80588 call += tmp[80574] m[80565])
        (476713 'end of statement' tmp[80574] m[80565])
      }
    }
    (511958 'move' ret[511953](511957 'deref' tmp[80574]))
    gotoReturn _end_chpl__mod[511951] _end_chpl__mod[511951]
    (476716 'end of statement' tmp[80574])
    label _end_chpl__mod[511951]
    (511955 return ret[511953])
  }
  function chpl__diffMod[80612](arg minuend[80609]:integral[199](?), arg subtrahend[80615]:integral[199](?), arg modulus[80619]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511964] "RVV" "temp"
    unknown call_tmp[627882] "expr temp" "maybe param" "maybe type" "temp"
    (627885 'move' call_tmp[627882](80633 call abs modulus[80619]))
    unknown call_tmp[627889] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627892 'move' call_tmp[627889](80638 'typeof' minuend[80609]))
    unknown call_tmp[627894] "maybe param" "maybe type" "temp"
    (627897 'move' call_tmp[627894](80640 call(80634 call (partial) safeCast _mt[243] call_tmp[627882]) call_tmp[627889]))
    const m[80641] "dead at end of block" "const" "insert auto destroy"
    (541584 'init var' m[80641] call_tmp[627894])
    (80644 'end of statement')
    unknown call_tmp[627899] "maybe param" "maybe type" "temp"
    (627902 'move' call_tmp[627899](80650 call chpl__mod minuend[80609] m[80641]))
    unknown minMod[80651] "dead at end of block" "insert auto destroy"
    (541586 'init var' minMod[80651] call_tmp[627899])
    (80654 'end of statement')
    unknown call_tmp[627904] "maybe param" "maybe type" "temp"
    (627907 'move' call_tmp[627904](80659 call chpl__mod subtrahend[80615] m[80641]))
    unknown subMod[80660] "dead at end of block" "insert auto destroy"
    (541588 'init var' subMod[80660] call_tmp[627904])
    (80663 'end of statement' m[80641] m[80641])
    unknown tmp[559653] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559654] "maybe param" "temp"
    unknown call_tmp[627909] "expr temp" "maybe param" "maybe type" "temp"
    (627912 'move' call_tmp[627909](80666 call < minMod[80651] subMod[80660]))
    (559659 'move' tmp[559654](559657 call _cond_test call_tmp[627909]))
    if tmp[559654]
    {
      unknown tmp[559661] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627914] "expr temp" "maybe param" "maybe type" "temp"
      (627917 'move' call_tmp[627914](80671 call - subMod[80660] minMod[80651]))
      (559663 'move' tmp[559661](80673 call - m[80641] call_tmp[627914]))
      (559668 'move' tmp[559653](559665 '_paramFoldLogical' tmp[559654] tmp[559661]))
    }
    {
      unknown tmp[559670] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (559672 'move' tmp[559670](80677 call - minMod[80651] subMod[80660]))
      (559677 'move' tmp[559653](559674 '_paramFoldLogical' tmp[559654] tmp[559670]))
    }
    unknown call_tmp[627919] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627922 'move' call_tmp[627919](511968 'typeof' minuend[80609]))
    (511971 'move' ret[511964](511970 'coerce' tmp[559653] call_tmp[627919]))
    gotoReturn _end_chpl__diffMod[511962] _end_chpl__diffMod[511962]
    (476720 'end of statement' minMod[80651] subMod[80660] m[80641] subMod[80660] minMod[80651] minMod[80651] subMod[80660])
    label _end_chpl__diffMod[511962]
    (511966 return ret[511964])
  }
  where {
    unknown call_tmp[627924] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627927 'move' call_tmp[627924](80625 'typeof' minuend[80609]))
    unknown call_tmp[627929] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627932 'move' call_tmp[627929](80627 'typeof' subtrahend[80615]))
    (80628 call == call_tmp[627924] call_tmp[627929])
  }
  { scopeless type
    (80623 'typeof' minuend[80609])
  }
  function chpl__diffMod[80694](arg minuend[80691]:integral[199](?), arg subtrahend[80697]:integral[199](?), arg modulus[80701]:integral[199](?)) : _unknown[51] "no return value for void"
  {
    (80723 call compilerError "chpl__diffMod -- Operand types must match.")
    (511975 return _void[55])
  }
  function chpl__add[80735](arg a[80732]:_any[178](?), arg b[80738] :
  (459834 'typeof' a[80732]), arg resultType[80741]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511979] "RVV" "temp"
    unknown call_tmp[627934] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627937 'move' call_tmp[627934](459836 'typeof' a[80732]))
    unknown call_tmp[627939] "expr temp" "maybe param" "maybe type" "temp"
    (627942 'move' call_tmp[627939](80746 call isIntegralType call_tmp[627934]))
    unknown call_tmp[627944] "expr temp" "maybe param" "maybe type" "temp"
    (627947 'move' call_tmp[627944](80747 call ! call_tmp[627939]))
    unknown call_tmp[627949] "expr temp" "maybe param" "maybe type" "temp"
    (627952 'move' call_tmp[627949](80770 call _cond_test call_tmp[627944]))
    if call_tmp[627949]
    {
      (80768 call compilerError "Values must be of integral type.")
    }
    unknown tmp[421430] "maybe param" "temp"
    unknown tmp[421451] "maybe param" "temp"
    (421462 'move' tmp[421451](80778 call > a[80732] 0))
    unknown call_tmp[627954] "expr temp" "maybe param" "maybe type" "temp"
    (627957 'move' call_tmp[627954](421464 call _cond_invalid tmp[421451]))
    if call_tmp[627954]
    {
      (421467 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559684] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559685] "maybe param" "temp"
    unknown call_tmp[627959] "expr temp" "maybe param" "maybe type" "temp"
    (627962 'move' call_tmp[627959](421452 call isTrue tmp[421451]))
    (559690 'move' tmp[559685](559688 call _cond_test call_tmp[627959]))
    if tmp[559685]
    {
      unknown tmp[559692] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627964] "expr temp" "maybe param" "maybe type" "temp"
      (627967 'move' call_tmp[627964](80782 call > b[80738] 0))
      (559694 'move' tmp[559692](421455 call isTrue call_tmp[627964]))
      (559699 'move' tmp[559684](559696 '_paramFoldLogical' tmp[559685] tmp[559692]))
    }
    {
      (559704 'move' tmp[559684](559701 '_paramFoldLogical' tmp[559685] 0))
    }
    (421441 'move' tmp[421430] tmp[559684])
    unknown call_tmp[627969] "expr temp" "maybe param" "maybe type" "temp"
    (627972 'move' call_tmp[627969](421443 call _cond_invalid tmp[421430]))
    if call_tmp[627969]
    {
      (421446 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559711] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559712] "maybe param" "temp"
    unknown call_tmp[627974] "expr temp" "maybe param" "maybe type" "temp"
    (627977 'move' call_tmp[627974](421431 call isTrue tmp[421430]))
    (559717 'move' tmp[559712](559715 call _cond_test call_tmp[627974]))
    if tmp[559712]
    {
      unknown tmp[559719] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627979] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627982 'move' call_tmp[627979](459838 'typeof' a[80732]))
      unknown call_tmp[627984] "expr temp" "maybe param" "maybe type" "temp"
      (627987 'move' call_tmp[627984](80790 call max call_tmp[627979]))
      unknown call_tmp[627989] "expr temp" "maybe param" "maybe type" "temp"
      (627992 'move' call_tmp[627989](80792 call - call_tmp[627984] a[80732]))
      unknown call_tmp[627994] "expr temp" "maybe param" "maybe type" "temp"
      (627997 'move' call_tmp[627994](80794 call > b[80738] call_tmp[627989]))
      (559721 'move' tmp[559719](421434 call isTrue call_tmp[627994]))
      (559726 'move' tmp[559711](559723 '_paramFoldLogical' tmp[559712] tmp[559719]))
    }
    {
      (559731 'move' tmp[559711](559728 '_paramFoldLogical' tmp[559712] 0))
    }
    unknown call_tmp[627999] "expr temp" "maybe param" "maybe type" "temp"
    (628002 'move' call_tmp[627999](80804 call _cond_test tmp[559711]))
    if call_tmp[627999]
    {
      unknown call_tmp[628004] "expr temp" "maybe param" "maybe type" "temp"
      (628007 'move' call_tmp[628004](80801 call max resultType[80741]))
      (511984 'move' ret[511979](511983 'deref' call_tmp[628004]))
      gotoReturn _end_chpl__add[511977] _end_chpl__add[511977]
    }
    unknown tmp[421472] "maybe param" "temp"
    unknown tmp[421493] "maybe param" "temp"
    (421504 'move' tmp[421493](80811 call < a[80732] 0))
    unknown call_tmp[628009] "expr temp" "maybe param" "maybe type" "temp"
    (628012 'move' call_tmp[628009](421506 call _cond_invalid tmp[421493]))
    if call_tmp[628009]
    {
      (421509 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559738] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559739] "maybe param" "temp"
    unknown call_tmp[628014] "expr temp" "maybe param" "maybe type" "temp"
    (628017 'move' call_tmp[628014](421494 call isTrue tmp[421493]))
    (559744 'move' tmp[559739](559742 call _cond_test call_tmp[628014]))
    if tmp[559739]
    {
      unknown tmp[559746] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628019] "expr temp" "maybe param" "maybe type" "temp"
      (628022 'move' call_tmp[628019](80815 call < b[80738] 0))
      (559748 'move' tmp[559746](421497 call isTrue call_tmp[628019]))
      (559753 'move' tmp[559738](559750 '_paramFoldLogical' tmp[559739] tmp[559746]))
    }
    {
      (559758 'move' tmp[559738](559755 '_paramFoldLogical' tmp[559739] 0))
    }
    (421483 'move' tmp[421472] tmp[559738])
    unknown call_tmp[628024] "expr temp" "maybe param" "maybe type" "temp"
    (628027 'move' call_tmp[628024](421485 call _cond_invalid tmp[421472]))
    if call_tmp[628024]
    {
      (421488 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559765] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559766] "maybe param" "temp"
    unknown call_tmp[628029] "expr temp" "maybe param" "maybe type" "temp"
    (628032 'move' call_tmp[628029](421473 call isTrue tmp[421472]))
    (559771 'move' tmp[559766](559769 call _cond_test call_tmp[628029]))
    if tmp[559766]
    {
      unknown tmp[559773] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628034] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (628037 'move' call_tmp[628034](459840 'typeof' a[80732]))
      unknown call_tmp[628039] "expr temp" "maybe param" "maybe type" "temp"
      (628042 'move' call_tmp[628039](80823 call min call_tmp[628034]))
      unknown call_tmp[628044] "expr temp" "maybe param" "maybe type" "temp"
      (628047 'move' call_tmp[628044](80825 call - call_tmp[628039] a[80732]))
      unknown call_tmp[628049] "expr temp" "maybe param" "maybe type" "temp"
      (628052 'move' call_tmp[628049](80827 call < b[80738] call_tmp[628044]))
      (559775 'move' tmp[559773](421476 call isTrue call_tmp[628049]))
      (559780 'move' tmp[559765](559777 '_paramFoldLogical' tmp[559766] tmp[559773]))
    }
    {
      (559785 'move' tmp[559765](559782 '_paramFoldLogical' tmp[559766] 0))
    }
    unknown call_tmp[628054] "expr temp" "maybe param" "maybe type" "temp"
    (628057 'move' call_tmp[628054](80837 call _cond_test tmp[559765]))
    if call_tmp[628054]
    {
      unknown call_tmp[628059] "expr temp" "maybe param" "maybe type" "temp"
      (628062 'move' call_tmp[628059](80834 call min resultType[80741]))
      (511989 'move' ret[511979](511988 'deref' call_tmp[628059]))
      gotoReturn _end_chpl__add[511977] _end_chpl__add[511977]
    }
    unknown call_tmp[628064] "expr temp" "maybe param" "maybe type" "temp"
    (628067 'move' call_tmp[628064](80845 call isUintType resultType[80741]))
    unknown call_tmp[628069] "expr temp" "maybe param" "maybe type" "temp"
    (628072 'move' call_tmp[628069](80922 call _cond_test call_tmp[628064]))
    if call_tmp[628069]
    {
      unknown tmp[421514] "maybe param" "temp"
      unknown tmp[421535] "maybe param" "temp"
      unknown tmp[421556] "maybe param" "temp"
      (421567 'move' tmp[421556](80848 call < a[80732] 0))
      unknown call_tmp[628074] "expr temp" "maybe param" "maybe type" "temp"
      (628077 'move' call_tmp[628074](421569 call _cond_invalid tmp[421556]))
      if call_tmp[628074]
      {
        (421572 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559792] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559793] "maybe param" "temp"
      unknown call_tmp[628079] "expr temp" "maybe param" "maybe type" "temp"
      (628082 'move' call_tmp[628079](421557 call isTrue tmp[421556]))
      (559798 'move' tmp[559793](559796 call _cond_test call_tmp[628079]))
      if tmp[559793]
      {
        unknown tmp[559800] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628084] "expr temp" "maybe param" "maybe type" "temp"
        (628087 'move' call_tmp[628084](80852 call > b[80738] 0))
        (559802 'move' tmp[559800](421560 call isTrue call_tmp[628084]))
        (559807 'move' tmp[559792](559804 '_paramFoldLogical' tmp[559793] tmp[559800]))
      }
      {
        (559812 'move' tmp[559792](559809 '_paramFoldLogical' tmp[559793] 0))
      }
      (421546 'move' tmp[421535] tmp[559792])
      unknown call_tmp[628089] "expr temp" "maybe param" "maybe type" "temp"
      (628092 'move' call_tmp[628089](421548 call _cond_invalid tmp[421535]))
      if call_tmp[628089]
      {
        (421551 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559846] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559847] "maybe param" "temp"
      unknown call_tmp[628094] "expr temp" "maybe param" "maybe type" "temp"
      (628097 'move' call_tmp[628094](421536 call isTrue tmp[421535]))
      (559852 'move' tmp[559847](559850 call _cond_test call_tmp[628094]))
      if tmp[559847]
      {
        unknown tmp[421577] "maybe param" "temp"
        unknown call_tmp[628099] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628102 'move' call_tmp[628099](459842 'typeof' a[80732]))
        unknown call_tmp[628104] "expr temp" "maybe param" "maybe type" "temp"
        (628107 'move' call_tmp[628104](80860 call min call_tmp[628099]))
        (421588 'move' tmp[421577](80861 call == a[80732] call_tmp[628104]))
        unknown call_tmp[628109] "expr temp" "maybe param" "maybe type" "temp"
        (628112 'move' call_tmp[628109](421590 call _cond_invalid tmp[421577]))
        if call_tmp[628109]
        {
          (421593 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[559819] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559820] "maybe param" "temp"
        unknown call_tmp[628114] "expr temp" "maybe param" "maybe type" "temp"
        (628117 'move' call_tmp[628114](421578 call isTrue tmp[421577]))
        (559825 'move' tmp[559820](559823 call _cond_test call_tmp[628114]))
        if tmp[559820]
        {
          (559830 'move' tmp[559819](559827 '_paramFoldLogical' tmp[559820] 1))
        }
        {
          unknown tmp[559832] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628119] "expr temp" "maybe param" "maybe type" "temp"
          (628122 'move' call_tmp[628119](80866 call abs a[80732]))
          unknown call_tmp[628124] "expr temp" "maybe param" "maybe type" "temp"
          (628127 'move' call_tmp[628124](80870 call abs b[80738]))
          unknown call_tmp[628129] "expr temp" "maybe param" "maybe type" "temp"
          (628132 'move' call_tmp[628129](80871 call > call_tmp[628119] call_tmp[628124]))
          (559834 'move' tmp[559832](421582 call isTrue call_tmp[628129]))
          (559839 'move' tmp[559819](559836 '_paramFoldLogical' tmp[559820] tmp[559832]))
        }
        unknown tmp[559854] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559856 'move' tmp[559854](421539 call isTrue tmp[559819]))
        (559861 'move' tmp[559846](559858 '_paramFoldLogical' tmp[559847] tmp[559854]))
      }
      {
        (559866 'move' tmp[559846](559863 '_paramFoldLogical' tmp[559847] 0))
      }
      (421525 'move' tmp[421514] tmp[559846])
      unknown call_tmp[628134] "expr temp" "maybe param" "maybe type" "temp"
      (628137 'move' call_tmp[628134](421527 call _cond_invalid tmp[421514]))
      if call_tmp[628134]
      {
        (421530 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559954] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559955] "maybe param" "temp"
      unknown call_tmp[628139] "expr temp" "maybe param" "maybe type" "temp"
      (628142 'move' call_tmp[628139](421515 call isTrue tmp[421514]))
      (559960 'move' tmp[559955](559958 call _cond_test call_tmp[628139]))
      if tmp[559955]
      {
        (559965 'move' tmp[559954](559962 '_paramFoldLogical' tmp[559955] 1))
      }
      {
        unknown tmp[421598] "maybe param" "temp"
        unknown tmp[421619] "maybe param" "temp"
        (421630 'move' tmp[421619](80879 call > a[80732] 0))
        unknown call_tmp[628144] "expr temp" "maybe param" "maybe type" "temp"
        (628147 'move' call_tmp[628144](421632 call _cond_invalid tmp[421619]))
        if call_tmp[628144]
        {
          (421635 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559873] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559874] "maybe param" "temp"
        unknown call_tmp[628149] "expr temp" "maybe param" "maybe type" "temp"
        (628152 'move' call_tmp[628149](421620 call isTrue tmp[421619]))
        (559879 'move' tmp[559874](559877 call _cond_test call_tmp[628149]))
        if tmp[559874]
        {
          unknown tmp[559881] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628154] "expr temp" "maybe param" "maybe type" "temp"
          (628157 'move' call_tmp[628154](80883 call < b[80738] 0))
          (559883 'move' tmp[559881](421623 call isTrue call_tmp[628154]))
          (559888 'move' tmp[559873](559885 '_paramFoldLogical' tmp[559874] tmp[559881]))
        }
        {
          (559893 'move' tmp[559873](559890 '_paramFoldLogical' tmp[559874] 0))
        }
        (421609 'move' tmp[421598] tmp[559873])
        unknown call_tmp[628159] "expr temp" "maybe param" "maybe type" "temp"
        (628162 'move' call_tmp[628159](421611 call _cond_invalid tmp[421598]))
        if call_tmp[628159]
        {
          (421614 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559927] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559928] "maybe param" "temp"
        unknown call_tmp[628164] "expr temp" "maybe param" "maybe type" "temp"
        (628167 'move' call_tmp[628164](421599 call isTrue tmp[421598]))
        (559933 'move' tmp[559928](559931 call _cond_test call_tmp[628164]))
        if tmp[559928]
        {
          unknown tmp[421640] "maybe param" "temp"
          unknown call_tmp[628169] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628172 'move' call_tmp[628169](459844 'typeof' a[80732]))
          unknown call_tmp[628174] "expr temp" "maybe param" "maybe type" "temp"
          (628177 'move' call_tmp[628174](80891 call min call_tmp[628169]))
          (421651 'move' tmp[421640](80892 call == b[80738] call_tmp[628174]))
          unknown call_tmp[628179] "expr temp" "maybe param" "maybe type" "temp"
          (628182 'move' call_tmp[628179](421653 call _cond_invalid tmp[421640]))
          if call_tmp[628179]
          {
            (421656 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559900] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559901] "maybe param" "temp"
          unknown call_tmp[628184] "expr temp" "maybe param" "maybe type" "temp"
          (628187 'move' call_tmp[628184](421641 call isTrue tmp[421640]))
          (559906 'move' tmp[559901](559904 call _cond_test call_tmp[628184]))
          if tmp[559901]
          {
            (559911 'move' tmp[559900](559908 '_paramFoldLogical' tmp[559901] 1))
          }
          {
            unknown tmp[559913] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[628189] "expr temp" "maybe param" "maybe type" "temp"
            (628192 'move' call_tmp[628189](80897 call abs b[80738]))
            unknown call_tmp[628194] "expr temp" "maybe param" "maybe type" "temp"
            (628197 'move' call_tmp[628194](80901 call abs a[80732]))
            unknown call_tmp[628199] "expr temp" "maybe param" "maybe type" "temp"
            (628202 'move' call_tmp[628199](80902 call > call_tmp[628189] call_tmp[628194]))
            (559915 'move' tmp[559913](421645 call isTrue call_tmp[628199]))
            (559920 'move' tmp[559900](559917 '_paramFoldLogical' tmp[559901] tmp[559913]))
          }
          unknown tmp[559935] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559937 'move' tmp[559935](421602 call isTrue tmp[559900]))
          (559942 'move' tmp[559927](559939 '_paramFoldLogical' tmp[559928] tmp[559935]))
        }
        {
          (559947 'move' tmp[559927](559944 '_paramFoldLogical' tmp[559928] 0))
        }
        unknown tmp[559967] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559969 'move' tmp[559967](421519 call isTrue tmp[559927]))
        (559974 'move' tmp[559954](559971 '_paramFoldLogical' tmp[559955] tmp[559967]))
      }
      unknown call_tmp[628204] "expr temp" "maybe param" "maybe type" "temp"
      (628207 'move' call_tmp[628204](80916 call _cond_test tmp[559954]))
      if call_tmp[628204]
      {
        unknown call_tmp[628209] "expr temp" "maybe param" "maybe type" "temp"
        (628212 'move' call_tmp[628209](80912 call _cast resultType[80741] 0))
        (511994 'move' ret[511979](511993 'deref' call_tmp[628209]))
        gotoReturn _end_chpl__add[511977] _end_chpl__add[511977]
      }
    }
    unknown call_tmp[628214] "expr temp" "maybe param" "maybe type" "temp"
    (628217 'move' call_tmp[628214](80928 call + a[80732] b[80738]))
    unknown call_tmp[628219] "expr temp" "maybe param" "maybe type" "temp"
    (628222 'move' call_tmp[628219](80931 call _cast resultType[80741] call_tmp[628214]))
    (511999 'move' ret[511979](511998 'deref' call_tmp[628219]))
    label _end_chpl__add[511977]
    (511981 return ret[511979])
  }
  function chpl__addRangeStrides[80941](arg start[80939]:_any[178](?), arg stride[80943]:_any[178](?), arg count[80945]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512030] "RVV" "temp"
    function convert[80953](arg a[80951]:_any[178](?), arg b[80955]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[512003] "RVV" "param" "temp"
      unknown tmp[421661] "maybe param" "temp"
      unknown tmp[421682] "maybe param" "temp"
      unknown call_tmp[628224] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (628227 'move' call_tmp[628224](80958 'typeof' a[80951]))
      unknown call_tmp[628229] "expr temp" "maybe param" "maybe type" "temp"
      (628232 'move' call_tmp[628229](80962 call int(64)[13] 64))
      (421693 'move' tmp[421682](80963 call == call_tmp[628224] call_tmp[628229]))
      unknown call_tmp[628234] "expr temp" "maybe param" "maybe type" "temp"
      (628237 'move' call_tmp[628234](421695 call _cond_invalid tmp[421682]))
      if call_tmp[628234]
      {
        (421698 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559981] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559982] "maybe param" "temp"
      unknown call_tmp[628239] "expr temp" "maybe param" "maybe type" "temp"
      (628242 'move' call_tmp[628239](421683 call isTrue tmp[421682]))
      (559987 'move' tmp[559982](559985 call _cond_test call_tmp[628239]))
      if tmp[559982]
      {
        unknown tmp[559989] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628244] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628247 'move' call_tmp[628244](80966 'typeof' b[80955]))
        unknown call_tmp[628249] "expr temp" "maybe param" "maybe type" "temp"
        (628252 'move' call_tmp[628249](80970 call uint(64)[115] 64))
        unknown call_tmp[628254] "expr temp" "maybe param" "maybe type" "temp"
        (628257 'move' call_tmp[628254](80971 call == call_tmp[628244] call_tmp[628249]))
        (559991 'move' tmp[559989](421686 call isTrue call_tmp[628254]))
        (559996 'move' tmp[559981](559993 '_paramFoldLogical' tmp[559982] tmp[559989]))
      }
      {
        (560001 'move' tmp[559981](559998 '_paramFoldLogical' tmp[559982] 0))
      }
      (421672 'move' tmp[421661] tmp[559981])
      unknown call_tmp[628259] "expr temp" "maybe param" "maybe type" "temp"
      (628262 'move' call_tmp[628259](421674 call _cond_invalid tmp[421661]))
      if call_tmp[628259]
      {
        (421677 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560035] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560036] "maybe param" "temp"
      unknown call_tmp[628264] "expr temp" "maybe param" "maybe type" "temp"
      (628267 'move' call_tmp[628264](421662 call isTrue tmp[421661]))
      (560041 'move' tmp[560036](560039 call _cond_test call_tmp[628264]))
      if tmp[560036]
      {
        (560046 'move' tmp[560035](560043 '_paramFoldLogical' tmp[560036] 1))
      }
      {
        unknown tmp[421703] "maybe param" "temp"
        unknown call_tmp[628269] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628272 'move' call_tmp[628269](80976 'typeof' a[80951]))
        unknown call_tmp[628274] "expr temp" "maybe param" "maybe type" "temp"
        (628277 'move' call_tmp[628274](80980 call uint(64)[115] 64))
        (421714 'move' tmp[421703](80981 call == call_tmp[628269] call_tmp[628274]))
        unknown call_tmp[628279] "expr temp" "maybe param" "maybe type" "temp"
        (628282 'move' call_tmp[628279](421716 call _cond_invalid tmp[421703]))
        if call_tmp[628279]
        {
          (421719 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[560008] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560009] "maybe param" "temp"
        unknown call_tmp[628284] "expr temp" "maybe param" "maybe type" "temp"
        (628287 'move' call_tmp[628284](421704 call isTrue tmp[421703]))
        (560014 'move' tmp[560009](560012 call _cond_test call_tmp[628284]))
        if tmp[560009]
        {
          unknown tmp[560016] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628289] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628292 'move' call_tmp[628289](80984 'typeof' b[80955]))
          unknown call_tmp[628294] "expr temp" "maybe param" "maybe type" "temp"
          (628297 'move' call_tmp[628294](80988 call int(64)[13] 64))
          unknown call_tmp[628299] "expr temp" "maybe param" "maybe type" "temp"
          (628302 'move' call_tmp[628299](80989 call == call_tmp[628289] call_tmp[628294]))
          (560018 'move' tmp[560016](421707 call isTrue call_tmp[628299]))
          (560023 'move' tmp[560008](560020 '_paramFoldLogical' tmp[560009] tmp[560016]))
        }
        {
          (560028 'move' tmp[560008](560025 '_paramFoldLogical' tmp[560009] 0))
        }
        unknown tmp[560048] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560050 'move' tmp[560048](421666 call isTrue tmp[560008]))
        (560055 'move' tmp[560035](560052 '_paramFoldLogical' tmp[560036] tmp[560048]))
      }
      (512008 'move' ret[512003](512007 'deref' tmp[560035]))
      (512005 return ret[512003])
    }
    function mul[81005](arg a[81003]:_any[178](?), arg b[81007]:_any[178](?)) : _unknown[51]
    {
      unknown ret[512012] "RVV" "temp"
      unknown tmp[560062] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560063] "maybe param" "temp"
      unknown call_tmp[628304] "expr temp" "maybe param" "maybe type" "temp"
      (628307 'move' call_tmp[628304](81013 call convert a[81003] b[81007]))
      (560068 'move' tmp[560063](560066 call _cond_test call_tmp[628304]))
      if tmp[560063]
      {
        unknown tmp[560070] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628309] "expr temp" "maybe param" "maybe type" "temp"
        (628312 'move' call_tmp[628309](81018 call int(64)[13] 64))
        unknown call_tmp[628314] "expr temp" "maybe param" "maybe type" "temp"
        (628317 'move' call_tmp[628314](81019 call _cast call_tmp[628309] a[81003]))
        unknown call_tmp[628319] "expr temp" "maybe param" "maybe type" "temp"
        (628322 'move' call_tmp[628319](81025 call int(64)[13] 64))
        unknown call_tmp[628324] "expr temp" "maybe param" "maybe type" "temp"
        (628327 'move' call_tmp[628324](81026 call _cast call_tmp[628319] b[81007]))
        (560072 'move' tmp[560070](81028 call * call_tmp[628314] call_tmp[628324]))
        (560077 'move' tmp[560062](560074 '_paramFoldLogical' tmp[560063] tmp[560070]))
      }
      {
        unknown tmp[560079] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560081 'move' tmp[560079](81032 call * a[81003] b[81007]))
        (560086 'move' tmp[560062](560083 '_paramFoldLogical' tmp[560063] tmp[560079]))
      }
      (512017 'move' ret[512012](512016 'deref' tmp[560062]))
      (512014 return ret[512012])
    }
    function add[81046](arg a[81044]:_any[178](?), arg b[81048]:_any[178](?)) : _unknown[51]
    {
      unknown ret[512021] "RVV" "temp"
      unknown tmp[560093] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560094] "maybe param" "temp"
      unknown call_tmp[628329] "expr temp" "maybe param" "maybe type" "temp"
      (628332 'move' call_tmp[628329](81054 call convert a[81044] b[81048]))
      (560099 'move' tmp[560094](560097 call _cond_test call_tmp[628329]))
      if tmp[560094]
      {
        unknown tmp[560101] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628334] "expr temp" "maybe param" "maybe type" "temp"
        (628337 'move' call_tmp[628334](81059 call int(64)[13] 64))
        unknown call_tmp[628339] "expr temp" "maybe param" "maybe type" "temp"
        (628342 'move' call_tmp[628339](81060 call _cast call_tmp[628334] a[81044]))
        unknown call_tmp[628344] "expr temp" "maybe param" "maybe type" "temp"
        (628347 'move' call_tmp[628344](81066 call int(64)[13] 64))
        unknown call_tmp[628349] "expr temp" "maybe param" "maybe type" "temp"
        (628352 'move' call_tmp[628349](81067 call _cast call_tmp[628344] b[81048]))
        (560103 'move' tmp[560101](81069 call + call_tmp[628339] call_tmp[628349]))
        (560108 'move' tmp[560093](560105 '_paramFoldLogical' tmp[560094] tmp[560101]))
      }
      {
        unknown tmp[560110] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560112 'move' tmp[560110](81073 call + a[81044] b[81048]))
        (560117 'move' tmp[560093](560114 '_paramFoldLogical' tmp[560094] tmp[560110]))
      }
      (512026 'move' ret[512021](512025 'deref' tmp[560093]))
      (512023 return ret[512021])
    }
    unknown call_tmp[628354] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628357 'move' call_tmp[628354](81093 'typeof' start[80939]))
    unknown call_tmp[628359] "expr temp" "maybe param" "maybe type" "temp"
    (628362 'move' call_tmp[628359](81090 call mul stride[80943] count[80945]))
    unknown call_tmp[628364] "expr temp" "maybe param" "maybe type" "temp"
    (628367 'move' call_tmp[628364](81091 call add start[80939] call_tmp[628359]))
    unknown call_tmp[628369] "expr temp" "maybe param" "maybe type" "temp"
    (628372 'move' call_tmp[628369](81094 call _cast call_tmp[628354] call_tmp[628364]))
    unknown call_tmp[628374] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628377 'move' call_tmp[628374](512034 'typeof' start[80939]))
    (512037 'move' ret[512030](512036 'coerce' call_tmp[628369] call_tmp[628374]))
    (512032 return ret[512030])
  }
  { scopeless type
    (80948 'typeof' start[80939])
  }
  function chpl__extendedEuclidHelper[81105](arg u[81103]:_any[178](?), arg v[81107]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512041] "RVV" "temp"
    unknown call_tmp[628379] "maybe param" "maybe type" "temp" "type variable"
    (628382 'move' call_tmp[628379](81110 'typeof' u[81103]))
    unknown zero[81112] "dead at end of block" "insert auto destroy"
    (541590 'init var' zero[81112] 0 call_tmp[628379])
    (81115 'end of statement')
    unknown call_tmp[628384] "maybe param" "maybe type" "temp" "type variable"
    (628387 'move' call_tmp[628384](81118 'typeof' u[81103]))
    unknown one[81120] "dead at end of block" "insert auto destroy"
    (541592 'init var' one[81120] 1 call_tmp[628384])
    (81123 'end of statement')
    unknown call_tmp[628389] "maybe param" "maybe type" "temp"
    (628392 'move' call_tmp[628389](81128 call _build_tuple one[81120] zero[81112] u[81103]))
    unknown U[81130] "dead at end of block" "insert auto destroy"
    (541594 'init var' U[81130] call_tmp[628389])
    (81133 'end of statement')
    unknown call_tmp[628394] "maybe param" "maybe type" "temp"
    (628397 'move' call_tmp[628394](81138 call _build_tuple zero[81112] one[81120] v[81107]))
    unknown V[81140] "dead at end of block" "insert auto destroy"
    (541596 'init var' V[81140] call_tmp[628394])
    (81143 'end of statement' one[81120] zero[81112] zero[81112] one[81120])
    {
      unknown tmp[81192] "temp"
      unknown call_tmp[628399] "expr temp" "maybe param" "maybe type" "temp"
      (628402 'move' call_tmp[628399](81217 call V[81140] 2))
      unknown call_tmp[628404] "expr temp" "maybe param" "maybe type" "temp"
      (628407 'move' call_tmp[628404](81215 call != call_tmp[628399] 0))
      (81220 'move' tmp[81192](81213 call _cond_test call_tmp[628404]))
      WhileDo[81197]
      {
        {
          unknown oldU[81152] "dead at end of block" "insert auto destroy"
          (541598 'init var' oldU[81152] U[81130])
          (81155 'end of statement')
          unknown call_tmp[628409] "expr temp" "maybe param" "maybe type" "temp"
          (628412 'move' call_tmp[628409](81160 call U[81130] 2))
          unknown call_tmp[628414] "expr temp" "maybe param" "maybe type" "temp"
          (628417 'move' call_tmp[628414](81164 call V[81140] 2))
          unknown call_tmp[628419] "maybe param" "maybe type" "temp"
          (628422 'move' call_tmp[628419](81165 call / call_tmp[628409] call_tmp[628414]))
          unknown q[81167] "dead at end of block" "insert auto destroy"
          (541600 'init var' q[81167] call_tmp[628419])
          (81170 'end of statement' U[81130] U[81130] V[81140])
          (81173 call = U[81130] V[81140])
          (476754 'end of statement' U[81130] V[81140])
          unknown call_tmp[628424] "expr temp" "maybe param" "maybe type" "temp"
          (628427 'move' call_tmp[628424](81183 call _build_tuple q[81167] q[81167] q[81167]))
          unknown call_tmp[628429] "expr temp" "maybe param" "maybe type" "temp"
          (628432 'move' call_tmp[628429](81185 call * V[81140] call_tmp[628424]))
          unknown call_tmp[628434] "expr temp" "maybe param" "maybe type" "temp"
          (628437 'move' call_tmp[628434](81187 call - oldU[81152] call_tmp[628429]))
          (81189 call = V[81140] call_tmp[628434])
          (476757 'end of statement' V[81140] oldU[81152] V[81140] q[81167] q[81167] q[81167])
        }
        label _continueLabel[81195]
        unknown call_tmp[628439] "expr temp" "maybe param" "maybe type" "temp"
        (628442 'move' call_tmp[628439](81205 call V[81140] 2))
        unknown call_tmp[628444] "expr temp" "maybe param" "maybe type" "temp"
        (628447 'move' call_tmp[628444](81203 call != call_tmp[628439] 0))
        (81208 'move' tmp[81192](81201 call _cond_test call_tmp[628444]))
        tmp[81192]
      }
      label _breakLabel[81196]
    }
    unknown call_tmp[628449] "expr temp" "maybe param" "maybe type" "temp"
    (628452 'move' call_tmp[628449](81226 call U[81130] 2))
    unknown call_tmp[628454] "expr temp" "maybe param" "maybe type" "temp"
    (628457 'move' call_tmp[628454](81230 call U[81130] 0))
    unknown call_tmp[628459] "expr temp" "maybe param" "maybe type" "temp"
    (628462 'move' call_tmp[628459](81232 call _build_tuple call_tmp[628449] call_tmp[628454]))
    (512046 'move' ret[512041](512045 'deref' call_tmp[628459]))
    gotoReturn _end_chpl__extendedEuclidHelper[512039] _end_chpl__extendedEuclidHelper[512039]
    (476764 'end of statement' U[81130] U[81130])
    label _end_chpl__extendedEuclidHelper[512039]
    (512043 return ret[512041])
  }
  function chpl__extendedEuclid[81247](arg u[81244] :
  (81243 call int(64)[13] 32), arg v[81253] :
  (81252 call int(64)[13] 32)) : _unknown[51] "inline"
  {
    unknown ret[512052] "RVV" "temp"
    unknown call_tmp[628464] "expr temp" "maybe param" "maybe type" "temp"
    (628467 'move' call_tmp[628464](81260 call chpl__extendedEuclidHelper u[81244] v[81253]))
    (512057 'move' ret[512052](512056 'deref' call_tmp[628464]))
    (512054 return ret[512052])
  }
  function chpl__extendedEuclid[81275](arg u[81272] :
  (81271 call int(64)[13] 64), arg v[81281] :
  (81280 call int(64)[13] 64)) : _unknown[51] "inline"
  {
    unknown ret[512061] "RVV" "temp"
    unknown call_tmp[628469] "expr temp" "maybe param" "maybe type" "temp"
    (628472 'move' call_tmp[628469](81288 call chpl__extendedEuclidHelper u[81272] v[81281]))
    (512066 'move' ret[512061](512065 'deref' call_tmp[628469]))
    (512063 return ret[512061])
  }
  function chpl__rangeIdxTypeError[81298](arg idxType[81296]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[628474] "expr temp" "maybe param" "maybe type" "temp"
    (628477 'move' call_tmp[628474](81321 call _cast string[26] idxType[81296]))
    (81340 call compilerError "ranges don't support '" call_tmp[628474] "' as their idxType")
    (512068 return _void[55])
  }
  function chpl__rangeStrideType[81349](arg idxType[81347]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512072] "RVV" "temp" "type variable"
    unknown call_tmp[628479] "expr temp" "maybe param" "maybe type" "temp"
    (628482 'move' call_tmp[628479](81354 call isIntegralType idxType[81347]))
    unknown call_tmp[628484] "expr temp" "maybe param" "maybe type" "temp"
    (628487 'move' call_tmp[628484](81386 call _cond_test call_tmp[628479]))
    if call_tmp[628484]
    {
      unknown call_tmp[628489] "expr temp" "maybe param" "maybe type" "temp"
      (628492 'move' call_tmp[628489](81358 call chpl__signedType idxType[81347]))
      (512077 'move' ret[512072](512076 'deref' call_tmp[628489]))
      gotoReturn _end_chpl__rangeStrideType[512070] _end_chpl__rangeStrideType[512070]
    }
    {
      unknown tmp[421724] "maybe param" "temp"
      (421735 'move' tmp[421724](81365 call isEnumType idxType[81347]))
      unknown call_tmp[628494] "expr temp" "maybe param" "maybe type" "temp"
      (628497 'move' call_tmp[628494](421737 call _cond_invalid tmp[421724]))
      if call_tmp[628494]
      {
        (421740 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560124] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560125] "maybe param" "temp"
      unknown call_tmp[628499] "expr temp" "maybe param" "maybe type" "temp"
      (628502 'move' call_tmp[628499](421725 call isTrue tmp[421724]))
      (560130 'move' tmp[560125](560128 call _cond_test call_tmp[628499]))
      if tmp[560125]
      {
        (560135 'move' tmp[560124](560132 '_paramFoldLogical' tmp[560125] 1))
      }
      {
        unknown tmp[560137] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628504] "expr temp" "maybe param" "maybe type" "temp"
        (628507 'move' call_tmp[628504](81369 call isBoolType idxType[81347]))
        (560139 'move' tmp[560137](421729 call isTrue call_tmp[628504]))
        (560144 'move' tmp[560124](560141 '_paramFoldLogical' tmp[560125] tmp[560137]))
      }
      unknown call_tmp[628509] "expr temp" "maybe param" "maybe type" "temp"
      (628512 'move' call_tmp[628509](81382 call _cond_test tmp[560124]))
      if call_tmp[628509]
      {
        (512082 'move' ret[512072](512081 'deref' int(64)[13]))
        gotoReturn _end_chpl__rangeStrideType[512070] _end_chpl__rangeStrideType[512070]
      }
      {
        (81379 call chpl__rangeIdxTypeError idxType[81347])
      }
    }
    label _end_chpl__rangeStrideType[512070]
    (512074 return ret[512072])
  }
  function chpl__rangeUnsignedType[81398](arg idxType[81396]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512088] "RVV" "temp" "type variable"
    unknown call_tmp[628514] "expr temp" "maybe param" "maybe type" "temp"
    (628517 'move' call_tmp[628514](81403 call isIntegralType idxType[81396]))
    unknown call_tmp[628519] "expr temp" "maybe param" "maybe type" "temp"
    (628522 'move' call_tmp[628519](81435 call _cond_test call_tmp[628514]))
    if call_tmp[628519]
    {
      unknown call_tmp[628524] "expr temp" "maybe param" "maybe type" "temp"
      (628527 'move' call_tmp[628524](81407 call chpl__unsignedType idxType[81396]))
      (512093 'move' ret[512088](512092 'deref' call_tmp[628524]))
      gotoReturn _end_chpl__rangeUnsignedType[512086] _end_chpl__rangeUnsignedType[512086]
    }
    {
      unknown tmp[421745] "maybe param" "temp"
      (421756 'move' tmp[421745](81414 call isEnumType idxType[81396]))
      unknown call_tmp[628529] "expr temp" "maybe param" "maybe type" "temp"
      (628532 'move' call_tmp[628529](421758 call _cond_invalid tmp[421745]))
      if call_tmp[628529]
      {
        (421761 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560151] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560152] "maybe param" "temp"
      unknown call_tmp[628534] "expr temp" "maybe param" "maybe type" "temp"
      (628537 'move' call_tmp[628534](421746 call isTrue tmp[421745]))
      (560157 'move' tmp[560152](560155 call _cond_test call_tmp[628534]))
      if tmp[560152]
      {
        (560162 'move' tmp[560151](560159 '_paramFoldLogical' tmp[560152] 1))
      }
      {
        unknown tmp[560164] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628539] "expr temp" "maybe param" "maybe type" "temp"
        (628542 'move' call_tmp[628539](81418 call isBoolType idxType[81396]))
        (560166 'move' tmp[560164](421750 call isTrue call_tmp[628539]))
        (560171 'move' tmp[560151](560168 '_paramFoldLogical' tmp[560152] tmp[560164]))
      }
      unknown call_tmp[628544] "expr temp" "maybe param" "maybe type" "temp"
      (628547 'move' call_tmp[628544](81431 call _cond_test tmp[560151]))
      if call_tmp[628544]
      {
        (512098 'move' ret[512088](512097 'deref' uint(64)[115]))
        gotoReturn _end_chpl__rangeUnsignedType[512086] _end_chpl__rangeUnsignedType[512086]
      }
      {
        (81428 call chpl__rangeIdxTypeError idxType[81396])
      }
    }
    label _end_chpl__rangeUnsignedType[512086]
    (512090 return ret[512088])
  }
  function chpl__idxTypeToIntIdxType[81447](arg idxType[81445]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[512104] "RVV" "temp" "type variable"
    unknown call_tmp[628549] "expr temp" "maybe param" "maybe type" "temp"
    (628552 'move' call_tmp[628549](81452 call isBoolType idxType[81445]))
    unknown call_tmp[628554] "expr temp" "maybe param" "maybe type" "temp"
    (628557 'move' call_tmp[628554](81506 call _cond_test call_tmp[628549]))
    if call_tmp[628554]
    {
      (512109 'move' ret[512104](512108 'deref' int(64)[13]))
      gotoReturn _end_chpl__idxTypeToIntIdxType[512102] _end_chpl__idxTypeToIntIdxType[512102]
    }
    {
      unknown call_tmp[628559] "expr temp" "maybe param" "maybe type" "temp"
      (628562 'move' call_tmp[628559](81460 call isEnumType idxType[81445]))
      unknown call_tmp[628564] "expr temp" "maybe param" "maybe type" "temp"
      (628567 'move' call_tmp[628564](81502 call _cond_test call_tmp[628559]))
      if call_tmp[628564]
      {
        unknown call_tmp[628571] "expr temp" "maybe param" "maybe type" "temp"
        (628574 'move' call_tmp[628571](81462 call size _mt[243] idxType[81445]))
        unknown call_tmp[628576] "expr temp" "maybe param" "maybe type" "temp"
        (628579 'move' call_tmp[628576](81466 call < call_tmp[628571] 2))
        unknown call_tmp[628581] "expr temp" "maybe param" "maybe type" "temp"
        (628584 'move' call_tmp[628581](81489 call _cond_test call_tmp[628576]))
        if call_tmp[628581]
        {
          (81487 call compilerError "ranges are not currently supported for enums with fewer than two values")
        }
        (512114 'move' ret[512104](512113 'deref' int(64)[13]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[512102] _end_chpl__idxTypeToIntIdxType[512102]
      }
      {
        (512119 'move' ret[512104](512118 'deref' idxType[81445]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[512102] _end_chpl__idxTypeToIntIdxType[512102]
      }
    }
    label _end_chpl__idxTypeToIntIdxType[512102]
    (512106 return ret[512104])
  }
  function range[64319](?).chpl_intToIdx[81519](arg _mt[81524]:_MT[238], arg this[81521]:range[64319](?) :
  range[64319](?), arg i[81517]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[512125] "RVV" "temp"
    unknown call_tmp[628588] "expr temp" "maybe param" "maybe type" "temp"
    (628591 'move' call_tmp[628588](81528 call idxType _mt[243] this[81521]))
    unknown call_tmp[628593] "expr temp" "maybe param" "maybe type" "temp"
    (628596 'move' call_tmp[628593](81533 call chpl__intToIdx call_tmp[628588] i[81517]))
    (512130 'move' ret[512125](512129 'deref' call_tmp[628593]))
    (512127 return ret[512125])
  }
  function chpl__intToIdx[81545](arg idxType[81542]:integral[199](?), arg i[81548]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512134] "RVV" "temp"
    unknown call_tmp[628598] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628601 'move' call_tmp[628598](81552 'typeof' i[81548]))
    unknown call_tmp[628603] "expr temp" "maybe param" "maybe type" "temp"
    (628606 'move' call_tmp[628603](81554 call == call_tmp[628598] idxType[81542]))
    unknown call_tmp[628608] "expr temp" "maybe param" "maybe type" "temp"
    (628611 'move' call_tmp[628608](81565 call _cond_test call_tmp[628603]))
    if call_tmp[628608]
    {
      (512139 'move' ret[512134](512138 'deref' i[81548]))
      gotoReturn _end_chpl__intToIdx[512132] _end_chpl__intToIdx[512132]
    }
    {
      unknown call_tmp[628613] "expr temp" "maybe param" "maybe type" "temp"
      (628616 'move' call_tmp[628613](81561 call _cast idxType[81542] i[81548]))
      (512144 'move' ret[512134](512143 'deref' call_tmp[628613]))
      gotoReturn _end_chpl__intToIdx[512132] _end_chpl__intToIdx[512132]
    }
    label _end_chpl__intToIdx[512132]
    (512136 return ret[512134])
  }
  function chpl__intToIdx[81580](arg idxType[81577]:integral[199](?), param arg i[81583]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512150] "RVV" "temp"
    unknown call_tmp[628618] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628621 'move' call_tmp[628618](81587 'typeof' i[81583]))
    unknown call_tmp[628623] "expr temp" "maybe param" "maybe type" "temp"
    (628626 'move' call_tmp[628623](81589 call == call_tmp[628618] idxType[81577]))
    unknown call_tmp[628628] "expr temp" "maybe param" "maybe type" "temp"
    (628631 'move' call_tmp[628628](81600 call _cond_test call_tmp[628623]))
    if call_tmp[628628]
    {
      (512155 'move' ret[512150](512154 'deref' i[81583]))
      gotoReturn _end_chpl__intToIdx[512148] _end_chpl__intToIdx[512148]
    }
    {
      unknown call_tmp[628633] "expr temp" "maybe param" "maybe type" "temp"
      (628636 'move' call_tmp[628633](81596 call _cast idxType[81577] i[81583]))
      (512160 'move' ret[512150](512159 'deref' call_tmp[628633]))
      gotoReturn _end_chpl__intToIdx[512148] _end_chpl__intToIdx[512148]
    }
    label _end_chpl__intToIdx[512148]
    (512152 return ret[512150])
  }
  function chpl__intToIdx[81615](arg idxType[81612]:enum[187](?), arg i[81618]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512166] "RVV" "temp"
    unknown call_tmp[628638] "expr temp" "maybe param" "maybe type" "temp"
    (628641 'move' call_tmp[628638](81625 call chpl__orderToEnum i[81618] idxType[81612]))
    (512171 'move' ret[512166](512170 'deref' call_tmp[628638]))
    (512168 return ret[512166])
  }
  function chpl__intToIdx[81635](arg idxType[81633]:_any[178](?), arg i[81638]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512175] "RVV" "temp"
    unknown call_tmp[628643] "expr temp" "maybe param" "maybe type" "temp"
    (628646 'move' call_tmp[628643](81647 call _cast bool[10] i[81638]))
    (512180 'move' ret[512175](512179 'deref' call_tmp[628643]))
    (512177 return ret[512175])
  }
  where {
    (81644 call isBoolType idxType[81633])
  }
  function chpl__intToIdx[81659](arg idxType[81657]:_any[178](?), param arg i[81662]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[512184] "RVV" "param" "temp"
    unknown call_tmp[628648] "expr temp" "maybe param" "maybe type" "temp"
    (628651 'move' call_tmp[628648](81671 call _cast bool[10] i[81662]))
    (512189 'move' ret[512184](512188 'deref' call_tmp[628648]))
    (512186 return ret[512184])
  }
  where {
    (81668 call isBoolType idxType[81657])
  }
  function chpl__intToIdx[81683](arg idxType[81681]:_any[178](?), arg i[81686]:nothing[7]) : _unknown[51] "inline"
  {
    unknown ret[512193] "RVV" "temp"
    (512198 'move' ret[512193](512197 'deref' none[57]))
    (512195 return ret[512193])
  }
  function chpl__idxToInt[81701](arg i[81698]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512202] "RVV" "temp"
    (512207 'move' ret[512202](512206 'deref' i[81698]))
    (512204 return ret[512202])
  }
  function chpl__idxToInt[81715](param arg i[81712]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[512211] "RVV" "param" "temp"
    (512216 'move' ret[512211](512215 'deref' i[81712]))
    (512213 return ret[512211])
  }
  function chpl__idxToInt[81729](arg i[81726]:enum[187](?)) : _unknown[51] "inline"
  {
    unknown ret[512220] "RVV" "temp"
    unknown call_tmp[628653] "expr temp" "maybe param" "maybe type" "temp"
    (628656 'move' call_tmp[628653](81734 call chpl__enumToOrder i[81726]))
    (512225 'move' ret[512220](512224 'deref' call_tmp[628653]))
    (512222 return ret[512220])
  }
  function chpl__idxToInt[81746](arg i[81743]:bool[10]) : _unknown[51] "inline"
  {
    unknown ret[512229] "RVV" "temp"
    unknown call_tmp[628658] "expr temp" "maybe param" "maybe type" "temp"
    (628661 'move' call_tmp[628658](81750 call _cast int(64)[13] i[81743]))
    (512234 'move' ret[512229](512233 'deref' call_tmp[628658]))
    (512231 return ret[512229])
  }
  function chpl__idxToInt[81763](param arg i[81760]:bool[10]) param : _unknown[51] "inline"
  {
    unknown ret[512238] "RVV" "param" "temp"
    unknown call_tmp[628663] "expr temp" "maybe param" "maybe type" "temp"
    (628666 'move' call_tmp[628663](81767 call _cast int(64)[13] i[81760]))
    (512243 'move' ret[512238](512242 'deref' call_tmp[628663]))
    (512240 return ret[512238])
  }
  (355160 'used modules list'(64187 'use' ChapelBase[307])(64189 'use' SysBasic[223604])(64190 'use' HaltWrappers[210085])(64194 'use' Math[215946])(64196 'use' DSIUtil[230976]))
}