AST dump for ChapelLocks after pass createTaskFunctions.
Module use list: Atomics ChapelBase MemConsistency 

{
  function chpl__init_ChapelLocks[416085]() : void[4] "insert line file info" "module init"
  {
    (524053 return _void[55])
  }
  function chpl_LocalSpinlock[187432].lock[187323](arg _mt[187436]:_MT[238], arg this[187434]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[187402] "const" "temp"
    unknown call_tmp[690520] "expr temp" "maybe param" "maybe type" "temp"
    (690523 'move' call_tmp[690520](187399 '_wide_get_locale' this[187434]))
    (187404 'move' tmp[187402](187400 'deref' call_tmp[690520]))
    (935496 call on_fn[935492] tmp[187402])
    function on_fn[935492](const in arg dummy_locale_arg[935494]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown tmp[187348] "temp"
        unknown tmp[429563] "maybe param" "temp"
        unknown call_tmp[690527] "expr temp" "maybe param" "maybe type" "temp"
        (690530 'move' call_tmp[690527](361920 call l _mt[243] this[187434]))
        (429574 'move' tmp[429563](187386 call(187383 call (partial) read _mt[243] call_tmp[690527])))
        unknown call_tmp[690534] "expr temp" "maybe param" "maybe type" "temp"
        (690537 'move' call_tmp[690534](429576 call _cond_invalid tmp[429563]))
        if call_tmp[690534]
        {
          (429579 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[572116] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[572117] "maybe param" "temp"
        unknown call_tmp[690539] "expr temp" "maybe param" "maybe type" "temp"
        (690542 'move' call_tmp[690539](429564 call isTrue tmp[429563]))
        (572122 'move' tmp[572117](572120 call _cond_test call_tmp[690539]))
        if tmp[572117]
        {
          (572127 'move' tmp[572116](572124 '_paramFoldLogical' tmp[572117] 1))
        }
        {
          unknown tmp[572129] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[690546] "expr temp" "maybe param" "maybe type" "temp"
          (690549 'move' call_tmp[690546](361925 call l _mt[243] this[187434]))
          unknown call_tmp[690553] "expr temp" "maybe param" "maybe type" "temp"
          (690556 'move' call_tmp[690553](187391 call(187388 call (partial) testAndSet _mt[243] call_tmp[690546]) acquire[187008]))
          (572131 'move' tmp[572129](429568 call isTrue call_tmp[690553]))
          (572136 'move' tmp[572116](572133 '_paramFoldLogical' tmp[572117] tmp[572129]))
        }
        (187396 'move' tmp[187348](187379 call _cond_test tmp[572116]))
        WhileDo[187353]
        {
          (187346 call chpl_task_yield)
          (484538 'end of statement')
          label _continueLabel[187351]
          unknown tmp[429542] "maybe param" "temp"
          unknown call_tmp[690560] "expr temp" "maybe param" "maybe type" "temp"
          (690563 'move' call_tmp[690560](361909 call l _mt[243] this[187434]))
          (429553 'move' tmp[429542](187364 call(187361 call (partial) read _mt[243] call_tmp[690560])))
          unknown call_tmp[690567] "expr temp" "maybe param" "maybe type" "temp"
          (690570 'move' call_tmp[690567](429555 call _cond_invalid tmp[429542]))
          if call_tmp[690567]
          {
            (429558 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[572143] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[572144] "maybe param" "temp"
          unknown call_tmp[690572] "expr temp" "maybe param" "maybe type" "temp"
          (690575 'move' call_tmp[690572](429543 call isTrue tmp[429542]))
          (572149 'move' tmp[572144](572147 call _cond_test call_tmp[690572]))
          if tmp[572144]
          {
            (572154 'move' tmp[572143](572151 '_paramFoldLogical' tmp[572144] 1))
          }
          {
            unknown tmp[572156] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[690579] "expr temp" "maybe param" "maybe type" "temp"
            (690582 'move' call_tmp[690579](361914 call l _mt[243] this[187434]))
            unknown call_tmp[690586] "expr temp" "maybe param" "maybe type" "temp"
            (690589 'move' call_tmp[690586](187369 call(187366 call (partial) testAndSet _mt[243] call_tmp[690579]) acquire[187008]))
            (572158 'move' tmp[572156](429547 call isTrue call_tmp[690586]))
            (572163 'move' tmp[572143](572160 '_paramFoldLogical' tmp[572144] tmp[572156]))
          }
          (187374 'move' tmp[187348](187357 call _cond_test tmp[572143]))
          tmp[187348]
        }
        label _breakLabel[187352]
      }
      (935499 return _void[55])
    }
    {
    }
    (524049 return _void[55])
  }
  function chpl_LocalSpinlock[187432].unlock[187415](arg _mt[187440]:_MT[238], arg this[187438]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[690593] "expr temp" "maybe param" "maybe type" "temp"
    (690596 'move' call_tmp[690593](361931 call l _mt[243] this[187438]))
    (187426 call(187418 call (partial) clear _mt[243] call_tmp[690593]) release[187006])
    (524051 return _void[55])
  }
  function chpl_LocalSpinlock[187432].l[820314](arg _mt[820316]:_MT[238], ref arg this[820318]:chpl_LocalSpinlock[187432]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[820328] "RVV" "temp"
    unknown call_tmp[820335] "expr temp" "maybe param" "maybe type" "temp"
    (820338 'move' call_tmp[820335](820322 '.' this[820318] c"l"))
    (820333 'move' ret[820328](820332 'addr of' call_tmp[820335]))
    (820330 return ret[820328])
  }
  function chpl_LocalSpinlock[187432].init[820340](arg _mt[820342]:_MT[238], ref arg this[820343]:chpl_LocalSpinlock[187432], in arg l[820346] :
  (820349 call chpl__processorAtomicType bool[10]) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (820362 'init field' this[820343] c"l" l[820346])
    (820366 return _void[55])
  }
  function chpl_LocalSpinlock[187432].init=[820368](arg _mt[820371]:_MT[238], ref arg this[820372]:chpl_LocalSpinlock[187432], arg other[820373]:chpl_LocalSpinlock[187432]) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[820403] "maybe param" "maybe type" "temp"
    (820406 'move' call_tmp[820403](820381 call l _mt[243] other[820373]))
    unknown call_tmp[820408] "maybe param" "maybe type" "temp"
    (820411 'move' call_tmp[820408](820390 call chpl__processorAtomicType bool[10]))
    unknown tmp[820387] "temp"
    (820392 'init var' tmp[820387] call_tmp[820403] call_tmp[820408])
    (820394 'init field' this[820372] c"l" tmp[820387])
    (820398 'end of statement')
    (820399 return _void[55])
  }
  function chpl_LocalSpinlock[187432].deinit[820413](arg _mt[820415]:_MT[238], arg this[820417]:chpl_LocalSpinlock[187432]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (820425 return _void[55])
  }
  function chpl_LocalSpinlock[187432].writeThis[820427](arg _mt[820431]:_MT[238], arg this[820429]:chpl_LocalSpinlock[187432], arg f[820430]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (820436 call writeThisDefaultImpl f[820430] this[820429])
    (820441 return _void[55])
  }
  function chpl_LocalSpinlock[187432].readThis[820443](arg _mt[820447]:_MT[238], arg this[820445]:chpl_LocalSpinlock[187432], arg f[820446]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (820451 call readThisDefaultImpl f[820446] this[820445])
    (820457 return _void[55])
  }
  function chpl_fields_are_comparable[820471](arg _arg1[820473]:chpl_LocalSpinlock[187432], arg _arg2[820474]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820492]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820499] "expr temp" "maybe param" "maybe type" "temp"
    (820502 'move' call_tmp[820499](820477 call l _mt[243] _arg1[820473]))
    unknown call_tmp[820504] "expr temp" "maybe param" "maybe type" "temp"
    (820507 'move' call_tmp[820504](820481 call l _mt[243] _arg2[820474]))
    unknown call_tmp[820509] "expr temp" "maybe param" "maybe type" "temp"
    (820512 'move' call_tmp[820509](820485 'call resolves' c"==" call_tmp[820499] call_tmp[820504]))
    (820497 'move' ret[820492](820496 'deref' call_tmp[820509]))
    (820494 return ret[820492])
  }
  function ==[820459](arg _arg1[820461]:chpl_LocalSpinlock[187432], arg _arg2[820462]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820541]:bool[10] "RVV" "temp"
    unknown call_tmp[820553] "expr temp" "maybe param" "maybe type" "temp"
    (820556 'move' call_tmp[820553](820520 call l _mt[243] _arg1[820461]))
    unknown call_tmp[820558] "expr temp" "maybe param" "maybe type" "temp"
    (820561 'move' call_tmp[820558](820524 call l _mt[243] _arg2[820462]))
    unknown call_tmp[820563] "expr temp" "maybe param" "maybe type" "temp"
    (820566 'move' call_tmp[820563](820528 call != call_tmp[820553] call_tmp[820558]))
    if call_tmp[820563]
    {
      (820546 'move' ret[820541](820545 'deref' 0))
      gotoReturn _end_==[820539] _end_==[820539]
    }
    (820551 'move' ret[820541](820550 'deref' 1))
    label _end_==[820539]
    (820543 return ret[820541])
  }
  where {
    unknown call_tmp[820568] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820571 'move' call_tmp[820568](820465 'typeof' _arg1[820461]))
    unknown call_tmp[820573] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820576 'move' call_tmp[820573](820467 'typeof' _arg2[820462]))
    unknown call_tmp[820578] "expr temp" "maybe param" "maybe type" "temp"
    (820581 'move' call_tmp[820578](820469 call == call_tmp[820568] call_tmp[820573]))
    unknown call_tmp[820583] "expr temp" "maybe param" "maybe type" "temp"
    (820586 'move' call_tmp[820583](820514 call chpl_fields_are_comparable[820471] _arg1[820461] _arg2[820462]))
    (820518 '&' call_tmp[820578] call_tmp[820583])
  }
  function chpl_fields_are_comparable[820600](arg _arg1[820602]:chpl_LocalSpinlock[187432], arg _arg2[820603]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820621]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820628] "expr temp" "maybe param" "maybe type" "temp"
    (820631 'move' call_tmp[820628](820606 call l _mt[243] _arg1[820602]))
    unknown call_tmp[820633] "expr temp" "maybe param" "maybe type" "temp"
    (820636 'move' call_tmp[820633](820610 call l _mt[243] _arg2[820603]))
    unknown call_tmp[820638] "expr temp" "maybe param" "maybe type" "temp"
    (820641 'move' call_tmp[820638](820614 'call resolves' c"!=" call_tmp[820628] call_tmp[820633]))
    (820626 'move' ret[820621](820625 'deref' call_tmp[820638]))
    (820623 return ret[820621])
  }
  function !=[820588](arg _arg1[820590]:chpl_LocalSpinlock[187432], arg _arg2[820591]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820670]:bool[10] "RVV" "temp"
    unknown call_tmp[820682] "expr temp" "maybe param" "maybe type" "temp"
    (820685 'move' call_tmp[820682](820649 call l _mt[243] _arg1[820590]))
    unknown call_tmp[820687] "expr temp" "maybe param" "maybe type" "temp"
    (820690 'move' call_tmp[820687](820653 call l _mt[243] _arg2[820591]))
    unknown call_tmp[820692] "expr temp" "maybe param" "maybe type" "temp"
    (820695 'move' call_tmp[820692](820657 call != call_tmp[820682] call_tmp[820687]))
    if call_tmp[820692]
    {
      (820675 'move' ret[820670](820674 'deref' 1))
      gotoReturn _end_!=[820668] _end_!=[820668]
    }
    (820680 'move' ret[820670](820679 'deref' 0))
    label _end_!=[820668]
    (820672 return ret[820670])
  }
  where {
    unknown call_tmp[820697] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820700 'move' call_tmp[820697](820594 'typeof' _arg1[820590]))
    unknown call_tmp[820702] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820705 'move' call_tmp[820702](820596 'typeof' _arg2[820591]))
    unknown call_tmp[820707] "expr temp" "maybe param" "maybe type" "temp"
    (820710 'move' call_tmp[820707](820598 call == call_tmp[820697] call_tmp[820702]))
    unknown call_tmp[820712] "expr temp" "maybe param" "maybe type" "temp"
    (820715 'move' call_tmp[820712](820643 call chpl_fields_are_comparable[820600] _arg1[820590] _arg2[820591]))
    (820647 '&' call_tmp[820707] call_tmp[820712])
  }
  function chpl_fields_are_comparable[820729](arg _arg1[820731]:chpl_LocalSpinlock[187432], arg _arg2[820732]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820750]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820757] "expr temp" "maybe param" "maybe type" "temp"
    (820760 'move' call_tmp[820757](820735 call l _mt[243] _arg1[820731]))
    unknown call_tmp[820762] "expr temp" "maybe param" "maybe type" "temp"
    (820765 'move' call_tmp[820762](820739 call l _mt[243] _arg2[820732]))
    unknown call_tmp[820767] "expr temp" "maybe param" "maybe type" "temp"
    (820770 'move' call_tmp[820767](820743 'call resolves' c"<" call_tmp[820757] call_tmp[820762]))
    (820755 'move' ret[820750](820754 'deref' call_tmp[820767]))
    (820752 return ret[820750])
  }
  function <[820717](arg _arg1[820719]:chpl_LocalSpinlock[187432], arg _arg2[820720]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820814]:bool[10] "RVV" "temp"
    unknown call_tmp[820831] "expr temp" "maybe param" "maybe type" "temp"
    (820834 'move' call_tmp[820831](820778 call l _mt[243] _arg1[820719]))
    unknown call_tmp[820836] "expr temp" "maybe param" "maybe type" "temp"
    (820839 'move' call_tmp[820836](820782 call l _mt[243] _arg2[820720]))
    unknown call_tmp[820841] "expr temp" "maybe param" "maybe type" "temp"
    (820844 'move' call_tmp[820841](820786 call < call_tmp[820831] call_tmp[820836]))
    if call_tmp[820841]
    {
      (820819 'move' ret[820814](820818 'deref' 1))
      gotoReturn _end_<[820812] _end_<[820812]
    }
    unknown call_tmp[820846] "expr temp" "maybe param" "maybe type" "temp"
    (820849 'move' call_tmp[820846](820792 call l _mt[243] _arg1[820719]))
    unknown call_tmp[820851] "expr temp" "maybe param" "maybe type" "temp"
    (820854 'move' call_tmp[820851](820796 call l _mt[243] _arg2[820720]))
    unknown call_tmp[820856] "expr temp" "maybe param" "maybe type" "temp"
    (820859 'move' call_tmp[820856](820800 call > call_tmp[820846] call_tmp[820851]))
    if call_tmp[820856]
    {
      (820824 'move' ret[820814](820823 'deref' 0))
      gotoReturn _end_<[820812] _end_<[820812]
    }
    (820829 'move' ret[820814](820828 'deref' 0))
    label _end_<[820812]
    (820816 return ret[820814])
  }
  where {
    unknown call_tmp[820861] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820864 'move' call_tmp[820861](820723 'typeof' _arg1[820719]))
    unknown call_tmp[820866] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820869 'move' call_tmp[820866](820725 'typeof' _arg2[820720]))
    unknown call_tmp[820871] "expr temp" "maybe param" "maybe type" "temp"
    (820874 'move' call_tmp[820871](820727 call == call_tmp[820861] call_tmp[820866]))
    unknown call_tmp[820876] "expr temp" "maybe param" "maybe type" "temp"
    (820879 'move' call_tmp[820876](820772 call chpl_fields_are_comparable[820729] _arg1[820719] _arg2[820720]))
    (820776 '&' call_tmp[820871] call_tmp[820876])
  }
  function chpl_fields_are_comparable[820893](arg _arg1[820895]:chpl_LocalSpinlock[187432], arg _arg2[820896]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820914]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820921] "expr temp" "maybe param" "maybe type" "temp"
    (820924 'move' call_tmp[820921](820899 call l _mt[243] _arg1[820895]))
    unknown call_tmp[820926] "expr temp" "maybe param" "maybe type" "temp"
    (820929 'move' call_tmp[820926](820903 call l _mt[243] _arg2[820896]))
    unknown call_tmp[820931] "expr temp" "maybe param" "maybe type" "temp"
    (820934 'move' call_tmp[820931](820907 'call resolves' c"<=" call_tmp[820921] call_tmp[820926]))
    (820919 'move' ret[820914](820918 'deref' call_tmp[820931]))
    (820916 return ret[820914])
  }
  function <=[820881](arg _arg1[820883]:chpl_LocalSpinlock[187432], arg _arg2[820884]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820978]:bool[10] "RVV" "temp"
    unknown call_tmp[820995] "expr temp" "maybe param" "maybe type" "temp"
    (820998 'move' call_tmp[820995](820942 call l _mt[243] _arg1[820883]))
    unknown call_tmp[821000] "expr temp" "maybe param" "maybe type" "temp"
    (821003 'move' call_tmp[821000](820946 call l _mt[243] _arg2[820884]))
    unknown call_tmp[821005] "expr temp" "maybe param" "maybe type" "temp"
    (821008 'move' call_tmp[821005](820950 call < call_tmp[820995] call_tmp[821000]))
    if call_tmp[821005]
    {
      (820983 'move' ret[820978](820982 'deref' 1))
      gotoReturn _end_<=[820976] _end_<=[820976]
    }
    unknown call_tmp[821010] "expr temp" "maybe param" "maybe type" "temp"
    (821013 'move' call_tmp[821010](820956 call l _mt[243] _arg1[820883]))
    unknown call_tmp[821015] "expr temp" "maybe param" "maybe type" "temp"
    (821018 'move' call_tmp[821015](820960 call l _mt[243] _arg2[820884]))
    unknown call_tmp[821020] "expr temp" "maybe param" "maybe type" "temp"
    (821023 'move' call_tmp[821020](820964 call > call_tmp[821010] call_tmp[821015]))
    if call_tmp[821020]
    {
      (820988 'move' ret[820978](820987 'deref' 0))
      gotoReturn _end_<=[820976] _end_<=[820976]
    }
    (820993 'move' ret[820978](820992 'deref' 1))
    label _end_<=[820976]
    (820980 return ret[820978])
  }
  where {
    unknown call_tmp[821025] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821028 'move' call_tmp[821025](820887 'typeof' _arg1[820883]))
    unknown call_tmp[821030] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821033 'move' call_tmp[821030](820889 'typeof' _arg2[820884]))
    unknown call_tmp[821035] "expr temp" "maybe param" "maybe type" "temp"
    (821038 'move' call_tmp[821035](820891 call == call_tmp[821025] call_tmp[821030]))
    unknown call_tmp[821040] "expr temp" "maybe param" "maybe type" "temp"
    (821043 'move' call_tmp[821040](820936 call chpl_fields_are_comparable[820893] _arg1[820883] _arg2[820884]))
    (820940 '&' call_tmp[821035] call_tmp[821040])
  }
  function chpl_fields_are_comparable[821057](arg _arg1[821059]:chpl_LocalSpinlock[187432], arg _arg2[821060]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[821078]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[821085] "expr temp" "maybe param" "maybe type" "temp"
    (821088 'move' call_tmp[821085](821063 call l _mt[243] _arg1[821059]))
    unknown call_tmp[821090] "expr temp" "maybe param" "maybe type" "temp"
    (821093 'move' call_tmp[821090](821067 call l _mt[243] _arg2[821060]))
    unknown call_tmp[821095] "expr temp" "maybe param" "maybe type" "temp"
    (821098 'move' call_tmp[821095](821071 'call resolves' c">" call_tmp[821085] call_tmp[821090]))
    (821083 'move' ret[821078](821082 'deref' call_tmp[821095]))
    (821080 return ret[821078])
  }
  function >[821045](arg _arg1[821047]:chpl_LocalSpinlock[187432], arg _arg2[821048]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821142]:bool[10] "RVV" "temp"
    unknown call_tmp[821159] "expr temp" "maybe param" "maybe type" "temp"
    (821162 'move' call_tmp[821159](821106 call l _mt[243] _arg1[821047]))
    unknown call_tmp[821164] "expr temp" "maybe param" "maybe type" "temp"
    (821167 'move' call_tmp[821164](821110 call l _mt[243] _arg2[821048]))
    unknown call_tmp[821169] "expr temp" "maybe param" "maybe type" "temp"
    (821172 'move' call_tmp[821169](821114 call > call_tmp[821159] call_tmp[821164]))
    if call_tmp[821169]
    {
      (821147 'move' ret[821142](821146 'deref' 1))
      gotoReturn _end_>[821140] _end_>[821140]
    }
    unknown call_tmp[821174] "expr temp" "maybe param" "maybe type" "temp"
    (821177 'move' call_tmp[821174](821120 call l _mt[243] _arg1[821047]))
    unknown call_tmp[821179] "expr temp" "maybe param" "maybe type" "temp"
    (821182 'move' call_tmp[821179](821124 call l _mt[243] _arg2[821048]))
    unknown call_tmp[821184] "expr temp" "maybe param" "maybe type" "temp"
    (821187 'move' call_tmp[821184](821128 call < call_tmp[821174] call_tmp[821179]))
    if call_tmp[821184]
    {
      (821152 'move' ret[821142](821151 'deref' 0))
      gotoReturn _end_>[821140] _end_>[821140]
    }
    (821157 'move' ret[821142](821156 'deref' 0))
    label _end_>[821140]
    (821144 return ret[821142])
  }
  where {
    unknown call_tmp[821189] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821192 'move' call_tmp[821189](821051 'typeof' _arg1[821047]))
    unknown call_tmp[821194] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821197 'move' call_tmp[821194](821053 'typeof' _arg2[821048]))
    unknown call_tmp[821199] "expr temp" "maybe param" "maybe type" "temp"
    (821202 'move' call_tmp[821199](821055 call == call_tmp[821189] call_tmp[821194]))
    unknown call_tmp[821204] "expr temp" "maybe param" "maybe type" "temp"
    (821207 'move' call_tmp[821204](821100 call chpl_fields_are_comparable[821057] _arg1[821047] _arg2[821048]))
    (821104 '&' call_tmp[821199] call_tmp[821204])
  }
  function chpl_fields_are_comparable[821221](arg _arg1[821223]:chpl_LocalSpinlock[187432], arg _arg2[821224]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[821242]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[821249] "expr temp" "maybe param" "maybe type" "temp"
    (821252 'move' call_tmp[821249](821227 call l _mt[243] _arg1[821223]))
    unknown call_tmp[821254] "expr temp" "maybe param" "maybe type" "temp"
    (821257 'move' call_tmp[821254](821231 call l _mt[243] _arg2[821224]))
    unknown call_tmp[821259] "expr temp" "maybe param" "maybe type" "temp"
    (821262 'move' call_tmp[821259](821235 'call resolves' c">=" call_tmp[821249] call_tmp[821254]))
    (821247 'move' ret[821242](821246 'deref' call_tmp[821259]))
    (821244 return ret[821242])
  }
  function >=[821209](arg _arg1[821211]:chpl_LocalSpinlock[187432], arg _arg2[821212]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821306]:bool[10] "RVV" "temp"
    unknown call_tmp[821323] "expr temp" "maybe param" "maybe type" "temp"
    (821326 'move' call_tmp[821323](821270 call l _mt[243] _arg1[821211]))
    unknown call_tmp[821328] "expr temp" "maybe param" "maybe type" "temp"
    (821331 'move' call_tmp[821328](821274 call l _mt[243] _arg2[821212]))
    unknown call_tmp[821333] "expr temp" "maybe param" "maybe type" "temp"
    (821336 'move' call_tmp[821333](821278 call > call_tmp[821323] call_tmp[821328]))
    if call_tmp[821333]
    {
      (821311 'move' ret[821306](821310 'deref' 1))
      gotoReturn _end_>=[821304] _end_>=[821304]
    }
    unknown call_tmp[821338] "expr temp" "maybe param" "maybe type" "temp"
    (821341 'move' call_tmp[821338](821284 call l _mt[243] _arg1[821211]))
    unknown call_tmp[821343] "expr temp" "maybe param" "maybe type" "temp"
    (821346 'move' call_tmp[821343](821288 call l _mt[243] _arg2[821212]))
    unknown call_tmp[821348] "expr temp" "maybe param" "maybe type" "temp"
    (821351 'move' call_tmp[821348](821292 call < call_tmp[821338] call_tmp[821343]))
    if call_tmp[821348]
    {
      (821316 'move' ret[821306](821315 'deref' 0))
      gotoReturn _end_>=[821304] _end_>=[821304]
    }
    (821321 'move' ret[821306](821320 'deref' 1))
    label _end_>=[821304]
    (821308 return ret[821306])
  }
  where {
    unknown call_tmp[821353] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821356 'move' call_tmp[821353](821215 'typeof' _arg1[821211]))
    unknown call_tmp[821358] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821361 'move' call_tmp[821358](821217 'typeof' _arg2[821212]))
    unknown call_tmp[821363] "expr temp" "maybe param" "maybe type" "temp"
    (821366 'move' call_tmp[821363](821219 call == call_tmp[821353] call_tmp[821358]))
    unknown call_tmp[821368] "expr temp" "maybe param" "maybe type" "temp"
    (821371 'move' call_tmp[821368](821264 call chpl_fields_are_comparable[821221] _arg1[821211] _arg2[821212]))
    (821268 '&' call_tmp[821363] call_tmp[821368])
  }
  function =[821373](ref arg _arg1[821375]:chpl_LocalSpinlock[187432], const?  ref arg _arg2[821376]:chpl_LocalSpinlock[187432]) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[821402] "expr temp" "maybe param" "maybe type" "temp"
    (821405 'move' call_tmp[821402](821386 call l _mt[243] _arg1[821375]))
    unknown call_tmp[821409] "expr temp" "maybe param" "maybe type" "temp"
    (821412 'move' call_tmp[821409](821390 call l _mt[243] _arg2[821376]))
    (821394 call = call_tmp[821402] call_tmp[821409])
    (821398 return _void[55])
  }
  where {
    unknown call_tmp[821414] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821417 'move' call_tmp[821414](821379 'typeof' _arg1[821375]))
    unknown call_tmp[821419] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821422 'move' call_tmp[821419](821381 'typeof' _arg2[821376]))
    (821383 call == call_tmp[821414] call_tmp[821419])
  }
  function chpl__defaultHash[821424](arg r[821426]:chpl_LocalSpinlock[187432]) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[821439] "RVV" "temp"
    unknown call_tmp[821446] "expr temp" "maybe param" "maybe type" "temp"
    (821449 'move' call_tmp[821446](821428 call l _mt[243] r[821426]))
    unknown call_tmp[821451] "expr temp" "maybe param" "maybe type" "temp"
    (821454 'move' call_tmp[821451](821432 call chpl__defaultHash call_tmp[821446]))
    (821444 'move' ret[821439](821443 'deref' call_tmp[821451]))
    (821441 return ret[821439])
  }
  type chpl_LocalSpinlock[187432] unknown l[187317](187316 call chpl__processorAtomicType bool[10])
  (355262 'used modules list'(187305 'use' Atomics[43964])(187307 'use' ChapelBase[307])(187310 'use' MemConsistency[186648]))
}