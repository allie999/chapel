AST dump for ChapelLocks after pass createTaskFunctions.
Module use list: Atomics ChapelBase MemConsistency 

{
  function chpl__init_ChapelLocks[416163]() : void[4] "insert line file info" "module init"
  {
    (524136 return _void[55])
  }
  function chpl_LocalSpinlock[187432].lock[187323](arg _mt[187436]:_MT[238], arg this[187434]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[187402] "const" "temp"
    unknown call_tmp[690623] "expr temp" "maybe param" "maybe type" "temp"
    (690626 'move' call_tmp[690623](187399 '_wide_get_locale' this[187434]))
    (187404 'move' tmp[187402](187400 'deref' call_tmp[690623]))
    (935666 call on_fn[935662] tmp[187402])
    function on_fn[935662](const in arg dummy_locale_arg[935664]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown tmp[187348] "temp"
        unknown tmp[429641] "maybe param" "temp"
        unknown call_tmp[690630] "expr temp" "maybe param" "maybe type" "temp"
        (690633 'move' call_tmp[690630](361991 call l _mt[243] this[187434]))
        (429652 'move' tmp[429641](187386 call(187383 call (partial) read _mt[243] call_tmp[690630])))
        unknown call_tmp[690637] "expr temp" "maybe param" "maybe type" "temp"
        (690640 'move' call_tmp[690637](429654 call _cond_invalid tmp[429641]))
        if call_tmp[690637]
        {
          (429657 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[572219] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[572220] "maybe param" "temp"
        unknown call_tmp[690642] "expr temp" "maybe param" "maybe type" "temp"
        (690645 'move' call_tmp[690642](429642 call isTrue tmp[429641]))
        (572225 'move' tmp[572220](572223 call _cond_test call_tmp[690642]))
        if tmp[572220]
        {
          (572230 'move' tmp[572219](572227 '_paramFoldLogical' tmp[572220] 1))
        }
        {
          unknown tmp[572232] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[690649] "expr temp" "maybe param" "maybe type" "temp"
          (690652 'move' call_tmp[690649](361996 call l _mt[243] this[187434]))
          unknown call_tmp[690656] "expr temp" "maybe param" "maybe type" "temp"
          (690659 'move' call_tmp[690656](187391 call(187388 call (partial) testAndSet _mt[243] call_tmp[690649]) acquire[187008]))
          (572234 'move' tmp[572232](429646 call isTrue call_tmp[690656]))
          (572239 'move' tmp[572219](572236 '_paramFoldLogical' tmp[572220] tmp[572232]))
        }
        (187396 'move' tmp[187348](187379 call _cond_test tmp[572219]))
        WhileDo[187353]
        {
          (187346 call chpl_task_yield)
          (484614 'end of statement')
          label _continueLabel[187351]
          unknown tmp[429620] "maybe param" "temp"
          unknown call_tmp[690663] "expr temp" "maybe param" "maybe type" "temp"
          (690666 'move' call_tmp[690663](361980 call l _mt[243] this[187434]))
          (429631 'move' tmp[429620](187364 call(187361 call (partial) read _mt[243] call_tmp[690663])))
          unknown call_tmp[690670] "expr temp" "maybe param" "maybe type" "temp"
          (690673 'move' call_tmp[690670](429633 call _cond_invalid tmp[429620]))
          if call_tmp[690670]
          {
            (429636 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[572246] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[572247] "maybe param" "temp"
          unknown call_tmp[690675] "expr temp" "maybe param" "maybe type" "temp"
          (690678 'move' call_tmp[690675](429621 call isTrue tmp[429620]))
          (572252 'move' tmp[572247](572250 call _cond_test call_tmp[690675]))
          if tmp[572247]
          {
            (572257 'move' tmp[572246](572254 '_paramFoldLogical' tmp[572247] 1))
          }
          {
            unknown tmp[572259] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[690682] "expr temp" "maybe param" "maybe type" "temp"
            (690685 'move' call_tmp[690682](361985 call l _mt[243] this[187434]))
            unknown call_tmp[690689] "expr temp" "maybe param" "maybe type" "temp"
            (690692 'move' call_tmp[690689](187369 call(187366 call (partial) testAndSet _mt[243] call_tmp[690682]) acquire[187008]))
            (572261 'move' tmp[572259](429625 call isTrue call_tmp[690689]))
            (572266 'move' tmp[572246](572263 '_paramFoldLogical' tmp[572247] tmp[572259]))
          }
          (187374 'move' tmp[187348](187357 call _cond_test tmp[572246]))
          tmp[187348]
        }
        label _breakLabel[187352]
      }
      (935669 return _void[55])
    }
    {
    }
    (524132 return _void[55])
  }
  function chpl_LocalSpinlock[187432].unlock[187415](arg _mt[187440]:_MT[238], arg this[187438]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[690696] "expr temp" "maybe param" "maybe type" "temp"
    (690699 'move' call_tmp[690696](362002 call l _mt[243] this[187438]))
    (187426 call(187418 call (partial) clear _mt[243] call_tmp[690696]) release[187006])
    (524134 return _void[55])
  }
  function chpl_LocalSpinlock[187432].l[820484](arg _mt[820486]:_MT[238], ref arg this[820488]:chpl_LocalSpinlock[187432]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[820498] "RVV" "temp"
    unknown call_tmp[820505] "expr temp" "maybe param" "maybe type" "temp"
    (820508 'move' call_tmp[820505](820492 '.' this[820488] c"l"))
    (820503 'move' ret[820498](820502 'addr of' call_tmp[820505]))
    (820500 return ret[820498])
  }
  function chpl_LocalSpinlock[187432].init[820510](arg _mt[820512]:_MT[238], ref arg this[820513]:chpl_LocalSpinlock[187432], in arg l[820516] :
  (820519 call chpl__processorAtomicType bool[10]) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (820532 'init field' this[820513] c"l" l[820516])
    (820536 return _void[55])
  }
  function chpl_LocalSpinlock[187432].init=[820538](arg _mt[820541]:_MT[238], ref arg this[820542]:chpl_LocalSpinlock[187432], arg other[820543]:chpl_LocalSpinlock[187432]) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[820573] "maybe param" "maybe type" "temp"
    (820576 'move' call_tmp[820573](820551 call l _mt[243] other[820543]))
    unknown call_tmp[820578] "maybe param" "maybe type" "temp"
    (820581 'move' call_tmp[820578](820560 call chpl__processorAtomicType bool[10]))
    unknown tmp[820557] "temp"
    (820562 'init var' tmp[820557] call_tmp[820573] call_tmp[820578])
    (820564 'init field' this[820542] c"l" tmp[820557])
    (820568 'end of statement')
    (820569 return _void[55])
  }
  function chpl_LocalSpinlock[187432].deinit[820583](arg _mt[820585]:_MT[238], arg this[820587]:chpl_LocalSpinlock[187432]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (820595 return _void[55])
  }
  function chpl_LocalSpinlock[187432].writeThis[820597](arg _mt[820601]:_MT[238], arg this[820599]:chpl_LocalSpinlock[187432], arg f[820600]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (820606 call writeThisDefaultImpl f[820600] this[820599])
    (820611 return _void[55])
  }
  function chpl_LocalSpinlock[187432].readThis[820613](arg _mt[820617]:_MT[238], arg this[820615]:chpl_LocalSpinlock[187432], arg f[820616]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (820621 call readThisDefaultImpl f[820616] this[820615])
    (820627 return _void[55])
  }
  function chpl_fields_are_comparable[820641](arg _arg1[820643]:chpl_LocalSpinlock[187432], arg _arg2[820644]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820662]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820669] "expr temp" "maybe param" "maybe type" "temp"
    (820672 'move' call_tmp[820669](820647 call l _mt[243] _arg1[820643]))
    unknown call_tmp[820674] "expr temp" "maybe param" "maybe type" "temp"
    (820677 'move' call_tmp[820674](820651 call l _mt[243] _arg2[820644]))
    unknown call_tmp[820679] "expr temp" "maybe param" "maybe type" "temp"
    (820682 'move' call_tmp[820679](820655 'call resolves' c"==" call_tmp[820669] call_tmp[820674]))
    (820667 'move' ret[820662](820666 'deref' call_tmp[820679]))
    (820664 return ret[820662])
  }
  function ==[820629](arg _arg1[820631]:chpl_LocalSpinlock[187432], arg _arg2[820632]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820711]:bool[10] "RVV" "temp"
    unknown call_tmp[820723] "expr temp" "maybe param" "maybe type" "temp"
    (820726 'move' call_tmp[820723](820690 call l _mt[243] _arg1[820631]))
    unknown call_tmp[820728] "expr temp" "maybe param" "maybe type" "temp"
    (820731 'move' call_tmp[820728](820694 call l _mt[243] _arg2[820632]))
    unknown call_tmp[820733] "expr temp" "maybe param" "maybe type" "temp"
    (820736 'move' call_tmp[820733](820698 call != call_tmp[820723] call_tmp[820728]))
    if call_tmp[820733]
    {
      (820716 'move' ret[820711](820715 'deref' 0))
      gotoReturn _end_==[820709] _end_==[820709]
    }
    (820721 'move' ret[820711](820720 'deref' 1))
    label _end_==[820709]
    (820713 return ret[820711])
  }
  where {
    unknown call_tmp[820738] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820741 'move' call_tmp[820738](820635 'typeof' _arg1[820631]))
    unknown call_tmp[820743] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820746 'move' call_tmp[820743](820637 'typeof' _arg2[820632]))
    unknown call_tmp[820748] "expr temp" "maybe param" "maybe type" "temp"
    (820751 'move' call_tmp[820748](820639 call == call_tmp[820738] call_tmp[820743]))
    unknown call_tmp[820753] "expr temp" "maybe param" "maybe type" "temp"
    (820756 'move' call_tmp[820753](820684 call chpl_fields_are_comparable[820641] _arg1[820631] _arg2[820632]))
    (820688 '&' call_tmp[820748] call_tmp[820753])
  }
  function chpl_fields_are_comparable[820770](arg _arg1[820772]:chpl_LocalSpinlock[187432], arg _arg2[820773]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820791]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820798] "expr temp" "maybe param" "maybe type" "temp"
    (820801 'move' call_tmp[820798](820776 call l _mt[243] _arg1[820772]))
    unknown call_tmp[820803] "expr temp" "maybe param" "maybe type" "temp"
    (820806 'move' call_tmp[820803](820780 call l _mt[243] _arg2[820773]))
    unknown call_tmp[820808] "expr temp" "maybe param" "maybe type" "temp"
    (820811 'move' call_tmp[820808](820784 'call resolves' c"!=" call_tmp[820798] call_tmp[820803]))
    (820796 'move' ret[820791](820795 'deref' call_tmp[820808]))
    (820793 return ret[820791])
  }
  function !=[820758](arg _arg1[820760]:chpl_LocalSpinlock[187432], arg _arg2[820761]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820840]:bool[10] "RVV" "temp"
    unknown call_tmp[820852] "expr temp" "maybe param" "maybe type" "temp"
    (820855 'move' call_tmp[820852](820819 call l _mt[243] _arg1[820760]))
    unknown call_tmp[820857] "expr temp" "maybe param" "maybe type" "temp"
    (820860 'move' call_tmp[820857](820823 call l _mt[243] _arg2[820761]))
    unknown call_tmp[820862] "expr temp" "maybe param" "maybe type" "temp"
    (820865 'move' call_tmp[820862](820827 call != call_tmp[820852] call_tmp[820857]))
    if call_tmp[820862]
    {
      (820845 'move' ret[820840](820844 'deref' 1))
      gotoReturn _end_!=[820838] _end_!=[820838]
    }
    (820850 'move' ret[820840](820849 'deref' 0))
    label _end_!=[820838]
    (820842 return ret[820840])
  }
  where {
    unknown call_tmp[820867] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820870 'move' call_tmp[820867](820764 'typeof' _arg1[820760]))
    unknown call_tmp[820872] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820875 'move' call_tmp[820872](820766 'typeof' _arg2[820761]))
    unknown call_tmp[820877] "expr temp" "maybe param" "maybe type" "temp"
    (820880 'move' call_tmp[820877](820768 call == call_tmp[820867] call_tmp[820872]))
    unknown call_tmp[820882] "expr temp" "maybe param" "maybe type" "temp"
    (820885 'move' call_tmp[820882](820813 call chpl_fields_are_comparable[820770] _arg1[820760] _arg2[820761]))
    (820817 '&' call_tmp[820877] call_tmp[820882])
  }
  function chpl_fields_are_comparable[820899](arg _arg1[820901]:chpl_LocalSpinlock[187432], arg _arg2[820902]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820920]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820927] "expr temp" "maybe param" "maybe type" "temp"
    (820930 'move' call_tmp[820927](820905 call l _mt[243] _arg1[820901]))
    unknown call_tmp[820932] "expr temp" "maybe param" "maybe type" "temp"
    (820935 'move' call_tmp[820932](820909 call l _mt[243] _arg2[820902]))
    unknown call_tmp[820937] "expr temp" "maybe param" "maybe type" "temp"
    (820940 'move' call_tmp[820937](820913 'call resolves' c"<" call_tmp[820927] call_tmp[820932]))
    (820925 'move' ret[820920](820924 'deref' call_tmp[820937]))
    (820922 return ret[820920])
  }
  function <[820887](arg _arg1[820889]:chpl_LocalSpinlock[187432], arg _arg2[820890]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820984]:bool[10] "RVV" "temp"
    unknown call_tmp[821001] "expr temp" "maybe param" "maybe type" "temp"
    (821004 'move' call_tmp[821001](820948 call l _mt[243] _arg1[820889]))
    unknown call_tmp[821006] "expr temp" "maybe param" "maybe type" "temp"
    (821009 'move' call_tmp[821006](820952 call l _mt[243] _arg2[820890]))
    unknown call_tmp[821011] "expr temp" "maybe param" "maybe type" "temp"
    (821014 'move' call_tmp[821011](820956 call < call_tmp[821001] call_tmp[821006]))
    if call_tmp[821011]
    {
      (820989 'move' ret[820984](820988 'deref' 1))
      gotoReturn _end_<[820982] _end_<[820982]
    }
    unknown call_tmp[821016] "expr temp" "maybe param" "maybe type" "temp"
    (821019 'move' call_tmp[821016](820962 call l _mt[243] _arg1[820889]))
    unknown call_tmp[821021] "expr temp" "maybe param" "maybe type" "temp"
    (821024 'move' call_tmp[821021](820966 call l _mt[243] _arg2[820890]))
    unknown call_tmp[821026] "expr temp" "maybe param" "maybe type" "temp"
    (821029 'move' call_tmp[821026](820970 call > call_tmp[821016] call_tmp[821021]))
    if call_tmp[821026]
    {
      (820994 'move' ret[820984](820993 'deref' 0))
      gotoReturn _end_<[820982] _end_<[820982]
    }
    (820999 'move' ret[820984](820998 'deref' 0))
    label _end_<[820982]
    (820986 return ret[820984])
  }
  where {
    unknown call_tmp[821031] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821034 'move' call_tmp[821031](820893 'typeof' _arg1[820889]))
    unknown call_tmp[821036] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821039 'move' call_tmp[821036](820895 'typeof' _arg2[820890]))
    unknown call_tmp[821041] "expr temp" "maybe param" "maybe type" "temp"
    (821044 'move' call_tmp[821041](820897 call == call_tmp[821031] call_tmp[821036]))
    unknown call_tmp[821046] "expr temp" "maybe param" "maybe type" "temp"
    (821049 'move' call_tmp[821046](820942 call chpl_fields_are_comparable[820899] _arg1[820889] _arg2[820890]))
    (820946 '&' call_tmp[821041] call_tmp[821046])
  }
  function chpl_fields_are_comparable[821063](arg _arg1[821065]:chpl_LocalSpinlock[187432], arg _arg2[821066]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[821084]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[821091] "expr temp" "maybe param" "maybe type" "temp"
    (821094 'move' call_tmp[821091](821069 call l _mt[243] _arg1[821065]))
    unknown call_tmp[821096] "expr temp" "maybe param" "maybe type" "temp"
    (821099 'move' call_tmp[821096](821073 call l _mt[243] _arg2[821066]))
    unknown call_tmp[821101] "expr temp" "maybe param" "maybe type" "temp"
    (821104 'move' call_tmp[821101](821077 'call resolves' c"<=" call_tmp[821091] call_tmp[821096]))
    (821089 'move' ret[821084](821088 'deref' call_tmp[821101]))
    (821086 return ret[821084])
  }
  function <=[821051](arg _arg1[821053]:chpl_LocalSpinlock[187432], arg _arg2[821054]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821148]:bool[10] "RVV" "temp"
    unknown call_tmp[821165] "expr temp" "maybe param" "maybe type" "temp"
    (821168 'move' call_tmp[821165](821112 call l _mt[243] _arg1[821053]))
    unknown call_tmp[821170] "expr temp" "maybe param" "maybe type" "temp"
    (821173 'move' call_tmp[821170](821116 call l _mt[243] _arg2[821054]))
    unknown call_tmp[821175] "expr temp" "maybe param" "maybe type" "temp"
    (821178 'move' call_tmp[821175](821120 call < call_tmp[821165] call_tmp[821170]))
    if call_tmp[821175]
    {
      (821153 'move' ret[821148](821152 'deref' 1))
      gotoReturn _end_<=[821146] _end_<=[821146]
    }
    unknown call_tmp[821180] "expr temp" "maybe param" "maybe type" "temp"
    (821183 'move' call_tmp[821180](821126 call l _mt[243] _arg1[821053]))
    unknown call_tmp[821185] "expr temp" "maybe param" "maybe type" "temp"
    (821188 'move' call_tmp[821185](821130 call l _mt[243] _arg2[821054]))
    unknown call_tmp[821190] "expr temp" "maybe param" "maybe type" "temp"
    (821193 'move' call_tmp[821190](821134 call > call_tmp[821180] call_tmp[821185]))
    if call_tmp[821190]
    {
      (821158 'move' ret[821148](821157 'deref' 0))
      gotoReturn _end_<=[821146] _end_<=[821146]
    }
    (821163 'move' ret[821148](821162 'deref' 1))
    label _end_<=[821146]
    (821150 return ret[821148])
  }
  where {
    unknown call_tmp[821195] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821198 'move' call_tmp[821195](821057 'typeof' _arg1[821053]))
    unknown call_tmp[821200] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821203 'move' call_tmp[821200](821059 'typeof' _arg2[821054]))
    unknown call_tmp[821205] "expr temp" "maybe param" "maybe type" "temp"
    (821208 'move' call_tmp[821205](821061 call == call_tmp[821195] call_tmp[821200]))
    unknown call_tmp[821210] "expr temp" "maybe param" "maybe type" "temp"
    (821213 'move' call_tmp[821210](821106 call chpl_fields_are_comparable[821063] _arg1[821053] _arg2[821054]))
    (821110 '&' call_tmp[821205] call_tmp[821210])
  }
  function chpl_fields_are_comparable[821227](arg _arg1[821229]:chpl_LocalSpinlock[187432], arg _arg2[821230]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[821248]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[821255] "expr temp" "maybe param" "maybe type" "temp"
    (821258 'move' call_tmp[821255](821233 call l _mt[243] _arg1[821229]))
    unknown call_tmp[821260] "expr temp" "maybe param" "maybe type" "temp"
    (821263 'move' call_tmp[821260](821237 call l _mt[243] _arg2[821230]))
    unknown call_tmp[821265] "expr temp" "maybe param" "maybe type" "temp"
    (821268 'move' call_tmp[821265](821241 'call resolves' c">" call_tmp[821255] call_tmp[821260]))
    (821253 'move' ret[821248](821252 'deref' call_tmp[821265]))
    (821250 return ret[821248])
  }
  function >[821215](arg _arg1[821217]:chpl_LocalSpinlock[187432], arg _arg2[821218]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821312]:bool[10] "RVV" "temp"
    unknown call_tmp[821329] "expr temp" "maybe param" "maybe type" "temp"
    (821332 'move' call_tmp[821329](821276 call l _mt[243] _arg1[821217]))
    unknown call_tmp[821334] "expr temp" "maybe param" "maybe type" "temp"
    (821337 'move' call_tmp[821334](821280 call l _mt[243] _arg2[821218]))
    unknown call_tmp[821339] "expr temp" "maybe param" "maybe type" "temp"
    (821342 'move' call_tmp[821339](821284 call > call_tmp[821329] call_tmp[821334]))
    if call_tmp[821339]
    {
      (821317 'move' ret[821312](821316 'deref' 1))
      gotoReturn _end_>[821310] _end_>[821310]
    }
    unknown call_tmp[821344] "expr temp" "maybe param" "maybe type" "temp"
    (821347 'move' call_tmp[821344](821290 call l _mt[243] _arg1[821217]))
    unknown call_tmp[821349] "expr temp" "maybe param" "maybe type" "temp"
    (821352 'move' call_tmp[821349](821294 call l _mt[243] _arg2[821218]))
    unknown call_tmp[821354] "expr temp" "maybe param" "maybe type" "temp"
    (821357 'move' call_tmp[821354](821298 call < call_tmp[821344] call_tmp[821349]))
    if call_tmp[821354]
    {
      (821322 'move' ret[821312](821321 'deref' 0))
      gotoReturn _end_>[821310] _end_>[821310]
    }
    (821327 'move' ret[821312](821326 'deref' 0))
    label _end_>[821310]
    (821314 return ret[821312])
  }
  where {
    unknown call_tmp[821359] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821362 'move' call_tmp[821359](821221 'typeof' _arg1[821217]))
    unknown call_tmp[821364] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821367 'move' call_tmp[821364](821223 'typeof' _arg2[821218]))
    unknown call_tmp[821369] "expr temp" "maybe param" "maybe type" "temp"
    (821372 'move' call_tmp[821369](821225 call == call_tmp[821359] call_tmp[821364]))
    unknown call_tmp[821374] "expr temp" "maybe param" "maybe type" "temp"
    (821377 'move' call_tmp[821374](821270 call chpl_fields_are_comparable[821227] _arg1[821217] _arg2[821218]))
    (821274 '&' call_tmp[821369] call_tmp[821374])
  }
  function chpl_fields_are_comparable[821391](arg _arg1[821393]:chpl_LocalSpinlock[187432], arg _arg2[821394]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[821412]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[821419] "expr temp" "maybe param" "maybe type" "temp"
    (821422 'move' call_tmp[821419](821397 call l _mt[243] _arg1[821393]))
    unknown call_tmp[821424] "expr temp" "maybe param" "maybe type" "temp"
    (821427 'move' call_tmp[821424](821401 call l _mt[243] _arg2[821394]))
    unknown call_tmp[821429] "expr temp" "maybe param" "maybe type" "temp"
    (821432 'move' call_tmp[821429](821405 'call resolves' c">=" call_tmp[821419] call_tmp[821424]))
    (821417 'move' ret[821412](821416 'deref' call_tmp[821429]))
    (821414 return ret[821412])
  }
  function >=[821379](arg _arg1[821381]:chpl_LocalSpinlock[187432], arg _arg2[821382]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821476]:bool[10] "RVV" "temp"
    unknown call_tmp[821493] "expr temp" "maybe param" "maybe type" "temp"
    (821496 'move' call_tmp[821493](821440 call l _mt[243] _arg1[821381]))
    unknown call_tmp[821498] "expr temp" "maybe param" "maybe type" "temp"
    (821501 'move' call_tmp[821498](821444 call l _mt[243] _arg2[821382]))
    unknown call_tmp[821503] "expr temp" "maybe param" "maybe type" "temp"
    (821506 'move' call_tmp[821503](821448 call > call_tmp[821493] call_tmp[821498]))
    if call_tmp[821503]
    {
      (821481 'move' ret[821476](821480 'deref' 1))
      gotoReturn _end_>=[821474] _end_>=[821474]
    }
    unknown call_tmp[821508] "expr temp" "maybe param" "maybe type" "temp"
    (821511 'move' call_tmp[821508](821454 call l _mt[243] _arg1[821381]))
    unknown call_tmp[821513] "expr temp" "maybe param" "maybe type" "temp"
    (821516 'move' call_tmp[821513](821458 call l _mt[243] _arg2[821382]))
    unknown call_tmp[821518] "expr temp" "maybe param" "maybe type" "temp"
    (821521 'move' call_tmp[821518](821462 call < call_tmp[821508] call_tmp[821513]))
    if call_tmp[821518]
    {
      (821486 'move' ret[821476](821485 'deref' 0))
      gotoReturn _end_>=[821474] _end_>=[821474]
    }
    (821491 'move' ret[821476](821490 'deref' 1))
    label _end_>=[821474]
    (821478 return ret[821476])
  }
  where {
    unknown call_tmp[821523] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821526 'move' call_tmp[821523](821385 'typeof' _arg1[821381]))
    unknown call_tmp[821528] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821531 'move' call_tmp[821528](821387 'typeof' _arg2[821382]))
    unknown call_tmp[821533] "expr temp" "maybe param" "maybe type" "temp"
    (821536 'move' call_tmp[821533](821389 call == call_tmp[821523] call_tmp[821528]))
    unknown call_tmp[821538] "expr temp" "maybe param" "maybe type" "temp"
    (821541 'move' call_tmp[821538](821434 call chpl_fields_are_comparable[821391] _arg1[821381] _arg2[821382]))
    (821438 '&' call_tmp[821533] call_tmp[821538])
  }
  function =[821543](ref arg _arg1[821545]:chpl_LocalSpinlock[187432], const?  ref arg _arg2[821546]:chpl_LocalSpinlock[187432]) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[821572] "expr temp" "maybe param" "maybe type" "temp"
    (821575 'move' call_tmp[821572](821556 call l _mt[243] _arg1[821545]))
    unknown call_tmp[821579] "expr temp" "maybe param" "maybe type" "temp"
    (821582 'move' call_tmp[821579](821560 call l _mt[243] _arg2[821546]))
    (821564 call = call_tmp[821572] call_tmp[821579])
    (821568 return _void[55])
  }
  where {
    unknown call_tmp[821584] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821587 'move' call_tmp[821584](821549 'typeof' _arg1[821545]))
    unknown call_tmp[821589] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821592 'move' call_tmp[821589](821551 'typeof' _arg2[821546]))
    (821553 call == call_tmp[821584] call_tmp[821589])
  }
  function chpl__defaultHash[821594](arg r[821596]:chpl_LocalSpinlock[187432]) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[821609] "RVV" "temp"
    unknown call_tmp[821616] "expr temp" "maybe param" "maybe type" "temp"
    (821619 'move' call_tmp[821616](821598 call l _mt[243] r[821596]))
    unknown call_tmp[821621] "expr temp" "maybe param" "maybe type" "temp"
    (821624 'move' call_tmp[821621](821602 call chpl__defaultHash call_tmp[821616]))
    (821614 'move' ret[821609](821613 'deref' call_tmp[821621]))
    (821611 return ret[821609])
  }
  type chpl_LocalSpinlock[187432] unknown l[187317](187316 call chpl__processorAtomicType bool[10])
  (355333 'used modules list'(187305 'use' Atomics[43964])(187307 'use' ChapelBase[307])(187310 'use' MemConsistency[186648]))
}