AST dump for MemTracking after pass refPropagation.
Module use list: ChapelStandard SysCTypes 

{
  function chpl__init_MemTracking[415922]() : void[4] "insert line file info" "module init" "resolved"
  {
    const-val call_tmp[678353]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678356 'move' call_tmp[678353](544176 call chpl_config_has_value[334] c"memTrack" c"Built-in"))
    const-val call_tmp[678358]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    const-val call_tmp[2060559]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2060561 'move' call_tmp[2060559](2060563 '!' call_tmp[678353]))
    (678361 'move' call_tmp[678358] call_tmp[2060559])
    if call_tmp[678358]
    {
      (544195 'move' tmp[544167] 0)
    }
    {
      const-val call_tmp[678368]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678371 'move' call_tmp[678368](544186 call chpl_config_get_value[350] c"memTrack" c"Built-in"))
      (544191 'move' tmp[544167](544189 call _command_line_cast[1353726] call_tmp[678368]))
    }
    (544169 'move' memTrack[166611] tmp[544167])
    (2033530 '_private_broadcast' memTrack[166611])
    const-val call_tmp[678373]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678376 'move' call_tmp[678373](544206 call chpl_config_has_value[334] c"memStats" c"Built-in"))
    const-val call_tmp[678378]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    const-val call_tmp[2060568]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2060570 'move' call_tmp[2060568](2060572 '!' call_tmp[678373]))
    (678381 'move' call_tmp[678378] call_tmp[2060568])
    if call_tmp[678378]
    {
      (544225 'move' tmp[544197] 0)
    }
    {
      const-val call_tmp[678388]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678391 'move' call_tmp[678388](544216 call chpl_config_get_value[350] c"memStats" c"Built-in"))
      (544221 'move' tmp[544197](544219 call _command_line_cast[1353769] call_tmp[678388]))
    }
    (544199 'move' memStats[166616] tmp[544197])
    (2033532 '_private_broadcast' memStats[166616])
    const-val call_tmp[678393]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678396 'move' call_tmp[678393](544236 call chpl_config_has_value[334] c"memLeaksByType" c"Built-in"))
    const-val call_tmp[678398]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    const-val call_tmp[2060577]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2060579 'move' call_tmp[2060577](2060581 '!' call_tmp[678393]))
    (678401 'move' call_tmp[678398] call_tmp[2060577])
    if call_tmp[678398]
    {
      (544255 'move' tmp[544227] 0)
    }
    {
      const-val call_tmp[678408]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678411 'move' call_tmp[678408](544246 call chpl_config_get_value[350] c"memLeaksByType" c"Built-in"))
      (544251 'move' tmp[544227](544249 call _command_line_cast[1353812] call_tmp[678408]))
    }
    (544229 'move' memLeaksByType[166621] tmp[544227])
    (2033534 '_private_broadcast' memLeaksByType[166621])
    const-val call_tmp[678413]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678416 'move' call_tmp[678413](544266 call chpl_config_has_value[334] c"memLeaks" c"Built-in"))
    const-val call_tmp[678418]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    const-val call_tmp[2060586]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2060588 'move' call_tmp[2060586](2060590 '!' call_tmp[678413]))
    (678421 'move' call_tmp[678418] call_tmp[2060586])
    if call_tmp[678418]
    {
      (544285 'move' tmp[544257] 0)
    }
    {
      const-val call_tmp[678428]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678431 'move' call_tmp[678428](544276 call chpl_config_get_value[350] c"memLeaks" c"Built-in"))
      (544281 'move' tmp[544257](544279 call _command_line_cast[1353855] call_tmp[678428]))
    }
    (544259 'move' memLeaks[166626] tmp[544257])
    (2033536 '_private_broadcast' memLeaks[166626])
    const-val call_tmp[678433]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678436 'move' call_tmp[678433](544296 call chpl_config_has_value[334] c"memMax" c"Built-in"))
    const-val call_tmp[678438]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    const-val call_tmp[2060595]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2060597 'move' call_tmp[2060595](2060599 '!' call_tmp[678433]))
    (678441 'move' call_tmp[678438] call_tmp[2060595])
    if call_tmp[678438]
    {
      const-val init_coerce_tmp[1353897]:uint(64)[115] "dead at end of block" "temp"
      (1353900 'move' init_coerce_tmp[1353897](1356676 'cast' uint(64)[115] 0))
      (544315 'move' tmp[544287] init_coerce_tmp[1353897])
    }
    {
      const-val call_tmp[678448]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678451 'move' call_tmp[678448](544306 call chpl_config_get_value[350] c"memMax" c"Built-in"))
      (544311 'move' tmp[544287](544309 call _command_line_cast[1353906] call_tmp[678448]))
    }
    (544289 'move' memMax[166631] tmp[544287])
    (2033538 '_private_broadcast' memMax[166631])
    const-val call_tmp[678453]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678456 'move' call_tmp[678453](544326 call chpl_config_has_value[334] c"memThreshold" c"Built-in"))
    const-val call_tmp[678458]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    const-val call_tmp[2060604]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2060606 'move' call_tmp[2060604](2060608 '!' call_tmp[678453]))
    (678461 'move' call_tmp[678458] call_tmp[2060604])
    if call_tmp[678458]
    {
      const-val init_coerce_tmp[1356231]:uint(64)[115] "dead at end of block" "temp"
      (1356234 'move' init_coerce_tmp[1356231](1356680 'cast' uint(64)[115] 0))
      (544345 'move' tmp[544317] init_coerce_tmp[1356231])
    }
    {
      const-val call_tmp[678468]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678471 'move' call_tmp[678468](544336 call chpl_config_get_value[350] c"memThreshold" c"Built-in"))
      (544341 'move' tmp[544317](544339 call _command_line_cast[1356240] call_tmp[678468]))
    }
    (544319 'move' memThreshold[166636] tmp[544317])
    (2033540 '_private_broadcast' memThreshold[166636])
    const-val call_tmp[678473]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678476 'move' call_tmp[678473](544356 call chpl_config_has_value[334] c"memLog" c"Built-in"))
    const-val call_tmp[678478]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    const-val call_tmp[2060613]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2060615 'move' call_tmp[2060613](2060617 '!' call_tmp[678473]))
    (678481 'move' call_tmp[678478] call_tmp[2060613])
    if call_tmp[678478]
    {
      (1356684 call init[30760] tmp[544347])
    }
    {
      const-val call_tmp[678488]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678491 'move' call_tmp[678488](544366 call chpl_config_get_value[350] c"memLog" c"Built-in"))
      const-val ret_tmp[1794737]:string[26] "temp"
      (544369 call _command_line_cast[1356284] call_tmp[678488] ret_tmp[1794737])
      (1794740 'move' tmp[544347] ret_tmp[1794737])
    }
    (544349 'move' memLog[166640] tmp[544347])
    (2033542 '_private_broadcast' memLog[166640])
    const-val call_tmp[678493]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678496 'move' call_tmp[678493](544386 call chpl_config_has_value[334] c"memLeaksLog" c"Built-in"))
    const-val call_tmp[678498]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    const-val call_tmp[2060622]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2060624 'move' call_tmp[2060622](2060626 '!' call_tmp[678493]))
    (678501 'move' call_tmp[678498] call_tmp[2060622])
    if call_tmp[678498]
    {
      (1356689 call init[30760] tmp[544377])
    }
    {
      const-val call_tmp[678508]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678511 'move' call_tmp[678508](544396 call chpl_config_get_value[350] c"memLeaksLog" c"Built-in"))
      const-val ret_tmp[1794773]:string[26] "temp"
      (544399 call _command_line_cast[1356590] call_tmp[678508] ret_tmp[1794773])
      (1794776 'move' tmp[544377] ret_tmp[1794773])
    }
    (544379 'move' memLeaksLog[166645] tmp[544377])
    (2033544 '_private_broadcast' memLeaksLog[166645])
    const-val call_tmp[678513]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678516 'move' call_tmp[678513](544416 call chpl_config_has_value[334] c"memLeaksByDesc" c"Built-in"))
    const-val call_tmp[678518]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    const-val call_tmp[2060631]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2060633 'move' call_tmp[2060631](2060635 '!' call_tmp[678513]))
    (678521 'move' call_tmp[678518] call_tmp[2060631])
    if call_tmp[678518]
    {
      (1356694 call init[30760] tmp[544407])
    }
    {
      const-val call_tmp[678528]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678531 'move' call_tmp[678528](544426 call chpl_config_get_value[350] c"memLeaksByDesc" c"Built-in"))
      const-val ret_tmp[1794785]:string[26] "temp"
      (544429 call _command_line_cast[1356634] call_tmp[678528] ret_tmp[1794785])
      (1794788 'move' tmp[544407] ret_tmp[1794785])
    }
    (544409 'move' memLeaksByDesc[166650] tmp[544407])
    (2033546 '_private_broadcast' memLeaksByDesc[166650])
    (678538 'move' call_tmp[678535] memMax[166631])
    (544437 'move' cMemMax[166661] call_tmp[678535])
    (2033548 '_private_broadcast' cMemMax[166661])
    (678545 'move' call_tmp[678542] memThreshold[166636])
    (544439 'move' cMemThreshold[166671] call_tmp[678542])
    (2033550 '_private_broadcast' cMemThreshold[166671])
    (521827 return _void[55])
  }
  const-val memTrack[166611]:bool[10] "config" "const" "insert auto destroy"
  const-val memStats[166616]:bool[10] "config" "const" "insert auto destroy"
  const-val memLeaksByType[166621]:bool[10] "config" "const" "insert auto destroy"
  const-val memLeaks[166626]:bool[10] "config" "const" "insert auto destroy"
  const-val memMax[166631]:uint(64)[115] "config" "const" "insert auto destroy"
  const-val memThreshold[166636]:uint(64)[115] "config" "const" "insert auto destroy"
  const-val memLog[166640]:string[26] "config" "const" "insert auto destroy"
  const-val memLeaksLog[166645]:string[26] "config" "const" "insert auto destroy" "no auto destroy"
  const-val memLeaksByDesc[166650]:string[26] "config" "const" "insert auto destroy" "no auto destroy"
  const-val cMemMax[166661]:uint(64)[115] "dead at end of block" "const" "insert auto destroy"
  const-val cMemThreshold[166671]:uint(64)[115] "dead at end of block" "const" "insert auto destroy"
  function chpl_memTracking_returnConfigVals[166681](ref arg ret_memTrack[166678]:bool[10], ref arg ret_memStats[166684]:bool[10], ref arg ret_memLeaksByType[166688]:bool[10], ref arg ret_memLeaksByDesc[166692]:c_string[19], ref arg ret_memLeaks[166696]:bool[10], ref arg ret_memMax[166700]:uint(64)[115], ref arg ret_memThreshold[166704]:uint(64)[115], ref arg ret_memLog[166708]:c_string[19], ref arg ret_memLeaksLog[166712]:c_string[19]) : void[4] "export" "local args" "resolved" "no return value for void"
  {
    (2081325 '=' ret_memTrack[166678] memTrack[166611])
    (2081331 '=' ret_memStats[166684] memStats[166616])
    (2081337 '=' ret_memLeaksByType[166688] memLeaksByType[166621])
    (2081343 '=' ret_memLeaks[166696] memLeaks[166626])
    (2157676 '=' ret_memMax[166700] cMemMax[166661])
    (2157682 '=' ret_memThreshold[166704] cMemThreshold[166671])
    const-val call_tmp[678547]:locale[28] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val ret_tmp[1787351]:locale[28] "temp"
    const-val call_tmp[2113493]:chpl_localeID_t[209294] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val call_tmp[2113495]:chpl_localeID_t[209294] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    (2113497 'move' call_tmp[2113495](2113500 call chpl_rt_buildLocaleID[209372] chpl_nodeID[208152] c_sublocid_any[89875]))
    (2113503 'move' call_tmp[2113493] call_tmp[2113495])
    const-val call_tmp[2113506]:locale[28] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val ret_tmp[2113508]:locale[28] "temp"
    (2113511 call chpl_localeID_to_locale[92849] call_tmp[2113493] ret_tmp[2113508])
    (2113514 'move' call_tmp[2113506] ret_tmp[2113508])
    (2113517 '=' ret_tmp[1787351] call_tmp[2113506])
    (1787354 'move' call_tmp[678547] ret_tmp[1787351])
    const-val call_tmp[678554]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
    val coerce_tmp[2115292]:BaseLocale[91201] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (2115294 'move' coerce_tmp[2115292](2115296 '.v' call_tmp[678547] _instance[89975]))
    val coerce_tmp[2115299]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (2115301 'move' coerce_tmp[2115299](2115303 'cast' object[22] coerce_tmp[2115292]))
    const-val call_tmp[2115306]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2115308 'move' call_tmp[2115306](2115310 'ptr_eq' coerce_tmp[2115299] nil[44]))
    if call_tmp[2115306]
    {
      (2115316 call nilCheckHalt[210063] "argument to ! is nil")
    }
    const-val call_tmp[2115319]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
    (2115321 'move' call_tmp[2115319](2115324 call id[90754] coerce_tmp[2115292]))
    (678557 'move' call_tmp[678554] call_tmp[2115319])
    const-val call_tmp[678559]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    val inlineImm[2061632]:int(64)[13] "temp"
    (2061635 'move' inlineImm[2061632] 0)
    const-val call_tmp[2061638]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2061640 'move' call_tmp[2061638](2061642 '!=' call_tmp[678554] inlineImm[2061632]))
    (678562 'move' call_tmp[678559] call_tmp[2061638])
    const-val call_tmp[678564]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678567 'move' call_tmp[678564] call_tmp[678559])
    if call_tmp[678564]
    {
      const-val call_tmp[678571]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      ref i_this[2092343]:string[26] "temp"
      (2092347 'move' i_this[2092343](2092345 'set reference' memLeaksByDesc[166650]))
      const-val n[2092350]:int(64)[13] "dead at end of block" "const" "insert auto destroy"
      const-val coerce_tmp[2092352]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2092354 'move' coerce_tmp[2092352](2092356 '.v' memLeaksByDesc[166650] cachedNumCodepoints[30731]))
      (2092359 '=' n[2092350] coerce_tmp[2092352])
      (2092362 'noop')
      const-val call_tmp[2092363]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2092365 'move' call_tmp[2092363](2092368 call countNumCodepoints[181334] i_this[2092343]))
      const-val call_tmp[2092370]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2092372 'move' call_tmp[2092370](2092374 '!=' coerce_tmp[2092352] call_tmp[2092363]))
      if call_tmp[2092370]
      {
        (2092380 call halt[154067] "Encountered corrupt string metadata")
      }
      (678574 'move' call_tmp[678571] n[2092350])
      const-val call_tmp[678576]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      val inlineImm[2061647]:int(64)[13] "temp"
      (2061650 'move' inlineImm[2061647] 0)
      const-val call_tmp[2061653]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2061655 'move' call_tmp[2061653](2061657 '!=' call_tmp[678571] inlineImm[2061647]))
      (678579 'move' call_tmp[678576] call_tmp[2061653])
      const-val call_tmp[678581]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (678584 'move' call_tmp[678581] call_tmp[678576])
      if call_tmp[678581]
      {
        val local_memLeaksByDesc[166761]:string[26] "dead at end of block" "insert auto destroy"
        (544441 call init=[30771] local_memLeaksByDesc[166761] memLeaksByDesc[166650])
        val inlineImm[2081348]:bool[10] "temp"
        (2081351 'move' inlineImm[2081348] 0)
        (2323650 '.=' local_memLeaksByDesc[166761] isOwned[30743] inlineImm[2081348])
        const-val call_tmp[678595]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        const-val coerce_tmp[2098058]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2098060 'move' coerce_tmp[2098058](2098062 '.v' local_memLeaksByDesc[166761] locale_id[30754]))
        const-val call_tmp[2098065]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2098067 'move' call_tmp[2098065](2098069 '!=' coerce_tmp[2098058] chpl_nodeID[208152]))
        if call_tmp[2098065]
        {
          (2098075 call halt[154067] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2098078]:c_ptr(uint(8))[937334] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2098080 'move' coerce_tmp[2098078](2098082 '.v' local_memLeaksByDesc[166761] buff[30737]))
        const-val call_tmp[2098085]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2098087 'move' call_tmp[2098085](2098089 'cast' c_string[19] coerce_tmp[2098078]))
        (678598 'move' call_tmp[678595] call_tmp[2098085])
        (2066191 '=' ret_memLeaksByDesc[166692] call_tmp[678595])
        ref i_x[2075874]:string[26] "temp"
        (2075878 'move' i_x[2075874](2075876 'set reference' local_memLeaksByDesc[166761]))
        (2075882 call deinit[30831] i_x[2075874])
      }
      {
        const-val call_tmp[2066319]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2066321 'move' call_tmp[2066319](2066323 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2066326]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2066328 'move' call_tmp[2066326](2066330 'cast' c_string[19] call_tmp[2066319]))
        (2066333 '=' ret_memLeaksByDesc[166692] call_tmp[2066326])
      }
      const-val call_tmp[678602]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      ref i_this[2092385]:string[26] "temp"
      (2092389 'move' i_this[2092385](2092387 'set reference' memLog[166640]))
      const-val n[2092392]:int(64)[13] "dead at end of block" "const" "insert auto destroy"
      const-val coerce_tmp[2092394]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2092396 'move' coerce_tmp[2092394](2092398 '.v' memLog[166640] cachedNumCodepoints[30731]))
      (2092401 '=' n[2092392] coerce_tmp[2092394])
      (2092404 'noop')
      const-val call_tmp[2092405]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2092407 'move' call_tmp[2092405](2092410 call countNumCodepoints[181334] i_this[2092385]))
      const-val call_tmp[2092412]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2092414 'move' call_tmp[2092412](2092416 '!=' coerce_tmp[2092394] call_tmp[2092405]))
      if call_tmp[2092412]
      {
        (2092422 call halt[154067] "Encountered corrupt string metadata")
      }
      (678605 'move' call_tmp[678602] n[2092392])
      const-val call_tmp[678607]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      val inlineImm[2061662]:int(64)[13] "temp"
      (2061665 'move' inlineImm[2061662] 0)
      const-val call_tmp[2061668]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2061670 'move' call_tmp[2061668](2061672 '!=' call_tmp[678602] inlineImm[2061662]))
      (678610 'move' call_tmp[678607] call_tmp[2061668])
      const-val call_tmp[678612]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (678615 'move' call_tmp[678612] call_tmp[678607])
      if call_tmp[678612]
      {
        val local_memLog[166803]:string[26] "dead at end of block" "insert auto destroy"
        (544443 call init=[30771] local_memLog[166803] memLog[166640])
        val inlineImm[2081359]:bool[10] "temp"
        (2081362 'move' inlineImm[2081359] 0)
        (2323660 '.=' local_memLog[166803] isOwned[30743] inlineImm[2081359])
        const-val call_tmp[678626]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        const-val coerce_tmp[2098101]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2098103 'move' coerce_tmp[2098101](2098105 '.v' local_memLog[166803] locale_id[30754]))
        const-val call_tmp[2098108]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2098110 'move' call_tmp[2098108](2098112 '!=' coerce_tmp[2098101] chpl_nodeID[208152]))
        if call_tmp[2098108]
        {
          (2098118 call halt[154067] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2098121]:c_ptr(uint(8))[937334] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2098123 'move' coerce_tmp[2098121](2098125 '.v' local_memLog[166803] buff[30737]))
        const-val call_tmp[2098128]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2098130 'move' call_tmp[2098128](2098132 'cast' c_string[19] coerce_tmp[2098121]))
        (678629 'move' call_tmp[678626] call_tmp[2098128])
        (2066203 '=' ret_memLog[166708] call_tmp[678626])
        ref i_x[2075886]:string[26] "temp"
        (2075890 'move' i_x[2075886](2075888 'set reference' local_memLog[166803]))
        (2075894 call deinit[30831] i_x[2075886])
      }
      {
        const-val call_tmp[2066339]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2066341 'move' call_tmp[2066339](2066343 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2066346]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2066348 'move' call_tmp[2066346](2066350 'cast' c_string[19] call_tmp[2066339]))
        (2066353 '=' ret_memLog[166708] call_tmp[2066346])
      }
      const-val call_tmp[678633]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      ref i_this[2092427]:string[26] "temp"
      (2092431 'move' i_this[2092427](2092429 'set reference' memLeaksLog[166645]))
      const-val n[2092434]:int(64)[13] "dead at end of block" "const" "insert auto destroy"
      const-val coerce_tmp[2092436]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2092438 'move' coerce_tmp[2092436](2092440 '.v' memLeaksLog[166645] cachedNumCodepoints[30731]))
      (2092443 '=' n[2092434] coerce_tmp[2092436])
      (2092446 'noop')
      const-val call_tmp[2092447]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2092449 'move' call_tmp[2092447](2092452 call countNumCodepoints[181334] i_this[2092427]))
      const-val call_tmp[2092454]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2092456 'move' call_tmp[2092454](2092458 '!=' coerce_tmp[2092436] call_tmp[2092447]))
      if call_tmp[2092454]
      {
        (2092464 call halt[154067] "Encountered corrupt string metadata")
      }
      (678636 'move' call_tmp[678633] n[2092434])
      const-val call_tmp[678638]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      val inlineImm[2061677]:int(64)[13] "temp"
      (2061680 'move' inlineImm[2061677] 0)
      const-val call_tmp[2061683]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2061685 'move' call_tmp[2061683](2061687 '!=' call_tmp[678633] inlineImm[2061677]))
      (678641 'move' call_tmp[678638] call_tmp[2061683])
      const-val call_tmp[678643]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (678646 'move' call_tmp[678643] call_tmp[678638])
      if call_tmp[678643]
      {
        val local_memLeaksLog[166844]:string[26] "dead at end of block" "insert auto destroy"
        (544445 call init=[30771] local_memLeaksLog[166844] memLeaksLog[166645])
        val inlineImm[2081370]:bool[10] "temp"
        (2081373 'move' inlineImm[2081370] 0)
        (2323670 '.=' local_memLeaksLog[166844] isOwned[30743] inlineImm[2081370])
        const-val call_tmp[678657]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        const-val coerce_tmp[2098144]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2098146 'move' coerce_tmp[2098144](2098148 '.v' local_memLeaksLog[166844] locale_id[30754]))
        const-val call_tmp[2098151]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2098153 'move' call_tmp[2098151](2098155 '!=' coerce_tmp[2098144] chpl_nodeID[208152]))
        if call_tmp[2098151]
        {
          (2098161 call halt[154067] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2098164]:c_ptr(uint(8))[937334] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2098166 'move' coerce_tmp[2098164](2098168 '.v' local_memLeaksLog[166844] buff[30737]))
        const-val call_tmp[2098171]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2098173 'move' call_tmp[2098171](2098175 'cast' c_string[19] coerce_tmp[2098164]))
        (678660 'move' call_tmp[678657] call_tmp[2098171])
        (2066209 '=' ret_memLeaksLog[166712] call_tmp[678657])
        ref i_x[2075898]:string[26] "temp"
        (2075902 'move' i_x[2075898](2075900 'set reference' local_memLeaksLog[166844]))
        (2075906 call deinit[30831] i_x[2075898])
      }
      {
        const-val call_tmp[2066359]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2066361 'move' call_tmp[2066359](2066363 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2066366]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2066368 'move' call_tmp[2066366](2066370 'cast' c_string[19] call_tmp[2066359]))
        (2066373 '=' ret_memLeaksLog[166712] call_tmp[2066366])
      }
    }
    {
      const-val call_tmp[678664]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      const-val coerce_tmp[2098187]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2098189 'move' coerce_tmp[2098187](2098191 '.v' memLeaksByDesc[166650] locale_id[30754]))
      const-val call_tmp[2098194]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2098196 'move' call_tmp[2098194](2098198 '!=' coerce_tmp[2098187] chpl_nodeID[208152]))
      if call_tmp[2098194]
      {
        (2098204 call halt[154067] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2098207]:c_ptr(uint(8))[937334] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2098209 'move' coerce_tmp[2098207](2098211 '.v' memLeaksByDesc[166650] buff[30737]))
      const-val call_tmp[2098214]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2098216 'move' call_tmp[2098214](2098218 'cast' c_string[19] coerce_tmp[2098207]))
      (678667 'move' call_tmp[678664] call_tmp[2098214])
      (2066215 '=' ret_memLeaksByDesc[166692] call_tmp[678664])
      const-val call_tmp[678671]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      const-val coerce_tmp[2098230]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2098232 'move' coerce_tmp[2098230](2098234 '.v' memLog[166640] locale_id[30754]))
      const-val call_tmp[2098237]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2098239 'move' call_tmp[2098237](2098241 '!=' coerce_tmp[2098230] chpl_nodeID[208152]))
      if call_tmp[2098237]
      {
        (2098247 call halt[154067] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2098250]:c_ptr(uint(8))[937334] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2098252 'move' coerce_tmp[2098250](2098254 '.v' memLog[166640] buff[30737]))
      const-val call_tmp[2098257]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2098259 'move' call_tmp[2098257](2098261 'cast' c_string[19] coerce_tmp[2098250]))
      (678674 'move' call_tmp[678671] call_tmp[2098257])
      (2066221 '=' ret_memLog[166708] call_tmp[678671])
      const-val call_tmp[678678]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      const-val coerce_tmp[2098273]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2098275 'move' coerce_tmp[2098273](2098277 '.v' memLeaksLog[166645] locale_id[30754]))
      const-val call_tmp[2098280]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2098282 'move' call_tmp[2098280](2098284 '!=' coerce_tmp[2098273] chpl_nodeID[208152]))
      if call_tmp[2098280]
      {
        (2098290 call halt[154067] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2098293]:c_ptr(uint(8))[937334] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2098295 'move' coerce_tmp[2098293](2098297 '.v' memLeaksLog[166645] buff[30737]))
      const-val call_tmp[2098300]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2098302 'move' call_tmp[2098300](2098304 'cast' c_string[19] coerce_tmp[2098293]))
      (678681 'move' call_tmp[678678] call_tmp[2098300])
      (2066227 '=' ret_memLeaksLog[166712] call_tmp[678678])
    }
    ref i_x[2209004]:locale[28] "temp"
    (2209008 'move' i_x[2209004](2209006 'set reference' call_tmp[678547]))
    (2209012 call deinit[90185] i_x[2209004])
    (521825 return _void[55])
  }
  val tmp[544167]:bool[10] "dead at end of block" "temp"
  val tmp[544197]:bool[10] "dead at end of block" "temp"
  val tmp[544227]:bool[10] "dead at end of block" "temp"
  val tmp[544257]:bool[10] "dead at end of block" "temp"
  val tmp[544287]:uint(64)[115] "dead at end of block" "temp"
  val tmp[544317]:uint(64)[115] "dead at end of block" "temp"
  val tmp[544347]:string[26] "dead at end of block" "temp"
  val tmp[544377]:string[26] "dead at end of block" "temp"
  val tmp[544407]:string[26] "dead at end of block" "temp"
  const-val call_tmp[678535]:uint(64)[115] "dead at end of block" "maybe param" "temp"
  const-val call_tmp[678542]:uint(64)[115] "dead at end of block" "maybe param" "temp"
  function chpl__deinit_MemTracking[1808173]() : void[4] "resolved"
  {
    label _endchpl__deinit_MemTracking[1808179]
    ref i_x[2079210]:string[26] "temp"
    (2079214 'move' i_x[2079210](2079212 'set reference' memLog[166640]))
    (2079218 call deinit[30831] i_x[2079210])
    (1808176 return _void[55])
  }
}