AST dump for ChapelSyncvar after pass createTaskFunctions.
Module use list: ChapelStandard AlignedTSupport MemConsistency SyncVarRuntimeSupport 

{
  function chpl__init_ChapelSyncvar[415868]() : void[4] "insert line file info" "module init"
  {
    (541414 'init var' useNativeSyncVar[84489] 1)
    (84492 'end of statement')
    (513043 return _void[55])
  }
  function isSupported[84306](arg t[84304]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512577] "RVV" "param" "temp"
    unknown tmp[421939] "maybe param" "temp"
    unknown tmp[421960] "maybe param" "temp"
    unknown tmp[421981] "maybe param" "temp"
    unknown tmp[422002] "maybe param" "temp"
    unknown tmp[422023] "maybe param" "temp"
    unknown tmp[422044] "maybe param" "temp"
    unknown tmp[422065] "maybe param" "temp"
    unknown tmp[422086] "maybe param" "temp"
    (422097 'move' tmp[422086](84311 call isNothingType t[84304]))
    unknown call_tmp[629820] "expr temp" "maybe param" "maybe type" "temp"
    (629823 'move' call_tmp[629820](422099 call _cond_invalid tmp[422086]))
    if call_tmp[629820]
    {
      (422102 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560448] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560449] "maybe param" "temp"
    unknown call_tmp[629825] "expr temp" "maybe param" "maybe type" "temp"
    (629828 'move' call_tmp[629825](422087 call isTrue tmp[422086]))
    (560454 'move' tmp[560449](560452 call _cond_test call_tmp[629825]))
    if tmp[560449]
    {
      (560459 'move' tmp[560448](560456 '_paramFoldLogical' tmp[560449] 1))
    }
    {
      unknown tmp[560461] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629830] "expr temp" "maybe param" "maybe type" "temp"
      (629833 'move' call_tmp[629830](84315 call isBoolType t[84304]))
      (560463 'move' tmp[560461](422091 call isTrue call_tmp[629830]))
      (560468 'move' tmp[560448](560465 '_paramFoldLogical' tmp[560449] tmp[560461]))
    }
    (422076 'move' tmp[422065] tmp[560448])
    unknown call_tmp[629835] "expr temp" "maybe param" "maybe type" "temp"
    (629838 'move' call_tmp[629835](422078 call _cond_invalid tmp[422065]))
    if call_tmp[629835]
    {
      (422081 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560475] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560476] "maybe param" "temp"
    unknown call_tmp[629840] "expr temp" "maybe param" "maybe type" "temp"
    (629843 'move' call_tmp[629840](422066 call isTrue tmp[422065]))
    (560481 'move' tmp[560476](560479 call _cond_test call_tmp[629840]))
    if tmp[560476]
    {
      (560486 'move' tmp[560475](560483 '_paramFoldLogical' tmp[560476] 1))
    }
    {
      unknown tmp[560488] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629845] "expr temp" "maybe param" "maybe type" "temp"
      (629848 'move' call_tmp[629845](84321 call isIntegralType t[84304]))
      (560490 'move' tmp[560488](422070 call isTrue call_tmp[629845]))
      (560495 'move' tmp[560475](560492 '_paramFoldLogical' tmp[560476] tmp[560488]))
    }
    (422055 'move' tmp[422044] tmp[560475])
    unknown call_tmp[629850] "expr temp" "maybe param" "maybe type" "temp"
    (629853 'move' call_tmp[629850](422057 call _cond_invalid tmp[422044]))
    if call_tmp[629850]
    {
      (422060 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560502] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560503] "maybe param" "temp"
    unknown call_tmp[629855] "expr temp" "maybe param" "maybe type" "temp"
    (629858 'move' call_tmp[629855](422045 call isTrue tmp[422044]))
    (560508 'move' tmp[560503](560506 call _cond_test call_tmp[629855]))
    if tmp[560503]
    {
      (560513 'move' tmp[560502](560510 '_paramFoldLogical' tmp[560503] 1))
    }
    {
      unknown tmp[560515] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629860] "expr temp" "maybe param" "maybe type" "temp"
      (629863 'move' call_tmp[629860](84327 call isRealType t[84304]))
      (560517 'move' tmp[560515](422049 call isTrue call_tmp[629860]))
      (560522 'move' tmp[560502](560519 '_paramFoldLogical' tmp[560503] tmp[560515]))
    }
    (422034 'move' tmp[422023] tmp[560502])
    unknown call_tmp[629865] "expr temp" "maybe param" "maybe type" "temp"
    (629868 'move' call_tmp[629865](422036 call _cond_invalid tmp[422023]))
    if call_tmp[629865]
    {
      (422039 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560529] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560530] "maybe param" "temp"
    unknown call_tmp[629870] "expr temp" "maybe param" "maybe type" "temp"
    (629873 'move' call_tmp[629870](422024 call isTrue tmp[422023]))
    (560535 'move' tmp[560530](560533 call _cond_test call_tmp[629870]))
    if tmp[560530]
    {
      (560540 'move' tmp[560529](560537 '_paramFoldLogical' tmp[560530] 1))
    }
    {
      unknown tmp[560542] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629875] "expr temp" "maybe param" "maybe type" "temp"
      (629878 'move' call_tmp[629875](84333 call isImagType t[84304]))
      (560544 'move' tmp[560542](422028 call isTrue call_tmp[629875]))
      (560549 'move' tmp[560529](560546 '_paramFoldLogical' tmp[560530] tmp[560542]))
    }
    (422013 'move' tmp[422002] tmp[560529])
    unknown call_tmp[629880] "expr temp" "maybe param" "maybe type" "temp"
    (629883 'move' call_tmp[629880](422015 call _cond_invalid tmp[422002]))
    if call_tmp[629880]
    {
      (422018 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560556] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560557] "maybe param" "temp"
    unknown call_tmp[629885] "expr temp" "maybe param" "maybe type" "temp"
    (629888 'move' call_tmp[629885](422003 call isTrue tmp[422002]))
    (560562 'move' tmp[560557](560560 call _cond_test call_tmp[629885]))
    if tmp[560557]
    {
      (560567 'move' tmp[560556](560564 '_paramFoldLogical' tmp[560557] 1))
    }
    {
      unknown tmp[560569] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629890] "expr temp" "maybe param" "maybe type" "temp"
      (629893 'move' call_tmp[629890](84339 call isEnumType t[84304]))
      (560571 'move' tmp[560569](422007 call isTrue call_tmp[629890]))
      (560576 'move' tmp[560556](560573 '_paramFoldLogical' tmp[560557] tmp[560569]))
    }
    (421992 'move' tmp[421981] tmp[560556])
    unknown call_tmp[629895] "expr temp" "maybe param" "maybe type" "temp"
    (629898 'move' call_tmp[629895](421994 call _cond_invalid tmp[421981]))
    if call_tmp[629895]
    {
      (421997 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560583] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560584] "maybe param" "temp"
    unknown call_tmp[629900] "expr temp" "maybe param" "maybe type" "temp"
    (629903 'move' call_tmp[629900](421982 call isTrue tmp[421981]))
    (560589 'move' tmp[560584](560587 call _cond_test call_tmp[629900]))
    if tmp[560584]
    {
      (560594 'move' tmp[560583](560591 '_paramFoldLogical' tmp[560584] 1))
    }
    {
      unknown tmp[560596] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629905] "expr temp" "maybe param" "maybe type" "temp"
      (629908 'move' call_tmp[629905](84345 call isClassType t[84304]))
      (560598 'move' tmp[560596](421986 call isTrue call_tmp[629905]))
      (560603 'move' tmp[560583](560600 '_paramFoldLogical' tmp[560584] tmp[560596]))
    }
    (421971 'move' tmp[421960] tmp[560583])
    unknown call_tmp[629910] "expr temp" "maybe param" "maybe type" "temp"
    (629913 'move' call_tmp[629910](421973 call _cond_invalid tmp[421960]))
    if call_tmp[629910]
    {
      (421976 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560610] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560611] "maybe param" "temp"
    unknown call_tmp[629915] "expr temp" "maybe param" "maybe type" "temp"
    (629918 'move' call_tmp[629915](421961 call isTrue tmp[421960]))
    (560616 'move' tmp[560611](560614 call _cond_test call_tmp[629915]))
    if tmp[560611]
    {
      (560621 'move' tmp[560610](560618 '_paramFoldLogical' tmp[560611] 1))
    }
    {
      unknown tmp[560623] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629920] "expr temp" "maybe param" "maybe type" "temp"
      (629923 'move' call_tmp[629920](84351 call isStringType t[84304]))
      (560625 'move' tmp[560623](421965 call isTrue call_tmp[629920]))
      (560630 'move' tmp[560610](560627 '_paramFoldLogical' tmp[560611] tmp[560623]))
    }
    (421950 'move' tmp[421939] tmp[560610])
    unknown call_tmp[629925] "expr temp" "maybe param" "maybe type" "temp"
    (629928 'move' call_tmp[629925](421952 call _cond_invalid tmp[421939]))
    if call_tmp[629925]
    {
      (421955 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560637] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560638] "maybe param" "temp"
    unknown call_tmp[629930] "expr temp" "maybe param" "maybe type" "temp"
    (629933 'move' call_tmp[629930](421940 call isTrue tmp[421939]))
    (560643 'move' tmp[560638](560641 call _cond_test call_tmp[629930]))
    if tmp[560638]
    {
      (560648 'move' tmp[560637](560645 '_paramFoldLogical' tmp[560638] 1))
    }
    {
      unknown tmp[560650] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629935] "expr temp" "maybe param" "maybe type" "temp"
      (629938 'move' call_tmp[629935](84356 call == t[84304] chpl_taskID_t[163]))
      (560652 'move' tmp[560650](421944 call isTrue call_tmp[629935]))
      (560657 'move' tmp[560637](560654 '_paramFoldLogical' tmp[560638] tmp[560650]))
    }
    (512582 'move' ret[512577](512581 'deref' tmp[560637]))
    (512579 return ret[512577])
  }
  function ensureFEType[84369](arg t[84367]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[629940] "expr temp" "maybe param" "maybe type" "temp"
    (629943 'move' call_tmp[629940](84374 call isSupported t[84367]))
    unknown call_tmp[629945] "expr temp" "maybe param" "maybe type" "temp"
    (629948 'move' call_tmp[629945](84376 call == call_tmp[629940] 0))
    unknown call_tmp[629950] "expr temp" "maybe param" "maybe type" "temp"
    (629953 'move' call_tmp[629950](84420 call _cond_test call_tmp[629945]))
    if call_tmp[629950]
    {
      unknown call_tmp[629955] "expr temp" "maybe param" "maybe type" "temp"
      (629958 'move' call_tmp[629955](84399 call _cast string[26] t[84367]))
      (84418 call compilerError "sync/single types cannot contain type '" call_tmp[629955] "'")
    }
    unknown call_tmp[629960] "expr temp" "maybe param" "maybe type" "temp"
    (629963 'move' call_tmp[629960](84429 call isNonNilableClass t[84367]))
    unknown call_tmp[629965] "expr temp" "maybe param" "maybe type" "temp"
    (629968 'move' call_tmp[629965](84451 call _cond_test call_tmp[629960]))
    if call_tmp[629965]
    {
      (84449 call compilerError "sync/single types cannot contain non-nilable classes")
    }
    unknown call_tmp[629970] "expr temp" "maybe param" "maybe type" "temp"
    (629973 'move' call_tmp[629970](84459 call isGenericType t[84367]))
    unknown call_tmp[629975] "expr temp" "maybe param" "maybe type" "temp"
    (629978 'move' call_tmp[629975](84481 call _cond_test call_tmp[629970]))
    if call_tmp[629975]
    {
      (84479 call compilerError "sync/single types cannot contain generic types")
    }
    (512584 return _void[55])
  }
  unknown useNativeSyncVar[84489] "config" "no doc" "param"
  function getSyncClassType[84497](arg valType[84495]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512588] "RVV" "temp" "type variable"
    unknown tmp[422107] "maybe param" "temp"
    (422118 'move' tmp[422107] useNativeSyncVar[84489])
    unknown call_tmp[629980] "expr temp" "maybe param" "maybe type" "temp"
    (629983 'move' call_tmp[629980](422120 call _cond_invalid tmp[422107]))
    if call_tmp[629980]
    {
      (422123 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560664] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560665] "maybe param" "temp"
    unknown call_tmp[629985] "expr temp" "maybe param" "maybe type" "temp"
    (629988 'move' call_tmp[629985](422108 call isTrue tmp[422107]))
    (560670 'move' tmp[560665](560668 call _cond_test call_tmp[629985]))
    if tmp[560665]
    {
      unknown tmp[560672] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629990] "expr temp" "maybe param" "maybe type" "temp"
      (629993 'move' call_tmp[629990](84503 call supportsNativeSyncVar valType[84495]))
      (560674 'move' tmp[560672](422111 call isTrue call_tmp[629990]))
      (560679 'move' tmp[560664](560676 '_paramFoldLogical' tmp[560665] tmp[560672]))
    }
    {
      (560684 'move' tmp[560664](560681 '_paramFoldLogical' tmp[560665] 0))
    }
    unknown call_tmp[629995] "expr temp" "maybe param" "maybe type" "temp"
    (629998 'move' call_tmp[629995](84522 call _cond_test tmp[560664]))
    if call_tmp[629995]
    {
      unknown call_tmp[630000] "expr temp" "maybe param" "maybe type" "temp"
      (630003 'move' call_tmp[630000](84509 call unmanaged _qthreads_synccls[415319](?) valType[84495]))
      (512593 'move' ret[512588](512592 'deref' call_tmp[630000]))
      gotoReturn _end_getSyncClassType[512586] _end_getSyncClassType[512586]
    }
    {
      unknown call_tmp[630005] "expr temp" "maybe param" "maybe type" "temp"
      (630008 'move' call_tmp[630005](84517 call unmanaged _synccls[415322](?) valType[84495]))
      (512598 'move' ret[512588](512597 'deref' call_tmp[630005]))
      gotoReturn _end_getSyncClassType[512586] _end_getSyncClassType[512586]
    }
    label _end_getSyncClassType[512586]
    (512590 return ret[512588])
  }
  function chpl__readXX[84533](arg x[84531]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[512604] "RVV" "temp"
    (512609 'move' ret[512604](512608 'deref' x[84531]))
    (512606 return ret[512604])
  }
  function _syncvar[84944](?).init[84563](arg _mt[84948]:_MT[238], ref arg this[84946]:_syncvar[84944](?), arg valType[84561]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (84568 call ensureFEType valType[84561])
    (476740 'end of statement')
    unknown tmp[459641] "temp" "type variable"
    (459643 'move' tmp[459641] valType[84561])
    (459645 'init field' this[84946] c"valType" tmp[459641])
    (476741 'end of statement')
    unknown call_tmp[630010] "expr temp" "maybe param" "maybe type" "temp"
    (630013 'move' call_tmp[630010](84591 call getSyncClassType valType[84561]))
    unknown call_tmp[630015] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630018 'move' call_tmp[630015](747717 'new' call_tmp[630010]))
    unknown call_tmp[630020] "expr temp" "maybe param" "maybe type" "temp"
    (630023 'move' call_tmp[630020](459660 '.v' this[84946] c"valType"))
    unknown call_tmp[630025] "maybe param" "maybe type" "temp"
    (630028 'move' call_tmp[630025](459652 call getSyncClassType call_tmp[630020]))
    unknown tmp[459649] "temp"
    (459654 'init var' tmp[459649] call_tmp[630015] call_tmp[630025])
    (459656 'init field' this[84946] c"wrapped" tmp[459649])
    (476742 'end of statement')
    unknown tmp[459665] "temp"
    (459668 'init var' tmp[459665] 1 bool[10])
    (459670 'init field' this[84946] c"isOwned" tmp[459665])
    (476743 'end of statement')
    (512611 return _void[55])
  }
  function _syncvar[84944](?).init[84605](arg _mt[84952]:_MT[238], ref arg this[84950]:_syncvar[84944](?), const arg other[84602]:_syncvar[84944](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown tmp[459674] "temp" "type variable"
    (459676 'move' tmp[459674](84612 call valType _mt[243] other[84602]))
    (459678 'init field' this[84950] c"valType" tmp[459674])
    (476744 'end of statement')
    unknown call_tmp[630034] "maybe param" "maybe type" "temp"
    (630037 'move' call_tmp[630034](84624 call wrapped _mt[243] other[84602]))
    unknown call_tmp[630039] "expr temp" "maybe param" "maybe type" "temp"
    (630042 'move' call_tmp[630039](459693 '.v' this[84950] c"valType"))
    unknown call_tmp[630044] "maybe param" "maybe type" "temp"
    (630047 'move' call_tmp[630044](459685 call getSyncClassType call_tmp[630039]))
    unknown tmp[459682] "temp"
    (459687 'init var' tmp[459682] call_tmp[630034] call_tmp[630044])
    (459689 'init field' this[84950] c"wrapped" tmp[459682])
    (476745 'end of statement')
    unknown tmp[459696] "temp"
    (459699 'init var' tmp[459696] 0 bool[10])
    (459701 'init field' this[84950] c"isOwned" tmp[459696])
    (476746 'end of statement')
    (512613 return _void[55])
  }
  function _syncvar[84944](?).init=[84648](arg _mt[84956]:_MT[238], ref arg this[84954]:_syncvar[84944](?), const arg other[84645]:_syncvar[84944](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630049] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630052 'move' call_tmp[630049](84657 'typeof' this[84954]))
    unknown call_tmp[630056] "expr temp" "maybe param" "maybe type" "temp"
    (630059 'move' call_tmp[630056](84658 call valType _mt[243] call_tmp[630049]))
    unknown call_tmp[630063] "expr temp" "maybe param" "maybe type" "temp"
    (630066 'move' call_tmp[630063](84652 call valType _mt[243] other[84645]))
    unknown call_tmp[630068] "expr temp" "maybe param" "maybe type" "temp"
    (630071 'move' call_tmp[630068](354135 'is_coercible' call_tmp[630056] call_tmp[630063]))
    unknown call_tmp[630073] "expr temp" "maybe param" "maybe type" "temp"
    (630076 'move' call_tmp[630073](84663 call == call_tmp[630068] 0))
    unknown call_tmp[630078] "expr temp" "maybe param" "maybe type" "temp"
    (630081 'move' call_tmp[630078](84793 call _cond_test call_tmp[630073]))
    if call_tmp[630078]
    {
      unknown call_tmp[630083] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630086 'move' call_tmp[630083](84667 'typeof' this[84954]))
      unknown call_tmp[630088] "expr temp" "maybe param" "maybe type" "temp"
      (630091 'move' call_tmp[630088](84669 call _cast string[26] call_tmp[630083]))
      unknown call_tmp[630093] "expr temp" "maybe param" "maybe type" "temp"
      (630096 'move' call_tmp[630093](84671 call + "'" call_tmp[630088]))
      unknown call_tmp[630098] "expr temp" "maybe param" "maybe type" "temp"
      (630101 'move' call_tmp[630098](84690 call + call_tmp[630093] "' from '"))
      unknown call_tmp[630103] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630106 'move' call_tmp[630103](84693 'typeof' other[84645]))
      unknown call_tmp[630108] "expr temp" "maybe param" "maybe type" "temp"
      (630111 'move' call_tmp[630108](84695 call _cast string[26] call_tmp[630103]))
      unknown call_tmp[630113] "expr temp" "maybe param" "maybe type" "temp"
      (630116 'move' call_tmp[630113](84697 call + call_tmp[630098] call_tmp[630108]))
      unknown call_tmp[630118] "maybe param" "maybe type" "temp"
      (630121 'move' call_tmp[630118](84700 call + call_tmp[630113] "'"))
      unknown theseTypes[84702] "dead at end of block" "param"
      (541416 'init var' theseTypes[84702] call_tmp[630118])
      (84705 'end of statement')
      unknown call_tmp[630125] "expr temp" "maybe param" "maybe type" "temp"
      (630128 'move' call_tmp[630125](84725 call valType _mt[243] other[84645]))
      unknown call_tmp[630130] "expr temp" "maybe param" "maybe type" "temp"
      (630133 'move' call_tmp[630130](84729 call _cast string[26] call_tmp[630125]))
      unknown call_tmp[630135] "expr temp" "maybe param" "maybe type" "temp"
      (630138 'move' call_tmp[630135](84731 call + "because '" call_tmp[630130]))
      unknown call_tmp[630140] "expr temp" "maybe param" "maybe type" "temp"
      (630143 'move' call_tmp[630140](84750 call + call_tmp[630135] "' is not coercible to '"))
      unknown call_tmp[630145] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630148 'move' call_tmp[630145](84753 'typeof' this[84954]))
      unknown call_tmp[630152] "expr temp" "maybe param" "maybe type" "temp"
      (630155 'move' call_tmp[630152](84754 call valType _mt[243] call_tmp[630145]))
      unknown call_tmp[630157] "expr temp" "maybe param" "maybe type" "temp"
      (630160 'move' call_tmp[630157](84758 call _cast string[26] call_tmp[630152]))
      unknown call_tmp[630162] "expr temp" "maybe param" "maybe type" "temp"
      (630165 'move' call_tmp[630162](84760 call + call_tmp[630140] call_tmp[630157]))
      unknown call_tmp[630167] "maybe param" "maybe type" "temp"
      (630170 'move' call_tmp[630167](84763 call + call_tmp[630162] "'"))
      unknown because[84765] "dead at end of block" "param"
      (541418 'init var' because[84765] call_tmp[630167])
      (84768 'end of statement')
      (84791 call compilerError "cannot initialize " theseTypes[84702] " " because[84765])
    }
    unknown call_tmp[630174] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630177 'move' call_tmp[630174](84803 'typeof' this[84954]))
    unknown call_tmp[630181] "expr temp" "maybe param" "maybe type" "temp"
    (630184 'move' call_tmp[630181](84804 call valType _mt[243] call_tmp[630174]))
    (84808 call(84799 call (partial) init _mt[243] this[84954]) call_tmp[630181])
    (476748 'end of statement')
    unknown call_tmp[630190] "expr temp" "maybe param" "maybe type" "temp"
    (630193 'move' call_tmp[630190](84821 call(84817 call (partial) readFE _mt[243] other[84645])))
    (84823 call(84813 call (partial) writeEF _mt[243] this[84954]) call_tmp[630190])
    (512615 return _void[55])
  }
  function _syncvar[84944](?).init=[84836](arg _mt[84960]:_MT[238], ref arg this[84958]:_syncvar[84944](?), const arg other[84833] :
  (84830 call valType _mt[243] this[84958])) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630199] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630202 'move' call_tmp[630199](84843 'typeof' other[84833]))
    (84845 call(84839 call (partial) init _mt[243] this[84958]) call_tmp[630199])
    (476750 'end of statement')
    (84854 call(84849 call (partial) writeEF _mt[243] this[84958]) other[84833])
    (512617 return _void[55])
  }
  function _syncvar[84944](?).deinit[84860](arg _mt[84964]:_MT[238], arg this[84962]:_syncvar[84944](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630208] "expr temp" "maybe param" "maybe type" "temp"
    (630211 'move' call_tmp[630208](376822 call isOwned _mt[243] this[84962]))
    unknown call_tmp[630213] "expr temp" "maybe param" "maybe type" "temp"
    (630216 'move' call_tmp[630213](84864 call == call_tmp[630208] 1))
    unknown call_tmp[630218] "expr temp" "maybe param" "maybe type" "temp"
    (630221 'move' call_tmp[630218](84871 call _cond_test call_tmp[630213]))
    if call_tmp[630218]
    {
      unknown call_tmp[630225] "expr temp" "maybe param" "maybe type" "temp"
      (630228 'move' call_tmp[630225](376827 call wrapped _mt[243] this[84962]))
      (84868 call chpl__delete call_tmp[630225])
    }
    (512619 return _void[55])
  }
  function _syncvar[84944](?).readThis[84883](arg _mt[84968]:_MT[238], arg this[84966]:_syncvar[84944](?), arg x[84881]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84906 call compilerError "sync variables cannot currently be read - use writeEF/writeFF instead")
    (512621 return _void[55])
  }
  function _syncvar[84944](?).writeThis[84915](arg _mt[84972]:_MT[238], arg this[84970]:_syncvar[84944](?), arg x[84913]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84938 call compilerError "sync variables cannot currently be written - apply readFE/readFF() to those variables first")
    (512623 return _void[55])
  }
  function _syncvar[84944](?).valType[775591](arg _mt[775593]:_MT[238], arg this[775595]:_syncvar[84944](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775614] "RVV" "temp" "type variable"
    unknown call_tmp[775628] "expr temp" "maybe param" "maybe type" "temp"
    (775631 'move' call_tmp[775628](775600 'is bound' this[775595] c"valType"))
    if call_tmp[775628]
    {
      unknown call_tmp[775633] "expr temp" "maybe param" "maybe type" "temp"
      (775636 'move' call_tmp[775633](775599 '.v' this[775595] c"valType"))
      (775619 'move' ret[775614](775618 'deref' call_tmp[775633]))
      gotoReturn _end_valType[775612] _end_valType[775612]
    }
    {
      (775624 'move' ret[775614](775623 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[775612] _end_valType[775612]
    }
    label _end_valType[775612]
    (775616 return ret[775614])
  }
  function _syncvar[84944](?).valType[775638](arg _mt[775640]:_MT[238], arg this[775642]:_syncvar[84944](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775661] "RVV" "temp" "type variable"
    unknown call_tmp[775675] "expr temp" "maybe param" "maybe type" "temp"
    (775678 'move' call_tmp[775675](775647 'is bound' this[775642] c"valType"))
    if call_tmp[775675]
    {
      unknown call_tmp[775680] "expr temp" "maybe param" "maybe type" "temp"
      (775683 'move' call_tmp[775680](775646 '.v' this[775642] c"valType"))
      (775666 'move' ret[775661](775665 'deref' call_tmp[775680]))
      gotoReturn _end_valType[775659] _end_valType[775659]
    }
    {
      (775671 'move' ret[775661](775670 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[775659] _end_valType[775659]
    }
    label _end_valType[775659]
    (775663 return ret[775661])
  }
  function _syncvar[84944](?).wrapped[775685](arg _mt[775687]:_MT[238], ref arg this[775689]:_syncvar[84944](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775699] "RVV" "temp"
    unknown call_tmp[775706] "expr temp" "maybe param" "maybe type" "temp"
    (775709 'move' call_tmp[775706](775693 '.' this[775689] c"wrapped"))
    (775704 'move' ret[775699](775703 'addr of' call_tmp[775706]))
    (775701 return ret[775699])
  }
  function _syncvar[84944](?).isOwned[775711](arg _mt[775713]:_MT[238], ref arg this[775715]:_syncvar[84944](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775725] "RVV" "temp"
    unknown call_tmp[775732] "expr temp" "maybe param" "maybe type" "temp"
    (775735 'move' call_tmp[775732](775719 '.' this[775715] c"isOwned"))
    (775730 'move' ret[775725](775729 'addr of' call_tmp[775732]))
    (775727 return ret[775725])
  }
  function chpl_fields_are_comparable[775749](arg _arg1[775751]:_syncvar[84944](?), arg _arg2[775752]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[775781]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[775788] "expr temp" "maybe param" "maybe type" "temp"
    (775791 'move' call_tmp[775788](775755 call wrapped _mt[243] _arg1[775751]))
    unknown call_tmp[775793] "expr temp" "maybe param" "maybe type" "temp"
    (775796 'move' call_tmp[775793](775759 call wrapped _mt[243] _arg2[775752]))
    unknown call_tmp[775798] "expr temp" "maybe param" "maybe type" "temp"
    (775801 'move' call_tmp[775798](775763 'call resolves' c"==" call_tmp[775788] call_tmp[775793]))
    unknown call_tmp[775803] "expr temp" "maybe param" "maybe type" "temp"
    (775806 'move' call_tmp[775803](775765 call isOwned _mt[243] _arg1[775751]))
    unknown call_tmp[775808] "expr temp" "maybe param" "maybe type" "temp"
    (775811 'move' call_tmp[775808](775769 call isOwned _mt[243] _arg2[775752]))
    unknown call_tmp[775813] "expr temp" "maybe param" "maybe type" "temp"
    (775816 'move' call_tmp[775813](775773 'call resolves' c"==" call_tmp[775803] call_tmp[775808]))
    unknown call_tmp[775818] "expr temp" "maybe param" "maybe type" "temp"
    (775821 'move' call_tmp[775818](775775 '&' call_tmp[775798] call_tmp[775813]))
    (775786 'move' ret[775781](775785 'deref' call_tmp[775818]))
    (775783 return ret[775781])
  }
  function ==[775737](arg _arg1[775739]:_syncvar[84944](?), arg _arg2[775740]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[775865]:bool[10] "RVV" "temp"
    unknown call_tmp[775882] "expr temp" "maybe param" "maybe type" "temp"
    (775885 'move' call_tmp[775882](775829 call wrapped _mt[243] _arg1[775739]))
    unknown call_tmp[775887] "expr temp" "maybe param" "maybe type" "temp"
    (775890 'move' call_tmp[775887](775833 call wrapped _mt[243] _arg2[775740]))
    unknown call_tmp[775892] "expr temp" "maybe param" "maybe type" "temp"
    (775895 'move' call_tmp[775892](775837 call != call_tmp[775882] call_tmp[775887]))
    if call_tmp[775892]
    {
      (775870 'move' ret[775865](775869 'deref' 0))
      gotoReturn _end_==[775863] _end_==[775863]
    }
    unknown call_tmp[775897] "expr temp" "maybe param" "maybe type" "temp"
    (775900 'move' call_tmp[775897](775843 call isOwned _mt[243] _arg1[775739]))
    unknown call_tmp[775902] "expr temp" "maybe param" "maybe type" "temp"
    (775905 'move' call_tmp[775902](775847 call isOwned _mt[243] _arg2[775740]))
    unknown call_tmp[775907] "expr temp" "maybe param" "maybe type" "temp"
    (775910 'move' call_tmp[775907](775851 call != call_tmp[775897] call_tmp[775902]))
    if call_tmp[775907]
    {
      (775875 'move' ret[775865](775874 'deref' 0))
      gotoReturn _end_==[775863] _end_==[775863]
    }
    (775880 'move' ret[775865](775879 'deref' 1))
    label _end_==[775863]
    (775867 return ret[775865])
  }
  where {
    unknown call_tmp[775912] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (775915 'move' call_tmp[775912](775743 'typeof' _arg1[775739]))
    unknown call_tmp[775917] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (775920 'move' call_tmp[775917](775745 'typeof' _arg2[775740]))
    unknown call_tmp[775922] "expr temp" "maybe param" "maybe type" "temp"
    (775925 'move' call_tmp[775922](775747 call == call_tmp[775912] call_tmp[775917]))
    unknown call_tmp[775927] "expr temp" "maybe param" "maybe type" "temp"
    (775930 'move' call_tmp[775927](775823 call chpl_fields_are_comparable[775749] _arg1[775739] _arg2[775740]))
    (775827 '&' call_tmp[775922] call_tmp[775927])
  }
  function chpl_fields_are_comparable[775944](arg _arg1[775946]:_syncvar[84944](?), arg _arg2[775947]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[775976]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[775983] "expr temp" "maybe param" "maybe type" "temp"
    (775986 'move' call_tmp[775983](775950 call wrapped _mt[243] _arg1[775946]))
    unknown call_tmp[775988] "expr temp" "maybe param" "maybe type" "temp"
    (775991 'move' call_tmp[775988](775954 call wrapped _mt[243] _arg2[775947]))
    unknown call_tmp[775993] "expr temp" "maybe param" "maybe type" "temp"
    (775996 'move' call_tmp[775993](775958 'call resolves' c"!=" call_tmp[775983] call_tmp[775988]))
    unknown call_tmp[775998] "expr temp" "maybe param" "maybe type" "temp"
    (776001 'move' call_tmp[775998](775960 call isOwned _mt[243] _arg1[775946]))
    unknown call_tmp[776003] "expr temp" "maybe param" "maybe type" "temp"
    (776006 'move' call_tmp[776003](775964 call isOwned _mt[243] _arg2[775947]))
    unknown call_tmp[776008] "expr temp" "maybe param" "maybe type" "temp"
    (776011 'move' call_tmp[776008](775968 'call resolves' c"!=" call_tmp[775998] call_tmp[776003]))
    unknown call_tmp[776013] "expr temp" "maybe param" "maybe type" "temp"
    (776016 'move' call_tmp[776013](775970 '&' call_tmp[775993] call_tmp[776008]))
    (775981 'move' ret[775976](775980 'deref' call_tmp[776013]))
    (775978 return ret[775976])
  }
  function !=[775932](arg _arg1[775934]:_syncvar[84944](?), arg _arg2[775935]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776060]:bool[10] "RVV" "temp"
    unknown call_tmp[776077] "expr temp" "maybe param" "maybe type" "temp"
    (776080 'move' call_tmp[776077](776024 call wrapped _mt[243] _arg1[775934]))
    unknown call_tmp[776082] "expr temp" "maybe param" "maybe type" "temp"
    (776085 'move' call_tmp[776082](776028 call wrapped _mt[243] _arg2[775935]))
    unknown call_tmp[776087] "expr temp" "maybe param" "maybe type" "temp"
    (776090 'move' call_tmp[776087](776032 call != call_tmp[776077] call_tmp[776082]))
    if call_tmp[776087]
    {
      (776065 'move' ret[776060](776064 'deref' 1))
      gotoReturn _end_!=[776058] _end_!=[776058]
    }
    unknown call_tmp[776092] "expr temp" "maybe param" "maybe type" "temp"
    (776095 'move' call_tmp[776092](776038 call isOwned _mt[243] _arg1[775934]))
    unknown call_tmp[776097] "expr temp" "maybe param" "maybe type" "temp"
    (776100 'move' call_tmp[776097](776042 call isOwned _mt[243] _arg2[775935]))
    unknown call_tmp[776102] "expr temp" "maybe param" "maybe type" "temp"
    (776105 'move' call_tmp[776102](776046 call != call_tmp[776092] call_tmp[776097]))
    if call_tmp[776102]
    {
      (776070 'move' ret[776060](776069 'deref' 1))
      gotoReturn _end_!=[776058] _end_!=[776058]
    }
    (776075 'move' ret[776060](776074 'deref' 0))
    label _end_!=[776058]
    (776062 return ret[776060])
  }
  where {
    unknown call_tmp[776107] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776110 'move' call_tmp[776107](775938 'typeof' _arg1[775934]))
    unknown call_tmp[776112] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776115 'move' call_tmp[776112](775940 'typeof' _arg2[775935]))
    unknown call_tmp[776117] "expr temp" "maybe param" "maybe type" "temp"
    (776120 'move' call_tmp[776117](775942 call == call_tmp[776107] call_tmp[776112]))
    unknown call_tmp[776122] "expr temp" "maybe param" "maybe type" "temp"
    (776125 'move' call_tmp[776122](776018 call chpl_fields_are_comparable[775944] _arg1[775934] _arg2[775935]))
    (776022 '&' call_tmp[776117] call_tmp[776122])
  }
  function chpl_fields_are_comparable[776139](arg _arg1[776141]:_syncvar[84944](?), arg _arg2[776142]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776171]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776178] "expr temp" "maybe param" "maybe type" "temp"
    (776181 'move' call_tmp[776178](776145 call wrapped _mt[243] _arg1[776141]))
    unknown call_tmp[776183] "expr temp" "maybe param" "maybe type" "temp"
    (776186 'move' call_tmp[776183](776149 call wrapped _mt[243] _arg2[776142]))
    unknown call_tmp[776188] "expr temp" "maybe param" "maybe type" "temp"
    (776191 'move' call_tmp[776188](776153 'call resolves' c"<" call_tmp[776178] call_tmp[776183]))
    unknown call_tmp[776193] "expr temp" "maybe param" "maybe type" "temp"
    (776196 'move' call_tmp[776193](776155 call isOwned _mt[243] _arg1[776141]))
    unknown call_tmp[776198] "expr temp" "maybe param" "maybe type" "temp"
    (776201 'move' call_tmp[776198](776159 call isOwned _mt[243] _arg2[776142]))
    unknown call_tmp[776203] "expr temp" "maybe param" "maybe type" "temp"
    (776206 'move' call_tmp[776203](776163 'call resolves' c"<" call_tmp[776193] call_tmp[776198]))
    unknown call_tmp[776208] "expr temp" "maybe param" "maybe type" "temp"
    (776211 'move' call_tmp[776208](776165 '&' call_tmp[776188] call_tmp[776203]))
    (776176 'move' ret[776171](776175 'deref' call_tmp[776208]))
    (776173 return ret[776171])
  }
  function <[776127](arg _arg1[776129]:_syncvar[84944](?), arg _arg2[776130]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776285]:bool[10] "RVV" "temp"
    unknown call_tmp[776312] "expr temp" "maybe param" "maybe type" "temp"
    (776315 'move' call_tmp[776312](776219 call wrapped _mt[243] _arg1[776129]))
    unknown call_tmp[776317] "expr temp" "maybe param" "maybe type" "temp"
    (776320 'move' call_tmp[776317](776223 call wrapped _mt[243] _arg2[776130]))
    unknown call_tmp[776322] "expr temp" "maybe param" "maybe type" "temp"
    (776325 'move' call_tmp[776322](776227 call < call_tmp[776312] call_tmp[776317]))
    if call_tmp[776322]
    {
      (776290 'move' ret[776285](776289 'deref' 1))
      gotoReturn _end_<[776283] _end_<[776283]
    }
    unknown call_tmp[776327] "expr temp" "maybe param" "maybe type" "temp"
    (776330 'move' call_tmp[776327](776233 call wrapped _mt[243] _arg1[776129]))
    unknown call_tmp[776332] "expr temp" "maybe param" "maybe type" "temp"
    (776335 'move' call_tmp[776332](776237 call wrapped _mt[243] _arg2[776130]))
    unknown call_tmp[776337] "expr temp" "maybe param" "maybe type" "temp"
    (776340 'move' call_tmp[776337](776241 call > call_tmp[776327] call_tmp[776332]))
    if call_tmp[776337]
    {
      (776295 'move' ret[776285](776294 'deref' 0))
      gotoReturn _end_<[776283] _end_<[776283]
    }
    unknown call_tmp[776342] "expr temp" "maybe param" "maybe type" "temp"
    (776345 'move' call_tmp[776342](776247 call isOwned _mt[243] _arg1[776129]))
    unknown call_tmp[776347] "expr temp" "maybe param" "maybe type" "temp"
    (776350 'move' call_tmp[776347](776251 call isOwned _mt[243] _arg2[776130]))
    unknown call_tmp[776352] "expr temp" "maybe param" "maybe type" "temp"
    (776355 'move' call_tmp[776352](776255 call < call_tmp[776342] call_tmp[776347]))
    if call_tmp[776352]
    {
      (776300 'move' ret[776285](776299 'deref' 1))
      gotoReturn _end_<[776283] _end_<[776283]
    }
    unknown call_tmp[776357] "expr temp" "maybe param" "maybe type" "temp"
    (776360 'move' call_tmp[776357](776261 call isOwned _mt[243] _arg1[776129]))
    unknown call_tmp[776362] "expr temp" "maybe param" "maybe type" "temp"
    (776365 'move' call_tmp[776362](776265 call isOwned _mt[243] _arg2[776130]))
    unknown call_tmp[776367] "expr temp" "maybe param" "maybe type" "temp"
    (776370 'move' call_tmp[776367](776269 call > call_tmp[776357] call_tmp[776362]))
    if call_tmp[776367]
    {
      (776305 'move' ret[776285](776304 'deref' 0))
      gotoReturn _end_<[776283] _end_<[776283]
    }
    (776310 'move' ret[776285](776309 'deref' 0))
    label _end_<[776283]
    (776287 return ret[776285])
  }
  where {
    unknown call_tmp[776372] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776375 'move' call_tmp[776372](776133 'typeof' _arg1[776129]))
    unknown call_tmp[776377] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776380 'move' call_tmp[776377](776135 'typeof' _arg2[776130]))
    unknown call_tmp[776382] "expr temp" "maybe param" "maybe type" "temp"
    (776385 'move' call_tmp[776382](776137 call == call_tmp[776372] call_tmp[776377]))
    unknown call_tmp[776387] "expr temp" "maybe param" "maybe type" "temp"
    (776390 'move' call_tmp[776387](776213 call chpl_fields_are_comparable[776139] _arg1[776129] _arg2[776130]))
    (776217 '&' call_tmp[776382] call_tmp[776387])
  }
  function chpl_fields_are_comparable[776404](arg _arg1[776406]:_syncvar[84944](?), arg _arg2[776407]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776436]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776443] "expr temp" "maybe param" "maybe type" "temp"
    (776446 'move' call_tmp[776443](776410 call wrapped _mt[243] _arg1[776406]))
    unknown call_tmp[776448] "expr temp" "maybe param" "maybe type" "temp"
    (776451 'move' call_tmp[776448](776414 call wrapped _mt[243] _arg2[776407]))
    unknown call_tmp[776453] "expr temp" "maybe param" "maybe type" "temp"
    (776456 'move' call_tmp[776453](776418 'call resolves' c"<=" call_tmp[776443] call_tmp[776448]))
    unknown call_tmp[776458] "expr temp" "maybe param" "maybe type" "temp"
    (776461 'move' call_tmp[776458](776420 call isOwned _mt[243] _arg1[776406]))
    unknown call_tmp[776463] "expr temp" "maybe param" "maybe type" "temp"
    (776466 'move' call_tmp[776463](776424 call isOwned _mt[243] _arg2[776407]))
    unknown call_tmp[776468] "expr temp" "maybe param" "maybe type" "temp"
    (776471 'move' call_tmp[776468](776428 'call resolves' c"<=" call_tmp[776458] call_tmp[776463]))
    unknown call_tmp[776473] "expr temp" "maybe param" "maybe type" "temp"
    (776476 'move' call_tmp[776473](776430 '&' call_tmp[776453] call_tmp[776468]))
    (776441 'move' ret[776436](776440 'deref' call_tmp[776473]))
    (776438 return ret[776436])
  }
  function <=[776392](arg _arg1[776394]:_syncvar[84944](?), arg _arg2[776395]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776550]:bool[10] "RVV" "temp"
    unknown call_tmp[776577] "expr temp" "maybe param" "maybe type" "temp"
    (776580 'move' call_tmp[776577](776484 call wrapped _mt[243] _arg1[776394]))
    unknown call_tmp[776582] "expr temp" "maybe param" "maybe type" "temp"
    (776585 'move' call_tmp[776582](776488 call wrapped _mt[243] _arg2[776395]))
    unknown call_tmp[776587] "expr temp" "maybe param" "maybe type" "temp"
    (776590 'move' call_tmp[776587](776492 call < call_tmp[776577] call_tmp[776582]))
    if call_tmp[776587]
    {
      (776555 'move' ret[776550](776554 'deref' 1))
      gotoReturn _end_<=[776548] _end_<=[776548]
    }
    unknown call_tmp[776592] "expr temp" "maybe param" "maybe type" "temp"
    (776595 'move' call_tmp[776592](776498 call wrapped _mt[243] _arg1[776394]))
    unknown call_tmp[776597] "expr temp" "maybe param" "maybe type" "temp"
    (776600 'move' call_tmp[776597](776502 call wrapped _mt[243] _arg2[776395]))
    unknown call_tmp[776602] "expr temp" "maybe param" "maybe type" "temp"
    (776605 'move' call_tmp[776602](776506 call > call_tmp[776592] call_tmp[776597]))
    if call_tmp[776602]
    {
      (776560 'move' ret[776550](776559 'deref' 0))
      gotoReturn _end_<=[776548] _end_<=[776548]
    }
    unknown call_tmp[776607] "expr temp" "maybe param" "maybe type" "temp"
    (776610 'move' call_tmp[776607](776512 call isOwned _mt[243] _arg1[776394]))
    unknown call_tmp[776612] "expr temp" "maybe param" "maybe type" "temp"
    (776615 'move' call_tmp[776612](776516 call isOwned _mt[243] _arg2[776395]))
    unknown call_tmp[776617] "expr temp" "maybe param" "maybe type" "temp"
    (776620 'move' call_tmp[776617](776520 call < call_tmp[776607] call_tmp[776612]))
    if call_tmp[776617]
    {
      (776565 'move' ret[776550](776564 'deref' 1))
      gotoReturn _end_<=[776548] _end_<=[776548]
    }
    unknown call_tmp[776622] "expr temp" "maybe param" "maybe type" "temp"
    (776625 'move' call_tmp[776622](776526 call isOwned _mt[243] _arg1[776394]))
    unknown call_tmp[776627] "expr temp" "maybe param" "maybe type" "temp"
    (776630 'move' call_tmp[776627](776530 call isOwned _mt[243] _arg2[776395]))
    unknown call_tmp[776632] "expr temp" "maybe param" "maybe type" "temp"
    (776635 'move' call_tmp[776632](776534 call > call_tmp[776622] call_tmp[776627]))
    if call_tmp[776632]
    {
      (776570 'move' ret[776550](776569 'deref' 0))
      gotoReturn _end_<=[776548] _end_<=[776548]
    }
    (776575 'move' ret[776550](776574 'deref' 1))
    label _end_<=[776548]
    (776552 return ret[776550])
  }
  where {
    unknown call_tmp[776637] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776640 'move' call_tmp[776637](776398 'typeof' _arg1[776394]))
    unknown call_tmp[776642] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776645 'move' call_tmp[776642](776400 'typeof' _arg2[776395]))
    unknown call_tmp[776647] "expr temp" "maybe param" "maybe type" "temp"
    (776650 'move' call_tmp[776647](776402 call == call_tmp[776637] call_tmp[776642]))
    unknown call_tmp[776652] "expr temp" "maybe param" "maybe type" "temp"
    (776655 'move' call_tmp[776652](776478 call chpl_fields_are_comparable[776404] _arg1[776394] _arg2[776395]))
    (776482 '&' call_tmp[776647] call_tmp[776652])
  }
  function chpl_fields_are_comparable[776669](arg _arg1[776671]:_syncvar[84944](?), arg _arg2[776672]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776701]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776708] "expr temp" "maybe param" "maybe type" "temp"
    (776711 'move' call_tmp[776708](776675 call wrapped _mt[243] _arg1[776671]))
    unknown call_tmp[776713] "expr temp" "maybe param" "maybe type" "temp"
    (776716 'move' call_tmp[776713](776679 call wrapped _mt[243] _arg2[776672]))
    unknown call_tmp[776718] "expr temp" "maybe param" "maybe type" "temp"
    (776721 'move' call_tmp[776718](776683 'call resolves' c">" call_tmp[776708] call_tmp[776713]))
    unknown call_tmp[776723] "expr temp" "maybe param" "maybe type" "temp"
    (776726 'move' call_tmp[776723](776685 call isOwned _mt[243] _arg1[776671]))
    unknown call_tmp[776728] "expr temp" "maybe param" "maybe type" "temp"
    (776731 'move' call_tmp[776728](776689 call isOwned _mt[243] _arg2[776672]))
    unknown call_tmp[776733] "expr temp" "maybe param" "maybe type" "temp"
    (776736 'move' call_tmp[776733](776693 'call resolves' c">" call_tmp[776723] call_tmp[776728]))
    unknown call_tmp[776738] "expr temp" "maybe param" "maybe type" "temp"
    (776741 'move' call_tmp[776738](776695 '&' call_tmp[776718] call_tmp[776733]))
    (776706 'move' ret[776701](776705 'deref' call_tmp[776738]))
    (776703 return ret[776701])
  }
  function >[776657](arg _arg1[776659]:_syncvar[84944](?), arg _arg2[776660]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776815]:bool[10] "RVV" "temp"
    unknown call_tmp[776842] "expr temp" "maybe param" "maybe type" "temp"
    (776845 'move' call_tmp[776842](776749 call wrapped _mt[243] _arg1[776659]))
    unknown call_tmp[776847] "expr temp" "maybe param" "maybe type" "temp"
    (776850 'move' call_tmp[776847](776753 call wrapped _mt[243] _arg2[776660]))
    unknown call_tmp[776852] "expr temp" "maybe param" "maybe type" "temp"
    (776855 'move' call_tmp[776852](776757 call > call_tmp[776842] call_tmp[776847]))
    if call_tmp[776852]
    {
      (776820 'move' ret[776815](776819 'deref' 1))
      gotoReturn _end_>[776813] _end_>[776813]
    }
    unknown call_tmp[776857] "expr temp" "maybe param" "maybe type" "temp"
    (776860 'move' call_tmp[776857](776763 call wrapped _mt[243] _arg1[776659]))
    unknown call_tmp[776862] "expr temp" "maybe param" "maybe type" "temp"
    (776865 'move' call_tmp[776862](776767 call wrapped _mt[243] _arg2[776660]))
    unknown call_tmp[776867] "expr temp" "maybe param" "maybe type" "temp"
    (776870 'move' call_tmp[776867](776771 call < call_tmp[776857] call_tmp[776862]))
    if call_tmp[776867]
    {
      (776825 'move' ret[776815](776824 'deref' 0))
      gotoReturn _end_>[776813] _end_>[776813]
    }
    unknown call_tmp[776872] "expr temp" "maybe param" "maybe type" "temp"
    (776875 'move' call_tmp[776872](776777 call isOwned _mt[243] _arg1[776659]))
    unknown call_tmp[776877] "expr temp" "maybe param" "maybe type" "temp"
    (776880 'move' call_tmp[776877](776781 call isOwned _mt[243] _arg2[776660]))
    unknown call_tmp[776882] "expr temp" "maybe param" "maybe type" "temp"
    (776885 'move' call_tmp[776882](776785 call > call_tmp[776872] call_tmp[776877]))
    if call_tmp[776882]
    {
      (776830 'move' ret[776815](776829 'deref' 1))
      gotoReturn _end_>[776813] _end_>[776813]
    }
    unknown call_tmp[776887] "expr temp" "maybe param" "maybe type" "temp"
    (776890 'move' call_tmp[776887](776791 call isOwned _mt[243] _arg1[776659]))
    unknown call_tmp[776892] "expr temp" "maybe param" "maybe type" "temp"
    (776895 'move' call_tmp[776892](776795 call isOwned _mt[243] _arg2[776660]))
    unknown call_tmp[776897] "expr temp" "maybe param" "maybe type" "temp"
    (776900 'move' call_tmp[776897](776799 call < call_tmp[776887] call_tmp[776892]))
    if call_tmp[776897]
    {
      (776835 'move' ret[776815](776834 'deref' 0))
      gotoReturn _end_>[776813] _end_>[776813]
    }
    (776840 'move' ret[776815](776839 'deref' 0))
    label _end_>[776813]
    (776817 return ret[776815])
  }
  where {
    unknown call_tmp[776902] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776905 'move' call_tmp[776902](776663 'typeof' _arg1[776659]))
    unknown call_tmp[776907] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776910 'move' call_tmp[776907](776665 'typeof' _arg2[776660]))
    unknown call_tmp[776912] "expr temp" "maybe param" "maybe type" "temp"
    (776915 'move' call_tmp[776912](776667 call == call_tmp[776902] call_tmp[776907]))
    unknown call_tmp[776917] "expr temp" "maybe param" "maybe type" "temp"
    (776920 'move' call_tmp[776917](776743 call chpl_fields_are_comparable[776669] _arg1[776659] _arg2[776660]))
    (776747 '&' call_tmp[776912] call_tmp[776917])
  }
  function chpl_fields_are_comparable[776934](arg _arg1[776936]:_syncvar[84944](?), arg _arg2[776937]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776966]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776973] "expr temp" "maybe param" "maybe type" "temp"
    (776976 'move' call_tmp[776973](776940 call wrapped _mt[243] _arg1[776936]))
    unknown call_tmp[776978] "expr temp" "maybe param" "maybe type" "temp"
    (776981 'move' call_tmp[776978](776944 call wrapped _mt[243] _arg2[776937]))
    unknown call_tmp[776983] "expr temp" "maybe param" "maybe type" "temp"
    (776986 'move' call_tmp[776983](776948 'call resolves' c">=" call_tmp[776973] call_tmp[776978]))
    unknown call_tmp[776988] "expr temp" "maybe param" "maybe type" "temp"
    (776991 'move' call_tmp[776988](776950 call isOwned _mt[243] _arg1[776936]))
    unknown call_tmp[776993] "expr temp" "maybe param" "maybe type" "temp"
    (776996 'move' call_tmp[776993](776954 call isOwned _mt[243] _arg2[776937]))
    unknown call_tmp[776998] "expr temp" "maybe param" "maybe type" "temp"
    (777001 'move' call_tmp[776998](776958 'call resolves' c">=" call_tmp[776988] call_tmp[776993]))
    unknown call_tmp[777003] "expr temp" "maybe param" "maybe type" "temp"
    (777006 'move' call_tmp[777003](776960 '&' call_tmp[776983] call_tmp[776998]))
    (776971 'move' ret[776966](776970 'deref' call_tmp[777003]))
    (776968 return ret[776966])
  }
  function >=[776922](arg _arg1[776924]:_syncvar[84944](?), arg _arg2[776925]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[777080]:bool[10] "RVV" "temp"
    unknown call_tmp[777107] "expr temp" "maybe param" "maybe type" "temp"
    (777110 'move' call_tmp[777107](777014 call wrapped _mt[243] _arg1[776924]))
    unknown call_tmp[777112] "expr temp" "maybe param" "maybe type" "temp"
    (777115 'move' call_tmp[777112](777018 call wrapped _mt[243] _arg2[776925]))
    unknown call_tmp[777117] "expr temp" "maybe param" "maybe type" "temp"
    (777120 'move' call_tmp[777117](777022 call > call_tmp[777107] call_tmp[777112]))
    if call_tmp[777117]
    {
      (777085 'move' ret[777080](777084 'deref' 1))
      gotoReturn _end_>=[777078] _end_>=[777078]
    }
    unknown call_tmp[777122] "expr temp" "maybe param" "maybe type" "temp"
    (777125 'move' call_tmp[777122](777028 call wrapped _mt[243] _arg1[776924]))
    unknown call_tmp[777127] "expr temp" "maybe param" "maybe type" "temp"
    (777130 'move' call_tmp[777127](777032 call wrapped _mt[243] _arg2[776925]))
    unknown call_tmp[777132] "expr temp" "maybe param" "maybe type" "temp"
    (777135 'move' call_tmp[777132](777036 call < call_tmp[777122] call_tmp[777127]))
    if call_tmp[777132]
    {
      (777090 'move' ret[777080](777089 'deref' 0))
      gotoReturn _end_>=[777078] _end_>=[777078]
    }
    unknown call_tmp[777137] "expr temp" "maybe param" "maybe type" "temp"
    (777140 'move' call_tmp[777137](777042 call isOwned _mt[243] _arg1[776924]))
    unknown call_tmp[777142] "expr temp" "maybe param" "maybe type" "temp"
    (777145 'move' call_tmp[777142](777046 call isOwned _mt[243] _arg2[776925]))
    unknown call_tmp[777147] "expr temp" "maybe param" "maybe type" "temp"
    (777150 'move' call_tmp[777147](777050 call > call_tmp[777137] call_tmp[777142]))
    if call_tmp[777147]
    {
      (777095 'move' ret[777080](777094 'deref' 1))
      gotoReturn _end_>=[777078] _end_>=[777078]
    }
    unknown call_tmp[777152] "expr temp" "maybe param" "maybe type" "temp"
    (777155 'move' call_tmp[777152](777056 call isOwned _mt[243] _arg1[776924]))
    unknown call_tmp[777157] "expr temp" "maybe param" "maybe type" "temp"
    (777160 'move' call_tmp[777157](777060 call isOwned _mt[243] _arg2[776925]))
    unknown call_tmp[777162] "expr temp" "maybe param" "maybe type" "temp"
    (777165 'move' call_tmp[777162](777064 call < call_tmp[777152] call_tmp[777157]))
    if call_tmp[777162]
    {
      (777100 'move' ret[777080](777099 'deref' 0))
      gotoReturn _end_>=[777078] _end_>=[777078]
    }
    (777105 'move' ret[777080](777104 'deref' 1))
    label _end_>=[777078]
    (777082 return ret[777080])
  }
  where {
    unknown call_tmp[777167] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777170 'move' call_tmp[777167](776928 'typeof' _arg1[776924]))
    unknown call_tmp[777172] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777175 'move' call_tmp[777172](776930 'typeof' _arg2[776925]))
    unknown call_tmp[777177] "expr temp" "maybe param" "maybe type" "temp"
    (777180 'move' call_tmp[777177](776932 call == call_tmp[777167] call_tmp[777172]))
    unknown call_tmp[777182] "expr temp" "maybe param" "maybe type" "temp"
    (777185 'move' call_tmp[777182](777008 call chpl_fields_are_comparable[776934] _arg1[776924] _arg2[776925]))
    (777012 '&' call_tmp[777177] call_tmp[777182])
  }
  function =[777187](ref arg _arg1[777189]:_syncvar[84944](?), const?  ref arg _arg2[777190]:_syncvar[84944](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[777227] "expr temp" "maybe param" "maybe type" "temp"
    (777230 'move' call_tmp[777227](777200 call wrapped _mt[243] _arg1[777189]))
    unknown call_tmp[777234] "expr temp" "maybe param" "maybe type" "temp"
    (777237 'move' call_tmp[777234](777204 call wrapped _mt[243] _arg2[777190]))
    (777208 call = call_tmp[777227] call_tmp[777234])
    (777221 'end of statement')
    unknown call_tmp[777241] "expr temp" "maybe param" "maybe type" "temp"
    (777244 'move' call_tmp[777241](777210 call isOwned _mt[243] _arg1[777189]))
    unknown call_tmp[777248] "expr temp" "maybe param" "maybe type" "temp"
    (777251 'move' call_tmp[777248](777214 call isOwned _mt[243] _arg2[777190]))
    (777218 call = call_tmp[777241] call_tmp[777248])
    (777223 return _void[55])
  }
  where {
    unknown call_tmp[777253] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777256 'move' call_tmp[777253](777193 'typeof' _arg1[777189]))
    unknown call_tmp[777258] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777261 'move' call_tmp[777258](777195 'typeof' _arg2[777190]))
    (777197 call == call_tmp[777253] call_tmp[777258])
  }
  function chpl__defaultHash[777263](arg r[777265]:_syncvar[84944](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[777296] "RVV" "temp"
    unknown call_tmp[777303] "expr temp" "maybe param" "maybe type" "temp"
    (777306 'move' call_tmp[777303](777282 call isOwned _mt[243] r[777265]))
    unknown call_tmp[777308] "expr temp" "maybe param" "maybe type" "temp"
    (777311 'move' call_tmp[777308](777286 call chpl__defaultHash call_tmp[777303]))
    unknown call_tmp[777313] "expr temp" "maybe param" "maybe type" "temp"
    (777316 'move' call_tmp[777313](777273 call wrapped _mt[243] r[777265]))
    unknown call_tmp[777318] "expr temp" "maybe param" "maybe type" "temp"
    (777321 'move' call_tmp[777318](777277 call chpl__defaultHash call_tmp[777313]))
    unknown call_tmp[777323] "expr temp" "maybe param" "maybe type" "temp"
    (777326 'move' call_tmp[777323](777267 call valType _mt[243] r[777265]))
    unknown call_tmp[777328] "expr temp" "maybe param" "maybe type" "temp"
    (777331 'move' call_tmp[777328](777271 call chpl__defaultHash call_tmp[777323]))
    unknown call_tmp[777333] "expr temp" "maybe param" "maybe type" "temp"
    (777336 'move' call_tmp[777333](777279 call chpl__defaultHashCombine call_tmp[777318] call_tmp[777328] 2))
    unknown call_tmp[777338] "expr temp" "maybe param" "maybe type" "temp"
    (777341 'move' call_tmp[777338](777288 call chpl__defaultHashCombine call_tmp[777308] call_tmp[777333] 3))
    (777301 'move' ret[777296](777300 'deref' call_tmp[777338]))
    (777298 return ret[777296])
  }
  sync type _syncvar[84944](?) unknown valType[84542] "type variable" unknown wrapped[84549](84548 call getSyncClassType valType[84542]) val isOwned[84555]:bool[10] 1 bool[10]
  function isSyncType[84981](arg t[84978]:_syncvar[84944](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512627] "RVV" "param" "temp"
    (512632 'move' ret[512627](512631 'deref' 1))
    (512629 return ret[512627])
  }
  function isSyncType[84993](arg t[84991]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512636] "RVV" "param" "temp"
    (512641 'move' ret[512636](512640 'deref' 0))
    (512638 return ret[512636])
  }
  function _syncvar[84944](?).readFE[85004](arg _mt[85009]:_MT[238], arg this[85006]:_syncvar[84944](?) :
  _syncvar[84944](?)) : _unknown[51] "method"
  {
    unknown ret[512645] "RVV" "temp"
    unknown call_tmp[630232] "expr temp" "maybe param" "maybe type" "temp"
    (630235 'move' call_tmp[630232](358082 call wrapped _mt[243] this[85006]))
    unknown call_tmp[630239] "expr temp" "maybe param" "maybe type" "temp"
    (630242 'move' call_tmp[630239](85016 call(85012 call (partial) readFE _mt[243] call_tmp[630232])))
    (512650 'move' ret[512645](512649 'deref' call_tmp[630239]))
    (512647 return ret[512645])
  }
  function _syncvar[84944](?).readFF[85025](arg _mt[85030]:_MT[238], arg this[85027]:_syncvar[84944](?) :
  _syncvar[84944](?)) : _unknown[51] "method"
  {
    unknown ret[512654] "RVV" "temp"
    unknown call_tmp[630246] "expr temp" "maybe param" "maybe type" "temp"
    (630249 'move' call_tmp[630246](358087 call wrapped _mt[243] this[85027]))
    unknown call_tmp[630253] "expr temp" "maybe param" "maybe type" "temp"
    (630256 'move' call_tmp[630253](85037 call(85033 call (partial) readFF _mt[243] call_tmp[630246])))
    (512659 'move' ret[512654](512658 'deref' call_tmp[630253]))
    (512656 return ret[512654])
  }
  function _syncvar[84944](?).readXX[85046](arg _mt[85051]:_MT[238], arg this[85048]:_syncvar[84944](?) :
  _syncvar[84944](?)) : _unknown[51] "method"
  {
    unknown ret[512663] "RVV" "temp"
    (85055 call chpl_task_yield)
    (476759 'end of statement')
    unknown call_tmp[630260] "expr temp" "maybe param" "maybe type" "temp"
    (630263 'move' call_tmp[630260](358092 call wrapped _mt[243] this[85048]))
    unknown call_tmp[630267] "expr temp" "maybe param" "maybe type" "temp"
    (630270 'move' call_tmp[630267](85065 call(85061 call (partial) readXX _mt[243] call_tmp[630260])))
    (512668 'move' ret[512663](512667 'deref' call_tmp[630267]))
    (512665 return ret[512663])
  }
  function _syncvar[84944](?).writeEF[85077](arg _mt[85082]:_MT[238], arg this[85079]:_syncvar[84944](?) :
  _syncvar[84944](?), arg x[85074] :
  (376833 call valType _mt[243] this[85079])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630276] "expr temp" "maybe param" "maybe type" "temp"
    (630279 'move' call_tmp[630276](358097 call wrapped _mt[243] this[85079]))
    (85090 call(85085 call (partial) writeEF _mt[243] call_tmp[630276]) x[85074])
    (512670 return _void[55])
  }
  function _syncvar[84944](?).writeFF[85102](arg _mt[85107]:_MT[238], arg this[85104]:_syncvar[84944](?) :
  _syncvar[84944](?), arg x[85099] :
  (376839 call valType _mt[243] this[85104])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630287] "expr temp" "maybe param" "maybe type" "temp"
    (630290 'move' call_tmp[630287](358102 call wrapped _mt[243] this[85104]))
    (85117 call(85112 call (partial) writeFF _mt[243] call_tmp[630287]) x[85099])
    (512672 return _void[55])
  }
  function _syncvar[84944](?).writeXF[85129](arg _mt[85134]:_MT[238], arg this[85131]:_syncvar[84944](?) :
  _syncvar[84944](?), arg x[85126] :
  (376845 call valType _mt[243] this[85131])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630298] "expr temp" "maybe param" "maybe type" "temp"
    (630301 'move' call_tmp[630298](358107 call wrapped _mt[243] this[85131]))
    (85144 call(85139 call (partial) writeXF _mt[243] call_tmp[630298]) x[85126])
    (512674 return _void[55])
  }
  function _syncvar[84944](?).reset[85152](arg _mt[85157]:_MT[238], arg this[85154]:_syncvar[84944](?) :
  _syncvar[84944](?)) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630307] "expr temp" "maybe param" "maybe type" "temp"
    (630310 'move' call_tmp[630307](358112 call wrapped _mt[243] this[85154]))
    (85166 call(85162 call (partial) reset _mt[243] call_tmp[630307]))
    (512676 return _void[55])
  }
  function _syncvar[84944](?).isFull[85174](arg _mt[85179]:_MT[238], arg this[85176]:_syncvar[84944](?) :
  _syncvar[84944](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[512680] "RVV" "temp"
    unknown call_tmp[630316] "expr temp" "maybe param" "maybe type" "temp"
    (630319 'move' call_tmp[630316](358117 call wrapped _mt[243] this[85176]))
    unknown call_tmp[630323] "expr temp" "maybe param" "maybe type" "temp"
    (630326 'move' call_tmp[630323](85184 call isFull _mt[243] call_tmp[630316]))
    (512685 'move' ret[512680](512684 'deref' call_tmp[630323]))
    (512682 return ret[512680])
  }
  function =[85202](ref arg lhs[85199]:_syncvar[84944](?), arg rhs[85205] :
  (459711 'query' lhs[85199] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630330] "expr temp" "maybe param" "maybe type" "temp"
    (630333 'move' call_tmp[630330](85209 call wrapped _mt[243] lhs[85199]))
    (85217 call(85212 call (partial) writeEF _mt[243] call_tmp[630330]) rhs[85205])
    (512687 return _void[55])
  }
  function +=[85232](ref arg lhs[85229]:_syncvar[84944](?), arg rhs[85235] :
  (459721 'query' lhs[85229] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630339] "expr temp" "maybe param" "maybe type" "temp"
    (630342 'move' call_tmp[630339](85239 call wrapped _mt[243] lhs[85229]))
    unknown call_tmp[630348] "expr temp" "maybe param" "maybe type" "temp"
    (630351 'move' call_tmp[630348](85246 call wrapped _mt[243] lhs[85229]))
    unknown call_tmp[630355] "expr temp" "maybe param" "maybe type" "temp"
    (630358 'move' call_tmp[630355](85253 call(85249 call (partial) readFE _mt[243] call_tmp[630348])))
    unknown call_tmp[630360] "expr temp" "maybe param" "maybe type" "temp"
    (630363 'move' call_tmp[630360](85255 call + call_tmp[630355] rhs[85235]))
    (85258 call(85242 call (partial) writeEF _mt[243] call_tmp[630339]) call_tmp[630360])
    (512689 return _void[55])
  }
  function -=[85273](ref arg lhs[85270]:_syncvar[84944](?), arg rhs[85276] :
  (459731 'query' lhs[85270] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630367] "expr temp" "maybe param" "maybe type" "temp"
    (630370 'move' call_tmp[630367](85280 call wrapped _mt[243] lhs[85270]))
    unknown call_tmp[630376] "expr temp" "maybe param" "maybe type" "temp"
    (630379 'move' call_tmp[630376](85287 call wrapped _mt[243] lhs[85270]))
    unknown call_tmp[630383] "expr temp" "maybe param" "maybe type" "temp"
    (630386 'move' call_tmp[630383](85294 call(85290 call (partial) readFE _mt[243] call_tmp[630376])))
    unknown call_tmp[630388] "expr temp" "maybe param" "maybe type" "temp"
    (630391 'move' call_tmp[630388](85296 call - call_tmp[630383] rhs[85276]))
    (85299 call(85283 call (partial) writeEF _mt[243] call_tmp[630367]) call_tmp[630388])
    (512691 return _void[55])
  }
  function *=[85314](ref arg lhs[85311]:_syncvar[84944](?), arg rhs[85317] :
  (459741 'query' lhs[85311] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630395] "expr temp" "maybe param" "maybe type" "temp"
    (630398 'move' call_tmp[630395](85321 call wrapped _mt[243] lhs[85311]))
    unknown call_tmp[630404] "expr temp" "maybe param" "maybe type" "temp"
    (630407 'move' call_tmp[630404](85328 call wrapped _mt[243] lhs[85311]))
    unknown call_tmp[630411] "expr temp" "maybe param" "maybe type" "temp"
    (630414 'move' call_tmp[630411](85335 call(85331 call (partial) readFE _mt[243] call_tmp[630404])))
    unknown call_tmp[630416] "expr temp" "maybe param" "maybe type" "temp"
    (630419 'move' call_tmp[630416](85337 call * call_tmp[630411] rhs[85317]))
    (85340 call(85324 call (partial) writeEF _mt[243] call_tmp[630395]) call_tmp[630416])
    (512693 return _void[55])
  }
  function /=[85355](ref arg lhs[85352]:_syncvar[84944](?), arg rhs[85358] :
  (459751 'query' lhs[85352] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630423] "expr temp" "maybe param" "maybe type" "temp"
    (630426 'move' call_tmp[630423](85362 call wrapped _mt[243] lhs[85352]))
    unknown call_tmp[630432] "expr temp" "maybe param" "maybe type" "temp"
    (630435 'move' call_tmp[630432](85369 call wrapped _mt[243] lhs[85352]))
    unknown call_tmp[630439] "expr temp" "maybe param" "maybe type" "temp"
    (630442 'move' call_tmp[630439](85376 call(85372 call (partial) readFE _mt[243] call_tmp[630432])))
    unknown call_tmp[630444] "expr temp" "maybe param" "maybe type" "temp"
    (630447 'move' call_tmp[630444](85378 call / call_tmp[630439] rhs[85358]))
    (85381 call(85365 call (partial) writeEF _mt[243] call_tmp[630423]) call_tmp[630444])
    (512695 return _void[55])
  }
  function %=[85396](ref arg lhs[85393]:_syncvar[84944](?), arg rhs[85399] :
  (459761 'query' lhs[85393] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630451] "expr temp" "maybe param" "maybe type" "temp"
    (630454 'move' call_tmp[630451](85403 call wrapped _mt[243] lhs[85393]))
    unknown call_tmp[630460] "expr temp" "maybe param" "maybe type" "temp"
    (630463 'move' call_tmp[630460](85410 call wrapped _mt[243] lhs[85393]))
    unknown call_tmp[630467] "expr temp" "maybe param" "maybe type" "temp"
    (630470 'move' call_tmp[630467](85417 call(85413 call (partial) readFE _mt[243] call_tmp[630460])))
    unknown call_tmp[630472] "expr temp" "maybe param" "maybe type" "temp"
    (630475 'move' call_tmp[630472](85419 call % call_tmp[630467] rhs[85399]))
    (85422 call(85406 call (partial) writeEF _mt[243] call_tmp[630451]) call_tmp[630472])
    (512697 return _void[55])
  }
  function **=[85437](ref arg lhs[85434]:_syncvar[84944](?), arg rhs[85440] :
  (459771 'query' lhs[85434] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630479] "expr temp" "maybe param" "maybe type" "temp"
    (630482 'move' call_tmp[630479](85444 call wrapped _mt[243] lhs[85434]))
    unknown call_tmp[630488] "expr temp" "maybe param" "maybe type" "temp"
    (630491 'move' call_tmp[630488](85451 call wrapped _mt[243] lhs[85434]))
    unknown call_tmp[630495] "expr temp" "maybe param" "maybe type" "temp"
    (630498 'move' call_tmp[630495](85458 call(85454 call (partial) readFE _mt[243] call_tmp[630488])))
    unknown call_tmp[630500] "expr temp" "maybe param" "maybe type" "temp"
    (630503 'move' call_tmp[630500](85460 call ** call_tmp[630495] rhs[85440]))
    (85463 call(85447 call (partial) writeEF _mt[243] call_tmp[630479]) call_tmp[630500])
    (512699 return _void[55])
  }
  function &=[85478](ref arg lhs[85475]:_syncvar[84944](?), arg rhs[85481] :
  (459781 'query' lhs[85475] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630507] "expr temp" "maybe param" "maybe type" "temp"
    (630510 'move' call_tmp[630507](85485 call wrapped _mt[243] lhs[85475]))
    unknown call_tmp[630516] "expr temp" "maybe param" "maybe type" "temp"
    (630519 'move' call_tmp[630516](85492 call wrapped _mt[243] lhs[85475]))
    unknown call_tmp[630523] "expr temp" "maybe param" "maybe type" "temp"
    (630526 'move' call_tmp[630523](85499 call(85495 call (partial) readFE _mt[243] call_tmp[630516])))
    unknown call_tmp[630528] "expr temp" "maybe param" "maybe type" "temp"
    (630531 'move' call_tmp[630528](85501 call & call_tmp[630523] rhs[85481]))
    (85504 call(85488 call (partial) writeEF _mt[243] call_tmp[630507]) call_tmp[630528])
    (512701 return _void[55])
  }
  function |=[85519](ref arg lhs[85516]:_syncvar[84944](?), arg rhs[85522] :
  (459791 'query' lhs[85516] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630535] "expr temp" "maybe param" "maybe type" "temp"
    (630538 'move' call_tmp[630535](85526 call wrapped _mt[243] lhs[85516]))
    unknown call_tmp[630544] "expr temp" "maybe param" "maybe type" "temp"
    (630547 'move' call_tmp[630544](85533 call wrapped _mt[243] lhs[85516]))
    unknown call_tmp[630551] "expr temp" "maybe param" "maybe type" "temp"
    (630554 'move' call_tmp[630551](85540 call(85536 call (partial) readFE _mt[243] call_tmp[630544])))
    unknown call_tmp[630556] "expr temp" "maybe param" "maybe type" "temp"
    (630559 'move' call_tmp[630556](85542 call | call_tmp[630551] rhs[85522]))
    (85545 call(85529 call (partial) writeEF _mt[243] call_tmp[630535]) call_tmp[630556])
    (512703 return _void[55])
  }
  function ^=[85560](ref arg lhs[85557]:_syncvar[84944](?), arg rhs[85563] :
  (459801 'query' lhs[85557] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630563] "expr temp" "maybe param" "maybe type" "temp"
    (630566 'move' call_tmp[630563](85567 call wrapped _mt[243] lhs[85557]))
    unknown call_tmp[630572] "expr temp" "maybe param" "maybe type" "temp"
    (630575 'move' call_tmp[630572](85574 call wrapped _mt[243] lhs[85557]))
    unknown call_tmp[630579] "expr temp" "maybe param" "maybe type" "temp"
    (630582 'move' call_tmp[630579](85581 call(85577 call (partial) readFE _mt[243] call_tmp[630572])))
    unknown call_tmp[630584] "expr temp" "maybe param" "maybe type" "temp"
    (630587 'move' call_tmp[630584](85583 call ^ call_tmp[630579] rhs[85563]))
    (85586 call(85570 call (partial) writeEF _mt[243] call_tmp[630563]) call_tmp[630584])
    (512705 return _void[55])
  }
  function >>=[85601](ref arg lhs[85598]:_syncvar[84944](?), arg rhs[85604] :
  (459811 'query' lhs[85598] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630591] "expr temp" "maybe param" "maybe type" "temp"
    (630594 'move' call_tmp[630591](85608 call wrapped _mt[243] lhs[85598]))
    unknown call_tmp[630600] "expr temp" "maybe param" "maybe type" "temp"
    (630603 'move' call_tmp[630600](85615 call wrapped _mt[243] lhs[85598]))
    unknown call_tmp[630607] "expr temp" "maybe param" "maybe type" "temp"
    (630610 'move' call_tmp[630607](85622 call(85618 call (partial) readFE _mt[243] call_tmp[630600])))
    unknown call_tmp[630612] "expr temp" "maybe param" "maybe type" "temp"
    (630615 'move' call_tmp[630612](85624 call >> call_tmp[630607] rhs[85604]))
    (85627 call(85611 call (partial) writeEF _mt[243] call_tmp[630591]) call_tmp[630612])
    (512707 return _void[55])
  }
  function <<=[85642](ref arg lhs[85639]:_syncvar[84944](?), arg rhs[85645] :
  (459821 'query' lhs[85639] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630619] "expr temp" "maybe param" "maybe type" "temp"
    (630622 'move' call_tmp[630619](85649 call wrapped _mt[243] lhs[85639]))
    unknown call_tmp[630628] "expr temp" "maybe param" "maybe type" "temp"
    (630631 'move' call_tmp[630628](85656 call wrapped _mt[243] lhs[85639]))
    unknown call_tmp[630635] "expr temp" "maybe param" "maybe type" "temp"
    (630638 'move' call_tmp[630635](85663 call(85659 call (partial) readFE _mt[243] call_tmp[630628])))
    unknown call_tmp[630640] "expr temp" "maybe param" "maybe type" "temp"
    (630643 'move' call_tmp[630640](85665 call << call_tmp[630635] rhs[85645]))
    (85668 call(85652 call (partial) writeEF _mt[243] call_tmp[630619]) call_tmp[630640])
    (512709 return _void[55])
  }
  function chpl__initCopy[85683](ref arg sv[85680]:_syncvar[84944](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[512713] "RVV" "temp"
    unknown call_tmp[630647] "expr temp" "maybe param" "maybe type" "temp"
    (630650 'move' call_tmp[630647](85690 call(85686 call (partial) readFE _mt[243] sv[85680])))
    (512718 'move' ret[512713](512717 'deref' call_tmp[630647]))
    (512715 return ret[512713])
  }
  function chpl__autoCopy[85702](const  ref arg rhs[85699]:_syncvar[84944](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[512722] "RVV" "temp"
    unknown call_tmp[630652] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630655 'move' call_tmp[630652](747718 'new' _syncvar[84944](?) rhs[85699]))
    (512727 'move' ret[512722](512726 'deref' call_tmp[630652]))
    (512724 return ret[512722])
  }
  function chpl__maybeAutoDestroyed[85724](arg x[85721]:_syncvar[84944](?)) param : _unknown[51] "inline"
  {
    unknown ret[512731] "RVV" "param" "temp"
    (512736 'move' ret[512731](512735 'deref' 1))
    (512733 return ret[512731])
  }
  function chpl__autoDestroy[85741](arg x[85738]:_syncvar[84944](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[630659] "expr temp" "maybe param" "maybe type" "temp"
    (630662 'move' call_tmp[630659](85744 call isOwned _mt[243] x[85738]))
    unknown call_tmp[630664] "expr temp" "maybe param" "maybe type" "temp"
    (630667 'move' call_tmp[630664](85748 call == call_tmp[630659] 1))
    unknown call_tmp[630669] "expr temp" "maybe param" "maybe type" "temp"
    (630672 'move' call_tmp[630669](85758 call _cond_test call_tmp[630664]))
    if call_tmp[630669]
    {
      unknown call_tmp[630676] "expr temp" "maybe param" "maybe type" "temp"
      (630679 'move' call_tmp[630676](85751 call wrapped _mt[243] x[85738]))
      (85755 call chpl__delete call_tmp[630676])
    }
    (512738 return _void[55])
  }
  function chpl__readXX[85775](const  ref arg x[85772]:_syncvar[84944](?)) : _unknown[51] "no doc"
  {
    unknown ret[512742] "RVV" "temp"
    unknown call_tmp[630683] "expr temp" "maybe param" "maybe type" "temp"
    (630686 'move' call_tmp[630683](85782 call(85778 call (partial) readXX _mt[243] x[85772])))
    (512747 'move' ret[512742](512746 'deref' call_tmp[630683]))
    (512744 return ret[512742])
  }
  function <=>[85794](arg lhs[85791]:_syncvar[84944](?), ref arg rhs[85796]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85799] "dead at end of block" "const" "insert auto destroy"
    (541420 'init var' tmp[85799] lhs[85791])
    (85802 'end of statement')
    (85806 call = lhs[85791] rhs[85796])
    (476783 'end of statement')
    (85811 call = rhs[85796] tmp[85799])
    (476784 'end of statement' tmp[85799])
    (512749 return _void[55])
  }
  function <=>[85820](ref arg lhs[85818]:_any[178](?), arg rhs[85823]:_syncvar[84944](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85827] "dead at end of block" "const" "insert auto destroy"
    (541422 'init var' tmp[85827] lhs[85818])
    (85830 'end of statement')
    (85834 call = lhs[85818] rhs[85823])
    (476786 'end of statement')
    (85839 call = rhs[85823] tmp[85827])
    (476787 'end of statement' tmp[85827])
    (512751 return _void[55])
  }
  function <=>[85850](arg lhs[85847]:_syncvar[84944](?), arg rhs[85853]:_syncvar[84944](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85857] "dead at end of block" "const" "insert auto destroy"
    (541424 'init var' tmp[85857] lhs[85847])
    (85860 'end of statement')
    (85864 call = lhs[85847] rhs[85853])
    (476789 'end of statement')
    (85869 call = rhs[85853] tmp[85857])
    (476790 'end of statement' tmp[85857])
    (512753 return _void[55])
  }
  function _synccls[86371](?).init[85892](arg _mt[86375]:_MT[238], arg this[86373]:_synccls[86371](?), arg valType[85890]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[459904] "temporary of super field" "temp"
    (459912 'move' super_tmp[459904](459905 '.v' this[86373] c"super"))
    (459908 call init _mt[243] super_tmp[459904])
    (476792 'end of statement')
    unknown tmp[459857] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491842] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[630688] "expr temp" "maybe param" "maybe type" "temp"
      (630691 'move' call_tmp[630688](459859 '.v' this[86373] c"super"))
      (491846 'move' call_type_tmp[491842](459862 'typeof' call_tmp[630688]))
    }
    (459863 'move' tmp[459857] call_type_tmp[491842])
    unknown call_tmp[630693] "maybe param" "maybe type" "temp"
    (630696 'move' call_tmp[630693](459868 'cast' tmp[459857] this[86373]))
    unknown chpl__thisAsParent[459865] "dead at end of block" "insert auto destroy" "temp"
    (541426 'init var' chpl__thisAsParent[459865] call_tmp[630693] tmp[459857])
    (459871 'setcid' chpl__thisAsParent[459865])
    (476793 'end of statement')
    unknown tmp[459873] "temp" "type variable"
    (459875 'move' tmp[459873] valType[85890])
    (459877 'init field' this[86373] c"valType" tmp[459873])
    (476794 'end of statement')
    unknown tmp[459881] "temp"
    unknown call_tmp[630698] "expr temp" "maybe param" "maybe type" "temp"
    (630701 'move' call_tmp[630698](459890 '.v' this[86373] c"valType"))
    (459884 'default init var' tmp[459881] call_tmp[630698])
    (459886 '.=' this[86373] c"value" tmp[459881])
    (476795 'end of statement')
    val tmp[459893]:chpl_sync_aux_t[87952] "temp"
    (459896 'default init var' tmp[459893] chpl_sync_aux_t[87952])
    (459898 '.=' this[86373] c"syncAux" tmp[459893])
    (476796 'end of statement')
    (459903 'setcid' this[86373])
    (476797 'end of statement')
    unknown call_tmp[630705] "expr temp" "maybe param" "maybe type" "temp"
    (630708 'move' call_tmp[630705](376918 call syncAux _mt[243] this[86373]))
    (85913 call chpl_sync_initAux call_tmp[630705])
    (512755 return _void[55])
  }
  function _synccls[86371](?).deinit[85919](arg _mt[86379]:_MT[238], arg this[86377]:_synccls[86371](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630712] "expr temp" "maybe param" "maybe type" "temp"
    (630715 'move' call_tmp[630712](376923 call syncAux _mt[243] this[86377]))
    (85924 call chpl_sync_destroyAux call_tmp[630712])
    (512757 return _void[55])
  }
  function _synccls[86371](?).readFE[85931](arg _mt[86383]:_MT[238], arg this[86381]:_synccls[86371](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512761] "RVV" "temp"
    unknown ret[85934] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630719] "expr temp" "maybe param" "maybe type" "temp"
    (630722 'move' call_tmp[630719](376928 call valType _mt[243] this[86381]))
    (541428 'default init var' ret[85934] call_tmp[630719])
    (85937 'end of statement')
    const tmp[85977] "const" "temp"
    unknown call_tmp[630724] "expr temp" "maybe param" "maybe type" "temp"
    (630727 'move' call_tmp[630724](85974 '_wide_get_locale' this[86381]))
    (85979 'move' tmp[85977](85975 'deref' call_tmp[630724]))
    (934302 call on_fn[934298] tmp[85977])
    function on_fn[934298](const in arg dummy_locale_arg[934300]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown localRet[85941] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541430] "maybe param" "maybe type" "temp"
        (541439 'move' type_tmp[541430](541436 call valType _mt[243] this[86381]))
        (541432 'init var split decl' localRet[85941] type_tmp[541430])
        (85944 'end of statement')
        (85948 call chpl_rmem_consist_release)
        (476800 'end of statement')
        unknown call_tmp[630733] "expr temp" "maybe param" "maybe type" "temp"
        (630736 'move' call_tmp[630733](376939 call syncAux _mt[243] this[86381]))
        (85953 call chpl_sync_waitFullAndLock call_tmp[630733])
        (476801 'end of statement')
        unknown call_tmp[630740] "maybe param" "maybe type" "temp"
        (630743 'move' call_tmp[630740](376945 call value _mt[243] this[86381]))
        (541441 'init var split init' localRet[85941] call_tmp[630740] type_tmp[541430])
        (476802 'end of statement' localRet[85941])
        unknown call_tmp[630747] "expr temp" "maybe param" "maybe type" "temp"
        (630750 'move' call_tmp[630747](376950 call syncAux _mt[243] this[86381]))
        (85963 call chpl_sync_markAndSignalEmpty call_tmp[630747])
        (476804 'end of statement')
        (85967 call chpl_rmem_consist_acquire)
        (476805 'end of statement')
        (85971 call = ret[85934] localRet[85941])
        (476806 'end of statement' ret[85934] localRet[85941])
      }
      (934305 return _void[55])
    }
    {
    }
    (512766 'move' ret[512761](512765 'deref' ret[85934]))
    gotoReturn _end_readFE[512759] _end_readFE[512759]
    (476809 'end of statement' ret[85934])
    label _end_readFE[512759]
    (512763 return ret[512761])
  }
  function _synccls[86371](?).readFF[85992](arg _mt[86387]:_MT[238], arg this[86385]:_synccls[86371](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512772] "RVV" "temp"
    unknown ret[85995] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630754] "expr temp" "maybe param" "maybe type" "temp"
    (630757 'move' call_tmp[630754](376958 call valType _mt[243] this[86385]))
    (541444 'default init var' ret[85995] call_tmp[630754])
    (85998 'end of statement')
    const tmp[86038] "const" "temp"
    unknown call_tmp[630759] "expr temp" "maybe param" "maybe type" "temp"
    (630762 'move' call_tmp[630759](86035 '_wide_get_locale' this[86385]))
    (86040 'move' tmp[86038](86036 'deref' call_tmp[630759]))
    (934311 call on_fn[934307] tmp[86038])
    function on_fn[934307](const in arg dummy_locale_arg[934309]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown localRet[86002] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541446] "maybe param" "maybe type" "temp"
        (541455 'move' type_tmp[541446](541452 call valType _mt[243] this[86385]))
        (541448 'init var split decl' localRet[86002] type_tmp[541446])
        (86005 'end of statement')
        (86009 call chpl_rmem_consist_release)
        (476811 'end of statement')
        unknown call_tmp[630768] "expr temp" "maybe param" "maybe type" "temp"
        (630771 'move' call_tmp[630768](376969 call syncAux _mt[243] this[86385]))
        (86014 call chpl_sync_waitFullAndLock call_tmp[630768])
        (476812 'end of statement')
        unknown call_tmp[630775] "maybe param" "maybe type" "temp"
        (630778 'move' call_tmp[630775](376975 call value _mt[243] this[86385]))
        (541457 'init var split init' localRet[86002] call_tmp[630775] type_tmp[541446])
        (476813 'end of statement' localRet[86002])
        unknown call_tmp[630782] "expr temp" "maybe param" "maybe type" "temp"
        (630785 'move' call_tmp[630782](376980 call syncAux _mt[243] this[86385]))
        (86024 call chpl_sync_markAndSignalFull call_tmp[630782])
        (476815 'end of statement')
        (86028 call chpl_rmem_consist_acquire)
        (476816 'end of statement')
        (86032 call = ret[85995] localRet[86002])
        (476817 'end of statement' ret[85995] localRet[86002])
      }
      (934314 return _void[55])
    }
    {
    }
    (512777 'move' ret[512772](512776 'deref' ret[85995]))
    gotoReturn _end_readFF[512770] _end_readFF[512770]
    (476820 'end of statement' ret[85995])
    label _end_readFF[512770]
    (512774 return ret[512772])
  }
  function _synccls[86371](?).readXX[86053](arg _mt[86391]:_MT[238], arg this[86389]:_synccls[86371](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512783] "RVV" "temp"
    unknown ret[86056] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630789] "expr temp" "maybe param" "maybe type" "temp"
    (630792 'move' call_tmp[630789](376988 call valType _mt[243] this[86389]))
    (541460 'default init var' ret[86056] call_tmp[630789])
    (86059 'end of statement')
    const tmp[86099] "const" "temp"
    unknown call_tmp[630794] "expr temp" "maybe param" "maybe type" "temp"
    (630797 'move' call_tmp[630794](86096 '_wide_get_locale' this[86389]))
    (86101 'move' tmp[86099](86097 'deref' call_tmp[630794]))
    (934320 call on_fn[934316] tmp[86099])
    function on_fn[934316](const in arg dummy_locale_arg[934318]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown localRet[86063] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541462] "maybe param" "maybe type" "temp"
        (541471 'move' type_tmp[541462](541468 call valType _mt[243] this[86389]))
        (541464 'init var split decl' localRet[86063] type_tmp[541462])
        (86066 'end of statement')
        (86070 call chpl_rmem_consist_release)
        (476822 'end of statement')
        unknown call_tmp[630803] "expr temp" "maybe param" "maybe type" "temp"
        (630806 'move' call_tmp[630803](376999 call syncAux _mt[243] this[86389]))
        (86075 call chpl_sync_lock call_tmp[630803])
        (476823 'end of statement')
        unknown call_tmp[630810] "maybe param" "maybe type" "temp"
        (630813 'move' call_tmp[630810](377005 call value _mt[243] this[86389]))
        (541473 'init var split init' localRet[86063] call_tmp[630810] type_tmp[541462])
        (476824 'end of statement' localRet[86063])
        unknown call_tmp[630817] "expr temp" "maybe param" "maybe type" "temp"
        (630820 'move' call_tmp[630817](377010 call syncAux _mt[243] this[86389]))
        (86085 call chpl_sync_unlock call_tmp[630817])
        (476826 'end of statement')
        (86089 call chpl_rmem_consist_acquire)
        (476827 'end of statement')
        (86093 call = ret[86056] localRet[86063])
        (476828 'end of statement' ret[86056] localRet[86063])
      }
      (934323 return _void[55])
    }
    {
    }
    (512788 'move' ret[512783](512787 'deref' ret[86056]))
    gotoReturn _end_readXX[512781] _end_readXX[512781]
    (476831 'end of statement' ret[86056])
    label _end_readXX[512781]
    (512785 return ret[512783])
  }
  function _synccls[86371](?).writeEF[86118](arg _mt[86395]:_MT[238], arg this[86393]:_synccls[86371](?), arg val[86115] :
  (377018 call valType _mt[243] this[86393])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86154] "const" "temp"
    unknown call_tmp[630824] "expr temp" "maybe param" "maybe type" "temp"
    (630827 'move' call_tmp[630824](86151 '_wide_get_locale' this[86393]))
    (86156 'move' tmp[86154](86152 'deref' call_tmp[630824]))
    (934329 call on_fn[934325] tmp[86154])
    function on_fn[934325](const in arg dummy_locale_arg[934327]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (86129 call chpl_rmem_consist_release)
        (476833 'end of statement')
        unknown call_tmp[630831] "expr temp" "maybe param" "maybe type" "temp"
        (630834 'move' call_tmp[630831](377026 call syncAux _mt[243] this[86393]))
        (86135 call chpl_sync_waitEmptyAndLock call_tmp[630831])
        (476834 'end of statement')
        unknown call_tmp[630838] "expr temp" "maybe param" "maybe type" "temp"
        (630841 'move' call_tmp[630838](377031 call value _mt[243] this[86393]))
        (86139 call = call_tmp[630838] val[86115])
        (476835 'end of statement')
        unknown call_tmp[630845] "expr temp" "maybe param" "maybe type" "temp"
        (630848 'move' call_tmp[630845](377037 call syncAux _mt[243] this[86393]))
        (86145 call chpl_sync_markAndSignalFull call_tmp[630845])
        (476836 'end of statement')
        (86149 call chpl_rmem_consist_acquire)
      }
      (934332 return _void[55])
    }
    {
    }
    (512792 return _void[55])
  }
  {
    (86124 call <(86121 'lifetime_of' this[86393])(86123 'lifetime_of' val[86115]))
  }
  function _synccls[86371](?).writeFF[86172](arg _mt[86399]:_MT[238], arg this[86397]:_synccls[86371](?), arg val[86169] :
  (377042 call valType _mt[243] this[86397])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86208] "const" "temp"
    unknown call_tmp[630852] "expr temp" "maybe param" "maybe type" "temp"
    (630855 'move' call_tmp[630852](86205 '_wide_get_locale' this[86397]))
    (86210 'move' tmp[86208](86206 'deref' call_tmp[630852]))
    (934338 call on_fn[934334] tmp[86208])
    function on_fn[934334](const in arg dummy_locale_arg[934336]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (86183 call chpl_rmem_consist_release)
        (476838 'end of statement')
        unknown call_tmp[630859] "expr temp" "maybe param" "maybe type" "temp"
        (630862 'move' call_tmp[630859](377050 call syncAux _mt[243] this[86397]))
        (86189 call chpl_sync_waitFullAndLock call_tmp[630859])
        (476839 'end of statement')
        unknown call_tmp[630866] "expr temp" "maybe param" "maybe type" "temp"
        (630869 'move' call_tmp[630866](377055 call value _mt[243] this[86397]))
        (86193 call = call_tmp[630866] val[86169])
        (476840 'end of statement')
        unknown call_tmp[630873] "expr temp" "maybe param" "maybe type" "temp"
        (630876 'move' call_tmp[630873](377061 call syncAux _mt[243] this[86397]))
        (86199 call chpl_sync_markAndSignalFull call_tmp[630873])
        (476841 'end of statement')
        (86203 call chpl_rmem_consist_acquire)
      }
      (934341 return _void[55])
    }
    {
    }
    (512794 return _void[55])
  }
  {
    (86178 call <(86175 'lifetime_of' this[86397])(86177 'lifetime_of' val[86169]))
  }
  function _synccls[86371](?).writeXF[86226](arg _mt[86403]:_MT[238], arg this[86401]:_synccls[86371](?), arg val[86223] :
  (377066 call valType _mt[243] this[86401])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86262] "const" "temp"
    unknown call_tmp[630880] "expr temp" "maybe param" "maybe type" "temp"
    (630883 'move' call_tmp[630880](86259 '_wide_get_locale' this[86401]))
    (86264 'move' tmp[86262](86260 'deref' call_tmp[630880]))
    (934347 call on_fn[934343] tmp[86262])
    function on_fn[934343](const in arg dummy_locale_arg[934345]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (86237 call chpl_rmem_consist_release)
        (476843 'end of statement')
        unknown call_tmp[630887] "expr temp" "maybe param" "maybe type" "temp"
        (630890 'move' call_tmp[630887](377074 call syncAux _mt[243] this[86401]))
        (86243 call chpl_sync_lock call_tmp[630887])
        (476844 'end of statement')
        unknown call_tmp[630894] "expr temp" "maybe param" "maybe type" "temp"
        (630897 'move' call_tmp[630894](377079 call value _mt[243] this[86401]))
        (86247 call = call_tmp[630894] val[86223])
        (476845 'end of statement')
        unknown call_tmp[630901] "expr temp" "maybe param" "maybe type" "temp"
        (630904 'move' call_tmp[630901](377085 call syncAux _mt[243] this[86401]))
        (86253 call chpl_sync_markAndSignalFull call_tmp[630901])
        (476846 'end of statement')
        (86257 call chpl_rmem_consist_acquire)
      }
      (934350 return _void[55])
    }
    {
    }
    (512796 return _void[55])
  }
  {
    (86232 call <(86229 'lifetime_of' this[86401])(86231 'lifetime_of' val[86223]))
  }
  function _synccls[86371](?).reset[86276](arg _mt[86407]:_MT[238], arg this[86405]:_synccls[86371](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86311] "const" "temp"
    unknown call_tmp[630906] "expr temp" "maybe param" "maybe type" "temp"
    (630909 'move' call_tmp[630906](86308 '_wide_get_locale' this[86405]))
    (86313 'move' tmp[86311](86309 'deref' call_tmp[630906]))
    (934356 call on_fn[934352] tmp[86311])
    function on_fn[934352](const in arg dummy_locale_arg[934354]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        const defaultValue[86280] "dead at end of block" "const" "insert auto destroy"
        unknown call_tmp[630913] "expr temp" "maybe param" "maybe type" "temp"
        (630916 'move' call_tmp[630913](377091 call valType _mt[243] this[86405]))
        (541476 'default init var' defaultValue[86280] call_tmp[630913])
        (86283 'end of statement')
        (86287 call chpl_rmem_consist_release)
        (476848 'end of statement')
        unknown call_tmp[630920] "expr temp" "maybe param" "maybe type" "temp"
        (630923 'move' call_tmp[630920](377096 call syncAux _mt[243] this[86405]))
        (86292 call chpl_sync_lock call_tmp[630920])
        (476849 'end of statement')
        unknown call_tmp[630927] "expr temp" "maybe param" "maybe type" "temp"
        (630930 'move' call_tmp[630927](377101 call value _mt[243] this[86405]))
        (86296 call = call_tmp[630927] defaultValue[86280])
        (476850 'end of statement' defaultValue[86280])
        unknown call_tmp[630934] "expr temp" "maybe param" "maybe type" "temp"
        (630937 'move' call_tmp[630934](377107 call syncAux _mt[243] this[86405]))
        (86302 call chpl_sync_markAndSignalEmpty call_tmp[630934])
        (476852 'end of statement')
        (86306 call chpl_rmem_consist_acquire)
      }
      (934359 return _void[55])
    }
    {
    }
    (512798 return _void[55])
  }
  function _synccls[86371](?).isFull[86324](arg _mt[86411]:_MT[238], arg this[86409]:_synccls[86371](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512802] "RVV" "temp"
    unknown b[86327] "dead at end of block" "insert auto destroy"
    (541478 'default init var' b[86327] bool[10])
    (86330 'end of statement')
    const tmp[86357] "const" "temp"
    unknown call_tmp[630939] "expr temp" "maybe param" "maybe type" "temp"
    (630942 'move' call_tmp[630939](86354 '_wide_get_locale' this[86409]))
    (86359 'move' tmp[86357](86355 'deref' call_tmp[630939]))
    (934365 call on_fn[934361] tmp[86357])
    function on_fn[934361](const in arg dummy_locale_arg[934363]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (86335 call chpl_rmem_consist_release)
        (476854 'end of statement')
        unknown call_tmp[630946] "expr temp" "maybe param" "maybe type" "temp"
        (630949 'move' call_tmp[630946](377114 call value _mt[243] this[86409]))
        unknown call_tmp[630951] "expr temp" "maybe param" "maybe type" "temp"
        (630954 'move' call_tmp[630951](86343 call c_ptrTo call_tmp[630946]))
        unknown call_tmp[630958] "expr temp" "maybe param" "maybe type" "temp"
        (630961 'move' call_tmp[630958](377119 call syncAux _mt[243] this[86409]))
        unknown call_tmp[630963] "expr temp" "maybe param" "maybe type" "temp"
        (630966 'move' call_tmp[630963](86346 call chpl_sync_isFull call_tmp[630951] call_tmp[630958]))
        (86347 call = b[86327] call_tmp[630963])
        (476855 'end of statement' b[86327])
        (86352 call chpl_rmem_consist_acquire)
      }
      (934368 return _void[55])
    }
    {
    }
    (512807 'move' ret[512802](512806 'deref' b[86327]))
    gotoReturn _end_isFull[512800] _end_isFull[512800]
    (476858 'end of statement' b[86327])
    label _end_isFull[512800]
    (512804 return ret[512802])
  }
  function _synccls[86371](?).super[777343](arg _mt[777345]:_MT[238], arg this[777347]:_synccls[86371](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777357] "RVV" "temp"
    unknown call_tmp[777364] "expr temp" "maybe param" "maybe type" "temp"
    (777367 'move' call_tmp[777364](777351 '.v' this[777347] c"super"))
    (777362 'move' ret[777357](777361 'deref' call_tmp[777364]))
    (777359 return ret[777357])
  }
  function _synccls[777374](?).valType[777369](arg _mt[777371]:_MT[238], arg this[777376]:_synccls[777374](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777425] "RVV" "temp" "type variable"
    unknown borrowOfThis[777378]
    (777417 'end of statement')
    (777380 'move' borrowOfThis[777378](777383 call _cast _borrowedNonNilable[214](?) this[777376]))
    (777418 'end of statement' borrowOfThis[777378])
    unknown call_tmp[777439] "expr temp" "maybe param" "maybe type" "temp"
    (777442 'move' call_tmp[777439](777407 'is bound' borrowOfThis[777378] c"valType"))
    if call_tmp[777439]
    {
      unknown call_tmp[777444] "expr temp" "maybe param" "maybe type" "temp"
      (777447 'move' call_tmp[777444](777388 '.v' borrowOfThis[777378] c"valType"))
      unknown call_tmp[777449] "expr temp" "maybe param" "maybe type" "temp"
      (777452 'move' call_tmp[777449](777403 call chpl_checkLegalTypeFieldAccessor this[777376] call_tmp[777444] "valType"))
      (777430 'move' ret[777425](777429 'deref' call_tmp[777449]))
      gotoReturn _end_valType[777423] _end_valType[777423]
      (777420 'end of statement' borrowOfThis[777378])
    }
    {
      (777435 'move' ret[777425](777434 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777423] _end_valType[777423]
    }
    label _end_valType[777423]
    (777427 return ret[777425])
  }
  function _synccls[777374](?).valType[777454](arg _mt[777456]:_MT[238], arg this[777458]:_synccls[777374](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777493] "RVV" "temp" "type variable"
    unknown borrowOfThis[777460] "type variable"
    (777485 'end of statement')
    (777462 'move' borrowOfThis[777460](777465 call _cast _borrowedNonNilable[214](?) this[777458]))
    (777486 'end of statement' borrowOfThis[777460])
    unknown call_tmp[777507] "expr temp" "maybe param" "maybe type" "temp"
    (777510 'move' call_tmp[777507](777475 'is bound' borrowOfThis[777460] c"valType"))
    if call_tmp[777507]
    {
      unknown call_tmp[777512] "expr temp" "maybe param" "maybe type" "temp"
      (777515 'move' call_tmp[777512](777470 '.v' borrowOfThis[777460] c"valType"))
      unknown call_tmp[777517] "expr temp" "maybe param" "maybe type" "temp"
      (777520 'move' call_tmp[777517](777471 call chpl_checkLegalTypeFieldAccessor this[777458] call_tmp[777512] "valType"))
      (777498 'move' ret[777493](777497 'deref' call_tmp[777517]))
      gotoReturn _end_valType[777491] _end_valType[777491]
      (777488 'end of statement' borrowOfThis[777460])
    }
    {
      (777503 'move' ret[777493](777502 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777491] _end_valType[777491]
    }
    label _end_valType[777491]
    (777495 return ret[777493])
  }
  function _synccls[86371](?).value[777522](arg _mt[777524]:_MT[238], arg this[777526]:_synccls[86371](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777536] "RVV" "temp"
    unknown call_tmp[777543] "expr temp" "maybe param" "maybe type" "temp"
    (777546 'move' call_tmp[777543](777530 '.' this[777526] c"value"))
    (777541 'move' ret[777536](777540 'addr of' call_tmp[777543]))
    (777538 return ret[777536])
  }
  function _synccls[86371](?).syncAux[777548](arg _mt[777550]:_MT[238], arg this[777552]:_synccls[86371](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777562] "RVV" "temp"
    unknown call_tmp[777569] "expr temp" "maybe param" "maybe type" "temp"
    (777572 'move' call_tmp[777569](777556 '.' this[777552] c"syncAux"))
    (777567 'move' ret[777562](777566 'addr of' call_tmp[777569]))
    (777564 return ret[777562])
  }
  function _synccls[86371](?).writeThis[777574](arg _mt[777578]:_MT[238], arg this[777576]:_synccls[86371](?), arg f[777577]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777583 call writeThisDefaultImpl f[777577] this[777576])
    (777588 return _void[55])
  }
  function _synccls[86371](?).readThis[777590](arg _mt[777594]:_MT[238], arg this[777592]:_synccls[86371](?), arg f[777593]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777598 call readThisDefaultImpl f[777593] this[777592])
    (777604 return _void[55])
  }
  type _synccls[86371](?) val super[355544]:object[22] "super class" unknown valType[85875] "type variable" unknown value[85879] valType[85875] val syncAux[85884]:chpl_sync_aux_t[87952] chpl_sync_aux_t[87952]
  type _synccls[777374](?)
  type unmanaged _synccls[415322](?)
  type _synccls[376800](?)
  function _qthreads_synccls[86862](?).init[86427](arg _mt[86866]:_MT[238], arg this[86864]:_qthreads_synccls[86862](?), arg valType[86425]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[459954] "temporary of super field" "temp"
    (459962 'move' super_tmp[459954](459955 '.v' this[86864] c"super"))
    (459958 call init _mt[243] super_tmp[459954])
    (476860 'end of statement')
    unknown tmp[459919] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491848] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[630968] "expr temp" "maybe param" "maybe type" "temp"
      (630971 'move' call_tmp[630968](459921 '.v' this[86864] c"super"))
      (491852 'move' call_type_tmp[491848](459924 'typeof' call_tmp[630968]))
    }
    (459925 'move' tmp[459919] call_type_tmp[491848])
    unknown call_tmp[630973] "maybe param" "maybe type" "temp"
    (630976 'move' call_tmp[630973](459930 'cast' tmp[459919] this[86864]))
    unknown chpl__thisAsParent[459927] "dead at end of block" "insert auto destroy" "temp"
    (541480 'init var' chpl__thisAsParent[459927] call_tmp[630973] tmp[459919])
    (459933 'setcid' chpl__thisAsParent[459927])
    (476861 'end of statement')
    unknown tmp[459935] "temp" "type variable"
    (459937 'move' tmp[459935] valType[86425])
    (459939 'init field' this[86864] c"valType" tmp[459935])
    (476862 'end of statement')
    val tmp[459943]:aligned_t[88359] "temp"
    (459946 'default init var' tmp[459943] aligned_t[88359])
    (459948 '.=' this[86864] c"alignedValue" tmp[459943])
    (476863 'end of statement')
    (459953 'setcid' this[86864])
    (476864 'end of statement')
    unknown call_tmp[630980] "expr temp" "maybe param" "maybe type" "temp"
    (630983 'move' call_tmp[630980](377129 call alignedValue _mt[243] this[86864]))
    unknown call_tmp[630985] "expr temp" "maybe param" "maybe type" "temp"
    (630988 'move' call_tmp[630985](86451 call defaultOfAlignedT valType[86425]))
    (86452 call qthread_purge_to call_tmp[630980] call_tmp[630985])
    (512811 return _void[55])
  }
  function _qthreads_synccls[86862](?).deinit[86458](arg _mt[86870]:_MT[238], arg this[86868]:_qthreads_synccls[86862](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630992] "expr temp" "maybe param" "maybe type" "temp"
    (630995 'move' call_tmp[630992](377135 call alignedValue _mt[243] this[86868]))
    (86463 call qthread_fill call_tmp[630992])
    (512813 return _void[55])
  }
  function _qthreads_synccls[86862](?).readFE[86470](arg _mt[86874]:_MT[238], arg this[86872]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512817] "RVV" "temp"
    unknown ret[86473] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630999] "expr temp" "maybe param" "maybe type" "temp"
    (631002 'move' call_tmp[630999](377140 call valType _mt[243] this[86872]))
    (541482 'default init var' ret[86473] call_tmp[630999])
    (86476 'end of statement')
    const tmp[86510] "const" "temp"
    unknown call_tmp[631004] "expr temp" "maybe param" "maybe type" "temp"
    (631007 'move' call_tmp[631004](86507 '_wide_get_locale' this[86872]))
    (86512 'move' tmp[86510](86508 'deref' call_tmp[631004]))
    (934374 call on_fn[934370] tmp[86510])
    function on_fn[934370](const in arg dummy_locale_arg[934372]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown alignedLocalRet[86480] "dead at end of block" "insert auto destroy"
        (541484 'default init var' alignedLocalRet[86480] aligned_t[88359])
        (86483 'end of statement')
        (86487 call chpl_rmem_consist_release)
        (476867 'end of statement')
        unknown call_tmp[631011] "expr temp" "maybe param" "maybe type" "temp"
        (631014 'move' call_tmp[631011](377148 call alignedValue _mt[243] this[86872]))
        (86493 call qthread_readFE alignedLocalRet[86480] call_tmp[631011])
        (476868 'end of statement' alignedLocalRet[86480])
        (86497 call chpl_rmem_consist_acquire)
        (476870 'end of statement')
        unknown call_tmp[631018] "expr temp" "maybe param" "maybe type" "temp"
        (631021 'move' call_tmp[631018](377155 call valType _mt[243] this[86872]))
        unknown call_tmp[631023] "expr temp" "maybe param" "maybe type" "temp"
        (631026 'move' call_tmp[631023](86502 call _cast call_tmp[631018] alignedLocalRet[86480]))
        (86504 call = ret[86473] call_tmp[631023])
        (476871 'end of statement' ret[86473] alignedLocalRet[86480])
      }
      (934377 return _void[55])
    }
    {
    }
    (512822 'move' ret[512817](512821 'deref' ret[86473]))
    gotoReturn _end_readFE[512815] _end_readFE[512815]
    (476874 'end of statement' ret[86473])
    label _end_readFE[512815]
    (512819 return ret[512817])
  }
  function _qthreads_synccls[86862](?).readFF[86525](arg _mt[86878]:_MT[238], arg this[86876]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512828] "RVV" "temp"
    unknown ret[86528] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631030] "expr temp" "maybe param" "maybe type" "temp"
    (631033 'move' call_tmp[631030](377161 call valType _mt[243] this[86876]))
    (541486 'default init var' ret[86528] call_tmp[631030])
    (86531 'end of statement')
    const tmp[86565] "const" "temp"
    unknown call_tmp[631035] "expr temp" "maybe param" "maybe type" "temp"
    (631038 'move' call_tmp[631035](86562 '_wide_get_locale' this[86876]))
    (86567 'move' tmp[86565](86563 'deref' call_tmp[631035]))
    (934383 call on_fn[934379] tmp[86565])
    function on_fn[934379](const in arg dummy_locale_arg[934381]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown alignedLocalRet[86535] "dead at end of block" "insert auto destroy"
        (541488 'default init var' alignedLocalRet[86535] aligned_t[88359])
        (86538 'end of statement')
        (86542 call chpl_rmem_consist_release)
        (476876 'end of statement')
        unknown call_tmp[631042] "expr temp" "maybe param" "maybe type" "temp"
        (631045 'move' call_tmp[631042](377169 call alignedValue _mt[243] this[86876]))
        (86548 call qthread_readFF alignedLocalRet[86535] call_tmp[631042])
        (476877 'end of statement' alignedLocalRet[86535])
        (86552 call chpl_rmem_consist_acquire)
        (476879 'end of statement')
        unknown call_tmp[631049] "expr temp" "maybe param" "maybe type" "temp"
        (631052 'move' call_tmp[631049](377176 call valType _mt[243] this[86876]))
        unknown call_tmp[631054] "expr temp" "maybe param" "maybe type" "temp"
        (631057 'move' call_tmp[631054](86557 call _cast call_tmp[631049] alignedLocalRet[86535]))
        (86559 call = ret[86528] call_tmp[631054])
        (476880 'end of statement' ret[86528] alignedLocalRet[86535])
      }
      (934386 return _void[55])
    }
    {
    }
    (512833 'move' ret[512828](512832 'deref' ret[86528]))
    gotoReturn _end_readFF[512826] _end_readFF[512826]
    (476883 'end of statement' ret[86528])
    label _end_readFF[512826]
    (512830 return ret[512828])
  }
  function _qthreads_synccls[86862](?).readXX[86580](arg _mt[86882]:_MT[238], arg this[86880]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512839] "RVV" "temp"
    unknown ret[86583] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631061] "expr temp" "maybe param" "maybe type" "temp"
    (631064 'move' call_tmp[631061](377182 call valType _mt[243] this[86880]))
    (541490 'default init var' ret[86583] call_tmp[631061])
    (86586 'end of statement')
    const tmp[86620] "const" "temp"
    unknown call_tmp[631066] "expr temp" "maybe param" "maybe type" "temp"
    (631069 'move' call_tmp[631066](86617 '_wide_get_locale' this[86880]))
    (86622 'move' tmp[86620](86618 'deref' call_tmp[631066]))
    (934392 call on_fn[934388] tmp[86620])
    function on_fn[934388](const in arg dummy_locale_arg[934390]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown alignedLocalRet[86590] "dead at end of block" "insert auto destroy"
        (541492 'default init var' alignedLocalRet[86590] aligned_t[88359])
        (86593 'end of statement')
        (86597 call chpl_rmem_consist_release)
        (476885 'end of statement')
        unknown call_tmp[631073] "expr temp" "maybe param" "maybe type" "temp"
        (631076 'move' call_tmp[631073](377190 call alignedValue _mt[243] this[86880]))
        (86603 call qthread_readXX alignedLocalRet[86590] call_tmp[631073])
        (476886 'end of statement' alignedLocalRet[86590])
        (86607 call chpl_rmem_consist_acquire)
        (476888 'end of statement')
        unknown call_tmp[631080] "expr temp" "maybe param" "maybe type" "temp"
        (631083 'move' call_tmp[631080](377197 call valType _mt[243] this[86880]))
        unknown call_tmp[631085] "expr temp" "maybe param" "maybe type" "temp"
        (631088 'move' call_tmp[631085](86612 call _cast call_tmp[631080] alignedLocalRet[86590]))
        (86614 call = ret[86583] call_tmp[631085])
        (476889 'end of statement' ret[86583] alignedLocalRet[86590])
      }
      (934395 return _void[55])
    }
    {
    }
    (512844 'move' ret[512839](512843 'deref' ret[86583]))
    gotoReturn _end_readXX[512837] _end_readXX[512837]
    (476892 'end of statement' ret[86583])
    label _end_readXX[512837]
    (512841 return ret[512839])
  }
  function _qthreads_synccls[86862](?).writeEF[86639](arg _mt[86886]:_MT[238], arg this[86884]:_qthreads_synccls[86862](?), arg val[86636] :
  (377203 call valType _mt[243] this[86884])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86669] "const" "temp"
    unknown call_tmp[631092] "expr temp" "maybe param" "maybe type" "temp"
    (631095 'move' call_tmp[631092](86666 '_wide_get_locale' this[86884]))
    (86671 'move' tmp[86669](86667 'deref' call_tmp[631092]))
    (934401 call on_fn[934397] tmp[86669])
    function on_fn[934397](const in arg dummy_locale_arg[934399]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (86650 call chpl_rmem_consist_release)
        (476894 'end of statement')
        unknown call_tmp[631099] "expr temp" "maybe param" "maybe type" "temp"
        (631102 'move' call_tmp[631099](377211 call alignedValue _mt[243] this[86884]))
        unknown call_tmp[631104] "expr temp" "maybe param" "maybe type" "temp"
        (631107 'move' call_tmp[631104](86658 call _cast aligned_t[88359] val[86636]))
        (86660 call qthread_writeEF call_tmp[631099] call_tmp[631104])
        (476895 'end of statement')
        (86664 call chpl_rmem_consist_acquire)
      }
      (934404 return _void[55])
    }
    {
    }
    (512848 return _void[55])
  }
  {
    (86645 call <(86642 'lifetime_of' this[86884])(86644 'lifetime_of' val[86636]))
  }
  function _qthreads_synccls[86862](?).writeFF[86687](arg _mt[86890]:_MT[238], arg this[86888]:_qthreads_synccls[86862](?), arg val[86684] :
  (377218 call valType _mt[243] this[86888])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86717] "const" "temp"
    unknown call_tmp[631111] "expr temp" "maybe param" "maybe type" "temp"
    (631114 'move' call_tmp[631111](86714 '_wide_get_locale' this[86888]))
    (86719 'move' tmp[86717](86715 'deref' call_tmp[631111]))
    (934410 call on_fn[934406] tmp[86717])
    function on_fn[934406](const in arg dummy_locale_arg[934408]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (86698 call chpl_rmem_consist_release)
        (476897 'end of statement')
        unknown call_tmp[631118] "expr temp" "maybe param" "maybe type" "temp"
        (631121 'move' call_tmp[631118](377226 call alignedValue _mt[243] this[86888]))
        unknown call_tmp[631123] "expr temp" "maybe param" "maybe type" "temp"
        (631126 'move' call_tmp[631123](86706 call _cast aligned_t[88359] val[86684]))
        (86708 call qthread_writeFF call_tmp[631118] call_tmp[631123])
        (476898 'end of statement')
        (86712 call chpl_rmem_consist_acquire)
      }
      (934413 return _void[55])
    }
    {
    }
    (512850 return _void[55])
  }
  {
    (86693 call <(86690 'lifetime_of' this[86888])(86692 'lifetime_of' val[86684]))
  }
  function _qthreads_synccls[86862](?).writeXF[86735](arg _mt[86894]:_MT[238], arg this[86892]:_qthreads_synccls[86862](?), arg val[86732] :
  (377233 call valType _mt[243] this[86892])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86765] "const" "temp"
    unknown call_tmp[631130] "expr temp" "maybe param" "maybe type" "temp"
    (631133 'move' call_tmp[631130](86762 '_wide_get_locale' this[86892]))
    (86767 'move' tmp[86765](86763 'deref' call_tmp[631130]))
    (934419 call on_fn[934415] tmp[86765])
    function on_fn[934415](const in arg dummy_locale_arg[934417]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (86746 call chpl_rmem_consist_release)
        (476900 'end of statement')
        unknown call_tmp[631137] "expr temp" "maybe param" "maybe type" "temp"
        (631140 'move' call_tmp[631137](377241 call alignedValue _mt[243] this[86892]))
        unknown call_tmp[631142] "expr temp" "maybe param" "maybe type" "temp"
        (631145 'move' call_tmp[631142](86754 call _cast aligned_t[88359] val[86732]))
        (86756 call qthread_writeF call_tmp[631137] call_tmp[631142])
        (476901 'end of statement')
        (86760 call chpl_rmem_consist_acquire)
      }
      (934422 return _void[55])
    }
    {
    }
    (512852 return _void[55])
  }
  {
    (86741 call <(86738 'lifetime_of' this[86892])(86740 'lifetime_of' val[86732]))
  }
  function _qthreads_synccls[86862](?).reset[86779](arg _mt[86898]:_MT[238], arg this[86896]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86803] "const" "temp"
    unknown call_tmp[631147] "expr temp" "maybe param" "maybe type" "temp"
    (631150 'move' call_tmp[631147](86800 '_wide_get_locale' this[86896]))
    (86805 'move' tmp[86803](86801 'deref' call_tmp[631147]))
    (934428 call on_fn[934424] tmp[86803])
    function on_fn[934424](const in arg dummy_locale_arg[934426]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (86784 call chpl_rmem_consist_release)
        (476903 'end of statement')
        unknown call_tmp[631154] "expr temp" "maybe param" "maybe type" "temp"
        (631157 'move' call_tmp[631154](377249 call alignedValue _mt[243] this[86896]))
        unknown call_tmp[631161] "expr temp" "maybe param" "maybe type" "temp"
        (631164 'move' call_tmp[631161](377254 call valType _mt[243] this[86896]))
        unknown call_tmp[631166] "expr temp" "maybe param" "maybe type" "temp"
        (631169 'move' call_tmp[631166](86793 call defaultOfAlignedT call_tmp[631161]))
        (86794 call qthread_purge_to call_tmp[631154] call_tmp[631166])
        (476904 'end of statement')
        (86798 call chpl_rmem_consist_acquire)
      }
      (934431 return _void[55])
    }
    {
    }
    (512854 return _void[55])
  }
  function _qthreads_synccls[86862](?).isFull[86816](arg _mt[86902]:_MT[238], arg this[86900]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512858] "RVV" "temp"
    unknown b[86819] "dead at end of block" "insert auto destroy"
    (541494 'default init var' b[86819] bool[10])
    (86822 'end of statement')
    const tmp[86848] "const" "temp"
    unknown call_tmp[631171] "expr temp" "maybe param" "maybe type" "temp"
    (631174 'move' call_tmp[631171](86845 '_wide_get_locale' this[86900]))
    (86850 'move' tmp[86848](86846 'deref' call_tmp[631171]))
    (934437 call on_fn[934433] tmp[86848])
    function on_fn[934433](const in arg dummy_locale_arg[934435]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (86827 call chpl_rmem_consist_release)
        (476906 'end of statement')
        unknown call_tmp[631178] "expr temp" "maybe param" "maybe type" "temp"
        (631181 'move' call_tmp[631178](377261 call alignedValue _mt[243] this[86900]))
        unknown call_tmp[631183] "expr temp" "maybe param" "maybe type" "temp"
        (631186 'move' call_tmp[631183](86834 call qthread_feb_status call_tmp[631178]))
        unknown call_tmp[631188] "expr temp" "maybe param" "maybe type" "temp"
        (631191 'move' call_tmp[631188](86836 call _cast bool[10] call_tmp[631183]))
        (86838 call = b[86819] call_tmp[631188])
        (476907 'end of statement' b[86819])
        (86843 call chpl_rmem_consist_acquire)
      }
      (934440 return _void[55])
    }
    {
    }
    (512863 'move' ret[512858](512862 'deref' b[86819]))
    gotoReturn _end_isFull[512856] _end_isFull[512856]
    (476910 'end of statement' b[86819])
    label _end_isFull[512856]
    (512860 return ret[512858])
  }
  function _qthreads_synccls[86862](?).super[777606](arg _mt[777608]:_MT[238], arg this[777610]:_qthreads_synccls[86862](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777620] "RVV" "temp"
    unknown call_tmp[777627] "expr temp" "maybe param" "maybe type" "temp"
    (777630 'move' call_tmp[777627](777614 '.v' this[777610] c"super"))
    (777625 'move' ret[777620](777624 'deref' call_tmp[777627]))
    (777622 return ret[777620])
  }
  function _qthreads_synccls[777637](?).valType[777632](arg _mt[777634]:_MT[238], arg this[777639]:_qthreads_synccls[777637](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777674] "RVV" "temp" "type variable"
    unknown borrowOfThis[777641]
    (777666 'end of statement')
    (777643 'move' borrowOfThis[777641](777646 call _cast _borrowedNonNilable[214](?) this[777639]))
    (777667 'end of statement' borrowOfThis[777641])
    unknown call_tmp[777688] "expr temp" "maybe param" "maybe type" "temp"
    (777691 'move' call_tmp[777688](777656 'is bound' borrowOfThis[777641] c"valType"))
    if call_tmp[777688]
    {
      unknown call_tmp[777693] "expr temp" "maybe param" "maybe type" "temp"
      (777696 'move' call_tmp[777693](777651 '.v' borrowOfThis[777641] c"valType"))
      unknown call_tmp[777698] "expr temp" "maybe param" "maybe type" "temp"
      (777701 'move' call_tmp[777698](777652 call chpl_checkLegalTypeFieldAccessor this[777639] call_tmp[777693] "valType"))
      (777679 'move' ret[777674](777678 'deref' call_tmp[777698]))
      gotoReturn _end_valType[777672] _end_valType[777672]
      (777669 'end of statement' borrowOfThis[777641])
    }
    {
      (777684 'move' ret[777674](777683 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777672] _end_valType[777672]
    }
    label _end_valType[777672]
    (777676 return ret[777674])
  }
  function _qthreads_synccls[777637](?).valType[777703](arg _mt[777705]:_MT[238], arg this[777707]:_qthreads_synccls[777637](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777742] "RVV" "temp" "type variable"
    unknown borrowOfThis[777709] "type variable"
    (777734 'end of statement')
    (777711 'move' borrowOfThis[777709](777714 call _cast _borrowedNonNilable[214](?) this[777707]))
    (777735 'end of statement' borrowOfThis[777709])
    unknown call_tmp[777756] "expr temp" "maybe param" "maybe type" "temp"
    (777759 'move' call_tmp[777756](777724 'is bound' borrowOfThis[777709] c"valType"))
    if call_tmp[777756]
    {
      unknown call_tmp[777761] "expr temp" "maybe param" "maybe type" "temp"
      (777764 'move' call_tmp[777761](777719 '.v' borrowOfThis[777709] c"valType"))
      unknown call_tmp[777766] "expr temp" "maybe param" "maybe type" "temp"
      (777769 'move' call_tmp[777766](777720 call chpl_checkLegalTypeFieldAccessor this[777707] call_tmp[777761] "valType"))
      (777747 'move' ret[777742](777746 'deref' call_tmp[777766]))
      gotoReturn _end_valType[777740] _end_valType[777740]
      (777737 'end of statement' borrowOfThis[777709])
    }
    {
      (777752 'move' ret[777742](777751 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777740] _end_valType[777740]
    }
    label _end_valType[777740]
    (777744 return ret[777742])
  }
  function _qthreads_synccls[86862](?).alignedValue[777771](arg _mt[777773]:_MT[238], arg this[777775]:_qthreads_synccls[86862](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777785] "RVV" "temp"
    unknown call_tmp[777792] "expr temp" "maybe param" "maybe type" "temp"
    (777795 'move' call_tmp[777792](777779 '.' this[777775] c"alignedValue"))
    (777790 'move' ret[777785](777789 'addr of' call_tmp[777792]))
    (777787 return ret[777785])
  }
  function _qthreads_synccls[86862](?).writeThis[777797](arg _mt[777801]:_MT[238], arg this[777799]:_qthreads_synccls[86862](?), arg f[777800]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777806 call writeThisDefaultImpl f[777800] this[777799])
    (777811 return _void[55])
  }
  function _qthreads_synccls[86862](?).readThis[777813](arg _mt[777817]:_MT[238], arg this[777815]:_qthreads_synccls[86862](?), arg f[777816]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777821 call readThisDefaultImpl f[777816] this[777815])
    (777827 return _void[55])
  }
  type _qthreads_synccls[86862](?) val super[355546]:object[22] "super class" unknown valType[86415] "type variable" val alignedValue[86419]:aligned_t[88359] aligned_t[88359]
  type _qthreads_synccls[777637](?)
  type unmanaged _qthreads_synccls[415319](?)
  type _qthreads_synccls[376795](?)
  function isSyncValue[86911](arg x[86908]:_syncvar[84944](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512869] "RVV" "param" "temp"
    (512874 'move' ret[512869](512873 'deref' 1))
    (512871 return ret[512869])
  }
  function isSyncValue[86923](arg x[86921]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512878] "RVV" "param" "temp"
    (512883 'move' ret[512878](512882 'deref' 0))
    (512880 return ret[512878])
  }
  function _singlevar[87253](?).init[86954](arg _mt[87257]:_MT[238], ref arg this[87255]:_singlevar[87253](?), arg valType[86952]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    (86959 call ensureFEType valType[86952])
    (476914 'end of statement')
    unknown tmp[459965] "temp" "type variable"
    (459967 'move' tmp[459965] valType[86952])
    (459969 'init field' this[87255] c"valType" tmp[459965])
    (476915 'end of statement')
    unknown call_tmp[631193] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (631196 'move' call_tmp[631193](747719 'new' _singlecls[377267](?) valType[86952](_chpl_manager = unmanaged[220](?))))
    unknown call_tmp[631198] "expr temp" "maybe param" "maybe type" "temp"
    (631201 'move' call_tmp[631198](459984 '.v' this[87255] c"valType"))
    unknown call_tmp[631203] "maybe param" "maybe type" "temp"
    (631206 'move' call_tmp[631203](459976 call unmanaged _singlecls[415325](?) call_tmp[631198]))
    unknown tmp[459973] "temp"
    (459978 'init var' tmp[459973] call_tmp[631193] call_tmp[631203])
    (459980 'init field' this[87255] c"wrapped" tmp[459973])
    (476916 'end of statement')
    unknown tmp[459989] "temp"
    (459992 'init var' tmp[459989] 1 bool[10])
    (459994 'init field' this[87255] c"isOwned" tmp[459989])
    (476917 'end of statement')
    (512885 return _void[55])
  }
  function _singlevar[87253](?).init[86989](arg _mt[87261]:_MT[238], ref arg this[87259]:_singlevar[87253](?), const arg other[86986]:_singlevar[87253](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown tmp[459998] "temp" "type variable"
    (460000 'move' tmp[459998](86996 call valType _mt[243] other[86986]))
    (460002 'init field' this[87259] c"valType" tmp[459998])
    (476918 'end of statement')
    unknown call_tmp[631212] "maybe param" "maybe type" "temp"
    (631215 'move' call_tmp[631212](87005 call wrapped _mt[243] other[86986]))
    unknown call_tmp[631217] "expr temp" "maybe param" "maybe type" "temp"
    (631220 'move' call_tmp[631217](460017 '.v' this[87259] c"valType"))
    unknown call_tmp[631222] "maybe param" "maybe type" "temp"
    (631225 'move' call_tmp[631222](460009 call unmanaged _singlecls[415325](?) call_tmp[631217]))
    unknown tmp[460006] "temp"
    (460011 'init var' tmp[460006] call_tmp[631212] call_tmp[631222])
    (460013 'init field' this[87259] c"wrapped" tmp[460006])
    (476919 'end of statement')
    unknown tmp[460020] "temp"
    (460023 'init var' tmp[460020] 0 bool[10])
    (460025 'init field' this[87259] c"isOwned" tmp[460020])
    (476920 'end of statement')
    (512887 return _void[55])
  }
  function _singlevar[87253](?).init=[87024](arg _mt[87265]:_MT[238], ref arg this[87263]:_singlevar[87253](?), const arg other[87021]:_singlevar[87253](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631227] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631230 'move' call_tmp[631227](87033 'typeof' this[87263]))
    unknown call_tmp[631234] "expr temp" "maybe param" "maybe type" "temp"
    (631237 'move' call_tmp[631234](87034 call valType _mt[243] call_tmp[631227]))
    unknown call_tmp[631241] "expr temp" "maybe param" "maybe type" "temp"
    (631244 'move' call_tmp[631241](87028 call valType _mt[243] other[87021]))
    unknown call_tmp[631246] "expr temp" "maybe param" "maybe type" "temp"
    (631249 'move' call_tmp[631246](354136 'is_coercible' call_tmp[631234] call_tmp[631241]))
    unknown call_tmp[631251] "expr temp" "maybe param" "maybe type" "temp"
    (631254 'move' call_tmp[631251](87039 call == call_tmp[631246] 0))
    unknown call_tmp[631256] "expr temp" "maybe param" "maybe type" "temp"
    (631259 'move' call_tmp[631256](87105 call _cond_test call_tmp[631251]))
    if call_tmp[631256]
    {
      unknown call_tmp[631261] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631264 'move' call_tmp[631261](87043 'typeof' this[87263]))
      unknown call_tmp[631266] "expr temp" "maybe param" "maybe type" "temp"
      (631269 'move' call_tmp[631266](87045 call _cast string[26] call_tmp[631261]))
      unknown call_tmp[631271] "expr temp" "maybe param" "maybe type" "temp"
      (631274 'move' call_tmp[631271](87047 call + "'" call_tmp[631266]))
      unknown call_tmp[631276] "expr temp" "maybe param" "maybe type" "temp"
      (631279 'move' call_tmp[631276](87050 call + call_tmp[631271] "' from '"))
      unknown call_tmp[631281] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631284 'move' call_tmp[631281](87053 'typeof' other[87021]))
      unknown call_tmp[631286] "expr temp" "maybe param" "maybe type" "temp"
      (631289 'move' call_tmp[631286](87055 call _cast string[26] call_tmp[631281]))
      unknown call_tmp[631291] "expr temp" "maybe param" "maybe type" "temp"
      (631294 'move' call_tmp[631291](87057 call + call_tmp[631276] call_tmp[631286]))
      unknown call_tmp[631296] "maybe param" "maybe type" "temp"
      (631299 'move' call_tmp[631296](87060 call + call_tmp[631291] "'"))
      unknown theseTypes[87062] "dead at end of block" "param"
      (541496 'init var' theseTypes[87062] call_tmp[631296])
      (87065 'end of statement')
      unknown call_tmp[631303] "expr temp" "maybe param" "maybe type" "temp"
      (631306 'move' call_tmp[631303](87069 call valType _mt[243] other[87021]))
      unknown call_tmp[631308] "expr temp" "maybe param" "maybe type" "temp"
      (631311 'move' call_tmp[631308](87073 call _cast string[26] call_tmp[631303]))
      unknown call_tmp[631313] "expr temp" "maybe param" "maybe type" "temp"
      (631316 'move' call_tmp[631313](87075 call + "because '" call_tmp[631308]))
      unknown call_tmp[631318] "expr temp" "maybe param" "maybe type" "temp"
      (631321 'move' call_tmp[631318](87078 call + call_tmp[631313] "' is not coercible to '"))
      unknown call_tmp[631323] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631326 'move' call_tmp[631323](87081 'typeof' this[87263]))
      unknown call_tmp[631330] "expr temp" "maybe param" "maybe type" "temp"
      (631333 'move' call_tmp[631330](87082 call valType _mt[243] call_tmp[631323]))
      unknown call_tmp[631335] "expr temp" "maybe param" "maybe type" "temp"
      (631338 'move' call_tmp[631335](87086 call _cast string[26] call_tmp[631330]))
      unknown call_tmp[631340] "expr temp" "maybe param" "maybe type" "temp"
      (631343 'move' call_tmp[631340](87088 call + call_tmp[631318] call_tmp[631335]))
      unknown call_tmp[631345] "maybe param" "maybe type" "temp"
      (631348 'move' call_tmp[631345](87091 call + call_tmp[631340] "'"))
      unknown because[87093] "dead at end of block" "param"
      (541498 'init var' because[87093] call_tmp[631345])
      (87096 'end of statement')
      (87103 call compilerError "cannot initialize " theseTypes[87062] " " because[87093])
    }
    unknown call_tmp[631352] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631355 'move' call_tmp[631352](87115 'typeof' this[87263]))
    unknown call_tmp[631359] "expr temp" "maybe param" "maybe type" "temp"
    (631362 'move' call_tmp[631359](87116 call valType _mt[243] call_tmp[631352]))
    (87120 call(87111 call (partial) init _mt[243] this[87263]) call_tmp[631359])
    (476922 'end of statement')
    unknown call_tmp[631368] "expr temp" "maybe param" "maybe type" "temp"
    (631371 'move' call_tmp[631368](87131 call(87127 call (partial) readFF _mt[243] other[87021])))
    (87133 call(87123 call (partial) writeEF _mt[243] this[87263]) call_tmp[631368])
    (512889 return _void[55])
  }
  function _singlevar[87253](?).init=[87147](arg _mt[87269]:_MT[238], ref arg this[87267]:_singlevar[87253](?), const arg other[87144] :
  unknown call_tmp[631373] "expr temp" "maybe param" "maybe type" "temp" "type variable") : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631382] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631385 'move' call_tmp[631382](87154 'typeof' other[87144]))
    (87156 call(87150 call (partial) init _mt[243] this[87267]) call_tmp[631382])
    (476924 'end of statement')
    (87165 call(87160 call (partial) writeEF _mt[243] this[87267]) other[87144])
    (512891 return _void[55])
  }
  function _singlevar[87253](?).deinit[87171](arg _mt[87273]:_MT[238], arg this[87271]:_singlevar[87253](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631391] "expr temp" "maybe param" "maybe type" "temp"
    (631394 'move' call_tmp[631391](377304 call isOwned _mt[243] this[87271]))
    unknown call_tmp[631396] "expr temp" "maybe param" "maybe type" "temp"
    (631399 'move' call_tmp[631396](87175 call == call_tmp[631391] 1))
    unknown call_tmp[631401] "expr temp" "maybe param" "maybe type" "temp"
    (631404 'move' call_tmp[631401](87182 call _cond_test call_tmp[631396]))
    if call_tmp[631401]
    {
      unknown call_tmp[631408] "expr temp" "maybe param" "maybe type" "temp"
      (631411 'move' call_tmp[631408](377309 call wrapped _mt[243] this[87271]))
      (87179 call chpl__delete call_tmp[631408])
    }
    (512893 return _void[55])
  }
  function _singlevar[87253](?).readThis[87194](arg _mt[87277]:_MT[238], arg this[87275]:_singlevar[87253](?), arg x[87192]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87215 call compilerError "single variables cannot currently be read - use writeEF instead")
    (512895 return _void[55])
  }
  function _singlevar[87253](?).writeThis[87224](arg _mt[87281]:_MT[238], arg this[87279]:_singlevar[87253](?), arg x[87222]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87247 call compilerError "single variables cannot currently be written - apply readFF() to those variables first")
    (512897 return _void[55])
  }
  function _singlevar[87253](?).valType[777829](arg _mt[777831]:_MT[238], arg this[777833]:_singlevar[87253](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[777852] "RVV" "temp" "type variable"
    unknown call_tmp[777866] "expr temp" "maybe param" "maybe type" "temp"
    (777869 'move' call_tmp[777866](777838 'is bound' this[777833] c"valType"))
    if call_tmp[777866]
    {
      unknown call_tmp[777871] "expr temp" "maybe param" "maybe type" "temp"
      (777874 'move' call_tmp[777871](777837 '.v' this[777833] c"valType"))
      (777857 'move' ret[777852](777856 'deref' call_tmp[777871]))
      gotoReturn _end_valType[777850] _end_valType[777850]
    }
    {
      (777862 'move' ret[777852](777861 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777850] _end_valType[777850]
    }
    label _end_valType[777850]
    (777854 return ret[777852])
  }
  function _singlevar[87253](?).valType[777876](arg _mt[777878]:_MT[238], arg this[777880]:_singlevar[87253](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777899] "RVV" "temp" "type variable"
    unknown call_tmp[777913] "expr temp" "maybe param" "maybe type" "temp"
    (777916 'move' call_tmp[777913](777885 'is bound' this[777880] c"valType"))
    if call_tmp[777913]
    {
      unknown call_tmp[777918] "expr temp" "maybe param" "maybe type" "temp"
      (777921 'move' call_tmp[777918](777884 '.v' this[777880] c"valType"))
      (777904 'move' ret[777899](777903 'deref' call_tmp[777918]))
      gotoReturn _end_valType[777897] _end_valType[777897]
    }
    {
      (777909 'move' ret[777899](777908 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777897] _end_valType[777897]
    }
    label _end_valType[777897]
    (777901 return ret[777899])
  }
  function _singlevar[87253](?).wrapped[777923](arg _mt[777925]:_MT[238], ref arg this[777927]:_singlevar[87253](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[777937] "RVV" "temp"
    unknown call_tmp[777944] "expr temp" "maybe param" "maybe type" "temp"
    (777947 'move' call_tmp[777944](777931 '.' this[777927] c"wrapped"))
    (777942 'move' ret[777937](777941 'addr of' call_tmp[777944]))
    (777939 return ret[777937])
  }
  function _singlevar[87253](?).isOwned[777949](arg _mt[777951]:_MT[238], ref arg this[777953]:_singlevar[87253](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[777963] "RVV" "temp"
    unknown call_tmp[777970] "expr temp" "maybe param" "maybe type" "temp"
    (777973 'move' call_tmp[777970](777957 '.' this[777953] c"isOwned"))
    (777968 'move' ret[777963](777967 'addr of' call_tmp[777970]))
    (777965 return ret[777963])
  }
  function chpl_fields_are_comparable[777987](arg _arg1[777989]:_singlevar[87253](?), arg _arg2[777990]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778019]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778026] "expr temp" "maybe param" "maybe type" "temp"
    (778029 'move' call_tmp[778026](777993 call wrapped _mt[243] _arg1[777989]))
    unknown call_tmp[778031] "expr temp" "maybe param" "maybe type" "temp"
    (778034 'move' call_tmp[778031](777997 call wrapped _mt[243] _arg2[777990]))
    unknown call_tmp[778036] "expr temp" "maybe param" "maybe type" "temp"
    (778039 'move' call_tmp[778036](778001 'call resolves' c"==" call_tmp[778026] call_tmp[778031]))
    unknown call_tmp[778041] "expr temp" "maybe param" "maybe type" "temp"
    (778044 'move' call_tmp[778041](778003 call isOwned _mt[243] _arg1[777989]))
    unknown call_tmp[778046] "expr temp" "maybe param" "maybe type" "temp"
    (778049 'move' call_tmp[778046](778007 call isOwned _mt[243] _arg2[777990]))
    unknown call_tmp[778051] "expr temp" "maybe param" "maybe type" "temp"
    (778054 'move' call_tmp[778051](778011 'call resolves' c"==" call_tmp[778041] call_tmp[778046]))
    unknown call_tmp[778056] "expr temp" "maybe param" "maybe type" "temp"
    (778059 'move' call_tmp[778056](778013 '&' call_tmp[778036] call_tmp[778051]))
    (778024 'move' ret[778019](778023 'deref' call_tmp[778056]))
    (778021 return ret[778019])
  }
  function ==[777975](arg _arg1[777977]:_singlevar[87253](?), arg _arg2[777978]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778103]:bool[10] "RVV" "temp"
    unknown call_tmp[778120] "expr temp" "maybe param" "maybe type" "temp"
    (778123 'move' call_tmp[778120](778067 call wrapped _mt[243] _arg1[777977]))
    unknown call_tmp[778125] "expr temp" "maybe param" "maybe type" "temp"
    (778128 'move' call_tmp[778125](778071 call wrapped _mt[243] _arg2[777978]))
    unknown call_tmp[778130] "expr temp" "maybe param" "maybe type" "temp"
    (778133 'move' call_tmp[778130](778075 call != call_tmp[778120] call_tmp[778125]))
    if call_tmp[778130]
    {
      (778108 'move' ret[778103](778107 'deref' 0))
      gotoReturn _end_==[778101] _end_==[778101]
    }
    unknown call_tmp[778135] "expr temp" "maybe param" "maybe type" "temp"
    (778138 'move' call_tmp[778135](778081 call isOwned _mt[243] _arg1[777977]))
    unknown call_tmp[778140] "expr temp" "maybe param" "maybe type" "temp"
    (778143 'move' call_tmp[778140](778085 call isOwned _mt[243] _arg2[777978]))
    unknown call_tmp[778145] "expr temp" "maybe param" "maybe type" "temp"
    (778148 'move' call_tmp[778145](778089 call != call_tmp[778135] call_tmp[778140]))
    if call_tmp[778145]
    {
      (778113 'move' ret[778103](778112 'deref' 0))
      gotoReturn _end_==[778101] _end_==[778101]
    }
    (778118 'move' ret[778103](778117 'deref' 1))
    label _end_==[778101]
    (778105 return ret[778103])
  }
  where {
    unknown call_tmp[778150] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778153 'move' call_tmp[778150](777981 'typeof' _arg1[777977]))
    unknown call_tmp[778155] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778158 'move' call_tmp[778155](777983 'typeof' _arg2[777978]))
    unknown call_tmp[778160] "expr temp" "maybe param" "maybe type" "temp"
    (778163 'move' call_tmp[778160](777985 call == call_tmp[778150] call_tmp[778155]))
    unknown call_tmp[778165] "expr temp" "maybe param" "maybe type" "temp"
    (778168 'move' call_tmp[778165](778061 call chpl_fields_are_comparable[777987] _arg1[777977] _arg2[777978]))
    (778065 '&' call_tmp[778160] call_tmp[778165])
  }
  function chpl_fields_are_comparable[778182](arg _arg1[778184]:_singlevar[87253](?), arg _arg2[778185]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778214]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778221] "expr temp" "maybe param" "maybe type" "temp"
    (778224 'move' call_tmp[778221](778188 call wrapped _mt[243] _arg1[778184]))
    unknown call_tmp[778226] "expr temp" "maybe param" "maybe type" "temp"
    (778229 'move' call_tmp[778226](778192 call wrapped _mt[243] _arg2[778185]))
    unknown call_tmp[778231] "expr temp" "maybe param" "maybe type" "temp"
    (778234 'move' call_tmp[778231](778196 'call resolves' c"!=" call_tmp[778221] call_tmp[778226]))
    unknown call_tmp[778236] "expr temp" "maybe param" "maybe type" "temp"
    (778239 'move' call_tmp[778236](778198 call isOwned _mt[243] _arg1[778184]))
    unknown call_tmp[778241] "expr temp" "maybe param" "maybe type" "temp"
    (778244 'move' call_tmp[778241](778202 call isOwned _mt[243] _arg2[778185]))
    unknown call_tmp[778246] "expr temp" "maybe param" "maybe type" "temp"
    (778249 'move' call_tmp[778246](778206 'call resolves' c"!=" call_tmp[778236] call_tmp[778241]))
    unknown call_tmp[778251] "expr temp" "maybe param" "maybe type" "temp"
    (778254 'move' call_tmp[778251](778208 '&' call_tmp[778231] call_tmp[778246]))
    (778219 'move' ret[778214](778218 'deref' call_tmp[778251]))
    (778216 return ret[778214])
  }
  function !=[778170](arg _arg1[778172]:_singlevar[87253](?), arg _arg2[778173]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778298]:bool[10] "RVV" "temp"
    unknown call_tmp[778315] "expr temp" "maybe param" "maybe type" "temp"
    (778318 'move' call_tmp[778315](778262 call wrapped _mt[243] _arg1[778172]))
    unknown call_tmp[778320] "expr temp" "maybe param" "maybe type" "temp"
    (778323 'move' call_tmp[778320](778266 call wrapped _mt[243] _arg2[778173]))
    unknown call_tmp[778325] "expr temp" "maybe param" "maybe type" "temp"
    (778328 'move' call_tmp[778325](778270 call != call_tmp[778315] call_tmp[778320]))
    if call_tmp[778325]
    {
      (778303 'move' ret[778298](778302 'deref' 1))
      gotoReturn _end_!=[778296] _end_!=[778296]
    }
    unknown call_tmp[778330] "expr temp" "maybe param" "maybe type" "temp"
    (778333 'move' call_tmp[778330](778276 call isOwned _mt[243] _arg1[778172]))
    unknown call_tmp[778335] "expr temp" "maybe param" "maybe type" "temp"
    (778338 'move' call_tmp[778335](778280 call isOwned _mt[243] _arg2[778173]))
    unknown call_tmp[778340] "expr temp" "maybe param" "maybe type" "temp"
    (778343 'move' call_tmp[778340](778284 call != call_tmp[778330] call_tmp[778335]))
    if call_tmp[778340]
    {
      (778308 'move' ret[778298](778307 'deref' 1))
      gotoReturn _end_!=[778296] _end_!=[778296]
    }
    (778313 'move' ret[778298](778312 'deref' 0))
    label _end_!=[778296]
    (778300 return ret[778298])
  }
  where {
    unknown call_tmp[778345] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778348 'move' call_tmp[778345](778176 'typeof' _arg1[778172]))
    unknown call_tmp[778350] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778353 'move' call_tmp[778350](778178 'typeof' _arg2[778173]))
    unknown call_tmp[778355] "expr temp" "maybe param" "maybe type" "temp"
    (778358 'move' call_tmp[778355](778180 call == call_tmp[778345] call_tmp[778350]))
    unknown call_tmp[778360] "expr temp" "maybe param" "maybe type" "temp"
    (778363 'move' call_tmp[778360](778256 call chpl_fields_are_comparable[778182] _arg1[778172] _arg2[778173]))
    (778260 '&' call_tmp[778355] call_tmp[778360])
  }
  function chpl_fields_are_comparable[778377](arg _arg1[778379]:_singlevar[87253](?), arg _arg2[778380]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778409]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778416] "expr temp" "maybe param" "maybe type" "temp"
    (778419 'move' call_tmp[778416](778383 call wrapped _mt[243] _arg1[778379]))
    unknown call_tmp[778421] "expr temp" "maybe param" "maybe type" "temp"
    (778424 'move' call_tmp[778421](778387 call wrapped _mt[243] _arg2[778380]))
    unknown call_tmp[778426] "expr temp" "maybe param" "maybe type" "temp"
    (778429 'move' call_tmp[778426](778391 'call resolves' c"<" call_tmp[778416] call_tmp[778421]))
    unknown call_tmp[778431] "expr temp" "maybe param" "maybe type" "temp"
    (778434 'move' call_tmp[778431](778393 call isOwned _mt[243] _arg1[778379]))
    unknown call_tmp[778436] "expr temp" "maybe param" "maybe type" "temp"
    (778439 'move' call_tmp[778436](778397 call isOwned _mt[243] _arg2[778380]))
    unknown call_tmp[778441] "expr temp" "maybe param" "maybe type" "temp"
    (778444 'move' call_tmp[778441](778401 'call resolves' c"<" call_tmp[778431] call_tmp[778436]))
    unknown call_tmp[778446] "expr temp" "maybe param" "maybe type" "temp"
    (778449 'move' call_tmp[778446](778403 '&' call_tmp[778426] call_tmp[778441]))
    (778414 'move' ret[778409](778413 'deref' call_tmp[778446]))
    (778411 return ret[778409])
  }
  function <[778365](arg _arg1[778367]:_singlevar[87253](?), arg _arg2[778368]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778523]:bool[10] "RVV" "temp"
    unknown call_tmp[778550] "expr temp" "maybe param" "maybe type" "temp"
    (778553 'move' call_tmp[778550](778457 call wrapped _mt[243] _arg1[778367]))
    unknown call_tmp[778555] "expr temp" "maybe param" "maybe type" "temp"
    (778558 'move' call_tmp[778555](778461 call wrapped _mt[243] _arg2[778368]))
    unknown call_tmp[778560] "expr temp" "maybe param" "maybe type" "temp"
    (778563 'move' call_tmp[778560](778465 call < call_tmp[778550] call_tmp[778555]))
    if call_tmp[778560]
    {
      (778528 'move' ret[778523](778527 'deref' 1))
      gotoReturn _end_<[778521] _end_<[778521]
    }
    unknown call_tmp[778565] "expr temp" "maybe param" "maybe type" "temp"
    (778568 'move' call_tmp[778565](778471 call wrapped _mt[243] _arg1[778367]))
    unknown call_tmp[778570] "expr temp" "maybe param" "maybe type" "temp"
    (778573 'move' call_tmp[778570](778475 call wrapped _mt[243] _arg2[778368]))
    unknown call_tmp[778575] "expr temp" "maybe param" "maybe type" "temp"
    (778578 'move' call_tmp[778575](778479 call > call_tmp[778565] call_tmp[778570]))
    if call_tmp[778575]
    {
      (778533 'move' ret[778523](778532 'deref' 0))
      gotoReturn _end_<[778521] _end_<[778521]
    }
    unknown call_tmp[778580] "expr temp" "maybe param" "maybe type" "temp"
    (778583 'move' call_tmp[778580](778485 call isOwned _mt[243] _arg1[778367]))
    unknown call_tmp[778585] "expr temp" "maybe param" "maybe type" "temp"
    (778588 'move' call_tmp[778585](778489 call isOwned _mt[243] _arg2[778368]))
    unknown call_tmp[778590] "expr temp" "maybe param" "maybe type" "temp"
    (778593 'move' call_tmp[778590](778493 call < call_tmp[778580] call_tmp[778585]))
    if call_tmp[778590]
    {
      (778538 'move' ret[778523](778537 'deref' 1))
      gotoReturn _end_<[778521] _end_<[778521]
    }
    unknown call_tmp[778595] "expr temp" "maybe param" "maybe type" "temp"
    (778598 'move' call_tmp[778595](778499 call isOwned _mt[243] _arg1[778367]))
    unknown call_tmp[778600] "expr temp" "maybe param" "maybe type" "temp"
    (778603 'move' call_tmp[778600](778503 call isOwned _mt[243] _arg2[778368]))
    unknown call_tmp[778605] "expr temp" "maybe param" "maybe type" "temp"
    (778608 'move' call_tmp[778605](778507 call > call_tmp[778595] call_tmp[778600]))
    if call_tmp[778605]
    {
      (778543 'move' ret[778523](778542 'deref' 0))
      gotoReturn _end_<[778521] _end_<[778521]
    }
    (778548 'move' ret[778523](778547 'deref' 0))
    label _end_<[778521]
    (778525 return ret[778523])
  }
  where {
    unknown call_tmp[778610] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778613 'move' call_tmp[778610](778371 'typeof' _arg1[778367]))
    unknown call_tmp[778615] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778618 'move' call_tmp[778615](778373 'typeof' _arg2[778368]))
    unknown call_tmp[778620] "expr temp" "maybe param" "maybe type" "temp"
    (778623 'move' call_tmp[778620](778375 call == call_tmp[778610] call_tmp[778615]))
    unknown call_tmp[778625] "expr temp" "maybe param" "maybe type" "temp"
    (778628 'move' call_tmp[778625](778451 call chpl_fields_are_comparable[778377] _arg1[778367] _arg2[778368]))
    (778455 '&' call_tmp[778620] call_tmp[778625])
  }
  function chpl_fields_are_comparable[778642](arg _arg1[778644]:_singlevar[87253](?), arg _arg2[778645]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778674]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778681] "expr temp" "maybe param" "maybe type" "temp"
    (778684 'move' call_tmp[778681](778648 call wrapped _mt[243] _arg1[778644]))
    unknown call_tmp[778686] "expr temp" "maybe param" "maybe type" "temp"
    (778689 'move' call_tmp[778686](778652 call wrapped _mt[243] _arg2[778645]))
    unknown call_tmp[778691] "expr temp" "maybe param" "maybe type" "temp"
    (778694 'move' call_tmp[778691](778656 'call resolves' c"<=" call_tmp[778681] call_tmp[778686]))
    unknown call_tmp[778696] "expr temp" "maybe param" "maybe type" "temp"
    (778699 'move' call_tmp[778696](778658 call isOwned _mt[243] _arg1[778644]))
    unknown call_tmp[778701] "expr temp" "maybe param" "maybe type" "temp"
    (778704 'move' call_tmp[778701](778662 call isOwned _mt[243] _arg2[778645]))
    unknown call_tmp[778706] "expr temp" "maybe param" "maybe type" "temp"
    (778709 'move' call_tmp[778706](778666 'call resolves' c"<=" call_tmp[778696] call_tmp[778701]))
    unknown call_tmp[778711] "expr temp" "maybe param" "maybe type" "temp"
    (778714 'move' call_tmp[778711](778668 '&' call_tmp[778691] call_tmp[778706]))
    (778679 'move' ret[778674](778678 'deref' call_tmp[778711]))
    (778676 return ret[778674])
  }
  function <=[778630](arg _arg1[778632]:_singlevar[87253](?), arg _arg2[778633]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778788]:bool[10] "RVV" "temp"
    unknown call_tmp[778815] "expr temp" "maybe param" "maybe type" "temp"
    (778818 'move' call_tmp[778815](778722 call wrapped _mt[243] _arg1[778632]))
    unknown call_tmp[778820] "expr temp" "maybe param" "maybe type" "temp"
    (778823 'move' call_tmp[778820](778726 call wrapped _mt[243] _arg2[778633]))
    unknown call_tmp[778825] "expr temp" "maybe param" "maybe type" "temp"
    (778828 'move' call_tmp[778825](778730 call < call_tmp[778815] call_tmp[778820]))
    if call_tmp[778825]
    {
      (778793 'move' ret[778788](778792 'deref' 1))
      gotoReturn _end_<=[778786] _end_<=[778786]
    }
    unknown call_tmp[778830] "expr temp" "maybe param" "maybe type" "temp"
    (778833 'move' call_tmp[778830](778736 call wrapped _mt[243] _arg1[778632]))
    unknown call_tmp[778835] "expr temp" "maybe param" "maybe type" "temp"
    (778838 'move' call_tmp[778835](778740 call wrapped _mt[243] _arg2[778633]))
    unknown call_tmp[778840] "expr temp" "maybe param" "maybe type" "temp"
    (778843 'move' call_tmp[778840](778744 call > call_tmp[778830] call_tmp[778835]))
    if call_tmp[778840]
    {
      (778798 'move' ret[778788](778797 'deref' 0))
      gotoReturn _end_<=[778786] _end_<=[778786]
    }
    unknown call_tmp[778845] "expr temp" "maybe param" "maybe type" "temp"
    (778848 'move' call_tmp[778845](778750 call isOwned _mt[243] _arg1[778632]))
    unknown call_tmp[778850] "expr temp" "maybe param" "maybe type" "temp"
    (778853 'move' call_tmp[778850](778754 call isOwned _mt[243] _arg2[778633]))
    unknown call_tmp[778855] "expr temp" "maybe param" "maybe type" "temp"
    (778858 'move' call_tmp[778855](778758 call < call_tmp[778845] call_tmp[778850]))
    if call_tmp[778855]
    {
      (778803 'move' ret[778788](778802 'deref' 1))
      gotoReturn _end_<=[778786] _end_<=[778786]
    }
    unknown call_tmp[778860] "expr temp" "maybe param" "maybe type" "temp"
    (778863 'move' call_tmp[778860](778764 call isOwned _mt[243] _arg1[778632]))
    unknown call_tmp[778865] "expr temp" "maybe param" "maybe type" "temp"
    (778868 'move' call_tmp[778865](778768 call isOwned _mt[243] _arg2[778633]))
    unknown call_tmp[778870] "expr temp" "maybe param" "maybe type" "temp"
    (778873 'move' call_tmp[778870](778772 call > call_tmp[778860] call_tmp[778865]))
    if call_tmp[778870]
    {
      (778808 'move' ret[778788](778807 'deref' 0))
      gotoReturn _end_<=[778786] _end_<=[778786]
    }
    (778813 'move' ret[778788](778812 'deref' 1))
    label _end_<=[778786]
    (778790 return ret[778788])
  }
  where {
    unknown call_tmp[778875] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778878 'move' call_tmp[778875](778636 'typeof' _arg1[778632]))
    unknown call_tmp[778880] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778883 'move' call_tmp[778880](778638 'typeof' _arg2[778633]))
    unknown call_tmp[778885] "expr temp" "maybe param" "maybe type" "temp"
    (778888 'move' call_tmp[778885](778640 call == call_tmp[778875] call_tmp[778880]))
    unknown call_tmp[778890] "expr temp" "maybe param" "maybe type" "temp"
    (778893 'move' call_tmp[778890](778716 call chpl_fields_are_comparable[778642] _arg1[778632] _arg2[778633]))
    (778720 '&' call_tmp[778885] call_tmp[778890])
  }
  function chpl_fields_are_comparable[778907](arg _arg1[778909]:_singlevar[87253](?), arg _arg2[778910]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778939]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778946] "expr temp" "maybe param" "maybe type" "temp"
    (778949 'move' call_tmp[778946](778913 call wrapped _mt[243] _arg1[778909]))
    unknown call_tmp[778951] "expr temp" "maybe param" "maybe type" "temp"
    (778954 'move' call_tmp[778951](778917 call wrapped _mt[243] _arg2[778910]))
    unknown call_tmp[778956] "expr temp" "maybe param" "maybe type" "temp"
    (778959 'move' call_tmp[778956](778921 'call resolves' c">" call_tmp[778946] call_tmp[778951]))
    unknown call_tmp[778961] "expr temp" "maybe param" "maybe type" "temp"
    (778964 'move' call_tmp[778961](778923 call isOwned _mt[243] _arg1[778909]))
    unknown call_tmp[778966] "expr temp" "maybe param" "maybe type" "temp"
    (778969 'move' call_tmp[778966](778927 call isOwned _mt[243] _arg2[778910]))
    unknown call_tmp[778971] "expr temp" "maybe param" "maybe type" "temp"
    (778974 'move' call_tmp[778971](778931 'call resolves' c">" call_tmp[778961] call_tmp[778966]))
    unknown call_tmp[778976] "expr temp" "maybe param" "maybe type" "temp"
    (778979 'move' call_tmp[778976](778933 '&' call_tmp[778956] call_tmp[778971]))
    (778944 'move' ret[778939](778943 'deref' call_tmp[778976]))
    (778941 return ret[778939])
  }
  function >[778895](arg _arg1[778897]:_singlevar[87253](?), arg _arg2[778898]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[779053]:bool[10] "RVV" "temp"
    unknown call_tmp[779080] "expr temp" "maybe param" "maybe type" "temp"
    (779083 'move' call_tmp[779080](778987 call wrapped _mt[243] _arg1[778897]))
    unknown call_tmp[779085] "expr temp" "maybe param" "maybe type" "temp"
    (779088 'move' call_tmp[779085](778991 call wrapped _mt[243] _arg2[778898]))
    unknown call_tmp[779090] "expr temp" "maybe param" "maybe type" "temp"
    (779093 'move' call_tmp[779090](778995 call > call_tmp[779080] call_tmp[779085]))
    if call_tmp[779090]
    {
      (779058 'move' ret[779053](779057 'deref' 1))
      gotoReturn _end_>[779051] _end_>[779051]
    }
    unknown call_tmp[779095] "expr temp" "maybe param" "maybe type" "temp"
    (779098 'move' call_tmp[779095](779001 call wrapped _mt[243] _arg1[778897]))
    unknown call_tmp[779100] "expr temp" "maybe param" "maybe type" "temp"
    (779103 'move' call_tmp[779100](779005 call wrapped _mt[243] _arg2[778898]))
    unknown call_tmp[779105] "expr temp" "maybe param" "maybe type" "temp"
    (779108 'move' call_tmp[779105](779009 call < call_tmp[779095] call_tmp[779100]))
    if call_tmp[779105]
    {
      (779063 'move' ret[779053](779062 'deref' 0))
      gotoReturn _end_>[779051] _end_>[779051]
    }
    unknown call_tmp[779110] "expr temp" "maybe param" "maybe type" "temp"
    (779113 'move' call_tmp[779110](779015 call isOwned _mt[243] _arg1[778897]))
    unknown call_tmp[779115] "expr temp" "maybe param" "maybe type" "temp"
    (779118 'move' call_tmp[779115](779019 call isOwned _mt[243] _arg2[778898]))
    unknown call_tmp[779120] "expr temp" "maybe param" "maybe type" "temp"
    (779123 'move' call_tmp[779120](779023 call > call_tmp[779110] call_tmp[779115]))
    if call_tmp[779120]
    {
      (779068 'move' ret[779053](779067 'deref' 1))
      gotoReturn _end_>[779051] _end_>[779051]
    }
    unknown call_tmp[779125] "expr temp" "maybe param" "maybe type" "temp"
    (779128 'move' call_tmp[779125](779029 call isOwned _mt[243] _arg1[778897]))
    unknown call_tmp[779130] "expr temp" "maybe param" "maybe type" "temp"
    (779133 'move' call_tmp[779130](779033 call isOwned _mt[243] _arg2[778898]))
    unknown call_tmp[779135] "expr temp" "maybe param" "maybe type" "temp"
    (779138 'move' call_tmp[779135](779037 call < call_tmp[779125] call_tmp[779130]))
    if call_tmp[779135]
    {
      (779073 'move' ret[779053](779072 'deref' 0))
      gotoReturn _end_>[779051] _end_>[779051]
    }
    (779078 'move' ret[779053](779077 'deref' 0))
    label _end_>[779051]
    (779055 return ret[779053])
  }
  where {
    unknown call_tmp[779140] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779143 'move' call_tmp[779140](778901 'typeof' _arg1[778897]))
    unknown call_tmp[779145] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779148 'move' call_tmp[779145](778903 'typeof' _arg2[778898]))
    unknown call_tmp[779150] "expr temp" "maybe param" "maybe type" "temp"
    (779153 'move' call_tmp[779150](778905 call == call_tmp[779140] call_tmp[779145]))
    unknown call_tmp[779155] "expr temp" "maybe param" "maybe type" "temp"
    (779158 'move' call_tmp[779155](778981 call chpl_fields_are_comparable[778907] _arg1[778897] _arg2[778898]))
    (778985 '&' call_tmp[779150] call_tmp[779155])
  }
  function chpl_fields_are_comparable[779172](arg _arg1[779174]:_singlevar[87253](?), arg _arg2[779175]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779204]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[779211] "expr temp" "maybe param" "maybe type" "temp"
    (779214 'move' call_tmp[779211](779178 call wrapped _mt[243] _arg1[779174]))
    unknown call_tmp[779216] "expr temp" "maybe param" "maybe type" "temp"
    (779219 'move' call_tmp[779216](779182 call wrapped _mt[243] _arg2[779175]))
    unknown call_tmp[779221] "expr temp" "maybe param" "maybe type" "temp"
    (779224 'move' call_tmp[779221](779186 'call resolves' c">=" call_tmp[779211] call_tmp[779216]))
    unknown call_tmp[779226] "expr temp" "maybe param" "maybe type" "temp"
    (779229 'move' call_tmp[779226](779188 call isOwned _mt[243] _arg1[779174]))
    unknown call_tmp[779231] "expr temp" "maybe param" "maybe type" "temp"
    (779234 'move' call_tmp[779231](779192 call isOwned _mt[243] _arg2[779175]))
    unknown call_tmp[779236] "expr temp" "maybe param" "maybe type" "temp"
    (779239 'move' call_tmp[779236](779196 'call resolves' c">=" call_tmp[779226] call_tmp[779231]))
    unknown call_tmp[779241] "expr temp" "maybe param" "maybe type" "temp"
    (779244 'move' call_tmp[779241](779198 '&' call_tmp[779221] call_tmp[779236]))
    (779209 'move' ret[779204](779208 'deref' call_tmp[779241]))
    (779206 return ret[779204])
  }
  function >=[779160](arg _arg1[779162]:_singlevar[87253](?), arg _arg2[779163]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[779318]:bool[10] "RVV" "temp"
    unknown call_tmp[779345] "expr temp" "maybe param" "maybe type" "temp"
    (779348 'move' call_tmp[779345](779252 call wrapped _mt[243] _arg1[779162]))
    unknown call_tmp[779350] "expr temp" "maybe param" "maybe type" "temp"
    (779353 'move' call_tmp[779350](779256 call wrapped _mt[243] _arg2[779163]))
    unknown call_tmp[779355] "expr temp" "maybe param" "maybe type" "temp"
    (779358 'move' call_tmp[779355](779260 call > call_tmp[779345] call_tmp[779350]))
    if call_tmp[779355]
    {
      (779323 'move' ret[779318](779322 'deref' 1))
      gotoReturn _end_>=[779316] _end_>=[779316]
    }
    unknown call_tmp[779360] "expr temp" "maybe param" "maybe type" "temp"
    (779363 'move' call_tmp[779360](779266 call wrapped _mt[243] _arg1[779162]))
    unknown call_tmp[779365] "expr temp" "maybe param" "maybe type" "temp"
    (779368 'move' call_tmp[779365](779270 call wrapped _mt[243] _arg2[779163]))
    unknown call_tmp[779370] "expr temp" "maybe param" "maybe type" "temp"
    (779373 'move' call_tmp[779370](779274 call < call_tmp[779360] call_tmp[779365]))
    if call_tmp[779370]
    {
      (779328 'move' ret[779318](779327 'deref' 0))
      gotoReturn _end_>=[779316] _end_>=[779316]
    }
    unknown call_tmp[779375] "expr temp" "maybe param" "maybe type" "temp"
    (779378 'move' call_tmp[779375](779280 call isOwned _mt[243] _arg1[779162]))
    unknown call_tmp[779380] "expr temp" "maybe param" "maybe type" "temp"
    (779383 'move' call_tmp[779380](779284 call isOwned _mt[243] _arg2[779163]))
    unknown call_tmp[779385] "expr temp" "maybe param" "maybe type" "temp"
    (779388 'move' call_tmp[779385](779288 call > call_tmp[779375] call_tmp[779380]))
    if call_tmp[779385]
    {
      (779333 'move' ret[779318](779332 'deref' 1))
      gotoReturn _end_>=[779316] _end_>=[779316]
    }
    unknown call_tmp[779390] "expr temp" "maybe param" "maybe type" "temp"
    (779393 'move' call_tmp[779390](779294 call isOwned _mt[243] _arg1[779162]))
    unknown call_tmp[779395] "expr temp" "maybe param" "maybe type" "temp"
    (779398 'move' call_tmp[779395](779298 call isOwned _mt[243] _arg2[779163]))
    unknown call_tmp[779400] "expr temp" "maybe param" "maybe type" "temp"
    (779403 'move' call_tmp[779400](779302 call < call_tmp[779390] call_tmp[779395]))
    if call_tmp[779400]
    {
      (779338 'move' ret[779318](779337 'deref' 0))
      gotoReturn _end_>=[779316] _end_>=[779316]
    }
    (779343 'move' ret[779318](779342 'deref' 1))
    label _end_>=[779316]
    (779320 return ret[779318])
  }
  where {
    unknown call_tmp[779405] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779408 'move' call_tmp[779405](779166 'typeof' _arg1[779162]))
    unknown call_tmp[779410] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779413 'move' call_tmp[779410](779168 'typeof' _arg2[779163]))
    unknown call_tmp[779415] "expr temp" "maybe param" "maybe type" "temp"
    (779418 'move' call_tmp[779415](779170 call == call_tmp[779405] call_tmp[779410]))
    unknown call_tmp[779420] "expr temp" "maybe param" "maybe type" "temp"
    (779423 'move' call_tmp[779420](779246 call chpl_fields_are_comparable[779172] _arg1[779162] _arg2[779163]))
    (779250 '&' call_tmp[779415] call_tmp[779420])
  }
  function =[779425](ref arg _arg1[779427]:_singlevar[87253](?), const?  ref arg _arg2[779428]:_singlevar[87253](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[779465] "expr temp" "maybe param" "maybe type" "temp"
    (779468 'move' call_tmp[779465](779438 call wrapped _mt[243] _arg1[779427]))
    unknown call_tmp[779472] "expr temp" "maybe param" "maybe type" "temp"
    (779475 'move' call_tmp[779472](779442 call wrapped _mt[243] _arg2[779428]))
    (779446 call = call_tmp[779465] call_tmp[779472])
    (779459 'end of statement')
    unknown call_tmp[779479] "expr temp" "maybe param" "maybe type" "temp"
    (779482 'move' call_tmp[779479](779448 call isOwned _mt[243] _arg1[779427]))
    unknown call_tmp[779486] "expr temp" "maybe param" "maybe type" "temp"
    (779489 'move' call_tmp[779486](779452 call isOwned _mt[243] _arg2[779428]))
    (779456 call = call_tmp[779479] call_tmp[779486])
    (779461 return _void[55])
  }
  where {
    unknown call_tmp[779491] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779494 'move' call_tmp[779491](779431 'typeof' _arg1[779427]))
    unknown call_tmp[779496] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779499 'move' call_tmp[779496](779433 'typeof' _arg2[779428]))
    (779435 call == call_tmp[779491] call_tmp[779496])
  }
  function chpl__defaultHash[779501](arg r[779503]:_singlevar[87253](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[779534] "RVV" "temp"
    unknown call_tmp[779541] "expr temp" "maybe param" "maybe type" "temp"
    (779544 'move' call_tmp[779541](779520 call isOwned _mt[243] r[779503]))
    unknown call_tmp[779546] "expr temp" "maybe param" "maybe type" "temp"
    (779549 'move' call_tmp[779546](779524 call chpl__defaultHash call_tmp[779541]))
    unknown call_tmp[779551] "expr temp" "maybe param" "maybe type" "temp"
    (779554 'move' call_tmp[779551](779511 call wrapped _mt[243] r[779503]))
    unknown call_tmp[779556] "expr temp" "maybe param" "maybe type" "temp"
    (779559 'move' call_tmp[779556](779515 call chpl__defaultHash call_tmp[779551]))
    unknown call_tmp[779561] "expr temp" "maybe param" "maybe type" "temp"
    (779564 'move' call_tmp[779561](779505 call valType _mt[243] r[779503]))
    unknown call_tmp[779566] "expr temp" "maybe param" "maybe type" "temp"
    (779569 'move' call_tmp[779566](779509 call chpl__defaultHash call_tmp[779561]))
    unknown call_tmp[779571] "expr temp" "maybe param" "maybe type" "temp"
    (779574 'move' call_tmp[779571](779517 call chpl__defaultHashCombine call_tmp[779556] call_tmp[779566] 2))
    unknown call_tmp[779576] "expr temp" "maybe param" "maybe type" "temp"
    (779579 'move' call_tmp[779576](779526 call chpl__defaultHashCombine call_tmp[779546] call_tmp[779571] 3))
    (779539 'move' ret[779534](779538 'deref' call_tmp[779576]))
    (779536 return ret[779534])
  }
  single type _singlevar[87253](?) unknown valType[86932] "type variable" unknown wrapped[86940](86938 call unmanaged _singlecls[415325](?) valType[86932]) val isOwned[86946]:bool[10] 1 bool[10]
  function isSingleType[87290](arg t[87287]:_singlevar[87253](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512901] "RVV" "param" "temp"
    (512906 'move' ret[512901](512905 'deref' 1))
    (512903 return ret[512901])
  }
  function isSingleType[87302](arg t[87300]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512910] "RVV" "param" "temp"
    (512915 'move' ret[512910](512914 'deref' 0))
    (512912 return ret[512910])
  }
  function _singlevar[87253](?).readFF[87313](arg _mt[87318]:_MT[238], arg this[87315]:_singlevar[87253](?) :
  _singlevar[87253](?)) : _unknown[51] "method"
  {
    unknown ret[512919] "RVV" "temp"
    unknown call_tmp[631415] "expr temp" "maybe param" "maybe type" "temp"
    (631418 'move' call_tmp[631415](358164 call wrapped _mt[243] this[87315]))
    unknown call_tmp[631422] "expr temp" "maybe param" "maybe type" "temp"
    (631425 'move' call_tmp[631422](87325 call(87321 call (partial) readFF _mt[243] call_tmp[631415])))
    (512924 'move' ret[512919](512923 'deref' call_tmp[631422]))
    (512921 return ret[512919])
  }
  function _singlevar[87253](?).readXX[87334](arg _mt[87339]:_MT[238], arg this[87336]:_singlevar[87253](?) :
  _singlevar[87253](?)) : _unknown[51] "method"
  {
    unknown ret[512928] "RVV" "temp"
    (87343 call chpl_task_yield)
    (476932 'end of statement')
    unknown call_tmp[631429] "expr temp" "maybe param" "maybe type" "temp"
    (631432 'move' call_tmp[631429](358169 call wrapped _mt[243] this[87336]))
    unknown call_tmp[631436] "expr temp" "maybe param" "maybe type" "temp"
    (631439 'move' call_tmp[631436](87351 call(87347 call (partial) readXX _mt[243] call_tmp[631429])))
    (512933 'move' ret[512928](512932 'deref' call_tmp[631436]))
    (512930 return ret[512928])
  }
  function _singlevar[87253](?).writeEF[87363](arg _mt[87368]:_MT[238], arg this[87365]:_singlevar[87253](?) :
  _singlevar[87253](?), arg x[87360] :
  (377315 call valType _mt[243] this[87365])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[631445] "expr temp" "maybe param" "maybe type" "temp"
    (631448 'move' call_tmp[631445](358174 call wrapped _mt[243] this[87365]))
    (87376 call(87371 call (partial) writeEF _mt[243] call_tmp[631445]) x[87360])
    (512935 return _void[55])
  }
  function _singlevar[87253](?).isFull[87384](arg _mt[87389]:_MT[238], arg this[87386]:_singlevar[87253](?) :
  _singlevar[87253](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[512939] "RVV" "temp"
    unknown call_tmp[631454] "expr temp" "maybe param" "maybe type" "temp"
    (631457 'move' call_tmp[631454](358179 call wrapped _mt[243] this[87386]))
    unknown call_tmp[631461] "expr temp" "maybe param" "maybe type" "temp"
    (631464 'move' call_tmp[631461](87392 call isFull _mt[243] call_tmp[631454]))
    (512944 'move' ret[512939](512943 'deref' call_tmp[631461]))
    (512941 return ret[512939])
  }
  function =[87410](ref arg lhs[87407]:_singlevar[87253](?), arg rhs[87413] :
  (460035 'query' lhs[87407] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[631468] "expr temp" "maybe param" "maybe type" "temp"
    (631471 'move' call_tmp[631468](87417 call wrapped _mt[243] lhs[87407]))
    (87425 call(87420 call (partial) writeEF _mt[243] call_tmp[631468]) rhs[87413])
    (512946 return _void[55])
  }
  function chpl__initCopy[87440](ref arg sv[87437]:_singlevar[87253](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[512950] "RVV" "temp"
    unknown call_tmp[631477] "expr temp" "maybe param" "maybe type" "temp"
    (631480 'move' call_tmp[631477](87447 call(87443 call (partial) readFF _mt[243] sv[87437])))
    (512955 'move' ret[512950](512954 'deref' call_tmp[631477]))
    (512952 return ret[512950])
  }
  function chpl__autoCopy[87459](const  ref arg rhs[87456]:_singlevar[87253](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[512959] "RVV" "temp"
    unknown call_tmp[631482] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (631485 'move' call_tmp[631482](747720 'new' _singlevar[87253](?) rhs[87456]))
    (512964 'move' ret[512959](512963 'deref' call_tmp[631482]))
    (512961 return ret[512959])
  }
  function chpl__maybeAutoDestroyed[87481](arg x[87478]:_singlevar[87253](?)) param : _unknown[51] "inline"
  {
    unknown ret[512968] "RVV" "param" "temp"
    (512973 'move' ret[512968](512972 'deref' 1))
    (512970 return ret[512968])
  }
  function chpl__autoDestroy[87498](arg x[87495]:_singlevar[87253](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[631489] "expr temp" "maybe param" "maybe type" "temp"
    (631492 'move' call_tmp[631489](87501 call isOwned _mt[243] x[87495]))
    unknown call_tmp[631494] "expr temp" "maybe param" "maybe type" "temp"
    (631497 'move' call_tmp[631494](87505 call == call_tmp[631489] 1))
    unknown call_tmp[631499] "expr temp" "maybe param" "maybe type" "temp"
    (631502 'move' call_tmp[631499](87515 call _cond_test call_tmp[631494]))
    if call_tmp[631499]
    {
      unknown call_tmp[631506] "expr temp" "maybe param" "maybe type" "temp"
      (631509 'move' call_tmp[631506](87508 call wrapped _mt[243] x[87495]))
      (87512 call chpl__delete call_tmp[631506])
    }
    (512975 return _void[55])
  }
  function chpl__readXX[87532](const  ref arg x[87529]:_singlevar[87253](?)) : _unknown[51] "no doc"
  {
    unknown ret[512979] "RVV" "temp"
    unknown call_tmp[631513] "expr temp" "maybe param" "maybe type" "temp"
    (631516 'move' call_tmp[631513](87539 call(87535 call (partial) readXX _mt[243] x[87529])))
    (512984 'move' ret[512979](512983 'deref' call_tmp[631513]))
    (512981 return ret[512979])
  }
  function _singlecls[87885](?).init[87563](arg _mt[87889]:_MT[238], arg this[87887]:_singlecls[87885](?), arg valType[87561]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460118] "temporary of super field" "temp"
    (460126 'move' super_tmp[460118](460119 '.v' this[87887] c"super"))
    (460122 call init _mt[243] super_tmp[460118])
    (476942 'end of statement')
    unknown tmp[460071] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491854] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[631518] "expr temp" "maybe param" "maybe type" "temp"
      (631521 'move' call_tmp[631518](460073 '.v' this[87887] c"super"))
      (491858 'move' call_type_tmp[491854](460076 'typeof' call_tmp[631518]))
    }
    (460077 'move' tmp[460071] call_type_tmp[491854])
    unknown call_tmp[631523] "maybe param" "maybe type" "temp"
    (631526 'move' call_tmp[631523](460082 'cast' tmp[460071] this[87887]))
    unknown chpl__thisAsParent[460079] "dead at end of block" "insert auto destroy" "temp"
    (541500 'init var' chpl__thisAsParent[460079] call_tmp[631523] tmp[460071])
    (460085 'setcid' chpl__thisAsParent[460079])
    (476943 'end of statement')
    unknown tmp[460087] "temp" "type variable"
    (460089 'move' tmp[460087] valType[87561])
    (460091 'init field' this[87887] c"valType" tmp[460087])
    (476944 'end of statement')
    unknown tmp[460095] "temp"
    unknown call_tmp[631528] "expr temp" "maybe param" "maybe type" "temp"
    (631531 'move' call_tmp[631528](460104 '.v' this[87887] c"valType"))
    (460098 'default init var' tmp[460095] call_tmp[631528])
    (460100 '.=' this[87887] c"value" tmp[460095])
    (476945 'end of statement')
    val tmp[460107]:chpl_single_aux_t[88055] "temp"
    (460110 'default init var' tmp[460107] chpl_single_aux_t[88055])
    (460112 '.=' this[87887] c"singleAux" tmp[460107])
    (476946 'end of statement')
    (460117 'setcid' this[87887])
    (476947 'end of statement')
    unknown call_tmp[631535] "expr temp" "maybe param" "maybe type" "temp"
    (631538 'move' call_tmp[631535](377336 call singleAux _mt[243] this[87887]))
    (87584 call chpl_single_initAux call_tmp[631535])
    (512986 return _void[55])
  }
  function _singlecls[87885](?).deinit[87590](arg _mt[87893]:_MT[238], arg this[87891]:_singlecls[87885](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631542] "expr temp" "maybe param" "maybe type" "temp"
    (631545 'move' call_tmp[631542](377341 call singleAux _mt[243] this[87891]))
    (87595 call chpl_single_destroyAux call_tmp[631542])
    (512988 return _void[55])
  }
  function _singlecls[87885](?).readFF[87602](arg _mt[87897]:_MT[238], arg this[87895]:_singlecls[87885](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512992] "RVV" "temp"
    unknown ret[87605] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631549] "expr temp" "maybe param" "maybe type" "temp"
    (631552 'move' call_tmp[631549](377346 call valType _mt[243] this[87895]))
    (541502 'default init var' ret[87605] call_tmp[631549])
    (87608 'end of statement')
    const tmp[87663] "const" "temp"
    unknown call_tmp[631554] "expr temp" "maybe param" "maybe type" "temp"
    (631557 'move' call_tmp[631554](87660 '_wide_get_locale' this[87895]))
    (87665 'move' tmp[87663](87661 'deref' call_tmp[631554]))
    (934446 call on_fn[934442] tmp[87663])
    function on_fn[934442](const in arg dummy_locale_arg[934444]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown localRet[87612] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541504] "maybe param" "maybe type" "temp"
        (541513 'move' type_tmp[541504](541510 call valType _mt[243] this[87895]))
        (541506 'init var split decl' localRet[87612] type_tmp[541504])
        (87615 'end of statement')
        (87619 call chpl_rmem_consist_release)
        (476950 'end of statement')
        unknown call_tmp[631563] "expr temp" "maybe param" "maybe type" "temp"
        (631566 'move' call_tmp[631563](87622 call isFull _mt[243] this[87895]))
        unknown call_tmp[631568] "expr temp" "maybe param" "maybe type" "temp"
        (631571 'move' call_tmp[631568](87646 call _cond_test call_tmp[631563]))
        if call_tmp[631568]
        {
          unknown call_tmp[631575] "maybe param" "maybe type" "temp"
          (631578 'move' call_tmp[631575](377358 call value _mt[243] this[87895]))
          (541515 'init var split init' localRet[87612] call_tmp[631575] type_tmp[541504])
          (476951 'end of statement' localRet[87612])
        }
        {
          unknown call_tmp[631582] "expr temp" "maybe param" "maybe type" "temp"
          (631585 'move' call_tmp[631582](377363 call singleAux _mt[243] this[87895]))
          (87633 call chpl_single_waitFullAndLock call_tmp[631582])
          (476953 'end of statement')
          unknown call_tmp[631589] "maybe param" "maybe type" "temp"
          (631592 'move' call_tmp[631589](377369 call value _mt[243] this[87895]))
          (541518 'init var split init' localRet[87612] call_tmp[631589] type_tmp[541504])
          (476954 'end of statement' localRet[87612])
          unknown call_tmp[631596] "expr temp" "maybe param" "maybe type" "temp"
          (631599 'move' call_tmp[631596](377374 call singleAux _mt[243] this[87895]))
          (87644 call chpl_single_markAndSignalFull call_tmp[631596])
        }
        (87653 call chpl_rmem_consist_acquire)
        (476957 'end of statement')
        (87657 call = ret[87605] localRet[87612])
        (476958 'end of statement' ret[87605] localRet[87612])
      }
      (934449 return _void[55])
    }
    {
    }
    (512997 'move' ret[512992](512996 'deref' ret[87605]))
    gotoReturn _end_readFF[512990] _end_readFF[512990]
    (476961 'end of statement' ret[87605])
    label _end_readFF[512990]
    (512994 return ret[512992])
  }
  function _singlecls[87885](?).readXX[87678](arg _mt[87901]:_MT[238], arg this[87899]:_singlecls[87885](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[513003] "RVV" "temp"
    unknown ret[87681] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631603] "expr temp" "maybe param" "maybe type" "temp"
    (631606 'move' call_tmp[631603](377382 call valType _mt[243] this[87899]))
    (541521 'default init var' ret[87681] call_tmp[631603])
    (87684 'end of statement')
    const tmp[87739] "const" "temp"
    unknown call_tmp[631608] "expr temp" "maybe param" "maybe type" "temp"
    (631611 'move' call_tmp[631608](87736 '_wide_get_locale' this[87899]))
    (87741 'move' tmp[87739](87737 'deref' call_tmp[631608]))
    (934455 call on_fn[934451] tmp[87739])
    function on_fn[934451](const in arg dummy_locale_arg[934453]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown localRet[87688] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541523] "maybe param" "maybe type" "temp"
        (541532 'move' type_tmp[541523](541529 call valType _mt[243] this[87899]))
        (541525 'init var split decl' localRet[87688] type_tmp[541523])
        (87691 'end of statement')
        (87695 call chpl_rmem_consist_release)
        (476963 'end of statement')
        unknown call_tmp[631617] "expr temp" "maybe param" "maybe type" "temp"
        (631620 'move' call_tmp[631617](87698 call isFull _mt[243] this[87899]))
        unknown call_tmp[631622] "expr temp" "maybe param" "maybe type" "temp"
        (631625 'move' call_tmp[631622](87722 call _cond_test call_tmp[631617]))
        if call_tmp[631622]
        {
          unknown call_tmp[631629] "maybe param" "maybe type" "temp"
          (631632 'move' call_tmp[631629](377394 call value _mt[243] this[87899]))
          (541534 'init var split init' localRet[87688] call_tmp[631629] type_tmp[541523])
          (476964 'end of statement' localRet[87688])
        }
        {
          unknown call_tmp[631636] "expr temp" "maybe param" "maybe type" "temp"
          (631639 'move' call_tmp[631636](377399 call singleAux _mt[243] this[87899]))
          (87709 call chpl_single_lock call_tmp[631636])
          (476966 'end of statement')
          unknown call_tmp[631643] "maybe param" "maybe type" "temp"
          (631646 'move' call_tmp[631643](377405 call value _mt[243] this[87899]))
          (541537 'init var split init' localRet[87688] call_tmp[631643] type_tmp[541523])
          (476967 'end of statement' localRet[87688])
          unknown call_tmp[631650] "expr temp" "maybe param" "maybe type" "temp"
          (631653 'move' call_tmp[631650](377410 call singleAux _mt[243] this[87899]))
          (87720 call chpl_single_unlock call_tmp[631650])
        }
        (87729 call chpl_rmem_consist_acquire)
        (476970 'end of statement')
        (87733 call = ret[87681] localRet[87688])
        (476971 'end of statement' ret[87681] localRet[87688])
      }
      (934458 return _void[55])
    }
    {
    }
    (513008 'move' ret[513003](513007 'deref' ret[87681]))
    gotoReturn _end_readXX[513001] _end_readXX[513001]
    (476974 'end of statement' ret[87681])
    label _end_readXX[513001]
    (513005 return ret[513003])
  }
  function _singlecls[87885](?).writeEF[87758](arg _mt[87905]:_MT[238], arg this[87903]:_singlecls[87885](?), arg val[87755] :
  (377418 call valType _mt[243] this[87903])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[87824] "const" "temp"
    unknown call_tmp[631657] "expr temp" "maybe param" "maybe type" "temp"
    (631660 'move' call_tmp[631657](87821 '_wide_get_locale' this[87903]))
    (87826 'move' tmp[87824](87822 'deref' call_tmp[631657]))
    (934464 call on_fn[934460] tmp[87824])
    function on_fn[934460](const in arg dummy_locale_arg[934462]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (87769 call chpl_rmem_consist_release)
        (476976 'end of statement')
        unknown call_tmp[631664] "expr temp" "maybe param" "maybe type" "temp"
        (631667 'move' call_tmp[631664](377426 call singleAux _mt[243] this[87903]))
        (87775 call chpl_single_lock call_tmp[631664])
        (476977 'end of statement')
        unknown call_tmp[631671] "expr temp" "maybe param" "maybe type" "temp"
        (631674 'move' call_tmp[631671](87778 call isFull _mt[243] this[87903]))
        unknown call_tmp[631676] "expr temp" "maybe param" "maybe type" "temp"
        (631679 'move' call_tmp[631676](87802 call _cond_test call_tmp[631671]))
        if call_tmp[631676]
        {
          (87800 call halt "single var already defined")
        }
        unknown call_tmp[631683] "expr temp" "maybe param" "maybe type" "temp"
        (631686 'move' call_tmp[631683](377431 call value _mt[243] this[87903]))
        (87809 call = call_tmp[631683] val[87755])
        (476979 'end of statement')
        unknown call_tmp[631690] "expr temp" "maybe param" "maybe type" "temp"
        (631693 'move' call_tmp[631690](377437 call singleAux _mt[243] this[87903]))
        (87815 call chpl_single_markAndSignalFull call_tmp[631690])
        (476980 'end of statement')
        (87819 call chpl_rmem_consist_acquire)
      }
      (934467 return _void[55])
    }
    {
    }
    (513012 return _void[55])
  }
  {
    (87764 call <(87761 'lifetime_of' this[87903])(87763 'lifetime_of' val[87755]))
  }
  function _singlecls[87885](?).isFull[87838](arg _mt[87909]:_MT[238], arg this[87907]:_singlecls[87885](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513016] "RVV" "temp"
    unknown b[87841] "dead at end of block" "insert auto destroy"
    (541540 'default init var' b[87841] bool[10])
    (87844 'end of statement')
    const tmp[87871] "const" "temp"
    unknown call_tmp[631695] "expr temp" "maybe param" "maybe type" "temp"
    (631698 'move' call_tmp[631695](87868 '_wide_get_locale' this[87907]))
    (87873 'move' tmp[87871](87869 'deref' call_tmp[631695]))
    (934473 call on_fn[934469] tmp[87871])
    function on_fn[934469](const in arg dummy_locale_arg[934471]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (87849 call chpl_rmem_consist_release)
        (476982 'end of statement')
        unknown call_tmp[631702] "expr temp" "maybe param" "maybe type" "temp"
        (631705 'move' call_tmp[631702](377444 call value _mt[243] this[87907]))
        unknown call_tmp[631707] "expr temp" "maybe param" "maybe type" "temp"
        (631710 'move' call_tmp[631707](87857 call c_ptrTo call_tmp[631702]))
        unknown call_tmp[631714] "expr temp" "maybe param" "maybe type" "temp"
        (631717 'move' call_tmp[631714](377449 call singleAux _mt[243] this[87907]))
        unknown call_tmp[631719] "expr temp" "maybe param" "maybe type" "temp"
        (631722 'move' call_tmp[631719](87860 call chpl_single_isFull call_tmp[631707] call_tmp[631714]))
        (87861 call = b[87841] call_tmp[631719])
        (476983 'end of statement' b[87841])
        (87866 call chpl_rmem_consist_acquire)
      }
      (934476 return _void[55])
    }
    {
    }
    (513021 'move' ret[513016](513020 'deref' b[87841]))
    gotoReturn _end_isFull[513014] _end_isFull[513014]
    (476986 'end of statement' b[87841])
    label _end_isFull[513014]
    (513018 return ret[513016])
  }
  function _singlecls[87885](?).super[779581](arg _mt[779583]:_MT[238], arg this[779585]:_singlecls[87885](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779595] "RVV" "temp"
    unknown call_tmp[779602] "expr temp" "maybe param" "maybe type" "temp"
    (779605 'move' call_tmp[779602](779589 '.v' this[779585] c"super"))
    (779600 'move' ret[779595](779599 'deref' call_tmp[779602]))
    (779597 return ret[779595])
  }
  function _singlecls[779612](?).valType[779607](arg _mt[779609]:_MT[238], arg this[779614]:_singlecls[779612](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779649] "RVV" "temp" "type variable"
    unknown borrowOfThis[779616]
    (779641 'end of statement')
    (779618 'move' borrowOfThis[779616](779621 call _cast _borrowedNonNilable[214](?) this[779614]))
    (779642 'end of statement' borrowOfThis[779616])
    unknown call_tmp[779663] "expr temp" "maybe param" "maybe type" "temp"
    (779666 'move' call_tmp[779663](779631 'is bound' borrowOfThis[779616] c"valType"))
    if call_tmp[779663]
    {
      unknown call_tmp[779668] "expr temp" "maybe param" "maybe type" "temp"
      (779671 'move' call_tmp[779668](779626 '.v' borrowOfThis[779616] c"valType"))
      unknown call_tmp[779673] "expr temp" "maybe param" "maybe type" "temp"
      (779676 'move' call_tmp[779673](779627 call chpl_checkLegalTypeFieldAccessor this[779614] call_tmp[779668] "valType"))
      (779654 'move' ret[779649](779653 'deref' call_tmp[779673]))
      gotoReturn _end_valType[779647] _end_valType[779647]
      (779644 'end of statement' borrowOfThis[779616])
    }
    {
      (779659 'move' ret[779649](779658 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[779647] _end_valType[779647]
    }
    label _end_valType[779647]
    (779651 return ret[779649])
  }
  function _singlecls[779612](?).valType[779678](arg _mt[779680]:_MT[238], arg this[779682]:_singlecls[779612](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779717] "RVV" "temp" "type variable"
    unknown borrowOfThis[779684] "type variable"
    (779709 'end of statement')
    (779686 'move' borrowOfThis[779684](779689 call _cast _borrowedNonNilable[214](?) this[779682]))
    (779710 'end of statement' borrowOfThis[779684])
    unknown call_tmp[779731] "expr temp" "maybe param" "maybe type" "temp"
    (779734 'move' call_tmp[779731](779699 'is bound' borrowOfThis[779684] c"valType"))
    if call_tmp[779731]
    {
      unknown call_tmp[779736] "expr temp" "maybe param" "maybe type" "temp"
      (779739 'move' call_tmp[779736](779694 '.v' borrowOfThis[779684] c"valType"))
      unknown call_tmp[779741] "expr temp" "maybe param" "maybe type" "temp"
      (779744 'move' call_tmp[779741](779695 call chpl_checkLegalTypeFieldAccessor this[779682] call_tmp[779736] "valType"))
      (779722 'move' ret[779717](779721 'deref' call_tmp[779741]))
      gotoReturn _end_valType[779715] _end_valType[779715]
      (779712 'end of statement' borrowOfThis[779684])
    }
    {
      (779727 'move' ret[779717](779726 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[779715] _end_valType[779715]
    }
    label _end_valType[779715]
    (779719 return ret[779717])
  }
  function _singlecls[87885](?).value[779746](arg _mt[779748]:_MT[238], arg this[779750]:_singlecls[87885](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779760] "RVV" "temp"
    unknown call_tmp[779767] "expr temp" "maybe param" "maybe type" "temp"
    (779770 'move' call_tmp[779767](779754 '.' this[779750] c"value"))
    (779765 'move' ret[779760](779764 'addr of' call_tmp[779767]))
    (779762 return ret[779760])
  }
  function _singlecls[87885](?).singleAux[779772](arg _mt[779774]:_MT[238], arg this[779776]:_singlecls[87885](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779786] "RVV" "temp"
    unknown call_tmp[779793] "expr temp" "maybe param" "maybe type" "temp"
    (779796 'move' call_tmp[779793](779780 '.' this[779776] c"singleAux"))
    (779791 'move' ret[779786](779790 'addr of' call_tmp[779793]))
    (779788 return ret[779786])
  }
  function _singlecls[87885](?).writeThis[779798](arg _mt[779802]:_MT[238], arg this[779800]:_singlecls[87885](?), arg f[779801]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (779807 call writeThisDefaultImpl f[779801] this[779800])
    (779812 return _void[55])
  }
  function _singlecls[87885](?).readThis[779814](arg _mt[779818]:_MT[238], arg this[779816]:_singlecls[87885](?), arg f[779817]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (779822 call readThisDefaultImpl f[779817] this[779816])
    (779828 return _void[55])
  }
  type _singlecls[87885](?) val super[355548]:object[22] "super class" unknown valType[87546] "type variable" unknown value[87550] valType[87546] val singleAux[87555]:chpl_single_aux_t[88055] chpl_single_aux_t[88055]
  type _singlecls[779612](?)
  type unmanaged _singlecls[415325](?)
  type _singlecls[377267](?)
  function isSingleValue[87918](arg x[87915]:_singlevar[87253](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513027] "RVV" "param" "temp"
    (513032 'move' ret[513027](513031 'deref' 1))
    (513029 return ret[513027])
  }
  function isSingleValue[87930](arg x[87928]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513036] "RVV" "param" "temp"
    (513041 'move' ret[513036](513040 'deref' 0))
    (513038 return ret[513036])
  }
  (354974 'used modules list'(84290 'use' ChapelStandard[20264])(84294 'use' AlignedTSupport[88354])(84297 'use' MemConsistency[186602])(84300 'use' SyncVarRuntimeSupport[87940]))
}