AST dump for DefaultSparse after pass createTaskFunctions.
Module use list: ChapelStandard RangeChunk DSIUtil Search Sort 

{
  function chpl__init_DefaultSparse[415913]() : void[4] "insert line file info" "module init"
  {
    (544053 'init var' debugDefaultSparse[161565] 0)
    (161568 'end of statement')
    (521778 return _void[55])
  }
  unknown debugDefaultSparse[161565] "config" "param"
  function DefaultSparseDom[164332](?).linksDistribution[161600](arg _mt[164336]:_MT[238], arg this[164334]:DefaultSparseDom[164332](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521262] "RVV" "param" "temp"
    (521267 'move' ret[521262](521266 'deref' 0))
    (521264 return ret[521262])
  }
  function DefaultSparseDom[164332](?).dsiLinksDistribution[161610](arg _mt[164340]:_MT[238], arg this[164338]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521271] "RVV" "temp"
    (521276 'move' ret[521271](521275 'deref' 0))
    (521273 return ret[521271])
  }
  function DefaultSparseDom[164332](?).init[161622](arg _mt[164344]:_MT[238], arg this[164342]:DefaultSparseDom[164332](?), param arg rank[161620]:_any[178](?), arg idxType[161624]:_any[178](?), arg dist[161628]:unmanaged DefaultDist[415355], arg parentDom[161632]:_domain[125902](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462064] "temporary of super field" "temp"
    (462066 'move' super_tmp[462064](462063 '.v' this[164342] c"super"))
    (161643 call(161636 call (partial) init _mt[243] super_tmp[462064]) rank[161620] idxType[161624] parentDom[161632])
    (482389 'end of statement')
    unknown tmp[462069] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492360] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[675553] "expr temp" "maybe param" "maybe type" "temp"
      (675556 'move' call_tmp[675553](462071 '.v' this[164342] c"super"))
      (492364 'move' call_type_tmp[492360](462074 'typeof' call_tmp[675553]))
    }
    (462075 'move' tmp[462069] call_type_tmp[492360])
    unknown call_tmp[675558] "maybe param" "maybe type" "temp"
    (675561 'move' call_tmp[675558](462080 'cast' tmp[462069] this[164342]))
    unknown chpl__thisAsParent[462077] "dead at end of block" "insert auto destroy" "temp"
    (544055 'init var' chpl__thisAsParent[462077] call_tmp[675558] tmp[462069])
    (462083 'setcid' chpl__thisAsParent[462077])
    (482390 'end of statement')
    unknown tmp[462085] "temp"
    (462088 'init var' tmp[462085] dist[161628] unmanaged DefaultDist[415355])
    (462090 'init field' this[164342] c"dist" tmp[462085])
    (482391 'end of statement')
    unknown tmp[462096] "temp"
    (462098 'init var' tmp[462096] 0)
    (462100 '.=' this[164342] c"_nnz" tmp[462096])
    (482392 'end of statement')
    unknown tmp[462104] "temp"
    unknown call_tmp[675563] "expr temp" "maybe param" "maybe type" "temp"
    (675566 'move' call_tmp[675563](462121 '.' this[164342] c"nnzDom"))
    unknown call_tmp[675568] "expr temp" "maybe param" "maybe type" "temp"
    (675571 'move' call_tmp[675568](462109 call chpl__ensureDomainExpr call_tmp[675563]))
    unknown call_tmp[675573] "expr temp" "maybe param" "maybe type" "temp"
    (675576 'move' call_tmp[675573](462124 '.v' this[164342] c"rank"))
    unknown call_tmp[675578] "expr temp" "maybe param" "maybe type" "temp"
    (675581 'move' call_tmp[675578](462127 '.v' this[164342] c"idxType"))
    unknown call_tmp[675583] "expr temp" "maybe param" "maybe type" "temp"
    (675586 'move' call_tmp[675583](462112 call chpl__buildIndexType call_tmp[675573] call_tmp[675578]))
    unknown call_tmp[675588] "expr temp" "maybe param" "maybe type" "temp"
    (675591 'move' call_tmp[675588](462107 call chpl__buildArrayRuntimeType call_tmp[675568] call_tmp[675583]))
    (462115 'default init var' tmp[462104] call_tmp[675588])
    (462117 '.=' this[164342] c"_indices" tmp[462104])
    (482393 'end of statement')
    (462130 'setcid' this[164342])
    (521278 return _void[55])
  }
  function DefaultSparseDom[164332](?).getNNZ[161658](arg _mt[164348]:_MT[238], arg this[164346]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521282] "RVV" "temp"
    unknown call_tmp[675595] "expr temp" "maybe param" "maybe type" "temp"
    (675598 'move' call_tmp[675595](387334 call _nnz _mt[243] this[164346]))
    (521288 'move' ret[521282](521287 'coerce' call_tmp[675595] int(64)[13]))
    (521284 return ret[521282])
  }
  { scopeless type
    int(64)[13]
  }
  function DefaultSparseDom[164332](?).dsiBuildArray[161672](arg _mt[164352]:_MT[238], arg this[164350]:DefaultSparseDom[164332](?), arg eltType[161670]:_any[178](?), param arg initElts[161675]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521292] "RVV" "temp"
    unknown call_tmp[675602] "expr temp" "maybe param" "maybe type" "temp"
    (675605 'move' call_tmp[675602](387344 call rank _mt[243] this[164350]))
    unknown call_tmp[675609] "expr temp" "maybe param" "maybe type" "temp"
    (675612 'move' call_tmp[675609](387349 call idxType _mt[243] this[164350]))
    unknown call_tmp[675614] "expr temp" "maybe param" "maybe type" "temp"
    (675617 'move' call_tmp[675614](161692 call _to_unmanaged this[164350]))
    unknown call_tmp[675619] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675622 'move' call_tmp[675619](747881 'new' DefaultSparseArr[387338](?)(eltType = eltType[161670])(rank = call_tmp[675602])(idxType = call_tmp[675609])(dom = call_tmp[675614])(initElts = initElts[161675])(_chpl_manager = unmanaged[220](?))))
    (521297 'move' ret[521292](521296 'deref' call_tmp[675619]))
    (521294 return ret[521292])
  }
  function DefaultSparseDom[164332](?).dsiIndsIterSafeForRemoving[161704](arg _mt[164356]:_MT[238], arg this[164354]:DefaultSparseDom[164332](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521301] "RVV" "temp"
    {
      unknown _indexOfInterest[161723] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161724] "expr temp" "temp"
      unknown call_tmp[675626] "expr temp" "maybe param" "maybe type" "temp"
      (675629 'move' call_tmp[675626](387362 call _nnz _mt[243] this[164354]))
      unknown call_tmp[675631] "expr temp" "maybe param" "maybe type" "temp"
      (675634 'move' call_tmp[675631](161740 call - 1))
      unknown call_tmp[675636] "expr temp" "maybe param" "maybe type" "temp"
      (675639 'move' call_tmp[675636](161744 call chpl_direct_range_iter 1 call_tmp[675626] call_tmp[675631]))
      (161733 'move' _iterator[161724](161731 call _getIterator call_tmp[675636]))
      Defer
      {
        {
          (161760 call _freeIterator _iterator[161724])
        }
      }
      { scopeless type
        (161749 'move' _indexOfInterest[161723](161746 call iteratorIndex _iterator[161724]))
      }
      ForLoop[161725]
      {
        unknown i[161753] "index var" "insert auto destroy"
        (482398 'end of statement')
        (161755 'move' i[161753] _indexOfInterest[161723])
        (482399 'end of statement' i[161753])
        {
          unknown yret[521305] "YVV" "temp"
          unknown call_tmp[675643] "expr temp" "maybe param" "maybe type" "temp"
          (675646 'move' call_tmp[675643](161719 call(387356 call (partial) _indices _mt[243] this[164354]) i[161753]))
          (521308 'move' yret[521305](521307 'deref' call_tmp[675643]))
          (521310 yield yret[521305])
          (482401 'end of statement' i[161753])
        }
        label _continueLabel[161728]
        _indexOfInterest[161723]
        _iterator[161724]
      }
      label _breakLabel[161729]
    }
    (521303 return ret[521301])
  }
  function DefaultSparseDom[164332](?).these[161772](arg _mt[164360]:_MT[238], arg this[164358]:DefaultSparseDom[164332](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521314] "RVV" "temp"
    {
      unknown _indexOfInterest[161786] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161787] "expr temp" "temp"
      unknown call_tmp[675650] "expr temp" "maybe param" "maybe type" "temp"
      (675653 'move' call_tmp[675650](387373 call _nnz _mt[243] this[164358]))
      unknown call_tmp[675655] "expr temp" "maybe param" "maybe type" "temp"
      (675658 'move' call_tmp[675655](161801 call chpl_direct_range_iter 1 call_tmp[675650] 1))
      (161796 'move' _iterator[161787](161794 call _getIterator call_tmp[675655]))
      Defer
      {
        {
          (161817 call _freeIterator _iterator[161787])
        }
      }
      { scopeless type
        (161806 'move' _indexOfInterest[161786](161803 call iteratorIndex _iterator[161787]))
      }
      ForLoop[161788]
      {
        unknown i[161810] "index var" "insert auto destroy"
        (482404 'end of statement')
        (161812 'move' i[161810] _indexOfInterest[161786])
        (482405 'end of statement' i[161810])
        {
          unknown yret[521318] "YVV" "temp"
          unknown call_tmp[675662] "expr temp" "maybe param" "maybe type" "temp"
          (675665 'move' call_tmp[675662](161782 call(387367 call (partial) _indices _mt[243] this[164358]) i[161810]))
          (521321 'move' yret[521318](521320 'deref' call_tmp[675662]))
          (521323 yield yret[521318])
          (482407 'end of statement' i[161810])
        }
        label _continueLabel[161791]
        _indexOfInterest[161786]
        _iterator[161787]
      }
      label _breakLabel[161792]
    }
    (521316 return ret[521314])
  }
  function DefaultSparseDom[164332](?).these[161833](arg _mt[164364]:_MT[238], arg this[164362]:DefaultSparseDom[164332](?), param arg tag[161830]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521327] "RVV" "temp"
    unknown call_tmp[675669] "maybe param" "maybe type" "temp"
    (675672 'move' call_tmp[675669](387380 call _nnz _mt[243] this[164362]))
    const numElems[161843] "dead at end of block" "const" "insert auto destroy"
    (544057 'init var' numElems[161843] call_tmp[675669])
    (161846 'end of statement')
    unknown call_tmp[675674] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (675677 'move' call_tmp[675674](161853 'typeof' numElems[161843]))
    unknown call_tmp[675679] "expr temp" "maybe param" "maybe type" "temp"
    (675682 'move' call_tmp[675679](161851 call _computeNumChunks numElems[161843]))
    unknown call_tmp[675684] "maybe param" "maybe type" "temp"
    (675687 'move' call_tmp[675684](161854 call _cast call_tmp[675674] call_tmp[675679]))
    const numChunks[161856] "dead at end of block" "const" "insert auto destroy"
    (544059 'init var' numChunks[161856] call_tmp[675684])
    (161859 'end of statement' numElems[161843] numElems[161843])
    unknown call_tmp[675689] "expr temp" "maybe param" "maybe type" "temp"
    (675692 'move' call_tmp[675689](161919 call _cond_test debugDefaultSparse[161565]))
    if call_tmp[675689]
    {
      (161916 call writeln "DefaultSparseDom standalone: " numChunks[161856] " chunks, " numElems[161843] " elems")
      (482411 'end of statement' numChunks[161856] numElems[161843])
    }
    unknown call_tmp[675694] "expr temp" "maybe param" "maybe type" "temp"
    (675697 'move' call_tmp[675694](161925 call <= numChunks[161856] 1))
    unknown call_tmp[675699] "expr temp" "maybe param" "maybe type" "temp"
    (675702 'move' call_tmp[675699](162229 call _cond_test call_tmp[675694]))
    if call_tmp[675699]
    {
      {
        unknown _indexOfInterest[161939] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[161940] "expr temp" "temp"
        unknown call_tmp[675704] "expr temp" "maybe param" "maybe type" "temp"
        (675707 'move' call_tmp[675704](161954 call chpl_direct_range_iter 1 numElems[161843] 1))
        (161949 'move' _iterator[161940](161947 call _getIterator call_tmp[675704]))
        Defer
        {
          {
            (161970 call _freeIterator _iterator[161940])
          }
        }
        { scopeless type
          (161959 'move' _indexOfInterest[161939](161956 call iteratorIndex _iterator[161940]))
        }
        ForLoop[161941]
        {
          unknown i[161963] "index var" "insert auto destroy"
          (482415 'end of statement')
          (161965 'move' i[161963] _indexOfInterest[161939])
          (482416 'end of statement' i[161963])
          {
            unknown yret[521331] "YVV" "temp"
            unknown call_tmp[675711] "expr temp" "maybe param" "maybe type" "temp"
            (675714 'move' call_tmp[675711](161935 call(387391 call (partial) _indices _mt[243] this[164362]) i[161963]))
            (521334 'move' yret[521331](521333 'deref' call_tmp[675711]))
            (521336 yield yret[521331])
            (482418 'end of statement' i[161963])
          }
          label _continueLabel[161944]
          _indexOfInterest[161939]
          _iterator[161940]
        }
        label _breakLabel[161945]
      }
    }
    {
      {
        unknown tmpIter[162032] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[675716] "expr temp" "maybe param" "maybe type" "temp"
        (675719 'move' call_tmp[675716](161985 call chpl_build_bounded_range 1 numElems[161843]))
        (162035 'move' tmpIter[162032](161989 call chunks module=[255] RangeChunk[266370] call_tmp[675716] numChunks[161856]))
        unknown isRngDomArr[162209] "maybe param" "temp"
        unknown tmp[428008] "maybe param" "temp"
        (428019 'move' tmp[428008](162211 call isBoundedRange tmpIter[162032]))
        unknown call_tmp[675721] "expr temp" "maybe param" "maybe type" "temp"
        (675724 'move' call_tmp[675721](428021 call _cond_invalid tmp[428008]))
        if call_tmp[675721]
        {
          (428024 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570028] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570029] "maybe param" "temp"
        unknown call_tmp[675726] "expr temp" "maybe param" "maybe type" "temp"
        (675729 'move' call_tmp[675726](428009 call isTrue tmp[428008]))
        (570034 'move' tmp[570029](570032 call _cond_test call_tmp[675726]))
        if tmp[570029]
        {
          (570039 'move' tmp[570028](570036 '_paramFoldLogical' tmp[570029] 1))
        }
        {
          unknown tmp[428029] "maybe param" "temp"
          (428040 'move' tmp[428029](162214 call isDomain tmpIter[162032]))
          unknown call_tmp[675731] "expr temp" "maybe param" "maybe type" "temp"
          (675734 'move' call_tmp[675731](428042 call _cond_invalid tmp[428029]))
          if call_tmp[675731]
          {
            (428045 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[570001] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570002] "maybe param" "temp"
          unknown call_tmp[675736] "expr temp" "maybe param" "maybe type" "temp"
          (675739 'move' call_tmp[675736](428030 call isTrue tmp[428029]))
          (570007 'move' tmp[570002](570005 call _cond_test call_tmp[675736]))
          if tmp[570002]
          {
            (570012 'move' tmp[570001](570009 '_paramFoldLogical' tmp[570002] 1))
          }
          {
            unknown tmp[570014] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[675741] "expr temp" "maybe param" "maybe type" "temp"
            (675744 'move' call_tmp[675741](162217 call isArray tmpIter[162032]))
            (570016 'move' tmp[570014](428034 call isTrue call_tmp[675741]))
            (570021 'move' tmp[570001](570018 '_paramFoldLogical' tmp[570002] tmp[570014]))
          }
          unknown tmp[570041] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (570043 'move' tmp[570041](428013 call isTrue tmp[570001]))
          (570048 'move' tmp[570028](570045 '_paramFoldLogical' tmp[570029] tmp[570041]))
        }
        (162224 'move' isRngDomArr[162209] tmp[570028])
        if isRngDomArr[162209]
        {
          const _coforallCount[162076] "const" "end count" "temp"
          (162145 'move' _coforallCount[162076](162142 call _endCountAlloc 1))
          unknown numTasks[162077] "temp"
          (162129 'move' numTasks[162077](162125 call size _mt[243] tmpIter[162032]))
          (162120 call _upEndCount _coforallCount[162076] 1 numTasks[162077])
          (482421 'end of statement')
          (162117 call chpl_resetTaskSpawn numTasks[162077])
          (482422 'end of statement')
          unknown _indexOfInterest[162084] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162085] "expr temp" "temp"
          (162094 'move' _iterator[162085](162092 call _getIterator tmpIter[162032]))
          Defer
          {
            {
              (162110 call _freeIterator _iterator[162085])
            }
          }
          { scopeless type
            (162099 'move' _indexOfInterest[162084](162096 call iteratorIndex _iterator[162085]))
          }
          ForLoop[162086]
          {
            unknown chunk[162103] "coforall index var" "index var" "insert auto destroy"
            (482424 'end of statement')
            (162105 'move' chunk[162103] _indexOfInterest[162084])
            (482425 'end of statement' chunk[162103])
            (935209 call coforall_fn[935207])
            function coforall_fn[935207]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[162038] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162040] "expr temp" "temp"
                (162042 'move' _iterator[162040](162045 call _getIterator chunk[162103]))
                Defer
                {
                  {
                    (162049 call _freeIterator _iterator[162040])
                  }
                }
                { scopeless type
                  (162053 'move' _indexOfInterest[162038](162056 call iteratorIndex _iterator[162040]))
                }
                ForLoop[162058]
                {
                  unknown i[162061] "index var" "insert auto destroy"
                  (482428 'end of statement')
                  (162063 'move' i[162061] _indexOfInterest[162038])
                  (482429 'end of statement' i[162061])
                  unknown yret[521338] "YVV" "temp"
                  unknown call_tmp[675750] "expr temp" "maybe param" "maybe type" "temp"
                  (675753 'move' call_tmp[675750](162069 call(387408 call (partial) _indices _mt[243] this[164362]) i[162061]))
                  (521341 'move' yret[521338](521340 'deref' call_tmp[675750]))
                  (521343 yield yret[521338])
                  (482431 'end of statement' i[162061])
                  label _continueLabel[162071]
                  _indexOfInterest[162038]
                  _iterator[162040]
                }
                label _breakLabel[162073]
              }
              (162079 call _downEndCount _coforallCount[162076] nil[44])
              (935212 return _void[55])
            }
            {
            }
            label _continueLabel[162089]
            _indexOfInterest[162084]
            _iterator[162085]
          }
          label _breakLabel[162090]
          Defer
          {
            {
              (162132 call _endCountFree _coforallCount[162076])
            }
          }
          (162137 call _waitEndCount _coforallCount[162076] 1 numTasks[162077])
        }
        {
          const _coforallCount[162149] "const" "end count" "temp"
          (162206 'move' _coforallCount[162149](162203 call _endCountAlloc 1))
          unknown _indexOfInterest[162157] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162158] "expr temp" "temp"
          (162167 'move' _iterator[162158](162165 call _getIterator tmpIter[162032]))
          Defer
          {
            {
              (162183 call _freeIterator _iterator[162158])
            }
          }
          { scopeless type
            (162172 'move' _indexOfInterest[162157](162169 call iteratorIndex _iterator[162158]))
          }
          ForLoop[162159]
          {
            unknown chunk[162176] "coforall index var" "index var" "insert auto destroy"
            (482437 'end of statement')
            (162178 'move' chunk[162176] _indexOfInterest[162157])
            (482438 'end of statement' chunk[162176])
            (162190 call _upEndCount _coforallCount[162149] 1)
            (482440 'end of statement')
            (935216 call coforall_fn[935214])
            function coforall_fn[935214]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[161998] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[161999] "expr temp" "temp"
                (162008 'move' _iterator[161999](162006 call _getIterator chunk[162176]))
                Defer
                {
                  {
                    (162024 call _freeIterator _iterator[161999])
                  }
                }
                { scopeless type
                  (162013 'move' _indexOfInterest[161998](162010 call iteratorIndex _iterator[161999]))
                }
                ForLoop[162000]
                {
                  unknown i[162017] "index var" "insert auto destroy"
                  (482442 'end of statement')
                  (162019 'move' i[162017] _indexOfInterest[161998])
                  (482443 'end of statement' i[162017])
                  unknown yret[521345] "YVV" "temp"
                  unknown call_tmp[675757] "expr temp" "maybe param" "maybe type" "temp"
                  (675760 'move' call_tmp[675757](161995 call(387401 call (partial) _indices _mt[243] this[164362]) i[162017]))
                  (521348 'move' yret[521345](521347 'deref' call_tmp[675757]))
                  (521350 yield yret[521345])
                  (482445 'end of statement' i[162017])
                  label _continueLabel[162003]
                  _indexOfInterest[161998]
                  _iterator[161999]
                }
                label _breakLabel[162004]
              }
              (162152 call _downEndCount _coforallCount[162149] nil[44])
              (935219 return _void[55])
            }
            {
            }
            label _continueLabel[162162]
            _indexOfInterest[162157]
            _iterator[162158]
          }
          label _breakLabel[162163]
          Defer
          {
            {
              (162194 call _endCountFree _coforallCount[162149])
            }
          }
          (162199 call _waitEndCount _coforallCount[162149] 1)
        }
        (361074 'referenced modules list' RangeChunk[266370])
      }
    }
    (521329 return ret[521327])
  }
  where {
    (161840 call == tag[161830] standalone[451])
  }
  function DefaultSparseDom[164332](?).these[162242](arg _mt[164368]:_MT[238], arg this[164366]:DefaultSparseDom[164332](?), param arg tag[162239]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521354] "RVV" "temp"
    unknown call_tmp[675764] "maybe param" "maybe type" "temp"
    (675767 'move' call_tmp[675764](387416 call _nnz _mt[243] this[164366]))
    const numElems[162252] "dead at end of block" "const" "insert auto destroy"
    (544061 'init var' numElems[162252] call_tmp[675764])
    (162255 'end of statement')
    unknown call_tmp[675769] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (675772 'move' call_tmp[675769](162262 'typeof' numElems[162252]))
    unknown call_tmp[675774] "expr temp" "maybe param" "maybe type" "temp"
    (675777 'move' call_tmp[675774](162260 call _computeNumChunks numElems[162252]))
    unknown call_tmp[675779] "maybe param" "maybe type" "temp"
    (675782 'move' call_tmp[675779](162263 call _cast call_tmp[675769] call_tmp[675774]))
    const numChunks[162265] "dead at end of block" "const" "insert auto destroy"
    (544063 'init var' numChunks[162265] call_tmp[675779])
    (162268 'end of statement' numElems[162252] numElems[162252])
    unknown call_tmp[675784] "expr temp" "maybe param" "maybe type" "temp"
    (675787 'move' call_tmp[675784](162295 call _cond_test debugDefaultSparse[161565]))
    if call_tmp[675784]
    {
      (162293 call writeln "DefaultSparseDom leader: " numChunks[162265] " chunks, " numElems[162252] " elems")
      (482452 'end of statement' numChunks[162265] numElems[162252])
    }
    unknown call_tmp[675789] "expr temp" "maybe param" "maybe type" "temp"
    (675792 'move' call_tmp[675789](162302 call <= numChunks[162265] 1))
    unknown call_tmp[675794] "expr temp" "maybe param" "maybe type" "temp"
    (675797 'move' call_tmp[675794](162509 call _cond_test call_tmp[675789]))
    if call_tmp[675794]
    {
      unknown yret[521358] "YVV" "temp"
      unknown call_tmp[675799] "expr temp" "maybe param" "maybe type" "temp"
      (675802 'move' call_tmp[675799](162308 call _build_tuple this[164366] 1 numElems[162252]))
      (521361 'move' yret[521358](521360 'deref' call_tmp[675799]))
      (521363 yield yret[521358])
      (482455 'end of statement' numElems[162252])
    }
    {
      unknown tmpIter[162338] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[675804] "expr temp" "maybe param" "maybe type" "temp"
      (675807 'move' call_tmp[675804](162319 call chpl_build_bounded_range 1 numElems[162252]))
      (162341 'move' tmpIter[162338](162323 call chunks module=[255] RangeChunk[266370] call_tmp[675804] numChunks[162265]))
      unknown isRngDomArr[162490] "maybe param" "temp"
      unknown tmp[428050] "maybe param" "temp"
      (428061 'move' tmp[428050](162492 call isBoundedRange tmpIter[162338]))
      unknown call_tmp[675809] "expr temp" "maybe param" "maybe type" "temp"
      (675812 'move' call_tmp[675809](428063 call _cond_invalid tmp[428050]))
      if call_tmp[675809]
      {
        (428066 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[570082] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[570083] "maybe param" "temp"
      unknown call_tmp[675814] "expr temp" "maybe param" "maybe type" "temp"
      (675817 'move' call_tmp[675814](428051 call isTrue tmp[428050]))
      (570088 'move' tmp[570083](570086 call _cond_test call_tmp[675814]))
      if tmp[570083]
      {
        (570093 'move' tmp[570082](570090 '_paramFoldLogical' tmp[570083] 1))
      }
      {
        unknown tmp[428071] "maybe param" "temp"
        (428082 'move' tmp[428071](162495 call isDomain tmpIter[162338]))
        unknown call_tmp[675819] "expr temp" "maybe param" "maybe type" "temp"
        (675822 'move' call_tmp[675819](428084 call _cond_invalid tmp[428071]))
        if call_tmp[675819]
        {
          (428087 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570055] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570056] "maybe param" "temp"
        unknown call_tmp[675824] "expr temp" "maybe param" "maybe type" "temp"
        (675827 'move' call_tmp[675824](428072 call isTrue tmp[428071]))
        (570061 'move' tmp[570056](570059 call _cond_test call_tmp[675824]))
        if tmp[570056]
        {
          (570066 'move' tmp[570055](570063 '_paramFoldLogical' tmp[570056] 1))
        }
        {
          unknown tmp[570068] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[675829] "expr temp" "maybe param" "maybe type" "temp"
          (675832 'move' call_tmp[675829](162498 call isArray tmpIter[162338]))
          (570070 'move' tmp[570068](428076 call isTrue call_tmp[675829]))
          (570075 'move' tmp[570055](570072 '_paramFoldLogical' tmp[570056] tmp[570068]))
        }
        unknown tmp[570095] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (570097 'move' tmp[570095](428055 call isTrue tmp[570055]))
        (570102 'move' tmp[570082](570099 '_paramFoldLogical' tmp[570083] tmp[570095]))
      }
      (162505 'move' isRngDomArr[162490] tmp[570082])
      if isRngDomArr[162490]
      {
        const _coforallCount[162357] "const" "end count" "temp"
        (162426 'move' _coforallCount[162357](162423 call _endCountAlloc 1))
        unknown numTasks[162358] "temp"
        (162410 'move' numTasks[162358](162406 call size _mt[243] tmpIter[162338]))
        (162401 call _upEndCount _coforallCount[162357] 1 numTasks[162358])
        (482458 'end of statement')
        (162398 call chpl_resetTaskSpawn numTasks[162358])
        (482459 'end of statement')
        unknown _indexOfInterest[162365] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162366] "expr temp" "temp"
        (162375 'move' _iterator[162366](162373 call _getIterator tmpIter[162338]))
        Defer
        {
          {
            (162391 call _freeIterator _iterator[162366])
          }
        }
        { scopeless type
          (162380 'move' _indexOfInterest[162365](162377 call iteratorIndex _iterator[162366]))
        }
        ForLoop[162367]
        {
          unknown chunk[162384] "coforall index var" "index var" "insert auto destroy"
          (482461 'end of statement')
          (162386 'move' chunk[162384] _indexOfInterest[162365])
          (482462 'end of statement' chunk[162384])
          (935223 call coforall_fn[935221])
          function coforall_fn[935221]() : void[4] "cobegin or coforall"
          {
            unknown yret[521365] "YVV" "temp"
            unknown call_tmp[675838] "expr temp" "maybe param" "maybe type" "temp"
            (675841 'move' call_tmp[675838](162349 call first _mt[243] chunk[162384]))
            unknown call_tmp[675845] "expr temp" "maybe param" "maybe type" "temp"
            (675848 'move' call_tmp[675845](162353 call last _mt[243] chunk[162384]))
            unknown call_tmp[675850] "expr temp" "maybe param" "maybe type" "temp"
            (675853 'move' call_tmp[675850](162346 call _build_tuple this[164366] call_tmp[675838] call_tmp[675845]))
            (521368 'move' yret[521365](521367 'deref' call_tmp[675850]))
            (521370 yield yret[521365])
            (482464 'end of statement' chunk[162384] chunk[162384])
            (162360 call _downEndCount _coforallCount[162357] nil[44])
            (935226 return _void[55])
          }
          {
          }
          label _continueLabel[162370]
          _indexOfInterest[162365]
          _iterator[162366]
        }
        label _breakLabel[162371]
        Defer
        {
          {
            (162413 call _endCountFree _coforallCount[162357])
          }
        }
        (162418 call _waitEndCount _coforallCount[162357] 1 numTasks[162358])
      }
      {
        const _coforallCount[162430] "const" "end count" "temp"
        (162487 'move' _coforallCount[162430](162484 call _endCountAlloc 1))
        unknown _indexOfInterest[162438] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162439] "expr temp" "temp"
        (162448 'move' _iterator[162439](162446 call _getIterator tmpIter[162338]))
        Defer
        {
          {
            (162464 call _freeIterator _iterator[162439])
          }
        }
        { scopeless type
          (162453 'move' _indexOfInterest[162438](162450 call iteratorIndex _iterator[162439]))
        }
        ForLoop[162440]
        {
          unknown chunk[162457] "coforall index var" "index var" "insert auto destroy"
          (482471 'end of statement')
          (162459 'move' chunk[162457] _indexOfInterest[162438])
          (482472 'end of statement' chunk[162457])
          (162471 call _upEndCount _coforallCount[162430] 1)
          (482474 'end of statement')
          (935230 call coforall_fn[935228])
          function coforall_fn[935228]() : void[4] "cobegin or coforall"
          {
            unknown yret[521372] "YVV" "temp"
            unknown call_tmp[675857] "expr temp" "maybe param" "maybe type" "temp"
            (675860 'move' call_tmp[675857](162326 call first _mt[243] chunk[162457]))
            unknown call_tmp[675864] "expr temp" "maybe param" "maybe type" "temp"
            (675867 'move' call_tmp[675864](162331 call last _mt[243] chunk[162457]))
            unknown call_tmp[675869] "expr temp" "maybe param" "maybe type" "temp"
            (675872 'move' call_tmp[675869](162334 call _build_tuple this[164366] call_tmp[675857] call_tmp[675864]))
            (521375 'move' yret[521372](521374 'deref' call_tmp[675869]))
            (521377 yield yret[521372])
            (482475 'end of statement' chunk[162457] chunk[162457])
            (162433 call _downEndCount _coforallCount[162430] nil[44])
            (935233 return _void[55])
          }
          {
          }
          label _continueLabel[162443]
          _indexOfInterest[162438]
          _iterator[162439]
        }
        label _breakLabel[162444]
        Defer
        {
          {
            (162475 call _endCountFree _coforallCount[162430])
          }
        }
        (162480 call _waitEndCount _coforallCount[162430] 1)
      }
      (361081 'referenced modules list' RangeChunk[266370])
    }
    (521356 return ret[521354])
  }
  where {
    (162249 call == tag[162239] leader[447])
  }
  function DefaultSparseDom[164332](?).these[162523](arg _mt[164372]:_MT[238], arg this[164370]:DefaultSparseDom[164332](?), param arg tag[162520]:iterKind[453], arg followThis[162531]:_tuple[56199](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521381] "RVV" "temp"
    unknown tmp[162549] "dead at end of block" "insert auto destroy" "temp"
    (544065 'init var' tmp[162549] followThis[162531])
    (162559 call _check_tuple_var_decl tmp[162549] 3)
    (482481 'end of statement')
    unknown call_tmp[675874] "maybe param" "maybe type" "temp"
    (675877 'move' call_tmp[675874](162550 call tmp[162549] 0))
    unknown followThisDom[162541] "dead at end of block" "insert auto destroy"
    (544067 'init var' followThisDom[162541] call_tmp[675874])
    unknown call_tmp[675879] "maybe param" "maybe type" "temp"
    (675882 'move' call_tmp[675879](162553 call tmp[162549] 1))
    unknown startIx[162543] "dead at end of block" "insert auto destroy"
    (544069 'init var' startIx[162543] call_tmp[675879])
    unknown call_tmp[675884] "maybe param" "maybe type" "temp"
    (675887 'move' call_tmp[675884](162556 call tmp[162549] 2))
    unknown endIx[162545] "dead at end of block" "insert auto destroy"
    (544071 'init var' endIx[162545] call_tmp[675884])
    (162564 'end of statement')
    unknown call_tmp[675889] "expr temp" "maybe param" "maybe type" "temp"
    (675892 'move' call_tmp[675889](162568 call != followThisDom[162541] this[164370]))
    unknown call_tmp[675894] "expr temp" "maybe param" "maybe type" "temp"
    (675897 'move' call_tmp[675894](162593 call _cond_test call_tmp[675889]))
    if call_tmp[675894]
    {
      (162591 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays")
    }
    unknown call_tmp[675899] "expr temp" "maybe param" "maybe type" "temp"
    (675902 'move' call_tmp[675899](162623 call _cond_test debugDefaultSparse[161565]))
    if call_tmp[675899]
    {
      (162621 call writeln "DefaultSparseDom follower: " startIx[162543] ".." endIx[162545])
      (482483 'end of statement' startIx[162543] endIx[162545])
    }
    {
      unknown _indexOfInterest[162639] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162640] "expr temp" "temp"
      unknown call_tmp[675904] "expr temp" "maybe param" "maybe type" "temp"
      (675907 'move' call_tmp[675904](162654 call chpl_direct_range_iter startIx[162543] endIx[162545] 1))
      (162649 'move' _iterator[162640](162647 call _getIterator call_tmp[675904]))
      Defer
      {
        {
          (162670 call _freeIterator _iterator[162640])
        }
      }
      { scopeless type
        (162659 'move' _indexOfInterest[162639](162656 call iteratorIndex _iterator[162640]))
      }
      ForLoop[162641]
      {
        unknown i[162663] "index var" "insert auto destroy"
        (482487 'end of statement')
        (162665 'move' i[162663] _indexOfInterest[162639])
        (482488 'end of statement' i[162663])
        unknown yret[521385] "YVV" "temp"
        unknown call_tmp[675911] "expr temp" "maybe param" "maybe type" "temp"
        (675914 'move' call_tmp[675911](162636 call(387441 call (partial) _indices _mt[243] this[164370]) i[162663]))
        (521388 'move' yret[521385](521387 'deref' call_tmp[675911]))
        (521390 yield yret[521385])
        (482490 'end of statement' i[162663])
        label _continueLabel[162644]
        _indexOfInterest[162639]
        _iterator[162640]
      }
      label _breakLabel[162645]
    }
    (521383 return ret[521381])
  }
  where {
    unknown call_tmp[675916] "expr temp" "maybe param" "maybe type" "temp"
    (675919 'move' call_tmp[675916](162539 call == tag[162520] follower[449]))
    unknown call_tmp[675921] "expr temp" "maybe param" "maybe type" "temp"
    (675924 'move' call_tmp[675921](462136 'query' followThis[162531] c"size"))
    unknown call_tmp[675926] "expr temp" "maybe param" "maybe type" "temp"
    (675929 'move' call_tmp[675926](462137 call == 3 call_tmp[675921]))
    (462139 call & call_tmp[675916] call_tmp[675926])
  }
  function DefaultSparseDom[164332](?).these[162686](arg _mt[164376]:_MT[238], arg this[164374]:DefaultSparseDom[164332](?), param arg tag[162683]:iterKind[453], arg followThis[162688]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521394] "RVV" "temp"
    (162716 call compilerError "Sparse iterators can't yet be zippered with others")
    (482492 'end of statement')
    unknown dummy[162723] "dead at end of block" "insert auto destroy"
    unknown call_tmp[675933] "expr temp" "maybe param" "maybe type" "temp"
    (675936 'move' call_tmp[675933](387451 call rank _mt[243] this[164374]))
    unknown call_tmp[675940] "expr temp" "maybe param" "maybe type" "temp"
    (675943 'move' call_tmp[675940](387456 call idxType _mt[243] this[164374]))
    unknown call_tmp[675945] "expr temp" "maybe param" "maybe type" "temp"
    (675948 'move' call_tmp[675945](162721 call * call_tmp[675933] call_tmp[675940]))
    (544073 'default init var' dummy[162723] call_tmp[675945])
    (162726 'end of statement')
    unknown yret[521398] "YVV" "temp"
    (521401 'move' yret[521398](521400 'deref' dummy[162723]))
    (521403 yield yret[521398])
    (482493 'end of statement' dummy[162723])
    (521396 return ret[521394])
  }
  where {
    (162695 call == tag[162683] follower[449])
  }
  function DefaultSparseDom[164332](?).find[162737](arg _mt[164380]:_MT[238], arg this[164378]:DefaultSparseDom[164332](?), arg ind[162735]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521407] "RVV" "temp"
    unknown tmp[428092] "maybe param" "temp"
    unknown tmp[428113] "maybe param" "temp"
    unknown call_tmp[675952] "expr temp" "maybe param" "maybe type" "temp"
    (675955 'move' call_tmp[675952](387462 call rank _mt[243] this[164378]))
    (428124 'move' tmp[428113](162745 call == call_tmp[675952] 1))
    unknown call_tmp[675957] "expr temp" "maybe param" "maybe type" "temp"
    (675960 'move' call_tmp[675957](428126 call _cond_invalid tmp[428113]))
    if call_tmp[675957]
    {
      (428129 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570109] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570110] "maybe param" "temp"
    unknown call_tmp[675962] "expr temp" "maybe param" "maybe type" "temp"
    (675965 'move' call_tmp[675962](428114 call isTrue tmp[428113]))
    (570115 'move' tmp[570110](570113 call _cond_test call_tmp[675962]))
    if tmp[570110]
    {
      unknown tmp[570117] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[675967] "expr temp" "maybe param" "maybe type" "temp"
      (675970 'move' call_tmp[675967](162750 call isTuple ind[162735]))
      (570119 'move' tmp[570117](428117 call isTrue call_tmp[675967]))
      (570124 'move' tmp[570109](570121 '_paramFoldLogical' tmp[570110] tmp[570117]))
    }
    {
      (570129 'move' tmp[570109](570126 '_paramFoldLogical' tmp[570110] 0))
    }
    (428103 'move' tmp[428092] tmp[570109])
    unknown call_tmp[675972] "expr temp" "maybe param" "maybe type" "temp"
    (675975 'move' call_tmp[675972](428105 call _cond_invalid tmp[428092]))
    if call_tmp[675972]
    {
      (428108 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570136] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570137] "maybe param" "temp"
    unknown call_tmp[675977] "expr temp" "maybe param" "maybe type" "temp"
    (675980 'move' call_tmp[675977](428093 call isTrue tmp[428092]))
    (570142 'move' tmp[570137](570140 call _cond_test call_tmp[675977]))
    if tmp[570137]
    {
      unknown tmp[570144] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[675984] "expr temp" "maybe param" "maybe type" "temp"
      (675987 'move' call_tmp[675984](162754 call size _mt[243] ind[162735]))
      unknown call_tmp[675989] "expr temp" "maybe param" "maybe type" "temp"
      (675992 'move' call_tmp[675989](162758 call == call_tmp[675984] 1))
      (570146 'move' tmp[570144](428096 call isTrue call_tmp[675989]))
      (570151 'move' tmp[570136](570148 '_paramFoldLogical' tmp[570137] tmp[570144]))
    }
    {
      (570156 'move' tmp[570136](570153 '_paramFoldLogical' tmp[570137] 0))
    }
    unknown call_tmp[675994] "expr temp" "maybe param" "maybe type" "temp"
    (675997 'move' call_tmp[675994](162787 call _cond_test tmp[570136]))
    if call_tmp[675994]
    {
      unknown call_tmp[676001] "expr temp" "maybe param" "maybe type" "temp"
      (676004 'move' call_tmp[676001](387468 call _indices _mt[243] this[164378]))
      unknown call_tmp[676006] "expr temp" "maybe param" "maybe type" "temp"
      (676009 'move' call_tmp[676006](162768 call ind[162735] 0))
      unknown call_tmp[676013] "expr temp" "maybe param" "maybe type" "temp"
      (676016 'move' call_tmp[676013](387474 call _nnz _mt[243] this[164378]))
      unknown call_tmp[676018] "expr temp" "maybe param" "maybe type" "temp"
      (676021 'move' call_tmp[676018](162773 call binarySearch call_tmp[676001] call_tmp[676006](lo = 1)(hi = call_tmp[676013])))
      (521412 'move' ret[521407](521411 'deref' call_tmp[676018]))
      gotoReturn _end_find[521405] _end_find[521405]
    }
    {
      unknown call_tmp[676025] "expr temp" "maybe param" "maybe type" "temp"
      (676028 'move' call_tmp[676025](387479 call _indices _mt[243] this[164378]))
      unknown call_tmp[676032] "expr temp" "maybe param" "maybe type" "temp"
      (676035 'move' call_tmp[676032](387485 call _nnz _mt[243] this[164378]))
      unknown call_tmp[676037] "expr temp" "maybe param" "maybe type" "temp"
      (676040 'move' call_tmp[676037](162784 call binarySearch call_tmp[676025] ind[162735](lo = 1)(hi = call_tmp[676032])))
      (521417 'move' ret[521407](521416 'deref' call_tmp[676037]))
      gotoReturn _end_find[521405] _end_find[521405]
    }
    label _end_find[521405]
    (521409 return ret[521407])
    (355077 'used modules list'(162740 'use' Search[291145]))
  }
  function DefaultSparseDom[164332](?).dsiMember[162799](arg _mt[164384]:_MT[238], arg this[164382]:DefaultSparseDom[164332](?), arg ind[162797]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521423] "RVV" "temp"
    unknown call_tmp[676044] "maybe param" "maybe type" "temp"
    (676047 'move' call_tmp[676044](162809 call(387489 call (partial) find _mt[243] this[164382]) ind[162797]))
    const tmp[162810] "dead at end of block" "const" "insert auto destroy" "temp"
    (544075 'init var' tmp[162810] call_tmp[676044])
    (162817 call _check_tuple_var_decl tmp[162810] 2)
    (482499 'end of statement')
    unknown call_tmp[676049] "maybe param" "maybe type" "temp"
    (676052 'move' call_tmp[676049](162811 call tmp[162810] 0))
    const found[162801] "dead at end of block" "const" "insert auto destroy"
    (544077 'init var' found[162801] call_tmp[676049])
    unknown call_tmp[676054] "maybe param" "maybe type" "temp"
    (676057 'move' call_tmp[676054](162814 call tmp[162810] 1))
    const loc[162803] "dead at end of block" "const" "insert auto destroy"
    (544079 'init var' loc[162803] call_tmp[676054])
    (162822 'end of statement')
    (521428 'move' ret[521423](521427 'deref' found[162801]))
    gotoReturn _end_dsiMember[521421] _end_dsiMember[521421]
    (482500 'end of statement' found[162801])
    label _end_dsiMember[521421]
    (521425 return ret[521423])
  }
  function DefaultSparseDom[164332](?).dsiFirst[162831](arg _mt[164388]:_MT[238], arg this[164386]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[521434] "RVV" "temp"
    unknown call_tmp[676063] "expr temp" "maybe param" "maybe type" "temp"
    (676066 'move' call_tmp[676063](361095 call _indices _mt[243] this[164386]))
    unknown call_tmp[676070] "expr temp" "maybe param" "maybe type" "temp"
    (676073 'move' call_tmp[676070](162835 call _dom _mt[243] call_tmp[676063]))
    unknown call_tmp[676077] "expr temp" "maybe param" "maybe type" "temp"
    (676080 'move' call_tmp[676077](162838 call first _mt[243] call_tmp[676070]))
    unknown call_tmp[676082] "expr temp" "maybe param" "maybe type" "temp"
    (676085 'move' call_tmp[676082](162842 call(387496 call (partial) _indices _mt[243] this[164386]) call_tmp[676077]))
    (521439 'move' ret[521434](521438 'deref' call_tmp[676082]))
    (521436 return ret[521434])
  }
  function DefaultSparseDom[164332](?).dsiLast[162850](arg _mt[164392]:_MT[238], arg this[164390]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[521443] "RVV" "temp"
    unknown call_tmp[676091] "expr temp" "maybe param" "maybe type" "temp"
    (676094 'move' call_tmp[676091](387506 call _nnz _mt[243] this[164390]))
    unknown call_tmp[676096] "expr temp" "maybe param" "maybe type" "temp"
    (676099 'move' call_tmp[676096](162855 call(387501 call (partial) _indices _mt[243] this[164390]) call_tmp[676091]))
    (521448 'move' ret[521443](521447 'deref' call_tmp[676096]))
    (521445 return ret[521443])
  }
  function DefaultSparseDom[164332](?).add_help[162865](arg _mt[164396]:_MT[238], arg this[164394]:DefaultSparseDom[164332](?), arg ind[162863]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521452] "RVV" "temp"
    unknown call_tmp[676103] "maybe param" "maybe type" "temp"
    (676106 'move' call_tmp[676103](162875 call(387510 call (partial) find _mt[243] this[164394]) ind[162863]))
    const tmp[162876] "dead at end of block" "const" "insert auto destroy" "temp"
    (544081 'init var' tmp[162876] call_tmp[676103])
    (162883 call _check_tuple_var_decl tmp[162876] 2)
    (482504 'end of statement')
    unknown call_tmp[676108] "maybe param" "maybe type" "temp"
    (676111 'move' call_tmp[676108](162877 call tmp[162876] 0))
    const found[162867] "dead at end of block" "const" "insert auto destroy"
    (544083 'init var' found[162867] call_tmp[676108])
    unknown call_tmp[676113] "maybe param" "maybe type" "temp"
    (676116 'move' call_tmp[676113](162880 call tmp[162876] 1))
    const insertPt[162869] "dead at end of block" "const" "insert auto destroy"
    (544085 'init var' insertPt[162869] call_tmp[676113])
    (162888 'end of statement')
    unknown call_tmp[676118] "expr temp" "maybe param" "maybe type" "temp"
    (676121 'move' call_tmp[676118](162894 call _cond_test found[162867]))
    if call_tmp[676118]
    {
      (521457 'move' ret[521452](521456 'deref' 0))
      gotoReturn _end_add_help[521450] _end_add_help[521450]
    }
    unknown call_tmp[676123] "expr temp" "maybe param" "maybe type" "temp"
    (676126 'move' call_tmp[676123](162908 call _cond_test 1))
    if call_tmp[676123]
    {
      (162906 call(162901 call (partial) boundsCheck _mt[243] this[164394]) ind[162863])
    }
    unknown call_tmp[676132] "expr temp" "maybe param" "maybe type" "temp"
    (676135 'move' call_tmp[676132](387519 call _nnz _mt[243] this[164394]))
    (162915 call += call_tmp[676132] 1)
    (482507 'end of statement')
    unknown call_tmp[676139] "expr temp" "maybe param" "maybe type" "temp"
    (676142 'move' call_tmp[676139](361101 call nnzDom _mt[243] this[164394]))
    unknown call_tmp[676146] "maybe param" "maybe type" "temp"
    (676149 'move' call_tmp[676146](162919 call size _mt[243] call_tmp[676139]))
    const oldNNZDomSize[162922] "dead at end of block" "const" "insert auto destroy"
    (544087 'init var' oldNNZDomSize[162922] call_tmp[676146])
    (162925 'end of statement')
    unknown call_tmp[676155] "expr temp" "maybe param" "maybe type" "temp"
    (676158 'move' call_tmp[676155](387530 call _nnz _mt[243] this[164394]))
    (162929 call(387525 call (partial) _grow _mt[243] this[164394]) call_tmp[676155])
    (482508 'end of statement')
    {
      unknown _indexOfInterest[162959] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162960] "expr temp" "temp"
      unknown call_tmp[676162] "expr temp" "maybe param" "maybe type" "temp"
      (676165 'move' call_tmp[676162](387548 call _nnz _mt[243] this[164394]))
      unknown call_tmp[676167] "expr temp" "maybe param" "maybe type" "temp"
      (676170 'move' call_tmp[676167](162983 call - call_tmp[676162] 1))
      unknown call_tmp[676172] "expr temp" "maybe param" "maybe type" "temp"
      (676175 'move' call_tmp[676172](162979 call - 1))
      unknown call_tmp[676177] "expr temp" "maybe param" "maybe type" "temp"
      (676180 'move' call_tmp[676177](162986 call chpl_direct_range_iter insertPt[162869] call_tmp[676167] call_tmp[676172]))
      (162969 'move' _iterator[162960](162967 call _getIterator call_tmp[676177]))
      Defer
      {
        {
          (163002 call _freeIterator _iterator[162960])
        }
      }
      { scopeless type
        (162991 'move' _indexOfInterest[162959](162988 call iteratorIndex _iterator[162960]))
      }
      ForLoop[162961]
      {
        unknown i[162995] "index var" "insert auto destroy"
        (482510 'end of statement')
        (162997 'move' i[162995] _indexOfInterest[162959])
        (482511 'end of statement' i[162995])
        {
          unknown call_tmp[676184] "expr temp" "maybe param" "maybe type" "temp"
          (676187 'move' call_tmp[676184](162947 call + i[162995] 1))
          unknown call_tmp[676189] "expr temp" "maybe param" "maybe type" "temp"
          (676192 'move' call_tmp[676189](162950 call(387535 call (partial) _indices _mt[243] this[164394]) call_tmp[676184]))
          unknown call_tmp[676196] "expr temp" "maybe param" "maybe type" "temp"
          (676199 'move' call_tmp[676196](162954 call(387541 call (partial) _indices _mt[243] this[164394]) i[162995]))
          (162955 call = call_tmp[676189] call_tmp[676196])
          (482513 'end of statement' i[162995] i[162995])
        }
        label _continueLabel[162964]
        _indexOfInterest[162959]
        _iterator[162960]
      }
      label _breakLabel[162965]
    }
    unknown call_tmp[676203] "expr temp" "maybe param" "maybe type" "temp"
    (676206 'move' call_tmp[676203](163012 call(387553 call (partial) _indices _mt[243] this[164394]) insertPt[162869]))
    (163014 call = call_tmp[676203] ind[162863])
    (482516 'end of statement' insertPt[162869])
    {
      unknown _indexOfInterest[163046] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163047] "expr temp" "temp"
      unknown call_tmp[676210] "expr temp" "maybe param" "maybe type" "temp"
      (676213 'move' call_tmp[676210](387560 call _arrs _mt[243] this[164394]))
      (163056 'move' _iterator[163047](163054 call _getIterator call_tmp[676210]))
      Defer
      {
        {
          (163072 call _freeIterator _iterator[163047])
        }
      }
      { scopeless type
        (163061 'move' _indexOfInterest[163046](163058 call iteratorIndex _iterator[163047]))
      }
      ForLoop[163048]
      {
        unknown a[163065] "index var" "insert auto destroy"
        (482519 'end of statement')
        (163067 'move' a[163065] _indexOfInterest[163046])
        (482520 'end of statement' a[163065])
        {
          unknown call_tmp[676219] "expr temp" "maybe param" "maybe type" "temp"
          (676222 'move' call_tmp[676219](387566 call _nnz _mt[243] this[164394]))
          unknown call_tmp[676224] "expr temp" "maybe param" "maybe type" "temp"
          (676227 'move' call_tmp[676224](163028 call - call_tmp[676219] 1))
          unknown call_tmp[676229] "expr temp" "maybe param" "maybe type" "temp"
          (676232 'move' call_tmp[676229](163030 call chpl_build_bounded_range insertPt[162869] call_tmp[676224]))
          unknown call_tmp[676234] "expr temp" "maybe param" "maybe type" "temp"
          (676237 'move' call_tmp[676234](163035 call + oldNNZDomSize[162922] 1))
          unknown call_tmp[676241] "expr temp" "maybe param" "maybe type" "temp"
          (676244 'move' call_tmp[676241](361107 call nnzDom _mt[243] this[164394]))
          unknown call_tmp[676248] "expr temp" "maybe param" "maybe type" "temp"
          (676251 'move' call_tmp[676248](163038 call size _mt[243] call_tmp[676241]))
          unknown call_tmp[676253] "expr temp" "maybe param" "maybe type" "temp"
          (676256 'move' call_tmp[676253](163041 call chpl_build_bounded_range call_tmp[676234] call_tmp[676248]))
          (163043 call(163022 call (partial) sparseShiftArray _mt[243] a[163065]) call_tmp[676229] call_tmp[676253])
          (482522 'end of statement' a[163065] insertPt[162869] oldNNZDomSize[162922])
        }
        label _continueLabel[163051]
        _indexOfInterest[163046]
        _iterator[163047]
      }
      label _breakLabel[163052]
    }
    (521462 'move' ret[521452](521461 'deref' 1))
    label _end_add_help[521450]
    (521454 return ret[521452])
  }
  function DefaultSparseDom[164332](?).rem_help[163088](arg _mt[164400]:_MT[238], arg this[164398]:DefaultSparseDom[164332](?), arg ind[163086]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521466] "RVV" "temp"
    unknown call_tmp[676260] "maybe param" "maybe type" "temp"
    (676263 'move' call_tmp[676260](163098 call(387571 call (partial) find _mt[243] this[164398]) ind[163086]))
    const tmp[163099] "dead at end of block" "const" "insert auto destroy" "temp"
    (544089 'init var' tmp[163099] call_tmp[676260])
    (163106 call _check_tuple_var_decl tmp[163099] 2)
    (482527 'end of statement')
    unknown call_tmp[676265] "maybe param" "maybe type" "temp"
    (676268 'move' call_tmp[676265](163100 call tmp[163099] 0))
    const found[163090] "dead at end of block" "const" "insert auto destroy"
    (544091 'init var' found[163090] call_tmp[676265])
    unknown call_tmp[676270] "maybe param" "maybe type" "temp"
    (676273 'move' call_tmp[676270](163103 call tmp[163099] 1))
    const insertPt[163092] "dead at end of block" "const" "insert auto destroy"
    (544093 'init var' insertPt[163092] call_tmp[676270])
    (163111 'end of statement')
    unknown call_tmp[676275] "expr temp" "maybe param" "maybe type" "temp"
    (676278 'move' call_tmp[676275](163114 call ! found[163090]))
    unknown call_tmp[676280] "expr temp" "maybe param" "maybe type" "temp"
    (676283 'move' call_tmp[676280](163138 call _cond_test call_tmp[676275]))
    if call_tmp[676280]
    {
      (163136 call halt "index not in domain: " ind[163086])
    }
    unknown call_tmp[676287] "expr temp" "maybe param" "maybe type" "temp"
    (676290 'move' call_tmp[676287](387579 call _nnz _mt[243] this[164398]))
    (163145 call -= call_tmp[676287] 1)
    (482529 'end of statement')
    {
      unknown _indexOfInterest[163168] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163169] "expr temp" "temp"
      unknown call_tmp[676294] "expr temp" "maybe param" "maybe type" "temp"
      (676297 'move' call_tmp[676294](387597 call _nnz _mt[243] this[164398]))
      unknown call_tmp[676299] "expr temp" "maybe param" "maybe type" "temp"
      (676302 'move' call_tmp[676299](163183 call chpl_direct_range_iter insertPt[163092] call_tmp[676294] 1))
      (163178 'move' _iterator[163169](163176 call _getIterator call_tmp[676299]))
      Defer
      {
        {
          (163199 call _freeIterator _iterator[163169])
        }
      }
      { scopeless type
        (163188 'move' _indexOfInterest[163168](163185 call iteratorIndex _iterator[163169]))
      }
      ForLoop[163170]
      {
        unknown i[163192] "index var" "insert auto destroy"
        (482531 'end of statement')
        (163194 'move' i[163192] _indexOfInterest[163168])
        (482532 'end of statement' i[163192])
        {
          unknown call_tmp[676306] "expr temp" "maybe param" "maybe type" "temp"
          (676309 'move' call_tmp[676306](163156 call(387584 call (partial) _indices _mt[243] this[164398]) i[163192]))
          unknown call_tmp[676313] "expr temp" "maybe param" "maybe type" "temp"
          (676316 'move' call_tmp[676313](163160 call + i[163192] 1))
          unknown call_tmp[676318] "expr temp" "maybe param" "maybe type" "temp"
          (676321 'move' call_tmp[676318](163163 call(387590 call (partial) _indices _mt[243] this[164398]) call_tmp[676313]))
          (163164 call = call_tmp[676306] call_tmp[676318])
          (482534 'end of statement' i[163192] i[163192])
        }
        label _continueLabel[163173]
        _indexOfInterest[163168]
        _iterator[163169]
      }
      label _breakLabel[163174]
    }
    {
      unknown _indexOfInterest[163225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163226] "expr temp" "temp"
      unknown call_tmp[676325] "expr temp" "maybe param" "maybe type" "temp"
      (676328 'move' call_tmp[676325](387602 call _arrs _mt[243] this[164398]))
      (163235 'move' _iterator[163226](163233 call _getIterator call_tmp[676325]))
      Defer
      {
        {
          (163251 call _freeIterator _iterator[163226])
        }
      }
      { scopeless type
        (163240 'move' _indexOfInterest[163225](163237 call iteratorIndex _iterator[163226]))
      }
      ForLoop[163227]
      {
        unknown a[163244] "index var" "insert auto destroy"
        (482538 'end of statement')
        (163246 'move' a[163244] _indexOfInterest[163225])
        (482539 'end of statement' a[163244])
        {
          unknown call_tmp[676334] "expr temp" "maybe param" "maybe type" "temp"
          (676337 'move' call_tmp[676334](387608 call _nnz _mt[243] this[164398]))
          unknown call_tmp[676339] "expr temp" "maybe param" "maybe type" "temp"
          (676342 'move' call_tmp[676339](163217 call - call_tmp[676334] 1))
          unknown call_tmp[676344] "expr temp" "maybe param" "maybe type" "temp"
          (676347 'move' call_tmp[676344](163219 call chpl_build_bounded_range insertPt[163092] call_tmp[676339]))
          (163222 call(163211 call (partial) sparseShiftArrayBack _mt[243] a[163244]) call_tmp[676344])
          (482541 'end of statement' a[163244] insertPt[163092])
        }
        label _continueLabel[163230]
        _indexOfInterest[163225]
        _iterator[163226]
      }
      label _breakLabel[163231]
    }
    (521471 'move' ret[521466](521470 'deref' 1))
    (521468 return ret[521466])
  }
  function DefaultSparseDom[164332](?).dsiAdd[163269](arg _mt[164404]:_MT[238], arg this[164402]:DefaultSparseDom[164332](?), arg ind[163266] :
  (387613 call idxType _mt[243] this[164402])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521475] "RVV" "temp"
    unknown call_tmp[676353] "expr temp" "maybe param" "maybe type" "temp"
    (676356 'move' call_tmp[676353](163278 call(387624 call (partial) add_help _mt[243] this[164402]) ind[163266]))
    (521480 'move' ret[521475](521479 'deref' call_tmp[676353]))
    (521477 return ret[521475])
  }
  where {
    unknown call_tmp[676360] "expr temp" "maybe param" "maybe type" "temp"
    (676363 'move' call_tmp[676360](387618 call rank _mt[243] this[164402]))
    (163273 call == call_tmp[676360] 1)
  }
  function DefaultSparseDom[164332](?).dsiRemove[163291](arg _mt[164408]:_MT[238], arg this[164406]:DefaultSparseDom[164332](?), arg ind[163288] :
  (387630 call idxType _mt[243] this[164406])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521484] "RVV" "temp"
    unknown call_tmp[676369] "expr temp" "maybe param" "maybe type" "temp"
    (676372 'move' call_tmp[676369](163300 call(387641 call (partial) rem_help _mt[243] this[164406]) ind[163288]))
    (521489 'move' ret[521484](521488 'deref' call_tmp[676369]))
    (521486 return ret[521484])
  }
  where {
    unknown call_tmp[676376] "expr temp" "maybe param" "maybe type" "temp"
    (676379 'move' call_tmp[676376](387635 call rank _mt[243] this[164406]))
    (163295 call == call_tmp[676376] 1)
  }
  function DefaultSparseDom[164332](?).dsiAdd[163316](arg _mt[164412]:_MT[238], arg this[164410]:DefaultSparseDom[164332](?), arg ind[163313] :
  unknown call_tmp[676383] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521493] "RVV" "temp"
    unknown call_tmp[676397] "expr temp" "maybe param" "maybe type" "temp"
    (676400 'move' call_tmp[676397](387657 call rank _mt[243] this[164410]))
    unknown call_tmp[676402] "expr temp" "maybe param" "maybe type" "temp"
    (676405 'move' call_tmp[676402](163320 call == call_tmp[676397] 1))
    unknown call_tmp[676407] "expr temp" "maybe param" "maybe type" "temp"
    (676410 'move' call_tmp[676407](163339 call _cond_test call_tmp[676402]))
    if call_tmp[676407]
    {
      unknown call_tmp[676414] "expr temp" "maybe param" "maybe type" "temp"
      (676417 'move' call_tmp[676414](163326 call ind[163313] 0))
      unknown call_tmp[676419] "expr temp" "maybe param" "maybe type" "temp"
      (676422 'move' call_tmp[676419](163328 call(387661 call (partial) add_help _mt[243] this[164410]) call_tmp[676414]))
      (521498 'move' ret[521493](521497 'deref' call_tmp[676419]))
      gotoReturn _end_dsiAdd[521491] _end_dsiAdd[521491]
    }
    {
      unknown call_tmp[676426] "expr temp" "maybe param" "maybe type" "temp"
      (676429 'move' call_tmp[676426](163335 call(387666 call (partial) add_help _mt[243] this[164410]) ind[163313]))
      (521503 'move' ret[521493](521502 'deref' call_tmp[676426]))
      gotoReturn _end_dsiAdd[521491] _end_dsiAdd[521491]
    }
    label _end_dsiAdd[521491]
    (521495 return ret[521493])
  }
  function DefaultSparseDom[164332](?).dsiRemove[163355](arg _mt[164416]:_MT[238], arg this[164414]:DefaultSparseDom[164332](?), arg ind[163352] :
  unknown call_tmp[676433] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521509] "RVV" "temp"
    unknown call_tmp[676447] "expr temp" "maybe param" "maybe type" "temp"
    (676450 'move' call_tmp[676447](387682 call rank _mt[243] this[164414]))
    unknown call_tmp[676452] "expr temp" "maybe param" "maybe type" "temp"
    (676455 'move' call_tmp[676452](163359 call == call_tmp[676447] 1))
    unknown call_tmp[676457] "expr temp" "maybe param" "maybe type" "temp"
    (676460 'move' call_tmp[676457](163378 call _cond_test call_tmp[676452]))
    if call_tmp[676457]
    {
      unknown call_tmp[676464] "expr temp" "maybe param" "maybe type" "temp"
      (676467 'move' call_tmp[676464](163365 call ind[163352] 0))
      unknown call_tmp[676469] "expr temp" "maybe param" "maybe type" "temp"
      (676472 'move' call_tmp[676469](163367 call(387686 call (partial) rem_help _mt[243] this[164414]) call_tmp[676464]))
      (521514 'move' ret[521509](521513 'deref' call_tmp[676469]))
      gotoReturn _end_dsiRemove[521507] _end_dsiRemove[521507]
    }
    {
      unknown call_tmp[676476] "expr temp" "maybe param" "maybe type" "temp"
      (676479 'move' call_tmp[676476](163374 call(387691 call (partial) rem_help _mt[243] this[164414]) ind[163352]))
      (521519 'move' ret[521509](521518 'deref' call_tmp[676476]))
      gotoReturn _end_dsiRemove[521507] _end_dsiRemove[521507]
    }
    label _end_dsiRemove[521507]
    (521511 return ret[521509])
  }
  function DefaultSparseDom[164332](?).bulkAdd_help[163400](arg _mt[164420]:_MT[238], arg this[164418]:DefaultSparseDom[164332](?), arg inds[163397]:_array[133588](?), arg dataSorted[163403] :
  0 =
  0, arg isUnique[163407] :
  0 =
  0, arg addOn[163411] :
  nilLocale[89939] =
  nilLocale[89939]) : _unknown[51] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[521525] "RVV" "temp"
    unknown call_tmp[676481] "expr temp" "maybe param" "maybe type" "temp"
    (676484 'move' call_tmp[676481](163420 call != addOn[163411] nilLocale[89939]))
    unknown call_tmp[676486] "expr temp" "maybe param" "maybe type" "temp"
    (676489 'move' call_tmp[676486](163458 call _cond_test call_tmp[676481]))
    if call_tmp[676486]
    {
      unknown call_tmp[676491] "expr temp" "maybe param" "maybe type" "temp"
      (676494 'move' call_tmp[676491](163424 '_wide_get_locale' this[164418]))
      unknown call_tmp[676496] "expr temp" "maybe param" "maybe type" "temp"
      (676499 'move' call_tmp[676496](163425 call chpl_localeID_to_locale call_tmp[676491]))
      unknown call_tmp[676501] "expr temp" "maybe param" "maybe type" "temp"
      (676504 'move' call_tmp[676501](163427 call != addOn[163411] call_tmp[676496]))
      unknown call_tmp[676506] "expr temp" "maybe param" "maybe type" "temp"
      (676509 'move' call_tmp[676506](163453 call _cond_test call_tmp[676501]))
      if call_tmp[676506]
      {
        (163450 call halt "Bulk index addition is only possible on the locale where the\n              sparse domain is created")
      }
    }
    (163473 call(387713 call (partial) bulkAdd_prepareInds _mt[243] this[164418]) inds[163397] dataSorted[163403] isUnique[163407] defaultComparator[267889])
    (482552 'end of statement')
    unknown call_tmp[676515] "expr temp" "maybe param" "maybe type" "temp"
    (676518 'move' call_tmp[676515](387721 call _nnz _mt[243] this[164418]))
    unknown call_tmp[676520] "expr temp" "maybe param" "maybe type" "temp"
    (676523 'move' call_tmp[676520](163477 call == call_tmp[676515] 0))
    unknown call_tmp[676525] "expr temp" "maybe param" "maybe type" "temp"
    (676528 'move' call_tmp[676525](163638 call _cond_test call_tmp[676520]))
    if call_tmp[676525]
    {
      const dupCount[163488] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[570163] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[570164] "maybe param" "temp"
      (570169 'move' tmp[570164](570167 call _cond_test isUnique[163407]))
      if tmp[570164]
      {
        (570174 'move' tmp[570163](570171 '_paramFoldLogical' tmp[570164] 0))
      }
      {
        unknown tmp[570176] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (570178 'move' tmp[570176](163484 call(387728 call (partial) _countDuplicates _mt[243] this[164418]) inds[163397]))
        (570183 'move' tmp[570163](570180 '_paramFoldLogical' tmp[570164] tmp[570176]))
      }
      (544095 'init var' dupCount[163488] tmp[570163])
      (163491 'end of statement')
      unknown call_tmp[676534] "expr temp" "maybe param" "maybe type" "temp"
      (676537 'move' call_tmp[676534](387734 call _nnz _mt[243] this[164418]))
      unknown call_tmp[676541] "expr temp" "maybe param" "maybe type" "temp"
      (676544 'move' call_tmp[676541](163495 call size _mt[243] inds[163397]))
      unknown call_tmp[676546] "expr temp" "maybe param" "maybe type" "temp"
      (676549 'move' call_tmp[676546](163499 call - call_tmp[676541] dupCount[163488]))
      (163501 call += call_tmp[676534] call_tmp[676546])
      (482553 'end of statement' dupCount[163488])
      (163506 call(387741 call (partial) _bulkGrow _mt[243] this[164418]))
      (482555 'end of statement')
      unknown call_tmp[676555] "expr temp" "maybe param" "maybe type" "temp"
      (676558 'move' call_tmp[676555](361118 call _indices _mt[243] this[164418]))
      unknown call_tmp[676562] "expr temp" "maybe param" "maybe type" "temp"
      (676565 'move' call_tmp[676562](163509 call _dom _mt[243] call_tmp[676555]))
      unknown call_tmp[676569] "maybe param" "maybe type" "temp"
      (676572 'move' call_tmp[676569](163512 call low _mt[243] call_tmp[676562]))
      unknown indIdx[163515] "dead at end of block" "insert auto destroy"
      (544097 'init var' indIdx[163515] call_tmp[676569])
      (163518 'end of statement')
      unknown call_tmp[676576] "expr temp" "maybe param" "maybe type" "temp"
      (676579 'move' call_tmp[676576](361123 call parentDom _mt[243] this[164418]))
      unknown call_tmp[676583] "expr temp" "maybe param" "maybe type" "temp"
      (676586 'move' call_tmp[676583](163520 call low _mt[243] call_tmp[676576]))
      unknown call_tmp[676588] "maybe param" "maybe type" "temp"
      (676591 'move' call_tmp[676588](163524 call - call_tmp[676583] 1))
      unknown prevIdx[163526] "dead at end of block" "insert auto destroy"
      (544099 'init var' prevIdx[163526] call_tmp[676588])
      (163529 'end of statement')
      unknown call_tmp[676593] "expr temp" "maybe param" "maybe type" "temp"
      (676596 'move' call_tmp[676593](163634 call _cond_test isUnique[163407]))
      if call_tmp[676593]
      {
        unknown call_tmp[676602] "expr temp" "maybe param" "maybe type" "temp"
        (676605 'move' call_tmp[676602](361128 call _indices _mt[243] this[164418]))
        unknown call_tmp[676609] "expr temp" "maybe param" "maybe type" "temp"
        (676612 'move' call_tmp[676609](163533 call _dom _mt[243] call_tmp[676602]))
        unknown call_tmp[676616] "expr temp" "maybe param" "maybe type" "temp"
        (676619 'move' call_tmp[676616](163536 call low _mt[243] call_tmp[676609]))
        unknown call_tmp[676621] "expr temp" "maybe param" "maybe type" "temp"
        (676624 'move' call_tmp[676621](163539 call chpl_build_low_bounded_range call_tmp[676616]))
        unknown call_tmp[676628] "expr temp" "maybe param" "maybe type" "temp"
        (676631 'move' call_tmp[676628](163542 call size _mt[243] inds[163397]))
        unknown call_tmp[676633] "expr temp" "maybe param" "maybe type" "temp"
        (676636 'move' call_tmp[676633](163545 call # call_tmp[676621] call_tmp[676628]))
        unknown call_tmp[676638] "expr temp" "maybe param" "maybe type" "temp"
        (676641 'move' call_tmp[676638](163548 call(387747 call (partial) _indices _mt[243] this[164418]) call_tmp[676633]))
        (163550 call = call_tmp[676638] inds[163397])
        (482556 'end of statement')
        unknown call_tmp[676645] "expr temp" "maybe param" "maybe type" "temp"
        (676648 'move' call_tmp[676645](163555 call size _mt[243] inds[163397]))
        (521530 'move' ret[521525](521529 'deref' call_tmp[676645]))
        gotoReturn _end_bulkAdd_help[521523] _end_bulkAdd_help[521523]
      }
      {
        {
          unknown _indexOfInterest[163594] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[163595] "expr temp" "temp"
          (163604 'move' _iterator[163595](163602 call _getIterator inds[163397]))
          Defer
          {
            {
              (163620 call _freeIterator _iterator[163595])
            }
          }
          { scopeless type
            (163609 'move' _indexOfInterest[163594](163606 call iteratorIndex _iterator[163595]))
          }
          ForLoop[163596]
          {
            unknown i[163613] "index var" "insert auto destroy"
            (482559 'end of statement')
            (163615 'move' i[163613] _indexOfInterest[163594])
            (482560 'end of statement' i[163613])
            {
              unknown call_tmp[676650] "expr temp" "maybe param" "maybe type" "temp"
              (676653 'move' call_tmp[676650](163564 call == i[163613] prevIdx[163526]))
              unknown call_tmp[676655] "expr temp" "maybe param" "maybe type" "temp"
              (676658 'move' call_tmp[676655](163574 call _cond_test call_tmp[676650]))
              if call_tmp[676655]
              {
                continue _continueLabel[163599] _continueLabel[163599]
              }
              {
                (163571 call = prevIdx[163526] i[163613])
                (482562 'end of statement' prevIdx[163526] i[163613])
              }
              unknown call_tmp[676662] "expr temp" "maybe param" "maybe type" "temp"
              (676665 'move' call_tmp[676662](163584 call(387758 call (partial) _indices _mt[243] this[164418]) indIdx[163515]))
              (163586 call = call_tmp[676662] i[163613])
              (482565 'end of statement' indIdx[163515] i[163613])
              (163591 call += indIdx[163515] 1)
              (482568 'end of statement' indIdx[163515])
            }
            label _continueLabel[163599]
            _indexOfInterest[163594]
            _iterator[163595]
          }
          label _breakLabel[163600]
        }
        unknown call_tmp[676667] "expr temp" "maybe param" "maybe type" "temp"
        (676670 'move' call_tmp[676667](163630 call - indIdx[163515] 1))
        (521535 'move' ret[521525](521534 'deref' call_tmp[676667]))
        gotoReturn _end_bulkAdd_help[521523] _end_bulkAdd_help[521523]
        (482570 'end of statement' indIdx[163515])
      }
    }
    unknown call_tmp[676674] "maybe param" "maybe type" "temp"
    (676677 'move' call_tmp[676674](163652 call(387768 call (partial) __getActualInsertPts _mt[243] this[164418]) this[164418] inds[163397] isUnique[163407]))
    const tmp[163653] "dead at end of block" "const" "insert auto destroy" "temp"
    (544101 'init var' tmp[163653] call_tmp[676674])
    (163660 call _check_tuple_var_decl tmp[163653] 2)
    (482572 'end of statement')
    unknown call_tmp[676679] "maybe param" "maybe type" "temp"
    (676682 'move' call_tmp[676679](163654 call tmp[163653] 0))
    const actualInsertPts[163642] "dead at end of block" "const" "insert auto destroy"
    (544103 'init var' actualInsertPts[163642] call_tmp[676679])
    unknown call_tmp[676684] "maybe param" "maybe type" "temp"
    (676687 'move' call_tmp[676684](163657 call tmp[163653] 1))
    const actualAddCnt[163644] "dead at end of block" "const" "insert auto destroy"
    (544105 'init var' actualAddCnt[163644] call_tmp[676684])
    (163665 'end of statement')
    unknown call_tmp[676691] "maybe param" "maybe type" "temp"
    (676694 'move' call_tmp[676691](387776 call _nnz _mt[243] this[164418]))
    const oldnnz[163667] "dead at end of block" "const" "insert auto destroy"
    (544107 'init var' oldnnz[163667] call_tmp[676691])
    (163670 'end of statement')
    unknown call_tmp[676698] "expr temp" "maybe param" "maybe type" "temp"
    (676701 'move' call_tmp[676698](387781 call _nnz _mt[243] this[164418]))
    (163673 call += call_tmp[676698] actualAddCnt[163644])
    (482573 'end of statement' actualAddCnt[163644])
    (163678 call(387786 call (partial) _bulkGrow _mt[243] this[164418]))
    (482575 'end of statement')
    unknown call_tmp[676707] "expr temp" "maybe param" "maybe type" "temp"
    (676710 'move' call_tmp[676707](462156 call _dom _mt[243] inds[163397]))
    unknown call_tmp[676714] "maybe param" "maybe type" "temp"
    (676717 'move' call_tmp[676714](163681 call high _mt[243] call_tmp[676707]))
    unknown newIndIdx[163684] "dead at end of block" "insert auto destroy"
    (544109 'init var' newIndIdx[163684] call_tmp[676714])
    (163687 'end of statement')
    unknown oldIndIdx[163689] "dead at end of block" "insert auto destroy"
    (544111 'init var' oldIndIdx[163689] oldnnz[163667])
    (163692 'end of statement')
    unknown call_tmp[676719] "maybe param" "maybe type" "temp"
    (676722 'move' call_tmp[676719](163696 call actualInsertPts[163642] newIndIdx[163684]))
    unknown newLoc[163697] "dead at end of block" "insert auto destroy"
    (544113 'init var' newLoc[163697] call_tmp[676719])
    (163700 'end of statement')
    {
      unknown tmp[163739] "temp"
      unknown call_tmp[676724] "expr temp" "maybe param" "maybe type" "temp"
      (676727 'move' call_tmp[676724](163765 call - 1))
      unknown call_tmp[676729] "expr temp" "maybe param" "maybe type" "temp"
      (676732 'move' call_tmp[676729](163762 call == newLoc[163697] call_tmp[676724]))
      (163767 'move' tmp[163739](163760 call _cond_test call_tmp[676729]))
      WhileDo[163744]
      {
        {
          (163709 call -= newIndIdx[163684] 1)
          (482579 'end of statement' newIndIdx[163684])
          unknown call_tmp[676736] "expr temp" "maybe param" "maybe type" "temp"
          (676739 'move' call_tmp[676736](462160 call _dom _mt[243] inds[163397]))
          unknown call_tmp[676743] "expr temp" "maybe param" "maybe type" "temp"
          (676746 'move' call_tmp[676743](163715 call low _mt[243] call_tmp[676736]))
          unknown call_tmp[676748] "expr temp" "maybe param" "maybe type" "temp"
          (676751 'move' call_tmp[676748](163719 call - call_tmp[676743] 1))
          unknown call_tmp[676753] "expr temp" "maybe param" "maybe type" "temp"
          (676756 'move' call_tmp[676753](163721 call == newIndIdx[163684] call_tmp[676748]))
          unknown call_tmp[676758] "expr temp" "maybe param" "maybe type" "temp"
          (676761 'move' call_tmp[676758](163726 call _cond_test call_tmp[676753]))
          if call_tmp[676758]
          {
            break _breakLabel[163743] _breakLabel[163743]
          }
          unknown call_tmp[676763] "expr temp" "maybe param" "maybe type" "temp"
          (676766 'move' call_tmp[676763](163735 call actualInsertPts[163642] newIndIdx[163684]))
          (163736 call = newLoc[163697] call_tmp[676763])
          (482581 'end of statement' newLoc[163697] actualInsertPts[163642] newIndIdx[163684])
        }
        label _continueLabel[163742]
        unknown call_tmp[676768] "expr temp" "maybe param" "maybe type" "temp"
        (676771 'move' call_tmp[676768](163753 call - 1))
        unknown call_tmp[676773] "expr temp" "maybe param" "maybe type" "temp"
        (676776 'move' call_tmp[676773](163750 call == newLoc[163697] call_tmp[676768]))
        (163755 'move' tmp[163739](163748 call _cond_test call_tmp[676773]))
        tmp[163739]
      }
      label _breakLabel[163743]
    }
    unknown arrShiftMap[163783] "dead at end of block" "insert auto destroy"
    unknown call_tmp[676778] "expr temp" "maybe param" "maybe type" "temp"
    (676781 'move' call_tmp[676778](163772 call chpl_build_bounded_range 1 oldnnz[163667]))
    unknown call_tmp[676783] "expr temp" "maybe param" "maybe type" "temp"
    (676786 'move' call_tmp[676783](163775 call chpl__buildDomainExpr call_tmp[676778]))
    unknown call_tmp[676788] "expr temp" "maybe param" "maybe type" "temp"
    (676791 'move' call_tmp[676788](163779 call chpl__ensureDomainExpr call_tmp[676783]))
    unknown call_tmp[676793] "expr temp" "maybe param" "maybe type" "temp"
    (676796 'move' call_tmp[676793](163781 call chpl__buildArrayRuntimeType call_tmp[676788] int(64)[13]))
    (544115 'default init var' arrShiftMap[163783] call_tmp[676793])
    (163786 'end of statement' oldnnz[163667] actualInsertPts[163642] newIndIdx[163684] oldnnz[163667])
    {
      unknown _indexOfInterest[163991] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163992] "expr temp" "temp"
      unknown call_tmp[676800] "expr temp" "maybe param" "maybe type" "temp"
      (676803 'move' call_tmp[676800](387845 call _nnz _mt[243] this[164418]))
      unknown call_tmp[676805] "expr temp" "maybe param" "maybe type" "temp"
      (676808 'move' call_tmp[676805](164008 call - 1))
      unknown call_tmp[676810] "expr temp" "maybe param" "maybe type" "temp"
      (676813 'move' call_tmp[676810](164012 call chpl_direct_range_iter 1 call_tmp[676800] call_tmp[676805]))
      (164001 'move' _iterator[163992](163999 call _getIterator call_tmp[676810]))
      Defer
      {
        {
          (164028 call _freeIterator _iterator[163992])
        }
      }
      { scopeless type
        (164017 'move' _indexOfInterest[163991](164014 call iteratorIndex _iterator[163992]))
      }
      ForLoop[163993]
      {
        unknown i[164021] "index var" "insert auto destroy"
        (482587 'end of statement')
        (164023 'move' i[164021] _indexOfInterest[163991])
        (482588 'end of statement' i[164021])
        {
          unknown tmp[428155] "maybe param" "temp"
          (428166 'move' tmp[428155](163799 call >= oldIndIdx[163689] 1))
          unknown call_tmp[676815] "expr temp" "maybe param" "maybe type" "temp"
          (676818 'move' call_tmp[676815](428168 call _cond_invalid tmp[428155]))
          if call_tmp[676815]
          {
            (428171 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[570190] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570191] "maybe param" "temp"
          unknown call_tmp[676820] "expr temp" "maybe param" "maybe type" "temp"
          (676823 'move' call_tmp[676820](428156 call isTrue tmp[428155]))
          (570196 'move' tmp[570191](570194 call _cond_test call_tmp[676820]))
          if tmp[570191]
          {
            unknown tmp[570198] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[676825] "expr temp" "maybe param" "maybe type" "temp"
            (676828 'move' call_tmp[676825](163803 call > i[164021] newLoc[163697]))
            (570200 'move' tmp[570198](428159 call isTrue call_tmp[676825]))
            (570205 'move' tmp[570190](570202 '_paramFoldLogical' tmp[570191] tmp[570198]))
          }
          {
            (570210 'move' tmp[570190](570207 '_paramFoldLogical' tmp[570191] 0))
          }
          unknown call_tmp[676830] "expr temp" "maybe param" "maybe type" "temp"
          (676833 'move' call_tmp[676830](163985 call _cond_test tmp[570190]))
          if call_tmp[676830]
          {
            unknown call_tmp[676837] "expr temp" "maybe param" "maybe type" "temp"
            (676840 'move' call_tmp[676837](163810 call(387805 call (partial) _indices _mt[243] this[164418]) i[164021]))
            unknown call_tmp[676844] "expr temp" "maybe param" "maybe type" "temp"
            (676847 'move' call_tmp[676844](163814 call(387811 call (partial) _indices _mt[243] this[164418]) oldIndIdx[163689]))
            (163815 call = call_tmp[676837] call_tmp[676844])
            (482591 'end of statement' i[164021] oldIndIdx[163689])
            unknown call_tmp[676849] "expr temp" "maybe param" "maybe type" "temp"
            (676852 'move' call_tmp[676849](163822 call arrShiftMap[163783] oldIndIdx[163689]))
            (163824 call = call_tmp[676849] i[164021])
            (482594 'end of statement' arrShiftMap[163783] oldIndIdx[163689] i[164021])
            (163829 call -= oldIndIdx[163689] 1)
            (482598 'end of statement' oldIndIdx[163689])
          }
          {
            unknown tmp[428134] "maybe param" "temp"
            unknown call_tmp[676856] "expr temp" "maybe param" "maybe type" "temp"
            (676859 'move' call_tmp[676856](462164 call _dom _mt[243] inds[163397]))
            unknown call_tmp[676863] "expr temp" "maybe param" "maybe type" "temp"
            (676866 'move' call_tmp[676863](163834 call low _mt[243] call_tmp[676856]))
            (428145 'move' tmp[428134](163837 call >= newIndIdx[163684] call_tmp[676863]))
            unknown call_tmp[676868] "expr temp" "maybe param" "maybe type" "temp"
            (676871 'move' call_tmp[676868](428147 call _cond_invalid tmp[428134]))
            if call_tmp[676868]
            {
              (428150 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[570217] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[570218] "maybe param" "temp"
            unknown call_tmp[676873] "expr temp" "maybe param" "maybe type" "temp"
            (676876 'move' call_tmp[676873](428135 call isTrue tmp[428134]))
            (570223 'move' tmp[570218](570221 call _cond_test call_tmp[676873]))
            if tmp[570218]
            {
              unknown tmp[570225] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[676878] "expr temp" "maybe param" "maybe type" "temp"
              (676881 'move' call_tmp[676878](163841 call == i[164021] newLoc[163697]))
              (570227 'move' tmp[570225](428138 call isTrue call_tmp[676878]))
              (570232 'move' tmp[570217](570229 '_paramFoldLogical' tmp[570218] tmp[570225]))
            }
            {
              (570237 'move' tmp[570217](570234 '_paramFoldLogical' tmp[570218] 0))
            }
            unknown call_tmp[676883] "expr temp" "maybe param" "maybe type" "temp"
            (676886 'move' call_tmp[676883](163980 call _cond_test tmp[570217]))
            if call_tmp[676883]
            {
              unknown call_tmp[676890] "expr temp" "maybe param" "maybe type" "temp"
              (676893 'move' call_tmp[676890](163848 call(387824 call (partial) _indices _mt[243] this[164418]) i[164021]))
              unknown call_tmp[676895] "expr temp" "maybe param" "maybe type" "temp"
              (676898 'move' call_tmp[676895](163852 call inds[163397] newIndIdx[163684]))
              (163853 call = call_tmp[676890] call_tmp[676895])
              (482601 'end of statement' i[164021] newIndIdx[163684])
              (163859 call -= newIndIdx[163684] 1)
              (482604 'end of statement' newIndIdx[163684])
              unknown call_tmp[676902] "expr temp" "maybe param" "maybe type" "temp"
              (676905 'move' call_tmp[676902](462168 call _dom _mt[243] inds[163397]))
              unknown call_tmp[676909] "expr temp" "maybe param" "maybe type" "temp"
              (676912 'move' call_tmp[676909](163864 call low _mt[243] call_tmp[676902]))
              unknown call_tmp[676914] "expr temp" "maybe param" "maybe type" "temp"
              (676917 'move' call_tmp[676914](163867 call >= newIndIdx[163684] call_tmp[676909]))
              unknown call_tmp[676919] "expr temp" "maybe param" "maybe type" "temp"
              (676922 'move' call_tmp[676919](163884 call _cond_test call_tmp[676914]))
              if call_tmp[676919]
              {
                unknown call_tmp[676924] "expr temp" "maybe param" "maybe type" "temp"
                (676927 'move' call_tmp[676924](163873 call actualInsertPts[163642] newIndIdx[163684]))
                (163874 call = newLoc[163697] call_tmp[676924])
                (482606 'end of statement' newLoc[163697] actualInsertPts[163642] newIndIdx[163684])
              }
              {
                unknown call_tmp[676929] "expr temp" "maybe param" "maybe type" "temp"
                (676932 'move' call_tmp[676929](163879 call - 2))
                (163881 call = newLoc[163697] call_tmp[676929])
                (482610 'end of statement' newLoc[163697])
              }
              {
                unknown tmp[163928] "temp"
                unknown call_tmp[676934] "expr temp" "maybe param" "maybe type" "temp"
                (676937 'move' call_tmp[676934](163954 call - 1))
                unknown call_tmp[676939] "expr temp" "maybe param" "maybe type" "temp"
                (676942 'move' call_tmp[676939](163951 call == newLoc[163697] call_tmp[676934]))
                (163956 'move' tmp[163928](163949 call _cond_test call_tmp[676939]))
                WhileDo[163933]
                {
                  {
                    (163898 call -= newIndIdx[163684] 1)
                    (482612 'end of statement' newIndIdx[163684])
                    unknown call_tmp[676946] "expr temp" "maybe param" "maybe type" "temp"
                    (676949 'move' call_tmp[676946](462172 call _dom _mt[243] inds[163397]))
                    unknown call_tmp[676953] "expr temp" "maybe param" "maybe type" "temp"
                    (676956 'move' call_tmp[676953](163904 call low _mt[243] call_tmp[676946]))
                    unknown call_tmp[676958] "expr temp" "maybe param" "maybe type" "temp"
                    (676961 'move' call_tmp[676958](163908 call - call_tmp[676953] 1))
                    unknown call_tmp[676963] "expr temp" "maybe param" "maybe type" "temp"
                    (676966 'move' call_tmp[676963](163910 call == newIndIdx[163684] call_tmp[676958]))
                    unknown call_tmp[676968] "expr temp" "maybe param" "maybe type" "temp"
                    (676971 'move' call_tmp[676968](163915 call _cond_test call_tmp[676963]))
                    if call_tmp[676968]
                    {
                      break _breakLabel[163932] _breakLabel[163932]
                    }
                    unknown call_tmp[676973] "expr temp" "maybe param" "maybe type" "temp"
                    (676976 'move' call_tmp[676973](163924 call actualInsertPts[163642] newIndIdx[163684]))
                    (163925 call = newLoc[163697] call_tmp[676973])
                    (482614 'end of statement' newLoc[163697] actualInsertPts[163642] newIndIdx[163684])
                  }
                  label _continueLabel[163931]
                  unknown call_tmp[676978] "expr temp" "maybe param" "maybe type" "temp"
                  (676981 'move' call_tmp[676978](163942 call - 1))
                  unknown call_tmp[676983] "expr temp" "maybe param" "maybe type" "temp"
                  (676986 'move' call_tmp[676983](163939 call == newLoc[163697] call_tmp[676978]))
                  (163944 'move' tmp[163928](163937 call _cond_test call_tmp[676983]))
                  tmp[163928]
                }
                label _breakLabel[163932]
              }
            }
            {
              (163978 call halt "Something went wrong")
            }
          }
        }
        label _continueLabel[163996]
        _indexOfInterest[163991]
        _iterator[163992]
      }
      label _breakLabel[163997]
    }
    {
      unknown _indexOfInterest[164048] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[164049] "expr temp" "temp"
      unknown call_tmp[676990] "expr temp" "maybe param" "maybe type" "temp"
      (676993 'move' call_tmp[676990](387850 call _arrs _mt[243] this[164418]))
      (164058 'move' _iterator[164049](164056 call _getIterator call_tmp[676990]))
      Defer
      {
        {
          (164074 call _freeIterator _iterator[164049])
        }
      }
      { scopeless type
        (164063 'move' _indexOfInterest[164048](164060 call iteratorIndex _iterator[164049]))
      }
      ForLoop[164050]
      {
        unknown a[164067] "index var" "insert auto destroy"
        (482620 'end of statement')
        (164069 'move' a[164067] _indexOfInterest[164048])
        (482621 'end of statement' a[164067])
        (164046 call(164040 call (partial) sparseBulkShiftArray _mt[243] a[164067]) arrShiftMap[163783] oldnnz[163667])
        (482623 'end of statement' a[164067] arrShiftMap[163783] oldnnz[163667])
        label _continueLabel[164053]
        _indexOfInterest[164048]
        _iterator[164049]
      }
      label _breakLabel[164054]
    }
    (521540 'move' ret[521525](521539 'deref' actualAddCnt[163644]))
    gotoReturn _end_bulkAdd_help[521523] _end_bulkAdd_help[521523]
    (482627 'end of statement' actualAddCnt[163644])
    label _end_bulkAdd_help[521523]
    (521527 return ret[521525])
    (355079 'used modules list'(163415 'import' Sort[267880]))
    (361112 'referenced modules list' Sort[267880])
  }
  where {
    unknown call_tmp[676999] "expr temp" "maybe param" "maybe type" "temp"
    (677002 'move' call_tmp[676999](387697 call rank _mt[243] this[164418]))
    unknown call_tmp[677006] "expr temp" "maybe param" "maybe type" "temp"
    (677009 'move' call_tmp[677006](387702 call idxType _mt[243] this[164418]))
    unknown call_tmp[677011] "expr temp" "maybe param" "maybe type" "temp"
    (677014 'move' call_tmp[677011](163393 call chpl__buildIndexType call_tmp[676999] call_tmp[677006]))
    unknown call_tmp[677018] "expr temp" "maybe param" "maybe type" "temp"
    (677021 'move' call_tmp[677018](462180 call eltType _mt[243] inds[163397]))
    unknown call_tmp[677023] "expr temp" "maybe param" "maybe type" "temp"
    (677026 'move' call_tmp[677023](462184 call == call_tmp[677011] call_tmp[677018]))
    (462178 call & 1 call_tmp[677023])
  }
  function DefaultSparseDom[164332](?).dsiMyDist[164088](arg _mt[164424]:_MT[238], arg this[164422]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521546] "RVV" "temp"
    unknown call_tmp[677030] "expr temp" "maybe param" "maybe type" "temp"
    (677033 'move' call_tmp[677030](387859 call dist _mt[243] this[164422]))
    (521552 'move' ret[521546](521551 'coerce' call_tmp[677030] unmanaged BaseDist[415379]))
    (521548 return ret[521546])
  }
  { scopeless type
    unmanaged BaseDist[415379]
  }
  function DefaultSparseDom[164332](?).dsiClear[164101](arg _mt[164428]:_MT[238], arg this[164426]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[677037] "expr temp" "maybe param" "maybe type" "temp"
    (677040 'move' call_tmp[677037](387864 call _nnz _mt[243] this[164426]))
    (164105 call = call_tmp[677037] 0)
    (521554 return _void[55])
  }
  function DefaultSparseDom[164332](?).dimIter[164115](arg _mt[164432]:_MT[238], arg this[164430]:DefaultSparseDom[164332](?), param arg d[164113]:_any[178](?), arg ind[164117]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521558] "RVV" "temp"
    unknown call_tmp[677044] "expr temp" "maybe param" "maybe type" "temp"
    (677047 'move' call_tmp[677044](387870 call rank _mt[243] this[164430]))
    unknown call_tmp[677049] "expr temp" "maybe param" "maybe type" "temp"
    (677052 'move' call_tmp[677049](164122 call - call_tmp[677044] 1))
    unknown call_tmp[677054] "expr temp" "maybe param" "maybe type" "temp"
    (677057 'move' call_tmp[677054](164124 call != d[164113] call_tmp[677049]))
    unknown call_tmp[677059] "expr temp" "maybe param" "maybe type" "temp"
    (677062 'move' call_tmp[677059](164148 call _cond_test call_tmp[677054]))
    if call_tmp[677059]
    {
      (164145 call compilerError "dimIter() not supported on sparse domains for dimensions other than the last")
    }
    (164172 call halt "dimIter() not yet implemented for sparse domains")
    (482632 'end of statement')
    unknown yret[521562] "YVV" "temp"
    unknown call_tmp[677066] "expr temp" "maybe param" "maybe type" "temp"
    (677069 'move' call_tmp[677066](164177 call(387875 call (partial) _indices _mt[243] this[164430]) 0))
    (521565 'move' yret[521562](521564 'deref' call_tmp[677066]))
    (521567 yield yret[521562])
    (521560 return ret[521558])
  }
  function DefaultSparseDom[164332](?).dsiAssignDomain[164188](arg _mt[164436]:_MT[238], arg this[164434]:DefaultSparseDom[164332](?), arg rhs[164185]:_domain[125902](?), arg lhsPrivate[164191]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[428176] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492366] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[677073] "expr temp" "maybe param" "maybe type" "temp"
      (677076 'move' call_tmp[677073](164196 call _instance _mt[243] rhs[164185]))
      (492370 'move' call_type_tmp[492366](164199 'typeof' call_tmp[677073]))
    }
    unknown call_tmp[677078] "expr temp" "maybe param" "maybe type" "temp"
    (677081 'move' call_tmp[677078](164201 call _to_borrowed call_type_tmp[492366]))
    unknown call_tmp[677083] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (677086 'move' call_tmp[677083](164203 'typeof' this[164434]))
    (428187 'move' tmp[428176](164204 call == call_tmp[677078] call_tmp[677083]))
    unknown call_tmp[677088] "expr temp" "maybe param" "maybe type" "temp"
    (677091 'move' call_tmp[677088](428189 call _cond_invalid tmp[428176]))
    if call_tmp[677088]
    {
      (428192 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570244] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570245] "maybe param" "temp"
    unknown call_tmp[677093] "expr temp" "maybe param" "maybe type" "temp"
    (677096 'move' call_tmp[677093](428177 call isTrue tmp[428176]))
    (570250 'move' tmp[570245](570248 call _cond_test call_tmp[677093]))
    if tmp[570245]
    {
      unknown tmp[570252] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[677100] "expr temp" "maybe param" "maybe type" "temp"
      (677103 'move' call_tmp[677100](164207 call dsiNumIndices _mt[243] this[164434]))
      unknown call_tmp[677105] "expr temp" "maybe param" "maybe type" "temp"
      (677108 'move' call_tmp[677105](164211 call == call_tmp[677100] 0))
      (570254 'move' tmp[570252](428180 call isTrue call_tmp[677105]))
      (570259 'move' tmp[570244](570256 '_paramFoldLogical' tmp[570245] tmp[570252]))
    }
    {
      (570264 'move' tmp[570244](570261 '_paramFoldLogical' tmp[570245] 0))
    }
    unknown call_tmp[677110] "expr temp" "maybe param" "maybe type" "temp"
    (677113 'move' call_tmp[677110](164260 call _cond_test tmp[570244]))
    if call_tmp[677110]
    {
      unknown call_tmp[677117] "expr temp" "maybe param" "maybe type" "temp"
      (677120 'move' call_tmp[677117](164218 call _nnz _mt[243] this[164434]))
      unknown call_tmp[677124] "expr temp" "maybe param" "maybe type" "temp"
      (677127 'move' call_tmp[677124](164222 call _nnz _mt[243] rhs[164185]))
      (164225 call = call_tmp[677117] call_tmp[677124])
      (482635 'end of statement')
      unknown call_tmp[677131] "expr temp" "maybe param" "maybe type" "temp"
      (677134 'move' call_tmp[677131](164230 call nnzDom _mt[243] this[164434]))
      unknown call_tmp[677138] "expr temp" "maybe param" "maybe type" "temp"
      (677141 'move' call_tmp[677138](164234 call nnzDom _mt[243] rhs[164185]))
      (164237 call = call_tmp[677131] call_tmp[677138])
      (482636 'end of statement')
      unknown call_tmp[677145] "expr temp" "maybe param" "maybe type" "temp"
      (677148 'move' call_tmp[677145](164243 call _indices _mt[243] this[164434]))
      unknown call_tmp[677152] "expr temp" "maybe param" "maybe type" "temp"
      (677155 'move' call_tmp[677152](164247 call _indices _mt[243] rhs[164185]))
      (164250 call = call_tmp[677145] call_tmp[677152])
    }
    {
      (164257 call chpl_assignDomainWithIndsIterSafeForRemoving this[164434] rhs[164185])
    }
    (521569 return _void[55])
  }
  function DefaultSparseDom[164332](?).dsiHasSingleLocalSubdomain[164269](arg _mt[164440]:_MT[238], arg this[164438]:DefaultSparseDom[164332](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521573] "RVV" "param" "temp"
    (521578 'move' ret[521573](521577 'deref' 1))
    (521575 return ret[521573])
  }
  function DefaultSparseDom[164332](?).dsiLocalSubdomain[164283](arg _mt[164444]:_MT[238], arg this[164442]:DefaultSparseDom[164332](?), arg loc[164280]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521582] "RVV" "temp"
    unknown call_tmp[677157] "expr temp" "maybe param" "maybe type" "temp"
    (677160 'move' call_tmp[677157](164286 '_wide_get_locale' this[164442]))
    unknown call_tmp[677162] "expr temp" "maybe param" "maybe type" "temp"
    (677165 'move' call_tmp[677162](164287 call chpl_localeID_to_locale call_tmp[677157]))
    unknown call_tmp[677167] "expr temp" "maybe param" "maybe type" "temp"
    (677170 'move' call_tmp[677167](164290 call == call_tmp[677162] loc[164280]))
    unknown call_tmp[677172] "expr temp" "maybe param" "maybe type" "temp"
    (677175 'move' call_tmp[677172](164324 call _cond_test call_tmp[677167]))
    if call_tmp[677172]
    {
      unknown call_tmp[677177] "expr temp" "maybe param" "maybe type" "temp"
      (677180 'move' call_tmp[677177](164296 call _to_unmanaged this[164442]))
      unknown call_tmp[677182] "expr temp" "maybe param" "maybe type" "temp"
      (677185 'move' call_tmp[677182](164298 call _getDomain call_tmp[677177]))
      (521587 'move' ret[521582](521586 'deref' call_tmp[677182]))
      gotoReturn _end_dsiLocalSubdomain[521580] _end_dsiLocalSubdomain[521580]
    }
    {
      unknown call_tmp[677189] "expr temp" "maybe param" "maybe type" "temp"
      (677192 'move' call_tmp[677189](387888 call rank _mt[243] this[164442]))
      unknown call_tmp[677196] "expr temp" "maybe param" "maybe type" "temp"
      (677199 'move' call_tmp[677196](387893 call idxType _mt[243] this[164442]))
      unknown call_tmp[677203] "expr temp" "maybe param" "maybe type" "temp"
      (677206 'move' call_tmp[677203](387898 call dist _mt[243] this[164442]))
      unknown call_tmp[677210] "expr temp" "maybe param" "maybe type" "temp"
      (677213 'move' call_tmp[677210](387903 call parentDom _mt[243] this[164442]))
      unknown call_tmp[677215] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (677218 'move' call_tmp[677215](747882 'new' DefaultSparseDom[377946](?) call_tmp[677189] call_tmp[677196] call_tmp[677203] call_tmp[677210](_chpl_manager = unmanaged[220](?))))
      const copy[164312] "dead at end of block" "const" "insert auto destroy"
      (544117 'init var' copy[164312] call_tmp[677215])
      (164315 'end of statement')
      unknown call_tmp[677220] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (677223 'move' call_tmp[677220](747883 'new' _domain[125902](?) copy[164312]))
      (521592 'move' ret[521582](521591 'deref' call_tmp[677220]))
      gotoReturn _end_dsiLocalSubdomain[521580] _end_dsiLocalSubdomain[521580]
      (482641 'end of statement' copy[164312])
    }
    label _end_dsiLocalSubdomain[521580]
    (521584 return ret[521582])
  }
  function DefaultSparseDom[164332](?).super[811182](arg _mt[811184]:_MT[238], arg this[811186]:DefaultSparseDom[164332](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811196] "RVV" "temp"
    unknown call_tmp[811203] "expr temp" "maybe param" "maybe type" "temp"
    (811206 'move' call_tmp[811203](811190 '.v' this[811186] c"super"))
    (811201 'move' ret[811196](811200 'deref' call_tmp[811203]))
    (811198 return ret[811196])
  }
  function DefaultSparseDom[164332](?).dist[811208](arg _mt[811210]:_MT[238], arg this[811212]:DefaultSparseDom[164332](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811222] "RVV" "temp"
    unknown call_tmp[811229] "expr temp" "maybe param" "maybe type" "temp"
    (811232 'move' call_tmp[811229](811216 '.' this[811212] c"dist"))
    (811227 'move' ret[811222](811226 'addr of' call_tmp[811229]))
    (811224 return ret[811222])
  }
  function DefaultSparseDom[164332](?)._nnz[811234](arg _mt[811236]:_MT[238], arg this[811238]:DefaultSparseDom[164332](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811248] "RVV" "temp"
    unknown call_tmp[811255] "expr temp" "maybe param" "maybe type" "temp"
    (811258 'move' call_tmp[811255](811242 '.' this[811238] c"_nnz"))
    (811253 'move' ret[811248](811252 'addr of' call_tmp[811255]))
    (811250 return ret[811248])
  }
  function DefaultSparseDom[164332](?)._indices[811260](arg _mt[811262]:_MT[238], arg this[811264]:DefaultSparseDom[164332](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811274] "RVV" "temp"
    unknown call_tmp[811281] "expr temp" "maybe param" "maybe type" "temp"
    (811284 'move' call_tmp[811281](811268 '.' this[811264] c"_indices"))
    (811279 'move' ret[811274](811278 'addr of' call_tmp[811281]))
    (811276 return ret[811274])
  }
  function DefaultSparseDom[164332](?).deinit[811286](arg _mt[811288]:_MT[238], arg this[811290]:DefaultSparseDom[164332](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (811298 return _void[55])
  }
  function DefaultSparseDom[164332](?).writeThis[811300](arg _mt[811304]:_MT[238], arg this[811302]:DefaultSparseDom[164332](?), arg f[811303]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (811309 call writeThisDefaultImpl f[811303] this[811302])
    (811314 return _void[55])
  }
  function DefaultSparseDom[164332](?).readThis[811316](arg _mt[811320]:_MT[238], arg this[811318]:DefaultSparseDom[164332](?), arg f[811319]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (811324 call readThisDefaultImpl f[811319] this[811318])
    (811330 return _void[55])
  }
  type DefaultSparseDom[164332](?) val super[355604]:BaseSparseDomImpl[147961](?) "delay instantiation" "super class" val dist[161574]:unmanaged DefaultDist[415355] unmanaged DefaultDist[415355] val _nnz[161579]:int(64)[13] 0 unknown _indices[161594] "local field"(161592 call chpl__buildArrayRuntimeType(161590 call chpl__ensureDomainExpr nnzDom[146922])(161588 call chpl__buildIndexType rank[148211] idxType[148215]))
  type DefaultSparseDom[377946](?)
  function DefaultSparseArr[165794](?).init[164454](arg _mt[165798]:_MT[238], arg this[165796]:DefaultSparseArr[165794](?), arg eltType[164452]:_any[178](?), param arg rank[164457]:int(64)[13], arg idxType[164460]:_any[178](?), arg dom[164462]:_any[178](?), param arg initElts[164465]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462187] "temporary of super field" "temp"
    (462189 'move' super_tmp[462187](462186 '.v' this[165796] c"super"))
    (164478 call(164469 call (partial) init _mt[243] super_tmp[462187]) eltType[164452] rank[164457] idxType[164460] dom[164462] initElts[164465])
    (482643 'end of statement')
    unknown tmp[462192] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492372] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[677227] "expr temp" "maybe param" "maybe type" "temp"
      (677230 'move' call_tmp[677227](462194 '.v' this[165796] c"super"))
      (492376 'move' call_type_tmp[492372](462197 'typeof' call_tmp[677227]))
    }
    (462198 'move' tmp[462192] call_type_tmp[492372])
    unknown call_tmp[677232] "maybe param" "maybe type" "temp"
    (677235 'move' call_tmp[677232](462203 'cast' tmp[462192] this[165796]))
    unknown chpl__thisAsParent[462200] "dead at end of block" "insert auto destroy" "temp"
    (544119 'init var' chpl__thisAsParent[462200] call_tmp[677232] tmp[462192])
    (462206 'setcid' chpl__thisAsParent[462200])
    (482644 'end of statement')
    (462208 'setcid' this[165796])
    (521596 return _void[55])
  }
  function DefaultSparseArr[165794](?).dsiAccess[164489](arg _mt[165802]:_MT[238], arg this[165800]:DefaultSparseArr[165794](?), arg ind[164486] :
  (387915 call idxType _mt[243] this[165800])) ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521600] "RVV" "temp"
    unknown call_tmp[677239] "expr temp" "maybe param" "maybe type" "temp"
    (677242 'move' call_tmp[677239](164597 call _cond_test 1))
    if call_tmp[677239]
    {
      unknown call_tmp[677246] "expr temp" "maybe param" "maybe type" "temp"
      (677249 'move' call_tmp[677246](361154 call dom _mt[243] this[165800]))
      unknown call_tmp[677253] "expr temp" "maybe param" "maybe type" "temp"
      (677256 'move' call_tmp[677253](164497 call parentDom _mt[243] call_tmp[677246]))
      unknown call_tmp[677260] "expr temp" "maybe param" "maybe type" "temp"
      (677263 'move' call_tmp[677260](164505 call(164500 call (partial) contains _mt[243] call_tmp[677253]) ind[164486]))
      unknown call_tmp[677265] "expr temp" "maybe param" "maybe type" "temp"
      (677268 'move' call_tmp[677265](164506 call ! call_tmp[677260]))
      unknown call_tmp[677270] "expr temp" "maybe param" "maybe type" "temp"
      (677273 'move' call_tmp[677270](164593 call _cond_test call_tmp[677265]))
      if call_tmp[677270]
      {
        unknown call_tmp[677275] "expr temp" "maybe param" "maybe type" "temp"
        (677278 'move' call_tmp[677275](164582 call _cond_test debugDefaultSparse[161565]))
        if call_tmp[677275]
        {
          unknown call_tmp[677280] "expr temp" "maybe param" "maybe type" "temp"
          (677283 'move' call_tmp[677280](361157 call here[90435]))
          unknown call_tmp[677287] "expr temp" "maybe param" "maybe type" "temp"
          (677290 'move' call_tmp[677287](164529 call id _mt[243] call_tmp[677280]))
          (164532 call writeln "On locale " call_tmp[677287])
          (482646 'end of statement')
          (164555 call writeln "In dsiAccess, got index " ind[164486])
          (482647 'end of statement')
          unknown call_tmp[677294] "expr temp" "maybe param" "maybe type" "temp"
          (677297 'move' call_tmp[677294](361161 call dom _mt[243] this[165800]))
          unknown call_tmp[677301] "expr temp" "maybe param" "maybe type" "temp"
          (677304 'move' call_tmp[677301](164577 call parentDom _mt[243] call_tmp[677294]))
          (164580 call writeln "dom.parentDom = " call_tmp[677301])
        }
        (164591 call halt "array index out of bounds: " ind[164486])
      }
    }
    unknown call_tmp[677308] "expr temp" "maybe param" "maybe type" "temp"
    (677311 'move' call_tmp[677308](361166 call dom _mt[243] this[165800]))
    unknown call_tmp[677315] "maybe param" "maybe type" "temp"
    (677318 'move' call_tmp[677315](164614 call(164609 call (partial) find _mt[243] call_tmp[677308]) ind[164486]))
    const tmp[164615] "dead at end of block" "const" "insert auto destroy" "temp"
    (544121 'init var' tmp[164615] call_tmp[677315])
    (164622 call _check_tuple_var_decl tmp[164615] 2)
    (482650 'end of statement')
    unknown call_tmp[677320] "maybe param" "maybe type" "temp"
    (677323 'move' call_tmp[677320](164616 call tmp[164615] 0))
    const found[164603] "dead at end of block" "const" "insert auto destroy"
    (544123 'init var' found[164603] call_tmp[677320])
    unknown call_tmp[677325] "maybe param" "maybe type" "temp"
    (677328 'move' call_tmp[677325](164619 call tmp[164615] 1))
    const loc[164605] "dead at end of block" "const" "insert auto destroy"
    (544125 'init var' loc[164605] call_tmp[677325])
    (164627 'end of statement')
    unknown call_tmp[677330] "expr temp" "maybe param" "maybe type" "temp"
    (677333 'move' call_tmp[677330](164657 call _cond_test found[164603]))
    if call_tmp[677330]
    {
      unknown call_tmp[677337] "expr temp" "maybe param" "maybe type" "temp"
      (677340 'move' call_tmp[677337](164632 call(387932 call (partial) data _mt[243] this[165800]) loc[164605]))
      (521605 'move' ret[521600](521604 'addr of' call_tmp[677337]))
      gotoReturn _end_dsiAccess[521598] _end_dsiAccess[521598]
      (482651 'end of statement' loc[164605])
    }
    {
      (164655 call halt "attempting to assign a 'zero' value in a sparse array: " ind[164486])
    }
    label _end_dsiAccess[521598]
    (521602 return ret[521600])
  }
  where {
    unknown call_tmp[677344] "expr temp" "maybe param" "maybe type" "temp"
    (677347 'move' call_tmp[677344](387920 call rank _mt[243] this[165800]))
    (164493 call == call_tmp[677344] 1)
  }
  function DefaultSparseArr[165794](?).dsiAccess[164672](arg _mt[165806]:_MT[238], arg this[165804]:DefaultSparseArr[165794](?), arg ind[164669] :
  (387939 call idxType _mt[243] this[165804])) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521611] "RVV" "temp"
    unknown call_tmp[677351] "expr temp" "maybe param" "maybe type" "temp"
    (677354 'move' call_tmp[677351](164702 call _cond_test 1))
    if call_tmp[677351]
    {
      unknown call_tmp[677358] "expr temp" "maybe param" "maybe type" "temp"
      (677361 'move' call_tmp[677358](361171 call dom _mt[243] this[165804]))
      unknown call_tmp[677365] "expr temp" "maybe param" "maybe type" "temp"
      (677368 'move' call_tmp[677365](164680 call parentDom _mt[243] call_tmp[677358]))
      unknown call_tmp[677372] "expr temp" "maybe param" "maybe type" "temp"
      (677375 'move' call_tmp[677372](164688 call(164683 call (partial) contains _mt[243] call_tmp[677365]) ind[164669]))
      unknown call_tmp[677377] "expr temp" "maybe param" "maybe type" "temp"
      (677380 'move' call_tmp[677377](164689 call ! call_tmp[677372]))
      unknown call_tmp[677382] "expr temp" "maybe param" "maybe type" "temp"
      (677385 'move' call_tmp[677382](164697 call _cond_test call_tmp[677377]))
      if call_tmp[677382]
      {
        (164695 call halt "array index out of bounds: " ind[164669])
      }
    }
    unknown call_tmp[677389] "expr temp" "maybe param" "maybe type" "temp"
    (677392 'move' call_tmp[677389](361176 call dom _mt[243] this[165804]))
    unknown call_tmp[677396] "maybe param" "maybe type" "temp"
    (677399 'move' call_tmp[677396](164719 call(164714 call (partial) find _mt[243] call_tmp[677389]) ind[164669]))
    const tmp[164720] "dead at end of block" "const" "insert auto destroy" "temp"
    (544127 'init var' tmp[164720] call_tmp[677396])
    (164727 call _check_tuple_var_decl tmp[164720] 2)
    (482655 'end of statement')
    unknown call_tmp[677401] "maybe param" "maybe type" "temp"
    (677404 'move' call_tmp[677401](164721 call tmp[164720] 0))
    const found[164708] "dead at end of block" "const" "insert auto destroy"
    (544129 'init var' found[164708] call_tmp[677401])
    unknown call_tmp[677406] "maybe param" "maybe type" "temp"
    (677409 'move' call_tmp[677406](164724 call tmp[164720] 1))
    const loc[164710] "dead at end of block" "const" "insert auto destroy"
    (544131 'init var' loc[164710] call_tmp[677406])
    (164732 'end of statement')
    unknown call_tmp[677411] "expr temp" "maybe param" "maybe type" "temp"
    (677414 'move' call_tmp[677411](164743 call _cond_test found[164708]))
    if call_tmp[677411]
    {
      unknown call_tmp[677418] "expr temp" "maybe param" "maybe type" "temp"
      (677421 'move' call_tmp[677418](164737 call(387954 call (partial) data _mt[243] this[165804]) loc[164710]))
      (521616 'move' ret[521611](521615 'addr of' call_tmp[677418]))
      gotoReturn _end_dsiAccess[521609] _end_dsiAccess[521609]
      (482656 'end of statement' loc[164710])
    }
    {
      unknown call_tmp[677425] "expr temp" "maybe param" "maybe type" "temp"
      (677428 'move' call_tmp[677425](387960 call irv _mt[243] this[165804]))
      (521621 'move' ret[521611](521620 'addr of' call_tmp[677425]))
      gotoReturn _end_dsiAccess[521609] _end_dsiAccess[521609]
    }
    label _end_dsiAccess[521609]
    (521613 return ret[521611])
  }
  where {
    unknown call_tmp[677432] "expr temp" "maybe param" "maybe type" "temp"
    (677435 'move' call_tmp[677432](387944 call rank _mt[243] this[165804]))
    (164676 call == call_tmp[677432] 1)
  }
  function DefaultSparseArr[165794](?).dsiAccess[164761](arg _mt[165810]:_MT[238], arg this[165808]:DefaultSparseArr[165794](?), arg ind[164758] :
  unknown call_tmp[677439] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521627] "RVV" "temp"
    unknown call_tmp[677451] "expr temp" "maybe param" "maybe type" "temp"
    (677454 'move' call_tmp[677451](164787 call _cond_test 1))
    if call_tmp[677451]
    {
      unknown call_tmp[677458] "expr temp" "maybe param" "maybe type" "temp"
      (677461 'move' call_tmp[677458](361181 call dom _mt[243] this[165808]))
      unknown call_tmp[677465] "expr temp" "maybe param" "maybe type" "temp"
      (677468 'move' call_tmp[677465](164765 call parentDom _mt[243] call_tmp[677458]))
      unknown call_tmp[677472] "expr temp" "maybe param" "maybe type" "temp"
      (677475 'move' call_tmp[677472](164773 call(164768 call (partial) contains _mt[243] call_tmp[677465]) ind[164758]))
      unknown call_tmp[677477] "expr temp" "maybe param" "maybe type" "temp"
      (677480 'move' call_tmp[677477](164774 call ! call_tmp[677472]))
      unknown call_tmp[677482] "expr temp" "maybe param" "maybe type" "temp"
      (677485 'move' call_tmp[677482](164782 call _cond_test call_tmp[677477]))
      if call_tmp[677482]
      {
        (164780 call halt "array index out of bounds: " ind[164758])
      }
    }
    unknown call_tmp[677489] "expr temp" "maybe param" "maybe type" "temp"
    (677492 'move' call_tmp[677489](361186 call dom _mt[243] this[165808]))
    unknown call_tmp[677496] "maybe param" "maybe type" "temp"
    (677499 'move' call_tmp[677496](164804 call(164799 call (partial) find _mt[243] call_tmp[677489]) ind[164758]))
    const tmp[164805] "dead at end of block" "const" "insert auto destroy" "temp"
    (544133 'init var' tmp[164805] call_tmp[677496])
    (164812 call _check_tuple_var_decl tmp[164805] 2)
    (482660 'end of statement')
    unknown call_tmp[677501] "maybe param" "maybe type" "temp"
    (677504 'move' call_tmp[677501](164806 call tmp[164805] 0))
    const found[164793] "dead at end of block" "const" "insert auto destroy"
    (544135 'init var' found[164793] call_tmp[677501])
    unknown call_tmp[677506] "maybe param" "maybe type" "temp"
    (677509 'move' call_tmp[677506](164809 call tmp[164805] 1))
    const loc[164795] "dead at end of block" "const" "insert auto destroy"
    (544137 'init var' loc[164795] call_tmp[677506])
    (164817 'end of statement')
    unknown call_tmp[677511] "expr temp" "maybe param" "maybe type" "temp"
    (677514 'move' call_tmp[677511](164831 call _cond_test found[164793]))
    if call_tmp[677511]
    {
      unknown call_tmp[677518] "expr temp" "maybe param" "maybe type" "temp"
      (677521 'move' call_tmp[677518](164822 call(387980 call (partial) data _mt[243] this[165808]) loc[164795]))
      (521632 'move' ret[521627](521631 'addr of' call_tmp[677518]))
      gotoReturn _end_dsiAccess[521625] _end_dsiAccess[521625]
      (482661 'end of statement' loc[164795])
    }
    {
      (164829 call halt "attempting to assign a 'zero' value in a sparse array: " ind[164758])
    }
    label _end_dsiAccess[521625]
    (521629 return ret[521627])
  }
  function DefaultSparseArr[165794](?).dsiAccess[164848](arg _mt[165814]:_MT[238], arg this[165812]:DefaultSparseArr[165794](?), arg ind[164845] :
  unknown call_tmp[677525] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521638] "RVV" "temp"
    unknown call_tmp[677537] "expr temp" "maybe param" "maybe type" "temp"
    (677540 'move' call_tmp[677537](164878 call _cond_test 1))
    if call_tmp[677537]
    {
      unknown call_tmp[677544] "expr temp" "maybe param" "maybe type" "temp"
      (677547 'move' call_tmp[677544](361191 call dom _mt[243] this[165812]))
      unknown call_tmp[677551] "expr temp" "maybe param" "maybe type" "temp"
      (677554 'move' call_tmp[677551](164856 call parentDom _mt[243] call_tmp[677544]))
      unknown call_tmp[677558] "expr temp" "maybe param" "maybe type" "temp"
      (677561 'move' call_tmp[677558](164864 call(164859 call (partial) contains _mt[243] call_tmp[677551]) ind[164845]))
      unknown call_tmp[677563] "expr temp" "maybe param" "maybe type" "temp"
      (677566 'move' call_tmp[677563](164865 call ! call_tmp[677558]))
      unknown call_tmp[677568] "expr temp" "maybe param" "maybe type" "temp"
      (677571 'move' call_tmp[677568](164873 call _cond_test call_tmp[677563]))
      if call_tmp[677568]
      {
        (164871 call halt "array index out of bounds: " ind[164845])
      }
    }
    unknown call_tmp[677575] "expr temp" "maybe param" "maybe type" "temp"
    (677578 'move' call_tmp[677575](361196 call dom _mt[243] this[165812]))
    unknown call_tmp[677582] "maybe param" "maybe type" "temp"
    (677585 'move' call_tmp[677582](164895 call(164890 call (partial) find _mt[243] call_tmp[677575]) ind[164845]))
    const tmp[164896] "dead at end of block" "const" "insert auto destroy" "temp"
    (544139 'init var' tmp[164896] call_tmp[677582])
    (164903 call _check_tuple_var_decl tmp[164896] 2)
    (482665 'end of statement')
    unknown call_tmp[677587] "maybe param" "maybe type" "temp"
    (677590 'move' call_tmp[677587](164897 call tmp[164896] 0))
    const found[164884] "dead at end of block" "const" "insert auto destroy"
    (544141 'init var' found[164884] call_tmp[677587])
    unknown call_tmp[677592] "maybe param" "maybe type" "temp"
    (677595 'move' call_tmp[677592](164900 call tmp[164896] 1))
    const loc[164886] "dead at end of block" "const" "insert auto destroy"
    (544143 'init var' loc[164886] call_tmp[677592])
    (164908 'end of statement')
    unknown call_tmp[677597] "expr temp" "maybe param" "maybe type" "temp"
    (677600 'move' call_tmp[677597](164919 call _cond_test found[164884]))
    if call_tmp[677597]
    {
      unknown call_tmp[677604] "expr temp" "maybe param" "maybe type" "temp"
      (677607 'move' call_tmp[677604](164913 call(388007 call (partial) data _mt[243] this[165812]) loc[164886]))
      (521643 'move' ret[521638](521642 'deref' call_tmp[677604]))
      gotoReturn _end_dsiAccess[521636] _end_dsiAccess[521636]
      (482666 'end of statement' loc[164886])
    }
    {
      unknown call_tmp[677611] "expr temp" "maybe param" "maybe type" "temp"
      (677614 'move' call_tmp[677611](388013 call irv _mt[243] this[165812]))
      (521648 'move' ret[521638](521647 'deref' call_tmp[677611]))
      gotoReturn _end_dsiAccess[521636] _end_dsiAccess[521636]
    }
    label _end_dsiAccess[521636]
    (521640 return ret[521638])
  }
  where {
    unknown call_tmp[677618] "expr temp" "maybe param" "maybe type" "temp"
    (677621 'move' call_tmp[677618](387997 call eltType _mt[243] this[165812]))
    (164853 call shouldReturnRvalueByValue call_tmp[677618])
  }
  function DefaultSparseArr[165794](?).dsiAccess[164937](arg _mt[165818]:_MT[238], arg this[165816]:DefaultSparseArr[165794](?), arg ind[164934] :
  unknown call_tmp[677625] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521654] "RVV" "temp"
    unknown call_tmp[677637] "expr temp" "maybe param" "maybe type" "temp"
    (677640 'move' call_tmp[677637](164967 call _cond_test 1))
    if call_tmp[677637]
    {
      unknown call_tmp[677644] "expr temp" "maybe param" "maybe type" "temp"
      (677647 'move' call_tmp[677644](361201 call dom _mt[243] this[165816]))
      unknown call_tmp[677651] "expr temp" "maybe param" "maybe type" "temp"
      (677654 'move' call_tmp[677651](164945 call parentDom _mt[243] call_tmp[677644]))
      unknown call_tmp[677658] "expr temp" "maybe param" "maybe type" "temp"
      (677661 'move' call_tmp[677658](164953 call(164948 call (partial) contains _mt[243] call_tmp[677651]) ind[164934]))
      unknown call_tmp[677663] "expr temp" "maybe param" "maybe type" "temp"
      (677666 'move' call_tmp[677663](164954 call ! call_tmp[677658]))
      unknown call_tmp[677668] "expr temp" "maybe param" "maybe type" "temp"
      (677671 'move' call_tmp[677668](164962 call _cond_test call_tmp[677663]))
      if call_tmp[677668]
      {
        (164960 call halt "array index out of bounds: " ind[164934])
      }
    }
    unknown call_tmp[677675] "expr temp" "maybe param" "maybe type" "temp"
    (677678 'move' call_tmp[677675](361206 call dom _mt[243] this[165816]))
    unknown call_tmp[677682] "maybe param" "maybe type" "temp"
    (677685 'move' call_tmp[677682](164984 call(164979 call (partial) find _mt[243] call_tmp[677675]) ind[164934]))
    const tmp[164985] "dead at end of block" "const" "insert auto destroy" "temp"
    (544145 'init var' tmp[164985] call_tmp[677682])
    (164992 call _check_tuple_var_decl tmp[164985] 2)
    (482670 'end of statement')
    unknown call_tmp[677687] "maybe param" "maybe type" "temp"
    (677690 'move' call_tmp[677687](164986 call tmp[164985] 0))
    const found[164973] "dead at end of block" "const" "insert auto destroy"
    (544147 'init var' found[164973] call_tmp[677687])
    unknown call_tmp[677692] "maybe param" "maybe type" "temp"
    (677695 'move' call_tmp[677692](164989 call tmp[164985] 1))
    const loc[164975] "dead at end of block" "const" "insert auto destroy"
    (544149 'init var' loc[164975] call_tmp[677692])
    (164997 'end of statement')
    unknown call_tmp[677697] "expr temp" "maybe param" "maybe type" "temp"
    (677700 'move' call_tmp[677697](165008 call _cond_test found[164973]))
    if call_tmp[677697]
    {
      unknown call_tmp[677704] "expr temp" "maybe param" "maybe type" "temp"
      (677707 'move' call_tmp[677704](165002 call(388038 call (partial) data _mt[243] this[165816]) loc[164975]))
      (521659 'move' ret[521654](521658 'addr of' call_tmp[677704]))
      gotoReturn _end_dsiAccess[521652] _end_dsiAccess[521652]
      (482671 'end of statement' loc[164975])
    }
    {
      unknown call_tmp[677711] "expr temp" "maybe param" "maybe type" "temp"
      (677714 'move' call_tmp[677711](388044 call irv _mt[243] this[165816]))
      (521664 'move' ret[521654](521663 'addr of' call_tmp[677711]))
      gotoReturn _end_dsiAccess[521652] _end_dsiAccess[521652]
    }
    label _end_dsiAccess[521652]
    (521656 return ret[521654])
  }
  where {
    unknown call_tmp[677718] "expr temp" "maybe param" "maybe type" "temp"
    (677721 'move' call_tmp[677718](388028 call eltType _mt[243] this[165816]))
    (164942 call shouldReturnRvalueByConstRef call_tmp[677718])
  }
  function DefaultSparseArr[165794](?).these[165019](arg _mt[165822]:_MT[238], arg this[165820]:DefaultSparseArr[165794](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521670] "RVV" "temp"
    {
      unknown _indexOfInterest[165035] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165036] "expr temp" "temp"
      unknown call_tmp[677725] "expr temp" "maybe param" "maybe type" "temp"
      (677728 'move' call_tmp[677725](361211 call dom _mt[243] this[165820]))
      unknown call_tmp[677732] "expr temp" "maybe param" "maybe type" "temp"
      (677735 'move' call_tmp[677732](165050 call _nnz _mt[243] call_tmp[677725]))
      unknown call_tmp[677737] "expr temp" "maybe param" "maybe type" "temp"
      (677740 'move' call_tmp[677737](165053 call chpl_direct_range_iter 1 call_tmp[677732] 1))
      (165045 'move' _iterator[165036](165043 call _getIterator call_tmp[677737]))
      Defer
      {
        {
          (165069 call _freeIterator _iterator[165036])
        }
      }
      { scopeless type
        (165058 'move' _indexOfInterest[165035](165055 call iteratorIndex _iterator[165036]))
      }
      ForLoop[165037]
      {
        unknown i[165062] "index var" "insert auto destroy"
        (482675 'end of statement')
        (165064 'move' i[165062] _indexOfInterest[165035])
        (482676 'end of statement' i[165062])
        unknown yret[521674] "YVV" "temp"
        unknown call_tmp[677744] "expr temp" "maybe param" "maybe type" "temp"
        (677747 'move' call_tmp[677744](165032 call(388049 call (partial) data _mt[243] this[165820]) i[165062]))
        (521677 'move' yret[521674](521676 'addr of' call_tmp[677744]))
        (521679 yield yret[521674])
        (482678 'end of statement' i[165062])
        label _continueLabel[165040]
        _indexOfInterest[165035]
        _iterator[165036]
      }
      label _breakLabel[165041]
    }
    (521672 return ret[521670])
  }
  function DefaultSparseArr[165794](?).these[165085](arg _mt[165826]:_MT[238], arg this[165824]:DefaultSparseArr[165794](?), param arg tag[165082]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521683] "RVV" "temp"
    unknown call_tmp[677751] "expr temp" "maybe param" "maybe type" "temp"
    (677754 'move' call_tmp[677751](361217 call dom _mt[243] this[165824]))
    unknown call_tmp[677758] "maybe param" "maybe type" "temp"
    (677761 'move' call_tmp[677758](165095 call _nnz _mt[243] call_tmp[677751]))
    const numElems[165098] "dead at end of block" "const" "insert auto destroy"
    (544151 'init var' numElems[165098] call_tmp[677758])
    (165101 'end of statement')
    unknown call_tmp[677763] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (677766 'move' call_tmp[677763](165108 'typeof' numElems[165098]))
    unknown call_tmp[677768] "expr temp" "maybe param" "maybe type" "temp"
    (677771 'move' call_tmp[677768](165106 call _computeNumChunks numElems[165098]))
    unknown call_tmp[677773] "maybe param" "maybe type" "temp"
    (677776 'move' call_tmp[677773](165109 call _cast call_tmp[677763] call_tmp[677768]))
    const numChunks[165111] "dead at end of block" "const" "insert auto destroy"
    (544153 'init var' numChunks[165111] call_tmp[677773])
    (165114 'end of statement' numElems[165098] numElems[165098])
    unknown call_tmp[677778] "expr temp" "maybe param" "maybe type" "temp"
    (677781 'move' call_tmp[677778](165142 call _cond_test debugDefaultSparse[161565]))
    if call_tmp[677778]
    {
      (165139 call writeln "DefaultSparseArr standalone: " numChunks[165111] " chunks, " numElems[165098] " elems")
      (482682 'end of statement' numChunks[165111] numElems[165098])
    }
    unknown call_tmp[677783] "expr temp" "maybe param" "maybe type" "temp"
    (677786 'move' call_tmp[677783](165148 call <= numChunks[165111] 1))
    unknown call_tmp[677788] "expr temp" "maybe param" "maybe type" "temp"
    (677791 'move' call_tmp[677788](165452 call _cond_test call_tmp[677783]))
    if call_tmp[677788]
    {
      {
        unknown _indexOfInterest[165162] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[165163] "expr temp" "temp"
        unknown call_tmp[677793] "expr temp" "maybe param" "maybe type" "temp"
        (677796 'move' call_tmp[677793](165177 call chpl_direct_range_iter 1 numElems[165098] 1))
        (165172 'move' _iterator[165163](165170 call _getIterator call_tmp[677793]))
        Defer
        {
          {
            (165193 call _freeIterator _iterator[165163])
          }
        }
        { scopeless type
          (165182 'move' _indexOfInterest[165162](165179 call iteratorIndex _iterator[165163]))
        }
        ForLoop[165164]
        {
          unknown i[165186] "index var" "insert auto destroy"
          (482686 'end of statement')
          (165188 'move' i[165186] _indexOfInterest[165162])
          (482687 'end of statement' i[165186])
          {
            unknown yret[521687] "YVV" "temp"
            unknown call_tmp[677800] "expr temp" "maybe param" "maybe type" "temp"
            (677803 'move' call_tmp[677800](165158 call(388063 call (partial) data _mt[243] this[165824]) i[165186]))
            (521690 'move' yret[521687](521689 'addr of' call_tmp[677800]))
            (521692 yield yret[521687])
            (482689 'end of statement' i[165186])
          }
          label _continueLabel[165167]
          _indexOfInterest[165162]
          _iterator[165163]
        }
        label _breakLabel[165168]
      }
    }
    {
      {
        unknown tmpIter[165255] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[677805] "expr temp" "maybe param" "maybe type" "temp"
        (677808 'move' call_tmp[677805](165208 call chpl_build_bounded_range 1 numElems[165098]))
        (165258 'move' tmpIter[165255](165212 call chunks module=[255] RangeChunk[266370] call_tmp[677805] numChunks[165111]))
        unknown isRngDomArr[165432] "maybe param" "temp"
        unknown tmp[428197] "maybe param" "temp"
        (428208 'move' tmp[428197](165434 call isBoundedRange tmpIter[165255]))
        unknown call_tmp[677810] "expr temp" "maybe param" "maybe type" "temp"
        (677813 'move' call_tmp[677810](428210 call _cond_invalid tmp[428197]))
        if call_tmp[677810]
        {
          (428213 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570298] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570299] "maybe param" "temp"
        unknown call_tmp[677815] "expr temp" "maybe param" "maybe type" "temp"
        (677818 'move' call_tmp[677815](428198 call isTrue tmp[428197]))
        (570304 'move' tmp[570299](570302 call _cond_test call_tmp[677815]))
        if tmp[570299]
        {
          (570309 'move' tmp[570298](570306 '_paramFoldLogical' tmp[570299] 1))
        }
        {
          unknown tmp[428218] "maybe param" "temp"
          (428229 'move' tmp[428218](165437 call isDomain tmpIter[165255]))
          unknown call_tmp[677820] "expr temp" "maybe param" "maybe type" "temp"
          (677823 'move' call_tmp[677820](428231 call _cond_invalid tmp[428218]))
          if call_tmp[677820]
          {
            (428234 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[570271] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570272] "maybe param" "temp"
          unknown call_tmp[677825] "expr temp" "maybe param" "maybe type" "temp"
          (677828 'move' call_tmp[677825](428219 call isTrue tmp[428218]))
          (570277 'move' tmp[570272](570275 call _cond_test call_tmp[677825]))
          if tmp[570272]
          {
            (570282 'move' tmp[570271](570279 '_paramFoldLogical' tmp[570272] 1))
          }
          {
            unknown tmp[570284] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[677830] "expr temp" "maybe param" "maybe type" "temp"
            (677833 'move' call_tmp[677830](165440 call isArray tmpIter[165255]))
            (570286 'move' tmp[570284](428223 call isTrue call_tmp[677830]))
            (570291 'move' tmp[570271](570288 '_paramFoldLogical' tmp[570272] tmp[570284]))
          }
          unknown tmp[570311] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (570313 'move' tmp[570311](428202 call isTrue tmp[570271]))
          (570318 'move' tmp[570298](570315 '_paramFoldLogical' tmp[570299] tmp[570311]))
        }
        (165447 'move' isRngDomArr[165432] tmp[570298])
        if isRngDomArr[165432]
        {
          const _coforallCount[165299] "const" "end count" "temp"
          (165368 'move' _coforallCount[165299](165365 call _endCountAlloc 1))
          unknown numTasks[165300] "temp"
          (165352 'move' numTasks[165300](165348 call size _mt[243] tmpIter[165255]))
          (165343 call _upEndCount _coforallCount[165299] 1 numTasks[165300])
          (482692 'end of statement')
          (165340 call chpl_resetTaskSpawn numTasks[165300])
          (482693 'end of statement')
          unknown _indexOfInterest[165307] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165308] "expr temp" "temp"
          (165317 'move' _iterator[165308](165315 call _getIterator tmpIter[165255]))
          Defer
          {
            {
              (165333 call _freeIterator _iterator[165308])
            }
          }
          { scopeless type
            (165322 'move' _indexOfInterest[165307](165319 call iteratorIndex _iterator[165308]))
          }
          ForLoop[165309]
          {
            unknown chunk[165326] "coforall index var" "index var" "insert auto destroy"
            (482695 'end of statement')
            (165328 'move' chunk[165326] _indexOfInterest[165307])
            (482696 'end of statement' chunk[165326])
            (935237 call coforall_fn[935235])
            function coforall_fn[935235]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[165261] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165263] "expr temp" "temp"
                (165265 'move' _iterator[165263](165268 call _getIterator chunk[165326]))
                Defer
                {
                  {
                    (165272 call _freeIterator _iterator[165263])
                  }
                }
                { scopeless type
                  (165276 'move' _indexOfInterest[165261](165279 call iteratorIndex _iterator[165263]))
                }
                ForLoop[165281]
                {
                  unknown i[165284] "index var" "insert auto destroy"
                  (482699 'end of statement')
                  (165286 'move' i[165284] _indexOfInterest[165261])
                  (482700 'end of statement' i[165284])
                  unknown yret[521694] "YVV" "temp"
                  unknown call_tmp[677839] "expr temp" "maybe param" "maybe type" "temp"
                  (677842 'move' call_tmp[677839](165292 call(388080 call (partial) data _mt[243] this[165824]) i[165284]))
                  (521697 'move' yret[521694](521696 'addr of' call_tmp[677839]))
                  (521699 yield yret[521694])
                  (482702 'end of statement' i[165284])
                  label _continueLabel[165294]
                  _indexOfInterest[165261]
                  _iterator[165263]
                }
                label _breakLabel[165296]
              }
              (165302 call _downEndCount _coforallCount[165299] nil[44])
              (935240 return _void[55])
            }
            {
            }
            label _continueLabel[165312]
            _indexOfInterest[165307]
            _iterator[165308]
          }
          label _breakLabel[165313]
          Defer
          {
            {
              (165355 call _endCountFree _coforallCount[165299])
            }
          }
          (165360 call _waitEndCount _coforallCount[165299] 1 numTasks[165300])
        }
        {
          const _coforallCount[165372] "const" "end count" "temp"
          (165429 'move' _coforallCount[165372](165426 call _endCountAlloc 1))
          unknown _indexOfInterest[165380] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165381] "expr temp" "temp"
          (165390 'move' _iterator[165381](165388 call _getIterator tmpIter[165255]))
          Defer
          {
            {
              (165406 call _freeIterator _iterator[165381])
            }
          }
          { scopeless type
            (165395 'move' _indexOfInterest[165380](165392 call iteratorIndex _iterator[165381]))
          }
          ForLoop[165382]
          {
            unknown chunk[165399] "coforall index var" "index var" "insert auto destroy"
            (482708 'end of statement')
            (165401 'move' chunk[165399] _indexOfInterest[165380])
            (482709 'end of statement' chunk[165399])
            (165413 call _upEndCount _coforallCount[165372] 1)
            (482711 'end of statement')
            (935244 call coforall_fn[935242])
            function coforall_fn[935242]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[165221] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165222] "expr temp" "temp"
                (165231 'move' _iterator[165222](165229 call _getIterator chunk[165399]))
                Defer
                {
                  {
                    (165247 call _freeIterator _iterator[165222])
                  }
                }
                { scopeless type
                  (165236 'move' _indexOfInterest[165221](165233 call iteratorIndex _iterator[165222]))
                }
                ForLoop[165223]
                {
                  unknown i[165240] "index var" "insert auto destroy"
                  (482713 'end of statement')
                  (165242 'move' i[165240] _indexOfInterest[165221])
                  (482714 'end of statement' i[165240])
                  unknown yret[521701] "YVV" "temp"
                  unknown call_tmp[677846] "expr temp" "maybe param" "maybe type" "temp"
                  (677849 'move' call_tmp[677846](165218 call(388073 call (partial) data _mt[243] this[165824]) i[165240]))
                  (521704 'move' yret[521701](521703 'addr of' call_tmp[677846]))
                  (521706 yield yret[521701])
                  (482716 'end of statement' i[165240])
                  label _continueLabel[165226]
                  _indexOfInterest[165221]
                  _iterator[165222]
                }
                label _breakLabel[165227]
              }
              (165375 call _downEndCount _coforallCount[165372] nil[44])
              (935247 return _void[55])
            }
            {
            }
            label _continueLabel[165385]
            _indexOfInterest[165380]
            _iterator[165381]
          }
          label _breakLabel[165386]
          Defer
          {
            {
              (165417 call _endCountFree _coforallCount[165372])
            }
          }
          (165422 call _waitEndCount _coforallCount[165372] 1)
        }
        (361221 'referenced modules list' RangeChunk[266370])
      }
    }
    (521685 return ret[521683])
  }
  where {
    (165092 call == tag[165082] standalone[451])
  }
  function DefaultSparseArr[165794](?).these[165465](arg _mt[165830]:_MT[238], arg this[165828]:DefaultSparseArr[165794](?), param arg tag[165462]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521710] "RVV" "temp"
    {
      unknown _indexOfInterest[165485] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165486] "expr temp" "temp"
      unknown call_tmp[677853] "expr temp" "maybe param" "maybe type" "temp"
      (677856 'move' call_tmp[677853](361229 call dom _mt[243] this[165828]))
      unknown call_tmp[677860] "expr temp" "maybe param" "maybe type" "temp"
      (677863 'move' call_tmp[677860](165481 call(165476 call (partial) these _mt[243] call_tmp[677853]) tag[165462]))
      (165495 'move' _iterator[165486](165493 call _getIterator call_tmp[677860]))
      Defer
      {
        {
          (165512 call _freeIterator _iterator[165486])
        }
      }
      { scopeless type
        (165501 'move' _indexOfInterest[165485](165498 call iteratorIndex _iterator[165486]))
      }
      ForLoop[165487]
      {
        unknown followThis[165505] "index var" "insert auto destroy"
        (482722 'end of statement')
        (165507 'move' followThis[165505] _indexOfInterest[165485])
        (482723 'end of statement' followThis[165505])
        unknown yret[521714] "YVV" "temp"
        (521717 'move' yret[521714](521716 'deref' followThis[165505]))
        (521719 yield yret[521714])
        (482725 'end of statement' followThis[165505])
        label _continueLabel[165490]
        _indexOfInterest[165485]
        _iterator[165486]
      }
      label _breakLabel[165491]
    }
    (521712 return ret[521710])
  }
  where {
    (165472 call == tag[165462] leader[447])
  }
  function DefaultSparseArr[165794](?).these[165529](arg _mt[165834]:_MT[238], arg this[165832]:DefaultSparseArr[165794](?), param arg tag[165526]:iterKind[453], arg followThis[165537]:_tuple[56199](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521723] "RVV" "temp"
    unknown tmp[165555] "dead at end of block" "insert auto destroy" "temp"
    (544155 'init var' tmp[165555] followThis[165537])
    (165565 call _check_tuple_var_decl tmp[165555] 3)
    (482727 'end of statement')
    unknown call_tmp[677865] "maybe param" "maybe type" "temp"
    (677868 'move' call_tmp[677865](165556 call tmp[165555] 0))
    unknown followThisDom[165547] "dead at end of block" "insert auto destroy"
    (544157 'init var' followThisDom[165547] call_tmp[677865])
    unknown call_tmp[677870] "maybe param" "maybe type" "temp"
    (677873 'move' call_tmp[677870](165559 call tmp[165555] 1))
    unknown startIx[165549] "dead at end of block" "insert auto destroy"
    (544159 'init var' startIx[165549] call_tmp[677870])
    unknown call_tmp[677875] "maybe param" "maybe type" "temp"
    (677878 'move' call_tmp[677875](165562 call tmp[165555] 2))
    unknown endIx[165551] "dead at end of block" "insert auto destroy"
    (544161 'init var' endIx[165551] call_tmp[677875])
    (165570 'end of statement')
    unknown call_tmp[677882] "expr temp" "maybe param" "maybe type" "temp"
    (677885 'move' call_tmp[677882](165574 call dom _mt[243] this[165832]))
    unknown call_tmp[677887] "expr temp" "maybe param" "maybe type" "temp"
    (677890 'move' call_tmp[677887](165577 call != followThisDom[165547] call_tmp[677882]))
    unknown call_tmp[677892] "expr temp" "maybe param" "maybe type" "temp"
    (677895 'move' call_tmp[677892](165600 call _cond_test call_tmp[677887]))
    if call_tmp[677892]
    {
      (165598 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays")
    }
    unknown call_tmp[677897] "expr temp" "maybe param" "maybe type" "temp"
    (677900 'move' call_tmp[677897](165630 call _cond_test debugDefaultSparse[161565]))
    if call_tmp[677897]
    {
      (165628 call writeln "DefaultSparseArr follower: " startIx[165549] ".." endIx[165551])
      (482729 'end of statement' startIx[165549] endIx[165551])
    }
    {
      unknown _indexOfInterest[165646] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165647] "expr temp" "temp"
      unknown call_tmp[677902] "expr temp" "maybe param" "maybe type" "temp"
      (677905 'move' call_tmp[677902](165661 call chpl_direct_range_iter startIx[165549] endIx[165551] 1))
      (165656 'move' _iterator[165647](165654 call _getIterator call_tmp[677902]))
      Defer
      {
        {
          (165677 call _freeIterator _iterator[165647])
        }
      }
      { scopeless type
        (165666 'move' _indexOfInterest[165646](165663 call iteratorIndex _iterator[165647]))
      }
      ForLoop[165648]
      {
        unknown i[165670] "index var" "insert auto destroy"
        (482733 'end of statement')
        (165672 'move' i[165670] _indexOfInterest[165646])
        (482734 'end of statement' i[165670])
        unknown yret[521727] "YVV" "temp"
        unknown call_tmp[677909] "expr temp" "maybe param" "maybe type" "temp"
        (677912 'move' call_tmp[677909](165643 call(388097 call (partial) data _mt[243] this[165832]) i[165670]))
        (521730 'move' yret[521727](521729 'addr of' call_tmp[677909]))
        (521732 yield yret[521727])
        (482736 'end of statement' i[165670])
        label _continueLabel[165651]
        _indexOfInterest[165646]
        _iterator[165647]
      }
      label _breakLabel[165652]
    }
    (521725 return ret[521723])
  }
  where {
    unknown call_tmp[677914] "expr temp" "maybe param" "maybe type" "temp"
    (677917 'move' call_tmp[677914](165545 call == tag[165526] follower[449]))
    unknown call_tmp[677919] "expr temp" "maybe param" "maybe type" "temp"
    (677922 'move' call_tmp[677919](462214 'query' followThis[165537] c"size"))
    unknown call_tmp[677924] "expr temp" "maybe param" "maybe type" "temp"
    (677927 'move' call_tmp[677924](462215 call == 3 call_tmp[677919]))
    (462217 call & call_tmp[677914] call_tmp[677924])
  }
  function DefaultSparseArr[165794](?).these[165693](arg _mt[165838]:_MT[238], arg this[165836]:DefaultSparseArr[165794](?), param arg tag[165690]:iterKind[453], arg followThis[165695]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521736] "RVV" "temp"
    (165707 call compilerError "Sparse iterators can't yet be zippered with others")
    (482738 'end of statement')
    unknown yret[521740] "YVV" "temp"
    (521743 'move' yret[521740](521742 'deref' 0))
    (521745 yield yret[521740])
    (521738 return ret[521736])
  }
  where {
    (165702 call == tag[165690] follower[449])
  }
  function DefaultSparseArr[165794](?).dsiTargetLocales[165718](arg _mt[165842]:_MT[238], arg this[165840]:DefaultSparseArr[165794](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (165739 call compilerError "targetLocales is unsupported by sparse domains")
    (521747 return _void[55])
  }
  function DefaultSparseArr[165794](?).dsiHasSingleLocalSubdomain[165746](arg _mt[165846]:_MT[238], arg this[165844]:DefaultSparseArr[165794](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521751] "RVV" "param" "temp"
    (521756 'move' ret[521751](521755 'deref' 1))
    (521753 return ret[521751])
  }
  function DefaultSparseArr[165794](?).dsiLocalSubdomain[165760](arg _mt[165850]:_MT[238], arg this[165848]:DefaultSparseArr[165794](?), arg loc[165757]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521760] "RVV" "temp"
    unknown call_tmp[677929] "expr temp" "maybe param" "maybe type" "temp"
    (677932 'move' call_tmp[677929](165763 '_wide_get_locale' this[165848]))
    unknown call_tmp[677934] "expr temp" "maybe param" "maybe type" "temp"
    (677937 'move' call_tmp[677934](165764 call chpl_localeID_to_locale call_tmp[677929]))
    unknown call_tmp[677939] "expr temp" "maybe param" "maybe type" "temp"
    (677942 'move' call_tmp[677939](165767 call == call_tmp[677934] loc[165757]))
    unknown call_tmp[677944] "expr temp" "maybe param" "maybe type" "temp"
    (677947 'move' call_tmp[677944](165786 call _cond_test call_tmp[677939]))
    if call_tmp[677944]
    {
      unknown call_tmp[677951] "expr temp" "maybe param" "maybe type" "temp"
      (677954 'move' call_tmp[677951](388109 call dom _mt[243] this[165848]))
      unknown call_tmp[677956] "expr temp" "maybe param" "maybe type" "temp"
      (677959 'move' call_tmp[677956](165772 call _getDomain call_tmp[677951]))
      (521765 'move' ret[521760](521764 'deref' call_tmp[677956]))
      gotoReturn _end_dsiLocalSubdomain[521758] _end_dsiLocalSubdomain[521758]
    }
    {
      unknown call_tmp[677963] "expr temp" "maybe param" "maybe type" "temp"
      (677966 'move' call_tmp[677963](361237 call dom _mt[243] this[165848]))
      unknown call_tmp[677970] "expr temp" "maybe param" "maybe type" "temp"
      (677973 'move' call_tmp[677970](165782 call(165777 call (partial) dsiLocalSubdomain _mt[243] call_tmp[677963]) loc[165757]))
      (521770 'move' ret[521760](521769 'deref' call_tmp[677970]))
      gotoReturn _end_dsiLocalSubdomain[521758] _end_dsiLocalSubdomain[521758]
    }
    label _end_dsiLocalSubdomain[521758]
    (521762 return ret[521760])
  }
  function DefaultSparseArr[165794](?).super[811332](arg _mt[811334]:_MT[238], arg this[811336]:DefaultSparseArr[165794](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811346] "RVV" "temp"
    unknown call_tmp[811353] "expr temp" "maybe param" "maybe type" "temp"
    (811356 'move' call_tmp[811353](811340 '.v' this[811336] c"super"))
    (811351 'move' ret[811346](811350 'deref' call_tmp[811353]))
    (811348 return ret[811346])
  }
  function DefaultSparseArr[165794](?).deinit[811358](arg _mt[811360]:_MT[238], arg this[811362]:DefaultSparseArr[165794](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (811370 return _void[55])
  }
  type DefaultSparseArr[165794](?) val super[355606]:BaseSparseArrImpl[150527](?) "delay instantiation" "super class"
  type DefaultSparseArr[387338](?)
  function DefaultSparseDom[164332](?).dsiSerialWrite[165858](arg _mt[165867]:_MT[238], arg this[165864]:DefaultSparseDom[164332](?) :
  DefaultSparseDom[164332](?), arg f[165856]:_any[178](?), arg printBrackets[165861] :
  1 =
  1) : _unknown[51] throws "method" "no return value for void"
  {
    unknown call_tmp[677977] "expr temp" "maybe param" "maybe type" "temp"
    (677980 'move' call_tmp[677977](388115 call rank _mt[243] this[165864]))
    unknown call_tmp[677982] "expr temp" "maybe param" "maybe type" "temp"
    (677985 'move' call_tmp[677982](165871 call == call_tmp[677977] 1))
    unknown call_tmp[677987] "expr temp" "maybe param" "maybe type" "temp"
    (677990 'move' call_tmp[677987](166136 call _cond_test call_tmp[677982]))
    if call_tmp[677987]
    {
      unknown call_tmp[677992] "expr temp" "maybe param" "maybe type" "temp"
      (677995 'move' call_tmp[677992](165879 call _cond_test printBrackets[165861]))
      if call_tmp[677992]
      {
        (165876 call <~> f[165856] "{")
      }
      unknown call_tmp[677999] "expr temp" "maybe param" "maybe type" "temp"
      (678002 'move' call_tmp[677999](388122 call _nnz _mt[243] this[165864]))
      unknown call_tmp[678004] "expr temp" "maybe param" "maybe type" "temp"
      (678007 'move' call_tmp[678004](165887 call >= call_tmp[677999] 1))
      unknown call_tmp[678009] "expr temp" "maybe param" "maybe type" "temp"
      (678012 'move' call_tmp[678009](165953 call _cond_test call_tmp[678004]))
      if call_tmp[678009]
      {
        unknown call_tmp[678016] "expr temp" "maybe param" "maybe type" "temp"
        (678019 'move' call_tmp[678016](165893 call(388128 call (partial) _indices _mt[243] this[165864]) 1))
        (165894 call <~> f[165856] call_tmp[678016])
        (482745 'end of statement')
        {
          unknown _indexOfInterest[165915] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165916] "expr temp" "temp"
          unknown call_tmp[678023] "expr temp" "maybe param" "maybe type" "temp"
          (678026 'move' call_tmp[678023](388140 call _nnz _mt[243] this[165864]))
          unknown call_tmp[678028] "expr temp" "maybe param" "maybe type" "temp"
          (678031 'move' call_tmp[678028](165930 call chpl_direct_range_iter 2 call_tmp[678023] 1))
          (165925 'move' _iterator[165916](165923 call _getIterator call_tmp[678028]))
          Defer
          {
            {
              (165946 call _freeIterator _iterator[165916])
            }
          }
          { scopeless type
            (165935 'move' _indexOfInterest[165915](165932 call iteratorIndex _iterator[165916]))
          }
          ForLoop[165917]
          {
            unknown i[165939] "index var" "insert auto destroy"
            (482747 'end of statement')
            (165941 'move' i[165939] _indexOfInterest[165915])
            (482748 'end of statement' i[165939])
            {
              unknown call_tmp[678033] "expr temp" "maybe param" "maybe type" "temp"
              (678036 'move' call_tmp[678033](165905 call <~> f[165856] " "))
              unknown call_tmp[678040] "expr temp" "maybe param" "maybe type" "temp"
              (678043 'move' call_tmp[678040](165910 call(388134 call (partial) _indices _mt[243] this[165864]) i[165939]))
              (165911 call <~> call_tmp[678033] call_tmp[678040])
              (482750 'end of statement' i[165939])
            }
            label _continueLabel[165920]
            _indexOfInterest[165915]
            _iterator[165916]
          }
          label _breakLabel[165921]
        }
      }
      unknown call_tmp[678045] "expr temp" "maybe param" "maybe type" "temp"
      (678048 'move' call_tmp[678045](165963 call _cond_test printBrackets[165861]))
      if call_tmp[678045]
      {
        (165960 call <~> f[165856] "}")
      }
    }
    {
      unknown call_tmp[678050] "expr temp" "maybe param" "maybe type" "temp"
      (678053 'move' call_tmp[678050](165990 call _cond_test printBrackets[165861]))
      if call_tmp[678050]
      {
        (165987 call <~> f[165856] "{\n")
      }
      unknown call_tmp[678057] "expr temp" "maybe param" "maybe type" "temp"
      (678060 'move' call_tmp[678057](388149 call _nnz _mt[243] this[165864]))
      unknown call_tmp[678062] "expr temp" "maybe param" "maybe type" "temp"
      (678065 'move' call_tmp[678062](165998 call >= call_tmp[678057] 1))
      unknown call_tmp[678067] "expr temp" "maybe param" "maybe type" "temp"
      (678070 'move' call_tmp[678067](166105 call _cond_test call_tmp[678062]))
      if call_tmp[678067]
      {
        unknown call_tmp[678074] "maybe param" "maybe type" "temp"
        (678077 'move' call_tmp[678074](166003 call(388154 call (partial) _indices _mt[243] this[165864]) 1))
        unknown prevInd[166004] "dead at end of block" "insert auto destroy"
        (544163 'init var' prevInd[166004] call_tmp[678074])
        (166007 'end of statement')
        unknown call_tmp[678079] "expr temp" "maybe param" "maybe type" "temp"
        (678082 'move' call_tmp[678079](166011 call <~> f[165856] " "))
        (166014 call <~> call_tmp[678079] prevInd[166004])
        (482754 'end of statement' prevInd[166004])
        {
          unknown _indexOfInterest[166062] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166063] "expr temp" "temp"
          unknown call_tmp[678086] "expr temp" "maybe param" "maybe type" "temp"
          (678089 'move' call_tmp[678086](388178 call _nnz _mt[243] this[165864]))
          unknown call_tmp[678091] "expr temp" "maybe param" "maybe type" "temp"
          (678094 'move' call_tmp[678091](166077 call chpl_direct_range_iter 2 call_tmp[678086] 1))
          (166072 'move' _iterator[166063](166070 call _getIterator call_tmp[678091]))
          Defer
          {
            {
              (166093 call _freeIterator _iterator[166063])
            }
          }
          { scopeless type
            (166082 'move' _indexOfInterest[166062](166079 call iteratorIndex _iterator[166063]))
          }
          ForLoop[166064]
          {
            unknown i[166086] "index var" "insert auto destroy"
            (482757 'end of statement')
            (166088 'move' i[166086] _indexOfInterest[166062])
            (482758 'end of statement' i[166086])
            {
              unknown call_tmp[678096] "expr temp" "maybe param" "maybe type" "temp"
              (678099 'move' call_tmp[678096](166025 call prevInd[166004] 0))
              unknown call_tmp[678103] "expr temp" "maybe param" "maybe type" "temp"
              (678106 'move' call_tmp[678103](166029 call(388162 call (partial) _indices _mt[243] this[165864]) i[166086]))
              unknown call_tmp[678108] "expr temp" "maybe param" "maybe type" "temp"
              (678111 'move' call_tmp[678108](166032 call call_tmp[678103] 0))
              unknown call_tmp[678113] "expr temp" "maybe param" "maybe type" "temp"
              (678116 'move' call_tmp[678113](166033 call != call_tmp[678096] call_tmp[678108]))
              unknown call_tmp[678118] "expr temp" "maybe param" "maybe type" "temp"
              (678121 'move' call_tmp[678118](166041 call _cond_test call_tmp[678113]))
              if call_tmp[678118]
              {
                (166037 call <~> f[165856] "\n")
              }
              unknown call_tmp[678125] "expr temp" "maybe param" "maybe type" "temp"
              (678128 'move' call_tmp[678125](166050 call(388170 call (partial) _indices _mt[243] this[165864]) i[166086]))
              (166051 call = prevInd[166004] call_tmp[678125])
              (482761 'end of statement' prevInd[166004] i[166086])
              unknown call_tmp[678130] "expr temp" "maybe param" "maybe type" "temp"
              (678133 'move' call_tmp[678130](166056 call <~> f[165856] " "))
              (166059 call <~> call_tmp[678130] prevInd[166004])
              (482764 'end of statement' prevInd[166004])
            }
            label _continueLabel[166067]
            _indexOfInterest[166062]
            _iterator[166063]
          }
          label _breakLabel[166068]
        }
        (166102 call <~> f[165856] "\n")
      }
      unknown call_tmp[678135] "expr temp" "maybe param" "maybe type" "temp"
      (678138 'move' call_tmp[678135](166131 call _cond_test printBrackets[165861]))
      if call_tmp[678135]
      {
        (166128 call <~> f[165856] "}\n")
      }
    }
    (521774 return _void[55])
  }
  function DefaultSparseArr[165794](?).dsiSerialWrite[166148](arg _mt[166153]:_MT[238], arg this[166150]:DefaultSparseArr[165794](?) :
  DefaultSparseArr[165794](?), arg f[166146]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown call_tmp[678142] "expr temp" "maybe param" "maybe type" "temp"
    (678145 'move' call_tmp[678142](388186 call rank _mt[243] this[166150]))
    unknown call_tmp[678147] "expr temp" "maybe param" "maybe type" "temp"
    (678150 'move' call_tmp[678147](166157 call == call_tmp[678142] 1))
    unknown call_tmp[678152] "expr temp" "maybe param" "maybe type" "temp"
    (678155 'move' call_tmp[678152](166379 call _cond_test call_tmp[678147]))
    if call_tmp[678152]
    {
      unknown call_tmp[678159] "expr temp" "maybe param" "maybe type" "temp"
      (678162 'move' call_tmp[678159](361242 call dom _mt[243] this[166150]))
      unknown call_tmp[678166] "expr temp" "maybe param" "maybe type" "temp"
      (678169 'move' call_tmp[678166](166160 call _nnz _mt[243] call_tmp[678159]))
      unknown call_tmp[678171] "expr temp" "maybe param" "maybe type" "temp"
      (678174 'move' call_tmp[678171](166164 call >= call_tmp[678166] 1))
      unknown call_tmp[678176] "expr temp" "maybe param" "maybe type" "temp"
      (678179 'move' call_tmp[678176](166236 call _cond_test call_tmp[678171]))
      if call_tmp[678176]
      {
        unknown call_tmp[678183] "expr temp" "maybe param" "maybe type" "temp"
        (678186 'move' call_tmp[678183](166170 call(388192 call (partial) data _mt[243] this[166150]) 1))
        (166171 call <~> f[166146] call_tmp[678183])
        (482768 'end of statement')
        {
          unknown _indexOfInterest[166195] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166196] "expr temp" "temp"
          unknown call_tmp[678190] "expr temp" "maybe param" "maybe type" "temp"
          (678193 'move' call_tmp[678190](361247 call dom _mt[243] this[166150]))
          unknown call_tmp[678197] "expr temp" "maybe param" "maybe type" "temp"
          (678200 'move' call_tmp[678197](166210 call _nnz _mt[243] call_tmp[678190]))
          unknown call_tmp[678202] "expr temp" "maybe param" "maybe type" "temp"
          (678205 'move' call_tmp[678202](166213 call chpl_direct_range_iter 2 call_tmp[678197] 1))
          (166205 'move' _iterator[166196](166203 call _getIterator call_tmp[678202]))
          Defer
          {
            {
              (166229 call _freeIterator _iterator[166196])
            }
          }
          { scopeless type
            (166218 'move' _indexOfInterest[166195](166215 call iteratorIndex _iterator[166196]))
          }
          ForLoop[166197]
          {
            unknown i[166222] "index var" "insert auto destroy"
            (482770 'end of statement')
            (166224 'move' i[166222] _indexOfInterest[166195])
            (482771 'end of statement' i[166222])
            {
              unknown call_tmp[678207] "expr temp" "maybe param" "maybe type" "temp"
              (678210 'move' call_tmp[678207](166185 call <~> f[166146] " "))
              unknown call_tmp[678214] "expr temp" "maybe param" "maybe type" "temp"
              (678217 'move' call_tmp[678214](166190 call(388198 call (partial) data _mt[243] this[166150]) i[166222]))
              (166191 call <~> call_tmp[678207] call_tmp[678214])
              (482773 'end of statement' i[166222])
            }
            label _continueLabel[166200]
            _indexOfInterest[166195]
            _iterator[166196]
          }
          label _breakLabel[166201]
        }
      }
    }
    {
      unknown call_tmp[678221] "expr temp" "maybe param" "maybe type" "temp"
      (678224 'move' call_tmp[678221](361252 call dom _mt[243] this[166150]))
      unknown call_tmp[678228] "expr temp" "maybe param" "maybe type" "temp"
      (678231 'move' call_tmp[678228](166242 call _nnz _mt[243] call_tmp[678221]))
      unknown call_tmp[678233] "expr temp" "maybe param" "maybe type" "temp"
      (678236 'move' call_tmp[678233](166246 call >= call_tmp[678228] 1))
      unknown call_tmp[678238] "expr temp" "maybe param" "maybe type" "temp"
      (678241 'move' call_tmp[678238](166374 call _cond_test call_tmp[678233]))
      if call_tmp[678238]
      {
        unknown call_tmp[678245] "expr temp" "maybe param" "maybe type" "temp"
        (678248 'move' call_tmp[678245](361257 call dom _mt[243] this[166150]))
        unknown call_tmp[678252] "maybe param" "maybe type" "temp"
        (678255 'move' call_tmp[678252](166254 call(166249 call (partial) _indices _mt[243] call_tmp[678245]) 1))
        unknown prevInd[166255] "dead at end of block" "insert auto destroy"
        (544165 'init var' prevInd[166255] call_tmp[678252])
        (166258 'end of statement')
        unknown call_tmp[678259] "expr temp" "maybe param" "maybe type" "temp"
        (678262 'move' call_tmp[678259](166264 call(388205 call (partial) data _mt[243] this[166150]) 1))
        (166265 call <~> f[166146] call_tmp[678259])
        (482775 'end of statement')
        {
          unknown _indexOfInterest[166328] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166329] "expr temp" "temp"
          unknown call_tmp[678266] "expr temp" "maybe param" "maybe type" "temp"
          (678269 'move' call_tmp[678266](361272 call dom _mt[243] this[166150]))
          unknown call_tmp[678273] "expr temp" "maybe param" "maybe type" "temp"
          (678276 'move' call_tmp[678273](166343 call _nnz _mt[243] call_tmp[678266]))
          unknown call_tmp[678278] "expr temp" "maybe param" "maybe type" "temp"
          (678281 'move' call_tmp[678278](166346 call chpl_direct_range_iter 2 call_tmp[678273] 1))
          (166338 'move' _iterator[166329](166336 call _getIterator call_tmp[678278]))
          Defer
          {
            {
              (166362 call _freeIterator _iterator[166329])
            }
          }
          { scopeless type
            (166351 'move' _indexOfInterest[166328](166348 call iteratorIndex _iterator[166329]))
          }
          ForLoop[166330]
          {
            unknown i[166355] "index var" "insert auto destroy"
            (482777 'end of statement')
            (166357 'move' i[166355] _indexOfInterest[166328])
            (482778 'end of statement' i[166355])
            {
              unknown call_tmp[678283] "expr temp" "maybe param" "maybe type" "temp"
              (678286 'move' call_tmp[678283](166279 call prevInd[166255] 0))
              unknown call_tmp[678290] "expr temp" "maybe param" "maybe type" "temp"
              (678293 'move' call_tmp[678290](361262 call dom _mt[243] this[166150]))
              unknown call_tmp[678297] "expr temp" "maybe param" "maybe type" "temp"
              (678300 'move' call_tmp[678297](166286 call(166281 call (partial) _indices _mt[243] call_tmp[678290]) i[166355]))
              unknown call_tmp[678302] "expr temp" "maybe param" "maybe type" "temp"
              (678305 'move' call_tmp[678302](166289 call call_tmp[678297] 0))
              unknown call_tmp[678307] "expr temp" "maybe param" "maybe type" "temp"
              (678310 'move' call_tmp[678307](166290 call != call_tmp[678283] call_tmp[678302]))
              unknown call_tmp[678312] "expr temp" "maybe param" "maybe type" "temp"
              (678315 'move' call_tmp[678312](166304 call _cond_test call_tmp[678307]))
              if call_tmp[678312]
              {
                (166294 call <~> f[166146] "\n")
              }
              {
                (166300 call <~> f[166146] " ")
              }
              unknown call_tmp[678319] "expr temp" "maybe param" "maybe type" "temp"
              (678322 'move' call_tmp[678319](361267 call dom _mt[243] this[166150]))
              unknown call_tmp[678326] "expr temp" "maybe param" "maybe type" "temp"
              (678329 'move' call_tmp[678326](166316 call(166311 call (partial) _indices _mt[243] call_tmp[678319]) i[166355]))
              (166317 call = prevInd[166255] call_tmp[678326])
              (482782 'end of statement' prevInd[166255] i[166355])
              unknown call_tmp[678333] "expr temp" "maybe param" "maybe type" "temp"
              (678336 'move' call_tmp[678333](166324 call(388217 call (partial) data _mt[243] this[166150]) i[166355]))
              (166325 call <~> f[166146] call_tmp[678333])
              (482785 'end of statement' i[166355])
            }
            label _continueLabel[166333]
            _indexOfInterest[166328]
            _iterator[166329]
          }
          label _breakLabel[166334]
        }
        (166371 call <~> f[166146] "\n")
      }
    }
    (521776 return _void[55])
  }
  (355073 'used modules list'(161555 'use' ChapelStandard[20264])(161559 'import' RangeChunk[266370])(161562 'use' DSIUtil[230800]))
}