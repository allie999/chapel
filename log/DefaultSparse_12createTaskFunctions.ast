AST dump for DefaultSparse after pass createTaskFunctions.
Module use list: ChapelStandard RangeChunk DSIUtil Search Sort 

{
  function chpl__init_DefaultSparse[416060]() : void[4] "insert line file info" "module init"
  {
    (544208 'init var' debugDefaultSparse[161569] 0)
    (161572 'end of statement')
    (521933 return _void[55])
  }
  unknown debugDefaultSparse[161569] "config" "param"
  function DefaultSparseDom[164336](?).linksDistribution[161604](arg _mt[164340]:_MT[238], arg this[164338]:DefaultSparseDom[164336](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521417] "RVV" "param" "temp"
    (521422 'move' ret[521417](521421 'deref' 0))
    (521419 return ret[521417])
  }
  function DefaultSparseDom[164336](?).dsiLinksDistribution[161614](arg _mt[164344]:_MT[238], arg this[164342]:DefaultSparseDom[164336](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521426] "RVV" "temp"
    (521431 'move' ret[521426](521430 'deref' 0))
    (521428 return ret[521426])
  }
  function DefaultSparseDom[164336](?).init[161626](arg _mt[164348]:_MT[238], arg this[164346]:DefaultSparseDom[164336](?), param arg rank[161624]:_any[178](?), arg idxType[161628]:_any[178](?), arg dist[161632]:unmanaged DefaultDist[415502], arg parentDom[161636]:_domain[125914](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462211] "temporary of super field" "temp"
    (462213 'move' super_tmp[462211](462210 '.v' this[164346] c"super"))
    (161647 call(161640 call (partial) init _mt[243] super_tmp[462211]) rank[161624] idxType[161628] parentDom[161636])
    (482539 'end of statement')
    unknown tmp[462216] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492515] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[675691] "expr temp" "maybe param" "maybe type" "temp"
      (675694 'move' call_tmp[675691](462218 '.v' this[164346] c"super"))
      (492519 'move' call_type_tmp[492515](462221 'typeof' call_tmp[675691]))
    }
    (462222 'move' tmp[462216] call_type_tmp[492515])
    unknown call_tmp[675696] "maybe param" "maybe type" "temp"
    (675699 'move' call_tmp[675696](462227 'cast' tmp[462216] this[164346]))
    unknown chpl__thisAsParent[462224] "dead at end of block" "insert auto destroy" "temp"
    (544210 'init var' chpl__thisAsParent[462224] call_tmp[675696] tmp[462216])
    (462230 'setcid' chpl__thisAsParent[462224])
    (482540 'end of statement')
    unknown tmp[462232] "temp"
    (462235 'init var' tmp[462232] dist[161632] unmanaged DefaultDist[415502])
    (462237 'init field' this[164346] c"dist" tmp[462232])
    (482541 'end of statement')
    unknown tmp[462243] "temp"
    (462245 'init var' tmp[462243] 0)
    (462247 '.=' this[164346] c"_nnz" tmp[462243])
    (482542 'end of statement')
    unknown tmp[462251] "temp"
    unknown call_tmp[675701] "expr temp" "maybe param" "maybe type" "temp"
    (675704 'move' call_tmp[675701](462268 '.' this[164346] c"nnzDom"))
    unknown call_tmp[675706] "expr temp" "maybe param" "maybe type" "temp"
    (675709 'move' call_tmp[675706](462256 call chpl__ensureDomainExpr call_tmp[675701]))
    unknown call_tmp[675711] "expr temp" "maybe param" "maybe type" "temp"
    (675714 'move' call_tmp[675711](462271 '.v' this[164346] c"rank"))
    unknown call_tmp[675716] "expr temp" "maybe param" "maybe type" "temp"
    (675719 'move' call_tmp[675716](462274 '.v' this[164346] c"idxType"))
    unknown call_tmp[675721] "expr temp" "maybe param" "maybe type" "temp"
    (675724 'move' call_tmp[675721](462259 call chpl__buildIndexType call_tmp[675711] call_tmp[675716]))
    unknown call_tmp[675726] "expr temp" "maybe param" "maybe type" "temp"
    (675729 'move' call_tmp[675726](462254 call chpl__buildArrayRuntimeType call_tmp[675706] call_tmp[675721]))
    (462262 'default init var' tmp[462251] call_tmp[675726])
    (462264 '.=' this[164346] c"_indices" tmp[462251])
    (482543 'end of statement')
    (462277 'setcid' this[164346])
    (521433 return _void[55])
  }
  function DefaultSparseDom[164336](?).getNNZ[161662](arg _mt[164352]:_MT[238], arg this[164350]:DefaultSparseDom[164336](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521437] "RVV" "temp"
    unknown call_tmp[675733] "expr temp" "maybe param" "maybe type" "temp"
    (675736 'move' call_tmp[675733](387479 call _nnz _mt[243] this[164350]))
    (521443 'move' ret[521437](521442 'coerce' call_tmp[675733] int(64)[13]))
    (521439 return ret[521437])
  }
  { scopeless type
    int(64)[13]
  }
  function DefaultSparseDom[164336](?).dsiBuildArray[161676](arg _mt[164356]:_MT[238], arg this[164354]:DefaultSparseDom[164336](?), arg eltType[161674]:_any[178](?), param arg initElts[161679]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521447] "RVV" "temp"
    unknown call_tmp[675740] "expr temp" "maybe param" "maybe type" "temp"
    (675743 'move' call_tmp[675740](387489 call rank _mt[243] this[164354]))
    unknown call_tmp[675747] "expr temp" "maybe param" "maybe type" "temp"
    (675750 'move' call_tmp[675747](387494 call idxType _mt[243] this[164354]))
    unknown call_tmp[675752] "expr temp" "maybe param" "maybe type" "temp"
    (675755 'move' call_tmp[675752](161696 call _to_unmanaged this[164354]))
    unknown call_tmp[675757] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675760 'move' call_tmp[675757](748009 'new' DefaultSparseArr[387483](?)(eltType = eltType[161674])(rank = call_tmp[675740])(idxType = call_tmp[675747])(dom = call_tmp[675752])(initElts = initElts[161679])(_chpl_manager = unmanaged[220](?))))
    (521452 'move' ret[521447](521451 'deref' call_tmp[675757]))
    (521449 return ret[521447])
  }
  function DefaultSparseDom[164336](?).dsiIndsIterSafeForRemoving[161708](arg _mt[164360]:_MT[238], arg this[164358]:DefaultSparseDom[164336](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521456] "RVV" "temp"
    {
      unknown _indexOfInterest[161727] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161728] "expr temp" "temp"
      unknown call_tmp[675764] "expr temp" "maybe param" "maybe type" "temp"
      (675767 'move' call_tmp[675764](387507 call _nnz _mt[243] this[164358]))
      unknown call_tmp[675769] "expr temp" "maybe param" "maybe type" "temp"
      (675772 'move' call_tmp[675769](161744 call - 1))
      unknown call_tmp[675774] "expr temp" "maybe param" "maybe type" "temp"
      (675777 'move' call_tmp[675774](161748 call chpl_direct_range_iter 1 call_tmp[675764] call_tmp[675769]))
      (161737 'move' _iterator[161728](161735 call _getIterator call_tmp[675774]))
      Defer
      {
        {
          (161764 call _freeIterator _iterator[161728])
        }
      }
      { scopeless type
        (161753 'move' _indexOfInterest[161727](161750 call iteratorIndex _iterator[161728]))
      }
      ForLoop[161729]
      {
        unknown i[161757] "index var" "insert auto destroy"
        (482548 'end of statement')
        (161759 'move' i[161757] _indexOfInterest[161727])
        (482549 'end of statement' i[161757])
        {
          unknown yret[521460] "YVV" "temp"
          unknown call_tmp[675781] "expr temp" "maybe param" "maybe type" "temp"
          (675784 'move' call_tmp[675781](161723 call(387501 call (partial) _indices _mt[243] this[164358]) i[161757]))
          (521463 'move' yret[521460](521462 'deref' call_tmp[675781]))
          (521465 yield yret[521460])
          (482551 'end of statement' i[161757])
        }
        label _continueLabel[161732]
        _indexOfInterest[161727]
        _iterator[161728]
      }
      label _breakLabel[161733]
    }
    (521458 return ret[521456])
  }
  function DefaultSparseDom[164336](?).these[161776](arg _mt[164364]:_MT[238], arg this[164362]:DefaultSparseDom[164336](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521469] "RVV" "temp"
    {
      unknown _indexOfInterest[161790] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161791] "expr temp" "temp"
      unknown call_tmp[675788] "expr temp" "maybe param" "maybe type" "temp"
      (675791 'move' call_tmp[675788](387518 call _nnz _mt[243] this[164362]))
      unknown call_tmp[675793] "expr temp" "maybe param" "maybe type" "temp"
      (675796 'move' call_tmp[675793](161805 call chpl_direct_range_iter 1 call_tmp[675788] 1))
      (161800 'move' _iterator[161791](161798 call _getIterator call_tmp[675793]))
      Defer
      {
        {
          (161821 call _freeIterator _iterator[161791])
        }
      }
      { scopeless type
        (161810 'move' _indexOfInterest[161790](161807 call iteratorIndex _iterator[161791]))
      }
      ForLoop[161792]
      {
        unknown i[161814] "index var" "insert auto destroy"
        (482554 'end of statement')
        (161816 'move' i[161814] _indexOfInterest[161790])
        (482555 'end of statement' i[161814])
        {
          unknown yret[521473] "YVV" "temp"
          unknown call_tmp[675800] "expr temp" "maybe param" "maybe type" "temp"
          (675803 'move' call_tmp[675800](161786 call(387512 call (partial) _indices _mt[243] this[164362]) i[161814]))
          (521476 'move' yret[521473](521475 'deref' call_tmp[675800]))
          (521478 yield yret[521473])
          (482557 'end of statement' i[161814])
        }
        label _continueLabel[161795]
        _indexOfInterest[161790]
        _iterator[161791]
      }
      label _breakLabel[161796]
    }
    (521471 return ret[521469])
  }
  function DefaultSparseDom[164336](?).these[161837](arg _mt[164368]:_MT[238], arg this[164366]:DefaultSparseDom[164336](?), param arg tag[161834]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521482] "RVV" "temp"
    unknown call_tmp[675807] "maybe param" "maybe type" "temp"
    (675810 'move' call_tmp[675807](387525 call _nnz _mt[243] this[164366]))
    const numElems[161847] "dead at end of block" "const" "insert auto destroy"
    (544212 'init var' numElems[161847] call_tmp[675807])
    (161850 'end of statement')
    unknown call_tmp[675812] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (675815 'move' call_tmp[675812](161857 'typeof' numElems[161847]))
    unknown call_tmp[675817] "expr temp" "maybe param" "maybe type" "temp"
    (675820 'move' call_tmp[675817](161855 call _computeNumChunks numElems[161847]))
    unknown call_tmp[675822] "maybe param" "maybe type" "temp"
    (675825 'move' call_tmp[675822](161858 call _cast call_tmp[675812] call_tmp[675817]))
    const numChunks[161860] "dead at end of block" "const" "insert auto destroy"
    (544214 'init var' numChunks[161860] call_tmp[675822])
    (161863 'end of statement' numElems[161847] numElems[161847])
    unknown call_tmp[675827] "expr temp" "maybe param" "maybe type" "temp"
    (675830 'move' call_tmp[675827](161923 call _cond_test debugDefaultSparse[161569]))
    if call_tmp[675827]
    {
      (161920 call writeln "DefaultSparseDom standalone: " numChunks[161860] " chunks, " numElems[161847] " elems")
      (482561 'end of statement' numChunks[161860] numElems[161847])
    }
    unknown call_tmp[675832] "expr temp" "maybe param" "maybe type" "temp"
    (675835 'move' call_tmp[675832](161929 call <= numChunks[161860] 1))
    unknown call_tmp[675837] "expr temp" "maybe param" "maybe type" "temp"
    (675840 'move' call_tmp[675837](162233 call _cond_test call_tmp[675832]))
    if call_tmp[675837]
    {
      {
        unknown _indexOfInterest[161943] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[161944] "expr temp" "temp"
        unknown call_tmp[675842] "expr temp" "maybe param" "maybe type" "temp"
        (675845 'move' call_tmp[675842](161958 call chpl_direct_range_iter 1 numElems[161847] 1))
        (161953 'move' _iterator[161944](161951 call _getIterator call_tmp[675842]))
        Defer
        {
          {
            (161974 call _freeIterator _iterator[161944])
          }
        }
        { scopeless type
          (161963 'move' _indexOfInterest[161943](161960 call iteratorIndex _iterator[161944]))
        }
        ForLoop[161945]
        {
          unknown i[161967] "index var" "insert auto destroy"
          (482565 'end of statement')
          (161969 'move' i[161967] _indexOfInterest[161943])
          (482566 'end of statement' i[161967])
          {
            unknown yret[521486] "YVV" "temp"
            unknown call_tmp[675849] "expr temp" "maybe param" "maybe type" "temp"
            (675852 'move' call_tmp[675849](161939 call(387536 call (partial) _indices _mt[243] this[164366]) i[161967]))
            (521489 'move' yret[521486](521488 'deref' call_tmp[675849]))
            (521491 yield yret[521486])
            (482568 'end of statement' i[161967])
          }
          label _continueLabel[161948]
          _indexOfInterest[161943]
          _iterator[161944]
        }
        label _breakLabel[161949]
      }
    }
    {
      {
        unknown tmpIter[162036] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[675854] "expr temp" "maybe param" "maybe type" "temp"
        (675857 'move' call_tmp[675854](161989 call chpl_build_bounded_range 1 numElems[161847]))
        (162039 'move' tmpIter[162036](161993 call chunks module=[255] RangeChunk[266375] call_tmp[675854] numChunks[161860]))
        unknown isRngDomArr[162213] "maybe param" "temp"
        unknown tmp[428155] "maybe param" "temp"
        (428166 'move' tmp[428155](162215 call isBoundedRange tmpIter[162036]))
        unknown call_tmp[675859] "expr temp" "maybe param" "maybe type" "temp"
        (675862 'move' call_tmp[675859](428168 call _cond_invalid tmp[428155]))
        if call_tmp[675859]
        {
          (428171 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570166] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570167] "maybe param" "temp"
        unknown call_tmp[675864] "expr temp" "maybe param" "maybe type" "temp"
        (675867 'move' call_tmp[675864](428156 call isTrue tmp[428155]))
        (570172 'move' tmp[570167](570170 call _cond_test call_tmp[675864]))
        if tmp[570167]
        {
          (570177 'move' tmp[570166](570174 '_paramFoldLogical' tmp[570167] 1))
        }
        {
          unknown tmp[428176] "maybe param" "temp"
          (428187 'move' tmp[428176](162218 call isDomain tmpIter[162036]))
          unknown call_tmp[675869] "expr temp" "maybe param" "maybe type" "temp"
          (675872 'move' call_tmp[675869](428189 call _cond_invalid tmp[428176]))
          if call_tmp[675869]
          {
            (428192 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[570139] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570140] "maybe param" "temp"
          unknown call_tmp[675874] "expr temp" "maybe param" "maybe type" "temp"
          (675877 'move' call_tmp[675874](428177 call isTrue tmp[428176]))
          (570145 'move' tmp[570140](570143 call _cond_test call_tmp[675874]))
          if tmp[570140]
          {
            (570150 'move' tmp[570139](570147 '_paramFoldLogical' tmp[570140] 1))
          }
          {
            unknown tmp[570152] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[675879] "expr temp" "maybe param" "maybe type" "temp"
            (675882 'move' call_tmp[675879](162221 call isArray tmpIter[162036]))
            (570154 'move' tmp[570152](428181 call isTrue call_tmp[675879]))
            (570159 'move' tmp[570139](570156 '_paramFoldLogical' tmp[570140] tmp[570152]))
          }
          unknown tmp[570179] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (570181 'move' tmp[570179](428160 call isTrue tmp[570139]))
          (570186 'move' tmp[570166](570183 '_paramFoldLogical' tmp[570167] tmp[570179]))
        }
        (162228 'move' isRngDomArr[162213] tmp[570166])
        if isRngDomArr[162213]
        {
          const _coforallCount[162080] "const" "end count" "temp"
          (162149 'move' _coforallCount[162080](162146 call _endCountAlloc 1))
          unknown numTasks[162081] "temp"
          (162133 'move' numTasks[162081](162129 call size _mt[243] tmpIter[162036]))
          (162124 call _upEndCount _coforallCount[162080] 1 numTasks[162081])
          (482571 'end of statement')
          (162121 call chpl_resetTaskSpawn numTasks[162081])
          (482572 'end of statement')
          unknown _indexOfInterest[162088] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162089] "expr temp" "temp"
          (162098 'move' _iterator[162089](162096 call _getIterator tmpIter[162036]))
          Defer
          {
            {
              (162114 call _freeIterator _iterator[162089])
            }
          }
          { scopeless type
            (162103 'move' _indexOfInterest[162088](162100 call iteratorIndex _iterator[162089]))
          }
          ForLoop[162090]
          {
            unknown chunk[162107] "coforall index var" "index var" "insert auto destroy"
            (482574 'end of statement')
            (162109 'move' chunk[162107] _indexOfInterest[162088])
            (482575 'end of statement' chunk[162107])
            (934304 call coforall_fn[934302])
            function coforall_fn[934302]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[162042] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162044] "expr temp" "temp"
                (162046 'move' _iterator[162044](162049 call _getIterator chunk[162107]))
                Defer
                {
                  {
                    (162053 call _freeIterator _iterator[162044])
                  }
                }
                { scopeless type
                  (162057 'move' _indexOfInterest[162042](162060 call iteratorIndex _iterator[162044]))
                }
                ForLoop[162062]
                {
                  unknown i[162065] "index var" "insert auto destroy"
                  (482578 'end of statement')
                  (162067 'move' i[162065] _indexOfInterest[162042])
                  (482579 'end of statement' i[162065])
                  unknown yret[521493] "YVV" "temp"
                  unknown call_tmp[675888] "expr temp" "maybe param" "maybe type" "temp"
                  (675891 'move' call_tmp[675888](162073 call(387553 call (partial) _indices _mt[243] this[164366]) i[162065]))
                  (521496 'move' yret[521493](521495 'deref' call_tmp[675888]))
                  (521498 yield yret[521493])
                  (482581 'end of statement' i[162065])
                  label _continueLabel[162075]
                  _indexOfInterest[162042]
                  _iterator[162044]
                }
                label _breakLabel[162077]
              }
              (162083 call _downEndCount _coforallCount[162080] nil[44])
              (934307 return _void[55])
            }
            {
            }
            label _continueLabel[162093]
            _indexOfInterest[162088]
            _iterator[162089]
          }
          label _breakLabel[162094]
          Defer
          {
            {
              (162136 call _endCountFree _coforallCount[162080])
            }
          }
          (162141 call _waitEndCount _coforallCount[162080] 1 numTasks[162081])
        }
        {
          const _coforallCount[162153] "const" "end count" "temp"
          (162210 'move' _coforallCount[162153](162207 call _endCountAlloc 1))
          unknown _indexOfInterest[162161] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162162] "expr temp" "temp"
          (162171 'move' _iterator[162162](162169 call _getIterator tmpIter[162036]))
          Defer
          {
            {
              (162187 call _freeIterator _iterator[162162])
            }
          }
          { scopeless type
            (162176 'move' _indexOfInterest[162161](162173 call iteratorIndex _iterator[162162]))
          }
          ForLoop[162163]
          {
            unknown chunk[162180] "coforall index var" "index var" "insert auto destroy"
            (482587 'end of statement')
            (162182 'move' chunk[162180] _indexOfInterest[162161])
            (482588 'end of statement' chunk[162180])
            (162194 call _upEndCount _coforallCount[162153] 1)
            (482590 'end of statement')
            (934311 call coforall_fn[934309])
            function coforall_fn[934309]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[162002] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162003] "expr temp" "temp"
                (162012 'move' _iterator[162003](162010 call _getIterator chunk[162180]))
                Defer
                {
                  {
                    (162028 call _freeIterator _iterator[162003])
                  }
                }
                { scopeless type
                  (162017 'move' _indexOfInterest[162002](162014 call iteratorIndex _iterator[162003]))
                }
                ForLoop[162004]
                {
                  unknown i[162021] "index var" "insert auto destroy"
                  (482592 'end of statement')
                  (162023 'move' i[162021] _indexOfInterest[162002])
                  (482593 'end of statement' i[162021])
                  unknown yret[521500] "YVV" "temp"
                  unknown call_tmp[675895] "expr temp" "maybe param" "maybe type" "temp"
                  (675898 'move' call_tmp[675895](161999 call(387546 call (partial) _indices _mt[243] this[164366]) i[162021]))
                  (521503 'move' yret[521500](521502 'deref' call_tmp[675895]))
                  (521505 yield yret[521500])
                  (482595 'end of statement' i[162021])
                  label _continueLabel[162007]
                  _indexOfInterest[162002]
                  _iterator[162003]
                }
                label _breakLabel[162008]
              }
              (162156 call _downEndCount _coforallCount[162153] nil[44])
              (934314 return _void[55])
            }
            {
            }
            label _continueLabel[162166]
            _indexOfInterest[162161]
            _iterator[162162]
          }
          label _breakLabel[162167]
          Defer
          {
            {
              (162198 call _endCountFree _coforallCount[162153])
            }
          }
          (162203 call _waitEndCount _coforallCount[162153] 1)
        }
        (361219 'referenced modules list' RangeChunk[266375])
      }
    }
    (521484 return ret[521482])
  }
  where {
    (161844 call == tag[161834] standalone[451])
  }
  function DefaultSparseDom[164336](?).these[162246](arg _mt[164372]:_MT[238], arg this[164370]:DefaultSparseDom[164336](?), param arg tag[162243]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521509] "RVV" "temp"
    unknown call_tmp[675902] "maybe param" "maybe type" "temp"
    (675905 'move' call_tmp[675902](387561 call _nnz _mt[243] this[164370]))
    const numElems[162256] "dead at end of block" "const" "insert auto destroy"
    (544216 'init var' numElems[162256] call_tmp[675902])
    (162259 'end of statement')
    unknown call_tmp[675907] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (675910 'move' call_tmp[675907](162266 'typeof' numElems[162256]))
    unknown call_tmp[675912] "expr temp" "maybe param" "maybe type" "temp"
    (675915 'move' call_tmp[675912](162264 call _computeNumChunks numElems[162256]))
    unknown call_tmp[675917] "maybe param" "maybe type" "temp"
    (675920 'move' call_tmp[675917](162267 call _cast call_tmp[675907] call_tmp[675912]))
    const numChunks[162269] "dead at end of block" "const" "insert auto destroy"
    (544218 'init var' numChunks[162269] call_tmp[675917])
    (162272 'end of statement' numElems[162256] numElems[162256])
    unknown call_tmp[675922] "expr temp" "maybe param" "maybe type" "temp"
    (675925 'move' call_tmp[675922](162299 call _cond_test debugDefaultSparse[161569]))
    if call_tmp[675922]
    {
      (162297 call writeln "DefaultSparseDom leader: " numChunks[162269] " chunks, " numElems[162256] " elems")
      (482602 'end of statement' numChunks[162269] numElems[162256])
    }
    unknown call_tmp[675927] "expr temp" "maybe param" "maybe type" "temp"
    (675930 'move' call_tmp[675927](162306 call <= numChunks[162269] 1))
    unknown call_tmp[675932] "expr temp" "maybe param" "maybe type" "temp"
    (675935 'move' call_tmp[675932](162513 call _cond_test call_tmp[675927]))
    if call_tmp[675932]
    {
      unknown yret[521513] "YVV" "temp"
      unknown call_tmp[675937] "expr temp" "maybe param" "maybe type" "temp"
      (675940 'move' call_tmp[675937](162312 call _build_tuple this[164370] 1 numElems[162256]))
      (521516 'move' yret[521513](521515 'deref' call_tmp[675937]))
      (521518 yield yret[521513])
      (482605 'end of statement' numElems[162256])
    }
    {
      unknown tmpIter[162342] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[675942] "expr temp" "maybe param" "maybe type" "temp"
      (675945 'move' call_tmp[675942](162323 call chpl_build_bounded_range 1 numElems[162256]))
      (162345 'move' tmpIter[162342](162327 call chunks module=[255] RangeChunk[266375] call_tmp[675942] numChunks[162269]))
      unknown isRngDomArr[162494] "maybe param" "temp"
      unknown tmp[428197] "maybe param" "temp"
      (428208 'move' tmp[428197](162496 call isBoundedRange tmpIter[162342]))
      unknown call_tmp[675947] "expr temp" "maybe param" "maybe type" "temp"
      (675950 'move' call_tmp[675947](428210 call _cond_invalid tmp[428197]))
      if call_tmp[675947]
      {
        (428213 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[570220] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[570221] "maybe param" "temp"
      unknown call_tmp[675952] "expr temp" "maybe param" "maybe type" "temp"
      (675955 'move' call_tmp[675952](428198 call isTrue tmp[428197]))
      (570226 'move' tmp[570221](570224 call _cond_test call_tmp[675952]))
      if tmp[570221]
      {
        (570231 'move' tmp[570220](570228 '_paramFoldLogical' tmp[570221] 1))
      }
      {
        unknown tmp[428218] "maybe param" "temp"
        (428229 'move' tmp[428218](162499 call isDomain tmpIter[162342]))
        unknown call_tmp[675957] "expr temp" "maybe param" "maybe type" "temp"
        (675960 'move' call_tmp[675957](428231 call _cond_invalid tmp[428218]))
        if call_tmp[675957]
        {
          (428234 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570193] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570194] "maybe param" "temp"
        unknown call_tmp[675962] "expr temp" "maybe param" "maybe type" "temp"
        (675965 'move' call_tmp[675962](428219 call isTrue tmp[428218]))
        (570199 'move' tmp[570194](570197 call _cond_test call_tmp[675962]))
        if tmp[570194]
        {
          (570204 'move' tmp[570193](570201 '_paramFoldLogical' tmp[570194] 1))
        }
        {
          unknown tmp[570206] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[675967] "expr temp" "maybe param" "maybe type" "temp"
          (675970 'move' call_tmp[675967](162502 call isArray tmpIter[162342]))
          (570208 'move' tmp[570206](428223 call isTrue call_tmp[675967]))
          (570213 'move' tmp[570193](570210 '_paramFoldLogical' tmp[570194] tmp[570206]))
        }
        unknown tmp[570233] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (570235 'move' tmp[570233](428202 call isTrue tmp[570193]))
        (570240 'move' tmp[570220](570237 '_paramFoldLogical' tmp[570221] tmp[570233]))
      }
      (162509 'move' isRngDomArr[162494] tmp[570220])
      if isRngDomArr[162494]
      {
        const _coforallCount[162361] "const" "end count" "temp"
        (162430 'move' _coforallCount[162361](162427 call _endCountAlloc 1))
        unknown numTasks[162362] "temp"
        (162414 'move' numTasks[162362](162410 call size _mt[243] tmpIter[162342]))
        (162405 call _upEndCount _coforallCount[162361] 1 numTasks[162362])
        (482608 'end of statement')
        (162402 call chpl_resetTaskSpawn numTasks[162362])
        (482609 'end of statement')
        unknown _indexOfInterest[162369] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162370] "expr temp" "temp"
        (162379 'move' _iterator[162370](162377 call _getIterator tmpIter[162342]))
        Defer
        {
          {
            (162395 call _freeIterator _iterator[162370])
          }
        }
        { scopeless type
          (162384 'move' _indexOfInterest[162369](162381 call iteratorIndex _iterator[162370]))
        }
        ForLoop[162371]
        {
          unknown chunk[162388] "coforall index var" "index var" "insert auto destroy"
          (482611 'end of statement')
          (162390 'move' chunk[162388] _indexOfInterest[162369])
          (482612 'end of statement' chunk[162388])
          (934318 call coforall_fn[934316])
          function coforall_fn[934316]() : void[4] "cobegin or coforall"
          {
            unknown yret[521520] "YVV" "temp"
            unknown call_tmp[675976] "expr temp" "maybe param" "maybe type" "temp"
            (675979 'move' call_tmp[675976](162353 call first _mt[243] chunk[162388]))
            unknown call_tmp[675983] "expr temp" "maybe param" "maybe type" "temp"
            (675986 'move' call_tmp[675983](162357 call last _mt[243] chunk[162388]))
            unknown call_tmp[675988] "expr temp" "maybe param" "maybe type" "temp"
            (675991 'move' call_tmp[675988](162350 call _build_tuple this[164370] call_tmp[675976] call_tmp[675983]))
            (521523 'move' yret[521520](521522 'deref' call_tmp[675988]))
            (521525 yield yret[521520])
            (482614 'end of statement' chunk[162388] chunk[162388])
            (162364 call _downEndCount _coforallCount[162361] nil[44])
            (934321 return _void[55])
          }
          {
          }
          label _continueLabel[162374]
          _indexOfInterest[162369]
          _iterator[162370]
        }
        label _breakLabel[162375]
        Defer
        {
          {
            (162417 call _endCountFree _coforallCount[162361])
          }
        }
        (162422 call _waitEndCount _coforallCount[162361] 1 numTasks[162362])
      }
      {
        const _coforallCount[162434] "const" "end count" "temp"
        (162491 'move' _coforallCount[162434](162488 call _endCountAlloc 1))
        unknown _indexOfInterest[162442] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162443] "expr temp" "temp"
        (162452 'move' _iterator[162443](162450 call _getIterator tmpIter[162342]))
        Defer
        {
          {
            (162468 call _freeIterator _iterator[162443])
          }
        }
        { scopeless type
          (162457 'move' _indexOfInterest[162442](162454 call iteratorIndex _iterator[162443]))
        }
        ForLoop[162444]
        {
          unknown chunk[162461] "coforall index var" "index var" "insert auto destroy"
          (482621 'end of statement')
          (162463 'move' chunk[162461] _indexOfInterest[162442])
          (482622 'end of statement' chunk[162461])
          (162475 call _upEndCount _coforallCount[162434] 1)
          (482624 'end of statement')
          (934325 call coforall_fn[934323])
          function coforall_fn[934323]() : void[4] "cobegin or coforall"
          {
            unknown yret[521527] "YVV" "temp"
            unknown call_tmp[675995] "expr temp" "maybe param" "maybe type" "temp"
            (675998 'move' call_tmp[675995](162330 call first _mt[243] chunk[162461]))
            unknown call_tmp[676002] "expr temp" "maybe param" "maybe type" "temp"
            (676005 'move' call_tmp[676002](162335 call last _mt[243] chunk[162461]))
            unknown call_tmp[676007] "expr temp" "maybe param" "maybe type" "temp"
            (676010 'move' call_tmp[676007](162338 call _build_tuple this[164370] call_tmp[675995] call_tmp[676002]))
            (521530 'move' yret[521527](521529 'deref' call_tmp[676007]))
            (521532 yield yret[521527])
            (482625 'end of statement' chunk[162461] chunk[162461])
            (162437 call _downEndCount _coforallCount[162434] nil[44])
            (934328 return _void[55])
          }
          {
          }
          label _continueLabel[162447]
          _indexOfInterest[162442]
          _iterator[162443]
        }
        label _breakLabel[162448]
        Defer
        {
          {
            (162479 call _endCountFree _coforallCount[162434])
          }
        }
        (162484 call _waitEndCount _coforallCount[162434] 1)
      }
      (361226 'referenced modules list' RangeChunk[266375])
    }
    (521511 return ret[521509])
  }
  where {
    (162253 call == tag[162243] leader[447])
  }
  function DefaultSparseDom[164336](?).these[162527](arg _mt[164376]:_MT[238], arg this[164374]:DefaultSparseDom[164336](?), param arg tag[162524]:iterKind[453], arg followThis[162535]:_tuple[56199](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521536] "RVV" "temp"
    unknown tmp[162553] "dead at end of block" "insert auto destroy" "temp"
    (544220 'init var' tmp[162553] followThis[162535])
    (162563 call _check_tuple_var_decl tmp[162553] 3)
    (482631 'end of statement')
    unknown call_tmp[676012] "maybe param" "maybe type" "temp"
    (676015 'move' call_tmp[676012](162554 call tmp[162553] 0))
    unknown followThisDom[162545] "dead at end of block" "insert auto destroy"
    (544222 'init var' followThisDom[162545] call_tmp[676012])
    unknown call_tmp[676017] "maybe param" "maybe type" "temp"
    (676020 'move' call_tmp[676017](162557 call tmp[162553] 1))
    unknown startIx[162547] "dead at end of block" "insert auto destroy"
    (544224 'init var' startIx[162547] call_tmp[676017])
    unknown call_tmp[676022] "maybe param" "maybe type" "temp"
    (676025 'move' call_tmp[676022](162560 call tmp[162553] 2))
    unknown endIx[162549] "dead at end of block" "insert auto destroy"
    (544226 'init var' endIx[162549] call_tmp[676022])
    (162568 'end of statement')
    unknown call_tmp[676027] "expr temp" "maybe param" "maybe type" "temp"
    (676030 'move' call_tmp[676027](162572 call != followThisDom[162545] this[164374]))
    unknown call_tmp[676032] "expr temp" "maybe param" "maybe type" "temp"
    (676035 'move' call_tmp[676032](162597 call _cond_test call_tmp[676027]))
    if call_tmp[676032]
    {
      (162595 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays")
    }
    unknown call_tmp[676037] "expr temp" "maybe param" "maybe type" "temp"
    (676040 'move' call_tmp[676037](162627 call _cond_test debugDefaultSparse[161569]))
    if call_tmp[676037]
    {
      (162625 call writeln "DefaultSparseDom follower: " startIx[162547] ".." endIx[162549])
      (482633 'end of statement' startIx[162547] endIx[162549])
    }
    {
      unknown _indexOfInterest[162643] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162644] "expr temp" "temp"
      unknown call_tmp[676042] "expr temp" "maybe param" "maybe type" "temp"
      (676045 'move' call_tmp[676042](162658 call chpl_direct_range_iter startIx[162547] endIx[162549] 1))
      (162653 'move' _iterator[162644](162651 call _getIterator call_tmp[676042]))
      Defer
      {
        {
          (162674 call _freeIterator _iterator[162644])
        }
      }
      { scopeless type
        (162663 'move' _indexOfInterest[162643](162660 call iteratorIndex _iterator[162644]))
      }
      ForLoop[162645]
      {
        unknown i[162667] "index var" "insert auto destroy"
        (482637 'end of statement')
        (162669 'move' i[162667] _indexOfInterest[162643])
        (482638 'end of statement' i[162667])
        unknown yret[521540] "YVV" "temp"
        unknown call_tmp[676049] "expr temp" "maybe param" "maybe type" "temp"
        (676052 'move' call_tmp[676049](162640 call(387586 call (partial) _indices _mt[243] this[164374]) i[162667]))
        (521543 'move' yret[521540](521542 'deref' call_tmp[676049]))
        (521545 yield yret[521540])
        (482640 'end of statement' i[162667])
        label _continueLabel[162648]
        _indexOfInterest[162643]
        _iterator[162644]
      }
      label _breakLabel[162649]
    }
    (521538 return ret[521536])
  }
  where {
    unknown call_tmp[676054] "expr temp" "maybe param" "maybe type" "temp"
    (676057 'move' call_tmp[676054](162543 call == tag[162524] follower[449]))
    unknown call_tmp[676059] "expr temp" "maybe param" "maybe type" "temp"
    (676062 'move' call_tmp[676059](462283 'query' followThis[162535] c"size"))
    unknown call_tmp[676064] "expr temp" "maybe param" "maybe type" "temp"
    (676067 'move' call_tmp[676064](462284 call == 3 call_tmp[676059]))
    (462286 call & call_tmp[676054] call_tmp[676064])
  }
  function DefaultSparseDom[164336](?).these[162690](arg _mt[164380]:_MT[238], arg this[164378]:DefaultSparseDom[164336](?), param arg tag[162687]:iterKind[453], arg followThis[162692]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521549] "RVV" "temp"
    (162720 call compilerError "Sparse iterators can't yet be zippered with others")
    (482642 'end of statement')
    unknown dummy[162727] "dead at end of block" "insert auto destroy"
    unknown call_tmp[676071] "expr temp" "maybe param" "maybe type" "temp"
    (676074 'move' call_tmp[676071](387596 call rank _mt[243] this[164378]))
    unknown call_tmp[676078] "expr temp" "maybe param" "maybe type" "temp"
    (676081 'move' call_tmp[676078](387601 call idxType _mt[243] this[164378]))
    unknown call_tmp[676083] "expr temp" "maybe param" "maybe type" "temp"
    (676086 'move' call_tmp[676083](162725 call * call_tmp[676071] call_tmp[676078]))
    (544228 'default init var' dummy[162727] call_tmp[676083])
    (162730 'end of statement')
    unknown yret[521553] "YVV" "temp"
    (521556 'move' yret[521553](521555 'deref' dummy[162727]))
    (521558 yield yret[521553])
    (482643 'end of statement' dummy[162727])
    (521551 return ret[521549])
  }
  where {
    (162699 call == tag[162687] follower[449])
  }
  function DefaultSparseDom[164336](?).find[162741](arg _mt[164384]:_MT[238], arg this[164382]:DefaultSparseDom[164336](?), arg ind[162739]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521562] "RVV" "temp"
    unknown tmp[428239] "maybe param" "temp"
    unknown tmp[428260] "maybe param" "temp"
    unknown call_tmp[676090] "expr temp" "maybe param" "maybe type" "temp"
    (676093 'move' call_tmp[676090](387607 call rank _mt[243] this[164382]))
    (428271 'move' tmp[428260](162749 call == call_tmp[676090] 1))
    unknown call_tmp[676095] "expr temp" "maybe param" "maybe type" "temp"
    (676098 'move' call_tmp[676095](428273 call _cond_invalid tmp[428260]))
    if call_tmp[676095]
    {
      (428276 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570247] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570248] "maybe param" "temp"
    unknown call_tmp[676100] "expr temp" "maybe param" "maybe type" "temp"
    (676103 'move' call_tmp[676100](428261 call isTrue tmp[428260]))
    (570253 'move' tmp[570248](570251 call _cond_test call_tmp[676100]))
    if tmp[570248]
    {
      unknown tmp[570255] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[676105] "expr temp" "maybe param" "maybe type" "temp"
      (676108 'move' call_tmp[676105](162754 call isTuple ind[162739]))
      (570257 'move' tmp[570255](428264 call isTrue call_tmp[676105]))
      (570262 'move' tmp[570247](570259 '_paramFoldLogical' tmp[570248] tmp[570255]))
    }
    {
      (570267 'move' tmp[570247](570264 '_paramFoldLogical' tmp[570248] 0))
    }
    (428250 'move' tmp[428239] tmp[570247])
    unknown call_tmp[676110] "expr temp" "maybe param" "maybe type" "temp"
    (676113 'move' call_tmp[676110](428252 call _cond_invalid tmp[428239]))
    if call_tmp[676110]
    {
      (428255 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570274] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570275] "maybe param" "temp"
    unknown call_tmp[676115] "expr temp" "maybe param" "maybe type" "temp"
    (676118 'move' call_tmp[676115](428240 call isTrue tmp[428239]))
    (570280 'move' tmp[570275](570278 call _cond_test call_tmp[676115]))
    if tmp[570275]
    {
      unknown tmp[570282] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[676122] "expr temp" "maybe param" "maybe type" "temp"
      (676125 'move' call_tmp[676122](162758 call size _mt[243] ind[162739]))
      unknown call_tmp[676127] "expr temp" "maybe param" "maybe type" "temp"
      (676130 'move' call_tmp[676127](162762 call == call_tmp[676122] 1))
      (570284 'move' tmp[570282](428243 call isTrue call_tmp[676127]))
      (570289 'move' tmp[570274](570286 '_paramFoldLogical' tmp[570275] tmp[570282]))
    }
    {
      (570294 'move' tmp[570274](570291 '_paramFoldLogical' tmp[570275] 0))
    }
    unknown call_tmp[676132] "expr temp" "maybe param" "maybe type" "temp"
    (676135 'move' call_tmp[676132](162791 call _cond_test tmp[570274]))
    if call_tmp[676132]
    {
      unknown call_tmp[676139] "expr temp" "maybe param" "maybe type" "temp"
      (676142 'move' call_tmp[676139](387613 call _indices _mt[243] this[164382]))
      unknown call_tmp[676144] "expr temp" "maybe param" "maybe type" "temp"
      (676147 'move' call_tmp[676144](162772 call ind[162739] 0))
      unknown call_tmp[676151] "expr temp" "maybe param" "maybe type" "temp"
      (676154 'move' call_tmp[676151](387619 call _nnz _mt[243] this[164382]))
      unknown call_tmp[676156] "expr temp" "maybe param" "maybe type" "temp"
      (676159 'move' call_tmp[676156](162777 call binarySearch call_tmp[676139] call_tmp[676144](lo = 1)(hi = call_tmp[676151])))
      (521567 'move' ret[521562](521566 'deref' call_tmp[676156]))
      gotoReturn _end_find[521560] _end_find[521560]
    }
    {
      unknown call_tmp[676163] "expr temp" "maybe param" "maybe type" "temp"
      (676166 'move' call_tmp[676163](387624 call _indices _mt[243] this[164382]))
      unknown call_tmp[676170] "expr temp" "maybe param" "maybe type" "temp"
      (676173 'move' call_tmp[676170](387630 call _nnz _mt[243] this[164382]))
      unknown call_tmp[676175] "expr temp" "maybe param" "maybe type" "temp"
      (676178 'move' call_tmp[676175](162788 call binarySearch call_tmp[676163] ind[162739](lo = 1)(hi = call_tmp[676170])))
      (521572 'move' ret[521562](521571 'deref' call_tmp[676175]))
      gotoReturn _end_find[521560] _end_find[521560]
    }
    label _end_find[521560]
    (521564 return ret[521562])
    (355222 'used modules list'(162744 'use' Search[291162]))
  }
  function DefaultSparseDom[164336](?).dsiMember[162803](arg _mt[164388]:_MT[238], arg this[164386]:DefaultSparseDom[164336](?), arg ind[162801]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521578] "RVV" "temp"
    unknown call_tmp[676182] "maybe param" "maybe type" "temp"
    (676185 'move' call_tmp[676182](162813 call(387634 call (partial) find _mt[243] this[164386]) ind[162801]))
    const tmp[162814] "dead at end of block" "const" "insert auto destroy" "temp"
    (544230 'init var' tmp[162814] call_tmp[676182])
    (162821 call _check_tuple_var_decl tmp[162814] 2)
    (482649 'end of statement')
    unknown call_tmp[676187] "maybe param" "maybe type" "temp"
    (676190 'move' call_tmp[676187](162815 call tmp[162814] 0))
    const found[162805] "dead at end of block" "const" "insert auto destroy"
    (544232 'init var' found[162805] call_tmp[676187])
    unknown call_tmp[676192] "maybe param" "maybe type" "temp"
    (676195 'move' call_tmp[676192](162818 call tmp[162814] 1))
    const loc[162807] "dead at end of block" "const" "insert auto destroy"
    (544234 'init var' loc[162807] call_tmp[676192])
    (162826 'end of statement')
    (521583 'move' ret[521578](521582 'deref' found[162805]))
    gotoReturn _end_dsiMember[521576] _end_dsiMember[521576]
    (482650 'end of statement' found[162805])
    label _end_dsiMember[521576]
    (521580 return ret[521578])
  }
  function DefaultSparseDom[164336](?).dsiFirst[162835](arg _mt[164392]:_MT[238], arg this[164390]:DefaultSparseDom[164336](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[521589] "RVV" "temp"
    unknown call_tmp[676201] "expr temp" "maybe param" "maybe type" "temp"
    (676204 'move' call_tmp[676201](361240 call _indices _mt[243] this[164390]))
    unknown call_tmp[676208] "expr temp" "maybe param" "maybe type" "temp"
    (676211 'move' call_tmp[676208](162839 call _dom _mt[243] call_tmp[676201]))
    unknown call_tmp[676215] "expr temp" "maybe param" "maybe type" "temp"
    (676218 'move' call_tmp[676215](162842 call first _mt[243] call_tmp[676208]))
    unknown call_tmp[676220] "expr temp" "maybe param" "maybe type" "temp"
    (676223 'move' call_tmp[676220](162846 call(387641 call (partial) _indices _mt[243] this[164390]) call_tmp[676215]))
    (521594 'move' ret[521589](521593 'deref' call_tmp[676220]))
    (521591 return ret[521589])
  }
  function DefaultSparseDom[164336](?).dsiLast[162854](arg _mt[164396]:_MT[238], arg this[164394]:DefaultSparseDom[164336](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[521598] "RVV" "temp"
    unknown call_tmp[676229] "expr temp" "maybe param" "maybe type" "temp"
    (676232 'move' call_tmp[676229](387651 call _nnz _mt[243] this[164394]))
    unknown call_tmp[676234] "expr temp" "maybe param" "maybe type" "temp"
    (676237 'move' call_tmp[676234](162859 call(387646 call (partial) _indices _mt[243] this[164394]) call_tmp[676229]))
    (521603 'move' ret[521598](521602 'deref' call_tmp[676234]))
    (521600 return ret[521598])
  }
  function DefaultSparseDom[164336](?).add_help[162869](arg _mt[164400]:_MT[238], arg this[164398]:DefaultSparseDom[164336](?), arg ind[162867]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521607] "RVV" "temp"
    unknown call_tmp[676241] "maybe param" "maybe type" "temp"
    (676244 'move' call_tmp[676241](162879 call(387655 call (partial) find _mt[243] this[164398]) ind[162867]))
    const tmp[162880] "dead at end of block" "const" "insert auto destroy" "temp"
    (544236 'init var' tmp[162880] call_tmp[676241])
    (162887 call _check_tuple_var_decl tmp[162880] 2)
    (482654 'end of statement')
    unknown call_tmp[676246] "maybe param" "maybe type" "temp"
    (676249 'move' call_tmp[676246](162881 call tmp[162880] 0))
    const found[162871] "dead at end of block" "const" "insert auto destroy"
    (544238 'init var' found[162871] call_tmp[676246])
    unknown call_tmp[676251] "maybe param" "maybe type" "temp"
    (676254 'move' call_tmp[676251](162884 call tmp[162880] 1))
    const insertPt[162873] "dead at end of block" "const" "insert auto destroy"
    (544240 'init var' insertPt[162873] call_tmp[676251])
    (162892 'end of statement')
    unknown call_tmp[676256] "expr temp" "maybe param" "maybe type" "temp"
    (676259 'move' call_tmp[676256](162898 call _cond_test found[162871]))
    if call_tmp[676256]
    {
      (521612 'move' ret[521607](521611 'deref' 0))
      gotoReturn _end_add_help[521605] _end_add_help[521605]
    }
    unknown call_tmp[676261] "expr temp" "maybe param" "maybe type" "temp"
    (676264 'move' call_tmp[676261](162912 call _cond_test 1))
    if call_tmp[676261]
    {
      (162910 call(162905 call (partial) boundsCheck _mt[243] this[164398]) ind[162867])
    }
    unknown call_tmp[676270] "expr temp" "maybe param" "maybe type" "temp"
    (676273 'move' call_tmp[676270](387664 call _nnz _mt[243] this[164398]))
    (162919 call += call_tmp[676270] 1)
    (482657 'end of statement')
    unknown call_tmp[676277] "expr temp" "maybe param" "maybe type" "temp"
    (676280 'move' call_tmp[676277](361246 call nnzDom _mt[243] this[164398]))
    unknown call_tmp[676284] "maybe param" "maybe type" "temp"
    (676287 'move' call_tmp[676284](162923 call size _mt[243] call_tmp[676277]))
    const oldNNZDomSize[162926] "dead at end of block" "const" "insert auto destroy"
    (544242 'init var' oldNNZDomSize[162926] call_tmp[676284])
    (162929 'end of statement')
    unknown call_tmp[676293] "expr temp" "maybe param" "maybe type" "temp"
    (676296 'move' call_tmp[676293](387675 call _nnz _mt[243] this[164398]))
    (162933 call(387670 call (partial) _grow _mt[243] this[164398]) call_tmp[676293])
    (482658 'end of statement')
    {
      unknown _indexOfInterest[162963] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162964] "expr temp" "temp"
      unknown call_tmp[676300] "expr temp" "maybe param" "maybe type" "temp"
      (676303 'move' call_tmp[676300](387693 call _nnz _mt[243] this[164398]))
      unknown call_tmp[676305] "expr temp" "maybe param" "maybe type" "temp"
      (676308 'move' call_tmp[676305](162987 call - call_tmp[676300] 1))
      unknown call_tmp[676310] "expr temp" "maybe param" "maybe type" "temp"
      (676313 'move' call_tmp[676310](162983 call - 1))
      unknown call_tmp[676315] "expr temp" "maybe param" "maybe type" "temp"
      (676318 'move' call_tmp[676315](162990 call chpl_direct_range_iter insertPt[162873] call_tmp[676305] call_tmp[676310]))
      (162973 'move' _iterator[162964](162971 call _getIterator call_tmp[676315]))
      Defer
      {
        {
          (163006 call _freeIterator _iterator[162964])
        }
      }
      { scopeless type
        (162995 'move' _indexOfInterest[162963](162992 call iteratorIndex _iterator[162964]))
      }
      ForLoop[162965]
      {
        unknown i[162999] "index var" "insert auto destroy"
        (482660 'end of statement')
        (163001 'move' i[162999] _indexOfInterest[162963])
        (482661 'end of statement' i[162999])
        {
          unknown call_tmp[676322] "expr temp" "maybe param" "maybe type" "temp"
          (676325 'move' call_tmp[676322](162951 call + i[162999] 1))
          unknown call_tmp[676327] "expr temp" "maybe param" "maybe type" "temp"
          (676330 'move' call_tmp[676327](162954 call(387680 call (partial) _indices _mt[243] this[164398]) call_tmp[676322]))
          unknown call_tmp[676334] "expr temp" "maybe param" "maybe type" "temp"
          (676337 'move' call_tmp[676334](162958 call(387686 call (partial) _indices _mt[243] this[164398]) i[162999]))
          (162959 call = call_tmp[676327] call_tmp[676334])
          (482663 'end of statement' i[162999] i[162999])
        }
        label _continueLabel[162968]
        _indexOfInterest[162963]
        _iterator[162964]
      }
      label _breakLabel[162969]
    }
    unknown call_tmp[676341] "expr temp" "maybe param" "maybe type" "temp"
    (676344 'move' call_tmp[676341](163016 call(387698 call (partial) _indices _mt[243] this[164398]) insertPt[162873]))
    (163018 call = call_tmp[676341] ind[162867])
    (482666 'end of statement' insertPt[162873])
    {
      unknown _indexOfInterest[163050] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163051] "expr temp" "temp"
      unknown call_tmp[676348] "expr temp" "maybe param" "maybe type" "temp"
      (676351 'move' call_tmp[676348](387705 call _arrs _mt[243] this[164398]))
      (163060 'move' _iterator[163051](163058 call _getIterator call_tmp[676348]))
      Defer
      {
        {
          (163076 call _freeIterator _iterator[163051])
        }
      }
      { scopeless type
        (163065 'move' _indexOfInterest[163050](163062 call iteratorIndex _iterator[163051]))
      }
      ForLoop[163052]
      {
        unknown a[163069] "index var" "insert auto destroy"
        (482669 'end of statement')
        (163071 'move' a[163069] _indexOfInterest[163050])
        (482670 'end of statement' a[163069])
        {
          unknown call_tmp[676357] "expr temp" "maybe param" "maybe type" "temp"
          (676360 'move' call_tmp[676357](387711 call _nnz _mt[243] this[164398]))
          unknown call_tmp[676362] "expr temp" "maybe param" "maybe type" "temp"
          (676365 'move' call_tmp[676362](163032 call - call_tmp[676357] 1))
          unknown call_tmp[676367] "expr temp" "maybe param" "maybe type" "temp"
          (676370 'move' call_tmp[676367](163034 call chpl_build_bounded_range insertPt[162873] call_tmp[676362]))
          unknown call_tmp[676372] "expr temp" "maybe param" "maybe type" "temp"
          (676375 'move' call_tmp[676372](163039 call + oldNNZDomSize[162926] 1))
          unknown call_tmp[676379] "expr temp" "maybe param" "maybe type" "temp"
          (676382 'move' call_tmp[676379](361252 call nnzDom _mt[243] this[164398]))
          unknown call_tmp[676386] "expr temp" "maybe param" "maybe type" "temp"
          (676389 'move' call_tmp[676386](163042 call size _mt[243] call_tmp[676379]))
          unknown call_tmp[676391] "expr temp" "maybe param" "maybe type" "temp"
          (676394 'move' call_tmp[676391](163045 call chpl_build_bounded_range call_tmp[676372] call_tmp[676386]))
          (163047 call(163026 call (partial) sparseShiftArray _mt[243] a[163069]) call_tmp[676367] call_tmp[676391])
          (482672 'end of statement' a[163069] insertPt[162873] oldNNZDomSize[162926])
        }
        label _continueLabel[163055]
        _indexOfInterest[163050]
        _iterator[163051]
      }
      label _breakLabel[163056]
    }
    (521617 'move' ret[521607](521616 'deref' 1))
    label _end_add_help[521605]
    (521609 return ret[521607])
  }
  function DefaultSparseDom[164336](?).rem_help[163092](arg _mt[164404]:_MT[238], arg this[164402]:DefaultSparseDom[164336](?), arg ind[163090]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521621] "RVV" "temp"
    unknown call_tmp[676398] "maybe param" "maybe type" "temp"
    (676401 'move' call_tmp[676398](163102 call(387716 call (partial) find _mt[243] this[164402]) ind[163090]))
    const tmp[163103] "dead at end of block" "const" "insert auto destroy" "temp"
    (544244 'init var' tmp[163103] call_tmp[676398])
    (163110 call _check_tuple_var_decl tmp[163103] 2)
    (482677 'end of statement')
    unknown call_tmp[676403] "maybe param" "maybe type" "temp"
    (676406 'move' call_tmp[676403](163104 call tmp[163103] 0))
    const found[163094] "dead at end of block" "const" "insert auto destroy"
    (544246 'init var' found[163094] call_tmp[676403])
    unknown call_tmp[676408] "maybe param" "maybe type" "temp"
    (676411 'move' call_tmp[676408](163107 call tmp[163103] 1))
    const insertPt[163096] "dead at end of block" "const" "insert auto destroy"
    (544248 'init var' insertPt[163096] call_tmp[676408])
    (163115 'end of statement')
    unknown call_tmp[676413] "expr temp" "maybe param" "maybe type" "temp"
    (676416 'move' call_tmp[676413](163118 call ! found[163094]))
    unknown call_tmp[676418] "expr temp" "maybe param" "maybe type" "temp"
    (676421 'move' call_tmp[676418](163142 call _cond_test call_tmp[676413]))
    if call_tmp[676418]
    {
      (163140 call halt "index not in domain: " ind[163090])
    }
    unknown call_tmp[676425] "expr temp" "maybe param" "maybe type" "temp"
    (676428 'move' call_tmp[676425](387724 call _nnz _mt[243] this[164402]))
    (163149 call -= call_tmp[676425] 1)
    (482679 'end of statement')
    {
      unknown _indexOfInterest[163172] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163173] "expr temp" "temp"
      unknown call_tmp[676432] "expr temp" "maybe param" "maybe type" "temp"
      (676435 'move' call_tmp[676432](387742 call _nnz _mt[243] this[164402]))
      unknown call_tmp[676437] "expr temp" "maybe param" "maybe type" "temp"
      (676440 'move' call_tmp[676437](163187 call chpl_direct_range_iter insertPt[163096] call_tmp[676432] 1))
      (163182 'move' _iterator[163173](163180 call _getIterator call_tmp[676437]))
      Defer
      {
        {
          (163203 call _freeIterator _iterator[163173])
        }
      }
      { scopeless type
        (163192 'move' _indexOfInterest[163172](163189 call iteratorIndex _iterator[163173]))
      }
      ForLoop[163174]
      {
        unknown i[163196] "index var" "insert auto destroy"
        (482681 'end of statement')
        (163198 'move' i[163196] _indexOfInterest[163172])
        (482682 'end of statement' i[163196])
        {
          unknown call_tmp[676444] "expr temp" "maybe param" "maybe type" "temp"
          (676447 'move' call_tmp[676444](163160 call(387729 call (partial) _indices _mt[243] this[164402]) i[163196]))
          unknown call_tmp[676451] "expr temp" "maybe param" "maybe type" "temp"
          (676454 'move' call_tmp[676451](163164 call + i[163196] 1))
          unknown call_tmp[676456] "expr temp" "maybe param" "maybe type" "temp"
          (676459 'move' call_tmp[676456](163167 call(387735 call (partial) _indices _mt[243] this[164402]) call_tmp[676451]))
          (163168 call = call_tmp[676444] call_tmp[676456])
          (482684 'end of statement' i[163196] i[163196])
        }
        label _continueLabel[163177]
        _indexOfInterest[163172]
        _iterator[163173]
      }
      label _breakLabel[163178]
    }
    {
      unknown _indexOfInterest[163229] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163230] "expr temp" "temp"
      unknown call_tmp[676463] "expr temp" "maybe param" "maybe type" "temp"
      (676466 'move' call_tmp[676463](387747 call _arrs _mt[243] this[164402]))
      (163239 'move' _iterator[163230](163237 call _getIterator call_tmp[676463]))
      Defer
      {
        {
          (163255 call _freeIterator _iterator[163230])
        }
      }
      { scopeless type
        (163244 'move' _indexOfInterest[163229](163241 call iteratorIndex _iterator[163230]))
      }
      ForLoop[163231]
      {
        unknown a[163248] "index var" "insert auto destroy"
        (482688 'end of statement')
        (163250 'move' a[163248] _indexOfInterest[163229])
        (482689 'end of statement' a[163248])
        {
          unknown call_tmp[676472] "expr temp" "maybe param" "maybe type" "temp"
          (676475 'move' call_tmp[676472](387753 call _nnz _mt[243] this[164402]))
          unknown call_tmp[676477] "expr temp" "maybe param" "maybe type" "temp"
          (676480 'move' call_tmp[676477](163221 call - call_tmp[676472] 1))
          unknown call_tmp[676482] "expr temp" "maybe param" "maybe type" "temp"
          (676485 'move' call_tmp[676482](163223 call chpl_build_bounded_range insertPt[163096] call_tmp[676477]))
          (163226 call(163215 call (partial) sparseShiftArrayBack _mt[243] a[163248]) call_tmp[676482])
          (482691 'end of statement' a[163248] insertPt[163096])
        }
        label _continueLabel[163234]
        _indexOfInterest[163229]
        _iterator[163230]
      }
      label _breakLabel[163235]
    }
    (521626 'move' ret[521621](521625 'deref' 1))
    (521623 return ret[521621])
  }
  function DefaultSparseDom[164336](?).dsiAdd[163273](arg _mt[164408]:_MT[238], arg this[164406]:DefaultSparseDom[164336](?), arg ind[163270] :
  (387758 call idxType _mt[243] this[164406])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521630] "RVV" "temp"
    unknown call_tmp[676491] "expr temp" "maybe param" "maybe type" "temp"
    (676494 'move' call_tmp[676491](163282 call(387769 call (partial) add_help _mt[243] this[164406]) ind[163270]))
    (521635 'move' ret[521630](521634 'deref' call_tmp[676491]))
    (521632 return ret[521630])
  }
  where {
    unknown call_tmp[676498] "expr temp" "maybe param" "maybe type" "temp"
    (676501 'move' call_tmp[676498](387763 call rank _mt[243] this[164406]))
    (163277 call == call_tmp[676498] 1)
  }
  function DefaultSparseDom[164336](?).dsiRemove[163295](arg _mt[164412]:_MT[238], arg this[164410]:DefaultSparseDom[164336](?), arg ind[163292] :
  (387775 call idxType _mt[243] this[164410])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521639] "RVV" "temp"
    unknown call_tmp[676507] "expr temp" "maybe param" "maybe type" "temp"
    (676510 'move' call_tmp[676507](163304 call(387786 call (partial) rem_help _mt[243] this[164410]) ind[163292]))
    (521644 'move' ret[521639](521643 'deref' call_tmp[676507]))
    (521641 return ret[521639])
  }
  where {
    unknown call_tmp[676514] "expr temp" "maybe param" "maybe type" "temp"
    (676517 'move' call_tmp[676514](387780 call rank _mt[243] this[164410]))
    (163299 call == call_tmp[676514] 1)
  }
  function DefaultSparseDom[164336](?).dsiAdd[163320](arg _mt[164416]:_MT[238], arg this[164414]:DefaultSparseDom[164336](?), arg ind[163317] :
  unknown call_tmp[676521] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521648] "RVV" "temp"
    unknown call_tmp[676535] "expr temp" "maybe param" "maybe type" "temp"
    (676538 'move' call_tmp[676535](387802 call rank _mt[243] this[164414]))
    unknown call_tmp[676540] "expr temp" "maybe param" "maybe type" "temp"
    (676543 'move' call_tmp[676540](163324 call == call_tmp[676535] 1))
    unknown call_tmp[676545] "expr temp" "maybe param" "maybe type" "temp"
    (676548 'move' call_tmp[676545](163343 call _cond_test call_tmp[676540]))
    if call_tmp[676545]
    {
      unknown call_tmp[676552] "expr temp" "maybe param" "maybe type" "temp"
      (676555 'move' call_tmp[676552](163330 call ind[163317] 0))
      unknown call_tmp[676557] "expr temp" "maybe param" "maybe type" "temp"
      (676560 'move' call_tmp[676557](163332 call(387806 call (partial) add_help _mt[243] this[164414]) call_tmp[676552]))
      (521653 'move' ret[521648](521652 'deref' call_tmp[676557]))
      gotoReturn _end_dsiAdd[521646] _end_dsiAdd[521646]
    }
    {
      unknown call_tmp[676564] "expr temp" "maybe param" "maybe type" "temp"
      (676567 'move' call_tmp[676564](163339 call(387811 call (partial) add_help _mt[243] this[164414]) ind[163317]))
      (521658 'move' ret[521648](521657 'deref' call_tmp[676564]))
      gotoReturn _end_dsiAdd[521646] _end_dsiAdd[521646]
    }
    label _end_dsiAdd[521646]
    (521650 return ret[521648])
  }
  function DefaultSparseDom[164336](?).dsiRemove[163359](arg _mt[164420]:_MT[238], arg this[164418]:DefaultSparseDom[164336](?), arg ind[163356] :
  unknown call_tmp[676571] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521664] "RVV" "temp"
    unknown call_tmp[676585] "expr temp" "maybe param" "maybe type" "temp"
    (676588 'move' call_tmp[676585](387827 call rank _mt[243] this[164418]))
    unknown call_tmp[676590] "expr temp" "maybe param" "maybe type" "temp"
    (676593 'move' call_tmp[676590](163363 call == call_tmp[676585] 1))
    unknown call_tmp[676595] "expr temp" "maybe param" "maybe type" "temp"
    (676598 'move' call_tmp[676595](163382 call _cond_test call_tmp[676590]))
    if call_tmp[676595]
    {
      unknown call_tmp[676602] "expr temp" "maybe param" "maybe type" "temp"
      (676605 'move' call_tmp[676602](163369 call ind[163356] 0))
      unknown call_tmp[676607] "expr temp" "maybe param" "maybe type" "temp"
      (676610 'move' call_tmp[676607](163371 call(387831 call (partial) rem_help _mt[243] this[164418]) call_tmp[676602]))
      (521669 'move' ret[521664](521668 'deref' call_tmp[676607]))
      gotoReturn _end_dsiRemove[521662] _end_dsiRemove[521662]
    }
    {
      unknown call_tmp[676614] "expr temp" "maybe param" "maybe type" "temp"
      (676617 'move' call_tmp[676614](163378 call(387836 call (partial) rem_help _mt[243] this[164418]) ind[163356]))
      (521674 'move' ret[521664](521673 'deref' call_tmp[676614]))
      gotoReturn _end_dsiRemove[521662] _end_dsiRemove[521662]
    }
    label _end_dsiRemove[521662]
    (521666 return ret[521664])
  }
  function DefaultSparseDom[164336](?).bulkAdd_help[163404](arg _mt[164424]:_MT[238], arg this[164422]:DefaultSparseDom[164336](?), arg inds[163401]:_array[133600](?), arg dataSorted[163407] :
  0 =
  0, arg isUnique[163411] :
  0 =
  0, arg addOn[163415] :
  nilLocale[89943] =
  nilLocale[89943]) : _unknown[51] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[521680] "RVV" "temp"
    unknown call_tmp[676619] "expr temp" "maybe param" "maybe type" "temp"
    (676622 'move' call_tmp[676619](163424 call != addOn[163415] nilLocale[89943]))
    unknown call_tmp[676624] "expr temp" "maybe param" "maybe type" "temp"
    (676627 'move' call_tmp[676624](163462 call _cond_test call_tmp[676619]))
    if call_tmp[676624]
    {
      unknown call_tmp[676629] "expr temp" "maybe param" "maybe type" "temp"
      (676632 'move' call_tmp[676629](163428 '_wide_get_locale' this[164422]))
      unknown call_tmp[676634] "expr temp" "maybe param" "maybe type" "temp"
      (676637 'move' call_tmp[676634](163429 call chpl_localeID_to_locale call_tmp[676629]))
      unknown call_tmp[676639] "expr temp" "maybe param" "maybe type" "temp"
      (676642 'move' call_tmp[676639](163431 call != addOn[163415] call_tmp[676634]))
      unknown call_tmp[676644] "expr temp" "maybe param" "maybe type" "temp"
      (676647 'move' call_tmp[676644](163457 call _cond_test call_tmp[676639]))
      if call_tmp[676644]
      {
        (163454 call halt "Bulk index addition is only possible on the locale where the\n              sparse domain is created")
      }
    }
    (163477 call(387858 call (partial) bulkAdd_prepareInds _mt[243] this[164422]) inds[163401] dataSorted[163407] isUnique[163411] defaultComparator[267894])
    (482702 'end of statement')
    unknown call_tmp[676653] "expr temp" "maybe param" "maybe type" "temp"
    (676656 'move' call_tmp[676653](387866 call _nnz _mt[243] this[164422]))
    unknown call_tmp[676658] "expr temp" "maybe param" "maybe type" "temp"
    (676661 'move' call_tmp[676658](163481 call == call_tmp[676653] 0))
    unknown call_tmp[676663] "expr temp" "maybe param" "maybe type" "temp"
    (676666 'move' call_tmp[676663](163642 call _cond_test call_tmp[676658]))
    if call_tmp[676663]
    {
      const dupCount[163492] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[570301] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[570302] "maybe param" "temp"
      (570307 'move' tmp[570302](570305 call _cond_test isUnique[163411]))
      if tmp[570302]
      {
        (570312 'move' tmp[570301](570309 '_paramFoldLogical' tmp[570302] 0))
      }
      {
        unknown tmp[570314] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (570316 'move' tmp[570314](163488 call(387873 call (partial) _countDuplicates _mt[243] this[164422]) inds[163401]))
        (570321 'move' tmp[570301](570318 '_paramFoldLogical' tmp[570302] tmp[570314]))
      }
      (544250 'init var' dupCount[163492] tmp[570301])
      (163495 'end of statement')
      unknown call_tmp[676672] "expr temp" "maybe param" "maybe type" "temp"
      (676675 'move' call_tmp[676672](387879 call _nnz _mt[243] this[164422]))
      unknown call_tmp[676679] "expr temp" "maybe param" "maybe type" "temp"
      (676682 'move' call_tmp[676679](163499 call size _mt[243] inds[163401]))
      unknown call_tmp[676684] "expr temp" "maybe param" "maybe type" "temp"
      (676687 'move' call_tmp[676684](163503 call - call_tmp[676679] dupCount[163492]))
      (163505 call += call_tmp[676672] call_tmp[676684])
      (482703 'end of statement' dupCount[163492])
      (163510 call(387886 call (partial) _bulkGrow _mt[243] this[164422]))
      (482705 'end of statement')
      unknown call_tmp[676693] "expr temp" "maybe param" "maybe type" "temp"
      (676696 'move' call_tmp[676693](361263 call _indices _mt[243] this[164422]))
      unknown call_tmp[676700] "expr temp" "maybe param" "maybe type" "temp"
      (676703 'move' call_tmp[676700](163513 call _dom _mt[243] call_tmp[676693]))
      unknown call_tmp[676707] "maybe param" "maybe type" "temp"
      (676710 'move' call_tmp[676707](163516 call low _mt[243] call_tmp[676700]))
      unknown indIdx[163519] "dead at end of block" "insert auto destroy"
      (544252 'init var' indIdx[163519] call_tmp[676707])
      (163522 'end of statement')
      unknown call_tmp[676714] "expr temp" "maybe param" "maybe type" "temp"
      (676717 'move' call_tmp[676714](361268 call parentDom _mt[243] this[164422]))
      unknown call_tmp[676721] "expr temp" "maybe param" "maybe type" "temp"
      (676724 'move' call_tmp[676721](163524 call low _mt[243] call_tmp[676714]))
      unknown call_tmp[676726] "maybe param" "maybe type" "temp"
      (676729 'move' call_tmp[676726](163528 call - call_tmp[676721] 1))
      unknown prevIdx[163530] "dead at end of block" "insert auto destroy"
      (544254 'init var' prevIdx[163530] call_tmp[676726])
      (163533 'end of statement')
      unknown call_tmp[676731] "expr temp" "maybe param" "maybe type" "temp"
      (676734 'move' call_tmp[676731](163638 call _cond_test isUnique[163411]))
      if call_tmp[676731]
      {
        unknown call_tmp[676740] "expr temp" "maybe param" "maybe type" "temp"
        (676743 'move' call_tmp[676740](361273 call _indices _mt[243] this[164422]))
        unknown call_tmp[676747] "expr temp" "maybe param" "maybe type" "temp"
        (676750 'move' call_tmp[676747](163537 call _dom _mt[243] call_tmp[676740]))
        unknown call_tmp[676754] "expr temp" "maybe param" "maybe type" "temp"
        (676757 'move' call_tmp[676754](163540 call low _mt[243] call_tmp[676747]))
        unknown call_tmp[676759] "expr temp" "maybe param" "maybe type" "temp"
        (676762 'move' call_tmp[676759](163543 call chpl_build_low_bounded_range call_tmp[676754]))
        unknown call_tmp[676766] "expr temp" "maybe param" "maybe type" "temp"
        (676769 'move' call_tmp[676766](163546 call size _mt[243] inds[163401]))
        unknown call_tmp[676771] "expr temp" "maybe param" "maybe type" "temp"
        (676774 'move' call_tmp[676771](163549 call # call_tmp[676759] call_tmp[676766]))
        unknown call_tmp[676776] "expr temp" "maybe param" "maybe type" "temp"
        (676779 'move' call_tmp[676776](163552 call(387892 call (partial) _indices _mt[243] this[164422]) call_tmp[676771]))
        (163554 call = call_tmp[676776] inds[163401])
        (482706 'end of statement')
        unknown call_tmp[676783] "expr temp" "maybe param" "maybe type" "temp"
        (676786 'move' call_tmp[676783](163559 call size _mt[243] inds[163401]))
        (521685 'move' ret[521680](521684 'deref' call_tmp[676783]))
        gotoReturn _end_bulkAdd_help[521678] _end_bulkAdd_help[521678]
      }
      {
        {
          unknown _indexOfInterest[163598] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[163599] "expr temp" "temp"
          (163608 'move' _iterator[163599](163606 call _getIterator inds[163401]))
          Defer
          {
            {
              (163624 call _freeIterator _iterator[163599])
            }
          }
          { scopeless type
            (163613 'move' _indexOfInterest[163598](163610 call iteratorIndex _iterator[163599]))
          }
          ForLoop[163600]
          {
            unknown i[163617] "index var" "insert auto destroy"
            (482709 'end of statement')
            (163619 'move' i[163617] _indexOfInterest[163598])
            (482710 'end of statement' i[163617])
            {
              unknown call_tmp[676788] "expr temp" "maybe param" "maybe type" "temp"
              (676791 'move' call_tmp[676788](163568 call == i[163617] prevIdx[163530]))
              unknown call_tmp[676793] "expr temp" "maybe param" "maybe type" "temp"
              (676796 'move' call_tmp[676793](163578 call _cond_test call_tmp[676788]))
              if call_tmp[676793]
              {
                continue _continueLabel[163603] _continueLabel[163603]
              }
              {
                (163575 call = prevIdx[163530] i[163617])
                (482712 'end of statement' prevIdx[163530] i[163617])
              }
              unknown call_tmp[676800] "expr temp" "maybe param" "maybe type" "temp"
              (676803 'move' call_tmp[676800](163588 call(387903 call (partial) _indices _mt[243] this[164422]) indIdx[163519]))
              (163590 call = call_tmp[676800] i[163617])
              (482715 'end of statement' indIdx[163519] i[163617])
              (163595 call += indIdx[163519] 1)
              (482718 'end of statement' indIdx[163519])
            }
            label _continueLabel[163603]
            _indexOfInterest[163598]
            _iterator[163599]
          }
          label _breakLabel[163604]
        }
        unknown call_tmp[676805] "expr temp" "maybe param" "maybe type" "temp"
        (676808 'move' call_tmp[676805](163634 call - indIdx[163519] 1))
        (521690 'move' ret[521680](521689 'deref' call_tmp[676805]))
        gotoReturn _end_bulkAdd_help[521678] _end_bulkAdd_help[521678]
        (482720 'end of statement' indIdx[163519])
      }
    }
    unknown call_tmp[676812] "maybe param" "maybe type" "temp"
    (676815 'move' call_tmp[676812](163656 call(387913 call (partial) __getActualInsertPts _mt[243] this[164422]) this[164422] inds[163401] isUnique[163411]))
    const tmp[163657] "dead at end of block" "const" "insert auto destroy" "temp"
    (544256 'init var' tmp[163657] call_tmp[676812])
    (163664 call _check_tuple_var_decl tmp[163657] 2)
    (482722 'end of statement')
    unknown call_tmp[676817] "maybe param" "maybe type" "temp"
    (676820 'move' call_tmp[676817](163658 call tmp[163657] 0))
    const actualInsertPts[163646] "dead at end of block" "const" "insert auto destroy"
    (544258 'init var' actualInsertPts[163646] call_tmp[676817])
    unknown call_tmp[676822] "maybe param" "maybe type" "temp"
    (676825 'move' call_tmp[676822](163661 call tmp[163657] 1))
    const actualAddCnt[163648] "dead at end of block" "const" "insert auto destroy"
    (544260 'init var' actualAddCnt[163648] call_tmp[676822])
    (163669 'end of statement')
    unknown call_tmp[676829] "maybe param" "maybe type" "temp"
    (676832 'move' call_tmp[676829](387921 call _nnz _mt[243] this[164422]))
    const oldnnz[163671] "dead at end of block" "const" "insert auto destroy"
    (544262 'init var' oldnnz[163671] call_tmp[676829])
    (163674 'end of statement')
    unknown call_tmp[676836] "expr temp" "maybe param" "maybe type" "temp"
    (676839 'move' call_tmp[676836](387926 call _nnz _mt[243] this[164422]))
    (163677 call += call_tmp[676836] actualAddCnt[163648])
    (482723 'end of statement' actualAddCnt[163648])
    (163682 call(387931 call (partial) _bulkGrow _mt[243] this[164422]))
    (482725 'end of statement')
    unknown call_tmp[676845] "expr temp" "maybe param" "maybe type" "temp"
    (676848 'move' call_tmp[676845](462303 call _dom _mt[243] inds[163401]))
    unknown call_tmp[676852] "maybe param" "maybe type" "temp"
    (676855 'move' call_tmp[676852](163685 call high _mt[243] call_tmp[676845]))
    unknown newIndIdx[163688] "dead at end of block" "insert auto destroy"
    (544264 'init var' newIndIdx[163688] call_tmp[676852])
    (163691 'end of statement')
    unknown oldIndIdx[163693] "dead at end of block" "insert auto destroy"
    (544266 'init var' oldIndIdx[163693] oldnnz[163671])
    (163696 'end of statement')
    unknown call_tmp[676857] "maybe param" "maybe type" "temp"
    (676860 'move' call_tmp[676857](163700 call actualInsertPts[163646] newIndIdx[163688]))
    unknown newLoc[163701] "dead at end of block" "insert auto destroy"
    (544268 'init var' newLoc[163701] call_tmp[676857])
    (163704 'end of statement')
    {
      unknown tmp[163743] "temp"
      unknown call_tmp[676862] "expr temp" "maybe param" "maybe type" "temp"
      (676865 'move' call_tmp[676862](163769 call - 1))
      unknown call_tmp[676867] "expr temp" "maybe param" "maybe type" "temp"
      (676870 'move' call_tmp[676867](163766 call == newLoc[163701] call_tmp[676862]))
      (163771 'move' tmp[163743](163764 call _cond_test call_tmp[676867]))
      WhileDo[163748]
      {
        {
          (163713 call -= newIndIdx[163688] 1)
          (482729 'end of statement' newIndIdx[163688])
          unknown call_tmp[676874] "expr temp" "maybe param" "maybe type" "temp"
          (676877 'move' call_tmp[676874](462307 call _dom _mt[243] inds[163401]))
          unknown call_tmp[676881] "expr temp" "maybe param" "maybe type" "temp"
          (676884 'move' call_tmp[676881](163719 call low _mt[243] call_tmp[676874]))
          unknown call_tmp[676886] "expr temp" "maybe param" "maybe type" "temp"
          (676889 'move' call_tmp[676886](163723 call - call_tmp[676881] 1))
          unknown call_tmp[676891] "expr temp" "maybe param" "maybe type" "temp"
          (676894 'move' call_tmp[676891](163725 call == newIndIdx[163688] call_tmp[676886]))
          unknown call_tmp[676896] "expr temp" "maybe param" "maybe type" "temp"
          (676899 'move' call_tmp[676896](163730 call _cond_test call_tmp[676891]))
          if call_tmp[676896]
          {
            break _breakLabel[163747] _breakLabel[163747]
          }
          unknown call_tmp[676901] "expr temp" "maybe param" "maybe type" "temp"
          (676904 'move' call_tmp[676901](163739 call actualInsertPts[163646] newIndIdx[163688]))
          (163740 call = newLoc[163701] call_tmp[676901])
          (482731 'end of statement' newLoc[163701] actualInsertPts[163646] newIndIdx[163688])
        }
        label _continueLabel[163746]
        unknown call_tmp[676906] "expr temp" "maybe param" "maybe type" "temp"
        (676909 'move' call_tmp[676906](163757 call - 1))
        unknown call_tmp[676911] "expr temp" "maybe param" "maybe type" "temp"
        (676914 'move' call_tmp[676911](163754 call == newLoc[163701] call_tmp[676906]))
        (163759 'move' tmp[163743](163752 call _cond_test call_tmp[676911]))
        tmp[163743]
      }
      label _breakLabel[163747]
    }
    unknown arrShiftMap[163787] "dead at end of block" "insert auto destroy"
    unknown call_tmp[676916] "expr temp" "maybe param" "maybe type" "temp"
    (676919 'move' call_tmp[676916](163776 call chpl_build_bounded_range 1 oldnnz[163671]))
    unknown call_tmp[676921] "expr temp" "maybe param" "maybe type" "temp"
    (676924 'move' call_tmp[676921](163779 call chpl__buildDomainExpr call_tmp[676916]))
    unknown call_tmp[676926] "expr temp" "maybe param" "maybe type" "temp"
    (676929 'move' call_tmp[676926](163783 call chpl__ensureDomainExpr call_tmp[676921]))
    unknown call_tmp[676931] "expr temp" "maybe param" "maybe type" "temp"
    (676934 'move' call_tmp[676931](163785 call chpl__buildArrayRuntimeType call_tmp[676926] int(64)[13]))
    (544270 'default init var' arrShiftMap[163787] call_tmp[676931])
    (163790 'end of statement' oldnnz[163671] actualInsertPts[163646] newIndIdx[163688] oldnnz[163671])
    {
      unknown _indexOfInterest[163995] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163996] "expr temp" "temp"
      unknown call_tmp[676938] "expr temp" "maybe param" "maybe type" "temp"
      (676941 'move' call_tmp[676938](387990 call _nnz _mt[243] this[164422]))
      unknown call_tmp[676943] "expr temp" "maybe param" "maybe type" "temp"
      (676946 'move' call_tmp[676943](164012 call - 1))
      unknown call_tmp[676948] "expr temp" "maybe param" "maybe type" "temp"
      (676951 'move' call_tmp[676948](164016 call chpl_direct_range_iter 1 call_tmp[676938] call_tmp[676943]))
      (164005 'move' _iterator[163996](164003 call _getIterator call_tmp[676948]))
      Defer
      {
        {
          (164032 call _freeIterator _iterator[163996])
        }
      }
      { scopeless type
        (164021 'move' _indexOfInterest[163995](164018 call iteratorIndex _iterator[163996]))
      }
      ForLoop[163997]
      {
        unknown i[164025] "index var" "insert auto destroy"
        (482737 'end of statement')
        (164027 'move' i[164025] _indexOfInterest[163995])
        (482738 'end of statement' i[164025])
        {
          unknown tmp[428302] "maybe param" "temp"
          (428313 'move' tmp[428302](163803 call >= oldIndIdx[163693] 1))
          unknown call_tmp[676953] "expr temp" "maybe param" "maybe type" "temp"
          (676956 'move' call_tmp[676953](428315 call _cond_invalid tmp[428302]))
          if call_tmp[676953]
          {
            (428318 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[570328] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570329] "maybe param" "temp"
          unknown call_tmp[676958] "expr temp" "maybe param" "maybe type" "temp"
          (676961 'move' call_tmp[676958](428303 call isTrue tmp[428302]))
          (570334 'move' tmp[570329](570332 call _cond_test call_tmp[676958]))
          if tmp[570329]
          {
            unknown tmp[570336] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[676963] "expr temp" "maybe param" "maybe type" "temp"
            (676966 'move' call_tmp[676963](163807 call > i[164025] newLoc[163701]))
            (570338 'move' tmp[570336](428306 call isTrue call_tmp[676963]))
            (570343 'move' tmp[570328](570340 '_paramFoldLogical' tmp[570329] tmp[570336]))
          }
          {
            (570348 'move' tmp[570328](570345 '_paramFoldLogical' tmp[570329] 0))
          }
          unknown call_tmp[676968] "expr temp" "maybe param" "maybe type" "temp"
          (676971 'move' call_tmp[676968](163989 call _cond_test tmp[570328]))
          if call_tmp[676968]
          {
            unknown call_tmp[676975] "expr temp" "maybe param" "maybe type" "temp"
            (676978 'move' call_tmp[676975](163814 call(387950 call (partial) _indices _mt[243] this[164422]) i[164025]))
            unknown call_tmp[676982] "expr temp" "maybe param" "maybe type" "temp"
            (676985 'move' call_tmp[676982](163818 call(387956 call (partial) _indices _mt[243] this[164422]) oldIndIdx[163693]))
            (163819 call = call_tmp[676975] call_tmp[676982])
            (482741 'end of statement' i[164025] oldIndIdx[163693])
            unknown call_tmp[676987] "expr temp" "maybe param" "maybe type" "temp"
            (676990 'move' call_tmp[676987](163826 call arrShiftMap[163787] oldIndIdx[163693]))
            (163828 call = call_tmp[676987] i[164025])
            (482744 'end of statement' arrShiftMap[163787] oldIndIdx[163693] i[164025])
            (163833 call -= oldIndIdx[163693] 1)
            (482748 'end of statement' oldIndIdx[163693])
          }
          {
            unknown tmp[428281] "maybe param" "temp"
            unknown call_tmp[676994] "expr temp" "maybe param" "maybe type" "temp"
            (676997 'move' call_tmp[676994](462311 call _dom _mt[243] inds[163401]))
            unknown call_tmp[677001] "expr temp" "maybe param" "maybe type" "temp"
            (677004 'move' call_tmp[677001](163838 call low _mt[243] call_tmp[676994]))
            (428292 'move' tmp[428281](163841 call >= newIndIdx[163688] call_tmp[677001]))
            unknown call_tmp[677006] "expr temp" "maybe param" "maybe type" "temp"
            (677009 'move' call_tmp[677006](428294 call _cond_invalid tmp[428281]))
            if call_tmp[677006]
            {
              (428297 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[570355] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[570356] "maybe param" "temp"
            unknown call_tmp[677011] "expr temp" "maybe param" "maybe type" "temp"
            (677014 'move' call_tmp[677011](428282 call isTrue tmp[428281]))
            (570361 'move' tmp[570356](570359 call _cond_test call_tmp[677011]))
            if tmp[570356]
            {
              unknown tmp[570363] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[677016] "expr temp" "maybe param" "maybe type" "temp"
              (677019 'move' call_tmp[677016](163845 call == i[164025] newLoc[163701]))
              (570365 'move' tmp[570363](428285 call isTrue call_tmp[677016]))
              (570370 'move' tmp[570355](570367 '_paramFoldLogical' tmp[570356] tmp[570363]))
            }
            {
              (570375 'move' tmp[570355](570372 '_paramFoldLogical' tmp[570356] 0))
            }
            unknown call_tmp[677021] "expr temp" "maybe param" "maybe type" "temp"
            (677024 'move' call_tmp[677021](163984 call _cond_test tmp[570355]))
            if call_tmp[677021]
            {
              unknown call_tmp[677028] "expr temp" "maybe param" "maybe type" "temp"
              (677031 'move' call_tmp[677028](163852 call(387969 call (partial) _indices _mt[243] this[164422]) i[164025]))
              unknown call_tmp[677033] "expr temp" "maybe param" "maybe type" "temp"
              (677036 'move' call_tmp[677033](163856 call inds[163401] newIndIdx[163688]))
              (163857 call = call_tmp[677028] call_tmp[677033])
              (482751 'end of statement' i[164025] newIndIdx[163688])
              (163863 call -= newIndIdx[163688] 1)
              (482754 'end of statement' newIndIdx[163688])
              unknown call_tmp[677040] "expr temp" "maybe param" "maybe type" "temp"
              (677043 'move' call_tmp[677040](462315 call _dom _mt[243] inds[163401]))
              unknown call_tmp[677047] "expr temp" "maybe param" "maybe type" "temp"
              (677050 'move' call_tmp[677047](163868 call low _mt[243] call_tmp[677040]))
              unknown call_tmp[677052] "expr temp" "maybe param" "maybe type" "temp"
              (677055 'move' call_tmp[677052](163871 call >= newIndIdx[163688] call_tmp[677047]))
              unknown call_tmp[677057] "expr temp" "maybe param" "maybe type" "temp"
              (677060 'move' call_tmp[677057](163888 call _cond_test call_tmp[677052]))
              if call_tmp[677057]
              {
                unknown call_tmp[677062] "expr temp" "maybe param" "maybe type" "temp"
                (677065 'move' call_tmp[677062](163877 call actualInsertPts[163646] newIndIdx[163688]))
                (163878 call = newLoc[163701] call_tmp[677062])
                (482756 'end of statement' newLoc[163701] actualInsertPts[163646] newIndIdx[163688])
              }
              {
                unknown call_tmp[677067] "expr temp" "maybe param" "maybe type" "temp"
                (677070 'move' call_tmp[677067](163883 call - 2))
                (163885 call = newLoc[163701] call_tmp[677067])
                (482760 'end of statement' newLoc[163701])
              }
              {
                unknown tmp[163932] "temp"
                unknown call_tmp[677072] "expr temp" "maybe param" "maybe type" "temp"
                (677075 'move' call_tmp[677072](163958 call - 1))
                unknown call_tmp[677077] "expr temp" "maybe param" "maybe type" "temp"
                (677080 'move' call_tmp[677077](163955 call == newLoc[163701] call_tmp[677072]))
                (163960 'move' tmp[163932](163953 call _cond_test call_tmp[677077]))
                WhileDo[163937]
                {
                  {
                    (163902 call -= newIndIdx[163688] 1)
                    (482762 'end of statement' newIndIdx[163688])
                    unknown call_tmp[677084] "expr temp" "maybe param" "maybe type" "temp"
                    (677087 'move' call_tmp[677084](462319 call _dom _mt[243] inds[163401]))
                    unknown call_tmp[677091] "expr temp" "maybe param" "maybe type" "temp"
                    (677094 'move' call_tmp[677091](163908 call low _mt[243] call_tmp[677084]))
                    unknown call_tmp[677096] "expr temp" "maybe param" "maybe type" "temp"
                    (677099 'move' call_tmp[677096](163912 call - call_tmp[677091] 1))
                    unknown call_tmp[677101] "expr temp" "maybe param" "maybe type" "temp"
                    (677104 'move' call_tmp[677101](163914 call == newIndIdx[163688] call_tmp[677096]))
                    unknown call_tmp[677106] "expr temp" "maybe param" "maybe type" "temp"
                    (677109 'move' call_tmp[677106](163919 call _cond_test call_tmp[677101]))
                    if call_tmp[677106]
                    {
                      break _breakLabel[163936] _breakLabel[163936]
                    }
                    unknown call_tmp[677111] "expr temp" "maybe param" "maybe type" "temp"
                    (677114 'move' call_tmp[677111](163928 call actualInsertPts[163646] newIndIdx[163688]))
                    (163929 call = newLoc[163701] call_tmp[677111])
                    (482764 'end of statement' newLoc[163701] actualInsertPts[163646] newIndIdx[163688])
                  }
                  label _continueLabel[163935]
                  unknown call_tmp[677116] "expr temp" "maybe param" "maybe type" "temp"
                  (677119 'move' call_tmp[677116](163946 call - 1))
                  unknown call_tmp[677121] "expr temp" "maybe param" "maybe type" "temp"
                  (677124 'move' call_tmp[677121](163943 call == newLoc[163701] call_tmp[677116]))
                  (163948 'move' tmp[163932](163941 call _cond_test call_tmp[677121]))
                  tmp[163932]
                }
                label _breakLabel[163936]
              }
            }
            {
              (163982 call halt "Something went wrong")
            }
          }
        }
        label _continueLabel[164000]
        _indexOfInterest[163995]
        _iterator[163996]
      }
      label _breakLabel[164001]
    }
    {
      unknown _indexOfInterest[164052] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[164053] "expr temp" "temp"
      unknown call_tmp[677128] "expr temp" "maybe param" "maybe type" "temp"
      (677131 'move' call_tmp[677128](387995 call _arrs _mt[243] this[164422]))
      (164062 'move' _iterator[164053](164060 call _getIterator call_tmp[677128]))
      Defer
      {
        {
          (164078 call _freeIterator _iterator[164053])
        }
      }
      { scopeless type
        (164067 'move' _indexOfInterest[164052](164064 call iteratorIndex _iterator[164053]))
      }
      ForLoop[164054]
      {
        unknown a[164071] "index var" "insert auto destroy"
        (482770 'end of statement')
        (164073 'move' a[164071] _indexOfInterest[164052])
        (482771 'end of statement' a[164071])
        (164050 call(164044 call (partial) sparseBulkShiftArray _mt[243] a[164071]) arrShiftMap[163787] oldnnz[163671])
        (482773 'end of statement' a[164071] arrShiftMap[163787] oldnnz[163671])
        label _continueLabel[164057]
        _indexOfInterest[164052]
        _iterator[164053]
      }
      label _breakLabel[164058]
    }
    (521695 'move' ret[521680](521694 'deref' actualAddCnt[163648]))
    gotoReturn _end_bulkAdd_help[521678] _end_bulkAdd_help[521678]
    (482777 'end of statement' actualAddCnt[163648])
    label _end_bulkAdd_help[521678]
    (521682 return ret[521680])
    (355224 'used modules list'(163419 'import' Sort[267885]))
    (361257 'referenced modules list' Sort[267885])
  }
  where {
    unknown call_tmp[677137] "expr temp" "maybe param" "maybe type" "temp"
    (677140 'move' call_tmp[677137](387842 call rank _mt[243] this[164422]))
    unknown call_tmp[677144] "expr temp" "maybe param" "maybe type" "temp"
    (677147 'move' call_tmp[677144](387847 call idxType _mt[243] this[164422]))
    unknown call_tmp[677149] "expr temp" "maybe param" "maybe type" "temp"
    (677152 'move' call_tmp[677149](163397 call chpl__buildIndexType call_tmp[677137] call_tmp[677144]))
    unknown call_tmp[677156] "expr temp" "maybe param" "maybe type" "temp"
    (677159 'move' call_tmp[677156](462327 call eltType _mt[243] inds[163401]))
    unknown call_tmp[677161] "expr temp" "maybe param" "maybe type" "temp"
    (677164 'move' call_tmp[677161](462331 call == call_tmp[677149] call_tmp[677156]))
    (462325 call & 1 call_tmp[677161])
  }
  function DefaultSparseDom[164336](?).dsiMyDist[164092](arg _mt[164428]:_MT[238], arg this[164426]:DefaultSparseDom[164336](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521701] "RVV" "temp"
    unknown call_tmp[677168] "expr temp" "maybe param" "maybe type" "temp"
    (677171 'move' call_tmp[677168](388004 call dist _mt[243] this[164426]))
    (521707 'move' ret[521701](521706 'coerce' call_tmp[677168] unmanaged BaseDist[415526]))
    (521703 return ret[521701])
  }
  { scopeless type
    unmanaged BaseDist[415526]
  }
  function DefaultSparseDom[164336](?).dsiClear[164105](arg _mt[164432]:_MT[238], arg this[164430]:DefaultSparseDom[164336](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[677175] "expr temp" "maybe param" "maybe type" "temp"
    (677178 'move' call_tmp[677175](388009 call _nnz _mt[243] this[164430]))
    (164109 call = call_tmp[677175] 0)
    (521709 return _void[55])
  }
  function DefaultSparseDom[164336](?).dimIter[164119](arg _mt[164436]:_MT[238], arg this[164434]:DefaultSparseDom[164336](?), param arg d[164117]:_any[178](?), arg ind[164121]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521713] "RVV" "temp"
    unknown call_tmp[677182] "expr temp" "maybe param" "maybe type" "temp"
    (677185 'move' call_tmp[677182](388015 call rank _mt[243] this[164434]))
    unknown call_tmp[677187] "expr temp" "maybe param" "maybe type" "temp"
    (677190 'move' call_tmp[677187](164126 call - call_tmp[677182] 1))
    unknown call_tmp[677192] "expr temp" "maybe param" "maybe type" "temp"
    (677195 'move' call_tmp[677192](164128 call != d[164117] call_tmp[677187]))
    unknown call_tmp[677197] "expr temp" "maybe param" "maybe type" "temp"
    (677200 'move' call_tmp[677197](164152 call _cond_test call_tmp[677192]))
    if call_tmp[677197]
    {
      (164149 call compilerError "dimIter() not supported on sparse domains for dimensions other than the last")
    }
    (164176 call halt "dimIter() not yet implemented for sparse domains")
    (482782 'end of statement')
    unknown yret[521717] "YVV" "temp"
    unknown call_tmp[677204] "expr temp" "maybe param" "maybe type" "temp"
    (677207 'move' call_tmp[677204](164181 call(388020 call (partial) _indices _mt[243] this[164434]) 0))
    (521720 'move' yret[521717](521719 'deref' call_tmp[677204]))
    (521722 yield yret[521717])
    (521715 return ret[521713])
  }
  function DefaultSparseDom[164336](?).dsiAssignDomain[164192](arg _mt[164440]:_MT[238], arg this[164438]:DefaultSparseDom[164336](?), arg rhs[164189]:_domain[125914](?), arg lhsPrivate[164195]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[428323] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492521] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[677211] "expr temp" "maybe param" "maybe type" "temp"
      (677214 'move' call_tmp[677211](164200 call _instance _mt[243] rhs[164189]))
      (492525 'move' call_type_tmp[492521](164203 'typeof' call_tmp[677211]))
    }
    unknown call_tmp[677216] "expr temp" "maybe param" "maybe type" "temp"
    (677219 'move' call_tmp[677216](164205 call _to_borrowed call_type_tmp[492521]))
    unknown call_tmp[677221] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (677224 'move' call_tmp[677221](164207 'typeof' this[164438]))
    (428334 'move' tmp[428323](164208 call == call_tmp[677216] call_tmp[677221]))
    unknown call_tmp[677226] "expr temp" "maybe param" "maybe type" "temp"
    (677229 'move' call_tmp[677226](428336 call _cond_invalid tmp[428323]))
    if call_tmp[677226]
    {
      (428339 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570382] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570383] "maybe param" "temp"
    unknown call_tmp[677231] "expr temp" "maybe param" "maybe type" "temp"
    (677234 'move' call_tmp[677231](428324 call isTrue tmp[428323]))
    (570388 'move' tmp[570383](570386 call _cond_test call_tmp[677231]))
    if tmp[570383]
    {
      unknown tmp[570390] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[677238] "expr temp" "maybe param" "maybe type" "temp"
      (677241 'move' call_tmp[677238](164211 call dsiNumIndices _mt[243] this[164438]))
      unknown call_tmp[677243] "expr temp" "maybe param" "maybe type" "temp"
      (677246 'move' call_tmp[677243](164215 call == call_tmp[677238] 0))
      (570392 'move' tmp[570390](428327 call isTrue call_tmp[677243]))
      (570397 'move' tmp[570382](570394 '_paramFoldLogical' tmp[570383] tmp[570390]))
    }
    {
      (570402 'move' tmp[570382](570399 '_paramFoldLogical' tmp[570383] 0))
    }
    unknown call_tmp[677248] "expr temp" "maybe param" "maybe type" "temp"
    (677251 'move' call_tmp[677248](164264 call _cond_test tmp[570382]))
    if call_tmp[677248]
    {
      unknown call_tmp[677255] "expr temp" "maybe param" "maybe type" "temp"
      (677258 'move' call_tmp[677255](164222 call _nnz _mt[243] this[164438]))
      unknown call_tmp[677262] "expr temp" "maybe param" "maybe type" "temp"
      (677265 'move' call_tmp[677262](164226 call _nnz _mt[243] rhs[164189]))
      (164229 call = call_tmp[677255] call_tmp[677262])
      (482785 'end of statement')
      unknown call_tmp[677269] "expr temp" "maybe param" "maybe type" "temp"
      (677272 'move' call_tmp[677269](164234 call nnzDom _mt[243] this[164438]))
      unknown call_tmp[677276] "expr temp" "maybe param" "maybe type" "temp"
      (677279 'move' call_tmp[677276](164238 call nnzDom _mt[243] rhs[164189]))
      (164241 call = call_tmp[677269] call_tmp[677276])
      (482786 'end of statement')
      unknown call_tmp[677283] "expr temp" "maybe param" "maybe type" "temp"
      (677286 'move' call_tmp[677283](164247 call _indices _mt[243] this[164438]))
      unknown call_tmp[677290] "expr temp" "maybe param" "maybe type" "temp"
      (677293 'move' call_tmp[677290](164251 call _indices _mt[243] rhs[164189]))
      (164254 call = call_tmp[677283] call_tmp[677290])
    }
    {
      (164261 call chpl_assignDomainWithIndsIterSafeForRemoving this[164438] rhs[164189])
    }
    (521724 return _void[55])
  }
  function DefaultSparseDom[164336](?).dsiHasSingleLocalSubdomain[164273](arg _mt[164444]:_MT[238], arg this[164442]:DefaultSparseDom[164336](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521728] "RVV" "param" "temp"
    (521733 'move' ret[521728](521732 'deref' 1))
    (521730 return ret[521728])
  }
  function DefaultSparseDom[164336](?).dsiLocalSubdomain[164287](arg _mt[164448]:_MT[238], arg this[164446]:DefaultSparseDom[164336](?), arg loc[164284]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521737] "RVV" "temp"
    unknown call_tmp[677295] "expr temp" "maybe param" "maybe type" "temp"
    (677298 'move' call_tmp[677295](164290 '_wide_get_locale' this[164446]))
    unknown call_tmp[677300] "expr temp" "maybe param" "maybe type" "temp"
    (677303 'move' call_tmp[677300](164291 call chpl_localeID_to_locale call_tmp[677295]))
    unknown call_tmp[677305] "expr temp" "maybe param" "maybe type" "temp"
    (677308 'move' call_tmp[677305](164294 call == call_tmp[677300] loc[164284]))
    unknown call_tmp[677310] "expr temp" "maybe param" "maybe type" "temp"
    (677313 'move' call_tmp[677310](164328 call _cond_test call_tmp[677305]))
    if call_tmp[677310]
    {
      unknown call_tmp[677315] "expr temp" "maybe param" "maybe type" "temp"
      (677318 'move' call_tmp[677315](164300 call _to_unmanaged this[164446]))
      unknown call_tmp[677320] "expr temp" "maybe param" "maybe type" "temp"
      (677323 'move' call_tmp[677320](164302 call _getDomain call_tmp[677315]))
      (521742 'move' ret[521737](521741 'deref' call_tmp[677320]))
      gotoReturn _end_dsiLocalSubdomain[521735] _end_dsiLocalSubdomain[521735]
    }
    {
      unknown call_tmp[677327] "expr temp" "maybe param" "maybe type" "temp"
      (677330 'move' call_tmp[677327](388033 call rank _mt[243] this[164446]))
      unknown call_tmp[677334] "expr temp" "maybe param" "maybe type" "temp"
      (677337 'move' call_tmp[677334](388038 call idxType _mt[243] this[164446]))
      unknown call_tmp[677341] "expr temp" "maybe param" "maybe type" "temp"
      (677344 'move' call_tmp[677341](388043 call dist _mt[243] this[164446]))
      unknown call_tmp[677348] "expr temp" "maybe param" "maybe type" "temp"
      (677351 'move' call_tmp[677348](388048 call parentDom _mt[243] this[164446]))
      unknown call_tmp[677353] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (677356 'move' call_tmp[677353](748010 'new' DefaultSparseDom[378091](?) call_tmp[677327] call_tmp[677334] call_tmp[677341] call_tmp[677348](_chpl_manager = unmanaged[220](?))))
      const copy[164316] "dead at end of block" "const" "insert auto destroy"
      (544272 'init var' copy[164316] call_tmp[677353])
      (164319 'end of statement')
      unknown call_tmp[677358] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (677361 'move' call_tmp[677358](748011 'new' _domain[125914](?) copy[164316]))
      (521747 'move' ret[521737](521746 'deref' call_tmp[677358]))
      gotoReturn _end_dsiLocalSubdomain[521735] _end_dsiLocalSubdomain[521735]
      (482791 'end of statement' copy[164316])
    }
    label _end_dsiLocalSubdomain[521735]
    (521739 return ret[521737])
  }
  function DefaultSparseDom[164336](?).super[811310](arg _mt[811312]:_MT[238], arg this[811314]:DefaultSparseDom[164336](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811324] "RVV" "temp"
    unknown call_tmp[811331] "expr temp" "maybe param" "maybe type" "temp"
    (811334 'move' call_tmp[811331](811318 '.v' this[811314] c"super"))
    (811329 'move' ret[811324](811328 'deref' call_tmp[811331]))
    (811326 return ret[811324])
  }
  function DefaultSparseDom[164336](?).dist[811336](arg _mt[811338]:_MT[238], arg this[811340]:DefaultSparseDom[164336](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811350] "RVV" "temp"
    unknown call_tmp[811357] "expr temp" "maybe param" "maybe type" "temp"
    (811360 'move' call_tmp[811357](811344 '.' this[811340] c"dist"))
    (811355 'move' ret[811350](811354 'addr of' call_tmp[811357]))
    (811352 return ret[811350])
  }
  function DefaultSparseDom[164336](?)._nnz[811362](arg _mt[811364]:_MT[238], arg this[811366]:DefaultSparseDom[164336](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811376] "RVV" "temp"
    unknown call_tmp[811383] "expr temp" "maybe param" "maybe type" "temp"
    (811386 'move' call_tmp[811383](811370 '.' this[811366] c"_nnz"))
    (811381 'move' ret[811376](811380 'addr of' call_tmp[811383]))
    (811378 return ret[811376])
  }
  function DefaultSparseDom[164336](?)._indices[811388](arg _mt[811390]:_MT[238], arg this[811392]:DefaultSparseDom[164336](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811402] "RVV" "temp"
    unknown call_tmp[811409] "expr temp" "maybe param" "maybe type" "temp"
    (811412 'move' call_tmp[811409](811396 '.' this[811392] c"_indices"))
    (811407 'move' ret[811402](811406 'addr of' call_tmp[811409]))
    (811404 return ret[811402])
  }
  function DefaultSparseDom[164336](?).deinit[811414](arg _mt[811416]:_MT[238], arg this[811418]:DefaultSparseDom[164336](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (811426 return _void[55])
  }
  function DefaultSparseDom[164336](?).writeThis[811428](arg _mt[811432]:_MT[238], arg this[811430]:DefaultSparseDom[164336](?), arg f[811431]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (811437 call writeThisDefaultImpl f[811431] this[811430])
    (811442 return _void[55])
  }
  function DefaultSparseDom[164336](?).readThis[811444](arg _mt[811448]:_MT[238], arg this[811446]:DefaultSparseDom[164336](?), arg f[811447]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (811452 call readThisDefaultImpl f[811447] this[811446])
    (811458 return _void[55])
  }
  type DefaultSparseDom[164336](?) val super[355749]:BaseSparseDomImpl[147965](?) "delay instantiation" "super class" val dist[161578]:unmanaged DefaultDist[415502] unmanaged DefaultDist[415502] val _nnz[161583]:int(64)[13] 0 unknown _indices[161598] "local field"(161596 call chpl__buildArrayRuntimeType(161594 call chpl__ensureDomainExpr nnzDom[146926])(161592 call chpl__buildIndexType rank[148215] idxType[148219]))
  type DefaultSparseDom[378091](?)
  function DefaultSparseArr[165798](?).init[164458](arg _mt[165802]:_MT[238], arg this[165800]:DefaultSparseArr[165798](?), arg eltType[164456]:_any[178](?), param arg rank[164461]:int(64)[13], arg idxType[164464]:_any[178](?), arg dom[164466]:_any[178](?), param arg initElts[164469]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462334] "temporary of super field" "temp"
    (462336 'move' super_tmp[462334](462333 '.v' this[165800] c"super"))
    (164482 call(164473 call (partial) init _mt[243] super_tmp[462334]) eltType[164456] rank[164461] idxType[164464] dom[164466] initElts[164469])
    (482793 'end of statement')
    unknown tmp[462339] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492527] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[677365] "expr temp" "maybe param" "maybe type" "temp"
      (677368 'move' call_tmp[677365](462341 '.v' this[165800] c"super"))
      (492531 'move' call_type_tmp[492527](462344 'typeof' call_tmp[677365]))
    }
    (462345 'move' tmp[462339] call_type_tmp[492527])
    unknown call_tmp[677370] "maybe param" "maybe type" "temp"
    (677373 'move' call_tmp[677370](462350 'cast' tmp[462339] this[165800]))
    unknown chpl__thisAsParent[462347] "dead at end of block" "insert auto destroy" "temp"
    (544274 'init var' chpl__thisAsParent[462347] call_tmp[677370] tmp[462339])
    (462353 'setcid' chpl__thisAsParent[462347])
    (482794 'end of statement')
    (462355 'setcid' this[165800])
    (521751 return _void[55])
  }
  function DefaultSparseArr[165798](?).dsiAccess[164493](arg _mt[165806]:_MT[238], arg this[165804]:DefaultSparseArr[165798](?), arg ind[164490] :
  (388060 call idxType _mt[243] this[165804])) ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521755] "RVV" "temp"
    unknown call_tmp[677377] "expr temp" "maybe param" "maybe type" "temp"
    (677380 'move' call_tmp[677377](164601 call _cond_test 1))
    if call_tmp[677377]
    {
      unknown call_tmp[677384] "expr temp" "maybe param" "maybe type" "temp"
      (677387 'move' call_tmp[677384](361299 call dom _mt[243] this[165804]))
      unknown call_tmp[677391] "expr temp" "maybe param" "maybe type" "temp"
      (677394 'move' call_tmp[677391](164501 call parentDom _mt[243] call_tmp[677384]))
      unknown call_tmp[677398] "expr temp" "maybe param" "maybe type" "temp"
      (677401 'move' call_tmp[677398](164509 call(164504 call (partial) contains _mt[243] call_tmp[677391]) ind[164490]))
      unknown call_tmp[677403] "expr temp" "maybe param" "maybe type" "temp"
      (677406 'move' call_tmp[677403](164510 call ! call_tmp[677398]))
      unknown call_tmp[677408] "expr temp" "maybe param" "maybe type" "temp"
      (677411 'move' call_tmp[677408](164597 call _cond_test call_tmp[677403]))
      if call_tmp[677408]
      {
        unknown call_tmp[677413] "expr temp" "maybe param" "maybe type" "temp"
        (677416 'move' call_tmp[677413](164586 call _cond_test debugDefaultSparse[161569]))
        if call_tmp[677413]
        {
          unknown call_tmp[677418] "expr temp" "maybe param" "maybe type" "temp"
          (677421 'move' call_tmp[677418](361302 call here[90439]))
          unknown call_tmp[677425] "expr temp" "maybe param" "maybe type" "temp"
          (677428 'move' call_tmp[677425](164533 call id _mt[243] call_tmp[677418]))
          (164536 call writeln "On locale " call_tmp[677425])
          (482796 'end of statement')
          (164559 call writeln "In dsiAccess, got index " ind[164490])
          (482797 'end of statement')
          unknown call_tmp[677432] "expr temp" "maybe param" "maybe type" "temp"
          (677435 'move' call_tmp[677432](361306 call dom _mt[243] this[165804]))
          unknown call_tmp[677439] "expr temp" "maybe param" "maybe type" "temp"
          (677442 'move' call_tmp[677439](164581 call parentDom _mt[243] call_tmp[677432]))
          (164584 call writeln "dom.parentDom = " call_tmp[677439])
        }
        (164595 call halt "array index out of bounds: " ind[164490])
      }
    }
    unknown call_tmp[677446] "expr temp" "maybe param" "maybe type" "temp"
    (677449 'move' call_tmp[677446](361311 call dom _mt[243] this[165804]))
    unknown call_tmp[677453] "maybe param" "maybe type" "temp"
    (677456 'move' call_tmp[677453](164618 call(164613 call (partial) find _mt[243] call_tmp[677446]) ind[164490]))
    const tmp[164619] "dead at end of block" "const" "insert auto destroy" "temp"
    (544276 'init var' tmp[164619] call_tmp[677453])
    (164626 call _check_tuple_var_decl tmp[164619] 2)
    (482800 'end of statement')
    unknown call_tmp[677458] "maybe param" "maybe type" "temp"
    (677461 'move' call_tmp[677458](164620 call tmp[164619] 0))
    const found[164607] "dead at end of block" "const" "insert auto destroy"
    (544278 'init var' found[164607] call_tmp[677458])
    unknown call_tmp[677463] "maybe param" "maybe type" "temp"
    (677466 'move' call_tmp[677463](164623 call tmp[164619] 1))
    const loc[164609] "dead at end of block" "const" "insert auto destroy"
    (544280 'init var' loc[164609] call_tmp[677463])
    (164631 'end of statement')
    unknown call_tmp[677468] "expr temp" "maybe param" "maybe type" "temp"
    (677471 'move' call_tmp[677468](164661 call _cond_test found[164607]))
    if call_tmp[677468]
    {
      unknown call_tmp[677475] "expr temp" "maybe param" "maybe type" "temp"
      (677478 'move' call_tmp[677475](164636 call(388077 call (partial) data _mt[243] this[165804]) loc[164609]))
      (521760 'move' ret[521755](521759 'addr of' call_tmp[677475]))
      gotoReturn _end_dsiAccess[521753] _end_dsiAccess[521753]
      (482801 'end of statement' loc[164609])
    }
    {
      (164659 call halt "attempting to assign a 'zero' value in a sparse array: " ind[164490])
    }
    label _end_dsiAccess[521753]
    (521757 return ret[521755])
  }
  where {
    unknown call_tmp[677482] "expr temp" "maybe param" "maybe type" "temp"
    (677485 'move' call_tmp[677482](388065 call rank _mt[243] this[165804]))
    (164497 call == call_tmp[677482] 1)
  }
  function DefaultSparseArr[165798](?).dsiAccess[164676](arg _mt[165810]:_MT[238], arg this[165808]:DefaultSparseArr[165798](?), arg ind[164673] :
  (388084 call idxType _mt[243] this[165808])) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521766] "RVV" "temp"
    unknown call_tmp[677489] "expr temp" "maybe param" "maybe type" "temp"
    (677492 'move' call_tmp[677489](164706 call _cond_test 1))
    if call_tmp[677489]
    {
      unknown call_tmp[677496] "expr temp" "maybe param" "maybe type" "temp"
      (677499 'move' call_tmp[677496](361316 call dom _mt[243] this[165808]))
      unknown call_tmp[677503] "expr temp" "maybe param" "maybe type" "temp"
      (677506 'move' call_tmp[677503](164684 call parentDom _mt[243] call_tmp[677496]))
      unknown call_tmp[677510] "expr temp" "maybe param" "maybe type" "temp"
      (677513 'move' call_tmp[677510](164692 call(164687 call (partial) contains _mt[243] call_tmp[677503]) ind[164673]))
      unknown call_tmp[677515] "expr temp" "maybe param" "maybe type" "temp"
      (677518 'move' call_tmp[677515](164693 call ! call_tmp[677510]))
      unknown call_tmp[677520] "expr temp" "maybe param" "maybe type" "temp"
      (677523 'move' call_tmp[677520](164701 call _cond_test call_tmp[677515]))
      if call_tmp[677520]
      {
        (164699 call halt "array index out of bounds: " ind[164673])
      }
    }
    unknown call_tmp[677527] "expr temp" "maybe param" "maybe type" "temp"
    (677530 'move' call_tmp[677527](361321 call dom _mt[243] this[165808]))
    unknown call_tmp[677534] "maybe param" "maybe type" "temp"
    (677537 'move' call_tmp[677534](164723 call(164718 call (partial) find _mt[243] call_tmp[677527]) ind[164673]))
    const tmp[164724] "dead at end of block" "const" "insert auto destroy" "temp"
    (544282 'init var' tmp[164724] call_tmp[677534])
    (164731 call _check_tuple_var_decl tmp[164724] 2)
    (482805 'end of statement')
    unknown call_tmp[677539] "maybe param" "maybe type" "temp"
    (677542 'move' call_tmp[677539](164725 call tmp[164724] 0))
    const found[164712] "dead at end of block" "const" "insert auto destroy"
    (544284 'init var' found[164712] call_tmp[677539])
    unknown call_tmp[677544] "maybe param" "maybe type" "temp"
    (677547 'move' call_tmp[677544](164728 call tmp[164724] 1))
    const loc[164714] "dead at end of block" "const" "insert auto destroy"
    (544286 'init var' loc[164714] call_tmp[677544])
    (164736 'end of statement')
    unknown call_tmp[677549] "expr temp" "maybe param" "maybe type" "temp"
    (677552 'move' call_tmp[677549](164747 call _cond_test found[164712]))
    if call_tmp[677549]
    {
      unknown call_tmp[677556] "expr temp" "maybe param" "maybe type" "temp"
      (677559 'move' call_tmp[677556](164741 call(388099 call (partial) data _mt[243] this[165808]) loc[164714]))
      (521771 'move' ret[521766](521770 'addr of' call_tmp[677556]))
      gotoReturn _end_dsiAccess[521764] _end_dsiAccess[521764]
      (482806 'end of statement' loc[164714])
    }
    {
      unknown call_tmp[677563] "expr temp" "maybe param" "maybe type" "temp"
      (677566 'move' call_tmp[677563](388105 call irv _mt[243] this[165808]))
      (521776 'move' ret[521766](521775 'addr of' call_tmp[677563]))
      gotoReturn _end_dsiAccess[521764] _end_dsiAccess[521764]
    }
    label _end_dsiAccess[521764]
    (521768 return ret[521766])
  }
  where {
    unknown call_tmp[677570] "expr temp" "maybe param" "maybe type" "temp"
    (677573 'move' call_tmp[677570](388089 call rank _mt[243] this[165808]))
    (164680 call == call_tmp[677570] 1)
  }
  function DefaultSparseArr[165798](?).dsiAccess[164765](arg _mt[165814]:_MT[238], arg this[165812]:DefaultSparseArr[165798](?), arg ind[164762] :
  unknown call_tmp[677577] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521782] "RVV" "temp"
    unknown call_tmp[677589] "expr temp" "maybe param" "maybe type" "temp"
    (677592 'move' call_tmp[677589](164791 call _cond_test 1))
    if call_tmp[677589]
    {
      unknown call_tmp[677596] "expr temp" "maybe param" "maybe type" "temp"
      (677599 'move' call_tmp[677596](361326 call dom _mt[243] this[165812]))
      unknown call_tmp[677603] "expr temp" "maybe param" "maybe type" "temp"
      (677606 'move' call_tmp[677603](164769 call parentDom _mt[243] call_tmp[677596]))
      unknown call_tmp[677610] "expr temp" "maybe param" "maybe type" "temp"
      (677613 'move' call_tmp[677610](164777 call(164772 call (partial) contains _mt[243] call_tmp[677603]) ind[164762]))
      unknown call_tmp[677615] "expr temp" "maybe param" "maybe type" "temp"
      (677618 'move' call_tmp[677615](164778 call ! call_tmp[677610]))
      unknown call_tmp[677620] "expr temp" "maybe param" "maybe type" "temp"
      (677623 'move' call_tmp[677620](164786 call _cond_test call_tmp[677615]))
      if call_tmp[677620]
      {
        (164784 call halt "array index out of bounds: " ind[164762])
      }
    }
    unknown call_tmp[677627] "expr temp" "maybe param" "maybe type" "temp"
    (677630 'move' call_tmp[677627](361331 call dom _mt[243] this[165812]))
    unknown call_tmp[677634] "maybe param" "maybe type" "temp"
    (677637 'move' call_tmp[677634](164808 call(164803 call (partial) find _mt[243] call_tmp[677627]) ind[164762]))
    const tmp[164809] "dead at end of block" "const" "insert auto destroy" "temp"
    (544288 'init var' tmp[164809] call_tmp[677634])
    (164816 call _check_tuple_var_decl tmp[164809] 2)
    (482810 'end of statement')
    unknown call_tmp[677639] "maybe param" "maybe type" "temp"
    (677642 'move' call_tmp[677639](164810 call tmp[164809] 0))
    const found[164797] "dead at end of block" "const" "insert auto destroy"
    (544290 'init var' found[164797] call_tmp[677639])
    unknown call_tmp[677644] "maybe param" "maybe type" "temp"
    (677647 'move' call_tmp[677644](164813 call tmp[164809] 1))
    const loc[164799] "dead at end of block" "const" "insert auto destroy"
    (544292 'init var' loc[164799] call_tmp[677644])
    (164821 'end of statement')
    unknown call_tmp[677649] "expr temp" "maybe param" "maybe type" "temp"
    (677652 'move' call_tmp[677649](164835 call _cond_test found[164797]))
    if call_tmp[677649]
    {
      unknown call_tmp[677656] "expr temp" "maybe param" "maybe type" "temp"
      (677659 'move' call_tmp[677656](164826 call(388125 call (partial) data _mt[243] this[165812]) loc[164799]))
      (521787 'move' ret[521782](521786 'addr of' call_tmp[677656]))
      gotoReturn _end_dsiAccess[521780] _end_dsiAccess[521780]
      (482811 'end of statement' loc[164799])
    }
    {
      (164833 call halt "attempting to assign a 'zero' value in a sparse array: " ind[164762])
    }
    label _end_dsiAccess[521780]
    (521784 return ret[521782])
  }
  function DefaultSparseArr[165798](?).dsiAccess[164852](arg _mt[165818]:_MT[238], arg this[165816]:DefaultSparseArr[165798](?), arg ind[164849] :
  unknown call_tmp[677663] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521793] "RVV" "temp"
    unknown call_tmp[677675] "expr temp" "maybe param" "maybe type" "temp"
    (677678 'move' call_tmp[677675](164882 call _cond_test 1))
    if call_tmp[677675]
    {
      unknown call_tmp[677682] "expr temp" "maybe param" "maybe type" "temp"
      (677685 'move' call_tmp[677682](361336 call dom _mt[243] this[165816]))
      unknown call_tmp[677689] "expr temp" "maybe param" "maybe type" "temp"
      (677692 'move' call_tmp[677689](164860 call parentDom _mt[243] call_tmp[677682]))
      unknown call_tmp[677696] "expr temp" "maybe param" "maybe type" "temp"
      (677699 'move' call_tmp[677696](164868 call(164863 call (partial) contains _mt[243] call_tmp[677689]) ind[164849]))
      unknown call_tmp[677701] "expr temp" "maybe param" "maybe type" "temp"
      (677704 'move' call_tmp[677701](164869 call ! call_tmp[677696]))
      unknown call_tmp[677706] "expr temp" "maybe param" "maybe type" "temp"
      (677709 'move' call_tmp[677706](164877 call _cond_test call_tmp[677701]))
      if call_tmp[677706]
      {
        (164875 call halt "array index out of bounds: " ind[164849])
      }
    }
    unknown call_tmp[677713] "expr temp" "maybe param" "maybe type" "temp"
    (677716 'move' call_tmp[677713](361341 call dom _mt[243] this[165816]))
    unknown call_tmp[677720] "maybe param" "maybe type" "temp"
    (677723 'move' call_tmp[677720](164899 call(164894 call (partial) find _mt[243] call_tmp[677713]) ind[164849]))
    const tmp[164900] "dead at end of block" "const" "insert auto destroy" "temp"
    (544294 'init var' tmp[164900] call_tmp[677720])
    (164907 call _check_tuple_var_decl tmp[164900] 2)
    (482815 'end of statement')
    unknown call_tmp[677725] "maybe param" "maybe type" "temp"
    (677728 'move' call_tmp[677725](164901 call tmp[164900] 0))
    const found[164888] "dead at end of block" "const" "insert auto destroy"
    (544296 'init var' found[164888] call_tmp[677725])
    unknown call_tmp[677730] "maybe param" "maybe type" "temp"
    (677733 'move' call_tmp[677730](164904 call tmp[164900] 1))
    const loc[164890] "dead at end of block" "const" "insert auto destroy"
    (544298 'init var' loc[164890] call_tmp[677730])
    (164912 'end of statement')
    unknown call_tmp[677735] "expr temp" "maybe param" "maybe type" "temp"
    (677738 'move' call_tmp[677735](164923 call _cond_test found[164888]))
    if call_tmp[677735]
    {
      unknown call_tmp[677742] "expr temp" "maybe param" "maybe type" "temp"
      (677745 'move' call_tmp[677742](164917 call(388152 call (partial) data _mt[243] this[165816]) loc[164890]))
      (521798 'move' ret[521793](521797 'deref' call_tmp[677742]))
      gotoReturn _end_dsiAccess[521791] _end_dsiAccess[521791]
      (482816 'end of statement' loc[164890])
    }
    {
      unknown call_tmp[677749] "expr temp" "maybe param" "maybe type" "temp"
      (677752 'move' call_tmp[677749](388158 call irv _mt[243] this[165816]))
      (521803 'move' ret[521793](521802 'deref' call_tmp[677749]))
      gotoReturn _end_dsiAccess[521791] _end_dsiAccess[521791]
    }
    label _end_dsiAccess[521791]
    (521795 return ret[521793])
  }
  where {
    unknown call_tmp[677756] "expr temp" "maybe param" "maybe type" "temp"
    (677759 'move' call_tmp[677756](388142 call eltType _mt[243] this[165816]))
    (164857 call shouldReturnRvalueByValue call_tmp[677756])
  }
  function DefaultSparseArr[165798](?).dsiAccess[164941](arg _mt[165822]:_MT[238], arg this[165820]:DefaultSparseArr[165798](?), arg ind[164938] :
  unknown call_tmp[677763] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521809] "RVV" "temp"
    unknown call_tmp[677775] "expr temp" "maybe param" "maybe type" "temp"
    (677778 'move' call_tmp[677775](164971 call _cond_test 1))
    if call_tmp[677775]
    {
      unknown call_tmp[677782] "expr temp" "maybe param" "maybe type" "temp"
      (677785 'move' call_tmp[677782](361346 call dom _mt[243] this[165820]))
      unknown call_tmp[677789] "expr temp" "maybe param" "maybe type" "temp"
      (677792 'move' call_tmp[677789](164949 call parentDom _mt[243] call_tmp[677782]))
      unknown call_tmp[677796] "expr temp" "maybe param" "maybe type" "temp"
      (677799 'move' call_tmp[677796](164957 call(164952 call (partial) contains _mt[243] call_tmp[677789]) ind[164938]))
      unknown call_tmp[677801] "expr temp" "maybe param" "maybe type" "temp"
      (677804 'move' call_tmp[677801](164958 call ! call_tmp[677796]))
      unknown call_tmp[677806] "expr temp" "maybe param" "maybe type" "temp"
      (677809 'move' call_tmp[677806](164966 call _cond_test call_tmp[677801]))
      if call_tmp[677806]
      {
        (164964 call halt "array index out of bounds: " ind[164938])
      }
    }
    unknown call_tmp[677813] "expr temp" "maybe param" "maybe type" "temp"
    (677816 'move' call_tmp[677813](361351 call dom _mt[243] this[165820]))
    unknown call_tmp[677820] "maybe param" "maybe type" "temp"
    (677823 'move' call_tmp[677820](164988 call(164983 call (partial) find _mt[243] call_tmp[677813]) ind[164938]))
    const tmp[164989] "dead at end of block" "const" "insert auto destroy" "temp"
    (544300 'init var' tmp[164989] call_tmp[677820])
    (164996 call _check_tuple_var_decl tmp[164989] 2)
    (482820 'end of statement')
    unknown call_tmp[677825] "maybe param" "maybe type" "temp"
    (677828 'move' call_tmp[677825](164990 call tmp[164989] 0))
    const found[164977] "dead at end of block" "const" "insert auto destroy"
    (544302 'init var' found[164977] call_tmp[677825])
    unknown call_tmp[677830] "maybe param" "maybe type" "temp"
    (677833 'move' call_tmp[677830](164993 call tmp[164989] 1))
    const loc[164979] "dead at end of block" "const" "insert auto destroy"
    (544304 'init var' loc[164979] call_tmp[677830])
    (165001 'end of statement')
    unknown call_tmp[677835] "expr temp" "maybe param" "maybe type" "temp"
    (677838 'move' call_tmp[677835](165012 call _cond_test found[164977]))
    if call_tmp[677835]
    {
      unknown call_tmp[677842] "expr temp" "maybe param" "maybe type" "temp"
      (677845 'move' call_tmp[677842](165006 call(388183 call (partial) data _mt[243] this[165820]) loc[164979]))
      (521814 'move' ret[521809](521813 'addr of' call_tmp[677842]))
      gotoReturn _end_dsiAccess[521807] _end_dsiAccess[521807]
      (482821 'end of statement' loc[164979])
    }
    {
      unknown call_tmp[677849] "expr temp" "maybe param" "maybe type" "temp"
      (677852 'move' call_tmp[677849](388189 call irv _mt[243] this[165820]))
      (521819 'move' ret[521809](521818 'addr of' call_tmp[677849]))
      gotoReturn _end_dsiAccess[521807] _end_dsiAccess[521807]
    }
    label _end_dsiAccess[521807]
    (521811 return ret[521809])
  }
  where {
    unknown call_tmp[677856] "expr temp" "maybe param" "maybe type" "temp"
    (677859 'move' call_tmp[677856](388173 call eltType _mt[243] this[165820]))
    (164946 call shouldReturnRvalueByConstRef call_tmp[677856])
  }
  function DefaultSparseArr[165798](?).these[165023](arg _mt[165826]:_MT[238], arg this[165824]:DefaultSparseArr[165798](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521825] "RVV" "temp"
    {
      unknown _indexOfInterest[165039] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165040] "expr temp" "temp"
      unknown call_tmp[677863] "expr temp" "maybe param" "maybe type" "temp"
      (677866 'move' call_tmp[677863](361356 call dom _mt[243] this[165824]))
      unknown call_tmp[677870] "expr temp" "maybe param" "maybe type" "temp"
      (677873 'move' call_tmp[677870](165054 call _nnz _mt[243] call_tmp[677863]))
      unknown call_tmp[677875] "expr temp" "maybe param" "maybe type" "temp"
      (677878 'move' call_tmp[677875](165057 call chpl_direct_range_iter 1 call_tmp[677870] 1))
      (165049 'move' _iterator[165040](165047 call _getIterator call_tmp[677875]))
      Defer
      {
        {
          (165073 call _freeIterator _iterator[165040])
        }
      }
      { scopeless type
        (165062 'move' _indexOfInterest[165039](165059 call iteratorIndex _iterator[165040]))
      }
      ForLoop[165041]
      {
        unknown i[165066] "index var" "insert auto destroy"
        (482825 'end of statement')
        (165068 'move' i[165066] _indexOfInterest[165039])
        (482826 'end of statement' i[165066])
        unknown yret[521829] "YVV" "temp"
        unknown call_tmp[677882] "expr temp" "maybe param" "maybe type" "temp"
        (677885 'move' call_tmp[677882](165036 call(388194 call (partial) data _mt[243] this[165824]) i[165066]))
        (521832 'move' yret[521829](521831 'addr of' call_tmp[677882]))
        (521834 yield yret[521829])
        (482828 'end of statement' i[165066])
        label _continueLabel[165044]
        _indexOfInterest[165039]
        _iterator[165040]
      }
      label _breakLabel[165045]
    }
    (521827 return ret[521825])
  }
  function DefaultSparseArr[165798](?).these[165089](arg _mt[165830]:_MT[238], arg this[165828]:DefaultSparseArr[165798](?), param arg tag[165086]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521838] "RVV" "temp"
    unknown call_tmp[677889] "expr temp" "maybe param" "maybe type" "temp"
    (677892 'move' call_tmp[677889](361362 call dom _mt[243] this[165828]))
    unknown call_tmp[677896] "maybe param" "maybe type" "temp"
    (677899 'move' call_tmp[677896](165099 call _nnz _mt[243] call_tmp[677889]))
    const numElems[165102] "dead at end of block" "const" "insert auto destroy"
    (544306 'init var' numElems[165102] call_tmp[677896])
    (165105 'end of statement')
    unknown call_tmp[677901] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (677904 'move' call_tmp[677901](165112 'typeof' numElems[165102]))
    unknown call_tmp[677906] "expr temp" "maybe param" "maybe type" "temp"
    (677909 'move' call_tmp[677906](165110 call _computeNumChunks numElems[165102]))
    unknown call_tmp[677911] "maybe param" "maybe type" "temp"
    (677914 'move' call_tmp[677911](165113 call _cast call_tmp[677901] call_tmp[677906]))
    const numChunks[165115] "dead at end of block" "const" "insert auto destroy"
    (544308 'init var' numChunks[165115] call_tmp[677911])
    (165118 'end of statement' numElems[165102] numElems[165102])
    unknown call_tmp[677916] "expr temp" "maybe param" "maybe type" "temp"
    (677919 'move' call_tmp[677916](165146 call _cond_test debugDefaultSparse[161569]))
    if call_tmp[677916]
    {
      (165143 call writeln "DefaultSparseArr standalone: " numChunks[165115] " chunks, " numElems[165102] " elems")
      (482832 'end of statement' numChunks[165115] numElems[165102])
    }
    unknown call_tmp[677921] "expr temp" "maybe param" "maybe type" "temp"
    (677924 'move' call_tmp[677921](165152 call <= numChunks[165115] 1))
    unknown call_tmp[677926] "expr temp" "maybe param" "maybe type" "temp"
    (677929 'move' call_tmp[677926](165456 call _cond_test call_tmp[677921]))
    if call_tmp[677926]
    {
      {
        unknown _indexOfInterest[165166] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[165167] "expr temp" "temp"
        unknown call_tmp[677931] "expr temp" "maybe param" "maybe type" "temp"
        (677934 'move' call_tmp[677931](165181 call chpl_direct_range_iter 1 numElems[165102] 1))
        (165176 'move' _iterator[165167](165174 call _getIterator call_tmp[677931]))
        Defer
        {
          {
            (165197 call _freeIterator _iterator[165167])
          }
        }
        { scopeless type
          (165186 'move' _indexOfInterest[165166](165183 call iteratorIndex _iterator[165167]))
        }
        ForLoop[165168]
        {
          unknown i[165190] "index var" "insert auto destroy"
          (482836 'end of statement')
          (165192 'move' i[165190] _indexOfInterest[165166])
          (482837 'end of statement' i[165190])
          {
            unknown yret[521842] "YVV" "temp"
            unknown call_tmp[677938] "expr temp" "maybe param" "maybe type" "temp"
            (677941 'move' call_tmp[677938](165162 call(388208 call (partial) data _mt[243] this[165828]) i[165190]))
            (521845 'move' yret[521842](521844 'addr of' call_tmp[677938]))
            (521847 yield yret[521842])
            (482839 'end of statement' i[165190])
          }
          label _continueLabel[165171]
          _indexOfInterest[165166]
          _iterator[165167]
        }
        label _breakLabel[165172]
      }
    }
    {
      {
        unknown tmpIter[165259] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[677943] "expr temp" "maybe param" "maybe type" "temp"
        (677946 'move' call_tmp[677943](165212 call chpl_build_bounded_range 1 numElems[165102]))
        (165262 'move' tmpIter[165259](165216 call chunks module=[255] RangeChunk[266375] call_tmp[677943] numChunks[165115]))
        unknown isRngDomArr[165436] "maybe param" "temp"
        unknown tmp[428344] "maybe param" "temp"
        (428355 'move' tmp[428344](165438 call isBoundedRange tmpIter[165259]))
        unknown call_tmp[677948] "expr temp" "maybe param" "maybe type" "temp"
        (677951 'move' call_tmp[677948](428357 call _cond_invalid tmp[428344]))
        if call_tmp[677948]
        {
          (428360 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570436] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570437] "maybe param" "temp"
        unknown call_tmp[677953] "expr temp" "maybe param" "maybe type" "temp"
        (677956 'move' call_tmp[677953](428345 call isTrue tmp[428344]))
        (570442 'move' tmp[570437](570440 call _cond_test call_tmp[677953]))
        if tmp[570437]
        {
          (570447 'move' tmp[570436](570444 '_paramFoldLogical' tmp[570437] 1))
        }
        {
          unknown tmp[428365] "maybe param" "temp"
          (428376 'move' tmp[428365](165441 call isDomain tmpIter[165259]))
          unknown call_tmp[677958] "expr temp" "maybe param" "maybe type" "temp"
          (677961 'move' call_tmp[677958](428378 call _cond_invalid tmp[428365]))
          if call_tmp[677958]
          {
            (428381 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[570409] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570410] "maybe param" "temp"
          unknown call_tmp[677963] "expr temp" "maybe param" "maybe type" "temp"
          (677966 'move' call_tmp[677963](428366 call isTrue tmp[428365]))
          (570415 'move' tmp[570410](570413 call _cond_test call_tmp[677963]))
          if tmp[570410]
          {
            (570420 'move' tmp[570409](570417 '_paramFoldLogical' tmp[570410] 1))
          }
          {
            unknown tmp[570422] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[677968] "expr temp" "maybe param" "maybe type" "temp"
            (677971 'move' call_tmp[677968](165444 call isArray tmpIter[165259]))
            (570424 'move' tmp[570422](428370 call isTrue call_tmp[677968]))
            (570429 'move' tmp[570409](570426 '_paramFoldLogical' tmp[570410] tmp[570422]))
          }
          unknown tmp[570449] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (570451 'move' tmp[570449](428349 call isTrue tmp[570409]))
          (570456 'move' tmp[570436](570453 '_paramFoldLogical' tmp[570437] tmp[570449]))
        }
        (165451 'move' isRngDomArr[165436] tmp[570436])
        if isRngDomArr[165436]
        {
          const _coforallCount[165303] "const" "end count" "temp"
          (165372 'move' _coforallCount[165303](165369 call _endCountAlloc 1))
          unknown numTasks[165304] "temp"
          (165356 'move' numTasks[165304](165352 call size _mt[243] tmpIter[165259]))
          (165347 call _upEndCount _coforallCount[165303] 1 numTasks[165304])
          (482842 'end of statement')
          (165344 call chpl_resetTaskSpawn numTasks[165304])
          (482843 'end of statement')
          unknown _indexOfInterest[165311] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165312] "expr temp" "temp"
          (165321 'move' _iterator[165312](165319 call _getIterator tmpIter[165259]))
          Defer
          {
            {
              (165337 call _freeIterator _iterator[165312])
            }
          }
          { scopeless type
            (165326 'move' _indexOfInterest[165311](165323 call iteratorIndex _iterator[165312]))
          }
          ForLoop[165313]
          {
            unknown chunk[165330] "coforall index var" "index var" "insert auto destroy"
            (482845 'end of statement')
            (165332 'move' chunk[165330] _indexOfInterest[165311])
            (482846 'end of statement' chunk[165330])
            (934332 call coforall_fn[934330])
            function coforall_fn[934330]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[165265] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165267] "expr temp" "temp"
                (165269 'move' _iterator[165267](165272 call _getIterator chunk[165330]))
                Defer
                {
                  {
                    (165276 call _freeIterator _iterator[165267])
                  }
                }
                { scopeless type
                  (165280 'move' _indexOfInterest[165265](165283 call iteratorIndex _iterator[165267]))
                }
                ForLoop[165285]
                {
                  unknown i[165288] "index var" "insert auto destroy"
                  (482849 'end of statement')
                  (165290 'move' i[165288] _indexOfInterest[165265])
                  (482850 'end of statement' i[165288])
                  unknown yret[521849] "YVV" "temp"
                  unknown call_tmp[677977] "expr temp" "maybe param" "maybe type" "temp"
                  (677980 'move' call_tmp[677977](165296 call(388225 call (partial) data _mt[243] this[165828]) i[165288]))
                  (521852 'move' yret[521849](521851 'addr of' call_tmp[677977]))
                  (521854 yield yret[521849])
                  (482852 'end of statement' i[165288])
                  label _continueLabel[165298]
                  _indexOfInterest[165265]
                  _iterator[165267]
                }
                label _breakLabel[165300]
              }
              (165306 call _downEndCount _coforallCount[165303] nil[44])
              (934335 return _void[55])
            }
            {
            }
            label _continueLabel[165316]
            _indexOfInterest[165311]
            _iterator[165312]
          }
          label _breakLabel[165317]
          Defer
          {
            {
              (165359 call _endCountFree _coforallCount[165303])
            }
          }
          (165364 call _waitEndCount _coforallCount[165303] 1 numTasks[165304])
        }
        {
          const _coforallCount[165376] "const" "end count" "temp"
          (165433 'move' _coforallCount[165376](165430 call _endCountAlloc 1))
          unknown _indexOfInterest[165384] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165385] "expr temp" "temp"
          (165394 'move' _iterator[165385](165392 call _getIterator tmpIter[165259]))
          Defer
          {
            {
              (165410 call _freeIterator _iterator[165385])
            }
          }
          { scopeless type
            (165399 'move' _indexOfInterest[165384](165396 call iteratorIndex _iterator[165385]))
          }
          ForLoop[165386]
          {
            unknown chunk[165403] "coforall index var" "index var" "insert auto destroy"
            (482858 'end of statement')
            (165405 'move' chunk[165403] _indexOfInterest[165384])
            (482859 'end of statement' chunk[165403])
            (165417 call _upEndCount _coforallCount[165376] 1)
            (482861 'end of statement')
            (934339 call coforall_fn[934337])
            function coforall_fn[934337]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[165225] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165226] "expr temp" "temp"
                (165235 'move' _iterator[165226](165233 call _getIterator chunk[165403]))
                Defer
                {
                  {
                    (165251 call _freeIterator _iterator[165226])
                  }
                }
                { scopeless type
                  (165240 'move' _indexOfInterest[165225](165237 call iteratorIndex _iterator[165226]))
                }
                ForLoop[165227]
                {
                  unknown i[165244] "index var" "insert auto destroy"
                  (482863 'end of statement')
                  (165246 'move' i[165244] _indexOfInterest[165225])
                  (482864 'end of statement' i[165244])
                  unknown yret[521856] "YVV" "temp"
                  unknown call_tmp[677984] "expr temp" "maybe param" "maybe type" "temp"
                  (677987 'move' call_tmp[677984](165222 call(388218 call (partial) data _mt[243] this[165828]) i[165244]))
                  (521859 'move' yret[521856](521858 'addr of' call_tmp[677984]))
                  (521861 yield yret[521856])
                  (482866 'end of statement' i[165244])
                  label _continueLabel[165230]
                  _indexOfInterest[165225]
                  _iterator[165226]
                }
                label _breakLabel[165231]
              }
              (165379 call _downEndCount _coforallCount[165376] nil[44])
              (934342 return _void[55])
            }
            {
            }
            label _continueLabel[165389]
            _indexOfInterest[165384]
            _iterator[165385]
          }
          label _breakLabel[165390]
          Defer
          {
            {
              (165421 call _endCountFree _coforallCount[165376])
            }
          }
          (165426 call _waitEndCount _coforallCount[165376] 1)
        }
        (361366 'referenced modules list' RangeChunk[266375])
      }
    }
    (521840 return ret[521838])
  }
  where {
    (165096 call == tag[165086] standalone[451])
  }
  function DefaultSparseArr[165798](?).these[165469](arg _mt[165834]:_MT[238], arg this[165832]:DefaultSparseArr[165798](?), param arg tag[165466]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521865] "RVV" "temp"
    {
      unknown _indexOfInterest[165489] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165490] "expr temp" "temp"
      unknown call_tmp[677991] "expr temp" "maybe param" "maybe type" "temp"
      (677994 'move' call_tmp[677991](361374 call dom _mt[243] this[165832]))
      unknown call_tmp[677998] "expr temp" "maybe param" "maybe type" "temp"
      (678001 'move' call_tmp[677998](165485 call(165480 call (partial) these _mt[243] call_tmp[677991]) tag[165466]))
      (165499 'move' _iterator[165490](165497 call _getIterator call_tmp[677998]))
      Defer
      {
        {
          (165516 call _freeIterator _iterator[165490])
        }
      }
      { scopeless type
        (165505 'move' _indexOfInterest[165489](165502 call iteratorIndex _iterator[165490]))
      }
      ForLoop[165491]
      {
        unknown followThis[165509] "index var" "insert auto destroy"
        (482872 'end of statement')
        (165511 'move' followThis[165509] _indexOfInterest[165489])
        (482873 'end of statement' followThis[165509])
        unknown yret[521869] "YVV" "temp"
        (521872 'move' yret[521869](521871 'deref' followThis[165509]))
        (521874 yield yret[521869])
        (482875 'end of statement' followThis[165509])
        label _continueLabel[165494]
        _indexOfInterest[165489]
        _iterator[165490]
      }
      label _breakLabel[165495]
    }
    (521867 return ret[521865])
  }
  where {
    (165476 call == tag[165466] leader[447])
  }
  function DefaultSparseArr[165798](?).these[165533](arg _mt[165838]:_MT[238], arg this[165836]:DefaultSparseArr[165798](?), param arg tag[165530]:iterKind[453], arg followThis[165541]:_tuple[56199](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521878] "RVV" "temp"
    unknown tmp[165559] "dead at end of block" "insert auto destroy" "temp"
    (544310 'init var' tmp[165559] followThis[165541])
    (165569 call _check_tuple_var_decl tmp[165559] 3)
    (482877 'end of statement')
    unknown call_tmp[678003] "maybe param" "maybe type" "temp"
    (678006 'move' call_tmp[678003](165560 call tmp[165559] 0))
    unknown followThisDom[165551] "dead at end of block" "insert auto destroy"
    (544312 'init var' followThisDom[165551] call_tmp[678003])
    unknown call_tmp[678008] "maybe param" "maybe type" "temp"
    (678011 'move' call_tmp[678008](165563 call tmp[165559] 1))
    unknown startIx[165553] "dead at end of block" "insert auto destroy"
    (544314 'init var' startIx[165553] call_tmp[678008])
    unknown call_tmp[678013] "maybe param" "maybe type" "temp"
    (678016 'move' call_tmp[678013](165566 call tmp[165559] 2))
    unknown endIx[165555] "dead at end of block" "insert auto destroy"
    (544316 'init var' endIx[165555] call_tmp[678013])
    (165574 'end of statement')
    unknown call_tmp[678020] "expr temp" "maybe param" "maybe type" "temp"
    (678023 'move' call_tmp[678020](165578 call dom _mt[243] this[165836]))
    unknown call_tmp[678025] "expr temp" "maybe param" "maybe type" "temp"
    (678028 'move' call_tmp[678025](165581 call != followThisDom[165551] call_tmp[678020]))
    unknown call_tmp[678030] "expr temp" "maybe param" "maybe type" "temp"
    (678033 'move' call_tmp[678030](165604 call _cond_test call_tmp[678025]))
    if call_tmp[678030]
    {
      (165602 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays")
    }
    unknown call_tmp[678035] "expr temp" "maybe param" "maybe type" "temp"
    (678038 'move' call_tmp[678035](165634 call _cond_test debugDefaultSparse[161569]))
    if call_tmp[678035]
    {
      (165632 call writeln "DefaultSparseArr follower: " startIx[165553] ".." endIx[165555])
      (482879 'end of statement' startIx[165553] endIx[165555])
    }
    {
      unknown _indexOfInterest[165650] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165651] "expr temp" "temp"
      unknown call_tmp[678040] "expr temp" "maybe param" "maybe type" "temp"
      (678043 'move' call_tmp[678040](165665 call chpl_direct_range_iter startIx[165553] endIx[165555] 1))
      (165660 'move' _iterator[165651](165658 call _getIterator call_tmp[678040]))
      Defer
      {
        {
          (165681 call _freeIterator _iterator[165651])
        }
      }
      { scopeless type
        (165670 'move' _indexOfInterest[165650](165667 call iteratorIndex _iterator[165651]))
      }
      ForLoop[165652]
      {
        unknown i[165674] "index var" "insert auto destroy"
        (482883 'end of statement')
        (165676 'move' i[165674] _indexOfInterest[165650])
        (482884 'end of statement' i[165674])
        unknown yret[521882] "YVV" "temp"
        unknown call_tmp[678047] "expr temp" "maybe param" "maybe type" "temp"
        (678050 'move' call_tmp[678047](165647 call(388242 call (partial) data _mt[243] this[165836]) i[165674]))
        (521885 'move' yret[521882](521884 'addr of' call_tmp[678047]))
        (521887 yield yret[521882])
        (482886 'end of statement' i[165674])
        label _continueLabel[165655]
        _indexOfInterest[165650]
        _iterator[165651]
      }
      label _breakLabel[165656]
    }
    (521880 return ret[521878])
  }
  where {
    unknown call_tmp[678052] "expr temp" "maybe param" "maybe type" "temp"
    (678055 'move' call_tmp[678052](165549 call == tag[165530] follower[449]))
    unknown call_tmp[678057] "expr temp" "maybe param" "maybe type" "temp"
    (678060 'move' call_tmp[678057](462361 'query' followThis[165541] c"size"))
    unknown call_tmp[678062] "expr temp" "maybe param" "maybe type" "temp"
    (678065 'move' call_tmp[678062](462362 call == 3 call_tmp[678057]))
    (462364 call & call_tmp[678052] call_tmp[678062])
  }
  function DefaultSparseArr[165798](?).these[165697](arg _mt[165842]:_MT[238], arg this[165840]:DefaultSparseArr[165798](?), param arg tag[165694]:iterKind[453], arg followThis[165699]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521891] "RVV" "temp"
    (165711 call compilerError "Sparse iterators can't yet be zippered with others")
    (482888 'end of statement')
    unknown yret[521895] "YVV" "temp"
    (521898 'move' yret[521895](521897 'deref' 0))
    (521900 yield yret[521895])
    (521893 return ret[521891])
  }
  where {
    (165706 call == tag[165694] follower[449])
  }
  function DefaultSparseArr[165798](?).dsiTargetLocales[165722](arg _mt[165846]:_MT[238], arg this[165844]:DefaultSparseArr[165798](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (165743 call compilerError "targetLocales is unsupported by sparse domains")
    (521902 return _void[55])
  }
  function DefaultSparseArr[165798](?).dsiHasSingleLocalSubdomain[165750](arg _mt[165850]:_MT[238], arg this[165848]:DefaultSparseArr[165798](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521906] "RVV" "param" "temp"
    (521911 'move' ret[521906](521910 'deref' 1))
    (521908 return ret[521906])
  }
  function DefaultSparseArr[165798](?).dsiLocalSubdomain[165764](arg _mt[165854]:_MT[238], arg this[165852]:DefaultSparseArr[165798](?), arg loc[165761]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521915] "RVV" "temp"
    unknown call_tmp[678067] "expr temp" "maybe param" "maybe type" "temp"
    (678070 'move' call_tmp[678067](165767 '_wide_get_locale' this[165852]))
    unknown call_tmp[678072] "expr temp" "maybe param" "maybe type" "temp"
    (678075 'move' call_tmp[678072](165768 call chpl_localeID_to_locale call_tmp[678067]))
    unknown call_tmp[678077] "expr temp" "maybe param" "maybe type" "temp"
    (678080 'move' call_tmp[678077](165771 call == call_tmp[678072] loc[165761]))
    unknown call_tmp[678082] "expr temp" "maybe param" "maybe type" "temp"
    (678085 'move' call_tmp[678082](165790 call _cond_test call_tmp[678077]))
    if call_tmp[678082]
    {
      unknown call_tmp[678089] "expr temp" "maybe param" "maybe type" "temp"
      (678092 'move' call_tmp[678089](388254 call dom _mt[243] this[165852]))
      unknown call_tmp[678094] "expr temp" "maybe param" "maybe type" "temp"
      (678097 'move' call_tmp[678094](165776 call _getDomain call_tmp[678089]))
      (521920 'move' ret[521915](521919 'deref' call_tmp[678094]))
      gotoReturn _end_dsiLocalSubdomain[521913] _end_dsiLocalSubdomain[521913]
    }
    {
      unknown call_tmp[678101] "expr temp" "maybe param" "maybe type" "temp"
      (678104 'move' call_tmp[678101](361382 call dom _mt[243] this[165852]))
      unknown call_tmp[678108] "expr temp" "maybe param" "maybe type" "temp"
      (678111 'move' call_tmp[678108](165786 call(165781 call (partial) dsiLocalSubdomain _mt[243] call_tmp[678101]) loc[165761]))
      (521925 'move' ret[521915](521924 'deref' call_tmp[678108]))
      gotoReturn _end_dsiLocalSubdomain[521913] _end_dsiLocalSubdomain[521913]
    }
    label _end_dsiLocalSubdomain[521913]
    (521917 return ret[521915])
  }
  function DefaultSparseArr[165798](?).super[811460](arg _mt[811462]:_MT[238], arg this[811464]:DefaultSparseArr[165798](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811474] "RVV" "temp"
    unknown call_tmp[811481] "expr temp" "maybe param" "maybe type" "temp"
    (811484 'move' call_tmp[811481](811468 '.v' this[811464] c"super"))
    (811479 'move' ret[811474](811478 'deref' call_tmp[811481]))
    (811476 return ret[811474])
  }
  function DefaultSparseArr[165798](?).deinit[811486](arg _mt[811488]:_MT[238], arg this[811490]:DefaultSparseArr[165798](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (811498 return _void[55])
  }
  type DefaultSparseArr[165798](?) val super[355751]:BaseSparseArrImpl[150531](?) "delay instantiation" "super class"
  type DefaultSparseArr[387483](?)
  function DefaultSparseDom[164336](?).dsiSerialWrite[165862](arg _mt[165871]:_MT[238], arg this[165868]:DefaultSparseDom[164336](?) :
  DefaultSparseDom[164336](?), arg f[165860]:_any[178](?), arg printBrackets[165865] :
  1 =
  1) : _unknown[51] throws "method" "no return value for void"
  {
    unknown call_tmp[678115] "expr temp" "maybe param" "maybe type" "temp"
    (678118 'move' call_tmp[678115](388260 call rank _mt[243] this[165868]))
    unknown call_tmp[678120] "expr temp" "maybe param" "maybe type" "temp"
    (678123 'move' call_tmp[678120](165875 call == call_tmp[678115] 1))
    unknown call_tmp[678125] "expr temp" "maybe param" "maybe type" "temp"
    (678128 'move' call_tmp[678125](166140 call _cond_test call_tmp[678120]))
    if call_tmp[678125]
    {
      unknown call_tmp[678130] "expr temp" "maybe param" "maybe type" "temp"
      (678133 'move' call_tmp[678130](165883 call _cond_test printBrackets[165865]))
      if call_tmp[678130]
      {
        (165880 call <~> f[165860] "{")
      }
      unknown call_tmp[678137] "expr temp" "maybe param" "maybe type" "temp"
      (678140 'move' call_tmp[678137](388267 call _nnz _mt[243] this[165868]))
      unknown call_tmp[678142] "expr temp" "maybe param" "maybe type" "temp"
      (678145 'move' call_tmp[678142](165891 call >= call_tmp[678137] 1))
      unknown call_tmp[678147] "expr temp" "maybe param" "maybe type" "temp"
      (678150 'move' call_tmp[678147](165957 call _cond_test call_tmp[678142]))
      if call_tmp[678147]
      {
        unknown call_tmp[678154] "expr temp" "maybe param" "maybe type" "temp"
        (678157 'move' call_tmp[678154](165897 call(388273 call (partial) _indices _mt[243] this[165868]) 1))
        (165898 call <~> f[165860] call_tmp[678154])
        (482895 'end of statement')
        {
          unknown _indexOfInterest[165919] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165920] "expr temp" "temp"
          unknown call_tmp[678161] "expr temp" "maybe param" "maybe type" "temp"
          (678164 'move' call_tmp[678161](388285 call _nnz _mt[243] this[165868]))
          unknown call_tmp[678166] "expr temp" "maybe param" "maybe type" "temp"
          (678169 'move' call_tmp[678166](165934 call chpl_direct_range_iter 2 call_tmp[678161] 1))
          (165929 'move' _iterator[165920](165927 call _getIterator call_tmp[678166]))
          Defer
          {
            {
              (165950 call _freeIterator _iterator[165920])
            }
          }
          { scopeless type
            (165939 'move' _indexOfInterest[165919](165936 call iteratorIndex _iterator[165920]))
          }
          ForLoop[165921]
          {
            unknown i[165943] "index var" "insert auto destroy"
            (482897 'end of statement')
            (165945 'move' i[165943] _indexOfInterest[165919])
            (482898 'end of statement' i[165943])
            {
              unknown call_tmp[678171] "expr temp" "maybe param" "maybe type" "temp"
              (678174 'move' call_tmp[678171](165909 call <~> f[165860] " "))
              unknown call_tmp[678178] "expr temp" "maybe param" "maybe type" "temp"
              (678181 'move' call_tmp[678178](165914 call(388279 call (partial) _indices _mt[243] this[165868]) i[165943]))
              (165915 call <~> call_tmp[678171] call_tmp[678178])
              (482900 'end of statement' i[165943])
            }
            label _continueLabel[165924]
            _indexOfInterest[165919]
            _iterator[165920]
          }
          label _breakLabel[165925]
        }
      }
      unknown call_tmp[678183] "expr temp" "maybe param" "maybe type" "temp"
      (678186 'move' call_tmp[678183](165967 call _cond_test printBrackets[165865]))
      if call_tmp[678183]
      {
        (165964 call <~> f[165860] "}")
      }
    }
    {
      unknown call_tmp[678188] "expr temp" "maybe param" "maybe type" "temp"
      (678191 'move' call_tmp[678188](165994 call _cond_test printBrackets[165865]))
      if call_tmp[678188]
      {
        (165991 call <~> f[165860] "{\n")
      }
      unknown call_tmp[678195] "expr temp" "maybe param" "maybe type" "temp"
      (678198 'move' call_tmp[678195](388294 call _nnz _mt[243] this[165868]))
      unknown call_tmp[678200] "expr temp" "maybe param" "maybe type" "temp"
      (678203 'move' call_tmp[678200](166002 call >= call_tmp[678195] 1))
      unknown call_tmp[678205] "expr temp" "maybe param" "maybe type" "temp"
      (678208 'move' call_tmp[678205](166109 call _cond_test call_tmp[678200]))
      if call_tmp[678205]
      {
        unknown call_tmp[678212] "maybe param" "maybe type" "temp"
        (678215 'move' call_tmp[678212](166007 call(388299 call (partial) _indices _mt[243] this[165868]) 1))
        unknown prevInd[166008] "dead at end of block" "insert auto destroy"
        (544318 'init var' prevInd[166008] call_tmp[678212])
        (166011 'end of statement')
        unknown call_tmp[678217] "expr temp" "maybe param" "maybe type" "temp"
        (678220 'move' call_tmp[678217](166015 call <~> f[165860] " "))
        (166018 call <~> call_tmp[678217] prevInd[166008])
        (482904 'end of statement' prevInd[166008])
        {
          unknown _indexOfInterest[166066] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166067] "expr temp" "temp"
          unknown call_tmp[678224] "expr temp" "maybe param" "maybe type" "temp"
          (678227 'move' call_tmp[678224](388323 call _nnz _mt[243] this[165868]))
          unknown call_tmp[678229] "expr temp" "maybe param" "maybe type" "temp"
          (678232 'move' call_tmp[678229](166081 call chpl_direct_range_iter 2 call_tmp[678224] 1))
          (166076 'move' _iterator[166067](166074 call _getIterator call_tmp[678229]))
          Defer
          {
            {
              (166097 call _freeIterator _iterator[166067])
            }
          }
          { scopeless type
            (166086 'move' _indexOfInterest[166066](166083 call iteratorIndex _iterator[166067]))
          }
          ForLoop[166068]
          {
            unknown i[166090] "index var" "insert auto destroy"
            (482907 'end of statement')
            (166092 'move' i[166090] _indexOfInterest[166066])
            (482908 'end of statement' i[166090])
            {
              unknown call_tmp[678234] "expr temp" "maybe param" "maybe type" "temp"
              (678237 'move' call_tmp[678234](166029 call prevInd[166008] 0))
              unknown call_tmp[678241] "expr temp" "maybe param" "maybe type" "temp"
              (678244 'move' call_tmp[678241](166033 call(388307 call (partial) _indices _mt[243] this[165868]) i[166090]))
              unknown call_tmp[678246] "expr temp" "maybe param" "maybe type" "temp"
              (678249 'move' call_tmp[678246](166036 call call_tmp[678241] 0))
              unknown call_tmp[678251] "expr temp" "maybe param" "maybe type" "temp"
              (678254 'move' call_tmp[678251](166037 call != call_tmp[678234] call_tmp[678246]))
              unknown call_tmp[678256] "expr temp" "maybe param" "maybe type" "temp"
              (678259 'move' call_tmp[678256](166045 call _cond_test call_tmp[678251]))
              if call_tmp[678256]
              {
                (166041 call <~> f[165860] "\n")
              }
              unknown call_tmp[678263] "expr temp" "maybe param" "maybe type" "temp"
              (678266 'move' call_tmp[678263](166054 call(388315 call (partial) _indices _mt[243] this[165868]) i[166090]))
              (166055 call = prevInd[166008] call_tmp[678263])
              (482911 'end of statement' prevInd[166008] i[166090])
              unknown call_tmp[678268] "expr temp" "maybe param" "maybe type" "temp"
              (678271 'move' call_tmp[678268](166060 call <~> f[165860] " "))
              (166063 call <~> call_tmp[678268] prevInd[166008])
              (482914 'end of statement' prevInd[166008])
            }
            label _continueLabel[166071]
            _indexOfInterest[166066]
            _iterator[166067]
          }
          label _breakLabel[166072]
        }
        (166106 call <~> f[165860] "\n")
      }
      unknown call_tmp[678273] "expr temp" "maybe param" "maybe type" "temp"
      (678276 'move' call_tmp[678273](166135 call _cond_test printBrackets[165865]))
      if call_tmp[678273]
      {
        (166132 call <~> f[165860] "}\n")
      }
    }
    (521929 return _void[55])
  }
  function DefaultSparseArr[165798](?).dsiSerialWrite[166152](arg _mt[166157]:_MT[238], arg this[166154]:DefaultSparseArr[165798](?) :
  DefaultSparseArr[165798](?), arg f[166150]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown call_tmp[678280] "expr temp" "maybe param" "maybe type" "temp"
    (678283 'move' call_tmp[678280](388331 call rank _mt[243] this[166154]))
    unknown call_tmp[678285] "expr temp" "maybe param" "maybe type" "temp"
    (678288 'move' call_tmp[678285](166161 call == call_tmp[678280] 1))
    unknown call_tmp[678290] "expr temp" "maybe param" "maybe type" "temp"
    (678293 'move' call_tmp[678290](166383 call _cond_test call_tmp[678285]))
    if call_tmp[678290]
    {
      unknown call_tmp[678297] "expr temp" "maybe param" "maybe type" "temp"
      (678300 'move' call_tmp[678297](361387 call dom _mt[243] this[166154]))
      unknown call_tmp[678304] "expr temp" "maybe param" "maybe type" "temp"
      (678307 'move' call_tmp[678304](166164 call _nnz _mt[243] call_tmp[678297]))
      unknown call_tmp[678309] "expr temp" "maybe param" "maybe type" "temp"
      (678312 'move' call_tmp[678309](166168 call >= call_tmp[678304] 1))
      unknown call_tmp[678314] "expr temp" "maybe param" "maybe type" "temp"
      (678317 'move' call_tmp[678314](166240 call _cond_test call_tmp[678309]))
      if call_tmp[678314]
      {
        unknown call_tmp[678321] "expr temp" "maybe param" "maybe type" "temp"
        (678324 'move' call_tmp[678321](166174 call(388337 call (partial) data _mt[243] this[166154]) 1))
        (166175 call <~> f[166150] call_tmp[678321])
        (482918 'end of statement')
        {
          unknown _indexOfInterest[166199] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166200] "expr temp" "temp"
          unknown call_tmp[678328] "expr temp" "maybe param" "maybe type" "temp"
          (678331 'move' call_tmp[678328](361392 call dom _mt[243] this[166154]))
          unknown call_tmp[678335] "expr temp" "maybe param" "maybe type" "temp"
          (678338 'move' call_tmp[678335](166214 call _nnz _mt[243] call_tmp[678328]))
          unknown call_tmp[678340] "expr temp" "maybe param" "maybe type" "temp"
          (678343 'move' call_tmp[678340](166217 call chpl_direct_range_iter 2 call_tmp[678335] 1))
          (166209 'move' _iterator[166200](166207 call _getIterator call_tmp[678340]))
          Defer
          {
            {
              (166233 call _freeIterator _iterator[166200])
            }
          }
          { scopeless type
            (166222 'move' _indexOfInterest[166199](166219 call iteratorIndex _iterator[166200]))
          }
          ForLoop[166201]
          {
            unknown i[166226] "index var" "insert auto destroy"
            (482920 'end of statement')
            (166228 'move' i[166226] _indexOfInterest[166199])
            (482921 'end of statement' i[166226])
            {
              unknown call_tmp[678345] "expr temp" "maybe param" "maybe type" "temp"
              (678348 'move' call_tmp[678345](166189 call <~> f[166150] " "))
              unknown call_tmp[678352] "expr temp" "maybe param" "maybe type" "temp"
              (678355 'move' call_tmp[678352](166194 call(388343 call (partial) data _mt[243] this[166154]) i[166226]))
              (166195 call <~> call_tmp[678345] call_tmp[678352])
              (482923 'end of statement' i[166226])
            }
            label _continueLabel[166204]
            _indexOfInterest[166199]
            _iterator[166200]
          }
          label _breakLabel[166205]
        }
      }
    }
    {
      unknown call_tmp[678359] "expr temp" "maybe param" "maybe type" "temp"
      (678362 'move' call_tmp[678359](361397 call dom _mt[243] this[166154]))
      unknown call_tmp[678366] "expr temp" "maybe param" "maybe type" "temp"
      (678369 'move' call_tmp[678366](166246 call _nnz _mt[243] call_tmp[678359]))
      unknown call_tmp[678371] "expr temp" "maybe param" "maybe type" "temp"
      (678374 'move' call_tmp[678371](166250 call >= call_tmp[678366] 1))
      unknown call_tmp[678376] "expr temp" "maybe param" "maybe type" "temp"
      (678379 'move' call_tmp[678376](166378 call _cond_test call_tmp[678371]))
      if call_tmp[678376]
      {
        unknown call_tmp[678383] "expr temp" "maybe param" "maybe type" "temp"
        (678386 'move' call_tmp[678383](361402 call dom _mt[243] this[166154]))
        unknown call_tmp[678390] "maybe param" "maybe type" "temp"
        (678393 'move' call_tmp[678390](166258 call(166253 call (partial) _indices _mt[243] call_tmp[678383]) 1))
        unknown prevInd[166259] "dead at end of block" "insert auto destroy"
        (544320 'init var' prevInd[166259] call_tmp[678390])
        (166262 'end of statement')
        unknown call_tmp[678397] "expr temp" "maybe param" "maybe type" "temp"
        (678400 'move' call_tmp[678397](166268 call(388350 call (partial) data _mt[243] this[166154]) 1))
        (166269 call <~> f[166150] call_tmp[678397])
        (482925 'end of statement')
        {
          unknown _indexOfInterest[166332] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166333] "expr temp" "temp"
          unknown call_tmp[678404] "expr temp" "maybe param" "maybe type" "temp"
          (678407 'move' call_tmp[678404](361417 call dom _mt[243] this[166154]))
          unknown call_tmp[678411] "expr temp" "maybe param" "maybe type" "temp"
          (678414 'move' call_tmp[678411](166347 call _nnz _mt[243] call_tmp[678404]))
          unknown call_tmp[678416] "expr temp" "maybe param" "maybe type" "temp"
          (678419 'move' call_tmp[678416](166350 call chpl_direct_range_iter 2 call_tmp[678411] 1))
          (166342 'move' _iterator[166333](166340 call _getIterator call_tmp[678416]))
          Defer
          {
            {
              (166366 call _freeIterator _iterator[166333])
            }
          }
          { scopeless type
            (166355 'move' _indexOfInterest[166332](166352 call iteratorIndex _iterator[166333]))
          }
          ForLoop[166334]
          {
            unknown i[166359] "index var" "insert auto destroy"
            (482927 'end of statement')
            (166361 'move' i[166359] _indexOfInterest[166332])
            (482928 'end of statement' i[166359])
            {
              unknown call_tmp[678421] "expr temp" "maybe param" "maybe type" "temp"
              (678424 'move' call_tmp[678421](166283 call prevInd[166259] 0))
              unknown call_tmp[678428] "expr temp" "maybe param" "maybe type" "temp"
              (678431 'move' call_tmp[678428](361407 call dom _mt[243] this[166154]))
              unknown call_tmp[678435] "expr temp" "maybe param" "maybe type" "temp"
              (678438 'move' call_tmp[678435](166290 call(166285 call (partial) _indices _mt[243] call_tmp[678428]) i[166359]))
              unknown call_tmp[678440] "expr temp" "maybe param" "maybe type" "temp"
              (678443 'move' call_tmp[678440](166293 call call_tmp[678435] 0))
              unknown call_tmp[678445] "expr temp" "maybe param" "maybe type" "temp"
              (678448 'move' call_tmp[678445](166294 call != call_tmp[678421] call_tmp[678440]))
              unknown call_tmp[678450] "expr temp" "maybe param" "maybe type" "temp"
              (678453 'move' call_tmp[678450](166308 call _cond_test call_tmp[678445]))
              if call_tmp[678450]
              {
                (166298 call <~> f[166150] "\n")
              }
              {
                (166304 call <~> f[166150] " ")
              }
              unknown call_tmp[678457] "expr temp" "maybe param" "maybe type" "temp"
              (678460 'move' call_tmp[678457](361412 call dom _mt[243] this[166154]))
              unknown call_tmp[678464] "expr temp" "maybe param" "maybe type" "temp"
              (678467 'move' call_tmp[678464](166320 call(166315 call (partial) _indices _mt[243] call_tmp[678457]) i[166359]))
              (166321 call = prevInd[166259] call_tmp[678464])
              (482932 'end of statement' prevInd[166259] i[166359])
              unknown call_tmp[678471] "expr temp" "maybe param" "maybe type" "temp"
              (678474 'move' call_tmp[678471](166328 call(388362 call (partial) data _mt[243] this[166154]) i[166359]))
              (166329 call <~> f[166150] call_tmp[678471])
              (482935 'end of statement' i[166359])
            }
            label _continueLabel[166337]
            _indexOfInterest[166332]
            _iterator[166333]
          }
          label _breakLabel[166338]
        }
        (166375 call <~> f[166150] "\n")
      }
    }
    (521931 return _void[55])
  }
  (355218 'used modules list'(161559 'use' ChapelStandard[20264])(161563 'import' RangeChunk[266375])(161566 'use' DSIUtil[230805]))
}