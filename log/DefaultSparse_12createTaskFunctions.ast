AST dump for DefaultSparse after pass createTaskFunctions.
Module use list: ChapelStandard RangeChunk DSIUtil Search Sort 

{
  function chpl__init_DefaultSparse[416002]() : void[4] "insert line file info" "module init"
  {
    (544144 'init var' debugDefaultSparse[161565] 0)
    (161568 'end of statement')
    (521869 return _void[55])
  }
  unknown debugDefaultSparse[161565] "config" "param"
  function DefaultSparseDom[164332](?).linksDistribution[161600](arg _mt[164336]:_MT[238], arg this[164334]:DefaultSparseDom[164332](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521353] "RVV" "param" "temp"
    (521358 'move' ret[521353](521357 'deref' 0))
    (521355 return ret[521353])
  }
  function DefaultSparseDom[164332](?).dsiLinksDistribution[161610](arg _mt[164340]:_MT[238], arg this[164338]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521362] "RVV" "temp"
    (521367 'move' ret[521362](521366 'deref' 0))
    (521364 return ret[521362])
  }
  function DefaultSparseDom[164332](?).init[161622](arg _mt[164344]:_MT[238], arg this[164342]:DefaultSparseDom[164332](?), param arg rank[161620]:_any[178](?), arg idxType[161624]:_any[178](?), arg dist[161628]:unmanaged DefaultDist[415444], arg parentDom[161632]:_domain[125902](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462153] "temporary of super field" "temp"
    (462155 'move' super_tmp[462153](462152 '.v' this[164342] c"super"))
    (161643 call(161636 call (partial) init _mt[243] super_tmp[462153]) rank[161620] idxType[161624] parentDom[161632])
    (482478 'end of statement')
    unknown tmp[462158] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492451] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[675627] "expr temp" "maybe param" "maybe type" "temp"
      (675630 'move' call_tmp[675627](462160 '.v' this[164342] c"super"))
      (492455 'move' call_type_tmp[492451](462163 'typeof' call_tmp[675627]))
    }
    (462164 'move' tmp[462158] call_type_tmp[492451])
    unknown call_tmp[675632] "maybe param" "maybe type" "temp"
    (675635 'move' call_tmp[675632](462169 'cast' tmp[462158] this[164342]))
    unknown chpl__thisAsParent[462166] "dead at end of block" "insert auto destroy" "temp"
    (544146 'init var' chpl__thisAsParent[462166] call_tmp[675632] tmp[462158])
    (462172 'setcid' chpl__thisAsParent[462166])
    (482479 'end of statement')
    unknown tmp[462174] "temp"
    (462177 'init var' tmp[462174] dist[161628] unmanaged DefaultDist[415444])
    (462179 'init field' this[164342] c"dist" tmp[462174])
    (482480 'end of statement')
    unknown tmp[462185] "temp"
    (462187 'init var' tmp[462185] 0)
    (462189 '.=' this[164342] c"_nnz" tmp[462185])
    (482481 'end of statement')
    unknown tmp[462193] "temp"
    unknown call_tmp[675637] "expr temp" "maybe param" "maybe type" "temp"
    (675640 'move' call_tmp[675637](462210 '.' this[164342] c"nnzDom"))
    unknown call_tmp[675642] "expr temp" "maybe param" "maybe type" "temp"
    (675645 'move' call_tmp[675642](462198 call chpl__ensureDomainExpr call_tmp[675637]))
    unknown call_tmp[675647] "expr temp" "maybe param" "maybe type" "temp"
    (675650 'move' call_tmp[675647](462213 '.v' this[164342] c"rank"))
    unknown call_tmp[675652] "expr temp" "maybe param" "maybe type" "temp"
    (675655 'move' call_tmp[675652](462216 '.v' this[164342] c"idxType"))
    unknown call_tmp[675657] "expr temp" "maybe param" "maybe type" "temp"
    (675660 'move' call_tmp[675657](462201 call chpl__buildIndexType call_tmp[675647] call_tmp[675652]))
    unknown call_tmp[675662] "expr temp" "maybe param" "maybe type" "temp"
    (675665 'move' call_tmp[675662](462196 call chpl__buildArrayRuntimeType call_tmp[675642] call_tmp[675657]))
    (462204 'default init var' tmp[462193] call_tmp[675662])
    (462206 '.=' this[164342] c"_indices" tmp[462193])
    (482482 'end of statement')
    (462219 'setcid' this[164342])
    (521369 return _void[55])
  }
  function DefaultSparseDom[164332](?).getNNZ[161658](arg _mt[164348]:_MT[238], arg this[164346]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521373] "RVV" "temp"
    unknown call_tmp[675669] "expr temp" "maybe param" "maybe type" "temp"
    (675672 'move' call_tmp[675669](387422 call _nnz _mt[243] this[164346]))
    (521379 'move' ret[521373](521378 'coerce' call_tmp[675669] int(64)[13]))
    (521375 return ret[521373])
  }
  { scopeless type
    int(64)[13]
  }
  function DefaultSparseDom[164332](?).dsiBuildArray[161672](arg _mt[164352]:_MT[238], arg this[164350]:DefaultSparseDom[164332](?), arg eltType[161670]:_any[178](?), param arg initElts[161675]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521383] "RVV" "temp"
    unknown call_tmp[675676] "expr temp" "maybe param" "maybe type" "temp"
    (675679 'move' call_tmp[675676](387432 call rank _mt[243] this[164350]))
    unknown call_tmp[675683] "expr temp" "maybe param" "maybe type" "temp"
    (675686 'move' call_tmp[675683](387437 call idxType _mt[243] this[164350]))
    unknown call_tmp[675688] "expr temp" "maybe param" "maybe type" "temp"
    (675691 'move' call_tmp[675688](161692 call _to_unmanaged this[164350]))
    unknown call_tmp[675693] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675696 'move' call_tmp[675693](747970 'new' DefaultSparseArr[387426](?)(eltType = eltType[161670])(rank = call_tmp[675676])(idxType = call_tmp[675683])(dom = call_tmp[675688])(initElts = initElts[161675])(_chpl_manager = unmanaged[220](?))))
    (521388 'move' ret[521383](521387 'deref' call_tmp[675693]))
    (521385 return ret[521383])
  }
  function DefaultSparseDom[164332](?).dsiIndsIterSafeForRemoving[161704](arg _mt[164356]:_MT[238], arg this[164354]:DefaultSparseDom[164332](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521392] "RVV" "temp"
    {
      unknown _indexOfInterest[161723] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161724] "expr temp" "temp"
      unknown call_tmp[675700] "expr temp" "maybe param" "maybe type" "temp"
      (675703 'move' call_tmp[675700](387450 call _nnz _mt[243] this[164354]))
      unknown call_tmp[675705] "expr temp" "maybe param" "maybe type" "temp"
      (675708 'move' call_tmp[675705](161740 call - 1))
      unknown call_tmp[675710] "expr temp" "maybe param" "maybe type" "temp"
      (675713 'move' call_tmp[675710](161744 call chpl_direct_range_iter 1 call_tmp[675700] call_tmp[675705]))
      (161733 'move' _iterator[161724](161731 call _getIterator call_tmp[675710]))
      Defer
      {
        {
          (161760 call _freeIterator _iterator[161724])
        }
      }
      { scopeless type
        (161749 'move' _indexOfInterest[161723](161746 call iteratorIndex _iterator[161724]))
      }
      ForLoop[161725]
      {
        unknown i[161753] "index var" "insert auto destroy"
        (482487 'end of statement')
        (161755 'move' i[161753] _indexOfInterest[161723])
        (482488 'end of statement' i[161753])
        {
          unknown yret[521396] "YVV" "temp"
          unknown call_tmp[675717] "expr temp" "maybe param" "maybe type" "temp"
          (675720 'move' call_tmp[675717](161719 call(387444 call (partial) _indices _mt[243] this[164354]) i[161753]))
          (521399 'move' yret[521396](521398 'deref' call_tmp[675717]))
          (521401 yield yret[521396])
          (482490 'end of statement' i[161753])
        }
        label _continueLabel[161728]
        _indexOfInterest[161723]
        _iterator[161724]
      }
      label _breakLabel[161729]
    }
    (521394 return ret[521392])
  }
  function DefaultSparseDom[164332](?).these[161772](arg _mt[164360]:_MT[238], arg this[164358]:DefaultSparseDom[164332](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521405] "RVV" "temp"
    {
      unknown _indexOfInterest[161786] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161787] "expr temp" "temp"
      unknown call_tmp[675724] "expr temp" "maybe param" "maybe type" "temp"
      (675727 'move' call_tmp[675724](387461 call _nnz _mt[243] this[164358]))
      unknown call_tmp[675729] "expr temp" "maybe param" "maybe type" "temp"
      (675732 'move' call_tmp[675729](161801 call chpl_direct_range_iter 1 call_tmp[675724] 1))
      (161796 'move' _iterator[161787](161794 call _getIterator call_tmp[675729]))
      Defer
      {
        {
          (161817 call _freeIterator _iterator[161787])
        }
      }
      { scopeless type
        (161806 'move' _indexOfInterest[161786](161803 call iteratorIndex _iterator[161787]))
      }
      ForLoop[161788]
      {
        unknown i[161810] "index var" "insert auto destroy"
        (482493 'end of statement')
        (161812 'move' i[161810] _indexOfInterest[161786])
        (482494 'end of statement' i[161810])
        {
          unknown yret[521409] "YVV" "temp"
          unknown call_tmp[675736] "expr temp" "maybe param" "maybe type" "temp"
          (675739 'move' call_tmp[675736](161782 call(387455 call (partial) _indices _mt[243] this[164358]) i[161810]))
          (521412 'move' yret[521409](521411 'deref' call_tmp[675736]))
          (521414 yield yret[521409])
          (482496 'end of statement' i[161810])
        }
        label _continueLabel[161791]
        _indexOfInterest[161786]
        _iterator[161787]
      }
      label _breakLabel[161792]
    }
    (521407 return ret[521405])
  }
  function DefaultSparseDom[164332](?).these[161833](arg _mt[164364]:_MT[238], arg this[164362]:DefaultSparseDom[164332](?), param arg tag[161830]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521418] "RVV" "temp"
    unknown call_tmp[675743] "maybe param" "maybe type" "temp"
    (675746 'move' call_tmp[675743](387468 call _nnz _mt[243] this[164362]))
    const numElems[161843] "dead at end of block" "const" "insert auto destroy"
    (544148 'init var' numElems[161843] call_tmp[675743])
    (161846 'end of statement')
    unknown call_tmp[675748] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (675751 'move' call_tmp[675748](161853 'typeof' numElems[161843]))
    unknown call_tmp[675753] "expr temp" "maybe param" "maybe type" "temp"
    (675756 'move' call_tmp[675753](161851 call _computeNumChunks numElems[161843]))
    unknown call_tmp[675758] "maybe param" "maybe type" "temp"
    (675761 'move' call_tmp[675758](161854 call _cast call_tmp[675748] call_tmp[675753]))
    const numChunks[161856] "dead at end of block" "const" "insert auto destroy"
    (544150 'init var' numChunks[161856] call_tmp[675758])
    (161859 'end of statement' numElems[161843] numElems[161843])
    unknown call_tmp[675763] "expr temp" "maybe param" "maybe type" "temp"
    (675766 'move' call_tmp[675763](161919 call _cond_test debugDefaultSparse[161565]))
    if call_tmp[675763]
    {
      (161916 call writeln "DefaultSparseDom standalone: " numChunks[161856] " chunks, " numElems[161843] " elems")
      (482500 'end of statement' numChunks[161856] numElems[161843])
    }
    unknown call_tmp[675768] "expr temp" "maybe param" "maybe type" "temp"
    (675771 'move' call_tmp[675768](161925 call <= numChunks[161856] 1))
    unknown call_tmp[675773] "expr temp" "maybe param" "maybe type" "temp"
    (675776 'move' call_tmp[675773](162229 call _cond_test call_tmp[675768]))
    if call_tmp[675773]
    {
      {
        unknown _indexOfInterest[161939] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[161940] "expr temp" "temp"
        unknown call_tmp[675778] "expr temp" "maybe param" "maybe type" "temp"
        (675781 'move' call_tmp[675778](161954 call chpl_direct_range_iter 1 numElems[161843] 1))
        (161949 'move' _iterator[161940](161947 call _getIterator call_tmp[675778]))
        Defer
        {
          {
            (161970 call _freeIterator _iterator[161940])
          }
        }
        { scopeless type
          (161959 'move' _indexOfInterest[161939](161956 call iteratorIndex _iterator[161940]))
        }
        ForLoop[161941]
        {
          unknown i[161963] "index var" "insert auto destroy"
          (482504 'end of statement')
          (161965 'move' i[161963] _indexOfInterest[161939])
          (482505 'end of statement' i[161963])
          {
            unknown yret[521422] "YVV" "temp"
            unknown call_tmp[675785] "expr temp" "maybe param" "maybe type" "temp"
            (675788 'move' call_tmp[675785](161935 call(387479 call (partial) _indices _mt[243] this[164362]) i[161963]))
            (521425 'move' yret[521422](521424 'deref' call_tmp[675785]))
            (521427 yield yret[521422])
            (482507 'end of statement' i[161963])
          }
          label _continueLabel[161944]
          _indexOfInterest[161939]
          _iterator[161940]
        }
        label _breakLabel[161945]
      }
    }
    {
      {
        unknown tmpIter[162032] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[675790] "expr temp" "maybe param" "maybe type" "temp"
        (675793 'move' call_tmp[675790](161985 call chpl_build_bounded_range 1 numElems[161843]))
        (162035 'move' tmpIter[162032](161989 call chunks module=[255] RangeChunk[266458] call_tmp[675790] numChunks[161856]))
        unknown isRngDomArr[162209] "maybe param" "temp"
        unknown tmp[428097] "maybe param" "temp"
        (428108 'move' tmp[428097](162211 call isBoundedRange tmpIter[162032]))
        unknown call_tmp[675795] "expr temp" "maybe param" "maybe type" "temp"
        (675798 'move' call_tmp[675795](428110 call _cond_invalid tmp[428097]))
        if call_tmp[675795]
        {
          (428113 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570102] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570103] "maybe param" "temp"
        unknown call_tmp[675800] "expr temp" "maybe param" "maybe type" "temp"
        (675803 'move' call_tmp[675800](428098 call isTrue tmp[428097]))
        (570108 'move' tmp[570103](570106 call _cond_test call_tmp[675800]))
        if tmp[570103]
        {
          (570113 'move' tmp[570102](570110 '_paramFoldLogical' tmp[570103] 1))
        }
        {
          unknown tmp[428118] "maybe param" "temp"
          (428129 'move' tmp[428118](162214 call isDomain tmpIter[162032]))
          unknown call_tmp[675805] "expr temp" "maybe param" "maybe type" "temp"
          (675808 'move' call_tmp[675805](428131 call _cond_invalid tmp[428118]))
          if call_tmp[675805]
          {
            (428134 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[570075] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570076] "maybe param" "temp"
          unknown call_tmp[675810] "expr temp" "maybe param" "maybe type" "temp"
          (675813 'move' call_tmp[675810](428119 call isTrue tmp[428118]))
          (570081 'move' tmp[570076](570079 call _cond_test call_tmp[675810]))
          if tmp[570076]
          {
            (570086 'move' tmp[570075](570083 '_paramFoldLogical' tmp[570076] 1))
          }
          {
            unknown tmp[570088] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[675815] "expr temp" "maybe param" "maybe type" "temp"
            (675818 'move' call_tmp[675815](162217 call isArray tmpIter[162032]))
            (570090 'move' tmp[570088](428123 call isTrue call_tmp[675815]))
            (570095 'move' tmp[570075](570092 '_paramFoldLogical' tmp[570076] tmp[570088]))
          }
          unknown tmp[570115] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (570117 'move' tmp[570115](428102 call isTrue tmp[570075]))
          (570122 'move' tmp[570102](570119 '_paramFoldLogical' tmp[570103] tmp[570115]))
        }
        (162224 'move' isRngDomArr[162209] tmp[570102])
        if isRngDomArr[162209]
        {
          const _coforallCount[162076] "const" "end count" "temp"
          (162145 'move' _coforallCount[162076](162142 call _endCountAlloc 1))
          unknown numTasks[162077] "temp"
          (162129 'move' numTasks[162077](162125 call size _mt[243] tmpIter[162032]))
          (162120 call _upEndCount _coforallCount[162076] 1 numTasks[162077])
          (482510 'end of statement')
          (162117 call chpl_resetTaskSpawn numTasks[162077])
          (482511 'end of statement')
          unknown _indexOfInterest[162084] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162085] "expr temp" "temp"
          (162094 'move' _iterator[162085](162092 call _getIterator tmpIter[162032]))
          Defer
          {
            {
              (162110 call _freeIterator _iterator[162085])
            }
          }
          { scopeless type
            (162099 'move' _indexOfInterest[162084](162096 call iteratorIndex _iterator[162085]))
          }
          ForLoop[162086]
          {
            unknown chunk[162103] "coforall index var" "index var" "insert auto destroy"
            (482513 'end of statement')
            (162105 'move' chunk[162103] _indexOfInterest[162084])
            (482514 'end of statement' chunk[162103])
            (935298 call coforall_fn[935296])
            function coforall_fn[935296]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[162038] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162040] "expr temp" "temp"
                (162042 'move' _iterator[162040](162045 call _getIterator chunk[162103]))
                Defer
                {
                  {
                    (162049 call _freeIterator _iterator[162040])
                  }
                }
                { scopeless type
                  (162053 'move' _indexOfInterest[162038](162056 call iteratorIndex _iterator[162040]))
                }
                ForLoop[162058]
                {
                  unknown i[162061] "index var" "insert auto destroy"
                  (482517 'end of statement')
                  (162063 'move' i[162061] _indexOfInterest[162038])
                  (482518 'end of statement' i[162061])
                  unknown yret[521429] "YVV" "temp"
                  unknown call_tmp[675824] "expr temp" "maybe param" "maybe type" "temp"
                  (675827 'move' call_tmp[675824](162069 call(387496 call (partial) _indices _mt[243] this[164362]) i[162061]))
                  (521432 'move' yret[521429](521431 'deref' call_tmp[675824]))
                  (521434 yield yret[521429])
                  (482520 'end of statement' i[162061])
                  label _continueLabel[162071]
                  _indexOfInterest[162038]
                  _iterator[162040]
                }
                label _breakLabel[162073]
              }
              (162079 call _downEndCount _coforallCount[162076] nil[44])
              (935301 return _void[55])
            }
            {
            }
            label _continueLabel[162089]
            _indexOfInterest[162084]
            _iterator[162085]
          }
          label _breakLabel[162090]
          Defer
          {
            {
              (162132 call _endCountFree _coforallCount[162076])
            }
          }
          (162137 call _waitEndCount _coforallCount[162076] 1 numTasks[162077])
        }
        {
          const _coforallCount[162149] "const" "end count" "temp"
          (162206 'move' _coforallCount[162149](162203 call _endCountAlloc 1))
          unknown _indexOfInterest[162157] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162158] "expr temp" "temp"
          (162167 'move' _iterator[162158](162165 call _getIterator tmpIter[162032]))
          Defer
          {
            {
              (162183 call _freeIterator _iterator[162158])
            }
          }
          { scopeless type
            (162172 'move' _indexOfInterest[162157](162169 call iteratorIndex _iterator[162158]))
          }
          ForLoop[162159]
          {
            unknown chunk[162176] "coforall index var" "index var" "insert auto destroy"
            (482526 'end of statement')
            (162178 'move' chunk[162176] _indexOfInterest[162157])
            (482527 'end of statement' chunk[162176])
            (162190 call _upEndCount _coforallCount[162149] 1)
            (482529 'end of statement')
            (935305 call coforall_fn[935303])
            function coforall_fn[935303]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[161998] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[161999] "expr temp" "temp"
                (162008 'move' _iterator[161999](162006 call _getIterator chunk[162176]))
                Defer
                {
                  {
                    (162024 call _freeIterator _iterator[161999])
                  }
                }
                { scopeless type
                  (162013 'move' _indexOfInterest[161998](162010 call iteratorIndex _iterator[161999]))
                }
                ForLoop[162000]
                {
                  unknown i[162017] "index var" "insert auto destroy"
                  (482531 'end of statement')
                  (162019 'move' i[162017] _indexOfInterest[161998])
                  (482532 'end of statement' i[162017])
                  unknown yret[521436] "YVV" "temp"
                  unknown call_tmp[675831] "expr temp" "maybe param" "maybe type" "temp"
                  (675834 'move' call_tmp[675831](161995 call(387489 call (partial) _indices _mt[243] this[164362]) i[162017]))
                  (521439 'move' yret[521436](521438 'deref' call_tmp[675831]))
                  (521441 yield yret[521436])
                  (482534 'end of statement' i[162017])
                  label _continueLabel[162003]
                  _indexOfInterest[161998]
                  _iterator[161999]
                }
                label _breakLabel[162004]
              }
              (162152 call _downEndCount _coforallCount[162149] nil[44])
              (935308 return _void[55])
            }
            {
            }
            label _continueLabel[162162]
            _indexOfInterest[162157]
            _iterator[162158]
          }
          label _breakLabel[162163]
          Defer
          {
            {
              (162194 call _endCountFree _coforallCount[162149])
            }
          }
          (162199 call _waitEndCount _coforallCount[162149] 1)
        }
        (361162 'referenced modules list' RangeChunk[266458])
      }
    }
    (521420 return ret[521418])
  }
  where {
    (161840 call == tag[161830] standalone[451])
  }
  function DefaultSparseDom[164332](?).these[162242](arg _mt[164368]:_MT[238], arg this[164366]:DefaultSparseDom[164332](?), param arg tag[162239]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521445] "RVV" "temp"
    unknown call_tmp[675838] "maybe param" "maybe type" "temp"
    (675841 'move' call_tmp[675838](387504 call _nnz _mt[243] this[164366]))
    const numElems[162252] "dead at end of block" "const" "insert auto destroy"
    (544152 'init var' numElems[162252] call_tmp[675838])
    (162255 'end of statement')
    unknown call_tmp[675843] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (675846 'move' call_tmp[675843](162262 'typeof' numElems[162252]))
    unknown call_tmp[675848] "expr temp" "maybe param" "maybe type" "temp"
    (675851 'move' call_tmp[675848](162260 call _computeNumChunks numElems[162252]))
    unknown call_tmp[675853] "maybe param" "maybe type" "temp"
    (675856 'move' call_tmp[675853](162263 call _cast call_tmp[675843] call_tmp[675848]))
    const numChunks[162265] "dead at end of block" "const" "insert auto destroy"
    (544154 'init var' numChunks[162265] call_tmp[675853])
    (162268 'end of statement' numElems[162252] numElems[162252])
    unknown call_tmp[675858] "expr temp" "maybe param" "maybe type" "temp"
    (675861 'move' call_tmp[675858](162295 call _cond_test debugDefaultSparse[161565]))
    if call_tmp[675858]
    {
      (162293 call writeln "DefaultSparseDom leader: " numChunks[162265] " chunks, " numElems[162252] " elems")
      (482541 'end of statement' numChunks[162265] numElems[162252])
    }
    unknown call_tmp[675863] "expr temp" "maybe param" "maybe type" "temp"
    (675866 'move' call_tmp[675863](162302 call <= numChunks[162265] 1))
    unknown call_tmp[675868] "expr temp" "maybe param" "maybe type" "temp"
    (675871 'move' call_tmp[675868](162509 call _cond_test call_tmp[675863]))
    if call_tmp[675868]
    {
      unknown yret[521449] "YVV" "temp"
      unknown call_tmp[675873] "expr temp" "maybe param" "maybe type" "temp"
      (675876 'move' call_tmp[675873](162308 call _build_tuple this[164366] 1 numElems[162252]))
      (521452 'move' yret[521449](521451 'deref' call_tmp[675873]))
      (521454 yield yret[521449])
      (482544 'end of statement' numElems[162252])
    }
    {
      unknown tmpIter[162338] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[675878] "expr temp" "maybe param" "maybe type" "temp"
      (675881 'move' call_tmp[675878](162319 call chpl_build_bounded_range 1 numElems[162252]))
      (162341 'move' tmpIter[162338](162323 call chunks module=[255] RangeChunk[266458] call_tmp[675878] numChunks[162265]))
      unknown isRngDomArr[162490] "maybe param" "temp"
      unknown tmp[428139] "maybe param" "temp"
      (428150 'move' tmp[428139](162492 call isBoundedRange tmpIter[162338]))
      unknown call_tmp[675883] "expr temp" "maybe param" "maybe type" "temp"
      (675886 'move' call_tmp[675883](428152 call _cond_invalid tmp[428139]))
      if call_tmp[675883]
      {
        (428155 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[570156] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[570157] "maybe param" "temp"
      unknown call_tmp[675888] "expr temp" "maybe param" "maybe type" "temp"
      (675891 'move' call_tmp[675888](428140 call isTrue tmp[428139]))
      (570162 'move' tmp[570157](570160 call _cond_test call_tmp[675888]))
      if tmp[570157]
      {
        (570167 'move' tmp[570156](570164 '_paramFoldLogical' tmp[570157] 1))
      }
      {
        unknown tmp[428160] "maybe param" "temp"
        (428171 'move' tmp[428160](162495 call isDomain tmpIter[162338]))
        unknown call_tmp[675893] "expr temp" "maybe param" "maybe type" "temp"
        (675896 'move' call_tmp[675893](428173 call _cond_invalid tmp[428160]))
        if call_tmp[675893]
        {
          (428176 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570129] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570130] "maybe param" "temp"
        unknown call_tmp[675898] "expr temp" "maybe param" "maybe type" "temp"
        (675901 'move' call_tmp[675898](428161 call isTrue tmp[428160]))
        (570135 'move' tmp[570130](570133 call _cond_test call_tmp[675898]))
        if tmp[570130]
        {
          (570140 'move' tmp[570129](570137 '_paramFoldLogical' tmp[570130] 1))
        }
        {
          unknown tmp[570142] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[675903] "expr temp" "maybe param" "maybe type" "temp"
          (675906 'move' call_tmp[675903](162498 call isArray tmpIter[162338]))
          (570144 'move' tmp[570142](428165 call isTrue call_tmp[675903]))
          (570149 'move' tmp[570129](570146 '_paramFoldLogical' tmp[570130] tmp[570142]))
        }
        unknown tmp[570169] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (570171 'move' tmp[570169](428144 call isTrue tmp[570129]))
        (570176 'move' tmp[570156](570173 '_paramFoldLogical' tmp[570157] tmp[570169]))
      }
      (162505 'move' isRngDomArr[162490] tmp[570156])
      if isRngDomArr[162490]
      {
        const _coforallCount[162357] "const" "end count" "temp"
        (162426 'move' _coforallCount[162357](162423 call _endCountAlloc 1))
        unknown numTasks[162358] "temp"
        (162410 'move' numTasks[162358](162406 call size _mt[243] tmpIter[162338]))
        (162401 call _upEndCount _coforallCount[162357] 1 numTasks[162358])
        (482547 'end of statement')
        (162398 call chpl_resetTaskSpawn numTasks[162358])
        (482548 'end of statement')
        unknown _indexOfInterest[162365] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162366] "expr temp" "temp"
        (162375 'move' _iterator[162366](162373 call _getIterator tmpIter[162338]))
        Defer
        {
          {
            (162391 call _freeIterator _iterator[162366])
          }
        }
        { scopeless type
          (162380 'move' _indexOfInterest[162365](162377 call iteratorIndex _iterator[162366]))
        }
        ForLoop[162367]
        {
          unknown chunk[162384] "coforall index var" "index var" "insert auto destroy"
          (482550 'end of statement')
          (162386 'move' chunk[162384] _indexOfInterest[162365])
          (482551 'end of statement' chunk[162384])
          (935312 call coforall_fn[935310])
          function coforall_fn[935310]() : void[4] "cobegin or coforall"
          {
            unknown yret[521456] "YVV" "temp"
            unknown call_tmp[675912] "expr temp" "maybe param" "maybe type" "temp"
            (675915 'move' call_tmp[675912](162349 call first _mt[243] chunk[162384]))
            unknown call_tmp[675919] "expr temp" "maybe param" "maybe type" "temp"
            (675922 'move' call_tmp[675919](162353 call last _mt[243] chunk[162384]))
            unknown call_tmp[675924] "expr temp" "maybe param" "maybe type" "temp"
            (675927 'move' call_tmp[675924](162346 call _build_tuple this[164366] call_tmp[675912] call_tmp[675919]))
            (521459 'move' yret[521456](521458 'deref' call_tmp[675924]))
            (521461 yield yret[521456])
            (482553 'end of statement' chunk[162384] chunk[162384])
            (162360 call _downEndCount _coforallCount[162357] nil[44])
            (935315 return _void[55])
          }
          {
          }
          label _continueLabel[162370]
          _indexOfInterest[162365]
          _iterator[162366]
        }
        label _breakLabel[162371]
        Defer
        {
          {
            (162413 call _endCountFree _coforallCount[162357])
          }
        }
        (162418 call _waitEndCount _coforallCount[162357] 1 numTasks[162358])
      }
      {
        const _coforallCount[162430] "const" "end count" "temp"
        (162487 'move' _coforallCount[162430](162484 call _endCountAlloc 1))
        unknown _indexOfInterest[162438] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162439] "expr temp" "temp"
        (162448 'move' _iterator[162439](162446 call _getIterator tmpIter[162338]))
        Defer
        {
          {
            (162464 call _freeIterator _iterator[162439])
          }
        }
        { scopeless type
          (162453 'move' _indexOfInterest[162438](162450 call iteratorIndex _iterator[162439]))
        }
        ForLoop[162440]
        {
          unknown chunk[162457] "coforall index var" "index var" "insert auto destroy"
          (482560 'end of statement')
          (162459 'move' chunk[162457] _indexOfInterest[162438])
          (482561 'end of statement' chunk[162457])
          (162471 call _upEndCount _coforallCount[162430] 1)
          (482563 'end of statement')
          (935319 call coforall_fn[935317])
          function coforall_fn[935317]() : void[4] "cobegin or coforall"
          {
            unknown yret[521463] "YVV" "temp"
            unknown call_tmp[675931] "expr temp" "maybe param" "maybe type" "temp"
            (675934 'move' call_tmp[675931](162326 call first _mt[243] chunk[162457]))
            unknown call_tmp[675938] "expr temp" "maybe param" "maybe type" "temp"
            (675941 'move' call_tmp[675938](162331 call last _mt[243] chunk[162457]))
            unknown call_tmp[675943] "expr temp" "maybe param" "maybe type" "temp"
            (675946 'move' call_tmp[675943](162334 call _build_tuple this[164366] call_tmp[675931] call_tmp[675938]))
            (521466 'move' yret[521463](521465 'deref' call_tmp[675943]))
            (521468 yield yret[521463])
            (482564 'end of statement' chunk[162457] chunk[162457])
            (162433 call _downEndCount _coforallCount[162430] nil[44])
            (935322 return _void[55])
          }
          {
          }
          label _continueLabel[162443]
          _indexOfInterest[162438]
          _iterator[162439]
        }
        label _breakLabel[162444]
        Defer
        {
          {
            (162475 call _endCountFree _coforallCount[162430])
          }
        }
        (162480 call _waitEndCount _coforallCount[162430] 1)
      }
      (361169 'referenced modules list' RangeChunk[266458])
    }
    (521447 return ret[521445])
  }
  where {
    (162249 call == tag[162239] leader[447])
  }
  function DefaultSparseDom[164332](?).these[162523](arg _mt[164372]:_MT[238], arg this[164370]:DefaultSparseDom[164332](?), param arg tag[162520]:iterKind[453], arg followThis[162531]:_tuple[56199](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521472] "RVV" "temp"
    unknown tmp[162549] "dead at end of block" "insert auto destroy" "temp"
    (544156 'init var' tmp[162549] followThis[162531])
    (162559 call _check_tuple_var_decl tmp[162549] 3)
    (482570 'end of statement')
    unknown call_tmp[675948] "maybe param" "maybe type" "temp"
    (675951 'move' call_tmp[675948](162550 call tmp[162549] 0))
    unknown followThisDom[162541] "dead at end of block" "insert auto destroy"
    (544158 'init var' followThisDom[162541] call_tmp[675948])
    unknown call_tmp[675953] "maybe param" "maybe type" "temp"
    (675956 'move' call_tmp[675953](162553 call tmp[162549] 1))
    unknown startIx[162543] "dead at end of block" "insert auto destroy"
    (544160 'init var' startIx[162543] call_tmp[675953])
    unknown call_tmp[675958] "maybe param" "maybe type" "temp"
    (675961 'move' call_tmp[675958](162556 call tmp[162549] 2))
    unknown endIx[162545] "dead at end of block" "insert auto destroy"
    (544162 'init var' endIx[162545] call_tmp[675958])
    (162564 'end of statement')
    unknown call_tmp[675963] "expr temp" "maybe param" "maybe type" "temp"
    (675966 'move' call_tmp[675963](162568 call != followThisDom[162541] this[164370]))
    unknown call_tmp[675968] "expr temp" "maybe param" "maybe type" "temp"
    (675971 'move' call_tmp[675968](162593 call _cond_test call_tmp[675963]))
    if call_tmp[675968]
    {
      (162591 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays")
    }
    unknown call_tmp[675973] "expr temp" "maybe param" "maybe type" "temp"
    (675976 'move' call_tmp[675973](162623 call _cond_test debugDefaultSparse[161565]))
    if call_tmp[675973]
    {
      (162621 call writeln "DefaultSparseDom follower: " startIx[162543] ".." endIx[162545])
      (482572 'end of statement' startIx[162543] endIx[162545])
    }
    {
      unknown _indexOfInterest[162639] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162640] "expr temp" "temp"
      unknown call_tmp[675978] "expr temp" "maybe param" "maybe type" "temp"
      (675981 'move' call_tmp[675978](162654 call chpl_direct_range_iter startIx[162543] endIx[162545] 1))
      (162649 'move' _iterator[162640](162647 call _getIterator call_tmp[675978]))
      Defer
      {
        {
          (162670 call _freeIterator _iterator[162640])
        }
      }
      { scopeless type
        (162659 'move' _indexOfInterest[162639](162656 call iteratorIndex _iterator[162640]))
      }
      ForLoop[162641]
      {
        unknown i[162663] "index var" "insert auto destroy"
        (482576 'end of statement')
        (162665 'move' i[162663] _indexOfInterest[162639])
        (482577 'end of statement' i[162663])
        unknown yret[521476] "YVV" "temp"
        unknown call_tmp[675985] "expr temp" "maybe param" "maybe type" "temp"
        (675988 'move' call_tmp[675985](162636 call(387529 call (partial) _indices _mt[243] this[164370]) i[162663]))
        (521479 'move' yret[521476](521478 'deref' call_tmp[675985]))
        (521481 yield yret[521476])
        (482579 'end of statement' i[162663])
        label _continueLabel[162644]
        _indexOfInterest[162639]
        _iterator[162640]
      }
      label _breakLabel[162645]
    }
    (521474 return ret[521472])
  }
  where {
    unknown call_tmp[675990] "expr temp" "maybe param" "maybe type" "temp"
    (675993 'move' call_tmp[675990](162539 call == tag[162520] follower[449]))
    unknown call_tmp[675995] "expr temp" "maybe param" "maybe type" "temp"
    (675998 'move' call_tmp[675995](462225 'query' followThis[162531] c"size"))
    unknown call_tmp[676000] "expr temp" "maybe param" "maybe type" "temp"
    (676003 'move' call_tmp[676000](462226 call == 3 call_tmp[675995]))
    (462228 call & call_tmp[675990] call_tmp[676000])
  }
  function DefaultSparseDom[164332](?).these[162686](arg _mt[164376]:_MT[238], arg this[164374]:DefaultSparseDom[164332](?), param arg tag[162683]:iterKind[453], arg followThis[162688]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521485] "RVV" "temp"
    (162716 call compilerError "Sparse iterators can't yet be zippered with others")
    (482581 'end of statement')
    unknown dummy[162723] "dead at end of block" "insert auto destroy"
    unknown call_tmp[676007] "expr temp" "maybe param" "maybe type" "temp"
    (676010 'move' call_tmp[676007](387539 call rank _mt[243] this[164374]))
    unknown call_tmp[676014] "expr temp" "maybe param" "maybe type" "temp"
    (676017 'move' call_tmp[676014](387544 call idxType _mt[243] this[164374]))
    unknown call_tmp[676019] "expr temp" "maybe param" "maybe type" "temp"
    (676022 'move' call_tmp[676019](162721 call * call_tmp[676007] call_tmp[676014]))
    (544164 'default init var' dummy[162723] call_tmp[676019])
    (162726 'end of statement')
    unknown yret[521489] "YVV" "temp"
    (521492 'move' yret[521489](521491 'deref' dummy[162723]))
    (521494 yield yret[521489])
    (482582 'end of statement' dummy[162723])
    (521487 return ret[521485])
  }
  where {
    (162695 call == tag[162683] follower[449])
  }
  function DefaultSparseDom[164332](?).find[162737](arg _mt[164380]:_MT[238], arg this[164378]:DefaultSparseDom[164332](?), arg ind[162735]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521498] "RVV" "temp"
    unknown tmp[428181] "maybe param" "temp"
    unknown tmp[428202] "maybe param" "temp"
    unknown call_tmp[676026] "expr temp" "maybe param" "maybe type" "temp"
    (676029 'move' call_tmp[676026](387550 call rank _mt[243] this[164378]))
    (428213 'move' tmp[428202](162745 call == call_tmp[676026] 1))
    unknown call_tmp[676031] "expr temp" "maybe param" "maybe type" "temp"
    (676034 'move' call_tmp[676031](428215 call _cond_invalid tmp[428202]))
    if call_tmp[676031]
    {
      (428218 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570183] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570184] "maybe param" "temp"
    unknown call_tmp[676036] "expr temp" "maybe param" "maybe type" "temp"
    (676039 'move' call_tmp[676036](428203 call isTrue tmp[428202]))
    (570189 'move' tmp[570184](570187 call _cond_test call_tmp[676036]))
    if tmp[570184]
    {
      unknown tmp[570191] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[676041] "expr temp" "maybe param" "maybe type" "temp"
      (676044 'move' call_tmp[676041](162750 call isTuple ind[162735]))
      (570193 'move' tmp[570191](428206 call isTrue call_tmp[676041]))
      (570198 'move' tmp[570183](570195 '_paramFoldLogical' tmp[570184] tmp[570191]))
    }
    {
      (570203 'move' tmp[570183](570200 '_paramFoldLogical' tmp[570184] 0))
    }
    (428192 'move' tmp[428181] tmp[570183])
    unknown call_tmp[676046] "expr temp" "maybe param" "maybe type" "temp"
    (676049 'move' call_tmp[676046](428194 call _cond_invalid tmp[428181]))
    if call_tmp[676046]
    {
      (428197 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570210] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570211] "maybe param" "temp"
    unknown call_tmp[676051] "expr temp" "maybe param" "maybe type" "temp"
    (676054 'move' call_tmp[676051](428182 call isTrue tmp[428181]))
    (570216 'move' tmp[570211](570214 call _cond_test call_tmp[676051]))
    if tmp[570211]
    {
      unknown tmp[570218] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[676058] "expr temp" "maybe param" "maybe type" "temp"
      (676061 'move' call_tmp[676058](162754 call size _mt[243] ind[162735]))
      unknown call_tmp[676063] "expr temp" "maybe param" "maybe type" "temp"
      (676066 'move' call_tmp[676063](162758 call == call_tmp[676058] 1))
      (570220 'move' tmp[570218](428185 call isTrue call_tmp[676063]))
      (570225 'move' tmp[570210](570222 '_paramFoldLogical' tmp[570211] tmp[570218]))
    }
    {
      (570230 'move' tmp[570210](570227 '_paramFoldLogical' tmp[570211] 0))
    }
    unknown call_tmp[676068] "expr temp" "maybe param" "maybe type" "temp"
    (676071 'move' call_tmp[676068](162787 call _cond_test tmp[570210]))
    if call_tmp[676068]
    {
      unknown call_tmp[676075] "expr temp" "maybe param" "maybe type" "temp"
      (676078 'move' call_tmp[676075](387556 call _indices _mt[243] this[164378]))
      unknown call_tmp[676080] "expr temp" "maybe param" "maybe type" "temp"
      (676083 'move' call_tmp[676080](162768 call ind[162735] 0))
      unknown call_tmp[676087] "expr temp" "maybe param" "maybe type" "temp"
      (676090 'move' call_tmp[676087](387562 call _nnz _mt[243] this[164378]))
      unknown call_tmp[676092] "expr temp" "maybe param" "maybe type" "temp"
      (676095 'move' call_tmp[676092](162773 call binarySearch call_tmp[676075] call_tmp[676080](lo = 1)(hi = call_tmp[676087])))
      (521503 'move' ret[521498](521502 'deref' call_tmp[676092]))
      gotoReturn _end_find[521496] _end_find[521496]
    }
    {
      unknown call_tmp[676099] "expr temp" "maybe param" "maybe type" "temp"
      (676102 'move' call_tmp[676099](387567 call _indices _mt[243] this[164378]))
      unknown call_tmp[676106] "expr temp" "maybe param" "maybe type" "temp"
      (676109 'move' call_tmp[676106](387573 call _nnz _mt[243] this[164378]))
      unknown call_tmp[676111] "expr temp" "maybe param" "maybe type" "temp"
      (676114 'move' call_tmp[676111](162784 call binarySearch call_tmp[676099] ind[162735](lo = 1)(hi = call_tmp[676106])))
      (521508 'move' ret[521498](521507 'deref' call_tmp[676111]))
      gotoReturn _end_find[521496] _end_find[521496]
    }
    label _end_find[521496]
    (521500 return ret[521498])
    (355165 'used modules list'(162740 'use' Search[291233]))
  }
  function DefaultSparseDom[164332](?).dsiMember[162799](arg _mt[164384]:_MT[238], arg this[164382]:DefaultSparseDom[164332](?), arg ind[162797]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521514] "RVV" "temp"
    unknown call_tmp[676118] "maybe param" "maybe type" "temp"
    (676121 'move' call_tmp[676118](162809 call(387577 call (partial) find _mt[243] this[164382]) ind[162797]))
    const tmp[162810] "dead at end of block" "const" "insert auto destroy" "temp"
    (544166 'init var' tmp[162810] call_tmp[676118])
    (162817 call _check_tuple_var_decl tmp[162810] 2)
    (482588 'end of statement')
    unknown call_tmp[676123] "maybe param" "maybe type" "temp"
    (676126 'move' call_tmp[676123](162811 call tmp[162810] 0))
    const found[162801] "dead at end of block" "const" "insert auto destroy"
    (544168 'init var' found[162801] call_tmp[676123])
    unknown call_tmp[676128] "maybe param" "maybe type" "temp"
    (676131 'move' call_tmp[676128](162814 call tmp[162810] 1))
    const loc[162803] "dead at end of block" "const" "insert auto destroy"
    (544170 'init var' loc[162803] call_tmp[676128])
    (162822 'end of statement')
    (521519 'move' ret[521514](521518 'deref' found[162801]))
    gotoReturn _end_dsiMember[521512] _end_dsiMember[521512]
    (482589 'end of statement' found[162801])
    label _end_dsiMember[521512]
    (521516 return ret[521514])
  }
  function DefaultSparseDom[164332](?).dsiFirst[162831](arg _mt[164388]:_MT[238], arg this[164386]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[521525] "RVV" "temp"
    unknown call_tmp[676137] "expr temp" "maybe param" "maybe type" "temp"
    (676140 'move' call_tmp[676137](361183 call _indices _mt[243] this[164386]))
    unknown call_tmp[676144] "expr temp" "maybe param" "maybe type" "temp"
    (676147 'move' call_tmp[676144](162835 call _dom _mt[243] call_tmp[676137]))
    unknown call_tmp[676151] "expr temp" "maybe param" "maybe type" "temp"
    (676154 'move' call_tmp[676151](162838 call first _mt[243] call_tmp[676144]))
    unknown call_tmp[676156] "expr temp" "maybe param" "maybe type" "temp"
    (676159 'move' call_tmp[676156](162842 call(387584 call (partial) _indices _mt[243] this[164386]) call_tmp[676151]))
    (521530 'move' ret[521525](521529 'deref' call_tmp[676156]))
    (521527 return ret[521525])
  }
  function DefaultSparseDom[164332](?).dsiLast[162850](arg _mt[164392]:_MT[238], arg this[164390]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[521534] "RVV" "temp"
    unknown call_tmp[676165] "expr temp" "maybe param" "maybe type" "temp"
    (676168 'move' call_tmp[676165](387594 call _nnz _mt[243] this[164390]))
    unknown call_tmp[676170] "expr temp" "maybe param" "maybe type" "temp"
    (676173 'move' call_tmp[676170](162855 call(387589 call (partial) _indices _mt[243] this[164390]) call_tmp[676165]))
    (521539 'move' ret[521534](521538 'deref' call_tmp[676170]))
    (521536 return ret[521534])
  }
  function DefaultSparseDom[164332](?).add_help[162865](arg _mt[164396]:_MT[238], arg this[164394]:DefaultSparseDom[164332](?), arg ind[162863]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521543] "RVV" "temp"
    unknown call_tmp[676177] "maybe param" "maybe type" "temp"
    (676180 'move' call_tmp[676177](162875 call(387598 call (partial) find _mt[243] this[164394]) ind[162863]))
    const tmp[162876] "dead at end of block" "const" "insert auto destroy" "temp"
    (544172 'init var' tmp[162876] call_tmp[676177])
    (162883 call _check_tuple_var_decl tmp[162876] 2)
    (482593 'end of statement')
    unknown call_tmp[676182] "maybe param" "maybe type" "temp"
    (676185 'move' call_tmp[676182](162877 call tmp[162876] 0))
    const found[162867] "dead at end of block" "const" "insert auto destroy"
    (544174 'init var' found[162867] call_tmp[676182])
    unknown call_tmp[676187] "maybe param" "maybe type" "temp"
    (676190 'move' call_tmp[676187](162880 call tmp[162876] 1))
    const insertPt[162869] "dead at end of block" "const" "insert auto destroy"
    (544176 'init var' insertPt[162869] call_tmp[676187])
    (162888 'end of statement')
    unknown call_tmp[676192] "expr temp" "maybe param" "maybe type" "temp"
    (676195 'move' call_tmp[676192](162894 call _cond_test found[162867]))
    if call_tmp[676192]
    {
      (521548 'move' ret[521543](521547 'deref' 0))
      gotoReturn _end_add_help[521541] _end_add_help[521541]
    }
    unknown call_tmp[676197] "expr temp" "maybe param" "maybe type" "temp"
    (676200 'move' call_tmp[676197](162908 call _cond_test 1))
    if call_tmp[676197]
    {
      (162906 call(162901 call (partial) boundsCheck _mt[243] this[164394]) ind[162863])
    }
    unknown call_tmp[676206] "expr temp" "maybe param" "maybe type" "temp"
    (676209 'move' call_tmp[676206](387607 call _nnz _mt[243] this[164394]))
    (162915 call += call_tmp[676206] 1)
    (482596 'end of statement')
    unknown call_tmp[676213] "expr temp" "maybe param" "maybe type" "temp"
    (676216 'move' call_tmp[676213](361189 call nnzDom _mt[243] this[164394]))
    unknown call_tmp[676220] "maybe param" "maybe type" "temp"
    (676223 'move' call_tmp[676220](162919 call size _mt[243] call_tmp[676213]))
    const oldNNZDomSize[162922] "dead at end of block" "const" "insert auto destroy"
    (544178 'init var' oldNNZDomSize[162922] call_tmp[676220])
    (162925 'end of statement')
    unknown call_tmp[676229] "expr temp" "maybe param" "maybe type" "temp"
    (676232 'move' call_tmp[676229](387618 call _nnz _mt[243] this[164394]))
    (162929 call(387613 call (partial) _grow _mt[243] this[164394]) call_tmp[676229])
    (482597 'end of statement')
    {
      unknown _indexOfInterest[162959] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162960] "expr temp" "temp"
      unknown call_tmp[676236] "expr temp" "maybe param" "maybe type" "temp"
      (676239 'move' call_tmp[676236](387636 call _nnz _mt[243] this[164394]))
      unknown call_tmp[676241] "expr temp" "maybe param" "maybe type" "temp"
      (676244 'move' call_tmp[676241](162983 call - call_tmp[676236] 1))
      unknown call_tmp[676246] "expr temp" "maybe param" "maybe type" "temp"
      (676249 'move' call_tmp[676246](162979 call - 1))
      unknown call_tmp[676251] "expr temp" "maybe param" "maybe type" "temp"
      (676254 'move' call_tmp[676251](162986 call chpl_direct_range_iter insertPt[162869] call_tmp[676241] call_tmp[676246]))
      (162969 'move' _iterator[162960](162967 call _getIterator call_tmp[676251]))
      Defer
      {
        {
          (163002 call _freeIterator _iterator[162960])
        }
      }
      { scopeless type
        (162991 'move' _indexOfInterest[162959](162988 call iteratorIndex _iterator[162960]))
      }
      ForLoop[162961]
      {
        unknown i[162995] "index var" "insert auto destroy"
        (482599 'end of statement')
        (162997 'move' i[162995] _indexOfInterest[162959])
        (482600 'end of statement' i[162995])
        {
          unknown call_tmp[676258] "expr temp" "maybe param" "maybe type" "temp"
          (676261 'move' call_tmp[676258](162947 call + i[162995] 1))
          unknown call_tmp[676263] "expr temp" "maybe param" "maybe type" "temp"
          (676266 'move' call_tmp[676263](162950 call(387623 call (partial) _indices _mt[243] this[164394]) call_tmp[676258]))
          unknown call_tmp[676270] "expr temp" "maybe param" "maybe type" "temp"
          (676273 'move' call_tmp[676270](162954 call(387629 call (partial) _indices _mt[243] this[164394]) i[162995]))
          (162955 call = call_tmp[676263] call_tmp[676270])
          (482602 'end of statement' i[162995] i[162995])
        }
        label _continueLabel[162964]
        _indexOfInterest[162959]
        _iterator[162960]
      }
      label _breakLabel[162965]
    }
    unknown call_tmp[676277] "expr temp" "maybe param" "maybe type" "temp"
    (676280 'move' call_tmp[676277](163012 call(387641 call (partial) _indices _mt[243] this[164394]) insertPt[162869]))
    (163014 call = call_tmp[676277] ind[162863])
    (482605 'end of statement' insertPt[162869])
    {
      unknown _indexOfInterest[163046] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163047] "expr temp" "temp"
      unknown call_tmp[676284] "expr temp" "maybe param" "maybe type" "temp"
      (676287 'move' call_tmp[676284](387648 call _arrs _mt[243] this[164394]))
      (163056 'move' _iterator[163047](163054 call _getIterator call_tmp[676284]))
      Defer
      {
        {
          (163072 call _freeIterator _iterator[163047])
        }
      }
      { scopeless type
        (163061 'move' _indexOfInterest[163046](163058 call iteratorIndex _iterator[163047]))
      }
      ForLoop[163048]
      {
        unknown a[163065] "index var" "insert auto destroy"
        (482608 'end of statement')
        (163067 'move' a[163065] _indexOfInterest[163046])
        (482609 'end of statement' a[163065])
        {
          unknown call_tmp[676293] "expr temp" "maybe param" "maybe type" "temp"
          (676296 'move' call_tmp[676293](387654 call _nnz _mt[243] this[164394]))
          unknown call_tmp[676298] "expr temp" "maybe param" "maybe type" "temp"
          (676301 'move' call_tmp[676298](163028 call - call_tmp[676293] 1))
          unknown call_tmp[676303] "expr temp" "maybe param" "maybe type" "temp"
          (676306 'move' call_tmp[676303](163030 call chpl_build_bounded_range insertPt[162869] call_tmp[676298]))
          unknown call_tmp[676308] "expr temp" "maybe param" "maybe type" "temp"
          (676311 'move' call_tmp[676308](163035 call + oldNNZDomSize[162922] 1))
          unknown call_tmp[676315] "expr temp" "maybe param" "maybe type" "temp"
          (676318 'move' call_tmp[676315](361195 call nnzDom _mt[243] this[164394]))
          unknown call_tmp[676322] "expr temp" "maybe param" "maybe type" "temp"
          (676325 'move' call_tmp[676322](163038 call size _mt[243] call_tmp[676315]))
          unknown call_tmp[676327] "expr temp" "maybe param" "maybe type" "temp"
          (676330 'move' call_tmp[676327](163041 call chpl_build_bounded_range call_tmp[676308] call_tmp[676322]))
          (163043 call(163022 call (partial) sparseShiftArray _mt[243] a[163065]) call_tmp[676303] call_tmp[676327])
          (482611 'end of statement' a[163065] insertPt[162869] oldNNZDomSize[162922])
        }
        label _continueLabel[163051]
        _indexOfInterest[163046]
        _iterator[163047]
      }
      label _breakLabel[163052]
    }
    (521553 'move' ret[521543](521552 'deref' 1))
    label _end_add_help[521541]
    (521545 return ret[521543])
  }
  function DefaultSparseDom[164332](?).rem_help[163088](arg _mt[164400]:_MT[238], arg this[164398]:DefaultSparseDom[164332](?), arg ind[163086]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521557] "RVV" "temp"
    unknown call_tmp[676334] "maybe param" "maybe type" "temp"
    (676337 'move' call_tmp[676334](163098 call(387659 call (partial) find _mt[243] this[164398]) ind[163086]))
    const tmp[163099] "dead at end of block" "const" "insert auto destroy" "temp"
    (544180 'init var' tmp[163099] call_tmp[676334])
    (163106 call _check_tuple_var_decl tmp[163099] 2)
    (482616 'end of statement')
    unknown call_tmp[676339] "maybe param" "maybe type" "temp"
    (676342 'move' call_tmp[676339](163100 call tmp[163099] 0))
    const found[163090] "dead at end of block" "const" "insert auto destroy"
    (544182 'init var' found[163090] call_tmp[676339])
    unknown call_tmp[676344] "maybe param" "maybe type" "temp"
    (676347 'move' call_tmp[676344](163103 call tmp[163099] 1))
    const insertPt[163092] "dead at end of block" "const" "insert auto destroy"
    (544184 'init var' insertPt[163092] call_tmp[676344])
    (163111 'end of statement')
    unknown call_tmp[676349] "expr temp" "maybe param" "maybe type" "temp"
    (676352 'move' call_tmp[676349](163114 call ! found[163090]))
    unknown call_tmp[676354] "expr temp" "maybe param" "maybe type" "temp"
    (676357 'move' call_tmp[676354](163138 call _cond_test call_tmp[676349]))
    if call_tmp[676354]
    {
      (163136 call halt "index not in domain: " ind[163086])
    }
    unknown call_tmp[676361] "expr temp" "maybe param" "maybe type" "temp"
    (676364 'move' call_tmp[676361](387667 call _nnz _mt[243] this[164398]))
    (163145 call -= call_tmp[676361] 1)
    (482618 'end of statement')
    {
      unknown _indexOfInterest[163168] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163169] "expr temp" "temp"
      unknown call_tmp[676368] "expr temp" "maybe param" "maybe type" "temp"
      (676371 'move' call_tmp[676368](387685 call _nnz _mt[243] this[164398]))
      unknown call_tmp[676373] "expr temp" "maybe param" "maybe type" "temp"
      (676376 'move' call_tmp[676373](163183 call chpl_direct_range_iter insertPt[163092] call_tmp[676368] 1))
      (163178 'move' _iterator[163169](163176 call _getIterator call_tmp[676373]))
      Defer
      {
        {
          (163199 call _freeIterator _iterator[163169])
        }
      }
      { scopeless type
        (163188 'move' _indexOfInterest[163168](163185 call iteratorIndex _iterator[163169]))
      }
      ForLoop[163170]
      {
        unknown i[163192] "index var" "insert auto destroy"
        (482620 'end of statement')
        (163194 'move' i[163192] _indexOfInterest[163168])
        (482621 'end of statement' i[163192])
        {
          unknown call_tmp[676380] "expr temp" "maybe param" "maybe type" "temp"
          (676383 'move' call_tmp[676380](163156 call(387672 call (partial) _indices _mt[243] this[164398]) i[163192]))
          unknown call_tmp[676387] "expr temp" "maybe param" "maybe type" "temp"
          (676390 'move' call_tmp[676387](163160 call + i[163192] 1))
          unknown call_tmp[676392] "expr temp" "maybe param" "maybe type" "temp"
          (676395 'move' call_tmp[676392](163163 call(387678 call (partial) _indices _mt[243] this[164398]) call_tmp[676387]))
          (163164 call = call_tmp[676380] call_tmp[676392])
          (482623 'end of statement' i[163192] i[163192])
        }
        label _continueLabel[163173]
        _indexOfInterest[163168]
        _iterator[163169]
      }
      label _breakLabel[163174]
    }
    {
      unknown _indexOfInterest[163225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163226] "expr temp" "temp"
      unknown call_tmp[676399] "expr temp" "maybe param" "maybe type" "temp"
      (676402 'move' call_tmp[676399](387690 call _arrs _mt[243] this[164398]))
      (163235 'move' _iterator[163226](163233 call _getIterator call_tmp[676399]))
      Defer
      {
        {
          (163251 call _freeIterator _iterator[163226])
        }
      }
      { scopeless type
        (163240 'move' _indexOfInterest[163225](163237 call iteratorIndex _iterator[163226]))
      }
      ForLoop[163227]
      {
        unknown a[163244] "index var" "insert auto destroy"
        (482627 'end of statement')
        (163246 'move' a[163244] _indexOfInterest[163225])
        (482628 'end of statement' a[163244])
        {
          unknown call_tmp[676408] "expr temp" "maybe param" "maybe type" "temp"
          (676411 'move' call_tmp[676408](387696 call _nnz _mt[243] this[164398]))
          unknown call_tmp[676413] "expr temp" "maybe param" "maybe type" "temp"
          (676416 'move' call_tmp[676413](163217 call - call_tmp[676408] 1))
          unknown call_tmp[676418] "expr temp" "maybe param" "maybe type" "temp"
          (676421 'move' call_tmp[676418](163219 call chpl_build_bounded_range insertPt[163092] call_tmp[676413]))
          (163222 call(163211 call (partial) sparseShiftArrayBack _mt[243] a[163244]) call_tmp[676418])
          (482630 'end of statement' a[163244] insertPt[163092])
        }
        label _continueLabel[163230]
        _indexOfInterest[163225]
        _iterator[163226]
      }
      label _breakLabel[163231]
    }
    (521562 'move' ret[521557](521561 'deref' 1))
    (521559 return ret[521557])
  }
  function DefaultSparseDom[164332](?).dsiAdd[163269](arg _mt[164404]:_MT[238], arg this[164402]:DefaultSparseDom[164332](?), arg ind[163266] :
  (387701 call idxType _mt[243] this[164402])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521566] "RVV" "temp"
    unknown call_tmp[676427] "expr temp" "maybe param" "maybe type" "temp"
    (676430 'move' call_tmp[676427](163278 call(387712 call (partial) add_help _mt[243] this[164402]) ind[163266]))
    (521571 'move' ret[521566](521570 'deref' call_tmp[676427]))
    (521568 return ret[521566])
  }
  where {
    unknown call_tmp[676434] "expr temp" "maybe param" "maybe type" "temp"
    (676437 'move' call_tmp[676434](387706 call rank _mt[243] this[164402]))
    (163273 call == call_tmp[676434] 1)
  }
  function DefaultSparseDom[164332](?).dsiRemove[163291](arg _mt[164408]:_MT[238], arg this[164406]:DefaultSparseDom[164332](?), arg ind[163288] :
  (387718 call idxType _mt[243] this[164406])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521575] "RVV" "temp"
    unknown call_tmp[676443] "expr temp" "maybe param" "maybe type" "temp"
    (676446 'move' call_tmp[676443](163300 call(387729 call (partial) rem_help _mt[243] this[164406]) ind[163288]))
    (521580 'move' ret[521575](521579 'deref' call_tmp[676443]))
    (521577 return ret[521575])
  }
  where {
    unknown call_tmp[676450] "expr temp" "maybe param" "maybe type" "temp"
    (676453 'move' call_tmp[676450](387723 call rank _mt[243] this[164406]))
    (163295 call == call_tmp[676450] 1)
  }
  function DefaultSparseDom[164332](?).dsiAdd[163316](arg _mt[164412]:_MT[238], arg this[164410]:DefaultSparseDom[164332](?), arg ind[163313] :
  unknown call_tmp[676457] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521584] "RVV" "temp"
    unknown call_tmp[676471] "expr temp" "maybe param" "maybe type" "temp"
    (676474 'move' call_tmp[676471](387745 call rank _mt[243] this[164410]))
    unknown call_tmp[676476] "expr temp" "maybe param" "maybe type" "temp"
    (676479 'move' call_tmp[676476](163320 call == call_tmp[676471] 1))
    unknown call_tmp[676481] "expr temp" "maybe param" "maybe type" "temp"
    (676484 'move' call_tmp[676481](163339 call _cond_test call_tmp[676476]))
    if call_tmp[676481]
    {
      unknown call_tmp[676488] "expr temp" "maybe param" "maybe type" "temp"
      (676491 'move' call_tmp[676488](163326 call ind[163313] 0))
      unknown call_tmp[676493] "expr temp" "maybe param" "maybe type" "temp"
      (676496 'move' call_tmp[676493](163328 call(387749 call (partial) add_help _mt[243] this[164410]) call_tmp[676488]))
      (521589 'move' ret[521584](521588 'deref' call_tmp[676493]))
      gotoReturn _end_dsiAdd[521582] _end_dsiAdd[521582]
    }
    {
      unknown call_tmp[676500] "expr temp" "maybe param" "maybe type" "temp"
      (676503 'move' call_tmp[676500](163335 call(387754 call (partial) add_help _mt[243] this[164410]) ind[163313]))
      (521594 'move' ret[521584](521593 'deref' call_tmp[676500]))
      gotoReturn _end_dsiAdd[521582] _end_dsiAdd[521582]
    }
    label _end_dsiAdd[521582]
    (521586 return ret[521584])
  }
  function DefaultSparseDom[164332](?).dsiRemove[163355](arg _mt[164416]:_MT[238], arg this[164414]:DefaultSparseDom[164332](?), arg ind[163352] :
  unknown call_tmp[676507] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521600] "RVV" "temp"
    unknown call_tmp[676521] "expr temp" "maybe param" "maybe type" "temp"
    (676524 'move' call_tmp[676521](387770 call rank _mt[243] this[164414]))
    unknown call_tmp[676526] "expr temp" "maybe param" "maybe type" "temp"
    (676529 'move' call_tmp[676526](163359 call == call_tmp[676521] 1))
    unknown call_tmp[676531] "expr temp" "maybe param" "maybe type" "temp"
    (676534 'move' call_tmp[676531](163378 call _cond_test call_tmp[676526]))
    if call_tmp[676531]
    {
      unknown call_tmp[676538] "expr temp" "maybe param" "maybe type" "temp"
      (676541 'move' call_tmp[676538](163365 call ind[163352] 0))
      unknown call_tmp[676543] "expr temp" "maybe param" "maybe type" "temp"
      (676546 'move' call_tmp[676543](163367 call(387774 call (partial) rem_help _mt[243] this[164414]) call_tmp[676538]))
      (521605 'move' ret[521600](521604 'deref' call_tmp[676543]))
      gotoReturn _end_dsiRemove[521598] _end_dsiRemove[521598]
    }
    {
      unknown call_tmp[676550] "expr temp" "maybe param" "maybe type" "temp"
      (676553 'move' call_tmp[676550](163374 call(387779 call (partial) rem_help _mt[243] this[164414]) ind[163352]))
      (521610 'move' ret[521600](521609 'deref' call_tmp[676550]))
      gotoReturn _end_dsiRemove[521598] _end_dsiRemove[521598]
    }
    label _end_dsiRemove[521598]
    (521602 return ret[521600])
  }
  function DefaultSparseDom[164332](?).bulkAdd_help[163400](arg _mt[164420]:_MT[238], arg this[164418]:DefaultSparseDom[164332](?), arg inds[163397]:_array[133588](?), arg dataSorted[163403] :
  0 =
  0, arg isUnique[163407] :
  0 =
  0, arg addOn[163411] :
  nilLocale[89939] =
  nilLocale[89939]) : _unknown[51] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[521616] "RVV" "temp"
    unknown call_tmp[676555] "expr temp" "maybe param" "maybe type" "temp"
    (676558 'move' call_tmp[676555](163420 call != addOn[163411] nilLocale[89939]))
    unknown call_tmp[676560] "expr temp" "maybe param" "maybe type" "temp"
    (676563 'move' call_tmp[676560](163458 call _cond_test call_tmp[676555]))
    if call_tmp[676560]
    {
      unknown call_tmp[676565] "expr temp" "maybe param" "maybe type" "temp"
      (676568 'move' call_tmp[676565](163424 '_wide_get_locale' this[164418]))
      unknown call_tmp[676570] "expr temp" "maybe param" "maybe type" "temp"
      (676573 'move' call_tmp[676570](163425 call chpl_localeID_to_locale call_tmp[676565]))
      unknown call_tmp[676575] "expr temp" "maybe param" "maybe type" "temp"
      (676578 'move' call_tmp[676575](163427 call != addOn[163411] call_tmp[676570]))
      unknown call_tmp[676580] "expr temp" "maybe param" "maybe type" "temp"
      (676583 'move' call_tmp[676580](163453 call _cond_test call_tmp[676575]))
      if call_tmp[676580]
      {
        (163450 call halt "Bulk index addition is only possible on the locale where the\n              sparse domain is created")
      }
    }
    (163473 call(387801 call (partial) bulkAdd_prepareInds _mt[243] this[164418]) inds[163397] dataSorted[163403] isUnique[163407] defaultComparator[267977])
    (482641 'end of statement')
    unknown call_tmp[676589] "expr temp" "maybe param" "maybe type" "temp"
    (676592 'move' call_tmp[676589](387809 call _nnz _mt[243] this[164418]))
    unknown call_tmp[676594] "expr temp" "maybe param" "maybe type" "temp"
    (676597 'move' call_tmp[676594](163477 call == call_tmp[676589] 0))
    unknown call_tmp[676599] "expr temp" "maybe param" "maybe type" "temp"
    (676602 'move' call_tmp[676599](163638 call _cond_test call_tmp[676594]))
    if call_tmp[676599]
    {
      const dupCount[163488] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[570237] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[570238] "maybe param" "temp"
      (570243 'move' tmp[570238](570241 call _cond_test isUnique[163407]))
      if tmp[570238]
      {
        (570248 'move' tmp[570237](570245 '_paramFoldLogical' tmp[570238] 0))
      }
      {
        unknown tmp[570250] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (570252 'move' tmp[570250](163484 call(387816 call (partial) _countDuplicates _mt[243] this[164418]) inds[163397]))
        (570257 'move' tmp[570237](570254 '_paramFoldLogical' tmp[570238] tmp[570250]))
      }
      (544186 'init var' dupCount[163488] tmp[570237])
      (163491 'end of statement')
      unknown call_tmp[676608] "expr temp" "maybe param" "maybe type" "temp"
      (676611 'move' call_tmp[676608](387822 call _nnz _mt[243] this[164418]))
      unknown call_tmp[676615] "expr temp" "maybe param" "maybe type" "temp"
      (676618 'move' call_tmp[676615](163495 call size _mt[243] inds[163397]))
      unknown call_tmp[676620] "expr temp" "maybe param" "maybe type" "temp"
      (676623 'move' call_tmp[676620](163499 call - call_tmp[676615] dupCount[163488]))
      (163501 call += call_tmp[676608] call_tmp[676620])
      (482642 'end of statement' dupCount[163488])
      (163506 call(387829 call (partial) _bulkGrow _mt[243] this[164418]))
      (482644 'end of statement')
      unknown call_tmp[676629] "expr temp" "maybe param" "maybe type" "temp"
      (676632 'move' call_tmp[676629](361206 call _indices _mt[243] this[164418]))
      unknown call_tmp[676636] "expr temp" "maybe param" "maybe type" "temp"
      (676639 'move' call_tmp[676636](163509 call _dom _mt[243] call_tmp[676629]))
      unknown call_tmp[676643] "maybe param" "maybe type" "temp"
      (676646 'move' call_tmp[676643](163512 call low _mt[243] call_tmp[676636]))
      unknown indIdx[163515] "dead at end of block" "insert auto destroy"
      (544188 'init var' indIdx[163515] call_tmp[676643])
      (163518 'end of statement')
      unknown call_tmp[676650] "expr temp" "maybe param" "maybe type" "temp"
      (676653 'move' call_tmp[676650](361211 call parentDom _mt[243] this[164418]))
      unknown call_tmp[676657] "expr temp" "maybe param" "maybe type" "temp"
      (676660 'move' call_tmp[676657](163520 call low _mt[243] call_tmp[676650]))
      unknown call_tmp[676662] "maybe param" "maybe type" "temp"
      (676665 'move' call_tmp[676662](163524 call - call_tmp[676657] 1))
      unknown prevIdx[163526] "dead at end of block" "insert auto destroy"
      (544190 'init var' prevIdx[163526] call_tmp[676662])
      (163529 'end of statement')
      unknown call_tmp[676667] "expr temp" "maybe param" "maybe type" "temp"
      (676670 'move' call_tmp[676667](163634 call _cond_test isUnique[163407]))
      if call_tmp[676667]
      {
        unknown call_tmp[676676] "expr temp" "maybe param" "maybe type" "temp"
        (676679 'move' call_tmp[676676](361216 call _indices _mt[243] this[164418]))
        unknown call_tmp[676683] "expr temp" "maybe param" "maybe type" "temp"
        (676686 'move' call_tmp[676683](163533 call _dom _mt[243] call_tmp[676676]))
        unknown call_tmp[676690] "expr temp" "maybe param" "maybe type" "temp"
        (676693 'move' call_tmp[676690](163536 call low _mt[243] call_tmp[676683]))
        unknown call_tmp[676695] "expr temp" "maybe param" "maybe type" "temp"
        (676698 'move' call_tmp[676695](163539 call chpl_build_low_bounded_range call_tmp[676690]))
        unknown call_tmp[676702] "expr temp" "maybe param" "maybe type" "temp"
        (676705 'move' call_tmp[676702](163542 call size _mt[243] inds[163397]))
        unknown call_tmp[676707] "expr temp" "maybe param" "maybe type" "temp"
        (676710 'move' call_tmp[676707](163545 call # call_tmp[676695] call_tmp[676702]))
        unknown call_tmp[676712] "expr temp" "maybe param" "maybe type" "temp"
        (676715 'move' call_tmp[676712](163548 call(387835 call (partial) _indices _mt[243] this[164418]) call_tmp[676707]))
        (163550 call = call_tmp[676712] inds[163397])
        (482645 'end of statement')
        unknown call_tmp[676719] "expr temp" "maybe param" "maybe type" "temp"
        (676722 'move' call_tmp[676719](163555 call size _mt[243] inds[163397]))
        (521621 'move' ret[521616](521620 'deref' call_tmp[676719]))
        gotoReturn _end_bulkAdd_help[521614] _end_bulkAdd_help[521614]
      }
      {
        {
          unknown _indexOfInterest[163594] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[163595] "expr temp" "temp"
          (163604 'move' _iterator[163595](163602 call _getIterator inds[163397]))
          Defer
          {
            {
              (163620 call _freeIterator _iterator[163595])
            }
          }
          { scopeless type
            (163609 'move' _indexOfInterest[163594](163606 call iteratorIndex _iterator[163595]))
          }
          ForLoop[163596]
          {
            unknown i[163613] "index var" "insert auto destroy"
            (482648 'end of statement')
            (163615 'move' i[163613] _indexOfInterest[163594])
            (482649 'end of statement' i[163613])
            {
              unknown call_tmp[676724] "expr temp" "maybe param" "maybe type" "temp"
              (676727 'move' call_tmp[676724](163564 call == i[163613] prevIdx[163526]))
              unknown call_tmp[676729] "expr temp" "maybe param" "maybe type" "temp"
              (676732 'move' call_tmp[676729](163574 call _cond_test call_tmp[676724]))
              if call_tmp[676729]
              {
                continue _continueLabel[163599] _continueLabel[163599]
              }
              {
                (163571 call = prevIdx[163526] i[163613])
                (482651 'end of statement' prevIdx[163526] i[163613])
              }
              unknown call_tmp[676736] "expr temp" "maybe param" "maybe type" "temp"
              (676739 'move' call_tmp[676736](163584 call(387846 call (partial) _indices _mt[243] this[164418]) indIdx[163515]))
              (163586 call = call_tmp[676736] i[163613])
              (482654 'end of statement' indIdx[163515] i[163613])
              (163591 call += indIdx[163515] 1)
              (482657 'end of statement' indIdx[163515])
            }
            label _continueLabel[163599]
            _indexOfInterest[163594]
            _iterator[163595]
          }
          label _breakLabel[163600]
        }
        unknown call_tmp[676741] "expr temp" "maybe param" "maybe type" "temp"
        (676744 'move' call_tmp[676741](163630 call - indIdx[163515] 1))
        (521626 'move' ret[521616](521625 'deref' call_tmp[676741]))
        gotoReturn _end_bulkAdd_help[521614] _end_bulkAdd_help[521614]
        (482659 'end of statement' indIdx[163515])
      }
    }
    unknown call_tmp[676748] "maybe param" "maybe type" "temp"
    (676751 'move' call_tmp[676748](163652 call(387856 call (partial) __getActualInsertPts _mt[243] this[164418]) this[164418] inds[163397] isUnique[163407]))
    const tmp[163653] "dead at end of block" "const" "insert auto destroy" "temp"
    (544192 'init var' tmp[163653] call_tmp[676748])
    (163660 call _check_tuple_var_decl tmp[163653] 2)
    (482661 'end of statement')
    unknown call_tmp[676753] "maybe param" "maybe type" "temp"
    (676756 'move' call_tmp[676753](163654 call tmp[163653] 0))
    const actualInsertPts[163642] "dead at end of block" "const" "insert auto destroy"
    (544194 'init var' actualInsertPts[163642] call_tmp[676753])
    unknown call_tmp[676758] "maybe param" "maybe type" "temp"
    (676761 'move' call_tmp[676758](163657 call tmp[163653] 1))
    const actualAddCnt[163644] "dead at end of block" "const" "insert auto destroy"
    (544196 'init var' actualAddCnt[163644] call_tmp[676758])
    (163665 'end of statement')
    unknown call_tmp[676765] "maybe param" "maybe type" "temp"
    (676768 'move' call_tmp[676765](387864 call _nnz _mt[243] this[164418]))
    const oldnnz[163667] "dead at end of block" "const" "insert auto destroy"
    (544198 'init var' oldnnz[163667] call_tmp[676765])
    (163670 'end of statement')
    unknown call_tmp[676772] "expr temp" "maybe param" "maybe type" "temp"
    (676775 'move' call_tmp[676772](387869 call _nnz _mt[243] this[164418]))
    (163673 call += call_tmp[676772] actualAddCnt[163644])
    (482662 'end of statement' actualAddCnt[163644])
    (163678 call(387874 call (partial) _bulkGrow _mt[243] this[164418]))
    (482664 'end of statement')
    unknown call_tmp[676781] "expr temp" "maybe param" "maybe type" "temp"
    (676784 'move' call_tmp[676781](462245 call _dom _mt[243] inds[163397]))
    unknown call_tmp[676788] "maybe param" "maybe type" "temp"
    (676791 'move' call_tmp[676788](163681 call high _mt[243] call_tmp[676781]))
    unknown newIndIdx[163684] "dead at end of block" "insert auto destroy"
    (544200 'init var' newIndIdx[163684] call_tmp[676788])
    (163687 'end of statement')
    unknown oldIndIdx[163689] "dead at end of block" "insert auto destroy"
    (544202 'init var' oldIndIdx[163689] oldnnz[163667])
    (163692 'end of statement')
    unknown call_tmp[676793] "maybe param" "maybe type" "temp"
    (676796 'move' call_tmp[676793](163696 call actualInsertPts[163642] newIndIdx[163684]))
    unknown newLoc[163697] "dead at end of block" "insert auto destroy"
    (544204 'init var' newLoc[163697] call_tmp[676793])
    (163700 'end of statement')
    {
      unknown tmp[163739] "temp"
      unknown call_tmp[676798] "expr temp" "maybe param" "maybe type" "temp"
      (676801 'move' call_tmp[676798](163765 call - 1))
      unknown call_tmp[676803] "expr temp" "maybe param" "maybe type" "temp"
      (676806 'move' call_tmp[676803](163762 call == newLoc[163697] call_tmp[676798]))
      (163767 'move' tmp[163739](163760 call _cond_test call_tmp[676803]))
      WhileDo[163744]
      {
        {
          (163709 call -= newIndIdx[163684] 1)
          (482668 'end of statement' newIndIdx[163684])
          unknown call_tmp[676810] "expr temp" "maybe param" "maybe type" "temp"
          (676813 'move' call_tmp[676810](462249 call _dom _mt[243] inds[163397]))
          unknown call_tmp[676817] "expr temp" "maybe param" "maybe type" "temp"
          (676820 'move' call_tmp[676817](163715 call low _mt[243] call_tmp[676810]))
          unknown call_tmp[676822] "expr temp" "maybe param" "maybe type" "temp"
          (676825 'move' call_tmp[676822](163719 call - call_tmp[676817] 1))
          unknown call_tmp[676827] "expr temp" "maybe param" "maybe type" "temp"
          (676830 'move' call_tmp[676827](163721 call == newIndIdx[163684] call_tmp[676822]))
          unknown call_tmp[676832] "expr temp" "maybe param" "maybe type" "temp"
          (676835 'move' call_tmp[676832](163726 call _cond_test call_tmp[676827]))
          if call_tmp[676832]
          {
            break _breakLabel[163743] _breakLabel[163743]
          }
          unknown call_tmp[676837] "expr temp" "maybe param" "maybe type" "temp"
          (676840 'move' call_tmp[676837](163735 call actualInsertPts[163642] newIndIdx[163684]))
          (163736 call = newLoc[163697] call_tmp[676837])
          (482670 'end of statement' newLoc[163697] actualInsertPts[163642] newIndIdx[163684])
        }
        label _continueLabel[163742]
        unknown call_tmp[676842] "expr temp" "maybe param" "maybe type" "temp"
        (676845 'move' call_tmp[676842](163753 call - 1))
        unknown call_tmp[676847] "expr temp" "maybe param" "maybe type" "temp"
        (676850 'move' call_tmp[676847](163750 call == newLoc[163697] call_tmp[676842]))
        (163755 'move' tmp[163739](163748 call _cond_test call_tmp[676847]))
        tmp[163739]
      }
      label _breakLabel[163743]
    }
    unknown arrShiftMap[163783] "dead at end of block" "insert auto destroy"
    unknown call_tmp[676852] "expr temp" "maybe param" "maybe type" "temp"
    (676855 'move' call_tmp[676852](163772 call chpl_build_bounded_range 1 oldnnz[163667]))
    unknown call_tmp[676857] "expr temp" "maybe param" "maybe type" "temp"
    (676860 'move' call_tmp[676857](163775 call chpl__buildDomainExpr call_tmp[676852]))
    unknown call_tmp[676862] "expr temp" "maybe param" "maybe type" "temp"
    (676865 'move' call_tmp[676862](163779 call chpl__ensureDomainExpr call_tmp[676857]))
    unknown call_tmp[676867] "expr temp" "maybe param" "maybe type" "temp"
    (676870 'move' call_tmp[676867](163781 call chpl__buildArrayRuntimeType call_tmp[676862] int(64)[13]))
    (544206 'default init var' arrShiftMap[163783] call_tmp[676867])
    (163786 'end of statement' oldnnz[163667] actualInsertPts[163642] newIndIdx[163684] oldnnz[163667])
    {
      unknown _indexOfInterest[163991] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163992] "expr temp" "temp"
      unknown call_tmp[676874] "expr temp" "maybe param" "maybe type" "temp"
      (676877 'move' call_tmp[676874](387933 call _nnz _mt[243] this[164418]))
      unknown call_tmp[676879] "expr temp" "maybe param" "maybe type" "temp"
      (676882 'move' call_tmp[676879](164008 call - 1))
      unknown call_tmp[676884] "expr temp" "maybe param" "maybe type" "temp"
      (676887 'move' call_tmp[676884](164012 call chpl_direct_range_iter 1 call_tmp[676874] call_tmp[676879]))
      (164001 'move' _iterator[163992](163999 call _getIterator call_tmp[676884]))
      Defer
      {
        {
          (164028 call _freeIterator _iterator[163992])
        }
      }
      { scopeless type
        (164017 'move' _indexOfInterest[163991](164014 call iteratorIndex _iterator[163992]))
      }
      ForLoop[163993]
      {
        unknown i[164021] "index var" "insert auto destroy"
        (482676 'end of statement')
        (164023 'move' i[164021] _indexOfInterest[163991])
        (482677 'end of statement' i[164021])
        {
          unknown tmp[428244] "maybe param" "temp"
          (428255 'move' tmp[428244](163799 call >= oldIndIdx[163689] 1))
          unknown call_tmp[676889] "expr temp" "maybe param" "maybe type" "temp"
          (676892 'move' call_tmp[676889](428257 call _cond_invalid tmp[428244]))
          if call_tmp[676889]
          {
            (428260 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[570264] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570265] "maybe param" "temp"
          unknown call_tmp[676894] "expr temp" "maybe param" "maybe type" "temp"
          (676897 'move' call_tmp[676894](428245 call isTrue tmp[428244]))
          (570270 'move' tmp[570265](570268 call _cond_test call_tmp[676894]))
          if tmp[570265]
          {
            unknown tmp[570272] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[676899] "expr temp" "maybe param" "maybe type" "temp"
            (676902 'move' call_tmp[676899](163803 call > i[164021] newLoc[163697]))
            (570274 'move' tmp[570272](428248 call isTrue call_tmp[676899]))
            (570279 'move' tmp[570264](570276 '_paramFoldLogical' tmp[570265] tmp[570272]))
          }
          {
            (570284 'move' tmp[570264](570281 '_paramFoldLogical' tmp[570265] 0))
          }
          unknown call_tmp[676904] "expr temp" "maybe param" "maybe type" "temp"
          (676907 'move' call_tmp[676904](163985 call _cond_test tmp[570264]))
          if call_tmp[676904]
          {
            unknown call_tmp[676911] "expr temp" "maybe param" "maybe type" "temp"
            (676914 'move' call_tmp[676911](163810 call(387893 call (partial) _indices _mt[243] this[164418]) i[164021]))
            unknown call_tmp[676918] "expr temp" "maybe param" "maybe type" "temp"
            (676921 'move' call_tmp[676918](163814 call(387899 call (partial) _indices _mt[243] this[164418]) oldIndIdx[163689]))
            (163815 call = call_tmp[676911] call_tmp[676918])
            (482680 'end of statement' i[164021] oldIndIdx[163689])
            unknown call_tmp[676923] "expr temp" "maybe param" "maybe type" "temp"
            (676926 'move' call_tmp[676923](163822 call arrShiftMap[163783] oldIndIdx[163689]))
            (163824 call = call_tmp[676923] i[164021])
            (482683 'end of statement' arrShiftMap[163783] oldIndIdx[163689] i[164021])
            (163829 call -= oldIndIdx[163689] 1)
            (482687 'end of statement' oldIndIdx[163689])
          }
          {
            unknown tmp[428223] "maybe param" "temp"
            unknown call_tmp[676930] "expr temp" "maybe param" "maybe type" "temp"
            (676933 'move' call_tmp[676930](462253 call _dom _mt[243] inds[163397]))
            unknown call_tmp[676937] "expr temp" "maybe param" "maybe type" "temp"
            (676940 'move' call_tmp[676937](163834 call low _mt[243] call_tmp[676930]))
            (428234 'move' tmp[428223](163837 call >= newIndIdx[163684] call_tmp[676937]))
            unknown call_tmp[676942] "expr temp" "maybe param" "maybe type" "temp"
            (676945 'move' call_tmp[676942](428236 call _cond_invalid tmp[428223]))
            if call_tmp[676942]
            {
              (428239 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[570291] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[570292] "maybe param" "temp"
            unknown call_tmp[676947] "expr temp" "maybe param" "maybe type" "temp"
            (676950 'move' call_tmp[676947](428224 call isTrue tmp[428223]))
            (570297 'move' tmp[570292](570295 call _cond_test call_tmp[676947]))
            if tmp[570292]
            {
              unknown tmp[570299] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[676952] "expr temp" "maybe param" "maybe type" "temp"
              (676955 'move' call_tmp[676952](163841 call == i[164021] newLoc[163697]))
              (570301 'move' tmp[570299](428227 call isTrue call_tmp[676952]))
              (570306 'move' tmp[570291](570303 '_paramFoldLogical' tmp[570292] tmp[570299]))
            }
            {
              (570311 'move' tmp[570291](570308 '_paramFoldLogical' tmp[570292] 0))
            }
            unknown call_tmp[676957] "expr temp" "maybe param" "maybe type" "temp"
            (676960 'move' call_tmp[676957](163980 call _cond_test tmp[570291]))
            if call_tmp[676957]
            {
              unknown call_tmp[676964] "expr temp" "maybe param" "maybe type" "temp"
              (676967 'move' call_tmp[676964](163848 call(387912 call (partial) _indices _mt[243] this[164418]) i[164021]))
              unknown call_tmp[676969] "expr temp" "maybe param" "maybe type" "temp"
              (676972 'move' call_tmp[676969](163852 call inds[163397] newIndIdx[163684]))
              (163853 call = call_tmp[676964] call_tmp[676969])
              (482690 'end of statement' i[164021] newIndIdx[163684])
              (163859 call -= newIndIdx[163684] 1)
              (482693 'end of statement' newIndIdx[163684])
              unknown call_tmp[676976] "expr temp" "maybe param" "maybe type" "temp"
              (676979 'move' call_tmp[676976](462257 call _dom _mt[243] inds[163397]))
              unknown call_tmp[676983] "expr temp" "maybe param" "maybe type" "temp"
              (676986 'move' call_tmp[676983](163864 call low _mt[243] call_tmp[676976]))
              unknown call_tmp[676988] "expr temp" "maybe param" "maybe type" "temp"
              (676991 'move' call_tmp[676988](163867 call >= newIndIdx[163684] call_tmp[676983]))
              unknown call_tmp[676993] "expr temp" "maybe param" "maybe type" "temp"
              (676996 'move' call_tmp[676993](163884 call _cond_test call_tmp[676988]))
              if call_tmp[676993]
              {
                unknown call_tmp[676998] "expr temp" "maybe param" "maybe type" "temp"
                (677001 'move' call_tmp[676998](163873 call actualInsertPts[163642] newIndIdx[163684]))
                (163874 call = newLoc[163697] call_tmp[676998])
                (482695 'end of statement' newLoc[163697] actualInsertPts[163642] newIndIdx[163684])
              }
              {
                unknown call_tmp[677003] "expr temp" "maybe param" "maybe type" "temp"
                (677006 'move' call_tmp[677003](163879 call - 2))
                (163881 call = newLoc[163697] call_tmp[677003])
                (482699 'end of statement' newLoc[163697])
              }
              {
                unknown tmp[163928] "temp"
                unknown call_tmp[677008] "expr temp" "maybe param" "maybe type" "temp"
                (677011 'move' call_tmp[677008](163954 call - 1))
                unknown call_tmp[677013] "expr temp" "maybe param" "maybe type" "temp"
                (677016 'move' call_tmp[677013](163951 call == newLoc[163697] call_tmp[677008]))
                (163956 'move' tmp[163928](163949 call _cond_test call_tmp[677013]))
                WhileDo[163933]
                {
                  {
                    (163898 call -= newIndIdx[163684] 1)
                    (482701 'end of statement' newIndIdx[163684])
                    unknown call_tmp[677020] "expr temp" "maybe param" "maybe type" "temp"
                    (677023 'move' call_tmp[677020](462261 call _dom _mt[243] inds[163397]))
                    unknown call_tmp[677027] "expr temp" "maybe param" "maybe type" "temp"
                    (677030 'move' call_tmp[677027](163904 call low _mt[243] call_tmp[677020]))
                    unknown call_tmp[677032] "expr temp" "maybe param" "maybe type" "temp"
                    (677035 'move' call_tmp[677032](163908 call - call_tmp[677027] 1))
                    unknown call_tmp[677037] "expr temp" "maybe param" "maybe type" "temp"
                    (677040 'move' call_tmp[677037](163910 call == newIndIdx[163684] call_tmp[677032]))
                    unknown call_tmp[677042] "expr temp" "maybe param" "maybe type" "temp"
                    (677045 'move' call_tmp[677042](163915 call _cond_test call_tmp[677037]))
                    if call_tmp[677042]
                    {
                      break _breakLabel[163932] _breakLabel[163932]
                    }
                    unknown call_tmp[677047] "expr temp" "maybe param" "maybe type" "temp"
                    (677050 'move' call_tmp[677047](163924 call actualInsertPts[163642] newIndIdx[163684]))
                    (163925 call = newLoc[163697] call_tmp[677047])
                    (482703 'end of statement' newLoc[163697] actualInsertPts[163642] newIndIdx[163684])
                  }
                  label _continueLabel[163931]
                  unknown call_tmp[677052] "expr temp" "maybe param" "maybe type" "temp"
                  (677055 'move' call_tmp[677052](163942 call - 1))
                  unknown call_tmp[677057] "expr temp" "maybe param" "maybe type" "temp"
                  (677060 'move' call_tmp[677057](163939 call == newLoc[163697] call_tmp[677052]))
                  (163944 'move' tmp[163928](163937 call _cond_test call_tmp[677057]))
                  tmp[163928]
                }
                label _breakLabel[163932]
              }
            }
            {
              (163978 call halt "Something went wrong")
            }
          }
        }
        label _continueLabel[163996]
        _indexOfInterest[163991]
        _iterator[163992]
      }
      label _breakLabel[163997]
    }
    {
      unknown _indexOfInterest[164048] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[164049] "expr temp" "temp"
      unknown call_tmp[677064] "expr temp" "maybe param" "maybe type" "temp"
      (677067 'move' call_tmp[677064](387938 call _arrs _mt[243] this[164418]))
      (164058 'move' _iterator[164049](164056 call _getIterator call_tmp[677064]))
      Defer
      {
        {
          (164074 call _freeIterator _iterator[164049])
        }
      }
      { scopeless type
        (164063 'move' _indexOfInterest[164048](164060 call iteratorIndex _iterator[164049]))
      }
      ForLoop[164050]
      {
        unknown a[164067] "index var" "insert auto destroy"
        (482709 'end of statement')
        (164069 'move' a[164067] _indexOfInterest[164048])
        (482710 'end of statement' a[164067])
        (164046 call(164040 call (partial) sparseBulkShiftArray _mt[243] a[164067]) arrShiftMap[163783] oldnnz[163667])
        (482712 'end of statement' a[164067] arrShiftMap[163783] oldnnz[163667])
        label _continueLabel[164053]
        _indexOfInterest[164048]
        _iterator[164049]
      }
      label _breakLabel[164054]
    }
    (521631 'move' ret[521616](521630 'deref' actualAddCnt[163644]))
    gotoReturn _end_bulkAdd_help[521614] _end_bulkAdd_help[521614]
    (482716 'end of statement' actualAddCnt[163644])
    label _end_bulkAdd_help[521614]
    (521618 return ret[521616])
    (355167 'used modules list'(163415 'import' Sort[267968]))
    (361200 'referenced modules list' Sort[267968])
  }
  where {
    unknown call_tmp[677073] "expr temp" "maybe param" "maybe type" "temp"
    (677076 'move' call_tmp[677073](387785 call rank _mt[243] this[164418]))
    unknown call_tmp[677080] "expr temp" "maybe param" "maybe type" "temp"
    (677083 'move' call_tmp[677080](387790 call idxType _mt[243] this[164418]))
    unknown call_tmp[677085] "expr temp" "maybe param" "maybe type" "temp"
    (677088 'move' call_tmp[677085](163393 call chpl__buildIndexType call_tmp[677073] call_tmp[677080]))
    unknown call_tmp[677092] "expr temp" "maybe param" "maybe type" "temp"
    (677095 'move' call_tmp[677092](462269 call eltType _mt[243] inds[163397]))
    unknown call_tmp[677097] "expr temp" "maybe param" "maybe type" "temp"
    (677100 'move' call_tmp[677097](462273 call == call_tmp[677085] call_tmp[677092]))
    (462267 call & 1 call_tmp[677097])
  }
  function DefaultSparseDom[164332](?).dsiMyDist[164088](arg _mt[164424]:_MT[238], arg this[164422]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521637] "RVV" "temp"
    unknown call_tmp[677104] "expr temp" "maybe param" "maybe type" "temp"
    (677107 'move' call_tmp[677104](387947 call dist _mt[243] this[164422]))
    (521643 'move' ret[521637](521642 'coerce' call_tmp[677104] unmanaged BaseDist[415468]))
    (521639 return ret[521637])
  }
  { scopeless type
    unmanaged BaseDist[415468]
  }
  function DefaultSparseDom[164332](?).dsiClear[164101](arg _mt[164428]:_MT[238], arg this[164426]:DefaultSparseDom[164332](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[677111] "expr temp" "maybe param" "maybe type" "temp"
    (677114 'move' call_tmp[677111](387952 call _nnz _mt[243] this[164426]))
    (164105 call = call_tmp[677111] 0)
    (521645 return _void[55])
  }
  function DefaultSparseDom[164332](?).dimIter[164115](arg _mt[164432]:_MT[238], arg this[164430]:DefaultSparseDom[164332](?), param arg d[164113]:_any[178](?), arg ind[164117]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521649] "RVV" "temp"
    unknown call_tmp[677118] "expr temp" "maybe param" "maybe type" "temp"
    (677121 'move' call_tmp[677118](387958 call rank _mt[243] this[164430]))
    unknown call_tmp[677123] "expr temp" "maybe param" "maybe type" "temp"
    (677126 'move' call_tmp[677123](164122 call - call_tmp[677118] 1))
    unknown call_tmp[677128] "expr temp" "maybe param" "maybe type" "temp"
    (677131 'move' call_tmp[677128](164124 call != d[164113] call_tmp[677123]))
    unknown call_tmp[677133] "expr temp" "maybe param" "maybe type" "temp"
    (677136 'move' call_tmp[677133](164148 call _cond_test call_tmp[677128]))
    if call_tmp[677133]
    {
      (164145 call compilerError "dimIter() not supported on sparse domains for dimensions other than the last")
    }
    (164172 call halt "dimIter() not yet implemented for sparse domains")
    (482721 'end of statement')
    unknown yret[521653] "YVV" "temp"
    unknown call_tmp[677140] "expr temp" "maybe param" "maybe type" "temp"
    (677143 'move' call_tmp[677140](164177 call(387963 call (partial) _indices _mt[243] this[164430]) 0))
    (521656 'move' yret[521653](521655 'deref' call_tmp[677140]))
    (521658 yield yret[521653])
    (521651 return ret[521649])
  }
  function DefaultSparseDom[164332](?).dsiAssignDomain[164188](arg _mt[164436]:_MT[238], arg this[164434]:DefaultSparseDom[164332](?), arg rhs[164185]:_domain[125902](?), arg lhsPrivate[164191]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[428265] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492457] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[677147] "expr temp" "maybe param" "maybe type" "temp"
      (677150 'move' call_tmp[677147](164196 call _instance _mt[243] rhs[164185]))
      (492461 'move' call_type_tmp[492457](164199 'typeof' call_tmp[677147]))
    }
    unknown call_tmp[677152] "expr temp" "maybe param" "maybe type" "temp"
    (677155 'move' call_tmp[677152](164201 call _to_borrowed call_type_tmp[492457]))
    unknown call_tmp[677157] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (677160 'move' call_tmp[677157](164203 'typeof' this[164434]))
    (428276 'move' tmp[428265](164204 call == call_tmp[677152] call_tmp[677157]))
    unknown call_tmp[677162] "expr temp" "maybe param" "maybe type" "temp"
    (677165 'move' call_tmp[677162](428278 call _cond_invalid tmp[428265]))
    if call_tmp[677162]
    {
      (428281 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570318] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570319] "maybe param" "temp"
    unknown call_tmp[677167] "expr temp" "maybe param" "maybe type" "temp"
    (677170 'move' call_tmp[677167](428266 call isTrue tmp[428265]))
    (570324 'move' tmp[570319](570322 call _cond_test call_tmp[677167]))
    if tmp[570319]
    {
      unknown tmp[570326] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[677174] "expr temp" "maybe param" "maybe type" "temp"
      (677177 'move' call_tmp[677174](164207 call dsiNumIndices _mt[243] this[164434]))
      unknown call_tmp[677179] "expr temp" "maybe param" "maybe type" "temp"
      (677182 'move' call_tmp[677179](164211 call == call_tmp[677174] 0))
      (570328 'move' tmp[570326](428269 call isTrue call_tmp[677179]))
      (570333 'move' tmp[570318](570330 '_paramFoldLogical' tmp[570319] tmp[570326]))
    }
    {
      (570338 'move' tmp[570318](570335 '_paramFoldLogical' tmp[570319] 0))
    }
    unknown call_tmp[677184] "expr temp" "maybe param" "maybe type" "temp"
    (677187 'move' call_tmp[677184](164260 call _cond_test tmp[570318]))
    if call_tmp[677184]
    {
      unknown call_tmp[677191] "expr temp" "maybe param" "maybe type" "temp"
      (677194 'move' call_tmp[677191](164218 call _nnz _mt[243] this[164434]))
      unknown call_tmp[677198] "expr temp" "maybe param" "maybe type" "temp"
      (677201 'move' call_tmp[677198](164222 call _nnz _mt[243] rhs[164185]))
      (164225 call = call_tmp[677191] call_tmp[677198])
      (482724 'end of statement')
      unknown call_tmp[677205] "expr temp" "maybe param" "maybe type" "temp"
      (677208 'move' call_tmp[677205](164230 call nnzDom _mt[243] this[164434]))
      unknown call_tmp[677212] "expr temp" "maybe param" "maybe type" "temp"
      (677215 'move' call_tmp[677212](164234 call nnzDom _mt[243] rhs[164185]))
      (164237 call = call_tmp[677205] call_tmp[677212])
      (482725 'end of statement')
      unknown call_tmp[677219] "expr temp" "maybe param" "maybe type" "temp"
      (677222 'move' call_tmp[677219](164243 call _indices _mt[243] this[164434]))
      unknown call_tmp[677226] "expr temp" "maybe param" "maybe type" "temp"
      (677229 'move' call_tmp[677226](164247 call _indices _mt[243] rhs[164185]))
      (164250 call = call_tmp[677219] call_tmp[677226])
    }
    {
      (164257 call chpl_assignDomainWithIndsIterSafeForRemoving this[164434] rhs[164185])
    }
    (521660 return _void[55])
  }
  function DefaultSparseDom[164332](?).dsiHasSingleLocalSubdomain[164269](arg _mt[164440]:_MT[238], arg this[164438]:DefaultSparseDom[164332](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521664] "RVV" "param" "temp"
    (521669 'move' ret[521664](521668 'deref' 1))
    (521666 return ret[521664])
  }
  function DefaultSparseDom[164332](?).dsiLocalSubdomain[164283](arg _mt[164444]:_MT[238], arg this[164442]:DefaultSparseDom[164332](?), arg loc[164280]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521673] "RVV" "temp"
    unknown call_tmp[677231] "expr temp" "maybe param" "maybe type" "temp"
    (677234 'move' call_tmp[677231](164286 '_wide_get_locale' this[164442]))
    unknown call_tmp[677236] "expr temp" "maybe param" "maybe type" "temp"
    (677239 'move' call_tmp[677236](164287 call chpl_localeID_to_locale call_tmp[677231]))
    unknown call_tmp[677241] "expr temp" "maybe param" "maybe type" "temp"
    (677244 'move' call_tmp[677241](164290 call == call_tmp[677236] loc[164280]))
    unknown call_tmp[677246] "expr temp" "maybe param" "maybe type" "temp"
    (677249 'move' call_tmp[677246](164324 call _cond_test call_tmp[677241]))
    if call_tmp[677246]
    {
      unknown call_tmp[677251] "expr temp" "maybe param" "maybe type" "temp"
      (677254 'move' call_tmp[677251](164296 call _to_unmanaged this[164442]))
      unknown call_tmp[677256] "expr temp" "maybe param" "maybe type" "temp"
      (677259 'move' call_tmp[677256](164298 call _getDomain call_tmp[677251]))
      (521678 'move' ret[521673](521677 'deref' call_tmp[677256]))
      gotoReturn _end_dsiLocalSubdomain[521671] _end_dsiLocalSubdomain[521671]
    }
    {
      unknown call_tmp[677263] "expr temp" "maybe param" "maybe type" "temp"
      (677266 'move' call_tmp[677263](387976 call rank _mt[243] this[164442]))
      unknown call_tmp[677270] "expr temp" "maybe param" "maybe type" "temp"
      (677273 'move' call_tmp[677270](387981 call idxType _mt[243] this[164442]))
      unknown call_tmp[677277] "expr temp" "maybe param" "maybe type" "temp"
      (677280 'move' call_tmp[677277](387986 call dist _mt[243] this[164442]))
      unknown call_tmp[677284] "expr temp" "maybe param" "maybe type" "temp"
      (677287 'move' call_tmp[677284](387991 call parentDom _mt[243] this[164442]))
      unknown call_tmp[677289] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (677292 'move' call_tmp[677289](747971 'new' DefaultSparseDom[378034](?) call_tmp[677263] call_tmp[677270] call_tmp[677277] call_tmp[677284](_chpl_manager = unmanaged[220](?))))
      const copy[164312] "dead at end of block" "const" "insert auto destroy"
      (544208 'init var' copy[164312] call_tmp[677289])
      (164315 'end of statement')
      unknown call_tmp[677294] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (677297 'move' call_tmp[677294](747972 'new' _domain[125902](?) copy[164312]))
      (521683 'move' ret[521673](521682 'deref' call_tmp[677294]))
      gotoReturn _end_dsiLocalSubdomain[521671] _end_dsiLocalSubdomain[521671]
      (482730 'end of statement' copy[164312])
    }
    label _end_dsiLocalSubdomain[521671]
    (521675 return ret[521673])
  }
  function DefaultSparseDom[164332](?).super[811271](arg _mt[811273]:_MT[238], arg this[811275]:DefaultSparseDom[164332](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811285] "RVV" "temp"
    unknown call_tmp[811292] "expr temp" "maybe param" "maybe type" "temp"
    (811295 'move' call_tmp[811292](811279 '.v' this[811275] c"super"))
    (811290 'move' ret[811285](811289 'deref' call_tmp[811292]))
    (811287 return ret[811285])
  }
  function DefaultSparseDom[164332](?).dist[811297](arg _mt[811299]:_MT[238], arg this[811301]:DefaultSparseDom[164332](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811311] "RVV" "temp"
    unknown call_tmp[811318] "expr temp" "maybe param" "maybe type" "temp"
    (811321 'move' call_tmp[811318](811305 '.' this[811301] c"dist"))
    (811316 'move' ret[811311](811315 'addr of' call_tmp[811318]))
    (811313 return ret[811311])
  }
  function DefaultSparseDom[164332](?)._nnz[811323](arg _mt[811325]:_MT[238], arg this[811327]:DefaultSparseDom[164332](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811337] "RVV" "temp"
    unknown call_tmp[811344] "expr temp" "maybe param" "maybe type" "temp"
    (811347 'move' call_tmp[811344](811331 '.' this[811327] c"_nnz"))
    (811342 'move' ret[811337](811341 'addr of' call_tmp[811344]))
    (811339 return ret[811337])
  }
  function DefaultSparseDom[164332](?)._indices[811349](arg _mt[811351]:_MT[238], arg this[811353]:DefaultSparseDom[164332](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811363] "RVV" "temp"
    unknown call_tmp[811370] "expr temp" "maybe param" "maybe type" "temp"
    (811373 'move' call_tmp[811370](811357 '.' this[811353] c"_indices"))
    (811368 'move' ret[811363](811367 'addr of' call_tmp[811370]))
    (811365 return ret[811363])
  }
  function DefaultSparseDom[164332](?).deinit[811375](arg _mt[811377]:_MT[238], arg this[811379]:DefaultSparseDom[164332](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (811387 return _void[55])
  }
  function DefaultSparseDom[164332](?).writeThis[811389](arg _mt[811393]:_MT[238], arg this[811391]:DefaultSparseDom[164332](?), arg f[811392]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (811398 call writeThisDefaultImpl f[811392] this[811391])
    (811403 return _void[55])
  }
  function DefaultSparseDom[164332](?).readThis[811405](arg _mt[811409]:_MT[238], arg this[811407]:DefaultSparseDom[164332](?), arg f[811408]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (811413 call readThisDefaultImpl f[811408] this[811407])
    (811419 return _void[55])
  }
  type DefaultSparseDom[164332](?) val super[355692]:BaseSparseDomImpl[147961](?) "delay instantiation" "super class" val dist[161574]:unmanaged DefaultDist[415444] unmanaged DefaultDist[415444] val _nnz[161579]:int(64)[13] 0 unknown _indices[161594] "local field"(161592 call chpl__buildArrayRuntimeType(161590 call chpl__ensureDomainExpr nnzDom[146922])(161588 call chpl__buildIndexType rank[148211] idxType[148215]))
  type DefaultSparseDom[378034](?)
  function DefaultSparseArr[165794](?).init[164454](arg _mt[165798]:_MT[238], arg this[165796]:DefaultSparseArr[165794](?), arg eltType[164452]:_any[178](?), param arg rank[164457]:int(64)[13], arg idxType[164460]:_any[178](?), arg dom[164462]:_any[178](?), param arg initElts[164465]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462276] "temporary of super field" "temp"
    (462278 'move' super_tmp[462276](462275 '.v' this[165796] c"super"))
    (164478 call(164469 call (partial) init _mt[243] super_tmp[462276]) eltType[164452] rank[164457] idxType[164460] dom[164462] initElts[164465])
    (482732 'end of statement')
    unknown tmp[462281] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492463] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[677301] "expr temp" "maybe param" "maybe type" "temp"
      (677304 'move' call_tmp[677301](462283 '.v' this[165796] c"super"))
      (492467 'move' call_type_tmp[492463](462286 'typeof' call_tmp[677301]))
    }
    (462287 'move' tmp[462281] call_type_tmp[492463])
    unknown call_tmp[677306] "maybe param" "maybe type" "temp"
    (677309 'move' call_tmp[677306](462292 'cast' tmp[462281] this[165796]))
    unknown chpl__thisAsParent[462289] "dead at end of block" "insert auto destroy" "temp"
    (544210 'init var' chpl__thisAsParent[462289] call_tmp[677306] tmp[462281])
    (462295 'setcid' chpl__thisAsParent[462289])
    (482733 'end of statement')
    (462297 'setcid' this[165796])
    (521687 return _void[55])
  }
  function DefaultSparseArr[165794](?).dsiAccess[164489](arg _mt[165802]:_MT[238], arg this[165800]:DefaultSparseArr[165794](?), arg ind[164486] :
  (388003 call idxType _mt[243] this[165800])) ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521691] "RVV" "temp"
    unknown call_tmp[677313] "expr temp" "maybe param" "maybe type" "temp"
    (677316 'move' call_tmp[677313](164597 call _cond_test 1))
    if call_tmp[677313]
    {
      unknown call_tmp[677320] "expr temp" "maybe param" "maybe type" "temp"
      (677323 'move' call_tmp[677320](361242 call dom _mt[243] this[165800]))
      unknown call_tmp[677327] "expr temp" "maybe param" "maybe type" "temp"
      (677330 'move' call_tmp[677327](164497 call parentDom _mt[243] call_tmp[677320]))
      unknown call_tmp[677334] "expr temp" "maybe param" "maybe type" "temp"
      (677337 'move' call_tmp[677334](164505 call(164500 call (partial) contains _mt[243] call_tmp[677327]) ind[164486]))
      unknown call_tmp[677339] "expr temp" "maybe param" "maybe type" "temp"
      (677342 'move' call_tmp[677339](164506 call ! call_tmp[677334]))
      unknown call_tmp[677344] "expr temp" "maybe param" "maybe type" "temp"
      (677347 'move' call_tmp[677344](164593 call _cond_test call_tmp[677339]))
      if call_tmp[677344]
      {
        unknown call_tmp[677349] "expr temp" "maybe param" "maybe type" "temp"
        (677352 'move' call_tmp[677349](164582 call _cond_test debugDefaultSparse[161565]))
        if call_tmp[677349]
        {
          unknown call_tmp[677354] "expr temp" "maybe param" "maybe type" "temp"
          (677357 'move' call_tmp[677354](361245 call here[90435]))
          unknown call_tmp[677361] "expr temp" "maybe param" "maybe type" "temp"
          (677364 'move' call_tmp[677361](164529 call id _mt[243] call_tmp[677354]))
          (164532 call writeln "On locale " call_tmp[677361])
          (482735 'end of statement')
          (164555 call writeln "In dsiAccess, got index " ind[164486])
          (482736 'end of statement')
          unknown call_tmp[677368] "expr temp" "maybe param" "maybe type" "temp"
          (677371 'move' call_tmp[677368](361249 call dom _mt[243] this[165800]))
          unknown call_tmp[677375] "expr temp" "maybe param" "maybe type" "temp"
          (677378 'move' call_tmp[677375](164577 call parentDom _mt[243] call_tmp[677368]))
          (164580 call writeln "dom.parentDom = " call_tmp[677375])
        }
        (164591 call halt "array index out of bounds: " ind[164486])
      }
    }
    unknown call_tmp[677382] "expr temp" "maybe param" "maybe type" "temp"
    (677385 'move' call_tmp[677382](361254 call dom _mt[243] this[165800]))
    unknown call_tmp[677389] "maybe param" "maybe type" "temp"
    (677392 'move' call_tmp[677389](164614 call(164609 call (partial) find _mt[243] call_tmp[677382]) ind[164486]))
    const tmp[164615] "dead at end of block" "const" "insert auto destroy" "temp"
    (544212 'init var' tmp[164615] call_tmp[677389])
    (164622 call _check_tuple_var_decl tmp[164615] 2)
    (482739 'end of statement')
    unknown call_tmp[677394] "maybe param" "maybe type" "temp"
    (677397 'move' call_tmp[677394](164616 call tmp[164615] 0))
    const found[164603] "dead at end of block" "const" "insert auto destroy"
    (544214 'init var' found[164603] call_tmp[677394])
    unknown call_tmp[677399] "maybe param" "maybe type" "temp"
    (677402 'move' call_tmp[677399](164619 call tmp[164615] 1))
    const loc[164605] "dead at end of block" "const" "insert auto destroy"
    (544216 'init var' loc[164605] call_tmp[677399])
    (164627 'end of statement')
    unknown call_tmp[677404] "expr temp" "maybe param" "maybe type" "temp"
    (677407 'move' call_tmp[677404](164657 call _cond_test found[164603]))
    if call_tmp[677404]
    {
      unknown call_tmp[677411] "expr temp" "maybe param" "maybe type" "temp"
      (677414 'move' call_tmp[677411](164632 call(388020 call (partial) data _mt[243] this[165800]) loc[164605]))
      (521696 'move' ret[521691](521695 'addr of' call_tmp[677411]))
      gotoReturn _end_dsiAccess[521689] _end_dsiAccess[521689]
      (482740 'end of statement' loc[164605])
    }
    {
      (164655 call halt "attempting to assign a 'zero' value in a sparse array: " ind[164486])
    }
    label _end_dsiAccess[521689]
    (521693 return ret[521691])
  }
  where {
    unknown call_tmp[677418] "expr temp" "maybe param" "maybe type" "temp"
    (677421 'move' call_tmp[677418](388008 call rank _mt[243] this[165800]))
    (164493 call == call_tmp[677418] 1)
  }
  function DefaultSparseArr[165794](?).dsiAccess[164672](arg _mt[165806]:_MT[238], arg this[165804]:DefaultSparseArr[165794](?), arg ind[164669] :
  (388027 call idxType _mt[243] this[165804])) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521702] "RVV" "temp"
    unknown call_tmp[677425] "expr temp" "maybe param" "maybe type" "temp"
    (677428 'move' call_tmp[677425](164702 call _cond_test 1))
    if call_tmp[677425]
    {
      unknown call_tmp[677432] "expr temp" "maybe param" "maybe type" "temp"
      (677435 'move' call_tmp[677432](361259 call dom _mt[243] this[165804]))
      unknown call_tmp[677439] "expr temp" "maybe param" "maybe type" "temp"
      (677442 'move' call_tmp[677439](164680 call parentDom _mt[243] call_tmp[677432]))
      unknown call_tmp[677446] "expr temp" "maybe param" "maybe type" "temp"
      (677449 'move' call_tmp[677446](164688 call(164683 call (partial) contains _mt[243] call_tmp[677439]) ind[164669]))
      unknown call_tmp[677451] "expr temp" "maybe param" "maybe type" "temp"
      (677454 'move' call_tmp[677451](164689 call ! call_tmp[677446]))
      unknown call_tmp[677456] "expr temp" "maybe param" "maybe type" "temp"
      (677459 'move' call_tmp[677456](164697 call _cond_test call_tmp[677451]))
      if call_tmp[677456]
      {
        (164695 call halt "array index out of bounds: " ind[164669])
      }
    }
    unknown call_tmp[677463] "expr temp" "maybe param" "maybe type" "temp"
    (677466 'move' call_tmp[677463](361264 call dom _mt[243] this[165804]))
    unknown call_tmp[677470] "maybe param" "maybe type" "temp"
    (677473 'move' call_tmp[677470](164719 call(164714 call (partial) find _mt[243] call_tmp[677463]) ind[164669]))
    const tmp[164720] "dead at end of block" "const" "insert auto destroy" "temp"
    (544218 'init var' tmp[164720] call_tmp[677470])
    (164727 call _check_tuple_var_decl tmp[164720] 2)
    (482744 'end of statement')
    unknown call_tmp[677475] "maybe param" "maybe type" "temp"
    (677478 'move' call_tmp[677475](164721 call tmp[164720] 0))
    const found[164708] "dead at end of block" "const" "insert auto destroy"
    (544220 'init var' found[164708] call_tmp[677475])
    unknown call_tmp[677480] "maybe param" "maybe type" "temp"
    (677483 'move' call_tmp[677480](164724 call tmp[164720] 1))
    const loc[164710] "dead at end of block" "const" "insert auto destroy"
    (544222 'init var' loc[164710] call_tmp[677480])
    (164732 'end of statement')
    unknown call_tmp[677485] "expr temp" "maybe param" "maybe type" "temp"
    (677488 'move' call_tmp[677485](164743 call _cond_test found[164708]))
    if call_tmp[677485]
    {
      unknown call_tmp[677492] "expr temp" "maybe param" "maybe type" "temp"
      (677495 'move' call_tmp[677492](164737 call(388042 call (partial) data _mt[243] this[165804]) loc[164710]))
      (521707 'move' ret[521702](521706 'addr of' call_tmp[677492]))
      gotoReturn _end_dsiAccess[521700] _end_dsiAccess[521700]
      (482745 'end of statement' loc[164710])
    }
    {
      unknown call_tmp[677499] "expr temp" "maybe param" "maybe type" "temp"
      (677502 'move' call_tmp[677499](388048 call irv _mt[243] this[165804]))
      (521712 'move' ret[521702](521711 'addr of' call_tmp[677499]))
      gotoReturn _end_dsiAccess[521700] _end_dsiAccess[521700]
    }
    label _end_dsiAccess[521700]
    (521704 return ret[521702])
  }
  where {
    unknown call_tmp[677506] "expr temp" "maybe param" "maybe type" "temp"
    (677509 'move' call_tmp[677506](388032 call rank _mt[243] this[165804]))
    (164676 call == call_tmp[677506] 1)
  }
  function DefaultSparseArr[165794](?).dsiAccess[164761](arg _mt[165810]:_MT[238], arg this[165808]:DefaultSparseArr[165794](?), arg ind[164758] :
  unknown call_tmp[677513] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521718] "RVV" "temp"
    unknown call_tmp[677525] "expr temp" "maybe param" "maybe type" "temp"
    (677528 'move' call_tmp[677525](164787 call _cond_test 1))
    if call_tmp[677525]
    {
      unknown call_tmp[677532] "expr temp" "maybe param" "maybe type" "temp"
      (677535 'move' call_tmp[677532](361269 call dom _mt[243] this[165808]))
      unknown call_tmp[677539] "expr temp" "maybe param" "maybe type" "temp"
      (677542 'move' call_tmp[677539](164765 call parentDom _mt[243] call_tmp[677532]))
      unknown call_tmp[677546] "expr temp" "maybe param" "maybe type" "temp"
      (677549 'move' call_tmp[677546](164773 call(164768 call (partial) contains _mt[243] call_tmp[677539]) ind[164758]))
      unknown call_tmp[677551] "expr temp" "maybe param" "maybe type" "temp"
      (677554 'move' call_tmp[677551](164774 call ! call_tmp[677546]))
      unknown call_tmp[677556] "expr temp" "maybe param" "maybe type" "temp"
      (677559 'move' call_tmp[677556](164782 call _cond_test call_tmp[677551]))
      if call_tmp[677556]
      {
        (164780 call halt "array index out of bounds: " ind[164758])
      }
    }
    unknown call_tmp[677563] "expr temp" "maybe param" "maybe type" "temp"
    (677566 'move' call_tmp[677563](361274 call dom _mt[243] this[165808]))
    unknown call_tmp[677570] "maybe param" "maybe type" "temp"
    (677573 'move' call_tmp[677570](164804 call(164799 call (partial) find _mt[243] call_tmp[677563]) ind[164758]))
    const tmp[164805] "dead at end of block" "const" "insert auto destroy" "temp"
    (544224 'init var' tmp[164805] call_tmp[677570])
    (164812 call _check_tuple_var_decl tmp[164805] 2)
    (482749 'end of statement')
    unknown call_tmp[677575] "maybe param" "maybe type" "temp"
    (677578 'move' call_tmp[677575](164806 call tmp[164805] 0))
    const found[164793] "dead at end of block" "const" "insert auto destroy"
    (544226 'init var' found[164793] call_tmp[677575])
    unknown call_tmp[677580] "maybe param" "maybe type" "temp"
    (677583 'move' call_tmp[677580](164809 call tmp[164805] 1))
    const loc[164795] "dead at end of block" "const" "insert auto destroy"
    (544228 'init var' loc[164795] call_tmp[677580])
    (164817 'end of statement')
    unknown call_tmp[677585] "expr temp" "maybe param" "maybe type" "temp"
    (677588 'move' call_tmp[677585](164831 call _cond_test found[164793]))
    if call_tmp[677585]
    {
      unknown call_tmp[677592] "expr temp" "maybe param" "maybe type" "temp"
      (677595 'move' call_tmp[677592](164822 call(388068 call (partial) data _mt[243] this[165808]) loc[164795]))
      (521723 'move' ret[521718](521722 'addr of' call_tmp[677592]))
      gotoReturn _end_dsiAccess[521716] _end_dsiAccess[521716]
      (482750 'end of statement' loc[164795])
    }
    {
      (164829 call halt "attempting to assign a 'zero' value in a sparse array: " ind[164758])
    }
    label _end_dsiAccess[521716]
    (521720 return ret[521718])
  }
  function DefaultSparseArr[165794](?).dsiAccess[164848](arg _mt[165814]:_MT[238], arg this[165812]:DefaultSparseArr[165794](?), arg ind[164845] :
  unknown call_tmp[677599] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521729] "RVV" "temp"
    unknown call_tmp[677611] "expr temp" "maybe param" "maybe type" "temp"
    (677614 'move' call_tmp[677611](164878 call _cond_test 1))
    if call_tmp[677611]
    {
      unknown call_tmp[677618] "expr temp" "maybe param" "maybe type" "temp"
      (677621 'move' call_tmp[677618](361279 call dom _mt[243] this[165812]))
      unknown call_tmp[677625] "expr temp" "maybe param" "maybe type" "temp"
      (677628 'move' call_tmp[677625](164856 call parentDom _mt[243] call_tmp[677618]))
      unknown call_tmp[677632] "expr temp" "maybe param" "maybe type" "temp"
      (677635 'move' call_tmp[677632](164864 call(164859 call (partial) contains _mt[243] call_tmp[677625]) ind[164845]))
      unknown call_tmp[677637] "expr temp" "maybe param" "maybe type" "temp"
      (677640 'move' call_tmp[677637](164865 call ! call_tmp[677632]))
      unknown call_tmp[677642] "expr temp" "maybe param" "maybe type" "temp"
      (677645 'move' call_tmp[677642](164873 call _cond_test call_tmp[677637]))
      if call_tmp[677642]
      {
        (164871 call halt "array index out of bounds: " ind[164845])
      }
    }
    unknown call_tmp[677649] "expr temp" "maybe param" "maybe type" "temp"
    (677652 'move' call_tmp[677649](361284 call dom _mt[243] this[165812]))
    unknown call_tmp[677656] "maybe param" "maybe type" "temp"
    (677659 'move' call_tmp[677656](164895 call(164890 call (partial) find _mt[243] call_tmp[677649]) ind[164845]))
    const tmp[164896] "dead at end of block" "const" "insert auto destroy" "temp"
    (544230 'init var' tmp[164896] call_tmp[677656])
    (164903 call _check_tuple_var_decl tmp[164896] 2)
    (482754 'end of statement')
    unknown call_tmp[677661] "maybe param" "maybe type" "temp"
    (677664 'move' call_tmp[677661](164897 call tmp[164896] 0))
    const found[164884] "dead at end of block" "const" "insert auto destroy"
    (544232 'init var' found[164884] call_tmp[677661])
    unknown call_tmp[677666] "maybe param" "maybe type" "temp"
    (677669 'move' call_tmp[677666](164900 call tmp[164896] 1))
    const loc[164886] "dead at end of block" "const" "insert auto destroy"
    (544234 'init var' loc[164886] call_tmp[677666])
    (164908 'end of statement')
    unknown call_tmp[677671] "expr temp" "maybe param" "maybe type" "temp"
    (677674 'move' call_tmp[677671](164919 call _cond_test found[164884]))
    if call_tmp[677671]
    {
      unknown call_tmp[677678] "expr temp" "maybe param" "maybe type" "temp"
      (677681 'move' call_tmp[677678](164913 call(388095 call (partial) data _mt[243] this[165812]) loc[164886]))
      (521734 'move' ret[521729](521733 'deref' call_tmp[677678]))
      gotoReturn _end_dsiAccess[521727] _end_dsiAccess[521727]
      (482755 'end of statement' loc[164886])
    }
    {
      unknown call_tmp[677685] "expr temp" "maybe param" "maybe type" "temp"
      (677688 'move' call_tmp[677685](388101 call irv _mt[243] this[165812]))
      (521739 'move' ret[521729](521738 'deref' call_tmp[677685]))
      gotoReturn _end_dsiAccess[521727] _end_dsiAccess[521727]
    }
    label _end_dsiAccess[521727]
    (521731 return ret[521729])
  }
  where {
    unknown call_tmp[677692] "expr temp" "maybe param" "maybe type" "temp"
    (677695 'move' call_tmp[677692](388085 call eltType _mt[243] this[165812]))
    (164853 call shouldReturnRvalueByValue call_tmp[677692])
  }
  function DefaultSparseArr[165794](?).dsiAccess[164937](arg _mt[165818]:_MT[238], arg this[165816]:DefaultSparseArr[165794](?), arg ind[164934] :
  unknown call_tmp[677699] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521745] "RVV" "temp"
    unknown call_tmp[677711] "expr temp" "maybe param" "maybe type" "temp"
    (677714 'move' call_tmp[677711](164967 call _cond_test 1))
    if call_tmp[677711]
    {
      unknown call_tmp[677718] "expr temp" "maybe param" "maybe type" "temp"
      (677721 'move' call_tmp[677718](361289 call dom _mt[243] this[165816]))
      unknown call_tmp[677725] "expr temp" "maybe param" "maybe type" "temp"
      (677728 'move' call_tmp[677725](164945 call parentDom _mt[243] call_tmp[677718]))
      unknown call_tmp[677732] "expr temp" "maybe param" "maybe type" "temp"
      (677735 'move' call_tmp[677732](164953 call(164948 call (partial) contains _mt[243] call_tmp[677725]) ind[164934]))
      unknown call_tmp[677737] "expr temp" "maybe param" "maybe type" "temp"
      (677740 'move' call_tmp[677737](164954 call ! call_tmp[677732]))
      unknown call_tmp[677742] "expr temp" "maybe param" "maybe type" "temp"
      (677745 'move' call_tmp[677742](164962 call _cond_test call_tmp[677737]))
      if call_tmp[677742]
      {
        (164960 call halt "array index out of bounds: " ind[164934])
      }
    }
    unknown call_tmp[677749] "expr temp" "maybe param" "maybe type" "temp"
    (677752 'move' call_tmp[677749](361294 call dom _mt[243] this[165816]))
    unknown call_tmp[677756] "maybe param" "maybe type" "temp"
    (677759 'move' call_tmp[677756](164984 call(164979 call (partial) find _mt[243] call_tmp[677749]) ind[164934]))
    const tmp[164985] "dead at end of block" "const" "insert auto destroy" "temp"
    (544236 'init var' tmp[164985] call_tmp[677756])
    (164992 call _check_tuple_var_decl tmp[164985] 2)
    (482759 'end of statement')
    unknown call_tmp[677761] "maybe param" "maybe type" "temp"
    (677764 'move' call_tmp[677761](164986 call tmp[164985] 0))
    const found[164973] "dead at end of block" "const" "insert auto destroy"
    (544238 'init var' found[164973] call_tmp[677761])
    unknown call_tmp[677766] "maybe param" "maybe type" "temp"
    (677769 'move' call_tmp[677766](164989 call tmp[164985] 1))
    const loc[164975] "dead at end of block" "const" "insert auto destroy"
    (544240 'init var' loc[164975] call_tmp[677766])
    (164997 'end of statement')
    unknown call_tmp[677771] "expr temp" "maybe param" "maybe type" "temp"
    (677774 'move' call_tmp[677771](165008 call _cond_test found[164973]))
    if call_tmp[677771]
    {
      unknown call_tmp[677778] "expr temp" "maybe param" "maybe type" "temp"
      (677781 'move' call_tmp[677778](165002 call(388126 call (partial) data _mt[243] this[165816]) loc[164975]))
      (521750 'move' ret[521745](521749 'addr of' call_tmp[677778]))
      gotoReturn _end_dsiAccess[521743] _end_dsiAccess[521743]
      (482760 'end of statement' loc[164975])
    }
    {
      unknown call_tmp[677785] "expr temp" "maybe param" "maybe type" "temp"
      (677788 'move' call_tmp[677785](388132 call irv _mt[243] this[165816]))
      (521755 'move' ret[521745](521754 'addr of' call_tmp[677785]))
      gotoReturn _end_dsiAccess[521743] _end_dsiAccess[521743]
    }
    label _end_dsiAccess[521743]
    (521747 return ret[521745])
  }
  where {
    unknown call_tmp[677792] "expr temp" "maybe param" "maybe type" "temp"
    (677795 'move' call_tmp[677792](388116 call eltType _mt[243] this[165816]))
    (164942 call shouldReturnRvalueByConstRef call_tmp[677792])
  }
  function DefaultSparseArr[165794](?).these[165019](arg _mt[165822]:_MT[238], arg this[165820]:DefaultSparseArr[165794](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521761] "RVV" "temp"
    {
      unknown _indexOfInterest[165035] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165036] "expr temp" "temp"
      unknown call_tmp[677799] "expr temp" "maybe param" "maybe type" "temp"
      (677802 'move' call_tmp[677799](361299 call dom _mt[243] this[165820]))
      unknown call_tmp[677806] "expr temp" "maybe param" "maybe type" "temp"
      (677809 'move' call_tmp[677806](165050 call _nnz _mt[243] call_tmp[677799]))
      unknown call_tmp[677811] "expr temp" "maybe param" "maybe type" "temp"
      (677814 'move' call_tmp[677811](165053 call chpl_direct_range_iter 1 call_tmp[677806] 1))
      (165045 'move' _iterator[165036](165043 call _getIterator call_tmp[677811]))
      Defer
      {
        {
          (165069 call _freeIterator _iterator[165036])
        }
      }
      { scopeless type
        (165058 'move' _indexOfInterest[165035](165055 call iteratorIndex _iterator[165036]))
      }
      ForLoop[165037]
      {
        unknown i[165062] "index var" "insert auto destroy"
        (482764 'end of statement')
        (165064 'move' i[165062] _indexOfInterest[165035])
        (482765 'end of statement' i[165062])
        unknown yret[521765] "YVV" "temp"
        unknown call_tmp[677818] "expr temp" "maybe param" "maybe type" "temp"
        (677821 'move' call_tmp[677818](165032 call(388137 call (partial) data _mt[243] this[165820]) i[165062]))
        (521768 'move' yret[521765](521767 'addr of' call_tmp[677818]))
        (521770 yield yret[521765])
        (482767 'end of statement' i[165062])
        label _continueLabel[165040]
        _indexOfInterest[165035]
        _iterator[165036]
      }
      label _breakLabel[165041]
    }
    (521763 return ret[521761])
  }
  function DefaultSparseArr[165794](?).these[165085](arg _mt[165826]:_MT[238], arg this[165824]:DefaultSparseArr[165794](?), param arg tag[165082]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521774] "RVV" "temp"
    unknown call_tmp[677825] "expr temp" "maybe param" "maybe type" "temp"
    (677828 'move' call_tmp[677825](361305 call dom _mt[243] this[165824]))
    unknown call_tmp[677832] "maybe param" "maybe type" "temp"
    (677835 'move' call_tmp[677832](165095 call _nnz _mt[243] call_tmp[677825]))
    const numElems[165098] "dead at end of block" "const" "insert auto destroy"
    (544242 'init var' numElems[165098] call_tmp[677832])
    (165101 'end of statement')
    unknown call_tmp[677837] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (677840 'move' call_tmp[677837](165108 'typeof' numElems[165098]))
    unknown call_tmp[677842] "expr temp" "maybe param" "maybe type" "temp"
    (677845 'move' call_tmp[677842](165106 call _computeNumChunks numElems[165098]))
    unknown call_tmp[677847] "maybe param" "maybe type" "temp"
    (677850 'move' call_tmp[677847](165109 call _cast call_tmp[677837] call_tmp[677842]))
    const numChunks[165111] "dead at end of block" "const" "insert auto destroy"
    (544244 'init var' numChunks[165111] call_tmp[677847])
    (165114 'end of statement' numElems[165098] numElems[165098])
    unknown call_tmp[677852] "expr temp" "maybe param" "maybe type" "temp"
    (677855 'move' call_tmp[677852](165142 call _cond_test debugDefaultSparse[161565]))
    if call_tmp[677852]
    {
      (165139 call writeln "DefaultSparseArr standalone: " numChunks[165111] " chunks, " numElems[165098] " elems")
      (482771 'end of statement' numChunks[165111] numElems[165098])
    }
    unknown call_tmp[677857] "expr temp" "maybe param" "maybe type" "temp"
    (677860 'move' call_tmp[677857](165148 call <= numChunks[165111] 1))
    unknown call_tmp[677862] "expr temp" "maybe param" "maybe type" "temp"
    (677865 'move' call_tmp[677862](165452 call _cond_test call_tmp[677857]))
    if call_tmp[677862]
    {
      {
        unknown _indexOfInterest[165162] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[165163] "expr temp" "temp"
        unknown call_tmp[677867] "expr temp" "maybe param" "maybe type" "temp"
        (677870 'move' call_tmp[677867](165177 call chpl_direct_range_iter 1 numElems[165098] 1))
        (165172 'move' _iterator[165163](165170 call _getIterator call_tmp[677867]))
        Defer
        {
          {
            (165193 call _freeIterator _iterator[165163])
          }
        }
        { scopeless type
          (165182 'move' _indexOfInterest[165162](165179 call iteratorIndex _iterator[165163]))
        }
        ForLoop[165164]
        {
          unknown i[165186] "index var" "insert auto destroy"
          (482775 'end of statement')
          (165188 'move' i[165186] _indexOfInterest[165162])
          (482776 'end of statement' i[165186])
          {
            unknown yret[521778] "YVV" "temp"
            unknown call_tmp[677874] "expr temp" "maybe param" "maybe type" "temp"
            (677877 'move' call_tmp[677874](165158 call(388151 call (partial) data _mt[243] this[165824]) i[165186]))
            (521781 'move' yret[521778](521780 'addr of' call_tmp[677874]))
            (521783 yield yret[521778])
            (482778 'end of statement' i[165186])
          }
          label _continueLabel[165167]
          _indexOfInterest[165162]
          _iterator[165163]
        }
        label _breakLabel[165168]
      }
    }
    {
      {
        unknown tmpIter[165255] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[677879] "expr temp" "maybe param" "maybe type" "temp"
        (677882 'move' call_tmp[677879](165208 call chpl_build_bounded_range 1 numElems[165098]))
        (165258 'move' tmpIter[165255](165212 call chunks module=[255] RangeChunk[266458] call_tmp[677879] numChunks[165111]))
        unknown isRngDomArr[165432] "maybe param" "temp"
        unknown tmp[428286] "maybe param" "temp"
        (428297 'move' tmp[428286](165434 call isBoundedRange tmpIter[165255]))
        unknown call_tmp[677884] "expr temp" "maybe param" "maybe type" "temp"
        (677887 'move' call_tmp[677884](428299 call _cond_invalid tmp[428286]))
        if call_tmp[677884]
        {
          (428302 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570372] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570373] "maybe param" "temp"
        unknown call_tmp[677889] "expr temp" "maybe param" "maybe type" "temp"
        (677892 'move' call_tmp[677889](428287 call isTrue tmp[428286]))
        (570378 'move' tmp[570373](570376 call _cond_test call_tmp[677889]))
        if tmp[570373]
        {
          (570383 'move' tmp[570372](570380 '_paramFoldLogical' tmp[570373] 1))
        }
        {
          unknown tmp[428307] "maybe param" "temp"
          (428318 'move' tmp[428307](165437 call isDomain tmpIter[165255]))
          unknown call_tmp[677894] "expr temp" "maybe param" "maybe type" "temp"
          (677897 'move' call_tmp[677894](428320 call _cond_invalid tmp[428307]))
          if call_tmp[677894]
          {
            (428323 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[570345] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570346] "maybe param" "temp"
          unknown call_tmp[677899] "expr temp" "maybe param" "maybe type" "temp"
          (677902 'move' call_tmp[677899](428308 call isTrue tmp[428307]))
          (570351 'move' tmp[570346](570349 call _cond_test call_tmp[677899]))
          if tmp[570346]
          {
            (570356 'move' tmp[570345](570353 '_paramFoldLogical' tmp[570346] 1))
          }
          {
            unknown tmp[570358] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[677904] "expr temp" "maybe param" "maybe type" "temp"
            (677907 'move' call_tmp[677904](165440 call isArray tmpIter[165255]))
            (570360 'move' tmp[570358](428312 call isTrue call_tmp[677904]))
            (570365 'move' tmp[570345](570362 '_paramFoldLogical' tmp[570346] tmp[570358]))
          }
          unknown tmp[570385] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (570387 'move' tmp[570385](428291 call isTrue tmp[570345]))
          (570392 'move' tmp[570372](570389 '_paramFoldLogical' tmp[570373] tmp[570385]))
        }
        (165447 'move' isRngDomArr[165432] tmp[570372])
        if isRngDomArr[165432]
        {
          const _coforallCount[165299] "const" "end count" "temp"
          (165368 'move' _coforallCount[165299](165365 call _endCountAlloc 1))
          unknown numTasks[165300] "temp"
          (165352 'move' numTasks[165300](165348 call size _mt[243] tmpIter[165255]))
          (165343 call _upEndCount _coforallCount[165299] 1 numTasks[165300])
          (482781 'end of statement')
          (165340 call chpl_resetTaskSpawn numTasks[165300])
          (482782 'end of statement')
          unknown _indexOfInterest[165307] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165308] "expr temp" "temp"
          (165317 'move' _iterator[165308](165315 call _getIterator tmpIter[165255]))
          Defer
          {
            {
              (165333 call _freeIterator _iterator[165308])
            }
          }
          { scopeless type
            (165322 'move' _indexOfInterest[165307](165319 call iteratorIndex _iterator[165308]))
          }
          ForLoop[165309]
          {
            unknown chunk[165326] "coforall index var" "index var" "insert auto destroy"
            (482784 'end of statement')
            (165328 'move' chunk[165326] _indexOfInterest[165307])
            (482785 'end of statement' chunk[165326])
            (935326 call coforall_fn[935324])
            function coforall_fn[935324]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[165261] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165263] "expr temp" "temp"
                (165265 'move' _iterator[165263](165268 call _getIterator chunk[165326]))
                Defer
                {
                  {
                    (165272 call _freeIterator _iterator[165263])
                  }
                }
                { scopeless type
                  (165276 'move' _indexOfInterest[165261](165279 call iteratorIndex _iterator[165263]))
                }
                ForLoop[165281]
                {
                  unknown i[165284] "index var" "insert auto destroy"
                  (482788 'end of statement')
                  (165286 'move' i[165284] _indexOfInterest[165261])
                  (482789 'end of statement' i[165284])
                  unknown yret[521785] "YVV" "temp"
                  unknown call_tmp[677913] "expr temp" "maybe param" "maybe type" "temp"
                  (677916 'move' call_tmp[677913](165292 call(388168 call (partial) data _mt[243] this[165824]) i[165284]))
                  (521788 'move' yret[521785](521787 'addr of' call_tmp[677913]))
                  (521790 yield yret[521785])
                  (482791 'end of statement' i[165284])
                  label _continueLabel[165294]
                  _indexOfInterest[165261]
                  _iterator[165263]
                }
                label _breakLabel[165296]
              }
              (165302 call _downEndCount _coforallCount[165299] nil[44])
              (935329 return _void[55])
            }
            {
            }
            label _continueLabel[165312]
            _indexOfInterest[165307]
            _iterator[165308]
          }
          label _breakLabel[165313]
          Defer
          {
            {
              (165355 call _endCountFree _coforallCount[165299])
            }
          }
          (165360 call _waitEndCount _coforallCount[165299] 1 numTasks[165300])
        }
        {
          const _coforallCount[165372] "const" "end count" "temp"
          (165429 'move' _coforallCount[165372](165426 call _endCountAlloc 1))
          unknown _indexOfInterest[165380] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165381] "expr temp" "temp"
          (165390 'move' _iterator[165381](165388 call _getIterator tmpIter[165255]))
          Defer
          {
            {
              (165406 call _freeIterator _iterator[165381])
            }
          }
          { scopeless type
            (165395 'move' _indexOfInterest[165380](165392 call iteratorIndex _iterator[165381]))
          }
          ForLoop[165382]
          {
            unknown chunk[165399] "coforall index var" "index var" "insert auto destroy"
            (482797 'end of statement')
            (165401 'move' chunk[165399] _indexOfInterest[165380])
            (482798 'end of statement' chunk[165399])
            (165413 call _upEndCount _coforallCount[165372] 1)
            (482800 'end of statement')
            (935333 call coforall_fn[935331])
            function coforall_fn[935331]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[165221] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165222] "expr temp" "temp"
                (165231 'move' _iterator[165222](165229 call _getIterator chunk[165399]))
                Defer
                {
                  {
                    (165247 call _freeIterator _iterator[165222])
                  }
                }
                { scopeless type
                  (165236 'move' _indexOfInterest[165221](165233 call iteratorIndex _iterator[165222]))
                }
                ForLoop[165223]
                {
                  unknown i[165240] "index var" "insert auto destroy"
                  (482802 'end of statement')
                  (165242 'move' i[165240] _indexOfInterest[165221])
                  (482803 'end of statement' i[165240])
                  unknown yret[521792] "YVV" "temp"
                  unknown call_tmp[677920] "expr temp" "maybe param" "maybe type" "temp"
                  (677923 'move' call_tmp[677920](165218 call(388161 call (partial) data _mt[243] this[165824]) i[165240]))
                  (521795 'move' yret[521792](521794 'addr of' call_tmp[677920]))
                  (521797 yield yret[521792])
                  (482805 'end of statement' i[165240])
                  label _continueLabel[165226]
                  _indexOfInterest[165221]
                  _iterator[165222]
                }
                label _breakLabel[165227]
              }
              (165375 call _downEndCount _coforallCount[165372] nil[44])
              (935336 return _void[55])
            }
            {
            }
            label _continueLabel[165385]
            _indexOfInterest[165380]
            _iterator[165381]
          }
          label _breakLabel[165386]
          Defer
          {
            {
              (165417 call _endCountFree _coforallCount[165372])
            }
          }
          (165422 call _waitEndCount _coforallCount[165372] 1)
        }
        (361309 'referenced modules list' RangeChunk[266458])
      }
    }
    (521776 return ret[521774])
  }
  where {
    (165092 call == tag[165082] standalone[451])
  }
  function DefaultSparseArr[165794](?).these[165465](arg _mt[165830]:_MT[238], arg this[165828]:DefaultSparseArr[165794](?), param arg tag[165462]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521801] "RVV" "temp"
    {
      unknown _indexOfInterest[165485] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165486] "expr temp" "temp"
      unknown call_tmp[677927] "expr temp" "maybe param" "maybe type" "temp"
      (677930 'move' call_tmp[677927](361317 call dom _mt[243] this[165828]))
      unknown call_tmp[677934] "expr temp" "maybe param" "maybe type" "temp"
      (677937 'move' call_tmp[677934](165481 call(165476 call (partial) these _mt[243] call_tmp[677927]) tag[165462]))
      (165495 'move' _iterator[165486](165493 call _getIterator call_tmp[677934]))
      Defer
      {
        {
          (165512 call _freeIterator _iterator[165486])
        }
      }
      { scopeless type
        (165501 'move' _indexOfInterest[165485](165498 call iteratorIndex _iterator[165486]))
      }
      ForLoop[165487]
      {
        unknown followThis[165505] "index var" "insert auto destroy"
        (482811 'end of statement')
        (165507 'move' followThis[165505] _indexOfInterest[165485])
        (482812 'end of statement' followThis[165505])
        unknown yret[521805] "YVV" "temp"
        (521808 'move' yret[521805](521807 'deref' followThis[165505]))
        (521810 yield yret[521805])
        (482814 'end of statement' followThis[165505])
        label _continueLabel[165490]
        _indexOfInterest[165485]
        _iterator[165486]
      }
      label _breakLabel[165491]
    }
    (521803 return ret[521801])
  }
  where {
    (165472 call == tag[165462] leader[447])
  }
  function DefaultSparseArr[165794](?).these[165529](arg _mt[165834]:_MT[238], arg this[165832]:DefaultSparseArr[165794](?), param arg tag[165526]:iterKind[453], arg followThis[165537]:_tuple[56199](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521814] "RVV" "temp"
    unknown tmp[165555] "dead at end of block" "insert auto destroy" "temp"
    (544246 'init var' tmp[165555] followThis[165537])
    (165565 call _check_tuple_var_decl tmp[165555] 3)
    (482816 'end of statement')
    unknown call_tmp[677939] "maybe param" "maybe type" "temp"
    (677942 'move' call_tmp[677939](165556 call tmp[165555] 0))
    unknown followThisDom[165547] "dead at end of block" "insert auto destroy"
    (544248 'init var' followThisDom[165547] call_tmp[677939])
    unknown call_tmp[677944] "maybe param" "maybe type" "temp"
    (677947 'move' call_tmp[677944](165559 call tmp[165555] 1))
    unknown startIx[165549] "dead at end of block" "insert auto destroy"
    (544250 'init var' startIx[165549] call_tmp[677944])
    unknown call_tmp[677949] "maybe param" "maybe type" "temp"
    (677952 'move' call_tmp[677949](165562 call tmp[165555] 2))
    unknown endIx[165551] "dead at end of block" "insert auto destroy"
    (544252 'init var' endIx[165551] call_tmp[677949])
    (165570 'end of statement')
    unknown call_tmp[677956] "expr temp" "maybe param" "maybe type" "temp"
    (677959 'move' call_tmp[677956](165574 call dom _mt[243] this[165832]))
    unknown call_tmp[677961] "expr temp" "maybe param" "maybe type" "temp"
    (677964 'move' call_tmp[677961](165577 call != followThisDom[165547] call_tmp[677956]))
    unknown call_tmp[677966] "expr temp" "maybe param" "maybe type" "temp"
    (677969 'move' call_tmp[677966](165600 call _cond_test call_tmp[677961]))
    if call_tmp[677966]
    {
      (165598 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays")
    }
    unknown call_tmp[677971] "expr temp" "maybe param" "maybe type" "temp"
    (677974 'move' call_tmp[677971](165630 call _cond_test debugDefaultSparse[161565]))
    if call_tmp[677971]
    {
      (165628 call writeln "DefaultSparseArr follower: " startIx[165549] ".." endIx[165551])
      (482818 'end of statement' startIx[165549] endIx[165551])
    }
    {
      unknown _indexOfInterest[165646] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165647] "expr temp" "temp"
      unknown call_tmp[677976] "expr temp" "maybe param" "maybe type" "temp"
      (677979 'move' call_tmp[677976](165661 call chpl_direct_range_iter startIx[165549] endIx[165551] 1))
      (165656 'move' _iterator[165647](165654 call _getIterator call_tmp[677976]))
      Defer
      {
        {
          (165677 call _freeIterator _iterator[165647])
        }
      }
      { scopeless type
        (165666 'move' _indexOfInterest[165646](165663 call iteratorIndex _iterator[165647]))
      }
      ForLoop[165648]
      {
        unknown i[165670] "index var" "insert auto destroy"
        (482822 'end of statement')
        (165672 'move' i[165670] _indexOfInterest[165646])
        (482823 'end of statement' i[165670])
        unknown yret[521818] "YVV" "temp"
        unknown call_tmp[677983] "expr temp" "maybe param" "maybe type" "temp"
        (677986 'move' call_tmp[677983](165643 call(388185 call (partial) data _mt[243] this[165832]) i[165670]))
        (521821 'move' yret[521818](521820 'addr of' call_tmp[677983]))
        (521823 yield yret[521818])
        (482825 'end of statement' i[165670])
        label _continueLabel[165651]
        _indexOfInterest[165646]
        _iterator[165647]
      }
      label _breakLabel[165652]
    }
    (521816 return ret[521814])
  }
  where {
    unknown call_tmp[677988] "expr temp" "maybe param" "maybe type" "temp"
    (677991 'move' call_tmp[677988](165545 call == tag[165526] follower[449]))
    unknown call_tmp[677993] "expr temp" "maybe param" "maybe type" "temp"
    (677996 'move' call_tmp[677993](462303 'query' followThis[165537] c"size"))
    unknown call_tmp[677998] "expr temp" "maybe param" "maybe type" "temp"
    (678001 'move' call_tmp[677998](462304 call == 3 call_tmp[677993]))
    (462306 call & call_tmp[677988] call_tmp[677998])
  }
  function DefaultSparseArr[165794](?).these[165693](arg _mt[165838]:_MT[238], arg this[165836]:DefaultSparseArr[165794](?), param arg tag[165690]:iterKind[453], arg followThis[165695]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521827] "RVV" "temp"
    (165707 call compilerError "Sparse iterators can't yet be zippered with others")
    (482827 'end of statement')
    unknown yret[521831] "YVV" "temp"
    (521834 'move' yret[521831](521833 'deref' 0))
    (521836 yield yret[521831])
    (521829 return ret[521827])
  }
  where {
    (165702 call == tag[165690] follower[449])
  }
  function DefaultSparseArr[165794](?).dsiTargetLocales[165718](arg _mt[165842]:_MT[238], arg this[165840]:DefaultSparseArr[165794](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (165739 call compilerError "targetLocales is unsupported by sparse domains")
    (521838 return _void[55])
  }
  function DefaultSparseArr[165794](?).dsiHasSingleLocalSubdomain[165746](arg _mt[165846]:_MT[238], arg this[165844]:DefaultSparseArr[165794](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521842] "RVV" "param" "temp"
    (521847 'move' ret[521842](521846 'deref' 1))
    (521844 return ret[521842])
  }
  function DefaultSparseArr[165794](?).dsiLocalSubdomain[165760](arg _mt[165850]:_MT[238], arg this[165848]:DefaultSparseArr[165794](?), arg loc[165757]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521851] "RVV" "temp"
    unknown call_tmp[678003] "expr temp" "maybe param" "maybe type" "temp"
    (678006 'move' call_tmp[678003](165763 '_wide_get_locale' this[165848]))
    unknown call_tmp[678008] "expr temp" "maybe param" "maybe type" "temp"
    (678011 'move' call_tmp[678008](165764 call chpl_localeID_to_locale call_tmp[678003]))
    unknown call_tmp[678013] "expr temp" "maybe param" "maybe type" "temp"
    (678016 'move' call_tmp[678013](165767 call == call_tmp[678008] loc[165757]))
    unknown call_tmp[678018] "expr temp" "maybe param" "maybe type" "temp"
    (678021 'move' call_tmp[678018](165786 call _cond_test call_tmp[678013]))
    if call_tmp[678018]
    {
      unknown call_tmp[678025] "expr temp" "maybe param" "maybe type" "temp"
      (678028 'move' call_tmp[678025](388197 call dom _mt[243] this[165848]))
      unknown call_tmp[678030] "expr temp" "maybe param" "maybe type" "temp"
      (678033 'move' call_tmp[678030](165772 call _getDomain call_tmp[678025]))
      (521856 'move' ret[521851](521855 'deref' call_tmp[678030]))
      gotoReturn _end_dsiLocalSubdomain[521849] _end_dsiLocalSubdomain[521849]
    }
    {
      unknown call_tmp[678037] "expr temp" "maybe param" "maybe type" "temp"
      (678040 'move' call_tmp[678037](361325 call dom _mt[243] this[165848]))
      unknown call_tmp[678044] "expr temp" "maybe param" "maybe type" "temp"
      (678047 'move' call_tmp[678044](165782 call(165777 call (partial) dsiLocalSubdomain _mt[243] call_tmp[678037]) loc[165757]))
      (521861 'move' ret[521851](521860 'deref' call_tmp[678044]))
      gotoReturn _end_dsiLocalSubdomain[521849] _end_dsiLocalSubdomain[521849]
    }
    label _end_dsiLocalSubdomain[521849]
    (521853 return ret[521851])
  }
  function DefaultSparseArr[165794](?).super[811421](arg _mt[811423]:_MT[238], arg this[811425]:DefaultSparseArr[165794](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811435] "RVV" "temp"
    unknown call_tmp[811442] "expr temp" "maybe param" "maybe type" "temp"
    (811445 'move' call_tmp[811442](811429 '.v' this[811425] c"super"))
    (811440 'move' ret[811435](811439 'deref' call_tmp[811442]))
    (811437 return ret[811435])
  }
  function DefaultSparseArr[165794](?).deinit[811447](arg _mt[811449]:_MT[238], arg this[811451]:DefaultSparseArr[165794](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (811459 return _void[55])
  }
  type DefaultSparseArr[165794](?) val super[355694]:BaseSparseArrImpl[150527](?) "delay instantiation" "super class"
  type DefaultSparseArr[387426](?)
  function DefaultSparseDom[164332](?).dsiSerialWrite[165858](arg _mt[165867]:_MT[238], arg this[165864]:DefaultSparseDom[164332](?) :
  DefaultSparseDom[164332](?), arg f[165856]:_any[178](?), arg printBrackets[165861] :
  1 =
  1) : _unknown[51] throws "method" "no return value for void"
  {
    unknown call_tmp[678051] "expr temp" "maybe param" "maybe type" "temp"
    (678054 'move' call_tmp[678051](388203 call rank _mt[243] this[165864]))
    unknown call_tmp[678056] "expr temp" "maybe param" "maybe type" "temp"
    (678059 'move' call_tmp[678056](165871 call == call_tmp[678051] 1))
    unknown call_tmp[678061] "expr temp" "maybe param" "maybe type" "temp"
    (678064 'move' call_tmp[678061](166136 call _cond_test call_tmp[678056]))
    if call_tmp[678061]
    {
      unknown call_tmp[678066] "expr temp" "maybe param" "maybe type" "temp"
      (678069 'move' call_tmp[678066](165879 call _cond_test printBrackets[165861]))
      if call_tmp[678066]
      {
        (165876 call <~> f[165856] "{")
      }
      unknown call_tmp[678073] "expr temp" "maybe param" "maybe type" "temp"
      (678076 'move' call_tmp[678073](388210 call _nnz _mt[243] this[165864]))
      unknown call_tmp[678078] "expr temp" "maybe param" "maybe type" "temp"
      (678081 'move' call_tmp[678078](165887 call >= call_tmp[678073] 1))
      unknown call_tmp[678083] "expr temp" "maybe param" "maybe type" "temp"
      (678086 'move' call_tmp[678083](165953 call _cond_test call_tmp[678078]))
      if call_tmp[678083]
      {
        unknown call_tmp[678090] "expr temp" "maybe param" "maybe type" "temp"
        (678093 'move' call_tmp[678090](165893 call(388216 call (partial) _indices _mt[243] this[165864]) 1))
        (165894 call <~> f[165856] call_tmp[678090])
        (482834 'end of statement')
        {
          unknown _indexOfInterest[165915] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165916] "expr temp" "temp"
          unknown call_tmp[678097] "expr temp" "maybe param" "maybe type" "temp"
          (678100 'move' call_tmp[678097](388228 call _nnz _mt[243] this[165864]))
          unknown call_tmp[678102] "expr temp" "maybe param" "maybe type" "temp"
          (678105 'move' call_tmp[678102](165930 call chpl_direct_range_iter 2 call_tmp[678097] 1))
          (165925 'move' _iterator[165916](165923 call _getIterator call_tmp[678102]))
          Defer
          {
            {
              (165946 call _freeIterator _iterator[165916])
            }
          }
          { scopeless type
            (165935 'move' _indexOfInterest[165915](165932 call iteratorIndex _iterator[165916]))
          }
          ForLoop[165917]
          {
            unknown i[165939] "index var" "insert auto destroy"
            (482836 'end of statement')
            (165941 'move' i[165939] _indexOfInterest[165915])
            (482837 'end of statement' i[165939])
            {
              unknown call_tmp[678107] "expr temp" "maybe param" "maybe type" "temp"
              (678110 'move' call_tmp[678107](165905 call <~> f[165856] " "))
              unknown call_tmp[678114] "expr temp" "maybe param" "maybe type" "temp"
              (678117 'move' call_tmp[678114](165910 call(388222 call (partial) _indices _mt[243] this[165864]) i[165939]))
              (165911 call <~> call_tmp[678107] call_tmp[678114])
              (482839 'end of statement' i[165939])
            }
            label _continueLabel[165920]
            _indexOfInterest[165915]
            _iterator[165916]
          }
          label _breakLabel[165921]
        }
      }
      unknown call_tmp[678119] "expr temp" "maybe param" "maybe type" "temp"
      (678122 'move' call_tmp[678119](165963 call _cond_test printBrackets[165861]))
      if call_tmp[678119]
      {
        (165960 call <~> f[165856] "}")
      }
    }
    {
      unknown call_tmp[678124] "expr temp" "maybe param" "maybe type" "temp"
      (678127 'move' call_tmp[678124](165990 call _cond_test printBrackets[165861]))
      if call_tmp[678124]
      {
        (165987 call <~> f[165856] "{\n")
      }
      unknown call_tmp[678131] "expr temp" "maybe param" "maybe type" "temp"
      (678134 'move' call_tmp[678131](388237 call _nnz _mt[243] this[165864]))
      unknown call_tmp[678136] "expr temp" "maybe param" "maybe type" "temp"
      (678139 'move' call_tmp[678136](165998 call >= call_tmp[678131] 1))
      unknown call_tmp[678141] "expr temp" "maybe param" "maybe type" "temp"
      (678144 'move' call_tmp[678141](166105 call _cond_test call_tmp[678136]))
      if call_tmp[678141]
      {
        unknown call_tmp[678148] "maybe param" "maybe type" "temp"
        (678151 'move' call_tmp[678148](166003 call(388242 call (partial) _indices _mt[243] this[165864]) 1))
        unknown prevInd[166004] "dead at end of block" "insert auto destroy"
        (544254 'init var' prevInd[166004] call_tmp[678148])
        (166007 'end of statement')
        unknown call_tmp[678153] "expr temp" "maybe param" "maybe type" "temp"
        (678156 'move' call_tmp[678153](166011 call <~> f[165856] " "))
        (166014 call <~> call_tmp[678153] prevInd[166004])
        (482843 'end of statement' prevInd[166004])
        {
          unknown _indexOfInterest[166062] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166063] "expr temp" "temp"
          unknown call_tmp[678160] "expr temp" "maybe param" "maybe type" "temp"
          (678163 'move' call_tmp[678160](388266 call _nnz _mt[243] this[165864]))
          unknown call_tmp[678165] "expr temp" "maybe param" "maybe type" "temp"
          (678168 'move' call_tmp[678165](166077 call chpl_direct_range_iter 2 call_tmp[678160] 1))
          (166072 'move' _iterator[166063](166070 call _getIterator call_tmp[678165]))
          Defer
          {
            {
              (166093 call _freeIterator _iterator[166063])
            }
          }
          { scopeless type
            (166082 'move' _indexOfInterest[166062](166079 call iteratorIndex _iterator[166063]))
          }
          ForLoop[166064]
          {
            unknown i[166086] "index var" "insert auto destroy"
            (482846 'end of statement')
            (166088 'move' i[166086] _indexOfInterest[166062])
            (482847 'end of statement' i[166086])
            {
              unknown call_tmp[678170] "expr temp" "maybe param" "maybe type" "temp"
              (678173 'move' call_tmp[678170](166025 call prevInd[166004] 0))
              unknown call_tmp[678177] "expr temp" "maybe param" "maybe type" "temp"
              (678180 'move' call_tmp[678177](166029 call(388250 call (partial) _indices _mt[243] this[165864]) i[166086]))
              unknown call_tmp[678182] "expr temp" "maybe param" "maybe type" "temp"
              (678185 'move' call_tmp[678182](166032 call call_tmp[678177] 0))
              unknown call_tmp[678187] "expr temp" "maybe param" "maybe type" "temp"
              (678190 'move' call_tmp[678187](166033 call != call_tmp[678170] call_tmp[678182]))
              unknown call_tmp[678192] "expr temp" "maybe param" "maybe type" "temp"
              (678195 'move' call_tmp[678192](166041 call _cond_test call_tmp[678187]))
              if call_tmp[678192]
              {
                (166037 call <~> f[165856] "\n")
              }
              unknown call_tmp[678199] "expr temp" "maybe param" "maybe type" "temp"
              (678202 'move' call_tmp[678199](166050 call(388258 call (partial) _indices _mt[243] this[165864]) i[166086]))
              (166051 call = prevInd[166004] call_tmp[678199])
              (482850 'end of statement' prevInd[166004] i[166086])
              unknown call_tmp[678204] "expr temp" "maybe param" "maybe type" "temp"
              (678207 'move' call_tmp[678204](166056 call <~> f[165856] " "))
              (166059 call <~> call_tmp[678204] prevInd[166004])
              (482853 'end of statement' prevInd[166004])
            }
            label _continueLabel[166067]
            _indexOfInterest[166062]
            _iterator[166063]
          }
          label _breakLabel[166068]
        }
        (166102 call <~> f[165856] "\n")
      }
      unknown call_tmp[678209] "expr temp" "maybe param" "maybe type" "temp"
      (678212 'move' call_tmp[678209](166131 call _cond_test printBrackets[165861]))
      if call_tmp[678209]
      {
        (166128 call <~> f[165856] "}\n")
      }
    }
    (521865 return _void[55])
  }
  function DefaultSparseArr[165794](?).dsiSerialWrite[166148](arg _mt[166153]:_MT[238], arg this[166150]:DefaultSparseArr[165794](?) :
  DefaultSparseArr[165794](?), arg f[166146]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown call_tmp[678216] "expr temp" "maybe param" "maybe type" "temp"
    (678219 'move' call_tmp[678216](388274 call rank _mt[243] this[166150]))
    unknown call_tmp[678221] "expr temp" "maybe param" "maybe type" "temp"
    (678224 'move' call_tmp[678221](166157 call == call_tmp[678216] 1))
    unknown call_tmp[678226] "expr temp" "maybe param" "maybe type" "temp"
    (678229 'move' call_tmp[678226](166379 call _cond_test call_tmp[678221]))
    if call_tmp[678226]
    {
      unknown call_tmp[678233] "expr temp" "maybe param" "maybe type" "temp"
      (678236 'move' call_tmp[678233](361330 call dom _mt[243] this[166150]))
      unknown call_tmp[678240] "expr temp" "maybe param" "maybe type" "temp"
      (678243 'move' call_tmp[678240](166160 call _nnz _mt[243] call_tmp[678233]))
      unknown call_tmp[678245] "expr temp" "maybe param" "maybe type" "temp"
      (678248 'move' call_tmp[678245](166164 call >= call_tmp[678240] 1))
      unknown call_tmp[678250] "expr temp" "maybe param" "maybe type" "temp"
      (678253 'move' call_tmp[678250](166236 call _cond_test call_tmp[678245]))
      if call_tmp[678250]
      {
        unknown call_tmp[678257] "expr temp" "maybe param" "maybe type" "temp"
        (678260 'move' call_tmp[678257](166170 call(388280 call (partial) data _mt[243] this[166150]) 1))
        (166171 call <~> f[166146] call_tmp[678257])
        (482857 'end of statement')
        {
          unknown _indexOfInterest[166195] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166196] "expr temp" "temp"
          unknown call_tmp[678264] "expr temp" "maybe param" "maybe type" "temp"
          (678267 'move' call_tmp[678264](361335 call dom _mt[243] this[166150]))
          unknown call_tmp[678271] "expr temp" "maybe param" "maybe type" "temp"
          (678274 'move' call_tmp[678271](166210 call _nnz _mt[243] call_tmp[678264]))
          unknown call_tmp[678276] "expr temp" "maybe param" "maybe type" "temp"
          (678279 'move' call_tmp[678276](166213 call chpl_direct_range_iter 2 call_tmp[678271] 1))
          (166205 'move' _iterator[166196](166203 call _getIterator call_tmp[678276]))
          Defer
          {
            {
              (166229 call _freeIterator _iterator[166196])
            }
          }
          { scopeless type
            (166218 'move' _indexOfInterest[166195](166215 call iteratorIndex _iterator[166196]))
          }
          ForLoop[166197]
          {
            unknown i[166222] "index var" "insert auto destroy"
            (482859 'end of statement')
            (166224 'move' i[166222] _indexOfInterest[166195])
            (482860 'end of statement' i[166222])
            {
              unknown call_tmp[678281] "expr temp" "maybe param" "maybe type" "temp"
              (678284 'move' call_tmp[678281](166185 call <~> f[166146] " "))
              unknown call_tmp[678288] "expr temp" "maybe param" "maybe type" "temp"
              (678291 'move' call_tmp[678288](166190 call(388286 call (partial) data _mt[243] this[166150]) i[166222]))
              (166191 call <~> call_tmp[678281] call_tmp[678288])
              (482862 'end of statement' i[166222])
            }
            label _continueLabel[166200]
            _indexOfInterest[166195]
            _iterator[166196]
          }
          label _breakLabel[166201]
        }
      }
    }
    {
      unknown call_tmp[678295] "expr temp" "maybe param" "maybe type" "temp"
      (678298 'move' call_tmp[678295](361340 call dom _mt[243] this[166150]))
      unknown call_tmp[678302] "expr temp" "maybe param" "maybe type" "temp"
      (678305 'move' call_tmp[678302](166242 call _nnz _mt[243] call_tmp[678295]))
      unknown call_tmp[678307] "expr temp" "maybe param" "maybe type" "temp"
      (678310 'move' call_tmp[678307](166246 call >= call_tmp[678302] 1))
      unknown call_tmp[678312] "expr temp" "maybe param" "maybe type" "temp"
      (678315 'move' call_tmp[678312](166374 call _cond_test call_tmp[678307]))
      if call_tmp[678312]
      {
        unknown call_tmp[678319] "expr temp" "maybe param" "maybe type" "temp"
        (678322 'move' call_tmp[678319](361345 call dom _mt[243] this[166150]))
        unknown call_tmp[678326] "maybe param" "maybe type" "temp"
        (678329 'move' call_tmp[678326](166254 call(166249 call (partial) _indices _mt[243] call_tmp[678319]) 1))
        unknown prevInd[166255] "dead at end of block" "insert auto destroy"
        (544256 'init var' prevInd[166255] call_tmp[678326])
        (166258 'end of statement')
        unknown call_tmp[678333] "expr temp" "maybe param" "maybe type" "temp"
        (678336 'move' call_tmp[678333](166264 call(388293 call (partial) data _mt[243] this[166150]) 1))
        (166265 call <~> f[166146] call_tmp[678333])
        (482864 'end of statement')
        {
          unknown _indexOfInterest[166328] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166329] "expr temp" "temp"
          unknown call_tmp[678340] "expr temp" "maybe param" "maybe type" "temp"
          (678343 'move' call_tmp[678340](361360 call dom _mt[243] this[166150]))
          unknown call_tmp[678347] "expr temp" "maybe param" "maybe type" "temp"
          (678350 'move' call_tmp[678347](166343 call _nnz _mt[243] call_tmp[678340]))
          unknown call_tmp[678352] "expr temp" "maybe param" "maybe type" "temp"
          (678355 'move' call_tmp[678352](166346 call chpl_direct_range_iter 2 call_tmp[678347] 1))
          (166338 'move' _iterator[166329](166336 call _getIterator call_tmp[678352]))
          Defer
          {
            {
              (166362 call _freeIterator _iterator[166329])
            }
          }
          { scopeless type
            (166351 'move' _indexOfInterest[166328](166348 call iteratorIndex _iterator[166329]))
          }
          ForLoop[166330]
          {
            unknown i[166355] "index var" "insert auto destroy"
            (482866 'end of statement')
            (166357 'move' i[166355] _indexOfInterest[166328])
            (482867 'end of statement' i[166355])
            {
              unknown call_tmp[678357] "expr temp" "maybe param" "maybe type" "temp"
              (678360 'move' call_tmp[678357](166279 call prevInd[166255] 0))
              unknown call_tmp[678364] "expr temp" "maybe param" "maybe type" "temp"
              (678367 'move' call_tmp[678364](361350 call dom _mt[243] this[166150]))
              unknown call_tmp[678371] "expr temp" "maybe param" "maybe type" "temp"
              (678374 'move' call_tmp[678371](166286 call(166281 call (partial) _indices _mt[243] call_tmp[678364]) i[166355]))
              unknown call_tmp[678376] "expr temp" "maybe param" "maybe type" "temp"
              (678379 'move' call_tmp[678376](166289 call call_tmp[678371] 0))
              unknown call_tmp[678381] "expr temp" "maybe param" "maybe type" "temp"
              (678384 'move' call_tmp[678381](166290 call != call_tmp[678357] call_tmp[678376]))
              unknown call_tmp[678386] "expr temp" "maybe param" "maybe type" "temp"
              (678389 'move' call_tmp[678386](166304 call _cond_test call_tmp[678381]))
              if call_tmp[678386]
              {
                (166294 call <~> f[166146] "\n")
              }
              {
                (166300 call <~> f[166146] " ")
              }
              unknown call_tmp[678393] "expr temp" "maybe param" "maybe type" "temp"
              (678396 'move' call_tmp[678393](361355 call dom _mt[243] this[166150]))
              unknown call_tmp[678400] "expr temp" "maybe param" "maybe type" "temp"
              (678403 'move' call_tmp[678400](166316 call(166311 call (partial) _indices _mt[243] call_tmp[678393]) i[166355]))
              (166317 call = prevInd[166255] call_tmp[678400])
              (482871 'end of statement' prevInd[166255] i[166355])
              unknown call_tmp[678407] "expr temp" "maybe param" "maybe type" "temp"
              (678410 'move' call_tmp[678407](166324 call(388305 call (partial) data _mt[243] this[166150]) i[166355]))
              (166325 call <~> f[166146] call_tmp[678407])
              (482874 'end of statement' i[166355])
            }
            label _continueLabel[166333]
            _indexOfInterest[166328]
            _iterator[166329]
          }
          label _breakLabel[166334]
        }
        (166371 call <~> f[166146] "\n")
      }
    }
    (521867 return _void[55])
  }
  (355161 'used modules list'(161555 'use' ChapelStandard[20264])(161559 'import' RangeChunk[266458])(161562 'use' DSIUtil[230888]))
}