AST dump for DefaultSparse after pass createTaskFunctions.
Module use list: ChapelStandard RangeChunk DSIUtil Search Sort 

{
  function chpl__init_DefaultSparse[416118]() : void[4] "insert line file info" "module init"
  {
    (544286 'init var' debugDefaultSparse[161611] 0)
    (161614 'end of statement')
    (521993 return _void[55])
  }
  unknown debugDefaultSparse[161611] "config" "param"
  function DefaultSparseDom[164378](?).linksDistribution[161646](arg _mt[164382]:_MT[238], arg this[164380]:DefaultSparseDom[164378](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521477] "RVV" "param" "temp"
    (521482 'move' ret[521477](521481 'deref' 0))
    (521479 return ret[521477])
  }
  function DefaultSparseDom[164378](?).dsiLinksDistribution[161656](arg _mt[164386]:_MT[238], arg this[164384]:DefaultSparseDom[164378](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521486] "RVV" "temp"
    (521491 'move' ret[521486](521490 'deref' 0))
    (521488 return ret[521486])
  }
  function DefaultSparseDom[164378](?).init[161668](arg _mt[164390]:_MT[238], arg this[164388]:DefaultSparseDom[164378](?), param arg rank[161666]:_any[178](?), arg idxType[161670]:_any[178](?), arg dist[161674]:unmanaged DefaultDist[415560], arg parentDom[161678]:_domain[125908](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462269] "temporary of super field" "temp"
    (462271 'move' super_tmp[462269](462268 '.v' this[164388] c"super"))
    (161689 call(161682 call (partial) init _mt[243] super_tmp[462269]) rank[161666] idxType[161670] parentDom[161678])
    (482596 'end of statement')
    unknown tmp[462274] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492575] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[675769] "expr temp" "maybe param" "maybe type" "temp"
      (675772 'move' call_tmp[675769](462276 '.v' this[164388] c"super"))
      (492579 'move' call_type_tmp[492575](462279 'typeof' call_tmp[675769]))
    }
    (462280 'move' tmp[462274] call_type_tmp[492575])
    unknown call_tmp[675774] "maybe param" "maybe type" "temp"
    (675777 'move' call_tmp[675774](462285 'cast' tmp[462274] this[164388]))
    unknown chpl__thisAsParent[462282] "dead at end of block" "insert auto destroy" "temp"
    (544288 'init var' chpl__thisAsParent[462282] call_tmp[675774] tmp[462274])
    (462288 'setcid' chpl__thisAsParent[462282])
    (482597 'end of statement')
    unknown tmp[462290] "temp"
    (462293 'init var' tmp[462290] dist[161674] unmanaged DefaultDist[415560])
    (462295 'init field' this[164388] c"dist" tmp[462290])
    (482598 'end of statement')
    unknown tmp[462301] "temp"
    (462303 'init var' tmp[462301] 0)
    (462305 '.=' this[164388] c"_nnz" tmp[462301])
    (482599 'end of statement')
    unknown tmp[462309] "temp"
    unknown call_tmp[675779] "expr temp" "maybe param" "maybe type" "temp"
    (675782 'move' call_tmp[675779](462326 '.' this[164388] c"nnzDom"))
    unknown call_tmp[675784] "expr temp" "maybe param" "maybe type" "temp"
    (675787 'move' call_tmp[675784](462314 call chpl__ensureDomainExpr call_tmp[675779]))
    unknown call_tmp[675789] "expr temp" "maybe param" "maybe type" "temp"
    (675792 'move' call_tmp[675789](462329 '.v' this[164388] c"rank"))
    unknown call_tmp[675794] "expr temp" "maybe param" "maybe type" "temp"
    (675797 'move' call_tmp[675794](462332 '.v' this[164388] c"idxType"))
    unknown call_tmp[675799] "expr temp" "maybe param" "maybe type" "temp"
    (675802 'move' call_tmp[675799](462317 call chpl__buildIndexType call_tmp[675789] call_tmp[675794]))
    unknown call_tmp[675804] "expr temp" "maybe param" "maybe type" "temp"
    (675807 'move' call_tmp[675804](462312 call chpl__buildArrayRuntimeType call_tmp[675784] call_tmp[675799]))
    (462320 'default init var' tmp[462309] call_tmp[675804])
    (462322 '.=' this[164388] c"_indices" tmp[462309])
    (482600 'end of statement')
    (462335 'setcid' this[164388])
    (521493 return _void[55])
  }
  function DefaultSparseDom[164378](?).getNNZ[161704](arg _mt[164394]:_MT[238], arg this[164392]:DefaultSparseDom[164378](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521497] "RVV" "temp"
    unknown call_tmp[675811] "expr temp" "maybe param" "maybe type" "temp"
    (675814 'move' call_tmp[675811](387533 call _nnz _mt[243] this[164392]))
    (521503 'move' ret[521497](521502 'coerce' call_tmp[675811] int(64)[13]))
    (521499 return ret[521497])
  }
  { scopeless type
    int(64)[13]
  }
  function DefaultSparseDom[164378](?).dsiBuildArray[161718](arg _mt[164398]:_MT[238], arg this[164396]:DefaultSparseDom[164378](?), arg eltType[161716]:_any[178](?), param arg initElts[161721]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521507] "RVV" "temp"
    unknown call_tmp[675818] "expr temp" "maybe param" "maybe type" "temp"
    (675821 'move' call_tmp[675818](387543 call rank _mt[243] this[164396]))
    unknown call_tmp[675825] "expr temp" "maybe param" "maybe type" "temp"
    (675828 'move' call_tmp[675825](387548 call idxType _mt[243] this[164396]))
    unknown call_tmp[675830] "expr temp" "maybe param" "maybe type" "temp"
    (675833 'move' call_tmp[675830](161738 call _to_unmanaged this[164396]))
    unknown call_tmp[675835] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675838 'move' call_tmp[675835](748157 'new' DefaultSparseArr[387537](?)(eltType = eltType[161716])(rank = call_tmp[675818])(idxType = call_tmp[675825])(dom = call_tmp[675830])(initElts = initElts[161721])(_chpl_manager = unmanaged[220](?))))
    (521512 'move' ret[521507](521511 'deref' call_tmp[675835]))
    (521509 return ret[521507])
  }
  function DefaultSparseDom[164378](?).dsiIndsIterSafeForRemoving[161750](arg _mt[164402]:_MT[238], arg this[164400]:DefaultSparseDom[164378](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521516] "RVV" "temp"
    {
      unknown _indexOfInterest[161769] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161770] "expr temp" "temp"
      unknown call_tmp[675842] "expr temp" "maybe param" "maybe type" "temp"
      (675845 'move' call_tmp[675842](387561 call _nnz _mt[243] this[164400]))
      unknown call_tmp[675847] "expr temp" "maybe param" "maybe type" "temp"
      (675850 'move' call_tmp[675847](161786 call - 1))
      unknown call_tmp[675852] "expr temp" "maybe param" "maybe type" "temp"
      (675855 'move' call_tmp[675852](161790 call chpl_direct_range_iter 1 call_tmp[675842] call_tmp[675847]))
      (161779 'move' _iterator[161770](161777 call _getIterator call_tmp[675852]))
      Defer
      {
        {
          (161806 call _freeIterator _iterator[161770])
        }
      }
      { scopeless type
        (161795 'move' _indexOfInterest[161769](161792 call iteratorIndex _iterator[161770]))
      }
      ForLoop[161771]
      {
        unknown i[161799] "index var" "insert auto destroy"
        (482605 'end of statement')
        (161801 'move' i[161799] _indexOfInterest[161769])
        (482606 'end of statement' i[161799])
        {
          unknown yret[521520] "YVV" "temp"
          unknown call_tmp[675859] "expr temp" "maybe param" "maybe type" "temp"
          (675862 'move' call_tmp[675859](161765 call(387555 call (partial) _indices _mt[243] this[164400]) i[161799]))
          (521523 'move' yret[521520](521522 'deref' call_tmp[675859]))
          (521525 yield yret[521520])
          (482608 'end of statement' i[161799])
        }
        label _continueLabel[161774]
        _indexOfInterest[161769]
        _iterator[161770]
      }
      label _breakLabel[161775]
    }
    (521518 return ret[521516])
  }
  function DefaultSparseDom[164378](?).these[161818](arg _mt[164406]:_MT[238], arg this[164404]:DefaultSparseDom[164378](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521529] "RVV" "temp"
    {
      unknown _indexOfInterest[161832] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161833] "expr temp" "temp"
      unknown call_tmp[675866] "expr temp" "maybe param" "maybe type" "temp"
      (675869 'move' call_tmp[675866](387572 call _nnz _mt[243] this[164404]))
      unknown call_tmp[675871] "expr temp" "maybe param" "maybe type" "temp"
      (675874 'move' call_tmp[675871](161847 call chpl_direct_range_iter 1 call_tmp[675866] 1))
      (161842 'move' _iterator[161833](161840 call _getIterator call_tmp[675871]))
      Defer
      {
        {
          (161863 call _freeIterator _iterator[161833])
        }
      }
      { scopeless type
        (161852 'move' _indexOfInterest[161832](161849 call iteratorIndex _iterator[161833]))
      }
      ForLoop[161834]
      {
        unknown i[161856] "index var" "insert auto destroy"
        (482611 'end of statement')
        (161858 'move' i[161856] _indexOfInterest[161832])
        (482612 'end of statement' i[161856])
        {
          unknown yret[521533] "YVV" "temp"
          unknown call_tmp[675878] "expr temp" "maybe param" "maybe type" "temp"
          (675881 'move' call_tmp[675878](161828 call(387566 call (partial) _indices _mt[243] this[164404]) i[161856]))
          (521536 'move' yret[521533](521535 'deref' call_tmp[675878]))
          (521538 yield yret[521533])
          (482614 'end of statement' i[161856])
        }
        label _continueLabel[161837]
        _indexOfInterest[161832]
        _iterator[161833]
      }
      label _breakLabel[161838]
    }
    (521531 return ret[521529])
  }
  function DefaultSparseDom[164378](?).these[161879](arg _mt[164410]:_MT[238], arg this[164408]:DefaultSparseDom[164378](?), param arg tag[161876]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521542] "RVV" "temp"
    unknown call_tmp[675885] "maybe param" "maybe type" "temp"
    (675888 'move' call_tmp[675885](387579 call _nnz _mt[243] this[164408]))
    const numElems[161889] "dead at end of block" "const" "insert auto destroy"
    (544290 'init var' numElems[161889] call_tmp[675885])
    (161892 'end of statement')
    unknown call_tmp[675890] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (675893 'move' call_tmp[675890](161899 'typeof' numElems[161889]))
    unknown call_tmp[675895] "expr temp" "maybe param" "maybe type" "temp"
    (675898 'move' call_tmp[675895](161897 call _computeNumChunks numElems[161889]))
    unknown call_tmp[675900] "maybe param" "maybe type" "temp"
    (675903 'move' call_tmp[675900](161900 call _cast call_tmp[675890] call_tmp[675895]))
    const numChunks[161902] "dead at end of block" "const" "insert auto destroy"
    (544292 'init var' numChunks[161902] call_tmp[675900])
    (161905 'end of statement' numElems[161889] numElems[161889])
    unknown call_tmp[675905] "expr temp" "maybe param" "maybe type" "temp"
    (675908 'move' call_tmp[675905](161965 call _cond_test debugDefaultSparse[161611]))
    if call_tmp[675905]
    {
      (161962 call writeln "DefaultSparseDom standalone: " numChunks[161902] " chunks, " numElems[161889] " elems")
      (482618 'end of statement' numChunks[161902] numElems[161889])
    }
    unknown call_tmp[675910] "expr temp" "maybe param" "maybe type" "temp"
    (675913 'move' call_tmp[675910](161971 call <= numChunks[161902] 1))
    unknown call_tmp[675915] "expr temp" "maybe param" "maybe type" "temp"
    (675918 'move' call_tmp[675915](162275 call _cond_test call_tmp[675910]))
    if call_tmp[675915]
    {
      {
        unknown _indexOfInterest[161985] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[161986] "expr temp" "temp"
        unknown call_tmp[675920] "expr temp" "maybe param" "maybe type" "temp"
        (675923 'move' call_tmp[675920](162000 call chpl_direct_range_iter 1 numElems[161889] 1))
        (161995 'move' _iterator[161986](161993 call _getIterator call_tmp[675920]))
        Defer
        {
          {
            (162016 call _freeIterator _iterator[161986])
          }
        }
        { scopeless type
          (162005 'move' _indexOfInterest[161985](162002 call iteratorIndex _iterator[161986]))
        }
        ForLoop[161987]
        {
          unknown i[162009] "index var" "insert auto destroy"
          (482622 'end of statement')
          (162011 'move' i[162009] _indexOfInterest[161985])
          (482623 'end of statement' i[162009])
          {
            unknown yret[521546] "YVV" "temp"
            unknown call_tmp[675927] "expr temp" "maybe param" "maybe type" "temp"
            (675930 'move' call_tmp[675927](161981 call(387590 call (partial) _indices _mt[243] this[164408]) i[162009]))
            (521549 'move' yret[521546](521548 'deref' call_tmp[675927]))
            (521551 yield yret[521546])
            (482625 'end of statement' i[162009])
          }
          label _continueLabel[161990]
          _indexOfInterest[161985]
          _iterator[161986]
        }
        label _breakLabel[161991]
      }
    }
    {
      {
        unknown tmpIter[162078] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[675932] "expr temp" "maybe param" "maybe type" "temp"
        (675935 'move' call_tmp[675932](162031 call chpl_build_bounded_range 1 numElems[161889]))
        (162081 'move' tmpIter[162078](162035 call chunks module=[255] RangeChunk[266546] call_tmp[675932] numChunks[161902]))
        unknown isRngDomArr[162255] "maybe param" "temp"
        unknown tmp[428213] "maybe param" "temp"
        (428224 'move' tmp[428213](162257 call isBoundedRange tmpIter[162078]))
        unknown call_tmp[675937] "expr temp" "maybe param" "maybe type" "temp"
        (675940 'move' call_tmp[675937](428226 call _cond_invalid tmp[428213]))
        if call_tmp[675937]
        {
          (428229 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570244] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570245] "maybe param" "temp"
        unknown call_tmp[675942] "expr temp" "maybe param" "maybe type" "temp"
        (675945 'move' call_tmp[675942](428214 call isTrue tmp[428213]))
        (570250 'move' tmp[570245](570248 call _cond_test call_tmp[675942]))
        if tmp[570245]
        {
          (570255 'move' tmp[570244](570252 '_paramFoldLogical' tmp[570245] 1))
        }
        {
          unknown tmp[428234] "maybe param" "temp"
          (428245 'move' tmp[428234](162260 call isDomain tmpIter[162078]))
          unknown call_tmp[675947] "expr temp" "maybe param" "maybe type" "temp"
          (675950 'move' call_tmp[675947](428247 call _cond_invalid tmp[428234]))
          if call_tmp[675947]
          {
            (428250 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[570217] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570218] "maybe param" "temp"
          unknown call_tmp[675952] "expr temp" "maybe param" "maybe type" "temp"
          (675955 'move' call_tmp[675952](428235 call isTrue tmp[428234]))
          (570223 'move' tmp[570218](570221 call _cond_test call_tmp[675952]))
          if tmp[570218]
          {
            (570228 'move' tmp[570217](570225 '_paramFoldLogical' tmp[570218] 1))
          }
          {
            unknown tmp[570230] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[675957] "expr temp" "maybe param" "maybe type" "temp"
            (675960 'move' call_tmp[675957](162263 call isArray tmpIter[162078]))
            (570232 'move' tmp[570230](428239 call isTrue call_tmp[675957]))
            (570237 'move' tmp[570217](570234 '_paramFoldLogical' tmp[570218] tmp[570230]))
          }
          unknown tmp[570257] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (570259 'move' tmp[570257](428218 call isTrue tmp[570217]))
          (570264 'move' tmp[570244](570261 '_paramFoldLogical' tmp[570245] tmp[570257]))
        }
        (162270 'move' isRngDomArr[162255] tmp[570244])
        if isRngDomArr[162255]
        {
          const _coforallCount[162122] "const" "end count" "temp"
          (162191 'move' _coforallCount[162122](162188 call _endCountAlloc 1))
          unknown numTasks[162123] "temp"
          (162175 'move' numTasks[162123](162171 call size _mt[243] tmpIter[162078]))
          (162166 call _upEndCount _coforallCount[162122] 1 numTasks[162123])
          (482628 'end of statement')
          (162163 call chpl_resetTaskSpawn numTasks[162123])
          (482629 'end of statement')
          unknown _indexOfInterest[162130] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162131] "expr temp" "temp"
          (162140 'move' _iterator[162131](162138 call _getIterator tmpIter[162078]))
          Defer
          {
            {
              (162156 call _freeIterator _iterator[162131])
            }
          }
          { scopeless type
            (162145 'move' _indexOfInterest[162130](162142 call iteratorIndex _iterator[162131]))
          }
          ForLoop[162132]
          {
            unknown chunk[162149] "coforall index var" "index var" "insert auto destroy"
            (482631 'end of statement')
            (162151 'move' chunk[162149] _indexOfInterest[162130])
            (482632 'end of statement' chunk[162149])
            (935487 call coforall_fn[935485])
            function coforall_fn[935485]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[162084] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162086] "expr temp" "temp"
                (162088 'move' _iterator[162086](162091 call _getIterator chunk[162149]))
                Defer
                {
                  {
                    (162095 call _freeIterator _iterator[162086])
                  }
                }
                { scopeless type
                  (162099 'move' _indexOfInterest[162084](162102 call iteratorIndex _iterator[162086]))
                }
                ForLoop[162104]
                {
                  unknown i[162107] "index var" "insert auto destroy"
                  (482635 'end of statement')
                  (162109 'move' i[162107] _indexOfInterest[162084])
                  (482636 'end of statement' i[162107])
                  unknown yret[521553] "YVV" "temp"
                  unknown call_tmp[675966] "expr temp" "maybe param" "maybe type" "temp"
                  (675969 'move' call_tmp[675966](162115 call(387607 call (partial) _indices _mt[243] this[164408]) i[162107]))
                  (521556 'move' yret[521553](521555 'deref' call_tmp[675966]))
                  (521558 yield yret[521553])
                  (482638 'end of statement' i[162107])
                  label _continueLabel[162117]
                  _indexOfInterest[162084]
                  _iterator[162086]
                }
                label _breakLabel[162119]
              }
              (162125 call _downEndCount _coforallCount[162122] nil[44])
              (935490 return _void[55])
            }
            {
            }
            label _continueLabel[162135]
            _indexOfInterest[162130]
            _iterator[162131]
          }
          label _breakLabel[162136]
          Defer
          {
            {
              (162178 call _endCountFree _coforallCount[162122])
            }
          }
          (162183 call _waitEndCount _coforallCount[162122] 1 numTasks[162123])
        }
        {
          const _coforallCount[162195] "const" "end count" "temp"
          (162252 'move' _coforallCount[162195](162249 call _endCountAlloc 1))
          unknown _indexOfInterest[162203] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162204] "expr temp" "temp"
          (162213 'move' _iterator[162204](162211 call _getIterator tmpIter[162078]))
          Defer
          {
            {
              (162229 call _freeIterator _iterator[162204])
            }
          }
          { scopeless type
            (162218 'move' _indexOfInterest[162203](162215 call iteratorIndex _iterator[162204]))
          }
          ForLoop[162205]
          {
            unknown chunk[162222] "coforall index var" "index var" "insert auto destroy"
            (482644 'end of statement')
            (162224 'move' chunk[162222] _indexOfInterest[162203])
            (482645 'end of statement' chunk[162222])
            (162236 call _upEndCount _coforallCount[162195] 1)
            (482647 'end of statement')
            (935494 call coforall_fn[935492])
            function coforall_fn[935492]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[162044] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162045] "expr temp" "temp"
                (162054 'move' _iterator[162045](162052 call _getIterator chunk[162222]))
                Defer
                {
                  {
                    (162070 call _freeIterator _iterator[162045])
                  }
                }
                { scopeless type
                  (162059 'move' _indexOfInterest[162044](162056 call iteratorIndex _iterator[162045]))
                }
                ForLoop[162046]
                {
                  unknown i[162063] "index var" "insert auto destroy"
                  (482649 'end of statement')
                  (162065 'move' i[162063] _indexOfInterest[162044])
                  (482650 'end of statement' i[162063])
                  unknown yret[521560] "YVV" "temp"
                  unknown call_tmp[675973] "expr temp" "maybe param" "maybe type" "temp"
                  (675976 'move' call_tmp[675973](162041 call(387600 call (partial) _indices _mt[243] this[164408]) i[162063]))
                  (521563 'move' yret[521560](521562 'deref' call_tmp[675973]))
                  (521565 yield yret[521560])
                  (482652 'end of statement' i[162063])
                  label _continueLabel[162049]
                  _indexOfInterest[162044]
                  _iterator[162045]
                }
                label _breakLabel[162050]
              }
              (162198 call _downEndCount _coforallCount[162195] nil[44])
              (935497 return _void[55])
            }
            {
            }
            label _continueLabel[162208]
            _indexOfInterest[162203]
            _iterator[162204]
          }
          label _breakLabel[162209]
          Defer
          {
            {
              (162240 call _endCountFree _coforallCount[162195])
            }
          }
          (162245 call _waitEndCount _coforallCount[162195] 1)
        }
        (361273 'referenced modules list' RangeChunk[266546])
      }
    }
    (521544 return ret[521542])
  }
  where {
    (161886 call == tag[161876] standalone[451])
  }
  function DefaultSparseDom[164378](?).these[162288](arg _mt[164414]:_MT[238], arg this[164412]:DefaultSparseDom[164378](?), param arg tag[162285]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521569] "RVV" "temp"
    unknown call_tmp[675980] "maybe param" "maybe type" "temp"
    (675983 'move' call_tmp[675980](387615 call _nnz _mt[243] this[164412]))
    const numElems[162298] "dead at end of block" "const" "insert auto destroy"
    (544294 'init var' numElems[162298] call_tmp[675980])
    (162301 'end of statement')
    unknown call_tmp[675985] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (675988 'move' call_tmp[675985](162308 'typeof' numElems[162298]))
    unknown call_tmp[675990] "expr temp" "maybe param" "maybe type" "temp"
    (675993 'move' call_tmp[675990](162306 call _computeNumChunks numElems[162298]))
    unknown call_tmp[675995] "maybe param" "maybe type" "temp"
    (675998 'move' call_tmp[675995](162309 call _cast call_tmp[675985] call_tmp[675990]))
    const numChunks[162311] "dead at end of block" "const" "insert auto destroy"
    (544296 'init var' numChunks[162311] call_tmp[675995])
    (162314 'end of statement' numElems[162298] numElems[162298])
    unknown call_tmp[676000] "expr temp" "maybe param" "maybe type" "temp"
    (676003 'move' call_tmp[676000](162341 call _cond_test debugDefaultSparse[161611]))
    if call_tmp[676000]
    {
      (162339 call writeln "DefaultSparseDom leader: " numChunks[162311] " chunks, " numElems[162298] " elems")
      (482659 'end of statement' numChunks[162311] numElems[162298])
    }
    unknown call_tmp[676005] "expr temp" "maybe param" "maybe type" "temp"
    (676008 'move' call_tmp[676005](162348 call <= numChunks[162311] 1))
    unknown call_tmp[676010] "expr temp" "maybe param" "maybe type" "temp"
    (676013 'move' call_tmp[676010](162555 call _cond_test call_tmp[676005]))
    if call_tmp[676010]
    {
      unknown yret[521573] "YVV" "temp"
      unknown call_tmp[676015] "expr temp" "maybe param" "maybe type" "temp"
      (676018 'move' call_tmp[676015](162354 call _build_tuple this[164412] 1 numElems[162298]))
      (521576 'move' yret[521573](521575 'deref' call_tmp[676015]))
      (521578 yield yret[521573])
      (482662 'end of statement' numElems[162298])
    }
    {
      unknown tmpIter[162384] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[676020] "expr temp" "maybe param" "maybe type" "temp"
      (676023 'move' call_tmp[676020](162365 call chpl_build_bounded_range 1 numElems[162298]))
      (162387 'move' tmpIter[162384](162369 call chunks module=[255] RangeChunk[266546] call_tmp[676020] numChunks[162311]))
      unknown isRngDomArr[162536] "maybe param" "temp"
      unknown tmp[428255] "maybe param" "temp"
      (428266 'move' tmp[428255](162538 call isBoundedRange tmpIter[162384]))
      unknown call_tmp[676025] "expr temp" "maybe param" "maybe type" "temp"
      (676028 'move' call_tmp[676025](428268 call _cond_invalid tmp[428255]))
      if call_tmp[676025]
      {
        (428271 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[570298] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[570299] "maybe param" "temp"
      unknown call_tmp[676030] "expr temp" "maybe param" "maybe type" "temp"
      (676033 'move' call_tmp[676030](428256 call isTrue tmp[428255]))
      (570304 'move' tmp[570299](570302 call _cond_test call_tmp[676030]))
      if tmp[570299]
      {
        (570309 'move' tmp[570298](570306 '_paramFoldLogical' tmp[570299] 1))
      }
      {
        unknown tmp[428276] "maybe param" "temp"
        (428287 'move' tmp[428276](162541 call isDomain tmpIter[162384]))
        unknown call_tmp[676035] "expr temp" "maybe param" "maybe type" "temp"
        (676038 'move' call_tmp[676035](428289 call _cond_invalid tmp[428276]))
        if call_tmp[676035]
        {
          (428292 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570271] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570272] "maybe param" "temp"
        unknown call_tmp[676040] "expr temp" "maybe param" "maybe type" "temp"
        (676043 'move' call_tmp[676040](428277 call isTrue tmp[428276]))
        (570277 'move' tmp[570272](570275 call _cond_test call_tmp[676040]))
        if tmp[570272]
        {
          (570282 'move' tmp[570271](570279 '_paramFoldLogical' tmp[570272] 1))
        }
        {
          unknown tmp[570284] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[676045] "expr temp" "maybe param" "maybe type" "temp"
          (676048 'move' call_tmp[676045](162544 call isArray tmpIter[162384]))
          (570286 'move' tmp[570284](428281 call isTrue call_tmp[676045]))
          (570291 'move' tmp[570271](570288 '_paramFoldLogical' tmp[570272] tmp[570284]))
        }
        unknown tmp[570311] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (570313 'move' tmp[570311](428260 call isTrue tmp[570271]))
        (570318 'move' tmp[570298](570315 '_paramFoldLogical' tmp[570299] tmp[570311]))
      }
      (162551 'move' isRngDomArr[162536] tmp[570298])
      if isRngDomArr[162536]
      {
        const _coforallCount[162403] "const" "end count" "temp"
        (162472 'move' _coforallCount[162403](162469 call _endCountAlloc 1))
        unknown numTasks[162404] "temp"
        (162456 'move' numTasks[162404](162452 call size _mt[243] tmpIter[162384]))
        (162447 call _upEndCount _coforallCount[162403] 1 numTasks[162404])
        (482665 'end of statement')
        (162444 call chpl_resetTaskSpawn numTasks[162404])
        (482666 'end of statement')
        unknown _indexOfInterest[162411] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162412] "expr temp" "temp"
        (162421 'move' _iterator[162412](162419 call _getIterator tmpIter[162384]))
        Defer
        {
          {
            (162437 call _freeIterator _iterator[162412])
          }
        }
        { scopeless type
          (162426 'move' _indexOfInterest[162411](162423 call iteratorIndex _iterator[162412]))
        }
        ForLoop[162413]
        {
          unknown chunk[162430] "coforall index var" "index var" "insert auto destroy"
          (482668 'end of statement')
          (162432 'move' chunk[162430] _indexOfInterest[162411])
          (482669 'end of statement' chunk[162430])
          (935501 call coforall_fn[935499])
          function coforall_fn[935499]() : void[4] "cobegin or coforall"
          {
            unknown yret[521580] "YVV" "temp"
            unknown call_tmp[676054] "expr temp" "maybe param" "maybe type" "temp"
            (676057 'move' call_tmp[676054](162395 call first _mt[243] chunk[162430]))
            unknown call_tmp[676061] "expr temp" "maybe param" "maybe type" "temp"
            (676064 'move' call_tmp[676061](162399 call last _mt[243] chunk[162430]))
            unknown call_tmp[676066] "expr temp" "maybe param" "maybe type" "temp"
            (676069 'move' call_tmp[676066](162392 call _build_tuple this[164412] call_tmp[676054] call_tmp[676061]))
            (521583 'move' yret[521580](521582 'deref' call_tmp[676066]))
            (521585 yield yret[521580])
            (482671 'end of statement' chunk[162430] chunk[162430])
            (162406 call _downEndCount _coforallCount[162403] nil[44])
            (935504 return _void[55])
          }
          {
          }
          label _continueLabel[162416]
          _indexOfInterest[162411]
          _iterator[162412]
        }
        label _breakLabel[162417]
        Defer
        {
          {
            (162459 call _endCountFree _coforallCount[162403])
          }
        }
        (162464 call _waitEndCount _coforallCount[162403] 1 numTasks[162404])
      }
      {
        const _coforallCount[162476] "const" "end count" "temp"
        (162533 'move' _coforallCount[162476](162530 call _endCountAlloc 1))
        unknown _indexOfInterest[162484] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162485] "expr temp" "temp"
        (162494 'move' _iterator[162485](162492 call _getIterator tmpIter[162384]))
        Defer
        {
          {
            (162510 call _freeIterator _iterator[162485])
          }
        }
        { scopeless type
          (162499 'move' _indexOfInterest[162484](162496 call iteratorIndex _iterator[162485]))
        }
        ForLoop[162486]
        {
          unknown chunk[162503] "coforall index var" "index var" "insert auto destroy"
          (482678 'end of statement')
          (162505 'move' chunk[162503] _indexOfInterest[162484])
          (482679 'end of statement' chunk[162503])
          (162517 call _upEndCount _coforallCount[162476] 1)
          (482681 'end of statement')
          (935508 call coforall_fn[935506])
          function coforall_fn[935506]() : void[4] "cobegin or coforall"
          {
            unknown yret[521587] "YVV" "temp"
            unknown call_tmp[676073] "expr temp" "maybe param" "maybe type" "temp"
            (676076 'move' call_tmp[676073](162372 call first _mt[243] chunk[162503]))
            unknown call_tmp[676080] "expr temp" "maybe param" "maybe type" "temp"
            (676083 'move' call_tmp[676080](162377 call last _mt[243] chunk[162503]))
            unknown call_tmp[676085] "expr temp" "maybe param" "maybe type" "temp"
            (676088 'move' call_tmp[676085](162380 call _build_tuple this[164412] call_tmp[676073] call_tmp[676080]))
            (521590 'move' yret[521587](521589 'deref' call_tmp[676085]))
            (521592 yield yret[521587])
            (482682 'end of statement' chunk[162503] chunk[162503])
            (162479 call _downEndCount _coforallCount[162476] nil[44])
            (935511 return _void[55])
          }
          {
          }
          label _continueLabel[162489]
          _indexOfInterest[162484]
          _iterator[162485]
        }
        label _breakLabel[162490]
        Defer
        {
          {
            (162521 call _endCountFree _coforallCount[162476])
          }
        }
        (162526 call _waitEndCount _coforallCount[162476] 1)
      }
      (361280 'referenced modules list' RangeChunk[266546])
    }
    (521571 return ret[521569])
  }
  where {
    (162295 call == tag[162285] leader[447])
  }
  function DefaultSparseDom[164378](?).these[162569](arg _mt[164418]:_MT[238], arg this[164416]:DefaultSparseDom[164378](?), param arg tag[162566]:iterKind[453], arg followThis[162577]:_tuple[56202](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521596] "RVV" "temp"
    unknown tmp[162595] "dead at end of block" "insert auto destroy" "temp"
    (544298 'init var' tmp[162595] followThis[162577])
    (162605 call _check_tuple_var_decl tmp[162595] 3)
    (482688 'end of statement')
    unknown call_tmp[676090] "maybe param" "maybe type" "temp"
    (676093 'move' call_tmp[676090](162596 call tmp[162595] 0))
    unknown followThisDom[162587] "dead at end of block" "insert auto destroy"
    (544300 'init var' followThisDom[162587] call_tmp[676090])
    unknown call_tmp[676095] "maybe param" "maybe type" "temp"
    (676098 'move' call_tmp[676095](162599 call tmp[162595] 1))
    unknown startIx[162589] "dead at end of block" "insert auto destroy"
    (544302 'init var' startIx[162589] call_tmp[676095])
    unknown call_tmp[676100] "maybe param" "maybe type" "temp"
    (676103 'move' call_tmp[676100](162602 call tmp[162595] 2))
    unknown endIx[162591] "dead at end of block" "insert auto destroy"
    (544304 'init var' endIx[162591] call_tmp[676100])
    (162610 'end of statement')
    unknown call_tmp[676105] "expr temp" "maybe param" "maybe type" "temp"
    (676108 'move' call_tmp[676105](162614 call != followThisDom[162587] this[164416]))
    unknown call_tmp[676110] "expr temp" "maybe param" "maybe type" "temp"
    (676113 'move' call_tmp[676110](162639 call _cond_test call_tmp[676105]))
    if call_tmp[676110]
    {
      (162637 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays")
    }
    unknown call_tmp[676115] "expr temp" "maybe param" "maybe type" "temp"
    (676118 'move' call_tmp[676115](162669 call _cond_test debugDefaultSparse[161611]))
    if call_tmp[676115]
    {
      (162667 call writeln "DefaultSparseDom follower: " startIx[162589] ".." endIx[162591])
      (482690 'end of statement' startIx[162589] endIx[162591])
    }
    {
      unknown _indexOfInterest[162685] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162686] "expr temp" "temp"
      unknown call_tmp[676120] "expr temp" "maybe param" "maybe type" "temp"
      (676123 'move' call_tmp[676120](162700 call chpl_direct_range_iter startIx[162589] endIx[162591] 1))
      (162695 'move' _iterator[162686](162693 call _getIterator call_tmp[676120]))
      Defer
      {
        {
          (162716 call _freeIterator _iterator[162686])
        }
      }
      { scopeless type
        (162705 'move' _indexOfInterest[162685](162702 call iteratorIndex _iterator[162686]))
      }
      ForLoop[162687]
      {
        unknown i[162709] "index var" "insert auto destroy"
        (482694 'end of statement')
        (162711 'move' i[162709] _indexOfInterest[162685])
        (482695 'end of statement' i[162709])
        unknown yret[521600] "YVV" "temp"
        unknown call_tmp[676127] "expr temp" "maybe param" "maybe type" "temp"
        (676130 'move' call_tmp[676127](162682 call(387640 call (partial) _indices _mt[243] this[164416]) i[162709]))
        (521603 'move' yret[521600](521602 'deref' call_tmp[676127]))
        (521605 yield yret[521600])
        (482697 'end of statement' i[162709])
        label _continueLabel[162690]
        _indexOfInterest[162685]
        _iterator[162686]
      }
      label _breakLabel[162691]
    }
    (521598 return ret[521596])
  }
  where {
    unknown call_tmp[676132] "expr temp" "maybe param" "maybe type" "temp"
    (676135 'move' call_tmp[676132](162585 call == tag[162566] follower[449]))
    unknown call_tmp[676137] "expr temp" "maybe param" "maybe type" "temp"
    (676140 'move' call_tmp[676137](462341 'query' followThis[162577] c"size"))
    unknown call_tmp[676142] "expr temp" "maybe param" "maybe type" "temp"
    (676145 'move' call_tmp[676142](462342 call == 3 call_tmp[676137]))
    (462344 call & call_tmp[676132] call_tmp[676142])
  }
  function DefaultSparseDom[164378](?).these[162732](arg _mt[164422]:_MT[238], arg this[164420]:DefaultSparseDom[164378](?), param arg tag[162729]:iterKind[453], arg followThis[162734]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521609] "RVV" "temp"
    (162762 call compilerError "Sparse iterators can't yet be zippered with others")
    (482699 'end of statement')
    unknown dummy[162769] "dead at end of block" "insert auto destroy"
    unknown call_tmp[676149] "expr temp" "maybe param" "maybe type" "temp"
    (676152 'move' call_tmp[676149](387650 call rank _mt[243] this[164420]))
    unknown call_tmp[676156] "expr temp" "maybe param" "maybe type" "temp"
    (676159 'move' call_tmp[676156](387655 call idxType _mt[243] this[164420]))
    unknown call_tmp[676161] "expr temp" "maybe param" "maybe type" "temp"
    (676164 'move' call_tmp[676161](162767 call * call_tmp[676149] call_tmp[676156]))
    (544306 'default init var' dummy[162769] call_tmp[676161])
    (162772 'end of statement')
    unknown yret[521613] "YVV" "temp"
    (521616 'move' yret[521613](521615 'deref' dummy[162769]))
    (521618 yield yret[521613])
    (482700 'end of statement' dummy[162769])
    (521611 return ret[521609])
  }
  where {
    (162741 call == tag[162729] follower[449])
  }
  function DefaultSparseDom[164378](?).find[162783](arg _mt[164426]:_MT[238], arg this[164424]:DefaultSparseDom[164378](?), arg ind[162781]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521622] "RVV" "temp"
    unknown tmp[428297] "maybe param" "temp"
    unknown tmp[428318] "maybe param" "temp"
    unknown call_tmp[676168] "expr temp" "maybe param" "maybe type" "temp"
    (676171 'move' call_tmp[676168](387661 call rank _mt[243] this[164424]))
    (428329 'move' tmp[428318](162791 call == call_tmp[676168] 1))
    unknown call_tmp[676173] "expr temp" "maybe param" "maybe type" "temp"
    (676176 'move' call_tmp[676173](428331 call _cond_invalid tmp[428318]))
    if call_tmp[676173]
    {
      (428334 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570325] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570326] "maybe param" "temp"
    unknown call_tmp[676178] "expr temp" "maybe param" "maybe type" "temp"
    (676181 'move' call_tmp[676178](428319 call isTrue tmp[428318]))
    (570331 'move' tmp[570326](570329 call _cond_test call_tmp[676178]))
    if tmp[570326]
    {
      unknown tmp[570333] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[676183] "expr temp" "maybe param" "maybe type" "temp"
      (676186 'move' call_tmp[676183](162796 call isTuple ind[162781]))
      (570335 'move' tmp[570333](428322 call isTrue call_tmp[676183]))
      (570340 'move' tmp[570325](570337 '_paramFoldLogical' tmp[570326] tmp[570333]))
    }
    {
      (570345 'move' tmp[570325](570342 '_paramFoldLogical' tmp[570326] 0))
    }
    (428308 'move' tmp[428297] tmp[570325])
    unknown call_tmp[676188] "expr temp" "maybe param" "maybe type" "temp"
    (676191 'move' call_tmp[676188](428310 call _cond_invalid tmp[428297]))
    if call_tmp[676188]
    {
      (428313 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570352] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570353] "maybe param" "temp"
    unknown call_tmp[676193] "expr temp" "maybe param" "maybe type" "temp"
    (676196 'move' call_tmp[676193](428298 call isTrue tmp[428297]))
    (570358 'move' tmp[570353](570356 call _cond_test call_tmp[676193]))
    if tmp[570353]
    {
      unknown tmp[570360] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[676200] "expr temp" "maybe param" "maybe type" "temp"
      (676203 'move' call_tmp[676200](162800 call size _mt[243] ind[162781]))
      unknown call_tmp[676205] "expr temp" "maybe param" "maybe type" "temp"
      (676208 'move' call_tmp[676205](162804 call == call_tmp[676200] 1))
      (570362 'move' tmp[570360](428301 call isTrue call_tmp[676205]))
      (570367 'move' tmp[570352](570364 '_paramFoldLogical' tmp[570353] tmp[570360]))
    }
    {
      (570372 'move' tmp[570352](570369 '_paramFoldLogical' tmp[570353] 0))
    }
    unknown call_tmp[676210] "expr temp" "maybe param" "maybe type" "temp"
    (676213 'move' call_tmp[676210](162833 call _cond_test tmp[570352]))
    if call_tmp[676210]
    {
      unknown call_tmp[676217] "expr temp" "maybe param" "maybe type" "temp"
      (676220 'move' call_tmp[676217](387667 call _indices _mt[243] this[164424]))
      unknown call_tmp[676222] "expr temp" "maybe param" "maybe type" "temp"
      (676225 'move' call_tmp[676222](162814 call ind[162781] 0))
      unknown call_tmp[676229] "expr temp" "maybe param" "maybe type" "temp"
      (676232 'move' call_tmp[676229](387673 call _nnz _mt[243] this[164424]))
      unknown call_tmp[676234] "expr temp" "maybe param" "maybe type" "temp"
      (676237 'move' call_tmp[676234](162819 call binarySearch call_tmp[676217] call_tmp[676222](lo = 1)(hi = call_tmp[676229])))
      (521627 'move' ret[521622](521626 'deref' call_tmp[676234]))
      gotoReturn _end_find[521620] _end_find[521620]
    }
    {
      unknown call_tmp[676241] "expr temp" "maybe param" "maybe type" "temp"
      (676244 'move' call_tmp[676241](387678 call _indices _mt[243] this[164424]))
      unknown call_tmp[676248] "expr temp" "maybe param" "maybe type" "temp"
      (676251 'move' call_tmp[676248](387684 call _nnz _mt[243] this[164424]))
      unknown call_tmp[676253] "expr temp" "maybe param" "maybe type" "temp"
      (676256 'move' call_tmp[676253](162830 call binarySearch call_tmp[676241] ind[162781](lo = 1)(hi = call_tmp[676248])))
      (521632 'move' ret[521622](521631 'deref' call_tmp[676253]))
      gotoReturn _end_find[521620] _end_find[521620]
    }
    label _end_find[521620]
    (521624 return ret[521622])
    (355276 'used modules list'(162786 'use' Search[291329]))
  }
  function DefaultSparseDom[164378](?).dsiMember[162845](arg _mt[164430]:_MT[238], arg this[164428]:DefaultSparseDom[164378](?), arg ind[162843]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521638] "RVV" "temp"
    unknown call_tmp[676260] "maybe param" "maybe type" "temp"
    (676263 'move' call_tmp[676260](162855 call(387688 call (partial) find _mt[243] this[164428]) ind[162843]))
    const tmp[162856] "dead at end of block" "const" "insert auto destroy" "temp"
    (544308 'init var' tmp[162856] call_tmp[676260])
    (162863 call _check_tuple_var_decl tmp[162856] 2)
    (482706 'end of statement')
    unknown call_tmp[676265] "maybe param" "maybe type" "temp"
    (676268 'move' call_tmp[676265](162857 call tmp[162856] 0))
    const found[162847] "dead at end of block" "const" "insert auto destroy"
    (544310 'init var' found[162847] call_tmp[676265])
    unknown call_tmp[676270] "maybe param" "maybe type" "temp"
    (676273 'move' call_tmp[676270](162860 call tmp[162856] 1))
    const loc[162849] "dead at end of block" "const" "insert auto destroy"
    (544312 'init var' loc[162849] call_tmp[676270])
    (162868 'end of statement')
    (521643 'move' ret[521638](521642 'deref' found[162847]))
    gotoReturn _end_dsiMember[521636] _end_dsiMember[521636]
    (482707 'end of statement' found[162847])
    label _end_dsiMember[521636]
    (521640 return ret[521638])
  }
  function DefaultSparseDom[164378](?).dsiFirst[162877](arg _mt[164434]:_MT[238], arg this[164432]:DefaultSparseDom[164378](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[521649] "RVV" "temp"
    unknown call_tmp[676279] "expr temp" "maybe param" "maybe type" "temp"
    (676282 'move' call_tmp[676279](361294 call _indices _mt[243] this[164432]))
    unknown call_tmp[676286] "expr temp" "maybe param" "maybe type" "temp"
    (676289 'move' call_tmp[676286](162881 call _dom _mt[243] call_tmp[676279]))
    unknown call_tmp[676293] "expr temp" "maybe param" "maybe type" "temp"
    (676296 'move' call_tmp[676293](162884 call first _mt[243] call_tmp[676286]))
    unknown call_tmp[676298] "expr temp" "maybe param" "maybe type" "temp"
    (676301 'move' call_tmp[676298](162888 call(387695 call (partial) _indices _mt[243] this[164432]) call_tmp[676293]))
    (521654 'move' ret[521649](521653 'deref' call_tmp[676298]))
    (521651 return ret[521649])
  }
  function DefaultSparseDom[164378](?).dsiLast[162896](arg _mt[164438]:_MT[238], arg this[164436]:DefaultSparseDom[164378](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[521658] "RVV" "temp"
    unknown call_tmp[676307] "expr temp" "maybe param" "maybe type" "temp"
    (676310 'move' call_tmp[676307](387705 call _nnz _mt[243] this[164436]))
    unknown call_tmp[676312] "expr temp" "maybe param" "maybe type" "temp"
    (676315 'move' call_tmp[676312](162901 call(387700 call (partial) _indices _mt[243] this[164436]) call_tmp[676307]))
    (521663 'move' ret[521658](521662 'deref' call_tmp[676312]))
    (521660 return ret[521658])
  }
  function DefaultSparseDom[164378](?).add_help[162911](arg _mt[164442]:_MT[238], arg this[164440]:DefaultSparseDom[164378](?), arg ind[162909]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521667] "RVV" "temp"
    unknown call_tmp[676319] "maybe param" "maybe type" "temp"
    (676322 'move' call_tmp[676319](162921 call(387709 call (partial) find _mt[243] this[164440]) ind[162909]))
    const tmp[162922] "dead at end of block" "const" "insert auto destroy" "temp"
    (544314 'init var' tmp[162922] call_tmp[676319])
    (162929 call _check_tuple_var_decl tmp[162922] 2)
    (482711 'end of statement')
    unknown call_tmp[676324] "maybe param" "maybe type" "temp"
    (676327 'move' call_tmp[676324](162923 call tmp[162922] 0))
    const found[162913] "dead at end of block" "const" "insert auto destroy"
    (544316 'init var' found[162913] call_tmp[676324])
    unknown call_tmp[676329] "maybe param" "maybe type" "temp"
    (676332 'move' call_tmp[676329](162926 call tmp[162922] 1))
    const insertPt[162915] "dead at end of block" "const" "insert auto destroy"
    (544318 'init var' insertPt[162915] call_tmp[676329])
    (162934 'end of statement')
    unknown call_tmp[676334] "expr temp" "maybe param" "maybe type" "temp"
    (676337 'move' call_tmp[676334](162940 call _cond_test found[162913]))
    if call_tmp[676334]
    {
      (521672 'move' ret[521667](521671 'deref' 0))
      gotoReturn _end_add_help[521665] _end_add_help[521665]
    }
    unknown call_tmp[676339] "expr temp" "maybe param" "maybe type" "temp"
    (676342 'move' call_tmp[676339](162954 call _cond_test 1))
    if call_tmp[676339]
    {
      (162952 call(162947 call (partial) boundsCheck _mt[243] this[164440]) ind[162909])
    }
    unknown call_tmp[676348] "expr temp" "maybe param" "maybe type" "temp"
    (676351 'move' call_tmp[676348](387718 call _nnz _mt[243] this[164440]))
    (162961 call += call_tmp[676348] 1)
    (482714 'end of statement')
    unknown call_tmp[676355] "expr temp" "maybe param" "maybe type" "temp"
    (676358 'move' call_tmp[676355](361300 call nnzDom _mt[243] this[164440]))
    unknown call_tmp[676362] "maybe param" "maybe type" "temp"
    (676365 'move' call_tmp[676362](162965 call size _mt[243] call_tmp[676355]))
    const oldNNZDomSize[162968] "dead at end of block" "const" "insert auto destroy"
    (544320 'init var' oldNNZDomSize[162968] call_tmp[676362])
    (162971 'end of statement')
    unknown call_tmp[676371] "expr temp" "maybe param" "maybe type" "temp"
    (676374 'move' call_tmp[676371](387729 call _nnz _mt[243] this[164440]))
    (162975 call(387724 call (partial) _grow _mt[243] this[164440]) call_tmp[676371])
    (482715 'end of statement')
    {
      unknown _indexOfInterest[163005] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163006] "expr temp" "temp"
      unknown call_tmp[676378] "expr temp" "maybe param" "maybe type" "temp"
      (676381 'move' call_tmp[676378](387747 call _nnz _mt[243] this[164440]))
      unknown call_tmp[676383] "expr temp" "maybe param" "maybe type" "temp"
      (676386 'move' call_tmp[676383](163029 call - call_tmp[676378] 1))
      unknown call_tmp[676388] "expr temp" "maybe param" "maybe type" "temp"
      (676391 'move' call_tmp[676388](163025 call - 1))
      unknown call_tmp[676393] "expr temp" "maybe param" "maybe type" "temp"
      (676396 'move' call_tmp[676393](163032 call chpl_direct_range_iter insertPt[162915] call_tmp[676383] call_tmp[676388]))
      (163015 'move' _iterator[163006](163013 call _getIterator call_tmp[676393]))
      Defer
      {
        {
          (163048 call _freeIterator _iterator[163006])
        }
      }
      { scopeless type
        (163037 'move' _indexOfInterest[163005](163034 call iteratorIndex _iterator[163006]))
      }
      ForLoop[163007]
      {
        unknown i[163041] "index var" "insert auto destroy"
        (482717 'end of statement')
        (163043 'move' i[163041] _indexOfInterest[163005])
        (482718 'end of statement' i[163041])
        {
          unknown call_tmp[676400] "expr temp" "maybe param" "maybe type" "temp"
          (676403 'move' call_tmp[676400](162993 call + i[163041] 1))
          unknown call_tmp[676405] "expr temp" "maybe param" "maybe type" "temp"
          (676408 'move' call_tmp[676405](162996 call(387734 call (partial) _indices _mt[243] this[164440]) call_tmp[676400]))
          unknown call_tmp[676412] "expr temp" "maybe param" "maybe type" "temp"
          (676415 'move' call_tmp[676412](163000 call(387740 call (partial) _indices _mt[243] this[164440]) i[163041]))
          (163001 call = call_tmp[676405] call_tmp[676412])
          (482720 'end of statement' i[163041] i[163041])
        }
        label _continueLabel[163010]
        _indexOfInterest[163005]
        _iterator[163006]
      }
      label _breakLabel[163011]
    }
    unknown call_tmp[676419] "expr temp" "maybe param" "maybe type" "temp"
    (676422 'move' call_tmp[676419](163058 call(387752 call (partial) _indices _mt[243] this[164440]) insertPt[162915]))
    (163060 call = call_tmp[676419] ind[162909])
    (482723 'end of statement' insertPt[162915])
    {
      unknown _indexOfInterest[163092] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163093] "expr temp" "temp"
      unknown call_tmp[676426] "expr temp" "maybe param" "maybe type" "temp"
      (676429 'move' call_tmp[676426](387759 call _arrs _mt[243] this[164440]))
      (163102 'move' _iterator[163093](163100 call _getIterator call_tmp[676426]))
      Defer
      {
        {
          (163118 call _freeIterator _iterator[163093])
        }
      }
      { scopeless type
        (163107 'move' _indexOfInterest[163092](163104 call iteratorIndex _iterator[163093]))
      }
      ForLoop[163094]
      {
        unknown a[163111] "index var" "insert auto destroy"
        (482726 'end of statement')
        (163113 'move' a[163111] _indexOfInterest[163092])
        (482727 'end of statement' a[163111])
        {
          unknown call_tmp[676435] "expr temp" "maybe param" "maybe type" "temp"
          (676438 'move' call_tmp[676435](387765 call _nnz _mt[243] this[164440]))
          unknown call_tmp[676440] "expr temp" "maybe param" "maybe type" "temp"
          (676443 'move' call_tmp[676440](163074 call - call_tmp[676435] 1))
          unknown call_tmp[676445] "expr temp" "maybe param" "maybe type" "temp"
          (676448 'move' call_tmp[676445](163076 call chpl_build_bounded_range insertPt[162915] call_tmp[676440]))
          unknown call_tmp[676450] "expr temp" "maybe param" "maybe type" "temp"
          (676453 'move' call_tmp[676450](163081 call + oldNNZDomSize[162968] 1))
          unknown call_tmp[676457] "expr temp" "maybe param" "maybe type" "temp"
          (676460 'move' call_tmp[676457](361306 call nnzDom _mt[243] this[164440]))
          unknown call_tmp[676464] "expr temp" "maybe param" "maybe type" "temp"
          (676467 'move' call_tmp[676464](163084 call size _mt[243] call_tmp[676457]))
          unknown call_tmp[676469] "expr temp" "maybe param" "maybe type" "temp"
          (676472 'move' call_tmp[676469](163087 call chpl_build_bounded_range call_tmp[676450] call_tmp[676464]))
          (163089 call(163068 call (partial) sparseShiftArray _mt[243] a[163111]) call_tmp[676445] call_tmp[676469])
          (482729 'end of statement' a[163111] insertPt[162915] oldNNZDomSize[162968])
        }
        label _continueLabel[163097]
        _indexOfInterest[163092]
        _iterator[163093]
      }
      label _breakLabel[163098]
    }
    (521677 'move' ret[521667](521676 'deref' 1))
    label _end_add_help[521665]
    (521669 return ret[521667])
  }
  function DefaultSparseDom[164378](?).rem_help[163134](arg _mt[164446]:_MT[238], arg this[164444]:DefaultSparseDom[164378](?), arg ind[163132]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521681] "RVV" "temp"
    unknown call_tmp[676476] "maybe param" "maybe type" "temp"
    (676479 'move' call_tmp[676476](163144 call(387770 call (partial) find _mt[243] this[164444]) ind[163132]))
    const tmp[163145] "dead at end of block" "const" "insert auto destroy" "temp"
    (544322 'init var' tmp[163145] call_tmp[676476])
    (163152 call _check_tuple_var_decl tmp[163145] 2)
    (482734 'end of statement')
    unknown call_tmp[676481] "maybe param" "maybe type" "temp"
    (676484 'move' call_tmp[676481](163146 call tmp[163145] 0))
    const found[163136] "dead at end of block" "const" "insert auto destroy"
    (544324 'init var' found[163136] call_tmp[676481])
    unknown call_tmp[676486] "maybe param" "maybe type" "temp"
    (676489 'move' call_tmp[676486](163149 call tmp[163145] 1))
    const insertPt[163138] "dead at end of block" "const" "insert auto destroy"
    (544326 'init var' insertPt[163138] call_tmp[676486])
    (163157 'end of statement')
    unknown call_tmp[676491] "expr temp" "maybe param" "maybe type" "temp"
    (676494 'move' call_tmp[676491](163160 call ! found[163136]))
    unknown call_tmp[676496] "expr temp" "maybe param" "maybe type" "temp"
    (676499 'move' call_tmp[676496](163184 call _cond_test call_tmp[676491]))
    if call_tmp[676496]
    {
      (163182 call halt "index not in domain: " ind[163132])
    }
    unknown call_tmp[676503] "expr temp" "maybe param" "maybe type" "temp"
    (676506 'move' call_tmp[676503](387778 call _nnz _mt[243] this[164444]))
    (163191 call -= call_tmp[676503] 1)
    (482736 'end of statement')
    {
      unknown _indexOfInterest[163214] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163215] "expr temp" "temp"
      unknown call_tmp[676510] "expr temp" "maybe param" "maybe type" "temp"
      (676513 'move' call_tmp[676510](387796 call _nnz _mt[243] this[164444]))
      unknown call_tmp[676515] "expr temp" "maybe param" "maybe type" "temp"
      (676518 'move' call_tmp[676515](163229 call chpl_direct_range_iter insertPt[163138] call_tmp[676510] 1))
      (163224 'move' _iterator[163215](163222 call _getIterator call_tmp[676515]))
      Defer
      {
        {
          (163245 call _freeIterator _iterator[163215])
        }
      }
      { scopeless type
        (163234 'move' _indexOfInterest[163214](163231 call iteratorIndex _iterator[163215]))
      }
      ForLoop[163216]
      {
        unknown i[163238] "index var" "insert auto destroy"
        (482738 'end of statement')
        (163240 'move' i[163238] _indexOfInterest[163214])
        (482739 'end of statement' i[163238])
        {
          unknown call_tmp[676522] "expr temp" "maybe param" "maybe type" "temp"
          (676525 'move' call_tmp[676522](163202 call(387783 call (partial) _indices _mt[243] this[164444]) i[163238]))
          unknown call_tmp[676529] "expr temp" "maybe param" "maybe type" "temp"
          (676532 'move' call_tmp[676529](163206 call + i[163238] 1))
          unknown call_tmp[676534] "expr temp" "maybe param" "maybe type" "temp"
          (676537 'move' call_tmp[676534](163209 call(387789 call (partial) _indices _mt[243] this[164444]) call_tmp[676529]))
          (163210 call = call_tmp[676522] call_tmp[676534])
          (482741 'end of statement' i[163238] i[163238])
        }
        label _continueLabel[163219]
        _indexOfInterest[163214]
        _iterator[163215]
      }
      label _breakLabel[163220]
    }
    {
      unknown _indexOfInterest[163271] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163272] "expr temp" "temp"
      unknown call_tmp[676541] "expr temp" "maybe param" "maybe type" "temp"
      (676544 'move' call_tmp[676541](387801 call _arrs _mt[243] this[164444]))
      (163281 'move' _iterator[163272](163279 call _getIterator call_tmp[676541]))
      Defer
      {
        {
          (163297 call _freeIterator _iterator[163272])
        }
      }
      { scopeless type
        (163286 'move' _indexOfInterest[163271](163283 call iteratorIndex _iterator[163272]))
      }
      ForLoop[163273]
      {
        unknown a[163290] "index var" "insert auto destroy"
        (482745 'end of statement')
        (163292 'move' a[163290] _indexOfInterest[163271])
        (482746 'end of statement' a[163290])
        {
          unknown call_tmp[676550] "expr temp" "maybe param" "maybe type" "temp"
          (676553 'move' call_tmp[676550](387807 call _nnz _mt[243] this[164444]))
          unknown call_tmp[676555] "expr temp" "maybe param" "maybe type" "temp"
          (676558 'move' call_tmp[676555](163263 call - call_tmp[676550] 1))
          unknown call_tmp[676560] "expr temp" "maybe param" "maybe type" "temp"
          (676563 'move' call_tmp[676560](163265 call chpl_build_bounded_range insertPt[163138] call_tmp[676555]))
          (163268 call(163257 call (partial) sparseShiftArrayBack _mt[243] a[163290]) call_tmp[676560])
          (482748 'end of statement' a[163290] insertPt[163138])
        }
        label _continueLabel[163276]
        _indexOfInterest[163271]
        _iterator[163272]
      }
      label _breakLabel[163277]
    }
    (521686 'move' ret[521681](521685 'deref' 1))
    (521683 return ret[521681])
  }
  function DefaultSparseDom[164378](?).dsiAdd[163315](arg _mt[164450]:_MT[238], arg this[164448]:DefaultSparseDom[164378](?), arg ind[163312] :
  (387812 call idxType _mt[243] this[164448])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521690] "RVV" "temp"
    unknown call_tmp[676569] "expr temp" "maybe param" "maybe type" "temp"
    (676572 'move' call_tmp[676569](163324 call(387823 call (partial) add_help _mt[243] this[164448]) ind[163312]))
    (521695 'move' ret[521690](521694 'deref' call_tmp[676569]))
    (521692 return ret[521690])
  }
  where {
    unknown call_tmp[676576] "expr temp" "maybe param" "maybe type" "temp"
    (676579 'move' call_tmp[676576](387817 call rank _mt[243] this[164448]))
    (163319 call == call_tmp[676576] 1)
  }
  function DefaultSparseDom[164378](?).dsiRemove[163337](arg _mt[164454]:_MT[238], arg this[164452]:DefaultSparseDom[164378](?), arg ind[163334] :
  (387829 call idxType _mt[243] this[164452])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521699] "RVV" "temp"
    unknown call_tmp[676585] "expr temp" "maybe param" "maybe type" "temp"
    (676588 'move' call_tmp[676585](163346 call(387840 call (partial) rem_help _mt[243] this[164452]) ind[163334]))
    (521704 'move' ret[521699](521703 'deref' call_tmp[676585]))
    (521701 return ret[521699])
  }
  where {
    unknown call_tmp[676592] "expr temp" "maybe param" "maybe type" "temp"
    (676595 'move' call_tmp[676592](387834 call rank _mt[243] this[164452]))
    (163341 call == call_tmp[676592] 1)
  }
  function DefaultSparseDom[164378](?).dsiAdd[163362](arg _mt[164458]:_MT[238], arg this[164456]:DefaultSparseDom[164378](?), arg ind[163359] :
  unknown call_tmp[676599] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521708] "RVV" "temp"
    unknown call_tmp[676613] "expr temp" "maybe param" "maybe type" "temp"
    (676616 'move' call_tmp[676613](387856 call rank _mt[243] this[164456]))
    unknown call_tmp[676618] "expr temp" "maybe param" "maybe type" "temp"
    (676621 'move' call_tmp[676618](163366 call == call_tmp[676613] 1))
    unknown call_tmp[676623] "expr temp" "maybe param" "maybe type" "temp"
    (676626 'move' call_tmp[676623](163385 call _cond_test call_tmp[676618]))
    if call_tmp[676623]
    {
      unknown call_tmp[676630] "expr temp" "maybe param" "maybe type" "temp"
      (676633 'move' call_tmp[676630](163372 call ind[163359] 0))
      unknown call_tmp[676635] "expr temp" "maybe param" "maybe type" "temp"
      (676638 'move' call_tmp[676635](163374 call(387860 call (partial) add_help _mt[243] this[164456]) call_tmp[676630]))
      (521713 'move' ret[521708](521712 'deref' call_tmp[676635]))
      gotoReturn _end_dsiAdd[521706] _end_dsiAdd[521706]
    }
    {
      unknown call_tmp[676642] "expr temp" "maybe param" "maybe type" "temp"
      (676645 'move' call_tmp[676642](163381 call(387865 call (partial) add_help _mt[243] this[164456]) ind[163359]))
      (521718 'move' ret[521708](521717 'deref' call_tmp[676642]))
      gotoReturn _end_dsiAdd[521706] _end_dsiAdd[521706]
    }
    label _end_dsiAdd[521706]
    (521710 return ret[521708])
  }
  function DefaultSparseDom[164378](?).dsiRemove[163401](arg _mt[164462]:_MT[238], arg this[164460]:DefaultSparseDom[164378](?), arg ind[163398] :
  unknown call_tmp[676649] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521724] "RVV" "temp"
    unknown call_tmp[676663] "expr temp" "maybe param" "maybe type" "temp"
    (676666 'move' call_tmp[676663](387881 call rank _mt[243] this[164460]))
    unknown call_tmp[676668] "expr temp" "maybe param" "maybe type" "temp"
    (676671 'move' call_tmp[676668](163405 call == call_tmp[676663] 1))
    unknown call_tmp[676673] "expr temp" "maybe param" "maybe type" "temp"
    (676676 'move' call_tmp[676673](163424 call _cond_test call_tmp[676668]))
    if call_tmp[676673]
    {
      unknown call_tmp[676680] "expr temp" "maybe param" "maybe type" "temp"
      (676683 'move' call_tmp[676680](163411 call ind[163398] 0))
      unknown call_tmp[676685] "expr temp" "maybe param" "maybe type" "temp"
      (676688 'move' call_tmp[676685](163413 call(387885 call (partial) rem_help _mt[243] this[164460]) call_tmp[676680]))
      (521729 'move' ret[521724](521728 'deref' call_tmp[676685]))
      gotoReturn _end_dsiRemove[521722] _end_dsiRemove[521722]
    }
    {
      unknown call_tmp[676692] "expr temp" "maybe param" "maybe type" "temp"
      (676695 'move' call_tmp[676692](163420 call(387890 call (partial) rem_help _mt[243] this[164460]) ind[163398]))
      (521734 'move' ret[521724](521733 'deref' call_tmp[676692]))
      gotoReturn _end_dsiRemove[521722] _end_dsiRemove[521722]
    }
    label _end_dsiRemove[521722]
    (521726 return ret[521724])
  }
  function DefaultSparseDom[164378](?).bulkAdd_help[163446](arg _mt[164466]:_MT[238], arg this[164464]:DefaultSparseDom[164378](?), arg inds[163443]:_array[133594](?), arg dataSorted[163449] :
  0 =
  0, arg isUnique[163453] :
  0 =
  0, arg addOn[163457] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[521740] "RVV" "temp"
    unknown call_tmp[676697] "expr temp" "maybe param" "maybe type" "temp"
    (676700 'move' call_tmp[676697](163466 call != addOn[163457] nilLocale[89942]))
    unknown call_tmp[676702] "expr temp" "maybe param" "maybe type" "temp"
    (676705 'move' call_tmp[676702](163504 call _cond_test call_tmp[676697]))
    if call_tmp[676702]
    {
      unknown call_tmp[676707] "expr temp" "maybe param" "maybe type" "temp"
      (676710 'move' call_tmp[676707](163470 '_wide_get_locale' this[164464]))
      unknown call_tmp[676712] "expr temp" "maybe param" "maybe type" "temp"
      (676715 'move' call_tmp[676712](163471 call chpl_localeID_to_locale call_tmp[676707]))
      unknown call_tmp[676717] "expr temp" "maybe param" "maybe type" "temp"
      (676720 'move' call_tmp[676717](163473 call != addOn[163457] call_tmp[676712]))
      unknown call_tmp[676722] "expr temp" "maybe param" "maybe type" "temp"
      (676725 'move' call_tmp[676722](163499 call _cond_test call_tmp[676717]))
      if call_tmp[676722]
      {
        (163496 call halt "Bulk index addition is only possible on the locale where the\n              sparse domain is created")
      }
    }
    (163519 call(387912 call (partial) bulkAdd_prepareInds _mt[243] this[164464]) inds[163443] dataSorted[163449] isUnique[163453] defaultComparator[268065])
    (482759 'end of statement')
    unknown call_tmp[676731] "expr temp" "maybe param" "maybe type" "temp"
    (676734 'move' call_tmp[676731](387920 call _nnz _mt[243] this[164464]))
    unknown call_tmp[676736] "expr temp" "maybe param" "maybe type" "temp"
    (676739 'move' call_tmp[676736](163523 call == call_tmp[676731] 0))
    unknown call_tmp[676741] "expr temp" "maybe param" "maybe type" "temp"
    (676744 'move' call_tmp[676741](163684 call _cond_test call_tmp[676736]))
    if call_tmp[676741]
    {
      const dupCount[163534] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[570379] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[570380] "maybe param" "temp"
      (570385 'move' tmp[570380](570383 call _cond_test isUnique[163453]))
      if tmp[570380]
      {
        (570390 'move' tmp[570379](570387 '_paramFoldLogical' tmp[570380] 0))
      }
      {
        unknown tmp[570392] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (570394 'move' tmp[570392](163530 call(387927 call (partial) _countDuplicates _mt[243] this[164464]) inds[163443]))
        (570399 'move' tmp[570379](570396 '_paramFoldLogical' tmp[570380] tmp[570392]))
      }
      (544328 'init var' dupCount[163534] tmp[570379])
      (163537 'end of statement')
      unknown call_tmp[676750] "expr temp" "maybe param" "maybe type" "temp"
      (676753 'move' call_tmp[676750](387933 call _nnz _mt[243] this[164464]))
      unknown call_tmp[676757] "expr temp" "maybe param" "maybe type" "temp"
      (676760 'move' call_tmp[676757](163541 call size _mt[243] inds[163443]))
      unknown call_tmp[676762] "expr temp" "maybe param" "maybe type" "temp"
      (676765 'move' call_tmp[676762](163545 call - call_tmp[676757] dupCount[163534]))
      (163547 call += call_tmp[676750] call_tmp[676762])
      (482760 'end of statement' dupCount[163534])
      (163552 call(387940 call (partial) _bulkGrow _mt[243] this[164464]))
      (482762 'end of statement')
      unknown call_tmp[676771] "expr temp" "maybe param" "maybe type" "temp"
      (676774 'move' call_tmp[676771](361317 call _indices _mt[243] this[164464]))
      unknown call_tmp[676778] "expr temp" "maybe param" "maybe type" "temp"
      (676781 'move' call_tmp[676778](163555 call _dom _mt[243] call_tmp[676771]))
      unknown call_tmp[676785] "maybe param" "maybe type" "temp"
      (676788 'move' call_tmp[676785](163558 call low _mt[243] call_tmp[676778]))
      unknown indIdx[163561] "dead at end of block" "insert auto destroy"
      (544330 'init var' indIdx[163561] call_tmp[676785])
      (163564 'end of statement')
      unknown call_tmp[676792] "expr temp" "maybe param" "maybe type" "temp"
      (676795 'move' call_tmp[676792](361322 call parentDom _mt[243] this[164464]))
      unknown call_tmp[676799] "expr temp" "maybe param" "maybe type" "temp"
      (676802 'move' call_tmp[676799](163566 call low _mt[243] call_tmp[676792]))
      unknown call_tmp[676804] "maybe param" "maybe type" "temp"
      (676807 'move' call_tmp[676804](163570 call - call_tmp[676799] 1))
      unknown prevIdx[163572] "dead at end of block" "insert auto destroy"
      (544332 'init var' prevIdx[163572] call_tmp[676804])
      (163575 'end of statement')
      unknown call_tmp[676809] "expr temp" "maybe param" "maybe type" "temp"
      (676812 'move' call_tmp[676809](163680 call _cond_test isUnique[163453]))
      if call_tmp[676809]
      {
        unknown call_tmp[676818] "expr temp" "maybe param" "maybe type" "temp"
        (676821 'move' call_tmp[676818](361327 call _indices _mt[243] this[164464]))
        unknown call_tmp[676825] "expr temp" "maybe param" "maybe type" "temp"
        (676828 'move' call_tmp[676825](163579 call _dom _mt[243] call_tmp[676818]))
        unknown call_tmp[676832] "expr temp" "maybe param" "maybe type" "temp"
        (676835 'move' call_tmp[676832](163582 call low _mt[243] call_tmp[676825]))
        unknown call_tmp[676837] "expr temp" "maybe param" "maybe type" "temp"
        (676840 'move' call_tmp[676837](163585 call chpl_build_low_bounded_range call_tmp[676832]))
        unknown call_tmp[676844] "expr temp" "maybe param" "maybe type" "temp"
        (676847 'move' call_tmp[676844](163588 call size _mt[243] inds[163443]))
        unknown call_tmp[676849] "expr temp" "maybe param" "maybe type" "temp"
        (676852 'move' call_tmp[676849](163591 call # call_tmp[676837] call_tmp[676844]))
        unknown call_tmp[676854] "expr temp" "maybe param" "maybe type" "temp"
        (676857 'move' call_tmp[676854](163594 call(387946 call (partial) _indices _mt[243] this[164464]) call_tmp[676849]))
        (163596 call = call_tmp[676854] inds[163443])
        (482763 'end of statement')
        unknown call_tmp[676861] "expr temp" "maybe param" "maybe type" "temp"
        (676864 'move' call_tmp[676861](163601 call size _mt[243] inds[163443]))
        (521745 'move' ret[521740](521744 'deref' call_tmp[676861]))
        gotoReturn _end_bulkAdd_help[521738] _end_bulkAdd_help[521738]
      }
      {
        {
          unknown _indexOfInterest[163640] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[163641] "expr temp" "temp"
          (163650 'move' _iterator[163641](163648 call _getIterator inds[163443]))
          Defer
          {
            {
              (163666 call _freeIterator _iterator[163641])
            }
          }
          { scopeless type
            (163655 'move' _indexOfInterest[163640](163652 call iteratorIndex _iterator[163641]))
          }
          ForLoop[163642]
          {
            unknown i[163659] "index var" "insert auto destroy"
            (482766 'end of statement')
            (163661 'move' i[163659] _indexOfInterest[163640])
            (482767 'end of statement' i[163659])
            {
              unknown call_tmp[676866] "expr temp" "maybe param" "maybe type" "temp"
              (676869 'move' call_tmp[676866](163610 call == i[163659] prevIdx[163572]))
              unknown call_tmp[676871] "expr temp" "maybe param" "maybe type" "temp"
              (676874 'move' call_tmp[676871](163620 call _cond_test call_tmp[676866]))
              if call_tmp[676871]
              {
                continue _continueLabel[163645] _continueLabel[163645]
              }
              {
                (163617 call = prevIdx[163572] i[163659])
                (482769 'end of statement' prevIdx[163572] i[163659])
              }
              unknown call_tmp[676878] "expr temp" "maybe param" "maybe type" "temp"
              (676881 'move' call_tmp[676878](163630 call(387957 call (partial) _indices _mt[243] this[164464]) indIdx[163561]))
              (163632 call = call_tmp[676878] i[163659])
              (482772 'end of statement' indIdx[163561] i[163659])
              (163637 call += indIdx[163561] 1)
              (482775 'end of statement' indIdx[163561])
            }
            label _continueLabel[163645]
            _indexOfInterest[163640]
            _iterator[163641]
          }
          label _breakLabel[163646]
        }
        unknown call_tmp[676883] "expr temp" "maybe param" "maybe type" "temp"
        (676886 'move' call_tmp[676883](163676 call - indIdx[163561] 1))
        (521750 'move' ret[521740](521749 'deref' call_tmp[676883]))
        gotoReturn _end_bulkAdd_help[521738] _end_bulkAdd_help[521738]
        (482777 'end of statement' indIdx[163561])
      }
    }
    unknown call_tmp[676890] "maybe param" "maybe type" "temp"
    (676893 'move' call_tmp[676890](163698 call(387967 call (partial) __getActualInsertPts _mt[243] this[164464]) this[164464] inds[163443] isUnique[163453]))
    const tmp[163699] "dead at end of block" "const" "insert auto destroy" "temp"
    (544334 'init var' tmp[163699] call_tmp[676890])
    (163706 call _check_tuple_var_decl tmp[163699] 2)
    (482779 'end of statement')
    unknown call_tmp[676895] "maybe param" "maybe type" "temp"
    (676898 'move' call_tmp[676895](163700 call tmp[163699] 0))
    const actualInsertPts[163688] "dead at end of block" "const" "insert auto destroy"
    (544336 'init var' actualInsertPts[163688] call_tmp[676895])
    unknown call_tmp[676900] "maybe param" "maybe type" "temp"
    (676903 'move' call_tmp[676900](163703 call tmp[163699] 1))
    const actualAddCnt[163690] "dead at end of block" "const" "insert auto destroy"
    (544338 'init var' actualAddCnt[163690] call_tmp[676900])
    (163711 'end of statement')
    unknown call_tmp[676907] "maybe param" "maybe type" "temp"
    (676910 'move' call_tmp[676907](387975 call _nnz _mt[243] this[164464]))
    const oldnnz[163713] "dead at end of block" "const" "insert auto destroy"
    (544340 'init var' oldnnz[163713] call_tmp[676907])
    (163716 'end of statement')
    unknown call_tmp[676914] "expr temp" "maybe param" "maybe type" "temp"
    (676917 'move' call_tmp[676914](387980 call _nnz _mt[243] this[164464]))
    (163719 call += call_tmp[676914] actualAddCnt[163690])
    (482780 'end of statement' actualAddCnt[163690])
    (163724 call(387985 call (partial) _bulkGrow _mt[243] this[164464]))
    (482782 'end of statement')
    unknown call_tmp[676923] "expr temp" "maybe param" "maybe type" "temp"
    (676926 'move' call_tmp[676923](462361 call _dom _mt[243] inds[163443]))
    unknown call_tmp[676930] "maybe param" "maybe type" "temp"
    (676933 'move' call_tmp[676930](163727 call high _mt[243] call_tmp[676923]))
    unknown newIndIdx[163730] "dead at end of block" "insert auto destroy"
    (544342 'init var' newIndIdx[163730] call_tmp[676930])
    (163733 'end of statement')
    unknown oldIndIdx[163735] "dead at end of block" "insert auto destroy"
    (544344 'init var' oldIndIdx[163735] oldnnz[163713])
    (163738 'end of statement')
    unknown call_tmp[676935] "maybe param" "maybe type" "temp"
    (676938 'move' call_tmp[676935](163742 call actualInsertPts[163688] newIndIdx[163730]))
    unknown newLoc[163743] "dead at end of block" "insert auto destroy"
    (544346 'init var' newLoc[163743] call_tmp[676935])
    (163746 'end of statement')
    {
      unknown tmp[163785] "temp"
      unknown call_tmp[676940] "expr temp" "maybe param" "maybe type" "temp"
      (676943 'move' call_tmp[676940](163811 call - 1))
      unknown call_tmp[676945] "expr temp" "maybe param" "maybe type" "temp"
      (676948 'move' call_tmp[676945](163808 call == newLoc[163743] call_tmp[676940]))
      (163813 'move' tmp[163785](163806 call _cond_test call_tmp[676945]))
      WhileDo[163790]
      {
        {
          (163755 call -= newIndIdx[163730] 1)
          (482786 'end of statement' newIndIdx[163730])
          unknown call_tmp[676952] "expr temp" "maybe param" "maybe type" "temp"
          (676955 'move' call_tmp[676952](462365 call _dom _mt[243] inds[163443]))
          unknown call_tmp[676959] "expr temp" "maybe param" "maybe type" "temp"
          (676962 'move' call_tmp[676959](163761 call low _mt[243] call_tmp[676952]))
          unknown call_tmp[676964] "expr temp" "maybe param" "maybe type" "temp"
          (676967 'move' call_tmp[676964](163765 call - call_tmp[676959] 1))
          unknown call_tmp[676969] "expr temp" "maybe param" "maybe type" "temp"
          (676972 'move' call_tmp[676969](163767 call == newIndIdx[163730] call_tmp[676964]))
          unknown call_tmp[676974] "expr temp" "maybe param" "maybe type" "temp"
          (676977 'move' call_tmp[676974](163772 call _cond_test call_tmp[676969]))
          if call_tmp[676974]
          {
            break _breakLabel[163789] _breakLabel[163789]
          }
          unknown call_tmp[676979] "expr temp" "maybe param" "maybe type" "temp"
          (676982 'move' call_tmp[676979](163781 call actualInsertPts[163688] newIndIdx[163730]))
          (163782 call = newLoc[163743] call_tmp[676979])
          (482788 'end of statement' newLoc[163743] actualInsertPts[163688] newIndIdx[163730])
        }
        label _continueLabel[163788]
        unknown call_tmp[676984] "expr temp" "maybe param" "maybe type" "temp"
        (676987 'move' call_tmp[676984](163799 call - 1))
        unknown call_tmp[676989] "expr temp" "maybe param" "maybe type" "temp"
        (676992 'move' call_tmp[676989](163796 call == newLoc[163743] call_tmp[676984]))
        (163801 'move' tmp[163785](163794 call _cond_test call_tmp[676989]))
        tmp[163785]
      }
      label _breakLabel[163789]
    }
    unknown arrShiftMap[163829] "dead at end of block" "insert auto destroy"
    unknown call_tmp[676994] "expr temp" "maybe param" "maybe type" "temp"
    (676997 'move' call_tmp[676994](163818 call chpl_build_bounded_range 1 oldnnz[163713]))
    unknown call_tmp[676999] "expr temp" "maybe param" "maybe type" "temp"
    (677002 'move' call_tmp[676999](163821 call chpl__buildDomainExpr call_tmp[676994]))
    unknown call_tmp[677004] "expr temp" "maybe param" "maybe type" "temp"
    (677007 'move' call_tmp[677004](163825 call chpl__ensureDomainExpr call_tmp[676999]))
    unknown call_tmp[677009] "expr temp" "maybe param" "maybe type" "temp"
    (677012 'move' call_tmp[677009](163827 call chpl__buildArrayRuntimeType call_tmp[677004] int(64)[13]))
    (544348 'default init var' arrShiftMap[163829] call_tmp[677009])
    (163832 'end of statement' oldnnz[163713] actualInsertPts[163688] newIndIdx[163730] oldnnz[163713])
    {
      unknown _indexOfInterest[164037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[164038] "expr temp" "temp"
      unknown call_tmp[677016] "expr temp" "maybe param" "maybe type" "temp"
      (677019 'move' call_tmp[677016](388044 call _nnz _mt[243] this[164464]))
      unknown call_tmp[677021] "expr temp" "maybe param" "maybe type" "temp"
      (677024 'move' call_tmp[677021](164054 call - 1))
      unknown call_tmp[677026] "expr temp" "maybe param" "maybe type" "temp"
      (677029 'move' call_tmp[677026](164058 call chpl_direct_range_iter 1 call_tmp[677016] call_tmp[677021]))
      (164047 'move' _iterator[164038](164045 call _getIterator call_tmp[677026]))
      Defer
      {
        {
          (164074 call _freeIterator _iterator[164038])
        }
      }
      { scopeless type
        (164063 'move' _indexOfInterest[164037](164060 call iteratorIndex _iterator[164038]))
      }
      ForLoop[164039]
      {
        unknown i[164067] "index var" "insert auto destroy"
        (482794 'end of statement')
        (164069 'move' i[164067] _indexOfInterest[164037])
        (482795 'end of statement' i[164067])
        {
          unknown tmp[428360] "maybe param" "temp"
          (428371 'move' tmp[428360](163845 call >= oldIndIdx[163735] 1))
          unknown call_tmp[677031] "expr temp" "maybe param" "maybe type" "temp"
          (677034 'move' call_tmp[677031](428373 call _cond_invalid tmp[428360]))
          if call_tmp[677031]
          {
            (428376 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[570406] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570407] "maybe param" "temp"
          unknown call_tmp[677036] "expr temp" "maybe param" "maybe type" "temp"
          (677039 'move' call_tmp[677036](428361 call isTrue tmp[428360]))
          (570412 'move' tmp[570407](570410 call _cond_test call_tmp[677036]))
          if tmp[570407]
          {
            unknown tmp[570414] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[677041] "expr temp" "maybe param" "maybe type" "temp"
            (677044 'move' call_tmp[677041](163849 call > i[164067] newLoc[163743]))
            (570416 'move' tmp[570414](428364 call isTrue call_tmp[677041]))
            (570421 'move' tmp[570406](570418 '_paramFoldLogical' tmp[570407] tmp[570414]))
          }
          {
            (570426 'move' tmp[570406](570423 '_paramFoldLogical' tmp[570407] 0))
          }
          unknown call_tmp[677046] "expr temp" "maybe param" "maybe type" "temp"
          (677049 'move' call_tmp[677046](164031 call _cond_test tmp[570406]))
          if call_tmp[677046]
          {
            unknown call_tmp[677053] "expr temp" "maybe param" "maybe type" "temp"
            (677056 'move' call_tmp[677053](163856 call(388004 call (partial) _indices _mt[243] this[164464]) i[164067]))
            unknown call_tmp[677060] "expr temp" "maybe param" "maybe type" "temp"
            (677063 'move' call_tmp[677060](163860 call(388010 call (partial) _indices _mt[243] this[164464]) oldIndIdx[163735]))
            (163861 call = call_tmp[677053] call_tmp[677060])
            (482798 'end of statement' i[164067] oldIndIdx[163735])
            unknown call_tmp[677065] "expr temp" "maybe param" "maybe type" "temp"
            (677068 'move' call_tmp[677065](163868 call arrShiftMap[163829] oldIndIdx[163735]))
            (163870 call = call_tmp[677065] i[164067])
            (482801 'end of statement' arrShiftMap[163829] oldIndIdx[163735] i[164067])
            (163875 call -= oldIndIdx[163735] 1)
            (482805 'end of statement' oldIndIdx[163735])
          }
          {
            unknown tmp[428339] "maybe param" "temp"
            unknown call_tmp[677072] "expr temp" "maybe param" "maybe type" "temp"
            (677075 'move' call_tmp[677072](462369 call _dom _mt[243] inds[163443]))
            unknown call_tmp[677079] "expr temp" "maybe param" "maybe type" "temp"
            (677082 'move' call_tmp[677079](163880 call low _mt[243] call_tmp[677072]))
            (428350 'move' tmp[428339](163883 call >= newIndIdx[163730] call_tmp[677079]))
            unknown call_tmp[677084] "expr temp" "maybe param" "maybe type" "temp"
            (677087 'move' call_tmp[677084](428352 call _cond_invalid tmp[428339]))
            if call_tmp[677084]
            {
              (428355 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[570433] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[570434] "maybe param" "temp"
            unknown call_tmp[677089] "expr temp" "maybe param" "maybe type" "temp"
            (677092 'move' call_tmp[677089](428340 call isTrue tmp[428339]))
            (570439 'move' tmp[570434](570437 call _cond_test call_tmp[677089]))
            if tmp[570434]
            {
              unknown tmp[570441] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[677094] "expr temp" "maybe param" "maybe type" "temp"
              (677097 'move' call_tmp[677094](163887 call == i[164067] newLoc[163743]))
              (570443 'move' tmp[570441](428343 call isTrue call_tmp[677094]))
              (570448 'move' tmp[570433](570445 '_paramFoldLogical' tmp[570434] tmp[570441]))
            }
            {
              (570453 'move' tmp[570433](570450 '_paramFoldLogical' tmp[570434] 0))
            }
            unknown call_tmp[677099] "expr temp" "maybe param" "maybe type" "temp"
            (677102 'move' call_tmp[677099](164026 call _cond_test tmp[570433]))
            if call_tmp[677099]
            {
              unknown call_tmp[677106] "expr temp" "maybe param" "maybe type" "temp"
              (677109 'move' call_tmp[677106](163894 call(388023 call (partial) _indices _mt[243] this[164464]) i[164067]))
              unknown call_tmp[677111] "expr temp" "maybe param" "maybe type" "temp"
              (677114 'move' call_tmp[677111](163898 call inds[163443] newIndIdx[163730]))
              (163899 call = call_tmp[677106] call_tmp[677111])
              (482808 'end of statement' i[164067] newIndIdx[163730])
              (163905 call -= newIndIdx[163730] 1)
              (482811 'end of statement' newIndIdx[163730])
              unknown call_tmp[677118] "expr temp" "maybe param" "maybe type" "temp"
              (677121 'move' call_tmp[677118](462373 call _dom _mt[243] inds[163443]))
              unknown call_tmp[677125] "expr temp" "maybe param" "maybe type" "temp"
              (677128 'move' call_tmp[677125](163910 call low _mt[243] call_tmp[677118]))
              unknown call_tmp[677130] "expr temp" "maybe param" "maybe type" "temp"
              (677133 'move' call_tmp[677130](163913 call >= newIndIdx[163730] call_tmp[677125]))
              unknown call_tmp[677135] "expr temp" "maybe param" "maybe type" "temp"
              (677138 'move' call_tmp[677135](163930 call _cond_test call_tmp[677130]))
              if call_tmp[677135]
              {
                unknown call_tmp[677140] "expr temp" "maybe param" "maybe type" "temp"
                (677143 'move' call_tmp[677140](163919 call actualInsertPts[163688] newIndIdx[163730]))
                (163920 call = newLoc[163743] call_tmp[677140])
                (482813 'end of statement' newLoc[163743] actualInsertPts[163688] newIndIdx[163730])
              }
              {
                unknown call_tmp[677145] "expr temp" "maybe param" "maybe type" "temp"
                (677148 'move' call_tmp[677145](163925 call - 2))
                (163927 call = newLoc[163743] call_tmp[677145])
                (482817 'end of statement' newLoc[163743])
              }
              {
                unknown tmp[163974] "temp"
                unknown call_tmp[677150] "expr temp" "maybe param" "maybe type" "temp"
                (677153 'move' call_tmp[677150](164000 call - 1))
                unknown call_tmp[677155] "expr temp" "maybe param" "maybe type" "temp"
                (677158 'move' call_tmp[677155](163997 call == newLoc[163743] call_tmp[677150]))
                (164002 'move' tmp[163974](163995 call _cond_test call_tmp[677155]))
                WhileDo[163979]
                {
                  {
                    (163944 call -= newIndIdx[163730] 1)
                    (482819 'end of statement' newIndIdx[163730])
                    unknown call_tmp[677162] "expr temp" "maybe param" "maybe type" "temp"
                    (677165 'move' call_tmp[677162](462377 call _dom _mt[243] inds[163443]))
                    unknown call_tmp[677169] "expr temp" "maybe param" "maybe type" "temp"
                    (677172 'move' call_tmp[677169](163950 call low _mt[243] call_tmp[677162]))
                    unknown call_tmp[677174] "expr temp" "maybe param" "maybe type" "temp"
                    (677177 'move' call_tmp[677174](163954 call - call_tmp[677169] 1))
                    unknown call_tmp[677179] "expr temp" "maybe param" "maybe type" "temp"
                    (677182 'move' call_tmp[677179](163956 call == newIndIdx[163730] call_tmp[677174]))
                    unknown call_tmp[677184] "expr temp" "maybe param" "maybe type" "temp"
                    (677187 'move' call_tmp[677184](163961 call _cond_test call_tmp[677179]))
                    if call_tmp[677184]
                    {
                      break _breakLabel[163978] _breakLabel[163978]
                    }
                    unknown call_tmp[677189] "expr temp" "maybe param" "maybe type" "temp"
                    (677192 'move' call_tmp[677189](163970 call actualInsertPts[163688] newIndIdx[163730]))
                    (163971 call = newLoc[163743] call_tmp[677189])
                    (482821 'end of statement' newLoc[163743] actualInsertPts[163688] newIndIdx[163730])
                  }
                  label _continueLabel[163977]
                  unknown call_tmp[677194] "expr temp" "maybe param" "maybe type" "temp"
                  (677197 'move' call_tmp[677194](163988 call - 1))
                  unknown call_tmp[677199] "expr temp" "maybe param" "maybe type" "temp"
                  (677202 'move' call_tmp[677199](163985 call == newLoc[163743] call_tmp[677194]))
                  (163990 'move' tmp[163974](163983 call _cond_test call_tmp[677199]))
                  tmp[163974]
                }
                label _breakLabel[163978]
              }
            }
            {
              (164024 call halt "Something went wrong")
            }
          }
        }
        label _continueLabel[164042]
        _indexOfInterest[164037]
        _iterator[164038]
      }
      label _breakLabel[164043]
    }
    {
      unknown _indexOfInterest[164094] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[164095] "expr temp" "temp"
      unknown call_tmp[677206] "expr temp" "maybe param" "maybe type" "temp"
      (677209 'move' call_tmp[677206](388049 call _arrs _mt[243] this[164464]))
      (164104 'move' _iterator[164095](164102 call _getIterator call_tmp[677206]))
      Defer
      {
        {
          (164120 call _freeIterator _iterator[164095])
        }
      }
      { scopeless type
        (164109 'move' _indexOfInterest[164094](164106 call iteratorIndex _iterator[164095]))
      }
      ForLoop[164096]
      {
        unknown a[164113] "index var" "insert auto destroy"
        (482827 'end of statement')
        (164115 'move' a[164113] _indexOfInterest[164094])
        (482828 'end of statement' a[164113])
        (164092 call(164086 call (partial) sparseBulkShiftArray _mt[243] a[164113]) arrShiftMap[163829] oldnnz[163713])
        (482830 'end of statement' a[164113] arrShiftMap[163829] oldnnz[163713])
        label _continueLabel[164099]
        _indexOfInterest[164094]
        _iterator[164095]
      }
      label _breakLabel[164100]
    }
    (521755 'move' ret[521740](521754 'deref' actualAddCnt[163690]))
    gotoReturn _end_bulkAdd_help[521738] _end_bulkAdd_help[521738]
    (482834 'end of statement' actualAddCnt[163690])
    label _end_bulkAdd_help[521738]
    (521742 return ret[521740])
    (355278 'used modules list'(163461 'import' Sort[268056]))
    (361311 'referenced modules list' Sort[268056])
  }
  where {
    unknown call_tmp[677215] "expr temp" "maybe param" "maybe type" "temp"
    (677218 'move' call_tmp[677215](387896 call rank _mt[243] this[164464]))
    unknown call_tmp[677222] "expr temp" "maybe param" "maybe type" "temp"
    (677225 'move' call_tmp[677222](387901 call idxType _mt[243] this[164464]))
    unknown call_tmp[677227] "expr temp" "maybe param" "maybe type" "temp"
    (677230 'move' call_tmp[677227](163439 call chpl__buildIndexType call_tmp[677215] call_tmp[677222]))
    unknown call_tmp[677234] "expr temp" "maybe param" "maybe type" "temp"
    (677237 'move' call_tmp[677234](462385 call eltType _mt[243] inds[163443]))
    unknown call_tmp[677239] "expr temp" "maybe param" "maybe type" "temp"
    (677242 'move' call_tmp[677239](462389 call == call_tmp[677227] call_tmp[677234]))
    (462383 call & 1 call_tmp[677239])
  }
  function DefaultSparseDom[164378](?).dsiMyDist[164134](arg _mt[164470]:_MT[238], arg this[164468]:DefaultSparseDom[164378](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521761] "RVV" "temp"
    unknown call_tmp[677246] "expr temp" "maybe param" "maybe type" "temp"
    (677249 'move' call_tmp[677246](388058 call dist _mt[243] this[164468]))
    (521767 'move' ret[521761](521766 'coerce' call_tmp[677246] unmanaged BaseDist[415584]))
    (521763 return ret[521761])
  }
  { scopeless type
    unmanaged BaseDist[415584]
  }
  function DefaultSparseDom[164378](?).dsiClear[164147](arg _mt[164474]:_MT[238], arg this[164472]:DefaultSparseDom[164378](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[677253] "expr temp" "maybe param" "maybe type" "temp"
    (677256 'move' call_tmp[677253](388063 call _nnz _mt[243] this[164472]))
    (164151 call = call_tmp[677253] 0)
    (521769 return _void[55])
  }
  function DefaultSparseDom[164378](?).dimIter[164161](arg _mt[164478]:_MT[238], arg this[164476]:DefaultSparseDom[164378](?), param arg d[164159]:_any[178](?), arg ind[164163]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521773] "RVV" "temp"
    unknown call_tmp[677260] "expr temp" "maybe param" "maybe type" "temp"
    (677263 'move' call_tmp[677260](388069 call rank _mt[243] this[164476]))
    unknown call_tmp[677265] "expr temp" "maybe param" "maybe type" "temp"
    (677268 'move' call_tmp[677265](164168 call - call_tmp[677260] 1))
    unknown call_tmp[677270] "expr temp" "maybe param" "maybe type" "temp"
    (677273 'move' call_tmp[677270](164170 call != d[164159] call_tmp[677265]))
    unknown call_tmp[677275] "expr temp" "maybe param" "maybe type" "temp"
    (677278 'move' call_tmp[677275](164194 call _cond_test call_tmp[677270]))
    if call_tmp[677275]
    {
      (164191 call compilerError "dimIter() not supported on sparse domains for dimensions other than the last")
    }
    (164218 call halt "dimIter() not yet implemented for sparse domains")
    (482839 'end of statement')
    unknown yret[521777] "YVV" "temp"
    unknown call_tmp[677282] "expr temp" "maybe param" "maybe type" "temp"
    (677285 'move' call_tmp[677282](164223 call(388074 call (partial) _indices _mt[243] this[164476]) 0))
    (521780 'move' yret[521777](521779 'deref' call_tmp[677282]))
    (521782 yield yret[521777])
    (521775 return ret[521773])
  }
  function DefaultSparseDom[164378](?).dsiAssignDomain[164234](arg _mt[164482]:_MT[238], arg this[164480]:DefaultSparseDom[164378](?), arg rhs[164231]:_domain[125908](?), arg lhsPrivate[164237]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[428381] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492581] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[677289] "expr temp" "maybe param" "maybe type" "temp"
      (677292 'move' call_tmp[677289](164242 call _instance _mt[243] rhs[164231]))
      (492585 'move' call_type_tmp[492581](164245 'typeof' call_tmp[677289]))
    }
    unknown call_tmp[677294] "expr temp" "maybe param" "maybe type" "temp"
    (677297 'move' call_tmp[677294](164247 call _to_borrowed call_type_tmp[492581]))
    unknown call_tmp[677299] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (677302 'move' call_tmp[677299](164249 'typeof' this[164480]))
    (428392 'move' tmp[428381](164250 call == call_tmp[677294] call_tmp[677299]))
    unknown call_tmp[677304] "expr temp" "maybe param" "maybe type" "temp"
    (677307 'move' call_tmp[677304](428394 call _cond_invalid tmp[428381]))
    if call_tmp[677304]
    {
      (428397 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570460] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570461] "maybe param" "temp"
    unknown call_tmp[677309] "expr temp" "maybe param" "maybe type" "temp"
    (677312 'move' call_tmp[677309](428382 call isTrue tmp[428381]))
    (570466 'move' tmp[570461](570464 call _cond_test call_tmp[677309]))
    if tmp[570461]
    {
      unknown tmp[570468] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[677316] "expr temp" "maybe param" "maybe type" "temp"
      (677319 'move' call_tmp[677316](164253 call dsiNumIndices _mt[243] this[164480]))
      unknown call_tmp[677321] "expr temp" "maybe param" "maybe type" "temp"
      (677324 'move' call_tmp[677321](164257 call == call_tmp[677316] 0))
      (570470 'move' tmp[570468](428385 call isTrue call_tmp[677321]))
      (570475 'move' tmp[570460](570472 '_paramFoldLogical' tmp[570461] tmp[570468]))
    }
    {
      (570480 'move' tmp[570460](570477 '_paramFoldLogical' tmp[570461] 0))
    }
    unknown call_tmp[677326] "expr temp" "maybe param" "maybe type" "temp"
    (677329 'move' call_tmp[677326](164306 call _cond_test tmp[570460]))
    if call_tmp[677326]
    {
      unknown call_tmp[677333] "expr temp" "maybe param" "maybe type" "temp"
      (677336 'move' call_tmp[677333](164264 call _nnz _mt[243] this[164480]))
      unknown call_tmp[677340] "expr temp" "maybe param" "maybe type" "temp"
      (677343 'move' call_tmp[677340](164268 call _nnz _mt[243] rhs[164231]))
      (164271 call = call_tmp[677333] call_tmp[677340])
      (482842 'end of statement')
      unknown call_tmp[677347] "expr temp" "maybe param" "maybe type" "temp"
      (677350 'move' call_tmp[677347](164276 call nnzDom _mt[243] this[164480]))
      unknown call_tmp[677354] "expr temp" "maybe param" "maybe type" "temp"
      (677357 'move' call_tmp[677354](164280 call nnzDom _mt[243] rhs[164231]))
      (164283 call = call_tmp[677347] call_tmp[677354])
      (482843 'end of statement')
      unknown call_tmp[677361] "expr temp" "maybe param" "maybe type" "temp"
      (677364 'move' call_tmp[677361](164289 call _indices _mt[243] this[164480]))
      unknown call_tmp[677368] "expr temp" "maybe param" "maybe type" "temp"
      (677371 'move' call_tmp[677368](164293 call _indices _mt[243] rhs[164231]))
      (164296 call = call_tmp[677361] call_tmp[677368])
    }
    {
      (164303 call chpl_assignDomainWithIndsIterSafeForRemoving this[164480] rhs[164231])
    }
    (521784 return _void[55])
  }
  function DefaultSparseDom[164378](?).dsiHasSingleLocalSubdomain[164315](arg _mt[164486]:_MT[238], arg this[164484]:DefaultSparseDom[164378](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521788] "RVV" "param" "temp"
    (521793 'move' ret[521788](521792 'deref' 1))
    (521790 return ret[521788])
  }
  function DefaultSparseDom[164378](?).dsiLocalSubdomain[164329](arg _mt[164490]:_MT[238], arg this[164488]:DefaultSparseDom[164378](?), arg loc[164326]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521797] "RVV" "temp"
    unknown call_tmp[677373] "expr temp" "maybe param" "maybe type" "temp"
    (677376 'move' call_tmp[677373](164332 '_wide_get_locale' this[164488]))
    unknown call_tmp[677378] "expr temp" "maybe param" "maybe type" "temp"
    (677381 'move' call_tmp[677378](164333 call chpl_localeID_to_locale call_tmp[677373]))
    unknown call_tmp[677383] "expr temp" "maybe param" "maybe type" "temp"
    (677386 'move' call_tmp[677383](164336 call == call_tmp[677378] loc[164326]))
    unknown call_tmp[677388] "expr temp" "maybe param" "maybe type" "temp"
    (677391 'move' call_tmp[677388](164370 call _cond_test call_tmp[677383]))
    if call_tmp[677388]
    {
      unknown call_tmp[677393] "expr temp" "maybe param" "maybe type" "temp"
      (677396 'move' call_tmp[677393](164342 call _to_unmanaged this[164488]))
      unknown call_tmp[677398] "expr temp" "maybe param" "maybe type" "temp"
      (677401 'move' call_tmp[677398](164344 call _getDomain call_tmp[677393]))
      (521802 'move' ret[521797](521801 'deref' call_tmp[677398]))
      gotoReturn _end_dsiLocalSubdomain[521795] _end_dsiLocalSubdomain[521795]
    }
    {
      unknown call_tmp[677405] "expr temp" "maybe param" "maybe type" "temp"
      (677408 'move' call_tmp[677405](388087 call rank _mt[243] this[164488]))
      unknown call_tmp[677412] "expr temp" "maybe param" "maybe type" "temp"
      (677415 'move' call_tmp[677412](388092 call idxType _mt[243] this[164488]))
      unknown call_tmp[677419] "expr temp" "maybe param" "maybe type" "temp"
      (677422 'move' call_tmp[677419](388097 call dist _mt[243] this[164488]))
      unknown call_tmp[677426] "expr temp" "maybe param" "maybe type" "temp"
      (677429 'move' call_tmp[677426](388102 call parentDom _mt[243] this[164488]))
      unknown call_tmp[677431] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (677434 'move' call_tmp[677431](748158 'new' DefaultSparseDom[378145](?) call_tmp[677405] call_tmp[677412] call_tmp[677419] call_tmp[677426](_chpl_manager = unmanaged[220](?))))
      const copy[164358] "dead at end of block" "const" "insert auto destroy"
      (544350 'init var' copy[164358] call_tmp[677431])
      (164361 'end of statement')
      unknown call_tmp[677436] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (677439 'move' call_tmp[677436](748159 'new' _domain[125908](?) copy[164358]))
      (521807 'move' ret[521797](521806 'deref' call_tmp[677436]))
      gotoReturn _end_dsiLocalSubdomain[521795] _end_dsiLocalSubdomain[521795]
      (482848 'end of statement' copy[164358])
    }
    label _end_dsiLocalSubdomain[521795]
    (521799 return ret[521797])
  }
  function DefaultSparseDom[164378](?).super[811460](arg _mt[811462]:_MT[238], arg this[811464]:DefaultSparseDom[164378](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811474] "RVV" "temp"
    unknown call_tmp[811481] "expr temp" "maybe param" "maybe type" "temp"
    (811484 'move' call_tmp[811481](811468 '.v' this[811464] c"super"))
    (811479 'move' ret[811474](811478 'deref' call_tmp[811481]))
    (811476 return ret[811474])
  }
  function DefaultSparseDom[164378](?).dist[811486](arg _mt[811488]:_MT[238], arg this[811490]:DefaultSparseDom[164378](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811500] "RVV" "temp"
    unknown call_tmp[811507] "expr temp" "maybe param" "maybe type" "temp"
    (811510 'move' call_tmp[811507](811494 '.' this[811490] c"dist"))
    (811505 'move' ret[811500](811504 'addr of' call_tmp[811507]))
    (811502 return ret[811500])
  }
  function DefaultSparseDom[164378](?)._nnz[811512](arg _mt[811514]:_MT[238], arg this[811516]:DefaultSparseDom[164378](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811526] "RVV" "temp"
    unknown call_tmp[811533] "expr temp" "maybe param" "maybe type" "temp"
    (811536 'move' call_tmp[811533](811520 '.' this[811516] c"_nnz"))
    (811531 'move' ret[811526](811530 'addr of' call_tmp[811533]))
    (811528 return ret[811526])
  }
  function DefaultSparseDom[164378](?)._indices[811538](arg _mt[811540]:_MT[238], arg this[811542]:DefaultSparseDom[164378](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811552] "RVV" "temp"
    unknown call_tmp[811559] "expr temp" "maybe param" "maybe type" "temp"
    (811562 'move' call_tmp[811559](811546 '.' this[811542] c"_indices"))
    (811557 'move' ret[811552](811556 'addr of' call_tmp[811559]))
    (811554 return ret[811552])
  }
  function DefaultSparseDom[164378](?).deinit[811564](arg _mt[811566]:_MT[238], arg this[811568]:DefaultSparseDom[164378](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (811576 return _void[55])
  }
  function DefaultSparseDom[164378](?).writeThis[811578](arg _mt[811582]:_MT[238], arg this[811580]:DefaultSparseDom[164378](?), arg f[811581]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (811587 call writeThisDefaultImpl f[811581] this[811580])
    (811592 return _void[55])
  }
  function DefaultSparseDom[164378](?).readThis[811594](arg _mt[811598]:_MT[238], arg this[811596]:DefaultSparseDom[164378](?), arg f[811597]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (811602 call readThisDefaultImpl f[811597] this[811596])
    (811608 return _void[55])
  }
  type DefaultSparseDom[164378](?) val super[355803]:BaseSparseDomImpl[148004](?) "delay instantiation" "super class" val dist[161620]:unmanaged DefaultDist[415560] unmanaged DefaultDist[415560] val _nnz[161625]:int(64)[13] 0 unknown _indices[161640] "local field"(161638 call chpl__buildArrayRuntimeType(161636 call chpl__ensureDomainExpr nnzDom[146964])(161634 call chpl__buildIndexType rank[148254] idxType[148258]))
  type DefaultSparseDom[378145](?)
  function DefaultSparseArr[165840](?).init[164500](arg _mt[165844]:_MT[238], arg this[165842]:DefaultSparseArr[165840](?), arg eltType[164498]:_any[178](?), param arg rank[164503]:int(64)[13], arg idxType[164506]:_any[178](?), arg dom[164508]:_any[178](?), param arg initElts[164511]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462392] "temporary of super field" "temp"
    (462394 'move' super_tmp[462392](462391 '.v' this[165842] c"super"))
    (164524 call(164515 call (partial) init _mt[243] super_tmp[462392]) eltType[164498] rank[164503] idxType[164506] dom[164508] initElts[164511])
    (482850 'end of statement')
    unknown tmp[462397] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492587] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[677443] "expr temp" "maybe param" "maybe type" "temp"
      (677446 'move' call_tmp[677443](462399 '.v' this[165842] c"super"))
      (492591 'move' call_type_tmp[492587](462402 'typeof' call_tmp[677443]))
    }
    (462403 'move' tmp[462397] call_type_tmp[492587])
    unknown call_tmp[677448] "maybe param" "maybe type" "temp"
    (677451 'move' call_tmp[677448](462408 'cast' tmp[462397] this[165842]))
    unknown chpl__thisAsParent[462405] "dead at end of block" "insert auto destroy" "temp"
    (544352 'init var' chpl__thisAsParent[462405] call_tmp[677448] tmp[462397])
    (462411 'setcid' chpl__thisAsParent[462405])
    (482851 'end of statement')
    (462413 'setcid' this[165842])
    (521811 return _void[55])
  }
  function DefaultSparseArr[165840](?).dsiAccess[164535](arg _mt[165848]:_MT[238], arg this[165846]:DefaultSparseArr[165840](?), arg ind[164532] :
  (388114 call idxType _mt[243] this[165846])) ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521815] "RVV" "temp"
    unknown call_tmp[677455] "expr temp" "maybe param" "maybe type" "temp"
    (677458 'move' call_tmp[677455](164643 call _cond_test 1))
    if call_tmp[677455]
    {
      unknown call_tmp[677462] "expr temp" "maybe param" "maybe type" "temp"
      (677465 'move' call_tmp[677462](361353 call dom _mt[243] this[165846]))
      unknown call_tmp[677469] "expr temp" "maybe param" "maybe type" "temp"
      (677472 'move' call_tmp[677469](164543 call parentDom _mt[243] call_tmp[677462]))
      unknown call_tmp[677476] "expr temp" "maybe param" "maybe type" "temp"
      (677479 'move' call_tmp[677476](164551 call(164546 call (partial) contains _mt[243] call_tmp[677469]) ind[164532]))
      unknown call_tmp[677481] "expr temp" "maybe param" "maybe type" "temp"
      (677484 'move' call_tmp[677481](164552 call ! call_tmp[677476]))
      unknown call_tmp[677486] "expr temp" "maybe param" "maybe type" "temp"
      (677489 'move' call_tmp[677486](164639 call _cond_test call_tmp[677481]))
      if call_tmp[677486]
      {
        unknown call_tmp[677491] "expr temp" "maybe param" "maybe type" "temp"
        (677494 'move' call_tmp[677491](164628 call _cond_test debugDefaultSparse[161611]))
        if call_tmp[677491]
        {
          unknown call_tmp[677496] "expr temp" "maybe param" "maybe type" "temp"
          (677499 'move' call_tmp[677496](361356 call here[90438]))
          unknown call_tmp[677503] "expr temp" "maybe param" "maybe type" "temp"
          (677506 'move' call_tmp[677503](164575 call id _mt[243] call_tmp[677496]))
          (164578 call writeln "On locale " call_tmp[677503])
          (482853 'end of statement')
          (164601 call writeln "In dsiAccess, got index " ind[164532])
          (482854 'end of statement')
          unknown call_tmp[677510] "expr temp" "maybe param" "maybe type" "temp"
          (677513 'move' call_tmp[677510](361360 call dom _mt[243] this[165846]))
          unknown call_tmp[677517] "expr temp" "maybe param" "maybe type" "temp"
          (677520 'move' call_tmp[677517](164623 call parentDom _mt[243] call_tmp[677510]))
          (164626 call writeln "dom.parentDom = " call_tmp[677517])
        }
        (164637 call halt "array index out of bounds: " ind[164532])
      }
    }
    unknown call_tmp[677524] "expr temp" "maybe param" "maybe type" "temp"
    (677527 'move' call_tmp[677524](361365 call dom _mt[243] this[165846]))
    unknown call_tmp[677531] "maybe param" "maybe type" "temp"
    (677534 'move' call_tmp[677531](164660 call(164655 call (partial) find _mt[243] call_tmp[677524]) ind[164532]))
    const tmp[164661] "dead at end of block" "const" "insert auto destroy" "temp"
    (544354 'init var' tmp[164661] call_tmp[677531])
    (164668 call _check_tuple_var_decl tmp[164661] 2)
    (482857 'end of statement')
    unknown call_tmp[677536] "maybe param" "maybe type" "temp"
    (677539 'move' call_tmp[677536](164662 call tmp[164661] 0))
    const found[164649] "dead at end of block" "const" "insert auto destroy"
    (544356 'init var' found[164649] call_tmp[677536])
    unknown call_tmp[677541] "maybe param" "maybe type" "temp"
    (677544 'move' call_tmp[677541](164665 call tmp[164661] 1))
    const loc[164651] "dead at end of block" "const" "insert auto destroy"
    (544358 'init var' loc[164651] call_tmp[677541])
    (164673 'end of statement')
    unknown call_tmp[677546] "expr temp" "maybe param" "maybe type" "temp"
    (677549 'move' call_tmp[677546](164703 call _cond_test found[164649]))
    if call_tmp[677546]
    {
      unknown call_tmp[677553] "expr temp" "maybe param" "maybe type" "temp"
      (677556 'move' call_tmp[677553](164678 call(388131 call (partial) data _mt[243] this[165846]) loc[164651]))
      (521820 'move' ret[521815](521819 'addr of' call_tmp[677553]))
      gotoReturn _end_dsiAccess[521813] _end_dsiAccess[521813]
      (482858 'end of statement' loc[164651])
    }
    {
      (164701 call halt "attempting to assign a 'zero' value in a sparse array: " ind[164532])
    }
    label _end_dsiAccess[521813]
    (521817 return ret[521815])
  }
  where {
    unknown call_tmp[677560] "expr temp" "maybe param" "maybe type" "temp"
    (677563 'move' call_tmp[677560](388119 call rank _mt[243] this[165846]))
    (164539 call == call_tmp[677560] 1)
  }
  function DefaultSparseArr[165840](?).dsiAccess[164718](arg _mt[165852]:_MT[238], arg this[165850]:DefaultSparseArr[165840](?), arg ind[164715] :
  (388138 call idxType _mt[243] this[165850])) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521826] "RVV" "temp"
    unknown call_tmp[677567] "expr temp" "maybe param" "maybe type" "temp"
    (677570 'move' call_tmp[677567](164748 call _cond_test 1))
    if call_tmp[677567]
    {
      unknown call_tmp[677574] "expr temp" "maybe param" "maybe type" "temp"
      (677577 'move' call_tmp[677574](361370 call dom _mt[243] this[165850]))
      unknown call_tmp[677581] "expr temp" "maybe param" "maybe type" "temp"
      (677584 'move' call_tmp[677581](164726 call parentDom _mt[243] call_tmp[677574]))
      unknown call_tmp[677588] "expr temp" "maybe param" "maybe type" "temp"
      (677591 'move' call_tmp[677588](164734 call(164729 call (partial) contains _mt[243] call_tmp[677581]) ind[164715]))
      unknown call_tmp[677593] "expr temp" "maybe param" "maybe type" "temp"
      (677596 'move' call_tmp[677593](164735 call ! call_tmp[677588]))
      unknown call_tmp[677598] "expr temp" "maybe param" "maybe type" "temp"
      (677601 'move' call_tmp[677598](164743 call _cond_test call_tmp[677593]))
      if call_tmp[677598]
      {
        (164741 call halt "array index out of bounds: " ind[164715])
      }
    }
    unknown call_tmp[677605] "expr temp" "maybe param" "maybe type" "temp"
    (677608 'move' call_tmp[677605](361375 call dom _mt[243] this[165850]))
    unknown call_tmp[677612] "maybe param" "maybe type" "temp"
    (677615 'move' call_tmp[677612](164765 call(164760 call (partial) find _mt[243] call_tmp[677605]) ind[164715]))
    const tmp[164766] "dead at end of block" "const" "insert auto destroy" "temp"
    (544360 'init var' tmp[164766] call_tmp[677612])
    (164773 call _check_tuple_var_decl tmp[164766] 2)
    (482862 'end of statement')
    unknown call_tmp[677617] "maybe param" "maybe type" "temp"
    (677620 'move' call_tmp[677617](164767 call tmp[164766] 0))
    const found[164754] "dead at end of block" "const" "insert auto destroy"
    (544362 'init var' found[164754] call_tmp[677617])
    unknown call_tmp[677622] "maybe param" "maybe type" "temp"
    (677625 'move' call_tmp[677622](164770 call tmp[164766] 1))
    const loc[164756] "dead at end of block" "const" "insert auto destroy"
    (544364 'init var' loc[164756] call_tmp[677622])
    (164778 'end of statement')
    unknown call_tmp[677627] "expr temp" "maybe param" "maybe type" "temp"
    (677630 'move' call_tmp[677627](164789 call _cond_test found[164754]))
    if call_tmp[677627]
    {
      unknown call_tmp[677634] "expr temp" "maybe param" "maybe type" "temp"
      (677637 'move' call_tmp[677634](164783 call(388153 call (partial) data _mt[243] this[165850]) loc[164756]))
      (521831 'move' ret[521826](521830 'addr of' call_tmp[677634]))
      gotoReturn _end_dsiAccess[521824] _end_dsiAccess[521824]
      (482863 'end of statement' loc[164756])
    }
    {
      unknown call_tmp[677641] "expr temp" "maybe param" "maybe type" "temp"
      (677644 'move' call_tmp[677641](388159 call irv _mt[243] this[165850]))
      (521836 'move' ret[521826](521835 'addr of' call_tmp[677641]))
      gotoReturn _end_dsiAccess[521824] _end_dsiAccess[521824]
    }
    label _end_dsiAccess[521824]
    (521828 return ret[521826])
  }
  where {
    unknown call_tmp[677648] "expr temp" "maybe param" "maybe type" "temp"
    (677651 'move' call_tmp[677648](388143 call rank _mt[243] this[165850]))
    (164722 call == call_tmp[677648] 1)
  }
  function DefaultSparseArr[165840](?).dsiAccess[164807](arg _mt[165856]:_MT[238], arg this[165854]:DefaultSparseArr[165840](?), arg ind[164804] :
  unknown call_tmp[677655] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521842] "RVV" "temp"
    unknown call_tmp[677667] "expr temp" "maybe param" "maybe type" "temp"
    (677670 'move' call_tmp[677667](164833 call _cond_test 1))
    if call_tmp[677667]
    {
      unknown call_tmp[677674] "expr temp" "maybe param" "maybe type" "temp"
      (677677 'move' call_tmp[677674](361380 call dom _mt[243] this[165854]))
      unknown call_tmp[677681] "expr temp" "maybe param" "maybe type" "temp"
      (677684 'move' call_tmp[677681](164811 call parentDom _mt[243] call_tmp[677674]))
      unknown call_tmp[677688] "expr temp" "maybe param" "maybe type" "temp"
      (677691 'move' call_tmp[677688](164819 call(164814 call (partial) contains _mt[243] call_tmp[677681]) ind[164804]))
      unknown call_tmp[677693] "expr temp" "maybe param" "maybe type" "temp"
      (677696 'move' call_tmp[677693](164820 call ! call_tmp[677688]))
      unknown call_tmp[677698] "expr temp" "maybe param" "maybe type" "temp"
      (677701 'move' call_tmp[677698](164828 call _cond_test call_tmp[677693]))
      if call_tmp[677698]
      {
        (164826 call halt "array index out of bounds: " ind[164804])
      }
    }
    unknown call_tmp[677705] "expr temp" "maybe param" "maybe type" "temp"
    (677708 'move' call_tmp[677705](361385 call dom _mt[243] this[165854]))
    unknown call_tmp[677712] "maybe param" "maybe type" "temp"
    (677715 'move' call_tmp[677712](164850 call(164845 call (partial) find _mt[243] call_tmp[677705]) ind[164804]))
    const tmp[164851] "dead at end of block" "const" "insert auto destroy" "temp"
    (544366 'init var' tmp[164851] call_tmp[677712])
    (164858 call _check_tuple_var_decl tmp[164851] 2)
    (482867 'end of statement')
    unknown call_tmp[677717] "maybe param" "maybe type" "temp"
    (677720 'move' call_tmp[677717](164852 call tmp[164851] 0))
    const found[164839] "dead at end of block" "const" "insert auto destroy"
    (544368 'init var' found[164839] call_tmp[677717])
    unknown call_tmp[677722] "maybe param" "maybe type" "temp"
    (677725 'move' call_tmp[677722](164855 call tmp[164851] 1))
    const loc[164841] "dead at end of block" "const" "insert auto destroy"
    (544370 'init var' loc[164841] call_tmp[677722])
    (164863 'end of statement')
    unknown call_tmp[677727] "expr temp" "maybe param" "maybe type" "temp"
    (677730 'move' call_tmp[677727](164877 call _cond_test found[164839]))
    if call_tmp[677727]
    {
      unknown call_tmp[677734] "expr temp" "maybe param" "maybe type" "temp"
      (677737 'move' call_tmp[677734](164868 call(388179 call (partial) data _mt[243] this[165854]) loc[164841]))
      (521847 'move' ret[521842](521846 'addr of' call_tmp[677734]))
      gotoReturn _end_dsiAccess[521840] _end_dsiAccess[521840]
      (482868 'end of statement' loc[164841])
    }
    {
      (164875 call halt "attempting to assign a 'zero' value in a sparse array: " ind[164804])
    }
    label _end_dsiAccess[521840]
    (521844 return ret[521842])
  }
  function DefaultSparseArr[165840](?).dsiAccess[164894](arg _mt[165860]:_MT[238], arg this[165858]:DefaultSparseArr[165840](?), arg ind[164891] :
  unknown call_tmp[677741] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[521853] "RVV" "temp"
    unknown call_tmp[677753] "expr temp" "maybe param" "maybe type" "temp"
    (677756 'move' call_tmp[677753](164924 call _cond_test 1))
    if call_tmp[677753]
    {
      unknown call_tmp[677760] "expr temp" "maybe param" "maybe type" "temp"
      (677763 'move' call_tmp[677760](361390 call dom _mt[243] this[165858]))
      unknown call_tmp[677767] "expr temp" "maybe param" "maybe type" "temp"
      (677770 'move' call_tmp[677767](164902 call parentDom _mt[243] call_tmp[677760]))
      unknown call_tmp[677774] "expr temp" "maybe param" "maybe type" "temp"
      (677777 'move' call_tmp[677774](164910 call(164905 call (partial) contains _mt[243] call_tmp[677767]) ind[164891]))
      unknown call_tmp[677779] "expr temp" "maybe param" "maybe type" "temp"
      (677782 'move' call_tmp[677779](164911 call ! call_tmp[677774]))
      unknown call_tmp[677784] "expr temp" "maybe param" "maybe type" "temp"
      (677787 'move' call_tmp[677784](164919 call _cond_test call_tmp[677779]))
      if call_tmp[677784]
      {
        (164917 call halt "array index out of bounds: " ind[164891])
      }
    }
    unknown call_tmp[677791] "expr temp" "maybe param" "maybe type" "temp"
    (677794 'move' call_tmp[677791](361395 call dom _mt[243] this[165858]))
    unknown call_tmp[677798] "maybe param" "maybe type" "temp"
    (677801 'move' call_tmp[677798](164941 call(164936 call (partial) find _mt[243] call_tmp[677791]) ind[164891]))
    const tmp[164942] "dead at end of block" "const" "insert auto destroy" "temp"
    (544372 'init var' tmp[164942] call_tmp[677798])
    (164949 call _check_tuple_var_decl tmp[164942] 2)
    (482872 'end of statement')
    unknown call_tmp[677803] "maybe param" "maybe type" "temp"
    (677806 'move' call_tmp[677803](164943 call tmp[164942] 0))
    const found[164930] "dead at end of block" "const" "insert auto destroy"
    (544374 'init var' found[164930] call_tmp[677803])
    unknown call_tmp[677808] "maybe param" "maybe type" "temp"
    (677811 'move' call_tmp[677808](164946 call tmp[164942] 1))
    const loc[164932] "dead at end of block" "const" "insert auto destroy"
    (544376 'init var' loc[164932] call_tmp[677808])
    (164954 'end of statement')
    unknown call_tmp[677813] "expr temp" "maybe param" "maybe type" "temp"
    (677816 'move' call_tmp[677813](164965 call _cond_test found[164930]))
    if call_tmp[677813]
    {
      unknown call_tmp[677820] "expr temp" "maybe param" "maybe type" "temp"
      (677823 'move' call_tmp[677820](164959 call(388206 call (partial) data _mt[243] this[165858]) loc[164932]))
      (521858 'move' ret[521853](521857 'deref' call_tmp[677820]))
      gotoReturn _end_dsiAccess[521851] _end_dsiAccess[521851]
      (482873 'end of statement' loc[164932])
    }
    {
      unknown call_tmp[677827] "expr temp" "maybe param" "maybe type" "temp"
      (677830 'move' call_tmp[677827](388212 call irv _mt[243] this[165858]))
      (521863 'move' ret[521853](521862 'deref' call_tmp[677827]))
      gotoReturn _end_dsiAccess[521851] _end_dsiAccess[521851]
    }
    label _end_dsiAccess[521851]
    (521855 return ret[521853])
  }
  where {
    unknown call_tmp[677834] "expr temp" "maybe param" "maybe type" "temp"
    (677837 'move' call_tmp[677834](388196 call eltType _mt[243] this[165858]))
    (164899 call shouldReturnRvalueByValue call_tmp[677834])
  }
  function DefaultSparseArr[165840](?).dsiAccess[164983](arg _mt[165864]:_MT[238], arg this[165862]:DefaultSparseArr[165840](?), arg ind[164980] :
  unknown call_tmp[677841] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521869] "RVV" "temp"
    unknown call_tmp[677853] "expr temp" "maybe param" "maybe type" "temp"
    (677856 'move' call_tmp[677853](165013 call _cond_test 1))
    if call_tmp[677853]
    {
      unknown call_tmp[677860] "expr temp" "maybe param" "maybe type" "temp"
      (677863 'move' call_tmp[677860](361400 call dom _mt[243] this[165862]))
      unknown call_tmp[677867] "expr temp" "maybe param" "maybe type" "temp"
      (677870 'move' call_tmp[677867](164991 call parentDom _mt[243] call_tmp[677860]))
      unknown call_tmp[677874] "expr temp" "maybe param" "maybe type" "temp"
      (677877 'move' call_tmp[677874](164999 call(164994 call (partial) contains _mt[243] call_tmp[677867]) ind[164980]))
      unknown call_tmp[677879] "expr temp" "maybe param" "maybe type" "temp"
      (677882 'move' call_tmp[677879](165000 call ! call_tmp[677874]))
      unknown call_tmp[677884] "expr temp" "maybe param" "maybe type" "temp"
      (677887 'move' call_tmp[677884](165008 call _cond_test call_tmp[677879]))
      if call_tmp[677884]
      {
        (165006 call halt "array index out of bounds: " ind[164980])
      }
    }
    unknown call_tmp[677891] "expr temp" "maybe param" "maybe type" "temp"
    (677894 'move' call_tmp[677891](361405 call dom _mt[243] this[165862]))
    unknown call_tmp[677898] "maybe param" "maybe type" "temp"
    (677901 'move' call_tmp[677898](165030 call(165025 call (partial) find _mt[243] call_tmp[677891]) ind[164980]))
    const tmp[165031] "dead at end of block" "const" "insert auto destroy" "temp"
    (544378 'init var' tmp[165031] call_tmp[677898])
    (165038 call _check_tuple_var_decl tmp[165031] 2)
    (482877 'end of statement')
    unknown call_tmp[677903] "maybe param" "maybe type" "temp"
    (677906 'move' call_tmp[677903](165032 call tmp[165031] 0))
    const found[165019] "dead at end of block" "const" "insert auto destroy"
    (544380 'init var' found[165019] call_tmp[677903])
    unknown call_tmp[677908] "maybe param" "maybe type" "temp"
    (677911 'move' call_tmp[677908](165035 call tmp[165031] 1))
    const loc[165021] "dead at end of block" "const" "insert auto destroy"
    (544382 'init var' loc[165021] call_tmp[677908])
    (165043 'end of statement')
    unknown call_tmp[677913] "expr temp" "maybe param" "maybe type" "temp"
    (677916 'move' call_tmp[677913](165054 call _cond_test found[165019]))
    if call_tmp[677913]
    {
      unknown call_tmp[677920] "expr temp" "maybe param" "maybe type" "temp"
      (677923 'move' call_tmp[677920](165048 call(388237 call (partial) data _mt[243] this[165862]) loc[165021]))
      (521874 'move' ret[521869](521873 'addr of' call_tmp[677920]))
      gotoReturn _end_dsiAccess[521867] _end_dsiAccess[521867]
      (482878 'end of statement' loc[165021])
    }
    {
      unknown call_tmp[677927] "expr temp" "maybe param" "maybe type" "temp"
      (677930 'move' call_tmp[677927](388243 call irv _mt[243] this[165862]))
      (521879 'move' ret[521869](521878 'addr of' call_tmp[677927]))
      gotoReturn _end_dsiAccess[521867] _end_dsiAccess[521867]
    }
    label _end_dsiAccess[521867]
    (521871 return ret[521869])
  }
  where {
    unknown call_tmp[677934] "expr temp" "maybe param" "maybe type" "temp"
    (677937 'move' call_tmp[677934](388227 call eltType _mt[243] this[165862]))
    (164988 call shouldReturnRvalueByConstRef call_tmp[677934])
  }
  function DefaultSparseArr[165840](?).these[165065](arg _mt[165868]:_MT[238], arg this[165866]:DefaultSparseArr[165840](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521885] "RVV" "temp"
    {
      unknown _indexOfInterest[165081] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165082] "expr temp" "temp"
      unknown call_tmp[677941] "expr temp" "maybe param" "maybe type" "temp"
      (677944 'move' call_tmp[677941](361410 call dom _mt[243] this[165866]))
      unknown call_tmp[677948] "expr temp" "maybe param" "maybe type" "temp"
      (677951 'move' call_tmp[677948](165096 call _nnz _mt[243] call_tmp[677941]))
      unknown call_tmp[677953] "expr temp" "maybe param" "maybe type" "temp"
      (677956 'move' call_tmp[677953](165099 call chpl_direct_range_iter 1 call_tmp[677948] 1))
      (165091 'move' _iterator[165082](165089 call _getIterator call_tmp[677953]))
      Defer
      {
        {
          (165115 call _freeIterator _iterator[165082])
        }
      }
      { scopeless type
        (165104 'move' _indexOfInterest[165081](165101 call iteratorIndex _iterator[165082]))
      }
      ForLoop[165083]
      {
        unknown i[165108] "index var" "insert auto destroy"
        (482882 'end of statement')
        (165110 'move' i[165108] _indexOfInterest[165081])
        (482883 'end of statement' i[165108])
        unknown yret[521889] "YVV" "temp"
        unknown call_tmp[677960] "expr temp" "maybe param" "maybe type" "temp"
        (677963 'move' call_tmp[677960](165078 call(388248 call (partial) data _mt[243] this[165866]) i[165108]))
        (521892 'move' yret[521889](521891 'addr of' call_tmp[677960]))
        (521894 yield yret[521889])
        (482885 'end of statement' i[165108])
        label _continueLabel[165086]
        _indexOfInterest[165081]
        _iterator[165082]
      }
      label _breakLabel[165087]
    }
    (521887 return ret[521885])
  }
  function DefaultSparseArr[165840](?).these[165131](arg _mt[165872]:_MT[238], arg this[165870]:DefaultSparseArr[165840](?), param arg tag[165128]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521898] "RVV" "temp"
    unknown call_tmp[677967] "expr temp" "maybe param" "maybe type" "temp"
    (677970 'move' call_tmp[677967](361416 call dom _mt[243] this[165870]))
    unknown call_tmp[677974] "maybe param" "maybe type" "temp"
    (677977 'move' call_tmp[677974](165141 call _nnz _mt[243] call_tmp[677967]))
    const numElems[165144] "dead at end of block" "const" "insert auto destroy"
    (544384 'init var' numElems[165144] call_tmp[677974])
    (165147 'end of statement')
    unknown call_tmp[677979] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (677982 'move' call_tmp[677979](165154 'typeof' numElems[165144]))
    unknown call_tmp[677984] "expr temp" "maybe param" "maybe type" "temp"
    (677987 'move' call_tmp[677984](165152 call _computeNumChunks numElems[165144]))
    unknown call_tmp[677989] "maybe param" "maybe type" "temp"
    (677992 'move' call_tmp[677989](165155 call _cast call_tmp[677979] call_tmp[677984]))
    const numChunks[165157] "dead at end of block" "const" "insert auto destroy"
    (544386 'init var' numChunks[165157] call_tmp[677989])
    (165160 'end of statement' numElems[165144] numElems[165144])
    unknown call_tmp[677994] "expr temp" "maybe param" "maybe type" "temp"
    (677997 'move' call_tmp[677994](165188 call _cond_test debugDefaultSparse[161611]))
    if call_tmp[677994]
    {
      (165185 call writeln "DefaultSparseArr standalone: " numChunks[165157] " chunks, " numElems[165144] " elems")
      (482889 'end of statement' numChunks[165157] numElems[165144])
    }
    unknown call_tmp[677999] "expr temp" "maybe param" "maybe type" "temp"
    (678002 'move' call_tmp[677999](165194 call <= numChunks[165157] 1))
    unknown call_tmp[678004] "expr temp" "maybe param" "maybe type" "temp"
    (678007 'move' call_tmp[678004](165498 call _cond_test call_tmp[677999]))
    if call_tmp[678004]
    {
      {
        unknown _indexOfInterest[165208] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[165209] "expr temp" "temp"
        unknown call_tmp[678009] "expr temp" "maybe param" "maybe type" "temp"
        (678012 'move' call_tmp[678009](165223 call chpl_direct_range_iter 1 numElems[165144] 1))
        (165218 'move' _iterator[165209](165216 call _getIterator call_tmp[678009]))
        Defer
        {
          {
            (165239 call _freeIterator _iterator[165209])
          }
        }
        { scopeless type
          (165228 'move' _indexOfInterest[165208](165225 call iteratorIndex _iterator[165209]))
        }
        ForLoop[165210]
        {
          unknown i[165232] "index var" "insert auto destroy"
          (482893 'end of statement')
          (165234 'move' i[165232] _indexOfInterest[165208])
          (482894 'end of statement' i[165232])
          {
            unknown yret[521902] "YVV" "temp"
            unknown call_tmp[678016] "expr temp" "maybe param" "maybe type" "temp"
            (678019 'move' call_tmp[678016](165204 call(388262 call (partial) data _mt[243] this[165870]) i[165232]))
            (521905 'move' yret[521902](521904 'addr of' call_tmp[678016]))
            (521907 yield yret[521902])
            (482896 'end of statement' i[165232])
          }
          label _continueLabel[165213]
          _indexOfInterest[165208]
          _iterator[165209]
        }
        label _breakLabel[165214]
      }
    }
    {
      {
        unknown tmpIter[165301] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[678021] "expr temp" "maybe param" "maybe type" "temp"
        (678024 'move' call_tmp[678021](165254 call chpl_build_bounded_range 1 numElems[165144]))
        (165304 'move' tmpIter[165301](165258 call chunks module=[255] RangeChunk[266546] call_tmp[678021] numChunks[165157]))
        unknown isRngDomArr[165478] "maybe param" "temp"
        unknown tmp[428402] "maybe param" "temp"
        (428413 'move' tmp[428402](165480 call isBoundedRange tmpIter[165301]))
        unknown call_tmp[678026] "expr temp" "maybe param" "maybe type" "temp"
        (678029 'move' call_tmp[678026](428415 call _cond_invalid tmp[428402]))
        if call_tmp[678026]
        {
          (428418 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570514] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570515] "maybe param" "temp"
        unknown call_tmp[678031] "expr temp" "maybe param" "maybe type" "temp"
        (678034 'move' call_tmp[678031](428403 call isTrue tmp[428402]))
        (570520 'move' tmp[570515](570518 call _cond_test call_tmp[678031]))
        if tmp[570515]
        {
          (570525 'move' tmp[570514](570522 '_paramFoldLogical' tmp[570515] 1))
        }
        {
          unknown tmp[428423] "maybe param" "temp"
          (428434 'move' tmp[428423](165483 call isDomain tmpIter[165301]))
          unknown call_tmp[678036] "expr temp" "maybe param" "maybe type" "temp"
          (678039 'move' call_tmp[678036](428436 call _cond_invalid tmp[428423]))
          if call_tmp[678036]
          {
            (428439 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[570487] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570488] "maybe param" "temp"
          unknown call_tmp[678041] "expr temp" "maybe param" "maybe type" "temp"
          (678044 'move' call_tmp[678041](428424 call isTrue tmp[428423]))
          (570493 'move' tmp[570488](570491 call _cond_test call_tmp[678041]))
          if tmp[570488]
          {
            (570498 'move' tmp[570487](570495 '_paramFoldLogical' tmp[570488] 1))
          }
          {
            unknown tmp[570500] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[678046] "expr temp" "maybe param" "maybe type" "temp"
            (678049 'move' call_tmp[678046](165486 call isArray tmpIter[165301]))
            (570502 'move' tmp[570500](428428 call isTrue call_tmp[678046]))
            (570507 'move' tmp[570487](570504 '_paramFoldLogical' tmp[570488] tmp[570500]))
          }
          unknown tmp[570527] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (570529 'move' tmp[570527](428407 call isTrue tmp[570487]))
          (570534 'move' tmp[570514](570531 '_paramFoldLogical' tmp[570515] tmp[570527]))
        }
        (165493 'move' isRngDomArr[165478] tmp[570514])
        if isRngDomArr[165478]
        {
          const _coforallCount[165345] "const" "end count" "temp"
          (165414 'move' _coforallCount[165345](165411 call _endCountAlloc 1))
          unknown numTasks[165346] "temp"
          (165398 'move' numTasks[165346](165394 call size _mt[243] tmpIter[165301]))
          (165389 call _upEndCount _coforallCount[165345] 1 numTasks[165346])
          (482899 'end of statement')
          (165386 call chpl_resetTaskSpawn numTasks[165346])
          (482900 'end of statement')
          unknown _indexOfInterest[165353] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165354] "expr temp" "temp"
          (165363 'move' _iterator[165354](165361 call _getIterator tmpIter[165301]))
          Defer
          {
            {
              (165379 call _freeIterator _iterator[165354])
            }
          }
          { scopeless type
            (165368 'move' _indexOfInterest[165353](165365 call iteratorIndex _iterator[165354]))
          }
          ForLoop[165355]
          {
            unknown chunk[165372] "coforall index var" "index var" "insert auto destroy"
            (482902 'end of statement')
            (165374 'move' chunk[165372] _indexOfInterest[165353])
            (482903 'end of statement' chunk[165372])
            (935515 call coforall_fn[935513])
            function coforall_fn[935513]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[165307] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165309] "expr temp" "temp"
                (165311 'move' _iterator[165309](165314 call _getIterator chunk[165372]))
                Defer
                {
                  {
                    (165318 call _freeIterator _iterator[165309])
                  }
                }
                { scopeless type
                  (165322 'move' _indexOfInterest[165307](165325 call iteratorIndex _iterator[165309]))
                }
                ForLoop[165327]
                {
                  unknown i[165330] "index var" "insert auto destroy"
                  (482906 'end of statement')
                  (165332 'move' i[165330] _indexOfInterest[165307])
                  (482907 'end of statement' i[165330])
                  unknown yret[521909] "YVV" "temp"
                  unknown call_tmp[678055] "expr temp" "maybe param" "maybe type" "temp"
                  (678058 'move' call_tmp[678055](165338 call(388279 call (partial) data _mt[243] this[165870]) i[165330]))
                  (521912 'move' yret[521909](521911 'addr of' call_tmp[678055]))
                  (521914 yield yret[521909])
                  (482909 'end of statement' i[165330])
                  label _continueLabel[165340]
                  _indexOfInterest[165307]
                  _iterator[165309]
                }
                label _breakLabel[165342]
              }
              (165348 call _downEndCount _coforallCount[165345] nil[44])
              (935518 return _void[55])
            }
            {
            }
            label _continueLabel[165358]
            _indexOfInterest[165353]
            _iterator[165354]
          }
          label _breakLabel[165359]
          Defer
          {
            {
              (165401 call _endCountFree _coforallCount[165345])
            }
          }
          (165406 call _waitEndCount _coforallCount[165345] 1 numTasks[165346])
        }
        {
          const _coforallCount[165418] "const" "end count" "temp"
          (165475 'move' _coforallCount[165418](165472 call _endCountAlloc 1))
          unknown _indexOfInterest[165426] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165427] "expr temp" "temp"
          (165436 'move' _iterator[165427](165434 call _getIterator tmpIter[165301]))
          Defer
          {
            {
              (165452 call _freeIterator _iterator[165427])
            }
          }
          { scopeless type
            (165441 'move' _indexOfInterest[165426](165438 call iteratorIndex _iterator[165427]))
          }
          ForLoop[165428]
          {
            unknown chunk[165445] "coforall index var" "index var" "insert auto destroy"
            (482915 'end of statement')
            (165447 'move' chunk[165445] _indexOfInterest[165426])
            (482916 'end of statement' chunk[165445])
            (165459 call _upEndCount _coforallCount[165418] 1)
            (482918 'end of statement')
            (935522 call coforall_fn[935520])
            function coforall_fn[935520]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[165267] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165268] "expr temp" "temp"
                (165277 'move' _iterator[165268](165275 call _getIterator chunk[165445]))
                Defer
                {
                  {
                    (165293 call _freeIterator _iterator[165268])
                  }
                }
                { scopeless type
                  (165282 'move' _indexOfInterest[165267](165279 call iteratorIndex _iterator[165268]))
                }
                ForLoop[165269]
                {
                  unknown i[165286] "index var" "insert auto destroy"
                  (482920 'end of statement')
                  (165288 'move' i[165286] _indexOfInterest[165267])
                  (482921 'end of statement' i[165286])
                  unknown yret[521916] "YVV" "temp"
                  unknown call_tmp[678062] "expr temp" "maybe param" "maybe type" "temp"
                  (678065 'move' call_tmp[678062](165264 call(388272 call (partial) data _mt[243] this[165870]) i[165286]))
                  (521919 'move' yret[521916](521918 'addr of' call_tmp[678062]))
                  (521921 yield yret[521916])
                  (482923 'end of statement' i[165286])
                  label _continueLabel[165272]
                  _indexOfInterest[165267]
                  _iterator[165268]
                }
                label _breakLabel[165273]
              }
              (165421 call _downEndCount _coforallCount[165418] nil[44])
              (935525 return _void[55])
            }
            {
            }
            label _continueLabel[165431]
            _indexOfInterest[165426]
            _iterator[165427]
          }
          label _breakLabel[165432]
          Defer
          {
            {
              (165463 call _endCountFree _coforallCount[165418])
            }
          }
          (165468 call _waitEndCount _coforallCount[165418] 1)
        }
        (361420 'referenced modules list' RangeChunk[266546])
      }
    }
    (521900 return ret[521898])
  }
  where {
    (165138 call == tag[165128] standalone[451])
  }
  function DefaultSparseArr[165840](?).these[165511](arg _mt[165876]:_MT[238], arg this[165874]:DefaultSparseArr[165840](?), param arg tag[165508]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521925] "RVV" "temp"
    {
      unknown _indexOfInterest[165531] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165532] "expr temp" "temp"
      unknown call_tmp[678069] "expr temp" "maybe param" "maybe type" "temp"
      (678072 'move' call_tmp[678069](361428 call dom _mt[243] this[165874]))
      unknown call_tmp[678076] "expr temp" "maybe param" "maybe type" "temp"
      (678079 'move' call_tmp[678076](165527 call(165522 call (partial) these _mt[243] call_tmp[678069]) tag[165508]))
      (165541 'move' _iterator[165532](165539 call _getIterator call_tmp[678076]))
      Defer
      {
        {
          (165558 call _freeIterator _iterator[165532])
        }
      }
      { scopeless type
        (165547 'move' _indexOfInterest[165531](165544 call iteratorIndex _iterator[165532]))
      }
      ForLoop[165533]
      {
        unknown followThis[165551] "index var" "insert auto destroy"
        (482929 'end of statement')
        (165553 'move' followThis[165551] _indexOfInterest[165531])
        (482930 'end of statement' followThis[165551])
        unknown yret[521929] "YVV" "temp"
        (521932 'move' yret[521929](521931 'deref' followThis[165551]))
        (521934 yield yret[521929])
        (482932 'end of statement' followThis[165551])
        label _continueLabel[165536]
        _indexOfInterest[165531]
        _iterator[165532]
      }
      label _breakLabel[165537]
    }
    (521927 return ret[521925])
  }
  where {
    (165518 call == tag[165508] leader[447])
  }
  function DefaultSparseArr[165840](?).these[165575](arg _mt[165880]:_MT[238], arg this[165878]:DefaultSparseArr[165840](?), param arg tag[165572]:iterKind[453], arg followThis[165583]:_tuple[56202](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521938] "RVV" "temp"
    unknown tmp[165601] "dead at end of block" "insert auto destroy" "temp"
    (544388 'init var' tmp[165601] followThis[165583])
    (165611 call _check_tuple_var_decl tmp[165601] 3)
    (482934 'end of statement')
    unknown call_tmp[678081] "maybe param" "maybe type" "temp"
    (678084 'move' call_tmp[678081](165602 call tmp[165601] 0))
    unknown followThisDom[165593] "dead at end of block" "insert auto destroy"
    (544390 'init var' followThisDom[165593] call_tmp[678081])
    unknown call_tmp[678086] "maybe param" "maybe type" "temp"
    (678089 'move' call_tmp[678086](165605 call tmp[165601] 1))
    unknown startIx[165595] "dead at end of block" "insert auto destroy"
    (544392 'init var' startIx[165595] call_tmp[678086])
    unknown call_tmp[678091] "maybe param" "maybe type" "temp"
    (678094 'move' call_tmp[678091](165608 call tmp[165601] 2))
    unknown endIx[165597] "dead at end of block" "insert auto destroy"
    (544394 'init var' endIx[165597] call_tmp[678091])
    (165616 'end of statement')
    unknown call_tmp[678098] "expr temp" "maybe param" "maybe type" "temp"
    (678101 'move' call_tmp[678098](165620 call dom _mt[243] this[165878]))
    unknown call_tmp[678103] "expr temp" "maybe param" "maybe type" "temp"
    (678106 'move' call_tmp[678103](165623 call != followThisDom[165593] call_tmp[678098]))
    unknown call_tmp[678108] "expr temp" "maybe param" "maybe type" "temp"
    (678111 'move' call_tmp[678108](165646 call _cond_test call_tmp[678103]))
    if call_tmp[678108]
    {
      (165644 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays")
    }
    unknown call_tmp[678113] "expr temp" "maybe param" "maybe type" "temp"
    (678116 'move' call_tmp[678113](165676 call _cond_test debugDefaultSparse[161611]))
    if call_tmp[678113]
    {
      (165674 call writeln "DefaultSparseArr follower: " startIx[165595] ".." endIx[165597])
      (482936 'end of statement' startIx[165595] endIx[165597])
    }
    {
      unknown _indexOfInterest[165692] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165693] "expr temp" "temp"
      unknown call_tmp[678118] "expr temp" "maybe param" "maybe type" "temp"
      (678121 'move' call_tmp[678118](165707 call chpl_direct_range_iter startIx[165595] endIx[165597] 1))
      (165702 'move' _iterator[165693](165700 call _getIterator call_tmp[678118]))
      Defer
      {
        {
          (165723 call _freeIterator _iterator[165693])
        }
      }
      { scopeless type
        (165712 'move' _indexOfInterest[165692](165709 call iteratorIndex _iterator[165693]))
      }
      ForLoop[165694]
      {
        unknown i[165716] "index var" "insert auto destroy"
        (482940 'end of statement')
        (165718 'move' i[165716] _indexOfInterest[165692])
        (482941 'end of statement' i[165716])
        unknown yret[521942] "YVV" "temp"
        unknown call_tmp[678125] "expr temp" "maybe param" "maybe type" "temp"
        (678128 'move' call_tmp[678125](165689 call(388296 call (partial) data _mt[243] this[165878]) i[165716]))
        (521945 'move' yret[521942](521944 'addr of' call_tmp[678125]))
        (521947 yield yret[521942])
        (482943 'end of statement' i[165716])
        label _continueLabel[165697]
        _indexOfInterest[165692]
        _iterator[165693]
      }
      label _breakLabel[165698]
    }
    (521940 return ret[521938])
  }
  where {
    unknown call_tmp[678130] "expr temp" "maybe param" "maybe type" "temp"
    (678133 'move' call_tmp[678130](165591 call == tag[165572] follower[449]))
    unknown call_tmp[678135] "expr temp" "maybe param" "maybe type" "temp"
    (678138 'move' call_tmp[678135](462419 'query' followThis[165583] c"size"))
    unknown call_tmp[678140] "expr temp" "maybe param" "maybe type" "temp"
    (678143 'move' call_tmp[678140](462420 call == 3 call_tmp[678135]))
    (462422 call & call_tmp[678130] call_tmp[678140])
  }
  function DefaultSparseArr[165840](?).these[165739](arg _mt[165884]:_MT[238], arg this[165882]:DefaultSparseArr[165840](?), param arg tag[165736]:iterKind[453], arg followThis[165741]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521951] "RVV" "temp"
    (165753 call compilerError "Sparse iterators can't yet be zippered with others")
    (482945 'end of statement')
    unknown yret[521955] "YVV" "temp"
    (521958 'move' yret[521955](521957 'deref' 0))
    (521960 yield yret[521955])
    (521953 return ret[521951])
  }
  where {
    (165748 call == tag[165736] follower[449])
  }
  function DefaultSparseArr[165840](?).dsiTargetLocales[165764](arg _mt[165888]:_MT[238], arg this[165886]:DefaultSparseArr[165840](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (165785 call compilerError "targetLocales is unsupported by sparse domains")
    (521962 return _void[55])
  }
  function DefaultSparseArr[165840](?).dsiHasSingleLocalSubdomain[165792](arg _mt[165892]:_MT[238], arg this[165890]:DefaultSparseArr[165840](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521966] "RVV" "param" "temp"
    (521971 'move' ret[521966](521970 'deref' 1))
    (521968 return ret[521966])
  }
  function DefaultSparseArr[165840](?).dsiLocalSubdomain[165806](arg _mt[165896]:_MT[238], arg this[165894]:DefaultSparseArr[165840](?), arg loc[165803]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521975] "RVV" "temp"
    unknown call_tmp[678145] "expr temp" "maybe param" "maybe type" "temp"
    (678148 'move' call_tmp[678145](165809 '_wide_get_locale' this[165894]))
    unknown call_tmp[678150] "expr temp" "maybe param" "maybe type" "temp"
    (678153 'move' call_tmp[678150](165810 call chpl_localeID_to_locale call_tmp[678145]))
    unknown call_tmp[678155] "expr temp" "maybe param" "maybe type" "temp"
    (678158 'move' call_tmp[678155](165813 call == call_tmp[678150] loc[165803]))
    unknown call_tmp[678160] "expr temp" "maybe param" "maybe type" "temp"
    (678163 'move' call_tmp[678160](165832 call _cond_test call_tmp[678155]))
    if call_tmp[678160]
    {
      unknown call_tmp[678167] "expr temp" "maybe param" "maybe type" "temp"
      (678170 'move' call_tmp[678167](388308 call dom _mt[243] this[165894]))
      unknown call_tmp[678172] "expr temp" "maybe param" "maybe type" "temp"
      (678175 'move' call_tmp[678172](165818 call _getDomain call_tmp[678167]))
      (521980 'move' ret[521975](521979 'deref' call_tmp[678172]))
      gotoReturn _end_dsiLocalSubdomain[521973] _end_dsiLocalSubdomain[521973]
    }
    {
      unknown call_tmp[678179] "expr temp" "maybe param" "maybe type" "temp"
      (678182 'move' call_tmp[678179](361436 call dom _mt[243] this[165894]))
      unknown call_tmp[678186] "expr temp" "maybe param" "maybe type" "temp"
      (678189 'move' call_tmp[678186](165828 call(165823 call (partial) dsiLocalSubdomain _mt[243] call_tmp[678179]) loc[165803]))
      (521985 'move' ret[521975](521984 'deref' call_tmp[678186]))
      gotoReturn _end_dsiLocalSubdomain[521973] _end_dsiLocalSubdomain[521973]
    }
    label _end_dsiLocalSubdomain[521973]
    (521977 return ret[521975])
  }
  function DefaultSparseArr[165840](?).super[811610](arg _mt[811612]:_MT[238], arg this[811614]:DefaultSparseArr[165840](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811624] "RVV" "temp"
    unknown call_tmp[811631] "expr temp" "maybe param" "maybe type" "temp"
    (811634 'move' call_tmp[811631](811618 '.v' this[811614] c"super"))
    (811629 'move' ret[811624](811628 'deref' call_tmp[811631]))
    (811626 return ret[811624])
  }
  function DefaultSparseArr[165840](?).deinit[811636](arg _mt[811638]:_MT[238], arg this[811640]:DefaultSparseArr[165840](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (811648 return _void[55])
  }
  type DefaultSparseArr[165840](?) val super[355805]:BaseSparseArrImpl[150571](?) "delay instantiation" "super class"
  type DefaultSparseArr[387537](?)
  function DefaultSparseDom[164378](?).dsiSerialWrite[165904](arg _mt[165913]:_MT[238], arg this[165910]:DefaultSparseDom[164378](?) :
  DefaultSparseDom[164378](?), arg f[165902]:_any[178](?), arg printBrackets[165907] :
  1 =
  1) : _unknown[51] throws "method" "no return value for void"
  {
    unknown call_tmp[678193] "expr temp" "maybe param" "maybe type" "temp"
    (678196 'move' call_tmp[678193](388314 call rank _mt[243] this[165910]))
    unknown call_tmp[678198] "expr temp" "maybe param" "maybe type" "temp"
    (678201 'move' call_tmp[678198](165917 call == call_tmp[678193] 1))
    unknown call_tmp[678203] "expr temp" "maybe param" "maybe type" "temp"
    (678206 'move' call_tmp[678203](166182 call _cond_test call_tmp[678198]))
    if call_tmp[678203]
    {
      unknown call_tmp[678208] "expr temp" "maybe param" "maybe type" "temp"
      (678211 'move' call_tmp[678208](165925 call _cond_test printBrackets[165907]))
      if call_tmp[678208]
      {
        (165922 call <~> f[165902] "{")
      }
      unknown call_tmp[678215] "expr temp" "maybe param" "maybe type" "temp"
      (678218 'move' call_tmp[678215](388321 call _nnz _mt[243] this[165910]))
      unknown call_tmp[678220] "expr temp" "maybe param" "maybe type" "temp"
      (678223 'move' call_tmp[678220](165933 call >= call_tmp[678215] 1))
      unknown call_tmp[678225] "expr temp" "maybe param" "maybe type" "temp"
      (678228 'move' call_tmp[678225](165999 call _cond_test call_tmp[678220]))
      if call_tmp[678225]
      {
        unknown call_tmp[678232] "expr temp" "maybe param" "maybe type" "temp"
        (678235 'move' call_tmp[678232](165939 call(388327 call (partial) _indices _mt[243] this[165910]) 1))
        (165940 call <~> f[165902] call_tmp[678232])
        (482952 'end of statement')
        {
          unknown _indexOfInterest[165961] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165962] "expr temp" "temp"
          unknown call_tmp[678239] "expr temp" "maybe param" "maybe type" "temp"
          (678242 'move' call_tmp[678239](388339 call _nnz _mt[243] this[165910]))
          unknown call_tmp[678244] "expr temp" "maybe param" "maybe type" "temp"
          (678247 'move' call_tmp[678244](165976 call chpl_direct_range_iter 2 call_tmp[678239] 1))
          (165971 'move' _iterator[165962](165969 call _getIterator call_tmp[678244]))
          Defer
          {
            {
              (165992 call _freeIterator _iterator[165962])
            }
          }
          { scopeless type
            (165981 'move' _indexOfInterest[165961](165978 call iteratorIndex _iterator[165962]))
          }
          ForLoop[165963]
          {
            unknown i[165985] "index var" "insert auto destroy"
            (482954 'end of statement')
            (165987 'move' i[165985] _indexOfInterest[165961])
            (482955 'end of statement' i[165985])
            {
              unknown call_tmp[678249] "expr temp" "maybe param" "maybe type" "temp"
              (678252 'move' call_tmp[678249](165951 call <~> f[165902] " "))
              unknown call_tmp[678256] "expr temp" "maybe param" "maybe type" "temp"
              (678259 'move' call_tmp[678256](165956 call(388333 call (partial) _indices _mt[243] this[165910]) i[165985]))
              (165957 call <~> call_tmp[678249] call_tmp[678256])
              (482957 'end of statement' i[165985])
            }
            label _continueLabel[165966]
            _indexOfInterest[165961]
            _iterator[165962]
          }
          label _breakLabel[165967]
        }
      }
      unknown call_tmp[678261] "expr temp" "maybe param" "maybe type" "temp"
      (678264 'move' call_tmp[678261](166009 call _cond_test printBrackets[165907]))
      if call_tmp[678261]
      {
        (166006 call <~> f[165902] "}")
      }
    }
    {
      unknown call_tmp[678266] "expr temp" "maybe param" "maybe type" "temp"
      (678269 'move' call_tmp[678266](166036 call _cond_test printBrackets[165907]))
      if call_tmp[678266]
      {
        (166033 call <~> f[165902] "{\n")
      }
      unknown call_tmp[678273] "expr temp" "maybe param" "maybe type" "temp"
      (678276 'move' call_tmp[678273](388348 call _nnz _mt[243] this[165910]))
      unknown call_tmp[678278] "expr temp" "maybe param" "maybe type" "temp"
      (678281 'move' call_tmp[678278](166044 call >= call_tmp[678273] 1))
      unknown call_tmp[678283] "expr temp" "maybe param" "maybe type" "temp"
      (678286 'move' call_tmp[678283](166151 call _cond_test call_tmp[678278]))
      if call_tmp[678283]
      {
        unknown call_tmp[678290] "maybe param" "maybe type" "temp"
        (678293 'move' call_tmp[678290](166049 call(388353 call (partial) _indices _mt[243] this[165910]) 1))
        unknown prevInd[166050] "dead at end of block" "insert auto destroy"
        (544396 'init var' prevInd[166050] call_tmp[678290])
        (166053 'end of statement')
        unknown call_tmp[678295] "expr temp" "maybe param" "maybe type" "temp"
        (678298 'move' call_tmp[678295](166057 call <~> f[165902] " "))
        (166060 call <~> call_tmp[678295] prevInd[166050])
        (482961 'end of statement' prevInd[166050])
        {
          unknown _indexOfInterest[166108] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166109] "expr temp" "temp"
          unknown call_tmp[678302] "expr temp" "maybe param" "maybe type" "temp"
          (678305 'move' call_tmp[678302](388377 call _nnz _mt[243] this[165910]))
          unknown call_tmp[678307] "expr temp" "maybe param" "maybe type" "temp"
          (678310 'move' call_tmp[678307](166123 call chpl_direct_range_iter 2 call_tmp[678302] 1))
          (166118 'move' _iterator[166109](166116 call _getIterator call_tmp[678307]))
          Defer
          {
            {
              (166139 call _freeIterator _iterator[166109])
            }
          }
          { scopeless type
            (166128 'move' _indexOfInterest[166108](166125 call iteratorIndex _iterator[166109]))
          }
          ForLoop[166110]
          {
            unknown i[166132] "index var" "insert auto destroy"
            (482964 'end of statement')
            (166134 'move' i[166132] _indexOfInterest[166108])
            (482965 'end of statement' i[166132])
            {
              unknown call_tmp[678312] "expr temp" "maybe param" "maybe type" "temp"
              (678315 'move' call_tmp[678312](166071 call prevInd[166050] 0))
              unknown call_tmp[678319] "expr temp" "maybe param" "maybe type" "temp"
              (678322 'move' call_tmp[678319](166075 call(388361 call (partial) _indices _mt[243] this[165910]) i[166132]))
              unknown call_tmp[678324] "expr temp" "maybe param" "maybe type" "temp"
              (678327 'move' call_tmp[678324](166078 call call_tmp[678319] 0))
              unknown call_tmp[678329] "expr temp" "maybe param" "maybe type" "temp"
              (678332 'move' call_tmp[678329](166079 call != call_tmp[678312] call_tmp[678324]))
              unknown call_tmp[678334] "expr temp" "maybe param" "maybe type" "temp"
              (678337 'move' call_tmp[678334](166087 call _cond_test call_tmp[678329]))
              if call_tmp[678334]
              {
                (166083 call <~> f[165902] "\n")
              }
              unknown call_tmp[678341] "expr temp" "maybe param" "maybe type" "temp"
              (678344 'move' call_tmp[678341](166096 call(388369 call (partial) _indices _mt[243] this[165910]) i[166132]))
              (166097 call = prevInd[166050] call_tmp[678341])
              (482968 'end of statement' prevInd[166050] i[166132])
              unknown call_tmp[678346] "expr temp" "maybe param" "maybe type" "temp"
              (678349 'move' call_tmp[678346](166102 call <~> f[165902] " "))
              (166105 call <~> call_tmp[678346] prevInd[166050])
              (482971 'end of statement' prevInd[166050])
            }
            label _continueLabel[166113]
            _indexOfInterest[166108]
            _iterator[166109]
          }
          label _breakLabel[166114]
        }
        (166148 call <~> f[165902] "\n")
      }
      unknown call_tmp[678351] "expr temp" "maybe param" "maybe type" "temp"
      (678354 'move' call_tmp[678351](166177 call _cond_test printBrackets[165907]))
      if call_tmp[678351]
      {
        (166174 call <~> f[165902] "}\n")
      }
    }
    (521989 return _void[55])
  }
  function DefaultSparseArr[165840](?).dsiSerialWrite[166194](arg _mt[166199]:_MT[238], arg this[166196]:DefaultSparseArr[165840](?) :
  DefaultSparseArr[165840](?), arg f[166192]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown call_tmp[678358] "expr temp" "maybe param" "maybe type" "temp"
    (678361 'move' call_tmp[678358](388385 call rank _mt[243] this[166196]))
    unknown call_tmp[678363] "expr temp" "maybe param" "maybe type" "temp"
    (678366 'move' call_tmp[678363](166203 call == call_tmp[678358] 1))
    unknown call_tmp[678368] "expr temp" "maybe param" "maybe type" "temp"
    (678371 'move' call_tmp[678368](166425 call _cond_test call_tmp[678363]))
    if call_tmp[678368]
    {
      unknown call_tmp[678375] "expr temp" "maybe param" "maybe type" "temp"
      (678378 'move' call_tmp[678375](361441 call dom _mt[243] this[166196]))
      unknown call_tmp[678382] "expr temp" "maybe param" "maybe type" "temp"
      (678385 'move' call_tmp[678382](166206 call _nnz _mt[243] call_tmp[678375]))
      unknown call_tmp[678387] "expr temp" "maybe param" "maybe type" "temp"
      (678390 'move' call_tmp[678387](166210 call >= call_tmp[678382] 1))
      unknown call_tmp[678392] "expr temp" "maybe param" "maybe type" "temp"
      (678395 'move' call_tmp[678392](166282 call _cond_test call_tmp[678387]))
      if call_tmp[678392]
      {
        unknown call_tmp[678399] "expr temp" "maybe param" "maybe type" "temp"
        (678402 'move' call_tmp[678399](166216 call(388391 call (partial) data _mt[243] this[166196]) 1))
        (166217 call <~> f[166192] call_tmp[678399])
        (482975 'end of statement')
        {
          unknown _indexOfInterest[166241] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166242] "expr temp" "temp"
          unknown call_tmp[678406] "expr temp" "maybe param" "maybe type" "temp"
          (678409 'move' call_tmp[678406](361446 call dom _mt[243] this[166196]))
          unknown call_tmp[678413] "expr temp" "maybe param" "maybe type" "temp"
          (678416 'move' call_tmp[678413](166256 call _nnz _mt[243] call_tmp[678406]))
          unknown call_tmp[678418] "expr temp" "maybe param" "maybe type" "temp"
          (678421 'move' call_tmp[678418](166259 call chpl_direct_range_iter 2 call_tmp[678413] 1))
          (166251 'move' _iterator[166242](166249 call _getIterator call_tmp[678418]))
          Defer
          {
            {
              (166275 call _freeIterator _iterator[166242])
            }
          }
          { scopeless type
            (166264 'move' _indexOfInterest[166241](166261 call iteratorIndex _iterator[166242]))
          }
          ForLoop[166243]
          {
            unknown i[166268] "index var" "insert auto destroy"
            (482977 'end of statement')
            (166270 'move' i[166268] _indexOfInterest[166241])
            (482978 'end of statement' i[166268])
            {
              unknown call_tmp[678423] "expr temp" "maybe param" "maybe type" "temp"
              (678426 'move' call_tmp[678423](166231 call <~> f[166192] " "))
              unknown call_tmp[678430] "expr temp" "maybe param" "maybe type" "temp"
              (678433 'move' call_tmp[678430](166236 call(388397 call (partial) data _mt[243] this[166196]) i[166268]))
              (166237 call <~> call_tmp[678423] call_tmp[678430])
              (482980 'end of statement' i[166268])
            }
            label _continueLabel[166246]
            _indexOfInterest[166241]
            _iterator[166242]
          }
          label _breakLabel[166247]
        }
      }
    }
    {
      unknown call_tmp[678437] "expr temp" "maybe param" "maybe type" "temp"
      (678440 'move' call_tmp[678437](361451 call dom _mt[243] this[166196]))
      unknown call_tmp[678444] "expr temp" "maybe param" "maybe type" "temp"
      (678447 'move' call_tmp[678444](166288 call _nnz _mt[243] call_tmp[678437]))
      unknown call_tmp[678449] "expr temp" "maybe param" "maybe type" "temp"
      (678452 'move' call_tmp[678449](166292 call >= call_tmp[678444] 1))
      unknown call_tmp[678454] "expr temp" "maybe param" "maybe type" "temp"
      (678457 'move' call_tmp[678454](166420 call _cond_test call_tmp[678449]))
      if call_tmp[678454]
      {
        unknown call_tmp[678461] "expr temp" "maybe param" "maybe type" "temp"
        (678464 'move' call_tmp[678461](361456 call dom _mt[243] this[166196]))
        unknown call_tmp[678468] "maybe param" "maybe type" "temp"
        (678471 'move' call_tmp[678468](166300 call(166295 call (partial) _indices _mt[243] call_tmp[678461]) 1))
        unknown prevInd[166301] "dead at end of block" "insert auto destroy"
        (544398 'init var' prevInd[166301] call_tmp[678468])
        (166304 'end of statement')
        unknown call_tmp[678475] "expr temp" "maybe param" "maybe type" "temp"
        (678478 'move' call_tmp[678475](166310 call(388404 call (partial) data _mt[243] this[166196]) 1))
        (166311 call <~> f[166192] call_tmp[678475])
        (482982 'end of statement')
        {
          unknown _indexOfInterest[166374] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166375] "expr temp" "temp"
          unknown call_tmp[678482] "expr temp" "maybe param" "maybe type" "temp"
          (678485 'move' call_tmp[678482](361471 call dom _mt[243] this[166196]))
          unknown call_tmp[678489] "expr temp" "maybe param" "maybe type" "temp"
          (678492 'move' call_tmp[678489](166389 call _nnz _mt[243] call_tmp[678482]))
          unknown call_tmp[678494] "expr temp" "maybe param" "maybe type" "temp"
          (678497 'move' call_tmp[678494](166392 call chpl_direct_range_iter 2 call_tmp[678489] 1))
          (166384 'move' _iterator[166375](166382 call _getIterator call_tmp[678494]))
          Defer
          {
            {
              (166408 call _freeIterator _iterator[166375])
            }
          }
          { scopeless type
            (166397 'move' _indexOfInterest[166374](166394 call iteratorIndex _iterator[166375]))
          }
          ForLoop[166376]
          {
            unknown i[166401] "index var" "insert auto destroy"
            (482984 'end of statement')
            (166403 'move' i[166401] _indexOfInterest[166374])
            (482985 'end of statement' i[166401])
            {
              unknown call_tmp[678499] "expr temp" "maybe param" "maybe type" "temp"
              (678502 'move' call_tmp[678499](166325 call prevInd[166301] 0))
              unknown call_tmp[678506] "expr temp" "maybe param" "maybe type" "temp"
              (678509 'move' call_tmp[678506](361461 call dom _mt[243] this[166196]))
              unknown call_tmp[678513] "expr temp" "maybe param" "maybe type" "temp"
              (678516 'move' call_tmp[678513](166332 call(166327 call (partial) _indices _mt[243] call_tmp[678506]) i[166401]))
              unknown call_tmp[678518] "expr temp" "maybe param" "maybe type" "temp"
              (678521 'move' call_tmp[678518](166335 call call_tmp[678513] 0))
              unknown call_tmp[678523] "expr temp" "maybe param" "maybe type" "temp"
              (678526 'move' call_tmp[678523](166336 call != call_tmp[678499] call_tmp[678518]))
              unknown call_tmp[678528] "expr temp" "maybe param" "maybe type" "temp"
              (678531 'move' call_tmp[678528](166350 call _cond_test call_tmp[678523]))
              if call_tmp[678528]
              {
                (166340 call <~> f[166192] "\n")
              }
              {
                (166346 call <~> f[166192] " ")
              }
              unknown call_tmp[678535] "expr temp" "maybe param" "maybe type" "temp"
              (678538 'move' call_tmp[678535](361466 call dom _mt[243] this[166196]))
              unknown call_tmp[678542] "expr temp" "maybe param" "maybe type" "temp"
              (678545 'move' call_tmp[678542](166362 call(166357 call (partial) _indices _mt[243] call_tmp[678535]) i[166401]))
              (166363 call = prevInd[166301] call_tmp[678542])
              (482989 'end of statement' prevInd[166301] i[166401])
              unknown call_tmp[678549] "expr temp" "maybe param" "maybe type" "temp"
              (678552 'move' call_tmp[678549](166370 call(388416 call (partial) data _mt[243] this[166196]) i[166401]))
              (166371 call <~> f[166192] call_tmp[678549])
              (482992 'end of statement' i[166401])
            }
            label _continueLabel[166379]
            _indexOfInterest[166374]
            _iterator[166375]
          }
          label _breakLabel[166380]
        }
        (166417 call <~> f[166192] "\n")
      }
    }
    (521991 return _void[55])
  }
  (355272 'used modules list'(161601 'use' ChapelStandard[20267])(161605 'import' RangeChunk[266546])(161608 'use' DSIUtil[230976]))
}