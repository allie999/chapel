AST dump for ChapelReduce after pass expandExternArrayCalls.
Module use list: 

{
  (81780 'use' ChapelStandard)
  (81784 'use' ChapelLocks)
  function chpl__scanStateResTypesMatch[81790](arg op[81788]:_any[178](?)) param : _unknown[51]
  {
    unknown resType[81801] "type variable"(81800 'typeof'(81799 call(81795 call . op c"generate")))
    unknown stateType[81812] "type variable"(81811 'typeof'(81808 call . op c"identity"))
    (81819 return(81817 call == resType stateType))
  }
  function chpl__scanIteratorZip[81827](arg op[81825]:_any[178](?), arg data[81829]:_any[178](?)) : _unknown[51]
  {
    (81850 call compilerWarning "scan has been serialized (see issue #12482)")
    { scopeless
      unknown arr[81868](81864 for  d  in  zip(81857 call _build_tuple(81855 'expand_tuple' data)) do
      {
        (81862 call chpl__accumgen op d)
      } )
      (81871 'end of statement')
    }
    (81874 call chpl__delete op)
    (81878 return arr)
  }
  function chpl__scanIterator[81886](arg op[81884]:_any[178](?), arg data[81888]:_any[178](?)) : _unknown[51]
  {
    (81891 'use' Reflection)
    { scopeless
      unknown supportsPar[81922] "param"(81920 call &&(81897 call isArray data)(81919 call canResolveMethod data "_scan" op))
      (81925 'end of statement')
    }
    if(81966 call _cond_test supportsPar)
    {
      (81934 return(81933 call(81928 call . data c"_scan") op))
    }
    {
      (81940 call compilerWarning "scan has been serialized (see issue #12482)")
      { scopeless
        unknown arr[81954](81950 for  d  in  data do
        {
          (81949 call chpl__accumgen op d)
        } )
        (81957 'end of statement')
      }
      (81960 call chpl__delete op)
      (81964 return arr)
    }
  }
  function chpl__accumgen[81976](arg op[81974]:_any[178](?), arg d[81978]:_any[178](?)) : _unknown[51]
  {
    (81988 call(81983 call . op c"accumulate") d)
    (81997 return(81996 call(81992 call . op c"generate")))
  }
  function chpl__reduceCombine[82005](arg globalOp[82003]:_any[178](?), arg localOp[82007]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      const tmp[82050] "const" "temp"
      (82052 'move' tmp[82050](82048 'deref'(82047 '_wide_get_locale' globalOp)))
      {
        {
          (82022 call(82018 call .(82013 call . globalOp c"l") c"lock"))
          (82033 call(82028 call . globalOp c"combine") localOp)
          (82045 call(82041 call .(82036 call . globalOp c"l") c"unlock"))
        }
        (82055 'on block' 0 tmp[82050])
      }
    }
  }
  function chpl__cleanupLocalOp[82065](arg globalOp[82063]:_any[178](?), arg localOp[82067]:_any[178](?)) : _unknown[51] "inline"
  {
    (82071 call chpl__delete localOp)
  }
  function chpl_sumTypeIsSame[82081](arg eltType[82079]:_any[178](?)) param : _unknown[51]
  {
    if(82163 call _cond_test(82091 call ||(82086 call isNumeric eltType)(82090 call isString eltType)))
    {
      (82094 return 1)
    }
    {
      { scopeless
        if(82158 call _cond_test(82100 call isDomain eltType))
        {
          { scopeless
            unknown d[82102] eltType
            (82105 'end of statement')
          }
          (82111 return(82110 call isAssociativeDom d))
        }
        {
          { scopeless
            if(82154 call _cond_test(82116 call isArray eltType))
            {
              unknown arrInstType[82122] "type variable"(82121 'static field type' eltType "_instance")
              { scopeless
                unknown instanceObj[82128](82127 'to nilable class from type' arrInstType)
                (82131 'end of statement')
              }
              unknown instanceEltType[82141] "type variable"(82140 'static typeof'(82137 call .(82135 call postfix! instanceObj) c"eltType"))
              (82148 return(82147 call chpl_sumTypeIsSame instanceEltType))
            }
            {
              (82151 return 0)
            }
          }
        }
      }
    }
  }
  function chpl__sumType[82175](arg eltType[82173]:_any[178](?)) type : _unknown[51]
  {
    if(82286 call _cond_test(82180 call chpl_sumTypeIsSame eltType))
    {
      (82182 return eltType)
    }
    {
      { scopeless
        unknown x[82186] eltType
        (82189 'end of statement')
      }
      if(82282 call _cond_test(82194 call isArray x))
      {
        unknown xET[82199] "type variable"(82196 call . x c"eltType")
        unknown xST[82207] "type variable"(82206 call chpl__sumType xET)
        if(82227 call _cond_test(82212 call == xET xST))
        {
          { scopeless
            (82215 return eltType)
          }
        }
        {
          { scopeless
            (82225 return(82223 [ (82218 call . x c"_dom") ]
            {
              xST
            } ))
          }
        }
      }
      {
        (82234 'use' Reflection)
        if(82270 call _cond_test(82243 call !(82242 call canResolve "+" x x)))
        {
          { scopeless
            (82268 call compilerError "+ reduce cannot be used on values of the type "(82266 call _cast string[26] eltType))
          }
        }
        (82280 return(82279 'typeof'(82277 call + x x)))
      }
    }
  }
  type ReduceScanOp[82300] unknown l[82295] chpl_LocalSpinlock
  type SumReduceScanOp[82412](?) unknown eltType[82306] "type variable" unknown value[82313](82312 call chpl__sumType eltType) function SumReduceScanOp[82412](?).identity[82319](arg _mt[82416]:_MT[238], arg this[82414]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    { scopeless
      unknown x[82325](82324 call chpl__sumType eltType)
      (82328 'end of statement')
    }
    (82331 return x)
  } function SumReduceScanOp[82412](?).accumulate[82339](arg _mt[82420]:_MT[238], arg this[82418]:SumReduceScanOp[82412](?), arg x[82337]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (82343 call += value x)
  } function SumReduceScanOp[82412](?).accumulateOntoState[82353](arg _mt[82424]:_MT[238], arg this[82422]:SumReduceScanOp[82412](?), ref arg state[82351]:_any[178](?), arg x[82355]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (82359 call += state x)
  } function SumReduceScanOp[82412](?).combine[82369](arg _mt[82428]:_MT[238], arg this[82426]:SumReduceScanOp[82412](?), arg x[82367]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (82378 call += value(82375 call . x c"value"))
  } function SumReduceScanOp[82412](?).generate[82386](arg _mt[82432]:_MT[238], arg this[82430]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      (82389 return value)
    }
  } function SumReduceScanOp[82412](?).clone[82396](arg _mt[82436]:_MT[238], arg this[82434]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      (82406 return(82400 'new'(_chpl_manager = unmanaged[220](?))(82405 call SumReduceScanOp(eltType = eltType))))
    }
  } ReduceScanOp
  type ProductReduceScanOp[82541](?) unknown eltType[82442] "type variable" unknown value[82449](82448 call _prod_id eltType) function ProductReduceScanOp[82541](?).identity[82455](arg _mt[82545]:_MT[238], arg this[82543]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (82461 return(82460 call _prod_id eltType))
    }
  } function ProductReduceScanOp[82541](?).accumulate[82470](arg _mt[82549]:_MT[238], arg this[82547]:ProductReduceScanOp[82541](?), arg x[82468]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (82474 call *= value x)
  } function ProductReduceScanOp[82541](?).accumulateOntoState[82484](arg _mt[82553]:_MT[238], arg this[82551]:ProductReduceScanOp[82541](?), ref arg state[82482]:_any[178](?), arg x[82486]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (82490 call *= state x)
  } function ProductReduceScanOp[82541](?).combine[82500](arg _mt[82557]:_MT[238], arg this[82555]:ProductReduceScanOp[82541](?), arg x[82498]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (82507 call *= value(82504 call . x c"value"))
  } function ProductReduceScanOp[82541](?).generate[82515](arg _mt[82561]:_MT[238], arg this[82559]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (82518 return value)
    }
  } function ProductReduceScanOp[82541](?).clone[82525](arg _mt[82565]:_MT[238], arg this[82563]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (82535 return(82529 'new'(_chpl_manager = unmanaged[220](?))(82534 call ProductReduceScanOp(eltType = eltType))))
    }
  } ReduceScanOp
  type MaxReduceScanOp[82682](?) unknown eltType[82571] "type variable" unknown value[82578](82577 call min eltType) function MaxReduceScanOp[82682](?).identity[82584](arg _mt[82686]:_MT[238], arg this[82684]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (82590 return(82589 call min eltType))
    }
  } function MaxReduceScanOp[82682](?).accumulate[82599](arg _mt[82690]:_MT[238], arg this[82688]:MaxReduceScanOp[82682](?), arg x[82597]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (82607 call = value(82606 call max x value))
  } function MaxReduceScanOp[82682](?).accumulateOntoState[82617](arg _mt[82694]:_MT[238], arg this[82692]:MaxReduceScanOp[82682](?), ref arg state[82615]:_any[178](?), arg x[82619]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (82627 call = state(82626 call max state x))
  } function MaxReduceScanOp[82682](?).combine[82637](arg _mt[82698]:_MT[238], arg this[82696]:MaxReduceScanOp[82682](?), arg x[82635]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (82648 call = value(82647 call max value(82644 call . x c"value")))
  } function MaxReduceScanOp[82682](?).generate[82656](arg _mt[82702]:_MT[238], arg this[82700]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (82659 return value)
    }
  } function MaxReduceScanOp[82682](?).clone[82666](arg _mt[82706]:_MT[238], arg this[82704]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (82676 return(82670 'new'(_chpl_manager = unmanaged[220](?))(82675 call MaxReduceScanOp(eltType = eltType))))
    }
  } ReduceScanOp
  type MinReduceScanOp[82823](?) unknown eltType[82712] "type variable" unknown value[82719](82718 call max eltType) function MinReduceScanOp[82823](?).identity[82725](arg _mt[82827]:_MT[238], arg this[82825]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (82731 return(82730 call max eltType))
    }
  } function MinReduceScanOp[82823](?).accumulate[82740](arg _mt[82831]:_MT[238], arg this[82829]:MinReduceScanOp[82823](?), arg x[82738]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (82748 call = value(82747 call min x value))
  } function MinReduceScanOp[82823](?).accumulateOntoState[82758](arg _mt[82835]:_MT[238], arg this[82833]:MinReduceScanOp[82823](?), ref arg state[82756]:_any[178](?), arg x[82760]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (82768 call = state(82767 call min state x))
  } function MinReduceScanOp[82823](?).combine[82778](arg _mt[82839]:_MT[238], arg this[82837]:MinReduceScanOp[82823](?), arg x[82776]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (82789 call = value(82788 call min value(82785 call . x c"value")))
  } function MinReduceScanOp[82823](?).generate[82797](arg _mt[82843]:_MT[238], arg this[82841]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (82800 return value)
    }
  } function MinReduceScanOp[82823](?).clone[82807](arg _mt[82847]:_MT[238], arg this[82845]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (82817 return(82811 'new'(_chpl_manager = unmanaged[220](?))(82816 call MinReduceScanOp(eltType = eltType))))
    }
  } ReduceScanOp
  type minmax[83074](?) unknown eltType[82853] "type variable" unknown value[82867](82865 call _build_tuple(82859 call max eltType)(82863 call min eltType)) function minmax[83074](?).identity[82873](arg _mt[83078]:_MT[238], arg this[83076]:minmax[83074](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (82886 return(82884 call _build_tuple(82878 call max eltType)(82882 call min eltType)))
    }
  } function minmax[83074](?).accumulateOntoState[82895](arg _mt[83082]:_MT[238], arg this[83080]:minmax[83074](?), ref arg state[82893]:_any[178](?), arg x[82898] :
  eltType) : _unknown[51] "method" "primary method"
  {
    (82913 call =(82904 call state 0)(82912 call min(82909 call state 0) x))
    (82929 call =(82920 call state 1)(82928 call max(82925 call state 1) x))
  } function minmax[83074](?).accumulateOntoState[82938](arg _mt[83086]:_MT[238], arg this[83084]:minmax[83074](?), ref arg state[82936]:_any[178](?), arg other[82944] :
  (82942 call * 2 eltType)) : _unknown[51] "method" "primary method"
  {
    (82962 call =(82950 call state 0)(82961 call min(82955 call state 0)(82960 call other 0)))
    (82981 call =(82969 call state 1)(82980 call max(82974 call state 1)(82979 call other 1)))
  } function minmax[83074](?).accumulate[82992](arg _mt[83090]:_MT[238], arg this[83088]:minmax[83074](?), arg x[82989] :
  eltType) : _unknown[51] "inline" "method" "primary method"
  {
    (82998 call accumulateOntoState value x)
  } function minmax[83074](?).accumulate[83012](arg _mt[83094]:_MT[238], arg this[83092]:minmax[83074](?), arg state[83009] :
  (83007 call * 2 eltType)) : _unknown[51] "inline" "method" "primary method"
  {
    (83018 call accumulateOntoState value state)
  } function minmax[83074](?).combine[83032](arg _mt[83098]:_MT[238], arg this[83096]:minmax[83074](?), arg other[83029] :
  (83028 call minmax eltType)) : _unknown[51] "inline" "method" "primary method"
  {
    (83041 call accumulateOntoState value(83038 call . other c"value"))
  } function minmax[83074](?).generate[83048](arg _mt[83102]:_MT[238], arg this[83100]:minmax[83074](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83051 return value)
    }
  } function minmax[83074](?).clone[83058](arg _mt[83106]:_MT[238], arg this[83104]:minmax[83074](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83068 return(83062 'new'(_chpl_manager = unmanaged[220](?))(83067 call minmax(eltType = eltType))))
    }
  } ReduceScanOp
  type LogicalAndReduceScanOp[83238](?) unknown eltType[83112] "type variable" unknown value[83119](83118 call _land_id eltType) function LogicalAndReduceScanOp[83238](?).identity[83125](arg _mt[83242]:_MT[238], arg this[83240]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (83131 return(83130 call _land_id eltType))
    }
  } function LogicalAndReduceScanOp[83238](?).accumulate[83140](arg _mt[83246]:_MT[238], arg this[83244]:LogicalAndReduceScanOp[83238](?), arg x[83138]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown tmp[83145] "temp"
      (83148 'move' tmp[83145](83147 'addr of' value))
      (83153 call = tmp[83145](83150 call && tmp[83145] x))
    }
  } function LogicalAndReduceScanOp[83238](?).accumulateOntoState[83163](arg _mt[83250]:_MT[238], arg this[83248]:LogicalAndReduceScanOp[83238](?), ref arg state[83161]:_any[178](?), arg x[83165]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown tmp[83170] "temp"
      (83173 'move' tmp[83170](83172 'addr of' state))
      (83178 call = tmp[83170](83175 call && tmp[83170] x))
    }
  } function LogicalAndReduceScanOp[83238](?).combine[83188](arg _mt[83254]:_MT[238], arg this[83252]:LogicalAndReduceScanOp[83238](?), arg x[83186]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown tmp[83196] "temp"
      (83199 'move' tmp[83196](83198 'addr of' value))
      (83204 call = tmp[83196](83201 call && tmp[83196](83192 call . x c"value")))
    }
  } function LogicalAndReduceScanOp[83238](?).generate[83212](arg _mt[83258]:_MT[238], arg this[83256]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83215 return value)
    }
  } function LogicalAndReduceScanOp[83238](?).clone[83222](arg _mt[83262]:_MT[238], arg this[83260]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83232 return(83226 'new'(_chpl_manager = unmanaged[220](?))(83231 call LogicalAndReduceScanOp(eltType = eltType))))
    }
  } ReduceScanOp
  type LogicalOrReduceScanOp[83394](?) unknown eltType[83268] "type variable" unknown value[83275](83274 call _lor_id eltType) function LogicalOrReduceScanOp[83394](?).identity[83281](arg _mt[83398]:_MT[238], arg this[83396]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (83287 return(83286 call _lor_id eltType))
    }
  } function LogicalOrReduceScanOp[83394](?).accumulate[83296](arg _mt[83402]:_MT[238], arg this[83400]:LogicalOrReduceScanOp[83394](?), arg x[83294]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown tmp[83301] "temp"
      (83304 'move' tmp[83301](83303 'addr of' value))
      (83309 call = tmp[83301](83306 call || tmp[83301] x))
    }
  } function LogicalOrReduceScanOp[83394](?).accumulateOntoState[83319](arg _mt[83406]:_MT[238], arg this[83404]:LogicalOrReduceScanOp[83394](?), ref arg state[83317]:_any[178](?), arg x[83321]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown tmp[83326] "temp"
      (83329 'move' tmp[83326](83328 'addr of' state))
      (83334 call = tmp[83326](83331 call || tmp[83326] x))
    }
  } function LogicalOrReduceScanOp[83394](?).combine[83344](arg _mt[83410]:_MT[238], arg this[83408]:LogicalOrReduceScanOp[83394](?), arg x[83342]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown tmp[83352] "temp"
      (83355 'move' tmp[83352](83354 'addr of' value))
      (83360 call = tmp[83352](83357 call || tmp[83352](83348 call . x c"value")))
    }
  } function LogicalOrReduceScanOp[83394](?).generate[83368](arg _mt[83414]:_MT[238], arg this[83412]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83371 return value)
    }
  } function LogicalOrReduceScanOp[83394](?).clone[83378](arg _mt[83418]:_MT[238], arg this[83416]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83388 return(83382 'new'(_chpl_manager = unmanaged[220](?))(83387 call LogicalOrReduceScanOp(eltType = eltType))))
    }
  } ReduceScanOp
  type BitwiseAndReduceScanOp[83523](?) unknown eltType[83424] "type variable" unknown value[83431](83430 call _band_id eltType) function BitwiseAndReduceScanOp[83523](?).identity[83437](arg _mt[83527]:_MT[238], arg this[83525]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (83443 return(83442 call _band_id eltType))
    }
  } function BitwiseAndReduceScanOp[83523](?).accumulate[83452](arg _mt[83531]:_MT[238], arg this[83529]:BitwiseAndReduceScanOp[83523](?), arg x[83450]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83456 call &= value x)
  } function BitwiseAndReduceScanOp[83523](?).accumulateOntoState[83466](arg _mt[83535]:_MT[238], arg this[83533]:BitwiseAndReduceScanOp[83523](?), ref arg state[83464]:_any[178](?), arg x[83468]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83472 call &= state x)
  } function BitwiseAndReduceScanOp[83523](?).combine[83482](arg _mt[83539]:_MT[238], arg this[83537]:BitwiseAndReduceScanOp[83523](?), arg x[83480]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83489 call &= value(83486 call . x c"value"))
  } function BitwiseAndReduceScanOp[83523](?).generate[83497](arg _mt[83543]:_MT[238], arg this[83541]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83500 return value)
    }
  } function BitwiseAndReduceScanOp[83523](?).clone[83507](arg _mt[83547]:_MT[238], arg this[83545]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83517 return(83511 'new'(_chpl_manager = unmanaged[220](?))(83516 call BitwiseAndReduceScanOp(eltType = eltType))))
    }
  } ReduceScanOp
  type BitwiseOrReduceScanOp[83652](?) unknown eltType[83553] "type variable" unknown value[83560](83559 call _bor_id eltType) function BitwiseOrReduceScanOp[83652](?).identity[83566](arg _mt[83656]:_MT[238], arg this[83654]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (83572 return(83571 call _bor_id eltType))
    }
  } function BitwiseOrReduceScanOp[83652](?).accumulate[83581](arg _mt[83660]:_MT[238], arg this[83658]:BitwiseOrReduceScanOp[83652](?), arg x[83579]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83585 call |= value x)
  } function BitwiseOrReduceScanOp[83652](?).accumulateOntoState[83595](arg _mt[83664]:_MT[238], arg this[83662]:BitwiseOrReduceScanOp[83652](?), ref arg state[83593]:_any[178](?), arg x[83597]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83601 call |= state x)
  } function BitwiseOrReduceScanOp[83652](?).combine[83611](arg _mt[83668]:_MT[238], arg this[83666]:BitwiseOrReduceScanOp[83652](?), arg x[83609]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83618 call |= value(83615 call . x c"value"))
  } function BitwiseOrReduceScanOp[83652](?).generate[83626](arg _mt[83672]:_MT[238], arg this[83670]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83629 return value)
    }
  } function BitwiseOrReduceScanOp[83652](?).clone[83636](arg _mt[83676]:_MT[238], arg this[83674]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83646 return(83640 'new'(_chpl_manager = unmanaged[220](?))(83645 call BitwiseOrReduceScanOp(eltType = eltType))))
    }
  } ReduceScanOp
  type BitwiseXorReduceScanOp[83781](?) unknown eltType[83682] "type variable" unknown value[83689](83688 call _bxor_id eltType) function BitwiseXorReduceScanOp[83781](?).identity[83695](arg _mt[83785]:_MT[238], arg this[83783]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (83701 return(83700 call _bxor_id eltType))
    }
  } function BitwiseXorReduceScanOp[83781](?).accumulate[83710](arg _mt[83789]:_MT[238], arg this[83787]:BitwiseXorReduceScanOp[83781](?), arg x[83708]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83714 call ^= value x)
  } function BitwiseXorReduceScanOp[83781](?).accumulateOntoState[83724](arg _mt[83793]:_MT[238], arg this[83791]:BitwiseXorReduceScanOp[83781](?), ref arg state[83722]:_any[178](?), arg x[83726]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83730 call ^= state x)
  } function BitwiseXorReduceScanOp[83781](?).combine[83740](arg _mt[83797]:_MT[238], arg this[83795]:BitwiseXorReduceScanOp[83781](?), arg x[83738]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83747 call ^= value(83744 call . x c"value"))
  } function BitwiseXorReduceScanOp[83781](?).generate[83755](arg _mt[83801]:_MT[238], arg this[83799]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83758 return value)
    }
  } function BitwiseXorReduceScanOp[83781](?).clone[83765](arg _mt[83805]:_MT[238], arg this[83803]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (83775 return(83769 'new'(_chpl_manager = unmanaged[220](?))(83774 call BitwiseXorReduceScanOp(eltType = eltType))))
    }
  } ReduceScanOp
  function _maxloc_id[83812](arg eltType[83810]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      (83831 return(83829 call _build_tuple(83820 call min(83818 call eltType 0))(83827 call max(83825 call eltType 1))))
    }
  }
  function _minloc_id[83840](arg eltType[83838]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      (83846 return(83845 call max eltType))
    }
  }
  type maxloc[84026](?) unknown eltType[83854] "type variable" unknown value[83861](83860 call _maxloc_id eltType) function maxloc[84026](?).identity[83867](arg _mt[84030]:_MT[238], arg this[84028]:maxloc[84026](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (83873 return(83872 call _maxloc_id eltType))
    }
  } function maxloc[84026](?).accumulate[83882](arg _mt[84034]:_MT[238], arg this[84032]:maxloc[84026](?), arg x[83880]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83888 call accumulateOntoState value x)
  } function maxloc[84026](?).accumulateOntoState[83897](arg _mt[84038]:_MT[238], arg this[84036]:maxloc[84026](?), ref arg state[83895]:_any[178](?), arg x[83899]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(83972 call _cond_test(83965 call ||(83933 call ||(83909 call >(83904 call x 0)(83908 call state 0))(83931 call &&(83919 call ==(83914 call x 0)(83918 call state 0))(83929 call <(83924 call x 1)(83928 call state 1))))(83963 call &&(83941 call gotNaN(83939 call x 0))(83961 call ||(83949 call !(83948 call gotNaN(83946 call state 0)))(83959 call <(83954 call x 1)(83958 call state 1))))))
    {
      { scopeless
        (83969 call = state x)
      }
    }
  } function maxloc[84026](?).combine[83984](arg _mt[84042]:_MT[238], arg this[84040]:maxloc[84026](?), arg x[83982]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (83993 call accumulateOntoState value(83990 call . x c"value"))
  } function maxloc[84026](?).generate[84000](arg _mt[84046]:_MT[238], arg this[84044]:maxloc[84026](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (84003 return value)
    }
  } function maxloc[84026](?).clone[84010](arg _mt[84050]:_MT[238], arg this[84048]:maxloc[84026](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (84020 return(84014 'new'(_chpl_manager = unmanaged[220](?))(84019 call maxloc(eltType = eltType))))
    }
  } ReduceScanOp
  type minloc[84228](?) unknown eltType[84056] "type variable" unknown value[84063](84062 call _minloc_id eltType) function minloc[84228](?).identity[84069](arg _mt[84232]:_MT[238], arg this[84230]:minloc[84228](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (84075 return(84074 call _minloc_id eltType))
    }
  } function minloc[84228](?).accumulate[84084](arg _mt[84236]:_MT[238], arg this[84234]:minloc[84228](?), arg x[84082]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (84090 call accumulateOntoState value x)
  } function minloc[84228](?).accumulateOntoState[84099](arg _mt[84240]:_MT[238], arg this[84238]:minloc[84228](?), ref arg state[84097]:_any[178](?), arg x[84101]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(84174 call _cond_test(84167 call ||(84135 call ||(84111 call <(84106 call x 0)(84110 call state 0))(84133 call &&(84121 call ==(84116 call x 0)(84120 call state 0))(84131 call <(84126 call x 1)(84130 call state 1))))(84165 call &&(84143 call gotNaN(84141 call x 0))(84163 call ||(84151 call !(84150 call gotNaN(84148 call state 0)))(84161 call <(84156 call x 1)(84160 call state 1))))))
    {
      { scopeless
        (84171 call = state x)
      }
    }
  } function minloc[84228](?).combine[84186](arg _mt[84244]:_MT[238], arg this[84242]:minloc[84228](?), arg x[84184]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (84195 call accumulateOntoState value(84192 call . x c"value"))
  } function minloc[84228](?).generate[84202](arg _mt[84248]:_MT[238], arg this[84246]:minloc[84228](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (84205 return value)
    }
  } function minloc[84228](?).clone[84212](arg _mt[84252]:_MT[238], arg this[84250]:minloc[84228](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (84222 return(84216 'new'(_chpl_manager = unmanaged[220](?))(84221 call minloc(eltType = eltType))))
    }
  } ReduceScanOp
  function gotNaN[84259](arg value[84257]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    { scopeless
      (84269 return(84268 call isnan value))
    }
  }
  where {
    (84264 call isReal value)
  }
  function gotNaN[84279](arg value[84277]:_any[178](?)) param : _unknown[51] "private"
  {
    { scopeless
      (84282 return 0)
    }
  }
}