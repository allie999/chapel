AST dump for ReplicatedDist after pass cleanup.
Module use list: 

{
  (352994 'use' ChapelStandard)
  unknown traceReplicatedDist[348428] "config" "param" 0
  (348431 'end of statement')
  type Replicated[348460] unknown targetLocDom[348444](348442 call chpl__buildDomainRuntimeType defaultDist(348439 'typeof'(348436 call . here c"id"))) const targetLocales[348455] "const"(348453 call chpl__buildArrayRuntimeType(348451 call chpl__ensureDomainExpr targetLocDom) locale[28]) BaseDist
  function _unknown[51].init[348475](arg _mt[348502]:_MT[238], arg this[348499] :
  Replicated, arg targetLocales[348471] :
  (348467 call chpl__buildArrayRuntimeType nil[44] locale[28]) =
  Locales, arg purposeMessage[348495] :
  string[26] =
  "used to create a Replicated") : _unknown[51] "method" "no return value for void"
  {
    (348509 call(348505 call . this c"complete"))
    {
      unknown _indexOfInterest[348543] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[348544] "expr temp" "temp"
      (348553 'move' _iterator[348544](348551 call _getIterator targetLocales))
      Defer
      {
        {
          (348569 call _freeIterator _iterator[348544])
        }
      }
      { scopeless type
        (348558 'move' _indexOfInterest[348543](348555 call iteratorIndex _iterator[348544]))
      }
      ForLoop[348545]
      {
        unknown loc[348562] "index var" "insert auto destroy"
        (348564 'move' loc[348562] _indexOfInterest[348543])
        {
          (348526 call(348518 call .(348515 call . this c"targetLocDom") c"add")(348522 call . loc c"id"))
          (348540 call =(348538 call(348530 call . this c"targetLocales")(348534 call . loc c"id")) loc)
        }
        label _continueLabel[348548]
        _indexOfInterest[348543]
        _iterator[348544]
      }
      label _breakLabel[348549]
    }
    if(348599 call _cond_test traceReplicatedDist)
    {
      (348597 call writeln "Replicated initializer over " targetLocales)
    }
  }
  function _unknown[51].dsiEqualDMaps[348616](arg _mt[348621]:_MT[238], arg this[348618] :
  Replicated, arg that[348613] :
  (348612 call Replicated ?[260])) : _unknown[51] "method"
  {
    (348636 return(348635 call(348627 call .(348624 call . this c"targetLocales") c"equals")(348631 call . that c"targetLocales")))
  }
  function _unknown[51].dsiEqualDMaps[348646](arg _mt[348651]:_MT[238], arg this[348648] :
  Replicated, arg that[348644]:_any[178](?)) param : _unknown[51] "method"
  {
    (348654 return 0)
  }
  function _unknown[51].dsiDestroyDist[348662](arg _mt[348667]:_MT[238], arg this[348664] :
  Replicated) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  }
  function _unknown[51].dsiSupportsPrivatization[348675](arg _mt[348680]:_MT[238], arg this[348677] :
  Replicated) param : _unknown[51] "method" "method overrides"
  {
    (348683 return 1)
  }
  function _unknown[51].dsiGetPrivatizeData[348691](arg _mt[348696]:_MT[238], arg this[348693] :
  Replicated) : _unknown[51] "method"
  {
    if(348720 call _cond_test traceReplicatedDist)
    {
      (348718 call writeln "Replicated.dsiGetPrivatizeData")
    }
    (348727 return 0)
  }
  function _unknown[51].dsiPrivatize[348736](arg _mt[348741]:_MT[238], arg this[348738] :
  Replicated, arg privatizeData[348734]:_any[178](?)) : _unknown[51] "method"
  {
    if(348766 call _cond_test traceReplicatedDist)
    {
      (348764 call writeln "Replicated.dsiPrivatize on " here)
    }
    const otherTargetLocales[348776] "const"(348773 call . this c"targetLocales")
    (348779 'end of statement')
    const privDom[348784] "const"(348781 call . otherTargetLocales c"_dom")
    (348787 'end of statement')
    const privTargetLocales[348796] "const" otherTargetLocales(348793 call chpl__buildArrayRuntimeType(348791 call chpl__ensureDomainExpr privDom) locale[28])
    (348799 'end of statement')
    const nonNilWrapper[348822] "const"(348818 for  loc  in  otherTargetLocales do
    {
      loc
    } )(348813 call chpl__buildArrayRuntimeType(348811 call chpl__ensureDomainExpr(348807 call #(348801 call chpl_build_low_bounded_range 0)(348804 call . privTargetLocales c"size"))) locale[28])
    (348825 'end of statement')
    (348850 return(348828 'new'(_chpl_manager = unmanaged[220](?))(348849 call Replicated nonNilWrapper "used during privatization")))
  }
  function ReplicatedDom[348995].numReplicands[348897](arg _mt[348999]:_MT[238], arg this[348997]:ReplicatedDom[348995]) : _unknown[51] "method" "primary method" "no parens"
  {
    (348903 return(348900 call . localDoms c"size"))
  }
  function ReplicatedDom[348995].chpl_myLocDom[348910](arg _mt[349003]:_MT[238], arg this[349001]:ReplicatedDom[348995]) : _unknown[51] "method" "primary method" "no doc"
  {
    if(348975 call _cond_test boundsChecking)
    {
      if(348970 call _cond_test(348926 call !(348925 call(348917 call .(348914 call . dist c"targetLocDom") c"contains")(348921 call . here c"id"))))
      {
        (348968 call halt "locale "(348948 call . here c"id") " has no local replicand")
      }
    }
    (348990 return(348988 call postfix!(348987 call localDoms(348983 call . here c"id"))))
  }
  type ReplicatedDom[348995] const dist[348859] "const"(348858 'to unmanaged class from unknown' Replicated) unknown domRep[348870](348868 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable) unknown localDoms[348891](348889 call chpl__buildArrayRuntimeType(348887 call chpl__ensureDomainExpr(348875 call . dist c"targetLocDom"))(348886 'to unmanaged class from unknown'(348885 'to nilable class from type'(348884 call LocReplicatedDom rank idxType stridable)))) BaseRectangularDom
  type LocReplicatedDom[349032](?) unknown rank[349008] "param" int[13] unknown idxType[349012] "type variable" unknown stridable[349016] "param" bool[10] unknown domLocalRep[349027](349025 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  function _unknown[51].redirectee[349038](arg _mt[349043]:_MT[238], arg this[349040] :
  ReplicatedDom) : _unknown[51] "method"
  {
    (349053 return domRep)
  }
  { scopeless type
    (349050 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  }
  function _unknown[51].dsiMyDist[349062](arg _mt[349067]:_MT[238], arg this[349064] :
  ReplicatedDom) : _unknown[51] "method" "method overrides"
  {
    (349070 return dist)
  }
  function _unknown[51].dsiSupportsPrivatization[349078](arg _mt[349083]:_MT[238], arg this[349080] :
  ReplicatedDom) param : _unknown[51] "method" "method overrides"
  {
    (349086 return 1)
  }
  type ReplicatedDomPrvData[349105](?) unknown distpid[349092] unknown domRep[349096] unknown localDoms[349100]
  function _unknown[51].dsiGetPrivatizeData[349111](arg _mt[349116]:_MT[238], arg this[349113] :
  ReplicatedDom) : _unknown[51] "method"
  {
    if(349140 call _cond_test traceReplicatedDist)
    {
      (349138 call writeln "ReplicatedDom.dsiGetPrivatizeData")
    }
    (349156 return(349146 'new'(349155 call ReplicatedDomPrvData(349149 call . dist c"pid") domRep localDoms)))
  }
  function _unknown[51].dsiPrivatize[349165](arg _mt[349170]:_MT[238], arg this[349167] :
  ReplicatedDom, arg privatizeData[349163]:_any[178](?)) : _unknown[51] "method"
  {
    if(349195 call _cond_test traceReplicatedDist)
    {
      (349193 call writeln "ReplicatedDom.dsiPrivatize on " here)
    }
    unknown privdist[349213](349212 call chpl_getPrivatizedCopy(349206 'typeof'(349203 call . this c"dist"))(349209 call . privatizeData c"distpid"))
    (349216 'end of statement')
    (349245 return(349219 'new'(_chpl_manager = unmanaged[220](?))(349244 call ReplicatedDom(rank = rank)(idxType = idxType)(stridable = stridable)(dist = privdist)(domRep =(349233 call . privatizeData c"domRep"))(localDoms =(349240 call . privatizeData c"localDoms")))))
  }
  function _unknown[51].dsiGetReprivatizeData[349252](arg _mt[349257]:_MT[238], arg this[349254] :
  ReplicatedDom) : _unknown[51] "method"
  {
    (349260 return domRep)
  }
  function _unknown[51].dsiReprivatize[349270](arg _mt[349277]:_MT[238], arg this[349274] :
  ReplicatedDom, arg other[349268]:_any[178](?), arg reprivatizeData[349272]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (349316 call assert(349313 call &&(349301 call &&(349289 call ==(349282 call . this c"rank")(349286 call . other c"rank"))(349299 call ==(349292 call . this c"idxType")(349296 call . other c"idxType")))(349311 call ==(349304 call . this c"stridable")(349308 call . other c"stridable"))))
    (349324 call =(349320 call . this c"domRep") reprivatizeData)
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiClone[349333](arg _mt[349338]:_MT[238], arg this[349335] :
  Replicated) : _unknown[51] "method"
  {
    if(349367 call _cond_test traceReplicatedDist)
    {
      (349365 call writeln "Replicated.dsiClone")
    }
    unknown nonNilWrapper[349395](349391 for  loc  in  targetLocales do
    {
      loc
    } )(349386 call chpl__buildArrayRuntimeType(349384 call chpl__ensureDomainExpr(349380 call #(349374 call chpl_build_low_bounded_range 0)(349377 call . targetLocales c"size"))) locale[28])
    (349398 'end of statement')
    (349406 return(349401 'new'(_chpl_manager = unmanaged[220](?))(349405 call Replicated nonNilWrapper)))
  }
  { scopeless type
    (349344 call _to_unmanaged(349342 'typeof' this))
  }
  function _unknown[51].dsiNewRectangularDom[349418](arg _mt[349431]:_MT[238], arg this[349428] :
  Replicated, param arg rank[349415] :
  int[13], arg idxType[349420]:_any[178](?), param arg stridable[349423] :
  bool[10], arg inds[349426]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(349465 call _cond_test traceReplicatedDist)
    {
      (349463 call writeln "Replicated.dsiNewRectangularDom "(349461 call _build_tuple rank(349456 call _cast string[26] idxType) stridable inds))
    }
    unknown result[349488](349473 'new'(_chpl_manager = unmanaged[220](?))(349487 call ReplicatedDom(rank = rank)(idxType = idxType)(stridable = stridable)(dist =(349485 call _to_unmanaged this))))
    (349491 'end of statement')
    {
      unknown tmpIter[349530] "expr temp" "maybe ref" "no copy" "temp"
      (349533 'move' tmpIter[349530](349503 call _build_tuple targetLocales(349500 call . result c"localDoms")))
      unknown isRngDomArr[349716] "maybe param" "temp"
      (349731 'move' isRngDomArr[349716](349729 call ||(349718 call isBoundedRange tmpIter[349530])(349727 call ||(349721 call isDomain tmpIter[349530])(349724 call isArray tmpIter[349530]))))
      if isRngDomArr[349716]
      {
        const _coforallCount[349560] "const" "end count" "temp"
        (349639 'move' _coforallCount[349560](349636 call _endCountAlloc 0))
        unknown numTasks[349561] "temp"
        (349623 'move' numTasks[349561](349619 call . tmpIter[349530] c"size"))
        (349614 call _upEndCount _coforallCount[349560] 0 numTasks[349561])
        unknown _indexOfInterest[349567] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[349568] "expr temp" "temp"
        (349577 'move' _iterator[349568](349575 call _getIteratorZip tmpIter[349530]))
        Defer
        {
          {
            (349607 call _freeIterator _iterator[349568])
          }
        }
        { scopeless type
          (349582 'move' _indexOfInterest[349567](349579 call iteratorIndex _iterator[349568]))
        }
        ForLoop[349569]
        {
          (349587 call _check_tuple_var_decl _indexOfInterest[349567] 2)
          unknown loc[349593] "coforall index var" "index var" "insert auto destroy"
          (349595 'move' loc[349593](349591 call _indexOfInterest[349567] 0))
          unknown locDom[349600] "coforall index var" "index var" "insert auto destroy"
          (349602 'move' locDom[349600](349598 call _indexOfInterest[349567] 1))
          const tmp[349536] "const" "temp"
          (349538 'move' tmp[349536](349540 'deref'(349541 '_wide_get_locale' loc)))
          {
            (349549 call = locDom(349551 'new'(_chpl_manager = unmanaged[220](?))(349555 call LocReplicatedDom rank idxType stridable)))
            (349562 call _downEndCount _coforallCount[349560] nil[44])
            (349544 'coforall on block' 0 tmp[349536])
          }
          label _continueLabel[349572]
          _indexOfInterest[349567]
          _iterator[349568]
        }
        label _breakLabel[349573]
        Defer
        {
          {
            (349626 call _endCountFree _coforallCount[349560])
          }
        }
        (349631 call _waitEndCount _coforallCount[349560] 0 numTasks[349561])
      }
      {
        const _coforallCount[349643] "const" "end count" "temp"
        (349713 'move' _coforallCount[349643](349710 call _endCountAlloc 0))
        unknown _indexOfInterest[349650] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[349651] "expr temp" "temp"
        (349660 'move' _iterator[349651](349658 call _getIteratorZip tmpIter[349530]))
        Defer
        {
          {
            (349690 call _freeIterator _iterator[349651])
          }
        }
        { scopeless type
          (349665 'move' _indexOfInterest[349650](349662 call iteratorIndex _iterator[349651]))
        }
        ForLoop[349652]
        {
          (349670 call _check_tuple_var_decl _indexOfInterest[349650] 2)
          unknown loc[349676] "coforall index var" "index var" "insert auto destroy"
          (349678 'move' loc[349676](349674 call _indexOfInterest[349650] 0))
          unknown locDom[349683] "coforall index var" "index var" "insert auto destroy"
          (349685 'move' locDom[349683](349681 call _indexOfInterest[349650] 1))
          (349697 call _upEndCount _coforallCount[349643] 0)
          const tmp[349521] "const" "temp"
          (349523 'move' tmp[349521](349519 'deref'(349518 '_wide_get_locale' loc)))
          {
            (349515 call = locDom(349508 'new'(_chpl_manager = unmanaged[220](?))(349514 call LocReplicatedDom rank idxType stridable)))
            (349645 call _downEndCount _coforallCount[349643] nil[44])
            (349526 'coforall on block' 0 tmp[349521])
          }
          label _continueLabel[349655]
          _indexOfInterest[349650]
          _iterator[349651]
        }
        label _breakLabel[349656]
        Defer
        {
          {
            (349701 call _endCountFree _coforallCount[349643])
          }
        }
        (349706 call _waitEndCount _coforallCount[349643] 0)
      }
    }
    (349741 call(349736 call . result c"dsiSetIndices") inds)
    (349744 return result)
  }
  function _unknown[51].dsiIndexToLocale[349753](arg _mt[349758]:_MT[238], arg this[349755] :
  Replicated, arg indexx[349751]:_any[178](?)) : _unknown[51] "method"
  {
    (349762 return here)
  }
  { scopeless type
    locale[28]
  }
  function _unknown[51].dsiSetIndices[349773](arg _mt[349778]:_MT[238], arg this[349775] :
  ReplicatedDom, arg x[349771]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(349822 call _cond_test traceReplicatedDist)
    {
      (349820 call writeln "ReplicatedDom.dsiSetIndices on "(349816 call _cast string[26](349814 'typeof' x)) ": " x)
    }
    (349835 call dsiSetIndices(349832 call chpl__buildDomainExpr(349830 'expand_tuple' x)))
  }
  where {
    (349791 call &&(349783 call isTuple x)(349790 call isRange(349788 call x 0)))
  }
  function _unknown[51].dsiSetIndices[349847](arg _mt[349852]:_MT[238], arg this[349849] :
  ReplicatedDom, arg domArg[349844] :
  _domain) : _unknown[51] "method" "no return value for void"
  {
    if(349878 call _cond_test traceReplicatedDist)
    {
      (349876 call writeln "ReplicatedDom.dsiSetIndices on domain " domArg)
    }
    (349886 call = domRep domArg)
    {
      unknown tmpIter[349915] "expr temp" "maybe ref" "no copy" "temp"
      (349918 'move' tmpIter[349915] localDoms)
      unknown isRngDomArr[350071] "maybe param" "temp"
      (350086 'move' isRngDomArr[350071](350084 call ||(350073 call isBoundedRange tmpIter[349915])(350082 call ||(350076 call isDomain tmpIter[349915])(350079 call isArray tmpIter[349915]))))
      if isRngDomArr[350071]
      {
        const _coforallCount[349943] "const" "end count" "temp"
        (350008 'move' _coforallCount[349943](350005 call _endCountAlloc 0))
        unknown numTasks[349944] "temp"
        (349992 'move' numTasks[349944](349988 call . tmpIter[349915] c"size"))
        (349983 call _upEndCount _coforallCount[349943] 0 numTasks[349944])
        unknown _indexOfInterest[349950] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[349951] "expr temp" "temp"
        (349960 'move' _iterator[349951](349958 call _getIterator tmpIter[349915]))
        Defer
        {
          {
            (349976 call _freeIterator _iterator[349951])
          }
        }
        { scopeless type
          (349965 'move' _indexOfInterest[349950](349962 call iteratorIndex _iterator[349951]))
        }
        ForLoop[349952]
        {
          unknown locDom[349969] "coforall index var" "index var" "insert auto destroy"
          (349971 'move' locDom[349969] _indexOfInterest[349950])
          const tmp[349921] "const" "temp"
          (349923 'move' tmp[349921](349925 'deref'(349926 '_wide_get_locale' locDom)))
          {
            (349934 call =(349936 call .(349938 call postfix! locDom) c"domLocalRep") domArg)
            (349945 call _downEndCount _coforallCount[349943] nil[44])
            (349929 'coforall on block' 0 tmp[349921])
          }
          label _continueLabel[349955]
          _indexOfInterest[349950]
          _iterator[349951]
        }
        label _breakLabel[349956]
        Defer
        {
          {
            (349995 call _endCountFree _coforallCount[349943])
          }
        }
        (350000 call _waitEndCount _coforallCount[349943] 0 numTasks[349944])
      }
      {
        const _coforallCount[350012] "const" "end count" "temp"
        (350068 'move' _coforallCount[350012](350065 call _endCountAlloc 0))
        unknown _indexOfInterest[350019] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[350020] "expr temp" "temp"
        (350029 'move' _iterator[350020](350027 call _getIterator tmpIter[349915]))
        Defer
        {
          {
            (350045 call _freeIterator _iterator[350020])
          }
        }
        { scopeless type
          (350034 'move' _indexOfInterest[350019](350031 call iteratorIndex _iterator[350020]))
        }
        ForLoop[350021]
        {
          unknown locDom[350038] "coforall index var" "index var" "insert auto destroy"
          (350040 'move' locDom[350038] _indexOfInterest[350019])
          (350052 call _upEndCount _coforallCount[350012] 0)
          const tmp[349907] "const" "temp"
          (349909 'move' tmp[349907](349905 'deref'(349904 '_wide_get_locale' locDom)))
          {
            (349901 call =(349897 call .(349893 call postfix! locDom) c"domLocalRep") domArg)
            (350014 call _downEndCount _coforallCount[350012] nil[44])
            (349912 'coforall on block' 0 tmp[349907])
          }
          label _continueLabel[350024]
          _indexOfInterest[350019]
          _iterator[350020]
        }
        label _breakLabel[350025]
        Defer
        {
          {
            (350056 call _endCountFree _coforallCount[350012])
          }
        }
        (350061 call _waitEndCount _coforallCount[350012] 0)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiGetIndices[350096](arg _mt[350101]:_MT[238], arg this[350098] :
  ReplicatedDom) : _unknown[51] "method"
  {
    if(350137 call _cond_test traceReplicatedDist)
    {
      (350135 call writeln "ReplicatedDom.dsiGetIndices")
    }
    (350151 return(350150 call(350146 call .(350145 call redirectee) c"getIndices")))
  }
  { scopeless type
    (350113 call * rank(350112 call range idxType(350108 call . BoundedRangeType c"bounded") stridable))
  }
  function _unknown[51].these[350159](arg _mt[350164]:_MT[238], arg this[350161] :
  ReplicatedDom) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    unknown dom[350169](350168 call redirectee)
    (350172 'end of statement')
    {
      unknown _indexOfInterest[350179] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350180] "expr temp" "temp"
      (350189 'move' _iterator[350180](350187 call _getIterator dom))
      Defer
      {
        {
          (350205 call _freeIterator _iterator[350180])
        }
      }
      { scopeless type
        (350194 'move' _indexOfInterest[350179](350191 call iteratorIndex _iterator[350180]))
      }
      ForLoop[350181]
      {
        unknown i[350198] "index var" "insert auto destroy"
        (350200 'move' i[350198] _indexOfInterest[350179])
        (350177 yield i)
        label _continueLabel[350184]
        _indexOfInterest[350179]
        _iterator[350180]
      }
      label _breakLabel[350185]
    }
  }
  function _unknown[51].these[350221](arg _mt[350226]:_MT[238], arg this[350223] :
  ReplicatedDom, param arg tag[350218] :
  iterKind) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[350251] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350252] "expr temp" "temp"
      (350261 'move' _iterator[350252](350259 call _getIterator(350247 call(350242 call .(350239 call .(350238 call chpl_myLocDom) c"domLocalRep") c"these") tag)))
      Defer
      {
        {
          (350278 call _freeIterator _iterator[350252])
        }
      }
      { scopeless type
        (350267 'move' _indexOfInterest[350251](350264 call iteratorIndex _iterator[350252]))
      }
      ForLoop[350253]
      {
        unknown follow[350271] "index var" "insert auto destroy"
        (350273 'move' follow[350271] _indexOfInterest[350251])
        (350249 yield follow)
        label _continueLabel[350256]
        _indexOfInterest[350251]
        _iterator[350252]
      }
      label _breakLabel[350257]
    }
  }
  where {
    (350233 call == tag(350230 call . iterKind c"leader"))
  }
  function _unknown[51].these[350296](arg _mt[350303]:_MT[238], arg this[350300] :
  ReplicatedDom, param arg tag[350293] :
  iterKind, arg followThis[350298]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[350326] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350327] "expr temp" "temp"
      (350336 'move' _iterator[350327](350334 call _getIterator(350322 call(350316 call .(350315 call redirectee) c"these") tag followThis)))
      Defer
      {
        {
          (350353 call _freeIterator _iterator[350327])
        }
      }
      { scopeless type
        (350342 'move' _indexOfInterest[350326](350339 call iteratorIndex _iterator[350327]))
      }
      ForLoop[350328]
      {
        unknown i[350346] "index var" "insert auto destroy"
        (350348 'move' i[350346] _indexOfInterest[350326])
        (350324 yield i)
        label _continueLabel[350331]
        _indexOfInterest[350326]
        _iterator[350327]
      }
      label _breakLabel[350332]
    }
  }
  where {
    (350310 call == tag(350307 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialWrite[350369](arg _mt[350374]:_MT[238], arg this[350371] :
  ReplicatedDom, arg f[350367]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (350388 call(350383 call .(350380 call .(350379 call redirectee) c"_value") c"dsiSerialWrite") f)
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiDims[350397](arg _mt[350402]:_MT[238], arg this[350399] :
  ReplicatedDom) : _unknown[51] "method"
  {
    (350424 return(350423 call(350419 call .(350418 call redirectee) c"dims")))
  }
  { scopeless type
    (350414 call * rank(350413 call range idxType(350409 call . BoundedRangeType c"bounded") stridable))
  }
  function _unknown[51].dsiDim[350437](arg _mt[350442]:_MT[238], arg this[350439] :
  ReplicatedDom, arg dim[350434] :
  int[13]) : _unknown[51] "method"
  {
    (350462 return(350461 call(350456 call .(350455 call redirectee) c"dim") dim))
  }
  { scopeless type
    (350452 call range idxType(350448 call . BoundedRangeType c"bounded") stridable)
  }
  function _unknown[51].dsiLow[350471](arg _mt[350476]:_MT[238], arg this[350473] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    (350484 return(350481 call .(350480 call redirectee) c"low"))
  }
  function _unknown[51].dsiHigh[350492](arg _mt[350497]:_MT[238], arg this[350494] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    (350505 return(350502 call .(350501 call redirectee) c"high"))
  }
  function _unknown[51].dsiStride[350513](arg _mt[350518]:_MT[238], arg this[350515] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    (350526 return(350523 call .(350522 call redirectee) c"stride"))
  }
  function _unknown[51].dsiAlignedLow[350534](arg _mt[350539]:_MT[238], arg this[350536] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    (350547 return(350544 call .(350543 call redirectee) c"alignedLow"))
  }
  function _unknown[51].dsiAlignedHigh[350555](arg _mt[350560]:_MT[238], arg this[350557] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    (350568 return(350565 call .(350564 call redirectee) c"alignedHigh"))
  }
  function _unknown[51].dsiAlignment[350576](arg _mt[350581]:_MT[238], arg this[350578] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    (350589 return(350586 call .(350585 call redirectee) c"alignment"))
  }
  function _unknown[51].dsiNumIndices[350597](arg _mt[350602]:_MT[238], arg this[350599] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    (350610 return(350607 call .(350606 call redirectee) c"size"))
  }
  function _unknown[51].dsiMember[350620](arg _mt[350625]:_MT[238], arg this[350622] :
  ReplicatedDom, arg indexx[350618]:_any[178](?)) : _unknown[51] "method"
  {
    (350636 return(350635 call(350630 call .(350629 call redirectee) c"contains") indexx))
  }
  function _unknown[51].dsiIndexOrder[350646](arg _mt[350651]:_MT[238], arg this[350648] :
  ReplicatedDom, arg indexx[350644]:_any[178](?)) : _unknown[51] "method"
  {
    (350662 return(350661 call(350656 call .(350655 call redirectee) c"dsiIndexOrder") indexx))
  }
  function _unknown[51].dsiDestroyDom[350670](arg _mt[350675]:_MT[238], arg this[350672] :
  ReplicatedDom) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[350709] "expr temp" "maybe ref" "no copy" "temp"
      (350712 'move' tmpIter[350709](350679 call . dist c"targetLocDom"))
      unknown isRngDomArr[350866] "maybe param" "temp"
      (350881 'move' isRngDomArr[350866](350879 call ||(350868 call isBoundedRange tmpIter[350709])(350877 call ||(350871 call isDomain tmpIter[350709])(350874 call isArray tmpIter[350709]))))
      if isRngDomArr[350866]
      {
        const _coforallCount[350738] "const" "end count" "temp"
        (350803 'move' _coforallCount[350738](350800 call _endCountAlloc 0))
        unknown numTasks[350739] "temp"
        (350787 'move' numTasks[350739](350783 call . tmpIter[350709] c"size"))
        (350778 call _upEndCount _coforallCount[350738] 0 numTasks[350739])
        unknown _indexOfInterest[350745] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[350746] "expr temp" "temp"
        (350755 'move' _iterator[350746](350753 call _getIterator tmpIter[350709]))
        Defer
        {
          {
            (350771 call _freeIterator _iterator[350746])
          }
        }
        { scopeless type
          (350760 'move' _indexOfInterest[350745](350757 call iteratorIndex _iterator[350746]))
        }
        ForLoop[350747]
        {
          unknown localeIdx[350764] "coforall index var" "index var" "insert auto destroy"
          (350766 'move' localeIdx[350764] _indexOfInterest[350745])
          const tmp[350715] "const" "temp"
          (350717 'move' tmp[350715](350719 'deref'(350720 '_wide_get_locale'(350725 call(350722 call . dist c"targetLocales") localeIdx))))
          {
            (350733 call chpl__delete(350735 call localDoms localeIdx))
            (350740 call _downEndCount _coforallCount[350738] nil[44])
            (350728 'coforall on block' 0 tmp[350715])
          }
          label _continueLabel[350750]
          _indexOfInterest[350745]
          _iterator[350746]
        }
        label _breakLabel[350751]
        Defer
        {
          {
            (350790 call _endCountFree _coforallCount[350738])
          }
        }
        (350795 call _waitEndCount _coforallCount[350738] 0 numTasks[350739])
      }
      {
        const _coforallCount[350807] "const" "end count" "temp"
        (350863 'move' _coforallCount[350807](350860 call _endCountAlloc 0))
        unknown _indexOfInterest[350814] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[350815] "expr temp" "temp"
        (350824 'move' _iterator[350815](350822 call _getIterator tmpIter[350709]))
        Defer
        {
          {
            (350840 call _freeIterator _iterator[350815])
          }
        }
        { scopeless type
          (350829 'move' _indexOfInterest[350814](350826 call iteratorIndex _iterator[350815]))
        }
        ForLoop[350816]
        {
          unknown localeIdx[350833] "coforall index var" "index var" "insert auto destroy"
          (350835 'move' localeIdx[350833] _indexOfInterest[350814])
          (350847 call _upEndCount _coforallCount[350807] 0)
          const tmp[350700] "const" "temp"
          (350702 'move' tmp[350700](350698 'deref'(350697 '_wide_get_locale'(350688 call(350683 call . dist c"targetLocales") localeIdx))))
          {
            (350694 call chpl__delete(350692 call localDoms localeIdx))
            (350809 call _downEndCount _coforallCount[350807] nil[44])
            (350705 'coforall on block' 0 tmp[350700])
          }
          label _continueLabel[350819]
          _indexOfInterest[350814]
          _iterator[350815]
        }
        label _breakLabel[350820]
        Defer
        {
          {
            (350851 call _endCountFree _coforallCount[350807])
          }
        }
        (350856 call _waitEndCount _coforallCount[350807] 0)
      }
    }
  }
  function _unknown[51].dsiAssignDomain[350895](arg _mt[350904]:_MT[238], arg this[350901] :
  ReplicatedDom, arg rhs[350892] :
  _domain, arg lhsPrivate[350898] :
  bool[10]) : _unknown[51] "method" "no return value for void"
  {
    (350917 call(350907 call . this c"dsiSetIndices")(350915 call(350911 call . rhs c"getIndices")))
  }
  function ReplicatedArr[351048](?).chpl_myLocArr[350965](arg _mt[351052]:_MT[238], arg this[351050]:ReplicatedArr[351048](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(351001 call _cond_test boundsChecking)
    {
      if(350996 call _cond_test(350984 call !(350983 call(350975 call .(350972 call .(350969 call . dom c"dist") c"targetLocDom") c"contains")(350979 call . here c"id"))))
      {
        (350994 call halt "locale "(350990 call . here c"id") " has no local replicand")
      }
    }
    (351016 return(351014 call postfix!(351013 call localArrs(351009 call . here c"id"))))
  }
  function ReplicatedArr[351048](?).replicand[351026](arg _mt[351056]:_MT[238], arg this[351054]:ReplicatedArr[351048](?), arg loc[351023] :
  locale[28]) ref : _unknown[51] "method" "primary method"
  {
    (351042 return(351039 call .(351035 call postfix!(351034 call localArrs(351030 call . loc c"id"))) c"arrLocalRep"))
  }
  type ReplicatedArr[351048](?) const dom[350925] "const" unknown localArrs[350959](350957 call chpl__buildArrayRuntimeType(350955 call chpl__ensureDomainExpr(350933 call .(350930 call . dom c"dist") c"targetLocDom"))(350954 'to unmanaged class from unknown'(350953 'to nilable class from type'(350952 call LocReplicatedArr eltType(350941 call . dom c"rank")(350945 call . dom c"idxType")(350949 call . dom c"stridable"))))) AbsBaseArr
  function _unknown[51].replicand[351066](arg _mt[351071]:_MT[238], arg this[351068] :
  _array, arg loc[351063] :
  locale[28]) ref : _unknown[51] "method" "no doc"
  {
    (351080 return(351079 call(351074 call . _value c"replicand") loc))
  }
  function LocReplicatedArr[351332](?).init[351131](arg _mt[351336]:_MT[238], arg this[351334]:LocReplicatedArr[351332](?), arg eltType[351129]:_any[178](?), param arg rank[351134] :
  int[13], arg idxType[351137]:_any[178](?), param arg stridable[351140] :
  bool[10], arg myDom[351150] :
  (351149 'to unmanaged class from unknown'(351148 call LocReplicatedDom rank idxType stridable)), param arg initElts[351154] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (351162 call =(351158 call . this c"eltType") eltType)
    (351171 call =(351167 call . this c"rank") rank)
    (351179 call =(351175 call . this c"idxType") idxType)
    (351187 call =(351183 call . this c"stridable") stridable)
    (351197 call =(351193 call . this c"myDom") myDom)
    (351219 call =(351201 call . this c"arrLocalRep")(351218 call(351211 call .(351208 call .(351205 call . this c"myDom") c"domLocalRep") c"buildArray") eltType(initElts = 1)))
    if(351281 call _cond_test(351232 call &&(351224 call == initElts 0)(351230 call !(351229 call isPODType eltType))))
    {
      (351278 call compilerError(351275 call +(351256 call + "ReplicatedDist array initialization is not currently supported for element type "(351254 call _cast string[26] eltType)) " - please default-initialize the array"))
    }
  }
  function LocReplicatedArr[351332](?).deinit[351289](arg _mt[351340]:_MT[238], arg this[351338]:LocReplicatedArr[351332](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (351296 call _do_destroy_array arrLocalRep(deinitElts = 1))
  }
  function LocReplicatedArr[351332](?).writeThis[351305](arg _mt[351344]:_MT[238], arg this[351342]:LocReplicatedArr[351332](?), arg f[351303]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {
    (351326 call halt "LocReplicatedArr.writeThis() is not implemented / should not be needed")
  }
  type LocReplicatedArr[351332](?) unknown eltType[351086] "type variable" unknown rank[351090] "param" int[13] unknown idxType[351094] "type variable" unknown stridable[351098] "param" bool[10] unknown myDom[351109](351108 'to unmanaged class from unknown'(351107 call LocReplicatedDom rank idxType stridable)) unknown arrLocalRep[351123] "local field" "no auto destroy" "unsafe"(351121 call chpl__buildArrayRuntimeType(351119 call chpl__ensureDomainExpr(351114 call . myDom c"domLocalRep")) eltType)
  function _unknown[51].init[351352](arg _mt[351359]:_MT[238], arg this[351356] :
  ReplicatedArr, arg eltType[351350]:_any[178](?), arg dom[351354]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (351368 call(351362 call . super c"init")(eltType = eltType))
    (351376 call =(351372 call . this c"dom") dom)
  }
  function _unknown[51].stridable[351384](arg _mt[351389]:_MT[238], arg this[351386] :
  ReplicatedArr) param : _unknown[51] "method" "no parens"
  {
    (351395 return(351392 call . dom c"stridable"))
  }
  function _unknown[51].idxType[351403](arg _mt[351408]:_MT[238], arg this[351405] :
  ReplicatedArr) type : _unknown[51] "method" "no parens"
  {
    (351414 return(351411 call . dom c"idxType"))
  }
  function _unknown[51].rank[351422](arg _mt[351427]:_MT[238], arg this[351424] :
  ReplicatedArr) param : _unknown[51] "method" "no parens"
  {
    (351433 return(351430 call . dom c"rank"))
  }
  function _unknown[51].dsiGetBaseDom[351441](arg _mt[351446]:_MT[238], arg this[351443] :
  ReplicatedArr) : _unknown[51] "method" "method overrides"
  {
    (351449 return dom)
  }
  function _unknown[51].dsiSupportsPrivatization[351457](arg _mt[351462]:_MT[238], arg this[351459] :
  ReplicatedArr) param : _unknown[51] "method" "method overrides"
  {
    (351465 return 1)
  }
  type ReplicatedArrPrvData[351480](?) unknown dompid[351471] unknown localArrs[351475]
  function _unknown[51].dsiGetPrivatizeData[351486](arg _mt[351491]:_MT[238], arg this[351488] :
  ReplicatedArr) : _unknown[51] "method"
  {
    if(351515 call _cond_test traceReplicatedDist)
    {
      (351513 call writeln "ReplicatedArr.dsiGetPrivatizeData")
    }
    (351530 return(351521 'new'(351529 call ReplicatedArrPrvData(351524 call . dom c"pid") localArrs)))
  }
  function _unknown[51].dsiPrivatize[351539](arg _mt[351544]:_MT[238], arg this[351541] :
  ReplicatedArr, arg privatizeData[351537]:_any[178](?)) : _unknown[51] "method"
  {
    if(351569 call _cond_test traceReplicatedDist)
    {
      (351567 call writeln "ReplicatedArr.dsiPrivatize on " here)
    }
    unknown privdom[351587](351586 call chpl_getPrivatizedCopy(351580 'typeof'(351577 call . this c"dom"))(351583 call . privatizeData c"dompid"))
    (351590 'end of statement')
    unknown result[351599](351593 'new'(_chpl_manager = unmanaged[220](?))(351598 call ReplicatedArr eltType privdom))
    (351602 'end of statement')
    (351613 call =(351606 call . result c"localArrs")(351610 call . privatizeData c"localArrs"))
    (351617 return result)
  }
  function _unknown[51].dsiBuildArray[351626](arg _mt[351635]:_MT[238], arg this[351632] :
  ReplicatedDom, arg eltType[351624]:_any[178](?), param arg initElts[351629] :
  bool[10]) : _unknown[51] "method"
  {
    if(351669 call _cond_test traceReplicatedDist)
    {
      (351667 call writeln "ReplicatedDom.dsiBuildArray")
    }
    unknown result[351686](351677 'new'(_chpl_manager = unmanaged[220](?))(351685 call ReplicatedArr eltType(351684 call _to_unmanaged this)))
    (351689 'end of statement')
    {
      unknown tmpIter[351739] "expr temp" "maybe ref" "no copy" "temp"
      (351742 'move' tmpIter[351739](351706 call _build_tuple(351697 call . dist c"targetLocales") localDoms(351703 call . result c"localArrs")))
      unknown isRngDomArr[351945] "maybe param" "temp"
      (351960 'move' isRngDomArr[351945](351958 call ||(351947 call isBoundedRange tmpIter[351739])(351956 call ||(351950 call isDomain tmpIter[351739])(351953 call isArray tmpIter[351739]))))
      if isRngDomArr[351945]
      {
        const _coforallCount[351775] "const" "end count" "temp"
        (351861 'move' _coforallCount[351775](351858 call _endCountAlloc 0))
        unknown numTasks[351776] "temp"
        (351845 'move' numTasks[351776](351841 call . tmpIter[351739] c"size"))
        (351836 call _upEndCount _coforallCount[351775] 0 numTasks[351776])
        unknown _indexOfInterest[351782] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[351783] "expr temp" "temp"
        (351792 'move' _iterator[351783](351790 call _getIteratorZip tmpIter[351739]))
        Defer
        {
          {
            (351829 call _freeIterator _iterator[351783])
          }
        }
        { scopeless type
          (351797 'move' _indexOfInterest[351782](351794 call iteratorIndex _iterator[351783]))
        }
        ForLoop[351784]
        {
          (351802 call _check_tuple_var_decl _indexOfInterest[351782] 3)
          unknown loc[351808] "coforall index var" "index var" "insert auto destroy"
          (351810 'move' loc[351808](351806 call _indexOfInterest[351782] 0))
          unknown locDom[351815] "coforall index var" "index var" "insert auto destroy"
          (351817 'move' locDom[351815](351813 call _indexOfInterest[351782] 1))
          unknown locArr[351822] "coforall index var" "index var" "insert auto destroy"
          (351824 'move' locArr[351822](351820 call _indexOfInterest[351782] 2))
          const tmp[351745] "const" "temp"
          (351747 'move' tmp[351745](351749 'deref'(351750 '_wide_get_locale' loc)))
          {
            (351758 call = locArr(351760 'new'(_chpl_manager = unmanaged[220](?))(351764 call LocReplicatedArr eltType rank idxType stridable(351770 call postfix! locDom)(initElts = initElts))))
            (351777 call _downEndCount _coforallCount[351775] nil[44])
            (351753 'coforall on block' 0 tmp[351745])
          }
          label _continueLabel[351787]
          _indexOfInterest[351782]
          _iterator[351783]
        }
        label _breakLabel[351788]
        Defer
        {
          {
            (351848 call _endCountFree _coforallCount[351775])
          }
        }
        (351853 call _waitEndCount _coforallCount[351775] 0 numTasks[351776])
      }
      {
        const _coforallCount[351865] "const" "end count" "temp"
        (351942 'move' _coforallCount[351865](351939 call _endCountAlloc 0))
        unknown _indexOfInterest[351872] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[351873] "expr temp" "temp"
        (351882 'move' _iterator[351873](351880 call _getIteratorZip tmpIter[351739]))
        Defer
        {
          {
            (351919 call _freeIterator _iterator[351873])
          }
        }
        { scopeless type
          (351887 'move' _indexOfInterest[351872](351884 call iteratorIndex _iterator[351873]))
        }
        ForLoop[351874]
        {
          (351892 call _check_tuple_var_decl _indexOfInterest[351872] 3)
          unknown loc[351898] "coforall index var" "index var" "insert auto destroy"
          (351900 'move' loc[351898](351896 call _indexOfInterest[351872] 0))
          unknown locDom[351905] "coforall index var" "index var" "insert auto destroy"
          (351907 'move' locDom[351905](351903 call _indexOfInterest[351872] 1))
          unknown locArr[351912] "coforall index var" "index var" "insert auto destroy"
          (351914 'move' locArr[351912](351910 call _indexOfInterest[351872] 2))
          (351926 call _upEndCount _coforallCount[351865] 0)
          const tmp[351730] "const" "temp"
          (351732 'move' tmp[351730](351728 'deref'(351727 '_wide_get_locale' loc)))
          {
            (351724 call = locArr(351711 'new'(_chpl_manager = unmanaged[220](?))(351723 call LocReplicatedArr eltType rank idxType stridable(351719 call postfix! locDom)(initElts = initElts))))
            (351867 call _downEndCount _coforallCount[351865] nil[44])
            (351735 'coforall on block' 0 tmp[351730])
          }
          label _continueLabel[351877]
          _indexOfInterest[351872]
          _iterator[351873]
        }
        label _breakLabel[351878]
        Defer
        {
          {
            (351930 call _endCountFree _coforallCount[351865])
          }
        }
        (351935 call _waitEndCount _coforallCount[351865] 0)
      }
    }
    (351965 return result)
  }
  { scopeless type
    (351646 'to unmanaged class from unknown'(351645 call ReplicatedArr eltType(351644 call _to_unmanaged(351642 'typeof' this))))
  }
  function _unknown[51].dsiAccess[351975](arg _mt[351980]:_MT[238], arg this[351977] :
  ReplicatedArr, arg indexx[351973]:_any[178](?)) ref : _unknown[51] "method"
  {
    (351991 return(351990 call(351985 call .(351984 call chpl_myLocArr) c"arrLocalRep") indexx))
  }
  function _unknown[51].dsiBoundsCheck[352001](arg _mt[352006]:_MT[238], arg this[352003] :
  ReplicatedArr, arg indexx[351999]:_any[178](?)) : _unknown[51] "method"
  {
    (352024 return(352023 call(352015 call .(352012 call .(352009 call . dom c"dist") c"targetLocDom") c"contains")(352019 call . here c"id")))
  }
  function _unknown[51].dsiSerialWrite[352034](arg _mt[352039]:_MT[238], arg this[352036] :
  ReplicatedArr, arg f[352032]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (352067 call(352062 call .(352059 call .(352056 call .(352054 call postfix!(352053 call localArrs(352049 call .(352048 call(352044 call . f c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialWrite") f)
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiSerialRead[352078](arg _mt[352085]:_MT[238], arg this[352082] :
  ReplicatedArr, arg f[352076]:_any[178](?), arg loc[352080]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (352113 call(352108 call .(352105 call .(352102 call .(352100 call postfix!(352099 call localArrs(352095 call .(352094 call(352090 call . f c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialRead") f)
  }
  { scopeless type
    void[4]
  }
  function isReplicatedArr[352123](arg arr[352121]:_any[178](?)) param : _unknown[51]
  {
    (352137 return(354847 'is_subtype' ReplicatedArr(352133 'typeof'(352132 call _to_borrowed(352130 call chpl__getActualArray arr)))))
  }
  function chpl_serialReadWriteRectangular[352146](arg f[352144]:_any[178](?), arg arr[352148]:_any[178](?), arg dom[352150]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const origloc[352162] "const"(352161 call(352157 call . f c"readWriteThisFromLocale"))
    (352165 'end of statement')
    const tmp[352178] "const" "temp"
    (352180 'move' tmp[352178](352176 'deref'(352175 '_wide_get_locale' origloc)))
    {
      (352173 call chpl_serialReadWriteRectangularHelper f arr dom)
      (352183 'on block' 0 tmp[352178])
    }
  }
  where {
    (352155 call isReplicatedArr arr)
  }
  function _unknown[51].dsiElementInitializationComplete[352192](arg _mt[352197]:_MT[238], arg this[352194] :
  ReplicatedArr) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  }
  function _unknown[51].dsiElementDeinitializationComplete[352205](arg _mt[352210]:_MT[238], arg this[352207] :
  ReplicatedArr) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  }
  function _unknown[51].dsiDestroyArr[352222](arg _mt[352227]:_MT[238], arg this[352224] :
  ReplicatedArr, arg deinitElts[352219] :
  bool[10]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[352264] "expr temp" "maybe ref" "no copy" "temp"
      (352267 'move' tmpIter[352264](352243 call _build_tuple(352238 call .(352235 call . dom c"dist") c"targetLocales") localArrs))
      unknown isRngDomArr[352442] "maybe param" "temp"
      (352457 'move' isRngDomArr[352442](352455 call ||(352444 call isBoundedRange tmpIter[352264])(352453 call ||(352447 call isDomain tmpIter[352264])(352450 call isArray tmpIter[352264]))))
      if isRngDomArr[352442]
      {
        const _coforallCount[352286] "const" "end count" "temp"
        (352365 'move' _coforallCount[352286](352362 call _endCountAlloc 0))
        unknown numTasks[352287] "temp"
        (352349 'move' numTasks[352287](352345 call . tmpIter[352264] c"size"))
        (352340 call _upEndCount _coforallCount[352286] 0 numTasks[352287])
        unknown _indexOfInterest[352293] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[352294] "expr temp" "temp"
        (352303 'move' _iterator[352294](352301 call _getIteratorZip tmpIter[352264]))
        Defer
        {
          {
            (352333 call _freeIterator _iterator[352294])
          }
        }
        { scopeless type
          (352308 'move' _indexOfInterest[352293](352305 call iteratorIndex _iterator[352294]))
        }
        ForLoop[352295]
        {
          (352313 call _check_tuple_var_decl _indexOfInterest[352293] 2)
          unknown loc[352319] "coforall index var" "index var" "insert auto destroy"
          (352321 'move' loc[352319](352317 call _indexOfInterest[352293] 0))
          unknown locArr[352326] "coforall index var" "index var" "insert auto destroy"
          (352328 'move' locArr[352326](352324 call _indexOfInterest[352293] 1))
          const tmp[352270] "const" "temp"
          (352272 'move' tmp[352270](352274 'deref'(352275 '_wide_get_locale' loc)))
          {
            {
              (352283 call chpl__delete locArr)
            }
            (352288 call _downEndCount _coforallCount[352286] nil[44])
            (352278 'coforall on block' 0 tmp[352270])
          }
          label _continueLabel[352298]
          _indexOfInterest[352293]
          _iterator[352294]
        }
        label _breakLabel[352299]
        Defer
        {
          {
            (352352 call _endCountFree _coforallCount[352286])
          }
        }
        (352357 call _waitEndCount _coforallCount[352286] 0 numTasks[352287])
      }
      {
        const _coforallCount[352369] "const" "end count" "temp"
        (352439 'move' _coforallCount[352369](352436 call _endCountAlloc 0))
        unknown _indexOfInterest[352376] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[352377] "expr temp" "temp"
        (352386 'move' _iterator[352377](352384 call _getIteratorZip tmpIter[352264]))
        Defer
        {
          {
            (352416 call _freeIterator _iterator[352377])
          }
        }
        { scopeless type
          (352391 'move' _indexOfInterest[352376](352388 call iteratorIndex _iterator[352377]))
        }
        ForLoop[352378]
        {
          (352396 call _check_tuple_var_decl _indexOfInterest[352376] 2)
          unknown loc[352402] "coforall index var" "index var" "insert auto destroy"
          (352404 'move' loc[352402](352400 call _indexOfInterest[352376] 0))
          unknown locArr[352409] "coforall index var" "index var" "insert auto destroy"
          (352411 'move' locArr[352409](352407 call _indexOfInterest[352376] 1))
          (352423 call _upEndCount _coforallCount[352369] 0)
          const tmp[352254] "const" "temp"
          (352256 'move' tmp[352254](352252 'deref'(352251 '_wide_get_locale' loc)))
          {
            {
              (352247 call chpl__delete locArr)
            }
            (352371 call _downEndCount _coforallCount[352369] nil[44])
            (352259 'coforall on block' 0 tmp[352254])
          }
          label _continueLabel[352381]
          _indexOfInterest[352376]
          _iterator[352377]
        }
        label _breakLabel[352382]
        Defer
        {
          {
            (352427 call _endCountFree _coforallCount[352369])
          }
        }
        (352432 call _waitEndCount _coforallCount[352369] 0)
      }
    }
  }
  function _unknown[51].these[352467](arg _mt[352472]:_MT[238], arg this[352469] :
  ReplicatedArr) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[352485] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352486] "expr temp" "temp"
      (352495 'move' _iterator[352486](352493 call _getIterator(352479 call .(352478 call chpl_myLocArr) c"arrLocalRep")))
      Defer
      {
        {
          (352512 call _freeIterator _iterator[352486])
        }
      }
      { scopeless type
        (352501 'move' _indexOfInterest[352485](352498 call iteratorIndex _iterator[352486]))
      }
      ForLoop[352487]
      {
        unknown a[352505] "index var" "insert auto destroy"
        (352507 'move' a[352505] _indexOfInterest[352485])
        (352483 yield a)
        label _continueLabel[352490]
        _indexOfInterest[352485]
        _iterator[352486]
      }
      label _breakLabel[352491]
    }
  }
  { scopeless type
    eltType
  }
  function _unknown[51].these[352530](arg _mt[352535]:_MT[238], arg this[352532] :
  ReplicatedArr, param arg tag[352527] :
  iterKind) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[352555] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352556] "expr temp" "temp"
      (352565 'move' _iterator[352556](352563 call _getIterator(352551 call(352546 call . dom c"these") tag)))
      Defer
      {
        {
          (352582 call _freeIterator _iterator[352556])
        }
      }
      { scopeless type
        (352571 'move' _indexOfInterest[352555](352568 call iteratorIndex _iterator[352556]))
      }
      ForLoop[352557]
      {
        unknown follow[352575] "index var" "insert auto destroy"
        (352577 'move' follow[352575] _indexOfInterest[352555])
        (352553 yield follow)
        label _continueLabel[352560]
        _indexOfInterest[352555]
        _iterator[352556]
      }
      label _breakLabel[352561]
    }
  }
  where {
    (352542 call == tag(352539 call . iterKind c"leader"))
  }
  function _unknown[51].these[352600](arg _mt[352607]:_MT[238], arg this[352604] :
  ReplicatedArr, param arg tag[352597] :
  iterKind, arg followThis[352602]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[352633] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352634] "expr temp" "temp"
      (352643 'move' _iterator[352634](352641 call _getIterator(352629 call(352623 call .(352620 call .(352619 call chpl_myLocArr) c"arrLocalRep") c"these") tag followThis)))
      Defer
      {
        {
          (352660 call _freeIterator _iterator[352634])
        }
      }
      { scopeless type
        (352649 'move' _indexOfInterest[352633](352646 call iteratorIndex _iterator[352634]))
      }
      ForLoop[352635]
      {
        unknown a[352653] "index var" "insert auto destroy"
        (352655 'move' a[352653] _indexOfInterest[352633])
        (352631 yield a)
        label _continueLabel[352638]
        _indexOfInterest[352633]
        _iterator[352634]
      }
      label _breakLabel[352639]
    }
  }
  where {
    (352614 call == tag(352611 call . iterKind c"follower"))
  }
  function _unknown[51].dsiTargetLocales[352674](arg _mt[352679]:_MT[238], arg this[352676] :
  Replicated) : _unknown[51] "method"
  {
    (352682 return targetLocales)
  }
  function _unknown[51].dsiTargetLocales[352690](arg _mt[352695]:_MT[238], arg this[352692] :
  ReplicatedDom) : _unknown[51] "method"
  {
    (352701 return(352698 call . dist c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[352709](arg _mt[352714]:_MT[238], arg this[352711] :
  ReplicatedArr) : _unknown[51] "method"
  {
    (352723 return(352720 call .(352717 call . dom c"dist") c"targetLocales"))
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[352731](arg _mt[352736]:_MT[238], arg this[352733] :
  ReplicatedDom) param : _unknown[51] "method"
  {
    (352739 return 1)
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[352747](arg _mt[352752]:_MT[238], arg this[352749] :
  ReplicatedArr) param : _unknown[51] "method"
  {
    (352755 return 1)
  }
  function _unknown[51].dsiLocalSubdomain[352767](arg _mt[352772]:_MT[238], arg this[352769] :
  ReplicatedDom, arg loc[352764] :
  locale[28]) : _unknown[51] "method"
  {
    if(352805 call _cond_test(352786 call(352778 call .(352775 call . localDoms c"_dom") c"contains")(352782 call . loc c"id")))
    {
      (352788 return domRep)
    }
    {
      unknown d[352797](352795 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
      (352800 'end of statement')
      (352803 return d)
    }
  }
  function _unknown[51].dsiLocalSubdomain[352820](arg _mt[352825]:_MT[238], arg this[352822] :
  ReplicatedArr, arg loc[352817] :
  locale[28]) : _unknown[51] "method"
  {
    if(352861 call _cond_test(352839 call(352831 call .(352828 call . localArrs c"_dom") c"contains")(352835 call . loc c"id")))
    {
      (352844 return(352841 call . dom c"domRep"))
    }
    {
      unknown d[352853](352851 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
      (352856 'end of statement')
      (352859 return d)
    }
  }
  function _unknown[51].dsiLocalSlice[352874](arg _mt[352879]:_MT[238], arg this[352876] :
  ReplicatedArr, arg ranges[352872]:_any[178](?)) : _unknown[51] "method"
  {
    (352891 return(352890 call(352884 call .(352883 call chpl_myLocArr) c"arrLocalRep")(352888 'expand_tuple' ranges)))
  }
}