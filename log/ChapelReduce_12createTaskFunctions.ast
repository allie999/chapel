AST dump for ChapelReduce after pass createTaskFunctions.
Module use list: ChapelStandard ChapelLocks Reflection 

{
  function chpl__init_ChapelReduce[415997]() : void[4] "insert line file info" "module init"
  {
    (512710 return _void[55])
  }
  function chpl__scanStateResTypesMatch[81790](arg op[81788]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512171] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[491961] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628583] "expr temp" "maybe param" "maybe type" "temp"
      (628586 'move' call_tmp[628583](81799 call(81795 call (partial) generate _mt[243] op[81788])))
      (491965 'move' call_type_tmp[491961](81800 'typeof' call_tmp[628583]))
    }
    unknown resType[81801] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[491961]
    (541516 'move' resType[81801] call_type_tmp[491961])
    (476723 'end of statement')
    { scopeless type
      unknown call_type_tmp[491967] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628590] "expr temp" "maybe param" "maybe type" "temp"
      (628593 'move' call_tmp[628590](81808 call identity _mt[243] op[81788]))
      (491971 'move' call_type_tmp[491967](81811 'typeof' call_tmp[628590]))
    }
    unknown stateType[81812] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[491967]
    (541519 'move' stateType[81812] call_type_tmp[491967])
    (476724 'end of statement')
    unknown call_tmp[628595] "expr temp" "maybe param" "maybe type" "temp"
    (628598 'move' call_tmp[628595](81817 call == resType[81801] stateType[81812]))
    (512176 'move' ret[512171](512175 'deref' call_tmp[628595]))
    gotoReturn _end_chpl__scanStateResTypesMatch[512169] _end_chpl__scanStateResTypesMatch[512169]
    (476725 'end of statement' resType[81801] stateType[81812])
    label _end_chpl__scanStateResTypesMatch[512169]
    (512173 return ret[512171])
  }
  function chpl__scanIteratorZip[81827](arg op[81825]:_any[178](?), arg data[81829]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512182] "RVV" "temp"
    (81850 call compilerWarning "scan has been serialized (see issue #12482)")
    (476728 'end of statement')
    unknown arr[81868] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter1[581538](arg iterator[581540]:_any[178](?), arg op[581576]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[581587] "RVV" "temp"
      {
        unknown _indexOfInterest[581545] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[581546] "expr temp" "temp"
        (581555 'move' _iterator[581546](581553 call _getIteratorZip iterator[581540]))
        Defer
        {
          {
            (581569 call _freeIterator _iterator[581546])
          }
        }
        { scopeless type
          (581560 'move' _indexOfInterest[581545](581557 call iteratorIndex _iterator[581546]))
        }
        ForLoop[581547] for-expr
        {
          unknown d[81866] "index var" "insert auto destroy" "no doc"
          (581580 'end of statement')
          (581564 'move' d[81866] _indexOfInterest[581545])
          (581581 'end of statement' d[81866])
          {
            {
              unknown yret[581591] "YVV" "temp"
              unknown call_tmp[581598] "expr temp" "maybe param" "maybe type" "temp"
              (581601 'move' call_tmp[581598](81862 call chpl__accumgen op[581576] d[81866]))
              (581594 'move' yret[581591](581593 'deref' call_tmp[581598]))
              (581596 yield yret[581591])
              (581583 'end of statement' d[81866])
            }
          }
          label _continueLabel[581550]
          _indexOfInterest[581545]
          _iterator[581546]
        }
        label _breakLabel[581551]
      }
      (581589 return ret[581587])
    }
    function chpl__forexpr1[581518](arg iterExpr[581521]:_any[178](?), arg op[581525]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[581606] "RVV" "temp"
      unknown _iterator[581528] "expr temp" "maybe ref" "temp"
      (581530 'move' _iterator[581528] iterExpr[581521])
      unknown call_tmp[581613] "expr temp" "maybe param" "maybe type" "temp"
      (581616 'move' call_tmp[581613](581533 call chpl__loopexpr_iter1 _iterator[581528] op[581525]))
      (581611 'move' ret[581606](581610 'deref' call_tmp[581613]))
      (581608 return ret[581606])
    }
    unknown call_tmp[581618] "expr temp" "maybe param" "maybe type" "temp"
    (581621 'move' call_tmp[581618](81857 call _build_tuple(81855 'expand_tuple' data[81829])))
    unknown call_tmp[581623] "maybe param" "maybe type" "temp"
    (581626 'move' call_tmp[581623](581523 call chpl__forexpr1 call_tmp[581618] op[81825]))
    (581631 'iterator record set shape' call_tmp[581623](581629 'expand_tuple' data[81829]) 1)
    (541521 'init var' arr[81868] call_tmp[581623])
    (81871 'end of statement')
    (81874 call chpl__delete op[81825])
    (476729 'end of statement')
    (512187 'move' ret[512182](512186 'deref' arr[81868]))
    gotoReturn _end_chpl__scanIteratorZip[512180] _end_chpl__scanIteratorZip[512180]
    (476730 'end of statement' arr[81868])
    label _end_chpl__scanIteratorZip[512180]
    (512184 return ret[512182])
  }
  function chpl__scanIterator[81886](arg op[81884]:_any[178](?), arg data[81888]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512193] "RVV" "temp"
    unknown tmp[421693] "maybe param" "temp"
    (421704 'move' tmp[421693](81897 call isArray data[81888]))
    unknown call_tmp[628600] "expr temp" "maybe param" "maybe type" "temp"
    (628603 'move' call_tmp[628600](421706 call _cond_invalid tmp[421693]))
    if call_tmp[628600]
    {
      (421709 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown supportsPar[81922] "dead at end of block" "param"
    unknown tmp[560091] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560092] "maybe param" "temp"
    unknown call_tmp[628605] "expr temp" "maybe param" "maybe type" "temp"
    (628608 'move' call_tmp[628605](421694 call isTrue tmp[421693]))
    (560097 'move' tmp[560092](560095 call _cond_test call_tmp[628605]))
    if tmp[560092]
    {
      unknown tmp[560099] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628610] "expr temp" "maybe param" "maybe type" "temp"
      (628613 'move' call_tmp[628610](81919 call canResolveMethod data[81888] "_scan" op[81884]))
      (560101 'move' tmp[560099](421697 call isTrue call_tmp[628610]))
      (560106 'move' tmp[560091](560103 '_paramFoldLogical' tmp[560092] tmp[560099]))
    }
    {
      (560111 'move' tmp[560091](560108 '_paramFoldLogical' tmp[560092] 0))
    }
    (541523 'init var' supportsPar[81922] tmp[560091])
    (81925 'end of statement')
    unknown call_tmp[628615] "expr temp" "maybe param" "maybe type" "temp"
    (628618 'move' call_tmp[628615](81966 call _cond_test supportsPar[81922]))
    if call_tmp[628615]
    {
      unknown call_tmp[628622] "expr temp" "maybe param" "maybe type" "temp"
      (628625 'move' call_tmp[628622](81933 call(81928 call (partial) _scan _mt[243] data[81888]) op[81884]))
      (512198 'move' ret[512193](512197 'deref' call_tmp[628622]))
      gotoReturn _end_chpl__scanIterator[512191] _end_chpl__scanIterator[512191]
    }
    {
      (81940 call compilerWarning "scan has been serialized (see issue #12482)")
      (476734 'end of statement')
      unknown arr[81954] "dead at end of block" "insert auto destroy"
      function chpl__loopexpr_iter2[581653](arg iterator[581655]:_any[178](?), arg op[581691]:_any[178](?)) : _unknown[51] "iterator fn"
      {
        unknown ret[581702] "RVV" "temp"
        {
          unknown _indexOfInterest[581660] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[581661] "expr temp" "temp"
          (581670 'move' _iterator[581661](581668 call _getIterator iterator[581655]))
          Defer
          {
            {
              (581684 call _freeIterator _iterator[581661])
            }
          }
          { scopeless type
            (581675 'move' _indexOfInterest[581660](581672 call iteratorIndex _iterator[581661]))
          }
          ForLoop[581662] for-expr
          {
            unknown d[81952] "index var" "insert auto destroy" "no doc"
            (581695 'end of statement')
            (581679 'move' d[81952] _indexOfInterest[581660])
            (581696 'end of statement' d[81952])
            {
              {
                unknown yret[581706] "YVV" "temp"
                unknown call_tmp[581713] "expr temp" "maybe param" "maybe type" "temp"
                (581716 'move' call_tmp[581713](81949 call chpl__accumgen op[581691] d[81952]))
                (581709 'move' yret[581706](581708 'deref' call_tmp[581713]))
                (581711 yield yret[581706])
                (581698 'end of statement' d[81952])
              }
            }
            label _continueLabel[581665]
            _indexOfInterest[581660]
            _iterator[581661]
          }
          label _breakLabel[581666]
        }
        (581704 return ret[581702])
      }
      function chpl__forexpr2[581633](arg iterExpr[581636]:_any[178](?), arg op[581640]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
      {
        unknown ret[581721] "RVV" "temp"
        unknown _iterator[581643] "expr temp" "maybe ref" "temp"
        (581645 'move' _iterator[581643] iterExpr[581636])
        unknown call_tmp[581728] "expr temp" "maybe param" "maybe type" "temp"
        (581731 'move' call_tmp[581728](581648 call chpl__loopexpr_iter2 _iterator[581643] op[581640]))
        (581726 'move' ret[581721](581725 'deref' call_tmp[581728]))
        (581723 return ret[581721])
      }
      unknown call_tmp[581733] "maybe param" "maybe type" "temp"
      (581736 'move' call_tmp[581733](581638 call chpl__forexpr2 data[81888] op[81884]))
      (581740 'iterator record set shape' call_tmp[581733] data[81888] 1)
      (541525 'init var' arr[81954] call_tmp[581733])
      (81957 'end of statement')
      (81960 call chpl__delete op[81884])
      (476735 'end of statement')
      (512203 'move' ret[512193](512202 'deref' arr[81954]))
      gotoReturn _end_chpl__scanIterator[512191] _end_chpl__scanIterator[512191]
      (476736 'end of statement' arr[81954])
    }
    label _end_chpl__scanIterator[512191]
    (512195 return ret[512193])
    (355101 'used modules list'(81891 'use' Reflection[224903]))
  }
  function chpl__accumgen[81976](arg op[81974]:_any[178](?), arg d[81978]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512209] "RVV" "temp"
    (81988 call(81983 call (partial) accumulate _mt[243] op[81974]) d[81978])
    (476738 'end of statement')
    unknown call_tmp[628631] "expr temp" "maybe param" "maybe type" "temp"
    (628634 'move' call_tmp[628631](81996 call(81992 call (partial) generate _mt[243] op[81974])))
    (512214 'move' ret[512209](512213 'deref' call_tmp[628631]))
    (512211 return ret[512209])
  }
  function chpl__reduceCombine[82005](arg globalOp[82003]:_any[178](?), arg localOp[82007]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[82050] "const" "temp"
    unknown call_tmp[628636] "expr temp" "maybe param" "maybe type" "temp"
    (628639 'move' call_tmp[628636](82047 '_wide_get_locale' globalOp[82003]))
    (82052 'move' tmp[82050](82048 'deref' call_tmp[628636]))
    (934443 call on_fn[934439] tmp[82050])
    function on_fn[934439](const in arg dummy_locale_arg[934441]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown call_tmp[628643] "expr temp" "maybe param" "maybe type" "temp"
        (628646 'move' call_tmp[628643](82013 call l _mt[243] globalOp[82003]))
        (82022 call(82018 call (partial) lock _mt[243] call_tmp[628643]))
        (476740 'end of statement')
        (82033 call(82028 call (partial) combine _mt[243] globalOp[82003]) localOp[82007])
        (476741 'end of statement')
        unknown call_tmp[628654] "expr temp" "maybe param" "maybe type" "temp"
        (628657 'move' call_tmp[628654](82036 call l _mt[243] globalOp[82003]))
        (82045 call(82041 call (partial) unlock _mt[243] call_tmp[628654]))
      }
      (934446 return _void[55])
    }
    {
    }
    (512216 return _void[55])
  }
  function chpl__cleanupLocalOp[82065](arg globalOp[82063]:_any[178](?), arg localOp[82067]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (82071 call chpl__delete localOp[82067])
    (512218 return _void[55])
  }
  function chpl_sumTypeIsSame[82081](arg eltType[82079]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512222] "RVV" "param" "temp"
    unknown tmp[421714] "maybe param" "temp"
    (421725 'move' tmp[421714](82086 call isNumeric eltType[82079]))
    unknown call_tmp[628661] "expr temp" "maybe param" "maybe type" "temp"
    (628664 'move' call_tmp[628661](421727 call _cond_invalid tmp[421714]))
    if call_tmp[628661]
    {
      (421730 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560118] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560119] "maybe param" "temp"
    unknown call_tmp[628666] "expr temp" "maybe param" "maybe type" "temp"
    (628669 'move' call_tmp[628666](421715 call isTrue tmp[421714]))
    (560124 'move' tmp[560119](560122 call _cond_test call_tmp[628666]))
    if tmp[560119]
    {
      (560129 'move' tmp[560118](560126 '_paramFoldLogical' tmp[560119] 1))
    }
    {
      unknown tmp[560131] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628671] "expr temp" "maybe param" "maybe type" "temp"
      (628674 'move' call_tmp[628671](82090 call isString eltType[82079]))
      (560133 'move' tmp[560131](421719 call isTrue call_tmp[628671]))
      (560138 'move' tmp[560118](560135 '_paramFoldLogical' tmp[560119] tmp[560131]))
    }
    unknown call_tmp[628676] "expr temp" "maybe param" "maybe type" "temp"
    (628679 'move' call_tmp[628676](82163 call _cond_test tmp[560118]))
    if call_tmp[628676]
    {
      (512227 'move' ret[512222](512226 'deref' 1))
      gotoReturn _end_chpl_sumTypeIsSame[512220] _end_chpl_sumTypeIsSame[512220]
    }
    {
      unknown call_tmp[628681] "expr temp" "maybe param" "maybe type" "temp"
      (628684 'move' call_tmp[628681](82100 call isDomain eltType[82079]))
      unknown call_tmp[628686] "expr temp" "maybe param" "maybe type" "temp"
      (628689 'move' call_tmp[628686](82158 call _cond_test call_tmp[628681]))
      if call_tmp[628686]
      {
        unknown d[82102] "dead at end of block" "insert auto destroy"
        (541527 'default init var' d[82102] eltType[82079])
        (82105 'end of statement')
        unknown call_tmp[628691] "expr temp" "maybe param" "maybe type" "temp"
        (628694 'move' call_tmp[628691](82110 call isAssociativeDom d[82102]))
        (512232 'move' ret[512222](512231 'deref' call_tmp[628691]))
        gotoReturn _end_chpl_sumTypeIsSame[512220] _end_chpl_sumTypeIsSame[512220]
        (476746 'end of statement' d[82102])
      }
      {
        unknown call_tmp[628696] "expr temp" "maybe param" "maybe type" "temp"
        (628699 'move' call_tmp[628696](82116 call isArray eltType[82079]))
        unknown call_tmp[628701] "expr temp" "maybe param" "maybe type" "temp"
        (628704 'move' call_tmp[628701](82154 call _cond_test call_tmp[628696]))
        if call_tmp[628701]
        {
          unknown arrInstType[82122] "dead at end of block" "insert auto destroy" "type variable"(82121 'static field type' eltType[82079] "_instance")
          (541532 'move' arrInstType[82122](541529 'static field type' eltType[82079] "_instance"))
          unknown instanceObj[82128] "dead at end of block" "insert auto destroy"
          unknown call_tmp[628706] "expr temp" "maybe param" "maybe type" "temp"
          (628709 'move' call_tmp[628706](82127 'to nilable class from type' arrInstType[82122]))
          (541534 'default init var' instanceObj[82128] call_tmp[628706])
          (82131 'end of statement' arrInstType[82122])
          unknown call_tmp[628711] "expr temp" "maybe param" "maybe type" "temp"
          (628714 'move' call_tmp[628711](82135 call postfix! instanceObj[82128]))
          unknown call_tmp[628718] "expr temp" "maybe param" "maybe type" "temp"
          (628721 'move' call_tmp[628718](82137 call eltType _mt[243] call_tmp[628711]))
          unknown instanceEltType[82141] "dead at end of block" "insert auto destroy" "type variable"(82140 'static typeof' call_tmp[628718])
          unknown call_tmp[628723] "expr temp" "maybe param" "maybe type" "temp"
          (628726 'move' call_tmp[628723](541540 call postfix! instanceObj[82128]))
          unknown call_tmp[628730] "expr temp" "maybe param" "maybe type" "temp"
          (628733 'move' call_tmp[628730](541538 call eltType _mt[243] call_tmp[628723]))
          (541543 'move' instanceEltType[82141](541536 'static typeof' call_tmp[628730]))
          (476749 'end of statement' instanceObj[82128])
          unknown call_tmp[628735] "expr temp" "maybe param" "maybe type" "temp"
          (628738 'move' call_tmp[628735](82147 call chpl_sumTypeIsSame instanceEltType[82141]))
          (512237 'move' ret[512222](512236 'deref' call_tmp[628735]))
          gotoReturn _end_chpl_sumTypeIsSame[512220] _end_chpl_sumTypeIsSame[512220]
          (476751 'end of statement' instanceEltType[82141])
        }
        {
          (512242 'move' ret[512222](512241 'deref' 0))
          gotoReturn _end_chpl_sumTypeIsSame[512220] _end_chpl_sumTypeIsSame[512220]
        }
      }
    }
    label _end_chpl_sumTypeIsSame[512220]
    (512224 return ret[512222])
  }
  function chpl__sumType[82175](arg eltType[82173]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[512248] "RVV" "temp" "type variable"
    unknown call_tmp[628740] "expr temp" "maybe param" "maybe type" "temp"
    (628743 'move' call_tmp[628740](82180 call chpl_sumTypeIsSame eltType[82173]))
    unknown call_tmp[628745] "expr temp" "maybe param" "maybe type" "temp"
    (628748 'move' call_tmp[628745](82286 call _cond_test call_tmp[628740]))
    if call_tmp[628745]
    {
      (512253 'move' ret[512248](512252 'deref' eltType[82173]))
      gotoReturn _end_chpl__sumType[512246] _end_chpl__sumType[512246]
    }
    {
      unknown x[82186] "dead at end of block" "insert auto destroy"
      (541545 'default init var' x[82186] eltType[82173])
      (82189 'end of statement')
      unknown call_tmp[628750] "expr temp" "maybe param" "maybe type" "temp"
      (628753 'move' call_tmp[628750](82194 call isArray x[82186]))
      unknown call_tmp[628755] "expr temp" "maybe param" "maybe type" "temp"
      (628758 'move' call_tmp[628755](82282 call _cond_test call_tmp[628750]))
      if call_tmp[628755]
      {
        unknown xET[82199] "dead at end of block" "insert auto destroy" "type variable"(82196 call eltType _mt[243] x[82186])
        (541551 'move' xET[82199](541548 call eltType _mt[243] x[82186]))
        (476755 'end of statement' x[82186])
        unknown xST[82207] "dead at end of block" "insert auto destroy" "type variable"(82206 call chpl__sumType xET[82199])
        (541556 'move' xST[82207](541554 call chpl__sumType xET[82199]))
        (476757 'end of statement' xET[82199])
        unknown call_tmp[628764] "expr temp" "maybe param" "maybe type" "temp"
        (628767 'move' call_tmp[628764](82212 call == xET[82199] xST[82207]))
        unknown call_tmp[628769] "expr temp" "maybe param" "maybe type" "temp"
        (628772 'move' call_tmp[628769](82227 call _cond_test call_tmp[628764]))
        if call_tmp[628769]
        {
          (512258 'move' ret[512248](512257 'deref' eltType[82173]))
          gotoReturn _end_chpl__sumType[512246] _end_chpl__sumType[512246]
        }
        {
          function chpl__loopexpr_iter3[581829](arg iterator[581831]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[581969] "RVV" "temp"
            {
              unknown _indexOfInterest[581836] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581837] "expr temp" "temp"
              (581846 'move' _iterator[581837](581844 call _getIterator iterator[581831]))
              Defer
              {
                {
                  (581863 call _freeIterator _iterator[581837])
                }
              }
              { scopeless type
                (581851 'move' _indexOfInterest[581836](581848 call iteratorIndex _iterator[581837]))
              }
              ForLoop[581838] for-expr
              {
                unknown chpl__elidedIdx[581856] "index var" "insert auto destroy"
                (581963 'end of statement')
                (581858 'move' chpl__elidedIdx[581856] _indexOfInterest[581836])
                (581964 'end of statement' chpl__elidedIdx[581856])
                {
                  {
                    unknown yret[581973] "YVV" "temp"
                    (581976 'move' yret[581973](581975 'deref' xST[82207]))
                    (581978 yield yret[581973])
                  }
                }
                label _continueLabel[581841]
                _indexOfInterest[581836]
                _iterator[581837]
              }
              label _breakLabel[581842]
            }
            (581971 return ret[581969])
          }
          function chpl__loopexpr_iter3[581870](param arg tag[581874]:iterKind[453], arg iterator[581877]:_any[178](?)) : _unknown[51] "fn returns iterator"
          {
            unknown ret[582005] "RVV" "temp"
            const _leaderIterator[581889] "const" "expr temp" "temp"
            (581894 'move' _leaderIterator[581889](581891 call _toLeader iterator[581877]))
            (582010 'move' ret[582005](582009 'deref' _leaderIterator[581889]))
            (582007 return ret[582005])
          }
          where {
            unknown tmp[581981] "maybe param" "temp"
            (581992 'move' tmp[581981](581879 call == tag[581874] leader[447]))
            unknown call_tmp[582039] "expr temp" "maybe param" "maybe type" "temp"
            (582042 'move' call_tmp[582039](581994 call _cond_invalid tmp[581981]))
            if call_tmp[582039]
            {
              (581997 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[582012] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[582013] "maybe param" "temp"
            unknown call_tmp[582044] "expr temp" "maybe param" "maybe type" "temp"
            (582047 'move' call_tmp[582044](581982 call isTrue tmp[581981]))
            (582018 'move' tmp[582013](582016 call _cond_test call_tmp[582044]))
            if tmp[582013]
            {
              unknown tmp[582020] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[582049] "expr temp" "maybe param" "maybe type" "temp"
              (582052 'move' call_tmp[582049](581883 'call resolves' "_toLeader" iterator[581877]))
              (582022 'move' tmp[582020](581985 call isTrue call_tmp[582049]))
              (582027 'move' tmp[582012](582024 '_paramFoldLogical' tmp[582013] tmp[582020]))
            }
            {
              (582032 'move' tmp[582012](582029 '_paramFoldLogical' tmp[582013] 0))
            }
            (748483 call chpl_statementLevelSymbol tmp[582012])
          }
          function chpl__loopexpr_iter3[581898](param arg tag[581902]:iterKind[453], arg followThis[581905]:_any[178](?), arg iterator[581907]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[582062] "RVV" "temp"
            const _followerIterator[581914] "const" "expr temp" "temp"
            (581920 'move' _followerIterator[581914](581916 call _toFollower iterator[581907] followThis[581905]))
            {
              unknown _indexOfInterest[581927] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581928] "expr temp" "temp"
              (581937 'move' _iterator[581928](581935 call _getIterator _followerIterator[581914]))
              Defer
              {
                {
                  (581954 call _freeIterator _iterator[581928])
                }
              }
              { scopeless type
                (581942 'move' _indexOfInterest[581927](581939 call iteratorIndex _iterator[581928]))
              }
              ForLoop[581929] lowered-forall for-expr
              {
                unknown chpl__elidedIdx[581947] "index var" "insert auto destroy"
                (582056 'end of statement')
                (581949 'move' chpl__elidedIdx[581947] _indexOfInterest[581927])
                (582057 'end of statement' chpl__elidedIdx[581947])
                {
                  {
                    unknown yret[582066] "YVV" "temp"
                    (582069 'move' yret[582066](582068 'deref' xST[82207]))
                    (582071 yield yret[582066])
                  }
                }
                label _continueLabel[581932]
                _indexOfInterest[581927]
                _iterator[581928]
              }
              label _breakLabel[581933]
            }
            (582064 return ret[582062])
          }
          where {
            (581910 call == tag[581902] follower[449])
          }
          function chpl__forallexpr3[581742](arg iterExpr[581745]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "maybe type" "fn returns iterator"
          {
            unknown ret[582083] "RVV" "maybe type" "temp"
            function _isArrayTypeFn[581751]() : _unknown[51] "inline"
            {
              unknown _iterator[581756] "temp"
              (581761 'move' _iterator[581756](581758 call _getIterator iterExpr[581745]))
              unknown _indexOfInterest[581763] "an _indexOfInterest or chpl__followIdx variable" "temp"
              (581768 'move' _indexOfInterest[581763](581765 call iteratorIndex _iterator[581756]))
              unknown chpl__elidedIdx[581774] "index var" "insert auto destroy"
              (582073 'end of statement')
              (581776 'move' chpl__elidedIdx[581774] _indexOfInterest[581763])
              (582074 'end of statement' chpl__elidedIdx[581774])
              unknown isType_result[581778] "param" "temp"
              {
                (581784 'move' isType_result[581778](581782 call isType xST[82207]))
              }
              if isType_result[581778]
              {
                (581787 'move' _isArrayType[581754] 1)
              }
              {
                (581790 'move' _isArrayType[581754] 0)
              }
              (582079 return _void[55])
            }
            unknown _isArrayType[581754] "maybe param" "temp"
            { scopeless type
              (581797 call _isArrayTypeFn[581751])
            }
            if _isArrayType[581754]
            {
              unknown _arrayType[581799] "expr temp" "maybe type" "temp"
              unknown _domain[581802] "expr temp" "no auto destroy" "temp"
              (581807 'move' _domain[581802](581804 call chpl__ensureDomainExpr iterExpr[581745]))
              {
                (581814 'move' _arrayType[581799](581811 call chpl__buildArrayRuntimeType _domain[581802] xST[82207]))
              }
              (582088 'move' ret[582083](582087 'deref' _arrayType[581799]))
              gotoReturn _end_chpl__forallexpr3[582081] _end_chpl__forallexpr3[582081]
            }
            {
              unknown _iterator[581820] "expr temp" "maybe ref" "temp"
              (581822 'move' _iterator[581820] iterExpr[581745])
              unknown call_tmp[582097] "expr temp" "maybe param" "maybe type" "temp"
              (582100 'move' call_tmp[582097](581825 call chpl__loopexpr_iter3 _iterator[581820]))
              (582093 'move' ret[582083](582092 'deref' call_tmp[582097]))
              gotoReturn _end_chpl__forallexpr3[582081] _end_chpl__forallexpr3[582081]
            }
            label _end_chpl__forallexpr3[582081]
            (582085 return ret[582083])
          }
          unknown call_tmp[582104] "expr temp" "maybe param" "maybe type" "temp"
          (582107 'move' call_tmp[582104](82218 call _dom _mt[243] x[82186]))
          unknown call_tmp[582109] "expr temp" "maybe param" "maybe type" "temp"
          (582112 'move' call_tmp[582109](581747 call chpl__forallexpr3 call_tmp[582104]))
          (582116 'iterator record set shape' call_tmp[582109] call_tmp[582104] 0)
          (512263 'move' ret[512248](512262 'deref' call_tmp[582109]))
          gotoReturn _end_chpl__sumType[512246] _end_chpl__sumType[512246]
          (476760 'end of statement' x[82186] xST[82207])
        }
      }
      {
        unknown call_tmp[628774] "expr temp" "maybe param" "maybe type" "temp"
        (628777 'move' call_tmp[628774](82242 call canResolve "+" x[82186] x[82186]))
        unknown call_tmp[628779] "expr temp" "maybe param" "maybe type" "temp"
        (628782 'move' call_tmp[628779](82243 call ! call_tmp[628774]))
        unknown call_tmp[628784] "expr temp" "maybe param" "maybe type" "temp"
        (628787 'move' call_tmp[628784](82270 call _cond_test call_tmp[628779]))
        if call_tmp[628784]
        {
          unknown call_tmp[628789] "expr temp" "maybe param" "maybe type" "temp"
          (628792 'move' call_tmp[628789](82266 call _cast string[26] eltType[82173]))
          (82268 call compilerError "+ reduce cannot be used on values of the type " call_tmp[628789])
        }
        { scopeless type
          unknown call_type_tmp[491973] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[628794] "expr temp" "maybe param" "maybe type" "temp"
          (628797 'move' call_tmp[628794](82277 call + x[82186] x[82186]))
          (491977 'move' call_type_tmp[491973](82279 'typeof' call_tmp[628794]))
        }
        (512268 'move' ret[512248](512267 'deref' call_type_tmp[491973]))
        gotoReturn _end_chpl__sumType[512246] _end_chpl__sumType[512246]
        (476764 'end of statement' x[82186] x[82186])
        (355103 'used modules list'(82234 'use' Reflection[224903]))
      }
    }
    label _end_chpl__sumType[512246]
    (512250 return ret[512248])
  }
  function ReduceScanOp[82300].super[771467](arg _mt[771469]:_MT[238], arg this[771471]:ReduceScanOp[82300]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771481] "RVV" "temp"
    unknown call_tmp[771488] "expr temp" "maybe param" "maybe type" "temp"
    (771491 'move' call_tmp[771488](771475 '.v' this[771471] c"super"))
    (771486 'move' ret[771481](771485 'deref' call_tmp[771488]))
    (771483 return ret[771481])
  }
  function ReduceScanOp[82300].l[771493](arg _mt[771495]:_MT[238], arg this[771497]:ReduceScanOp[82300]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771507] "RVV" "temp"
    unknown call_tmp[771514] "expr temp" "maybe param" "maybe type" "temp"
    (771517 'move' call_tmp[771514](771501 '.' this[771497] c"l"))
    (771512 'move' ret[771507](771511 'addr of' call_tmp[771514]))
    (771509 return ret[771507])
  }
  function ReduceScanOp[82300].init[771519](arg _mt[771521]:_MT[238], arg this[771522]:ReduceScanOp[82300], in arg l[771533]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250]) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[771548] "temporary of super field" "temp"
    (771550 'move' super_tmp[771548](771547 '.v' this[771522] c"super"))
    (771532 call(771530 call (partial) init _mt[243] super_tmp[771548]))
    (771574 'end of statement')
    unknown tmp[771553] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[771577] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[771589] "expr temp" "maybe param" "maybe type" "temp"
      (771592 'move' call_tmp[771589](771555 '.v' this[771522] c"super"))
      (771581 'move' call_type_tmp[771577](771558 'typeof' call_tmp[771589]))
    }
    (771559 'move' tmp[771553] call_type_tmp[771577])
    unknown call_tmp[771594] "maybe param" "maybe type" "temp"
    (771597 'move' call_tmp[771594](771564 'cast' tmp[771553] this[771522]))
    unknown chpl__thisAsParent[771561] "dead at end of block" "insert auto destroy" "temp"
    (771585 'init var' chpl__thisAsParent[771561] call_tmp[771594] tmp[771553])
    (771567 'setcid' chpl__thisAsParent[771561])
    (771569 'init field' this[771522] c"l" l[771533])
    (771575 'end of statement')
    (771572 'setcid' this[771522])
    (771583 return _void[55])
  }
  function ReduceScanOp[82300].deinit[771599](arg _mt[771601]:_MT[238], arg this[771603]:ReduceScanOp[82300]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (771611 return _void[55])
  }
  function ReduceScanOp[82300].writeThis[771613](arg _mt[771617]:_MT[238], arg this[771615]:ReduceScanOp[82300], arg f[771616]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771622 call writeThisDefaultImpl f[771616] this[771615])
    (771627 return _void[55])
  }
  function ReduceScanOp[82300].readThis[771629](arg _mt[771633]:_MT[238], arg this[771631]:ReduceScanOp[82300], arg f[771632]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771637 call readThisDefaultImpl f[771632] this[771631])
    (771643 return _void[55])
  }
  type ReduceScanOp[82300] val super[355649]:object[22] "super class" val l[82295]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432]
  function SumReduceScanOp[82412](?).identity[82319](arg _mt[82416]:_MT[238], arg this[82414]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[512274] "RVV" "temp"
    unknown x[82325] "dead at end of block" "insert auto destroy"
    unknown call_tmp[628801] "expr temp" "maybe param" "maybe type" "temp"
    (628804 'move' call_tmp[628801](376392 call eltType _mt[243] this[82414]))
    unknown call_tmp[628806] "expr temp" "maybe param" "maybe type" "temp"
    (628809 'move' call_tmp[628806](82324 call chpl__sumType call_tmp[628801]))
    (541558 'default init var' x[82325] call_tmp[628806])
    (82328 'end of statement')
    (512279 'move' ret[512274](512278 'deref' x[82325]))
    gotoReturn _end_identity[512272] _end_identity[512272]
    (476767 'end of statement' x[82325])
    label _end_identity[512272]
    (512276 return ret[512274])
  }
  function SumReduceScanOp[82412](?).accumulate[82339](arg _mt[82420]:_MT[238], arg this[82418]:SumReduceScanOp[82412](?), arg x[82337]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628813] "expr temp" "maybe param" "maybe type" "temp"
    (628816 'move' call_tmp[628813](376398 call value _mt[243] this[82418]))
    (82343 call += call_tmp[628813] x[82337])
    (512283 return _void[55])
  }
  function SumReduceScanOp[82412](?).accumulateOntoState[82353](arg _mt[82424]:_MT[238], arg this[82422]:SumReduceScanOp[82412](?), ref arg state[82351]:_any[178](?), arg x[82355]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82359 call += state[82351] x[82355])
    (512285 return _void[55])
  }
  function SumReduceScanOp[82412](?).combine[82369](arg _mt[82428]:_MT[238], arg this[82426]:SumReduceScanOp[82412](?), arg x[82367]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628820] "expr temp" "maybe param" "maybe type" "temp"
    (628823 'move' call_tmp[628820](376406 call value _mt[243] this[82426]))
    unknown call_tmp[628827] "expr temp" "maybe param" "maybe type" "temp"
    (628830 'move' call_tmp[628827](82375 call value _mt[243] x[82367]))
    (82378 call += call_tmp[628820] call_tmp[628827])
    (512287 return _void[55])
  }
  function SumReduceScanOp[82412](?).generate[82386](arg _mt[82432]:_MT[238], arg this[82430]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512291] "RVV" "temp"
    unknown call_tmp[628834] "expr temp" "maybe param" "maybe type" "temp"
    (628837 'move' call_tmp[628834](376411 call value _mt[243] this[82430]))
    (512296 'move' ret[512291](512295 'deref' call_tmp[628834]))
    (512293 return ret[512291])
  }
  function SumReduceScanOp[82412](?).clone[82396](arg _mt[82436]:_MT[238], arg this[82434]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512300] "RVV" "temp"
    unknown call_tmp[628841] "expr temp" "maybe param" "maybe type" "temp"
    (628844 'move' call_tmp[628841](376420 call eltType _mt[243] this[82434]))
    unknown call_tmp[628846] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628849 'move' call_tmp[628846](747854 'new' SumReduceScanOp[376415](?)(eltType = call_tmp[628841])(_chpl_manager = unmanaged[220](?))))
    (512305 'move' ret[512300](512304 'deref' call_tmp[628846]))
    (512302 return ret[512300])
  }
  function SumReduceScanOp[82412](?).super[771645](arg _mt[771647]:_MT[238], arg this[771649]:SumReduceScanOp[82412](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771659] "RVV" "temp"
    unknown call_tmp[771666] "expr temp" "maybe param" "maybe type" "temp"
    (771669 'move' call_tmp[771666](771653 '.v' this[771649] c"super"))
    (771664 'move' ret[771659](771663 'deref' call_tmp[771666]))
    (771661 return ret[771659])
  }
  function SumReduceScanOp[771676](?).eltType[771671](arg _mt[771673]:_MT[238], arg this[771678]:SumReduceScanOp[771676](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771713] "RVV" "temp" "type variable"
    unknown borrowOfThis[771680]
    (771705 'end of statement')
    (771682 'move' borrowOfThis[771680](771685 call _cast _borrowedNonNilable[214](?) this[771678]))
    (771706 'end of statement' borrowOfThis[771680])
    unknown call_tmp[771727] "expr temp" "maybe param" "maybe type" "temp"
    (771730 'move' call_tmp[771727](771695 'is bound' borrowOfThis[771680] c"eltType"))
    if call_tmp[771727]
    {
      unknown call_tmp[771732] "expr temp" "maybe param" "maybe type" "temp"
      (771735 'move' call_tmp[771732](771690 '.v' borrowOfThis[771680] c"eltType"))
      unknown call_tmp[771737] "expr temp" "maybe param" "maybe type" "temp"
      (771740 'move' call_tmp[771737](771691 call chpl_checkLegalTypeFieldAccessor this[771678] call_tmp[771732] "eltType"))
      (771718 'move' ret[771713](771717 'deref' call_tmp[771737]))
      gotoReturn _end_eltType[771711] _end_eltType[771711]
      (771708 'end of statement' borrowOfThis[771680])
    }
    {
      (771723 'move' ret[771713](771722 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[771711] _end_eltType[771711]
    }
    label _end_eltType[771711]
    (771715 return ret[771713])
  }
  function SumReduceScanOp[771676](?).eltType[771742](arg _mt[771744]:_MT[238], arg this[771746]:SumReduceScanOp[771676](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771781] "RVV" "temp" "type variable"
    unknown borrowOfThis[771748] "type variable"
    (771773 'end of statement')
    (771750 'move' borrowOfThis[771748](771753 call _cast _borrowedNonNilable[214](?) this[771746]))
    (771774 'end of statement' borrowOfThis[771748])
    unknown call_tmp[771795] "expr temp" "maybe param" "maybe type" "temp"
    (771798 'move' call_tmp[771795](771763 'is bound' borrowOfThis[771748] c"eltType"))
    if call_tmp[771795]
    {
      unknown call_tmp[771800] "expr temp" "maybe param" "maybe type" "temp"
      (771803 'move' call_tmp[771800](771758 '.v' borrowOfThis[771748] c"eltType"))
      unknown call_tmp[771805] "expr temp" "maybe param" "maybe type" "temp"
      (771808 'move' call_tmp[771805](771759 call chpl_checkLegalTypeFieldAccessor this[771746] call_tmp[771800] "eltType"))
      (771786 'move' ret[771781](771785 'deref' call_tmp[771805]))
      gotoReturn _end_eltType[771779] _end_eltType[771779]
      (771776 'end of statement' borrowOfThis[771748])
    }
    {
      (771791 'move' ret[771781](771790 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[771779] _end_eltType[771779]
    }
    label _end_eltType[771779]
    (771783 return ret[771781])
  }
  function SumReduceScanOp[82412](?).value[771810](arg _mt[771812]:_MT[238], arg this[771814]:SumReduceScanOp[82412](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771824] "RVV" "temp"
    unknown call_tmp[771831] "expr temp" "maybe param" "maybe type" "temp"
    (771834 'move' call_tmp[771831](771818 '.' this[771814] c"value"))
    (771829 'move' ret[771824](771828 'addr of' call_tmp[771831]))
    (771826 return ret[771824])
  }
  function SumReduceScanOp[82412](?).init[771836](arg _mt[771838]:_MT[238], arg this[771839]:SumReduceScanOp[82412](?), in arg l[771852]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[771855]:_any[178](?), in arg value[771864] :
  (771867 call chpl__sumType eltType[771855]) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[771881] "temporary of super field" "temp"
    (771883 'move' super_tmp[771881](771880 '.v' this[771839] c"super"))
    (771849 call(771847 call (partial) init _mt[243] super_tmp[771881]) l[771852])
    (771910 'end of statement')
    unknown tmp[771886] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[771914] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[771926] "expr temp" "maybe param" "maybe type" "temp"
      (771929 'move' call_tmp[771926](771888 '.v' this[771839] c"super"))
      (771918 'move' call_type_tmp[771914](771891 'typeof' call_tmp[771926]))
    }
    (771892 'move' tmp[771886] call_type_tmp[771914])
    unknown call_tmp[771931] "maybe param" "maybe type" "temp"
    (771934 'move' call_tmp[771931](771897 'cast' tmp[771886] this[771839]))
    unknown chpl__thisAsParent[771894] "dead at end of block" "insert auto destroy" "temp"
    (771922 'init var' chpl__thisAsParent[771894] call_tmp[771931] tmp[771886])
    (771900 'setcid' chpl__thisAsParent[771894])
    (771902 'init field' this[771839] c"eltType" eltType[771855])
    (771911 'end of statement')
    (771905 'init field' this[771839] c"value" value[771864])
    (771912 'end of statement')
    (771908 'setcid' this[771839])
    (771920 return _void[55])
  }
  function SumReduceScanOp[82412](?).deinit[771936](arg _mt[771938]:_MT[238], arg this[771940]:SumReduceScanOp[82412](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (771948 return _void[55])
  }
  function SumReduceScanOp[82412](?).writeThis[771950](arg _mt[771954]:_MT[238], arg this[771952]:SumReduceScanOp[82412](?), arg f[771953]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771959 call writeThisDefaultImpl f[771953] this[771952])
    (771964 return _void[55])
  }
  function SumReduceScanOp[82412](?).readThis[771966](arg _mt[771970]:_MT[238], arg this[771968]:SumReduceScanOp[82412](?), arg f[771969]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771974 call readThisDefaultImpl f[771969] this[771968])
    (771980 return _void[55])
  }
  type SumReduceScanOp[82412](?) val super[355651]:ReduceScanOp[82300] "super class" unknown eltType[82306] "type variable" unknown value[82313](82312 call chpl__sumType eltType[82306])
  type SumReduceScanOp[771676](?)
  type SumReduceScanOp[376415](?)
  function ProductReduceScanOp[82541](?).identity[82455](arg _mt[82545]:_MT[238], arg this[82543]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512309] "RVV" "temp"
    unknown call_tmp[628853] "expr temp" "maybe param" "maybe type" "temp"
    (628856 'move' call_tmp[628853](376426 call eltType _mt[243] this[82543]))
    unknown call_tmp[628858] "expr temp" "maybe param" "maybe type" "temp"
    (628861 'move' call_tmp[628858](82460 call _prod_id call_tmp[628853]))
    (512314 'move' ret[512309](512313 'deref' call_tmp[628858]))
    (512311 return ret[512309])
  }
  function ProductReduceScanOp[82541](?).accumulate[82470](arg _mt[82549]:_MT[238], arg this[82547]:ProductReduceScanOp[82541](?), arg x[82468]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628865] "expr temp" "maybe param" "maybe type" "temp"
    (628868 'move' call_tmp[628865](376431 call value _mt[243] this[82547]))
    (82474 call *= call_tmp[628865] x[82468])
    (512316 return _void[55])
  }
  function ProductReduceScanOp[82541](?).accumulateOntoState[82484](arg _mt[82553]:_MT[238], arg this[82551]:ProductReduceScanOp[82541](?), ref arg state[82482]:_any[178](?), arg x[82486]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82490 call *= state[82482] x[82486])
    (512318 return _void[55])
  }
  function ProductReduceScanOp[82541](?).combine[82500](arg _mt[82557]:_MT[238], arg this[82555]:ProductReduceScanOp[82541](?), arg x[82498]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628872] "expr temp" "maybe param" "maybe type" "temp"
    (628875 'move' call_tmp[628872](376439 call value _mt[243] this[82555]))
    unknown call_tmp[628879] "expr temp" "maybe param" "maybe type" "temp"
    (628882 'move' call_tmp[628879](82504 call value _mt[243] x[82498]))
    (82507 call *= call_tmp[628872] call_tmp[628879])
    (512320 return _void[55])
  }
  function ProductReduceScanOp[82541](?).generate[82515](arg _mt[82561]:_MT[238], arg this[82559]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512324] "RVV" "temp"
    unknown call_tmp[628886] "expr temp" "maybe param" "maybe type" "temp"
    (628889 'move' call_tmp[628886](376444 call value _mt[243] this[82559]))
    (512329 'move' ret[512324](512328 'deref' call_tmp[628886]))
    (512326 return ret[512324])
  }
  function ProductReduceScanOp[82541](?).clone[82525](arg _mt[82565]:_MT[238], arg this[82563]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512333] "RVV" "temp"
    unknown call_tmp[628893] "expr temp" "maybe param" "maybe type" "temp"
    (628896 'move' call_tmp[628893](376453 call eltType _mt[243] this[82563]))
    unknown call_tmp[628898] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628901 'move' call_tmp[628898](747855 'new' ProductReduceScanOp[376448](?)(eltType = call_tmp[628893])(_chpl_manager = unmanaged[220](?))))
    (512338 'move' ret[512333](512337 'deref' call_tmp[628898]))
    (512335 return ret[512333])
  }
  function ProductReduceScanOp[82541](?).super[771982](arg _mt[771984]:_MT[238], arg this[771986]:ProductReduceScanOp[82541](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771996] "RVV" "temp"
    unknown call_tmp[772003] "expr temp" "maybe param" "maybe type" "temp"
    (772006 'move' call_tmp[772003](771990 '.v' this[771986] c"super"))
    (772001 'move' ret[771996](772000 'deref' call_tmp[772003]))
    (771998 return ret[771996])
  }
  function ProductReduceScanOp[772013](?).eltType[772008](arg _mt[772010]:_MT[238], arg this[772015]:ProductReduceScanOp[772013](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772050] "RVV" "temp" "type variable"
    unknown borrowOfThis[772017]
    (772042 'end of statement')
    (772019 'move' borrowOfThis[772017](772022 call _cast _borrowedNonNilable[214](?) this[772015]))
    (772043 'end of statement' borrowOfThis[772017])
    unknown call_tmp[772064] "expr temp" "maybe param" "maybe type" "temp"
    (772067 'move' call_tmp[772064](772032 'is bound' borrowOfThis[772017] c"eltType"))
    if call_tmp[772064]
    {
      unknown call_tmp[772069] "expr temp" "maybe param" "maybe type" "temp"
      (772072 'move' call_tmp[772069](772027 '.v' borrowOfThis[772017] c"eltType"))
      unknown call_tmp[772074] "expr temp" "maybe param" "maybe type" "temp"
      (772077 'move' call_tmp[772074](772028 call chpl_checkLegalTypeFieldAccessor this[772015] call_tmp[772069] "eltType"))
      (772055 'move' ret[772050](772054 'deref' call_tmp[772074]))
      gotoReturn _end_eltType[772048] _end_eltType[772048]
      (772045 'end of statement' borrowOfThis[772017])
    }
    {
      (772060 'move' ret[772050](772059 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772048] _end_eltType[772048]
    }
    label _end_eltType[772048]
    (772052 return ret[772050])
  }
  function ProductReduceScanOp[772013](?).eltType[772079](arg _mt[772081]:_MT[238], arg this[772083]:ProductReduceScanOp[772013](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772118] "RVV" "temp" "type variable"
    unknown borrowOfThis[772085] "type variable"
    (772110 'end of statement')
    (772087 'move' borrowOfThis[772085](772090 call _cast _borrowedNonNilable[214](?) this[772083]))
    (772111 'end of statement' borrowOfThis[772085])
    unknown call_tmp[772132] "expr temp" "maybe param" "maybe type" "temp"
    (772135 'move' call_tmp[772132](772100 'is bound' borrowOfThis[772085] c"eltType"))
    if call_tmp[772132]
    {
      unknown call_tmp[772137] "expr temp" "maybe param" "maybe type" "temp"
      (772140 'move' call_tmp[772137](772095 '.v' borrowOfThis[772085] c"eltType"))
      unknown call_tmp[772142] "expr temp" "maybe param" "maybe type" "temp"
      (772145 'move' call_tmp[772142](772096 call chpl_checkLegalTypeFieldAccessor this[772083] call_tmp[772137] "eltType"))
      (772123 'move' ret[772118](772122 'deref' call_tmp[772142]))
      gotoReturn _end_eltType[772116] _end_eltType[772116]
      (772113 'end of statement' borrowOfThis[772085])
    }
    {
      (772128 'move' ret[772118](772127 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772116] _end_eltType[772116]
    }
    label _end_eltType[772116]
    (772120 return ret[772118])
  }
  function ProductReduceScanOp[82541](?).value[772147](arg _mt[772149]:_MT[238], arg this[772151]:ProductReduceScanOp[82541](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772161] "RVV" "temp"
    unknown call_tmp[772168] "expr temp" "maybe param" "maybe type" "temp"
    (772171 'move' call_tmp[772168](772155 '.' this[772151] c"value"))
    (772166 'move' ret[772161](772165 'addr of' call_tmp[772168]))
    (772163 return ret[772161])
  }
  function ProductReduceScanOp[82541](?).init[772173](arg _mt[772175]:_MT[238], arg this[772176]:ProductReduceScanOp[82541](?), in arg l[772189]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[772192]:_any[178](?), in arg value[772201] :
  (772208 call _prod_id eltType[772192]) =
  (772203 call _prod_id eltType[772192])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[772220] "temporary of super field" "temp"
    (772222 'move' super_tmp[772220](772219 '.v' this[772176] c"super"))
    (772186 call(772184 call (partial) init _mt[243] super_tmp[772220]) l[772189])
    (772249 'end of statement')
    unknown tmp[772225] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[772253] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[772265] "expr temp" "maybe param" "maybe type" "temp"
      (772268 'move' call_tmp[772265](772227 '.v' this[772176] c"super"))
      (772257 'move' call_type_tmp[772253](772230 'typeof' call_tmp[772265]))
    }
    (772231 'move' tmp[772225] call_type_tmp[772253])
    unknown call_tmp[772270] "maybe param" "maybe type" "temp"
    (772273 'move' call_tmp[772270](772236 'cast' tmp[772225] this[772176]))
    unknown chpl__thisAsParent[772233] "dead at end of block" "insert auto destroy" "temp"
    (772261 'init var' chpl__thisAsParent[772233] call_tmp[772270] tmp[772225])
    (772239 'setcid' chpl__thisAsParent[772233])
    (772241 'init field' this[772176] c"eltType" eltType[772192])
    (772250 'end of statement')
    (772244 '.=' this[772176] c"value" value[772201])
    (772251 'end of statement')
    (772247 'setcid' this[772176])
    (772259 return _void[55])
  }
  function ProductReduceScanOp[82541](?).deinit[772275](arg _mt[772277]:_MT[238], arg this[772279]:ProductReduceScanOp[82541](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (772287 return _void[55])
  }
  function ProductReduceScanOp[82541](?).writeThis[772289](arg _mt[772293]:_MT[238], arg this[772291]:ProductReduceScanOp[82541](?), arg f[772292]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772298 call writeThisDefaultImpl f[772292] this[772291])
    (772303 return _void[55])
  }
  function ProductReduceScanOp[82541](?).readThis[772305](arg _mt[772309]:_MT[238], arg this[772307]:ProductReduceScanOp[82541](?), arg f[772308]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772313 call readThisDefaultImpl f[772308] this[772307])
    (772319 return _void[55])
  }
  type ProductReduceScanOp[82541](?) val super[355653]:ReduceScanOp[82300] "super class" unknown eltType[82442] "type variable" unknown value[82449](82448 call _prod_id eltType[82442])
  type ProductReduceScanOp[772013](?)
  type ProductReduceScanOp[376448](?)
  function MaxReduceScanOp[82682](?).identity[82584](arg _mt[82686]:_MT[238], arg this[82684]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512342] "RVV" "temp"
    unknown call_tmp[628905] "expr temp" "maybe param" "maybe type" "temp"
    (628908 'move' call_tmp[628905](376459 call eltType _mt[243] this[82684]))
    unknown call_tmp[628910] "expr temp" "maybe param" "maybe type" "temp"
    (628913 'move' call_tmp[628910](82589 call min call_tmp[628905]))
    (512347 'move' ret[512342](512346 'deref' call_tmp[628910]))
    (512344 return ret[512342])
  }
  function MaxReduceScanOp[82682](?).accumulate[82599](arg _mt[82690]:_MT[238], arg this[82688]:MaxReduceScanOp[82682](?), arg x[82597]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628917] "expr temp" "maybe param" "maybe type" "temp"
    (628920 'move' call_tmp[628917](376464 call value _mt[243] this[82688]))
    unknown call_tmp[628924] "expr temp" "maybe param" "maybe type" "temp"
    (628927 'move' call_tmp[628924](376470 call value _mt[243] this[82688]))
    unknown call_tmp[628929] "expr temp" "maybe param" "maybe type" "temp"
    (628932 'move' call_tmp[628929](82606 call max x[82597] call_tmp[628924]))
    (82607 call = call_tmp[628917] call_tmp[628929])
    (512349 return _void[55])
  }
  function MaxReduceScanOp[82682](?).accumulateOntoState[82617](arg _mt[82694]:_MT[238], arg this[82692]:MaxReduceScanOp[82682](?), ref arg state[82615]:_any[178](?), arg x[82619]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628934] "expr temp" "maybe param" "maybe type" "temp"
    (628937 'move' call_tmp[628934](82626 call max state[82615] x[82619]))
    (82627 call = state[82615] call_tmp[628934])
    (512351 return _void[55])
  }
  function MaxReduceScanOp[82682](?).combine[82637](arg _mt[82698]:_MT[238], arg this[82696]:MaxReduceScanOp[82682](?), arg x[82635]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628941] "expr temp" "maybe param" "maybe type" "temp"
    (628944 'move' call_tmp[628941](376478 call value _mt[243] this[82696]))
    unknown call_tmp[628948] "expr temp" "maybe param" "maybe type" "temp"
    (628951 'move' call_tmp[628948](376483 call value _mt[243] this[82696]))
    unknown call_tmp[628955] "expr temp" "maybe param" "maybe type" "temp"
    (628958 'move' call_tmp[628955](82644 call value _mt[243] x[82635]))
    unknown call_tmp[628960] "expr temp" "maybe param" "maybe type" "temp"
    (628963 'move' call_tmp[628960](82647 call max call_tmp[628948] call_tmp[628955]))
    (82648 call = call_tmp[628941] call_tmp[628960])
    (512353 return _void[55])
  }
  function MaxReduceScanOp[82682](?).generate[82656](arg _mt[82702]:_MT[238], arg this[82700]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512357] "RVV" "temp"
    unknown call_tmp[628967] "expr temp" "maybe param" "maybe type" "temp"
    (628970 'move' call_tmp[628967](376488 call value _mt[243] this[82700]))
    (512362 'move' ret[512357](512361 'deref' call_tmp[628967]))
    (512359 return ret[512357])
  }
  function MaxReduceScanOp[82682](?).clone[82666](arg _mt[82706]:_MT[238], arg this[82704]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512366] "RVV" "temp"
    unknown call_tmp[628974] "expr temp" "maybe param" "maybe type" "temp"
    (628977 'move' call_tmp[628974](376497 call eltType _mt[243] this[82704]))
    unknown call_tmp[628979] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628982 'move' call_tmp[628979](747856 'new' MaxReduceScanOp[376492](?)(eltType = call_tmp[628974])(_chpl_manager = unmanaged[220](?))))
    (512371 'move' ret[512366](512370 'deref' call_tmp[628979]))
    (512368 return ret[512366])
  }
  function MaxReduceScanOp[82682](?).super[772321](arg _mt[772323]:_MT[238], arg this[772325]:MaxReduceScanOp[82682](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772335] "RVV" "temp"
    unknown call_tmp[772342] "expr temp" "maybe param" "maybe type" "temp"
    (772345 'move' call_tmp[772342](772329 '.v' this[772325] c"super"))
    (772340 'move' ret[772335](772339 'deref' call_tmp[772342]))
    (772337 return ret[772335])
  }
  function MaxReduceScanOp[772352](?).eltType[772347](arg _mt[772349]:_MT[238], arg this[772354]:MaxReduceScanOp[772352](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772389] "RVV" "temp" "type variable"
    unknown borrowOfThis[772356]
    (772381 'end of statement')
    (772358 'move' borrowOfThis[772356](772361 call _cast _borrowedNonNilable[214](?) this[772354]))
    (772382 'end of statement' borrowOfThis[772356])
    unknown call_tmp[772403] "expr temp" "maybe param" "maybe type" "temp"
    (772406 'move' call_tmp[772403](772371 'is bound' borrowOfThis[772356] c"eltType"))
    if call_tmp[772403]
    {
      unknown call_tmp[772408] "expr temp" "maybe param" "maybe type" "temp"
      (772411 'move' call_tmp[772408](772366 '.v' borrowOfThis[772356] c"eltType"))
      unknown call_tmp[772413] "expr temp" "maybe param" "maybe type" "temp"
      (772416 'move' call_tmp[772413](772367 call chpl_checkLegalTypeFieldAccessor this[772354] call_tmp[772408] "eltType"))
      (772394 'move' ret[772389](772393 'deref' call_tmp[772413]))
      gotoReturn _end_eltType[772387] _end_eltType[772387]
      (772384 'end of statement' borrowOfThis[772356])
    }
    {
      (772399 'move' ret[772389](772398 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772387] _end_eltType[772387]
    }
    label _end_eltType[772387]
    (772391 return ret[772389])
  }
  function MaxReduceScanOp[772352](?).eltType[772418](arg _mt[772420]:_MT[238], arg this[772422]:MaxReduceScanOp[772352](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772457] "RVV" "temp" "type variable"
    unknown borrowOfThis[772424] "type variable"
    (772449 'end of statement')
    (772426 'move' borrowOfThis[772424](772429 call _cast _borrowedNonNilable[214](?) this[772422]))
    (772450 'end of statement' borrowOfThis[772424])
    unknown call_tmp[772471] "expr temp" "maybe param" "maybe type" "temp"
    (772474 'move' call_tmp[772471](772439 'is bound' borrowOfThis[772424] c"eltType"))
    if call_tmp[772471]
    {
      unknown call_tmp[772476] "expr temp" "maybe param" "maybe type" "temp"
      (772479 'move' call_tmp[772476](772434 '.v' borrowOfThis[772424] c"eltType"))
      unknown call_tmp[772481] "expr temp" "maybe param" "maybe type" "temp"
      (772484 'move' call_tmp[772481](772435 call chpl_checkLegalTypeFieldAccessor this[772422] call_tmp[772476] "eltType"))
      (772462 'move' ret[772457](772461 'deref' call_tmp[772481]))
      gotoReturn _end_eltType[772455] _end_eltType[772455]
      (772452 'end of statement' borrowOfThis[772424])
    }
    {
      (772467 'move' ret[772457](772466 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772455] _end_eltType[772455]
    }
    label _end_eltType[772455]
    (772459 return ret[772457])
  }
  function MaxReduceScanOp[82682](?).value[772486](arg _mt[772488]:_MT[238], arg this[772490]:MaxReduceScanOp[82682](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772500] "RVV" "temp"
    unknown call_tmp[772507] "expr temp" "maybe param" "maybe type" "temp"
    (772510 'move' call_tmp[772507](772494 '.' this[772490] c"value"))
    (772505 'move' ret[772500](772504 'addr of' call_tmp[772507]))
    (772502 return ret[772500])
  }
  function MaxReduceScanOp[82682](?).init[772512](arg _mt[772514]:_MT[238], arg this[772515]:MaxReduceScanOp[82682](?), in arg l[772528]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[772531]:_any[178](?), in arg value[772540] :
  (772547 call min eltType[772531]) =
  (772542 call min eltType[772531])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[772559] "temporary of super field" "temp"
    (772561 'move' super_tmp[772559](772558 '.v' this[772515] c"super"))
    (772525 call(772523 call (partial) init _mt[243] super_tmp[772559]) l[772528])
    (772588 'end of statement')
    unknown tmp[772564] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[772592] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[772604] "expr temp" "maybe param" "maybe type" "temp"
      (772607 'move' call_tmp[772604](772566 '.v' this[772515] c"super"))
      (772596 'move' call_type_tmp[772592](772569 'typeof' call_tmp[772604]))
    }
    (772570 'move' tmp[772564] call_type_tmp[772592])
    unknown call_tmp[772609] "maybe param" "maybe type" "temp"
    (772612 'move' call_tmp[772609](772575 'cast' tmp[772564] this[772515]))
    unknown chpl__thisAsParent[772572] "dead at end of block" "insert auto destroy" "temp"
    (772600 'init var' chpl__thisAsParent[772572] call_tmp[772609] tmp[772564])
    (772578 'setcid' chpl__thisAsParent[772572])
    (772580 'init field' this[772515] c"eltType" eltType[772531])
    (772589 'end of statement')
    (772583 '.=' this[772515] c"value" value[772540])
    (772590 'end of statement')
    (772586 'setcid' this[772515])
    (772598 return _void[55])
  }
  function MaxReduceScanOp[82682](?).deinit[772614](arg _mt[772616]:_MT[238], arg this[772618]:MaxReduceScanOp[82682](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (772626 return _void[55])
  }
  function MaxReduceScanOp[82682](?).writeThis[772628](arg _mt[772632]:_MT[238], arg this[772630]:MaxReduceScanOp[82682](?), arg f[772631]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772637 call writeThisDefaultImpl f[772631] this[772630])
    (772642 return _void[55])
  }
  function MaxReduceScanOp[82682](?).readThis[772644](arg _mt[772648]:_MT[238], arg this[772646]:MaxReduceScanOp[82682](?), arg f[772647]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772652 call readThisDefaultImpl f[772647] this[772646])
    (772658 return _void[55])
  }
  type MaxReduceScanOp[82682](?) val super[355655]:ReduceScanOp[82300] "super class" unknown eltType[82571] "type variable" unknown value[82578](82577 call min eltType[82571])
  type MaxReduceScanOp[772352](?)
  type MaxReduceScanOp[376492](?)
  function MinReduceScanOp[82823](?).identity[82725](arg _mt[82827]:_MT[238], arg this[82825]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512375] "RVV" "temp"
    unknown call_tmp[628986] "expr temp" "maybe param" "maybe type" "temp"
    (628989 'move' call_tmp[628986](376503 call eltType _mt[243] this[82825]))
    unknown call_tmp[628991] "expr temp" "maybe param" "maybe type" "temp"
    (628994 'move' call_tmp[628991](82730 call max call_tmp[628986]))
    (512380 'move' ret[512375](512379 'deref' call_tmp[628991]))
    (512377 return ret[512375])
  }
  function MinReduceScanOp[82823](?).accumulate[82740](arg _mt[82831]:_MT[238], arg this[82829]:MinReduceScanOp[82823](?), arg x[82738]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628998] "expr temp" "maybe param" "maybe type" "temp"
    (629001 'move' call_tmp[628998](376508 call value _mt[243] this[82829]))
    unknown call_tmp[629005] "expr temp" "maybe param" "maybe type" "temp"
    (629008 'move' call_tmp[629005](376514 call value _mt[243] this[82829]))
    unknown call_tmp[629010] "expr temp" "maybe param" "maybe type" "temp"
    (629013 'move' call_tmp[629010](82747 call min x[82738] call_tmp[629005]))
    (82748 call = call_tmp[628998] call_tmp[629010])
    (512382 return _void[55])
  }
  function MinReduceScanOp[82823](?).accumulateOntoState[82758](arg _mt[82835]:_MT[238], arg this[82833]:MinReduceScanOp[82823](?), ref arg state[82756]:_any[178](?), arg x[82760]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629015] "expr temp" "maybe param" "maybe type" "temp"
    (629018 'move' call_tmp[629015](82767 call min state[82756] x[82760]))
    (82768 call = state[82756] call_tmp[629015])
    (512384 return _void[55])
  }
  function MinReduceScanOp[82823](?).combine[82778](arg _mt[82839]:_MT[238], arg this[82837]:MinReduceScanOp[82823](?), arg x[82776]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629022] "expr temp" "maybe param" "maybe type" "temp"
    (629025 'move' call_tmp[629022](376522 call value _mt[243] this[82837]))
    unknown call_tmp[629029] "expr temp" "maybe param" "maybe type" "temp"
    (629032 'move' call_tmp[629029](376527 call value _mt[243] this[82837]))
    unknown call_tmp[629036] "expr temp" "maybe param" "maybe type" "temp"
    (629039 'move' call_tmp[629036](82785 call value _mt[243] x[82776]))
    unknown call_tmp[629041] "expr temp" "maybe param" "maybe type" "temp"
    (629044 'move' call_tmp[629041](82788 call min call_tmp[629029] call_tmp[629036]))
    (82789 call = call_tmp[629022] call_tmp[629041])
    (512386 return _void[55])
  }
  function MinReduceScanOp[82823](?).generate[82797](arg _mt[82843]:_MT[238], arg this[82841]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512390] "RVV" "temp"
    unknown call_tmp[629048] "expr temp" "maybe param" "maybe type" "temp"
    (629051 'move' call_tmp[629048](376532 call value _mt[243] this[82841]))
    (512395 'move' ret[512390](512394 'deref' call_tmp[629048]))
    (512392 return ret[512390])
  }
  function MinReduceScanOp[82823](?).clone[82807](arg _mt[82847]:_MT[238], arg this[82845]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512399] "RVV" "temp"
    unknown call_tmp[629055] "expr temp" "maybe param" "maybe type" "temp"
    (629058 'move' call_tmp[629055](376541 call eltType _mt[243] this[82845]))
    unknown call_tmp[629060] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629063 'move' call_tmp[629060](747857 'new' MinReduceScanOp[376536](?)(eltType = call_tmp[629055])(_chpl_manager = unmanaged[220](?))))
    (512404 'move' ret[512399](512403 'deref' call_tmp[629060]))
    (512401 return ret[512399])
  }
  function MinReduceScanOp[82823](?).super[772660](arg _mt[772662]:_MT[238], arg this[772664]:MinReduceScanOp[82823](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772674] "RVV" "temp"
    unknown call_tmp[772681] "expr temp" "maybe param" "maybe type" "temp"
    (772684 'move' call_tmp[772681](772668 '.v' this[772664] c"super"))
    (772679 'move' ret[772674](772678 'deref' call_tmp[772681]))
    (772676 return ret[772674])
  }
  function MinReduceScanOp[772691](?).eltType[772686](arg _mt[772688]:_MT[238], arg this[772693]:MinReduceScanOp[772691](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772728] "RVV" "temp" "type variable"
    unknown borrowOfThis[772695]
    (772720 'end of statement')
    (772697 'move' borrowOfThis[772695](772700 call _cast _borrowedNonNilable[214](?) this[772693]))
    (772721 'end of statement' borrowOfThis[772695])
    unknown call_tmp[772742] "expr temp" "maybe param" "maybe type" "temp"
    (772745 'move' call_tmp[772742](772710 'is bound' borrowOfThis[772695] c"eltType"))
    if call_tmp[772742]
    {
      unknown call_tmp[772747] "expr temp" "maybe param" "maybe type" "temp"
      (772750 'move' call_tmp[772747](772705 '.v' borrowOfThis[772695] c"eltType"))
      unknown call_tmp[772752] "expr temp" "maybe param" "maybe type" "temp"
      (772755 'move' call_tmp[772752](772706 call chpl_checkLegalTypeFieldAccessor this[772693] call_tmp[772747] "eltType"))
      (772733 'move' ret[772728](772732 'deref' call_tmp[772752]))
      gotoReturn _end_eltType[772726] _end_eltType[772726]
      (772723 'end of statement' borrowOfThis[772695])
    }
    {
      (772738 'move' ret[772728](772737 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772726] _end_eltType[772726]
    }
    label _end_eltType[772726]
    (772730 return ret[772728])
  }
  function MinReduceScanOp[772691](?).eltType[772757](arg _mt[772759]:_MT[238], arg this[772761]:MinReduceScanOp[772691](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772796] "RVV" "temp" "type variable"
    unknown borrowOfThis[772763] "type variable"
    (772788 'end of statement')
    (772765 'move' borrowOfThis[772763](772768 call _cast _borrowedNonNilable[214](?) this[772761]))
    (772789 'end of statement' borrowOfThis[772763])
    unknown call_tmp[772810] "expr temp" "maybe param" "maybe type" "temp"
    (772813 'move' call_tmp[772810](772778 'is bound' borrowOfThis[772763] c"eltType"))
    if call_tmp[772810]
    {
      unknown call_tmp[772815] "expr temp" "maybe param" "maybe type" "temp"
      (772818 'move' call_tmp[772815](772773 '.v' borrowOfThis[772763] c"eltType"))
      unknown call_tmp[772820] "expr temp" "maybe param" "maybe type" "temp"
      (772823 'move' call_tmp[772820](772774 call chpl_checkLegalTypeFieldAccessor this[772761] call_tmp[772815] "eltType"))
      (772801 'move' ret[772796](772800 'deref' call_tmp[772820]))
      gotoReturn _end_eltType[772794] _end_eltType[772794]
      (772791 'end of statement' borrowOfThis[772763])
    }
    {
      (772806 'move' ret[772796](772805 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772794] _end_eltType[772794]
    }
    label _end_eltType[772794]
    (772798 return ret[772796])
  }
  function MinReduceScanOp[82823](?).value[772825](arg _mt[772827]:_MT[238], arg this[772829]:MinReduceScanOp[82823](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772839] "RVV" "temp"
    unknown call_tmp[772846] "expr temp" "maybe param" "maybe type" "temp"
    (772849 'move' call_tmp[772846](772833 '.' this[772829] c"value"))
    (772844 'move' ret[772839](772843 'addr of' call_tmp[772846]))
    (772841 return ret[772839])
  }
  function MinReduceScanOp[82823](?).init[772851](arg _mt[772853]:_MT[238], arg this[772854]:MinReduceScanOp[82823](?), in arg l[772867]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[772870]:_any[178](?), in arg value[772879] :
  (772886 call max eltType[772870]) =
  (772881 call max eltType[772870])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[772898] "temporary of super field" "temp"
    (772900 'move' super_tmp[772898](772897 '.v' this[772854] c"super"))
    (772864 call(772862 call (partial) init _mt[243] super_tmp[772898]) l[772867])
    (772927 'end of statement')
    unknown tmp[772903] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[772931] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[772943] "expr temp" "maybe param" "maybe type" "temp"
      (772946 'move' call_tmp[772943](772905 '.v' this[772854] c"super"))
      (772935 'move' call_type_tmp[772931](772908 'typeof' call_tmp[772943]))
    }
    (772909 'move' tmp[772903] call_type_tmp[772931])
    unknown call_tmp[772948] "maybe param" "maybe type" "temp"
    (772951 'move' call_tmp[772948](772914 'cast' tmp[772903] this[772854]))
    unknown chpl__thisAsParent[772911] "dead at end of block" "insert auto destroy" "temp"
    (772939 'init var' chpl__thisAsParent[772911] call_tmp[772948] tmp[772903])
    (772917 'setcid' chpl__thisAsParent[772911])
    (772919 'init field' this[772854] c"eltType" eltType[772870])
    (772928 'end of statement')
    (772922 '.=' this[772854] c"value" value[772879])
    (772929 'end of statement')
    (772925 'setcid' this[772854])
    (772937 return _void[55])
  }
  function MinReduceScanOp[82823](?).deinit[772953](arg _mt[772955]:_MT[238], arg this[772957]:MinReduceScanOp[82823](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (772965 return _void[55])
  }
  function MinReduceScanOp[82823](?).writeThis[772967](arg _mt[772971]:_MT[238], arg this[772969]:MinReduceScanOp[82823](?), arg f[772970]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772976 call writeThisDefaultImpl f[772970] this[772969])
    (772981 return _void[55])
  }
  function MinReduceScanOp[82823](?).readThis[772983](arg _mt[772987]:_MT[238], arg this[772985]:MinReduceScanOp[82823](?), arg f[772986]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772991 call readThisDefaultImpl f[772986] this[772985])
    (772997 return _void[55])
  }
  type MinReduceScanOp[82823](?) val super[355657]:ReduceScanOp[82300] "super class" unknown eltType[82712] "type variable" unknown value[82719](82718 call max eltType[82712])
  type MinReduceScanOp[772691](?)
  type MinReduceScanOp[376536](?)
  function minmax[83074](?).identity[82873](arg _mt[83078]:_MT[238], arg this[83076]:minmax[83074](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512408] "RVV" "temp"
    unknown call_tmp[629067] "expr temp" "maybe param" "maybe type" "temp"
    (629070 'move' call_tmp[629067](376548 call eltType _mt[243] this[83076]))
    unknown call_tmp[629072] "expr temp" "maybe param" "maybe type" "temp"
    (629075 'move' call_tmp[629072](82878 call max call_tmp[629067]))
    unknown call_tmp[629079] "expr temp" "maybe param" "maybe type" "temp"
    (629082 'move' call_tmp[629079](376553 call eltType _mt[243] this[83076]))
    unknown call_tmp[629084] "expr temp" "maybe param" "maybe type" "temp"
    (629087 'move' call_tmp[629084](82882 call min call_tmp[629079]))
    unknown call_tmp[629089] "expr temp" "maybe param" "maybe type" "temp"
    (629092 'move' call_tmp[629089](82884 call _build_tuple call_tmp[629072] call_tmp[629084]))
    (512413 'move' ret[512408](512412 'deref' call_tmp[629089]))
    (512410 return ret[512408])
  }
  function minmax[83074](?).accumulateOntoState[82895](arg _mt[83082]:_MT[238], arg this[83080]:minmax[83074](?), ref arg state[82893]:_any[178](?), arg x[82898] :
  (376558 call eltType _mt[243] this[83080])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629096] "expr temp" "maybe param" "maybe type" "temp"
    (629099 'move' call_tmp[629096](82904 call state[82893] 0))
    unknown call_tmp[629101] "expr temp" "maybe param" "maybe type" "temp"
    (629104 'move' call_tmp[629101](82909 call state[82893] 0))
    unknown call_tmp[629106] "expr temp" "maybe param" "maybe type" "temp"
    (629109 'move' call_tmp[629106](82912 call min call_tmp[629101] x[82898]))
    (82913 call = call_tmp[629096] call_tmp[629106])
    (476793 'end of statement')
    unknown call_tmp[629111] "expr temp" "maybe param" "maybe type" "temp"
    (629114 'move' call_tmp[629111](82920 call state[82893] 1))
    unknown call_tmp[629116] "expr temp" "maybe param" "maybe type" "temp"
    (629119 'move' call_tmp[629116](82925 call state[82893] 1))
    unknown call_tmp[629121] "expr temp" "maybe param" "maybe type" "temp"
    (629124 'move' call_tmp[629121](82928 call max call_tmp[629116] x[82898]))
    (82929 call = call_tmp[629111] call_tmp[629121])
    (512415 return _void[55])
  }
  function minmax[83074](?).accumulateOntoState[82938](arg _mt[83086]:_MT[238], arg this[83084]:minmax[83074](?), ref arg state[82936]:_any[178](?), arg other[82944] :
  unknown call_tmp[629128] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629133] "expr temp" "maybe param" "maybe type" "temp"
    (629136 'move' call_tmp[629133](82950 call state[82936] 0))
    unknown call_tmp[629138] "expr temp" "maybe param" "maybe type" "temp"
    (629141 'move' call_tmp[629138](82955 call state[82936] 0))
    unknown call_tmp[629143] "expr temp" "maybe param" "maybe type" "temp"
    (629146 'move' call_tmp[629143](82960 call other[82944] 0))
    unknown call_tmp[629148] "expr temp" "maybe param" "maybe type" "temp"
    (629151 'move' call_tmp[629148](82961 call min call_tmp[629138] call_tmp[629143]))
    (82962 call = call_tmp[629133] call_tmp[629148])
    (476795 'end of statement')
    unknown call_tmp[629153] "expr temp" "maybe param" "maybe type" "temp"
    (629156 'move' call_tmp[629153](82969 call state[82936] 1))
    unknown call_tmp[629158] "expr temp" "maybe param" "maybe type" "temp"
    (629161 'move' call_tmp[629158](82974 call state[82936] 1))
    unknown call_tmp[629163] "expr temp" "maybe param" "maybe type" "temp"
    (629166 'move' call_tmp[629163](82979 call other[82944] 1))
    unknown call_tmp[629168] "expr temp" "maybe param" "maybe type" "temp"
    (629171 'move' call_tmp[629168](82980 call max call_tmp[629158] call_tmp[629163]))
    (82981 call = call_tmp[629153] call_tmp[629168])
    (512417 return _void[55])
  }
  function minmax[83074](?).accumulate[82992](arg _mt[83090]:_MT[238], arg this[83088]:minmax[83074](?), arg x[82989] :
  (376580 call eltType _mt[243] this[83088])) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629179] "expr temp" "maybe param" "maybe type" "temp"
    (629182 'move' call_tmp[629179](376589 call value _mt[243] this[83088]))
    (82998 call(376584 call (partial) accumulateOntoState _mt[243] this[83088]) call_tmp[629179] x[82989])
    (512419 return _void[55])
  }
  function minmax[83074](?).accumulate[83012](arg _mt[83094]:_MT[238], arg this[83092]:minmax[83074](?), arg state[83009] :
  unknown call_tmp[629186] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629195] "expr temp" "maybe param" "maybe type" "temp"
    (629198 'move' call_tmp[629195](376604 call value _mt[243] this[83092]))
    (83018 call(376599 call (partial) accumulateOntoState _mt[243] this[83092]) call_tmp[629195] state[83009])
    (512421 return _void[55])
  }
  function minmax[83074](?).combine[83032](arg _mt[83098]:_MT[238], arg this[83096]:minmax[83074](?), arg other[83029] :
  unknown call_tmp[629202] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629211] "expr temp" "maybe param" "maybe type" "temp"
    (629214 'move' call_tmp[629211](376623 call value _mt[243] this[83096]))
    unknown call_tmp[629218] "expr temp" "maybe param" "maybe type" "temp"
    (629221 'move' call_tmp[629218](83038 call value _mt[243] other[83029]))
    (83041 call(376618 call (partial) accumulateOntoState _mt[243] this[83096]) call_tmp[629211] call_tmp[629218])
    (512423 return _void[55])
  }
  function minmax[83074](?).generate[83048](arg _mt[83102]:_MT[238], arg this[83100]:minmax[83074](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512427] "RVV" "temp"
    unknown call_tmp[629225] "expr temp" "maybe param" "maybe type" "temp"
    (629228 'move' call_tmp[629225](376628 call value _mt[243] this[83100]))
    (512432 'move' ret[512427](512431 'deref' call_tmp[629225]))
    (512429 return ret[512427])
  }
  function minmax[83074](?).clone[83058](arg _mt[83106]:_MT[238], arg this[83104]:minmax[83074](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512436] "RVV" "temp"
    unknown call_tmp[629232] "expr temp" "maybe param" "maybe type" "temp"
    (629235 'move' call_tmp[629232](376634 call eltType _mt[243] this[83104]))
    unknown call_tmp[629237] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629240 'move' call_tmp[629237](747858 'new' minmax[376609](?)(eltType = call_tmp[629232])(_chpl_manager = unmanaged[220](?))))
    (512441 'move' ret[512436](512440 'deref' call_tmp[629237]))
    (512438 return ret[512436])
  }
  function minmax[83074](?).super[772999](arg _mt[773001]:_MT[238], arg this[773003]:minmax[83074](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773013] "RVV" "temp"
    unknown call_tmp[773020] "expr temp" "maybe param" "maybe type" "temp"
    (773023 'move' call_tmp[773020](773007 '.v' this[773003] c"super"))
    (773018 'move' ret[773013](773017 'deref' call_tmp[773020]))
    (773015 return ret[773013])
  }
  function minmax[773030](?).eltType[773025](arg _mt[773027]:_MT[238], arg this[773032]:minmax[773030](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773067] "RVV" "temp" "type variable"
    unknown borrowOfThis[773034]
    (773059 'end of statement')
    (773036 'move' borrowOfThis[773034](773039 call _cast _borrowedNonNilable[214](?) this[773032]))
    (773060 'end of statement' borrowOfThis[773034])
    unknown call_tmp[773081] "expr temp" "maybe param" "maybe type" "temp"
    (773084 'move' call_tmp[773081](773049 'is bound' borrowOfThis[773034] c"eltType"))
    if call_tmp[773081]
    {
      unknown call_tmp[773086] "expr temp" "maybe param" "maybe type" "temp"
      (773089 'move' call_tmp[773086](773044 '.v' borrowOfThis[773034] c"eltType"))
      unknown call_tmp[773091] "expr temp" "maybe param" "maybe type" "temp"
      (773094 'move' call_tmp[773091](773045 call chpl_checkLegalTypeFieldAccessor this[773032] call_tmp[773086] "eltType"))
      (773072 'move' ret[773067](773071 'deref' call_tmp[773091]))
      gotoReturn _end_eltType[773065] _end_eltType[773065]
      (773062 'end of statement' borrowOfThis[773034])
    }
    {
      (773077 'move' ret[773067](773076 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773065] _end_eltType[773065]
    }
    label _end_eltType[773065]
    (773069 return ret[773067])
  }
  function minmax[773030](?).eltType[773096](arg _mt[773098]:_MT[238], arg this[773100]:minmax[773030](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773135] "RVV" "temp" "type variable"
    unknown borrowOfThis[773102] "type variable"
    (773127 'end of statement')
    (773104 'move' borrowOfThis[773102](773107 call _cast _borrowedNonNilable[214](?) this[773100]))
    (773128 'end of statement' borrowOfThis[773102])
    unknown call_tmp[773149] "expr temp" "maybe param" "maybe type" "temp"
    (773152 'move' call_tmp[773149](773117 'is bound' borrowOfThis[773102] c"eltType"))
    if call_tmp[773149]
    {
      unknown call_tmp[773154] "expr temp" "maybe param" "maybe type" "temp"
      (773157 'move' call_tmp[773154](773112 '.v' borrowOfThis[773102] c"eltType"))
      unknown call_tmp[773159] "expr temp" "maybe param" "maybe type" "temp"
      (773162 'move' call_tmp[773159](773113 call chpl_checkLegalTypeFieldAccessor this[773100] call_tmp[773154] "eltType"))
      (773140 'move' ret[773135](773139 'deref' call_tmp[773159]))
      gotoReturn _end_eltType[773133] _end_eltType[773133]
      (773130 'end of statement' borrowOfThis[773102])
    }
    {
      (773145 'move' ret[773135](773144 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773133] _end_eltType[773133]
    }
    label _end_eltType[773133]
    (773137 return ret[773135])
  }
  function minmax[83074](?).value[773164](arg _mt[773166]:_MT[238], arg this[773168]:minmax[83074](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773178] "RVV" "temp"
    unknown call_tmp[773185] "expr temp" "maybe param" "maybe type" "temp"
    (773188 'move' call_tmp[773185](773172 '.' this[773168] c"value"))
    (773183 'move' ret[773178](773182 'addr of' call_tmp[773185]))
    (773180 return ret[773178])
  }
  function minmax[83074](?).init[773190](arg _mt[773192]:_MT[238], arg this[773193]:minmax[83074](?), in arg l[773206]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[773209]:_any[178](?), in arg value[773218] :
  unknown call_tmp[773290] "expr temp" "maybe param" "maybe type" "temp" =
  unknown call_tmp[773300] "expr temp" "maybe param" "maybe type" "temp") : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[773247] "temporary of super field" "temp"
    (773249 'move' super_tmp[773247](773246 '.v' this[773193] c"super"))
    (773203 call(773201 call (partial) init _mt[243] super_tmp[773247]) l[773206])
    (773276 'end of statement')
    unknown tmp[773252] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[773280] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[773312] "expr temp" "maybe param" "maybe type" "temp"
      (773315 'move' call_tmp[773312](773254 '.v' this[773193] c"super"))
      (773284 'move' call_type_tmp[773280](773257 'typeof' call_tmp[773312]))
    }
    (773258 'move' tmp[773252] call_type_tmp[773280])
    unknown call_tmp[773317] "maybe param" "maybe type" "temp"
    (773320 'move' call_tmp[773317](773263 'cast' tmp[773252] this[773193]))
    unknown chpl__thisAsParent[773260] "dead at end of block" "insert auto destroy" "temp"
    (773288 'init var' chpl__thisAsParent[773260] call_tmp[773317] tmp[773252])
    (773266 'setcid' chpl__thisAsParent[773260])
    (773268 'init field' this[773193] c"eltType" eltType[773209])
    (773277 'end of statement')
    (773271 '.=' this[773193] c"value" value[773218])
    (773278 'end of statement')
    (773274 'setcid' this[773193])
    (773286 return _void[55])
  }
  function minmax[83074](?).deinit[773322](arg _mt[773324]:_MT[238], arg this[773326]:minmax[83074](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (773334 return _void[55])
  }
  function minmax[83074](?).writeThis[773336](arg _mt[773340]:_MT[238], arg this[773338]:minmax[83074](?), arg f[773339]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773345 call writeThisDefaultImpl f[773339] this[773338])
    (773350 return _void[55])
  }
  function minmax[83074](?).readThis[773352](arg _mt[773356]:_MT[238], arg this[773354]:minmax[83074](?), arg f[773355]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773360 call readThisDefaultImpl f[773355] this[773354])
    (773366 return _void[55])
  }
  type minmax[83074](?) val super[355659]:ReduceScanOp[82300] "super class" unknown eltType[82853] "type variable" unknown value[82867](82865 call _build_tuple(82859 call max eltType[82853])(82863 call min eltType[82853]))
  type minmax[773030](?)
  type minmax[376609](?)
  function LogicalAndReduceScanOp[83238](?).identity[83125](arg _mt[83242]:_MT[238], arg this[83240]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512445] "RVV" "temp"
    unknown call_tmp[629244] "expr temp" "maybe param" "maybe type" "temp"
    (629247 'move' call_tmp[629244](376640 call eltType _mt[243] this[83240]))
    unknown call_tmp[629249] "expr temp" "maybe param" "maybe type" "temp"
    (629252 'move' call_tmp[629249](83130 call _land_id call_tmp[629244]))
    (512450 'move' ret[512445](512449 'deref' call_tmp[629249]))
    (512447 return ret[512445])
  }
  function LogicalAndReduceScanOp[83238](?).accumulate[83140](arg _mt[83246]:_MT[238], arg this[83244]:LogicalAndReduceScanOp[83238](?), arg x[83138]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83145] "temp"
      unknown call_tmp[629256] "expr temp" "maybe param" "maybe type" "temp"
      (629259 'move' call_tmp[629256](376645 call value _mt[243] this[83244]))
      (83148 'move' tmp[83145](83147 'addr of' call_tmp[629256]))
      unknown tmp[421735] "maybe param" "temp"
      (421746 'move' tmp[421735] tmp[83145])
      unknown call_tmp[629261] "expr temp" "maybe param" "maybe type" "temp"
      (629264 'move' call_tmp[629261](421748 call _cond_invalid tmp[421735]))
      if call_tmp[629261]
      {
        (421751 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560145] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560146] "maybe param" "temp"
      unknown call_tmp[629266] "expr temp" "maybe param" "maybe type" "temp"
      (629269 'move' call_tmp[629266](421736 call isTrue tmp[421735]))
      (560151 'move' tmp[560146](560149 call _cond_test call_tmp[629266]))
      if tmp[560146]
      {
        unknown tmp[560153] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560155 'move' tmp[560153](421739 call isTrue x[83138]))
        (560160 'move' tmp[560145](560157 '_paramFoldLogical' tmp[560146] tmp[560153]))
      }
      {
        (560165 'move' tmp[560145](560162 '_paramFoldLogical' tmp[560146] 0))
      }
      (83153 call = tmp[83145] tmp[560145])
    }
    (512452 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).accumulateOntoState[83163](arg _mt[83250]:_MT[238], arg this[83248]:LogicalAndReduceScanOp[83238](?), ref arg state[83161]:_any[178](?), arg x[83165]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83170] "temp"
      (83173 'move' tmp[83170](83172 'addr of' state[83161]))
      unknown tmp[421756] "maybe param" "temp"
      (421767 'move' tmp[421756] tmp[83170])
      unknown call_tmp[629271] "expr temp" "maybe param" "maybe type" "temp"
      (629274 'move' call_tmp[629271](421769 call _cond_invalid tmp[421756]))
      if call_tmp[629271]
      {
        (421772 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560172] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560173] "maybe param" "temp"
      unknown call_tmp[629276] "expr temp" "maybe param" "maybe type" "temp"
      (629279 'move' call_tmp[629276](421757 call isTrue tmp[421756]))
      (560178 'move' tmp[560173](560176 call _cond_test call_tmp[629276]))
      if tmp[560173]
      {
        unknown tmp[560180] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560182 'move' tmp[560180](421760 call isTrue x[83165]))
        (560187 'move' tmp[560172](560184 '_paramFoldLogical' tmp[560173] tmp[560180]))
      }
      {
        (560192 'move' tmp[560172](560189 '_paramFoldLogical' tmp[560173] 0))
      }
      (83178 call = tmp[83170] tmp[560172])
    }
    (512454 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).combine[83188](arg _mt[83254]:_MT[238], arg this[83252]:LogicalAndReduceScanOp[83238](?), arg x[83186]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83196] "temp"
      unknown call_tmp[629283] "expr temp" "maybe param" "maybe type" "temp"
      (629286 'move' call_tmp[629283](376653 call value _mt[243] this[83252]))
      (83199 'move' tmp[83196](83198 'addr of' call_tmp[629283]))
      unknown tmp[421777] "maybe param" "temp"
      (421788 'move' tmp[421777] tmp[83196])
      unknown call_tmp[629288] "expr temp" "maybe param" "maybe type" "temp"
      (629291 'move' call_tmp[629288](421790 call _cond_invalid tmp[421777]))
      if call_tmp[629288]
      {
        (421793 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560199] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560200] "maybe param" "temp"
      unknown call_tmp[629293] "expr temp" "maybe param" "maybe type" "temp"
      (629296 'move' call_tmp[629293](421778 call isTrue tmp[421777]))
      (560205 'move' tmp[560200](560203 call _cond_test call_tmp[629293]))
      if tmp[560200]
      {
        unknown tmp[560207] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629300] "expr temp" "maybe param" "maybe type" "temp"
        (629303 'move' call_tmp[629300](83192 call value _mt[243] x[83186]))
        (560209 'move' tmp[560207](421781 call isTrue call_tmp[629300]))
        (560214 'move' tmp[560199](560211 '_paramFoldLogical' tmp[560200] tmp[560207]))
      }
      {
        (560219 'move' tmp[560199](560216 '_paramFoldLogical' tmp[560200] 0))
      }
      (83204 call = tmp[83196] tmp[560199])
    }
    (512456 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).generate[83212](arg _mt[83258]:_MT[238], arg this[83256]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512460] "RVV" "temp"
    unknown call_tmp[629307] "expr temp" "maybe param" "maybe type" "temp"
    (629310 'move' call_tmp[629307](376658 call value _mt[243] this[83256]))
    (512465 'move' ret[512460](512464 'deref' call_tmp[629307]))
    (512462 return ret[512460])
  }
  function LogicalAndReduceScanOp[83238](?).clone[83222](arg _mt[83262]:_MT[238], arg this[83260]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512469] "RVV" "temp"
    unknown call_tmp[629314] "expr temp" "maybe param" "maybe type" "temp"
    (629317 'move' call_tmp[629314](376667 call eltType _mt[243] this[83260]))
    unknown call_tmp[629319] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629322 'move' call_tmp[629319](747859 'new' LogicalAndReduceScanOp[376662](?)(eltType = call_tmp[629314])(_chpl_manager = unmanaged[220](?))))
    (512474 'move' ret[512469](512473 'deref' call_tmp[629319]))
    (512471 return ret[512469])
  }
  function LogicalAndReduceScanOp[83238](?).super[773368](arg _mt[773370]:_MT[238], arg this[773372]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773382] "RVV" "temp"
    unknown call_tmp[773389] "expr temp" "maybe param" "maybe type" "temp"
    (773392 'move' call_tmp[773389](773376 '.v' this[773372] c"super"))
    (773387 'move' ret[773382](773386 'deref' call_tmp[773389]))
    (773384 return ret[773382])
  }
  function LogicalAndReduceScanOp[773399](?).eltType[773394](arg _mt[773396]:_MT[238], arg this[773401]:LogicalAndReduceScanOp[773399](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773436] "RVV" "temp" "type variable"
    unknown borrowOfThis[773403]
    (773428 'end of statement')
    (773405 'move' borrowOfThis[773403](773408 call _cast _borrowedNonNilable[214](?) this[773401]))
    (773429 'end of statement' borrowOfThis[773403])
    unknown call_tmp[773450] "expr temp" "maybe param" "maybe type" "temp"
    (773453 'move' call_tmp[773450](773418 'is bound' borrowOfThis[773403] c"eltType"))
    if call_tmp[773450]
    {
      unknown call_tmp[773455] "expr temp" "maybe param" "maybe type" "temp"
      (773458 'move' call_tmp[773455](773413 '.v' borrowOfThis[773403] c"eltType"))
      unknown call_tmp[773460] "expr temp" "maybe param" "maybe type" "temp"
      (773463 'move' call_tmp[773460](773414 call chpl_checkLegalTypeFieldAccessor this[773401] call_tmp[773455] "eltType"))
      (773441 'move' ret[773436](773440 'deref' call_tmp[773460]))
      gotoReturn _end_eltType[773434] _end_eltType[773434]
      (773431 'end of statement' borrowOfThis[773403])
    }
    {
      (773446 'move' ret[773436](773445 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773434] _end_eltType[773434]
    }
    label _end_eltType[773434]
    (773438 return ret[773436])
  }
  function LogicalAndReduceScanOp[773399](?).eltType[773465](arg _mt[773467]:_MT[238], arg this[773469]:LogicalAndReduceScanOp[773399](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773504] "RVV" "temp" "type variable"
    unknown borrowOfThis[773471] "type variable"
    (773496 'end of statement')
    (773473 'move' borrowOfThis[773471](773476 call _cast _borrowedNonNilable[214](?) this[773469]))
    (773497 'end of statement' borrowOfThis[773471])
    unknown call_tmp[773518] "expr temp" "maybe param" "maybe type" "temp"
    (773521 'move' call_tmp[773518](773486 'is bound' borrowOfThis[773471] c"eltType"))
    if call_tmp[773518]
    {
      unknown call_tmp[773523] "expr temp" "maybe param" "maybe type" "temp"
      (773526 'move' call_tmp[773523](773481 '.v' borrowOfThis[773471] c"eltType"))
      unknown call_tmp[773528] "expr temp" "maybe param" "maybe type" "temp"
      (773531 'move' call_tmp[773528](773482 call chpl_checkLegalTypeFieldAccessor this[773469] call_tmp[773523] "eltType"))
      (773509 'move' ret[773504](773508 'deref' call_tmp[773528]))
      gotoReturn _end_eltType[773502] _end_eltType[773502]
      (773499 'end of statement' borrowOfThis[773471])
    }
    {
      (773514 'move' ret[773504](773513 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773502] _end_eltType[773502]
    }
    label _end_eltType[773502]
    (773506 return ret[773504])
  }
  function LogicalAndReduceScanOp[83238](?).value[773533](arg _mt[773535]:_MT[238], arg this[773537]:LogicalAndReduceScanOp[83238](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773547] "RVV" "temp"
    unknown call_tmp[773554] "expr temp" "maybe param" "maybe type" "temp"
    (773557 'move' call_tmp[773554](773541 '.' this[773537] c"value"))
    (773552 'move' ret[773547](773551 'addr of' call_tmp[773554]))
    (773549 return ret[773547])
  }
  function LogicalAndReduceScanOp[83238](?).init[773559](arg _mt[773561]:_MT[238], arg this[773562]:LogicalAndReduceScanOp[83238](?), in arg l[773575]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[773578]:_any[178](?), in arg value[773587] :
  (773594 call _land_id eltType[773578]) =
  (773589 call _land_id eltType[773578])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[773606] "temporary of super field" "temp"
    (773608 'move' super_tmp[773606](773605 '.v' this[773562] c"super"))
    (773572 call(773570 call (partial) init _mt[243] super_tmp[773606]) l[773575])
    (773635 'end of statement')
    unknown tmp[773611] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[773639] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[773651] "expr temp" "maybe param" "maybe type" "temp"
      (773654 'move' call_tmp[773651](773613 '.v' this[773562] c"super"))
      (773643 'move' call_type_tmp[773639](773616 'typeof' call_tmp[773651]))
    }
    (773617 'move' tmp[773611] call_type_tmp[773639])
    unknown call_tmp[773656] "maybe param" "maybe type" "temp"
    (773659 'move' call_tmp[773656](773622 'cast' tmp[773611] this[773562]))
    unknown chpl__thisAsParent[773619] "dead at end of block" "insert auto destroy" "temp"
    (773647 'init var' chpl__thisAsParent[773619] call_tmp[773656] tmp[773611])
    (773625 'setcid' chpl__thisAsParent[773619])
    (773627 'init field' this[773562] c"eltType" eltType[773578])
    (773636 'end of statement')
    (773630 '.=' this[773562] c"value" value[773587])
    (773637 'end of statement')
    (773633 'setcid' this[773562])
    (773645 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).deinit[773661](arg _mt[773663]:_MT[238], arg this[773665]:LogicalAndReduceScanOp[83238](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (773673 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).writeThis[773675](arg _mt[773679]:_MT[238], arg this[773677]:LogicalAndReduceScanOp[83238](?), arg f[773678]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773684 call writeThisDefaultImpl f[773678] this[773677])
    (773689 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).readThis[773691](arg _mt[773695]:_MT[238], arg this[773693]:LogicalAndReduceScanOp[83238](?), arg f[773694]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773699 call readThisDefaultImpl f[773694] this[773693])
    (773705 return _void[55])
  }
  type LogicalAndReduceScanOp[83238](?) val super[355661]:ReduceScanOp[82300] "super class" unknown eltType[83112] "type variable" unknown value[83119](83118 call _land_id eltType[83112])
  type LogicalAndReduceScanOp[773399](?)
  type LogicalAndReduceScanOp[376662](?)
  function LogicalOrReduceScanOp[83394](?).identity[83281](arg _mt[83398]:_MT[238], arg this[83396]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512478] "RVV" "temp"
    unknown call_tmp[629326] "expr temp" "maybe param" "maybe type" "temp"
    (629329 'move' call_tmp[629326](376673 call eltType _mt[243] this[83396]))
    unknown call_tmp[629331] "expr temp" "maybe param" "maybe type" "temp"
    (629334 'move' call_tmp[629331](83286 call _lor_id call_tmp[629326]))
    (512483 'move' ret[512478](512482 'deref' call_tmp[629331]))
    (512480 return ret[512478])
  }
  function LogicalOrReduceScanOp[83394](?).accumulate[83296](arg _mt[83402]:_MT[238], arg this[83400]:LogicalOrReduceScanOp[83394](?), arg x[83294]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83301] "temp"
      unknown call_tmp[629338] "expr temp" "maybe param" "maybe type" "temp"
      (629341 'move' call_tmp[629338](376678 call value _mt[243] this[83400]))
      (83304 'move' tmp[83301](83303 'addr of' call_tmp[629338]))
      unknown tmp[421798] "maybe param" "temp"
      (421809 'move' tmp[421798] tmp[83301])
      unknown call_tmp[629343] "expr temp" "maybe param" "maybe type" "temp"
      (629346 'move' call_tmp[629343](421811 call _cond_invalid tmp[421798]))
      if call_tmp[629343]
      {
        (421814 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560226] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560227] "maybe param" "temp"
      unknown call_tmp[629348] "expr temp" "maybe param" "maybe type" "temp"
      (629351 'move' call_tmp[629348](421799 call isTrue tmp[421798]))
      (560232 'move' tmp[560227](560230 call _cond_test call_tmp[629348]))
      if tmp[560227]
      {
        (560237 'move' tmp[560226](560234 '_paramFoldLogical' tmp[560227] 1))
      }
      {
        unknown tmp[560239] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560241 'move' tmp[560239](421803 call isTrue x[83294]))
        (560246 'move' tmp[560226](560243 '_paramFoldLogical' tmp[560227] tmp[560239]))
      }
      (83309 call = tmp[83301] tmp[560226])
    }
    (512485 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).accumulateOntoState[83319](arg _mt[83406]:_MT[238], arg this[83404]:LogicalOrReduceScanOp[83394](?), ref arg state[83317]:_any[178](?), arg x[83321]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83326] "temp"
      (83329 'move' tmp[83326](83328 'addr of' state[83317]))
      unknown tmp[421819] "maybe param" "temp"
      (421830 'move' tmp[421819] tmp[83326])
      unknown call_tmp[629353] "expr temp" "maybe param" "maybe type" "temp"
      (629356 'move' call_tmp[629353](421832 call _cond_invalid tmp[421819]))
      if call_tmp[629353]
      {
        (421835 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560253] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560254] "maybe param" "temp"
      unknown call_tmp[629358] "expr temp" "maybe param" "maybe type" "temp"
      (629361 'move' call_tmp[629358](421820 call isTrue tmp[421819]))
      (560259 'move' tmp[560254](560257 call _cond_test call_tmp[629358]))
      if tmp[560254]
      {
        (560264 'move' tmp[560253](560261 '_paramFoldLogical' tmp[560254] 1))
      }
      {
        unknown tmp[560266] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560268 'move' tmp[560266](421824 call isTrue x[83321]))
        (560273 'move' tmp[560253](560270 '_paramFoldLogical' tmp[560254] tmp[560266]))
      }
      (83334 call = tmp[83326] tmp[560253])
    }
    (512487 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).combine[83344](arg _mt[83410]:_MT[238], arg this[83408]:LogicalOrReduceScanOp[83394](?), arg x[83342]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83352] "temp"
      unknown call_tmp[629365] "expr temp" "maybe param" "maybe type" "temp"
      (629368 'move' call_tmp[629365](376686 call value _mt[243] this[83408]))
      (83355 'move' tmp[83352](83354 'addr of' call_tmp[629365]))
      unknown tmp[421840] "maybe param" "temp"
      (421851 'move' tmp[421840] tmp[83352])
      unknown call_tmp[629370] "expr temp" "maybe param" "maybe type" "temp"
      (629373 'move' call_tmp[629370](421853 call _cond_invalid tmp[421840]))
      if call_tmp[629370]
      {
        (421856 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560280] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560281] "maybe param" "temp"
      unknown call_tmp[629375] "expr temp" "maybe param" "maybe type" "temp"
      (629378 'move' call_tmp[629375](421841 call isTrue tmp[421840]))
      (560286 'move' tmp[560281](560284 call _cond_test call_tmp[629375]))
      if tmp[560281]
      {
        (560291 'move' tmp[560280](560288 '_paramFoldLogical' tmp[560281] 1))
      }
      {
        unknown tmp[560293] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629382] "expr temp" "maybe param" "maybe type" "temp"
        (629385 'move' call_tmp[629382](83348 call value _mt[243] x[83342]))
        (560295 'move' tmp[560293](421845 call isTrue call_tmp[629382]))
        (560300 'move' tmp[560280](560297 '_paramFoldLogical' tmp[560281] tmp[560293]))
      }
      (83360 call = tmp[83352] tmp[560280])
    }
    (512489 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).generate[83368](arg _mt[83414]:_MT[238], arg this[83412]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512493] "RVV" "temp"
    unknown call_tmp[629389] "expr temp" "maybe param" "maybe type" "temp"
    (629392 'move' call_tmp[629389](376691 call value _mt[243] this[83412]))
    (512498 'move' ret[512493](512497 'deref' call_tmp[629389]))
    (512495 return ret[512493])
  }
  function LogicalOrReduceScanOp[83394](?).clone[83378](arg _mt[83418]:_MT[238], arg this[83416]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512502] "RVV" "temp"
    unknown call_tmp[629396] "expr temp" "maybe param" "maybe type" "temp"
    (629399 'move' call_tmp[629396](376700 call eltType _mt[243] this[83416]))
    unknown call_tmp[629401] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629404 'move' call_tmp[629401](747860 'new' LogicalOrReduceScanOp[376695](?)(eltType = call_tmp[629396])(_chpl_manager = unmanaged[220](?))))
    (512507 'move' ret[512502](512506 'deref' call_tmp[629401]))
    (512504 return ret[512502])
  }
  function LogicalOrReduceScanOp[83394](?).super[773707](arg _mt[773709]:_MT[238], arg this[773711]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773721] "RVV" "temp"
    unknown call_tmp[773728] "expr temp" "maybe param" "maybe type" "temp"
    (773731 'move' call_tmp[773728](773715 '.v' this[773711] c"super"))
    (773726 'move' ret[773721](773725 'deref' call_tmp[773728]))
    (773723 return ret[773721])
  }
  function LogicalOrReduceScanOp[773738](?).eltType[773733](arg _mt[773735]:_MT[238], arg this[773740]:LogicalOrReduceScanOp[773738](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773775] "RVV" "temp" "type variable"
    unknown borrowOfThis[773742]
    (773767 'end of statement')
    (773744 'move' borrowOfThis[773742](773747 call _cast _borrowedNonNilable[214](?) this[773740]))
    (773768 'end of statement' borrowOfThis[773742])
    unknown call_tmp[773789] "expr temp" "maybe param" "maybe type" "temp"
    (773792 'move' call_tmp[773789](773757 'is bound' borrowOfThis[773742] c"eltType"))
    if call_tmp[773789]
    {
      unknown call_tmp[773794] "expr temp" "maybe param" "maybe type" "temp"
      (773797 'move' call_tmp[773794](773752 '.v' borrowOfThis[773742] c"eltType"))
      unknown call_tmp[773799] "expr temp" "maybe param" "maybe type" "temp"
      (773802 'move' call_tmp[773799](773753 call chpl_checkLegalTypeFieldAccessor this[773740] call_tmp[773794] "eltType"))
      (773780 'move' ret[773775](773779 'deref' call_tmp[773799]))
      gotoReturn _end_eltType[773773] _end_eltType[773773]
      (773770 'end of statement' borrowOfThis[773742])
    }
    {
      (773785 'move' ret[773775](773784 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773773] _end_eltType[773773]
    }
    label _end_eltType[773773]
    (773777 return ret[773775])
  }
  function LogicalOrReduceScanOp[773738](?).eltType[773804](arg _mt[773806]:_MT[238], arg this[773808]:LogicalOrReduceScanOp[773738](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773843] "RVV" "temp" "type variable"
    unknown borrowOfThis[773810] "type variable"
    (773835 'end of statement')
    (773812 'move' borrowOfThis[773810](773815 call _cast _borrowedNonNilable[214](?) this[773808]))
    (773836 'end of statement' borrowOfThis[773810])
    unknown call_tmp[773857] "expr temp" "maybe param" "maybe type" "temp"
    (773860 'move' call_tmp[773857](773825 'is bound' borrowOfThis[773810] c"eltType"))
    if call_tmp[773857]
    {
      unknown call_tmp[773862] "expr temp" "maybe param" "maybe type" "temp"
      (773865 'move' call_tmp[773862](773820 '.v' borrowOfThis[773810] c"eltType"))
      unknown call_tmp[773867] "expr temp" "maybe param" "maybe type" "temp"
      (773870 'move' call_tmp[773867](773821 call chpl_checkLegalTypeFieldAccessor this[773808] call_tmp[773862] "eltType"))
      (773848 'move' ret[773843](773847 'deref' call_tmp[773867]))
      gotoReturn _end_eltType[773841] _end_eltType[773841]
      (773838 'end of statement' borrowOfThis[773810])
    }
    {
      (773853 'move' ret[773843](773852 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773841] _end_eltType[773841]
    }
    label _end_eltType[773841]
    (773845 return ret[773843])
  }
  function LogicalOrReduceScanOp[83394](?).value[773872](arg _mt[773874]:_MT[238], arg this[773876]:LogicalOrReduceScanOp[83394](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773886] "RVV" "temp"
    unknown call_tmp[773893] "expr temp" "maybe param" "maybe type" "temp"
    (773896 'move' call_tmp[773893](773880 '.' this[773876] c"value"))
    (773891 'move' ret[773886](773890 'addr of' call_tmp[773893]))
    (773888 return ret[773886])
  }
  function LogicalOrReduceScanOp[83394](?).init[773898](arg _mt[773900]:_MT[238], arg this[773901]:LogicalOrReduceScanOp[83394](?), in arg l[773914]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[773917]:_any[178](?), in arg value[773926] :
  (773933 call _lor_id eltType[773917]) =
  (773928 call _lor_id eltType[773917])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[773945] "temporary of super field" "temp"
    (773947 'move' super_tmp[773945](773944 '.v' this[773901] c"super"))
    (773911 call(773909 call (partial) init _mt[243] super_tmp[773945]) l[773914])
    (773974 'end of statement')
    unknown tmp[773950] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[773978] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[773990] "expr temp" "maybe param" "maybe type" "temp"
      (773993 'move' call_tmp[773990](773952 '.v' this[773901] c"super"))
      (773982 'move' call_type_tmp[773978](773955 'typeof' call_tmp[773990]))
    }
    (773956 'move' tmp[773950] call_type_tmp[773978])
    unknown call_tmp[773995] "maybe param" "maybe type" "temp"
    (773998 'move' call_tmp[773995](773961 'cast' tmp[773950] this[773901]))
    unknown chpl__thisAsParent[773958] "dead at end of block" "insert auto destroy" "temp"
    (773986 'init var' chpl__thisAsParent[773958] call_tmp[773995] tmp[773950])
    (773964 'setcid' chpl__thisAsParent[773958])
    (773966 'init field' this[773901] c"eltType" eltType[773917])
    (773975 'end of statement')
    (773969 '.=' this[773901] c"value" value[773926])
    (773976 'end of statement')
    (773972 'setcid' this[773901])
    (773984 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).deinit[774000](arg _mt[774002]:_MT[238], arg this[774004]:LogicalOrReduceScanOp[83394](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (774012 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).writeThis[774014](arg _mt[774018]:_MT[238], arg this[774016]:LogicalOrReduceScanOp[83394](?), arg f[774017]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774023 call writeThisDefaultImpl f[774017] this[774016])
    (774028 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).readThis[774030](arg _mt[774034]:_MT[238], arg this[774032]:LogicalOrReduceScanOp[83394](?), arg f[774033]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774038 call readThisDefaultImpl f[774033] this[774032])
    (774044 return _void[55])
  }
  type LogicalOrReduceScanOp[83394](?) val super[355663]:ReduceScanOp[82300] "super class" unknown eltType[83268] "type variable" unknown value[83275](83274 call _lor_id eltType[83268])
  type LogicalOrReduceScanOp[773738](?)
  type LogicalOrReduceScanOp[376695](?)
  function BitwiseAndReduceScanOp[83523](?).identity[83437](arg _mt[83527]:_MT[238], arg this[83525]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512511] "RVV" "temp"
    unknown call_tmp[629408] "expr temp" "maybe param" "maybe type" "temp"
    (629411 'move' call_tmp[629408](376706 call eltType _mt[243] this[83525]))
    unknown call_tmp[629413] "expr temp" "maybe param" "maybe type" "temp"
    (629416 'move' call_tmp[629413](83442 call _band_id call_tmp[629408]))
    (512516 'move' ret[512511](512515 'deref' call_tmp[629413]))
    (512513 return ret[512511])
  }
  function BitwiseAndReduceScanOp[83523](?).accumulate[83452](arg _mt[83531]:_MT[238], arg this[83529]:BitwiseAndReduceScanOp[83523](?), arg x[83450]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629420] "expr temp" "maybe param" "maybe type" "temp"
    (629423 'move' call_tmp[629420](376711 call value _mt[243] this[83529]))
    (83456 call &= call_tmp[629420] x[83450])
    (512518 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).accumulateOntoState[83466](arg _mt[83535]:_MT[238], arg this[83533]:BitwiseAndReduceScanOp[83523](?), ref arg state[83464]:_any[178](?), arg x[83468]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83472 call &= state[83464] x[83468])
    (512520 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).combine[83482](arg _mt[83539]:_MT[238], arg this[83537]:BitwiseAndReduceScanOp[83523](?), arg x[83480]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629427] "expr temp" "maybe param" "maybe type" "temp"
    (629430 'move' call_tmp[629427](376719 call value _mt[243] this[83537]))
    unknown call_tmp[629434] "expr temp" "maybe param" "maybe type" "temp"
    (629437 'move' call_tmp[629434](83486 call value _mt[243] x[83480]))
    (83489 call &= call_tmp[629427] call_tmp[629434])
    (512522 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).generate[83497](arg _mt[83543]:_MT[238], arg this[83541]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512526] "RVV" "temp"
    unknown call_tmp[629441] "expr temp" "maybe param" "maybe type" "temp"
    (629444 'move' call_tmp[629441](376724 call value _mt[243] this[83541]))
    (512531 'move' ret[512526](512530 'deref' call_tmp[629441]))
    (512528 return ret[512526])
  }
  function BitwiseAndReduceScanOp[83523](?).clone[83507](arg _mt[83547]:_MT[238], arg this[83545]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512535] "RVV" "temp"
    unknown call_tmp[629448] "expr temp" "maybe param" "maybe type" "temp"
    (629451 'move' call_tmp[629448](376733 call eltType _mt[243] this[83545]))
    unknown call_tmp[629453] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629456 'move' call_tmp[629453](747861 'new' BitwiseAndReduceScanOp[376728](?)(eltType = call_tmp[629448])(_chpl_manager = unmanaged[220](?))))
    (512540 'move' ret[512535](512539 'deref' call_tmp[629453]))
    (512537 return ret[512535])
  }
  function BitwiseAndReduceScanOp[83523](?).super[774046](arg _mt[774048]:_MT[238], arg this[774050]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774060] "RVV" "temp"
    unknown call_tmp[774067] "expr temp" "maybe param" "maybe type" "temp"
    (774070 'move' call_tmp[774067](774054 '.v' this[774050] c"super"))
    (774065 'move' ret[774060](774064 'deref' call_tmp[774067]))
    (774062 return ret[774060])
  }
  function BitwiseAndReduceScanOp[774077](?).eltType[774072](arg _mt[774074]:_MT[238], arg this[774079]:BitwiseAndReduceScanOp[774077](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774114] "RVV" "temp" "type variable"
    unknown borrowOfThis[774081]
    (774106 'end of statement')
    (774083 'move' borrowOfThis[774081](774086 call _cast _borrowedNonNilable[214](?) this[774079]))
    (774107 'end of statement' borrowOfThis[774081])
    unknown call_tmp[774128] "expr temp" "maybe param" "maybe type" "temp"
    (774131 'move' call_tmp[774128](774096 'is bound' borrowOfThis[774081] c"eltType"))
    if call_tmp[774128]
    {
      unknown call_tmp[774133] "expr temp" "maybe param" "maybe type" "temp"
      (774136 'move' call_tmp[774133](774091 '.v' borrowOfThis[774081] c"eltType"))
      unknown call_tmp[774138] "expr temp" "maybe param" "maybe type" "temp"
      (774141 'move' call_tmp[774138](774092 call chpl_checkLegalTypeFieldAccessor this[774079] call_tmp[774133] "eltType"))
      (774119 'move' ret[774114](774118 'deref' call_tmp[774138]))
      gotoReturn _end_eltType[774112] _end_eltType[774112]
      (774109 'end of statement' borrowOfThis[774081])
    }
    {
      (774124 'move' ret[774114](774123 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774112] _end_eltType[774112]
    }
    label _end_eltType[774112]
    (774116 return ret[774114])
  }
  function BitwiseAndReduceScanOp[774077](?).eltType[774143](arg _mt[774145]:_MT[238], arg this[774147]:BitwiseAndReduceScanOp[774077](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774182] "RVV" "temp" "type variable"
    unknown borrowOfThis[774149] "type variable"
    (774174 'end of statement')
    (774151 'move' borrowOfThis[774149](774154 call _cast _borrowedNonNilable[214](?) this[774147]))
    (774175 'end of statement' borrowOfThis[774149])
    unknown call_tmp[774196] "expr temp" "maybe param" "maybe type" "temp"
    (774199 'move' call_tmp[774196](774164 'is bound' borrowOfThis[774149] c"eltType"))
    if call_tmp[774196]
    {
      unknown call_tmp[774201] "expr temp" "maybe param" "maybe type" "temp"
      (774204 'move' call_tmp[774201](774159 '.v' borrowOfThis[774149] c"eltType"))
      unknown call_tmp[774206] "expr temp" "maybe param" "maybe type" "temp"
      (774209 'move' call_tmp[774206](774160 call chpl_checkLegalTypeFieldAccessor this[774147] call_tmp[774201] "eltType"))
      (774187 'move' ret[774182](774186 'deref' call_tmp[774206]))
      gotoReturn _end_eltType[774180] _end_eltType[774180]
      (774177 'end of statement' borrowOfThis[774149])
    }
    {
      (774192 'move' ret[774182](774191 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774180] _end_eltType[774180]
    }
    label _end_eltType[774180]
    (774184 return ret[774182])
  }
  function BitwiseAndReduceScanOp[83523](?).value[774211](arg _mt[774213]:_MT[238], arg this[774215]:BitwiseAndReduceScanOp[83523](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774225] "RVV" "temp"
    unknown call_tmp[774232] "expr temp" "maybe param" "maybe type" "temp"
    (774235 'move' call_tmp[774232](774219 '.' this[774215] c"value"))
    (774230 'move' ret[774225](774229 'addr of' call_tmp[774232]))
    (774227 return ret[774225])
  }
  function BitwiseAndReduceScanOp[83523](?).init[774237](arg _mt[774239]:_MT[238], arg this[774240]:BitwiseAndReduceScanOp[83523](?), in arg l[774253]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[774256]:_any[178](?), in arg value[774265] :
  (774272 call _band_id eltType[774256]) =
  (774267 call _band_id eltType[774256])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[774284] "temporary of super field" "temp"
    (774286 'move' super_tmp[774284](774283 '.v' this[774240] c"super"))
    (774250 call(774248 call (partial) init _mt[243] super_tmp[774284]) l[774253])
    (774313 'end of statement')
    unknown tmp[774289] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[774317] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[774329] "expr temp" "maybe param" "maybe type" "temp"
      (774332 'move' call_tmp[774329](774291 '.v' this[774240] c"super"))
      (774321 'move' call_type_tmp[774317](774294 'typeof' call_tmp[774329]))
    }
    (774295 'move' tmp[774289] call_type_tmp[774317])
    unknown call_tmp[774334] "maybe param" "maybe type" "temp"
    (774337 'move' call_tmp[774334](774300 'cast' tmp[774289] this[774240]))
    unknown chpl__thisAsParent[774297] "dead at end of block" "insert auto destroy" "temp"
    (774325 'init var' chpl__thisAsParent[774297] call_tmp[774334] tmp[774289])
    (774303 'setcid' chpl__thisAsParent[774297])
    (774305 'init field' this[774240] c"eltType" eltType[774256])
    (774314 'end of statement')
    (774308 '.=' this[774240] c"value" value[774265])
    (774315 'end of statement')
    (774311 'setcid' this[774240])
    (774323 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).deinit[774339](arg _mt[774341]:_MT[238], arg this[774343]:BitwiseAndReduceScanOp[83523](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (774351 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).writeThis[774353](arg _mt[774357]:_MT[238], arg this[774355]:BitwiseAndReduceScanOp[83523](?), arg f[774356]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774362 call writeThisDefaultImpl f[774356] this[774355])
    (774367 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).readThis[774369](arg _mt[774373]:_MT[238], arg this[774371]:BitwiseAndReduceScanOp[83523](?), arg f[774372]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774377 call readThisDefaultImpl f[774372] this[774371])
    (774383 return _void[55])
  }
  type BitwiseAndReduceScanOp[83523](?) val super[355665]:ReduceScanOp[82300] "super class" unknown eltType[83424] "type variable" unknown value[83431](83430 call _band_id eltType[83424])
  type BitwiseAndReduceScanOp[774077](?)
  type BitwiseAndReduceScanOp[376728](?)
  function BitwiseOrReduceScanOp[83652](?).identity[83566](arg _mt[83656]:_MT[238], arg this[83654]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512544] "RVV" "temp"
    unknown call_tmp[629460] "expr temp" "maybe param" "maybe type" "temp"
    (629463 'move' call_tmp[629460](376739 call eltType _mt[243] this[83654]))
    unknown call_tmp[629465] "expr temp" "maybe param" "maybe type" "temp"
    (629468 'move' call_tmp[629465](83571 call _bor_id call_tmp[629460]))
    (512549 'move' ret[512544](512548 'deref' call_tmp[629465]))
    (512546 return ret[512544])
  }
  function BitwiseOrReduceScanOp[83652](?).accumulate[83581](arg _mt[83660]:_MT[238], arg this[83658]:BitwiseOrReduceScanOp[83652](?), arg x[83579]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629472] "expr temp" "maybe param" "maybe type" "temp"
    (629475 'move' call_tmp[629472](376744 call value _mt[243] this[83658]))
    (83585 call |= call_tmp[629472] x[83579])
    (512551 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).accumulateOntoState[83595](arg _mt[83664]:_MT[238], arg this[83662]:BitwiseOrReduceScanOp[83652](?), ref arg state[83593]:_any[178](?), arg x[83597]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83601 call |= state[83593] x[83597])
    (512553 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).combine[83611](arg _mt[83668]:_MT[238], arg this[83666]:BitwiseOrReduceScanOp[83652](?), arg x[83609]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629479] "expr temp" "maybe param" "maybe type" "temp"
    (629482 'move' call_tmp[629479](376752 call value _mt[243] this[83666]))
    unknown call_tmp[629486] "expr temp" "maybe param" "maybe type" "temp"
    (629489 'move' call_tmp[629486](83615 call value _mt[243] x[83609]))
    (83618 call |= call_tmp[629479] call_tmp[629486])
    (512555 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).generate[83626](arg _mt[83672]:_MT[238], arg this[83670]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512559] "RVV" "temp"
    unknown call_tmp[629493] "expr temp" "maybe param" "maybe type" "temp"
    (629496 'move' call_tmp[629493](376757 call value _mt[243] this[83670]))
    (512564 'move' ret[512559](512563 'deref' call_tmp[629493]))
    (512561 return ret[512559])
  }
  function BitwiseOrReduceScanOp[83652](?).clone[83636](arg _mt[83676]:_MT[238], arg this[83674]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512568] "RVV" "temp"
    unknown call_tmp[629500] "expr temp" "maybe param" "maybe type" "temp"
    (629503 'move' call_tmp[629500](376766 call eltType _mt[243] this[83674]))
    unknown call_tmp[629505] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629508 'move' call_tmp[629505](747862 'new' BitwiseOrReduceScanOp[376761](?)(eltType = call_tmp[629500])(_chpl_manager = unmanaged[220](?))))
    (512573 'move' ret[512568](512572 'deref' call_tmp[629505]))
    (512570 return ret[512568])
  }
  function BitwiseOrReduceScanOp[83652](?).super[774385](arg _mt[774387]:_MT[238], arg this[774389]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774399] "RVV" "temp"
    unknown call_tmp[774406] "expr temp" "maybe param" "maybe type" "temp"
    (774409 'move' call_tmp[774406](774393 '.v' this[774389] c"super"))
    (774404 'move' ret[774399](774403 'deref' call_tmp[774406]))
    (774401 return ret[774399])
  }
  function BitwiseOrReduceScanOp[774416](?).eltType[774411](arg _mt[774413]:_MT[238], arg this[774418]:BitwiseOrReduceScanOp[774416](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774453] "RVV" "temp" "type variable"
    unknown borrowOfThis[774420]
    (774445 'end of statement')
    (774422 'move' borrowOfThis[774420](774425 call _cast _borrowedNonNilable[214](?) this[774418]))
    (774446 'end of statement' borrowOfThis[774420])
    unknown call_tmp[774467] "expr temp" "maybe param" "maybe type" "temp"
    (774470 'move' call_tmp[774467](774435 'is bound' borrowOfThis[774420] c"eltType"))
    if call_tmp[774467]
    {
      unknown call_tmp[774472] "expr temp" "maybe param" "maybe type" "temp"
      (774475 'move' call_tmp[774472](774430 '.v' borrowOfThis[774420] c"eltType"))
      unknown call_tmp[774477] "expr temp" "maybe param" "maybe type" "temp"
      (774480 'move' call_tmp[774477](774431 call chpl_checkLegalTypeFieldAccessor this[774418] call_tmp[774472] "eltType"))
      (774458 'move' ret[774453](774457 'deref' call_tmp[774477]))
      gotoReturn _end_eltType[774451] _end_eltType[774451]
      (774448 'end of statement' borrowOfThis[774420])
    }
    {
      (774463 'move' ret[774453](774462 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774451] _end_eltType[774451]
    }
    label _end_eltType[774451]
    (774455 return ret[774453])
  }
  function BitwiseOrReduceScanOp[774416](?).eltType[774482](arg _mt[774484]:_MT[238], arg this[774486]:BitwiseOrReduceScanOp[774416](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774521] "RVV" "temp" "type variable"
    unknown borrowOfThis[774488] "type variable"
    (774513 'end of statement')
    (774490 'move' borrowOfThis[774488](774493 call _cast _borrowedNonNilable[214](?) this[774486]))
    (774514 'end of statement' borrowOfThis[774488])
    unknown call_tmp[774535] "expr temp" "maybe param" "maybe type" "temp"
    (774538 'move' call_tmp[774535](774503 'is bound' borrowOfThis[774488] c"eltType"))
    if call_tmp[774535]
    {
      unknown call_tmp[774540] "expr temp" "maybe param" "maybe type" "temp"
      (774543 'move' call_tmp[774540](774498 '.v' borrowOfThis[774488] c"eltType"))
      unknown call_tmp[774545] "expr temp" "maybe param" "maybe type" "temp"
      (774548 'move' call_tmp[774545](774499 call chpl_checkLegalTypeFieldAccessor this[774486] call_tmp[774540] "eltType"))
      (774526 'move' ret[774521](774525 'deref' call_tmp[774545]))
      gotoReturn _end_eltType[774519] _end_eltType[774519]
      (774516 'end of statement' borrowOfThis[774488])
    }
    {
      (774531 'move' ret[774521](774530 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774519] _end_eltType[774519]
    }
    label _end_eltType[774519]
    (774523 return ret[774521])
  }
  function BitwiseOrReduceScanOp[83652](?).value[774550](arg _mt[774552]:_MT[238], arg this[774554]:BitwiseOrReduceScanOp[83652](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774564] "RVV" "temp"
    unknown call_tmp[774571] "expr temp" "maybe param" "maybe type" "temp"
    (774574 'move' call_tmp[774571](774558 '.' this[774554] c"value"))
    (774569 'move' ret[774564](774568 'addr of' call_tmp[774571]))
    (774566 return ret[774564])
  }
  function BitwiseOrReduceScanOp[83652](?).init[774576](arg _mt[774578]:_MT[238], arg this[774579]:BitwiseOrReduceScanOp[83652](?), in arg l[774592]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[774595]:_any[178](?), in arg value[774604] :
  (774611 call _bor_id eltType[774595]) =
  (774606 call _bor_id eltType[774595])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[774623] "temporary of super field" "temp"
    (774625 'move' super_tmp[774623](774622 '.v' this[774579] c"super"))
    (774589 call(774587 call (partial) init _mt[243] super_tmp[774623]) l[774592])
    (774652 'end of statement')
    unknown tmp[774628] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[774656] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[774668] "expr temp" "maybe param" "maybe type" "temp"
      (774671 'move' call_tmp[774668](774630 '.v' this[774579] c"super"))
      (774660 'move' call_type_tmp[774656](774633 'typeof' call_tmp[774668]))
    }
    (774634 'move' tmp[774628] call_type_tmp[774656])
    unknown call_tmp[774673] "maybe param" "maybe type" "temp"
    (774676 'move' call_tmp[774673](774639 'cast' tmp[774628] this[774579]))
    unknown chpl__thisAsParent[774636] "dead at end of block" "insert auto destroy" "temp"
    (774664 'init var' chpl__thisAsParent[774636] call_tmp[774673] tmp[774628])
    (774642 'setcid' chpl__thisAsParent[774636])
    (774644 'init field' this[774579] c"eltType" eltType[774595])
    (774653 'end of statement')
    (774647 '.=' this[774579] c"value" value[774604])
    (774654 'end of statement')
    (774650 'setcid' this[774579])
    (774662 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).deinit[774678](arg _mt[774680]:_MT[238], arg this[774682]:BitwiseOrReduceScanOp[83652](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (774690 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).writeThis[774692](arg _mt[774696]:_MT[238], arg this[774694]:BitwiseOrReduceScanOp[83652](?), arg f[774695]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774701 call writeThisDefaultImpl f[774695] this[774694])
    (774706 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).readThis[774708](arg _mt[774712]:_MT[238], arg this[774710]:BitwiseOrReduceScanOp[83652](?), arg f[774711]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774716 call readThisDefaultImpl f[774711] this[774710])
    (774722 return _void[55])
  }
  type BitwiseOrReduceScanOp[83652](?) val super[355667]:ReduceScanOp[82300] "super class" unknown eltType[83553] "type variable" unknown value[83560](83559 call _bor_id eltType[83553])
  type BitwiseOrReduceScanOp[774416](?)
  type BitwiseOrReduceScanOp[376761](?)
  function BitwiseXorReduceScanOp[83781](?).identity[83695](arg _mt[83785]:_MT[238], arg this[83783]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512577] "RVV" "temp"
    unknown call_tmp[629512] "expr temp" "maybe param" "maybe type" "temp"
    (629515 'move' call_tmp[629512](376772 call eltType _mt[243] this[83783]))
    unknown call_tmp[629517] "expr temp" "maybe param" "maybe type" "temp"
    (629520 'move' call_tmp[629517](83700 call _bxor_id call_tmp[629512]))
    (512582 'move' ret[512577](512581 'deref' call_tmp[629517]))
    (512579 return ret[512577])
  }
  function BitwiseXorReduceScanOp[83781](?).accumulate[83710](arg _mt[83789]:_MT[238], arg this[83787]:BitwiseXorReduceScanOp[83781](?), arg x[83708]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629524] "expr temp" "maybe param" "maybe type" "temp"
    (629527 'move' call_tmp[629524](376777 call value _mt[243] this[83787]))
    (83714 call ^= call_tmp[629524] x[83708])
    (512584 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).accumulateOntoState[83724](arg _mt[83793]:_MT[238], arg this[83791]:BitwiseXorReduceScanOp[83781](?), ref arg state[83722]:_any[178](?), arg x[83726]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83730 call ^= state[83722] x[83726])
    (512586 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).combine[83740](arg _mt[83797]:_MT[238], arg this[83795]:BitwiseXorReduceScanOp[83781](?), arg x[83738]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629531] "expr temp" "maybe param" "maybe type" "temp"
    (629534 'move' call_tmp[629531](376785 call value _mt[243] this[83795]))
    unknown call_tmp[629538] "expr temp" "maybe param" "maybe type" "temp"
    (629541 'move' call_tmp[629538](83744 call value _mt[243] x[83738]))
    (83747 call ^= call_tmp[629531] call_tmp[629538])
    (512588 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).generate[83755](arg _mt[83801]:_MT[238], arg this[83799]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512592] "RVV" "temp"
    unknown call_tmp[629545] "expr temp" "maybe param" "maybe type" "temp"
    (629548 'move' call_tmp[629545](376790 call value _mt[243] this[83799]))
    (512597 'move' ret[512592](512596 'deref' call_tmp[629545]))
    (512594 return ret[512592])
  }
  function BitwiseXorReduceScanOp[83781](?).clone[83765](arg _mt[83805]:_MT[238], arg this[83803]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512601] "RVV" "temp"
    unknown call_tmp[629552] "expr temp" "maybe param" "maybe type" "temp"
    (629555 'move' call_tmp[629552](376799 call eltType _mt[243] this[83803]))
    unknown call_tmp[629557] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629560 'move' call_tmp[629557](747863 'new' BitwiseXorReduceScanOp[376794](?)(eltType = call_tmp[629552])(_chpl_manager = unmanaged[220](?))))
    (512606 'move' ret[512601](512605 'deref' call_tmp[629557]))
    (512603 return ret[512601])
  }
  function BitwiseXorReduceScanOp[83781](?).super[774724](arg _mt[774726]:_MT[238], arg this[774728]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774738] "RVV" "temp"
    unknown call_tmp[774745] "expr temp" "maybe param" "maybe type" "temp"
    (774748 'move' call_tmp[774745](774732 '.v' this[774728] c"super"))
    (774743 'move' ret[774738](774742 'deref' call_tmp[774745]))
    (774740 return ret[774738])
  }
  function BitwiseXorReduceScanOp[774755](?).eltType[774750](arg _mt[774752]:_MT[238], arg this[774757]:BitwiseXorReduceScanOp[774755](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774792] "RVV" "temp" "type variable"
    unknown borrowOfThis[774759]
    (774784 'end of statement')
    (774761 'move' borrowOfThis[774759](774764 call _cast _borrowedNonNilable[214](?) this[774757]))
    (774785 'end of statement' borrowOfThis[774759])
    unknown call_tmp[774806] "expr temp" "maybe param" "maybe type" "temp"
    (774809 'move' call_tmp[774806](774774 'is bound' borrowOfThis[774759] c"eltType"))
    if call_tmp[774806]
    {
      unknown call_tmp[774811] "expr temp" "maybe param" "maybe type" "temp"
      (774814 'move' call_tmp[774811](774769 '.v' borrowOfThis[774759] c"eltType"))
      unknown call_tmp[774816] "expr temp" "maybe param" "maybe type" "temp"
      (774819 'move' call_tmp[774816](774770 call chpl_checkLegalTypeFieldAccessor this[774757] call_tmp[774811] "eltType"))
      (774797 'move' ret[774792](774796 'deref' call_tmp[774816]))
      gotoReturn _end_eltType[774790] _end_eltType[774790]
      (774787 'end of statement' borrowOfThis[774759])
    }
    {
      (774802 'move' ret[774792](774801 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774790] _end_eltType[774790]
    }
    label _end_eltType[774790]
    (774794 return ret[774792])
  }
  function BitwiseXorReduceScanOp[774755](?).eltType[774821](arg _mt[774823]:_MT[238], arg this[774825]:BitwiseXorReduceScanOp[774755](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774860] "RVV" "temp" "type variable"
    unknown borrowOfThis[774827] "type variable"
    (774852 'end of statement')
    (774829 'move' borrowOfThis[774827](774832 call _cast _borrowedNonNilable[214](?) this[774825]))
    (774853 'end of statement' borrowOfThis[774827])
    unknown call_tmp[774874] "expr temp" "maybe param" "maybe type" "temp"
    (774877 'move' call_tmp[774874](774842 'is bound' borrowOfThis[774827] c"eltType"))
    if call_tmp[774874]
    {
      unknown call_tmp[774879] "expr temp" "maybe param" "maybe type" "temp"
      (774882 'move' call_tmp[774879](774837 '.v' borrowOfThis[774827] c"eltType"))
      unknown call_tmp[774884] "expr temp" "maybe param" "maybe type" "temp"
      (774887 'move' call_tmp[774884](774838 call chpl_checkLegalTypeFieldAccessor this[774825] call_tmp[774879] "eltType"))
      (774865 'move' ret[774860](774864 'deref' call_tmp[774884]))
      gotoReturn _end_eltType[774858] _end_eltType[774858]
      (774855 'end of statement' borrowOfThis[774827])
    }
    {
      (774870 'move' ret[774860](774869 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774858] _end_eltType[774858]
    }
    label _end_eltType[774858]
    (774862 return ret[774860])
  }
  function BitwiseXorReduceScanOp[83781](?).value[774889](arg _mt[774891]:_MT[238], arg this[774893]:BitwiseXorReduceScanOp[83781](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774903] "RVV" "temp"
    unknown call_tmp[774910] "expr temp" "maybe param" "maybe type" "temp"
    (774913 'move' call_tmp[774910](774897 '.' this[774893] c"value"))
    (774908 'move' ret[774903](774907 'addr of' call_tmp[774910]))
    (774905 return ret[774903])
  }
  function BitwiseXorReduceScanOp[83781](?).init[774915](arg _mt[774917]:_MT[238], arg this[774918]:BitwiseXorReduceScanOp[83781](?), in arg l[774931]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[774934]:_any[178](?), in arg value[774943] :
  (774950 call _bxor_id eltType[774934]) =
  (774945 call _bxor_id eltType[774934])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[774962] "temporary of super field" "temp"
    (774964 'move' super_tmp[774962](774961 '.v' this[774918] c"super"))
    (774928 call(774926 call (partial) init _mt[243] super_tmp[774962]) l[774931])
    (774991 'end of statement')
    unknown tmp[774967] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[774995] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[775007] "expr temp" "maybe param" "maybe type" "temp"
      (775010 'move' call_tmp[775007](774969 '.v' this[774918] c"super"))
      (774999 'move' call_type_tmp[774995](774972 'typeof' call_tmp[775007]))
    }
    (774973 'move' tmp[774967] call_type_tmp[774995])
    unknown call_tmp[775012] "maybe param" "maybe type" "temp"
    (775015 'move' call_tmp[775012](774978 'cast' tmp[774967] this[774918]))
    unknown chpl__thisAsParent[774975] "dead at end of block" "insert auto destroy" "temp"
    (775003 'init var' chpl__thisAsParent[774975] call_tmp[775012] tmp[774967])
    (774981 'setcid' chpl__thisAsParent[774975])
    (774983 'init field' this[774918] c"eltType" eltType[774934])
    (774992 'end of statement')
    (774986 '.=' this[774918] c"value" value[774943])
    (774993 'end of statement')
    (774989 'setcid' this[774918])
    (775001 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).deinit[775017](arg _mt[775019]:_MT[238], arg this[775021]:BitwiseXorReduceScanOp[83781](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (775029 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).writeThis[775031](arg _mt[775035]:_MT[238], arg this[775033]:BitwiseXorReduceScanOp[83781](?), arg f[775034]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775040 call writeThisDefaultImpl f[775034] this[775033])
    (775045 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).readThis[775047](arg _mt[775051]:_MT[238], arg this[775049]:BitwiseXorReduceScanOp[83781](?), arg f[775050]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775055 call readThisDefaultImpl f[775050] this[775049])
    (775061 return _void[55])
  }
  type BitwiseXorReduceScanOp[83781](?) val super[355669]:ReduceScanOp[82300] "super class" unknown eltType[83682] "type variable" unknown value[83689](83688 call _bxor_id eltType[83682])
  type BitwiseXorReduceScanOp[774755](?)
  type BitwiseXorReduceScanOp[376794](?)
  function _maxloc_id[83812](arg eltType[83810]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512610] "RVV" "temp"
    unknown call_tmp[629562] "expr temp" "maybe param" "maybe type" "temp"
    (629565 'move' call_tmp[629562](83818 call eltType[83810] 0))
    unknown call_tmp[629567] "expr temp" "maybe param" "maybe type" "temp"
    (629570 'move' call_tmp[629567](83820 call min call_tmp[629562]))
    unknown call_tmp[629572] "expr temp" "maybe param" "maybe type" "temp"
    (629575 'move' call_tmp[629572](83825 call eltType[83810] 1))
    unknown call_tmp[629577] "expr temp" "maybe param" "maybe type" "temp"
    (629580 'move' call_tmp[629577](83827 call max call_tmp[629572]))
    unknown call_tmp[629582] "expr temp" "maybe param" "maybe type" "temp"
    (629585 'move' call_tmp[629582](83829 call _build_tuple call_tmp[629567] call_tmp[629577]))
    (512615 'move' ret[512610](512614 'deref' call_tmp[629582]))
    (512612 return ret[512610])
  }
  function _minloc_id[83840](arg eltType[83838]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512619] "RVV" "temp"
    unknown call_tmp[629587] "expr temp" "maybe param" "maybe type" "temp"
    (629590 'move' call_tmp[629587](83845 call max eltType[83838]))
    (512624 'move' ret[512619](512623 'deref' call_tmp[629587]))
    (512621 return ret[512619])
  }
  function maxloc[84026](?).identity[83867](arg _mt[84030]:_MT[238], arg this[84028]:maxloc[84026](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512628] "RVV" "temp"
    unknown call_tmp[629594] "expr temp" "maybe param" "maybe type" "temp"
    (629597 'move' call_tmp[629594](376808 call eltType _mt[243] this[84028]))
    unknown call_tmp[629599] "expr temp" "maybe param" "maybe type" "temp"
    (629602 'move' call_tmp[629599](83872 call _maxloc_id call_tmp[629594]))
    (512633 'move' ret[512628](512632 'deref' call_tmp[629599]))
    (512630 return ret[512628])
  }
  function maxloc[84026](?).accumulate[83882](arg _mt[84034]:_MT[238], arg this[84032]:maxloc[84026](?), arg x[83880]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629608] "expr temp" "maybe param" "maybe type" "temp"
    (629611 'move' call_tmp[629608](376817 call value _mt[243] this[84032]))
    (83888 call(376812 call (partial) accumulateOntoState _mt[243] this[84032]) call_tmp[629608] x[83880])
    (512635 return _void[55])
  }
  function maxloc[84026](?).accumulateOntoState[83897](arg _mt[84038]:_MT[238], arg this[84036]:maxloc[84026](?), ref arg state[83895]:_any[178](?), arg x[83899]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421861] "maybe param" "temp"
    unknown tmp[421882] "maybe param" "temp"
    unknown call_tmp[629613] "expr temp" "maybe param" "maybe type" "temp"
    (629616 'move' call_tmp[629613](83904 call x[83899] 0))
    unknown call_tmp[629618] "expr temp" "maybe param" "maybe type" "temp"
    (629621 'move' call_tmp[629618](83908 call state[83895] 0))
    (421893 'move' tmp[421882](83909 call > call_tmp[629613] call_tmp[629618]))
    unknown call_tmp[629623] "expr temp" "maybe param" "maybe type" "temp"
    (629626 'move' call_tmp[629623](421895 call _cond_invalid tmp[421882]))
    if call_tmp[629623]
    {
      (421898 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560334] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560335] "maybe param" "temp"
    unknown call_tmp[629628] "expr temp" "maybe param" "maybe type" "temp"
    (629631 'move' call_tmp[629628](421883 call isTrue tmp[421882]))
    (560340 'move' tmp[560335](560338 call _cond_test call_tmp[629628]))
    if tmp[560335]
    {
      (560345 'move' tmp[560334](560342 '_paramFoldLogical' tmp[560335] 1))
    }
    {
      unknown tmp[421903] "maybe param" "temp"
      unknown call_tmp[629633] "expr temp" "maybe param" "maybe type" "temp"
      (629636 'move' call_tmp[629633](83914 call x[83899] 0))
      unknown call_tmp[629638] "expr temp" "maybe param" "maybe type" "temp"
      (629641 'move' call_tmp[629638](83918 call state[83895] 0))
      (421914 'move' tmp[421903](83919 call == call_tmp[629633] call_tmp[629638]))
      unknown call_tmp[629643] "expr temp" "maybe param" "maybe type" "temp"
      (629646 'move' call_tmp[629643](421916 call _cond_invalid tmp[421903]))
      if call_tmp[629643]
      {
        (421919 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560307] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560308] "maybe param" "temp"
      unknown call_tmp[629648] "expr temp" "maybe param" "maybe type" "temp"
      (629651 'move' call_tmp[629648](421904 call isTrue tmp[421903]))
      (560313 'move' tmp[560308](560311 call _cond_test call_tmp[629648]))
      if tmp[560308]
      {
        unknown tmp[560315] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629653] "expr temp" "maybe param" "maybe type" "temp"
        (629656 'move' call_tmp[629653](83924 call x[83899] 1))
        unknown call_tmp[629658] "expr temp" "maybe param" "maybe type" "temp"
        (629661 'move' call_tmp[629658](83928 call state[83895] 1))
        unknown call_tmp[629663] "expr temp" "maybe param" "maybe type" "temp"
        (629666 'move' call_tmp[629663](83929 call < call_tmp[629653] call_tmp[629658]))
        (560317 'move' tmp[560315](421907 call isTrue call_tmp[629663]))
        (560322 'move' tmp[560307](560319 '_paramFoldLogical' tmp[560308] tmp[560315]))
      }
      {
        (560327 'move' tmp[560307](560324 '_paramFoldLogical' tmp[560308] 0))
      }
      unknown tmp[560347] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560349 'move' tmp[560347](421887 call isTrue tmp[560307]))
      (560354 'move' tmp[560334](560351 '_paramFoldLogical' tmp[560335] tmp[560347]))
    }
    (421872 'move' tmp[421861] tmp[560334])
    unknown call_tmp[629668] "expr temp" "maybe param" "maybe type" "temp"
    (629671 'move' call_tmp[629668](421874 call _cond_invalid tmp[421861]))
    if call_tmp[629668]
    {
      (421877 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560415] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560416] "maybe param" "temp"
    unknown call_tmp[629673] "expr temp" "maybe param" "maybe type" "temp"
    (629676 'move' call_tmp[629673](421862 call isTrue tmp[421861]))
    (560421 'move' tmp[560416](560419 call _cond_test call_tmp[629673]))
    if tmp[560416]
    {
      (560426 'move' tmp[560415](560423 '_paramFoldLogical' tmp[560416] 1))
    }
    {
      unknown tmp[421924] "maybe param" "temp"
      unknown call_tmp[629678] "expr temp" "maybe param" "maybe type" "temp"
      (629681 'move' call_tmp[629678](83939 call x[83899] 0))
      (421935 'move' tmp[421924](83941 call gotNaN call_tmp[629678]))
      unknown call_tmp[629683] "expr temp" "maybe param" "maybe type" "temp"
      (629686 'move' call_tmp[629683](421937 call _cond_invalid tmp[421924]))
      if call_tmp[629683]
      {
        (421940 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560388] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560389] "maybe param" "temp"
      unknown call_tmp[629688] "expr temp" "maybe param" "maybe type" "temp"
      (629691 'move' call_tmp[629688](421925 call isTrue tmp[421924]))
      (560394 'move' tmp[560389](560392 call _cond_test call_tmp[629688]))
      if tmp[560389]
      {
        unknown tmp[421945] "maybe param" "temp"
        unknown call_tmp[629693] "expr temp" "maybe param" "maybe type" "temp"
        (629696 'move' call_tmp[629693](83946 call state[83895] 0))
        unknown call_tmp[629698] "expr temp" "maybe param" "maybe type" "temp"
        (629701 'move' call_tmp[629698](83948 call gotNaN call_tmp[629693]))
        (421956 'move' tmp[421945](83949 call ! call_tmp[629698]))
        unknown call_tmp[629703] "expr temp" "maybe param" "maybe type" "temp"
        (629706 'move' call_tmp[629703](421958 call _cond_invalid tmp[421945]))
        if call_tmp[629703]
        {
          (421961 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560361] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560362] "maybe param" "temp"
        unknown call_tmp[629708] "expr temp" "maybe param" "maybe type" "temp"
        (629711 'move' call_tmp[629708](421946 call isTrue tmp[421945]))
        (560367 'move' tmp[560362](560365 call _cond_test call_tmp[629708]))
        if tmp[560362]
        {
          (560372 'move' tmp[560361](560369 '_paramFoldLogical' tmp[560362] 1))
        }
        {
          unknown tmp[560374] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629713] "expr temp" "maybe param" "maybe type" "temp"
          (629716 'move' call_tmp[629713](83954 call x[83899] 1))
          unknown call_tmp[629718] "expr temp" "maybe param" "maybe type" "temp"
          (629721 'move' call_tmp[629718](83958 call state[83895] 1))
          unknown call_tmp[629723] "expr temp" "maybe param" "maybe type" "temp"
          (629726 'move' call_tmp[629723](83959 call < call_tmp[629713] call_tmp[629718]))
          (560376 'move' tmp[560374](421950 call isTrue call_tmp[629723]))
          (560381 'move' tmp[560361](560378 '_paramFoldLogical' tmp[560362] tmp[560374]))
        }
        unknown tmp[560396] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560398 'move' tmp[560396](421928 call isTrue tmp[560361]))
        (560403 'move' tmp[560388](560400 '_paramFoldLogical' tmp[560389] tmp[560396]))
      }
      {
        (560408 'move' tmp[560388](560405 '_paramFoldLogical' tmp[560389] 0))
      }
      unknown tmp[560428] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560430 'move' tmp[560428](421866 call isTrue tmp[560388]))
      (560435 'move' tmp[560415](560432 '_paramFoldLogical' tmp[560416] tmp[560428]))
    }
    unknown call_tmp[629728] "expr temp" "maybe param" "maybe type" "temp"
    (629731 'move' call_tmp[629728](83972 call _cond_test tmp[560415]))
    if call_tmp[629728]
    {
      (83969 call = state[83895] x[83899])
    }
    (512637 return _void[55])
  }
  function maxloc[84026](?).combine[83984](arg _mt[84042]:_MT[238], arg this[84040]:maxloc[84026](?), arg x[83982]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629737] "expr temp" "maybe param" "maybe type" "temp"
    (629740 'move' call_tmp[629737](376839 call value _mt[243] this[84040]))
    unknown call_tmp[629744] "expr temp" "maybe param" "maybe type" "temp"
    (629747 'move' call_tmp[629744](83990 call value _mt[243] x[83982]))
    (83993 call(376834 call (partial) accumulateOntoState _mt[243] this[84040]) call_tmp[629737] call_tmp[629744])
    (512639 return _void[55])
  }
  function maxloc[84026](?).generate[84000](arg _mt[84046]:_MT[238], arg this[84044]:maxloc[84026](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512643] "RVV" "temp"
    unknown call_tmp[629751] "expr temp" "maybe param" "maybe type" "temp"
    (629754 'move' call_tmp[629751](376844 call value _mt[243] this[84044]))
    (512648 'move' ret[512643](512647 'deref' call_tmp[629751]))
    (512645 return ret[512643])
  }
  function maxloc[84026](?).clone[84010](arg _mt[84050]:_MT[238], arg this[84048]:maxloc[84026](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512652] "RVV" "temp"
    unknown call_tmp[629758] "expr temp" "maybe param" "maybe type" "temp"
    (629761 'move' call_tmp[629758](376853 call eltType _mt[243] this[84048]))
    unknown call_tmp[629763] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629766 'move' call_tmp[629763](747864 'new' maxloc[376848](?)(eltType = call_tmp[629758])(_chpl_manager = unmanaged[220](?))))
    (512657 'move' ret[512652](512656 'deref' call_tmp[629763]))
    (512654 return ret[512652])
  }
  function maxloc[84026](?).super[775063](arg _mt[775065]:_MT[238], arg this[775067]:maxloc[84026](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775077] "RVV" "temp"
    unknown call_tmp[775084] "expr temp" "maybe param" "maybe type" "temp"
    (775087 'move' call_tmp[775084](775071 '.v' this[775067] c"super"))
    (775082 'move' ret[775077](775081 'deref' call_tmp[775084]))
    (775079 return ret[775077])
  }
  function maxloc[775094](?).eltType[775089](arg _mt[775091]:_MT[238], arg this[775096]:maxloc[775094](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775131] "RVV" "temp" "type variable"
    unknown borrowOfThis[775098]
    (775123 'end of statement')
    (775100 'move' borrowOfThis[775098](775103 call _cast _borrowedNonNilable[214](?) this[775096]))
    (775124 'end of statement' borrowOfThis[775098])
    unknown call_tmp[775145] "expr temp" "maybe param" "maybe type" "temp"
    (775148 'move' call_tmp[775145](775113 'is bound' borrowOfThis[775098] c"eltType"))
    if call_tmp[775145]
    {
      unknown call_tmp[775150] "expr temp" "maybe param" "maybe type" "temp"
      (775153 'move' call_tmp[775150](775108 '.v' borrowOfThis[775098] c"eltType"))
      unknown call_tmp[775155] "expr temp" "maybe param" "maybe type" "temp"
      (775158 'move' call_tmp[775155](775109 call chpl_checkLegalTypeFieldAccessor this[775096] call_tmp[775150] "eltType"))
      (775136 'move' ret[775131](775135 'deref' call_tmp[775155]))
      gotoReturn _end_eltType[775129] _end_eltType[775129]
      (775126 'end of statement' borrowOfThis[775098])
    }
    {
      (775141 'move' ret[775131](775140 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775129] _end_eltType[775129]
    }
    label _end_eltType[775129]
    (775133 return ret[775131])
  }
  function maxloc[775094](?).eltType[775160](arg _mt[775162]:_MT[238], arg this[775164]:maxloc[775094](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775199] "RVV" "temp" "type variable"
    unknown borrowOfThis[775166] "type variable"
    (775191 'end of statement')
    (775168 'move' borrowOfThis[775166](775171 call _cast _borrowedNonNilable[214](?) this[775164]))
    (775192 'end of statement' borrowOfThis[775166])
    unknown call_tmp[775213] "expr temp" "maybe param" "maybe type" "temp"
    (775216 'move' call_tmp[775213](775181 'is bound' borrowOfThis[775166] c"eltType"))
    if call_tmp[775213]
    {
      unknown call_tmp[775218] "expr temp" "maybe param" "maybe type" "temp"
      (775221 'move' call_tmp[775218](775176 '.v' borrowOfThis[775166] c"eltType"))
      unknown call_tmp[775223] "expr temp" "maybe param" "maybe type" "temp"
      (775226 'move' call_tmp[775223](775177 call chpl_checkLegalTypeFieldAccessor this[775164] call_tmp[775218] "eltType"))
      (775204 'move' ret[775199](775203 'deref' call_tmp[775223]))
      gotoReturn _end_eltType[775197] _end_eltType[775197]
      (775194 'end of statement' borrowOfThis[775166])
    }
    {
      (775209 'move' ret[775199](775208 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775197] _end_eltType[775197]
    }
    label _end_eltType[775197]
    (775201 return ret[775199])
  }
  function maxloc[84026](?).value[775228](arg _mt[775230]:_MT[238], arg this[775232]:maxloc[84026](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775242] "RVV" "temp"
    unknown call_tmp[775249] "expr temp" "maybe param" "maybe type" "temp"
    (775252 'move' call_tmp[775249](775236 '.' this[775232] c"value"))
    (775247 'move' ret[775242](775246 'addr of' call_tmp[775249]))
    (775244 return ret[775242])
  }
  function maxloc[84026](?).init[775254](arg _mt[775256]:_MT[238], arg this[775257]:maxloc[84026](?), in arg l[775270]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[775273]:_any[178](?), in arg value[775282] :
  (775289 call _maxloc_id eltType[775273]) =
  (775284 call _maxloc_id eltType[775273])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[775301] "temporary of super field" "temp"
    (775303 'move' super_tmp[775301](775300 '.v' this[775257] c"super"))
    (775267 call(775265 call (partial) init _mt[243] super_tmp[775301]) l[775270])
    (775330 'end of statement')
    unknown tmp[775306] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[775334] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[775346] "expr temp" "maybe param" "maybe type" "temp"
      (775349 'move' call_tmp[775346](775308 '.v' this[775257] c"super"))
      (775338 'move' call_type_tmp[775334](775311 'typeof' call_tmp[775346]))
    }
    (775312 'move' tmp[775306] call_type_tmp[775334])
    unknown call_tmp[775351] "maybe param" "maybe type" "temp"
    (775354 'move' call_tmp[775351](775317 'cast' tmp[775306] this[775257]))
    unknown chpl__thisAsParent[775314] "dead at end of block" "insert auto destroy" "temp"
    (775342 'init var' chpl__thisAsParent[775314] call_tmp[775351] tmp[775306])
    (775320 'setcid' chpl__thisAsParent[775314])
    (775322 'init field' this[775257] c"eltType" eltType[775273])
    (775331 'end of statement')
    (775325 '.=' this[775257] c"value" value[775282])
    (775332 'end of statement')
    (775328 'setcid' this[775257])
    (775340 return _void[55])
  }
  function maxloc[84026](?).deinit[775356](arg _mt[775358]:_MT[238], arg this[775360]:maxloc[84026](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (775368 return _void[55])
  }
  function maxloc[84026](?).writeThis[775370](arg _mt[775374]:_MT[238], arg this[775372]:maxloc[84026](?), arg f[775373]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775379 call writeThisDefaultImpl f[775373] this[775372])
    (775384 return _void[55])
  }
  function maxloc[84026](?).readThis[775386](arg _mt[775390]:_MT[238], arg this[775388]:maxloc[84026](?), arg f[775389]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775394 call readThisDefaultImpl f[775389] this[775388])
    (775400 return _void[55])
  }
  type maxloc[84026](?) val super[355671]:ReduceScanOp[82300] "super class" unknown eltType[83854] "type variable" unknown value[83861](83860 call _maxloc_id eltType[83854])
  type maxloc[775094](?)
  type maxloc[376848](?)
  function minloc[84228](?).identity[84069](arg _mt[84232]:_MT[238], arg this[84230]:minloc[84228](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512661] "RVV" "temp"
    unknown call_tmp[629770] "expr temp" "maybe param" "maybe type" "temp"
    (629773 'move' call_tmp[629770](376859 call eltType _mt[243] this[84230]))
    unknown call_tmp[629775] "expr temp" "maybe param" "maybe type" "temp"
    (629778 'move' call_tmp[629775](84074 call _minloc_id call_tmp[629770]))
    (512666 'move' ret[512661](512665 'deref' call_tmp[629775]))
    (512663 return ret[512661])
  }
  function minloc[84228](?).accumulate[84084](arg _mt[84236]:_MT[238], arg this[84234]:minloc[84228](?), arg x[84082]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629784] "expr temp" "maybe param" "maybe type" "temp"
    (629787 'move' call_tmp[629784](376868 call value _mt[243] this[84234]))
    (84090 call(376863 call (partial) accumulateOntoState _mt[243] this[84234]) call_tmp[629784] x[84082])
    (512668 return _void[55])
  }
  function minloc[84228](?).accumulateOntoState[84099](arg _mt[84240]:_MT[238], arg this[84238]:minloc[84228](?), ref arg state[84097]:_any[178](?), arg x[84101]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421966] "maybe param" "temp"
    unknown tmp[421987] "maybe param" "temp"
    unknown call_tmp[629789] "expr temp" "maybe param" "maybe type" "temp"
    (629792 'move' call_tmp[629789](84106 call x[84101] 0))
    unknown call_tmp[629794] "expr temp" "maybe param" "maybe type" "temp"
    (629797 'move' call_tmp[629794](84110 call state[84097] 0))
    (421998 'move' tmp[421987](84111 call < call_tmp[629789] call_tmp[629794]))
    unknown call_tmp[629799] "expr temp" "maybe param" "maybe type" "temp"
    (629802 'move' call_tmp[629799](422000 call _cond_invalid tmp[421987]))
    if call_tmp[629799]
    {
      (422003 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560469] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560470] "maybe param" "temp"
    unknown call_tmp[629804] "expr temp" "maybe param" "maybe type" "temp"
    (629807 'move' call_tmp[629804](421988 call isTrue tmp[421987]))
    (560475 'move' tmp[560470](560473 call _cond_test call_tmp[629804]))
    if tmp[560470]
    {
      (560480 'move' tmp[560469](560477 '_paramFoldLogical' tmp[560470] 1))
    }
    {
      unknown tmp[422008] "maybe param" "temp"
      unknown call_tmp[629809] "expr temp" "maybe param" "maybe type" "temp"
      (629812 'move' call_tmp[629809](84116 call x[84101] 0))
      unknown call_tmp[629814] "expr temp" "maybe param" "maybe type" "temp"
      (629817 'move' call_tmp[629814](84120 call state[84097] 0))
      (422019 'move' tmp[422008](84121 call == call_tmp[629809] call_tmp[629814]))
      unknown call_tmp[629819] "expr temp" "maybe param" "maybe type" "temp"
      (629822 'move' call_tmp[629819](422021 call _cond_invalid tmp[422008]))
      if call_tmp[629819]
      {
        (422024 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560442] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560443] "maybe param" "temp"
      unknown call_tmp[629824] "expr temp" "maybe param" "maybe type" "temp"
      (629827 'move' call_tmp[629824](422009 call isTrue tmp[422008]))
      (560448 'move' tmp[560443](560446 call _cond_test call_tmp[629824]))
      if tmp[560443]
      {
        unknown tmp[560450] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629829] "expr temp" "maybe param" "maybe type" "temp"
        (629832 'move' call_tmp[629829](84126 call x[84101] 1))
        unknown call_tmp[629834] "expr temp" "maybe param" "maybe type" "temp"
        (629837 'move' call_tmp[629834](84130 call state[84097] 1))
        unknown call_tmp[629839] "expr temp" "maybe param" "maybe type" "temp"
        (629842 'move' call_tmp[629839](84131 call < call_tmp[629829] call_tmp[629834]))
        (560452 'move' tmp[560450](422012 call isTrue call_tmp[629839]))
        (560457 'move' tmp[560442](560454 '_paramFoldLogical' tmp[560443] tmp[560450]))
      }
      {
        (560462 'move' tmp[560442](560459 '_paramFoldLogical' tmp[560443] 0))
      }
      unknown tmp[560482] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560484 'move' tmp[560482](421992 call isTrue tmp[560442]))
      (560489 'move' tmp[560469](560486 '_paramFoldLogical' tmp[560470] tmp[560482]))
    }
    (421977 'move' tmp[421966] tmp[560469])
    unknown call_tmp[629844] "expr temp" "maybe param" "maybe type" "temp"
    (629847 'move' call_tmp[629844](421979 call _cond_invalid tmp[421966]))
    if call_tmp[629844]
    {
      (421982 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560550] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560551] "maybe param" "temp"
    unknown call_tmp[629849] "expr temp" "maybe param" "maybe type" "temp"
    (629852 'move' call_tmp[629849](421967 call isTrue tmp[421966]))
    (560556 'move' tmp[560551](560554 call _cond_test call_tmp[629849]))
    if tmp[560551]
    {
      (560561 'move' tmp[560550](560558 '_paramFoldLogical' tmp[560551] 1))
    }
    {
      unknown tmp[422029] "maybe param" "temp"
      unknown call_tmp[629854] "expr temp" "maybe param" "maybe type" "temp"
      (629857 'move' call_tmp[629854](84141 call x[84101] 0))
      (422040 'move' tmp[422029](84143 call gotNaN call_tmp[629854]))
      unknown call_tmp[629859] "expr temp" "maybe param" "maybe type" "temp"
      (629862 'move' call_tmp[629859](422042 call _cond_invalid tmp[422029]))
      if call_tmp[629859]
      {
        (422045 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560523] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560524] "maybe param" "temp"
      unknown call_tmp[629864] "expr temp" "maybe param" "maybe type" "temp"
      (629867 'move' call_tmp[629864](422030 call isTrue tmp[422029]))
      (560529 'move' tmp[560524](560527 call _cond_test call_tmp[629864]))
      if tmp[560524]
      {
        unknown tmp[422050] "maybe param" "temp"
        unknown call_tmp[629869] "expr temp" "maybe param" "maybe type" "temp"
        (629872 'move' call_tmp[629869](84148 call state[84097] 0))
        unknown call_tmp[629874] "expr temp" "maybe param" "maybe type" "temp"
        (629877 'move' call_tmp[629874](84150 call gotNaN call_tmp[629869]))
        (422061 'move' tmp[422050](84151 call ! call_tmp[629874]))
        unknown call_tmp[629879] "expr temp" "maybe param" "maybe type" "temp"
        (629882 'move' call_tmp[629879](422063 call _cond_invalid tmp[422050]))
        if call_tmp[629879]
        {
          (422066 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560496] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560497] "maybe param" "temp"
        unknown call_tmp[629884] "expr temp" "maybe param" "maybe type" "temp"
        (629887 'move' call_tmp[629884](422051 call isTrue tmp[422050]))
        (560502 'move' tmp[560497](560500 call _cond_test call_tmp[629884]))
        if tmp[560497]
        {
          (560507 'move' tmp[560496](560504 '_paramFoldLogical' tmp[560497] 1))
        }
        {
          unknown tmp[560509] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629889] "expr temp" "maybe param" "maybe type" "temp"
          (629892 'move' call_tmp[629889](84156 call x[84101] 1))
          unknown call_tmp[629894] "expr temp" "maybe param" "maybe type" "temp"
          (629897 'move' call_tmp[629894](84160 call state[84097] 1))
          unknown call_tmp[629899] "expr temp" "maybe param" "maybe type" "temp"
          (629902 'move' call_tmp[629899](84161 call < call_tmp[629889] call_tmp[629894]))
          (560511 'move' tmp[560509](422055 call isTrue call_tmp[629899]))
          (560516 'move' tmp[560496](560513 '_paramFoldLogical' tmp[560497] tmp[560509]))
        }
        unknown tmp[560531] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560533 'move' tmp[560531](422033 call isTrue tmp[560496]))
        (560538 'move' tmp[560523](560535 '_paramFoldLogical' tmp[560524] tmp[560531]))
      }
      {
        (560543 'move' tmp[560523](560540 '_paramFoldLogical' tmp[560524] 0))
      }
      unknown tmp[560563] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560565 'move' tmp[560563](421971 call isTrue tmp[560523]))
      (560570 'move' tmp[560550](560567 '_paramFoldLogical' tmp[560551] tmp[560563]))
    }
    unknown call_tmp[629904] "expr temp" "maybe param" "maybe type" "temp"
    (629907 'move' call_tmp[629904](84174 call _cond_test tmp[560550]))
    if call_tmp[629904]
    {
      (84171 call = state[84097] x[84101])
    }
    (512670 return _void[55])
  }
  function minloc[84228](?).combine[84186](arg _mt[84244]:_MT[238], arg this[84242]:minloc[84228](?), arg x[84184]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629913] "expr temp" "maybe param" "maybe type" "temp"
    (629916 'move' call_tmp[629913](376890 call value _mt[243] this[84242]))
    unknown call_tmp[629920] "expr temp" "maybe param" "maybe type" "temp"
    (629923 'move' call_tmp[629920](84192 call value _mt[243] x[84184]))
    (84195 call(376885 call (partial) accumulateOntoState _mt[243] this[84242]) call_tmp[629913] call_tmp[629920])
    (512672 return _void[55])
  }
  function minloc[84228](?).generate[84202](arg _mt[84248]:_MT[238], arg this[84246]:minloc[84228](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512676] "RVV" "temp"
    unknown call_tmp[629927] "expr temp" "maybe param" "maybe type" "temp"
    (629930 'move' call_tmp[629927](376895 call value _mt[243] this[84246]))
    (512681 'move' ret[512676](512680 'deref' call_tmp[629927]))
    (512678 return ret[512676])
  }
  function minloc[84228](?).clone[84212](arg _mt[84252]:_MT[238], arg this[84250]:minloc[84228](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512685] "RVV" "temp"
    unknown call_tmp[629934] "expr temp" "maybe param" "maybe type" "temp"
    (629937 'move' call_tmp[629934](376904 call eltType _mt[243] this[84250]))
    unknown call_tmp[629939] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629942 'move' call_tmp[629939](747865 'new' minloc[376899](?)(eltType = call_tmp[629934])(_chpl_manager = unmanaged[220](?))))
    (512690 'move' ret[512685](512689 'deref' call_tmp[629939]))
    (512687 return ret[512685])
  }
  function minloc[84228](?).super[775402](arg _mt[775404]:_MT[238], arg this[775406]:minloc[84228](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775416] "RVV" "temp"
    unknown call_tmp[775423] "expr temp" "maybe param" "maybe type" "temp"
    (775426 'move' call_tmp[775423](775410 '.v' this[775406] c"super"))
    (775421 'move' ret[775416](775420 'deref' call_tmp[775423]))
    (775418 return ret[775416])
  }
  function minloc[775433](?).eltType[775428](arg _mt[775430]:_MT[238], arg this[775435]:minloc[775433](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775470] "RVV" "temp" "type variable"
    unknown borrowOfThis[775437]
    (775462 'end of statement')
    (775439 'move' borrowOfThis[775437](775442 call _cast _borrowedNonNilable[214](?) this[775435]))
    (775463 'end of statement' borrowOfThis[775437])
    unknown call_tmp[775484] "expr temp" "maybe param" "maybe type" "temp"
    (775487 'move' call_tmp[775484](775452 'is bound' borrowOfThis[775437] c"eltType"))
    if call_tmp[775484]
    {
      unknown call_tmp[775489] "expr temp" "maybe param" "maybe type" "temp"
      (775492 'move' call_tmp[775489](775447 '.v' borrowOfThis[775437] c"eltType"))
      unknown call_tmp[775494] "expr temp" "maybe param" "maybe type" "temp"
      (775497 'move' call_tmp[775494](775448 call chpl_checkLegalTypeFieldAccessor this[775435] call_tmp[775489] "eltType"))
      (775475 'move' ret[775470](775474 'deref' call_tmp[775494]))
      gotoReturn _end_eltType[775468] _end_eltType[775468]
      (775465 'end of statement' borrowOfThis[775437])
    }
    {
      (775480 'move' ret[775470](775479 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775468] _end_eltType[775468]
    }
    label _end_eltType[775468]
    (775472 return ret[775470])
  }
  function minloc[775433](?).eltType[775499](arg _mt[775501]:_MT[238], arg this[775503]:minloc[775433](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775538] "RVV" "temp" "type variable"
    unknown borrowOfThis[775505] "type variable"
    (775530 'end of statement')
    (775507 'move' borrowOfThis[775505](775510 call _cast _borrowedNonNilable[214](?) this[775503]))
    (775531 'end of statement' borrowOfThis[775505])
    unknown call_tmp[775552] "expr temp" "maybe param" "maybe type" "temp"
    (775555 'move' call_tmp[775552](775520 'is bound' borrowOfThis[775505] c"eltType"))
    if call_tmp[775552]
    {
      unknown call_tmp[775557] "expr temp" "maybe param" "maybe type" "temp"
      (775560 'move' call_tmp[775557](775515 '.v' borrowOfThis[775505] c"eltType"))
      unknown call_tmp[775562] "expr temp" "maybe param" "maybe type" "temp"
      (775565 'move' call_tmp[775562](775516 call chpl_checkLegalTypeFieldAccessor this[775503] call_tmp[775557] "eltType"))
      (775543 'move' ret[775538](775542 'deref' call_tmp[775562]))
      gotoReturn _end_eltType[775536] _end_eltType[775536]
      (775533 'end of statement' borrowOfThis[775505])
    }
    {
      (775548 'move' ret[775538](775547 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775536] _end_eltType[775536]
    }
    label _end_eltType[775536]
    (775540 return ret[775538])
  }
  function minloc[84228](?).value[775567](arg _mt[775569]:_MT[238], arg this[775571]:minloc[84228](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775581] "RVV" "temp"
    unknown call_tmp[775588] "expr temp" "maybe param" "maybe type" "temp"
    (775591 'move' call_tmp[775588](775575 '.' this[775571] c"value"))
    (775586 'move' ret[775581](775585 'addr of' call_tmp[775588]))
    (775583 return ret[775581])
  }
  function minloc[84228](?).init[775593](arg _mt[775595]:_MT[238], arg this[775596]:minloc[84228](?), in arg l[775609]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[775612]:_any[178](?), in arg value[775621] :
  (775628 call _minloc_id eltType[775612]) =
  (775623 call _minloc_id eltType[775612])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[775640] "temporary of super field" "temp"
    (775642 'move' super_tmp[775640](775639 '.v' this[775596] c"super"))
    (775606 call(775604 call (partial) init _mt[243] super_tmp[775640]) l[775609])
    (775669 'end of statement')
    unknown tmp[775645] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[775673] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[775685] "expr temp" "maybe param" "maybe type" "temp"
      (775688 'move' call_tmp[775685](775647 '.v' this[775596] c"super"))
      (775677 'move' call_type_tmp[775673](775650 'typeof' call_tmp[775685]))
    }
    (775651 'move' tmp[775645] call_type_tmp[775673])
    unknown call_tmp[775690] "maybe param" "maybe type" "temp"
    (775693 'move' call_tmp[775690](775656 'cast' tmp[775645] this[775596]))
    unknown chpl__thisAsParent[775653] "dead at end of block" "insert auto destroy" "temp"
    (775681 'init var' chpl__thisAsParent[775653] call_tmp[775690] tmp[775645])
    (775659 'setcid' chpl__thisAsParent[775653])
    (775661 'init field' this[775596] c"eltType" eltType[775612])
    (775670 'end of statement')
    (775664 '.=' this[775596] c"value" value[775621])
    (775671 'end of statement')
    (775667 'setcid' this[775596])
    (775679 return _void[55])
  }
  function minloc[84228](?).deinit[775695](arg _mt[775697]:_MT[238], arg this[775699]:minloc[84228](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (775707 return _void[55])
  }
  function minloc[84228](?).writeThis[775709](arg _mt[775713]:_MT[238], arg this[775711]:minloc[84228](?), arg f[775712]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775718 call writeThisDefaultImpl f[775712] this[775711])
    (775723 return _void[55])
  }
  function minloc[84228](?).readThis[775725](arg _mt[775729]:_MT[238], arg this[775727]:minloc[84228](?), arg f[775728]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775733 call readThisDefaultImpl f[775728] this[775727])
    (775739 return _void[55])
  }
  type minloc[84228](?) val super[355673]:ReduceScanOp[82300] "super class" unknown eltType[84056] "type variable" unknown value[84063](84062 call _minloc_id eltType[84056])
  type minloc[775433](?)
  type minloc[376899](?)
  function gotNaN[84259](arg value[84257]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[512694] "RVV" "temp"
    unknown call_tmp[629944] "expr temp" "maybe param" "maybe type" "temp"
    (629947 'move' call_tmp[629944](84268 call isnan value[84257]))
    (512699 'move' ret[512694](512698 'deref' call_tmp[629944]))
    (512696 return ret[512694])
  }
  where {
    (84264 call isReal value[84257])
  }
  function gotNaN[84279](arg value[84277]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512703] "RVV" "param" "temp"
    (512708 'move' ret[512703](512707 'deref' 0))
    (512705 return ret[512703])
  }
  (355098 'used modules list'(81780 'use' ChapelStandard[20267])(81784 'use' ChapelLocks[187302]))
}