AST dump for ChapelReduce after pass createTaskFunctions.
Module use list: ChapelStandard ChapelLocks Reflection 

{
  function chpl__init_ChapelReduce[415992]() : void[4] "insert line file info" "module init"
  {
    (512705 return _void[55])
  }
  function chpl__scanStateResTypesMatch[81790](arg op[81788]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512166] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[491956] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628567] "expr temp" "maybe param" "maybe type" "temp"
      (628570 'move' call_tmp[628567](81799 call(81795 call (partial) generate _mt[243] op[81788])))
      (491960 'move' call_type_tmp[491956](81800 'typeof' call_tmp[628567]))
    }
    unknown resType[81801] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[491956]
    (541502 'move' resType[81801] call_type_tmp[491956])
    (476720 'end of statement')
    { scopeless type
      unknown call_type_tmp[491962] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628574] "expr temp" "maybe param" "maybe type" "temp"
      (628577 'move' call_tmp[628574](81808 call identity _mt[243] op[81788]))
      (491966 'move' call_type_tmp[491962](81811 'typeof' call_tmp[628574]))
    }
    unknown stateType[81812] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[491962]
    (541505 'move' stateType[81812] call_type_tmp[491962])
    (476721 'end of statement')
    unknown call_tmp[628579] "expr temp" "maybe param" "maybe type" "temp"
    (628582 'move' call_tmp[628579](81817 call == resType[81801] stateType[81812]))
    (512171 'move' ret[512166](512170 'deref' call_tmp[628579]))
    gotoReturn _end_chpl__scanStateResTypesMatch[512164] _end_chpl__scanStateResTypesMatch[512164]
    (476722 'end of statement' resType[81801] stateType[81812])
    label _end_chpl__scanStateResTypesMatch[512164]
    (512168 return ret[512166])
  }
  function chpl__scanIteratorZip[81827](arg op[81825]:_any[178](?), arg data[81829]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512177] "RVV" "temp"
    (81850 call compilerWarning "scan has been serialized (see issue #12482)")
    (476725 'end of statement')
    unknown arr[81868] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter1[581522](arg iterator[581524]:_any[178](?), arg op[581560]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[581571] "RVV" "temp"
      {
        unknown _indexOfInterest[581529] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[581530] "expr temp" "temp"
        (581539 'move' _iterator[581530](581537 call _getIteratorZip iterator[581524]))
        Defer
        {
          {
            (581553 call _freeIterator _iterator[581530])
          }
        }
        { scopeless type
          (581544 'move' _indexOfInterest[581529](581541 call iteratorIndex _iterator[581530]))
        }
        ForLoop[581531] for-expr
        {
          unknown d[81866] "index var" "insert auto destroy" "no doc"
          (581564 'end of statement')
          (581548 'move' d[81866] _indexOfInterest[581529])
          (581565 'end of statement' d[81866])
          {
            {
              unknown yret[581575] "YVV" "temp"
              unknown call_tmp[581582] "expr temp" "maybe param" "maybe type" "temp"
              (581585 'move' call_tmp[581582](81862 call chpl__accumgen op[581560] d[81866]))
              (581578 'move' yret[581575](581577 'deref' call_tmp[581582]))
              (581580 yield yret[581575])
              (581567 'end of statement' d[81866])
            }
          }
          label _continueLabel[581534]
          _indexOfInterest[581529]
          _iterator[581530]
        }
        label _breakLabel[581535]
      }
      (581573 return ret[581571])
    }
    function chpl__forexpr1[581502](arg iterExpr[581505]:_any[178](?), arg op[581509]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[581590] "RVV" "temp"
      unknown _iterator[581512] "expr temp" "maybe ref" "temp"
      (581514 'move' _iterator[581512] iterExpr[581505])
      unknown call_tmp[581597] "expr temp" "maybe param" "maybe type" "temp"
      (581600 'move' call_tmp[581597](581517 call chpl__loopexpr_iter1 _iterator[581512] op[581509]))
      (581595 'move' ret[581590](581594 'deref' call_tmp[581597]))
      (581592 return ret[581590])
    }
    unknown call_tmp[581602] "expr temp" "maybe param" "maybe type" "temp"
    (581605 'move' call_tmp[581602](81857 call _build_tuple(81855 'expand_tuple' data[81829])))
    unknown call_tmp[581607] "maybe param" "maybe type" "temp"
    (581610 'move' call_tmp[581607](581507 call chpl__forexpr1 call_tmp[581602] op[81825]))
    (581615 'iterator record set shape' call_tmp[581607](581613 'expand_tuple' data[81829]) 1)
    (541507 'init var' arr[81868] call_tmp[581607])
    (81871 'end of statement')
    (81874 call chpl__delete op[81825])
    (476726 'end of statement')
    (512182 'move' ret[512177](512181 'deref' arr[81868]))
    gotoReturn _end_chpl__scanIteratorZip[512175] _end_chpl__scanIteratorZip[512175]
    (476727 'end of statement' arr[81868])
    label _end_chpl__scanIteratorZip[512175]
    (512179 return ret[512177])
  }
  function chpl__scanIterator[81886](arg op[81884]:_any[178](?), arg data[81888]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512188] "RVV" "temp"
    unknown tmp[421688] "maybe param" "temp"
    (421699 'move' tmp[421688](81897 call isArray data[81888]))
    unknown call_tmp[628584] "expr temp" "maybe param" "maybe type" "temp"
    (628587 'move' call_tmp[628584](421701 call _cond_invalid tmp[421688]))
    if call_tmp[628584]
    {
      (421704 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown supportsPar[81922] "dead at end of block" "param"
    unknown tmp[560075] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560076] "maybe param" "temp"
    unknown call_tmp[628589] "expr temp" "maybe param" "maybe type" "temp"
    (628592 'move' call_tmp[628589](421689 call isTrue tmp[421688]))
    (560081 'move' tmp[560076](560079 call _cond_test call_tmp[628589]))
    if tmp[560076]
    {
      unknown tmp[560083] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628594] "expr temp" "maybe param" "maybe type" "temp"
      (628597 'move' call_tmp[628594](81919 call canResolveMethod data[81888] "_scan" op[81884]))
      (560085 'move' tmp[560083](421692 call isTrue call_tmp[628594]))
      (560090 'move' tmp[560075](560087 '_paramFoldLogical' tmp[560076] tmp[560083]))
    }
    {
      (560095 'move' tmp[560075](560092 '_paramFoldLogical' tmp[560076] 0))
    }
    (541509 'init var' supportsPar[81922] tmp[560075])
    (81925 'end of statement')
    unknown call_tmp[628599] "expr temp" "maybe param" "maybe type" "temp"
    (628602 'move' call_tmp[628599](81966 call _cond_test supportsPar[81922]))
    if call_tmp[628599]
    {
      unknown call_tmp[628606] "expr temp" "maybe param" "maybe type" "temp"
      (628609 'move' call_tmp[628606](81933 call(81928 call (partial) _scan _mt[243] data[81888]) op[81884]))
      (512193 'move' ret[512188](512192 'deref' call_tmp[628606]))
      gotoReturn _end_chpl__scanIterator[512186] _end_chpl__scanIterator[512186]
    }
    {
      (81940 call compilerWarning "scan has been serialized (see issue #12482)")
      (476731 'end of statement')
      unknown arr[81954] "dead at end of block" "insert auto destroy"
      function chpl__loopexpr_iter2[581637](arg iterator[581639]:_any[178](?), arg op[581675]:_any[178](?)) : _unknown[51] "iterator fn"
      {
        unknown ret[581686] "RVV" "temp"
        {
          unknown _indexOfInterest[581644] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[581645] "expr temp" "temp"
          (581654 'move' _iterator[581645](581652 call _getIterator iterator[581639]))
          Defer
          {
            {
              (581668 call _freeIterator _iterator[581645])
            }
          }
          { scopeless type
            (581659 'move' _indexOfInterest[581644](581656 call iteratorIndex _iterator[581645]))
          }
          ForLoop[581646] for-expr
          {
            unknown d[81952] "index var" "insert auto destroy" "no doc"
            (581679 'end of statement')
            (581663 'move' d[81952] _indexOfInterest[581644])
            (581680 'end of statement' d[81952])
            {
              {
                unknown yret[581690] "YVV" "temp"
                unknown call_tmp[581697] "expr temp" "maybe param" "maybe type" "temp"
                (581700 'move' call_tmp[581697](81949 call chpl__accumgen op[581675] d[81952]))
                (581693 'move' yret[581690](581692 'deref' call_tmp[581697]))
                (581695 yield yret[581690])
                (581682 'end of statement' d[81952])
              }
            }
            label _continueLabel[581649]
            _indexOfInterest[581644]
            _iterator[581645]
          }
          label _breakLabel[581650]
        }
        (581688 return ret[581686])
      }
      function chpl__forexpr2[581617](arg iterExpr[581620]:_any[178](?), arg op[581624]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
      {
        unknown ret[581705] "RVV" "temp"
        unknown _iterator[581627] "expr temp" "maybe ref" "temp"
        (581629 'move' _iterator[581627] iterExpr[581620])
        unknown call_tmp[581712] "expr temp" "maybe param" "maybe type" "temp"
        (581715 'move' call_tmp[581712](581632 call chpl__loopexpr_iter2 _iterator[581627] op[581624]))
        (581710 'move' ret[581705](581709 'deref' call_tmp[581712]))
        (581707 return ret[581705])
      }
      unknown call_tmp[581717] "maybe param" "maybe type" "temp"
      (581720 'move' call_tmp[581717](581622 call chpl__forexpr2 data[81888] op[81884]))
      (581724 'iterator record set shape' call_tmp[581717] data[81888] 1)
      (541511 'init var' arr[81954] call_tmp[581717])
      (81957 'end of statement')
      (81960 call chpl__delete op[81884])
      (476732 'end of statement')
      (512198 'move' ret[512188](512197 'deref' arr[81954]))
      gotoReturn _end_chpl__scanIterator[512186] _end_chpl__scanIterator[512186]
      (476733 'end of statement' arr[81954])
    }
    label _end_chpl__scanIterator[512186]
    (512190 return ret[512188])
    (355098 'used modules list'(81891 'use' Reflection[224901]))
  }
  function chpl__accumgen[81976](arg op[81974]:_any[178](?), arg d[81978]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512204] "RVV" "temp"
    (81988 call(81983 call (partial) accumulate _mt[243] op[81974]) d[81978])
    (476735 'end of statement')
    unknown call_tmp[628615] "expr temp" "maybe param" "maybe type" "temp"
    (628618 'move' call_tmp[628615](81996 call(81992 call (partial) generate _mt[243] op[81974])))
    (512209 'move' ret[512204](512208 'deref' call_tmp[628615]))
    (512206 return ret[512204])
  }
  function chpl__reduceCombine[82005](arg globalOp[82003]:_any[178](?), arg localOp[82007]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[82050] "const" "temp"
    unknown call_tmp[628620] "expr temp" "maybe param" "maybe type" "temp"
    (628623 'move' call_tmp[628620](82047 '_wide_get_locale' globalOp[82003]))
    (82052 'move' tmp[82050](82048 'deref' call_tmp[628620]))
    (934401 call on_fn[934397] tmp[82050])
    function on_fn[934397](const in arg dummy_locale_arg[934399]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown call_tmp[628627] "expr temp" "maybe param" "maybe type" "temp"
        (628630 'move' call_tmp[628627](82013 call l _mt[243] globalOp[82003]))
        (82022 call(82018 call (partial) lock _mt[243] call_tmp[628627]))
        (476737 'end of statement')
        (82033 call(82028 call (partial) combine _mt[243] globalOp[82003]) localOp[82007])
        (476738 'end of statement')
        unknown call_tmp[628638] "expr temp" "maybe param" "maybe type" "temp"
        (628641 'move' call_tmp[628638](82036 call l _mt[243] globalOp[82003]))
        (82045 call(82041 call (partial) unlock _mt[243] call_tmp[628638]))
      }
      (934404 return _void[55])
    }
    {
    }
    (512211 return _void[55])
  }
  function chpl__cleanupLocalOp[82065](arg globalOp[82063]:_any[178](?), arg localOp[82067]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (82071 call chpl__delete localOp[82067])
    (512213 return _void[55])
  }
  function chpl_sumTypeIsSame[82081](arg eltType[82079]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512217] "RVV" "param" "temp"
    unknown tmp[421709] "maybe param" "temp"
    (421720 'move' tmp[421709](82086 call isNumeric eltType[82079]))
    unknown call_tmp[628645] "expr temp" "maybe param" "maybe type" "temp"
    (628648 'move' call_tmp[628645](421722 call _cond_invalid tmp[421709]))
    if call_tmp[628645]
    {
      (421725 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560102] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560103] "maybe param" "temp"
    unknown call_tmp[628650] "expr temp" "maybe param" "maybe type" "temp"
    (628653 'move' call_tmp[628650](421710 call isTrue tmp[421709]))
    (560108 'move' tmp[560103](560106 call _cond_test call_tmp[628650]))
    if tmp[560103]
    {
      (560113 'move' tmp[560102](560110 '_paramFoldLogical' tmp[560103] 1))
    }
    {
      unknown tmp[560115] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628655] "expr temp" "maybe param" "maybe type" "temp"
      (628658 'move' call_tmp[628655](82090 call isString eltType[82079]))
      (560117 'move' tmp[560115](421714 call isTrue call_tmp[628655]))
      (560122 'move' tmp[560102](560119 '_paramFoldLogical' tmp[560103] tmp[560115]))
    }
    unknown call_tmp[628660] "expr temp" "maybe param" "maybe type" "temp"
    (628663 'move' call_tmp[628660](82163 call _cond_test tmp[560102]))
    if call_tmp[628660]
    {
      (512222 'move' ret[512217](512221 'deref' 1))
      gotoReturn _end_chpl_sumTypeIsSame[512215] _end_chpl_sumTypeIsSame[512215]
    }
    {
      unknown call_tmp[628665] "expr temp" "maybe param" "maybe type" "temp"
      (628668 'move' call_tmp[628665](82100 call isDomain eltType[82079]))
      unknown call_tmp[628670] "expr temp" "maybe param" "maybe type" "temp"
      (628673 'move' call_tmp[628670](82158 call _cond_test call_tmp[628665]))
      if call_tmp[628670]
      {
        unknown d[82102] "dead at end of block" "insert auto destroy"
        (541513 'default init var' d[82102] eltType[82079])
        (82105 'end of statement')
        unknown call_tmp[628675] "expr temp" "maybe param" "maybe type" "temp"
        (628678 'move' call_tmp[628675](82110 call isAssociativeDom d[82102]))
        (512227 'move' ret[512217](512226 'deref' call_tmp[628675]))
        gotoReturn _end_chpl_sumTypeIsSame[512215] _end_chpl_sumTypeIsSame[512215]
        (476743 'end of statement' d[82102])
      }
      {
        unknown call_tmp[628680] "expr temp" "maybe param" "maybe type" "temp"
        (628683 'move' call_tmp[628680](82116 call isArray eltType[82079]))
        unknown call_tmp[628685] "expr temp" "maybe param" "maybe type" "temp"
        (628688 'move' call_tmp[628685](82154 call _cond_test call_tmp[628680]))
        if call_tmp[628685]
        {
          unknown arrInstType[82122] "dead at end of block" "insert auto destroy" "type variable"(82121 'static field type' eltType[82079] "_instance")
          (541518 'move' arrInstType[82122](541515 'static field type' eltType[82079] "_instance"))
          unknown instanceObj[82128] "dead at end of block" "insert auto destroy"
          unknown call_tmp[628690] "expr temp" "maybe param" "maybe type" "temp"
          (628693 'move' call_tmp[628690](82127 'to nilable class from type' arrInstType[82122]))
          (541520 'default init var' instanceObj[82128] call_tmp[628690])
          (82131 'end of statement' arrInstType[82122])
          unknown call_tmp[628695] "expr temp" "maybe param" "maybe type" "temp"
          (628698 'move' call_tmp[628695](82135 call postfix! instanceObj[82128]))
          unknown call_tmp[628702] "expr temp" "maybe param" "maybe type" "temp"
          (628705 'move' call_tmp[628702](82137 call eltType _mt[243] call_tmp[628695]))
          unknown instanceEltType[82141] "dead at end of block" "insert auto destroy" "type variable"(82140 'static typeof' call_tmp[628702])
          unknown call_tmp[628707] "expr temp" "maybe param" "maybe type" "temp"
          (628710 'move' call_tmp[628707](541526 call postfix! instanceObj[82128]))
          unknown call_tmp[628714] "expr temp" "maybe param" "maybe type" "temp"
          (628717 'move' call_tmp[628714](541524 call eltType _mt[243] call_tmp[628707]))
          (541529 'move' instanceEltType[82141](541522 'static typeof' call_tmp[628714]))
          (476746 'end of statement' instanceObj[82128])
          unknown call_tmp[628719] "expr temp" "maybe param" "maybe type" "temp"
          (628722 'move' call_tmp[628719](82147 call chpl_sumTypeIsSame instanceEltType[82141]))
          (512232 'move' ret[512217](512231 'deref' call_tmp[628719]))
          gotoReturn _end_chpl_sumTypeIsSame[512215] _end_chpl_sumTypeIsSame[512215]
          (476748 'end of statement' instanceEltType[82141])
        }
        {
          (512237 'move' ret[512217](512236 'deref' 0))
          gotoReturn _end_chpl_sumTypeIsSame[512215] _end_chpl_sumTypeIsSame[512215]
        }
      }
    }
    label _end_chpl_sumTypeIsSame[512215]
    (512219 return ret[512217])
  }
  function chpl__sumType[82175](arg eltType[82173]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[512243] "RVV" "temp" "type variable"
    unknown call_tmp[628724] "expr temp" "maybe param" "maybe type" "temp"
    (628727 'move' call_tmp[628724](82180 call chpl_sumTypeIsSame eltType[82173]))
    unknown call_tmp[628729] "expr temp" "maybe param" "maybe type" "temp"
    (628732 'move' call_tmp[628729](82286 call _cond_test call_tmp[628724]))
    if call_tmp[628729]
    {
      (512248 'move' ret[512243](512247 'deref' eltType[82173]))
      gotoReturn _end_chpl__sumType[512241] _end_chpl__sumType[512241]
    }
    {
      unknown x[82186] "dead at end of block" "insert auto destroy"
      (541531 'default init var' x[82186] eltType[82173])
      (82189 'end of statement')
      unknown call_tmp[628734] "expr temp" "maybe param" "maybe type" "temp"
      (628737 'move' call_tmp[628734](82194 call isArray x[82186]))
      unknown call_tmp[628739] "expr temp" "maybe param" "maybe type" "temp"
      (628742 'move' call_tmp[628739](82282 call _cond_test call_tmp[628734]))
      if call_tmp[628739]
      {
        unknown xET[82199] "dead at end of block" "insert auto destroy" "type variable"(82196 call eltType _mt[243] x[82186])
        (541537 'move' xET[82199](541534 call eltType _mt[243] x[82186]))
        (476752 'end of statement' x[82186])
        unknown xST[82207] "dead at end of block" "insert auto destroy" "type variable"(82206 call chpl__sumType xET[82199])
        (541542 'move' xST[82207](541540 call chpl__sumType xET[82199]))
        (476754 'end of statement' xET[82199])
        unknown call_tmp[628748] "expr temp" "maybe param" "maybe type" "temp"
        (628751 'move' call_tmp[628748](82212 call == xET[82199] xST[82207]))
        unknown call_tmp[628753] "expr temp" "maybe param" "maybe type" "temp"
        (628756 'move' call_tmp[628753](82227 call _cond_test call_tmp[628748]))
        if call_tmp[628753]
        {
          (512253 'move' ret[512243](512252 'deref' eltType[82173]))
          gotoReturn _end_chpl__sumType[512241] _end_chpl__sumType[512241]
        }
        {
          function chpl__loopexpr_iter3[581813](arg iterator[581815]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[581953] "RVV" "temp"
            {
              unknown _indexOfInterest[581820] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581821] "expr temp" "temp"
              (581830 'move' _iterator[581821](581828 call _getIterator iterator[581815]))
              Defer
              {
                {
                  (581847 call _freeIterator _iterator[581821])
                }
              }
              { scopeless type
                (581835 'move' _indexOfInterest[581820](581832 call iteratorIndex _iterator[581821]))
              }
              ForLoop[581822] for-expr
              {
                unknown chpl__elidedIdx[581840] "index var" "insert auto destroy"
                (581947 'end of statement')
                (581842 'move' chpl__elidedIdx[581840] _indexOfInterest[581820])
                (581948 'end of statement' chpl__elidedIdx[581840])
                {
                  {
                    unknown yret[581957] "YVV" "temp"
                    (581960 'move' yret[581957](581959 'deref' xST[82207]))
                    (581962 yield yret[581957])
                  }
                }
                label _continueLabel[581825]
                _indexOfInterest[581820]
                _iterator[581821]
              }
              label _breakLabel[581826]
            }
            (581955 return ret[581953])
          }
          function chpl__loopexpr_iter3[581854](param arg tag[581858]:iterKind[453], arg iterator[581861]:_any[178](?)) : _unknown[51] "fn returns iterator"
          {
            unknown ret[581989] "RVV" "temp"
            const _leaderIterator[581873] "const" "expr temp" "temp"
            (581878 'move' _leaderIterator[581873](581875 call _toLeader iterator[581861]))
            (581994 'move' ret[581989](581993 'deref' _leaderIterator[581873]))
            (581991 return ret[581989])
          }
          where {
            unknown tmp[581965] "maybe param" "temp"
            (581976 'move' tmp[581965](581863 call == tag[581858] leader[447]))
            unknown call_tmp[582023] "expr temp" "maybe param" "maybe type" "temp"
            (582026 'move' call_tmp[582023](581978 call _cond_invalid tmp[581965]))
            if call_tmp[582023]
            {
              (581981 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[581996] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[581997] "maybe param" "temp"
            unknown call_tmp[582028] "expr temp" "maybe param" "maybe type" "temp"
            (582031 'move' call_tmp[582028](581966 call isTrue tmp[581965]))
            (582002 'move' tmp[581997](582000 call _cond_test call_tmp[582028]))
            if tmp[581997]
            {
              unknown tmp[582004] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[582033] "expr temp" "maybe param" "maybe type" "temp"
              (582036 'move' call_tmp[582033](581867 'call resolves' "_toLeader" iterator[581861]))
              (582006 'move' tmp[582004](581969 call isTrue call_tmp[582033]))
              (582011 'move' tmp[581996](582008 '_paramFoldLogical' tmp[581997] tmp[582004]))
            }
            {
              (582016 'move' tmp[581996](582013 '_paramFoldLogical' tmp[581997] 0))
            }
            (748441 call chpl_statementLevelSymbol tmp[581996])
          }
          function chpl__loopexpr_iter3[581882](param arg tag[581886]:iterKind[453], arg followThis[581889]:_any[178](?), arg iterator[581891]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[582046] "RVV" "temp"
            const _followerIterator[581898] "const" "expr temp" "temp"
            (581904 'move' _followerIterator[581898](581900 call _toFollower iterator[581891] followThis[581889]))
            {
              unknown _indexOfInterest[581911] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581912] "expr temp" "temp"
              (581921 'move' _iterator[581912](581919 call _getIterator _followerIterator[581898]))
              Defer
              {
                {
                  (581938 call _freeIterator _iterator[581912])
                }
              }
              { scopeless type
                (581926 'move' _indexOfInterest[581911](581923 call iteratorIndex _iterator[581912]))
              }
              ForLoop[581913] lowered-forall for-expr
              {
                unknown chpl__elidedIdx[581931] "index var" "insert auto destroy"
                (582040 'end of statement')
                (581933 'move' chpl__elidedIdx[581931] _indexOfInterest[581911])
                (582041 'end of statement' chpl__elidedIdx[581931])
                {
                  {
                    unknown yret[582050] "YVV" "temp"
                    (582053 'move' yret[582050](582052 'deref' xST[82207]))
                    (582055 yield yret[582050])
                  }
                }
                label _continueLabel[581916]
                _indexOfInterest[581911]
                _iterator[581912]
              }
              label _breakLabel[581917]
            }
            (582048 return ret[582046])
          }
          where {
            (581894 call == tag[581886] follower[449])
          }
          function chpl__forallexpr3[581726](arg iterExpr[581729]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "maybe type" "fn returns iterator"
          {
            unknown ret[582067] "RVV" "maybe type" "temp"
            function _isArrayTypeFn[581735]() : _unknown[51] "inline"
            {
              unknown _iterator[581740] "temp"
              (581745 'move' _iterator[581740](581742 call _getIterator iterExpr[581729]))
              unknown _indexOfInterest[581747] "an _indexOfInterest or chpl__followIdx variable" "temp"
              (581752 'move' _indexOfInterest[581747](581749 call iteratorIndex _iterator[581740]))
              unknown chpl__elidedIdx[581758] "index var" "insert auto destroy"
              (582057 'end of statement')
              (581760 'move' chpl__elidedIdx[581758] _indexOfInterest[581747])
              (582058 'end of statement' chpl__elidedIdx[581758])
              unknown isType_result[581762] "param" "temp"
              {
                (581768 'move' isType_result[581762](581766 call isType xST[82207]))
              }
              if isType_result[581762]
              {
                (581771 'move' _isArrayType[581738] 1)
              }
              {
                (581774 'move' _isArrayType[581738] 0)
              }
              (582063 return _void[55])
            }
            unknown _isArrayType[581738] "maybe param" "temp"
            { scopeless type
              (581781 call _isArrayTypeFn[581735])
            }
            if _isArrayType[581738]
            {
              unknown _arrayType[581783] "expr temp" "maybe type" "temp"
              unknown _domain[581786] "expr temp" "no auto destroy" "temp"
              (581791 'move' _domain[581786](581788 call chpl__ensureDomainExpr iterExpr[581729]))
              {
                (581798 'move' _arrayType[581783](581795 call chpl__buildArrayRuntimeType _domain[581786] xST[82207]))
              }
              (582072 'move' ret[582067](582071 'deref' _arrayType[581783]))
              gotoReturn _end_chpl__forallexpr3[582065] _end_chpl__forallexpr3[582065]
            }
            {
              unknown _iterator[581804] "expr temp" "maybe ref" "temp"
              (581806 'move' _iterator[581804] iterExpr[581729])
              unknown call_tmp[582081] "expr temp" "maybe param" "maybe type" "temp"
              (582084 'move' call_tmp[582081](581809 call chpl__loopexpr_iter3 _iterator[581804]))
              (582077 'move' ret[582067](582076 'deref' call_tmp[582081]))
              gotoReturn _end_chpl__forallexpr3[582065] _end_chpl__forallexpr3[582065]
            }
            label _end_chpl__forallexpr3[582065]
            (582069 return ret[582067])
          }
          unknown call_tmp[582088] "expr temp" "maybe param" "maybe type" "temp"
          (582091 'move' call_tmp[582088](82218 call _dom _mt[243] x[82186]))
          unknown call_tmp[582093] "expr temp" "maybe param" "maybe type" "temp"
          (582096 'move' call_tmp[582093](581731 call chpl__forallexpr3 call_tmp[582088]))
          (582100 'iterator record set shape' call_tmp[582093] call_tmp[582088] 0)
          (512258 'move' ret[512243](512257 'deref' call_tmp[582093]))
          gotoReturn _end_chpl__sumType[512241] _end_chpl__sumType[512241]
          (476757 'end of statement' x[82186] xST[82207])
        }
      }
      {
        unknown call_tmp[628758] "expr temp" "maybe param" "maybe type" "temp"
        (628761 'move' call_tmp[628758](82242 call canResolve "+" x[82186] x[82186]))
        unknown call_tmp[628763] "expr temp" "maybe param" "maybe type" "temp"
        (628766 'move' call_tmp[628763](82243 call ! call_tmp[628758]))
        unknown call_tmp[628768] "expr temp" "maybe param" "maybe type" "temp"
        (628771 'move' call_tmp[628768](82270 call _cond_test call_tmp[628763]))
        if call_tmp[628768]
        {
          unknown call_tmp[628773] "expr temp" "maybe param" "maybe type" "temp"
          (628776 'move' call_tmp[628773](82266 call _cast string[26] eltType[82173]))
          (82268 call compilerError "+ reduce cannot be used on values of the type " call_tmp[628773])
        }
        { scopeless type
          unknown call_type_tmp[491968] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[628778] "expr temp" "maybe param" "maybe type" "temp"
          (628781 'move' call_tmp[628778](82277 call + x[82186] x[82186]))
          (491972 'move' call_type_tmp[491968](82279 'typeof' call_tmp[628778]))
        }
        (512263 'move' ret[512243](512262 'deref' call_type_tmp[491968]))
        gotoReturn _end_chpl__sumType[512241] _end_chpl__sumType[512241]
        (476761 'end of statement' x[82186] x[82186])
        (355100 'used modules list'(82234 'use' Reflection[224901]))
      }
    }
    label _end_chpl__sumType[512241]
    (512245 return ret[512243])
  }
  function ReduceScanOp[82300].super[771425](arg _mt[771427]:_MT[238], arg this[771429]:ReduceScanOp[82300]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771439] "RVV" "temp"
    unknown call_tmp[771446] "expr temp" "maybe param" "maybe type" "temp"
    (771449 'move' call_tmp[771446](771433 '.v' this[771429] c"super"))
    (771444 'move' ret[771439](771443 'deref' call_tmp[771446]))
    (771441 return ret[771439])
  }
  function ReduceScanOp[82300].l[771451](arg _mt[771453]:_MT[238], arg this[771455]:ReduceScanOp[82300]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771465] "RVV" "temp"
    unknown call_tmp[771472] "expr temp" "maybe param" "maybe type" "temp"
    (771475 'move' call_tmp[771472](771459 '.' this[771455] c"l"))
    (771470 'move' ret[771465](771469 'addr of' call_tmp[771472]))
    (771467 return ret[771465])
  }
  function ReduceScanOp[82300].init[771477](arg _mt[771479]:_MT[238], arg this[771480]:ReduceScanOp[82300], in arg l[771491]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250]) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[771506] "temporary of super field" "temp"
    (771508 'move' super_tmp[771506](771505 '.v' this[771480] c"super"))
    (771490 call(771488 call (partial) init _mt[243] super_tmp[771506]))
    (771532 'end of statement')
    unknown tmp[771511] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[771535] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[771547] "expr temp" "maybe param" "maybe type" "temp"
      (771550 'move' call_tmp[771547](771513 '.v' this[771480] c"super"))
      (771539 'move' call_type_tmp[771535](771516 'typeof' call_tmp[771547]))
    }
    (771517 'move' tmp[771511] call_type_tmp[771535])
    unknown call_tmp[771552] "maybe param" "maybe type" "temp"
    (771555 'move' call_tmp[771552](771522 'cast' tmp[771511] this[771480]))
    unknown chpl__thisAsParent[771519] "dead at end of block" "insert auto destroy" "temp"
    (771543 'init var' chpl__thisAsParent[771519] call_tmp[771552] tmp[771511])
    (771525 'setcid' chpl__thisAsParent[771519])
    (771527 'init field' this[771480] c"l" l[771491])
    (771533 'end of statement')
    (771530 'setcid' this[771480])
    (771541 return _void[55])
  }
  function ReduceScanOp[82300].deinit[771557](arg _mt[771559]:_MT[238], arg this[771561]:ReduceScanOp[82300]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (771569 return _void[55])
  }
  function ReduceScanOp[82300].writeThis[771571](arg _mt[771575]:_MT[238], arg this[771573]:ReduceScanOp[82300], arg f[771574]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771580 call writeThisDefaultImpl f[771574] this[771573])
    (771585 return _void[55])
  }
  function ReduceScanOp[82300].readThis[771587](arg _mt[771591]:_MT[238], arg this[771589]:ReduceScanOp[82300], arg f[771590]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771595 call readThisDefaultImpl f[771590] this[771589])
    (771601 return _void[55])
  }
  type ReduceScanOp[82300] val super[355646]:object[22] "super class" val l[82295]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432]
  function SumReduceScanOp[82412](?).identity[82319](arg _mt[82416]:_MT[238], arg this[82414]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[512269] "RVV" "temp"
    unknown x[82325] "dead at end of block" "insert auto destroy"
    unknown call_tmp[628785] "expr temp" "maybe param" "maybe type" "temp"
    (628788 'move' call_tmp[628785](376389 call eltType _mt[243] this[82414]))
    unknown call_tmp[628790] "expr temp" "maybe param" "maybe type" "temp"
    (628793 'move' call_tmp[628790](82324 call chpl__sumType call_tmp[628785]))
    (541544 'default init var' x[82325] call_tmp[628790])
    (82328 'end of statement')
    (512274 'move' ret[512269](512273 'deref' x[82325]))
    gotoReturn _end_identity[512267] _end_identity[512267]
    (476764 'end of statement' x[82325])
    label _end_identity[512267]
    (512271 return ret[512269])
  }
  function SumReduceScanOp[82412](?).accumulate[82339](arg _mt[82420]:_MT[238], arg this[82418]:SumReduceScanOp[82412](?), arg x[82337]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628797] "expr temp" "maybe param" "maybe type" "temp"
    (628800 'move' call_tmp[628797](376395 call value _mt[243] this[82418]))
    (82343 call += call_tmp[628797] x[82337])
    (512278 return _void[55])
  }
  function SumReduceScanOp[82412](?).accumulateOntoState[82353](arg _mt[82424]:_MT[238], arg this[82422]:SumReduceScanOp[82412](?), ref arg state[82351]:_any[178](?), arg x[82355]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82359 call += state[82351] x[82355])
    (512280 return _void[55])
  }
  function SumReduceScanOp[82412](?).combine[82369](arg _mt[82428]:_MT[238], arg this[82426]:SumReduceScanOp[82412](?), arg x[82367]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628804] "expr temp" "maybe param" "maybe type" "temp"
    (628807 'move' call_tmp[628804](376403 call value _mt[243] this[82426]))
    unknown call_tmp[628811] "expr temp" "maybe param" "maybe type" "temp"
    (628814 'move' call_tmp[628811](82375 call value _mt[243] x[82367]))
    (82378 call += call_tmp[628804] call_tmp[628811])
    (512282 return _void[55])
  }
  function SumReduceScanOp[82412](?).generate[82386](arg _mt[82432]:_MT[238], arg this[82430]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512286] "RVV" "temp"
    unknown call_tmp[628818] "expr temp" "maybe param" "maybe type" "temp"
    (628821 'move' call_tmp[628818](376408 call value _mt[243] this[82430]))
    (512291 'move' ret[512286](512290 'deref' call_tmp[628818]))
    (512288 return ret[512286])
  }
  function SumReduceScanOp[82412](?).clone[82396](arg _mt[82436]:_MT[238], arg this[82434]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512295] "RVV" "temp"
    unknown call_tmp[628825] "expr temp" "maybe param" "maybe type" "temp"
    (628828 'move' call_tmp[628825](376417 call eltType _mt[243] this[82434]))
    unknown call_tmp[628830] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628833 'move' call_tmp[628830](747813 'new' SumReduceScanOp[376412](?)(eltType = call_tmp[628825])(_chpl_manager = unmanaged[220](?))))
    (512300 'move' ret[512295](512299 'deref' call_tmp[628830]))
    (512297 return ret[512295])
  }
  function SumReduceScanOp[82412](?).super[771603](arg _mt[771605]:_MT[238], arg this[771607]:SumReduceScanOp[82412](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771617] "RVV" "temp"
    unknown call_tmp[771624] "expr temp" "maybe param" "maybe type" "temp"
    (771627 'move' call_tmp[771624](771611 '.v' this[771607] c"super"))
    (771622 'move' ret[771617](771621 'deref' call_tmp[771624]))
    (771619 return ret[771617])
  }
  function SumReduceScanOp[771634](?).eltType[771629](arg _mt[771631]:_MT[238], arg this[771636]:SumReduceScanOp[771634](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771671] "RVV" "temp" "type variable"
    unknown borrowOfThis[771638]
    (771663 'end of statement')
    (771640 'move' borrowOfThis[771638](771643 call _cast _borrowedNonNilable[214](?) this[771636]))
    (771664 'end of statement' borrowOfThis[771638])
    unknown call_tmp[771685] "expr temp" "maybe param" "maybe type" "temp"
    (771688 'move' call_tmp[771685](771653 'is bound' borrowOfThis[771638] c"eltType"))
    if call_tmp[771685]
    {
      unknown call_tmp[771690] "expr temp" "maybe param" "maybe type" "temp"
      (771693 'move' call_tmp[771690](771648 '.v' borrowOfThis[771638] c"eltType"))
      unknown call_tmp[771695] "expr temp" "maybe param" "maybe type" "temp"
      (771698 'move' call_tmp[771695](771649 call chpl_checkLegalTypeFieldAccessor this[771636] call_tmp[771690] "eltType"))
      (771676 'move' ret[771671](771675 'deref' call_tmp[771695]))
      gotoReturn _end_eltType[771669] _end_eltType[771669]
      (771666 'end of statement' borrowOfThis[771638])
    }
    {
      (771681 'move' ret[771671](771680 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[771669] _end_eltType[771669]
    }
    label _end_eltType[771669]
    (771673 return ret[771671])
  }
  function SumReduceScanOp[771634](?).eltType[771700](arg _mt[771702]:_MT[238], arg this[771704]:SumReduceScanOp[771634](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771739] "RVV" "temp" "type variable"
    unknown borrowOfThis[771706] "type variable"
    (771731 'end of statement')
    (771708 'move' borrowOfThis[771706](771711 call _cast _borrowedNonNilable[214](?) this[771704]))
    (771732 'end of statement' borrowOfThis[771706])
    unknown call_tmp[771753] "expr temp" "maybe param" "maybe type" "temp"
    (771756 'move' call_tmp[771753](771721 'is bound' borrowOfThis[771706] c"eltType"))
    if call_tmp[771753]
    {
      unknown call_tmp[771758] "expr temp" "maybe param" "maybe type" "temp"
      (771761 'move' call_tmp[771758](771716 '.v' borrowOfThis[771706] c"eltType"))
      unknown call_tmp[771763] "expr temp" "maybe param" "maybe type" "temp"
      (771766 'move' call_tmp[771763](771717 call chpl_checkLegalTypeFieldAccessor this[771704] call_tmp[771758] "eltType"))
      (771744 'move' ret[771739](771743 'deref' call_tmp[771763]))
      gotoReturn _end_eltType[771737] _end_eltType[771737]
      (771734 'end of statement' borrowOfThis[771706])
    }
    {
      (771749 'move' ret[771739](771748 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[771737] _end_eltType[771737]
    }
    label _end_eltType[771737]
    (771741 return ret[771739])
  }
  function SumReduceScanOp[82412](?).value[771768](arg _mt[771770]:_MT[238], arg this[771772]:SumReduceScanOp[82412](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771782] "RVV" "temp"
    unknown call_tmp[771789] "expr temp" "maybe param" "maybe type" "temp"
    (771792 'move' call_tmp[771789](771776 '.' this[771772] c"value"))
    (771787 'move' ret[771782](771786 'addr of' call_tmp[771789]))
    (771784 return ret[771782])
  }
  function SumReduceScanOp[82412](?).init[771794](arg _mt[771796]:_MT[238], arg this[771797]:SumReduceScanOp[82412](?), in arg l[771810]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[771813]:_any[178](?), in arg value[771822] :
  (771825 call chpl__sumType eltType[771813]) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[771839] "temporary of super field" "temp"
    (771841 'move' super_tmp[771839](771838 '.v' this[771797] c"super"))
    (771807 call(771805 call (partial) init _mt[243] super_tmp[771839]) l[771810])
    (771868 'end of statement')
    unknown tmp[771844] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[771872] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[771884] "expr temp" "maybe param" "maybe type" "temp"
      (771887 'move' call_tmp[771884](771846 '.v' this[771797] c"super"))
      (771876 'move' call_type_tmp[771872](771849 'typeof' call_tmp[771884]))
    }
    (771850 'move' tmp[771844] call_type_tmp[771872])
    unknown call_tmp[771889] "maybe param" "maybe type" "temp"
    (771892 'move' call_tmp[771889](771855 'cast' tmp[771844] this[771797]))
    unknown chpl__thisAsParent[771852] "dead at end of block" "insert auto destroy" "temp"
    (771880 'init var' chpl__thisAsParent[771852] call_tmp[771889] tmp[771844])
    (771858 'setcid' chpl__thisAsParent[771852])
    (771860 'init field' this[771797] c"eltType" eltType[771813])
    (771869 'end of statement')
    (771863 'init field' this[771797] c"value" value[771822])
    (771870 'end of statement')
    (771866 'setcid' this[771797])
    (771878 return _void[55])
  }
  function SumReduceScanOp[82412](?).deinit[771894](arg _mt[771896]:_MT[238], arg this[771898]:SumReduceScanOp[82412](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (771906 return _void[55])
  }
  function SumReduceScanOp[82412](?).writeThis[771908](arg _mt[771912]:_MT[238], arg this[771910]:SumReduceScanOp[82412](?), arg f[771911]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771917 call writeThisDefaultImpl f[771911] this[771910])
    (771922 return _void[55])
  }
  function SumReduceScanOp[82412](?).readThis[771924](arg _mt[771928]:_MT[238], arg this[771926]:SumReduceScanOp[82412](?), arg f[771927]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771932 call readThisDefaultImpl f[771927] this[771926])
    (771938 return _void[55])
  }
  type SumReduceScanOp[82412](?) val super[355648]:ReduceScanOp[82300] "super class" unknown eltType[82306] "type variable" unknown value[82313](82312 call chpl__sumType eltType[82306])
  type SumReduceScanOp[771634](?)
  type SumReduceScanOp[376412](?)
  function ProductReduceScanOp[82541](?).identity[82455](arg _mt[82545]:_MT[238], arg this[82543]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512304] "RVV" "temp"
    unknown call_tmp[628837] "expr temp" "maybe param" "maybe type" "temp"
    (628840 'move' call_tmp[628837](376423 call eltType _mt[243] this[82543]))
    unknown call_tmp[628842] "expr temp" "maybe param" "maybe type" "temp"
    (628845 'move' call_tmp[628842](82460 call _prod_id call_tmp[628837]))
    (512309 'move' ret[512304](512308 'deref' call_tmp[628842]))
    (512306 return ret[512304])
  }
  function ProductReduceScanOp[82541](?).accumulate[82470](arg _mt[82549]:_MT[238], arg this[82547]:ProductReduceScanOp[82541](?), arg x[82468]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628849] "expr temp" "maybe param" "maybe type" "temp"
    (628852 'move' call_tmp[628849](376428 call value _mt[243] this[82547]))
    (82474 call *= call_tmp[628849] x[82468])
    (512311 return _void[55])
  }
  function ProductReduceScanOp[82541](?).accumulateOntoState[82484](arg _mt[82553]:_MT[238], arg this[82551]:ProductReduceScanOp[82541](?), ref arg state[82482]:_any[178](?), arg x[82486]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82490 call *= state[82482] x[82486])
    (512313 return _void[55])
  }
  function ProductReduceScanOp[82541](?).combine[82500](arg _mt[82557]:_MT[238], arg this[82555]:ProductReduceScanOp[82541](?), arg x[82498]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628856] "expr temp" "maybe param" "maybe type" "temp"
    (628859 'move' call_tmp[628856](376436 call value _mt[243] this[82555]))
    unknown call_tmp[628863] "expr temp" "maybe param" "maybe type" "temp"
    (628866 'move' call_tmp[628863](82504 call value _mt[243] x[82498]))
    (82507 call *= call_tmp[628856] call_tmp[628863])
    (512315 return _void[55])
  }
  function ProductReduceScanOp[82541](?).generate[82515](arg _mt[82561]:_MT[238], arg this[82559]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512319] "RVV" "temp"
    unknown call_tmp[628870] "expr temp" "maybe param" "maybe type" "temp"
    (628873 'move' call_tmp[628870](376441 call value _mt[243] this[82559]))
    (512324 'move' ret[512319](512323 'deref' call_tmp[628870]))
    (512321 return ret[512319])
  }
  function ProductReduceScanOp[82541](?).clone[82525](arg _mt[82565]:_MT[238], arg this[82563]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512328] "RVV" "temp"
    unknown call_tmp[628877] "expr temp" "maybe param" "maybe type" "temp"
    (628880 'move' call_tmp[628877](376450 call eltType _mt[243] this[82563]))
    unknown call_tmp[628882] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628885 'move' call_tmp[628882](747814 'new' ProductReduceScanOp[376445](?)(eltType = call_tmp[628877])(_chpl_manager = unmanaged[220](?))))
    (512333 'move' ret[512328](512332 'deref' call_tmp[628882]))
    (512330 return ret[512328])
  }
  function ProductReduceScanOp[82541](?).super[771940](arg _mt[771942]:_MT[238], arg this[771944]:ProductReduceScanOp[82541](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771954] "RVV" "temp"
    unknown call_tmp[771961] "expr temp" "maybe param" "maybe type" "temp"
    (771964 'move' call_tmp[771961](771948 '.v' this[771944] c"super"))
    (771959 'move' ret[771954](771958 'deref' call_tmp[771961]))
    (771956 return ret[771954])
  }
  function ProductReduceScanOp[771971](?).eltType[771966](arg _mt[771968]:_MT[238], arg this[771973]:ProductReduceScanOp[771971](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772008] "RVV" "temp" "type variable"
    unknown borrowOfThis[771975]
    (772000 'end of statement')
    (771977 'move' borrowOfThis[771975](771980 call _cast _borrowedNonNilable[214](?) this[771973]))
    (772001 'end of statement' borrowOfThis[771975])
    unknown call_tmp[772022] "expr temp" "maybe param" "maybe type" "temp"
    (772025 'move' call_tmp[772022](771990 'is bound' borrowOfThis[771975] c"eltType"))
    if call_tmp[772022]
    {
      unknown call_tmp[772027] "expr temp" "maybe param" "maybe type" "temp"
      (772030 'move' call_tmp[772027](771985 '.v' borrowOfThis[771975] c"eltType"))
      unknown call_tmp[772032] "expr temp" "maybe param" "maybe type" "temp"
      (772035 'move' call_tmp[772032](771986 call chpl_checkLegalTypeFieldAccessor this[771973] call_tmp[772027] "eltType"))
      (772013 'move' ret[772008](772012 'deref' call_tmp[772032]))
      gotoReturn _end_eltType[772006] _end_eltType[772006]
      (772003 'end of statement' borrowOfThis[771975])
    }
    {
      (772018 'move' ret[772008](772017 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772006] _end_eltType[772006]
    }
    label _end_eltType[772006]
    (772010 return ret[772008])
  }
  function ProductReduceScanOp[771971](?).eltType[772037](arg _mt[772039]:_MT[238], arg this[772041]:ProductReduceScanOp[771971](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772076] "RVV" "temp" "type variable"
    unknown borrowOfThis[772043] "type variable"
    (772068 'end of statement')
    (772045 'move' borrowOfThis[772043](772048 call _cast _borrowedNonNilable[214](?) this[772041]))
    (772069 'end of statement' borrowOfThis[772043])
    unknown call_tmp[772090] "expr temp" "maybe param" "maybe type" "temp"
    (772093 'move' call_tmp[772090](772058 'is bound' borrowOfThis[772043] c"eltType"))
    if call_tmp[772090]
    {
      unknown call_tmp[772095] "expr temp" "maybe param" "maybe type" "temp"
      (772098 'move' call_tmp[772095](772053 '.v' borrowOfThis[772043] c"eltType"))
      unknown call_tmp[772100] "expr temp" "maybe param" "maybe type" "temp"
      (772103 'move' call_tmp[772100](772054 call chpl_checkLegalTypeFieldAccessor this[772041] call_tmp[772095] "eltType"))
      (772081 'move' ret[772076](772080 'deref' call_tmp[772100]))
      gotoReturn _end_eltType[772074] _end_eltType[772074]
      (772071 'end of statement' borrowOfThis[772043])
    }
    {
      (772086 'move' ret[772076](772085 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772074] _end_eltType[772074]
    }
    label _end_eltType[772074]
    (772078 return ret[772076])
  }
  function ProductReduceScanOp[82541](?).value[772105](arg _mt[772107]:_MT[238], arg this[772109]:ProductReduceScanOp[82541](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772119] "RVV" "temp"
    unknown call_tmp[772126] "expr temp" "maybe param" "maybe type" "temp"
    (772129 'move' call_tmp[772126](772113 '.' this[772109] c"value"))
    (772124 'move' ret[772119](772123 'addr of' call_tmp[772126]))
    (772121 return ret[772119])
  }
  function ProductReduceScanOp[82541](?).init[772131](arg _mt[772133]:_MT[238], arg this[772134]:ProductReduceScanOp[82541](?), in arg l[772147]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[772150]:_any[178](?), in arg value[772159] :
  (772166 call _prod_id eltType[772150]) =
  (772161 call _prod_id eltType[772150])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[772178] "temporary of super field" "temp"
    (772180 'move' super_tmp[772178](772177 '.v' this[772134] c"super"))
    (772144 call(772142 call (partial) init _mt[243] super_tmp[772178]) l[772147])
    (772207 'end of statement')
    unknown tmp[772183] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[772211] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[772223] "expr temp" "maybe param" "maybe type" "temp"
      (772226 'move' call_tmp[772223](772185 '.v' this[772134] c"super"))
      (772215 'move' call_type_tmp[772211](772188 'typeof' call_tmp[772223]))
    }
    (772189 'move' tmp[772183] call_type_tmp[772211])
    unknown call_tmp[772228] "maybe param" "maybe type" "temp"
    (772231 'move' call_tmp[772228](772194 'cast' tmp[772183] this[772134]))
    unknown chpl__thisAsParent[772191] "dead at end of block" "insert auto destroy" "temp"
    (772219 'init var' chpl__thisAsParent[772191] call_tmp[772228] tmp[772183])
    (772197 'setcid' chpl__thisAsParent[772191])
    (772199 'init field' this[772134] c"eltType" eltType[772150])
    (772208 'end of statement')
    (772202 '.=' this[772134] c"value" value[772159])
    (772209 'end of statement')
    (772205 'setcid' this[772134])
    (772217 return _void[55])
  }
  function ProductReduceScanOp[82541](?).deinit[772233](arg _mt[772235]:_MT[238], arg this[772237]:ProductReduceScanOp[82541](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (772245 return _void[55])
  }
  function ProductReduceScanOp[82541](?).writeThis[772247](arg _mt[772251]:_MT[238], arg this[772249]:ProductReduceScanOp[82541](?), arg f[772250]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772256 call writeThisDefaultImpl f[772250] this[772249])
    (772261 return _void[55])
  }
  function ProductReduceScanOp[82541](?).readThis[772263](arg _mt[772267]:_MT[238], arg this[772265]:ProductReduceScanOp[82541](?), arg f[772266]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772271 call readThisDefaultImpl f[772266] this[772265])
    (772277 return _void[55])
  }
  type ProductReduceScanOp[82541](?) val super[355650]:ReduceScanOp[82300] "super class" unknown eltType[82442] "type variable" unknown value[82449](82448 call _prod_id eltType[82442])
  type ProductReduceScanOp[771971](?)
  type ProductReduceScanOp[376445](?)
  function MaxReduceScanOp[82682](?).identity[82584](arg _mt[82686]:_MT[238], arg this[82684]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512337] "RVV" "temp"
    unknown call_tmp[628889] "expr temp" "maybe param" "maybe type" "temp"
    (628892 'move' call_tmp[628889](376456 call eltType _mt[243] this[82684]))
    unknown call_tmp[628894] "expr temp" "maybe param" "maybe type" "temp"
    (628897 'move' call_tmp[628894](82589 call min call_tmp[628889]))
    (512342 'move' ret[512337](512341 'deref' call_tmp[628894]))
    (512339 return ret[512337])
  }
  function MaxReduceScanOp[82682](?).accumulate[82599](arg _mt[82690]:_MT[238], arg this[82688]:MaxReduceScanOp[82682](?), arg x[82597]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628901] "expr temp" "maybe param" "maybe type" "temp"
    (628904 'move' call_tmp[628901](376461 call value _mt[243] this[82688]))
    unknown call_tmp[628908] "expr temp" "maybe param" "maybe type" "temp"
    (628911 'move' call_tmp[628908](376467 call value _mt[243] this[82688]))
    unknown call_tmp[628913] "expr temp" "maybe param" "maybe type" "temp"
    (628916 'move' call_tmp[628913](82606 call max x[82597] call_tmp[628908]))
    (82607 call = call_tmp[628901] call_tmp[628913])
    (512344 return _void[55])
  }
  function MaxReduceScanOp[82682](?).accumulateOntoState[82617](arg _mt[82694]:_MT[238], arg this[82692]:MaxReduceScanOp[82682](?), ref arg state[82615]:_any[178](?), arg x[82619]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628918] "expr temp" "maybe param" "maybe type" "temp"
    (628921 'move' call_tmp[628918](82626 call max state[82615] x[82619]))
    (82627 call = state[82615] call_tmp[628918])
    (512346 return _void[55])
  }
  function MaxReduceScanOp[82682](?).combine[82637](arg _mt[82698]:_MT[238], arg this[82696]:MaxReduceScanOp[82682](?), arg x[82635]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628925] "expr temp" "maybe param" "maybe type" "temp"
    (628928 'move' call_tmp[628925](376475 call value _mt[243] this[82696]))
    unknown call_tmp[628932] "expr temp" "maybe param" "maybe type" "temp"
    (628935 'move' call_tmp[628932](376480 call value _mt[243] this[82696]))
    unknown call_tmp[628939] "expr temp" "maybe param" "maybe type" "temp"
    (628942 'move' call_tmp[628939](82644 call value _mt[243] x[82635]))
    unknown call_tmp[628944] "expr temp" "maybe param" "maybe type" "temp"
    (628947 'move' call_tmp[628944](82647 call max call_tmp[628932] call_tmp[628939]))
    (82648 call = call_tmp[628925] call_tmp[628944])
    (512348 return _void[55])
  }
  function MaxReduceScanOp[82682](?).generate[82656](arg _mt[82702]:_MT[238], arg this[82700]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512352] "RVV" "temp"
    unknown call_tmp[628951] "expr temp" "maybe param" "maybe type" "temp"
    (628954 'move' call_tmp[628951](376485 call value _mt[243] this[82700]))
    (512357 'move' ret[512352](512356 'deref' call_tmp[628951]))
    (512354 return ret[512352])
  }
  function MaxReduceScanOp[82682](?).clone[82666](arg _mt[82706]:_MT[238], arg this[82704]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512361] "RVV" "temp"
    unknown call_tmp[628958] "expr temp" "maybe param" "maybe type" "temp"
    (628961 'move' call_tmp[628958](376494 call eltType _mt[243] this[82704]))
    unknown call_tmp[628963] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628966 'move' call_tmp[628963](747815 'new' MaxReduceScanOp[376489](?)(eltType = call_tmp[628958])(_chpl_manager = unmanaged[220](?))))
    (512366 'move' ret[512361](512365 'deref' call_tmp[628963]))
    (512363 return ret[512361])
  }
  function MaxReduceScanOp[82682](?).super[772279](arg _mt[772281]:_MT[238], arg this[772283]:MaxReduceScanOp[82682](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772293] "RVV" "temp"
    unknown call_tmp[772300] "expr temp" "maybe param" "maybe type" "temp"
    (772303 'move' call_tmp[772300](772287 '.v' this[772283] c"super"))
    (772298 'move' ret[772293](772297 'deref' call_tmp[772300]))
    (772295 return ret[772293])
  }
  function MaxReduceScanOp[772310](?).eltType[772305](arg _mt[772307]:_MT[238], arg this[772312]:MaxReduceScanOp[772310](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772347] "RVV" "temp" "type variable"
    unknown borrowOfThis[772314]
    (772339 'end of statement')
    (772316 'move' borrowOfThis[772314](772319 call _cast _borrowedNonNilable[214](?) this[772312]))
    (772340 'end of statement' borrowOfThis[772314])
    unknown call_tmp[772361] "expr temp" "maybe param" "maybe type" "temp"
    (772364 'move' call_tmp[772361](772329 'is bound' borrowOfThis[772314] c"eltType"))
    if call_tmp[772361]
    {
      unknown call_tmp[772366] "expr temp" "maybe param" "maybe type" "temp"
      (772369 'move' call_tmp[772366](772324 '.v' borrowOfThis[772314] c"eltType"))
      unknown call_tmp[772371] "expr temp" "maybe param" "maybe type" "temp"
      (772374 'move' call_tmp[772371](772325 call chpl_checkLegalTypeFieldAccessor this[772312] call_tmp[772366] "eltType"))
      (772352 'move' ret[772347](772351 'deref' call_tmp[772371]))
      gotoReturn _end_eltType[772345] _end_eltType[772345]
      (772342 'end of statement' borrowOfThis[772314])
    }
    {
      (772357 'move' ret[772347](772356 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772345] _end_eltType[772345]
    }
    label _end_eltType[772345]
    (772349 return ret[772347])
  }
  function MaxReduceScanOp[772310](?).eltType[772376](arg _mt[772378]:_MT[238], arg this[772380]:MaxReduceScanOp[772310](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772415] "RVV" "temp" "type variable"
    unknown borrowOfThis[772382] "type variable"
    (772407 'end of statement')
    (772384 'move' borrowOfThis[772382](772387 call _cast _borrowedNonNilable[214](?) this[772380]))
    (772408 'end of statement' borrowOfThis[772382])
    unknown call_tmp[772429] "expr temp" "maybe param" "maybe type" "temp"
    (772432 'move' call_tmp[772429](772397 'is bound' borrowOfThis[772382] c"eltType"))
    if call_tmp[772429]
    {
      unknown call_tmp[772434] "expr temp" "maybe param" "maybe type" "temp"
      (772437 'move' call_tmp[772434](772392 '.v' borrowOfThis[772382] c"eltType"))
      unknown call_tmp[772439] "expr temp" "maybe param" "maybe type" "temp"
      (772442 'move' call_tmp[772439](772393 call chpl_checkLegalTypeFieldAccessor this[772380] call_tmp[772434] "eltType"))
      (772420 'move' ret[772415](772419 'deref' call_tmp[772439]))
      gotoReturn _end_eltType[772413] _end_eltType[772413]
      (772410 'end of statement' borrowOfThis[772382])
    }
    {
      (772425 'move' ret[772415](772424 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772413] _end_eltType[772413]
    }
    label _end_eltType[772413]
    (772417 return ret[772415])
  }
  function MaxReduceScanOp[82682](?).value[772444](arg _mt[772446]:_MT[238], arg this[772448]:MaxReduceScanOp[82682](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772458] "RVV" "temp"
    unknown call_tmp[772465] "expr temp" "maybe param" "maybe type" "temp"
    (772468 'move' call_tmp[772465](772452 '.' this[772448] c"value"))
    (772463 'move' ret[772458](772462 'addr of' call_tmp[772465]))
    (772460 return ret[772458])
  }
  function MaxReduceScanOp[82682](?).init[772470](arg _mt[772472]:_MT[238], arg this[772473]:MaxReduceScanOp[82682](?), in arg l[772486]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[772489]:_any[178](?), in arg value[772498] :
  (772505 call min eltType[772489]) =
  (772500 call min eltType[772489])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[772517] "temporary of super field" "temp"
    (772519 'move' super_tmp[772517](772516 '.v' this[772473] c"super"))
    (772483 call(772481 call (partial) init _mt[243] super_tmp[772517]) l[772486])
    (772546 'end of statement')
    unknown tmp[772522] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[772550] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[772562] "expr temp" "maybe param" "maybe type" "temp"
      (772565 'move' call_tmp[772562](772524 '.v' this[772473] c"super"))
      (772554 'move' call_type_tmp[772550](772527 'typeof' call_tmp[772562]))
    }
    (772528 'move' tmp[772522] call_type_tmp[772550])
    unknown call_tmp[772567] "maybe param" "maybe type" "temp"
    (772570 'move' call_tmp[772567](772533 'cast' tmp[772522] this[772473]))
    unknown chpl__thisAsParent[772530] "dead at end of block" "insert auto destroy" "temp"
    (772558 'init var' chpl__thisAsParent[772530] call_tmp[772567] tmp[772522])
    (772536 'setcid' chpl__thisAsParent[772530])
    (772538 'init field' this[772473] c"eltType" eltType[772489])
    (772547 'end of statement')
    (772541 '.=' this[772473] c"value" value[772498])
    (772548 'end of statement')
    (772544 'setcid' this[772473])
    (772556 return _void[55])
  }
  function MaxReduceScanOp[82682](?).deinit[772572](arg _mt[772574]:_MT[238], arg this[772576]:MaxReduceScanOp[82682](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (772584 return _void[55])
  }
  function MaxReduceScanOp[82682](?).writeThis[772586](arg _mt[772590]:_MT[238], arg this[772588]:MaxReduceScanOp[82682](?), arg f[772589]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772595 call writeThisDefaultImpl f[772589] this[772588])
    (772600 return _void[55])
  }
  function MaxReduceScanOp[82682](?).readThis[772602](arg _mt[772606]:_MT[238], arg this[772604]:MaxReduceScanOp[82682](?), arg f[772605]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772610 call readThisDefaultImpl f[772605] this[772604])
    (772616 return _void[55])
  }
  type MaxReduceScanOp[82682](?) val super[355652]:ReduceScanOp[82300] "super class" unknown eltType[82571] "type variable" unknown value[82578](82577 call min eltType[82571])
  type MaxReduceScanOp[772310](?)
  type MaxReduceScanOp[376489](?)
  function MinReduceScanOp[82823](?).identity[82725](arg _mt[82827]:_MT[238], arg this[82825]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512370] "RVV" "temp"
    unknown call_tmp[628970] "expr temp" "maybe param" "maybe type" "temp"
    (628973 'move' call_tmp[628970](376500 call eltType _mt[243] this[82825]))
    unknown call_tmp[628975] "expr temp" "maybe param" "maybe type" "temp"
    (628978 'move' call_tmp[628975](82730 call max call_tmp[628970]))
    (512375 'move' ret[512370](512374 'deref' call_tmp[628975]))
    (512372 return ret[512370])
  }
  function MinReduceScanOp[82823](?).accumulate[82740](arg _mt[82831]:_MT[238], arg this[82829]:MinReduceScanOp[82823](?), arg x[82738]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628982] "expr temp" "maybe param" "maybe type" "temp"
    (628985 'move' call_tmp[628982](376505 call value _mt[243] this[82829]))
    unknown call_tmp[628989] "expr temp" "maybe param" "maybe type" "temp"
    (628992 'move' call_tmp[628989](376511 call value _mt[243] this[82829]))
    unknown call_tmp[628994] "expr temp" "maybe param" "maybe type" "temp"
    (628997 'move' call_tmp[628994](82747 call min x[82738] call_tmp[628989]))
    (82748 call = call_tmp[628982] call_tmp[628994])
    (512377 return _void[55])
  }
  function MinReduceScanOp[82823](?).accumulateOntoState[82758](arg _mt[82835]:_MT[238], arg this[82833]:MinReduceScanOp[82823](?), ref arg state[82756]:_any[178](?), arg x[82760]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628999] "expr temp" "maybe param" "maybe type" "temp"
    (629002 'move' call_tmp[628999](82767 call min state[82756] x[82760]))
    (82768 call = state[82756] call_tmp[628999])
    (512379 return _void[55])
  }
  function MinReduceScanOp[82823](?).combine[82778](arg _mt[82839]:_MT[238], arg this[82837]:MinReduceScanOp[82823](?), arg x[82776]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629006] "expr temp" "maybe param" "maybe type" "temp"
    (629009 'move' call_tmp[629006](376519 call value _mt[243] this[82837]))
    unknown call_tmp[629013] "expr temp" "maybe param" "maybe type" "temp"
    (629016 'move' call_tmp[629013](376524 call value _mt[243] this[82837]))
    unknown call_tmp[629020] "expr temp" "maybe param" "maybe type" "temp"
    (629023 'move' call_tmp[629020](82785 call value _mt[243] x[82776]))
    unknown call_tmp[629025] "expr temp" "maybe param" "maybe type" "temp"
    (629028 'move' call_tmp[629025](82788 call min call_tmp[629013] call_tmp[629020]))
    (82789 call = call_tmp[629006] call_tmp[629025])
    (512381 return _void[55])
  }
  function MinReduceScanOp[82823](?).generate[82797](arg _mt[82843]:_MT[238], arg this[82841]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512385] "RVV" "temp"
    unknown call_tmp[629032] "expr temp" "maybe param" "maybe type" "temp"
    (629035 'move' call_tmp[629032](376529 call value _mt[243] this[82841]))
    (512390 'move' ret[512385](512389 'deref' call_tmp[629032]))
    (512387 return ret[512385])
  }
  function MinReduceScanOp[82823](?).clone[82807](arg _mt[82847]:_MT[238], arg this[82845]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512394] "RVV" "temp"
    unknown call_tmp[629039] "expr temp" "maybe param" "maybe type" "temp"
    (629042 'move' call_tmp[629039](376538 call eltType _mt[243] this[82845]))
    unknown call_tmp[629044] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629047 'move' call_tmp[629044](747816 'new' MinReduceScanOp[376533](?)(eltType = call_tmp[629039])(_chpl_manager = unmanaged[220](?))))
    (512399 'move' ret[512394](512398 'deref' call_tmp[629044]))
    (512396 return ret[512394])
  }
  function MinReduceScanOp[82823](?).super[772618](arg _mt[772620]:_MT[238], arg this[772622]:MinReduceScanOp[82823](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772632] "RVV" "temp"
    unknown call_tmp[772639] "expr temp" "maybe param" "maybe type" "temp"
    (772642 'move' call_tmp[772639](772626 '.v' this[772622] c"super"))
    (772637 'move' ret[772632](772636 'deref' call_tmp[772639]))
    (772634 return ret[772632])
  }
  function MinReduceScanOp[772649](?).eltType[772644](arg _mt[772646]:_MT[238], arg this[772651]:MinReduceScanOp[772649](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772686] "RVV" "temp" "type variable"
    unknown borrowOfThis[772653]
    (772678 'end of statement')
    (772655 'move' borrowOfThis[772653](772658 call _cast _borrowedNonNilable[214](?) this[772651]))
    (772679 'end of statement' borrowOfThis[772653])
    unknown call_tmp[772700] "expr temp" "maybe param" "maybe type" "temp"
    (772703 'move' call_tmp[772700](772668 'is bound' borrowOfThis[772653] c"eltType"))
    if call_tmp[772700]
    {
      unknown call_tmp[772705] "expr temp" "maybe param" "maybe type" "temp"
      (772708 'move' call_tmp[772705](772663 '.v' borrowOfThis[772653] c"eltType"))
      unknown call_tmp[772710] "expr temp" "maybe param" "maybe type" "temp"
      (772713 'move' call_tmp[772710](772664 call chpl_checkLegalTypeFieldAccessor this[772651] call_tmp[772705] "eltType"))
      (772691 'move' ret[772686](772690 'deref' call_tmp[772710]))
      gotoReturn _end_eltType[772684] _end_eltType[772684]
      (772681 'end of statement' borrowOfThis[772653])
    }
    {
      (772696 'move' ret[772686](772695 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772684] _end_eltType[772684]
    }
    label _end_eltType[772684]
    (772688 return ret[772686])
  }
  function MinReduceScanOp[772649](?).eltType[772715](arg _mt[772717]:_MT[238], arg this[772719]:MinReduceScanOp[772649](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772754] "RVV" "temp" "type variable"
    unknown borrowOfThis[772721] "type variable"
    (772746 'end of statement')
    (772723 'move' borrowOfThis[772721](772726 call _cast _borrowedNonNilable[214](?) this[772719]))
    (772747 'end of statement' borrowOfThis[772721])
    unknown call_tmp[772768] "expr temp" "maybe param" "maybe type" "temp"
    (772771 'move' call_tmp[772768](772736 'is bound' borrowOfThis[772721] c"eltType"))
    if call_tmp[772768]
    {
      unknown call_tmp[772773] "expr temp" "maybe param" "maybe type" "temp"
      (772776 'move' call_tmp[772773](772731 '.v' borrowOfThis[772721] c"eltType"))
      unknown call_tmp[772778] "expr temp" "maybe param" "maybe type" "temp"
      (772781 'move' call_tmp[772778](772732 call chpl_checkLegalTypeFieldAccessor this[772719] call_tmp[772773] "eltType"))
      (772759 'move' ret[772754](772758 'deref' call_tmp[772778]))
      gotoReturn _end_eltType[772752] _end_eltType[772752]
      (772749 'end of statement' borrowOfThis[772721])
    }
    {
      (772764 'move' ret[772754](772763 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772752] _end_eltType[772752]
    }
    label _end_eltType[772752]
    (772756 return ret[772754])
  }
  function MinReduceScanOp[82823](?).value[772783](arg _mt[772785]:_MT[238], arg this[772787]:MinReduceScanOp[82823](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772797] "RVV" "temp"
    unknown call_tmp[772804] "expr temp" "maybe param" "maybe type" "temp"
    (772807 'move' call_tmp[772804](772791 '.' this[772787] c"value"))
    (772802 'move' ret[772797](772801 'addr of' call_tmp[772804]))
    (772799 return ret[772797])
  }
  function MinReduceScanOp[82823](?).init[772809](arg _mt[772811]:_MT[238], arg this[772812]:MinReduceScanOp[82823](?), in arg l[772825]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[772828]:_any[178](?), in arg value[772837] :
  (772844 call max eltType[772828]) =
  (772839 call max eltType[772828])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[772856] "temporary of super field" "temp"
    (772858 'move' super_tmp[772856](772855 '.v' this[772812] c"super"))
    (772822 call(772820 call (partial) init _mt[243] super_tmp[772856]) l[772825])
    (772885 'end of statement')
    unknown tmp[772861] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[772889] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[772901] "expr temp" "maybe param" "maybe type" "temp"
      (772904 'move' call_tmp[772901](772863 '.v' this[772812] c"super"))
      (772893 'move' call_type_tmp[772889](772866 'typeof' call_tmp[772901]))
    }
    (772867 'move' tmp[772861] call_type_tmp[772889])
    unknown call_tmp[772906] "maybe param" "maybe type" "temp"
    (772909 'move' call_tmp[772906](772872 'cast' tmp[772861] this[772812]))
    unknown chpl__thisAsParent[772869] "dead at end of block" "insert auto destroy" "temp"
    (772897 'init var' chpl__thisAsParent[772869] call_tmp[772906] tmp[772861])
    (772875 'setcid' chpl__thisAsParent[772869])
    (772877 'init field' this[772812] c"eltType" eltType[772828])
    (772886 'end of statement')
    (772880 '.=' this[772812] c"value" value[772837])
    (772887 'end of statement')
    (772883 'setcid' this[772812])
    (772895 return _void[55])
  }
  function MinReduceScanOp[82823](?).deinit[772911](arg _mt[772913]:_MT[238], arg this[772915]:MinReduceScanOp[82823](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (772923 return _void[55])
  }
  function MinReduceScanOp[82823](?).writeThis[772925](arg _mt[772929]:_MT[238], arg this[772927]:MinReduceScanOp[82823](?), arg f[772928]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772934 call writeThisDefaultImpl f[772928] this[772927])
    (772939 return _void[55])
  }
  function MinReduceScanOp[82823](?).readThis[772941](arg _mt[772945]:_MT[238], arg this[772943]:MinReduceScanOp[82823](?), arg f[772944]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772949 call readThisDefaultImpl f[772944] this[772943])
    (772955 return _void[55])
  }
  type MinReduceScanOp[82823](?) val super[355654]:ReduceScanOp[82300] "super class" unknown eltType[82712] "type variable" unknown value[82719](82718 call max eltType[82712])
  type MinReduceScanOp[772649](?)
  type MinReduceScanOp[376533](?)
  function minmax[83074](?).identity[82873](arg _mt[83078]:_MT[238], arg this[83076]:minmax[83074](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512403] "RVV" "temp"
    unknown call_tmp[629051] "expr temp" "maybe param" "maybe type" "temp"
    (629054 'move' call_tmp[629051](376545 call eltType _mt[243] this[83076]))
    unknown call_tmp[629056] "expr temp" "maybe param" "maybe type" "temp"
    (629059 'move' call_tmp[629056](82878 call max call_tmp[629051]))
    unknown call_tmp[629063] "expr temp" "maybe param" "maybe type" "temp"
    (629066 'move' call_tmp[629063](376550 call eltType _mt[243] this[83076]))
    unknown call_tmp[629068] "expr temp" "maybe param" "maybe type" "temp"
    (629071 'move' call_tmp[629068](82882 call min call_tmp[629063]))
    unknown call_tmp[629073] "expr temp" "maybe param" "maybe type" "temp"
    (629076 'move' call_tmp[629073](82884 call _build_tuple call_tmp[629056] call_tmp[629068]))
    (512408 'move' ret[512403](512407 'deref' call_tmp[629073]))
    (512405 return ret[512403])
  }
  function minmax[83074](?).accumulateOntoState[82895](arg _mt[83082]:_MT[238], arg this[83080]:minmax[83074](?), ref arg state[82893]:_any[178](?), arg x[82898] :
  (376555 call eltType _mt[243] this[83080])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629080] "expr temp" "maybe param" "maybe type" "temp"
    (629083 'move' call_tmp[629080](82904 call state[82893] 0))
    unknown call_tmp[629085] "expr temp" "maybe param" "maybe type" "temp"
    (629088 'move' call_tmp[629085](82909 call state[82893] 0))
    unknown call_tmp[629090] "expr temp" "maybe param" "maybe type" "temp"
    (629093 'move' call_tmp[629090](82912 call min call_tmp[629085] x[82898]))
    (82913 call = call_tmp[629080] call_tmp[629090])
    (476790 'end of statement')
    unknown call_tmp[629095] "expr temp" "maybe param" "maybe type" "temp"
    (629098 'move' call_tmp[629095](82920 call state[82893] 1))
    unknown call_tmp[629100] "expr temp" "maybe param" "maybe type" "temp"
    (629103 'move' call_tmp[629100](82925 call state[82893] 1))
    unknown call_tmp[629105] "expr temp" "maybe param" "maybe type" "temp"
    (629108 'move' call_tmp[629105](82928 call max call_tmp[629100] x[82898]))
    (82929 call = call_tmp[629095] call_tmp[629105])
    (512410 return _void[55])
  }
  function minmax[83074](?).accumulateOntoState[82938](arg _mt[83086]:_MT[238], arg this[83084]:minmax[83074](?), ref arg state[82936]:_any[178](?), arg other[82944] :
  unknown call_tmp[629112] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629117] "expr temp" "maybe param" "maybe type" "temp"
    (629120 'move' call_tmp[629117](82950 call state[82936] 0))
    unknown call_tmp[629122] "expr temp" "maybe param" "maybe type" "temp"
    (629125 'move' call_tmp[629122](82955 call state[82936] 0))
    unknown call_tmp[629127] "expr temp" "maybe param" "maybe type" "temp"
    (629130 'move' call_tmp[629127](82960 call other[82944] 0))
    unknown call_tmp[629132] "expr temp" "maybe param" "maybe type" "temp"
    (629135 'move' call_tmp[629132](82961 call min call_tmp[629122] call_tmp[629127]))
    (82962 call = call_tmp[629117] call_tmp[629132])
    (476792 'end of statement')
    unknown call_tmp[629137] "expr temp" "maybe param" "maybe type" "temp"
    (629140 'move' call_tmp[629137](82969 call state[82936] 1))
    unknown call_tmp[629142] "expr temp" "maybe param" "maybe type" "temp"
    (629145 'move' call_tmp[629142](82974 call state[82936] 1))
    unknown call_tmp[629147] "expr temp" "maybe param" "maybe type" "temp"
    (629150 'move' call_tmp[629147](82979 call other[82944] 1))
    unknown call_tmp[629152] "expr temp" "maybe param" "maybe type" "temp"
    (629155 'move' call_tmp[629152](82980 call max call_tmp[629142] call_tmp[629147]))
    (82981 call = call_tmp[629137] call_tmp[629152])
    (512412 return _void[55])
  }
  function minmax[83074](?).accumulate[82992](arg _mt[83090]:_MT[238], arg this[83088]:minmax[83074](?), arg x[82989] :
  (376577 call eltType _mt[243] this[83088])) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629163] "expr temp" "maybe param" "maybe type" "temp"
    (629166 'move' call_tmp[629163](376586 call value _mt[243] this[83088]))
    (82998 call(376581 call (partial) accumulateOntoState _mt[243] this[83088]) call_tmp[629163] x[82989])
    (512414 return _void[55])
  }
  function minmax[83074](?).accumulate[83012](arg _mt[83094]:_MT[238], arg this[83092]:minmax[83074](?), arg state[83009] :
  unknown call_tmp[629170] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629179] "expr temp" "maybe param" "maybe type" "temp"
    (629182 'move' call_tmp[629179](376601 call value _mt[243] this[83092]))
    (83018 call(376596 call (partial) accumulateOntoState _mt[243] this[83092]) call_tmp[629179] state[83009])
    (512416 return _void[55])
  }
  function minmax[83074](?).combine[83032](arg _mt[83098]:_MT[238], arg this[83096]:minmax[83074](?), arg other[83029] :
  unknown call_tmp[629186] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629195] "expr temp" "maybe param" "maybe type" "temp"
    (629198 'move' call_tmp[629195](376620 call value _mt[243] this[83096]))
    unknown call_tmp[629202] "expr temp" "maybe param" "maybe type" "temp"
    (629205 'move' call_tmp[629202](83038 call value _mt[243] other[83029]))
    (83041 call(376615 call (partial) accumulateOntoState _mt[243] this[83096]) call_tmp[629195] call_tmp[629202])
    (512418 return _void[55])
  }
  function minmax[83074](?).generate[83048](arg _mt[83102]:_MT[238], arg this[83100]:minmax[83074](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512422] "RVV" "temp"
    unknown call_tmp[629209] "expr temp" "maybe param" "maybe type" "temp"
    (629212 'move' call_tmp[629209](376625 call value _mt[243] this[83100]))
    (512427 'move' ret[512422](512426 'deref' call_tmp[629209]))
    (512424 return ret[512422])
  }
  function minmax[83074](?).clone[83058](arg _mt[83106]:_MT[238], arg this[83104]:minmax[83074](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512431] "RVV" "temp"
    unknown call_tmp[629216] "expr temp" "maybe param" "maybe type" "temp"
    (629219 'move' call_tmp[629216](376631 call eltType _mt[243] this[83104]))
    unknown call_tmp[629221] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629224 'move' call_tmp[629221](747817 'new' minmax[376606](?)(eltType = call_tmp[629216])(_chpl_manager = unmanaged[220](?))))
    (512436 'move' ret[512431](512435 'deref' call_tmp[629221]))
    (512433 return ret[512431])
  }
  function minmax[83074](?).super[772957](arg _mt[772959]:_MT[238], arg this[772961]:minmax[83074](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772971] "RVV" "temp"
    unknown call_tmp[772978] "expr temp" "maybe param" "maybe type" "temp"
    (772981 'move' call_tmp[772978](772965 '.v' this[772961] c"super"))
    (772976 'move' ret[772971](772975 'deref' call_tmp[772978]))
    (772973 return ret[772971])
  }
  function minmax[772988](?).eltType[772983](arg _mt[772985]:_MT[238], arg this[772990]:minmax[772988](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773025] "RVV" "temp" "type variable"
    unknown borrowOfThis[772992]
    (773017 'end of statement')
    (772994 'move' borrowOfThis[772992](772997 call _cast _borrowedNonNilable[214](?) this[772990]))
    (773018 'end of statement' borrowOfThis[772992])
    unknown call_tmp[773039] "expr temp" "maybe param" "maybe type" "temp"
    (773042 'move' call_tmp[773039](773007 'is bound' borrowOfThis[772992] c"eltType"))
    if call_tmp[773039]
    {
      unknown call_tmp[773044] "expr temp" "maybe param" "maybe type" "temp"
      (773047 'move' call_tmp[773044](773002 '.v' borrowOfThis[772992] c"eltType"))
      unknown call_tmp[773049] "expr temp" "maybe param" "maybe type" "temp"
      (773052 'move' call_tmp[773049](773003 call chpl_checkLegalTypeFieldAccessor this[772990] call_tmp[773044] "eltType"))
      (773030 'move' ret[773025](773029 'deref' call_tmp[773049]))
      gotoReturn _end_eltType[773023] _end_eltType[773023]
      (773020 'end of statement' borrowOfThis[772992])
    }
    {
      (773035 'move' ret[773025](773034 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773023] _end_eltType[773023]
    }
    label _end_eltType[773023]
    (773027 return ret[773025])
  }
  function minmax[772988](?).eltType[773054](arg _mt[773056]:_MT[238], arg this[773058]:minmax[772988](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773093] "RVV" "temp" "type variable"
    unknown borrowOfThis[773060] "type variable"
    (773085 'end of statement')
    (773062 'move' borrowOfThis[773060](773065 call _cast _borrowedNonNilable[214](?) this[773058]))
    (773086 'end of statement' borrowOfThis[773060])
    unknown call_tmp[773107] "expr temp" "maybe param" "maybe type" "temp"
    (773110 'move' call_tmp[773107](773075 'is bound' borrowOfThis[773060] c"eltType"))
    if call_tmp[773107]
    {
      unknown call_tmp[773112] "expr temp" "maybe param" "maybe type" "temp"
      (773115 'move' call_tmp[773112](773070 '.v' borrowOfThis[773060] c"eltType"))
      unknown call_tmp[773117] "expr temp" "maybe param" "maybe type" "temp"
      (773120 'move' call_tmp[773117](773071 call chpl_checkLegalTypeFieldAccessor this[773058] call_tmp[773112] "eltType"))
      (773098 'move' ret[773093](773097 'deref' call_tmp[773117]))
      gotoReturn _end_eltType[773091] _end_eltType[773091]
      (773088 'end of statement' borrowOfThis[773060])
    }
    {
      (773103 'move' ret[773093](773102 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773091] _end_eltType[773091]
    }
    label _end_eltType[773091]
    (773095 return ret[773093])
  }
  function minmax[83074](?).value[773122](arg _mt[773124]:_MT[238], arg this[773126]:minmax[83074](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773136] "RVV" "temp"
    unknown call_tmp[773143] "expr temp" "maybe param" "maybe type" "temp"
    (773146 'move' call_tmp[773143](773130 '.' this[773126] c"value"))
    (773141 'move' ret[773136](773140 'addr of' call_tmp[773143]))
    (773138 return ret[773136])
  }
  function minmax[83074](?).init[773148](arg _mt[773150]:_MT[238], arg this[773151]:minmax[83074](?), in arg l[773164]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[773167]:_any[178](?), in arg value[773176] :
  unknown call_tmp[773248] "expr temp" "maybe param" "maybe type" "temp" =
  unknown call_tmp[773258] "expr temp" "maybe param" "maybe type" "temp") : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[773205] "temporary of super field" "temp"
    (773207 'move' super_tmp[773205](773204 '.v' this[773151] c"super"))
    (773161 call(773159 call (partial) init _mt[243] super_tmp[773205]) l[773164])
    (773234 'end of statement')
    unknown tmp[773210] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[773238] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[773270] "expr temp" "maybe param" "maybe type" "temp"
      (773273 'move' call_tmp[773270](773212 '.v' this[773151] c"super"))
      (773242 'move' call_type_tmp[773238](773215 'typeof' call_tmp[773270]))
    }
    (773216 'move' tmp[773210] call_type_tmp[773238])
    unknown call_tmp[773275] "maybe param" "maybe type" "temp"
    (773278 'move' call_tmp[773275](773221 'cast' tmp[773210] this[773151]))
    unknown chpl__thisAsParent[773218] "dead at end of block" "insert auto destroy" "temp"
    (773246 'init var' chpl__thisAsParent[773218] call_tmp[773275] tmp[773210])
    (773224 'setcid' chpl__thisAsParent[773218])
    (773226 'init field' this[773151] c"eltType" eltType[773167])
    (773235 'end of statement')
    (773229 '.=' this[773151] c"value" value[773176])
    (773236 'end of statement')
    (773232 'setcid' this[773151])
    (773244 return _void[55])
  }
  function minmax[83074](?).deinit[773280](arg _mt[773282]:_MT[238], arg this[773284]:minmax[83074](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (773292 return _void[55])
  }
  function minmax[83074](?).writeThis[773294](arg _mt[773298]:_MT[238], arg this[773296]:minmax[83074](?), arg f[773297]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773303 call writeThisDefaultImpl f[773297] this[773296])
    (773308 return _void[55])
  }
  function minmax[83074](?).readThis[773310](arg _mt[773314]:_MT[238], arg this[773312]:minmax[83074](?), arg f[773313]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773318 call readThisDefaultImpl f[773313] this[773312])
    (773324 return _void[55])
  }
  type minmax[83074](?) val super[355656]:ReduceScanOp[82300] "super class" unknown eltType[82853] "type variable" unknown value[82867](82865 call _build_tuple(82859 call max eltType[82853])(82863 call min eltType[82853]))
  type minmax[772988](?)
  type minmax[376606](?)
  function LogicalAndReduceScanOp[83238](?).identity[83125](arg _mt[83242]:_MT[238], arg this[83240]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512440] "RVV" "temp"
    unknown call_tmp[629228] "expr temp" "maybe param" "maybe type" "temp"
    (629231 'move' call_tmp[629228](376637 call eltType _mt[243] this[83240]))
    unknown call_tmp[629233] "expr temp" "maybe param" "maybe type" "temp"
    (629236 'move' call_tmp[629233](83130 call _land_id call_tmp[629228]))
    (512445 'move' ret[512440](512444 'deref' call_tmp[629233]))
    (512442 return ret[512440])
  }
  function LogicalAndReduceScanOp[83238](?).accumulate[83140](arg _mt[83246]:_MT[238], arg this[83244]:LogicalAndReduceScanOp[83238](?), arg x[83138]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83145] "temp"
      unknown call_tmp[629240] "expr temp" "maybe param" "maybe type" "temp"
      (629243 'move' call_tmp[629240](376642 call value _mt[243] this[83244]))
      (83148 'move' tmp[83145](83147 'addr of' call_tmp[629240]))
      unknown tmp[421730] "maybe param" "temp"
      (421741 'move' tmp[421730] tmp[83145])
      unknown call_tmp[629245] "expr temp" "maybe param" "maybe type" "temp"
      (629248 'move' call_tmp[629245](421743 call _cond_invalid tmp[421730]))
      if call_tmp[629245]
      {
        (421746 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560129] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560130] "maybe param" "temp"
      unknown call_tmp[629250] "expr temp" "maybe param" "maybe type" "temp"
      (629253 'move' call_tmp[629250](421731 call isTrue tmp[421730]))
      (560135 'move' tmp[560130](560133 call _cond_test call_tmp[629250]))
      if tmp[560130]
      {
        unknown tmp[560137] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560139 'move' tmp[560137](421734 call isTrue x[83138]))
        (560144 'move' tmp[560129](560141 '_paramFoldLogical' tmp[560130] tmp[560137]))
      }
      {
        (560149 'move' tmp[560129](560146 '_paramFoldLogical' tmp[560130] 0))
      }
      (83153 call = tmp[83145] tmp[560129])
    }
    (512447 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).accumulateOntoState[83163](arg _mt[83250]:_MT[238], arg this[83248]:LogicalAndReduceScanOp[83238](?), ref arg state[83161]:_any[178](?), arg x[83165]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83170] "temp"
      (83173 'move' tmp[83170](83172 'addr of' state[83161]))
      unknown tmp[421751] "maybe param" "temp"
      (421762 'move' tmp[421751] tmp[83170])
      unknown call_tmp[629255] "expr temp" "maybe param" "maybe type" "temp"
      (629258 'move' call_tmp[629255](421764 call _cond_invalid tmp[421751]))
      if call_tmp[629255]
      {
        (421767 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560156] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560157] "maybe param" "temp"
      unknown call_tmp[629260] "expr temp" "maybe param" "maybe type" "temp"
      (629263 'move' call_tmp[629260](421752 call isTrue tmp[421751]))
      (560162 'move' tmp[560157](560160 call _cond_test call_tmp[629260]))
      if tmp[560157]
      {
        unknown tmp[560164] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560166 'move' tmp[560164](421755 call isTrue x[83165]))
        (560171 'move' tmp[560156](560168 '_paramFoldLogical' tmp[560157] tmp[560164]))
      }
      {
        (560176 'move' tmp[560156](560173 '_paramFoldLogical' tmp[560157] 0))
      }
      (83178 call = tmp[83170] tmp[560156])
    }
    (512449 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).combine[83188](arg _mt[83254]:_MT[238], arg this[83252]:LogicalAndReduceScanOp[83238](?), arg x[83186]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83196] "temp"
      unknown call_tmp[629267] "expr temp" "maybe param" "maybe type" "temp"
      (629270 'move' call_tmp[629267](376650 call value _mt[243] this[83252]))
      (83199 'move' tmp[83196](83198 'addr of' call_tmp[629267]))
      unknown tmp[421772] "maybe param" "temp"
      (421783 'move' tmp[421772] tmp[83196])
      unknown call_tmp[629272] "expr temp" "maybe param" "maybe type" "temp"
      (629275 'move' call_tmp[629272](421785 call _cond_invalid tmp[421772]))
      if call_tmp[629272]
      {
        (421788 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560183] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560184] "maybe param" "temp"
      unknown call_tmp[629277] "expr temp" "maybe param" "maybe type" "temp"
      (629280 'move' call_tmp[629277](421773 call isTrue tmp[421772]))
      (560189 'move' tmp[560184](560187 call _cond_test call_tmp[629277]))
      if tmp[560184]
      {
        unknown tmp[560191] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629284] "expr temp" "maybe param" "maybe type" "temp"
        (629287 'move' call_tmp[629284](83192 call value _mt[243] x[83186]))
        (560193 'move' tmp[560191](421776 call isTrue call_tmp[629284]))
        (560198 'move' tmp[560183](560195 '_paramFoldLogical' tmp[560184] tmp[560191]))
      }
      {
        (560203 'move' tmp[560183](560200 '_paramFoldLogical' tmp[560184] 0))
      }
      (83204 call = tmp[83196] tmp[560183])
    }
    (512451 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).generate[83212](arg _mt[83258]:_MT[238], arg this[83256]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512455] "RVV" "temp"
    unknown call_tmp[629291] "expr temp" "maybe param" "maybe type" "temp"
    (629294 'move' call_tmp[629291](376655 call value _mt[243] this[83256]))
    (512460 'move' ret[512455](512459 'deref' call_tmp[629291]))
    (512457 return ret[512455])
  }
  function LogicalAndReduceScanOp[83238](?).clone[83222](arg _mt[83262]:_MT[238], arg this[83260]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512464] "RVV" "temp"
    unknown call_tmp[629298] "expr temp" "maybe param" "maybe type" "temp"
    (629301 'move' call_tmp[629298](376664 call eltType _mt[243] this[83260]))
    unknown call_tmp[629303] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629306 'move' call_tmp[629303](747818 'new' LogicalAndReduceScanOp[376659](?)(eltType = call_tmp[629298])(_chpl_manager = unmanaged[220](?))))
    (512469 'move' ret[512464](512468 'deref' call_tmp[629303]))
    (512466 return ret[512464])
  }
  function LogicalAndReduceScanOp[83238](?).super[773326](arg _mt[773328]:_MT[238], arg this[773330]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773340] "RVV" "temp"
    unknown call_tmp[773347] "expr temp" "maybe param" "maybe type" "temp"
    (773350 'move' call_tmp[773347](773334 '.v' this[773330] c"super"))
    (773345 'move' ret[773340](773344 'deref' call_tmp[773347]))
    (773342 return ret[773340])
  }
  function LogicalAndReduceScanOp[773357](?).eltType[773352](arg _mt[773354]:_MT[238], arg this[773359]:LogicalAndReduceScanOp[773357](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773394] "RVV" "temp" "type variable"
    unknown borrowOfThis[773361]
    (773386 'end of statement')
    (773363 'move' borrowOfThis[773361](773366 call _cast _borrowedNonNilable[214](?) this[773359]))
    (773387 'end of statement' borrowOfThis[773361])
    unknown call_tmp[773408] "expr temp" "maybe param" "maybe type" "temp"
    (773411 'move' call_tmp[773408](773376 'is bound' borrowOfThis[773361] c"eltType"))
    if call_tmp[773408]
    {
      unknown call_tmp[773413] "expr temp" "maybe param" "maybe type" "temp"
      (773416 'move' call_tmp[773413](773371 '.v' borrowOfThis[773361] c"eltType"))
      unknown call_tmp[773418] "expr temp" "maybe param" "maybe type" "temp"
      (773421 'move' call_tmp[773418](773372 call chpl_checkLegalTypeFieldAccessor this[773359] call_tmp[773413] "eltType"))
      (773399 'move' ret[773394](773398 'deref' call_tmp[773418]))
      gotoReturn _end_eltType[773392] _end_eltType[773392]
      (773389 'end of statement' borrowOfThis[773361])
    }
    {
      (773404 'move' ret[773394](773403 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773392] _end_eltType[773392]
    }
    label _end_eltType[773392]
    (773396 return ret[773394])
  }
  function LogicalAndReduceScanOp[773357](?).eltType[773423](arg _mt[773425]:_MT[238], arg this[773427]:LogicalAndReduceScanOp[773357](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773462] "RVV" "temp" "type variable"
    unknown borrowOfThis[773429] "type variable"
    (773454 'end of statement')
    (773431 'move' borrowOfThis[773429](773434 call _cast _borrowedNonNilable[214](?) this[773427]))
    (773455 'end of statement' borrowOfThis[773429])
    unknown call_tmp[773476] "expr temp" "maybe param" "maybe type" "temp"
    (773479 'move' call_tmp[773476](773444 'is bound' borrowOfThis[773429] c"eltType"))
    if call_tmp[773476]
    {
      unknown call_tmp[773481] "expr temp" "maybe param" "maybe type" "temp"
      (773484 'move' call_tmp[773481](773439 '.v' borrowOfThis[773429] c"eltType"))
      unknown call_tmp[773486] "expr temp" "maybe param" "maybe type" "temp"
      (773489 'move' call_tmp[773486](773440 call chpl_checkLegalTypeFieldAccessor this[773427] call_tmp[773481] "eltType"))
      (773467 'move' ret[773462](773466 'deref' call_tmp[773486]))
      gotoReturn _end_eltType[773460] _end_eltType[773460]
      (773457 'end of statement' borrowOfThis[773429])
    }
    {
      (773472 'move' ret[773462](773471 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773460] _end_eltType[773460]
    }
    label _end_eltType[773460]
    (773464 return ret[773462])
  }
  function LogicalAndReduceScanOp[83238](?).value[773491](arg _mt[773493]:_MT[238], arg this[773495]:LogicalAndReduceScanOp[83238](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773505] "RVV" "temp"
    unknown call_tmp[773512] "expr temp" "maybe param" "maybe type" "temp"
    (773515 'move' call_tmp[773512](773499 '.' this[773495] c"value"))
    (773510 'move' ret[773505](773509 'addr of' call_tmp[773512]))
    (773507 return ret[773505])
  }
  function LogicalAndReduceScanOp[83238](?).init[773517](arg _mt[773519]:_MT[238], arg this[773520]:LogicalAndReduceScanOp[83238](?), in arg l[773533]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[773536]:_any[178](?), in arg value[773545] :
  (773552 call _land_id eltType[773536]) =
  (773547 call _land_id eltType[773536])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[773564] "temporary of super field" "temp"
    (773566 'move' super_tmp[773564](773563 '.v' this[773520] c"super"))
    (773530 call(773528 call (partial) init _mt[243] super_tmp[773564]) l[773533])
    (773593 'end of statement')
    unknown tmp[773569] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[773597] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[773609] "expr temp" "maybe param" "maybe type" "temp"
      (773612 'move' call_tmp[773609](773571 '.v' this[773520] c"super"))
      (773601 'move' call_type_tmp[773597](773574 'typeof' call_tmp[773609]))
    }
    (773575 'move' tmp[773569] call_type_tmp[773597])
    unknown call_tmp[773614] "maybe param" "maybe type" "temp"
    (773617 'move' call_tmp[773614](773580 'cast' tmp[773569] this[773520]))
    unknown chpl__thisAsParent[773577] "dead at end of block" "insert auto destroy" "temp"
    (773605 'init var' chpl__thisAsParent[773577] call_tmp[773614] tmp[773569])
    (773583 'setcid' chpl__thisAsParent[773577])
    (773585 'init field' this[773520] c"eltType" eltType[773536])
    (773594 'end of statement')
    (773588 '.=' this[773520] c"value" value[773545])
    (773595 'end of statement')
    (773591 'setcid' this[773520])
    (773603 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).deinit[773619](arg _mt[773621]:_MT[238], arg this[773623]:LogicalAndReduceScanOp[83238](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (773631 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).writeThis[773633](arg _mt[773637]:_MT[238], arg this[773635]:LogicalAndReduceScanOp[83238](?), arg f[773636]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773642 call writeThisDefaultImpl f[773636] this[773635])
    (773647 return _void[55])
  }
  function LogicalAndReduceScanOp[83238](?).readThis[773649](arg _mt[773653]:_MT[238], arg this[773651]:LogicalAndReduceScanOp[83238](?), arg f[773652]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773657 call readThisDefaultImpl f[773652] this[773651])
    (773663 return _void[55])
  }
  type LogicalAndReduceScanOp[83238](?) val super[355658]:ReduceScanOp[82300] "super class" unknown eltType[83112] "type variable" unknown value[83119](83118 call _land_id eltType[83112])
  type LogicalAndReduceScanOp[773357](?)
  type LogicalAndReduceScanOp[376659](?)
  function LogicalOrReduceScanOp[83394](?).identity[83281](arg _mt[83398]:_MT[238], arg this[83396]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512473] "RVV" "temp"
    unknown call_tmp[629310] "expr temp" "maybe param" "maybe type" "temp"
    (629313 'move' call_tmp[629310](376670 call eltType _mt[243] this[83396]))
    unknown call_tmp[629315] "expr temp" "maybe param" "maybe type" "temp"
    (629318 'move' call_tmp[629315](83286 call _lor_id call_tmp[629310]))
    (512478 'move' ret[512473](512477 'deref' call_tmp[629315]))
    (512475 return ret[512473])
  }
  function LogicalOrReduceScanOp[83394](?).accumulate[83296](arg _mt[83402]:_MT[238], arg this[83400]:LogicalOrReduceScanOp[83394](?), arg x[83294]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83301] "temp"
      unknown call_tmp[629322] "expr temp" "maybe param" "maybe type" "temp"
      (629325 'move' call_tmp[629322](376675 call value _mt[243] this[83400]))
      (83304 'move' tmp[83301](83303 'addr of' call_tmp[629322]))
      unknown tmp[421793] "maybe param" "temp"
      (421804 'move' tmp[421793] tmp[83301])
      unknown call_tmp[629327] "expr temp" "maybe param" "maybe type" "temp"
      (629330 'move' call_tmp[629327](421806 call _cond_invalid tmp[421793]))
      if call_tmp[629327]
      {
        (421809 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560210] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560211] "maybe param" "temp"
      unknown call_tmp[629332] "expr temp" "maybe param" "maybe type" "temp"
      (629335 'move' call_tmp[629332](421794 call isTrue tmp[421793]))
      (560216 'move' tmp[560211](560214 call _cond_test call_tmp[629332]))
      if tmp[560211]
      {
        (560221 'move' tmp[560210](560218 '_paramFoldLogical' tmp[560211] 1))
      }
      {
        unknown tmp[560223] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560225 'move' tmp[560223](421798 call isTrue x[83294]))
        (560230 'move' tmp[560210](560227 '_paramFoldLogical' tmp[560211] tmp[560223]))
      }
      (83309 call = tmp[83301] tmp[560210])
    }
    (512480 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).accumulateOntoState[83319](arg _mt[83406]:_MT[238], arg this[83404]:LogicalOrReduceScanOp[83394](?), ref arg state[83317]:_any[178](?), arg x[83321]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83326] "temp"
      (83329 'move' tmp[83326](83328 'addr of' state[83317]))
      unknown tmp[421814] "maybe param" "temp"
      (421825 'move' tmp[421814] tmp[83326])
      unknown call_tmp[629337] "expr temp" "maybe param" "maybe type" "temp"
      (629340 'move' call_tmp[629337](421827 call _cond_invalid tmp[421814]))
      if call_tmp[629337]
      {
        (421830 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560237] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560238] "maybe param" "temp"
      unknown call_tmp[629342] "expr temp" "maybe param" "maybe type" "temp"
      (629345 'move' call_tmp[629342](421815 call isTrue tmp[421814]))
      (560243 'move' tmp[560238](560241 call _cond_test call_tmp[629342]))
      if tmp[560238]
      {
        (560248 'move' tmp[560237](560245 '_paramFoldLogical' tmp[560238] 1))
      }
      {
        unknown tmp[560250] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560252 'move' tmp[560250](421819 call isTrue x[83321]))
        (560257 'move' tmp[560237](560254 '_paramFoldLogical' tmp[560238] tmp[560250]))
      }
      (83334 call = tmp[83326] tmp[560237])
    }
    (512482 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).combine[83344](arg _mt[83410]:_MT[238], arg this[83408]:LogicalOrReduceScanOp[83394](?), arg x[83342]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83352] "temp"
      unknown call_tmp[629349] "expr temp" "maybe param" "maybe type" "temp"
      (629352 'move' call_tmp[629349](376683 call value _mt[243] this[83408]))
      (83355 'move' tmp[83352](83354 'addr of' call_tmp[629349]))
      unknown tmp[421835] "maybe param" "temp"
      (421846 'move' tmp[421835] tmp[83352])
      unknown call_tmp[629354] "expr temp" "maybe param" "maybe type" "temp"
      (629357 'move' call_tmp[629354](421848 call _cond_invalid tmp[421835]))
      if call_tmp[629354]
      {
        (421851 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560264] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560265] "maybe param" "temp"
      unknown call_tmp[629359] "expr temp" "maybe param" "maybe type" "temp"
      (629362 'move' call_tmp[629359](421836 call isTrue tmp[421835]))
      (560270 'move' tmp[560265](560268 call _cond_test call_tmp[629359]))
      if tmp[560265]
      {
        (560275 'move' tmp[560264](560272 '_paramFoldLogical' tmp[560265] 1))
      }
      {
        unknown tmp[560277] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629366] "expr temp" "maybe param" "maybe type" "temp"
        (629369 'move' call_tmp[629366](83348 call value _mt[243] x[83342]))
        (560279 'move' tmp[560277](421840 call isTrue call_tmp[629366]))
        (560284 'move' tmp[560264](560281 '_paramFoldLogical' tmp[560265] tmp[560277]))
      }
      (83360 call = tmp[83352] tmp[560264])
    }
    (512484 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).generate[83368](arg _mt[83414]:_MT[238], arg this[83412]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512488] "RVV" "temp"
    unknown call_tmp[629373] "expr temp" "maybe param" "maybe type" "temp"
    (629376 'move' call_tmp[629373](376688 call value _mt[243] this[83412]))
    (512493 'move' ret[512488](512492 'deref' call_tmp[629373]))
    (512490 return ret[512488])
  }
  function LogicalOrReduceScanOp[83394](?).clone[83378](arg _mt[83418]:_MT[238], arg this[83416]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512497] "RVV" "temp"
    unknown call_tmp[629380] "expr temp" "maybe param" "maybe type" "temp"
    (629383 'move' call_tmp[629380](376697 call eltType _mt[243] this[83416]))
    unknown call_tmp[629385] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629388 'move' call_tmp[629385](747819 'new' LogicalOrReduceScanOp[376692](?)(eltType = call_tmp[629380])(_chpl_manager = unmanaged[220](?))))
    (512502 'move' ret[512497](512501 'deref' call_tmp[629385]))
    (512499 return ret[512497])
  }
  function LogicalOrReduceScanOp[83394](?).super[773665](arg _mt[773667]:_MT[238], arg this[773669]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773679] "RVV" "temp"
    unknown call_tmp[773686] "expr temp" "maybe param" "maybe type" "temp"
    (773689 'move' call_tmp[773686](773673 '.v' this[773669] c"super"))
    (773684 'move' ret[773679](773683 'deref' call_tmp[773686]))
    (773681 return ret[773679])
  }
  function LogicalOrReduceScanOp[773696](?).eltType[773691](arg _mt[773693]:_MT[238], arg this[773698]:LogicalOrReduceScanOp[773696](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773733] "RVV" "temp" "type variable"
    unknown borrowOfThis[773700]
    (773725 'end of statement')
    (773702 'move' borrowOfThis[773700](773705 call _cast _borrowedNonNilable[214](?) this[773698]))
    (773726 'end of statement' borrowOfThis[773700])
    unknown call_tmp[773747] "expr temp" "maybe param" "maybe type" "temp"
    (773750 'move' call_tmp[773747](773715 'is bound' borrowOfThis[773700] c"eltType"))
    if call_tmp[773747]
    {
      unknown call_tmp[773752] "expr temp" "maybe param" "maybe type" "temp"
      (773755 'move' call_tmp[773752](773710 '.v' borrowOfThis[773700] c"eltType"))
      unknown call_tmp[773757] "expr temp" "maybe param" "maybe type" "temp"
      (773760 'move' call_tmp[773757](773711 call chpl_checkLegalTypeFieldAccessor this[773698] call_tmp[773752] "eltType"))
      (773738 'move' ret[773733](773737 'deref' call_tmp[773757]))
      gotoReturn _end_eltType[773731] _end_eltType[773731]
      (773728 'end of statement' borrowOfThis[773700])
    }
    {
      (773743 'move' ret[773733](773742 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773731] _end_eltType[773731]
    }
    label _end_eltType[773731]
    (773735 return ret[773733])
  }
  function LogicalOrReduceScanOp[773696](?).eltType[773762](arg _mt[773764]:_MT[238], arg this[773766]:LogicalOrReduceScanOp[773696](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773801] "RVV" "temp" "type variable"
    unknown borrowOfThis[773768] "type variable"
    (773793 'end of statement')
    (773770 'move' borrowOfThis[773768](773773 call _cast _borrowedNonNilable[214](?) this[773766]))
    (773794 'end of statement' borrowOfThis[773768])
    unknown call_tmp[773815] "expr temp" "maybe param" "maybe type" "temp"
    (773818 'move' call_tmp[773815](773783 'is bound' borrowOfThis[773768] c"eltType"))
    if call_tmp[773815]
    {
      unknown call_tmp[773820] "expr temp" "maybe param" "maybe type" "temp"
      (773823 'move' call_tmp[773820](773778 '.v' borrowOfThis[773768] c"eltType"))
      unknown call_tmp[773825] "expr temp" "maybe param" "maybe type" "temp"
      (773828 'move' call_tmp[773825](773779 call chpl_checkLegalTypeFieldAccessor this[773766] call_tmp[773820] "eltType"))
      (773806 'move' ret[773801](773805 'deref' call_tmp[773825]))
      gotoReturn _end_eltType[773799] _end_eltType[773799]
      (773796 'end of statement' borrowOfThis[773768])
    }
    {
      (773811 'move' ret[773801](773810 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773799] _end_eltType[773799]
    }
    label _end_eltType[773799]
    (773803 return ret[773801])
  }
  function LogicalOrReduceScanOp[83394](?).value[773830](arg _mt[773832]:_MT[238], arg this[773834]:LogicalOrReduceScanOp[83394](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773844] "RVV" "temp"
    unknown call_tmp[773851] "expr temp" "maybe param" "maybe type" "temp"
    (773854 'move' call_tmp[773851](773838 '.' this[773834] c"value"))
    (773849 'move' ret[773844](773848 'addr of' call_tmp[773851]))
    (773846 return ret[773844])
  }
  function LogicalOrReduceScanOp[83394](?).init[773856](arg _mt[773858]:_MT[238], arg this[773859]:LogicalOrReduceScanOp[83394](?), in arg l[773872]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[773875]:_any[178](?), in arg value[773884] :
  (773891 call _lor_id eltType[773875]) =
  (773886 call _lor_id eltType[773875])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[773903] "temporary of super field" "temp"
    (773905 'move' super_tmp[773903](773902 '.v' this[773859] c"super"))
    (773869 call(773867 call (partial) init _mt[243] super_tmp[773903]) l[773872])
    (773932 'end of statement')
    unknown tmp[773908] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[773936] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[773948] "expr temp" "maybe param" "maybe type" "temp"
      (773951 'move' call_tmp[773948](773910 '.v' this[773859] c"super"))
      (773940 'move' call_type_tmp[773936](773913 'typeof' call_tmp[773948]))
    }
    (773914 'move' tmp[773908] call_type_tmp[773936])
    unknown call_tmp[773953] "maybe param" "maybe type" "temp"
    (773956 'move' call_tmp[773953](773919 'cast' tmp[773908] this[773859]))
    unknown chpl__thisAsParent[773916] "dead at end of block" "insert auto destroy" "temp"
    (773944 'init var' chpl__thisAsParent[773916] call_tmp[773953] tmp[773908])
    (773922 'setcid' chpl__thisAsParent[773916])
    (773924 'init field' this[773859] c"eltType" eltType[773875])
    (773933 'end of statement')
    (773927 '.=' this[773859] c"value" value[773884])
    (773934 'end of statement')
    (773930 'setcid' this[773859])
    (773942 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).deinit[773958](arg _mt[773960]:_MT[238], arg this[773962]:LogicalOrReduceScanOp[83394](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (773970 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).writeThis[773972](arg _mt[773976]:_MT[238], arg this[773974]:LogicalOrReduceScanOp[83394](?), arg f[773975]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773981 call writeThisDefaultImpl f[773975] this[773974])
    (773986 return _void[55])
  }
  function LogicalOrReduceScanOp[83394](?).readThis[773988](arg _mt[773992]:_MT[238], arg this[773990]:LogicalOrReduceScanOp[83394](?), arg f[773991]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773996 call readThisDefaultImpl f[773991] this[773990])
    (774002 return _void[55])
  }
  type LogicalOrReduceScanOp[83394](?) val super[355660]:ReduceScanOp[82300] "super class" unknown eltType[83268] "type variable" unknown value[83275](83274 call _lor_id eltType[83268])
  type LogicalOrReduceScanOp[773696](?)
  type LogicalOrReduceScanOp[376692](?)
  function BitwiseAndReduceScanOp[83523](?).identity[83437](arg _mt[83527]:_MT[238], arg this[83525]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512506] "RVV" "temp"
    unknown call_tmp[629392] "expr temp" "maybe param" "maybe type" "temp"
    (629395 'move' call_tmp[629392](376703 call eltType _mt[243] this[83525]))
    unknown call_tmp[629397] "expr temp" "maybe param" "maybe type" "temp"
    (629400 'move' call_tmp[629397](83442 call _band_id call_tmp[629392]))
    (512511 'move' ret[512506](512510 'deref' call_tmp[629397]))
    (512508 return ret[512506])
  }
  function BitwiseAndReduceScanOp[83523](?).accumulate[83452](arg _mt[83531]:_MT[238], arg this[83529]:BitwiseAndReduceScanOp[83523](?), arg x[83450]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629404] "expr temp" "maybe param" "maybe type" "temp"
    (629407 'move' call_tmp[629404](376708 call value _mt[243] this[83529]))
    (83456 call &= call_tmp[629404] x[83450])
    (512513 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).accumulateOntoState[83466](arg _mt[83535]:_MT[238], arg this[83533]:BitwiseAndReduceScanOp[83523](?), ref arg state[83464]:_any[178](?), arg x[83468]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83472 call &= state[83464] x[83468])
    (512515 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).combine[83482](arg _mt[83539]:_MT[238], arg this[83537]:BitwiseAndReduceScanOp[83523](?), arg x[83480]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629411] "expr temp" "maybe param" "maybe type" "temp"
    (629414 'move' call_tmp[629411](376716 call value _mt[243] this[83537]))
    unknown call_tmp[629418] "expr temp" "maybe param" "maybe type" "temp"
    (629421 'move' call_tmp[629418](83486 call value _mt[243] x[83480]))
    (83489 call &= call_tmp[629411] call_tmp[629418])
    (512517 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).generate[83497](arg _mt[83543]:_MT[238], arg this[83541]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512521] "RVV" "temp"
    unknown call_tmp[629425] "expr temp" "maybe param" "maybe type" "temp"
    (629428 'move' call_tmp[629425](376721 call value _mt[243] this[83541]))
    (512526 'move' ret[512521](512525 'deref' call_tmp[629425]))
    (512523 return ret[512521])
  }
  function BitwiseAndReduceScanOp[83523](?).clone[83507](arg _mt[83547]:_MT[238], arg this[83545]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512530] "RVV" "temp"
    unknown call_tmp[629432] "expr temp" "maybe param" "maybe type" "temp"
    (629435 'move' call_tmp[629432](376730 call eltType _mt[243] this[83545]))
    unknown call_tmp[629437] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629440 'move' call_tmp[629437](747820 'new' BitwiseAndReduceScanOp[376725](?)(eltType = call_tmp[629432])(_chpl_manager = unmanaged[220](?))))
    (512535 'move' ret[512530](512534 'deref' call_tmp[629437]))
    (512532 return ret[512530])
  }
  function BitwiseAndReduceScanOp[83523](?).super[774004](arg _mt[774006]:_MT[238], arg this[774008]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774018] "RVV" "temp"
    unknown call_tmp[774025] "expr temp" "maybe param" "maybe type" "temp"
    (774028 'move' call_tmp[774025](774012 '.v' this[774008] c"super"))
    (774023 'move' ret[774018](774022 'deref' call_tmp[774025]))
    (774020 return ret[774018])
  }
  function BitwiseAndReduceScanOp[774035](?).eltType[774030](arg _mt[774032]:_MT[238], arg this[774037]:BitwiseAndReduceScanOp[774035](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774072] "RVV" "temp" "type variable"
    unknown borrowOfThis[774039]
    (774064 'end of statement')
    (774041 'move' borrowOfThis[774039](774044 call _cast _borrowedNonNilable[214](?) this[774037]))
    (774065 'end of statement' borrowOfThis[774039])
    unknown call_tmp[774086] "expr temp" "maybe param" "maybe type" "temp"
    (774089 'move' call_tmp[774086](774054 'is bound' borrowOfThis[774039] c"eltType"))
    if call_tmp[774086]
    {
      unknown call_tmp[774091] "expr temp" "maybe param" "maybe type" "temp"
      (774094 'move' call_tmp[774091](774049 '.v' borrowOfThis[774039] c"eltType"))
      unknown call_tmp[774096] "expr temp" "maybe param" "maybe type" "temp"
      (774099 'move' call_tmp[774096](774050 call chpl_checkLegalTypeFieldAccessor this[774037] call_tmp[774091] "eltType"))
      (774077 'move' ret[774072](774076 'deref' call_tmp[774096]))
      gotoReturn _end_eltType[774070] _end_eltType[774070]
      (774067 'end of statement' borrowOfThis[774039])
    }
    {
      (774082 'move' ret[774072](774081 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774070] _end_eltType[774070]
    }
    label _end_eltType[774070]
    (774074 return ret[774072])
  }
  function BitwiseAndReduceScanOp[774035](?).eltType[774101](arg _mt[774103]:_MT[238], arg this[774105]:BitwiseAndReduceScanOp[774035](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774140] "RVV" "temp" "type variable"
    unknown borrowOfThis[774107] "type variable"
    (774132 'end of statement')
    (774109 'move' borrowOfThis[774107](774112 call _cast _borrowedNonNilable[214](?) this[774105]))
    (774133 'end of statement' borrowOfThis[774107])
    unknown call_tmp[774154] "expr temp" "maybe param" "maybe type" "temp"
    (774157 'move' call_tmp[774154](774122 'is bound' borrowOfThis[774107] c"eltType"))
    if call_tmp[774154]
    {
      unknown call_tmp[774159] "expr temp" "maybe param" "maybe type" "temp"
      (774162 'move' call_tmp[774159](774117 '.v' borrowOfThis[774107] c"eltType"))
      unknown call_tmp[774164] "expr temp" "maybe param" "maybe type" "temp"
      (774167 'move' call_tmp[774164](774118 call chpl_checkLegalTypeFieldAccessor this[774105] call_tmp[774159] "eltType"))
      (774145 'move' ret[774140](774144 'deref' call_tmp[774164]))
      gotoReturn _end_eltType[774138] _end_eltType[774138]
      (774135 'end of statement' borrowOfThis[774107])
    }
    {
      (774150 'move' ret[774140](774149 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774138] _end_eltType[774138]
    }
    label _end_eltType[774138]
    (774142 return ret[774140])
  }
  function BitwiseAndReduceScanOp[83523](?).value[774169](arg _mt[774171]:_MT[238], arg this[774173]:BitwiseAndReduceScanOp[83523](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774183] "RVV" "temp"
    unknown call_tmp[774190] "expr temp" "maybe param" "maybe type" "temp"
    (774193 'move' call_tmp[774190](774177 '.' this[774173] c"value"))
    (774188 'move' ret[774183](774187 'addr of' call_tmp[774190]))
    (774185 return ret[774183])
  }
  function BitwiseAndReduceScanOp[83523](?).init[774195](arg _mt[774197]:_MT[238], arg this[774198]:BitwiseAndReduceScanOp[83523](?), in arg l[774211]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[774214]:_any[178](?), in arg value[774223] :
  (774230 call _band_id eltType[774214]) =
  (774225 call _band_id eltType[774214])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[774242] "temporary of super field" "temp"
    (774244 'move' super_tmp[774242](774241 '.v' this[774198] c"super"))
    (774208 call(774206 call (partial) init _mt[243] super_tmp[774242]) l[774211])
    (774271 'end of statement')
    unknown tmp[774247] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[774275] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[774287] "expr temp" "maybe param" "maybe type" "temp"
      (774290 'move' call_tmp[774287](774249 '.v' this[774198] c"super"))
      (774279 'move' call_type_tmp[774275](774252 'typeof' call_tmp[774287]))
    }
    (774253 'move' tmp[774247] call_type_tmp[774275])
    unknown call_tmp[774292] "maybe param" "maybe type" "temp"
    (774295 'move' call_tmp[774292](774258 'cast' tmp[774247] this[774198]))
    unknown chpl__thisAsParent[774255] "dead at end of block" "insert auto destroy" "temp"
    (774283 'init var' chpl__thisAsParent[774255] call_tmp[774292] tmp[774247])
    (774261 'setcid' chpl__thisAsParent[774255])
    (774263 'init field' this[774198] c"eltType" eltType[774214])
    (774272 'end of statement')
    (774266 '.=' this[774198] c"value" value[774223])
    (774273 'end of statement')
    (774269 'setcid' this[774198])
    (774281 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).deinit[774297](arg _mt[774299]:_MT[238], arg this[774301]:BitwiseAndReduceScanOp[83523](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (774309 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).writeThis[774311](arg _mt[774315]:_MT[238], arg this[774313]:BitwiseAndReduceScanOp[83523](?), arg f[774314]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774320 call writeThisDefaultImpl f[774314] this[774313])
    (774325 return _void[55])
  }
  function BitwiseAndReduceScanOp[83523](?).readThis[774327](arg _mt[774331]:_MT[238], arg this[774329]:BitwiseAndReduceScanOp[83523](?), arg f[774330]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774335 call readThisDefaultImpl f[774330] this[774329])
    (774341 return _void[55])
  }
  type BitwiseAndReduceScanOp[83523](?) val super[355662]:ReduceScanOp[82300] "super class" unknown eltType[83424] "type variable" unknown value[83431](83430 call _band_id eltType[83424])
  type BitwiseAndReduceScanOp[774035](?)
  type BitwiseAndReduceScanOp[376725](?)
  function BitwiseOrReduceScanOp[83652](?).identity[83566](arg _mt[83656]:_MT[238], arg this[83654]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512539] "RVV" "temp"
    unknown call_tmp[629444] "expr temp" "maybe param" "maybe type" "temp"
    (629447 'move' call_tmp[629444](376736 call eltType _mt[243] this[83654]))
    unknown call_tmp[629449] "expr temp" "maybe param" "maybe type" "temp"
    (629452 'move' call_tmp[629449](83571 call _bor_id call_tmp[629444]))
    (512544 'move' ret[512539](512543 'deref' call_tmp[629449]))
    (512541 return ret[512539])
  }
  function BitwiseOrReduceScanOp[83652](?).accumulate[83581](arg _mt[83660]:_MT[238], arg this[83658]:BitwiseOrReduceScanOp[83652](?), arg x[83579]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629456] "expr temp" "maybe param" "maybe type" "temp"
    (629459 'move' call_tmp[629456](376741 call value _mt[243] this[83658]))
    (83585 call |= call_tmp[629456] x[83579])
    (512546 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).accumulateOntoState[83595](arg _mt[83664]:_MT[238], arg this[83662]:BitwiseOrReduceScanOp[83652](?), ref arg state[83593]:_any[178](?), arg x[83597]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83601 call |= state[83593] x[83597])
    (512548 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).combine[83611](arg _mt[83668]:_MT[238], arg this[83666]:BitwiseOrReduceScanOp[83652](?), arg x[83609]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629463] "expr temp" "maybe param" "maybe type" "temp"
    (629466 'move' call_tmp[629463](376749 call value _mt[243] this[83666]))
    unknown call_tmp[629470] "expr temp" "maybe param" "maybe type" "temp"
    (629473 'move' call_tmp[629470](83615 call value _mt[243] x[83609]))
    (83618 call |= call_tmp[629463] call_tmp[629470])
    (512550 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).generate[83626](arg _mt[83672]:_MT[238], arg this[83670]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512554] "RVV" "temp"
    unknown call_tmp[629477] "expr temp" "maybe param" "maybe type" "temp"
    (629480 'move' call_tmp[629477](376754 call value _mt[243] this[83670]))
    (512559 'move' ret[512554](512558 'deref' call_tmp[629477]))
    (512556 return ret[512554])
  }
  function BitwiseOrReduceScanOp[83652](?).clone[83636](arg _mt[83676]:_MT[238], arg this[83674]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512563] "RVV" "temp"
    unknown call_tmp[629484] "expr temp" "maybe param" "maybe type" "temp"
    (629487 'move' call_tmp[629484](376763 call eltType _mt[243] this[83674]))
    unknown call_tmp[629489] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629492 'move' call_tmp[629489](747821 'new' BitwiseOrReduceScanOp[376758](?)(eltType = call_tmp[629484])(_chpl_manager = unmanaged[220](?))))
    (512568 'move' ret[512563](512567 'deref' call_tmp[629489]))
    (512565 return ret[512563])
  }
  function BitwiseOrReduceScanOp[83652](?).super[774343](arg _mt[774345]:_MT[238], arg this[774347]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774357] "RVV" "temp"
    unknown call_tmp[774364] "expr temp" "maybe param" "maybe type" "temp"
    (774367 'move' call_tmp[774364](774351 '.v' this[774347] c"super"))
    (774362 'move' ret[774357](774361 'deref' call_tmp[774364]))
    (774359 return ret[774357])
  }
  function BitwiseOrReduceScanOp[774374](?).eltType[774369](arg _mt[774371]:_MT[238], arg this[774376]:BitwiseOrReduceScanOp[774374](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774411] "RVV" "temp" "type variable"
    unknown borrowOfThis[774378]
    (774403 'end of statement')
    (774380 'move' borrowOfThis[774378](774383 call _cast _borrowedNonNilable[214](?) this[774376]))
    (774404 'end of statement' borrowOfThis[774378])
    unknown call_tmp[774425] "expr temp" "maybe param" "maybe type" "temp"
    (774428 'move' call_tmp[774425](774393 'is bound' borrowOfThis[774378] c"eltType"))
    if call_tmp[774425]
    {
      unknown call_tmp[774430] "expr temp" "maybe param" "maybe type" "temp"
      (774433 'move' call_tmp[774430](774388 '.v' borrowOfThis[774378] c"eltType"))
      unknown call_tmp[774435] "expr temp" "maybe param" "maybe type" "temp"
      (774438 'move' call_tmp[774435](774389 call chpl_checkLegalTypeFieldAccessor this[774376] call_tmp[774430] "eltType"))
      (774416 'move' ret[774411](774415 'deref' call_tmp[774435]))
      gotoReturn _end_eltType[774409] _end_eltType[774409]
      (774406 'end of statement' borrowOfThis[774378])
    }
    {
      (774421 'move' ret[774411](774420 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774409] _end_eltType[774409]
    }
    label _end_eltType[774409]
    (774413 return ret[774411])
  }
  function BitwiseOrReduceScanOp[774374](?).eltType[774440](arg _mt[774442]:_MT[238], arg this[774444]:BitwiseOrReduceScanOp[774374](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774479] "RVV" "temp" "type variable"
    unknown borrowOfThis[774446] "type variable"
    (774471 'end of statement')
    (774448 'move' borrowOfThis[774446](774451 call _cast _borrowedNonNilable[214](?) this[774444]))
    (774472 'end of statement' borrowOfThis[774446])
    unknown call_tmp[774493] "expr temp" "maybe param" "maybe type" "temp"
    (774496 'move' call_tmp[774493](774461 'is bound' borrowOfThis[774446] c"eltType"))
    if call_tmp[774493]
    {
      unknown call_tmp[774498] "expr temp" "maybe param" "maybe type" "temp"
      (774501 'move' call_tmp[774498](774456 '.v' borrowOfThis[774446] c"eltType"))
      unknown call_tmp[774503] "expr temp" "maybe param" "maybe type" "temp"
      (774506 'move' call_tmp[774503](774457 call chpl_checkLegalTypeFieldAccessor this[774444] call_tmp[774498] "eltType"))
      (774484 'move' ret[774479](774483 'deref' call_tmp[774503]))
      gotoReturn _end_eltType[774477] _end_eltType[774477]
      (774474 'end of statement' borrowOfThis[774446])
    }
    {
      (774489 'move' ret[774479](774488 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774477] _end_eltType[774477]
    }
    label _end_eltType[774477]
    (774481 return ret[774479])
  }
  function BitwiseOrReduceScanOp[83652](?).value[774508](arg _mt[774510]:_MT[238], arg this[774512]:BitwiseOrReduceScanOp[83652](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774522] "RVV" "temp"
    unknown call_tmp[774529] "expr temp" "maybe param" "maybe type" "temp"
    (774532 'move' call_tmp[774529](774516 '.' this[774512] c"value"))
    (774527 'move' ret[774522](774526 'addr of' call_tmp[774529]))
    (774524 return ret[774522])
  }
  function BitwiseOrReduceScanOp[83652](?).init[774534](arg _mt[774536]:_MT[238], arg this[774537]:BitwiseOrReduceScanOp[83652](?), in arg l[774550]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[774553]:_any[178](?), in arg value[774562] :
  (774569 call _bor_id eltType[774553]) =
  (774564 call _bor_id eltType[774553])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[774581] "temporary of super field" "temp"
    (774583 'move' super_tmp[774581](774580 '.v' this[774537] c"super"))
    (774547 call(774545 call (partial) init _mt[243] super_tmp[774581]) l[774550])
    (774610 'end of statement')
    unknown tmp[774586] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[774614] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[774626] "expr temp" "maybe param" "maybe type" "temp"
      (774629 'move' call_tmp[774626](774588 '.v' this[774537] c"super"))
      (774618 'move' call_type_tmp[774614](774591 'typeof' call_tmp[774626]))
    }
    (774592 'move' tmp[774586] call_type_tmp[774614])
    unknown call_tmp[774631] "maybe param" "maybe type" "temp"
    (774634 'move' call_tmp[774631](774597 'cast' tmp[774586] this[774537]))
    unknown chpl__thisAsParent[774594] "dead at end of block" "insert auto destroy" "temp"
    (774622 'init var' chpl__thisAsParent[774594] call_tmp[774631] tmp[774586])
    (774600 'setcid' chpl__thisAsParent[774594])
    (774602 'init field' this[774537] c"eltType" eltType[774553])
    (774611 'end of statement')
    (774605 '.=' this[774537] c"value" value[774562])
    (774612 'end of statement')
    (774608 'setcid' this[774537])
    (774620 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).deinit[774636](arg _mt[774638]:_MT[238], arg this[774640]:BitwiseOrReduceScanOp[83652](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (774648 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).writeThis[774650](arg _mt[774654]:_MT[238], arg this[774652]:BitwiseOrReduceScanOp[83652](?), arg f[774653]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774659 call writeThisDefaultImpl f[774653] this[774652])
    (774664 return _void[55])
  }
  function BitwiseOrReduceScanOp[83652](?).readThis[774666](arg _mt[774670]:_MT[238], arg this[774668]:BitwiseOrReduceScanOp[83652](?), arg f[774669]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774674 call readThisDefaultImpl f[774669] this[774668])
    (774680 return _void[55])
  }
  type BitwiseOrReduceScanOp[83652](?) val super[355664]:ReduceScanOp[82300] "super class" unknown eltType[83553] "type variable" unknown value[83560](83559 call _bor_id eltType[83553])
  type BitwiseOrReduceScanOp[774374](?)
  type BitwiseOrReduceScanOp[376758](?)
  function BitwiseXorReduceScanOp[83781](?).identity[83695](arg _mt[83785]:_MT[238], arg this[83783]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512572] "RVV" "temp"
    unknown call_tmp[629496] "expr temp" "maybe param" "maybe type" "temp"
    (629499 'move' call_tmp[629496](376769 call eltType _mt[243] this[83783]))
    unknown call_tmp[629501] "expr temp" "maybe param" "maybe type" "temp"
    (629504 'move' call_tmp[629501](83700 call _bxor_id call_tmp[629496]))
    (512577 'move' ret[512572](512576 'deref' call_tmp[629501]))
    (512574 return ret[512572])
  }
  function BitwiseXorReduceScanOp[83781](?).accumulate[83710](arg _mt[83789]:_MT[238], arg this[83787]:BitwiseXorReduceScanOp[83781](?), arg x[83708]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629508] "expr temp" "maybe param" "maybe type" "temp"
    (629511 'move' call_tmp[629508](376774 call value _mt[243] this[83787]))
    (83714 call ^= call_tmp[629508] x[83708])
    (512579 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).accumulateOntoState[83724](arg _mt[83793]:_MT[238], arg this[83791]:BitwiseXorReduceScanOp[83781](?), ref arg state[83722]:_any[178](?), arg x[83726]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83730 call ^= state[83722] x[83726])
    (512581 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).combine[83740](arg _mt[83797]:_MT[238], arg this[83795]:BitwiseXorReduceScanOp[83781](?), arg x[83738]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629515] "expr temp" "maybe param" "maybe type" "temp"
    (629518 'move' call_tmp[629515](376782 call value _mt[243] this[83795]))
    unknown call_tmp[629522] "expr temp" "maybe param" "maybe type" "temp"
    (629525 'move' call_tmp[629522](83744 call value _mt[243] x[83738]))
    (83747 call ^= call_tmp[629515] call_tmp[629522])
    (512583 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).generate[83755](arg _mt[83801]:_MT[238], arg this[83799]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512587] "RVV" "temp"
    unknown call_tmp[629529] "expr temp" "maybe param" "maybe type" "temp"
    (629532 'move' call_tmp[629529](376787 call value _mt[243] this[83799]))
    (512592 'move' ret[512587](512591 'deref' call_tmp[629529]))
    (512589 return ret[512587])
  }
  function BitwiseXorReduceScanOp[83781](?).clone[83765](arg _mt[83805]:_MT[238], arg this[83803]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512596] "RVV" "temp"
    unknown call_tmp[629536] "expr temp" "maybe param" "maybe type" "temp"
    (629539 'move' call_tmp[629536](376796 call eltType _mt[243] this[83803]))
    unknown call_tmp[629541] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629544 'move' call_tmp[629541](747822 'new' BitwiseXorReduceScanOp[376791](?)(eltType = call_tmp[629536])(_chpl_manager = unmanaged[220](?))))
    (512601 'move' ret[512596](512600 'deref' call_tmp[629541]))
    (512598 return ret[512596])
  }
  function BitwiseXorReduceScanOp[83781](?).super[774682](arg _mt[774684]:_MT[238], arg this[774686]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774696] "RVV" "temp"
    unknown call_tmp[774703] "expr temp" "maybe param" "maybe type" "temp"
    (774706 'move' call_tmp[774703](774690 '.v' this[774686] c"super"))
    (774701 'move' ret[774696](774700 'deref' call_tmp[774703]))
    (774698 return ret[774696])
  }
  function BitwiseXorReduceScanOp[774713](?).eltType[774708](arg _mt[774710]:_MT[238], arg this[774715]:BitwiseXorReduceScanOp[774713](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774750] "RVV" "temp" "type variable"
    unknown borrowOfThis[774717]
    (774742 'end of statement')
    (774719 'move' borrowOfThis[774717](774722 call _cast _borrowedNonNilable[214](?) this[774715]))
    (774743 'end of statement' borrowOfThis[774717])
    unknown call_tmp[774764] "expr temp" "maybe param" "maybe type" "temp"
    (774767 'move' call_tmp[774764](774732 'is bound' borrowOfThis[774717] c"eltType"))
    if call_tmp[774764]
    {
      unknown call_tmp[774769] "expr temp" "maybe param" "maybe type" "temp"
      (774772 'move' call_tmp[774769](774727 '.v' borrowOfThis[774717] c"eltType"))
      unknown call_tmp[774774] "expr temp" "maybe param" "maybe type" "temp"
      (774777 'move' call_tmp[774774](774728 call chpl_checkLegalTypeFieldAccessor this[774715] call_tmp[774769] "eltType"))
      (774755 'move' ret[774750](774754 'deref' call_tmp[774774]))
      gotoReturn _end_eltType[774748] _end_eltType[774748]
      (774745 'end of statement' borrowOfThis[774717])
    }
    {
      (774760 'move' ret[774750](774759 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774748] _end_eltType[774748]
    }
    label _end_eltType[774748]
    (774752 return ret[774750])
  }
  function BitwiseXorReduceScanOp[774713](?).eltType[774779](arg _mt[774781]:_MT[238], arg this[774783]:BitwiseXorReduceScanOp[774713](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774818] "RVV" "temp" "type variable"
    unknown borrowOfThis[774785] "type variable"
    (774810 'end of statement')
    (774787 'move' borrowOfThis[774785](774790 call _cast _borrowedNonNilable[214](?) this[774783]))
    (774811 'end of statement' borrowOfThis[774785])
    unknown call_tmp[774832] "expr temp" "maybe param" "maybe type" "temp"
    (774835 'move' call_tmp[774832](774800 'is bound' borrowOfThis[774785] c"eltType"))
    if call_tmp[774832]
    {
      unknown call_tmp[774837] "expr temp" "maybe param" "maybe type" "temp"
      (774840 'move' call_tmp[774837](774795 '.v' borrowOfThis[774785] c"eltType"))
      unknown call_tmp[774842] "expr temp" "maybe param" "maybe type" "temp"
      (774845 'move' call_tmp[774842](774796 call chpl_checkLegalTypeFieldAccessor this[774783] call_tmp[774837] "eltType"))
      (774823 'move' ret[774818](774822 'deref' call_tmp[774842]))
      gotoReturn _end_eltType[774816] _end_eltType[774816]
      (774813 'end of statement' borrowOfThis[774785])
    }
    {
      (774828 'move' ret[774818](774827 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774816] _end_eltType[774816]
    }
    label _end_eltType[774816]
    (774820 return ret[774818])
  }
  function BitwiseXorReduceScanOp[83781](?).value[774847](arg _mt[774849]:_MT[238], arg this[774851]:BitwiseXorReduceScanOp[83781](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774861] "RVV" "temp"
    unknown call_tmp[774868] "expr temp" "maybe param" "maybe type" "temp"
    (774871 'move' call_tmp[774868](774855 '.' this[774851] c"value"))
    (774866 'move' ret[774861](774865 'addr of' call_tmp[774868]))
    (774863 return ret[774861])
  }
  function BitwiseXorReduceScanOp[83781](?).init[774873](arg _mt[774875]:_MT[238], arg this[774876]:BitwiseXorReduceScanOp[83781](?), in arg l[774889]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[774892]:_any[178](?), in arg value[774901] :
  (774908 call _bxor_id eltType[774892]) =
  (774903 call _bxor_id eltType[774892])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[774920] "temporary of super field" "temp"
    (774922 'move' super_tmp[774920](774919 '.v' this[774876] c"super"))
    (774886 call(774884 call (partial) init _mt[243] super_tmp[774920]) l[774889])
    (774949 'end of statement')
    unknown tmp[774925] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[774953] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[774965] "expr temp" "maybe param" "maybe type" "temp"
      (774968 'move' call_tmp[774965](774927 '.v' this[774876] c"super"))
      (774957 'move' call_type_tmp[774953](774930 'typeof' call_tmp[774965]))
    }
    (774931 'move' tmp[774925] call_type_tmp[774953])
    unknown call_tmp[774970] "maybe param" "maybe type" "temp"
    (774973 'move' call_tmp[774970](774936 'cast' tmp[774925] this[774876]))
    unknown chpl__thisAsParent[774933] "dead at end of block" "insert auto destroy" "temp"
    (774961 'init var' chpl__thisAsParent[774933] call_tmp[774970] tmp[774925])
    (774939 'setcid' chpl__thisAsParent[774933])
    (774941 'init field' this[774876] c"eltType" eltType[774892])
    (774950 'end of statement')
    (774944 '.=' this[774876] c"value" value[774901])
    (774951 'end of statement')
    (774947 'setcid' this[774876])
    (774959 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).deinit[774975](arg _mt[774977]:_MT[238], arg this[774979]:BitwiseXorReduceScanOp[83781](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (774987 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).writeThis[774989](arg _mt[774993]:_MT[238], arg this[774991]:BitwiseXorReduceScanOp[83781](?), arg f[774992]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774998 call writeThisDefaultImpl f[774992] this[774991])
    (775003 return _void[55])
  }
  function BitwiseXorReduceScanOp[83781](?).readThis[775005](arg _mt[775009]:_MT[238], arg this[775007]:BitwiseXorReduceScanOp[83781](?), arg f[775008]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775013 call readThisDefaultImpl f[775008] this[775007])
    (775019 return _void[55])
  }
  type BitwiseXorReduceScanOp[83781](?) val super[355666]:ReduceScanOp[82300] "super class" unknown eltType[83682] "type variable" unknown value[83689](83688 call _bxor_id eltType[83682])
  type BitwiseXorReduceScanOp[774713](?)
  type BitwiseXorReduceScanOp[376791](?)
  function _maxloc_id[83812](arg eltType[83810]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512605] "RVV" "temp"
    unknown call_tmp[629546] "expr temp" "maybe param" "maybe type" "temp"
    (629549 'move' call_tmp[629546](83818 call eltType[83810] 0))
    unknown call_tmp[629551] "expr temp" "maybe param" "maybe type" "temp"
    (629554 'move' call_tmp[629551](83820 call min call_tmp[629546]))
    unknown call_tmp[629556] "expr temp" "maybe param" "maybe type" "temp"
    (629559 'move' call_tmp[629556](83825 call eltType[83810] 1))
    unknown call_tmp[629561] "expr temp" "maybe param" "maybe type" "temp"
    (629564 'move' call_tmp[629561](83827 call max call_tmp[629556]))
    unknown call_tmp[629566] "expr temp" "maybe param" "maybe type" "temp"
    (629569 'move' call_tmp[629566](83829 call _build_tuple call_tmp[629551] call_tmp[629561]))
    (512610 'move' ret[512605](512609 'deref' call_tmp[629566]))
    (512607 return ret[512605])
  }
  function _minloc_id[83840](arg eltType[83838]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512614] "RVV" "temp"
    unknown call_tmp[629571] "expr temp" "maybe param" "maybe type" "temp"
    (629574 'move' call_tmp[629571](83845 call max eltType[83838]))
    (512619 'move' ret[512614](512618 'deref' call_tmp[629571]))
    (512616 return ret[512614])
  }
  function maxloc[84026](?).identity[83867](arg _mt[84030]:_MT[238], arg this[84028]:maxloc[84026](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512623] "RVV" "temp"
    unknown call_tmp[629578] "expr temp" "maybe param" "maybe type" "temp"
    (629581 'move' call_tmp[629578](376805 call eltType _mt[243] this[84028]))
    unknown call_tmp[629583] "expr temp" "maybe param" "maybe type" "temp"
    (629586 'move' call_tmp[629583](83872 call _maxloc_id call_tmp[629578]))
    (512628 'move' ret[512623](512627 'deref' call_tmp[629583]))
    (512625 return ret[512623])
  }
  function maxloc[84026](?).accumulate[83882](arg _mt[84034]:_MT[238], arg this[84032]:maxloc[84026](?), arg x[83880]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629592] "expr temp" "maybe param" "maybe type" "temp"
    (629595 'move' call_tmp[629592](376814 call value _mt[243] this[84032]))
    (83888 call(376809 call (partial) accumulateOntoState _mt[243] this[84032]) call_tmp[629592] x[83880])
    (512630 return _void[55])
  }
  function maxloc[84026](?).accumulateOntoState[83897](arg _mt[84038]:_MT[238], arg this[84036]:maxloc[84026](?), ref arg state[83895]:_any[178](?), arg x[83899]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421856] "maybe param" "temp"
    unknown tmp[421877] "maybe param" "temp"
    unknown call_tmp[629597] "expr temp" "maybe param" "maybe type" "temp"
    (629600 'move' call_tmp[629597](83904 call x[83899] 0))
    unknown call_tmp[629602] "expr temp" "maybe param" "maybe type" "temp"
    (629605 'move' call_tmp[629602](83908 call state[83895] 0))
    (421888 'move' tmp[421877](83909 call > call_tmp[629597] call_tmp[629602]))
    unknown call_tmp[629607] "expr temp" "maybe param" "maybe type" "temp"
    (629610 'move' call_tmp[629607](421890 call _cond_invalid tmp[421877]))
    if call_tmp[629607]
    {
      (421893 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560318] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560319] "maybe param" "temp"
    unknown call_tmp[629612] "expr temp" "maybe param" "maybe type" "temp"
    (629615 'move' call_tmp[629612](421878 call isTrue tmp[421877]))
    (560324 'move' tmp[560319](560322 call _cond_test call_tmp[629612]))
    if tmp[560319]
    {
      (560329 'move' tmp[560318](560326 '_paramFoldLogical' tmp[560319] 1))
    }
    {
      unknown tmp[421898] "maybe param" "temp"
      unknown call_tmp[629617] "expr temp" "maybe param" "maybe type" "temp"
      (629620 'move' call_tmp[629617](83914 call x[83899] 0))
      unknown call_tmp[629622] "expr temp" "maybe param" "maybe type" "temp"
      (629625 'move' call_tmp[629622](83918 call state[83895] 0))
      (421909 'move' tmp[421898](83919 call == call_tmp[629617] call_tmp[629622]))
      unknown call_tmp[629627] "expr temp" "maybe param" "maybe type" "temp"
      (629630 'move' call_tmp[629627](421911 call _cond_invalid tmp[421898]))
      if call_tmp[629627]
      {
        (421914 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560291] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560292] "maybe param" "temp"
      unknown call_tmp[629632] "expr temp" "maybe param" "maybe type" "temp"
      (629635 'move' call_tmp[629632](421899 call isTrue tmp[421898]))
      (560297 'move' tmp[560292](560295 call _cond_test call_tmp[629632]))
      if tmp[560292]
      {
        unknown tmp[560299] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629637] "expr temp" "maybe param" "maybe type" "temp"
        (629640 'move' call_tmp[629637](83924 call x[83899] 1))
        unknown call_tmp[629642] "expr temp" "maybe param" "maybe type" "temp"
        (629645 'move' call_tmp[629642](83928 call state[83895] 1))
        unknown call_tmp[629647] "expr temp" "maybe param" "maybe type" "temp"
        (629650 'move' call_tmp[629647](83929 call < call_tmp[629637] call_tmp[629642]))
        (560301 'move' tmp[560299](421902 call isTrue call_tmp[629647]))
        (560306 'move' tmp[560291](560303 '_paramFoldLogical' tmp[560292] tmp[560299]))
      }
      {
        (560311 'move' tmp[560291](560308 '_paramFoldLogical' tmp[560292] 0))
      }
      unknown tmp[560331] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560333 'move' tmp[560331](421882 call isTrue tmp[560291]))
      (560338 'move' tmp[560318](560335 '_paramFoldLogical' tmp[560319] tmp[560331]))
    }
    (421867 'move' tmp[421856] tmp[560318])
    unknown call_tmp[629652] "expr temp" "maybe param" "maybe type" "temp"
    (629655 'move' call_tmp[629652](421869 call _cond_invalid tmp[421856]))
    if call_tmp[629652]
    {
      (421872 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560399] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560400] "maybe param" "temp"
    unknown call_tmp[629657] "expr temp" "maybe param" "maybe type" "temp"
    (629660 'move' call_tmp[629657](421857 call isTrue tmp[421856]))
    (560405 'move' tmp[560400](560403 call _cond_test call_tmp[629657]))
    if tmp[560400]
    {
      (560410 'move' tmp[560399](560407 '_paramFoldLogical' tmp[560400] 1))
    }
    {
      unknown tmp[421919] "maybe param" "temp"
      unknown call_tmp[629662] "expr temp" "maybe param" "maybe type" "temp"
      (629665 'move' call_tmp[629662](83939 call x[83899] 0))
      (421930 'move' tmp[421919](83941 call gotNaN call_tmp[629662]))
      unknown call_tmp[629667] "expr temp" "maybe param" "maybe type" "temp"
      (629670 'move' call_tmp[629667](421932 call _cond_invalid tmp[421919]))
      if call_tmp[629667]
      {
        (421935 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560372] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560373] "maybe param" "temp"
      unknown call_tmp[629672] "expr temp" "maybe param" "maybe type" "temp"
      (629675 'move' call_tmp[629672](421920 call isTrue tmp[421919]))
      (560378 'move' tmp[560373](560376 call _cond_test call_tmp[629672]))
      if tmp[560373]
      {
        unknown tmp[421940] "maybe param" "temp"
        unknown call_tmp[629677] "expr temp" "maybe param" "maybe type" "temp"
        (629680 'move' call_tmp[629677](83946 call state[83895] 0))
        unknown call_tmp[629682] "expr temp" "maybe param" "maybe type" "temp"
        (629685 'move' call_tmp[629682](83948 call gotNaN call_tmp[629677]))
        (421951 'move' tmp[421940](83949 call ! call_tmp[629682]))
        unknown call_tmp[629687] "expr temp" "maybe param" "maybe type" "temp"
        (629690 'move' call_tmp[629687](421953 call _cond_invalid tmp[421940]))
        if call_tmp[629687]
        {
          (421956 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560345] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560346] "maybe param" "temp"
        unknown call_tmp[629692] "expr temp" "maybe param" "maybe type" "temp"
        (629695 'move' call_tmp[629692](421941 call isTrue tmp[421940]))
        (560351 'move' tmp[560346](560349 call _cond_test call_tmp[629692]))
        if tmp[560346]
        {
          (560356 'move' tmp[560345](560353 '_paramFoldLogical' tmp[560346] 1))
        }
        {
          unknown tmp[560358] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629697] "expr temp" "maybe param" "maybe type" "temp"
          (629700 'move' call_tmp[629697](83954 call x[83899] 1))
          unknown call_tmp[629702] "expr temp" "maybe param" "maybe type" "temp"
          (629705 'move' call_tmp[629702](83958 call state[83895] 1))
          unknown call_tmp[629707] "expr temp" "maybe param" "maybe type" "temp"
          (629710 'move' call_tmp[629707](83959 call < call_tmp[629697] call_tmp[629702]))
          (560360 'move' tmp[560358](421945 call isTrue call_tmp[629707]))
          (560365 'move' tmp[560345](560362 '_paramFoldLogical' tmp[560346] tmp[560358]))
        }
        unknown tmp[560380] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560382 'move' tmp[560380](421923 call isTrue tmp[560345]))
        (560387 'move' tmp[560372](560384 '_paramFoldLogical' tmp[560373] tmp[560380]))
      }
      {
        (560392 'move' tmp[560372](560389 '_paramFoldLogical' tmp[560373] 0))
      }
      unknown tmp[560412] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560414 'move' tmp[560412](421861 call isTrue tmp[560372]))
      (560419 'move' tmp[560399](560416 '_paramFoldLogical' tmp[560400] tmp[560412]))
    }
    unknown call_tmp[629712] "expr temp" "maybe param" "maybe type" "temp"
    (629715 'move' call_tmp[629712](83972 call _cond_test tmp[560399]))
    if call_tmp[629712]
    {
      (83969 call = state[83895] x[83899])
    }
    (512632 return _void[55])
  }
  function maxloc[84026](?).combine[83984](arg _mt[84042]:_MT[238], arg this[84040]:maxloc[84026](?), arg x[83982]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629721] "expr temp" "maybe param" "maybe type" "temp"
    (629724 'move' call_tmp[629721](376836 call value _mt[243] this[84040]))
    unknown call_tmp[629728] "expr temp" "maybe param" "maybe type" "temp"
    (629731 'move' call_tmp[629728](83990 call value _mt[243] x[83982]))
    (83993 call(376831 call (partial) accumulateOntoState _mt[243] this[84040]) call_tmp[629721] call_tmp[629728])
    (512634 return _void[55])
  }
  function maxloc[84026](?).generate[84000](arg _mt[84046]:_MT[238], arg this[84044]:maxloc[84026](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512638] "RVV" "temp"
    unknown call_tmp[629735] "expr temp" "maybe param" "maybe type" "temp"
    (629738 'move' call_tmp[629735](376841 call value _mt[243] this[84044]))
    (512643 'move' ret[512638](512642 'deref' call_tmp[629735]))
    (512640 return ret[512638])
  }
  function maxloc[84026](?).clone[84010](arg _mt[84050]:_MT[238], arg this[84048]:maxloc[84026](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512647] "RVV" "temp"
    unknown call_tmp[629742] "expr temp" "maybe param" "maybe type" "temp"
    (629745 'move' call_tmp[629742](376850 call eltType _mt[243] this[84048]))
    unknown call_tmp[629747] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629750 'move' call_tmp[629747](747823 'new' maxloc[376845](?)(eltType = call_tmp[629742])(_chpl_manager = unmanaged[220](?))))
    (512652 'move' ret[512647](512651 'deref' call_tmp[629747]))
    (512649 return ret[512647])
  }
  function maxloc[84026](?).super[775021](arg _mt[775023]:_MT[238], arg this[775025]:maxloc[84026](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775035] "RVV" "temp"
    unknown call_tmp[775042] "expr temp" "maybe param" "maybe type" "temp"
    (775045 'move' call_tmp[775042](775029 '.v' this[775025] c"super"))
    (775040 'move' ret[775035](775039 'deref' call_tmp[775042]))
    (775037 return ret[775035])
  }
  function maxloc[775052](?).eltType[775047](arg _mt[775049]:_MT[238], arg this[775054]:maxloc[775052](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775089] "RVV" "temp" "type variable"
    unknown borrowOfThis[775056]
    (775081 'end of statement')
    (775058 'move' borrowOfThis[775056](775061 call _cast _borrowedNonNilable[214](?) this[775054]))
    (775082 'end of statement' borrowOfThis[775056])
    unknown call_tmp[775103] "expr temp" "maybe param" "maybe type" "temp"
    (775106 'move' call_tmp[775103](775071 'is bound' borrowOfThis[775056] c"eltType"))
    if call_tmp[775103]
    {
      unknown call_tmp[775108] "expr temp" "maybe param" "maybe type" "temp"
      (775111 'move' call_tmp[775108](775066 '.v' borrowOfThis[775056] c"eltType"))
      unknown call_tmp[775113] "expr temp" "maybe param" "maybe type" "temp"
      (775116 'move' call_tmp[775113](775067 call chpl_checkLegalTypeFieldAccessor this[775054] call_tmp[775108] "eltType"))
      (775094 'move' ret[775089](775093 'deref' call_tmp[775113]))
      gotoReturn _end_eltType[775087] _end_eltType[775087]
      (775084 'end of statement' borrowOfThis[775056])
    }
    {
      (775099 'move' ret[775089](775098 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775087] _end_eltType[775087]
    }
    label _end_eltType[775087]
    (775091 return ret[775089])
  }
  function maxloc[775052](?).eltType[775118](arg _mt[775120]:_MT[238], arg this[775122]:maxloc[775052](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775157] "RVV" "temp" "type variable"
    unknown borrowOfThis[775124] "type variable"
    (775149 'end of statement')
    (775126 'move' borrowOfThis[775124](775129 call _cast _borrowedNonNilable[214](?) this[775122]))
    (775150 'end of statement' borrowOfThis[775124])
    unknown call_tmp[775171] "expr temp" "maybe param" "maybe type" "temp"
    (775174 'move' call_tmp[775171](775139 'is bound' borrowOfThis[775124] c"eltType"))
    if call_tmp[775171]
    {
      unknown call_tmp[775176] "expr temp" "maybe param" "maybe type" "temp"
      (775179 'move' call_tmp[775176](775134 '.v' borrowOfThis[775124] c"eltType"))
      unknown call_tmp[775181] "expr temp" "maybe param" "maybe type" "temp"
      (775184 'move' call_tmp[775181](775135 call chpl_checkLegalTypeFieldAccessor this[775122] call_tmp[775176] "eltType"))
      (775162 'move' ret[775157](775161 'deref' call_tmp[775181]))
      gotoReturn _end_eltType[775155] _end_eltType[775155]
      (775152 'end of statement' borrowOfThis[775124])
    }
    {
      (775167 'move' ret[775157](775166 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775155] _end_eltType[775155]
    }
    label _end_eltType[775155]
    (775159 return ret[775157])
  }
  function maxloc[84026](?).value[775186](arg _mt[775188]:_MT[238], arg this[775190]:maxloc[84026](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775200] "RVV" "temp"
    unknown call_tmp[775207] "expr temp" "maybe param" "maybe type" "temp"
    (775210 'move' call_tmp[775207](775194 '.' this[775190] c"value"))
    (775205 'move' ret[775200](775204 'addr of' call_tmp[775207]))
    (775202 return ret[775200])
  }
  function maxloc[84026](?).init[775212](arg _mt[775214]:_MT[238], arg this[775215]:maxloc[84026](?), in arg l[775228]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[775231]:_any[178](?), in arg value[775240] :
  (775247 call _maxloc_id eltType[775231]) =
  (775242 call _maxloc_id eltType[775231])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[775259] "temporary of super field" "temp"
    (775261 'move' super_tmp[775259](775258 '.v' this[775215] c"super"))
    (775225 call(775223 call (partial) init _mt[243] super_tmp[775259]) l[775228])
    (775288 'end of statement')
    unknown tmp[775264] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[775292] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[775304] "expr temp" "maybe param" "maybe type" "temp"
      (775307 'move' call_tmp[775304](775266 '.v' this[775215] c"super"))
      (775296 'move' call_type_tmp[775292](775269 'typeof' call_tmp[775304]))
    }
    (775270 'move' tmp[775264] call_type_tmp[775292])
    unknown call_tmp[775309] "maybe param" "maybe type" "temp"
    (775312 'move' call_tmp[775309](775275 'cast' tmp[775264] this[775215]))
    unknown chpl__thisAsParent[775272] "dead at end of block" "insert auto destroy" "temp"
    (775300 'init var' chpl__thisAsParent[775272] call_tmp[775309] tmp[775264])
    (775278 'setcid' chpl__thisAsParent[775272])
    (775280 'init field' this[775215] c"eltType" eltType[775231])
    (775289 'end of statement')
    (775283 '.=' this[775215] c"value" value[775240])
    (775290 'end of statement')
    (775286 'setcid' this[775215])
    (775298 return _void[55])
  }
  function maxloc[84026](?).deinit[775314](arg _mt[775316]:_MT[238], arg this[775318]:maxloc[84026](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (775326 return _void[55])
  }
  function maxloc[84026](?).writeThis[775328](arg _mt[775332]:_MT[238], arg this[775330]:maxloc[84026](?), arg f[775331]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775337 call writeThisDefaultImpl f[775331] this[775330])
    (775342 return _void[55])
  }
  function maxloc[84026](?).readThis[775344](arg _mt[775348]:_MT[238], arg this[775346]:maxloc[84026](?), arg f[775347]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775352 call readThisDefaultImpl f[775347] this[775346])
    (775358 return _void[55])
  }
  type maxloc[84026](?) val super[355668]:ReduceScanOp[82300] "super class" unknown eltType[83854] "type variable" unknown value[83861](83860 call _maxloc_id eltType[83854])
  type maxloc[775052](?)
  type maxloc[376845](?)
  function minloc[84228](?).identity[84069](arg _mt[84232]:_MT[238], arg this[84230]:minloc[84228](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512656] "RVV" "temp"
    unknown call_tmp[629754] "expr temp" "maybe param" "maybe type" "temp"
    (629757 'move' call_tmp[629754](376856 call eltType _mt[243] this[84230]))
    unknown call_tmp[629759] "expr temp" "maybe param" "maybe type" "temp"
    (629762 'move' call_tmp[629759](84074 call _minloc_id call_tmp[629754]))
    (512661 'move' ret[512656](512660 'deref' call_tmp[629759]))
    (512658 return ret[512656])
  }
  function minloc[84228](?).accumulate[84084](arg _mt[84236]:_MT[238], arg this[84234]:minloc[84228](?), arg x[84082]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629768] "expr temp" "maybe param" "maybe type" "temp"
    (629771 'move' call_tmp[629768](376865 call value _mt[243] this[84234]))
    (84090 call(376860 call (partial) accumulateOntoState _mt[243] this[84234]) call_tmp[629768] x[84082])
    (512663 return _void[55])
  }
  function minloc[84228](?).accumulateOntoState[84099](arg _mt[84240]:_MT[238], arg this[84238]:minloc[84228](?), ref arg state[84097]:_any[178](?), arg x[84101]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421961] "maybe param" "temp"
    unknown tmp[421982] "maybe param" "temp"
    unknown call_tmp[629773] "expr temp" "maybe param" "maybe type" "temp"
    (629776 'move' call_tmp[629773](84106 call x[84101] 0))
    unknown call_tmp[629778] "expr temp" "maybe param" "maybe type" "temp"
    (629781 'move' call_tmp[629778](84110 call state[84097] 0))
    (421993 'move' tmp[421982](84111 call < call_tmp[629773] call_tmp[629778]))
    unknown call_tmp[629783] "expr temp" "maybe param" "maybe type" "temp"
    (629786 'move' call_tmp[629783](421995 call _cond_invalid tmp[421982]))
    if call_tmp[629783]
    {
      (421998 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560453] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560454] "maybe param" "temp"
    unknown call_tmp[629788] "expr temp" "maybe param" "maybe type" "temp"
    (629791 'move' call_tmp[629788](421983 call isTrue tmp[421982]))
    (560459 'move' tmp[560454](560457 call _cond_test call_tmp[629788]))
    if tmp[560454]
    {
      (560464 'move' tmp[560453](560461 '_paramFoldLogical' tmp[560454] 1))
    }
    {
      unknown tmp[422003] "maybe param" "temp"
      unknown call_tmp[629793] "expr temp" "maybe param" "maybe type" "temp"
      (629796 'move' call_tmp[629793](84116 call x[84101] 0))
      unknown call_tmp[629798] "expr temp" "maybe param" "maybe type" "temp"
      (629801 'move' call_tmp[629798](84120 call state[84097] 0))
      (422014 'move' tmp[422003](84121 call == call_tmp[629793] call_tmp[629798]))
      unknown call_tmp[629803] "expr temp" "maybe param" "maybe type" "temp"
      (629806 'move' call_tmp[629803](422016 call _cond_invalid tmp[422003]))
      if call_tmp[629803]
      {
        (422019 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560426] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560427] "maybe param" "temp"
      unknown call_tmp[629808] "expr temp" "maybe param" "maybe type" "temp"
      (629811 'move' call_tmp[629808](422004 call isTrue tmp[422003]))
      (560432 'move' tmp[560427](560430 call _cond_test call_tmp[629808]))
      if tmp[560427]
      {
        unknown tmp[560434] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629813] "expr temp" "maybe param" "maybe type" "temp"
        (629816 'move' call_tmp[629813](84126 call x[84101] 1))
        unknown call_tmp[629818] "expr temp" "maybe param" "maybe type" "temp"
        (629821 'move' call_tmp[629818](84130 call state[84097] 1))
        unknown call_tmp[629823] "expr temp" "maybe param" "maybe type" "temp"
        (629826 'move' call_tmp[629823](84131 call < call_tmp[629813] call_tmp[629818]))
        (560436 'move' tmp[560434](422007 call isTrue call_tmp[629823]))
        (560441 'move' tmp[560426](560438 '_paramFoldLogical' tmp[560427] tmp[560434]))
      }
      {
        (560446 'move' tmp[560426](560443 '_paramFoldLogical' tmp[560427] 0))
      }
      unknown tmp[560466] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560468 'move' tmp[560466](421987 call isTrue tmp[560426]))
      (560473 'move' tmp[560453](560470 '_paramFoldLogical' tmp[560454] tmp[560466]))
    }
    (421972 'move' tmp[421961] tmp[560453])
    unknown call_tmp[629828] "expr temp" "maybe param" "maybe type" "temp"
    (629831 'move' call_tmp[629828](421974 call _cond_invalid tmp[421961]))
    if call_tmp[629828]
    {
      (421977 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560534] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560535] "maybe param" "temp"
    unknown call_tmp[629833] "expr temp" "maybe param" "maybe type" "temp"
    (629836 'move' call_tmp[629833](421962 call isTrue tmp[421961]))
    (560540 'move' tmp[560535](560538 call _cond_test call_tmp[629833]))
    if tmp[560535]
    {
      (560545 'move' tmp[560534](560542 '_paramFoldLogical' tmp[560535] 1))
    }
    {
      unknown tmp[422024] "maybe param" "temp"
      unknown call_tmp[629838] "expr temp" "maybe param" "maybe type" "temp"
      (629841 'move' call_tmp[629838](84141 call x[84101] 0))
      (422035 'move' tmp[422024](84143 call gotNaN call_tmp[629838]))
      unknown call_tmp[629843] "expr temp" "maybe param" "maybe type" "temp"
      (629846 'move' call_tmp[629843](422037 call _cond_invalid tmp[422024]))
      if call_tmp[629843]
      {
        (422040 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560507] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560508] "maybe param" "temp"
      unknown call_tmp[629848] "expr temp" "maybe param" "maybe type" "temp"
      (629851 'move' call_tmp[629848](422025 call isTrue tmp[422024]))
      (560513 'move' tmp[560508](560511 call _cond_test call_tmp[629848]))
      if tmp[560508]
      {
        unknown tmp[422045] "maybe param" "temp"
        unknown call_tmp[629853] "expr temp" "maybe param" "maybe type" "temp"
        (629856 'move' call_tmp[629853](84148 call state[84097] 0))
        unknown call_tmp[629858] "expr temp" "maybe param" "maybe type" "temp"
        (629861 'move' call_tmp[629858](84150 call gotNaN call_tmp[629853]))
        (422056 'move' tmp[422045](84151 call ! call_tmp[629858]))
        unknown call_tmp[629863] "expr temp" "maybe param" "maybe type" "temp"
        (629866 'move' call_tmp[629863](422058 call _cond_invalid tmp[422045]))
        if call_tmp[629863]
        {
          (422061 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560480] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560481] "maybe param" "temp"
        unknown call_tmp[629868] "expr temp" "maybe param" "maybe type" "temp"
        (629871 'move' call_tmp[629868](422046 call isTrue tmp[422045]))
        (560486 'move' tmp[560481](560484 call _cond_test call_tmp[629868]))
        if tmp[560481]
        {
          (560491 'move' tmp[560480](560488 '_paramFoldLogical' tmp[560481] 1))
        }
        {
          unknown tmp[560493] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629873] "expr temp" "maybe param" "maybe type" "temp"
          (629876 'move' call_tmp[629873](84156 call x[84101] 1))
          unknown call_tmp[629878] "expr temp" "maybe param" "maybe type" "temp"
          (629881 'move' call_tmp[629878](84160 call state[84097] 1))
          unknown call_tmp[629883] "expr temp" "maybe param" "maybe type" "temp"
          (629886 'move' call_tmp[629883](84161 call < call_tmp[629873] call_tmp[629878]))
          (560495 'move' tmp[560493](422050 call isTrue call_tmp[629883]))
          (560500 'move' tmp[560480](560497 '_paramFoldLogical' tmp[560481] tmp[560493]))
        }
        unknown tmp[560515] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560517 'move' tmp[560515](422028 call isTrue tmp[560480]))
        (560522 'move' tmp[560507](560519 '_paramFoldLogical' tmp[560508] tmp[560515]))
      }
      {
        (560527 'move' tmp[560507](560524 '_paramFoldLogical' tmp[560508] 0))
      }
      unknown tmp[560547] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560549 'move' tmp[560547](421966 call isTrue tmp[560507]))
      (560554 'move' tmp[560534](560551 '_paramFoldLogical' tmp[560535] tmp[560547]))
    }
    unknown call_tmp[629888] "expr temp" "maybe param" "maybe type" "temp"
    (629891 'move' call_tmp[629888](84174 call _cond_test tmp[560534]))
    if call_tmp[629888]
    {
      (84171 call = state[84097] x[84101])
    }
    (512665 return _void[55])
  }
  function minloc[84228](?).combine[84186](arg _mt[84244]:_MT[238], arg this[84242]:minloc[84228](?), arg x[84184]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629897] "expr temp" "maybe param" "maybe type" "temp"
    (629900 'move' call_tmp[629897](376887 call value _mt[243] this[84242]))
    unknown call_tmp[629904] "expr temp" "maybe param" "maybe type" "temp"
    (629907 'move' call_tmp[629904](84192 call value _mt[243] x[84184]))
    (84195 call(376882 call (partial) accumulateOntoState _mt[243] this[84242]) call_tmp[629897] call_tmp[629904])
    (512667 return _void[55])
  }
  function minloc[84228](?).generate[84202](arg _mt[84248]:_MT[238], arg this[84246]:minloc[84228](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512671] "RVV" "temp"
    unknown call_tmp[629911] "expr temp" "maybe param" "maybe type" "temp"
    (629914 'move' call_tmp[629911](376892 call value _mt[243] this[84246]))
    (512676 'move' ret[512671](512675 'deref' call_tmp[629911]))
    (512673 return ret[512671])
  }
  function minloc[84228](?).clone[84212](arg _mt[84252]:_MT[238], arg this[84250]:minloc[84228](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512680] "RVV" "temp"
    unknown call_tmp[629918] "expr temp" "maybe param" "maybe type" "temp"
    (629921 'move' call_tmp[629918](376901 call eltType _mt[243] this[84250]))
    unknown call_tmp[629923] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629926 'move' call_tmp[629923](747824 'new' minloc[376896](?)(eltType = call_tmp[629918])(_chpl_manager = unmanaged[220](?))))
    (512685 'move' ret[512680](512684 'deref' call_tmp[629923]))
    (512682 return ret[512680])
  }
  function minloc[84228](?).super[775360](arg _mt[775362]:_MT[238], arg this[775364]:minloc[84228](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775374] "RVV" "temp"
    unknown call_tmp[775381] "expr temp" "maybe param" "maybe type" "temp"
    (775384 'move' call_tmp[775381](775368 '.v' this[775364] c"super"))
    (775379 'move' ret[775374](775378 'deref' call_tmp[775381]))
    (775376 return ret[775374])
  }
  function minloc[775391](?).eltType[775386](arg _mt[775388]:_MT[238], arg this[775393]:minloc[775391](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775428] "RVV" "temp" "type variable"
    unknown borrowOfThis[775395]
    (775420 'end of statement')
    (775397 'move' borrowOfThis[775395](775400 call _cast _borrowedNonNilable[214](?) this[775393]))
    (775421 'end of statement' borrowOfThis[775395])
    unknown call_tmp[775442] "expr temp" "maybe param" "maybe type" "temp"
    (775445 'move' call_tmp[775442](775410 'is bound' borrowOfThis[775395] c"eltType"))
    if call_tmp[775442]
    {
      unknown call_tmp[775447] "expr temp" "maybe param" "maybe type" "temp"
      (775450 'move' call_tmp[775447](775405 '.v' borrowOfThis[775395] c"eltType"))
      unknown call_tmp[775452] "expr temp" "maybe param" "maybe type" "temp"
      (775455 'move' call_tmp[775452](775406 call chpl_checkLegalTypeFieldAccessor this[775393] call_tmp[775447] "eltType"))
      (775433 'move' ret[775428](775432 'deref' call_tmp[775452]))
      gotoReturn _end_eltType[775426] _end_eltType[775426]
      (775423 'end of statement' borrowOfThis[775395])
    }
    {
      (775438 'move' ret[775428](775437 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775426] _end_eltType[775426]
    }
    label _end_eltType[775426]
    (775430 return ret[775428])
  }
  function minloc[775391](?).eltType[775457](arg _mt[775459]:_MT[238], arg this[775461]:minloc[775391](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775496] "RVV" "temp" "type variable"
    unknown borrowOfThis[775463] "type variable"
    (775488 'end of statement')
    (775465 'move' borrowOfThis[775463](775468 call _cast _borrowedNonNilable[214](?) this[775461]))
    (775489 'end of statement' borrowOfThis[775463])
    unknown call_tmp[775510] "expr temp" "maybe param" "maybe type" "temp"
    (775513 'move' call_tmp[775510](775478 'is bound' borrowOfThis[775463] c"eltType"))
    if call_tmp[775510]
    {
      unknown call_tmp[775515] "expr temp" "maybe param" "maybe type" "temp"
      (775518 'move' call_tmp[775515](775473 '.v' borrowOfThis[775463] c"eltType"))
      unknown call_tmp[775520] "expr temp" "maybe param" "maybe type" "temp"
      (775523 'move' call_tmp[775520](775474 call chpl_checkLegalTypeFieldAccessor this[775461] call_tmp[775515] "eltType"))
      (775501 'move' ret[775496](775500 'deref' call_tmp[775520]))
      gotoReturn _end_eltType[775494] _end_eltType[775494]
      (775491 'end of statement' borrowOfThis[775463])
    }
    {
      (775506 'move' ret[775496](775505 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775494] _end_eltType[775494]
    }
    label _end_eltType[775494]
    (775498 return ret[775496])
  }
  function minloc[84228](?).value[775525](arg _mt[775527]:_MT[238], arg this[775529]:minloc[84228](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775539] "RVV" "temp"
    unknown call_tmp[775546] "expr temp" "maybe param" "maybe type" "temp"
    (775549 'move' call_tmp[775546](775533 '.' this[775529] c"value"))
    (775544 'move' ret[775539](775543 'addr of' call_tmp[775546]))
    (775541 return ret[775539])
  }
  function minloc[84228](?).init[775551](arg _mt[775553]:_MT[238], arg this[775554]:minloc[84228](?), in arg l[775567]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], arg eltType[775570]:_any[178](?), in arg value[775579] :
  (775586 call _minloc_id eltType[775570]) =
  (775581 call _minloc_id eltType[775570])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[775598] "temporary of super field" "temp"
    (775600 'move' super_tmp[775598](775597 '.v' this[775554] c"super"))
    (775564 call(775562 call (partial) init _mt[243] super_tmp[775598]) l[775567])
    (775627 'end of statement')
    unknown tmp[775603] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[775631] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[775643] "expr temp" "maybe param" "maybe type" "temp"
      (775646 'move' call_tmp[775643](775605 '.v' this[775554] c"super"))
      (775635 'move' call_type_tmp[775631](775608 'typeof' call_tmp[775643]))
    }
    (775609 'move' tmp[775603] call_type_tmp[775631])
    unknown call_tmp[775648] "maybe param" "maybe type" "temp"
    (775651 'move' call_tmp[775648](775614 'cast' tmp[775603] this[775554]))
    unknown chpl__thisAsParent[775611] "dead at end of block" "insert auto destroy" "temp"
    (775639 'init var' chpl__thisAsParent[775611] call_tmp[775648] tmp[775603])
    (775617 'setcid' chpl__thisAsParent[775611])
    (775619 'init field' this[775554] c"eltType" eltType[775570])
    (775628 'end of statement')
    (775622 '.=' this[775554] c"value" value[775579])
    (775629 'end of statement')
    (775625 'setcid' this[775554])
    (775637 return _void[55])
  }
  function minloc[84228](?).deinit[775653](arg _mt[775655]:_MT[238], arg this[775657]:minloc[84228](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (775665 return _void[55])
  }
  function minloc[84228](?).writeThis[775667](arg _mt[775671]:_MT[238], arg this[775669]:minloc[84228](?), arg f[775670]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775676 call writeThisDefaultImpl f[775670] this[775669])
    (775681 return _void[55])
  }
  function minloc[84228](?).readThis[775683](arg _mt[775687]:_MT[238], arg this[775685]:minloc[84228](?), arg f[775686]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775691 call readThisDefaultImpl f[775686] this[775685])
    (775697 return _void[55])
  }
  type minloc[84228](?) val super[355670]:ReduceScanOp[82300] "super class" unknown eltType[84056] "type variable" unknown value[84063](84062 call _minloc_id eltType[84056])
  type minloc[775391](?)
  type minloc[376896](?)
  function gotNaN[84259](arg value[84257]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[512689] "RVV" "temp"
    unknown call_tmp[629928] "expr temp" "maybe param" "maybe type" "temp"
    (629931 'move' call_tmp[629928](84268 call isnan value[84257]))
    (512694 'move' ret[512689](512693 'deref' call_tmp[629928]))
    (512691 return ret[512689])
  }
  where {
    (84264 call isReal value[84257])
  }
  function gotNaN[84279](arg value[84277]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512698] "RVV" "param" "temp"
    (512703 'move' ret[512698](512702 'deref' 0))
    (512700 return ret[512698])
  }
  (355095 'used modules list'(81780 'use' ChapelStandard[20267])(81784 'use' ChapelLocks[187302]))
}