AST dump for ShallowCopy after pass scopeResolve.
Module use list: ChapelStandard SysCTypes 

{
  function ptrTo[277411](ref arg x[277409]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (277417 return(277416 call c_pointer_return x[277409]))
  }
  function shallowCopy[277426](ref arg dst[277424]:_any[178](?), ref arg src[277428]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown st[277434] "type variable"(277433 'static typeof' dst[277424])
    if(277486 call _cond_test(277441 call isPODType st[277434]))
    {
      (277444 call = dst[277424] src[277428])
    }
    {
      unknown size[277452](277451 call c_sizeof st[277434])
      (277455 'end of statement')
      (277468 call c_memcpy(277461 call ptrTo dst[277424])(277466 call ptrTo src[277428]) size[277452])
      if(277482 call _cond_test 1)
      {
        (277479 call c_memset(277475 call ptrTo src[277428]) 0 size[277452])
      }
    }
  }
  function shallowCopyInit[277496](ref arg src[277494]:_any[178](?)) : _unknown[51] "inline" "no copy return" "unsafe"
  {
    unknown st[277502] "type variable"(277501 'static typeof' src[277494])
    unknown dst[277507] "no auto destroy" "no init" st[277502]
    (277510 'end of statement')
    (277515 call shallowCopy dst[277507] src[277494])
    (277518 return dst[277507])
  }
  function shallowSwap[277529](ref arg lhs[277526] :
  unknown t[277524], ref arg rhs[277532] :
  t[277524]) : _unknown[51] "inline" "unsafe" "no return value for void"
  {
    unknown st[277539] "type variable"(277538 'static typeof' lhs[277526])
    unknown tmp[277544] "no auto destroy" "no init" st[277539]
    (277547 'end of statement')
    if(277616 call _cond_test(277551 call isPODType st[277539]))
    {
      (277554 call = tmp[277544] lhs[277526])
      (277560 call = lhs[277526] rhs[277532])
      (277565 call = rhs[277532] tmp[277544])
    }
    {
      unknown size[277572](277571 call c_sizeof st[277539])
      (277575 'end of statement')
      (277588 call c_memcpy(277581 call ptrTo tmp[277544])(277586 call ptrTo lhs[277526]) size[277572])
      (277601 call c_memcpy(277594 call ptrTo lhs[277526])(277599 call ptrTo rhs[277532]) size[277572])
      (277614 call c_memcpy(277607 call ptrTo rhs[277532])(277612 call ptrTo tmp[277544]) size[277572])
    }
  }
  function shallowCopy[277626](ref arg A[277624]:_any[178](?), arg dst[277628]:_any[178](?), arg src[277630]:_any[178](?), arg nElts[277632]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    if(277686 call _cond_test 1)
    {
      (277645 call assert(277642 call > nElts[277632] 0))
      (277665 call assert(277663 call(277653 call .(277650 call . A[277624] c"_dom") c"contains")(277660 call #(277657 call chpl_build_low_bounded_range dst[277628]) nElts[277632])))
      (277684 call assert(277682 call(277672 call .(277669 call . A[277624] c"_dom") c"contains")(277679 call #(277676 call chpl_build_low_bounded_range src[277630]) nElts[277632])))
    }
    if(277864 call _cond_test(277698 call(277694 call .(277691 call . A[277624] c"_instance") c"isDefaultRectangular")))
    {
      unknown st[277707] "type variable"(277706 'static field type'(277702 call . A[277624] c"_value") "eltType")
      unknown size[277721](277719 call *(277713 call _cast size_t[20657] nElts[277632])(277718 call c_sizeof st[277707]))
      (277724 'end of statement')
      (277742 call c_memcpy(277732 call ptrTo(277730 call A[277624] dst[277628]))(277740 call ptrTo(277738 call A[277624] src[277630])) size[277721])
    }
    {
      unknown ok[277767](277766 call chpl__bulkTransferArray A[277624](277754 call chpl__buildDomainExpr(277751 call #(277748 call chpl_build_low_bounded_range dst[277628]) nElts[277632])) A[277624](277764 call chpl__buildDomainExpr(277761 call #(277758 call chpl_build_low_bounded_range src[277630]) nElts[277632])))
      (277770 'end of statement')
      if(277860 call _cond_test(277773 call ! ok[277767]))
      {
        (277794 call halt "bulk transfer failed in sorting")
        {
          unknown _indexOfInterest[277826] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[277827] "expr temp" "temp"
          (277836 'move' _iterator[277827](277834 call _getIterator(277806 call vectorizeOnly(277803 call #(277800 call chpl_build_low_bounded_range 0) nElts[277632]))))
          Defer
          {
            {
              (277853 call _freeIterator _iterator[277827])
            }
          }
          { scopeless type
            (277842 'move' _indexOfInterest[277826](277839 call iteratorIndex _iterator[277827]))
          }
          ForLoop[277828]
          {
            unknown i[277846] "index var" "insert auto destroy"
            (277848 'move' i[277846] _indexOfInterest[277826])
            {
              (277823 '='(277815 call A[277624](277812 call + dst[277628] i[277846]))(277822 call A[277624](277819 call + src[277630] i[277846])))
            }
            label _continueLabel[277831]
            _indexOfInterest[277826]
            _iterator[277827]
          }
          label _breakLabel[277832]
        }
      }
    }
    (355414 'used modules list'(277635 'use' SysCTypes[20943]))
  }
  function shallowCopy[277874](ref arg DstA[277872]:_any[178](?), arg dst[277876]:_any[178](?), ref arg SrcA[277878]:_any[178](?), arg src[277880]:_any[178](?), arg nElts[277882]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    if(277936 call _cond_test 1)
    {
      (277895 call assert(277892 call > nElts[277882] 0))
      (277915 call assert(277913 call(277903 call .(277900 call . DstA[277872] c"_dom") c"contains")(277910 call #(277907 call chpl_build_low_bounded_range dst[277876]) nElts[277882])))
      (277934 call assert(277932 call(277922 call .(277919 call . SrcA[277878] c"_dom") c"contains")(277929 call #(277926 call chpl_build_low_bounded_range src[277880]) nElts[277882])))
    }
    if(278109 call _cond_test(277958 call &&(277948 call(277944 call .(277941 call . DstA[277872] c"_instance") c"isDefaultRectangular"))(277957 call(277953 call .(277950 call . SrcA[277878] c"_instance") c"isDefaultRectangular"))))
    {
      unknown st[277968] "type variable"(277967 'static field type'(277963 call . DstA[277872] c"_value") "eltType")
      unknown size[277982](277980 call *(277974 call _cast size_t[20657] nElts[277882])(277979 call c_sizeof st[277968]))
      (277985 'end of statement')
      (278003 call c_memcpy(277993 call ptrTo(277991 call DstA[277872] dst[277876]))(278001 call ptrTo(277999 call SrcA[277878] src[277880])) size[277982])
    }
    {
      unknown ok[278028](278027 call chpl__bulkTransferArray DstA[277872](278015 call chpl__buildDomainExpr(278012 call #(278009 call chpl_build_low_bounded_range dst[277876]) nElts[277882])) SrcA[277878](278025 call chpl__buildDomainExpr(278022 call #(278019 call chpl_build_low_bounded_range src[277880]) nElts[277882])))
      (278031 'end of statement')
      if(278105 call _cond_test(278034 call ! ok[278028]))
      {
        (278039 call halt "bulk transfer failed in sorting")
        {
          unknown _indexOfInterest[278071] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[278072] "expr temp" "temp"
          (278081 'move' _iterator[278072](278079 call _getIterator(278051 call vectorizeOnly(278048 call #(278045 call chpl_build_low_bounded_range 0) nElts[277882]))))
          Defer
          {
            {
              (278098 call _freeIterator _iterator[278072])
            }
          }
          { scopeless type
            (278087 'move' _indexOfInterest[278071](278084 call iteratorIndex _iterator[278072]))
          }
          ForLoop[278073]
          {
            unknown i[278091] "index var" "insert auto destroy"
            (278093 'move' i[278091] _indexOfInterest[278071])
            {
              (278068 '='(278060 call DstA[277872](278057 call + dst[277876] i[278091]))(278067 call SrcA[277878](278064 call + src[277880] i[278091])))
            }
            label _continueLabel[278076]
            _indexOfInterest[278071]
            _iterator[278072]
          }
          label _breakLabel[278077]
        }
      }
    }
    (355416 'used modules list'(277885 'use' SysCTypes[20943]))
  }
  (355411 'used modules list'(353080 'use' ChapelStandard[20267])(277404 'use' SysCTypes[20943]))
}