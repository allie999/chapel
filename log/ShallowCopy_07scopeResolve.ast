AST dump for ShallowCopy after pass scopeResolve.
Module use list: ChapelStandard SysCTypes 

{
  function ptrTo[277480](ref arg x[277478]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (277486 return(277485 call c_pointer_return x[277478]))
  }
  function shallowCopy[277495](ref arg dst[277493]:_any[178](?), ref arg src[277497]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown st[277503] "type variable"(277502 'static typeof' dst[277493])
    if(277555 call _cond_test(277510 call isPODType st[277503]))
    {
      (277513 call = dst[277493] src[277497])
    }
    {
      unknown size[277521](277520 call c_sizeof st[277503])
      (277524 'end of statement')
      (277537 call c_memcpy(277530 call ptrTo dst[277493])(277535 call ptrTo src[277497]) size[277521])
      if(277551 call _cond_test 1)
      {
        (277548 call c_memset(277544 call ptrTo src[277497]) 0 size[277521])
      }
    }
  }
  function shallowCopyInit[277565](ref arg src[277563]:_any[178](?)) : _unknown[51] "inline" "no copy return" "unsafe"
  {
    unknown st[277571] "type variable"(277570 'static typeof' src[277563])
    unknown dst[277576] "no auto destroy" "no init" st[277571]
    (277579 'end of statement')
    (277584 call shallowCopy dst[277576] src[277563])
    (277587 return dst[277576])
  }
  function shallowSwap[277598](ref arg lhs[277595] :
  unknown t[277593], ref arg rhs[277601] :
  t[277593]) : _unknown[51] "inline" "unsafe" "no return value for void"
  {
    unknown st[277608] "type variable"(277607 'static typeof' lhs[277595])
    unknown tmp[277613] "no auto destroy" "no init" st[277608]
    (277616 'end of statement')
    if(277685 call _cond_test(277620 call isPODType st[277608]))
    {
      (277623 call = tmp[277613] lhs[277595])
      (277629 call = lhs[277595] rhs[277601])
      (277634 call = rhs[277601] tmp[277613])
    }
    {
      unknown size[277641](277640 call c_sizeof st[277608])
      (277644 'end of statement')
      (277657 call c_memcpy(277650 call ptrTo tmp[277613])(277655 call ptrTo lhs[277595]) size[277641])
      (277670 call c_memcpy(277663 call ptrTo lhs[277595])(277668 call ptrTo rhs[277601]) size[277641])
      (277683 call c_memcpy(277676 call ptrTo rhs[277601])(277681 call ptrTo tmp[277613]) size[277641])
    }
  }
  function shallowCopy[277695](ref arg A[277693]:_any[178](?), arg dst[277697]:_any[178](?), arg src[277699]:_any[178](?), arg nElts[277701]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    if(277755 call _cond_test 1)
    {
      (277714 call assert(277711 call > nElts[277701] 0))
      (277734 call assert(277732 call(277722 call .(277719 call . A[277693] c"_dom") c"contains")(277729 call #(277726 call chpl_build_low_bounded_range dst[277697]) nElts[277701])))
      (277753 call assert(277751 call(277741 call .(277738 call . A[277693] c"_dom") c"contains")(277748 call #(277745 call chpl_build_low_bounded_range src[277699]) nElts[277701])))
    }
    if(277933 call _cond_test(277767 call(277763 call .(277760 call . A[277693] c"_instance") c"isDefaultRectangular")))
    {
      unknown st[277776] "type variable"(277775 'static field type'(277771 call . A[277693] c"_value") "eltType")
      unknown size[277790](277788 call *(277782 call _cast size_t[20657] nElts[277701])(277787 call c_sizeof st[277776]))
      (277793 'end of statement')
      (277811 call c_memcpy(277801 call ptrTo(277799 call A[277693] dst[277697]))(277809 call ptrTo(277807 call A[277693] src[277699])) size[277790])
    }
    {
      unknown ok[277836](277835 call chpl__bulkTransferArray A[277693](277823 call chpl__buildDomainExpr(277820 call #(277817 call chpl_build_low_bounded_range dst[277697]) nElts[277701])) A[277693](277833 call chpl__buildDomainExpr(277830 call #(277827 call chpl_build_low_bounded_range src[277699]) nElts[277701])))
      (277839 'end of statement')
      if(277929 call _cond_test(277842 call ! ok[277836]))
      {
        (277863 call halt "bulk transfer failed in sorting")
        {
          unknown _indexOfInterest[277895] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[277896] "expr temp" "temp"
          (277905 'move' _iterator[277896](277903 call _getIterator(277875 call vectorizeOnly(277872 call #(277869 call chpl_build_low_bounded_range 0) nElts[277701]))))
          Defer
          {
            {
              (277922 call _freeIterator _iterator[277896])
            }
          }
          { scopeless type
            (277911 'move' _indexOfInterest[277895](277908 call iteratorIndex _iterator[277896]))
          }
          ForLoop[277897]
          {
            unknown i[277915] "index var" "insert auto destroy"
            (277917 'move' i[277915] _indexOfInterest[277895])
            {
              (277892 '='(277884 call A[277693](277881 call + dst[277697] i[277915]))(277891 call A[277693](277888 call + src[277699] i[277915])))
            }
            label _continueLabel[277900]
            _indexOfInterest[277895]
            _iterator[277896]
          }
          label _breakLabel[277901]
        }
      }
    }
    (355485 'used modules list'(277704 'use' SysCTypes[20943]))
  }
  function shallowCopy[277943](ref arg DstA[277941]:_any[178](?), arg dst[277945]:_any[178](?), ref arg SrcA[277947]:_any[178](?), arg src[277949]:_any[178](?), arg nElts[277951]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    if(278005 call _cond_test 1)
    {
      (277964 call assert(277961 call > nElts[277951] 0))
      (277984 call assert(277982 call(277972 call .(277969 call . DstA[277941] c"_dom") c"contains")(277979 call #(277976 call chpl_build_low_bounded_range dst[277945]) nElts[277951])))
      (278003 call assert(278001 call(277991 call .(277988 call . SrcA[277947] c"_dom") c"contains")(277998 call #(277995 call chpl_build_low_bounded_range src[277949]) nElts[277951])))
    }
    if(278178 call _cond_test(278027 call &&(278017 call(278013 call .(278010 call . DstA[277941] c"_instance") c"isDefaultRectangular"))(278026 call(278022 call .(278019 call . SrcA[277947] c"_instance") c"isDefaultRectangular"))))
    {
      unknown st[278037] "type variable"(278036 'static field type'(278032 call . DstA[277941] c"_value") "eltType")
      unknown size[278051](278049 call *(278043 call _cast size_t[20657] nElts[277951])(278048 call c_sizeof st[278037]))
      (278054 'end of statement')
      (278072 call c_memcpy(278062 call ptrTo(278060 call DstA[277941] dst[277945]))(278070 call ptrTo(278068 call SrcA[277947] src[277949])) size[278051])
    }
    {
      unknown ok[278097](278096 call chpl__bulkTransferArray DstA[277941](278084 call chpl__buildDomainExpr(278081 call #(278078 call chpl_build_low_bounded_range dst[277945]) nElts[277951])) SrcA[277947](278094 call chpl__buildDomainExpr(278091 call #(278088 call chpl_build_low_bounded_range src[277949]) nElts[277951])))
      (278100 'end of statement')
      if(278174 call _cond_test(278103 call ! ok[278097]))
      {
        (278108 call halt "bulk transfer failed in sorting")
        {
          unknown _indexOfInterest[278140] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[278141] "expr temp" "temp"
          (278150 'move' _iterator[278141](278148 call _getIterator(278120 call vectorizeOnly(278117 call #(278114 call chpl_build_low_bounded_range 0) nElts[277951]))))
          Defer
          {
            {
              (278167 call _freeIterator _iterator[278141])
            }
          }
          { scopeless type
            (278156 'move' _indexOfInterest[278140](278153 call iteratorIndex _iterator[278141]))
          }
          ForLoop[278142]
          {
            unknown i[278160] "index var" "insert auto destroy"
            (278162 'move' i[278160] _indexOfInterest[278140])
            {
              (278137 '='(278129 call DstA[277941](278126 call + dst[277945] i[278160]))(278136 call SrcA[277947](278133 call + src[277949] i[278160])))
            }
            label _continueLabel[278145]
            _indexOfInterest[278140]
            _iterator[278141]
          }
          label _breakLabel[278146]
        }
      }
    }
    (355487 'used modules list'(277954 'use' SysCTypes[20943]))
  }
  (355482 'used modules list'(353149 'use' ChapelStandard[20267])(277473 'use' SysCTypes[20943]))
}