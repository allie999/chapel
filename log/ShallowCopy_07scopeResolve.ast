AST dump for ShallowCopy after pass scopeResolve.
Module use list: ChapelStandard SysCTypes 

{
  function ptrTo[277302](ref arg x[277300]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (277308 return(277307 call c_pointer_return x[277300]))
  }
  function shallowCopy[277317](ref arg dst[277315]:_any[178](?), ref arg src[277319]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown st[277325] "type variable"(277324 'static typeof' dst[277315])
    if(277377 call _cond_test(277332 call isPODType st[277325]))
    {
      (277335 call = dst[277315] src[277319])
    }
    {
      unknown size[277343](277342 call c_sizeof st[277325])
      (277346 'end of statement')
      (277359 call c_memcpy(277352 call ptrTo dst[277315])(277357 call ptrTo src[277319]) size[277343])
      if(277373 call _cond_test 1)
      {
        (277370 call c_memset(277366 call ptrTo src[277319]) 0 size[277343])
      }
    }
  }
  function shallowCopyInit[277387](ref arg src[277385]:_any[178](?)) : _unknown[51] "inline" "no copy return" "unsafe"
  {
    unknown st[277393] "type variable"(277392 'static typeof' src[277385])
    unknown dst[277398] "no auto destroy" "no init" st[277393]
    (277401 'end of statement')
    (277406 call shallowCopy dst[277398] src[277385])
    (277409 return dst[277398])
  }
  function shallowSwap[277420](ref arg lhs[277417] :
  unknown t[277415], ref arg rhs[277423] :
  t[277415]) : _unknown[51] "inline" "unsafe" "no return value for void"
  {
    unknown st[277430] "type variable"(277429 'static typeof' lhs[277417])
    unknown tmp[277435] "no auto destroy" "no init" st[277430]
    (277438 'end of statement')
    if(277507 call _cond_test(277442 call isPODType st[277430]))
    {
      (277445 call = tmp[277435] lhs[277417])
      (277451 call = lhs[277417] rhs[277423])
      (277456 call = rhs[277423] tmp[277435])
    }
    {
      unknown size[277463](277462 call c_sizeof st[277430])
      (277466 'end of statement')
      (277479 call c_memcpy(277472 call ptrTo tmp[277435])(277477 call ptrTo lhs[277417]) size[277463])
      (277492 call c_memcpy(277485 call ptrTo lhs[277417])(277490 call ptrTo rhs[277423]) size[277463])
      (277505 call c_memcpy(277498 call ptrTo rhs[277423])(277503 call ptrTo tmp[277435]) size[277463])
    }
  }
  function shallowCopy[277517](ref arg A[277515]:_any[178](?), arg dst[277519]:_any[178](?), arg src[277521]:_any[178](?), arg nElts[277523]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    if(277577 call _cond_test 1)
    {
      (277536 call assert(277533 call > nElts[277523] 0))
      (277556 call assert(277554 call(277544 call .(277541 call . A[277515] c"_dom") c"contains")(277551 call #(277548 call chpl_build_low_bounded_range dst[277519]) nElts[277523])))
      (277575 call assert(277573 call(277563 call .(277560 call . A[277515] c"_dom") c"contains")(277570 call #(277567 call chpl_build_low_bounded_range src[277521]) nElts[277523])))
    }
    if(277755 call _cond_test(277589 call(277585 call .(277582 call . A[277515] c"_instance") c"isDefaultRectangular")))
    {
      unknown st[277598] "type variable"(277597 'static field type'(277593 call . A[277515] c"_value") "eltType")
      unknown size[277612](277610 call *(277604 call _cast size_t[20654] nElts[277523])(277609 call c_sizeof st[277598]))
      (277615 'end of statement')
      (277633 call c_memcpy(277623 call ptrTo(277621 call A[277515] dst[277519]))(277631 call ptrTo(277629 call A[277515] src[277521])) size[277612])
    }
    {
      unknown ok[277658](277657 call chpl__bulkTransferArray A[277515](277645 call chpl__buildDomainExpr(277642 call #(277639 call chpl_build_low_bounded_range dst[277519]) nElts[277523])) A[277515](277655 call chpl__buildDomainExpr(277652 call #(277649 call chpl_build_low_bounded_range src[277521]) nElts[277523])))
      (277661 'end of statement')
      if(277751 call _cond_test(277664 call ! ok[277658]))
      {
        (277685 call halt "bulk transfer failed in sorting")
        {
          unknown _indexOfInterest[277717] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[277718] "expr temp" "temp"
          (277727 'move' _iterator[277718](277725 call _getIterator(277697 call vectorizeOnly(277694 call #(277691 call chpl_build_low_bounded_range 0) nElts[277523]))))
          Defer
          {
            {
              (277744 call _freeIterator _iterator[277718])
            }
          }
          { scopeless type
            (277733 'move' _indexOfInterest[277717](277730 call iteratorIndex _iterator[277718]))
          }
          ForLoop[277719]
          {
            unknown i[277737] "index var" "insert auto destroy"
            (277739 'move' i[277737] _indexOfInterest[277717])
            {
              (277714 '='(277706 call A[277515](277703 call + dst[277519] i[277737]))(277713 call A[277515](277710 call + src[277521] i[277737])))
            }
            label _continueLabel[277722]
            _indexOfInterest[277717]
            _iterator[277718]
          }
          label _breakLabel[277723]
        }
      }
    }
    (355286 'used modules list'(277526 'use' SysCTypes[20940]))
  }
  function shallowCopy[277765](ref arg DstA[277763]:_any[178](?), arg dst[277767]:_any[178](?), ref arg SrcA[277769]:_any[178](?), arg src[277771]:_any[178](?), arg nElts[277773]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    if(277827 call _cond_test 1)
    {
      (277786 call assert(277783 call > nElts[277773] 0))
      (277806 call assert(277804 call(277794 call .(277791 call . DstA[277763] c"_dom") c"contains")(277801 call #(277798 call chpl_build_low_bounded_range dst[277767]) nElts[277773])))
      (277825 call assert(277823 call(277813 call .(277810 call . SrcA[277769] c"_dom") c"contains")(277820 call #(277817 call chpl_build_low_bounded_range src[277771]) nElts[277773])))
    }
    if(278000 call _cond_test(277849 call &&(277839 call(277835 call .(277832 call . DstA[277763] c"_instance") c"isDefaultRectangular"))(277848 call(277844 call .(277841 call . SrcA[277769] c"_instance") c"isDefaultRectangular"))))
    {
      unknown st[277859] "type variable"(277858 'static field type'(277854 call . DstA[277763] c"_value") "eltType")
      unknown size[277873](277871 call *(277865 call _cast size_t[20654] nElts[277773])(277870 call c_sizeof st[277859]))
      (277876 'end of statement')
      (277894 call c_memcpy(277884 call ptrTo(277882 call DstA[277763] dst[277767]))(277892 call ptrTo(277890 call SrcA[277769] src[277771])) size[277873])
    }
    {
      unknown ok[277919](277918 call chpl__bulkTransferArray DstA[277763](277906 call chpl__buildDomainExpr(277903 call #(277900 call chpl_build_low_bounded_range dst[277767]) nElts[277773])) SrcA[277769](277916 call chpl__buildDomainExpr(277913 call #(277910 call chpl_build_low_bounded_range src[277771]) nElts[277773])))
      (277922 'end of statement')
      if(277996 call _cond_test(277925 call ! ok[277919]))
      {
        (277930 call halt "bulk transfer failed in sorting")
        {
          unknown _indexOfInterest[277962] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[277963] "expr temp" "temp"
          (277972 'move' _iterator[277963](277970 call _getIterator(277942 call vectorizeOnly(277939 call #(277936 call chpl_build_low_bounded_range 0) nElts[277773]))))
          Defer
          {
            {
              (277989 call _freeIterator _iterator[277963])
            }
          }
          { scopeless type
            (277978 'move' _indexOfInterest[277962](277975 call iteratorIndex _iterator[277963]))
          }
          ForLoop[277964]
          {
            unknown i[277982] "index var" "insert auto destroy"
            (277984 'move' i[277982] _indexOfInterest[277962])
            {
              (277959 '='(277951 call DstA[277763](277948 call + dst[277767] i[277982]))(277958 call SrcA[277769](277955 call + src[277771] i[277982])))
            }
            label _continueLabel[277967]
            _indexOfInterest[277962]
            _iterator[277963]
          }
          label _breakLabel[277968]
        }
      }
    }
    (355288 'used modules list'(277776 'use' SysCTypes[20940]))
  }
  (355283 'used modules list'(352952 'use' ChapelStandard[20264])(277295 'use' SysCTypes[20940]))
}