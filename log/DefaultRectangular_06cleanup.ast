AST dump for DefaultRectangular after pass cleanup.
Module use list: 

{
  const dataParTasksPerLocale[93281] "config" "const" 0
  (93284 'end of statement')
  const dataParIgnoreRunningTasks[93287] "config" "const" 0
  (93290 'end of statement')
  const dataParMinGranularity[93293] "config" "const" 1 int[13]
  (93296 'end of statement')
  if(93322 call _cond_test(93299 call < dataParTasksPerLocale 0))
  {
    (93320 call halt "dataParTasksPerLocale must be >= 0")
  }
  if(93352 call _cond_test(93329 call <= dataParMinGranularity 0))
  {
    (93350 call halt "dataParMinGranularity must be > 0")
  }
  (93358 'use' DSIUtil)
  (93361 'use' ChapelArray)
  (93368 'use' ChapelDistribution)
  (93370 'use' ChapelRange)
  (93371 'use' SysBasic)
  (93372 'use' SysError)
  (93373 'use' SysCTypes)
  (93378 'use' ChapelDebugPrint)
  (93380 'use' ChapelLocks)
  (93381 'use' OwnedObject)
  (93382 'use' IO)
  (93385 'use' DefaultSparse)
  (93387 'use' DefaultAssociative)
  (93389 'use' ExternalArray)
  unknown debugDefaultDist[93392] "config" "param" 0
  (93395 'end of statement')
  unknown debugDefaultDistBulkTransfer[93397] "config" "param" 0
  (93400 'end of statement')
  unknown debugDataPar[93402] "config" "param" 0
  (93405 'end of statement')
  unknown debugDataParNuma[93407] "config" "param" 0
  (93410 'end of statement')
  unknown disableArrRealloc[93412] "config" "param" 0
  (93415 'end of statement')
  unknown reportInPlaceRealloc[93417] "config" "param" 0
  (93420 'end of statement')
  unknown defaultDoRADOpt[93422] "config" "param" 1
  (93425 'end of statement')
  unknown defaultDisableLazyRADOpt[93427] "config" "param" 0
  (93430 'end of statement')
  unknown earlyShiftData[93432] "config" "param" 1
  (93435 'end of statement')
  unknown usePollyArrayIndex[93437] "config" "param" 0
  (93440 'end of statement')
  unknown defaultRectangularSupportsAutoLocalAccess[93442] "config" "param" 0
  (93445 'end of statement')
  type ArrayStorageOrder[93451] def RMO[93447]:ArrayStorageOrder[93451] def CMO[93449]:ArrayStorageOrder[93451]
  unknown defaultStorageOrder[93460] "config" "param"(93457 call . ArrayStorageOrder c"RMO")
  (93463 'end of statement')
  unknown storageOrder[93465] "param" defaultStorageOrder
  (93468 'end of statement')
  function polly_array_index[93477](arg arguments[93473] ... :
  int[13]) : _unknown[51] "lineno ok" "llvm readnone"
  {
    unknown rank[93490] "param"(93488 call /(93485 call -(93481 call . arguments c"size") 1) 2)
    (93493 'end of statement')
    unknown blkStart[93496] "param" 2
    (93499 'end of statement')
    unknown blkEnd[93507] "param"(93505 call -(93502 call + 2 rank) 1)
    (93510 'end of statement')
    unknown indStart[93515] "param"(93513 call + blkEnd 1)
    (93518 'end of statement')
    unknown indEnd[93526] "param"(93524 call -(93521 call + indStart rank) 1)
    (93529 'end of statement')
    unknown offset[93534](93533 call arguments 0)
    (93537 'end of statement')
    unknown blk[93542](93540 call * rank int[13])
    (93545 'end of statement')
    unknown ind[93550](93548 call * rank int[13])
    (93553 'end of statement')
    (93562 call =(93560 call blk(93557 call - rank 1)) 1)
    {
      unknown i[93600] 0
      unknown tmp[93601] "maybe param" "temp"
      (93612 'move' tmp[93601](93610 call chpl_compute_low_param_loop_bound 0(93568 call - rank 2)))
      unknown tmp[93602] "maybe param" "temp"
      (93622 'move' tmp[93602](93620 call chpl_compute_high_param_loop_bound 0(93617 call - rank 2)))
      unknown tmp[93603] "maybe param" "temp"
      (93625 'move' tmp[93603](93573 call - 1))
      ParamForLoop[93627]
      { i[93600] tmp[93601] tmp[93602] tmp[93603]
        (93597 call =(93580 call blk i)(93595 call *(93587 call blk(93584 call + i 1))(93594 call arguments(93591 call + blkStart i))))
      }
      label _unused_continueLabel[93605]
      label _breakLabel[93604]
    }
    {
      unknown j[93661] 0
      unknown tmp[93662] "maybe param" "temp"
      (93674 'move' tmp[93662](93672 call chpl_compute_low_param_loop_bound 0(93639 call - rank 1)))
      unknown tmp[93663] "maybe param" "temp"
      (93684 'move' tmp[93663](93682 call chpl_compute_high_param_loop_bound 0(93679 call - rank 1)))
      unknown tmp[93664] "maybe param" "temp"
      (93687 'move' tmp[93664] 1)
      ParamForLoop[93689]
      { j[93661] tmp[93662] tmp[93663] tmp[93664]
        {
          (93657 call =(93646 call ind j)(93656 call arguments(93653 call -(93650 call + indStart j) 1)))
        }
      }
      label _unused_continueLabel[93666]
      label _breakLabel[93665]
    }
    unknown ret[93700] offset int[13]
    (93703 'end of statement')
    {
      unknown i[93726] 0
      unknown tmp[93727] "maybe param" "temp"
      (93739 'move' tmp[93727](93737 call chpl_compute_low_param_loop_bound 0(93707 call - rank 1)))
      unknown tmp[93728] "maybe param" "temp"
      (93749 'move' tmp[93728](93747 call chpl_compute_high_param_loop_bound 0(93744 call - rank 1)))
      unknown tmp[93729] "maybe param" "temp"
      (93752 'move' tmp[93729] 1)
      ParamForLoop[93754]
      { i[93726] tmp[93727] tmp[93728] tmp[93729]
        {
          (93722 call += ret(93720 call *(93715 call ind i)(93719 call blk i)))
        }
      }
      label _unused_continueLabel[93731]
      label _breakLabel[93730]
    }
    (93764 return ret)
  }
  { scopeless type
    int[13]
  }
  function DefaultDist[93989].dsiNewRectangularDom[93778](arg _mt[93993]:_MT[238], arg this[93991]:DefaultDist[93989], param arg rank[93775] :
  int[13], arg idxType[93780]:_any[178](?), param arg stridable[93783] :
  bool[10], arg inds[93786]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    const dom[93801] "const"(93790 'new'(_chpl_manager = unmanaged[220](?))(93800 call DefaultRectangularDom rank idxType stridable(93799 call _to_unmanaged this)))
    (93804 'end of statement')
    (93814 call(93809 call . dom c"dsiSetIndices") inds)
    (93817 return dom)
  }
  function DefaultDist[93989].dsiNewAssociativeDom[93825](arg _mt[93997]:_MT[238], arg this[93995]:DefaultDist[93989], arg idxType[93823]:_any[178](?), param arg parSafe[93828] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93843 return(93833 'new'(_chpl_manager = unmanaged[220](?))(93842 call DefaultAssociativeDom idxType parSafe(93841 call _to_unmanaged this))))
  }
  function DefaultDist[93989].dsiNewSparseDom[93854](arg _mt[94001]:_MT[238], arg this[93999]:DefaultDist[93989], param arg rank[93851] :
  int[13], arg idxType[93856]:_any[178](?), arg dom[93859] :
  _domain) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93875 return(93864 'new'(_chpl_manager = unmanaged[220](?))(93874 call DefaultSparseDom rank idxType(93872 call _to_unmanaged this) dom)))
  }
  function DefaultDist[93989].dsiIndexToLocale[93884](arg _mt[94005]:_MT[238], arg this[94003]:DefaultDist[93989], arg ind[93882]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (93890 return(93888 call chpl_localeID_to_locale(93887 '_wide_get_locale' this)))
  }
  function DefaultDist[93989].dsiClone[93897](arg _mt[94009]:_MT[238], arg this[94007]:DefaultDist[93989]) : _unknown[51] "method" "primary method"
  {
    (93903 return(93902 call _to_unmanaged this))
  }
  function DefaultDist[93989].dsiAssign[93916](arg _mt[94013]:_MT[238], arg this[94011]:DefaultDist[93989], arg other[93913] :
  (93912 'to unmanaged class from unknown'(93911 'typeof' this))) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function DefaultDist[93989].dsiEqualDMaps[93928](arg _mt[94017]:_MT[238], arg this[94015]:DefaultDist[93989], arg d[93925] :
  (93924 'to unmanaged class from unknown' DefaultDist)) param : _unknown[51] "method" "primary method"
  {
    (93931 return 1)
  }
  function DefaultDist[93989].dsiEqualDMaps[93940](arg _mt[94021]:_MT[238], arg this[94019]:DefaultDist[93989], arg d[93938]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (93943 return 0)
  }
  function DefaultDist[93989].trackDomains[93950](arg _mt[94025]:_MT[238], arg this[94023]:DefaultDist[93989]) param : _unknown[51] "method" "primary method"
  {
    (93953 return 0)
  }
  function DefaultDist[93989].dsiTrackDomains[93960](arg _mt[94029]:_MT[238], arg this[94027]:DefaultDist[93989]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93963 return 0)
  }
  function DefaultDist[93989].singleton[93970](arg _mt[94033]:_MT[238], arg this[94031]:DefaultDist[93989]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (93973 return 1)
  }
  function DefaultDist[93989].dsiIsLayout[93980](arg _mt[94037]:_MT[238], arg this[94035]:DefaultDist[93989]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (93983 return 1)
  }
  type DefaultDist[93989] BaseDist
  unknown defaultDist[94050] "locale private"(94040 'new'(94049 call dmap(94044 'new'(_chpl_manager = unmanaged[220](?))(94047 call DefaultDist))))
  (94053 'end of statement')
  function chpl_defaultDistInitPrivate[94056]() : _unknown[51] "no return value for void"
  {
    if(94096 call _cond_test(94063 call ==(94059 call . defaultDist c"_value") nil[44]))
    {
      const nd[94075] "const"(94065 'new'(94074 call dmap(94069 'new'(_chpl_manager = unmanaged[220](?))(94072 call DefaultDist))))
      (94078 'end of statement')
      (94094 'move' defaultDist(94093 call chpl__autoCopy(94091 call(94087 call . nd c"clone"))))
    }
  }
  function DefaultRectangularDom[100787].linksDistribution[94130](arg _mt[100791]:_MT[238], arg this[100789]:DefaultRectangularDom[100787]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (94133 return 0)
  }
  function DefaultRectangularDom[100787].dsiLinksDistribution[94140](arg _mt[100795]:_MT[238], arg this[100793]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (94143 return 0)
  }
  function DefaultRectangularDom[100787].isDefaultRectangular[94150](arg _mt[100799]:_MT[238], arg this[100797]:DefaultRectangularDom[100787]) param : _unknown[51] "method" "primary method"
  {
    (94153 return 1)
  }
  function DefaultRectangularDom[100787].isDefaultRectangular[94160](arg _mt[100803]:_MT[238], arg this[100801]:DefaultRectangularDom[100787]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (94163 return 1)
  }
  function DefaultRectangularDom[100787].init[94172](arg _mt[100807]:_MT[238], arg this[100805]:DefaultRectangularDom[100787], param arg rank[94170]:_any[178](?), arg idxType[94174]:_any[178](?), param arg stridable[94176]:_any[178](?), arg dist[94178]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94188 call(94181 call . super c"init") rank idxType stridable)
    (94198 call =(94194 call . this c"dist") dist)
  }
  function DefaultRectangularDom[100787].intIdxType[94205](arg _mt[100811]:_MT[238], arg this[100809]:DefaultRectangularDom[100787]) type : _unknown[51] "method" "primary method" "no parens"
  {
    (94211 return(94210 call chpl__idxTypeToIntIdxType idxType))
  }
  function DefaultRectangularDom[100787].dsiMyDist[94218](arg _mt[100815]:_MT[238], arg this[100813]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (94221 return dist)
  }
  function DefaultRectangularDom[100787].chpl__serialize[94252](arg _mt[100819]:_MT[238], arg this[100817]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method"
  {
    (94265 return(94254 'new'(94264 call _serialized_domain rank idxType stridable(94262 call dsiDims) 1)))
  }
  function DefaultRectangularDom[100787].chpl__deserialize[94274](arg _mt[100823]:_MT[238], arg this[100821]:DefaultRectangularDom[100787], arg data[94272]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (94302 return(94301 call(94279 call . defaultDist c"newRectangularDom")(94283 call . data c"rank")(94288 call . data c"idxType")(94292 call . data c"stridable")(94298 call . data c"dims")))
  }
  function DefaultRectangularDom[100787].dsiDisplayRepresentation[94309](arg _mt[100827]:_MT[238], arg this[100825]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (94331 call writeln "ranges = " ranges)
  }
  function DefaultRectangularDom[100787].dsiGetIndices[94338](arg _mt[100831]:_MT[238], arg this[100829]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method"
  {
    (94341 return ranges)
  }
  function DefaultRectangularDom[100787].dsiSetIndices[94350](arg _mt[100835]:_MT[238], arg this[100833]:DefaultRectangularDom[100787], arg x[94348]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94354 call = ranges x)
  }
  function DefaultRectangularDom[100787].dsiAssignDomain[94366](arg _mt[100839]:_MT[238], arg this[100837]:DefaultRectangularDom[100787], arg rhs[94363] :
  _domain, arg lhsPrivate[94369] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94376 call chpl_assignDomainWithGetSetIndices this rhs)
  }
  function DefaultRectangularDom[100787].these_help[94387](arg _mt[100843]:_MT[238], arg this[100841]:DefaultRectangularDom[100787], param arg d[94384] :
  int[13]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94629 call _cond_test(94394 call == d(94392 call - rank 1)))
    {
      {
        unknown _indexOfInterest[94404] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94405] "expr temp" "temp"
        (94414 'move' _iterator[94405](94412 call _getIterator(94400 call ranges d)))
        Defer
        {
          {
            (94431 call _freeIterator _iterator[94405])
          }
        }
        { scopeless type
          (94420 'move' _indexOfInterest[94404](94417 call iteratorIndex _iterator[94405]))
        }
        ForLoop[94406]
        {
          unknown i[94424] "index var" "insert auto destroy"
          (94426 'move' i[94424] _indexOfInterest[94404])
          (94402 yield i)
          label _continueLabel[94409]
          _indexOfInterest[94404]
          _iterator[94405]
        }
        label _breakLabel[94410]
      }
    }
    {
      if(94625 call _cond_test(94444 call == d(94442 call - rank 2)))
      {
        {
          unknown _indexOfInterest[94500] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94501] "expr temp" "temp"
          (94510 'move' _iterator[94501](94508 call _getIterator(94450 call ranges d)))
          Defer
          {
            {
              (94527 call _freeIterator _iterator[94501])
            }
          }
          { scopeless type
            (94516 'move' _indexOfInterest[94500](94513 call iteratorIndex _iterator[94501]))
          }
          ForLoop[94502]
          {
            unknown i[94520] "index var" "insert auto destroy"
            (94522 'move' i[94520] _indexOfInterest[94500])
            {
              unknown _indexOfInterest[94466] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94467] "expr temp" "temp"
              (94476 'move' _iterator[94467](94474 call _getIterator(94458 call these_help(94455 call - rank 1))))
              Defer
              {
                {
                  (94493 call _freeIterator _iterator[94467])
                }
              }
              { scopeless type
                (94482 'move' _indexOfInterest[94466](94479 call iteratorIndex _iterator[94467]))
              }
              ForLoop[94468]
              {
                unknown j[94486] "index var" "insert auto destroy"
                (94488 'move' j[94486] _indexOfInterest[94466])
                (94464 yield(94462 call _build_tuple i j))
                label _continueLabel[94471]
                _indexOfInterest[94466]
                _iterator[94467]
              }
              label _breakLabel[94472]
            }
            label _continueLabel[94505]
            _indexOfInterest[94500]
            _iterator[94501]
          }
          label _breakLabel[94506]
        }
      }
      {
        {
          unknown _indexOfInterest[94590] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94591] "expr temp" "temp"
          (94600 'move' _iterator[94591](94598 call _getIterator(94539 call ranges d)))
          Defer
          {
            {
              (94617 call _freeIterator _iterator[94591])
            }
          }
          { scopeless type
            (94606 'move' _indexOfInterest[94590](94603 call iteratorIndex _iterator[94591]))
          }
          ForLoop[94592]
          {
            unknown i[94610] "index var" "insert auto destroy"
            (94612 'move' i[94610] _indexOfInterest[94590])
            {
              unknown _indexOfInterest[94556] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94557] "expr temp" "temp"
              (94566 'move' _iterator[94557](94564 call _getIterator(94547 call these_help(94544 call + d 1))))
              Defer
              {
                {
                  (94583 call _freeIterator _iterator[94557])
                }
              }
              { scopeless type
                (94572 'move' _indexOfInterest[94556](94569 call iteratorIndex _iterator[94557]))
              }
              ForLoop[94558]
              {
                unknown j[94576] "index var" "insert auto destroy"
                (94578 'move' j[94576] _indexOfInterest[94556])
                (94554 yield(94552 call _build_tuple i(94550 'expand_tuple' j)))
                label _continueLabel[94561]
                _indexOfInterest[94556]
                _iterator[94557]
              }
              label _breakLabel[94562]
            }
            label _continueLabel[94595]
            _indexOfInterest[94590]
            _iterator[94591]
          }
          label _breakLabel[94596]
        }
      }
    }
  }
  function DefaultRectangularDom[100787].these_help[94643](arg _mt[100847]:_MT[238], arg this[100845]:DefaultRectangularDom[100787], param arg d[94640] :
  int[13], arg block[94645]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94898 call _cond_test(94655 call == d(94653 call -(94649 call . block c"size") 1)))
    {
      {
        unknown _indexOfInterest[94665] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94666] "expr temp" "temp"
        (94675 'move' _iterator[94666](94673 call _getIterator(94661 call block d)))
        Defer
        {
          {
            (94692 call _freeIterator _iterator[94666])
          }
        }
        { scopeless type
          (94681 'move' _indexOfInterest[94665](94678 call iteratorIndex _iterator[94666]))
        }
        ForLoop[94667]
        {
          unknown i[94685] "index var" "insert auto destroy"
          (94687 'move' i[94685] _indexOfInterest[94665])
          (94663 yield i)
          label _continueLabel[94670]
          _indexOfInterest[94665]
          _iterator[94666]
        }
        label _breakLabel[94671]
      }
    }
    {
      if(94894 call _cond_test(94708 call == d(94706 call -(94702 call . block c"size") 2)))
      {
        {
          unknown _indexOfInterest[94768] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94769] "expr temp" "temp"
          (94778 'move' _iterator[94769](94776 call _getIterator(94714 call block d)))
          Defer
          {
            {
              (94795 call _freeIterator _iterator[94769])
            }
          }
          { scopeless type
            (94784 'move' _indexOfInterest[94768](94781 call iteratorIndex _iterator[94769]))
          }
          ForLoop[94770]
          {
            unknown i[94788] "index var" "insert auto destroy"
            (94790 'move' i[94788] _indexOfInterest[94768])
            {
              unknown _indexOfInterest[94734] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94735] "expr temp" "temp"
              (94744 'move' _iterator[94735](94742 call _getIterator(94726 call these_help(94722 call -(94718 call . block c"size") 1) block)))
              Defer
              {
                {
                  (94761 call _freeIterator _iterator[94735])
                }
              }
              { scopeless type
                (94750 'move' _indexOfInterest[94734](94747 call iteratorIndex _iterator[94735]))
              }
              ForLoop[94736]
              {
                unknown j[94754] "index var" "insert auto destroy"
                (94756 'move' j[94754] _indexOfInterest[94734])
                (94732 yield(94730 call _build_tuple i j))
                label _continueLabel[94739]
                _indexOfInterest[94734]
                _iterator[94735]
              }
              label _breakLabel[94740]
            }
            label _continueLabel[94773]
            _indexOfInterest[94768]
            _iterator[94769]
          }
          label _breakLabel[94774]
        }
      }
      {
        {
          unknown _indexOfInterest[94859] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94860] "expr temp" "temp"
          (94869 'move' _iterator[94860](94867 call _getIterator(94807 call block d)))
          Defer
          {
            {
              (94886 call _freeIterator _iterator[94860])
            }
          }
          { scopeless type
            (94875 'move' _indexOfInterest[94859](94872 call iteratorIndex _iterator[94860]))
          }
          ForLoop[94861]
          {
            unknown i[94879] "index var" "insert auto destroy"
            (94881 'move' i[94879] _indexOfInterest[94859])
            {
              unknown _indexOfInterest[94825] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94826] "expr temp" "temp"
              (94835 'move' _iterator[94826](94833 call _getIterator(94816 call these_help(94812 call + d 1) block)))
              Defer
              {
                {
                  (94852 call _freeIterator _iterator[94826])
                }
              }
              { scopeless type
                (94841 'move' _indexOfInterest[94825](94838 call iteratorIndex _iterator[94826]))
              }
              ForLoop[94827]
              {
                unknown j[94845] "index var" "insert auto destroy"
                (94847 'move' j[94845] _indexOfInterest[94825])
                (94823 yield(94821 call _build_tuple i(94819 'expand_tuple' j)))
                label _continueLabel[94830]
                _indexOfInterest[94825]
                _iterator[94826]
              }
              label _breakLabel[94831]
            }
            label _continueLabel[94864]
            _indexOfInterest[94859]
            _iterator[94860]
          }
          label _breakLabel[94865]
        }
      }
    }
  }
  function DefaultRectangularDom[100787].these[94912](arg _mt[100851]:_MT[238], arg this[100849]:DefaultRectangularDom[100787], arg tasksPerLocale[94909] =
  dataParTasksPerLocale, arg ignoreRunning[94915] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[94919] =
  dataParMinGranularity, arg offset[94931] =
  (94930 call createTuple rank intIdxType(94928 call _cast intIdxType 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(95024 call _cond_test(94936 call == rank 1))
    {
      {
        unknown _indexOfInterest[94946] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94947] "expr temp" "temp"
        (94956 'move' _iterator[94947](94954 call _getIterator(94942 call ranges 0)))
        Defer
        {
          {
            (94973 call _freeIterator _iterator[94947])
          }
        }
        { scopeless type
          (94962 'move' _indexOfInterest[94946](94959 call iteratorIndex _iterator[94947]))
        }
        ForLoop[94948]
        {
          unknown i[94966] "index var" "insert auto destroy"
          (94968 'move' i[94966] _indexOfInterest[94946])
          (94944 yield i)
          label _continueLabel[94951]
          _indexOfInterest[94946]
          _iterator[94947]
        }
        label _breakLabel[94952]
      }
    }
    {
      {
        unknown _indexOfInterest[94989] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94990] "expr temp" "temp"
        (94999 'move' _iterator[94990](94997 call _getIterator(94985 call these_help 0)))
        Defer
        {
          {
            (95016 call _freeIterator _iterator[94990])
          }
        }
        { scopeless type
          (95005 'move' _indexOfInterest[94989](95002 call iteratorIndex _iterator[94990]))
        }
        ForLoop[94991]
        {
          unknown i[95009] "index var" "insert auto destroy"
          (95011 'move' i[95009] _indexOfInterest[94989])
          (94987 yield i)
          label _continueLabel[94994]
          _indexOfInterest[94989]
          _iterator[94990]
        }
        label _breakLabel[94995]
      }
    }
  }
  function DefaultRectangularDom[100787].these[95037](arg _mt[100855]:_MT[238], arg this[100853]:DefaultRectangularDom[100787], param arg tag[95034] :
  iterKind, arg tasksPerLocale[95040] =
  dataParTasksPerLocale, arg ignoreRunning[95044] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[95048] =
  dataParMinGranularity, arg offset[95060] =
  (95059 call createTuple rank intIdxType(95057 call _cast intIdxType 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(95093 call _cond_test chpl__testParFlag)
    {
      (95091 call chpl__testPar "default rectangular domain standalone invoked on " ranges)
    }
    if(95121 call _cond_test debugDefaultDist)
    {
      (95119 call chpl_debug_writeln "*** In domain standalone code:")
    }
    const numTasks[95138] "const"(95135 IfExpr (95128 call == tasksPerLocale 0) then
    { scopeless
      (95131 call . here c"maxTaskPar")
    } else
    { scopeless
      tasksPerLocale
    } )
    (95141 'end of statement')
    if(95202 call _cond_test debugDefaultDist)
    {
      (95199 call chpl_debug_writeln "    numTasks=" numTasks " (" ignoreRunning "), minIndicesPerTask=" minIndicesPerTask)
    }
    const tmp[95231] "const" "temp"(95228 IfExpr (95213 'task_get_serial') then
    { scopeless
      (95219 call _build_tuple 1(95216 call - 1))
    } else
    { scopeless
      (95227 call _computeChunkStuff numTasks ignoreRunning minIndicesPerTask ranges)
    } )
    (95238 call _check_tuple_var_decl tmp[95231] 2)
    const numChunks[95206] "const"(95232 call tmp[95231] 0)
    const parDim[95208] "const"(95235 call tmp[95231] 1)
    (95243 'end of statement')
    if(95328 call _cond_test debugDefaultDist)
    {
      (95325 call chpl_debug_writeln "    numChunks=" numChunks " parDim=" parDim " ranges(" parDim ").size="(95322 call .(95321 call ranges parDim) c"size"))
    }
    if(95418 call _cond_test debugDataPar)
    {
      (95415 call chpl_debug_writeln "### numTasksPerLoc = " numTasks "\n" "### ignoreRunning = " ignoreRunning "\n" "### minIndicesPerTask = " minIndicesPerTask "\n" "### numChunks = " numChunks " (parDim = " parDim ")\n" "### nranges = " ranges)
    }
    if(96098 call _cond_test(95424 call <= numChunks 1))
    {
      {
        unknown _indexOfInterest[95435] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[95436] "expr temp" "temp"
        (95445 'move' _iterator[95436](95443 call _getIterator(95430 call these_help 0)))
        Defer
        {
          {
            (95462 call _freeIterator _iterator[95436])
          }
        }
        { scopeless type
          (95451 'move' _indexOfInterest[95435](95448 call iteratorIndex _iterator[95436]))
        }
        ForLoop[95437]
        {
          unknown i[95455] "index var" "insert auto destroy"
          (95457 'move' i[95455] _indexOfInterest[95435])
          {
            (95432 yield i)
          }
          label _continueLabel[95440]
          _indexOfInterest[95435]
          _iterator[95436]
        }
        label _breakLabel[95441]
      }
    }
    {
      if(95494 call _cond_test debugDefaultDist)
      {
        (95491 call chpl_debug_writeln "*** DI: ranges = " ranges)
      }
      {
        unknown tmpIter[95751] "expr temp" "maybe ref" "no copy" "temp"
        (95754 'move' tmpIter[95751](95504 call #(95501 call chpl_build_low_bounded_range 0) numChunks))
        unknown isRngDomArr[96079] "maybe param" "temp"
        (96094 'move' isRngDomArr[96079](96092 call ||(96081 call isBoundedRange tmpIter[95751])(96090 call ||(96084 call isDomain tmpIter[95751])(96087 call isArray tmpIter[95751]))))
        if isRngDomArr[96079]
        {
          const _coforallCount[95946] "const" "end count" "temp"
          (96015 'move' _coforallCount[95946](96012 call _endCountAlloc 1))
          unknown numTasks[95947] "temp"
          (95999 'move' numTasks[95947](95995 call . tmpIter[95751] c"size"))
          (95990 call _upEndCount _coforallCount[95946] 1 numTasks[95947])
          (95987 call chpl_resetTaskSpawn numTasks[95947])
          unknown _indexOfInterest[95954] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[95955] "expr temp" "temp"
          (95964 'move' _iterator[95955](95962 call _getIterator tmpIter[95751]))
          Defer
          {
            {
              (95980 call _freeIterator _iterator[95955])
            }
          }
          { scopeless type
            (95969 'move' _indexOfInterest[95954](95966 call iteratorIndex _iterator[95955]))
          }
          ForLoop[95956]
          {
            unknown chunk[95973] "coforall index var" "index var" "insert auto destroy"
            (95975 'move' chunk[95973] _indexOfInterest[95954])
            {
              {
                unknown block[95758] ranges
                (95761 'end of statement')
                const len[95763] "const"(95802 IfExpr (95765 call !(95767 call .(95769 call ranges parDim) c"stridable")) then
                { scopeless
                  (95774 call .(95776 call ranges parDim) c"size")
                } else
                { scopeless
                  (95781 call *(95783 call _cast uint[115](95786 call .(95788 call ranges parDim) c"size"))(95792 call _cast uint[115](95795 call abs(95797 call .(95799 call ranges parDim) c"stride"))))
                } )
                (95804 'end of statement')
                const tmp[95806] "const" "temp"(95808 call _computeBlock len numChunks chunk(95813 call .(95815 call ranges parDim) c"_high")(95819 call .(95821 call ranges parDim) c"_low")(95825 call .(95827 call ranges parDim) c"_low"))
                (95832 call _check_tuple_var_decl tmp[95806] 2)
                const lo[95835] "const"(95837 call tmp[95806] 0)
                const hi[95840] "const"(95842 call tmp[95806] 1)
                (95845 'end of statement')
                if(95847 call _cond_test(95849 call .(95851 call block parDim) c"stridable"))
                {
                  (95857 call =(95859 call block parDim)(95862 call chpl_align(95864 call chpl_by(95866 call chpl_build_bounded_range lo hi)(95870 call .(95872 call block parDim) c"stride"))(95876 call chpl__idxToInt(95878 call .(95880 call block parDim) c"alignment"))))
                }
                {
                  (95886 call =(95888 call block parDim)(95891 call chpl_build_bounded_range lo hi))
                }
                if(95896 call _cond_test debugDefaultDist)
                {
                  (95900 call chpl_debug_writeln "*** DI[" chunk "]: block = " block)
                }
                {
                  unknown _indexOfInterest[95907] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[95909] "expr temp" "temp"
                  (95911 'move' _iterator[95909](95914 call _getIterator(95916 call these_help 0 block)))
                  Defer
                  {
                    {
                      (95921 call _freeIterator _iterator[95909])
                    }
                  }
                  { scopeless type
                    (95925 'move' _indexOfInterest[95907](95928 call iteratorIndex _iterator[95909]))
                  }
                  ForLoop[95930]
                  {
                    unknown i[95933] "index var" "insert auto destroy"
                    (95935 'move' i[95933] _indexOfInterest[95907])
                    {
                      (95939 yield i)
                    }
                    label _continueLabel[95941]
                    _indexOfInterest[95907]
                    _iterator[95909]
                  }
                  label _breakLabel[95943]
                }
              }
              (95949 call _downEndCount _coforallCount[95946] nil[44])
              (95948 'coforall loop')
            }
            label _continueLabel[95959]
            _indexOfInterest[95954]
            _iterator[95955]
          }
          label _breakLabel[95960]
          Defer
          {
            {
              (96002 call _endCountFree _coforallCount[95946])
            }
          }
          (96007 call _waitEndCount _coforallCount[95946] 1 numTasks[95947])
        }
        {
          const _coforallCount[96019] "const" "end count" "temp"
          (96076 'move' _coforallCount[96019](96073 call _endCountAlloc 1))
          unknown _indexOfInterest[96027] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[96028] "expr temp" "temp"
          (96037 'move' _iterator[96028](96035 call _getIterator tmpIter[95751]))
          Defer
          {
            {
              (96053 call _freeIterator _iterator[96028])
            }
          }
          { scopeless type
            (96042 'move' _indexOfInterest[96027](96039 call iteratorIndex _iterator[96028]))
          }
          ForLoop[96029]
          {
            unknown chunk[96046] "coforall index var" "index var" "insert auto destroy"
            (96048 'move' chunk[96046] _indexOfInterest[96027])
            (96060 call _upEndCount _coforallCount[96019] 1)
            {
              {
                unknown block[95507] ranges
                (95510 'end of statement')
                const len[95556] "const"(95553 IfExpr (95519 call !(95516 call .(95515 call ranges parDim) c"stridable")) then
                { scopeless
                  (95525 call .(95524 call ranges parDim) c"size")
                } else
                { scopeless
                  (95551 call *(95536 call _cast uint[115](95532 call .(95531 call ranges parDim) c"size"))(95549 call _cast uint[115](95547 call abs(95543 call .(95542 call ranges parDim) c"stride"))))
                } )
                (95559 'end of statement')
                const tmp[95592] "const" "temp"(95591 call _computeBlock len numChunks chunk(95574 call .(95573 call ranges parDim) c"_high")(95581 call .(95580 call ranges parDim) c"_low")(95588 call .(95587 call ranges parDim) c"_low"))
                (95599 call _check_tuple_var_decl tmp[95592] 2)
                const lo[95560] "const"(95593 call tmp[95592] 0)
                const hi[95562] "const"(95596 call tmp[95592] 1)
                (95604 'end of statement')
                if(95655 call _cond_test(95609 call .(95608 call block parDim) c"stridable"))
                {
                  (95641 call =(95615 call block parDim)(95639 call chpl_align(95627 call chpl_by(95618 call chpl_build_bounded_range lo hi)(95624 call .(95623 call block parDim) c"stride"))(95638 call chpl__idxToInt(95634 call .(95633 call block parDim) c"alignment"))))
                }
                {
                  (95652 call =(95647 call block parDim)(95650 call chpl_build_bounded_range lo hi))
                }
                if(95703 call _cond_test debugDefaultDist)
                {
                  (95700 call chpl_debug_writeln "*** DI[" chunk "]: block = " block)
                }
                {
                  unknown _indexOfInterest[95717] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[95718] "expr temp" "temp"
                  (95727 'move' _iterator[95718](95725 call _getIterator(95712 call these_help 0 block)))
                  Defer
                  {
                    {
                      (95744 call _freeIterator _iterator[95718])
                    }
                  }
                  { scopeless type
                    (95733 'move' _indexOfInterest[95717](95730 call iteratorIndex _iterator[95718]))
                  }
                  ForLoop[95719]
                  {
                    unknown i[95737] "index var" "insert auto destroy"
                    (95739 'move' i[95737] _indexOfInterest[95717])
                    {
                      (95714 yield i)
                    }
                    label _continueLabel[95722]
                    _indexOfInterest[95717]
                    _iterator[95718]
                  }
                  label _breakLabel[95723]
                }
              }
              (96022 call _downEndCount _coforallCount[96019] nil[44])
              (96021 'coforall loop')
            }
            label _continueLabel[96032]
            _indexOfInterest[96027]
            _iterator[96028]
          }
          label _breakLabel[96033]
          Defer
          {
            {
              (96064 call _endCountFree _coforallCount[96019])
            }
          }
          (96069 call _waitEndCount _coforallCount[96019] 1)
        }
      }
    }
  }
  where {
    (95068 call == tag(95065 call . iterKind c"standalone"))
  }
  function DefaultRectangularDom[100787].these[96111](arg _mt[100859]:_MT[238], arg this[100857]:DefaultRectangularDom[100787], param arg tag[96108] :
  iterKind, arg tasksPerLocale[96114] =
  dataParTasksPerLocale, arg ignoreRunning[96118] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[96122] =
  dataParMinGranularity, arg offset[96134] =
  (96133 call createTuple rank intIdxType(96131 call _cast intIdxType 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    const numSublocs[96150] "const"(96149 call(96145 call . here c"getChildCount"))
    (96153 'end of statement')
    if(98809 call _cond_test(96160 call && localeModelHasSublocales(96158 call != numSublocs 0)))
    {
      unknown dptpl[96174](96171 IfExpr (96164 call == tasksPerLocale 0) then
      { scopeless
        (96167 call . here c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale
      } )
      (96177 'end of statement')
      if(96215 call _cond_test(96180 call ! ignoreRunning))
      {
        const otherTasks[96191] "const"(96189 call -(96187 call(96183 call . here c"runningTasks")) 1)
        (96194 'end of statement')
        (96212 call = dptpl(96209 IfExpr (96199 call < otherTasks dptpl) then
        { scopeless
          (96206 call _cast int[13](96203 call - dptpl otherTasks))
        } else
        { scopeless
          1
        } ))
      }
      const numSublocTasks[96224] "const"(96223 call min numSublocs dptpl)
      (96227 'end of statement')
      const tmp[96254] "const" "temp"(96251 IfExpr (96235 'task_get_serial') then
      { scopeless
        (96241 call _build_tuple 1(96238 call - 1))
      } else
      { scopeless
        (96250 call _computeChunkStuff numSublocTasks(ignoreRunning = 1) minIndicesPerTask ranges)
      } )
      (96261 call _check_tuple_var_decl tmp[96254] 2)
      const numChunks[96228] "const"(96255 call tmp[96254] 0)
      const parDim[96230] "const"(96258 call tmp[96254] 1)
      (96266 'end of statement')
      if(96292 call _cond_test debugDataParNuma)
      {
        (96289 call chpl_debug_writeln "### numSublocs = " numSublocs "\n" "### numTasksPerSubloc = " numSublocTasks "\n" "### ignoreRunning = " ignoreRunning "\n" "### minIndicesPerTask = " minIndicesPerTask "\n" "### numChunks = " numChunks " (parDim = " parDim ")\n" "### nranges = " ranges)
      }
      if(98079 call _cond_test(96298 call == numChunks 1))
      {
        if(96405 call _cond_test(96302 call == rank 1))
        {
          (96321 yield(96319 call _build_tuple(96317 call #(96308 call chpl_build_low_bounded_range(96307 call offset 0))(96314 call .(96313 call ranges 0) c"size"))))
        }
        {
          unknown block[96331](96329 call * rank(96328 call range intIdxType))
          (96334 'end of statement')
          {
            unknown i[96365] 0
            unknown tmp[96366] "maybe param" "temp"
            (96378 'move' tmp[96366](96376 call chpl_compute_low_param_loop_bound 0(96339 call - rank 1)))
            unknown tmp[96367] "maybe param" "temp"
            (96388 'move' tmp[96367](96386 call chpl_compute_high_param_loop_bound 0(96383 call - rank 1)))
            unknown tmp[96368] "maybe param" "temp"
            (96391 'move' tmp[96368] 1)
            ParamForLoop[96393]
            { i[96365] tmp[96366] tmp[96367] tmp[96368]
              (96362 call =(96346 call block i)(96360 call #(96351 call chpl_build_low_bounded_range(96350 call offset i))(96357 call .(96356 call ranges i) c"size")))
            }
            label _unused_continueLabel[96370]
            label _breakLabel[96369]
          }
          (96403 yield block)
        }
      }
      {
        {
          unknown tmpIter[97219] "expr temp" "maybe ref" "no copy" "temp"
          (97222 'move' tmpIter[97219](96415 call #(96412 call chpl_build_low_bounded_range 0) numChunks))
          unknown isRngDomArr[98059] "maybe param" "temp"
          (98074 'move' isRngDomArr[98059](98072 call ||(98061 call isBoundedRange tmpIter[97219])(98070 call ||(98064 call isDomain tmpIter[97219])(98067 call isArray tmpIter[97219]))))
          if isRngDomArr[98059]
          {
            const _coforallCount[97931] "const" "end count" "temp"
            (97996 'move' _coforallCount[97931](97993 call _endCountAlloc 0))
            unknown numTasks[97932] "temp"
            (97980 'move' numTasks[97932](97976 call . tmpIter[97219] c"size"))
            (97971 call _upEndCount _coforallCount[97931] 0 numTasks[97932])
            unknown _indexOfInterest[97938] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[97939] "expr temp" "temp"
            (97948 'move' _iterator[97939](97946 call _getIterator tmpIter[97219]))
            Defer
            {
              {
                (97964 call _freeIterator _iterator[97939])
              }
            }
            { scopeless type
              (97953 'move' _indexOfInterest[97938](97950 call iteratorIndex _iterator[97939]))
            }
            ForLoop[97940]
            {
              unknown chunk[97957] "coforall index var" "index var" "insert auto destroy"
              (97959 'move' chunk[97957] _indexOfInterest[97938])
              const tmp[97225] "const" "temp"
              (97227 'move' tmp[97225](97229 'deref'(97230 '_wide_get_locale'(97235 call(97232 call . here c"getChild") chunk))))
              {
                {
                  if(97243 call _cond_test debugDataParNuma)
                  {
                    if(97247 call _cond_test(97249 call != chunk(97252 call chpl_getSubloc)))
                    {
                      (97256 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk ", on "(97261 call chpl_getSubloc) ") ***")
                    }
                  }
                  const numSublocTasks[97266] "const"(97287 IfExpr (97268 call < chunk(97271 call % dptpl numChunks)) then
                  { scopeless
                    (97276 call +(97278 call / dptpl numChunks) 1)
                  } else
                  { scopeless
                    (97284 call / dptpl numChunks)
                  } )
                  (97289 'end of statement')
                  unknown locBlock[97291](97293 call * rank(97296 call range intIdxType))
                  (97299 'end of statement')
                  {
                    unknown i[97301] 0
                    unknown tmp[97304] "maybe param" "temp"
                    (97306 'move' tmp[97304](97309 call chpl_compute_low_param_loop_bound 0(97312 call - rank 1)))
                    unknown tmp[97315] "maybe param" "temp"
                    (97317 'move' tmp[97315](97320 call chpl_compute_high_param_loop_bound 0(97323 call - rank 1)))
                    unknown tmp[97326] "maybe param" "temp"
                    (97328 'move' tmp[97326] 1)
                    ParamForLoop[97331]
                    { i[97301] tmp[97304] tmp[97315] tmp[97326]
                      (97339 call =(97341 call locBlock i)(97344 call #(97346 call chpl_build_low_bounded_range(97348 call offset i))(97351 call .(97353 call ranges i) c"size")))
                    }
                    label _unused_continueLabel[97356]
                    label _breakLabel[97358]
                  }
                  unknown followMe[97361] locBlock(97364 call * rank(97367 call range intIdxType))
                  (97370 'end of statement')
                  const tmp[97372] "const" "temp"(97374 call _computeBlock(97376 call .(97378 call locBlock parDim) c"size") numChunks chunk(97384 call .(97386 call locBlock parDim) c"_high")(97390 call .(97392 call locBlock parDim) c"_low")(97396 call .(97398 call locBlock parDim) c"_low"))
                  (97403 call _check_tuple_var_decl tmp[97372] 2)
                  const lo[97406] "const"(97408 call tmp[97372] 0)
                  const hi[97411] "const"(97413 call tmp[97372] 1)
                  (97416 'end of statement')
                  (97418 call =(97420 call followMe parDim)(97423 call chpl_build_bounded_range lo hi))
                  const tmp[97427] "const" "temp"(97429 call _computeChunkStuff numSublocTasks(ignoreRunning = 1) minIndicesPerTask followMe)
                  (97437 call _check_tuple_var_decl tmp[97427] 2)
                  const numChunks2[97440] "const"(97442 call tmp[97427] 0)
                  const parDim2[97445] "const"(97447 call tmp[97427] 1)
                  (97450 'end of statement')
                  {
                    unknown tmpIter[97452] "expr temp" "maybe ref" "no copy" "temp"
                    (97454 'move' tmpIter[97452](97457 call #(97459 call chpl_build_low_bounded_range 0) numChunks2))
                    unknown isRngDomArr[97462] "maybe param" "temp"
                    (97464 'move' isRngDomArr[97462](97467 call ||(97469 call isBoundedRange tmpIter[97452])(97472 call ||(97474 call isDomain tmpIter[97452])(97477 call isArray tmpIter[97452]))))
                    if isRngDomArr[97462]
                    {
                      const _coforallCount[97481] "const" "end count" "temp"
                      (97483 'move' _coforallCount[97481](97486 call _endCountAlloc 1))
                      unknown numTasks[97488] "temp"
                      (97490 'move' numTasks[97488](97493 call . tmpIter[97452] c"size"))
                      (97497 call _upEndCount _coforallCount[97481] 1 numTasks[97488])
                      (97502 call chpl_resetTaskSpawn numTasks[97488])
                      unknown _indexOfInterest[97504] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97506] "expr temp" "temp"
                      (97508 'move' _iterator[97506](97511 call _getIterator tmpIter[97452]))
                      Defer
                      {
                        {
                          (97515 call _freeIterator _iterator[97506])
                        }
                      }
                      { scopeless type
                        (97519 'move' _indexOfInterest[97504](97522 call iteratorIndex _iterator[97506]))
                      }
                      ForLoop[97524]
                      {
                        unknown chunk2[97527] "coforall index var" "index var" "insert auto destroy"
                        (97529 'move' chunk2[97527] _indexOfInterest[97504])
                        {
                          {
                            unknown locBlock2[97536](97538 call * rank(97541 call range intIdxType))
                            (97544 'end of statement')
                            {
                              unknown i[97546] 0
                              unknown tmp[97549] "maybe param" "temp"
                              (97551 'move' tmp[97549](97554 call chpl_compute_low_param_loop_bound 0(97557 call - rank 1)))
                              unknown tmp[97560] "maybe param" "temp"
                              (97562 'move' tmp[97560](97565 call chpl_compute_high_param_loop_bound 0(97568 call - rank 1)))
                              unknown tmp[97571] "maybe param" "temp"
                              (97573 'move' tmp[97571] 1)
                              ParamForLoop[97576]
                              { i[97546] tmp[97549] tmp[97560] tmp[97571]
                                (97584 call =(97586 call locBlock2 i)(97589 call chpl_build_bounded_range(97591 call .(97593 call followMe i) c"low")(97597 call .(97599 call followMe i) c"high")))
                              }
                              label _unused_continueLabel[97602]
                              label _breakLabel[97604]
                            }
                            unknown followMe2[97607] locBlock2(97610 call * rank(97613 call range intIdxType))
                            (97616 'end of statement')
                            const low[97618] "const"(97620 call .(97622 call locBlock2 parDim2) c"_low")
                            const high[97626] "const"(97628 call .(97630 call locBlock2 parDim2) c"_high")
                            (97634 'end of statement')
                            const tmp[97636] "const" "temp"(97638 call _computeBlock(97640 call .(97642 call locBlock2 parDim2) c"size") numChunks2 chunk2 high low low)
                            (97652 call _check_tuple_var_decl tmp[97636] 2)
                            const lo[97655] "const"(97657 call tmp[97636] 0)
                            const hi[97660] "const"(97662 call tmp[97636] 1)
                            (97665 'end of statement')
                            (97667 call =(97669 call followMe2 parDim2)(97672 call chpl_build_bounded_range lo hi))
                            if(97676 call _cond_test debugDataParNuma)
                            {
                              (97680 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                            }
                            (97691 yield followMe2)
                          }
                          (97694 call _downEndCount _coforallCount[97481] nil[44])
                          (97533 'coforall loop')
                        }
                        label _continueLabel[97697]
                        _indexOfInterest[97504]
                        _iterator[97506]
                      }
                      label _breakLabel[97699]
                      Defer
                      {
                        {
                          (97703 call _endCountFree _coforallCount[97481])
                        }
                      }
                      (97707 call _waitEndCount _coforallCount[97481] 1 numTasks[97488])
                    }
                    {
                      const _coforallCount[97712] "const" "end count" "temp"
                      (97714 'move' _coforallCount[97712](97717 call _endCountAlloc 1))
                      unknown _indexOfInterest[97719] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97721] "expr temp" "temp"
                      (97723 'move' _iterator[97721](97726 call _getIterator tmpIter[97452]))
                      Defer
                      {
                        {
                          (97730 call _freeIterator _iterator[97721])
                        }
                      }
                      { scopeless type
                        (97734 'move' _indexOfInterest[97719](97737 call iteratorIndex _iterator[97721]))
                      }
                      ForLoop[97739]
                      {
                        unknown chunk2[97742] "coforall index var" "index var" "insert auto destroy"
                        (97744 'move' chunk2[97742] _indexOfInterest[97719])
                        (97748 call _upEndCount _coforallCount[97712] 1)
                        {
                          {
                            unknown locBlock2[97755](97757 call * rank(97760 call range intIdxType))
                            (97763 'end of statement')
                            {
                              unknown i[97765] 0
                              unknown tmp[97768] "maybe param" "temp"
                              (97770 'move' tmp[97768](97773 call chpl_compute_low_param_loop_bound 0(97776 call - rank 1)))
                              unknown tmp[97779] "maybe param" "temp"
                              (97781 'move' tmp[97779](97784 call chpl_compute_high_param_loop_bound 0(97787 call - rank 1)))
                              unknown tmp[97790] "maybe param" "temp"
                              (97792 'move' tmp[97790] 1)
                              ParamForLoop[97795]
                              { i[97765] tmp[97768] tmp[97779] tmp[97790]
                                (97803 call =(97805 call locBlock2 i)(97808 call chpl_build_bounded_range(97810 call .(97812 call followMe i) c"low")(97816 call .(97818 call followMe i) c"high")))
                              }
                              label _unused_continueLabel[97821]
                              label _breakLabel[97823]
                            }
                            unknown followMe2[97826] locBlock2(97829 call * rank(97832 call range intIdxType))
                            (97835 'end of statement')
                            const low[97837] "const"(97839 call .(97841 call locBlock2 parDim2) c"_low")
                            const high[97845] "const"(97847 call .(97849 call locBlock2 parDim2) c"_high")
                            (97853 'end of statement')
                            const tmp[97855] "const" "temp"(97857 call _computeBlock(97859 call .(97861 call locBlock2 parDim2) c"size") numChunks2 chunk2 high low low)
                            (97871 call _check_tuple_var_decl tmp[97855] 2)
                            const lo[97874] "const"(97876 call tmp[97855] 0)
                            const hi[97879] "const"(97881 call tmp[97855] 1)
                            (97884 'end of statement')
                            (97886 call =(97888 call followMe2 parDim2)(97891 call chpl_build_bounded_range lo hi))
                            if(97895 call _cond_test debugDataParNuma)
                            {
                              (97899 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                            }
                            (97910 yield followMe2)
                          }
                          (97913 call _downEndCount _coforallCount[97712] nil[44])
                          (97752 'coforall loop')
                        }
                        label _continueLabel[97916]
                        _indexOfInterest[97719]
                        _iterator[97721]
                      }
                      label _breakLabel[97918]
                      Defer
                      {
                        {
                          (97922 call _endCountFree _coforallCount[97712])
                        }
                      }
                      (97926 call _waitEndCount _coforallCount[97712] 1)
                    }
                  }
                }
                (97933 call _downEndCount _coforallCount[97931] nil[44])
                (97238 'coforall on block' 1 tmp[97225])
              }
              label _continueLabel[97943]
              _indexOfInterest[97938]
              _iterator[97939]
            }
            label _breakLabel[97944]
            Defer
            {
              {
                (97983 call _endCountFree _coforallCount[97931])
              }
            }
            (97988 call _waitEndCount _coforallCount[97931] 0 numTasks[97932])
          }
          {
            const _coforallCount[98000] "const" "end count" "temp"
            (98056 'move' _coforallCount[98000](98053 call _endCountAlloc 0))
            unknown _indexOfInterest[98007] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98008] "expr temp" "temp"
            (98017 'move' _iterator[98008](98015 call _getIterator tmpIter[97219]))
            Defer
            {
              {
                (98033 call _freeIterator _iterator[98008])
              }
            }
            { scopeless type
              (98022 'move' _indexOfInterest[98007](98019 call iteratorIndex _iterator[98008]))
            }
            ForLoop[98009]
            {
              unknown chunk[98026] "coforall index var" "index var" "insert auto destroy"
              (98028 'move' chunk[98026] _indexOfInterest[98007])
              (98040 call _upEndCount _coforallCount[98000] 0)
              const tmp[97208] "const" "temp"
              (97210 'move' tmp[97208](97206 'deref'(97205 '_wide_get_locale'(96423 call(96418 call . here c"getChild") chunk))))
              {
                {
                  if(96448 call _cond_test debugDataParNuma)
                  {
                    if(96442 call _cond_test(96429 call != chunk(96428 call chpl_getSubloc)))
                    {
                      (96440 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk ", on "(96438 call chpl_getSubloc) ") ***")
                    }
                  }
                  const numSublocTasks[96474] "const"(96471 IfExpr (96458 call < chunk(96456 call % dptpl numChunks)) then
                  { scopeless
                    (96465 call +(96462 call / dptpl numChunks) 1)
                  } else
                  { scopeless
                    (96469 call / dptpl numChunks)
                  } )
                  (96477 'end of statement')
                  unknown locBlock[96485](96483 call * rank(96482 call range intIdxType))
                  (96488 'end of statement')
                  {
                    unknown i[96518] 0
                    unknown tmp[96519] "maybe param" "temp"
                    (96531 'move' tmp[96519](96529 call chpl_compute_low_param_loop_bound 0(96492 call - rank 1)))
                    unknown tmp[96520] "maybe param" "temp"
                    (96541 'move' tmp[96520](96539 call chpl_compute_high_param_loop_bound 0(96536 call - rank 1)))
                    unknown tmp[96521] "maybe param" "temp"
                    (96544 'move' tmp[96521] 1)
                    ParamForLoop[96546]
                    { i[96518] tmp[96519] tmp[96520] tmp[96521]
                      (96515 call =(96499 call locBlock i)(96513 call #(96504 call chpl_build_low_bounded_range(96503 call offset i))(96510 call .(96509 call ranges i) c"size")))
                    }
                    label _unused_continueLabel[96523]
                    label _breakLabel[96522]
                  }
                  unknown followMe[96563] locBlock(96560 call * rank(96559 call range intIdxType))
                  (96566 'end of statement')
                  const tmp[96605] "const" "temp"(96604 call _computeBlock(96577 call .(96576 call locBlock parDim) c"size") numChunks chunk(96587 call .(96586 call locBlock parDim) c"_high")(96594 call .(96593 call locBlock parDim) c"_low")(96601 call .(96600 call locBlock parDim) c"_low"))
                  (96612 call _check_tuple_var_decl tmp[96605] 2)
                  const lo[96567] "const"(96606 call tmp[96605] 0)
                  const hi[96569] "const"(96609 call tmp[96605] 1)
                  (96617 'end of statement')
                  (96626 call =(96621 call followMe parDim)(96624 call chpl_build_bounded_range lo hi))
                  const tmp[96642] "const" "temp"(96641 call _computeChunkStuff numSublocTasks(ignoreRunning = 1) minIndicesPerTask followMe)
                  (96649 call _check_tuple_var_decl tmp[96642] 2)
                  const numChunks2[96629] "const"(96643 call tmp[96642] 0)
                  const parDim2[96631] "const"(96646 call tmp[96642] 1)
                  (96654 'end of statement')
                  {
                    unknown tmpIter[96888] "expr temp" "maybe ref" "no copy" "temp"
                    (96891 'move' tmpIter[96888](96660 call #(96657 call chpl_build_low_bounded_range 0) numChunks2))
                    unknown isRngDomArr[97186] "maybe param" "temp"
                    (97201 'move' isRngDomArr[97186](97199 call ||(97188 call isBoundedRange tmpIter[96888])(97197 call ||(97191 call isDomain tmpIter[96888])(97194 call isArray tmpIter[96888]))))
                    if isRngDomArr[97186]
                    {
                      const _coforallCount[97053] "const" "end count" "temp"
                      (97122 'move' _coforallCount[97053](97119 call _endCountAlloc 1))
                      unknown numTasks[97054] "temp"
                      (97106 'move' numTasks[97054](97102 call . tmpIter[96888] c"size"))
                      (97097 call _upEndCount _coforallCount[97053] 1 numTasks[97054])
                      (97094 call chpl_resetTaskSpawn numTasks[97054])
                      unknown _indexOfInterest[97061] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97062] "expr temp" "temp"
                      (97071 'move' _iterator[97062](97069 call _getIterator tmpIter[96888]))
                      Defer
                      {
                        {
                          (97087 call _freeIterator _iterator[97062])
                        }
                      }
                      { scopeless type
                        (97076 'move' _indexOfInterest[97061](97073 call iteratorIndex _iterator[97062]))
                      }
                      ForLoop[97063]
                      {
                        unknown chunk2[97080] "coforall index var" "index var" "insert auto destroy"
                        (97082 'move' chunk2[97080] _indexOfInterest[97061])
                        {
                          {
                            unknown locBlock2[96895](96897 call * rank(96900 call range intIdxType))
                            (96903 'end of statement')
                            {
                              unknown i[96905] 0
                              unknown tmp[96908] "maybe param" "temp"
                              (96910 'move' tmp[96908](96913 call chpl_compute_low_param_loop_bound 0(96916 call - rank 1)))
                              unknown tmp[96919] "maybe param" "temp"
                              (96921 'move' tmp[96919](96924 call chpl_compute_high_param_loop_bound 0(96927 call - rank 1)))
                              unknown tmp[96930] "maybe param" "temp"
                              (96932 'move' tmp[96930] 1)
                              ParamForLoop[96935]
                              { i[96905] tmp[96908] tmp[96919] tmp[96930]
                                (96943 call =(96945 call locBlock2 i)(96948 call chpl_build_bounded_range(96950 call .(96952 call followMe i) c"low")(96956 call .(96958 call followMe i) c"high")))
                              }
                              label _unused_continueLabel[96961]
                              label _breakLabel[96963]
                            }
                            unknown followMe2[96966] locBlock2(96969 call * rank(96972 call range intIdxType))
                            (96975 'end of statement')
                            const low[96977] "const"(96979 call .(96981 call locBlock2 parDim2) c"_low")
                            const high[96985] "const"(96987 call .(96989 call locBlock2 parDim2) c"_high")
                            (96993 'end of statement')
                            const tmp[96995] "const" "temp"(96997 call _computeBlock(96999 call .(97001 call locBlock2 parDim2) c"size") numChunks2 chunk2 high low low)
                            (97011 call _check_tuple_var_decl tmp[96995] 2)
                            const lo[97014] "const"(97016 call tmp[96995] 0)
                            const hi[97019] "const"(97021 call tmp[96995] 1)
                            (97024 'end of statement')
                            (97026 call =(97028 call followMe2 parDim2)(97031 call chpl_build_bounded_range lo hi))
                            if(97035 call _cond_test debugDataParNuma)
                            {
                              (97039 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                            }
                            (97050 yield followMe2)
                          }
                          (97056 call _downEndCount _coforallCount[97053] nil[44])
                          (97055 'coforall loop')
                        }
                        label _continueLabel[97066]
                        _indexOfInterest[97061]
                        _iterator[97062]
                      }
                      label _breakLabel[97067]
                      Defer
                      {
                        {
                          (97109 call _endCountFree _coforallCount[97053])
                        }
                      }
                      (97114 call _waitEndCount _coforallCount[97053] 1 numTasks[97054])
                    }
                    {
                      const _coforallCount[97126] "const" "end count" "temp"
                      (97183 'move' _coforallCount[97126](97180 call _endCountAlloc 1))
                      unknown _indexOfInterest[97134] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97135] "expr temp" "temp"
                      (97144 'move' _iterator[97135](97142 call _getIterator tmpIter[96888]))
                      Defer
                      {
                        {
                          (97160 call _freeIterator _iterator[97135])
                        }
                      }
                      { scopeless type
                        (97149 'move' _indexOfInterest[97134](97146 call iteratorIndex _iterator[97135]))
                      }
                      ForLoop[97136]
                      {
                        unknown chunk2[97153] "coforall index var" "index var" "insert auto destroy"
                        (97155 'move' chunk2[97153] _indexOfInterest[97134])
                        (97167 call _upEndCount _coforallCount[97126] 1)
                        {
                          {
                            unknown locBlock2[96669](96667 call * rank(96666 call range intIdxType))
                            (96672 'end of statement')
                            {
                              unknown i[96704] 0
                              unknown tmp[96705] "maybe param" "temp"
                              (96717 'move' tmp[96705](96715 call chpl_compute_low_param_loop_bound 0(96677 call - rank 1)))
                              unknown tmp[96706] "maybe param" "temp"
                              (96727 'move' tmp[96706](96725 call chpl_compute_high_param_loop_bound 0(96722 call - rank 1)))
                              unknown tmp[96707] "maybe param" "temp"
                              (96730 'move' tmp[96707] 1)
                              ParamForLoop[96732]
                              { i[96704] tmp[96705] tmp[96706] tmp[96707]
                                (96701 call =(96684 call locBlock2 i)(96699 call chpl_build_bounded_range(96689 call .(96688 call followMe i) c"low")(96696 call .(96695 call followMe i) c"high")))
                              }
                              label _unused_continueLabel[96709]
                              label _breakLabel[96708]
                            }
                            unknown followMe2[96749] locBlock2(96746 call * rank(96745 call range intIdxType))
                            (96752 'end of statement')
                            const low[96760] "const"(96757 call .(96756 call locBlock2 parDim2) c"_low")
                            const high[96770] "const"(96767 call .(96766 call locBlock2 parDim2) c"_high")
                            (96773 'end of statement')
                            const tmp[96794] "const" "temp"(96793 call _computeBlock(96784 call .(96783 call locBlock2 parDim2) c"size") numChunks2 chunk2 high low low)
                            (96801 call _check_tuple_var_decl tmp[96794] 2)
                            const lo[96774] "const"(96795 call tmp[96794] 0)
                            const hi[96776] "const"(96798 call tmp[96794] 1)
                            (96806 'end of statement')
                            (96815 call =(96810 call followMe2 parDim2)(96813 call chpl_build_bounded_range lo hi))
                            if(96881 call _cond_test debugDataParNuma)
                            {
                              (96878 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                            }
                            (96886 yield followMe2)
                          }
                          (97129 call _downEndCount _coforallCount[97126] nil[44])
                          (97128 'coforall loop')
                        }
                        label _continueLabel[97139]
                        _indexOfInterest[97134]
                        _iterator[97135]
                      }
                      label _breakLabel[97140]
                      Defer
                      {
                        {
                          (97171 call _endCountFree _coforallCount[97126])
                        }
                      }
                      (97176 call _waitEndCount _coforallCount[97126] 1)
                    }
                  }
                }
                (98002 call _downEndCount _coforallCount[98000] nil[44])
                (97213 'coforall on block' 1 tmp[97208])
              }
              label _continueLabel[98012]
              _indexOfInterest[98007]
              _iterator[98008]
            }
            label _breakLabel[98013]
            Defer
            {
              {
                (98044 call _endCountFree _coforallCount[98000])
              }
            }
            (98049 call _waitEndCount _coforallCount[98000] 0)
          }
        }
      }
    }
    {
      if(98105 call _cond_test debugDefaultDist)
      {
        (98103 call chpl_debug_writeln "*** In domain/array leader code:")
      }
      const numTasks[98123] "const"(98120 IfExpr (98113 call == tasksPerLocale 0) then
      { scopeless
        (98116 call . here c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale
      } )
      (98126 'end of statement')
      if(98138 call _cond_test debugDefaultDist)
      {
        (98136 call chpl_debug_writeln "    numTasks=" numTasks " (" ignoreRunning "), minIndicesPerTask=" minIndicesPerTask)
      }
      const tmp[98168] "const" "temp"(98165 IfExpr (98150 'task_get_serial') then
      { scopeless
        (98156 call _build_tuple 1(98153 call - 1))
      } else
      { scopeless
        (98164 call _computeChunkStuff numTasks ignoreRunning minIndicesPerTask ranges)
      } )
      (98175 call _check_tuple_var_decl tmp[98168] 2)
      const numChunks[98143] "const"(98169 call tmp[98168] 0)
      const parDim[98145] "const"(98172 call tmp[98168] 1)
      (98180 'end of statement')
      if(98200 call _cond_test debugDefaultDist)
      {
        (98198 call chpl_debug_writeln "    numChunks=" numChunks " parDim=" parDim " ranges(" parDim ").size="(98195 call .(98194 call ranges parDim) c"size"))
      }
      if(98227 call _cond_test debugDataPar)
      {
        (98224 call chpl_debug_writeln "### numTasksPerLoc = " numTasks "\n" "### ignoreRunning = " ignoreRunning "\n" "### minIndicesPerTask = " minIndicesPerTask "\n" "### numChunks = " numChunks " (parDim = " parDim ")\n" "### nranges = " ranges)
      }
      if(98805 call _cond_test(98233 call == numChunks 1))
      {
        if(98340 call _cond_test(98237 call == rank 1))
        {
          (98256 yield(98254 call _build_tuple(98252 call #(98243 call chpl_build_low_bounded_range(98242 call offset 0))(98249 call .(98248 call ranges 0) c"size"))))
        }
        {
          unknown block[98266](98264 call * rank(98263 call range intIdxType))
          (98269 'end of statement')
          {
            unknown i[98300] 0
            unknown tmp[98301] "maybe param" "temp"
            (98313 'move' tmp[98301](98311 call chpl_compute_low_param_loop_bound 0(98274 call - rank 1)))
            unknown tmp[98302] "maybe param" "temp"
            (98323 'move' tmp[98302](98321 call chpl_compute_high_param_loop_bound 0(98318 call - rank 1)))
            unknown tmp[98303] "maybe param" "temp"
            (98326 'move' tmp[98303] 1)
            ParamForLoop[98328]
            { i[98300] tmp[98301] tmp[98302] tmp[98303]
              (98297 call =(98281 call block i)(98295 call #(98286 call chpl_build_low_bounded_range(98285 call offset i))(98292 call .(98291 call ranges i) c"size")))
            }
            label _unused_continueLabel[98305]
            label _breakLabel[98304]
          }
          (98338 yield block)
        }
      }
      {
        unknown locBlock[98352](98350 call * rank(98349 call range intIdxType))
        (98355 'end of statement')
        {
          unknown i[98386] 0
          unknown tmp[98387] "maybe param" "temp"
          (98399 'move' tmp[98387](98397 call chpl_compute_low_param_loop_bound 0(98360 call - rank 1)))
          unknown tmp[98388] "maybe param" "temp"
          (98409 'move' tmp[98388](98407 call chpl_compute_high_param_loop_bound 0(98404 call - rank 1)))
          unknown tmp[98389] "maybe param" "temp"
          (98412 'move' tmp[98389] 1)
          ParamForLoop[98414]
          { i[98386] tmp[98387] tmp[98388] tmp[98389]
            (98383 call =(98367 call locBlock i)(98381 call #(98372 call chpl_build_low_bounded_range(98371 call offset i))(98378 call .(98377 call ranges i) c"size")))
          }
          label _unused_continueLabel[98391]
          label _breakLabel[98390]
        }
        if(98446 call _cond_test debugDefaultDist)
        {
          (98444 call chpl_debug_writeln "*** DI: locBlock = " locBlock)
        }
        {
          unknown tmpIter[98566] "expr temp" "maybe ref" "no copy" "temp"
          (98569 'move' tmpIter[98566](98456 call #(98453 call chpl_build_low_bounded_range 0) numChunks))
          unknown isRngDomArr[98786] "maybe param" "temp"
          (98801 'move' isRngDomArr[98786](98799 call ||(98788 call isBoundedRange tmpIter[98566])(98797 call ||(98791 call isDomain tmpIter[98566])(98794 call isArray tmpIter[98566]))))
          if isRngDomArr[98786]
          {
            const _coforallCount[98653] "const" "end count" "temp"
            (98722 'move' _coforallCount[98653](98719 call _endCountAlloc 1))
            unknown numTasks[98654] "temp"
            (98706 'move' numTasks[98654](98702 call . tmpIter[98566] c"size"))
            (98697 call _upEndCount _coforallCount[98653] 1 numTasks[98654])
            (98694 call chpl_resetTaskSpawn numTasks[98654])
            unknown _indexOfInterest[98661] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98662] "expr temp" "temp"
            (98671 'move' _iterator[98662](98669 call _getIterator tmpIter[98566]))
            Defer
            {
              {
                (98687 call _freeIterator _iterator[98662])
              }
            }
            { scopeless type
              (98676 'move' _indexOfInterest[98661](98673 call iteratorIndex _iterator[98662]))
            }
            ForLoop[98663]
            {
              unknown chunk[98680] "coforall index var" "index var" "insert auto destroy"
              (98682 'move' chunk[98680] _indexOfInterest[98661])
              {
                {
                  unknown followMe[98573] locBlock(98576 call * rank(98579 call range intIdxType))
                  (98582 'end of statement')
                  const tmp[98584] "const" "temp"(98586 call _computeBlock(98588 call .(98590 call locBlock parDim) c"size") numChunks chunk(98596 call .(98598 call locBlock parDim) c"_high")(98602 call .(98604 call locBlock parDim) c"_low")(98608 call .(98610 call locBlock parDim) c"_low"))
                  (98615 call _check_tuple_var_decl tmp[98584] 2)
                  const lo[98618] "const"(98620 call tmp[98584] 0)
                  const hi[98623] "const"(98625 call tmp[98584] 1)
                  (98628 'end of statement')
                  (98630 call =(98632 call followMe parDim)(98635 call chpl_build_bounded_range lo hi))
                  if(98639 call _cond_test debugDefaultDist)
                  {
                    (98644 call chpl_debug_writeln "*** DI[" chunk "]: followMe = " followMe)
                  }
                  (98650 yield followMe)
                }
                (98656 call _downEndCount _coforallCount[98653] nil[44])
                (98655 'coforall loop')
              }
              label _continueLabel[98666]
              _indexOfInterest[98661]
              _iterator[98662]
            }
            label _breakLabel[98667]
            Defer
            {
              {
                (98709 call _endCountFree _coforallCount[98653])
              }
            }
            (98714 call _waitEndCount _coforallCount[98653] 1 numTasks[98654])
          }
          {
            const _coforallCount[98726] "const" "end count" "temp"
            (98783 'move' _coforallCount[98726](98780 call _endCountAlloc 1))
            unknown _indexOfInterest[98734] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98735] "expr temp" "temp"
            (98744 'move' _iterator[98735](98742 call _getIterator tmpIter[98566]))
            Defer
            {
              {
                (98760 call _freeIterator _iterator[98735])
              }
            }
            { scopeless type
              (98749 'move' _indexOfInterest[98734](98746 call iteratorIndex _iterator[98735]))
            }
            ForLoop[98736]
            {
              unknown chunk[98753] "coforall index var" "index var" "insert auto destroy"
              (98755 'move' chunk[98753] _indexOfInterest[98734])
              (98767 call _upEndCount _coforallCount[98726] 1)
              {
                {
                  unknown followMe[98466] locBlock(98463 call * rank(98462 call range intIdxType))
                  (98469 'end of statement')
                  const tmp[98509] "const" "temp"(98508 call _computeBlock(98481 call .(98480 call locBlock parDim) c"size") numChunks chunk(98491 call .(98490 call locBlock parDim) c"_high")(98498 call .(98497 call locBlock parDim) c"_low")(98505 call .(98504 call locBlock parDim) c"_low"))
                  (98516 call _check_tuple_var_decl tmp[98509] 2)
                  const lo[98471] "const"(98510 call tmp[98509] 0)
                  const hi[98473] "const"(98513 call tmp[98509] 1)
                  (98521 'end of statement')
                  (98530 call =(98525 call followMe parDim)(98528 call chpl_build_bounded_range lo hi))
                  if(98558 call _cond_test debugDefaultDist)
                  {
                    (98556 call chpl_debug_writeln "*** DI[" chunk "]: followMe = " followMe)
                  }
                  (98564 yield followMe)
                }
                (98729 call _downEndCount _coforallCount[98726] nil[44])
                (98728 'coforall loop')
              }
              label _continueLabel[98739]
              _indexOfInterest[98734]
              _iterator[98735]
            }
            label _breakLabel[98740]
            Defer
            {
              {
                (98771 call _endCountFree _coforallCount[98726])
              }
            }
            (98776 call _waitEndCount _coforallCount[98726] 1)
          }
        }
      }
    }
  }
  where {
    (96142 call == tag(96139 call . iterKind c"leader"))
  }
  function DefaultRectangularDom[100787].these[98822](arg _mt[100863]:_MT[238], arg this[100861]:DefaultRectangularDom[100787], param arg tag[98819] :
  iterKind, arg followThis[98824]:_any[178](?), arg tasksPerLocale[98827] =
  dataParTasksPerLocale, arg ignoreRunning[98831] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[98835] =
  dataParMinGranularity, arg offset[98847] =
  (98846 call createTuple rank intIdxType(98844 call _cast intIdxType 0))) : _unknown[51] "iterator fn" "method" "primary method"
  {
    function anyStridable[98861](arg rangeTuple[98859]:_any[178](?), param arg i[98865] :
    int[13] =
    0) param : _unknown[51]
    {
      (98906 return(98903 IfExpr (98877 call == i(98875 call -(98871 call . rangeTuple c"size") 1)) then
      { scopeless
        (98883 call .(98882 call rangeTuple i) c"stridable")
      } else
      { scopeless
        (98901 call ||(98890 call .(98889 call rangeTuple i) c"stridable")(98900 call anyStridable rangeTuple(98898 call + i 1)))
      } ))
    }
    if(98935 call _cond_test chpl__testParFlag)
    {
      (98933 call chpl__testPar "default rectangular domain follower invoked on " followThis)
    }
    if(98963 call _cond_test debugDefaultDist)
    {
      (98961 call chpl_debug_writeln "In domain follower code: Following " followThis)
    }
    unknown stridable[98978] "param"(98976 call ||(98969 call . this c"stridable")(98975 call anyStridable followThis))
    (98981 'end of statement')
    unknown block[98992](98990 call * rank(98989 call range(idxType = intIdxType)(stridable = stridable)))
    (98995 'end of statement')
    if(99340 call _cond_test stridable)
    {
      unknown strType[99001] "type variable"(99000 call chpl__signedType intIdxType)
      {
        unknown i[99211] 0
        unknown tmp[99212] "maybe param" "temp"
        (99224 'move' tmp[99212](99222 call chpl_compute_low_param_loop_bound 0(99008 call - rank 1)))
        unknown tmp[99213] "maybe param" "temp"
        (99234 'move' tmp[99213](99232 call chpl_compute_high_param_loop_bound 0(99229 call - rank 1)))
        unknown tmp[99214] "maybe param" "temp"
        (99237 'move' tmp[99214] 1)
        ParamForLoop[99239]
        { i[99211] tmp[99212] tmp[99213] tmp[99214]
          {
            const rStride[99019] "const"(99016 call .(99015 call ranges i) c"stride")
            (99022 'end of statement')
            const rSignedStride[99028] "const"(99026 call _cast strType rStride)
            const fSignedStride[99041] "const"(99039 call _cast strType(99035 call .(99034 call followThis i) c"stride"))
            (99044 'end of statement')
            if(99207 call _cond_test(99047 call > rStride 0))
            {
              const riStride[99053] "const"(99051 call _cast intIdxType rStride)
              (99056 'end of statement')
              const low[99077] "const"(99075 call +(99062 call .(99061 call ranges i) c"alignedLowAsInt")(99073 call *(99069 call .(99068 call followThis i) c"low") riStride))
              const high[99099] "const"(99097 call +(99084 call .(99083 call ranges i) c"alignedLowAsInt")(99095 call *(99091 call .(99090 call followThis i) c"high") riStride))
              const stride[99109] "const"(99107 call _cast strType(99104 call * rSignedStride fSignedStride))
              (99112 'end of statement')
              (99124 call =(99116 call block i)(99122 call chpl_by(99119 call chpl_build_bounded_range low high) stride))
            }
            {
              const irStride[99133] "const"(99131 call _cast intIdxType(99128 call - rStride))
              (99136 'end of statement')
              const low[99157] "const"(99155 call -(99142 call .(99141 call ranges i) c"alignedHighAsInt")(99153 call *(99149 call .(99148 call followThis i) c"high") irStride))
              const high[99179] "const"(99177 call -(99164 call .(99163 call ranges i) c"alignedHighAsInt")(99175 call *(99171 call .(99170 call followThis i) c"low") irStride))
              const stride[99189] "const"(99187 call _cast strType(99184 call * rSignedStride fSignedStride))
              (99192 'end of statement')
              (99204 call =(99196 call block i)(99202 call chpl_by(99199 call chpl_build_bounded_range low high) stride))
            }
          }
        }
        label _unused_continueLabel[99216]
        label _breakLabel[99215]
      }
    }
    {
      {
        unknown i[99302] 0
        unknown tmp[99303] "maybe param" "temp"
        (99315 'move' tmp[99303](99313 call chpl_compute_low_param_loop_bound 0(99251 call - rank 1)))
        unknown tmp[99304] "maybe param" "temp"
        (99325 'move' tmp[99304](99323 call chpl_compute_high_param_loop_bound 0(99320 call - rank 1)))
        unknown tmp[99305] "maybe param" "temp"
        (99328 'move' tmp[99305] 1)
        ParamForLoop[99330]
        { i[99302] tmp[99303] tmp[99304] tmp[99305]
          (99299 call =(99258 call block i)(99297 call chpl_build_bounded_range(99276 call +(99263 call .(99262 call ranges i) c"_low")(99274 call _cast intIdxType(99270 call .(99269 call followThis i) c"low")))(99295 call +(99282 call .(99281 call ranges i) c"_low")(99293 call _cast intIdxType(99289 call .(99288 call followThis i) c"high")))))
        }
        label _unused_continueLabel[99307]
        label _breakLabel[99306]
      }
    }
    if(99441 call _cond_test(99346 call == rank 1))
    {
      {
        unknown _indexOfInterest[99360] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[99361] "expr temp" "temp"
        (99369 'move' _iterator[99361](99352 call _getIteratorZip block))
        Defer
        {
          {
            (99385 call _freeIterator _iterator[99361])
          }
        }
        { scopeless type
          (99374 'move' _indexOfInterest[99360](99371 call iteratorIndex _iterator[99361]))
        }
        ForLoop[99362]
        {
          unknown i[99378] "index var" "insert auto destroy"
          (99380 'move' i[99378] _indexOfInterest[99360])
          {
            (99357 yield(99356 call chpl_intToIdx i))
          }
          label _continueLabel[99365]
          _indexOfInterest[99360]
          _iterator[99361]
        }
        label _breakLabel[99366]
      }
    }
    {
      {
        unknown _indexOfInterest[99406] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[99407] "expr temp" "temp"
        (99416 'move' _iterator[99407](99414 call _getIterator(99398 call these_help 0 block)))
        Defer
        {
          {
            (99433 call _freeIterator _iterator[99407])
          }
        }
        { scopeless type
          (99422 'move' _indexOfInterest[99406](99419 call iteratorIndex _iterator[99407]))
        }
        ForLoop[99408]
        {
          unknown i[99426] "index var" "insert auto destroy"
          (99428 'move' i[99426] _indexOfInterest[99406])
          {
            (99403 yield(99402 call chpl_intToIdx i))
          }
          label _continueLabel[99411]
          _indexOfInterest[99406]
          _iterator[99407]
        }
        label _breakLabel[99412]
      }
    }
  }
  where {
    (98855 call == tag(98852 call . iterKind c"follower"))
  }
  function DefaultRectangularDom[100787].dsiMember[99457](arg _mt[100867]:_MT[238], arg this[100865]:DefaultRectangularDom[100787], arg ind[99454] :
  (99452 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    {
      unknown i[99489] 0
      unknown tmp[99490] "maybe param" "temp"
      (99502 'move' tmp[99490](99500 call chpl_compute_low_param_loop_bound 0(99462 call - rank 1)))
      unknown tmp[99491] "maybe param" "temp"
      (99512 'move' tmp[99491](99510 call chpl_compute_high_param_loop_bound 0(99507 call - rank 1)))
      unknown tmp[99492] "maybe param" "temp"
      (99515 'move' tmp[99492] 1)
      ParamForLoop[99517]
      { i[99489] tmp[99490] tmp[99491] tmp[99492]
        if(99484 call _cond_test(99479 call !(99478 call(99470 call .(99469 call ranges i) c"contains")(99476 call ind i))))
        {
          (99482 return 0)
        }
      }
      label _unused_continueLabel[99494]
      label _breakLabel[99493]
    }
    (99528 return 1)
  }
  function DefaultRectangularDom[100787].dsiIndexOrder[99541](arg _mt[100871]:_MT[238], arg this[100869]:DefaultRectangularDom[100787], arg ind[99538] :
  (99536 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    unknown totOrder[99544] intIdxType
    (99547 'end of statement')
    unknown blk[99551] 1 intIdxType
    (99554 'end of statement')
    {
      unknown d[99623] 0
      unknown tmp[99624] "maybe param" "temp"
      (99635 'move' tmp[99624](99633 call chpl_compute_low_param_loop_bound 0(99558 call - rank 1)))
      unknown tmp[99625] "maybe param" "temp"
      (99645 'move' tmp[99625](99643 call chpl_compute_high_param_loop_bound 0(99640 call - rank 1)))
      unknown tmp[99626] "maybe param" "temp"
      (99648 'move' tmp[99626](99563 call - 1))
      ParamForLoop[99650]
      { d[99623] tmp[99624] tmp[99625] tmp[99626]
        {
          const orderD[99582] "const"(99581 call(99573 call .(99570 call ranges d) c"indexOrder")(99579 call ind d))
          (99585 'end of statement')
          if(99599 call _cond_test(99594 call == orderD(99592 call _cast intIdxType(99589 call - 1))))
          {
            (99597 return orderD)
          }
          (99609 call += totOrder(99607 call * orderD blk))
          (99620 call *= blk(99617 call .(99616 call ranges d) c"size"))
        }
      }
      label _unused_continueLabel[99628]
      label _breakLabel[99627]
    }
    (99660 return totOrder)
  }
  function DefaultRectangularDom[100787].dsiDims[99666](arg _mt[100875]:_MT[238], arg this[100873]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method"
  {
    (99669 return ranges)
  }
  function DefaultRectangularDom[100787].dsiDim[99680](arg _mt[100879]:_MT[238], arg this[100877]:DefaultRectangularDom[100787], arg d[99677] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (99686 return(99685 call ranges d))
  }
  function DefaultRectangularDom[100787].dsiDim[99697](arg _mt[100883]:_MT[238], arg this[100881]:DefaultRectangularDom[100787], param arg d[99694] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (99703 return(99702 call ranges d))
  }
  function DefaultRectangularDom[100787].dsiNumIndices[99710](arg _mt[100887]:_MT[238], arg this[100885]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown sum[99716](99714 call _cast intIdxType 1)
    (99719 'end of statement')
    {
      unknown i[99739] 0
      unknown tmp[99740] "maybe param" "temp"
      (99752 'move' tmp[99740](99750 call chpl_compute_low_param_loop_bound 0(99724 call - rank 1)))
      unknown tmp[99741] "maybe param" "temp"
      (99762 'move' tmp[99741](99760 call chpl_compute_high_param_loop_bound 0(99757 call - rank 1)))
      unknown tmp[99742] "maybe param" "temp"
      (99765 'move' tmp[99742] 1)
      ParamForLoop[99767]
      { i[99739] tmp[99740] tmp[99741] tmp[99742]
        (99736 call *= sum(99733 call .(99732 call ranges i) c"size"))
      }
      label _unused_continueLabel[99744]
      label _breakLabel[99743]
    }
    (99777 return sum)
  }
  function DefaultRectangularDom[100787].dsiLow[99783](arg _mt[100891]:_MT[238], arg this[100889]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "no parens"
  {
    if(99869 call _cond_test(99787 call == rank 1))
    {
      (99796 return(99793 call .(99792 call ranges 0) c"low"))
    }
    {
      unknown result[99803](99801 call * rank idxType)
      (99806 'end of statement')
      {
        unknown i[99829] 0
        unknown tmp[99830] "maybe param" "temp"
        (99842 'move' tmp[99830](99840 call chpl_compute_low_param_loop_bound 0(99811 call - rank 1)))
        unknown tmp[99831] "maybe param" "temp"
        (99852 'move' tmp[99831](99850 call chpl_compute_high_param_loop_bound 0(99847 call - rank 1)))
        unknown tmp[99832] "maybe param" "temp"
        (99855 'move' tmp[99832] 1)
        ParamForLoop[99857]
        { i[99829] tmp[99830] tmp[99831] tmp[99832]
          (99826 call =(99818 call result i)(99823 call .(99822 call ranges i) c"low"))
        }
        label _unused_continueLabel[99834]
        label _breakLabel[99833]
      }
      (99867 return result)
    }
  }
  function DefaultRectangularDom[100787].dsiHigh[99878](arg _mt[100895]:_MT[238], arg this[100893]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "no parens"
  {
    if(99964 call _cond_test(99882 call == rank 1))
    {
      (99891 return(99888 call .(99887 call ranges 0) c"high"))
    }
    {
      unknown result[99898](99896 call * rank idxType)
      (99901 'end of statement')
      {
        unknown i[99924] 0
        unknown tmp[99925] "maybe param" "temp"
        (99937 'move' tmp[99925](99935 call chpl_compute_low_param_loop_bound 0(99906 call - rank 1)))
        unknown tmp[99926] "maybe param" "temp"
        (99947 'move' tmp[99926](99945 call chpl_compute_high_param_loop_bound 0(99942 call - rank 1)))
        unknown tmp[99927] "maybe param" "temp"
        (99950 'move' tmp[99927] 1)
        ParamForLoop[99952]
        { i[99924] tmp[99925] tmp[99926] tmp[99927]
          (99921 call =(99913 call result i)(99918 call .(99917 call ranges i) c"high"))
        }
        label _unused_continueLabel[99929]
        label _breakLabel[99928]
      }
      (99962 return result)
    }
  }
  function DefaultRectangularDom[100787].dsiAlignedLow[99973](arg _mt[100899]:_MT[238], arg this[100897]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100059 call _cond_test(99977 call == rank 1))
    {
      (99986 return(99983 call .(99982 call ranges 0) c"alignedLow"))
    }
    {
      unknown result[99993](99991 call * rank idxType)
      (99996 'end of statement')
      {
        unknown i[100019] 0
        unknown tmp[100020] "maybe param" "temp"
        (100032 'move' tmp[100020](100030 call chpl_compute_low_param_loop_bound 0(100001 call - rank 1)))
        unknown tmp[100021] "maybe param" "temp"
        (100042 'move' tmp[100021](100040 call chpl_compute_high_param_loop_bound 0(100037 call - rank 1)))
        unknown tmp[100022] "maybe param" "temp"
        (100045 'move' tmp[100022] 1)
        ParamForLoop[100047]
        { i[100019] tmp[100020] tmp[100021] tmp[100022]
          (100016 call =(100008 call result i)(100013 call .(100012 call ranges i) c"alignedLow"))
        }
        label _unused_continueLabel[100024]
        label _breakLabel[100023]
      }
      (100057 return result)
    }
  }
  function DefaultRectangularDom[100787].dsiAlignedHigh[100068](arg _mt[100903]:_MT[238], arg this[100901]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100154 call _cond_test(100072 call == rank 1))
    {
      (100081 return(100078 call .(100077 call ranges 0) c"alignedHigh"))
    }
    {
      unknown result[100088](100086 call * rank idxType)
      (100091 'end of statement')
      {
        unknown i[100114] 0
        unknown tmp[100115] "maybe param" "temp"
        (100127 'move' tmp[100115](100125 call chpl_compute_low_param_loop_bound 0(100096 call - rank 1)))
        unknown tmp[100116] "maybe param" "temp"
        (100137 'move' tmp[100116](100135 call chpl_compute_high_param_loop_bound 0(100132 call - rank 1)))
        unknown tmp[100117] "maybe param" "temp"
        (100140 'move' tmp[100117] 1)
        ParamForLoop[100142]
        { i[100114] tmp[100115] tmp[100116] tmp[100117]
          (100111 call =(100103 call result i)(100108 call .(100107 call ranges i) c"alignedHigh"))
        }
        label _unused_continueLabel[100119]
        label _breakLabel[100118]
      }
      (100152 return result)
    }
  }
  function DefaultRectangularDom[100787].dsiStride[100163](arg _mt[100907]:_MT[238], arg this[100905]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100252 call _cond_test(100167 call == rank 1))
    {
      (100176 return(100173 call .(100172 call ranges 0) c"stride"))
    }
    {
      unknown result[100186](100184 call * rank(100183 call chpl__signedType intIdxType))
      (100189 'end of statement')
      {
        unknown i[100212] 0
        unknown tmp[100213] "maybe param" "temp"
        (100225 'move' tmp[100213](100223 call chpl_compute_low_param_loop_bound 0(100194 call - rank 1)))
        unknown tmp[100214] "maybe param" "temp"
        (100235 'move' tmp[100214](100233 call chpl_compute_high_param_loop_bound 0(100230 call - rank 1)))
        unknown tmp[100215] "maybe param" "temp"
        (100238 'move' tmp[100215] 1)
        ParamForLoop[100240]
        { i[100212] tmp[100213] tmp[100214] tmp[100215]
          (100209 call =(100201 call result i)(100206 call .(100205 call ranges i) c"stride"))
        }
        label _unused_continueLabel[100217]
        label _breakLabel[100216]
      }
      (100250 return result)
    }
  }
  function DefaultRectangularDom[100787].dsiAlignment[100261](arg _mt[100911]:_MT[238], arg this[100909]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100347 call _cond_test(100265 call == rank 1))
    {
      (100274 return(100271 call .(100270 call ranges 0) c"alignment"))
    }
    {
      unknown result[100281](100279 call * rank idxType)
      (100284 'end of statement')
      {
        unknown i[100307] 0
        unknown tmp[100308] "maybe param" "temp"
        (100320 'move' tmp[100308](100318 call chpl_compute_low_param_loop_bound 0(100289 call - rank 1)))
        unknown tmp[100309] "maybe param" "temp"
        (100330 'move' tmp[100309](100328 call chpl_compute_high_param_loop_bound 0(100325 call - rank 1)))
        unknown tmp[100310] "maybe param" "temp"
        (100333 'move' tmp[100310] 1)
        ParamForLoop[100335]
        { i[100307] tmp[100308] tmp[100309] tmp[100310]
          (100304 call =(100296 call result i)(100301 call .(100300 call ranges i) c"alignment"))
        }
        label _unused_continueLabel[100312]
        label _breakLabel[100311]
      }
      (100345 return result)
    }
  }
  function DefaultRectangularDom[100787].dsiFirst[100356](arg _mt[100915]:_MT[238], arg this[100913]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100442 call _cond_test(100360 call == rank 1))
    {
      (100369 return(100366 call .(100365 call ranges 0) c"first"))
    }
    {
      unknown result[100376](100374 call * rank idxType)
      (100379 'end of statement')
      {
        unknown i[100402] 0
        unknown tmp[100403] "maybe param" "temp"
        (100415 'move' tmp[100403](100413 call chpl_compute_low_param_loop_bound 0(100384 call - rank 1)))
        unknown tmp[100404] "maybe param" "temp"
        (100425 'move' tmp[100404](100423 call chpl_compute_high_param_loop_bound 0(100420 call - rank 1)))
        unknown tmp[100405] "maybe param" "temp"
        (100428 'move' tmp[100405] 1)
        ParamForLoop[100430]
        { i[100402] tmp[100403] tmp[100404] tmp[100405]
          (100399 call =(100391 call result i)(100396 call .(100395 call ranges i) c"first"))
        }
        label _unused_continueLabel[100407]
        label _breakLabel[100406]
      }
      (100440 return result)
    }
  }
  function DefaultRectangularDom[100787].dsiLast[100451](arg _mt[100919]:_MT[238], arg this[100917]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100537 call _cond_test(100455 call == rank 1))
    {
      (100464 return(100461 call .(100460 call ranges 0) c"last"))
    }
    {
      unknown result[100471](100469 call * rank idxType)
      (100474 'end of statement')
      {
        unknown i[100497] 0
        unknown tmp[100498] "maybe param" "temp"
        (100510 'move' tmp[100498](100508 call chpl_compute_low_param_loop_bound 0(100479 call - rank 1)))
        unknown tmp[100499] "maybe param" "temp"
        (100520 'move' tmp[100499](100518 call chpl_compute_high_param_loop_bound 0(100515 call - rank 1)))
        unknown tmp[100500] "maybe param" "temp"
        (100523 'move' tmp[100500] 1)
        ParamForLoop[100525]
        { i[100497] tmp[100498] tmp[100499] tmp[100500]
          (100494 call =(100486 call result i)(100491 call .(100490 call ranges i) c"last"))
        }
        label _unused_continueLabel[100502]
        label _breakLabel[100501]
      }
      (100535 return result)
    }
  }
  function DefaultRectangularDom[100787].dsiBuildArray[100548](arg _mt[100923]:_MT[238], arg this[100921]:DefaultRectangularDom[100787], arg eltType[100546]:_any[178](?), param arg initElts[100551] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (100575 return(100556 'new'(_chpl_manager = unmanaged[220](?))(100574 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(dom =(100570 call _to_unmanaged this))(initElts = initElts))))
  }
  function DefaultRectangularDom[100787].dsiBuildArrayWith[100584](arg _mt[100927]:_MT[238], arg this[100925]:DefaultRectangularDom[100787], arg eltType[100582]:_any[178](?), arg data[100590] :
  (100589 call _ddata eltType), arg allocSize[100594] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    unknown allocRange[100613](100611 call #(100608 call chpl_build_low_bounded_range(100605 call .(100604 call ranges 0) c"low")) allocSize)(100600 call range idxType)
    (100616 'end of statement')
    (100641 return(100620 'new'(_chpl_manager = unmanaged[220](?))(100640 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(initElts = 1)(dom =(100636 call _to_unmanaged this))(data = data))))
  }
  function DefaultRectangularDom[100787].dsiLocalSlice[100649](arg _mt[100931]:_MT[238], arg this[100929]:DefaultRectangularDom[100787], arg ranges[100647]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (100672 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularDom[100787].dsiTargetLocales[100679](arg _mt[100935]:_MT[238], arg this[100933]:DefaultRectangularDom[100787]) : _unknown[51] "method" "primary method"
  {
    (100688 return(100686 call chpl__buildArrayExpr(100683 call chpl_localeID_to_locale(100682 '_wide_get_locale' this))))
  }
  function DefaultRectangularDom[100787].dsiHasSingleLocalSubdomain[100695](arg _mt[100939]:_MT[238], arg this[100937]:DefaultRectangularDom[100787]) param : _unknown[51] "method" "primary method"
  {
    (100698 return 1)
  }
  function DefaultRectangularDom[100787].dsiLocalSubdomain[100709](arg _mt[100943]:_MT[238], arg this[100941]:DefaultRectangularDom[100787], arg loc[100706] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(100743 call _cond_test(100716 call ==(100713 call chpl_localeID_to_locale(100712 '_wide_get_locale' this)) loc))
    {
      (100725 return(100724 call _getDomain(100722 call _to_unmanaged this)))
    }
    {
      unknown a[100735](100733 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
      (100738 'end of statement')
      (100741 return a)
    }
  }
  function DefaultRectangularDom[100787].dsiLocalSubdomains[100756](arg _mt[100947]:_MT[238], arg this[100945]:DefaultRectangularDom[100787], arg loc[100753] :
  locale[28]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (100762 yield(100761 call dsiLocalSubdomain loc))
  }
  function DefaultRectangularDom[100787].chpl_intToIdx[100771](arg _mt[100951]:_MT[238], arg this[100949]:DefaultRectangularDom[100787], arg i[100769]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (100781 return(100780 call chpl__intToIdx(100775 call . this c"idxType") i))
  }
  type DefaultRectangularDom[100787] unknown dist[94108](94107 'to unmanaged class from unknown' DefaultDist) unknown ranges[94124](94122 call * rank(94121 call range idxType(94117 call . BoundedRangeType c"bounded") stridable)) type _serialized_domain[94247](?) unknown rank[94227] "param" unknown idxType[94231] "type variable" unknown stridable[94234] "param" unknown dims[94238] unknown isDefaultRectangular[94242] "param" BaseRectangularDom
  function chpl__intToIdx[100958](arg idxType[100956]:_any[178](?), arg i[100961] :
  integral, arg j[100965]:_any[178](?) ...) : _unknown[51] "inline"
  {
    const first[100973] "const"(100972 call chpl__intToIdx idxType i)
    (100976 'end of statement')
    const rest[100984] "const"(100983 call chpl__intToIdx idxType(100982 'expand_tuple' j))
    (100987 'end of statement')
    (100994 return(100992 call _build_tuple first(100990 'expand_tuple' rest)))
  }
  function chpl__intToIdx[101002](arg idxType[101000]:_any[178](?), arg i[101005] :
  integral, arg j[101009] :
  integral) : _unknown[51] "inline"
  {
    (101025 return(101023 call _build_tuple(101016 call chpl__intToIdx idxType i)(101021 call chpl__intToIdx idxType j)))
  }
  function chpl__intToIdx[101034](arg idxType[101032]:_any[178](?), arg i[101037] :
  _tuple) : _unknown[51] "inline"
  {
    (101046 return(101045 call chpl__intToIdx idxType(101044 'expand_tuple' i)))
  }
  function _remoteAccessData[101218](?).theData[101141](arg _mt[101222]:_MT[238], arg this[101220]:_remoteAccessData[101218](?)) ref : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(101152 call _cond_test stridable)
    {
      (101145 return data)
    }
    {
      (101149 return shiftedData)
    }
  }
  function _remoteAccessData[101218](?).getDataElem[101163](arg _mt[101226]:_MT[238], arg this[101224]:_remoteAccessData[101218](?), arg i[101161]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    if(101180 call _cond_test stridable)
    {
      (101170 return(101169 call dataElem i))
    }
    {
      (101177 return(101176 call shiftedDataElem i))
    }
  }
  function _remoteAccessData[101218](?).dataElem[101191](arg _mt[101230]:_MT[238], arg this[101228]:_remoteAccessData[101218](?), arg i[101189]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (101197 return(101196 call data i))
  }
  function _remoteAccessData[101218](?).shiftedDataElem[101206](arg _mt[101234]:_MT[238], arg this[101232]:_remoteAccessData[101218](?), arg i[101204]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (101212 return(101211 call shiftedData i))
  }
  type _remoteAccessData[101218](?) unknown eltType[101052] "type variable" unknown rank[101056] "param" int[13] unknown idxType[101060] "type variable" unknown stridable[101064] "param" bool[10] unknown blkChanged[101070] "param" 0 bool[10] unknown off[101078](101076 call * rank idxType) unknown blk[101089](101087 call * rank(101086 call chpl__idxTypeToIntIdxType idxType)) unknown str[101103](101101 call * rank(101100 call chpl__signedType(101098 call chpl__idxTypeToIntIdxType idxType))) unknown origin[101111](101110 call chpl__idxTypeToIntIdxType idxType) unknown factoredOffs[101119](101118 call chpl__idxTypeToIntIdxType idxType) unknown data[101127](101126 call _ddata eltType) unknown shiftedData[101135](101134 call _ddata eltType)
  function _unknown[51].getDataIndex[101244](arg _mt[101249]:_MT[238], arg this[101246] :
  _remoteAccessData, arg ind[101241] :
  idxType) : _unknown[51] "inline" "method"
  {
    (101263 return(101262 call(101254 call . this c"getDataIndex")(101260 call chpl__tuplify ind)))
  }
  function _unknown[51].getDataIndex[101278](arg _mt[101283]:_MT[238], arg this[101280] :
  _remoteAccessData, arg ind[101275] :
  (101273 call * rank idxType)) : _unknown[51] "inline" "method"
  {
    if(101688 call _cond_test stridable)
    {
      unknown sum[101287] origin
      (101290 'end of statement')
      {
        unknown i[101340] 0
        unknown tmp[101341] "maybe param" "temp"
        (101353 'move' tmp[101341](101351 call chpl_compute_low_param_loop_bound 0(101295 call - rank 1)))
        unknown tmp[101342] "maybe param" "temp"
        (101363 'move' tmp[101342](101361 call chpl_compute_high_param_loop_bound 0(101358 call - rank 1)))
        unknown tmp[101343] "maybe param" "temp"
        (101366 'move' tmp[101343] 1)
        ParamForLoop[101368]
        { i[101340] tmp[101341] tmp[101342] tmp[101343]
          (101337 call += sum(101335 call /(101320 call *(101314 call -(101306 call chpl__idxToInt(101304 call ind i))(101313 call chpl__idxToInt(101311 call off i)))(101319 call blk i))(101333 call _cast(101332 call chpl__idxTypeToIntIdxType idxType)(101328 call abs(101326 call str i)))))
        }
        label _unused_continueLabel[101345]
        label _breakLabel[101344]
      }
      (101378 return sum)
    }
    {
      if(101683 call _cond_test(101385 call &&(101382 call == rank 1) earlyShiftData))
      {
        if(101414 call _cond_test blkChanged)
        {
          (101401 return(101399 call *(101394 call chpl__idxToInt(101392 call ind 0))(101398 call blk 0)))
        }
        {
          (101411 return(101410 call chpl__idxToInt(101408 call ind 0)))
        }
      }
      {
        unknown sum[101431](101428 IfExpr  earlyShiftData then
        { scopeless
          (101425 call _cast(101424 call chpl__idxTypeToIntIdxType idxType) 0)
        } else
        { scopeless
          origin
        } )
        (101434 'end of statement')
        if(101663 call _cond_test blkChanged)
        {
          {
            unknown i[101462] 0
            unknown tmp[101463] "maybe param" "temp"
            (101475 'move' tmp[101463](101473 call chpl_compute_low_param_loop_bound 0(101440 call - rank 1)))
            unknown tmp[101464] "maybe param" "temp"
            (101485 'move' tmp[101464](101483 call chpl_compute_high_param_loop_bound 0(101480 call - rank 1)))
            unknown tmp[101465] "maybe param" "temp"
            (101488 'move' tmp[101465] 1)
            ParamForLoop[101490]
            { i[101462] tmp[101463] tmp[101464] tmp[101465]
              {
                (101458 call += sum(101456 call *(101451 call chpl__idxToInt(101449 call ind i))(101455 call blk i)))
              }
            }
            label _unused_continueLabel[101467]
            label _breakLabel[101466]
          }
        }
        {
          if(101658 call _cond_test(101505 call == storageOrder(101502 call . ArrayStorageOrder c"RMO")))
          {
            {
              unknown i[101532] 0
              unknown tmp[101533] "maybe param" "temp"
              (101545 'move' tmp[101533](101543 call chpl_compute_low_param_loop_bound 0(101510 call - rank 2)))
              unknown tmp[101534] "maybe param" "temp"
              (101555 'move' tmp[101534](101553 call chpl_compute_high_param_loop_bound 0(101550 call - rank 2)))
              unknown tmp[101535] "maybe param" "temp"
              (101558 'move' tmp[101535] 1)
              ParamForLoop[101560]
              { i[101532] tmp[101533] tmp[101534] tmp[101535]
                {
                  (101528 call += sum(101526 call *(101521 call chpl__idxToInt(101519 call ind i))(101525 call blk i)))
                }
              }
              label _unused_continueLabel[101537]
              label _breakLabel[101536]
            }
            (101581 call += sum(101580 call chpl__idxToInt(101578 call ind(101575 call - rank 1))))
          }
          {
            {
              unknown i[101609] 0
              unknown tmp[101610] "maybe param" "temp"
              (101622 'move' tmp[101610](101620 call chpl_compute_low_param_loop_bound 1(101587 call - rank 1)))
              unknown tmp[101611] "maybe param" "temp"
              (101632 'move' tmp[101611](101630 call chpl_compute_high_param_loop_bound 1(101627 call - rank 1)))
              unknown tmp[101612] "maybe param" "temp"
              (101635 'move' tmp[101612] 1)
              ParamForLoop[101637]
              { i[101609] tmp[101610] tmp[101611] tmp[101612]
                {
                  (101605 call += sum(101603 call *(101598 call chpl__idxToInt(101596 call ind i))(101602 call blk i)))
                }
              }
              label _unused_continueLabel[101614]
              label _breakLabel[101613]
            }
            (101655 call += sum(101654 call chpl__idxToInt(101652 call ind 0)))
          }
        }
        if(101675 call _cond_test(101668 call ! earlyShiftData))
        {
          (101672 call -= sum factoredOffs)
        }
        (101681 return sum)
      }
    }
  }
  function _unknown[51].computeFactoredOffs[101698](arg _mt[101703]:_MT[238], arg this[101700] :
  _remoteAccessData) : _unknown[51] "method" "no return value for void"
  {
    (101707 call = factoredOffs 0)
    {
      unknown i[101739] 0
      unknown tmp[101740] "maybe param" "temp"
      (101752 'move' tmp[101740](101750 call chpl_compute_low_param_loop_bound 0(101714 call - rank 1)))
      unknown tmp[101741] "maybe param" "temp"
      (101762 'move' tmp[101741](101760 call chpl_compute_high_param_loop_bound 0(101757 call - rank 1)))
      unknown tmp[101742] "maybe param" "temp"
      (101765 'move' tmp[101742] 1)
      ParamForLoop[101767]
      { i[101739] tmp[101740] tmp[101741] tmp[101742]
        {
          (101735 call = factoredOffs(101733 call + factoredOffs(101731 call *(101723 call blk i)(101730 call chpl__idxToInt(101728 call off i)))))
        }
      }
      label _unused_continueLabel[101744]
      label _breakLabel[101743]
    }
  }
  function _unknown[51].initShiftedData[101781](arg _mt[101786]:_MT[238], arg this[101783] :
  _remoteAccessData) : _unknown[51] "method" "no return value for void"
  {
    if(101840 call _cond_test(101792 call && earlyShiftData(101790 call ! stridable)))
    {
      unknown idxSignedType[101801] "type variable"(101800 call chpl__signedType(101798 call chpl__idxTypeToIntIdxType idxType))
      const shiftDist[101826] "const"(101823 IfExpr (101808 call isIntType idxType) then
      { scopeless
        (101811 call - origin factoredOffs)
      } else
      { scopeless
        (101821 call -(101815 call _cast idxSignedType origin)(101819 call _cast idxSignedType factoredOffs))
      } )
      (101829 'end of statement')
      (101837 call = shiftedData(101836 call _ddata_shift eltType data shiftDist))
    }
  }
  function _unknown[51].strideAlignUp[101852](arg _mt[101859]:_MT[238], arg this[101856] :
  _remoteAccessData, arg lo[101850]:_any[178](?), arg r[101854]:_any[178](?)) : _unknown[51] "method"
  {
    (101913 return(101911 call +(101862 call . r c"low")(101909 call *(101897 call /(101885 call -(101882 call +(101870 call - lo(101867 call . r c"low"))(101880 call _cast idxType(101878 call abs(101874 call . r c"stride")))) 1)(101895 call _cast idxType(101893 call abs(101889 call . r c"stride"))))(101907 call _cast idxType(101905 call abs(101901 call . r c"stride"))))))
  }
  function _unknown[51].strideAlignDown[101923](arg _mt[101930]:_MT[238], arg this[101927] :
  _remoteAccessData, arg hi[101921]:_any[178](?), arg r[101925]:_any[178](?)) : _unknown[51] "method"
  {
    (101954 return(101952 call - hi(101950 call %(101938 call - hi(101935 call . r c"low"))(101948 call _cast idxType(101946 call abs(101942 call . r c"stride"))))))
  }
  function _unknown[51].initDataFrom[101966](arg _mt[101971]:_MT[238], arg this[101968] :
  _remoteAccessData, arg other[101963] :
  _remoteAccessData) : _unknown[51] "method" "no return value for void"
  {
    (101983 call =(101976 call . this c"data")(101980 call . other c"data"))
  }
  function _unknown[51].toSlice[101994](arg _mt[101999]:_MT[238], arg this[101996] :
  _remoteAccessData, arg newDom[101992]:_any[178](?)) : _unknown[51] "method"
  {
    (102013 call compilerAssert(102010 call ==(102003 call . this c"rank")(102007 call . newDom c"rank")))
    unknown rad[102044](102043 call _remoteAccessData eltType(102020 call . newDom c"rank")(102024 call . newDom c"idxType")(102028 call . newDom c"stridable")(102041 call ||(102032 call . newDom c"stridable")(102038 call . this c"blkChanged")))
    (102047 'end of statement')
    (102056 call(102051 call . rad c"initDataFrom") this)
    (102079 call =(102061 call . rad c"shiftedData")(102076 IfExpr (102065 call . newDom c"stridable") then
    { scopeless
      (102069 call . this c"data")
    } else
    { scopeless
      (102073 call . this c"shiftedData")
    } ))
    (102098 call =(102085 call . rad c"origin")(102096 call _cast(102093 call . newDom c"idxType")(102089 call . this c"origin")))
    (102116 call =(102104 call . rad c"off")(102115 call chpl__tuplify(102111 call . newDom c"dsiLow")))
    (102134 call =(102122 call . rad c"str")(102133 call chpl__tuplify(102129 call . newDom c"dsiStride")))
    {
      unknown i[102286] 0
      unknown tmp[102287] "maybe param" "temp"
      (102299 'move' tmp[102287](102297 call chpl_compute_low_param_loop_bound 0(102140 call - rank 1)))
      unknown tmp[102288] "maybe param" "temp"
      (102309 'move' tmp[102288](102307 call chpl_compute_high_param_loop_bound 0(102304 call - rank 1)))
      unknown tmp[102289] "maybe param" "temp"
      (102312 'move' tmp[102289] 1)
      ParamForLoop[102314]
      { i[102286] tmp[102287] tmp[102288] tmp[102289]
        {
          const shift[102200] "const"(102198 call /(102180 call *(102152 call(102147 call . this c"blk") i)(102178 call -(102167 call chpl__idxToInt(102163 call .(102162 call(102157 call . newDom c"dsiDim") i) c"low"))(102177 call chpl__idxToInt(102175 call(102170 call . this c"off") i))))(102196 call _cast(102193 call . rad c"idxType")(102191 call abs(102189 call(102184 call . this c"str") i))))
          (102203 'end of statement')
          if(102233 call _cond_test(102213 call >(102211 call(102206 call . this c"str") i) 0))
          {
            (102220 call +=(102216 call . rad c"origin") shift)
          }
          {
            (102229 call -=(102225 call . rad c"origin") shift)
          }
          const mult[102262] "const"(102260 call _cast(102257 call . rad c"idxType")(102254 call /(102244 call .(102243 call(102238 call . newDom c"dsiDim") i) c"stride")(102253 call(102248 call . this c"str") i)))
          (102265 'end of statement')
          (102283 call =(102272 call(102267 call . rad c"blk") i)(102281 call *(102279 call(102274 call . this c"blk") i) mult))
        }
      }
      label _unused_continueLabel[102291]
      label _breakLabel[102290]
    }
    (102330 call(102326 call . rad c"computeFactoredOffs"))
    (102339 call(102335 call . rad c"initShiftedData"))
    (102342 return rad)
  }
  function _unknown[51].toReindex[102351](arg _mt[102356]:_MT[238], arg this[102353] :
  _remoteAccessData, arg newDom[102349]:_any[178](?)) : _unknown[51] "method"
  {
    (102370 call compilerAssert(102367 call ==(102360 call . this c"rank")(102364 call . newDom c"rank")))
    unknown rad[102390](102389 call _remoteAccessData eltType(102377 call . newDom c"rank")(102381 call . newDom c"idxType")(102385 call . newDom c"stridable") blkChanged)
    (102393 'end of statement')
    (102400 call(102395 call . rad c"initDataFrom") this)
    (102421 call =(102403 call . rad c"shiftedData")(102418 IfExpr (102407 call . newDom c"stridable") then
    { scopeless
      (102411 call . this c"data")
    } else
    { scopeless
      (102415 call . this c"shiftedData")
    } ))
    (102438 call =(102425 call . rad c"origin")(102436 call _cast(102433 call . newDom c"intIdxType")(102429 call . this c"origin")))
    (102449 call =(102442 call . rad c"blk")(102446 call . this c"blk"))
    (102463 call =(102453 call . rad c"off")(102462 call chpl__tuplify(102458 call . newDom c"dsiLow")))
    (102477 call =(102467 call . rad c"str")(102476 call chpl__tuplify(102472 call . newDom c"dsiStride")))
    (102493 call =(102483 call . rad c"factoredOffs")(102491 call _cast(102488 call . newDom c"intIdxType") 0))
    (102501 call(102497 call . rad c"computeFactoredOffs"))
    (102508 call(102504 call . rad c"initShiftedData"))
    (102511 return rad)
  }
  function _unknown[51].toRankChange[102520](arg _mt[102529]:_MT[238], arg this[102526] :
  _remoteAccessData, arg newDom[102518]:_any[178](?), arg cd[102522]:_any[178](?), arg idx[102524]:_any[178](?)) : _unknown[51] "method"
  {
    (102555 call compilerAssert(102552 call &&(102540 call ==(102533 call . this c"rank")(102537 call . idx c"size"))(102550 call !=(102543 call . this c"rank")(102547 call . newDom c"rank"))))
    unknown intIdxType[102562] "type variable"(102559 call . newDom c"intIdxType")
    unknown idxSignedType[102569] "type variable"(102568 call chpl__signedType intIdxType)
    unknown rad[102589](102588 call _remoteAccessData eltType(102576 call . newDom c"rank")(102580 call . newDom c"idxType")(102584 call . newDom c"stridable") 1)
    (102592 'end of statement')
    const collapsedDims[102597] "const"(102596 call chpl__tuplify cd)
    (102600 'end of statement')
    (102607 call(102602 call . rad c"initDataFrom") this)
    (102628 call =(102610 call . rad c"shiftedData")(102625 IfExpr (102614 call . newDom c"stridable") then
    { scopeless
      (102618 call . this c"data")
    } else
    { scopeless
      (102622 call . this c"shiftedData")
    } ))
    (102645 call =(102632 call . rad c"origin")(102643 call _cast(102640 call . newDom c"intIdxType")(102636 call . this c"origin")))
    unknown curDim[102649] 0
    (102652 'end of statement')
    {
      unknown j[102854] 0
      unknown tmp[102855] "maybe param" "temp"
      (102867 'move' tmp[102855](102865 call chpl_compute_low_param_loop_bound 0(102659 call -(102655 call . idx c"size") 1)))
      unknown tmp[102856] "maybe param" "temp"
      (102880 'move' tmp[102856](102878 call chpl_compute_high_param_loop_bound 0(102872 call -(102874 call . idx c"size") 1)))
      unknown tmp[102857] "maybe param" "temp"
      (102883 'move' tmp[102857] 1)
      ParamForLoop[102885]
      { j[102854] tmp[102855] tmp[102856] tmp[102857]
        {
          if(102849 call _cond_test(102667 call !(102666 call collapsedDims j)))
          {
            (102686 call =(102675 call(102670 call . rad c"off") curDim)(102683 call .(102682 call(102677 call . newDom c"dsiDim") curDim) c"low"))
            const off[102715] "const"(102713 call _cast idxSignedType(102710 call -(102699 call chpl__idxToInt(102697 call(102692 call . rad c"off") curDim))(102709 call chpl__idxToInt(102707 call(102702 call . this c"off") j))))
            (102718 'end of statement')
            (102748 call +=(102720 call . rad c"origin")(102746 call _cast intIdxType(102743 call /(102734 call *(102731 call _cast idxSignedType(102729 call(102724 call . this c"blk") j)) off)(102742 call(102737 call . this c"str") j))))
            (102765 call =(102757 call(102752 call . rad c"blk") curDim)(102764 call(102759 call . this c"blk") j))
            (102782 call =(102774 call(102769 call . rad c"str") curDim)(102781 call(102776 call . this c"str") j))
            (102787 call += curDim 1)
          }
          {
            const off[102812] "const"(102810 call _cast idxSignedType(102807 call -(102796 call chpl__idxToInt(102794 call idx j))(102806 call chpl__idxToInt(102804 call(102799 call . this c"off") j))))
            (102815 'end of statement')
            (102846 call +=(102818 call . rad c"origin")(102844 call _cast intIdxType(102841 call /(102832 call *(102829 call _cast idxSignedType(102827 call(102822 call . this c"blk") j)) off)(102840 call(102835 call . this c"str") j))))
          }
        }
      }
      label _unused_continueLabel[102859]
      label _breakLabel[102858]
    }
    (102899 call(102895 call . rad c"computeFactoredOffs"))
    (102906 call(102902 call . rad c"initShiftedData"))
    (102909 return rad)
  }
  function LocRADCache[103070](?).init[102971](arg _mt[103074]:_MT[238], arg this[103072]:LocRADCache[103070](?), arg eltType[102969]:_any[178](?), param arg rank[102974] :
  int[13], arg idxType[102977]:_any[178](?), param arg stridable[102980] :
  bool[10], arg newTargetLocDom[102988] :
  (102986 call chpl__buildDomainRuntimeType defaultDist rank)) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (102996 call =(102992 call . this c"eltType") eltType)
    (103005 call =(103001 call . this c"rank") rank)
    (103013 call =(103009 call . this c"idxType") idxType)
    (103021 call =(103017 call . this c"stridable") stridable)
    (103026 call = targetLocDom newTargetLocDom)
  }
  function LocRADCache[103070](?).lockRAD[103035](arg _mt[103078]:_MT[238], arg this[103076]:LocRADCache[103070](?), arg rlocIdx[103033]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (103045 call(103041 call .(103040 call RADLocks rlocIdx) c"lock"))
  }
  function LocRADCache[103070](?).unlockRAD[103054](arg _mt[103082]:_MT[238], arg this[103080]:LocRADCache[103070](?), arg rlocIdx[103052]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (103064 call(103060 call .(103059 call RADLocks rlocIdx) c"unlock"))
  }
  type LocRADCache[103070](?) unknown eltType[102914] "type variable" unknown rank[102918] "param" int[13] unknown idxType[102922] "type variable" unknown stridable[102926] "param" bool[10] unknown targetLocDom[102935](102933 call chpl__buildDomainRuntimeType defaultDist rank) unknown RAD[102952] "unsafe"(102950 call chpl__buildArrayRuntimeType(102948 call chpl__ensureDomainExpr targetLocDom)(102947 call _remoteAccessData eltType rank idxType stridable)) unknown RADLocks[102963](102961 call chpl__buildArrayRuntimeType(102959 call chpl__ensureDomainExpr targetLocDom) chpl_LocalSpinlock)
  function DefaultRectangularArr[106840](?).init[103208](arg _mt[106844]:_MT[238], arg this[106842]:DefaultRectangularArr[106840](?), arg eltType[103206]:_any[178](?), param arg rank[103210]:_any[178](?), arg idxType[103212]:_any[178](?), param arg stridable[103214]:_any[178](?), arg dom[103226] :
  (103225 'to unmanaged class from unknown'(103224 call DefaultRectangularDom(rank = rank)(idxType = idxType)(stridable = stridable))), param arg initElts[103230] =
  1, arg data[103238] :
  (103236 call _ddata eltType) =
  nil[44], arg externArr[103243] =
  0, arg _borrowed[103247] =
  0, arg externFreeFunc[103252] :
  c_void_ptr =
  nil[44]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (103269 call(103257 call . super c"init")(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable))
    (103277 call =(103273 call . this c"dom") dom)
    (103285 call =(103281 call . this c"data") data)
    (103295 call =(103291 call . this c"externFreeFunc") externFreeFunc)
    (103305 call =(103301 call . this c"externArr") externArr)
    (103315 call =(103311 call . this c"_borrowed") _borrowed)
    (103325 call =(103321 call . this c"callPostAlloc") 0)
    (103335 call =(103331 call . this c"deinitElts") initElts)
    (103343 call(103339 call . this c"complete"))
    (103353 call(103348 call . this c"setupFieldsAndAllocate") initElts)
  }
  function DefaultRectangularArr[106840](?).intIdxType[103359](arg _mt[106848]:_MT[238], arg this[106846]:DefaultRectangularArr[106840](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (103365 return(103364 call chpl__idxTypeToIntIdxType idxType))
  }
  function DefaultRectangularArr[106840](?).dsiDisplayRepresentation[103372](arg _mt[106852]:_MT[238], arg this[106850]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (103394 call writeln "off=" off)
    (103417 call writeln "blk=" blk)
    (103439 call writeln "str=" str)
    (103461 call writeln "factoredOffs=" factoredOffs)
  }
  function DefaultRectangularArr[106840](?).dsiGetBaseDom[103467](arg _mt[106856]:_MT[238], arg this[106854]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (103470 return dom)
  }
  function DefaultRectangularArr[106840](?).dsiElementInitializationComplete[103477](arg _mt[106860]:_MT[238], arg this[106858]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const size[103527] "const"(103524 IfExpr (103484 call == storageOrder(103481 call . ArrayStorageOrder c"RMO")) then
    { scopeless
      (103500 call *(103489 call blk 0)(103497 call .(103496 call(103491 call . dom c"dsiDim") 0) c"size"))
    } else
    { scopeless
      (103522 call *(103508 call blk(103505 call - rank 1))(103519 call .(103518 call(103510 call . dom c"dsiDim")(103515 call - rank 1)) c"size"))
    } )
    (103530 'end of statement')
    if(103561 call _cond_test debugDefaultDist)
    {
      (103558 call chpl_debug_writeln "*** DR calling postalloc "(103554 call _cast string[26] eltType) " " size)
    }
    if(103578 call _cond_test callPostAlloc)
    {
      (103570 call _ddata_allocate_postalloc data size)
      (103575 call = callPostAlloc 0)
    }
    (103584 call = deinitElts 1)
  }
  function DefaultRectangularArr[106840](?).dsiElementDeinitializationComplete[103591](arg _mt[106864]:_MT[238], arg this[106862]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (103595 call = deinitElts 0)
  }
  function DefaultRectangularArr[106840](?).dsiDestroyArr[103607](arg _mt[106868]:_MT[238], arg this[106866]:DefaultRectangularArr[106840](?), arg deinitElts[103604] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(103636 call _cond_test debugDefaultDist)
    {
      (103633 call chpl_debug_writeln "*** DR calling dealloc "(103631 call _cast string[26] eltType))
    }
    if(103807 call _cond_test externArr)
    {
      if(103655 call _cond_test(103643 call ! _borrowed))
      {
        (103652 call chpl_call_free_func externFreeFunc(103651 call c_ptrTo data))
      }
    }
    {
      unknown numInd[103666](103663 call . dom c"dsiNumIndices")
      (103669 'end of statement')
      unknown numElts[103673] numInd intIdxType
      (103676 'end of statement')
      if(103797 call _cond_test(103688 call &&(103682 call && deinitElts(103679 call . this c"deinitElts"))(103686 call > numInd 0)))
      {
        unknown needsDestroy[103700] "param"(103699 'needs auto destroy'(103698 'deref'(103697 call data 0)))
        (103703 'end of statement')
        if(103793 call _cond_test needsDestroy)
        {
          if(103788 call _cond_test(103709 call _deinitElementsIsParallel eltType))
          {
            Forall {
              induction variables:
                
                unknown i[103727] "index var" "insert auto destroy"
              iterated expressions:
                (103715 call #(103712 call chpl_build_low_bounded_range 0) numElts)
              shadow variables:
              other variables
                forall body
              {
                (103723 call chpl__autoDestroy(103721 call data i))
              }
            }
          }
          {
            {
              unknown _indexOfInterest[103747] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[103748] "expr temp" "temp"
              (103757 'move' _iterator[103748](103755 call _getIterator(103764 call chpl_direct_counted_range_iter 0 numElts)))
              Defer
              {
                {
                  (103780 call _freeIterator _iterator[103748])
                }
              }
              { scopeless type
                (103769 'move' _indexOfInterest[103747](103766 call iteratorIndex _iterator[103748]))
              }
              ForLoop[103749]
              {
                unknown i[103773] "index var" "insert auto destroy"
                (103775 'move' i[103773] _indexOfInterest[103747])
                {
                  (103744 call chpl__autoDestroy(103742 call data i))
                }
                label _continueLabel[103752]
                _indexOfInterest[103747]
                _iterator[103748]
              }
              label _breakLabel[103753]
            }
          }
        }
      }
      (103805 call _ddata_free data numInd)
    }
  }
  function DefaultRectangularArr[106840](?).theData[103815](arg _mt[106872]:_MT[238], arg this[106870]:DefaultRectangularArr[106840](?)) ref : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(103829 call _cond_test(103821 call && earlyShiftData(103819 call ! stridable)))
    {
      (103824 return shiftedData)
    }
    {
      (103827 return data)
    }
  }
  function DefaultRectangularArr[106840](?).these[103846](arg _mt[106876]:_MT[238], arg this[106874]:DefaultRectangularArr[106840](?), arg tasksPerLocale[103842] :
  int[13] =
  dataParTasksPerLocale, arg ignoreRunning[103850] :
  bool[10] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[103856] :
  int[13] =
  dataParMinGranularity) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(103883 call _cond_test debugDefaultDist)
    {
      (103880 call chpl_debug_writeln "*** In defRectArr simple-dd serial iterator")
    }
    {
      unknown _indexOfInterest[103897] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[103898] "expr temp" "temp"
      (103907 'move' _iterator[103898](103905 call _getIterator(103893 call chpl__serialViewIter this dom)))
      Defer
      {
        {
          (103924 call _freeIterator _iterator[103898])
        }
      }
      { scopeless type
        (103913 'move' _indexOfInterest[103897](103910 call iteratorIndex _iterator[103898]))
      }
      ForLoop[103899]
      {
        unknown elem[103917] "index var" "insert auto destroy"
        (103919 'move' elem[103917] _indexOfInterest[103897])
        (103895 yield elem)
        label _continueLabel[103902]
        _indexOfInterest[103897]
        _iterator[103898]
      }
      label _breakLabel[103903]
    }
  }
  function DefaultRectangularArr[106840](?).these[103939](arg _mt[106880]:_MT[238], arg this[106878]:DefaultRectangularArr[106840](?), param arg tag[103936] :
  iterKind, arg tasksPerLocale[103942] =
  dataParTasksPerLocale, arg ignoreRunning[103946] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[103950] =
  dataParMinGranularity) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(103983 call _cond_test debugDefaultDist)
    {
      (103980 call chpl_debug_writeln "*** In defRectArr simple-dd standalone iterator")
    }
    {
      unknown _indexOfInterest[104006] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104007] "expr temp" "temp"
      (104016 'move' _iterator[104007](104014 call _getIterator(103998 call(103990 call . dom c"these") tag tasksPerLocale ignoreRunning minIndicesPerTask)))
      Defer
      {
        {
          (104033 call _freeIterator _iterator[104007])
        }
      }
      { scopeless type
        (104022 'move' _indexOfInterest[104006](104019 call iteratorIndex _iterator[104007]))
      }
      ForLoop[104008]
      {
        unknown i[104026] "index var" "insert auto destroy"
        (104028 'move' i[104026] _indexOfInterest[104006])
        {
          (104003 yield(104002 call dsiAccess i))
        }
        label _continueLabel[104011]
        _indexOfInterest[104006]
        _iterator[104007]
      }
      label _breakLabel[104012]
    }
  }
  where {
    (103958 call == tag(103955 call . iterKind c"standalone"))
  }
  function DefaultRectangularArr[106840](?).these[104049](arg _mt[106884]:_MT[238], arg this[106882]:DefaultRectangularArr[106840](?), param arg tag[104046] :
  iterKind, arg tasksPerLocale[104052] =
  dataParTasksPerLocale, arg ignoreRunning[104056] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[104060] =
  dataParMinGranularity) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(104093 call _cond_test debugDefaultDist)
    {
      (104090 call chpl_debug_writeln "*** In defRectArr simple-dd leader iterator")
    }
    {
      unknown _indexOfInterest[104112] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104113] "expr temp" "temp"
      (104122 'move' _iterator[104113](104120 call _getIterator(104108 call(104100 call . dom c"these") tag tasksPerLocale ignoreRunning minIndicesPerTask)))
      Defer
      {
        {
          (104139 call _freeIterator _iterator[104113])
        }
      }
      { scopeless type
        (104128 'move' _indexOfInterest[104112](104125 call iteratorIndex _iterator[104113]))
      }
      ForLoop[104114]
      {
        unknown followThis[104132] "index var" "insert auto destroy"
        (104134 'move' followThis[104132] _indexOfInterest[104112])
        (104110 yield followThis)
        label _continueLabel[104117]
        _indexOfInterest[104112]
        _iterator[104113]
      }
      label _breakLabel[104118]
    }
  }
  where {
    (104068 call == tag(104065 call . iterKind c"leader"))
  }
  function DefaultRectangularArr[106840](?).these[104155](arg _mt[106888]:_MT[238], arg this[106886]:DefaultRectangularArr[106840](?), param arg tag[104152] :
  iterKind, arg followThis[104157]:_any[178](?), arg tasksPerLocale[104160] =
  dataParTasksPerLocale, arg ignoreRunning[104164] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[104168] =
  dataParMinGranularity) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(104202 call _cond_test debugDefaultDist)
    {
      (104199 call chpl_debug_writeln "*** In defRectArr simple-dd follower iterator: " followThis)
    }
    {
      unknown _indexOfInterest[104229] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104230] "expr temp" "temp"
      (104239 'move' _iterator[104230](104237 call _getIterator(104222 call(104209 call . dom c"these")(tag =(104213 call . iterKind c"follower")) followThis tasksPerLocale ignoreRunning minIndicesPerTask)))
      Defer
      {
        {
          (104256 call _freeIterator _iterator[104230])
        }
      }
      { scopeless type
        (104245 'move' _indexOfInterest[104229](104242 call iteratorIndex _iterator[104230]))
      }
      ForLoop[104231]
      {
        unknown i[104249] "index var" "insert auto destroy"
        (104251 'move' i[104249] _indexOfInterest[104229])
        (104227 yield(104226 call dsiAccess i))
        label _continueLabel[104234]
        _indexOfInterest[104229]
        _iterator[104230]
      }
      label _breakLabel[104235]
    }
  }
  where {
    (104176 call == tag(104173 call . iterKind c"follower"))
  }
  function DefaultRectangularArr[106840](?).computeFactoredOffs[104268](arg _mt[106892]:_MT[238], arg this[106890]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (104275 call = factoredOffs(104273 call _cast intIdxType 0))
    {
      unknown i[104307] 0
      unknown tmp[104308] "maybe param" "temp"
      (104320 'move' tmp[104308](104318 call chpl_compute_low_param_loop_bound 0(104282 call - rank 1)))
      unknown tmp[104309] "maybe param" "temp"
      (104330 'move' tmp[104309](104328 call chpl_compute_high_param_loop_bound 0(104325 call - rank 1)))
      unknown tmp[104310] "maybe param" "temp"
      (104333 'move' tmp[104310] 1)
      ParamForLoop[104335]
      { i[104307] tmp[104308] tmp[104309] tmp[104310]
        {
          (104303 call = factoredOffs(104301 call + factoredOffs(104299 call *(104291 call blk i)(104298 call chpl__idxToInt(104296 call off i)))))
        }
      }
      label _unused_continueLabel[104312]
      label _breakLabel[104311]
    }
  }
  function DefaultRectangularArr[106840](?).initShiftedData[104348](arg _mt[106896]:_MT[238], arg this[106894]:DefaultRectangularArr[106840](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(104407 call _cond_test(104354 call && earlyShiftData(104352 call ! stridable)))
    {
      if(104402 call _cond_test(104361 call >(104357 call . dom c"dsiNumIndices") 0))
      {
        const shiftDist[104387] "const"(104384 IfExpr (104366 call isIntType idxType) then
        { scopeless
          (104372 call -(104369 call _cast idxType 0) factoredOffs)
        } else
        { scopeless
          (104382 call -(104376 call _cast idxSignedType 0)(104380 call _cast idxSignedType factoredOffs))
        } )
        (104390 'end of statement')
        (104399 call = shiftedData(104398 call _ddata_shift eltType data shiftDist))
      }
    }
  }
  function DefaultRectangularArr[106840](?).setupFieldsAndAllocate[104418](arg _mt[106900]:_MT[238], arg this[106898]:DefaultRectangularArr[106840](?), param arg initElts[104416]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown dim[104462] 0
      unknown tmp[104463] "maybe param" "temp"
      (104475 'move' tmp[104463](104473 call chpl_compute_low_param_loop_bound 0(104423 call - rank 1)))
      unknown tmp[104464] "maybe param" "temp"
      (104485 'move' tmp[104464](104483 call chpl_compute_high_param_loop_bound 0(104480 call - rank 1)))
      unknown tmp[104465] "maybe param" "temp"
      (104488 'move' tmp[104465] 1)
      ParamForLoop[104490]
      { dim[104462] tmp[104463] tmp[104464] tmp[104465]
        {
          (104441 call =(104430 call off dim)(104438 call .(104437 call(104432 call . dom c"dsiDim") dim) c"alignedLow"))
          (104459 call =(104448 call str dim)(104456 call .(104455 call(104450 call . dom c"dsiDim") dim) c"stride"))
        }
      }
      label _unused_continueLabel[104467]
      label _breakLabel[104466]
    }
    if(104720 call _cond_test(104505 call == storageOrder(104502 call . ArrayStorageOrder c"RMO")))
    {
      (104518 call =(104513 call blk(104510 call - rank 1))(104516 call _cast intIdxType 1))
      {
        unknown dim[104563] 0
        unknown tmp[104564] "maybe param" "temp"
        (104575 'move' tmp[104564](104573 call chpl_compute_low_param_loop_bound 0(104525 call - rank 2)))
        unknown tmp[104565] "maybe param" "temp"
        (104585 'move' tmp[104565](104583 call chpl_compute_high_param_loop_bound 0(104580 call - rank 2)))
        unknown tmp[104566] "maybe param" "temp"
        (104588 'move' tmp[104566](104530 call - 1))
        ParamForLoop[104590]
        { dim[104563] tmp[104564] tmp[104565] tmp[104566]
          (104560 call =(104537 call blk dim)(104558 call *(104544 call blk(104541 call + dim 1))(104555 call .(104554 call(104546 call . dom c"dsiDim")(104551 call + dim 1)) c"size")))
        }
        label _unused_continueLabel[104568]
        label _breakLabel[104567]
      }
    }
    {
      if(104716 call _cond_test(104606 call == storageOrder(104603 call . ArrayStorageOrder c"CMO")))
      {
        (104616 call =(104611 call blk 0)(104614 call _cast intIdxType 1))
        {
          unknown dim[104657] 0
          unknown tmp[104658] "maybe param" "temp"
          (104670 'move' tmp[104658](104668 call chpl_compute_low_param_loop_bound 1(104623 call - rank 1)))
          unknown tmp[104659] "maybe param" "temp"
          (104680 'move' tmp[104659](104678 call chpl_compute_high_param_loop_bound 1(104675 call - rank 1)))
          unknown tmp[104660] "maybe param" "temp"
          (104683 'move' tmp[104660] 1)
          ParamForLoop[104685]
          { dim[104657] tmp[104658] tmp[104659] tmp[104660]
            {
              (104653 call =(104630 call blk dim)(104651 call *(104637 call blk(104634 call - dim 1))(104648 call .(104647 call(104639 call . dom c"dsiDim")(104644 call - dim 1)) c"size")))
            }
          }
          label _unused_continueLabel[104662]
          label _breakLabel[104661]
        }
      }
      {
        (104713 call halt "unknown array storage order")
      }
    }
    (104727 call computeFactoredOffs)
    const size[104777] "const"(104774 IfExpr (104734 call == storageOrder(104731 call . ArrayStorageOrder c"RMO")) then
    { scopeless
      (104750 call *(104739 call blk 0)(104747 call .(104746 call(104741 call . dom c"dsiDim") 0) c"size"))
    } else
    { scopeless
      (104772 call *(104758 call blk(104755 call - rank 1))(104769 call .(104768 call(104760 call . dom c"dsiDim")(104765 call - rank 1)) c"size"))
    } )
    (104780 'end of statement')
    if(104845 call _cond_test usePollyArrayIndex)
    {
      {
        unknown dim[104807] 0
        unknown tmp[104808] "maybe param" "temp"
        (104820 'move' tmp[104808](104818 call chpl_compute_low_param_loop_bound 0(104785 call - rank 1)))
        unknown tmp[104809] "maybe param" "temp"
        (104830 'move' tmp[104809](104828 call chpl_compute_high_param_loop_bound 0(104825 call - rank 1)))
        unknown tmp[104810] "maybe param" "temp"
        (104833 'move' tmp[104810] 1)
        ParamForLoop[104835]
        { dim[104807] tmp[104808] tmp[104809] tmp[104810]
          {
            (104803 call =(104792 call sizesPerDim dim)(104800 call .(104799 call(104794 call . dom c"dsiDim") dim) c"size"))
          }
        }
        label _unused_continueLabel[104812]
        label _breakLabel[104811]
      }
    }
    if(104948 call _cond_test(104851 call == data nil[44]))
    {
      if(104882 call _cond_test debugDefaultDist)
      {
        (104879 call chpl_debug_writeln "*** DR alloc "(104875 call _cast string[26] eltType) " " size)
      }
      if(104927 call _cond_test(104888 call ! localeModelHasSublocales))
      {
        (104897 call = data(104896 call _ddata_allocate_noinit eltType size callPostAlloc))
      }
      {
        (104923 call = data(104922 call _ddata_allocate_noinit eltType size callPostAlloc(subloc =(104918 IfExpr (104914 call >(104912 call(104908 call . here c"getChildCount")) 1) then
        { scopeless
          c_sublocid_all
        } else
        { scopeless
          c_sublocid_none
        } ))))
      }
      if(104944 call _cond_test initElts)
      {
        (104937 call init_elts data size eltType)
        (104942 call dsiElementInitializationComplete)
      }
    }
    (104954 call initShiftedData)
  }
  function DefaultRectangularArr[106840](?).getDataIndex[104966](arg _mt[106904]:_MT[238], arg this[106902]:DefaultRectangularArr[106840](?), arg ind[104962] ... :
  idxType, param arg getShifted[104969] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    (104982 return(104981 call getDataIndex ind(getShifted = getShifted)))
  }
  where {
    (104974 call == rank 1)
  }
  function DefaultRectangularArr[106840](?).getDataIndex[104997](arg _mt[106908]:_MT[238], arg this[106906]:DefaultRectangularArr[106840](?), arg ind[104994] :
  (104992 call * rank idxType), param arg getShifted[105000] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    if(105424 call _cond_test stridable)
    {
      unknown sum[105008](105006 call _cast intIdxType 0)
      (105011 'end of statement')
      {
        unknown i[105058] 0
        unknown tmp[105059] "maybe param" "temp"
        (105071 'move' tmp[105059](105069 call chpl_compute_low_param_loop_bound 0(105016 call - rank 1)))
        unknown tmp[105060] "maybe param" "temp"
        (105081 'move' tmp[105060](105079 call chpl_compute_high_param_loop_bound 0(105076 call - rank 1)))
        unknown tmp[105061] "maybe param" "temp"
        (105084 'move' tmp[105061] 1)
        ParamForLoop[105086]
        { i[105058] tmp[105059] tmp[105060] tmp[105061]
          (105055 call += sum(105053 call /(105041 call *(105035 call -(105027 call chpl__idxToInt(105025 call ind i))(105034 call chpl__idxToInt(105032 call off i)))(105040 call blk i))(105051 call _cast intIdxType(105049 call abs(105047 call str i)))))
        }
        label _unused_continueLabel[105063]
        label _breakLabel[105062]
      }
      (105096 return sum)
    }
    {
      unknown wantShiftedIndex[105102] "param"(105100 call && getShifted earlyShiftData)
      (105105 'end of statement')
      if(105420 call _cond_test(105112 call &&(105109 call == rank 1) wantShiftedIndex))
      {
        (105121 return(105120 call chpl__idxToInt(105118 call ind 0)))
      }
      {
        unknown sum[105128](105126 call _cast intIdxType 0)
        (105131 'end of statement')
        unknown useInd[105134] ind
        (105137 'end of statement')
        unknown useOffset[105140] 0 int[13]
        (105143 'end of statement')
        unknown useSizesPerDim[105145] sizesPerDim
        (105148 'end of statement')
        if(105416 call _cond_test usePollyArrayIndex)
        {
          if(105222 call _cond_test(105151 call ! wantShiftedIndex))
          {
            {
              unknown i[105184] 0
              unknown tmp[105185] "maybe param" "temp"
              (105197 'move' tmp[105185](105195 call chpl_compute_low_param_loop_bound 0(105156 call - rank 1)))
              unknown tmp[105186] "maybe param" "temp"
              (105207 'move' tmp[105186](105205 call chpl_compute_high_param_loop_bound 0(105202 call - rank 1)))
              unknown tmp[105187] "maybe param" "temp"
              (105210 'move' tmp[105187] 1)
              ParamForLoop[105212]
              { i[105184] tmp[105185] tmp[105186] tmp[105187]
                {
                  (105180 call =(105163 call useInd i)(105178 call -(105170 call chpl__idxToInt(105168 call useInd i))(105177 call chpl__idxToInt(105175 call off i))))
                }
              }
              label _unused_continueLabel[105189]
              label _breakLabel[105188]
            }
          }
          (105235 return(105234 call polly_array_index useOffset(105231 'expand_tuple' useSizesPerDim)(105233 'expand_tuple' useInd)))
        }
        {
          if(105395 call _cond_test(105242 call == storageOrder(105239 call . ArrayStorageOrder c"RMO")))
          {
            {
              unknown i[105269] 0
              unknown tmp[105270] "maybe param" "temp"
              (105282 'move' tmp[105270](105280 call chpl_compute_low_param_loop_bound 0(105247 call - rank 2)))
              unknown tmp[105271] "maybe param" "temp"
              (105292 'move' tmp[105271](105290 call chpl_compute_high_param_loop_bound 0(105287 call - rank 2)))
              unknown tmp[105272] "maybe param" "temp"
              (105295 'move' tmp[105272] 1)
              ParamForLoop[105297]
              { i[105269] tmp[105270] tmp[105271] tmp[105272]
                {
                  (105265 call += sum(105263 call *(105258 call chpl__idxToInt(105256 call ind i))(105262 call blk i)))
                }
              }
              label _unused_continueLabel[105274]
              label _breakLabel[105273]
            }
            (105318 call += sum(105317 call chpl__idxToInt(105315 call ind(105312 call - rank 1))))
          }
          {
            {
              unknown i[105346] 0
              unknown tmp[105347] "maybe param" "temp"
              (105359 'move' tmp[105347](105357 call chpl_compute_low_param_loop_bound 1(105324 call - rank 1)))
              unknown tmp[105348] "maybe param" "temp"
              (105369 'move' tmp[105348](105367 call chpl_compute_high_param_loop_bound 1(105364 call - rank 1)))
              unknown tmp[105349] "maybe param" "temp"
              (105372 'move' tmp[105349] 1)
              ParamForLoop[105374]
              { i[105346] tmp[105347] tmp[105348] tmp[105349]
                {
                  (105342 call += sum(105340 call *(105335 call chpl__idxToInt(105333 call ind i))(105339 call blk i)))
                }
              }
              label _unused_continueLabel[105351]
              label _breakLabel[105350]
            }
            (105392 call += sum(105391 call chpl__idxToInt(105389 call ind 0)))
          }
          if(105408 call _cond_test(105401 call ! wantShiftedIndex))
          {
            (105405 call -= sum factoredOffs)
          }
          (105414 return sum)
        }
      }
    }
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105439](arg _mt[106912]:_MT[238], arg this[106910]:DefaultRectangularArr[106840](?), arg ind[105435] ... :
  idxType) ref : _unknown[51] "inline" "method" "primary method"
  {
    (105449 return(105448 call dsiAccess ind))
  }
  where {
    (105443 call == rank 1)
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105463](arg _mt[106916]:_MT[238], arg this[106914]:DefaultRectangularArr[106840](?), arg ind[105459] ... :
  idxType) : _unknown[51] "inline" "method" "primary method"
  {
    (105479 return(105478 call dsiAccess ind))
  }
  where {
    (105473 call &&(105467 call == rank 1)(105472 call shouldReturnRvalueByValue eltType))
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105493](arg _mt[106920]:_MT[238], arg this[106918]:DefaultRectangularArr[106840](?), arg ind[105489] ... :
  idxType) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (105509 return(105508 call dsiAccess ind))
  }
  where {
    (105503 call &&(105497 call == rank 1)(105502 call shouldReturnRvalueByConstRef eltType))
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105524](arg _mt[106924]:_MT[238], arg this[106922]:DefaultRectangularArr[106840](?), arg ind[105521] :
  (105519 call * rank idxType)) ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105530](105529 call getDataIndex ind)
    (105533 'end of statement')
    (105539 return(105538 call theData dataInd))
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105552](arg _mt[106928]:_MT[238], arg this[106926]:DefaultRectangularArr[106840](?), arg ind[105549] :
  (105547 call * rank idxType)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105562](105561 call getDataIndex ind)
    (105565 'end of statement')
    (105571 return(105570 call theData dataInd))
  }
  where {
    (105557 call shouldReturnRvalueByValue eltType)
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105585](arg _mt[106932]:_MT[238], arg this[106930]:DefaultRectangularArr[106840](?), arg ind[105582] :
  (105580 call * rank idxType)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105595](105594 call getDataIndex ind)
    (105598 'end of statement')
    (105604 return(105603 call theData dataInd))
  }
  where {
    (105590 call shouldReturnRvalueByConstRef eltType)
  }
  function DefaultRectangularArr[106840](?).dsiLocalAccess[105613](arg _mt[106936]:_MT[238], arg this[106934]:DefaultRectangularArr[106840](?), arg i[105611]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (105619 return(105618 call dsiAccess i))
  }
  function DefaultRectangularArr[106840](?).dsiLocalAccess[105628](arg _mt[106940]:_MT[238], arg this[106938]:DefaultRectangularArr[106840](?), arg i[105626]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (105638 return(105637 call dsiAccess i))
  }
  where {
    (105633 call shouldReturnRvalueByValue eltType)
  }
  function DefaultRectangularArr[106840](?).dsiLocalAccess[105648](arg _mt[106944]:_MT[238], arg this[106942]:DefaultRectangularArr[106840](?), arg i[105646]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (105658 return(105657 call dsiAccess i))
  }
  where {
    (105653 call shouldReturnRvalueByConstRef eltType)
  }
  function DefaultRectangularArr[106840](?).dsiBoundsCheck[105668](arg _mt[106948]:_MT[238], arg this[106946]:DefaultRectangularArr[106840](?), arg i[105666]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (105679 return(105678 call(105673 call . dom c"dsiMember") i))
  }
  function DefaultRectangularArr[106840](?).adjustBlkOffStrForNewDomain[105691](arg _mt[106952]:_MT[238], arg this[106950]:DefaultRectangularArr[106840](?), arg d[105688] :
  (105687 'to unmanaged class from unknown' DefaultRectangularDom), arg alias[105695] :
  (105694 'to unmanaged class from unknown' DefaultRectangularArr)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown i[105880] 0
      unknown tmp[105881] "maybe param" "temp"
      (105893 'move' tmp[105881](105891 call chpl_compute_low_param_loop_bound 0(105701 call - rank 1)))
      unknown tmp[105882] "maybe param" "temp"
      (105903 'move' tmp[105882](105901 call chpl_compute_high_param_loop_bound 0(105898 call - rank 1)))
      unknown tmp[105883] "maybe param" "temp"
      (105906 'move' tmp[105883] 1)
      ParamForLoop[105908]
      { i[105880] tmp[105881] tmp[105882] tmp[105883]
        {
          unknown s[105706] idxType
          (105709 'end of statement')
          if(105819 call _cond_test(105713 call == idxSignedType idxType))
          {
            (105738 call = s(105736 call _cast(105733 call . d c"idxType")(105730 call /(105723 call .(105722 call(105717 call . dom c"dsiDim") i) c"stride")(105729 call str i))))
          }
          {
            (105790 call assert(105787 call ||(105763 call &&(105754 call <(105750 call .(105749 call(105744 call . dom c"dsiDim") i) c"stride") 0)(105761 call <(105759 call str i) 0))(105785 call &&(105776 call >(105772 call .(105771 call(105766 call . dom c"dsiDim") i) c"stride") 0)(105783 call >(105781 call str i) 0))))
            (105816 call = s(105814 call _cast(105811 call . d c"idxType")(105808 call /(105801 call .(105800 call(105795 call . dom c"dsiDim") i) c"stride")(105807 call str i))))
          }
          (105840 call =(105829 call(105824 call . alias c"off") i)(105837 call .(105836 call(105831 call . d c"dsiDim") i) c"low"))
          (105857 call =(105849 call(105844 call . alias c"blk") i)(105855 call *(105853 call blk i) s))
          (105877 call =(105866 call(105861 call . alias c"str") i)(105874 call .(105873 call(105868 call . d c"dsiDim") i) c"stride"))
        }
      }
      label _unused_continueLabel[105885]
      label _breakLabel[105884]
    }
  }
  function DefaultRectangularArr[106840](?).adjustBlkOffStrForNewDomain[105927](arg _mt[106956]:_MT[238], arg this[106954]:DefaultRectangularArr[106840](?), arg d[105924] :
  (105923 'to unmanaged class from unknown' DefaultRectangularDom), arg alias[105931] :
  (105930 'to unmanaged class from unknown' DefaultRectangularArr)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown i[106012] 0
      unknown tmp[106013] "maybe param" "temp"
      (106025 'move' tmp[106013](106023 call chpl_compute_low_param_loop_bound 0(105953 call - rank 1)))
      unknown tmp[106014] "maybe param" "temp"
      (106035 'move' tmp[106014](106033 call chpl_compute_high_param_loop_bound 0(106030 call - rank 1)))
      unknown tmp[106015] "maybe param" "temp"
      (106038 'move' tmp[106015] 1)
      ParamForLoop[106040]
      { i[106012] tmp[106013] tmp[106014] tmp[106015]
        {
          (105974 call =(105963 call(105958 call . alias c"off") i)(105971 call .(105970 call(105965 call . d c"dsiDim") i) c"low"))
          (105989 call =(105984 call(105979 call . alias c"blk") i)(105988 call blk i))
          (106009 call =(105998 call(105993 call . alias c"str") i)(106006 call .(106005 call(106000 call . d c"dsiDim") i) c"stride"))
        }
      }
      label _unused_continueLabel[106017]
      label _breakLabel[106016]
    }
  }
  where {
    (105948 call &&(105939 call ==(105935 call . dom c"stridable") 0)(105946 call ==(105942 call . this c"stridable") 0))
  }
  function DefaultRectangularArr[106840](?).dsiReallocate[106070](arg _mt[106960]:_MT[238], arg this[106958]:DefaultRectangularArr[106840](?), arg bounds[106067] :
  (106065 call * rank(106064 call range idxType(106060 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "primary method" "method overrides" "ignore transfer errors" "no return value for void"
  {
    unknown actuallyResizing[106073] 0
    (106076 'end of statement')
    {
      unknown _indexOfInterest[106110] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[106111] "expr temp" "temp"
      (106120 'move' _iterator[106111](106118 call _getIterator(106080 call . bounds c"indices")))
      Defer
      {
        {
          (106137 call _freeIterator _iterator[106111])
        }
      }
      { scopeless type
        (106126 'move' _indexOfInterest[106110](106123 call iteratorIndex _iterator[106111]))
      }
      ForLoop[106112]
      {
        unknown i[106130] "index var" "insert auto destroy"
        (106132 'move' i[106130] _indexOfInterest[106110])
        {
          if(106105 call _cond_test(106094 call !=(106086 call bounds i)(106093 call(106088 call . dom c"dsiDim") i)))
          {
            (106098 call = actuallyResizing 1)
            break nil[44]
          }
        }
        label _continueLabel[106115]
        _indexOfInterest[106110]
        _iterator[106111]
      }
      label _breakLabel[106116]
    }
    if(106149 call _cond_test(106145 call ! actuallyResizing))
    {
      (106147 return _void[55])
    }
    if(106182 call _cond_test(106158 call !(106157 call isDefaultInitializable eltType)))
    {
      (106179 call halt "Can't resize domains whose arrays' elements don't have default values")
    }
    if(106217 call _cond_test(106191 call !=(106188 call chpl_localeID_to_locale(106187 '_wide_get_locale' this)) here))
    {
      (106214 call halt "internal error: dsiReallocate() can only be called from an array's home locale")
    }
    {
      const reallocD[106226] "const"(106224 call chpl__buildDomainExpr(106222 'expand_tuple' bounds))
      (106229 'end of statement')
      if(106642 call _cond_test(106280 call &&(106271 call &&(106262 call &&(106250 call &&(106238 call &&(106232 call ! disableArrRealloc)(106236 call == rank 1))(106248 call ==(106241 call . reallocD c"low")(106245 call . dom c"dsiLow")))(106260 call ==(106253 call . reallocD c"stride")(106257 call . dom c"dsiStride")))(106269 call >(106265 call . dom c"dsiNumIndices") 0))(106278 call >(106274 call . reallocD c"size") 0)))
      {
        if(106304 call _cond_test reportInPlaceRealloc)
        {
          (106302 call writeln "reallocating in-place")
        }
        (106324 call =(106313 call sizesPerDim 0)(106321 call .(106320 call(106315 call . reallocD c"dsiDim") 0) c"size"))
        (106343 call = data(106342 call _ddata_reallocate data eltType(oldSize =(106333 call . dom c"dsiNumIndices"))(newSize =(106338 call . reallocD c"size"))))
        (106348 call initShiftedData)
      }
      {
        unknown copy[106375](106352 'new'(_chpl_manager = unmanaged[220](?))(106374 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable =(106365 call .(106362 call . reallocD c"_value") c"stridable"))(dom =(106370 call . reallocD c"_value"))))
        (106378 'end of statement')
        unknown keep[106390](106389 call reallocD(106387 'expand_tuple'(106384 call . dom c"ranges")))
        (106393 'end of statement')
        Forall {
          induction variables:
            
            unknown i[106425] "index var" "insert auto destroy"
          iterated expressions:
            keep
          shadow variables:
          other variables
            forall body
          {
            unknown dst[106405] "ref var"(106404 call(106399 call . copy c"dsiAccess") i)
            (106408 'end of statement')
            const src[106414] "const" "ref var"(106413 call dsiAccess i)
            (106417 'end of statement')
            (106422 '=' dst src)
          }
        }
        unknown needsDestroy[106432] "param"(106431 'needs auto destroy' eltType)
        (106435 'end of statement')
        if(106550 call _cond_test needsDestroy)
        {
          if(106545 call _cond_test(106445 call <(106438 call . reallocD c"size")(106442 call . dom c"dsiNumIndices")))
          {
            if(106540 call _cond_test(106450 call _deinitElementsIsParallel eltType))
            {
              Forall {
                induction variables:
                  
                  unknown i[106477] "index var" "insert auto destroy"
                iterated expressions:
                  dom
                shadow variables:
                other variables
                  forall body
                {
                  if(106471 call _cond_test(106460 call !(106459 call(106454 call . keep c"contains") i)))
                  {
                    (106468 call chpl__autoDestroy(106466 call dsiAccess i))
                  }
                }
              }
            }
            {
              {
                unknown _indexOfInterest[106506] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[106507] "expr temp" "temp"
                (106516 'move' _iterator[106507](106514 call _getIterator dom))
                Defer
                {
                  {
                    (106532 call _freeIterator _iterator[106507])
                  }
                }
                { scopeless type
                  (106521 'move' _indexOfInterest[106506](106518 call iteratorIndex _iterator[106507]))
                }
                ForLoop[106508]
                {
                  unknown i[106525] "index var" "insert auto destroy"
                  (106527 'move' i[106525] _indexOfInterest[106506])
                  {
                    if(106501 call _cond_test(106490 call !(106489 call(106484 call . keep c"contains") i)))
                    {
                      (106498 call chpl__autoDestroy(106496 call dsiAccess i))
                    }
                  }
                  label _continueLabel[106511]
                  _indexOfInterest[106506]
                  _iterator[106507]
                }
                label _breakLabel[106512]
              }
            }
          }
        }
        (106559 call = off(106556 call . copy c"off"))
        (106567 call = blk(106564 call . copy c"blk"))
        (106575 call = str(106572 call . copy c"str"))
        (106583 call = factoredOffs(106580 call . copy c"factoredOffs"))
        (106590 call dsiDestroyArr(deinitElts = 0))
        (106597 call = data(106594 call . copy c"data"))
        if(106633 call _cond_test(106610 call && earlyShiftData(106608 call !(106605 call .(106602 call . reallocD c"_value") c"stridable"))))
        {
          if(106628 call _cond_test(106617 call >(106613 call . reallocD c"size") 0))
          {
            (106624 call = shiftedData(106621 call . copy c"shiftedData"))
          }
        }
        (106639 call chpl__delete copy)
      }
    }
  }
  function DefaultRectangularArr[106840](?).dsiPostReallocate[106650](arg _mt[106964]:_MT[238], arg this[106962]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
  }
  function DefaultRectangularArr[106840](?).dsiLocalSlice[106659](arg _mt[106968]:_MT[238], arg this[106966]:DefaultRectangularArr[106840](?), arg ranges[106657]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (106664 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularArr[106840](?).dsiGetRAD[106671](arg _mt[106972]:_MT[238], arg this[106970]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method"
  {
    unknown rad[106680](106679 call _remoteAccessData eltType rank idxType stridable)
    (106683 'end of statement')
    (106690 call =(106686 call . rad c"off") off)
    (106698 call =(106694 call . rad c"blk") blk)
    (106706 call =(106702 call . rad c"str") str)
    (106714 call =(106710 call . rad c"origin") 0)
    (106722 call =(106718 call . rad c"factoredOffs") factoredOffs)
    (106730 call =(106726 call . rad c"data") data)
    (106738 call =(106734 call . rad c"shiftedData") shiftedData)
    (106742 return rad)
  }
  function DefaultRectangularArr[106840](?).dsiTargetLocales[106748](arg _mt[106976]:_MT[238], arg this[106974]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method"
  {
    (106760 return(106758 call chpl__buildArrayExpr(106755 call chpl_localeID_to_locale(106754 '_wide_get_locale'(106751 call . this c"data")))))
  }
  function DefaultRectangularArr[106840](?).dsiHasSingleLocalSubdomain[106767](arg _mt[106980]:_MT[238], arg this[106978]:DefaultRectangularArr[106840](?)) param : _unknown[51] "method" "primary method"
  {
    (106770 return 1)
  }
  function DefaultRectangularArr[106840](?).dsiLocalSubdomain[106781](arg _mt[106984]:_MT[238], arg this[106982]:DefaultRectangularArr[106840](?), arg loc[106778] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(106815 call _cond_test(106791 call ==(106788 call chpl_localeID_to_locale(106787 '_wide_get_locale'(106784 call . this c"data"))) loc))
    {
      (106797 return(106796 call _getDomain dom))
    }
    {
      unknown a[106807](106805 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
      (106810 'end of statement')
      (106813 return a)
    }
  }
  function DefaultRectangularArr[106840](?).dsiLocalSubdomains[106828](arg _mt[106988]:_MT[238], arg this[106986]:DefaultRectangularArr[106840](?), arg loc[106825] :
  locale[28]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (106834 yield(106833 call dsiLocalSubdomain loc))
  }
  type DefaultRectangularArr[106840](?) unknown idxSignedType[103095] "type variable"(103094 call chpl__signedType(103092 call chpl__idxTypeToIntIdxType idxType)) unknown dom[103108](103107 'to unmanaged class from unknown'(103106 call DefaultRectangularDom(rank = rank)(idxType = idxType)(stridable = stridable))) unknown off[103116](103114 call * rank idxType) unknown blk[103127](103125 call * rank(103124 call chpl__idxTypeToIntIdxType idxType)) unknown sizesPerDim[103138](103136 call * rank(103135 call chpl__idxTypeToIntIdxType idxType)) unknown str[103146](103144 call * rank idxSignedType) unknown factoredOffs[103154](103153 call chpl__idxTypeToIntIdxType idxType) unknown data[103163] "alias scope from this" "local field" nil[44](103161 call _ddata eltType) unknown shiftedData[103171] "alias scope from this" "local field"(103170 call _ddata eltType) unknown externFreeFunc[103176] c_void_ptr unknown externArr[103182] 0 bool[10] unknown _borrowed[103188] 1 bool[10] unknown callPostAlloc[103194] 1 bool[10] unknown deinitElts[103200] 1 bool[10] BaseRectangularArr
  function chpl__serialViewIter[106995](arg arr[106993]:_any[178](?), arg viewDom[106997]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown useCache[107017] "param"(107015 call &&(107006 call chpl__isArrayView arr)(107014 call(107010 call . arr c"shouldUseIndexCache")))
    (107020 'end of statement')
    unknown info[107050](107047 IfExpr  useCache then
    { scopeless
      (107026 call . arr c"indexCache")
    } else
    { scopeless(107044 IfExpr (107036 call(107032 call . arr c"isSliceArrayView")) then
      { scopeless
        (107040 call . arr c"arr")
      } else
      { scopeless
        arr
      } )
    } )
    (107053 'end of statement')
    if(107480 call _cond_test(107059 call ==(107055 call . arr c"rank") 1))
    {
      if(107367 call _cond_test(107065 call !(107062 call . viewDom c"stridable")))
      {
        const first[107077] "const"(107076 call(107068 call . info c"getDataIndex")(107072 call . viewDom c"dsiLow"))
        (107080 'end of statement')
        const second[107104] "const"(107103 call(107083 call . info c"getDataIndex")(107101 call(107087 call . viewDom c"chpl_intToIdx")(107098 call +(107096 call chpl__idxToInt(107092 call . viewDom c"dsiLow")) 1)))
        (107107 'end of statement')
        const step[107112] "const"(107110 call - second first)
        (107115 'end of statement')
        const last[107129] "const"(107127 call + first(107125 call *(107122 call -(107118 call . viewDom c"dsiNumIndices") 1) step))
        (107132 'end of statement')
        {
          unknown _indexOfInterest[107150] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107151] "expr temp" "temp"
          (107160 'move' _iterator[107151](107158 call _getIterator(107139 call chpl_direct_pos_stride_range_iter first last step)))
          Defer
          {
            {
              (107177 call _freeIterator _iterator[107151])
            }
          }
          { scopeless type
            (107166 'move' _indexOfInterest[107150](107163 call iteratorIndex _iterator[107151]))
          }
          ForLoop[107152]
          {
            unknown i[107170] "index var" "insert auto destroy"
            (107172 'move' i[107170] _indexOfInterest[107150])
            {
              (107147 yield(107146 call(107141 call . info c"theData") i))
            }
            label _continueLabel[107155]
            _indexOfInterest[107150]
            _iterator[107151]
          }
          label _breakLabel[107156]
        }
      }
      {
        const viewDomDim[107191] "const"(107190 call(107185 call . viewDom c"dsiDim") 0)
        const stride[107204] "const"(107202 call _cast(107199 call . viewDom c"intIdxType")(107195 call . viewDomDim c"stride"))
        const start[107211] "const"(107208 call . viewDomDim c"first")
        const second[107233] "const"(107232 call(107215 call . info c"getDataIndex")(107230 call(107219 call . viewDom c"chpl_intToIdx")(107227 call +(107223 call . viewDomDim c"firstAsInt") stride)))
        (107236 'end of statement')
        unknown first[107245](107244 call(107239 call . info c"getDataIndex") start)
        (107248 'end of statement')
        const step[107262] "const"(107260 call _cast(107259 call chpl__signedType(107255 call . viewDom c"intIdxType"))(107251 call - second first))
        (107265 'end of statement')
        unknown last[107285](107283 call + first(107281 call *(107272 call -(107268 call . viewDomDim c"size") 1)(107279 call _cast(107276 call . viewDom c"intIdxType") step)))
        (107288 'end of statement')
        if(107298 call _cond_test(107291 call < step 0))
        {
          (107295 call <=> last first)
        }
        unknown data[107307](107304 call . info c"theData")
        (107310 'end of statement')
        {
          unknown _indexOfInterest[107325] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107326] "expr temp" "temp"
          (107335 'move' _iterator[107326](107333 call _getIterator(107344 call chpl_direct_range_iter first last step)))
          Defer
          {
            {
              (107360 call _freeIterator _iterator[107326])
            }
          }
          { scopeless type
            (107349 'move' _indexOfInterest[107325](107346 call iteratorIndex _iterator[107326]))
          }
          ForLoop[107327]
          {
            unknown i[107353] "index var" "insert auto destroy"
            (107355 'move' i[107353] _indexOfInterest[107325])
            (107323 yield(107322 call data i))
            label _continueLabel[107330]
            _indexOfInterest[107325]
            _iterator[107326]
          }
          label _breakLabel[107331]
        }
      }
    }
    {
      if(107476 call _cond_test useCache)
      {
        {
          unknown _indexOfInterest[107398] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107399] "expr temp" "temp"
          (107408 'move' _iterator[107399](107406 call _getIterator viewDom))
          Defer
          {
            {
              (107424 call _freeIterator _iterator[107399])
            }
          }
          { scopeless type
            (107413 'move' _indexOfInterest[107398](107410 call iteratorIndex _iterator[107399]))
          }
          ForLoop[107400]
          {
            unknown i[107417] "index var" "insert auto destroy"
            (107419 'move' i[107417] _indexOfInterest[107398])
            {
              const dataIdx[107382] "const"(107381 call(107376 call . info c"getDataIndex") i)
              (107385 'end of statement')
              (107396 yield(107395 call(107390 call . info c"getDataElem") dataIdx))
            }
            label _continueLabel[107403]
            _indexOfInterest[107398]
            _iterator[107399]
          }
          label _breakLabel[107404]
        }
      }
      {
        {
          unknown _indexOfInterest[107441] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107442] "expr temp" "temp"
          (107451 'move' _iterator[107442](107449 call _getIterator(107437 call chpl__serialViewIterHelper arr viewDom)))
          Defer
          {
            {
              (107468 call _freeIterator _iterator[107442])
            }
          }
          { scopeless type
            (107457 'move' _indexOfInterest[107441](107454 call iteratorIndex _iterator[107442]))
          }
          ForLoop[107443]
          {
            unknown elem[107461] "index var" "insert auto destroy"
            (107463 'move' elem[107461] _indexOfInterest[107441])
            (107439 yield elem)
            label _continueLabel[107446]
            _indexOfInterest[107441]
            _iterator[107442]
          }
          label _breakLabel[107447]
        }
      }
    }
  }
  where {
    (107002 call chpl__isDROrDRView arr)
  }
  function chpl__serialViewIter[107492](arg arr[107490]:_any[178](?), arg viewDom[107494]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[107505] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107506] "expr temp" "temp"
      (107515 'move' _iterator[107506](107513 call _getIterator(107501 call chpl__serialViewIterHelper arr viewDom)))
      Defer
      {
        {
          (107532 call _freeIterator _iterator[107506])
        }
      }
      { scopeless type
        (107521 'move' _indexOfInterest[107505](107518 call iteratorIndex _iterator[107506]))
      }
      ForLoop[107507]
      {
        unknown elem[107525] "index var" "insert auto destroy"
        (107527 'move' elem[107525] _indexOfInterest[107505])
        (107503 yield elem)
        label _continueLabel[107510]
        _indexOfInterest[107505]
        _iterator[107506]
      }
      label _breakLabel[107511]
    }
  }
  function chpl__serialViewIterHelper[107546](arg arr[107544]:_any[178](?), arg viewDom[107548]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[107635] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107636] "expr temp" "temp"
      (107645 'move' _iterator[107636](107643 call _getIterator viewDom))
      Defer
      {
        {
          (107661 call _freeIterator _iterator[107636])
        }
      }
      { scopeless type
        (107650 'move' _indexOfInterest[107635](107647 call iteratorIndex _iterator[107636]))
      }
      ForLoop[107637]
      {
        unknown i[107654] "index var" "insert auto destroy"
        (107656 'move' i[107654] _indexOfInterest[107635])
        {
          const dataIdx[107605] "const"(107602 IfExpr (107559 call(107555 call . arr c"isReindexArrayView")) then
          { scopeless
            (107573 call chpl_reindexConvertIdx i(107564 call . arr c"dom")(107570 call . arr c"downdom"))
          } else
          { scopeless(107599 IfExpr (107581 call(107577 call . arr c"isRankChangeArrayView")) then
            { scopeless
              (107597 call chpl_rankChangeConvertIdx i(107588 call . arr c"collapsedDim")(107594 call . arr c"idx"))
            } else
            { scopeless
              i
            } )
          } )
          (107608 'end of statement')
          const info[107622] "const"(107619 IfExpr (107613 call chpl__isArrayView arr) then
          { scopeless
            (107615 call . arr c"arr")
          } else
          { scopeless
            arr
          } )
          (107625 'end of statement')
          (107633 yield(107632 call(107627 call . info c"dsiAccess") dataIdx))
        }
        label _continueLabel[107640]
        _indexOfInterest[107635]
        _iterator[107636]
      }
      label _breakLabel[107641]
    }
  }
  function _unknown[51].dsiSerialReadWrite[107676](arg _mt[107681]:_MT[238], arg this[107678] :
  DefaultRectangularDom, arg f[107674]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107711 call <~>(107705 call <~> f(107684 'new'(107704 call ioLiteral "{")))(107710 call ranges 0))
    {
      unknown _indexOfInterest[107754] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107755] "expr temp" "temp"
      (107764 'move' _iterator[107755](107762 call _getIterator(107772 call chpl_direct_range_iter 1(107769 call - rank 1) 1)))
      Defer
      {
        {
          (107788 call _freeIterator _iterator[107755])
        }
      }
      { scopeless type
        (107777 'move' _indexOfInterest[107754](107774 call iteratorIndex _iterator[107755]))
      }
      ForLoop[107756]
      {
        unknown i[107781] "index var" "insert auto destroy"
        (107783 'move' i[107781] _indexOfInterest[107754])
        (107751 call <~>(107745 call <~> f(107724 'new'(107744 call ioLiteral ", ")))(107750 call ranges i))
        label _continueLabel[107759]
        _indexOfInterest[107754]
        _iterator[107755]
      }
      label _breakLabel[107760]
    }
    (107817 call <~> f(107796 'new'(107816 call ioLiteral "}")))
  }
  function _unknown[51].dsiSerialWrite[107827](arg _mt[107832]:_MT[238], arg this[107829] :
  DefaultRectangularDom, arg f[107825]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107842 call(107837 call . this c"dsiSerialReadWrite") f)
  }
  function _unknown[51].dsiSerialRead[107852](arg _mt[107857]:_MT[238], arg this[107854] :
  DefaultRectangularDom, arg f[107850]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107865 call(107860 call . this c"dsiSerialReadWrite") f)
  }
  function _unknown[51].dsiSerialReadWrite[107875](arg _mt[107880]:_MT[238], arg this[107877] :
  DefaultRectangularArr, arg f[107873]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107886 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiSupportsAutoLocalAccess[107894](arg _mt[107899]:_MT[238], arg this[107896] :
  DefaultRectangularDom) param : _unknown[51] "method" "method overrides"
  {
    (107902 return defaultRectangularSupportsAutoLocalAccess)
  }
  function chpl_serialReadWriteRectangular[107911](arg f[107909]:_any[178](?), arg arr[107913]:_any[178](?)) : _unknown[51] throws "no return value for void"
  {
    (107923 call chpl_serialReadWriteRectangular f arr(107920 call . arr c"dom"))
  }
  function chpl_serialReadWriteRectangular[107932](arg f[107930]:_any[178](?), arg arr[107934]:_any[178](?), arg dom[107936]:_any[178](?)) : _unknown[51] throws "last resort" "no return value for void"
  {
    (107943 call chpl_serialReadWriteRectangularHelper f arr dom)
  }
  function chpl_serialReadWriteRectangularHelper[107952](arg f[107950]:_any[178](?), arg arr[107954]:_any[178](?), arg dom[107956]:_any[178](?)) : _unknown[51] throws "no return value for void"
  {
    unknown rank[107962] "param"(107959 call . arr c"rank")
    (107965 'end of statement')
    unknown idxType[107971] "type variable"(107968 call . arr c"idxType")
    unknown idxSignedType[107981] "type variable"(107980 call chpl__signedType(107978 call chpl__idxTypeToIntIdxType idxType))
    const isNative[107996] "const"(107994 call _cast bool[10](107992 call(107987 call . f c"styleElement") QIO_STYLE_ELEMENT_IS_NATIVE_BYTE_ORDER))
    (107999 'end of statement')
    function writeSpaces[108006](arg dim[108003] :
    int[13]) : _unknown[51] throws "no return value for void"
    {
      {
        unknown _indexOfInterest[108023] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[108024] "expr temp" "temp"
        (108033 'move' _iterator[108024](108031 call _getIterator(108038 call chpl_direct_range_iter 1 dim 1)))
        Defer
        {
          {
            (108054 call _freeIterator _iterator[108024])
          }
        }
        { scopeless type
          (108043 'move' _indexOfInterest[108023](108040 call iteratorIndex _iterator[108024]))
        }
        ForLoop[108025]
        {
          unknown i[108047] "index var" "insert auto destroy"
          (108049 'move' i[108047] _indexOfInterest[108023])
          {
            (108019 call <~> f(108014 'new'(108018 call ioLiteral " ")))
          }
          label _continueLabel[108028]
          _indexOfInterest[108023]
          _iterator[108024]
        }
        label _breakLabel[108029]
      }
    }
    function recursiveArrayWriter[108073](in arg idx[108070] :
    (108068 call * rank idxType), arg dim[108076] =
    0, in arg last[108080] =
    0) : _unknown[51] throws "no return value for void"
    {
      unknown binary[108091](108090 call(108086 call . f c"binary"))
      (108094 'end of statement')
      unknown arrayStyle[108103](108102 call(108097 call . f c"styleElement") QIO_STYLE_ELEMENT_ARRAY)
      (108106 'end of statement')
      unknown isspace[108116](108114 call &&(108109 call == arrayStyle QIO_ARRAY_FORMAT_SPACE)(108112 call ! binary))
      (108119 'end of statement')
      unknown isjson[108129](108127 call &&(108122 call == arrayStyle QIO_ARRAY_FORMAT_JSON)(108125 call ! binary))
      (108132 'end of statement')
      unknown ischpl[108142](108140 call &&(108135 call == arrayStyle QIO_ARRAY_FORMAT_CHPL)(108138 call ! binary))
      (108145 'end of statement')
      unknown strType[108147] "type variable" idxSignedType
      unknown makeStridePositive[108176](108173 IfExpr (108161 call >(108157 call .(108156 call(108151 call . dom c"dsiDim") dim) c"stride") 0) then
      { scopeless
        (108165 call _cast strType 1)
      } else
      { scopeless
        (108171 call _cast strType(108168 call - 1))
      } )
      (108179 'end of statement')
      if(108256 call _cond_test(108182 call || isjson ischpl))
      {
        if(108250 call _cond_test(108189 call != dim(108187 call - rank 1)))
        {
          (108213 call <~> f(108192 'new'(108212 call ioLiteral "[\n")))
          (108223 call writeSpaces(108220 call + dim 1))
        }
        {
          (108247 call <~> f(108226 'new'(108246 call ioLiteral "[")))
        }
      }
      if(108579 call _cond_test(108265 call == dim(108263 call - rank 1)))
      {
        unknown first[108268] 1
        (108271 'end of statement')
        if(108298 call _cond_test(108280 call && debugDefaultDist(108277 call . f c"writing")))
        {
          (108296 call(108285 call . f c"writeln")(108294 call(108289 call . dom c"dsiDim") dim))
        }
        {
          unknown _indexOfInterest[108380] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[108381] "expr temp" "temp"
          (108390 'move' _iterator[108381](108388 call _getIterator(108312 call chpl_by(108310 call(108305 call . dom c"dsiDim") dim) makeStridePositive)))
          Defer
          {
            {
              (108413 call _freeIterator _iterator[108381])
            }
          }
          { scopeless type
            (108402 'move' _indexOfInterest[108380](108399 call iteratorIndex _iterator[108381]))
          }
          ForLoop[108382]
          {
            unknown j[108406] "index var" "insert auto destroy"
            (108408 'move' j[108406] _indexOfInterest[108380])
            {
              if(108354 call _cond_test first)
              {
                (108317 call = first 0)
              }
              {
                if(108348 call _cond_test isspace)
                {
                  (108327 call <~> f(108322 'new'(108326 call ioLiteral " ")))
                }
                {
                  if(108343 call _cond_test(108332 call || isjson ischpl))
                  {
                    (108340 call <~> f(108335 'new'(108339 call ioLiteral ", ")))
                  }
                }
              }
              (108366 call =(108364 call idx dim) j)
              (108377 call <~> f(108376 call(108371 call . arr c"dsiAccess") idx))
            }
            label _continueLabel[108385]
            _indexOfInterest[108380]
            _iterator[108381]
          }
          label _breakLabel[108386]
        }
      }
      {
        {
          unknown _indexOfInterest[108538] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[108539] "expr temp" "temp"
          (108548 'move' _iterator[108539](108546 call _getIterator(108429 call chpl_by(108427 call(108422 call . dom c"dsiDim") dim) makeStridePositive)))
          Defer
          {
            {
              (108571 call _freeIterator _iterator[108539])
            }
          }
          { scopeless type
            (108560 'move' _indexOfInterest[108538](108557 call iteratorIndex _iterator[108539]))
          }
          ForLoop[108540]
          {
            unknown j[108564] "index var" "insert auto destroy"
            (108566 'move' j[108564] _indexOfInterest[108538])
            {
              unknown lastIdx[108441](108438 call .(108437 call(108432 call . dom c"dsiDim") dim) c"last")
              (108444 'end of statement')
              (108451 call =(108449 call idx dim) j)
              (108485 call recursiveArrayWriter idx(dim =(108459 call + dim 1))(last =(108482 call &&(108467 call || last(108465 call == dim 0))(108480 call == j(108477 call .(108476 call(108471 call . dom c"dsiDim") dim) c"alignedHigh")))))
              if(108534 call _cond_test(108489 call || isjson ischpl))
              {
                if(108529 call _cond_test(108493 call != j lastIdx))
                {
                  (108517 call <~> f(108496 'new'(108516 call ioLiteral ",\n")))
                  (108527 call writeSpaces(108524 call + dim 1))
                }
              }
            }
            label _continueLabel[108543]
            _indexOfInterest[108538]
            _iterator[108539]
          }
          label _breakLabel[108544]
        }
      }
      if(108678 call _cond_test isspace)
      {
        if(108603 call _cond_test(108591 call &&(108585 call ! last)(108589 call != dim 0)))
        {
          (108599 call <~> f(108594 'new'(108598 call ioLiteral "\n")))
        }
      }
      {
        if(108674 call _cond_test(108610 call || isjson ischpl))
        {
          if(108668 call _cond_test(108617 call != dim(108615 call - rank 1)))
          {
            (108625 call <~> f(108620 'new'(108624 call ioLiteral "\n")))
            (108632 call writeSpaces dim)
            (108656 call <~> f(108635 'new'(108655 call ioLiteral "]")))
          }
          {
            (108665 call <~> f(108660 'new'(108664 call ioLiteral "]")))
          }
        }
      }
    }
    if(109429 call _cond_test(108737 call &&(108723 call &&(108708 call &&(108702 call &&(108692 call && 0(108690 call !(108687 call . f c"writing")))(108700 call !(108699 call(108695 call . f c"binary"))))(108706 call == rank 1))(108721 call ==(108717 call .(108716 call(108711 call . dom c"dsiDim") 0) c"stride") 1))(108735 call ==(108731 call .(108728 call . dom c"_arrs") c"size") 1)))
    {
      unknown binary[108745](108744 call(108740 call . f c"binary"))
      (108748 'end of statement')
      unknown arrayStyle[108757](108756 call(108751 call . f c"styleElement") QIO_STYLE_ELEMENT_ARRAY)
      (108760 'end of statement')
      unknown isspace[108770](108768 call &&(108763 call == arrayStyle QIO_ARRAY_FORMAT_SPACE)(108766 call ! binary))
      (108773 'end of statement')
      unknown isjson[108783](108781 call &&(108776 call == arrayStyle QIO_ARRAY_FORMAT_JSON)(108779 call ! binary))
      (108786 'end of statement')
      unknown ischpl[108796](108794 call &&(108789 call == arrayStyle QIO_ARRAY_FORMAT_CHPL)(108792 call ! binary))
      (108799 'end of statement')
      if(108814 call _cond_test(108802 call || isjson ischpl))
      {
        (108810 call <~> f(108805 'new'(108809 call ioLiteral "[")))
      }
      unknown first[108819] 1
      (108822 'end of statement')
      unknown offset[108833](108830 call .(108829 call(108824 call . dom c"dsiDim") 0) c"low")
      (108836 'end of statement')
      unknown i[108838] 0
      (108841 'end of statement')
      unknown read_end[108843] 0
      (108846 'end of statement')
      {
        unknown tmp[109079] "temp"
        (109097 'move' tmp[109079](109095 call _cond_test 1))
        WhileDo[109084]
        {
          {
            if(108954 call _cond_test first)
            {
              (108851 call = first 0)
              Try
              {
                {
                  if(108885 call _cond_test(108857 call || isjson ischpl))
                  {
                    (108865 call <~> f(108860 'new'(108864 call ioLiteral "]")))
                  }
                  {
                    if(108881 call _cond_test isspace)
                    {
                      (108877 call <~> f(108871 'new'(108876 call ioNewline(skipWhitespaceOnly = 1))))
                    }
                  }
                  (108893 call = read_end 1)
                  break nil[44]
                }
              }
              Catch err : BadFormatError
              {
                unknown tmp[354227] "temp"(354231 'dynamic_cast'(354229 'to nilable class'(354228 'to unmanaged class' BadFormatError))(354230 'current error'))
                if(354234 '!=' tmp[354227] nil[44])
                {
                  unknown err[354240](354245 'new'(354243 call _owned(354241 'to non nilable class' tmp[354227])))
                  {
                  }
                }
                {
                }
              }
            }
            {
              Try
              {
                {
                  if(108935 call _cond_test isspace)
                  {
                    (108914 call <~> f(108909 'new'(108913 call ioLiteral " ")))
                  }
                  {
                    if(108930 call _cond_test(108919 call || isjson ischpl))
                    {
                      (108927 call <~> f(108922 'new'(108926 call ioLiteral ",")))
                    }
                  }
                }
              }
              Catch err : BadFormatError
              {
                unknown tmp[354248] "temp"(354252 'dynamic_cast'(354250 'to nilable class'(354249 'to unmanaged class' BadFormatError))(354251 'current error'))
                if(354255 '!=' tmp[354248] nil[44])
                {
                  unknown err[354261](354266 'new'(354264 call _owned(354262 'to non nilable class' tmp[354248])))
                  {
                    break nil[44]
                  }
                }
                {
                }
              }
            }
            if(109056 call _cond_test(108970 call >= i(108967 call .(108966 call(108961 call . dom c"dsiDim") 0) c"size")))
            {
              unknown sz[108982](108979 call .(108978 call(108973 call . dom c"dsiDim") 0) c"size")
              (108985 'end of statement')
              if(108996 call _cond_test(108989 call < sz 4))
              {
                (108993 call = sz 4)
              }
              (109006 call = sz(109004 call * 2 sz))
              const newDom[109018] "const"(109016 call chpl__buildDomainExpr(109013 call #(109010 call chpl_build_low_bounded_range offset) sz))
              (109021 'end of statement')
              (109030 call(109025 call . arr c"dsiReallocate") newDom)
              (109045 call(109033 call . dom c"dsiSetIndices")(109043 call(109039 call . newDom c"getIndices")))
              (109054 call(109050 call . arr c"dsiPostReallocate"))
            }
            (109071 call <~> f(109070 call(109062 call . arr c"dsiAccess")(109067 call + offset i)))
            (109076 call += i 1)
          }
          label _continueLabel[109082]
          (109090 'move' tmp[109079](109088 call _cond_test 1))
          tmp[109079]
        }
        label _breakLabel[109083]
      }
      if(109122 call _cond_test(109101 call ! read_end))
      {
        if(109117 call _cond_test(109105 call || isjson ischpl))
        {
          (109113 call <~> f(109108 'new'(109112 call ioLiteral "]")))
        }
      }
      {
        const newDom[109135] "const"(109133 call chpl__buildDomainExpr(109130 call #(109127 call chpl_build_low_bounded_range offset) i))
        (109138 'end of statement')
        (109146 call(109141 call . arr c"dsiReallocate") newDom)
        (109159 call(109149 call . dom c"dsiSetIndices")(109157 call(109153 call . newDom c"getIndices")))
        (109166 call(109162 call . arr c"dsiPostReallocate"))
      }
    }
    {
      if(109425 call _cond_test(109213 call &&(109202 call &&(109199 call &&(109191 call &&(109182 call &&(109175 call(109171 call . arr c"isDefaultRectangular"))(109180 call !(109179 call chpl__isArrayView arr)))(109190 call _isSimpleIoType(109186 call . arr c"eltType")))(109198 call(109194 call . f c"binary"))) isNative)(109212 call(109207 call . arr c"isDataContiguous") dom)))
      {
        const elemSize[109222] "const"(109221 call c_sizeof(109217 call . arr c"eltType"))
        (109225 'end of statement')
        if(109303 call _cond_test boundsChecking)
        {
          unknown rw[109237](109234 IfExpr (109229 call . f c"writing") then
          { scopeless
            "write"
          } else
          { scopeless
            "read"
          } )
          (109240 'end of statement')
          (109301 call assert(109263 call <=(109254 call *(109248 call _cast uint[115](109244 call . dom c"dsiNumIndices"))(109252 call _cast uint[115] elemSize))(109261 call _cast uint[115](109259 call max ssize_t))) "length of array to " rw " is greater than ssize_t can hold")
        }
        const len[109311] "const"(109308 call . dom c"dsiNumIndices")
        (109314 'end of statement')
        const src[109319] "const"(109316 call . arr c"theData")
        (109322 'end of statement')
        const idx[109333] "const"(109332 call(109324 call . arr c"getDataIndex")(109328 call . dom c"dsiLow"))
        (109336 'end of statement')
        const size[109347] "const"(109345 call *(109339 call _cast ssize_t len)(109343 call _cast ssize_t elemSize))
        (109350 'end of statement')
        Try
        {
          {
            if(109395 call _cond_test(109352 call . f c"writing"))
            {
              (109372 call(109358 call . f c"writeBytes")(109369 call _ddata_shift(109363 call . arr c"eltType") src idx) size)
            }
            {
              (109392 call(109378 call . f c"readBytes")(109389 call _ddata_shift(109383 call . arr c"eltType") src idx) size)
            }
          }
        }
        Catch err : Error
        {
          unknown tmp[354269] "temp"(354272 'current error')
          unknown err[354275](354280 'new'(354278 call _owned(354276 'to non nilable class' tmp[354269])))
          {
            (109405 'throw' err)
          }
        }
      }
      {
        const zeroTup[109415] "const"(109413 call * rank idxType)
        (109418 'end of statement')
        (109423 call recursiveArrayWriter zeroTup)
      }
    }
  }
  function _unknown[51].dsiSerialWrite[109441](arg _mt[109446]:_MT[238], arg this[109443] :
  DefaultRectangularArr, arg f[109439]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (109451 call dsiSerialReadWrite f)
  }
  function _unknown[51].dsiSerialRead[109461](arg _mt[109466]:_MT[238], arg this[109463] :
  DefaultRectangularArr, arg f[109459]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (109471 call dsiSerialReadWrite f)
  }
  function _unknown[51].isDataContiguous[109481](arg _mt[109486]:_MT[238], arg this[109483] :
  DefaultRectangularArr, arg dom[109479]:_any[178](?)) : _unknown[51] "method"
  {
    if(109529 call _cond_test debugDefaultDistBulkTransfer)
    {
      (109527 call chpl_debug_writeln "isDataContiguous(): off=" off " blk=" blk)
    }
    if(109548 call _cond_test(109543 call !=(109541 call blk(109538 call - rank 1)) 1))
    {
      (109546 return 0)
    }
    if(109651 call _cond_test(109555 call >= rank 2))
    {
      const domDims[109565] "const"(109564 call(109560 call . dom c"dsiDims"))
      (109568 'end of statement')
      {
        unknown dim[109615] 0
        unknown tmp[109616] "maybe param" "temp"
        (109627 'move' tmp[109616](109625 call chpl_compute_low_param_loop_bound 0(109573 call - rank 2)))
        unknown tmp[109617] "maybe param" "temp"
        (109637 'move' tmp[109617](109635 call chpl_compute_high_param_loop_bound 0(109632 call - rank 2)))
        unknown tmp[109618] "maybe param" "temp"
        (109640 'move' tmp[109618](109578 call - 1))
        ParamForLoop[109642]
        { dim[109615] tmp[109616] tmp[109617] tmp[109618]
          if(109610 call _cond_test(109605 call !=(109585 call blk dim)(109603 call *(109592 call blk(109589 call + dim 1))(109600 call .(109599 call domDims(109596 call + dim 1)) c"size"))))
          {
            (109608 return 0)
          }
        }
        label _unused_continueLabel[109620]
        label _breakLabel[109619]
      }
    }
    if(109677 call _cond_test debugDefaultDistBulkTransfer)
    {
      (109675 call chpl_debug_writeln "\tYES!")
    }
    (109683 return 1)
  }
  function _canDoSimpleTransfer[109691](arg A[109689]:_any[178](?), arg aView[109693]:_any[178](?), arg B[109695]:_any[178](?), arg bView[109697]:_any[178](?)) : _unknown[51] "private"
  {
    if(109756 call _cond_test(109723 call ||(109709 call !(109708 call(109700 call . A c"isDataContiguous")(109704 call . aView c"_value")))(109721 call !(109720 call(109712 call . B c"isDataContiguous")(109716 call . bView c"_value")))))
    {
      if(109747 call _cond_test debugDefaultDistBulkTransfer)
      {
        (109745 call chpl_debug_writeln "isDataContiguous return False")
      }
      (109754 return 0)
    }
    (109762 return 1)
  }
  function _canDoComplexTransfer[109770](arg A[109768]:_any[178](?), arg aView[109772]:_any[178](?), arg B[109774]:_any[178](?), arg bView[109776]:_any[178](?)) : _unknown[51] "private"
  {
    (109779 return useBulkTransferStride)
  }
  function _unknown[51].doiCanBulkTransferRankChange[109787](arg _mt[109792]:_MT[238], arg this[109789] :
  DefaultRectangularArr) param : _unknown[51] "method" "method overrides"
  {
    (109795 return 1)
  }
  function _unknown[51].doiBulkTransferToKnown[109805](arg _mt[109816]:_MT[238], arg this[109813] :
  DefaultRectangularArr, arg srcDom[109803]:_any[178](?), arg destClass[109808] :
  DefaultRectangularArr, arg destDom[109811]:_any[178](?)) : _unknown[51] "method"
  {
    (109826 return(109825 call transferHelper destClass destDom this srcDom))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[109837](arg _mt[109848]:_MT[238], arg this[109845] :
  DefaultRectangularArr, arg destDom[109835]:_any[178](?), arg srcClass[109840] :
  DefaultRectangularArr, arg srcDom[109843]:_any[178](?)) : _unknown[51] "method"
  {
    (109858 return(109857 call transferHelper this destDom srcClass srcDom))
  }
  { scopeless type
    bool[10]
  }
  function transferHelper[109868](arg A[109866]:_any[178](?), arg aView[109870]:_any[178](?), arg B[109872]:_any[178](?), arg bView[109874]:_any[178](?)) : _unknown[51] "private"
  {
    if(110001 call _cond_test(109912 call &&(109903 call &&(109885 call ==(109878 call . A c"rank")(109882 call . B c"rank"))(109901 call &&(109892 call ==(109888 call . aView c"stridable") 0)(109899 call ==(109895 call . bView c"stridable") 0)))(109911 call _canDoSimpleTransfer A aView B bView)))
    {
      if(109936 call _cond_test debugDefaultDistBulkTransfer)
      {
        (109934 call chpl_debug_writeln "Performing simple DefaultRectangular transfer")
      }
      (109948 call _simpleTransfer A aView B bView)
    }
    {
      if(109997 call _cond_test(109956 call _canDoComplexTransfer A aView B bView))
      {
        if(109979 call _cond_test debugDefaultDistBulkTransfer)
        {
          (109977 call chpl_debug_writeln "Performing complex DefaultRectangular transfer")
        }
        (109991 call complexTransfer A aView B bView)
      }
      {
        (109994 return 0)
      }
    }
    (110008 return 1)
  }
  { scopeless type
    bool[10]
  }
  function _simpleTransfer[110017](arg A[110015]:_any[178](?), arg aView[110019]:_any[178](?), arg B[110021]:_any[178](?), arg bView[110023]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown rank[110029] "param"(110026 call . A c"rank")
    (110032 'end of statement')
    unknown idxType[110038] "type variable"(110035 call . A c"idxType")
    const Adims[110047] "const"(110046 call(110042 call . aView c"dims"))
    (110050 'end of statement')
    unknown Alo[110058](110056 call * rank(110053 call . aView c"idxType"))
    (110061 'end of statement')
    {
      unknown i[110083] 0
      unknown tmp[110084] "maybe param" "temp"
      (110096 'move' tmp[110084](110094 call chpl_compute_low_param_loop_bound 0(110065 call - rank 1)))
      unknown tmp[110085] "maybe param" "temp"
      (110106 'move' tmp[110085](110104 call chpl_compute_high_param_loop_bound 0(110101 call - rank 1)))
      unknown tmp[110086] "maybe param" "temp"
      (110109 'move' tmp[110086] 1)
      ParamForLoop[110111]
      { i[110083] tmp[110084] tmp[110085] tmp[110086]
        (110080 call =(110072 call Alo i)(110077 call .(110076 call Adims i) c"first"))
      }
      label _unused_continueLabel[110088]
      label _breakLabel[110087]
    }
    const Bdims[110126] "const"(110125 call(110121 call . bView c"dims"))
    (110129 'end of statement')
    unknown Blo[110137](110135 call * rank(110132 call . B c"idxType"))
    (110140 'end of statement')
    {
      unknown i[110162] 0
      unknown tmp[110163] "maybe param" "temp"
      (110175 'move' tmp[110163](110173 call chpl_compute_low_param_loop_bound 0(110144 call - rank 1)))
      unknown tmp[110164] "maybe param" "temp"
      (110185 'move' tmp[110164](110183 call chpl_compute_high_param_loop_bound 0(110180 call - rank 1)))
      unknown tmp[110165] "maybe param" "temp"
      (110188 'move' tmp[110165] 1)
      ParamForLoop[110190]
      { i[110162] tmp[110163] tmp[110164] tmp[110165]
        (110159 call =(110151 call Blo i)(110156 call .(110155 call Bdims i) c"first"))
      }
      label _unused_continueLabel[110167]
      label _breakLabel[110166]
    }
    const len[110209] "const"(110208 call(110203 call .(110200 call . aView c"size") c"safeCast") size_t)
    (110212 'end of statement')
    if(110219 call _cond_test(110215 call == len 0))
    {
      (110217 return _void[55])
    }
    if(110340 call _cond_test debugBulkTransfer)
    {
      function sizeof[110229](arg x[110227]:_any[178](?)) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
      {
      }
      { scopeless type
        int[13]
      }
      const elemSize[110243] "const"(110242 call sizeof(110238 call . B c"eltType"))
      (110246 'end of statement')
      (110338 call chpl_debug_writeln "In DefaultRectangular._simpleTransfer():" " Alo=" Alo ", Blo=" Blo ", len=" len ", elemSize=" elemSize)
    }
    const Aidx[110351] "const"(110350 call(110345 call . A c"getDataIndex") Alo)
    (110354 'end of statement')
    const Adata[110367] "const"(110366 call _ddata_shift(110357 call . A c"eltType")(110362 call . A c"theData") Aidx)
    (110370 'end of statement')
    const Bidx[110378] "const"(110377 call(110372 call . B c"getDataIndex") Blo)
    (110381 'end of statement')
    const Bdata[110394] "const"(110393 call _ddata_shift(110384 call . B c"eltType")(110389 call . B c"theData") Bidx)
    (110397 'end of statement')
    (110405 call _simpleTransferHelper A B Adata Bdata len)
  }
  function _simpleTransferHelper[110413](arg A[110411]:_any[178](?), arg B[110415]:_any[178](?), arg Adata[110417]:_any[178](?), arg Bdata[110419]:_any[178](?), arg len[110421]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(110429 call _cond_test(110425 call == Adata Bdata))
    {
      (110427 return _void[55])
    }
    if(110667 call _cond_test(110444 call ==(110439 '_wide_get_node' Adata)(110441 call . here c"id")))
    {
      if(110473 call _cond_test debugDefaultDistBulkTransfer)
      {
        (110471 call chpl_debug_writeln "\tlocal get() from "(110470 '_wide_get_node' B))
      }
      (110495 'chpl_comm_array_get'(110484 call Adata 0)(110489 '_wide_get_node' Bdata)(110493 call Bdata 0) len)
    }
    {
      if(110662 call _cond_test(110506 call ==(110501 '_wide_get_node' Bdata)(110503 call . here c"id")))
      {
        if(110535 call _cond_test debugDefaultDistBulkTransfer)
        {
          (110533 call chpl_debug_writeln "\tlocal put() to "(110532 '_wide_get_node' A))
        }
        (110573 'chpl_comm_array_put'(110562 call Bdata 0)(110567 '_wide_get_node' Adata)(110571 call Adata 0) len)
      }
      {
        const tmp[110654] "const" "temp"
        (110656 'move' tmp[110654](110652 'deref'(110651 '_wide_get_locale'(110577 call chpl_localeID_to_locale(110576 '_wide_get_locale' Adata)))))
        {
          {
            if(110627 call _cond_test debugDefaultDistBulkTransfer)
            {
              (110625 call chpl_debug_writeln "\tremote get() on "(110600 call . here c"id") " from "(110624 '_wide_get_node' B))
            }
            (110649 'chpl_comm_array_get'(110638 call Adata 0)(110643 '_wide_get_node' Bdata)(110647 call Bdata 0) len)
          }
          (110659 'on block' 0 tmp[110654])
        }
      }
    }
  }
  function complexTransfer[110678](arg A[110676]:_any[178](?), arg aView[110680]:_any[178](?), arg B[110682]:_any[178](?), arg bView[110684]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(110786 call _cond_test(110714 call &&(110698 call !=(110693 '_wide_get_node'(110687 call . A c"data"))(110695 call . here c"id"))(110712 call !=(110707 '_wide_get_node'(110701 call . B c"data"))(110709 call . here c"id"))))
    {
      if(110749 call _cond_test debugDefaultDistBulkTransfer)
      {
        (110746 call chpl_debug_writeln "BulkTransferStride: Both arrays on different locale, moving to locale of destination: LOCALE"(110745 '_wide_get_node'(110739 call . A c"data")))
      }
      const tmp[110769] "const" "temp"
      (110771 'move' tmp[110769](110767 'deref'(110766 '_wide_get_locale'(110755 call . A c"data"))))
      {
        (110764 call complexTransferCore A aView B bView)
        (110774 'on block' 0 tmp[110769])
      }
    }
    {
      (110783 call complexTransferCore A aView B bView)
    }
  }
  function complexTransferCore[110797](arg LHS[110795]:_any[178](?), arg LViewDom[110799]:_any[178](?), arg RHS[110801]:_any[178](?), arg RViewDom[110803]:_any[178](?)) : _unknown[51] "private"
  {
    unknown minRank[110816] "param"(110815 call min(110807 call . LHS c"rank")(110812 call . RHS c"rank"))
    (110819 'end of statement')
    unknown idxType[110825] "type variable"(110822 call . LHS c"idxType")
    unknown intIdxType[110832] "type variable"(110829 call . LHS c"intIdxType")
    if(110917 call _cond_test debugDefaultDistBulkTransfer)
    {
      (110874 call writeln "Transferring views :" LViewDom " <-- " RViewDom)
      (110915 call writeln "Original domains   :"(110904 call(110900 call .(110897 call . LHS c"dom") c"dsiDims")) " <-- "(110914 call(110910 call .(110907 call . RHS c"dom") c"dsiDims")))
    }
    const LeftDims[110927] "const"(110926 call(110922 call . LViewDom c"dims"))
    (110930 'end of statement')
    const RightDims[110937] "const"(110936 call(110932 call . RViewDom c"dims"))
    (110940 'end of statement')
    const tmp[110953] "const" "temp"(110952 call bulkCommComputeActiveDims LeftDims RightDims)
    (110963 call _check_tuple_var_decl tmp[110953] 3)
    const LeftActives[110941] "const"(110954 call tmp[110953] 0)
    const RightActives[110943] "const"(110957 call tmp[110953] 1)
    const inferredRank[110945] "const"(110960 call tmp[110953] 2)
    (110968 'end of statement')
    unknown DimSizes[110986](110984 call chpl__buildArrayRuntimeType(110982 call chpl__ensureDomainExpr(110971 call chpl_build_bounded_range 1 inferredRank))(110981 'typeof'(110978 call .(110977 call LeftDims 0) c"size")))
    (110989 'end of statement')
    {
      unknown _indexOfInterest[111021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111022] "expr temp" "temp"
      (111031 'move' _iterator[111022](111029 call _getIterator(111036 call chpl_direct_range_iter 1 inferredRank 1)))
      Defer
      {
        {
          (111052 call _freeIterator _iterator[111022])
        }
      }
      { scopeless type
        (111041 'move' _indexOfInterest[111021](111038 call iteratorIndex _iterator[111022]))
      }
      ForLoop[111023]
      {
        unknown i[111045] "index var" "insert auto destroy"
        (111047 'move' i[111045] _indexOfInterest[111021])
        {
          const dimIdx[111002] "const"(111001 call LeftActives(110998 call - i 1))
          (111005 'end of statement')
          (111018 call =(111010 call DimSizes i)(111015 call .(111014 call LeftDims dimIdx) c"size"))
        }
        label _continueLabel[111026]
        _indexOfInterest[111021]
        _iterator[111022]
      }
      label _breakLabel[111027]
    }
    if(111083 call _cond_test debugDefaultDistBulkTransfer)
    {
      (111080 call writeln "inferredRank = " inferredRank)
    }
    (111110 call assert(111090 call <= inferredRank minRank) "complex DR transfer: computed rank greater than minimum rank!")
    unknown LBlk[111112](111117 call * minRank intIdxType)
    unknown RBlk[111119](111123 'typeof' LBlk)
    (111124 'end of statement')
    {
      {
        unknown _indexOfInterest[111246] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[111247] "expr temp" "temp"
        (111256 'move' _iterator[111247](111254 call _getIterator(111267 call chpl_direct_range_iter 1 inferredRank(111263 call - 1))))
        Defer
        {
          {
            (111283 call _freeIterator _iterator[111247])
          }
        }
        { scopeless type
          (111272 'move' _indexOfInterest[111246](111269 call iteratorIndex _iterator[111247]))
        }
        ForLoop[111248]
        {
          unknown idx[111276] "index var" "insert auto destroy"
          (111278 'move' idx[111276] _indexOfInterest[111246])
          {
            const li[111142] "const"(111141 call LeftActives(111138 call - idx 1))
            (111145 'end of statement')
            (111188 call =(111153 call LBlk(111150 call - idx 1))(111186 call *(111160 call(111155 call . LHS c"blk") li)(111184 call _cast intIdxType(111181 call /(111165 call .(111164 call LeftDims li) c"stride")(111178 call .(111177 call(111172 call .(111169 call . LHS c"dom") c"dsiDim") li) c"stride")))))
            const ri[111198] "const"(111197 call RightActives(111194 call - idx 1))
            (111201 'end of statement')
            (111243 call =(111208 call RBlk(111205 call - idx 1))(111241 call *(111215 call(111210 call . RHS c"blk") ri)(111239 call _cast intIdxType(111236 call /(111220 call .(111219 call RightDims ri) c"stride")(111233 call .(111232 call(111227 call .(111224 call . RHS c"dom") c"dsiDim") ri) c"stride")))))
          }
          label _continueLabel[111251]
          _indexOfInterest[111246]
          _iterator[111247]
        }
        label _breakLabel[111252]
      }
    }
    if(111337 call _cond_test debugDefaultDistBulkTransfer)
    {
      (111312 call writeln "LBlk = " LBlk)
      (111335 call writeln "RBlk = " RBlk)
    }
    unknown stridelevels[111342] 0
    (111345 'end of statement')
    unknown countDom[111356](111354 call chpl__buildDomainExpr(111351 call chpl_build_bounded_range 1(111349 call + inferredRank 1)))
    (111359 'end of statement')
    unknown count[111367](111365 call chpl__buildArrayRuntimeType(111363 call chpl__ensureDomainExpr countDom) size_t)
    (111370 'end of statement')
    {
      unknown _indexOfInterest[111378] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111379] "expr temp" "temp"
      (111388 'move' _iterator[111379](111386 call _getIterator count))
      Defer
      {
        {
          (111404 call _freeIterator _iterator[111379])
        }
      }
      { scopeless type
        (111393 'move' _indexOfInterest[111378](111390 call iteratorIndex _iterator[111379]))
      }
      ForLoop[111380]
      {
        unknown c[111397] "index var" "insert auto destroy"
        (111399 'move' c[111397] _indexOfInterest[111378])
        (111375 call = c 1)
        label _continueLabel[111383]
        _indexOfInterest[111378]
        _iterator[111379]
      }
      label _breakLabel[111384]
    }
    unknown strideDom[111418](111416 call chpl__buildDomainExpr(111413 call chpl_build_bounded_range 1 inferredRank))
    (111421 'end of statement')
    unknown dstStride[111422](111430 call chpl__buildArrayRuntimeType(111428 call chpl__ensureDomainExpr strideDom) size_t)
    unknown srcStride[111432](111436 'typeof' dstStride)
    (111437 'end of statement')
    if(111514 call _cond_test(111458 call ||(111446 call >(111444 call LBlk(111441 call - inferredRank 1)) 1)(111456 call >(111454 call RBlk(111451 call - inferredRank 1)) 1)))
    {
      (111462 call += stridelevels 1)
      (111471 call =(111469 call count stridelevels) 1)
      (111491 call =(111477 call dstStride stridelevels)(111490 call(111485 call .(111484 call LBlk(111481 call - inferredRank 1)) c"safeCast") size_t))
      (111511 call =(111497 call srcStride stridelevels)(111510 call(111505 call .(111504 call RBlk(111501 call - inferredRank 1)) c"safeCast") size_t))
    }
    {
      unknown _indexOfInterest[111624] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111625] "expr temp" "temp"
      (111634 'move' _iterator[111625](111632 call _getIterator(111645 call chpl_direct_range_iter 2 inferredRank(111641 call - 1))))
      Defer
      {
        {
          (111661 call _freeIterator _iterator[111625])
        }
      }
      { scopeless type
        (111650 'move' _indexOfInterest[111624](111647 call iteratorIndex _iterator[111625]))
      }
      ForLoop[111626]
      {
        unknown i[111654] "index var" "insert auto destroy"
        (111656 'move' i[111654] _indexOfInterest[111624])
        {
          (111545 call *=(111534 call count(111531 call + stridelevels 1))(111544 call(111539 call .(111538 call DimSizes i) c"safeCast") size_t))
          const bothReuse[111567] "const"(111565 call &&(111556 call canReuseStride LBlk i stridelevels count dstStride)(111564 call canReuseStride RBlk i stridelevels count srcStride))
          (111570 'end of statement')
          if(111620 call _cond_test(111572 call ! bothReuse))
          {
            (111576 call += stridelevels 1)
            (111597 call =(111583 call dstStride stridelevels)(111596 call(111591 call .(111590 call LBlk(111587 call - i 2)) c"safeCast") size_t))
            (111617 call =(111603 call srcStride stridelevels)(111616 call(111611 call .(111610 call RBlk(111607 call - i 2)) c"safeCast") size_t))
          }
        }
        label _continueLabel[111629]
        _indexOfInterest[111624]
        _iterator[111625]
      }
      label _breakLabel[111630]
    }
    (111685 call *=(111674 call count(111671 call + stridelevels 1))(111684 call(111679 call .(111678 call DimSizes 1) c"safeCast") size_t))
    (111711 call assert(111691 call <= stridelevels inferredRank) "BulkTransferStride: stride levels greater than rank.")
    if(111773 call _cond_test(111715 call == stridelevels 0))
    {
      (111771 call assert(111726 call ==(111721 call count 1)(111723 call . LViewDom c"size")) "BulkTransferStride: bulk-count incorrect for stride level of 0: "(111749 call count 1) " != "(111768 call . LViewDom c"size"))
    }
    (111789 call = countDom(111787 call chpl__buildDomainExpr(111784 call chpl_build_bounded_range 1(111782 call + stridelevels 1))))
    (111800 call = strideDom(111798 call chpl__buildDomainExpr(111795 call chpl_build_bounded_range 1 stridelevels)))
    function getFirstIdx[111807](arg dims[111805]:_any[178](?)) : _unknown[51]
    {
      unknown ret[111822](111820 call *(111810 call . dims c"size")(111817 call .(111816 call dims 0) c"idxType"))
      (111825 'end of statement')
      {
        unknown i[111871] 0
        unknown tmp[111872] "maybe param" "temp"
        (111884 'move' tmp[111872](111882 call chpl_compute_low_param_loop_bound 0(111833 call -(111829 call . dims c"size") 1)))
        unknown tmp[111873] "maybe param" "temp"
        (111897 'move' tmp[111873](111895 call chpl_compute_high_param_loop_bound 0(111889 call -(111891 call . dims c"size") 1)))
        unknown tmp[111874] "maybe param" "temp"
        (111900 'move' tmp[111874] 1)
        ParamForLoop[111902]
        { i[111871] tmp[111872] tmp[111873] tmp[111874]
          (111868 call =(111840 call ret i)(111865 IfExpr (111849 call <(111845 call .(111844 call dims i) c"stride") 0) then
          { scopeless
            (111855 call .(111854 call dims i) c"last")
          } else
          { scopeless
            (111862 call .(111861 call dims i) c"first")
          } ))
        }
        label _unused_continueLabel[111876]
        label _breakLabel[111875]
      }
      (111912 return ret)
    }
    const LFirst[111920] "const"(111919 call getFirstIdx LeftDims)
    (111923 'end of statement')
    const RFirst[111928] "const"(111927 call getFirstIdx RightDims)
    (111931 'end of statement')
    (111948 call complexTransferComm LHS RHS(111941 call _cast(111940 call int[13] 32) stridelevels) dstStride srcStride count LFirst RFirst)
  }
  function complexTransferComm[111956](arg A[111954]:_any[178](?), arg B[111958]:_any[178](?), arg stridelevels[111964] :
  (111963 call int[13] 32), arg dstStride[111967]:_any[178](?), arg srcStride[111969]:_any[178](?), arg count[111971]:_any[178](?), arg AFirst[111973]:_any[178](?), arg BFirst[111975]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(112112 call _cond_test debugDefaultDistBulkTransfer)
    {
      (112109 call chpl_debug_writeln "BulkTransferStride with values:\n" "\tLocale        = "(112020 call stringify(112016 call . here c"id")) "\n" "\tStride levels = "(112042 call stringify stridelevels) "\n" "\tdstStride     = "(112064 call stringify dstStride) "\n" "\tsrcStride     = "(112086 call stringify srcStride) "\n" "\tcount         = "(112108 call stringify count))
    }
    const AO[112126] "const"(112125 call(112118 call . A c"getDataIndex") AFirst(getShifted = 0))
    (112129 'end of statement')
    const BO[112139] "const"(112138 call(112131 call . B c"getDataIndex") BFirst(getShifted = 0))
    (112142 'end of statement')
    const dest[112147] "const"(112144 call . A c"data")
    (112150 'end of statement')
    const src[112155] "const"(112152 call . B c"data")
    (112158 'end of statement')
    const dststr[112166] "const"(112163 call .(112160 call . dstStride c"_value") c"data")
    (112169 'end of statement')
    const srcstr[112177] "const"(112174 call .(112171 call . srcStride c"_value") c"data")
    (112180 'end of statement')
    const cnt[112188] "const"(112185 call .(112182 call . count c"_value") c"data")
    (112191 'end of statement')
    if(112439 call _cond_test(112201 call ==(112196 '_wide_get_node' dest)(112198 call . here c"id")))
    {
      const srclocale[112214] "const"(112212 call _cast(112211 call int[13] 32)(112207 '_wide_get_node' src))
      (112217 'end of statement')
      if(112243 call _cond_test debugBulkTransfer)
      {
        (112240 call chpl_debug_writeln "BulkTransferStride: On LHS - GET from " srclocale)
      }
      (112287 'chpl_comm_get_strd'(112268 call dest AO)(112272 call dststr 0) srclocale(112277 call src BO)(112281 call srcstr 0)(112285 call cnt 0) stridelevels)
    }
    {
      const destlocale[112300] "const"(112298 call _cast(112297 call int[13] 32)(112293 '_wide_get_node' dest))
      (112303 'end of statement')
      if(112365 call _cond_test debugDefaultDistBulkTransfer)
      {
        (112362 call assert(112316 call ==(112311 '_wide_get_node' src)(112313 call . here c"id")) "BulkTransferStride: Expected to be on "(112340 '_wide_get_node' src) ", actually on "(112359 call . here c"id"))
      }
      if(112393 call _cond_test debugBulkTransfer)
      {
        (112390 call chpl_debug_writeln "BulkTransferStride: On RHS - PUT to " destlocale)
      }
      (112437 'chpl_comm_put_strd'(112418 call dest AO)(112422 call dststr 0) destlocale(112427 call src BO)(112431 call srcstr 0)(112435 call cnt 0) stridelevels)
    }
  }
  function _unknown[51].isDefaultRectangular[112448](arg _mt[112453]:_MT[238], arg this[112450] :
  DefaultRectangularArr) param : _unknown[51] "method" "method overrides"
  {
    (112456 return 1)
  }
  function _unknown[51].isDefaultRectangular[112464](arg _mt[112469]:_MT[238], arg this[112466] :
  DefaultRectangularArr) param : _unknown[51] "method"
  {
    (112472 return 1)
  }
  unknown debugDRScan[112478] "config" "param" 0
  (112481 'end of statement')
  function _unknown[51].doiScan[112487](arg _mt[112494]:_MT[238], arg this[112491] :
  DefaultRectangularArr, arg op[112485]:_any[178](?), arg dom[112489]:_any[178](?)) : _unknown[51] "method"
  {
    (112507 'use' RangeChunk)
    unknown resType[112517] "type variable"(112516 'typeof'(112515 call(112511 call . op c"generate")))
    unknown res[112527](112525 call chpl__buildArrayRuntimeType(112523 call chpl__ensureDomainExpr dom) resType)
    (112530 'end of statement')
    unknown tmp[112551] "temp"(112550 call(112543 call . this c"chpl__preScan") op res dom)
    (112561 call _check_tuple_var_decl tmp[112551] 4)
    unknown numTasks[112531](112552 call tmp[112551] 0)
    unknown rngs[112533](112555 call tmp[112551] 1)
    unknown state[112535](112558 call tmp[112551] 2)
    (112566 'end of statement')
    (112579 call(112570 call . this c"chpl__postScan") op res numTasks rngs state)
    (112583 call chpl__delete op)
    (112587 return res)
  }
  where {
    (112504 call &&(112498 call == rank 1)(112503 call chpl__scanStateResTypesMatch op))
  }
  function _unknown[51].doiSwap[112597](arg _mt[112602]:_MT[238], arg this[112599] :
  DefaultRectangularArr, arg arr[112595]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (112612 call <=>(112605 call . this c"data")(112609 call . arr c"data"))
    (112621 call(112617 call . this c"initShiftedData"))
    (112628 call(112624 call . arr c"initShiftedData"))
  }
  function _unknown[51].chpl__preScan[112637](arg _mt[112652]:_MT[238], arg this[112649] :
  DefaultRectangularArr, arg op[112635]:_any[178](?), arg res[112644] :
  (112641 call chpl__buildArrayRuntimeType nil[44] unknown resType[112639]), arg dom[112647]:_any[178](?)) : _unknown[51] "method"
  {
    (112655 'import' RangeChunk)
    const rng[112667] "const"(112666 call(112661 call . dom c"dim") 0)
    (112670 'end of statement')
    const numTasks[112685] "const"(112682 IfExpr (112673 'task_get_serial') then
    { scopeless
      1
    } else
    { scopeless
      (112681 call _computeNumChunks(112677 call . rng c"size"))
    } )
    (112688 'end of statement')
    const rngs[112699] "const"(112698 call(112692 call . RangeChunk c"chunks") rng numTasks)
    (112702 'end of statement')
    if(112766 call _cond_test debugDRScan)
    {
      (112741 call writeln "Using " numTasks " tasks")
      (112764 call writeln "Whose chunks are: " rngs)
    }
    unknown state[112780](112778 call chpl__buildArrayRuntimeType(112776 call chpl__ensureDomainExpr(112771 call . rngs c"indices")) resType)
    (112783 'end of statement')
    if(112974 call _cond_test(112786 call == numTasks 1))
    {
      (112797 call preScanChunk(112793 call .(112790 call . rngs c"indices") c"low"))
    }
    {
      {
        unknown tmpIter[112811] "expr temp" "maybe ref" "no copy" "temp"
        (112814 'move' tmpIter[112811](112802 call . rngs c"indices"))
        unknown isRngDomArr[112954] "maybe param" "temp"
        (112969 'move' isRngDomArr[112954](112967 call ||(112956 call isBoundedRange tmpIter[112811])(112965 call ||(112959 call isDomain tmpIter[112811])(112962 call isArray tmpIter[112811]))))
        if isRngDomArr[112954]
        {
          const _coforallCount[112821] "const" "end count" "temp"
          (112890 'move' _coforallCount[112821](112887 call _endCountAlloc 1))
          unknown numTasks[112822] "temp"
          (112874 'move' numTasks[112822](112870 call . tmpIter[112811] c"size"))
          (112865 call _upEndCount _coforallCount[112821] 1 numTasks[112822])
          (112862 call chpl_resetTaskSpawn numTasks[112822])
          unknown _indexOfInterest[112829] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[112830] "expr temp" "temp"
          (112839 'move' _iterator[112830](112837 call _getIterator tmpIter[112811]))
          Defer
          {
            {
              (112855 call _freeIterator _iterator[112830])
            }
          }
          { scopeless type
            (112844 'move' _indexOfInterest[112829](112841 call iteratorIndex _iterator[112830]))
          }
          ForLoop[112831]
          {
            unknown tid[112848] "coforall index var" "index var" "insert auto destroy"
            (112850 'move' tid[112848] _indexOfInterest[112829])
            {
              {
                (112818 call preScanChunk tid)
              }
              (112824 call _downEndCount _coforallCount[112821] nil[44])
              (112823 'coforall loop')
            }
            label _continueLabel[112834]
            _indexOfInterest[112829]
            _iterator[112830]
          }
          label _breakLabel[112835]
          Defer
          {
            {
              (112877 call _endCountFree _coforallCount[112821])
            }
          }
          (112882 call _waitEndCount _coforallCount[112821] 1 numTasks[112822])
        }
        {
          const _coforallCount[112894] "const" "end count" "temp"
          (112951 'move' _coforallCount[112894](112948 call _endCountAlloc 1))
          unknown _indexOfInterest[112902] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[112903] "expr temp" "temp"
          (112912 'move' _iterator[112903](112910 call _getIterator tmpIter[112811]))
          Defer
          {
            {
              (112928 call _freeIterator _iterator[112903])
            }
          }
          { scopeless type
            (112917 'move' _indexOfInterest[112902](112914 call iteratorIndex _iterator[112903]))
          }
          ForLoop[112904]
          {
            unknown tid[112921] "coforall index var" "index var" "insert auto destroy"
            (112923 'move' tid[112921] _indexOfInterest[112902])
            (112935 call _upEndCount _coforallCount[112894] 1)
            {
              {
                (112808 call preScanChunk tid)
              }
              (112897 call _downEndCount _coforallCount[112894] nil[44])
              (112896 'coforall loop')
            }
            label _continueLabel[112907]
            _indexOfInterest[112902]
            _iterator[112903]
          }
          label _breakLabel[112908]
          Defer
          {
            {
              (112939 call _endCountFree _coforallCount[112894])
            }
          }
          (112944 call _waitEndCount _coforallCount[112894] 1)
        }
      }
    }
    function preScanChunk[112982](arg tid[112980]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      const current[112985] "const" resType
      (112988 'end of statement')
      const myop[112996] "const"(112995 call(112991 call . op c"clone"))
      (112999 'end of statement')
      {
        unknown _indexOfInterest[113035] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[113036] "expr temp" "temp"
        (113045 'move' _iterator[113036](113043 call _getIterator(113004 call rngs tid)))
        Defer
        {
          {
            (113062 call _freeIterator _iterator[113036])
          }
        }
        { scopeless type
          (113051 'move' _indexOfInterest[113035](113048 call iteratorIndex _iterator[113036]))
        }
        ForLoop[113037]
        {
          unknown i[113055] "index var" "insert auto destroy"
          (113057 'move' i[113055] _indexOfInterest[113035])
          {
            unknown elem[113009] "ref var"(113008 call dsiAccess i)
            (113012 'end of statement')
            (113020 call(113015 call . myop c"accumulate") elem)
            (113032 call =(113025 call res i)(113031 call(113027 call . myop c"generate")))
          }
          label _continueLabel[113040]
          _indexOfInterest[113035]
          _iterator[113036]
        }
        label _breakLabel[113041]
      }
      (113083 call =(113072 call state tid)(113082 call res(113078 call .(113077 call rngs tid) c"high")))
      (113088 call chpl__delete myop)
    }
    if(113139 call _cond_test debugDRScan)
    {
      (113114 call writeln "res = " res)
      (113137 call writeln "state = " state)
    }
    const metaop[113149] "const"(113148 call(113144 call . op c"clone"))
    (113152 'end of statement')
    unknown next[113158](113155 call . metaop c"identity") resType
    (113161 'end of statement')
    {
      unknown _indexOfInterest[113190] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[113191] "expr temp" "temp"
      (113200 'move' _iterator[113191](113198 call _getIterator(113164 call . rngs c"indices")))
      Defer
      {
        {
          (113217 call _freeIterator _iterator[113191])
        }
      }
      { scopeless type
        (113206 'move' _indexOfInterest[113190](113203 call iteratorIndex _iterator[113191]))
      }
      ForLoop[113192]
      {
        unknown i[113210] "index var" "insert auto destroy"
        (113212 'move' i[113210] _indexOfInterest[113190])
        {
          (113172 call <=>(113170 call state i) next)
          (113188 call(113179 call . metaop c"accumulateOntoState") next(113187 call state i))
        }
        label _continueLabel[113195]
        _indexOfInterest[113190]
        _iterator[113191]
      }
      label _breakLabel[113196]
    }
    (113226 call chpl__delete metaop)
    if(113236 call _cond_test debugDRScan)
    {
      (113234 call writeln "state = " state)
    }
    (113248 return(113246 call _build_tuple numTasks rngs state next))
  }
  function _unknown[51].chpl__postScan[113257](arg _mt[113270]:_MT[238], arg this[113267] :
  DefaultRectangularArr, arg op[113255]:_any[178](?), arg res[113259]:_any[178](?), arg numTasks[113261]:_any[178](?), arg rngs[113263]:_any[178](?), arg state[113265]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(113462 call _cond_test(113274 call == numTasks 1))
    {
      (113285 call postScanChunk(113281 call .(113278 call . rngs c"indices") c"low"))
    }
    {
      {
        unknown tmpIter[113299] "expr temp" "maybe ref" "no copy" "temp"
        (113302 'move' tmpIter[113299](113290 call . rngs c"indices"))
        unknown isRngDomArr[113442] "maybe param" "temp"
        (113457 'move' isRngDomArr[113442](113455 call ||(113444 call isBoundedRange tmpIter[113299])(113453 call ||(113447 call isDomain tmpIter[113299])(113450 call isArray tmpIter[113299]))))
        if isRngDomArr[113442]
        {
          const _coforallCount[113309] "const" "end count" "temp"
          (113378 'move' _coforallCount[113309](113375 call _endCountAlloc 1))
          unknown numTasks[113310] "temp"
          (113362 'move' numTasks[113310](113358 call . tmpIter[113299] c"size"))
          (113353 call _upEndCount _coforallCount[113309] 1 numTasks[113310])
          (113350 call chpl_resetTaskSpawn numTasks[113310])
          unknown _indexOfInterest[113317] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[113318] "expr temp" "temp"
          (113327 'move' _iterator[113318](113325 call _getIterator tmpIter[113299]))
          Defer
          {
            {
              (113343 call _freeIterator _iterator[113318])
            }
          }
          { scopeless type
            (113332 'move' _indexOfInterest[113317](113329 call iteratorIndex _iterator[113318]))
          }
          ForLoop[113319]
          {
            unknown tid[113336] "coforall index var" "index var" "insert auto destroy"
            (113338 'move' tid[113336] _indexOfInterest[113317])
            {
              {
                (113306 call postScanChunk tid)
              }
              (113312 call _downEndCount _coforallCount[113309] nil[44])
              (113311 'coforall loop')
            }
            label _continueLabel[113322]
            _indexOfInterest[113317]
            _iterator[113318]
          }
          label _breakLabel[113323]
          Defer
          {
            {
              (113365 call _endCountFree _coforallCount[113309])
            }
          }
          (113370 call _waitEndCount _coforallCount[113309] 1 numTasks[113310])
        }
        {
          const _coforallCount[113382] "const" "end count" "temp"
          (113439 'move' _coforallCount[113382](113436 call _endCountAlloc 1))
          unknown _indexOfInterest[113390] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[113391] "expr temp" "temp"
          (113400 'move' _iterator[113391](113398 call _getIterator tmpIter[113299]))
          Defer
          {
            {
              (113416 call _freeIterator _iterator[113391])
            }
          }
          { scopeless type
            (113405 'move' _indexOfInterest[113390](113402 call iteratorIndex _iterator[113391]))
          }
          ForLoop[113392]
          {
            unknown tid[113409] "coforall index var" "index var" "insert auto destroy"
            (113411 'move' tid[113409] _indexOfInterest[113390])
            (113423 call _upEndCount _coforallCount[113382] 1)
            {
              {
                (113296 call postScanChunk tid)
              }
              (113385 call _downEndCount _coforallCount[113382] nil[44])
              (113384 'coforall loop')
            }
            label _continueLabel[113395]
            _indexOfInterest[113390]
            _iterator[113391]
          }
          label _breakLabel[113396]
          Defer
          {
            {
              (113427 call _endCountFree _coforallCount[113382])
            }
          }
          (113432 call _waitEndCount _coforallCount[113382] 1)
        }
      }
    }
    function postScanChunk[113471](arg tid[113469]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      const myadjust[113477] "const"(113476 call state tid)
      (113480 'end of statement')
      {
        unknown _indexOfInterest[113500] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[113501] "expr temp" "temp"
        (113510 'move' _iterator[113501](113508 call _getIterator(113486 call rngs tid)))
        Defer
        {
          {
            (113527 call _freeIterator _iterator[113501])
          }
        }
        { scopeless type
          (113516 'move' _indexOfInterest[113500](113513 call iteratorIndex _iterator[113501]))
        }
        ForLoop[113502]
        {
          unknown i[113520] "index var" "insert auto destroy"
          (113522 'move' i[113520] _indexOfInterest[113500])
          {
            (113497 call(113488 call . op c"accumulateOntoState")(113494 call res i) myadjust)
          }
          label _continueLabel[113505]
          _indexOfInterest[113500]
          _iterator[113501]
        }
        label _breakLabel[113506]
      }
    }
    if(113543 call _cond_test debugDRScan)
    {
      (113541 call writeln "res = " res)
    }
  }
  function canReuseStride[113554](arg blk[113552]:_any[178](?), arg curDim[113557] :
  int[13], arg levels[113560]:_any[178](?), arg count[113562]:_any[178](?), arg stride[113564]:_any[178](?)) : _unknown[51] "private"
  {
    const lastCount[113573] "const"(113572 call count(113569 call + levels 1))
    (113576 'end of statement')
    const curStride[113590] "const"(113587 IfExpr (113580 call < levels 1) then
    { scopeless
      1
    } else
    { scopeless
      (113586 call stride levels)
    } )
    (113593 'end of statement')
    const lastIndex[113601] "const"(113599 call *(113596 call - lastCount 1) curStride)
    (113604 'end of statement')
    const nextIndex[113609] "const"(113607 call + lastIndex curStride)
    (113612 'end of statement')
    (113623 return(113621 call ==(113619 call blk(113616 call - curDim 2)) nextIndex))
  }
}