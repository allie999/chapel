AST dump for MergeSort after pass parse.
Module use list: 

{
  (353085 'use' ChapelStandard)
  (271114 'use' Sort)
  function mergeSort[271129](arg Data[271126] :
  (271124 call chpl__buildArrayRuntimeType unknown Dom[271119] unknown eltType[271122]), arg minlen[271132] =
  16, arg comparator[271138] :
  unknown rec[271135] =
  defaultComparator) : _unknown[51]
  {
    (271146 call chpl_check_comparator comparator eltType)
    if(271178 call _cond_test(271154 call !=(271150 call . Dom c"rank") 1))
    {
      (271175 call compilerError "mergeSort() requires 1-D array")
    }
    { scopeless
      unknown Scratch[271184](271183 'typeof' Data)
      (271187 'end of statement')
    }
    (271203 call _MergeSort Data Scratch(271193 call . Dom c"alignedLow")(271197 call . Dom c"alignedHigh") minlen comparator 0)
  }
  function _MergeSort[271217](arg Data[271214] :
  (271212 call chpl__buildArrayRuntimeType unknown Dom[271209]), arg Scratch[271222] :
  (271219 call chpl__buildArrayRuntimeType nil[44]), arg lo[271226] :
  int[13], arg hi[271230] :
  int[13], arg minlen[271234] =
  16, arg comparator[271240] :
  unknown rec[271237] =
  defaultComparator, arg depth[271245] :
  int[13]) : _unknown[51] "private"
  {
    (271261 'import'(271258 call . Sort c"InsertionSort"))
    { scopeless
      const stride[271279] "const"(271276 IfExpr (271265 call . Dom c"stridable") then
      { scopeless
        (271274 call abs(271270 call . Dom c"stride"))
      } else
      { scopeless
        1
      } )
      const size[271289] "const"(271287 call /(271284 call - hi lo) stride)
      const mid[271302] "const"(271300 call + lo(271298 call *(271295 call / size 2) stride))
      (271305 'end of statement')
    }
    if(271416 call _cond_test(271332 call ||(271311 call <(271308 call + size 1) minlen)(271330 call &&(271318 call ==(271315 call & depth 1) 0)(271328 call <(271322 call + size 1)(271326 call * 2 minlen)))))
    {
      (271346 call(271337 call . InsertionSort c"insertionSort") Data(comparator = comparator) lo hi)
      if(271410 call _cond_test(271351 call & depth 1))
      {
        if(271403 call _cond_test(271354 call . Dom c"stridable"))
        {
          { scopeless
            (271383 call =(271369 call Scratch(271366 call chpl_by(271360 call chpl_build_bounded_range lo hi)(271363 call . Dom c"stride")))(271382 call Data(271379 call chpl_by(271373 call chpl_build_bounded_range lo hi)(271376 call . Dom c"stride"))))
          }
        }
        {
          { scopeless
            (271400 call =(271392 call Scratch(271389 call chpl_build_bounded_range lo hi))(271399 call Data(271396 call chpl_build_bounded_range lo hi)))
          }
        }
      }
      (271414 return)
    }
    if(271537 call _cond_test(271434 call <(271425 call(271421 call . here c"runningTasks"))(271433 call(271427 call . here c"numPUs")(logical = 1))))
    {
      {
        const _cobeginCount[271470] "const" "end count" "temp"
        (271491 'move' _cobeginCount[271470](271488 call _endCountAlloc 1))
        (271483 call _upEndCount _cobeginCount[271470] 1 2)
        {
          {
            (271448 call _MergeSort Data Scratch lo mid minlen comparator(271446 call + depth 1))
          }
          (271473 call _downEndCount _cobeginCount[271470] nil[44])
          (271472 'cobegin block')
        }
        {
          {
            (271467 call _MergeSort Data Scratch(271458 call + mid stride) hi minlen comparator(271465 call + depth 1))
          }
          (271479 call _downEndCount _cobeginCount[271470] nil[44])
          (271478 'cobegin block')
        }
        Defer
        {
          {
            (271494 call _endCountFree _cobeginCount[271470])
          }
        }
        (271499 call _waitEndCount _cobeginCount[271470] 1 2)
      }
    }
    {
      (271517 call _MergeSort Data Scratch lo mid minlen comparator(271515 call + depth 1))
      (271535 call _MergeSort Data Scratch(271526 call + mid stride) hi minlen comparator(271533 call + depth 1))
    }
    if(271570 call _cond_test(271546 call ==(271543 call & depth 1) 0))
    {
      (271556 call _Merge Data Scratch lo mid hi comparator)
    }
    {
      (271567 call _Merge Scratch Data lo mid hi comparator)
    }
  }
  where {
    (271253 call ==(271249 call . Dom c"rank") 1)
  }
  function _Merge[271589](arg Dst[271586] :
  (271584 call chpl__buildArrayRuntimeType unknown Dom[271579] unknown eltType[271582]), arg Src[271594] :
  (271591 call chpl__buildArrayRuntimeType nil[44]), arg lo[271598] :
  int[13], arg mid[271602] :
  int[13], arg hi[271606] :
  int[13], arg comparator[271612] :
  unknown rec[271609] =
  defaultComparator) : _unknown[51] "private"
  {
    { scopeless
      const stride[271631] "const"(271628 IfExpr (271617 call . Dom c"stridable") then
      { scopeless
        (271626 call abs(271622 call . Dom c"stride"))
      } else
      { scopeless
        1
      } )
      (271634 'end of statement')
    }
    { scopeless
      const a1range[271654] "const"(271651 IfExpr (271637 call . Dom c"stridable") then
      { scopeless
        (271645 call chpl_by(271642 call chpl_build_bounded_range lo mid) stride)
      } else
      { scopeless
        (271649 call chpl_build_bounded_range lo mid)
      } )
      (271657 'end of statement')
    }
    { scopeless
      const a1max[271659] "const" mid
      (271662 'end of statement')
    }
    { scopeless
      const a2range[271687] "const"(271684 IfExpr (271664 call . Dom c"stridable") then
      { scopeless
        (271675 call chpl_by(271672 call chpl_build_bounded_range(271669 call + mid stride) hi) stride)
      } else
      { scopeless
        (271682 call chpl_build_bounded_range(271679 call + mid 1) hi)
      } )
      (271690 'end of statement')
    }
    { scopeless
      const a2max[271692] "const" hi
      (271695 'end of statement')
    }
    { scopeless
      unknown A1[271700] "ref var"(271699 call Src a1range)
      (271703 'end of statement')
    }
    { scopeless
      unknown A2[271708] "ref var"(271707 call Src a2range)
      (271711 'end of statement')
    }
    { scopeless
      unknown a1[271716](271713 call . a1range c"first")
      (271719 'end of statement')
    }
    { scopeless
      unknown a2[271724](271721 call . a2range c"first")
      (271727 'end of statement')
    }
    { scopeless
      unknown i[271729] lo
      (271732 'end of statement')
    }
    {
      unknown tmp[271807] "temp"
      (271843 'move' tmp[271807](271832 call _cond_test(271834 call &&(271836 call <= a1 a1max)(271840 call <= a2 a2max))))
      WhileDo[271812]
      {
        {
          if(271802 call _cond_test(271756 call <=(271754 call chpl_compare(271747 call A1 a1)(271752 call A2 a2) comparator) 0))
          {
            (271766 call =(271761 call Dst i)(271765 call A1 a1))
            (271772 call += a1 stride)
            (271777 call += i stride)
          }
          {
            (271788 call =(271783 call Dst i)(271787 call A2 a2))
            (271794 call += a2 stride)
            (271799 call += i stride)
          }
        }
        label _continueLabel[271810]
        (271827 'move' tmp[271807](271816 call _cond_test(271818 call &&(271820 call <= a1 a1max)(271824 call <= a2 a2max))))
        tmp[271807]
      }
      label _breakLabel[271811]
    }
    {
      unknown tmp[271872] "temp"
      (271896 'move' tmp[271872](271891 call _cond_test(271893 call <= a1 a1max)))
      WhileDo[271877]
      {
        {
          (271858 call =(271853 call Dst i)(271857 call A1 a1))
          (271864 call += a1 stride)
          (271869 call += i stride)
        }
        label _continueLabel[271875]
        (271886 'move' tmp[271872](271881 call _cond_test(271883 call <= a1 a1max)))
        tmp[271872]
      }
      label _breakLabel[271876]
    }
    {
      unknown tmp[271925] "temp"
      (271949 'move' tmp[271925](271944 call _cond_test(271946 call <= a2 a2max)))
      WhileDo[271930]
      {
        {
          (271911 call =(271906 call Dst i)(271910 call A2 a2))
          (271917 call += a2 stride)
          (271922 call += i stride)
        }
        label _continueLabel[271928]
        (271939 'move' tmp[271925](271934 call _cond_test(271936 call <= a2 a2max)))
        tmp[271925]
      }
      label _breakLabel[271929]
    }
  }
}