AST dump for ChapelIteratorSupport after pass flattenClasses.
Module use list: ChapelStandard Reflection 

{
  function iteratorIndex[52135](arg ic[52132] :
  _iteratorClass[208](?)) : _unknown[51] "allow ref" "no doc" "fn returns iterator"
  {
    (52144 call(52140 call . ic[52132] c"advance"))
    (52155 return(52154 call(52150 call . ic[52132] c"getValue")))
  }
  function iteratorIndex[52165](arg t[52162] :
  _tuple[56202](?)) : _unknown[51] "expand tuples with values" "no doc" "fn returns iterator"
  {
    function iteratorIndexHelp[52173](arg t[52170] :
    _tuple[56202](?), param arg dim[52176] :
    int(64)[13]) : _unknown[51] "expand tuples with values"
    {
      if(52222 call _cond_test(52187 call == dim[52176](52185 call -(52181 call . t[52170] c"size") 1)))
      {
        (52199 return(52198 call _build_tuple_always_allow_ref(52196 call iteratorIndex(52194 call t[52170] dim[52176]))))
      }
      {
        (52220 return(52219 call _build_tuple_always_allow_ref(52208 call iteratorIndex(52206 call t[52170] dim[52176]))(52218 'expand_tuple'(52217 call iteratorIndexHelp t[52170](52215 call + dim[52176] 1)))))
      }
    }
    (52237 return(52236 call iteratorIndexHelp t[52162] 0))
  }
  function iteratorIndexType[52245](arg x[52243]:_any[178](?)) type : _unknown[51] "no doc"
  {
    if(52323 call _cond_test(52250 call isArray x[52243]))
    {
      (52255 return(52252 call . x[52243] c"eltType"))
    }
    {
      if(52319 call _cond_test(52261 call isDomain x[52243]))
      {
        (52290 return(52287 IfExpr (52269 call ==(52265 call . x[52243] c"rank") 1) then
        { scopeless
          (52274 call . x[52243] c"idxType")
        } else
        { scopeless
          (52285 call *(52278 call . x[52243] c"rank")(52282 call . x[52243] c"idxType"))
        } ))
      }
      {
        unknown ic[52297] "no copy"(52296 call _getIterator x[52243])
        (52300 'end of statement')
        unknown i[52306] "no copy"(52305 call iteratorIndex ic[52297])
        (52309 'end of statement')
        (52313 call _freeIterator ic[52297])
        (52317 return(52316 'typeof' i[52306]))
      }
    }
  }
  function iteratorIndexTypeZip[52337](arg xs[52334]:_any[178](?) ...) type : _unknown[51] "no doc"
  {
    function iteratorIndexTypeZipHelp[52343](param arg dim[52341]:_any[178](?)) type : _unknown[51]
    {
      if(52386 call _cond_test(52353 call == dim[52341](52351 call -(52347 call . xs[52334] c"size") 1)))
      {
        (52364 return(52362 call _build_tuple(52361 call iteratorIndexType(52359 call xs[52334] dim[52341]))))
      }
      {
        (52384 return(52382 call _build_tuple(52372 call iteratorIndexType(52370 call xs[52334] dim[52341]))(52380 'expand_tuple'(52379 call iteratorIndexTypeZipHelp(52376 call + dim[52341] 1)))))
      }
    }
    (52400 return(52399 call iteratorIndexTypeZipHelp 0))
  }
  function iteratorToArrayElementType[52410](arg t[52407] :
  _iteratorRecord[205](?)) type : _unknown[51]
  {
    (52438 return(52437 call chpl__unref(52435 call chpl_buildStandInRTT(52433 'scalar promotion type' t[52407]))))
  }
  function chpl_buildStandInRTT[52449](arg domType[52446] :
  _domain[125908](?)) type : _unknown[51] "unsafe"
  {
    unknown instanceObj[52488](52487 'static field type' domType[52446] "_instance")
    (52491 'end of statement')
    (52497 return(52496 call chpl_buildStandInRTT instanceObj[52488]))
  }
  function chpl_buildStandInRTT[52509](arg arrType[52506] :
  (52503 call chpl__buildArrayRuntimeType nil[44])) type : _unknown[51] "unsafe"
  {
    unknown arrInstType[52516] "type variable"(52515 'static field type' arrType[52506] "_instance")
    unknown domInstType[52541] "type variable"(52540 'static field type' arrInstType[52516] "dom")
    unknown domInstance[52545] domInstType[52541]
    (52548 'end of statement')
    unknown standinDomain[52553] "no auto destroy"(52552 call chpl_buildStandInRTT domInstance[52545])
    (52556 'end of statement')
    unknown instanceObj[52558] arrInstType[52516]
    (52561 'end of statement')
    unknown instanceEltType[52585] "type variable"(52584 'static typeof'(52581 call . instanceObj[52558] c"eltType"))
    (52596 return(52595 call chpl__buildArrayRuntimeType standinDomain[52553](52594 call chpl_buildStandInRTT instanceEltType[52585])))
  }
  function chpl_buildStandInRTT[52606](arg irType[52603] :
  _iteratorRecord[205](?)) type : _unknown[51]
  {
    unknown shapeType[52612] "type variable"(52611 call chpl_iteratorShapeStaticTypeOrNothing irType[52603])
    function standinType[52618]() type : _unknown[51] "unsafe"
    {
      if(52678 call _cond_test(52622 call == shapeType[52612] nothing[7]))
      {
        (52629 return(52627 call chpl__buildDomainRuntimeType defaultDist[94053] 1))
      }
      {
        if(52674 call _cond_test(52635 call isRange shapeType[52612]))
        {
          (52641 return(52639 call chpl__buildDomainRuntimeType defaultDist[94053] 1))
        }
        {
          unknown domInstance[52645] shapeType[52612]
          (52648 'end of statement')
          (52666 call compilerAssert(52663 call &&(52655 call !(52654 call isDomain domInstance[52645]))(52661 call !(52660 call isArray domInstance[52645]))))
          (52672 return(52671 call chpl_buildStandInRTT domInstance[52645]))
        }
      }
    }
    unknown standinDomain[52689] "no auto destroy"(52688 call standinType)
    (52692 'end of statement')
    (52704 return(52703 call chpl__buildArrayRuntimeType standinDomain[52689](52702 call chpl_buildStandInRTT(52700 'scalar promotion type' irType[52603]))))
  }
  function chpl_buildStandInRTT[52712](arg nonRTtype[52710]:_any[178](?)) type : _unknown[51]
  {
    (52715 return nonRTtype[52710])
  }
  function chpl_buildStandInRTT[52724](arg domInst[52722]:_any[178](?)) type : _unknown[51]
  {
    (52750 return(52749 call chpl__buildDomainRuntimeType defaultDist[94053](52736 call . domInst[52722] c"rank")(52740 call . domInst[52722] c"idxType")(52746 call . domInst[52722] c"stridable")))
  }
  where {
    (52730 call <=(52727 'typeof' domInst[52722]) unmanaged DefaultRectangularDom[415445](?))
  }
  function chpl_buildStandInRTT[52760](arg domInst[52758]:_any[178](?)) type : _unknown[51] "no return value for void"
  {
    if(52838 call _cond_test(52766 call <=(52763 'typeof' domInst[52758]) unmanaged BaseDom[415448]))
    {
      (52789 call compilerError "for/forall/promoted expressions are not implemented when the elements are or contain non-DefaultRectangular domains or arrays")
    }
    {
      (52836 call compilerError "unexpected argument of type "(52815 call _cast string[26](52813 'typeof' domInst[52758])) " for chpl_buildStandInRTT()")
    }
  }
  function chpl_trivialLeader[52849]() : _unknown[51] "iterator fn" "no return value for void"
  {
    (52852 yield 0)
  }
  function chpl_computeIteratorShape[52865](arg arg[52862] :
  (52859 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline"
  {
    (52876 return(52875 call chpl_computeIteratorShape(52871 call . arg[52862] c"_dom")))
  }
  function chpl_computeIteratorShape[52887](arg arg[52884] :
  _domain[125908](?)) : _unknown[51] "inline"
  {
    (52893 return(52890 call . arg[52884] c"_instance"))
  }
  function chpl_computeIteratorShape[52907](arg arg[52904] :
  (52903 call range[64319](?) ?[260])) : _unknown[51] "inline"
  {
    (52910 return arg[52904])
  }
  function chpl_computeIteratorShape[52921](arg arg[52918] :
  _iteratorRecord[205](?)) : _unknown[51] "inline"
  {
    if(52944 call _cond_test(52926 call chpl_iteratorHasShape arg[52918]))
    {
      (52933 return(52930 call . arg[52918] c"_shape_"))
    }
    {
      const myvoid[52936] "const" none[57]
      (52939 'end of statement')
      (52942 return myvoid[52936])
    }
  }
  function chpl_computeIteratorShape[52956](arg arg[52954]:_any[178](?)) : _unknown[51] "inline"
  {
    (52959 return none[57])
  }
  function chpl_iteratorHasShape[52970](arg ir[52967] :
  _iteratorRecord[205](?)) param : _unknown[51]
  {
    if(53005 call _cond_test(52991 call hasField(52974 'typeof' ir[52967]) "_shape_"))
    {
      (53000 return(52998 call !=(52996 'typeof'(52993 call . ir[52967] c"_shape_")) void[4]))
    }
    {
      (53003 return 0)
    }
  }
  function chpl_iteratorHasDomainShape[53020](arg ir[53017] :
  _iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    if(53042 call _cond_test(53027 call hasField(53024 'typeof' ir[53017]) "_shape_"))
    {
      (53037 return(354252 'is_subtype' BaseDom[372786](?)(53033 'typeof'(53030 call . ir[53017] c"_shape_"))))
    }
    {
      (53040 return 0)
    }
  }
  function chpl_iteratorHasRangeShape[53057](arg ir[53054] :
  _iteratorRecord[205](?)) param : _unknown[51] "inline"
  {
    if(53078 call _cond_test(53064 call hasField(53061 'typeof' ir[53054]) "_shape_"))
    {
      (53073 return(53072 call isRange(53070 'typeof'(53067 call . ir[53054] c"_shape_"))))
    }
    {
      (53076 return 0)
    }
  }
  function chpl_iteratorShapeStaticTypeOrNothing[53093](arg ir[53090] :
  _iteratorRecord[205](?)) type : _unknown[51]
  {
    if(53110 call _cond_test(53099 call hasField ir[53090] "_shape_"))
    {
      (53105 return(53104 'static field type' ir[53090] "_shape_"))
    }
    {
      (53108 return nothing[7])
    }
  }
  function chpl_iteratorFromForExpr[53125](arg ir[53122] :
  _iteratorRecord[205](?)) param : _unknown[51]
  {
    if(53162 call _cond_test(53152 call canResolveMethod module=[255] Reflection[224903] ir[53122] "_fromForExpr_"))
    {
      (53157 return(53154 call . ir[53122] c"_fromForExpr_"))
    }
    {
      (53160 return 0)
    }
    (357285 'referenced modules list' Reflection[224903])
  }
  function chpl_iteratorFromForExpr[53175](arg arg[53173]:_any[178](?)) param : _unknown[51]
  {
    (53178 return 0)
  }
  function _iteratorRecord[205](?).writeThis[53188](arg _mt[53193]:_MT[238], arg this[53190]:_iteratorRecord[205](?) :
  _iteratorRecord[205](?), arg f[53186]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown first[53197] 1 bool[10]
    (53200 'end of statement')
    {
      unknown _indexOfInterest[53245] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53246] "expr temp" "temp"
      (53255 'move' _iterator[53246](53253 call _getIterator this[53190]))
      Defer
      {
        {
          (53271 call _freeIterator _iterator[53246])
        }
      }
      { scopeless type
        (53260 'move' _indexOfInterest[53245](53257 call iteratorIndex _iterator[53246]))
      }
      ForLoop[53247]
      {
        unknown e[53264] "index var" "insert auto destroy"
        (53266 'move' e[53264] _indexOfInterest[53245])
        {
          if(53233 call _cond_test(53205 call ! first[53197]))
          {
            (53225 call <~> f[53186] " ")
          }
          {
            (53230 call = first[53197] 0)
          }
          (53242 call <~> f[53186] e[53264])
        }
        label _continueLabel[53250]
        _indexOfInterest[53245]
        _iterator[53246]
      }
      label _breakLabel[53251]
    }
  }
  function =[53286](ref arg ic[53283] :
  _iteratorRecord[205](?), arg xs[53288]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[53304] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53305] "expr temp" "temp"
      (53319 'move' _iterator[53305](53298 call _build_tuple(53314 call _getIterator ic[53283])(53317 call _getIterator xs[53288])))
      Defer
      {
        {
          (53349 call _freeIterator _iterator[53305])
        }
      }
      { scopeless type
        (53324 'move' _indexOfInterest[53304](53321 call iteratorIndex _iterator[53305]))
      }
      ForLoop[53306]
      {
        (53329 call _check_tuple_var_decl _indexOfInterest[53304] 2)
        unknown e[53335] "index var" "insert auto destroy"
        (53337 'move' e[53335](53333 call _indexOfInterest[53304] 0))
        unknown x[53342] "index var" "insert auto destroy"
        (53344 'move' x[53342](53340 call _indexOfInterest[53304] 1))
        (53301 call = e[53335] x[53342])
        label _continueLabel[53309]
        _indexOfInterest[53304]
        _iterator[53305]
      }
      label _breakLabel[53310]
    }
  }
  function =[53365](ref arg ic[53362] :
  _iteratorRecord[205](?), arg x[53371] :
  (53370 call iteratorIndexType ic[53362])) : _unknown[51] "assignop" "suppress lvalue error" "no return value for void"
  {
    {
      unknown _indexOfInterest[53381] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[53382] "expr temp" "temp"
      (53391 'move' _iterator[53382](53389 call _getIterator ic[53362]))
      Defer
      {
        {
          (53407 call _freeIterator _iterator[53382])
        }
      }
      { scopeless type
        (53396 'move' _indexOfInterest[53381](53393 call iteratorIndex _iterator[53382]))
      }
      ForLoop[53383]
      {
        unknown e[53400] "index var" "insert auto destroy"
        (53402 'move' e[53400] _indexOfInterest[53381])
        (53378 call = e[53400] x[53371])
        label _continueLabel[53386]
        _indexOfInterest[53381]
        _iterator[53382]
      }
      label _breakLabel[53387]
    }
  }
  function _getIterator[53421](const  ref arg x[53419]:_any[178](?)) : _unknown[51] "inline" "no borrow convert" "suppress lvalue error"
  {
    (53434 return(53433 call _getIterator(53431 call(53427 call . x[53419] c"these"))))
  }
  function _getIterator[53443](arg t[53441]:_any[178](?)) : _unknown[51]
  {
    (53454 return(53453 call _getIterator(53451 call(53447 call . t[53441] c"these"))))
  }
  function _getIteratorZip[53463](arg x[53461]:_any[178](?)) : _unknown[51] "inline"
  {
    (53469 return(53468 call _getIterator x[53461]))
  }
  function _getIteratorZip[53478](arg t[53476]:_any[178](?)) : _unknown[51] "inline"
  {
    (53484 return(53483 call _getIterator t[53476]))
  }
  function _getIteratorZip[53495](arg x[53492] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    function _getIteratorZipInternal[53503](arg x[53500] :
    _tuple[56202](?), param arg dim[53506] :
    int(64)[13]) : _unknown[51] "inline"
    {
      if(53548 call _cond_test(53525 call &&(53515 call isTuple(53513 call x[53500] dim[53506]))(53523 call !(53522 call isHomogeneousTuple(53520 call x[53500] dim[53506])))))
      {
        (53546 call compilerError "Heterogeneous tuples don't support zippered iteration yet")
      }
      if(53596 call _cond_test(53562 call == dim[53506](53560 call -(53556 call . x[53500] c"size") 1)))
      {
        (53573 return(53571 call _build_tuple(53570 call _getIterator(53568 call x[53500] dim[53506]))))
      }
      {
        (53594 return(53592 call _build_tuple(53581 call _getIterator(53579 call x[53500] dim[53506]))(53590 'expand_tuple'(53589 call _getIteratorZipInternal x[53500](53587 call + dim[53506] 1)))))
      }
    }
    if(53628 call _cond_test(53610 call ==(53606 call . x[53492] c"size") 1))
    {
      (53619 return(53618 call _getIterator(53616 call x[53492] 0)))
    }
    {
      (53626 return(53625 call _getIteratorZipInternal x[53492] 0))
    }
  }
  function _getIteratorZip[53642](arg t[53639] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    function _getIteratorZipInternal[53650](arg t[53647] :
    _tuple[56202](?), param arg dim[53653] :
    int(64)[13]) : _unknown[51] "inline"
    {
      if(53698 call _cond_test(53664 call == dim[53653](53662 call -(53658 call . t[53647] c"size") 1)))
      {
        (53675 return(53673 call _build_tuple(53672 call _getIterator(53670 call t[53647] dim[53653]))))
      }
      {
        (53696 return(53694 call _build_tuple(53683 call _getIterator(53681 call t[53647] dim[53653]))(53692 'expand_tuple'(53691 call _getIteratorZipInternal t[53647](53689 call + dim[53653] 1)))))
      }
    }
    if(53731 call _cond_test(53713 call ==(53709 call . t[53639] c"size") 1))
    {
      (53722 return(53721 call _getIterator(53719 call t[53639] 0)))
    }
    {
      (53729 return(53728 call _getIteratorZipInternal t[53639] 0))
    }
  }
  function _freeIterator[53745](arg ic[53742] :
  _iteratorClass[208](?)) : _unknown[51] "inline" "no return value for void"
  {
    (53769 call chpl_here_free(53767 'cast_to_void_star' ic[53742]))
  }
  function _freeIterator[53780](arg x[53777] :
  _tuple[56202](?)) : _unknown[51] "inline" "no return value for void"
  {
    {
      unknown i[53800] 0
      unknown tmp[53801] "maybe param" "temp"
      (53813 'move' tmp[53801](53811 call chpl_compute_low_param_loop_bound 0(53788 call -(53784 call . x[53777] c"size") 1)))
      unknown tmp[53802] "maybe param" "temp"
      (53826 'move' tmp[53802](53824 call chpl_compute_high_param_loop_bound 0(53818 call -(53820 call . x[53777] c"size") 1)))
      unknown tmp[53803] "maybe param" "temp"
      (53829 'move' tmp[53803] 1)
      ParamForLoop[53831]
      { i[53800] tmp[53801] tmp[53802] tmp[53803]
        (53798 call _freeIterator(53796 call x[53777] i[53800]))
      }
      label _unused_continueLabel[53805]
      label _breakLabel[53804]
    }
  }
  function _toLeader[53849](arg ir[53846] :
  _iteratorRecord[205](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    (53894 return(53893 call chpl__autoCopy(53891 'to leader' ir[53846])))
  }
  where {
    (53870 'has leader' ir[53846])
  }
  function _toLeader[53904](arg x[53902]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    (53934 return(53933 call _toLeader(53931 call(53927 call . x[53902] c"these"))))
  }
  where {
    (53923 call &&(53912 call !(354253 'is_subtype' _iteratorRecord[205](?)(53908 'typeof' x[53902])))(53922 'has leader'(53921 call(53917 call . x[53902] c"these"))))
  }
  function _toLeaderZip[53944](arg x[53942]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    (53984 return(53983 call _toLeader x[53942]))
  }
  where {
    (53978 call &&(53950 call !(53949 call isTuple x[53942]))(53977 call canResolve module=[255] Reflection[224903] "_toLeader" x[53942]))
    (357302 'referenced modules list' Reflection[224903])
  }
  function _toLeaderZip[53996](arg x[53993] :
  _tuple[56202](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    (54016 return(54015 call _toLeader(54013 call x[53993] 0)))
  }
  where {
    (54008 call canResolve module=[255] Reflection[224903] "_toLeader"(54007 call x[53993] 0))
    (357308 'referenced modules list' Reflection[224903])
  }
  function _toStandalone[54028](arg iterator[54025] :
  _iteratorClass[208](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    (54053 return(54052 call chpl__autoCopy(54050 'to standalone' iterator[54025])))
  }
  function _toStandalone[54064](arg ir[54061] :
  _iteratorRecord[205](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ic[54070] "no copy"(54069 call _getIterator ir[54061])
    (54073 'end of statement')
    unknown standalone[54079] "no copy"(54078 call _toStandalone ic[54070])
    (54082 'end of statement')
    (54086 call _freeIterator ic[54070])
    (54089 return standalone[54079])
  }
  function _toStandalone[54097](arg x[54095]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    (54108 return(54107 call _toStandalone(54105 call(54101 call . x[54095] c"these"))))
  }
  function _toLeader[54119](arg ir[54116] :
  _iteratorRecord[205](?), arg args[54122]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    (54134 return(54133 call chpl__autoCopy(54131 'to leader' ir[54116](54130 'expand_tuple' args[54122]))))
  }
  function _toLeader[54143](arg x[54141]:_any[178](?), arg args[54146]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    (54160 return(54159 call _toLeader(54155 call(54151 call . x[54141] c"these"))(54158 'expand_tuple' args[54146])))
  }
  function _toLeaderZip[54169](arg x[54167]:_any[178](?), arg args[54172]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    (54181 return(54180 call _toLeader x[54167](54179 'expand_tuple' args[54172])))
  }
  function _toLeaderZip[54192](arg x[54189] :
  _tuple[56202](?), arg args[54195]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    (54207 return(54206 call _toLeader(54202 call x[54189] 0)(54205 'expand_tuple' args[54195])))
  }
  function _toStandalone[54218](arg iterator[54215] :
  _iteratorClass[208](?), arg args[54221]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    (54233 return(54232 call chpl__autoCopy(54230 'to standalone' iterator[54215](54229 'expand_tuple' args[54221]))))
  }
  function _toStandalone[54244](arg ir[54241] :
  _iteratorRecord[205](?), arg args[54247]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ic[54254] "no copy"(54253 call _getIterator ir[54241])
    (54257 'end of statement')
    unknown standalone[54265] "no copy"(54264 call _toStandalone ic[54254](54263 'expand_tuple' args[54247]))
    (54268 'end of statement')
    (54272 call _freeIterator ic[54254])
    (54275 return standalone[54265])
  }
  function _toStandalone[54283](arg x[54281]:_any[178](?), arg args[54286]:_any[178](?) ...) : _unknown[51] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    (54300 return(54299 call _toStandalone(54295 call(54291 call . x[54281] c"these"))(54298 'expand_tuple' args[54286])))
  }
  function chpl__canHaveFastFollowers[54309](arg x[54307]:_any[178](?)) param : _unknown[51]
  {
    (54312 return 0)
  }
  function chpl__canHaveFastFollowers[54325](arg x[54322] :
  (54319 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (54328 return 1)
  }
  function chpl__canHaveFastFollowersZip[54339](arg x[54336] :
  _tuple[56202](?)) param : _unknown[51]
  {
    (54346 return(54345 call chpl__canHaveFastFollowersZipHelp x[54336] 0))
  }
  function chpl__canHaveFastFollowersZipHelp[54357](arg x[54354] :
  _tuple[56202](?), param arg dim[54359]:_any[178](?)) param : _unknown[51]
  {
    if(54399 call _cond_test(54369 call ==(54366 call -(54362 call . x[54354] c"size") 1) dim[54359]))
    {
      (54378 return(54377 call chpl__canHaveFastFollowers(54375 call x[54354] dim[54359])))
    }
    {
      (54397 return(54395 call ||(54386 call chpl__canHaveFastFollowers(54384 call x[54354] dim[54359]))(54394 call chpl__canHaveFastFollowersZipHelp x[54354](54392 call + dim[54359] 1))))
    }
  }
  function chpl__canLeadFastFollowers[54412](arg x[54410]:_any[178](?)) param : _unknown[51]
  {
    (54424 return(54422 call ||(54417 call isDomain x[54410])(54421 call isArray x[54410])))
  }
  function chpl__hasInertFastFollowers[54433](arg x[54431]:_any[178](?)) param : _unknown[51]
  {
    (54436 return 1)
  }
  function chpl__hasInertFastFollowers[54449](arg x[54446] :
  (54443 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (54452 return 0)
  }
  function chpl__hasInertFastFollowersZip[54463](arg x[54460] :
  _tuple[56202](?)) param : _unknown[51]
  {
    (54470 return(54469 call chpl__hasInertFastFollowersZipHelp x[54460] 0))
  }
  function chpl__hasInertFastFollowersZipHelp[54481](arg x[54478] :
  _tuple[56202](?), param arg dim[54483]:_any[178](?)) param : _unknown[51]
  {
    if(54525 call _cond_test(54493 call ==(54490 call -(54486 call . x[54478] c"size") 1) dim[54483]))
    {
      (54502 return(54501 call chpl__hasInertFastFollowers(54499 call x[54478] dim[54483])))
    }
    {
      (54522 return(54520 call &&(54511 call chpl__hasInertFastFollowers(54509 call x[54478] dim[54483]))(54519 call chpl__hasInertFastFollowersZipHelp x[54478](54517 call + dim[54483] 1))))
    }
  }
  function chpl__staticFastFollowCheck[54536](arg x[54534]:_any[178](?)) param : _unknown[51]
  {
    const lead[54539] "const" "no copy" x[54534]
    (54542 'end of statement')
    if(54559 call _cond_test(54547 call chpl__canHaveFastFollowers lead[54539]))
    {
      (54553 return(54552 call chpl__staticFastFollowCheck x[54534] lead[54539]))
    }
    {
      (54556 return 0)
    }
  }
  function chpl__staticFastFollowCheck[54570](arg x[54568]:_any[178](?), arg lead[54572]:_any[178](?)) param : _unknown[51]
  {
    (54578 return(54577 call chpl__hasInertFastFollowers x[54568]))
  }
  function chpl__staticFastFollowCheck[54591](arg x[54588] :
  (54585 call chpl__buildArrayRuntimeType nil[44]), arg lead[54593]:_any[178](?)) param : _unknown[51]
  {
    (54613 return(54612 call(54603 call .(54598 call . x[54588] c"_value") c"dsiStaticFastFollowCheck")(54610 'typeof'(54607 call . lead[54593] c"_value"))))
  }
  function chpl__staticFastFollowCheckZip[54624](arg x[54621] :
  _tuple[56202](?)) param : _unknown[51]
  {
    if(54665 call _cond_test(54630 call !(54629 call chpl__canHaveFastFollowersZip x[54621])))
    {
      (54633 return 0)
    }
    {
      const lead[54640] "const" "no copy"(54639 call x[54621] 0)
      (54643 'end of statement')
      if(54659 call _cond_test(54648 call chpl__canLeadFastFollowers lead[54640]))
      {
        (54654 return(54653 call chpl__staticFastFollowCheckZip x[54621] lead[54640]))
      }
      {
        (54657 return 0)
      }
    }
  }
  function chpl__staticFastFollowCheckZip[54678](arg x[54675] :
  _tuple[56202](?), arg lead[54680]:_any[178](?), param arg dim[54683] =
  0) param : _unknown[51]
  {
    if(54727 call _cond_test(54694 call ==(54691 call -(54687 call . x[54675] c"size") 1) dim[54683]))
    {
      (54704 return(54703 call chpl__staticFastFollowCheck(54700 call x[54675] dim[54683]) lead[54680]))
    }
    {
      (54725 return(54723 call &&(54713 call chpl__staticFastFollowCheck(54710 call x[54675] dim[54683]) lead[54680])(54722 call chpl__staticFastFollowCheckZip x[54675] lead[54680](54720 call + dim[54683] 1))))
    }
  }
  function chpl__dynamicFastFollowCheck[54740](arg x[54738]:_any[178](?)) : _unknown[51]
  {
    if(54758 call _cond_test(54745 call chpl__canHaveFastFollowers x[54738]))
    {
      (54751 return(54750 call chpl__dynamicFastFollowCheck x[54738] x[54738]))
    }
    {
      (54755 return 0)
    }
  }
  function chpl__dynamicFastFollowCheck[54769](arg x[54767]:_any[178](?), arg lead[54771]:_any[178](?)) : _unknown[51]
  {
    (54777 return(54776 call chpl__hasInertFastFollowers x[54767]))
  }
  function chpl__dynamicFastFollowCheck[54790](arg x[54787] :
  (54784 call chpl__buildArrayRuntimeType nil[44]), arg lead[54792]:_any[178](?)) : _unknown[51]
  {
    if(54816 call _cond_test(54798 call chpl__staticFastFollowCheck x[54787] lead[54792]))
    {
      (54811 return(54810 call(54805 call .(54800 call . x[54787] c"_value") c"dsiDynamicFastFollowCheck") lead[54792]))
    }
    {
      (54814 return 0)
    }
  }
  function chpl__dynamicFastFollowCheckZip[54831](arg x[54828] :
  _tuple[56202](?)) : _unknown[51]
  {
    if(54843 call _cond_test(54837 call !(54836 call chpl__canHaveFastFollowersZip x[54828])))
    {
      (54840 return 0)
    }
    if(54870 call _cond_test(54854 call chpl__canLeadFastFollowers(54852 call x[54828] 0)))
    {
      (54863 return(54862 call chpl__dynamicFastFollowCheckZip x[54828](54861 call x[54828] 0)))
    }
    {
      (54867 return 0)
    }
  }
  function chpl__dynamicFastFollowCheckZip[54882](arg x[54879] :
  _tuple[56202](?), arg lead[54884]:_any[178](?), param arg dim[54887] =
  0) : _unknown[51]
  {
    if(54931 call _cond_test(54898 call ==(54895 call -(54891 call . x[54879] c"size") 1) dim[54887]))
    {
      (54908 return(54907 call chpl__dynamicFastFollowCheck(54904 call x[54879] dim[54887]) lead[54884]))
    }
    {
      (54929 return(54927 call &&(54917 call chpl__dynamicFastFollowCheck(54914 call x[54879] dim[54887]) lead[54884])(54926 call chpl__dynamicFastFollowCheckZip x[54879] lead[54884](54924 call + dim[54887] 1))))
    }
  }
  function _toFollower[54946](arg iterator[54943] :
  _iteratorClass[208](?), arg leaderIndex[54948]:_any[178](?)) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    (54974 return(54973 call chpl__autoCopy(54971 'to follower' iterator[54943] leaderIndex[54948])))
  }
  function _toFollower[54985](arg ir[54982] :
  _iteratorRecord[205](?), arg leaderIndex[54987]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ic[54993] "no copy"(54992 call _getIterator ir[54982])
    (54996 'end of statement')
    unknown follower[55003] "no copy"(55002 call _toFollower ic[54993] leaderIndex[54987])
    (55006 'end of statement')
    (55010 call _freeIterator ic[54993])
    (55013 return follower[55003])
  }
  function _toFollower[55021](arg x[55019]:_any[178](?), arg leaderIndex[55023]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator" "suppress lvalue error"
  {
    (55035 return(55034 call _toFollower(55031 call(55027 call . x[55019] c"these")) leaderIndex[55023]))
  }
  function _toFollowerZip[55044](arg x[55042]:_any[178](?), arg leaderIndex[55046]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    (55053 return(55052 call _toFollower x[55042] leaderIndex[55046]))
  }
  function _toFollowerZip[55064](arg x[55061] :
  _tuple[56202](?), arg leaderIndex[55066]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    (55074 return(55073 call _toFollowerZipInternal x[55061] leaderIndex[55066] 0))
  }
  function _toFollowerZipInternal[55085](arg x[55082] :
  _tuple[56202](?), arg leaderIndex[55087]:_any[178](?), param arg dim[55090] :
  int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    if(55138 call _cond_test(55101 call == dim[55090](55099 call -(55095 call . x[55082] c"size") 1)))
    {
      (55113 return(55111 call _build_tuple(55110 call _toFollower(55107 call x[55082] dim[55090]) leaderIndex[55087])))
    }
    {
      (55136 return(55134 call _build_tuple(55122 call _toFollower(55119 call x[55082] dim[55090]) leaderIndex[55087])(55132 'expand_tuple'(55131 call _toFollowerZipInternal x[55082] leaderIndex[55087](55129 call + dim[55090] 1)))))
    }
  }
  function _toFastFollower[55153](arg iterator[55150] :
  _iteratorClass[208](?), arg leaderIndex[55155]:_any[178](?), arg fast[55158] :
  bool[10]) : _unknown[51] "inline" "no implicit copy" "fn returns iterator"
  {
    (55170 return(55169 call chpl__autoCopy(55167 'to follower' iterator[55150] leaderIndex[55155] 1)))
  }
  function _toFastFollower[55181](arg ir[55178] :
  _iteratorRecord[205](?), arg leaderIndex[55183]:_any[178](?), arg fast[55186] :
  bool[10]) : _unknown[51] "inline" "fn returns iterator"
  {
    unknown ic[55193] "no copy"(55192 call _getIterator ir[55178])
    (55196 'end of statement')
    unknown follower[55205] "no copy"(55204 call _toFastFollower ic[55193] leaderIndex[55183](fast = 1))
    (55208 'end of statement')
    (55212 call _freeIterator ic[55193])
    (55215 return follower[55205])
  }
  function _toFastFollower[55223](arg x[55221]:_any[178](?), arg leaderIndex[55225]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    if(55253 call _cond_test(55230 call chpl__canHaveFastFollowers x[55221]))
    {
      (55241 return(55240 call _toFastFollower(55235 call _getIterator x[55221]) leaderIndex[55225](fast = 1)))
    }
    {
      (55251 return(55250 call _toFollower(55247 call _getIterator x[55221]) leaderIndex[55225]))
    }
  }
  function _toFastFollowerZip[55266](arg x[55264]:_any[178](?), arg leaderIndex[55268]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    (55275 return(55274 call _toFastFollower x[55264] leaderIndex[55268]))
  }
  function _toFastFollowerZip[55286](arg x[55283] :
  _tuple[56202](?), arg leaderIndex[55288]:_any[178](?)) : _unknown[51] "inline" "fn returns iterator"
  {
    (55296 return(55295 call _toFastFollowerZip x[55283] leaderIndex[55288] 0))
  }
  function _toFastFollowerZip[55307](arg x[55304] :
  _tuple[56202](?), arg leaderIndex[55309]:_any[178](?), param arg dim[55312] :
  int(64)[13]) : _unknown[51] "inline" "fn returns iterator"
  {
    if(55372 call _cond_test(55323 call == dim[55312](55321 call -(55317 call . x[55304] c"size") 2)))
    {
      (55347 return(55345 call _build_tuple(55332 call _toFastFollowerZip(55329 call x[55304] dim[55312]) leaderIndex[55309])(55343 call _toFastFollowerZip(55340 call x[55304](55337 call + dim[55312] 1)) leaderIndex[55309])))
    }
    {
      (55370 return(55368 call _build_tuple(55356 call _toFastFollowerZip(55353 call x[55304] dim[55312]) leaderIndex[55309])(55366 'expand_tuple'(55365 call _toFastFollowerZip x[55304] leaderIndex[55309](55363 call + dim[55312] 1)))))
    }
  }
  function singleValIter[55387](arg iterables[55384] :
  _tuple[56202](?)) param : _unknown[51] "no doc"
  {
    (55410 return(55408 call &&(55394 call ==(55390 call . iterables[55384] c"size") 1)(55406 call !(55405 call isRefIter(55403 call _getIterator(55401 call iterables[55384] 0))))))
  }
  function singleRefIter[55421](arg iterables[55418] :
  _tuple[56202](?)) param : _unknown[51] "no doc"
  {
    (55442 return(55440 call &&(55428 call ==(55424 call . iterables[55418] c"size") 1)(55439 call isRefIter(55437 call _getIterator(55435 call iterables[55418] 0)))))
  }
  function vectorizeOnly[55453](arg iterables[55450]:_any[178](?) ...) : _unknown[51] "iterator fn" "vectorize yielding loops" "no return value for void"
  {
    {
      unknown _indexOfInterest[55467] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55468] "expr temp" "temp"
      (55477 'move' _iterator[55468](55475 call _getIterator(55463 call iterables[55450] 0)))
      Defer
      {
        {
          (55494 call _freeIterator _iterator[55468])
        }
      }
      { scopeless type
        (55483 'move' _indexOfInterest[55467](55480 call iteratorIndex _iterator[55468]))
      }
      ForLoop[55469]
      {
        unknown i[55487] "index var" "insert auto destroy"
        (55489 'move' i[55487] _indexOfInterest[55467])
        (55465 yield i[55487])
        label _continueLabel[55472]
        _indexOfInterest[55467]
        _iterator[55468]
      }
      label _breakLabel[55473]
    }
  }
  where {
    (55458 call singleValIter iterables[55450])
  }
  function vectorizeOnly[55511](arg iterables[55508]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    {
      unknown _indexOfInterest[55525] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55526] "expr temp" "temp"
      (55535 'move' _iterator[55526](55533 call _getIterator(55521 call iterables[55508] 0)))
      Defer
      {
        {
          (55552 call _freeIterator _iterator[55526])
        }
      }
      { scopeless type
        (55541 'move' _indexOfInterest[55525](55538 call iteratorIndex _iterator[55526]))
      }
      ForLoop[55527]
      {
        unknown i[55545] "index var" "insert auto destroy"
        (55547 'move' i[55545] _indexOfInterest[55525])
        (55523 yield i[55545])
        label _continueLabel[55530]
        _indexOfInterest[55525]
        _iterator[55526]
      }
      label _breakLabel[55531]
    }
  }
  where {
    (55516 call singleRefIter iterables[55508])
  }
  function vectorizeOnly[55570](arg iterables[55567]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    {
      unknown _indexOfInterest[55584] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55585] "expr temp" "temp"
      (55593 'move' _iterator[55585](55580 call _getIteratorZip iterables[55567]))
      Defer
      {
        {
          (55609 call _freeIterator _iterator[55585])
        }
      }
      { scopeless type
        (55598 'move' _indexOfInterest[55584](55595 call iteratorIndex _iterator[55585]))
      }
      ForLoop[55586]
      {
        unknown i[55602] "index var" "insert auto destroy"
        (55604 'move' i[55602] _indexOfInterest[55584])
        (55582 yield i[55602])
        label _continueLabel[55589]
        _indexOfInterest[55584]
        _iterator[55585]
      }
      label _breakLabel[55590]
    }
  }
  where {
    (55574 call > numiterables[55565] 1)
  }
  function vectorizeOnly[55626](param arg tag[55623] :
  iterKind[453], arg iterables[55629]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[55655] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55656] "expr temp" "temp"
      (55665 'move' _iterator[55656](55663 call _getIterator(55651 call iterables[55629] 0)))
      Defer
      {
        {
          (55682 call _freeIterator _iterator[55656])
        }
      }
      { scopeless type
        (55671 'move' _indexOfInterest[55655](55668 call iteratorIndex _iterator[55656]))
      }
      ForLoop[55657]
      {
        unknown i[55675] "index var" "insert auto destroy"
        (55677 'move' i[55675] _indexOfInterest[55655])
        (55653 yield i[55675])
        label _continueLabel[55660]
        _indexOfInterest[55655]
        _iterator[55656]
      }
      label _breakLabel[55661]
    }
  }
  where {
    (55645 call &&(55639 call == tag[55623] standalone[451])(55644 call singleValIter iterables[55629]))
  }
  function vectorizeOnly[55699](param arg tag[55696] :
  iterKind[453], arg iterables[55702]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[55726] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55727] "expr temp" "temp"
      (55736 'move' _iterator[55727](55734 call _getIterator(55722 call iterables[55702] 0)))
      Defer
      {
        {
          (55753 call _freeIterator _iterator[55727])
        }
      }
      { scopeless type
        (55742 'move' _indexOfInterest[55726](55739 call iteratorIndex _iterator[55727]))
      }
      ForLoop[55728]
      {
        unknown i[55746] "index var" "insert auto destroy"
        (55748 'move' i[55746] _indexOfInterest[55726])
        (55724 yield i[55746])
        label _continueLabel[55731]
        _indexOfInterest[55726]
        _iterator[55727]
      }
      label _breakLabel[55732]
    }
  }
  where {
    (55716 call &&(55710 call == tag[55696] standalone[451])(55715 call singleRefIter iterables[55702]))
  }
  function vectorizeOnly[55770](param arg tag[55767] :
  iterKind[453], arg iterables[55774]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[55798] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55799] "expr temp" "temp"
      (55807 'move' _iterator[55799](55794 call _getIteratorZip iterables[55774]))
      Defer
      {
        {
          (55823 call _freeIterator _iterator[55799])
        }
      }
      { scopeless type
        (55812 'move' _indexOfInterest[55798](55809 call iteratorIndex _iterator[55799]))
      }
      ForLoop[55800]
      {
        unknown i[55816] "index var" "insert auto destroy"
        (55818 'move' i[55816] _indexOfInterest[55798])
        (55796 yield i[55816])
        label _continueLabel[55803]
        _indexOfInterest[55798]
        _iterator[55799]
      }
      label _breakLabel[55804]
    }
  }
  where {
    (55788 call &&(55782 call == tag[55767] standalone[451])(55786 call > numiterables[55772] 1))
  }
  function vectorizeOnly[55840](param arg tag[55837] :
  iterKind[453], arg iterables[55843]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    (55865 yield(55864 call iterables[55843] 0))
  }
  where {
    (55859 call &&(55853 call == tag[55837] leader[447])(55858 call singleValIter iterables[55843]))
  }
  function vectorizeOnly[55877](param arg tag[55874] :
  iterKind[453], arg iterables[55880]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    (55900 yield(55899 call iterables[55880] 0))
  }
  where {
    (55894 call &&(55888 call == tag[55874] leader[447])(55893 call singleRefIter iterables[55880]))
  }
  function vectorizeOnly[55912](param arg tag[55909] :
  iterKind[453], arg iterables[55916]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    (55933 yield iterables[55916])
  }
  where {
    (55930 call &&(55924 call == tag[55909] leader[447])(55928 call > numiterables[55914] 1))
  }
  function vectorizeOnly[55945](param arg tag[55942] :
  iterKind[453], arg followThis[55947]:_any[178](?), arg iterables[55950]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[55976] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55977] "expr temp" "temp"
      (55986 'move' _iterator[55977](55984 call _getIterator(55972 call iterables[55950] 0)))
      Defer
      {
        {
          (56003 call _freeIterator _iterator[55977])
        }
      }
      { scopeless type
        (55992 'move' _indexOfInterest[55976](55989 call iteratorIndex _iterator[55977]))
      }
      ForLoop[55978]
      {
        unknown i[55996] "index var" "insert auto destroy"
        (55998 'move' i[55996] _indexOfInterest[55976])
        (55974 yield i[55996])
        label _continueLabel[55981]
        _indexOfInterest[55976]
        _iterator[55977]
      }
      label _breakLabel[55982]
    }
  }
  where {
    (55966 call &&(55960 call == tag[55942] follower[449])(55965 call singleValIter iterables[55950]))
  }
  function vectorizeOnly[56020](param arg tag[56017] :
  iterKind[453], arg followThis[56022]:_any[178](?), arg iterables[56025]:_any[178](?) ...) ref : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[56049] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56050] "expr temp" "temp"
      (56059 'move' _iterator[56050](56057 call _getIterator(56045 call iterables[56025] 0)))
      Defer
      {
        {
          (56076 call _freeIterator _iterator[56050])
        }
      }
      { scopeless type
        (56065 'move' _indexOfInterest[56049](56062 call iteratorIndex _iterator[56050]))
      }
      ForLoop[56051]
      {
        unknown i[56069] "index var" "insert auto destroy"
        (56071 'move' i[56069] _indexOfInterest[56049])
        (56047 yield i[56069])
        label _continueLabel[56054]
        _indexOfInterest[56049]
        _iterator[56050]
      }
      label _breakLabel[56055]
    }
  }
  where {
    (56039 call &&(56033 call == tag[56017] follower[449])(56038 call singleRefIter iterables[56025]))
  }
  function vectorizeOnly[56093](param arg tag[56090] :
  iterKind[453], arg followThis[56095]:_any[178](?), arg iterables[56099]:_any[178](?) ...) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[56123] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56124] "expr temp" "temp"
      (56132 'move' _iterator[56124](56119 call _getIteratorZip iterables[56099]))
      Defer
      {
        {
          (56148 call _freeIterator _iterator[56124])
        }
      }
      { scopeless type
        (56137 'move' _indexOfInterest[56123](56134 call iteratorIndex _iterator[56124]))
      }
      ForLoop[56125]
      {
        unknown i[56141] "index var" "insert auto destroy"
        (56143 'move' i[56141] _indexOfInterest[56123])
        (56121 yield i[56141])
        label _continueLabel[56128]
        _indexOfInterest[56123]
        _iterator[56124]
      }
      label _breakLabel[56129]
    }
  }
  where {
    (56113 call &&(56107 call == tag[56090] follower[449])(56111 call > numiterables[56097] 1))
  }
  (355086 'used modules list'(52123 'use' ChapelStandard[20267])(52127 'use' Reflection[224903]))
}