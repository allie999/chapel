AST dump for DefaultRectangular after pass flattenClasses.
Module use list: DSIUtil ChapelArray ChapelDistribution ChapelRange SysBasic SysError SysCTypes ChapelDebugPrint ChapelLocks OwnedObject IO DefaultSparse DefaultAssociative ExternalArray RangeChunk 

{
  const dataParTasksPerLocale[93281] "config" "const" 0
  (93284 'end of statement')
  const dataParIgnoreRunningTasks[93287] "config" "const" 0
  (93290 'end of statement')
  const dataParMinGranularity[93293] "config" "const" 1 int(64)[13]
  (93296 'end of statement')
  if(93322 call _cond_test(93299 call < dataParTasksPerLocale[93281] 0))
  {
    (93320 call halt "dataParTasksPerLocale must be >= 0")
  }
  if(93352 call _cond_test(93329 call <= dataParMinGranularity[93293] 0))
  {
    (93350 call halt "dataParMinGranularity must be > 0")
  }
  unknown debugDefaultDist[93392] "config" "param" 0
  (93395 'end of statement')
  unknown debugDefaultDistBulkTransfer[93397] "config" "param" 0
  (93400 'end of statement')
  unknown debugDataPar[93402] "config" "param" 0
  (93405 'end of statement')
  unknown debugDataParNuma[93407] "config" "param" 0
  (93410 'end of statement')
  unknown disableArrRealloc[93412] "config" "param" 0
  (93415 'end of statement')
  unknown reportInPlaceRealloc[93417] "config" "param" 0
  (93420 'end of statement')
  unknown defaultDoRADOpt[93422] "config" "param" 1
  (93425 'end of statement')
  unknown defaultDisableLazyRADOpt[93427] "config" "param" 0
  (93430 'end of statement')
  unknown earlyShiftData[93432] "config" "param" 1
  (93435 'end of statement')
  unknown usePollyArrayIndex[93437] "config" "param" 0
  (93440 'end of statement')
  unknown defaultRectangularSupportsAutoLocalAccess[93442] "config" "param" 0
  (93445 'end of statement')
  type ArrayStorageOrder[93451] def RMO[93447]:ArrayStorageOrder[93451] def CMO[93449]:ArrayStorageOrder[93451]
  unknown defaultStorageOrder[93460] "config" "param" RMO[93447]
  (93463 'end of statement')
  unknown storageOrder[93465] "param" defaultStorageOrder[93460]
  (93468 'end of statement')
  function polly_array_index[93477](arg arguments[93473] ... :
  int(64)[13]) : _unknown[51] "lineno ok" "llvm readnone"
  {
    unknown rank[93490] "param"(93488 call /(93485 call -(93481 call . arguments[93473] c"size") 1) 2)
    (93493 'end of statement')
    unknown blkStart[93496] "param" 2
    (93499 'end of statement')
    unknown blkEnd[93507] "param"(93505 call -(93502 call + 2 rank[93490]) 1)
    (93510 'end of statement')
    unknown indStart[93515] "param"(93513 call + blkEnd[93507] 1)
    (93518 'end of statement')
    unknown indEnd[93526] "param"(93524 call -(93521 call + indStart[93515] rank[93490]) 1)
    (93529 'end of statement')
    unknown offset[93534](93533 call arguments[93473] 0)
    (93537 'end of statement')
    unknown blk[93542](93540 call * rank[93490] int(64)[13])
    (93545 'end of statement')
    unknown ind[93550](93548 call * rank[93490] int(64)[13])
    (93553 'end of statement')
    (93562 call =(93560 call blk[93542](93557 call - rank[93490] 1)) 1)
    {
      unknown i[93600] 0
      unknown tmp[93601] "maybe param" "temp"
      (93612 'move' tmp[93601](93610 call chpl_compute_low_param_loop_bound 0(93568 call - rank[93490] 2)))
      unknown tmp[93602] "maybe param" "temp"
      (93622 'move' tmp[93602](93620 call chpl_compute_high_param_loop_bound 0(93617 call - rank[93490] 2)))
      unknown tmp[93603] "maybe param" "temp"
      (93625 'move' tmp[93603](93573 call - 1))
      ParamForLoop[93627]
      { i[93600] tmp[93601] tmp[93602] tmp[93603]
        (93597 call =(93580 call blk[93542] i[93600])(93595 call *(93587 call blk[93542](93584 call + i[93600] 1))(93594 call arguments[93473](93591 call + blkStart[93496] i[93600]))))
      }
      label _unused_continueLabel[93605]
      label _breakLabel[93604]
    }
    {
      unknown j[93661] 0
      unknown tmp[93662] "maybe param" "temp"
      (93674 'move' tmp[93662](93672 call chpl_compute_low_param_loop_bound 0(93639 call - rank[93490] 1)))
      unknown tmp[93663] "maybe param" "temp"
      (93684 'move' tmp[93663](93682 call chpl_compute_high_param_loop_bound 0(93679 call - rank[93490] 1)))
      unknown tmp[93664] "maybe param" "temp"
      (93687 'move' tmp[93664] 1)
      ParamForLoop[93689]
      { j[93661] tmp[93662] tmp[93663] tmp[93664]
        {
          (93657 call =(93646 call ind[93550] j[93661])(93656 call arguments[93473](93653 call -(93650 call + indStart[93515] j[93661]) 1)))
        }
      }
      label _unused_continueLabel[93666]
      label _breakLabel[93665]
    }
    unknown ret[93700] offset[93534] int(64)[13]
    (93703 'end of statement')
    {
      unknown i[93726] 0
      unknown tmp[93727] "maybe param" "temp"
      (93739 'move' tmp[93727](93737 call chpl_compute_low_param_loop_bound 0(93707 call - rank[93490] 1)))
      unknown tmp[93728] "maybe param" "temp"
      (93749 'move' tmp[93728](93747 call chpl_compute_high_param_loop_bound 0(93744 call - rank[93490] 1)))
      unknown tmp[93729] "maybe param" "temp"
      (93752 'move' tmp[93729] 1)
      ParamForLoop[93754]
      { i[93726] tmp[93727] tmp[93728] tmp[93729]
        {
          (93722 call += ret[93700](93720 call *(93715 call ind[93550] i[93726])(93719 call blk[93542] i[93726])))
        }
      }
      label _unused_continueLabel[93731]
      label _breakLabel[93730]
    }
    (93764 return ret[93700])
  }
  { scopeless type
    int(64)[13]
  }
  function DefaultDist[93989].dsiNewRectangularDom[93778](arg _mt[93993]:_MT[238], arg this[93991]:DefaultDist[93989], param arg rank[93775] :
  int(64)[13], arg idxType[93780]:_any[178](?), param arg stridable[93783] :
  bool[10], arg inds[93786]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    const dom[93801] "const"(93790 'new'(_chpl_manager = unmanaged[220](?))(93800 call DefaultRectangularDom[372737](?) rank[93775] idxType[93780] stridable[93783](93799 call _to_unmanaged this[93991])))
    (93804 'end of statement')
    (93814 call(93809 call . dom[93801] c"dsiSetIndices") inds[93786])
    (93817 return dom[93801])
  }
  function DefaultDist[93989].dsiNewAssociativeDom[93825](arg _mt[93997]:_MT[238], arg this[93995]:DefaultDist[93989], arg idxType[93823]:_any[178](?), param arg parSafe[93828] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93843 return(93833 'new'(_chpl_manager = unmanaged[220](?))(93842 call DefaultAssociativeDom[378026](?) idxType[93823] parSafe[93828](93841 call _to_unmanaged this[93995]))))
  }
  function DefaultDist[93989].dsiNewSparseDom[93854](arg _mt[94001]:_MT[238], arg this[93999]:DefaultDist[93989], param arg rank[93851] :
  int(64)[13], arg idxType[93856]:_any[178](?), arg dom[93859] :
  _domain[125902](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93875 return(93864 'new'(_chpl_manager = unmanaged[220](?))(93874 call DefaultSparseDom[378034](?) rank[93851] idxType[93856](93872 call _to_unmanaged this[93999]) dom[93859])))
  }
  function DefaultDist[93989].dsiIndexToLocale[93884](arg _mt[94005]:_MT[238], arg this[94003]:DefaultDist[93989], arg ind[93882]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (93890 return(93888 call chpl_localeID_to_locale(93887 '_wide_get_locale' this[94003])))
  }
  function DefaultDist[93989].dsiClone[93897](arg _mt[94009]:_MT[238], arg this[94007]:DefaultDist[93989]) : _unknown[51] "method" "primary method"
  {
    (93903 return(93902 call _to_unmanaged this[94007]))
  }
  function DefaultDist[93989].dsiAssign[93916](arg _mt[94013]:_MT[238], arg this[94011]:DefaultDist[93989], arg other[93913] :
  (93912 'to unmanaged class from unknown'(93911 'typeof' this[94011]))) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function DefaultDist[93989].dsiEqualDMaps[93928](arg _mt[94017]:_MT[238], arg this[94015]:DefaultDist[93989], arg d[93925] :
  unmanaged DefaultDist[415444]) param : _unknown[51] "method" "primary method"
  {
    (93931 return 1)
  }
  function DefaultDist[93989].dsiEqualDMaps[93940](arg _mt[94021]:_MT[238], arg this[94019]:DefaultDist[93989], arg d[93938]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (93943 return 0)
  }
  function DefaultDist[93989].trackDomains[93950](arg _mt[94025]:_MT[238], arg this[94023]:DefaultDist[93989]) param : _unknown[51] "method" "primary method"
  {
    (93953 return 0)
  }
  function DefaultDist[93989].dsiTrackDomains[93960](arg _mt[94029]:_MT[238], arg this[94027]:DefaultDist[93989]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93963 return 0)
  }
  function DefaultDist[93989].singleton[93970](arg _mt[94033]:_MT[238], arg this[94031]:DefaultDist[93989]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (93973 return 1)
  }
  function DefaultDist[93989].dsiIsLayout[93980](arg _mt[94037]:_MT[238], arg this[94035]:DefaultDist[93989]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (93983 return 1)
  }
  type DefaultDist[93989] val super[355654]:BaseDist[145926] "super class"
  type unmanaged DefaultDist[415444]
  type DefaultDist[378045](?)
  unknown defaultDist[94050] "locale private"(94040 'new'(94049 call dmap[118239](94044 'new'(_chpl_manager = unmanaged[220](?))(94047 call DefaultDist[378045](?)))))
  (94053 'end of statement')
  function chpl_defaultDistInitPrivate[94056]() : _unknown[51] "no return value for void"
  {
    if(94096 call _cond_test(94063 call ==(94059 call . defaultDist[94050] c"_value") nil[44]))
    {
      const nd[94075] "const"(94065 'new'(94074 call dmap[118239](94069 'new'(_chpl_manager = unmanaged[220](?))(94072 call DefaultDist[378045](?)))))
      (94078 'end of statement')
      (94094 'move' defaultDist[94050](94093 call chpl__autoCopy(94091 call(94087 call . nd[94075] c"clone"))))
    }
  }
  function DefaultRectangularDom[100787](?).linksDistribution[94130](arg _mt[100791]:_MT[238], arg this[100789]:DefaultRectangularDom[100787](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (94133 return 0)
  }
  function DefaultRectangularDom[100787](?).dsiLinksDistribution[94140](arg _mt[100795]:_MT[238], arg this[100793]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (94143 return 0)
  }
  function DefaultRectangularDom[415294](?).isDefaultRectangular[94150](arg _mt[100799]:_MT[238], arg this[100797]:DefaultRectangularDom[415294](?)) param : _unknown[51] "method" "primary method"
  {
    (94153 return 1)
  }
  function DefaultRectangularDom[100787](?).isDefaultRectangular[94160](arg _mt[100803]:_MT[238], arg this[100801]:DefaultRectangularDom[100787](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (94163 return 1)
  }
  function DefaultRectangularDom[100787](?).init[94172](arg _mt[100807]:_MT[238], arg this[100805]:DefaultRectangularDom[100787](?), param arg rank[94170]:_any[178](?), arg idxType[94174]:_any[178](?), param arg stridable[94176]:_any[178](?), arg dist[94178]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94188 call(94181 call .(358495 call . this[100805] c"super") c"init") rank[94170] idxType[94174] stridable[94176])
    (94198 call =(94194 call . this[100805] c"dist") dist[94178])
  }
  function DefaultRectangularDom[100787](?).intIdxType[94205](arg _mt[100811]:_MT[238], arg this[100809]:DefaultRectangularDom[100787](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (94211 return(94210 call chpl__idxTypeToIntIdxType(378064 call . this[100809] c"idxType")))
  }
  function DefaultRectangularDom[100787](?).dsiMyDist[94218](arg _mt[100815]:_MT[238], arg this[100813]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (94221 return(378069 call . this[100813] c"dist"))
  }
  function DefaultRectangularDom[100787](?).chpl__serialize[94252](arg _mt[100819]:_MT[238], arg this[100817]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method"
  {
    (94265 return(94254 'new'(94264 call _serialized_domain[94247](?)(378077 call . this[100817] c"rank")(378082 call . this[100817] c"idxType")(378087 call . this[100817] c"stridable")(94262 call(378091 call . this[100817] c"dsiDims")) 1)))
  }
  function DefaultRectangularDom[415294](?).chpl__deserialize[94274](arg _mt[100823]:_MT[238], arg this[100821]:DefaultRectangularDom[415294](?), arg data[94272]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (94302 return(94301 call(94279 call . defaultDist[94050] c"newRectangularDom")(94283 call . data[94272] c"rank")(94288 call . data[94272] c"idxType")(94292 call . data[94272] c"stridable")(94298 call . data[94272] c"dims")))
  }
  function DefaultRectangularDom[100787](?).dsiDisplayRepresentation[94309](arg _mt[100827]:_MT[238], arg this[100825]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (94331 call writeln "ranges = "(378096 call . this[100825] c"ranges"))
  }
  function DefaultRectangularDom[100787](?).dsiGetIndices[94338](arg _mt[100831]:_MT[238], arg this[100829]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method"
  {
    (94341 return(378101 call . this[100829] c"ranges"))
  }
  function DefaultRectangularDom[100787](?).dsiSetIndices[94350](arg _mt[100835]:_MT[238], arg this[100833]:DefaultRectangularDom[100787](?), arg x[94348]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94354 call =(378106 call . this[100833] c"ranges") x[94348])
  }
  function DefaultRectangularDom[100787](?).dsiAssignDomain[94366](arg _mt[100839]:_MT[238], arg this[100837]:DefaultRectangularDom[100787](?), arg rhs[94363] :
  _domain[125902](?), arg lhsPrivate[94369] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94376 call chpl_assignDomainWithGetSetIndices this[100837] rhs[94363])
  }
  function DefaultRectangularDom[100787](?).these_help[94387](arg _mt[100843]:_MT[238], arg this[100841]:DefaultRectangularDom[100787](?), param arg d[94384] :
  int(64)[13]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94629 call _cond_test(94394 call == d[94384](94392 call -(378116 call . this[100841] c"rank") 1)))
    {
      {
        unknown _indexOfInterest[94404] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94405] "expr temp" "temp"
        (94414 'move' _iterator[94405](94412 call _getIterator(94400 call(378121 call . this[100841] c"ranges") d[94384])))
        Defer
        {
          {
            (94431 call _freeIterator _iterator[94405])
          }
        }
        { scopeless type
          (94420 'move' _indexOfInterest[94404](94417 call iteratorIndex _iterator[94405]))
        }
        ForLoop[94406]
        {
          unknown i[94424] "index var" "insert auto destroy"
          (94426 'move' i[94424] _indexOfInterest[94404])
          (94402 yield i[94424])
          label _continueLabel[94409]
          _indexOfInterest[94404]
          _iterator[94405]
        }
        label _breakLabel[94410]
      }
    }
    {
      if(94625 call _cond_test(94444 call == d[94384](94442 call -(378129 call . this[100841] c"rank") 2)))
      {
        {
          unknown _indexOfInterest[94500] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94501] "expr temp" "temp"
          (94510 'move' _iterator[94501](94508 call _getIterator(94450 call(378134 call . this[100841] c"ranges") d[94384])))
          Defer
          {
            {
              (94527 call _freeIterator _iterator[94501])
            }
          }
          { scopeless type
            (94516 'move' _indexOfInterest[94500](94513 call iteratorIndex _iterator[94501]))
          }
          ForLoop[94502]
          {
            unknown i[94520] "index var" "insert auto destroy"
            (94522 'move' i[94520] _indexOfInterest[94500])
            {
              unknown _indexOfInterest[94466] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94467] "expr temp" "temp"
              (94476 'move' _iterator[94467](94474 call _getIterator(94458 call(378141 call . this[100841] c"these_help")(94455 call -(378146 call . this[100841] c"rank") 1))))
              Defer
              {
                {
                  (94493 call _freeIterator _iterator[94467])
                }
              }
              { scopeless type
                (94482 'move' _indexOfInterest[94466](94479 call iteratorIndex _iterator[94467]))
              }
              ForLoop[94468]
              {
                unknown j[94486] "index var" "insert auto destroy"
                (94488 'move' j[94486] _indexOfInterest[94466])
                (94464 yield(94462 call _build_tuple i[94520] j[94486]))
                label _continueLabel[94471]
                _indexOfInterest[94466]
                _iterator[94467]
              }
              label _breakLabel[94472]
            }
            label _continueLabel[94505]
            _indexOfInterest[94500]
            _iterator[94501]
          }
          label _breakLabel[94506]
        }
      }
      {
        {
          unknown _indexOfInterest[94590] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94591] "expr temp" "temp"
          (94600 'move' _iterator[94591](94598 call _getIterator(94539 call(378153 call . this[100841] c"ranges") d[94384])))
          Defer
          {
            {
              (94617 call _freeIterator _iterator[94591])
            }
          }
          { scopeless type
            (94606 'move' _indexOfInterest[94590](94603 call iteratorIndex _iterator[94591]))
          }
          ForLoop[94592]
          {
            unknown i[94610] "index var" "insert auto destroy"
            (94612 'move' i[94610] _indexOfInterest[94590])
            {
              unknown _indexOfInterest[94556] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94557] "expr temp" "temp"
              (94566 'move' _iterator[94557](94564 call _getIterator(94547 call(378158 call . this[100841] c"these_help")(94544 call + d[94384] 1))))
              Defer
              {
                {
                  (94583 call _freeIterator _iterator[94557])
                }
              }
              { scopeless type
                (94572 'move' _indexOfInterest[94556](94569 call iteratorIndex _iterator[94557]))
              }
              ForLoop[94558]
              {
                unknown j[94576] "index var" "insert auto destroy"
                (94578 'move' j[94576] _indexOfInterest[94556])
                (94554 yield(94552 call _build_tuple i[94610](94550 'expand_tuple' j[94576])))
                label _continueLabel[94561]
                _indexOfInterest[94556]
                _iterator[94557]
              }
              label _breakLabel[94562]
            }
            label _continueLabel[94595]
            _indexOfInterest[94590]
            _iterator[94591]
          }
          label _breakLabel[94596]
        }
      }
    }
  }
  function DefaultRectangularDom[100787](?).these_help[94643](arg _mt[100847]:_MT[238], arg this[100845]:DefaultRectangularDom[100787](?), param arg d[94640] :
  int(64)[13], arg block[94645]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94898 call _cond_test(94655 call == d[94640](94653 call -(94649 call . block[94645] c"size") 1)))
    {
      {
        unknown _indexOfInterest[94665] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94666] "expr temp" "temp"
        (94675 'move' _iterator[94666](94673 call _getIterator(94661 call block[94645] d[94640])))
        Defer
        {
          {
            (94692 call _freeIterator _iterator[94666])
          }
        }
        { scopeless type
          (94681 'move' _indexOfInterest[94665](94678 call iteratorIndex _iterator[94666]))
        }
        ForLoop[94667]
        {
          unknown i[94685] "index var" "insert auto destroy"
          (94687 'move' i[94685] _indexOfInterest[94665])
          (94663 yield i[94685])
          label _continueLabel[94670]
          _indexOfInterest[94665]
          _iterator[94666]
        }
        label _breakLabel[94671]
      }
    }
    {
      if(94894 call _cond_test(94708 call == d[94640](94706 call -(94702 call . block[94645] c"size") 2)))
      {
        {
          unknown _indexOfInterest[94768] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94769] "expr temp" "temp"
          (94778 'move' _iterator[94769](94776 call _getIterator(94714 call block[94645] d[94640])))
          Defer
          {
            {
              (94795 call _freeIterator _iterator[94769])
            }
          }
          { scopeless type
            (94784 'move' _indexOfInterest[94768](94781 call iteratorIndex _iterator[94769]))
          }
          ForLoop[94770]
          {
            unknown i[94788] "index var" "insert auto destroy"
            (94790 'move' i[94788] _indexOfInterest[94768])
            {
              unknown _indexOfInterest[94734] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94735] "expr temp" "temp"
              (94744 'move' _iterator[94735](94742 call _getIterator(94726 call(378172 call . this[100845] c"these_help")(94722 call -(94718 call . block[94645] c"size") 1) block[94645])))
              Defer
              {
                {
                  (94761 call _freeIterator _iterator[94735])
                }
              }
              { scopeless type
                (94750 'move' _indexOfInterest[94734](94747 call iteratorIndex _iterator[94735]))
              }
              ForLoop[94736]
              {
                unknown j[94754] "index var" "insert auto destroy"
                (94756 'move' j[94754] _indexOfInterest[94734])
                (94732 yield(94730 call _build_tuple i[94788] j[94754]))
                label _continueLabel[94739]
                _indexOfInterest[94734]
                _iterator[94735]
              }
              label _breakLabel[94740]
            }
            label _continueLabel[94773]
            _indexOfInterest[94768]
            _iterator[94769]
          }
          label _breakLabel[94774]
        }
      }
      {
        {
          unknown _indexOfInterest[94859] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94860] "expr temp" "temp"
          (94869 'move' _iterator[94860](94867 call _getIterator(94807 call block[94645] d[94640])))
          Defer
          {
            {
              (94886 call _freeIterator _iterator[94860])
            }
          }
          { scopeless type
            (94875 'move' _indexOfInterest[94859](94872 call iteratorIndex _iterator[94860]))
          }
          ForLoop[94861]
          {
            unknown i[94879] "index var" "insert auto destroy"
            (94881 'move' i[94879] _indexOfInterest[94859])
            {
              unknown _indexOfInterest[94825] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94826] "expr temp" "temp"
              (94835 'move' _iterator[94826](94833 call _getIterator(94816 call(378181 call . this[100845] c"these_help")(94812 call + d[94640] 1) block[94645])))
              Defer
              {
                {
                  (94852 call _freeIterator _iterator[94826])
                }
              }
              { scopeless type
                (94841 'move' _indexOfInterest[94825](94838 call iteratorIndex _iterator[94826]))
              }
              ForLoop[94827]
              {
                unknown j[94845] "index var" "insert auto destroy"
                (94847 'move' j[94845] _indexOfInterest[94825])
                (94823 yield(94821 call _build_tuple i[94879](94819 'expand_tuple' j[94845])))
                label _continueLabel[94830]
                _indexOfInterest[94825]
                _iterator[94826]
              }
              label _breakLabel[94831]
            }
            label _continueLabel[94864]
            _indexOfInterest[94859]
            _iterator[94860]
          }
          label _breakLabel[94865]
        }
      }
    }
  }
  function DefaultRectangularDom[100787](?).these[94912](arg _mt[100851]:_MT[238], arg this[100849]:DefaultRectangularDom[100787](?), arg tasksPerLocale[94909] =
  dataParTasksPerLocale[93281], arg ignoreRunning[94915] =
  dataParIgnoreRunningTasks[93287], arg minIndicesPerTask[94919] =
  dataParMinGranularity[93293], arg offset[94931] =
  (94930 call createTuple(378193 call . this[100849] c"rank")(378197 call . this[100849] c"intIdxType")(94928 call _cast(378201 call . this[100849] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(95024 call _cond_test(94936 call ==(378206 call . this[100849] c"rank") 1))
    {
      {
        unknown _indexOfInterest[94946] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94947] "expr temp" "temp"
        (94956 'move' _iterator[94947](94954 call _getIterator(94942 call(378211 call . this[100849] c"ranges") 0)))
        Defer
        {
          {
            (94973 call _freeIterator _iterator[94947])
          }
        }
        { scopeless type
          (94962 'move' _indexOfInterest[94946](94959 call iteratorIndex _iterator[94947]))
        }
        ForLoop[94948]
        {
          unknown i[94966] "index var" "insert auto destroy"
          (94968 'move' i[94966] _indexOfInterest[94946])
          (94944 yield i[94966])
          label _continueLabel[94951]
          _indexOfInterest[94946]
          _iterator[94947]
        }
        label _breakLabel[94952]
      }
    }
    {
      {
        unknown _indexOfInterest[94989] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94990] "expr temp" "temp"
        (94999 'move' _iterator[94990](94997 call _getIterator(94985 call(378216 call . this[100849] c"these_help") 0)))
        Defer
        {
          {
            (95016 call _freeIterator _iterator[94990])
          }
        }
        { scopeless type
          (95005 'move' _indexOfInterest[94989](95002 call iteratorIndex _iterator[94990]))
        }
        ForLoop[94991]
        {
          unknown i[95009] "index var" "insert auto destroy"
          (95011 'move' i[95009] _indexOfInterest[94989])
          (94987 yield i[95009])
          label _continueLabel[94994]
          _indexOfInterest[94989]
          _iterator[94990]
        }
        label _breakLabel[94995]
      }
    }
  }
  function DefaultRectangularDom[100787](?).these[95037](arg _mt[100855]:_MT[238], arg this[100853]:DefaultRectangularDom[100787](?), param arg tag[95034] :
  iterKind[453], arg tasksPerLocale[95040] =
  dataParTasksPerLocale[93281], arg ignoreRunning[95044] =
  dataParIgnoreRunningTasks[93287], arg minIndicesPerTask[95048] =
  dataParMinGranularity[93293], arg offset[95060] =
  (95059 call createTuple(378226 call . this[100853] c"rank")(378230 call . this[100853] c"intIdxType")(95057 call _cast(378234 call . this[100853] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(95093 call _cond_test chpl__testParFlag[188300])
    {
      (95091 call chpl__testPar "default rectangular domain standalone invoked on "(378241 call . this[100853] c"ranges"))
    }
    if(95121 call _cond_test debugDefaultDist[93392])
    {
      (95119 call chpl_debug_writeln "*** In domain standalone code:")
    }
    const numTasks[95138] "const"(95135 IfExpr (95128 call == tasksPerLocale[95040] 0) then
    { scopeless
      (95131 call .(358508 call here[90435]) c"maxTaskPar")
    } else
    { scopeless
      tasksPerLocale[95040]
    } )
    (95141 'end of statement')
    if(95202 call _cond_test debugDefaultDist[93392])
    {
      (95199 call chpl_debug_writeln "    numTasks=" numTasks[95138] " (" ignoreRunning[95044] "), minIndicesPerTask=" minIndicesPerTask[95048])
    }
    const tmp[95231] "const" "temp"(95228 IfExpr (95213 'task_get_serial') then
    { scopeless
      (95219 call _build_tuple 1(95216 call - 1))
    } else
    { scopeless
      (95227 call _computeChunkStuff numTasks[95138] ignoreRunning[95044] minIndicesPerTask[95048](378256 call . this[100853] c"ranges"))
    } )
    (95238 call _check_tuple_var_decl tmp[95231] 2)
    const numChunks[95206] "const"(95232 call tmp[95231] 0)
    const parDim[95208] "const"(95235 call tmp[95231] 1)
    (95243 'end of statement')
    if(95328 call _cond_test debugDefaultDist[93392])
    {
      (95325 call chpl_debug_writeln "    numChunks=" numChunks[95206] " parDim=" parDim[95208] " ranges(" parDim[95208] ").size="(95322 call .(95321 call(378265 call . this[100853] c"ranges") parDim[95208]) c"size"))
    }
    if(95418 call _cond_test debugDataPar[93402])
    {
      (95415 call chpl_debug_writeln "### numTasksPerLoc = " numTasks[95138] "\n" "### ignoreRunning = " ignoreRunning[95044] "\n" "### minIndicesPerTask = " minIndicesPerTask[95048] "\n" "### numChunks = " numChunks[95206] " (parDim = " parDim[95208] ")\n" "### nranges = "(378277 call . this[100853] c"ranges"))
    }
    if(96098 call _cond_test(95424 call <= numChunks[95206] 1))
    {
      {
        unknown _indexOfInterest[95435] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[95436] "expr temp" "temp"
        (95445 'move' _iterator[95436](95443 call _getIterator(95430 call(378282 call . this[100853] c"these_help") 0)))
        Defer
        {
          {
            (95462 call _freeIterator _iterator[95436])
          }
        }
        { scopeless type
          (95451 'move' _indexOfInterest[95435](95448 call iteratorIndex _iterator[95436]))
        }
        ForLoop[95437]
        {
          unknown i[95455] "index var" "insert auto destroy"
          (95457 'move' i[95455] _indexOfInterest[95435])
          {
            (95432 yield i[95455])
          }
          label _continueLabel[95440]
          _indexOfInterest[95435]
          _iterator[95436]
        }
        label _breakLabel[95441]
      }
    }
    {
      if(95494 call _cond_test debugDefaultDist[93392])
      {
        (95491 call chpl_debug_writeln "*** DI: ranges = "(378289 call . this[100853] c"ranges"))
      }
      {
        unknown tmpIter[95751] "expr temp" "maybe ref" "no copy" "temp"
        (95754 'move' tmpIter[95751](95504 call #(95501 call chpl_build_low_bounded_range 0) numChunks[95206]))
        unknown isRngDomArr[96079] "maybe param" "temp"
        (96094 'move' isRngDomArr[96079](96092 call ||(96081 call isBoundedRange tmpIter[95751])(96090 call ||(96084 call isDomain tmpIter[95751])(96087 call isArray tmpIter[95751]))))
        if isRngDomArr[96079]
        {
          const _coforallCount[95946] "const" "end count" "temp"
          (96015 'move' _coforallCount[95946](96012 call _endCountAlloc 1))
          unknown numTasks[95947] "temp"
          (95999 'move' numTasks[95947](95995 call . tmpIter[95751] c"size"))
          (95990 call _upEndCount _coforallCount[95946] 1 numTasks[95947])
          (95987 call chpl_resetTaskSpawn numTasks[95947])
          unknown _indexOfInterest[95954] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[95955] "expr temp" "temp"
          (95964 'move' _iterator[95955](95962 call _getIterator tmpIter[95751]))
          Defer
          {
            {
              (95980 call _freeIterator _iterator[95955])
            }
          }
          { scopeless type
            (95969 'move' _indexOfInterest[95954](95966 call iteratorIndex _iterator[95955]))
          }
          ForLoop[95956]
          {
            unknown chunk[95973] "coforall index var" "index var" "insert auto destroy"
            (95975 'move' chunk[95973] _indexOfInterest[95954])
            {
              {
                unknown block[95758](378368 call . this[100853] c"ranges")
                (95761 'end of statement')
                const len[95763] "const"(95802 IfExpr (95765 call !(95767 call .(95769 call(378373 call . this[100853] c"ranges") parDim[95208]) c"stridable")) then
                { scopeless
                  (95774 call .(95776 call(378379 call . this[100853] c"ranges") parDim[95208]) c"size")
                } else
                { scopeless
                  (95781 call *(95783 call _cast uint(64)[115](95786 call .(95788 call(378385 call . this[100853] c"ranges") parDim[95208]) c"size"))(95792 call _cast uint(64)[115](95795 call abs(95797 call .(95799 call(378391 call . this[100853] c"ranges") parDim[95208]) c"stride"))))
                } )
                (95804 'end of statement')
                const tmp[95806] "const" "temp"(95808 call _computeBlock len[95763] numChunks[95206] chunk[95973](95813 call .(95815 call(378400 call . this[100853] c"ranges") parDim[95208]) c"_high")(95819 call .(95821 call(378406 call . this[100853] c"ranges") parDim[95208]) c"_low")(95825 call .(95827 call(378412 call . this[100853] c"ranges") parDim[95208]) c"_low"))
                (95832 call _check_tuple_var_decl tmp[95806] 2)
                const lo[95835] "const"(95837 call tmp[95806] 0)
                const hi[95840] "const"(95842 call tmp[95806] 1)
                (95845 'end of statement')
                if(95847 call _cond_test(95849 call .(95851 call block[95758] parDim[95208]) c"stridable"))
                {
                  (95857 call =(95859 call block[95758] parDim[95208])(95862 call chpl_align(95864 call chpl_by(95866 call chpl_build_bounded_range lo[95835] hi[95840])(95870 call .(95872 call block[95758] parDim[95208]) c"stride"))(95876 call chpl__idxToInt(95878 call .(95880 call block[95758] parDim[95208]) c"alignment"))))
                }
                {
                  (95886 call =(95888 call block[95758] parDim[95208])(95891 call chpl_build_bounded_range lo[95835] hi[95840]))
                }
                if(95896 call _cond_test debugDefaultDist[93392])
                {
                  (95900 call chpl_debug_writeln "*** DI[" chunk[95973] "]: block = " block[95758])
                }
                {
                  unknown _indexOfInterest[95907] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[95909] "expr temp" "temp"
                  (95911 'move' _iterator[95909](95914 call _getIterator(95916 call(378434 call . this[100853] c"these_help") 0 block[95758])))
                  Defer
                  {
                    {
                      (95921 call _freeIterator _iterator[95909])
                    }
                  }
                  { scopeless type
                    (95925 'move' _indexOfInterest[95907](95928 call iteratorIndex _iterator[95909]))
                  }
                  ForLoop[95930]
                  {
                    unknown i[95933] "index var" "insert auto destroy"
                    (95935 'move' i[95933] _indexOfInterest[95907])
                    {
                      (95939 yield i[95933])
                    }
                    label _continueLabel[95941]
                    _indexOfInterest[95907]
                    _iterator[95909]
                  }
                  label _breakLabel[95943]
                }
              }
              (95949 call _downEndCount _coforallCount[95946] nil[44])
              (95948 'coforall loop')
            }
            label _continueLabel[95959]
            _indexOfInterest[95954]
            _iterator[95955]
          }
          label _breakLabel[95960]
          Defer
          {
            {
              (96002 call _endCountFree _coforallCount[95946])
            }
          }
          (96007 call _waitEndCount _coforallCount[95946] 1 numTasks[95947])
        }
        {
          const _coforallCount[96019] "const" "end count" "temp"
          (96076 'move' _coforallCount[96019](96073 call _endCountAlloc 1))
          unknown _indexOfInterest[96027] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[96028] "expr temp" "temp"
          (96037 'move' _iterator[96028](96035 call _getIterator tmpIter[95751]))
          Defer
          {
            {
              (96053 call _freeIterator _iterator[96028])
            }
          }
          { scopeless type
            (96042 'move' _indexOfInterest[96027](96039 call iteratorIndex _iterator[96028]))
          }
          ForLoop[96029]
          {
            unknown chunk[96046] "coforall index var" "index var" "insert auto destroy"
            (96048 'move' chunk[96046] _indexOfInterest[96027])
            (96060 call _upEndCount _coforallCount[96019] 1)
            {
              {
                unknown block[95507](378295 call . this[100853] c"ranges")
                (95510 'end of statement')
                const len[95556] "const"(95553 IfExpr (95519 call !(95516 call .(95515 call(378300 call . this[100853] c"ranges") parDim[95208]) c"stridable")) then
                { scopeless
                  (95525 call .(95524 call(378306 call . this[100853] c"ranges") parDim[95208]) c"size")
                } else
                { scopeless
                  (95551 call *(95536 call _cast uint(64)[115](95532 call .(95531 call(378312 call . this[100853] c"ranges") parDim[95208]) c"size"))(95549 call _cast uint(64)[115](95547 call abs(95543 call .(95542 call(378318 call . this[100853] c"ranges") parDim[95208]) c"stride"))))
                } )
                (95559 'end of statement')
                const tmp[95592] "const" "temp"(95591 call _computeBlock len[95556] numChunks[95206] chunk[96046](95574 call .(95573 call(378327 call . this[100853] c"ranges") parDim[95208]) c"_high")(95581 call .(95580 call(378333 call . this[100853] c"ranges") parDim[95208]) c"_low")(95588 call .(95587 call(378339 call . this[100853] c"ranges") parDim[95208]) c"_low"))
                (95599 call _check_tuple_var_decl tmp[95592] 2)
                const lo[95560] "const"(95593 call tmp[95592] 0)
                const hi[95562] "const"(95596 call tmp[95592] 1)
                (95604 'end of statement')
                if(95655 call _cond_test(95609 call .(95608 call block[95507] parDim[95208]) c"stridable"))
                {
                  (95641 call =(95615 call block[95507] parDim[95208])(95639 call chpl_align(95627 call chpl_by(95618 call chpl_build_bounded_range lo[95560] hi[95562])(95624 call .(95623 call block[95507] parDim[95208]) c"stride"))(95638 call chpl__idxToInt(95634 call .(95633 call block[95507] parDim[95208]) c"alignment"))))
                }
                {
                  (95652 call =(95647 call block[95507] parDim[95208])(95650 call chpl_build_bounded_range lo[95560] hi[95562]))
                }
                if(95703 call _cond_test debugDefaultDist[93392])
                {
                  (95700 call chpl_debug_writeln "*** DI[" chunk[96046] "]: block = " block[95507])
                }
                {
                  unknown _indexOfInterest[95717] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[95718] "expr temp" "temp"
                  (95727 'move' _iterator[95718](95725 call _getIterator(95712 call(378361 call . this[100853] c"these_help") 0 block[95507])))
                  Defer
                  {
                    {
                      (95744 call _freeIterator _iterator[95718])
                    }
                  }
                  { scopeless type
                    (95733 'move' _indexOfInterest[95717](95730 call iteratorIndex _iterator[95718]))
                  }
                  ForLoop[95719]
                  {
                    unknown i[95737] "index var" "insert auto destroy"
                    (95739 'move' i[95737] _indexOfInterest[95717])
                    {
                      (95714 yield i[95737])
                    }
                    label _continueLabel[95722]
                    _indexOfInterest[95717]
                    _iterator[95718]
                  }
                  label _breakLabel[95723]
                }
              }
              (96022 call _downEndCount _coforallCount[96019] nil[44])
              (96021 'coforall loop')
            }
            label _continueLabel[96032]
            _indexOfInterest[96027]
            _iterator[96028]
          }
          label _breakLabel[96033]
          Defer
          {
            {
              (96064 call _endCountFree _coforallCount[96019])
            }
          }
          (96069 call _waitEndCount _coforallCount[96019] 1)
        }
      }
    }
  }
  where {
    (95068 call == tag[95034] standalone[451])
  }
  function DefaultRectangularDom[100787](?).these[96111](arg _mt[100859]:_MT[238], arg this[100857]:DefaultRectangularDom[100787](?), param arg tag[96108] :
  iterKind[453], arg tasksPerLocale[96114] =
  dataParTasksPerLocale[93281], arg ignoreRunning[96118] =
  dataParIgnoreRunningTasks[93287], arg minIndicesPerTask[96122] =
  dataParMinGranularity[93293], arg offset[96134] =
  (96133 call createTuple(378445 call . this[100857] c"rank")(378449 call . this[100857] c"intIdxType")(96131 call _cast(378453 call . this[100857] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    const numSublocs[96150] "const"(96149 call(96145 call .(358511 call here[90435]) c"getChildCount"))
    (96153 'end of statement')
    if(98809 call _cond_test(96160 call && localeModelHasSublocales[187403](96158 call != numSublocs[96150] 0)))
    {
      unknown dptpl[96174](96171 IfExpr (96164 call == tasksPerLocale[96114] 0) then
      { scopeless
        (96167 call .(358513 call here[90435]) c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale[96114]
      } )
      (96177 'end of statement')
      if(96215 call _cond_test(96180 call ! ignoreRunning[96118]))
      {
        const otherTasks[96191] "const"(96189 call -(96187 call(96183 call .(358515 call here[90435]) c"runningTasks")) 1)
        (96194 'end of statement')
        (96212 call = dptpl[96174](96209 IfExpr (96199 call < otherTasks[96191] dptpl[96174]) then
        { scopeless
          (96206 call _cast int(64)[13](96203 call - dptpl[96174] otherTasks[96191]))
        } else
        { scopeless
          1
        } ))
      }
      const numSublocTasks[96224] "const"(96223 call min numSublocs[96150] dptpl[96174])
      (96227 'end of statement')
      const tmp[96254] "const" "temp"(96251 IfExpr (96235 'task_get_serial') then
      { scopeless
        (96241 call _build_tuple 1(96238 call - 1))
      } else
      { scopeless
        (96250 call _computeChunkStuff numSublocTasks[96224](ignoreRunning = 1) minIndicesPerTask[96122](378473 call . this[100857] c"ranges"))
      } )
      (96261 call _check_tuple_var_decl tmp[96254] 2)
      const numChunks[96228] "const"(96255 call tmp[96254] 0)
      const parDim[96230] "const"(96258 call tmp[96254] 1)
      (96266 'end of statement')
      if(96292 call _cond_test debugDataParNuma[93407])
      {
        (96289 call chpl_debug_writeln "### numSublocs = " numSublocs[96150] "\n" "### numTasksPerSubloc = " numSublocTasks[96224] "\n" "### ignoreRunning = " ignoreRunning[96118] "\n" "### minIndicesPerTask = " minIndicesPerTask[96122] "\n" "### numChunks = " numChunks[96228] " (parDim = " parDim[96230] ")\n" "### nranges = "(378485 call . this[100857] c"ranges"))
      }
      if(98079 call _cond_test(96298 call == numChunks[96228] 1))
      {
        if(96405 call _cond_test(96302 call ==(378491 call . this[100857] c"rank") 1))
        {
          (96321 yield(96319 call _build_tuple(96317 call #(96308 call chpl_build_low_bounded_range(96307 call offset[96134] 0))(96314 call .(96313 call(378497 call . this[100857] c"ranges") 0) c"size"))))
        }
        {
          unknown block[96331](96329 call *(378502 call . this[100857] c"rank")(96328 call range[64316](?)(378507 call . this[100857] c"intIdxType")))
          (96334 'end of statement')
          {
            unknown i[96365] 0
            unknown tmp[96366] "maybe param" "temp"
            (96378 'move' tmp[96366](96376 call chpl_compute_low_param_loop_bound 0(96339 call -(378512 call . this[100857] c"rank") 1)))
            unknown tmp[96367] "maybe param" "temp"
            (96388 'move' tmp[96367](96386 call chpl_compute_high_param_loop_bound 0(96383 call -(378527 call . this[100857] c"rank") 1)))
            unknown tmp[96368] "maybe param" "temp"
            (96391 'move' tmp[96368] 1)
            ParamForLoop[96393]
            { i[96365] tmp[96366] tmp[96367] tmp[96368]
              (96362 call =(96346 call block[96331] i[96365])(96360 call #(96351 call chpl_build_low_bounded_range(96350 call offset[96134] i[96365]))(96357 call .(96356 call(378521 call . this[100857] c"ranges") i[96365]) c"size")))
            }
            label _unused_continueLabel[96370]
            label _breakLabel[96369]
          }
          (96403 yield block[96331])
        }
      }
      {
        {
          unknown tmpIter[97219] "expr temp" "maybe ref" "no copy" "temp"
          (97222 'move' tmpIter[97219](96415 call #(96412 call chpl_build_low_bounded_range 0) numChunks[96228]))
          unknown isRngDomArr[98059] "maybe param" "temp"
          (98074 'move' isRngDomArr[98059](98072 call ||(98061 call isBoundedRange tmpIter[97219])(98070 call ||(98064 call isDomain tmpIter[97219])(98067 call isArray tmpIter[97219]))))
          if isRngDomArr[98059]
          {
            const _coforallCount[97931] "const" "end count" "temp"
            (97996 'move' _coforallCount[97931](97993 call _endCountAlloc 0))
            unknown numTasks[97932] "temp"
            (97980 'move' numTasks[97932](97976 call . tmpIter[97219] c"size"))
            (97971 call _upEndCount _coforallCount[97931] 0 numTasks[97932])
            unknown _indexOfInterest[97938] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[97939] "expr temp" "temp"
            (97948 'move' _iterator[97939](97946 call _getIterator tmpIter[97219]))
            Defer
            {
              {
                (97964 call _freeIterator _iterator[97939])
              }
            }
            { scopeless type
              (97953 'move' _indexOfInterest[97938](97950 call iteratorIndex _iterator[97939]))
            }
            ForLoop[97940]
            {
              unknown chunk[97957] "coforall index var" "index var" "insert auto destroy"
              (97959 'move' chunk[97957] _indexOfInterest[97938])
              const tmp[97225] "const" "temp"
              (97227 'move' tmp[97225](97229 'deref'(97230 '_wide_get_locale'(97235 call(97232 call .(358519 call here[90435]) c"getChild") chunk[97957]))))
              {
                {
                  if(97243 call _cond_test debugDataParNuma[93407])
                  {
                    if(97247 call _cond_test(97249 call != chunk[97957](97252 call chpl_getSubloc)))
                    {
                      (97256 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[97957] ", on "(97261 call chpl_getSubloc) ") ***")
                    }
                  }
                  const numSublocTasks[97266] "const"(97287 IfExpr (97268 call < chunk[97957](97271 call % dptpl[96174] numChunks[96228])) then
                  { scopeless
                    (97276 call +(97278 call / dptpl[96174] numChunks[96228]) 1)
                  } else
                  { scopeless
                    (97284 call / dptpl[96174] numChunks[96228])
                  } )
                  (97289 'end of statement')
                  unknown locBlock[97291](97293 call *(378731 call . this[100857] c"rank")(97296 call range[64316](?)(378736 call . this[100857] c"intIdxType")))
                  (97299 'end of statement')
                  {
                    unknown i[97301] 0
                    unknown tmp[97304] "maybe param" "temp"
                    (97306 'move' tmp[97304](97309 call chpl_compute_low_param_loop_bound 0(97312 call -(378741 call . this[100857] c"rank") 1)))
                    unknown tmp[97315] "maybe param" "temp"
                    (97317 'move' tmp[97315](97320 call chpl_compute_high_param_loop_bound 0(97323 call -(378746 call . this[100857] c"rank") 1)))
                    unknown tmp[97326] "maybe param" "temp"
                    (97328 'move' tmp[97326] 1)
                    ParamForLoop[97331]
                    { i[97301] tmp[97304] tmp[97315] tmp[97326]
                      (97339 call =(97341 call locBlock[97291] i[97301])(97344 call #(97346 call chpl_build_low_bounded_range(97348 call offset[96134] i[97301]))(97351 call .(97353 call(378755 call . this[100857] c"ranges") i[97301]) c"size")))
                    }
                    label _unused_continueLabel[97356]
                    label _breakLabel[97358]
                  }
                  unknown followMe[97361] locBlock[97291](97364 call *(378762 call . this[100857] c"rank")(97367 call range[64316](?)(378767 call . this[100857] c"intIdxType")))
                  (97370 'end of statement')
                  const tmp[97372] "const" "temp"(97374 call _computeBlock(97376 call .(97378 call locBlock[97291] parDim[96230]) c"size") numChunks[96228] chunk[97957](97384 call .(97386 call locBlock[97291] parDim[96230]) c"_high")(97390 call .(97392 call locBlock[97291] parDim[96230]) c"_low")(97396 call .(97398 call locBlock[97291] parDim[96230]) c"_low"))
                  (97403 call _check_tuple_var_decl tmp[97372] 2)
                  const lo[97406] "const"(97408 call tmp[97372] 0)
                  const hi[97411] "const"(97413 call tmp[97372] 1)
                  (97416 'end of statement')
                  (97418 call =(97420 call followMe[97361] parDim[96230])(97423 call chpl_build_bounded_range lo[97406] hi[97411]))
                  const tmp[97427] "const" "temp"(97429 call _computeChunkStuff numSublocTasks[97266](ignoreRunning = 1) minIndicesPerTask[96122] followMe[97361])
                  (97437 call _check_tuple_var_decl tmp[97427] 2)
                  const numChunks2[97440] "const"(97442 call tmp[97427] 0)
                  const parDim2[97445] "const"(97447 call tmp[97427] 1)
                  (97450 'end of statement')
                  {
                    unknown tmpIter[97452] "expr temp" "maybe ref" "no copy" "temp"
                    (97454 'move' tmpIter[97452](97457 call #(97459 call chpl_build_low_bounded_range 0) numChunks2[97440]))
                    unknown isRngDomArr[97462] "maybe param" "temp"
                    (97464 'move' isRngDomArr[97462](97467 call ||(97469 call isBoundedRange tmpIter[97452])(97472 call ||(97474 call isDomain tmpIter[97452])(97477 call isArray tmpIter[97452]))))
                    if isRngDomArr[97462]
                    {
                      const _coforallCount[97481] "const" "end count" "temp"
                      (97483 'move' _coforallCount[97481](97486 call _endCountAlloc 1))
                      unknown numTasks[97488] "temp"
                      (97490 'move' numTasks[97488](97493 call . tmpIter[97452] c"size"))
                      (97497 call _upEndCount _coforallCount[97481] 1 numTasks[97488])
                      (97502 call chpl_resetTaskSpawn numTasks[97488])
                      unknown _indexOfInterest[97504] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97506] "expr temp" "temp"
                      (97508 'move' _iterator[97506](97511 call _getIterator tmpIter[97452]))
                      Defer
                      {
                        {
                          (97515 call _freeIterator _iterator[97506])
                        }
                      }
                      { scopeless type
                        (97519 'move' _indexOfInterest[97504](97522 call iteratorIndex _iterator[97506]))
                      }
                      ForLoop[97524]
                      {
                        unknown chunk2[97527] "coforall index var" "index var" "insert auto destroy"
                        (97529 'move' chunk2[97527] _indexOfInterest[97504])
                        {
                          {
                            unknown locBlock2[97536](97538 call *(378790 call . this[100857] c"rank")(97541 call range[64316](?)(378795 call . this[100857] c"intIdxType")))
                            (97544 'end of statement')
                            {
                              unknown i[97546] 0
                              unknown tmp[97549] "maybe param" "temp"
                              (97551 'move' tmp[97549](97554 call chpl_compute_low_param_loop_bound 0(97557 call -(378800 call . this[100857] c"rank") 1)))
                              unknown tmp[97560] "maybe param" "temp"
                              (97562 'move' tmp[97560](97565 call chpl_compute_high_param_loop_bound 0(97568 call -(378805 call . this[100857] c"rank") 1)))
                              unknown tmp[97571] "maybe param" "temp"
                              (97573 'move' tmp[97571] 1)
                              ParamForLoop[97576]
                              { i[97546] tmp[97549] tmp[97560] tmp[97571]
                                (97584 call =(97586 call locBlock2[97536] i[97546])(97589 call chpl_build_bounded_range(97591 call .(97593 call followMe[97361] i[97546]) c"low")(97597 call .(97599 call followMe[97361] i[97546]) c"high")))
                              }
                              label _unused_continueLabel[97602]
                              label _breakLabel[97604]
                            }
                            unknown followMe2[97607] locBlock2[97536](97610 call *(378817 call . this[100857] c"rank")(97613 call range[64316](?)(378822 call . this[100857] c"intIdxType")))
                            (97616 'end of statement')
                            const low[97618] "const"(97620 call .(97622 call locBlock2[97536] parDim2[97445]) c"_low")
                            const high[97626] "const"(97628 call .(97630 call locBlock2[97536] parDim2[97445]) c"_high")
                            (97634 'end of statement')
                            const tmp[97636] "const" "temp"(97638 call _computeBlock(97640 call .(97642 call locBlock2[97536] parDim2[97445]) c"size") numChunks2[97440] chunk2[97527] high[97626] low[97618] low[97618])
                            (97652 call _check_tuple_var_decl tmp[97636] 2)
                            const lo[97655] "const"(97657 call tmp[97636] 0)
                            const hi[97660] "const"(97662 call tmp[97636] 1)
                            (97665 'end of statement')
                            (97667 call =(97669 call followMe2[97607] parDim2[97445])(97672 call chpl_build_bounded_range lo[97655] hi[97660]))
                            if(97676 call _cond_test debugDataParNuma[93407])
                            {
                              (97680 call chpl_debug_writeln "### chunk = " chunk[97957] "  chunk2 = " chunk2[97527] "  " "followMe = " followMe[97361] "  followMe2 = " followMe2[97607])
                            }
                            (97691 yield followMe2[97607])
                          }
                          (97694 call _downEndCount _coforallCount[97481] nil[44])
                          (97533 'coforall loop')
                        }
                        label _continueLabel[97697]
                        _indexOfInterest[97504]
                        _iterator[97506]
                      }
                      label _breakLabel[97699]
                      Defer
                      {
                        {
                          (97703 call _endCountFree _coforallCount[97481])
                        }
                      }
                      (97707 call _waitEndCount _coforallCount[97481] 1 numTasks[97488])
                    }
                    {
                      const _coforallCount[97712] "const" "end count" "temp"
                      (97714 'move' _coforallCount[97712](97717 call _endCountAlloc 1))
                      unknown _indexOfInterest[97719] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97721] "expr temp" "temp"
                      (97723 'move' _iterator[97721](97726 call _getIterator tmpIter[97452]))
                      Defer
                      {
                        {
                          (97730 call _freeIterator _iterator[97721])
                        }
                      }
                      { scopeless type
                        (97734 'move' _indexOfInterest[97719](97737 call iteratorIndex _iterator[97721]))
                      }
                      ForLoop[97739]
                      {
                        unknown chunk2[97742] "coforall index var" "index var" "insert auto destroy"
                        (97744 'move' chunk2[97742] _indexOfInterest[97719])
                        (97748 call _upEndCount _coforallCount[97712] 1)
                        {
                          {
                            unknown locBlock2[97755](97757 call *(378848 call . this[100857] c"rank")(97760 call range[64316](?)(378853 call . this[100857] c"intIdxType")))
                            (97763 'end of statement')
                            {
                              unknown i[97765] 0
                              unknown tmp[97768] "maybe param" "temp"
                              (97770 'move' tmp[97768](97773 call chpl_compute_low_param_loop_bound 0(97776 call -(378858 call . this[100857] c"rank") 1)))
                              unknown tmp[97779] "maybe param" "temp"
                              (97781 'move' tmp[97779](97784 call chpl_compute_high_param_loop_bound 0(97787 call -(378863 call . this[100857] c"rank") 1)))
                              unknown tmp[97790] "maybe param" "temp"
                              (97792 'move' tmp[97790] 1)
                              ParamForLoop[97795]
                              { i[97765] tmp[97768] tmp[97779] tmp[97790]
                                (97803 call =(97805 call locBlock2[97755] i[97765])(97808 call chpl_build_bounded_range(97810 call .(97812 call followMe[97361] i[97765]) c"low")(97816 call .(97818 call followMe[97361] i[97765]) c"high")))
                              }
                              label _unused_continueLabel[97821]
                              label _breakLabel[97823]
                            }
                            unknown followMe2[97826] locBlock2[97755](97829 call *(378875 call . this[100857] c"rank")(97832 call range[64316](?)(378880 call . this[100857] c"intIdxType")))
                            (97835 'end of statement')
                            const low[97837] "const"(97839 call .(97841 call locBlock2[97755] parDim2[97445]) c"_low")
                            const high[97845] "const"(97847 call .(97849 call locBlock2[97755] parDim2[97445]) c"_high")
                            (97853 'end of statement')
                            const tmp[97855] "const" "temp"(97857 call _computeBlock(97859 call .(97861 call locBlock2[97755] parDim2[97445]) c"size") numChunks2[97440] chunk2[97742] high[97845] low[97837] low[97837])
                            (97871 call _check_tuple_var_decl tmp[97855] 2)
                            const lo[97874] "const"(97876 call tmp[97855] 0)
                            const hi[97879] "const"(97881 call tmp[97855] 1)
                            (97884 'end of statement')
                            (97886 call =(97888 call followMe2[97826] parDim2[97445])(97891 call chpl_build_bounded_range lo[97874] hi[97879]))
                            if(97895 call _cond_test debugDataParNuma[93407])
                            {
                              (97899 call chpl_debug_writeln "### chunk = " chunk[97957] "  chunk2 = " chunk2[97742] "  " "followMe = " followMe[97361] "  followMe2 = " followMe2[97826])
                            }
                            (97910 yield followMe2[97826])
                          }
                          (97913 call _downEndCount _coforallCount[97712] nil[44])
                          (97752 'coforall loop')
                        }
                        label _continueLabel[97916]
                        _indexOfInterest[97719]
                        _iterator[97721]
                      }
                      label _breakLabel[97918]
                      Defer
                      {
                        {
                          (97922 call _endCountFree _coforallCount[97712])
                        }
                      }
                      (97926 call _waitEndCount _coforallCount[97712] 1)
                    }
                  }
                }
                (97933 call _downEndCount _coforallCount[97931] nil[44])
                (97238 'coforall on block' 1 tmp[97225])
              }
              label _continueLabel[97943]
              _indexOfInterest[97938]
              _iterator[97939]
            }
            label _breakLabel[97944]
            Defer
            {
              {
                (97983 call _endCountFree _coforallCount[97931])
              }
            }
            (97988 call _waitEndCount _coforallCount[97931] 0 numTasks[97932])
          }
          {
            const _coforallCount[98000] "const" "end count" "temp"
            (98056 'move' _coforallCount[98000](98053 call _endCountAlloc 0))
            unknown _indexOfInterest[98007] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98008] "expr temp" "temp"
            (98017 'move' _iterator[98008](98015 call _getIterator tmpIter[97219]))
            Defer
            {
              {
                (98033 call _freeIterator _iterator[98008])
              }
            }
            { scopeless type
              (98022 'move' _indexOfInterest[98007](98019 call iteratorIndex _iterator[98008]))
            }
            ForLoop[98009]
            {
              unknown chunk[98026] "coforall index var" "index var" "insert auto destroy"
              (98028 'move' chunk[98026] _indexOfInterest[98007])
              (98040 call _upEndCount _coforallCount[98000] 0)
              const tmp[97208] "const" "temp"
              (97210 'move' tmp[97208](97206 'deref'(97205 '_wide_get_locale'(96423 call(96418 call .(358517 call here[90435]) c"getChild") chunk[98026]))))
              {
                {
                  if(96448 call _cond_test debugDataParNuma[93407])
                  {
                    if(96442 call _cond_test(96429 call != chunk[98026](96428 call chpl_getSubloc)))
                    {
                      (96440 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[98026] ", on "(96438 call chpl_getSubloc) ") ***")
                    }
                  }
                  const numSublocTasks[96474] "const"(96471 IfExpr (96458 call < chunk[98026](96456 call % dptpl[96174] numChunks[96228])) then
                  { scopeless
                    (96465 call +(96462 call / dptpl[96174] numChunks[96228]) 1)
                  } else
                  { scopeless
                    (96469 call / dptpl[96174] numChunks[96228])
                  } )
                  (96477 'end of statement')
                  unknown locBlock[96485](96483 call *(378545 call . this[100857] c"rank")(96482 call range[64316](?)(378550 call . this[100857] c"intIdxType")))
                  (96488 'end of statement')
                  {
                    unknown i[96518] 0
                    unknown tmp[96519] "maybe param" "temp"
                    (96531 'move' tmp[96519](96529 call chpl_compute_low_param_loop_bound 0(96492 call -(378555 call . this[100857] c"rank") 1)))
                    unknown tmp[96520] "maybe param" "temp"
                    (96541 'move' tmp[96520](96539 call chpl_compute_high_param_loop_bound 0(96536 call -(378570 call . this[100857] c"rank") 1)))
                    unknown tmp[96521] "maybe param" "temp"
                    (96544 'move' tmp[96521] 1)
                    ParamForLoop[96546]
                    { i[96518] tmp[96519] tmp[96520] tmp[96521]
                      (96515 call =(96499 call locBlock[96485] i[96518])(96513 call #(96504 call chpl_build_low_bounded_range(96503 call offset[96134] i[96518]))(96510 call .(96509 call(378564 call . this[100857] c"ranges") i[96518]) c"size")))
                    }
                    label _unused_continueLabel[96523]
                    label _breakLabel[96522]
                  }
                  unknown followMe[96563] locBlock[96485](96560 call *(378575 call . this[100857] c"rank")(96559 call range[64316](?)(378580 call . this[100857] c"intIdxType")))
                  (96566 'end of statement')
                  const tmp[96605] "const" "temp"(96604 call _computeBlock(96577 call .(96576 call locBlock[96485] parDim[96230]) c"size") numChunks[96228] chunk[98026](96587 call .(96586 call locBlock[96485] parDim[96230]) c"_high")(96594 call .(96593 call locBlock[96485] parDim[96230]) c"_low")(96601 call .(96600 call locBlock[96485] parDim[96230]) c"_low"))
                  (96612 call _check_tuple_var_decl tmp[96605] 2)
                  const lo[96567] "const"(96606 call tmp[96605] 0)
                  const hi[96569] "const"(96609 call tmp[96605] 1)
                  (96617 'end of statement')
                  (96626 call =(96621 call followMe[96563] parDim[96230])(96624 call chpl_build_bounded_range lo[96567] hi[96569]))
                  const tmp[96642] "const" "temp"(96641 call _computeChunkStuff numSublocTasks[96474](ignoreRunning = 1) minIndicesPerTask[96122] followMe[96563])
                  (96649 call _check_tuple_var_decl tmp[96642] 2)
                  const numChunks2[96629] "const"(96643 call tmp[96642] 0)
                  const parDim2[96631] "const"(96646 call tmp[96642] 1)
                  (96654 'end of statement')
                  {
                    unknown tmpIter[96888] "expr temp" "maybe ref" "no copy" "temp"
                    (96891 'move' tmpIter[96888](96660 call #(96657 call chpl_build_low_bounded_range 0) numChunks2[96629]))
                    unknown isRngDomArr[97186] "maybe param" "temp"
                    (97201 'move' isRngDomArr[97186](97199 call ||(97188 call isBoundedRange tmpIter[96888])(97197 call ||(97191 call isDomain tmpIter[96888])(97194 call isArray tmpIter[96888]))))
                    if isRngDomArr[97186]
                    {
                      const _coforallCount[97053] "const" "end count" "temp"
                      (97122 'move' _coforallCount[97053](97119 call _endCountAlloc 1))
                      unknown numTasks[97054] "temp"
                      (97106 'move' numTasks[97054](97102 call . tmpIter[96888] c"size"))
                      (97097 call _upEndCount _coforallCount[97053] 1 numTasks[97054])
                      (97094 call chpl_resetTaskSpawn numTasks[97054])
                      unknown _indexOfInterest[97061] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97062] "expr temp" "temp"
                      (97071 'move' _iterator[97062](97069 call _getIterator tmpIter[96888]))
                      Defer
                      {
                        {
                          (97087 call _freeIterator _iterator[97062])
                        }
                      }
                      { scopeless type
                        (97076 'move' _indexOfInterest[97061](97073 call iteratorIndex _iterator[97062]))
                      }
                      ForLoop[97063]
                      {
                        unknown chunk2[97080] "coforall index var" "index var" "insert auto destroy"
                        (97082 'move' chunk2[97080] _indexOfInterest[97061])
                        {
                          {
                            unknown locBlock2[96895](96897 call *(378662 call . this[100857] c"rank")(96900 call range[64316](?)(378667 call . this[100857] c"intIdxType")))
                            (96903 'end of statement')
                            {
                              unknown i[96905] 0
                              unknown tmp[96908] "maybe param" "temp"
                              (96910 'move' tmp[96908](96913 call chpl_compute_low_param_loop_bound 0(96916 call -(378672 call . this[100857] c"rank") 1)))
                              unknown tmp[96919] "maybe param" "temp"
                              (96921 'move' tmp[96919](96924 call chpl_compute_high_param_loop_bound 0(96927 call -(378677 call . this[100857] c"rank") 1)))
                              unknown tmp[96930] "maybe param" "temp"
                              (96932 'move' tmp[96930] 1)
                              ParamForLoop[96935]
                              { i[96905] tmp[96908] tmp[96919] tmp[96930]
                                (96943 call =(96945 call locBlock2[96895] i[96905])(96948 call chpl_build_bounded_range(96950 call .(96952 call followMe[96563] i[96905]) c"low")(96956 call .(96958 call followMe[96563] i[96905]) c"high")))
                              }
                              label _unused_continueLabel[96961]
                              label _breakLabel[96963]
                            }
                            unknown followMe2[96966] locBlock2[96895](96969 call *(378689 call . this[100857] c"rank")(96972 call range[64316](?)(378694 call . this[100857] c"intIdxType")))
                            (96975 'end of statement')
                            const low[96977] "const"(96979 call .(96981 call locBlock2[96895] parDim2[96631]) c"_low")
                            const high[96985] "const"(96987 call .(96989 call locBlock2[96895] parDim2[96631]) c"_high")
                            (96993 'end of statement')
                            const tmp[96995] "const" "temp"(96997 call _computeBlock(96999 call .(97001 call locBlock2[96895] parDim2[96631]) c"size") numChunks2[96629] chunk2[97080] high[96985] low[96977] low[96977])
                            (97011 call _check_tuple_var_decl tmp[96995] 2)
                            const lo[97014] "const"(97016 call tmp[96995] 0)
                            const hi[97019] "const"(97021 call tmp[96995] 1)
                            (97024 'end of statement')
                            (97026 call =(97028 call followMe2[96966] parDim2[96631])(97031 call chpl_build_bounded_range lo[97014] hi[97019]))
                            if(97035 call _cond_test debugDataParNuma[93407])
                            {
                              (97039 call chpl_debug_writeln "### chunk = " chunk[98026] "  chunk2 = " chunk2[97080] "  " "followMe = " followMe[96563] "  followMe2 = " followMe2[96966])
                            }
                            (97050 yield followMe2[96966])
                          }
                          (97056 call _downEndCount _coforallCount[97053] nil[44])
                          (97055 'coforall loop')
                        }
                        label _continueLabel[97066]
                        _indexOfInterest[97061]
                        _iterator[97062]
                      }
                      label _breakLabel[97067]
                      Defer
                      {
                        {
                          (97109 call _endCountFree _coforallCount[97053])
                        }
                      }
                      (97114 call _waitEndCount _coforallCount[97053] 1 numTasks[97054])
                    }
                    {
                      const _coforallCount[97126] "const" "end count" "temp"
                      (97183 'move' _coforallCount[97126](97180 call _endCountAlloc 1))
                      unknown _indexOfInterest[97134] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97135] "expr temp" "temp"
                      (97144 'move' _iterator[97135](97142 call _getIterator tmpIter[96888]))
                      Defer
                      {
                        {
                          (97160 call _freeIterator _iterator[97135])
                        }
                      }
                      { scopeless type
                        (97149 'move' _indexOfInterest[97134](97146 call iteratorIndex _iterator[97135]))
                      }
                      ForLoop[97136]
                      {
                        unknown chunk2[97153] "coforall index var" "index var" "insert auto destroy"
                        (97155 'move' chunk2[97153] _indexOfInterest[97134])
                        (97167 call _upEndCount _coforallCount[97126] 1)
                        {
                          {
                            unknown locBlock2[96669](96667 call *(378604 call . this[100857] c"rank")(96666 call range[64316](?)(378609 call . this[100857] c"intIdxType")))
                            (96672 'end of statement')
                            {
                              unknown i[96704] 0
                              unknown tmp[96705] "maybe param" "temp"
                              (96717 'move' tmp[96705](96715 call chpl_compute_low_param_loop_bound 0(96677 call -(378614 call . this[100857] c"rank") 1)))
                              unknown tmp[96706] "maybe param" "temp"
                              (96727 'move' tmp[96706](96725 call chpl_compute_high_param_loop_bound 0(96722 call -(378625 call . this[100857] c"rank") 1)))
                              unknown tmp[96707] "maybe param" "temp"
                              (96730 'move' tmp[96707] 1)
                              ParamForLoop[96732]
                              { i[96704] tmp[96705] tmp[96706] tmp[96707]
                                (96701 call =(96684 call locBlock2[96669] i[96704])(96699 call chpl_build_bounded_range(96689 call .(96688 call followMe[96563] i[96704]) c"low")(96696 call .(96695 call followMe[96563] i[96704]) c"high")))
                              }
                              label _unused_continueLabel[96709]
                              label _breakLabel[96708]
                            }
                            unknown followMe2[96749] locBlock2[96669](96746 call *(378630 call . this[100857] c"rank")(96745 call range[64316](?)(378635 call . this[100857] c"intIdxType")))
                            (96752 'end of statement')
                            const low[96760] "const"(96757 call .(96756 call locBlock2[96669] parDim2[96631]) c"_low")
                            const high[96770] "const"(96767 call .(96766 call locBlock2[96669] parDim2[96631]) c"_high")
                            (96773 'end of statement')
                            const tmp[96794] "const" "temp"(96793 call _computeBlock(96784 call .(96783 call locBlock2[96669] parDim2[96631]) c"size") numChunks2[96629] chunk2[97153] high[96770] low[96760] low[96760])
                            (96801 call _check_tuple_var_decl tmp[96794] 2)
                            const lo[96774] "const"(96795 call tmp[96794] 0)
                            const hi[96776] "const"(96798 call tmp[96794] 1)
                            (96806 'end of statement')
                            (96815 call =(96810 call followMe2[96749] parDim2[96631])(96813 call chpl_build_bounded_range lo[96774] hi[96776]))
                            if(96881 call _cond_test debugDataParNuma[93407])
                            {
                              (96878 call chpl_debug_writeln "### chunk = " chunk[98026] "  chunk2 = " chunk2[97153] "  " "followMe = " followMe[96563] "  followMe2 = " followMe2[96749])
                            }
                            (96886 yield followMe2[96749])
                          }
                          (97129 call _downEndCount _coforallCount[97126] nil[44])
                          (97128 'coforall loop')
                        }
                        label _continueLabel[97139]
                        _indexOfInterest[97134]
                        _iterator[97135]
                      }
                      label _breakLabel[97140]
                      Defer
                      {
                        {
                          (97171 call _endCountFree _coforallCount[97126])
                        }
                      }
                      (97176 call _waitEndCount _coforallCount[97126] 1)
                    }
                  }
                }
                (98002 call _downEndCount _coforallCount[98000] nil[44])
                (97213 'coforall on block' 1 tmp[97208])
              }
              label _continueLabel[98012]
              _indexOfInterest[98007]
              _iterator[98008]
            }
            label _breakLabel[98013]
            Defer
            {
              {
                (98044 call _endCountFree _coforallCount[98000])
              }
            }
            (98049 call _waitEndCount _coforallCount[98000] 0)
          }
        }
      }
    }
    {
      if(98105 call _cond_test debugDefaultDist[93392])
      {
        (98103 call chpl_debug_writeln "*** In domain/array leader code:")
      }
      const numTasks[98123] "const"(98120 IfExpr (98113 call == tasksPerLocale[96114] 0) then
      { scopeless
        (98116 call .(358521 call here[90435]) c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale[96114]
      } )
      (98126 'end of statement')
      if(98138 call _cond_test debugDefaultDist[93392])
      {
        (98136 call chpl_debug_writeln "    numTasks=" numTasks[98123] " (" ignoreRunning[96118] "), minIndicesPerTask=" minIndicesPerTask[96122])
      }
      const tmp[98168] "const" "temp"(98165 IfExpr (98150 'task_get_serial') then
      { scopeless
        (98156 call _build_tuple 1(98153 call - 1))
      } else
      { scopeless
        (98164 call _computeChunkStuff numTasks[98123] ignoreRunning[96118] minIndicesPerTask[96122](378916 call . this[100857] c"ranges"))
      } )
      (98175 call _check_tuple_var_decl tmp[98168] 2)
      const numChunks[98143] "const"(98169 call tmp[98168] 0)
      const parDim[98145] "const"(98172 call tmp[98168] 1)
      (98180 'end of statement')
      if(98200 call _cond_test debugDefaultDist[93392])
      {
        (98198 call chpl_debug_writeln "    numChunks=" numChunks[98143] " parDim=" parDim[98145] " ranges(" parDim[98145] ").size="(98195 call .(98194 call(378925 call . this[100857] c"ranges") parDim[98145]) c"size"))
      }
      if(98227 call _cond_test debugDataPar[93402])
      {
        (98224 call chpl_debug_writeln "### numTasksPerLoc = " numTasks[98123] "\n" "### ignoreRunning = " ignoreRunning[96118] "\n" "### minIndicesPerTask = " minIndicesPerTask[96122] "\n" "### numChunks = " numChunks[98143] " (parDim = " parDim[98145] ")\n" "### nranges = "(378937 call . this[100857] c"ranges"))
      }
      if(98805 call _cond_test(98233 call == numChunks[98143] 1))
      {
        if(98340 call _cond_test(98237 call ==(378943 call . this[100857] c"rank") 1))
        {
          (98256 yield(98254 call _build_tuple(98252 call #(98243 call chpl_build_low_bounded_range(98242 call offset[96134] 0))(98249 call .(98248 call(378949 call . this[100857] c"ranges") 0) c"size"))))
        }
        {
          unknown block[98266](98264 call *(378954 call . this[100857] c"rank")(98263 call range[64316](?)(378959 call . this[100857] c"intIdxType")))
          (98269 'end of statement')
          {
            unknown i[98300] 0
            unknown tmp[98301] "maybe param" "temp"
            (98313 'move' tmp[98301](98311 call chpl_compute_low_param_loop_bound 0(98274 call -(378964 call . this[100857] c"rank") 1)))
            unknown tmp[98302] "maybe param" "temp"
            (98323 'move' tmp[98302](98321 call chpl_compute_high_param_loop_bound 0(98318 call -(378979 call . this[100857] c"rank") 1)))
            unknown tmp[98303] "maybe param" "temp"
            (98326 'move' tmp[98303] 1)
            ParamForLoop[98328]
            { i[98300] tmp[98301] tmp[98302] tmp[98303]
              (98297 call =(98281 call block[98266] i[98300])(98295 call #(98286 call chpl_build_low_bounded_range(98285 call offset[96134] i[98300]))(98292 call .(98291 call(378973 call . this[100857] c"ranges") i[98300]) c"size")))
            }
            label _unused_continueLabel[98305]
            label _breakLabel[98304]
          }
          (98338 yield block[98266])
        }
      }
      {
        unknown locBlock[98352](98350 call *(378985 call . this[100857] c"rank")(98349 call range[64316](?)(378990 call . this[100857] c"intIdxType")))
        (98355 'end of statement')
        {
          unknown i[98386] 0
          unknown tmp[98387] "maybe param" "temp"
          (98399 'move' tmp[98387](98397 call chpl_compute_low_param_loop_bound 0(98360 call -(378995 call . this[100857] c"rank") 1)))
          unknown tmp[98388] "maybe param" "temp"
          (98409 'move' tmp[98388](98407 call chpl_compute_high_param_loop_bound 0(98404 call -(379010 call . this[100857] c"rank") 1)))
          unknown tmp[98389] "maybe param" "temp"
          (98412 'move' tmp[98389] 1)
          ParamForLoop[98414]
          { i[98386] tmp[98387] tmp[98388] tmp[98389]
            (98383 call =(98367 call locBlock[98352] i[98386])(98381 call #(98372 call chpl_build_low_bounded_range(98371 call offset[96134] i[98386]))(98378 call .(98377 call(379004 call . this[100857] c"ranges") i[98386]) c"size")))
          }
          label _unused_continueLabel[98391]
          label _breakLabel[98390]
        }
        if(98446 call _cond_test debugDefaultDist[93392])
        {
          (98444 call chpl_debug_writeln "*** DI: locBlock = " locBlock[98352])
        }
        {
          unknown tmpIter[98566] "expr temp" "maybe ref" "no copy" "temp"
          (98569 'move' tmpIter[98566](98456 call #(98453 call chpl_build_low_bounded_range 0) numChunks[98143]))
          unknown isRngDomArr[98786] "maybe param" "temp"
          (98801 'move' isRngDomArr[98786](98799 call ||(98788 call isBoundedRange tmpIter[98566])(98797 call ||(98791 call isDomain tmpIter[98566])(98794 call isArray tmpIter[98566]))))
          if isRngDomArr[98786]
          {
            const _coforallCount[98653] "const" "end count" "temp"
            (98722 'move' _coforallCount[98653](98719 call _endCountAlloc 1))
            unknown numTasks[98654] "temp"
            (98706 'move' numTasks[98654](98702 call . tmpIter[98566] c"size"))
            (98697 call _upEndCount _coforallCount[98653] 1 numTasks[98654])
            (98694 call chpl_resetTaskSpawn numTasks[98654])
            unknown _indexOfInterest[98661] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98662] "expr temp" "temp"
            (98671 'move' _iterator[98662](98669 call _getIterator tmpIter[98566]))
            Defer
            {
              {
                (98687 call _freeIterator _iterator[98662])
              }
            }
            { scopeless type
              (98676 'move' _indexOfInterest[98661](98673 call iteratorIndex _iterator[98662]))
            }
            ForLoop[98663]
            {
              unknown chunk[98680] "coforall index var" "index var" "insert auto destroy"
              (98682 'move' chunk[98680] _indexOfInterest[98661])
              {
                {
                  unknown followMe[98573] locBlock[98352](98576 call *(379048 call . this[100857] c"rank")(98579 call range[64316](?)(379053 call . this[100857] c"intIdxType")))
                  (98582 'end of statement')
                  const tmp[98584] "const" "temp"(98586 call _computeBlock(98588 call .(98590 call locBlock[98352] parDim[98145]) c"size") numChunks[98143] chunk[98680](98596 call .(98598 call locBlock[98352] parDim[98145]) c"_high")(98602 call .(98604 call locBlock[98352] parDim[98145]) c"_low")(98608 call .(98610 call locBlock[98352] parDim[98145]) c"_low"))
                  (98615 call _check_tuple_var_decl tmp[98584] 2)
                  const lo[98618] "const"(98620 call tmp[98584] 0)
                  const hi[98623] "const"(98625 call tmp[98584] 1)
                  (98628 'end of statement')
                  (98630 call =(98632 call followMe[98573] parDim[98145])(98635 call chpl_build_bounded_range lo[98618] hi[98623]))
                  if(98639 call _cond_test debugDefaultDist[93392])
                  {
                    (98644 call chpl_debug_writeln "*** DI[" chunk[98680] "]: followMe = " followMe[98573])
                  }
                  (98650 yield followMe[98573])
                }
                (98656 call _downEndCount _coforallCount[98653] nil[44])
                (98655 'coforall loop')
              }
              label _continueLabel[98666]
              _indexOfInterest[98661]
              _iterator[98662]
            }
            label _breakLabel[98667]
            Defer
            {
              {
                (98709 call _endCountFree _coforallCount[98653])
              }
            }
            (98714 call _waitEndCount _coforallCount[98653] 1 numTasks[98654])
          }
          {
            const _coforallCount[98726] "const" "end count" "temp"
            (98783 'move' _coforallCount[98726](98780 call _endCountAlloc 1))
            unknown _indexOfInterest[98734] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98735] "expr temp" "temp"
            (98744 'move' _iterator[98735](98742 call _getIterator tmpIter[98566]))
            Defer
            {
              {
                (98760 call _freeIterator _iterator[98735])
              }
            }
            { scopeless type
              (98749 'move' _indexOfInterest[98734](98746 call iteratorIndex _iterator[98735]))
            }
            ForLoop[98736]
            {
              unknown chunk[98753] "coforall index var" "index var" "insert auto destroy"
              (98755 'move' chunk[98753] _indexOfInterest[98734])
              (98767 call _upEndCount _coforallCount[98726] 1)
              {
                {
                  unknown followMe[98466] locBlock[98352](98463 call *(379018 call . this[100857] c"rank")(98462 call range[64316](?)(379023 call . this[100857] c"intIdxType")))
                  (98469 'end of statement')
                  const tmp[98509] "const" "temp"(98508 call _computeBlock(98481 call .(98480 call locBlock[98352] parDim[98145]) c"size") numChunks[98143] chunk[98753](98491 call .(98490 call locBlock[98352] parDim[98145]) c"_high")(98498 call .(98497 call locBlock[98352] parDim[98145]) c"_low")(98505 call .(98504 call locBlock[98352] parDim[98145]) c"_low"))
                  (98516 call _check_tuple_var_decl tmp[98509] 2)
                  const lo[98471] "const"(98510 call tmp[98509] 0)
                  const hi[98473] "const"(98513 call tmp[98509] 1)
                  (98521 'end of statement')
                  (98530 call =(98525 call followMe[98466] parDim[98145])(98528 call chpl_build_bounded_range lo[98471] hi[98473]))
                  if(98558 call _cond_test debugDefaultDist[93392])
                  {
                    (98556 call chpl_debug_writeln "*** DI[" chunk[98753] "]: followMe = " followMe[98466])
                  }
                  (98564 yield followMe[98466])
                }
                (98729 call _downEndCount _coforallCount[98726] nil[44])
                (98728 'coforall loop')
              }
              label _continueLabel[98739]
              _indexOfInterest[98734]
              _iterator[98735]
            }
            label _breakLabel[98740]
            Defer
            {
              {
                (98771 call _endCountFree _coforallCount[98726])
              }
            }
            (98776 call _waitEndCount _coforallCount[98726] 1)
          }
        }
      }
    }
  }
  where {
    (96142 call == tag[96108] leader[447])
  }
  function DefaultRectangularDom[100787](?).these[98822](arg _mt[100863]:_MT[238], arg this[100861]:DefaultRectangularDom[100787](?), param arg tag[98819] :
  iterKind[453], arg followThis[98824]:_any[178](?), arg tasksPerLocale[98827] =
  dataParTasksPerLocale[93281], arg ignoreRunning[98831] =
  dataParIgnoreRunningTasks[93287], arg minIndicesPerTask[98835] =
  dataParMinGranularity[93293], arg offset[98847] =
  (98846 call createTuple(379080 call . this[100861] c"rank")(379084 call . this[100861] c"intIdxType")(98844 call _cast(379088 call . this[100861] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method"
  {
    function anyStridable[98861](arg rangeTuple[98859]:_any[178](?), param arg i[98865] :
    int(64)[13] =
    0) param : _unknown[51]
    {
      (98906 return(98903 IfExpr (98877 call == i[98865](98875 call -(98871 call . rangeTuple[98859] c"size") 1)) then
      { scopeless
        (98883 call .(98882 call rangeTuple[98859] i[98865]) c"stridable")
      } else
      { scopeless
        (98901 call ||(98890 call .(98889 call rangeTuple[98859] i[98865]) c"stridable")(98900 call anyStridable rangeTuple[98859](98898 call + i[98865] 1)))
      } ))
    }
    if(98935 call _cond_test chpl__testParFlag[188300])
    {
      (98933 call chpl__testPar "default rectangular domain follower invoked on " followThis[98824])
    }
    if(98963 call _cond_test debugDefaultDist[93392])
    {
      (98961 call chpl_debug_writeln "In domain follower code: Following " followThis[98824])
    }
    unknown stridable[98978] "param"(98976 call ||(98969 call . this[100861] c"stridable")(98975 call anyStridable followThis[98824]))
    (98981 'end of statement')
    unknown block[98992](98990 call *(379106 call . this[100861] c"rank")(98989 call range[64316](?)(idxType =(379111 call . this[100861] c"intIdxType"))(stridable = stridable[98978])))
    (98995 'end of statement')
    if(99340 call _cond_test stridable[98978])
    {
      unknown strType[99001] "type variable"(99000 call chpl__signedType(379117 call . this[100861] c"intIdxType"))
      {
        unknown i[99211] 0
        unknown tmp[99212] "maybe param" "temp"
        (99224 'move' tmp[99212](99222 call chpl_compute_low_param_loop_bound 0(99008 call -(379122 call . this[100861] c"rank") 1)))
        unknown tmp[99213] "maybe param" "temp"
        (99234 'move' tmp[99213](99232 call chpl_compute_high_param_loop_bound 0(99229 call -(379201 call . this[100861] c"rank") 1)))
        unknown tmp[99214] "maybe param" "temp"
        (99237 'move' tmp[99214] 1)
        ParamForLoop[99239]
        { i[99211] tmp[99212] tmp[99213] tmp[99214]
          {
            const rStride[99019] "const"(99016 call .(99015 call(379127 call . this[100861] c"ranges") i[99211]) c"stride")
            (99022 'end of statement')
            const rSignedStride[99028] "const"(99026 call _cast strType[99001] rStride[99019])
            const fSignedStride[99041] "const"(99039 call _cast strType[99001](99035 call .(99034 call followThis[98824] i[99211]) c"stride"))
            (99044 'end of statement')
            if(99207 call _cond_test(99047 call > rStride[99019] 0))
            {
              const riStride[99053] "const"(99051 call _cast(379139 call . this[100861] c"intIdxType") rStride[99019])
              (99056 'end of statement')
              const low[99077] "const"(99075 call +(99062 call .(99061 call(379144 call . this[100861] c"ranges") i[99211]) c"alignedLowAsInt")(99073 call *(99069 call .(99068 call followThis[98824] i[99211]) c"low") riStride[99053]))
              const high[99099] "const"(99097 call +(99084 call .(99083 call(379153 call . this[100861] c"ranges") i[99211]) c"alignedLowAsInt")(99095 call *(99091 call .(99090 call followThis[98824] i[99211]) c"high") riStride[99053]))
              const stride[99109] "const"(99107 call _cast strType[99001](99104 call * rSignedStride[99028] fSignedStride[99041]))
              (99112 'end of statement')
              (99124 call =(99116 call block[98992] i[99211])(99122 call chpl_by(99119 call chpl_build_bounded_range low[99077] high[99099]) stride[99109]))
            }
            {
              const irStride[99133] "const"(99131 call _cast(379170 call . this[100861] c"intIdxType")(99128 call - rStride[99019]))
              (99136 'end of statement')
              const low[99157] "const"(99155 call -(99142 call .(99141 call(379175 call . this[100861] c"ranges") i[99211]) c"alignedHighAsInt")(99153 call *(99149 call .(99148 call followThis[98824] i[99211]) c"high") irStride[99133]))
              const high[99179] "const"(99177 call -(99164 call .(99163 call(379184 call . this[100861] c"ranges") i[99211]) c"alignedHighAsInt")(99175 call *(99171 call .(99170 call followThis[98824] i[99211]) c"low") irStride[99133]))
              const stride[99189] "const"(99187 call _cast strType[99001](99184 call * rSignedStride[99028] fSignedStride[99041]))
              (99192 'end of statement')
              (99204 call =(99196 call block[98992] i[99211])(99202 call chpl_by(99199 call chpl_build_bounded_range low[99157] high[99179]) stride[99189]))
            }
          }
        }
        label _unused_continueLabel[99216]
        label _breakLabel[99215]
      }
    }
    {
      {
        unknown i[99302] 0
        unknown tmp[99303] "maybe param" "temp"
        (99315 'move' tmp[99303](99313 call chpl_compute_low_param_loop_bound 0(99251 call -(379206 call . this[100861] c"rank") 1)))
        unknown tmp[99304] "maybe param" "temp"
        (99325 'move' tmp[99304](99323 call chpl_compute_high_param_loop_bound 0(99320 call -(379237 call . this[100861] c"rank") 1)))
        unknown tmp[99305] "maybe param" "temp"
        (99328 'move' tmp[99305] 1)
        ParamForLoop[99330]
        { i[99302] tmp[99303] tmp[99304] tmp[99305]
          (99299 call =(99258 call block[98992] i[99302])(99297 call chpl_build_bounded_range(99276 call +(99263 call .(99262 call(379213 call . this[100861] c"ranges") i[99302]) c"_low")(99274 call _cast(379220 call . this[100861] c"intIdxType")(99270 call .(99269 call followThis[98824] i[99302]) c"low")))(99295 call +(99282 call .(99281 call(379225 call . this[100861] c"ranges") i[99302]) c"_low")(99293 call _cast(379232 call . this[100861] c"intIdxType")(99289 call .(99288 call followThis[98824] i[99302]) c"high")))))
        }
        label _unused_continueLabel[99307]
        label _breakLabel[99306]
      }
    }
    if(99441 call _cond_test(99346 call ==(379242 call . this[100861] c"rank") 1))
    {
      {
        unknown _indexOfInterest[99360] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[99361] "expr temp" "temp"
        (99369 'move' _iterator[99361](99352 call _getIteratorZip block[98992]))
        Defer
        {
          {
            (99385 call _freeIterator _iterator[99361])
          }
        }
        { scopeless type
          (99374 'move' _indexOfInterest[99360](99371 call iteratorIndex _iterator[99361]))
        }
        ForLoop[99362]
        {
          unknown i[99378] "index var" "insert auto destroy"
          (99380 'move' i[99378] _indexOfInterest[99360])
          {
            (99357 yield(99356 call(379247 call . this[100861] c"chpl_intToIdx") i[99378]))
          }
          label _continueLabel[99365]
          _indexOfInterest[99360]
          _iterator[99361]
        }
        label _breakLabel[99366]
      }
    }
    {
      {
        unknown _indexOfInterest[99406] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[99407] "expr temp" "temp"
        (99416 'move' _iterator[99407](99414 call _getIterator(99398 call(379252 call . this[100861] c"these_help") 0 block[98992])))
        Defer
        {
          {
            (99433 call _freeIterator _iterator[99407])
          }
        }
        { scopeless type
          (99422 'move' _indexOfInterest[99406](99419 call iteratorIndex _iterator[99407]))
        }
        ForLoop[99408]
        {
          unknown i[99426] "index var" "insert auto destroy"
          (99428 'move' i[99426] _indexOfInterest[99406])
          {
            (99403 yield(99402 call(379257 call . this[100861] c"chpl_intToIdx") i[99426]))
          }
          label _continueLabel[99411]
          _indexOfInterest[99406]
          _iterator[99407]
        }
        label _breakLabel[99412]
      }
    }
  }
  where {
    (98855 call == tag[98819] follower[449])
  }
  function DefaultRectangularDom[100787](?).dsiMember[99457](arg _mt[100867]:_MT[238], arg this[100865]:DefaultRectangularDom[100787](?), arg ind[99454] :
  (99452 call *(379263 call . this[100865] c"rank")(379268 call . this[100865] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    {
      unknown i[99489] 0
      unknown tmp[99490] "maybe param" "temp"
      (99502 'move' tmp[99490](99500 call chpl_compute_low_param_loop_bound 0(99462 call -(379273 call . this[100865] c"rank") 1)))
      unknown tmp[99491] "maybe param" "temp"
      (99512 'move' tmp[99491](99510 call chpl_compute_high_param_loop_bound 0(99507 call -(379286 call . this[100865] c"rank") 1)))
      unknown tmp[99492] "maybe param" "temp"
      (99515 'move' tmp[99492] 1)
      ParamForLoop[99517]
      { i[99489] tmp[99490] tmp[99491] tmp[99492]
        if(99484 call _cond_test(99479 call !(99478 call(99470 call .(99469 call(379278 call . this[100865] c"ranges") i[99489]) c"contains")(99476 call ind[99454] i[99489]))))
        {
          (99482 return 0)
        }
      }
      label _unused_continueLabel[99494]
      label _breakLabel[99493]
    }
    (99528 return 1)
  }
  function DefaultRectangularDom[100787](?).dsiIndexOrder[99541](arg _mt[100871]:_MT[238], arg this[100869]:DefaultRectangularDom[100787](?), arg ind[99538] :
  (99536 call *(379291 call . this[100869] c"rank")(379296 call . this[100869] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    unknown totOrder[99544](379300 call . this[100869] c"intIdxType")
    (99547 'end of statement')
    unknown blk[99551] 1(379304 call . this[100869] c"intIdxType")
    (99554 'end of statement')
    {
      unknown d[99623] 0
      unknown tmp[99624] "maybe param" "temp"
      (99635 'move' tmp[99624](99633 call chpl_compute_low_param_loop_bound 0(99558 call -(379309 call . this[100869] c"rank") 1)))
      unknown tmp[99625] "maybe param" "temp"
      (99645 'move' tmp[99625](99643 call chpl_compute_high_param_loop_bound 0(99640 call -(379338 call . this[100869] c"rank") 1)))
      unknown tmp[99626] "maybe param" "temp"
      (99648 'move' tmp[99626](99563 call - 1))
      ParamForLoop[99650]
      { d[99623] tmp[99624] tmp[99625] tmp[99626]
        {
          const orderD[99582] "const"(99581 call(99573 call .(99570 call(379314 call . this[100869] c"ranges") d[99623]) c"indexOrder")(99579 call ind[99538] d[99623]))
          (99585 'end of statement')
          if(99599 call _cond_test(99594 call == orderD[99582](99592 call _cast(379322 call . this[100869] c"intIdxType")(99589 call - 1))))
          {
            (99597 return orderD[99582])
          }
          (99609 call += totOrder[99544](99607 call * orderD[99582] blk[99551]))
          (99620 call *= blk[99551](99617 call .(99616 call(379332 call . this[100869] c"ranges") d[99623]) c"size"))
        }
      }
      label _unused_continueLabel[99628]
      label _breakLabel[99627]
    }
    (99660 return totOrder[99544])
  }
  function DefaultRectangularDom[100787](?).dsiDims[99666](arg _mt[100875]:_MT[238], arg this[100873]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method"
  {
    (99669 return(379344 call . this[100873] c"ranges"))
  }
  function DefaultRectangularDom[100787](?).dsiDim[99680](arg _mt[100879]:_MT[238], arg this[100877]:DefaultRectangularDom[100787](?), arg d[99677] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (99686 return(99685 call(379349 call . this[100877] c"ranges") d[99677]))
  }
  function DefaultRectangularDom[100787](?).dsiDim[99697](arg _mt[100883]:_MT[238], arg this[100881]:DefaultRectangularDom[100787](?), param arg d[99694] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (99703 return(99702 call(379355 call . this[100881] c"ranges") d[99694]))
  }
  function DefaultRectangularDom[100787](?).dsiNumIndices[99710](arg _mt[100887]:_MT[238], arg this[100885]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown sum[99716](99714 call _cast(379360 call . this[100885] c"intIdxType") 1)
    (99719 'end of statement')
    {
      unknown i[99739] 0
      unknown tmp[99740] "maybe param" "temp"
      (99752 'move' tmp[99740](99750 call chpl_compute_low_param_loop_bound 0(99724 call -(379365 call . this[100885] c"rank") 1)))
      unknown tmp[99741] "maybe param" "temp"
      (99762 'move' tmp[99741](99760 call chpl_compute_high_param_loop_bound 0(99757 call -(379377 call . this[100885] c"rank") 1)))
      unknown tmp[99742] "maybe param" "temp"
      (99765 'move' tmp[99742] 1)
      ParamForLoop[99767]
      { i[99739] tmp[99740] tmp[99741] tmp[99742]
        (99736 call *= sum[99716](99733 call .(99732 call(379371 call . this[100885] c"ranges") i[99739]) c"size"))
      }
      label _unused_continueLabel[99744]
      label _breakLabel[99743]
    }
    (99777 return sum[99716])
  }
  function DefaultRectangularDom[100787](?).dsiLow[99783](arg _mt[100891]:_MT[238], arg this[100889]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(99869 call _cond_test(99787 call ==(379383 call . this[100889] c"rank") 1))
    {
      (99796 return(99793 call .(99792 call(379388 call . this[100889] c"ranges") 0) c"low"))
    }
    {
      unknown result[99803](99801 call *(379393 call . this[100889] c"rank")(379398 call . this[100889] c"idxType"))
      (99806 'end of statement')
      {
        unknown i[99829] 0
        unknown tmp[99830] "maybe param" "temp"
        (99842 'move' tmp[99830](99840 call chpl_compute_low_param_loop_bound 0(99811 call -(379403 call . this[100889] c"rank") 1)))
        unknown tmp[99831] "maybe param" "temp"
        (99852 'move' tmp[99831](99850 call chpl_compute_high_param_loop_bound 0(99847 call -(379416 call . this[100889] c"rank") 1)))
        unknown tmp[99832] "maybe param" "temp"
        (99855 'move' tmp[99832] 1)
        ParamForLoop[99857]
        { i[99829] tmp[99830] tmp[99831] tmp[99832]
          (99826 call =(99818 call result[99803] i[99829])(99823 call .(99822 call(379410 call . this[100889] c"ranges") i[99829]) c"low"))
        }
        label _unused_continueLabel[99834]
        label _breakLabel[99833]
      }
      (99867 return result[99803])
    }
  }
  function DefaultRectangularDom[100787](?).dsiHigh[99878](arg _mt[100895]:_MT[238], arg this[100893]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(99964 call _cond_test(99882 call ==(379422 call . this[100893] c"rank") 1))
    {
      (99891 return(99888 call .(99887 call(379427 call . this[100893] c"ranges") 0) c"high"))
    }
    {
      unknown result[99898](99896 call *(379432 call . this[100893] c"rank")(379437 call . this[100893] c"idxType"))
      (99901 'end of statement')
      {
        unknown i[99924] 0
        unknown tmp[99925] "maybe param" "temp"
        (99937 'move' tmp[99925](99935 call chpl_compute_low_param_loop_bound 0(99906 call -(379442 call . this[100893] c"rank") 1)))
        unknown tmp[99926] "maybe param" "temp"
        (99947 'move' tmp[99926](99945 call chpl_compute_high_param_loop_bound 0(99942 call -(379455 call . this[100893] c"rank") 1)))
        unknown tmp[99927] "maybe param" "temp"
        (99950 'move' tmp[99927] 1)
        ParamForLoop[99952]
        { i[99924] tmp[99925] tmp[99926] tmp[99927]
          (99921 call =(99913 call result[99898] i[99924])(99918 call .(99917 call(379449 call . this[100893] c"ranges") i[99924]) c"high"))
        }
        label _unused_continueLabel[99929]
        label _breakLabel[99928]
      }
      (99962 return result[99898])
    }
  }
  function DefaultRectangularDom[100787](?).dsiAlignedLow[99973](arg _mt[100899]:_MT[238], arg this[100897]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100059 call _cond_test(99977 call ==(379461 call . this[100897] c"rank") 1))
    {
      (99986 return(99983 call .(99982 call(379466 call . this[100897] c"ranges") 0) c"alignedLow"))
    }
    {
      unknown result[99993](99991 call *(379471 call . this[100897] c"rank")(379476 call . this[100897] c"idxType"))
      (99996 'end of statement')
      {
        unknown i[100019] 0
        unknown tmp[100020] "maybe param" "temp"
        (100032 'move' tmp[100020](100030 call chpl_compute_low_param_loop_bound 0(100001 call -(379481 call . this[100897] c"rank") 1)))
        unknown tmp[100021] "maybe param" "temp"
        (100042 'move' tmp[100021](100040 call chpl_compute_high_param_loop_bound 0(100037 call -(379494 call . this[100897] c"rank") 1)))
        unknown tmp[100022] "maybe param" "temp"
        (100045 'move' tmp[100022] 1)
        ParamForLoop[100047]
        { i[100019] tmp[100020] tmp[100021] tmp[100022]
          (100016 call =(100008 call result[99993] i[100019])(100013 call .(100012 call(379488 call . this[100897] c"ranges") i[100019]) c"alignedLow"))
        }
        label _unused_continueLabel[100024]
        label _breakLabel[100023]
      }
      (100057 return result[99993])
    }
  }
  function DefaultRectangularDom[100787](?).dsiAlignedHigh[100068](arg _mt[100903]:_MT[238], arg this[100901]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100154 call _cond_test(100072 call ==(379500 call . this[100901] c"rank") 1))
    {
      (100081 return(100078 call .(100077 call(379505 call . this[100901] c"ranges") 0) c"alignedHigh"))
    }
    {
      unknown result[100088](100086 call *(379510 call . this[100901] c"rank")(379515 call . this[100901] c"idxType"))
      (100091 'end of statement')
      {
        unknown i[100114] 0
        unknown tmp[100115] "maybe param" "temp"
        (100127 'move' tmp[100115](100125 call chpl_compute_low_param_loop_bound 0(100096 call -(379520 call . this[100901] c"rank") 1)))
        unknown tmp[100116] "maybe param" "temp"
        (100137 'move' tmp[100116](100135 call chpl_compute_high_param_loop_bound 0(100132 call -(379533 call . this[100901] c"rank") 1)))
        unknown tmp[100117] "maybe param" "temp"
        (100140 'move' tmp[100117] 1)
        ParamForLoop[100142]
        { i[100114] tmp[100115] tmp[100116] tmp[100117]
          (100111 call =(100103 call result[100088] i[100114])(100108 call .(100107 call(379527 call . this[100901] c"ranges") i[100114]) c"alignedHigh"))
        }
        label _unused_continueLabel[100119]
        label _breakLabel[100118]
      }
      (100152 return result[100088])
    }
  }
  function DefaultRectangularDom[100787](?).dsiStride[100163](arg _mt[100907]:_MT[238], arg this[100905]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100252 call _cond_test(100167 call ==(379539 call . this[100905] c"rank") 1))
    {
      (100176 return(100173 call .(100172 call(379544 call . this[100905] c"ranges") 0) c"stride"))
    }
    {
      unknown result[100186](100184 call *(379549 call . this[100905] c"rank")(100183 call chpl__signedType(379553 call . this[100905] c"intIdxType")))
      (100189 'end of statement')
      {
        unknown i[100212] 0
        unknown tmp[100213] "maybe param" "temp"
        (100225 'move' tmp[100213](100223 call chpl_compute_low_param_loop_bound 0(100194 call -(379558 call . this[100905] c"rank") 1)))
        unknown tmp[100214] "maybe param" "temp"
        (100235 'move' tmp[100214](100233 call chpl_compute_high_param_loop_bound 0(100230 call -(379571 call . this[100905] c"rank") 1)))
        unknown tmp[100215] "maybe param" "temp"
        (100238 'move' tmp[100215] 1)
        ParamForLoop[100240]
        { i[100212] tmp[100213] tmp[100214] tmp[100215]
          (100209 call =(100201 call result[100186] i[100212])(100206 call .(100205 call(379565 call . this[100905] c"ranges") i[100212]) c"stride"))
        }
        label _unused_continueLabel[100217]
        label _breakLabel[100216]
      }
      (100250 return result[100186])
    }
  }
  function DefaultRectangularDom[100787](?).dsiAlignment[100261](arg _mt[100911]:_MT[238], arg this[100909]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100347 call _cond_test(100265 call ==(379577 call . this[100909] c"rank") 1))
    {
      (100274 return(100271 call .(100270 call(379582 call . this[100909] c"ranges") 0) c"alignment"))
    }
    {
      unknown result[100281](100279 call *(379587 call . this[100909] c"rank")(379592 call . this[100909] c"idxType"))
      (100284 'end of statement')
      {
        unknown i[100307] 0
        unknown tmp[100308] "maybe param" "temp"
        (100320 'move' tmp[100308](100318 call chpl_compute_low_param_loop_bound 0(100289 call -(379597 call . this[100909] c"rank") 1)))
        unknown tmp[100309] "maybe param" "temp"
        (100330 'move' tmp[100309](100328 call chpl_compute_high_param_loop_bound 0(100325 call -(379610 call . this[100909] c"rank") 1)))
        unknown tmp[100310] "maybe param" "temp"
        (100333 'move' tmp[100310] 1)
        ParamForLoop[100335]
        { i[100307] tmp[100308] tmp[100309] tmp[100310]
          (100304 call =(100296 call result[100281] i[100307])(100301 call .(100300 call(379604 call . this[100909] c"ranges") i[100307]) c"alignment"))
        }
        label _unused_continueLabel[100312]
        label _breakLabel[100311]
      }
      (100345 return result[100281])
    }
  }
  function DefaultRectangularDom[100787](?).dsiFirst[100356](arg _mt[100915]:_MT[238], arg this[100913]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100442 call _cond_test(100360 call ==(379616 call . this[100913] c"rank") 1))
    {
      (100369 return(100366 call .(100365 call(379621 call . this[100913] c"ranges") 0) c"first"))
    }
    {
      unknown result[100376](100374 call *(379626 call . this[100913] c"rank")(379631 call . this[100913] c"idxType"))
      (100379 'end of statement')
      {
        unknown i[100402] 0
        unknown tmp[100403] "maybe param" "temp"
        (100415 'move' tmp[100403](100413 call chpl_compute_low_param_loop_bound 0(100384 call -(379636 call . this[100913] c"rank") 1)))
        unknown tmp[100404] "maybe param" "temp"
        (100425 'move' tmp[100404](100423 call chpl_compute_high_param_loop_bound 0(100420 call -(379649 call . this[100913] c"rank") 1)))
        unknown tmp[100405] "maybe param" "temp"
        (100428 'move' tmp[100405] 1)
        ParamForLoop[100430]
        { i[100402] tmp[100403] tmp[100404] tmp[100405]
          (100399 call =(100391 call result[100376] i[100402])(100396 call .(100395 call(379643 call . this[100913] c"ranges") i[100402]) c"first"))
        }
        label _unused_continueLabel[100407]
        label _breakLabel[100406]
      }
      (100440 return result[100376])
    }
  }
  function DefaultRectangularDom[100787](?).dsiLast[100451](arg _mt[100919]:_MT[238], arg this[100917]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100537 call _cond_test(100455 call ==(379655 call . this[100917] c"rank") 1))
    {
      (100464 return(100461 call .(100460 call(379660 call . this[100917] c"ranges") 0) c"last"))
    }
    {
      unknown result[100471](100469 call *(379665 call . this[100917] c"rank")(379670 call . this[100917] c"idxType"))
      (100474 'end of statement')
      {
        unknown i[100497] 0
        unknown tmp[100498] "maybe param" "temp"
        (100510 'move' tmp[100498](100508 call chpl_compute_low_param_loop_bound 0(100479 call -(379675 call . this[100917] c"rank") 1)))
        unknown tmp[100499] "maybe param" "temp"
        (100520 'move' tmp[100499](100518 call chpl_compute_high_param_loop_bound 0(100515 call -(379688 call . this[100917] c"rank") 1)))
        unknown tmp[100500] "maybe param" "temp"
        (100523 'move' tmp[100500] 1)
        ParamForLoop[100525]
        { i[100497] tmp[100498] tmp[100499] tmp[100500]
          (100494 call =(100486 call result[100471] i[100497])(100491 call .(100490 call(379682 call . this[100917] c"ranges") i[100497]) c"last"))
        }
        label _unused_continueLabel[100502]
        label _breakLabel[100501]
      }
      (100535 return result[100471])
    }
  }
  function DefaultRectangularDom[100787](?).dsiBuildArray[100548](arg _mt[100923]:_MT[238], arg this[100921]:DefaultRectangularDom[100787](?), arg eltType[100546]:_any[178](?), param arg initElts[100551] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (100575 return(100556 'new'(_chpl_manager = unmanaged[220](?))(100574 call DefaultRectangularArr[379693](?)(eltType = eltType[100546])(rank =(379699 call . this[100921] c"rank"))(idxType =(379704 call . this[100921] c"idxType"))(stridable =(379709 call . this[100921] c"stridable"))(dom =(100570 call _to_unmanaged this[100921]))(initElts = initElts[100551]))))
  }
  function DefaultRectangularDom[100787](?).dsiBuildArrayWith[100584](arg _mt[100927]:_MT[238], arg this[100925]:DefaultRectangularDom[100787](?), arg eltType[100582]:_any[178](?), arg data[100590] :
  (100589 call _ddata[11695](?) eltType[100582]), arg allocSize[100594] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown allocRange[100613](100611 call #(100608 call chpl_build_low_bounded_range(100605 call .(100604 call(379724 call . this[100925] c"ranges") 0) c"low")) allocSize[100594])(100600 call range[64316](?)(379719 call . this[100925] c"idxType"))
    (100616 'end of statement')
    (100641 return(100620 'new'(_chpl_manager = unmanaged[220](?))(100640 call DefaultRectangularArr[379693](?)(eltType = eltType[100582])(rank =(379732 call . this[100925] c"rank"))(idxType =(379737 call . this[100925] c"idxType"))(stridable =(379742 call . this[100925] c"stridable"))(initElts = 1)(dom =(100636 call _to_unmanaged this[100925]))(data = data[100590]))))
  }
  function DefaultRectangularDom[100787](?).dsiLocalSlice[100649](arg _mt[100931]:_MT[238], arg this[100929]:DefaultRectangularDom[100787](?), arg ranges[100647]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (100672 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularDom[100787](?).dsiTargetLocales[100679](arg _mt[100935]:_MT[238], arg this[100933]:DefaultRectangularDom[100787](?)) : _unknown[51] "method" "primary method"
  {
    (100688 return(100686 call chpl__buildArrayExpr(100683 call chpl_localeID_to_locale(100682 '_wide_get_locale' this[100933]))))
  }
  function DefaultRectangularDom[100787](?).dsiHasSingleLocalSubdomain[100695](arg _mt[100939]:_MT[238], arg this[100937]:DefaultRectangularDom[100787](?)) param : _unknown[51] "method" "primary method"
  {
    (100698 return 1)
  }
  function DefaultRectangularDom[100787](?).dsiLocalSubdomain[100709](arg _mt[100943]:_MT[238], arg this[100941]:DefaultRectangularDom[100787](?), arg loc[100706] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(100743 call _cond_test(100716 call ==(100713 call chpl_localeID_to_locale(100712 '_wide_get_locale' this[100941])) loc[100706]))
    {
      (100725 return(100724 call _getDomain(100722 call _to_unmanaged this[100941])))
    }
    {
      unknown a[100735](100733 call chpl__buildDomainRuntimeType defaultDist[94050](379753 call . this[100941] c"rank")(379758 call . this[100941] c"idxType")(379763 call . this[100941] c"stridable"))
      (100738 'end of statement')
      (100741 return a[100735])
    }
  }
  function DefaultRectangularDom[100787](?).dsiLocalSubdomains[100756](arg _mt[100947]:_MT[238], arg this[100945]:DefaultRectangularDom[100787](?), arg loc[100753] :
  locale[28]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (100762 yield(100761 call(379769 call . this[100945] c"dsiLocalSubdomain") loc[100753]))
  }
  function DefaultRectangularDom[100787](?).chpl_intToIdx[100771](arg _mt[100951]:_MT[238], arg this[100949]:DefaultRectangularDom[100787](?), arg i[100769]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (100781 return(100780 call chpl__intToIdx(100775 call . this[100949] c"idxType") i[100769]))
  }
  type DefaultRectangularDom[100787](?) val super[355660]:BaseRectangularDom[146893](?) "super class" unknown dist[94108] unmanaged DefaultDist[415444] unknown ranges[94124](94122 call * rank[146812](94121 call range[64316](?) idxType[146816] bounded[64205] stridable[146820]))
  type unmanaged DefaultRectangularDom?[415492](?)
  type DefaultRectangularDom?[415489](?)
  type unmanaged DefaultRectangularDom[415402](?)
  type DefaultRectangularDom[415294](?)
  type DefaultRectangularDom[372737](?)
  function chpl__intToIdx[100958](arg idxType[100956]:_any[178](?), arg i[100961] :
  integral[199](?), arg j[100965]:_any[178](?) ...) : _unknown[51] "inline"
  {
    const first[100973] "const"(100972 call chpl__intToIdx idxType[100956] i[100961])
    (100976 'end of statement')
    const rest[100984] "const"(100983 call chpl__intToIdx idxType[100956](100982 'expand_tuple' j[100965]))
    (100987 'end of statement')
    (100994 return(100992 call _build_tuple first[100973](100990 'expand_tuple' rest[100984])))
  }
  function chpl__intToIdx[101002](arg idxType[101000]:_any[178](?), arg i[101005] :
  integral[199](?), arg j[101009] :
  integral[199](?)) : _unknown[51] "inline"
  {
    (101025 return(101023 call _build_tuple(101016 call chpl__intToIdx idxType[101000] i[101005])(101021 call chpl__intToIdx idxType[101000] j[101009])))
  }
  function chpl__intToIdx[101034](arg idxType[101032]:_any[178](?), arg i[101037] :
  _tuple[56199](?)) : _unknown[51] "inline"
  {
    (101046 return(101045 call chpl__intToIdx idxType[101032](101044 'expand_tuple' i[101037])))
  }
  function _remoteAccessData[101218](?).theData[101141](arg _mt[101222]:_MT[238], arg this[101220]:_remoteAccessData[101218](?)) ref : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(101152 call _cond_test(379804 call . this[101220] c"stridable"))
    {
      (101145 return(379809 call . this[101220] c"data"))
    }
    {
      (101149 return(379814 call . this[101220] c"shiftedData"))
    }
  }
  function _remoteAccessData[101218](?).getDataElem[101163](arg _mt[101226]:_MT[238], arg this[101224]:_remoteAccessData[101218](?), arg i[101161]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    if(101180 call _cond_test(379819 call . this[101224] c"stridable"))
    {
      (101170 return(101169 call(379825 call . this[101224] c"dataElem") i[101161]))
    }
    {
      (101177 return(101176 call(379832 call . this[101224] c"shiftedDataElem") i[101161]))
    }
  }
  function _remoteAccessData[101218](?).dataElem[101191](arg _mt[101230]:_MT[238], arg this[101228]:_remoteAccessData[101218](?), arg i[101189]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (101197 return(101196 call(379838 call . this[101228] c"data") i[101189]))
  }
  function _remoteAccessData[101218](?).shiftedDataElem[101206](arg _mt[101234]:_MT[238], arg this[101232]:_remoteAccessData[101218](?), arg i[101204]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (101212 return(101211 call(379844 call . this[101232] c"shiftedData") i[101204]))
  }
  type _remoteAccessData[101218](?) unknown eltType[101052] "type variable" unknown rank[101056] "param" int(64)[13] unknown idxType[101060] "type variable" unknown stridable[101064] "param" bool[10] unknown blkChanged[101070] "param" 0 bool[10] unknown off[101078](101076 call * rank[101056] idxType[101060]) unknown blk[101089](101087 call * rank[101056](101086 call chpl__idxTypeToIntIdxType idxType[101060])) unknown str[101103](101101 call * rank[101056](101100 call chpl__signedType(101098 call chpl__idxTypeToIntIdxType idxType[101060]))) unknown origin[101111](101110 call chpl__idxTypeToIntIdxType idxType[101060]) unknown factoredOffs[101119](101118 call chpl__idxTypeToIntIdxType idxType[101060]) unknown data[101127](101126 call _ddata[11695](?) eltType[101052]) unknown shiftedData[101135](101134 call _ddata[11695](?) eltType[101052])
  function _remoteAccessData[101218](?).getDataIndex[101244](arg _mt[101249]:_MT[238], arg this[101246]:_remoteAccessData[101218](?) :
  _remoteAccessData[101218](?), arg ind[101241] :
  (379850 call . this[101246] c"idxType")) : _unknown[51] "inline" "method"
  {
    (101263 return(101262 call(101254 call . this[101246] c"getDataIndex")(101260 call chpl__tuplify ind[101241])))
  }
  function _remoteAccessData[101218](?).getDataIndex[101278](arg _mt[101283]:_MT[238], arg this[101280]:_remoteAccessData[101218](?) :
  _remoteAccessData[101218](?), arg ind[101275] :
  (101273 call *(379856 call . this[101280] c"rank")(379861 call . this[101280] c"idxType"))) : _unknown[51] "inline" "method"
  {
    if(101688 call _cond_test(379866 call . this[101280] c"stridable"))
    {
      unknown sum[101287](379871 call . this[101280] c"origin")
      (101290 'end of statement')
      {
        unknown i[101340] 0
        unknown tmp[101341] "maybe param" "temp"
        (101353 'move' tmp[101341](101351 call chpl_compute_low_param_loop_bound 0(101295 call -(379876 call . this[101280] c"rank") 1)))
        unknown tmp[101342] "maybe param" "temp"
        (101363 'move' tmp[101342](101361 call chpl_compute_high_param_loop_bound 0(101358 call -(379907 call . this[101280] c"rank") 1)))
        unknown tmp[101343] "maybe param" "temp"
        (101366 'move' tmp[101343] 1)
        ParamForLoop[101368]
        { i[101340] tmp[101341] tmp[101342] tmp[101343]
          (101337 call += sum[101287](101335 call /(101320 call *(101314 call -(101306 call chpl__idxToInt(101304 call ind[101275] i[101340]))(101313 call chpl__idxToInt(101311 call(379884 call . this[101280] c"off") i[101340])))(101319 call(379890 call . this[101280] c"blk") i[101340]))(101333 call _cast(101332 call chpl__idxTypeToIntIdxType(379902 call . this[101280] c"idxType"))(101328 call abs(101326 call(379896 call . this[101280] c"str") i[101340])))))
        }
        label _unused_continueLabel[101345]
        label _breakLabel[101344]
      }
      (101378 return sum[101287])
    }
    {
      if(101683 call _cond_test(101385 call &&(101382 call ==(379913 call . this[101280] c"rank") 1) earlyShiftData[93432]))
      {
        if(101414 call _cond_test(379919 call . this[101280] c"blkChanged"))
        {
          (101401 return(101399 call *(101394 call chpl__idxToInt(101392 call ind[101275] 0))(101398 call(379925 call . this[101280] c"blk") 0)))
        }
        {
          (101411 return(101410 call chpl__idxToInt(101408 call ind[101275] 0)))
        }
      }
      {
        unknown sum[101431](101428 IfExpr  earlyShiftData[93432] then
        { scopeless
          (101425 call _cast(101424 call chpl__idxTypeToIntIdxType(379932 call . this[101280] c"idxType")) 0)
        } else
        { scopeless
          (379937 call . this[101280] c"origin")
        } )
        (101434 'end of statement')
        if(101663 call _cond_test(379942 call . this[101280] c"blkChanged"))
        {
          {
            unknown i[101462] 0
            unknown tmp[101463] "maybe param" "temp"
            (101475 'move' tmp[101463](101473 call chpl_compute_low_param_loop_bound 0(101440 call -(379947 call . this[101280] c"rank") 1)))
            unknown tmp[101464] "maybe param" "temp"
            (101485 'move' tmp[101464](101483 call chpl_compute_high_param_loop_bound 0(101480 call -(379961 call . this[101280] c"rank") 1)))
            unknown tmp[101465] "maybe param" "temp"
            (101488 'move' tmp[101465] 1)
            ParamForLoop[101490]
            { i[101462] tmp[101463] tmp[101464] tmp[101465]
              {
                (101458 call += sum[101431](101456 call *(101451 call chpl__idxToInt(101449 call ind[101275] i[101462]))(101455 call(379955 call . this[101280] c"blk") i[101462])))
              }
            }
            label _unused_continueLabel[101467]
            label _breakLabel[101466]
          }
        }
        {
          if(101658 call _cond_test(101505 call == storageOrder[93465] RMO[93447]))
          {
            {
              unknown i[101532] 0
              unknown tmp[101533] "maybe param" "temp"
              (101545 'move' tmp[101533](101543 call chpl_compute_low_param_loop_bound 0(101510 call -(379967 call . this[101280] c"rank") 2)))
              unknown tmp[101534] "maybe param" "temp"
              (101555 'move' tmp[101534](101553 call chpl_compute_high_param_loop_bound 0(101550 call -(379981 call . this[101280] c"rank") 2)))
              unknown tmp[101535] "maybe param" "temp"
              (101558 'move' tmp[101535] 1)
              ParamForLoop[101560]
              { i[101532] tmp[101533] tmp[101534] tmp[101535]
                {
                  (101528 call += sum[101431](101526 call *(101521 call chpl__idxToInt(101519 call ind[101275] i[101532]))(101525 call(379975 call . this[101280] c"blk") i[101532])))
                }
              }
              label _unused_continueLabel[101537]
              label _breakLabel[101536]
            }
            (101581 call += sum[101431](101580 call chpl__idxToInt(101578 call ind[101275](101575 call -(379988 call . this[101280] c"rank") 1))))
          }
          {
            {
              unknown i[101609] 0
              unknown tmp[101610] "maybe param" "temp"
              (101622 'move' tmp[101610](101620 call chpl_compute_low_param_loop_bound 1(101587 call -(379993 call . this[101280] c"rank") 1)))
              unknown tmp[101611] "maybe param" "temp"
              (101632 'move' tmp[101611](101630 call chpl_compute_high_param_loop_bound 1(101627 call -(380007 call . this[101280] c"rank") 1)))
              unknown tmp[101612] "maybe param" "temp"
              (101635 'move' tmp[101612] 1)
              ParamForLoop[101637]
              { i[101609] tmp[101610] tmp[101611] tmp[101612]
                {
                  (101605 call += sum[101431](101603 call *(101598 call chpl__idxToInt(101596 call ind[101275] i[101609]))(101602 call(380001 call . this[101280] c"blk") i[101609])))
                }
              }
              label _unused_continueLabel[101614]
              label _breakLabel[101613]
            }
            (101655 call += sum[101431](101654 call chpl__idxToInt(101652 call ind[101275] 0)))
          }
        }
        if(101675 call _cond_test(101668 call ! earlyShiftData[93432]))
        {
          (101672 call -= sum[101431](380016 call . this[101280] c"factoredOffs"))
        }
        (101681 return sum[101431])
      }
    }
  }
  function _remoteAccessData[101218](?).computeFactoredOffs[101698](arg _mt[101703]:_MT[238], arg this[101700]:_remoteAccessData[101218](?) :
  _remoteAccessData[101218](?)) : _unknown[51] "method" "no return value for void"
  {
    (101707 call =(380022 call . this[101700] c"factoredOffs") 0)
    {
      unknown i[101739] 0
      unknown tmp[101740] "maybe param" "temp"
      (101752 'move' tmp[101740](101750 call chpl_compute_low_param_loop_bound 0(101714 call -(380027 call . this[101700] c"rank") 1)))
      unknown tmp[101741] "maybe param" "temp"
      (101762 'move' tmp[101741](101760 call chpl_compute_high_param_loop_bound 0(101757 call -(380054 call . this[101700] c"rank") 1)))
      unknown tmp[101742] "maybe param" "temp"
      (101765 'move' tmp[101742] 1)
      ParamForLoop[101767]
      { i[101739] tmp[101740] tmp[101741] tmp[101742]
        {
          (101735 call =(380032 call . this[101700] c"factoredOffs")(101733 call +(380037 call . this[101700] c"factoredOffs")(101731 call *(101723 call(380042 call . this[101700] c"blk") i[101739])(101730 call chpl__idxToInt(101728 call(380048 call . this[101700] c"off") i[101739])))))
        }
      }
      label _unused_continueLabel[101744]
      label _breakLabel[101743]
    }
  }
  function _remoteAccessData[101218](?).initShiftedData[101781](arg _mt[101786]:_MT[238], arg this[101783]:_remoteAccessData[101218](?) :
  _remoteAccessData[101218](?)) : _unknown[51] "method" "no return value for void"
  {
    if(101840 call _cond_test(101792 call && earlyShiftData[93432](101790 call !(380060 call . this[101783] c"stridable"))))
    {
      unknown idxSignedType[101801] "type variable"(101800 call chpl__signedType(101798 call chpl__idxTypeToIntIdxType(380065 call . this[101783] c"idxType")))
      const shiftDist[101826] "const"(101823 IfExpr (101808 call isIntType(380070 call . this[101783] c"idxType")) then
      { scopeless
        (101811 call -(380075 call . this[101783] c"origin")(380080 call . this[101783] c"factoredOffs"))
      } else
      { scopeless
        (101821 call -(101815 call _cast idxSignedType[101801](380085 call . this[101783] c"origin"))(101819 call _cast idxSignedType[101801](380091 call . this[101783] c"factoredOffs")))
      } )
      (101829 'end of statement')
      (101837 call =(380097 call . this[101783] c"shiftedData")(101836 call _ddata_shift(380102 call . this[101783] c"eltType")(380107 call . this[101783] c"data") shiftDist[101826]))
    }
  }
  function _remoteAccessData[101218](?).strideAlignUp[101852](arg _mt[101859]:_MT[238], arg this[101856]:_remoteAccessData[101218](?) :
  _remoteAccessData[101218](?), arg lo[101850]:_any[178](?), arg r[101854]:_any[178](?)) : _unknown[51] "method"
  {
    (101913 return(101911 call +(101862 call . r[101854] c"low")(101909 call *(101897 call /(101885 call -(101882 call +(101870 call - lo[101850](101867 call . r[101854] c"low"))(101880 call _cast(380114 call . this[101856] c"idxType")(101878 call abs(101874 call . r[101854] c"stride")))) 1)(101895 call _cast(380119 call . this[101856] c"idxType")(101893 call abs(101889 call . r[101854] c"stride"))))(101907 call _cast(380124 call . this[101856] c"idxType")(101905 call abs(101901 call . r[101854] c"stride"))))))
  }
  function _remoteAccessData[101218](?).strideAlignDown[101923](arg _mt[101930]:_MT[238], arg this[101927]:_remoteAccessData[101218](?) :
  _remoteAccessData[101218](?), arg hi[101921]:_any[178](?), arg r[101925]:_any[178](?)) : _unknown[51] "method"
  {
    (101954 return(101952 call - hi[101921](101950 call %(101938 call - hi[101921](101935 call . r[101925] c"low"))(101948 call _cast(380131 call . this[101927] c"idxType")(101946 call abs(101942 call . r[101925] c"stride"))))))
  }
  function _remoteAccessData[101218](?).initDataFrom[101966](arg _mt[101971]:_MT[238], arg this[101968]:_remoteAccessData[101218](?) :
  _remoteAccessData[101218](?), arg other[101963] :
  _remoteAccessData[101218](?)) : _unknown[51] "method" "no return value for void"
  {
    (101983 call =(101976 call . this[101968] c"data")(101980 call . other[101963] c"data"))
  }
  function _remoteAccessData[101218](?).toSlice[101994](arg _mt[101999]:_MT[238], arg this[101996]:_remoteAccessData[101218](?) :
  _remoteAccessData[101218](?), arg newDom[101992]:_any[178](?)) : _unknown[51] "method"
  {
    (102013 call compilerAssert(102010 call ==(102003 call . this[101996] c"rank")(102007 call . newDom[101992] c"rank")))
    unknown rad[102044](102043 call _remoteAccessData[101218](?)(380138 call . this[101996] c"eltType")(102020 call . newDom[101992] c"rank")(102024 call . newDom[101992] c"idxType")(102028 call . newDom[101992] c"stridable")(102041 call ||(102032 call . newDom[101992] c"stridable")(102038 call . this[101996] c"blkChanged")))
    (102047 'end of statement')
    (102056 call(102051 call . rad[102044] c"initDataFrom") this[101996])
    (102079 call =(102061 call . rad[102044] c"shiftedData")(102076 IfExpr (102065 call . newDom[101992] c"stridable") then
    { scopeless
      (102069 call . this[101996] c"data")
    } else
    { scopeless
      (102073 call . this[101996] c"shiftedData")
    } ))
    (102098 call =(102085 call . rad[102044] c"origin")(102096 call _cast(102093 call . newDom[101992] c"idxType")(102089 call . this[101996] c"origin")))
    (102116 call =(102104 call . rad[102044] c"off")(102115 call chpl__tuplify(102111 call . newDom[101992] c"dsiLow")))
    (102134 call =(102122 call . rad[102044] c"str")(102133 call chpl__tuplify(102129 call . newDom[101992] c"dsiStride")))
    {
      unknown i[102286] 0
      unknown tmp[102287] "maybe param" "temp"
      (102299 'move' tmp[102287](102297 call chpl_compute_low_param_loop_bound 0(102140 call -(380144 call . this[101996] c"rank") 1)))
      unknown tmp[102288] "maybe param" "temp"
      (102309 'move' tmp[102288](102307 call chpl_compute_high_param_loop_bound 0(102304 call -(380161 call . this[101996] c"rank") 1)))
      unknown tmp[102289] "maybe param" "temp"
      (102312 'move' tmp[102289] 1)
      ParamForLoop[102314]
      { i[102286] tmp[102287] tmp[102288] tmp[102289]
        {
          const shift[102200] "const"(102198 call /(102180 call *(102152 call(102147 call . this[101996] c"blk") i[102286])(102178 call -(102167 call chpl__idxToInt(102163 call .(102162 call(102157 call . newDom[101992] c"dsiDim") i[102286]) c"low"))(102177 call chpl__idxToInt(102175 call(102170 call . this[101996] c"off") i[102286]))))(102196 call _cast(102193 call . rad[102044] c"idxType")(102191 call abs(102189 call(102184 call . this[101996] c"str") i[102286]))))
          (102203 'end of statement')
          if(102233 call _cond_test(102213 call >(102211 call(102206 call . this[101996] c"str") i[102286]) 0))
          {
            (102220 call +=(102216 call . rad[102044] c"origin") shift[102200])
          }
          {
            (102229 call -=(102225 call . rad[102044] c"origin") shift[102200])
          }
          const mult[102262] "const"(102260 call _cast(102257 call . rad[102044] c"idxType")(102254 call /(102244 call .(102243 call(102238 call . newDom[101992] c"dsiDim") i[102286]) c"stride")(102253 call(102248 call . this[101996] c"str") i[102286])))
          (102265 'end of statement')
          (102283 call =(102272 call(102267 call . rad[102044] c"blk") i[102286])(102281 call *(102279 call(102274 call . this[101996] c"blk") i[102286]) mult[102262]))
        }
      }
      label _unused_continueLabel[102291]
      label _breakLabel[102290]
    }
    (102330 call(102326 call . rad[102044] c"computeFactoredOffs"))
    (102339 call(102335 call . rad[102044] c"initShiftedData"))
    (102342 return rad[102044])
  }
  function _remoteAccessData[101218](?).toReindex[102351](arg _mt[102356]:_MT[238], arg this[102353]:_remoteAccessData[101218](?) :
  _remoteAccessData[101218](?), arg newDom[102349]:_any[178](?)) : _unknown[51] "method"
  {
    (102370 call compilerAssert(102367 call ==(102360 call . this[102353] c"rank")(102364 call . newDom[102349] c"rank")))
    unknown rad[102390](102389 call _remoteAccessData[101218](?)(380168 call . this[102353] c"eltType")(102377 call . newDom[102349] c"rank")(102381 call . newDom[102349] c"idxType")(102385 call . newDom[102349] c"stridable")(380173 call . this[102353] c"blkChanged"))
    (102393 'end of statement')
    (102400 call(102395 call . rad[102390] c"initDataFrom") this[102353])
    (102421 call =(102403 call . rad[102390] c"shiftedData")(102418 IfExpr (102407 call . newDom[102349] c"stridable") then
    { scopeless
      (102411 call . this[102353] c"data")
    } else
    { scopeless
      (102415 call . this[102353] c"shiftedData")
    } ))
    (102438 call =(102425 call . rad[102390] c"origin")(102436 call _cast(102433 call . newDom[102349] c"intIdxType")(102429 call . this[102353] c"origin")))
    (102449 call =(102442 call . rad[102390] c"blk")(102446 call . this[102353] c"blk"))
    (102463 call =(102453 call . rad[102390] c"off")(102462 call chpl__tuplify(102458 call . newDom[102349] c"dsiLow")))
    (102477 call =(102467 call . rad[102390] c"str")(102476 call chpl__tuplify(102472 call . newDom[102349] c"dsiStride")))
    (102493 call =(102483 call . rad[102390] c"factoredOffs")(102491 call _cast(102488 call . newDom[102349] c"intIdxType") 0))
    (102501 call(102497 call . rad[102390] c"computeFactoredOffs"))
    (102508 call(102504 call . rad[102390] c"initShiftedData"))
    (102511 return rad[102390])
  }
  function _remoteAccessData[101218](?).toRankChange[102520](arg _mt[102529]:_MT[238], arg this[102526]:_remoteAccessData[101218](?) :
  _remoteAccessData[101218](?), arg newDom[102518]:_any[178](?), arg cd[102522]:_any[178](?), arg idx[102524]:_any[178](?)) : _unknown[51] "method"
  {
    (102555 call compilerAssert(102552 call &&(102540 call ==(102533 call . this[102526] c"rank")(102537 call . idx[102524] c"size"))(102550 call !=(102543 call . this[102526] c"rank")(102547 call . newDom[102518] c"rank"))))
    unknown intIdxType[102562] "type variable"(102559 call . newDom[102518] c"intIdxType")
    unknown idxSignedType[102569] "type variable"(102568 call chpl__signedType intIdxType[102562])
    unknown rad[102589](102588 call _remoteAccessData[101218](?)(380182 call . this[102526] c"eltType")(102576 call . newDom[102518] c"rank")(102580 call . newDom[102518] c"idxType")(102584 call . newDom[102518] c"stridable") 1)
    (102592 'end of statement')
    const collapsedDims[102597] "const"(102596 call chpl__tuplify cd[102522])
    (102600 'end of statement')
    (102607 call(102602 call . rad[102589] c"initDataFrom") this[102526])
    (102628 call =(102610 call . rad[102589] c"shiftedData")(102625 IfExpr (102614 call . newDom[102518] c"stridable") then
    { scopeless
      (102618 call . this[102526] c"data")
    } else
    { scopeless
      (102622 call . this[102526] c"shiftedData")
    } ))
    (102645 call =(102632 call . rad[102589] c"origin")(102643 call _cast(102640 call . newDom[102518] c"intIdxType")(102636 call . this[102526] c"origin")))
    unknown curDim[102649] 0
    (102652 'end of statement')
    {
      unknown j[102854] 0
      unknown tmp[102855] "maybe param" "temp"
      (102867 'move' tmp[102855](102865 call chpl_compute_low_param_loop_bound 0(102659 call -(102655 call . idx[102524] c"size") 1)))
      unknown tmp[102856] "maybe param" "temp"
      (102880 'move' tmp[102856](102878 call chpl_compute_high_param_loop_bound 0(102872 call -(102874 call . idx[102524] c"size") 1)))
      unknown tmp[102857] "maybe param" "temp"
      (102883 'move' tmp[102857] 1)
      ParamForLoop[102885]
      { j[102854] tmp[102855] tmp[102856] tmp[102857]
        {
          if(102849 call _cond_test(102667 call !(102666 call collapsedDims[102597] j[102854])))
          {
            (102686 call =(102675 call(102670 call . rad[102589] c"off") curDim[102649])(102683 call .(102682 call(102677 call . newDom[102518] c"dsiDim") curDim[102649]) c"low"))
            const off[102715] "const"(102713 call _cast idxSignedType[102569](102710 call -(102699 call chpl__idxToInt(102697 call(102692 call . rad[102589] c"off") curDim[102649]))(102709 call chpl__idxToInt(102707 call(102702 call . this[102526] c"off") j[102854]))))
            (102718 'end of statement')
            (102748 call +=(102720 call . rad[102589] c"origin")(102746 call _cast intIdxType[102562](102743 call /(102734 call *(102731 call _cast idxSignedType[102569](102729 call(102724 call . this[102526] c"blk") j[102854])) off[102715])(102742 call(102737 call . this[102526] c"str") j[102854]))))
            (102765 call =(102757 call(102752 call . rad[102589] c"blk") curDim[102649])(102764 call(102759 call . this[102526] c"blk") j[102854]))
            (102782 call =(102774 call(102769 call . rad[102589] c"str") curDim[102649])(102781 call(102776 call . this[102526] c"str") j[102854]))
            (102787 call += curDim[102649] 1)
          }
          {
            const off[102812] "const"(102810 call _cast idxSignedType[102569](102807 call -(102796 call chpl__idxToInt(102794 call idx[102524] j[102854]))(102806 call chpl__idxToInt(102804 call(102799 call . this[102526] c"off") j[102854]))))
            (102815 'end of statement')
            (102846 call +=(102818 call . rad[102589] c"origin")(102844 call _cast intIdxType[102562](102841 call /(102832 call *(102829 call _cast idxSignedType[102569](102827 call(102822 call . this[102526] c"blk") j[102854])) off[102812])(102840 call(102835 call . this[102526] c"str") j[102854]))))
          }
        }
      }
      label _unused_continueLabel[102859]
      label _breakLabel[102858]
    }
    (102899 call(102895 call . rad[102589] c"computeFactoredOffs"))
    (102906 call(102902 call . rad[102589] c"initShiftedData"))
    (102909 return rad[102589])
  }
  function LocRADCache[103070](?).init[102971](arg _mt[103074]:_MT[238], arg this[103072]:LocRADCache[103070](?), arg eltType[102969]:_any[178](?), param arg rank[102974] :
  int(64)[13], arg idxType[102977]:_any[178](?), param arg stridable[102980] :
  bool[10], arg newTargetLocDom[102988] :
  (102986 call chpl__buildDomainRuntimeType defaultDist[94050] rank[102974])) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (102996 call =(102992 call . this[103072] c"eltType") eltType[102969])
    (103005 call =(103001 call . this[103072] c"rank") rank[102974])
    (103013 call =(103009 call . this[103072] c"idxType") idxType[102977])
    (103021 call =(103017 call . this[103072] c"stridable") stridable[102980])
    (103026 call =(380232 call . this[103072] c"targetLocDom") newTargetLocDom[102988])
  }
  function LocRADCache[103070](?).lockRAD[103035](arg _mt[103078]:_MT[238], arg this[103076]:LocRADCache[103070](?), arg rlocIdx[103033]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (103045 call(103041 call .(103040 call(380240 call . this[103076] c"RADLocks") rlocIdx[103033]) c"lock"))
  }
  function LocRADCache[103070](?).unlockRAD[103054](arg _mt[103082]:_MT[238], arg this[103080]:LocRADCache[103070](?), arg rlocIdx[103052]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (103064 call(103060 call .(103059 call(380246 call . this[103080] c"RADLocks") rlocIdx[103052]) c"unlock"))
  }
  type LocRADCache[103070](?) val super[355662]:object[22] "super class" unknown eltType[102914] "type variable" unknown rank[102918] "param" int(64)[13] unknown idxType[102922] "type variable" unknown stridable[102926] "param" bool[10] unknown targetLocDom[102935](102933 call chpl__buildDomainRuntimeType defaultDist[94050] rank[102918]) unknown RAD[102952] "unsafe"(102950 call chpl__buildArrayRuntimeType(102948 call chpl__ensureDomainExpr targetLocDom[102935])(102947 call _remoteAccessData[101218](?) eltType[102914] rank[102918] idxType[102922] stridable[102926])) unknown RADLocks[102963](102961 call chpl__buildArrayRuntimeType(102959 call chpl__ensureDomainExpr targetLocDom[102935]) chpl_LocalSpinlock[187386])
  type unmanaged LocRADCache?[415552](?)
  type LocRADCache?[415549](?)
  type LocRADCache[408858](?)
  function DefaultRectangularArr[106840](?).init[103208](arg _mt[106844]:_MT[238], arg this[106842]:DefaultRectangularArr[106840](?), arg eltType[103206]:_any[178](?), param arg rank[103210]:_any[178](?), arg idxType[103212]:_any[178](?), param arg stridable[103214]:_any[178](?), arg dom[103226] :
  (103224 call unmanaged DefaultRectangularDom[415402](?)(rank = rank[103210])(idxType = idxType[103212])(stridable = stridable[103214])), param arg initElts[103230] =
  1, arg data[103238] :
  (103236 call _ddata[11695](?) eltType[103206]) =
  nil[44], arg externArr[103243] =
  0, arg _borrowed[103247] =
  0, arg externFreeFunc[103252] :
  c_void_ptr[149] =
  nil[44]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (103269 call(103257 call .(358636 call . this[106842] c"super") c"init")(eltType = eltType[103206])(rank = rank[103210])(idxType = idxType[103212])(stridable = stridable[103214]))
    (103277 call =(103273 call . this[106842] c"dom") dom[103226])
    (103285 call =(103281 call . this[106842] c"data") data[103238])
    (103295 call =(103291 call . this[106842] c"externFreeFunc") externFreeFunc[103252])
    (103305 call =(103301 call . this[106842] c"externArr") externArr[103243])
    (103315 call =(103311 call . this[106842] c"_borrowed") _borrowed[103247])
    (103325 call =(103321 call . this[106842] c"callPostAlloc") 0)
    (103335 call =(103331 call . this[106842] c"deinitElts") initElts[103230])
    (103343 call(103339 call . this[106842] c"complete"))
    (103353 call(103348 call . this[106842] c"setupFieldsAndAllocate") initElts[103230])
  }
  function DefaultRectangularArr[106840](?).intIdxType[103359](arg _mt[106848]:_MT[238], arg this[106846]:DefaultRectangularArr[106840](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (103365 return(103364 call chpl__idxTypeToIntIdxType(380289 call . this[106846] c"idxType")))
  }
  function DefaultRectangularArr[106840](?).dsiDisplayRepresentation[103372](arg _mt[106852]:_MT[238], arg this[106850]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (103394 call writeln "off="(380294 call . this[106850] c"off"))
    (103417 call writeln "blk="(380299 call . this[106850] c"blk"))
    (103439 call writeln "str="(380304 call . this[106850] c"str"))
    (103461 call writeln "factoredOffs="(380309 call . this[106850] c"factoredOffs"))
  }
  function DefaultRectangularArr[106840](?).dsiGetBaseDom[103467](arg _mt[106856]:_MT[238], arg this[106854]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (103470 return(380314 call . this[106854] c"dom"))
  }
  function DefaultRectangularArr[106840](?).dsiElementInitializationComplete[103477](arg _mt[106860]:_MT[238], arg this[106858]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const size[103527] "const"(103524 IfExpr (103484 call == storageOrder[93465] RMO[93447]) then
    { scopeless
      (103500 call *(103489 call(380320 call . this[106858] c"blk") 0)(103497 call .(103496 call(103491 call .(358651 call . this[106858] c"dom") c"dsiDim") 0) c"size"))
    } else
    { scopeless
      (103522 call *(103508 call(380325 call . this[106858] c"blk")(103505 call -(380330 call . this[106858] c"rank") 1))(103519 call .(103518 call(103510 call .(358656 call . this[106858] c"dom") c"dsiDim")(103515 call -(380335 call . this[106858] c"rank") 1)) c"size"))
    } )
    (103530 'end of statement')
    if(103561 call _cond_test debugDefaultDist[93392])
    {
      (103558 call chpl_debug_writeln "*** DR calling postalloc "(103554 call _cast string[26](380341 call . this[106858] c"eltType")) " " size[103527])
    }
    if(103578 call _cond_test(380347 call . this[106858] c"callPostAlloc"))
    {
      (103570 call _ddata_allocate_postalloc(380352 call . this[106858] c"data") size[103527])
      (103575 call =(380358 call . this[106858] c"callPostAlloc") 0)
    }
    (103584 call =(380363 call . this[106858] c"deinitElts") 1)
  }
  function DefaultRectangularArr[106840](?).dsiElementDeinitializationComplete[103591](arg _mt[106864]:_MT[238], arg this[106862]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (103595 call =(380368 call . this[106862] c"deinitElts") 0)
  }
  function DefaultRectangularArr[106840](?).dsiDestroyArr[103607](arg _mt[106868]:_MT[238], arg this[106866]:DefaultRectangularArr[106840](?), arg deinitElts[103604] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(103636 call _cond_test debugDefaultDist[93392])
    {
      (103633 call chpl_debug_writeln "*** DR calling dealloc "(103631 call _cast string[26](380374 call . this[106866] c"eltType")))
    }
    if(103807 call _cond_test(380379 call . this[106866] c"externArr"))
    {
      if(103655 call _cond_test(103643 call !(380384 call . this[106866] c"_borrowed")))
      {
        (103652 call chpl_call_free_func(380389 call . this[106866] c"externFreeFunc")(103651 call c_ptrTo(380394 call . this[106866] c"data")))
      }
    }
    {
      unknown numInd[103666](103663 call .(358661 call . this[106866] c"dom") c"dsiNumIndices")
      (103669 'end of statement')
      unknown numElts[103673] numInd[103666](380398 call . this[106866] c"intIdxType")
      (103676 'end of statement')
      if(103797 call _cond_test(103688 call &&(103682 call && deinitElts[103604](103679 call . this[106866] c"deinitElts"))(103686 call > numInd[103666] 0)))
      {
        unknown needsDestroy[103700] "param"(103699 'needs auto destroy'(103698 'deref'(103697 call(380406 call . this[106866] c"data") 0)))
        (103703 'end of statement')
        if(103793 call _cond_test needsDestroy[103700])
        {
          if(103788 call _cond_test(103709 call _deinitElementsIsParallel(380412 call . this[106866] c"eltType")))
          {
            Forall {
              induction variables:
                
                unknown i[103727] "index var" "insert auto destroy"
              iterated expressions:
                (103715 call #(103712 call chpl_build_low_bounded_range 0) numElts[103673])
              shadow variables:
              other variables
                forall body
              {
                (103723 call chpl__autoDestroy(103721 call(380418 call . this[106866] c"data") i[103727]))
              }
            }
          }
          {
            {
              unknown _indexOfInterest[103747] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[103748] "expr temp" "temp"
              (103757 'move' _iterator[103748](103755 call _getIterator(103764 call chpl_direct_counted_range_iter 0 numElts[103673])))
              Defer
              {
                {
                  (103780 call _freeIterator _iterator[103748])
                }
              }
              { scopeless type
                (103769 'move' _indexOfInterest[103747](103766 call iteratorIndex _iterator[103748]))
              }
              ForLoop[103749]
              {
                unknown i[103773] "index var" "insert auto destroy"
                (103775 'move' i[103773] _indexOfInterest[103747])
                {
                  (103744 call chpl__autoDestroy(103742 call(380424 call . this[106866] c"data") i[103773]))
                }
                label _continueLabel[103752]
                _indexOfInterest[103747]
                _iterator[103748]
              }
              label _breakLabel[103753]
            }
          }
        }
      }
      (103805 call _ddata_free(380431 call . this[106866] c"data") numInd[103666])
    }
  }
  function DefaultRectangularArr[106840](?).theData[103815](arg _mt[106872]:_MT[238], arg this[106870]:DefaultRectangularArr[106840](?)) ref : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(103829 call _cond_test(103821 call && earlyShiftData[93432](103819 call !(380438 call . this[106870] c"stridable"))))
    {
      (103824 return(380443 call . this[106870] c"shiftedData"))
    }
    {
      (103827 return(380448 call . this[106870] c"data"))
    }
  }
  function DefaultRectangularArr[106840](?).these[103846](arg _mt[106876]:_MT[238], arg this[106874]:DefaultRectangularArr[106840](?), arg tasksPerLocale[103842] :
  int(64)[13] =
  dataParTasksPerLocale[93281], arg ignoreRunning[103850] :
  bool[10] =
  dataParIgnoreRunningTasks[93287], arg minIndicesPerTask[103856] :
  int(64)[13] =
  dataParMinGranularity[93293]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(103883 call _cond_test debugDefaultDist[93392])
    {
      (103880 call chpl_debug_writeln "*** In defRectArr simple-dd serial iterator")
    }
    {
      unknown _indexOfInterest[103897] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[103898] "expr temp" "temp"
      (103907 'move' _iterator[103898](103905 call _getIterator(103893 call chpl__serialViewIter this[106874](380458 call . this[106874] c"dom"))))
      Defer
      {
        {
          (103924 call _freeIterator _iterator[103898])
        }
      }
      { scopeless type
        (103913 'move' _indexOfInterest[103897](103910 call iteratorIndex _iterator[103898]))
      }
      ForLoop[103899]
      {
        unknown elem[103917] "index var" "insert auto destroy"
        (103919 'move' elem[103917] _indexOfInterest[103897])
        (103895 yield elem[103917])
        label _continueLabel[103902]
        _indexOfInterest[103897]
        _iterator[103898]
      }
      label _breakLabel[103903]
    }
  }
  function DefaultRectangularArr[106840](?).these[103939](arg _mt[106880]:_MT[238], arg this[106878]:DefaultRectangularArr[106840](?), param arg tag[103936] :
  iterKind[453], arg tasksPerLocale[103942] =
  dataParTasksPerLocale[93281], arg ignoreRunning[103946] =
  dataParIgnoreRunningTasks[93287], arg minIndicesPerTask[103950] =
  dataParMinGranularity[93293]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(103983 call _cond_test debugDefaultDist[93392])
    {
      (103980 call chpl_debug_writeln "*** In defRectArr simple-dd standalone iterator")
    }
    {
      unknown _indexOfInterest[104006] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104007] "expr temp" "temp"
      (104016 'move' _iterator[104007](104014 call _getIterator(103998 call(103990 call .(358668 call . this[106878] c"dom") c"these") tag[103936] tasksPerLocale[103942] ignoreRunning[103946] minIndicesPerTask[103950])))
      Defer
      {
        {
          (104033 call _freeIterator _iterator[104007])
        }
      }
      { scopeless type
        (104022 'move' _indexOfInterest[104006](104019 call iteratorIndex _iterator[104007]))
      }
      ForLoop[104008]
      {
        unknown i[104026] "index var" "insert auto destroy"
        (104028 'move' i[104026] _indexOfInterest[104006])
        {
          (104003 yield(104002 call(380473 call . this[106878] c"dsiAccess") i[104026]))
        }
        label _continueLabel[104011]
        _indexOfInterest[104006]
        _iterator[104007]
      }
      label _breakLabel[104012]
    }
  }
  where {
    (103958 call == tag[103936] standalone[451])
  }
  function DefaultRectangularArr[106840](?).these[104049](arg _mt[106884]:_MT[238], arg this[106882]:DefaultRectangularArr[106840](?), param arg tag[104046] :
  iterKind[453], arg tasksPerLocale[104052] =
  dataParTasksPerLocale[93281], arg ignoreRunning[104056] =
  dataParIgnoreRunningTasks[93287], arg minIndicesPerTask[104060] =
  dataParMinGranularity[93293]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(104093 call _cond_test debugDefaultDist[93392])
    {
      (104090 call chpl_debug_writeln "*** In defRectArr simple-dd leader iterator")
    }
    {
      unknown _indexOfInterest[104112] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104113] "expr temp" "temp"
      (104122 'move' _iterator[104113](104120 call _getIterator(104108 call(104100 call .(358674 call . this[106882] c"dom") c"these") tag[104046] tasksPerLocale[104052] ignoreRunning[104056] minIndicesPerTask[104060])))
      Defer
      {
        {
          (104139 call _freeIterator _iterator[104113])
        }
      }
      { scopeless type
        (104128 'move' _indexOfInterest[104112](104125 call iteratorIndex _iterator[104113]))
      }
      ForLoop[104114]
      {
        unknown followThis[104132] "index var" "insert auto destroy"
        (104134 'move' followThis[104132] _indexOfInterest[104112])
        (104110 yield followThis[104132])
        label _continueLabel[104117]
        _indexOfInterest[104112]
        _iterator[104113]
      }
      label _breakLabel[104118]
    }
  }
  where {
    (104068 call == tag[104046] leader[447])
  }
  function DefaultRectangularArr[106840](?).these[104155](arg _mt[106888]:_MT[238], arg this[106886]:DefaultRectangularArr[106840](?), param arg tag[104152] :
  iterKind[453], arg followThis[104157]:_any[178](?), arg tasksPerLocale[104160] =
  dataParTasksPerLocale[93281], arg ignoreRunning[104164] =
  dataParIgnoreRunningTasks[93287], arg minIndicesPerTask[104168] =
  dataParMinGranularity[93293]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(104202 call _cond_test debugDefaultDist[93392])
    {
      (104199 call chpl_debug_writeln "*** In defRectArr simple-dd follower iterator: " followThis[104157])
    }
    {
      unknown _indexOfInterest[104229] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104230] "expr temp" "temp"
      (104239 'move' _iterator[104230](104237 call _getIterator(104222 call(104209 call .(358680 call . this[106886] c"dom") c"these")(tag = follower[449]) followThis[104157] tasksPerLocale[104160] ignoreRunning[104164] minIndicesPerTask[104168])))
      Defer
      {
        {
          (104256 call _freeIterator _iterator[104230])
        }
      }
      { scopeless type
        (104245 'move' _indexOfInterest[104229](104242 call iteratorIndex _iterator[104230]))
      }
      ForLoop[104231]
      {
        unknown i[104249] "index var" "insert auto destroy"
        (104251 'move' i[104249] _indexOfInterest[104229])
        (104227 yield(104226 call(380500 call . this[106886] c"dsiAccess") i[104249]))
        label _continueLabel[104234]
        _indexOfInterest[104229]
        _iterator[104230]
      }
      label _breakLabel[104235]
    }
  }
  where {
    (104176 call == tag[104152] follower[449])
  }
  function DefaultRectangularArr[106840](?).computeFactoredOffs[104268](arg _mt[106892]:_MT[238], arg this[106890]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (104275 call =(380506 call . this[106890] c"factoredOffs")(104273 call _cast(380510 call . this[106890] c"intIdxType") 0))
    {
      unknown i[104307] 0
      unknown tmp[104308] "maybe param" "temp"
      (104320 'move' tmp[104308](104318 call chpl_compute_low_param_loop_bound 0(104282 call -(380515 call . this[106890] c"rank") 1)))
      unknown tmp[104309] "maybe param" "temp"
      (104330 'move' tmp[104309](104328 call chpl_compute_high_param_loop_bound 0(104325 call -(380542 call . this[106890] c"rank") 1)))
      unknown tmp[104310] "maybe param" "temp"
      (104333 'move' tmp[104310] 1)
      ParamForLoop[104335]
      { i[104307] tmp[104308] tmp[104309] tmp[104310]
        {
          (104303 call =(380520 call . this[106890] c"factoredOffs")(104301 call +(380525 call . this[106890] c"factoredOffs")(104299 call *(104291 call(380530 call . this[106890] c"blk") i[104307])(104298 call chpl__idxToInt(104296 call(380536 call . this[106890] c"off") i[104307])))))
        }
      }
      label _unused_continueLabel[104312]
      label _breakLabel[104311]
    }
  }
  function DefaultRectangularArr[106840](?).initShiftedData[104348](arg _mt[106896]:_MT[238], arg this[106894]:DefaultRectangularArr[106840](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(104407 call _cond_test(104354 call && earlyShiftData[93432](104352 call !(380548 call . this[106894] c"stridable"))))
    {
      if(104402 call _cond_test(104361 call >(104357 call .(358686 call . this[106894] c"dom") c"dsiNumIndices") 0))
      {
        const shiftDist[104387] "const"(104384 IfExpr (104366 call isIntType(380553 call . this[106894] c"idxType")) then
        { scopeless
          (104372 call -(104369 call _cast(380558 call . this[106894] c"idxType") 0)(380563 call . this[106894] c"factoredOffs"))
        } else
        { scopeless
          (104382 call -(104376 call _cast(380570 call . this[106894] c"idxSignedType") 0)(104380 call _cast(380580 call . this[106894] c"idxSignedType")(380575 call . this[106894] c"factoredOffs")))
        } )
        (104390 'end of statement')
        (104399 call =(380585 call . this[106894] c"shiftedData")(104398 call _ddata_shift(380590 call . this[106894] c"eltType")(380595 call . this[106894] c"data") shiftDist[104387]))
      }
    }
  }
  function DefaultRectangularArr[106840](?).setupFieldsAndAllocate[104418](arg _mt[106900]:_MT[238], arg this[106898]:DefaultRectangularArr[106840](?), param arg initElts[104416]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown dim[104462] 0
      unknown tmp[104463] "maybe param" "temp"
      (104475 'move' tmp[104463](104473 call chpl_compute_low_param_loop_bound 0(104423 call -(380601 call . this[106898] c"rank") 1)))
      unknown tmp[104464] "maybe param" "temp"
      (104485 'move' tmp[104464](104483 call chpl_compute_high_param_loop_bound 0(104480 call -(380620 call . this[106898] c"rank") 1)))
      unknown tmp[104465] "maybe param" "temp"
      (104488 'move' tmp[104465] 1)
      ParamForLoop[104490]
      { dim[104462] tmp[104463] tmp[104464] tmp[104465]
        {
          (104441 call =(104430 call(380606 call . this[106898] c"off") dim[104462])(104438 call .(104437 call(104432 call .(358691 call . this[106898] c"dom") c"dsiDim") dim[104462]) c"alignedLow"))
          (104459 call =(104448 call(380613 call . this[106898] c"str") dim[104462])(104456 call .(104455 call(104450 call .(358696 call . this[106898] c"dom") c"dsiDim") dim[104462]) c"stride"))
        }
      }
      label _unused_continueLabel[104467]
      label _breakLabel[104466]
    }
    if(104720 call _cond_test(104505 call == storageOrder[93465] RMO[93447]))
    {
      (104518 call =(104513 call(380626 call . this[106898] c"blk")(104510 call -(380631 call . this[106898] c"rank") 1))(104516 call _cast(380635 call . this[106898] c"intIdxType") 1))
      {
        unknown dim[104563] 0
        unknown tmp[104564] "maybe param" "temp"
        (104575 'move' tmp[104564](104573 call chpl_compute_low_param_loop_bound 0(104525 call -(380640 call . this[106898] c"rank") 2)))
        unknown tmp[104565] "maybe param" "temp"
        (104585 'move' tmp[104565](104583 call chpl_compute_high_param_loop_bound 0(104580 call -(380658 call . this[106898] c"rank") 2)))
        unknown tmp[104566] "maybe param" "temp"
        (104588 'move' tmp[104566](104530 call - 1))
        ParamForLoop[104590]
        { dim[104563] tmp[104564] tmp[104565] tmp[104566]
          (104560 call =(104537 call(380645 call . this[106898] c"blk") dim[104563])(104558 call *(104544 call(380651 call . this[106898] c"blk")(104541 call + dim[104563] 1))(104555 call .(104554 call(104546 call .(358702 call . this[106898] c"dom") c"dsiDim")(104551 call + dim[104563] 1)) c"size")))
        }
        label _unused_continueLabel[104568]
        label _breakLabel[104567]
      }
    }
    {
      if(104716 call _cond_test(104606 call == storageOrder[93465] CMO[93449]))
      {
        (104616 call =(104611 call(380664 call . this[106898] c"blk") 0)(104614 call _cast(380668 call . this[106898] c"intIdxType") 1))
        {
          unknown dim[104657] 0
          unknown tmp[104658] "maybe param" "temp"
          (104670 'move' tmp[104658](104668 call chpl_compute_low_param_loop_bound 1(104623 call -(380673 call . this[106898] c"rank") 1)))
          unknown tmp[104659] "maybe param" "temp"
          (104680 'move' tmp[104659](104678 call chpl_compute_high_param_loop_bound 1(104675 call -(380691 call . this[106898] c"rank") 1)))
          unknown tmp[104660] "maybe param" "temp"
          (104683 'move' tmp[104660] 1)
          ParamForLoop[104685]
          { dim[104657] tmp[104658] tmp[104659] tmp[104660]
            {
              (104653 call =(104630 call(380678 call . this[106898] c"blk") dim[104657])(104651 call *(104637 call(380684 call . this[106898] c"blk")(104634 call - dim[104657] 1))(104648 call .(104647 call(104639 call .(358708 call . this[106898] c"dom") c"dsiDim")(104644 call - dim[104657] 1)) c"size")))
            }
          }
          label _unused_continueLabel[104662]
          label _breakLabel[104661]
        }
      }
      {
        (104713 call halt "unknown array storage order")
      }
    }
    (104727 call(380695 call . this[106898] c"computeFactoredOffs"))
    const size[104777] "const"(104774 IfExpr (104734 call == storageOrder[93465] RMO[93447]) then
    { scopeless
      (104750 call *(104739 call(380701 call . this[106898] c"blk") 0)(104747 call .(104746 call(104741 call .(358714 call . this[106898] c"dom") c"dsiDim") 0) c"size"))
    } else
    { scopeless
      (104772 call *(104758 call(380706 call . this[106898] c"blk")(104755 call -(380711 call . this[106898] c"rank") 1))(104769 call .(104768 call(104760 call .(358719 call . this[106898] c"dom") c"dsiDim")(104765 call -(380716 call . this[106898] c"rank") 1)) c"size"))
    } )
    (104780 'end of statement')
    if(104845 call _cond_test usePollyArrayIndex[93437])
    {
      {
        unknown dim[104807] 0
        unknown tmp[104808] "maybe param" "temp"
        (104820 'move' tmp[104808](104818 call chpl_compute_low_param_loop_bound 0(104785 call -(380722 call . this[106898] c"rank") 1)))
        unknown tmp[104809] "maybe param" "temp"
        (104830 'move' tmp[104809](104828 call chpl_compute_high_param_loop_bound 0(104825 call -(380736 call . this[106898] c"rank") 1)))
        unknown tmp[104810] "maybe param" "temp"
        (104833 'move' tmp[104810] 1)
        ParamForLoop[104835]
        { dim[104807] tmp[104808] tmp[104809] tmp[104810]
          {
            (104803 call =(104792 call(380729 call . this[106898] c"sizesPerDim") dim[104807])(104800 call .(104799 call(104794 call .(358724 call . this[106898] c"dom") c"dsiDim") dim[104807]) c"size"))
          }
        }
        label _unused_continueLabel[104812]
        label _breakLabel[104811]
      }
    }
    if(104948 call _cond_test(104851 call ==(380741 call . this[106898] c"data") nil[44]))
    {
      if(104882 call _cond_test debugDefaultDist[93392])
      {
        (104879 call chpl_debug_writeln "*** DR alloc "(104875 call _cast string[26](380747 call . this[106898] c"eltType")) " " size[104777])
      }
      if(104927 call _cond_test(104888 call ! localeModelHasSublocales[187403]))
      {
        (104897 call =(380754 call . this[106898] c"data")(104896 call _ddata_allocate_noinit(380759 call . this[106898] c"eltType") size[104777](380765 call . this[106898] c"callPostAlloc")))
      }
      {
        (104923 call =(380770 call . this[106898] c"data")(104922 call _ddata_allocate_noinit(380775 call . this[106898] c"eltType") size[104777](380781 call . this[106898] c"callPostAlloc")(subloc =(104918 IfExpr (104914 call >(104912 call(104908 call .(358727 call here[90435]) c"getChildCount")) 1) then
        { scopeless
          c_sublocid_all[89880]
        } else
        { scopeless
          c_sublocid_none[89870]
        } ))))
      }
      if(104944 call _cond_test initElts[104416])
      {
        (104937 call init_elts(380789 call . this[106898] c"data") size[104777](380795 call . this[106898] c"eltType"))
        (104942 call(380799 call . this[106898] c"dsiElementInitializationComplete"))
      }
    }
    (104954 call(380803 call . this[106898] c"initShiftedData"))
  }
  function DefaultRectangularArr[106840](?).getDataIndex[104966](arg _mt[106904]:_MT[238], arg this[106902]:DefaultRectangularArr[106840](?), arg ind[104962] ... :
  (380808 call . this[106902] c"idxType"), param arg getShifted[104969] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    (104982 return(104981 call(380817 call . this[106902] c"getDataIndex") ind[104962](getShifted = getShifted[104969])))
  }
  where {
    (104974 call ==(380813 call . this[106902] c"rank") 1)
  }
  function DefaultRectangularArr[106840](?).getDataIndex[104997](arg _mt[106908]:_MT[238], arg this[106906]:DefaultRectangularArr[106840](?), arg ind[104994] :
  (104992 call *(380824 call . this[106906] c"rank")(380829 call . this[106906] c"idxType")), param arg getShifted[105000] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    if(105424 call _cond_test(380834 call . this[106906] c"stridable"))
    {
      unknown sum[105008](105006 call _cast(380838 call . this[106906] c"intIdxType") 0)
      (105011 'end of statement')
      {
        unknown i[105058] 0
        unknown tmp[105059] "maybe param" "temp"
        (105071 'move' tmp[105059](105069 call chpl_compute_low_param_loop_bound 0(105016 call -(380843 call . this[106906] c"rank") 1)))
        unknown tmp[105060] "maybe param" "temp"
        (105081 'move' tmp[105060](105079 call chpl_compute_high_param_loop_bound 0(105076 call -(380873 call . this[106906] c"rank") 1)))
        unknown tmp[105061] "maybe param" "temp"
        (105084 'move' tmp[105061] 1)
        ParamForLoop[105086]
        { i[105058] tmp[105059] tmp[105060] tmp[105061]
          (105055 call += sum[105008](105053 call /(105041 call *(105035 call -(105027 call chpl__idxToInt(105025 call ind[104994] i[105058]))(105034 call chpl__idxToInt(105032 call(380851 call . this[106906] c"off") i[105058])))(105040 call(380857 call . this[106906] c"blk") i[105058]))(105051 call _cast(380868 call . this[106906] c"intIdxType")(105049 call abs(105047 call(380863 call . this[106906] c"str") i[105058])))))
        }
        label _unused_continueLabel[105063]
        label _breakLabel[105062]
      }
      (105096 return sum[105008])
    }
    {
      unknown wantShiftedIndex[105102] "param"(105100 call && getShifted[105000] earlyShiftData[93432])
      (105105 'end of statement')
      if(105420 call _cond_test(105112 call &&(105109 call ==(380881 call . this[106906] c"rank") 1) wantShiftedIndex[105102]))
      {
        (105121 return(105120 call chpl__idxToInt(105118 call ind[104994] 0)))
      }
      {
        unknown sum[105128](105126 call _cast(380887 call . this[106906] c"intIdxType") 0)
        (105131 'end of statement')
        unknown useInd[105134] ind[104994]
        (105137 'end of statement')
        unknown useOffset[105140] 0 int(64)[13]
        (105143 'end of statement')
        unknown useSizesPerDim[105145](380893 call . this[106906] c"sizesPerDim")
        (105148 'end of statement')
        if(105416 call _cond_test usePollyArrayIndex[93437])
        {
          if(105222 call _cond_test(105151 call ! wantShiftedIndex[105102]))
          {
            {
              unknown i[105184] 0
              unknown tmp[105185] "maybe param" "temp"
              (105197 'move' tmp[105185](105195 call chpl_compute_low_param_loop_bound 0(105156 call -(380900 call . this[106906] c"rank") 1)))
              unknown tmp[105186] "maybe param" "temp"
              (105207 'move' tmp[105186](105205 call chpl_compute_high_param_loop_bound 0(105202 call -(380915 call . this[106906] c"rank") 1)))
              unknown tmp[105187] "maybe param" "temp"
              (105210 'move' tmp[105187] 1)
              ParamForLoop[105212]
              { i[105184] tmp[105185] tmp[105186] tmp[105187]
                {
                  (105180 call =(105163 call useInd[105134] i[105184])(105178 call -(105170 call chpl__idxToInt(105168 call useInd[105134] i[105184]))(105177 call chpl__idxToInt(105175 call(380909 call . this[106906] c"off") i[105184]))))
                }
              }
              label _unused_continueLabel[105189]
              label _breakLabel[105188]
            }
          }
          (105235 return(105234 call polly_array_index useOffset[105140](105231 'expand_tuple' useSizesPerDim[105145])(105233 'expand_tuple' useInd[105134])))
        }
        {
          if(105395 call _cond_test(105242 call == storageOrder[93465] RMO[93447]))
          {
            {
              unknown i[105269] 0
              unknown tmp[105270] "maybe param" "temp"
              (105282 'move' tmp[105270](105280 call chpl_compute_low_param_loop_bound 0(105247 call -(380924 call . this[106906] c"rank") 2)))
              unknown tmp[105271] "maybe param" "temp"
              (105292 'move' tmp[105271](105290 call chpl_compute_high_param_loop_bound 0(105287 call -(380938 call . this[106906] c"rank") 2)))
              unknown tmp[105272] "maybe param" "temp"
              (105295 'move' tmp[105272] 1)
              ParamForLoop[105297]
              { i[105269] tmp[105270] tmp[105271] tmp[105272]
                {
                  (105265 call += sum[105128](105263 call *(105258 call chpl__idxToInt(105256 call ind[104994] i[105269]))(105262 call(380932 call . this[106906] c"blk") i[105269])))
                }
              }
              label _unused_continueLabel[105274]
              label _breakLabel[105273]
            }
            (105318 call += sum[105128](105317 call chpl__idxToInt(105315 call ind[104994](105312 call -(380945 call . this[106906] c"rank") 1))))
          }
          {
            {
              unknown i[105346] 0
              unknown tmp[105347] "maybe param" "temp"
              (105359 'move' tmp[105347](105357 call chpl_compute_low_param_loop_bound 1(105324 call -(380950 call . this[106906] c"rank") 1)))
              unknown tmp[105348] "maybe param" "temp"
              (105369 'move' tmp[105348](105367 call chpl_compute_high_param_loop_bound 1(105364 call -(380964 call . this[106906] c"rank") 1)))
              unknown tmp[105349] "maybe param" "temp"
              (105372 'move' tmp[105349] 1)
              ParamForLoop[105374]
              { i[105346] tmp[105347] tmp[105348] tmp[105349]
                {
                  (105342 call += sum[105128](105340 call *(105335 call chpl__idxToInt(105333 call ind[104994] i[105346]))(105339 call(380958 call . this[106906] c"blk") i[105346])))
                }
              }
              label _unused_continueLabel[105351]
              label _breakLabel[105350]
            }
            (105392 call += sum[105128](105391 call chpl__idxToInt(105389 call ind[104994] 0)))
          }
          if(105408 call _cond_test(105401 call ! wantShiftedIndex[105102]))
          {
            (105405 call -= sum[105128](380973 call . this[106906] c"factoredOffs"))
          }
          (105414 return sum[105128])
        }
      }
    }
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105439](arg _mt[106912]:_MT[238], arg this[106910]:DefaultRectangularArr[106840](?), arg ind[105435] ... :
  (380979 call . this[106910] c"idxType")) ref : _unknown[51] "inline" "method" "primary method"
  {
    (105449 return(105448 call(380988 call . this[106910] c"dsiAccess") ind[105435]))
  }
  where {
    (105443 call ==(380984 call . this[106910] c"rank") 1)
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105463](arg _mt[106916]:_MT[238], arg this[106914]:DefaultRectangularArr[106840](?), arg ind[105459] ... :
  (380994 call . this[106914] c"idxType")) : _unknown[51] "inline" "method" "primary method"
  {
    (105479 return(105478 call(381008 call . this[106914] c"dsiAccess") ind[105459]))
  }
  where {
    (105473 call &&(105467 call ==(380999 call . this[106914] c"rank") 1)(105472 call shouldReturnRvalueByValue(381004 call . this[106914] c"eltType")))
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105493](arg _mt[106920]:_MT[238], arg this[106918]:DefaultRectangularArr[106840](?), arg ind[105489] ... :
  (381014 call . this[106918] c"idxType")) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (105509 return(105508 call(381028 call . this[106918] c"dsiAccess") ind[105489]))
  }
  where {
    (105503 call &&(105497 call ==(381019 call . this[106918] c"rank") 1)(105502 call shouldReturnRvalueByConstRef(381024 call . this[106918] c"eltType")))
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105524](arg _mt[106924]:_MT[238], arg this[106922]:DefaultRectangularArr[106840](?), arg ind[105521] :
  (105519 call *(381034 call . this[106922] c"rank")(381039 call . this[106922] c"idxType"))) ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105530](105529 call(381043 call . this[106922] c"getDataIndex") ind[105521])
    (105533 'end of statement')
    (105539 return(105538 call(381048 call . this[106922] c"theData") dataInd[105530]))
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105552](arg _mt[106928]:_MT[238], arg this[106926]:DefaultRectangularArr[106840](?), arg ind[105549] :
  (105547 call *(381054 call . this[106926] c"rank")(381059 call . this[106926] c"idxType"))) : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105562](105561 call(381068 call . this[106926] c"getDataIndex") ind[105549])
    (105565 'end of statement')
    (105571 return(105570 call(381073 call . this[106926] c"theData") dataInd[105562]))
  }
  where {
    (105557 call shouldReturnRvalueByValue(381064 call . this[106926] c"eltType"))
  }
  function DefaultRectangularArr[106840](?).dsiAccess[105585](arg _mt[106932]:_MT[238], arg this[106930]:DefaultRectangularArr[106840](?), arg ind[105582] :
  (105580 call *(381079 call . this[106930] c"rank")(381084 call . this[106930] c"idxType"))) const ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105595](105594 call(381093 call . this[106930] c"getDataIndex") ind[105582])
    (105598 'end of statement')
    (105604 return(105603 call(381098 call . this[106930] c"theData") dataInd[105595]))
  }
  where {
    (105590 call shouldReturnRvalueByConstRef(381089 call . this[106930] c"eltType"))
  }
  function DefaultRectangularArr[106840](?).dsiLocalAccess[105613](arg _mt[106936]:_MT[238], arg this[106934]:DefaultRectangularArr[106840](?), arg i[105611]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (105619 return(105618 call(381103 call . this[106934] c"dsiAccess") i[105611]))
  }
  function DefaultRectangularArr[106840](?).dsiLocalAccess[105628](arg _mt[106940]:_MT[238], arg this[106938]:DefaultRectangularArr[106840](?), arg i[105626]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (105638 return(105637 call(381113 call . this[106938] c"dsiAccess") i[105626]))
  }
  where {
    (105633 call shouldReturnRvalueByValue(381109 call . this[106938] c"eltType"))
  }
  function DefaultRectangularArr[106840](?).dsiLocalAccess[105648](arg _mt[106944]:_MT[238], arg this[106942]:DefaultRectangularArr[106840](?), arg i[105646]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (105658 return(105657 call(381123 call . this[106942] c"dsiAccess") i[105646]))
  }
  where {
    (105653 call shouldReturnRvalueByConstRef(381119 call . this[106942] c"eltType"))
  }
  function DefaultRectangularArr[106840](?).dsiBoundsCheck[105668](arg _mt[106948]:_MT[238], arg this[106946]:DefaultRectangularArr[106840](?), arg i[105666]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (105679 return(105678 call(105673 call .(358732 call . this[106946] c"dom") c"dsiMember") i[105666]))
  }
  function DefaultRectangularArr[106840](?).adjustBlkOffStrForNewDomain[105691](arg _mt[106952]:_MT[238], arg this[106950]:DefaultRectangularArr[106840](?), arg d[105688] :
  unmanaged DefaultRectangularDom[415402](?), arg alias[105695] :
  unmanaged DefaultRectangularArr[415447](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown i[105880] 0
      unknown tmp[105881] "maybe param" "temp"
      (105893 'move' tmp[105881](105891 call chpl_compute_low_param_loop_bound 0(105701 call -(381132 call . this[106950] c"rank") 1)))
      unknown tmp[105882] "maybe param" "temp"
      (105903 'move' tmp[105882](105901 call chpl_compute_high_param_loop_bound 0(105898 call -(381194 call . this[106950] c"rank") 1)))
      unknown tmp[105883] "maybe param" "temp"
      (105906 'move' tmp[105883] 1)
      ParamForLoop[105908]
      { i[105880] tmp[105881] tmp[105882] tmp[105883]
        {
          unknown s[105706](381137 call . this[106950] c"idxType")
          (105709 'end of statement')
          if(105819 call _cond_test(105713 call ==(381142 call . this[106950] c"idxSignedType")(381147 call . this[106950] c"idxType")))
          {
            (105738 call = s[105706](105736 call _cast(105733 call . d[105688] c"idxType")(105730 call /(105723 call .(105722 call(105717 call .(358737 call . this[106950] c"dom") c"dsiDim") i[105880]) c"stride")(105729 call(381154 call . this[106950] c"str") i[105880]))))
          }
          {
            (105790 call assert(105787 call ||(105763 call &&(105754 call <(105750 call .(105749 call(105744 call .(358743 call . this[106950] c"dom") c"dsiDim") i[105880]) c"stride") 0)(105761 call <(105759 call(381161 call . this[106950] c"str") i[105880]) 0))(105785 call &&(105776 call >(105772 call .(105771 call(105766 call .(358748 call . this[106950] c"dom") c"dsiDim") i[105880]) c"stride") 0)(105783 call >(105781 call(381168 call . this[106950] c"str") i[105880]) 0))))
            (105816 call = s[105706](105814 call _cast(105811 call . d[105688] c"idxType")(105808 call /(105801 call .(105800 call(105795 call .(358753 call . this[106950] c"dom") c"dsiDim") i[105880]) c"stride")(105807 call(381176 call . this[106950] c"str") i[105880]))))
          }
          (105840 call =(105829 call(105824 call . alias[105695] c"off") i[105880])(105837 call .(105836 call(105831 call . d[105688] c"dsiDim") i[105880]) c"low"))
          (105857 call =(105849 call(105844 call . alias[105695] c"blk") i[105880])(105855 call *(105853 call(381185 call . this[106950] c"blk") i[105880]) s[105706]))
          (105877 call =(105866 call(105861 call . alias[105695] c"str") i[105880])(105874 call .(105873 call(105868 call . d[105688] c"dsiDim") i[105880]) c"stride"))
        }
      }
      label _unused_continueLabel[105885]
      label _breakLabel[105884]
    }
  }
  function DefaultRectangularArr[106840](?).adjustBlkOffStrForNewDomain[105927](arg _mt[106956]:_MT[238], arg this[106954]:DefaultRectangularArr[106840](?), arg d[105924] :
  unmanaged DefaultRectangularDom[415402](?), arg alias[105931] :
  unmanaged DefaultRectangularArr[415447](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown i[106012] 0
      unknown tmp[106013] "maybe param" "temp"
      (106025 'move' tmp[106013](106023 call chpl_compute_low_param_loop_bound 0(105953 call -(381201 call . this[106954] c"rank") 1)))
      unknown tmp[106014] "maybe param" "temp"
      (106035 'move' tmp[106014](106033 call chpl_compute_high_param_loop_bound 0(106030 call -(381217 call . this[106954] c"rank") 1)))
      unknown tmp[106015] "maybe param" "temp"
      (106038 'move' tmp[106015] 1)
      ParamForLoop[106040]
      { i[106012] tmp[106013] tmp[106014] tmp[106015]
        {
          (105974 call =(105963 call(105958 call . alias[105931] c"off") i[106012])(105971 call .(105970 call(105965 call . d[105924] c"dsiDim") i[106012]) c"low"))
          (105989 call =(105984 call(105979 call . alias[105931] c"blk") i[106012])(105988 call(381209 call . this[106954] c"blk") i[106012]))
          (106009 call =(105998 call(105993 call . alias[105931] c"str") i[106012])(106006 call .(106005 call(106000 call . d[105924] c"dsiDim") i[106012]) c"stride"))
        }
      }
      label _unused_continueLabel[106017]
      label _breakLabel[106016]
    }
  }
  where {
    (105948 call &&(105939 call ==(105935 call .(358764 call . this[106954] c"dom") c"stridable") 0)(105946 call ==(105942 call . this[106954] c"stridable") 0))
  }
  function DefaultRectangularArr[106840](?).dsiReallocate[106070](arg _mt[106960]:_MT[238], arg this[106958]:DefaultRectangularArr[106840](?), arg bounds[106067] :
  (106065 call *(381222 call . this[106958] c"rank")(106064 call range[64316](?)(381228 call . this[106958] c"idxType") bounded[64205](381233 call . this[106958] c"stridable")))) : _unknown[51] "method" "primary method" "method overrides" "ignore transfer errors" "no return value for void"
  {
    unknown actuallyResizing[106073] 0
    (106076 'end of statement')
    {
      unknown _indexOfInterest[106110] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[106111] "expr temp" "temp"
      (106120 'move' _iterator[106111](106118 call _getIterator(106080 call . bounds[106067] c"indices")))
      Defer
      {
        {
          (106137 call _freeIterator _iterator[106111])
        }
      }
      { scopeless type
        (106126 'move' _indexOfInterest[106110](106123 call iteratorIndex _iterator[106111]))
      }
      ForLoop[106112]
      {
        unknown i[106130] "index var" "insert auto destroy"
        (106132 'move' i[106130] _indexOfInterest[106110])
        {
          if(106105 call _cond_test(106094 call !=(106086 call bounds[106067] i[106130])(106093 call(106088 call .(358777 call . this[106958] c"dom") c"dsiDim") i[106130])))
          {
            (106098 call = actuallyResizing[106073] 1)
            break _breakLabel[106116] _breakLabel[106116]
          }
        }
        label _continueLabel[106115]
        _indexOfInterest[106110]
        _iterator[106111]
      }
      label _breakLabel[106116]
    }
    if(106149 call _cond_test(106145 call ! actuallyResizing[106073]))
    {
      (106147 return _void[55])
    }
    if(106182 call _cond_test(106158 call !(106157 call isDefaultInitializable(381243 call . this[106958] c"eltType"))))
    {
      (106179 call halt "Can't resize domains whose arrays' elements don't have default values")
    }
    if(106217 call _cond_test(106191 call !=(106188 call chpl_localeID_to_locale(106187 '_wide_get_locale' this[106958]))(381247 call here[90435])))
    {
      (106214 call halt "internal error: dsiReallocate() can only be called from an array's home locale")
    }
    {
      const reallocD[106226] "const"(106224 call chpl__buildDomainExpr(106222 'expand_tuple' bounds[106067]))
      (106229 'end of statement')
      if(106642 call _cond_test(106280 call &&(106271 call &&(106262 call &&(106250 call &&(106238 call &&(106232 call ! disableArrRealloc[93412])(106236 call ==(381253 call . this[106958] c"rank") 1))(106248 call ==(106241 call . reallocD[106226] c"low")(106245 call .(358783 call . this[106958] c"dom") c"dsiLow")))(106260 call ==(106253 call . reallocD[106226] c"stride")(106257 call .(358789 call . this[106958] c"dom") c"dsiStride")))(106269 call >(106265 call .(358794 call . this[106958] c"dom") c"dsiNumIndices") 0))(106278 call >(106274 call . reallocD[106226] c"size") 0)))
      {
        if(106304 call _cond_test reportInPlaceRealloc[93417])
        {
          (106302 call writeln "reallocating in-place")
        }
        (106324 call =(106313 call(381259 call . this[106958] c"sizesPerDim") 0)(106321 call .(106320 call(106315 call . reallocD[106226] c"dsiDim") 0) c"size"))
        (106343 call =(381264 call . this[106958] c"data")(106342 call _ddata_reallocate(381269 call . this[106958] c"data")(381274 call . this[106958] c"eltType")(oldSize =(106333 call .(358801 call . this[106958] c"dom") c"dsiNumIndices"))(newSize =(106338 call . reallocD[106226] c"size"))))
        (106348 call(381278 call . this[106958] c"initShiftedData"))
      }
      {
        unknown copy[106375](106352 'new'(_chpl_manager = unmanaged[220](?))(106374 call DefaultRectangularArr[379693](?)(eltType =(381284 call . this[106958] c"eltType"))(rank =(381289 call . this[106958] c"rank"))(idxType =(381294 call . this[106958] c"idxType"))(stridable =(106365 call .(106362 call . reallocD[106226] c"_value") c"stridable"))(dom =(106370 call . reallocD[106226] c"_value"))))
        (106378 'end of statement')
        unknown keep[106390](106389 call reallocD[106226](106387 'expand_tuple'(106384 call .(358809 call . this[106958] c"dom") c"ranges")))
        (106393 'end of statement')
        Forall {
          induction variables:
            
            unknown i[106425] "index var" "insert auto destroy"
          iterated expressions:
            keep[106390]
          shadow variables:
          other variables
            forall body
          {
            unknown dst[106405] "ref var"(106404 call(106399 call . copy[106375] c"dsiAccess") i[106425])
            (106408 'end of statement')
            const src[106414] "const" "ref var"(106413 call(381301 call . this[106958] c"dsiAccess") i[106425])
            (106417 'end of statement')
            (106422 '=' dst[106405] src[106414])
          }
        }
        unknown needsDestroy[106432] "param"(106431 'needs auto destroy'(381309 call . this[106958] c"eltType"))
        (106435 'end of statement')
        if(106550 call _cond_test needsDestroy[106432])
        {
          if(106545 call _cond_test(106445 call <(106438 call . reallocD[106226] c"size")(106442 call .(358816 call . this[106958] c"dom") c"dsiNumIndices")))
          {
            if(106540 call _cond_test(106450 call _deinitElementsIsParallel(381315 call . this[106958] c"eltType")))
            {
              Forall {
                induction variables:
                  
                  unknown i[106477] "index var" "insert auto destroy"
                iterated expressions:
                  (381320 call . this[106958] c"dom")
                shadow variables:
                other variables
                  forall body
                {
                  if(106471 call _cond_test(106460 call !(106459 call(106454 call . keep[106390] c"contains") i[106477])))
                  {
                    (106468 call chpl__autoDestroy(106466 call(381325 call . this[106958] c"dsiAccess") i[106477]))
                  }
                }
              }
            }
            {
              {
                unknown _indexOfInterest[106506] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[106507] "expr temp" "temp"
                (106516 'move' _iterator[106507](106514 call _getIterator(381331 call . this[106958] c"dom")))
                Defer
                {
                  {
                    (106532 call _freeIterator _iterator[106507])
                  }
                }
                { scopeless type
                  (106521 'move' _indexOfInterest[106506](106518 call iteratorIndex _iterator[106507]))
                }
                ForLoop[106508]
                {
                  unknown i[106525] "index var" "insert auto destroy"
                  (106527 'move' i[106525] _indexOfInterest[106506])
                  {
                    if(106501 call _cond_test(106490 call !(106489 call(106484 call . keep[106390] c"contains") i[106525])))
                    {
                      (106498 call chpl__autoDestroy(106496 call(381336 call . this[106958] c"dsiAccess") i[106525]))
                    }
                  }
                  label _continueLabel[106511]
                  _indexOfInterest[106506]
                  _iterator[106507]
                }
                label _breakLabel[106512]
              }
            }
          }
        }
        (106559 call =(381342 call . this[106958] c"off")(106556 call . copy[106375] c"off"))
        (106567 call =(381347 call . this[106958] c"blk")(106564 call . copy[106375] c"blk"))
        (106575 call =(381352 call . this[106958] c"str")(106572 call . copy[106375] c"str"))
        (106583 call =(381357 call . this[106958] c"factoredOffs")(106580 call . copy[106375] c"factoredOffs"))
        (106590 call(381361 call . this[106958] c"dsiDestroyArr")(deinitElts = 0))
        (106597 call =(381366 call . this[106958] c"data")(106594 call . copy[106375] c"data"))
        if(106633 call _cond_test(106610 call && earlyShiftData[93432](106608 call !(106605 call .(106602 call . reallocD[106226] c"_value") c"stridable"))))
        {
          if(106628 call _cond_test(106617 call >(106613 call . reallocD[106226] c"size") 0))
          {
            (106624 call =(381372 call . this[106958] c"shiftedData")(106621 call . copy[106375] c"shiftedData"))
          }
        }
        (106639 call chpl__delete copy[106375])
      }
    }
  }
  function DefaultRectangularArr[106840](?).dsiPostReallocate[106650](arg _mt[106964]:_MT[238], arg this[106962]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
  }
  function DefaultRectangularArr[106840](?).dsiLocalSlice[106659](arg _mt[106968]:_MT[238], arg this[106966]:DefaultRectangularArr[106840](?), arg ranges[106657]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (106664 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularArr[106840](?).dsiGetRAD[106671](arg _mt[106972]:_MT[238], arg this[106970]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method"
  {
    unknown rad[106680](106679 call _remoteAccessData[101218](?)(381379 call . this[106970] c"eltType")(381384 call . this[106970] c"rank")(381389 call . this[106970] c"idxType")(381394 call . this[106970] c"stridable"))
    (106683 'end of statement')
    (106690 call =(106686 call . rad[106680] c"off")(381399 call . this[106970] c"off"))
    (106698 call =(106694 call . rad[106680] c"blk")(381404 call . this[106970] c"blk"))
    (106706 call =(106702 call . rad[106680] c"str")(381409 call . this[106970] c"str"))
    (106714 call =(106710 call . rad[106680] c"origin") 0)
    (106722 call =(106718 call . rad[106680] c"factoredOffs")(381414 call . this[106970] c"factoredOffs"))
    (106730 call =(106726 call . rad[106680] c"data")(381419 call . this[106970] c"data"))
    (106738 call =(106734 call . rad[106680] c"shiftedData")(381424 call . this[106970] c"shiftedData"))
    (106742 return rad[106680])
  }
  function DefaultRectangularArr[106840](?).dsiTargetLocales[106748](arg _mt[106976]:_MT[238], arg this[106974]:DefaultRectangularArr[106840](?)) : _unknown[51] "method" "primary method"
  {
    (106760 return(106758 call chpl__buildArrayExpr(106755 call chpl_localeID_to_locale(106754 '_wide_get_locale'(106751 call . this[106974] c"data")))))
  }
  function DefaultRectangularArr[106840](?).dsiHasSingleLocalSubdomain[106767](arg _mt[106980]:_MT[238], arg this[106978]:DefaultRectangularArr[106840](?)) param : _unknown[51] "method" "primary method"
  {
    (106770 return 1)
  }
  function DefaultRectangularArr[106840](?).dsiLocalSubdomain[106781](arg _mt[106984]:_MT[238], arg this[106982]:DefaultRectangularArr[106840](?), arg loc[106778] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(106815 call _cond_test(106791 call ==(106788 call chpl_localeID_to_locale(106787 '_wide_get_locale'(106784 call . this[106982] c"data"))) loc[106778]))
    {
      (106797 return(106796 call _getDomain(381431 call . this[106982] c"dom")))
    }
    {
      unknown a[106807](106805 call chpl__buildDomainRuntimeType defaultDist[94050](381436 call . this[106982] c"rank")(381441 call . this[106982] c"idxType")(381446 call . this[106982] c"stridable"))
      (106810 'end of statement')
      (106813 return a[106807])
    }
  }
  function DefaultRectangularArr[106840](?).dsiLocalSubdomains[106828](arg _mt[106988]:_MT[238], arg this[106986]:DefaultRectangularArr[106840](?), arg loc[106825] :
  locale[28]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (106834 yield(106833 call(381452 call . this[106986] c"dsiLocalSubdomain") loc[106825]))
  }
  type DefaultRectangularArr[106840](?) val super[355670]:BaseRectangularArr[149813](?) "super class" unknown idxSignedType[103095] "type variable"(103094 call chpl__signedType(103092 call chpl__idxTypeToIntIdxType idxType[149712])) unknown dom[103108](103106 call unmanaged DefaultRectangularDom[415402](?)(rank = rank[149708])(idxType = idxType[149712])(stridable = stridable[149716])) unknown off[103116](103114 call * rank[149708] idxType[149712]) unknown blk[103127](103125 call * rank[149708](103124 call chpl__idxTypeToIntIdxType idxType[149712])) unknown sizesPerDim[103138](103136 call * rank[149708](103135 call chpl__idxTypeToIntIdxType idxType[149712])) unknown str[103146](103144 call * rank[149708] idxSignedType[103095]) unknown factoredOffs[103154](103153 call chpl__idxTypeToIntIdxType idxType[149712]) unknown data[103163] "alias scope from this" "local field" nil[44](103161 call _ddata[11695](?) eltType[149780]) unknown shiftedData[103171] "alias scope from this" "local field"(103170 call _ddata[11695](?) eltType[149780]) unknown externFreeFunc[103176] c_void_ptr[149] unknown externArr[103182] 0 bool[10] unknown _borrowed[103188] 1 bool[10] unknown callPostAlloc[103194] 1 bool[10] unknown deinitElts[103200] 1 bool[10]
  type unmanaged DefaultRectangularArr[415447](?)
  type DefaultRectangularArr[415297](?)
  type DefaultRectangularArr[379693](?)
  function chpl__serialViewIter[106995](arg arr[106993]:_any[178](?), arg viewDom[106997]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown useCache[107017] "param"(107015 call &&(107006 call chpl__isArrayView arr[106993])(107014 call(107010 call . arr[106993] c"shouldUseIndexCache")))
    (107020 'end of statement')
    unknown info[107050](107047 IfExpr  useCache[107017] then
    { scopeless
      (107026 call . arr[106993] c"indexCache")
    } else
    { scopeless(107044 IfExpr (107036 call(107032 call . arr[106993] c"isSliceArrayView")) then
      { scopeless
        (107040 call . arr[106993] c"arr")
      } else
      { scopeless
        arr[106993]
      } )
    } )
    (107053 'end of statement')
    if(107480 call _cond_test(107059 call ==(107055 call . arr[106993] c"rank") 1))
    {
      if(107367 call _cond_test(107065 call !(107062 call . viewDom[106997] c"stridable")))
      {
        const first[107077] "const"(107076 call(107068 call . info[107050] c"getDataIndex")(107072 call . viewDom[106997] c"dsiLow"))
        (107080 'end of statement')
        const second[107104] "const"(107103 call(107083 call . info[107050] c"getDataIndex")(107101 call(107087 call . viewDom[106997] c"chpl_intToIdx")(107098 call +(107096 call chpl__idxToInt(107092 call . viewDom[106997] c"dsiLow")) 1)))
        (107107 'end of statement')
        const step[107112] "const"(107110 call - second[107104] first[107077])
        (107115 'end of statement')
        const last[107129] "const"(107127 call + first[107077](107125 call *(107122 call -(107118 call . viewDom[106997] c"dsiNumIndices") 1) step[107112]))
        (107132 'end of statement')
        {
          unknown _indexOfInterest[107150] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107151] "expr temp" "temp"
          (107160 'move' _iterator[107151](107158 call _getIterator(107139 call chpl_direct_pos_stride_range_iter first[107077] last[107129] step[107112])))
          Defer
          {
            {
              (107177 call _freeIterator _iterator[107151])
            }
          }
          { scopeless type
            (107166 'move' _indexOfInterest[107150](107163 call iteratorIndex _iterator[107151]))
          }
          ForLoop[107152]
          {
            unknown i[107170] "index var" "insert auto destroy"
            (107172 'move' i[107170] _indexOfInterest[107150])
            {
              (107147 yield(107146 call(107141 call . info[107050] c"theData") i[107170]))
            }
            label _continueLabel[107155]
            _indexOfInterest[107150]
            _iterator[107151]
          }
          label _breakLabel[107156]
        }
      }
      {
        const viewDomDim[107191] "const"(107190 call(107185 call . viewDom[106997] c"dsiDim") 0)
        const stride[107204] "const"(107202 call _cast(107199 call . viewDom[106997] c"intIdxType")(107195 call . viewDomDim[107191] c"stride"))
        const start[107211] "const"(107208 call . viewDomDim[107191] c"first")
        const second[107233] "const"(107232 call(107215 call . info[107050] c"getDataIndex")(107230 call(107219 call . viewDom[106997] c"chpl_intToIdx")(107227 call +(107223 call . viewDomDim[107191] c"firstAsInt") stride[107204])))
        (107236 'end of statement')
        unknown first[107245](107244 call(107239 call . info[107050] c"getDataIndex") start[107211])
        (107248 'end of statement')
        const step[107262] "const"(107260 call _cast(107259 call chpl__signedType(107255 call . viewDom[106997] c"intIdxType"))(107251 call - second[107233] first[107245]))
        (107265 'end of statement')
        unknown last[107285](107283 call + first[107245](107281 call *(107272 call -(107268 call . viewDomDim[107191] c"size") 1)(107279 call _cast(107276 call . viewDom[106997] c"intIdxType") step[107262])))
        (107288 'end of statement')
        if(107298 call _cond_test(107291 call < step[107262] 0))
        {
          (107295 call <=> last[107285] first[107245])
        }
        unknown data[107307](107304 call . info[107050] c"theData")
        (107310 'end of statement')
        {
          unknown _indexOfInterest[107325] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107326] "expr temp" "temp"
          (107335 'move' _iterator[107326](107333 call _getIterator(107344 call chpl_direct_range_iter first[107245] last[107285] step[107262])))
          Defer
          {
            {
              (107360 call _freeIterator _iterator[107326])
            }
          }
          { scopeless type
            (107349 'move' _indexOfInterest[107325](107346 call iteratorIndex _iterator[107326]))
          }
          ForLoop[107327]
          {
            unknown i[107353] "index var" "insert auto destroy"
            (107355 'move' i[107353] _indexOfInterest[107325])
            (107323 yield(107322 call data[107307] i[107353]))
            label _continueLabel[107330]
            _indexOfInterest[107325]
            _iterator[107326]
          }
          label _breakLabel[107331]
        }
      }
    }
    {
      if(107476 call _cond_test useCache[107017])
      {
        {
          unknown _indexOfInterest[107398] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107399] "expr temp" "temp"
          (107408 'move' _iterator[107399](107406 call _getIterator viewDom[106997]))
          Defer
          {
            {
              (107424 call _freeIterator _iterator[107399])
            }
          }
          { scopeless type
            (107413 'move' _indexOfInterest[107398](107410 call iteratorIndex _iterator[107399]))
          }
          ForLoop[107400]
          {
            unknown i[107417] "index var" "insert auto destroy"
            (107419 'move' i[107417] _indexOfInterest[107398])
            {
              const dataIdx[107382] "const"(107381 call(107376 call . info[107050] c"getDataIndex") i[107417])
              (107385 'end of statement')
              (107396 yield(107395 call(107390 call . info[107050] c"getDataElem") dataIdx[107382]))
            }
            label _continueLabel[107403]
            _indexOfInterest[107398]
            _iterator[107399]
          }
          label _breakLabel[107404]
        }
      }
      {
        {
          unknown _indexOfInterest[107441] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107442] "expr temp" "temp"
          (107451 'move' _iterator[107442](107449 call _getIterator(107437 call chpl__serialViewIterHelper arr[106993] viewDom[106997])))
          Defer
          {
            {
              (107468 call _freeIterator _iterator[107442])
            }
          }
          { scopeless type
            (107457 'move' _indexOfInterest[107441](107454 call iteratorIndex _iterator[107442]))
          }
          ForLoop[107443]
          {
            unknown elem[107461] "index var" "insert auto destroy"
            (107463 'move' elem[107461] _indexOfInterest[107441])
            (107439 yield elem[107461])
            label _continueLabel[107446]
            _indexOfInterest[107441]
            _iterator[107442]
          }
          label _breakLabel[107447]
        }
      }
    }
  }
  where {
    (107002 call chpl__isDROrDRView arr[106993])
  }
  function chpl__serialViewIter[107492](arg arr[107490]:_any[178](?), arg viewDom[107494]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[107505] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107506] "expr temp" "temp"
      (107515 'move' _iterator[107506](107513 call _getIterator(107501 call chpl__serialViewIterHelper arr[107490] viewDom[107494])))
      Defer
      {
        {
          (107532 call _freeIterator _iterator[107506])
        }
      }
      { scopeless type
        (107521 'move' _indexOfInterest[107505](107518 call iteratorIndex _iterator[107506]))
      }
      ForLoop[107507]
      {
        unknown elem[107525] "index var" "insert auto destroy"
        (107527 'move' elem[107525] _indexOfInterest[107505])
        (107503 yield elem[107525])
        label _continueLabel[107510]
        _indexOfInterest[107505]
        _iterator[107506]
      }
      label _breakLabel[107511]
    }
  }
  function chpl__serialViewIterHelper[107546](arg arr[107544]:_any[178](?), arg viewDom[107548]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[107635] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107636] "expr temp" "temp"
      (107645 'move' _iterator[107636](107643 call _getIterator viewDom[107548]))
      Defer
      {
        {
          (107661 call _freeIterator _iterator[107636])
        }
      }
      { scopeless type
        (107650 'move' _indexOfInterest[107635](107647 call iteratorIndex _iterator[107636]))
      }
      ForLoop[107637]
      {
        unknown i[107654] "index var" "insert auto destroy"
        (107656 'move' i[107654] _indexOfInterest[107635])
        {
          const dataIdx[107605] "const"(107602 IfExpr (107559 call(107555 call . arr[107544] c"isReindexArrayView")) then
          { scopeless
            (107573 call chpl_reindexConvertIdx i[107654](107564 call . arr[107544] c"dom")(107570 call . arr[107544] c"downdom"))
          } else
          { scopeless(107599 IfExpr (107581 call(107577 call . arr[107544] c"isRankChangeArrayView")) then
            { scopeless
              (107597 call chpl_rankChangeConvertIdx i[107654](107588 call . arr[107544] c"collapsedDim")(107594 call . arr[107544] c"idx"))
            } else
            { scopeless
              i[107654]
            } )
          } )
          (107608 'end of statement')
          const info[107622] "const"(107619 IfExpr (107613 call chpl__isArrayView arr[107544]) then
          { scopeless
            (107615 call . arr[107544] c"arr")
          } else
          { scopeless
            arr[107544]
          } )
          (107625 'end of statement')
          (107633 yield(107632 call(107627 call . info[107622] c"dsiAccess") dataIdx[107605]))
        }
        label _continueLabel[107640]
        _indexOfInterest[107635]
        _iterator[107636]
      }
      label _breakLabel[107641]
    }
  }
  function DefaultRectangularDom[100787](?).dsiSerialReadWrite[107676](arg _mt[107681]:_MT[238], arg this[107678]:DefaultRectangularDom[100787](?) :
  DefaultRectangularDom[100787](?), arg f[107674]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107711 call <~>(107705 call <~> f[107674](107684 'new'(107704 call ioLiteral[238753] "{")))(107710 call(381503 call . this[107678] c"ranges") 0))
    {
      unknown _indexOfInterest[107754] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107755] "expr temp" "temp"
      (107764 'move' _iterator[107755](107762 call _getIterator(107772 call chpl_direct_range_iter 1(107769 call -(381516 call . this[107678] c"rank") 1) 1)))
      Defer
      {
        {
          (107788 call _freeIterator _iterator[107755])
        }
      }
      { scopeless type
        (107777 'move' _indexOfInterest[107754](107774 call iteratorIndex _iterator[107755]))
      }
      ForLoop[107756]
      {
        unknown i[107781] "index var" "insert auto destroy"
        (107783 'move' i[107781] _indexOfInterest[107754])
        (107751 call <~>(107745 call <~> f[107674](107724 'new'(107744 call ioLiteral[238753] ", ")))(107750 call(381510 call . this[107678] c"ranges") i[107781]))
        label _continueLabel[107759]
        _indexOfInterest[107754]
        _iterator[107755]
      }
      label _breakLabel[107760]
    }
    (107817 call <~> f[107674](107796 'new'(107816 call ioLiteral[238753] "}")))
  }
  function DefaultRectangularDom[100787](?).dsiSerialWrite[107827](arg _mt[107832]:_MT[238], arg this[107829]:DefaultRectangularDom[100787](?) :
  DefaultRectangularDom[100787](?), arg f[107825]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107842 call(107837 call . this[107829] c"dsiSerialReadWrite") f[107825])
  }
  function DefaultRectangularDom[100787](?).dsiSerialRead[107852](arg _mt[107857]:_MT[238], arg this[107854]:DefaultRectangularDom[100787](?) :
  DefaultRectangularDom[100787](?), arg f[107850]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107865 call(107860 call . this[107854] c"dsiSerialReadWrite") f[107850])
  }
  function DefaultRectangularArr[106840](?).dsiSerialReadWrite[107875](arg _mt[107880]:_MT[238], arg this[107877]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?), arg f[107873]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107886 call chpl_serialReadWriteRectangular f[107873] this[107877])
  }
  function DefaultRectangularDom[100787](?).dsiSupportsAutoLocalAccess[107894](arg _mt[107899]:_MT[238], arg this[107896]:DefaultRectangularDom[100787](?) :
  DefaultRectangularDom[100787](?)) param : _unknown[51] "method" "method overrides"
  {
    (107902 return defaultRectangularSupportsAutoLocalAccess[93442])
  }
  function chpl_serialReadWriteRectangular[107911](arg f[107909]:_any[178](?), arg arr[107913]:_any[178](?)) : _unknown[51] throws "no return value for void"
  {
    (107923 call chpl_serialReadWriteRectangular f[107909] arr[107913](107920 call . arr[107913] c"dom"))
  }
  function chpl_serialReadWriteRectangular[107932](arg f[107930]:_any[178](?), arg arr[107934]:_any[178](?), arg dom[107936]:_any[178](?)) : _unknown[51] throws "last resort" "no return value for void"
  {
    (107943 call chpl_serialReadWriteRectangularHelper f[107930] arr[107934] dom[107936])
  }
  function chpl_serialReadWriteRectangularHelper[107952](arg f[107950]:_any[178](?), arg arr[107954]:_any[178](?), arg dom[107956]:_any[178](?)) : _unknown[51] throws "no return value for void"
  {
    unknown rank[107962] "param"(107959 call . arr[107954] c"rank")
    (107965 'end of statement')
    unknown idxType[107971] "type variable"(107968 call . arr[107954] c"idxType")
    unknown idxSignedType[107981] "type variable"(107980 call chpl__signedType(107978 call chpl__idxTypeToIntIdxType idxType[107971]))
    const isNative[107996] "const"(107994 call _cast bool[10](107992 call(107987 call . f[107950] c"styleElement") QIO_STYLE_ELEMENT_IS_NATIVE_BYTE_ORDER[19682]))
    (107999 'end of statement')
    function writeSpaces[108006](arg dim[108003] :
    int(64)[13]) : _unknown[51] throws "no return value for void"
    {
      {
        unknown _indexOfInterest[108023] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[108024] "expr temp" "temp"
        (108033 'move' _iterator[108024](108031 call _getIterator(108038 call chpl_direct_range_iter 1 dim[108003] 1)))
        Defer
        {
          {
            (108054 call _freeIterator _iterator[108024])
          }
        }
        { scopeless type
          (108043 'move' _indexOfInterest[108023](108040 call iteratorIndex _iterator[108024]))
        }
        ForLoop[108025]
        {
          unknown i[108047] "index var" "insert auto destroy"
          (108049 'move' i[108047] _indexOfInterest[108023])
          {
            (108019 call <~> f[107950](108014 'new'(108018 call ioLiteral[238753] " ")))
          }
          label _continueLabel[108028]
          _indexOfInterest[108023]
          _iterator[108024]
        }
        label _breakLabel[108029]
      }
    }
    function recursiveArrayWriter[108073](in arg idx[108070] :
    (108068 call * rank[107962] idxType[107971]), arg dim[108076] =
    0, in arg last[108080] =
    0) : _unknown[51] throws "no return value for void"
    {
      unknown binary[108091](108090 call(108086 call . f[107950] c"binary"))
      (108094 'end of statement')
      unknown arrayStyle[108103](108102 call(108097 call . f[107950] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[19662])
      (108106 'end of statement')
      unknown isspace[108116](108114 call &&(108109 call == arrayStyle[108103] QIO_ARRAY_FORMAT_SPACE[19692])(108112 call ! binary[108091]))
      (108119 'end of statement')
      unknown isjson[108129](108127 call &&(108122 call == arrayStyle[108103] QIO_ARRAY_FORMAT_JSON[19702])(108125 call ! binary[108091]))
      (108132 'end of statement')
      unknown ischpl[108142](108140 call &&(108135 call == arrayStyle[108103] QIO_ARRAY_FORMAT_CHPL[19697])(108138 call ! binary[108091]))
      (108145 'end of statement')
      unknown strType[108147] "type variable" idxSignedType[107981]
      unknown makeStridePositive[108176](108173 IfExpr (108161 call >(108157 call .(108156 call(108151 call . dom[107956] c"dsiDim") dim[108076]) c"stride") 0) then
      { scopeless
        (108165 call _cast strType[108147] 1)
      } else
      { scopeless
        (108171 call _cast strType[108147](108168 call - 1))
      } )
      (108179 'end of statement')
      if(108256 call _cond_test(108182 call || isjson[108129] ischpl[108142]))
      {
        if(108250 call _cond_test(108189 call != dim[108076](108187 call - rank[107962] 1)))
        {
          (108213 call <~> f[107950](108192 'new'(108212 call ioLiteral[238753] "[\n")))
          (108223 call writeSpaces(108220 call + dim[108076] 1))
        }
        {
          (108247 call <~> f[107950](108226 'new'(108246 call ioLiteral[238753] "[")))
        }
      }
      if(108579 call _cond_test(108265 call == dim[108076](108263 call - rank[107962] 1)))
      {
        unknown first[108268] 1
        (108271 'end of statement')
        if(108298 call _cond_test(108280 call && debugDefaultDist[93392](108277 call . f[107950] c"writing")))
        {
          (108296 call(108285 call . f[107950] c"writeln")(108294 call(108289 call . dom[107956] c"dsiDim") dim[108076]))
        }
        {
          unknown _indexOfInterest[108380] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[108381] "expr temp" "temp"
          (108390 'move' _iterator[108381](108388 call _getIterator(108312 call chpl_by(108310 call(108305 call . dom[107956] c"dsiDim") dim[108076]) makeStridePositive[108176])))
          Defer
          {
            {
              (108413 call _freeIterator _iterator[108381])
            }
          }
          { scopeless type
            (108402 'move' _indexOfInterest[108380](108399 call iteratorIndex _iterator[108381]))
          }
          ForLoop[108382]
          {
            unknown j[108406] "index var" "insert auto destroy"
            (108408 'move' j[108406] _indexOfInterest[108380])
            {
              if(108354 call _cond_test first[108268])
              {
                (108317 call = first[108268] 0)
              }
              {
                if(108348 call _cond_test isspace[108116])
                {
                  (108327 call <~> f[107950](108322 'new'(108326 call ioLiteral[238753] " ")))
                }
                {
                  if(108343 call _cond_test(108332 call || isjson[108129] ischpl[108142]))
                  {
                    (108340 call <~> f[107950](108335 'new'(108339 call ioLiteral[238753] ", ")))
                  }
                }
              }
              (108366 call =(108364 call idx[108070] dim[108076]) j[108406])
              (108377 call <~> f[107950](108376 call(108371 call . arr[107954] c"dsiAccess") idx[108070]))
            }
            label _continueLabel[108385]
            _indexOfInterest[108380]
            _iterator[108381]
          }
          label _breakLabel[108386]
        }
      }
      {
        {
          unknown _indexOfInterest[108538] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[108539] "expr temp" "temp"
          (108548 'move' _iterator[108539](108546 call _getIterator(108429 call chpl_by(108427 call(108422 call . dom[107956] c"dsiDim") dim[108076]) makeStridePositive[108176])))
          Defer
          {
            {
              (108571 call _freeIterator _iterator[108539])
            }
          }
          { scopeless type
            (108560 'move' _indexOfInterest[108538](108557 call iteratorIndex _iterator[108539]))
          }
          ForLoop[108540]
          {
            unknown j[108564] "index var" "insert auto destroy"
            (108566 'move' j[108564] _indexOfInterest[108538])
            {
              unknown lastIdx[108441](108438 call .(108437 call(108432 call . dom[107956] c"dsiDim") dim[108076]) c"last")
              (108444 'end of statement')
              (108451 call =(108449 call idx[108070] dim[108076]) j[108564])
              (108485 call recursiveArrayWriter idx[108070](dim =(108459 call + dim[108076] 1))(last =(108482 call &&(108467 call || last[108080](108465 call == dim[108076] 0))(108480 call == j[108564](108477 call .(108476 call(108471 call . dom[107956] c"dsiDim") dim[108076]) c"alignedHigh")))))
              if(108534 call _cond_test(108489 call || isjson[108129] ischpl[108142]))
              {
                if(108529 call _cond_test(108493 call != j[108564] lastIdx[108441]))
                {
                  (108517 call <~> f[107950](108496 'new'(108516 call ioLiteral[238753] ",\n")))
                  (108527 call writeSpaces(108524 call + dim[108076] 1))
                }
              }
            }
            label _continueLabel[108543]
            _indexOfInterest[108538]
            _iterator[108539]
          }
          label _breakLabel[108544]
        }
      }
      if(108678 call _cond_test isspace[108116])
      {
        if(108603 call _cond_test(108591 call &&(108585 call ! last[108080])(108589 call != dim[108076] 0)))
        {
          (108599 call <~> f[107950](108594 'new'(108598 call ioLiteral[238753] "\n")))
        }
      }
      {
        if(108674 call _cond_test(108610 call || isjson[108129] ischpl[108142]))
        {
          if(108668 call _cond_test(108617 call != dim[108076](108615 call - rank[107962] 1)))
          {
            (108625 call <~> f[107950](108620 'new'(108624 call ioLiteral[238753] "\n")))
            (108632 call writeSpaces dim[108076])
            (108656 call <~> f[107950](108635 'new'(108655 call ioLiteral[238753] "]")))
          }
          {
            (108665 call <~> f[107950](108660 'new'(108664 call ioLiteral[238753] "]")))
          }
        }
      }
    }
    if(109429 call _cond_test(108737 call &&(108723 call &&(108708 call &&(108702 call &&(108692 call && 0(108690 call !(108687 call . f[107950] c"writing")))(108700 call !(108699 call(108695 call . f[107950] c"binary"))))(108706 call == rank[107962] 1))(108721 call ==(108717 call .(108716 call(108711 call . dom[107956] c"dsiDim") 0) c"stride") 1))(108735 call ==(108731 call .(108728 call . dom[107956] c"_arrs") c"size") 1)))
    {
      unknown binary[108745](108744 call(108740 call . f[107950] c"binary"))
      (108748 'end of statement')
      unknown arrayStyle[108757](108756 call(108751 call . f[107950] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[19662])
      (108760 'end of statement')
      unknown isspace[108770](108768 call &&(108763 call == arrayStyle[108757] QIO_ARRAY_FORMAT_SPACE[19692])(108766 call ! binary[108745]))
      (108773 'end of statement')
      unknown isjson[108783](108781 call &&(108776 call == arrayStyle[108757] QIO_ARRAY_FORMAT_JSON[19702])(108779 call ! binary[108745]))
      (108786 'end of statement')
      unknown ischpl[108796](108794 call &&(108789 call == arrayStyle[108757] QIO_ARRAY_FORMAT_CHPL[19697])(108792 call ! binary[108745]))
      (108799 'end of statement')
      if(108814 call _cond_test(108802 call || isjson[108783] ischpl[108796]))
      {
        (108810 call <~> f[107950](108805 'new'(108809 call ioLiteral[238753] "[")))
      }
      unknown first[108819] 1
      (108822 'end of statement')
      unknown offset[108833](108830 call .(108829 call(108824 call . dom[107956] c"dsiDim") 0) c"low")
      (108836 'end of statement')
      unknown i[108838] 0
      (108841 'end of statement')
      unknown read_end[108843] 0
      (108846 'end of statement')
      {
        unknown tmp[109079] "temp"
        (109097 'move' tmp[109079](109095 call _cond_test 1))
        WhileDo[109084]
        {
          {
            if(108954 call _cond_test first[108819])
            {
              (108851 call = first[108819] 0)
              Try
              {
                {
                  if(108885 call _cond_test(108857 call || isjson[108783] ischpl[108796]))
                  {
                    (108865 call <~> f[107950](108860 'new'(108864 call ioLiteral[238753] "]")))
                  }
                  {
                    if(108881 call _cond_test isspace[108770])
                    {
                      (108877 call <~> f[107950](108871 'new'(108876 call ioNewline[238701](skipWhitespaceOnly = 1))))
                    }
                  }
                  (108893 call = read_end[108843] 1)
                  break _breakLabel[109083] _breakLabel[109083]
                }
              }
              Catch err : BadFormatError
              {
                unknown tmp[354227] "temp"(354231 'dynamic_cast' unmanaged BadFormatError?[415606](354230 'current error'))
                if(354234 '!=' tmp[354227] nil[44])
                {
                  unknown err[354240](354245 'new'(354243 call _owned[30](?)(354241 'to non nilable class' tmp[354227])))
                  {
                  }
                }
                {
                }
              }
            }
            {
              Try
              {
                {
                  if(108935 call _cond_test isspace[108770])
                  {
                    (108914 call <~> f[107950](108909 'new'(108913 call ioLiteral[238753] " ")))
                  }
                  {
                    if(108930 call _cond_test(108919 call || isjson[108783] ischpl[108796]))
                    {
                      (108927 call <~> f[107950](108922 'new'(108926 call ioLiteral[238753] ",")))
                    }
                  }
                }
              }
              Catch err : BadFormatError
              {
                unknown tmp[354248] "temp"(354252 'dynamic_cast' unmanaged BadFormatError?[415606](354251 'current error'))
                if(354255 '!=' tmp[354248] nil[44])
                {
                  unknown err[354261](354266 'new'(354264 call _owned[30](?)(354262 'to non nilable class' tmp[354248])))
                  {
                    break _breakLabel[109083] _breakLabel[109083]
                  }
                }
                {
                }
              }
            }
            if(109056 call _cond_test(108970 call >= i[108838](108967 call .(108966 call(108961 call . dom[107956] c"dsiDim") 0) c"size")))
            {
              unknown sz[108982](108979 call .(108978 call(108973 call . dom[107956] c"dsiDim") 0) c"size")
              (108985 'end of statement')
              if(108996 call _cond_test(108989 call < sz[108982] 4))
              {
                (108993 call = sz[108982] 4)
              }
              (109006 call = sz[108982](109004 call * 2 sz[108982]))
              const newDom[109018] "const"(109016 call chpl__buildDomainExpr(109013 call #(109010 call chpl_build_low_bounded_range offset[108833]) sz[108982]))
              (109021 'end of statement')
              (109030 call(109025 call . arr[107954] c"dsiReallocate") newDom[109018])
              (109045 call(109033 call . dom[107956] c"dsiSetIndices")(109043 call(109039 call . newDom[109018] c"getIndices")))
              (109054 call(109050 call . arr[107954] c"dsiPostReallocate"))
            }
            (109071 call <~> f[107950](109070 call(109062 call . arr[107954] c"dsiAccess")(109067 call + offset[108833] i[108838])))
            (109076 call += i[108838] 1)
          }
          label _continueLabel[109082]
          (109090 'move' tmp[109079](109088 call _cond_test 1))
          tmp[109079]
        }
        label _breakLabel[109083]
      }
      if(109122 call _cond_test(109101 call ! read_end[108843]))
      {
        if(109117 call _cond_test(109105 call || isjson[108783] ischpl[108796]))
        {
          (109113 call <~> f[107950](109108 'new'(109112 call ioLiteral[238753] "]")))
        }
      }
      {
        const newDom[109135] "const"(109133 call chpl__buildDomainExpr(109130 call #(109127 call chpl_build_low_bounded_range offset[108833]) i[108838]))
        (109138 'end of statement')
        (109146 call(109141 call . arr[107954] c"dsiReallocate") newDom[109135])
        (109159 call(109149 call . dom[107956] c"dsiSetIndices")(109157 call(109153 call . newDom[109135] c"getIndices")))
        (109166 call(109162 call . arr[107954] c"dsiPostReallocate"))
      }
    }
    {
      if(109425 call _cond_test(109213 call &&(109202 call &&(109199 call &&(109191 call &&(109182 call &&(109175 call(109171 call . arr[107954] c"isDefaultRectangular"))(109180 call !(109179 call chpl__isArrayView arr[107954])))(109190 call _isSimpleIoType(109186 call . arr[107954] c"eltType")))(109198 call(109194 call . f[107950] c"binary"))) isNative[107996])(109212 call(109207 call . arr[107954] c"isDataContiguous") dom[107956])))
      {
        const elemSize[109222] "const"(109221 call c_sizeof(109217 call . arr[107954] c"eltType"))
        (109225 'end of statement')
        if(109303 call _cond_test 1)
        {
          unknown rw[109237](109234 IfExpr (109229 call . f[107950] c"writing") then
          { scopeless
            "write"
          } else
          { scopeless
            "read"
          } )
          (109240 'end of statement')
          (109301 call assert(109263 call <=(109254 call *(109248 call _cast uint(64)[115](109244 call . dom[107956] c"dsiNumIndices"))(109252 call _cast uint(64)[115] elemSize[109222]))(109261 call _cast uint(64)[115](109259 call max ssize_t[20647]))) "length of array to " rw[109237] " is greater than ssize_t can hold")
        }
        const len[109311] "const"(109308 call . dom[107956] c"dsiNumIndices")
        (109314 'end of statement')
        const src[109319] "const"(109316 call . arr[107954] c"theData")
        (109322 'end of statement')
        const idx[109333] "const"(109332 call(109324 call . arr[107954] c"getDataIndex")(109328 call . dom[107956] c"dsiLow"))
        (109336 'end of statement')
        const size[109347] "const"(109345 call *(109339 call _cast ssize_t[20647] len[109311])(109343 call _cast ssize_t[20647] elemSize[109222]))
        (109350 'end of statement')
        Try
        {
          {
            if(109395 call _cond_test(109352 call . f[107950] c"writing"))
            {
              (109372 call(109358 call . f[107950] c"writeBytes")(109369 call _ddata_shift(109363 call . arr[107954] c"eltType") src[109319] idx[109333]) size[109347])
            }
            {
              (109392 call(109378 call . f[107950] c"readBytes")(109389 call _ddata_shift(109383 call . arr[107954] c"eltType") src[109319] idx[109333]) size[109347])
            }
          }
        }
        Catch err : Error
        {
          unknown tmp[354269] "temp"(354272 'current error')
          unknown err[354275](354280 'new'(354278 call _owned[30](?)(354276 'to non nilable class' tmp[354269])))
          {
            (109405 'throw' err[354275])
          }
        }
      }
      {
        const zeroTup[109415] "const"(109413 call * rank[107962] idxType[107971])
        (109418 'end of statement')
        (109423 call recursiveArrayWriter zeroTup[109415])
      }
    }
  }
  function DefaultRectangularArr[106840](?).dsiSerialWrite[109441](arg _mt[109446]:_MT[238], arg this[109443]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?), arg f[109439]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (109451 call(381696 call . this[109443] c"dsiSerialReadWrite") f[109439])
  }
  function DefaultRectangularArr[106840](?).dsiSerialRead[109461](arg _mt[109466]:_MT[238], arg this[109463]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?), arg f[109459]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (109471 call(381701 call . this[109463] c"dsiSerialReadWrite") f[109459])
  }
  function DefaultRectangularArr[106840](?).isDataContiguous[109481](arg _mt[109486]:_MT[238], arg this[109483]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?), arg dom[109479]:_any[178](?)) : _unknown[51] "method"
  {
    if(109529 call _cond_test debugDefaultDistBulkTransfer[93397])
    {
      (109527 call chpl_debug_writeln "isDataContiguous(): off="(381708 call . this[109483] c"off") " blk="(381713 call . this[109483] c"blk"))
    }
    if(109548 call _cond_test(109543 call !=(109541 call(381718 call . this[109483] c"blk")(109538 call -(381723 call . this[109483] c"rank") 1)) 1))
    {
      (109546 return 0)
    }
    if(109651 call _cond_test(109555 call >=(381728 call . this[109483] c"rank") 2))
    {
      const domDims[109565] "const"(109564 call(109560 call . dom[109479] c"dsiDims"))
      (109568 'end of statement')
      {
        unknown dim[109615] 0
        unknown tmp[109616] "maybe param" "temp"
        (109627 'move' tmp[109616](109625 call chpl_compute_low_param_loop_bound 0(109573 call -(381733 call . this[109483] c"rank") 2)))
        unknown tmp[109617] "maybe param" "temp"
        (109637 'move' tmp[109617](109635 call chpl_compute_high_param_loop_bound 0(109632 call -(381752 call . this[109483] c"rank") 2)))
        unknown tmp[109618] "maybe param" "temp"
        (109640 'move' tmp[109618](109578 call - 1))
        ParamForLoop[109642]
        { dim[109615] tmp[109616] tmp[109617] tmp[109618]
          if(109610 call _cond_test(109605 call !=(109585 call(381738 call . this[109483] c"blk") dim[109615])(109603 call *(109592 call(381744 call . this[109483] c"blk")(109589 call + dim[109615] 1))(109600 call .(109599 call domDims[109565](109596 call + dim[109615] 1)) c"size"))))
          {
            (109608 return 0)
          }
        }
        label _unused_continueLabel[109620]
        label _breakLabel[109619]
      }
    }
    if(109677 call _cond_test debugDefaultDistBulkTransfer[93397])
    {
      (109675 call chpl_debug_writeln "\tYES!")
    }
    (109683 return 1)
  }
  function _canDoSimpleTransfer[109691](arg A[109689]:_any[178](?), arg aView[109693]:_any[178](?), arg B[109695]:_any[178](?), arg bView[109697]:_any[178](?)) : _unknown[51] "private"
  {
    if(109756 call _cond_test(109723 call ||(109709 call !(109708 call(109700 call . A[109689] c"isDataContiguous")(109704 call . aView[109693] c"_value")))(109721 call !(109720 call(109712 call . B[109695] c"isDataContiguous")(109716 call . bView[109697] c"_value")))))
    {
      if(109747 call _cond_test debugDefaultDistBulkTransfer[93397])
      {
        (109745 call chpl_debug_writeln "isDataContiguous return False")
      }
      (109754 return 0)
    }
    (109762 return 1)
  }
  function _canDoComplexTransfer[109770](arg A[109768]:_any[178](?), arg aView[109772]:_any[178](?), arg B[109774]:_any[178](?), arg bView[109776]:_any[178](?)) : _unknown[51] "private"
  {
    (109779 return useBulkTransferStride[113727])
  }
  function DefaultRectangularArr[106840](?).doiCanBulkTransferRankChange[109787](arg _mt[109792]:_MT[238], arg this[109789]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?)) param : _unknown[51] "method" "method overrides"
  {
    (109795 return 1)
  }
  function DefaultRectangularArr[106840](?).doiBulkTransferToKnown[109805](arg _mt[109816]:_MT[238], arg this[109813]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?), arg srcDom[109803]:_any[178](?), arg destClass[109808] :
  DefaultRectangularArr[379693](?), arg destDom[109811]:_any[178](?)) : _unknown[51] "method"
  {
    (109826 return(109825 call transferHelper destClass[109808] destDom[109811] this[109813] srcDom[109803]))
  }
  { scopeless type
    bool[10]
  }
  function DefaultRectangularArr[106840](?).doiBulkTransferFromKnown[109837](arg _mt[109848]:_MT[238], arg this[109845]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?), arg destDom[109835]:_any[178](?), arg srcClass[109840] :
  DefaultRectangularArr[379693](?), arg srcDom[109843]:_any[178](?)) : _unknown[51] "method"
  {
    (109858 return(109857 call transferHelper this[109845] destDom[109835] srcClass[109840] srcDom[109843]))
  }
  { scopeless type
    bool[10]
  }
  function transferHelper[109868](arg A[109866]:_any[178](?), arg aView[109870]:_any[178](?), arg B[109872]:_any[178](?), arg bView[109874]:_any[178](?)) : _unknown[51] "private"
  {
    if(110001 call _cond_test(109912 call &&(109903 call &&(109885 call ==(109878 call . A[109866] c"rank")(109882 call . B[109872] c"rank"))(109901 call &&(109892 call ==(109888 call . aView[109870] c"stridable") 0)(109899 call ==(109895 call . bView[109874] c"stridable") 0)))(109911 call _canDoSimpleTransfer A[109866] aView[109870] B[109872] bView[109874])))
    {
      if(109936 call _cond_test debugDefaultDistBulkTransfer[93397])
      {
        (109934 call chpl_debug_writeln "Performing simple DefaultRectangular transfer")
      }
      (109948 call _simpleTransfer A[109866] aView[109870] B[109872] bView[109874])
    }
    {
      if(109997 call _cond_test(109956 call _canDoComplexTransfer A[109866] aView[109870] B[109872] bView[109874]))
      {
        if(109979 call _cond_test debugDefaultDistBulkTransfer[93397])
        {
          (109977 call chpl_debug_writeln "Performing complex DefaultRectangular transfer")
        }
        (109991 call complexTransfer A[109866] aView[109870] B[109872] bView[109874])
      }
      {
        (109994 return 0)
      }
    }
    (110008 return 1)
  }
  { scopeless type
    bool[10]
  }
  function _simpleTransfer[110017](arg A[110015]:_any[178](?), arg aView[110019]:_any[178](?), arg B[110021]:_any[178](?), arg bView[110023]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown rank[110029] "param"(110026 call . A[110015] c"rank")
    (110032 'end of statement')
    unknown idxType[110038] "type variable"(110035 call . A[110015] c"idxType")
    const Adims[110047] "const"(110046 call(110042 call . aView[110019] c"dims"))
    (110050 'end of statement')
    unknown Alo[110058](110056 call * rank[110029](110053 call . aView[110019] c"idxType"))
    (110061 'end of statement')
    {
      unknown i[110083] 0
      unknown tmp[110084] "maybe param" "temp"
      (110096 'move' tmp[110084](110094 call chpl_compute_low_param_loop_bound 0(110065 call - rank[110029] 1)))
      unknown tmp[110085] "maybe param" "temp"
      (110106 'move' tmp[110085](110104 call chpl_compute_high_param_loop_bound 0(110101 call - rank[110029] 1)))
      unknown tmp[110086] "maybe param" "temp"
      (110109 'move' tmp[110086] 1)
      ParamForLoop[110111]
      { i[110083] tmp[110084] tmp[110085] tmp[110086]
        (110080 call =(110072 call Alo[110058] i[110083])(110077 call .(110076 call Adims[110047] i[110083]) c"first"))
      }
      label _unused_continueLabel[110088]
      label _breakLabel[110087]
    }
    const Bdims[110126] "const"(110125 call(110121 call . bView[110023] c"dims"))
    (110129 'end of statement')
    unknown Blo[110137](110135 call * rank[110029](110132 call . B[110021] c"idxType"))
    (110140 'end of statement')
    {
      unknown i[110162] 0
      unknown tmp[110163] "maybe param" "temp"
      (110175 'move' tmp[110163](110173 call chpl_compute_low_param_loop_bound 0(110144 call - rank[110029] 1)))
      unknown tmp[110164] "maybe param" "temp"
      (110185 'move' tmp[110164](110183 call chpl_compute_high_param_loop_bound 0(110180 call - rank[110029] 1)))
      unknown tmp[110165] "maybe param" "temp"
      (110188 'move' tmp[110165] 1)
      ParamForLoop[110190]
      { i[110162] tmp[110163] tmp[110164] tmp[110165]
        (110159 call =(110151 call Blo[110137] i[110162])(110156 call .(110155 call Bdims[110126] i[110162]) c"first"))
      }
      label _unused_continueLabel[110167]
      label _breakLabel[110166]
    }
    const len[110209] "const"(110208 call(110203 call .(110200 call . aView[110019] c"size") c"safeCast") size_t[20654])
    (110212 'end of statement')
    if(110219 call _cond_test(110215 call == len[110209] 0))
    {
      (110217 return _void[55])
    }
    if(110340 call _cond_test debugBulkTransfer[113717])
    {
      function sizeof[110229](arg x[110227]:_any[178](?)) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
      {
      }
      { scopeless type
        int(64)[13]
      }
      const elemSize[110243] "const"(110242 call sizeof(110238 call . B[110021] c"eltType"))
      (110246 'end of statement')
      (110338 call chpl_debug_writeln "In DefaultRectangular._simpleTransfer():" " Alo=" Alo[110058] ", Blo=" Blo[110137] ", len=" len[110209] ", elemSize=" elemSize[110243])
    }
    const Aidx[110351] "const"(110350 call(110345 call . A[110015] c"getDataIndex") Alo[110058])
    (110354 'end of statement')
    const Adata[110367] "const"(110366 call _ddata_shift(110357 call . A[110015] c"eltType")(110362 call . A[110015] c"theData") Aidx[110351])
    (110370 'end of statement')
    const Bidx[110378] "const"(110377 call(110372 call . B[110021] c"getDataIndex") Blo[110137])
    (110381 'end of statement')
    const Bdata[110394] "const"(110393 call _ddata_shift(110384 call . B[110021] c"eltType")(110389 call . B[110021] c"theData") Bidx[110378])
    (110397 'end of statement')
    (110405 call _simpleTransferHelper A[110015] B[110021] Adata[110367] Bdata[110394] len[110209])
  }
  function _simpleTransferHelper[110413](arg A[110411]:_any[178](?), arg B[110415]:_any[178](?), arg Adata[110417]:_any[178](?), arg Bdata[110419]:_any[178](?), arg len[110421]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(110429 call _cond_test(110425 call == Adata[110417] Bdata[110419]))
    {
      (110427 return _void[55])
    }
    if(110667 call _cond_test(110444 call ==(110439 '_wide_get_node' Adata[110417])(110441 call .(358947 call here[90435]) c"id")))
    {
      if(110473 call _cond_test debugDefaultDistBulkTransfer[93397])
      {
        (110471 call chpl_debug_writeln "\tlocal get() from "(110470 '_wide_get_node' B[110415]))
      }
      (110495 'chpl_comm_array_get'(110484 call Adata[110417] 0)(110489 '_wide_get_node' Bdata[110419])(110493 call Bdata[110419] 0) len[110421])
    }
    {
      if(110662 call _cond_test(110506 call ==(110501 '_wide_get_node' Bdata[110419])(110503 call .(358949 call here[90435]) c"id")))
      {
        if(110535 call _cond_test debugDefaultDistBulkTransfer[93397])
        {
          (110533 call chpl_debug_writeln "\tlocal put() to "(110532 '_wide_get_node' A[110411]))
        }
        (110573 'chpl_comm_array_put'(110562 call Bdata[110419] 0)(110567 '_wide_get_node' Adata[110417])(110571 call Adata[110417] 0) len[110421])
      }
      {
        const tmp[110654] "const" "temp"
        (110656 'move' tmp[110654](110652 'deref'(110651 '_wide_get_locale'(110577 call chpl_localeID_to_locale(110576 '_wide_get_locale' Adata[110417])))))
        {
          {
            if(110627 call _cond_test debugDefaultDistBulkTransfer[93397])
            {
              (110625 call chpl_debug_writeln "\tremote get() on "(110600 call .(358951 call here[90435]) c"id") " from "(110624 '_wide_get_node' B[110415]))
            }
            (110649 'chpl_comm_array_get'(110638 call Adata[110417] 0)(110643 '_wide_get_node' Bdata[110419])(110647 call Bdata[110419] 0) len[110421])
          }
          (110659 'on block' 0 tmp[110654])
        }
      }
    }
  }
  function complexTransfer[110678](arg A[110676]:_any[178](?), arg aView[110680]:_any[178](?), arg B[110682]:_any[178](?), arg bView[110684]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(110786 call _cond_test(110714 call &&(110698 call !=(110693 '_wide_get_node'(110687 call . A[110676] c"data"))(110695 call .(358954 call here[90435]) c"id"))(110712 call !=(110707 '_wide_get_node'(110701 call . B[110682] c"data"))(110709 call .(358957 call here[90435]) c"id"))))
    {
      if(110749 call _cond_test debugDefaultDistBulkTransfer[93397])
      {
        (110746 call chpl_debug_writeln "BulkTransferStride: Both arrays on different locale, moving to locale of destination: LOCALE"(110745 '_wide_get_node'(110739 call . A[110676] c"data")))
      }
      const tmp[110769] "const" "temp"
      (110771 'move' tmp[110769](110767 'deref'(110766 '_wide_get_locale'(110755 call . A[110676] c"data"))))
      {
        (110764 call complexTransferCore A[110676] aView[110680] B[110682] bView[110684])
        (110774 'on block' 0 tmp[110769])
      }
    }
    {
      (110783 call complexTransferCore A[110676] aView[110680] B[110682] bView[110684])
    }
  }
  function complexTransferCore[110797](arg LHS[110795]:_any[178](?), arg LViewDom[110799]:_any[178](?), arg RHS[110801]:_any[178](?), arg RViewDom[110803]:_any[178](?)) : _unknown[51] "private"
  {
    unknown minRank[110816] "param"(110815 call min(110807 call . LHS[110795] c"rank")(110812 call . RHS[110801] c"rank"))
    (110819 'end of statement')
    unknown idxType[110825] "type variable"(110822 call . LHS[110795] c"idxType")
    unknown intIdxType[110832] "type variable"(110829 call . LHS[110795] c"intIdxType")
    if(110917 call _cond_test debugDefaultDistBulkTransfer[93397])
    {
      (110874 call writeln "Transferring views :" LViewDom[110799] " <-- " RViewDom[110803])
      (110915 call writeln "Original domains   :"(110904 call(110900 call .(110897 call . LHS[110795] c"dom") c"dsiDims")) " <-- "(110914 call(110910 call .(110907 call . RHS[110801] c"dom") c"dsiDims")))
    }
    const LeftDims[110927] "const"(110926 call(110922 call . LViewDom[110799] c"dims"))
    (110930 'end of statement')
    const RightDims[110937] "const"(110936 call(110932 call . RViewDom[110803] c"dims"))
    (110940 'end of statement')
    const tmp[110953] "const" "temp"(110952 call bulkCommComputeActiveDims LeftDims[110927] RightDims[110937])
    (110963 call _check_tuple_var_decl tmp[110953] 3)
    const LeftActives[110941] "const"(110954 call tmp[110953] 0)
    const RightActives[110943] "const"(110957 call tmp[110953] 1)
    const inferredRank[110945] "const"(110960 call tmp[110953] 2)
    (110968 'end of statement')
    unknown DimSizes[110986](110984 call chpl__buildArrayRuntimeType(110982 call chpl__ensureDomainExpr(110971 call chpl_build_bounded_range 1 inferredRank[110945]))(110981 'typeof'(110978 call .(110977 call LeftDims[110927] 0) c"size")))
    (110989 'end of statement')
    {
      unknown _indexOfInterest[111021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111022] "expr temp" "temp"
      (111031 'move' _iterator[111022](111029 call _getIterator(111036 call chpl_direct_range_iter 1 inferredRank[110945] 1)))
      Defer
      {
        {
          (111052 call _freeIterator _iterator[111022])
        }
      }
      { scopeless type
        (111041 'move' _indexOfInterest[111021](111038 call iteratorIndex _iterator[111022]))
      }
      ForLoop[111023]
      {
        unknown i[111045] "index var" "insert auto destroy"
        (111047 'move' i[111045] _indexOfInterest[111021])
        {
          const dimIdx[111002] "const"(111001 call LeftActives[110941](110998 call - i[111045] 1))
          (111005 'end of statement')
          (111018 call =(111010 call DimSizes[110986] i[111045])(111015 call .(111014 call LeftDims[110927] dimIdx[111002]) c"size"))
        }
        label _continueLabel[111026]
        _indexOfInterest[111021]
        _iterator[111022]
      }
      label _breakLabel[111027]
    }
    if(111083 call _cond_test debugDefaultDistBulkTransfer[93397])
    {
      (111080 call writeln "inferredRank = " inferredRank[110945])
    }
    (111110 call assert(111090 call <= inferredRank[110945] minRank[110816]) "complex DR transfer: computed rank greater than minimum rank!")
    unknown LBlk[111112](111117 call * minRank[110816] intIdxType[110832])
    unknown RBlk[111119](111123 'typeof' LBlk[111112])
    (111124 'end of statement')
    {
      {
        unknown _indexOfInterest[111246] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[111247] "expr temp" "temp"
        (111256 'move' _iterator[111247](111254 call _getIterator(111267 call chpl_direct_range_iter 1 inferredRank[110945](111263 call - 1))))
        Defer
        {
          {
            (111283 call _freeIterator _iterator[111247])
          }
        }
        { scopeless type
          (111272 'move' _indexOfInterest[111246](111269 call iteratorIndex _iterator[111247]))
        }
        ForLoop[111248]
        {
          unknown idx[111276] "index var" "insert auto destroy"
          (111278 'move' idx[111276] _indexOfInterest[111246])
          {
            const li[111142] "const"(111141 call LeftActives[110941](111138 call - idx[111276] 1))
            (111145 'end of statement')
            (111188 call =(111153 call LBlk[111112](111150 call - idx[111276] 1))(111186 call *(111160 call(111155 call . LHS[110795] c"blk") li[111142])(111184 call _cast intIdxType[110832](111181 call /(111165 call .(111164 call LeftDims[110927] li[111142]) c"stride")(111178 call .(111177 call(111172 call .(111169 call . LHS[110795] c"dom") c"dsiDim") li[111142]) c"stride")))))
            const ri[111198] "const"(111197 call RightActives[110943](111194 call - idx[111276] 1))
            (111201 'end of statement')
            (111243 call =(111208 call RBlk[111119](111205 call - idx[111276] 1))(111241 call *(111215 call(111210 call . RHS[110801] c"blk") ri[111198])(111239 call _cast intIdxType[110832](111236 call /(111220 call .(111219 call RightDims[110937] ri[111198]) c"stride")(111233 call .(111232 call(111227 call .(111224 call . RHS[110801] c"dom") c"dsiDim") ri[111198]) c"stride")))))
          }
          label _continueLabel[111251]
          _indexOfInterest[111246]
          _iterator[111247]
        }
        label _breakLabel[111252]
      }
    }
    if(111337 call _cond_test debugDefaultDistBulkTransfer[93397])
    {
      (111312 call writeln "LBlk = " LBlk[111112])
      (111335 call writeln "RBlk = " RBlk[111119])
    }
    unknown stridelevels[111342] 0
    (111345 'end of statement')
    unknown countDom[111356](111354 call chpl__buildDomainExpr(111351 call chpl_build_bounded_range 1(111349 call + inferredRank[110945] 1)))
    (111359 'end of statement')
    unknown count[111367](111365 call chpl__buildArrayRuntimeType(111363 call chpl__ensureDomainExpr countDom[111356]) size_t[20654])
    (111370 'end of statement')
    {
      unknown _indexOfInterest[111378] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111379] "expr temp" "temp"
      (111388 'move' _iterator[111379](111386 call _getIterator count[111367]))
      Defer
      {
        {
          (111404 call _freeIterator _iterator[111379])
        }
      }
      { scopeless type
        (111393 'move' _indexOfInterest[111378](111390 call iteratorIndex _iterator[111379]))
      }
      ForLoop[111380]
      {
        unknown c[111397] "index var" "insert auto destroy"
        (111399 'move' c[111397] _indexOfInterest[111378])
        (111375 call = c[111397] 1)
        label _continueLabel[111383]
        _indexOfInterest[111378]
        _iterator[111379]
      }
      label _breakLabel[111384]
    }
    unknown strideDom[111418](111416 call chpl__buildDomainExpr(111413 call chpl_build_bounded_range 1 inferredRank[110945]))
    (111421 'end of statement')
    unknown dstStride[111422](111430 call chpl__buildArrayRuntimeType(111428 call chpl__ensureDomainExpr strideDom[111418]) size_t[20654])
    unknown srcStride[111432](111436 'typeof' dstStride[111422])
    (111437 'end of statement')
    if(111514 call _cond_test(111458 call ||(111446 call >(111444 call LBlk[111112](111441 call - inferredRank[110945] 1)) 1)(111456 call >(111454 call RBlk[111119](111451 call - inferredRank[110945] 1)) 1)))
    {
      (111462 call += stridelevels[111342] 1)
      (111471 call =(111469 call count[111367] stridelevels[111342]) 1)
      (111491 call =(111477 call dstStride[111422] stridelevels[111342])(111490 call(111485 call .(111484 call LBlk[111112](111481 call - inferredRank[110945] 1)) c"safeCast") size_t[20654]))
      (111511 call =(111497 call srcStride[111432] stridelevels[111342])(111510 call(111505 call .(111504 call RBlk[111119](111501 call - inferredRank[110945] 1)) c"safeCast") size_t[20654]))
    }
    {
      unknown _indexOfInterest[111624] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111625] "expr temp" "temp"
      (111634 'move' _iterator[111625](111632 call _getIterator(111645 call chpl_direct_range_iter 2 inferredRank[110945](111641 call - 1))))
      Defer
      {
        {
          (111661 call _freeIterator _iterator[111625])
        }
      }
      { scopeless type
        (111650 'move' _indexOfInterest[111624](111647 call iteratorIndex _iterator[111625]))
      }
      ForLoop[111626]
      {
        unknown i[111654] "index var" "insert auto destroy"
        (111656 'move' i[111654] _indexOfInterest[111624])
        {
          (111545 call *=(111534 call count[111367](111531 call + stridelevels[111342] 1))(111544 call(111539 call .(111538 call DimSizes[110986] i[111654]) c"safeCast") size_t[20654]))
          const bothReuse[111567] "const"(111565 call &&(111556 call canReuseStride LBlk[111112] i[111654] stridelevels[111342] count[111367] dstStride[111422])(111564 call canReuseStride RBlk[111119] i[111654] stridelevels[111342] count[111367] srcStride[111432]))
          (111570 'end of statement')
          if(111620 call _cond_test(111572 call ! bothReuse[111567]))
          {
            (111576 call += stridelevels[111342] 1)
            (111597 call =(111583 call dstStride[111422] stridelevels[111342])(111596 call(111591 call .(111590 call LBlk[111112](111587 call - i[111654] 2)) c"safeCast") size_t[20654]))
            (111617 call =(111603 call srcStride[111432] stridelevels[111342])(111616 call(111611 call .(111610 call RBlk[111119](111607 call - i[111654] 2)) c"safeCast") size_t[20654]))
          }
        }
        label _continueLabel[111629]
        _indexOfInterest[111624]
        _iterator[111625]
      }
      label _breakLabel[111630]
    }
    (111685 call *=(111674 call count[111367](111671 call + stridelevels[111342] 1))(111684 call(111679 call .(111678 call DimSizes[110986] 1) c"safeCast") size_t[20654]))
    (111711 call assert(111691 call <= stridelevels[111342] inferredRank[110945]) "BulkTransferStride: stride levels greater than rank.")
    if(111773 call _cond_test(111715 call == stridelevels[111342] 0))
    {
      (111771 call assert(111726 call ==(111721 call count[111367] 1)(111723 call . LViewDom[110799] c"size")) "BulkTransferStride: bulk-count incorrect for stride level of 0: "(111749 call count[111367] 1) " != "(111768 call . LViewDom[110799] c"size"))
    }
    (111789 call = countDom[111356](111787 call chpl__buildDomainExpr(111784 call chpl_build_bounded_range 1(111782 call + stridelevels[111342] 1))))
    (111800 call = strideDom[111418](111798 call chpl__buildDomainExpr(111795 call chpl_build_bounded_range 1 stridelevels[111342])))
    function getFirstIdx[111807](arg dims[111805]:_any[178](?)) : _unknown[51]
    {
      unknown ret[111822](111820 call *(111810 call . dims[111805] c"size")(111817 call .(111816 call dims[111805] 0) c"idxType"))
      (111825 'end of statement')
      {
        unknown i[111871] 0
        unknown tmp[111872] "maybe param" "temp"
        (111884 'move' tmp[111872](111882 call chpl_compute_low_param_loop_bound 0(111833 call -(111829 call . dims[111805] c"size") 1)))
        unknown tmp[111873] "maybe param" "temp"
        (111897 'move' tmp[111873](111895 call chpl_compute_high_param_loop_bound 0(111889 call -(111891 call . dims[111805] c"size") 1)))
        unknown tmp[111874] "maybe param" "temp"
        (111900 'move' tmp[111874] 1)
        ParamForLoop[111902]
        { i[111871] tmp[111872] tmp[111873] tmp[111874]
          (111868 call =(111840 call ret[111822] i[111871])(111865 IfExpr (111849 call <(111845 call .(111844 call dims[111805] i[111871]) c"stride") 0) then
          { scopeless
            (111855 call .(111854 call dims[111805] i[111871]) c"last")
          } else
          { scopeless
            (111862 call .(111861 call dims[111805] i[111871]) c"first")
          } ))
        }
        label _unused_continueLabel[111876]
        label _breakLabel[111875]
      }
      (111912 return ret[111822])
    }
    const LFirst[111920] "const"(111919 call getFirstIdx LeftDims[110927])
    (111923 'end of statement')
    const RFirst[111928] "const"(111927 call getFirstIdx RightDims[110937])
    (111931 'end of statement')
    (111948 call complexTransferComm LHS[110795] RHS[110801](111941 call _cast(111940 call int(64)[13] 32) stridelevels[111342]) dstStride[111422] srcStride[111432] count[111367] LFirst[111920] RFirst[111928])
  }
  function complexTransferComm[111956](arg A[111954]:_any[178](?), arg B[111958]:_any[178](?), arg stridelevels[111964] :
  (111963 call int(64)[13] 32), arg dstStride[111967]:_any[178](?), arg srcStride[111969]:_any[178](?), arg count[111971]:_any[178](?), arg AFirst[111973]:_any[178](?), arg BFirst[111975]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(112112 call _cond_test debugDefaultDistBulkTransfer[93397])
    {
      (112109 call chpl_debug_writeln "BulkTransferStride with values:\n" "\tLocale        = "(112020 call stringify(112016 call .(358978 call here[90435]) c"id")) "\n" "\tStride levels = "(112042 call stringify stridelevels[111964]) "\n" "\tdstStride     = "(112064 call stringify dstStride[111967]) "\n" "\tsrcStride     = "(112086 call stringify srcStride[111969]) "\n" "\tcount         = "(112108 call stringify count[111971]))
    }
    const AO[112126] "const"(112125 call(112118 call . A[111954] c"getDataIndex") AFirst[111973](getShifted = 0))
    (112129 'end of statement')
    const BO[112139] "const"(112138 call(112131 call . B[111958] c"getDataIndex") BFirst[111975](getShifted = 0))
    (112142 'end of statement')
    const dest[112147] "const"(112144 call . A[111954] c"data")
    (112150 'end of statement')
    const src[112155] "const"(112152 call . B[111958] c"data")
    (112158 'end of statement')
    const dststr[112166] "const"(112163 call .(112160 call . dstStride[111967] c"_value") c"data")
    (112169 'end of statement')
    const srcstr[112177] "const"(112174 call .(112171 call . srcStride[111969] c"_value") c"data")
    (112180 'end of statement')
    const cnt[112188] "const"(112185 call .(112182 call . count[111971] c"_value") c"data")
    (112191 'end of statement')
    if(112439 call _cond_test(112201 call ==(112196 '_wide_get_node' dest[112147])(112198 call .(358987 call here[90435]) c"id")))
    {
      const srclocale[112214] "const"(112212 call _cast(112211 call int(64)[13] 32)(112207 '_wide_get_node' src[112155]))
      (112217 'end of statement')
      if(112243 call _cond_test debugBulkTransfer[113717])
      {
        (112240 call chpl_debug_writeln "BulkTransferStride: On LHS - GET from " srclocale[112214])
      }
      (112287 'chpl_comm_get_strd'(112268 call dest[112147] AO[112126])(112272 call dststr[112166] 0) srclocale[112214](112277 call src[112155] BO[112139])(112281 call srcstr[112177] 0)(112285 call cnt[112188] 0) stridelevels[111964])
    }
    {
      const destlocale[112300] "const"(112298 call _cast(112297 call int(64)[13] 32)(112293 '_wide_get_node' dest[112147]))
      (112303 'end of statement')
      if(112365 call _cond_test debugDefaultDistBulkTransfer[93397])
      {
        (112362 call assert(112316 call ==(112311 '_wide_get_node' src[112155])(112313 call .(358989 call here[90435]) c"id")) "BulkTransferStride: Expected to be on "(112340 '_wide_get_node' src[112155]) ", actually on "(112359 call .(358991 call here[90435]) c"id"))
      }
      if(112393 call _cond_test debugBulkTransfer[113717])
      {
        (112390 call chpl_debug_writeln "BulkTransferStride: On RHS - PUT to " destlocale[112300])
      }
      (112437 'chpl_comm_put_strd'(112418 call dest[112147] AO[112126])(112422 call dststr[112166] 0) destlocale[112300](112427 call src[112155] BO[112139])(112431 call srcstr[112177] 0)(112435 call cnt[112188] 0) stridelevels[111964])
    }
  }
  function DefaultRectangularArr[106840](?).isDefaultRectangular[112448](arg _mt[112453]:_MT[238], arg this[112450]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?)) param : _unknown[51] "method" "method overrides"
  {
    (112456 return 1)
  }
  function DefaultRectangularArr[415297](?).isDefaultRectangular[112464](arg _mt[112469]:_MT[238], arg this[112466]:DefaultRectangularArr[415297](?)) param : _unknown[51] "method"
  {
    (112472 return 1)
  }
  unknown debugDRScan[112478] "config" "param" 0
  (112481 'end of statement')
  function DefaultRectangularArr[106840](?).doiScan[112487](arg _mt[112494]:_MT[238], arg this[112491]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?), arg op[112485]:_any[178](?), arg dom[112489]:_any[178](?)) : _unknown[51] "method"
  {
    unknown resType[112517] "type variable"(112516 'typeof'(112515 call(112511 call . op[112485] c"generate")))
    unknown res[112527](112525 call chpl__buildArrayRuntimeType(112523 call chpl__ensureDomainExpr dom[112489]) resType[112517])
    (112530 'end of statement')
    unknown tmp[112551] "temp"(112550 call(112543 call . this[112491] c"chpl__preScan") op[112485] res[112527] dom[112489])
    (112561 call _check_tuple_var_decl tmp[112551] 4)
    unknown numTasks[112531](112552 call tmp[112551] 0)
    unknown rngs[112533](112555 call tmp[112551] 1)
    unknown state[112535](112558 call tmp[112551] 2)
    (112566 'end of statement')
    (112579 call(112570 call . this[112491] c"chpl__postScan") op[112485] res[112527] numTasks[112531] rngs[112533] state[112535])
    (112583 call chpl__delete op[112485])
    (112587 return res[112527])
    (355096 'used modules list'(112507 'use' RangeChunk[266458]))
  }
  where {
    (112504 call &&(112498 call ==(382015 call . this[112491] c"rank") 1)(112503 call chpl__scanStateResTypesMatch op[112485]))
  }
  function DefaultRectangularArr[106840](?).doiSwap[112597](arg _mt[112602]:_MT[238], arg this[112599]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?), arg arr[112595]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (112612 call <=>(112605 call . this[112599] c"data")(112609 call . arr[112595] c"data"))
    (112621 call(112617 call . this[112599] c"initShiftedData"))
    (112628 call(112624 call . arr[112595] c"initShiftedData"))
  }
  function DefaultRectangularArr[106840](?).chpl__preScan[112637](arg _mt[112652]:_MT[238], arg this[112649]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?), arg op[112635]:_any[178](?), arg res[112644] :
  (112641 call chpl__buildArrayRuntimeType nil[44] unknown resType[112639]), arg dom[112647]:_any[178](?)) : _unknown[51] "method"
  {
    const rng[112667] "const"(112666 call(112661 call . dom[112647] c"dim") 0)
    (112670 'end of statement')
    const numTasks[112685] "const"(112682 IfExpr (112673 'task_get_serial') then
    { scopeless
      1
    } else
    { scopeless
      (112681 call _computeNumChunks(112677 call . rng[112667] c"size"))
    } )
    (112688 'end of statement')
    const rngs[112699] "const"(112698 call chunks module=[255] RangeChunk[266458] rng[112667] numTasks[112685])
    (112702 'end of statement')
    if(112766 call _cond_test debugDRScan[112478])
    {
      (112741 call writeln "Using " numTasks[112685] " tasks")
      (112764 call writeln "Whose chunks are: " rngs[112699])
    }
    unknown state[112780](112778 call chpl__buildArrayRuntimeType(112776 call chpl__ensureDomainExpr(112771 call . rngs[112699] c"indices")) resType[112639])
    (112783 'end of statement')
    if(112974 call _cond_test(112786 call == numTasks[112685] 1))
    {
      (112797 call preScanChunk(112793 call .(112790 call . rngs[112699] c"indices") c"low"))
    }
    {
      {
        unknown tmpIter[112811] "expr temp" "maybe ref" "no copy" "temp"
        (112814 'move' tmpIter[112811](112802 call . rngs[112699] c"indices"))
        unknown isRngDomArr[112954] "maybe param" "temp"
        (112969 'move' isRngDomArr[112954](112967 call ||(112956 call isBoundedRange tmpIter[112811])(112965 call ||(112959 call isDomain tmpIter[112811])(112962 call isArray tmpIter[112811]))))
        if isRngDomArr[112954]
        {
          const _coforallCount[112821] "const" "end count" "temp"
          (112890 'move' _coforallCount[112821](112887 call _endCountAlloc 1))
          unknown numTasks[112822] "temp"
          (112874 'move' numTasks[112822](112870 call . tmpIter[112811] c"size"))
          (112865 call _upEndCount _coforallCount[112821] 1 numTasks[112822])
          (112862 call chpl_resetTaskSpawn numTasks[112822])
          unknown _indexOfInterest[112829] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[112830] "expr temp" "temp"
          (112839 'move' _iterator[112830](112837 call _getIterator tmpIter[112811]))
          Defer
          {
            {
              (112855 call _freeIterator _iterator[112830])
            }
          }
          { scopeless type
            (112844 'move' _indexOfInterest[112829](112841 call iteratorIndex _iterator[112830]))
          }
          ForLoop[112831]
          {
            unknown tid[112848] "coforall index var" "index var" "insert auto destroy"
            (112850 'move' tid[112848] _indexOfInterest[112829])
            {
              {
                (112818 call preScanChunk tid[112848])
              }
              (112824 call _downEndCount _coforallCount[112821] nil[44])
              (112823 'coforall loop')
            }
            label _continueLabel[112834]
            _indexOfInterest[112829]
            _iterator[112830]
          }
          label _breakLabel[112835]
          Defer
          {
            {
              (112877 call _endCountFree _coforallCount[112821])
            }
          }
          (112882 call _waitEndCount _coforallCount[112821] 1 numTasks[112822])
        }
        {
          const _coforallCount[112894] "const" "end count" "temp"
          (112951 'move' _coforallCount[112894](112948 call _endCountAlloc 1))
          unknown _indexOfInterest[112902] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[112903] "expr temp" "temp"
          (112912 'move' _iterator[112903](112910 call _getIterator tmpIter[112811]))
          Defer
          {
            {
              (112928 call _freeIterator _iterator[112903])
            }
          }
          { scopeless type
            (112917 'move' _indexOfInterest[112902](112914 call iteratorIndex _iterator[112903]))
          }
          ForLoop[112904]
          {
            unknown tid[112921] "coforall index var" "index var" "insert auto destroy"
            (112923 'move' tid[112921] _indexOfInterest[112902])
            (112935 call _upEndCount _coforallCount[112894] 1)
            {
              {
                (112808 call preScanChunk tid[112921])
              }
              (112897 call _downEndCount _coforallCount[112894] nil[44])
              (112896 'coforall loop')
            }
            label _continueLabel[112907]
            _indexOfInterest[112902]
            _iterator[112903]
          }
          label _breakLabel[112908]
          Defer
          {
            {
              (112939 call _endCountFree _coforallCount[112894])
            }
          }
          (112944 call _waitEndCount _coforallCount[112894] 1)
        }
      }
    }
    function preScanChunk[112982](arg tid[112980]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      const current[112985] "const" resType[112639]
      (112988 'end of statement')
      const myop[112996] "const"(112995 call(112991 call . op[112635] c"clone"))
      (112999 'end of statement')
      {
        unknown _indexOfInterest[113035] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[113036] "expr temp" "temp"
        (113045 'move' _iterator[113036](113043 call _getIterator(113004 call rngs[112699] tid[112980])))
        Defer
        {
          {
            (113062 call _freeIterator _iterator[113036])
          }
        }
        { scopeless type
          (113051 'move' _indexOfInterest[113035](113048 call iteratorIndex _iterator[113036]))
        }
        ForLoop[113037]
        {
          unknown i[113055] "index var" "insert auto destroy"
          (113057 'move' i[113055] _indexOfInterest[113035])
          {
            unknown elem[113009] "ref var"(113008 call(382044 call . this[112649] c"dsiAccess") i[113055])
            (113012 'end of statement')
            (113020 call(113015 call . myop[112996] c"accumulate") elem[113009])
            (113032 call =(113025 call res[112644] i[113055])(113031 call(113027 call . myop[112996] c"generate")))
          }
          label _continueLabel[113040]
          _indexOfInterest[113035]
          _iterator[113036]
        }
        label _breakLabel[113041]
      }
      (113083 call =(113072 call state[112780] tid[112980])(113082 call res[112644](113078 call .(113077 call rngs[112699] tid[112980]) c"high")))
      (113088 call chpl__delete myop[112996])
    }
    if(113139 call _cond_test debugDRScan[112478])
    {
      (113114 call writeln "res = " res[112644])
      (113137 call writeln "state = " state[112780])
    }
    const metaop[113149] "const"(113148 call(113144 call . op[112635] c"clone"))
    (113152 'end of statement')
    unknown next[113158](113155 call . metaop[113149] c"identity") resType[112639]
    (113161 'end of statement')
    {
      unknown _indexOfInterest[113190] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[113191] "expr temp" "temp"
      (113200 'move' _iterator[113191](113198 call _getIterator(113164 call . rngs[112699] c"indices")))
      Defer
      {
        {
          (113217 call _freeIterator _iterator[113191])
        }
      }
      { scopeless type
        (113206 'move' _indexOfInterest[113190](113203 call iteratorIndex _iterator[113191]))
      }
      ForLoop[113192]
      {
        unknown i[113210] "index var" "insert auto destroy"
        (113212 'move' i[113210] _indexOfInterest[113190])
        {
          (113172 call <=>(113170 call state[112780] i[113210]) next[113158])
          (113188 call(113179 call . metaop[113149] c"accumulateOntoState") next[113158](113187 call state[112780] i[113210]))
        }
        label _continueLabel[113195]
        _indexOfInterest[113190]
        _iterator[113191]
      }
      label _breakLabel[113196]
    }
    (113226 call chpl__delete metaop[113149])
    if(113236 call _cond_test debugDRScan[112478])
    {
      (113234 call writeln "state = " state[112780])
    }
    (113248 return(113246 call _build_tuple numTasks[112685] rngs[112699] state[112780] next[113158]))
    (355098 'used modules list'(112655 'import' RangeChunk[266458]))
    (359003 'referenced modules list' RangeChunk[266458])
  }
  function DefaultRectangularArr[106840](?).chpl__postScan[113257](arg _mt[113270]:_MT[238], arg this[113267]:DefaultRectangularArr[106840](?) :
  DefaultRectangularArr[106840](?), arg op[113255]:_any[178](?), arg res[113259]:_any[178](?), arg numTasks[113261]:_any[178](?), arg rngs[113263]:_any[178](?), arg state[113265]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(113462 call _cond_test(113274 call == numTasks[113261] 1))
    {
      (113285 call postScanChunk(113281 call .(113278 call . rngs[113263] c"indices") c"low"))
    }
    {
      {
        unknown tmpIter[113299] "expr temp" "maybe ref" "no copy" "temp"
        (113302 'move' tmpIter[113299](113290 call . rngs[113263] c"indices"))
        unknown isRngDomArr[113442] "maybe param" "temp"
        (113457 'move' isRngDomArr[113442](113455 call ||(113444 call isBoundedRange tmpIter[113299])(113453 call ||(113447 call isDomain tmpIter[113299])(113450 call isArray tmpIter[113299]))))
        if isRngDomArr[113442]
        {
          const _coforallCount[113309] "const" "end count" "temp"
          (113378 'move' _coforallCount[113309](113375 call _endCountAlloc 1))
          unknown numTasks[113310] "temp"
          (113362 'move' numTasks[113310](113358 call . tmpIter[113299] c"size"))
          (113353 call _upEndCount _coforallCount[113309] 1 numTasks[113310])
          (113350 call chpl_resetTaskSpawn numTasks[113310])
          unknown _indexOfInterest[113317] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[113318] "expr temp" "temp"
          (113327 'move' _iterator[113318](113325 call _getIterator tmpIter[113299]))
          Defer
          {
            {
              (113343 call _freeIterator _iterator[113318])
            }
          }
          { scopeless type
            (113332 'move' _indexOfInterest[113317](113329 call iteratorIndex _iterator[113318]))
          }
          ForLoop[113319]
          {
            unknown tid[113336] "coforall index var" "index var" "insert auto destroy"
            (113338 'move' tid[113336] _indexOfInterest[113317])
            {
              {
                (113306 call postScanChunk tid[113336])
              }
              (113312 call _downEndCount _coforallCount[113309] nil[44])
              (113311 'coforall loop')
            }
            label _continueLabel[113322]
            _indexOfInterest[113317]
            _iterator[113318]
          }
          label _breakLabel[113323]
          Defer
          {
            {
              (113365 call _endCountFree _coforallCount[113309])
            }
          }
          (113370 call _waitEndCount _coforallCount[113309] 1 numTasks[113310])
        }
        {
          const _coforallCount[113382] "const" "end count" "temp"
          (113439 'move' _coforallCount[113382](113436 call _endCountAlloc 1))
          unknown _indexOfInterest[113390] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[113391] "expr temp" "temp"
          (113400 'move' _iterator[113391](113398 call _getIterator tmpIter[113299]))
          Defer
          {
            {
              (113416 call _freeIterator _iterator[113391])
            }
          }
          { scopeless type
            (113405 'move' _indexOfInterest[113390](113402 call iteratorIndex _iterator[113391]))
          }
          ForLoop[113392]
          {
            unknown tid[113409] "coforall index var" "index var" "insert auto destroy"
            (113411 'move' tid[113409] _indexOfInterest[113390])
            (113423 call _upEndCount _coforallCount[113382] 1)
            {
              {
                (113296 call postScanChunk tid[113409])
              }
              (113385 call _downEndCount _coforallCount[113382] nil[44])
              (113384 'coforall loop')
            }
            label _continueLabel[113395]
            _indexOfInterest[113390]
            _iterator[113391]
          }
          label _breakLabel[113396]
          Defer
          {
            {
              (113427 call _endCountFree _coforallCount[113382])
            }
          }
          (113432 call _waitEndCount _coforallCount[113382] 1)
        }
      }
    }
    function postScanChunk[113471](arg tid[113469]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      const myadjust[113477] "const"(113476 call state[113265] tid[113469])
      (113480 'end of statement')
      {
        unknown _indexOfInterest[113500] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[113501] "expr temp" "temp"
        (113510 'move' _iterator[113501](113508 call _getIterator(113486 call rngs[113263] tid[113469])))
        Defer
        {
          {
            (113527 call _freeIterator _iterator[113501])
          }
        }
        { scopeless type
          (113516 'move' _indexOfInterest[113500](113513 call iteratorIndex _iterator[113501]))
        }
        ForLoop[113502]
        {
          unknown i[113520] "index var" "insert auto destroy"
          (113522 'move' i[113520] _indexOfInterest[113500])
          {
            (113497 call(113488 call . op[113255] c"accumulateOntoState")(113494 call res[113259] i[113520]) myadjust[113477])
          }
          label _continueLabel[113505]
          _indexOfInterest[113500]
          _iterator[113501]
        }
        label _breakLabel[113506]
      }
    }
    if(113543 call _cond_test debugDRScan[112478])
    {
      (113541 call writeln "res = " res[113259])
    }
  }
  function canReuseStride[113554](arg blk[113552]:_any[178](?), arg curDim[113557] :
  int(64)[13], arg levels[113560]:_any[178](?), arg count[113562]:_any[178](?), arg stride[113564]:_any[178](?)) : _unknown[51] "private"
  {
    const lastCount[113573] "const"(113572 call count[113562](113569 call + levels[113560] 1))
    (113576 'end of statement')
    const curStride[113590] "const"(113587 IfExpr (113580 call < levels[113560] 1) then
    { scopeless
      1
    } else
    { scopeless
      (113586 call stride[113564] levels[113560])
    } )
    (113593 'end of statement')
    const lastIndex[113601] "const"(113599 call *(113596 call - lastCount[113573] 1) curStride[113590])
    (113604 'end of statement')
    const nextIndex[113609] "const"(113607 call + lastIndex[113601] curStride[113590])
    (113612 'end of statement')
    (113623 return(113621 call ==(113619 call blk[113552](113616 call - curDim[113557] 2)) nextIndex[113609]))
  }
  type _serialized_domain[94247](?) unknown rank[94227] "param" unknown idxType[94231] "type variable" unknown stridable[94234] "param" unknown dims[94238] unknown isDefaultRectangular[94242] "param"
  (355081 'used modules list'(93358 'use' DSIUtil[230888])(93361 'use' ChapelArray[113672])(93368 'use' ChapelDistribution[145415])(93370 'use' ChapelRange[64180])(93371 'use' SysBasic[223516])(93372 'use' SysError[264231])(93373 'use' SysCTypes[20940])(93378 'use' ChapelDebugPrint[188109])(93380 'use' ChapelLocks[187256])(93381 'use' OwnedObject[39583])(93382 'use' IO[230891])(93385 'use' DefaultSparse[161553])(93387 'use' DefaultAssociative[156235])(93389 'use' ExternalArray[188553]))
}