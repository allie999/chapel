AST dump for DefaultSparse after pass parse.
Module use list: 

{
  (161601 'use' ChapelStandard)
  (161605 'import' RangeChunk)
  (161608 'use' DSIUtil)
  { scopeless
    unknown debugDefaultSparse[161611] "config" "param" 0
    (161614 'end of statement')
  }
  type DefaultSparseDom[164378] unknown dist[161620](161619 'to unmanaged class from unknown' DefaultDist) unknown _nnz[161625] 0 unknown _indices[161640] "local field"(161638 call chpl__buildArrayRuntimeType(161636 call chpl__ensureDomainExpr nnzDom)(161634 call chpl__buildIndexType rank idxType)) function DefaultSparseDom[164378].linksDistribution[161646](arg _mt[164382]:_MT[238], arg this[164380]:DefaultSparseDom[164378]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (161649 return 0)
    }
  } function DefaultSparseDom[164378].dsiLinksDistribution[161656](arg _mt[164386]:_MT[238], arg this[164384]:DefaultSparseDom[164378]) : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (161659 return 0)
    }
  } function DefaultSparseDom[164378].init[161668](arg _mt[164390]:_MT[238], arg this[164388]:DefaultSparseDom[164378], param arg rank[161666]:_any[178](?), arg idxType[161670]:_any[178](?), arg dist[161674] :
  (161673 'to unmanaged class from unknown' DefaultDist), arg parentDom[161678] :
  _domain) : _unknown[51] "method" "primary method"
  {
    (161689 call(161682 call . super c"init") rank idxType parentDom)
    (161697 call =(161693 call . this c"dist") dist)
  } function DefaultSparseDom[164378].getNNZ[161704](arg _mt[164394]:_MT[238], arg this[164392]:DefaultSparseDom[164378]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (161708 return _nnz)
  }
  { scopeless type
    int[13]
  } function DefaultSparseDom[164378].dsiBuildArray[161718](arg _mt[164398]:_MT[238], arg this[164396]:DefaultSparseDom[164378], arg eltType[161716]:_any[178](?), param arg initElts[161721] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (161743 return(161726 'new'(_chpl_manager = unmanaged[220](?))(161742 call DefaultSparseArr(eltType = eltType)(rank = rank)(idxType = idxType)(dom =(161738 call _to_unmanaged this))(initElts = initElts))))
  } function DefaultSparseDom[164378].dsiIndsIterSafeForRemoving[161750](arg _mt[164402]:_MT[238], arg this[164400]:DefaultSparseDom[164378]) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[161769] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161770] "expr temp" "temp"
      (161779 'move' _iterator[161770](161777 call _getIterator(161790 call chpl_direct_range_iter 1 _nnz(161786 call - 1))))
      Defer
      {
        {
          (161806 call _freeIterator _iterator[161770])
        }
      }
      { scopeless type
        (161795 'move' _indexOfInterest[161769](161792 call iteratorIndex _iterator[161770]))
      }
      ForLoop[161771]
      {
        unknown i[161799] "index var" "insert auto destroy"
        (161801 'move' i[161799] _indexOfInterest[161769])
        {
          (161766 yield(161765 call _indices i))
        }
        label _continueLabel[161774]
        _indexOfInterest[161769]
        _iterator[161770]
      }
      label _breakLabel[161775]
    }
  } function DefaultSparseDom[164378].these[161818](arg _mt[164406]:_MT[238], arg this[164404]:DefaultSparseDom[164378]) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[161832] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161833] "expr temp" "temp"
      (161842 'move' _iterator[161833](161840 call _getIterator(161847 call chpl_direct_range_iter 1 _nnz 1)))
      Defer
      {
        {
          (161863 call _freeIterator _iterator[161833])
        }
      }
      { scopeless type
        (161852 'move' _indexOfInterest[161832](161849 call iteratorIndex _iterator[161833]))
      }
      ForLoop[161834]
      {
        unknown i[161856] "index var" "insert auto destroy"
        (161858 'move' i[161856] _indexOfInterest[161832])
        {
          (161829 yield(161828 call _indices i))
        }
        label _continueLabel[161837]
        _indexOfInterest[161832]
        _iterator[161833]
      }
      label _breakLabel[161838]
    }
  } function DefaultSparseDom[164378].these[161879](arg _mt[164410]:_MT[238], arg this[164408]:DefaultSparseDom[164378], param arg tag[161876] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      const numElems[161889] "const" _nnz
      (161892 'end of statement')
    }
    { scopeless
      const numChunks[161902] "const"(161900 call _cast(161899 'typeof' numElems)(161897 call _computeNumChunks numElems))
      (161905 'end of statement')
    }
    if(161965 call _cond_test debugDefaultSparse)
    {
      (161962 call writeln "DefaultSparseDom standalone: " numChunks " chunks, " numElems " elems")
    }
    if(162275 call _cond_test(161971 call <= numChunks 1))
    {
      {
        unknown _indexOfInterest[161985] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[161986] "expr temp" "temp"
        (161995 'move' _iterator[161986](161993 call _getIterator(162000 call chpl_direct_range_iter 1 numElems 1)))
        Defer
        {
          {
            (162016 call _freeIterator _iterator[161986])
          }
        }
        { scopeless type
          (162005 'move' _indexOfInterest[161985](162002 call iteratorIndex _iterator[161986]))
        }
        ForLoop[161987]
        {
          unknown i[162009] "index var" "insert auto destroy"
          (162011 'move' i[162009] _indexOfInterest[161985])
          {
            (161982 yield(161981 call _indices i))
          }
          label _continueLabel[161990]
          _indexOfInterest[161985]
          _iterator[161986]
        }
        label _breakLabel[161991]
      }
    }
    {
      {
        unknown tmpIter[162078] "expr temp" "maybe ref" "no copy" "temp"
        (162081 'move' tmpIter[162078](162035 call(162026 call . RangeChunk c"chunks")(162031 call chpl_build_bounded_range 1 numElems) numChunks))
        unknown isRngDomArr[162255] "maybe param" "temp"
        (162270 'move' isRngDomArr[162255](162268 call ||(162257 call isBoundedRange tmpIter[162078])(162266 call ||(162260 call isDomain tmpIter[162078])(162263 call isArray tmpIter[162078]))))
        if isRngDomArr[162255]
        {
          const _coforallCount[162122] "const" "end count" "temp"
          (162191 'move' _coforallCount[162122](162188 call _endCountAlloc 1))
          unknown numTasks[162123] "temp"
          (162175 'move' numTasks[162123](162171 call . tmpIter[162078] c"size"))
          (162166 call _upEndCount _coforallCount[162122] 1 numTasks[162123])
          (162163 call chpl_resetTaskSpawn numTasks[162123])
          unknown _indexOfInterest[162130] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162131] "expr temp" "temp"
          (162140 'move' _iterator[162131](162138 call _getIterator tmpIter[162078]))
          Defer
          {
            {
              (162156 call _freeIterator _iterator[162131])
            }
          }
          { scopeless type
            (162145 'move' _indexOfInterest[162130](162142 call iteratorIndex _iterator[162131]))
          }
          ForLoop[162132]
          {
            unknown chunk[162149] "coforall index var" "index var" "insert auto destroy"
            (162151 'move' chunk[162149] _indexOfInterest[162130])
            {
              {
                unknown _indexOfInterest[162084] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162086] "expr temp" "temp"
                (162088 'move' _iterator[162086](162091 call _getIterator chunk))
                Defer
                {
                  {
                    (162095 call _freeIterator _iterator[162086])
                  }
                }
                { scopeless type
                  (162099 'move' _indexOfInterest[162084](162102 call iteratorIndex _iterator[162086]))
                }
                ForLoop[162104]
                {
                  unknown i[162107] "index var" "insert auto destroy"
                  (162109 'move' i[162107] _indexOfInterest[162084])
                  { scopeless
                    (162113 yield(162115 call _indices i))
                  }
                  label _continueLabel[162117]
                  _indexOfInterest[162084]
                  _iterator[162086]
                }
                label _breakLabel[162119]
              }
              (162125 call _downEndCount _coforallCount[162122] nil[44])
              (162124 'coforall loop')
            }
            label _continueLabel[162135]
            _indexOfInterest[162130]
            _iterator[162131]
          }
          label _breakLabel[162136]
          Defer
          {
            {
              (162178 call _endCountFree _coforallCount[162122])
            }
          }
          (162183 call _waitEndCount _coforallCount[162122] 1 numTasks[162123])
        }
        {
          const _coforallCount[162195] "const" "end count" "temp"
          (162252 'move' _coforallCount[162195](162249 call _endCountAlloc 1))
          unknown _indexOfInterest[162203] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162204] "expr temp" "temp"
          (162213 'move' _iterator[162204](162211 call _getIterator tmpIter[162078]))
          Defer
          {
            {
              (162229 call _freeIterator _iterator[162204])
            }
          }
          { scopeless type
            (162218 'move' _indexOfInterest[162203](162215 call iteratorIndex _iterator[162204]))
          }
          ForLoop[162205]
          {
            unknown chunk[162222] "coforall index var" "index var" "insert auto destroy"
            (162224 'move' chunk[162222] _indexOfInterest[162203])
            (162236 call _upEndCount _coforallCount[162195] 1)
            {
              {
                unknown _indexOfInterest[162044] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162045] "expr temp" "temp"
                (162054 'move' _iterator[162045](162052 call _getIterator chunk))
                Defer
                {
                  {
                    (162070 call _freeIterator _iterator[162045])
                  }
                }
                { scopeless type
                  (162059 'move' _indexOfInterest[162044](162056 call iteratorIndex _iterator[162045]))
                }
                ForLoop[162046]
                {
                  unknown i[162063] "index var" "insert auto destroy"
                  (162065 'move' i[162063] _indexOfInterest[162044])
                  { scopeless
                    (162042 yield(162041 call _indices i))
                  }
                  label _continueLabel[162049]
                  _indexOfInterest[162044]
                  _iterator[162045]
                }
                label _breakLabel[162050]
              }
              (162198 call _downEndCount _coforallCount[162195] nil[44])
              (162197 'coforall loop')
            }
            label _continueLabel[162208]
            _indexOfInterest[162203]
            _iterator[162204]
          }
          label _breakLabel[162209]
          Defer
          {
            {
              (162240 call _endCountFree _coforallCount[162195])
            }
          }
          (162245 call _waitEndCount _coforallCount[162195] 1)
        }
      }
    }
  }
  where {
    (161886 call == tag(161883 call . iterKind c"standalone"))
  } function DefaultSparseDom[164378].these[162288](arg _mt[164414]:_MT[238], arg this[164412]:DefaultSparseDom[164378], param arg tag[162285] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      const numElems[162298] "const" _nnz
      (162301 'end of statement')
    }
    { scopeless
      const numChunks[162311] "const"(162309 call _cast(162308 'typeof' numElems)(162306 call _computeNumChunks numElems))
      (162314 'end of statement')
    }
    if(162341 call _cond_test debugDefaultSparse)
    {
      { scopeless
        (162339 call writeln "DefaultSparseDom leader: " numChunks " chunks, " numElems " elems")
      }
    }
    if(162555 call _cond_test(162348 call <= numChunks 1))
    {
      { scopeless
        (162356 yield(162354 call _build_tuple this 1 numElems))
      }
    }
    {
      unknown tmpIter[162384] "expr temp" "maybe ref" "no copy" "temp"
      (162387 'move' tmpIter[162384](162369 call(162360 call . RangeChunk c"chunks")(162365 call chpl_build_bounded_range 1 numElems) numChunks))
      unknown isRngDomArr[162536] "maybe param" "temp"
      (162551 'move' isRngDomArr[162536](162549 call ||(162538 call isBoundedRange tmpIter[162384])(162547 call ||(162541 call isDomain tmpIter[162384])(162544 call isArray tmpIter[162384]))))
      if isRngDomArr[162536]
      {
        const _coforallCount[162403] "const" "end count" "temp"
        (162472 'move' _coforallCount[162403](162469 call _endCountAlloc 1))
        unknown numTasks[162404] "temp"
        (162456 'move' numTasks[162404](162452 call . tmpIter[162384] c"size"))
        (162447 call _upEndCount _coforallCount[162403] 1 numTasks[162404])
        (162444 call chpl_resetTaskSpawn numTasks[162404])
        unknown _indexOfInterest[162411] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162412] "expr temp" "temp"
        (162421 'move' _iterator[162412](162419 call _getIterator tmpIter[162384]))
        Defer
        {
          {
            (162437 call _freeIterator _iterator[162412])
          }
        }
        { scopeless type
          (162426 'move' _indexOfInterest[162411](162423 call iteratorIndex _iterator[162412]))
        }
        ForLoop[162413]
        {
          unknown chunk[162430] "coforall index var" "index var" "insert auto destroy"
          (162432 'move' chunk[162430] _indexOfInterest[162411])
          {
            { scopeless
              (162390 yield(162392 call _build_tuple this(162395 call . chunk c"first")(162399 call . chunk c"last")))
            }
            (162406 call _downEndCount _coforallCount[162403] nil[44])
            (162405 'coforall loop')
          }
          label _continueLabel[162416]
          _indexOfInterest[162411]
          _iterator[162412]
        }
        label _breakLabel[162417]
        Defer
        {
          {
            (162459 call _endCountFree _coforallCount[162403])
          }
        }
        (162464 call _waitEndCount _coforallCount[162403] 1 numTasks[162404])
      }
      {
        const _coforallCount[162476] "const" "end count" "temp"
        (162533 'move' _coforallCount[162476](162530 call _endCountAlloc 1))
        unknown _indexOfInterest[162484] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162485] "expr temp" "temp"
        (162494 'move' _iterator[162485](162492 call _getIterator tmpIter[162384]))
        Defer
        {
          {
            (162510 call _freeIterator _iterator[162485])
          }
        }
        { scopeless type
          (162499 'move' _indexOfInterest[162484](162496 call iteratorIndex _iterator[162485]))
        }
        ForLoop[162486]
        {
          unknown chunk[162503] "coforall index var" "index var" "insert auto destroy"
          (162505 'move' chunk[162503] _indexOfInterest[162484])
          (162517 call _upEndCount _coforallCount[162476] 1)
          {
            { scopeless
              (162382 yield(162380 call _build_tuple this(162372 call . chunk c"first")(162377 call . chunk c"last")))
            }
            (162479 call _downEndCount _coforallCount[162476] nil[44])
            (162478 'coforall loop')
          }
          label _continueLabel[162489]
          _indexOfInterest[162484]
          _iterator[162485]
        }
        label _breakLabel[162490]
        Defer
        {
          {
            (162521 call _endCountFree _coforallCount[162476])
          }
        }
        (162526 call _waitEndCount _coforallCount[162476] 1)
      }
    }
  }
  where {
    (162295 call == tag(162292 call . iterKind c"leader"))
  } function DefaultSparseDom[164378].these[162569](arg _mt[164418]:_MT[238], arg this[164416]:DefaultSparseDom[164378], param arg tag[162566] :
  iterKind, arg followThis[162577] :
  (162575 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown tmp[162595] "temp" followThis
      (162605 call _check_tuple_var_decl tmp[162595] 3)
      unknown followThisDom[162587](162596 call tmp[162595] 0)
      unknown startIx[162589](162599 call tmp[162595] 1)
      unknown endIx[162591](162602 call tmp[162595] 2)
      (162610 'end of statement')
    }
    if(162639 call _cond_test(162614 call != followThisDom this))
    {
      { scopeless
        (162637 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays")
      }
    }
    if(162669 call _cond_test debugDefaultSparse)
    {
      { scopeless
        (162667 call writeln "DefaultSparseDom follower: " startIx ".." endIx)
      }
    }
    {
      unknown _indexOfInterest[162685] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162686] "expr temp" "temp"
      (162695 'move' _iterator[162686](162693 call _getIterator(162700 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (162716 call _freeIterator _iterator[162686])
        }
      }
      { scopeless type
        (162705 'move' _indexOfInterest[162685](162702 call iteratorIndex _iterator[162686]))
      }
      ForLoop[162687]
      {
        unknown i[162709] "index var" "insert auto destroy"
        (162711 'move' i[162709] _indexOfInterest[162685])
        { scopeless
          (162683 yield(162682 call _indices i))
        }
        label _continueLabel[162690]
        _indexOfInterest[162685]
        _iterator[162686]
      }
      label _breakLabel[162691]
    }
  }
  where {
    (162585 call == tag(162582 call . iterKind c"follower"))
  } function DefaultSparseDom[164378].these[162732](arg _mt[164422]:_MT[238], arg this[164420]:DefaultSparseDom[164378], param arg tag[162729] :
  iterKind, arg followThis[162734]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (162762 call compilerError "Sparse iterators can't yet be zippered with others")
    { scopeless
      unknown dummy[162769](162767 call * rank idxType)
      (162772 'end of statement')
    }
    (162774 yield dummy)
  }
  where {
    (162741 call == tag(162738 call . iterKind c"follower"))
  } function DefaultSparseDom[164378].find[162783](arg _mt[164426]:_MT[238], arg this[164424]:DefaultSparseDom[164378], arg ind[162781]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (162786 'use' Search)
    if(162833 call _cond_test(162806 call &&(162797 call &&(162791 call == rank 1)(162796 call isTuple ind))(162804 call ==(162800 call . ind c"size") 1)))
    {
      { scopeless
        (162820 return(162819 call binarySearch _indices(162814 call ind 0)(lo = 1)(hi = _nnz)))
      }
    }
    {
      { scopeless
        (162831 return(162830 call binarySearch _indices ind(lo = 1)(hi = _nnz)))
      }
    }
  } function DefaultSparseDom[164378].dsiMember[162845](arg _mt[164430]:_MT[238], arg this[164428]:DefaultSparseDom[164378], arg ind[162843]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[162856] "const" "temp"(162855 call find ind)
      (162863 call _check_tuple_var_decl tmp[162856] 2)
      const found[162847] "const"(162857 call tmp[162856] 0)
      const loc[162849] "const"(162860 call tmp[162856] 1)
      (162868 'end of statement')
    }
    (162871 return found)
  } function DefaultSparseDom[164378].dsiFirst[162877](arg _mt[164434]:_MT[238], arg this[164432]:DefaultSparseDom[164378]) : _unknown[51] "method" "primary method" "no parens"
  {
    (162889 return(162888 call _indices(162884 call .(162881 call . _indices c"_dom") c"first")))
  } function DefaultSparseDom[164378].dsiLast[162896](arg _mt[164438]:_MT[238], arg this[164436]:DefaultSparseDom[164378]) : _unknown[51] "method" "primary method" "no parens"
  {
    (162902 return(162901 call _indices _nnz))
  } function DefaultSparseDom[164378].add_help[162911](arg _mt[164442]:_MT[238], arg this[164440]:DefaultSparseDom[164378], arg ind[162909]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[162922] "const" "temp"(162921 call find ind)
      (162929 call _check_tuple_var_decl tmp[162922] 2)
      const found[162913] "const"(162923 call tmp[162922] 0)
      const insertPt[162915] "const"(162926 call tmp[162922] 1)
      (162934 'end of statement')
    }
    if(162940 call _cond_test found)
    {
      { scopeless
        (162938 return 0)
      }
    }
    if(162954 call _cond_test boundsChecking)
    {
      { scopeless
        (162952 call(162947 call . this c"boundsCheck") ind)
      }
    }
    (162961 call += _nnz 1)
    { scopeless
      const oldNNZDomSize[162968] "const"(162965 call . nnzDom c"size")
      (162971 'end of statement')
    }
    (162975 call _grow _nnz)
    {
      unknown _indexOfInterest[163005] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163006] "expr temp" "temp"
      (163015 'move' _iterator[163006](163013 call _getIterator(163032 call chpl_direct_range_iter insertPt(163029 call - _nnz 1)(163025 call - 1))))
      Defer
      {
        {
          (163048 call _freeIterator _iterator[163006])
        }
      }
      { scopeless type
        (163037 'move' _indexOfInterest[163005](163034 call iteratorIndex _iterator[163006]))
      }
      ForLoop[163007]
      {
        unknown i[163041] "index var" "insert auto destroy"
        (163043 'move' i[163041] _indexOfInterest[163005])
        {
          (163001 call =(162996 call _indices(162993 call + i 1))(163000 call _indices i))
        }
        label _continueLabel[163010]
        _indexOfInterest[163005]
        _iterator[163006]
      }
      label _breakLabel[163011]
    }
    (163060 call =(163058 call _indices insertPt) ind)
    {
      unknown _indexOfInterest[163092] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163093] "expr temp" "temp"
      (163102 'move' _iterator[163093](163100 call _getIterator _arrs))
      Defer
      {
        {
          (163118 call _freeIterator _iterator[163093])
        }
      }
      { scopeless type
        (163107 'move' _indexOfInterest[163092](163104 call iteratorIndex _iterator[163093]))
      }
      ForLoop[163094]
      {
        unknown a[163111] "index var" "insert auto destroy"
        (163113 'move' a[163111] _indexOfInterest[163092])
        {
          (163089 call(163068 call . a c"sparseShiftArray")(163076 call chpl_build_bounded_range insertPt(163074 call - _nnz 1))(163087 call chpl_build_bounded_range(163081 call + oldNNZDomSize 1)(163084 call . nnzDom c"size")))
        }
        label _continueLabel[163097]
        _indexOfInterest[163092]
        _iterator[163093]
      }
      label _breakLabel[163098]
    }
    (163126 return 1)
  } function DefaultSparseDom[164378].rem_help[163134](arg _mt[164446]:_MT[238], arg this[164444]:DefaultSparseDom[164378], arg ind[163132]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[163145] "const" "temp"(163144 call find ind)
      (163152 call _check_tuple_var_decl tmp[163145] 2)
      const found[163136] "const"(163146 call tmp[163145] 0)
      const insertPt[163138] "const"(163149 call tmp[163145] 1)
      (163157 'end of statement')
    }
    if(163184 call _cond_test(163160 call ! found))
    {
      { scopeless
        (163182 call halt "index not in domain: " ind)
      }
    }
    (163191 call -= _nnz 1)
    {
      unknown _indexOfInterest[163214] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163215] "expr temp" "temp"
      (163224 'move' _iterator[163215](163222 call _getIterator(163229 call chpl_direct_range_iter insertPt _nnz 1)))
      Defer
      {
        {
          (163245 call _freeIterator _iterator[163215])
        }
      }
      { scopeless type
        (163234 'move' _indexOfInterest[163214](163231 call iteratorIndex _iterator[163215]))
      }
      ForLoop[163216]
      {
        unknown i[163238] "index var" "insert auto destroy"
        (163240 'move' i[163238] _indexOfInterest[163214])
        {
          (163210 call =(163202 call _indices i)(163209 call _indices(163206 call + i 1)))
        }
        label _continueLabel[163219]
        _indexOfInterest[163214]
        _iterator[163215]
      }
      label _breakLabel[163220]
    }
    {
      unknown _indexOfInterest[163271] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[163272] "expr temp" "temp"
      (163281 'move' _iterator[163272](163279 call _getIterator _arrs))
      Defer
      {
        {
          (163297 call _freeIterator _iterator[163272])
        }
      }
      { scopeless type
        (163286 'move' _indexOfInterest[163271](163283 call iteratorIndex _iterator[163272]))
      }
      ForLoop[163273]
      {
        unknown a[163290] "index var" "insert auto destroy"
        (163292 'move' a[163290] _indexOfInterest[163271])
        {
          (163268 call(163257 call . a c"sparseShiftArrayBack")(163265 call chpl_build_bounded_range insertPt(163263 call - _nnz 1)))
        }
        label _continueLabel[163276]
        _indexOfInterest[163271]
        _iterator[163272]
      }
      label _breakLabel[163277]
    }
    (163305 return 1)
  } function DefaultSparseDom[164378].dsiAdd[163315](arg _mt[164450]:_MT[238], arg this[164448]:DefaultSparseDom[164378], arg ind[163312] :
  idxType) : _unknown[51] "method" "primary method"
  {
    (163325 return(163324 call add_help ind))
  }
  where {
    (163319 call == rank 1)
  } function DefaultSparseDom[164378].dsiRemove[163337](arg _mt[164454]:_MT[238], arg this[164452]:DefaultSparseDom[164378], arg ind[163334] :
  idxType) : _unknown[51] "method" "primary method"
  {
    (163347 return(163346 call rem_help ind))
  }
  where {
    (163341 call == rank 1)
  } function DefaultSparseDom[164378].dsiAdd[163362](arg _mt[164458]:_MT[238], arg this[164456]:DefaultSparseDom[164378], arg ind[163359] :
  (163357 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    if(163385 call _cond_test(163366 call == rank 1))
    {
      (163375 return(163374 call add_help(163372 call ind 0)))
    }
    {
      (163382 return(163381 call add_help ind))
    }
  } function DefaultSparseDom[164378].dsiRemove[163401](arg _mt[164462]:_MT[238], arg this[164460]:DefaultSparseDom[164378], arg ind[163398] :
  (163396 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    if(163424 call _cond_test(163405 call == rank 1))
    {
      (163414 return(163413 call rem_help(163411 call ind 0)))
    }
    {
      (163421 return(163420 call rem_help ind))
    }
  } function DefaultSparseDom[164378].bulkAdd_help[163446](arg _mt[164466]:_MT[238], arg this[164464]:DefaultSparseDom[164378], arg inds[163443] :
  (163441 call chpl__buildArrayRuntimeType unknown indsDom[163433](163439 call chpl__buildIndexType rank idxType)), arg dataSorted[163449] =
  0, arg isUnique[163453] =
  0, arg addOn[163457] =
  nilLocale) : _unknown[51] "method" "primary method" "method overrides"
  {
    (163461 'import' Sort)
    if(163504 call _cond_test(163466 call != addOn nilLocale))
    {
      if(163499 call _cond_test(163473 call != addOn(163471 call chpl_localeID_to_locale(163470 '_wide_get_locale' this))))
      {
        (163496 call halt "Bulk index addition is only possible on the locale where the\n              sparse domain is created")
      }
    }
    (163519 call bulkAdd_prepareInds inds dataSorted isUnique(163516 call . Sort c"defaultComparator"))
    if(163684 call _cond_test(163523 call == _nnz 0))
    {
      { scopeless
        const dupCount[163534] "const"(163531 IfExpr  isUnique then
        { scopeless
          0
        } else
        { scopeless
          (163530 call _countDuplicates inds)
        } )
        (163537 'end of statement')
      }
      (163547 call += _nnz(163545 call -(163541 call . inds c"size") dupCount))
      (163552 call _bulkGrow)
      { scopeless
        unknown indIdx[163561](163558 call .(163555 call . _indices c"_dom") c"low")
        (163564 'end of statement')
      }
      { scopeless
        unknown prevIdx[163572](163570 call -(163566 call . parentDom c"low") 1)
        (163575 'end of statement')
      }
      if(163680 call _cond_test isUnique)
      {
        (163596 call =(163594 call _indices(163591 call #(163585 call chpl_build_low_bounded_range(163582 call .(163579 call . _indices c"_dom") c"low"))(163588 call . inds c"size"))) inds)
        (163604 return(163601 call . inds c"size"))
      }
      {
        {
          unknown _indexOfInterest[163640] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[163641] "expr temp" "temp"
          (163650 'move' _iterator[163641](163648 call _getIterator inds))
          Defer
          {
            {
              (163666 call _freeIterator _iterator[163641])
            }
          }
          { scopeless type
            (163655 'move' _indexOfInterest[163640](163652 call iteratorIndex _iterator[163641]))
          }
          ForLoop[163642]
          {
            unknown i[163659] "index var" "insert auto destroy"
            (163661 'move' i[163659] _indexOfInterest[163640])
            {
              if(163620 call _cond_test(163610 call == i prevIdx))
              {
                { scopeless
                  continue nil[44]
                }
              }
              {
                { scopeless
                  (163617 call = prevIdx i)
                }
              }
              (163632 call =(163630 call _indices indIdx) i)
              (163637 call += indIdx 1)
            }
            label _continueLabel[163645]
            _indexOfInterest[163640]
            _iterator[163641]
          }
          label _breakLabel[163646]
        }
        (163678 return(163676 call - indIdx 1))
      }
    }
    { scopeless
      const tmp[163699] "const" "temp"(163698 call __getActualInsertPts this inds isUnique)
      (163706 call _check_tuple_var_decl tmp[163699] 2)
      const actualInsertPts[163688] "const"(163700 call tmp[163699] 0)
      const actualAddCnt[163690] "const"(163703 call tmp[163699] 1)
      (163711 'end of statement')
    }
    { scopeless
      const oldnnz[163713] "const" _nnz
      (163716 'end of statement')
    }
    (163719 call += _nnz actualAddCnt)
    (163724 call _bulkGrow)
    { scopeless
      unknown newIndIdx[163730](163727 call . indsDom c"high")
      (163733 'end of statement')
    }
    { scopeless
      unknown oldIndIdx[163735] oldnnz
      (163738 'end of statement')
    }
    { scopeless
      unknown newLoc[163743](163742 call actualInsertPts newIndIdx)
      (163746 'end of statement')
    }
    {
      unknown tmp[163785] "temp"
      (163813 'move' tmp[163785](163806 call _cond_test(163808 call == newLoc(163811 call - 1))))
      WhileDo[163790]
      {
        {
          (163755 call -= newIndIdx 1)
          if(163772 call _cond_test(163767 call == newIndIdx(163765 call -(163761 call . indsDom c"low") 1)))
          {
            { scopeless
              break nil[44]
            }
          }
          (163782 call = newLoc(163781 call actualInsertPts newIndIdx))
        }
        label _continueLabel[163788]
        (163801 'move' tmp[163785](163794 call _cond_test(163796 call == newLoc(163799 call - 1))))
        tmp[163785]
      }
      label _breakLabel[163789]
    }
    { scopeless
      unknown arrShiftMap[163829](163827 call chpl__buildArrayRuntimeType(163825 call chpl__ensureDomainExpr(163821 call chpl__buildDomainExpr(163818 call chpl_build_bounded_range 1 oldnnz))) int[13])
      (163832 'end of statement')
    }
    {
      unknown _indexOfInterest[164037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[164038] "expr temp" "temp"
      (164047 'move' _iterator[164038](164045 call _getIterator(164058 call chpl_direct_range_iter 1 _nnz(164054 call - 1))))
      Defer
      {
        {
          (164074 call _freeIterator _iterator[164038])
        }
      }
      { scopeless type
        (164063 'move' _indexOfInterest[164037](164060 call iteratorIndex _iterator[164038]))
      }
      ForLoop[164039]
      {
        unknown i[164067] "index var" "insert auto destroy"
        (164069 'move' i[164067] _indexOfInterest[164037])
        {
          if(164031 call _cond_test(163851 call &&(163845 call >= oldIndIdx 1)(163849 call > i newLoc)))
          {
            (163861 call =(163856 call _indices i)(163860 call _indices oldIndIdx))
            (163870 call =(163868 call arrShiftMap oldIndIdx) i)
            (163875 call -= oldIndIdx 1)
          }
          {
            { scopeless
              if(164026 call _cond_test(163889 call &&(163883 call >= newIndIdx(163880 call . indsDom c"low"))(163887 call == i newLoc)))
              {
                (163899 call =(163894 call _indices i)(163898 call inds newIndIdx))
                (163905 call -= newIndIdx 1)
                if(163930 call _cond_test(163913 call >= newIndIdx(163910 call . indsDom c"low")))
                {
                  { scopeless
                    (163920 call = newLoc(163919 call actualInsertPts newIndIdx))
                  }
                }
                {
                  { scopeless
                    (163927 call = newLoc(163925 call - 2))
                  }
                }
                {
                  unknown tmp[163974] "temp"
                  (164002 'move' tmp[163974](163995 call _cond_test(163997 call == newLoc(164000 call - 1))))
                  WhileDo[163979]
                  {
                    {
                      (163944 call -= newIndIdx 1)
                      if(163961 call _cond_test(163956 call == newIndIdx(163954 call -(163950 call . indsDom c"low") 1)))
                      {
                        { scopeless
                          break nil[44]
                        }
                      }
                      (163971 call = newLoc(163970 call actualInsertPts newIndIdx))
                    }
                    label _continueLabel[163977]
                    (163990 'move' tmp[163974](163983 call _cond_test(163985 call == newLoc(163988 call - 1))))
                    tmp[163974]
                  }
                  label _breakLabel[163978]
                }
              }
              {
                { scopeless
                  (164024 call halt "Something went wrong")
                }
              }
            }
          }
        }
        label _continueLabel[164042]
        _indexOfInterest[164037]
        _iterator[164038]
      }
      label _breakLabel[164043]
    }
    {
      unknown _indexOfInterest[164094] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[164095] "expr temp" "temp"
      (164104 'move' _iterator[164095](164102 call _getIterator _arrs))
      Defer
      {
        {
          (164120 call _freeIterator _iterator[164095])
        }
      }
      { scopeless type
        (164109 'move' _indexOfInterest[164094](164106 call iteratorIndex _iterator[164095]))
      }
      ForLoop[164096]
      {
        unknown a[164113] "index var" "insert auto destroy"
        (164115 'move' a[164113] _indexOfInterest[164094])
        { scopeless
          (164092 call(164086 call . a c"sparseBulkShiftArray") arrShiftMap oldnnz)
        }
        label _continueLabel[164099]
        _indexOfInterest[164094]
        _iterator[164095]
      }
      label _breakLabel[164100]
    }
    (164128 return actualAddCnt)
  } function DefaultSparseDom[164378].dsiMyDist[164134](arg _mt[164470]:_MT[238], arg this[164468]:DefaultSparseDom[164378]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (164139 return dist)
  }
  { scopeless type
    (164137 'to unmanaged class from unknown' BaseDist)
  } function DefaultSparseDom[164378].dsiClear[164147](arg _mt[164474]:_MT[238], arg this[164472]:DefaultSparseDom[164378]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (164151 call = _nnz 0)
  } function DefaultSparseDom[164378].dimIter[164161](arg _mt[164478]:_MT[238], arg this[164476]:DefaultSparseDom[164378], param arg d[164159]:_any[178](?), arg ind[164163]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(164194 call _cond_test(164170 call != d(164168 call - rank 1)))
    {
      (164191 call compilerError "dimIter() not supported on sparse domains for dimensions other than the last")
    }
    (164218 call halt "dimIter() not yet implemented for sparse domains")
    (164224 yield(164223 call _indices 0))
  } function DefaultSparseDom[164378].dsiAssignDomain[164234](arg _mt[164482]:_MT[238], arg this[164480]:DefaultSparseDom[164378], arg rhs[164231] :
  _domain, arg lhsPrivate[164237] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    if(164306 call _cond_test(164259 call &&(164250 call ==(164247 call _to_borrowed(164245 'typeof'(164242 call . rhs c"_instance")))(164249 'typeof' this))(164257 call ==(164253 call . this c"dsiNumIndices") 0)))
    {
      (164271 call =(164264 call . this c"_nnz")(164268 call . rhs c"_nnz"))
      (164283 call =(164276 call . this c"nnzDom")(164280 call . rhs c"nnzDom"))
      (164296 call =(164289 call . this c"_indices")(164293 call . rhs c"_indices"))
    }
    {
      (164303 call chpl_assignDomainWithIndsIterSafeForRemoving this rhs)
    }
  } function DefaultSparseDom[164378].dsiHasSingleLocalSubdomain[164315](arg _mt[164486]:_MT[238], arg this[164484]:DefaultSparseDom[164378]) param : _unknown[51] "method" "primary method"
  {
    { scopeless
      (164318 return 1)
    }
  } function DefaultSparseDom[164378].dsiLocalSubdomain[164329](arg _mt[164490]:_MT[238], arg this[164488]:DefaultSparseDom[164378], arg loc[164326] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(164370 call _cond_test(164336 call ==(164333 call chpl_localeID_to_locale(164332 '_wide_get_locale' this)) loc))
    {
      (164345 return(164344 call _getDomain(164342 call _to_unmanaged this)))
    }
    {
      { scopeless
        const copy[164358] "const"(164350 'new'(_chpl_manager = unmanaged[220](?))(164357 call DefaultSparseDom rank idxType dist parentDom))
        (164361 'end of statement')
      }
      (164368 return(164363 'new'(164367 call _domain copy)))
    }
  } BaseSparseDomImpl
  type DefaultSparseArr[165840] function DefaultSparseArr[165840].init[164500](arg _mt[165844]:_MT[238], arg this[165842]:DefaultSparseArr[165840], arg eltType[164498]:_any[178](?), param arg rank[164503] :
  int[13], arg idxType[164506]:_any[178](?), arg dom[164508]:_any[178](?), param arg initElts[164511] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (164524 call(164515 call . super c"init") eltType rank idxType dom initElts)
  } function DefaultSparseArr[165840].dsiAccess[164535](arg _mt[165848]:_MT[238], arg this[165846]:DefaultSparseArr[165840], arg ind[164532] :
  idxType) ref : _unknown[51] "method" "primary method"
  {
    if(164643 call _cond_test boundsChecking)
    {
      { scopeless
        if(164639 call _cond_test(164552 call !(164551 call(164546 call .(164543 call . dom c"parentDom") c"contains") ind)))
        {
          if(164628 call _cond_test debugDefaultSparse)
          {
            (164578 call writeln "On locale "(164575 call . here c"id"))
            (164601 call writeln "In dsiAccess, got index " ind)
            (164626 call writeln "dom.parentDom = "(164623 call . dom c"parentDom"))
          }
          (164637 call halt "array index out of bounds: " ind)
        }
      }
    }
    { scopeless
      const tmp[164661] "const" "temp"(164660 call(164655 call . dom c"find") ind)
      (164668 call _check_tuple_var_decl tmp[164661] 2)
      const found[164649] "const"(164662 call tmp[164661] 0)
      const loc[164651] "const"(164665 call tmp[164661] 1)
      (164673 'end of statement')
    }
    if(164703 call _cond_test found)
    {
      { scopeless
        (164679 return(164678 call data loc))
      }
    }
    {
      { scopeless
        (164701 call halt "attempting to assign a 'zero' value in a sparse array: " ind)
      }
    }
  }
  where {
    (164539 call == rank 1)
  } function DefaultSparseArr[165840].dsiAccess[164718](arg _mt[165852]:_MT[238], arg this[165850]:DefaultSparseArr[165840], arg ind[164715] :
  idxType) const ref : _unknown[51] "method" "primary method"
  {
    if(164748 call _cond_test boundsChecking)
    {
      { scopeless
        if(164743 call _cond_test(164735 call !(164734 call(164729 call .(164726 call . dom c"parentDom") c"contains") ind)))
        {
          { scopeless
            (164741 call halt "array index out of bounds: " ind)
          }
        }
      }
    }
    { scopeless
      const tmp[164766] "const" "temp"(164765 call(164760 call . dom c"find") ind)
      (164773 call _check_tuple_var_decl tmp[164766] 2)
      const found[164754] "const"(164767 call tmp[164766] 0)
      const loc[164756] "const"(164770 call tmp[164766] 1)
      (164778 'end of statement')
    }
    if(164789 call _cond_test found)
    {
      { scopeless
        (164784 return(164783 call data loc))
      }
    }
    {
      { scopeless
        (164787 return irv)
      }
    }
  }
  where {
    (164722 call == rank 1)
  } function DefaultSparseArr[165840].dsiAccess[164807](arg _mt[165856]:_MT[238], arg this[165854]:DefaultSparseArr[165840], arg ind[164804] :
  (164802 call * rank idxType)) ref : _unknown[51] "method" "primary method"
  {
    if(164833 call _cond_test boundsChecking)
    {
      { scopeless
        if(164828 call _cond_test(164820 call !(164819 call(164814 call .(164811 call . dom c"parentDom") c"contains") ind)))
        {
          { scopeless
            (164826 call halt "array index out of bounds: " ind)
          }
        }
      }
    }
    { scopeless
      const tmp[164851] "const" "temp"(164850 call(164845 call . dom c"find") ind)
      (164858 call _check_tuple_var_decl tmp[164851] 2)
      const found[164839] "const"(164852 call tmp[164851] 0)
      const loc[164841] "const"(164855 call tmp[164851] 1)
      (164863 'end of statement')
    }
    if(164877 call _cond_test found)
    {
      { scopeless
        (164869 return(164868 call data loc))
      }
    }
    {
      { scopeless
        (164875 call halt "attempting to assign a 'zero' value in a sparse array: " ind)
      }
    }
  } function DefaultSparseArr[165840].dsiAccess[164894](arg _mt[165860]:_MT[238], arg this[165858]:DefaultSparseArr[165840], arg ind[164891] :
  (164889 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    if(164924 call _cond_test boundsChecking)
    {
      { scopeless
        if(164919 call _cond_test(164911 call !(164910 call(164905 call .(164902 call . dom c"parentDom") c"contains") ind)))
        {
          { scopeless
            (164917 call halt "array index out of bounds: " ind)
          }
        }
      }
    }
    { scopeless
      const tmp[164942] "const" "temp"(164941 call(164936 call . dom c"find") ind)
      (164949 call _check_tuple_var_decl tmp[164942] 2)
      const found[164930] "const"(164943 call tmp[164942] 0)
      const loc[164932] "const"(164946 call tmp[164942] 1)
      (164954 'end of statement')
    }
    if(164965 call _cond_test found)
    {
      { scopeless
        (164960 return(164959 call data loc))
      }
    }
    {
      { scopeless
        (164963 return irv)
      }
    }
  }
  where {
    (164899 call shouldReturnRvalueByValue eltType)
  } function DefaultSparseArr[165840].dsiAccess[164983](arg _mt[165864]:_MT[238], arg this[165862]:DefaultSparseArr[165840], arg ind[164980] :
  (164978 call * rank idxType)) const ref : _unknown[51] "method" "primary method"
  {
    if(165013 call _cond_test boundsChecking)
    {
      { scopeless
        if(165008 call _cond_test(165000 call !(164999 call(164994 call .(164991 call . dom c"parentDom") c"contains") ind)))
        {
          { scopeless
            (165006 call halt "array index out of bounds: " ind)
          }
        }
      }
    }
    { scopeless
      const tmp[165031] "const" "temp"(165030 call(165025 call . dom c"find") ind)
      (165038 call _check_tuple_var_decl tmp[165031] 2)
      const found[165019] "const"(165032 call tmp[165031] 0)
      const loc[165021] "const"(165035 call tmp[165031] 1)
      (165043 'end of statement')
    }
    if(165054 call _cond_test found)
    {
      { scopeless
        (165049 return(165048 call data loc))
      }
    }
    {
      { scopeless
        (165052 return irv)
      }
    }
  }
  where {
    (164988 call shouldReturnRvalueByConstRef eltType)
  } function DefaultSparseArr[165840].these[165065](arg _mt[165868]:_MT[238], arg this[165866]:DefaultSparseArr[165840]) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[165081] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165082] "expr temp" "temp"
      (165091 'move' _iterator[165082](165089 call _getIterator(165099 call chpl_direct_range_iter 1(165096 call . dom c"_nnz") 1)))
      Defer
      {
        {
          (165115 call _freeIterator _iterator[165082])
        }
      }
      { scopeless type
        (165104 'move' _indexOfInterest[165081](165101 call iteratorIndex _iterator[165082]))
      }
      ForLoop[165083]
      {
        unknown i[165108] "index var" "insert auto destroy"
        (165110 'move' i[165108] _indexOfInterest[165081])
        { scopeless
          (165079 yield(165078 call data i))
        }
        label _continueLabel[165086]
        _indexOfInterest[165081]
        _iterator[165082]
      }
      label _breakLabel[165087]
    }
  } function DefaultSparseArr[165840].these[165131](arg _mt[165872]:_MT[238], arg this[165870]:DefaultSparseArr[165840], param arg tag[165128] :
  iterKind) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      const numElems[165144] "const"(165141 call . dom c"_nnz")
      (165147 'end of statement')
    }
    { scopeless
      const numChunks[165157] "const"(165155 call _cast(165154 'typeof' numElems)(165152 call _computeNumChunks numElems))
      (165160 'end of statement')
    }
    if(165188 call _cond_test debugDefaultSparse)
    {
      (165185 call writeln "DefaultSparseArr standalone: " numChunks " chunks, " numElems " elems")
    }
    if(165498 call _cond_test(165194 call <= numChunks 1))
    {
      {
        unknown _indexOfInterest[165208] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[165209] "expr temp" "temp"
        (165218 'move' _iterator[165209](165216 call _getIterator(165223 call chpl_direct_range_iter 1 numElems 1)))
        Defer
        {
          {
            (165239 call _freeIterator _iterator[165209])
          }
        }
        { scopeless type
          (165228 'move' _indexOfInterest[165208](165225 call iteratorIndex _iterator[165209]))
        }
        ForLoop[165210]
        {
          unknown i[165232] "index var" "insert auto destroy"
          (165234 'move' i[165232] _indexOfInterest[165208])
          {
            (165205 yield(165204 call data i))
          }
          label _continueLabel[165213]
          _indexOfInterest[165208]
          _iterator[165209]
        }
        label _breakLabel[165214]
      }
    }
    {
      {
        unknown tmpIter[165301] "expr temp" "maybe ref" "no copy" "temp"
        (165304 'move' tmpIter[165301](165258 call(165249 call . RangeChunk c"chunks")(165254 call chpl_build_bounded_range 1 numElems) numChunks))
        unknown isRngDomArr[165478] "maybe param" "temp"
        (165493 'move' isRngDomArr[165478](165491 call ||(165480 call isBoundedRange tmpIter[165301])(165489 call ||(165483 call isDomain tmpIter[165301])(165486 call isArray tmpIter[165301]))))
        if isRngDomArr[165478]
        {
          const _coforallCount[165345] "const" "end count" "temp"
          (165414 'move' _coforallCount[165345](165411 call _endCountAlloc 1))
          unknown numTasks[165346] "temp"
          (165398 'move' numTasks[165346](165394 call . tmpIter[165301] c"size"))
          (165389 call _upEndCount _coforallCount[165345] 1 numTasks[165346])
          (165386 call chpl_resetTaskSpawn numTasks[165346])
          unknown _indexOfInterest[165353] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165354] "expr temp" "temp"
          (165363 'move' _iterator[165354](165361 call _getIterator tmpIter[165301]))
          Defer
          {
            {
              (165379 call _freeIterator _iterator[165354])
            }
          }
          { scopeless type
            (165368 'move' _indexOfInterest[165353](165365 call iteratorIndex _iterator[165354]))
          }
          ForLoop[165355]
          {
            unknown chunk[165372] "coforall index var" "index var" "insert auto destroy"
            (165374 'move' chunk[165372] _indexOfInterest[165353])
            {
              {
                unknown _indexOfInterest[165307] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165309] "expr temp" "temp"
                (165311 'move' _iterator[165309](165314 call _getIterator chunk))
                Defer
                {
                  {
                    (165318 call _freeIterator _iterator[165309])
                  }
                }
                { scopeless type
                  (165322 'move' _indexOfInterest[165307](165325 call iteratorIndex _iterator[165309]))
                }
                ForLoop[165327]
                {
                  unknown i[165330] "index var" "insert auto destroy"
                  (165332 'move' i[165330] _indexOfInterest[165307])
                  { scopeless
                    (165336 yield(165338 call data i))
                  }
                  label _continueLabel[165340]
                  _indexOfInterest[165307]
                  _iterator[165309]
                }
                label _breakLabel[165342]
              }
              (165348 call _downEndCount _coforallCount[165345] nil[44])
              (165347 'coforall loop')
            }
            label _continueLabel[165358]
            _indexOfInterest[165353]
            _iterator[165354]
          }
          label _breakLabel[165359]
          Defer
          {
            {
              (165401 call _endCountFree _coforallCount[165345])
            }
          }
          (165406 call _waitEndCount _coforallCount[165345] 1 numTasks[165346])
        }
        {
          const _coforallCount[165418] "const" "end count" "temp"
          (165475 'move' _coforallCount[165418](165472 call _endCountAlloc 1))
          unknown _indexOfInterest[165426] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165427] "expr temp" "temp"
          (165436 'move' _iterator[165427](165434 call _getIterator tmpIter[165301]))
          Defer
          {
            {
              (165452 call _freeIterator _iterator[165427])
            }
          }
          { scopeless type
            (165441 'move' _indexOfInterest[165426](165438 call iteratorIndex _iterator[165427]))
          }
          ForLoop[165428]
          {
            unknown chunk[165445] "coforall index var" "index var" "insert auto destroy"
            (165447 'move' chunk[165445] _indexOfInterest[165426])
            (165459 call _upEndCount _coforallCount[165418] 1)
            {
              {
                unknown _indexOfInterest[165267] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[165268] "expr temp" "temp"
                (165277 'move' _iterator[165268](165275 call _getIterator chunk))
                Defer
                {
                  {
                    (165293 call _freeIterator _iterator[165268])
                  }
                }
                { scopeless type
                  (165282 'move' _indexOfInterest[165267](165279 call iteratorIndex _iterator[165268]))
                }
                ForLoop[165269]
                {
                  unknown i[165286] "index var" "insert auto destroy"
                  (165288 'move' i[165286] _indexOfInterest[165267])
                  { scopeless
                    (165265 yield(165264 call data i))
                  }
                  label _continueLabel[165272]
                  _indexOfInterest[165267]
                  _iterator[165268]
                }
                label _breakLabel[165273]
              }
              (165421 call _downEndCount _coforallCount[165418] nil[44])
              (165420 'coforall loop')
            }
            label _continueLabel[165431]
            _indexOfInterest[165426]
            _iterator[165427]
          }
          label _breakLabel[165432]
          Defer
          {
            {
              (165463 call _endCountFree _coforallCount[165418])
            }
          }
          (165468 call _waitEndCount _coforallCount[165418] 1)
        }
      }
    }
  }
  where {
    (165138 call == tag(165135 call . iterKind c"standalone"))
  } function DefaultSparseArr[165840].these[165511](arg _mt[165876]:_MT[238], arg this[165874]:DefaultSparseArr[165840], param arg tag[165508] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[165531] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165532] "expr temp" "temp"
      (165541 'move' _iterator[165532](165539 call _getIterator(165527 call(165522 call . dom c"these") tag)))
      Defer
      {
        {
          (165558 call _freeIterator _iterator[165532])
        }
      }
      { scopeless type
        (165547 'move' _indexOfInterest[165531](165544 call iteratorIndex _iterator[165532]))
      }
      ForLoop[165533]
      {
        unknown followThis[165551] "index var" "insert auto destroy"
        (165553 'move' followThis[165551] _indexOfInterest[165531])
        { scopeless
          (165529 yield followThis)
        }
        label _continueLabel[165536]
        _indexOfInterest[165531]
        _iterator[165532]
      }
      label _breakLabel[165537]
    }
  }
  where {
    (165518 call == tag(165515 call . iterKind c"leader"))
  } function DefaultSparseArr[165840].these[165575](arg _mt[165880]:_MT[238], arg this[165878]:DefaultSparseArr[165840], param arg tag[165572] :
  iterKind, arg followThis[165583] :
  (165581 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown tmp[165601] "temp" followThis
      (165611 call _check_tuple_var_decl tmp[165601] 3)
      unknown followThisDom[165593](165602 call tmp[165601] 0)
      unknown startIx[165595](165605 call tmp[165601] 1)
      unknown endIx[165597](165608 call tmp[165601] 2)
      (165616 'end of statement')
    }
    if(165646 call _cond_test(165623 call != followThisDom(165620 call . this c"dom")))
    {
      { scopeless
        (165644 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays")
      }
    }
    if(165676 call _cond_test debugDefaultSparse)
    {
      { scopeless
        (165674 call writeln "DefaultSparseArr follower: " startIx ".." endIx)
      }
    }
    {
      unknown _indexOfInterest[165692] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[165693] "expr temp" "temp"
      (165702 'move' _iterator[165693](165700 call _getIterator(165707 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (165723 call _freeIterator _iterator[165693])
        }
      }
      { scopeless type
        (165712 'move' _indexOfInterest[165692](165709 call iteratorIndex _iterator[165693]))
      }
      ForLoop[165694]
      {
        unknown i[165716] "index var" "insert auto destroy"
        (165718 'move' i[165716] _indexOfInterest[165692])
        { scopeless
          (165690 yield(165689 call data i))
        }
        label _continueLabel[165697]
        _indexOfInterest[165692]
        _iterator[165693]
      }
      label _breakLabel[165698]
    }
  }
  where {
    (165591 call == tag(165588 call . iterKind c"follower"))
  } function DefaultSparseArr[165840].these[165739](arg _mt[165884]:_MT[238], arg this[165882]:DefaultSparseArr[165840], param arg tag[165736] :
  iterKind, arg followThis[165741]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (165753 call compilerError "Sparse iterators can't yet be zippered with others")
    (165757 yield 0)
  }
  where {
    (165748 call == tag(165745 call . iterKind c"follower"))
  } function DefaultSparseArr[165840].dsiTargetLocales[165764](arg _mt[165888]:_MT[238], arg this[165886]:DefaultSparseArr[165840]) : _unknown[51] "method" "primary method"
  {
    (165785 call compilerError "targetLocales is unsupported by sparse domains")
  } function DefaultSparseArr[165840].dsiHasSingleLocalSubdomain[165792](arg _mt[165892]:_MT[238], arg this[165890]:DefaultSparseArr[165840]) param : _unknown[51] "method" "primary method"
  {
    { scopeless
      (165795 return 1)
    }
  } function DefaultSparseArr[165840].dsiLocalSubdomain[165806](arg _mt[165896]:_MT[238], arg this[165894]:DefaultSparseArr[165840], arg loc[165803] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(165832 call _cond_test(165813 call ==(165810 call chpl_localeID_to_locale(165809 '_wide_get_locale' this)) loc))
    {
      (165819 return(165818 call _getDomain dom))
    }
    {
      (165829 return(165828 call(165823 call . dom c"dsiLocalSubdomain") loc))
    }
  } BaseSparseArrImpl
  function _unknown[51].dsiSerialWrite[165904](arg _mt[165913]:_MT[238], arg this[165910] :
  DefaultSparseDom, arg f[165902]:_any[178](?), arg printBrackets[165907] =
  1) : _unknown[51] throws "method"
  {
    if(166182 call _cond_test(165917 call == rank 1))
    {
      if(165925 call _cond_test printBrackets)
      {
        { scopeless
          (165922 call <~> f "{")
        }
      }
      if(165999 call _cond_test(165933 call >= _nnz 1))
      {
        (165940 call <~> f(165939 call _indices 1))
        {
          unknown _indexOfInterest[165961] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[165962] "expr temp" "temp"
          (165971 'move' _iterator[165962](165969 call _getIterator(165976 call chpl_direct_range_iter 2 _nnz 1)))
          Defer
          {
            {
              (165992 call _freeIterator _iterator[165962])
            }
          }
          { scopeless type
            (165981 'move' _indexOfInterest[165961](165978 call iteratorIndex _iterator[165962]))
          }
          ForLoop[165963]
          {
            unknown i[165985] "index var" "insert auto destroy"
            (165987 'move' i[165985] _indexOfInterest[165961])
            {
              (165957 call <~>(165951 call <~> f " ")(165956 call _indices i))
            }
            label _continueLabel[165966]
            _indexOfInterest[165961]
            _iterator[165962]
          }
          label _breakLabel[165967]
        }
      }
      if(166009 call _cond_test printBrackets)
      {
        { scopeless
          (166006 call <~> f "}")
        }
      }
    }
    {
      if(166036 call _cond_test printBrackets)
      {
        { scopeless
          (166033 call <~> f "{\n")
        }
      }
      if(166151 call _cond_test(166044 call >= _nnz 1))
      {
        { scopeless
          unknown prevInd[166050](166049 call _indices 1)
          (166053 'end of statement')
        }
        (166060 call <~>(166057 call <~> f " ") prevInd)
        {
          unknown _indexOfInterest[166108] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166109] "expr temp" "temp"
          (166118 'move' _iterator[166109](166116 call _getIterator(166123 call chpl_direct_range_iter 2 _nnz 1)))
          Defer
          {
            {
              (166139 call _freeIterator _iterator[166109])
            }
          }
          { scopeless type
            (166128 'move' _indexOfInterest[166108](166125 call iteratorIndex _iterator[166109]))
          }
          ForLoop[166110]
          {
            unknown i[166132] "index var" "insert auto destroy"
            (166134 'move' i[166132] _indexOfInterest[166108])
            {
              if(166087 call _cond_test(166079 call !=(166071 call prevInd 0)(166078 call(166075 call _indices i) 0)))
              {
                (166083 call <~> f "\n")
              }
              (166097 call = prevInd(166096 call _indices i))
              (166105 call <~>(166102 call <~> f " ") prevInd)
            }
            label _continueLabel[166113]
            _indexOfInterest[166108]
            _iterator[166109]
          }
          label _breakLabel[166114]
        }
        (166148 call <~> f "\n")
      }
      if(166177 call _cond_test printBrackets)
      {
        { scopeless
          (166174 call <~> f "}\n")
        }
      }
    }
  }
  function _unknown[51].dsiSerialWrite[166194](arg _mt[166199]:_MT[238], arg this[166196] :
  DefaultSparseArr, arg f[166192]:_any[178](?)) : _unknown[51] throws "method"
  {
    if(166425 call _cond_test(166203 call == rank 1))
    {
      if(166282 call _cond_test(166210 call >=(166206 call . dom c"_nnz") 1))
      {
        (166217 call <~> f(166216 call data 1))
        {
          unknown _indexOfInterest[166241] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166242] "expr temp" "temp"
          (166251 'move' _iterator[166242](166249 call _getIterator(166259 call chpl_direct_range_iter 2(166256 call . dom c"_nnz") 1)))
          Defer
          {
            {
              (166275 call _freeIterator _iterator[166242])
            }
          }
          { scopeless type
            (166264 'move' _indexOfInterest[166241](166261 call iteratorIndex _iterator[166242]))
          }
          ForLoop[166243]
          {
            unknown i[166268] "index var" "insert auto destroy"
            (166270 'move' i[166268] _indexOfInterest[166241])
            {
              (166237 call <~>(166231 call <~> f " ")(166236 call data i))
            }
            label _continueLabel[166246]
            _indexOfInterest[166241]
            _iterator[166242]
          }
          label _breakLabel[166247]
        }
      }
    }
    {
      if(166420 call _cond_test(166292 call >=(166288 call . dom c"_nnz") 1))
      {
        { scopeless
          unknown prevInd[166301](166300 call(166295 call . dom c"_indices") 1)
          (166304 'end of statement')
        }
        (166311 call <~> f(166310 call data 1))
        {
          unknown _indexOfInterest[166374] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[166375] "expr temp" "temp"
          (166384 'move' _iterator[166375](166382 call _getIterator(166392 call chpl_direct_range_iter 2(166389 call . dom c"_nnz") 1)))
          Defer
          {
            {
              (166408 call _freeIterator _iterator[166375])
            }
          }
          { scopeless type
            (166397 'move' _indexOfInterest[166374](166394 call iteratorIndex _iterator[166375]))
          }
          ForLoop[166376]
          {
            unknown i[166401] "index var" "insert auto destroy"
            (166403 'move' i[166401] _indexOfInterest[166374])
            {
              if(166350 call _cond_test(166336 call !=(166325 call prevInd 0)(166335 call(166332 call(166327 call . dom c"_indices") i) 0)))
              {
                (166340 call <~> f "\n")
              }
              {
                (166346 call <~> f " ")
              }
              (166363 call = prevInd(166362 call(166357 call . dom c"_indices") i))
              (166371 call <~> f(166370 call data i))
            }
            label _continueLabel[166379]
            _indexOfInterest[166374]
            _iterator[166375]
          }
          label _breakLabel[166380]
        }
        (166417 call <~> f "\n")
      }
    }
  }
}