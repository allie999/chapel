AST dump for OwnedObject after pass expandExternArrayCalls.
Module use list: 

{
  (39585 'use' ChapelStandard)
  type _owned[30](?) unknown chpl_t[39589] "no doc" "type variable" unknown chpl_p[39596] "no doc" "owned"(39595 'to nilable class' chpl_t) function _owned[30](?).chpl_forwarding_expr1[39603](arg _mt[40580]:_MT[238], arg this[40578]:_owned[30](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (39605 return(39602 call borrow))
  } function _owned[30](?).init[39613](arg _mt[40584]:_MT[238], arg this[40582]:_owned[30](?), arg chpl_t[39611]:_any[178](?)) : _unknown[51] "leaves this nil" "method" "primary method"
  {
    if(39642 call _cond_test(39619 call !(39618 call isClass chpl_t)))
    {
      { scopeless
        (39640 call compilerError "owned only works with classes")
      }
    }
    (39658 call =(39651 call . this c"chpl_t")(39657 call _to_borrowed chpl_t))
    (39668 call =(39664 call . this c"chpl_p") nil[44])
  } function _owned[30](?).init[39679](arg _mt[40588]:_MT[238], arg this[40586]:_owned[30](?), arg p[39676] :
  borrowed[211](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (39700 call compilerError "cannot initialize owned from a borrow")
    (39714 call(39706 call . this c"init")(39712 call _to_unmanaged p))
  } function _owned[30](?).init[39724](arg _mt[40592]:_MT[238], arg this[40590]:_owned[30](?), arg p[39721] :
  unmanaged[220](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (39735 call =(39727 call . this c"chpl_t")(39734 call _to_borrowed(39732 'typeof' p)))
    (39747 call =(39740 call . this c"chpl_p")(39746 call _to_borrowed p))
  } function _owned[30](?).init[39759](arg _mt[40596]:_MT[238], arg this[40594]:_owned[30](?), arg p[39756] :
  unknown T[39754]) : _unknown[51] "method" "primary method" "no doc"
  {
    (39790 call compilerError "owned only works with classes")
    (39798 call =(39794 call . this c"chpl_t") T)
    (39806 call =(39802 call . this c"chpl_p") p)
  }
  where {
    (39785 call &&(39776 call &&(39766 call ==(39764 call isClass T) 0)(39774 call ==(39772 call isSubtype T _owned) 0))(39783 call ==(39781 call isIterator p) 0))
  } function _owned[30](?).init=[39818](arg _mt[40600]:_MT[238], arg this[40598]:_owned[30](?), ref arg src[39815] :
  _owned) : _unknown[51] "method" "primary method"
  {
    if(39854 call _cond_test(39829 call &&(39824 call isNonNilableClass(39822 'typeof' this))(39828 call isNilableClass src)))
    {
      { scopeless
        (39852 call compilerError "cannot create a non-nilable owned variable from a nilable class instance")
      }
    }
    if(39940 call _cond_test(39873 call ==(39871 call isCoercible(39862 call . src c"chpl_t")(39868 call .(39867 'typeof' this) c"chpl_t")) 0))
    {
      { scopeless
        (39938 call compilerError "cannot coerce '"(39897 call _cast string[26](39895 'typeof' src)) "' to '"(39919 call _cast string[26](39917 'typeof' this)) "' in initialization")
      }
    }
    (39954 call =(39946 call . this c"chpl_t")(39951 call .(39950 'typeof' this) c"chpl_t"))
    (39967 call =(39958 call . this c"chpl_p")(39966 call(39962 call . src c"release")))
    (39975 call(39971 call . this c"complete"))
  } function _owned[30](?).init=[39985](arg _mt[40604]:_MT[238], arg this[40602]:_owned[30](?), arg src[39982] :
  _shared) : _unknown[51] "method" "primary method" "no doc"
  {
    (40006 call compilerError "cannot create an owned variable from a shared class instance")
    (40014 call =(40010 call . this c"chpl_t") int[13])
  } function _owned[30](?).init=[40025](arg _mt[40608]:_MT[238], arg this[40606]:_owned[30](?), arg src[40022] :
  borrowed[211](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (40048 call compilerError "cannot create an owned variable from a borrowed class instance")
    (40056 call =(40052 call . this c"chpl_t") int[13])
  } function _owned[30](?).init=[40067](arg _mt[40612]:_MT[238], arg this[40610]:_owned[30](?), arg src[40064] :
  unmanaged[220](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (40088 call compilerError "cannot create an owned variable from an unmanaged class instance")
    (40096 call =(40092 call . this c"chpl_t") int[13])
  } function _owned[30](?).init=[40107](arg _mt[40616]:_MT[238], arg this[40614]:_owned[30](?), arg src[40104] :
  _nilType) : _unknown[51] "leaves this nil" "method" "primary method" "no doc"
  {
    (40119 call(40110 call . this c"init")(40115 call .(40114 'typeof' this) c"chpl_t"))
    if(40147 call _cond_test(40125 call isNonNilableClass chpl_t))
    {
      { scopeless
        (40145 call compilerError "Assigning non-nilable owned to nil")
      }
    }
  } function _owned[30](?).init[40160](arg _mt[40620]:_MT[238], arg this[40618]:_owned[30](?), ref arg src[40157] :
  _owned) : _unknown[51] "method" "primary method" "no doc"
  {
    (40170 call =(40163 call . this c"chpl_t")(40167 call . src c"chpl_t"))
    (40184 call =(40175 call . this c"chpl_p")(40183 call(40179 call . src c"release")))
  } function _owned[30](?).create[40193](arg _mt[40624]:_MT[238], arg this[40622]:_owned[30](?), arg source[40191]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (40219 call compilerError "cannot create an 'owned' from "(40217 call _cast string[26](40215 'typeof' source)))
  } function _owned[30](?).create[40230](arg _mt[40628]:_MT[238], arg this[40626]:_owned[30](?), in arg take[40227] :
  _owned) : _unknown[51] "inline" "method" "primary method"
  {
    (40233 return take)
  } function _owned[30](?).create[40244](arg _mt[40632]:_MT[238], arg this[40630]:_owned[30](?), arg p[40241] :
  unmanaged[220](?)) : _unknown[51] "inline" "method" "primary method" "unsafe"
  {
    { scopeless
      unknown result[40251](40249 call _cast _owned(40247 'typeof' p))
      (40254 'end of statement')
    }
    (40264 call(40259 call . result c"retain") p)
    (40267 return result)
  } function _owned[30](?).deinit[40273](arg _mt[40636]:_MT[238], arg this[40634]:_owned[30](?)) : _unknown[51] "destructor" "method" "primary method"
  {
    if(40297 call _cond_test(40278 call isClass chpl_p))
    {
      if(40291 call _cond_test(40281 call != chpl_p nil[44]))
      {
        { scopeless
          (40288 call chpl__delete(40286 call _to_unmanaged chpl_p))
        }
      }
    }
  } function _owned[30](?).clear[40306](arg _mt[40640]:_MT[238], ref arg this[40638]:_owned[30](?)) : _unknown[51] "leaves this nil" "method" "primary method"
  {
    if(40326 call _cond_test(40310 call != chpl_p nil[44]))
    {
      (40317 call chpl__delete(40315 call _to_unmanaged chpl_p))
      (40323 call = chpl_p nil[44])
    }
  } function _owned[30](?).retain[40339](arg _mt[40644]:_MT[238], ref arg this[40642]:_owned[30](?), arg newPtr[40336] :
  unmanaged[220](?)) : _unknown[51] "method" "primary method"
  {
    if(40443 call _cond_test(40347 call !(40346 call isCoercible(40343 'typeof' newPtr) chpl_t)))
    {
      { scopeless
        (40441 call compilerError(40438 call +(40419 call +(40410 call +(40391 call +(40372 call + "cannot retain '"(40370 call _cast string[26](40368 'typeof' newPtr))) "' ") "(expected '")(40417 call _cast string[26](40415 call _to_unmanaged chpl_t))) "')"))
      }
    }
    { scopeless
      unknown oldPtr[40450] chpl_p
      (40453 'end of statement')
    }
    (40456 call = chpl_p newPtr)
    if(40468 call _cond_test oldPtr)
    {
      { scopeless
        (40465 call chpl__delete(40463 call _to_unmanaged oldPtr))
      }
    }
  } function _owned[30](?).release[40477](arg _mt[40648]:_MT[238], ref arg this[40646]:_owned[30](?)) : _unknown[51] "leaves this nil" "nil from this" "method" "primary method"
  {
    { scopeless
      unknown oldPtr[40480] chpl_p
      (40483 'end of statement')
    }
    (40487 call = chpl_p nil[44])
    if(40513 call _cond_test(40495 call ==(40493 call _to_nilable chpl_t) chpl_t))
    {
      (40501 return(40500 call _to_unmanaged oldPtr))
    }
    {
      (40510 return(40509 call _to_unmanaged(40506 call postfix! oldPtr)))
    }
  } function _owned[30](?).borrow[40521](arg _mt[40652]:_MT[238], arg this[40650]:_owned[30](?)) : _unknown[51] "nil from this" "method" "primary method"
  {
    if(40540 call _cond_test(40528 call ==(40526 call _to_nilable chpl_t) chpl_t))
    {
      (40531 return chpl_p)
    }
    {
      (40537 return(40535 call postfix! chpl_p))
    }
  } function _owned[30](?).borrow[40549](arg _mt[40656]:_MT[238], arg this[40654]:_owned[30](?)) type : _unknown[51] "method" "primary method"
  {
    if(40569 call _cond_test(40556 call ==(40554 call _to_nilable chpl_t) chpl_t))
    {
      (40559 return chpl_t)
    }
    {
      (40566 return(40565 call _to_nonnil chpl_t))
    }
  } forwarding ( )
  function =[40665](ref arg lhs[40662] :
  _owned, ref arg rhs[40668] :
  _owned) : _unknown[51] "assignop"
  {
    (40684 'import' HaltWrappers)
    if(40705 call _cond_test(40701 call &&(40692 call ==(40688 call . lhs c"chpl_p") nil[44])(40699 call ==(40695 call . rhs c"chpl_p") nil[44])))
    {
      { scopeless
        (40703 return)
      }
    }
    if(40763 call _cond_test(40712 call || chpl_checkNilDereferences enablePostfixBangChecks))
    {
      if(40758 call _cond_test(40720 call isNonNilableClass(40716 call . lhs c"chpl_t")))
      {
        if(40753 call _cond_test(40726 call ==(40722 call . rhs c"chpl_p") nil[44]))
        {
          (40750 call(40729 call . HaltWrappers c"nilCheckHalt") "assigning nil to non-nilable owned")
        }
      }
    }
    (40778 call(40768 call . lhs c"retain")(40776 call(40772 call . rhs c"release")))
  }
  where {
    (40681 call !(40679 call &&(40674 call isNonNilableClass lhs)(40678 call isNilableClass rhs)))
  }
  function =[40789](ref arg lhs[40786] :
  _owned, arg rhs[40792] :
  _nilType) : _unknown[51] "assignop" "no doc"
  {
    (40808 call(40804 call . lhs c"clear"))
  }
  where {
    (40799 call !(40798 call isNonNilableClass lhs))
  }
  function <=>[40820](ref arg lhs[40817] :
  _owned, ref arg rhs[40824] :
  (40823 'typeof' lhs)) : _unknown[51]
  {
    (40835 call <=>(40828 call . lhs c"chpl_p")(40832 call . rhs c"chpl_p"))
  }
  function chpl__initCopy[40847](ref arg src[40844] :
  _owned) : _unknown[51] "init copy fn" "no doc"
  {
    { scopeless
      unknown ret[40854](40849 'new'(40853 call _owned src))
      (40857 'end of statement')
    }
    (40860 return ret)
  }
  function chpl__autoCopy[40870](ref arg src[40867] :
  _owned) : _unknown[51] "auto copy fn" "no doc"
  {
    { scopeless
      unknown ret[40877](40872 'new'(40876 call _owned src))
      (40880 'end of statement')
    }
    (40883 return ret)
  }
  function chpl__autoDestroy[40893](ref arg x[40890] :
  _owned) : _unknown[51] "auto destroy fn" "no doc"
  {
    (40901 'call destructor'(40900 'deref' x))
  }
  function _unknown[51].readWriteThis[40911](arg _mt[40916]:_MT[238], arg this[40913] :
  _owned, arg f[40909]:_any[178](?)) : _unknown[51] throws "method" "no doc"
  {
    (40923 call <~> f(40920 call . this c"chpl_p"))
  }
  function _cast[40938](arg t[40935] :
  (40933 call _owned(40932 'to nilable class from type' class[232](?))), in arg x[40943] :
  (40941 call _owned class[232](?))) : _unknown[51] "inline" "no doc"
  {
    { scopeless
      unknown castPtr[40976](40974 call _cast(40973 call _to_nilable(40971 call _to_unmanaged(40967 call . t c"chpl_t")))(40961 call . x c"chpl_p"))
      (40979 'end of statement')
    }
    (40986 call =(40982 call . x c"chpl_p") nil[44])
    (40994 return(40989 'new'(40993 call _owned castPtr)))
  }
  where {
    (40959 call isSubtype(40948 call . x c"chpl_t")(40958 call _to_nonnil(40954 call . t c"chpl_t")))
  }
  function _cast[41008](arg t[41005] :
  (41003 call _owned(41002 'to nilable class from type' class[232](?))), in arg x[41014] :
  (41012 call _owned(41011 'to nilable class from type' class[232](?)))) : _unknown[51] "inline" "no doc"
  {
    { scopeless
      unknown castPtr[41044](41042 call _cast(41041 call _to_nilable(41039 call _to_unmanaged(41035 call . t c"chpl_t")))(41029 call . x c"chpl_p"))
      (41047 'end of statement')
    }
    (41054 call =(41050 call . x c"chpl_p") nil[44])
    (41062 return(41057 'new'(41061 call _owned castPtr)))
  }
  where {
    (41027 call isSubtype(41019 call . x c"chpl_t")(41024 call . t c"chpl_t"))
  }
  function _cast[41075](arg t[41072] :
  (41070 call _owned class[232](?)), in arg x[41080] :
  (41078 call _owned class[232](?))) : _unknown[51] "inline" "no doc"
  {
    { scopeless
      unknown castPtr[41110](41108 call _cast(41107 call _to_nilable(41105 call _to_unmanaged(41101 call . t c"chpl_t")))(41095 call . x c"chpl_p"))
      (41113 'end of statement')
    }
    (41120 call =(41116 call . x c"chpl_p") nil[44])
    (41130 return(41123 'new'(41129 call _owned(41126 call postfix! castPtr))))
  }
  where {
    (41093 call isSubtype(41085 call . x c"chpl_t")(41090 call . t c"chpl_t"))
  }
  function _cast[41143](arg t[41140] :
  (41138 call _owned class[232](?)), in arg x[41149] :
  (41147 call _owned(41146 'to nilable class from type' class[232](?)))) : _unknown[51] throws "inline" "no doc"
  {
    { scopeless
      unknown castPtr[41182](41180 call _cast(41179 call _to_nilable(41177 call _to_unmanaged(41173 call . t c"chpl_t")))(41167 call . x c"chpl_p"))
      (41185 'end of statement')
    }
    if(41200 call _cond_test(41189 call == castPtr nil[44]))
    {
      (41197 'throw'(41193 'new'(_chpl_manager = _owned[30](?))(41196 call NilClassError)))
    }
    (41209 call =(41205 call . x c"chpl_p") nil[44])
    (41219 return(41212 'new'(41218 call _owned(41215 call postfix! castPtr))))
  }
  where {
    (41165 call isSubtype(41159 call _to_nonnil(41155 call . x c"chpl_t"))(41162 call . t c"chpl_t"))
  }
  function _cast[41232](arg t[41229] :
  (41227 call _owned class[232](?)), ref arg x[41238] :
  (41236 call _owned(41235 'to nilable class from type' class[232](?)))) : _unknown[51] throws "inline" "no doc"
  {
    if(41271 call _cond_test(41260 call ==(41256 call . x c"chpl_p") nil[44]))
    {
      (41268 'throw'(41264 'new'(_chpl_manager = _owned[30](?))(41267 call NilClassError)))
    }
    { scopeless
      unknown castPtr[41293](41292 'try-expr'(41290 call _cast(41289 call _to_nonnil(41287 call _to_unmanaged(41283 call . t c"chpl_t")))(41277 call . x c"chpl_p")))
      (41296 'end of statement')
    }
    (41302 call =(41298 call . x c"chpl_p") nil[44])
    (41310 return(41305 'new'(41309 call _owned castPtr)))
  }
  where {
    (41254 call isProperSubtype(41243 call . t c"chpl_t")(41253 call _to_nonnil(41249 call . x c"chpl_t")))
  }
  function _cast[41323](arg t[41320] :
  (41318 call _owned class[232](?)), ref arg x[41328] :
  (41326 call _owned class[232](?))) : _unknown[51] throws "inline" "no doc"
  {
    { scopeless
      unknown castPtr[41359](41358 'try-expr'(41356 call _cast(41355 call _to_nonnil(41353 call _to_unmanaged(41349 call . t c"chpl_t")))(41343 call . x c"chpl_p")))
      (41362 'end of statement')
    }
    (41369 call =(41365 call . x c"chpl_p") nil[44])
    (41377 return(41372 'new'(41376 call _owned castPtr)))
  }
  where {
    (41341 call isProperSubtype(41333 call . t c"chpl_t")(41338 call . x c"chpl_t"))
  }
  function _cast[41391](arg t[41388] :
  (41386 call _owned(41385 'to nilable class from type' class[232](?))), ref arg x[41397] :
  (41395 call _owned(41394 'to nilable class from type' class[232](?)))) : _unknown[51] "inline" "no doc"
  {
    { scopeless
      unknown castPtr[41427](41425 call _cast(41424 call _to_nilable(41422 call _to_unmanaged(41418 call . t c"chpl_t")))(41412 call . x c"chpl_p"))
      (41430 'end of statement')
    }
    if(41445 call _cond_test(41434 call != castPtr nil[44]))
    {
      (41441 call =(41437 call . x c"chpl_p") nil[44])
    }
    (41454 return(41449 'new'(41453 call _owned castPtr)))
  }
  where {
    (41410 call isProperSubtype(41402 call . t c"chpl_t")(41407 call . x c"chpl_t"))
  }
  function _cast[41468](arg t[41465] :
  (41463 call _owned(41462 'to nilable class from type' class[232](?))), ref arg x[41473] :
  (41471 call _owned class[232](?))) : _unknown[51] "inline" "no doc"
  {
    { scopeless
      unknown castPtr[41506](41504 call _cast(41503 call _to_nilable(41501 call _to_unmanaged(41497 call . t c"chpl_t")))(41491 call . x c"chpl_p"))
      (41509 'end of statement')
    }
    if(41524 call _cond_test(41513 call != castPtr nil[44]))
    {
      (41520 call =(41516 call . x c"chpl_p") nil[44])
    }
    (41533 return(41528 'new'(41532 call _owned castPtr)))
  }
  where {
    (41489 call isProperSubtype(41483 call _to_nonnil(41479 call . t c"chpl_t"))(41486 call . x c"chpl_t"))
  }
  function _cast[41544](arg t[41541] :
  _owned, arg x[41547] :
  _nilType) : _unknown[51] "inline" "no doc"
  {
    if(41578 call _cond_test(41556 call isNonNilableClass(41552 call . t c"chpl_t")))
    {
      { scopeless
        (41576 call compilerError "Illegal cast from nil to non-nilable owned type")
      }
    }
    { scopeless
      unknown tmp[41585] t
      (41588 'end of statement')
    }
    (41590 return tmp)
  }
  function postfix![41600](const  ref arg x[41597] :
  _owned) : _unknown[51] "always propagate line file info" "inline" "no doc"
  {
    (41603 'import' HaltWrappers)
    if(41646 call _cond_test chpl_checkNilDereferences)
    {
      if(41641 call _cond_test(41618 call ==(41613 call _to_nilable(41609 call . x c"chpl_t"))(41615 call . x c"chpl_t")))
      {
        if(41636 call _cond_test(41625 call ==(41621 call . x c"chpl_p") nil[44]))
        {
          (41633 call(41628 call . HaltWrappers c"nilCheckHalt") "argument to ! is nil")
        }
      }
    }
    (41657 return(41656 call _to_nonnil(41652 call . x c"chpl_p")))
  }
}