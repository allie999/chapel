AST dump for NPBRandom after pass cleanup.
Module use list: 

{
  (352982 'use' ChapelStandard)
  (314300 'use'(314297 call . super c"RandomSupport"))
  (314304 'use' ChapelLocks)
  function NPBRandomStream[315291](?).init[314337](arg _mt[315295]:_MT[238], arg this[315293]:NPBRandomStream[315291](?), arg eltType[314334]:_any[178](?) =
  (314333 call real[16] 64), arg seed[314347] :
  (314342 call int[13] 64) =
  (314344 call . SeedGenerator c"oddCurrentTime"), param arg parSafe[314353] :
  bool[10] =
  1) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (314358 'use' HaltWrappers)
    (314366 call =(314362 call . this c"eltType") eltType)
    unknown one[314374] 1(314372 call uint[115] 64)
    (314377 'end of statement')
    unknown two_46[314386](314384 call << one 46)(314381 call uint[115] 64)
    (314389 'end of statement')
    unknown two_46_mask[314398](314396 call - two_46 1)(314393 call uint[115] 64)
    (314401 'end of statement')
    unknown useed[314409](314407 call _cast(314406 call uint[115] 64) seed)
    (314412 'end of statement')
    unknown mod[314417](314416 call uint[115] 64)
    (314420 'end of statement')
    if(314454 call _cond_test(314426 call ==(314423 call % useed 2) 0))
    {
      (314452 call(314431 call . HaltWrappers c"initHalt") "NPBRandomStream seed must be an odd integer")
    }
    (314464 call = mod(314462 call & useed two_46_mask))
    (314478 call =(314468 call . this c"seed")(314476 call _cast(314475 call int[13] 64) mod))
    (314486 call =(314482 call . this c"parSafe") parSafe)
    (314494 call(314490 call . this c"complete"))
    if(314554 call _cond_test(314528 call ||(314513 call ||(314504 call ==(314501 call %(314497 call . this c"seed") 2) 0)(314511 call <(314507 call . this c"seed") 1))(314526 call >(314516 call . this c"seed")(314524 call _cast(314523 call int[13] 64) two_46))))
    {
      (314552 call(314531 call . HaltWrappers c"initHalt") "NPBRandomStream seed must be an odd integer between 0 and 2**46")
    }
    (314561 call = NPBRandomStreamPrivate_cursor seed)
    (314566 call = NPBRandomStreamPrivate_count 1)
    if(314608 call _cond_test(314583 call ||(314577 call ||(314571 call == eltType real[16])(314575 call == eltType imag[130]))(314581 call == eltType complex[140])))
    {
    }
    {
      (314605 call compilerError "NPBRandomStream only supports eltType=real(64), imag(64), or complex(128)")
    }
  }
  function NPBRandomStream[315291](?).NPBRandomStreamPrivate_getNext_noLock[314616](arg _mt[315299]:_MT[238], arg this[315297]:NPBRandomStream[315291](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(314634 call _cond_test(314620 call == eltType complex[140]))
    {
      (314624 call += NPBRandomStreamPrivate_count 2)
    }
    {
      (314630 call += NPBRandomStreamPrivate_count 1)
    }
    (314644 return(314643 call randlc eltType NPBRandomStreamPrivate_cursor))
  }
  function NPBRandomStream[315291](?).NPBRandomStreamPrivate_skipToNth_noLock[314654](arg _mt[315303]:_MT[238], arg this[315301]:NPBRandomStream[315291](?), in arg n[314651] :
  integral) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (314658 call += n 1)
    if(314677 call _cond_test(314664 call == eltType complex[140]))
    {
      (314674 call = n(314672 call -(314669 call * n 2) 1))
    }
    (314684 call = NPBRandomStreamPrivate_count n)
    (314693 call = NPBRandomStreamPrivate_cursor(314692 call randlc_skipto seed n))
  }
  function NPBRandomStream[315291](?).getNext[314700](arg _mt[315307]:_MT[238], arg this[315305]:NPBRandomStream[315291](?)) : _unknown[51] "method" "primary method"
  {
    (314705 call _lock)
    const result[314711] "const"(314710 call NPBRandomStreamPrivate_getNext_noLock)
    (314714 'end of statement')
    (314717 call _unlock)
    (314720 return result)
  }
  { scopeless type
    eltType
  }
  function NPBRandomStream[315291](?).skipToNth[314731](arg _mt[315311]:_MT[238], arg this[315309]:NPBRandomStream[315291](?), arg n[314728] :
  integral) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    if(314768 call _cond_test(314735 call < n 0))
    {
      (314766 'throw'(314739 'new'(_chpl_manager = _owned[30](?))(314765 call IllegalArgumentError(314762 call + "NPBRandomStream.skipToNth(n) called with negative 'n' value "(314760 call _cast string[26] n)))))
    }
    (314776 call _lock)
    (314781 call NPBRandomStreamPrivate_skipToNth_noLock n)
    (314785 call _unlock)
  }
  function NPBRandomStream[315291](?).getNth[314795](arg _mt[315315]:_MT[238], arg this[315313]:NPBRandomStream[315291](?), arg n[314792] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(314833 call _cond_test(314800 call < n 0))
    {
      (314831 'throw'(314804 'new'(_chpl_manager = _owned[30](?))(314830 call IllegalArgumentError(314827 call + "NPBRandomStream.getNth(n) called with negative 'n' value "(314825 call _cast string[26] n)))))
    }
    (314841 call _lock)
    (314846 call NPBRandomStreamPrivate_skipToNth_noLock n)
    const result[314851] "const"(314850 call NPBRandomStreamPrivate_getNext_noLock)
    (314854 'end of statement')
    (314857 call _unlock)
    (314860 return result)
  }
  { scopeless type
    eltType
  }
  function NPBRandomStream[315291](?).fillRandom[314874](arg _mt[315319]:_MT[238], arg this[315317]:NPBRandomStream[315291](?), arg arr[314871] :
  (314868 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown x[314901] "index var" "insert auto destroy"
        
        unknown r[314903] "index var" "insert auto destroy"
      iterated expressions:
        arr
        (314893 call iterate(314885 call . arr c"_dom")(314890 call . arr c"eltType"))
      shadow variables:
      other variables
        forall body
      {
        (314897 call = x r)
      }
    }
  }
  function NPBRandomStream[315291](?).fillRandom[314917](arg _mt[315323]:_MT[238], arg this[315321]:NPBRandomStream[315291](?), arg arr[314914] :
  (314911 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (314947 call compilerError "NPBRandomStream(eltType="(314940 call _cast string[26] eltType) ") can only be used to fill arrays of "(314945 call _cast string[26] eltType))
  }
  function NPBRandomStream[315291](?).choice[314960](arg _mt[315327]:_MT[238], arg this[315325]:NPBRandomStream[315291](?), arg x[314957] :
  (314954 call chpl__buildArrayRuntimeType nil[44]), arg size[314965] :
  unknown sizeType[314962] =
  none[57], arg replace[314970] =
  1, arg prob[314976] :
  unknown probType[314973] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (314999 call compilerError "NPBRandomStream.choice() is not supported.")
  }
  function NPBRandomStream[315291](?).choice[315014](arg _mt[315331]:_MT[238], arg this[315329]:NPBRandomStream[315291](?), arg x[315011] :
  (315010 call range(stridable = ?[260])), arg size[315019] :
  unknown sizeType[315016] =
  none[57], arg replace[315024] =
  1, arg prob[315030] :
  unknown probType[315027] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (315037 call compilerError "NPBRandomStream.choice() is not supported.")
  }
  function NPBRandomStream[315291](?).choice[315048](arg _mt[315335]:_MT[238], arg this[315333]:NPBRandomStream[315291](?), arg x[315045] :
  _domain, arg size[315053] :
  unknown sizeType[315050] =
  none[57], arg replace[315058] =
  1, arg prob[315064] :
  unknown probType[315061] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (315071 call compilerError "NPBRandomStream.choice() is not supported.")
  }
  function NPBRandomStream[315291](?).iterate[315082](arg _mt[315339]:_MT[238], arg this[315337]:NPBRandomStream[315291](?), arg D[315079] :
  _domain, arg resultType[315085]:_any[178](?) =
  real[16]) : _unknown[51] "method" "primary method" "fn returns iterator"
  {
    (315090 call _lock)
    const start[315094] "const" NPBRandomStreamPrivate_count
    (315097 'end of statement')
    (315112 call += NPBRandomStreamPrivate_count(315111 call(315103 call .(315100 call . D c"size") c"safeCast")(315109 call int[13] 64)))
    (315121 call NPBRandomStreamPrivate_skipToNth_noLock(315118 call - NPBRandomStreamPrivate_count 1))
    (315125 call _unlock)
    (315134 return(315133 call NPBRandomPrivate_iterate resultType D seed start))
  }
  function NPBRandomStream[315291](?).iterate[315144](arg _mt[315343]:_MT[238], arg this[315341]:NPBRandomStream[315291](?), arg D[315141] :
  _domain, arg resultType[315147]:_any[178](?) =
  real[16], param arg tag[315150]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  {
    const start[315160] "const" NPBRandomStreamPrivate_count
    (315163 'end of statement')
    (315173 return(315172 call NPBRandomPrivate_iterate resultType D seed start tag))
  }
  where {
    (315157 call == tag(315154 call . iterKind c"leader"))
  }
  function NPBRandomStream[315291](?).writeThis[315182](arg _mt[315347]:_MT[238], arg this[315345]:NPBRandomStream[315291](?), arg f[315180]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides" "no return value for void"
  {
    (315186 call <~> f "NPBRandomStream(eltType=")
    (315195 call <~> f(315193 call _cast string[26] eltType))
    (315200 call <~> f ", parSafe=")
    (315205 call <~> f parSafe)
    (315210 call <~> f ", seed=")
    (315215 call <~> f seed)
    (315220 call <~> f ")")
  }
  function NPBRandomStream[315291](?)._lock[315237](arg _mt[315351]:_MT[238], arg this[315349]:NPBRandomStream[315291](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(315247 call _cond_test parSafe)
    {
      (315245 call(315241 call . _l c"lock"))
    }
  }
  function NPBRandomStream[315291](?)._unlock[315257](arg _mt[315355]:_MT[238], arg this[315353]:NPBRandomStream[315291](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(315267 call _cond_test parSafe)
    {
      (315265 call(315261 call . _l c"unlock"))
    }
  }
  type NPBRandomStream[315291](?) unknown eltType[314311] "type variable"(314310 call real[16] 64) const seed[314318] "const"(314317 call int[13] 64) unknown parSafe[314324] "param" 1 bool[10] unknown _l[315231] "no doc"(315228 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) unknown NPBRandomStreamPrivate_cursor[315277] "no doc" seed real[16] unknown NPBRandomStreamPrivate_count[315286] "no doc" 1(315284 call int[13] 64)
  const r23[315364] "const" "private"(315362 call ** 0.5 23)
  const t23[315371] "const" "private"(315369 call ** 2.0 23)
  const r46[315378] "const" "private"(315376 call ** 0.5 46)
  const t46[315385] "const" "private"(315383 call ** 2.0 46)
  const arand[315391] "const" "private" 1.2207e+09
  (315394 'end of statement')
  function randlc[315401](inout arg x[315398] :
  real[16], arg a[315405] :
  real[16] =
  arand) : _unknown[51] "private"
  {
    unknown t1[315413](315411 call * r23 a)
    (315416 'end of statement')
    const a1[315422] "const"(315421 call floor t1)
    const a2[315432] "const"(315430 call - a(315428 call * t23 a1))
    (315435 'end of statement')
    (315441 call = t1(315439 call * r23 x))
    const x1[315448] "const"(315447 call floor t1)
    const x2[315458] "const"(315456 call - x(315454 call * t23 x1))
    (315461 'end of statement')
    (315473 call = t1(315471 call +(315465 call * a1 x2)(315469 call * a2 x1)))
    const t2[315483] "const"(315482 call floor(315479 call * r23 t1))
    const z[315493] "const"(315491 call - t1(315489 call * t23 t2))
    const t3[315506] "const"(315504 call +(315498 call * t23 z)(315502 call * a2 x2))
    const t4[315516] "const"(315515 call floor(315512 call * r46 t3))
    const x3[315526] "const"(315524 call - t3(315522 call * t46 t4))
    (315529 'end of statement')
    (315532 call = x x3)
    (315539 return(315537 call * r46 x3))
  }
  function randlc[315547](arg resultType[315545]:_any[178](?), inout arg x[315550] :
  real[16]) : _unknown[51] "private"
  {
    if(315598 call _cond_test(315555 call == resultType complex[140]))
    {
      (315571 return(315569 call _cast complex[140](315566 call _build_tuple(315560 call randlc x)(315564 call randlc x))))
    }
    {
      if(315592 call _cond_test(315575 call == resultType imag[130]))
      {
        (315584 return(315583 call _r2i(315581 call randlc x)))
      }
      {
        (315590 return(315589 call randlc x))
      }
    }
  }
  function randlc_skipto[315616](arg seed[315613] :
  (315612 call int[13] 64), in arg n[315619] :
  integral) : _unknown[51] "private"
  {
    unknown cursor[315627](315625 call _cast real[16] seed)
    (315630 'end of statement')
    (315634 call -= n 1)
    unknown t[315638] arand
    (315641 'end of statement')
    arand
    {
      unknown tmp[315704] "temp"
      (315728 'move' tmp[315704](315723 call _cond_test(315725 call != n 0)))
      WhileDo[315709]
      {
        {
          const i[315652] "const"(315650 call / n 2)
          (315655 'end of statement')
          if(315670 call _cond_test(315662 call !=(315659 call * 2 i) n))
          {
            (315668 call randlc cursor t)
          }
          if(315687 call _cond_test(315677 call == i 0))
          {
            break nil[44]
          }
          {
            (315684 call = n i)
          }
          (315697 call randlc t t)
          (315701 call = n i)
        }
        label _continueLabel[315707]
        (315718 'move' tmp[315704](315713 call _cond_test(315715 call != n 0)))
        tmp[315704]
      }
      label _breakLabel[315708]
    }
    (315732 return cursor)
  }
  { scopeless type
    real[16]
  }
  function outer[315741](arg ranges[315739]:_any[178](?), param arg dim[315745] :
  int[13] =
  0) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(315913 call _cond_test(315757 call ==(315751 call + dim 2)(315754 call . ranges c"size")))
    {
      {
        unknown _indexOfInterest[315769] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[315770] "expr temp" "temp"
        (315779 'move' _iterator[315770](315777 call _getIterator(315763 call ranges dim)))
        Defer
        {
          {
            (315796 call _freeIterator _iterator[315770])
          }
        }
        { scopeless type
          (315785 'move' _indexOfInterest[315769](315782 call iteratorIndex _iterator[315770]))
        }
        ForLoop[315771]
        {
          unknown i[315789] "index var" "insert auto destroy"
          (315791 'move' i[315789] _indexOfInterest[315769])
          (315767 yield(315765 call _build_tuple i))
          label _continueLabel[315774]
          _indexOfInterest[315769]
          _iterator[315770]
        }
        label _breakLabel[315775]
      }
    }
    {
      if(315909 call _cond_test(315812 call <(315806 call + dim 2)(315809 call . ranges c"size")))
      {
        {
          unknown _indexOfInterest[315870] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[315871] "expr temp" "temp"
          (315880 'move' _iterator[315871](315878 call _getIterator(315818 call ranges dim)))
          Defer
          {
            {
              (315897 call _freeIterator _iterator[315871])
            }
          }
          { scopeless type
            (315886 'move' _indexOfInterest[315870](315883 call iteratorIndex _iterator[315871]))
          }
          ForLoop[315872]
          {
            unknown i[315890] "index var" "insert auto destroy"
            (315892 'move' i[315890] _indexOfInterest[315870])
            {
              unknown _indexOfInterest[315836] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[315837] "expr temp" "temp"
              (315846 'move' _iterator[315837](315844 call _getIterator(315827 call outer ranges(315825 call + dim 1))))
              Defer
              {
                {
                  (315863 call _freeIterator _iterator[315837])
                }
              }
              { scopeless type
                (315852 'move' _indexOfInterest[315836](315849 call iteratorIndex _iterator[315837]))
              }
              ForLoop[315838]
              {
                unknown j[315856] "index var" "insert auto destroy"
                (315858 'move' j[315856] _indexOfInterest[315836])
                (315834 yield(315832 call _build_tuple i(315830 'expand_tuple' j)))
                label _continueLabel[315841]
                _indexOfInterest[315836]
                _iterator[315837]
              }
              label _breakLabel[315842]
            }
            label _continueLabel[315875]
            _indexOfInterest[315870]
            _iterator[315871]
          }
          label _breakLabel[315876]
        }
      }
      {
        (315906 yield 0)
      }
    }
  }
  function NPBRandomPrivate_iterate[315925](arg resultType[315923]:_any[178](?), arg D[315928] :
  _domain, arg seed[315935] :
  (315934 call int[13] 64), arg start[315942] :
  (315941 call int[13] 64)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown cursor[315950](315949 call randlc_skipto seed start)
    (315953 'end of statement')
    {
      unknown _indexOfInterest[315964] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[315965] "expr temp" "temp"
      (315974 'move' _iterator[315965](315972 call _getIterator D))
      Defer
      {
        {
          (315990 call _freeIterator _iterator[315965])
        }
      }
      { scopeless type
        (315979 'move' _indexOfInterest[315964](315976 call iteratorIndex _iterator[315965]))
      }
      ForLoop[315966]
      {
        unknown i[315983] "index var" "insert auto destroy"
        (315985 'move' i[315983] _indexOfInterest[315964])
        (315962 yield(315961 call randlc resultType cursor))
        label _continueLabel[315969]
        _indexOfInterest[315964]
        _iterator[315965]
      }
      label _breakLabel[315970]
    }
  }
  function NPBRandomPrivate_iterate[316003](arg resultType[316001]:_any[178](?), arg D[316006] :
  _domain, arg seed[316013] :
  (316012 call int[13] 64), arg start[316020] :
  (316019 call int[13] 64), param arg tag[316024] :
  iterKind) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[316049] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316050] "expr temp" "temp"
      (316059 'move' _iterator[316050](316057 call _getIterator(316045 call(316036 call . D c"these")(tag =(316040 call . iterKind c"leader")))))
      Defer
      {
        {
          (316076 call _freeIterator _iterator[316050])
        }
      }
      { scopeless type
        (316065 'move' _indexOfInterest[316049](316062 call iteratorIndex _iterator[316050]))
      }
      ForLoop[316051]
      {
        unknown block[316069] "index var" "insert auto destroy"
        (316071 'move' block[316069] _indexOfInterest[316049])
        (316047 yield block)
        label _continueLabel[316054]
        _indexOfInterest[316049]
        _iterator[316050]
      }
      label _breakLabel[316055]
    }
  }
  where {
    (316032 call == tag(316029 call . iterKind c"leader"))
  }
  function NPBRandomPrivate_iterate[316091](arg resultType[316089]:_any[178](?), arg D[316094] :
  _domain, arg seed[316101] :
  (316100 call int[13] 64), arg start[316108] :
  (316107 call int[13] 64), param arg tag[316112] :
  iterKind, arg followThis[316115]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    (316125 'use' DSIUtil)
    unknown multiplier[316137] "param"(316134 IfExpr (316130 call == resultType complex[140]) then
    { scopeless
      2
    } else
    { scopeless
      1
    } )
    (316140 'end of statement')
    const ZD[316145] "const"(316144 call computeZeroBasedDomain D)
    (316148 'end of statement')
    const innerRange[316159] "const"(316158 call followThis(316155 call -(316151 call . ZD c"rank") 1))
    (316162 'end of statement')
    unknown cursor[316164] real[16]
    (316167 'end of statement')
    {
      unknown _indexOfInterest[316396] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316397] "expr temp" "temp"
      (316406 'move' _iterator[316397](316404 call _getIterator(316172 call outer followThis)))
      Defer
      {
        {
          (316423 call _freeIterator _iterator[316397])
        }
      }
      { scopeless type
        (316412 'move' _indexOfInterest[316396](316409 call iteratorIndex _iterator[316397]))
      }
      ForLoop[316398]
      {
        unknown outer[316416] "index var" "insert auto destroy"
        (316418 'move' outer[316416] _indexOfInterest[316396])
        {
          unknown myStart[316174] start
          (316177 'end of statement')
          if(316243 call _cond_test(316184 call >(316180 call . ZD c"rank") 1))
          {
            (316214 call += myStart(316212 call * multiplier(316211 call(316203 call .(316202 call(316189 call . ZD c"indexOrder")(316199 call _build_tuple(316193 'expand_tuple' outer)(316195 call . innerRange c"low"))) c"safeCast")(316209 call int[13] 64))))
          }
          {
            (316240 call += myStart(316238 call * multiplier(316237 call(316229 call .(316228 call(316220 call . ZD c"indexOrder")(316224 call . innerRange c"low")) c"safeCast")(316235 call int[13] 64))))
          }
          if(316392 call _cond_test(316253 call !(316250 call . innerRange c"stridable")))
          {
            (316261 call = cursor(316260 call randlc_skipto seed myStart))
            {
              unknown _indexOfInterest[316274] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[316275] "expr temp" "temp"
              (316284 'move' _iterator[316275](316282 call _getIterator innerRange))
              Defer
              {
                {
                  (316300 call _freeIterator _iterator[316275])
                }
              }
              { scopeless type
                (316289 'move' _indexOfInterest[316274](316286 call iteratorIndex _iterator[316275]))
              }
              ForLoop[316276]
              {
                unknown i[316293] "index var" "insert auto destroy"
                (316295 'move' i[316293] _indexOfInterest[316274])
                (316272 yield(316271 call randlc resultType cursor))
                label _continueLabel[316279]
                _indexOfInterest[316274]
                _iterator[316275]
              }
              label _breakLabel[316280]
            }
          }
          {
            (316321 call -= myStart(316320 call(316312 call .(316309 call . innerRange c"low") c"safeCast")(316318 call int[13] 64)))
            {
              unknown _indexOfInterest[316359] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[316360] "expr temp" "temp"
              (316369 'move' _iterator[316360](316367 call _getIterator innerRange))
              Defer
              {
                {
                  (316385 call _freeIterator _iterator[316360])
                }
              }
              { scopeless type
                (316374 'move' _indexOfInterest[316359](316371 call iteratorIndex _iterator[316360]))
              }
              ForLoop[316361]
              {
                unknown i[316378] "index var" "insert auto destroy"
                (316380 'move' i[316378] _indexOfInterest[316359])
                {
                  (316348 call = cursor(316347 call randlc_skipto seed(316345 call + myStart(316343 call *(316341 call(316333 call . i c"safeCast")(316339 call int[13] 64)) multiplier))))
                  (316357 yield(316356 call randlc resultType cursor))
                }
                label _continueLabel[316364]
                _indexOfInterest[316359]
                _iterator[316360]
              }
              label _breakLabel[316365]
            }
          }
        }
        label _continueLabel[316401]
        _indexOfInterest[316396]
        _iterator[316397]
      }
      label _breakLabel[316402]
    }
  }
  where {
    (316122 call == tag(316119 call . iterKind c"follower"))
  }
}