AST dump for ChapelReduce after pass flattenClasses.
Module use list: ChapelStandard ChapelLocks Reflection 

{
  function chpl__scanStateResTypesMatch[81787](arg op[81785]:_any[178](?)) param : _unknown[51]
  {
    unknown resType[81798] "type variable"(81797 'typeof'(81796 call(81792 call . op[81785] c"generate")))
    unknown stateType[81809] "type variable"(81808 'typeof'(81805 call . op[81785] c"identity"))
    (81816 return(81814 call == resType[81798] stateType[81809]))
  }
  function chpl__scanIteratorZip[81824](arg op[81822]:_any[178](?), arg data[81826]:_any[178](?)) : _unknown[51]
  {
    (81847 call compilerWarning "scan has been serialized (see issue #12482)")
    unknown arr[81865](81861 for  d[81863]  in  zip(81854 call _build_tuple(81852 'expand_tuple' data[81826])) do
    {
      (81859 call chpl__accumgen op[81822] d[81863])
    } )
    (81868 'end of statement')
    (81871 call chpl__delete op[81822])
    (81875 return arr[81865])
  }
  function chpl__scanIterator[81883](arg op[81881]:_any[178](?), arg data[81885]:_any[178](?)) : _unknown[51]
  {
    unknown supportsPar[81919] "param"(81917 call &&(81894 call isArray data[81885])(81916 call canResolveMethod data[81885] "_scan" op[81881]))
    (81922 'end of statement')
    if(81963 call _cond_test supportsPar[81919])
    {
      (81931 return(81930 call(81925 call . data[81885] c"_scan") op[81881]))
    }
    {
      (81937 call compilerWarning "scan has been serialized (see issue #12482)")
      unknown arr[81951](81947 for  d[81949]  in  data[81885] do
      {
        (81946 call chpl__accumgen op[81881] d[81949])
      } )
      (81954 'end of statement')
      (81957 call chpl__delete op[81881])
      (81961 return arr[81951])
    }
    (355058 'used modules list'(81888 'use' Reflection[224882]))
  }
  function chpl__accumgen[81973](arg op[81971]:_any[178](?), arg d[81975]:_any[178](?)) : _unknown[51]
  {
    (81985 call(81980 call . op[81971] c"accumulate") d[81975])
    (81994 return(81993 call(81989 call . op[81971] c"generate")))
  }
  function chpl__reduceCombine[82002](arg globalOp[82000]:_any[178](?), arg localOp[82004]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[82047] "const" "temp"
    (82049 'move' tmp[82047](82045 'deref'(82044 '_wide_get_locale' globalOp[82000])))
    {
      {
        (82019 call(82015 call .(82010 call . globalOp[82000] c"l") c"lock"))
        (82030 call(82025 call . globalOp[82000] c"combine") localOp[82004])
        (82042 call(82038 call .(82033 call . globalOp[82000] c"l") c"unlock"))
      }
      (82052 'on block' 0 tmp[82047])
    }
  }
  function chpl__cleanupLocalOp[82062](arg globalOp[82060]:_any[178](?), arg localOp[82064]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (82068 call chpl__delete localOp[82064])
  }
  function chpl_sumTypeIsSame[82078](arg eltType[82076]:_any[178](?)) param : _unknown[51]
  {
    if(82160 call _cond_test(82088 call ||(82083 call isNumeric eltType[82076])(82087 call isString eltType[82076])))
    {
      (82091 return 1)
    }
    {
      if(82155 call _cond_test(82097 call isDomain eltType[82076]))
      {
        unknown d[82099] eltType[82076]
        (82102 'end of statement')
        (82108 return(82107 call isAssociativeDom d[82099]))
      }
      {
        if(82151 call _cond_test(82113 call isArray eltType[82076]))
        {
          unknown arrInstType[82119] "type variable"(82118 'static field type' eltType[82076] "_instance")
          unknown instanceObj[82125](82124 'to nilable class from type' arrInstType[82119])
          (82128 'end of statement')
          unknown instanceEltType[82138] "type variable"(82137 'static typeof'(82134 call .(82132 call postfix! instanceObj[82125]) c"eltType"))
          (82145 return(82144 call chpl_sumTypeIsSame instanceEltType[82138]))
        }
        {
          (82148 return 0)
        }
      }
    }
  }
  function chpl__sumType[82172](arg eltType[82170]:_any[178](?)) type : _unknown[51]
  {
    if(82283 call _cond_test(82177 call chpl_sumTypeIsSame eltType[82170]))
    {
      (82179 return eltType[82170])
    }
    {
      unknown x[82183] eltType[82170]
      (82186 'end of statement')
      if(82279 call _cond_test(82191 call isArray x[82183]))
      {
        unknown xET[82196] "type variable"(82193 call . x[82183] c"eltType")
        unknown xST[82204] "type variable"(82203 call chpl__sumType xET[82196])
        if(82224 call _cond_test(82209 call == xET[82196] xST[82204]))
        {
          (82212 return eltType[82170])
        }
        {
          (82222 return(82220 [ (82215 call . x[82183] c"_dom") ]
          {
            xST[82204]
          } ))
        }
      }
      {
        if(82267 call _cond_test(82240 call !(82239 call canResolve "+" x[82183] x[82183])))
        {
          (82265 call compilerError "+ reduce cannot be used on values of the type "(82263 call _cast string[26] eltType[82170]))
        }
        (82277 return(82276 'typeof'(82274 call + x[82183] x[82183])))
        (355060 'used modules list'(82231 'use' Reflection[224882]))
      }
    }
  }
  type ReduceScanOp[82297] val super[355606]:object[22] "super class" unknown l[82292] chpl_LocalSpinlock[187386]
  function SumReduceScanOp[82409](?).identity[82316](arg _mt[82413]:_MT[238], arg this[82411]:SumReduceScanOp[82409](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown x[82322](82321 call chpl__sumType(376349 call . this[82411] c"eltType"))
    (82325 'end of statement')
    (82328 return x[82322])
  }
  function SumReduceScanOp[82409](?).accumulate[82336](arg _mt[82417]:_MT[238], arg this[82415]:SumReduceScanOp[82409](?), arg x[82334]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82340 call +=(376355 call . this[82415] c"value") x[82334])
  }
  function SumReduceScanOp[82409](?).accumulateOntoState[82350](arg _mt[82421]:_MT[238], arg this[82419]:SumReduceScanOp[82409](?), ref arg state[82348]:_any[178](?), arg x[82352]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82356 call += state[82348] x[82352])
  }
  function SumReduceScanOp[82409](?).combine[82366](arg _mt[82425]:_MT[238], arg this[82423]:SumReduceScanOp[82409](?), arg x[82364]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82375 call +=(376363 call . this[82423] c"value")(82372 call . x[82364] c"value"))
  }
  function SumReduceScanOp[82409](?).generate[82383](arg _mt[82429]:_MT[238], arg this[82427]:SumReduceScanOp[82409](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (82386 return(376368 call . this[82427] c"value"))
  }
  function SumReduceScanOp[82409](?).clone[82393](arg _mt[82433]:_MT[238], arg this[82431]:SumReduceScanOp[82409](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (82403 return(82397 'new'(_chpl_manager = unmanaged[220](?))(82402 call SumReduceScanOp[376372](?)(eltType =(376377 call . this[82431] c"eltType")))))
  }
  type SumReduceScanOp[82409](?) val super[355608]:ReduceScanOp[82297] "super class" unknown eltType[82303] "type variable" unknown value[82310](82309 call chpl__sumType eltType[82303])
  type SumReduceScanOp[376372](?)
  function ProductReduceScanOp[82538](?).identity[82452](arg _mt[82542]:_MT[238], arg this[82540]:ProductReduceScanOp[82538](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (82458 return(82457 call _prod_id(376383 call . this[82540] c"eltType")))
  }
  function ProductReduceScanOp[82538](?).accumulate[82467](arg _mt[82546]:_MT[238], arg this[82544]:ProductReduceScanOp[82538](?), arg x[82465]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82471 call *=(376388 call . this[82544] c"value") x[82465])
  }
  function ProductReduceScanOp[82538](?).accumulateOntoState[82481](arg _mt[82550]:_MT[238], arg this[82548]:ProductReduceScanOp[82538](?), ref arg state[82479]:_any[178](?), arg x[82483]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82487 call *= state[82479] x[82483])
  }
  function ProductReduceScanOp[82538](?).combine[82497](arg _mt[82554]:_MT[238], arg this[82552]:ProductReduceScanOp[82538](?), arg x[82495]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82504 call *=(376396 call . this[82552] c"value")(82501 call . x[82495] c"value"))
  }
  function ProductReduceScanOp[82538](?).generate[82512](arg _mt[82558]:_MT[238], arg this[82556]:ProductReduceScanOp[82538](?)) : _unknown[51] "method" "primary method"
  {
    (82515 return(376401 call . this[82556] c"value"))
  }
  function ProductReduceScanOp[82538](?).clone[82522](arg _mt[82562]:_MT[238], arg this[82560]:ProductReduceScanOp[82538](?)) : _unknown[51] "method" "primary method"
  {
    (82532 return(82526 'new'(_chpl_manager = unmanaged[220](?))(82531 call ProductReduceScanOp[376405](?)(eltType =(376410 call . this[82560] c"eltType")))))
  }
  type ProductReduceScanOp[82538](?) val super[355610]:ReduceScanOp[82297] "super class" unknown eltType[82439] "type variable" unknown value[82446](82445 call _prod_id eltType[82439])
  type ProductReduceScanOp[376405](?)
  function MaxReduceScanOp[82679](?).identity[82581](arg _mt[82683]:_MT[238], arg this[82681]:MaxReduceScanOp[82679](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (82587 return(82586 call min(376416 call . this[82681] c"eltType")))
  }
  function MaxReduceScanOp[82679](?).accumulate[82596](arg _mt[82687]:_MT[238], arg this[82685]:MaxReduceScanOp[82679](?), arg x[82594]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82604 call =(376421 call . this[82685] c"value")(82603 call max x[82594](376427 call . this[82685] c"value")))
  }
  function MaxReduceScanOp[82679](?).accumulateOntoState[82614](arg _mt[82691]:_MT[238], arg this[82689]:MaxReduceScanOp[82679](?), ref arg state[82612]:_any[178](?), arg x[82616]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82624 call = state[82612](82623 call max state[82612] x[82616]))
  }
  function MaxReduceScanOp[82679](?).combine[82634](arg _mt[82695]:_MT[238], arg this[82693]:MaxReduceScanOp[82679](?), arg x[82632]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82645 call =(376435 call . this[82693] c"value")(82644 call max(376440 call . this[82693] c"value")(82641 call . x[82632] c"value")))
  }
  function MaxReduceScanOp[82679](?).generate[82653](arg _mt[82699]:_MT[238], arg this[82697]:MaxReduceScanOp[82679](?)) : _unknown[51] "method" "primary method"
  {
    (82656 return(376445 call . this[82697] c"value"))
  }
  function MaxReduceScanOp[82679](?).clone[82663](arg _mt[82703]:_MT[238], arg this[82701]:MaxReduceScanOp[82679](?)) : _unknown[51] "method" "primary method"
  {
    (82673 return(82667 'new'(_chpl_manager = unmanaged[220](?))(82672 call MaxReduceScanOp[376449](?)(eltType =(376454 call . this[82701] c"eltType")))))
  }
  type MaxReduceScanOp[82679](?) val super[355612]:ReduceScanOp[82297] "super class" unknown eltType[82568] "type variable" unknown value[82575](82574 call min eltType[82568])
  type MaxReduceScanOp[376449](?)
  function MinReduceScanOp[82820](?).identity[82722](arg _mt[82824]:_MT[238], arg this[82822]:MinReduceScanOp[82820](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (82728 return(82727 call max(376460 call . this[82822] c"eltType")))
  }
  function MinReduceScanOp[82820](?).accumulate[82737](arg _mt[82828]:_MT[238], arg this[82826]:MinReduceScanOp[82820](?), arg x[82735]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82745 call =(376465 call . this[82826] c"value")(82744 call min x[82735](376471 call . this[82826] c"value")))
  }
  function MinReduceScanOp[82820](?).accumulateOntoState[82755](arg _mt[82832]:_MT[238], arg this[82830]:MinReduceScanOp[82820](?), ref arg state[82753]:_any[178](?), arg x[82757]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82765 call = state[82753](82764 call min state[82753] x[82757]))
  }
  function MinReduceScanOp[82820](?).combine[82775](arg _mt[82836]:_MT[238], arg this[82834]:MinReduceScanOp[82820](?), arg x[82773]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82786 call =(376479 call . this[82834] c"value")(82785 call min(376484 call . this[82834] c"value")(82782 call . x[82773] c"value")))
  }
  function MinReduceScanOp[82820](?).generate[82794](arg _mt[82840]:_MT[238], arg this[82838]:MinReduceScanOp[82820](?)) : _unknown[51] "method" "primary method"
  {
    (82797 return(376489 call . this[82838] c"value"))
  }
  function MinReduceScanOp[82820](?).clone[82804](arg _mt[82844]:_MT[238], arg this[82842]:MinReduceScanOp[82820](?)) : _unknown[51] "method" "primary method"
  {
    (82814 return(82808 'new'(_chpl_manager = unmanaged[220](?))(82813 call MinReduceScanOp[376493](?)(eltType =(376498 call . this[82842] c"eltType")))))
  }
  type MinReduceScanOp[82820](?) val super[355614]:ReduceScanOp[82297] "super class" unknown eltType[82709] "type variable" unknown value[82716](82715 call max eltType[82709])
  type MinReduceScanOp[376493](?)
  function minmax[83071](?).identity[82870](arg _mt[83075]:_MT[238], arg this[83073]:minmax[83071](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (82883 return(82881 call _build_tuple(82875 call max(376505 call . this[83073] c"eltType"))(82879 call min(376510 call . this[83073] c"eltType"))))
  }
  function minmax[83071](?).accumulateOntoState[82892](arg _mt[83079]:_MT[238], arg this[83077]:minmax[83071](?), ref arg state[82890]:_any[178](?), arg x[82895] :
  (376515 call . this[83077] c"eltType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82910 call =(82901 call state[82890] 0)(82909 call min(82906 call state[82890] 0) x[82895]))
    (82926 call =(82917 call state[82890] 1)(82925 call max(82922 call state[82890] 1) x[82895]))
  }
  function minmax[83071](?).accumulateOntoState[82935](arg _mt[83083]:_MT[238], arg this[83081]:minmax[83071](?), ref arg state[82933]:_any[178](?), arg other[82941] :
  (82939 call * 2(376526 call . this[83081] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82959 call =(82947 call state[82933] 0)(82958 call min(82952 call state[82933] 0)(82957 call other[82941] 0)))
    (82978 call =(82966 call state[82933] 1)(82977 call max(82971 call state[82933] 1)(82976 call other[82941] 1)))
  }
  function minmax[83071](?).accumulate[82989](arg _mt[83087]:_MT[238], arg this[83085]:minmax[83071](?), arg x[82986] :
  (376537 call . this[83085] c"eltType")) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82995 call(376541 call . this[83085] c"accumulateOntoState")(376546 call . this[83085] c"value") x[82986])
  }
  function minmax[83071](?).accumulate[83009](arg _mt[83091]:_MT[238], arg this[83089]:minmax[83071](?), arg state[83006] :
  (83004 call * 2(376552 call . this[83089] c"eltType"))) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (83015 call(376556 call . this[83089] c"accumulateOntoState")(376561 call . this[83089] c"value") state[83006])
  }
  function minmax[83071](?).combine[83029](arg _mt[83095]:_MT[238], arg this[83093]:minmax[83071](?), arg other[83026] :
  (83025 call minmax[376566](?)(376571 call . this[83093] c"eltType"))) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (83038 call(376575 call . this[83093] c"accumulateOntoState")(376580 call . this[83093] c"value")(83035 call . other[83026] c"value"))
  }
  function minmax[83071](?).generate[83045](arg _mt[83099]:_MT[238], arg this[83097]:minmax[83071](?)) : _unknown[51] "method" "primary method"
  {
    (83048 return(376585 call . this[83097] c"value"))
  }
  function minmax[83071](?).clone[83055](arg _mt[83103]:_MT[238], arg this[83101]:minmax[83071](?)) : _unknown[51] "method" "primary method"
  {
    (83065 return(83059 'new'(_chpl_manager = unmanaged[220](?))(83064 call minmax[376566](?)(eltType =(376591 call . this[83101] c"eltType")))))
  }
  type minmax[83071](?) val super[355616]:ReduceScanOp[82297] "super class" unknown eltType[82850] "type variable" unknown value[82864](82862 call _build_tuple(82856 call max eltType[82850])(82860 call min eltType[82850]))
  type minmax[376566](?)
  function LogicalAndReduceScanOp[83235](?).identity[83122](arg _mt[83239]:_MT[238], arg this[83237]:LogicalAndReduceScanOp[83235](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83128 return(83127 call _land_id(376597 call . this[83237] c"eltType")))
  }
  function LogicalAndReduceScanOp[83235](?).accumulate[83137](arg _mt[83243]:_MT[238], arg this[83241]:LogicalAndReduceScanOp[83235](?), arg x[83135]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83142] "temp"
      (83145 'move' tmp[83142](83144 'addr of'(376602 call . this[83241] c"value")))
      (83150 call = tmp[83142](83147 call && tmp[83142] x[83135]))
    }
  }
  function LogicalAndReduceScanOp[83235](?).accumulateOntoState[83160](arg _mt[83247]:_MT[238], arg this[83245]:LogicalAndReduceScanOp[83235](?), ref arg state[83158]:_any[178](?), arg x[83162]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83167] "temp"
      (83170 'move' tmp[83167](83169 'addr of' state[83158]))
      (83175 call = tmp[83167](83172 call && tmp[83167] x[83162]))
    }
  }
  function LogicalAndReduceScanOp[83235](?).combine[83185](arg _mt[83251]:_MT[238], arg this[83249]:LogicalAndReduceScanOp[83235](?), arg x[83183]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83193] "temp"
      (83196 'move' tmp[83193](83195 'addr of'(376610 call . this[83249] c"value")))
      (83201 call = tmp[83193](83198 call && tmp[83193](83189 call . x[83183] c"value")))
    }
  }
  function LogicalAndReduceScanOp[83235](?).generate[83209](arg _mt[83255]:_MT[238], arg this[83253]:LogicalAndReduceScanOp[83235](?)) : _unknown[51] "method" "primary method"
  {
    (83212 return(376615 call . this[83253] c"value"))
  }
  function LogicalAndReduceScanOp[83235](?).clone[83219](arg _mt[83259]:_MT[238], arg this[83257]:LogicalAndReduceScanOp[83235](?)) : _unknown[51] "method" "primary method"
  {
    (83229 return(83223 'new'(_chpl_manager = unmanaged[220](?))(83228 call LogicalAndReduceScanOp[376619](?)(eltType =(376624 call . this[83257] c"eltType")))))
  }
  type LogicalAndReduceScanOp[83235](?) val super[355618]:ReduceScanOp[82297] "super class" unknown eltType[83109] "type variable" unknown value[83116](83115 call _land_id eltType[83109])
  type LogicalAndReduceScanOp[376619](?)
  function LogicalOrReduceScanOp[83391](?).identity[83278](arg _mt[83395]:_MT[238], arg this[83393]:LogicalOrReduceScanOp[83391](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83284 return(83283 call _lor_id(376630 call . this[83393] c"eltType")))
  }
  function LogicalOrReduceScanOp[83391](?).accumulate[83293](arg _mt[83399]:_MT[238], arg this[83397]:LogicalOrReduceScanOp[83391](?), arg x[83291]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83298] "temp"
      (83301 'move' tmp[83298](83300 'addr of'(376635 call . this[83397] c"value")))
      (83306 call = tmp[83298](83303 call || tmp[83298] x[83291]))
    }
  }
  function LogicalOrReduceScanOp[83391](?).accumulateOntoState[83316](arg _mt[83403]:_MT[238], arg this[83401]:LogicalOrReduceScanOp[83391](?), ref arg state[83314]:_any[178](?), arg x[83318]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83323] "temp"
      (83326 'move' tmp[83323](83325 'addr of' state[83314]))
      (83331 call = tmp[83323](83328 call || tmp[83323] x[83318]))
    }
  }
  function LogicalOrReduceScanOp[83391](?).combine[83341](arg _mt[83407]:_MT[238], arg this[83405]:LogicalOrReduceScanOp[83391](?), arg x[83339]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83349] "temp"
      (83352 'move' tmp[83349](83351 'addr of'(376643 call . this[83405] c"value")))
      (83357 call = tmp[83349](83354 call || tmp[83349](83345 call . x[83339] c"value")))
    }
  }
  function LogicalOrReduceScanOp[83391](?).generate[83365](arg _mt[83411]:_MT[238], arg this[83409]:LogicalOrReduceScanOp[83391](?)) : _unknown[51] "method" "primary method"
  {
    (83368 return(376648 call . this[83409] c"value"))
  }
  function LogicalOrReduceScanOp[83391](?).clone[83375](arg _mt[83415]:_MT[238], arg this[83413]:LogicalOrReduceScanOp[83391](?)) : _unknown[51] "method" "primary method"
  {
    (83385 return(83379 'new'(_chpl_manager = unmanaged[220](?))(83384 call LogicalOrReduceScanOp[376652](?)(eltType =(376657 call . this[83413] c"eltType")))))
  }
  type LogicalOrReduceScanOp[83391](?) val super[355620]:ReduceScanOp[82297] "super class" unknown eltType[83265] "type variable" unknown value[83272](83271 call _lor_id eltType[83265])
  type LogicalOrReduceScanOp[376652](?)
  function BitwiseAndReduceScanOp[83520](?).identity[83434](arg _mt[83524]:_MT[238], arg this[83522]:BitwiseAndReduceScanOp[83520](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83440 return(83439 call _band_id(376663 call . this[83522] c"eltType")))
  }
  function BitwiseAndReduceScanOp[83520](?).accumulate[83449](arg _mt[83528]:_MT[238], arg this[83526]:BitwiseAndReduceScanOp[83520](?), arg x[83447]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83453 call &=(376668 call . this[83526] c"value") x[83447])
  }
  function BitwiseAndReduceScanOp[83520](?).accumulateOntoState[83463](arg _mt[83532]:_MT[238], arg this[83530]:BitwiseAndReduceScanOp[83520](?), ref arg state[83461]:_any[178](?), arg x[83465]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83469 call &= state[83461] x[83465])
  }
  function BitwiseAndReduceScanOp[83520](?).combine[83479](arg _mt[83536]:_MT[238], arg this[83534]:BitwiseAndReduceScanOp[83520](?), arg x[83477]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83486 call &=(376676 call . this[83534] c"value")(83483 call . x[83477] c"value"))
  }
  function BitwiseAndReduceScanOp[83520](?).generate[83494](arg _mt[83540]:_MT[238], arg this[83538]:BitwiseAndReduceScanOp[83520](?)) : _unknown[51] "method" "primary method"
  {
    (83497 return(376681 call . this[83538] c"value"))
  }
  function BitwiseAndReduceScanOp[83520](?).clone[83504](arg _mt[83544]:_MT[238], arg this[83542]:BitwiseAndReduceScanOp[83520](?)) : _unknown[51] "method" "primary method"
  {
    (83514 return(83508 'new'(_chpl_manager = unmanaged[220](?))(83513 call BitwiseAndReduceScanOp[376685](?)(eltType =(376690 call . this[83542] c"eltType")))))
  }
  type BitwiseAndReduceScanOp[83520](?) val super[355622]:ReduceScanOp[82297] "super class" unknown eltType[83421] "type variable" unknown value[83428](83427 call _band_id eltType[83421])
  type BitwiseAndReduceScanOp[376685](?)
  function BitwiseOrReduceScanOp[83649](?).identity[83563](arg _mt[83653]:_MT[238], arg this[83651]:BitwiseOrReduceScanOp[83649](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83569 return(83568 call _bor_id(376696 call . this[83651] c"eltType")))
  }
  function BitwiseOrReduceScanOp[83649](?).accumulate[83578](arg _mt[83657]:_MT[238], arg this[83655]:BitwiseOrReduceScanOp[83649](?), arg x[83576]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83582 call |=(376701 call . this[83655] c"value") x[83576])
  }
  function BitwiseOrReduceScanOp[83649](?).accumulateOntoState[83592](arg _mt[83661]:_MT[238], arg this[83659]:BitwiseOrReduceScanOp[83649](?), ref arg state[83590]:_any[178](?), arg x[83594]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83598 call |= state[83590] x[83594])
  }
  function BitwiseOrReduceScanOp[83649](?).combine[83608](arg _mt[83665]:_MT[238], arg this[83663]:BitwiseOrReduceScanOp[83649](?), arg x[83606]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83615 call |=(376709 call . this[83663] c"value")(83612 call . x[83606] c"value"))
  }
  function BitwiseOrReduceScanOp[83649](?).generate[83623](arg _mt[83669]:_MT[238], arg this[83667]:BitwiseOrReduceScanOp[83649](?)) : _unknown[51] "method" "primary method"
  {
    (83626 return(376714 call . this[83667] c"value"))
  }
  function BitwiseOrReduceScanOp[83649](?).clone[83633](arg _mt[83673]:_MT[238], arg this[83671]:BitwiseOrReduceScanOp[83649](?)) : _unknown[51] "method" "primary method"
  {
    (83643 return(83637 'new'(_chpl_manager = unmanaged[220](?))(83642 call BitwiseOrReduceScanOp[376718](?)(eltType =(376723 call . this[83671] c"eltType")))))
  }
  type BitwiseOrReduceScanOp[83649](?) val super[355624]:ReduceScanOp[82297] "super class" unknown eltType[83550] "type variable" unknown value[83557](83556 call _bor_id eltType[83550])
  type BitwiseOrReduceScanOp[376718](?)
  function BitwiseXorReduceScanOp[83778](?).identity[83692](arg _mt[83782]:_MT[238], arg this[83780]:BitwiseXorReduceScanOp[83778](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83698 return(83697 call _bxor_id(376729 call . this[83780] c"eltType")))
  }
  function BitwiseXorReduceScanOp[83778](?).accumulate[83707](arg _mt[83786]:_MT[238], arg this[83784]:BitwiseXorReduceScanOp[83778](?), arg x[83705]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83711 call ^=(376734 call . this[83784] c"value") x[83705])
  }
  function BitwiseXorReduceScanOp[83778](?).accumulateOntoState[83721](arg _mt[83790]:_MT[238], arg this[83788]:BitwiseXorReduceScanOp[83778](?), ref arg state[83719]:_any[178](?), arg x[83723]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83727 call ^= state[83719] x[83723])
  }
  function BitwiseXorReduceScanOp[83778](?).combine[83737](arg _mt[83794]:_MT[238], arg this[83792]:BitwiseXorReduceScanOp[83778](?), arg x[83735]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83744 call ^=(376742 call . this[83792] c"value")(83741 call . x[83735] c"value"))
  }
  function BitwiseXorReduceScanOp[83778](?).generate[83752](arg _mt[83798]:_MT[238], arg this[83796]:BitwiseXorReduceScanOp[83778](?)) : _unknown[51] "method" "primary method"
  {
    (83755 return(376747 call . this[83796] c"value"))
  }
  function BitwiseXorReduceScanOp[83778](?).clone[83762](arg _mt[83802]:_MT[238], arg this[83800]:BitwiseXorReduceScanOp[83778](?)) : _unknown[51] "method" "primary method"
  {
    (83772 return(83766 'new'(_chpl_manager = unmanaged[220](?))(83771 call BitwiseXorReduceScanOp[376751](?)(eltType =(376756 call . this[83800] c"eltType")))))
  }
  type BitwiseXorReduceScanOp[83778](?) val super[355626]:ReduceScanOp[82297] "super class" unknown eltType[83679] "type variable" unknown value[83686](83685 call _bxor_id eltType[83679])
  type BitwiseXorReduceScanOp[376751](?)
  function _maxloc_id[83809](arg eltType[83807]:_any[178](?)) : _unknown[51]
  {
    (83828 return(83826 call _build_tuple(83817 call min(83815 call eltType[83807] 0))(83824 call max(83822 call eltType[83807] 1))))
  }
  function _minloc_id[83837](arg eltType[83835]:_any[178](?)) : _unknown[51]
  {
    (83843 return(83842 call max eltType[83835]))
  }
  function maxloc[84023](?).identity[83864](arg _mt[84027]:_MT[238], arg this[84025]:maxloc[84023](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83870 return(83869 call _maxloc_id(376765 call . this[84025] c"eltType")))
  }
  function maxloc[84023](?).accumulate[83879](arg _mt[84031]:_MT[238], arg this[84029]:maxloc[84023](?), arg x[83877]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83885 call(376769 call . this[84029] c"accumulateOntoState")(376774 call . this[84029] c"value") x[83877])
  }
  function maxloc[84023](?).accumulateOntoState[83894](arg _mt[84035]:_MT[238], arg this[84033]:maxloc[84023](?), ref arg state[83892]:_any[178](?), arg x[83896]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(83969 call _cond_test(83962 call ||(83930 call ||(83906 call >(83901 call x[83896] 0)(83905 call state[83892] 0))(83928 call &&(83916 call ==(83911 call x[83896] 0)(83915 call state[83892] 0))(83926 call <(83921 call x[83896] 1)(83925 call state[83892] 1))))(83960 call &&(83938 call gotNaN(83936 call x[83896] 0))(83958 call ||(83946 call !(83945 call gotNaN(83943 call state[83892] 0)))(83956 call <(83951 call x[83896] 1)(83955 call state[83892] 1))))))
    {
      (83966 call = state[83892] x[83896])
    }
  }
  function maxloc[84023](?).combine[83981](arg _mt[84039]:_MT[238], arg this[84037]:maxloc[84023](?), arg x[83979]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83990 call(376791 call . this[84037] c"accumulateOntoState")(376796 call . this[84037] c"value")(83987 call . x[83979] c"value"))
  }
  function maxloc[84023](?).generate[83997](arg _mt[84043]:_MT[238], arg this[84041]:maxloc[84023](?)) : _unknown[51] "method" "primary method"
  {
    (84000 return(376801 call . this[84041] c"value"))
  }
  function maxloc[84023](?).clone[84007](arg _mt[84047]:_MT[238], arg this[84045]:maxloc[84023](?)) : _unknown[51] "method" "primary method"
  {
    (84017 return(84011 'new'(_chpl_manager = unmanaged[220](?))(84016 call maxloc[376805](?)(eltType =(376810 call . this[84045] c"eltType")))))
  }
  type maxloc[84023](?) val super[355628]:ReduceScanOp[82297] "super class" unknown eltType[83851] "type variable" unknown value[83858](83857 call _maxloc_id eltType[83851])
  type maxloc[376805](?)
  function minloc[84225](?).identity[84066](arg _mt[84229]:_MT[238], arg this[84227]:minloc[84225](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (84072 return(84071 call _minloc_id(376816 call . this[84227] c"eltType")))
  }
  function minloc[84225](?).accumulate[84081](arg _mt[84233]:_MT[238], arg this[84231]:minloc[84225](?), arg x[84079]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (84087 call(376820 call . this[84231] c"accumulateOntoState")(376825 call . this[84231] c"value") x[84079])
  }
  function minloc[84225](?).accumulateOntoState[84096](arg _mt[84237]:_MT[238], arg this[84235]:minloc[84225](?), ref arg state[84094]:_any[178](?), arg x[84098]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(84171 call _cond_test(84164 call ||(84132 call ||(84108 call <(84103 call x[84098] 0)(84107 call state[84094] 0))(84130 call &&(84118 call ==(84113 call x[84098] 0)(84117 call state[84094] 0))(84128 call <(84123 call x[84098] 1)(84127 call state[84094] 1))))(84162 call &&(84140 call gotNaN(84138 call x[84098] 0))(84160 call ||(84148 call !(84147 call gotNaN(84145 call state[84094] 0)))(84158 call <(84153 call x[84098] 1)(84157 call state[84094] 1))))))
    {
      (84168 call = state[84094] x[84098])
    }
  }
  function minloc[84225](?).combine[84183](arg _mt[84241]:_MT[238], arg this[84239]:minloc[84225](?), arg x[84181]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (84192 call(376842 call . this[84239] c"accumulateOntoState")(376847 call . this[84239] c"value")(84189 call . x[84181] c"value"))
  }
  function minloc[84225](?).generate[84199](arg _mt[84245]:_MT[238], arg this[84243]:minloc[84225](?)) : _unknown[51] "method" "primary method"
  {
    (84202 return(376852 call . this[84243] c"value"))
  }
  function minloc[84225](?).clone[84209](arg _mt[84249]:_MT[238], arg this[84247]:minloc[84225](?)) : _unknown[51] "method" "primary method"
  {
    (84219 return(84213 'new'(_chpl_manager = unmanaged[220](?))(84218 call minloc[376856](?)(eltType =(376861 call . this[84247] c"eltType")))))
  }
  type minloc[84225](?) val super[355630]:ReduceScanOp[82297] "super class" unknown eltType[84053] "type variable" unknown value[84060](84059 call _minloc_id eltType[84053])
  type minloc[376856](?)
  function gotNaN[84256](arg value[84254]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (84266 return(84265 call isnan value[84254]))
  }
  where {
    (84261 call isReal value[84254])
  }
  function gotNaN[84276](arg value[84274]:_any[178](?)) param : _unknown[51] "private"
  {
    (84279 return 0)
  }
  (355055 'used modules list'(81777 'use' ChapelStandard[20264])(81781 'use' ChapelLocks[187256]))
}