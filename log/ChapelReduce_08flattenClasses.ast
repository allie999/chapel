AST dump for ChapelReduce after pass flattenClasses.
Module use list: ChapelStandard ChapelLocks Reflection 

{
  function chpl__scanStateResTypesMatch[81790](arg op[81788]:_any[178](?)) param : _unknown[51]
  {
    unknown resType[81801] "type variable"(81800 'typeof'(81799 call(81795 call . op[81788] c"generate")))
    unknown stateType[81812] "type variable"(81811 'typeof'(81808 call . op[81788] c"identity"))
    (81819 return(81817 call == resType[81801] stateType[81812]))
  }
  function chpl__scanIteratorZip[81827](arg op[81825]:_any[178](?), arg data[81829]:_any[178](?)) : _unknown[51]
  {
    (81850 call compilerWarning "scan has been serialized (see issue #12482)")
    unknown arr[81868](81864 for  d[81866]  in  zip(81857 call _build_tuple(81855 'expand_tuple' data[81829])) do
    {
      (81862 call chpl__accumgen op[81825] d[81866])
    } )
    (81871 'end of statement')
    (81874 call chpl__delete op[81825])
    (81878 return arr[81868])
  }
  function chpl__scanIterator[81886](arg op[81884]:_any[178](?), arg data[81888]:_any[178](?)) : _unknown[51]
  {
    unknown supportsPar[81922] "param"(81920 call &&(81897 call isArray data[81888])(81919 call canResolveMethod data[81888] "_scan" op[81884]))
    (81925 'end of statement')
    if(81966 call _cond_test supportsPar[81922])
    {
      (81934 return(81933 call(81928 call . data[81888] c"_scan") op[81884]))
    }
    {
      (81940 call compilerWarning "scan has been serialized (see issue #12482)")
      unknown arr[81954](81950 for  d[81952]  in  data[81888] do
      {
        (81949 call chpl__accumgen op[81884] d[81952])
      } )
      (81957 'end of statement')
      (81960 call chpl__delete op[81884])
      (81964 return arr[81954])
    }
    (355169 'used modules list'(81891 'use' Reflection[224970]))
  }
  function chpl__accumgen[81976](arg op[81974]:_any[178](?), arg d[81978]:_any[178](?)) : _unknown[51]
  {
    (81988 call(81983 call . op[81974] c"accumulate") d[81978])
    (81997 return(81996 call(81992 call . op[81974] c"generate")))
  }
  function chpl__reduceCombine[82005](arg globalOp[82003]:_any[178](?), arg localOp[82007]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[82050] "const" "temp"
    (82052 'move' tmp[82050](82048 'deref'(82047 '_wide_get_locale' globalOp[82003])))
    {
      {
        (82022 call(82018 call .(82013 call . globalOp[82003] c"l") c"lock"))
        (82033 call(82028 call . globalOp[82003] c"combine") localOp[82007])
        (82045 call(82041 call .(82036 call . globalOp[82003] c"l") c"unlock"))
      }
      (82055 'on block' 0 tmp[82050])
    }
  }
  function chpl__cleanupLocalOp[82065](arg globalOp[82063]:_any[178](?), arg localOp[82067]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (82071 call chpl__delete localOp[82067])
  }
  function chpl_sumTypeIsSame[82081](arg eltType[82079]:_any[178](?)) param : _unknown[51]
  {
    if(82163 call _cond_test(82091 call ||(82086 call isNumeric eltType[82079])(82090 call isString eltType[82079])))
    {
      (82094 return 1)
    }
    {
      if(82158 call _cond_test(82100 call isDomain eltType[82079]))
      {
        unknown d[82102] eltType[82079]
        (82105 'end of statement')
        (82111 return(82110 call isAssociativeDom d[82102]))
      }
      {
        if(82154 call _cond_test(82116 call isArray eltType[82079]))
        {
          unknown arrInstType[82122] "type variable"(82121 'static field type' eltType[82079] "_instance")
          unknown instanceObj[82128](82127 'to nilable class from type' arrInstType[82122])
          (82131 'end of statement')
          unknown instanceEltType[82141] "type variable"(82140 'static typeof'(82137 call .(82135 call postfix! instanceObj[82128]) c"eltType"))
          (82148 return(82147 call chpl_sumTypeIsSame instanceEltType[82141]))
        }
        {
          (82151 return 0)
        }
      }
    }
  }
  function chpl__sumType[82175](arg eltType[82173]:_any[178](?)) type : _unknown[51]
  {
    if(82286 call _cond_test(82180 call chpl_sumTypeIsSame eltType[82173]))
    {
      (82182 return eltType[82173])
    }
    {
      unknown x[82186] eltType[82173]
      (82189 'end of statement')
      if(82282 call _cond_test(82194 call isArray x[82186]))
      {
        unknown xET[82199] "type variable"(82196 call . x[82186] c"eltType")
        unknown xST[82207] "type variable"(82206 call chpl__sumType xET[82199])
        if(82227 call _cond_test(82212 call == xET[82199] xST[82207]))
        {
          (82215 return eltType[82173])
        }
        {
          (82225 return(82223 [ (82218 call . x[82186] c"_dom") ]
          {
            xST[82207]
          } ))
        }
      }
      {
        if(82270 call _cond_test(82243 call !(82242 call canResolve "+" x[82186] x[82186])))
        {
          (82268 call compilerError "+ reduce cannot be used on values of the type "(82266 call _cast string[26] eltType[82173]))
        }
        (82280 return(82279 'typeof'(82277 call + x[82186] x[82186])))
        (355171 'used modules list'(82234 'use' Reflection[224970]))
      }
    }
  }
  type ReduceScanOp[82300] val super[355717]:object[22] "super class" unknown l[82295] chpl_LocalSpinlock[187432]
  function SumReduceScanOp[82412](?).identity[82319](arg _mt[82416]:_MT[238], arg this[82414]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown x[82325](82324 call chpl__sumType(376460 call . this[82414] c"eltType"))
    (82328 'end of statement')
    (82331 return x[82325])
  }
  function SumReduceScanOp[82412](?).accumulate[82339](arg _mt[82420]:_MT[238], arg this[82418]:SumReduceScanOp[82412](?), arg x[82337]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82343 call +=(376466 call . this[82418] c"value") x[82337])
  }
  function SumReduceScanOp[82412](?).accumulateOntoState[82353](arg _mt[82424]:_MT[238], arg this[82422]:SumReduceScanOp[82412](?), ref arg state[82351]:_any[178](?), arg x[82355]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82359 call += state[82351] x[82355])
  }
  function SumReduceScanOp[82412](?).combine[82369](arg _mt[82428]:_MT[238], arg this[82426]:SumReduceScanOp[82412](?), arg x[82367]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82378 call +=(376474 call . this[82426] c"value")(82375 call . x[82367] c"value"))
  }
  function SumReduceScanOp[82412](?).generate[82386](arg _mt[82432]:_MT[238], arg this[82430]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (82389 return(376479 call . this[82430] c"value"))
  }
  function SumReduceScanOp[82412](?).clone[82396](arg _mt[82436]:_MT[238], arg this[82434]:SumReduceScanOp[82412](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (82406 return(82400 'new'(_chpl_manager = unmanaged[220](?))(82405 call SumReduceScanOp[376483](?)(eltType =(376488 call . this[82434] c"eltType")))))
  }
  type SumReduceScanOp[82412](?) val super[355719]:ReduceScanOp[82300] "super class" unknown eltType[82306] "type variable" unknown value[82313](82312 call chpl__sumType eltType[82306])
  type SumReduceScanOp[376483](?)
  function ProductReduceScanOp[82541](?).identity[82455](arg _mt[82545]:_MT[238], arg this[82543]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (82461 return(82460 call _prod_id(376494 call . this[82543] c"eltType")))
  }
  function ProductReduceScanOp[82541](?).accumulate[82470](arg _mt[82549]:_MT[238], arg this[82547]:ProductReduceScanOp[82541](?), arg x[82468]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82474 call *=(376499 call . this[82547] c"value") x[82468])
  }
  function ProductReduceScanOp[82541](?).accumulateOntoState[82484](arg _mt[82553]:_MT[238], arg this[82551]:ProductReduceScanOp[82541](?), ref arg state[82482]:_any[178](?), arg x[82486]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82490 call *= state[82482] x[82486])
  }
  function ProductReduceScanOp[82541](?).combine[82500](arg _mt[82557]:_MT[238], arg this[82555]:ProductReduceScanOp[82541](?), arg x[82498]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82507 call *=(376507 call . this[82555] c"value")(82504 call . x[82498] c"value"))
  }
  function ProductReduceScanOp[82541](?).generate[82515](arg _mt[82561]:_MT[238], arg this[82559]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method"
  {
    (82518 return(376512 call . this[82559] c"value"))
  }
  function ProductReduceScanOp[82541](?).clone[82525](arg _mt[82565]:_MT[238], arg this[82563]:ProductReduceScanOp[82541](?)) : _unknown[51] "method" "primary method"
  {
    (82535 return(82529 'new'(_chpl_manager = unmanaged[220](?))(82534 call ProductReduceScanOp[376516](?)(eltType =(376521 call . this[82563] c"eltType")))))
  }
  type ProductReduceScanOp[82541](?) val super[355721]:ReduceScanOp[82300] "super class" unknown eltType[82442] "type variable" unknown value[82449](82448 call _prod_id eltType[82442])
  type ProductReduceScanOp[376516](?)
  function MaxReduceScanOp[82682](?).identity[82584](arg _mt[82686]:_MT[238], arg this[82684]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (82590 return(82589 call min(376527 call . this[82684] c"eltType")))
  }
  function MaxReduceScanOp[82682](?).accumulate[82599](arg _mt[82690]:_MT[238], arg this[82688]:MaxReduceScanOp[82682](?), arg x[82597]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82607 call =(376532 call . this[82688] c"value")(82606 call max x[82597](376538 call . this[82688] c"value")))
  }
  function MaxReduceScanOp[82682](?).accumulateOntoState[82617](arg _mt[82694]:_MT[238], arg this[82692]:MaxReduceScanOp[82682](?), ref arg state[82615]:_any[178](?), arg x[82619]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82627 call = state[82615](82626 call max state[82615] x[82619]))
  }
  function MaxReduceScanOp[82682](?).combine[82637](arg _mt[82698]:_MT[238], arg this[82696]:MaxReduceScanOp[82682](?), arg x[82635]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82648 call =(376546 call . this[82696] c"value")(82647 call max(376551 call . this[82696] c"value")(82644 call . x[82635] c"value")))
  }
  function MaxReduceScanOp[82682](?).generate[82656](arg _mt[82702]:_MT[238], arg this[82700]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method"
  {
    (82659 return(376556 call . this[82700] c"value"))
  }
  function MaxReduceScanOp[82682](?).clone[82666](arg _mt[82706]:_MT[238], arg this[82704]:MaxReduceScanOp[82682](?)) : _unknown[51] "method" "primary method"
  {
    (82676 return(82670 'new'(_chpl_manager = unmanaged[220](?))(82675 call MaxReduceScanOp[376560](?)(eltType =(376565 call . this[82704] c"eltType")))))
  }
  type MaxReduceScanOp[82682](?) val super[355723]:ReduceScanOp[82300] "super class" unknown eltType[82571] "type variable" unknown value[82578](82577 call min eltType[82571])
  type MaxReduceScanOp[376560](?)
  function MinReduceScanOp[82823](?).identity[82725](arg _mt[82827]:_MT[238], arg this[82825]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (82731 return(82730 call max(376571 call . this[82825] c"eltType")))
  }
  function MinReduceScanOp[82823](?).accumulate[82740](arg _mt[82831]:_MT[238], arg this[82829]:MinReduceScanOp[82823](?), arg x[82738]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82748 call =(376576 call . this[82829] c"value")(82747 call min x[82738](376582 call . this[82829] c"value")))
  }
  function MinReduceScanOp[82823](?).accumulateOntoState[82758](arg _mt[82835]:_MT[238], arg this[82833]:MinReduceScanOp[82823](?), ref arg state[82756]:_any[178](?), arg x[82760]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82768 call = state[82756](82767 call min state[82756] x[82760]))
  }
  function MinReduceScanOp[82823](?).combine[82778](arg _mt[82839]:_MT[238], arg this[82837]:MinReduceScanOp[82823](?), arg x[82776]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82789 call =(376590 call . this[82837] c"value")(82788 call min(376595 call . this[82837] c"value")(82785 call . x[82776] c"value")))
  }
  function MinReduceScanOp[82823](?).generate[82797](arg _mt[82843]:_MT[238], arg this[82841]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method"
  {
    (82800 return(376600 call . this[82841] c"value"))
  }
  function MinReduceScanOp[82823](?).clone[82807](arg _mt[82847]:_MT[238], arg this[82845]:MinReduceScanOp[82823](?)) : _unknown[51] "method" "primary method"
  {
    (82817 return(82811 'new'(_chpl_manager = unmanaged[220](?))(82816 call MinReduceScanOp[376604](?)(eltType =(376609 call . this[82845] c"eltType")))))
  }
  type MinReduceScanOp[82823](?) val super[355725]:ReduceScanOp[82300] "super class" unknown eltType[82712] "type variable" unknown value[82719](82718 call max eltType[82712])
  type MinReduceScanOp[376604](?)
  function minmax[83074](?).identity[82873](arg _mt[83078]:_MT[238], arg this[83076]:minmax[83074](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (82886 return(82884 call _build_tuple(82878 call max(376616 call . this[83076] c"eltType"))(82882 call min(376621 call . this[83076] c"eltType"))))
  }
  function minmax[83074](?).accumulateOntoState[82895](arg _mt[83082]:_MT[238], arg this[83080]:minmax[83074](?), ref arg state[82893]:_any[178](?), arg x[82898] :
  (376626 call . this[83080] c"eltType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82913 call =(82904 call state[82893] 0)(82912 call min(82909 call state[82893] 0) x[82898]))
    (82929 call =(82920 call state[82893] 1)(82928 call max(82925 call state[82893] 1) x[82898]))
  }
  function minmax[83074](?).accumulateOntoState[82938](arg _mt[83086]:_MT[238], arg this[83084]:minmax[83074](?), ref arg state[82936]:_any[178](?), arg other[82944] :
  (82942 call * 2(376637 call . this[83084] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82962 call =(82950 call state[82936] 0)(82961 call min(82955 call state[82936] 0)(82960 call other[82944] 0)))
    (82981 call =(82969 call state[82936] 1)(82980 call max(82974 call state[82936] 1)(82979 call other[82944] 1)))
  }
  function minmax[83074](?).accumulate[82992](arg _mt[83090]:_MT[238], arg this[83088]:minmax[83074](?), arg x[82989] :
  (376648 call . this[83088] c"eltType")) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82998 call(376652 call . this[83088] c"accumulateOntoState")(376657 call . this[83088] c"value") x[82989])
  }
  function minmax[83074](?).accumulate[83012](arg _mt[83094]:_MT[238], arg this[83092]:minmax[83074](?), arg state[83009] :
  (83007 call * 2(376663 call . this[83092] c"eltType"))) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (83018 call(376667 call . this[83092] c"accumulateOntoState")(376672 call . this[83092] c"value") state[83009])
  }
  function minmax[83074](?).combine[83032](arg _mt[83098]:_MT[238], arg this[83096]:minmax[83074](?), arg other[83029] :
  (83028 call minmax[376677](?)(376682 call . this[83096] c"eltType"))) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (83041 call(376686 call . this[83096] c"accumulateOntoState")(376691 call . this[83096] c"value")(83038 call . other[83029] c"value"))
  }
  function minmax[83074](?).generate[83048](arg _mt[83102]:_MT[238], arg this[83100]:minmax[83074](?)) : _unknown[51] "method" "primary method"
  {
    (83051 return(376696 call . this[83100] c"value"))
  }
  function minmax[83074](?).clone[83058](arg _mt[83106]:_MT[238], arg this[83104]:minmax[83074](?)) : _unknown[51] "method" "primary method"
  {
    (83068 return(83062 'new'(_chpl_manager = unmanaged[220](?))(83067 call minmax[376677](?)(eltType =(376702 call . this[83104] c"eltType")))))
  }
  type minmax[83074](?) val super[355727]:ReduceScanOp[82300] "super class" unknown eltType[82853] "type variable" unknown value[82867](82865 call _build_tuple(82859 call max eltType[82853])(82863 call min eltType[82853]))
  type minmax[376677](?)
  function LogicalAndReduceScanOp[83238](?).identity[83125](arg _mt[83242]:_MT[238], arg this[83240]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83131 return(83130 call _land_id(376708 call . this[83240] c"eltType")))
  }
  function LogicalAndReduceScanOp[83238](?).accumulate[83140](arg _mt[83246]:_MT[238], arg this[83244]:LogicalAndReduceScanOp[83238](?), arg x[83138]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83145] "temp"
      (83148 'move' tmp[83145](83147 'addr of'(376713 call . this[83244] c"value")))
      (83153 call = tmp[83145](83150 call && tmp[83145] x[83138]))
    }
  }
  function LogicalAndReduceScanOp[83238](?).accumulateOntoState[83163](arg _mt[83250]:_MT[238], arg this[83248]:LogicalAndReduceScanOp[83238](?), ref arg state[83161]:_any[178](?), arg x[83165]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83170] "temp"
      (83173 'move' tmp[83170](83172 'addr of' state[83161]))
      (83178 call = tmp[83170](83175 call && tmp[83170] x[83165]))
    }
  }
  function LogicalAndReduceScanOp[83238](?).combine[83188](arg _mt[83254]:_MT[238], arg this[83252]:LogicalAndReduceScanOp[83238](?), arg x[83186]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83196] "temp"
      (83199 'move' tmp[83196](83198 'addr of'(376721 call . this[83252] c"value")))
      (83204 call = tmp[83196](83201 call && tmp[83196](83192 call . x[83186] c"value")))
    }
  }
  function LogicalAndReduceScanOp[83238](?).generate[83212](arg _mt[83258]:_MT[238], arg this[83256]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method"
  {
    (83215 return(376726 call . this[83256] c"value"))
  }
  function LogicalAndReduceScanOp[83238](?).clone[83222](arg _mt[83262]:_MT[238], arg this[83260]:LogicalAndReduceScanOp[83238](?)) : _unknown[51] "method" "primary method"
  {
    (83232 return(83226 'new'(_chpl_manager = unmanaged[220](?))(83231 call LogicalAndReduceScanOp[376730](?)(eltType =(376735 call . this[83260] c"eltType")))))
  }
  type LogicalAndReduceScanOp[83238](?) val super[355729]:ReduceScanOp[82300] "super class" unknown eltType[83112] "type variable" unknown value[83119](83118 call _land_id eltType[83112])
  type LogicalAndReduceScanOp[376730](?)
  function LogicalOrReduceScanOp[83394](?).identity[83281](arg _mt[83398]:_MT[238], arg this[83396]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83287 return(83286 call _lor_id(376741 call . this[83396] c"eltType")))
  }
  function LogicalOrReduceScanOp[83394](?).accumulate[83296](arg _mt[83402]:_MT[238], arg this[83400]:LogicalOrReduceScanOp[83394](?), arg x[83294]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83301] "temp"
      (83304 'move' tmp[83301](83303 'addr of'(376746 call . this[83400] c"value")))
      (83309 call = tmp[83301](83306 call || tmp[83301] x[83294]))
    }
  }
  function LogicalOrReduceScanOp[83394](?).accumulateOntoState[83319](arg _mt[83406]:_MT[238], arg this[83404]:LogicalOrReduceScanOp[83394](?), ref arg state[83317]:_any[178](?), arg x[83321]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83326] "temp"
      (83329 'move' tmp[83326](83328 'addr of' state[83317]))
      (83334 call = tmp[83326](83331 call || tmp[83326] x[83321]))
    }
  }
  function LogicalOrReduceScanOp[83394](?).combine[83344](arg _mt[83410]:_MT[238], arg this[83408]:LogicalOrReduceScanOp[83394](?), arg x[83342]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83352] "temp"
      (83355 'move' tmp[83352](83354 'addr of'(376754 call . this[83408] c"value")))
      (83360 call = tmp[83352](83357 call || tmp[83352](83348 call . x[83342] c"value")))
    }
  }
  function LogicalOrReduceScanOp[83394](?).generate[83368](arg _mt[83414]:_MT[238], arg this[83412]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method"
  {
    (83371 return(376759 call . this[83412] c"value"))
  }
  function LogicalOrReduceScanOp[83394](?).clone[83378](arg _mt[83418]:_MT[238], arg this[83416]:LogicalOrReduceScanOp[83394](?)) : _unknown[51] "method" "primary method"
  {
    (83388 return(83382 'new'(_chpl_manager = unmanaged[220](?))(83387 call LogicalOrReduceScanOp[376763](?)(eltType =(376768 call . this[83416] c"eltType")))))
  }
  type LogicalOrReduceScanOp[83394](?) val super[355731]:ReduceScanOp[82300] "super class" unknown eltType[83268] "type variable" unknown value[83275](83274 call _lor_id eltType[83268])
  type LogicalOrReduceScanOp[376763](?)
  function BitwiseAndReduceScanOp[83523](?).identity[83437](arg _mt[83527]:_MT[238], arg this[83525]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83443 return(83442 call _band_id(376774 call . this[83525] c"eltType")))
  }
  function BitwiseAndReduceScanOp[83523](?).accumulate[83452](arg _mt[83531]:_MT[238], arg this[83529]:BitwiseAndReduceScanOp[83523](?), arg x[83450]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83456 call &=(376779 call . this[83529] c"value") x[83450])
  }
  function BitwiseAndReduceScanOp[83523](?).accumulateOntoState[83466](arg _mt[83535]:_MT[238], arg this[83533]:BitwiseAndReduceScanOp[83523](?), ref arg state[83464]:_any[178](?), arg x[83468]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83472 call &= state[83464] x[83468])
  }
  function BitwiseAndReduceScanOp[83523](?).combine[83482](arg _mt[83539]:_MT[238], arg this[83537]:BitwiseAndReduceScanOp[83523](?), arg x[83480]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83489 call &=(376787 call . this[83537] c"value")(83486 call . x[83480] c"value"))
  }
  function BitwiseAndReduceScanOp[83523](?).generate[83497](arg _mt[83543]:_MT[238], arg this[83541]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method"
  {
    (83500 return(376792 call . this[83541] c"value"))
  }
  function BitwiseAndReduceScanOp[83523](?).clone[83507](arg _mt[83547]:_MT[238], arg this[83545]:BitwiseAndReduceScanOp[83523](?)) : _unknown[51] "method" "primary method"
  {
    (83517 return(83511 'new'(_chpl_manager = unmanaged[220](?))(83516 call BitwiseAndReduceScanOp[376796](?)(eltType =(376801 call . this[83545] c"eltType")))))
  }
  type BitwiseAndReduceScanOp[83523](?) val super[355733]:ReduceScanOp[82300] "super class" unknown eltType[83424] "type variable" unknown value[83431](83430 call _band_id eltType[83424])
  type BitwiseAndReduceScanOp[376796](?)
  function BitwiseOrReduceScanOp[83652](?).identity[83566](arg _mt[83656]:_MT[238], arg this[83654]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83572 return(83571 call _bor_id(376807 call . this[83654] c"eltType")))
  }
  function BitwiseOrReduceScanOp[83652](?).accumulate[83581](arg _mt[83660]:_MT[238], arg this[83658]:BitwiseOrReduceScanOp[83652](?), arg x[83579]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83585 call |=(376812 call . this[83658] c"value") x[83579])
  }
  function BitwiseOrReduceScanOp[83652](?).accumulateOntoState[83595](arg _mt[83664]:_MT[238], arg this[83662]:BitwiseOrReduceScanOp[83652](?), ref arg state[83593]:_any[178](?), arg x[83597]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83601 call |= state[83593] x[83597])
  }
  function BitwiseOrReduceScanOp[83652](?).combine[83611](arg _mt[83668]:_MT[238], arg this[83666]:BitwiseOrReduceScanOp[83652](?), arg x[83609]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83618 call |=(376820 call . this[83666] c"value")(83615 call . x[83609] c"value"))
  }
  function BitwiseOrReduceScanOp[83652](?).generate[83626](arg _mt[83672]:_MT[238], arg this[83670]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method"
  {
    (83629 return(376825 call . this[83670] c"value"))
  }
  function BitwiseOrReduceScanOp[83652](?).clone[83636](arg _mt[83676]:_MT[238], arg this[83674]:BitwiseOrReduceScanOp[83652](?)) : _unknown[51] "method" "primary method"
  {
    (83646 return(83640 'new'(_chpl_manager = unmanaged[220](?))(83645 call BitwiseOrReduceScanOp[376829](?)(eltType =(376834 call . this[83674] c"eltType")))))
  }
  type BitwiseOrReduceScanOp[83652](?) val super[355735]:ReduceScanOp[82300] "super class" unknown eltType[83553] "type variable" unknown value[83560](83559 call _bor_id eltType[83553])
  type BitwiseOrReduceScanOp[376829](?)
  function BitwiseXorReduceScanOp[83781](?).identity[83695](arg _mt[83785]:_MT[238], arg this[83783]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83701 return(83700 call _bxor_id(376840 call . this[83783] c"eltType")))
  }
  function BitwiseXorReduceScanOp[83781](?).accumulate[83710](arg _mt[83789]:_MT[238], arg this[83787]:BitwiseXorReduceScanOp[83781](?), arg x[83708]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83714 call ^=(376845 call . this[83787] c"value") x[83708])
  }
  function BitwiseXorReduceScanOp[83781](?).accumulateOntoState[83724](arg _mt[83793]:_MT[238], arg this[83791]:BitwiseXorReduceScanOp[83781](?), ref arg state[83722]:_any[178](?), arg x[83726]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83730 call ^= state[83722] x[83726])
  }
  function BitwiseXorReduceScanOp[83781](?).combine[83740](arg _mt[83797]:_MT[238], arg this[83795]:BitwiseXorReduceScanOp[83781](?), arg x[83738]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83747 call ^=(376853 call . this[83795] c"value")(83744 call . x[83738] c"value"))
  }
  function BitwiseXorReduceScanOp[83781](?).generate[83755](arg _mt[83801]:_MT[238], arg this[83799]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method"
  {
    (83758 return(376858 call . this[83799] c"value"))
  }
  function BitwiseXorReduceScanOp[83781](?).clone[83765](arg _mt[83805]:_MT[238], arg this[83803]:BitwiseXorReduceScanOp[83781](?)) : _unknown[51] "method" "primary method"
  {
    (83775 return(83769 'new'(_chpl_manager = unmanaged[220](?))(83774 call BitwiseXorReduceScanOp[376862](?)(eltType =(376867 call . this[83803] c"eltType")))))
  }
  type BitwiseXorReduceScanOp[83781](?) val super[355737]:ReduceScanOp[82300] "super class" unknown eltType[83682] "type variable" unknown value[83689](83688 call _bxor_id eltType[83682])
  type BitwiseXorReduceScanOp[376862](?)
  function _maxloc_id[83812](arg eltType[83810]:_any[178](?)) : _unknown[51]
  {
    (83831 return(83829 call _build_tuple(83820 call min(83818 call eltType[83810] 0))(83827 call max(83825 call eltType[83810] 1))))
  }
  function _minloc_id[83840](arg eltType[83838]:_any[178](?)) : _unknown[51]
  {
    (83846 return(83845 call max eltType[83838]))
  }
  function maxloc[84026](?).identity[83867](arg _mt[84030]:_MT[238], arg this[84028]:maxloc[84026](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (83873 return(83872 call _maxloc_id(376876 call . this[84028] c"eltType")))
  }
  function maxloc[84026](?).accumulate[83882](arg _mt[84034]:_MT[238], arg this[84032]:maxloc[84026](?), arg x[83880]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83888 call(376880 call . this[84032] c"accumulateOntoState")(376885 call . this[84032] c"value") x[83880])
  }
  function maxloc[84026](?).accumulateOntoState[83897](arg _mt[84038]:_MT[238], arg this[84036]:maxloc[84026](?), ref arg state[83895]:_any[178](?), arg x[83899]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(83972 call _cond_test(83965 call ||(83933 call ||(83909 call >(83904 call x[83899] 0)(83908 call state[83895] 0))(83931 call &&(83919 call ==(83914 call x[83899] 0)(83918 call state[83895] 0))(83929 call <(83924 call x[83899] 1)(83928 call state[83895] 1))))(83963 call &&(83941 call gotNaN(83939 call x[83899] 0))(83961 call ||(83949 call !(83948 call gotNaN(83946 call state[83895] 0)))(83959 call <(83954 call x[83899] 1)(83958 call state[83895] 1))))))
    {
      (83969 call = state[83895] x[83899])
    }
  }
  function maxloc[84026](?).combine[83984](arg _mt[84042]:_MT[238], arg this[84040]:maxloc[84026](?), arg x[83982]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83993 call(376902 call . this[84040] c"accumulateOntoState")(376907 call . this[84040] c"value")(83990 call . x[83982] c"value"))
  }
  function maxloc[84026](?).generate[84000](arg _mt[84046]:_MT[238], arg this[84044]:maxloc[84026](?)) : _unknown[51] "method" "primary method"
  {
    (84003 return(376912 call . this[84044] c"value"))
  }
  function maxloc[84026](?).clone[84010](arg _mt[84050]:_MT[238], arg this[84048]:maxloc[84026](?)) : _unknown[51] "method" "primary method"
  {
    (84020 return(84014 'new'(_chpl_manager = unmanaged[220](?))(84019 call maxloc[376916](?)(eltType =(376921 call . this[84048] c"eltType")))))
  }
  type maxloc[84026](?) val super[355739]:ReduceScanOp[82300] "super class" unknown eltType[83854] "type variable" unknown value[83861](83860 call _maxloc_id eltType[83854])
  type maxloc[376916](?)
  function minloc[84228](?).identity[84069](arg _mt[84232]:_MT[238], arg this[84230]:minloc[84228](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (84075 return(84074 call _minloc_id(376927 call . this[84230] c"eltType")))
  }
  function minloc[84228](?).accumulate[84084](arg _mt[84236]:_MT[238], arg this[84234]:minloc[84228](?), arg x[84082]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (84090 call(376931 call . this[84234] c"accumulateOntoState")(376936 call . this[84234] c"value") x[84082])
  }
  function minloc[84228](?).accumulateOntoState[84099](arg _mt[84240]:_MT[238], arg this[84238]:minloc[84228](?), ref arg state[84097]:_any[178](?), arg x[84101]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(84174 call _cond_test(84167 call ||(84135 call ||(84111 call <(84106 call x[84101] 0)(84110 call state[84097] 0))(84133 call &&(84121 call ==(84116 call x[84101] 0)(84120 call state[84097] 0))(84131 call <(84126 call x[84101] 1)(84130 call state[84097] 1))))(84165 call &&(84143 call gotNaN(84141 call x[84101] 0))(84163 call ||(84151 call !(84150 call gotNaN(84148 call state[84097] 0)))(84161 call <(84156 call x[84101] 1)(84160 call state[84097] 1))))))
    {
      (84171 call = state[84097] x[84101])
    }
  }
  function minloc[84228](?).combine[84186](arg _mt[84244]:_MT[238], arg this[84242]:minloc[84228](?), arg x[84184]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (84195 call(376953 call . this[84242] c"accumulateOntoState")(376958 call . this[84242] c"value")(84192 call . x[84184] c"value"))
  }
  function minloc[84228](?).generate[84202](arg _mt[84248]:_MT[238], arg this[84246]:minloc[84228](?)) : _unknown[51] "method" "primary method"
  {
    (84205 return(376963 call . this[84246] c"value"))
  }
  function minloc[84228](?).clone[84212](arg _mt[84252]:_MT[238], arg this[84250]:minloc[84228](?)) : _unknown[51] "method" "primary method"
  {
    (84222 return(84216 'new'(_chpl_manager = unmanaged[220](?))(84221 call minloc[376967](?)(eltType =(376972 call . this[84250] c"eltType")))))
  }
  type minloc[84228](?) val super[355741]:ReduceScanOp[82300] "super class" unknown eltType[84056] "type variable" unknown value[84063](84062 call _minloc_id eltType[84056])
  type minloc[376967](?)
  function gotNaN[84259](arg value[84257]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (84269 return(84268 call isnan value[84257]))
  }
  where {
    (84264 call isReal value[84257])
  }
  function gotNaN[84279](arg value[84277]:_any[178](?)) param : _unknown[51] "private"
  {
    (84282 return 0)
  }
  (355166 'used modules list'(81780 'use' ChapelStandard[20267])(81784 'use' ChapelLocks[187302]))
}