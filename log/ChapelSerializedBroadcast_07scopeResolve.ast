AST dump for ChapelSerializedBroadcast after pass scopeResolve.
Module use list: ChapelLocale CPtr 

{
  unknown chpl__enableSerializedGlobals[171423] "config" "param" 1
  (171426 'end of statement')
  function chpl_get_global_serialize_table[171433](arg idx[171430] :
  int(64)[13]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
  }
  { scopeless type
    c_void_ptr[149]
  }
  function chpl__broadcastGlobal[171446](ref arg localeZeroGlobal[171443] :
  unknown T[171441], arg id[171449] :
  int(64)[13]) : _unknown[51] "no return value for void"
  {
    if(171787 call _cond_test(171461 call &&(171456 call isArray localeZeroGlobal[171443])(171460 call chpl__isArrayView localeZeroGlobal[171443])))
    {
      (171482 call halt "internal error: can't broadcast module-scope arrays yet")
    }
    {
      const data[171491] "const"(171490 call(171486 call . localeZeroGlobal[171443] c"chpl__serialize"))
      (171494 'end of statement')
      const root[171500] "const"(171497 call .(361345 call here[90435]) c"id")
      (171503 'end of statement')
      {
        unknown tmpIter[171574] "expr temp" "maybe ref" "no copy" "temp"
        (171577 'move' tmpIter[171574] Locales[113656])
        unknown isRngDomArr[171768] "maybe param" "temp"
        (171783 'move' isRngDomArr[171768](171781 call ||(171770 call isBoundedRange tmpIter[171574])(171779 call ||(171773 call isDomain tmpIter[171574])(171776 call isArray tmpIter[171574]))))
        if isRngDomArr[171768]
        {
          const _coforallCount[171640] "const" "end count" "temp"
          (171705 'move' _coforallCount[171640](171702 call _endCountAlloc 0))
          unknown numTasks[171641] "temp"
          (171689 'move' numTasks[171641](171685 call . tmpIter[171574] c"size"))
          (171680 call _upEndCount _coforallCount[171640] 0 numTasks[171641])
          unknown _indexOfInterest[171647] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[171648] "expr temp" "temp"
          (171657 'move' _iterator[171648](171655 call _getIterator tmpIter[171574]))
          Defer
          {
            {
              (171673 call _freeIterator _iterator[171648])
            }
          }
          { scopeless type
            (171662 'move' _indexOfInterest[171647](171659 call iteratorIndex _iterator[171648]))
          }
          ForLoop[171649]
          {
            unknown loc[171666] "coforall index var" "index var" "insert auto destroy"
            (171668 'move' loc[171666] _indexOfInterest[171647])
            const tmp[171580] "const" "temp"
            (171582 'move' tmp[171580](171584 'deref'(171585 '_wide_get_locale' loc[171666])))
            {
              {
                if(171593 call _cond_test(171595 call !=(171597 call .(361350 call here[90435]) c"id") root[171500]))
                {
                  unknown temp[171603] "no auto destroy" "no copy"(171609 call(171605 call .(171606 'typeof' localeZeroGlobal[171443]) c"chpl__deserialize") data[171491])
                  (171612 'end of statement')
                  const destVoidPtr[171614] "const"(171616 call chpl_get_global_serialize_table id[171449])
                  (171619 'end of statement')
                  const dest[171621] "const"(171623 call _cast(171625 call c_ptr[205045](?)(171626 'typeof' localeZeroGlobal[171443])) destVoidPtr[171614])
                  (171630 'end of statement')
                  (171631 '='(171636 call(171633 call . dest[171621] c"deref")) temp[171603])
                }
              }
              (171642 call _downEndCount _coforallCount[171640] nil[44])
              (171588 'coforall on block' 0 tmp[171580])
            }
            label _continueLabel[171652]
            _indexOfInterest[171647]
            _iterator[171648]
          }
          label _breakLabel[171653]
          Defer
          {
            {
              (171692 call _endCountFree _coforallCount[171640])
            }
          }
          (171697 call _waitEndCount _coforallCount[171640] 0 numTasks[171641])
        }
        {
          const _coforallCount[171709] "const" "end count" "temp"
          (171765 'move' _coforallCount[171709](171762 call _endCountAlloc 0))
          unknown _indexOfInterest[171716] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[171717] "expr temp" "temp"
          (171726 'move' _iterator[171717](171724 call _getIterator tmpIter[171574]))
          Defer
          {
            {
              (171742 call _freeIterator _iterator[171717])
            }
          }
          { scopeless type
            (171731 'move' _indexOfInterest[171716](171728 call iteratorIndex _iterator[171717]))
          }
          ForLoop[171718]
          {
            unknown loc[171735] "coforall index var" "index var" "insert auto destroy"
            (171737 'move' loc[171735] _indexOfInterest[171716])
            (171749 call _upEndCount _coforallCount[171709] 0)
            const tmp[171566] "const" "temp"
            (171568 'move' tmp[171566](171564 'deref'(171563 '_wide_get_locale' loc[171735])))
            {
              {
                if(171558 call _cond_test(171512 call !=(171508 call .(361347 call here[90435]) c"id") root[171500]))
                {
                  unknown temp[171522] "no auto destroy" "no copy"(171521 call(171516 call .(171515 'typeof' localeZeroGlobal[171443]) c"chpl__deserialize") data[171491])
                  (171525 'end of statement')
                  const destVoidPtr[171531] "const"(171530 call chpl_get_global_serialize_table id[171449])
                  (171534 'end of statement')
                  const dest[171543] "const"(171541 call _cast(171540 call c_ptr[205045](?)(171538 'typeof' localeZeroGlobal[171443])) destVoidPtr[171531])
                  (171546 'end of statement')
                  (171556 '='(171554 call(171550 call . dest[171543] c"deref")) temp[171522])
                }
              }
              (171711 call _downEndCount _coforallCount[171709] nil[44])
              (171571 'coforall on block' 0 tmp[171566])
            }
            label _continueLabel[171721]
            _indexOfInterest[171716]
            _iterator[171717]
          }
          label _breakLabel[171722]
          Defer
          {
            {
              (171753 call _endCountFree _coforallCount[171709])
            }
          }
          (171758 call _waitEndCount _coforallCount[171709] 0)
        }
      }
    }
  }
  where {
    chpl__enableSerializedGlobals[171423]
  }
  function chpl__destroyBroadcastedGlobal[171799](ref arg localeZeroGlobal[171797]:_any[178](?), arg id[171802] :
  int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown globalType[171808] "type variable"(171807 'typeof' localeZeroGlobal[171797])
    const root[171816] "const"(171813 call .(361353 call here[90435]) c"id")
    (171819 'end of statement')
    {
      unknown tmpIter[171881] "expr temp" "maybe ref" "no copy" "temp"
      (171884 'move' tmpIter[171881] Locales[113656])
      unknown isRngDomArr[172068] "maybe param" "temp"
      (172083 'move' isRngDomArr[172068](172081 call ||(172070 call isBoundedRange tmpIter[171881])(172079 call ||(172073 call isDomain tmpIter[171881])(172076 call isArray tmpIter[171881]))))
      if isRngDomArr[172068]
      {
        const _coforallCount[171940] "const" "end count" "temp"
        (172005 'move' _coforallCount[171940](172002 call _endCountAlloc 0))
        unknown numTasks[171941] "temp"
        (171989 'move' numTasks[171941](171985 call . tmpIter[171881] c"size"))
        (171980 call _upEndCount _coforallCount[171940] 0 numTasks[171941])
        unknown _indexOfInterest[171947] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[171948] "expr temp" "temp"
        (171957 'move' _iterator[171948](171955 call _getIterator tmpIter[171881]))
        Defer
        {
          {
            (171973 call _freeIterator _iterator[171948])
          }
        }
        { scopeless type
          (171962 'move' _indexOfInterest[171947](171959 call iteratorIndex _iterator[171948]))
        }
        ForLoop[171949]
        {
          unknown loc[171966] "coforall index var" "index var" "insert auto destroy"
          (171968 'move' loc[171966] _indexOfInterest[171947])
          const tmp[171887] "const" "temp"
          (171889 'move' tmp[171887](171891 'deref'(171892 '_wide_get_locale' loc[171966])))
          {
            {
              if(171900 call _cond_test(171902 call !=(171904 call .(361358 call here[90435]) c"id") root[171816]))
              {
                const voidPtr[171910] "const"(171912 call chpl_get_global_serialize_table id[171802])
                (171915 'end of statement')
                unknown ptr[171917](171919 call _cast(171921 call c_ptr[205045](?) globalType[171808]) voidPtr[171910])
                (171925 'end of statement')
                unknown temp[171927] "no auto destroy" "no copy"(171932 call(171929 call . ptr[171917] c"deref"))
                (171934 'end of statement')
                (171936 call chpl__autoDestroy temp[171927])
              }
            }
            (171942 call _downEndCount _coforallCount[171940] nil[44])
            (171895 'coforall on block' 0 tmp[171887])
          }
          label _continueLabel[171952]
          _indexOfInterest[171947]
          _iterator[171948]
        }
        label _breakLabel[171953]
        Defer
        {
          {
            (171992 call _endCountFree _coforallCount[171940])
          }
        }
        (171997 call _waitEndCount _coforallCount[171940] 0 numTasks[171941])
      }
      {
        const _coforallCount[172009] "const" "end count" "temp"
        (172065 'move' _coforallCount[172009](172062 call _endCountAlloc 0))
        unknown _indexOfInterest[172016] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[172017] "expr temp" "temp"
        (172026 'move' _iterator[172017](172024 call _getIterator tmpIter[171881]))
        Defer
        {
          {
            (172042 call _freeIterator _iterator[172017])
          }
        }
        { scopeless type
          (172031 'move' _indexOfInterest[172016](172028 call iteratorIndex _iterator[172017]))
        }
        ForLoop[172018]
        {
          unknown loc[172035] "coforall index var" "index var" "insert auto destroy"
          (172037 'move' loc[172035] _indexOfInterest[172016])
          (172049 call _upEndCount _coforallCount[172009] 0)
          const tmp[171873] "const" "temp"
          (171875 'move' tmp[171873](171871 'deref'(171870 '_wide_get_locale' loc[172035])))
          {
            {
              if(171865 call _cond_test(171828 call !=(171824 call .(361355 call here[90435]) c"id") root[171816]))
              {
                const voidPtr[171834] "const"(171833 call chpl_get_global_serialize_table id[171802])
                (171837 'end of statement')
                unknown ptr[171846](171844 call _cast(171843 call c_ptr[205045](?) globalType[171808]) voidPtr[171834])
                (171849 'end of statement')
                unknown temp[171856] "no auto destroy" "no copy"(171855 call(171851 call . ptr[171846] c"deref"))
                (171859 'end of statement')
                (171863 call chpl__autoDestroy temp[171856])
              }
            }
            (172011 call _downEndCount _coforallCount[172009] nil[44])
            (171878 'coforall on block' 0 tmp[171873])
          }
          label _continueLabel[172021]
          _indexOfInterest[172016]
          _iterator[172017]
        }
        label _breakLabel[172022]
        Defer
        {
          {
            (172053 call _endCountFree _coforallCount[172009])
          }
        }
        (172058 call _waitEndCount _coforallCount[172009] 0)
      }
    }
  }
  where {
    chpl__enableSerializedGlobals[171423]
  }
  (355094 'used modules list'(171416 'use' ChapelLocale[89844])(171420 'use' CPtr[204934]))
}