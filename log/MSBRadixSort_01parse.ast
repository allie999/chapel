AST dump for MSBRadixSort after pass parse.
Module use list: 

{
  (353052 'use' ChapelStandard)
  (287993 'import' Sort.{defaultComparator, ShellSort})
  (288000 'use'(287997 call . super c"RadixSortHelp"))
  type MSBRadixSortSettings[288042](?) unknown DISTRIBUTE_BUFFER[288004] "param" 5 const sortSwitch[288009] "const" 256 const minForTask[288014] "const" 256 unknown CHECK_SORTS[288019] "param" 0 unknown progress[288024] "param" 0 const alwaysSerial[288029] "const" 0 const maxTasks[288037] "const"(288034 call . here c"maxTaskPar")
  function msbRadixSort[288053](arg Data[288050] :
  (288047 call chpl__buildArrayRuntimeType nil[44]), arg comparator[288058] :
  unknown rec[288055] =
  defaultComparator) : _unknown[51]
  {
    { scopeless
      unknown endbit[288063] int[13]
      (288066 'end of statement')
    }
    (288074 call = endbit(288073 call msbRadixSortParamLastStartBit Data comparator))
    if(288089 call _cond_test(288079 call < endbit 0))
    {
      { scopeless
        (288086 call = endbit(288085 call max int[13]))
      }
    }
    (288123 call msbRadixSort(start_n =(288099 call .(288096 call . Data c"_dom") c"low"))(end_n =(288108 call .(288105 call . Data c"_dom") c"high")) Data comparator(startbit = 0)(endbit = endbit)(settings =(288118 'new'(288121 call MSBRadixSortSettings))))
  }
  function msbRadixSort[288133](arg start_n[288130] :
  int[13], arg end_n[288136] :
  int[13], arg A[288142] :
  (288139 call chpl__buildArrayRuntimeType nil[44]), arg criterion[288145]:_any[178](?), arg startbit[288148] :
  int[13], arg endbit[288152] :
  int[13], arg settings[288155]:_any[178](?)) : _unknown[51]
  {
    if(288163 call _cond_test(288159 call > startbit endbit))
    {
      { scopeless
        (288161 return)
      }
    }
    if(288216 call _cond_test(288179 call <(288171 call - end_n start_n)(288176 call . settings c"sortSwitch")))
    {
      (288192 call(288182 call . ShellSort c"shellSort") A criterion(start = start_n)(end = end_n))
      if(288209 call _cond_test(288198 call . settings c"CHECK_SORTS"))
      {
        { scopeless
          (288207 call checkSorted start_n end_n A criterion)
        }
      }
      (288214 return)
    }
    if(288270 call _cond_test(288223 call . settings c"progress"))
    {
      { scopeless
        (288268 call writeln "radix sort start=" start_n " end=" end_n " startbit=" startbit " endbit=" endbit)
      }
    }
    { scopeless
      const radixbits[288276] "const" RADIX_BITS
      (288279 'end of statement')
    }
    { scopeless
      const radix[288287] "const"(288285 call +(288282 call << 1 radixbits) 1)
      (288290 'end of statement')
    }
    { scopeless
      unknown offsets[288301](288299 call chpl__buildArrayRuntimeType(288297 call chpl__ensureDomainExpr(288293 call chpl_build_bounded_range 0 radix)) int[13])
      (288304 'end of statement')
    }
    { scopeless
      unknown end_offsets[288315](288313 call chpl__buildArrayRuntimeType(288311 call chpl__ensureDomainExpr(288307 call chpl_build_bounded_range 0 radix)) int[13])
      (288318 'end of statement')
    }
    unknown ubitsType[288332] "type variable"(288331 'typeof'(288330 call(288327 call binForRecord(288323 call A start_n) criterion startbit) 1))
    { scopeless
      unknown min_ubits[288340](288339 call max ubitsType) ubitsType
      (288343 'end of statement')
    }
    { scopeless
      unknown max_ubits[288346] 0 ubitsType
      (288349 'end of statement')
    }
    { scopeless
      unknown min_bin[288354](288352 call + radix 1)
      (288357 'end of statement')
    }
    { scopeless
      unknown max_bin[288359] 0
      (288362 'end of statement')
    }
    { scopeless
      unknown any_ending[288364] 0
      (288367 'end of statement')
    }
    if(288628 call _cond_test(288375 call ==(288371 call . settings c"alwaysSerial") 0))
    {
      Forall {
        induction variables:
          
          unknown i[288496] "index var" "insert auto destroy"
        iterated expressions:
          (288380 call chpl_build_bounded_range start_n end_n)
        shadow variables:
          offsets[288384] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
          min_ubits[288392] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
          max_ubits[288399] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
          any_ending[288406] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          { scopeless
            const tmp[288425] "const" "temp"(288424 call binForRecord(288420 call A i) criterion startbit)
            (288432 call _check_tuple_var_decl tmp[288425] 2)
            const bin[288411] "const"(288426 call tmp[288425] 0)
            const ubits[288413] "const"(288429 call tmp[288425] 1)
            (288437 'end of statement')
          }
          if(288448 call _cond_test(288441 call < ubits min_ubits))
          {
            { scopeless
              (288445 call = min_ubits ubits)
            }
          }
          if(288462 call _cond_test(288455 call > ubits max_ubits))
          {
            { scopeless
              (288459 call = max_ubits ubits)
            }
          }
          if(288482 call _cond_test(288475 call ||(288469 call == bin 0)(288473 call == bin radix)))
          {
            { scopeless
              (288479 call = any_ending 1)
            }
          }
          (288492 call +=(288490 call offsets bin) 1)
        }
      }
    }
    {
      {
        unknown _indexOfInterest[288589] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[288590] "expr temp" "temp"
        (288599 'move' _iterator[288590](288597 call _getIterator(288604 call chpl_direct_range_iter start_n end_n 1)))
        Defer
        {
          {
            (288620 call _freeIterator _iterator[288590])
          }
        }
        { scopeless type
          (288609 'move' _indexOfInterest[288589](288606 call iteratorIndex _iterator[288590]))
        }
        ForLoop[288591]
        {
          unknown i[288613] "index var" "insert auto destroy"
          (288615 'move' i[288613] _indexOfInterest[288589])
          {
            { scopeless
              const tmp[288519] "const" "temp"(288518 call binForRecord(288514 call A i) criterion startbit)
              (288526 call _check_tuple_var_decl tmp[288519] 2)
              const bin[288505] "const"(288520 call tmp[288519] 0)
              const ubits[288507] "const"(288523 call tmp[288519] 1)
              (288531 'end of statement')
            }
            if(288542 call _cond_test(288535 call < ubits min_ubits))
            {
              { scopeless
                (288539 call = min_ubits ubits)
              }
            }
            if(288556 call _cond_test(288549 call > ubits max_ubits))
            {
              { scopeless
                (288553 call = max_ubits ubits)
              }
            }
            if(288576 call _cond_test(288569 call ||(288563 call == bin 0)(288567 call == bin radix)))
            {
              { scopeless
                (288573 call = any_ending 1)
              }
            }
            (288586 call +=(288584 call offsets bin) 1)
          }
          label _continueLabel[288594]
          _indexOfInterest[288589]
          _iterator[288590]
        }
        label _breakLabel[288595]
      }
    }
    if(288669 call _cond_test(288634 call == any_ending 0))
    {
      { scopeless
        unknown dataStartBit[288642](288641 call findDataStartBit startbit min_ubits max_ubits)
        (288645 'end of statement')
      }
      if(288665 call _cond_test(288649 call > dataStartBit startbit))
      {
        (288660 call msbRadixSort start_n end_n A criterion dataStartBit endbit settings)
        (288663 return)
      }
    }
    if(288696 call _cond_test(288674 call . settings c"progress"))
    {
      { scopeless
        (288694 call writeln "accumulate")
      }
    }
    { scopeless
      unknown sum[288702] 0
      (288705 'end of statement')
    }
    {
      unknown _indexOfInterest[288747] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[288748] "expr temp" "temp"
      (288762 'move' _iterator[288748](288714 call _build_tuple(288757 call _getIterator offsets)(288760 call _getIterator end_offsets)))
      Defer
      {
        {
          (288792 call _freeIterator _iterator[288748])
        }
      }
      { scopeless type
        (288767 'move' _indexOfInterest[288747](288764 call iteratorIndex _iterator[288748]))
      }
      ForLoop[288749]
      {
        (288772 call _check_tuple_var_decl _indexOfInterest[288747] 2)
        unknown off[288778] "index var" "insert auto destroy"
        (288780 'move' off[288778](288776 call _indexOfInterest[288747] 0))
        unknown end[288785] "index var" "insert auto destroy"
        (288787 'move' end[288785](288783 call _indexOfInterest[288747] 1))
        {
          { scopeless
            unknown binstart[288716] sum
            (288719 'end of statement')
          }
          (288723 call += sum off)
          { scopeless
            unknown binend[288727] sum
            (288730 'end of statement')
          }
          (288736 call = off(288734 call + start_n binstart))
          (288744 call = end(288742 call + start_n binend))
        }
        label _continueLabel[288752]
        _indexOfInterest[288747]
        _iterator[288748]
      }
      label _breakLabel[288753]
    }
    { scopeless
      unknown curbin[288800] 0
      (288803 'end of statement')
    }
    if(288829 call _cond_test(288805 call . settings c"progress"))
    {
      { scopeless
        (288827 call writeln "shuffle")
      }
    }
    {
      unknown tmp[289359] "temp"
      (289377 'move' tmp[289359](289375 call _cond_test 1))
      WhileDo[289364]
      {
        {
          {
            unknown tmp[288857] "temp"
            (288901 'move' tmp[288857](288886 call _cond_test(288888 call &&(288890 call <= curbin radix)(288894 call ==(288896 call offsets curbin)(288899 call end_offsets curbin)))))
            WhileDo[288862]
            {
              {
                (288853 call += curbin 1)
              }
              label _continueLabel[288860]
              (288881 'move' tmp[288857](288866 call _cond_test(288868 call &&(288870 call <= curbin radix)(288874 call ==(288876 call offsets curbin)(288879 call end_offsets curbin)))))
              tmp[288857]
            }
            label _breakLabel[288861]
          }
          if(288913 call _cond_test(288907 call > curbin radix))
          {
            break nil[44]
          }
          { scopeless
            unknown max_buf[288923] "param"(288920 call . settings c"DISTRIBUTE_BUFFER")
            (288926 'end of statement')
          }
          { scopeless
            unknown buf[288934](288932 call * max_buf(288929 call . A c"eltType"))
            (288937 'end of statement')
          }
          { scopeless
            unknown used_buf[288939] 0
            (288942 'end of statement')
          }
          { scopeless
            unknown end[288947](288946 call end_offsets curbin)
            (288950 'end of statement')
          }
          { scopeless
            unknown endfast[288968](288967 call max(288955 call offsets curbin)(288965 call -(288960 call end_offsets curbin)(288963 call * 2 max_buf)))
            (288971 'end of statement')
          }
          { scopeless
            unknown bufstart[288986](288985 call max(288976 call offsets curbin)(288983 call -(288981 call end_offsets curbin) max_buf))
            (288989 'end of statement')
          }
          { scopeless
            unknown i[288991] bufstart
            (288994 'end of statement')
          }
          {
            unknown tmp[289021] "temp"
            (289045 'move' tmp[289021](289040 call _cond_test(289042 call < i end)))
            WhileDo[289026]
            {
              {
                (289007 call <=>(289002 call buf used_buf)(289006 call A i))
                (289013 call += used_buf 1)
                (289018 call += i 1)
              }
              label _continueLabel[289024]
              (289035 'move' tmp[289021](289030 call _cond_test(289032 call < i end)))
              tmp[289021]
            }
            label _breakLabel[289025]
          }
          {
            unknown tmp[289147] "temp"
            (289175 'move' tmp[289147](289168 call _cond_test(289170 call <(289172 call offsets curbin) endfast)))
            WhileDo[289152]
            {
              {
                {
                  unknown j[289109] 0
                  unknown tmp[289110] "maybe param" "temp"
                  (289122 'move' tmp[289110](289120 call chpl_compute_low_param_loop_bound 0(289058 call - max_buf 1)))
                  unknown tmp[289111] "maybe param" "temp"
                  (289132 'move' tmp[289111](289130 call chpl_compute_high_param_loop_bound 0(289127 call - max_buf 1)))
                  unknown tmp[289112] "maybe param" "temp"
                  (289135 'move' tmp[289112] 1)
                  ParamForLoop[289137]
                  { j[289109] tmp[289110] tmp[289111] tmp[289112]
                    {
                      { scopeless
                        const tmp[289076] "const" "temp"(289075 call binForRecord(289071 call buf j) criterion startbit)
                        (289080 call _check_tuple_var_decl tmp[289076] 2)
                        const bin[289062] "const"(289077 call tmp[289076] 0)
                        (289085 'end of statement')
                      }
                      (289098 call <=>(289093 call A(289091 call offsets bin))(289097 call buf j))
                      (289106 call +=(289104 call offsets bin) 1)
                    }
                  }
                  label _unused_continueLabel[289114]
                  label _breakLabel[289113]
                }
              }
              label _continueLabel[289150]
              (289163 'move' tmp[289147](289156 call _cond_test(289158 call <(289160 call offsets curbin) endfast)))
              tmp[289147]
            }
            label _breakLabel[289151]
          }
          {
            unknown tmp[289328] "temp"
            (289356 'move' tmp[289328](289349 call _cond_test(289351 call <(289353 call offsets curbin) end)))
            WhileDo[289333]
            {
              {
                { scopeless
                  unknown j[289186] 0
                  (289189 'end of statement')
                }
                {
                  unknown tmp[289289] "temp"
                  (289325 'move' tmp[289289](289314 call _cond_test(289316 call &&(289318 call >= used_buf 0)(289322 call < j used_buf))))
                  WhileDo[289294]
                  {
                    {
                      { scopeless
                        const tmp[289215] "const" "temp"(289214 call binForRecord(289210 call buf j) criterion startbit)
                        (289219 call _check_tuple_var_decl tmp[289215] 2)
                        const bin[289201] "const"(289216 call tmp[289215] 0)
                        (289224 'end of statement')
                      }
                      { scopeless
                        unknown offset[289230](289229 call offsets bin)
                        (289233 'end of statement')
                      }
                      (289242 call <=>(289237 call A offset)(289241 call buf j))
                      (289250 call +=(289248 call offsets bin) 1)
                      if(289280 call _cond_test(289261 call &&(289255 call == bin curbin)(289259 call >= offset bufstart)))
                      {
                        (289265 call -= used_buf 1)
                        (289277 call <=>(289272 call buf j)(289276 call buf used_buf))
                      }
                      (289286 call += j 1)
                    }
                    label _continueLabel[289292]
                    (289309 'move' tmp[289289](289298 call _cond_test(289300 call &&(289302 call >= used_buf 0)(289306 call < j used_buf))))
                    tmp[289289]
                  }
                  label _breakLabel[289293]
                }
              }
              label _continueLabel[289331]
              (289344 'move' tmp[289328](289337 call _cond_test(289339 call <(289341 call offsets curbin) end)))
              tmp[289328]
            }
            label _breakLabel[289332]
          }
        }
        label _continueLabel[289362]
        (289370 'move' tmp[289359](289368 call _cond_test 1))
        tmp[289359]
      }
      label _breakLabel[289363]
    }
    if(289405 call _cond_test(289381 call . settings c"progress"))
    {
      { scopeless
        (289403 call writeln "sort sub-problems")
      }
    }
    (289415 call =(289413 call offsets 0) start_n)
    {
      unknown _indexOfInterest[289438] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[289439] "expr temp" "temp"
      (289448 'move' _iterator[289439](289446 call _getIterator(289453 call chpl_direct_range_iter 1 radix 1)))
      Defer
      {
        {
          (289469 call _freeIterator _iterator[289439])
        }
      }
      { scopeless type
        (289458 'move' _indexOfInterest[289438](289455 call iteratorIndex _iterator[289439]))
      }
      ForLoop[289440]
      {
        unknown i[289462] "index var" "insert auto destroy"
        (289464 'move' i[289462] _indexOfInterest[289438])
        {
          (289434 call =(289426 call offsets i)(289433 call end_offsets(289430 call - i 1)))
        }
        label _continueLabel[289443]
        _indexOfInterest[289438]
        _iterator[289439]
      }
      label _breakLabel[289444]
    }
    if(289870 call _cond_test(289481 call ==(289477 call . settings c"alwaysSerial") 0))
    {
      { scopeless
        const subbits[289487] "const"(289485 call + startbit radixbits)
        (289490 'end of statement')
      }
      { scopeless
        unknown nbigsubs[289493] 0
        (289496 'end of statement')
      }
      { scopeless
        unknown bigsubs[289511](289509 call chpl__buildArrayRuntimeType(289507 call chpl__ensureDomainExpr(289499 call chpl_build_bounded_range 0 radix))(289505 call _build_tuple int[13] int[13]))
        (289514 'end of statement')
      }
      { scopeless
        const runningNow[289521] "const"(289520 call(289516 call . here c"runningTasks"))
        (289524 'end of statement')
      }
      {
        unknown _indexOfInterest[289648] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289649] "expr temp" "temp"
        (289658 'move' _iterator[289649](289656 call _getIterator(289666 call chpl_direct_range_iter 1(289663 call - radix 1) 1)))
        Defer
        {
          {
            (289682 call _freeIterator _iterator[289649])
          }
        }
        { scopeless type
          (289671 'move' _indexOfInterest[289648](289668 call iteratorIndex _iterator[289649]))
        }
        ForLoop[289650]
        {
          unknown bin[289675] "index var" "insert auto destroy"
          (289677 'move' bin[289675] _indexOfInterest[289648])
          {
            { scopeless
              const bin_start[289537] "const"(289536 call offsets bin)
              (289540 'end of statement')
            }
            { scopeless
              const bin_end[289563] "const"(289560 IfExpr (289547 call <=(289544 call + bin 1) radix) then
              { scopeless
                (289557 call -(289555 call offsets(289552 call + bin 1)) 1)
              } else
              { scopeless
                end_n
              } )
              (289566 'end of statement')
            }
            { scopeless
              const num[289574] "const"(289572 call -(289569 call + 1 bin_end) bin_start)
              (289577 'end of statement')
            }
            if(289643 call _cond_test(289586 call ||(289580 call <= num 1)(289584 call >= startbit endbit)))
            {
            }
            {
              { scopeless
                if(289639 call _cond_test(289607 call ||(289596 call < num(289593 call . settings c"minForTask"))(289605 call >= runningNow(289602 call . settings c"maxTasks"))))
                {
                  (289618 call msbRadixSort bin_start bin_end A criterion subbits endbit settings)
                }
                {
                  (289630 call =(289624 call bigsubs nbigsubs)(289628 call _build_tuple bin_start bin_end))
                  (289636 call += nbigsubs 1)
                }
              }
            }
          }
          label _continueLabel[289653]
          _indexOfInterest[289648]
          _iterator[289649]
        }
        label _breakLabel[289654]
      }
      Forall {
        induction variables:
          
          unknown bin[289720] "index var" "insert auto destroy"
          
          unknown chpl_idx_2[289722] "index var" "an _indexOfInterest or chpl__followIdx variable" "insert auto destroy" "temp"
        iterated expressions:
          (289702 call #(289699 call chpl_build_low_bounded_range 0) nbigsubs)
          bigsubs
        shadow variables:
        other variables
          forall body
        {
          (289727 call _check_tuple_var_decl chpl_idx_2[289722] 2)
          unknown bin_start[289733] "index var" "insert auto destroy"
          (289735 'move' bin_start[289733](289731 call chpl_idx_2[289722] 0))
          unknown bin_end[289740] "index var" "insert auto destroy"
          (289742 'move' bin_end[289740](289738 call chpl_idx_2[289722] 1))
          (289716 call msbRadixSort bin_start bin_end A criterion subbits endbit settings)
        }
      }
    }
    {
      {
        unknown _indexOfInterest[289828] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289829] "expr temp" "temp"
        (289838 'move' _iterator[289829](289836 call _getIterator(289846 call chpl_direct_range_iter 1(289843 call - radix 1) 1)))
        Defer
        {
          {
            (289862 call _freeIterator _iterator[289829])
          }
        }
        { scopeless type
          (289851 'move' _indexOfInterest[289828](289848 call iteratorIndex _iterator[289829]))
        }
        ForLoop[289830]
        {
          unknown bin[289855] "index var" "insert auto destroy"
          (289857 'move' bin[289855] _indexOfInterest[289828])
          {
            { scopeless
              const bin_start[289757] "const"(289756 call offsets bin)
              (289760 'end of statement')
            }
            { scopeless
              const bin_end[289783] "const"(289780 IfExpr (289767 call <=(289764 call + bin 1) radix) then
              { scopeless
                (289777 call -(289775 call offsets(289772 call + bin 1)) 1)
              } else
              { scopeless
                end_n
              } )
              (289786 'end of statement')
            }
            { scopeless
              const num[289794] "const"(289792 call -(289789 call + 1 bin_end) bin_start)
              (289797 'end of statement')
            }
            if(289824 call _cond_test(289806 call ||(289800 call <= num 1)(289804 call >= startbit endbit)))
            {
            }
            {
              (289821 call msbRadixSort bin_start bin_end A criterion(289817 call + startbit radixbits) endbit settings)
            }
          }
          label _continueLabel[289833]
          _indexOfInterest[289828]
          _iterator[289829]
        }
        label _breakLabel[289834]
      }
    }
    if(289886 call _cond_test(289875 call . settings c"CHECK_SORTS"))
    {
      { scopeless
        (289884 call checkSorted start_n end_n A criterion)
      }
    }
  }
}